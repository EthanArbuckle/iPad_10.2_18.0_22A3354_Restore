@implementation HMDHome

- (void)clearEventsWithCompletion:(id)a3
{
  void *v4;
  uint64_t v5;
  HMDHome *v6;

  v4 = _Block_copy(a3);
  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = v4;
  v6 = self;
  sub_22192546C((uint64_t)sub_2219258F0, v5);

  swift_release();
}

- (void)registerWiFiInfoFetchMessage
{
  HMDHome *v2;

  v2 = self;
  HMDHome.registerWiFiInfoFetchMessage()();

}

- (void)handleWiFiInfoFetchWithMessage:(id)a3
{
  id v4;
  HMDHome *v5;

  v4 = a3;
  v5 = self;
  HMDHome.handleWiFiInfoFetch(message:rapportDeviceDiscovery:)(v4, (uint64_t (*)(char *))sub_22198A67C, 0);

}

- (id)makeMatterCapabilitiesObjectForAssetFilename:(int64_t)a3
{
  return sub_2219C9A4C(a3);
}

- (NSString)contextID
{
  void *v2;
  void *v3;

  -[HMDHome uuid](self, "uuid");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "UUIDString");
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  return (NSString *)v3;
}

- (NSUUID)contextSPIUniqueIdentifier
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  +[HMDProcessInfo privateClientIdentifierSalt](HMDProcessInfo, "privateClientIdentifierSalt");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = (void *)MEMORY[0x24BDD1880];
  -[HMDHome uuid](self, "uuid");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "hm_deriveUUIDFromBaseUUID:identifierSalt:", v5, v3);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  return (NSUUID *)v6;
}

- (id)homeBulletinContext
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  _QWORD v8[2];
  _QWORD v9[3];

  v9[2] = *MEMORY[0x24BDAC8D0];
  v8[0] = CFSTR("home");
  -[HMDHome contextID](self, "contextID");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v9[0] = v3;
  v8[1] = *MEMORY[0x24BDD5370];
  -[HMDHome contextSPIUniqueIdentifier](self, "contextSPIUniqueIdentifier");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "UUIDString");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v9[1] = v5;
  objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v9, v8, 2);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  return v6;
}

- (BOOL)hasAnyAccessoryWithWalletKeySupport
{
  return -[HMDHome hasAnyAccessoryWithUnifiedAccessWalletKeySupport](self, "hasAnyAccessoryWithUnifiedAccessWalletKeySupport")|| -[HMDHome hasAnyAccessoryWithACPWalletKeySupport](self, "hasAnyAccessoryWithACPWalletKeySupport");
}

- (BOOL)hasAnyAccessoryWithUnifiedAccessWalletKeySupport
{
  void *v3;
  void *v4;
  _QWORD v6[6];
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  char v10;

  v7 = 0;
  v8 = &v7;
  v9 = 0x2020000000;
  v10 = 0;
  -[HMDHome backingStore](self, "backingStore");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "context");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v6[0] = MEMORY[0x24BDAC760];
  v6[1] = 3221225472;
  v6[2] = __67__HMDHome_Wallet__hasAnyAccessoryWithUnifiedAccessWalletKeySupport__block_invoke;
  v6[3] = &unk_24E79B698;
  v6[4] = self;
  v6[5] = &v7;
  objc_msgSend(v4, "unsafeSynchronousBlock:", v6);

  LOBYTE(v3) = *((_BYTE *)v8 + 24);
  _Block_object_dispose(&v7, 8);
  return (char)v3;
}

- (BOOL)hasAnyAccessoryWithACPWalletKeySupport
{
  void *v3;
  void *v4;
  _QWORD v6[6];
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  char v10;

  v7 = 0;
  v8 = &v7;
  v9 = 0x2020000000;
  v10 = 0;
  -[HMDHome backingStore](self, "backingStore");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "context");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v6[0] = MEMORY[0x24BDAC760];
  v6[1] = 3221225472;
  v6[2] = __57__HMDHome_Wallet__hasAnyAccessoryWithACPWalletKeySupport__block_invoke;
  v6[3] = &unk_24E79B698;
  v6[4] = self;
  v6[5] = &v7;
  objc_msgSend(v4, "unsafeSynchronousBlock:", v6);

  LOBYTE(v3) = *((_BYTE *)v8 + 24);
  _Block_object_dispose(&v7, 8);
  return (char)v3;
}

- (BOOL)hasAnyAccessoryWithACBWalletKeySupport
{
  void *v3;
  void *v4;
  _QWORD v6[6];
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  char v10;

  v7 = 0;
  v8 = &v7;
  v9 = 0x2020000000;
  v10 = 0;
  -[HMDHome backingStore](self, "backingStore");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "context");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v6[0] = MEMORY[0x24BDAC760];
  v6[1] = 3221225472;
  v6[2] = __57__HMDHome_Wallet__hasAnyAccessoryWithACBWalletKeySupport__block_invoke;
  v6[3] = &unk_24E79B698;
  v6[4] = self;
  v6[5] = &v7;
  objc_msgSend(v4, "unsafeSynchronousBlock:", v6);

  LOBYTE(v3) = *((_BYTE *)v8 + 24);
  _Block_object_dispose(&v7, 8);
  return (char)v3;
}

- (BOOL)hasAnyAccessoryWithWalletKeyAndAccessCodeSupport
{
  void *v2;
  char v3;

  -[HMDHome accessories](self, "accessories");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "na_any:", &__block_literal_global_732);

  return v3;
}

- (NSArray)accessoriesWithWalletKeySupport
{
  void *v2;
  void *v3;

  -[HMDHome accessories](self, "accessories");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "na_map:", &__block_literal_global_735);
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  return (NSArray *)v3;
}

- (BOOL)hasPostedWalletKeyOnboardingBulletinForAnyAccessory
{
  void *v2;
  char v3;

  -[HMDHome accessories](self, "accessories");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "na_any:", &__block_literal_global_736);

  return v3;
}

- (void)updateHasOnboardedForWalletKey:(BOOL)a3 message:(id)a4
{
  _BOOL4 v4;
  id v6;
  void *v7;
  HMDHome *v8;
  NSObject *v9;
  void *v10;
  void *v11;
  void *v12;
  HMDHomeModel *v13;
  void *v14;
  void *v15;
  void *v16;
  HMDHomeModel *v17;
  uint64_t v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  int v23;
  void *v24;
  __int16 v25;
  void *v26;
  __int16 v27;
  void *v28;
  __int16 v29;
  id v30;
  uint64_t v31;

  v4 = a3;
  v31 = *MEMORY[0x24BDAC8D0];
  v6 = a4;
  if (-[HMDHome hasOnboardedForWalletKey](self, "hasOnboardedForWalletKey") != v4)
  {
    v7 = (void *)MEMORY[0x227676638]();
    v8 = self;
    HMFGetOSLogHandle();
    v9 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      -[HMDHome hasOnboardedForWalletKey](v8, "hasOnboardedForWalletKey");
      HMFBooleanToString();
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      HMFBooleanToString();
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      v23 = 138544130;
      v24 = v10;
      v25 = 2112;
      v26 = v11;
      v27 = 2112;
      v28 = v12;
      v29 = 2112;
      v30 = v6;
      _os_log_impl(&dword_2218F0000, v9, OS_LOG_TYPE_INFO, "%{public}@Updating has onboarded for wallet key from %@ to %@ with message: %@", (uint8_t *)&v23, 0x2Au);

    }
    objc_autoreleasePoolPop(v7);
    v13 = [HMDHomeModel alloc];
    -[HMDHome uuid](v8, "uuid");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHome homeManager](v8, "homeManager");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v15, "uuid");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    v17 = -[HMDBackingStoreModelObject initWithObjectChangeType:uuid:parentUUID:](v13, "initWithObjectChangeType:uuid:parentUUID:", 2, v14, v16);

    if (v4)
      v18 = MEMORY[0x24BDBD1C8];
    else
      v18 = MEMORY[0x24BDBD1C0];
    -[HMDHomeModel setHasOnboardedForWalletKey:](v17, "setHasOnboardedForWalletKey:", v18);
    -[HMDHome backingStore](v8, "backingStore");
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "name");
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    +[HMDBackingStoreTransactionOptions defaultPreferencesOptions](HMDBackingStoreTransactionOptions, "defaultPreferencesOptions");
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v19, "transaction:options:", v20, v21);
    v22 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v22, "add:withMessage:", v17, v6);
    objc_msgSend(v22, "run");

  }
}

uint64_t __70__HMDHome_Wallet__hasPostedWalletKeyOnboardingBulletinForAnyAccessory__block_invoke(uint64_t a1, void *a2)
{
  id v2;
  void *v3;
  id v4;
  uint64_t v5;

  v2 = a2;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v3 = v2;
  else
    v3 = 0;
  v4 = v3;
  v5 = objc_msgSend(v4, "hasPostedBulletinForWalletKeyOnboarding");

  return v5;
}

id __50__HMDHome_Wallet__accessoriesWithWalletKeySupport__block_invoke(uint64_t a1, void *a2)
{
  id v2;
  void *v3;
  id v4;
  id v5;

  v2 = a2;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v3 = v2;
  else
    v3 = 0;
  v4 = v3;
  v5 = 0;
  if (objc_msgSend(v4, "supportsWalletKey"))
    v5 = v4;

  return v5;
}

uint64_t __67__HMDHome_Wallet__hasAnyAccessoryWithWalletKeyAndAccessCodeSupport__block_invoke(uint64_t a1, void *a2)
{
  id v2;
  void *v3;
  id v4;
  unsigned int v5;
  int v6;

  v2 = a2;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v3 = v2;
  else
    v3 = 0;
  v4 = v3;
  v5 = objc_msgSend(v4, "supportsAccessCode");
  v6 = objc_msgSend(v4, "supportsWalletKey");

  return v6 & v5;
}

void __57__HMDHome_Wallet__hasAnyAccessoryWithACBWalletKeySupport__block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  id v5;
  _QWORD v6[5];

  objc_msgSend(*(id *)(a1 + 32), "uuid");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  +[HMCContext findHomeWithModelID:](HMCContext, "findHomeWithModelID:", v2);
  v5 = (id)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v5, "accessories");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "na_map:", &__block_literal_global_730);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v6[0] = MEMORY[0x24BDAC760];
  v6[1] = 3221225472;
  v6[2] = __57__HMDHome_Wallet__hasAnyAccessoryWithACBWalletKeySupport__block_invoke_3;
  v6[3] = &unk_24E773958;
  v6[4] = *(_QWORD *)(a1 + 32);
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = objc_msgSend(v4, "na_any:", v6);

}

uint64_t __57__HMDHome_Wallet__hasAnyAccessoryWithACBWalletKeySupport__block_invoke_3(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  BOOL v8;
  void *v9;
  unint64_t v10;
  void *v11;
  uint64_t v12;
  void *v13;
  unint64_t v14;
  void *v15;
  unint64_t v16;

  v3 = a2;
  objc_msgSend(*(id *)(a1 + 32), "currentUser");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "restrictedGuestAccessSettings");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "schedule");
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(*(id *)(a1 + 32), "currentUser");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v7, "isRestrictedGuest"))
    v8 = v6 == 0;
  else
    v8 = 1;
  if (v8)
  {

    goto LABEL_11;
  }
  objc_msgSend(v6, "weekDayRules");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = objc_msgSend(v9, "count");
  objc_msgSend(v3, "weekDayScheduleCapacity");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  if (v10 > objc_msgSend(v11, "integerValue"))
  {

    v12 = 0;
LABEL_12:

    goto LABEL_13;
  }
  objc_msgSend(v6, "yearDayRules");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  v14 = objc_msgSend(v13, "count");
  objc_msgSend(v3, "yearDayScheduleCapacity");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  v16 = objc_msgSend(v15, "integerValue");

  if (v14 <= v16)
  {
LABEL_11:
    objc_msgSend(v3, "supportsMatCredACB");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v12 = objc_msgSend(v7, "BOOLValue");
    goto LABEL_12;
  }
  v12 = 0;
LABEL_13:

  return v12;
}

id __57__HMDHome_Wallet__hasAnyAccessoryWithACBWalletKeySupport__block_invoke_2(uint64_t a1, void *a2)
{
  id v2;
  void *v3;
  id v4;

  v2 = a2;
  if (objc_msgSend(v2, "conformsToProtocol:", &unk_255852958))
    v3 = v2;
  else
    v3 = 0;
  v4 = v3;

  return v4;
}

void __57__HMDHome_Wallet__hasAnyAccessoryWithACPWalletKeySupport__block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  id v5;
  _QWORD v6[5];

  objc_msgSend(*(id *)(a1 + 32), "uuid");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  +[HMCContext findHomeWithModelID:](HMCContext, "findHomeWithModelID:", v2);
  v5 = (id)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v5, "accessories");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "na_map:", &__block_literal_global_729);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v6[0] = MEMORY[0x24BDAC760];
  v6[1] = 3221225472;
  v6[2] = __57__HMDHome_Wallet__hasAnyAccessoryWithACPWalletKeySupport__block_invoke_3;
  v6[3] = &unk_24E773958;
  v6[4] = *(_QWORD *)(a1 + 32);
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = objc_msgSend(v4, "na_any:", v6);

}

uint64_t __57__HMDHome_Wallet__hasAnyAccessoryWithACPWalletKeySupport__block_invoke_3(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  BOOL v8;
  void *v9;
  unint64_t v10;
  void *v11;
  uint64_t v12;
  void *v13;
  unint64_t v14;
  void *v15;
  unint64_t v16;

  v3 = a2;
  objc_msgSend(*(id *)(a1 + 32), "currentUser");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "restrictedGuestAccessSettings");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "schedule");
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(*(id *)(a1 + 32), "currentUser");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v7, "isRestrictedGuest"))
    v8 = v6 == 0;
  else
    v8 = 1;
  if (v8)
  {

    goto LABEL_11;
  }
  objc_msgSend(v6, "weekDayRules");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = objc_msgSend(v9, "count");
  objc_msgSend(v3, "weekDayScheduleCapacity");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  if (v10 > objc_msgSend(v11, "integerValue"))
  {

    v12 = 0;
LABEL_12:

    goto LABEL_13;
  }
  objc_msgSend(v6, "yearDayRules");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  v14 = objc_msgSend(v13, "count");
  objc_msgSend(v3, "yearDayScheduleCapacity");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  v16 = objc_msgSend(v15, "integerValue");

  if (v14 <= v16)
  {
LABEL_11:
    objc_msgSend(v3, "supportsMatCredACP");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v12 = objc_msgSend(v7, "BOOLValue");
    goto LABEL_12;
  }
  v12 = 0;
LABEL_13:

  return v12;
}

id __57__HMDHome_Wallet__hasAnyAccessoryWithACPWalletKeySupport__block_invoke_2(uint64_t a1, void *a2)
{
  id v2;
  void *v3;
  id v4;

  v2 = a2;
  if (objc_msgSend(v2, "conformsToProtocol:", &unk_255852958))
    v3 = v2;
  else
    v3 = 0;
  v4 = v3;

  return v4;
}

void __67__HMDHome_Wallet__hasAnyAccessoryWithUnifiedAccessWalletKeySupport__block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  id v5;
  _QWORD v6[5];

  objc_msgSend(*(id *)(a1 + 32), "uuid");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  +[HMCContext findHomeWithModelID:](HMCContext, "findHomeWithModelID:", v2);
  v5 = (id)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v5, "accessories");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "na_map:", &__block_literal_global_2520);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v6[0] = MEMORY[0x24BDAC760];
  v6[1] = 3221225472;
  v6[2] = __67__HMDHome_Wallet__hasAnyAccessoryWithUnifiedAccessWalletKeySupport__block_invoke_3;
  v6[3] = &unk_24E773958;
  v6[4] = *(_QWORD *)(a1 + 32);
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = objc_msgSend(v4, "na_any:", v6);

}

uint64_t __67__HMDHome_Wallet__hasAnyAccessoryWithUnifiedAccessWalletKeySupport__block_invoke_3(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  BOOL v8;
  void *v9;
  unint64_t v10;
  void *v11;
  uint64_t v12;
  void *v13;
  unint64_t v14;
  void *v15;
  unint64_t v16;
  void *v17;
  void *v18;
  char v19;

  v3 = a2;
  objc_msgSend(*(id *)(a1 + 32), "currentUser");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "restrictedGuestAccessSettings");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "schedule");
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(*(id *)(a1 + 32), "currentUser");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v7, "isRestrictedGuest"))
    v8 = v6 == 0;
  else
    v8 = 1;
  if (v8)
  {

    goto LABEL_11;
  }
  objc_msgSend(v6, "weekDayRules");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = objc_msgSend(v9, "count");
  objc_msgSend(v3, "weekDayScheduleCapacity");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  if (v10 > objc_msgSend(v11, "integerValue"))
  {

    v12 = 0;
LABEL_16:

    goto LABEL_17;
  }
  objc_msgSend(v6, "yearDayRules");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  v14 = objc_msgSend(v13, "count");
  objc_msgSend(v3, "yearDayScheduleCapacity");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  v16 = objc_msgSend(v15, "integerValue");

  if (v14 <= v16)
  {
LABEL_11:
    objc_msgSend(v3, "services");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    if ((objc_msgSend(v17, "na_any:", &__block_literal_global_724) & 1) != 0)
    {
      objc_msgSend(v3, "services");
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      v19 = objc_msgSend(v18, "na_any:", &__block_literal_global_726);

      if ((v19 & 1) != 0)
      {
        v12 = 1;
        goto LABEL_17;
      }
    }
    else
    {

    }
    objc_msgSend(v3, "supportsMatterWalletKey");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v12 = objc_msgSend(v7, "BOOLValue");
    goto LABEL_16;
  }
  v12 = 0;
LABEL_17:

  return v12;
}

uint64_t __67__HMDHome_Wallet__hasAnyAccessoryWithUnifiedAccessWalletKeySupport__block_invoke_5(uint64_t a1, void *a2)
{
  void *v2;
  void *v3;
  uint64_t v4;

  objc_msgSend(a2, "serviceType");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = (void *)objc_msgSend(objc_alloc(MEMORY[0x24BDD1880]), "initWithUUIDString:", CFSTR("00000266-0000-1000-8000-0026BB765291"));
  v4 = objc_msgSend(v2, "hmf_isEqualToUUID:", v3);

  return v4;
}

uint64_t __67__HMDHome_Wallet__hasAnyAccessoryWithUnifiedAccessWalletKeySupport__block_invoke_4(uint64_t a1, void *a2)
{
  void *v2;
  id v3;
  void *v4;
  uint64_t v5;

  objc_msgSend(a2, "serviceType");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_alloc(MEMORY[0x24BDD1880]);
  v4 = (void *)objc_msgSend(v3, "initWithUUIDString:", *MEMORY[0x24BDD6C08]);
  v5 = objc_msgSend(v2, "hmf_isEqualToUUID:", v4);

  return v5;
}

id __67__HMDHome_Wallet__hasAnyAccessoryWithUnifiedAccessWalletKeySupport__block_invoke_2(uint64_t a1, void *a2)
{
  id v2;
  void *v3;
  id v4;

  v2 = a2;
  if (objc_msgSend(v2, "conformsToProtocol:", &unk_255852958))
    v3 = v2;
  else
    v3 = 0;
  v4 = v3;

  return v4;
}

+ (id)nfcIssuerKeyIdentifierWithPairingIdentity:(id)a3
{
  void *v3;
  void *v4;
  void *v5;

  objc_msgSend(a3, "publicKey");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "data");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  +[HMDHomeNFCReaderKey identifierForKey:](HMDHomeNFCReaderKey, "identifierForKey:", v4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  return v5;
}

- (BOOL)updateCHIPPropertiesOnHomeModel:(id)a3 usingUpdatedHomeInfo:(id)a4
{
  id v6;
  void *v7;
  void *v8;
  void *v9;
  char v10;
  BOOL v11;

  v6 = a3;
  objc_msgSend(a4, "objectForKeyedSubscript:", CFSTR("HMDHomeModelUpdatedCHIPPropertiesMessageKeyFabricID"));
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  if (v7
    && (-[HMDHome chipStorage](self, "chipStorage"),
        v8 = (void *)objc_claimAutoreleasedReturnValue(),
        objc_msgSend(v8, "fabricID"),
        v9 = (void *)objc_claimAutoreleasedReturnValue(),
        v10 = HMFEqualObjects(),
        v9,
        v8,
        (v10 & 1) == 0))
  {
    objc_msgSend(v6, "setChipFabricID:", v7);
    objc_msgSend(v6, "setChipFabricIndex:", v7);
    v11 = 1;
  }
  else
  {
    v11 = 0;
  }

  return v11;
}

- (void)remotelyUpdateHomeModelWithCHIPKeyValueStore:(id)a3 removedKeys:(id)a4 completion:(id)a5
{
  id v8;
  id v9;
  id v10;
  void *v11;
  void *v12;
  void *v13;
  void (**v14)(_QWORD, _QWORD);
  id v15;
  id v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  id v21;
  void *v22;
  HMDHome *v23;
  NSObject *v24;
  void *v25;
  id v26;
  void *v27;
  void *v28;
  void *v29;
  id v30;
  void *v31;
  void *v32;
  HMDHome *v33;
  NSObject *v34;
  void *v35;
  void *v36;
  HMDHome *v37;
  NSObject *v38;
  id v39;
  void *v40;
  void *v41;
  id v42;
  id v43;
  id v44;
  id v45;
  _QWORD v46[5];
  id v47;
  id v48;
  uint8_t buf[4];
  void *v50;
  __int16 v51;
  id v52;
  const __CFString *v53;
  _QWORD v54[3];

  v54[1] = *MEMORY[0x24BDAC8D0];
  v8 = a3;
  v9 = a4;
  v10 = a5;
  -[HMDHome home](self, "home");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  if (v11)
  {
    v12 = (void *)MEMORY[0x24BDBCED8];
    v53 = CFSTR("HMDHomeRemoteUpdateCHIPKeyValueStoreMessageKey");
    v54[0] = v8;
    objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v54, &v53, 1);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "dictionaryWithDictionary:", v13);
    v14 = (void (**)(_QWORD, _QWORD))objc_claimAutoreleasedReturnValue();

    v44 = v9;
    objc_msgSend(v14, "setObject:forKeyedSubscript:", v9, CFSTR("HMDHomeRemoteUpdateCHIPRemovedKeysMessageKey"));
    v15 = objc_alloc(MEMORY[0x24BE3F1D0]);
    v16 = objc_alloc(MEMORY[0x24BE3F1B8]);
    objc_msgSend(v11, "messageTargetUUID");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    v18 = (void *)objc_msgSend(v16, "initWithTarget:", v17);
    v19 = (void *)objc_msgSend(v15, "initWithName:destination:payload:", CFSTR("HMDHomeRemoteUpdateCHIPKeyValueStoreMessage"), v18, v14);

    objc_msgSend(v19, "identifier");
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    v46[0] = MEMORY[0x24BDAC760];
    v46[1] = 3221225472;
    v46[2] = __85__HMDHome_CHIP__remotelyUpdateHomeModelWithCHIPKeyValueStore_removedKeys_completion___block_invoke;
    v46[3] = &unk_24E796990;
    v46[4] = self;
    v42 = v20;
    v43 = v10;
    v47 = v42;
    v21 = v10;
    v48 = v21;
    v22 = (void *)MEMORY[0x227676638](objc_msgSend(v19, "setResponseHandler:", v46));
    v23 = self;
    HMFGetOSLogHandle();
    v24 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v24, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v25 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v19, "shortDescription");
      v26 = v8;
      v27 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v50 = v25;
      v51 = 2112;
      v52 = v27;
      _os_log_impl(&dword_2218F0000, v24, OS_LOG_TYPE_INFO, "%{public}@Remotely updating home model with CHIP key value store using message: %@", buf, 0x16u);

      v8 = v26;
    }

    objc_autoreleasePoolPop(v22);
    -[HMDHome administratorHandler](v23, "administratorHandler");
    v28 = (void *)objc_claimAutoreleasedReturnValue();
    v45 = 0;
    objc_msgSend(v28, "operationForMessage:error:", v19, &v45);
    v29 = (void *)objc_claimAutoreleasedReturnValue();
    v30 = v45;

    if (v29)
    {
      -[HMDHome administratorHandler](v23, "administratorHandler");
      v31 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v31, "addOperation:", v29);

    }
    else
    {
      v36 = (void *)MEMORY[0x227676638]();
      v37 = v23;
      HMFGetOSLogHandle();
      v38 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v38, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v41 = v36;
        v39 = v8;
        v40 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        v50 = v40;
        v51 = 2112;
        v52 = v30;
        _os_log_impl(&dword_2218F0000, v38, OS_LOG_TYPE_ERROR, "%{public}@Failed to create home administration configuration operation for remotely updating home model with key value store: %@", buf, 0x16u);

        v8 = v39;
        v36 = v41;
      }

      objc_autoreleasePoolPop(v36);
      (*((void (**)(id, id))v21 + 2))(v21, v30);
    }
    v9 = v44;

    v10 = v43;
    goto LABEL_14;
  }
  v32 = (void *)MEMORY[0x227676638]();
  v33 = self;
  HMFGetOSLogHandle();
  v34 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR))
  {
    HMFGetLogIdentifier();
    v35 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543362;
    v50 = v35;
    _os_log_impl(&dword_2218F0000, v34, OS_LOG_TYPE_ERROR, "%{public}@Home reference is nil", buf, 0xCu);

  }
  objc_autoreleasePoolPop(v32);
  v14 = (void (**)(_QWORD, _QWORD))_Block_copy(v10);
  if (v14)
  {
    objc_msgSend(MEMORY[0x24BDD1540], "hmErrorWithCode:", 2);
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    ((void (**)(_QWORD, void *))v14)[2](v14, v19);
LABEL_14:

  }
}

- (void)readAttributeWithNodeId:(unint64_t)a3 endpointId:(id)a4 clusterId:(id)a5 attributeId:(id)a6 params:(id)a7 completion:(id)a8
{
  id v14;
  objc_class *v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  _QWORD v22[5];
  id v23;

  v14 = a8;
  v15 = (objc_class *)MEMORY[0x24BDBCED8];
  v16 = a7;
  v17 = a6;
  v18 = a5;
  v19 = a4;
  v20 = objc_alloc_init(v15);
  objc_msgSend(v20, "setCHIPRemoteCommand:", *MEMORY[0x24BE4F098]);
  objc_msgSend(v20, "setCHIPEndpointId:clusterId:attributeId:", v19, v18, v17);

  objc_msgSend(v20, "setCHIPEncodedParams:", v16);
  v22[0] = MEMORY[0x24BDAC760];
  v22[1] = 3221225472;
  v22[2] = __92__HMDHome_CHIP__readAttributeWithNodeId_endpointId_clusterId_attributeId_params_completion___block_invoke;
  v22[3] = &unk_24E78A4D8;
  v22[4] = self;
  v23 = v14;
  v21 = v14;
  -[HMDHome _sendRemoteMessageUsingNodeId:payload:completion:](self, "_sendRemoteMessageUsingNodeId:payload:completion:", a3, v20, v22);

}

- (void)writeAttributeWithNodeId:(unint64_t)a3 endpointId:(id)a4 clusterId:(id)a5 attributeId:(id)a6 value:(id)a7 timedWriteTimeout:(id)a8 completion:(id)a9
{
  id v15;
  id v16;
  objc_class *v17;
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  _QWORD v24[5];
  id v25;

  v15 = a8;
  v16 = a9;
  v17 = (objc_class *)MEMORY[0x24BDBCED8];
  v18 = a7;
  v19 = a6;
  v20 = a5;
  v21 = a4;
  v22 = objc_alloc_init(v17);
  objc_msgSend(v22, "setCHIPRemoteCommand:", *MEMORY[0x24BE4F0A8]);
  objc_msgSend(v22, "setCHIPEndpointId:clusterId:attributeId:", v21, v20, v19);

  objc_msgSend(v22, "setCHIPData:", v18);
  if (v15)
    objc_msgSend(v22, "setCHIPTimedWriteTimeout:", v15);
  v24[0] = MEMORY[0x24BDAC760];
  v24[1] = 3221225472;
  v24[2] = __110__HMDHome_CHIP__writeAttributeWithNodeId_endpointId_clusterId_attributeId_value_timedWriteTimeout_completion___block_invoke;
  v24[3] = &unk_24E78A4D8;
  v24[4] = self;
  v25 = v16;
  v23 = v16;
  -[HMDHome _sendRemoteMessageUsingNodeId:payload:completion:](self, "_sendRemoteMessageUsingNodeId:payload:completion:", a3, v22, v24);

}

- (void)invokeCommandWithNodeId:(unint64_t)a3 endpointId:(id)a4 clusterId:(id)a5 commandId:(id)a6 fields:(id)a7 timedInvokeTimeout:(id)a8 completion:(id)a9
{
  id v15;
  id v16;
  id v17;
  objc_class *v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  _QWORD v24[5];
  id v25;

  v15 = a7;
  v16 = a8;
  v17 = a9;
  v18 = (objc_class *)MEMORY[0x24BDBCED8];
  v19 = a6;
  v20 = a5;
  v21 = a4;
  v22 = objc_alloc_init(v18);
  objc_msgSend(v22, "setCHIPRemoteCommand:", *MEMORY[0x24BE4F080]);
  objc_msgSend(v22, "setCHIPEndpointId:clusterId:commandId:", v21, v20, v19);

  if (v15)
    objc_msgSend(v22, "setCHIPCommandFields:", v15);
  if (v16)
    objc_msgSend(v22, "setCHIPTimedInvokeTimeout:", v16);
  v24[0] = MEMORY[0x24BDAC760];
  v24[1] = 3221225472;
  v24[2] = __109__HMDHome_CHIP__invokeCommandWithNodeId_endpointId_clusterId_commandId_fields_timedInvokeTimeout_completion___block_invoke;
  v24[3] = &unk_24E78A4D8;
  v24[4] = self;
  v25 = v17;
  v23 = v17;
  -[HMDHome _sendRemoteMessageUsingNodeId:payload:completion:](self, "_sendRemoteMessageUsingNodeId:payload:completion:", a3, v22, v24);

}

- (void)subscribeAttributeWithNodeId:(unint64_t)a3 endpointId:(id)a4 clusterId:(id)a5 attributeId:(id)a6 minInterval:(id)a7 maxInterval:(id)a8 params:(id)a9 establishedHandler:(id)a10 completion:(id)a11
{
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  uint64_t v22;
  id v23;
  void *v24;
  void *v25;
  void *v26;
  int v27;
  void *v28;
  char v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  HMDHome *v34;
  NSObject *v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  id v40;
  uint64_t v42;
  id v43;
  id v44;
  void *v46;
  void *v47;
  uint8_t buf[4];
  void *v49;
  uint64_t v50;

  v50 = *MEMORY[0x24BDAC8D0];
  v15 = a4;
  v16 = a5;
  v17 = a6;
  v18 = a7;
  v19 = a8;
  v20 = a9;
  v44 = a10;
  v43 = a11;
  v21 = objc_alloc_init(MEMORY[0x24BDBCED8]);
  v22 = *MEMORY[0x24BE4F0A0];
  objc_msgSend(v21, "setCHIPRemoteCommand:", *MEMORY[0x24BE4F0A0]);
  v46 = v15;
  v23 = v15;
  v24 = v18;
  v25 = v16;
  objc_msgSend(v21, "setCHIPEndpointId:clusterId:attributeId:", v23, v16, v17);
  objc_msgSend(v21, "setCHIPMinInterval:", v18);
  objc_msgSend(v21, "setCHIPMaxInterval:", v19);
  if (v20)
    objc_msgSend(v21, "setCHIPEncodedParams:", v20);
  -[HMDHome featureDataSource](self, "featureDataSource", a3);
  v26 = (void *)objc_claimAutoreleasedReturnValue();
  v27 = objc_msgSend(v26, "isNativeMatterEnabled");

  if (v27)
  {
    if (isFeatureMatteriPhoneOnlyPairingControlEnabled()
      && (-[HMDHome home](self, "home"),
          v28 = (void *)objc_claimAutoreleasedReturnValue(),
          v29 = objc_msgSend(v28, "hasAnyResident"),
          v28,
          (v29 & 1) == 0))
    {
      v32 = v24;
      v33 = (void *)MEMORY[0x227676638]();
      v34 = self;
      HMFGetOSLogHandle();
      v35 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v35, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v36 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543362;
        v49 = v36;
        _os_log_impl(&dword_2218F0000, v35, OS_LOG_TYPE_INFO, "%{public}@No resident found and iPOP enabled, attempting to subscribe locally", buf, 0xCu);

      }
      objc_autoreleasePoolPop(v33);
      v31 = v43;
      -[HMDHome _sendRemoteMessageUsingNodeId:payload:completion:](v34, "_sendRemoteMessageUsingNodeId:payload:completion:", v42, v21, v43);
      v24 = v32;
    }
    else if ((v16 || !v17) && (v46 || !v16))
    {
      objc_msgSend(MEMORY[0x24BDBCED8], "dictionary");
      v37 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedLongLong:", v42);
      v38 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v37, "setObject:forKeyedSubscript:", v38, CFSTR("HMDHomeCHIPNodeIDMessageKey"));

      objc_msgSend(v37, "setObject:forKeyedSubscript:", v46, CFSTR("HMDHomeCHIPEndpointIDMessageKey"));
      objc_msgSend(v37, "setObject:forKeyedSubscript:", v25, CFSTR("HMDHomeCHIPClusterIDMessageKey"));
      objc_msgSend(v37, "setObject:forKeyedSubscript:", v17, CFSTR("HMDHomeCHIPAttributeIDMessageKey"));
      v47 = v37;
      objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", &v47, 1);
      v39 = (void *)objc_claimAutoreleasedReturnValue();
      -[HMDHome remotelySetNotificationsEnabled:forMatterAttributes:](self, "remotelySetNotificationsEnabled:forMatterAttributes:", 1, v39);

      v40 = objc_alloc_init(MEMORY[0x24BDBCED8]);
      objc_msgSend(v40, "setCHIPRemoteCommand:", v22);
      v31 = v43;
      (*((void (**)(id, id, _QWORD))v43 + 2))(v43, v40, 0);

    }
    else
    {
      objc_msgSend(MEMORY[0x24BDD1540], "hmErrorWithCode:", 3);
      v30 = (void *)objc_claimAutoreleasedReturnValue();
      v31 = v43;
      (*((void (**)(id, _QWORD, void *))v43 + 2))(v43, 0, v30);

    }
  }
  else
  {
    v31 = v43;
    -[HMDHome _sendRemoteMessageUsingNodeId:payload:completion:](self, "_sendRemoteMessageUsingNodeId:payload:completion:", v42, v21, v43);
  }

}

- (void)downloadLogWithController:(id)a3 nodeId:(id)a4 type:(int64_t)a5 timeout:(double)a6 completion:(id)a7
{
  id v11;
  id v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  uint64_t v17;
  void *v18;
  id v19;
  _QWORD v20[5];
  id v21;

  v11 = a4;
  v12 = a7;
  objc_msgSend(MEMORY[0x24BDBCED8], "dictionary");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v13, "setCHIPRemoteCommand:", *MEMORY[0x24BE4F088]);
  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithInteger:", a5);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v13, "setCHIPDownloadLogType:", v14);

  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithDouble:", a6);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v13, "setCHIPDownloadTimeout:", v15);

  if ((unint64_t)a6)
  {
    objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedInteger:", (unint64_t)(a6 + 10.0));
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "setCHIPRemoteMessageTimeout:", v16);

  }
  v17 = objc_msgSend(v11, "unsignedLongValue");
  v18 = (void *)objc_msgSend(v13, "copy");
  v20[0] = MEMORY[0x24BDAC760];
  v20[1] = 3221225472;
  v20[2] = __74__HMDHome_CHIP__downloadLogWithController_nodeId_type_timeout_completion___block_invoke;
  v20[3] = &unk_24E78A4D8;
  v20[4] = self;
  v21 = v12;
  v19 = v12;
  -[HMDHome _sendRemoteMessageUsingNodeId:payload:completion:](self, "_sendRemoteMessageUsingNodeId:payload:completion:", v17, v18, v20);

}

- (void)_writeLogData:(id)a3 logName:(id)a4 completion:(id)a5
{
  id v8;
  id v9;
  id v10;
  void *v11;
  void *v12;
  void *v13;
  void (**v14)(_QWORD, _QWORD, _QWORD);
  void *v15;
  uint64_t v16;
  void *v17;
  void *v18;
  id v19;
  void *v20;
  char v21;
  id v22;
  void *v23;
  HMDHome *v24;
  NSObject *v25;
  void *v26;
  void (**v27)(void *, void *, id);
  void *v28;
  void *v29;
  HMDHome *v30;
  NSObject *v31;
  void *v32;
  void *v33;
  void *v34;
  id v35;
  id v36;
  uint8_t buf[4];
  void *v38;
  __int16 v39;
  void *v40;
  __int16 v41;
  id v42;
  uint64_t v43;

  v43 = *MEMORY[0x24BDAC8D0];
  v8 = a3;
  v9 = a4;
  v10 = a5;
  v11 = v10;
  if (v8 && v9)
  {
    -[HMDHome homeManager](self, "homeManager");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "chipDataSource");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "fileManager");
    v14 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();

    v15 = (void *)MEMORY[0x24BDBCF48];
    HMDCreateHomeKitDaemonCacheDirectory();
    v16 = objc_claimAutoreleasedReturnValue();
    objc_msgSend(v15, "fileURLWithPath:", v16);
    v17 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v17, "URLByAppendingPathComponent:", CFSTR("MatterDiagnostics"));
    v18 = (void *)objc_claimAutoreleasedReturnValue();

    v36 = 0;
    LOBYTE(v16) = objc_msgSend(v14, "createDirectoryAtURL:withIntermediateDirectories:attributes:error:", v18, 1, 0, &v36);
    v19 = v36;
    if ((v16 & 1) != 0)
    {
      objc_msgSend(v18, "URLByAppendingPathComponent:", v9);
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      v35 = v19;
      v21 = objc_msgSend(v14, "writeData:toURL:options:error:", v8, v20, 0, &v35);
      v22 = v35;

      if ((v21 & 1) == 0)
      {
        v23 = (void *)MEMORY[0x227676638]();
        v24 = self;
        HMFGetOSLogHandle();
        v25 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
        {
          HMFGetLogIdentifier();
          v34 = v23;
          v26 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543874;
          v38 = v26;
          v39 = 2112;
          v40 = v20;
          v41 = 2112;
          v42 = v22;
          _os_log_impl(&dword_2218F0000, v25, OS_LOG_TYPE_ERROR, "%{public}@Failed to write log file to path: %@ error: %@", buf, 0x20u);

          v23 = v34;
        }

        objc_autoreleasePoolPop(v23);
        v20 = 0;
      }
      v27 = (void (**)(void *, void *, id))_Block_copy(v11);
      if (v27)
      {
        objc_msgSend(v20, "path");
        v28 = (void *)objc_claimAutoreleasedReturnValue();
        v27[2](v27, v28, v22);

      }
    }
    else
    {
      v29 = (void *)MEMORY[0x227676638]();
      v30 = self;
      HMFGetOSLogHandle();
      v31 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v32 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543874;
        v38 = v32;
        v39 = 2112;
        v40 = v18;
        v41 = 2112;
        v42 = v19;
        _os_log_impl(&dword_2218F0000, v31, OS_LOG_TYPE_ERROR, "%{public}@Failed to create directory at path: %@ error: %@", buf, 0x20u);

      }
      objc_autoreleasePoolPop(v29);
      v33 = _Block_copy(v11);
      v20 = v33;
      if (v33)
        (*((void (**)(void *, _QWORD, id))v33 + 2))(v33, 0, v19);
      v22 = v19;
    }

    goto LABEL_19;
  }
  v14 = (void (**)(_QWORD, _QWORD, _QWORD))_Block_copy(v10);
  if (v14)
  {
    objc_msgSend(MEMORY[0x24BDD1540], "hmErrorWithCode:", 3);
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    ((void (**)(_QWORD, _QWORD, void *))v14)[2](v14, 0, v18);
LABEL_19:

  }
}

- (void)handleUpdatedCHIPPropertiesOnHomeModel:(id)a3 actions:(id)a4
{
  id v6;
  id v7;
  void *v8;
  int v9;
  _BOOL8 v10;
  void *v11;
  void *v12;
  const __CFString *v13;
  _QWORD v14[2];

  v14[1] = *MEMORY[0x24BDAC8D0];
  v6 = a3;
  v7 = a4;
  -[HMDHome chipStorage](self, "chipStorage");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = objc_msgSend(v8, "updateUsingHomeModel:", v6);

  if (v9)
  {
    v10 = (unint64_t)objc_msgSend(v7, "source") < 2;
    v13 = CFSTR("HMDHomeCHIPStorageIsLocalChangeNotificationKey");
    objc_msgSend(MEMORY[0x24BDD16E0], "numberWithBool:", v10);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v14[0] = v11;
    objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v14, &v13, 1);
    v12 = (void *)objc_claimAutoreleasedReturnValue();

    logAndPostNotification(CFSTR("HMDHomeCHIPStorageUpdatedNotification"), self, v12);
    objc_msgSend(v7, "markChanged");

  }
  if (isFeatureMatteriPhoneOnlyPairingControlEnabled()
    && -[HMDHome updateFabricUsingHomeModel:](self, "updateFabricUsingHomeModel:", v6))
  {
    objc_msgSend(v7, "markChanged");
  }

}

- (BOOL)updateMatterFabricIDIfNeeded
{
  void *v3;
  void *v4;
  void *v5;
  char v6;
  void *v7;
  void *v8;
  void *v9;

  -[HMDHome chipStorage](self, "chipStorage");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "fabricID");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  if (v4)
  {
    v5 = v4;
    v6 = objc_msgSend(v4, "isEqualToNumber:", &unk_24E96A418);

    if ((v6 & 1) == 0)
    {
      -[HMDHome chipStorage](self, "chipStorage");
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v7, "fabricID");
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      -[HMDHome fabric](self, "fabric");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v9, "setFabricID:", v8);

      -[HMDHome _saveAndSyncMatterFabricIDWithCompletion:](self, "_saveAndSyncMatterFabricIDWithCompletion:", 0);
      return 1;
    }
  }
  else
  {

  }
  return 0;
}

- (BOOL)updateFabricUsingHomeModel:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  int v9;
  void *v10;
  void *v11;
  char v12;
  void *v13;
  void *v14;
  void *v15;
  HMDHome *v16;
  NSObject *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  int v25;
  void *v26;
  void *v27;
  void *v28;
  BOOL v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  char v34;
  void *v35;
  HMDHome *v36;
  NSObject *v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  void *v43;
  void *v44;
  void *v45;
  int v47;
  void *v48;
  __int16 v49;
  void *v50;
  __int16 v51;
  void *v52;
  uint64_t v53;

  v53 = *MEMORY[0x24BDAC8D0];
  v4 = a3;
  objc_msgSend(v4, "setProperties");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  if (!objc_msgSend(v5, "containsObject:", CFSTR("matterFabricID")))
    goto LABEL_11;
  -[HMDHome fabric](self, "fabric");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "fabricID");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "matterFabricID");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = HMFEqualObjects();

  if (v9 || (objc_msgSend(v4, "matterFabricID"), (v10 = (void *)objc_claimAutoreleasedReturnValue()) == 0))
  {
LABEL_11:

    goto LABEL_12;
  }
  v11 = v10;
  v12 = objc_msgSend(v10, "isEqualToNumber:", &unk_24E96A418);

  if ((v12 & 1) != 0)
  {
LABEL_12:
    v25 = 0;
    goto LABEL_13;
  }
  -[HMDHome fabric](self, "fabric");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v13, "fabricID");
  v14 = (void *)objc_claimAutoreleasedReturnValue();

  v15 = (void *)MEMORY[0x227676638]();
  v16 = self;
  HMFGetOSLogHandle();
  v17 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHome fabric](v16, "fabric");
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v19, "fabricID");
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "matterFabricID");
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    v47 = 138543874;
    v48 = v18;
    v49 = 2112;
    v50 = v20;
    v51 = 2112;
    v52 = v21;
    _os_log_impl(&dword_2218F0000, v17, OS_LOG_TYPE_INFO, "%{public}@Updating fabric ID from %@ to %@", (uint8_t *)&v47, 0x20u);

  }
  objc_autoreleasePoolPop(v15);
  objc_msgSend(v4, "matterFabricID");
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHome fabric](v16, "fabric");
  v23 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v23, "setFabricID:", v22);

  if (v14 && (objc_msgSend(v14, "isEqualToNumber:", &unk_24E96A418) & 1) == 0)
  {
    -[HMDHome fabric](v16, "fabric");
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v24, "invalidateCachedData");

  }
  v25 = 1;
LABEL_13:
  -[HMDHome chipStorage](self, "chipStorage");
  v26 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v26, "fabricID");
  v27 = (void *)objc_claimAutoreleasedReturnValue();
  v28 = v27;
  if (v27 && (objc_msgSend(v27, "isEqualToNumber:", &unk_24E96A418) & 1) == 0)
  {
    -[HMDHome fabric](self, "fabric");
    v30 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v30, "fabricID");
    v31 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHome chipStorage](self, "chipStorage");
    v32 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v32, "fabricID");
    v33 = (void *)objc_claimAutoreleasedReturnValue();
    v34 = HMFEqualObjects();

    if ((v34 & 1) != 0)
    {
      if (!v25)
        goto LABEL_16;
    }
    else
    {
      v35 = (void *)MEMORY[0x227676638]();
      v36 = self;
      HMFGetOSLogHandle();
      v37 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v37, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v38 = (void *)objc_claimAutoreleasedReturnValue();
        -[HMDHome fabric](v36, "fabric");
        v39 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v39, "fabricID");
        v40 = (void *)objc_claimAutoreleasedReturnValue();
        -[HMDHome chipStorage](v36, "chipStorage");
        v41 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v41, "fabricID");
        v42 = (void *)objc_claimAutoreleasedReturnValue();
        v47 = 138543874;
        v48 = v38;
        v49 = 2112;
        v50 = v40;
        v51 = 2112;
        v52 = v42;
        _os_log_impl(&dword_2218F0000, v37, OS_LOG_TYPE_INFO, "%{public}@Updating fabric ID from CHIPStorage from %@ to %@", (uint8_t *)&v47, 0x20u);

      }
      objc_autoreleasePoolPop(v35);
      -[HMDHome chipStorage](v36, "chipStorage");
      v43 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v43, "fabricID");
      v44 = (void *)objc_claimAutoreleasedReturnValue();
      -[HMDHome fabric](v36, "fabric");
      v45 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v45, "setFabricID:", v44);

    }
LABEL_23:
    -[HMDHome _saveAndSyncMatterFabricIDWithCompletion:](self, "_saveAndSyncMatterFabricIDWithCompletion:", 0);
    v29 = 1;
    goto LABEL_24;
  }

  if ((v25 & 1) != 0)
    goto LABEL_23;
LABEL_16:
  v29 = 0;
LABEL_24:

  return v29;
}

- (void)_saveAndSyncMatterFabricIDWithCompletion:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  _QWORD v12[5];
  id v13;

  v4 = a3;
  if (-[HMDHome isOwnerUser](self, "isOwnerUser"))
  {
    -[HMDHome emptyModelObjectWithChangeType:](self, "emptyModelObjectWithChangeType:", 2);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHome fabric](self, "fabric");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "fabricID");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "setMatterFabricID:", v7);

    -[HMDHome backingStore](self, "backingStore");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    +[HMDBackingStoreTransactionOptions defaultXPCOptions](HMDBackingStoreTransactionOptions, "defaultXPCOptions");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "transaction:options:", CFSTR("Update Matter Fabric ID"), v9);
    v10 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v10, "add:", v5);
    v12[0] = MEMORY[0x24BDAC760];
    v12[1] = 3221225472;
    v12[2] = __58__HMDHome_CHIP___saveAndSyncMatterFabricIDWithCompletion___block_invoke;
    v12[3] = &unk_24E79B3A0;
    v12[4] = self;
    v13 = v4;
    objc_msgSend(v10, "run:", v12);

  }
  else
  {
    v11 = _Block_copy(v4);
    v5 = v11;
    if (v11)
      (*((void (**)(void *, _QWORD))v11 + 2))(v11, 0);
  }

}

- (void)finishPairingForServer:(id)a3
{
  void *v4;
  id v5;
  id v6;

  v6 = a3;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v4 = v6;
  else
    v4 = 0;
  v5 = v4;
  objc_msgSend(v5, "finishPairing");

  if (!-[HMDHome hasAnyResident](self, "hasAnyResident"))
    -[HMDHome updateHomeLocationForPairing](self, "updateHomeLocationForPairing");

}

- (void)setCHIPReportHandlerWithSubscriber:(id)a3 handler:(id)a4
{
  id v6;
  id v7;
  NSObject *v8;
  id v9;
  id v10;
  _QWORD block[5];
  id v12;
  id v13;

  v6 = a3;
  v7 = a4;
  -[HMDHome workQueue](self, "workQueue");
  v8 = objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x24BDAC760];
  block[1] = 3221225472;
  block[2] = __60__HMDHome_CHIP__setCHIPReportHandlerWithSubscriber_handler___block_invoke;
  block[3] = &unk_24E79B440;
  v12 = v6;
  v13 = v7;
  block[4] = self;
  v9 = v6;
  v10 = v7;
  dispatch_async(v8, block);

}

- (void)handleRemoteUpdateCHIPKeyValueStoreMessage:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  HMDHome *v7;
  NSObject *v8;
  NSObject *v9;
  void *v10;
  void *v11;
  HMDCHIPHomeDataSource *v12;
  void *v13;
  void *v14;
  uint64_t v15;
  id v16;
  void *v17;
  void *v18;
  HMDHome *v19;
  NSObject *v20;
  void *v21;
  void *v22;
  _QWORD v23[4];
  id v24;
  _QWORD v25[4];
  id v26;
  id v27;
  uint8_t buf[4];
  void *v29;
  __int16 v30;
  void *v31;
  uint64_t v32;

  v32 = *MEMORY[0x24BDAC8D0];
  v4 = a3;
  -[HMDHome matterFabricID](self, "matterFabricID");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = (void *)MEMORY[0x227676638]();
  v7 = self;
  HMFGetOSLogHandle();
  v8 = objc_claimAutoreleasedReturnValue();
  v9 = v8;
  if (v5)
  {
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "shortDescription");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v29 = v10;
      v30 = 2112;
      v31 = v11;
      _os_log_impl(&dword_2218F0000, v9, OS_LOG_TYPE_INFO, "%{public}@Handling remote update CHIP key-value store message: %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v6);
    v12 = -[HMDCHIPHomeDataSource initWithFabricID:home:]([HMDCHIPHomeDataSource alloc], "initWithFabricID:home:", v5, v7);
    objc_msgSend(v4, "dictionaryForKey:", CFSTR("HMDHomeRemoteUpdateCHIPKeyValueStoreMessageKey"));
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    if (v13)
    {
      objc_msgSend(v4, "arrayForKey:", CFSTR("HMDHomeRemoteUpdateCHIPRemovedKeysMessageKey"));
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      v15 = MEMORY[0x24BDAC760];
      v25[0] = MEMORY[0x24BDAC760];
      v25[1] = 3221225472;
      v25[2] = __60__HMDHome_CHIP__handleRemoteUpdateCHIPKeyValueStoreMessage___block_invoke;
      v25[3] = &unk_24E7750F0;
      v26 = v13;
      v27 = v14;
      v23[0] = v15;
      v23[1] = 3221225472;
      v23[2] = __60__HMDHome_CHIP__handleRemoteUpdateCHIPKeyValueStoreMessage___block_invoke_2;
      v23[3] = &unk_24E79BD80;
      v24 = v4;
      v16 = v14;
      -[HMDCHIPHomeDataSource updateKeyValueStoreWithBlock:completion:](v12, "updateKeyValueStoreWithBlock:completion:", v25, v23);

    }
    else
    {
      v18 = (void *)MEMORY[0x227676638]();
      v19 = v7;
      HMFGetOSLogHandle();
      v20 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v21 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v4, "messagePayload");
        v22 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        v29 = v21;
        v30 = 2112;
        v31 = v22;
        _os_log_impl(&dword_2218F0000, v20, OS_LOG_TYPE_ERROR, "%{public}@Did not find key-value store in message payload: %@", buf, 0x16u);

      }
      objc_autoreleasePoolPop(v18);
      objc_msgSend(MEMORY[0x24BDD1540], "hmErrorWithCode:", 27);
      v16 = (id)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "respondWithError:", v16);
    }

  }
  else
  {
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v29 = v17;
      v30 = 2112;
      v31 = 0;
      _os_log_impl(&dword_2218F0000, v9, OS_LOG_TYPE_ERROR, "%{public}@Cannot handle remote update CHIP key-value store message with fabricID: %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v6);
    objc_msgSend(MEMORY[0x24BDD1540], "hmErrorWithCode:", -1);
    v12 = (HMDCHIPHomeDataSource *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "respondWithError:", v12);
  }

}

- (void)handleCHIPSendRemoteRequestMessage:(id)a3
{
  id v4;
  NSObject *v5;
  id v6;
  _QWORD v7[5];
  id v8;

  v4 = a3;
  -[HMDHome workQueue](self, "workQueue");
  v5 = objc_claimAutoreleasedReturnValue();
  v7[0] = MEMORY[0x24BDAC760];
  v7[1] = 3221225472;
  v7[2] = __52__HMDHome_CHIP__handleCHIPSendRemoteRequestMessage___block_invoke;
  v7[3] = &unk_24E79C268;
  v7[4] = self;
  v8 = v4;
  v6 = v4;
  dispatch_async(v5, v7);

}

- (void)handleCHIPSendReportMessage:(id)a3
{
  id v4;
  NSObject *v5;
  id v6;
  _QWORD v7[5];
  id v8;

  v4 = a3;
  -[HMDHome workQueue](self, "workQueue");
  v5 = objc_claimAutoreleasedReturnValue();
  v7[0] = MEMORY[0x24BDAC760];
  v7[1] = 3221225472;
  v7[2] = __45__HMDHome_CHIP__handleCHIPSendReportMessage___block_invoke;
  v7[3] = &unk_24E79C268;
  v7[4] = self;
  v8 = v4;
  v6 = v4;
  dispatch_async(v5, v7);

}

- (void)handleResetMatterStorageRequest:(id)a3
{
  id v4;
  NSObject *v5;
  id v6;
  _QWORD v7[5];
  id v8;

  v4 = a3;
  -[HMDHome workQueue](self, "workQueue");
  v5 = objc_claimAutoreleasedReturnValue();
  v7[0] = MEMORY[0x24BDAC760];
  v7[1] = 3221225472;
  v7[2] = __49__HMDHome_CHIP__handleResetMatterStorageRequest___block_invoke;
  v7[3] = &unk_24E79C268;
  v7[4] = self;
  v8 = v4;
  v6 = v4;
  dispatch_async(v5, v7);

}

- (void)fetchOperationalCertificatesForNewFabricWithFabricID:(id)a3 publicKey:(id)a4 fetchFromResident:(BOOL)a5 completion:(id)a6
{
  _BOOL4 v7;
  id v10;
  id v11;
  id v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  HMDHome *v17;
  NSObject *v18;
  void *v19;
  void *v20;
  void *v21;
  int v22;
  void *v23;
  __int16 v24;
  void *v25;
  uint64_t v26;

  v7 = a5;
  v26 = *MEMORY[0x24BDAC8D0];
  v10 = a3;
  v11 = a4;
  v12 = a6;
  if (v7 || -[HMDHome isOwnerUser](self, "isOwnerUser"))
  {
    if (isFeatureMatteriPhoneOnlyPairingControlEnabled())
    {
      -[HMDHome controllerPrivateStorage](self, "controllerPrivateStorage");
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v13, "cachedLocalControllerNodeID");
      v14 = (void *)objc_claimAutoreleasedReturnValue();

      if (!v7)
      {
LABEL_5:
        -[HMDHome currentUser](self, "currentUser");
        v15 = (void *)objc_claimAutoreleasedReturnValue();
        -[HMDHome handleCommissioningCertificateRequestWithCommissionerNodeID:commissioneeNodeID:fabricID:publicKey:sender:completion:](self, "handleCommissioningCertificateRequestWithCommissionerNodeID:commissioneeNodeID:fabricID:publicKey:sender:completion:", 0, 0, v10, v11, v15, v12);

LABEL_8:
        goto LABEL_12;
      }
    }
    else
    {
      v14 = 0;
      if (!v7)
        goto LABEL_5;
    }
    -[HMDHome retrieveOperationalCertificatesForFabricID:commissionerNodeID:commissioneeNodeID:publicKey:completion:](self, "retrieveOperationalCertificatesForFabricID:commissionerNodeID:commissioneeNodeID:publicKey:completion:", v10, v14, 0, v11, v12);
    goto LABEL_8;
  }
  v16 = (void *)MEMORY[0x227676638]();
  v17 = self;
  HMFGetOSLogHandle();
  v18 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
  {
    HMFGetLogIdentifier();
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHome currentUser](v17, "currentUser");
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    v22 = 138543618;
    v23 = v19;
    v24 = 2112;
    v25 = v20;
    _os_log_impl(&dword_2218F0000, v18, OS_LOG_TYPE_ERROR, "%{public}@Current user %@ is not the owner. Therefore it must request NOC from the primary resident", (uint8_t *)&v22, 0x16u);

  }
  objc_autoreleasePoolPop(v16);
  objc_msgSend(MEMORY[0x24BDD1540], "hmErrorWithCode:", 10);
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  (*((void (**)(id, _QWORD, _QWORD, _QWORD, _QWORD, void *))v12 + 2))(v12, 0, 0, 0, 0, v21);

LABEL_12:
}

- (void)_sendRemoteMessageUsingNodeId:(unint64_t)a3 payload:(id)a4 completion:(id)a5
{
  id v8;
  id v9;
  id v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  id v18;
  id v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(uint64_t, void *, void *);
  void *v24;
  HMDHome *v25;
  id v26;
  id v27;
  id v28;
  unint64_t v29;
  _QWORD v30[2];
  _QWORD v31[3];

  v31[2] = *MEMORY[0x24BDAC8D0];
  v8 = a4;
  v9 = a5;
  v10 = objc_alloc(MEMORY[0x24BE3F1B8]);
  -[HMDHome uuid](self, "uuid");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v12 = (void *)objc_msgSend(v10, "initWithTarget:", v11);

  v30[0] = CFSTR("HMDHomeCHIPNodeIDMessageKey");
  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedLongLong:", a3);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  v30[1] = CFSTR("HMDHomeCHIPRequestMessageKey");
  v31[0] = v13;
  v31[1] = v8;
  objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v31, v30, 2);
  v14 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(MEMORY[0x24BE3F1D0], "messageWithName:destination:payload:", CFSTR("HMDHomeCHIPSendRemoteRequestMessage"), v12, v14);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "CHIPRemoteMessageTimeout");
  v16 = (void *)objc_claimAutoreleasedReturnValue();

  if (v16)
  {
    objc_msgSend(v8, "CHIPRemoteMessageTimeout");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v17, "doubleValue");
    objc_msgSend(v15, "setTimeout:");

  }
  v21 = MEMORY[0x24BDAC760];
  v22 = 3221225472;
  v23 = __66__HMDHome_CHIP___sendRemoteMessageUsingNodeId_payload_completion___block_invoke;
  v24 = &unk_24E7762C0;
  v28 = v9;
  v29 = a3;
  v25 = self;
  v26 = v12;
  v27 = v14;
  v18 = v14;
  v19 = v12;
  v20 = v9;
  objc_msgSend(v15, "setResponseHandler:", &v21);
  -[HMDHome handleCHIPSendRemoteRequestMessage:](self, "handleCHIPSendRemoteRequestMessage:", v15, v21, v22, v23, v24, v25);

}

- (BOOL)_shouldFallbackLocallyForRemoteMatterRequest:(id)a3
{
  id v3;
  unint64_t v4;
  BOOL v5;

  v3 = a3;
  if (isFeatureMatteriPhoneOnlyPairingControlEnabled())
  {
    v4 = objc_msgSend(v3, "code");
    v5 = 1;
    if (v4 > 8 || ((1 << v4) & 0x11C) == 0)
      v5 = v4 == 3201;
  }
  else
  {
    v5 = 0;
  }

  return v5;
}

- (void)_handleResetAndRemoveAllCHIPPairingsFromAccessoryMessage:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  id v8;
  void *v9;
  HMDHome *v10;
  NSObject *v11;
  NSObject *v12;
  void *v13;
  void *v14;
  HMDHome *v15;
  NSObject *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  _QWORD v21[5];
  id v22;
  uint8_t buf[4];
  void *v24;
  __int16 v25;
  id v26;
  uint64_t v27;

  v27 = *MEMORY[0x24BDAC8D0];
  v4 = a3;
  objc_msgSend(v4, "uuidForKey:", CFSTR("kAccessoryUUID"));
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  if (v5)
  {
    -[HMDHome accessoryWithUUID:](self, "accessoryWithUUID:", v5);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
      v7 = v6;
    else
      v7 = 0;
    v8 = v7;

    v9 = (void *)MEMORY[0x227676638]();
    v10 = self;
    HMFGetOSLogHandle();
    v11 = objc_claimAutoreleasedReturnValue();
    v12 = v11;
    if (v8)
    {
      if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        v24 = v13;
        v25 = 2112;
        v26 = v8;
        _os_log_impl(&dword_2218F0000, v12, OS_LOG_TYPE_INFO, "%{public}@Resetting and removing all CHIP pairings from accessory: %@", buf, 0x16u);

      }
      objc_autoreleasePoolPop(v9);
      v21[0] = MEMORY[0x24BDAC760];
      v21[1] = 3221225472;
      v21[2] = __74__HMDHome_CHIP___handleResetAndRemoveAllCHIPPairingsFromAccessoryMessage___block_invoke;
      v21[3] = &unk_24E79BCC8;
      v21[4] = v10;
      v22 = v4;
      objc_msgSend(v8, "removeAllCHIPPairingsWithCompletion:", v21);

    }
    else
    {
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v19 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        v24 = v19;
        v25 = 2112;
        v26 = v5;
        _os_log_impl(&dword_2218F0000, v12, OS_LOG_TYPE_ERROR, "%{public}@Cannot find accessory with UUID %@ for reset and remove all CHIP pairings message", buf, 0x16u);

      }
      objc_autoreleasePoolPop(v9);
      objc_msgSend(MEMORY[0x24BDD1540], "hmErrorWithCode:", 2);
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "respondWithError:", v20);

      v8 = 0;
    }
  }
  else
  {
    v14 = (void *)MEMORY[0x227676638]();
    v15 = self;
    HMFGetOSLogHandle();
    v16 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "messagePayload");
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v24 = v17;
      v25 = 2112;
      v26 = v18;
      _os_log_impl(&dword_2218F0000, v16, OS_LOG_TYPE_ERROR, "%{public}@Cannot find accessory UUID in reset and remove all CHIP pairings message payload: %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v14);
    objc_msgSend(MEMORY[0x24BDD1540], "hmErrorWithCode:", 20);
    v8 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "respondWithError:", v8);
  }

}

- (void)_handleCHIPSendRemoteRequestMessage:(id)a3
{
  id v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t i;
  void *v10;
  void *v11;
  HMDHome *v12;
  NSObject *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  HMDHome *v17;
  void *v18;
  void *v19;
  void *v20;
  int v21;
  void *v22;
  HMDHome *v23;
  NSObject *v24;
  void *v25;
  void *v26;
  HMDHome *v27;
  NSObject *v28;
  void *v29;
  void *v30;
  void *v31;
  NSObject *v32;
  void *v33;
  void *v34;
  id v35;
  void *v36;
  void *v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  uint8_t buf[4];
  void *v43;
  __int16 v44;
  void *v45;
  __int16 v46;
  void *v47;
  _BYTE v48[128];
  uint64_t v49;

  v49 = *MEMORY[0x24BDAC8D0];
  v4 = a3;
  objc_msgSend(v4, "numberForKey:", CFSTR("HMDHomeCHIPNodeIDMessageKey"));
  v37 = (void *)objc_claimAutoreleasedReturnValue();
  if (v37)
  {
    v35 = v4;
    v40 = 0u;
    v41 = 0u;
    v38 = 0u;
    v39 = 0u;
    -[HMDHome hapAccessories](self, "hapAccessories");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v38, v48, 16);
    if (v6)
    {
      v7 = v6;
      v8 = *(_QWORD *)v39;
      while (2)
      {
        for (i = 0; i != v7; ++i)
        {
          if (*(_QWORD *)v39 != v8)
            objc_enumerationMutation(v5);
          v10 = *(void **)(*((_QWORD *)&v38 + 1) + 8 * i);
          v11 = (void *)MEMORY[0x227676638]();
          v12 = self;
          HMFGetOSLogHandle();
          v13 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
          {
            HMFGetLogIdentifier();
            v14 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v10, "matterNodeID");
            v36 = v10;
            v15 = v7;
            v16 = v8;
            v17 = self;
            v18 = v5;
            v19 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 138543874;
            v43 = v14;
            v44 = 2112;
            v45 = v19;
            v46 = 2112;
            v47 = v37;
            _os_log_impl(&dword_2218F0000, v13, OS_LOG_TYPE_DEBUG, "%{public}@Remote request dispatch compares %@ with %@", buf, 0x20u);

            v5 = v18;
            self = v17;
            v8 = v16;
            v7 = v15;
            v10 = v36;

          }
          objc_autoreleasePoolPop(v11);
          objc_msgSend(v10, "matterNodeID");
          v20 = (void *)objc_claimAutoreleasedReturnValue();
          v21 = objc_msgSend(v20, "isEqualToNumber:", v37);

          if (v21)
          {
            v26 = (void *)MEMORY[0x227676638]();
            v27 = v12;
            HMFGetOSLogHandle();
            v28 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v28, OS_LOG_TYPE_DEBUG))
            {
              HMFGetLogIdentifier();
              v29 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v10, "identifier");
              v30 = v5;
              v31 = (void *)objc_claimAutoreleasedReturnValue();
              *(_DWORD *)buf = 138543618;
              v43 = v29;
              v44 = 2112;
              v45 = v31;
              _os_log_impl(&dword_2218F0000, v28, OS_LOG_TYPE_DEBUG, "%{public}@Dispatching remote request to accessory %@", buf, 0x16u);

              v5 = v30;
            }

            objc_autoreleasePoolPop(v26);
            v4 = v35;
            objc_msgSend(v10, "handleCHIPSendRemoteRequestMessage:", v35);
            goto LABEL_22;
          }
        }
        v7 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v38, v48, 16);
        if (v7)
          continue;
        break;
      }
    }

    v22 = (void *)MEMORY[0x227676638]();
    v23 = self;
    HMFGetOSLogHandle();
    v24 = objc_claimAutoreleasedReturnValue();
    v4 = v35;
    if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v25 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v43 = v25;
      v44 = 2112;
      v45 = v35;
      _os_log_impl(&dword_2218F0000, v24, OS_LOG_TYPE_ERROR, "%{public}@Cannot find accessory for CHIP remote request: %@", buf, 0x16u);

    }
  }
  else
  {
    v22 = (void *)MEMORY[0x227676638]();
    v23 = self;
    HMFGetOSLogHandle();
    v32 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v33 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "messagePayload");
      v34 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v43 = v33;
      v44 = 2112;
      v45 = v34;
      _os_log_impl(&dword_2218F0000, v32, OS_LOG_TYPE_ERROR, "%{public}@Cannot find node ID in CHIP remote request message payload: %@", buf, 0x16u);

    }
  }

  objc_autoreleasePoolPop(v22);
  objc_msgSend(MEMORY[0x24BDD1540], "hmErrorWithCode:", 2);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "respondWithError:", v5);
LABEL_22:

}

- (void)_dispatchCHIPReport:(id)a3 destination:(id)a4
{
  id v6;
  id v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  HMDHome *v13;
  NSObject *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  _QWORD v24[4];
  id v25;
  id v26;
  id v27;
  uint8_t buf[4];
  void *v29;
  __int16 v30;
  id v31;
  __int16 v32;
  id v33;
  uint64_t v34;

  v34 = *MEMORY[0x24BDAC8D0];
  v6 = a3;
  v7 = a4;
  +[HMDDeviceHandle deviceHandleForDestination:](HMDDeviceHandle, "deviceHandleForDestination:", v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  +[HMDAccountRegistry sharedRegistry](HMDAccountRegistry, "sharedRegistry");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "deviceForHandle:", v8);
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v10, "account");
  v11 = (void *)objc_claimAutoreleasedReturnValue();

  if (v11)
  {
    if (!objc_msgSend(v10, "isCurrentDevice"))
    {
      objc_initWeak((id *)buf, self);
      -[HMDHome homeManager](self, "homeManager");
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      v21 = (void *)objc_msgSend(v6, "copy");
      -[HMDHome uuid](self, "uuid");
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      -[HMDHome workQueue](self, "workQueue");
      v23 = (void *)objc_claimAutoreleasedReturnValue();
      v24[0] = MEMORY[0x24BDAC760];
      v24[1] = 3221225472;
      v24[2] = __49__HMDHome_CHIP___dispatchCHIPReport_destination___block_invoke;
      v24[3] = &unk_24E79ACA8;
      objc_copyWeak(&v27, (id *)buf);
      v25 = v6;
      v26 = v7;
      objc_msgSend(v20, "sendSecureMessage:target:userID:destination:responseQueue:responseHandler:", v21, v22, v26, v26, v23, v24);

      objc_destroyWeak(&v27);
      objc_destroyWeak((id *)buf);
      goto LABEL_10;
    }
    v12 = (void *)MEMORY[0x227676638]();
    v13 = self;
    HMFGetOSLogHandle();
    v14 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v29 = v15;
      v30 = 2112;
      v31 = v7;
      _os_log_impl(&dword_2218F0000, v14, OS_LOG_TYPE_INFO, "%{public}@Skipping device %@ - ourselves", buf, 0x16u);

    }
  }
  else
  {
    v12 = (void *)MEMORY[0x227676638]();
    v13 = self;
    HMFGetOSLogHandle();
    v14 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v10, "shortDescription");
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543874;
      v29 = v18;
      v30 = 2112;
      v31 = v19;
      v32 = 2112;
      v33 = v7;
      _os_log_impl(&dword_2218F0000, v14, OS_LOG_TYPE_INFO, "%{public}@Device %@ for CHIP report destination %@ has no user attached to it. Destination removed.", buf, 0x20u);

    }
  }

  objc_autoreleasePoolPop(v12);
  -[HMDHome notificationRegistry](v13, "notificationRegistry");
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v16, "chipRemoteSubscribers");
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v17, "removeObject:", v7);

LABEL_10:
}

- (void)handleCommissioningCertificateRequest:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  id v10;
  _QWORD v11[4];
  id v12;

  v4 = a3;
  objc_msgSend(v4, "numberForKey:", CFSTR("HMDHomeCommissioningDeviceNodeIDMessageKey"));
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "numberForKey:", CFSTR("HMDHomeCommissioningFabricIDMessageKey"));
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "dataForKey:", CFSTR("HMDHomeCommissioningPublicKeyMessageKey"));
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "userForHome:", self);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  if (!isFeatureMatteriPhoneOnlyPairingControlEnabled())
    goto LABEL_4;
  objc_msgSend(v4, "numberForKey:", CFSTR("HMDHomeCommissioningCommissionerNodeIDMessageKey"));
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v9, "isEqualToNumber:", &unk_24E96A418))
  {

LABEL_4:
    v9 = 0;
  }
  v11[0] = MEMORY[0x24BDAC760];
  v11[1] = 3221225472;
  v11[2] = __55__HMDHome_CHIP__handleCommissioningCertificateRequest___block_invoke;
  v11[3] = &unk_24E775180;
  v12 = v4;
  v10 = v4;
  -[HMDHome handleCommissioningCertificateRequestWithCommissionerNodeID:commissioneeNodeID:fabricID:publicKey:sender:completion:](self, "handleCommissioningCertificateRequestWithCommissionerNodeID:commissioneeNodeID:fabricID:publicKey:sender:completion:", v9, v5, v6, v7, v8, v11);

}

- (void)handleCommissioningCertificateRequestWithCommissionerNodeID:(id)a3 commissioneeNodeID:(id)a4 fabricID:(id)a5 publicKey:(id)a6 sender:(id)a7 completion:(id)a8
{
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  void *v20;
  void *v21;
  char v22;
  void *v23;
  HMDHome *v24;
  NSObject *v25;
  void *v26;
  void *v27;
  const char *v28;
  NSObject *v29;
  uint32_t v30;
  void *v31;
  void *v32;
  void *v33;
  char v34;
  void *v35;
  HMDHome *v36;
  NSObject *v37;
  void *v38;
  const char *v39;
  NSObject *v40;
  uint32_t v41;
  void *v42;
  void *v43;
  char v44;
  void *v45;
  void *v46;
  uint64_t v47;
  id v48;
  id v49;
  id v50;
  void *v51;
  void *v52;
  _QWORD v53[4];
  id v54;
  id v55;
  HMDHome *v56;
  id v57;
  _QWORD aBlock[4];
  id v59;
  id v60;
  id v61;
  id v62;
  id v63;
  char v64;
  uint8_t buf[4];
  void *v66;
  __int16 v67;
  id v68;
  __int16 v69;
  void *v70;
  uint64_t v71;

  v71 = *MEMORY[0x24BDAC8D0];
  v14 = a3;
  v15 = a4;
  v16 = a5;
  v17 = a6;
  v18 = a7;
  v19 = a8;
  if (!-[HMDHome isOwnerUser](self, "isOwnerUser"))
  {
    v23 = (void *)MEMORY[0x227676638]();
    v24 = self;
    HMFGetOSLogHandle();
    v25 = objc_claimAutoreleasedReturnValue();
    if (!os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
      goto LABEL_15;
    HMFGetLogIdentifier();
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543362;
    v66 = v26;
    v28 = "%{public}@Non-owner user cannot handle request to generate certificates";
    v29 = v25;
    v30 = 12;
LABEL_13:
    _os_log_impl(&dword_2218F0000, v29, OS_LOG_TYPE_ERROR, v28, buf, v30);
LABEL_14:

    goto LABEL_15;
  }
  if (!v17)
  {
    v23 = (void *)MEMORY[0x227676638]();
    v24 = self;
    HMFGetOSLogHandle();
    v25 = objc_claimAutoreleasedReturnValue();
    if (!os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
      goto LABEL_15;
    HMFGetLogIdentifier();
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543618;
    v66 = v26;
    v67 = 2112;
    v68 = 0;
    v28 = "%{public}@Cannot handle remote request to retrieve certificates with public Key: %@";
    v29 = v25;
    v30 = 22;
    goto LABEL_13;
  }
  if (!isFeatureMatteriPhoneOnlyPairingControlEnabled())
  {
    if ((objc_msgSend(v16, "isEqual:", &unk_24E96A418) & 1) == 0)
    {
      if (v16)
      {
        -[HMDHome chipStorage](self, "chipStorage");
        v32 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v32, "fabricID");
        v33 = (void *)objc_claimAutoreleasedReturnValue();
        v34 = objc_msgSend(v16, "isEqual:", v33);

        if ((v34 & 1) == 0)
        {
          v23 = (void *)MEMORY[0x227676638]();
          v24 = self;
          HMFGetOSLogHandle();
          v25 = objc_claimAutoreleasedReturnValue();
          if (!os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
            goto LABEL_15;
          HMFGetLogIdentifier();
          v26 = (void *)objc_claimAutoreleasedReturnValue();
          -[HMDHome chipStorage](v24, "chipStorage");
          v51 = (void *)objc_claimAutoreleasedReturnValue();
          v52 = v23;
          objc_msgSend(v51, "fabricID");
          v27 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543874;
          v66 = v26;
          v67 = 2112;
          v68 = v16;
          v69 = 2112;
          v70 = v27;
          goto LABEL_40;
        }
      }
LABEL_21:
      if (objc_msgSend(v14, "isEqualToNumber:", &unk_24E96A418))
      {

        v14 = 0;
      }
      if (v15 && !v16)
      {
        v35 = (void *)MEMORY[0x227676638]();
        v36 = self;
        HMFGetOSLogHandle();
        v37 = objc_claimAutoreleasedReturnValue();
        if (!os_log_type_enabled(v37, OS_LOG_TYPE_ERROR))
        {
LABEL_28:

          objc_autoreleasePoolPop(v35);
          objc_msgSend(MEMORY[0x24BDD1540], "hmErrorWithCode:", -1);
          v16 = (id)objc_claimAutoreleasedReturnValue();
          (*((void (**)(id, _QWORD, _QWORD, _QWORD, _QWORD, id))v19 + 2))(v19, 0, 0, 0, 0, v16);
          goto LABEL_16;
        }
        HMFGetLogIdentifier();
        v38 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543874;
        v66 = v38;
        v67 = 2112;
        v68 = v15;
        v69 = 2112;
        v70 = 0;
        v39 = "%{public}@Cannot handle remote request to retrieve certificates with device Node ID %@ and fabricID %@";
        v40 = v37;
        v41 = 32;
LABEL_27:
        _os_log_impl(&dword_2218F0000, v40, OS_LOG_TYPE_ERROR, v39, buf, v41);

        goto LABEL_28;
      }
      if (isFeatureMatteriPhoneOnlyPairingControlEnabled())
      {
        -[HMDHome fabric](self, "fabric");
        v42 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v42, "fabricID");
        v43 = (void *)objc_claimAutoreleasedReturnValue();

        v44 = objc_msgSend(v18, "isOwner");
        if (v43)
          goto LABEL_37;
      }
      else
      {
        -[HMDHome chipStorage](self, "chipStorage");
        v45 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v45, "fabricID");
        v43 = (void *)objc_claimAutoreleasedReturnValue();

        v44 = 0;
        if (v43)
          goto LABEL_37;
      }
      if (!-[HMDHome isCurrentDevicePrimaryResident](self, "isCurrentDevicePrimaryResident")
        && -[HMDHome doesHomeContainResident](self, "doesHomeContainResident"))
      {
        v35 = (void *)MEMORY[0x227676638]();
        v36 = self;
        HMFGetOSLogHandle();
        v37 = objc_claimAutoreleasedReturnValue();
        if (!os_log_type_enabled(v37, OS_LOG_TYPE_ERROR))
          goto LABEL_28;
        HMFGetLogIdentifier();
        v38 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543362;
        v66 = v38;
        v39 = "%{public}@Failing commissioning cert because fabric creation is not allowed in this device while there is "
              "a resident in Home";
        v40 = v37;
        v41 = 12;
        goto LABEL_27;
      }
LABEL_37:
      -[HMDHome homeManager](self, "homeManager");
      v46 = (void *)objc_claimAutoreleasedReturnValue();
      v47 = MEMORY[0x24BDAC760];
      aBlock[0] = MEMORY[0x24BDAC760];
      aBlock[1] = 3221225472;
      aBlock[2] = __133__HMDHome_CHIP__handleCommissioningCertificateRequestWithCommissionerNodeID_commissioneeNodeID_fabricID_publicKey_sender_completion___block_invoke;
      aBlock[3] = &unk_24E7751A8;
      v63 = v19;
      v48 = v46;
      v59 = v48;
      v14 = v14;
      v60 = v14;
      v61 = v15;
      v64 = v44;
      v62 = v17;
      v53[0] = v47;
      v53[1] = 3221225472;
      v53[2] = __133__HMDHome_CHIP__handleCommissioningCertificateRequestWithCommissionerNodeID_commissioneeNodeID_fabricID_publicKey_sender_completion___block_invoke_2;
      v53[3] = &unk_24E79C0D0;
      v54 = v43;
      v55 = v48;
      v56 = self;
      v57 = _Block_copy(aBlock);
      v49 = v57;
      v50 = v48;
      v16 = v43;
      -[HMDHome updateCATIDsForUsersIfNeeded:completion:](self, "updateCATIDsForUsersIfNeeded:completion:", 1, v53);

      goto LABEL_16;
    }
LABEL_18:

    v16 = 0;
    goto LABEL_21;
  }
  if ((objc_msgSend(v16, "isEqualToNumber:", &unk_24E96A418) & 1) != 0)
    goto LABEL_18;
  if (!v16)
    goto LABEL_21;
  -[HMDHome fabric](self, "fabric");
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v20, "fabricID");
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  v22 = objc_msgSend(v16, "isEqual:", v21);

  if ((v22 & 1) != 0)
    goto LABEL_21;
  v23 = (void *)MEMORY[0x227676638]();
  v24 = self;
  HMFGetOSLogHandle();
  v25 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
  {
    HMFGetLogIdentifier();
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHome fabric](v24, "fabric");
    v51 = (void *)objc_claimAutoreleasedReturnValue();
    v52 = v23;
    objc_msgSend(v51, "fabricID");
    v27 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543874;
    v66 = v26;
    v67 = 2112;
    v68 = v16;
    v69 = 2112;
    v70 = v27;
LABEL_40:
    _os_log_impl(&dword_2218F0000, v25, OS_LOG_TYPE_ERROR, "%{public}@Cannot handle remote request to retrieve certificates for unknown fabricID %@. Current home fabric ID %@", buf, 0x20u);

    v23 = v52;
    goto LABEL_14;
  }
LABEL_15:

  objc_autoreleasePoolPop(v23);
  objc_msgSend(MEMORY[0x24BDD1540], "hmErrorWithCode:", -1);
  v31 = (void *)objc_claimAutoreleasedReturnValue();
  (*((void (**)(id, _QWORD, _QWORD, _QWORD, _QWORD, void *))v19 + 2))(v19, 0, 0, 0, 0, v31);

LABEL_16:
}

- (void)handleMatterPairingCompletionNotification:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  HMDHome *v16;
  NSObject *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  uint8_t buf[4];
  void *v24;
  __int16 v25;
  void *v26;
  __int16 v27;
  void *v28;
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  v4 = a3;
  objc_msgSend(v4, "numberForKey:", CFSTR("HMDHomePairingCompletionNodeIDMessageKey"));
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "numberForKey:", CFSTR("HMDHomePairingCompletionFabricIDMessageKey"));
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "numberForKey:", CFSTR("HMDHomePairingCompletionVendorIDMessageKey"));
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "numberForKey:", CFSTR("HMDHomePairingCompletionProductIDMessageKey"));
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "numberForKey:", CFSTR("HMDHomePairingCompletionConfigNumberMessageKey"));
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "numberForKey:", CFSTR("HMDHomePairingCompletionCategoryMessageKey"));
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "dataForKey:", CFSTR("HMDHomePairingCompletionTopologyMessageKey"));
  v11 = objc_claimAutoreleasedReturnValue();
  v12 = (void *)v11;
  if (v5 && v6)
  {
    -[HMDHome homeManager](self, "homeManager");
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v21, "accessoryBrowserInternal");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "chipAccessoryServerBrowser");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v14, "handlePairingCompletionForAccessoryWithNodeID:fabricID:vendorID:productID:configNumber:category:topology:", v5, v6, v7, v8, v9, v10, v12);

    objc_msgSend(v4, "respondWithSuccess");
  }
  else
  {
    v20 = v10;
    v22 = (void *)v11;
    v15 = (void *)MEMORY[0x227676638]();
    v16 = self;
    HMFGetOSLogHandle();
    v17 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543874;
      v24 = v18;
      v25 = 2112;
      v26 = v5;
      v27 = 2112;
      v28 = v6;
      _os_log_impl(&dword_2218F0000, v17, OS_LOG_TYPE_ERROR, "%{public}@Resident cannot establish connection with accessory with accessory node ID = %@, fabric ID = %@", buf, 0x20u);

    }
    objc_autoreleasePoolPop(v15);
    objc_msgSend(MEMORY[0x24BDD1540], "hmfErrorWithCode:", 8);
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "respondWithError:", v19);

    v10 = v20;
    v12 = v22;
  }

}

- (void)_handleResetMatterStorageRequest:(id)a3
{
  id v4;
  void *v5;
  HMDHome *v6;
  NSObject *v7;
  void *v8;
  id v9;
  _QWORD v10[5];
  id v11;
  uint8_t buf[4];
  void *v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  v4 = a3;
  v5 = (void *)MEMORY[0x227676638]();
  v6 = self;
  HMFGetOSLogHandle();
  v7 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543362;
    v13 = v8;
    _os_log_impl(&dword_2218F0000, v7, OS_LOG_TYPE_INFO, "%{public}@Handling request to reset Matter storage", buf, 0xCu);

  }
  objc_autoreleasePoolPop(v5);
  v10[0] = MEMORY[0x24BDAC760];
  v10[1] = 3221225472;
  v10[2] = __50__HMDHome_CHIP___handleResetMatterStorageRequest___block_invoke;
  v10[3] = &unk_24E79BCC8;
  v10[4] = v6;
  v11 = v4;
  v9 = v4;
  -[HMDHome _clearCHIPStorageWithCompletion:](v6, "_clearCHIPStorageWithCompletion:", v10);

}

- (void)_clearCHIPStorageWithCompletion:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  uint64_t v7;
  HMDCHIPHomeDataSource *v8;
  void *v9;
  HMDCHIPHomeDataSource *v10;
  _QWORD v11[5];
  id v12;

  v4 = a3;
  -[HMDHome chipStorage](self, "chipStorage");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "keyValueStore");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = objc_msgSend(v6, "count");

  if (v7)
  {
    v8 = [HMDCHIPHomeDataSource alloc];
    -[HMDHome matterFabricID](self, "matterFabricID");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v10 = -[HMDCHIPHomeDataSource initWithFabricID:home:](v8, "initWithFabricID:home:", v9, self);

    v11[0] = MEMORY[0x24BDAC760];
    v11[1] = 3221225472;
    v11[2] = __49__HMDHome_CHIP___clearCHIPStorageWithCompletion___block_invoke;
    v11[3] = &unk_24E79B3A0;
    v11[4] = self;
    v12 = v4;
    -[HMDCHIPHomeDataSource updateKeyValueStore:completion:](v10, "updateKeyValueStore:completion:", MEMORY[0x24BDBD1B8], v11);

  }
  else
  {
    (*((void (**)(id, _QWORD))v4 + 2))(v4, 0);
  }

}

- (BOOL)_doesUsersHaveCATID
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t i;
  void *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  int v11;
  BOOL v12;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  _BYTE v18[128];
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v14 = 0u;
  v15 = 0u;
  v16 = 0u;
  v17 = 0u;
  -[HMDHome users](self, "users", 0);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
  if (v3)
  {
    v4 = v3;
    v5 = *(_QWORD *)v15;
    while (2)
    {
      for (i = 0; i != v4; ++i)
      {
        if (*(_QWORD *)v15 != v5)
          objc_enumerationMutation(v2);
        v7 = *(void **)(*((_QWORD *)&v14 + 1) + 8 * i);
        if (objc_msgSend(v7, "isAllowedToHaveCATId"))
        {
          objc_msgSend(v7, "matterCASEAuthenticatedTagID");
          v8 = objc_claimAutoreleasedReturnValue();
          if (!v8
            || (v9 = (void *)v8,
                objc_msgSend(v7, "matterCASEAuthenticatedTagID"),
                v10 = (void *)objc_claimAutoreleasedReturnValue(),
                v11 = objc_msgSend(v10, "intValue"),
                v10,
                v9,
                !v11))
          {
            v12 = 0;
            goto LABEL_13;
          }
        }
      }
      v4 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
      if (v4)
        continue;
      break;
    }
  }
  v12 = 1;
LABEL_13:

  return v12;
}

- (void)updateCATIDForUsersIfNeeded:(BOOL)a3
{
  -[HMDHome updateCATIDsForUsersIfNeeded:completion:](self, "updateCATIDsForUsersIfNeeded:completion:", a3, 0);
}

- (void)updateCATIDsForUsersIfNeeded:(BOOL)a3 completion:(id)a4
{
  _BOOL4 v4;
  void (**v6)(id, _QWORD);
  void *v7;
  uint64_t v8;
  void *v9;
  HMDHome *v10;
  NSObject *v11;
  void *v12;
  void *v13;
  void *v14;
  char v15;
  void *v16;
  char v17;
  void *v18;
  void *v19;
  void *v20;
  HMDHome *v21;
  NSObject *v22;
  void *v23;
  _QWORD v24[5];
  void (**v25)(id, _QWORD);
  uint8_t buf[4];
  void *v27;
  __int16 v28;
  uint64_t v29;
  __int16 v30;
  void *v31;
  __int16 v32;
  uint64_t v33;
  __int16 v34;
  void *v35;
  uint64_t v36;

  v4 = a3;
  v36 = *MEMORY[0x24BDAC8D0];
  v6 = (void (**)(id, _QWORD))a4;
  if (-[HMDHome _doesUsersHaveCATID](self, "_doesUsersHaveCATID") || !-[HMDHome isOwnerUser](self, "isOwnerUser"))
    goto LABEL_16;
  -[HMDHome matterAccessories](self, "matterAccessories");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = objc_msgSend(v7, "count");

  if (!v8 && !v4)
  {
    v9 = (void *)MEMORY[0x227676638]();
    v10 = self;
    HMFGetOSLogHandle();
    v11 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
    {
      HMFGetLogIdentifier();
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v27 = v12;
      _os_log_impl(&dword_2218F0000, v11, OS_LOG_TYPE_DEBUG, "%{public}@Not Updating CAT as its not pairing and there are no matter accessories yet", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v9);
    goto LABEL_16;
  }
  -[HMDHome residentDeviceManager](self, "residentDeviceManager");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  if ((objc_msgSend(v13, "hasAnyResident") & 1) != 0)
  {
    -[HMDHome residentDeviceManager](self, "residentDeviceManager");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    v15 = objc_msgSend(v14, "isCurrentDeviceConfirmedPrimaryResident");

    if ((v15 & 1) != 0)
      goto LABEL_19;
  }
  else
  {

  }
  -[HMDHome residentDeviceManager](self, "residentDeviceManager");
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  if ((objc_msgSend(v16, "hasAnyResident") & 1) != 0)
  {

    goto LABEL_16;
  }
  v17 = isThisDeviceDesignatedFMFDevice();

  if ((v17 & 1) == 0 && !v4)
  {
LABEL_16:
    if (v6)
      v6[2](v6, 0);
    goto LABEL_18;
  }
LABEL_19:
  -[HMDHome accessoryAdministerPrivilegeCATID:](self, "accessoryAdministerPrivilegeCATID:", 1);
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  if (-[HMDHome hasSharedUser](self, "hasSharedUser"))
  {
    -[HMDHome accessoryOperatePrivilegeCATID:](self, "accessoryOperatePrivilegeCATID:", 1);
    v19 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v19 = 0;
  }
  v20 = (void *)MEMORY[0x227676638]();
  v21 = self;
  HMFGetOSLogHandle();
  v22 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v22, OS_LOG_TYPE_DEBUG))
  {
    HMFGetLogIdentifier();
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138544386;
    v27 = v23;
    v28 = 2048;
    v29 = objc_msgSend(v19, "integerValue");
    v30 = 2112;
    v31 = v19;
    v32 = 2048;
    v33 = objc_msgSend(v18, "integerValue");
    v34 = 2112;
    v35 = v18;
    _os_log_impl(&dword_2218F0000, v22, OS_LOG_TYPE_DEBUG, "%{public}@Updating CAT for new user Operate 0x%lX %@, Administer 0x%lX (%@)", buf, 0x34u);

  }
  objc_autoreleasePoolPop(v20);
  v24[0] = MEMORY[0x24BDAC760];
  v24[1] = 3221225472;
  v24[2] = __57__HMDHome_CHIP__updateCATIDsForUsersIfNeeded_completion___block_invoke;
  v24[3] = &unk_24E79B3A0;
  v24[4] = v21;
  v25 = v6;
  -[HMDHome updateUserCATWithOperatePrivilege:administerPrivilege:completion:](v21, "updateUserCATWithOperatePrivilege:administerPrivilege:completion:", v19, v18, v24);

LABEL_18:
}

- (BOOL)hasSharedUser
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t i;
  void *v7;
  BOOL v8;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _BYTE v14[128];
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  -[HMDHome users](self, "users", 0);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
  if (v3)
  {
    v4 = v3;
    v5 = *(_QWORD *)v11;
    while (2)
    {
      for (i = 0; i != v4; ++i)
      {
        if (*(_QWORD *)v11 != v5)
          objc_enumerationMutation(v2);
        v7 = *(void **)(*((_QWORD *)&v10 + 1) + 8 * i);
        if (objc_msgSend(v7, "privilege") == 4 || !objc_msgSend(v7, "privilege"))
        {
          v8 = 1;
          goto LABEL_13;
        }
      }
      v4 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
      v8 = 0;
      if (v4)
        continue;
      break;
    }
  }
  else
  {
    v8 = 0;
  }
LABEL_13:

  return v8;
}

- (id)accessoryOperatePrivilegeCATID:(BOOL)a3
{
  _BOOL4 v3;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t i;
  void *v11;
  void *v12;
  char v13;
  uint64_t v14;
  void *v15;
  void *v16;
  char v17;
  void *v18;
  void *v19;
  HMDHome *v20;
  NSObject *v21;
  void *v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  void *v27;
  HMDHome *v28;
  NSObject *v29;
  void *v30;
  uint64_t v31;
  _BOOL4 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  uint8_t buf[4];
  void *v39;
  __int16 v40;
  uint64_t v41;
  __int16 v42;
  uint64_t v43;
  __int16 v44;
  void *v45;
  _BYTE v46[128];
  uint64_t v47;

  v3 = a3;
  v47 = *MEMORY[0x24BDAC8D0];
  v34 = 0u;
  v35 = 0u;
  v36 = 0u;
  v37 = 0u;
  -[HMDHome users](self, "users");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v34, v46, 16);
  if (!v6)
  {
LABEL_21:

LABEL_22:
    -[HMDHome currentOperateCATID](self, "currentOperateCATID");
    v8 = (void *)objc_claimAutoreleasedReturnValue();

    if (v8)
    {
      -[HMDHome currentOperateCATID](self, "currentOperateCATID");
      v8 = (void *)objc_claimAutoreleasedReturnValue();
    }
    if (!v8 && v3)
    {
      objc_msgSend(MEMORY[0x24BE4EFA8], "caseAuthenticatedTagWithIdentifier:version:", objc_msgSend(MEMORY[0x24BE4EFA8], "randomCASEAuthenticatedTagIdentifier"), 1);
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      v27 = (void *)MEMORY[0x227676638]();
      v28 = self;
      HMFGetOSLogHandle();
      v29 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v29, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v30 = (void *)objc_claimAutoreleasedReturnValue();
        v31 = objc_msgSend(v8, "integerValue");
        *(_DWORD *)buf = 138543874;
        v39 = v30;
        v40 = 2048;
        v41 = v31;
        v42 = 2112;
        v43 = (uint64_t)v8;
        _os_log_impl(&dword_2218F0000, v29, OS_LOG_TYPE_INFO, "%{public}@Generated new CAT for accessory operate 0x%lX (%@)", buf, 0x20u);

      }
      objc_autoreleasePoolPop(v27);
    }
    goto LABEL_29;
  }
  v7 = v6;
  v33 = v3;
  v8 = 0;
  v9 = *(_QWORD *)v35;
  while (2)
  {
    for (i = 0; i != v7; ++i)
    {
      if (*(_QWORD *)v35 != v9)
        objc_enumerationMutation(v5);
      v11 = *(void **)(*((_QWORD *)&v34 + 1) + 8 * i);
      if ((objc_msgSend(v11, "privilege") | 4) == 4)
      {
        if (v8
          || (objc_msgSend(v11, "matterCASEAuthenticatedTagID"),
              v18 = (void *)objc_claimAutoreleasedReturnValue(),
              v18,
              !v18))
        {
          objc_msgSend(v11, "matterCASEAuthenticatedTagID");
          v12 = (void *)objc_claimAutoreleasedReturnValue();
          v13 = objc_msgSend(v12, "isEqual:", v8);

          if ((v13 & 1) == 0)
          {
            objc_msgSend(v11, "matterCASEAuthenticatedTagID");
            v14 = objc_claimAutoreleasedReturnValue();
            if (v14)
            {
              v15 = (void *)v14;
              objc_msgSend(v11, "matterCASEAuthenticatedTagID");
              v16 = (void *)objc_claimAutoreleasedReturnValue();
              v17 = objc_msgSend(v16, "isEqual:", v8);

              if ((v17 & 1) == 0)
              {
                v19 = (void *)MEMORY[0x227676638]();
                v20 = self;
                HMFGetOSLogHandle();
                v21 = objc_claimAutoreleasedReturnValue();
                if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
                {
                  HMFGetLogIdentifier();
                  v23 = (void *)objc_claimAutoreleasedReturnValue();
                  v24 = objc_msgSend(v8, "integerValue");
                  objc_msgSend(v11, "matterCASEAuthenticatedTagID");
                  v25 = (void *)objc_claimAutoreleasedReturnValue();
                  v26 = objc_msgSend(v25, "integerValue");
                  *(_DWORD *)buf = 138544130;
                  v39 = v23;
                  v40 = 2048;
                  v41 = v24;
                  v42 = 2048;
                  v43 = v26;
                  v44 = 2112;
                  v45 = v11;
                  _os_log_impl(&dword_2218F0000, v21, OS_LOG_TYPE_ERROR, "%{public}@CATID mismatch between users - current 0x%lX userCAT 0x%lX user %@", buf, 0x2Au);

                }
                objc_autoreleasePoolPop(v19);

                v3 = v33;
                goto LABEL_21;
              }
            }
          }
        }
        else
        {
          objc_msgSend(v11, "matterCASEAuthenticatedTagID");
          v8 = (void *)objc_claimAutoreleasedReturnValue();
        }
      }
    }
    v7 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v34, v46, 16);
    if (v7)
      continue;
    break;
  }

  v3 = v33;
  if (!v8)
    goto LABEL_22;
LABEL_29:
  -[HMDHome setCurrentOperateCATID:](self, "setCurrentOperateCATID:", v8);
  return v8;
}

- (id)accessoryAdministerPrivilegeCATID:(BOOL)a3
{
  _BOOL4 v3;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t i;
  void *v11;
  void *v12;
  char v13;
  uint64_t v14;
  void *v15;
  void *v16;
  char v17;
  void *v18;
  void *v19;
  HMDHome *v20;
  NSObject *v21;
  void *v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  void *v27;
  HMDHome *v28;
  NSObject *v29;
  void *v30;
  uint64_t v31;
  _BOOL4 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  uint8_t buf[4];
  void *v39;
  __int16 v40;
  uint64_t v41;
  __int16 v42;
  uint64_t v43;
  __int16 v44;
  void *v45;
  _BYTE v46[128];
  uint64_t v47;

  v3 = a3;
  v47 = *MEMORY[0x24BDAC8D0];
  v34 = 0u;
  v35 = 0u;
  v36 = 0u;
  v37 = 0u;
  -[HMDHome users](self, "users");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v34, v46, 16);
  if (!v6)
  {
LABEL_21:

LABEL_22:
    -[HMDHome currentAdministerCATID](self, "currentAdministerCATID");
    v8 = (void *)objc_claimAutoreleasedReturnValue();

    if (v8)
    {
      -[HMDHome currentAdministerCATID](self, "currentAdministerCATID");
      v8 = (void *)objc_claimAutoreleasedReturnValue();
    }
    if (!v8 && v3)
    {
      objc_msgSend(MEMORY[0x24BE4EFA8], "caseAuthenticatedTagWithIdentifier:version:", objc_msgSend(MEMORY[0x24BE4EFA8], "randomCASEAuthenticatedTagIdentifier"), 1);
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      v27 = (void *)MEMORY[0x227676638]();
      v28 = self;
      HMFGetOSLogHandle();
      v29 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v29, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v30 = (void *)objc_claimAutoreleasedReturnValue();
        v31 = objc_msgSend(v8, "integerValue");
        *(_DWORD *)buf = 138543874;
        v39 = v30;
        v40 = 2048;
        v41 = v31;
        v42 = 2112;
        v43 = (uint64_t)v8;
        _os_log_impl(&dword_2218F0000, v29, OS_LOG_TYPE_INFO, "%{public}@Generated new CAT for accessory administer 0x%lX (%@)", buf, 0x20u);

      }
      objc_autoreleasePoolPop(v27);
    }
    goto LABEL_29;
  }
  v7 = v6;
  v33 = v3;
  v8 = 0;
  v9 = *(_QWORD *)v35;
  while (2)
  {
    for (i = 0; i != v7; ++i)
    {
      if (*(_QWORD *)v35 != v9)
        objc_enumerationMutation(v5);
      v11 = *(void **)(*((_QWORD *)&v34 + 1) + 8 * i);
      if (objc_msgSend(v11, "privilege") == 3)
      {
        if (v8
          || (objc_msgSend(v11, "matterCASEAuthenticatedTagID"),
              v18 = (void *)objc_claimAutoreleasedReturnValue(),
              v18,
              !v18))
        {
          objc_msgSend(v11, "matterCASEAuthenticatedTagID");
          v12 = (void *)objc_claimAutoreleasedReturnValue();
          v13 = objc_msgSend(v12, "isEqual:", v8);

          if ((v13 & 1) == 0)
          {
            objc_msgSend(v11, "matterCASEAuthenticatedTagID");
            v14 = objc_claimAutoreleasedReturnValue();
            if (v14)
            {
              v15 = (void *)v14;
              objc_msgSend(v11, "matterCASEAuthenticatedTagID");
              v16 = (void *)objc_claimAutoreleasedReturnValue();
              v17 = objc_msgSend(v16, "isEqual:", v8);

              if ((v17 & 1) == 0)
              {
                v19 = (void *)MEMORY[0x227676638]();
                v20 = self;
                HMFGetOSLogHandle();
                v21 = objc_claimAutoreleasedReturnValue();
                if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
                {
                  HMFGetLogIdentifier();
                  v23 = (void *)objc_claimAutoreleasedReturnValue();
                  v24 = objc_msgSend(v8, "integerValue");
                  objc_msgSend(v11, "matterCASEAuthenticatedTagID");
                  v25 = (void *)objc_claimAutoreleasedReturnValue();
                  v26 = objc_msgSend(v25, "integerValue");
                  *(_DWORD *)buf = 138544130;
                  v39 = v23;
                  v40 = 2048;
                  v41 = v24;
                  v42 = 2048;
                  v43 = v26;
                  v44 = 2112;
                  v45 = v11;
                  _os_log_impl(&dword_2218F0000, v21, OS_LOG_TYPE_ERROR, "%{public}@CATID mismatch between users - current 0x%lX userCAT 0x%lX user %@", buf, 0x2Au);

                }
                objc_autoreleasePoolPop(v19);

                v3 = v33;
                goto LABEL_21;
              }
            }
          }
        }
        else
        {
          objc_msgSend(v11, "matterCASEAuthenticatedTagID");
          v8 = (void *)objc_claimAutoreleasedReturnValue();
        }
      }
    }
    v7 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v34, v46, 16);
    if (v7)
      continue;
    break;
  }

  v3 = v33;
  if (!v8)
    goto LABEL_22;
LABEL_29:
  -[HMDHome setCurrentAdministerCATID:](self, "setCurrentAdministerCATID:", v8);
  return v8;
}

- (void)incrementOperatePrivilegeCATVersion:(id)a3
{
  void (**v4)(id, void *);
  void *v5;
  void *v6;
  void *v7;
  HMDHome *v8;
  NSObject *v9;
  void *v10;
  uint64_t v11;
  int v12;
  uint8_t buf[4];
  void *v14;
  __int16 v15;
  uint64_t v16;
  __int16 v17;
  void *v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v4 = (void (**)(id, void *))a3;
  -[HMDHome accessoryOperatePrivilegeCATID:](self, "accessoryOperatePrivilegeCATID:", 1);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v12 = 0;
  objc_msgSend(MEMORY[0x24BE4EFA8], "parseCaseAuthenticatedTag:identifier:version:", v5, (char *)&v12 + 2, &v12);
  objc_msgSend(MEMORY[0x24BE4EFA8], "caseAuthenticatedTagWithIdentifier:version:", HIWORD(v12), (unsigned __int16)(v12 + 1));
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = (void *)MEMORY[0x227676638]();
  v8 = self;
  HMFGetOSLogHandle();
  v9 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v11 = objc_msgSend(v6, "integerValue");
    *(_DWORD *)buf = 138543874;
    v14 = v10;
    v15 = 2048;
    v16 = v11;
    v17 = 2112;
    v18 = v6;
    _os_log_impl(&dword_2218F0000, v9, OS_LOG_TYPE_INFO, "%{public}@Bumping tag version for operate as 0x%lX (%@)", buf, 0x20u);

  }
  objc_autoreleasePoolPop(v7);
  v4[2](v4, v6);

}

- (void)updateUserCATWithOperatePrivilege:(id)a3 administerPrivilege:(id)a4
{
  -[HMDHome updateUserCATWithOperatePrivilege:administerPrivilege:completion:](self, "updateUserCATWithOperatePrivilege:administerPrivilege:completion:", a3, a4, 0);
}

- (void)updateUserCATWithOperatePrivilege:(id)a3 administerPrivilege:(id)a4 completion:(id)a5
{
  id v8;
  id v9;
  id v10;
  NSObject *v11;
  id v12;
  id v13;
  id v14;
  _QWORD v15[5];
  id v16;
  id v17;
  id v18;

  v8 = a3;
  v9 = a4;
  v10 = a5;
  -[HMDHome workQueue](self, "workQueue");
  v11 = objc_claimAutoreleasedReturnValue();
  v15[0] = MEMORY[0x24BDAC760];
  v15[1] = 3221225472;
  v15[2] = __82__HMDHome_CHIP__updateUserCATWithOperatePrivilege_administerPrivilege_completion___block_invoke;
  v15[3] = &unk_24E79B3F0;
  v15[4] = self;
  v16 = v8;
  v17 = v9;
  v18 = v10;
  v12 = v10;
  v13 = v9;
  v14 = v8;
  dispatch_async(v11, v15);

}

- (BOOL)isPrimaryResidentNodeReachableAndThreadCapable
{
  void *v3;
  void *v4;
  void *v5;
  char v6;

  -[HMDHome primaryResident](self, "primaryResident");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v3, "isReachable"))
  {
    -[HMDHome primaryResident](self, "primaryResident");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "capabilities");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = objc_msgSend(v5, "supportsThreadBorderRouter");

  }
  else
  {
    v6 = 0;
  }

  return v6;
}

- (BOOL)areAllThreadResidentNodesUnreachable
{
  void *v2;
  char v3;

  -[HMDHome enabledResidents](self, "enabledResidents");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "na_allObjectsPassTest:", &__block_literal_global_173);

  return v3;
}

- (BOOL)isPrimaryResidentNodeReachable
{
  void *v2;
  char v3;

  -[HMDHome primaryResident](self, "primaryResident");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "isReachable");

  return v3;
}

- (id)privateDataSourceForNode:(id)a3
{
  id v4;
  void *v5;
  void *v6;

  v4 = a3;
  -[HMDHome controllerPrivateStorage](self, "controllerPrivateStorage");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "privateDataSourceForControllerNodeID:", v4);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  return v6;
}

- (id)currentDeviceControllerNodeID
{
  void *v2;
  void *v3;

  -[HMDHome controllerPrivateStorage](self, "controllerPrivateStorage");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "cachedLocalControllerNodeID");
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  return v3;
}

- (id)matterPathWithUUID:(id)a3
{
  id v4;
  void *v5;
  int v6;
  void *v7;
  id v8;
  _QWORD v10[4];
  id v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t (*v16)(uint64_t, uint64_t);
  void (*v17)(uint64_t);
  id v18;

  v4 = a3;
  -[HMDHome featureDataSource](self, "featureDataSource");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend(v5, "isNativeMatterEnabled");

  if (v6)
  {
    v13 = 0;
    v14 = &v13;
    v15 = 0x3032000000;
    v16 = __Block_byref_object_copy__9130;
    v17 = __Block_byref_object_dispose__9131;
    v18 = 0;
    -[HMDHome accessories](self, "accessories");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v10[0] = MEMORY[0x24BDAC760];
    v10[1] = 3221225472;
    v10[2] = __36__HMDHome_CHIP__matterPathWithUUID___block_invoke;
    v10[3] = &unk_24E775218;
    v12 = &v13;
    v11 = v4;
    objc_msgSend(v7, "hmf_enumerateWithAutoreleasePoolUsingBlock:", v10);

    v8 = (id)v14[5];
    _Block_object_dispose(&v13, 8);

  }
  else
  {
    v8 = 0;
  }

  return v8;
}

void __36__HMDHome_CHIP__matterPathWithUUID___block_invoke(uint64_t a1, void *a2, uint64_t a3, _BYTE *a4)
{
  void *v6;
  id v7;
  void *v8;
  id v9;
  char isKindOfClass;
  id v11;
  void *v12;
  id v13;
  void *v14;
  id v15;
  void *v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  id v21;

  v21 = a2;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v6 = v21;
  else
    v6 = 0;
  v7 = v6;
  if (v7)
  {

    v8 = v21;
  }
  else
  {
    v9 = v21;
    objc_opt_class();
    isKindOfClass = objc_opt_isKindOfClass();

    v8 = v21;
    if (!v9 || (isKindOfClass & 1) == 0)
      goto LABEL_19;
  }
  v11 = v8;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v12 = v11;
  else
    v12 = 0;
  v13 = v12;

  objc_msgSend(v13, "matterAdapter");
  v14 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v14)
  {
    v15 = v11;
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
      v16 = v15;
    else
      v16 = 0;
    v17 = v16;

    objc_msgSend(v17, "matterAdapter");
    v14 = (void *)objc_claimAutoreleasedReturnValue();

  }
  objc_msgSend(v14, "matterPathWithUUID:", *(_QWORD *)(a1 + 32));
  v18 = objc_claimAutoreleasedReturnValue();
  v19 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v20 = *(void **)(v19 + 40);
  *(_QWORD *)(v19 + 40) = v18;

  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40))
    *a4 = 1;

  v8 = v21;
LABEL_19:

}

uint64_t __53__HMDHome_CHIP__areAllThreadResidentNodesUnreachable__block_invoke(uint64_t a1, void *a2)
{
  id v2;
  void *v3;
  uint64_t v4;

  v2 = a2;
  objc_msgSend(v2, "capabilities");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v3, "supportsThreadBorderRouter"))
    v4 = objc_msgSend(v2, "isReachable") ^ 1;
  else
    v4 = 1;

  return v4;
}

void __82__HMDHome_CHIP__updateUserCATWithOperatePrivilege_administerPrivilege_completion___block_invoke(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  id *v10;
  uint64_t i;
  void *v12;
  uint64_t v13;
  void *v14;
  char v15;
  id *v16;
  void *v17;
  char v18;
  id v19;
  void *v20;
  void *v21;
  void *v22;
  id v23;
  NSObject *v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  void *v29;
  void *v30;
  uint64_t v31;
  void *v32;
  id *v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  uint8_t buf[4];
  void *v39;
  __int16 v40;
  void *v41;
  __int16 v42;
  uint64_t v43;
  __int16 v44;
  void *v45;
  _BYTE v46[128];
  uint64_t v47;

  v1 = a1;
  v47 = *MEMORY[0x24BDAC8D0];
  objc_msgSend(*(id *)(a1 + 32), "backingStore");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  +[HMDBackingStoreTransactionOptions defaultXPCOptions](HMDBackingStoreTransactionOptions, "defaultXPCOptions");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "transaction:options:", CFSTR("UpdatingUserCATIDs"), v3);
  v32 = (void *)objc_claimAutoreleasedReturnValue();

  v36 = 0u;
  v37 = 0u;
  v34 = 0u;
  v35 = 0u;
  objc_msgSend(*(id *)(v1 + 32), "users");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v34, v46, 16);
  if (!v5)
  {

    goto LABEL_23;
  }
  v7 = v5;
  v8 = 0;
  v9 = *(_QWORD *)v35;
  v33 = (id *)(v1 + 48);
  v31 = v1;
  v10 = (id *)(v1 + 40);
  *(_QWORD *)&v6 = 138544130;
  v28 = v6;
  v30 = v4;
  do
  {
    for (i = 0; i != v7; ++i)
    {
      if (*(_QWORD *)v35 != v9)
        objc_enumerationMutation(v4);
      v12 = *(void **)(*((_QWORD *)&v34 + 1) + 8 * i);
      v13 = objc_msgSend(v12, "privilege", v28);
      if (v13 != 4)
      {
        if (v13 == 3)
        {
          if (!*v33)
            continue;
          objc_msgSend(v12, "matterCASEAuthenticatedTagID");
          v17 = (void *)objc_claimAutoreleasedReturnValue();
          v18 = objc_msgSend(v17, "isEqual:", *v33);

          v16 = v33;
          if ((v18 & 1) != 0)
            continue;
          goto LABEL_14;
        }
        if (v13)
          continue;
      }
      if (!*v10)
        continue;
      objc_msgSend(v12, "matterCASEAuthenticatedTagID");
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      v15 = objc_msgSend(v14, "isEqual:", *v10);

      v16 = v10;
      if ((v15 & 1) != 0)
        continue;
LABEL_14:
      v19 = *v16;
      if (v19)
      {
        v20 = v19;
        v21 = (void *)objc_msgSend(v12, "newModelWithChangeType:", 2);
        objc_msgSend(v21, "setMatterCASEAuthenticatedTagID:", v20);
        v22 = (void *)MEMORY[0x227676638](objc_msgSend(v32, "add:", v21));
        v23 = *(id *)(v31 + 32);
        HMFGetOSLogHandle();
        v24 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v24, OS_LOG_TYPE_INFO))
        {
          HMFGetLogIdentifier();
          v29 = v22;
          v25 = (void *)objc_claimAutoreleasedReturnValue();
          v26 = objc_msgSend(v20, "integerValue");
          *(_DWORD *)buf = v28;
          v39 = v25;
          v40 = 2112;
          v41 = v12;
          v42 = 2048;
          v43 = v26;
          v44 = 2112;
          v45 = v20;
          _os_log_impl(&dword_2218F0000, v24, OS_LOG_TYPE_INFO, "%{public}@Updated CATID transaction for user %@ to 0x%lX (%@)", buf, 0x2Au);

          v22 = v29;
        }

        objc_autoreleasePoolPop(v22);
        v8 = 1;
        v4 = v30;
      }
    }
    v7 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v34, v46, 16);
  }
  while (v7);

  v1 = v31;
  if ((v8 & 1) != 0)
  {
    objc_msgSend(v32, "run:", *(_QWORD *)(v31 + 56));
    goto LABEL_25;
  }
LABEL_23:
  v27 = *(_QWORD *)(v1 + 56);
  if (v27)
    (*(void (**)(uint64_t, _QWORD))(v27 + 16))(v27, 0);
LABEL_25:

}

void __57__HMDHome_CHIP__updateCATIDsForUsersIfNeeded_completion___block_invoke(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  NSObject *v6;
  void *v7;
  uint64_t v8;
  void (*v9)(void);
  void *v10;
  void *v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  _QWORD v15[4];
  id v16;
  uint64_t v17;
  id v18;
  uint8_t buf[4];
  void *v20;
  __int16 v21;
  id v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  v3 = a2;
  if (v3)
  {
    v4 = (void *)MEMORY[0x227676638]();
    v5 = *(id *)(a1 + 32);
    HMFGetOSLogHandle();
    v6 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v20 = v7;
      v21 = 2112;
      v22 = v3;
      _os_log_impl(&dword_2218F0000, v6, OS_LOG_TYPE_ERROR, "%{public}@Failed transaction to update user CAT: %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v4);
    v8 = *(_QWORD *)(a1 + 40);
    if (v8)
    {
      v9 = *(void (**)(void))(v8 + 16);
LABEL_10:
      v9();
    }
  }
  else if (isFeatureMatteriPhoneOnlyPairingControlEnabled())
  {
    objc_msgSend(*(id *)(a1 + 32), "fabric");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "invalidateCachedData");

    objc_msgSend(*(id *)(a1 + 32), "fabric");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v15[0] = MEMORY[0x24BDAC760];
    v15[1] = 3221225472;
    v15[2] = __57__HMDHome_CHIP__updateCATIDsForUsersIfNeeded_completion___block_invoke_168;
    v15[3] = &unk_24E79AB68;
    v12 = *(_QWORD *)(a1 + 32);
    v13 = *(void **)(a1 + 40);
    v16 = 0;
    v17 = v12;
    v18 = v13;
    objc_msgSend(v11, "loadFabricAndControllerDataForPairing:fetchFromResident:completion:", 0, 0, v15);

  }
  else
  {
    v14 = *(_QWORD *)(a1 + 40);
    if (v14)
    {
      v9 = *(void (**)(void))(v14 + 16);
      goto LABEL_10;
    }
  }

}

void __57__HMDHome_CHIP__updateCATIDsForUsersIfNeeded_completion___block_invoke_168(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  NSObject *v6;
  void *v7;
  uint64_t v8;
  int v9;
  void *v10;
  __int16 v11;
  id v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v3 = a2;
  if (*(_QWORD *)(a1 + 32))
  {
    v4 = (void *)MEMORY[0x227676638]();
    v5 = *(id *)(a1 + 40);
    HMFGetOSLogHandle();
    v6 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      v9 = 138543618;
      v10 = v7;
      v11 = 2112;
      v12 = v3;
      _os_log_impl(&dword_2218F0000, v6, OS_LOG_TYPE_ERROR, "%{public}@Failed to refresh fabric with updated CAT IDs: %@", (uint8_t *)&v9, 0x16u);

    }
    objc_autoreleasePoolPop(v4);
  }
  v8 = *(_QWORD *)(a1 + 48);
  if (v8)
    (*(void (**)(uint64_t, _QWORD))(v8 + 16))(v8, *(_QWORD *)(a1 + 32));

}

void __49__HMDHome_CHIP___clearCHIPStorageWithCompletion___block_invoke(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  id v5;
  id v6;
  _QWORD v7[4];
  id v8;
  id v9;

  v3 = a2;
  objc_msgSend(*(id *)(a1 + 32), "workQueue");
  v4 = objc_claimAutoreleasedReturnValue();
  v7[0] = MEMORY[0x24BDAC760];
  v7[1] = 3221225472;
  v7[2] = __49__HMDHome_CHIP___clearCHIPStorageWithCompletion___block_invoke_2;
  v7[3] = &unk_24E79C2B8;
  v5 = *(id *)(a1 + 40);
  v8 = v3;
  v9 = v5;
  v6 = v3;
  dispatch_async(v4, v7);

}

uint64_t __49__HMDHome_CHIP___clearCHIPStorageWithCompletion___block_invoke_2(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32));
}

void __50__HMDHome_CHIP___handleResetMatterStorageRequest___block_invoke(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  NSObject *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  id v14;
  NSObject *v15;
  void *v16;
  void *v17;
  void *v18;
  _QWORD v19[5];
  id v20;
  id v21;
  uint8_t buf[4];
  void *v23;
  __int16 v24;
  id v25;
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  v3 = a2;
  if (v3)
  {
    v4 = (void *)MEMORY[0x227676638]();
    v5 = *(id *)(a1 + 32);
    HMFGetOSLogHandle();
    v6 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v23 = v7;
      v24 = 2112;
      v25 = v3;
      _os_log_impl(&dword_2218F0000, v6, OS_LOG_TYPE_ERROR, "%{public}@Failed to clear CHIP storage: %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v4);
    objc_msgSend(*(id *)(a1 + 40), "respondWithError:", v3);
  }
  else
  {
    objc_msgSend(*(id *)(a1 + 32), "homeManager");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = v8;
    if (v8)
    {
      objc_msgSend(v8, "accessoryBrowser");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v10, "chipAccessoryServerBrowser");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      v19[0] = MEMORY[0x24BDAC760];
      v19[1] = 3221225472;
      v19[2] = __50__HMDHome_CHIP___handleResetMatterStorageRequest___block_invoke_166;
      v19[3] = &unk_24E77BC50;
      v12 = *(void **)(a1 + 40);
      v19[4] = *(_QWORD *)(a1 + 32);
      v20 = v12;
      v21 = v9;
      objc_msgSend(v11, "createNewFabricIDWithCompletion:", v19);

    }
    else
    {
      v13 = (void *)MEMORY[0x227676638]();
      v14 = *(id *)(a1 + 32);
      HMFGetOSLogHandle();
      v15 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v16 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543362;
        v23 = v16;
        _os_log_impl(&dword_2218F0000, v15, OS_LOG_TYPE_ERROR, "%{public}@Cleared CHIP storage but no home manager to create new Matter storage with", buf, 0xCu);

      }
      objc_autoreleasePoolPop(v13);
      v17 = *(void **)(a1 + 40);
      objc_msgSend(MEMORY[0x24BDD1540], "hmfErrorWithCode:", 2);
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v17, "respondWithError:", v18);

    }
  }

}

void __50__HMDHome_CHIP___handleResetMatterStorageRequest___block_invoke_166(id *a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  NSObject *v6;
  void *v7;
  id v8;
  void *v9;
  int v10;
  id v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  _QWORD aBlock[5];
  id v20;
  id v21;
  uint8_t buf[4];
  void *v23;
  __int16 v24;
  id v25;
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  v3 = a2;
  v4 = (void *)MEMORY[0x227676638]();
  v5 = a1[4];
  HMFGetOSLogHandle();
  v6 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543618;
    v23 = v7;
    v24 = 2112;
    v25 = v3;
    _os_log_impl(&dword_2218F0000, v6, OS_LOG_TYPE_INFO, "%{public}@Creating new CHIP storage content with fabric ID %@", buf, 0x16u);

  }
  objc_autoreleasePoolPop(v4);
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 3221225472;
  aBlock[2] = __50__HMDHome_CHIP___handleResetMatterStorageRequest___block_invoke_167;
  aBlock[3] = &unk_24E799FD0;
  aBlock[4] = a1[4];
  v8 = v3;
  v20 = v8;
  v21 = a1[5];
  v9 = _Block_copy(aBlock);
  v10 = isFeatureMatteriPhoneOnlyPairingControlEnabled();
  v11 = a1[4];
  if (v10)
  {
    objc_msgSend(v11, "fabric");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "invalidateCachedData");

    objc_msgSend(a1[4], "fabric");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "setFabricID:", v8);

    objc_msgSend(a1[4], "chipStorage");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v14, "setFabricID:", v8);

    objc_msgSend(a1[6], "accessoryBrowser");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v15, "chipAccessoryServerBrowser");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(a1[4], "fabric");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v16, "createNewFabricDataForFabric:completion:", v17, v9);

  }
  else
  {
    objc_msgSend(v11, "chipStorage");
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v18, "setFabricID:", v8);

    objc_msgSend(a1[6], "accessoryBrowser");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v15, "chipAccessoryServerBrowser");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v16, "createNewFabricDataForFabricID:completion:", v8, v9);
  }

}

void __50__HMDHome_CHIP___handleResetMatterStorageRequest___block_invoke_167(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  NSObject *v6;
  NSObject *v7;
  void *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  int v12;
  void *v13;
  __int16 v14;
  uint64_t v15;
  __int16 v16;
  id v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  v3 = a2;
  v4 = (void *)MEMORY[0x227676638]();
  v5 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v6 = objc_claimAutoreleasedReturnValue();
  v7 = v6;
  if (v3)
  {
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      v9 = *(_QWORD *)(a1 + 40);
      v12 = 138543874;
      v13 = v8;
      v14 = 2112;
      v15 = v9;
      v16 = 2112;
      v17 = v3;
      _os_log_impl(&dword_2218F0000, v7, OS_LOG_TYPE_ERROR, "%{public}@Failed to create new fabric data for fabric ID %@: %@", (uint8_t *)&v12, 0x20u);

    }
    objc_autoreleasePoolPop(v4);
    objc_msgSend(*(id *)(a1 + 48), "respondWithError:", v3);
  }
  else
  {
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      v11 = *(_QWORD *)(a1 + 40);
      v12 = 138543618;
      v13 = v10;
      v14 = 2112;
      v15 = v11;
      _os_log_impl(&dword_2218F0000, v7, OS_LOG_TYPE_INFO, "%{public}@Successfully created new fabric data for fabric ID %@", (uint8_t *)&v12, 0x16u);

    }
    objc_autoreleasePoolPop(v4);
    objc_msgSend(*(id *)(a1 + 48), "respondWithSuccess");
  }

}

void __133__HMDHome_CHIP__handleCommissioningCertificateRequestWithCommissionerNodeID_commissioneeNodeID_fabricID_publicKey_sender_completion___block_invoke(uint64_t a1, void *a2, uint64_t a3)
{
  void *v5;
  void *v6;
  id v7;

  v7 = a2;
  if (a3)
  {
    (*(void (**)(void))(*(_QWORD *)(a1 + 64) + 16))();
  }
  else
  {
    objc_msgSend(*(id *)(a1 + 32), "accessoryBrowserInternal");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "chipAccessoryServerBrowser");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "fetchCertificatesForMatterNodeWithCommissionerNodeID:commissioneeNodeID:forOwner:publicKey:fabricID:completionHandler:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(unsigned __int8 *)(a1 + 72), *(_QWORD *)(a1 + 56), v7, *(_QWORD *)(a1 + 64));

  }
}

void __133__HMDHome_CHIP__handleCommissioningCertificateRequestWithCommissionerNodeID_commissioneeNodeID_fabricID_publicKey_sender_completion___block_invoke_2(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  _QWORD v8[5];
  id v9;
  id v10;
  id v11;

  v3 = a2;
  v4 = *(void **)(a1 + 32);
  if (v4 && !objc_msgSend(v4, "isEqual:", &unk_24E96A418))
  {
    (*(void (**)(void))(*(_QWORD *)(a1 + 56) + 16))();
  }
  else
  {
    objc_msgSend(*(id *)(a1 + 40), "accessoryBrowser");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "chipAccessoryServerBrowser");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v8[0] = MEMORY[0x24BDAC760];
    v8[1] = 3221225472;
    v8[2] = __133__HMDHome_CHIP__handleCommissioningCertificateRequestWithCommissionerNodeID_commissioneeNodeID_fabricID_publicKey_sender_completion___block_invoke_3;
    v8[3] = &unk_24E7751D0;
    v7 = *(void **)(a1 + 56);
    v8[4] = *(_QWORD *)(a1 + 48);
    v11 = v7;
    v9 = v3;
    v10 = *(id *)(a1 + 40);
    objc_msgSend(v6, "createNewFabricIDWithCompletion:", v8);

  }
}

void __133__HMDHome_CHIP__handleCommissioningCertificateRequestWithCommissionerNodeID_commissioneeNodeID_fabricID_publicKey_sender_completion___block_invoke_3(id *a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  NSObject *v6;
  void *v7;
  void *v8;
  void *v9;
  id v10;
  id v11;
  void *v12;
  int v13;
  id v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  _QWORD aBlock[5];
  id v22;
  id v23;
  id v24;
  id v25;
  uint8_t buf[4];
  void *v27;
  __int16 v28;
  id v29;
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  v3 = a2;
  v4 = (void *)MEMORY[0x227676638]();
  v5 = a1[4];
  HMFGetOSLogHandle();
  v6 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543618;
    v27 = v7;
    v28 = 2112;
    v29 = v3;
    _os_log_impl(&dword_2218F0000, v6, OS_LOG_TYPE_INFO, "%{public}@Attempting to initialize fabric data with fabric ID: %@", buf, 0x16u);

  }
  objc_autoreleasePoolPop(v4);
  objc_msgSend(a1[4], "fabric");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "fabricID");
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 3221225472;
  aBlock[2] = __133__HMDHome_CHIP__handleCommissioningCertificateRequestWithCommissionerNodeID_commissioneeNodeID_fabricID_publicKey_sender_completion___block_invoke_164;
  aBlock[3] = &unk_24E7969B8;
  aBlock[4] = a1[4];
  v10 = v9;
  v22 = v10;
  v25 = a1[7];
  v11 = v3;
  v23 = v11;
  v24 = a1[5];
  v12 = _Block_copy(aBlock);
  v13 = isFeatureMatteriPhoneOnlyPairingControlEnabled();
  v14 = a1[4];
  if (v13)
  {
    objc_msgSend(v14, "fabric");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v15, "setFabricID:", v11);

    objc_msgSend(a1[4], "chipStorage");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v16, "setFabricID:", v11);

    objc_msgSend(a1[6], "accessoryBrowser");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v17, "chipAccessoryServerBrowser");
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(a1[4], "fabric");
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v18, "createNewFabricDataForFabric:completion:", v19, v12);

  }
  else
  {
    objc_msgSend(v14, "chipStorage");
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v20, "setFabricID:", v11);

    objc_msgSend(a1[6], "accessoryBrowser");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v17, "chipAccessoryServerBrowser");
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v18, "createNewFabricDataForFabricID:completion:", v11, v12);
  }

}

void __133__HMDHome_CHIP__handleCommissioningCertificateRequestWithCommissionerNodeID_commissioneeNodeID_fabricID_publicKey_sender_completion___block_invoke_164(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  NSObject *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  void *v11;
  void (*v12)(void);
  void *v13;
  char v14;
  void *v15;
  id v16;
  NSObject *v17;
  _BOOL4 v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  uint64_t v23;
  void *v24;
  int v25;
  void *v26;
  __int16 v27;
  id v28;
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  v3 = a2;
  if (v3)
  {
    v4 = (void *)MEMORY[0x227676638]();
    v5 = *(id *)(a1 + 32);
    HMFGetOSLogHandle();
    v6 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      v25 = 138543618;
      v26 = v7;
      v27 = 2112;
      v28 = v3;
      _os_log_impl(&dword_2218F0000, v6, OS_LOG_TYPE_ERROR, "%{public}@Couldn't create CHIP storage: %@", (uint8_t *)&v25, 0x16u);

    }
    objc_autoreleasePoolPop(v4);
    v8 = *(_QWORD *)(a1 + 40);
    objc_msgSend(*(id *)(a1 + 32), "fabric");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "setFabricID:", v8);

    v10 = *(_QWORD *)(a1 + 40);
    objc_msgSend(*(id *)(a1 + 32), "chipStorage");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "setFabricID:", v10);

    v12 = *(void (**)(void))(*(_QWORD *)(a1 + 64) + 16);
LABEL_9:
    v12();
    goto LABEL_10;
  }
  objc_msgSend(*(id *)(a1 + 32), "matterFabricID");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  v14 = objc_msgSend(v13, "isEqual:", *(_QWORD *)(a1 + 48));

  v15 = (void *)MEMORY[0x227676638]();
  v16 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v17 = objc_claimAutoreleasedReturnValue();
  v18 = os_log_type_enabled(v17, OS_LOG_TYPE_INFO);
  if ((v14 & 1) != 0)
  {
    if (v18)
    {
      HMFGetLogIdentifier();
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      v20 = *(void **)(a1 + 48);
      v25 = 138543618;
      v26 = v19;
      v27 = 2112;
      v28 = v20;
      _os_log_impl(&dword_2218F0000, v17, OS_LOG_TYPE_INFO, "%{public}@Initialized CHIP storage with fabric ID: %@", (uint8_t *)&v25, 0x16u);

    }
    objc_autoreleasePoolPop(v15);
    v12 = *(void (**)(void))(*(_QWORD *)(a1 + 64) + 16);
    goto LABEL_9;
  }
  if (v18)
  {
    HMFGetLogIdentifier();
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    v22 = *(void **)(a1 + 48);
    v25 = 138543618;
    v26 = v21;
    v27 = 2112;
    v28 = v22;
    _os_log_impl(&dword_2218F0000, v17, OS_LOG_TYPE_INFO, "%{public}@CHIP storage wasn't initialized with fabric ID %@ due to asynchronous model update", (uint8_t *)&v25, 0x16u);

  }
  objc_autoreleasePoolPop(v15);
  v23 = *(_QWORD *)(a1 + 64);
  objc_msgSend(MEMORY[0x24BDD1540], "hmfErrorWithCode:", 12);
  v24 = (void *)objc_claimAutoreleasedReturnValue();
  (*(void (**)(uint64_t, _QWORD, void *))(v23 + 16))(v23, 0, v24);

LABEL_10:
}

void __55__HMDHome_CHIP__handleCommissioningCertificateRequest___block_invoke(uint64_t a1, void *a2, void *a3, void *a4, void *a5, uint64_t a6)
{
  id v11;
  id v12;
  id v13;
  void *v14;
  id v15;

  v15 = a2;
  v11 = a3;
  v12 = a4;
  v13 = a5;
  if (a6)
  {
    objc_msgSend(*(id *)(a1 + 32), "respondWithError:", a6);
  }
  else
  {
    objc_msgSend(MEMORY[0x24BDBCED8], "dictionary");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v14, "setObject:forKeyedSubscript:", v15, CFSTR("HMDHomeCommissioningRootCertMessageKey"));
    objc_msgSend(v14, "setObject:forKeyedSubscript:", v11, CFSTR("HMDHomeCommissioningOperationalCertMessageKey"));
    objc_msgSend(v14, "setObject:forKeyedSubscript:", v12, CFSTR("HMDHomeCommissioningOwnerNodeIDMessageKey"));
    objc_msgSend(v14, "setObject:forKeyedSubscript:", v13, CFSTR("HMDHomeCommissioningIPKMessageKey"));
    objc_msgSend(*(id *)(a1 + 32), "respondWithPayload:", v14);

  }
}

void __49__HMDHome_CHIP___dispatchCHIPReport_destination___block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id WeakRetained;
  void *v8;
  id v9;
  NSObject *v10;
  _BOOL4 v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  int v16;
  void *v17;
  __int16 v18;
  void *v19;
  __int16 v20;
  id v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  v5 = a2;
  v6 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  if (WeakRetained)
  {
    v8 = (void *)MEMORY[0x227676638]();
    v9 = WeakRetained;
    HMFGetOSLogHandle();
    v10 = objc_claimAutoreleasedReturnValue();
    v11 = os_log_type_enabled(v10, OS_LOG_TYPE_INFO);
    if (v5)
    {
      if (v11)
      {
        HMFGetLogIdentifier();
        v12 = (void *)objc_claimAutoreleasedReturnValue();
        v13 = *(void **)(a1 + 40);
        v16 = 138543874;
        v17 = v12;
        v18 = 2112;
        v19 = v13;
        v20 = 2112;
        v21 = v5;
        _os_log_impl(&dword_2218F0000, v10, OS_LOG_TYPE_INFO, "%{public}@Failed to send CHIP report to user %@ due to error %@", (uint8_t *)&v16, 0x20u);
LABEL_7:

      }
    }
    else if (v11)
    {
      HMFGetLogIdentifier();
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(*(id *)(a1 + 32), "messagePayload");
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      v15 = *(void **)(a1 + 40);
      v16 = 138543874;
      v17 = v12;
      v18 = 2112;
      v19 = v14;
      v20 = 2112;
      v21 = v15;
      _os_log_impl(&dword_2218F0000, v10, OS_LOG_TYPE_INFO, "%{public}@Sent CHIP report: %@ to user %@", (uint8_t *)&v16, 0x20u);

      goto LABEL_7;
    }

    objc_autoreleasePoolPop(v8);
  }

}

void __74__HMDHome_CHIP___handleResetAndRemoveAllCHIPPairingsFromAccessoryMessage___block_invoke(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  NSObject *v6;
  void *v7;
  int v8;
  void *v9;
  __int16 v10;
  id v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v3 = a2;
  if (v3)
  {
    v4 = (void *)MEMORY[0x227676638]();
    v5 = *(id *)(a1 + 32);
    HMFGetOSLogHandle();
    v6 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      v8 = 138543618;
      v9 = v7;
      v10 = 2112;
      v11 = v3;
      _os_log_impl(&dword_2218F0000, v6, OS_LOG_TYPE_INFO, "%{public}@Ignoring remove all CHIP pairings error: %@", (uint8_t *)&v8, 0x16u);

    }
    objc_autoreleasePoolPop(v4);
  }
  objc_msgSend(*(id *)(a1 + 32), "handleRemoveAccessoryMessage:", *(_QWORD *)(a1 + 40));

}

void __66__HMDHome_CHIP___sendRemoteMessageUsingNodeId_payload_completion___block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  id v11;
  NSObject *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  id v17;
  NSObject *v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD v22[5];
  id v23;
  uint64_t v24;
  uint8_t buf[4];
  void *v26;
  __int16 v27;
  uint64_t v28;
  __int16 v29;
  id v30;
  uint64_t v31;

  v31 = *MEMORY[0x24BDAC8D0];
  v5 = a2;
  v6 = a3;
  if (v5)
  {
    if (objc_msgSend(*(id *)(a1 + 32), "_shouldFallbackLocallyForRemoteMatterRequest:", v5))
    {
      objc_msgSend(MEMORY[0x24BE3F1D0], "messageWithName:destination:payload:", CFSTR("HMDHomeCHIPSendRemoteRequestMessage"), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      v22[0] = MEMORY[0x24BDAC760];
      v22[2] = __66__HMDHome_CHIP___sendRemoteMessageUsingNodeId_payload_completion___block_invoke_158;
      v22[3] = &unk_24E775158;
      v9 = *(void **)(a1 + 56);
      v8 = *(_QWORD *)(a1 + 64);
      v22[4] = *(_QWORD *)(a1 + 32);
      v24 = v8;
      v22[1] = 3221225472;
      v23 = v9;
      objc_msgSend(v7, "setResponseHandler:", v22);
      objc_msgSend(*(id *)(a1 + 32), "_handleCHIPSendRemoteRequestMessage:", v7);

    }
    else
    {
      v16 = (void *)MEMORY[0x227676638]();
      v17 = *(id *)(a1 + 32);
      HMFGetOSLogHandle();
      v18 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v19 = (void *)objc_claimAutoreleasedReturnValue();
        v20 = *(_QWORD *)(a1 + 64);
        *(_DWORD *)buf = 138543874;
        v26 = v19;
        v27 = 2048;
        v28 = v20;
        v29 = 2112;
        v30 = v5;
        _os_log_impl(&dword_2218F0000, v18, OS_LOG_TYPE_ERROR, "%{public}@Failed to execute CHIP remote operation for nodeID=%llu: error=%@", buf, 0x20u);

      }
      objc_autoreleasePoolPop(v16);
      v21 = *(_QWORD *)(a1 + 56);
      objc_msgSend(v6, "objectForKeyedSubscript:", CFSTR("HMDHomeCHIPResponseMessageKey"));
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      (*(void (**)(uint64_t, void *, id))(v21 + 16))(v21, v7, v5);
    }
  }
  else
  {
    v10 = (void *)MEMORY[0x227676638]();
    v11 = *(id *)(a1 + 32);
    HMFGetOSLogHandle();
    v12 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      v14 = *(_QWORD *)(a1 + 64);
      *(_DWORD *)buf = 138543618;
      v26 = v13;
      v27 = 2048;
      v28 = v14;
      _os_log_impl(&dword_2218F0000, v12, OS_LOG_TYPE_INFO, "%{public}@Successfully executed CHIP remote operation for nodeID=%llu", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v10);
    v15 = *(_QWORD *)(a1 + 56);
    objc_msgSend(v6, "objectForKeyedSubscript:", CFSTR("HMDHomeCHIPResponseMessageKey"));
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    (*(void (**)(uint64_t, void *, _QWORD))(v15 + 16))(v15, v7, 0);
  }

}

void __66__HMDHome_CHIP___sendRemoteMessageUsingNodeId_payload_completion___block_invoke_158(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  id v8;
  NSObject *v9;
  NSObject *v10;
  void *v11;
  uint64_t v12;
  const char *v13;
  NSObject *v14;
  os_log_type_t v15;
  uint32_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  int v20;
  void *v21;
  __int16 v22;
  uint64_t v23;
  __int16 v24;
  id v25;
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  v5 = a2;
  v6 = a3;
  v7 = (void *)MEMORY[0x227676638]();
  v8 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v9 = objc_claimAutoreleasedReturnValue();
  v10 = v9;
  if (v5)
  {
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      v12 = *(_QWORD *)(a1 + 48);
      v20 = 138543874;
      v21 = v11;
      v22 = 2048;
      v23 = v12;
      v24 = 2112;
      v25 = v5;
      v13 = "%{public}@Failed to execute CHIP local fallback operation for nodeID=%llu: error=%@";
      v14 = v10;
      v15 = OS_LOG_TYPE_ERROR;
      v16 = 32;
LABEL_6:
      _os_log_impl(&dword_2218F0000, v14, v15, v13, (uint8_t *)&v20, v16);

    }
  }
  else if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v17 = *(_QWORD *)(a1 + 48);
    v20 = 138543618;
    v21 = v11;
    v22 = 2048;
    v23 = v17;
    v13 = "%{public}@Successfully executed CHIP local fallback operation for nodeID=%llu";
    v14 = v10;
    v15 = OS_LOG_TYPE_INFO;
    v16 = 22;
    goto LABEL_6;
  }

  objc_autoreleasePoolPop(v7);
  v18 = *(_QWORD *)(a1 + 40);
  objc_msgSend(v6, "objectForKeyedSubscript:", CFSTR("HMDHomeCHIPResponseMessageKey"));
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  (*(void (**)(uint64_t, void *, id))(v18 + 16))(v18, v19, v5);

}

void __49__HMDHome_CHIP__handleResetMatterStorageRequest___block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;
  uint64_t v4;
  void *v5;
  id v6;
  NSObject *v7;
  void *v8;
  void *v9;
  void *v10;
  _QWORD v11[5];
  uint8_t buf[4];
  void *v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  objc_msgSend(*(id *)(a1 + 32), "primaryResidentMessageRouter");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = v2;
  if (v2)
  {
    v11[0] = MEMORY[0x24BDAC760];
    v11[1] = 3221225472;
    v11[2] = __49__HMDHome_CHIP__handleResetMatterStorageRequest___block_invoke_157;
    v11[3] = &unk_24E79BF48;
    v4 = *(_QWORD *)(a1 + 40);
    v11[4] = *(_QWORD *)(a1 + 32);
    objc_msgSend(v2, "routeMessage:localHandler:", v4, v11);
  }
  else
  {
    v5 = (void *)MEMORY[0x227676638]();
    v6 = *(id *)(a1 + 32);
    HMFGetOSLogHandle();
    v7 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v13 = v8;
      _os_log_impl(&dword_2218F0000, v7, OS_LOG_TYPE_ERROR, "%{public}@Could not find primary resident message router to handle request to reset Matter storage", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v5);
    v9 = *(void **)(a1 + 40);
    objc_msgSend(MEMORY[0x24BDD1540], "hmErrorWithCode:", 2);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "respondWithError:", v10);

  }
}

uint64_t __49__HMDHome_CHIP__handleResetMatterStorageRequest___block_invoke_157(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(a1 + 32), "_handleResetMatterStorageRequest:", a2);
}

void __45__HMDHome_CHIP__handleCHIPSendReportMessage___block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t i;
  uint64_t v10;
  void *v11;
  id v12;
  NSObject *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  int v18;
  void *v19;
  uint64_t v20;
  void *v21;
  void *v22;
  id v23;
  NSObject *v24;
  void *v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t j;
  uint64_t v31;
  void *v32;
  id v33;
  NSObject *v34;
  void *v35;
  void *v36;
  void (**v37)(_QWORD, _QWORD, _QWORD);
  uint64_t v38;
  void *v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  _QWORD v44[5];
  id v45;
  _QWORD v46[5];
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  uint8_t v51[128];
  uint8_t buf[4];
  void *v53;
  __int16 v54;
  uint64_t v55;
  __int16 v56;
  void *v57;
  _BYTE v58[128];
  uint64_t v59;

  v59 = *MEMORY[0x24BDAC8D0];
  if (objc_msgSend(*(id *)(a1 + 32), "isCurrentDevicePrimaryResident"))
  {
    objc_msgSend(*(id *)(a1 + 32), "notificationRegistry");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "chipRemoteSubscribers");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    v4 = (void *)objc_msgSend(v3, "copy");

    v49 = 0u;
    v50 = 0u;
    v47 = 0u;
    v48 = 0u;
    v5 = v4;
    v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v47, v58, 16);
    if (v6)
    {
      v7 = v6;
      v8 = *(_QWORD *)v48;
      do
      {
        for (i = 0; i != v7; ++i)
        {
          if (*(_QWORD *)v48 != v8)
            objc_enumerationMutation(v5);
          v10 = *(_QWORD *)(*((_QWORD *)&v47 + 1) + 8 * i);
          v11 = (void *)MEMORY[0x227676638]();
          v12 = *(id *)(a1 + 32);
          HMFGetOSLogHandle();
          v13 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
          {
            HMFGetLogIdentifier();
            v14 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 138543618;
            v53 = v14;
            v54 = 2112;
            v55 = v10;
            _os_log_impl(&dword_2218F0000, v13, OS_LOG_TYPE_INFO, "%{public}@Dispatch CHIP report to %@", buf, 0x16u);

          }
          objc_autoreleasePoolPop(v11);
          objc_msgSend(*(id *)(a1 + 32), "_dispatchCHIPReport:destination:", *(_QWORD *)(a1 + 40), v10);
        }
        v7 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v47, v58, 16);
      }
      while (v7);
    }

  }
  objc_msgSend(*(id *)(a1 + 40), "numberForKey:", CFSTR("HMDHomeCHIPNodeIDMessageKey"));
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  v38 = objc_msgSend(v15, "unsignedIntegerValue");

  objc_msgSend(*(id *)(a1 + 40), "arrayForKey:", CFSTR("HMDHomeCHIPReportMessageKey"));
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v16, "na_filter:", &__block_literal_global_154);
  v39 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(*(id *)(a1 + 32), "featureDataSource");
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  v18 = objc_msgSend(v17, "isNativeMatterEnabled");

  if (v18 && (objc_msgSend(*(id *)(a1 + 32), "isCurrentDevicePrimaryResident") & 1) == 0)
  {
    objc_msgSend(*(id *)(a1 + 32), "hapAccessories");
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    v20 = MEMORY[0x24BDAC760];
    v46[0] = MEMORY[0x24BDAC760];
    v46[1] = 3221225472;
    v46[2] = __45__HMDHome_CHIP__handleCHIPSendReportMessage___block_invoke_2;
    v46[3] = &__block_descriptor_40_e25_B16__0__HMDHAPAccessory_8l;
    v46[4] = v38;
    objc_msgSend(v19, "na_firstObjectPassingTest:", v46);
    v21 = (void *)objc_claimAutoreleasedReturnValue();

    if (v21)
    {
      v44[0] = v20;
      v44[1] = 3221225472;
      v44[2] = __45__HMDHome_CHIP__handleCHIPSendReportMessage___block_invoke_3;
      v44[3] = &unk_24E792260;
      v44[4] = *(_QWORD *)(a1 + 32);
      v45 = v21;
      objc_msgSend(v39, "na_each:", v44);

    }
    else
    {
      v22 = (void *)MEMORY[0x227676638]();
      v23 = *(id *)(a1 + 32);
      HMFGetOSLogHandle();
      v24 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v25 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543874;
        v53 = v25;
        v54 = 2048;
        v55 = v38;
        v56 = 2112;
        v57 = v39;
        _os_log_impl(&dword_2218F0000, v24, OS_LOG_TYPE_ERROR, "%{public}@Failed to find matching accessory for attribute update notification. nodeID=%lu report=%@", buf, 0x20u);

      }
      objc_autoreleasePoolPop(v22);
    }

  }
  v42 = 0u;
  v43 = 0u;
  v40 = 0u;
  v41 = 0u;
  objc_msgSend(*(id *)(a1 + 32), "chipLocalSubscribers");
  v26 = (void *)objc_claimAutoreleasedReturnValue();
  v27 = objc_msgSend(v26, "countByEnumeratingWithState:objects:count:", &v40, v51, 16);
  if (v27)
  {
    v28 = v27;
    v29 = *(_QWORD *)v41;
    do
    {
      for (j = 0; j != v28; ++j)
      {
        if (*(_QWORD *)v41 != v29)
          objc_enumerationMutation(v26);
        v31 = *(_QWORD *)(*((_QWORD *)&v40 + 1) + 8 * j);
        v32 = (void *)MEMORY[0x227676638]();
        v33 = *(id *)(a1 + 32);
        HMFGetOSLogHandle();
        v34 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v34, OS_LOG_TYPE_DEBUG))
        {
          HMFGetLogIdentifier();
          v35 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543618;
          v53 = v35;
          v54 = 2112;
          v55 = v31;
          _os_log_impl(&dword_2218F0000, v34, OS_LOG_TYPE_DEBUG, "%{public}@Calling CHIP report handler for subscriber %@", buf, 0x16u);

        }
        objc_autoreleasePoolPop(v32);
        objc_msgSend(*(id *)(a1 + 32), "chipLocalSubscribers");
        v36 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v36, "objectForKeyedSubscript:", v31);
        v37 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
        ((void (**)(_QWORD, uint64_t, void *))v37)[2](v37, v38, v39);

      }
      v28 = objc_msgSend(v26, "countByEnumeratingWithState:objects:count:", &v40, v51, 16);
    }
    while (v28);
  }

  objc_msgSend(*(id *)(a1 + 40), "respondWithSuccess");
}

BOOL __45__HMDHome_CHIP__handleCHIPSendReportMessage___block_invoke_2(uint64_t a1, void *a2)
{
  void *v3;
  _BOOL8 v4;

  objc_msgSend(a2, "matterNodeID");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "unsignedIntegerValue") == *(_QWORD *)(a1 + 32);

  return v4;
}

void __45__HMDHome_CHIP__handleCHIPSendReportMessage___block_invoke_3(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;
  void *v10;
  void *v11;
  id v12;
  void *v13;
  void *v14;
  id v15;
  BOOL v16;
  void *v18;
  id v19;
  NSObject *v20;
  void *v21;
  void *v22;
  id v23;
  NSObject *v24;
  void *v25;
  void *v26;
  uint64_t v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  int v33;
  void *v34;
  __int16 v35;
  id v36;
  uint64_t v37;

  v37 = *MEMORY[0x24BDAC8D0];
  v3 = a2;
  objc_msgSend(MEMORY[0x24BDBCED8], "dictionary");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "hmf_arrayForKey:", *MEMORY[0x24BDDB460]);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = v5;
  if (v5 && objc_msgSend(v5, "count") == 3)
  {
    objc_msgSend(v6, "objectAtIndexedSubscript:", 0);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
      v8 = v7;
    else
      v8 = 0;
    v9 = v8;

    objc_msgSend(v6, "objectAtIndexedSubscript:", 1);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
      v11 = v10;
    else
      v11 = 0;
    v12 = v11;

    objc_msgSend(v6, "objectAtIndexedSubscript:", 2);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
      v14 = v13;
    else
      v14 = 0;
    v15 = v14;

    if (v9)
      v16 = v12 == 0;
    else
      v16 = 1;
    if (v16 || v15 == 0)
    {
      v18 = (void *)MEMORY[0x227676638]();
      v19 = *(id *)(a1 + 32);
      HMFGetOSLogHandle();
      v20 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v21 = (void *)objc_claimAutoreleasedReturnValue();
        v33 = 138543618;
        v34 = v21;
        v35 = 2112;
        v36 = v3;
        _os_log_impl(&dword_2218F0000, v20, OS_LOG_TYPE_ERROR, "%{public}@Failed to process attribute update: missing endpointID, clusterID, or attributeID. report=%@", (uint8_t *)&v33, 0x16u);

      }
      objc_autoreleasePoolPop(v18);
    }
    else
    {
      objc_msgSend(v4, "setObject:forKeyedSubscript:", v9, CFSTR("HMDMatterAttributeChangedNotificationEndpointIDKey"));
      objc_msgSend(v4, "setObject:forKeyedSubscript:", v12, CFSTR("HMDMatterAttributeChangedNotificationClusterIDKey"));
      objc_msgSend(v4, "setObject:forKeyedSubscript:", v15, CFSTR("HMDMatterAttributeChangedNotificationAttributeIDKey"));
      objc_msgSend(v3, "hmf_dictionaryForKey:", *MEMORY[0x24BDDB478]);
      v26 = (void *)objc_claimAutoreleasedReturnValue();
      v27 = *MEMORY[0x24BDDB518];
      objc_msgSend(v26, "valueForKey:", *MEMORY[0x24BDDB518]);
      v28 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "setObject:forKeyedSubscript:", v28, CFSTR("HMDMatterAttributeChangedNotificationValueKey"));

      objc_msgSend(v3, "hmf_dictionaryForKey:", *MEMORY[0x24BDDB4E0]);
      v29 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v29, "valueForKey:", v27);
      v30 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "setObject:forKeyedSubscript:", v30, CFSTR("HMDMatterAttributeChangedNotificationPreviousValueKey"));

      v31 = *(void **)(a1 + 40);
      v32 = (void *)objc_msgSend(v4, "copy");
      logAndPostNotification(CFSTR("HMDMatterAttributeChangedNotification"), v31, v32);

    }
  }
  else
  {
    v22 = (void *)MEMORY[0x227676638]();
    v23 = *(id *)(a1 + 32);
    HMFGetOSLogHandle();
    v24 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v25 = (void *)objc_claimAutoreleasedReturnValue();
      v33 = 138543618;
      v34 = v25;
      v35 = 2112;
      v36 = v3;
      _os_log_impl(&dword_2218F0000, v24, OS_LOG_TYPE_ERROR, "%{public}@Failed to process attribute update: AttributePath array is invalid. report=%@", (uint8_t *)&v33, 0x16u);

    }
    objc_autoreleasePoolPop(v22);
  }

}

uint64_t __45__HMDHome_CHIP__handleCHIPSendReportMessage___block_invoke_152(uint64_t a1, void *a2)
{
  id v2;
  uint64_t v3;

  v2 = a2;
  objc_opt_class();
  v3 = objc_opt_isKindOfClass() & (v2 != 0);

  return v3;
}

void __52__HMDHome_CHIP__handleCHIPSendRemoteRequestMessage___block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;
  uint64_t v4;
  void *v5;
  id v6;
  NSObject *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  id v12;
  NSObject *v13;
  void *v14;
  _QWORD v15[5];
  uint8_t buf[4];
  void *v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  if (isFeatureMatteriPhoneOnlyPairingControlEnabled()
    && (objc_msgSend(*(id *)(a1 + 32), "isPrimaryResidentNodeReachable") & 1) == 0)
  {
    v11 = (void *)MEMORY[0x227676638]();
    v12 = *(id *)(a1 + 32);
    HMFGetOSLogHandle();
    v13 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v17 = v14;
      _os_log_impl(&dword_2218F0000, v13, OS_LOG_TYPE_INFO, "%{public}@Primary resident unreachable, handling CHIP remote request locally", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v11);
    objc_msgSend(*(id *)(a1 + 32), "_handleCHIPSendRemoteRequestMessage:", *(_QWORD *)(a1 + 40));
  }
  else
  {
    objc_msgSend(*(id *)(a1 + 32), "primaryResidentMessageRouter");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    v3 = v2;
    if (v2)
    {
      v15[0] = MEMORY[0x24BDAC760];
      v15[1] = 3221225472;
      v15[2] = __52__HMDHome_CHIP__handleCHIPSendRemoteRequestMessage___block_invoke_150;
      v15[3] = &unk_24E79BF48;
      v4 = *(_QWORD *)(a1 + 40);
      v15[4] = *(_QWORD *)(a1 + 32);
      objc_msgSend(v2, "routeMessage:localHandler:", v4, v15);
    }
    else
    {
      v5 = (void *)MEMORY[0x227676638]();
      v6 = *(id *)(a1 + 32);
      HMFGetOSLogHandle();
      v7 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543362;
        v17 = v8;
        _os_log_impl(&dword_2218F0000, v7, OS_LOG_TYPE_ERROR, "%{public}@Could not find primary resident message router to handle CHIP remote request", buf, 0xCu);

      }
      objc_autoreleasePoolPop(v5);
      v9 = *(void **)(a1 + 40);
      objc_msgSend(MEMORY[0x24BDD1540], "hmErrorWithCode:", 2);
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v9, "respondWithError:", v10);

    }
  }
}

uint64_t __52__HMDHome_CHIP__handleCHIPSendRemoteRequestMessage___block_invoke_150(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(a1 + 32), "_handleCHIPSendRemoteRequestMessage:", a2);
}

uint64_t __60__HMDHome_CHIP__handleRemoteUpdateCHIPKeyValueStoreMessage___block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t i;
  void *v12;
  void *v13;
  void *v14;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  _BYTE v20[128];
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  v5 = a2;
  v6 = a3;
  v16 = 0u;
  v17 = 0u;
  v18 = 0u;
  v19 = 0u;
  v7 = *(id *)(a1 + 32);
  v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v16, v20, 16);
  if (v8)
  {
    v9 = v8;
    v10 = *(_QWORD *)v17;
    do
    {
      for (i = 0; i != v9; ++i)
      {
        if (*(_QWORD *)v17 != v10)
          objc_enumerationMutation(v7);
        v12 = *(void **)(*((_QWORD *)&v16 + 1) + 8 * i);
        if ((objc_msgSend(v12, "isEqual:", CFSTR("HMD.MTRPlugin.PairedNodeIDs"), (_QWORD)v16) & 1) == 0)
        {
          objc_msgSend(v5, "objectForKeyedSubscript:", v12);
          v13 = (void *)objc_claimAutoreleasedReturnValue();

          if (v13)
            continue;
        }
        objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", v12);
        v14 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v5, "setObject:forKeyedSubscript:", v14, v12);

      }
      v9 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v16, v20, 16);
    }
    while (v9);
  }

  if (*(_QWORD *)(a1 + 40))
  {
    objc_msgSend(v5, "removeObjectsForKeys:");
    objc_msgSend(v6, "addObjectsFromArray:", *(_QWORD *)(a1 + 40));
  }

  return 1;
}

uint64_t __60__HMDHome_CHIP__handleRemoteUpdateCHIPKeyValueStoreMessage___block_invoke_2(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(a1 + 32), "respondWithPayload:error:", 0, a2);
}

void __60__HMDHome_CHIP__setCHIPReportHandlerWithSubscriber_handler___block_invoke(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  id v4;
  NSObject *v5;
  _BOOL4 v6;
  void *v7;
  uint64_t v8;
  void *v9;
  id v10;
  void *v11;
  void *v12;
  void *v13;
  uint64_t v14;
  int v15;
  void *v16;
  __int16 v17;
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(a1 + 48);
  v3 = (void *)MEMORY[0x227676638]();
  v4 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v5 = objc_claimAutoreleasedReturnValue();
  v6 = os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG);
  if (v2)
  {
    if (v6)
    {
      HMFGetLogIdentifier();
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      v8 = *(_QWORD *)(a1 + 40);
      v15 = 138543618;
      v16 = v7;
      v17 = 2112;
      v18 = v8;
      _os_log_impl(&dword_2218F0000, v5, OS_LOG_TYPE_DEBUG, "%{public}@Register CHIP report handler for subscriber %@", (uint8_t *)&v15, 0x16u);

    }
    objc_autoreleasePoolPop(v3);
    objc_msgSend(*(id *)(a1 + 32), "chipLocalSubscribers");
    v9 = (void *)objc_claimAutoreleasedReturnValue();

    if (!v9)
    {
      v10 = objc_alloc_init(MEMORY[0x24BDBCED8]);
      objc_msgSend(*(id *)(a1 + 32), "setChipLocalSubscribers:", v10);

    }
    v11 = _Block_copy(*(const void **)(a1 + 48));
    objc_msgSend(*(id *)(a1 + 32), "chipLocalSubscribers");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "setObject:forKeyedSubscript:", v11, *(_QWORD *)(a1 + 40));

  }
  else
  {
    if (v6)
    {
      HMFGetLogIdentifier();
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      v14 = *(_QWORD *)(a1 + 40);
      v15 = 138543618;
      v16 = v13;
      v17 = 2112;
      v18 = v14;
      _os_log_impl(&dword_2218F0000, v5, OS_LOG_TYPE_DEBUG, "%{public}@Deregister CHIP report handler for subscriber %@", (uint8_t *)&v15, 0x16u);

    }
    objc_autoreleasePoolPop(v3);
    objc_msgSend(*(id *)(a1 + 32), "chipLocalSubscribers");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "setObject:forKeyedSubscript:", 0, *(_QWORD *)(a1 + 40));
  }

}

void __58__HMDHome_CHIP___saveAndSyncMatterFabricIDWithCompletion___block_invoke(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  NSObject *v6;
  NSObject *v7;
  void *v8;
  void *v9;
  void *v10;
  const char *v11;
  NSObject *v12;
  os_log_type_t v13;
  void *v14;
  void *v15;
  int v16;
  void *v17;
  __int16 v18;
  void *v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  v3 = a2;
  v4 = (void *)MEMORY[0x227676638]();
  v5 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v6 = objc_claimAutoreleasedReturnValue();
  v7 = v6;
  if (v3)
  {
    if (!os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
      goto LABEL_7;
    HMFGetLogIdentifier();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 32), "fabric");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "fabricID");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v16 = 138543618;
    v17 = v8;
    v18 = 2112;
    v19 = v10;
    v11 = "%{public}@Failed to sync Matter Fabric ID to %@";
    v12 = v7;
    v13 = OS_LOG_TYPE_ERROR;
  }
  else
  {
    if (!os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
      goto LABEL_7;
    HMFGetLogIdentifier();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 32), "fabric");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "fabricID");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v16 = 138543618;
    v17 = v8;
    v18 = 2112;
    v19 = v10;
    v11 = "%{public}@Successfully sync'ed Matter Fabric ID to %@";
    v12 = v7;
    v13 = OS_LOG_TYPE_INFO;
  }
  _os_log_impl(&dword_2218F0000, v12, v13, v11, (uint8_t *)&v16, 0x16u);

LABEL_7:
  objc_autoreleasePoolPop(v4);
  v14 = _Block_copy(*(const void **)(a1 + 40));
  v15 = v14;
  if (v14)
    (*((void (**)(void *, id))v14 + 2))(v14, v3);

}

void __74__HMDHome_CHIP__downloadLogWithController_nodeId_type_timeout_completion___block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  id v8;
  NSObject *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  int v15;
  void *v16;
  __int16 v17;
  id v18;
  __int16 v19;
  id v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  v5 = a2;
  v6 = a3;
  v7 = (void *)MEMORY[0x227676638]();
  v8 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v9 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v15 = 138543874;
    v16 = v10;
    v17 = 2112;
    v18 = v5;
    v19 = 2112;
    v20 = v6;
    _os_log_impl(&dword_2218F0000, v9, OS_LOG_TYPE_INFO, "%{public}@Download log response: %@, error: %@", (uint8_t *)&v15, 0x20u);

  }
  objc_autoreleasePoolPop(v7);
  objc_msgSend(v5, "hmf_dataForKey:", *MEMORY[0x24BE4F0B0]);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "hmf_stringForKey:", *MEMORY[0x24BE4F0B8]);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  if (v6)
  {
    v13 = _Block_copy(*(const void **)(a1 + 40));
    v14 = v13;
    if (v13)
      (*((void (**)(void *, _QWORD, id))v13 + 2))(v13, 0, v6);

  }
  else
  {
    objc_msgSend(*(id *)(a1 + 32), "_writeLogData:logName:completion:", v11, v12, *(_QWORD *)(a1 + 40));
  }

}

void __109__HMDHome_CHIP__invokeCommandWithNodeId_endpointId_clusterId_commandId_fields_timedInvokeTimeout_completion___block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  id v8;
  NSObject *v9;
  void *v10;
  uint64_t v11;
  void *v12;
  int v13;
  void *v14;
  __int16 v15;
  id v16;
  __int16 v17;
  id v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v5 = a2;
  v6 = a3;
  v7 = (void *)MEMORY[0x227676638]();
  v8 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v9 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
  {
    HMFGetLogIdentifier();
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v13 = 138543874;
    v14 = v10;
    v15 = 2112;
    v16 = v5;
    v17 = 2112;
    v18 = v6;
    _os_log_impl(&dword_2218F0000, v9, OS_LOG_TYPE_DEBUG, "%{public}@Invoke command response: %@, error: %@", (uint8_t *)&v13, 0x20u);

  }
  objc_autoreleasePoolPop(v7);
  v11 = *(_QWORD *)(a1 + 40);
  objc_msgSend(v5, "objectForKeyedSubscript:", CFSTR("results"));
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  (*(void (**)(uint64_t, void *, id))(v11 + 16))(v11, v12, v6);

}

void __110__HMDHome_CHIP__writeAttributeWithNodeId_endpointId_clusterId_attributeId_value_timedWriteTimeout_completion___block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  id v8;
  NSObject *v9;
  void *v10;
  uint64_t v11;
  void *v12;
  int v13;
  void *v14;
  __int16 v15;
  id v16;
  __int16 v17;
  id v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v5 = a2;
  v6 = a3;
  v7 = (void *)MEMORY[0x227676638]();
  v8 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v9 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
  {
    HMFGetLogIdentifier();
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v13 = 138543874;
    v14 = v10;
    v15 = 2112;
    v16 = v5;
    v17 = 2112;
    v18 = v6;
    _os_log_impl(&dword_2218F0000, v9, OS_LOG_TYPE_DEBUG, "%{public}@Write attribute response: %@, error: %@", (uint8_t *)&v13, 0x20u);

  }
  objc_autoreleasePoolPop(v7);
  v11 = *(_QWORD *)(a1 + 40);
  objc_msgSend(v5, "objectForKeyedSubscript:", CFSTR("results"));
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  (*(void (**)(uint64_t, void *, id))(v11 + 16))(v11, v12, v6);

}

void __92__HMDHome_CHIP__readAttributeWithNodeId_endpointId_clusterId_attributeId_params_completion___block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  id v8;
  NSObject *v9;
  void *v10;
  uint64_t v11;
  void *v12;
  int v13;
  void *v14;
  __int16 v15;
  id v16;
  __int16 v17;
  id v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v5 = a2;
  v6 = a3;
  v7 = (void *)MEMORY[0x227676638]();
  v8 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v9 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
  {
    HMFGetLogIdentifier();
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v13 = 138543874;
    v14 = v10;
    v15 = 2112;
    v16 = v5;
    v17 = 2112;
    v18 = v6;
    _os_log_impl(&dword_2218F0000, v9, OS_LOG_TYPE_DEBUG, "%{public}@Read attribute response: %@, error: %@", (uint8_t *)&v13, 0x20u);

  }
  objc_autoreleasePoolPop(v7);
  v11 = *(_QWORD *)(a1 + 40);
  objc_msgSend(v5, "objectForKeyedSubscript:", CFSTR("results"));
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  (*(void (**)(uint64_t, void *, id))(v11 + 16))(v11, v12, v6);

}

void __85__HMDHome_CHIP__remotelyUpdateHomeModelWithCHIPKeyValueStore_removedKeys_completion___block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  id v8;
  NSObject *v9;
  NSObject *v10;
  void *v11;
  uint64_t v12;
  const char *v13;
  NSObject *v14;
  os_log_type_t v15;
  uint32_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  void *v21;
  __int16 v22;
  uint64_t v23;
  __int16 v24;
  id v25;
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  v5 = a2;
  v6 = a3;
  v7 = (void *)MEMORY[0x227676638]();
  v8 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v9 = objc_claimAutoreleasedReturnValue();
  v10 = v9;
  if (v5)
  {
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      v12 = *(_QWORD *)(a1 + 40);
      v20 = 138543874;
      v21 = v11;
      v22 = 2112;
      v23 = v12;
      v24 = 2112;
      v25 = v5;
      v13 = "%{public}@Failed to remotely update CHIP key value store for message %@: %@";
      v14 = v10;
      v15 = OS_LOG_TYPE_ERROR;
      v16 = 32;
LABEL_6:
      _os_log_impl(&dword_2218F0000, v14, v15, v13, (uint8_t *)&v20, v16);

    }
  }
  else if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v17 = *(_QWORD *)(a1 + 40);
    v20 = 138543618;
    v21 = v11;
    v22 = 2112;
    v23 = v17;
    v13 = "%{public}@Successfully remotely updated CHIP key value store for message %@";
    v14 = v10;
    v15 = OS_LOG_TYPE_INFO;
    v16 = 22;
    goto LABEL_6;
  }

  objc_autoreleasePoolPop(v7);
  (*(void (**)(_QWORD, id, uint64_t, uint64_t))(*(_QWORD *)(a1 + 48) + 16))(*(_QWORD *)(a1 + 48), v5, v18, v19);

}

+ (id)updatedHomeModelCHIPPropertiesForAddedHAPAccessoryServer:(id)a3
{
  id v3;
  void *v4;
  id v5;
  void *v6;
  void *v7;
  void *v8;
  _QWORD v10[2];
  _QWORD v11[3];

  v11[2] = *MEMORY[0x24BDAC8D0];
  v3 = a3;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v4 = v3;
  else
    v4 = 0;
  v5 = v4;
  objc_msgSend(v5, "fabricID");
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  if (v6)
  {
    v10[0] = CFSTR("HMDHomeModelUpdatedCHIPPropertiesMessageKeyFabricID");
    objc_msgSend(v5, "fabricID");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v10[1] = CFSTR("HMDHomeModelUpdatedCHIPPropertiesMessageKeyFabricIndex");
    v11[0] = v7;
    objc_msgSend(v5, "fabricID");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v11[1] = v8;
    objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v11, v10, 2);
    v6 = (void *)objc_claimAutoreleasedReturnValue();

  }
  return v6;
}

+ (void)updateCHIPPropertiesOnMKFAccessoryModel:(id)a3 forAddedHAPAccessoryServer:(id)a4
{
  id v5;
  void *v6;
  id v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  id v18;

  v18 = a3;
  v5 = a4;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v6 = v5;
  else
    v6 = 0;
  v7 = v6;
  v8 = v7;
  if (v7)
  {
    objc_msgSend(v7, "nodeID");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v18, "setMatterNodeID:", v9);

    objc_msgSend(v8, "vendorID");
    v10 = (void *)objc_claimAutoreleasedReturnValue();

    if (v10)
    {
      objc_msgSend(v8, "vendorID");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v18, "setMatterVendorID:", v11);

    }
    objc_msgSend(v8, "productID");
    v12 = (void *)objc_claimAutoreleasedReturnValue();

    if (v12)
    {
      objc_msgSend(v8, "productID");
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v18, "setMatterProductID:", v13);

    }
    objc_msgSend(MEMORY[0x24BDD16E0], "numberWithBool:", objc_msgSend(v8, "isWEDDevice"));
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v18, "setMatterWEDSupport:", v14);

    objc_msgSend(v8, "eMACAddress");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v18, "setMatterExtendedMACAddress:", v15);

    objc_msgSend(v8, "softwareVersionNumber");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v18, "setMatterSoftwareVersionNumber:", v16);

    objc_msgSend(v8, "supportedLinkLayerTypes");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v18, "setSupportedLinkLayerTypes:", v17);

  }
}

+ (BOOL)updateCHIPPropertiesOnHomeModel:(id)a3 forAddedHAPAccessoryServer:(id)a4
{
  id v5;
  id v6;
  void *v7;
  id v8;
  void *v9;
  void *v10;
  void *v11;

  v5 = a3;
  v6 = a4;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v7 = v6;
  else
    v7 = 0;
  v8 = v7;
  objc_msgSend(v8, "fabricID");
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  if (v9)
  {
    objc_msgSend(v8, "fabricID");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "setChipFabricID:", v10);

    objc_msgSend(v8, "fabricID");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "setChipFabricIndex:", v11);

  }
  return v9 != 0;
}

+ (void)updateCHIPPropertiesOnAccessoryModel:(id)a3 forAddedHAPAccessoryServer:(id)a4
{
  id v5;
  void *v6;
  id v7;
  void *v8;
  void *v9;
  id v10;

  v10 = a3;
  v5 = a4;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v6 = v5;
  else
    v6 = 0;
  v7 = v6;
  v8 = v7;
  if (v7)
  {
    objc_msgSend(v7, "nodeID");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "setChipNodeID:", v9);

  }
}

- (HMDHome)initWithName:(id)a3 uuid:(id)a4 defaultRoomUUID:(id)a5 owner:(id)a6 homeManager:(id)a7 presenceAuth:(id)a8
{
  id v14;
  void *v15;
  void *v16;
  HMDXPCMessageReportingSessionManager *v17;
  HMDDeviceLockStateDataSource *v19;
  HMDXPCMessageTransportFactory *v20;
  HMDHomeLocalDeviceCapabilitiesDataSource *v21;
  HMDCarPlayDataSource *v22;
  HMDSiriSecureAccessoryAccessController *v23;
  void *v24;
  HMDHome *v26;
  HMDHomeMetricsDispatcherFactory *v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  HMDNotificationRegistry *v37;

  v32 = a8;
  v14 = a7;
  v31 = a6;
  v30 = a5;
  v29 = a4;
  v28 = a3;
  isWatch();
  v37 = objc_alloc_init(HMDNotificationRegistry);
  v27 = objc_alloc_init(HMDHomeMetricsDispatcherFactory);
  objc_msgSend(v14, "metricsManager");
  v34 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v34, "logEventSubmitter");
  v36 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v14, "metricsManager");
  v33 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v33, "dailyScheduler");
  v35 = (void *)objc_claimAutoreleasedReturnValue();
  +[HMDHAPMetadata getSharedInstance](HMDHAPMetadata, "getSharedInstance");
  v24 = (void *)objc_claimAutoreleasedReturnValue();
  v23 = -[HMDSiriSecureAccessoryAccessController initWithDataSource:]([HMDSiriSecureAccessoryAccessController alloc], "initWithDataSource:", self);
  v22 = objc_alloc_init(HMDCarPlayDataSource);
  v19 = objc_alloc_init(HMDDeviceLockStateDataSource);
  v20 = objc_alloc_init(HMDXPCMessageTransportFactory);
  v21 = objc_alloc_init(HMDHomeLocalDeviceCapabilitiesDataSource);
  objc_msgSend(MEMORY[0x24BDD16D0], "defaultCenter");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x24BE1BC08], "systemStore");
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  v17 = objc_alloc_init(HMDXPCMessageReportingSessionManager);
  v26 = -[HMDHome initWithName:uuid:defaultRoomUUID:owner:homeManager:presenceAuth:metricsDispatcherFactory:logEventSubmitter:dailyScheduler:currentUserFactory:residentDeviceManagerFactory:locationHandlerFactory:hapMetadata:siriSecureAccessoryAccessController:carPlayDataSource:deviceLockStateDataSource:notificationRegistry:administratorHandlerFactory:netManagerFactory:wifiManagerFactory:matterCapabilitiesFactory:xpcMessageTransportFactory:localCapabilitiesDataSource:notificationCenter:keychainStore:reportingSessionManager:](self, "initWithName:uuid:defaultRoomUUID:owner:homeManager:presenceAuth:metricsDispatcherFactory:logEventSubmitter:dailyScheduler:currentUserFactory:residentDeviceManagerFactory:locationHandlerFactory:hapMetadata:siriSecureAccessoryAccessController:carPlayDataSource:deviceLockStateDataSource:notificationRegistry:administratorHandlerFactory:netManagerFactory:wifiManagerFactory:matterCapabilitiesFactory:xpcMessageTransportFactory:localCapabilitiesDataSource:notificationCenter:keychainStore:reportingSessionManager:", v28, v29, v30, v31, v14, v32, v27, v36, v35, &__block_literal_global_408, &__block_literal_global_410, &__block_literal_global_416, v24,
          v23,
          v22,
          v19,
          v37,
          &__block_literal_global_413,
          &__block_literal_global_419,
          &__block_literal_global_422,
          0,
          v20,
          v21,
          v15,
          v16,
          v17);

  return v26;
}

- (HMDHome)initWithName:(id)a3 uuid:(id)a4 defaultRoomUUID:(id)a5 owner:(id)a6 homeManager:(id)a7 presenceAuth:(id)a8 metricsDispatcherFactory:(id)a9 logEventSubmitter:(id)a10 dailyScheduler:(id)a11 currentUserFactory:(id)a12 residentDeviceManagerFactory:(id)a13 locationHandlerFactory:(id)a14 hapMetadata:(id)a15 siriSecureAccessoryAccessController:(id)a16 carPlayDataSource:(id)a17 deviceLockStateDataSource:(id)a18 notificationRegistry:(id)a19 administratorHandlerFactory:(id)a20 netManagerFactory:(id)a21 wifiManagerFactory:(id)a22 matterCapabilitiesFactory:(id)a23 xpcMessageTransportFactory:(id)a24 localCapabilitiesDataSource:(id)a25 notificationCenter:(id)a26 keychainStore:(id)a27 reportingSessionManager:(id)a28
{
  id v32;
  id v33;
  id v34;
  HMDHome *v35;
  uint64_t v36;
  HMDFeaturesDataSource *featureDataSource;
  void *v38;
  id currentUserFactory;
  uint64_t v40;
  OS_os_log *logger;
  uint64_t v42;
  NSUUID *uuid;
  uint64_t v44;
  NSUUID *spiClientIdentifier;
  void *v46;
  void *v47;
  const char *v48;
  NSObject *v49;
  dispatch_queue_t v50;
  OS_dispatch_queue *workQueue;
  HMDPrimaryResidentChangeMonitor *v52;
  HMDPrimaryResidentChangeMonitor *primaryResidentChangeMonitor;
  void *v54;
  id netManagerFactory;
  void *v56;
  id wifiManagerFactory;
  HMDAccessoryInfoFetchController *v58;
  HMDAccessoryInfoFetchController *accessoryInfoFetchController;
  uint64_t v60;
  HMDHomeMetricsDispatcher *metricsDispatcher;
  void *v62;
  uint64_t v63;
  NSString *name;
  uint64_t v65;
  NSUUID *zoneID;
  uint64_t v67;
  HMFMessageDispatcher *msgDispatcher;
  uint64_t v69;
  NSString *ownerName;
  uint64_t v71;
  HMDHomeKitVersion *currentHomeKitVersion;
  void *v73;
  HMDHome *v74;
  NSObject *v75;
  void *v76;
  HMUserPresenceCompute *presenceComputeStatus;
  uint64_t v78;
  NSMutableSet *reachabilityUpdatedAccessories;
  HMDHomeObjectChangeHandler *v80;
  HMDHomeObjectChangeHandler *homeObjectChangeHandler;
  uint64_t v82;
  HMDAccessoryBrowserProtocol *accessoryBrowser;
  uint64_t v84;
  NSMutableArray *rooms;
  uint64_t v86;
  NSMutableArray *zones;
  uint64_t v88;
  NSMutableDictionary *accessories;
  uint64_t v90;
  NSMutableArray *discoveredAccessories;
  uint64_t v92;
  NSMutableArray *serviceGroups;
  uint64_t v94;
  NSMutableArray *actionSets;
  uint64_t v96;
  NSMutableArray *currentTriggers;
  uint64_t v98;
  NSMutableArray *triggerOwnedActionSets;
  uint64_t v100;
  NSMutableArray *users;
  uint64_t v102;
  NSMutableArray *usersPendingUserManagementOperations;
  uint64_t v104;
  NSMutableArray *removedUsers;
  uint64_t v106;
  NSMutableArray *outgoingInvitations;
  uint64_t v108;
  NSMutableArray *ownedTriggers;
  uint64_t v110;
  NSMutableSet *pendingResponsesForRemoteAccessSetup;
  uint64_t v112;
  NSMutableDictionary *enableNotificationPayload;
  uint64_t v114;
  NSMutableDictionary *disableNotificationPayload;
  uint64_t v116;
  NSMutableDictionary *pendingCharacteristicThresholdPayload;
  uint64_t v118;
  NSMutableArray *actionSetsEnableNotificationPayload;
  uint64_t v120;
  NSMutableArray *actionSetsDisableNotificationPayload;
  uint64_t v122;
  NSMutableDictionary *matterAttributesEnableNotificationPayload;
  uint64_t v124;
  NSMutableDictionary *notificationHandlerMap;
  uint64_t v126;
  NSMutableSet *notificationRegistrations;
  uint64_t v128;
  NSMutableSet *notificationRegistrationsForAppleMediaAccessories;
  uint64_t v130;
  NSMutableSet *notificationDeregistrations;
  uint64_t v132;
  NSDate *notificationsUpdatedTime;
  uint64_t v134;
  NSMapTable *uuidToHAPAccessoryConfigTable;
  uint64_t v136;
  HMDAppleAccountSettings *accountSettings;
  uint64_t v138;
  NSMutableSet *heartbeatPingMessagesQueuedWithServer;
  HMDRoom *v140;
  void *v141;
  uint64_t v142;
  HMDRoom *roomForEntireHome;
  uint64_t v144;
  NSMutableArray *unconfiguredResidentDevices;
  uint64_t v146;
  NSHashTable *removeAccessoryInProgressForHMDAccessories;
  uint64_t v148;
  NSMutableArray *retrievalAccessoryCompletionTuples;
  uint64_t v150;
  NSMutableArray *accessoryRemoteReachabilityEnabledClients;
  HMDManagedStagedValue *v152;
  void *v153;
  uint64_t v154;
  HMDManagedStagedValue *stagedRemoteReachabilityRegistration;
  uint64_t v156;
  NSMutableArray *reachabilityRegisteredDevices;
  uint64_t v158;
  NSMutableArray *remoteReachabilityNotificationPendingAccessories;
  uint64_t v160;
  NSMutableDictionary *pendingResponses;
  _QWORD *v162;
  void *v163;
  id matterCapabilitiesFactory;
  uint64_t v165;
  HMDHomeLocationHandler *homeLocationHandler;
  HMDHomeReprovisionHandler *v167;
  HMDHomeReprovisionHandler *homeReprovisionHandler;
  uint64_t v169;
  NSMutableDictionary *newlyConfiguredAccessories;
  uint64_t v171;
  NSMapTable *addPendingAccessories;
  uint64_t v173;
  NSMutableDictionary *addPendingAccessorySetupCodes;
  uint64_t v175;
  NSMutableDictionary *addPendingAccessoryOnboardingSetupPayloadStrings;
  uint64_t v177;
  NSMutableDictionary *addPendingAccessorySetupCodeHandlers;
  uint64_t v179;
  HMDResidentDeviceManager *residentDeviceManager;
  uint64_t v181;
  HMFFuture *residentSyncClientDidSyncFuture;
  uint64_t v183;
  HMDHomeAdministratorHandler *administratorHandler;
  HMDHomeMediaSystemHandler *v185;
  uint64_t v186;
  HMDHomeMediaSystemHandler *mediaSystemController;
  uint64_t v188;
  HMDActionSetStateObserver *actionSetStateObserver;
  uint64_t v190;
  HMDActionSetStateSubscriptionManager *actionSetStateSubscriptionManager;
  uint64_t v192;
  NSMutableArray *mediaSessions;
  uint64_t v194;
  NSMutableArray *mediaSessionStates;
  uint64_t v196;
  NSHashTable *connectionsDiscoveringSymptomsForNearbyDevices;
  HMDHomePresenceMonitor *v198;
  HMDHomePresenceMonitor *presenceMonitor;
  HMDHomePeriodicReader *v200;
  HMDHomePeriodicReader *periodicReader;
  HMDUserPresenceFeeder *v202;
  HMDUserPresenceFeeder *presenceFeeder;
  HMDPredicateUtilities *v204;
  void *v205;
  uint64_t v206;
  HMDPredicateUtilities *predicateUtility;
  HMDMediaActionRouter *v208;
  HMDMediaActionRouter *mediaActionRouter;
  HMDAccessoryNetworkProtectionGroupRegistry *v210;
  void *v211;
  uint64_t v212;
  HMDAccessoryNetworkProtectionGroupRegistry *networkProtectionGroupRegistry;
  HMDResidentReachabilityNotificationManager *v214;
  HMDResidentReachabilityContext *v215;
  uint64_t v216;
  HMDResidentReachabilityNotificationManager *reachabilityNotificationManager;
  HMDAccessoryReachabilityChangedLogEventManager *v218;
  HMDAccessoryReachabilityChangedLogEventManager *reachabilityChangedLogEventManager;
  HMDHomeNaturalLightingCurveWriter *v220;
  HMDHomeNaturalLightingCurveWriter *naturalLightingCurveWriter;
  void *v222;
  HMDHome *v223;
  NSObject *v224;
  void *v225;
  HomeIntelligenceActivityLogger *v226;
  HomeIntelligenceActivityLogger *homeIntelligenceActivityLogger;
  HMDHAPAccessoryConnectionCoordinator *v228;
  void *v229;
  uint64_t v230;
  HMDHAPAccessoryConnectionCoordinator *accessoryConnectionCoordinator;
  HMDHAPAccessoryReaderWriter *v232;
  HMDHAPAccessoryReaderWriter *accessoryReaderWriter;
  HMDHomePersonDataManager *v234;
  HMDHomePersonDataManager *personDataManager;
  HMDHomeWalletKeyManager *v236;
  HMDHomeWalletKeyManager *walletKeyManager;
  void *v238;
  HMDHome *v239;
  NSObject *v240;
  void *v241;
  HMDHomeNFCReaderKeyManager *v242;
  HMDHomeNFCReaderKeyManager *nfcReaderKeyManager;
  void *v244;
  HMDHome *v245;
  NSObject *v246;
  void *v247;
  uint64_t v248;
  NSMutableDictionary *labelsByAccessCode;
  uint64_t v250;
  NSMutableDictionary *labelIdentifiersByAccessCode;
  uint64_t v252;
  NSMutableDictionary *removedUserInfoByAccessCode;
  HMDAccessCodeManagerContext *v254;
  void *v255;
  HMDAccessCodeManagerContext *v256;
  HMDAccessCodeManager *v257;
  HMDAccessCodeManager *accessCodeManager;
  HMDHomeLockNotificationManager *v259;
  HMDHomeLockNotificationManager *lockNotificationManager;
  HMDCameraAnalysisStatePublisher *v261;
  HMDCameraAnalysisStatePublisher *analysisStatePublisher;
  HMDHomeRemoteEventAccessController *v263;
  HMDHomeRemoteEventAccessController *homeRemoteEventAccessController;
  HMDHomeAudioAnalysisStereoPairController *v265;
  HMDHomeAudioAnalysisStereoPairController *audioAnalysisStereoPairController;
  void *v267;
  id *v268;
  NSObject *v269;
  void *v270;
  HMDMediaGroupSetupMetricDispatcher *v271;
  id v272;
  HMDMediaGroupSetupMetricDispatcher *v273;
  id v274;
  HMDCHIPHomeStorage *v275;
  id v276;
  uint64_t v277;
  id v278;
  HMDCHIPControllerPrivateStorage *v279;
  id v280;
  id v281;
  void *v282;
  uint64_t v283;
  id v284;
  void *v285;
  void *v286;
  void *v287;
  void *v288;
  void *v289;
  void *v290;
  void *v291;
  HMDModernMessagingHandler *v292;
  id v293;
  id v295;
  id v296;
  void *v297;
  void *v298;
  id v299;
  id v300;
  id v301;
  id v302;
  id v303;
  id v304;
  id v305;
  id v306;
  id *p_localCapabilitiesDataSource;
  void *v309;
  void *v310;
  void *v311;
  void (**v312)(id, id);
  void (**v313)(id, id);
  void (**v314)(void);
  id v315;
  id v316;
  id v317;
  id v318;
  id v319;
  id aBlock;
  id v321;
  id *v322;
  id v323;
  _QWORD *v324;
  id v325;
  id v327;
  id v328;
  _QWORD v329[4];
  id v330;
  id v331;
  _QWORD v332[4];
  id v333;
  _QWORD v334[4];
  id v335;
  id location;
  objc_super v337;
  uint8_t buf[4];
  void *v339;
  __int16 v340;
  id v341;
  uint64_t v342;

  v322 = (id *)a18;
  v342 = *MEMORY[0x24BDAC8D0];
  v316 = a3;
  v317 = a4;
  v315 = a5;
  v328 = a6;
  v325 = a7;
  v295 = a8;
  v323 = a8;
  v32 = a9;
  v327 = a10;
  v299 = a11;
  aBlock = a12;
  v312 = (void (**)(id, id))a13;
  v314 = (void (**)(void))a14;
  v33 = a15;
  v300 = a16;
  v301 = a17;
  v302 = a18;
  v303 = a19;
  v313 = (void (**)(id, id))a20;
  v319 = a21;
  v318 = a22;
  v324 = a23;
  v304 = a24;
  v305 = a25;
  v321 = a26;
  v306 = a27;
  v34 = a28;
  v311 = v32;
  if (!v32)
    _HMFPreconditionFailure();
  v297 = v33;
  v298 = v34;
  v337.receiver = self;
  v337.super_class = (Class)HMDHome;
  v35 = -[HMDHome init](&v337, sel_init);
  if (v35)
  {
    +[HMDHome _initialize](HMDHome, "_initialize");
    +[HMDFeaturesDataSource defaultDataSource](HMDFeaturesDataSource, "defaultDataSource");
    v36 = objc_claimAutoreleasedReturnValue();
    featureDataSource = v35->_featureDataSource;
    v35->_featureDataSource = (HMDFeaturesDataSource *)v36;

    p_localCapabilitiesDataSource = (id *)&v35->_localCapabilitiesDataSource;
    objc_storeStrong((id *)&v35->_localCapabilitiesDataSource, a25);
    v38 = _Block_copy(aBlock);
    currentUserFactory = v35->_currentUserFactory;
    v35->_currentUserFactory = v38;

    objc_storeStrong((id *)&v35->_xpcMessageTransportFactory, a24);
    HMFGetOSLogHandle();
    v40 = objc_claimAutoreleasedReturnValue();
    logger = v35->_logger;
    v35->_logger = (OS_os_log *)v40;

    if (v317)
    {
      v310 = (void *)objc_msgSend(v317, "copy");
    }
    else
    {
      objc_msgSend(MEMORY[0x24BDD1880], "UUID");
      v310 = (void *)objc_claimAutoreleasedReturnValue();
    }
    objc_msgSend(MEMORY[0x24BE3F210], "hmf_cachedInstanceForNSUUID:", v310);
    v42 = objc_claimAutoreleasedReturnValue();
    uuid = v35->_uuid;
    v35->_uuid = (NSUUID *)v42;

    spiClientIdentifierForUUID(v35->_uuid);
    v309 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BE3F210], "hmf_cachedInstanceForNSUUID:", v309);
    v44 = objc_claimAutoreleasedReturnValue();
    spiClientIdentifier = v35->_spiClientIdentifier;
    v35->_spiClientIdentifier = (NSUUID *)v44;

    -[NSUUID UUIDString](v35->_uuid, "UUIDString");
    v46 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(CFSTR("com.apple.hmd.home"), "stringByAppendingString:", v46);
    v47 = (void *)objc_claimAutoreleasedReturnValue();

    v296 = objc_retainAutorelease(v47);
    v48 = (const char *)objc_msgSend(v296, "UTF8String");
    dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
    v49 = objc_claimAutoreleasedReturnValue();
    v50 = dispatch_queue_create(v48, v49);
    workQueue = v35->_workQueue;
    v35->_workQueue = (OS_dispatch_queue *)v50;

    objc_msgSend(MEMORY[0x24BE3F168], "blessWithImplicitContext:", v35->_workQueue);
    objc_storeStrong((id *)&v35->_notificationCenter, a26);
    v52 = -[HMDPrimaryResidentChangeMonitor initWithIdentifier:notificationCenter:]([HMDPrimaryResidentChangeMonitor alloc], "initWithIdentifier:notificationCenter:", v35->_uuid, v321);
    primaryResidentChangeMonitor = v35->_primaryResidentChangeMonitor;
    v35->_primaryResidentChangeMonitor = v52;

    -[HMDPrimaryResidentChangeMonitor setDataSource:](v35->_primaryResidentChangeMonitor, "setDataSource:", v35);
    objc_storeStrong((id *)&v35->_logEventSubmitter, a10);
    objc_storeStrong((id *)&v35->_dailyScheduler, a11);
    v54 = _Block_copy(v319);
    netManagerFactory = v35->_netManagerFactory;
    v35->_netManagerFactory = v54;

    v56 = _Block_copy(v318);
    wifiManagerFactory = v35->_wifiManagerFactory;
    v35->_wifiManagerFactory = v56;

    objc_storeStrong((id *)&v35->_keychainStore, a27);
    objc_storeStrong((id *)&v35->_reportingSessionManager, a28);
    v58 = -[HMDAccessoryInfoFetchController initWithHomeUUID:workQueue:]([HMDAccessoryInfoFetchController alloc], "initWithHomeUUID:workQueue:", v35->_uuid, v35->_workQueue);
    accessoryInfoFetchController = v35->_accessoryInfoFetchController;
    v35->_accessoryInfoFetchController = v58;

    if (v327)
    {
      objc_msgSend(v32, "createHomeMetricsDispatcherWithIdentifier:logEventSubmitter:", v35->_uuid, v327);
      v60 = objc_claimAutoreleasedReturnValue();
      metricsDispatcher = v35->_metricsDispatcher;
      v35->_metricsDispatcher = (HMDHomeMetricsDispatcher *)v60;

    }
    objc_msgSend(v316, "hm_truncatedNameString");
    v62 = (void *)objc_claimAutoreleasedReturnValue();
    v63 = objc_msgSend(v62, "copy");
    name = v35->_name;
    v35->_name = (NSString *)v63;

    +[HMDHome zoneIDFromHomeUUID:](HMDHome, "zoneIDFromHomeUUID:", v35->_uuid);
    v65 = objc_claimAutoreleasedReturnValue();
    zoneID = v35->_zoneID;
    v35->_zoneID = (NSUUID *)v65;

    objc_storeWeak((id *)&v35->_homeManager, v325);
    objc_msgSend(v325, "messageDispatcher");
    v67 = objc_claimAutoreleasedReturnValue();
    msgDispatcher = v35->_msgDispatcher;
    v35->_msgDispatcher = (HMFMessageDispatcher *)v67;

    objc_storeStrong((id *)&v35->_owner, a6);
    v35->_ownerTrustZoneCapable = objc_msgSend(v328, "isCurrentUser");
    objc_msgSend(v328, "pairingUsername");
    v69 = objc_claimAutoreleasedReturnValue();
    ownerName = v35->_ownerName;
    v35->_ownerName = (NSString *)v69;

    v35->_allowsRemoteAccess = 1;
    +[HMDHomeKitVersion currentVersion](HMDHomeKitVersion, "currentVersion");
    v71 = objc_claimAutoreleasedReturnValue();
    currentHomeKitVersion = v35->_currentHomeKitVersion;
    v35->_currentHomeKitVersion = (HMDHomeKitVersion *)v71;

    v73 = (void *)MEMORY[0x227676638]();
    v74 = v35;
    HMFGetOSLogHandle();
    v75 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v75, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v76 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v339 = v76;
      v340 = 2112;
      v341 = v323;
      _os_log_impl(&dword_2218F0000, v75, OS_LOG_TYPE_INFO, "%{public}@Home Presence auth : %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v73);
    if (v323)
      objc_storeStrong((id *)&v74->_presenceAuthStatus, v295);
    presenceComputeStatus = v74->_presenceComputeStatus;
    v74->_presenceComputeStatus = 0;

    v74->_homeLocation = 0;
    objc_msgSend(MEMORY[0x24BDBCEF0], "set");
    v78 = objc_claimAutoreleasedReturnValue();
    reachabilityUpdatedAccessories = v74->_reachabilityUpdatedAccessories;
    v74->_reachabilityUpdatedAccessories = (NSMutableSet *)v78;

    v80 = -[HMDHomeObjectChangeHandler initWithHome:]([HMDHomeObjectChangeHandler alloc], "initWithHome:", v74);
    homeObjectChangeHandler = v74->_homeObjectChangeHandler;
    v74->_homeObjectChangeHandler = v80;

    objc_msgSend(v325, "accessoryBrowser");
    v82 = objc_claimAutoreleasedReturnValue();
    accessoryBrowser = v74->_accessoryBrowser;
    v74->_accessoryBrowser = (HMDAccessoryBrowserProtocol *)v82;

    objc_msgSend(MEMORY[0x24BDBCEB8], "array");
    v84 = objc_claimAutoreleasedReturnValue();
    rooms = v74->_rooms;
    v74->_rooms = (NSMutableArray *)v84;

    objc_msgSend(MEMORY[0x24BDBCEB8], "array");
    v86 = objc_claimAutoreleasedReturnValue();
    zones = v74->_zones;
    v74->_zones = (NSMutableArray *)v86;

    objc_msgSend(MEMORY[0x24BDBCED8], "dictionary");
    v88 = objc_claimAutoreleasedReturnValue();
    accessories = v74->_accessories;
    v74->_accessories = (NSMutableDictionary *)v88;

    objc_msgSend(MEMORY[0x24BDBCEB8], "array");
    v90 = objc_claimAutoreleasedReturnValue();
    discoveredAccessories = v74->_discoveredAccessories;
    v74->_discoveredAccessories = (NSMutableArray *)v90;

    objc_msgSend(MEMORY[0x24BDBCEB8], "array");
    v92 = objc_claimAutoreleasedReturnValue();
    serviceGroups = v74->_serviceGroups;
    v74->_serviceGroups = (NSMutableArray *)v92;

    objc_msgSend(MEMORY[0x24BDBCEB8], "array");
    v94 = objc_claimAutoreleasedReturnValue();
    actionSets = v74->_actionSets;
    v74->_actionSets = (NSMutableArray *)v94;

    objc_msgSend(MEMORY[0x24BDBCEB8], "array");
    v96 = objc_claimAutoreleasedReturnValue();
    currentTriggers = v74->_currentTriggers;
    v74->_currentTriggers = (NSMutableArray *)v96;

    objc_msgSend(MEMORY[0x24BDBCEB8], "array");
    v98 = objc_claimAutoreleasedReturnValue();
    triggerOwnedActionSets = v74->_triggerOwnedActionSets;
    v74->_triggerOwnedActionSets = (NSMutableArray *)v98;

    objc_msgSend(MEMORY[0x24BDBCEB8], "array");
    v100 = objc_claimAutoreleasedReturnValue();
    users = v74->_users;
    v74->_users = (NSMutableArray *)v100;

    objc_msgSend(MEMORY[0x24BDBCEB8], "array");
    v102 = objc_claimAutoreleasedReturnValue();
    usersPendingUserManagementOperations = v74->_usersPendingUserManagementOperations;
    v74->_usersPendingUserManagementOperations = (NSMutableArray *)v102;

    objc_msgSend(MEMORY[0x24BDBCEB8], "array");
    v104 = objc_claimAutoreleasedReturnValue();
    removedUsers = v74->_removedUsers;
    v74->_removedUsers = (NSMutableArray *)v104;

    objc_msgSend(MEMORY[0x24BDBCEB8], "array");
    v106 = objc_claimAutoreleasedReturnValue();
    outgoingInvitations = v74->_outgoingInvitations;
    v74->_outgoingInvitations = (NSMutableArray *)v106;

    objc_msgSend(MEMORY[0x24BDBCEB8], "array");
    v108 = objc_claimAutoreleasedReturnValue();
    ownedTriggers = v74->_ownedTriggers;
    v74->_ownedTriggers = (NSMutableArray *)v108;

    objc_msgSend(MEMORY[0x24BDBCEF0], "set");
    v110 = objc_claimAutoreleasedReturnValue();
    pendingResponsesForRemoteAccessSetup = v74->_pendingResponsesForRemoteAccessSetup;
    v74->_pendingResponsesForRemoteAccessSetup = (NSMutableSet *)v110;

    objc_msgSend(MEMORY[0x24BDBCED8], "dictionary");
    v112 = objc_claimAutoreleasedReturnValue();
    enableNotificationPayload = v74->_enableNotificationPayload;
    v74->_enableNotificationPayload = (NSMutableDictionary *)v112;

    objc_msgSend(MEMORY[0x24BDBCED8], "dictionary");
    v114 = objc_claimAutoreleasedReturnValue();
    disableNotificationPayload = v74->_disableNotificationPayload;
    v74->_disableNotificationPayload = (NSMutableDictionary *)v114;

    objc_msgSend(MEMORY[0x24BDBCED8], "dictionary");
    v116 = objc_claimAutoreleasedReturnValue();
    pendingCharacteristicThresholdPayload = v74->_pendingCharacteristicThresholdPayload;
    v74->_pendingCharacteristicThresholdPayload = (NSMutableDictionary *)v116;

    objc_msgSend(MEMORY[0x24BDBCEB8], "array");
    v118 = objc_claimAutoreleasedReturnValue();
    actionSetsEnableNotificationPayload = v74->_actionSetsEnableNotificationPayload;
    v74->_actionSetsEnableNotificationPayload = (NSMutableArray *)v118;

    objc_msgSend(MEMORY[0x24BDBCEB8], "array");
    v120 = objc_claimAutoreleasedReturnValue();
    actionSetsDisableNotificationPayload = v74->_actionSetsDisableNotificationPayload;
    v74->_actionSetsDisableNotificationPayload = (NSMutableArray *)v120;

    objc_msgSend(MEMORY[0x24BDBCED8], "dictionary");
    v122 = objc_claimAutoreleasedReturnValue();
    matterAttributesEnableNotificationPayload = v74->_matterAttributesEnableNotificationPayload;
    v74->_matterAttributesEnableNotificationPayload = (NSMutableDictionary *)v122;

    objc_msgSend(MEMORY[0x24BDBCED8], "dictionary");
    v124 = objc_claimAutoreleasedReturnValue();
    notificationHandlerMap = v74->_notificationHandlerMap;
    v74->_notificationHandlerMap = (NSMutableDictionary *)v124;

    objc_msgSend(MEMORY[0x24BDBCEF0], "set");
    v126 = objc_claimAutoreleasedReturnValue();
    notificationRegistrations = v74->_notificationRegistrations;
    v74->_notificationRegistrations = (NSMutableSet *)v126;

    objc_msgSend(MEMORY[0x24BDBCEF0], "set");
    v128 = objc_claimAutoreleasedReturnValue();
    notificationRegistrationsForAppleMediaAccessories = v74->_notificationRegistrationsForAppleMediaAccessories;
    v74->_notificationRegistrationsForAppleMediaAccessories = (NSMutableSet *)v128;

    objc_msgSend(MEMORY[0x24BDBCEF0], "set");
    v130 = objc_claimAutoreleasedReturnValue();
    notificationDeregistrations = v74->_notificationDeregistrations;
    v74->_notificationDeregistrations = (NSMutableSet *)v130;

    objc_msgSend(MEMORY[0x24BDBCE60], "distantFuture");
    v132 = objc_claimAutoreleasedReturnValue();
    notificationsUpdatedTime = v74->_notificationsUpdatedTime;
    v74->_notificationsUpdatedTime = (NSDate *)v132;

    objc_msgSend(MEMORY[0x24BDD1650], "strongToStrongObjectsMapTable");
    v134 = objc_claimAutoreleasedReturnValue();
    uuidToHAPAccessoryConfigTable = v74->_uuidToHAPAccessoryConfigTable;
    v74->_uuidToHAPAccessoryConfigTable = (NSMapTable *)v134;

    +[HMDAppleAccountSettings sharedSettings](HMDAppleAccountSettings, "sharedSettings");
    v136 = objc_claimAutoreleasedReturnValue();
    accountSettings = v74->_accountSettings;
    v74->_accountSettings = (HMDAppleAccountSettings *)v136;

    objc_storeStrong((id *)&v74->_hapMetadata, a15);
    objc_storeStrong((id *)&v74->_deviceLockStateDataSource, a18);
    objc_storeStrong((id *)&v74->_siriSecureAccessoryAccessController, a16);
    objc_storeStrong((id *)&v74->_carPlayDataSource, a17);
    if (isiOSDevice())
    {
      objc_msgSend(MEMORY[0x24BDBCEF0], "set");
      v138 = objc_claimAutoreleasedReturnValue();
      heartbeatPingMessagesQueuedWithServer = v74->_heartbeatPingMessagesQueuedWithServer;
      v74->_heartbeatPingMessagesQueuedWithServer = (NSMutableSet *)v138;

    }
    if (v328)
    {
      -[NSMutableArray addObject:](v74->_users, "addObject:", v328);
      objc_msgSend(v328, "setHome:", v74);
    }
    v140 = [HMDRoom alloc];
    HMDDefaultRoomName();
    v141 = (void *)objc_claimAutoreleasedReturnValue();
    v142 = -[HMDRoom initWithName:uuid:home:](v140, "initWithName:uuid:home:", v141, v315, v74);
    roomForEntireHome = v74->_roomForEntireHome;
    v74->_roomForEntireHome = (HMDRoom *)v142;

    v74->_configurationVersion = 0;
    v74->_previousReachableAccessoriesCount = 0;
    v74->_previousReachableAppleMediaAccessoriesCount = 0;
    objc_msgSend(MEMORY[0x24BDBCEB8], "array");
    v144 = objc_claimAutoreleasedReturnValue();
    unconfiguredResidentDevices = v74->_unconfiguredResidentDevices;
    v74->_unconfiguredResidentDevices = (NSMutableArray *)v144;

    objc_msgSend(MEMORY[0x24BDD15C0], "weakObjectsHashTable");
    v146 = objc_claimAutoreleasedReturnValue();
    removeAccessoryInProgressForHMDAccessories = v74->_removeAccessoryInProgressForHMDAccessories;
    v74->_removeAccessoryInProgressForHMDAccessories = (NSHashTable *)v146;

    objc_msgSend(MEMORY[0x24BDBCEB8], "array");
    v148 = objc_claimAutoreleasedReturnValue();
    retrievalAccessoryCompletionTuples = v74->_retrievalAccessoryCompletionTuples;
    v74->_retrievalAccessoryCompletionTuples = (NSMutableArray *)v148;

    objc_msgSend(MEMORY[0x24BDBCEB8], "array");
    v150 = objc_claimAutoreleasedReturnValue();
    accessoryRemoteReachabilityEnabledClients = v74->_accessoryRemoteReachabilityEnabledClients;
    v74->_accessoryRemoteReachabilityEnabledClients = (NSMutableArray *)v150;

    objc_initWeak(&location, v74);
    v152 = [HMDManagedStagedValue alloc];
    objc_msgSend(MEMORY[0x24BE3F150], "BOOLeanWithBool:", 0);
    v153 = (void *)objc_claimAutoreleasedReturnValue();
    v334[0] = MEMORY[0x24BDAC760];
    v334[1] = 3221225472;
    v334[2] = __521__HMDHome_initWithName_uuid_defaultRoomUUID_owner_homeManager_presenceAuth_metricsDispatcherFactory_logEventSubmitter_dailyScheduler_currentUserFactory_residentDeviceManagerFactory_locationHandlerFactory_hapMetadata_siriSecureAccessoryAccessController_carPlayDataSource_deviceLockStateDataSource_notificationRegistry_administratorHandlerFactory_netManagerFactory_wifiManagerFactory_matterCapabilitiesFactory_xpcMessageTransportFactory_localCapabilitiesDataSource_notificationCenter_keychainStore_reportingSessionManager___block_invoke;
    v334[3] = &unk_24E775BC8;
    objc_copyWeak(&v335, &location);
    v154 = -[HMDManagedStagedValue initWithValue:commitBlock:](v152, "initWithValue:commitBlock:", v153, v334);
    stagedRemoteReachabilityRegistration = v74->_stagedRemoteReachabilityRegistration;
    v74->_stagedRemoteReachabilityRegistration = (HMDManagedStagedValue *)v154;

    objc_msgSend(MEMORY[0x24BDBCEB8], "array");
    v156 = objc_claimAutoreleasedReturnValue();
    reachabilityRegisteredDevices = v74->_reachabilityRegisteredDevices;
    v74->_reachabilityRegisteredDevices = (NSMutableArray *)v156;

    objc_msgSend(MEMORY[0x24BDBCEB8], "array");
    v158 = objc_claimAutoreleasedReturnValue();
    remoteReachabilityNotificationPendingAccessories = v74->_remoteReachabilityNotificationPendingAccessories;
    v74->_remoteReachabilityNotificationPendingAccessories = (NSMutableArray *)v158;

    objc_msgSend(MEMORY[0x24BDBCED8], "dictionary");
    v160 = objc_claimAutoreleasedReturnValue();
    pendingResponses = v74->_pendingResponses;
    v74->_pendingResponses = (NSMutableDictionary *)v160;

    v162 = v324;
    if (!v324)
    {
      v332[0] = MEMORY[0x24BDAC760];
      v332[1] = 3221225472;
      v332[2] = __521__HMDHome_initWithName_uuid_defaultRoomUUID_owner_homeManager_presenceAuth_metricsDispatcherFactory_logEventSubmitter_dailyScheduler_currentUserFactory_residentDeviceManagerFactory_locationHandlerFactory_hapMetadata_siriSecureAccessoryAccessController_carPlayDataSource_deviceLockStateDataSource_notificationRegistry_administratorHandlerFactory_netManagerFactory_wifiManagerFactory_matterCapabilitiesFactory_xpcMessageTransportFactory_localCapabilitiesDataSource_notificationCenter_keychainStore_reportingSessionManager___block_invoke_2;
      v332[3] = &unk_24E775BF0;
      v322 = &v333;
      objc_copyWeak(&v333, &location);
      v162 = v332;
    }
    v163 = _Block_copy(v162);
    matterCapabilitiesFactory = v74->_matterCapabilitiesFactory;
    v74->_matterCapabilitiesFactory = v163;

    isWatch();
    v314[2]();
    v165 = objc_claimAutoreleasedReturnValue();
    homeLocationHandler = v74->_homeLocationHandler;
    v74->_homeLocationHandler = (HMDHomeLocationHandler *)v165;

    isWatch();
    v167 = objc_alloc_init(HMDHomeReprovisionHandler);
    homeReprovisionHandler = v74->_homeReprovisionHandler;
    v74->_homeReprovisionHandler = v167;

    objc_msgSend(MEMORY[0x24BDBCED8], "dictionary");
    v169 = objc_claimAutoreleasedReturnValue();
    newlyConfiguredAccessories = v74->_newlyConfiguredAccessories;
    v74->_newlyConfiguredAccessories = (NSMutableDictionary *)v169;

    objc_msgSend(MEMORY[0x24BDD1650], "mapTableWithStrongToStrongObjects");
    v171 = objc_claimAutoreleasedReturnValue();
    addPendingAccessories = v74->_addPendingAccessories;
    v74->_addPendingAccessories = (NSMapTable *)v171;

    objc_msgSend(MEMORY[0x24BDBCED8], "dictionary");
    v173 = objc_claimAutoreleasedReturnValue();
    addPendingAccessorySetupCodes = v74->_addPendingAccessorySetupCodes;
    v74->_addPendingAccessorySetupCodes = (NSMutableDictionary *)v173;

    objc_msgSend(MEMORY[0x24BDBCED8], "dictionary");
    v175 = objc_claimAutoreleasedReturnValue();
    addPendingAccessoryOnboardingSetupPayloadStrings = v74->_addPendingAccessoryOnboardingSetupPayloadStrings;
    v74->_addPendingAccessoryOnboardingSetupPayloadStrings = (NSMutableDictionary *)v175;

    objc_msgSend(MEMORY[0x24BDBCED8], "dictionary");
    v177 = objc_claimAutoreleasedReturnValue();
    addPendingAccessorySetupCodeHandlers = v74->_addPendingAccessorySetupCodeHandlers;
    v74->_addPendingAccessorySetupCodeHandlers = (NSMutableDictionary *)v177;

    v74->_anyBTLEAccessoryReachable = 0;
    v312[2](v312, v74);
    v179 = objc_claimAutoreleasedReturnValue();
    residentDeviceManager = v74->_residentDeviceManager;
    v74->_residentDeviceManager = (HMDResidentDeviceManager *)v179;

    -[HMDResidentDeviceManager setDelegate:](v74->_residentDeviceManager, "setDelegate:", v74);
    v331 = 0;
    objc_msgSend(MEMORY[0x24BE3F180], "futureWithPromise:", &v331);
    v181 = objc_claimAutoreleasedReturnValue();
    residentSyncClientDidSyncFuture = v74->_residentSyncClientDidSyncFuture;
    v74->_residentSyncClientDidSyncFuture = (HMFFuture *)v181;

    objc_storeStrong((id *)&v74->_residentSyncClientDidSyncPromise, v331);
    v313[2](v313, v74);
    v183 = objc_claimAutoreleasedReturnValue();
    administratorHandler = v74->_administratorHandler;
    v74->_administratorHandler = (HMDHomeAdministratorHandler *)v183;

    v185 = [HMDHomeMediaSystemHandler alloc];
    v186 = -[HMDHomeMediaSystemHandler initWithMediaSystems:](v185, "initWithMediaSystems:", MEMORY[0x24BDBD1A8]);
    mediaSystemController = v74->_mediaSystemController;
    v74->_mediaSystemController = (HMDHomeMediaSystemHandler *)v186;

    v74->_automaticSoftwareUpdateEnabled = 1;
    v74->_automaticThirdPartyAccessorySoftwareUpdateEnabled = 0;
    v74->_protectionMode = 0;
    v74->_networkRouterSupportDisableReason = 0;
    v74->_networkRouterSupport = -[HMDHome deriveNetworkRouterSupport:](v74, "deriveNetworkRouterSupport:", 0);
    v74->_mediaPeerToPeerEnabled = 0;
    v74->_soundCheckEnabled = 1;
    objc_storeStrong((id *)&v74->_notificationRegistry, a19);
    -[HMDNotificationRegistry configureWithHome:](v74->_notificationRegistry, "configureWithHome:", v74);
    if (_os_feature_enabled_impl())
    {
      if (objc_msgSend(*p_localCapabilitiesDataSource, "isResidentCapable"))
      {
        -[HMDHome createActionSetStateObserver](v74, "createActionSetStateObserver");
        v188 = objc_claimAutoreleasedReturnValue();
        actionSetStateObserver = v74->_actionSetStateObserver;
        v74->_actionSetStateObserver = (HMDActionSetStateObserver *)v188;

      }
      -[HMDHome createActionSetStateManager](v74, "createActionSetStateManager");
      v190 = objc_claimAutoreleasedReturnValue();
      actionSetStateSubscriptionManager = v74->_actionSetStateSubscriptionManager;
      v74->_actionSetStateSubscriptionManager = (HMDActionSetStateSubscriptionManager *)v190;

    }
    objc_msgSend(MEMORY[0x24BDBCEB8], "array");
    v192 = objc_claimAutoreleasedReturnValue();
    mediaSessions = v74->_mediaSessions;
    v74->_mediaSessions = (NSMutableArray *)v192;

    objc_msgSend(MEMORY[0x24BDBCEB8], "array");
    v194 = objc_claimAutoreleasedReturnValue();
    mediaSessionStates = v74->_mediaSessionStates;
    v74->_mediaSessionStates = (NSMutableArray *)v194;

    objc_msgSend(MEMORY[0x24BDD15C0], "weakObjectsHashTable");
    v196 = objc_claimAutoreleasedReturnValue();
    connectionsDiscoveringSymptomsForNearbyDevices = v74->_connectionsDiscoveringSymptomsForNearbyDevices;
    v74->_connectionsDiscoveringSymptomsForNearbyDevices = (NSHashTable *)v196;

    isWatch();
    if (v328 && objc_msgSend(*p_localCapabilitiesDataSource, "isResidentCapable"))
    {
      v198 = objc_alloc_init(HMDHomePresenceMonitor);
      presenceMonitor = v74->_presenceMonitor;
      v74->_presenceMonitor = v198;

      v200 = objc_alloc_init(HMDHomePeriodicReader);
      periodicReader = v74->_periodicReader;
      v74->_periodicReader = v200;

    }
    v202 = objc_alloc_init(HMDUserPresenceFeeder);
    presenceFeeder = v74->_presenceFeeder;
    v74->_presenceFeeder = v202;

    v204 = [HMDPredicateUtilities alloc];
    -[HMDHome name](v74, "name");
    v205 = (void *)objc_claimAutoreleasedReturnValue();
    v206 = -[HMDPredicateUtilities initWithHome:logIdentifier:](v204, "initWithHome:logIdentifier:", v74, v205);
    predicateUtility = v74->_predicateUtility;
    v74->_predicateUtility = (HMDPredicateUtilities *)v206;

    v208 = -[HMDMediaActionRouter initWithDataSource:]([HMDMediaActionRouter alloc], "initWithDataSource:", v74);
    mediaActionRouter = v74->_mediaActionRouter;
    v74->_mediaActionRouter = v208;

    v74->_multiUserEnabled = 1;
    v74->_hasAnyUserAcknowledgedCameraRecordingOnboarding = 0;
    v210 = [HMDAccessoryNetworkProtectionGroupRegistry alloc];
    -[HMDHome notificationCenter](v74, "notificationCenter");
    v211 = (void *)objc_claimAutoreleasedReturnValue();
    v212 = -[HMDAccessoryNetworkProtectionGroupRegistry initWithHome:notificationCenter:](v210, "initWithHome:notificationCenter:", v74, v211);
    networkProtectionGroupRegistry = v74->_networkProtectionGroupRegistry;
    v74->_networkProtectionGroupRegistry = (HMDAccessoryNetworkProtectionGroupRegistry *)v212;

    v214 = [HMDResidentReachabilityNotificationManager alloc];
    v215 = objc_alloc_init(HMDResidentReachabilityContext);
    v216 = -[HMDResidentReachabilityNotificationManager initWithResidentReachabilityContext:workQueue:](v214, "initWithResidentReachabilityContext:workQueue:", v215, v35->_workQueue);
    reachabilityNotificationManager = v74->_reachabilityNotificationManager;
    v74->_reachabilityNotificationManager = (HMDResidentReachabilityNotificationManager *)v216;

    v218 = -[HMDAccessoryReachabilityChangedLogEventManager initWithHome:]([HMDAccessoryReachabilityChangedLogEventManager alloc], "initWithHome:", v74);
    reachabilityChangedLogEventManager = v74->_reachabilityChangedLogEventManager;
    v74->_reachabilityChangedLogEventManager = v218;

    v220 = -[HMDHomeNaturalLightingCurveWriter initWithHome:]([HMDHomeNaturalLightingCurveWriter alloc], "initWithHome:", v74);
    naturalLightingCurveWriter = v74->_naturalLightingCurveWriter;
    v74->_naturalLightingCurveWriter = v220;

    if (isInternalBuild() && _os_feature_enabled_impl())
    {
      v222 = (void *)MEMORY[0x227676638]();
      v223 = v74;
      HMFGetOSLogHandle();
      v224 = (id)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v224, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v225 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543362;
        v339 = v225;
        _os_log_impl(&dword_2218F0000, v224, OS_LOG_TYPE_INFO, "%{public}@Initialized HomeIntelligenceActivityLogger", buf, 0xCu);

      }
      objc_autoreleasePoolPop(v222);
      v226 = -[HomeIntelligenceActivityLogger initWithHome:]([HomeIntelligenceActivityLogger alloc], "initWithHome:", v223);
      homeIntelligenceActivityLogger = v223->_homeIntelligenceActivityLogger;
      v223->_homeIntelligenceActivityLogger = v226;

    }
    v228 = [HMDHAPAccessoryConnectionCoordinator alloc];
    -[HMDHome notificationCenter](v74, "notificationCenter");
    v229 = (void *)objc_claimAutoreleasedReturnValue();
    v230 = -[HMDHAPAccessoryConnectionCoordinator initWithHome:notificationCenter:](v228, "initWithHome:notificationCenter:", v74, v229);
    accessoryConnectionCoordinator = v74->_accessoryConnectionCoordinator;
    v74->_accessoryConnectionCoordinator = (HMDHAPAccessoryConnectionCoordinator *)v230;

    v232 = -[HMDHAPAccessoryReaderWriter initWithHome:]([HMDHAPAccessoryReaderWriter alloc], "initWithHome:", v74);
    accessoryReaderWriter = v74->_accessoryReaderWriter;
    v74->_accessoryReaderWriter = v232;

    v234 = -[HMDHomePersonDataManager initWithHome:workQueue:]([HMDHomePersonDataManager alloc], "initWithHome:workQueue:", v74, v35->_workQueue);
    personDataManager = v74->_personDataManager;
    v74->_personDataManager = v234;

    v236 = -[HMDHomeWalletKeyManager initWithUUID:workQueue:]([HMDHomeWalletKeyManager alloc], "initWithUUID:workQueue:", v35->_uuid, v35->_workQueue);
    walletKeyManager = v74->_walletKeyManager;
    v74->_walletKeyManager = v236;

    v238 = (void *)MEMORY[0x227676638]();
    v239 = v74;
    HMFGetOSLogHandle();
    v240 = (id)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v240, OS_LOG_TYPE_DEFAULT))
    {
      HMFGetLogIdentifier();
      v241 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v339 = v241;
      _os_log_impl(&dword_2218F0000, v240, OS_LOG_TYPE_DEFAULT, "%{public}@Created wallet key manager", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v238);
    v242 = -[HMDHomeNFCReaderKeyManager initWithUUID:workQueue:]([HMDHomeNFCReaderKeyManager alloc], "initWithUUID:workQueue:", v35->_uuid, v35->_workQueue);
    nfcReaderKeyManager = v239->_nfcReaderKeyManager;
    v239->_nfcReaderKeyManager = v242;

    v244 = (void *)MEMORY[0x227676638]();
    v245 = v239;
    HMFGetOSLogHandle();
    v246 = (id)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v246, OS_LOG_TYPE_DEFAULT))
    {
      HMFGetLogIdentifier();
      v247 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v339 = v247;
      _os_log_impl(&dword_2218F0000, v246, OS_LOG_TYPE_DEFAULT, "%{public}@Created nfc reader key manager", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v244);
    v245->_shouldEncodeHasOnboardedForWalletKey = 1;
    v245->_shouldEncodeNFCReaderKey = 1;
    objc_msgSend(MEMORY[0x24BDBCED8], "dictionary");
    v248 = objc_claimAutoreleasedReturnValue();
    labelsByAccessCode = v245->_labelsByAccessCode;
    v245->_labelsByAccessCode = (NSMutableDictionary *)v248;

    objc_msgSend(MEMORY[0x24BDBCED8], "dictionary");
    v250 = objc_claimAutoreleasedReturnValue();
    labelIdentifiersByAccessCode = v245->_labelIdentifiersByAccessCode;
    v245->_labelIdentifiersByAccessCode = (NSMutableDictionary *)v250;

    objc_msgSend(MEMORY[0x24BDBCED8], "dictionary");
    v252 = objc_claimAutoreleasedReturnValue();
    removedUserInfoByAccessCode = v245->_removedUserInfoByAccessCode;
    v245->_removedUserInfoByAccessCode = (NSMutableDictionary *)v252;

    v254 = [HMDAccessCodeManagerContext alloc];
    -[HMDHome workQueue](v245, "workQueue");
    v255 = (void *)objc_claimAutoreleasedReturnValue();
    v256 = -[HMDAccessCodeManagerContext initWithHome:workQueue:](v254, "initWithHome:workQueue:", v245, v255);

    v257 = -[HMDAccessCodeManager initWithContext:]([HMDAccessCodeManager alloc], "initWithContext:", v256);
    accessCodeManager = v245->_accessCodeManager;
    v245->_accessCodeManager = v257;

    v259 = -[HMDHomeLockNotificationManager initWithUUID:workQueue:]([HMDHomeLockNotificationManager alloc], "initWithUUID:workQueue:", v35->_uuid, v35->_workQueue);
    lockNotificationManager = v245->_lockNotificationManager;
    v245->_lockNotificationManager = v259;

    v261 = -[HMDCameraAnalysisStatePublisher initWithHome:]([HMDCameraAnalysisStatePublisher alloc], "initWithHome:", v245);
    analysisStatePublisher = v245->_analysisStatePublisher;
    v245->_analysisStatePublisher = v261;

    if (objc_msgSend(*p_localCapabilitiesDataSource, "isResidentCapable"))
    {
      v263 = -[HMDHomeRemoteEventAccessController initWithDataSource:]([HMDHomeRemoteEventAccessController alloc], "initWithDataSource:", v245);
      homeRemoteEventAccessController = v245->_homeRemoteEventAccessController;
      v245->_homeRemoteEventAccessController = v263;

    }
    v265 = objc_alloc_init(HMDHomeAudioAnalysisStereoPairController);
    audioAnalysisStereoPairController = v245->_audioAnalysisStereoPairController;
    v245->_audioAnalysisStereoPairController = v265;

    v267 = (void *)MEMORY[0x227676638]();
    v268 = v245;
    HMFGetOSLogHandle();
    v269 = (id)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v269, OS_LOG_TYPE_DEFAULT))
    {
      HMFGetLogIdentifier();
      v270 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v339 = v270;
      _os_log_impl(&dword_2218F0000, v269, OS_LOG_TYPE_DEFAULT, "%{public}@Creating setup metric dispatchers for media system and home theater", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v267);
    v271 = -[HMDMediaGroupSetupMetricDispatcher initWithDataSource:logEventSubmitter:]([HMDMediaGroupSetupMetricDispatcher alloc], "initWithDataSource:logEventSubmitter:", v268, v327);
    v272 = v268[211];
    v268[211] = v271;

    v273 = -[HMDMediaGroupSetupMetricDispatcher initWithDataSource:logEventSubmitter:]([HMDMediaGroupSetupMetricDispatcher alloc], "initWithDataSource:logEventSubmitter:", v268, v327);
    v274 = v268[212];
    v268[212] = v273;

    v275 = objc_alloc_init(HMDCHIPHomeStorage);
    v276 = v268[203];
    v268[203] = v275;

    if (isFeatureMatteriPhoneOnlyPairingControlEnabled())
    {
      objc_msgSend(MEMORY[0x24BDBCEB8], "array");
      v277 = objc_claimAutoreleasedReturnValue();
      v278 = v268[137];
      v268[137] = (id)v277;

      v279 = -[HMDCHIPControllerPrivateStorage initWithHome:]([HMDCHIPControllerPrivateStorage alloc], "initWithHome:", v268);
      v280 = v268[204];
      v268[204] = v279;

      v281 = objc_alloc(MEMORY[0x24BE4EF60]);
      objc_msgSend(v268, "workQueue");
      v282 = (void *)objc_claimAutoreleasedReturnValue();
      v283 = objc_msgSend(v281, "initWithDelegate:queue:", v268, v282);
      v284 = v268[205];
      v268[205] = (id)v283;

      objc_msgSend(v268, "homeManager");
      v285 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v285, "accessoryBrowser");
      v286 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v286, "chipAccessoryServerBrowser");
      v287 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v287, "storage");
      v288 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v268[205], "setStorage:", v288);

      LODWORD(v286) = objc_msgSend(v328, "isCurrentUser");
      objc_msgSend(v268[205], "accessControl");
      v289 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v289, "setCurrentUserPrivilege:", v286);

      objc_msgSend(v268[205], "accessControl");
      v290 = (void *)objc_claimAutoreleasedReturnValue();
      LODWORD(v286) = objc_msgSend(v290, "currentUserPrivilege") == 0;

      if ((_DWORD)v286)
      {
        objc_initWeak((id *)buf, v268);
        v329[0] = MEMORY[0x24BDAC760];
        v329[1] = 3221225472;
        v329[2] = __521__HMDHome_initWithName_uuid_defaultRoomUUID_owner_homeManager_presenceAuth_metricsDispatcherFactory_logEventSubmitter_dailyScheduler_currentUserFactory_residentDeviceManagerFactory_locationHandlerFactory_hapMetadata_siriSecureAccessoryAccessController_carPlayDataSource_deviceLockStateDataSource_notificationRegistry_administratorHandlerFactory_netManagerFactory_wifiManagerFactory_matterCapabilitiesFactory_xpcMessageTransportFactory_localCapabilitiesDataSource_notificationCenter_keychainStore_reportingSessionManager___block_invoke_489;
        v329[3] = &unk_24E775C18;
        objc_copyWeak(&v330, (id *)buf);
        objc_msgSend(v268[205], "accessControl");
        v291 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v291, "setPrivilegeGetter:", v329);

        objc_destroyWeak(&v330);
        objc_destroyWeak((id *)buf);
      }
    }
    v268[221] = 0;
    v268[222] = 0;
    v292 = objc_alloc_init(HMDModernMessagingHandler);
    v293 = v268[129];
    v268[129] = v292;

    if (!v324)
      objc_destroyWeak(v322);
    objc_destroyWeak(&v335);
    objc_destroyWeak(&location);

  }
  return v35;
}

- (void)unconfigure
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  id v10;

  -[HMDHome _deregisterStateHandler](self, "_deregisterStateHandler");
  -[HMDHome notificationCenter](self, "notificationCenter");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "removeObserver:", self);

  -[HMDHome msgDispatcher](self, "msgDispatcher");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "deregisterReceiver:", self);

  -[HMDHome mediaGroupsAggregateConsumer](self, "mediaGroupsAggregateConsumer");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "unconfigure");

  -[HMDHome accessCodeManager](self, "accessCodeManager");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "unconfigure");

  -[HMDHome nfcReaderKeyManager](self, "nfcReaderKeyManager");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "unconfigure");

  -[HMDHome walletKeyManager](self, "walletKeyManager");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "unconfigure");

  objc_msgSend(MEMORY[0x24BDD16D0], "defaultCenter");
  v10 = (id)objc_claimAutoreleasedReturnValue();
  -[HMDHome backingStore](self, "backingStore");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "removeObserver:", v9);

}

- (void)dealloc
{
  objc_super v3;

  -[HMDHome unconfigure](self, "unconfigure");
  v3.receiver = self;
  v3.super_class = (Class)HMDHome;
  -[HMDHome dealloc](&v3, sel_dealloc);
}

- (id)shortDescription
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  if ((isInternalBuild() & 1) != 0)
  {
    v3 = (void *)MEMORY[0x24BDD17C8];
    -[HMDHome name](self, "name");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHome uuid](self, "uuid");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "stringWithFormat:", CFSTR("%@/%@"), v4, v5);
    v6 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    -[HMDHome uuid](self, "uuid");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "UUIDString");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
  }

  return v6;
}

- (id)descriptionWithPointer:(BOOL)a3
{
  _BOOL4 v3;
  void *v5;
  void *v6;
  __CFString *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  v3 = a3;
  v5 = (void *)MEMORY[0x24BDD17C8];
  objc_msgSend((id)objc_opt_class(), "shortDescription");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  if (v3)
  {
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR(" %p"), self);
    v7 = (__CFString *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v7 = &stru_24E79DB48;
  }
  -[HMDHome uuid](self, "uuid");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "UUIDString");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHome spiClientIdentifier](self, "spiClientIdentifier");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "UUIDString");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHome name](self, "name");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "stringWithFormat:", CFSTR("<%@%@, ID = %@, spiID = %@, NM = %@>"), v6, v7, v9, v11, v12);
  v13 = (void *)objc_claimAutoreleasedReturnValue();

  if (v3)
  return v13;
}

- (NSString)debugDescription
{
  return (NSString *)-[HMDHome descriptionWithPointer:](self, "descriptionWithPointer:", 1);
}

- (NSString)description
{
  return (NSString *)-[HMDHome descriptionWithPointer:](self, "descriptionWithPointer:", 0);
}

- (id)dumpState
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  void *v12;
  void *v13;
  void *v14;
  __CFString *v15;
  HMDHome *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  unint64_t v21;
  const __CFString *v22;
  void *v23;
  void *v24;
  void *v25;
  uint64_t v26;
  void *v27;
  void *v28;
  HMDHome *v29;
  void *v30;
  void *v31;
  void *v32;
  const __CFString *v33;
  uint64_t v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  id v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t i;
  void *v46;
  void *v47;
  void *v48;
  void *v49;
  id v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t j;
  void *v55;
  void *v56;
  void *v57;
  void *v58;
  id v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t k;
  void *v64;
  void *v65;
  void *v66;
  void *v67;
  void *v68;
  void *v69;
  id v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t m;
  void *v75;
  void *v76;
  id v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t n;
  void *v82;
  void *v83;
  void *v84;
  void *v85;
  id v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t ii;
  void *v91;
  void *v92;
  void *v93;
  void *v94;
  id v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t jj;
  void *v100;
  void *v101;
  void *v102;
  void *v103;
  void *v104;
  void *v105;
  void *v106;
  void *v107;
  void *v108;
  void *v109;
  void *v110;
  void *v111;
  void *v112;
  void *v113;
  void *v114;
  void *v115;
  void *v116;
  void *v117;
  void *v118;
  void *v119;
  void *v120;
  void *v121;
  void *v122;
  void *v123;
  void *v124;
  void *v125;
  void *v126;
  void *v127;
  void *v128;
  void *v129;
  void *v130;
  void *v131;
  void *v132;
  void *v133;
  void *v134;
  void *v135;
  void *v136;
  void *v137;
  void *v138;
  void *v139;
  void *v141;
  void *v142;
  void *v143;
  void *v144;
  void *v145;
  void *v146;
  void *v147;
  void *v148;
  void *v149;
  void *v150;
  void *v151;
  void *v152;
  void *v153;
  void *v154;
  void *v155;
  void *v156;
  HMDHome *v157;
  __int128 v158;
  __int128 v159;
  __int128 v160;
  __int128 v161;
  __int128 v162;
  __int128 v163;
  __int128 v164;
  __int128 v165;
  __int128 v166;
  __int128 v167;
  __int128 v168;
  __int128 v169;
  __int128 v170;
  __int128 v171;
  __int128 v172;
  __int128 v173;
  __int128 v174;
  __int128 v175;
  __int128 v176;
  __int128 v177;
  __int128 v178;
  __int128 v179;
  __int128 v180;
  __int128 v181;
  __int128 v182;
  __int128 v183;
  __int128 v184;
  __int128 v185;
  _QWORD v186[3];
  _QWORD v187[3];
  _QWORD v188[3];
  _QWORD v189[3];
  _BYTE v190[128];
  _BYTE v191[128];
  _BYTE v192[128];
  _BYTE v193[128];
  _BYTE v194[128];
  _BYTE v195[128];
  _BYTE v196[128];
  uint64_t v197;

  v197 = *MEMORY[0x24BDAC8D0];
  objc_msgSend(MEMORY[0x24BDBCED8], "dictionaryWithCapacity:", 12);
  v155 = (void *)objc_claimAutoreleasedReturnValue();
  v149 = (void *)MEMORY[0x24BDD17C8];
  -[HMDHome name](self, "name");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHome uuid](self, "uuid");
  v156 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v156, "UUIDString");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHome spiClientIdentifier](self, "spiClientIdentifier");
  v152 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v152, "UUIDString");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHome zoneID](self, "zoneID");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "UUIDString");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHome isMultiUserEnabled](self, "isMultiUserEnabled");
  HMFBooleanToString();
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHome hasAnyUserAcknowledgedCameraRecordingOnboarding](self, "hasAnyUserAcknowledgedCameraRecordingOnboarding");
  HMFBooleanToString();
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHome urlString](self, "urlString");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v149, "stringWithFormat:", CFSTR("name: %@, uuid: %@, spiClientIdentifier: %@, zoneID: %@, multiUserEnabled: %@, acknowledgedCameraOnboarding: %@, assistantIdentifier: %@"), v3, v4, v5, v7, v8, v9, v10);
  v11 = objc_claimAutoreleasedReturnValue();

  v144 = (void *)v11;
  objc_msgSend(v155, "setObject:forKeyedSubscript:", v11, *MEMORY[0x24BE3EB68]);
  -[HMDHome appData](self, "appData");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v12, "dumpState");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v155, "setObject:forKeyedSubscript:", v13, *MEMORY[0x24BE3EA58]);

  v150 = (void *)MEMORY[0x24BDD17C8];
  -[HMDHome homeLocationHandler](self, "homeLocationHandler");
  v153 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v153, "location");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  if (v14)
  {
    -[HMDHome homeLocationHandler](self, "homeLocationHandler");
    v147 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v147, "location");
    v15 = (__CFString *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v15 = CFSTR("Unknown");
  }
  -[HMDHome homeLocationHandler](self, "homeLocationHandler");
  v16 = self;
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v17, "regionStateAtHome");
  HMDRegionStateString();
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHome homeLocationHandler](v16, "homeLocationHandler");
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v19, "regionStateNearbyHome");
  HMDRegionStateString();
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  v157 = v16;
  v21 = -[HMDHome atHomeLevel](v16, "atHomeLevel");
  if (v21 > 3)
    v22 = CFSTR("HMDAtHomeLevelNotAtHome");
  else
    v22 = off_24E777248[v21];
  -[HMDHome homeLocation](v16, "homeLocation");
  HMStringFromHomeLocation();
  v23 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHome homeLocationHandler](v157, "homeLocationHandler");
  v24 = (void *)objc_claimAutoreleasedReturnValue();
  HMDHomeLocationSourceToString(objc_msgSend(v24, "locationSource"));
  v25 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v150, "stringWithFormat:", CFSTR("Location: %@, At Home Region State: %@, Nearby Home Region State: %@, At Home Level: %@, State: %@, Source: %@"), v15, v18, v20, v22, v23, v25);
  v26 = objc_claimAutoreleasedReturnValue();

  if (v14)
  {

  }
  v27 = v155;
  v143 = (void *)v26;
  objc_msgSend(v155, "setObject:forKeyedSubscript:", v26, *MEMORY[0x24BE3EAF8]);
  v28 = (void *)MEMORY[0x24BDD17C8];
  v29 = v157;
  -[HMDHome minimumMediaUserPrivilege](v157, "minimumMediaUserPrivilege");
  HMUserPrivilegeToString();
  v30 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHome isMediaPeerToPeerEnabled](v157, "isMediaPeerToPeerEnabled");
  HMFBooleanToString();
  v31 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHome mediaPassword](v157, "mediaPassword");
  v32 = (void *)objc_claimAutoreleasedReturnValue();
  v33 = CFSTR("<set>");
  if (!v32)
    v33 = CFSTR("<null>");
  objc_msgSend(v28, "stringWithFormat:", CFSTR("Minimum Media User Privilege: %@, Media Peer to Peer Enabled: %@, has Media Password: %@"), v30, v31, v33);
  v34 = objc_claimAutoreleasedReturnValue();

  v142 = (void *)v34;
  objc_msgSend(v155, "setObject:forKeyedSubscript:", v34, CFSTR("User Privilege"));
  -[HMDHome rooms](v157, "rooms");
  v35 = (void *)objc_claimAutoreleasedReturnValue();
  v36 = (void *)objc_msgSend(v35, "copy");

  objc_msgSend(MEMORY[0x24BDBCEB8], "arrayWithCapacity:", objc_msgSend(v36, "count") + 1);
  v37 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHome roomForEntireHome](v157, "roomForEntireHome");
  v38 = (void *)objc_claimAutoreleasedReturnValue();

  if (v38)
  {
    -[HMDHome roomForEntireHome](v157, "roomForEntireHome");
    v39 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v39, "dumpState");
    v40 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v37, "addObject:", v40);

  }
  v184 = 0u;
  v185 = 0u;
  v182 = 0u;
  v183 = 0u;
  v41 = v36;
  v42 = objc_msgSend(v41, "countByEnumeratingWithState:objects:count:", &v182, v196, 16);
  if (v42)
  {
    v43 = v42;
    v44 = *(_QWORD *)v183;
    do
    {
      for (i = 0; i != v43; ++i)
      {
        if (*(_QWORD *)v183 != v44)
          objc_enumerationMutation(v41);
        objc_msgSend(*(id *)(*((_QWORD *)&v182 + 1) + 8 * i), "dumpState");
        v46 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v37, "addObject:", v46);

      }
      v43 = objc_msgSend(v41, "countByEnumeratingWithState:objects:count:", &v182, v196, 16);
    }
    while (v43);
  }

  if (objc_msgSend(v37, "count"))
    objc_msgSend(v155, "setObject:forKeyedSubscript:", v37, *MEMORY[0x24BE3EB38]);
  -[HMDHome zones](v157, "zones");
  v47 = (void *)objc_claimAutoreleasedReturnValue();
  v48 = (void *)objc_msgSend(v47, "copy");

  v154 = v48;
  if (objc_msgSend(v48, "count"))
  {
    objc_msgSend(MEMORY[0x24BDBCEB8], "arrayWithCapacity:", objc_msgSend(v48, "count"));
    v49 = (void *)objc_claimAutoreleasedReturnValue();
    v178 = 0u;
    v179 = 0u;
    v180 = 0u;
    v181 = 0u;
    v50 = v154;
    v51 = objc_msgSend(v50, "countByEnumeratingWithState:objects:count:", &v178, v195, 16);
    if (v51)
    {
      v52 = v51;
      v53 = *(_QWORD *)v179;
      do
      {
        for (j = 0; j != v52; ++j)
        {
          if (*(_QWORD *)v179 != v53)
            objc_enumerationMutation(v50);
          objc_msgSend(*(id *)(*((_QWORD *)&v178 + 1) + 8 * j), "dumpState");
          v55 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v49, "addObject:", v55);

        }
        v52 = objc_msgSend(v50, "countByEnumeratingWithState:objects:count:", &v178, v195, 16);
      }
      while (v52);
    }

    objc_msgSend(v155, "setObject:forKeyedSubscript:", v49, *MEMORY[0x24BE3EB90]);
    v29 = v157;
  }
  -[HMDHome accessories](v29, "accessories");
  v56 = (void *)objc_claimAutoreleasedReturnValue();
  v57 = (void *)objc_msgSend(v56, "copy");

  v151 = v57;
  if (objc_msgSend(v57, "count"))
  {
    objc_msgSend(MEMORY[0x24BDBCEB8], "arrayWithCapacity:", objc_msgSend(v57, "count"));
    v58 = (void *)objc_claimAutoreleasedReturnValue();
    v174 = 0u;
    v175 = 0u;
    v176 = 0u;
    v177 = 0u;
    v59 = v151;
    v60 = objc_msgSend(v59, "countByEnumeratingWithState:objects:count:", &v174, v194, 16);
    if (v60)
    {
      v61 = v60;
      v62 = *(_QWORD *)v175;
      do
      {
        for (k = 0; k != v61; ++k)
        {
          if (*(_QWORD *)v175 != v62)
            objc_enumerationMutation(v59);
          v64 = *(void **)(*((_QWORD *)&v174 + 1) + 8 * k);
          v65 = (void *)MEMORY[0x227676638]();
          objc_msgSend(v64, "dumpState");
          v66 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v58, "addObject:", v66);

          objc_autoreleasePoolPop(v65);
        }
        v61 = objc_msgSend(v59, "countByEnumeratingWithState:objects:count:", &v174, v194, 16);
      }
      while (v61);
    }

    v27 = v155;
    objc_msgSend(v155, "setObject:forKeyedSubscript:", v58, *MEMORY[0x24BE3EA30]);

    v29 = v157;
  }
  -[HMDHome serviceGroups](v29, "serviceGroups");
  v67 = (void *)objc_claimAutoreleasedReturnValue();
  v68 = (void *)objc_msgSend(v67, "copy");

  v148 = v68;
  if (objc_msgSend(v68, "count"))
  {
    objc_msgSend(MEMORY[0x24BDBCEB8], "arrayWithCapacity:", objc_msgSend(v68, "count"));
    v69 = (void *)objc_claimAutoreleasedReturnValue();
    v170 = 0u;
    v171 = 0u;
    v172 = 0u;
    v173 = 0u;
    v70 = v148;
    v71 = objc_msgSend(v70, "countByEnumeratingWithState:objects:count:", &v170, v193, 16);
    if (v71)
    {
      v72 = v71;
      v73 = *(_QWORD *)v171;
      do
      {
        for (m = 0; m != v72; ++m)
        {
          if (*(_QWORD *)v171 != v73)
            objc_enumerationMutation(v70);
          objc_msgSend(*(id *)(*((_QWORD *)&v170 + 1) + 8 * m), "dumpState");
          v75 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v69, "addObject:", v75);

        }
        v72 = objc_msgSend(v70, "countByEnumeratingWithState:objects:count:", &v170, v193, 16);
      }
      while (v72);
    }

    objc_msgSend(v27, "setObject:forKeyedSubscript:", v69, *MEMORY[0x24BE3EB40]);
    v29 = v157;
  }
  -[HMDHome triggers](v29, "triggers");
  v146 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v146, "count"))
  {
    objc_msgSend(MEMORY[0x24BDBCEB8], "arrayWithCapacity:", objc_msgSend(v146, "count"));
    v76 = (void *)objc_claimAutoreleasedReturnValue();
    v166 = 0u;
    v167 = 0u;
    v168 = 0u;
    v169 = 0u;
    v77 = v146;
    v78 = objc_msgSend(v77, "countByEnumeratingWithState:objects:count:", &v166, v192, 16);
    if (v78)
    {
      v79 = v78;
      v80 = *(_QWORD *)v167;
      do
      {
        for (n = 0; n != v79; ++n)
        {
          if (*(_QWORD *)v167 != v80)
            objc_enumerationMutation(v77);
          objc_msgSend(*(id *)(*((_QWORD *)&v166 + 1) + 8 * n), "dumpState");
          v82 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v76, "addObject:", v82);

        }
        v79 = objc_msgSend(v77, "countByEnumeratingWithState:objects:count:", &v166, v192, 16);
      }
      while (v79);
    }

    objc_msgSend(v27, "setObject:forKeyedSubscript:", v76, *MEMORY[0x24BE3EB80]);
    v29 = v157;
  }
  -[HMDHome currentUser](v29, "currentUser");
  v83 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v83, "dumpState");
  v84 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v27, "setObject:forKeyedSubscript:", v84, *MEMORY[0x24BE3EA98]);

  -[HMDHome usersIncludingPendingUsers:](v29, "usersIncludingPendingUsers:", 1);
  v145 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v145, "count"))
  {
    objc_msgSend(MEMORY[0x24BDBCEB8], "arrayWithCapacity:", objc_msgSend(v145, "count"));
    v85 = (void *)objc_claimAutoreleasedReturnValue();
    v162 = 0u;
    v163 = 0u;
    v164 = 0u;
    v165 = 0u;
    v86 = v145;
    v87 = objc_msgSend(v86, "countByEnumeratingWithState:objects:count:", &v162, v191, 16);
    if (v87)
    {
      v88 = v87;
      v89 = *(_QWORD *)v163;
      do
      {
        for (ii = 0; ii != v88; ++ii)
        {
          if (*(_QWORD *)v163 != v89)
            objc_enumerationMutation(v86);
          objc_msgSend(*(id *)(*((_QWORD *)&v162 + 1) + 8 * ii), "dumpState");
          v91 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v85, "addObject:", v91);

        }
        v88 = objc_msgSend(v86, "countByEnumeratingWithState:objects:count:", &v162, v191, 16);
      }
      while (v88);
    }

    objc_msgSend(v27, "setObject:forKeyedSubscript:", v85, *MEMORY[0x24BE3EB88]);
    v29 = v157;
  }
  -[HMDHome removedUsers](v29, "removedUsers");
  v92 = (void *)objc_claimAutoreleasedReturnValue();
  v93 = (void *)objc_msgSend(v92, "copy");

  if (objc_msgSend(v93, "count"))
  {
    objc_msgSend(MEMORY[0x24BDBCEB8], "arrayWithCapacity:", objc_msgSend(v93, "count"));
    v94 = (void *)objc_claimAutoreleasedReturnValue();
    v158 = 0u;
    v159 = 0u;
    v160 = 0u;
    v161 = 0u;
    v95 = v93;
    v96 = objc_msgSend(v95, "countByEnumeratingWithState:objects:count:", &v158, v190, 16);
    if (v96)
    {
      v97 = v96;
      v98 = *(_QWORD *)v159;
      do
      {
        for (jj = 0; jj != v97; ++jj)
        {
          if (*(_QWORD *)v159 != v98)
            objc_enumerationMutation(v95);
          objc_msgSend(*(id *)(*((_QWORD *)&v158 + 1) + 8 * jj), "user");
          v100 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v100, "dumpState");
          v101 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v94, "addObject:", v101);

        }
        v97 = objc_msgSend(v95, "countByEnumeratingWithState:objects:count:", &v158, v190, 16);
      }
      while (v97);
    }

    v27 = v155;
    objc_msgSend(v155, "setObject:forKeyedSubscript:", v94, *MEMORY[0x24BE3EB28]);

    v29 = v157;
  }
  v141 = v93;
  -[HMDHome residentDeviceManager](v29, "residentDeviceManager");
  v102 = (void *)objc_claimAutoreleasedReturnValue();

  if (v102)
  {
    -[HMDHome residentDeviceManager](v29, "residentDeviceManager");
    v103 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v103, "dumpState");
    v104 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v27, "setObject:forKeyedSubscript:", v104, *MEMORY[0x24BE3EB30]);

  }
  v105 = (void *)MEMORY[0x24BDBCED8];
  v188[0] = CFSTR("Registered");
  -[HMDHome notificationRegistrations](v29, "notificationRegistrations");
  v106 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v106, "allObjects");
  v107 = (void *)objc_claimAutoreleasedReturnValue();
  v189[0] = v107;
  v188[1] = CFSTR("Apple Media Registered");
  -[HMDHome notificationRegistrationsForAppleMediaAccessories](v29, "notificationRegistrationsForAppleMediaAccessories");
  v108 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v108, "allObjects");
  v109 = (void *)objc_claimAutoreleasedReturnValue();
  v189[1] = v109;
  v188[2] = CFSTR("Deregistered");
  -[HMDHome notificationDeregistrations](v29, "notificationDeregistrations");
  v110 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v110, "allObjects");
  v111 = (void *)objc_claimAutoreleasedReturnValue();
  v189[2] = v111;
  objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v189, v188, 3);
  v112 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v105, "dictionaryWithDictionary:", v112);
  v113 = (void *)objc_claimAutoreleasedReturnValue();

  -[HMDHome notificationsUpdatedTime](v157, "notificationsUpdatedTime");
  v114 = (void *)objc_claimAutoreleasedReturnValue();

  if (v114)
  {
    -[HMDHome notificationsUpdatedTime](v157, "notificationsUpdatedTime");
    v115 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v115, "shortDescription");
    v116 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v113, "setObject:forKey:", v116, CFSTR("UpdateTime"));

  }
  objc_msgSend(v155, "setObject:forKeyedSubscript:", v113, *MEMORY[0x24BE3EAD0]);
  -[HMDHome pendingResponses](v157, "pendingResponses");
  v117 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v117, "description");
  v118 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v155, "setObject:forKeyedSubscript:", v118, *MEMORY[0x24BE3EB10]);

  -[HMDHome sharedHomeUpdateHandler](v157, "sharedHomeUpdateHandler");
  v119 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v119, "dumpState");
  v120 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v155, "setObject:forKeyedSubscript:", v120, *MEMORY[0x24BE3EB58]);

  -[HMDHome sharedHomeSourceVersion](v157, "sharedHomeSourceVersion");
  v121 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v121, "versionString");
  v122 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v155, "setObject:forKeyedSubscript:", v122, *MEMORY[0x24BE3EB50]);

  v123 = (void *)MEMORY[0x24BDD17C8];
  -[HMDHome unfilteredThreadNetworkID](v157, "unfilteredThreadNetworkID");
  v124 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v123, "stringWithFormat:", CFSTR("threadNetworkID=%@"), v124);
  v125 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v155, "setObject:forKeyedSubscript:", v125, CFSTR("ThreadNetwork"));

  -[HMDHome personManagerSettings](v157, "personManagerSettings");
  v126 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v126, "description");
  v127 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v155, "setObject:forKeyedSubscript:", v127, CFSTR("Person Manager Settings"));

  -[HMDHome labelsByAccessCode](v157, "labelsByAccessCode");
  v128 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v128, "description");
  v129 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v155, "setObject:forKeyedSubscript:", v129, CFSTR("Simple Label Access Codes"));

  -[HMDHome labelIdentifiersByAccessCode](v157, "labelIdentifiersByAccessCode");
  v130 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v130, "description");
  v131 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v155, "setObject:forKeyedSubscript:", v131, CFSTR("Simple Label Access Code Identifiers"));

  -[HMDHome chipStorage](v157, "chipStorage");
  v132 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v132, "debugDictionaryRepresentation");
  v133 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v155, "setObject:forKeyedSubscript:", v133, CFSTR("CHIP Home Storage"));

  -[HMDHome controllerPrivateStorage](v157, "controllerPrivateStorage");
  v134 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v134, "debugDictionaryRepresentation");
  v135 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v155, "setObject:forKeyedSubscript:", v135, CFSTR("CHIP Controller Private Storage"));

  v186[0] = CFSTR("HomeSettingEnabled");
  -[HMDHome isEventLogHomeSettingEnabled](v157, "isEventLogHomeSettingEnabled");
  HMFBooleanToString();
  v136 = (void *)objc_claimAutoreleasedReturnValue();
  v187[0] = v136;
  v186[1] = CFSTR("DidOnboard");
  -[HMDHome didOnboardEventLog](v157, "didOnboardEventLog");
  HMFBooleanToString();
  v137 = (void *)objc_claimAutoreleasedReturnValue();
  v187[1] = v137;
  v186[2] = CFSTR("Duration");
  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("%lu"), -[HMDHome eventLogDuration](v157, "eventLogDuration"));
  v138 = (void *)objc_claimAutoreleasedReturnValue();
  v187[2] = v138;
  objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v187, v186, 3);
  v139 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v155, "setObject:forKeyedSubscript:", v139, CFSTR("Activity History"));

  return v155;
}

- (NSString)name
{
  NSString *v3;

  os_unfair_recursive_lock_lock_with_options();
  v3 = self->_name;
  os_unfair_recursive_lock_unlock();
  return v3;
}

- (void)setName:(id)a3
{
  NSString *v4;
  NSString *name;
  id v6;

  v6 = a3;
  os_unfair_recursive_lock_lock_with_options();
  objc_msgSend(v6, "hm_truncatedNameString");
  v4 = (NSString *)objc_claimAutoreleasedReturnValue();
  name = self->_name;
  self->_name = v4;

  os_unfair_recursive_lock_unlock();
}

- (BOOL)isAnyBTLEAccessoryReachable
{
  os_unfair_recursive_lock_lock_with_options();
  LOBYTE(self) = self->_anyBTLEAccessoryReachable;
  os_unfair_recursive_lock_unlock();
  return (char)self;
}

- (void)setAnyBTLEAccessoryReachable:(BOOL)a3
{
  os_unfair_recursive_lock_lock_with_options();
  self->_anyBTLEAccessoryReachable = a3;
  os_unfair_recursive_lock_unlock();
}

- (id)allNewlyConfiguredAccessories
{
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _BYTE v14[128];
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  os_unfair_recursive_lock_lock_with_options();
  objc_msgSend(MEMORY[0x24BDBCEB8], "array");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v12 = 0u;
  v13 = 0u;
  v10 = 0u;
  v11 = 0u;
  -[NSMutableDictionary allValues](self->_newlyConfiguredAccessories, "allValues", 0);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
  if (v5)
  {
    v6 = *(_QWORD *)v11;
    do
    {
      v7 = 0;
      do
      {
        if (*(_QWORD *)v11 != v6)
          objc_enumerationMutation(v4);
        objc_msgSend(v3, "addObjectsFromArray:", *(_QWORD *)(*((_QWORD *)&v10 + 1) + 8 * v7++));
      }
      while (v5 != v7);
      v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
    }
    while (v5);
  }

  v8 = (void *)objc_msgSend(v3, "copy");
  os_unfair_recursive_lock_unlock();
  return v8;
}

- (void)addNewlyConfiguredAccessories:(id)a3 addSessionIdentifier:(id)a4
{
  id v6;
  void *v7;
  id v8;

  v8 = a3;
  v6 = a4;
  os_unfair_recursive_lock_lock_with_options();
  -[NSMutableDictionary objectForKeyedSubscript:](self->_newlyConfiguredAccessories, "objectForKeyedSubscript:", v6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v7)
  {
    objc_msgSend(MEMORY[0x24BDBCEB8], "arrayWithCapacity:", 1);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    -[NSMutableDictionary setObject:forKeyedSubscript:](self->_newlyConfiguredAccessories, "setObject:forKeyedSubscript:", v7, v6);
  }
  objc_msgSend(v7, "addObjectsFromArray:", v8);

  os_unfair_recursive_lock_unlock();
}

- (NSArray)triggers
{
  void *v3;

  os_unfair_recursive_lock_lock_with_options();
  v3 = (void *)-[NSMutableArray copy](self->_currentTriggers, "copy");
  os_unfair_recursive_lock_unlock();
  return (NSArray *)v3;
}

- (void)addToCurrentTriggers:(id)a3
{
  id v4;

  v4 = a3;
  os_unfair_recursive_lock_lock_with_options();
  if ((-[NSMutableArray containsObject:](self->_currentTriggers, "containsObject:", v4) & 1) == 0)
    -[NSMutableArray addObject:](self->_currentTriggers, "addObject:", v4);
  os_unfair_recursive_lock_unlock();

}

- (void)removeFromCurrentTriggers:(id)a3
{
  id v4;

  v4 = a3;
  os_unfair_recursive_lock_lock_with_options();
  if (-[NSMutableArray containsObject:](self->_currentTriggers, "containsObject:", v4))
    -[NSMutableArray removeObject:](self->_currentTriggers, "removeObject:", v4);
  os_unfair_recursive_lock_unlock();

}

- (NSHashTable)removeAccessoryInProgressForHMDAccessories
{
  void *v3;

  os_unfair_recursive_lock_lock_with_options();
  v3 = (void *)-[NSHashTable copy](self->_removeAccessoryInProgressForHMDAccessories, "copy");
  os_unfair_recursive_lock_unlock();
  return (NSHashTable *)v3;
}

- (NSMutableDictionary)addPendingAccessorySetupCodeHandlers
{
  void *v3;

  os_unfair_recursive_lock_lock_with_options();
  v3 = (void *)-[NSMutableDictionary copy](self->_addPendingAccessorySetupCodeHandlers, "copy");
  os_unfair_recursive_lock_unlock();
  return (NSMutableDictionary *)v3;
}

- (NSMapTable)addPendingAccessories
{
  void *v3;

  os_unfair_recursive_lock_lock_with_options();
  v3 = (void *)-[NSMapTable copy](self->_addPendingAccessories, "copy");
  os_unfair_recursive_lock_unlock();
  return (NSMapTable *)v3;
}

- (id)retrieveAndResetNewlyConfiguredAccessoriesForAddSessionIdentifier:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  id v8;

  v4 = a3;
  os_unfair_recursive_lock_lock_with_options();
  -[NSMutableDictionary objectForKeyedSubscript:](self->_newlyConfiguredAccessories, "objectForKeyedSubscript:", v4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = (void *)objc_msgSend(v5, "copy");

  if (v6)
  {
    -[NSMutableDictionary removeObjectForKey:](self->_newlyConfiguredAccessories, "removeObjectForKey:", v4);
    v7 = v6;
  }
  else
  {
    v7 = (void *)MEMORY[0x24BDBD1A8];
  }
  v8 = v7;

  os_unfair_recursive_lock_unlock();
  return v8;
}

- (int64_t)protectionMode
{
  int64_t protectionMode;

  os_unfair_recursive_lock_lock_with_options();
  protectionMode = self->_protectionMode;
  os_unfair_recursive_lock_unlock();
  return protectionMode;
}

- (void)setProtectionMode:(int64_t)a3
{
  os_unfair_recursive_lock_lock_with_options();
  self->_protectionMode = a3;
  os_unfair_recursive_lock_unlock();
}

- (unint64_t)networkRouterSupportDisableReason
{
  unint64_t networkRouterSupportDisableReason;

  os_unfair_recursive_lock_lock_with_options();
  networkRouterSupportDisableReason = self->_networkRouterSupportDisableReason;
  os_unfair_recursive_lock_unlock();
  return networkRouterSupportDisableReason;
}

- (void)setNetworkRouterSupportDisableReason:(unint64_t)a3
{
  os_unfair_recursive_lock_lock_with_options();
  self->_networkRouterSupportDisableReason = a3;
  os_unfair_recursive_lock_unlock();
}

- (unint64_t)networkRouterSupport
{
  unint64_t networkRouterSupport;

  os_unfair_recursive_lock_lock_with_options();
  networkRouterSupport = self->_networkRouterSupport;
  os_unfair_recursive_lock_unlock();
  return networkRouterSupport;
}

- (void)setNetworkRouterSupport:(unint64_t)a3
{
  os_unfair_recursive_lock_lock_with_options();
  self->_networkRouterSupport = a3;
  os_unfair_recursive_lock_unlock();
}

- (HMDHomeKitVersion)minimumNetworkRouterSupportHomeKitVersion
{
  HMDHomeKitVersion *v3;

  os_unfair_recursive_lock_lock_with_options();
  v3 = self->_minimumNetworkRouterSupportHomeKitVersion;
  os_unfair_recursive_lock_unlock();
  return v3;
}

- (void)setMinimumNetworkRouterSupportHomeKitVersion:(id)a3
{
  HMDHomeKitVersion *v4;
  HMDHomeKitVersion *minimumNetworkRouterSupportHomeKitVersion;

  v4 = (HMDHomeKitVersion *)a3;
  os_unfair_recursive_lock_lock_with_options();
  minimumNetworkRouterSupportHomeKitVersion = self->_minimumNetworkRouterSupportHomeKitVersion;
  self->_minimumNetworkRouterSupportHomeKitVersion = v4;

  os_unfair_recursive_lock_unlock();
}

- (HMDHomeKitVersion)minHomeKitVersionForAccessoryNetworkProtectionChange
{
  HMDHomeKitVersion *v3;

  os_unfair_recursive_lock_lock_with_options();
  v3 = self->_minHomeKitVersionForAccessoryNetworkProtectionChange;
  os_unfair_recursive_lock_unlock();
  return v3;
}

- (void)setMinHomeKitVersionForAccessoryNetworkProtectionChange:(id)a3
{
  HMDHomeKitVersion *v4;
  HMDHomeKitVersion *minHomeKitVersionForAccessoryNetworkProtectionChange;

  v4 = (HMDHomeKitVersion *)a3;
  os_unfair_recursive_lock_lock_with_options();
  minHomeKitVersionForAccessoryNetworkProtectionChange = self->_minHomeKitVersionForAccessoryNetworkProtectionChange;
  self->_minHomeKitVersionForAccessoryNetworkProtectionChange = v4;

  os_unfair_recursive_lock_unlock();
}

- (HMDNetworkRouterClientManager)routerClientManager
{
  HMDNetworkRouterClientManager *v3;

  os_unfair_recursive_lock_lock_with_options();
  v3 = self->_routerClientManager;
  os_unfair_recursive_lock_unlock();
  return v3;
}

- (void)setRouterClientManager:(id)a3
{
  HMDNetworkRouterClientManager *v4;
  HMDNetworkRouterClientManager *routerClientManager;

  v4 = (HMDNetworkRouterClientManager *)a3;
  os_unfair_recursive_lock_lock_with_options();
  routerClientManager = self->_routerClientManager;
  self->_routerClientManager = v4;

  os_unfair_recursive_lock_unlock();
}

- (NSUUID)activeNetworkRouterUUID
{
  NSUUID *v3;

  os_unfair_recursive_lock_lock_with_options();
  v3 = self->_activeNetworkRouterUUID;
  os_unfair_recursive_lock_unlock();
  return v3;
}

- (void)setActiveNetworkRouterUUID:(id)a3
{
  NSUUID *v4;
  NSUUID *activeNetworkRouterUUID;

  v4 = (NSUUID *)a3;
  os_unfair_recursive_lock_lock_with_options();
  activeNetworkRouterUUID = self->_activeNetworkRouterUUID;
  self->_activeNetworkRouterUUID = v4;

  os_unfair_recursive_lock_unlock();
}

- (BOOL)isActiveNetworkRouterInitialSetupNeeded
{
  os_unfair_recursive_lock_lock_with_options();
  LOBYTE(self) = self->_activeNetworkRouterInitialSetupNeeded;
  os_unfair_recursive_lock_unlock();
  return (char)self;
}

- (void)setActiveNetworkRouterInitialSetupNeeded:(BOOL)a3
{
  os_unfair_recursive_lock_lock_with_options();
  self->_activeNetworkRouterInitialSetupNeeded = a3;
  os_unfair_recursive_lock_unlock();
}

- (NSUUID)primaryNetworkRouterManagingDeviceUUID
{
  NSUUID *v3;

  os_unfair_recursive_lock_lock_with_options();
  v3 = self->_primaryNetworkRouterManagingDeviceUUID;
  os_unfair_recursive_lock_unlock();
  return v3;
}

- (void)setPrimaryNetworkRouterManagingDeviceUUID:(id)a3
{
  NSUUID *v4;
  NSUUID *primaryNetworkRouterManagingDeviceUUID;

  v4 = (NSUUID *)a3;
  os_unfair_recursive_lock_lock_with_options();
  primaryNetworkRouterManagingDeviceUUID = self->_primaryNetworkRouterManagingDeviceUUID;
  self->_primaryNetworkRouterManagingDeviceUUID = v4;

  os_unfair_recursive_lock_unlock();
}

- (void)handleActive:(id)a3
{
  id v4;
  NSObject *v5;
  id v6;
  _QWORD v7[5];
  id v8;

  v4 = a3;
  -[HMDHome workQueue](self, "workQueue");
  v5 = objc_claimAutoreleasedReturnValue();
  v7[0] = MEMORY[0x24BDAC760];
  v7[1] = 3221225472;
  v7[2] = __24__HMDHome_handleActive___block_invoke;
  v7[3] = &unk_24E79C268;
  v7[4] = self;
  v8 = v4;
  v6 = v4;
  dispatch_async(v5, v7);

}

- (void)handleInactive:(id)a3
{
  id v4;
  NSObject *v5;
  id v6;
  _QWORD v7[4];
  id v8;
  HMDHome *v9;

  v4 = a3;
  -[HMDHome workQueue](self, "workQueue");
  v5 = objc_claimAutoreleasedReturnValue();
  v7[0] = MEMORY[0x24BDAC760];
  v7[1] = 3221225472;
  v7[2] = __26__HMDHome_handleInactive___block_invoke;
  v7[3] = &unk_24E79C268;
  v8 = v4;
  v9 = self;
  v6 = v4;
  dispatch_async(v5, v7);

}

- (void)registerForAccessoryReachabilityNotifications:(BOOL)a3 registrationIdentifier:(id)a4
{
  id v6;
  NSObject *v7;
  _QWORD block[6];
  BOOL v9;

  v6 = a4;
  -[HMDHome workQueue](self, "workQueue");
  v7 = objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x24BDAC760];
  block[1] = 3221225472;
  block[2] = __80__HMDHome_registerForAccessoryReachabilityNotifications_registrationIdentifier___block_invoke;
  block[3] = &unk_24E799CF0;
  v9 = a3;
  block[4] = self;
  block[5] = v6;
  dispatch_async(v7, block);

}

- (void)_registerForAccessoryReachabilityNotifications:(BOOL)a3 registrationIdentifier:(id)a4 clientBundleIdentifier:(id)a5
{
  _BOOL4 v6;
  id v8;
  id v9;
  NSObject *v10;
  void *v11;
  void *v12;
  char v13;
  void *v14;
  uint64_t v15;
  _BOOL4 v16;
  void *v17;
  HMDHome *v18;
  NSObject *v19;
  NSObject *v20;
  void *v21;
  void *v22;
  void *v23;
  id v24;
  void *v25;
  uint64_t v26;
  BOOL v27;
  void *v28;
  HMDHome *v29;
  NSObject *v30;
  NSObject *v31;
  void *v32;
  id v33;
  void *v34;
  int v35;
  void *v36;
  __int16 v37;
  void *v38;
  uint64_t v39;

  v6 = a3;
  v39 = *MEMORY[0x24BDAC8D0];
  v8 = a4;
  v9 = a5;
  -[HMDHome workQueue](self, "workQueue");
  v10 = objc_claimAutoreleasedReturnValue();
  dispatch_assert_queue_V2(v10);

  -[HMDHome accessoryRemoteReachabilityEnabledClients](self, "accessoryRemoteReachabilityEnabledClients");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v12 = v11;
  if (v6)
  {
    v13 = objc_msgSend(v11, "containsObject:", v8);

    if ((v13 & 1) != 0)
      goto LABEL_6;
    -[HMDHome accessoryRemoteReachabilityEnabledClients](self, "accessoryRemoteReachabilityEnabledClients");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "addObject:", v8);
  }
  else
  {
    objc_msgSend(v11, "removeObject:", v8);
  }

LABEL_6:
  -[HMDHome accessoryRemoteReachabilityEnabledClients](self, "accessoryRemoteReachabilityEnabledClients");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  v15 = objc_msgSend(v14, "count");

  if (v15)
  {
    v16 = -[HMDHome currentRemoteReachabilityRegistration](self, "currentRemoteReachabilityRegistration");
    v17 = (void *)MEMORY[0x227676638]();
    v18 = self;
    HMFGetOSLogHandle();
    v19 = objc_claimAutoreleasedReturnValue();
    v20 = v19;
    if (v16)
    {
      if (os_log_type_enabled(v19, OS_LOG_TYPE_DEBUG))
      {
        HMFGetLogIdentifier();
        v21 = (void *)objc_claimAutoreleasedReturnValue();
        -[HMDHome accessoryRemoteReachabilityEnabledClients](v18, "accessoryRemoteReachabilityEnabledClients");
        v22 = (void *)objc_claimAutoreleasedReturnValue();
        v35 = 138543618;
        v36 = v21;
        v37 = 2112;
        v38 = v22;
        _os_log_impl(&dword_2218F0000, v20, OS_LOG_TYPE_DEBUG, "%{public}@Not updating remote accessory reachability registration as we are registered and have the clients %@", (uint8_t *)&v35, 0x16u);

      }
      objc_autoreleasePoolPop(v17);
    }
    else
    {
      if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
      {
        HMFGetLogIdentifier();
        v23 = (void *)objc_claimAutoreleasedReturnValue();
        v35 = 138543362;
        v36 = v23;
        _os_log_impl(&dword_2218F0000, v20, OS_LOG_TYPE_DEFAULT, "%{public}@Updating remote accessory reachability registration as we are not registered but have clients", (uint8_t *)&v35, 0xCu);

      }
      objc_autoreleasePoolPop(v17);
      if (v9)
        v24 = v9;
      else
        v24 = v8;
      -[HMDHome __registerForRemoteAccessoryReachabilityNotifications:applicationBundleIdentifier:](v18, "__registerForRemoteAccessoryReachabilityNotifications:applicationBundleIdentifier:", 1, v24);
    }
  }
  -[HMDHome accessoryRemoteReachabilityEnabledClients](self, "accessoryRemoteReachabilityEnabledClients");
  v25 = (void *)objc_claimAutoreleasedReturnValue();
  v26 = objc_msgSend(v25, "count");

  if (!v26)
  {
    v27 = -[HMDHome currentRemoteReachabilityRegistration](self, "currentRemoteReachabilityRegistration");
    v28 = (void *)MEMORY[0x227676638]();
    v29 = self;
    HMFGetOSLogHandle();
    v30 = objc_claimAutoreleasedReturnValue();
    v31 = v30;
    if (v27)
    {
      if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
      {
        HMFGetLogIdentifier();
        v32 = (void *)objc_claimAutoreleasedReturnValue();
        v35 = 138543362;
        v36 = v32;
        _os_log_impl(&dword_2218F0000, v31, OS_LOG_TYPE_DEFAULT, "%{public}@Updating remote accessory reachability registration as we are registered but have no clients", (uint8_t *)&v35, 0xCu);

      }
      objc_autoreleasePoolPop(v28);
      if (v9)
        v33 = v9;
      else
        v33 = v8;
      -[HMDHome __registerForRemoteAccessoryReachabilityNotifications:applicationBundleIdentifier:](v29, "__registerForRemoteAccessoryReachabilityNotifications:applicationBundleIdentifier:", 0, v33);
    }
    else
    {
      if (os_log_type_enabled(v30, OS_LOG_TYPE_DEBUG))
      {
        HMFGetLogIdentifier();
        v34 = (void *)objc_claimAutoreleasedReturnValue();
        v35 = 138543362;
        v36 = v34;
        _os_log_impl(&dword_2218F0000, v31, OS_LOG_TYPE_DEBUG, "%{public}@Not updating remote accessory reachability registration as we are not registered and have no clients", (uint8_t *)&v35, 0xCu);

      }
      objc_autoreleasePoolPop(v28);
    }
  }

}

- (void)registerForMatterFabricNotifications:(BOOL)a3 registrationIdentifier:(id)a4
{
  id v6;
  NSObject *v7;
  _QWORD block[6];
  BOOL v9;

  v6 = a4;
  -[HMDHome workQueue](self, "workQueue");
  v7 = objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x24BDAC760];
  block[1] = 3221225472;
  block[2] = __71__HMDHome_registerForMatterFabricNotifications_registrationIdentifier___block_invoke;
  block[3] = &unk_24E799CF0;
  v9 = a3;
  block[4] = self;
  block[5] = v6;
  dispatch_async(v7, block);

}

- (void)_registerForMatterFabricNotifications:(BOOL)a3 registrationIdentifier:(id)a4 clientBundleIdentifier:(id)a5
{
  _BOOL4 v6;
  id v8;
  id v9;
  NSObject *v10;
  void *v11;
  id v12;
  void *v13;
  HMDHome *v14;
  NSObject *v15;
  void *v16;
  void *v17;
  void *v18;
  char v19;
  void *v20;
  void *v21;
  uint64_t v22;
  _BOOL4 v23;
  void *v24;
  HMDHome *v25;
  NSObject *v26;
  NSObject *v27;
  void *v28;
  void *v29;
  void *v30;
  uint64_t v31;
  BOOL v32;
  NSObject *v33;
  void *v34;
  void *v35;
  HMDHome *v36;
  uint64_t v37;
  void *v38;
  void *v39;
  int v40;
  void *v41;
  __int16 v42;
  id v43;
  uint64_t v44;

  v6 = a3;
  v44 = *MEMORY[0x24BDAC8D0];
  v8 = a4;
  v9 = a5;
  -[HMDHome workQueue](self, "workQueue");
  v10 = objc_claimAutoreleasedReturnValue();
  dispatch_assert_queue_V2(v10);

  if (isFeatureMatteriPhoneOnlyPairingControlEnabled())
  {
    if (v9)
      v11 = v9;
    else
      v11 = v8;
    v12 = v11;
    if ((objc_msgSend(v12, "isEqualToString:", *MEMORY[0x24BDD5C70]) & 1) != 0
      || (objc_msgSend(v12, "isEqualToString:", *MEMORY[0x24BDD6778]) & 1) != 0
      || (objc_msgSend(v12, "isEqualToString:", *MEMORY[0x24BDD6F08]) & 1) != 0
      || (objc_msgSend(v12, "isEqualToString:", *MEMORY[0x24BDD63E8]) & 1) != 0
      || objc_msgSend(v12, "isEqualToString:", *MEMORY[0x24BDD6360]))
    {
      v13 = (void *)MEMORY[0x227676638]();
      v14 = self;
      HMFGetOSLogHandle();
      v15 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
      {
        HMFGetLogIdentifier();
        v16 = (void *)objc_claimAutoreleasedReturnValue();
        v40 = 138543618;
        v41 = v16;
        v42 = 2112;
        v43 = v12;
        _os_log_impl(&dword_2218F0000, v15, OS_LOG_TYPE_DEBUG, "%{public}@registerForMatterFabricNotifications - skip registering client %@", (uint8_t *)&v40, 0x16u);

      }
      objc_autoreleasePoolPop(v13);
      goto LABEL_13;
    }
    -[HMDHome matterFabricEnabledClients](self, "matterFabricEnabledClients");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    v18 = v17;
    if (v6)
    {
      v19 = objc_msgSend(v17, "containsObject:", v8);

      if ((v19 & 1) != 0)
        goto LABEL_20;
      -[HMDHome matterFabricEnabledClients](self, "matterFabricEnabledClients");
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v18, "addObject:", v8);
    }
    else
    {
      objc_msgSend(v17, "removeObject:", v8);
    }

LABEL_20:
    -[HMDHome homeManager](self, "homeManager");
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHome matterFabricEnabledClients](self, "matterFabricEnabledClients");
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    v22 = objc_msgSend(v21, "count");

    if (v22)
    {
      v23 = -[HMDHome currentMatterClientRegistration](self, "currentMatterClientRegistration");
      v24 = (void *)MEMORY[0x227676638]();
      v25 = self;
      HMFGetOSLogHandle();
      v26 = objc_claimAutoreleasedReturnValue();
      v27 = v26;
      if (v23)
      {
        if (!os_log_type_enabled(v26, OS_LOG_TYPE_DEBUG))
        {
LABEL_25:

          objc_autoreleasePoolPop(v24);
LABEL_35:

LABEL_13:
          goto LABEL_14;
        }
        HMFGetLogIdentifier();
        v28 = (void *)objc_claimAutoreleasedReturnValue();
        -[HMDHome accessoryRemoteReachabilityEnabledClients](v25, "accessoryRemoteReachabilityEnabledClients");
        v29 = (void *)objc_claimAutoreleasedReturnValue();
        v40 = 138543618;
        v41 = v28;
        v42 = 2112;
        v43 = v29;
        _os_log_impl(&dword_2218F0000, v27, OS_LOG_TYPE_DEBUG, "%{public}@Not updating matter fabric registration as we are registered and have the clients %@", (uint8_t *)&v40, 0x16u);

LABEL_24:
        goto LABEL_25;
      }
      if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
      {
        HMFGetLogIdentifier();
        v38 = (void *)objc_claimAutoreleasedReturnValue();
        v40 = 138543362;
        v41 = v38;
        _os_log_impl(&dword_2218F0000, v27, OS_LOG_TYPE_DEFAULT, "%{public}@Updating matter fabric registration as we are not registered but have clients", (uint8_t *)&v40, 0xCu);

      }
      objc_autoreleasePoolPop(v24);
      objc_msgSend(v20, "chipDataSource");
      v39 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v39, "updateNotificationsEnabled:forHome:keepAliveOnly:", 1, v25, 1);

      v36 = v25;
      v37 = 1;
    }
    else
    {
      -[HMDHome accessoryRemoteReachabilityEnabledClients](self, "accessoryRemoteReachabilityEnabledClients");
      v30 = (void *)objc_claimAutoreleasedReturnValue();
      v31 = objc_msgSend(v30, "count");

      if (v31)
        goto LABEL_35;
      v32 = -[HMDHome currentMatterClientRegistration](self, "currentMatterClientRegistration");
      v24 = (void *)MEMORY[0x227676638]();
      v25 = self;
      HMFGetOSLogHandle();
      v33 = objc_claimAutoreleasedReturnValue();
      v27 = v33;
      if (!v32)
      {
        if (!os_log_type_enabled(v33, OS_LOG_TYPE_DEBUG))
          goto LABEL_25;
        HMFGetLogIdentifier();
        v28 = (void *)objc_claimAutoreleasedReturnValue();
        v40 = 138543362;
        v41 = v28;
        _os_log_impl(&dword_2218F0000, v27, OS_LOG_TYPE_DEBUG, "%{public}@Not updating matter fabric registration as we are not registered and have no clients", (uint8_t *)&v40, 0xCu);
        goto LABEL_24;
      }
      if (os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT))
      {
        HMFGetLogIdentifier();
        v34 = (void *)objc_claimAutoreleasedReturnValue();
        v40 = 138543362;
        v41 = v34;
        _os_log_impl(&dword_2218F0000, v27, OS_LOG_TYPE_DEFAULT, "%{public}@Updating matter fabric registration as we are registered but have no clients", (uint8_t *)&v40, 0xCu);

      }
      objc_autoreleasePoolPop(v24);
      objc_msgSend(v20, "chipDataSource");
      v35 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v35, "updateNotificationsEnabled:forHome:keepAliveOnly:", 0, v25, 1);

      v36 = v25;
      v37 = 0;
    }
    -[HMDHome setCurrentMatterClientRegistration:](v36, "setCurrentMatterClientRegistration:", v37);
    goto LABEL_35;
  }
LABEL_14:

}

- (void)handleAdaptiveClientDisconnected:(id)a3
{
  void *v4;
  void *v5;
  id v6;
  void *v7;
  NSObject *v8;
  _QWORD v9[5];
  id v10;

  objc_msgSend(a3, "object");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v5 = v4;
  else
    v5 = 0;
  v6 = v5;

  if (v6)
  {
    objc_msgSend(v6, "bundleIdentifier");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    if (v7)
    {
      -[HMDHome workQueue](self, "workQueue");
      v8 = objc_claimAutoreleasedReturnValue();
      v9[0] = MEMORY[0x24BDAC760];
      v9[1] = 3221225472;
      v9[2] = __44__HMDHome_handleAdaptiveClientDisconnected___block_invoke;
      v9[3] = &unk_24E79C268;
      v9[4] = self;
      v10 = v7;
      dispatch_async(v8, v9);

    }
  }

}

- (void)handleAccessoryReachabilityChangeNotification:(id)a3
{
  NSObject *v4;
  _QWORD block[5];

  -[HMDHome workQueue](self, "workQueue", a3);
  v4 = objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x24BDAC760];
  block[1] = 3221225472;
  block[2] = __57__HMDHome_handleAccessoryReachabilityChangeNotification___block_invoke;
  block[3] = &unk_24E79C240;
  block[4] = self;
  dispatch_async(v4, block);

}

- (void)_cleanAddAccessoryOperations
{
  os_unfair_recursive_lock_lock_with_options();
  -[NSMapTable removeAllObjects](self->_addPendingAccessories, "removeAllObjects");
  -[NSMutableDictionary removeAllObjects](self->_addPendingAccessorySetupCodeHandlers, "removeAllObjects");
  -[NSMutableDictionary removeAllObjects](self->_addPendingAccessorySetupCodes, "removeAllObjects");
  -[NSMutableDictionary removeAllObjects](self->_addPendingAccessoryOnboardingSetupPayloadStrings, "removeAllObjects");
  os_unfair_recursive_lock_unlock();
}

- (void)_disableNotificationsForClient:(id)a3
{
  id v4;
  NSObject *v5;
  void *v6;
  HMDHome *v7;
  NSObject *v8;
  void *v9;
  void *v10;
  void *v11;
  char v12;
  void *v13;
  int v14;
  void *v15;
  __int16 v16;
  id v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  v4 = a3;
  -[HMDHome workQueue](self, "workQueue");
  v5 = objc_claimAutoreleasedReturnValue();
  dispatch_assert_queue_V2(v5);

  if (v4)
  {
    v6 = (void *)MEMORY[0x227676638]();
    v7 = self;
    HMFGetOSLogHandle();
    v8 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      v14 = 138543618;
      v15 = v9;
      v16 = 2112;
      v17 = v4;
      _os_log_impl(&dword_2218F0000, v8, OS_LOG_TYPE_INFO, "%{public}@Disabling notification for client %@", (uint8_t *)&v14, 0x16u);

    }
    objc_autoreleasePoolPop(v6);
    -[HMDHome notificationRegistrations](v7, "notificationRegistrations");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    if ((objc_msgSend(v10, "containsObject:", v4) & 1) != 0)
    {
      -[HMDHome notificationDeregistrations](v7, "notificationDeregistrations");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      v12 = objc_msgSend(v11, "containsObject:", v4);

      if ((v12 & 1) == 0)
      {
        -[HMDHome addNotificationDeregistrationForApplicationBundleIdentifier:](v7, "addNotificationDeregistrationForApplicationBundleIdentifier:", v4);
        -[HMDHome _startHomeNotificationDeregistrationTimer](v7, "_startHomeNotificationDeregistrationTimer");
      }
    }
    else
    {

    }
    objc_msgSend(CFSTR("com.apple.HomeKit.client."), "stringByAppendingString:", v4);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHome _disableDirectCharacteristicNotificationsForClient:](v7, "_disableDirectCharacteristicNotificationsForClient:", v13);

  }
}

- (void)_disableDirectCharacteristicNotificationsForClient:(id)a3
{
  id v4;
  NSObject *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t i;
  id v11;
  void *v12;
  id v13;
  void *v14;
  NSObject *v15;
  _QWORD block[6];
  _QWORD aBlock[4];
  NSObject *v18;
  _QWORD *v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  _QWORD v24[3];
  char v25;
  _BYTE v26[128];
  uint64_t v27;

  v27 = *MEMORY[0x24BDAC8D0];
  v4 = a3;
  v24[0] = 0;
  v24[1] = v24;
  v24[2] = 0x2020000000;
  v25 = 0;
  v5 = dispatch_group_create();
  v20 = 0u;
  v21 = 0u;
  v22 = 0u;
  v23 = 0u;
  -[HMDHome accessories](self, "accessories");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = (void *)objc_msgSend(v6, "copy");

  v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v20, v26, 16);
  if (v8)
  {
    v9 = *(_QWORD *)v21;
    do
    {
      for (i = 0; i != v8; ++i)
      {
        if (*(_QWORD *)v21 != v9)
          objc_enumerationMutation(v7);
        v11 = *(id *)(*((_QWORD *)&v20 + 1) + 8 * i);
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0)
          v12 = v11;
        else
          v12 = 0;
        v13 = v12;

        if (v13)
        {
          dispatch_group_enter(v5);
          aBlock[0] = MEMORY[0x24BDAC760];
          aBlock[1] = 3221225472;
          aBlock[2] = __62__HMDHome__disableDirectCharacteristicNotificationsForClient___block_invoke;
          aBlock[3] = &unk_24E7964B8;
          v19 = v24;
          v18 = v5;
          v14 = _Block_copy(aBlock);
          objc_msgSend(v13, "disableNotificationsForBundleID:completionHandler:", v4, v14);

        }
      }
      v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v20, v26, 16);
    }
    while (v8);
  }

  -[HMDHome workQueue](self, "workQueue");
  v15 = objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x24BDAC760];
  block[1] = 3221225472;
  block[2] = __62__HMDHome__disableDirectCharacteristicNotificationsForClient___block_invoke_2;
  block[3] = &unk_24E79B698;
  block[4] = self;
  block[5] = v24;
  dispatch_group_notify(v5, v15, block);

  _Block_object_dispose(v24, 8);
}

- (void)_startHomeNotificationDeregistrationTimer
{
  void *v3;
  void *v4;
  HMDHome *v5;
  NSObject *v6;
  void *v7;
  void *v8;
  void *v9;
  id v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  HMDHome *v17;
  NSObject *v18;
  void *v19;
  void *v20;
  int v21;
  void *v22;
  __int16 v23;
  void *v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  -[HMDHome disableNotificationTimer](self, "disableNotificationTimer");
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  if (v3)
  {
    v4 = (void *)MEMORY[0x227676638]();
    v5 = self;
    HMFGetOSLogHandle();
    v6 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      -[HMDHome disableNotificationTimer](v5, "disableNotificationTimer");
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      v21 = 138543618;
      v22 = v7;
      v23 = 2112;
      v24 = v8;
      _os_log_impl(&dword_2218F0000, v6, OS_LOG_TYPE_INFO, "%{public}@Kicking notification disable timer: %@", (uint8_t *)&v21, 0x16u);

    }
    objc_autoreleasePoolPop(v4);
    -[HMDHome disableNotificationTimer](v5, "disableNotificationTimer");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "kick");

  }
  else
  {
    v10 = objc_alloc(MEMORY[0x24BE3F298]);
    v11 = (void *)objc_msgSend(v10, "initWithTimeInterval:options:", 1, *(double *)&disableNotificationsDeferPeriod);
    -[HMDHome setDisableNotificationTimer:](self, "setDisableNotificationTimer:", v11);

    -[HMDHome workQueue](self, "workQueue");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHome disableNotificationTimer](self, "disableNotificationTimer");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "setDelegateQueue:", v12);

    -[HMDHome disableNotificationTimer](self, "disableNotificationTimer");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v14, "setDelegate:", self);

    -[HMDHome disableNotificationTimer](self, "disableNotificationTimer");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v15, "resume");

    v16 = (void *)MEMORY[0x227676638]();
    v17 = self;
    HMFGetOSLogHandle();
    v18 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      -[HMDHome disableNotificationTimer](v17, "disableNotificationTimer");
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      v21 = 138543618;
      v22 = v19;
      v23 = 2112;
      v24 = v20;
      _os_log_impl(&dword_2218F0000, v18, OS_LOG_TYPE_INFO, "%{public}@Started notification disable timer: %@", (uint8_t *)&v21, 0x16u);

    }
    objc_autoreleasePoolPop(v16);
  }
}

- (void)__handleProcessStateChange:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  id v7;
  void *v8;
  void *v9;
  void *v10;
  id v11;
  unint64_t v12;
  NSObject *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(uint64_t);
  void *v19;
  id v20;
  HMDHome *v21;

  v4 = a3;
  objc_msgSend(v4, "object");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v6 = v5;
  else
    v6 = 0;
  v7 = v6;

  if (v7)
  {
    objc_msgSend(v4, "userInfo");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "objectForKeyedSubscript:", CFSTR("state"));
    v9 = (void *)objc_claimAutoreleasedReturnValue();

    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
      v10 = v9;
    else
      v10 = 0;
    v11 = v10;

    v12 = objc_msgSend(v11, "unsignedIntegerValue");
    if (v12 <= 4 && ((1 << v12) & 0x1A) != 0)
    {
      -[HMDHome workQueue](self, "workQueue");
      v14 = objc_claimAutoreleasedReturnValue();
      v16 = MEMORY[0x24BDAC760];
      v17 = 3221225472;
      v18 = __38__HMDHome___handleProcessStateChange___block_invoke;
      v19 = &unk_24E79C268;
      v20 = v7;
      v21 = self;
      dispatch_async(v14, &v16);

    }
    -[HMDHome hapAccessories](self, "hapAccessories", v16, v17, v18, v19);
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v15, "hmf_enumerateWithAutoreleasePoolUsingBlock:", &__block_literal_global_546);

  }
}

- (void)computeBridgedAccessoriesForAllBridges
{
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t i;
  id v9;
  void *v10;
  id v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t j;
  uint64_t v23;
  void *v24;
  void *v25;
  void *v26;
  id v27;
  BOOL v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  _BYTE v37[128];
  _BYTE v38[128];
  uint64_t v39;

  v39 = *MEMORY[0x24BDAC8D0];
  objc_msgSend(MEMORY[0x24BDBCED8], "dictionary");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHome accessories](self, "accessories");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v33 = 0u;
  v34 = 0u;
  v35 = 0u;
  v36 = 0u;
  v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v33, v38, 16);
  if (v5)
  {
    v6 = v5;
    v7 = *(_QWORD *)v34;
    do
    {
      for (i = 0; i != v6; ++i)
      {
        if (*(_QWORD *)v34 != v7)
          objc_enumerationMutation(v4);
        v9 = *(id *)(*((_QWORD *)&v33 + 1) + 8 * i);
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0)
          v10 = v9;
        else
          v10 = 0;
        v11 = v10;

        objc_msgSend(v11, "bridge");
        v12 = (void *)objc_claimAutoreleasedReturnValue();
        v13 = v12;
        if (v12)
        {
          objc_msgSend(v12, "uuid");
          v14 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v3, "hmf_mutableSetForKey:", v14);
          v15 = (void *)objc_claimAutoreleasedReturnValue();

          if (!v15)
          {
            objc_msgSend(MEMORY[0x24BDBCEF0], "set");
            v15 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v13, "uuid");
            v16 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v3, "setObject:forKey:", v15, v16);

          }
          objc_msgSend(v9, "uuid");
          v17 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v15, "addObject:", v17);

        }
      }
      v6 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v33, v38, 16);
    }
    while (v6);
  }
  v31 = 0u;
  v32 = 0u;
  v29 = 0u;
  v30 = 0u;
  v18 = v3;
  v19 = objc_msgSend(v18, "countByEnumeratingWithState:objects:count:", &v29, v37, 16);
  if (v19)
  {
    v20 = v19;
    v21 = *(_QWORD *)v30;
    do
    {
      for (j = 0; j != v20; ++j)
      {
        if (*(_QWORD *)v30 != v21)
          objc_enumerationMutation(v18);
        v23 = *(_QWORD *)(*((_QWORD *)&v29 + 1) + 8 * j);
        objc_msgSend(v18, "hmf_mutableSetForKey:", v23, (_QWORD)v29);
        v24 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v4, "hmf_firstObjectWithUUID:", v23);
        v25 = (void *)objc_claimAutoreleasedReturnValue();
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0)
          v26 = v25;
        else
          v26 = 0;
        v27 = v26;

        if (v27)
          v28 = v24 == 0;
        else
          v28 = 1;
        if (!v28)
          objc_msgSend(v27, "setIdentifiersForBridgedAccessories:", v24);

      }
      v20 = objc_msgSend(v18, "countByEnumeratingWithState:objects:count:", &v29, v37, 16);
    }
    while (v20);
  }

}

- (id)filterBuiltinActionSets:(id)a3
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t i;
  void *v12;
  void *v13;
  int v14;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  _BYTE v20[128];
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  v3 = a3;
  +[HMDHome getBuiltinActionSets](HMDHome, "getBuiltinActionSets");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "allKeys");
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(MEMORY[0x24BDBCEB8], "array");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v16 = 0u;
  v17 = 0u;
  v18 = 0u;
  v19 = 0u;
  v7 = v3;
  v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v16, v20, 16);
  if (v8)
  {
    v9 = v8;
    v10 = *(_QWORD *)v17;
    do
    {
      for (i = 0; i != v9; ++i)
      {
        if (*(_QWORD *)v17 != v10)
          objc_enumerationMutation(v7);
        v12 = *(void **)(*((_QWORD *)&v16 + 1) + 8 * i);
        objc_msgSend(v12, "type", (_QWORD)v16);
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        v14 = objc_msgSend(v5, "containsObject:", v13);

        if (v14)
          objc_msgSend(v6, "addObject:", v12);
      }
      v9 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v16, v20, 16);
    }
    while (v9);
  }

  return v6;
}

- (void)updateActionSetExecutionDates:(id)a3
{
  id v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t i;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t j;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  _BYTE v31[128];
  _BYTE v32[128];
  uint64_t v33;

  v33 = *MEMORY[0x24BDAC8D0];
  v4 = a3;
  v27 = 0u;
  v28 = 0u;
  v29 = 0u;
  v30 = 0u;
  -[HMDHome actionSets](self, "actionSets");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v27, v32, 16);
  if (v6)
  {
    v7 = v6;
    v8 = *(_QWORD *)v28;
    do
    {
      for (i = 0; i != v7; ++i)
      {
        if (*(_QWORD *)v28 != v8)
          objc_enumerationMutation(v5);
        v10 = *(void **)(*((_QWORD *)&v27 + 1) + 8 * i);
        objc_msgSend(v10, "uuid");
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v4, "actionSetWithUUID:", v11);
        v12 = (void *)objc_claimAutoreleasedReturnValue();

        objc_msgSend(v12, "lastExecutionDate");
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v10, "setLastExecutionDate:", v13);

      }
      v7 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v27, v32, 16);
    }
    while (v7);
  }

  v25 = 0u;
  v26 = 0u;
  v23 = 0u;
  v24 = 0u;
  -[HMDHome triggerOwnedActionSets](self, "triggerOwnedActionSets", 0);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  v15 = objc_msgSend(v14, "countByEnumeratingWithState:objects:count:", &v23, v31, 16);
  if (v15)
  {
    v16 = v15;
    v17 = *(_QWORD *)v24;
    do
    {
      for (j = 0; j != v16; ++j)
      {
        if (*(_QWORD *)v24 != v17)
          objc_enumerationMutation(v14);
        v19 = *(void **)(*((_QWORD *)&v23 + 1) + 8 * j);
        objc_msgSend(v19, "uuid");
        v20 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v4, "triggerOwnedActionSetWithUUID:", v20);
        v21 = (void *)objc_claimAutoreleasedReturnValue();

        objc_msgSend(v21, "lastExecutionDate");
        v22 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v19, "setLastExecutionDate:", v22);

      }
      v16 = objc_msgSend(v14, "countByEnumeratingWithState:objects:count:", &v23, v31, 16);
    }
    while (v16);
  }

}

- (id)createActionSetWithName:(id)a3 uuid:(id)a4 type:(id)a5
{
  id v8;
  id v9;
  id v10;
  HMDActionSet *v11;
  void *v12;
  HMDActionSet *v13;
  void *v14;
  void *v15;

  v8 = a5;
  v9 = a4;
  v10 = a3;
  v11 = [HMDActionSet alloc];
  -[HMDHome workQueue](self, "workQueue");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  v13 = -[HMDActionSet initWithName:uuid:type:home:queue:](v11, "initWithName:uuid:type:home:queue:", v10, v9, v8, self, v12);

  -[HMDHome msgDispatcher](self, "msgDispatcher");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHome workQueue](self, "workQueue");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDActionSet configure:messageDispatcher:queue:](v13, "configure:messageDispatcher:queue:", self, v14, v15);

  return v13;
}

- (id)_createBuiltinActionSets
{
  void *v3;
  id v4;
  __int128 v5;
  uint64_t i;
  uint64_t v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  HMDHome *v12;
  NSObject *v13;
  void *v14;
  HMDHome *v15;
  void *v16;
  void *v17;
  void *v18;
  __int128 v20;
  id v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint8_t buf[4];
  void *v30;
  __int16 v31;
  void *v32;
  __int16 v33;
  void *v34;
  _BYTE v35[128];
  uint64_t v36;

  v36 = *MEMORY[0x24BDAC8D0];
  objc_msgSend(MEMORY[0x24BDBCEB8], "array");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  +[HMDHome getBuiltinActionSets](HMDHome, "getBuiltinActionSets");
  v25 = 0u;
  v26 = 0u;
  v27 = 0u;
  v28 = 0u;
  v4 = (id)objc_claimAutoreleasedReturnValue();
  v24 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v25, v35, 16);
  if (v24)
  {
    v23 = *(_QWORD *)v26;
    *(_QWORD *)&v5 = 138543874;
    v20 = v5;
    v21 = v4;
    do
    {
      for (i = 0; i != v24; ++i)
      {
        if (*(_QWORD *)v26 != v23)
          objc_enumerationMutation(v4);
        v7 = *(_QWORD *)(*((_QWORD *)&v25 + 1) + 8 * i);
        objc_msgSend(v4, "objectForKeyedSubscript:", v7, v20);
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        HMDLocalizedStringForKey(v8);
        v9 = (void *)objc_claimAutoreleasedReturnValue();

        -[HMDHome addName:](self, "addName:", v9);
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        if (v10)
        {
          v11 = (void *)MEMORY[0x227676638]();
          v12 = self;
          HMFGetOSLogHandle();
          v13 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
          {
            HMFGetLogIdentifier();
            v22 = v11;
            v14 = (void *)objc_claimAutoreleasedReturnValue();
            -[HMDHome name](v12, "name");
            v15 = self;
            v16 = v3;
            v17 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = v20;
            v30 = v14;
            v31 = 2112;
            v32 = v9;
            v33 = 2112;
            v34 = v17;
            _os_log_impl(&dword_2218F0000, v13, OS_LOG_TYPE_DEFAULT, "%{public}@Could not add builtin actionSet '%@' to home '%@' namespace", buf, 0x20u);

            v3 = v16;
            self = v15;
            v4 = v21;

            v11 = v22;
          }

          objc_autoreleasePoolPop(v11);
        }
        -[HMDHome createActionSetWithName:uuid:type:](self, "createActionSetWithName:uuid:type:", v9, 0, v7);
        v18 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v3, "addObject:", v18);

      }
      v24 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v25, v35, 16);
    }
    while (v24);
  }

  return v3;
}

- (void)__addMediaSession:(id)a3
{
  id v4;
  void *v5;
  uint64_t v6;
  id v7;

  v4 = a3;
  if (v4)
  {
    v7 = v4;
    -[HMDHome notificationRegistrations](self, "notificationRegistrations");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = objc_msgSend(v5, "count");

    if (v6)
      objc_msgSend(v7, "registerForSessionUpdates:", 1);
    -[HMDHome addMediaSession:](self, "addMediaSession:", v7);
    v4 = v7;
  }

}

- (id)_addMediaSessionForCurrentAccessory:(id)a3
{
  id v4;
  void *v5;
  id v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  HMDHome *v12;
  NSObject *v13;
  void *v14;
  void *v15;
  int v17;
  void *v18;
  __int16 v19;
  void *v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  v4 = a3;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v5 = v4;
  else
    v5 = 0;
  v6 = v5;

  objc_msgSend(v6, "mediaProfile");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  if (v7)
  {
    objc_msgSend(v4, "identifier");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    +[HMDMediaSession sessionForCurrentAccessoryWithSessionIdentifier:mediaProfile:](HMDMediaSession, "sessionForCurrentAccessoryWithSessionIdentifier:mediaProfile:", v8, v7);
    v9 = (void *)objc_claimAutoreleasedReturnValue();

    if (v9)
    {
      objc_msgSend(v9, "state");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      -[HMDHome addMediaSessionState:](self, "addMediaSessionState:", v10);

      -[HMDHome __addMediaSession:](self, "__addMediaSession:", v9);
      objc_msgSend(v4, "updateMediaSession:", v9);
    }
  }
  else
  {
    v11 = (void *)MEMORY[0x227676638]();
    v12 = self;
    HMFGetOSLogHandle();
    v13 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      HMFGetLogIdentifier();
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "name");
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      v17 = 138543618;
      v18 = v14;
      v19 = 2112;
      v20 = v15;
      _os_log_impl(&dword_2218F0000, v13, OS_LOG_TYPE_DEFAULT, "%{public}@Current accessory '%@' not an Apple media accessory or no media profile", (uint8_t *)&v17, 0x16u);

    }
    objc_autoreleasePoolPop(v11);
    v9 = 0;
  }

  return v9;
}

- (id)_createMediaSessionWithEndpoint:(id)a3
{
  id v4;
  void *v5;
  HMDMediaSessionState *v6;
  HMDMediaSession *v7;
  void *v8;
  HMDMediaSession *v9;
  void *v10;
  HMDHome *v11;
  NSObject *v12;
  void *v13;
  int v15;
  void *v16;
  __int16 v17;
  id v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v4 = a3;
  objc_msgSend(v4, "sessionIdentifier");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  if (v5)
  {
    -[HMDHome mediaSessionStateWithIdentifier:](self, "mediaSessionStateWithIdentifier:", v5);
    v6 = (HMDMediaSessionState *)objc_claimAutoreleasedReturnValue();
    if (!v6)
    {
      v6 = -[HMDMediaSessionState initWithSessionIdentifier:]([HMDMediaSessionState alloc], "initWithSessionIdentifier:", v5);
      -[HMDHome addMediaSessionState:](self, "addMediaSessionState:", v6);
    }
    v7 = [HMDMediaSession alloc];
    objc_msgSend(MEMORY[0x24BDBCE30], "array");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = -[HMDMediaSession initWithEndpoint:mediaProfiles:state:](v7, "initWithEndpoint:mediaProfiles:state:", v4, v8, v6);

    -[HMDHome __addMediaSession:](self, "__addMediaSession:", v9);
  }
  else
  {
    v10 = (void *)MEMORY[0x227676638]();
    v11 = self;
    HMFGetOSLogHandle();
    v12 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      v15 = 138543618;
      v16 = v13;
      v17 = 2112;
      v18 = v4;
      _os_log_impl(&dword_2218F0000, v12, OS_LOG_TYPE_INFO, "%{public}@Cannot create a mediaSession with nil sessionIdentifier for endpoint %@", (uint8_t *)&v15, 0x16u);

    }
    objc_autoreleasePoolPop(v10);
    v9 = 0;
  }

  return v9;
}

- (void)_removeMediaSessionWithIdentifier:(id)a3
{
  void *v4;
  id v5;

  -[HMDHome mediaSessionWithIdentifier:](self, "mediaSessionWithIdentifier:", a3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  if (v4)
  {
    v5 = v4;
    objc_msgSend(v4, "registerForSessionUpdates:", 0);
    -[HMDHome removeMediaSession:](self, "removeMediaSession:", v5);
    v4 = v5;
  }

}

- (void)_addUserToIdentityRegistry:(id)a3
{
  void *v3;
  void *v4;
  void *v5;
  id v6;
  void *v7;
  id v8;
  void *v9;
  void *v10;
  void *v11;
  id v12;

  v12 = a3;
  objc_msgSend(v12, "userID");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = v12;
  if (v3)
  {
    objc_msgSend(v12, "pairingIdentity");
    v5 = (void *)objc_claimAutoreleasedReturnValue();

    v4 = v12;
    if (v5)
    {
      v6 = v12;
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0)
        v7 = v6;
      else
        v7 = 0;
      v8 = v7;

      if (v8)
      {
        objc_msgSend(v8, "device");
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        if (v9)
        {
          +[HMDIdentityRegistry sharedRegistry](HMDIdentityRegistry, "sharedRegistry");
          v10 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v6, "pairingIdentity");
          v11 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v10, "registerIdentity:device:object:", v11, v9, v6);
LABEL_11:

        }
      }
      else
      {
        objc_msgSend(v6, "account");
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        if (v9)
        {
          +[HMDIdentityRegistry sharedRegistry](HMDIdentityRegistry, "sharedRegistry");
          v10 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v6, "pairingIdentity");
          v11 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v10, "registerIdentity:account:object:", v11, v9, v6);
          goto LABEL_11;
        }
      }

      v4 = v12;
    }
  }

}

- (BOOL)watchSkipVersionCheck
{
  os_unfair_recursive_lock_lock_with_options();
  LOBYTE(self) = self->_watchSkipVersionCheck;
  os_unfair_recursive_lock_unlock();
  return (char)self;
}

- (void)setWatchSkipVersionCheck:(BOOL)a3
{
  os_unfair_recursive_lock_lock_with_options();
  self->_watchSkipVersionCheck = a3;
  os_unfair_recursive_lock_unlock();
}

- (HMDBackingStore)backingStore
{
  HMDBackingStore *v3;

  os_unfair_recursive_lock_lock_with_options();
  v3 = self->_backingStore;
  os_unfair_recursive_lock_unlock();
  return v3;
}

- (void)setBackingStore:(id)a3
{
  HMDBackingStore *v4;
  HMDBackingStore *backingStore;

  v4 = (HMDBackingStore *)a3;
  os_unfair_recursive_lock_lock_with_options();
  backingStore = self->_backingStore;
  self->_backingStore = v4;

  os_unfair_recursive_lock_unlock();
}

- (HMDLaunchHandler)launchHandler
{
  return +[HMDLaunchHandler sharedHandler](HMDLaunchHandler, "sharedHandler");
}

- (void)_setupActiveNetworkRouterAccessory:(id)a3 existingRouterAccessories:(id)a4
{
  id v6;
  id v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t i;
  id v13;
  void *v14;
  id v15;
  void *v16;
  id v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t j;
  void *v23;
  void *v24;
  HMDHome *v25;
  NSObject *v26;
  HMDHome *v27;
  void *v28;
  uint64_t v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  char v34;
  void *v35;
  void *v36;
  HMDHome *v37;
  NSObject *v38;
  void *v39;
  void *v40;
  id v41;
  id v42;
  id v43;
  uint64_t v44;
  void *v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  uint8_t buf[4];
  void *v55;
  __int16 v56;
  void *v57;
  __int16 v58;
  void *v59;
  _BYTE v60[128];
  _BYTE v61[128];
  uint64_t v62;

  v62 = *MEMORY[0x24BDAC8D0];
  v6 = a3;
  v7 = a4;
  v50 = 0u;
  v51 = 0u;
  v52 = 0u;
  v53 = 0u;
  v8 = v6;
  v9 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v50, v61, 16);
  if (v9)
  {
    v10 = v9;
    v11 = *(_QWORD *)v51;
    while (2)
    {
      for (i = 0; i != v10; ++i)
      {
        if (*(_QWORD *)v51 != v11)
          objc_enumerationMutation(v8);
        v13 = *(id *)(*((_QWORD *)&v50 + 1) + 8 * i);
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0)
          v14 = v13;
        else
          v14 = 0;
        v15 = v14;

        if (objc_msgSend(v15, "isPrimary"))
        {
          objc_msgSend(v15, "networkRouterController");
          v16 = (void *)objc_claimAutoreleasedReturnValue();

          if (v16)
          {
            v41 = v8;
            v42 = v7;
            v48 = 0u;
            v49 = 0u;
            v46 = 0u;
            v47 = 0u;
            v17 = v7;
            v18 = objc_msgSend(v17, "countByEnumeratingWithState:objects:count:", &v46, v60, 16);
            v19 = v15;
            v45 = v15;
            if (v18)
            {
              v20 = v18;
              v21 = *(_QWORD *)v47;
              v43 = v17;
              v44 = *(_QWORD *)v47;
              do
              {
                for (j = 0; j != v20; ++j)
                {
                  if (*(_QWORD *)v47 != v21)
                    objc_enumerationMutation(v17);
                  v23 = *(void **)(*((_QWORD *)&v46 + 1) + 8 * j);
                  if ((objc_msgSend(v23, "isEqual:", v19, v41, v42) & 1) == 0)
                  {
                    v24 = (void *)MEMORY[0x227676638]();
                    v25 = self;
                    HMFGetOSLogHandle();
                    v26 = objc_claimAutoreleasedReturnValue();
                    if (os_log_type_enabled(v26, OS_LOG_TYPE_INFO))
                    {
                      HMFGetLogIdentifier();
                      v27 = self;
                      v28 = (void *)objc_claimAutoreleasedReturnValue();
                      objc_msgSend(v23, "shortDescription");
                      v29 = v20;
                      v30 = (void *)objc_claimAutoreleasedReturnValue();
                      objc_msgSend(v19, "shortDescription");
                      v31 = (void *)objc_claimAutoreleasedReturnValue();
                      *(_DWORD *)buf = 138543874;
                      v55 = v28;
                      v56 = 2112;
                      v57 = v30;
                      v58 = 2112;
                      v59 = v31;
                      _os_log_impl(&dword_2218F0000, v26, OS_LOG_TYPE_INFO, "%{public}@Removing existing Wi-Fi router accessory '%@' while adding a new Wi-Fi router accessory '%@'", buf, 0x20u);

                      v19 = v45;
                      v20 = v29;

                      self = v27;
                      v17 = v43;
                      v21 = v44;
                    }

                    objc_autoreleasePoolPop(v24);
                    -[HMDHome __removeAccessory:isBeingReplaced:isForceUpdate:message:](v25, v23, 1, 0, 0);
                  }
                }
                v20 = objc_msgSend(v17, "countByEnumeratingWithState:objects:count:", &v46, v60, 16);
              }
              while (v20);
            }

            objc_msgSend(v19, "uuid");
            v32 = (void *)objc_claimAutoreleasedReturnValue();
            -[HMDHome activeNetworkRouterUUID](self, "activeNetworkRouterUUID");
            v33 = (void *)objc_claimAutoreleasedReturnValue();
            v34 = objc_msgSend(v32, "isEqual:", v33);

            if ((v34 & 1) != 0)
            {
              -[HMDHome _evaluateNetworkProtectionAndRouterManagement](self, "_evaluateNetworkProtectionAndRouterManagement");
              v8 = v41;
              v7 = v42;
              v35 = v45;
            }
            else
            {
              v36 = (void *)MEMORY[0x227676638]();
              v37 = self;
              HMFGetOSLogHandle();
              v38 = objc_claimAutoreleasedReturnValue();
              v8 = v41;
              v7 = v42;
              if (os_log_type_enabled(v38, OS_LOG_TYPE_INFO))
              {
                HMFGetLogIdentifier();
                v39 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v45, "shortDescription");
                v40 = (void *)objc_claimAutoreleasedReturnValue();
                *(_DWORD *)buf = 138543618;
                v55 = v39;
                v56 = 2112;
                v57 = v40;
                _os_log_impl(&dword_2218F0000, v38, OS_LOG_TYPE_INFO, "%{public}@Adding transaction to set %@ as active network router accessory", buf, 0x16u);

              }
              objc_autoreleasePoolPop(v36);
              v35 = v45;
              -[HMDHome _addTransactionForActiveNetworkRouterAccessory:isReplacement:](v37, "_addTransactionForActiveNetworkRouterAccessory:isReplacement:", v45, objc_msgSend(v17, "count") != 0);
            }

            goto LABEL_31;
          }
        }

      }
      v10 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v50, v61, 16);
      if (v10)
        continue;
      break;
    }
  }
LABEL_31:

}

- (BOOL)configureWithHomeManager:(id)a3 accessoriesPresent:(id)a4 uncommittedTransactions:(id)a5 source:(unint64_t)a6
{
  uint64_t v9;
  double v10;
  double v11;
  void *v12;
  HMDHome *v13;
  NSObject *v14;
  id v15;
  void *v16;
  id v17;
  void *v18;
  id v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  uint64_t v28;
  HMMLogEventSubmitting *logEventSubmitter;
  void *v30;
  uint64_t v31;
  HMDLogEventDailyScheduler *dailyScheduler;
  HMDHomeMetricsDispatcherFactory *v33;
  NSUUID *uuid;
  void *v35;
  uint64_t v36;
  HMDHomeMetricsDispatcher *metricsDispatcher;
  HMDHomePrimaryResidentMessagingHandler *v38;
  void *v39;
  void *v40;
  void *v41;
  uint64_t v42;
  HMDHomePrimaryResidentMessagingHandler *primaryResidentMessagingHandler;
  void *v44;
  void *v45;
  void *v46;
  uint64_t v47;
  HMUserPresenceAuthorization *presenceAuthStatus;
  void *v49;
  HMDHome *v50;
  NSObject *v51;
  id v52;
  HMUserPresenceAuthorization *v53;
  uint64_t v54;
  HMFTimer *homeLocationTimer;
  void *v56;
  void *v57;
  uint64_t v58;
  HMFTimer *accessoryReachabilityUpdatesTimer;
  void *v60;
  void *v61;
  void *v62;
  void *v63;
  void *v64;
  void *v65;
  void *v66;
  void *v67;
  void *v68;
  void *v69;
  void *v70;
  void *v71;
  void *v72;
  void *v73;
  void *v74;
  void *v75;
  void *v76;
  void *v77;
  void *v78;
  void *v79;
  void *v80;
  void *v81;
  unsigned int v82;
  void *v83;
  void *v84;
  id v85;
  void *v86;
  uint64_t v87;
  id v88;
  void *v89;
  void *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t i;
  void *v94;
  uint64_t v95;
  double v96;
  double v97;
  void *v98;
  HMDHome *v99;
  NSObject *v100;
  id v101;
  void *v102;
  void *v103;
  id v104;
  void *v105;
  void *v106;
  void *v107;
  void *v108;
  uint64_t v109;
  uint64_t j;
  void *v111;
  void *v112;
  id v113;
  void *v114;
  id v115;
  id v116;
  void *v117;
  id v118;
  void *v119;
  uint64_t v120;
  void *v121;
  id v122;
  void *v123;
  id v124;
  void *v125;
  void *v126;
  id v127;
  void *v128;
  void *v129;
  void *v130;
  void *v131;
  void *v132;
  HMDHome *v133;
  NSObject *v134;
  id v135;
  void *v136;
  double v137;
  id v138;
  void *v139;
  void *v140;
  void *v141;
  id v142;
  void *v143;
  double v144;
  void *v145;
  void *v146;
  void *v147;
  void *v148;
  void *v149;
  void *v150;
  uint64_t v151;
  double v152;
  double v153;
  void *v154;
  HMDHome *v155;
  NSObject *v156;
  id v157;
  void *v158;
  void *v159;
  id v160;
  void *v161;
  void *v162;
  void *v163;
  void *v164;
  void *v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t k;
  void *v169;
  void *v170;
  void *v171;
  void *v172;
  id v173;
  void *v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t m;
  void *v178;
  void *v179;
  void *v180;
  void *v181;
  id v182;
  void *v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t n;
  void *v187;
  void *v188;
  void *v189;
  void *v190;
  id v191;
  void *v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t ii;
  void *v196;
  void *v197;
  void *v198;
  void *v199;
  char v200;
  void *v201;
  id v202;
  void *v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t jj;
  void *v207;
  void *v208;
  void *v209;
  void *v210;
  void *v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t kk;
  void *v215;
  void *v216;
  void *v217;
  void *v218;
  void *v219;
  void *v220;
  HMDHome *v221;
  NSObject *v222;
  id v223;
  void *v224;
  HMDHome *v225;
  NSObject *v226;
  id v227;
  void *v228;
  double v229;
  id v230;
  void *v231;
  void *v232;
  id v233;
  void *v234;
  double v235;
  void *v236;
  void *v237;
  void *v238;
  void *v239;
  void *v240;
  uint64_t v241;
  double v242;
  double v243;
  void *v244;
  HMDHome *v245;
  NSObject *v246;
  id v247;
  void *v248;
  void *v249;
  id v250;
  void *v251;
  void *v252;
  void *v253;
  void *v254;
  void *v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t mm;
  void *v259;
  uint64_t v260;
  uint64_t nn;
  __CFString *v262;
  void *v263;
  char v264;
  char v265;
  void *v266;
  void *v267;
  HMDHome *v268;
  NSObject *v269;
  id v270;
  void *v271;
  void *v272;
  HMDResidentUser *v273;
  void *v274;
  HMDResidentUser *v275;
  void *v276;
  void *v277;
  HMDHome *v278;
  NSObject *v279;
  id v280;
  void *v281;
  double v282;
  id v283;
  void *v284;
  void *v285;
  void *v286;
  void *v287;
  id v288;
  void *v289;
  double v290;
  void *v291;
  void *v292;
  void *v293;
  void *v294;
  void *v295;
  void *v296;
  void *v297;
  void *v298;
  void *v299;
  void *v300;
  void *v301;
  void *v302;
  id v303;
  void *v304;
  id v305;
  uint64_t v306;
  void *v307;
  uint64_t v308;
  HMEDelegatingEventRouter *serverDelegatingEventRouter;
  HMDHomeRemoteEventRouterClientController *v310;
  void *v311;
  void *v312;
  void *v313;
  HMDHomeRemoteEventRouterClientController *v314;
  void *v315;
  void *v316;
  void *v317;
  void *v318;
  void *v319;
  void *v320;
  NSObject *v321;
  uint64_t v322;
  void *v323;
  uint64_t v324;
  double v325;
  double v326;
  void *v327;
  HMDHome *v328;
  NSObject *v329;
  id v330;
  void *v331;
  void *v332;
  id v333;
  void *v334;
  void *v335;
  void *v336;
  void *v337;
  void *v338;
  void *v339;
  HMDHome *v340;
  NSObject *v341;
  id v342;
  __CFString *v343;
  HMDMediaActionRouter *v344;
  void *v345;
  HMDUserActionPredictionManager *v346;
  void *v347;
  void *v348;
  void *v349;
  void *v350;
  void *v351;
  void *v352;
  void *v353;
  void *v354;
  void *v355;
  HMDAppleMediaAccessoryMessageRouter *v356;
  void *v357;
  void *v358;
  HMDAppleMediaAccessoryMessageRouter *v359;
  void *v360;
  HMDDelegatingMessageRouter *v361;
  void *v362;
  void *v363;
  void *v364;
  void *v365;
  HMDDelegatingMessageRouter *v366;
  void *v367;
  void *v368;
  void *v369;
  NSObject *v370;
  void *v371;
  _QWORD *v372;
  NSObject *v373;
  id v374;
  void *v375;
  double v376;
  id v377;
  void *v378;
  void *v379;
  id v380;
  void *v381;
  double v382;
  void *v383;
  void *v384;
  void *v385;
  void *v386;
  void *v387;
  HMDResidentSyncManager *v388;
  void *v389;
  void *v390;
  void *v391;
  void *v392;
  HMDResidentSyncManager *v393;
  void *v394;
  id v395;
  void *v396;
  void *v397;
  id *v398;
  NSObject *v399;
  id v400;
  void *v401;
  id *v402;
  NSObject *v403;
  id v404;
  void *v405;
  double v406;
  id v407;
  void *v408;
  id v409;
  void *v410;
  void *v411;
  void *v412;
  void *v413;
  void *v414;
  void *v415;
  id v416;
  void *v417;
  double v418;
  void *v419;
  void *v420;
  void *v421;
  void *v422;
  void *v423;
  void *v424;
  void *v425;
  void *v426;
  void *v427;
  void *v428;
  void *v429;
  void *v430;
  id v432;
  id v433;
  id v434;
  id v435;
  void *v436;
  id v437;
  void *v438;
  id v439;
  id v440;
  id obj;
  id obja;
  void *v443;
  void *v444;
  void *v445;
  void *v446;
  uint64_t v447;
  void *v448;
  id v449;
  NSObject *group;
  uint64_t v451;
  char v452;
  _QWORD v453[5];
  _QWORD block[4];
  id v455;
  id v456;
  id v457;
  id v458;
  id location;
  __int128 v460;
  __int128 v461;
  __int128 v462;
  __int128 v463;
  __int128 v464;
  __int128 v465;
  __int128 v466;
  __int128 v467;
  __int128 v468;
  __int128 v469;
  __int128 v470;
  __int128 v471;
  __int128 v472;
  __int128 v473;
  __int128 v474;
  __int128 v475;
  __int128 v476;
  __int128 v477;
  __int128 v478;
  __int128 v479;
  __int128 v480;
  __int128 v481;
  __int128 v482;
  __int128 v483;
  __int128 v484;
  __int128 v485;
  __int128 v486;
  __int128 v487;
  __int128 v488;
  __int128 v489;
  __int128 v490;
  __int128 v491;
  __int128 v492;
  __int128 v493;
  __int128 v494;
  __int128 v495;
  __int128 v496;
  __int128 v497;
  __int128 v498;
  __int128 v499;
  uint8_t buf[4];
  id v501;
  __int16 v502;
  const __CFString *v503;
  __int16 v504;
  const __CFString *v505;
  __int16 v506;
  const __CFString *v507;
  __int16 v508;
  const __CFString *v509;
  __int16 v510;
  const __CFString *v511;
  __int16 v512;
  id v513;
  __int16 v514;
  const __CFString *v515;
  __int16 v516;
  id v517;
  __int16 v518;
  const __CFString *v519;
  __int16 v520;
  id v521;
  __int16 v522;
  const __CFString *v523;
  __int16 v524;
  void *v525;
  __int16 v526;
  const __CFString *v527;
  __int16 v528;
  void *v529;
  _QWORD v530[2];
  _BYTE v531[128];
  _BYTE v532[128];
  _BYTE v533[128];
  _BYTE v534[128];
  _BYTE v535[128];
  _BYTE v536[128];
  _BYTE v537[128];
  _BYTE v538[128];
  _BYTE v539[128];
  _BYTE v540[128];
  uint64_t v541;

  v541 = *MEMORY[0x24BDAC8D0];
  v437 = a3;
  v449 = a4;
  v433 = a5;
  v9 = HMFUptime();
  v11 = v10;
  v12 = (void *)MEMORY[0x227676638](v9);
  v13 = self;
  HMFGetOSLogHandle();
  v14 = (id)objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v15 = (id)objc_claimAutoreleasedReturnValue();
    -[HMDHome uuid](v13, "uuid");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHome locationServicesEnabled](v13, "locationServicesEnabled");
    HMFBooleanToString();
    v17 = (id)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138545410;
    v501 = v15;
    v502 = 2114;
    v503 = CFSTR("homeConfigureStart");
    v504 = 2112;
    v505 = CFSTR("Configuring home with location service enabled");
    v506 = 2114;
    v507 = CFSTR("state");
    v508 = 2112;
    v509 = CFSTR("start");
    v510 = 2114;
    v511 = CFSTR("homeUUID");
    v512 = 2112;
    v513 = v16;
    v514 = 2114;
    v515 = CFSTR("status");
    v516 = 2112;
    v517 = v17;
    _os_log_impl(&dword_2218F0000, v14, OS_LOG_TYPE_INFO, "%{public}@tag=\"%{public}@\" desc=\"%@\" %{public}@=\"%@\" %{public}@=\"%@\" %{public}@=\"%@\", buf, 0x5Cu);

  }
  objc_autoreleasePoolPop(v12);
  objc_msgSend(MEMORY[0x24BE4F1C0], "sharedInstance");
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  v19 = objc_alloc(MEMORY[0x24BE4F1D0]);
  -[HMDHome uuid](v13, "uuid");
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHome locationServicesEnabled](v13, "locationServicesEnabled");
  HMFBooleanToString();
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  HMDTaggedLoggingCreateDictionary();
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  v23 = (void *)objc_msgSend(v19, "initWithTag:data:", CFSTR("homeConfigureStart"), v22, CFSTR("state"), CFSTR("start"), CFSTR("homeUUID"), v20, CFSTR("status"), v21);
  objc_msgSend(MEMORY[0x24BE3F138], "currentTagProcessorList");
  v24 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v18, "submitTaggedEvent:processorList:", v23, v24);

  -[HMDHome setHomeManager:](v13, "setHomeManager:", v437);
  objc_msgSend(v437, "messageDispatcher");
  v25 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHome setMsgDispatcher:](v13, "setMsgDispatcher:", v25);

  objc_msgSend(v437, "accessoryBrowser");
  v26 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHome setAccessoryBrowser:](v13, "setAccessoryBrowser:", v26);

  objc_msgSend(v437, "metricsManager");
  v27 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v27, "logEventSubmitter");
  v28 = objc_claimAutoreleasedReturnValue();
  logEventSubmitter = v13->_logEventSubmitter;
  v13->_logEventSubmitter = (HMMLogEventSubmitting *)v28;

  objc_msgSend(v437, "metricsManager");
  v30 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v30, "dailyScheduler");
  v31 = objc_claimAutoreleasedReturnValue();
  dailyScheduler = v13->_dailyScheduler;
  v13->_dailyScheduler = (HMDLogEventDailyScheduler *)v31;

  if (!v13->_metricsDispatcher)
  {
    v33 = objc_alloc_init(HMDHomeMetricsDispatcherFactory);
    uuid = v13->_uuid;
    -[HMDHome logEventSubmitter](v13, "logEventSubmitter");
    v35 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHomeMetricsDispatcherFactory createHomeMetricsDispatcherWithIdentifier:logEventSubmitter:](v33, "createHomeMetricsDispatcherWithIdentifier:logEventSubmitter:", uuid, v35);
    v36 = objc_claimAutoreleasedReturnValue();
    metricsDispatcher = v13->_metricsDispatcher;
    v13->_metricsDispatcher = (HMDHomeMetricsDispatcher *)v36;

  }
  v38 = [HMDHomePrimaryResidentMessagingHandler alloc];
  -[HMDHome msgDispatcher](v13, "msgDispatcher");
  v39 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHome uuid](v13, "uuid");
  v40 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHome residentDeviceManager](v13, "residentDeviceManager");
  v41 = (void *)objc_claimAutoreleasedReturnValue();
  v42 = -[HMDHomePrimaryResidentMessagingHandler initWithMessageDispatcher:homeUUID:residentDeviceManager:](v38, "initWithMessageDispatcher:homeUUID:residentDeviceManager:", v39, v40, v41);
  primaryResidentMessagingHandler = v13->_primaryResidentMessagingHandler;
  v13->_primaryResidentMessagingHandler = (HMDHomePrimaryResidentMessagingHandler *)v42;

  objc_msgSend(v437, "messageDispatcher");
  v44 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v44, "secureRemoteTransport");
  v45 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHome primaryResidentMessagingHandler](v13, "primaryResidentMessagingHandler");
  v46 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v45, "registerHomeMessageDestinationHandler:", v46);

  if (-[HMDHome isOwnerUser](v13, "isOwnerUser"))
    v13->_isUpdatedToHH2 = -[HMDHome isThisHomeMigratedToHH2](v13, "isThisHomeMigratedToHH2");
  objc_msgSend(MEMORY[0x24BDD7A90], "authWithValue:", 1);
  v47 = objc_claimAutoreleasedReturnValue();
  presenceAuthStatus = v13->_presenceAuthStatus;
  v13->_presenceAuthStatus = (HMUserPresenceAuthorization *)v47;

  v49 = (void *)MEMORY[0x227676638]();
  v50 = v13;
  HMFGetOSLogHandle();
  v51 = (id)objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v51, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v52 = (id)objc_claimAutoreleasedReturnValue();
    v53 = v13->_presenceAuthStatus;
    *(_DWORD *)buf = 138543618;
    v501 = v52;
    v502 = 2112;
    v503 = (const __CFString *)v53;
    _os_log_impl(&dword_2218F0000, v51, OS_LOG_TYPE_INFO, "%{public}@Home Presence Auth Status : [%@]", buf, 0x16u);

  }
  objc_autoreleasePoolPop(v49);
  if (_os_feature_enabled_impl()
    && ((isInternalBuild() & 1) != 0
     || CFPreferencesGetAppBooleanValue(CFSTR("UWBUnlock"), CFSTR("/Library/Managed Preferences/mobile/com.apple.homed.plist"), 0)))
  {
    -[HMDHome _readLocalHomeKeyMiscInfo](v50, "_readLocalHomeKeyMiscInfo");
  }
  v54 = objc_msgSend(objc_alloc(MEMORY[0x24BE3F298]), "initWithTimeInterval:options:", 8, 7.0);
  homeLocationTimer = v50->_homeLocationTimer;
  v50->_homeLocationTimer = (HMFTimer *)v54;

  -[HMFTimer setDelegateQueue:](v50->_homeLocationTimer, "setDelegateQueue:", v50->_workQueue);
  -[HMFTimer setDelegate:](v50->_homeLocationTimer, "setDelegate:", v50);
  objc_msgSend(MEMORY[0x24BE3F248], "sharedPreferences");
  v56 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v56, "preferenceForKey:", CFSTR("accessoryReachabilityCoalescePeriod"));
  v57 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v57, "numberValue");
  v436 = (void *)objc_claimAutoreleasedReturnValue();

  LODWORD(v56) = objc_msgSend(v436, "unsignedIntValue");
  v58 = objc_msgSend(objc_alloc(MEMORY[0x24BE3F298]), "initWithTimeInterval:options:", 0, (double)v56);
  accessoryReachabilityUpdatesTimer = v50->_accessoryReachabilityUpdatesTimer;
  v50->_accessoryReachabilityUpdatesTimer = (HMFTimer *)v58;

  -[HMFTimer setDelegate:](v50->_accessoryReachabilityUpdatesTimer, "setDelegate:", v50);
  -[HMFTimer setDelegateQueue:](v50->_accessoryReachabilityUpdatesTimer, "setDelegateQueue:", v50->_workQueue);
  -[HMDHome roomForEntireHome](v50, "roomForEntireHome");
  v60 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHome msgDispatcher](v50, "msgDispatcher");
  v61 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHome workQueue](v50, "workQueue");
  v62 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v60, "configure:queue:", v61, v62);

  -[HMDHome periodicReader](v50, "periodicReader");
  v63 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v63, "configure:", v50);

  -[HMDHome presenceMonitor](v50, "presenceMonitor");
  v64 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHome msgDispatcher](v50, "msgDispatcher");
  v65 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v64, "configure:messageDispatcher:", v50, v65);

  -[HMDHome presenceFeeder](v50, "presenceFeeder");
  v66 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHome msgDispatcher](v50, "msgDispatcher");
  v67 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v66, "configure:messageDispatcher:", v50, v67);

  -[HMDHome homeLocationHandler](v50, "homeLocationHandler");
  v68 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHome workQueue](v50, "workQueue");
  v69 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHome msgDispatcher](v50, "msgDispatcher");
  v70 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v68, "configure:queue:messageDispatcher:", v50, v69, v70);

  -[HMDHome homeReprovisionHandler](v50, "homeReprovisionHandler");
  v71 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHome workQueue](v50, "workQueue");
  v72 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHome msgDispatcher](v50, "msgDispatcher");
  v73 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v71, "configure:queue:messageDispatcher:", v50, v72, v73);

  -[HMDHome sharedHomeUpdateHandler](v50, "sharedHomeUpdateHandler");
  v74 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v74, "registerForMessages");

  -[HMDHome reachabilityChangedLogEventManager](v50, "reachabilityChangedLogEventManager");
  v75 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v75, "configure");

  -[HMDHome updateHomeLocation](v50, "updateHomeLocation");
  -[HMDHome residentDeviceManager](v50, "residentDeviceManager");
  v76 = (void *)objc_claimAutoreleasedReturnValue();
  +[HMDMessageDispatcher defaultDispatcher](HMDMessageDispatcher, "defaultDispatcher");
  v77 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v76, "configureWithHome:messageDispatcher:", v50, v77);

  -[HMDHome residentDeviceManager](v50, "residentDeviceManager");
  v78 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v78, "setDelegate:", v50);

  -[HMDHome primaryResidentChangeMonitor](v50, "primaryResidentChangeMonitor");
  v79 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v79, "configureWithHome:", v50);

  -[HMDHome _purgeResidentUsers](v50, "_purgeResidentUsers");
  if (-[HMDHome isOwnerUser](v50, "isOwnerUser"))
  {
    -[HMDHome primaryResident](v50, "primaryResident");
    v80 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v80, "device");
    v81 = (void *)objc_claimAutoreleasedReturnValue();
    v82 = objc_msgSend(v81, "isCurrentDevice");

    -[HMDHome accessoryBrowser](v50, "accessoryBrowser");
    v83 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v83, "setQOS:", v82);

  }
  -[HMDHome name](v50, "name");
  v84 = (void *)objc_claimAutoreleasedReturnValue();
  v85 = -[HMDHome addName:](v50, "addName:", v84);

  -[HMDHome roomForEntireHome](v50, "roomForEntireHome");
  v86 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v86, "name");
  v87 = objc_claimAutoreleasedReturnValue();
  v88 = -[HMDHome addName:](v50, "addName:", v87);

  -[HMDHome notificationRegistrations](v50, "notificationRegistrations");
  v89 = (void *)objc_claimAutoreleasedReturnValue();
  LOBYTE(v87) = objc_msgSend(v89, "count") == 0;

  if ((v87 & 1) == 0)
  {
    v498 = 0u;
    v499 = 0u;
    v496 = 0u;
    v497 = 0u;
    -[HMDHome mediaSessions](v50, "mediaSessions");
    v90 = (void *)objc_claimAutoreleasedReturnValue();
    v91 = objc_msgSend(v90, "countByEnumeratingWithState:objects:count:", &v496, v540, 16);
    if (v91)
    {
      v92 = *(_QWORD *)v497;
      do
      {
        for (i = 0; i != v91; ++i)
        {
          if (*(_QWORD *)v497 != v92)
            objc_enumerationMutation(v90);
          objc_msgSend(*(id *)(*((_QWORD *)&v496 + 1) + 8 * i), "registerForSessionUpdates:", 1);
        }
        v91 = objc_msgSend(v90, "countByEnumeratingWithState:objects:count:", &v496, v540, 16);
      }
      while (v91);
    }

  }
  group = dispatch_group_create();
  -[HMDHome createAndConfigureBulletinManagers](v50, "createAndConfigureBulletinManagers");
  -[HMDHome accessories](v50, "accessories");
  v94 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x24BDBCEB8], "arrayWithCapacity:", objc_msgSend(v94, "count"));
  v443 = (void *)objc_claimAutoreleasedReturnValue();
  v95 = HMFUptime();
  v97 = v96;
  v98 = (void *)MEMORY[0x227676638](v95);
  v99 = v50;
  HMFGetOSLogHandle();
  v100 = (id)objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v100, OS_LOG_TYPE_DEBUG))
  {
    HMFGetLogIdentifier();
    v101 = (id)objc_claimAutoreleasedReturnValue();
    -[HMDHome uuid](v99, "uuid");
    v102 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138544898;
    v501 = v101;
    v502 = 2114;
    v503 = CFSTR("homeConfigureStart");
    v504 = 2112;
    v505 = CFSTR("Configuring accessories");
    v506 = 2114;
    v507 = CFSTR("state");
    v508 = 2112;
    v509 = CFSTR("homeConfigureAccessories");
    v510 = 2114;
    v511 = CFSTR("homeUUID");
    v512 = 2112;
    v513 = v102;
    _os_log_impl(&dword_2218F0000, v100, OS_LOG_TYPE_DEBUG, "%{public}@tag=\"%{public}@\" desc=\"%@\" %{public}@=\"%@\" %{public}@=\"%@\", buf, 0x48u);

  }
  objc_autoreleasePoolPop(v98);
  objc_msgSend(MEMORY[0x24BE4F1C0], "sharedInstance");
  v103 = (void *)objc_claimAutoreleasedReturnValue();
  v104 = objc_alloc(MEMORY[0x24BE4F1D0]);
  -[HMDHome uuid](v99, "uuid");
  v105 = (void *)objc_claimAutoreleasedReturnValue();
  HMDTaggedLoggingCreateDictionary();
  v106 = (void *)objc_claimAutoreleasedReturnValue();
  v107 = (void *)objc_msgSend(v104, "initWithTag:data:", CFSTR("homeConfigureStart"), v106, CFSTR("state"), CFSTR("homeConfigureAccessories"), CFSTR("homeUUID"), v105);
  objc_msgSend(MEMORY[0x24BE3F138], "currentTagProcessorList");
  v108 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v103, "submitTaggedEvent:processorList:", v107, v108);

  v494 = 0u;
  v495 = 0u;
  v492 = 0u;
  v493 = 0u;
  obj = v94;
  v109 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v492, v539, 16);
  if (v109)
  {
    v444 = 0;
    v451 = *(_QWORD *)v493;
    do
    {
      for (j = 0; j != v109; ++j)
      {
        if (*(_QWORD *)v493 != v451)
          objc_enumerationMutation(obj);
        v111 = *(void **)(*((_QWORD *)&v492 + 1) + 8 * j);
        v112 = (void *)MEMORY[0x227676638]();
        v113 = v111;
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0)
          v114 = v113;
        else
          v114 = 0;
        v115 = v114;

        objc_msgSend(v115, "setDataSource:", v99);
        v116 = v113;
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0)
          v117 = v116;
        else
          v117 = 0;
        v118 = v117;

        if (v118)
        {
          if (objc_msgSend(v118, "isPrimary"))
          {
            objc_msgSend(v118, "identifier");
            v119 = (void *)objc_claimAutoreleasedReturnValue();
            v120 = objc_msgSend(v118, "supportedTransports");
            objc_msgSend(v118, "setupHash");
            v121 = (void *)objc_claimAutoreleasedReturnValue();
            -[HMDHome _registerPairedAccessory:transports:setupHash:](v99, "_registerPairedAccessory:transports:setupHash:", v119, v120, v121);

          }
          objc_msgSend(v443, "addObject:", v118);
        }
        v122 = v116;
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0)
          v123 = v122;
        else
          v123 = 0;
        v124 = v123;

        if (v124)
        {
          if (v115)
          {
            -[HMDHome capabilitiesAggregator](v99, "capabilitiesAggregator");
            v125 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v115, "uuid");
            v126 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v125, "didAddAccessory:", v126);

          }
          if (objc_msgSend(v115, "isCurrentAccessory"))
          {
            v127 = v115;

            v444 = v127;
          }
          objc_msgSend(v124, "identifier");
          v128 = (void *)objc_claimAutoreleasedReturnValue();
          -[HMDHome _registerPairedAccessory:transports:setupHash:](v99, "_registerPairedAccessory:transports:setupHash:", v128, objc_msgSend(v124, "supportedTransports"), 0);

        }
        -[HMDHome msgDispatcher](v99, "msgDispatcher");
        v129 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v122, "configureWithHome:msgDispatcher:configurationTracker:initialConfiguration:", v99, v129, group, 1);

        objc_msgSend(v122, "uuid");
        v130 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v130, "UUIDString");
        v131 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v449, "addObject:", v131);

        objc_autoreleasePoolPop(v112);
      }
      v109 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v492, v539, 16);
    }
    while (v109);
  }
  else
  {
    v444 = 0;
  }

  v132 = (void *)MEMORY[0x227676638]();
  v133 = v99;
  HMFGetOSLogHandle();
  v134 = (id)objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v134, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v135 = (id)objc_claimAutoreleasedReturnValue();
    v136 = (void *)MEMORY[0x24BDD17C8];
    HMFUptime();
    objc_msgSend(v136, "stringWithFormat:", CFSTR("%.3f"), v137 - v97);
    v138 = (id)objc_claimAutoreleasedReturnValue();
    -[HMDHome uuid](v133, "uuid");
    v139 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedInteger:", objc_msgSend(obj, "count"));
    v140 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138545922;
    v501 = v135;
    v502 = 2114;
    v503 = CFSTR("homeConfigureStart");
    v504 = 2112;
    v505 = CFSTR("Configured accessories");
    v506 = 2114;
    v507 = CFSTR("state");
    v508 = 2112;
    v509 = CFSTR("homeConfiguredAccessories");
    v510 = 2114;
    v511 = CFSTR("duration");
    v512 = 2112;
    v513 = v138;
    v514 = 2114;
    v515 = CFSTR("homeUUID");
    v516 = 2112;
    v517 = v139;
    v518 = 2114;
    v519 = CFSTR("accessoriesCount");
    v520 = 2112;
    v521 = v140;
    _os_log_impl(&dword_2218F0000, v134, OS_LOG_TYPE_INFO, "%{public}@tag=\"%{public}@\" desc=\"%@\" %{public}@=\"%@\" %{public}@=\"%@\" %{public}@=\"%@\" %{public}@=\"%@\", buf, 0x70u);

  }
  objc_autoreleasePoolPop(v132);
  objc_msgSend(MEMORY[0x24BE4F1C0], "sharedInstance");
  v141 = (void *)objc_claimAutoreleasedReturnValue();
  v142 = objc_alloc(MEMORY[0x24BE4F1D0]);
  v143 = (void *)MEMORY[0x24BDD17C8];
  HMFUptime();
  objc_msgSend(v143, "stringWithFormat:", CFSTR("%.3f"), v144 - v97);
  v145 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHome uuid](v133, "uuid");
  v146 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedInteger:", objc_msgSend(obj, "count"));
  v147 = (void *)objc_claimAutoreleasedReturnValue();
  HMDTaggedLoggingCreateDictionary();
  v148 = (void *)objc_claimAutoreleasedReturnValue();
  v149 = (void *)objc_msgSend(v142, "initWithTag:data:", CFSTR("homeConfigureStart"), v148, CFSTR("state"), CFSTR("homeConfiguredAccessories"), CFSTR("duration"), v145, CFSTR("homeUUID"), v146, CFSTR("accessoriesCount"), v147);
  objc_msgSend(MEMORY[0x24BE3F138], "currentTagProcessorList");
  v150 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v141, "submitTaggedEvent:processorList:", v149, v150);

  if (v444)
    -[HMDHome createCoordinationStateManagerForCurrentAccessory:](v133, "createCoordinationStateManagerForCurrentAccessory:", v444);
  v151 = HMFUptime();
  v153 = v152;
  v154 = (void *)MEMORY[0x227676638](v151);
  v155 = v133;
  HMFGetOSLogHandle();
  v156 = (id)objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v156, OS_LOG_TYPE_DEBUG))
  {
    HMFGetLogIdentifier();
    v157 = (id)objc_claimAutoreleasedReturnValue();
    -[HMDHome uuid](v155, "uuid");
    v158 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138544898;
    v501 = v157;
    v502 = 2114;
    v503 = CFSTR("homeConfigureStart");
    v504 = 2112;
    v505 = CFSTR("Configuring rooms, zones, groups, etc");
    v506 = 2114;
    v507 = CFSTR("state");
    v508 = 2112;
    v509 = CFSTR("homeConfigureProperties");
    v510 = 2114;
    v511 = CFSTR("homeUUID");
    v512 = 2112;
    v513 = v158;
    _os_log_impl(&dword_2218F0000, v156, OS_LOG_TYPE_DEBUG, "%{public}@tag=\"%{public}@\" desc=\"%@\" %{public}@=\"%@\" %{public}@=\"%@\", buf, 0x48u);

  }
  objc_autoreleasePoolPop(v154);
  objc_msgSend(MEMORY[0x24BE4F1C0], "sharedInstance");
  v159 = (void *)objc_claimAutoreleasedReturnValue();
  v160 = objc_alloc(MEMORY[0x24BE4F1D0]);
  -[HMDHome uuid](v155, "uuid");
  v161 = (void *)objc_claimAutoreleasedReturnValue();
  HMDTaggedLoggingCreateDictionary();
  v162 = (void *)objc_claimAutoreleasedReturnValue();
  v163 = (void *)objc_msgSend(v160, "initWithTag:data:", CFSTR("homeConfigureStart"), v162, CFSTR("state"), CFSTR("homeConfigureProperties"), CFSTR("homeUUID"), v161);
  objc_msgSend(MEMORY[0x24BE3F138], "currentTagProcessorList");
  v164 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v159, "submitTaggedEvent:processorList:", v163, v164);

  v490 = 0u;
  v491 = 0u;
  v488 = 0u;
  v489 = 0u;
  -[HMDHome rooms](v155, "rooms");
  v165 = (void *)objc_claimAutoreleasedReturnValue();
  v166 = objc_msgSend(v165, "countByEnumeratingWithState:objects:count:", &v488, v538, 16);
  if (v166)
  {
    v167 = *(_QWORD *)v489;
    do
    {
      for (k = 0; k != v166; ++k)
      {
        if (*(_QWORD *)v489 != v167)
          objc_enumerationMutation(v165);
        v169 = *(void **)(*((_QWORD *)&v488 + 1) + 8 * k);
        -[HMDHome msgDispatcher](v155, "msgDispatcher");
        v170 = (void *)objc_claimAutoreleasedReturnValue();
        -[HMDHome workQueue](v155, "workQueue");
        v171 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v169, "configure:queue:", v170, v171);

        objc_msgSend(v169, "name");
        v172 = (void *)objc_claimAutoreleasedReturnValue();
        v173 = -[HMDHome addName:](v155, "addName:", v172);

      }
      v166 = objc_msgSend(v165, "countByEnumeratingWithState:objects:count:", &v488, v538, 16);
    }
    while (v166);
  }

  v486 = 0u;
  v487 = 0u;
  v484 = 0u;
  v485 = 0u;
  -[HMDHome zones](v155, "zones");
  v174 = (void *)objc_claimAutoreleasedReturnValue();
  v175 = objc_msgSend(v174, "countByEnumeratingWithState:objects:count:", &v484, v537, 16);
  if (v175)
  {
    v176 = *(_QWORD *)v485;
    do
    {
      for (m = 0; m != v175; ++m)
      {
        if (*(_QWORD *)v485 != v176)
          objc_enumerationMutation(v174);
        v178 = *(void **)(*((_QWORD *)&v484 + 1) + 8 * m);
        -[HMDHome msgDispatcher](v155, "msgDispatcher");
        v179 = (void *)objc_claimAutoreleasedReturnValue();
        -[HMDHome workQueue](v155, "workQueue");
        v180 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v178, "configure:queue:", v179, v180);

        objc_msgSend(v178, "name");
        v181 = (void *)objc_claimAutoreleasedReturnValue();
        v182 = -[HMDHome addName:](v155, "addName:", v181);

      }
      v175 = objc_msgSend(v174, "countByEnumeratingWithState:objects:count:", &v484, v537, 16);
    }
    while (v175);
  }

  v482 = 0u;
  v483 = 0u;
  v480 = 0u;
  v481 = 0u;
  -[HMDHome serviceGroups](v155, "serviceGroups");
  v183 = (void *)objc_claimAutoreleasedReturnValue();
  v184 = objc_msgSend(v183, "countByEnumeratingWithState:objects:count:", &v480, v536, 16);
  if (v184)
  {
    v185 = *(_QWORD *)v481;
    do
    {
      for (n = 0; n != v184; ++n)
      {
        if (*(_QWORD *)v481 != v185)
          objc_enumerationMutation(v183);
        v187 = *(void **)(*((_QWORD *)&v480 + 1) + 8 * n);
        -[HMDHome msgDispatcher](v155, "msgDispatcher");
        v188 = (void *)objc_claimAutoreleasedReturnValue();
        -[HMDHome workQueue](v155, "workQueue");
        v189 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v187, "configure:queue:", v188, v189);

        objc_msgSend(v187, "name");
        v190 = (void *)objc_claimAutoreleasedReturnValue();
        v191 = -[HMDHome addName:](v155, "addName:", v190);

      }
      v184 = objc_msgSend(v183, "countByEnumeratingWithState:objects:count:", &v480, v536, 16);
    }
    while (v184);
  }

  v478 = 0u;
  v479 = 0u;
  v476 = 0u;
  v477 = 0u;
  -[HMDHome actionSets](v155, "actionSets");
  v192 = (void *)objc_claimAutoreleasedReturnValue();
  v193 = objc_msgSend(v192, "countByEnumeratingWithState:objects:count:", &v476, v535, 16);
  if (v193)
  {
    v452 = 0;
    v194 = *(_QWORD *)v477;
    do
    {
      for (ii = 0; ii != v193; ++ii)
      {
        if (*(_QWORD *)v477 != v194)
          objc_enumerationMutation(v192);
        v196 = *(void **)(*((_QWORD *)&v476 + 1) + 8 * ii);
        v197 = (void *)MEMORY[0x227676638]();
        -[HMDHome msgDispatcher](v155, "msgDispatcher");
        v198 = (void *)objc_claimAutoreleasedReturnValue();
        -[HMDHome workQueue](v155, "workQueue");
        v199 = (void *)objc_claimAutoreleasedReturnValue();
        v200 = objc_msgSend(v196, "configure:messageDispatcher:queue:", v155, v198, v199);

        objc_msgSend(v196, "name");
        v201 = (void *)objc_claimAutoreleasedReturnValue();
        v202 = -[HMDHome addName:](v155, "addName:", v201);

        objc_autoreleasePoolPop(v197);
        v452 |= v200;
      }
      v193 = objc_msgSend(v192, "countByEnumeratingWithState:objects:count:", &v476, v535, 16);
    }
    while (v193);
  }
  else
  {
    v452 = 0;
  }

  v474 = 0u;
  v475 = 0u;
  v472 = 0u;
  v473 = 0u;
  -[HMDHome triggerOwnedActionSets](v155, "triggerOwnedActionSets");
  v203 = (void *)objc_claimAutoreleasedReturnValue();
  v204 = objc_msgSend(v203, "countByEnumeratingWithState:objects:count:", &v472, v534, 16);
  if (v204)
  {
    v205 = *(_QWORD *)v473;
    do
    {
      for (jj = 0; jj != v204; ++jj)
      {
        if (*(_QWORD *)v473 != v205)
          objc_enumerationMutation(v203);
        v207 = *(void **)(*((_QWORD *)&v472 + 1) + 8 * jj);
        v208 = (void *)MEMORY[0x227676638]();
        -[HMDHome msgDispatcher](v155, "msgDispatcher");
        v209 = (void *)objc_claimAutoreleasedReturnValue();
        -[HMDHome workQueue](v155, "workQueue");
        v210 = (void *)objc_claimAutoreleasedReturnValue();
        LOBYTE(v207) = objc_msgSend(v207, "configure:messageDispatcher:queue:", v155, v209, v210);

        objc_autoreleasePoolPop(v208);
        v452 |= v207;
      }
      v204 = objc_msgSend(v203, "countByEnumeratingWithState:objects:count:", &v472, v534, 16);
    }
    while (v204);
  }

  v470 = 0u;
  v471 = 0u;
  v468 = 0u;
  v469 = 0u;
  -[HMDHome triggers](v155, "triggers");
  v211 = (void *)objc_claimAutoreleasedReturnValue();
  v212 = objc_msgSend(v211, "countByEnumeratingWithState:objects:count:", &v468, v533, 16);
  if (v212)
  {
    v213 = *(_QWORD *)v469;
    do
    {
      for (kk = 0; kk != v212; ++kk)
      {
        if (*(_QWORD *)v469 != v213)
          objc_enumerationMutation(v211);
        v215 = *(void **)(*((_QWORD *)&v468 + 1) + 8 * kk);
        -[HMDHome msgDispatcher](v155, "msgDispatcher");
        v216 = (void *)objc_claimAutoreleasedReturnValue();
        -[HMDHome workQueue](v155, "workQueue");
        v217 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v215, "configure:messageDispatcher:queue:", v155, v216, v217);

        objc_msgSend(v215, "owner");
        v218 = (void *)objc_claimAutoreleasedReturnValue();
        LODWORD(v216) = v218 == 0;

        if ((_DWORD)v216)
        {
          -[HMDHome currentUser](v155, "currentUser");
          v219 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v215, "setOwner:", v219);

        }
        v220 = (void *)MEMORY[0x227676638]();
        v221 = v155;
        HMFGetOSLogHandle();
        v222 = (id)objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v222, OS_LOG_TYPE_INFO))
        {
          HMFGetLogIdentifier();
          v223 = (id)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543362;
          v501 = v223;
          _os_log_impl(&dword_2218F0000, v222, OS_LOG_TYPE_INFO, "%{public}@Not updating trigger owning device in HH2", buf, 0xCu);

        }
        objc_autoreleasePoolPop(v220);
      }
      v212 = objc_msgSend(v211, "countByEnumeratingWithState:objects:count:", &v468, v533, 16);
    }
    while (v212);
  }

  v224 = (void *)MEMORY[0x227676638]();
  v225 = v155;
  HMFGetOSLogHandle();
  v226 = (id)objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v226, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v227 = (id)objc_claimAutoreleasedReturnValue();
    v228 = (void *)MEMORY[0x24BDD17C8];
    HMFUptime();
    objc_msgSend(v228, "stringWithFormat:", CFSTR("%.3f"), v229 - v153);
    v230 = (id)objc_claimAutoreleasedReturnValue();
    -[HMDHome uuid](v225, "uuid");
    v231 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138545410;
    v501 = v227;
    v502 = 2114;
    v503 = CFSTR("homeConfigureStart");
    v504 = 2112;
    v505 = CFSTR("Configured rooms, zones, triggers, etc.");
    v506 = 2114;
    v507 = CFSTR("state");
    v508 = 2112;
    v509 = CFSTR("homeConfiguredProperties");
    v510 = 2114;
    v511 = CFSTR("duration");
    v512 = 2112;
    v513 = v230;
    v514 = 2114;
    v515 = CFSTR("homeUUID");
    v516 = 2112;
    v517 = v231;
    _os_log_impl(&dword_2218F0000, v226, OS_LOG_TYPE_INFO, "%{public}@tag=\"%{public}@\" desc=\"%@\" %{public}@=\"%@\" %{public}@=\"%@\" %{public}@=\"%@\", buf, 0x5Cu);

  }
  objc_autoreleasePoolPop(v224);
  objc_msgSend(MEMORY[0x24BE4F1C0], "sharedInstance");
  v232 = (void *)objc_claimAutoreleasedReturnValue();
  v233 = objc_alloc(MEMORY[0x24BE4F1D0]);
  v234 = (void *)MEMORY[0x24BDD17C8];
  HMFUptime();
  objc_msgSend(v234, "stringWithFormat:", CFSTR("%.3f"), v235 - v153);
  v236 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHome uuid](v225, "uuid");
  v237 = (void *)objc_claimAutoreleasedReturnValue();
  HMDTaggedLoggingCreateDictionary();
  v238 = (void *)objc_claimAutoreleasedReturnValue();
  v239 = (void *)objc_msgSend(v233, "initWithTag:data:", CFSTR("homeConfigureStart"), v238, CFSTR("state"), CFSTR("homeConfiguredProperties"), CFSTR("duration"), v236, CFSTR("homeUUID"), v237);
  objc_msgSend(MEMORY[0x24BE3F138], "currentTagProcessorList");
  v240 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v232, "submitTaggedEvent:processorList:", v239, v240);

  v241 = HMFUptime();
  v243 = v242;
  v244 = (void *)MEMORY[0x227676638](v241);
  v245 = v225;
  HMFGetOSLogHandle();
  v246 = (id)objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v246, OS_LOG_TYPE_DEBUG))
  {
    HMFGetLogIdentifier();
    v247 = (id)objc_claimAutoreleasedReturnValue();
    -[HMDHome uuid](v245, "uuid");
    v248 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138544898;
    v501 = v247;
    v502 = 2114;
    v503 = CFSTR("homeConfigureStart");
    v504 = 2112;
    v505 = CFSTR("Configuring users");
    v506 = 2114;
    v507 = CFSTR("state");
    v508 = 2112;
    v509 = CFSTR("homeConfigureUsers");
    v510 = 2114;
    v511 = CFSTR("homeUUID");
    v512 = 2112;
    v513 = v248;
    _os_log_impl(&dword_2218F0000, v246, OS_LOG_TYPE_DEBUG, "%{public}@tag=\"%{public}@\" desc=\"%@\" %{public}@=\"%@\" %{public}@=\"%@\", buf, 0x48u);

  }
  objc_autoreleasePoolPop(v244);
  objc_msgSend(MEMORY[0x24BE4F1C0], "sharedInstance");
  v249 = (void *)objc_claimAutoreleasedReturnValue();
  v250 = objc_alloc(MEMORY[0x24BE4F1D0]);
  -[HMDHome uuid](v245, "uuid");
  v251 = (void *)objc_claimAutoreleasedReturnValue();
  HMDTaggedLoggingCreateDictionary();
  v252 = (void *)objc_claimAutoreleasedReturnValue();
  v253 = (void *)objc_msgSend(v250, "initWithTag:data:", CFSTR("homeConfigureStart"), v252, CFSTR("state"), CFSTR("homeConfigureUsers"), CFSTR("homeUUID"), v251);
  objc_msgSend(MEMORY[0x24BE3F138], "currentTagProcessorList");
  v254 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v249, "submitTaggedEvent:processorList:", v253, v254);

  v466 = 0u;
  v467 = 0u;
  v464 = 0u;
  v465 = 0u;
  -[HMDHome removedUsers](v245, "removedUsers");
  v255 = (void *)objc_claimAutoreleasedReturnValue();
  v256 = objc_msgSend(v255, "countByEnumeratingWithState:objects:count:", &v464, v532, 16);
  if (v256)
  {
    v257 = *(_QWORD *)v465;
    do
    {
      for (mm = 0; mm != v256; ++mm)
      {
        if (*(_QWORD *)v465 != v257)
          objc_enumerationMutation(v255);
        objc_msgSend(*(id *)(*((_QWORD *)&v464 + 1) + 8 * mm), "user");
        v259 = (void *)objc_claimAutoreleasedReturnValue();
        -[HMDHome _addUserToIdentityRegistry:](v245, "_addUserToIdentityRegistry:", v259);

      }
      v256 = objc_msgSend(v255, "countByEnumeratingWithState:objects:count:", &v464, v532, 16);
    }
    while (v256);
  }

  v462 = 0u;
  v463 = 0u;
  v460 = 0u;
  v461 = 0u;
  -[HMDHome users](v245, "users");
  v439 = (id)objc_claimAutoreleasedReturnValue();
  v260 = objc_msgSend(v439, "countByEnumeratingWithState:objects:count:", &v460, v531, 16);
  if (v260)
  {
    v447 = *(_QWORD *)v461;
    do
    {
      for (nn = 0; nn != v260; ++nn)
      {
        if (*(_QWORD *)v461 != v447)
          objc_enumerationMutation(v439);
        v262 = *(__CFString **)(*((_QWORD *)&v460 + 1) + 8 * nn);
        -[__CFString userID](v262, "userID");
        v263 = (void *)objc_claimAutoreleasedReturnValue();
        v264 = -[__CFString isRemoteGateway](v262, "isRemoteGateway");
        if (v263)
          v265 = v264;
        else
          v265 = 1;
        if ((v265 & 1) == 0)
        {
          +[HMDDeviceHandle deviceHandleForDestination:](HMDDeviceHandle, "deviceHandleForDestination:", v263);
          v266 = (void *)objc_claimAutoreleasedReturnValue();
          if (v266)
          {
            v267 = (void *)MEMORY[0x227676638]();
            v268 = v245;
            HMFGetOSLogHandle();
            v269 = (id)objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v269, OS_LOG_TYPE_DEFAULT))
            {
              HMFGetLogIdentifier();
              v270 = (id)objc_claimAutoreleasedReturnValue();
              *(_DWORD *)buf = 138543618;
              v501 = v270;
              v502 = 2112;
              v503 = v262;
              _os_log_impl(&dword_2218F0000, v269, OS_LOG_TYPE_DEFAULT, "%{public}@Migrating invalid resident user: %@", buf, 0x16u);

            }
            objc_autoreleasePoolPop(v267);
            -[HMDHome _removeUser:](v268, "_removeUser:", v262);
            +[HMDAccountRegistry sharedRegistry](HMDAccountRegistry, "sharedRegistry");
            v271 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v271, "deviceForHandle:", v266);
            v272 = (void *)objc_claimAutoreleasedReturnValue();

            v273 = [HMDResidentUser alloc];
            -[__CFString pairingIdentity](v262, "pairingIdentity");
            v274 = (void *)objc_claimAutoreleasedReturnValue();
            v275 = -[HMDResidentUser initWithDevice:home:pairingIdentity:configurationState:](v273, "initWithDevice:home:pairingIdentity:configurationState:", v272, v268, v274, 0);

            -[__CFString uuid](v262, "uuid");
            v276 = (void *)objc_claimAutoreleasedReturnValue();
            -[HMDUser setUUID:](v275, "setUUID:", v276);

            -[HMDHome addUser:](v268, "addUser:", v275);
          }

        }
        -[HMDHome _addUserToIdentityRegistry:](v245, "_addUserToIdentityRegistry:", v262);
        -[__CFString configureWithHome:](v262, "configureWithHome:", v245);

      }
      v260 = objc_msgSend(v439, "countByEnumeratingWithState:objects:count:", &v460, v531, 16);
    }
    while (v260);
  }

  v277 = (void *)MEMORY[0x227676638]();
  v278 = v245;
  HMFGetOSLogHandle();
  v279 = (id)objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v279, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v280 = (id)objc_claimAutoreleasedReturnValue();
    v281 = (void *)MEMORY[0x24BDD17C8];
    HMFUptime();
    objc_msgSend(v281, "stringWithFormat:", CFSTR("%.3f"), v282 - v243);
    v283 = (id)objc_claimAutoreleasedReturnValue();
    v284 = (void *)MEMORY[0x24BDD16E0];
    -[HMDHome users](v278, "users");
    v285 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v284, "numberWithUnsignedInteger:", objc_msgSend(v285, "count"));
    v286 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138545410;
    v501 = v280;
    v502 = 2114;
    v503 = CFSTR("homeConfigureStart");
    v504 = 2112;
    v505 = CFSTR("Configured users");
    v506 = 2114;
    v507 = CFSTR("state");
    v508 = 2112;
    v509 = CFSTR("homeConfiguredUsers");
    v510 = 2114;
    v511 = CFSTR("duration");
    v512 = 2112;
    v513 = v283;
    v514 = 2114;
    v515 = CFSTR("usersCount");
    v516 = 2112;
    v517 = v286;
    _os_log_impl(&dword_2218F0000, v279, OS_LOG_TYPE_INFO, "%{public}@tag=\"%{public}@\" desc=\"%@\" %{public}@=\"%@\" %{public}@=\"%@\" %{public}@=\"%@\", buf, 0x5Cu);

  }
  objc_autoreleasePoolPop(v277);
  objc_msgSend(MEMORY[0x24BE4F1C0], "sharedInstance");
  v287 = (void *)objc_claimAutoreleasedReturnValue();
  v288 = objc_alloc(MEMORY[0x24BE4F1D0]);
  v289 = (void *)MEMORY[0x24BDD17C8];
  HMFUptime();
  objc_msgSend(v289, "stringWithFormat:", CFSTR("%.3f"), v290 - v243);
  v291 = (void *)objc_claimAutoreleasedReturnValue();
  v292 = (void *)MEMORY[0x24BDD16E0];
  -[HMDHome users](v278, "users");
  v293 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v292, "numberWithUnsignedInteger:", objc_msgSend(v293, "count"));
  v294 = (void *)objc_claimAutoreleasedReturnValue();
  HMDTaggedLoggingCreateDictionary();
  v295 = (void *)objc_claimAutoreleasedReturnValue();
  v296 = (void *)objc_msgSend(v288, "initWithTag:data:", CFSTR("homeConfigureStart"), v295, CFSTR("state"), CFSTR("homeConfiguredUsers"), CFSTR("duration"), v291, CFSTR("usersCount"), v294);
  objc_msgSend(MEMORY[0x24BE3F138], "currentTagProcessorList");
  v297 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v287, "submitTaggedEvent:processorList:", v296, v297);

  -[HMDHome networkProtectionGroupRegistry](v278, "networkProtectionGroupRegistry");
  v298 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v298, "configure");

  -[HMDHome localCapabilitiesDataSource](v278, "localCapabilitiesDataSource");
  v299 = (void *)objc_claimAutoreleasedReturnValue();
  LODWORD(v291) = objc_msgSend(v299, "isResidentCapable");

  if ((_DWORD)v291)
  {
    -[HMDHome uuid](v278, "uuid");
    v300 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v300, "UUIDString");
    v301 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(CFSTR("Home.EventRouter.Server.Delegating."), "stringByAppendingString:", v301);
    v302 = (void *)objc_claimAutoreleasedReturnValue();

    v303 = objc_alloc(MEMORY[0x24BE4ED78]);
    objc_msgSend(v437, "workQueue");
    v304 = (void *)objc_claimAutoreleasedReturnValue();
    v305 = objc_retainAutorelease(v302);
    v306 = objc_msgSend(v305, "UTF8String");
    -[HMDHome uuid](v278, "uuid");
    v307 = (void *)objc_claimAutoreleasedReturnValue();
    v308 = objc_msgSend(v303, "initWithQueue:dataSource:storeReadHandle:logCategory:identifier:", v304, v278, 0, v306, v307);
    serverDelegatingEventRouter = v278->_serverDelegatingEventRouter;
    v278->_serverDelegatingEventRouter = (HMEDelegatingEventRouter *)v308;

    -[HMDHome createRemoteEventRouterServerIfNeeded](v278, "createRemoteEventRouterServerIfNeeded");
  }
  +[HMDUserMessagePolicy userMessagePolicyWithHome:userPrivilege:remoteAccessRequired:](HMDUserMessagePolicy, "userMessagePolicyWithHome:userPrivilege:remoteAccessRequired:", v278, 3, 0);
  v440 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v437, "eventRouterAssertionController");
  v438 = (void *)objc_claimAutoreleasedReturnValue();
  v310 = [HMDHomeRemoteEventRouterClientController alloc];
  -[HMDHome messageTargetUUID](v278, "messageTargetUUID");
  v311 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v437, "workQueue");
  v312 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v444, "uuid");
  v313 = (void *)objc_claimAutoreleasedReturnValue();
  v314 = -[HMDHomeRemoteEventRouterClientController initWithMessageTargetUUID:workQueue:dataSource:requestMessageName:updateMessageName:multiHopFetchResponseMessageName:clientUserMessagePolicy:currentAccessoryUUID:assertionController:](v310, "initWithMessageTargetUUID:workQueue:dataSource:requestMessageName:updateMessageName:multiHopFetchResponseMessageName:clientUserMessagePolicy:currentAccessoryUUID:assertionController:", v311, v312, v278, CFSTR("RemoteEventRouterRequestMessage"), CFSTR("RemoteEventRouterUpdateMessageName"), CFSTR("RER.MHF.ResponseMessageName"), v440, v313, v438);
  -[HMDHome setRemoteEventRouterClientController:](v278, "setRemoteEventRouterClientController:", v314);

  objc_msgSend(v437, "localAndRemoteSubscriptionProvider");
  v315 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v316 = v315;
  else
    v316 = 0;
  v435 = v316;

  -[HMDHome remoteEventRouterClientController](v278, "remoteEventRouterClientController");
  v317 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v317, "residentDelegatingEventRouter");
  v448 = (void *)objc_claimAutoreleasedReturnValue();

  if (v448)
    objc_msgSend(v435, "registerSubRouter:", v448);
  -[HMDHome accessoryInfoFetchController](v278, "accessoryInfoFetchController");
  v318 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHome msgDispatcher](v278, "msgDispatcher");
  v319 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHome remoteEventRouterClientController](v278, "remoteEventRouterClientController");
  v320 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v318, "configureWithMessageDispatcher:remoteEventRouterClientController:", v319, v320);

  objc_initWeak(&location, v278);
  -[HMDHome workQueue](v278, "workQueue");
  v321 = objc_claimAutoreleasedReturnValue();
  v322 = MEMORY[0x24BDAC760];
  block[0] = MEMORY[0x24BDAC760];
  block[1] = 3221225472;
  block[2] = __86__HMDHome_configureWithHomeManager_accessoriesPresent_uncommittedTransactions_source___block_invoke;
  block[3] = &unk_24E798328;
  objc_copyWeak(&v458, &location);
  v432 = v444;
  v455 = v432;
  obja = obj;
  v456 = obja;
  v434 = v433;
  v457 = v434;
  dispatch_group_notify(group, v321, block);

  -[HMDHome uuid](v278, "uuid");
  v323 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v437, "removeHomeFromAwaitingAutoAcceptHomes:", v323);

  v324 = HMFUptime();
  v326 = v325;
  v327 = (void *)MEMORY[0x227676638](v324);
  v328 = v278;
  HMFGetOSLogHandle();
  v329 = (id)objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v329, OS_LOG_TYPE_DEBUG))
  {
    HMFGetLogIdentifier();
    v330 = (id)objc_claimAutoreleasedReturnValue();
    -[HMDHome uuid](v328, "uuid");
    v331 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138544898;
    v501 = v330;
    v502 = 2114;
    v503 = CFSTR("homeConfigureStart");
    v504 = 2112;
    v505 = CFSTR("Configuring profiles and settings");
    v506 = 2114;
    v507 = CFSTR("state");
    v508 = 2112;
    v509 = CFSTR("homeConfigureProfiles");
    v510 = 2114;
    v511 = CFSTR("homeUUID");
    v512 = 2112;
    v513 = v331;
    _os_log_impl(&dword_2218F0000, v329, OS_LOG_TYPE_DEBUG, "%{public}@tag=\"%{public}@\" desc=\"%@\" %{public}@=\"%@\" %{public}@=\"%@\", buf, 0x48u);

  }
  objc_autoreleasePoolPop(v327);
  objc_msgSend(MEMORY[0x24BE4F1C0], "sharedInstance");
  v332 = (void *)objc_claimAutoreleasedReturnValue();
  v333 = objc_alloc(MEMORY[0x24BE4F1D0]);
  -[HMDHome uuid](v328, "uuid");
  v334 = (void *)objc_claimAutoreleasedReturnValue();
  HMDTaggedLoggingCreateDictionary();
  v335 = (void *)objc_claimAutoreleasedReturnValue();
  v336 = (void *)objc_msgSend(v333, "initWithTag:data:", CFSTR("homeConfigureStart"), v335, CFSTR("state"), CFSTR("homeConfigureProfiles"), CFSTR("homeUUID"), v334);
  objc_msgSend(MEMORY[0x24BE3F138], "currentTagProcessorList");
  v337 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v332, "submitTaggedEvent:processorList:", v336, v337);

  v338 = (void *)MEMORY[0x227676638]();
  -[HMDHome _registerForMessages](v328, "_registerForMessages");
  objc_autoreleasePoolPop(v338);
  -[HMDHome _registerForNotifications](v328, "_registerForNotifications");
  -[HMDHome resubscribeForNotificationsOnResident:](v328, "resubscribeForNotificationsOnResident:", 0);
  -[HMDHome configureMultiuserSettingsMessengerWithMessengerFactory:](v328, "configureMultiuserSettingsMessengerWithMessengerFactory:", v328);
  -[HMDHome _evaluateShouldRelaunchAndSetRelaunch](v328, "_evaluateShouldRelaunchAndSetRelaunch");
  v339 = (void *)MEMORY[0x227676638](-[HMDHome reEvaluateHomeHubState](v328, "reEvaluateHomeHubState"));
  v340 = v328;
  HMFGetOSLogHandle();
  v341 = (id)objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v341, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v342 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v340, "triggers");
    v343 = (__CFString *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543618;
    v501 = v342;
    v502 = 2112;
    v503 = v343;
    _os_log_impl(&dword_2218F0000, v341, OS_LOG_TYPE_INFO, "%{public}@Triggers: %@", buf, 0x16u);

  }
  objc_autoreleasePoolPop(v339);
  objc_msgSend(v340, "migrateAfterResidentChange");
  objc_msgSend(v340, "_updateWoWState:", v443);
  if ((v452 & 1) != 0 && objc_msgSend(v340, "isOwnerUser"))
    objc_msgSend(v340, "_updateConfigurationVersion");
  v344 = -[HMDMediaActionRouter initWithDataSource:]([HMDMediaActionRouter alloc], "initWithDataSource:", v340);
  objc_msgSend(v340, "setMediaActionRouter:", v344);

  objc_msgSend(v340, "personDataManager");
  v345 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v345, "configure");

  v346 = -[HMDUserActionPredictionManager initWithHome:]([HMDUserActionPredictionManager alloc], "initWithHome:", v340);
  objc_msgSend(v340, "setUserActionPredictionManager:", v346);

  objc_msgSend(v340, "userActionPredictionManager");
  v347 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v347, "configure");

  objc_msgSend(v340, "reachabilityNotificationManager");
  v348 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v437, "messageDispatcher");
  v349 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v349, "secureRemoteTransport");
  v350 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v350, "deviceMonitor");
  v351 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v348, "configureWithHome:deviceMonitor:", v340, v351);

  objc_msgSend(v340, "configureNaturalLightingWithDemoModeEnabled:", 0);
  objc_msgSend(v340, "walletKeyManager");
  v352 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v352, "configureWithHome:", v340);

  objc_msgSend(v340, "nfcReaderKeyManager");
  v353 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v353, "configureWithHome:", v340);

  objc_msgSend(v340, "lockNotificationManager");
  v354 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v354, "configureWithHome:", v340);

  objc_msgSend(v340, "analysisStatePublisher");
  v355 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v355, "configureWithHome:", v340);

  objc_msgSend(v340, "configurePrimaryResidentMessageRouterWithFactory:metricsDispatcherFactory:", v340, v340);
  v356 = [HMDAppleMediaAccessoryMessageRouter alloc];
  objc_msgSend(v340, "uuid");
  v357 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v340, "msgDispatcher");
  v358 = (void *)objc_claimAutoreleasedReturnValue();
  v359 = -[HMDAppleMediaAccessoryMessageRouter initWithIdentifier:messageDispatcher:](v356, "initWithIdentifier:messageDispatcher:", v357, v358);
  objc_msgSend(v340, "setAppleDeviceRouter:", v359);

  objc_msgSend(v340, "appleDeviceRouter");
  v360 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v360, "setDataSource:", v340);

  v361 = [HMDDelegatingMessageRouter alloc];
  objc_msgSend(v340, "msgDispatcher");
  v362 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v340, "appleDeviceRouter");
  v363 = (void *)objc_claimAutoreleasedReturnValue();
  v530[0] = v363;
  objc_msgSend(v340, "primaryResidentMessageRouter");
  v364 = (void *)objc_claimAutoreleasedReturnValue();
  v530[1] = v364;
  objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", v530, 2);
  v365 = (void *)objc_claimAutoreleasedReturnValue();
  v366 = -[HMDDelegatingMessageRouter initWithMessageDispatcher:routers:](v361, "initWithMessageDispatcher:routers:", v362, v365);
  objc_msgSend(v340, "setAccessoryMessageRouterViaPrimary:", v366);

  objc_msgSend(v340, "accessoryMessageRouterViaPrimary");
  v367 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v367, "setDataSource:", v340);

  objc_msgSend(v340, "configureUnifiedLanguageValueListSettingDataProviderWithFactory:", v340);
  objc_msgSend(v340, "configureAccessorySettingsMessengerWithMessengerFactory:messageHandlerFactory:", v340, v340);
  objc_msgSend(v340, "configureSiriEndpointProfilesMessengerWithMessengerFactory:messageHandlerFactory:", v340, v340);
  objc_msgSend(v340, "accessoryConnectionCoordinator");
  v368 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v340, "localCapabilitiesDataSource");
  v369 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v368, "configureWithIsResidentCapable:", objc_msgSend(v369, "isResidentCapable"));

  objc_msgSend(v340, "workQueue");
  v370 = objc_claimAutoreleasedReturnValue();
  v453[0] = v322;
  v453[1] = 3221225472;
  v453[2] = __86__HMDHome_configureWithHomeManager_accessoriesPresent_uncommittedTransactions_source___block_invoke_596;
  v453[3] = &unk_24E79C240;
  v453[4] = v340;
  dispatch_async(v370, v453);

  v371 = (void *)MEMORY[0x227676638]();
  v372 = v340;
  HMFGetOSLogHandle();
  v373 = (id)objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v373, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v374 = (id)objc_claimAutoreleasedReturnValue();
    v375 = (void *)MEMORY[0x24BDD17C8];
    HMFUptime();
    objc_msgSend(v375, "stringWithFormat:", CFSTR("%.3f"), v376 - v326);
    v377 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v372, "uuid");
    v378 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138545410;
    v501 = v374;
    v502 = 2114;
    v503 = CFSTR("homeConfigureStart");
    v504 = 2112;
    v505 = CFSTR("Configured profiles and settings");
    v506 = 2114;
    v507 = CFSTR("state");
    v508 = 2112;
    v509 = CFSTR("homeConfiguredProfiles");
    v510 = 2114;
    v511 = CFSTR("duration");
    v512 = 2112;
    v513 = v377;
    v514 = 2114;
    v515 = CFSTR("homeUUID");
    v516 = 2112;
    v517 = v378;
    _os_log_impl(&dword_2218F0000, v373, OS_LOG_TYPE_INFO, "%{public}@tag=\"%{public}@\" desc=\"%@\" %{public}@=\"%@\" %{public}@=\"%@\" %{public}@=\"%@\", buf, 0x5Cu);

  }
  objc_autoreleasePoolPop(v371);
  objc_msgSend(MEMORY[0x24BE4F1C0], "sharedInstance");
  v379 = (void *)objc_claimAutoreleasedReturnValue();
  v380 = objc_alloc(MEMORY[0x24BE4F1D0]);
  v381 = (void *)MEMORY[0x24BDD17C8];
  HMFUptime();
  objc_msgSend(v381, "stringWithFormat:", CFSTR("%.3f"), v382 - v326);
  v383 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v372, "uuid");
  v384 = (void *)objc_claimAutoreleasedReturnValue();
  HMDTaggedLoggingCreateDictionary();
  v385 = (void *)objc_claimAutoreleasedReturnValue();
  v386 = (void *)objc_msgSend(v380, "initWithTag:data:", CFSTR("homeConfigureStart"), v385, CFSTR("state"), CFSTR("homeConfiguredProfiles"), CFSTR("duration"), v383, CFSTR("homeUUID"), v384);
  objc_msgSend(MEMORY[0x24BE3F138], "currentTagProcessorList");
  v387 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v379, "submitTaggedEvent:processorList:", v386, v387);

  v388 = [HMDResidentSyncManager alloc];
  objc_msgSend(MEMORY[0x24BDD16D0], "defaultCenter");
  v389 = (void *)objc_claimAutoreleasedReturnValue();
  +[HMDMainDriver driver](HMDMainDriver, "driver");
  v390 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v390, "coreData");
  v391 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v372, "logEventSubmitter");
  v392 = (void *)objc_claimAutoreleasedReturnValue();
  v393 = -[HMDResidentSyncManager initWithHome:notificationCenter:persistence:logEventSubmitter:](v388, "initWithHome:notificationCenter:persistence:logEventSubmitter:", v372, v389, v391, v392);
  objc_msgSend(v372, "setResidentSyncManager:", v393);

  objc_msgSend(v372, "residentSyncManager");
  v394 = (void *)objc_claimAutoreleasedReturnValue();
  v395 = (id)objc_msgSend(v394, "start");

  objc_msgSend(v372, "dailyScheduler");
  v396 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v396, "registerDailyTaskRunner:", v372);

  v397 = (void *)MEMORY[0x227676638](objc_msgSend(v372, "updateAccessoryBrowsing"));
  v398 = v372;
  HMFGetOSLogHandle();
  v399 = (id)objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v399, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v400 = (id)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543362;
    v501 = v400;
    _os_log_impl(&dword_2218F0000, v399, OS_LOG_TYPE_INFO, "%{public}@Configuring HMDUserActivityStateDetectorManager - configureWithHomeManager", buf, 0xCu);

  }
  objc_autoreleasePoolPop(v397);
  objc_msgSend(v398, "configureUserActivityStateDetectorManager");
  v401 = (void *)MEMORY[0x227676638](objc_msgSend(v398[129], "configureWithHome:", v398));
  v402 = v398;
  HMFGetOSLogHandle();
  v403 = (id)objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v403, OS_LOG_TYPE_INFO))
  {
    v445 = v401;
    HMFGetLogIdentifier();
    v404 = (id)objc_claimAutoreleasedReturnValue();
    v405 = (void *)MEMORY[0x24BDD17C8];
    HMFUptime();
    objc_msgSend(v405, "stringWithFormat:", CFSTR("%.3f"), v406 - v11);
    v407 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v402, "uuid");
    v408 = (void *)objc_claimAutoreleasedReturnValue();
    HMFBooleanToString();
    v409 = (id)objc_claimAutoreleasedReturnValue();
    v410 = (void *)MEMORY[0x24BDD16E0];
    objc_msgSend(v402, "accessories");
    v411 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v410, "numberWithUnsignedInteger:", objc_msgSend(v411, "count"));
    v412 = (void *)objc_claimAutoreleasedReturnValue();
    v413 = (void *)MEMORY[0x24BDD16E0];
    objc_msgSend(v402, "users");
    v414 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v413, "numberWithUnsignedInteger:", objc_msgSend(v414, "count"));
    v415 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138546946;
    v501 = v404;
    v502 = 2114;
    v503 = CFSTR("homeConfigureDone");
    v504 = 2112;
    v505 = CFSTR("Configured home");
    v506 = 2114;
    v507 = CFSTR("state");
    v508 = 2112;
    v509 = CFSTR("end");
    v510 = 2114;
    v511 = CFSTR("duration");
    v512 = 2112;
    v513 = v407;
    v514 = 2114;
    v515 = CFSTR("homeUUID");
    v516 = 2112;
    v517 = v408;
    v518 = 2114;
    v519 = CFSTR("configChanged");
    v520 = 2112;
    v521 = v409;
    v522 = 2114;
    v523 = CFSTR("accessoriesCount");
    v524 = 2112;
    v525 = v412;
    v526 = 2114;
    v527 = CFSTR("usersCount");
    v528 = 2112;
    v529 = v415;
    _os_log_impl(&dword_2218F0000, v403, OS_LOG_TYPE_INFO, "%{public}@tag=\"%{public}@\" desc=\"%@\" %{public}@=\"%@\" %{public}@=\"%@\" %{public}@=\"%@\" %{public}@=\"%@\" %{public}@=\"%@\" %{public}@=\"%@\", buf, 0x98u);

    v401 = v445;
  }

  objc_autoreleasePoolPop(v401);
  objc_msgSend(MEMORY[0x24BE4F1C0], "sharedInstance");
  v446 = (void *)objc_claimAutoreleasedReturnValue();
  v416 = objc_alloc(MEMORY[0x24BE4F1D0]);
  v417 = (void *)MEMORY[0x24BDD17C8];
  HMFUptime();
  objc_msgSend(v417, "stringWithFormat:", CFSTR("%.3f"), v418 - v11);
  v419 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v402, "uuid");
  v420 = (void *)objc_claimAutoreleasedReturnValue();
  HMFBooleanToString();
  v421 = (void *)objc_claimAutoreleasedReturnValue();
  v422 = (void *)MEMORY[0x24BDD16E0];
  objc_msgSend(v402, "accessories");
  v423 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v422, "numberWithUnsignedInteger:", objc_msgSend(v423, "count"));
  v424 = (void *)objc_claimAutoreleasedReturnValue();
  v425 = (void *)MEMORY[0x24BDD16E0];
  objc_msgSend(v402, "users");
  v426 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v425, "numberWithUnsignedInteger:", objc_msgSend(v426, "count"));
  v427 = (void *)objc_claimAutoreleasedReturnValue();
  HMDTaggedLoggingCreateDictionary();
  v428 = (void *)objc_claimAutoreleasedReturnValue();
  v429 = (void *)objc_msgSend(v416, "initWithTag:data:", CFSTR("homeConfigureDone"), v428, CFSTR("state"), CFSTR("end"), CFSTR("duration"), v419, CFSTR("homeUUID"), v420, CFSTR("configChanged"), v421, CFSTR("accessoriesCount"), v424, CFSTR("usersCount"), v427);
  objc_msgSend(MEMORY[0x24BE3F138], "currentTagProcessorList");
  v430 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v446, "submitTaggedEvent:processorList:", v429, v430);

  objc_destroyWeak(&v458);
  objc_destroyWeak(&location);

  return v452 & 1;
}

- (void)configureAfterAccessoriesConfigurationTrackerNotificationsWithCurrentAccessory:(id)a3 accessories:(id)a4 uncommittedTransactions:(id)a5
{
  id v8;
  id v9;
  id v10;
  void *v11;
  HMDHome *v12;
  NSObject *v13;
  void *v14;
  NSObject *v15;
  uint64_t v16;
  void *v17;
  HMDHome *v18;
  NSObject *v19;
  void *v20;
  id v21;
  id v22;
  char isKindOfClass;
  void *v24;
  id v25;
  void *v26;
  void *v27;
  int v28;
  HMDFetchedAccessorySettingsSubscriber *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  HMDFetchedAccessorySettingsSubscriber *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  HMDHomeMediaStateSubscriber *v40;
  void *v41;
  void *v42;
  void *v43;
  void *v44;
  HMDHomeMediaStateSubscriber *v45;
  void *v46;
  uint64_t v47;
  void *v48;
  void *v49;
  void *v50;
  void *v51;
  const __CFString *v52;
  uint8_t buf[4];
  void *v54;
  __int16 v55;
  id v56;
  uint64_t v57;

  v57 = *MEMORY[0x24BDAC8D0];
  v8 = a3;
  v9 = a4;
  v10 = a5;
  v11 = (void *)MEMORY[0x227676638]();
  v12 = self;
  HMFGetOSLogHandle();
  v13 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543362;
    v54 = v14;
    _os_log_impl(&dword_2218F0000, v13, OS_LOG_TYPE_INFO, "%{public}@Configuring after accessories configuration tracker notifications", buf, 0xCu);

  }
  objc_autoreleasePoolPop(v11);
  -[HMDHome workQueue](v12, "workQueue");
  v15 = objc_claimAutoreleasedReturnValue();
  dispatch_assert_queue_V2(v15);

  -[HMDHome configureBulletinNotification](v12, "configureBulletinNotification");
  v16 = -[HMDHome _evaluateNetworkProtectionAndRouterManagement](v12, "_evaluateNetworkProtectionAndRouterManagement");
  if (v8)
  {
    v17 = (void *)MEMORY[0x227676638](v16);
    v18 = v12;
    HMFGetOSLogHandle();
    v19 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v54 = v20;
      v55 = 2112;
      v56 = v8;
      _os_log_impl(&dword_2218F0000, v19, OS_LOG_TYPE_INFO, "%{public}@Setting up media session for current accessory during configure - %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v17);
    v21 = -[HMDHome _addMediaSessionForCurrentAccessory:](v18, "_addMediaSessionForCurrentAccessory:", v8);
    v22 = v8;
    objc_opt_class();
    isKindOfClass = objc_opt_isKindOfClass();
    if ((isKindOfClass & 1) != 0)
      v24 = v22;
    else
      v24 = 0;
    v25 = v24;

    if ((isKindOfClass & 1) != 0)
      objc_msgSend(v22, "configureSensors");

  }
  -[HMDHome homeManager](v12, "homeManager");
  v26 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHome localCapabilitiesDataSource](v12, "localCapabilitiesDataSource");
  v27 = (void *)objc_claimAutoreleasedReturnValue();
  v28 = objc_msgSend(v27, "isResidentCapable");

  if (v28)
  {
    v29 = [HMDFetchedAccessorySettingsSubscriber alloc];
    -[HMDHome workQueue](v12, "workQueue");
    v30 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v26, "localAndRemoteSubscriptionProvider");
    v31 = (void *)objc_claimAutoreleasedReturnValue();
    v52 = CFSTR("root.siri.availableLanguages");
    objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", &v52, 1);
    v32 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHome uuid](v12, "uuid");
    v33 = (void *)objc_claimAutoreleasedReturnValue();
    v34 = -[HMDFetchedAccessorySettingsSubscriber initWithWorkQueue:subscriptionProvider:keyPaths:homeUUID:](v29, "initWithWorkQueue:subscriptionProvider:keyPaths:homeUUID:", v30, v31, v32, v33);
    -[HMDHome setFetchedAccessorySettingsSubscriber:](v12, "setFetchedAccessorySettingsSubscriber:", v34);

    -[HMDHome fetchedAccessorySettingsSubscriber](v12, "fetchedAccessorySettingsSubscriber");
    v35 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v35, "setDelegate:", v12);

    -[HMDHome notificationCenter](v12, "notificationCenter");
    v36 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHome primaryResidentChangeMonitor](v12, "primaryResidentChangeMonitor");
    v37 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v36, "addObserver:selector:name:object:", v12, sel_handlePrimaryResidentIsCurrentDeviceChangeNotification_, CFSTR("HMDPrimaryResidentChangeMonitorIsCurrentDeviceChangeNotification"), v37);

    -[HMDHome notificationCenter](v12, "notificationCenter");
    v38 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHome primaryResidentChangeMonitor](v12, "primaryResidentChangeMonitor");
    v39 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v38, "addObserver:selector:name:object:", v12, sel_handlePrimaryResidentChangeMonitorConfirmedDeviceIdentifierChangeNotification_, CFSTR("HMDPrimaryResidentChangeMonitorConfirmedDeviceIdentifierChangeNotification"), v39);

    -[HMDHome subscribeToAccessoryLanguageSettingsIfNeeded](v12);
  }
  v40 = [HMDHomeMediaStateSubscriber alloc];
  -[HMDHome uuid](v12, "uuid");
  v41 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHome workQueue](v12, "workQueue");
  v42 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v26, "localAndRemoteSubscriptionProvider");
  v43 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v26, "localOnlySubscriptionProvider");
  v44 = (void *)objc_claimAutoreleasedReturnValue();
  v45 = -[HMDHomeMediaStateSubscriber initWithHomeUUID:workQueue:dataSource:remoteSubscriptionProvider:localSubscriptionProvider:](v40, "initWithHomeUUID:workQueue:dataSource:remoteSubscriptionProvider:localSubscriptionProvider:", v41, v42, v12, v43, v44);
  -[HMDHome setMediaStateSubscriber:](v12, "setMediaStateSubscriber:", v45);

  -[HMDHome notificationRegistrationsForAppleMediaAccessories](v12, "notificationRegistrationsForAppleMediaAccessories");
  v46 = (void *)objc_claimAutoreleasedReturnValue();
  v47 = objc_msgSend(v46, "count");

  if (v47)
  {
    -[HMDHome mediaStateSubscriber](v12, "mediaStateSubscriber");
    v48 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v48, "subscribeForAppleMediaStateWithSubscriptionToken:", CFSTR("HMDHomeClientMediaStateRegistrationToken"));

  }
  -[HMDHome mediaStateSubscriber](v12, "mediaStateSubscriber");
  v49 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v49, "localSubscribeForAppleMediaState");

  -[HMDHome configureMediaSystems](v12, "configureMediaSystems");
  -[HMDHome configureMediaDestinationControllersForAccessories:](v12, "configureMediaDestinationControllersForAccessories:", v9);
  if (isInternalBuild() && _os_feature_enabled_impl())
  {
    -[HMDHome homeIntelligenceActivityLogger](v12, "homeIntelligenceActivityLogger");
    v50 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v50, "configure");

  }
  -[HMDHome registerForDeviceWithCapabilities](v12, "registerForDeviceWithCapabilities");
  -[HMDHome configureMediaGroupObjects](v12, "configureMediaGroupObjects");
  -[HMDHome accessories](v12, "accessories");
  v51 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHome configureRemoteEventRouterClientControllerForAccessories:](v12, "configureRemoteEventRouterClientControllerForAccessories:", v51);

}

- (void)createAndConfigureBulletinManagers
{
  void *v3;
  void *v4;
  void *v5;
  char v6;
  void *v7;
  HMDHome *v8;
  NSObject *v9;
  void *v10;
  HMDNotificationConditionEvaluator *v11;
  void *v12;
  void *v13;
  void *v14;
  uint64_t v15;
  HMDAccessoryBulletinNotificationManager *v16;
  void *v17;
  void *v18;
  void *v19;
  HMDAccessoryBulletinNotificationManager *v20;
  void *v21;
  void *v22;
  HMDDoorbellPressTracker *v23;
  void *v24;
  void *v25;
  HMDCameraBulletinNotificationManager *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  HMDCameraBulletinNotificationManager *v31;
  void *v32;
  void *v33;
  HMDAudioAnalysisBulletinNotificationManager *v34;
  void *v35;
  void *v36;
  void *v37;
  HMDNotificationConditionEvaluator *v38;
  void *v39;
  void *v40;
  void *v41;
  HMDNotificationConditionEvaluator *v42;
  void *v43;
  HMDAudioAnalysisBulletinNotificationManager *v44;
  void *v45;
  void *v46;
  HMDHome *v47;
  NSObject *v48;
  void *v49;
  HMDDoorbellPressTracker *v50;
  HMDCameraSignificantEventFaceClassificationResolver *v51;
  void *v52;
  HMDTimePeriodNotificationConditionHandler *v53;
  HMDPresenceNotificationConditionHandler *v54;
  _QWORD v55[2];
  _QWORD v56[2];
  uint8_t buf[4];
  void *v58;
  uint64_t v59;

  v59 = *MEMORY[0x24BDAC8D0];
  -[HMDHome residentDeviceManager](self, "residentDeviceManager");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "availableResidentDevices");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHome setBulletinNotificationsSupported:](self, "setBulletinNotificationsSupported:", objc_msgSend(v4, "count") != 0);

  if (+[HMDDeviceCapabilities supportsBulletinBoard](HMDDeviceCapabilities, "supportsBulletinBoard")
    || (+[HMDDeviceCapabilities deviceCapabilities](HMDDeviceCapabilities, "deviceCapabilities"),
        v5 = (void *)objc_claimAutoreleasedReturnValue(),
        v6 = objc_msgSend(v5, "isResidentCapable"),
        v5,
        (v6 & 1) != 0))
  {
    v7 = (void *)MEMORY[0x227676638]();
    v8 = self;
    HMFGetOSLogHandle();
    v9 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v58 = v10;
      _os_log_impl(&dword_2218F0000, v9, OS_LOG_TYPE_INFO, "%{public}@Creating and Configuring Bulletin Notification Managers...", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v7);
    v54 = -[HMDPresenceNotificationConditionHandler initWithHome:]([HMDPresenceNotificationConditionHandler alloc], "initWithHome:", v8);
    v53 = -[HMDTimePeriodNotificationConditionHandler initWithHome:]([HMDTimePeriodNotificationConditionHandler alloc], "initWithHome:", v8);
    v11 = [HMDNotificationConditionEvaluator alloc];
    v12 = (void *)MEMORY[0x24BDBCF20];
    v56[0] = v54;
    v56[1] = v53;
    objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", v56, 2);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "setWithArray:", v13);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    v15 = -[HMDNotificationConditionEvaluator initWithConditionHandlers:](v11, "initWithConditionHandlers:", v14);

    v16 = [HMDAccessoryBulletinNotificationManager alloc];
    -[HMDHome workQueue](v8, "workQueue");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    +[HMDAppleAccountManager sharedManager](HMDAppleAccountManager, "sharedManager");
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD16D0], "defaultCenter");
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    v52 = (void *)v15;
    v20 = -[HMDAccessoryBulletinNotificationManager initWithHome:workQueue:accountManager:evaluator:notificationCenter:](v16, "initWithHome:workQueue:accountManager:evaluator:notificationCenter:", v8, v17, v18, v15, v19);
    -[HMDHome setAccessoryBulletinNotificationManager:](v8, "setAccessoryBulletinNotificationManager:", v20);

    -[HMDHome accessoryBulletinNotificationManager](v8, "accessoryBulletinNotificationManager");
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    +[HMDDeviceCapabilities deviceCapabilities](HMDDeviceCapabilities, "deviceCapabilities");
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v21, "configureWithDeviceIsResidentCapable:", objc_msgSend(v22, "isResidentCapable"));

    v51 = -[HMDCameraSignificantEventFaceClassificationResolver initWithHome:]([HMDCameraSignificantEventFaceClassificationResolver alloc], "initWithHome:", v8);
    v23 = [HMDDoorbellPressTracker alloc];
    -[HMDHome workQueue](v8, "workQueue");
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHome notificationCenter](v8, "notificationCenter");
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    v50 = -[HMDDoorbellPressTracker initWithWorkQueue:notificationCenter:](v23, "initWithWorkQueue:notificationCenter:", v24, v25);

    v26 = [HMDCameraBulletinNotificationManager alloc];
    -[HMDHome workQueue](v8, "workQueue");
    v27 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHome msgDispatcher](v8, "msgDispatcher");
    v28 = (void *)objc_claimAutoreleasedReturnValue();
    +[HMDAppleAccountManager sharedManager](HMDAppleAccountManager, "sharedManager");
    v29 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD16D0], "defaultCenter");
    v30 = (void *)objc_claimAutoreleasedReturnValue();
    v31 = -[HMDCameraBulletinNotificationManager initWithHome:workQueue:messageDispatcher:accountManager:faceClassificationResolver:doorbellPressTracker:evaluator:notificationCenter:](v26, "initWithHome:workQueue:messageDispatcher:accountManager:faceClassificationResolver:doorbellPressTracker:evaluator:notificationCenter:", v8, v27, v28, v29, v51, v50, v15, v30);
    -[HMDHome setCameraBulletinNotificationManager:](v8, "setCameraBulletinNotificationManager:", v31);

    -[HMDHome cameraBulletinNotificationManager](v8, "cameraBulletinNotificationManager");
    v32 = (void *)objc_claimAutoreleasedReturnValue();
    +[HMDDeviceCapabilities deviceCapabilities](HMDDeviceCapabilities, "deviceCapabilities");
    v33 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v32, "configureWithDeviceIsResidentCapable:", objc_msgSend(v33, "isResidentCapable"));

    v34 = [HMDAudioAnalysisBulletinNotificationManager alloc];
    -[HMDHome workQueue](v8, "workQueue");
    v35 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHome msgDispatcher](v8, "msgDispatcher");
    v36 = (void *)objc_claimAutoreleasedReturnValue();
    +[HMDAppleAccountManager sharedManager](HMDAppleAccountManager, "sharedManager");
    v37 = (void *)objc_claimAutoreleasedReturnValue();
    v38 = [HMDNotificationConditionEvaluator alloc];
    v39 = (void *)MEMORY[0x24BDBCF20];
    v55[0] = v54;
    v55[1] = v53;
    objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", v55, 2);
    v40 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v39, "setWithArray:", v40);
    v41 = (void *)objc_claimAutoreleasedReturnValue();
    v42 = -[HMDNotificationConditionEvaluator initWithConditionHandlers:](v38, "initWithConditionHandlers:", v41);
    objc_msgSend(MEMORY[0x24BDD16D0], "defaultCenter");
    v43 = (void *)objc_claimAutoreleasedReturnValue();
    v44 = -[HMDAudioAnalysisBulletinNotificationManager initWithHome:workQueue:messageDispatcher:accountManager:evaluator:notificationCenter:](v34, "initWithHome:workQueue:messageDispatcher:accountManager:evaluator:notificationCenter:", v8, v35, v36, v37, v42, v43);
    -[HMDHome setAudioAnalysisBulletinNotificationManager:](v8, "setAudioAnalysisBulletinNotificationManager:", v44);

    -[HMDHome audioAnalysisBulletinNotificationManager](v8, "audioAnalysisBulletinNotificationManager");
    v45 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v45, "configure");

  }
  else
  {
    v46 = (void *)MEMORY[0x227676638]();
    v47 = self;
    HMFGetOSLogHandle();
    v48 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v48, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v49 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v58 = v49;
      _os_log_impl(&dword_2218F0000, v48, OS_LOG_TYPE_INFO, "%{public}@Not creating bulletin notification managers as bulletins are not supported on this non-resident capable device", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v46);
  }
}

- (void)handlePrimaryResidentIsCurrentDeviceChangeNotification:(id)a3
{
  NSObject *v4;
  _QWORD block[5];

  -[HMDHome workQueue](self, "workQueue", a3);
  v4 = objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x24BDAC760];
  block[1] = 3221225472;
  block[2] = __66__HMDHome_handlePrimaryResidentIsCurrentDeviceChangeNotification___block_invoke;
  block[3] = &unk_24E79C240;
  block[4] = self;
  dispatch_async(v4, block);

}

- (void)_handlePrimaryResidentDidBecomeCurrentDevice
{
  NSObject *v3;

  -[HMDHome workQueue](self, "workQueue");
  v3 = objc_claimAutoreleasedReturnValue();
  dispatch_assert_queue_V2(v3);

  -[HMDHome subscribeToAccessoryLanguageSettingsIfNeeded](self);
}

- (void)_handlePrimaryResidentDidBecomeOtherDevice
{
  NSObject *v3;
  id v4;

  -[HMDHome workQueue](self, "workQueue");
  v3 = objc_claimAutoreleasedReturnValue();
  dispatch_assert_queue_V2(v3);

  -[HMDHome fetchedAccessorySettingsSubscriber](self, "fetchedAccessorySettingsSubscriber");
  v4 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "unsubscribeToAllAccessories");

}

- (void)handlePrimaryResidentChangeMonitorConfirmedDeviceIdentifierChangeNotification:(id)a3
{
  NSObject *v4;
  _QWORD block[5];

  -[HMDHome workQueue](self, "workQueue", a3);
  v4 = objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x24BDAC760];
  block[1] = 3221225472;
  block[2] = __89__HMDHome_handlePrimaryResidentChangeMonitorConfirmedDeviceIdentifierChangeNotification___block_invoke;
  block[3] = &unk_24E79C240;
  block[4] = self;
  dispatch_async(v4, block);

}

- (void)configureRemoteEventRouterClientControllerForAccessories:(id)a3
{
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t i;
  id v9;
  void *v10;
  id v11;
  int v12;
  void *v13;
  void *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  _BYTE v19[128];
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  v4 = a3;
  v15 = 0u;
  v16 = 0u;
  v17 = 0u;
  v18 = 0u;
  v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v15, v19, 16);
  if (v5)
  {
    v6 = v5;
    v7 = *(_QWORD *)v16;
    do
    {
      for (i = 0; i != v6; ++i)
      {
        if (*(_QWORD *)v16 != v7)
          objc_enumerationMutation(v4);
        v9 = *(id *)(*((_QWORD *)&v15 + 1) + 8 * i);
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0)
          v10 = v9;
        else
          v10 = 0;
        v11 = v10;

        if (v11)
        {
          v12 = objc_msgSend(v9, "isCurrentAccessory");
          -[HMDHome remoteEventRouterClientController](self, "remoteEventRouterClientController");
          v13 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v9, "uuid");
          v14 = (void *)objc_claimAutoreleasedReturnValue();
          if (v12)
            objc_msgSend(v13, "updateCurrentAccessoryUUID:", v14);
          else
            objc_msgSend(v13, "createResidentRouterForAccessoryUUID:", v14);

        }
      }
      v6 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v15, v19, 16);
    }
    while (v6);
  }

}

- (void)createRemoteEventRouterServerIfNeeded
{
  void *v3;
  void *v4;
  void *v5;
  id v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  char v11;
  void *v12;
  HMDHome *v13;
  NSObject *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  char v19;
  void *v20;
  HMDHome *v21;
  NSObject *v22;
  void *v23;
  void *v24;
  void *v25;
  HMDHome *v26;
  NSObject *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  HMDRemoteEventRouterServer *v43;
  void *v44;
  _BOOL8 v45;
  void *v46;
  uint64_t v47;
  void *v48;
  void *v49;
  HMDRemoteEventRouterServer *v50;
  void *v51;
  void *v52;
  void *v53;
  void *v54;
  void *v55;
  uint8_t buf[4];
  void *v57;
  __int16 v58;
  id v59;
  __int16 v60;
  void *v61;
  __int16 v62;
  void *v63;
  uint64_t v64;

  v64 = *MEMORY[0x24BDAC8D0];
  -[HMDHome homeManager](self, "homeManager");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHome currentAccessory](self, "currentAccessory");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v5 = v4;
  else
    v5 = 0;
  v6 = v5;

  -[HMDHome remoteEventRouterServer](self, "remoteEventRouterServer");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "residentModeUUID");
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  if (v6)
  {
    -[HMDHome localCapabilitiesDataSource](self, "localCapabilitiesDataSource");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    if ((objc_msgSend(v9, "isResidentCapable") & 1) != 0)
    {
      if (!v8)
      {

LABEL_14:
        objc_msgSend(v6, "uuid");
        v18 = (void *)objc_claimAutoreleasedReturnValue();
        v19 = objc_msgSend(v8, "isEqual:", v18);

        if ((v19 & 1) == 0)
        {
          v20 = (void *)MEMORY[0x227676638]();
          v21 = self;
          HMFGetOSLogHandle();
          v22 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
          {
            HMFGetLogIdentifier();
            v23 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v6, "uuid");
            v24 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 138543874;
            v57 = v23;
            v58 = 2112;
            v59 = v8;
            v60 = 2112;
            v61 = v24;
            _os_log_impl(&dword_2218F0000, v22, OS_LOG_TYPE_ERROR, "%{public}@Overwriting stale remote event router server with uuid: %@ to current accessory uuid: %@", buf, 0x20u);

          }
          objc_autoreleasePoolPop(v20);
        }
        v25 = (void *)MEMORY[0x227676638]();
        v26 = self;
        HMFGetOSLogHandle();
        v27 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v27, OS_LOG_TYPE_INFO))
        {
          HMFGetLogIdentifier();
          v28 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543618;
          v57 = v28;
          v58 = 2112;
          v59 = v6;
          _os_log_impl(&dword_2218F0000, v27, OS_LOG_TYPE_INFO, "%{public}@Creating remote event router server with current accessory: %@", buf, 0x16u);

        }
        objc_autoreleasePoolPop(v25);
        objc_msgSend(v3, "localOnlySubscriptionProvider");
        v29 = (void *)objc_claimAutoreleasedReturnValue();
        if ((objc_opt_respondsToSelector() & 1) != 0)
        {
          -[HMDHome serverDelegatingEventRouter](v26, "serverDelegatingEventRouter");
          v30 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v29, "synchronousSubscriptionProvider");
          v31 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v30, "registerSubRouter:", v31);

          -[HMDHome serverDelegatingEventRouter](v26, "serverDelegatingEventRouter");
          v32 = objc_claimAutoreleasedReturnValue();

          v29 = (void *)v32;
        }
        v52 = v29;
        v53 = v8;
        -[HMDHome remoteEventRouterClientController](v26, "remoteEventRouterClientController");
        v33 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v33, "residentDelegatingEventRouter");
        v34 = objc_claimAutoreleasedReturnValue();

        if (v34)
        {
          -[HMDHome serverDelegatingEventRouter](v26, "serverDelegatingEventRouter");
          v35 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v35, "registerSubRouter:", v34);

        }
        v50 = [HMDRemoteEventRouterServer alloc];
        -[HMDHome uuid](v26, "uuid");
        v49 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v6, "uuid");
        v36 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v3, "workQueue");
        v37 = (void *)objc_claimAutoreleasedReturnValue();
        -[HMDHome msgDispatcher](v26, "msgDispatcher");
        v38 = (void *)objc_claimAutoreleasedReturnValue();
        -[HMDHome notificationCenter](v26, "notificationCenter");
        v39 = (void *)objc_claimAutoreleasedReturnValue();
        -[HMDHome serverDelegatingEventRouter](v26, "serverDelegatingEventRouter");
        v54 = v3;
        v40 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v54, "eventForwarder");
        v51 = (void *)v34;
        v41 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v54, "eventStoreReadHandle");
        v42 = (void *)objc_claimAutoreleasedReturnValue();
        v43 = -[HMDRemoteEventRouterServer initWithPrimaryModeUUID:residentModeUUID:queue:messageDispatcher:dataSource:notificationCenter:requestMessageName:updateMessageName:multiHopFetchResponseMessageName:subscriptionProvider:registrationEventRouter:storeReadHandle:](v50, "initWithPrimaryModeUUID:residentModeUUID:queue:messageDispatcher:dataSource:notificationCenter:requestMessageName:updateMessageName:multiHopFetchResponseMessageName:subscriptionProvider:registrationEventRouter:storeReadHandle:", v49, v36, v37, v38, v26, v39, CFSTR("RemoteEventRouterRequestMessage"), CFSTR("RemoteEventRouterUpdateMessageName"), CFSTR("RER.MHF.ResponseMessageName"), v40, v41, v42);
        -[HMDHome setRemoteEventRouterServer:](v26, "setRemoteEventRouterServer:", v43);

        +[HMDUserMessagePolicy userMessagePolicyWithHome:userPrivilege:remoteAccessRequired:](HMDUserMessagePolicy, "userMessagePolicyWithHome:userPrivilege:remoteAccessRequired:", v26, 0, 0);
        v44 = (void *)objc_claimAutoreleasedReturnValue();
        v45 = isTVOSDevice();
        -[HMDHome remoteEventRouterServer](v26, "remoteEventRouterServer");
        v46 = (void *)objc_claimAutoreleasedReturnValue();
        v47 = -[HMDHome isCurrentDevicePrimaryResident](v26, "isCurrentDevicePrimaryResident");
        v55 = v44;
        objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", &v55, 1);
        v48 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v46, "configureWithHome:isPrimaryResident:isResidentEventProviding:additionalPolicies:", v26, v47, v45, v48);

        v3 = v54;
        v8 = v53;
        goto LABEL_25;
      }
      objc_msgSend(v6, "uuid");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      v11 = objc_msgSend(v8, "isEqual:", v10);

      if ((v11 & 1) == 0)
        goto LABEL_14;
    }
    else
    {

    }
  }
  v12 = (void *)MEMORY[0x227676638]();
  v13 = self;
  HMFGetOSLogHandle();
  v14 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHome localCapabilitiesDataSource](v13, "localCapabilitiesDataSource");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v16, "isResidentCapable");
    HMFBooleanToString();
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138544130;
    v57 = v15;
    v58 = 2112;
    v59 = v6;
    v60 = 2112;
    v61 = v17;
    v62 = 2112;
    v63 = v8;
    _os_log_impl(&dword_2218F0000, v14, OS_LOG_TYPE_INFO, "%{public}@Cannot create remote event router server with currentAccessory: %@ isResidentCapable: %@ serverAccessoryUUID: %@", buf, 0x2Au);

  }
  objc_autoreleasePoolPop(v12);
LABEL_25:

}

- (id)eventRouterServerDiagnosticInfo
{
  void *v2;
  void *v3;

  -[HMDHome remoteEventRouterServer](self, "remoteEventRouterServer");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "diagnosticInfo");
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  return v3;
}

- (void)registerForDeviceWithCapabilities
{
  void *v3;
  HMDHome *v4;
  NSObject *v5;
  void *v6;
  void *v7;
  void *v8;
  int v9;
  void *v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  v3 = (void *)MEMORY[0x227676638](self, a2);
  v4 = self;
  HMFGetOSLogHandle();
  v5 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = 138543362;
    v10 = v6;
    _os_log_impl(&dword_2218F0000, v5, OS_LOG_TYPE_INFO, "%{public}@Registering for device with capabilities and confirming resident device", (uint8_t *)&v9, 0xCu);

  }
  objc_autoreleasePoolPop(v3);
  -[HMDHome residentDeviceManager](v4, "residentDeviceManager");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "addDataSource:", v4);

  -[HMDHome residentDeviceManager](v4, "residentDeviceManager");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "confirmWithCompletionHandler:", 0);

}

- (BOOL)supportsDeviceWithCapabilities:(id)a3
{
  id v4;
  char v5;

  v4 = a3;
  if (-[HMDHome hasSiriEndpointAccessory](self, "hasSiriEndpointAccessory")
    && !objc_msgSend(v4, "supportsSiriEndpointSetup"))
  {
    v5 = 0;
  }
  else
  {
    v5 = objc_msgSend(v4, "supportsResidentFirstAccessoryCommunication");
  }

  return v5;
}

- (BOOL)hasSiriEndpointAccessory
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t i;
  id v6;
  void *v7;
  id v8;
  void *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  -[HMDHome accessories](self, "accessories", 0);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
  if (v3)
  {
    v4 = *(_QWORD *)v12;
    while (2)
    {
      for (i = 0; i != v3; ++i)
      {
        if (*(_QWORD *)v12 != v4)
          objc_enumerationMutation(v2);
        v6 = *(id *)(*((_QWORD *)&v11 + 1) + 8 * i);
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0)
          v7 = v6;
        else
          v7 = 0;
        v8 = v7;

        if (v8)
        {
          objc_msgSend(v8, "siriEndpointProfile");
          v9 = (void *)objc_claimAutoreleasedReturnValue();

          if (v9)
          {
            LOBYTE(v3) = 1;
            goto LABEL_15;
          }
        }
      }
      v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
      if (v3)
        continue;
      break;
    }
  }
LABEL_15:

  return v3;
}

- (void)configureMediaSystems
{
  void *v3;
  void *v4;
  void *v5;
  id v6;

  -[HMDHome mediaSystemController](self, "mediaSystemController");
  v6 = (id)objc_claimAutoreleasedReturnValue();
  -[HMDHome workQueue](self, "workQueue");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHome msgDispatcher](self, "msgDispatcher");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHome notificationCenter](self, "notificationCenter");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "configure:delegate:dataSource:queue:messageDispatcher:notificationCenter:", self, self, self, v3, v4, v5);

}

- (void)configureMediaDestinationControllersForAccessories:(id)a3
{
  id v4;
  NSObject *v5;
  id v6;

  v4 = a3;
  -[HMDHome workQueue](self, "workQueue");
  v5 = objc_claimAutoreleasedReturnValue();
  dispatch_assert_queue_V2(v5);

  objc_msgSend(v4, "na_map:", &__block_literal_global_629);
  v6 = (id)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v6, "na_each:", &__block_literal_global_631);
}

- (void)configureNaturalLightingWithDemoModeEnabled:(BOOL)a3
{
  NSObject *v5;
  _QWORD v6[5];
  BOOL v7;

  -[HMDHome workQueue](self, "workQueue");
  v5 = objc_claimAutoreleasedReturnValue();
  v6[0] = MEMORY[0x24BDAC760];
  v6[1] = 3221225472;
  v6[2] = __55__HMDHome_configureNaturalLightingWithDemoModeEnabled___block_invoke;
  v6[3] = &unk_24E7968C8;
  v6[4] = self;
  v7 = a3;
  dispatch_async(v5, v6);

}

- (id)accessoriesWithUUIDs:(id)a3
{
  id v4;
  void *v5;
  id v6;
  void *v7;
  _QWORD v9[4];
  id v10;

  v4 = a3;
  -[HMDHome accessories](self, "accessories");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v9[0] = MEMORY[0x24BDAC760];
  v9[1] = 3221225472;
  v9[2] = __32__HMDHome_accessoriesWithUUIDs___block_invoke;
  v9[3] = &unk_24E790530;
  v10 = v4;
  v6 = v4;
  objc_msgSend(v5, "na_filter:", v9);
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  return v7;
}

- (void)configureMediaGroupObjects
{
  void *v3;
  HMDHome *v4;
  NSObject *v5;
  void *v6;
  int v7;
  void *v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  if (isFeatureHomeTheaterQFAEnabledForTests
    && (objc_msgSend((id)isFeatureHomeTheaterQFAEnabledForTests, "BOOLValue") & 1) == 0)
  {
    v3 = (void *)MEMORY[0x227676638]();
    v4 = self;
    HMFGetOSLogHandle();
    v5 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      v7 = 138543362;
      v8 = v6;
      _os_log_impl(&dword_2218F0000, v5, OS_LOG_TYPE_ERROR, "%{public}@Home Theater QFA is not enabled", (uint8_t *)&v7, 0xCu);

    }
    objc_autoreleasePoolPop(v3);
  }
  else
  {
    -[HMDHome configureMediaGroupsUnconfiguredParticipantOnboardingManager](self, "configureMediaGroupsUnconfiguredParticipantOnboardingManager");
    -[HMDHome configureMediaGroupsAggregator](self, "configureMediaGroupsAggregator");
    -[HMDHome configureMediaGroupsAggregateConsumer](self, "configureMediaGroupsAggregateConsumer");
  }
}

- (HMFWiFiManager)wifiManager
{
  void (**v2)(void);
  void *v3;

  -[HMDHome wifiManagerFactory](self, "wifiManagerFactory");
  v2 = (void (**)(void))objc_claimAutoreleasedReturnValue();
  v2[2]();
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  return (HMFWiFiManager *)v3;
}

- (HMDDevice)currentDevice
{
  void *v2;
  void *v3;

  +[HMDAppleAccountManager sharedManager](HMDAppleAccountManager, "sharedManager");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "device");
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  return (HMDDevice *)v3;
}

- (void)didUpdateAggregateDataForMediaGroupsAggregateConsumer:(id)a3
{
  id v4;
  void *v5;
  HMDHome *v6;
  NSObject *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  HMDHome *v12;
  NSObject *v13;
  void *v14;
  int v15;
  void *v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  v4 = a3;
  v5 = (void *)MEMORY[0x227676638]();
  v6 = self;
  HMFGetOSLogHandle();
  v7 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v15 = 138543362;
    v16 = v8;
    _os_log_impl(&dword_2218F0000, v7, OS_LOG_TYPE_INFO, "%{public}@Updating home graph due to updated media groups aggregate data", (uint8_t *)&v15, 0xCu);

  }
  objc_autoreleasePoolPop(v5);
  -[HMDHome mergeMediaGroupsAggregateDataWithConsumer:](v6, "mergeMediaGroupsAggregateDataWithConsumer:", v4);
  -[HMDHome homeManager](v6, "homeManager");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  if (v9)
  {
    -[HMDHome uuid](v6, "uuid");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "updateGenerationCounterWithReason:sourceUUID:shouldNotifyClients:", CFSTR("HMDMediaGroupsAggregateConsumerDelegateUpdatedAggregateData"), v10, 1);

    objc_msgSend(v9, "assistantSyncDataChanged:", CFSTR("HMDMediaGroupsAggregateConsumerDelegateUpdatedAggregateData"));
  }
  else
  {
    v11 = (void *)MEMORY[0x227676638]();
    v12 = v6;
    HMFGetOSLogHandle();
    v13 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      v15 = 138543362;
      v16 = v14;
      _os_log_impl(&dword_2218F0000, v13, OS_LOG_TYPE_INFO, "%{public}@Failed to update home graph for media groups due to no home manager", (uint8_t *)&v15, 0xCu);

    }
    objc_autoreleasePoolPop(v11);
  }

}

- (void)mergeMediaGroupsAggregateDataWithConsumer:(id)a3
{
  id v4;
  void *v5;
  id v6;

  v4 = a3;
  -[HMDHome mergeMediaDestinationsWithConsumer:](self, "mergeMediaDestinationsWithConsumer:", v4);
  -[HMDHome mergeMediaDestinationControllerDataWithConsumer:](self, "mergeMediaDestinationControllerDataWithConsumer:", v4);
  -[HMDHome mediaSystemController](self, "mediaSystemController");
  v6 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "allMediaSystemData");
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v6, "mergeMediaSystemData:", v5);
}

- (void)mergeMediaDestinationControllerDataWithConsumer:(id)a3
{
  id v4;
  void *v5;
  id v6;
  _QWORD v7[4];
  id v8;

  v4 = a3;
  -[HMDHome appleMediaAccessories](self, "appleMediaAccessories");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v7[0] = MEMORY[0x24BDAC760];
  v7[1] = 3221225472;
  v7[2] = __59__HMDHome_mergeMediaDestinationControllerDataWithConsumer___block_invoke;
  v7[3] = &unk_24E788560;
  v8 = v4;
  v6 = v4;
  objc_msgSend(v5, "na_each:", v7);

}

- (void)mergeMediaDestinationsWithConsumer:(id)a3
{
  id v4;
  void *v5;
  uint64_t v6;
  id v7;
  void *v8;
  id v9;
  _QWORD v10[4];
  id v11;
  _QWORD v12[4];
  id v13;

  v4 = a3;
  -[HMDHome appleMediaAccessories](self, "appleMediaAccessories");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = MEMORY[0x24BDAC760];
  v12[0] = MEMORY[0x24BDAC760];
  v12[1] = 3221225472;
  v12[2] = __46__HMDHome_mergeMediaDestinationsWithConsumer___block_invoke;
  v12[3] = &unk_24E788560;
  v7 = v4;
  v13 = v7;
  objc_msgSend(v5, "na_each:", v12);

  -[HMDHome mediaSystems](self, "mediaSystems");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v10[0] = v6;
  v10[1] = 3221225472;
  v10[2] = __46__HMDHome_mergeMediaDestinationsWithConsumer___block_invoke_2;
  v10[3] = &unk_24E775D40;
  v11 = v7;
  v9 = v7;
  objc_msgSend(v8, "na_each:", v10);

}

- (id)routerForParticipantAccessoryUUID:(id)a3 mediaGroupsLocalDataStorage:(id)a4
{
  id v6;
  id v7;
  void *v8;
  void *v9;
  id v10;
  void *v11;
  void *v12;
  HMDHome *v13;
  NSObject *v14;
  void *v15;
  int v17;
  void *v18;
  __int16 v19;
  id v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  v6 = a3;
  v7 = a4;
  -[HMDHome accessoryWithUUID:](self, "accessoryWithUUID:", v6);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v9 = v8;
  else
    v9 = 0;
  v10 = v9;

  if (v10)
  {
    objc_msgSend(v10, "messageRouter");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v12 = (void *)MEMORY[0x227676638]();
    v13 = self;
    HMFGetOSLogHandle();
    v14 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      v17 = 138543618;
      v18 = v15;
      v19 = 2112;
      v20 = v6;
      _os_log_impl(&dword_2218F0000, v14, OS_LOG_TYPE_ERROR, "%{public}@Failed to get router for unknown accessory uuid: %@", (uint8_t *)&v17, 0x16u);

    }
    objc_autoreleasePoolPop(v12);
    v11 = 0;
  }

  return v11;
}

- (id)receiverForParticipantAccessoryUUID:(id)a3 mediaGroupsLocalDataStorage:(id)a4
{
  id v6;
  id v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  id v12;
  void *v13;
  HMDHome *v14;
  NSObject *v15;
  void *v16;
  int v18;
  void *v19;
  __int16 v20;
  void *v21;
  __int16 v22;
  void *v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v6 = a3;
  v7 = a4;
  -[HMDHome homeManager](self, "homeManager");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "mediaGroupParticipantDataLocalStorage");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "groupsBackupReceiver");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v11 = v10;
  if (v10)
  {
    v12 = v10;
  }
  else
  {
    v13 = (void *)MEMORY[0x227676638]();
    v14 = self;
    HMFGetOSLogHandle();
    v15 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      v18 = 138543874;
      v19 = v16;
      v20 = 2112;
      v21 = v8;
      v22 = 2112;
      v23 = v9;
      _os_log_impl(&dword_2218F0000, v15, OS_LOG_TYPE_ERROR, "%{public}@Failed to get groups backup receiver with homeManager: %@ participantStorage: %@", (uint8_t *)&v18, 0x20u);

    }
    objc_autoreleasePoolPop(v13);
  }

  return v11;
}

- (void)configureMediaGroupsUnconfiguredParticipantOnboardingManager
{
  void *v3;
  uint64_t v4;
  void *v5;
  HMDMediaGroupsUnconfiguredParticipantOnboardingManager *v6;
  void *v7;
  void *v8;
  HMDHome *v9;
  NSObject *v10;
  void *v11;
  void *v12;
  HMDHome *v13;
  NSObject *v14;
  void *v15;
  int v16;
  void *v17;
  __int16 v18;
  void *v19;
  __int16 v20;
  void *v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  if (isFeatureHomeTheaterQFAEnabledForTests
    && (objc_msgSend((id)isFeatureHomeTheaterQFAEnabledForTests, "BOOLValue") & 1) == 0)
  {
    v12 = (void *)MEMORY[0x227676638]();
    v13 = self;
    HMFGetOSLogHandle();
    v14 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      v16 = 138543362;
      v17 = v15;
      _os_log_impl(&dword_2218F0000, v14, OS_LOG_TYPE_ERROR, "%{public}@Home Theater QFA is not enabled", (uint8_t *)&v16, 0xCu);

    }
    objc_autoreleasePoolPop(v12);
  }
  else
  {
    -[HMDHome uuid](self, "uuid");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHome notificationCenter](self, "notificationCenter");
    v4 = objc_claimAutoreleasedReturnValue();
    v5 = (void *)v4;
    if (v3 && v4)
    {
      v6 = -[HMDMediaGroupsUnconfiguredParticipantOnboardingManager initWithIdentifier:]([HMDMediaGroupsUnconfiguredParticipantOnboardingManager alloc], "initWithIdentifier:", v3);
      -[HMDMediaGroupsUnconfiguredParticipantOnboardingManager setDataSource:](v6, "setDataSource:", self);
      -[HMDHome setMediaGroupsUnconfiguredParticipantOnboardingManager:](self, "setMediaGroupsUnconfiguredParticipantOnboardingManager:", v6);
      -[HMDHome mediaGroupsUnconfiguredParticipantOnboardingManager](self, "mediaGroupsUnconfiguredParticipantOnboardingManager");
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v7, "configureWithNotificationCenter:", v5);

    }
    else
    {
      v8 = (void *)MEMORY[0x227676638]();
      v9 = self;
      HMFGetOSLogHandle();
      v10 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        v16 = 138543874;
        v17 = v11;
        v18 = 2112;
        v19 = v3;
        v20 = 2112;
        v21 = v5;
        _os_log_impl(&dword_2218F0000, v10, OS_LOG_TYPE_ERROR, "%{public}@Failed to configure media groups unconfigured participant onboarding manager with dependencies homeUUID: %@ notificationCenter: %@", (uint8_t *)&v16, 0x20u);

      }
      objc_autoreleasePoolPop(v8);
    }

  }
}

- (void)configureMediaGroupsAggregator
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  HMDMediaGroupsAggregatorBackupSender *v10;
  HMDMediaGroupsAggregatorMessenger *v11;
  HMDMediaGroupsAggregator *v12;
  void *v13;
  HMDHome *v14;
  void *v15;
  void *v16;
  HMDHome *v17;
  NSObject *v18;
  void *v19;
  void *v20;
  HMDHome *v21;
  NSObject *v22;
  void *v23;
  HMDMediaGroupsLocalDataStorage *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  uint8_t buf[4];
  void *v31;
  __int16 v32;
  void *v33;
  __int16 v34;
  void *v35;
  __int16 v36;
  void *v37;
  __int16 v38;
  void *v39;
  __int16 v40;
  void *v41;
  __int16 v42;
  void *v43;
  __int16 v44;
  void *v45;
  __int16 v46;
  void *v47;
  __int16 v48;
  void *v49;
  uint64_t v50;

  v50 = *MEMORY[0x24BDAC8D0];
  if (isFeatureHomeTheaterQFAEnabledForTests
    && (objc_msgSend((id)isFeatureHomeTheaterQFAEnabledForTests, "BOOLValue") & 1) == 0)
  {
    v20 = (void *)MEMORY[0x227676638]();
    v21 = self;
    HMFGetOSLogHandle();
    v22 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v23 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v31 = v23;
      _os_log_impl(&dword_2218F0000, v22, OS_LOG_TYPE_ERROR, "%{public}@Home Theater QFA is not enabled", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v20);
  }
  else
  {
    -[HMDHome uuid](self, "uuid");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHome homeManager](self, "homeManager");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "uuid");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHome notificationCenter](self, "notificationCenter");
    v29 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHome primaryResidentChangeMonitor](self, "primaryResidentChangeMonitor");
    v28 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "eventForwarder");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "localAndRemoteSubscriptionProvider");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "eventStoreReadHandle");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHome msgDispatcher](self, "msgDispatcher");
    v9 = objc_claimAutoreleasedReturnValue();
    v27 = (void *)v9;
    if (v3 && v29 && v28 && v6 && v7 && v8 && v9)
    {
      v10 = -[HMDMediaGroupsAggregatorBackupSender initWithIdentifier:]([HMDMediaGroupsAggregatorBackupSender alloc], "initWithIdentifier:", v3);
      v24 = -[HMDMediaGroupsLocalDataStorage initWithIdentifier:backupSender:]([HMDMediaGroupsLocalDataStorage alloc], "initWithIdentifier:backupSender:", v3, v10);
      v11 = objc_alloc_init(HMDMediaGroupsAggregatorMessenger);
      v25 = v5;
      v12 = -[HMDMediaGroupsAggregator initWithIdentifier:messenger:eventForwarder:subscriptionProvider:eventStoreReadHandle:groupsLocalDataStorage:]([HMDMediaGroupsAggregator alloc], "initWithIdentifier:messenger:eventForwarder:subscriptionProvider:eventStoreReadHandle:groupsLocalDataStorage:", v3, v11, v6, v7, v8, v24);
      -[HMDMediaGroupsAggregatorBackupSender setDataSource:](v10, "setDataSource:", v24);
      -[HMDMediaGroupsLocalDataStorage setDataSource:](v24, "setDataSource:", self);
      -[HMDMediaGroupsAggregatorMessenger setDataSource:](v11, "setDataSource:", self);
      -[HMDMediaGroupsAggregatorMessenger setDelegate:](v11, "setDelegate:", v12);
      -[HMDMediaGroupsAggregator setDataSource:](v12, "setDataSource:", self);
      -[HMDHome setMediaGroupsAggregator:](self, "setMediaGroupsAggregator:", v12);
      -[HMDHome mediaGroupsAggregator](self, "mediaGroupsAggregator");
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      v14 = self;
      v15 = v27;
      objc_msgSend(v13, "configureWithHome:messageDispatcher:notificationCenter:primaryResidentChangeMonitor:", v14, v27, v29, v28);

      v5 = v25;
    }
    else
    {
      v26 = v8;
      v16 = (void *)MEMORY[0x227676638]();
      v17 = self;
      HMFGetOSLogHandle();
      v18 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v19 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138545666;
        v31 = v19;
        v32 = 2112;
        v33 = v3;
        v34 = 2112;
        v35 = v5;
        v36 = 2112;
        v37 = v29;
        v38 = 2112;
        v39 = v28;
        v40 = 2112;
        v41 = v6;
        v42 = 2112;
        v43 = v7;
        v44 = 2112;
        v45 = v26;
        v46 = 2112;
        v47 = v4;
        v48 = 2112;
        v49 = v27;
        _os_log_impl(&dword_2218F0000, v18, OS_LOG_TYPE_ERROR, "%{public}@Failed to configure media groups aggregator with dependencies homeUUID: %@ homeManagerUUID: %@ notificationCenter: %@ primaryChangeMonitor: %@ eventForwarder: %@ subscriptionProvider: %@ eventStoreReadHandle: %@ homeManager: %@ message dispatcher: %@", buf, 0x66u);

      }
      objc_autoreleasePoolPop(v16);
      v8 = v26;
      v15 = v27;
    }

  }
}

- (id)participantDataTopicForAccessory:(id)a3 mediaGroupsAggregator:(id)a4
{
  void *v5;
  uint64_t v6;
  id v7;
  void *v8;
  void *v9;
  void *v10;

  v5 = (void *)MEMORY[0x24BDD73A0];
  v6 = *MEMORY[0x24BDD4BA8];
  v7 = a3;
  -[HMDHome uuid](self, "uuid");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "uuid");
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v5, "topicFromSuffixID:homeUUID:accessoryUUID:", v6, v8, v9);
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  return v10;
}

- (id)eventSourceForMediaGroupsAggregator:(id)a3
{
  void *v3;
  void *v4;

  -[HMDHome homeManager](self, "homeManager", a3);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "currentEventSource");
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  return v4;
}

- (id)roomsForMediaGroupsAggregator:(id)a3
{
  void *v3;
  void *v4;

  -[HMDHome rooms](self, "rooms", a3);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = (void *)objc_msgSend(v3, "copy");

  return v4;
}

- (id)roomForAllDestinationParentIdentifiers:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  id v12;
  id v13;
  void *v14;
  HMDHome *v15;
  NSObject *v16;
  void *v17;
  void *v18;
  uint64_t v19;
  id v20;
  id v21;
  void *v22;
  _QWORD v24[4];
  id v25;
  _QWORD v26[4];
  id v27;
  uint8_t buf[4];
  void *v29;
  __int16 v30;
  id v31;
  __int16 v32;
  void *v33;
  __int16 v34;
  void *v35;
  uint64_t v36;

  v36 = *MEMORY[0x24BDAC8D0];
  v4 = a3;
  if (objc_msgSend(v4, "count"))
  {
    -[HMDHome accessoriesWithUUIDs:](self, "accessoriesWithUUIDs:", v4);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHome mediaSystemsWithUUIDs:](self, "mediaSystemsWithUUIDs:", v4);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v7 = objc_msgSend(v4, "count");
    v8 = objc_msgSend(v5, "count");
    if (v7 == objc_msgSend(v6, "count") + v8)
    {
      objc_msgSend(v5, "firstObject");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v9, "room");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      v11 = v10;
      if (v10)
      {
        v12 = v10;
      }
      else
      {
        objc_msgSend(v6, "firstObject");
        v18 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v18, "room");
        v12 = (id)objc_claimAutoreleasedReturnValue();

      }
      v19 = MEMORY[0x24BDAC760];
      v26[0] = MEMORY[0x24BDAC760];
      v26[1] = 3221225472;
      v26[2] = __50__HMDHome_roomForAllDestinationParentIdentifiers___block_invoke;
      v26[3] = &unk_24E790530;
      v20 = v12;
      v27 = v20;
      if (objc_msgSend(v5, "na_allObjectsPassTest:", v26))
      {
        v24[0] = v19;
        v24[1] = 3221225472;
        v24[2] = __50__HMDHome_roomForAllDestinationParentIdentifiers___block_invoke_2;
        v24[3] = &unk_24E77E3B8;
        v21 = v20;
        v25 = v21;
        if (objc_msgSend(v6, "na_allObjectsPassTest:", v24))
          v22 = v21;
        else
          v22 = 0;
        v13 = v22;

      }
      else
      {
        v13 = 0;
      }

    }
    else
    {
      v14 = (void *)MEMORY[0x227676638]();
      v15 = self;
      HMFGetOSLogHandle();
      v16 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138544130;
        v29 = v17;
        v30 = 2112;
        v31 = v4;
        v32 = 2112;
        v33 = v5;
        v34 = 2112;
        v35 = v6;
        _os_log_impl(&dword_2218F0000, v16, OS_LOG_TYPE_ERROR, "%{public}@Failed to find room due to missing destination parent identifiers: %@ found accessories: %@ found media systems: %@", buf, 0x2Au);

      }
      objc_autoreleasePoolPop(v14);
      v13 = 0;
    }

  }
  else
  {
    v13 = 0;
  }

  return v13;
}

- (void)configureMediaGroupsAggregateConsumer
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  void *v8;
  HMDMediaGroupsStageManager *v9;
  HMDMediaGroupsAggregateConsumer *v10;
  HMDMediaGroupsAggregateConsumer *mediaGroupsAggregateConsumer;
  void *v12;
  HMDHome *v13;
  NSObject *v14;
  void *v15;
  void *v16;
  HMDHome *v17;
  NSObject *v18;
  void *v19;
  int v20;
  void *v21;
  __int16 v22;
  void *v23;
  __int16 v24;
  void *v25;
  __int16 v26;
  void *v27;
  __int16 v28;
  void *v29;
  __int16 v30;
  void *v31;
  uint64_t v32;

  v32 = *MEMORY[0x24BDAC8D0];
  if (isFeatureHomeTheaterQFAEnabledForTests
    && (objc_msgSend((id)isFeatureHomeTheaterQFAEnabledForTests, "BOOLValue") & 1) == 0)
  {
    v16 = (void *)MEMORY[0x227676638]();
    v17 = self;
    HMFGetOSLogHandle();
    v18 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      v20 = 138543362;
      v21 = v19;
      _os_log_impl(&dword_2218F0000, v18, OS_LOG_TYPE_ERROR, "%{public}@Home Theater QFA is disabled", (uint8_t *)&v20, 0xCu);

    }
    objc_autoreleasePoolPop(v16);
  }
  else
  {
    -[HMDHome homeManager](self, "homeManager");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHome uuid](self, "uuid");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHome notificationCenter](self, "notificationCenter");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "localAndRemoteSubscriptionProvider");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "userDefaults");
    v7 = objc_claimAutoreleasedReturnValue();
    v8 = (void *)v7;
    if (v6 && v4 && v5 && v7)
    {
      v9 = -[HMDMediaGroupsStageManager initWithIdentifier:userDefaults:]([HMDMediaGroupsStageManager alloc], "initWithIdentifier:userDefaults:", v4, v7);
      v10 = -[HMDMediaGroupsAggregateConsumer initWithIdentifier:subscriptionProvider:notificationCenter:stageManager:]([HMDMediaGroupsAggregateConsumer alloc], "initWithIdentifier:subscriptionProvider:notificationCenter:stageManager:", v4, v6, v5, v9);
      mediaGroupsAggregateConsumer = self->_mediaGroupsAggregateConsumer;
      self->_mediaGroupsAggregateConsumer = v10;

      -[HMDMediaGroupsStageManager setDelegate:](v9, "setDelegate:", self->_mediaGroupsAggregateConsumer);
      -[HMDMediaGroupsAggregateConsumer setDelegate:](self->_mediaGroupsAggregateConsumer, "setDelegate:", self);
      -[HMDMediaGroupsAggregateConsumer configureWithHome:](self->_mediaGroupsAggregateConsumer, "configureWithHome:", self);

    }
    else
    {
      v12 = (void *)MEMORY[0x227676638]();
      v13 = self;
      HMFGetOSLogHandle();
      v14 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v15 = (void *)objc_claimAutoreleasedReturnValue();
        v20 = 138544642;
        v21 = v15;
        v22 = 2112;
        v23 = v4;
        v24 = 2112;
        v25 = v6;
        v26 = 2112;
        v27 = v5;
        v28 = 2112;
        v29 = v8;
        v30 = 2112;
        v31 = v3;
        _os_log_impl(&dword_2218F0000, v14, OS_LOG_TYPE_ERROR, "%{public}@Failed to configure media groups aggregate consumer with dependencies homeUUID: %@ subscriptionProvider: %@ notificationCenter: %@ userDefaults: %@ homeManager: %@", (uint8_t *)&v20, 0x3Eu);

      }
      objc_autoreleasePoolPop(v12);
    }

  }
}

- (id)appleMediaAccessoryUUIDsForMediaStateSubscriber:(id)a3
{
  void *v3;
  void *v4;

  -[HMDHome appleMediaAccessories](self, "appleMediaAccessories", a3);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "na_map:", &__block_literal_global_646);
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  return v4;
}

- (id)currentAccessoryUUIDsForMediaStateSubscriber:(id)a3
{
  void *v3;
  void *v4;

  -[HMDHome currentAccessory](self, "currentAccessory", a3);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "uuid");
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  return v4;
}

- (id)mediaProfileForAppleMediaAccessoryUUID:(id)a3 mediaStateSubscriber:(id)a4
{
  id v5;
  void *v6;
  id v7;
  void *v8;
  void *v9;
  _QWORD v11[4];
  id v12;

  v5 = a3;
  -[HMDHome appleMediaAccessories](self, "appleMediaAccessories");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v11[0] = MEMORY[0x24BDAC760];
  v11[1] = 3221225472;
  v11[2] = __71__HMDHome_mediaProfileForAppleMediaAccessoryUUID_mediaStateSubscriber___block_invoke;
  v11[3] = &unk_24E79A558;
  v12 = v5;
  v7 = v5;
  objc_msgSend(v6, "na_firstObjectPassingTest:", v11);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "mediaProfile");
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  return v9;
}

- (BOOL)applyDeviceLockStatus:(id)a3
{
  id v4;
  void *v5;
  HMDHome *v6;
  NSObject *v7;
  void *v8;
  void *v9;
  char v10;
  void *v11;
  HMDHome *v12;
  NSObject *v13;
  void *v14;
  void *v15;
  int v17;
  void *v18;
  __int16 v19;
  void *v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  v4 = a3;
  if (objc_msgSend(v4, "isRemote"))
  {
    v5 = (void *)MEMORY[0x227676638]();
    v6 = self;
    HMFGetOSLogHandle();
    v7 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "shortDescription");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      v17 = 138543618;
      v18 = v8;
      v19 = 2112;
      v20 = v9;
      _os_log_impl(&dword_2218F0000, v7, OS_LOG_TYPE_INFO, "%{public}@%@ is from remote source; ignoring this device's lock status",
        (uint8_t *)&v17,
        0x16u);

    }
    objc_autoreleasePoolPop(v5);
    v10 = 0;
  }
  else if (objc_msgSend(v4, "BOOLForKey:", CFSTR("kApplyDeviceUnlockKey")))
  {
    v11 = (void *)MEMORY[0x227676638]();
    v12 = self;
    HMFGetOSLogHandle();
    v13 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      v17 = 138543362;
      v18 = v14;
      _os_log_impl(&dword_2218F0000, v13, OS_LOG_TYPE_INFO, "%{public}@Treating device as always locked.", (uint8_t *)&v17, 0xCu);

    }
    objc_autoreleasePoolPop(v11);
    v10 = 1;
  }
  else
  {
    -[HMDHome deviceLockStateDataSource](self, "deviceLockStateDataSource");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    v10 = objc_msgSend(v15, "isLocked");

  }
  return v10;
}

- (void)_handleRemoteGatewayNotificationRegistration:(id)a3 enable:(BOOL)a4
{
  id v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  void *v14;
  id v15;
  void *v16;
  _BOOL4 v17;
  void *v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  _BYTE v23[128];
  uint64_t v24;

  v17 = a4;
  v24 = *MEMORY[0x24BDAC8D0];
  v5 = a3;
  objc_msgSend(MEMORY[0x24BDBCE60], "date");
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  v19 = 0u;
  v20 = 0u;
  v21 = 0u;
  v22 = 0u;
  v6 = v5;
  v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v19, v23, 16);
  if (v7)
  {
    v8 = v7;
    v9 = *(_QWORD *)v20;
    do
    {
      v10 = 0;
      do
      {
        if (*(_QWORD *)v20 != v9)
          objc_enumerationMutation(v6);
        v11 = *(_QWORD *)(*((_QWORD *)&v19 + 1) + 8 * v10);
        v12 = (void *)objc_msgSend(objc_alloc(MEMORY[0x24BDD1880]), "initWithUUIDString:", v11);
        -[HMDHome accessoryWithUUID:](self, "accessoryWithUUID:", v12);
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0)
          v14 = v13;
        else
          v14 = 0;
        v15 = v14;

        if (v15)
        {
          objc_msgSend(v6, "hmf_arrayForKey:", v11);
          v16 = (void *)objc_claimAutoreleasedReturnValue();
          if (objc_msgSend(v16, "count"))
            objc_msgSend(v15, "handleRemoteGatewayNotificationRegistration:enable:enableTime:", v16, v17, v18);

        }
        ++v10;
      }
      while (v8 != v10);
      v8 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v19, v23, 16);
    }
    while (v8);
  }

}

- (id)_characteristicNotificationPayloadsOnDirectTransports:(BOOL)a3
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  void *v9;
  id v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t i;
  void *v16;
  void *v17;
  void *v18;
  uint64_t j;
  void *v20;
  void *v21;
  void *v22;
  id v23;
  void *v24;
  id v25;
  uint64_t v26;
  void *v27;
  void *v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  void *v35;
  void *v36;
  char v37;
  void *v38;
  int v39;
  void *v40;
  void *v41;
  int v42;
  void *v43;
  void *v44;
  void *v45;
  int v46;
  uint64_t v47;
  void *v48;
  void *v49;
  void *v50;
  id v52;
  void *v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  id v57;
  id v58;
  uint64_t v59;
  id v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  void *v64;
  _BOOL4 v65;
  void *v66;
  uint64_t v67;
  void *v68;
  id obj;
  id obja;
  HMDHome *v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  _QWORD v92[2];
  _BYTE v93[128];
  _BYTE v94[128];
  _BYTE v95[128];
  _BYTE v96[128];
  _BYTE v97[128];
  uint64_t v98;

  v65 = a3;
  v98 = *MEMORY[0x24BDAC8D0];
  objc_msgSend(MEMORY[0x24BDBCEB8], "array");
  v66 = (void *)objc_claimAutoreleasedReturnValue();
  v88 = 0u;
  v89 = 0u;
  v90 = 0u;
  v91 = 0u;
  -[HMDHome triggers](self, "triggers");
  obj = (id)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v88, v97, 16);
  v71 = self;
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v89;
    do
    {
      v7 = 0;
      v67 = v5;
      do
      {
        if (*(_QWORD *)v89 != v6)
          objc_enumerationMutation(obj);
        v8 = *(id *)(*((_QWORD *)&v88 + 1) + 8 * v7);
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0)
          v9 = v8;
        else
          v9 = 0;
        v10 = v9;

        if (objc_msgSend(v10, "shouldActivateOnLocalDevice"))
        {
          v86 = 0u;
          v87 = 0u;
          v84 = 0u;
          v85 = 0u;
          objc_msgSend(v10, "characteristicEvents");
          v11 = (void *)objc_claimAutoreleasedReturnValue();
          v12 = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v84, v96, 16);
          if (v12)
          {
            v13 = v12;
            v14 = *(_QWORD *)v85;
            do
            {
              for (i = 0; i != v13; ++i)
              {
                if (*(_QWORD *)v85 != v14)
                  objc_enumerationMutation(v11);
                v16 = *(void **)(*((_QWORD *)&v84 + 1) + 8 * i);
                objc_msgSend(v16, "characteristic");
                v17 = (void *)objc_claimAutoreleasedReturnValue();

                if (v17)
                {
                  objc_msgSend(v16, "characteristic");
                  v18 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend(v66, "addObject:", v18);

                }
              }
              v13 = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v84, v96, 16);
            }
            while (v13);
          }

          self = v71;
          v5 = v67;
        }

        ++v7;
      }
      while (v7 != v5);
      v5 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v88, v97, 16);
    }
    while (v5);
  }

  objc_msgSend(MEMORY[0x24BDBCED8], "dictionary");
  v54 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x24BDBCED8], "dictionary");
  v53 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHome accessories](self, "accessories");
  v80 = 0u;
  v81 = 0u;
  v82 = 0u;
  v83 = 0u;
  v52 = (id)objc_claimAutoreleasedReturnValue();
  v56 = objc_msgSend(v52, "countByEnumeratingWithState:objects:count:", &v80, v95, 16);
  if (v56)
  {
    v55 = *(_QWORD *)v81;
    obja = (id)*MEMORY[0x24BE1B780];
    do
    {
      for (j = 0; j != v56; ++j)
      {
        if (*(_QWORD *)v81 != v55)
          objc_enumerationMutation(v52);
        v20 = *(void **)(*((_QWORD *)&v80 + 1) + 8 * j);
        objc_msgSend(MEMORY[0x24BDBCEB8], "array");
        v21 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(MEMORY[0x24BDBCEB8], "array");
        v22 = (void *)objc_claimAutoreleasedReturnValue();
        v23 = v20;
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0)
          v24 = v23;
        else
          v24 = 0;
        v25 = v24;

        if (v25)
        {
          v57 = v23;
          v58 = v25;
          v64 = v22;
          v68 = v21;
          v59 = j;
          v78 = 0u;
          v79 = 0u;
          v76 = 0u;
          v77 = 0u;
          objc_msgSend(v25, "services");
          v60 = (id)objc_claimAutoreleasedReturnValue();
          v62 = objc_msgSend(v60, "countByEnumeratingWithState:objects:count:", &v76, v94, 16);
          if (!v62)
            goto LABEL_62;
          v61 = *(_QWORD *)v77;
          while (1)
          {
            v26 = 0;
            do
            {
              if (*(_QWORD *)v77 != v61)
                objc_enumerationMutation(v60);
              v63 = v26;
              v27 = *(void **)(*((_QWORD *)&v76 + 1) + 8 * v26);
              objc_msgSend(v27, "type");
              v28 = (void *)objc_claimAutoreleasedReturnValue();
              v72 = 0u;
              v73 = 0u;
              v74 = 0u;
              v75 = 0u;
              objc_msgSend(v27, "characteristics");
              v29 = (void *)objc_claimAutoreleasedReturnValue();
              v30 = objc_msgSend(v29, "countByEnumeratingWithState:objects:count:", &v72, v93, 16);
              if (v30)
              {
                v31 = v30;
                v32 = *(_QWORD *)v73;
                do
                {
                  v33 = 0;
                  do
                  {
                    if (*(_QWORD *)v73 != v32)
                      objc_enumerationMutation(v29);
                    v34 = *(void **)(*((_QWORD *)&v72 + 1) + 8 * v33);
                    if (objc_msgSend(v34, "supportsNotification"))
                    {
                      -[HMDHome hapMetadata](self, "hapMetadata");
                      v35 = (void *)objc_claimAutoreleasedReturnValue();
                      objc_msgSend(v34, "type");
                      v36 = (void *)objc_claimAutoreleasedReturnValue();
                      v37 = objc_msgSend(v35, "shouldFilterEnableNotificationsForCharacteristicType:serviceType:", v36, v28);

                      if ((v37 & 1) == 0)
                      {
                        if (objc_msgSend(v28, "isEqualToString:", obja))
                        {
                          objc_msgSend(v34, "type");
                          v38 = (void *)objc_claimAutoreleasedReturnValue();
                          v39 = objc_msgSend(v38, "isEqualToString:", CFSTR("000000A6-0000-1000-8000-0026BB765291"));

                        }
                        else
                        {
                          v39 = 0;
                        }
                        -[HMDHome hapMetadata](self, "hapMetadata");
                        v40 = (void *)objc_claimAutoreleasedReturnValue();
                        objc_msgSend(v34, "type");
                        v41 = (void *)objc_claimAutoreleasedReturnValue();
                        v42 = objc_msgSend(v40, "shouldAutoEnableNotificationForCharacteristic:ofService:", v41, v28);

                        if ((objc_msgSend(v34, "isClientNotificationEnabled") & 1) != 0
                          || (objc_msgSend(v66, "containsObject:", v34) & 1) != 0
                          || (objc_msgSend(v34, "isNonHomeNotificationsEnabled") | v39 | v42) == 1)
                        {
                          v43 = v68;
                          goto LABEL_50;
                        }
                        if (v65)
                        {
                          objc_msgSend(v34, "type");
                          v44 = (void *)objc_claimAutoreleasedReturnValue();
                          -[HMDHome hapMetadata](v71, "hapMetadata");
                          v45 = (void *)objc_claimAutoreleasedReturnValue();
                          v46 = objc_msgSend(v45, "shouldEnableHomeNotificationForCharacteristicType:serviceType:", v44, v28);

                          if (v46)
                            objc_msgSend(v68, "addObject:", v34);

                        }
                        else
                        {
                          v43 = v64;
LABEL_50:
                          objc_msgSend(v43, "addObject:", v34);
                        }
                        self = v71;
                      }
                    }
                    ++v33;
                  }
                  while (v31 != v33);
                  v47 = objc_msgSend(v29, "countByEnumeratingWithState:objects:count:", &v72, v93, 16);
                  v31 = v47;
                }
                while (v47);
              }

              v26 = v63 + 1;
            }
            while (v63 + 1 != v62);
            v62 = objc_msgSend(v60, "countByEnumeratingWithState:objects:count:", &v76, v94, 16);
            if (!v62)
            {
LABEL_62:

              v25 = v58;
              j = v59;
              v21 = v68;
              v22 = v64;
              v23 = v57;
              break;
            }
          }
        }
        objc_msgSend(v23, "uuid");
        v48 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v48, "UUIDString");
        v49 = (void *)objc_claimAutoreleasedReturnValue();

        if (objc_msgSend(v21, "count"))
          objc_msgSend(v54, "setObject:forKeyedSubscript:", v21, v49);
        if (objc_msgSend(v22, "count"))
          objc_msgSend(v53, "setObject:forKeyedSubscript:", v22, v49);

      }
      v56 = objc_msgSend(v52, "countByEnumeratingWithState:objects:count:", &v80, v95, 16);
    }
    while (v56);
  }
  v92[0] = v53;
  v92[1] = v54;
  objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", v92, 2);
  v50 = (void *)objc_claimAutoreleasedReturnValue();

  return v50;
}

- (void)addCompanionAsResidentUser:(id)a3
{
  id v4;
  NSObject *v5;
  id v6;
  _QWORD v7[5];
  id v8;

  v4 = a3;
  -[HMDHome workQueue](self, "workQueue");
  v5 = objc_claimAutoreleasedReturnValue();
  v7[0] = MEMORY[0x24BDAC760];
  v7[1] = 3221225472;
  v7[2] = __38__HMDHome_addCompanionAsResidentUser___block_invoke;
  v7[3] = &unk_24E79C268;
  v7[4] = self;
  v8 = v4;
  v6 = v4;
  dispatch_async(v5, v7);

}

- (void)redispatchToResidentMessage:(id)a3 target:(id)a4 responseQueue:(id)a5
{
  -[HMDHome redispatchToResidentMessage:target:responseQueue:viaDevice:](self, "redispatchToResidentMessage:target:responseQueue:viaDevice:", a3, a4, a5, 0);
}

- (void)redispatchToResidentMessage:(id)a3 target:(id)a4 responseQueue:(id)a5 viaDevice:(id)a6
{
  id v10;
  id v11;
  id v12;
  id v13;
  void *v14;
  id v15;
  HMDAssertionLogEvent *v16;
  HMDAssertionLogEvent *v17;
  void *v18;
  void *v19;
  int v20;
  void *v21;
  void *v22;
  void *v23;
  char v24;
  int v25;
  void *v26;
  void *v27;
  uint64_t v28;
  void *v29;
  void *v30;
  void *v31;
  id v32;
  id v33;
  HMDRemoteDeviceMessageDestination *v34;
  void *v35;
  HMDHome *v36;
  NSObject *v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  void *v43;
  HMDHome *v44;
  NSObject *v45;
  void *v46;
  void *v47;
  void *v48;
  void *v49;
  uint64_t v50;
  void *v51;
  HMDHome *v52;
  NSObject *v53;
  void *v54;
  void *v55;
  id v56;
  void *v57;
  void *v58;
  void *v59;
  HMDHome *v60;
  NSObject *v61;
  void *v62;
  void *v63;
  id v64;
  void *v65;
  void *v66;
  void *v67;
  void *v68;
  HMDHome *v69;
  NSObject *v70;
  void *v71;
  void *v72;
  void *v73;
  void *v74;
  HMDHome *v75;
  NSObject *v76;
  id v77;
  void *v78;
  void *v79;
  id v80;
  id v81;
  void *v82;
  void *v83;
  void *v84;
  void *v85;
  void *v86;
  void *v87;
  id v88;
  _QWORD v89[4];
  id v90;
  id v91;
  uint8_t buf[4];
  void *v93;
  __int16 v94;
  void *v95;
  __int16 v96;
  void *v97;
  uint64_t v98;

  v98 = *MEMORY[0x24BDAC8D0];
  v88 = a3;
  v10 = a4;
  v11 = a5;
  v12 = a6;
  v87 = v12;
  if (v10)
  {
    v13 = v88;
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
      v14 = v13;
    else
      v14 = 0;
    v15 = v14;

    if (v15)
      v16 = (HMDAssertionLogEvent *)v13;
    else
      v16 = (HMDAssertionLogEvent *)objc_msgSend(v13, "mutableCopy");
    v17 = v16;

    -[HMDAssertionLogEvent responseHandler](v17, "responseHandler");
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    if (v18)
    {
      v89[0] = MEMORY[0x24BDAC760];
      v89[1] = 3221225472;
      v89[2] = __70__HMDHome_redispatchToResidentMessage_target_responseQueue_viaDevice___block_invoke;
      v89[3] = &unk_24E7961A0;
      v90 = v11;
      v91 = v18;
      -[HMDAssertionLogEvent setResponseHandler:](v17, "setResponseHandler:", v89);

    }
    -[HMDAssertionLogEvent name](v17, "name");
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    v20 = objc_msgSend(v19, "isEqualToString:", CFSTR("kMultipleCharacteristicWriteRequestKey"));

    if (!isiOSDevice())
      goto LABEL_15;
    if (redispatchToResidentMessage_target_responseQueue_viaDevice__pred != -1)
      dispatch_once(&redispatchToResidentMessage_target_responseQueue_viaDevice__pred, &__block_literal_global_656);
    v21 = (void *)redispatchToResidentMessage_target_responseQueue_viaDevice___restrictedToLocalMessages;
    -[HMDAssertionLogEvent name](v17, "name");
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    LODWORD(v21) = objc_msgSend(v21, "containsObject:", v22);

    if (!(_DWORD)v21)
      goto LABEL_15;
    -[HMDHome currentUser](self, "currentUser");
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    v24 = objc_msgSend(v23, "isRemoteAccessAllowed");

    if ((v24 & 1) == 0)
    {
      v68 = (void *)MEMORY[0x227676638]();
      v69 = self;
      HMFGetOSLogHandle();
      v70 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v70, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v71 = (void *)objc_claimAutoreleasedReturnValue();
        -[HMDHome currentUser](v69, "currentUser");
        v86 = v68;
        v72 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v72, "displayName");
        v81 = v10;
        v73 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        v93 = v71;
        v94 = 2112;
        v95 = v73;
        _os_log_impl(&dword_2218F0000, v70, OS_LOG_TYPE_INFO, "%{public}@Remote access is disabled for the user %@, restricting to local transports...", buf, 0x16u);

        v68 = v86;
        v10 = v81;

      }
      objc_autoreleasePoolPop(v68);
      v25 = 1;
    }
    else
    {
LABEL_15:
      v25 = 0;
    }
    -[HMDAssertionLogEvent messagePayload](v17, "messagePayload");
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    v27 = (void *)objc_msgSend(v26, "mutableCopy");

    if (v25)
      -[HMDAssertionLogEvent setRemoteDisallowsIDSRacing:](v17, "setRemoteDisallowsIDSRacing:", 1);
    objc_msgSend(MEMORY[0x24BE3F138], "currentActivity");
    v28 = objc_claimAutoreleasedReturnValue();
    v29 = (void *)v28;
    v30 = v87;
    v85 = v27;
    if (v87)
    {
      v82 = (void *)v28;
      v31 = v18;
      v32 = v11;
      -[HMDAssertionLogEvent setSecureRemote:](v17, "setSecureRemote:", 1);
      v33 = v10;
      v34 = -[HMDRemoteDeviceMessageDestination initWithTarget:device:]([HMDRemoteDeviceMessageDestination alloc], "initWithTarget:device:", v10, v87);
      -[HMDAssertionLogEvent setDestination:](v17, "setDestination:", v34);

      objc_msgSend(v27, "setObject:forKeyedSubscript:", 0, CFSTR("kIDSMessageSourceIDKey"));
      v35 = (void *)MEMORY[0x227676638](-[HMDAssertionLogEvent setMessagePayload:](v17, "setMessagePayload:", v27));
      v36 = self;
      HMFGetOSLogHandle();
      v37 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v37, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v38 = (void *)objc_claimAutoreleasedReturnValue();
        -[HMDAssertionLogEvent shortDescription](v17, "shortDescription");
        v39 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v87, "shortDescription");
        v40 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543874;
        v93 = v38;
        v94 = 2112;
        v95 = v39;
        v96 = 2112;
        v97 = v40;
        _os_log_impl(&dword_2218F0000, v37, OS_LOG_TYPE_INFO, "%{public}@Redispatching message %@ to device: %@", buf, 0x20u);

        v30 = v87;
      }

      objc_autoreleasePoolPop(v35);
      -[HMDAssertionLogEvent name](v17, "name");

      -[HMDAssertionLogEvent identifier](v17, "identifier");
      objc_msgSend(v30, "identifier");

      +[HMDSecureRemoteMessageTransport defaultTransport](HMDSecureRemoteMessageTransport, "defaultTransport");
      v41 = (void *)objc_claimAutoreleasedReturnValue();
      v42 = (void *)-[HMDAssertionLogEvent copy](v17, "copy");
      objc_msgSend(v41, "sendMessage:completionHandler:", v42, 0);
      v10 = v33;
      v11 = v32;
      v18 = v31;
      v29 = v82;
    }
    else
    {
      v80 = v10;
      v43 = (void *)MEMORY[0x227676638]();
      v44 = self;
      HMFGetOSLogHandle();
      v45 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v45, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v46 = (void *)objc_claimAutoreleasedReturnValue();
        -[HMDAssertionLogEvent shortDescription](v17, "shortDescription");
        v47 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        v93 = v46;
        v94 = 2112;
        v95 = v47;
        _os_log_impl(&dword_2218F0000, v45, OS_LOG_TYPE_INFO, "%{public}@Redispatching message %@ to resident", buf, 0x16u);

      }
      objc_autoreleasePoolPop(v43);
      -[HMDHome homeManager](v44, "homeManager");
      v48 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v48, "messageDispatcher");
      v49 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v49, "residentCommunicationHandlerForHome:", v44);
      v41 = (void *)objc_claimAutoreleasedReturnValue();

      objc_msgSend(v41, "preferredDevice");
      v50 = objc_claimAutoreleasedReturnValue();
      if (v50)
      {
        v42 = (void *)v50;
        if (v20)
          objc_msgSend(v85, "setObject:forKeyedSubscript:", 0, CFSTR("kMultiPartResponseKey"));
        v51 = (void *)MEMORY[0x227676638](-[HMDAssertionLogEvent setMessagePayload:](v17, "setMessagePayload:", v85));
        v52 = v44;
        HMFGetOSLogHandle();
        v53 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v53, OS_LOG_TYPE_INFO))
        {
          HMFGetLogIdentifier();
          v79 = v51;
          v54 = (void *)objc_claimAutoreleasedReturnValue();
          -[HMDAssertionLogEvent shortDescription](v17, "shortDescription");
          v83 = v29;
          v55 = v18;
          v56 = v11;
          v57 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v42, "shortDescription");
          v58 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543874;
          v93 = v54;
          v94 = 2112;
          v95 = v57;
          v96 = 2112;
          v97 = v58;
          _os_log_impl(&dword_2218F0000, v53, OS_LOG_TYPE_INFO, "%{public}@Redispatching message %@ to remote device: %@", buf, 0x20u);

          v11 = v56;
          v18 = v55;
          v29 = v83;

          v51 = v79;
        }

        objc_autoreleasePoolPop(v51);
        v10 = v80;
        objc_msgSend(v41, "redispatchMessage:target:responseQueue:", v17, v80, v11);
      }
      else
      {
        v59 = (void *)MEMORY[0x227676638]();
        v60 = v44;
        HMFGetOSLogHandle();
        v61 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v61, OS_LOG_TYPE_INFO))
        {
          HMFGetLogIdentifier();
          v62 = (void *)objc_claimAutoreleasedReturnValue();
          -[HMDAssertionLogEvent shortDescription](v17, "shortDescription");
          v84 = v29;
          v63 = v18;
          v64 = v11;
          v65 = (void *)objc_claimAutoreleasedReturnValue();
          -[HMDHome shortDescription](v60, "shortDescription");
          v66 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543874;
          v93 = v62;
          v94 = 2112;
          v95 = v65;
          v96 = 2112;
          v97 = v66;
          _os_log_impl(&dword_2218F0000, v61, OS_LOG_TYPE_INFO, "%{public}@Cannot redispatch message %@ because there is no resident configured for home: %@", buf, 0x20u);

          v11 = v64;
          v18 = v63;
          v29 = v84;

        }
        objc_autoreleasePoolPop(v59);
        -[HMDHome uuid](v60, "uuid");

        objc_msgSend(MEMORY[0x24BDD1540], "hmErrorWithCode:", 4);
        v67 = (void *)objc_claimAutoreleasedReturnValue();
        -[HMDAssertionLogEvent respondWithError:](v17, "respondWithError:", v67);

        v42 = 0;
        v10 = v80;
      }
      v30 = 0;
    }

  }
  else
  {
    v30 = v12;
    v74 = (void *)MEMORY[0x227676638]();
    v75 = self;
    HMFGetOSLogHandle();
    v76 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v76, OS_LOG_TYPE_FAULT))
    {
      HMFGetLogIdentifier();
      v77 = v11;
      v78 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v93 = v78;
      _os_log_impl(&dword_2218F0000, v76, OS_LOG_TYPE_FAULT, "%{public}@Submitting ABC event for failure: TargetUUID cannot be nil", buf, 0xCu);

      v11 = v77;
      v30 = v87;
    }

    objc_autoreleasePoolPop(v74);
    v17 = -[HMDAssertionLogEvent initWithReason:]([HMDAssertionLogEvent alloc], "initWithReason:", CFSTR("TargetUUID cannot be nil"));
    +[HMDMetricsManager sharedLogEventSubmitter](HMDMetricsManager, "sharedLogEventSubmitter");
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v18, "submitLogEvent:", v17);
  }

}

- (void)remotelySetNotificationsEnabled:(BOOL)a3 forCharacteristics:(id)a4 characteristicChangeThresholds:(id)a5
{
  id v8;
  id v9;
  NSObject *v10;
  id v11;
  id v12;
  _QWORD v13[5];
  id v14;
  id v15;
  BOOL v16;

  v8 = a4;
  v9 = a5;
  -[HMDHome workQueue](self, "workQueue");
  v10 = objc_claimAutoreleasedReturnValue();
  v13[0] = MEMORY[0x24BDAC760];
  v13[1] = 3221225472;
  v13[2] = __93__HMDHome_remotelySetNotificationsEnabled_forCharacteristics_characteristicChangeThresholds___block_invoke;
  v13[3] = &unk_24E796150;
  v16 = a3;
  v13[4] = self;
  v14 = v8;
  v15 = v9;
  v11 = v9;
  v12 = v8;
  dispatch_async(v10, v13);

}

- (void)_remotelySetNotificationsEnabled:(BOOL)a3 forCharacteristics:(id)a4 characteristicChangeThresholds:(id)a5
{
  _BOOL4 v6;
  id v8;
  NSObject *v9;
  __int128 v10;
  uint64_t i;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  char v18;
  void *v19;
  void *v20;
  void *v21;
  int v22;
  void *v23;
  void *v24;
  HMDHome *v25;
  NSObject *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  uint64_t v42;
  void *v43;
  __int128 v44;
  HMDHome *v45;
  id obj;
  id v47;
  void *v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  _BOOL4 v52;
  _QWORD v53[5];
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  uint8_t buf[4];
  void *v59;
  __int16 v60;
  void *v61;
  __int16 v62;
  void *v63;
  _BYTE v64[128];
  uint64_t v65;

  v6 = a3;
  v65 = *MEMORY[0x24BDAC8D0];
  v8 = a4;
  v47 = a5;
  -[HMDHome workQueue](self, "workQueue");
  v9 = objc_claimAutoreleasedReturnValue();
  dispatch_assert_queue_V2(v9);

  v52 = v6;
  if (v6)
  {
    -[HMDHome enableNotificationPayload](self, "enableNotificationPayload");
    v49 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHome disableNotificationPayload](self, "disableNotificationPayload");
  }
  else
  {
    -[HMDHome disableNotificationPayload](self, "disableNotificationPayload");
    v49 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHome enableNotificationPayload](self, "enableNotificationPayload");
  }
  v48 = (void *)objc_claimAutoreleasedReturnValue();
  v56 = 0u;
  v57 = 0u;
  v54 = 0u;
  v55 = 0u;
  obj = v8;
  v51 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v54, v64, 16);
  if (v51)
  {
    v50 = *(_QWORD *)v55;
    *(_QWORD *)&v10 = 138543874;
    v44 = v10;
    v45 = self;
    do
    {
      for (i = 0; i != v51; ++i)
      {
        if (*(_QWORD *)v55 != v50)
          objc_enumerationMutation(obj);
        v12 = *(void **)(*((_QWORD *)&v54 + 1) + 8 * i);
        objc_msgSend(v12, "accessory", v44);
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v13, "uuid");
        v14 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v14, "UUIDString");
        v15 = (void *)objc_claimAutoreleasedReturnValue();

        if (v15)
        {
          objc_msgSend(v49, "objectForKeyedSubscript:", v15);
          v16 = (void *)objc_claimAutoreleasedReturnValue();
          if (!v16)
          {
            objc_msgSend(MEMORY[0x24BDBCEB8], "array");
            v16 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v49, "setObject:forKeyedSubscript:", v16, v15);
          }
          objc_msgSend(v12, "instanceID");
          v17 = (void *)objc_claimAutoreleasedReturnValue();
          v18 = objc_msgSend(v16, "containsObject:", v17);

          if ((v18 & 1) == 0)
          {
            objc_msgSend(v12, "instanceID");
            v19 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v16, "addObject:", v19);

          }
          objc_msgSend(v48, "objectForKeyedSubscript:", v15);
          v20 = (void *)objc_claimAutoreleasedReturnValue();

          objc_msgSend(v12, "instanceID");
          v21 = (void *)objc_claimAutoreleasedReturnValue();
          v22 = objc_msgSend(v20, "containsObject:", v21);

          if (v22)
          {
            objc_msgSend(v12, "instanceID");
            v23 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v20, "removeObject:", v23);

            v24 = (void *)MEMORY[0x227676638]();
            v25 = self;
            HMFGetOSLogHandle();
            v26 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v26, OS_LOG_TYPE_INFO))
            {
              HMFGetLogIdentifier();
              v27 = (void *)objc_claimAutoreleasedReturnValue();
              HMFBooleanToString();
              v28 = (void *)objc_claimAutoreleasedReturnValue();
              *(_DWORD *)buf = v44;
              v59 = v27;
              v60 = 2112;
              v61 = v28;
              v62 = 2112;
              v63 = v12;
              _os_log_impl(&dword_2218F0000, v26, OS_LOG_TYPE_INFO, "%{public}@Function call to set notification to %@, removing the entry %@ from the other payload", buf, 0x20u);

              self = v45;
            }

            objc_autoreleasePoolPop(v24);
            if (!objc_msgSend(v20, "count"))
              objc_msgSend(v48, "removeObjectForKey:", v15);
          }
          v53[0] = MEMORY[0x24BDAC760];
          v53[1] = 3221225472;
          v53[2] = __94__HMDHome__remotelySetNotificationsEnabled_forCharacteristics_characteristicChangeThresholds___block_invoke;
          v53[3] = &unk_24E77F840;
          v53[4] = v12;
          objc_msgSend(v47, "na_firstObjectPassingTest:", v53);
          v29 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v29, "threshold");
          v30 = (void *)objc_claimAutoreleasedReturnValue();

          if (v52 && v30)
          {
            -[HMDHome pendingCharacteristicThresholdPayload](self, "pendingCharacteristicThresholdPayload");
            v31 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v31, "objectForKeyedSubscript:", v15);
            v32 = (void *)objc_claimAutoreleasedReturnValue();

            if (!v32)
            {
              objc_msgSend(MEMORY[0x24BDBCED8], "dictionary");
              v32 = (void *)objc_claimAutoreleasedReturnValue();
              -[HMDHome pendingCharacteristicThresholdPayload](self, "pendingCharacteristicThresholdPayload");
              v33 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v33, "setObject:forKeyedSubscript:", v32, v15);

            }
            objc_msgSend(v12, "instanceID");
            v34 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v34, "stringValue");
            v35 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v32, "setObject:forKeyedSubscript:", v30, v35);

          }
          if (!v52)
          {
            -[HMDHome pendingCharacteristicThresholdPayload](self, "pendingCharacteristicThresholdPayload");
            v36 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v36, "objectForKeyedSubscript:", v15);
            v37 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v12, "instanceID");
            v38 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v38, "stringValue");
            v39 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v37, "setObject:forKeyedSubscript:", 0, v39);

            self = v45;
            -[HMDHome pendingCharacteristicThresholdPayload](v45, "pendingCharacteristicThresholdPayload");
            v40 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v40, "objectForKeyedSubscript:", v15);
            v41 = (void *)objc_claimAutoreleasedReturnValue();
            v42 = objc_msgSend(v41, "count");

            if (!v42)
            {
              -[HMDHome pendingCharacteristicThresholdPayload](v45, "pendingCharacteristicThresholdPayload");
              v43 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v43, "setObject:forKeyedSubscript:", 0, v15);

            }
          }

        }
      }
      v51 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v54, v64, 16);
    }
    while (v51);
  }

  if (objc_msgSend(v49, "count") || objc_msgSend(v48, "count"))
    -[HMDHome _createModifyNotificationsCoalesceTimerIfNeeded](self, "_createModifyNotificationsCoalesceTimerIfNeeded");

}

- (void)_createModifyNotificationsCoalesceTimerIfNeeded
{
  NSObject *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  HMDHome *v11;
  NSObject *v12;
  void *v13;
  int v14;
  void *v15;
  __int16 v16;
  HMDHome *v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  -[HMDHome workQueue](self, "workQueue");
  v3 = objc_claimAutoreleasedReturnValue();
  dispatch_assert_queue_V2(v3);

  -[HMDHome modifyNotificationsCoalesceTimer](self, "modifyNotificationsCoalesceTimer");
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v4)
  {
    v5 = (void *)objc_msgSend(objc_alloc(MEMORY[0x24BE3F298]), "initWithTimeInterval:options:", 0, 0.5);
    -[HMDHome setModifyNotificationsCoalesceTimer:](self, "setModifyNotificationsCoalesceTimer:", v5);

    -[HMDHome workQueue](self, "workQueue");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHome modifyNotificationsCoalesceTimer](self, "modifyNotificationsCoalesceTimer");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "setDelegateQueue:", v6);

    -[HMDHome modifyNotificationsCoalesceTimer](self, "modifyNotificationsCoalesceTimer");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "setDelegate:", self);

    -[HMDHome modifyNotificationsCoalesceTimer](self, "modifyNotificationsCoalesceTimer");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "resume");

    v10 = (void *)MEMORY[0x227676638]();
    v11 = self;
    HMFGetOSLogHandle();
    v12 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      v14 = 138543618;
      v15 = v13;
      v16 = 2112;
      v17 = v11;
      _os_log_impl(&dword_2218F0000, v12, OS_LOG_TYPE_INFO, "%{public}@%@ Kicked off the modify notifications on resident request timer", (uint8_t *)&v14, 0x16u);

    }
    objc_autoreleasePoolPop(v10);
  }
}

- (void)remotelySetNotificationsEnabled:(BOOL)a3 forMatterAttributes:(id)a4
{
  id v6;
  NSObject *v7;
  id v8;
  _QWORD block[5];
  id v10;
  BOOL v11;

  v6 = a4;
  -[HMDHome workQueue](self, "workQueue");
  v7 = objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x24BDAC760];
  block[1] = 3221225472;
  block[2] = __63__HMDHome_remotelySetNotificationsEnabled_forMatterAttributes___block_invoke;
  block[3] = &unk_24E799CF0;
  v11 = a3;
  block[4] = self;
  v10 = v6;
  v8 = v6;
  dispatch_async(v7, block);

}

- (void)_remotelySetNotificationsEnabled:(BOOL)a3 forMatterAttributes:(id)a4
{
  _BOOL4 v4;
  id v6;
  void *v7;
  HMDHome *v8;
  NSObject *v9;
  void *v10;
  void *v11;
  HMDHome *v12;
  NSObject *v13;
  void *v14;
  _QWORD v15[5];
  uint8_t buf[4];
  void *v17;
  __int16 v18;
  _BOOL4 v19;
  __int16 v20;
  id v21;
  uint64_t v22;

  v4 = a3;
  v22 = *MEMORY[0x24BDAC8D0];
  v6 = a4;
  v7 = (void *)MEMORY[0x227676638]();
  v8 = self;
  HMFGetOSLogHandle();
  v9 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543874;
    v17 = v10;
    v18 = 1024;
    v19 = v4;
    v20 = 2112;
    v21 = v6;
    _os_log_impl(&dword_2218F0000, v9, OS_LOG_TYPE_INFO, "%{public}@Setting remote notifications enabled=%{BOOL}d and adding matter attributes to registration payload. Attributes=%@", buf, 0x1Cu);

  }
  objc_autoreleasePoolPop(v7);
  if (v4)
  {
    v15[0] = MEMORY[0x24BDAC760];
    v15[1] = 3221225472;
    v15[2] = __64__HMDHome__remotelySetNotificationsEnabled_forMatterAttributes___block_invoke;
    v15[3] = &unk_24E796300;
    v15[4] = v8;
    objc_msgSend(v6, "na_each:", v15);
    -[HMDHome _createModifyNotificationsCoalesceTimerIfNeeded](v8, "_createModifyNotificationsCoalesceTimerIfNeeded");
  }
  else
  {
    v11 = (void *)MEMORY[0x227676638]();
    v12 = v8;
    HMFGetOSLogHandle();
    v13 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v17 = v14;
      _os_log_impl(&dword_2218F0000, v13, OS_LOG_TYPE_ERROR, "%{public}@Currently unsubscribing from Matter attributes is not supported. rdar://121935520 (Provide API for unsubscribing to attribute notifications)", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v11);
  }

}

- (void)subscribeForNotificationsFromRemoteGateway
{
  NSObject *v3;
  _QWORD block[5];

  -[HMDHome workQueue](self, "workQueue");
  v3 = objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x24BDAC760];
  block[1] = 3221225472;
  block[2] = __53__HMDHome_subscribeForNotificationsFromRemoteGateway__block_invoke;
  block[3] = &unk_24E79C240;
  block[4] = self;
  dispatch_async(v3, block);

}

- (void)_subscribeForHomeNotificationsFromRemoteGateway:(BOOL)a3
{
  _BOOL8 v3;
  id v5;

  v3 = a3;
  -[HMDHome accessories](self, "accessories");
  v5 = (id)objc_claimAutoreleasedReturnValue();
  -[HMDHome _subscribeForHomeNotificationsFromRemoteGateway:accessories:](self, "_subscribeForHomeNotificationsFromRemoteGateway:accessories:", v3, v5);

}

- (void)_subscribeForHomeNotificationsFromRemoteGateway:(BOOL)a3 accessories:(id)a4
{
  _BOOL4 v4;
  id v6;
  NSObject *v7;
  id v8;
  id v9;
  id v10;
  id v11;
  void *v12;
  HMDHome *v13;
  NSObject *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  id v19;
  void *v20;
  void *v21;
  HMDHome *v22;
  NSObject *v23;
  void *v24;
  void *v25;
  id v26;
  void *v27;
  id v28;
  void *v29;
  id v30;
  id v31;
  void *v32;
  HMDHome *v33;
  NSObject *v34;
  void *v35;
  void *v36;
  id v37;
  id v38;
  id v39;
  id v40;
  id v41;
  id v42;
  id v43;
  id v44;
  id v45;
  id v46;
  id v47;
  uint8_t buf[4];
  void *v49;
  __int16 v50;
  void *v51;
  __int16 v52;
  void *v53;
  __int16 v54;
  void *v55;
  uint64_t v56;

  v4 = a3;
  v56 = *MEMORY[0x24BDAC8D0];
  v6 = a4;
  -[HMDHome workQueue](self, "workQueue");
  v7 = objc_claimAutoreleasedReturnValue();
  dispatch_assert_queue_V2(v7);

  v46 = 0;
  v47 = 0;
  v44 = 0;
  v45 = 0;
  v43 = 0;
  -[HMDHome _notificationPayloadsForRemoteGateway:accessories:enableCharacteristicNotificationPayload:characteristicNotificationThresholdsPayload:disableCharacteristicNotificationPayload:enableMediaNotificationPayload:disableMediaNotificationPayload:](self, v4, v6, &v47, &v46, &v45, &v44, &v43);
  v42 = v47;
  v8 = v46;
  v9 = v45;
  v10 = v44;
  v11 = v43;
  if (objc_msgSend(v9, "count")
    || objc_msgSend(v42, "count")
    || objc_msgSend(v11, "count")
    || objc_msgSend(v10, "count"))
  {
    if (objc_msgSend(v42, "count") || objc_msgSend(v10, "count"))
    {
      v12 = (void *)MEMORY[0x227676638]();
      v13 = self;
      HMFGetOSLogHandle();
      v14 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v36 = v12;
        v15 = v10;
        v16 = (void *)objc_claimAutoreleasedReturnValue();
        HMFBooleanToString();
        v37 = v11;
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v42, "shortDescription");
        v38 = v9;
        v40 = v6;
        v18 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v15, "shortDescription");
        v19 = v8;
        v20 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138544130;
        v49 = v16;
        v50 = 2112;
        v51 = v17;
        v52 = 2112;
        v53 = v18;
        v54 = 2112;
        v55 = v20;
        _os_log_impl(&dword_2218F0000, v14, OS_LOG_TYPE_INFO, "%{public}@Registering notifications with remote gateway when notificationEnabled: %@, characteristics: %@, properties: %@", buf, 0x2Au);

        v8 = v19;
        v9 = v38;
        v6 = v40;

        v11 = v37;
        v10 = v15;
      }

      objc_autoreleasePoolPop(v12);
      -[HMDHome _modifyCharacteristicNotificationsOnResident:characteristicChangeThresholds:mediaNotifications:actionSetNotificationPayload:matterAttributeNotifications:enableNotification:](v13, "_modifyCharacteristicNotificationsOnResident:characteristicChangeThresholds:mediaNotifications:actionSetNotificationPayload:matterAttributeNotifications:enableNotification:", v42, v8, v10, MEMORY[0x24BDBD1A8], 0, 1);
    }
    if (objc_msgSend(v9, "count", v36) || objc_msgSend(v11, "count"))
    {
      v21 = (void *)MEMORY[0x227676638]();
      v22 = self;
      HMFGetOSLogHandle();
      v23 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v23, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v39 = v10;
        v24 = (void *)objc_claimAutoreleasedReturnValue();
        HMFBooleanToString();
        v41 = v6;
        v25 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v9, "shortDescription");
        v26 = v8;
        v27 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v11, "shortDescription");
        v28 = v11;
        v29 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138544130;
        v49 = v24;
        v50 = 2112;
        v51 = v25;
        v52 = 2112;
        v53 = v27;
        v54 = 2112;
        v55 = v29;
        _os_log_impl(&dword_2218F0000, v23, OS_LOG_TYPE_INFO, "%{public}@De-registering notifications with remote gateway when notificationEnabled: %@, characteristics: %@, properties: %@", buf, 0x2Au);

        v11 = v28;
        v8 = v26;

        v6 = v41;
        v10 = v39;
      }

      objc_autoreleasePoolPop(v21);
      -[HMDHome _modifyCharacteristicNotificationsOnResident:characteristicChangeThresholds:mediaNotifications:actionSetNotificationPayload:matterAttributeNotifications:enableNotification:](v22, "_modifyCharacteristicNotificationsOnResident:characteristicChangeThresholds:mediaNotifications:actionSetNotificationPayload:matterAttributeNotifications:enableNotification:", v9, 0, v11, MEMORY[0x24BDBD1A8], 0, 0);
    }
  }
  else
  {
    v30 = v11;
    v31 = v10;
    v32 = (void *)MEMORY[0x227676638]();
    v33 = self;
    HMFGetOSLogHandle();
    v34 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v34, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v35 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v49 = v35;
      _os_log_impl(&dword_2218F0000, v34, OS_LOG_TYPE_INFO, "%{public}@Not registering notifications with remote gateway since we have no modifications", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v32);
    v10 = v31;
    v11 = v30;
  }

}

- (void)_modifyCharacteristicNotificationsOnResident:(id)a3 characteristicChangeThresholds:(id)a4 mediaNotifications:(id)a5 actionSetNotificationPayload:(id)a6 matterAttributeNotifications:(id)a7 enableNotification:(BOOL)a8
{
  id v13;
  id v14;
  id v15;
  id v16;
  NSObject *v17;
  void *v18;
  void *v19;
  char v20;
  void *v21;
  void *v22;
  int v23;
  const char *v24;
  uint64_t i;
  id v26;
  id v27;
  id v28;
  void *v29;
  void *v30;
  HMDHome *v31;
  NSObject *v32;
  void *v33;
  id v34;
  id v35;
  id v36;
  id v37;
  void *v38;
  void *v39;
  HMDHome *v40;
  NSObject *v41;
  void *v42;
  const char *v43;
  HMDHome *v44;
  void *v45;
  void *v46;
  void *v47;
  const char *v48;
  id v49;
  id obj;
  uint64_t v51;
  HMDHome *v52;
  _BOOL4 v53;
  uint64_t v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  uint8_t v59[128];
  uint8_t buf[4];
  void *v61;
  __int16 v62;
  const char *v63;
  __int16 v64;
  void *v65;
  uint64_t v66;

  v53 = a8;
  v66 = *MEMORY[0x24BDAC8D0];
  v49 = a3;
  v13 = a4;
  v14 = a5;
  v15 = a6;
  v16 = a7;
  -[HMDHome workQueue](self, "workQueue");
  v17 = objc_claimAutoreleasedReturnValue();
  dispatch_assert_queue_V2(v17);

  v52 = self;
  -[HMDHome primaryResident](self, "primaryResident");
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  isWatch();
  if (v18
    && (objc_msgSend(v18, "device"),
        v19 = (void *)objc_claimAutoreleasedReturnValue(),
        v20 = objc_msgSend(v19, "isCurrentDevice"),
        v19,
        (v20 & 1) == 0))
  {
    v36 = v15;
    v37 = v13;
    v47 = v18;
    objc_msgSend(v18, "device");
    v38 = (void *)objc_claimAutoreleasedReturnValue();
    v39 = (void *)MEMORY[0x227676638]();
    v40 = v52;
    HMFGetOSLogHandle();
    v41 = objc_claimAutoreleasedReturnValue();
    v21 = v49;
    if (os_log_type_enabled(v41, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v42 = (void *)objc_claimAutoreleasedReturnValue();
      v43 = "Disabling";
      *(_DWORD *)buf = 138543874;
      v61 = v42;
      if (v53)
        v43 = "Enabling";
      v62 = 2080;
      v63 = v43;
      v64 = 2112;
      v65 = v38;
      _os_log_impl(&dword_2218F0000, v41, OS_LOG_TYPE_INFO, "%{public}@%s notifications with resident %@", buf, 0x20u);

    }
    objc_autoreleasePoolPop(v39);
    v44 = v40;
    v13 = v37;
    v15 = v36;
    -[HMDHome _modifyCharacteristicNotifications:characteristicChangeThresholds:mediaNotifications:actionSetNotificationPayload:matterAttributeNotifications:enableNotification:withDevice:completion:](v44, "_modifyCharacteristicNotifications:characteristicChangeThresholds:mediaNotifications:actionSetNotificationPayload:matterAttributeNotifications:enableNotification:withDevice:completion:", v49, v37, v14, v36, v16, v53, v38, 0);

    v18 = v47;
  }
  else
  {
    v21 = v49;
    objc_msgSend(v18, "device");
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    v23 = objc_msgSend(v22, "isCurrentDevice");

    if (v23)
    {
      v46 = v18;
      v57 = 0u;
      v58 = 0u;
      v55 = 0u;
      v56 = 0u;
      -[HMDHome residentEnabledDevices](self, "residentEnabledDevices");
      obj = (id)objc_claimAutoreleasedReturnValue();
      v54 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v55, v59, 16);
      if (v54)
      {
        v51 = *(_QWORD *)v56;
        v24 = "Disabling";
        if (v53)
          v24 = "Enabling";
        v48 = v24;
        do
        {
          for (i = 0; i != v54; ++i)
          {
            v26 = v15;
            v27 = v14;
            v28 = v13;
            if (*(_QWORD *)v56 != v51)
              objc_enumerationMutation(obj);
            v29 = *(void **)(*((_QWORD *)&v55 + 1) + 8 * i);
            v30 = (void *)MEMORY[0x227676638]();
            v31 = v52;
            HMFGetOSLogHandle();
            v32 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v32, OS_LOG_TYPE_INFO))
            {
              HMFGetLogIdentifier();
              v33 = (void *)objc_claimAutoreleasedReturnValue();
              *(_DWORD *)buf = 138543874;
              v61 = v33;
              v62 = 2080;
              v63 = v48;
              v64 = 2112;
              v65 = v29;
              _os_log_impl(&dword_2218F0000, v32, OS_LOG_TYPE_INFO, "%{public}@%s notifications with secondary resident %@", buf, 0x20u);

              v21 = v49;
            }

            objc_autoreleasePoolPop(v30);
            v45 = v29;
            v13 = v28;
            v34 = v28;
            v14 = v27;
            v35 = v27;
            v15 = v26;
            -[HMDHome _modifyCharacteristicNotifications:characteristicChangeThresholds:mediaNotifications:actionSetNotificationPayload:matterAttributeNotifications:enableNotification:withDevice:completion:](v31, "_modifyCharacteristicNotifications:characteristicChangeThresholds:mediaNotifications:actionSetNotificationPayload:matterAttributeNotifications:enableNotification:withDevice:completion:", v21, v34, v35, v26, v16, v53, v45, 0);
          }
          v54 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v55, v59, 16);
        }
        while (v54);
      }

      v18 = v46;
    }
    -[HMDHome _modifyCharacteristicNotificationsOnRemoteGateways:characteristicChangeThresholds:mediaNotifications:actionSetNotificationPayload:matterAttributeNotifications:enableNotification:](v52, "_modifyCharacteristicNotificationsOnRemoteGateways:characteristicChangeThresholds:mediaNotifications:actionSetNotificationPayload:matterAttributeNotifications:enableNotification:", v21, v13, v14, v15, v16, v53);
  }

}

- (void)_modifyCharacteristicNotificationsOnRemoteGateways:(id)a3 characteristicChangeThresholds:(id)a4 mediaNotifications:(id)a5 actionSetNotificationPayload:(id)a6 matterAttributeNotifications:(id)a7 enableNotification:(BOOL)a8
{
  uint64_t v8;
  id v14;
  id v15;
  NSObject *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  const char *v21;
  uint64_t i;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  HMDHome *v27;
  NSObject *v28;
  id v29;
  id v30;
  void *v31;
  const char *v32;
  unsigned int v33;
  void *v34;
  HMDHome *v35;
  id v36;
  id v37;
  id v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  uint8_t buf[4];
  void *v44;
  __int16 v45;
  const char *v46;
  __int16 v47;
  void *v48;
  _BYTE v49[128];
  uint64_t v50;

  v8 = a8;
  v50 = *MEMORY[0x24BDAC8D0];
  v14 = a3;
  v15 = a4;
  v38 = a5;
  v37 = a6;
  v36 = a7;
  -[HMDHome workQueue](self, "workQueue");
  v16 = objc_claimAutoreleasedReturnValue();
  dispatch_assert_queue_V2(v16);

  v41 = 0u;
  v42 = 0u;
  v39 = 0u;
  v40 = 0u;
  v35 = self;
  -[HMDHome _residentUsers](self, "_residentUsers");
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  v18 = objc_msgSend(v17, "countByEnumeratingWithState:objects:count:", &v39, v49, 16);
  if (v18)
  {
    v19 = v18;
    v20 = *(_QWORD *)v40;
    if ((_DWORD)v8)
      v21 = "Enabling";
    else
      v21 = "Disabling";
    v32 = v21;
    v33 = v8;
    v34 = v17;
    do
    {
      for (i = 0; i != v19; ++i)
      {
        if (*(_QWORD *)v40 != v20)
          objc_enumerationMutation(v17);
        v23 = *(void **)(*((_QWORD *)&v39 + 1) + 8 * i);
        if (objc_msgSend(v23, "configurationState") == 2)
        {
          objc_msgSend(v23, "userID");
          v24 = (void *)objc_claimAutoreleasedReturnValue();
          +[HMDDevice deviceWithDestination:](HMDDevice, "deviceWithDestination:", v24);
          v25 = (void *)objc_claimAutoreleasedReturnValue();

          if (v25 && (objc_msgSend(v25, "isCurrentDevice") & 1) == 0)
          {
            v26 = (void *)MEMORY[0x227676638]();
            v27 = v35;
            HMFGetOSLogHandle();
            v28 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v28, OS_LOG_TYPE_INFO))
            {
              HMFGetLogIdentifier();
              v29 = v15;
              v30 = v14;
              v31 = (void *)objc_claimAutoreleasedReturnValue();
              *(_DWORD *)buf = 138543874;
              v44 = v31;
              v45 = 2080;
              v46 = v32;
              v47 = 2112;
              v48 = v25;
              _os_log_impl(&dword_2218F0000, v28, OS_LOG_TYPE_INFO, "%{public}@%s notifications with remote gateway %@", buf, 0x20u);

              v14 = v30;
              v15 = v29;
              v8 = v33;
            }

            objc_autoreleasePoolPop(v26);
            -[HMDHome _modifyCharacteristicNotifications:characteristicChangeThresholds:mediaNotifications:actionSetNotificationPayload:matterAttributeNotifications:enableNotification:withDevice:completion:](v27, "_modifyCharacteristicNotifications:characteristicChangeThresholds:mediaNotifications:actionSetNotificationPayload:matterAttributeNotifications:enableNotification:withDevice:completion:", v14, v15, v38, v37, v36, v8, v25, 0);
            v17 = v34;
          }

        }
      }
      v19 = objc_msgSend(v17, "countByEnumeratingWithState:objects:count:", &v39, v49, 16);
    }
    while (v19);
  }

}

- (void)enableNotificationsForDevices:(id)a3
{
  id v4;
  NSObject *v5;
  id v6;
  _QWORD v7[5];
  id v8;

  v4 = a3;
  -[HMDHome workQueue](self, "workQueue");
  v5 = objc_claimAutoreleasedReturnValue();
  v7[0] = MEMORY[0x24BDAC760];
  v7[1] = 3221225472;
  v7[2] = __41__HMDHome_enableNotificationsForDevices___block_invoke;
  v7[3] = &unk_24E79C268;
  v7[4] = self;
  v8 = v4;
  v6 = v4;
  dispatch_async(v5, v7);

}

- (void)_enableNotificationsForDevices:(id)a3
{
  id v4;
  NSObject *v5;
  void *v6;
  HMDHome *v7;
  NSObject *v8;
  void *v9;
  void *v10;
  void *v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t i;
  char *v17;
  id v18;
  void *v19;
  id v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t j;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  HMDHome *v30;
  NSObject *v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  id v37;
  void *v38;
  id v39;
  id v40;
  void *v41;
  HMDHome *v42;
  NSObject *v43;
  void *v44;
  uint64_t v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  void *v52;
  void *v53;
  void *v54;
  char v55;
  void *v56;
  void *v57;
  void *v58;
  void *v59;
  void *v60;
  void *v61;
  uint64_t v62;
  void *v63;
  void *v64;
  void *v65;
  HMDHome *v66;
  NSObject *v67;
  void *v68;
  void *v69;
  void *v70;
  void *v71;
  void *v72;
  uint64_t v73;
  void *v74;
  void *v75;
  void *v76;
  void *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  void *v82;
  void *v83;
  HMDActionSetResponse *v84;
  void *v85;
  HMDActionSetResponse *v86;
  void *v87;
  void *v88;
  void *v89;
  void *v90;
  void *v91;
  void *v92;
  int v93;
  void *v94;
  HMDHome *v95;
  NSObject *v96;
  void *v97;
  void *v98;
  void *v99;
  id v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t k;
  uint64_t v105;
  void *v106;
  void *v107;
  void *v108;
  void *v109;
  HMDHome *v110;
  NSObject *v111;
  void *v112;
  void *v113;
  void *v114;
  uint64_t v115;
  uint64_t v116;
  id v117;
  void *v118;
  id v119;
  uint64_t v120;
  void *v121;
  id v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  void *v127;
  id obj;
  id obja;
  char objb;
  uint64_t v131;
  void *v132;
  uint64_t v133;
  uint64_t v134;
  void *v135;
  int v136;
  void *v137;
  void *v138;
  void *v139;
  uint64_t v140;
  void *v141;
  HMDHome *v142;
  char *v143;
  id v144;
  id v145;
  void *v146;
  void *v147;
  __int128 v148;
  __int128 v149;
  __int128 v150;
  __int128 v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  __int128 v158;
  __int128 v159;
  __int128 v160;
  __int128 v161;
  __int128 v162;
  __int128 v163;
  __int128 v164;
  __int128 v165;
  __int128 v166;
  __int128 v167;
  __int128 v168;
  __int128 v169;
  __int128 v170;
  __int128 v171;
  __int128 v172;
  __int128 v173;
  __int128 v174;
  __int128 v175;
  __int128 v176;
  __int128 v177;
  __int128 v178;
  __int128 v179;
  _BYTE v180[128];
  HMDActionSetResponse *v181;
  _BYTE v182[128];
  void *v183;
  _BYTE v184[128];
  _BYTE v185[128];
  _BYTE v186[128];
  _BYTE v187[128];
  _BYTE v188[128];
  uint8_t v189[128];
  uint8_t buf[4];
  void *v191;
  __int16 v192;
  id v193;
  uint64_t v194;

  v194 = *MEMORY[0x24BDAC8D0];
  v4 = a3;
  -[HMDHome workQueue](self, "workQueue");
  v5 = objc_claimAutoreleasedReturnValue();
  dispatch_assert_queue_V2(v5);

  if (objc_msgSend(v4, "count"))
  {
    v6 = (void *)MEMORY[0x227676638]();
    v7 = self;
    HMFGetOSLogHandle();
    v8 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
    {
      HMFGetLogIdentifier();
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v191 = v9;
      v192 = 2112;
      v193 = v4;
      _os_log_impl(&dword_2218F0000, v8, OS_LOG_TYPE_DEBUG, "%{public}@Enabling Notifications on %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v6);
    -[HMDHome notificationRegistrations](v7, "notificationRegistrations");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v133 = objc_msgSend(v10, "count");

    -[HMDHome primaryResident](v7, "primaryResident");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "device");
    v137 = (void *)objc_claimAutoreleasedReturnValue();

    v113 = v4;
    if (-[HMDHome isCurrentDeviceAvailableResident](v7, "isCurrentDeviceAvailableResident")
      && !-[HMDHome isCurrentDevicePrimaryResident](v7, "isCurrentDevicePrimaryResident"))
    {
      v178 = 0u;
      v179 = 0u;
      v176 = 0u;
      v177 = 0u;
      v12 = v4;
      v13 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v176, v189, 16);
      if (v13)
      {
        v14 = v13;
        v15 = *(_QWORD *)v177;
        while (2)
        {
          for (i = 0; i != v14; ++i)
          {
            if (*(_QWORD *)v177 != v15)
              objc_enumerationMutation(v12);
            if ((objc_msgSend(*(id *)(*((_QWORD *)&v176 + 1) + 8 * i), "isEqual:", v137) & 1) != 0)
            {
              v136 = 1;
              goto LABEL_17;
            }
          }
          v14 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v176, v189, 16);
          if (v14)
            continue;
          break;
        }
      }
      v136 = 0;
LABEL_17:

    }
    else
    {
      v136 = 0;
    }
    objc_msgSend(MEMORY[0x24BDBCEB8], "array");
    v141 = (void *)objc_claimAutoreleasedReturnValue();
    v172 = 0u;
    v173 = 0u;
    v174 = 0u;
    v175 = 0u;
    -[HMDHome triggers](v7, "triggers");
    obj = (id)objc_claimAutoreleasedReturnValue();
    v142 = v7;
    v134 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v172, v188, 16);
    if (v134)
    {
      v131 = *(_QWORD *)v173;
      do
      {
        v17 = 0;
        do
        {
          if (*(_QWORD *)v173 != v131)
            objc_enumerationMutation(obj);
          v143 = v17;
          v18 = *(id *)(*((_QWORD *)&v172 + 1) + 8 * (_QWORD)v17);
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) != 0)
            v19 = v18;
          else
            v19 = 0;
          v20 = v19;

          v170 = 0u;
          v171 = 0u;
          v168 = 0u;
          v169 = 0u;
          v138 = v20;
          objc_msgSend(v20, "characteristicEvents");
          v21 = (void *)objc_claimAutoreleasedReturnValue();
          v22 = objc_msgSend(v21, "countByEnumeratingWithState:objects:count:", &v168, v187, 16);
          if (v22)
          {
            v23 = v22;
            v24 = *(_QWORD *)v169;
            do
            {
              for (j = 0; j != v23; ++j)
              {
                if (*(_QWORD *)v169 != v24)
                  objc_enumerationMutation(v21);
                v26 = *(void **)(*((_QWORD *)&v168 + 1) + 8 * j);
                objc_msgSend(v26, "characteristic");
                v27 = (void *)objc_claimAutoreleasedReturnValue();

                if (v27)
                {
                  objc_msgSend(v26, "characteristic");
                  v28 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend(v141, "addObject:", v28);

                }
                else
                {
                  v29 = (void *)MEMORY[0x227676638]();
                  v30 = v7;
                  HMFGetOSLogHandle();
                  v31 = objc_claimAutoreleasedReturnValue();
                  if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
                  {
                    HMFGetLogIdentifier();
                    v32 = (void *)objc_claimAutoreleasedReturnValue();
                    *(_DWORD *)buf = 138543618;
                    v191 = v32;
                    v192 = 2112;
                    v193 = v26;
                    _os_log_impl(&dword_2218F0000, v31, OS_LOG_TYPE_ERROR, "%{public}@Characteristic of HMDCharacteristicEvent %@ is nil!", buf, 0x16u);

                  }
                  objc_autoreleasePoolPop(v29);
                  v7 = v142;
                }
              }
              v23 = objc_msgSend(v21, "countByEnumeratingWithState:objects:count:", &v168, v187, 16);
            }
            while (v23);
          }

          v17 = v143 + 1;
        }
        while (v143 + 1 != (char *)v134);
        v134 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v172, v188, 16);
      }
      while (v134);
    }

    objc_msgSend(MEMORY[0x24BDBCED8], "dictionary");
    v114 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDBCED8], "dictionary");
    v121 = (void *)objc_claimAutoreleasedReturnValue();
    v164 = 0u;
    v165 = 0u;
    v166 = 0u;
    v167 = 0u;
    -[HMDHome accessories](v7, "accessories");
    v117 = (id)objc_claimAutoreleasedReturnValue();
    v33 = objc_msgSend(v117, "countByEnumeratingWithState:objects:count:", &v164, v186, 16);
    if (v33)
    {
      v34 = v33;
      v35 = *(_QWORD *)v165;
      v126 = *MEMORY[0x24BE1B780];
      v115 = *(_QWORD *)v165;
      do
      {
        v36 = 0;
        v116 = v34;
        do
        {
          if (*(_QWORD *)v165 != v35)
            objc_enumerationMutation(v117);
          v37 = *(id *)(*((_QWORD *)&v164 + 1) + 8 * v36);
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) != 0)
            v38 = v37;
          else
            v38 = 0;
          v39 = v38;

          if (v39)
          {
            if (shouldSkipRemoteAccessoryNotificationRegistration(v7, v39))
            {
              v40 = v39;
              v41 = (void *)MEMORY[0x227676638]();
              v42 = v7;
              HMFGetOSLogHandle();
              v43 = objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v43, OS_LOG_TYPE_INFO))
              {
                HMFGetLogIdentifier();
                v44 = (void *)objc_claimAutoreleasedReturnValue();
                *(_DWORD *)buf = 138543618;
                v191 = v44;
                v192 = 2112;
                v193 = v40;
                _os_log_impl(&dword_2218F0000, v43, OS_LOG_TYPE_INFO, "%{public}@Dropping all characteristics for %@ from remote notification as partitioned network is no longer supported by residents", buf, 0x16u);

              }
              objc_autoreleasePoolPop(v41);
              v39 = v40;
              goto LABEL_101;
            }
            v118 = v37;
            v120 = v36;
            objc_msgSend(MEMORY[0x24BDBCEB8], "array");
            v135 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(MEMORY[0x24BDBCED8], "dictionary");
            v132 = (void *)objc_claimAutoreleasedReturnValue();
            v160 = 0u;
            v161 = 0u;
            v162 = 0u;
            v163 = 0u;
            v119 = v39;
            objc_msgSend(v39, "services");
            v122 = (id)objc_claimAutoreleasedReturnValue();
            v124 = objc_msgSend(v122, "countByEnumeratingWithState:objects:count:", &v160, v185, 16);
            if (!v124)
              goto LABEL_96;
            v123 = *(_QWORD *)v161;
            while (1)
            {
              v45 = 0;
              do
              {
                if (*(_QWORD *)v161 != v123)
                  objc_enumerationMutation(v122);
                v125 = v45;
                v46 = *(void **)(*((_QWORD *)&v160 + 1) + 8 * v45);
                v156 = 0u;
                v157 = 0u;
                v158 = 0u;
                v159 = 0u;
                objc_msgSend(v46, "characteristics");
                v144 = (id)objc_claimAutoreleasedReturnValue();
                v47 = objc_msgSend(v144, "countByEnumeratingWithState:objects:count:", &v156, v184, 16);
                if (v47)
                {
                  v48 = v47;
                  v49 = *(_QWORD *)v157;
                  v139 = v46;
                  do
                  {
                    v50 = 0;
                    do
                    {
                      if (*(_QWORD *)v157 != v49)
                        objc_enumerationMutation(v144);
                      v51 = *(void **)(*((_QWORD *)&v156 + 1) + 8 * v50);
                      if (objc_msgSend(v51, "supportsNotification"))
                      {
                        -[HMDHome hapMetadata](v7, "hapMetadata");
                        v52 = (void *)objc_claimAutoreleasedReturnValue();
                        objc_msgSend(v51, "type");
                        v53 = (void *)objc_claimAutoreleasedReturnValue();
                        objc_msgSend(v46, "type");
                        v54 = (void *)objc_claimAutoreleasedReturnValue();
                        v55 = objc_msgSend(v52, "shouldFilterEnableNotificationsForCharacteristicType:serviceType:", v53, v54);

                        if ((v55 & 1) == 0)
                        {
                          objc_msgSend(v51, "type");
                          v146 = (void *)objc_claimAutoreleasedReturnValue();
                          objc_msgSend(v46, "type");
                          v56 = (void *)objc_claimAutoreleasedReturnValue();
                          -[HMDHome notificationRegistry](v7, "notificationRegistry");
                          v57 = (void *)objc_claimAutoreleasedReturnValue();
                          v183 = v51;
                          objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", &v183, 1);
                          v58 = (void *)objc_claimAutoreleasedReturnValue();
                          objc_msgSend(v57, "destinationsRegisteredForNotificationsForCharacteristics:", v58);
                          v59 = (void *)objc_claimAutoreleasedReturnValue();
                          v60 = (void *)objc_msgSend(v59, "mutableCopy");

                          objc_msgSend(v137, "remoteDestinationString");
                          v61 = (void *)objc_claimAutoreleasedReturnValue();
                          if (v61)
                            objc_msgSend(v60, "removeObject:", v61);
                          v62 = objc_msgSend(v60, "count");
                          if ((objc_msgSend(v141, "containsObject:", v51) & 1) != 0
                            || (objc_msgSend(v51, "isNonHomeNotificationsEnabled") & 1) != 0)
                          {
                            goto LABEL_73;
                          }
                          -[HMDHome hapMetadata](v142, "hapMetadata");
                          v63 = (void *)objc_claimAutoreleasedReturnValue();
                          if ((objc_msgSend(v63, "requiresDeviceUnlock:forService:", v146, v56) & 1) == 0)
                          {
                            -[HMDHome hapMetadata](v142, "hapMetadata");
                            v64 = (void *)objc_claimAutoreleasedReturnValue();
                            if ((objc_msgSend(v64, "shouldAutoEnableNotificationForCharacteristic:ofService:", v146, v56) & 1) == 0&& (!objc_msgSend(v146, "isEqualToString:", CFSTR("000000A6-0000-1000-8000-0026BB765291"))|| (objc_msgSend(v56, "isEqualToString:", v126) & 1) == 0))
                            {
                              if (v133)
                              {
                                -[HMDHome hapMetadata](v142, "hapMetadata");
                                v127 = (void *)objc_claimAutoreleasedReturnValue();
                                objb = objc_msgSend(v127, "shouldEnableHomeNotificationForCharacteristicType:serviceType:", v146, v56);

                                if ((objb & 1) != 0)
                                  goto LABEL_73;
                              }
                              else
                              {

                              }
                              if (v62)
                              {
LABEL_73:
                                if (v136
                                  && objc_msgSend(v51, "isNotificationEnabledForClientIdentifierPrefix:", CFSTR("com.apple.HomeKitDaemon.Local")))
                                {
                                  v65 = (void *)MEMORY[0x227676638]();
                                  v66 = v142;
                                  HMFGetOSLogHandle();
                                  v67 = objc_claimAutoreleasedReturnValue();
                                  if (os_log_type_enabled(v67, OS_LOG_TYPE_INFO))
                                  {
                                    HMFGetLogIdentifier();
                                    obja = v65;
                                    v68 = (void *)objc_claimAutoreleasedReturnValue();
                                    *(_DWORD *)buf = 138543618;
                                    v191 = v68;
                                    v192 = 2112;
                                    v193 = v51;
                                    _os_log_impl(&dword_2218F0000, v67, OS_LOG_TYPE_INFO, "%{public}@Dropping characteristic for remote notifications from primary resident because it should be local only: %@", buf, 0x16u);

                                    v65 = obja;
                                  }

                                  objc_autoreleasePoolPop(v65);
                                }
                                else
                                {
                                  objc_msgSend(v51, "instanceID");
                                  v69 = (void *)objc_claimAutoreleasedReturnValue();
                                  objc_msgSend(v135, "addObject:", v69);

                                  objc_msgSend(v51, "changeThresholdForEnabledNotifications");
                                  v70 = (void *)objc_claimAutoreleasedReturnValue();
                                  if (v70 && !v133)
                                  {
                                    objc_msgSend(v51, "instanceID");
                                    v71 = (void *)objc_claimAutoreleasedReturnValue();
                                    objc_msgSend(v71, "stringValue");
                                    v72 = (void *)objc_claimAutoreleasedReturnValue();
                                    objc_msgSend(v132, "setObject:forKeyedSubscript:", v70, v72);

                                  }
                                }
                              }

                              v7 = v142;
                              v46 = v139;
                              goto LABEL_83;
                            }

                          }
                          goto LABEL_73;
                        }
                      }
LABEL_83:
                      ++v50;
                    }
                    while (v48 != v50);
                    v73 = objc_msgSend(v144, "countByEnumeratingWithState:objects:count:", &v156, v184, 16);
                    v48 = v73;
                  }
                  while (v73);
                }

                v45 = v125 + 1;
              }
              while (v125 + 1 != v124);
              v124 = objc_msgSend(v122, "countByEnumeratingWithState:objects:count:", &v160, v185, 16);
              if (!v124)
              {
LABEL_96:

                objc_msgSend(v118, "uuid");
                v74 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v74, "UUIDString");
                v75 = (void *)objc_claimAutoreleasedReturnValue();

                if (objc_msgSend(v135, "count"))
                {
                  v76 = (void *)objc_msgSend(v135, "copy");
                  objc_msgSend(v114, "setObject:forKeyedSubscript:", v76, v75);

                }
                v35 = v115;
                v34 = v116;
                v36 = v120;
                if (objc_msgSend(v132, "count"))
                {
                  v77 = (void *)objc_msgSend(v132, "copy");
                  objc_msgSend(v121, "setObject:forKeyedSubscript:", v77, v75);

                }
                v39 = v119;
                break;
              }
            }
          }
LABEL_101:

          ++v36;
        }
        while (v36 != v34);
        v34 = objc_msgSend(v117, "countByEnumeratingWithState:objects:count:", &v164, v186, 16);
      }
      while (v34);
    }

    objc_msgSend(MEMORY[0x24BDBCEB8], "array");
    v147 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v114, "count");
    v152 = 0u;
    v153 = 0u;
    v154 = 0u;
    v155 = 0u;
    -[HMDHome actionSets](v7, "actionSets");
    v145 = (id)objc_claimAutoreleasedReturnValue();
    v78 = objc_msgSend(v145, "countByEnumeratingWithState:objects:count:", &v152, v182, 16);
    if (v78)
    {
      v79 = v78;
      v80 = *(_QWORD *)v153;
      do
      {
        v81 = 0;
        v140 = v79;
        do
        {
          if (*(_QWORD *)v153 != v80)
            objc_enumerationMutation(v145);
          v82 = *(void **)(*((_QWORD *)&v152 + 1) + 8 * v81);
          if (_os_feature_enabled_impl())
          {
            -[HMDHome notificationRegistry](v142, "notificationRegistry");
            v83 = (void *)objc_claimAutoreleasedReturnValue();
            v84 = [HMDActionSetResponse alloc];
            objc_msgSend(v82, "uuid");
            v85 = (void *)objc_claimAutoreleasedReturnValue();
            v86 = -[HMDActionSetResponse initWithActionSetUUID:state:](v84, "initWithActionSetUUID:state:", v85, 0);
            v181 = v86;
            objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", &v181, 1);
            v87 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v83, "destinationsRegisteredForNotificationsForActionSetResponses:", v87);
            v88 = (void *)objc_claimAutoreleasedReturnValue();
            v89 = (void *)objc_msgSend(v88, "mutableCopy");

            objc_msgSend(v137, "remoteDestinationString");
            v90 = (void *)objc_claimAutoreleasedReturnValue();
            if (v90)
              objc_msgSend(v89, "removeObject:", v90);
            if (objc_msgSend(v89, "count")
              || (-[HMDHome actionSetStateSubscriptionManager](v142, "actionSetStateSubscriptionManager"),
                  v91 = (void *)objc_claimAutoreleasedReturnValue(),
                  objc_msgSend(v82, "uuid"),
                  v92 = (void *)objc_claimAutoreleasedReturnValue(),
                  v93 = objc_msgSend(v91, "isMonitoringActionSet:", v92),
                  v92,
                  v91,
                  v93))
            {
              if (v136)
              {
                v94 = (void *)MEMORY[0x227676638]();
                v95 = v142;
                HMFGetOSLogHandle();
                v96 = objc_claimAutoreleasedReturnValue();
                if (os_log_type_enabled(v96, OS_LOG_TYPE_INFO))
                {
                  HMFGetLogIdentifier();
                  v97 = (void *)objc_claimAutoreleasedReturnValue();
                  *(_DWORD *)buf = 138543618;
                  v191 = v97;
                  v192 = 2112;
                  v193 = v82;
                  _os_log_impl(&dword_2218F0000, v96, OS_LOG_TYPE_INFO, "%{public}@Dropping action set for remote notifications from primary resident because it should be local only: %@", buf, 0x16u);

                }
                objc_autoreleasePoolPop(v94);
              }
              else
              {
                objc_msgSend(v82, "uuid");
                v98 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v98, "UUIDString");
                v99 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v147, "addObject:", v99);

              }
            }

            v79 = v140;
          }
          ++v81;
        }
        while (v79 != v81);
        v79 = objc_msgSend(v145, "countByEnumeratingWithState:objects:count:", &v152, v182, 16);
      }
      while (v79);
    }

    if (objc_msgSend(v114, "count") || objc_msgSend(v147, "count"))
    {
      v150 = 0u;
      v151 = 0u;
      v148 = 0u;
      v149 = 0u;
      v100 = v113;
      v101 = objc_msgSend(v100, "countByEnumeratingWithState:objects:count:", &v148, v180, 16);
      if (v101)
      {
        v102 = v101;
        v103 = *(_QWORD *)v149;
        do
        {
          for (k = 0; k != v102; ++k)
          {
            if (*(_QWORD *)v149 != v103)
              objc_enumerationMutation(v100);
            v105 = *(_QWORD *)(*((_QWORD *)&v148 + 1) + 8 * k);
            v106 = (void *)objc_msgSend(v114, "copy");
            v107 = (void *)objc_msgSend(0, "copy");
            v108 = (void *)objc_msgSend(v147, "copy");
            -[HMDHome _modifyCharacteristicNotifications:characteristicChangeThresholds:mediaNotifications:actionSetNotificationPayload:enableNotification:withDevice:](v142, "_modifyCharacteristicNotifications:characteristicChangeThresholds:mediaNotifications:actionSetNotificationPayload:enableNotification:withDevice:", v106, v121, v107, v108, 1, v105);

          }
          v102 = objc_msgSend(v100, "countByEnumeratingWithState:objects:count:", &v148, v180, 16);
        }
        while (v102);
      }

      v4 = v113;
    }
    else
    {
      v109 = (void *)MEMORY[0x227676638]();
      v110 = v142;
      HMFGetOSLogHandle();
      v111 = objc_claimAutoreleasedReturnValue();
      v4 = v113;
      if (os_log_type_enabled(v111, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v112 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543362;
        v191 = v112;
        _os_log_impl(&dword_2218F0000, v111, OS_LOG_TYPE_INFO, "%{public}@There are no characteristics/media properties requiring registration", buf, 0xCu);

      }
      objc_autoreleasePoolPop(v109);
    }

  }
}

- (void)disableNotificationsForDevices:(id)a3
{
  id v4;
  NSObject *v5;
  id v6;
  _QWORD v7[5];
  id v8;

  v4 = a3;
  -[HMDHome workQueue](self, "workQueue");
  v5 = objc_claimAutoreleasedReturnValue();
  v7[0] = MEMORY[0x24BDAC760];
  v7[1] = 3221225472;
  v7[2] = __42__HMDHome_disableNotificationsForDevices___block_invoke;
  v7[3] = &unk_24E79C268;
  v7[4] = self;
  v8 = v4;
  v6 = v4;
  dispatch_async(v5, v7);

}

- (void)_disableNotificationsForDevices:(id)a3
{
  id v4;
  NSObject *v5;
  void *v6;
  HMDHome *v7;
  NSObject *v8;
  void *v9;
  uint64_t i;
  void *v11;
  void *v12;
  id v13;
  void *v14;
  id v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t j;
  void *v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t k;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  void *v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t m;
  uint64_t v46;
  void *v47;
  void *v48;
  void *v49;
  void *v50;
  HMDHome *v51;
  NSObject *v52;
  void *v53;
  void *v54;
  HMDHome *v55;
  id obj;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  id v61;
  uint64_t v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  _BYTE v83[128];
  _BYTE v84[128];
  _BYTE v85[128];
  _BYTE v86[128];
  uint8_t v87[128];
  uint8_t buf[4];
  void *v89;
  __int16 v90;
  id v91;
  uint64_t v92;

  v92 = *MEMORY[0x24BDAC8D0];
  v4 = a3;
  -[HMDHome workQueue](self, "workQueue");
  v5 = objc_claimAutoreleasedReturnValue();
  dispatch_assert_queue_V2(v5);

  if (objc_msgSend(v4, "count"))
  {
    v6 = (void *)MEMORY[0x227676638]();
    v7 = self;
    HMFGetOSLogHandle();
    v8 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
    {
      HMFGetLogIdentifier();
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v89 = v9;
      v90 = 2112;
      v91 = v4;
      _os_log_impl(&dword_2218F0000, v8, OS_LOG_TYPE_DEBUG, "%{public}@Disabling Notifications on %@", buf, 0x16u);

    }
    v54 = v4;

    objc_autoreleasePoolPop(v6);
    objc_msgSend(MEMORY[0x24BDBCED8], "dictionary");
    v57 = (void *)objc_claimAutoreleasedReturnValue();
    v79 = 0u;
    v80 = 0u;
    v81 = 0u;
    v82 = 0u;
    v55 = v7;
    -[HMDHome accessories](v7, "accessories");
    obj = (id)objc_claimAutoreleasedReturnValue();
    v59 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v79, v87, 16);
    if (v59)
    {
      v58 = *(_QWORD *)v80;
      do
      {
        for (i = 0; i != v59; ++i)
        {
          if (*(_QWORD *)v80 != v58)
            objc_enumerationMutation(obj);
          v11 = *(void **)(*((_QWORD *)&v79 + 1) + 8 * i);
          objc_msgSend(MEMORY[0x24BDBCEB8], "array");
          v12 = (void *)objc_claimAutoreleasedReturnValue();
          v13 = v11;
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) != 0)
            v14 = v13;
          else
            v14 = 0;
          v15 = v14;

          if (v15)
          {
            v60 = v13;
            v61 = v15;
            v62 = i;
            v77 = 0u;
            v78 = 0u;
            v75 = 0u;
            v76 = 0u;
            objc_msgSend(v15, "services");
            v16 = (void *)objc_claimAutoreleasedReturnValue();
            v17 = objc_msgSend(v16, "countByEnumeratingWithState:objects:count:", &v75, v86, 16);
            if (v17)
            {
              v18 = v17;
              v19 = *(_QWORD *)v76;
              do
              {
                for (j = 0; j != v18; ++j)
                {
                  if (*(_QWORD *)v76 != v19)
                    objc_enumerationMutation(v16);
                  v21 = *(void **)(*((_QWORD *)&v75 + 1) + 8 * j);
                  v71 = 0u;
                  v72 = 0u;
                  v73 = 0u;
                  v74 = 0u;
                  objc_msgSend(v21, "characteristics");
                  v22 = (void *)objc_claimAutoreleasedReturnValue();
                  v23 = objc_msgSend(v22, "countByEnumeratingWithState:objects:count:", &v71, v85, 16);
                  if (v23)
                  {
                    v24 = v23;
                    v25 = *(_QWORD *)v72;
                    do
                    {
                      for (k = 0; k != v24; ++k)
                      {
                        if (*(_QWORD *)v72 != v25)
                          objc_enumerationMutation(v22);
                        v27 = *(void **)(*((_QWORD *)&v71 + 1) + 8 * k);
                        if (objc_msgSend(v27, "supportsNotification"))
                        {
                          objc_msgSend(v27, "instanceID");
                          v28 = (void *)objc_claimAutoreleasedReturnValue();
                          objc_msgSend(v12, "addObject:", v28);

                        }
                      }
                      v24 = objc_msgSend(v22, "countByEnumeratingWithState:objects:count:", &v71, v85, 16);
                    }
                    while (v24);
                  }

                }
                v18 = objc_msgSend(v16, "countByEnumeratingWithState:objects:count:", &v75, v86, 16);
              }
              while (v18);
            }

            objc_msgSend(v60, "uuid");
            v29 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v29, "UUIDString");
            v30 = (void *)objc_claimAutoreleasedReturnValue();

            if (objc_msgSend(v12, "count"))
            {
              v31 = (void *)objc_msgSend(v12, "copy");
              objc_msgSend(v57, "setObject:forKeyedSubscript:", v31, v30);

            }
            v15 = v61;
            i = v62;
          }

        }
        v59 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v79, v87, 16);
      }
      while (v59);
    }

    objc_msgSend(MEMORY[0x24BDBCEB8], "array");
    v32 = (void *)objc_claimAutoreleasedReturnValue();
    v67 = 0u;
    v68 = 0u;
    v69 = 0u;
    v70 = 0u;
    -[HMDHome actionSets](v55, "actionSets");
    v33 = (id)objc_claimAutoreleasedReturnValue();
    v34 = objc_msgSend(v33, "countByEnumeratingWithState:objects:count:", &v67, v84, 16);
    if (v34)
    {
      v35 = v34;
      v36 = *(_QWORD *)v68;
LABEL_36:
      v37 = 0;
      while (1)
      {
        if (*(_QWORD *)v68 != v36)
          objc_enumerationMutation(v33);
        v38 = *(void **)(*((_QWORD *)&v67 + 1) + 8 * v37);
        if (!_os_feature_enabled_impl())
          break;
        objc_msgSend(v38, "uuid");
        v39 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v39, "UUIDString");
        v40 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v32, "addObject:", v40);

        if (v35 == ++v37)
        {
          v35 = objc_msgSend(v33, "countByEnumeratingWithState:objects:count:", &v67, v84, 16);
          if (v35)
            goto LABEL_36;
          goto LABEL_42;
        }
      }
    }
    else
    {
LABEL_42:

      if (!objc_msgSend(v57, "count") && !objc_msgSend(v32, "count"))
      {
        v50 = (void *)MEMORY[0x227676638]();
        v51 = v55;
        HMFGetOSLogHandle();
        v52 = objc_claimAutoreleasedReturnValue();
        v4 = v54;
        if (os_log_type_enabled(v52, OS_LOG_TYPE_INFO))
        {
          HMFGetLogIdentifier();
          v53 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543362;
          v89 = v53;
          _os_log_impl(&dword_2218F0000, v52, OS_LOG_TYPE_INFO, "%{public}@There are no characteristics requiring deregistration", buf, 0xCu);

        }
        objc_autoreleasePoolPop(v50);
        goto LABEL_52;
      }
      v65 = 0u;
      v66 = 0u;
      v63 = 0u;
      v64 = 0u;
      v33 = v54;
      v41 = objc_msgSend(v33, "countByEnumeratingWithState:objects:count:", &v63, v83, 16);
      if (v41)
      {
        v42 = v41;
        v43 = *(_QWORD *)v64;
        v44 = MEMORY[0x24BDBD1B8];
        do
        {
          for (m = 0; m != v42; ++m)
          {
            if (*(_QWORD *)v64 != v43)
              objc_enumerationMutation(v33);
            v46 = *(_QWORD *)(*((_QWORD *)&v63 + 1) + 8 * m);
            v47 = (void *)objc_msgSend(v57, "copy");
            v48 = (void *)objc_msgSend(0, "copy");
            v49 = (void *)objc_msgSend(v32, "copy");
            -[HMDHome _modifyCharacteristicNotifications:characteristicChangeThresholds:mediaNotifications:actionSetNotificationPayload:enableNotification:withDevice:](v55, "_modifyCharacteristicNotifications:characteristicChangeThresholds:mediaNotifications:actionSetNotificationPayload:enableNotification:withDevice:", v47, v44, v48, v49, 0, v46);

          }
          v42 = objc_msgSend(v33, "countByEnumeratingWithState:objects:count:", &v63, v83, 16);
        }
        while (v42);
      }
    }

    v4 = v54;
LABEL_52:

  }
}

- (void)resubscribeForNotificationsOnResident:(id)a3
{
  id v4;
  NSObject *v5;
  id v6;
  _QWORD v7[5];
  id v8;

  v4 = a3;
  -[HMDHome workQueue](self, "workQueue");
  v5 = objc_claimAutoreleasedReturnValue();
  v7[0] = MEMORY[0x24BDAC760];
  v7[1] = 3221225472;
  v7[2] = __49__HMDHome_resubscribeForNotificationsOnResident___block_invoke;
  v7[3] = &unk_24E79C268;
  v7[4] = self;
  v8 = v4;
  v6 = v4;
  dispatch_async(v5, v7);

}

- (void)_resubscribeForNotificationsOnResident:(id)a3
{
  id v4;
  NSObject *v5;
  void *v6;
  void *v7;
  void *v8;
  HMDHome *v9;
  NSObject *v10;
  void *v11;
  void *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t i;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  HMDHome *v25;
  NSObject *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  HMDHome *v31;
  NSObject *v32;
  void *v33;
  void *v34;
  id v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  uint8_t v40[128];
  uint8_t buf[4];
  void *v42;
  __int16 v43;
  id v44;
  __int16 v45;
  void *v46;
  uint64_t v47;

  v47 = *MEMORY[0x24BDAC8D0];
  v4 = a3;
  -[HMDHome workQueue](self, "workQueue");
  v5 = objc_claimAutoreleasedReturnValue();
  dispatch_assert_queue_V2(v5);

  -[HMDHome primaryResident](self, "primaryResident");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "device");
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  v8 = (void *)MEMORY[0x227676638]();
  v9 = self;
  HMFGetOSLogHandle();
  v10 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543874;
    v42 = v11;
    v43 = 2112;
    v44 = v4;
    v45 = 2112;
    v46 = v7;
    _os_log_impl(&dword_2218F0000, v10, OS_LOG_TYPE_INFO, "%{public}@Resubscribing for notifications - previousResidentDevice: %@, current primaryResident: %@", buf, 0x20u);

  }
  v35 = v4;

  objc_autoreleasePoolPop(v8);
  isWatch();
  -[HMDHome residentEnabledDevices](v9, "residentEnabledDevices");
  v34 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x24BDBCEB8], "array");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  v36 = 0u;
  v37 = 0u;
  v38 = 0u;
  v39 = 0u;
  -[HMDHome _residentUsers](v9, "_residentUsers");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  v14 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v36, v40, 16);
  if (v14)
  {
    v15 = v14;
    v16 = *(_QWORD *)v37;
    do
    {
      for (i = 0; i != v15; ++i)
      {
        if (*(_QWORD *)v37 != v16)
          objc_enumerationMutation(v13);
        v18 = *(void **)(*((_QWORD *)&v36 + 1) + 8 * i);
        if (objc_msgSend(v18, "configurationState") == 2)
        {
          objc_msgSend(v18, "userID");
          v19 = (void *)objc_claimAutoreleasedReturnValue();
          +[HMDDevice deviceWithDestination:](HMDDevice, "deviceWithDestination:", v19);
          v20 = (void *)objc_claimAutoreleasedReturnValue();

          if (v20 && (objc_msgSend(v20, "isCurrentDevice") & 1) == 0)
            objc_msgSend(v12, "addObject:", v20);

        }
      }
      v15 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v36, v40, 16);
    }
    while (v15);
  }

  if (objc_msgSend(v34, "count") || objc_msgSend(v12, "count"))
  {
    objc_msgSend(MEMORY[0x24BDBCEF0], "setWithCapacity:", objc_msgSend(v12, "count") + objc_msgSend(v34, "count"));
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDBCEF0], "setWithCapacity:", objc_msgSend(v12, "count") + objc_msgSend(v34, "count"));
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v7, "isCurrentDevice"))
    {
      objc_msgSend(v21, "addObjectsFromArray:", v34);
      objc_msgSend(v21, "addObjectsFromArray:", v12);
      v23 = v35;
    }
    else
    {
      v23 = v35;
      if (v35)
        objc_msgSend(v22, "addObject:", v35);
      else
        objc_msgSend(v22, "addObjectsFromArray:", v12);
      if (v7)
        objc_msgSend(v21, "addObject:", v7);
      else
        objc_msgSend(v21, "addObjectsFromArray:", v12);
    }
    v24 = (void *)MEMORY[0x227676638](objc_msgSend(v22, "minusSet:", v21));
    v25 = v9;
    HMFGetOSLogHandle();
    v26 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v26, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v27 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v42 = v27;
      _os_log_impl(&dword_2218F0000, v26, OS_LOG_TYPE_INFO, "%{public}@Modifying notification registrations with resident due to initial home launch or change in primary resident.", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v24);
    if (objc_msgSend(v22, "count"))
    {
      objc_msgSend(v22, "allObjects");
      v28 = (void *)objc_claimAutoreleasedReturnValue();
      -[HMDHome _disableNotificationsForDevices:](v25, "_disableNotificationsForDevices:", v28);

    }
    if (objc_msgSend(v21, "count"))
    {
      objc_msgSend(v21, "allObjects");
      v29 = (void *)objc_claimAutoreleasedReturnValue();
      -[HMDHome _enableNotificationsForDevices:](v25, "_enableNotificationsForDevices:", v29);

    }
  }
  else
  {
    v30 = (void *)MEMORY[0x227676638]();
    v31 = v9;
    HMFGetOSLogHandle();
    v32 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v32, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v33 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v42 = v33;
      _os_log_impl(&dword_2218F0000, v32, OS_LOG_TYPE_INFO, "%{public}@There are no resident devices or remote gateways to register with", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v30);
    v23 = v35;
  }

}

- (BOOL)shouldRestrictAllMessagingToLocalTransportsForUser:(id)a3
{
  id v3;
  _BOOL4 v4;
  int v5;

  v3 = a3;
  v4 = isiOSDevice();
  LOBYTE(v5) = 0;
  if (v3 && v4)
    v5 = objc_msgSend(v3, "isRemoteAccessAllowed") ^ 1;

  return v5;
}

- (void)modifyCharacteristicNotifications:(id)a3 characteristicChangeThresholds:(id)a4 mediaNotifications:(id)a5 actionSetNotificationPayload:(id)a6 enableNotification:(BOOL)a7 withDevice:(id)a8
{
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  NSObject *v19;
  id v20;
  id v21;
  id v22;
  id v23;
  id v24;
  _QWORD block[5];
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  BOOL v31;

  v14 = a3;
  v15 = a4;
  v16 = a5;
  v17 = a6;
  v18 = a8;
  -[HMDHome workQueue](self, "workQueue");
  v19 = objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x24BDAC760];
  block[1] = 3221225472;
  block[2] = __154__HMDHome_modifyCharacteristicNotifications_characteristicChangeThresholds_mediaNotifications_actionSetNotificationPayload_enableNotification_withDevice___block_invoke;
  block[3] = &unk_24E7974C0;
  block[4] = self;
  v26 = v14;
  v27 = v15;
  v28 = v16;
  v31 = a7;
  v29 = v17;
  v30 = v18;
  v20 = v18;
  v21 = v17;
  v22 = v16;
  v23 = v15;
  v24 = v14;
  dispatch_async(v19, block);

}

- (void)_modifyCharacteristicNotifications:(id)a3 characteristicChangeThresholds:(id)a4 mediaNotifications:(id)a5 actionSetNotificationPayload:(id)a6 enableNotification:(BOOL)a7 withDevice:(id)a8
{
  -[HMDHome _modifyCharacteristicNotifications:characteristicChangeThresholds:mediaNotifications:actionSetNotificationPayload:matterAttributeNotifications:enableNotification:withDevice:completion:](self, "_modifyCharacteristicNotifications:characteristicChangeThresholds:mediaNotifications:actionSetNotificationPayload:matterAttributeNotifications:enableNotification:withDevice:completion:", a3, a4, a5, a6, 0, a7, a8, 0);
}

- (void)_modifyCharacteristicNotifications:(id)a3 characteristicChangeThresholds:(id)a4 mediaNotifications:(id)a5 actionSetNotificationPayload:(id)a6 matterAttributeNotifications:(id)a7 enableNotification:(BOOL)a8 withDevice:(id)a9 completion:(id)a10
{
  _BOOL8 v10;
  id v16;
  id v17;
  NSObject *v18;
  uint64_t v19;
  void *v20;
  HMDHome *v21;
  NSObject *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  uint64_t v27;
  _BOOL4 v28;
  void *v29;
  void *v30;
  HMDHome *v31;
  NSObject *v32;
  void *v33;
  void *v34;
  HMDHome *v35;
  NSObject *v36;
  void *v37;
  void *v38;
  _BOOL4 v39;
  uint64_t v40;
  HMDRemoteDeviceMessageDestination *v41;
  void *v42;
  HMDRemoteDeviceMessageDestination *v43;
  HMDRemoteHomeMessageDestination *v44;
  void *v45;
  void *v46;
  uint64_t v47;
  void *v48;
  void *v49;
  void *v50;
  id v51;
  id v52;
  id v53;
  id v54;
  id v55;
  _QWORD v56[4];
  id v57;
  id v58;
  id v59;
  id v60;
  BOOL v61;
  int v62;
  uint8_t buf[4];
  void *v64;
  __int16 v65;
  id v66;
  __int16 v67;
  uint64_t v68;
  const __CFString *v69;
  _QWORD v70[3];

  v10 = a8;
  v70[1] = *MEMORY[0x24BDAC8D0];
  v55 = a3;
  v53 = a4;
  v52 = a5;
  v51 = a6;
  v54 = a7;
  v16 = a9;
  v17 = a10;
  -[HMDHome workQueue](self, "workQueue");
  v18 = objc_claimAutoreleasedReturnValue();
  dispatch_assert_queue_V2(v18);

  v19 = objc_msgSend(v16, "isCurrentDevice");
  if (!(_DWORD)v19)
  {
    v69 = CFSTR("kCharacteristicNotificationEnableKey");
    objc_msgSend(MEMORY[0x24BDD16E0], "numberWithBool:", v10);
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    v70[0] = v25;
    objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v70, &v69, 1);
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    v24 = (void *)objc_msgSend(v26, "mutableCopy");

    v27 = objc_msgSend(v55, "count");
    v28 = v27 == 0;
    if (v27)
      objc_msgSend(v24, "setObject:forKeyedSubscript:", v55, CFSTR("kCharacteristicNotificationsKey"));
    if (objc_msgSend(v53, "count", v51))
      objc_msgSend(v24, "setObject:forKeyedSubscript:", v53, CFSTR("CharacteristicNotificationThreshold"));
    if (objc_msgSend(v52, "count"))
    {
      objc_msgSend(v24, "setObject:forKeyedSubscript:", v52, CFSTR("kMediaNotificationsKey"));
      v28 = 0;
    }
    if (objc_msgSend(v51, "count"))
    {
      objc_msgSend(v24, "setObject:forKeyedSubscript:", v51, CFSTR("HMDDeviceNotificationActionSetsKey"));
      if (!objc_msgSend(v54, "count"))
      {
LABEL_26:
        -[HMDHome currentUser](self, "currentUser");
        v38 = (void *)objc_claimAutoreleasedReturnValue();
        v39 = -[HMDHome shouldRestrictAllMessagingToLocalTransportsForUser:](self, "shouldRestrictAllMessagingToLocalTransportsForUser:", v38);

        if (v39)
          v40 = 14;
        else
          v40 = -1;
        v41 = [HMDRemoteDeviceMessageDestination alloc];
        -[HMDHome uuid](self, "uuid");
        v42 = (void *)objc_claimAutoreleasedReturnValue();
        v43 = -[HMDRemoteDeviceMessageDestination initWithTarget:device:](v41, "initWithTarget:device:", v42, v16);

        if (v10 && objc_msgSend(v55, "count"))
        {
          v44 = [HMDRemoteHomeMessageDestination alloc];
          -[HMDHome uuid](self, "uuid");
          v45 = (void *)objc_claimAutoreleasedReturnValue();
          -[HMDHome uuid](self, "uuid");
          v46 = (void *)objc_claimAutoreleasedReturnValue();
          v47 = -[HMDRemoteHomeMessageDestination initWithTarget:homeUUID:](v44, "initWithTarget:homeUUID:", v45, v46);

          v43 = (HMDRemoteDeviceMessageDestination *)v47;
        }
        +[HMDRemoteMessage secureMessageWithName:qualityOfService:destination:messagePayload:restriction:](HMDRemoteMessage, "secureMessageWithName:qualityOfService:destination:messagePayload:restriction:", CFSTR("kModifyCharacterisiticNotificationsRequestKey"), 17, v43, v24, v40);
        v48 = (void *)objc_claimAutoreleasedReturnValue();
        objc_initWeak((id *)buf, self);
        v56[0] = MEMORY[0x24BDAC760];
        v56[1] = 3221225472;
        v56[2] = __195__HMDHome__modifyCharacteristicNotifications_characteristicChangeThresholds_mediaNotifications_actionSetNotificationPayload_matterAttributeNotifications_enableNotification_withDevice_completion___block_invoke;
        v56[3] = &unk_24E775DA8;
        objc_copyWeak(&v60, (id *)buf);
        v59 = v17;
        v57 = v16;
        v58 = v55;
        v61 = v10;
        objc_msgSend(v48, "setResponseHandler:", v56);
        -[HMDHome homeManager](self, "homeManager");
        v49 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v49, "messageDispatcher");
        v50 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v50, "sendMessage:completionHandler:", v48, 0);

        objc_destroyWeak(&v60);
        objc_destroyWeak((id *)buf);

        goto LABEL_33;
      }
      LOBYTE(v28) = 0;
    }
    else if (!objc_msgSend(v54, "count"))
    {
      if (!v28)
        goto LABEL_26;
      goto LABEL_21;
    }
    v62 = 0;
    v29 = (void *)MEMORY[0x2276758C4](v54, 8, &v62);
    if (v29)
    {
      objc_msgSend(v24, "setObject:forKeyedSubscript:", v29, CFSTR("kMatterNotificationsKey"));

      goto LABEL_26;
    }
    v30 = (void *)MEMORY[0x227676638]();
    v31 = self;
    HMFGetOSLogHandle();
    v32 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v33 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543874;
      v64 = v33;
      v65 = 2112;
      v66 = v54;
      v67 = 2048;
      v68 = v62;
      _os_log_impl(&dword_2218F0000, v32, OS_LOG_TYPE_ERROR, "%{public}@Unable to encode Matter attribute notification registration payload=%@ (status %ld)", buf, 0x20u);

    }
    objc_autoreleasePoolPop(v30);
    if (!v28)
      goto LABEL_26;
LABEL_21:
    v34 = (void *)MEMORY[0x227676638]();
    v35 = self;
    HMFGetOSLogHandle();
    v36 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v36, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v37 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v64 = v37;
      v65 = 2112;
      v66 = v16;
      _os_log_impl(&dword_2218F0000, v36, OS_LOG_TYPE_INFO, "%{public}@Skipping modifying notifications with remote gateway %@ as there is nothing to modify", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v34);
    if (v17)
      (*((void (**)(id, _QWORD))v17 + 2))(v17, 0);
    goto LABEL_33;
  }
  v20 = (void *)MEMORY[0x227676638](v19);
  v21 = self;
  HMFGetOSLogHandle();
  v22 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v22, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543362;
    v64 = v23;
    _os_log_impl(&dword_2218F0000, v22, OS_LOG_TYPE_INFO, "%{public}@Cannot modify notifications with current device", buf, 0xCu);

  }
  objc_autoreleasePoolPop(v20);
  if (v17)
  {
    objc_msgSend(MEMORY[0x24BDD1540], "hmfErrorWithCode:", 3, v51);
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    (*((void (**)(id, void *))v17 + 2))(v17, v24);
LABEL_33:

  }
}

- (void)auditDestinationsForNotifications:(id)a3
{
  id v4;
  NSObject *v5;
  id v6;
  _QWORD v7[5];
  id v8;

  v4 = a3;
  -[HMDHome workQueue](self, "workQueue");
  v5 = objc_claimAutoreleasedReturnValue();
  v7[0] = MEMORY[0x24BDAC760];
  v7[1] = 3221225472;
  v7[2] = __45__HMDHome_auditDestinationsForNotifications___block_invoke;
  v7[3] = &unk_24E79C268;
  v7[4] = self;
  v8 = v4;
  v6 = v4;
  dispatch_async(v5, v7);

}

- (void)actionSetResponsePayloadForActionSetsPayload:(id)a3 completion:(id)a4
{
  id v6;
  id v7;
  void *v8;
  void *v9;
  id v10;
  uint64_t v11;
  uint64_t i;
  id v13;
  void *v14;
  id v15;
  void *v16;
  void *v17;
  HMDHome *v18;
  NSObject *v19;
  void *v20;
  void *v21;
  HMDHome *v22;
  NSObject *v23;
  id v24;
  HMDHome *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void (**v30)(_QWORD, _QWORD);
  id v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD v34[4];
  void (**v35)(_QWORD, _QWORD);
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  uint8_t buf[4];
  void *v41;
  __int16 v42;
  id v43;
  _BYTE v44[128];
  uint64_t v45;

  v45 = *MEMORY[0x24BDAC8D0];
  v6 = a3;
  v7 = a4;
  if (objc_msgSend(v6, "count")
    && (-[HMDHome actionSetStateObserver](self, "actionSetStateObserver"),
        v8 = (void *)objc_claimAutoreleasedReturnValue(),
        v8,
        v8))
  {
    v30 = (void (**)(_QWORD, _QWORD))v7;
    objc_msgSend(MEMORY[0x24BDBCEF0], "set");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v36 = 0u;
    v37 = 0u;
    v38 = 0u;
    v39 = 0u;
    v31 = v6;
    v10 = v6;
    v33 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v36, v44, 16);
    if (v33)
    {
      v11 = *(_QWORD *)v37;
      v32 = *(_QWORD *)v37;
      do
      {
        for (i = 0; i != v33; ++i)
        {
          if (*(_QWORD *)v37 != v11)
            objc_enumerationMutation(v10);
          v13 = *(id *)(*((_QWORD *)&v36 + 1) + 8 * i);
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) != 0)
            v14 = v13;
          else
            v14 = 0;
          v15 = v14;

          if (v15)
          {
            v16 = (void *)objc_msgSend(objc_alloc(MEMORY[0x24BDD1880]), "initWithUUIDString:", v15);
            if (v16)
            {
              objc_msgSend(v9, "addObject:", v16);
            }
            else
            {
              v21 = (void *)MEMORY[0x227676638]();
              v22 = self;
              HMFGetOSLogHandle();
              v23 = objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
              {
                HMFGetLogIdentifier();
                v24 = v10;
                v25 = self;
                v26 = v9;
                v27 = (void *)objc_claimAutoreleasedReturnValue();
                *(_DWORD *)buf = 138543618;
                v41 = v27;
                v42 = 2112;
                v43 = v15;
                _os_log_impl(&dword_2218F0000, v23, OS_LOG_TYPE_ERROR, "%{public}@Action set uuid string (%@) could not be converted to a uuid", buf, 0x16u);

                v9 = v26;
                self = v25;
                v10 = v24;
                v11 = v32;
              }

              objc_autoreleasePoolPop(v21);
            }

          }
          else
          {
            v17 = (void *)MEMORY[0x227676638]();
            v18 = self;
            HMFGetOSLogHandle();
            v19 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
            {
              HMFGetLogIdentifier();
              v20 = (void *)objc_claimAutoreleasedReturnValue();
              *(_DWORD *)buf = 138543362;
              v41 = v20;
              _os_log_impl(&dword_2218F0000, v19, OS_LOG_TYPE_ERROR, "%{public}@Action set element was not a string", buf, 0xCu);

            }
            objc_autoreleasePoolPop(v17);
          }

        }
        v33 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v36, v44, 16);
      }
      while (v33);
    }

    if (objc_msgSend(v9, "count"))
    {
      -[HMDHome actionSetStateObserver](self, "actionSetStateObserver");
      v28 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v9, "allObjects");
      v29 = (void *)objc_claimAutoreleasedReturnValue();
      v34[0] = MEMORY[0x24BDAC760];
      v34[1] = 3221225472;
      v34[2] = __67__HMDHome_actionSetResponsePayloadForActionSetsPayload_completion___block_invoke;
      v34[3] = &unk_24E7930A0;
      v7 = v30;
      v35 = v30;
      objc_msgSend(v28, "currentStateForActionSetUUIDs:completionHandler:", v29, v34);

    }
    else
    {
      v7 = v30;
      v30[2](v30, MEMORY[0x24BDBD1B8]);
    }

    v6 = v31;
  }
  else
  {
    (*((void (**)(id, _QWORD))v7 + 2))(v7, MEMORY[0x24BDBD1B8]);
  }

}

- (void)_handleModifyCharacteristicNotifications:(id)a3
{
  id v4;
  uint64_t v5;
  uint64_t v6;
  _BOOL4 v7;
  void *v8;
  void *v9;
  char v10;
  uint64_t v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  id v16;
  int v17;
  void *v18;
  id v19;
  void *v20;
  HMDHome *v21;
  NSObject *v22;
  void *v23;
  void *v24;
  HMDHome *v25;
  NSObject *v26;
  void *v27;
  void *v28;
  HMDHome *v29;
  NSObject *v30;
  void *v31;
  const char *v32;
  NSObject *v33;
  uint32_t v34;
  HMDHome *v35;
  int v36;
  void *v37;
  uint64_t v38;
  void *v39;
  HMDHome *v40;
  NSObject *v41;
  void *v42;
  void *v43;
  void *v44;
  void *v45;
  void *v46;
  void *v47;
  void *v48;
  void *v49;
  HMDHome *v50;
  NSObject *v51;
  void *v52;
  void *v53;
  id v54;
  void *v55;
  void *v56;
  void *v57;
  void *v58;
  void *v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t i;
  void *v65;
  void *v66;
  void *v67;
  void *v68;
  void *v69;
  void *v70;
  HMDHome *v71;
  NSObject *v72;
  HMDHome *v73;
  void *v74;
  id v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t j;
  uint64_t v80;
  void *v81;
  void *v82;
  HMDHome *v83;
  NSObject *v84;
  void *v85;
  void *v86;
  id v87;
  void *v88;
  void *v89;
  void *v90;
  uint64_t v91;
  void *v92;
  uint64_t v93;
  void *v94;
  void *v95;
  void *v96;
  void *v97;
  id obj;
  void *v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  _QWORD v108[4];
  id v109;
  int v110;
  _BYTE v111[128];
  uint8_t v112[128];
  uint8_t buf[4];
  void *v114;
  __int16 v115;
  id v116;
  __int16 v117;
  id v118;
  __int16 v119;
  void *v120;
  __int16 v121;
  void *v122;
  __int16 v123;
  void *v124;
  __int16 v125;
  uint64_t v126;
  __int16 v127;
  uint64_t v128;
  __int16 v129;
  void *v130;
  uint64_t v131;

  v131 = *MEMORY[0x24BDAC8D0];
  v4 = a3;
  if (!objc_msgSend(v4, "isRemote") || (objc_msgSend(v4, "isSecureRemote") & 1) != 0)
  {
    objc_msgSend(v4, "dictionaryForKey:", CFSTR("kCharacteristicNotificationsKey"));
    v5 = objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "dictionaryForKey:", CFSTR("kMediaNotificationsKey"));
    v6 = objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "arrayForKey:", CFSTR("HMDDeviceNotificationActionSetsKey"));
    v96 = (void *)v5;
    v92 = (void *)v6;
    v93 = objc_claimAutoreleasedReturnValue();
    v7 = (v93 | v5 | v6) != 0;
    if (objc_msgSend(v4, "isRemote"))
    {
      -[HMDHome primaryResident](self, "primaryResident");
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v8, "device");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      v10 = objc_msgSend(v9, "isCurrentDevice");

      if ((v10 & 1) == 0 && (objc_msgSend(v96, "count") || objc_msgSend((id)v93, "count")))
      {
        v24 = (void *)MEMORY[0x227676638]();
        v25 = self;
        HMFGetOSLogHandle();
        v26 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
        {
          HMFGetLogIdentifier();
          v27 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543362;
          v114 = v27;
          _os_log_impl(&dword_2218F0000, v26, OS_LOG_TYPE_DEFAULT, "%{public}@Received modify characteristic notification message from remote device, and this device is not the primary resident. Discarding.", buf, 0xCu);

        }
        objc_autoreleasePoolPop(v24);
        objc_msgSend(MEMORY[0x24BDD1540], "hmInternalErrorWithCode:", 3202);
        v94 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v4, "respondWithError:");
LABEL_69:

        goto LABEL_70;
      }
    }
    objc_msgSend(v4, "dataForKey:", CFSTR("kMatterNotificationsKey"));
    v11 = objc_claimAutoreleasedReturnValue();
    v12 = (void *)v11;
    if (!v11)
    {
      v94 = 0;
      goto LABEL_28;
    }
    v110 = 0;
    v13 = (void *)v11;
    v14 = (void *)OPACKDecodeData();
    v15 = v14;
    if (v14)
    {
      v16 = v14;
      objc_opt_class();
      v17 = objc_opt_isKindOfClass() & 1;
      if (v17)
        v18 = v16;
      else
        v18 = 0;
      v19 = v18;
      v94 = v16;

      if (v17)
      {
        v7 = 1;
LABEL_27:

        v12 = v13;
LABEL_28:
        LOBYTE(v110) = 0;
        v36 = objc_msgSend(v4, "BOOLForKey:keyPresent:", CFSTR("kCharacteristicNotificationEnableKey"), &v110);
        objc_msgSend(v4, "remoteSourceDevice");
        v37 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v37, "remoteDestinationString");
        v38 = objc_claimAutoreleasedReturnValue();

        objc_msgSend(v4, "userForHome:", self);
        v95 = (void *)objc_claimAutoreleasedReturnValue();
        if (v7 && v38 && v95 && (_BYTE)v110)
        {
          v90 = (void *)v38;
          objc_msgSend(v4, "dictionaryForKey:", CFSTR("CharacteristicNotificationThreshold"));
          v91 = objc_claimAutoreleasedReturnValue();
          v39 = (void *)MEMORY[0x227676638]();
          v40 = self;
          HMFGetOSLogHandle();
          v41 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v41, OS_LOG_TYPE_INFO))
          {
            HMFGetLogIdentifier();
            v42 = (void *)objc_claimAutoreleasedReturnValue();
            HMFBooleanToString();
            v43 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v95, "shortDescription");
            v44 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 138545410;
            v114 = v42;
            v115 = 2112;
            v116 = v43;
            v117 = 2112;
            v118 = v44;
            v119 = 2112;
            v120 = v90;
            v121 = 2112;
            v122 = v96;
            v123 = 2112;
            v124 = v92;
            v125 = 2112;
            v126 = v93;
            v127 = 2112;
            v128 = v91;
            v129 = 2112;
            v130 = v94;
            _os_log_impl(&dword_2218F0000, v41, OS_LOG_TYPE_INFO, "%{public}@Received modify characteristic notification message with enable: %@ user: %@ deviceIdsDestination: %@ characteristicsPayload: %@ mediaPropertiesPayload: %@ actionSetsPayload: %@characteristicChangeThresholds: %@matterNotificationPayload: %@", buf, 0x5Cu);

          }
          objc_autoreleasePoolPop(v39);
          if (v36)
          {
            -[HMDHome notificationRegistry](v40, "notificationRegistry");
            v45 = (void *)objc_claimAutoreleasedReturnValue();
            v46 = v90;
            v47 = (void *)v91;
            objc_msgSend(v45, "setNotificationsEnabled:user:deviceIdsDestination:characteristicsPayload:characteristicChangeThresholdsPayload:mediaPropertiesPayload:actionSetsPayload:matterNotificationPayload:", 1, v95, v90, v96, v91, v92, v93, v94);

            if (objc_msgSend((id)v93, "count"))
            {
              v108[0] = MEMORY[0x24BDAC760];
              v108[1] = 3221225472;
              v108[2] = __52__HMDHome__handleModifyCharacteristicNotifications___block_invoke;
              v108[3] = &unk_24E796300;
              v109 = v4;
              -[HMDHome actionSetResponsePayloadForActionSetsPayload:completion:](v40, "actionSetResponsePayloadForActionSetsPayload:completion:", v93, v108);

            }
            else
            {
LABEL_67:
              objc_msgSend(v4, "respondWithSuccess");
            }
          }
          else
          {
            v88 = v12;
            v54 = objc_alloc_init(MEMORY[0x24BDBCEB8]);
            objc_msgSend(v4, "remoteSourceDevice");
            v55 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v55, "remoteDestinationString");
            v56 = (void *)objc_claimAutoreleasedReturnValue();
            v99 = v54;
            objc_msgSend(v54, "addObject:", v56);

            v89 = v55;
            objc_msgSend(v55, "globalHandles");
            v57 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v57, "firstObject");
            v58 = (void *)objc_claimAutoreleasedReturnValue();

            v97 = v58;
            if (v58)
            {
              v87 = v4;
              v106 = 0u;
              v107 = 0u;
              v104 = 0u;
              v105 = 0u;
              objc_msgSend(v55, "account");
              v59 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v59, "handles");
              v60 = (void *)objc_claimAutoreleasedReturnValue();

              obj = v60;
              v61 = objc_msgSend(v60, "countByEnumeratingWithState:objects:count:", &v104, v112, 16);
              if (v61)
              {
                v62 = v61;
                v63 = *(_QWORD *)v105;
                do
                {
                  for (i = 0; i != v62; ++i)
                  {
                    if (*(_QWORD *)v105 != v63)
                      objc_enumerationMutation(obj);
                    v65 = *(void **)(*((_QWORD *)&v104 + 1) + 8 * i);
                    objc_msgSend(v58, "pushToken");
                    v66 = (void *)objc_claimAutoreleasedReturnValue();
                    objc_msgSend(v65, "URI");
                    v67 = (void *)objc_claimAutoreleasedReturnValue();
                    objc_msgSend(v67, "prefixedURI");
                    v68 = (void *)objc_claimAutoreleasedReturnValue();
                    v69 = (void *)MEMORY[0x227675570](v66, v68);

                    if (v69)
                    {
                      if ((objc_msgSend(v99, "containsObject:", v69) & 1) == 0)
                        objc_msgSend(v99, "addObject:", v69);
                    }
                    else
                    {
                      v70 = (void *)MEMORY[0x227676638]();
                      v71 = v40;
                      HMFGetOSLogHandle();
                      v72 = objc_claimAutoreleasedReturnValue();
                      if (os_log_type_enabled(v72, OS_LOG_TYPE_ERROR))
                      {
                        HMFGetLogIdentifier();
                        v73 = v40;
                        v74 = (void *)objc_claimAutoreleasedReturnValue();
                        *(_DWORD *)buf = 138543874;
                        v114 = v74;
                        v115 = 2112;
                        v116 = v97;
                        v117 = 2112;
                        v118 = v65;
                        _os_log_impl(&dword_2218F0000, v72, OS_LOG_TYPE_ERROR, "%{public}@Failed to create destination with globalHandle: %@, accountHandle: %@", buf, 0x20u);

                        v40 = v73;
                        v58 = v97;
                      }

                      objc_autoreleasePoolPop(v70);
                    }

                  }
                  v62 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v104, v112, 16);
                }
                while (v62);
              }

              v4 = v87;
            }
            v102 = 0u;
            v103 = 0u;
            v100 = 0u;
            v101 = 0u;
            v75 = v99;
            v76 = objc_msgSend(v75, "countByEnumeratingWithState:objects:count:", &v100, v111, 16);
            if (v76)
            {
              v77 = v76;
              v78 = *(_QWORD *)v101;
              while (2)
              {
                for (j = 0; j != v77; ++j)
                {
                  if (*(_QWORD *)v101 != v78)
                    objc_enumerationMutation(v75);
                  v80 = *(_QWORD *)(*((_QWORD *)&v100 + 1) + 8 * j);
                  -[HMDHome notificationRegistry](v40, "notificationRegistry");
                  v81 = (void *)objc_claimAutoreleasedReturnValue();
                  LOBYTE(v80) = objc_msgSend(v81, "setNotificationsEnabled:user:deviceIdsDestination:characteristicsPayload:characteristicChangeThresholdsPayload:mediaPropertiesPayload:actionSetsPayload:matterNotificationPayload:", 0, v95, v80, v96, v91, v92, v93, v94);

                  if ((v80 & 1) != 0)
                  {

                    v12 = v88;
                    v46 = v90;
                    v47 = (void *)v91;
                    goto LABEL_67;
                  }
                }
                v77 = objc_msgSend(v75, "countByEnumeratingWithState:objects:count:", &v100, v111, 16);
                if (v77)
                  continue;
                break;
              }
            }

            v82 = (void *)MEMORY[0x227676638]();
            v83 = v40;
            HMFGetOSLogHandle();
            v84 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v84, OS_LOG_TYPE_ERROR))
            {
              HMFGetLogIdentifier();
              v85 = (void *)objc_claimAutoreleasedReturnValue();
              *(_DWORD *)buf = 138543874;
              v114 = v85;
              v115 = 2112;
              v116 = v95;
              v117 = 2112;
              v118 = v75;
              _os_log_impl(&dword_2218F0000, v84, OS_LOG_TYPE_ERROR, "%{public}@Failed to disable notification for user: %@ with destinations: %@", buf, 0x20u);

            }
            objc_autoreleasePoolPop(v82);
            objc_msgSend(MEMORY[0x24BDD1540], "hmErrorWithCode:description:reason:suggestion:", 2, CFSTR("Failed to disable notification because registration was not found"), CFSTR("Could not find matching registration"), 0);
            v86 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v4, "respondWithError:", v86);

            v12 = v88;
            v46 = v90;
            v47 = (void *)v91;
          }
        }
        else
        {
          v48 = (void *)v38;
          v49 = (void *)MEMORY[0x227676638]();
          v50 = self;
          HMFGetOSLogHandle();
          v51 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v51, OS_LOG_TYPE_ERROR))
          {
            HMFGetLogIdentifier();
            v52 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v4, "messagePayload");
            v53 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 138543618;
            v114 = v52;
            v115 = 2112;
            v116 = v53;
            _os_log_impl(&dword_2218F0000, v51, OS_LOG_TYPE_ERROR, "%{public}@Cannot handle modify characteristic notifications message payload: %@", buf, 0x16u);

          }
          objc_autoreleasePoolPop(v49);
          objc_msgSend(MEMORY[0x24BDD1540], "hmErrorWithCode:", 27);
          v47 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v4, "respondWithError:", v47);
          v46 = v48;
        }

        goto LABEL_69;
      }
      v28 = (void *)MEMORY[0x227676638]();
      v35 = self;
      HMFGetOSLogHandle();
      v30 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v31 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        v114 = v31;
        v115 = 2112;
        v116 = v94;
        v32 = "%{public}@Error casting decodedMatterNotificationData to NSDictionary. decodedMatterNotificationData=%@";
        v33 = v30;
        v34 = 22;
        goto LABEL_25;
      }
    }
    else
    {
      v28 = (void *)MEMORY[0x227676638]();
      v29 = self;
      HMFGetOSLogHandle();
      v30 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v31 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138544130;
        v114 = v31;
        v115 = 2048;
        v116 = (id)v110;
        v117 = 2112;
        v118 = v13;
        v119 = 2112;
        v120 = 0;
        v32 = "%{public}@Error decoding Matter notification payload. status=%ld encodedMatterNotificationData=%@ decodedM"
              "atterNotificationData=%@";
        v33 = v30;
        v34 = 42;
LABEL_25:
        _os_log_impl(&dword_2218F0000, v33, OS_LOG_TYPE_ERROR, v32, buf, v34);

      }
    }

    objc_autoreleasePoolPop(v28);
    v94 = 0;
    goto LABEL_27;
  }
  v20 = (void *)MEMORY[0x227676638]();
  v21 = self;
  HMFGetOSLogHandle();
  v22 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
  {
    HMFGetLogIdentifier();
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543618;
    v114 = v23;
    v115 = 2112;
    v116 = v4;
    _os_log_impl(&dword_2218F0000, v22, OS_LOG_TYPE_DEFAULT, "%{public}@Message not supported: %@", buf, 0x16u);

  }
  objc_autoreleasePoolPop(v20);
  objc_msgSend(MEMORY[0x24BDD1540], "hmErrorWithCode:", 17);
  v96 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "respondWithError:");
LABEL_70:

}

- (void)_updateConfigurationVersion
{
  void *v3;
  HMDHome *v4;
  NSObject *v5;
  void *v6;
  int v7;
  void *v8;
  __int16 v9;
  uint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  v3 = (void *)MEMORY[0x227676638](-[HMDHome setConfigurationVersion:](self, "setConfigurationVersion:", -[HMDHome configurationVersion](self, "configurationVersion") + 1));
  v4 = self;
  HMFGetOSLogHandle();
  v5 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    HMFGetLogIdentifier();
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v7 = 138543618;
    v8 = v6;
    v9 = 2048;
    v10 = -[HMDHome configurationVersion](v4, "configurationVersion");
    _os_log_impl(&dword_2218F0000, v5, OS_LOG_TYPE_DEFAULT, "%{public}@Incrementing configuration version to %lu", (uint8_t *)&v7, 0x16u);

  }
  objc_autoreleasePoolPop(v3);
  -[HMDHome __saveConfigurationVersionTransaction](v4, "__saveConfigurationVersionTransaction");
}

- (void)_updateExpectConfigurationVersion
{
  int64_t v3;
  void *v4;
  HMDHome *v5;
  NSObject *v6;
  void *v7;
  int v8;
  void *v9;
  __int16 v10;
  uint64_t v11;
  __int16 v12;
  uint64_t v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  v3 = -[HMDHome expectedConfigurationVersion](self, "expectedConfigurationVersion");
  if (v3 < -[HMDHome configurationVersion](self, "configurationVersion"))
    -[HMDHome setExpectedConfigurationVersion:](self, "setExpectedConfigurationVersion:", -[HMDHome configurationVersion](self, "configurationVersion"));
  v4 = (void *)MEMORY[0x227676638](-[HMDHome setExpectedConfigurationVersion:](self, "setExpectedConfigurationVersion:", -[HMDHome expectedConfigurationVersion](self, "expectedConfigurationVersion") + 1));
  v5 = self;
  HMFGetOSLogHandle();
  v6 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    HMFGetLogIdentifier();
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = 138543874;
    v9 = v7;
    v10 = 2048;
    v11 = -[HMDHome expectedConfigurationVersion](v5, "expectedConfigurationVersion");
    v12 = 2048;
    v13 = -[HMDHome configurationVersion](v5, "configurationVersion");
    _os_log_impl(&dword_2218F0000, v6, OS_LOG_TYPE_DEFAULT, "%{public}@Increased expected configuration counter to %lu (current configurationVersion: %lu).", (uint8_t *)&v8, 0x20u);

  }
  objc_autoreleasePoolPop(v4);
}

- (void)saveToCurrentAccountWithReason:(id)a3
{
  NSObject *v4;
  _QWORD block[5];

  -[HMDHome workQueue](self, "workQueue", a3);
  v4 = objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x24BDAC760];
  block[1] = 3221225472;
  block[2] = __42__HMDHome_saveToCurrentAccountWithReason___block_invoke;
  block[3] = &unk_24E79C240;
  block[4] = self;
  dispatch_async(v4, block);

}

- (void)configureBulletinNotification
{
  NSObject *v3;
  _QWORD block[5];

  -[HMDHome workQueue](self, "workQueue");
  v3 = objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x24BDAC760];
  block[1] = 3221225472;
  block[2] = __40__HMDHome_configureBulletinNotification__block_invoke;
  block[3] = &unk_24E79C240;
  block[4] = self;
  dispatch_async(v3, block);

}

- (void)_configureBulletinNotification
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  void *v8;
  id v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _BYTE v14[128];
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  -[HMDHome accessories](self, "accessories", 0);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
  if (v3)
  {
    v4 = v3;
    v5 = *(_QWORD *)v11;
    do
    {
      v6 = 0;
      do
      {
        if (*(_QWORD *)v11 != v5)
          objc_enumerationMutation(v2);
        v7 = *(id *)(*((_QWORD *)&v10 + 1) + 8 * v6);
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0)
          v8 = v7;
        else
          v8 = 0;
        v9 = v8;

        if (v9)
          objc_msgSend(v9, "configureBulletinNotification");

        ++v6;
      }
      while (v4 != v6);
      v4 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
    }
    while (v4);
  }

}

- (id)roomWithName:(id)a3
{
  id v4;
  void *v5;
  void *v6;

  v4 = a3;
  -[HMDHome rooms](self, "rooms");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "hmf_firstObjectWithName:", v4);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  return v6;
}

- (id)roomWithUUID:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  int v7;
  void *v8;
  void *v9;

  v4 = a3;
  -[HMDHome roomForEntireHome](self, "roomForEntireHome");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "uuid");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = objc_msgSend(v6, "isEqual:", v4);

  if (v7)
  {
    -[HMDHome roomForEntireHome](self, "roomForEntireHome");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    -[HMDHome rooms](self, "rooms");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "hmf_firstObjectWithUUID:", v4);
    v8 = (void *)objc_claimAutoreleasedReturnValue();

  }
  return v8;
}

- (id)roomWithUniqueIdentifier:(id)a3 forClientIdentifierSalt:(id)a4
{
  id v6;
  id v7;
  void *v8;
  id v9;
  id v10;
  void *v11;
  _QWORD v13[4];
  id v14;
  id v15;

  v6 = a3;
  v7 = a4;
  -[HMDHome rooms](self, "rooms");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v13[0] = MEMORY[0x24BDAC760];
  v13[1] = 3221225472;
  v13[2] = __60__HMDHome_roomWithUniqueIdentifier_forClientIdentifierSalt___block_invoke;
  v13[3] = &unk_24E775DD0;
  v14 = v7;
  v15 = v6;
  v9 = v6;
  v10 = v7;
  objc_msgSend(v8, "na_firstObjectPassingTest:", v13);
  v11 = (void *)objc_claimAutoreleasedReturnValue();

  return v11;
}

- (id)accessoryWithUUID:(id)a3
{
  id v4;
  void *v5;
  void *v6;

  v4 = a3;
  -[HMDHome accessories](self, "accessories");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "hmf_firstObjectWithUUID:", v4);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  return v6;
}

- (id)accessoryWithEndpointIdentifier:(id)a3
{
  void *v3;
  void *v4;
  id v5;

  -[HMDHome accessoryWithSPIClientIdentifier:](self, "accessoryWithSPIClientIdentifier:", a3);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v4 = v3;
  else
    v4 = 0;
  v5 = v4;

  return v5;
}

- (id)accessoryWithDeviceIdentifier:(id)a3
{
  id v4;
  void *v5;
  id v6;
  void *v7;
  void *v8;
  id v9;
  _QWORD v11[4];
  id v12;

  v4 = a3;
  -[HMDHome accessories](self, "accessories");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v11[0] = MEMORY[0x24BDAC760];
  v11[1] = 3221225472;
  v11[2] = __41__HMDHome_accessoryWithDeviceIdentifier___block_invoke;
  v11[3] = &unk_24E790530;
  v12 = v4;
  v6 = v4;
  objc_msgSend(v5, "na_firstObjectPassingTest:", v11);
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v8 = v7;
  else
    v8 = 0;
  v9 = v8;

  return v9;
}

- (id)accessoryWithSPIClientIdentifier:(id)a3
{
  id v4;
  void *v5;
  id v6;
  void *v7;
  _QWORD v9[4];
  id v10;

  v4 = a3;
  -[HMDHome accessories](self, "accessories");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v9[0] = MEMORY[0x24BDAC760];
  v9[1] = 3221225472;
  v9[2] = __44__HMDHome_accessoryWithSPIClientIdentifier___block_invoke;
  v9[3] = &unk_24E790530;
  v10 = v4;
  v6 = v4;
  objc_msgSend(v5, "na_firstObjectPassingTest:", v9);
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  return v7;
}

- (id)mediaProfileWithUUID:(id)a3
{
  id v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  id v11;
  id v12;
  void *v13;
  id v14;
  id v15;
  id v16;
  void *v17;
  char v18;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  _BYTE v24[128];
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v4 = a3;
  v20 = 0u;
  v21 = 0u;
  v22 = 0u;
  v23 = 0u;
  -[HMDHome accessories](self, "accessories", 0);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v20, v24, 16);
  if (v6)
  {
    v7 = v6;
    v8 = *(_QWORD *)v21;
LABEL_3:
    v9 = 0;
    while (1)
    {
      if (*(_QWORD *)v21 != v8)
        objc_enumerationMutation(v5);
      v10 = *(id *)(*((_QWORD *)&v20 + 1) + 8 * v9);
      objc_opt_class();
      v11 = (objc_opt_isKindOfClass() & 1) != 0 ? v10 : 0;
      v12 = v11;

      if (v12)
      {
        objc_msgSend(v12, "mediaProfile");
        v13 = (void *)objc_claimAutoreleasedReturnValue();
      }
      else
      {
        v14 = v10;
        objc_opt_class();
        v15 = (objc_opt_isKindOfClass() & 1) != 0 ? v14 : 0;
        v16 = v15;

        objc_msgSend(v16, "mediaProfile");
        v13 = (void *)objc_claimAutoreleasedReturnValue();

      }
      objc_msgSend(v13, "uniqueIdentifier");
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      v18 = objc_msgSend(v17, "isEqual:", v4);

      if ((v18 & 1) != 0)
        break;

      if (v7 == ++v9)
      {
        v7 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v20, v24, 16);
        if (v7)
          goto LABEL_3;
        goto LABEL_18;
      }
    }
  }
  else
  {
LABEL_18:
    v13 = 0;
  }

  return v13;
}

- (id)zoneWithName:(id)a3
{
  id v4;
  void *v5;
  void *v6;

  v4 = a3;
  -[HMDHome zones](self, "zones");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "hmf_firstObjectWithName:", v4);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  return v6;
}

- (id)zoneWithUUID:(id)a3
{
  id v4;
  void *v5;
  void *v6;

  v4 = a3;
  -[HMDHome zones](self, "zones");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "hmf_firstObjectWithUUID:", v4);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  return v6;
}

- (BOOL)ownerTrustZoneCapable
{
  os_unfair_recursive_lock_lock_with_options();
  LOBYTE(self) = self->_ownerTrustZoneCapable;
  os_unfair_recursive_lock_unlock();
  return (char)self;
}

- (void)setOwnerTrustZoneCapable:(BOOL)a3
{
  os_unfair_recursive_lock_lock_with_options();
  self->_ownerTrustZoneCapable = a3;
  os_unfair_recursive_lock_unlock();
}

- (BOOL)_isSharedHomeVersionTrustZoneCapable
{
  void *v2;
  HMDHomeKitVersion *v3;
  char v4;

  -[HMDHome sharedHomeSourceVersion](self, "sharedHomeSourceVersion");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = -[HMDHomeKitVersion initWithVersionString:]([HMDHomeKitVersion alloc], "initWithVersionString:", CFSTR("6.1"));
  v4 = objc_msgSend(v2, "isAtLeastVersion:", v3);

  return v4;
}

- (void)_handleReceivedNonCloudSourcedSharedHomeModel
{
  void *v3;
  int v4;
  void *v5;
  HMDHome *v6;
  NSObject *v7;
  void *v8;
  void *v9;
  int v10;
  void *v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  if (-[HMDHome _isSharedHomeVersionTrustZoneCapable](self, "_isSharedHomeVersionTrustZoneCapable")
    || (-[HMDHome residentDeviceManager](self, "residentDeviceManager"),
        v3 = (void *)objc_claimAutoreleasedReturnValue(),
        v4 = objc_msgSend(v3, "hasTrustZoneCapableResident"),
        v3,
        v4))
  {
    v5 = (void *)MEMORY[0x227676638]();
    v6 = self;
    HMFGetOSLogHandle();
    v7 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      v10 = 138543362;
      v11 = v8;
      _os_log_impl(&dword_2218F0000, v7, OS_LOG_TYPE_INFO, "%{public}@Owner became trust zone capable after receiving shared home model", (uint8_t *)&v10, 0xCu);

    }
    objc_autoreleasePoolPop(v5);
    -[HMDHome setOwnerTrustZoneCapable:](v6, "setOwnerTrustZoneCapable:", 1);
    -[HMDHome notificationCenter](v6, "notificationCenter");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "postNotificationName:object:", CFSTR("HMDHomeOwnerBecameTrustZoneCapableNotification"), v6);

  }
}

- (void)_evaluateOwnerTrustZoneCapabilityAndNotify
{
  void *v3;
  int v4;
  void *v5;
  HMDHome *v6;
  NSObject *v7;
  void *v8;
  void *v9;
  int v10;
  void *v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  if (!-[HMDHome isOwnerTrustZoneCapable](self, "isOwnerTrustZoneCapable"))
  {
    if (-[HMDHome _isSharedHomeVersionTrustZoneCapable](self, "_isSharedHomeVersionTrustZoneCapable")
      || (-[HMDHome residentDeviceManager](self, "residentDeviceManager"),
          v3 = (void *)objc_claimAutoreleasedReturnValue(),
          v4 = objc_msgSend(v3, "hasTrustZoneCapableResident"),
          v3,
          v4))
    {
      v5 = (void *)MEMORY[0x227676638]();
      v6 = self;
      HMFGetOSLogHandle();
      v7 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        v10 = 138543362;
        v11 = v8;
        _os_log_impl(&dword_2218F0000, v7, OS_LOG_TYPE_INFO, "%{public}@Owner became trust zone capable after evaluating owner trust zone capability", (uint8_t *)&v10, 0xCu);

      }
      objc_autoreleasePoolPop(v5);
      -[HMDHome setOwnerTrustZoneCapable:](v6, "setOwnerTrustZoneCapable:", 1);
      -[HMDHome notificationCenter](v6, "notificationCenter");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v9, "postNotificationName:object:", CFSTR("HMDHomeOwnerBecameTrustZoneCapableNotification"), v6);

    }
  }
}

- (id)actionSetWithName:(id)a3
{
  id v4;
  void *v5;
  void *v6;

  v4 = a3;
  -[HMDHome actionSets](self, "actionSets");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "hmf_firstObjectWithName:", v4);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  return v6;
}

- (id)actionSetWithUUID:(id)a3
{
  id v4;
  void *v5;
  void *v6;

  v4 = a3;
  -[HMDHome actionSets](self, "actionSets");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "hmf_firstObjectWithUUID:", v4);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  return v6;
}

- (id)triggerOwnedActionSetWithUUID:(id)a3
{
  id v4;
  void *v5;
  void *v6;

  v4 = a3;
  -[HMDHome triggerOwnedActionSets](self, "triggerOwnedActionSets");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "hmf_firstObjectWithUUID:", v4);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  return v6;
}

- (id)triggerWithName:(id)a3
{
  id v4;
  void *v5;
  void *v6;

  v4 = a3;
  -[HMDHome triggers](self, "triggers");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "hmf_firstObjectWithName:", v4);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  return v6;
}

- (id)triggerWithUUID:(id)a3
{
  id v4;
  void *v5;
  void *v6;

  v4 = a3;
  -[HMDHome triggers](self, "triggers");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "hmf_firstObjectWithUUID:", v4);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  return v6;
}

- (id)serviceGroupWithName:(id)a3
{
  id v4;
  void *v5;
  void *v6;

  v4 = a3;
  -[HMDHome serviceGroups](self, "serviceGroups");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "hmf_firstObjectWithName:", v4);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  return v6;
}

- (id)serviceGroupWithUUID:(id)a3
{
  id v4;
  void *v5;
  void *v6;

  v4 = a3;
  -[HMDHome serviceGroups](self, "serviceGroups");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "hmf_firstObjectWithUUID:", v4);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  return v6;
}

- (id)userWithUUID:(id)a3
{
  id v4;
  void *v5;
  void *v6;

  v4 = a3;
  -[HMDHome users](self, "users");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "hmf_firstObjectWithUUID:", v4);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  return v6;
}

- (id)outgoingInvitationWithUUID:(id)a3
{
  id v4;
  void *v5;
  void *v6;

  v4 = a3;
  -[HMDHome outgoingInvitations](self, "outgoingInvitations");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "hmf_firstObjectWithValue:forKeyPath:", v4, CFSTR("identifier"));
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  return v6;
}

- (NSMutableArray)outgoingInvitations
{
  void *v3;

  os_unfair_recursive_lock_lock_with_options();
  v3 = (void *)-[NSMutableArray mutableCopy](self->_outgoingInvitations, "mutableCopy");
  os_unfair_recursive_lock_unlock();
  return (NSMutableArray *)v3;
}

- (void)setOutgoingInvitations:(id)a3
{
  NSMutableArray *v4;
  NSMutableArray *outgoingInvitations;

  v4 = (NSMutableArray *)a3;
  os_unfair_recursive_lock_lock_with_options();
  outgoingInvitations = self->_outgoingInvitations;
  self->_outgoingInvitations = v4;

  os_unfair_recursive_lock_unlock();
}

- (void)addOutgoingInvitation:(id)a3
{
  id v4;

  v4 = a3;
  os_unfair_recursive_lock_lock_with_options();
  -[NSMutableArray addObject:](self->_outgoingInvitations, "addObject:", v4);
  os_unfair_recursive_lock_unlock();

}

- (void)removeOutgoingInvitation:(id)a3
{
  id v4;

  v4 = a3;
  os_unfair_recursive_lock_lock_with_options();
  -[NSMutableArray removeObject:](self->_outgoingInvitations, "removeObject:", v4);
  os_unfair_recursive_lock_unlock();

}

- (id)mediaSystemsWithUUIDs:(id)a3
{
  id v4;
  void *v5;
  id v6;
  void *v7;
  _QWORD v9[4];
  id v10;

  v4 = a3;
  -[HMDHome mediaSystems](self, "mediaSystems");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v9[0] = MEMORY[0x24BDAC760];
  v9[1] = 3221225472;
  v9[2] = __33__HMDHome_mediaSystemsWithUUIDs___block_invoke;
  v9[3] = &unk_24E77E3B8;
  v10 = v4;
  v6 = v4;
  objc_msgSend(v5, "na_filter:", v9);
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  return v7;
}

- (id)mediaSystemWithUUID:(id)a3
{
  id v4;
  void *v5;
  void *v6;

  v4 = a3;
  -[HMDHome mediaSystems](self, "mediaSystems");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "hmf_firstObjectWithUUID:", v4);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  return v6;
}

- (void)reEvaluateTriggers
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  _BYTE v11[128];
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v7 = 0u;
  v8 = 0u;
  v9 = 0u;
  v10 = 0u;
  -[HMDHome triggers](self, "triggers", 0);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v7, v11, 16);
  if (v3)
  {
    v4 = v3;
    v5 = *(_QWORD *)v8;
    do
    {
      v6 = 0;
      do
      {
        if (*(_QWORD *)v8 != v5)
          objc_enumerationMutation(v2);
        objc_msgSend(*(id *)(*((_QWORD *)&v7 + 1) + 8 * v6++), "reEvaluate:", 0);
      }
      while (v4 != v6);
      v4 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v7, v11, 16);
    }
    while (v4);
  }

}

- (void)handleSignificantTimeChange
{
  void *v3;
  HMDHome *v4;
  NSObject *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint8_t v16[128];
  uint8_t buf[4];
  void *v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v3 = (void *)MEMORY[0x227676638](self, a2);
  v4 = self;
  HMFGetOSLogHandle();
  v5 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543362;
    v18 = v6;
    _os_log_impl(&dword_2218F0000, v5, OS_LOG_TYPE_INFO, "%{public}@Going to re-evaluate all the triggers as time has changed significantly", buf, 0xCu);

  }
  objc_autoreleasePoolPop(v3);
  v14 = 0u;
  v15 = 0u;
  v12 = 0u;
  v13 = 0u;
  -[HMDHome triggers](v4, "triggers", 0);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
  if (v8)
  {
    v9 = v8;
    v10 = *(_QWORD *)v13;
    do
    {
      v11 = 0;
      do
      {
        if (*(_QWORD *)v13 != v10)
          objc_enumerationMutation(v7);
        objc_msgSend(*(id *)(*((_QWORD *)&v12 + 1) + 8 * v11++), "reEvaluate:", 1);
      }
      while (v9 != v11);
      v9 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
    }
    while (v9);
  }

}

- (void)removeService:(id)a3
{
  id v5;
  NSObject *v6;
  id v7;
  _QWORD v8[4];
  id v9;
  id v10[2];
  id location;

  v5 = a3;
  objc_initWeak(&location, self);
  -[HMDHome workQueue](self, "workQueue");
  v6 = objc_claimAutoreleasedReturnValue();
  v8[0] = MEMORY[0x24BDAC760];
  v8[1] = 3221225472;
  v8[2] = __25__HMDHome_removeService___block_invoke;
  v8[3] = &unk_24E78BB08;
  objc_copyWeak(v10, &location);
  v9 = v5;
  v10[1] = (id)a2;
  v7 = v5;
  dispatch_async(v6, v8);

  objc_destroyWeak(v10);
  objc_destroyWeak(&location);
}

- (void)removeAllHomeContentsAndAccessoryPairings:(BOOL)a3 queue:(id)a4 completionHandler:(id)a5
{
  id v8;
  id v9;
  void *v10;
  HMDHome *v11;
  NSObject *v12;
  void *v13;
  NSObject *v14;
  id v15;
  id v16;
  _QWORD v17[5];
  id v18;
  id v19;
  BOOL v20;
  uint8_t buf[4];
  void *v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  v8 = a4;
  v9 = a5;
  v10 = (void *)MEMORY[0x227676638]();
  v11 = self;
  HMFGetOSLogHandle();
  v12 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543362;
    v22 = v13;
    _os_log_impl(&dword_2218F0000, v12, OS_LOG_TYPE_INFO, "%{public}@Removed all home content and accessory pairings", buf, 0xCu);

  }
  objc_autoreleasePoolPop(v10);
  -[HMDHome workQueue](v11, "workQueue");
  v14 = objc_claimAutoreleasedReturnValue();
  v17[0] = MEMORY[0x24BDAC760];
  v17[1] = 3221225472;
  v17[2] = __77__HMDHome_removeAllHomeContentsAndAccessoryPairings_queue_completionHandler___block_invoke;
  v17[3] = &unk_24E7962D8;
  v20 = a3;
  v17[4] = v11;
  v18 = v8;
  v19 = v9;
  v15 = v9;
  v16 = v8;
  dispatch_async(v14, v17);

}

- (id)validateName:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  void *v7;

  v4 = a3;
  -[HMDHome homeManager](self, "homeManager");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "nameValidator");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "validateName:", v4);
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  return v7;
}

- (id)addName:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;

  v4 = a3;
  -[HMDHome homeManager](self, "homeManager");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "nameValidator");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHome uuid](self, "uuid");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "addName:namespace:", v4, v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  return v8;
}

- (id)addActionSetName:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;

  v4 = a3;
  -[HMDHome homeManager](self, "homeManager");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "nameValidator");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHome uuid](self, "uuid");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "addActionSetName:namespace:", v4, v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  return v8;
}

- (id)removeName:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;

  v4 = a3;
  -[HMDHome homeManager](self, "homeManager");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "nameValidator");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHome uuid](self, "uuid");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "removeName:namespace:", v4, v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  return v8;
}

- (id)replaceName:(id)a3 withNewName:(id)a4
{
  id v6;
  id v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  _QWORD v14[2];

  v14[1] = *MEMORY[0x24BDAC8D0];
  v6 = a4;
  v7 = a3;
  -[HMDHome homeManager](self, "homeManager");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "nameValidator");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHome uuid](self, "uuid");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v14[0] = v10;
  objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", v14, 1);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "replaceName:withNewName:inNamespaces:", v7, v6, v11);
  v12 = (void *)objc_claimAutoreleasedReturnValue();

  return v12;
}

- (id)replaceActionSetName:(id)a3 withNewName:(id)a4
{
  id v6;
  id v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  _QWORD v14[2];

  v14[1] = *MEMORY[0x24BDAC8D0];
  v6 = a4;
  v7 = a3;
  -[HMDHome homeManager](self, "homeManager");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "nameValidator");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHome uuid](self, "uuid");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v14[0] = v10;
  objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", v14, 1);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "replaceActionSetName:withNewName:inNamespaces:", v7, v6, v11);
  v12 = (void *)objc_claimAutoreleasedReturnValue();

  return v12;
}

- (void)reachabilityChangedForAccessory:(id)a3 reachable:(BOOL)a4
{
  id v6;
  NSObject *v7;
  _QWORD block[4];
  id v9;
  HMDHome *v10;
  BOOL v11;

  v6 = a3;
  if (v6)
  {
    -[HMDHome workQueue](self, "workQueue");
    v7 = objc_claimAutoreleasedReturnValue();
    block[0] = MEMORY[0x24BDAC760];
    block[1] = 3221225472;
    block[2] = __53__HMDHome_reachabilityChangedForAccessory_reachable___block_invoke;
    block[3] = &unk_24E799CF0;
    v9 = v6;
    v10 = self;
    v11 = a4;
    dispatch_async(v7, block);

  }
}

- (void)suspendedStateChangedForAccessory:(id)a3 suspendedState:(unint64_t)a4
{
  id v6;
  void *v7;
  id v8;
  void *v9;
  HMDHome *v10;
  NSObject *v11;
  void *v12;
  void *v13;
  NSObject *v14;
  _QWORD v15[5];
  id v16;
  id v17;
  unint64_t v18;
  uint8_t buf[4];
  void *v20;
  __int16 v21;
  void *v22;
  __int16 v23;
  id v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v6 = a3;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v7 = v6;
  else
    v7 = 0;
  v8 = v7;

  if (v8)
  {
    if (a4 == 2)
    {
      v9 = (void *)MEMORY[0x227676638]();
      v10 = self;
      HMFGetOSLogHandle();
      v11 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
      {
        HMFGetLogIdentifier();
        v12 = (void *)objc_claimAutoreleasedReturnValue();
        HAPAccessorySuspendedStateDescription();
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543874;
        v20 = v12;
        v21 = 2112;
        v22 = v13;
        v23 = 2112;
        v24 = v6;
        _os_log_impl(&dword_2218F0000, v11, OS_LOG_TYPE_DEBUG, "%{public}@Skipping suspended state update: '%@' for accessory %@", buf, 0x20u);

      }
      objc_autoreleasePoolPop(v9);
    }
    else
    {
      -[HMDHome workQueue](self, "workQueue");
      v14 = objc_claimAutoreleasedReturnValue();
      v15[0] = MEMORY[0x24BDAC760];
      v15[1] = 3221225472;
      v15[2] = __60__HMDHome_suspendedStateChangedForAccessory_suspendedState___block_invoke;
      v15[3] = &unk_24E795658;
      v15[4] = self;
      v18 = a4;
      v16 = v8;
      v17 = v6;
      dispatch_async(v14, v15);

    }
  }

}

- (void)regionStateUpdated
{
  NSObject *v3;
  _QWORD block[5];

  -[HMDHome workQueue](self, "workQueue");
  v3 = objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x24BDAC760];
  block[1] = 3221225472;
  block[2] = __29__HMDHome_regionStateUpdated__block_invoke;
  block[3] = &unk_24E79C240;
  block[4] = self;
  dispatch_async(v3, block);

}

- (void)writeCharacteristicValues:(id)a3 source:(unint64_t)a4 identifier:(id)a5 transport:(id)a6 qualityOfService:(int64_t)a7 withCompletionHandler:(id)a8
{
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  void *v20;
  void *v21;
  void *v22;
  NSObject *v23;
  id v24;
  id v25;
  id v26;
  id v27;
  _QWORD block[4];
  id v29;
  id v30;
  id v31;
  HMDHome *v32;
  id v33;
  id v34;
  unint64_t v35;
  int64_t v36;
  id v37;

  v15 = a3;
  v16 = a5;
  v17 = a6;
  v18 = a8;
  v19 = objc_alloc(MEMORY[0x24BE3F138]);
  v20 = (void *)MEMORY[0x24BDD17C8];
  MEMORY[0x227675180](self, a2);
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v20, "stringWithFormat:", CFSTR("%@, %s:%ld"), v21, "/Library/Caches/com.apple.xbs/Sources/HomeKit_executables/Sources/homed/Home/HMDHome.m", 7177);
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  v37 = (id)objc_msgSend(v19, "initWithName:", v22);

  -[HMDHome workQueue](self, "workQueue");
  v23 = objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x24BDAC760];
  block[1] = 3221225472;
  block[2] = __104__HMDHome_writeCharacteristicValues_source_identifier_transport_qualityOfService_withCompletionHandler___block_invoke;
  block[3] = &unk_24E77BF08;
  v35 = a4;
  v36 = a7;
  v29 = v37;
  v30 = v16;
  v31 = v17;
  v32 = self;
  v33 = v15;
  v34 = v18;
  v24 = v18;
  v25 = v15;
  v26 = v17;
  v27 = v16;
  dispatch_async(v23, block);

  __HMFActivityScopeLeave();
}

- (id)performWriteRequests:(id)a3 loggingObject:(id)a4
{
  id v6;
  id v7;
  id v8;
  void *v9;
  void *v10;
  HMDHome *v11;
  NSObject *v12;
  void *v13;
  uint64_t v14;
  id v15;
  id v16;
  id v17;
  void *v18;
  id v19;
  _QWORD v21[4];
  id v22;
  id v23;
  id v24;
  __int128 v25;
  _BYTE buf[18];
  __int16 v27;
  __int128 *v28;
  __int16 v29;
  HMDHome *v30;
  __int16 v31;
  uint64_t v32;
  uint64_t v33;

  v33 = *MEMORY[0x24BDAC8D0];
  v6 = a3;
  v7 = a4;
  v8 = objc_alloc_init(MEMORY[0x24BE6B608]);
  objc_msgSend(MEMORY[0x24BDD1880], "UUID");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = (void *)MEMORY[0x227676638]();
  v11 = self;
  HMFGetOSLogHandle();
  v12 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = 0;
    if (v9)
      objc_msgSend(v9, "getUUIDBytes:", buf);
    else
      *(_OWORD *)buf = *MEMORY[0x24BE3F2C8];
    v25 = *(_OWORD *)buf;
    v14 = objc_msgSend(v6, "count");
    *(_DWORD *)buf = 138544386;
    *(_QWORD *)&buf[4] = v13;
    *(_WORD *)&buf[12] = 1042;
    *(_DWORD *)&buf[14] = 16;
    v27 = 2098;
    v28 = &v25;
    v29 = 2114;
    v30 = v11;
    v31 = 2048;
    v32 = v14;
    _os_log_impl(&dword_2218F0000, v12, OS_LOG_TYPE_INFO, "%{public}@Executing write requests for request identifier: %{public,uuid_t}.16P from home: %{public}@ count: %lu for perform write requests", buf, 0x30u);

  }
  objc_autoreleasePoolPop(v10);
  v21[0] = MEMORY[0x24BDAC760];
  v21[1] = 3221225472;
  v21[2] = __46__HMDHome_performWriteRequests_loggingObject___block_invoke;
  v21[3] = &unk_24E795C28;
  v22 = v7;
  v15 = v8;
  v23 = v15;
  v24 = v6;
  v16 = v6;
  v17 = v7;
  -[HMDHome writeCharacteristicValues:source:identifier:transport:qualityOfService:withCompletionHandler:](v11, "writeCharacteristicValues:source:identifier:transport:qualityOfService:withCompletionHandler:", v16, 7, v9, 0, -1, v21);
  v18 = v24;
  v19 = v15;

  return v19;
}

- (id)performReadRequests:(id)a3 loggingObject:(id)a4
{
  id v6;
  id v7;
  id v8;
  void *v9;
  id v10;
  id v11;
  id v12;
  void *v13;
  id v14;
  _QWORD v16[4];
  id v17;
  id v18;
  id v19;

  v6 = a3;
  v7 = a4;
  v8 = objc_alloc_init(MEMORY[0x24BE6B608]);
  -[HMDHome description](self, "description");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v16[0] = MEMORY[0x24BDAC760];
  v16[1] = 3221225472;
  v16[2] = __45__HMDHome_performReadRequests_loggingObject___block_invoke;
  v16[3] = &unk_24E795C28;
  v17 = v7;
  v10 = v8;
  v18 = v10;
  v19 = v6;
  v11 = v6;
  v12 = v7;
  -[HMDHome readCharacteristicValues:source:sourceForLogging:qualityOfService:withCompletionHandler:](self, "readCharacteristicValues:source:sourceForLogging:qualityOfService:withCompletionHandler:", v11, 7, v9, -1, v16);

  v13 = v19;
  v14 = v10;

  return v14;
}

- (id)performWriteRequests:(id)a3 withRetries:(int64_t)a4 timeInterval:(double)a5 loggingObject:(id)a6
{
  id v8;
  void *v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t i;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  uint64_t v23;
  id v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  id v31;
  void *v32;
  id v34;
  _QWORD v37[4];
  id v38;
  _QWORD v39[5];
  id v40;
  int64_t v41;
  double v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  _BYTE v47[128];
  uint64_t v48;

  v48 = *MEMORY[0x24BDAC8D0];
  v8 = a3;
  v34 = a6;
  objc_msgSend(MEMORY[0x24BDBCED8], "dictionary");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v43 = 0u;
  v44 = 0u;
  v45 = 0u;
  v46 = 0u;
  v10 = v8;
  v11 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v43, v47, 16);
  if (v11)
  {
    v12 = v11;
    v13 = *(_QWORD *)v44;
    do
    {
      for (i = 0; i != v12; ++i)
      {
        if (*(_QWORD *)v44 != v13)
          objc_enumerationMutation(v10);
        v15 = *(void **)(*((_QWORD *)&v43 + 1) + 8 * i);
        objc_msgSend(v15, "characteristic");
        v16 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v16, "service");
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v17, "accessory");
        v18 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v18, "uuid");
        v19 = (void *)objc_claimAutoreleasedReturnValue();

        objc_msgSend(v9, "objectForKeyedSubscript:", v19);
        v20 = (void *)objc_claimAutoreleasedReturnValue();

        if (v20)
        {
          objc_msgSend(v9, "objectForKeyedSubscript:", v19);
          v21 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v21, "addObject:", v15);
        }
        else
        {
          objc_msgSend(MEMORY[0x24BDBCEB8], "arrayWithObject:", v15);
          v21 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v9, "setObject:forKeyedSubscript:", v21, v19);
        }

      }
      v12 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v43, v47, 16);
    }
    while (v12);
  }

  objc_msgSend(v9, "allValues");
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  v23 = MEMORY[0x24BDAC760];
  v39[0] = MEMORY[0x24BDAC760];
  v39[1] = 3221225472;
  v39[2] = __71__HMDHome_performWriteRequests_withRetries_timeInterval_loggingObject___block_invoke;
  v39[3] = &unk_24E775E20;
  v42 = a5;
  v41 = a4;
  v39[4] = self;
  v24 = v34;
  v40 = v24;
  objc_msgSend(v22, "na_map:", v39);
  v25 = (void *)objc_claimAutoreleasedReturnValue();

  v26 = (void *)MEMORY[0x24BE6B608];
  v27 = (void *)MEMORY[0x24BE6B628];
  -[HMDHome workQueue](self, "workQueue");
  v28 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v27, "schedulerWithDispatchQueue:", v28);
  v29 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v26, "combineAllFutures:ignoringErrors:scheduler:", v25, 1, v29);
  v30 = (void *)objc_claimAutoreleasedReturnValue();
  v37[0] = v23;
  v37[1] = 3221225472;
  v37[2] = __71__HMDHome_performWriteRequests_withRetries_timeInterval_loggingObject___block_invoke_692;
  v37[3] = &unk_24E799468;
  v38 = v24;
  v31 = v24;
  objc_msgSend(v30, "flatMap:", v37);
  v32 = (void *)objc_claimAutoreleasedReturnValue();

  return v32;
}

- (id)performReadRequests:(id)a3 withRetries:(int64_t)a4 timeInterval:(double)a5 loggingObject:(id)a6
{
  id v8;
  void *v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t i;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  uint64_t v23;
  id v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  id v31;
  void *v32;
  id v34;
  _QWORD v37[4];
  id v38;
  _QWORD v39[5];
  id v40;
  int64_t v41;
  double v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  _BYTE v47[128];
  uint64_t v48;

  v48 = *MEMORY[0x24BDAC8D0];
  v8 = a3;
  v34 = a6;
  objc_msgSend(MEMORY[0x24BDBCED8], "dictionary");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v43 = 0u;
  v44 = 0u;
  v45 = 0u;
  v46 = 0u;
  v10 = v8;
  v11 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v43, v47, 16);
  if (v11)
  {
    v12 = v11;
    v13 = *(_QWORD *)v44;
    do
    {
      for (i = 0; i != v12; ++i)
      {
        if (*(_QWORD *)v44 != v13)
          objc_enumerationMutation(v10);
        v15 = *(void **)(*((_QWORD *)&v43 + 1) + 8 * i);
        objc_msgSend(v15, "characteristic");
        v16 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v16, "service");
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v17, "accessory");
        v18 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v18, "uuid");
        v19 = (void *)objc_claimAutoreleasedReturnValue();

        objc_msgSend(v9, "objectForKeyedSubscript:", v19);
        v20 = (void *)objc_claimAutoreleasedReturnValue();

        if (v20)
        {
          objc_msgSend(v9, "objectForKeyedSubscript:", v19);
          v21 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v21, "addObject:", v15);
        }
        else
        {
          objc_msgSend(MEMORY[0x24BDBCEB8], "arrayWithObject:", v15);
          v21 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v9, "setObject:forKeyedSubscript:", v21, v19);
        }

      }
      v12 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v43, v47, 16);
    }
    while (v12);
  }

  objc_msgSend(v9, "allValues");
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  v23 = MEMORY[0x24BDAC760];
  v39[0] = MEMORY[0x24BDAC760];
  v39[1] = 3221225472;
  v39[2] = __70__HMDHome_performReadRequests_withRetries_timeInterval_loggingObject___block_invoke;
  v39[3] = &unk_24E775E20;
  v42 = a5;
  v41 = a4;
  v39[4] = self;
  v24 = v34;
  v40 = v24;
  objc_msgSend(v22, "na_map:", v39);
  v25 = (void *)objc_claimAutoreleasedReturnValue();

  v26 = (void *)MEMORY[0x24BE6B608];
  v27 = (void *)MEMORY[0x24BE6B628];
  -[HMDHome workQueue](self, "workQueue");
  v28 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v27, "schedulerWithDispatchQueue:", v28);
  v29 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v26, "combineAllFutures:ignoringErrors:scheduler:", v25, 1, v29);
  v30 = (void *)objc_claimAutoreleasedReturnValue();
  v37[0] = v23;
  v37[1] = 3221225472;
  v37[2] = __70__HMDHome_performReadRequests_withRetries_timeInterval_loggingObject___block_invoke_697;
  v37[3] = &unk_24E799468;
  v38 = v24;
  v31 = v24;
  objc_msgSend(v30, "flatMap:", v37);
  v32 = (void *)objc_claimAutoreleasedReturnValue();

  return v32;
}

- (void)getRunTimeStateUpdateWithOptions:(unint64_t)a3 includeMediaAccessorySessionState:(BOOL)a4 includeResidentDeviceState:(BOOL)a5 completion:(id)a6
{
  id v10;
  NSObject *v11;
  id v12;
  _QWORD v13[5];
  id v14;
  unint64_t v15;
  BOOL v16;
  BOOL v17;

  v10 = a6;
  -[HMDHome workQueue](self, "workQueue");
  v11 = objc_claimAutoreleasedReturnValue();
  v13[0] = MEMORY[0x24BDAC760];
  v13[1] = 3221225472;
  v13[2] = __116__HMDHome_getRunTimeStateUpdateWithOptions_includeMediaAccessorySessionState_includeResidentDeviceState_completion___block_invoke;
  v13[3] = &unk_24E775EA8;
  v14 = v10;
  v15 = a3;
  v16 = a4;
  v17 = a5;
  v13[4] = self;
  v12 = v10;
  dispatch_async(v11, v13);

}

- (void)_getRunTimeStateUpdateWithOptions:(unint64_t)a3 includeMediaAccessorySessionState:(BOOL)a4 includeResidentDeviceState:(BOOL)a5 completion:(id)a6
{
  _BOOL4 v6;
  unsigned int v7;
  id v9;
  void *v10;
  void *v11;
  uint64_t i;
  id v13;
  void *v14;
  id v15;
  id v16;
  void *v17;
  id v18;
  id v19;
  void *v20;
  id v21;
  id v22;
  void *v23;
  id v24;
  BOOL v25;
  BOOL v26;
  char v27;
  BOOL v28;
  char v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  void *v43;
  void *v44;
  void *v45;
  void *v46;
  void *v47;
  void *v48;
  void *v49;
  void *v50;
  id v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t j;
  void *v56;
  void *v57;
  void *v58;
  void *v59;
  void *v60;
  void *v61;
  id v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t k;
  void *v67;
  void *v68;
  _BOOL4 v69;
  void *v70;
  void (**v71)(_QWORD, void *);
  void *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  HMDHome *v79;
  void *v80;
  id obj;
  unsigned int v82;
  void *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  _BOOL4 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  _BYTE v101[128];
  _BYTE v102[128];
  const __CFString *v103;
  void *v104;
  _BYTE v105[128];
  uint64_t v106;

  v6 = a5;
  v88 = a4;
  v7 = a3;
  v106 = *MEMORY[0x24BDAC8D0];
  v9 = a6;
  v10 = v9;
  if (v9)
  {
    v69 = v6;
    v71 = (void (**)(_QWORD, void *))v9;
    -[HMDHome accessories](self, "accessories");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDBCED8], "dictionaryWithCapacity:", objc_msgSend(v11, "count"));
    v83 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD1650], "strongToStrongObjectsMapTable");
    v70 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDBCEB8], "arrayWithCapacity:", objc_msgSend(v11, "count"));
    v72 = (void *)objc_claimAutoreleasedReturnValue();
    v97 = 0u;
    v98 = 0u;
    v99 = 0u;
    v100 = 0u;
    obj = v11;
    v79 = self;
    v87 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v97, v105, 16);
    if (v87)
    {
      v86 = v7 & 0x201;
      v85 = v7 & 0x50;
      v84 = *(_QWORD *)v98;
      v78 = *MEMORY[0x24BDD66E0];
      v77 = *MEMORY[0x24BDD6738];
      v76 = *MEMORY[0x24BDD6708];
      v75 = *MEMORY[0x24BDD6758];
      v74 = *MEMORY[0x24BDD66C8];
      v73 = *MEMORY[0x24BDD6748];
      v82 = v7;
      do
      {
        for (i = 0; i != v87; ++i)
        {
          if (*(_QWORD *)v98 != v84)
            objc_enumerationMutation(obj);
          v13 = *(id *)(*((_QWORD *)&v97 + 1) + 8 * i);
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) != 0)
            v14 = v13;
          else
            v14 = 0;
          v15 = v14;

          v16 = v15;
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) != 0)
            v17 = v16;
          else
            v17 = 0;
          v18 = v17;

          v19 = v16;
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) != 0)
            v20 = v19;
          else
            v20 = 0;
          v21 = v20;

          v22 = v13;
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) != 0)
            v23 = v22;
          else
            v23 = 0;
          v24 = v23;

          if (v19)
            v25 = v88;
          else
            v25 = 0;
          if (v85)
            v26 = v21 == 0;
          else
            v26 = 1;
          v27 = !v26;
          if (v86)
            v28 = v24 == 0;
          else
            v28 = 1;
          v29 = !v28;
          if (v25
            || (v27 & 1) != 0
            || ((v18 != 0) & (v7 >> 8)) != 0
            || (v29 & 1) != 0
            || (v7 & 0x400) != 0 && objc_msgSend(v24, "hasTelevisionService"))
          {
            objc_msgSend(v22, "runtimeState");
            v30 = (void *)objc_claimAutoreleasedReturnValue();
            v31 = (void *)objc_msgSend(v30, "mutableCopy");

            if (v19 && v88)
            {
              objc_msgSend(v19, "mediaProfile");
              v32 = (void *)objc_claimAutoreleasedReturnValue();
              v33 = v32;
              if (v32)
              {
                objc_msgSend(v32, "mediaSession");
                v80 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v80, "state");
                v34 = (void *)objc_claimAutoreleasedReturnValue();
                if (v34
                  || (objc_msgSend(v19, "identifier"),
                      v35 = (void *)objc_claimAutoreleasedReturnValue(),
                      -[HMDHome mediaSessionStateWithIdentifier:](v79, "mediaSessionStateWithIdentifier:", v35),
                      v34 = (void *)objc_claimAutoreleasedReturnValue(),
                      v35,
                      v34))
                {
                  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithInteger:", objc_msgSend(v34, "playbackState"));
                  v36 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend(v31, "setObject:forKeyedSubscript:", v36, v78);

                  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithInteger:", objc_msgSend(v34, "shuffleState"));
                  v37 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend(v31, "setObject:forKeyedSubscript:", v37, v77);

                  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithInteger:", objc_msgSend(v34, "repeatState"));
                  v38 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend(v31, "setObject:forKeyedSubscript:", v38, v76);

                  objc_msgSend(v34, "volume");
                  v39 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend(v31, "setObject:forKeyedSubscript:", v39, v75);

                  objc_msgSend(v34, "mediaUniqueIdentifier");
                  v40 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend(v31, "setObject:forKeyedSubscript:", v40, v74);

                  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedInteger:", objc_msgSend(v34, "sleepWakeState"));
                  v41 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend(v31, "setObject:forKeyedSubscript:", v41, v73);

                }
                self = v79;
              }

            }
            v42 = (void *)objc_msgSend(v31, "copy");
            objc_msgSend(v22, "uuid");
            v43 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v43, "UUIDString");
            v44 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v83, "setObject:forKeyedSubscript:", v42, v44);

            v7 = v82;
          }

        }
        v87 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v97, v105, 16);
      }
      while (v87);
    }

    v103 = CFSTR("kAccessoriesListKey");
    v45 = (void *)objc_msgSend(v83, "copy");
    v104 = v45;
    objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", &v104, &v103, 1);
    v46 = (void *)objc_claimAutoreleasedReturnValue();
    v47 = (void *)objc_msgSend(v46, "mutableCopy");

    v10 = v71;
    if (v69)
    {
      -[HMDHome residentDeviceManager](self, "residentDeviceManager");
      v48 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v48, "residentDevices");
      v49 = (void *)objc_claimAutoreleasedReturnValue();

      objc_msgSend(MEMORY[0x24BDBCED8], "dictionaryWithCapacity:", objc_msgSend(v49, "count"));
      v50 = (void *)objc_claimAutoreleasedReturnValue();
      v93 = 0u;
      v94 = 0u;
      v95 = 0u;
      v96 = 0u;
      v51 = v49;
      v52 = objc_msgSend(v51, "countByEnumeratingWithState:objects:count:", &v93, v102, 16);
      if (v52)
      {
        v53 = v52;
        v54 = *(_QWORD *)v94;
        do
        {
          for (j = 0; j != v53; ++j)
          {
            if (*(_QWORD *)v94 != v54)
              objc_enumerationMutation(v51);
            v56 = *(void **)(*((_QWORD *)&v93 + 1) + 8 * j);
            objc_msgSend(v56, "identifier");
            v57 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v57, "UUIDString");
            v58 = (void *)objc_claimAutoreleasedReturnValue();

            objc_msgSend(v56, "runtimeState");
            v59 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v50, "setObject:forKey:", v59, v58);

          }
          v53 = objc_msgSend(v51, "countByEnumeratingWithState:objects:count:", &v93, v102, 16);
        }
        while (v53);
      }

      v60 = (void *)objc_msgSend(v50, "copy");
      objc_msgSend(v47, "setObject:forKey:", v60, *MEMORY[0x24BDD6280]);

      self = v79;
    }
    v61 = (void *)objc_msgSend(v47, "copy");
    v71[2](v71, v61);

    if (objc_msgSend(v72, "count"))
      -[HMDHome _readProfileState:viaDevice:](self, v72, 0);
    v91 = 0u;
    v92 = 0u;
    v89 = 0u;
    v90 = 0u;
    v62 = v70;
    v63 = objc_msgSend(v62, "countByEnumeratingWithState:objects:count:", &v89, v101, 16);
    if (v63)
    {
      v64 = v63;
      v65 = *(_QWORD *)v90;
      do
      {
        for (k = 0; k != v64; ++k)
        {
          if (*(_QWORD *)v90 != v65)
            objc_enumerationMutation(v62);
          v67 = *(void **)(*((_QWORD *)&v89 + 1) + 8 * k);
          objc_msgSend(v62, "objectForKey:", v67);
          v68 = (void *)objc_claimAutoreleasedReturnValue();
          if (objc_msgSend(v68, "count"))
            -[HMDHome _readProfileState:viaDevice:](self, v68, v67);

        }
        v64 = objc_msgSend(v62, "countByEnumeratingWithState:objects:count:", &v89, v101, 16);
      }
      while (v64);
    }

  }
}

- (void)readProfileState:(id)a3 viaDevice:(id)a4
{
  id v6;
  id v7;
  NSObject *v8;
  id v9;
  id v10;
  _QWORD block[5];
  id v12;
  id v13;

  v6 = a3;
  v7 = a4;
  -[HMDHome workQueue](self, "workQueue");
  v8 = objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x24BDAC760];
  block[1] = 3221225472;
  block[2] = __38__HMDHome_readProfileState_viaDevice___block_invoke;
  block[3] = &unk_24E79BBD0;
  block[4] = self;
  v12 = v6;
  v13 = v7;
  v9 = v7;
  v10 = v6;
  dispatch_async(v8, block);

}

- (id)hapAccessoriesForServer:(id)a3 linkType:(int64_t)a4
{
  id v6;
  void *v7;
  void *v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  void *v15;
  id v16;
  int64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  _BYTE v23[128];
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v6 = a3;
  -[HMDHome accessories](self, "accessories");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x24BDBCEB8], "arrayWithCapacity:", objc_msgSend(v7, "count"));
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v19 = 0u;
  v20 = 0u;
  v21 = 0u;
  v22 = 0u;
  v9 = v7;
  v10 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v19, v23, 16);
  if (v10)
  {
    v11 = v10;
    v12 = *(_QWORD *)v20;
    do
    {
      v13 = 0;
      do
      {
        if (*(_QWORD *)v20 != v12)
          objc_enumerationMutation(v9);
        v14 = *(id *)(*((_QWORD *)&v19 + 1) + 8 * v13);
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0)
          v15 = v14;
        else
          v15 = 0;
        v16 = v15;

        if (v16)
        {
          v18 = a4;
          if (objc_msgSend(v16, "matchesHAPAccessoryWithServerIdentifier:linkType:", v6, &v18))
            objc_msgSend(v8, "addObject:", v16);
        }

        ++v13;
      }
      while (v11 != v13);
      v11 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v19, v23, 16);
    }
    while (v11);
  }

  return v8;
}

- (id)hapAccessoriesForServer:(id)a3
{
  id v4;
  void *v5;
  uint64_t v6;
  void *v7;

  v4 = a3;
  objc_msgSend(v4, "identifier");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend(v4, "linkType");

  -[HMDHome hapAccessoriesForServer:linkType:](self, "hapAccessoriesForServer:linkType:", v5, v6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  return v7;
}

- (id)_primaryAccessoryForServer:(id)a3
{
  id v4;
  id v5;
  id v6;
  uint64_t v7;
  void *i;
  void *v9;
  void *v10;
  char v11;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  _BYTE v18[128];
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v4 = a3;
  -[HMDHome hapAccessoriesForServer:](self, "hapAccessoriesForServer:", v4);
  v14 = 0u;
  v15 = 0u;
  v16 = 0u;
  v17 = 0u;
  v5 = (id)objc_claimAutoreleasedReturnValue();
  v6 = (id)objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
  if (v6)
  {
    v7 = *(_QWORD *)v15;
    while (2)
    {
      for (i = 0; i != v6; i = (char *)i + 1)
      {
        if (*(_QWORD *)v15 != v7)
          objc_enumerationMutation(v5);
        v9 = *(void **)(*((_QWORD *)&v14 + 1) + 8 * (_QWORD)i);
        if (objc_msgSend(v9, "isPrimary"))
        {
          v13 = 0;
          objc_msgSend(v4, "identifier");
          v10 = (void *)objc_claimAutoreleasedReturnValue();
          v11 = objc_msgSend(v9, "matchesHAPAccessoryWithServerIdentifier:linkType:", v10, &v13);

          if ((v11 & 1) != 0)
          {
            v6 = v9;
            goto LABEL_12;
          }
        }
      }
      v6 = (id)objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
      if (v6)
        continue;
      break;
    }
  }
LABEL_12:

  return v6;
}

- (id)_discoveredAccessoriesForServer:(id)a3 linkType:(int64_t)a4
{
  id v6;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  int64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  _BYTE v20[128];
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  v6 = a3;
  objc_msgSend(MEMORY[0x24BDBCEB8], "array");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v16 = 0u;
  v17 = 0u;
  v18 = 0u;
  v19 = 0u;
  -[HMDHome discoveredAccessories](self, "discoveredAccessories");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v16, v20, 16);
  if (v9)
  {
    v10 = v9;
    v11 = *(_QWORD *)v17;
    do
    {
      v12 = 0;
      do
      {
        if (*(_QWORD *)v17 != v11)
          objc_enumerationMutation(v8);
        v13 = *(void **)(*((_QWORD *)&v16 + 1) + 8 * v12);
        v15 = a4;
        if (objc_msgSend(v13, "matchesHAPAccessoryWithServerIdentifier:linkType:", v6, &v15))
          objc_msgSend(v7, "addObject:", v13);
        ++v12;
      }
      while (v10 != v12);
      v10 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v16, v20, 16);
    }
    while (v10);
  }

  return v7;
}

- (id)_discoveredAccessoriesForServer:(id)a3
{
  id v4;
  void *v5;
  uint64_t v6;
  void *v7;

  v4 = a3;
  objc_msgSend(v4, "identifier");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend(v4, "linkType");

  -[HMDHome _discoveredAccessoriesForServer:linkType:](self, "_discoveredAccessoriesForServer:linkType:", v5, v6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  return v7;
}

- (BOOL)currentRemoteReachabilityRegistration
{
  void *v2;
  void *v3;

  -[HMDHome stagedRemoteReachabilityRegistration](self, "stagedRemoteReachabilityRegistration");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "value");
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  LOBYTE(v2) = objc_msgSend(v3, "BOOLValue");
  return (char)v2;
}

- (void)__registerForRemoteAccessoryReachabilityNotifications:(BOOL)a3 applicationBundleIdentifier:(id)a4
{
  _BOOL8 v4;
  id v6;
  void *v7;
  void *v8;
  int v9;
  void *v10;
  HMDHome *v11;
  NSObject *v12;
  void *v13;
  void *v14;
  const char *v15;
  void *v16;
  HMDHome *v17;
  NSObject *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  int v24;
  void *v25;
  __int16 v26;
  void *v27;
  __int16 v28;
  id v29;
  uint64_t v30;

  v4 = a3;
  v30 = *MEMORY[0x24BDAC8D0];
  v6 = a4;
  -[HMDHome primaryResident](self, "primaryResident");
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v7)
  {
    v10 = (void *)MEMORY[0x227676638]();
    v11 = self;
    HMFGetOSLogHandle();
    v12 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      -[HMDHome name](v11, "name");
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      v24 = 138543618;
      v25 = v13;
      v26 = 2112;
      v27 = v14;
      v15 = "%{public}@No resident for home: %@, skipping remote reachability";
      goto LABEL_11;
    }
LABEL_12:

    objc_autoreleasePoolPop(v10);
    goto LABEL_13;
  }
  if (v4)
  {
    -[HMDHome accessories](self, "accessories");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = objc_msgSend(v8, "hmf_isEmpty");

    if (v9)
    {
      v10 = (void *)MEMORY[0x227676638]();
      v11 = self;
      HMFGetOSLogHandle();
      v12 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        -[HMDHome name](v11, "name");
        v14 = (void *)objc_claimAutoreleasedReturnValue();
        v24 = 138543618;
        v25 = v13;
        v26 = 2112;
        v27 = v14;
        v15 = "%{public}@No accessories in home: %@";
LABEL_11:
        _os_log_impl(&dword_2218F0000, v12, OS_LOG_TYPE_INFO, v15, (uint8_t *)&v24, 0x16u);

        goto LABEL_12;
      }
      goto LABEL_12;
    }
  }
  v16 = (void *)MEMORY[0x227676638]();
  v17 = self;
  HMFGetOSLogHandle();
  v18 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    HMFEnabledStatusToString();
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    v24 = 138543874;
    v25 = v19;
    v26 = 2112;
    v27 = v20;
    v28 = 2112;
    v29 = v6;
    _os_log_impl(&dword_2218F0000, v18, OS_LOG_TYPE_INFO, "%{public}@Remote accessory reachability notification: %@ applicationBundleIdentifier: %@", (uint8_t *)&v24, 0x20u);

  }
  objc_autoreleasePoolPop(v16);
  -[HMDHome stagedRemoteReachabilityRegistration](v17, "stagedRemoteReachabilityRegistration");
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x24BE3F150], "BOOLeanWithBool:", v4);
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v21, "stageValue:", v22);

  objc_msgSend(MEMORY[0x24BE3F238], "sharedPowerLogger");
  v23 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v23, "reportRemoteReachabilityRegistrationEvent:clientIdentifier:", v4, v6);

LABEL_13:
}

- (void)_registerForReachabilityChangeNotificationsEnabled:(BOOL)a3 completionHandler:(id)a4
{
  _BOOL4 v4;
  void (**v6)(id, uint64_t);
  _BOOL4 v7;
  void *v8;
  HMDHome *v9;
  NSObject *v10;
  NSObject *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  const __CFString *v18;
  void *v19;
  void *v20;
  void *v21;
  _QWORD v22[4];
  void (**v23)(id, uint64_t);
  id v24;
  BOOL v25;
  const __CFString *v26;
  void *v27;
  uint8_t buf[4];
  void *v29;
  __int16 v30;
  void *v31;
  uint64_t v32;

  v4 = a3;
  v32 = *MEMORY[0x24BDAC8D0];
  v6 = (void (**)(id, uint64_t))a4;
  v7 = -[HMDHome isCurrentDevicePrimaryResident](self, "isCurrentDevicePrimaryResident");
  v8 = (void *)MEMORY[0x227676638]();
  v9 = self;
  HMFGetOSLogHandle();
  v10 = objc_claimAutoreleasedReturnValue();
  v11 = v10;
  if (v7)
  {
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
    {
      HMFGetLogIdentifier();
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v29 = v12;
      _os_log_impl(&dword_2218F0000, v11, OS_LOG_TYPE_DEBUG, "%{public}@Not updating remote accessory reachability notifications because we are the primary resident", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v8);
    v6[2](v6, 1);
  }
  else
  {
    if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      HMFBooleanToString();
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v29 = v13;
      v30 = 2112;
      v31 = v14;
      _os_log_impl(&dword_2218F0000, v11, OS_LOG_TYPE_INFO, "%{public}@Setting remote accessory reachability notifications enabled to %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v8);
    -[HMDHome uuid](v9, "uuid");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v15, "UUIDString");
    v16 = (void *)objc_claimAutoreleasedReturnValue();

    v26 = CFSTR("kHomeUUID");
    v27 = v16;
    objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", &v27, &v26, 1);
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    objc_initWeak((id *)buf, v9);
    if (v4)
      v18 = CFSTR("kEnableAccessoryReachabilityNotificationRequestKey");
    else
      v18 = CFSTR("kDisableAccessoryReachabilityNotificationRequestKey");
    v22[0] = MEMORY[0x24BDAC760];
    v22[1] = 3221225472;
    v22[2] = __80__HMDHome__registerForReachabilityChangeNotificationsEnabled_completionHandler___block_invoke;
    v22[3] = &unk_24E775ED0;
    objc_copyWeak(&v24, (id *)buf);
    v25 = v4;
    v23 = v6;
    +[HMDRemoteMessage messageWithName:messagePayload:responseHandler:](HMDRemoteMessage, "messageWithName:messagePayload:responseHandler:", v18, v17, v22);
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHome uuid](v9, "uuid");
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHome workQueue](v9, "workQueue");
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHome redispatchToResidentMessage:target:responseQueue:](v9, "redispatchToResidentMessage:target:responseQueue:", v19, v20, v21);

    objc_destroyWeak(&v24);
    objc_destroyWeak((id *)buf);

  }
}

- (BOOL)_hasPairedReachableBTLEAccessories
{
  void *v2;
  char v3;

  -[HMDHome hapAccessories](self, "hapAccessories");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "na_any:", &__block_literal_global_710);

  return v3;
}

- (id)namesOfServicesWithNewFirmwareAvailableInHome
{
  void *v3;
  void *v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  char isKindOfClass;
  void *v12;
  void *v13;
  uint64_t v14;
  HMDHome *v15;
  id v16;
  void *v17;
  id v18;
  void *v19;
  void *v20;
  void *v21;
  HMDHome *v22;
  NSObject *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  id v28;
  char v29;
  id v30;
  void *v31;
  void *v32;
  char v33;
  void *v34;
  int v35;
  void *v36;
  void *v37;
  void *v38;
  int v39;
  uint64_t v40;
  void *v41;
  char v42;
  void *v43;
  HMDHome *v44;
  NSObject *v45;
  void *v46;
  void *v47;
  void *v48;
  void *v49;
  void *v50;
  void *v51;
  HMDHome *v52;
  NSObject *v53;
  void *v54;
  void *v55;
  void *v56;
  uint64_t v57;
  __int128 v59;
  HMDHome *v60;
  void *v61;
  void *v62;
  void *v63;
  void *v64;
  void *v65;
  void *v66;
  id v67;
  uint64_t v68;
  uint64_t v69;
  id obj;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  uint8_t buf[4];
  void *v76;
  __int16 v77;
  void *v78;
  __int16 v79;
  void *v80;
  __int16 v81;
  void *v82;
  _BYTE v83[128];
  uint64_t v84;

  v84 = *MEMORY[0x24BDAC8D0];
  objc_msgSend(MEMORY[0x24BDBCEB8], "array");
  v67 = (id)objc_claimAutoreleasedReturnValue();
  if (-[HMDHome isOwnerUser](self, "isOwnerUser"))
  {
    v73 = 0u;
    v74 = 0u;
    v71 = 0u;
    v72 = 0u;
    -[HMDHome accessories](self, "accessories");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    v4 = (void *)objc_msgSend(v3, "copy");

    obj = v4;
    v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v71, v83, 16);
    if (!v5)
      goto LABEL_56;
    v7 = v5;
    v8 = *(_QWORD *)v72;
    *(_QWORD *)&v6 = 138544130;
    v59 = v6;
    v68 = *(_QWORD *)v72;
    while (1)
    {
      v9 = 0;
      v69 = v7;
      do
      {
        if (*(_QWORD *)v72 != v8)
          objc_enumerationMutation(obj);
        v10 = *(id *)(*((_QWORD *)&v71 + 1) + 8 * v9);
        objc_opt_class();
        isKindOfClass = objc_opt_isKindOfClass();

        if ((isKindOfClass & 1) != 0 && v10)
        {
          if (!-[HMDHome isAutomaticThirdPartyAccessorySoftwareUpdateEnabled](self, "isAutomaticThirdPartyAccessorySoftwareUpdateEnabled"))goto LABEL_11;
          -[HMDHome residentDeviceManager](self, "residentDeviceManager");
          v12 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v12, "availableResidentDevices");
          v13 = (void *)objc_claimAutoreleasedReturnValue();
          v14 = objc_msgSend(v13, "count");

          v7 = v69;
          if (!v14)
          {
LABEL_11:
            v15 = self;
            v16 = v10;
            objc_opt_class();
            if ((objc_opt_isKindOfClass() & 1) != 0)
              v17 = v16;
            else
              v17 = 0;
            v18 = v17;

            if (objc_msgSend(v18, "supportsCHIP"))
            {
              objc_msgSend(v16, "softwareUpdate");
              v19 = (void *)objc_claimAutoreleasedReturnValue();
              v20 = v19;
              if (v19 && objc_msgSend(v19, "state") == 2)
              {
                v21 = (void *)MEMORY[0x227676638]();
                v22 = v15;
                HMFGetOSLogHandle();
                v23 = objc_claimAutoreleasedReturnValue();
                if (os_log_type_enabled(v23, OS_LOG_TYPE_INFO))
                {
                  HMFGetLogIdentifier();
                  v24 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend(v16, "uuid");
                  v64 = v21;
                  v25 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend(v25, "UUIDString");
                  v26 = (void *)objc_claimAutoreleasedReturnValue();
                  *(_DWORD *)buf = 138543618;
                  v76 = v24;
                  v77 = 2114;
                  v78 = v26;
                  _os_log_impl(&dword_2218F0000, v23, OS_LOG_TYPE_INFO, "%{public}@Matter accessory %{public}@ has a firmware update", buf, 0x16u);

                  v7 = v69;
                  v21 = v64;

                }
                objc_autoreleasePoolPop(v21);
                objc_msgSend(v16, "name");
                v27 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v67, "addObject:", v27);
LABEL_48:

              }
              self = v15;
              v8 = v68;
LABEL_50:

              goto LABEL_51;
            }
            objc_msgSend(v16, "vendorInfo");
            v20 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v16, "firmwareVersion");
            v36 = (void *)objc_claimAutoreleasedReturnValue();
            if (v36 && objc_msgSend(v16, "isPrimary"))
            {
              objc_msgSend(v20, "firmwareVersion");
              v37 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v16, "firmwareVersion");
              v38 = (void *)objc_claimAutoreleasedReturnValue();
              v39 = objc_msgSend(v37, "isGreaterThanVersion:", v38);

            }
            else
            {
              v39 = 0;
            }

            if (v20
              && (objc_msgSend(v20, "firmwareVersion"), (v40 = objc_claimAutoreleasedReturnValue()) != 0)
              && (v41 = (void *)v40, v42 = objc_msgSend(v16, "isPrimary"), v41, (v42 & 1) != 0))
            {
              if (!v39)
              {
                self = v15;
                v8 = v68;
                v7 = v69;
                goto LABEL_50;
              }
              v43 = (void *)MEMORY[0x227676638]();
              v44 = v15;
              HMFGetOSLogHandle();
              v45 = objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v45, OS_LOG_TYPE_INFO))
              {
                HMFGetLogIdentifier();
                v46 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v16, "uuid");
                v62 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v62, "UUIDString");
                v47 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v20, "firmwareVersion");
                v65 = v43;
                v48 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v20, "productData");
                v60 = v44;
                v49 = (void *)objc_claimAutoreleasedReturnValue();
                *(_DWORD *)buf = v59;
                v76 = v46;
                v77 = 2114;
                v78 = v47;
                v79 = 2114;
                v80 = v48;
                v81 = 2112;
                v82 = v49;
                _os_log_impl(&dword_2218F0000, v45, OS_LOG_TYPE_INFO, "%{public}@Accessory %{public}@ has a firmware update, vendor database indicates available firmware version %{public}@ for product data %@", buf, 0x2Au);

                v44 = v60;
                v43 = v65;

              }
              objc_autoreleasePoolPop(v43);
              objc_msgSend(v16, "namesOfServicesShowingTilesInHomeApp");
              v27 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v67, "addObjectsFromArray:", v27);
            }
            else
            {
              objc_msgSend(v16, "softwareUpdate", v59);
              v50 = (void *)objc_claimAutoreleasedReturnValue();
              v27 = v50;
              if (v50 && objc_msgSend(v50, "state") == 2)
              {
                v51 = (void *)MEMORY[0x227676638]();
                v52 = v15;
                HMFGetOSLogHandle();
                v53 = objc_claimAutoreleasedReturnValue();
                if (os_log_type_enabled(v53, OS_LOG_TYPE_INFO))
                {
                  HMFGetLogIdentifier();
                  v66 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend(v16, "uuid");
                  v61 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend(v61, "UUIDString");
                  v63 = v51;
                  v54 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend(v16, "firmwareVersion");
                  v55 = (void *)objc_claimAutoreleasedReturnValue();
                  *(_DWORD *)buf = 138543874;
                  v76 = v66;
                  v77 = 2114;
                  v78 = v54;
                  v79 = 2114;
                  v80 = v55;
                  _os_log_impl(&dword_2218F0000, v53, OS_LOG_TYPE_INFO, "%{public}@Accessory %{public}@ currentFirmwareVersion %{public}@ has a firmware update", buf, 0x20u);

                  v51 = v63;
                }

                objc_autoreleasePoolPop(v51);
                objc_msgSend(v16, "name");
                v56 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v67, "addObject:", v56);

              }
            }
            v7 = v69;
            goto LABEL_48;
          }
        }
        else
        {
          v28 = v10;
          objc_opt_class();
          v29 = objc_opt_isKindOfClass();

          if ((v29 & 1) != 0
            && v10
            && !-[HMDHome isAutomaticSoftwareUpdateEnabled](self, "isAutomaticSoftwareUpdateEnabled"))
          {
            v30 = v28;
            objc_opt_class();
            if ((objc_opt_isKindOfClass() & 1) != 0)
              v31 = v30;
            else
              v31 = 0;
            v18 = v31;

            if (objc_msgSend(v18, "supportsTVOSUpdateManualUpdateAvailableNotification"))
            {
              objc_msgSend(v18, "softwareUpdateListener");
              v32 = (void *)objc_claimAutoreleasedReturnValue();
              v33 = objc_msgSend(v32, "isSoftwareUpdateAvailable");

              if ((v33 & 1) != 0)
                goto LABEL_30;
            }
            if ((objc_msgSend(v18, "supportsTVOSUpdateManualUpdateAvailableNotification", v59) & 1) == 0)
            {
              objc_msgSend(v18, "softwareUpdateListener");
              v34 = (void *)objc_claimAutoreleasedReturnValue();
              v35 = objc_msgSend(v34, "isSoftwareUpdateDownloadedAndReadyForInstallation");

              if (v35)
              {
LABEL_30:
                objc_msgSend(v18, "name", v59);
                v20 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v67, "addObject:", v20);
                goto LABEL_50;
              }
            }
LABEL_51:

          }
        }
        ++v9;
      }
      while (v7 != v9);
      v57 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v71, v83, 16);
      v7 = v57;
      if (!v57)
      {
LABEL_56:

        return v67;
      }
    }
  }
  return v67;
}

- (id)matterAccessoriesWithNewFirmwareInstalledInHome
{
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  void *v10;
  id v11;
  void *v12;
  void *v13;
  HMDHome *v14;
  NSObject *v15;
  void *v16;
  void *v17;
  HMDHome *v19;
  uint64_t v20;
  void *v21;
  void *v22;
  id v23;
  void *context;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint8_t buf[4];
  void *v30;
  __int16 v31;
  void *v32;
  __int16 v33;
  void *v34;
  _BYTE v35[128];
  uint64_t v36;

  v36 = *MEMORY[0x24BDAC8D0];
  objc_msgSend(MEMORY[0x24BDBCEB8], "array");
  v23 = (id)objc_claimAutoreleasedReturnValue();
  if ((-[HMDHome isOwnerUser](self, "isOwnerUser") || -[HMDHome isSharedAdmin](self, "isSharedAdmin"))
    && !-[HMDHome isAutomaticThirdPartyAccessorySoftwareUpdateEnabled](self, "isAutomaticThirdPartyAccessorySoftwareUpdateEnabled"))
  {
    v27 = 0u;
    v28 = 0u;
    v25 = 0u;
    v26 = 0u;
    -[HMDHome accessories](self, "accessories");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    v4 = (void *)objc_msgSend(v3, "copy");

    v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v25, v35, 16);
    if (v5)
    {
      v6 = v5;
      v7 = *(_QWORD *)v26;
      v19 = self;
      v22 = v4;
      do
      {
        v8 = 0;
        v20 = v6;
        do
        {
          if (*(_QWORD *)v26 != v7)
            objc_enumerationMutation(v4);
          v9 = *(id *)(*((_QWORD *)&v25 + 1) + 8 * v8);
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) != 0)
            v10 = v9;
          else
            v10 = 0;
          v11 = v10;

          if (objc_msgSend(v11, "supportsCHIP"))
          {
            objc_msgSend(v9, "softwareUpdate");
            v12 = (void *)objc_claimAutoreleasedReturnValue();
            v13 = v12;
            if (v12 && objc_msgSend(v12, "state") == 4)
            {
              context = (void *)MEMORY[0x227676638]();
              v14 = self;
              HMFGetOSLogHandle();
              v15 = objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
              {
                HMFGetLogIdentifier();
                v16 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v9, "uuid");
                v21 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v21, "UUIDString");
                v17 = (void *)objc_claimAutoreleasedReturnValue();
                *(_DWORD *)buf = 138543874;
                v30 = v16;
                v31 = 2114;
                v32 = v17;
                v33 = 2112;
                v34 = v13;
                _os_log_impl(&dword_2218F0000, v15, OS_LOG_TYPE_INFO, "%{public}@Accessory %{public}@ has a firmware recently installed, softwareUpdate %@", buf, 0x20u);

                self = v19;
                v6 = v20;
              }

              objc_autoreleasePoolPop(context);
              objc_msgSend(v23, "addObject:", v9);
              v4 = v22;
            }

          }
          ++v8;
        }
        while (v6 != v8);
        v6 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v25, v35, 16);
      }
      while (v6);
    }

  }
  return v23;
}

- (void)reEvaluateHomeHubState
{
  NSObject *v3;
  _QWORD block[5];

  -[HMDHome workQueue](self, "workQueue");
  v3 = objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x24BDAC760];
  block[1] = 3221225472;
  block[2] = __33__HMDHome_reEvaluateHomeHubState__block_invoke;
  block[3] = &unk_24E79C240;
  block[4] = self;
  dispatch_async(v3, block);

}

- (void)evaluateResidentUpdate
{
  NSObject *v3;
  _QWORD block[5];

  -[HMDHome workQueue](self, "workQueue");
  v3 = objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x24BDAC760];
  block[1] = 3221225472;
  block[2] = __33__HMDHome_evaluateResidentUpdate__block_invoke;
  block[3] = &unk_24E79C240;
  block[4] = self;
  dispatch_async(v3, block);

}

- (void)evaluateBulletinNotificationsSupported
{
  NSObject *v3;
  _QWORD block[5];

  -[HMDHome workQueue](self, "workQueue");
  v3 = objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x24BDAC760];
  block[1] = 3221225472;
  block[2] = __49__HMDHome_evaluateBulletinNotificationsSupported__block_invoke;
  block[3] = &unk_24E79C240;
  block[4] = self;
  dispatch_async(v3, block);

}

- (id)getServiceTransaction:(id)a3 parentUUID:(id)a4 changeType:(unint64_t)a5
{
  id v7;
  id v8;
  void *v9;
  void *v10;
  HMDServiceTransaction *v11;
  void *v12;
  void *v13;
  id v14;
  void *v15;
  id v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;

  v7 = a3;
  v8 = a4;
  objc_msgSend(v7, "instanceID");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  +[HMDService generateUUIDWithAccessoryUUID:serviceID:](HMDService, "generateUUIDWithAccessoryUUID:serviceID:", v8, v9);
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  v11 = -[HMDBackingStoreModelObject initWithObjectChangeType:uuid:parentUUID:]([HMDServiceTransaction alloc], "initWithObjectChangeType:uuid:parentUUID:", a5, v10, v8);
  if (v7)
  {
    objc_msgSend(v7, "instanceID");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDServiceTransaction setInstanceID:](v11, "setInstanceID:", v12);

    objc_msgSend(v7, "type");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDServiceTransaction setServiceType:](v11, "setServiceType:", v13);

    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
    {
      v14 = v7;
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0)
        v15 = v14;
      else
        v15 = 0;
      v16 = v15;

      objc_msgSend(v16, "endpoint");
      v17 = (void *)objc_claimAutoreleasedReturnValue();

      -[HMDServiceTransaction setMatterEndpointID:](v11, "setMatterEndpointID:", v17);
    }
    objc_msgSend(v7, "linkedServices");
    v18 = (void *)objc_claimAutoreleasedReturnValue();

    if (v18)
    {
      objc_msgSend(v7, "linkedServices");
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      v20 = (void *)objc_msgSend(v19, "copy");
      -[HMDServiceTransaction setLinkedServices:](v11, "setLinkedServices:", v20);

    }
    objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedInteger:", objc_msgSend(v7, "serviceProperties"));
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDServiceTransaction setServiceProperties:](v11, "setServiceProperties:", v21);

  }
  return v11;
}

- (id)getTransactionFromHAPAccessory:(id)a3 hmdAccessory:(id)a4 uuid:(id)a5 hostAccessoryUUID:(id)a6 objectChangeType:(unint64_t)a7
{
  id v12;
  id v13;
  id v14;
  id v15;
  void *v16;
  void *v17;
  id v18;
  void *v19;
  void *v20;
  HMDHAPAccessoryTransaction *v21;
  HMDHAPAccessoryTransaction *v22;
  HMDHAPAccessoryTransaction *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  uint64_t v28;
  void *v29;
  int v30;
  void *v31;
  HMDHome *v32;
  NSObject *v33;
  NSObject *v34;
  void *v35;
  id v36;
  id v37;
  void *v38;
  void *v39;
  void *v40;
  id v41;
  id v42;
  void *v43;
  void *v44;
  uint64_t v45;
  void *v46;
  void *v47;
  int v48;
  void *v49;
  void *v50;
  void *v51;
  void *v52;
  void *v53;
  id v54;
  id v55;
  void *v56;
  void *v57;
  void *v58;
  void *v59;
  void *v60;
  void *v61;
  void *v62;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  id v66;
  id v67;
  void *v68;
  id v69;
  void *v70;
  void *v71;
  id v73;
  void *v74;
  void *v75;
  void *v76;
  id v77;
  void *v78;
  _QWORD v79[4];
  id v80;
  _QWORD v81[4];
  id v82;
  id v83;
  id v84;
  unsigned __int8 v85;
  uint8_t buf[4];
  void *v87;
  __int16 v88;
  void *v89;
  __int16 v90;
  void *v91;
  __int16 v92;
  id v93;
  __int16 v94;
  void *v95;
  uint64_t v96;

  v96 = *MEMORY[0x24BDAC8D0];
  v12 = a3;
  v13 = a4;
  v14 = a5;
  v15 = a6;
  -[HMDHome currentAccessory](self, "currentAccessory");
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v17 = v16;
  else
    v17 = 0;
  v77 = v17;

  v18 = v14;
  if (v13)
  {
    objc_msgSend(v13, "transactionWithObjectChangeType:", a7);
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
      v20 = v19;
    else
      v20 = 0;
    v21 = v20;
  }
  else
  {
    v22 = [HMDHAPAccessoryTransaction alloc];
    -[HMDHome uuid](self, "uuid");
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    v21 = -[HMDBackingStoreModelObject initWithObjectChangeType:uuid:parentUUID:](v22, "initWithObjectChangeType:uuid:parentUUID:", a7, v18, v19);
  }
  v23 = v21;

  -[HMDHAPAccessoryTransaction setHapAccessoryLocal:](v23, "setHapAccessoryLocal:", v12);
  objc_msgSend(v13, "providedName");
  v24 = (void *)objc_claimAutoreleasedReturnValue();
  if (v24)
    goto LABEL_13;
  if (objc_msgSend(v12, "linkType") != 2)
  {
    objc_msgSend(v12, "name");
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    v25 = (void *)objc_msgSend(v24, "copy");
    -[HMDHAPAccessoryTransaction setProvidedName:](v23, "setProvidedName:", v25);

LABEL_13:
  }
  objc_msgSend(v12, "uniqueIdentifier");
  v26 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHAPAccessoryTransaction setUniqueIdentifier:](v23, "setUniqueIdentifier:", v26);

  objc_msgSend(v12, "identifier");
  v27 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHAPAccessoryTransaction setIdentifier:](v23, "setIdentifier:", v27);

  objc_msgSend(v12, "identifier");
  v28 = objc_claimAutoreleasedReturnValue();
  v85 = 0;
  -[HMDHome keychainStore](self, "keychainStore");
  v29 = (void *)objc_claimAutoreleasedReturnValue();
  v84 = 0;
  objc_msgSend(v29, "readPublicKeyForAccessoryName:registeredWithHomeKit:error:", v28, &v85, &v84);
  v78 = (void *)objc_claimAutoreleasedReturnValue();
  v73 = v84;

  v30 = v85;
  v31 = (void *)MEMORY[0x227676638]();
  v32 = self;
  HMFGetOSLogHandle();
  v33 = objc_claimAutoreleasedReturnValue();
  v34 = v33;
  v75 = v15;
  v76 = (void *)v28;
  if (v28 && v78 && v30)
  {
    if (os_log_type_enabled(v33, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v35 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v12, "name");
      v36 = v13;
      v37 = v18;
      v38 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v12, "uniqueIdentifier");
      v39 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138544386;
      v87 = v35;
      v88 = 2112;
      v89 = v38;
      v90 = 2112;
      v91 = v39;
      v92 = 2112;
      v93 = v76;
      v94 = 2112;
      v95 = v78;
      _os_log_impl(&dword_2218F0000, v34, OS_LOG_TYPE_INFO, "%{public}@Accessory %@/%@ setting pairing username and pubkey to ('%@', '%@')", buf, 0x34u);

      v15 = v75;
      v18 = v37;
      v13 = v36;

    }
    objc_autoreleasePoolPop(v31);
    -[HMDHAPAccessoryTransaction setPairingUsername:](v23, "setPairingUsername:", v76);
    -[HMDHAPAccessoryTransaction setPublicKey:](v23, "setPublicKey:", v78);
  }
  else
  {
    if (os_log_type_enabled(v33, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v40 = (void *)objc_claimAutoreleasedReturnValue();
      -[HMDHAPAccessoryTransaction providedName](v23, "providedName");
      v41 = v13;
      v42 = v18;
      v43 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138544130;
      v87 = v40;
      v88 = 2112;
      v89 = v43;
      v90 = 2112;
      v91 = v76;
      v92 = 2112;
      v93 = v73;
      _os_log_impl(&dword_2218F0000, v34, OS_LOG_TYPE_ERROR, "%{public}@Failed to read public key for accessory %@ with pairing username %@: %@", buf, 0x2Au);

      v18 = v42;
      v13 = v41;

    }
    objc_autoreleasePoolPop(v31);
  }
  objc_msgSend(v15, "UUIDString", v73);
  v44 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHAPAccessoryTransaction setHostAccessoryUUID:](v23, "setHostAccessoryUUID:", v44);

  -[HMDHAPAccessoryTransaction hostAccessoryUUID](v23, "hostAccessoryUUID");
  v45 = objc_claimAutoreleasedReturnValue();
  v46 = (void *)v45;
  if (v18 && !v45 && v77)
  {
    objc_msgSend(v77, "sensorAccessoryUUID");
    v47 = (void *)objc_claimAutoreleasedReturnValue();
    v48 = objc_msgSend(v47, "hmf_isEqualToUUID:", v18);

    if (!v48)
      goto LABEL_29;
    objc_msgSend(v77, "uuid");
    v46 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v46, "UUIDString");
    v49 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHAPAccessoryTransaction setHostAccessoryUUID:](v23, "setHostAccessoryUUID:", v49);

  }
LABEL_29:
  objc_msgSend(v13, "category");
  v50 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v50)
  {
    objc_msgSend(v12, "category");
    v51 = (void *)objc_claimAutoreleasedReturnValue();

    if (v51)
    {
      objc_msgSend(v12, "category");
      v52 = (void *)objc_claimAutoreleasedReturnValue();
      -[HMDHAPAccessoryTransaction setAccessoryCategory:](v23, "setAccessoryCategory:", v52);
    }
    else
    {
      -[HMDHome hapMetadata](v32, "hapMetadata");
      v52 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v52, "categoryForOther");
      v53 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v53, "identifier");
      v54 = v13;
      v55 = v18;
      v56 = (void *)objc_claimAutoreleasedReturnValue();
      -[HMDHAPAccessoryTransaction setAccessoryCategory:](v23, "setAccessoryCategory:", v56);

      v18 = v55;
      v13 = v54;

    }
  }
  v57 = v13;
  v58 = v18;
  objc_msgSend(MEMORY[0x24BDBCEF0], "set");
  v59 = (void *)objc_claimAutoreleasedReturnValue();
  v60 = (void *)MEMORY[0x24BDBCEF0];
  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithInteger:", objc_msgSend(v12, "linkType"));
  v61 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v60, "setWithObject:", v61);
  v62 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v12, "servicesOfType:", CFSTR("00000701-0000-1000-8000-0026BB765291"));
  v63 = (void *)objc_claimAutoreleasedReturnValue();
  v64 = objc_msgSend(v63, "count");

  if (v64)
    objc_msgSend(v62, "addObject:", &unk_24E96A508);
  v65 = MEMORY[0x24BDAC760];
  v81[0] = MEMORY[0x24BDAC760];
  v81[1] = 3221225472;
  v81[2] = __95__HMDHome_getTransactionFromHAPAccessory_hmdAccessory_uuid_hostAccessoryUUID_objectChangeType___block_invoke;
  v81[3] = &unk_24E775F18;
  v66 = v59;
  v82 = v66;
  v83 = v12;
  v67 = v12;
  objc_msgSend(v62, "na_each:", v81);
  objc_msgSend(v57, "transportInformationInstances");
  v68 = (void *)objc_claimAutoreleasedReturnValue();
  v79[0] = v65;
  v79[1] = 3221225472;
  v79[2] = __95__HMDHome_getTransactionFromHAPAccessory_hmdAccessory_uuid_hostAccessoryUUID_objectChangeType___block_invoke_2;
  v79[3] = &unk_24E775F40;
  v80 = v66;
  v69 = v66;
  objc_msgSend(v68, "na_each:", v79);

  objc_msgSend(v69, "allObjects");
  v70 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHAPAccessoryTransaction setTransportInformation:](v23, "setTransportInformation:", v70);

  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithInteger:", objc_msgSend(v67, "communicationProtocol"));
  v71 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHAPAccessoryTransaction setCommunicationProtocol:](v23, "setCommunicationProtocol:", v71);

  return v23;
}

- (void)evaluateShouldRelaunchAndSetRelaunch
{
  NSObject *v3;
  _QWORD block[5];

  -[HMDHome workQueue](self, "workQueue");
  v3 = objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x24BDAC760];
  block[1] = 3221225472;
  block[2] = __47__HMDHome_evaluateShouldRelaunchAndSetRelaunch__block_invoke;
  block[3] = &unk_24E79C240;
  block[4] = self;
  dispatch_async(v3, block);

}

- (void)_evaluateShouldRelaunchAndSetRelaunch
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t i;
  void *v9;
  void *v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  if (!-[HMDHome isCurrentDeviceConfirmedPrimaryResident](self, "isCurrentDeviceConfirmedPrimaryResident"))
  {
    v13 = 0u;
    v14 = 0u;
    v11 = 0u;
    v12 = 0u;
    -[HMDHome accessories](self, "accessories", 0);
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    if (v4)
    {
      v5 = v4;
      v6 = 0;
      v7 = *(_QWORD *)v12;
      do
      {
        for (i = 0; i != v5; ++i)
        {
          if (*(_QWORD *)v12 != v7)
            objc_enumerationMutation(v3);
          v6 |= objc_msgSend(*(id *)(*((_QWORD *)&v11 + 1) + 8 * i), "shouldEnableDaemonRelaunch");
        }
        v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
      }
      while (v5);

      if ((v6 & 1) != 0)
        goto LABEL_10;
    }
    else
    {

    }
    -[HMDHome launchHandler](self, "launchHandler");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHome uuid](self, "uuid");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "deregisterRelaunchClientWithUUID:", v10);
    goto LABEL_13;
  }
LABEL_10:
  -[HMDHome launchHandler](self, "launchHandler");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHome uuid](self, "uuid");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "registerRelaunchClientWithUUID:", v10);
LABEL_13:

}

- (void)resetConfiguration
{
  NSObject *v3;
  _QWORD block[5];

  -[HMDHome unconfigure](self, "unconfigure");
  -[HMDHome workQueue](self, "workQueue");
  v3 = objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x24BDAC760];
  block[1] = 3221225472;
  block[2] = __29__HMDHome_resetConfiguration__block_invoke;
  block[3] = &unk_24E79C240;
  block[4] = self;
  dispatch_async(v3, block);

}

- (void)notifyClientOfVendorInfoUpdatedForManufacturers:(id)a3 withCompletion:(id)a4
{
  id v6;
  id v7;
  NSObject *v8;
  id v9;
  id v10;
  _QWORD block[5];
  id v12;
  id v13;

  v6 = a3;
  v7 = a4;
  -[HMDHome workQueue](self, "workQueue");
  v8 = objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x24BDAC760];
  block[1] = 3221225472;
  block[2] = __74__HMDHome_notifyClientOfVendorInfoUpdatedForManufacturers_withCompletion___block_invoke;
  block[3] = &unk_24E79B440;
  block[4] = self;
  v12 = v6;
  v13 = v7;
  v9 = v7;
  v10 = v6;
  dispatch_async(v8, block);

}

- (void)_registerForMessages
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  void *v43;
  void *v44;
  void *v45;
  void *v46;
  void *v47;
  void *v48;
  void *v49;
  void *v50;
  void *v51;
  void *v52;
  void *v53;
  void *v54;
  void *v55;
  void *v56;
  void *v57;
  void *v58;
  void *v59;
  void *v60;
  void *v61;
  void *v62;
  void *v63;
  void *v64;
  void *v65;
  void *v66;
  void *v67;
  void *v68;
  void *v69;
  void *v70;
  void *v71;
  void *v72;
  void *v73;
  void *v74;
  void *v75;
  void *v76;
  void *v77;
  void *v78;
  void *v79;
  void *v80;
  void *v81;
  void *v82;
  void *v83;
  void *v84;
  void *v85;
  void *v86;
  void *v87;
  void *v88;
  void *v89;
  void *v90;
  void *v91;
  void *v92;
  void *v93;
  void *v94;
  void *v95;
  void *v96;
  void *v97;
  void *v98;
  void *v99;
  void *v100;
  void *v101;
  void *v102;
  void *v103;
  void *v104;
  void *v105;
  void *v106;
  void *v107;
  void *v108;
  void *v109;
  void *v110;
  void *v111;
  void *v112;
  void *v113;
  void *v114;
  void *v115;
  void *v116;
  void *v117;
  void *v118;
  void *v119;
  void *v120;
  void *v121;
  void *v122;
  void *v123;
  void *v124;
  void *v125;
  void *v126;
  void *v127;
  void *v128;
  void *v129;
  void *v130;
  void *v131;
  void *v132;
  void *v133;
  void *v134;
  void *v135;
  void *v136;
  void *v137;
  void *v138;
  void *v139;
  void *v140;
  void *v141;
  void *v142;
  void *v143;
  void *v144;
  void *v145;
  void *v146;
  void *v147;
  void *v148;
  void *v149;
  void *v150;
  void *v151;
  void *v152;
  void *v153;
  void *v154;
  void *v155;
  uint64_t v156;
  void *v157;
  void *v158;
  void *v159;
  void *v160;
  void *v161;
  void *v162;
  void *v163;
  void *v164;
  void *v165;
  void *v166;
  void *v167;
  void *v168;
  void *v169;
  void *v170;
  void *v171;
  void *v172;
  void *v173;
  void *v174;
  void *v175;
  void *v176;
  void *v177;
  void *v178;
  void *v179;
  void *v180;
  void *v181;
  void *v182;
  void *v183;
  void *v184;
  void *v185;
  void *v186;
  void *v187;
  void *v188;
  void *v189;
  void *v190;
  void *v191;
  void *v192;
  void *v193;
  void *v194;
  void *v195;
  void *v196;
  void *v197;
  void *v198;
  void *v199;
  void *v200;
  void *v201;
  void *v202;
  void *v203;
  void *v204;
  void *v205;
  void *v206;
  void *v207;
  void *v208;
  void *v209;
  void *v210;
  void *v211;
  void *v212;
  void *v213;
  void *v214;
  void *v215;
  void *v216;
  void *v217;
  void *v218;
  void *v219;
  void *v220;
  void *v221;
  void *v222;
  void *v223;
  void *v224;
  void *v225;
  void *v226;
  void *v227;
  void *v228;
  void *v229;
  void *v230;
  void *v231;
  void *v232;
  void *v233;
  void *v234;
  void *v235;
  void *v236;
  void *v237;
  void *v238;
  void *v239;
  void *v240;
  void *v241;
  void *v242;
  void *v243;
  void *v244;
  void *v245;
  void *v246;
  void *v247;
  void *v248;
  void *v249;
  void *v250;
  void *v251;
  void *v252;
  void *v253;
  void *v254;
  void *v255;
  void *v256;
  void *v257;
  void *v258;
  void *v259;
  void *v260;
  void *v261;
  void *v262;
  void *v263;
  void *v264;
  void *v265;
  void *v266;
  void *v267;
  void *v268;
  void *v269;
  void *v270;
  void *v271;
  void *v272;
  void *v273;
  void *v274;
  void *v275;
  void *v276;
  void *v277;
  void *v278;
  void *v279;
  void *v280;
  void *v281;
  void *v282;
  void *v283;
  void *v284;
  void *v285;
  void *v286;
  void *v287;
  void *v288;
  void *v289;
  void *v290;
  void *v291;
  void *v292;
  void *v293;
  void *v294;
  void *v295;
  void *v296;
  void *v297;
  void *v298;
  void *v299;
  void *v300;
  void *v301;
  void *v302;
  void *v303;
  void *v304;
  void *v305;
  void *v306;
  void *v307;
  void *v308;
  void *v309;
  void *v310;
  void *v311;
  void *v312;
  void *v313;
  void *v314;
  void *v315;
  void *v316;
  void *v317;
  void *v318;
  void *v319;
  void *v320;
  void *v321;
  void *v322;
  void *v323;
  void *v324;
  void *v325;
  void *v326;
  void *v327;
  void *v328;
  void *v329;
  void *v330;
  void *v331;
  void *v332;
  void *v333;
  void *v334;
  void *v335;
  void *v336;
  void *v337;
  void *v338;
  void *v339;
  void *v340;
  void *v341;
  void *v342;
  _QWORD *v343;
  void *v344;
  void *v345;
  void *v346;
  void *v347;
  void *v348;
  void *v349;
  void *v350;
  void *v351;
  void *v352;
  void *v353;
  void *v354;
  void *v355;
  void *v356;
  void *v357;
  void *v358;
  void *v359;
  void *v360;
  void *v361;
  void *v362;
  void *v363;
  void *v364;
  void *v365;
  void *v366;
  void *v367;
  void *v368;
  void *v369;
  void *v370;
  void *v371;
  void *v372;
  void *v373;
  void *v374;
  void *v375;
  void *v376;
  void *v377;
  void *v378;
  void *v379;
  void *v380;
  void *v381;
  void *v382;
  void *v383;
  void *v384;
  void *v385;
  void *v386;
  void *v387;
  void *v388;
  void *v389;
  void *v390;
  void *v391;
  void *v392;
  void *v393;
  void *v394;
  void *v395;
  void *v396;
  void *v397;
  void *v398;
  void *v399;
  void *v400;
  void *v401;
  void *v402;
  void *v403;
  void *v404;
  _QWORD v405[4];
  id v406;
  id location;
  void *v408;
  _QWORD v409[3];
  _QWORD v410[2];
  _QWORD v411[2];
  _QWORD v412[3];
  _QWORD v413[3];
  void *v414;
  _QWORD v415[2];
  void *v416;
  void *v417;
  _QWORD v418[3];
  _QWORD v419[3];
  _QWORD v420[2];
  _QWORD v421[2];
  _QWORD v422[2];
  _QWORD v423[3];
  _QWORD v424[3];
  _QWORD v425[2];
  _QWORD v426[2];
  _QWORD v427[2];
  _QWORD v428[2];
  _QWORD v429[2];
  _QWORD v430[2];
  _QWORD v431[2];
  _QWORD v432[3];
  _QWORD v433[3];
  _QWORD v434[2];
  _QWORD v435[2];
  _QWORD v436[3];
  _QWORD v437[2];
  _QWORD v438[2];
  _QWORD v439[2];
  _QWORD v440[2];
  _QWORD v441[2];
  _QWORD v442[2];
  _QWORD v443[4];
  _QWORD v444[4];
  _QWORD v445[4];
  _QWORD v446[4];
  _QWORD v447[4];
  _QWORD v448[4];
  _QWORD v449[2];
  _QWORD v450[3];
  _QWORD v451[3];
  _QWORD v452[3];
  _QWORD v453[3];
  _QWORD v454[3];
  _QWORD v455[2];
  _QWORD v456[2];
  _QWORD v457[2];
  _QWORD v458[3];
  _QWORD v459[2];
  _QWORD v460[2];
  _QWORD v461[3];
  _QWORD v462[4];
  _QWORD v463[3];
  _QWORD v464[2];
  _QWORD v465[2];
  _QWORD v466[4];
  _QWORD v467[4];
  _QWORD v468[4];
  _QWORD v469[2];
  _QWORD v470[2];
  _QWORD v471[2];
  void *v472;
  _QWORD v473[4];
  _QWORD v474[3];
  _QWORD v475[3];
  _QWORD v476[3];
  _QWORD v477[2];
  _QWORD v478[2];
  _QWORD v479[2];
  _QWORD v480[3];
  _QWORD v481[3];
  _QWORD v482[2];
  _QWORD v483[2];
  _QWORD v484[2];
  _QWORD v485[2];
  _QWORD v486[2];
  _QWORD v487[2];
  _QWORD v488[2];
  _QWORD v489[3];
  _QWORD v490[3];
  _QWORD v491[2];
  _QWORD v492[2];
  _QWORD v493[2];
  _QWORD v494[2];
  _QWORD v495[2];
  _QWORD v496[2];
  _QWORD v497[2];
  _QWORD v498[2];
  _QWORD v499[2];
  _QWORD v500[2];
  _QWORD v501[2];
  _QWORD v502[2];
  _QWORD v503[3];
  _QWORD v504[2];
  _QWORD v505[2];
  _QWORD v506[2];
  _QWORD v507[2];
  _QWORD v508[2];
  _QWORD v509[2];
  _QWORD v510[2];
  _QWORD v511[2];
  _QWORD v512[2];
  _QWORD v513[2];
  _QWORD v514[2];
  void *v515;
  _QWORD v516[4];

  v516[2] = *MEMORY[0x24BDAC8D0];
  +[HMDUserMessagePolicy userMessagePolicyWithHome:userPrivilege:remoteAccessRequired:](HMDUserMessagePolicy, "userMessagePolicyWithHome:userPrivilege:remoteAccessRequired:", self, 3, 0);
  v403 = (void *)objc_claimAutoreleasedReturnValue();
  +[HMDUserMessagePolicy userMessagePolicyWithHome:userPrivilege:remoteAccessRequired:](HMDUserMessagePolicy, "userMessagePolicyWithHome:userPrivilege:remoteAccessRequired:", self, 0, 0);
  v404 = (void *)objc_claimAutoreleasedReturnValue();
  +[HMDUserMessagePolicy userMessagePolicyWithHome:userPrivilege:remoteAccessRequired:](HMDUserMessagePolicy, "userMessagePolicyWithHome:userPrivilege:remoteAccessRequired:", self, 0, 1);
  v401 = (void *)objc_claimAutoreleasedReturnValue();
  +[HMDUserMessagePolicy userMessagePolicyWithHome:userPrivilege:remoteAccessRequired:](HMDUserMessagePolicy, "userMessagePolicyWithHome:userPrivilege:remoteAccessRequired:", self, 5, 0);
  v400 = (void *)objc_claimAutoreleasedReturnValue();
  +[HMDUserMessagePolicy userMessagePolicyUsingProofOfLocalityForHome:userPrivilege:](HMDUserMessagePolicy, "userMessagePolicyUsingProofOfLocalityForHome:userPrivilege:", self, 5);
  v402 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHome administratorHandler](self, "administratorHandler");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  +[HMDXPCMessagePolicy policyWithEntitlements:](HMDXPCMessagePolicy, "policyWithEntitlements:", 1);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v516[0] = v4;
  +[HMDConfigurationMessagePolicy policyWithOperationTypes:](HMDConfigurationMessagePolicy, "policyWithOperationTypes:", 2);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v516[1] = v5;
  objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", v516, 2);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "registerForMessage:receiver:policies:selector:", CFSTR("kRenameHomeRequestKey"), self, v6, sel__handleRename_);

  -[HMDHome msgDispatcher](self, "msgDispatcher");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  +[HMDXPCMessagePolicy policyWithEntitlements:](HMDXPCMessagePolicy, "policyWithEntitlements:", 5);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v515 = v8;
  objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", &v515, 1);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "registerForMessage:receiver:policies:selector:", *MEMORY[0x24BDD6F70], self, v9, sel__handleHomeDataRequest_);

  -[HMDHome administratorHandler](self, "administratorHandler");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  +[HMDXPCMessagePolicy policyWithEntitlements:](HMDXPCMessagePolicy, "policyWithEntitlements:", 1);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v514[0] = v11;
  +[HMDConfigurationMessagePolicy policyWithOperationTypes:](HMDConfigurationMessagePolicy, "policyWithOperationTypes:", 1);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  v514[1] = v12;
  objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", v514, 2);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "registerForMessage:receiver:policies:selector:", CFSTR("kAddRoomRequestKey"), self, v13, sel__handleAddRoom_);

  -[HMDHome administratorHandler](self, "administratorHandler");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  +[HMDXPCMessagePolicy policyWithEntitlements:](HMDXPCMessagePolicy, "policyWithEntitlements:", 1);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  v513[0] = v15;
  +[HMDConfigurationMessagePolicy policyWithOperationTypes:](HMDConfigurationMessagePolicy, "policyWithOperationTypes:", 4);
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  v513[1] = v16;
  objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", v513, 2);
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v14, "registerForMessage:receiver:policies:selector:", CFSTR("kRemoveRoomRequestKey"), self, v17, sel__handleRemoveRoom_);

  -[HMDHome administratorHandler](self, "administratorHandler");
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  +[HMDXPCMessagePolicy policyWithEntitlements:](HMDXPCMessagePolicy, "policyWithEntitlements:", 1);
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  v512[0] = v19;
  +[HMDConfigurationMessagePolicy policyWithOperationTypes:](HMDConfigurationMessagePolicy, "policyWithOperationTypes:", 1);
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  v512[1] = v20;
  objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", v512, 2);
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v18, "registerForMessage:receiver:policies:selector:", CFSTR("kAddZoneRequestKey"), self, v21, sel__handleAddZone_);

  -[HMDHome administratorHandler](self, "administratorHandler");
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  +[HMDXPCMessagePolicy policyWithEntitlements:](HMDXPCMessagePolicy, "policyWithEntitlements:", 1);
  v23 = (void *)objc_claimAutoreleasedReturnValue();
  v511[0] = v23;
  +[HMDConfigurationMessagePolicy policyWithOperationTypes:](HMDConfigurationMessagePolicy, "policyWithOperationTypes:", 4);
  v24 = (void *)objc_claimAutoreleasedReturnValue();
  v511[1] = v24;
  objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", v511, 2);
  v25 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v22, "registerForMessage:receiver:policies:selector:", CFSTR("kRemoveZoneRequestKey"), self, v25, sel__handleRemoveZone_);

  -[HMDHome administratorHandler](self, "administratorHandler");
  v26 = (void *)objc_claimAutoreleasedReturnValue();
  +[HMDXPCMessagePolicy policyWithEntitlements:](HMDXPCMessagePolicy, "policyWithEntitlements:", 1);
  v27 = (void *)objc_claimAutoreleasedReturnValue();
  v510[0] = v27;
  +[HMDConfigurationMessagePolicy policyWithOperationTypes:](HMDConfigurationMessagePolicy, "policyWithOperationTypes:", 1);
  v28 = (void *)objc_claimAutoreleasedReturnValue();
  v510[1] = v28;
  objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", v510, 2);
  v29 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v26, "registerForMessage:receiver:policies:selector:", *MEMORY[0x24BDD7BF0], self, v29, sel__handleAddServiceGroup_);

  -[HMDHome administratorHandler](self, "administratorHandler");
  v30 = (void *)objc_claimAutoreleasedReturnValue();
  +[HMDXPCMessagePolicy policyWithEntitlements:](HMDXPCMessagePolicy, "policyWithEntitlements:", 1);
  v31 = (void *)objc_claimAutoreleasedReturnValue();
  v509[0] = v31;
  +[HMDConfigurationMessagePolicy policyWithOperationTypes:](HMDConfigurationMessagePolicy, "policyWithOperationTypes:", 4);
  v32 = (void *)objc_claimAutoreleasedReturnValue();
  v509[1] = v32;
  objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", v509, 2);
  v33 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v30, "registerForMessage:receiver:policies:selector:", *MEMORY[0x24BDD7D40], self, v33, sel__handleRemoveServiceGroup_);

  -[HMDHome administratorHandler](self, "administratorHandler");
  v34 = (void *)objc_claimAutoreleasedReturnValue();
  +[HMDXPCMessagePolicy policyWithEntitlements:](HMDXPCMessagePolicy, "policyWithEntitlements:", 1);
  v35 = (void *)objc_claimAutoreleasedReturnValue();
  v508[0] = v35;
  +[HMDConfigurationMessagePolicy policyWithOperationTypes:](HMDConfigurationMessagePolicy, "policyWithOperationTypes:", 1);
  v36 = (void *)objc_claimAutoreleasedReturnValue();
  v508[1] = v36;
  objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", v508, 2);
  v37 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v34, "registerForMessage:receiver:policies:selector:", CFSTR("kAddActionSetRequestKey"), self, v37, sel__handleAddActionSet_);

  -[HMDHome administratorHandler](self, "administratorHandler");
  v38 = (void *)objc_claimAutoreleasedReturnValue();
  +[HMDXPCMessagePolicy policyWithEntitlements:](HMDXPCMessagePolicy, "policyWithEntitlements:", 5);
  v39 = (void *)objc_claimAutoreleasedReturnValue();
  v507[0] = v39;
  +[HMDConfigurationMessagePolicy policyWithOperationTypes:](HMDConfigurationMessagePolicy, "policyWithOperationTypes:", 1);
  v40 = (void *)objc_claimAutoreleasedReturnValue();
  v507[1] = v40;
  objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", v507, 2);
  v41 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v38, "registerForMessage:receiver:policies:selector:", *MEMORY[0x24BDD5250], self, v41, sel__handleAddActionSet_);

  -[HMDHome administratorHandler](self, "administratorHandler");
  v42 = (void *)objc_claimAutoreleasedReturnValue();
  +[HMDXPCMessagePolicy policyWithEntitlements:](HMDXPCMessagePolicy, "policyWithEntitlements:", 1);
  v43 = (void *)objc_claimAutoreleasedReturnValue();
  v506[0] = v43;
  +[HMDConfigurationMessagePolicy policyWithOperationTypes:](HMDConfigurationMessagePolicy, "policyWithOperationTypes:", 4);
  v44 = (void *)objc_claimAutoreleasedReturnValue();
  v506[1] = v44;
  objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", v506, 2);
  v45 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v42, "registerForMessage:receiver:policies:selector:", CFSTR("kRemoveActionSetRequestKey"), self, v45, sel__handleRemoveActionSet_);

  -[HMDHome administratorHandler](self, "administratorHandler");
  v46 = (void *)objc_claimAutoreleasedReturnValue();
  +[HMDXPCMessagePolicy policyWithEntitlements:](HMDXPCMessagePolicy, "policyWithEntitlements:", 1);
  v47 = (void *)objc_claimAutoreleasedReturnValue();
  v505[0] = v47;
  +[HMDConfigurationMessagePolicy policyWithOperationTypes:](HMDConfigurationMessagePolicy, "policyWithOperationTypes:", 4);
  v48 = (void *)objc_claimAutoreleasedReturnValue();
  v505[1] = v48;
  objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", v505, 2);
  v49 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v46, "registerForMessage:receiver:policies:selector:", CFSTR("kRemoveTriggerRequestKey"), self, v49, sel__handleRemoveTrigger_);

  -[HMDHome administratorHandler](self, "administratorHandler");
  v50 = (void *)objc_claimAutoreleasedReturnValue();
  +[HMDXPCMessagePolicy policyWithEntitlements:](HMDXPCMessagePolicy, "policyWithEntitlements:", 5);
  v51 = (void *)objc_claimAutoreleasedReturnValue();
  v504[0] = v51;
  +[HMDConfigurationMessagePolicy policyWithOperationTypes:](HMDConfigurationMessagePolicy, "policyWithOperationTypes:", 2);
  v52 = (void *)objc_claimAutoreleasedReturnValue();
  v504[1] = v52;
  objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", v504, 2);
  v53 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v50, "registerForMessage:receiver:policies:selector:", CFSTR("kUpdateUserAccessRequestKey"), self, v53, sel__handleUpdateUserAccess_);

  -[HMDHome administratorHandler](self, "administratorHandler");
  v54 = (void *)objc_claimAutoreleasedReturnValue();
  +[HMDXPCMessagePolicy policyWithEntitlements:](HMDXPCMessagePolicy, "policyWithEntitlements:", 5);
  v55 = (void *)objc_claimAutoreleasedReturnValue();
  v503[0] = v55;
  +[HMDConfigurationMessagePolicy policyWithOperationTypes:](HMDConfigurationMessagePolicy, "policyWithOperationTypes:", 2);
  v56 = (void *)objc_claimAutoreleasedReturnValue();
  v503[1] = v56;
  v503[2] = v403;
  objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", v503, 3);
  v57 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v54, "registerForMessage:receiver:policies:selector:", *MEMORY[0x24BDD7E40], self, v57, sel__handleUpdateUserCamerasAccessLevel_);

  -[HMDHome administratorHandler](self, "administratorHandler");
  v58 = (void *)objc_claimAutoreleasedReturnValue();
  +[HMDXPCMessagePolicy policyWithEntitlements:](HMDXPCMessagePolicy, "policyWithEntitlements:", 5);
  v59 = (void *)objc_claimAutoreleasedReturnValue();
  v502[0] = v59;
  +[HMDConfigurationMessagePolicy policyWithOperationTypes:](HMDConfigurationMessagePolicy, "policyWithOperationTypes:", 4);
  v60 = (void *)objc_claimAutoreleasedReturnValue();
  v502[1] = v60;
  objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", v502, 2);
  v61 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v58, "registerForMessage:receiver:policies:selector:", CFSTR("kRemoveUserRequestKey"), self, v61, sel__handleRemoveUser_);

  -[HMDHome administratorHandler](self, "administratorHandler");
  v62 = (void *)objc_claimAutoreleasedReturnValue();
  +[HMDXPCMessagePolicy policyWithEntitlements:](HMDXPCMessagePolicy, "policyWithEntitlements:", 5);
  v63 = (void *)objc_claimAutoreleasedReturnValue();
  v501[0] = v63;
  +[HMDConfigurationMessagePolicy policyWithOperationTypes:](HMDConfigurationMessagePolicy, "policyWithOperationTypes:", 7);
  v64 = (void *)objc_claimAutoreleasedReturnValue();
  v501[1] = v64;
  objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", v501, 2);
  v65 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v62, "registerForMessage:receiver:policies:selector:", CFSTR("kSetAppDataRequestKey"), self, v65, sel__handleSetAppData_);

  -[HMDHome administratorHandler](self, "administratorHandler");
  v66 = (void *)objc_claimAutoreleasedReturnValue();
  +[HMDXPCMessagePolicy policyWithEntitlements:](HMDXPCMessagePolicy, "policyWithEntitlements:", 5);
  v67 = (void *)objc_claimAutoreleasedReturnValue();
  v500[0] = v67;
  +[HMDConfigurationMessagePolicy policyWithOperationTypes:](HMDConfigurationMessagePolicy, "policyWithOperationTypes:", 2);
  v68 = (void *)objc_claimAutoreleasedReturnValue();
  v500[1] = v68;
  objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", v500, 2);
  v69 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v66, "registerForMessage:receiver:policies:selector:", *MEMORY[0x24BDD6398], self, v69, sel__handleUpdateMinimumMediaUserPrivilege_);

  -[HMDHome administratorHandler](self, "administratorHandler");
  v70 = (void *)objc_claimAutoreleasedReturnValue();
  +[HMDXPCMessagePolicy policyWithEntitlements:](HMDXPCMessagePolicy, "policyWithEntitlements:", 5);
  v71 = (void *)objc_claimAutoreleasedReturnValue();
  v499[0] = v71;
  +[HMDConfigurationMessagePolicy policyWithOperationTypes:](HMDConfigurationMessagePolicy, "policyWithOperationTypes:", 2);
  v72 = (void *)objc_claimAutoreleasedReturnValue();
  v499[1] = v72;
  objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", v499, 2);
  v73 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v70, "registerForMessage:receiver:policies:selector:", *MEMORY[0x24BDD6390], self, v73, sel__handleUpdateMediaPeerToPeerEnabled_);

  -[HMDHome administratorHandler](self, "administratorHandler");
  v74 = (void *)objc_claimAutoreleasedReturnValue();
  +[HMDXPCMessagePolicy policyWithEntitlements:](HMDXPCMessagePolicy, "policyWithEntitlements:", 5);
  v75 = (void *)objc_claimAutoreleasedReturnValue();
  v498[0] = v75;
  +[HMDConfigurationMessagePolicy policyWithOperationTypes:](HMDConfigurationMessagePolicy, "policyWithOperationTypes:", 2);
  v76 = (void *)objc_claimAutoreleasedReturnValue();
  v498[1] = v76;
  objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", v498, 2);
  v77 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v74, "registerForMessage:receiver:policies:selector:", *MEMORY[0x24BDD6388], self, v77, sel__handleUpdateMediaPassword_);

  -[HMDHome administratorHandler](self, "administratorHandler");
  v78 = (void *)objc_claimAutoreleasedReturnValue();
  +[HMDXPCMessagePolicy policyWithEntitlements:](HMDXPCMessagePolicy, "policyWithEntitlements:", 5);
  v79 = (void *)objc_claimAutoreleasedReturnValue();
  v497[0] = v79;
  +[HMDConfigurationMessagePolicy policyWithOperationTypes:](HMDConfigurationMessagePolicy, "policyWithOperationTypes:", 2);
  v80 = (void *)objc_claimAutoreleasedReturnValue();
  v497[1] = v80;
  objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", v497, 2);
  v81 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v78, "registerForMessage:receiver:policies:selector:", *MEMORY[0x24BDD62A8], self, v81, sel__handleSetHasAnyUserAcknowledgedCameraRecordingOnboardingRequest_);

  -[HMDHome administratorHandler](self, "administratorHandler");
  v82 = (void *)objc_claimAutoreleasedReturnValue();
  +[HMDXPCMessagePolicy policyWithEntitlements:](HMDXPCMessagePolicy, "policyWithEntitlements:", 5);
  v83 = (void *)objc_claimAutoreleasedReturnValue();
  v496[0] = v83;
  +[HMDConfigurationMessagePolicy policyWithOperationTypes:](HMDConfigurationMessagePolicy, "policyWithOperationTypes:", 2);
  v84 = (void *)objc_claimAutoreleasedReturnValue();
  v496[1] = v84;
  objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", v496, 2);
  v85 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v82, "registerForMessage:receiver:policies:selector:", *MEMORY[0x24BDD62B0], self, v85, sel__handleSetHasOnboardedForAccessCodeMessage_);

  -[HMDHome administratorHandler](self, "administratorHandler");
  v86 = (void *)objc_claimAutoreleasedReturnValue();
  +[HMDXPCMessagePolicy policyWithEntitlements:](HMDXPCMessagePolicy, "policyWithEntitlements:", 131077);
  v87 = (void *)objc_claimAutoreleasedReturnValue();
  v495[0] = v87;
  +[HMDConfigurationMessagePolicy policyWithOperationTypes:](HMDConfigurationMessagePolicy, "policyWithOperationTypes:", 2);
  v88 = (void *)objc_claimAutoreleasedReturnValue();
  v495[1] = v88;
  objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", v495, 2);
  v89 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v86, "registerForMessage:receiver:policies:selector:", *MEMORY[0x24BDD62B8], self, v89, sel__handleSetHasOnboardedForWalletKeyMessage_);

  -[HMDHome administratorHandler](self, "administratorHandler");
  v90 = (void *)objc_claimAutoreleasedReturnValue();
  +[HMDXPCMessagePolicy policyWithEntitlements:](HMDXPCMessagePolicy, "policyWithEntitlements:", 5);
  v91 = (void *)objc_claimAutoreleasedReturnValue();
  v494[0] = v91;
  +[HMDConfigurationMessagePolicy policyWithOperationTypes:](HMDConfigurationMessagePolicy, "policyWithOperationTypes:", 2);
  v92 = (void *)objc_claimAutoreleasedReturnValue();
  v494[1] = v92;
  objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", v494, 2);
  v93 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v90, "registerForMessage:receiver:policies:selector:", *MEMORY[0x24BDD63A0], self, v93, sel__handleUpdateNetworkProtection_);

  -[HMDHome administratorHandler](self, "administratorHandler");
  v94 = (void *)objc_claimAutoreleasedReturnValue();
  +[HMDXPCMessagePolicy policyWithEntitlements:](HMDXPCMessagePolicy, "policyWithEntitlements:", 5);
  v95 = (void *)objc_claimAutoreleasedReturnValue();
  v493[0] = v95;
  +[HMDConfigurationMessagePolicy policyWithOperationTypes:](HMDConfigurationMessagePolicy, "policyWithOperationTypes:", 2);
  v96 = (void *)objc_claimAutoreleasedReturnValue();
  v493[1] = v96;
  objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", v493, 2);
  v97 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v94, "registerForMessage:receiver:policies:selector:", *MEMORY[0x24BDD63B0], self, v97, sel__handleUpdateUserAnnounceAccess_);

  -[HMDHome administratorHandler](self, "administratorHandler");
  v98 = (void *)objc_claimAutoreleasedReturnValue();
  +[HMDXPCMessagePolicy policyWithEntitlements:](HMDXPCMessagePolicy, "policyWithEntitlements:", 5);
  v99 = (void *)objc_claimAutoreleasedReturnValue();
  v492[0] = v99;
  +[HMDConfigurationMessagePolicy policyWithOperationTypes:](HMDConfigurationMessagePolicy, "policyWithOperationTypes:", 2);
  v100 = (void *)objc_claimAutoreleasedReturnValue();
  v492[1] = v100;
  objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", v492, 2);
  v101 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v98, "registerForMessage:receiver:policies:selector:", *MEMORY[0x24BDD5C90], self, v101, sel__handleUpdateAudioAnalysisAccess_);

  -[HMDHome administratorHandler](self, "administratorHandler");
  v102 = (void *)objc_claimAutoreleasedReturnValue();
  +[HMDXPCMessagePolicy policyWithEntitlements:](HMDXPCMessagePolicy, "policyWithEntitlements:", 5);
  v103 = (void *)objc_claimAutoreleasedReturnValue();
  v491[0] = v103;
  +[HMDConfigurationMessagePolicy policyWithOperationTypes:](HMDConfigurationMessagePolicy, "policyWithOperationTypes:", 2);
  v104 = (void *)objc_claimAutoreleasedReturnValue();
  v491[1] = v104;
  objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", v491, 2);
  v105 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v102, "registerForMessage:receiver:policies:selector:", *MEMORY[0x24BDD6288], self, v105, sel__handleResolveThreadNetworkRequest_);

  if (-[HMDHome isOwnerUser](self, "isOwnerUser"))
  {
    -[HMDHome administratorHandler](self, "administratorHandler");
    v106 = (void *)objc_claimAutoreleasedReturnValue();
    +[HMDXPCMessagePolicy policyWithEntitlements:](HMDXPCMessagePolicy, "policyWithEntitlements:", 5);
    v107 = (void *)objc_claimAutoreleasedReturnValue();
    v490[0] = v107;
    +[HMDConfigurationMessagePolicy policyWithOperationTypes:](HMDConfigurationMessagePolicy, "policyWithOperationTypes:", 2);
    v108 = (void *)objc_claimAutoreleasedReturnValue();
    v490[1] = v108;
    v490[2] = v403;
    objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", v490, 3);
    v109 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v106, "registerForMessage:receiver:policies:selector:", *MEMORY[0x24BDD6CE0], self, v109, sel__handleOwnerSettingsUpdate_);
  }
  else
  {
    -[HMDHome msgDispatcher](self, "msgDispatcher");
    v106 = (void *)objc_claimAutoreleasedReturnValue();
    +[HMDXPCMessagePolicy policyWithEntitlements:](HMDXPCMessagePolicy, "policyWithEntitlements:", 5);
    v107 = (void *)objc_claimAutoreleasedReturnValue();
    v489[0] = v107;
    +[HMDConfigurationMessagePolicy policyWithOperationTypes:](HMDConfigurationMessagePolicy, "policyWithOperationTypes:", 2);
    v108 = (void *)objc_claimAutoreleasedReturnValue();
    v489[1] = v108;
    v489[2] = v400;
    objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", v489, 3);
    v109 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v106, "registerForMessage:receiver:policies:selector:", *MEMORY[0x24BDD6CE0], self, v109, sel__handleSharedUserSettingsUpdate_);
  }

  -[HMDHome administratorHandler](self, "administratorHandler");
  v110 = (void *)objc_claimAutoreleasedReturnValue();
  +[HMDXPCMessagePolicy policyWithEntitlements:](HMDXPCMessagePolicy, "policyWithEntitlements:", 5);
  v111 = (void *)objc_claimAutoreleasedReturnValue();
  v488[0] = v111;
  +[HMDConfigurationMessagePolicy policyWithOperationTypes:](HMDConfigurationMessagePolicy, "policyWithOperationTypes:", 2);
  v112 = (void *)objc_claimAutoreleasedReturnValue();
  v488[1] = v112;
  objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", v488, 2);
  v113 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v110, "registerForMessage:receiver:policies:selector:", *MEMORY[0x24BDD5C80], self, v113, sel__handleAudioAnalysisClassifierOptionsUpdateRequest_);

  -[HMDHome administratorHandler](self, "administratorHandler");
  v114 = (void *)objc_claimAutoreleasedReturnValue();
  +[HMDXPCMessagePolicy policyWithEntitlements:](HMDXPCMessagePolicy, "policyWithEntitlements:", 5);
  v115 = (void *)objc_claimAutoreleasedReturnValue();
  v487[0] = v115;
  +[HMDConfigurationMessagePolicy policyWithOperationTypes:](HMDConfigurationMessagePolicy, "policyWithOperationTypes:", 2);
  v116 = (void *)objc_claimAutoreleasedReturnValue();
  v487[1] = v116;
  objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", v487, 2);
  v117 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v114, "registerForMessage:receiver:policies:selector:", *MEMORY[0x24BDD5CA0], self, v117, sel__handleAudioAnalysisOnboardingUpdateRequest_);

  -[HMDHome administratorHandler](self, "administratorHandler");
  v118 = (void *)objc_claimAutoreleasedReturnValue();
  +[HMDXPCMessagePolicy policyWithEntitlements:](HMDXPCMessagePolicy, "policyWithEntitlements:", 5);
  v119 = (void *)objc_claimAutoreleasedReturnValue();
  v486[0] = v119;
  +[HMDConfigurationMessagePolicy policyWithOperationTypes:](HMDConfigurationMessagePolicy, "policyWithOperationTypes:", 2);
  v120 = (void *)objc_claimAutoreleasedReturnValue();
  v486[1] = v120;
  objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", v486, 2);
  v121 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v118, "registerForMessage:receiver:policies:selector:", *MEMORY[0x24BDD6310], self, v121, sel__handleSiriPhraseOptionsUpdateRequest_);

  -[HMDHome administratorHandler](self, "administratorHandler");
  v122 = (void *)objc_claimAutoreleasedReturnValue();
  +[HMDXPCMessagePolicy policyWithEntitlements:](HMDXPCMessagePolicy, "policyWithEntitlements:", 5);
  v123 = (void *)objc_claimAutoreleasedReturnValue();
  v485[0] = v123;
  +[HMDConfigurationMessagePolicy policyWithOperationTypes:](HMDConfigurationMessagePolicy, "policyWithOperationTypes:", 2);
  v124 = (void *)objc_claimAutoreleasedReturnValue();
  v485[1] = v124;
  objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", v485, 2);
  v125 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v122, "registerForMessage:receiver:policies:selector:", *MEMORY[0x24BDD62F8], self, v125, sel__handleSoundCheckUpdateRequest_);

  -[HMDHome administratorHandler](self, "administratorHandler");
  v126 = (void *)objc_claimAutoreleasedReturnValue();
  +[HMDXPCMessagePolicy policyWithEntitlements:](HMDXPCMessagePolicy, "policyWithEntitlements:", 5);
  v127 = (void *)objc_claimAutoreleasedReturnValue();
  v484[0] = v127;
  +[HMDConfigurationMessagePolicy policyWithOperationTypes:](HMDConfigurationMessagePolicy, "policyWithOperationTypes:", 2);
  v128 = (void *)objc_claimAutoreleasedReturnValue();
  v484[1] = v128;
  objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", v484, 2);
  v129 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v126, "registerForMessage:receiver:policies:selector:", *MEMORY[0x24BDD6380], self, v129, sel__handleHomeUpdateLocationServicesEnabledRequest_);

  if (isInternalBuild())
  {
    -[HMDHome administratorHandler](self, "administratorHandler");
    v130 = (void *)objc_claimAutoreleasedReturnValue();
    +[HMDXPCMessagePolicy policyWithEntitlements:](HMDXPCMessagePolicy, "policyWithEntitlements:", 5);
    v131 = (void *)objc_claimAutoreleasedReturnValue();
    v483[0] = v131;
    +[HMDConfigurationMessagePolicy policyWithOperationTypes:](HMDConfigurationMessagePolicy, "policyWithOperationTypes:", 2);
    v132 = (void *)objc_claimAutoreleasedReturnValue();
    v483[1] = v132;
    objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", v483, 2);
    v133 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v130, "registerForMessage:receiver:policies:selector:", *MEMORY[0x24BDD6378], self, v133, sel__handleHomeUpdateDidOnboardLocationServicesRequest_);

  }
  if (!isWatch())
  {
    -[HMDHome administratorHandler](self, "administratorHandler");
    v134 = (void *)objc_claimAutoreleasedReturnValue();
    +[HMDXPCMessagePolicy policyWithEntitlements:](HMDXPCMessagePolicy, "policyWithEntitlements:", 5);
    v135 = (void *)objc_claimAutoreleasedReturnValue();
    v482[0] = v135;
    +[HMDConfigurationMessagePolicy policyWithOperationTypes:](HMDConfigurationMessagePolicy, "policyWithOperationTypes:", 6);
    v136 = (void *)objc_claimAutoreleasedReturnValue();
    v482[1] = v136;
    objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", v482, 2);
    v137 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v134, "registerForMessage:receiver:policies:selector:", CFSTR("kUpdateInvitationStateRequestKey"), self, v137, sel__handleUpdateOutgoingInvitationState_);

  }
  +[HMDRemoteMessagePolicy defaultSecurePolicy](HMDMutableRemoteMessagePolicy, "defaultSecurePolicy");
  v138 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v138, "setRoles:", objc_msgSend(v138, "roles") | 4);
  v139 = (void *)objc_msgSend(v138, "copy");
  +[HMDUserMessagePolicy userMessagePolicyWithHome:userPrivilege:remoteAccessRequired:](HMDUserMessagePolicy, "userMessagePolicyWithHome:userPrivilege:remoteAccessRequired:", self, 4, 0);
  v140 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHome administratorHandler](self, "administratorHandler");
  v398 = (void *)objc_claimAutoreleasedReturnValue();
  +[HMDXPCMessagePolicy policyWithEntitlements:](HMDXPCMessagePolicy, "policyWithEntitlements:", 1);
  v141 = (void *)objc_claimAutoreleasedReturnValue();
  v481[0] = v141;
  v481[1] = v140;
  +[HMDConfigurationMessagePolicy policyWithOperationTypes:](HMDConfigurationMessagePolicy, "policyWithOperationTypes:", 1);
  v142 = (void *)objc_claimAutoreleasedReturnValue();
  v481[2] = v142;
  objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", v481, 3);
  v143 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v398, "registerForMessage:receiver:policies:selector:", CFSTR("kAddEventTriggerRequestKey"), self, v143, sel__handleAddEventTrigger_);

  +[HMDXPCMessagePolicy policyWithEntitlements:](HMDXPCMessagePolicy, "policyWithEntitlements:", 1);
  v144 = (void *)objc_claimAutoreleasedReturnValue();
  v480[0] = v144;
  v480[1] = v140;
  +[HMDConfigurationMessagePolicy policyWithOperationTypes:](HMDConfigurationMessagePolicy, "policyWithOperationTypes:", 1);
  v145 = (void *)objc_claimAutoreleasedReturnValue();
  v480[2] = v145;
  objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", v480, 3);
  v146 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v398, "registerForMessage:receiver:policies:selector:", CFSTR("kAddTimerTriggerRequestKey"), self, v146, sel__handleAddTimerTrigger_);

  -[HMDHome administratorHandler](self, "administratorHandler");
  v147 = (void *)objc_claimAutoreleasedReturnValue();
  +[HMDXPCMessagePolicy policyWithEntitlements:](HMDXPCMessagePolicy, "policyWithEntitlements:", 5);
  v148 = (void *)objc_claimAutoreleasedReturnValue();
  v479[0] = v148;
  +[HMDConfigurationMessagePolicy policyWithOperationTypes:](HMDConfigurationMessagePolicy, "policyWithOperationTypes:", 1);
  v149 = (void *)objc_claimAutoreleasedReturnValue();
  v479[1] = v149;
  objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", v479, 2);
  v150 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v147, "registerForMessage:receiver:policies:selector:", *MEMORY[0x24BDD5258], self, v150, sel__handleAddEventTrigger_);

  -[HMDHome administratorHandler](self, "administratorHandler");
  v151 = (void *)objc_claimAutoreleasedReturnValue();
  +[HMDXPCMessagePolicy policyWithEntitlements:](HMDXPCMessagePolicy, "policyWithEntitlements:", 5);
  v152 = (void *)objc_claimAutoreleasedReturnValue();
  v478[0] = v152;
  +[HMDConfigurationMessagePolicy policyWithOperationTypes:](HMDConfigurationMessagePolicy, "policyWithOperationTypes:", 1);
  v153 = (void *)objc_claimAutoreleasedReturnValue();
  v478[1] = v153;
  objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", v478, 2);
  v154 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v151, "registerForMessage:receiver:policies:selector:", *MEMORY[0x24BDD5260], self, v154, sel__handleAddTimerTrigger_);

  objc_msgSend(MEMORY[0x24BE3F260], "productInfo");
  v155 = (void *)objc_claimAutoreleasedReturnValue();
  LODWORD(v153) = objc_msgSend(v155, "productPlatform") == 1;

  if ((_DWORD)v153)
    v156 = 5;
  else
    v156 = 1;
  -[HMDHome msgDispatcher](self, "msgDispatcher");
  v157 = (void *)objc_claimAutoreleasedReturnValue();
  +[HMDXPCMessagePolicy policyWithEntitlements:](HMDXPCMessagePolicy, "policyWithEntitlements:", v156);
  v158 = (void *)objc_claimAutoreleasedReturnValue();
  v477[0] = v158;
  +[HMDConfigurationMessagePolicy policyWithOperationTypes:](HMDConfigurationMessagePolicy, "policyWithOperationTypes:", 1);
  v159 = (void *)objc_claimAutoreleasedReturnValue();
  v477[1] = v159;
  objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", v477, 2);
  v160 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v157, "registerForMessage:receiver:policies:selector:", CFSTR("kAddAccessoryRequestKey"), self, v160, sel__handleAddAccessory_);

  -[HMDHome msgDispatcher](self, "msgDispatcher");
  v161 = (void *)objc_claimAutoreleasedReturnValue();
  v476[0] = v139;
  v476[1] = v140;
  +[HMDConfigurationMessagePolicy policyWithOperationTypes:](HMDConfigurationMessagePolicy, "policyWithOperationTypes:", 1);
  v162 = (void *)objc_claimAutoreleasedReturnValue();
  v476[2] = v162;
  objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", v476, 3);
  v163 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v161, "registerForMessage:receiver:policies:selector:", CFSTR("HMDRemoteAddHAPAccessoriesMessage"), self, v163, sel__handleRemoteAddHAPAccessories_);

  -[HMDHome msgDispatcher](self, "msgDispatcher");
  v164 = (void *)objc_claimAutoreleasedReturnValue();
  v475[0] = v139;
  v475[1] = v140;
  +[HMDConfigurationMessagePolicy policyWithOperationTypes:](HMDConfigurationMessagePolicy, "policyWithOperationTypes:", 1);
  v165 = (void *)objc_claimAutoreleasedReturnValue();
  v475[2] = v165;
  objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", v475, 3);
  v166 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v164, "registerForMessage:receiver:policies:selector:", CFSTR("HMDRemoteAddMediaAccessoryMessage"), self, v166, sel__handleRemoteAddMediaAccessory_);

  -[HMDHome msgDispatcher](self, "msgDispatcher");
  v167 = (void *)objc_claimAutoreleasedReturnValue();
  v474[0] = v139;
  v474[1] = v140;
  +[HMDConfigurationMessagePolicy policyWithOperationTypes:](HMDConfigurationMessagePolicy, "policyWithOperationTypes:", 1);
  v168 = (void *)objc_claimAutoreleasedReturnValue();
  v474[2] = v168;
  objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", v474, 3);
  v169 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v167, "registerForMessage:receiver:policies:selector:", CFSTR("HMDRemoteAddMediaAccessoryRequestMessage"), self, v169, sel__handleRemoteAddMediaAccessoryRequest_);

  -[HMDHome administratorHandler](self, "administratorHandler");
  v170 = (void *)objc_claimAutoreleasedReturnValue();
  +[HMDXPCMessagePolicy policyWithEntitlements:](HMDXPCMessagePolicy, "policyWithEntitlements:", 5);
  v171 = (void *)objc_claimAutoreleasedReturnValue();
  v473[0] = v171;
  v473[1] = v139;
  v473[2] = v140;
  +[HMDConfigurationMessagePolicy policyWithOperationTypes:](HMDConfigurationMessagePolicy, "policyWithOperationTypes:", 1);
  v172 = (void *)objc_claimAutoreleasedReturnValue();
  v473[3] = v172;
  objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", v473, 4);
  v173 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v170, "registerForMessage:receiver:policies:selector:", *MEMORY[0x24BDD6FF8], self, v173, sel__handleUpdateRestrictedGuestSettings_);

  -[HMDHome msgDispatcher](self, "msgDispatcher");
  v174 = (void *)objc_claimAutoreleasedReturnValue();
  +[HMDXPCMessagePolicy policyWithEntitlements:](HMDXPCMessagePolicy, "policyWithEntitlements:", 5);
  v175 = (void *)objc_claimAutoreleasedReturnValue();
  v472 = v175;
  objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", &v472, 1);
  v176 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v174, "registerForMessage:receiver:policies:selector:", *MEMORY[0x24BDD62A0], self, v176, sel__handleSetDismissedUWBOnboarding_);

  -[HMDHome msgDispatcher](self, "msgDispatcher");
  v177 = (void *)objc_claimAutoreleasedReturnValue();
  +[HMDXPCMessagePolicy policyWithEntitlements:](HMDXPCMessagePolicy, "policyWithEntitlements:", 5);
  v178 = (void *)objc_claimAutoreleasedReturnValue();
  v471[0] = v178;
  v471[1] = v140;
  objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", v471, 2);
  v179 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v177, "registerForMessage:receiver:policies:selector:", *MEMORY[0x24BDD63C8], self, v179, sel__handleUserConsentResponseForAccessory_);

  -[HMDHome msgDispatcher](self, "msgDispatcher");
  v180 = (void *)objc_claimAutoreleasedReturnValue();
  +[HMDXPCMessagePolicy policyWithEntitlements:](HMDXPCMessagePolicy, "policyWithEntitlements:", 5);
  v181 = (void *)objc_claimAutoreleasedReturnValue();
  v470[0] = v181;
  v470[1] = v140;
  objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", v470, 2);
  v182 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v180, "registerForMessage:receiver:policies:selector:", CFSTR("kContinuePairingAccessoryRequestKey"), self, v182, sel__handleContinuePairingAccessory_);

  -[HMDHome msgDispatcher](self, "msgDispatcher");
  v183 = (void *)objc_claimAutoreleasedReturnValue();
  +[HMDXPCMessagePolicy policyWithEntitlements:](HMDXPCMessagePolicy, "policyWithEntitlements:", 5);
  v184 = (void *)objc_claimAutoreleasedReturnValue();
  v469[0] = v184;
  v469[1] = v140;
  objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", v469, 2);
  v185 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v183, "registerForMessage:receiver:policies:selector:", CFSTR("kCancelPairingAccessoryRequestKey"), self, v185, sel__handleCancelPairingAccessory_);

  -[HMDHome msgDispatcher](self, "msgDispatcher");
  v186 = (void *)objc_claimAutoreleasedReturnValue();
  +[HMDXPCMessagePolicy policyWithEntitlements:](HMDXPCMessagePolicy, "policyWithEntitlements:", 1);
  v187 = (void *)objc_claimAutoreleasedReturnValue();
  v468[0] = v187;
  v468[1] = v139;
  v468[2] = v140;
  +[HMDConfigurationMessagePolicy policyWithOperationTypes:](HMDConfigurationMessagePolicy, "policyWithOperationTypes:", 4);
  v188 = (void *)objc_claimAutoreleasedReturnValue();
  v468[3] = v188;
  objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", v468, 4);
  v189 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v186, "registerForMessage:receiver:policies:selector:", CFSTR("kRemoveAccessoryRequestKey"), self, v189, sel__handleRemoveAccessoryMessage_);

  -[HMDHome administratorHandler](self, "administratorHandler");
  v190 = (void *)objc_claimAutoreleasedReturnValue();
  +[HMDXPCMessagePolicy policyWithEntitlements:](HMDXPCMessagePolicy, "policyWithEntitlements:", 5);
  v191 = (void *)objc_claimAutoreleasedReturnValue();
  v467[0] = v191;
  v467[1] = v139;
  v467[2] = v140;
  +[HMDConfigurationMessagePolicy policyWithOperationTypes:](HMDConfigurationMessagePolicy, "policyWithOperationTypes:", 4);
  v192 = (void *)objc_claimAutoreleasedReturnValue();
  v467[3] = v192;
  objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", v467, 4);
  v193 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v190, "registerForMessage:receiver:policies:selector:", *MEMORY[0x24BDD6270], self, v193, sel_handleResetAndRemoveAllCHIPPairingsFromAccessoryMessage_);

  -[HMDHome administratorHandler](self, "administratorHandler");
  v194 = (void *)objc_claimAutoreleasedReturnValue();
  +[HMDXPCMessagePolicy policyWithEntitlements:](HMDXPCMessagePolicy, "policyWithEntitlements:", 5);
  v195 = (void *)objc_claimAutoreleasedReturnValue();
  v466[0] = v195;
  v466[1] = v139;
  v466[2] = v140;
  +[HMDConfigurationMessagePolicy policyWithOperationTypes:](HMDConfigurationMessagePolicy, "policyWithOperationTypes:", 2);
  v196 = (void *)objc_claimAutoreleasedReturnValue();
  v466[3] = v196;
  objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", v466, 4);
  v197 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v194, "registerForMessage:receiver:policies:selector:", CFSTR("HMDHomeRemoteUpdateCHIPKeyValueStoreMessage"), self, v197, sel_handleRemoteUpdateCHIPKeyValueStoreMessage_);

  -[HMDHome msgDispatcher](self, "msgDispatcher");
  v198 = (void *)objc_claimAutoreleasedReturnValue();
  v465[0] = v139;
  v465[1] = v401;
  objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", v465, 2);
  v199 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v198, "registerForMessage:receiver:policies:selector:", CFSTR("HMDHomeRequestCommissioningCertificatesMessage"), self, v199, sel_handleCommissioningCertificateRequest_);

  -[HMDHome msgDispatcher](self, "msgDispatcher");
  v200 = (void *)objc_claimAutoreleasedReturnValue();
  v464[0] = v139;
  v464[1] = v140;
  objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", v464, 2);
  v201 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v200, "registerForMessage:receiver:policies:selector:", CFSTR("HMDHomeNotificationPairingCompletionMessage"), self, v201, sel_handleMatterPairingCompletionNotification_);

  -[HMDHome msgDispatcher](self, "msgDispatcher");
  v202 = (void *)objc_claimAutoreleasedReturnValue();
  +[HMDXPCMessagePolicy policyWithEntitlements:](HMDXPCMessagePolicy, "policyWithEntitlements:", 5);
  v203 = (void *)objc_claimAutoreleasedReturnValue();
  v463[0] = v203;
  v463[1] = v140;
  +[HMDConfigurationMessagePolicy policyWithOperationTypes:](HMDConfigurationMessagePolicy, "policyWithOperationTypes:", 1);
  v204 = (void *)objc_claimAutoreleasedReturnValue();
  v463[2] = v204;
  objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", v463, 3);
  v205 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v202, "registerForMessage:receiver:policies:selector:", CFSTR("kInviteUsersRequestKey"), self, v205, sel__handleUserInvitations_);

  -[HMDHome administratorHandler](self, "administratorHandler");
  v206 = (void *)objc_claimAutoreleasedReturnValue();
  +[HMDXPCMessagePolicy policyWithEntitlements:](HMDXPCMessagePolicy, "policyWithEntitlements:", 5);
  v207 = (void *)objc_claimAutoreleasedReturnValue();
  v462[0] = v207;
  +[HMDConfigurationMessagePolicy policyWithOperationTypes:](HMDConfigurationMessagePolicy, "policyWithOperationTypes:", 2);
  v208 = (void *)objc_claimAutoreleasedReturnValue();
  v462[1] = v208;
  v462[2] = v401;
  v462[3] = v139;
  objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", v462, 4);
  v209 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v206, "registerForMessage:receiver:policies:selector:", *MEMORY[0x24BDD5CF8], self, v209, sel__handleEnableMultiUserRequest_);

  -[HMDHome localCapabilitiesDataSource](self, "localCapabilitiesDataSource");
  v210 = (void *)objc_claimAutoreleasedReturnValue();
  LODWORD(v209) = objc_msgSend(v210, "isResidentCapable");

  if ((_DWORD)v209)
  {
    -[HMDHome msgDispatcher](self, "msgDispatcher");
    v211 = (void *)objc_claimAutoreleasedReturnValue();
    v461[0] = v139;
    v461[1] = v140;
    +[HMDConfigurationMessagePolicy policyWithOperationTypes:](HMDConfigurationMessagePolicy, "policyWithOperationTypes:", 1);
    v212 = (void *)objc_claimAutoreleasedReturnValue();
    v461[2] = v212;
    objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", v461, 3);
    v213 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v211, "registerForMessage:receiver:policies:selector:", CFSTR("kAddHomeInvitesInternalRequestKey"), self, v213, sel__handleOutgoingInvitations_);

    -[HMDHome msgDispatcher](self, "msgDispatcher");
    v214 = (void *)objc_claimAutoreleasedReturnValue();
    v460[0] = v139;
    v460[1] = v140;
    objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", v460, 2);
    v215 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v214, "registerForMessage:receiver:policies:selector:", CFSTR("HMDHomeCreateUniquePSKClientConfigurationRequestKey"), self, v215, sel__handleCreateUniquePSKClientConfiguration_);

    -[HMDHome msgDispatcher](self, "msgDispatcher");
    v216 = (void *)objc_claimAutoreleasedReturnValue();
    v459[0] = v139;
    v459[1] = v140;
    objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", v459, 2);
    v217 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v216, "registerForMessage:receiver:policies:selector:", CFSTR("HMDHomeRemoveClientConfigurationRequestKey"), self, v217, sel__handleRemoveClientConfiguration_);

  }
  isWatch();
  -[HMDHome msgDispatcher](self, "msgDispatcher");
  v218 = (void *)objc_claimAutoreleasedReturnValue();
  +[HMDRemoteMessagePolicy defaultSecurePolicy](HMDRemoteMessagePolicy, "defaultSecurePolicy");
  v219 = (void *)objc_claimAutoreleasedReturnValue();
  v458[0] = v219;
  v458[1] = v140;
  +[HMDConfigurationMessagePolicy policyWithOperationTypes:](HMDConfigurationMessagePolicy, "policyWithOperationTypes:", 2);
  v220 = (void *)objc_claimAutoreleasedReturnValue();
  v458[2] = v220;
  objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", v458, 3);
  v221 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v218, "registerForMessage:receiver:policies:selector:", CFSTR("kHomeLocationUpdatedNotificationKey"), self, v221, sel__handleHomeLocationUpdateFromSharedAdmin_);

  if (isInternalBuild())
  {
    -[HMDHome msgDispatcher](self, "msgDispatcher");
    v222 = (void *)objc_claimAutoreleasedReturnValue();
    +[HMDXPCMessagePolicy policyWithEntitlements:](HMDXPCMessagePolicy, "policyWithEntitlements:", 5);
    v223 = (void *)objc_claimAutoreleasedReturnValue();
    v457[0] = v223;
    +[HMDConfigurationMessagePolicy policyWithOperationTypes:](HMDConfigurationMessagePolicy, "policyWithOperationTypes:", 2);
    v224 = (void *)objc_claimAutoreleasedReturnValue();
    v457[1] = v224;
    objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", v457, 2);
    v225 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v222, "registerForMessage:receiver:policies:selector:", *MEMORY[0x24BDD5DE0], self, v225, sel__handleSetMinimumNetworkRouterHomeKitVersion_);

    -[HMDHome msgDispatcher](self, "msgDispatcher");
    v226 = (void *)objc_claimAutoreleasedReturnValue();
    +[HMDXPCMessagePolicy policyWithEntitlements:](HMDXPCMessagePolicy, "policyWithEntitlements:", 5);
    v227 = (void *)objc_claimAutoreleasedReturnValue();
    v456[0] = v227;
    +[HMDConfigurationMessagePolicy policyWithOperationTypes:](HMDConfigurationMessagePolicy, "policyWithOperationTypes:", 2);
    v228 = (void *)objc_claimAutoreleasedReturnValue();
    v456[1] = v228;
    objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", v456, 2);
    v229 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v226, "registerForMessage:receiver:policies:selector:", *MEMORY[0x24BDD5DD8], self, v229, sel__handleSetMinHomeKitVersionForAccessoryNetworkProtectionChange_);

  }
  if (isInternalBuild() && isiOSDevice())
  {
    -[HMDHome msgDispatcher](self, "msgDispatcher");
    v230 = (void *)objc_claimAutoreleasedReturnValue();
    +[HMDXPCMessagePolicy policyWithEntitlements:](HMDXPCMessagePolicy, "policyWithEntitlements:", 1049605);
    v231 = (void *)objc_claimAutoreleasedReturnValue();
    v455[0] = v231;
    +[HMDConfigurationMessagePolicy policyWithOperationTypes:](HMDConfigurationMessagePolicy, "policyWithOperationTypes:", 2);
    v232 = (void *)objc_claimAutoreleasedReturnValue();
    v455[1] = v232;
    objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", v455, 2);
    v233 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v230, "registerForMessage:receiver:policies:selector:", *MEMORY[0x24BDD6298], self, v233, sel__handleRetrieveHomeLocationForFeedback_);

  }
  -[HMDHome administratorHandler](self, "administratorHandler");
  v234 = (void *)objc_claimAutoreleasedReturnValue();
  +[HMDXPCMessagePolicy policyWithEntitlements:](HMDXPCMessagePolicy, "policyWithEntitlements:", 5);
  v235 = (void *)objc_claimAutoreleasedReturnValue();
  v454[0] = v235;
  +[HMDConfigurationMessagePolicy policyWithOperationTypes:](HMDConfigurationMessagePolicy, "policyWithOperationTypes:", 2);
  v236 = (void *)objc_claimAutoreleasedReturnValue();
  v454[1] = v236;
  v454[2] = v140;
  objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", v454, 3);
  v237 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v234, "registerForMessage:receiver:policies:selector:", *MEMORY[0x24BDD5D28], self, v237, sel__handleEventLogSetDidOnboard_);

  -[HMDHome administratorHandler](self, "administratorHandler");
  v238 = (void *)objc_claimAutoreleasedReturnValue();
  +[HMDXPCMessagePolicy policyWithEntitlements:](HMDXPCMessagePolicy, "policyWithEntitlements:", 5);
  v239 = (void *)objc_claimAutoreleasedReturnValue();
  v453[0] = v239;
  +[HMDConfigurationMessagePolicy policyWithOperationTypes:](HMDConfigurationMessagePolicy, "policyWithOperationTypes:", 2);
  v240 = (void *)objc_claimAutoreleasedReturnValue();
  v453[1] = v240;
  v453[2] = v140;
  objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", v453, 3);
  v241 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v238, "registerForMessage:receiver:policies:selector:", *MEMORY[0x24BDD5D38], self, v241, sel__handleEventLogSetEnabledMessage_);

  -[HMDHome administratorHandler](self, "administratorHandler");
  v242 = (void *)objc_claimAutoreleasedReturnValue();
  +[HMDXPCMessagePolicy policyWithEntitlements:](HMDXPCMessagePolicy, "policyWithEntitlements:", 5);
  v243 = (void *)objc_claimAutoreleasedReturnValue();
  v452[0] = v243;
  +[HMDConfigurationMessagePolicy policyWithOperationTypes:](HMDConfigurationMessagePolicy, "policyWithOperationTypes:", 2);
  v244 = (void *)objc_claimAutoreleasedReturnValue();
  v452[1] = v244;
  v452[2] = v140;
  objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", v452, 3);
  v245 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v242, "registerForMessage:receiver:policies:selector:", *MEMORY[0x24BDD5D30], self, v245, sel__handleEventLogSetDurationMessage_);

  -[HMDHome administratorHandler](self, "administratorHandler");
  v246 = (void *)objc_claimAutoreleasedReturnValue();
  +[HMDXPCMessagePolicy policyWithEntitlements:](HMDXPCMessagePolicy, "policyWithEntitlements:", 5);
  v247 = (void *)objc_claimAutoreleasedReturnValue();
  v451[0] = v247;
  +[HMDConfigurationMessagePolicy policyWithOperationTypes:](HMDConfigurationMessagePolicy, "policyWithOperationTypes:", 4);
  v248 = (void *)objc_claimAutoreleasedReturnValue();
  v451[1] = v248;
  v451[2] = v140;
  objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", v451, 3);
  v249 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v246, "registerForMessage:receiver:policies:selector:", *MEMORY[0x24BDD5D08], self, v249, sel__handleEventLogClearMessage_);

  -[HMDHome msgDispatcher](self, "msgDispatcher");
  v250 = (void *)objc_claimAutoreleasedReturnValue();
  +[HMDXPCMessagePolicy policyWithEntitlements:](HMDXPCMessagePolicy, "policyWithEntitlements:", 5);
  v251 = (void *)objc_claimAutoreleasedReturnValue();
  v450[0] = v251;
  v450[1] = v404;
  +[HMDConfigurationMessagePolicy policyWithOperationTypes:](HMDConfigurationMessagePolicy, "policyWithOperationTypes:", 2);
  v252 = (void *)objc_claimAutoreleasedReturnValue();
  v450[2] = v252;
  objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", v450, 3);
  v253 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v250, "registerForMessage:receiver:policies:selector:", CFSTR("kUpdateUserPresenceStatusConsentRequestKey"), self, v253, sel__handleUpdatePresenceConsent_);

  -[HMDHome msgDispatcher](self, "msgDispatcher");
  v254 = (void *)objc_claimAutoreleasedReturnValue();
  +[HMDXPCMessagePolicy policyWithEntitlements:](HMDXPCMessagePolicy, "policyWithEntitlements:", 5);
  v255 = (void *)objc_claimAutoreleasedReturnValue();
  v449[0] = v255;
  +[HMDConfigurationMessagePolicy policyWithOperationTypes:](HMDConfigurationMessagePolicy, "policyWithOperationTypes:", 2);
  v256 = (void *)objc_claimAutoreleasedReturnValue();
  v449[1] = v256;
  objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", v449, 2);
  v257 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v254, "registerForMessage:receiver:policies:selector:", *MEMORY[0x24BDD6290], self, v257, sel__handleRetrieveAsyncResults_);

  +[HMDRemoteMessagePolicy defaultSecurePolicy](HMDMutableRemoteMessagePolicy, "defaultSecurePolicy");
  v258 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v258, "setRoles:", objc_msgSend(v258, "roles") | 6);
  v259 = (void *)objc_msgSend(v258, "copy");
  -[HMDHome msgDispatcher](self, "msgDispatcher");
  v260 = (void *)objc_claimAutoreleasedReturnValue();
  +[HMDXPCMessagePolicy policyWithEntitlements:](HMDXPCMessagePolicy, "policyWithEntitlements:", 1);
  v261 = (void *)objc_claimAutoreleasedReturnValue();
  v448[0] = v261;
  v448[1] = v259;
  v448[2] = v401;
  +[HMDXPCBackgroundMessagePolicy policyWithEntitlementRequirement:](HMDXPCBackgroundMessagePolicy, "policyWithEntitlementRequirement:", 1);
  v262 = (void *)objc_claimAutoreleasedReturnValue();
  v448[3] = v262;
  objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", v448, 4);
  v263 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v260, "registerForMessage:receiver:policies:selector:", CFSTR("kExecuteActionSetRequestKey"), self, v263, sel__handleExecuteActionSet_);

  -[HMDHome msgDispatcher](self, "msgDispatcher");
  v264 = (void *)objc_claimAutoreleasedReturnValue();
  +[HMDXPCMessagePolicy policyWithEntitlements:](HMDXPCMessagePolicy, "policyWithEntitlements:", 5);
  v265 = (void *)objc_claimAutoreleasedReturnValue();
  v447[0] = v265;
  v447[1] = v259;
  v447[2] = v402;
  +[HMDXPCBackgroundMessagePolicy policyWithEntitlementRequirement:](HMDXPCBackgroundMessagePolicy, "policyWithEntitlementRequirement:", 1);
  v266 = (void *)objc_claimAutoreleasedReturnValue();
  v447[3] = v266;
  objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", v447, 4);
  v267 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v264, "registerForMessage:receiver:policies:selector:", CFSTR("kMultipleCharacteristicWriteRequestKey"), self, v267, sel__handleMultipleCharacteristicWrite_);

  -[HMDHome msgDispatcher](self, "msgDispatcher");
  v268 = (void *)objc_claimAutoreleasedReturnValue();
  +[HMDXPCMessagePolicy policyWithEntitlements:](HMDXPCMessagePolicy, "policyWithEntitlements:", 5);
  v269 = (void *)objc_claimAutoreleasedReturnValue();
  v446[0] = v269;
  v446[1] = v259;
  v446[2] = v402;
  +[HMDXPCBackgroundMessagePolicy policyWithEntitlementRequirement:](HMDXPCBackgroundMessagePolicy, "policyWithEntitlementRequirement:", 1);
  v270 = (void *)objc_claimAutoreleasedReturnValue();
  v446[3] = v270;
  objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", v446, 4);
  v271 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v268, "registerForMessage:receiver:policies:selector:", CFSTR("kMultipleCharacteristicReadRequestKey"), self, v271, sel__handleMultipleCharacteristicRead_);

  -[HMDHome msgDispatcher](self, "msgDispatcher");
  v272 = (void *)objc_claimAutoreleasedReturnValue();
  v445[0] = v259;
  v445[1] = v402;
  +[HMDXPCMessagePolicy policyWithEntitlements:](HMDXPCMessagePolicy, "policyWithEntitlements:", 1);
  v273 = (void *)objc_claimAutoreleasedReturnValue();
  v445[2] = v273;
  +[HMDXPCBackgroundMessagePolicy policyWithEntitlementRequirement:](HMDXPCBackgroundMessagePolicy, "policyWithEntitlementRequirement:", 1);
  v274 = (void *)objc_claimAutoreleasedReturnValue();
  v445[3] = v274;
  objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", v445, 4);
  v275 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v272, "registerForMessage:receiver:policies:selector:", CFSTR("kCharacteristicWriteRequestKey"), self, v275, sel__handleCharacteristicWrite_);

  -[HMDHome msgDispatcher](self, "msgDispatcher");
  v276 = (void *)objc_claimAutoreleasedReturnValue();
  v444[0] = v259;
  v444[1] = v402;
  +[HMDXPCMessagePolicy policyWithEntitlements:](HMDXPCMessagePolicy, "policyWithEntitlements:", 1);
  v277 = (void *)objc_claimAutoreleasedReturnValue();
  v444[2] = v277;
  +[HMDXPCBackgroundMessagePolicy policyWithEntitlementRequirement:](HMDXPCBackgroundMessagePolicy, "policyWithEntitlementRequirement:", 1);
  v278 = (void *)objc_claimAutoreleasedReturnValue();
  v444[3] = v278;
  objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", v444, 4);
  v279 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v276, "registerForMessage:receiver:policies:selector:", CFSTR("kCharacteristicReadRequestKey"), self, v279, sel__handleCharacteristicRead_);

  -[HMDHome msgDispatcher](self, "msgDispatcher");
  v280 = (void *)objc_claimAutoreleasedReturnValue();
  +[HMDXPCMessagePolicy policyWithEntitlements:](HMDXPCMessagePolicy, "policyWithEntitlements:", 1);
  v281 = (void *)objc_claimAutoreleasedReturnValue();
  v443[0] = v281;
  v443[1] = v259;
  v443[2] = v400;
  +[HMDXPCBackgroundMessagePolicy policyWithEntitlementRequirement:](HMDXPCBackgroundMessagePolicy, "policyWithEntitlementRequirement:", 1);
  v282 = (void *)objc_claimAutoreleasedReturnValue();
  v443[3] = v282;
  objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", v443, 4);
  v283 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v280, "registerForMessage:receiver:policies:selector:", CFSTR("kCharacteristicEnableNotificationRequestKey"), self, v283, sel__handleCharacteristicEnableNotification_);

  isWatch();
  -[HMDHome msgDispatcher](self, "msgDispatcher");
  v284 = (void *)objc_claimAutoreleasedReturnValue();
  v442[0] = v259;
  v442[1] = v402;
  objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", v442, 2);
  v285 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v284, "registerForMessage:receiver:policies:selector:", CFSTR("kModifyCharacterisiticNotificationsRequestKey"), self, v285, sel__handleModifyCharacteristicNotifications_);

  -[HMDHome msgDispatcher](self, "msgDispatcher");
  v286 = (void *)objc_claimAutoreleasedReturnValue();
  v441[0] = v259;
  v441[1] = v402;
  objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", v441, 2);
  v287 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v286, "registerForMessage:receiver:policies:selector:", CFSTR("kEnableAccessoryReachabilityNotificationRequestKey"), self, v287, sel__handleAccessoryReachabilityRegistrationAndEnable_);

  -[HMDHome msgDispatcher](self, "msgDispatcher");
  v288 = (void *)objc_claimAutoreleasedReturnValue();
  v440[0] = v259;
  v440[1] = v402;
  objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", v440, 2);
  v289 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v288, "registerForMessage:receiver:policies:selector:", CFSTR("kDisableAccessoryReachabilityNotificationRequestKey"), self, v289, sel__handleAccessoryReachabilityRegistration_);

  -[HMDHome msgDispatcher](self, "msgDispatcher");
  v290 = (void *)objc_claimAutoreleasedReturnValue();
  +[HMDRemoteMessagePolicy defaultSecurePolicy](HMDRemoteMessagePolicy, "defaultSecurePolicy");
  v291 = (void *)objc_claimAutoreleasedReturnValue();
  v439[0] = v291;
  v439[1] = v400;
  objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", v439, 2);
  v292 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v290, "registerForMessage:receiver:policies:selector:", CFSTR("kCharacterisiticsChangedInternalNotificationKey"), self, v292, sel__handleCharacteristicsChangedNotification_);

  -[HMDHome msgDispatcher](self, "msgDispatcher");
  v293 = (void *)objc_claimAutoreleasedReturnValue();
  +[HMDXPCMessagePolicy policyWithEntitlements:](HMDXPCMessagePolicy, "policyWithEntitlements:", 1);
  v294 = (void *)objc_claimAutoreleasedReturnValue();
  v438[0] = v294;
  v438[1] = v404;
  objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", v438, 2);
  v295 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v293, "registerForMessage:receiver:policies:selector:", CFSTR("HMHomeAllowUserManagementMessage"), self, v295, sel__handleAllowUserManagementMessage_);

  -[HMDHome msgDispatcher](self, "msgDispatcher");
  v296 = (void *)objc_claimAutoreleasedReturnValue();
  +[HMDRemoteMessagePolicy defaultSecurePolicy](HMDRemoteMessagePolicy, "defaultSecurePolicy");
  v297 = (void *)objc_claimAutoreleasedReturnValue();
  v437[0] = v297;
  v437[1] = v404;
  objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", v437, 2);
  v298 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v296, "registerForMessage:receiver:policies:selector:", CFSTR("kRemoteReachabilityChangedNotificationKey"), self, v298, sel__handleAccessoryReachabilityChange_);

  +[HMDRemoteMessagePolicy defaultPolicy](HMDMutableRemoteMessagePolicy, "defaultPolicy");
  v299 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v299, "setRequiresSecureMessage:", 1);
  objc_msgSend(v299, "setRoles:", 3);
  v399 = (void *)objc_msgSend(v299, "copy");
  -[HMDHome msgDispatcher](self, "msgDispatcher");
  v300 = (void *)objc_claimAutoreleasedReturnValue();
  +[HMDXPCMessagePolicy policyWithEntitlements:](HMDXPCMessagePolicy, "policyWithEntitlements:", 5);
  v301 = (void *)objc_claimAutoreleasedReturnValue();
  v436[0] = v301;
  v436[1] = v399;
  v436[2] = v402;
  objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", v436, 3);
  v302 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v300, "registerForMessage:receiver:policies:selector:", CFSTR("kConfirmExecuteTriggerRequestKey"), self, v302, sel__handleExecuteConfirmationOfTrigger_);

  +[HMDRemoteMessagePolicy defaultSecurePolicy](HMDMutableRemoteMessagePolicy, "defaultSecurePolicy");
  v303 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v303, "setRoles:", 4);
  v304 = (void *)objc_msgSend(v303, "copy");
  -[HMDHome msgDispatcher](self, "msgDispatcher");
  v305 = (void *)objc_claimAutoreleasedReturnValue();
  v435[0] = v304;
  v435[1] = v404;
  objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", v435, 2);
  v306 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v305, "registerForMessage:receiver:policies:selector:", CFSTR("kPredicateEvaluatePredicateRequestKey"), self, v306, sel_handleEvaluatePredicateMessage_);

  +[HMDRemoteMessagePolicy defaultSecurePolicy](HMDMutableRemoteMessagePolicy, "defaultSecurePolicy");
  v307 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v307, "setRoles:", objc_msgSend(v307, "roles") | 8);
  v308 = (void *)objc_msgSend(v307, "copy");
  v434[0] = v308;
  v434[1] = v400;
  objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", v434, 2);
  v309 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHome registerForBulletinNotificationRegistrationHandlersUsingPolicies:](self, "registerForBulletinNotificationRegistrationHandlersUsingPolicies:", v309);

  -[HMDHome msgDispatcher](self, "msgDispatcher");
  v310 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHome administratorHandler](self, "administratorHandler");
  v311 = (void *)objc_claimAutoreleasedReturnValue();

  +[HMDXPCMessagePolicy policyWithEntitlements:](HMDXPCMessagePolicy, "policyWithEntitlements:", 5);
  v312 = (void *)objc_claimAutoreleasedReturnValue();
  v433[0] = v312;
  v433[1] = v403;
  +[HMDConfigurationMessagePolicy policyWithOperationTypes:](HMDConfigurationMessagePolicy, "policyWithOperationTypes:", 2);
  v313 = (void *)objc_claimAutoreleasedReturnValue();
  v433[2] = v313;
  objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", v433, 3);
  v314 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v311, "registerForMessage:receiver:policies:selector:", *MEMORY[0x24BDD6368], self, v314, sel__handleUpdateAutomaticSoftwareUpdate_);

  +[HMDXPCMessagePolicy policyWithEntitlements:](HMDXPCMessagePolicy, "policyWithEntitlements:", 5);
  v315 = (void *)objc_claimAutoreleasedReturnValue();
  v432[0] = v315;
  v432[1] = v403;
  +[HMDConfigurationMessagePolicy policyWithOperationTypes:](HMDConfigurationMessagePolicy, "policyWithOperationTypes:", 2);
  v316 = (void *)objc_claimAutoreleasedReturnValue();
  v432[2] = v316;
  objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", v432, 3);
  v317 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v311, "registerForMessage:receiver:policies:selector:", *MEMORY[0x24BDD6370], self, v317, sel__handleUpdateAutomaticThirdPartyAccessorySoftwareUpdate_);

  -[HMDHome msgDispatcher](self, "msgDispatcher");
  v318 = (void *)objc_claimAutoreleasedReturnValue();
  +[HMDRemoteMessagePolicy defaultSecurePolicy](HMDRemoteMessagePolicy, "defaultSecurePolicy");
  v319 = (void *)objc_claimAutoreleasedReturnValue();
  v431[0] = v319;
  v431[1] = v401;
  objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", v431, 2);
  v320 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v318, "registerForMessage:receiver:policies:selector:", CFSTR("HMDHomeQueryResidentReachabilityForAccessoriesMessageKey"), self, v320, sel__handleQueryResidentReachabilityForAccessories_);

  -[HMDHome msgDispatcher](self, "msgDispatcher");
  v321 = (void *)objc_claimAutoreleasedReturnValue();
  +[HMDXPCMessagePolicy policyWithEntitlements:](HMDXPCMessagePolicy, "policyWithEntitlements:", 5);
  v322 = (void *)objc_claimAutoreleasedReturnValue();
  v430[0] = v322;
  v430[1] = v404;
  objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", v430, 2);
  v323 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v321, "registerForMessage:receiver:policies:selector:", *MEMORY[0x24BDD5D50], self, v323, sel_executeActionsFromMessage_);

  -[HMDHome localCapabilitiesDataSource](self, "localCapabilitiesDataSource");
  v324 = (void *)objc_claimAutoreleasedReturnValue();
  LODWORD(v322) = objc_msgSend(v324, "supportsRemoteAccess");

  if ((_DWORD)v322)
  {
    -[HMDHome msgDispatcher](self, "msgDispatcher");
    v325 = (void *)objc_claimAutoreleasedReturnValue();
    +[HMDXPCMessagePolicy policyWithEntitlements:](HMDXPCMessagePolicy, "policyWithEntitlements:", 5);
    v326 = (void *)objc_claimAutoreleasedReturnValue();
    v429[0] = v326;
    v429[1] = v400;
    objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", v429, 2);
    v327 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v325, "registerForMessage:receiver:policies:selector:", *MEMORY[0x24BDD7C40], self, v327, sel__handleEnableNotifications_);

  }
  -[HMDHome msgDispatcher](self, "msgDispatcher");
  v328 = (void *)objc_claimAutoreleasedReturnValue();
  +[HMDRemoteMessagePolicy defaultSecurePolicy](HMDRemoteMessagePolicy, "defaultSecurePolicy");
  v329 = (void *)objc_claimAutoreleasedReturnValue();
  v428[0] = v329;
  v428[1] = v401;
  objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", v428, 2);
  v330 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v328, "registerForMessage:receiver:policies:selector:", CFSTR("kMediaPropertiesWriteRequestKey"), self, v330, sel__handleMediaPropertiesWrite_);

  -[HMDHome msgDispatcher](self, "msgDispatcher");
  v331 = (void *)objc_claimAutoreleasedReturnValue();
  +[HMDRemoteMessagePolicy defaultSecurePolicy](HMDRemoteMessagePolicy, "defaultSecurePolicy");
  v332 = (void *)objc_claimAutoreleasedReturnValue();
  v427[0] = v332;
  v427[1] = v401;
  objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", v427, 2);
  v333 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v331, "registerForMessage:receiver:policies:selector:", CFSTR("kMediaPropertiesReadRequestKey"), self, v333, sel__handleMediaPropertiesRead_);

  -[HMDHome msgDispatcher](self, "msgDispatcher");
  v334 = (void *)objc_claimAutoreleasedReturnValue();
  +[HMDXPCMessagePolicy policyWithEntitlements:](HMDXPCMessagePolicy, "policyWithEntitlements:", 5);
  v335 = (void *)objc_claimAutoreleasedReturnValue();
  v426[0] = v335;
  v426[1] = v403;
  objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", v426, 2);
  v336 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v334, "registerForMessage:receiver:policies:selector:", CFSTR("kStartDiscoveringSymptomsForNearbyDevicesRequestKey"), self, v336, sel__handleStartDiscoveringSymptomsForNearbyDevicesMessage_);

  -[HMDHome msgDispatcher](self, "msgDispatcher");
  v337 = (void *)objc_claimAutoreleasedReturnValue();
  +[HMDXPCMessagePolicy policyWithEntitlements:](HMDXPCMessagePolicy, "policyWithEntitlements:", 5);
  v338 = (void *)objc_claimAutoreleasedReturnValue();
  v425[0] = v338;
  v425[1] = v403;
  objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", v425, 2);
  v339 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v337, "registerForMessage:receiver:policies:selector:", CFSTR("kStopDiscoveringSymptomsForNearbyDevicesRequestKey"), self, v339, sel__handleStopDiscoveringSymptomsForNearbyDevicesMessage_);

  if (-[HMDHome isOwnerUser](self, "isOwnerUser"))
  {
    -[HMDHome administratorHandler](self, "administratorHandler");
    v340 = (void *)objc_claimAutoreleasedReturnValue();
    +[HMDXPCMessagePolicy policyWithEntitlements:](HMDXPCMessagePolicy, "policyWithEntitlements:", 5);
    v341 = (void *)objc_claimAutoreleasedReturnValue();
    v424[0] = v341;
    +[HMDConfigurationMessagePolicy policyWithOperationTypes:](HMDConfigurationMessagePolicy, "policyWithOperationTypes:", 2);
    v342 = (void *)objc_claimAutoreleasedReturnValue();
    v424[1] = v342;
    v343 = v424;
    v344 = v403;
  }
  else
  {
    -[HMDHome msgDispatcher](self, "msgDispatcher");
    v340 = (void *)objc_claimAutoreleasedReturnValue();
    +[HMDXPCMessagePolicy policyWithEntitlements:](HMDXPCMessagePolicy, "policyWithEntitlements:", 5);
    v341 = (void *)objc_claimAutoreleasedReturnValue();
    v423[0] = v341;
    +[HMDConfigurationMessagePolicy policyWithOperationTypes:](HMDConfigurationMessagePolicy, "policyWithOperationTypes:", 2);
    v342 = (void *)objc_claimAutoreleasedReturnValue();
    v423[1] = v342;
    v343 = v423;
    v344 = v404;
  }
  v343[2] = v344;
  objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:");
  v345 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v340, "registerForMessage:receiver:policies:selector:", *MEMORY[0x24BDD7038], self, v345, sel__handleAssistantAccessControlUpdate_);
  objc_msgSend(v340, "registerForMessage:receiver:policies:selector:", *MEMORY[0x24BDD7108], self, v345, sel__handleMediaContentProfileAccessControlUpdate_);
  objc_msgSend(v340, "registerForMessage:receiver:policies:selector:", *MEMORY[0x24BDD70F0], self, v345, sel__handleUserListeningHistoryUpdateControlUpdatedAccessoryUUIDs_);
  -[HMDHome msgDispatcher](self, "msgDispatcher");
  v346 = (void *)objc_claimAutoreleasedReturnValue();
  +[HMDRemoteMessagePolicy defaultSecurePolicy](HMDRemoteMessagePolicy, "defaultSecurePolicy");
  v347 = (void *)objc_claimAutoreleasedReturnValue();
  v422[0] = v347;
  v422[1] = v404;
  objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", v422, 2);
  v348 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v346, "registerForMessage:receiver:policies:selector:", CFSTR("HMDUCM.rsr"), self, v348, sel__handleRemoteUserClientCloudShareRequest_);

  -[HMDHome msgDispatcher](self, "msgDispatcher");
  v349 = (void *)objc_claimAutoreleasedReturnValue();
  +[HMDRemoteMessagePolicy defaultSecurePolicy](HMDRemoteMessagePolicy, "defaultSecurePolicy");
  v350 = (void *)objc_claimAutoreleasedReturnValue();
  v421[0] = v350;
  v421[1] = v404;
  objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", v421, 2);
  v351 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v349, "registerForMessage:receiver:policies:selector:", CFSTR("HMDUCM.rRepr"), self, v351, sel__handleRemoteUserClientCloudShareRepairRequest_);

  -[HMDHome msgDispatcher](self, "msgDispatcher");
  v352 = (void *)objc_claimAutoreleasedReturnValue();
  +[HMDRemoteMessagePolicy defaultSecurePrimaryResidentPolicy](HMDRemoteMessagePolicy, "defaultSecurePrimaryResidentPolicy");
  v353 = (void *)objc_claimAutoreleasedReturnValue();
  v420[0] = v353;
  v420[1] = v403;
  objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", v420, 2);
  v354 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v352, "registerForMessage:receiver:policies:selector:", CFSTR("HMDHomeSetHomeManagerAppData"), self, v354, sel__handleSetHomeManagerAppData_);

  if (isInternalBuild())
  {
    objc_initWeak(&location, self);
    -[HMDHome msgDispatcher](self, "msgDispatcher");
    v355 = (void *)objc_claimAutoreleasedReturnValue();
    +[HMDXPCMessagePolicy policyWithEntitlements:](HMDXPCMessagePolicy, "policyWithEntitlements:", 5);
    v356 = (void *)objc_claimAutoreleasedReturnValue();
    v419[0] = v356;
    v419[1] = v403;
    +[HMDConfigurationMessagePolicy policyWithOperationTypes:](HMDConfigurationMessagePolicy, "policyWithOperationTypes:", 2);
    v357 = (void *)objc_claimAutoreleasedReturnValue();
    v419[2] = v357;
    objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", v419, 3);
    v358 = (void *)objc_claimAutoreleasedReturnValue();
    v405[0] = MEMORY[0x24BDAC760];
    v405[1] = 3221225472;
    v405[2] = __31__HMDHome__registerForMessages__block_invoke;
    v405[3] = &unk_24E79AF28;
    objc_copyWeak(&v406, &location);
    objc_msgSend(v355, "registerForMessage:receiver:policies:messageHandler:", *MEMORY[0x24BDD5CC0], self, v358, v405);

    -[HMDHome msgDispatcher](self, "msgDispatcher");
    v359 = (void *)objc_claimAutoreleasedReturnValue();
    +[HMDXPCMessagePolicy policyWithEntitlements:](HMDXPCMessagePolicy, "policyWithEntitlements:", 5);
    v360 = (void *)objc_claimAutoreleasedReturnValue();
    v418[0] = v360;
    v418[1] = v403;
    +[HMDConfigurationMessagePolicy policyWithOperationTypes:](HMDConfigurationMessagePolicy, "policyWithOperationTypes:", 2);
    v361 = (void *)objc_claimAutoreleasedReturnValue();
    v418[2] = v361;
    objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", v418, 3);
    v362 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v359, "registerForMessage:receiver:policies:selector:", *MEMORY[0x24BDD62F0], self, v362, sel__handleSetResidentElectionVersion_);

    objc_destroyWeak(&v406);
    objc_destroyWeak(&location);
  }
  -[HMDHome _registerThreadResidentCommissioningMessageHandlers](self, "_registerThreadResidentCommissioningMessageHandlers");
  if (!-[HMDHome stateHandle](self, "stateHandle"))
    -[HMDHome _registerStateHandler](self, "_registerStateHandler");
  -[HMDHome msgDispatcher](self, "msgDispatcher");
  v363 = (void *)objc_claimAutoreleasedReturnValue();
  +[HMDXPCMessagePolicy policyWithEntitlements:](HMDXPCMessagePolicy, "policyWithEntitlements:", 5);
  v364 = (void *)objc_claimAutoreleasedReturnValue();
  v417 = v364;
  objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", &v417, 1);
  v365 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v363, "registerForMessage:receiver:policies:selector:", *MEMORY[0x24BDD5D68], self, v365, sel__handleFetchLastModifiedServiceOfType_);

  if (isInternalBuild())
  {
    -[HMDHome msgDispatcher](self, "msgDispatcher");
    v366 = (void *)objc_claimAutoreleasedReturnValue();
    +[HMDXPCMessagePolicy policyWithEntitlements:](HMDXPCMessagePolicy, "policyWithEntitlements:", 5);
    v367 = (void *)objc_claimAutoreleasedReturnValue();
    v416 = v367;
    objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", &v416, 1);
    v368 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v366, "registerForMessage:receiver:policies:selector:", *MEMORY[0x24BDD6338], self, v368, sel__handleTestUpgradeToROAR_);

  }
  -[HMDHome msgDispatcher](self, "msgDispatcher");
  v369 = (void *)objc_claimAutoreleasedReturnValue();
  +[HMDRemoteMessagePolicy defaultSecurePolicy](HMDRemoteMessagePolicy, "defaultSecurePolicy");
  v370 = (void *)objc_claimAutoreleasedReturnValue();
  v415[0] = v370;
  v415[1] = v404;
  objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", v415, 2);
  v371 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v369, "registerForMessage:receiver:policies:selector:", CFSTR("HMDHomeSetNaturalLightingEnabledForLightProfilesMessage"), self, v371, sel_handleSetNaturalLightingEnabledForLightProfilesMessage_);

  -[HMDHome msgDispatcher](self, "msgDispatcher");
  v372 = (void *)objc_claimAutoreleasedReturnValue();
  +[HMDXPCMessagePolicy policyWithEntitlements:](HMDXPCMessagePolicy, "policyWithEntitlements:", 5);
  v373 = (void *)objc_claimAutoreleasedReturnValue();
  v414 = v373;
  objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", &v414, 1);
  v374 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v372, "registerForMessage:receiver:policies:selector:", *MEMORY[0x24BDD5D70], self, v374, sel_handleFetchLightProfileSettingsMessage_);

  -[HMDHome msgDispatcher](self, "msgDispatcher");
  v375 = (void *)objc_claimAutoreleasedReturnValue();
  +[HMDRemoteMessagePolicy defaultSecurePolicy](HMDRemoteMessagePolicy, "defaultSecurePolicy");
  v376 = (void *)objc_claimAutoreleasedReturnValue();
  v413[0] = v376;
  v413[1] = v404;
  +[HMDXPCMessagePolicy policyWithEntitlements:](HMDXPCMessagePolicy, "policyWithEntitlements:", 5);
  v377 = (void *)objc_claimAutoreleasedReturnValue();
  v413[2] = v377;
  objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", v413, 3);
  v378 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v375, "registerForMessage:receiver:policies:selector:", CFSTR("HMDHomeCHIPSendRemoteRequestMessage"), self, v378, sel_handleCHIPSendRemoteRequestMessage_);

  if (isInternalBuild())
  {
    +[HMDUserMessagePolicy userMessagePolicyWithHome:userPrivilege:remoteAccessRequired:](HMDUserMessagePolicy, "userMessagePolicyWithHome:userPrivilege:remoteAccessRequired:", self, 4, 0);
    v379 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHome msgDispatcher](self, "msgDispatcher");
    v380 = (void *)objc_claimAutoreleasedReturnValue();
    +[HMDRemoteMessagePolicy defaultSecurePolicy](HMDRemoteMessagePolicy, "defaultSecurePolicy");
    v381 = (void *)objc_claimAutoreleasedReturnValue();
    v412[0] = v381;
    v412[1] = v379;
    +[HMDXPCMessagePolicy policyWithEntitlements:](HMDXPCMessagePolicy, "policyWithEntitlements:", 5);
    v382 = (void *)objc_claimAutoreleasedReturnValue();
    v412[2] = v382;
    objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", v412, 3);
    v383 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v380, "registerForMessage:receiver:policies:selector:", *MEMORY[0x24BDD6278], self, v383, sel_handleResetMatterStorageRequest_);

  }
  -[HMDHome msgDispatcher](self, "msgDispatcher");
  v384 = (void *)objc_claimAutoreleasedReturnValue();
  +[HMDRemoteMessagePolicy defaultSecurePolicy](HMDRemoteMessagePolicy, "defaultSecurePolicy");
  v385 = (void *)objc_claimAutoreleasedReturnValue();
  v411[0] = v385;
  v411[1] = v404;
  objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", v411, 2);
  v386 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v384, "registerForMessage:receiver:policies:selector:", CFSTR("HMDHomeCHIPSendReportMessage"), self, v386, sel_handleCHIPSendReportMessage_);

  if (isInternalBuild())
  {
    -[HMDHome msgDispatcher](self, "msgDispatcher");
    v387 = (void *)objc_claimAutoreleasedReturnValue();
    +[HMDXPCMessagePolicy policyWithEntitlements:](HMDXPCMessagePolicy, "policyWithEntitlements:", 1);
    v388 = (void *)objc_claimAutoreleasedReturnValue();
    v410[0] = v388;
    +[HMDXPCBackgroundMessagePolicy policyWithEntitlementRequirement:](HMDXPCBackgroundMessagePolicy, "policyWithEntitlementRequirement:", 1);
    v389 = (void *)objc_claimAutoreleasedReturnValue();
    v410[1] = v389;
    objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", v410, 2);
    v390 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v387, "registerForMessage:receiver:policies:selector:", *MEMORY[0x24BDD62C8], self, v390, sel_handleSetPreferredPrimaryMessage_);

    -[HMDHome msgDispatcher](self, "msgDispatcher");
    v391 = (void *)objc_claimAutoreleasedReturnValue();
    +[HMDXPCMessagePolicy policyWithEntitlements:](HMDXPCMessagePolicy, "policyWithEntitlements:", 5);
    v392 = (void *)objc_claimAutoreleasedReturnValue();
    v409[0] = v392;
    v409[1] = v403;
    +[HMDConfigurationMessagePolicy policyWithOperationTypes:](HMDConfigurationMessagePolicy, "policyWithOperationTypes:", 2);
    v393 = (void *)objc_claimAutoreleasedReturnValue();
    v409[2] = v393;
    objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", v409, 3);
    v394 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v391, "registerForMessage:receiver:policies:selector:", *MEMORY[0x24BDD6328], self, v394, sel_handleSwitchFromResidentSelectionToREV2_);

  }
  -[HMDHome msgDispatcher](self, "msgDispatcher");
  v395 = (void *)objc_claimAutoreleasedReturnValue();
  +[HMDXPCMessagePolicy policyWithEntitlements:](HMDXPCMessagePolicy, "policyWithEntitlements:", 5);
  v396 = (void *)objc_claimAutoreleasedReturnValue();
  v408 = v396;
  objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", &v408, 1);
  v397 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v395, "registerForMessage:receiver:policies:selector:", *MEMORY[0x24BDD5D78], self, v397, sel__handleFetchTriggerNameRequest_);

  -[HMDHome registerWiFiInfoFetchMessage](self, "registerWiFiInfoFetchMessage");
}

- (void)_registerForNotifications
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  id v10;

  -[HMDHome notificationCenter](self, "notificationCenter");
  v10 = (id)objc_claimAutoreleasedReturnValue();
  -[HMDHome homeManager](self, "homeManager");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "addObserver:selector:name:object:", self, sel_handleActive_, CFSTR("HMDHomeManagerActiveNotification"), v3);
  objc_msgSend(v10, "addObserver:selector:name:object:", self, sel_handleInactive_, CFSTR("HMDHomeManagerInactiveNotification"), v3);
  objc_msgSend(v10, "addObserver:selector:name:object:", self, sel_handleAdaptiveClientDisconnected_, CFSTR("HMDHomeManagerAdaptiveClientDisconnectedNotification"), 0);
  objc_msgSend(v10, "addObserver:selector:name:object:", self, sel_handleAccessoryDidAddNetworkRouterControllerNotification_, CFSTR("HMDAccessoryDidAddNetworkRouterControllerNotification"), self);
  objc_msgSend(v10, "addObserver:selector:name:object:", self, sel_handleAccessoryDidRemoveNetworkRouterControllerNotification_, CFSTR("HMDAccessoryDidRemoveNetworkRouterControllerNotification"), self);
  -[HMDHome currentUser](self, "currentUser");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "addObserver:selector:name:object:", self, sel_handleCurrentUserPrivilegeChanged_, CFSTR("HMDUserPrivilegeDidChangeNotification"), v4);

  +[HMDAppleAccountManager sharedManager](HMDAppleAccountManager, "sharedManager");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "addObserver:selector:name:object:", self, sel_handleActiveAccountChanged_, CFSTR("HMDAppleAccountManagerAccountUpdatedNotification"), v5);

  objc_msgSend(v10, "addObserver:selector:name:object:", self, sel_handleAccountHandlesUpdated_, CFSTR("HMDAccountHandlesUpdatedNotification"), 0);
  objc_msgSend(v10, "addObserver:selector:name:object:", self, sel_handleCurrentAccountMergeIdentifierUpdated_, CFSTR("HMDAppleAccountMergeIdentifierUpdatedNotification"), 0);
  objc_msgSend(v10, "addObserver:selector:name:object:", self, sel___handleProcessStateChange_, CFSTR("HMDProcessInfoStateDidChangeNotification"), 0);
  objc_msgSend(v10, "addObserver:selector:name:object:", self, sel_handleAccessoryReachabilityChangeNotification_, CFSTR("HMDAccessoryIsReachableNotification"), 0);
  objc_msgSend(v10, "addObserver:selector:name:object:", self, sel_handleAccessoryReachabilityChangeNotification_, CFSTR("HMDAccessoryIsNotReachableNotification"), 0);
  objc_msgSend(v10, "addObserver:selector:name:object:", self, sel_handleRemovedMediaSessions_, CFSTR("HMDMediaSessionsRemovedNotification"), 0);
  objc_msgSend(v10, "addObserver:selector:name:object:", self, sel_handleXPCConnectionInvalidated_, CFSTR("HMDXPCClientConnectionInvalidatedNotification"), 0);
  objc_msgSend(v10, "addObserver:selector:name:object:", self, sel_handlePrimaryResidentChangeNotification_, CFSTR("HMDResidentDeviceConfirmedStateChangedNotification"), 0);
  if (isiOSDevice())
    objc_msgSend(v10, "addObserver:selector:name:object:", self, sel_handleDidReceiveIDSMessageWithNoListener_, CFSTR("HMDDidReceiveRemoteMessageWithNoListenerNotification"), 0);
  objc_msgSend(v10, "addObserver:selector:name:object:", self, sel_handleSiriEndPointAddedNotification_, CFSTR("HMDSiriEndpointProfileAddedNotification"), 0);
  objc_msgSend(v10, "addObserver:selector:name:object:", self, sel_handleFindResidentsNotification_, CFSTR("HMDPrimaryResidentDiscoveryFindResidentsNotification"), 0);
  objc_msgSend(v10, "addObserver:selector:name:object:", self, sel_handleHomeDataLoaded_, CFSTR("HMDHomeManagerHomeDataLoadedNotification"), 0);
  objc_msgSend(v3, "mobileAssetManager");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "addObserver:selector:name:object:", self, sel_handleMobileAssetsUpdatedNotification_, CFSTR("HMDMobileAssetManagerFoundUpdateNotification"), v6);

  objc_msgSend(MEMORY[0x24BDD16D0], "defaultCenter");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "addObserver:selector:name:object:", self, sel_checkForCATIDUpdate_, CFSTR("HMDFMFStatusUpdateNotification"), 0);

  -[HMDHome featureDataSource](self, "featureDataSource");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  LODWORD(v6) = objc_msgSend(v8, "isUserActivityStateDetectionFeatureEnabled");

  if ((_DWORD)v6)
  {
    objc_msgSend(MEMORY[0x24BDD16D0], "defaultCenter");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "addObserver:selector:name:object:", self, sel_handleFMFDeviceChangedNotification_, CFSTR("HMDFMFStatusUpdateNotification"), 0);

  }
}

- (void)handleFMFDeviceChangedNotification:(id)a3
{
  NSObject *v4;
  _QWORD block[5];

  -[HMDHome workQueue](self, "workQueue", a3);
  v4 = objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x24BDAC760];
  block[1] = 3221225472;
  block[2] = __46__HMDHome_handleFMFDeviceChangedNotification___block_invoke;
  block[3] = &unk_24E79C240;
  block[4] = self;
  dispatch_async(v4, block);

}

- (void)configureUserActivityStateDetectorManager
{
  void *v3;
  int v4;
  void *v5;
  void *v6;
  HMDHome *v7;
  NSObject *v8;
  NSObject *v9;
  void *v10;
  void *v11;
  HMDHome *v12;
  NSObject *v13;
  void *v14;
  void *v15;
  HMDUserActivityStateDetectorManager *v16;
  void *v17;
  int v18;
  void *v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  -[HMDHome featureDataSource](self, "featureDataSource");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "isUserActivityStateDetectionFeatureEnabled");

  if (v4)
  {
    if (+[HMDUserActivityStateDetectorManager shouldRunManagerForHome:](HMDUserActivityStateDetectorManager, "shouldRunManagerForHome:", self))
    {
      -[HMDHome userActivityStateDetectorManager](self, "userActivityStateDetectorManager");
      v5 = (void *)objc_claimAutoreleasedReturnValue();

      v6 = (void *)MEMORY[0x227676638]();
      v7 = self;
      HMFGetOSLogHandle();
      v8 = objc_claimAutoreleasedReturnValue();
      v9 = v8;
      if (v5)
      {
        if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
        {
          HMFGetLogIdentifier();
          v10 = (void *)objc_claimAutoreleasedReturnValue();
          v18 = 138543362;
          v19 = v10;
          _os_log_impl(&dword_2218F0000, v9, OS_LOG_TYPE_INFO, "%{public}@HMDUserActivityStateDetectorManager is already configured", (uint8_t *)&v18, 0xCu);

        }
        objc_autoreleasePoolPop(v6);
      }
      else
      {
        if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
        {
          HMFGetLogIdentifier();
          v15 = (void *)objc_claimAutoreleasedReturnValue();
          v18 = 138543362;
          v19 = v15;
          _os_log_impl(&dword_2218F0000, v9, OS_LOG_TYPE_DEFAULT, "%{public}@Creating and configuring HMDUserActivityStateDetectorManager", (uint8_t *)&v18, 0xCu);

        }
        objc_autoreleasePoolPop(v6);
        v16 = -[HMDUserActivityStateDetectorManager initWithHome:]([HMDUserActivityStateDetectorManager alloc], "initWithHome:", v7);
        -[HMDHome setUserActivityStateDetectorManager:](v7, "setUserActivityStateDetectorManager:", v16);

        -[HMDHome userActivityStateDetectorManager](v7, "userActivityStateDetectorManager");
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v17, "configure");

      }
    }
    else
    {
      v11 = (void *)MEMORY[0x227676638]();
      v12 = self;
      HMFGetOSLogHandle();
      v13 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v14 = (void *)objc_claimAutoreleasedReturnValue();
        v18 = 138543362;
        v19 = v14;
        _os_log_impl(&dword_2218F0000, v13, OS_LOG_TYPE_INFO, "%{public}@HMDUserActivityStateDetectorManager is not allowed due to user or device policy", (uint8_t *)&v18, 0xCu);

      }
      objc_autoreleasePoolPop(v11);
      -[HMDHome setUserActivityStateDetectorManager:](v12, "setUserActivityStateDetectorManager:", 0);
    }
  }
}

- (void)_handleFetchPresenceMapMessage:(id)a3
{
  id v4;
  void *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t i;
  void *v14;
  void *v15;
  int v16;
  void *v17;
  void *v18;
  void *v19;
  HMDHome *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t j;
  uint64_t v32;
  void *v33;
  void *v34;
  void *v35;
  HMDHome *v36;
  NSObject *v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  id obj;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  uint64_t v51;
  void *v52;
  _BYTE v53[128];
  uint8_t v54[128];
  uint8_t buf[4];
  void *v56;
  uint64_t v57;

  v57 = *MEMORY[0x24BDAC8D0];
  v4 = a3;
  if (-[HMDHome isCurrentDeviceConfirmedPrimaryResident](self, "isCurrentDeviceConfirmedPrimaryResident"))
  {
    v40 = v4;
    objc_msgSend(v4, "messagePayload");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "hmf_setForKey:", *MEMORY[0x24BDD63E0]);
    v6 = objc_claimAutoreleasedReturnValue();

    objc_msgSend(MEMORY[0x24BDBCED8], "dictionary");
    v41 = (void *)objc_claimAutoreleasedReturnValue();
    v39 = (void *)v6;
    objc_msgSend(MEMORY[0x24BDBCEF0], "setWithSet:", v6);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v47 = 0u;
    v48 = 0u;
    v49 = 0u;
    v50 = 0u;
    -[HMDHome home](self, "home");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "usersSupportingPresence");
    v9 = (void *)objc_claimAutoreleasedReturnValue();

    obj = v9;
    v10 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v47, v54, 16);
    if (v10)
    {
      v11 = v10;
      v12 = *(_QWORD *)v48;
      do
      {
        for (i = 0; i != v11; ++i)
        {
          if (*(_QWORD *)v48 != v12)
            objc_enumerationMutation(obj);
          v14 = *(void **)(*((_QWORD *)&v47 + 1) + 8 * i);
          objc_msgSend(v14, "uuid");
          v15 = (void *)objc_claimAutoreleasedReturnValue();
          v16 = objc_msgSend(v7, "containsObject:", v15);

          if (v16)
          {
            -[HMDHome presenceMonitor](self, "presenceMonitor");
            v17 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v17, "presenceMap");
            v18 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v14, "uuid");
            v19 = v7;
            v20 = self;
            v21 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v18, "objectForKeyedSubscript:", v21);
            v22 = (void *)objc_claimAutoreleasedReturnValue();

            v23 = (void *)MEMORY[0x24BDD16E0];
            objc_msgSend(v22, "presenceRegionStatus");
            v24 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v23, "numberWithUnsignedInteger:", objc_msgSend(v24, "value"));
            v25 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v14, "uuid");
            v26 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v41, "setObject:forKeyedSubscript:", v25, v26);

            self = v20;
            v7 = v19;

          }
        }
        v11 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v47, v54, 16);
      }
      while (v11);
    }

    v45 = 0u;
    v46 = 0u;
    v43 = 0u;
    v44 = 0u;
    v27 = v39;
    v28 = objc_msgSend(v27, "countByEnumeratingWithState:objects:count:", &v43, v53, 16);
    if (v28)
    {
      v29 = v28;
      v30 = *(_QWORD *)v44;
      do
      {
        for (j = 0; j != v29; ++j)
        {
          if (*(_QWORD *)v44 != v30)
            objc_enumerationMutation(v27);
          v32 = *(_QWORD *)(*((_QWORD *)&v43 + 1) + 8 * j);
          objc_msgSend(v41, "objectForKeyedSubscript:", v32);
          v33 = (void *)objc_claimAutoreleasedReturnValue();

          if (!v33)
            objc_msgSend(v41, "setObject:forKeyedSubscript:", &unk_24E96A520, v32);
        }
        v29 = objc_msgSend(v27, "countByEnumeratingWithState:objects:count:", &v43, v53, 16);
      }
      while (v29);
    }

    v51 = *MEMORY[0x24BDD7148];
    v52 = v41;
    objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", &v52, &v51, 1);
    v34 = (void *)objc_claimAutoreleasedReturnValue();
    v4 = v40;
    objc_msgSend(v40, "respondWithPayload:", v34);

  }
  else
  {
    v35 = (void *)MEMORY[0x227676638]();
    v36 = self;
    HMFGetOSLogHandle();
    v37 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v37, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v38 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v56 = v38;
      _os_log_impl(&dword_2218F0000, v37, OS_LOG_TYPE_ERROR, "%{public}@presence map fetch error: not primary resident", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v35);
    objc_msgSend(MEMORY[0x24BDD1540], "hmPrivateErrorWithCode:", 2708);
    v27 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "respondWithError:", v27);
  }

}

- (void)_updateWoWState:(id)a3
{
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t i;
  void *v9;
  void *v10;
  void *v11;
  BOOL v12;
  void (**v13)(void);
  void *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  _BYTE v19[128];
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  v4 = a3;
  v15 = 0u;
  v16 = 0u;
  v17 = 0u;
  v18 = 0u;
  v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v15, v19, 16);
  if (v5)
  {
    v6 = v5;
    v7 = *(_QWORD *)v16;
    do
    {
      for (i = 0; i != v6; ++i)
      {
        if (*(_QWORD *)v16 != v7)
          objc_enumerationMutation(v4);
        v9 = *(void **)(*((_QWORD *)&v15 + 1) + 8 * i);
        objc_msgSend(v9, "identifier");
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v9, "matchingHAPAccessoryWithServerIdentifier:linkType:", v10, 1);
        v11 = (void *)objc_claimAutoreleasedReturnValue();

        if (objc_msgSend(v9, "isReachable"))
          v12 = v11 == 0;
        else
          v12 = 1;
        if (v12 || !objc_msgSend(v9, "isNonClientNotificationEnabled"))
        {
          -[HMDHome netManagerFactory](self, "netManagerFactory");
          v13 = (void (**)(void))objc_claimAutoreleasedReturnValue();
          v13[2]();
          v14 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v14, "deregisterWoWAssertionForObject:", v9);
        }
        else
        {
          -[HMDHome netManagerFactory](self, "netManagerFactory");
          v13 = (void (**)(void))objc_claimAutoreleasedReturnValue();
          v13[2]();
          v14 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v14, "registerWoWAssertionForObject:", v9);
        }

      }
      v6 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v15, v19, 16);
    }
    while (v6);
  }

}

- (id)_unexpectedCharacteristicsFromCharacteristicNotifications:(id)a3
{
  id v4;
  void *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  void *v11;
  void *v12;
  uint64_t v13;
  uint64_t i;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  uint64_t j;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  HMDHome *v29;
  NSObject *v30;
  void *v31;
  void *v32;
  NSObject *v33;
  os_log_type_t v34;
  const char *v35;
  void *v36;
  HMDHome *v37;
  NSObject *v38;
  void *v39;
  void *v40;
  void *v42;
  void *context;
  id v44;
  id obj;
  uint64_t v46;
  id v47;
  id v48;
  id v49;
  uint64_t v50;
  uint64_t v51;
  id v52;
  uint64_t v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  void *v57;
  void *v58;
  void *v59;
  HMDHome *v60;
  void *v61;
  void *v62;
  id v63;
  uint64_t v64;
  uint64_t v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  id v78;
  id v79;
  _QWORD v80[4];
  id v81;
  HMDHome *v82;
  uint8_t buf[4];
  void *v84;
  __int16 v85;
  void *v86;
  __int16 v87;
  void *v88;
  _BYTE v89[128];
  _BYTE v90[128];
  _BYTE v91[128];
  uint64_t v92;

  v92 = *MEMORY[0x24BDAC8D0];
  v4 = a3;
  -[HMDHome notificationRegistrations](self, "notificationRegistrations");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend(v5, "count");

  if (!v6)
  {
    objc_msgSend(MEMORY[0x24BDBCEB8], "array");
    v58 = (void *)objc_claimAutoreleasedReturnValue();
    context = (void *)MEMORY[0x227676638]();
    objc_msgSend(v4, "allKeys");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v80[0] = MEMORY[0x24BDAC760];
    v80[1] = 3221225472;
    v80[2] = __69__HMDHome__unexpectedCharacteristicsFromCharacteristicNotifications___block_invoke;
    v80[3] = &unk_24E775F68;
    v44 = v4;
    v47 = v4;
    v81 = v47;
    v82 = self;
    v42 = v8;
    objc_msgSend(v8, "na_map:", v80);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v78 = 0;
    v79 = 0;
    -[HMDHome _notificationPayloadsForRemoteGateway:accessories:enableCharacteristicNotificationPayload:characteristicNotificationThresholdsPayload:disableCharacteristicNotificationPayload:enableMediaNotificationPayload:disableMediaNotificationPayload:](self, 0, v9, &v79, 0, &v78, 0, 0);
    v49 = v79;
    v48 = v78;
    v74 = 0u;
    v75 = 0u;
    v76 = 0u;
    v77 = 0u;
    obj = v9;
    v50 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v74, v91, 16);
    if (!v50)
      goto LABEL_41;
    v46 = *(_QWORD *)v75;
    v60 = self;
    while (1)
    {
      v10 = 0;
      do
      {
        if (*(_QWORD *)v75 != v46)
          objc_enumerationMutation(obj);
        v51 = v10;
        v11 = *(void **)(*((_QWORD *)&v74 + 1) + 8 * v10);
        objc_msgSend(v11, "uuid");
        v12 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v12, "UUIDString");
        v13 = objc_claimAutoreleasedReturnValue();

        objc_msgSend(v47, "hmf_dictionaryForKey:", v13);
        v54 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v49, "hmf_arrayForKey:", v13);
        v61 = (void *)v13;
        v62 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v48, "hmf_arrayForKey:", v13);
        v59 = (void *)objc_claimAutoreleasedReturnValue();
        v70 = 0u;
        v71 = 0u;
        v72 = 0u;
        v73 = 0u;
        objc_msgSend(v11, "services");
        v52 = (id)objc_claimAutoreleasedReturnValue();
        v55 = objc_msgSend(v52, "countByEnumeratingWithState:objects:count:", &v70, v90, 16);
        if (v55)
        {
          v53 = *(_QWORD *)v71;
          do
          {
            for (i = 0; i != v55; ++i)
            {
              if (*(_QWORD *)v71 != v53)
                objc_enumerationMutation(v52);
              v15 = *(void **)(*((_QWORD *)&v70 + 1) + 8 * i);
              objc_msgSend(v15, "instanceID");
              v16 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v16, "stringValue");
              v17 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v54, "hmf_dictionaryForKey:", v17);
              v18 = (void *)objc_claimAutoreleasedReturnValue();

              if (v18)
              {
                v56 = i;
                v68 = 0u;
                v69 = 0u;
                v66 = 0u;
                v67 = 0u;
                objc_msgSend(v15, "characteristics");
                v63 = (id)objc_claimAutoreleasedReturnValue();
                v65 = objc_msgSend(v63, "countByEnumeratingWithState:objects:count:", &v66, v89, 16);
                if (!v65)
                  goto LABEL_36;
                v64 = *(_QWORD *)v67;
                while (1)
                {
                  for (j = 0; j != v65; ++j)
                  {
                    if (*(_QWORD *)v67 != v64)
                      objc_enumerationMutation(v63);
                    v20 = *(void **)(*((_QWORD *)&v66 + 1) + 8 * j);
                    objc_msgSend(v20, "instanceID");
                    v21 = (void *)objc_claimAutoreleasedReturnValue();
                    objc_msgSend(v21, "stringValue");
                    v22 = (void *)objc_claimAutoreleasedReturnValue();
                    objc_msgSend(v18, "objectForKey:", v22);
                    v23 = (void *)objc_claimAutoreleasedReturnValue();

                    if (v23)
                    {
                      objc_msgSend(v21, "stringValueSafe");
                      v24 = (void *)objc_claimAutoreleasedReturnValue();
                      objc_msgSend(v18, "hmf_dictionaryForKey:", v24);
                      v25 = (void *)objc_claimAutoreleasedReturnValue();

                      objc_msgSend(v25, "hmf_numberForKey:", CFSTR("kCharacteristicValueUpdateReasonKey"));
                      v26 = (void *)objc_claimAutoreleasedReturnValue();
                      v27 = v26;
                      if (v26 && (objc_msgSend(v26, "unsignedIntegerValue") & 1) != 0)
                      {
                        v28 = (void *)MEMORY[0x227676638]();
                        v29 = self;
                        HMFGetOSLogHandle();
                        v30 = objc_claimAutoreleasedReturnValue();
                        if (os_log_type_enabled(v30, OS_LOG_TYPE_INFO))
                        {
                          HMFGetLogIdentifier();
                          v31 = (void *)objc_claimAutoreleasedReturnValue();
                          objc_msgSend(v20, "shortDescription");
                          v32 = (void *)objc_claimAutoreleasedReturnValue();
                          *(_DWORD *)buf = 138543874;
                          v84 = v31;
                          v85 = 2112;
                          v86 = v32;
                          v87 = 2112;
                          v88 = v61;
                          v33 = v30;
                          v34 = OS_LOG_TYPE_INFO;
                          v35 = "%{public}@Received persistent characteristic changed notification for bulletin character"
                                "istic (%@), accessoryUUID %@";
LABEL_31:
                          _os_log_impl(&dword_2218F0000, v33, v34, v35, buf, 0x20u);

                          self = v60;
                        }
LABEL_32:

                        objc_autoreleasePoolPop(v28);
                      }
                      else
                      {
                        if (objc_msgSend(v62, "containsObject:", v21))
                        {
                          v28 = (void *)MEMORY[0x227676638]();
                          v29 = self;
                          HMFGetOSLogHandle();
                          v30 = objc_claimAutoreleasedReturnValue();
                          if (os_log_type_enabled(v30, OS_LOG_TYPE_DEBUG))
                          {
                            HMFGetLogIdentifier();
                            v31 = (void *)objc_claimAutoreleasedReturnValue();
                            objc_msgSend(v20, "shortDescription");
                            v32 = (void *)objc_claimAutoreleasedReturnValue();
                            *(_DWORD *)buf = 138543874;
                            v84 = v31;
                            v85 = 2112;
                            v86 = v32;
                            v87 = 2112;
                            v88 = v61;
                            v33 = v30;
                            v34 = OS_LOG_TYPE_DEBUG;
                            v35 = "%{public}@Received persistent characteristic changed notification for characteristic ("
                                  "%@), accessoryUUID %@";
                            goto LABEL_31;
                          }
                          goto LABEL_32;
                        }
                        if (objc_msgSend(v59, "containsObject:", v21))
                        {
                          v36 = (void *)MEMORY[0x227676638]();
                          v37 = self;
                          HMFGetOSLogHandle();
                          v38 = objc_claimAutoreleasedReturnValue();
                          if (os_log_type_enabled(v38, OS_LOG_TYPE_ERROR))
                          {
                            HMFGetLogIdentifier();
                            v39 = (void *)objc_claimAutoreleasedReturnValue();
                            objc_msgSend(v20, "shortDescription");
                            v57 = v36;
                            v40 = (void *)objc_claimAutoreleasedReturnValue();
                            *(_DWORD *)buf = 138543874;
                            v84 = v39;
                            v85 = 2112;
                            v86 = v40;
                            v87 = 2112;
                            v88 = v61;
                            _os_log_impl(&dword_2218F0000, v38, OS_LOG_TYPE_ERROR, "%{public}@Received unexpected characteristic changed notification for characteristic (%@), accessoryUUID %@", buf, 0x20u);

                            v36 = v57;
                            self = v60;
                          }

                          objc_autoreleasePoolPop(v36);
                          objc_msgSend(v58, "addObject:", v20);
                        }
                      }

                    }
                  }
                  v65 = objc_msgSend(v63, "countByEnumeratingWithState:objects:count:", &v66, v89, 16);
                  if (!v65)
                  {
LABEL_36:

                    i = v56;
                    break;
                  }
                }
              }

            }
            v55 = objc_msgSend(v52, "countByEnumeratingWithState:objects:count:", &v70, v90, 16);
          }
          while (v55);
        }

        v10 = v51 + 1;
      }
      while (v51 + 1 != v50);
      v50 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v74, v91, 16);
      if (!v50)
      {
LABEL_41:

        objc_autoreleasePoolPop(context);
        v7 = (void *)objc_msgSend(v58, "copy");

        v4 = v44;
        goto LABEL_42;
      }
    }
  }
  v7 = (void *)MEMORY[0x24BDBD1A8];
LABEL_42:

  return v7;
}

- (void)_handleRename:(id)a3
{
  id v4;
  void *v5;
  unint64_t v6;
  void *v7;
  HMDHome *v8;
  NSObject *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  HMDHomeModel *v16;
  void *v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  HMDHomeModel *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  _QWORD v28[4];
  id v29;
  id v30;
  _QWORD v31[2];
  uint8_t buf[4];
  void *v33;
  uint64_t v34;

  v34 = *MEMORY[0x24BDAC8D0];
  v4 = a3;
  objc_msgSend(v4, "stringForKey:", CFSTR("kHomeName"));
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = HMMaxLengthForNaming();
  if (objc_msgSend(v5, "length") <= v6)
  {
    -[HMDHome homeManager](self, "homeManager");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHome name](self, "name");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "uuid");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    v31[0] = v13;
    -[HMDHome uuid](self, "uuid");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    v31[1] = v14;
    objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", v31, 2);
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "replaceName:withNewName:inNamespaces:", v12, v5, v15);
    v16 = (HMDHomeModel *)objc_claimAutoreleasedReturnValue();

    if (v16)
    {
      if (-[HMDHomeModel code](v16, "code") == 31)
      {
        v17 = (void *)MEMORY[0x24BDD1540];
        v18 = *MEMORY[0x24BDD5BD8];
        -[HMDHomeModel userInfo](v16, "userInfo");
        v19 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v17, "errorWithDomain:code:userInfo:", v18, 32, v19);
        v20 = objc_claimAutoreleasedReturnValue();

        v16 = (HMDHomeModel *)v20;
      }
      objc_msgSend(v4, "respondWithError:", v16);
    }
    else
    {
      v21 = [HMDHomeModel alloc];
      -[HMDHome uuid](self, "uuid");
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v11, "uuid");
      v23 = (void *)objc_claimAutoreleasedReturnValue();
      v16 = -[HMDBackingStoreModelObject initWithObjectChangeType:uuid:parentUUID:](v21, "initWithObjectChangeType:uuid:parentUUID:", 2, v22, v23);

      -[HMDHomeModel setName:](v16, "setName:", v5);
      -[HMDHome backingStore](self, "backingStore");
      v24 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "name");
      v25 = (void *)objc_claimAutoreleasedReturnValue();
      +[HMDBackingStoreTransactionOptions defaultXPCOptions](HMDBackingStoreTransactionOptions, "defaultXPCOptions");
      v26 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v24, "transaction:options:", v25, v26);
      v27 = (void *)objc_claimAutoreleasedReturnValue();

      objc_msgSend(v27, "add:", v16);
      v28[0] = MEMORY[0x24BDAC760];
      v28[1] = 3221225472;
      v28[2] = __25__HMDHome__handleRename___block_invoke;
      v28[3] = &unk_24E79BCC8;
      v29 = v4;
      v30 = v5;
      objc_msgSend(v27, "run:", v28);

    }
  }
  else
  {
    v7 = (void *)MEMORY[0x227676638]();
    v8 = self;
    HMFGetOSLogHandle();
    v9 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v33 = v10;
      _os_log_impl(&dword_2218F0000, v9, OS_LOG_TYPE_ERROR, "%{public}@New name is longer than the pre-defined max length", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v7);
    objc_msgSend(MEMORY[0x24BDD1540], "hmErrorWithCode:", 46);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "respondWithError:", v11);
  }

}

- (id)_handleRenameHomeModel:(id)a3 message:(id)a4
{
  id v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  char v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  id v17;
  void *v18;
  void *v19;
  const __CFString *v21;
  void *v22;
  _QWORD v23[3];

  v23[2] = *MEMORY[0x24BDAC8D0];
  v6 = a4;
  objc_msgSend(a3, "name");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "hm_truncatedNameString");
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  if (v8 && objc_msgSend(v8, "length"))
  {
    objc_msgSend(v6, "transactionResult");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "label");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v11 = objc_msgSend(v10, "isEqualToString:", CFSTR("kRenameHomeRequestKey"));

    if ((v11 & 1) == 0)
    {
      -[HMDHome homeManager](self, "homeManager");
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      -[HMDHome name](self, "name");
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v12, "uuid");
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      v23[0] = v14;
      -[HMDHome uuid](self, "uuid");
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      v23[1] = v15;
      objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", v23, 2);
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      v17 = (id)objc_msgSend(v12, "replaceName:withNewName:inNamespaces:", v13, v8, v16);

    }
    -[HMDHome setName:](self, "setName:", v8);
    v21 = CFSTR("HMDHomeNameNotificationKey");
    v22 = v8;
    objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", &v22, &v21, 1);
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    logAndPostNotification(CFSTR("HMDHomeNameChangedNotification"), self, v18);

    v19 = 0;
  }
  else
  {
    objc_msgSend(MEMORY[0x24BDD1540], "errorWithDomain:code:userInfo:", *MEMORY[0x24BDD5BD8], 20, 0);
    v19 = (void *)objc_claimAutoreleasedReturnValue();
  }

  return v19;
}

- (void)_handleHomeDataRequest:(id)a3
{
  void *v4;
  id v5;

  v5 = a3;
  -[HMDHome residentSyncManager](self, "residentSyncManager");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "performSync");

  objc_msgSend(v5, "respondWithSuccess");
}

- (void)_handleAddRoom:(id)a3
{
  id v4;
  void *v5;
  unint64_t v6;
  void *v7;
  HMDHome *v8;
  NSObject *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  void *v13;
  void *v14;
  unint64_t v15;
  unint64_t v16;
  void *v17;
  void *v18;
  HMDHome *v19;
  NSObject *v20;
  void *v21;
  void *v22;
  HMDHome *v23;
  NSObject *v24;
  void *v25;
  HMDRoomModel *v26;
  void *v27;
  void *v28;
  HMDRoomModel *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  int v34;
  void *v35;
  __int16 v36;
  void *v37;
  __int16 v38;
  void *v39;
  uint64_t v40;

  v40 = *MEMORY[0x24BDAC8D0];
  v4 = a3;
  objc_msgSend(v4, "stringForKey:", CFSTR("kRoomName"));
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = HMMaxLengthForNaming();
  if (objc_msgSend(v5, "length") <= v6)
  {
    -[HMDHome roomWithName:](self, "roomWithName:", v5);
    v12 = objc_claimAutoreleasedReturnValue();
    if (v12)
    {
      v11 = (void *)v12;
      objc_msgSend(MEMORY[0x24BDD1540], "hmErrorWithCode:", 1);
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "respondWithError:", v13);

      goto LABEL_17;
    }
    -[HMDHome rooms](self, "rooms");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    v15 = objc_msgSend(v14, "count");
    v16 = maximumRoomsPerHome;

    if (v15 >= v16)
    {
      v22 = (void *)MEMORY[0x227676638]();
      v23 = self;
      HMFGetOSLogHandle();
      v24 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v25 = (void *)objc_claimAutoreleasedReturnValue();
        v34 = 138543618;
        v35 = v25;
        v36 = 2112;
        v37 = v5;
        _os_log_impl(&dword_2218F0000, v24, OS_LOG_TYPE_ERROR, "%{public}@Can't add room %@ to home; already at maximum rooms for home",
          (uint8_t *)&v34,
          0x16u);

      }
      objc_autoreleasePoolPop(v22);
      objc_msgSend(MEMORY[0x24BDD1540], "hmErrorWithCode:", 49);
      v17 = (void *)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      -[HMDHome addName:](self, "addName:", v5);
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      if (!v17)
      {
        v26 = [HMDRoomModel alloc];
        objc_msgSend(v4, "uuidForKey:", CFSTR("kNewObjectUUIDKey"));
        v27 = (void *)objc_claimAutoreleasedReturnValue();
        -[HMDHome uuid](self, "uuid");
        v28 = (void *)objc_claimAutoreleasedReturnValue();
        v29 = -[HMDBackingStoreModelObject initWithObjectChangeType:uuid:parentUUID:](v26, "initWithObjectChangeType:uuid:parentUUID:", 1, v27, v28);

        -[HMDRoomModel setName:](v29, "setName:", v5);
        -[HMDHome backingStore](self, "backingStore");
        v30 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v4, "name");
        v31 = (void *)objc_claimAutoreleasedReturnValue();
        +[HMDBackingStoreTransactionOptions defaultXPCOptions](HMDBackingStoreTransactionOptions, "defaultXPCOptions");
        v32 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v30, "transaction:options:", v31, v32);
        v33 = (void *)objc_claimAutoreleasedReturnValue();

        objc_msgSend(v33, "add:withMessage:", v29, v4);
        objc_msgSend(v33, "run");

        goto LABEL_16;
      }
      v18 = (void *)MEMORY[0x227676638]();
      v19 = self;
      HMFGetOSLogHandle();
      v20 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v21 = (void *)objc_claimAutoreleasedReturnValue();
        v34 = 138543874;
        v35 = v21;
        v36 = 2112;
        v37 = v5;
        v38 = 2112;
        v39 = v17;
        _os_log_impl(&dword_2218F0000, v20, OS_LOG_TYPE_ERROR, "%{public}@Can't add room %@ to home; namespace error %@",
          (uint8_t *)&v34,
          0x20u);

      }
      objc_autoreleasePoolPop(v18);
    }
    objc_msgSend(v4, "respondWithError:", v17);
LABEL_16:

    v11 = 0;
    goto LABEL_17;
  }
  v7 = (void *)MEMORY[0x227676638]();
  v8 = self;
  HMFGetOSLogHandle();
  v9 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
  {
    HMFGetLogIdentifier();
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v34 = 138543362;
    v35 = v10;
    _os_log_impl(&dword_2218F0000, v9, OS_LOG_TYPE_ERROR, "%{public}@New name is longer than the pre-defined max length", (uint8_t *)&v34, 0xCu);

  }
  objc_autoreleasePoolPop(v7);
  objc_msgSend(MEMORY[0x24BDD1540], "hmErrorWithCode:", 46);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "respondWithError:", v11);
LABEL_17:

}

- (void)_handleAddRoomModel:(id)a3 message:(id)a4
{
  id v6;
  id v7;
  void *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  void *v12;
  HMDHome *v13;
  NSObject *v14;
  void *v15;
  HMDRoom *v16;
  void *v17;
  void *v18;
  void *v19;
  void (**v20)(_QWORD, _QWORD, _QWORD);
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  HMDHome *v29;
  NSObject *v30;
  void *v31;
  void *v32;
  id v33;
  _QWORD v34[3];
  _QWORD v35[3];
  uint8_t buf[4];
  void *v37;
  __int16 v38;
  uint64_t v39;
  uint64_t v40;

  v40 = *MEMORY[0x24BDAC8D0];
  v6 = a3;
  v7 = a4;
  objc_msgSend(v6, "name");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "uuid");
  v9 = objc_claimAutoreleasedReturnValue();
  v10 = (void *)v9;
  if (v8 && v9)
  {
    v33 = v6;
    objc_msgSend(v8, "hm_truncatedNameString");
    v11 = objc_claimAutoreleasedReturnValue();

    v12 = (void *)MEMORY[0x227676638]();
    v13 = self;
    HMFGetOSLogHandle();
    v14 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v37 = v15;
      v38 = 2112;
      v39 = v11;
      _os_log_impl(&dword_2218F0000, v14, OS_LOG_TYPE_INFO, "%{public}@Add room: %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v12);
    v16 = -[HMDRoom initWithName:uuid:home:]([HMDRoom alloc], "initWithName:uuid:home:", v11, v10, v13);
    -[HMDHome rooms](v13, "rooms");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v17, "addObject:", v16);

    -[HMDHome msgDispatcher](v13, "msgDispatcher");
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHome workQueue](v13, "workQueue");
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDRoom configure:queue:](v16, "configure:queue:", v18, v19);

    objc_msgSend(v7, "transactionResult");
    v20 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
    objc_msgSend(v20, "markChanged");
    objc_msgSend(v20, "markSaveToAssistant");
    v34[0] = CFSTR("kHomeUUID");
    -[HMDHome uuid](v13, "uuid");
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v21, "UUIDString");
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    v35[0] = v22;
    v35[1] = v11;
    v34[1] = CFSTR("kRoomName");
    v34[2] = CFSTR("kRoomUUID");
    -[HMDRoom uuid](v16, "uuid");
    v23 = v7;
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v24, "UUIDString");
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    v35[2] = v25;
    objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v35, v34, 3);
    v26 = v10;
    v27 = (void *)objc_claimAutoreleasedReturnValue();

    v7 = v23;
    objc_msgSend(v23, "respondWithPayload:", v27);

    v10 = v26;
    v8 = (void *)v11;
    v6 = v33;
    goto LABEL_10;
  }
  v28 = (void *)MEMORY[0x227676638]();
  v29 = self;
  HMFGetOSLogHandle();
  v30 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
  {
    HMFGetLogIdentifier();
    v31 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543618;
    v37 = v31;
    v38 = 2112;
    v39 = (uint64_t)v8;
    _os_log_impl(&dword_2218F0000, v30, OS_LOG_TYPE_ERROR, "%{public}@Can't add room %@; invalid parameter", buf, 0x16u);

  }
  objc_autoreleasePoolPop(v28);
  objc_msgSend(v7, "responseHandler");
  v32 = (void *)objc_claimAutoreleasedReturnValue();

  if (v32)
  {
    objc_msgSend(MEMORY[0x24BDD1540], "hmErrorWithCode:", 3);
    v16 = (HMDRoom *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "responseHandler");
    v20 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
    ((void (**)(_QWORD, HMDRoom *, _QWORD))v20)[2](v20, v16, 0);
LABEL_10:

  }
}

- (void)_handleRemoveRoom:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  int v8;
  void *v9;
  HMDHome *v10;
  NSObject *v11;
  void *v12;
  void *v13;
  void *v14;
  uint64_t v15;
  void *v16;
  HMDHome *v17;
  NSObject *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  NSObject *v23;
  NSObject *v24;
  void *v25;
  HMDRoomModel *v26;
  void *v27;
  uint64_t v28;
  void *v29;
  id v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t i;
  void *v39;
  void *v40;
  void *v41;
  int v42;
  void *v43;
  void *v44;
  void *v45;
  void *v46;
  void *v47;
  void *v48;
  void *v49;
  HMDHome *v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  uint8_t v55[128];
  uint8_t buf[4];
  void *v57;
  __int16 v58;
  void *v59;
  uint64_t v60;

  v60 = *MEMORY[0x24BDAC8D0];
  v4 = a3;
  objc_msgSend(v4, "uuidForKey:", CFSTR("kRoomUUID"));
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v5)
  {
    v16 = (void *)MEMORY[0x227676638]();
    v17 = self;
    HMFGetOSLogHandle();
    v18 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "messagePayload");
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v57 = v19;
      v58 = 2112;
      v59 = v20;
      _os_log_impl(&dword_2218F0000, v18, OS_LOG_TYPE_ERROR, "%{public}@Cannot find room UUID in remove room message payload: %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v16);
    v14 = (void *)MEMORY[0x24BDD1540];
    v15 = 2;
    goto LABEL_9;
  }
  -[HMDHome roomForEntireHome](self, "roomForEntireHome");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "uuid");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = objc_msgSend(v5, "isEqual:", v7);

  if (v8)
  {
    v9 = (void *)MEMORY[0x227676638]();
    v10 = self;
    HMFGetOSLogHandle();
    v11 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      -[HMDHome roomForEntireHome](v10, "roomForEntireHome");
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v57 = v12;
      v58 = 2112;
      v59 = v13;
      _os_log_impl(&dword_2218F0000, v11, OS_LOG_TYPE_ERROR, "%{public}@Cannot handle request to remove roomForEntireHome: %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v9);
    v14 = (void *)MEMORY[0x24BDD1540];
    v15 = 29;
LABEL_9:
    objc_msgSend(v14, "hmErrorWithCode:", v15);
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "respondWithError:", v21);
    goto LABEL_29;
  }
  -[HMDHome roomWithUUID:](self, "roomWithUUID:", v5);
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  v22 = (void *)MEMORY[0x227676638]();
  v50 = self;
  HMFGetOSLogHandle();
  v23 = objc_claimAutoreleasedReturnValue();
  v24 = v23;
  if (v21)
  {
    if (os_log_type_enabled(v23, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v25 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v57 = v25;
      v58 = 2112;
      v59 = v21;
      _os_log_impl(&dword_2218F0000, v24, OS_LOG_TYPE_INFO, "%{public}@Removing room: %@", buf, 0x16u);

    }
    v48 = v21;

    objc_autoreleasePoolPop(v22);
    v26 = [HMDRoomModel alloc];
    -[HMDHome uuid](v50, "uuid");
    v27 = (void *)objc_claimAutoreleasedReturnValue();
    v28 = -[HMDBackingStoreModelObject initWithObjectChangeType:uuid:parentUUID:](v26, "initWithObjectChangeType:uuid:parentUUID:", 3, v5, v27);

    -[HMDHome backingStore](v50, "backingStore");
    v29 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "name");
    v30 = v4;
    v31 = (void *)objc_claimAutoreleasedReturnValue();
    +[HMDBackingStoreTransactionOptions defaultXPCOptions](HMDBackingStoreTransactionOptions, "defaultXPCOptions");
    v32 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v29, "transaction:options:", v31, v32);
    v33 = (void *)objc_claimAutoreleasedReturnValue();

    v47 = (void *)v28;
    v49 = v30;
    objc_msgSend(v33, "add:withMessage:", v28, v30);
    v53 = 0u;
    v54 = 0u;
    v51 = 0u;
    v52 = 0u;
    -[HMDHome accessories](v50, "accessories");
    v34 = (void *)objc_claimAutoreleasedReturnValue();
    v35 = objc_msgSend(v34, "countByEnumeratingWithState:objects:count:", &v51, v55, 16);
    if (v35)
    {
      v36 = v35;
      v37 = *(_QWORD *)v52;
      do
      {
        for (i = 0; i != v36; ++i)
        {
          if (*(_QWORD *)v52 != v37)
            objc_enumerationMutation(v34);
          v39 = *(void **)(*((_QWORD *)&v51 + 1) + 8 * i);
          objc_msgSend(v39, "room");
          v40 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v40, "uuid");
          v41 = (void *)objc_claimAutoreleasedReturnValue();
          v42 = objc_msgSend(v5, "isEqual:", v41);

          if (v42)
          {
            -[HMDHome roomForEntireHome](v50, "roomForEntireHome");
            v43 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v39, "modelWithUpdatedRoom:", v43);
            v44 = (void *)objc_claimAutoreleasedReturnValue();

            if (v44)
              objc_msgSend(v33, "add:", v44);

          }
        }
        v36 = objc_msgSend(v34, "countByEnumeratingWithState:objects:count:", &v51, v55, 16);
      }
      while (v36);
    }

    objc_msgSend(v33, "run");
    v21 = v48;
    v4 = v49;
    v45 = v47;
  }
  else
  {
    if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v46 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v57 = v46;
      v58 = 2112;
      v59 = v5;
      _os_log_impl(&dword_2218F0000, v24, OS_LOG_TYPE_ERROR, "%{public}@Could not find room to remove with UUID: %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v22);
    objc_msgSend(MEMORY[0x24BDD1540], "hmErrorWithCode:", 2);
    v45 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "respondWithError:", v45);
  }

LABEL_29:
}

- (void)_handleRemoveRoomModel:(id)a3 message:(id)a4
{
  id v6;
  id v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  int v14;
  void *v15;
  void *v16;
  void (**v17)(_QWORD, _QWORD, _QWORD);
  void *v18;
  void *v19;
  HMDHome *v20;
  NSObject *v21;
  void *v22;
  void *v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t i;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t j;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  int v38;
  void *v39;
  void *v40;
  void *v41;
  id v42;
  void *v43;
  void *v44;
  void *v45;
  void *v46;
  void *v47;
  void *v48;
  void *v49;
  id v50;
  void *v51;
  HMDHome *v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  _QWORD v62[3];
  _QWORD v63[3];
  _BYTE v64[128];
  uint8_t v65[128];
  uint8_t buf[4];
  void *v67;
  __int16 v68;
  void *v69;
  uint64_t v70;

  v70 = *MEMORY[0x24BDAC8D0];
  v6 = a3;
  v7 = a4;
  objc_msgSend(v6, "uuid");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHome roomWithUUID:](self, "roomWithUUID:", v8);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = v9;
  if (v9)
  {
    v51 = v8;
    objc_msgSend(v9, "uuid");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHome roomForEntireHome](self, "roomForEntireHome");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "uuid");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    v14 = objc_msgSend(v11, "isEqual:", v13);

    if (v14)
    {
      objc_msgSend(v7, "responseHandler");
      v15 = (void *)objc_claimAutoreleasedReturnValue();

      v8 = v51;
      if (v15)
      {
        objc_msgSend(MEMORY[0x24BDD1540], "hmErrorWithCode:", 29);
        v16 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v7, "responseHandler");
        v17 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
        ((void (**)(_QWORD, void *, _QWORD))v17)[2](v17, v16, 0);

      }
    }
    else
    {
      v53 = v7;
      v19 = (void *)MEMORY[0x227676638]();
      v20 = self;
      HMFGetOSLogHandle();
      v21 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v22 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v10, "name");
        v23 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        v67 = v22;
        v68 = 2112;
        v69 = v23;
        _os_log_impl(&dword_2218F0000, v21, OS_LOG_TYPE_INFO, "%{public}@Remove room: %@", buf, 0x16u);

      }
      objc_autoreleasePoolPop(v19);
      v60 = 0u;
      v61 = 0u;
      v58 = 0u;
      v59 = 0u;
      -[HMDHome zones](v20, "zones");
      v24 = (void *)objc_claimAutoreleasedReturnValue();
      v25 = objc_msgSend(v24, "countByEnumeratingWithState:objects:count:", &v58, v65, 16);
      if (v25)
      {
        v26 = v25;
        v27 = *(_QWORD *)v59;
        do
        {
          for (i = 0; i != v26; ++i)
          {
            if (*(_QWORD *)v59 != v27)
              objc_enumerationMutation(v24);
            objc_msgSend(*(id *)(*((_QWORD *)&v58 + 1) + 8 * i), "removeRoom:", v10);
          }
          v26 = objc_msgSend(v24, "countByEnumeratingWithState:objects:count:", &v58, v65, 16);
        }
        while (v26);
      }
      v50 = v6;

      v56 = 0u;
      v57 = 0u;
      v54 = 0u;
      v55 = 0u;
      v52 = v20;
      -[HMDHome accessories](v20, "accessories");
      v29 = (void *)objc_claimAutoreleasedReturnValue();
      v30 = objc_msgSend(v29, "countByEnumeratingWithState:objects:count:", &v54, v64, 16);
      if (v30)
      {
        v31 = v30;
        v32 = *(_QWORD *)v55;
        do
        {
          for (j = 0; j != v31; ++j)
          {
            if (*(_QWORD *)v55 != v32)
              objc_enumerationMutation(v29);
            v34 = *(void **)(*((_QWORD *)&v54 + 1) + 8 * j);
            objc_msgSend(v10, "uuid", v50);
            v35 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v34, "room");
            v36 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v36, "uuid");
            v37 = (void *)objc_claimAutoreleasedReturnValue();
            v38 = objc_msgSend(v35, "isEqual:", v37);

            if (v38)
            {
              objc_msgSend(v53, "transactionResult");
              v39 = (void *)objc_claimAutoreleasedReturnValue();
              -[HMDHome roomForEntireHome](v52, "roomForEntireHome");
              v40 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v34, "updateRoom:source:", v40, objc_msgSend(v39, "source"));

            }
          }
          v31 = objc_msgSend(v29, "countByEnumeratingWithState:objects:count:", &v54, v64, 16);
        }
        while (v31);
      }

      objc_msgSend(v10, "name");
      v41 = (void *)objc_claimAutoreleasedReturnValue();
      v42 = -[HMDHome removeName:](v52, "removeName:", v41);

      -[HMDHome rooms](v52, "rooms");
      v43 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v43, "removeObject:", v10);

      v7 = v53;
      objc_msgSend(v53, "transactionResult");
      v44 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v44, "markChanged");
      objc_msgSend(v44, "markSaveToAssistant");
      v62[0] = CFSTR("kHomeUUID");
      -[HMDHome uuid](v52, "uuid");
      v45 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v45, "UUIDString");
      v46 = (void *)objc_claimAutoreleasedReturnValue();
      v63[0] = v46;
      v62[1] = CFSTR("kRoomName");
      objc_msgSend(v10, "name");
      v47 = (void *)objc_claimAutoreleasedReturnValue();
      v63[1] = v47;
      v62[2] = CFSTR("kRoomUUID");
      v8 = v51;
      objc_msgSend(v51, "UUIDString");
      v48 = (void *)objc_claimAutoreleasedReturnValue();
      v63[2] = v48;
      objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v63, v62, 3);
      v49 = (void *)objc_claimAutoreleasedReturnValue();

      objc_msgSend(v53, "respondWithPayload:", v49);
      v6 = v50;
    }
  }
  else
  {
    objc_msgSend(MEMORY[0x24BDD1540], "hmErrorWithCode:", 2);
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "respondWithError:", v18);

  }
}

- (void)_handleAddZone:(id)a3
{
  id v4;
  void *v5;
  uint64_t v6;
  void *v7;
  unint64_t v8;
  void *v9;
  HMDHome *v10;
  NSObject *v11;
  void *v12;
  void *v13;
  uint64_t v14;
  void *v15;
  void *v16;
  uint64_t v17;
  void *v18;
  unint64_t v19;
  unint64_t v20;
  void *v21;
  void *v22;
  HMDHome *v23;
  NSObject *v24;
  void *v25;
  void *v26;
  HMDHome *v27;
  NSObject *v28;
  void *v29;
  HMDZoneModel *v30;
  void *v31;
  HMDZoneModel *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  _QWORD v37[4];
  id v38;
  id v39;
  id v40;
  uint8_t buf[4];
  void *v42;
  __int16 v43;
  void *v44;
  uint64_t v45;

  v45 = *MEMORY[0x24BDAC8D0];
  v4 = a3;
  objc_msgSend(v4, "stringForKey:", CFSTR("kZoneName"));
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "uuidForKey:", CFSTR("kNewObjectUUIDKey"));
  v6 = objc_claimAutoreleasedReturnValue();
  v7 = (void *)v6;
  if (v5 && v6)
  {
    v8 = HMMaxLengthForNaming();
    if (objc_msgSend(v5, "length") > v8)
    {
      v9 = (void *)MEMORY[0x227676638]();
      v10 = self;
      HMFGetOSLogHandle();
      v11 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v12 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543362;
        v42 = v12;
        _os_log_impl(&dword_2218F0000, v11, OS_LOG_TYPE_ERROR, "%{public}@New name is longer than the pre-defined max length", buf, 0xCu);

      }
      objc_autoreleasePoolPop(v9);
      v13 = (void *)MEMORY[0x24BDD1540];
      v14 = 46;
      goto LABEL_8;
    }
    -[HMDHome zoneWithName:](self, "zoneWithName:", v5);
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    if (v15)
    {
      v16 = (void *)MEMORY[0x24BDD1540];
      v17 = 1;
    }
    else
    {
      -[HMDHome zones](self, "zones");
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      v19 = objc_msgSend(v18, "count");
      v20 = maximumZonesPerHome;

      if (v19 < v20)
      {
        -[HMDHome addName:](self, "addName:", v5);
        v21 = (void *)objc_claimAutoreleasedReturnValue();
        if (!v21)
        {
          v30 = [HMDZoneModel alloc];
          -[HMDHome uuid](self, "uuid");
          v31 = (void *)objc_claimAutoreleasedReturnValue();
          v32 = -[HMDBackingStoreModelObject initWithObjectChangeType:uuid:parentUUID:](v30, "initWithObjectChangeType:uuid:parentUUID:", 1, v7, v31);

          -[HMDZoneModel setName:](v32, "setName:", v5);
          -[HMDHome backingStore](self, "backingStore");
          v33 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v4, "name");
          v34 = (void *)objc_claimAutoreleasedReturnValue();
          +[HMDBackingStoreTransactionOptions defaultXPCOptions](HMDBackingStoreTransactionOptions, "defaultXPCOptions");
          v35 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v33, "transaction:options:", v34, v35);
          v36 = (void *)objc_claimAutoreleasedReturnValue();

          objc_msgSend(v36, "add:", v32);
          v37[0] = MEMORY[0x24BDAC760];
          v37[1] = 3221225472;
          v37[2] = __26__HMDHome__handleAddZone___block_invoke;
          v37[3] = &unk_24E799FD0;
          v38 = v4;
          v39 = v7;
          v40 = v5;
          objc_msgSend(v36, "run:", v37);

          goto LABEL_21;
        }
        v22 = (void *)MEMORY[0x227676638]();
        v23 = self;
        HMFGetOSLogHandle();
        v24 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
        {
          HMFGetLogIdentifier();
          v25 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543618;
          v42 = v25;
          v43 = 2112;
          v44 = v5;
          _os_log_impl(&dword_2218F0000, v24, OS_LOG_TYPE_ERROR, "%{public}@Can't add zone %@; invalid parameter",
            buf,
            0x16u);

        }
        objc_autoreleasePoolPop(v22);
LABEL_20:
        objc_msgSend(v4, "respondWithError:", v21);
LABEL_21:

        goto LABEL_22;
      }
      v26 = (void *)MEMORY[0x227676638]();
      v27 = self;
      HMFGetOSLogHandle();
      v28 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v29 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        v42 = v29;
        v43 = 2112;
        v44 = v5;
        _os_log_impl(&dword_2218F0000, v28, OS_LOG_TYPE_ERROR, "%{public}@Can't add zone %@; already at maximum zones for home",
          buf,
          0x16u);

      }
      objc_autoreleasePoolPop(v26);
      v16 = (void *)MEMORY[0x24BDD1540];
      v17 = 49;
    }
    objc_msgSend(v16, "hmErrorWithCode:", v17);
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    goto LABEL_20;
  }
  v13 = (void *)MEMORY[0x24BDD1540];
  v14 = 20;
LABEL_8:
  objc_msgSend(v13, "hmErrorWithCode:", v14);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "respondWithError:", v15);
LABEL_22:

}

- (void)_handleAddZoneModel:(id)a3 message:(id)a4
{
  id v6;
  id v7;
  void *v8;
  void *v9;
  uint64_t v10;
  void *v11;
  HMDZone *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  uint64_t v18;
  void *v19;
  HMDHome *v20;
  NSObject *v21;
  void *v22;
  int v23;
  void *v24;
  __int16 v25;
  void *v26;
  uint64_t v27;

  v27 = *MEMORY[0x24BDAC8D0];
  v6 = a3;
  v7 = a4;
  objc_msgSend(v6, "name");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "hm_truncatedNameString");
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v6, "uuid");
  v10 = objc_claimAutoreleasedReturnValue();
  v11 = (void *)v10;
  if (v9 && v10)
  {
    v12 = -[HMDZone initWithName:uuid:home:]([HMDZone alloc], "initWithName:uuid:home:", v9, v10, self);
    -[HMDHome zones](self, "zones");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "addObject:", v12);

    -[HMDHome msgDispatcher](self, "msgDispatcher");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHome workQueue](self, "workQueue");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDZone configure:queue:](v12, "configure:queue:", v14, v15);

    -[HMDZone updateZoneWithModel:message:error:](v12, "updateZoneWithModel:message:error:", v6, v7, 0);
    objc_msgSend(v7, "transactionResult");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v16, "markChanged");
    -[HMDZone roomUUIDs](v12, "roomUUIDs");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    v18 = objc_msgSend(v17, "count");

    if (v18)
      objc_msgSend(v16, "markSaveToAssistant");
    objc_msgSend(v7, "respondWithPayload:", 0);

  }
  else
  {
    v19 = (void *)MEMORY[0x227676638]();
    v20 = self;
    HMFGetOSLogHandle();
    v21 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      v23 = 138543618;
      v24 = v22;
      v25 = 2112;
      v26 = v9;
      _os_log_impl(&dword_2218F0000, v21, OS_LOG_TYPE_ERROR, "%{public}@Can't add zone %@; invalid parameter",
        (uint8_t *)&v23,
        0x16u);

    }
    objc_autoreleasePoolPop(v19);
    objc_msgSend(MEMORY[0x24BDD1540], "hmErrorWithCode:", 3);
    v12 = (HMDZone *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "respondWithError:", v12);
  }

}

- (void)_handleRemoveZone:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  HMDZoneModel *v7;
  void *v8;
  HMDZoneModel *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  _QWORD v14[4];
  id v15;

  v4 = a3;
  objc_msgSend(v4, "uuidForKey:", CFSTR("kZoneUUID"));
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHome zoneWithUUID:](self, "zoneWithUUID:", v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  if (v6)
  {
    v7 = [HMDZoneModel alloc];
    -[HMDHome uuid](self, "uuid");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = -[HMDBackingStoreModelObject initWithObjectChangeType:uuid:parentUUID:](v7, "initWithObjectChangeType:uuid:parentUUID:", 3, v5, v8);

    -[HMDHome backingStore](self, "backingStore");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "name");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    +[HMDBackingStoreTransactionOptions defaultXPCOptions](HMDBackingStoreTransactionOptions, "defaultXPCOptions");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "transaction:options:", v11, v12);
    v13 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v13, "add:", v9);
    v14[0] = MEMORY[0x24BDAC760];
    v14[1] = 3221225472;
    v14[2] = __29__HMDHome__handleRemoveZone___block_invoke;
    v14[3] = &unk_24E79BD80;
    v15 = v4;
    objc_msgSend(v13, "run:", v14);

  }
  else
  {
    objc_msgSend(MEMORY[0x24BDD1540], "hmErrorWithCode:", 2);
    v9 = (HMDZoneModel *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "respondWithError:", v9);
  }

}

- (void)_handleRemoveZoneModel:(id)a3 message:(id)a4
{
  id v6;
  id v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  id v12;
  void *v13;
  void *v14;
  void *v15;
  HMDHome *v16;
  NSObject *v17;
  void *v18;
  void *v19;
  int v20;
  void *v21;
  __int16 v22;
  void *v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v6 = a3;
  v7 = a4;
  objc_msgSend(v6, "uuid");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHome zoneWithUUID:](self, "zoneWithUUID:", v8);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = v9;
  if (v9)
  {
    objc_msgSend(v9, "name");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v12 = -[HMDHome removeName:](self, "removeName:", v11);

    -[HMDHome zones](self, "zones");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "removeObject:", v10);

    objc_msgSend(v7, "transactionResult");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v14, "markChanged");
    v15 = (void *)MEMORY[0x227676638](objc_msgSend(v14, "markSaveToAssistant"));
    v16 = self;
    HMFGetOSLogHandle();
    v17 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v10, "name");
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      v20 = 138543618;
      v21 = v18;
      v22 = 2112;
      v23 = v19;
      _os_log_impl(&dword_2218F0000, v17, OS_LOG_TYPE_INFO, "%{public}@Remove zone: %@", (uint8_t *)&v20, 0x16u);

    }
    objc_autoreleasePoolPop(v15);
  }
  else
  {
    objc_msgSend(MEMORY[0x24BDD1540], "hmErrorWithCode:", 2);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "respondWithError:", v14);
  }

}

- (HMDAccessory)currentAccessory
{
  void *v2;
  void *v3;

  -[HMDHome accessories](self, "accessories");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "na_firstObjectPassingTest:", &__block_literal_global_988);
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  return (HMDAccessory *)v3;
}

- (NSArray)accessories
{
  void *v3;

  os_unfair_recursive_lock_lock_with_options();
  -[NSMutableDictionary allValues](self->_accessories, "allValues");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  os_unfair_recursive_lock_unlock();
  return (NSArray *)v3;
}

- (void)setAccessories:(id)a3
{
  id v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  void *v11;
  id v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  _BYTE v26[128];
  _BYTE v27[128];
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  v4 = a3;
  -[HMDHome _setAccessories:](self, "_setAccessories:", v4);
  v24 = 0u;
  v25 = 0u;
  v22 = 0u;
  v23 = 0u;
  v5 = v4;
  v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v22, v27, 16);
  if (v6)
  {
    v7 = v6;
    v8 = *(_QWORD *)v23;
    do
    {
      v9 = 0;
      do
      {
        if (*(_QWORD *)v23 != v8)
          objc_enumerationMutation(v5);
        v10 = *(id *)(*((_QWORD *)&v22 + 1) + 8 * v9);
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0)
          v11 = v10;
        else
          v11 = 0;
        v12 = v11;

        if (v12)
        {
          v20 = 0u;
          v21 = 0u;
          v18 = 0u;
          v19 = 0u;
          -[HMDHome serviceGroups](self, "serviceGroups", 0);
          v13 = (void *)objc_claimAutoreleasedReturnValue();
          v14 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v18, v26, 16);
          if (v14)
          {
            v15 = v14;
            v16 = *(_QWORD *)v19;
            do
            {
              v17 = 0;
              do
              {
                if (*(_QWORD *)v19 != v16)
                  objc_enumerationMutation(v13);
                objc_msgSend(*(id *)(*((_QWORD *)&v18 + 1) + 8 * v17++), "fixupServicesForReplacementAccessory:", v12);
              }
              while (v15 != v17);
              v15 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v18, v26, 16);
            }
            while (v15);
          }

        }
        ++v9;
      }
      while (v9 != v7);
      v7 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v22, v27, 16);
    }
    while (v7);
  }

}

- (void)_setAccessories:(id)a3
{
  void *v4;
  NSMutableDictionary *v5;
  NSMutableDictionary *accessories;
  id v7;

  v7 = a3;
  os_unfair_recursive_lock_lock_with_options();
  if (v7)
  {
    objc_msgSend(v7, "na_dictionaryWithKeyGenerator:", &__block_literal_global_990);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    v5 = (NSMutableDictionary *)objc_msgSend(v4, "mutableCopy");
    accessories = self->_accessories;
    self->_accessories = v5;

  }
  else
  {
    -[NSMutableDictionary removeAllObjects](self->_accessories, "removeAllObjects");
  }
  os_unfair_recursive_lock_unlock();

}

- (NSArray)appleMediaAccessories
{
  void *v2;
  void *v3;

  -[HMDHome accessories](self, "accessories");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "na_map:", &__block_literal_global_991);
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  return (NSArray *)v3;
}

- (id)mediaSystemForAppleMediaAccessory:(id)a3
{
  id v4;
  void *v5;
  id v6;
  uint64_t v7;
  void *i;
  void *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  v4 = a3;
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  -[HMDHome mediaSystems](self, "mediaSystems", 0);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = (id)objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
  if (v6)
  {
    v7 = *(_QWORD *)v12;
    while (2)
    {
      for (i = 0; i != v6; i = (char *)i + 1)
      {
        if (*(_QWORD *)v12 != v7)
          objc_enumerationMutation(v5);
        v9 = *(void **)(*((_QWORD *)&v11 + 1) + 8 * (_QWORD)i);
        if ((_mediaSystemContainsAccessory(v9, v4) & 1) != 0)
        {
          v6 = v9;
          goto LABEL_11;
        }
      }
      v6 = (id)objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
      if (v6)
        continue;
      break;
    }
  }
LABEL_11:

  return v6;
}

- (id)audioDestinationControllerDataForDestination:(id)a3
{
  id v4;
  void *v5;
  id v6;
  void *v7;
  void *v8;
  _QWORD v10[4];
  id v11;

  v4 = a3;
  -[HMDHome appleMediaAccessories](self, "appleMediaAccessories");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v10[0] = MEMORY[0x24BDAC760];
  v10[1] = 3221225472;
  v10[2] = __56__HMDHome_audioDestinationControllerDataForDestination___block_invoke;
  v10[3] = &unk_24E79A558;
  v11 = v4;
  v6 = v4;
  objc_msgSend(v5, "na_firstObjectPassingTest:", v10);
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v7, "audioDestinationControllerData");
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  return v8;
}

- (id)targetAccessoriesWithDestinationIdentifiers:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  uint64_t v7;
  id v8;
  void *v9;
  id v10;
  void *v11;
  void *v12;
  uint64_t v13;
  void *v14;
  HMDHome *v15;
  NSObject *v16;
  void *v17;
  uint64_t v19;
  uint64_t v20;
  id (*v21)(uint64_t, void *);
  void *v22;
  id v23;
  _QWORD v24[4];
  id v25;
  uint8_t buf[4];
  void *v27;
  __int16 v28;
  id v29;
  __int16 v30;
  void *v31;
  uint64_t v32;

  v32 = *MEMORY[0x24BDAC8D0];
  v4 = a3;
  -[HMDHome appleMediaAccessories](self, "appleMediaAccessories");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHome mediaSystems](self, "mediaSystems");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = MEMORY[0x24BDAC760];
  v24[0] = MEMORY[0x24BDAC760];
  v24[1] = 3221225472;
  v24[2] = __55__HMDHome_targetAccessoriesWithDestinationIdentifiers___block_invoke;
  v24[3] = &unk_24E775FF0;
  v8 = v4;
  v25 = v8;
  objc_msgSend(v6, "na_map:", v24);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v19 = v7;
  v20 = 3221225472;
  v21 = __55__HMDHome_targetAccessoriesWithDestinationIdentifiers___block_invoke_2;
  v22 = &unk_24E776018;
  v10 = v8;
  v23 = v10;
  objc_msgSend(v5, "na_map:", &v19);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "arrayByAddingObjectsFromArray:", v11, v19, v20, v21, v22);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  v13 = objc_msgSend(v12, "count");
  if (v13 != objc_msgSend(v10, "count"))
  {
    v14 = (void *)MEMORY[0x227676638]();
    v15 = self;
    HMFGetOSLogHandle();
    v16 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543874;
      v27 = v17;
      v28 = 2112;
      v29 = v10;
      v30 = 2112;
      v31 = v12;
      _os_log_impl(&dword_2218F0000, v16, OS_LOG_TYPE_ERROR, "%{public}@Failed to get target accessories for destination identifiers: %@ targets: %@", buf, 0x20u);

    }
    objc_autoreleasePoolPop(v14);

    v12 = (void *)MEMORY[0x24BDBD1A8];
  }

  return v12;
}

- (id)destinationManagersWithDestinationIdentifiers:(id)a3 supportedOptions:(unint64_t)a4
{
  id v6;
  void *v7;
  id v8;
  void *v9;
  _QWORD v11[4];
  id v12;

  v6 = a3;
  -[HMDHome mediaDestinationManagersWithSupportedOptions:](self, "mediaDestinationManagersWithSupportedOptions:", a4);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v11[0] = MEMORY[0x24BDAC760];
  v11[1] = 3221225472;
  v11[2] = __74__HMDHome_destinationManagersWithDestinationIdentifiers_supportedOptions___block_invoke;
  v11[3] = &unk_24E786DC8;
  v12 = v6;
  v8 = v6;
  objc_msgSend(v7, "na_filter:", v11);
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  return v9;
}

- (id)rootDestinationManagerWithDescendantDestinationIdentifier:(id)a3
{
  id v4;
  void *v5;
  id v6;
  void *v7;
  void *v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t, void *);
  void *v13;
  HMDHome *v14;
  id v15;

  v4 = a3;
  -[HMDHome mediaSystems](self, "mediaSystems");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = MEMORY[0x24BDAC760];
  v11 = 3221225472;
  v12 = __69__HMDHome_rootDestinationManagerWithDescendantDestinationIdentifier___block_invoke;
  v13 = &unk_24E79A9C8;
  v14 = self;
  v15 = v4;
  v6 = v4;
  objc_msgSend(v5, "na_firstObjectPassingTest:", &v10);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "audioDestinationManager", v10, v11, v12, v13, v14);
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  return v8;
}

- (id)destinationManagerWithParentIdentifier:(id)a3
{
  id v4;
  id v5;
  void *v6;
  _QWORD v8[4];
  id v9;

  v4 = a3;
  v8[0] = MEMORY[0x24BDAC760];
  v8[1] = 3221225472;
  v8[2] = __50__HMDHome_destinationManagerWithParentIdentifier___block_invoke;
  v8[3] = &unk_24E786DC8;
  v9 = v4;
  v5 = v4;
  -[HMDHome destinationManagerPassingTest:](self, "destinationManagerPassingTest:", v8);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  return v6;
}

- (id)destinationManagerWithDestinationIdentifier:(id)a3
{
  id v4;
  id v5;
  void *v6;
  _QWORD v8[4];
  id v9;

  v4 = a3;
  v8[0] = MEMORY[0x24BDAC760];
  v8[1] = 3221225472;
  v8[2] = __55__HMDHome_destinationManagerWithDestinationIdentifier___block_invoke;
  v8[3] = &unk_24E786DC8;
  v9 = v4;
  v5 = v4;
  -[HMDHome destinationManagerPassingTest:](self, "destinationManagerPassingTest:", v8);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  return v6;
}

- (id)destinationManagerPassingTest:(id)a3
{
  uint64_t (**v4)(id, void *);
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  _BYTE v25[128];
  _BYTE v26[128];
  uint64_t v27;

  v27 = *MEMORY[0x24BDAC8D0];
  v4 = (uint64_t (**)(id, void *))a3;
  -[HMDHome appleMediaAccessories](self, "appleMediaAccessories");
  v21 = 0u;
  v22 = 0u;
  v23 = 0u;
  v24 = 0u;
  v5 = (id)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v21, v26, 16);
  if (v6)
  {
    v7 = v6;
    v8 = *(_QWORD *)v22;
    while (2)
    {
      v9 = 0;
      do
      {
        if (*(_QWORD *)v22 != v8)
          objc_enumerationMutation(v5);
        objc_msgSend(*(id *)(*((_QWORD *)&v21 + 1) + 8 * v9), "audioDestinationManager");
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        if (v10 && (v4[2](v4, v10) & 1) != 0)
        {
          v11 = v5;
          goto LABEL_22;
        }

        ++v9;
      }
      while (v7 != v9);
      v7 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v21, v26, 16);
      if (v7)
        continue;
      break;
    }
  }

  -[HMDHome mediaSystems](self, "mediaSystems");
  v17 = 0u;
  v18 = 0u;
  v19 = 0u;
  v20 = 0u;
  v11 = (id)objc_claimAutoreleasedReturnValue();
  v12 = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v17, v25, 16);
  if (v12)
  {
    v13 = v12;
    v14 = *(_QWORD *)v18;
LABEL_12:
    v15 = 0;
    while (1)
    {
      if (*(_QWORD *)v18 != v14)
        objc_enumerationMutation(v11);
      objc_msgSend(*(id *)(*((_QWORD *)&v17 + 1) + 8 * v15), "audioDestinationManager", (_QWORD)v17);
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      if (v10)
      {
        if ((v4[2](v4, v10) & 1) != 0)
          break;
      }

      if (v13 == ++v15)
      {
        v13 = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v17, v25, 16);
        if (v13)
          goto LABEL_12;
        goto LABEL_19;
      }
    }
  }
  else
  {
LABEL_19:
    v10 = 0;
  }

LABEL_22:
  return v10;
}

- (id)mediaDestinationManagersWithHomeTheaterSupportedOptions
{
  void *v3;
  void *v4;
  void *v5;
  id v6;
  void *v7;
  void *v8;
  _QWORD v10[4];
  id v11;

  -[HMDHome appleMediaAccessories](self, "appleMediaAccessories");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHome mediaSystems](self, "mediaSystems");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "na_map:", &__block_literal_global_997);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v10[0] = MEMORY[0x24BDAC760];
  v10[1] = 3221225472;
  v10[2] = __66__HMDHome_mediaDestinationManagersWithHomeTheaterSupportedOptions__block_invoke_2;
  v10[3] = &unk_24E7760A8;
  v11 = v4;
  v6 = v4;
  objc_msgSend(v3, "na_map:", v10);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "arrayByAddingObjectsFromArray:", v5);
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  return v8;
}

- (id)mediaDestinationManagersWithSupportedOptions:(unint64_t)a3
{
  void *v5;
  void *v6;
  uint64_t v7;
  void *v8;
  id v9;
  void *v10;
  void *v11;
  _QWORD v13[4];
  id v14;
  unint64_t v15;
  _QWORD v16[5];

  -[HMDHome appleMediaAccessories](self, "appleMediaAccessories");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHome mediaSystems](self, "mediaSystems");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = MEMORY[0x24BDAC760];
  v16[0] = MEMORY[0x24BDAC760];
  v16[1] = 3221225472;
  v16[2] = __56__HMDHome_mediaDestinationManagersWithSupportedOptions___block_invoke;
  v16[3] = &__block_descriptor_40_e54____HMDMediaDestinationManager__16__0__HMDMediaSystem_8l;
  v16[4] = a3;
  objc_msgSend(v6, "na_map:", v16);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v13[0] = v7;
  v13[1] = 3221225472;
  v13[2] = __56__HMDHome_mediaDestinationManagersWithSupportedOptions___block_invoke_2;
  v13[3] = &unk_24E7760F0;
  v14 = v6;
  v15 = a3;
  v9 = v6;
  objc_msgSend(v5, "na_map:", v13);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "arrayByAddingObjectsFromArray:", v8);
  v11 = (void *)objc_claimAutoreleasedReturnValue();

  return v11;
}

- (NSArray)mediaDestinations
{
  return (NSArray *)-[HMDHome mediaDestinationsInRoom:](self, "mediaDestinationsInRoom:", 0);
}

- (id)mediaDestinationsInRoom:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t i;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  int v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t j;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  char v28;
  void *v29;
  void *v31;
  void *v32;
  void *v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  _BYTE v42[128];
  _BYTE v43[128];
  uint64_t v44;

  v44 = *MEMORY[0x24BDAC8D0];
  v4 = a3;
  -[HMDHome appleMediaAccessories](self, "appleMediaAccessories");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHome mediaSystems](self, "mediaSystems");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v31 = v5;
  v33 = (void *)objc_msgSend(objc_alloc(MEMORY[0x24BDBCEB8]), "initWithCapacity:", objc_msgSend(v6, "count") + objc_msgSend(v5, "count"));
  v38 = 0u;
  v39 = 0u;
  v40 = 0u;
  v41 = 0u;
  v7 = v6;
  v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v38, v43, 16);
  if (v8)
  {
    v9 = v8;
    v10 = *(_QWORD *)v39;
    do
    {
      for (i = 0; i != v9; ++i)
      {
        if (*(_QWORD *)v39 != v10)
          objc_enumerationMutation(v7);
        v12 = *(void **)(*((_QWORD *)&v38 + 1) + 8 * i);
        objc_msgSend(v12, "audioDestination");
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        if (v13)
        {
          if (!v4)
            goto LABEL_9;
          objc_msgSend(v12, "room");
          v14 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v14, "uuid");
          v15 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v4, "uuid");
          v16 = (void *)objc_claimAutoreleasedReturnValue();
          v17 = objc_msgSend(v15, "hmf_isEqualToUUID:", v16);

          if (v17)
LABEL_9:
            objc_msgSend(v33, "addObject:", v13);
        }

      }
      v9 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v38, v43, 16);
    }
    while (v9);
  }
  v32 = v7;

  v36 = 0u;
  v37 = 0u;
  v34 = 0u;
  v35 = 0u;
  v18 = v31;
  v19 = objc_msgSend(v18, "countByEnumeratingWithState:objects:count:", &v34, v42, 16);
  if (v19)
  {
    v20 = v19;
    v21 = *(_QWORD *)v35;
    do
    {
      for (j = 0; j != v20; ++j)
      {
        if (*(_QWORD *)v35 != v21)
          objc_enumerationMutation(v18);
        v23 = *(void **)(*((_QWORD *)&v34 + 1) + 8 * j);
        objc_msgSend(v23, "audioDestination");
        v24 = (void *)objc_claimAutoreleasedReturnValue();
        if (v24)
        {
          if (!v4)
          {
            if ((_mediaSystemsContainsAccessory(v32, v23) & 1) != 0)
              goto LABEL_25;
LABEL_23:
            objc_msgSend(v33, "addObject:", v24);
            goto LABEL_25;
          }
          objc_msgSend(v23, "room");
          v25 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v25, "uuid");
          v26 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v4, "uuid");
          v27 = (void *)objc_claimAutoreleasedReturnValue();
          if ((objc_msgSend(v26, "hmf_isEqualToUUID:", v27) & 1) != 0)
          {
            v28 = _mediaSystemsContainsAccessory(v32, v23);

            if ((v28 & 1) == 0)
              goto LABEL_23;
          }
          else
          {

          }
        }
LABEL_25:

      }
      v20 = objc_msgSend(v18, "countByEnumeratingWithState:objects:count:", &v34, v42, 16);
    }
    while (v20);
  }

  v29 = (void *)objc_msgSend(v33, "copy");
  return v29;
}

- (int64_t)destinationTypeForDestinationWithIdentifier:(id)a3
{
  id v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  uint64_t i;
  void *v11;
  void *v12;
  char v13;
  void *v14;
  void *v15;
  char v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t j;
  void *v22;
  void *v23;
  char v24;
  void *v25;
  void *v26;
  char v27;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  _BYTE v37[128];
  _BYTE v38[128];
  uint64_t v39;

  v39 = *MEMORY[0x24BDAC8D0];
  v4 = a3;
  -[HMDHome appleMediaAccessories](self, "appleMediaAccessories");
  v33 = 0u;
  v34 = 0u;
  v35 = 0u;
  v36 = 0u;
  v5 = (id)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v33, v38, 16);
  if (v6)
  {
    v7 = v6;
    v8 = *(_QWORD *)v34;
    v9 = 3;
    while (2)
    {
      for (i = 0; i != v7; ++i)
      {
        if (*(_QWORD *)v34 != v8)
          objc_enumerationMutation(v5);
        v11 = *(void **)(*((_QWORD *)&v33 + 1) + 8 * i);
        objc_msgSend(v11, "uuid");
        v12 = (void *)objc_claimAutoreleasedReturnValue();
        v13 = objc_msgSend(v12, "hmf_isEqualToUUID:", v4);

        if ((v13 & 1) != 0)
        {
          v17 = v5;
          goto LABEL_26;
        }
        objc_msgSend(v11, "audioDestination");
        v14 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v14, "uniqueIdentifier");
        v15 = (void *)objc_claimAutoreleasedReturnValue();
        v16 = objc_msgSend(v15, "hmf_isEqualToUUID:", v4);

        if ((v16 & 1) != 0)
        {
          v17 = v5;
          v9 = 1;
          goto LABEL_26;
        }
      }
      v7 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v33, v38, 16);
      if (v7)
        continue;
      break;
    }
  }

  -[HMDHome mediaSystems](self, "mediaSystems");
  v29 = 0u;
  v30 = 0u;
  v31 = 0u;
  v32 = 0u;
  v17 = (id)objc_claimAutoreleasedReturnValue();
  v18 = objc_msgSend(v17, "countByEnumeratingWithState:objects:count:", &v29, v37, 16);
  if (v18)
  {
    v19 = v18;
    v20 = *(_QWORD *)v30;
    while (2)
    {
      for (j = 0; j != v19; ++j)
      {
        if (*(_QWORD *)v30 != v20)
          objc_enumerationMutation(v17);
        v22 = *(void **)(*((_QWORD *)&v29 + 1) + 8 * j);
        objc_msgSend(v22, "uuid", (_QWORD)v29);
        v23 = (void *)objc_claimAutoreleasedReturnValue();
        v24 = objc_msgSend(v23, "hmf_isEqualToUUID:", v4);

        if ((v24 & 1) != 0)
        {
          v9 = 4;
          goto LABEL_25;
        }
        objc_msgSend(v22, "audioDestination");
        v25 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v25, "uniqueIdentifier");
        v26 = (void *)objc_claimAutoreleasedReturnValue();
        v27 = objc_msgSend(v26, "hmf_isEqualToUUID:", v4);

        if ((v27 & 1) != 0)
        {
          v9 = 2;
          goto LABEL_25;
        }
      }
      v19 = objc_msgSend(v17, "countByEnumeratingWithState:objects:count:", &v29, v37, 16);
      v9 = 0;
      if (v19)
        continue;
      break;
    }
  }
  else
  {
    v9 = 0;
  }
LABEL_25:

LABEL_26:
  return v9;
}

- (id)destinationControllers
{
  void *v2;
  void *v3;

  -[HMDHome appleMediaAccessories](self, "appleMediaAccessories");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "na_map:", &__block_literal_global_1001);
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  return v3;
}

- (id)destinationControllerWithIdentifier:(id)a3
{
  id v4;
  void *v5;
  id v6;
  void *v7;
  _QWORD v9[4];
  id v10;

  v4 = a3;
  -[HMDHome destinationControllers](self, "destinationControllers");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v9[0] = MEMORY[0x24BDAC760];
  v9[1] = 3221225472;
  v9[2] = __47__HMDHome_destinationControllerWithIdentifier___block_invoke;
  v9[3] = &unk_24E776158;
  v10 = v4;
  v6 = v4;
  objc_msgSend(v5, "na_firstObjectPassingTest:", v9);
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  return v7;
}

- (id)destinationControllerWithDestinationIdentifier:(id)a3
{
  id v4;
  void *v5;
  id v6;
  void *v7;
  _QWORD v9[4];
  id v10;

  v4 = a3;
  -[HMDHome destinationControllers](self, "destinationControllers");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v9[0] = MEMORY[0x24BDAC760];
  v9[1] = 3221225472;
  v9[2] = __58__HMDHome_destinationControllerWithDestinationIdentifier___block_invoke;
  v9[3] = &unk_24E776158;
  v10 = v4;
  v6 = v4;
  objc_msgSend(v5, "na_firstObjectPassingTest:", v9);
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  return v7;
}

- (id)destinationControllerWithCommittedDestinationIdentifier:(id)a3
{
  id v4;
  void *v5;
  id v6;
  void *v7;
  _QWORD v9[4];
  id v10;

  v4 = a3;
  -[HMDHome destinationControllers](self, "destinationControllers");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v9[0] = MEMORY[0x24BDAC760];
  v9[1] = 3221225472;
  v9[2] = __67__HMDHome_destinationControllerWithCommittedDestinationIdentifier___block_invoke;
  v9[3] = &unk_24E776158;
  v10 = v4;
  v6 = v4;
  objc_msgSend(v5, "na_firstObjectPassingTest:", v9);
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  return v7;
}

- (BOOL)shouldEncodeLegacyLocationServiceSettingForSettingsParentUUID:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  id v10;
  HMDHome *v11;
  NSObject *v12;
  void *v13;
  int v15;
  void *v16;
  __int16 v17;
  id v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v4 = a3;
  -[HMDHome mediaSystemWithUUID:](self, "mediaSystemWithUUID:", v4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = v5;
  if (v5)
  {
    LODWORD(v7) = objc_msgSend(v5, "componentsSupportsHomeLevelLocationServiceSetting") ^ 1;
  }
  else
  {
    -[HMDHome accessoryWithUUID:](self, "accessoryWithUUID:", v4);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
      v9 = v8;
    else
      v9 = 0;
    v10 = v9;

    if (v10)
    {
      LODWORD(v7) = objc_msgSend(v10, "supportsHomeLevelLocationServiceSetting") ^ 1;
    }
    else
    {
      v7 = (void *)MEMORY[0x227676638]();
      v11 = self;
      HMFGetOSLogHandle();
      v12 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        v15 = 138543618;
        v16 = v13;
        v17 = 2112;
        v18 = v4;
        _os_log_impl(&dword_2218F0000, v12, OS_LOG_TYPE_ERROR, "%{public}@Failed to filter legacy location service setting due to no parent found with uuid: %@", (uint8_t *)&v15, 0x16u);

      }
      objc_autoreleasePoolPop(v7);
      LOBYTE(v7) = 0;
    }

  }
  return (char)v7;
}

- (unint64_t)assistantAccessCapableAccessoryCount
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t i;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _BYTE v13[128];
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  v9 = 0u;
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  -[HMDHome accessories](self, "accessories", 0);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
  if (v3)
  {
    v4 = v3;
    v5 = 0;
    v6 = *(_QWORD *)v10;
    do
    {
      for (i = 0; i != v4; ++i)
      {
        if (*(_QWORD *)v10 != v6)
          objc_enumerationMutation(v2);
        v5 += +[HMDAssistantAccessControl isAccessorySupported:](HMDAssistantAccessControl, "isAccessorySupported:", *(_QWORD *)(*((_QWORD *)&v9 + 1) + 8 * i));
      }
      v4 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
    }
    while (v4);
  }
  else
  {
    v5 = 0;
  }

  return v5;
}

- (void)addAccessory:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  HMDHome *v8;
  NSObject *v9;
  void *v10;
  const char *v11;
  NSObject *v12;
  uint32_t v13;
  void *v14;
  void *v15;
  HMDHome *v16;
  NSObject *v17;
  void *v18;
  void *v19;
  HMDAssertionLogEvent *v20;
  void *v21;
  HMDAssertionLogEvent *v22;
  void *v23;
  uint8_t buf[4];
  void *v25;
  __int16 v26;
  void *v27;
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  v4 = a3;
  v5 = v4;
  if (!v4)
  {
    v7 = (void *)MEMORY[0x227676638]();
    v8 = self;
    HMFGetOSLogHandle();
    v9 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v25 = v10;
      v11 = "%{public}@Attempting to add a nil accessory";
      v12 = v9;
      v13 = 12;
      goto LABEL_8;
    }
LABEL_9:

    objc_autoreleasePoolPop(v7);
    goto LABEL_11;
  }
  objc_msgSend(v4, "uuid");
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  if (v6)
  {
    if (!-[HMDHome _addAccessory:](self, "_addAccessory:", v5))
    {
      v7 = (void *)MEMORY[0x227676638]();
      v8 = self;
      HMFGetOSLogHandle();
      v9 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        v25 = v10;
        v26 = 2112;
        v27 = v5;
        v11 = "%{public}@Attempted to add an accessory that is already present: %@";
        v12 = v9;
        v13 = 22;
LABEL_8:
        _os_log_impl(&dword_2218F0000, v12, OS_LOG_TYPE_ERROR, v11, buf, v13);

        goto LABEL_9;
      }
      goto LABEL_9;
    }
  }
  else
  {
    objc_msgSend(v5, "uuid");
    v14 = (void *)objc_claimAutoreleasedReturnValue();

    if (!v14)
    {
      v15 = (void *)MEMORY[0x227676638]();
      v16 = self;
      HMFGetOSLogHandle();
      v17 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v17, OS_LOG_TYPE_FAULT))
      {
        HMFGetLogIdentifier();
        v18 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v5, "shortDescription");
        v19 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        v25 = v18;
        v26 = 2112;
        v27 = v19;
        _os_log_impl(&dword_2218F0000, v17, OS_LOG_TYPE_FAULT, "%{public}@Submitting ABC event for failure: Attempted to add an accessory that does not have an uuid: %@", buf, 0x16u);

      }
      objc_autoreleasePoolPop(v15);
      v20 = [HMDAssertionLogEvent alloc];
      objc_msgSend(v5, "shortDescription");
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      v22 = -[HMDAssertionLogEvent initWithReason:](v20, "initWithReason:", CFSTR("Attempted to add an accessory that does not have an uuid: %@"), v21);

      +[HMDMetricsManager sharedLogEventSubmitter](HMDMetricsManager, "sharedLogEventSubmitter");
      v23 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v23, "submitLogEvent:", v22);

    }
  }
LABEL_11:

}

- (BOOL)_addAccessory:(id)a3
{
  id v4;
  NSMutableDictionary *accessories;
  void *v6;
  void *v7;
  void *v8;
  HMDHome *v9;
  NSObject *v10;
  id v11;
  void *v12;
  NSMutableDictionary *v13;
  void *v14;
  int v16;
  id v17;
  __int16 v18;
  void *v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  v4 = a3;
  os_unfair_recursive_lock_lock_with_options();
  accessories = self->_accessories;
  objc_msgSend(v4, "uuid");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  -[NSMutableDictionary objectForKey:](accessories, "objectForKey:", v6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v7)
  {
    v8 = (void *)MEMORY[0x227676638]();
    v9 = self;
    HMFGetOSLogHandle();
    v10 = (id)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v11 = (id)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "uuid");
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      v16 = 138543618;
      v17 = v11;
      v18 = 2112;
      v19 = v12;
      _os_log_impl(&dword_2218F0000, v10, OS_LOG_TYPE_INFO, "%{public}@Added accessory to the home's list: %@", (uint8_t *)&v16, 0x16u);

    }
    objc_autoreleasePoolPop(v8);
    v13 = self->_accessories;
    objc_msgSend(v4, "uuid");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    -[NSMutableDictionary setObject:forKey:](v13, "setObject:forKey:", v4, v14);

  }
  os_unfair_recursive_lock_unlock();

  return v7 == 0;
}

- (void)_addAccessories:(id)a3
{
  _QWORD v3[5];

  v3[0] = MEMORY[0x24BDAC760];
  v3[1] = 3221225472;
  v3[2] = __27__HMDHome__addAccessories___block_invoke;
  v3[3] = &unk_24E776180;
  v3[4] = self;
  objc_msgSend(a3, "na_each:", v3);
}

- (void)removeAccessory:(id)a3
{
  id v4;
  void *v5;
  HMDHome *v6;
  NSObject *v7;
  void *v8;
  id v9;
  char isKindOfClass;
  void *v11;
  id v12;
  id v13;
  char v14;
  void *v15;
  id v16;
  NSObject *workQueue;
  id *v18;
  _QWORD *v19;
  _QWORD v20[5];
  id v21;
  _QWORD v22[5];
  id v23;
  uint8_t buf[4];
  void *v25;
  __int16 v26;
  id v27;
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  v4 = a3;
  if (v4 && -[HMDHome _removeAccessory:](self, "_removeAccessory:", v4))
  {
    v5 = (void *)MEMORY[0x227676638]();
    v6 = self;
    HMFGetOSLogHandle();
    v7 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      HMFGetLogIdentifier();
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v25 = v8;
      v26 = 2112;
      v27 = v4;
      _os_log_impl(&dword_2218F0000, v7, OS_LOG_TYPE_DEFAULT, "%{public}@Removed accessory: %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v5);
    if (objc_msgSend(v4, "isPrimary"))
    {
      v9 = v4;
      objc_opt_class();
      isKindOfClass = objc_opt_isKindOfClass();
      if ((isKindOfClass & 1) != 0)
        v11 = v9;
      else
        v11 = 0;
      v12 = v11;

      v13 = v9;
      objc_opt_class();
      v14 = objc_opt_isKindOfClass();
      if ((v14 & 1) != 0)
        v15 = v13;
      else
        v15 = 0;
      v16 = v15;

      if ((isKindOfClass & 1) != 0)
      {
        workQueue = v6->_workQueue;
        v22[0] = MEMORY[0x24BDAC760];
        v22[1] = 3221225472;
        v22[2] = __27__HMDHome_removeAccessory___block_invoke;
        v22[3] = &unk_24E79C268;
        v22[4] = v6;
        v18 = &v23;
        v23 = v13;
        v19 = v22;
      }
      else
      {
        if ((v14 & 1) == 0)
        {
LABEL_17:

          goto LABEL_18;
        }
        workQueue = v6->_workQueue;
        v20[0] = MEMORY[0x24BDAC760];
        v20[1] = 3221225472;
        v20[2] = __27__HMDHome_removeAccessory___block_invoke_2;
        v20[3] = &unk_24E79C268;
        v20[4] = v6;
        v18 = &v21;
        v21 = v13;
        v19 = v20;
      }
      dispatch_async(workQueue, v19);

      goto LABEL_17;
    }
  }
LABEL_18:

}

- (BOOL)_removeAccessory:(id)a3
{
  id v4;
  NSMutableDictionary *accessories;
  void *v6;
  void *v7;
  NSMutableDictionary *v8;
  void *v9;
  void *v10;
  HMDHome *v11;
  NSObject *v12;
  id v13;
  void *v14;
  HMDHome *v15;
  id v16;
  void *v17;
  int v19;
  id v20;
  __int16 v21;
  void *v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  v4 = a3;
  os_unfair_recursive_lock_lock_with_options();
  accessories = self->_accessories;
  objc_msgSend(v4, "uuid");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  -[NSMutableDictionary objectForKey:](accessories, "objectForKey:", v6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  if (v7)
  {
    v8 = self->_accessories;
    objc_msgSend(v4, "uuid");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    -[NSMutableDictionary removeObjectForKey:](v8, "removeObjectForKey:", v9);

    v10 = (void *)MEMORY[0x227676638]();
    v11 = self;
    HMFGetOSLogHandle();
    v12 = (id)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v13 = (id)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "uuid");
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      v19 = 138543618;
      v20 = v13;
      v21 = 2112;
      v22 = v14;
      _os_log_impl(&dword_2218F0000, v12, OS_LOG_TYPE_INFO, "%{public}@Successfully removed accessory from home's list: %@", (uint8_t *)&v19, 0x16u);

    }
  }
  else
  {
    v10 = (void *)MEMORY[0x227676638]();
    v15 = self;
    HMFGetOSLogHandle();
    v12 = (id)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v16 = (id)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "uuid");
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      v19 = 138543618;
      v20 = v16;
      v21 = 2112;
      v22 = v17;
      _os_log_impl(&dword_2218F0000, v12, OS_LOG_TYPE_ERROR, "%{public}@Unable to remove accessory from home's list: %@", (uint8_t *)&v19, 0x16u);

    }
  }

  objc_autoreleasePoolPop(v10);
  os_unfair_recursive_lock_unlock();

  return v7 != 0;
}

- (void)_handleAddAccessory:(id)a3
{
  void *v4;
  char v5;
  void *v6;
  uint64_t v7;
  void *v8;
  void *v9;
  char v10;
  void *v11;
  void *v12;
  void (**v13)(_QWORD, _QWORD, _QWORD);
  void *v14;
  void *v15;
  id v16;

  v16 = a3;
  -[HMDHome localCapabilitiesDataSource](self, "localCapabilitiesDataSource");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v4, "supportsAddingAccessory");

  if ((v5 & 1) != 0)
  {
    -[HMDHome homeManager](self, "homeManager");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "legacyAccessoryPairingController");
    v7 = objc_claimAutoreleasedReturnValue();
    if (v7)
    {
      v8 = (void *)v7;
      objc_msgSend(v6, "legacyAccessoryPairingController");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      v10 = objc_msgSend(v9, "handleMessage:from:", v16, self);

      v11 = v16;
      if ((v10 & 1) != 0)
        goto LABEL_12;
    }
    else
    {

      v11 = v16;
    }
    objc_msgSend(v11, "dataForKey:", CFSTR("kAccessoryDescriptionDataKey"));
    v15 = (void *)objc_claimAutoreleasedReturnValue();

    if (v15)
      -[HMDHome _handleAddAccessoryWithDescription:](self, "_handleAddAccessoryWithDescription:", v16);
    else
      -[HMDHome _handleLegacyAddAccessory:](self, "_handleLegacyAddAccessory:", v16);
    goto LABEL_11;
  }
  objc_msgSend(v16, "responseHandler");
  v12 = (void *)objc_claimAutoreleasedReturnValue();

  v11 = v16;
  if (v12)
  {
    objc_msgSend(v16, "responseHandler");
    v13 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD1540], "hmErrorWithCode:", 48);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    ((void (**)(_QWORD, void *, _QWORD))v13)[2](v13, v14, 0);

LABEL_11:
    v11 = v16;
  }
LABEL_12:

}

- (void)performLocalAddAccessoryWithDescription:(id)a3 progressHandlerDelegate:(id)a4 completion:(id)a5
{
  id v8;
  id v9;
  void (**v10)(id, void *);
  void *v11;
  char v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  int v17;
  void *v18;
  HMDHome *v19;
  NSObject *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  HMDHome *v25;
  NSObject *v26;
  void *v27;
  void *v28;
  HMDHome *v29;
  NSObject *v30;
  void *v31;
  _QWORD v32[4];
  void (**v33)(id, void *);
  id v34;
  uint8_t buf[4];
  void *v36;
  __int16 v37;
  id v38;
  __int16 v39;
  void *v40;
  uint64_t v41;

  v41 = *MEMORY[0x24BDAC8D0];
  v8 = a3;
  v9 = a4;
  v10 = (void (**)(id, void *))a5;
  -[HMDHome localCapabilitiesDataSource](self, "localCapabilitiesDataSource");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v12 = objc_msgSend(v11, "supportsAddingAccessory");

  if ((v12 & 1) != 0)
  {
    -[HMDHome currentAccessory](self, "currentAccessory");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    if (v13)
    {
      -[HMDHome selfRemovalWatchdog](self, "selfRemovalWatchdog");
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v14, "currentAccessoryUUID");
      v15 = (void *)objc_claimAutoreleasedReturnValue();

      if (v15
        && (objc_msgSend(v13, "uuid"),
            v16 = (void *)objc_claimAutoreleasedReturnValue(),
            v17 = objc_msgSend(v15, "hmf_isEqualToUUID:", v16),
            v16,
            v17))
      {
        v18 = (void *)MEMORY[0x227676638]();
        v19 = self;
        HMFGetOSLogHandle();
        v20 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
        {
          HMFGetLogIdentifier();
          v21 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543874;
          v36 = v21;
          v37 = 2112;
          v38 = v8;
          v39 = 2112;
          v40 = v13;
          _os_log_impl(&dword_2218F0000, v20, OS_LOG_TYPE_ERROR, "%{public}@Will not perform local add accessory with setup description %@ when current accessory (%@) self removal is pending", buf, 0x20u);

        }
        objc_autoreleasePoolPop(v18);
        if (!v10)
          goto LABEL_19;
        objc_msgSend(MEMORY[0x24BDD1540], "hmPrivateErrorWithCode:", 2505);
        v22 = (void *)objc_claimAutoreleasedReturnValue();
        v10[2](v10, v22);
      }
      else
      {
        v24 = (void *)MEMORY[0x227676638]();
        v25 = self;
        HMFGetOSLogHandle();
        v26 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v26, OS_LOG_TYPE_INFO))
        {
          HMFGetLogIdentifier();
          v27 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543618;
          v36 = v27;
          v37 = 2112;
          v38 = v8;
          _os_log_impl(&dword_2218F0000, v26, OS_LOG_TYPE_INFO, "%{public}@Performing local add accessory with setup description %@", buf, 0x16u);

        }
        objc_autoreleasePoolPop(v24);
        objc_msgSend(MEMORY[0x24BE3F1D0], "internalMessageWithName:messagePayload:", CFSTR("kAddAccessoryRequestKey"), 0);
        v22 = (void *)objc_claimAutoreleasedReturnValue();
        objc_initWeak((id *)buf, v25);
        v32[0] = MEMORY[0x24BDAC760];
        v32[1] = 3221225472;
        v32[2] = __86__HMDHome_performLocalAddAccessoryWithDescription_progressHandlerDelegate_completion___block_invoke;
        v32[3] = &unk_24E79AFA0;
        objc_copyWeak(&v34, (id *)buf);
        v33 = v10;
        objc_msgSend(v22, "setResponseHandler:", v32);
        -[HMDHome _handleAddAccessoryWithDescription:progressHandlerDelegate:message:]((id *)&v25->super.super.isa, v8, v9, v22);

        objc_destroyWeak(&v34);
        objc_destroyWeak((id *)buf);
      }

    }
    else
    {
      v28 = (void *)MEMORY[0x227676638]();
      v29 = self;
      HMFGetOSLogHandle();
      v30 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v31 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        v36 = v31;
        v37 = 2112;
        v38 = v8;
        _os_log_impl(&dword_2218F0000, v30, OS_LOG_TYPE_ERROR, "%{public}@Will not perform local add accessory with setup description %@ without current accessory present", buf, 0x16u);

      }
      objc_autoreleasePoolPop(v28);
      if (!v10)
        goto LABEL_20;
      objc_msgSend(MEMORY[0x24BDD1540], "hmPrivateErrorWithCode:", 2020);
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      v10[2](v10, v15);
    }
LABEL_19:

LABEL_20:
    goto LABEL_21;
  }
  if (v10)
  {
    objc_msgSend(MEMORY[0x24BDD1540], "hmErrorWithCode:", 48);
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    v10[2](v10, v23);

  }
LABEL_21:

}

- (BOOL)__shouldAllowAddingWiFiRouterAccessoryWithRequestMessage:(id)a3 error:(id *)a4
{
  id v6;
  void *v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  void *v11;
  HMDHome *v12;
  NSObject *v13;
  void *v14;
  uint64_t v15;
  void *v16;
  id v17;
  BOOL v18;
  int v20;
  void *v21;
  __int16 v22;
  uint64_t v23;
  __int16 v24;
  id v25;
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  v6 = a3;
  if ((objc_msgSend(v6, "isEntitledForSPIAccess") & 1) == 0
    && (objc_msgSend(v6, "isEntitledToProvideAccessorySetupPayload") & 1) == 0
    && (_os_feature_enabled_impl() & 1) == 0)
  {
    if (a4)
    {
      v9 = (void *)MEMORY[0x24BDD1540];
      v10 = 48;
      goto LABEL_14;
    }
LABEL_18:
    v18 = 0;
    goto LABEL_19;
  }
  if (!-[HMDHome checkForNetworkRouterSupport:error:](self, "checkForNetworkRouterSupport:error:", 4, a4))
  {
    v11 = (void *)MEMORY[0x227676638]();
    v12 = self;
    HMFGetOSLogHandle();
    v13 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      HMDNetworkRouterSupportAsString(-[HMDHome networkRouterSupport](v12, "networkRouterSupport"));
      v15 = objc_claimAutoreleasedReturnValue();
      v16 = (void *)v15;
      if (a4)
        v17 = *a4;
      else
        v17 = 0;
      v20 = 138543874;
      v21 = v14;
      v22 = 2112;
      v23 = v15;
      v24 = 2112;
      v25 = v17;
      _os_log_impl(&dword_2218F0000, v13, OS_LOG_TYPE_INFO, "%{public}@Cannot add network router to the home - networkRouterSupport %@ error %@", (uint8_t *)&v20, 0x20u);

    }
    objc_autoreleasePoolPop(v11);
    goto LABEL_18;
  }
  -[HMDHome wiFiRouterAccessories](self, "wiFiRouterAccessories");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = objc_msgSend(v7, "count");

  if (v8)
  {
    if (a4)
    {
      v9 = (void *)MEMORY[0x24BDD1540];
      v10 = 97;
LABEL_14:
      objc_msgSend(v9, "hmErrorWithCode:", v10);
      v18 = 0;
      *a4 = (id)objc_claimAutoreleasedReturnValue();
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  v18 = 1;
LABEL_19:

  return v18;
}

- (id)_setupDescriptionFromData:(id)a3 error:(id *)a4
{
  id v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  uint64_t i;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  id v20;
  void *v21;
  id v23;
  id obj;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  char v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  _BYTE v33[128];
  uint64_t v34;

  v34 = *MEMORY[0x24BDAC8D0];
  v6 = a3;
  objc_msgSend(MEMORY[0x24BDD1620], "unarchivedObjectOfClass:fromData:error:", objc_opt_class(), v6, a4);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = v7;
  if (v7)
  {
    objc_msgSend(v7, "addRequestIdentifier");
    v27 = (void *)objc_claimAutoreleasedReturnValue();
    v29 = 0u;
    v30 = 0u;
    v31 = 0u;
    v32 = 0u;
    -[HMDHome addPendingAccessories](self, "addPendingAccessories");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "hm_allKeys");
    v10 = (void *)objc_claimAutoreleasedReturnValue();

    obj = v10;
    v25 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v29, v33, 16);
    if (v25)
    {
      v26 = *(_QWORD *)v30;
      v23 = v6;
      while (2)
      {
        for (i = 0; i != v25; ++i)
        {
          if (*(_QWORD *)v30 != v26)
            objc_enumerationMutation(obj);
          v12 = *(void **)(*((_QWORD *)&v29 + 1) + 8 * i);
          objc_msgSend(v12, "setupAccessoryPayload", v23);
          v13 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v13, "setupID");
          v14 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v8, "setupAccessoryPayload");
          v15 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v15, "setupID");
          v16 = (void *)objc_claimAutoreleasedReturnValue();
          if ((objc_msgSend(v14, "isEqual:", v16) & 1) != 0)
            goto LABEL_15;
          objc_msgSend(v12, "accessoryUUID");
          v17 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v8, "accessoryUUID");
          v18 = (void *)objc_claimAutoreleasedReturnValue();
          if ((objc_msgSend(v17, "isEqual:", v18) & 1) != 0)
          {

LABEL_15:
LABEL_16:
            objc_msgSend(v8, "cancellationReason");
            v21 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v12, "setCancellationReason:", v21);

            v20 = v12;
            v6 = v23;
            goto LABEL_17;
          }
          objc_msgSend(v12, "addRequestIdentifier");
          v19 = (void *)objc_claimAutoreleasedReturnValue();
          v28 = objc_msgSend(v19, "isEqual:", v27);

          if ((v28 & 1) != 0)
            goto LABEL_16;
        }
        v6 = v23;
        v25 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v29, v33, 16);
        if (v25)
          continue;
        break;
      }
    }

    v20 = v8;
LABEL_17:

  }
  else
  {
    v20 = 0;
  }

  return v20;
}

- (BOOL)_shouldAllowAddingAccessoryOfCategory:(id)a3 requestMessage:(id)a4 error:(id *)a5
{
  id v8;
  BOOL v9;

  v8 = a4;
  if (objc_msgSend(a3, "isWiFiRouterAccessoryCategory"))
    v9 = -[HMDHome __shouldAllowAddingWiFiRouterAccessoryWithRequestMessage:error:](self, "__shouldAllowAddingWiFiRouterAccessoryWithRequestMessage:error:", v8, a5);
  else
    v9 = 1;

  return v9;
}

- (BOOL)_shouldAllowAddingAccessoryWithDescription:(id)a3 requestMessage:(id)a4 error:(id *)a5
{
  id v8;
  void *v9;
  id v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  char v15;
  BOOL v16;

  v8 = a4;
  v9 = (void *)MEMORY[0x24BDD7338];
  v10 = a3;
  objc_msgSend(v10, "setupAccessoryPayload");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "categoryNumber");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "categoryWithCategoryIdentifier:", v12);
  v13 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v10, "category");
  v14 = (void *)objc_claimAutoreleasedReturnValue();

  if ((objc_msgSend(v14, "isWiFiRouterAccessoryCategory") & 1) != 0)
  {

  }
  else
  {
    v15 = objc_msgSend(v13, "isWiFiRouterAccessoryCategory");

    if ((v15 & 1) == 0)
    {
      v16 = 1;
      goto LABEL_6;
    }
  }
  v16 = -[HMDHome __shouldAllowAddingWiFiRouterAccessoryWithRequestMessage:error:](self, "__shouldAllowAddingWiFiRouterAccessoryWithRequestMessage:error:", v8, a5);
LABEL_6:

  return v16;
}

- (void)_handleLegacyAddAccessory:(id)a3
{
  id v4;
  void *v5;
  HMDHome *v6;
  NSObject *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  HMDHome *v15;
  NSObject *v16;
  NSObject *v17;
  void *v18;
  id v19;
  char isKindOfClass;
  void *v21;
  void *v22;
  HMDHome *v23;
  NSObject *v24;
  void *v25;
  void *v26;
  void *v27;
  HMDDeviceHomeKitSetupSession *v28;
  uint64_t v29;
  void *v30;
  HMDDeviceHomeKitSetupSession *v31;
  id v32;
  char v33;
  void *v34;
  id v35;
  uint64_t v36;
  void *v37;
  HMDHomeKitVersion *v38;
  void *v39;
  _BOOL4 v40;
  void *v41;
  HMDHome *v42;
  NSObject *v43;
  void *v44;
  void *v45;
  void *v46;
  HMDHome *v47;
  NSObject *v48;
  void *v49;
  void *v50;
  void *v51;
  void *v52;
  void *v53;
  void *v54;
  HMDHome *v55;
  NSObject *v56;
  void *v57;
  void *v58;
  void *v59;
  id v60;
  void *v61;
  void *v62;
  _QWORD v63[4];
  id v64;
  HMDHome *v65;
  id v66;
  id v67;
  id v68;
  uint8_t buf[4];
  void *v70;
  __int16 v71;
  id v72;
  __int16 v73;
  void *v74;
  uint64_t v75;

  v75 = *MEMORY[0x24BDAC8D0];
  v4 = a3;
  v5 = (void *)MEMORY[0x227676638]();
  v6 = self;
  HMFGetOSLogHandle();
  v7 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543362;
    v70 = v8;
    _os_log_impl(&dword_2218F0000, v7, OS_LOG_TYPE_INFO, "%{public}@Handling legacy add accessory", buf, 0xCu);

  }
  objc_autoreleasePoolPop(v5);
  objc_msgSend(v4, "uuidForKey:", CFSTR("kAccessoryUUID"));
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  if (v9)
  {
    objc_msgSend(v4, "stringForKey:", CFSTR("kAccessoryPairingPasswordKey"));
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    if (!v10 || (objc_msgSend(v4, "isEntitledForSPIAccess") & 1) != 0)
    {
      -[HMDHome accessoryBrowser](v6, "accessoryBrowser");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v11, "unassociatedAccessories");
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v12, "hmf_firstObjectWithUUID:", v9);
      v13 = (void *)objc_claimAutoreleasedReturnValue();

      v14 = (void *)MEMORY[0x227676638]();
      v15 = v6;
      HMFGetOSLogHandle();
      v16 = objc_claimAutoreleasedReturnValue();
      v17 = v16;
      v61 = v13;
      if (!v13)
      {
        if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
        {
          HMFGetLogIdentifier();
          v50 = (void *)objc_claimAutoreleasedReturnValue();
          -[HMDHome accessoryBrowser](v15, "accessoryBrowser");
          v51 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v51, "unassociatedAccessories");
          v52 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543874;
          v70 = v50;
          v71 = 2112;
          v72 = v9;
          v73 = 2112;
          v74 = v52;
          _os_log_impl(&dword_2218F0000, v17, OS_LOG_TYPE_ERROR, "%{public}@Could not find unassociated accessory with UUID %@ for legacy add accessory flow. All unassociated accessories: %@", buf, 0x20u);

        }
        objc_autoreleasePoolPop(v14);
        objc_msgSend(MEMORY[0x24BDD1540], "hmErrorWithCode:", 2);
        v53 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v4, "respondWithError:", v53);
        goto LABEL_37;
      }
      if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v18 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        v70 = v18;
        v71 = 2112;
        v72 = v13;
        _os_log_impl(&dword_2218F0000, v17, OS_LOG_TYPE_INFO, "%{public}@Found matching unassociated accessory: %@", buf, 0x16u);

      }
      objc_autoreleasePoolPop(v14);
      v19 = v13;
      objc_opt_class();
      isKindOfClass = objc_opt_isKindOfClass();
      if ((isKindOfClass & 1) != 0)
        v21 = v19;
      else
        v21 = 0;
      v60 = v21;

      if ((isKindOfClass & 1) != 0)
      {
        v22 = (void *)MEMORY[0x227676638]();
        v23 = v15;
        HMFGetOSLogHandle();
        v24 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v24, OS_LOG_TYPE_INFO))
        {
          HMFGetLogIdentifier();
          v25 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v4, "proxyConnection");
          v58 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v58, "shortDescription");
          v26 = (void *)objc_claimAutoreleasedReturnValue();
          -[HMDHome hasAnyResident](v23, "hasAnyResident");
          HMFBooleanToString();
          v59 = v22;
          v27 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543874;
          v70 = v25;
          v71 = 2112;
          v72 = v26;
          v73 = 2112;
          v74 = v27;
          _os_log_impl(&dword_2218F0000, v24, OS_LOG_TYPE_INFO, "%{public}@Creating a device HomeKit setup session for connection %@, home.hasAnyResident = %@", buf, 0x20u);

          v22 = v59;
        }

        objc_autoreleasePoolPop(v22);
        v28 = [HMDDeviceHomeKitSetupSession alloc];
        v29 = -[HMDHome hasAnyResident](v23, "hasAnyResident") ^ 1;
        objc_msgSend(v4, "proxyConnection");
        v30 = (void *)objc_claimAutoreleasedReturnValue();
        v31 = -[HMDDeviceHomeKitSetupSession initWithFirstResidentForHome:clientConnection:](v28, "initWithFirstResidentForHome:clientConnection:", v29, v30);
        -[HMDHome setDeviceHomeKitSetupSession:](v23, "setDeviceHomeKitSetupSession:", v31);

      }
      v32 = v19;
      objc_opt_class();
      v33 = objc_opt_isKindOfClass();
      if ((v33 & 1) != 0)
        v34 = v32;
      else
        v34 = 0;
      v35 = v34;

      -[HMDHome primaryResident](v15, "primaryResident");
      v36 = objc_claimAutoreleasedReturnValue();
      v37 = (void *)v36;
      if ((v33 & 1) != 0 && v36)
      {
        v38 = -[HMDHomeKitVersion initWithVersionString:]([HMDHomeKitVersion alloc], "initWithVersionString:", CFSTR("10.1"));
        -[HMDHome administratorHandler](v15, "administratorHandler");
        v39 = (void *)objc_claimAutoreleasedReturnValue();
        v40 = -[HMDHome _shouldUseDeprecatedAddAccessoryMessage:minimumVersion:primaryResident:shouldRelayMessages:](v15, "_shouldUseDeprecatedAddAccessoryMessage:minimumVersion:primaryResident:shouldRelayMessages:", v35, v38, v37, objc_msgSend(v39, "shouldRelayMessages"));

        if (v40)
        {
          v63[0] = MEMORY[0x24BDAC760];
          v63[1] = 3221225472;
          v63[2] = __37__HMDHome__handleLegacyAddAccessory___block_invoke;
          v63[3] = &unk_24E79AD20;
          v64 = v4;
          v65 = v15;
          v66 = v9;
          v67 = v35;
          v68 = v10;
          -[HMDHome _remotelyAddMediaAccessory:usingRemoteMessageName:message:fallbackBlock:](v15, v67, CFSTR("HMDRemoteAddMediaAccessoryMessage"), v64, v63);

LABEL_36:
          v53 = v60;
LABEL_37:

          goto LABEL_39;
        }

      }
      v54 = (void *)MEMORY[0x227676638]();
      v55 = v15;
      HMFGetOSLogHandle();
      v56 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v56, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v57 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        v70 = v57;
        v71 = 2112;
        v72 = v32;
        _os_log_impl(&dword_2218F0000, v56, OS_LOG_TYPE_INFO, "%{public}@Continuing legacy add for unassociated accessory: %@", buf, 0x16u);

      }
      objc_autoreleasePoolPop(v54);
      objc_msgSend(v4, "applicationBundleIdentifier");
      v38 = (HMDHomeKitVersion *)objc_claimAutoreleasedReturnValue();
      -[HMDHome _continueLegacyAddAccessoryWithUUID:unassociatedAccessory:setupCode:appID:message:](v55, "_continueLegacyAddAccessoryWithUUID:unassociatedAccessory:setupCode:appID:message:", v9, v32, v10, v38, v4);
      goto LABEL_36;
    }
    v46 = (void *)MEMORY[0x227676638]();
    v47 = v6;
    HMFGetOSLogHandle();
    v48 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v48, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v49 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v70 = v49;
      _os_log_impl(&dword_2218F0000, v48, OS_LOG_TYPE_ERROR, "%{public}@Client provided a setup code but does not have entitlement to use SPI", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v46);
    objc_msgSend(MEMORY[0x24BDD1540], "hmErrorWithCode:", 17);
    v62 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "respondWithError:");

  }
  else
  {
    v41 = (void *)MEMORY[0x227676638]();
    v42 = v6;
    HMFGetOSLogHandle();
    v43 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v43, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v44 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "shortDescription");
      v45 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v70 = v44;
      v71 = 2112;
      v72 = v45;
      _os_log_impl(&dword_2218F0000, v43, OS_LOG_TYPE_ERROR, "%{public}@Legacy add accessory message is missing accessory uuid: %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v41);
    objc_msgSend(MEMORY[0x24BDD1540], "hmErrorWithCode:", 20);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "respondWithError:", v10);
  }
LABEL_39:

}

- (BOOL)_shouldUseDeprecatedAddAccessoryMessage:(id)a3 minimumVersion:(id)a4 primaryResident:(id)a5 shouldRelayMessages:(BOOL)a6
{
  id v9;
  void *v10;
  void *v11;
  int v12;
  BOOL v13;
  BOOL v14;

  v9 = a4;
  objc_msgSend(a5, "device");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "version");
  v11 = (void *)objc_claimAutoreleasedReturnValue();

  LOBYTE(v12) = 0;
  if (v9 && a5)
    v12 = objc_msgSend(v11, "isAtLeastVersion:", v9) ^ 1;
  v13 = v12 & a6;
  if (a3)
    v14 = v13;
  else
    v14 = 0;

  return v14;
}

- (void)_handleRemoteAddMediaAccessory:(id)a3
{
  id v4;
  void *v5;
  _QWORD v6[5];

  v4 = a3;
  -[HMDHome residentSyncManager](self, "residentSyncManager");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6[0] = MEMORY[0x24BDAC760];
  v6[1] = 3221225472;
  v6[2] = __42__HMDHome__handleRemoteAddMediaAccessory___block_invoke;
  v6[3] = &unk_24E79BF48;
  v6[4] = self;
  objc_msgSend(v5, "interceptRemoteResidentRequest:proceed:", v4, v6);

}

- (void)_handleRemoteAddMediaAccessoryRequest:(id)a3
{
  id v4;
  void *v5;
  _QWORD v6[5];

  v4 = a3;
  -[HMDHome residentSyncManager](self, "residentSyncManager");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6[0] = MEMORY[0x24BDAC760];
  v6[1] = 3221225472;
  v6[2] = __49__HMDHome__handleRemoteAddMediaAccessoryRequest___block_invoke;
  v6[3] = &unk_24E79BF48;
  v6[4] = self;
  objc_msgSend(v5, "interceptRemoteResidentRequest:proceed:", v4, v6);

}

- (void)_continueLegacyAddAccessoryWithUUID:(id)a3 unassociatedAccessory:(id)a4 setupCode:(id)a5 appID:(id)a6 message:(id)a7
{
  id v12;
  id v13;
  void *v14;
  void *v15;
  HMDHome *v16;
  NSObject *v17;
  void *v18;
  void *v19;
  HMDHome *v20;
  NSObject *v21;
  void *v22;
  id v23;
  void *v24;
  void (**v25)(_QWORD, _QWORD, _QWORD);
  HMDAddAccessoryProgressState *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  HMDAddAccessoryProgressState *v32;
  id v33;
  void *v34;
  unint64_t v35;
  unint64_t v36;
  void *v37;
  _BOOL4 v38;
  id v39;
  void *v40;
  id v41;
  void *v42;
  void *v43;
  HMDHome *v44;
  NSObject *v45;
  void *v46;
  void *v47;
  HMDHome *v48;
  NSObject *v49;
  void *v50;
  void *v51;
  BOOL v52;
  void *v53;
  HMDHome *v54;
  NSObject *v55;
  void *v56;
  void *v57;
  void *v58;
  HMDHome *v59;
  NSObject *v60;
  void *v61;
  uint64_t v62;
  HMDHome *v63;
  void (**v64)(_QWORD, _QWORD, _QWORD);
  void *v65;
  HMDAddAccessoryProgressState *v66;
  void *v67;
  void *v68;
  void *v69;
  HMDAddAccessoryProgressState *v70;
  void *v71;
  HMDHome *v72;
  NSObject *v73;
  void *v74;
  void *v75;
  void *context;
  void *v77;
  void *v78;
  id v79;
  id v80;
  id v81;
  id v82;
  id v83;
  uint8_t buf[4];
  void *v85;
  __int16 v86;
  id v87;
  __int16 v88;
  id v89;
  uint64_t v90;

  v90 = *MEMORY[0x24BDAC8D0];
  v12 = a3;
  v82 = a4;
  v80 = a5;
  v81 = a6;
  v13 = a7;
  -[HMDHome accessoryWithUUID:](self, "accessoryWithUUID:", v12);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  if (v14)
  {
    v15 = (void *)MEMORY[0x227676638]();
    v16 = self;
    HMFGetOSLogHandle();
    v17 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543874;
      v85 = v18;
      v86 = 2112;
      v87 = v12;
      v88 = 2112;
      v89 = v14;
      _os_log_impl(&dword_2218F0000, v17, OS_LOG_TYPE_ERROR, "%{public}@Can't add unassociated accessory: this home already has an accessory with UUID %@: %@", buf, 0x20u);

    }
    objc_autoreleasePoolPop(v15);
    if (_os_feature_enabled_impl()
      && objc_msgSend(v13, "isEntitledForSPIAccess")
      && objc_msgSend(v13, "isEntitledToProvideAccessorySetupPayload"))
    {
      v19 = (void *)MEMORY[0x227676638]();
      v20 = v16;
      HMFGetOSLogHandle();
      v21 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
      {
        HMFGetLogIdentifier();
        v22 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543362;
        v85 = v22;
        _os_log_impl(&dword_2218F0000, v21, OS_LOG_TYPE_DEFAULT, "%{public}@Creating temporary progress handler to invoke with already-associated error", buf, 0xCu);

      }
      objc_autoreleasePoolPop(v19);
      v23 = objc_alloc(MEMORY[0x24BDD7998]);
      -[HMDHome uuid](v20, "uuid");
      v24 = (void *)objc_claimAutoreleasedReturnValue();
      v78 = (void *)objc_msgSend(v23, "initWithAccessoryUUID:accessoryName:appID:homeUUID:", v12, 0, v81, v24);

      HMDHomeCreateAddAccessoryProgressHandler(v20, v78, v13);
      v25 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
      v26 = [HMDAddAccessoryProgressState alloc];
      objc_msgSend(v14, "uuid");
      v27 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v14, "name");
      v28 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v14, "manufacturer");
      v29 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v14, "category");
      v30 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v14, "productData");
      v31 = (void *)objc_claimAutoreleasedReturnValue();
      v32 = -[HMDAddAccessoryProgressState initWithUUID:accessoryName:manufacturerName:category:certificationStatus:productData:](v26, "initWithUUID:accessoryName:manufacturerName:category:certificationStatus:productData:", v27, v28, v29, v30, 0, v31);

      ((void (**)(_QWORD, uint64_t, HMDAddAccessoryProgressState *))v25)[2](v25, 47, v32);
    }
    objc_msgSend(MEMORY[0x24BDD1540], "hmErrorWithCode:", 13);
    v33 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "respondWithError:", v33);
    goto LABEL_47;
  }
  -[HMDHome accessories](self, "accessories");
  v34 = (void *)objc_claimAutoreleasedReturnValue();
  v35 = objc_msgSend(v34, "count");
  v36 = maximumAccessoriesPerHome;

  if (v35 >= v36)
  {
    v43 = (void *)MEMORY[0x227676638]();
    v44 = self;
    HMFGetOSLogHandle();
    v45 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v45, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v46 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v85 = v46;
      _os_log_impl(&dword_2218F0000, v45, OS_LOG_TYPE_ERROR, "%{public}@Can't add unassociated accessory: already at maximum accessories for home", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v43);
    objc_msgSend(MEMORY[0x24BDD1540], "hmErrorWithCode:", 49);
    v33 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "respondWithError:", v33);
  }
  else if ((objc_msgSend(v82, "associationOptions") & 2) != 0)
  {
    v47 = (void *)MEMORY[0x227676638]();
    v48 = self;
    HMFGetOSLogHandle();
    v49 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v49, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v50 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v85 = v50;
      _os_log_impl(&dword_2218F0000, v49, OS_LOG_TYPE_INFO, "%{public}@Can't add unassociated accessory: software update needed on the accessory", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v47);
    objc_msgSend(MEMORY[0x24BDD1540], "hmErrorWithCode:", 48);
    v33 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "respondWithError:", v33);
  }
  else
  {
    objc_msgSend(v82, "category");
    v37 = (void *)objc_claimAutoreleasedReturnValue();
    v83 = 0;
    v38 = -[HMDHome _shouldAllowAddingAccessoryOfCategory:requestMessage:error:](self, "_shouldAllowAddingAccessoryOfCategory:requestMessage:error:", v37, v13, &v83);
    v33 = v83;

    if (v38)
    {
LABEL_14:
      v39 = v82;
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0)
        v40 = v39;
      else
        v40 = 0;
      v79 = v40;

      if (v79)
      {
        v41 = objc_alloc(MEMORY[0x24BDD7998]);
        -[HMDHome uuid](self, "uuid");
        v42 = (void *)objc_claimAutoreleasedReturnValue();
        v77 = (void *)objc_msgSend(v41, "initWithAccessoryUUID:accessoryName:appID:homeUUID:", v12, 0, v81, v42);

        objc_msgSend(v77, "setSetupCode:", v80);
        os_unfair_recursive_lock_lock_with_options();
        -[NSMapTable setObject:forKey:](self->_addPendingAccessories, "setObject:forKey:", v13, v77);
        os_unfair_recursive_lock_unlock();
      }
      else
      {
        v77 = 0;
      }
      if (objc_msgSend(v13, "isEntitledForSPIAccess")
        && objc_msgSend(v13, "isEntitledToProvideAccessorySetupPayload"))
      {
        context = (void *)MEMORY[0x227676638]();
        v59 = self;
        HMFGetOSLogHandle();
        v60 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v60, OS_LOG_TYPE_DEBUG))
        {
          HMFGetLogIdentifier();
          v61 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543362;
          v85 = v61;
          _os_log_impl(&dword_2218F0000, v60, OS_LOG_TYPE_DEBUG, "%{public}@Registering Progress Handler", buf, 0xCu);

        }
        objc_autoreleasePoolPop(context);
        HMDHomeCreateAddAccessoryProgressHandler(v59, v77, v13);
        v62 = objc_claimAutoreleasedReturnValue();
        v63 = v59;
        v64 = (void (**)(_QWORD, _QWORD, _QWORD))v62;
        -[HMDHome accessoryBrowser](v63, "accessoryBrowser");
        v65 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v65, "registerProgressHandler:unpairedAccessoryUUID:", v64, v12);

      }
      else
      {
        v64 = 0;
      }
      if (v38)
      {
        -[HMDHome _continuePairingAfterUserConsentWithAccessoryUUID:orUnassociatedAccessory:message:](self, "_continuePairingAfterUserConsentWithAccessoryUUID:orUnassociatedAccessory:message:", v12, v39, v13);
      }
      else if (v64)
      {
        v66 = [HMDAddAccessoryProgressState alloc];
        objc_msgSend(v79, "uuid");
        v67 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v79, "name");
        v68 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v79, "category");
        v69 = (void *)objc_claimAutoreleasedReturnValue();
        v70 = -[HMDAddAccessoryProgressState initWithUUID:accessoryName:manufacturerName:category:certificationStatus:productData:](v66, "initWithUUID:accessoryName:manufacturerName:category:certificationStatus:productData:", v67, v68, 0, v69, 0, 0);

        ((void (**)(_QWORD, uint64_t, HMDAddAccessoryProgressState *))v64)[2](v64, 9, v70);
      }
      else
      {
        v71 = (void *)MEMORY[0x227676638]();
        v72 = self;
        HMFGetOSLogHandle();
        v73 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v73, OS_LOG_TYPE_INFO))
        {
          HMFGetLogIdentifier();
          v74 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543362;
          v85 = v74;
          _os_log_impl(&dword_2218F0000, v73, OS_LOG_TYPE_INFO, "%{public}@No progress handler but need to request user consent to replace accessory in home", buf, 0xCu);

        }
        objc_autoreleasePoolPop(v71);
        objc_msgSend(MEMORY[0x24BDD1540], "hmErrorWithCode:", 48);
        v75 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v13, "respondWithError:", v75);

      }
      goto LABEL_47;
    }
    objc_msgSend(v33, "domain");
    v51 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v51, "isEqualToString:", *MEMORY[0x24BDD5BD8]))
    {
      v52 = objc_msgSend(v33, "code") == 97;

      if (v52)
        goto LABEL_14;
    }
    else
    {

    }
    v53 = (void *)MEMORY[0x227676638]();
    v54 = self;
    HMFGetOSLogHandle();
    v55 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v55, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v56 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v82, "category");
      v57 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v57, "localizedDescription");
      v58 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543874;
      v85 = v56;
      v86 = 2112;
      v87 = v58;
      v88 = 2112;
      v89 = v33;
      _os_log_impl(&dword_2218F0000, v55, OS_LOG_TYPE_ERROR, "%{public}@Can't add an accessory of category %@: %@", buf, 0x20u);

    }
    objc_autoreleasePoolPop(v53);
    objc_msgSend(v13, "respondWithError:", v33);
  }
LABEL_47:

}

- (void)_continuePairingAfterUserConsentWithAccessoryUUID:(id)a3 orUnassociatedAccessory:(id)a4 message:(id)a5
{
  id v8;
  id v9;
  void *v10;
  HMDHome *v11;
  NSObject *v12;
  void *v13;
  void *v14;
  void *v15;
  char isKindOfClass;
  void *v17;
  void *v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t i;
  void *v23;
  void *v24;
  int v25;
  void *v26;
  void *v27;
  char v28;
  id v29;
  void *v30;
  id v31;
  void *v32;
  void *v33;
  char v34;
  id v35;
  void *v36;
  id v37;
  void *v38;
  HMDHome *v39;
  NSObject *v40;
  void *v41;
  void *v42;
  uint64_t v43;
  void *v44;
  HMDHome *v45;
  NSObject *v46;
  void *v47;
  void *v48;
  void *v49;
  HMDHome *v50;
  NSObject *v51;
  void *v52;
  void *v53;
  HMDUnpairedHAPAccessoryConfiguration *v54;
  void *v55;
  void *v56;
  void *v57;
  void *v58;
  void *v59;
  void *v60;
  void *v61;
  void *v62;
  HMDHome *v63;
  NSObject *v64;
  void *v65;
  void *v66;
  void *v67;
  void *v68;
  void *v69;
  void *v70;
  void *v71;
  id v72;
  id v73;
  id v74;
  id v75;
  id v76;
  id v77;
  id v78;
  void *v79;
  HMDHome *v80;
  NSObject *v81;
  void *v82;
  void *v83;
  void *v84;
  HMDHome *v85;
  NSObject *v86;
  void *v87;
  void *v88;
  void *v89;
  void *v90;
  void *v91;
  void *v92;
  HMDHome *v93;
  NSObject *v94;
  void *v95;
  void *v96;
  id v97;
  void *v98;
  id v99;
  void *v100;
  HMDHome *v101;
  NSObject *v102;
  void *v103;
  void *v104;
  id v105;
  void *v106;
  void *v107;
  id v108;
  id v109;
  id v110;
  id v111;
  _QWORD v112[5];
  id v113;
  id v114;
  id v115;
  id v116;
  HMDUnpairedHAPAccessoryConfiguration *v117;
  id v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  id location;
  uint8_t v124[128];
  _BYTE buf[24];
  void *v126;
  _BYTE v127[20];
  uint64_t v128;

  v128 = *MEMORY[0x24BDAC8D0];
  v8 = a3;
  v9 = a4;
  v111 = a5;
  v10 = (void *)MEMORY[0x227676638]();
  v11 = self;
  HMFGetOSLogHandle();
  v12 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543618;
    *(_QWORD *)&buf[4] = v13;
    *(_WORD *)&buf[12] = 2112;
    *(_QWORD *)&buf[14] = v8;
    _os_log_impl(&dword_2218F0000, v12, OS_LOG_TYPE_INFO, "%{public}@Continue pairing after user consent with accessoryUUID %@", buf, 0x16u);

  }
  objc_autoreleasePoolPop(v10);
  if (v9)
    goto LABEL_5;
  -[HMDHome accessoryBrowser](v11, "accessoryBrowser");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v14, "unassociatedAccessories");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v15, "hmf_firstObjectWithUUID:", v8);
  v9 = (id)objc_claimAutoreleasedReturnValue();

  if (v9)
  {
LABEL_5:
    v110 = v9;
    objc_opt_class();
    isKindOfClass = objc_opt_isKindOfClass();
    if ((isKindOfClass & 1) != 0)
      v17 = v110;
    else
      v17 = 0;
    v109 = v17;

    if ((isKindOfClass & 1) != 0)
    {
      v122 = 0u;
      v120 = 0u;
      v121 = 0u;
      v119 = 0u;
      -[HMDHome addPendingAccessories](v11, "addPendingAccessories");
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v18, "hm_allKeys");
      v19 = (void *)objc_claimAutoreleasedReturnValue();

      v20 = objc_msgSend(v19, "countByEnumeratingWithState:objects:count:", &v119, v124, 16);
      if (v20)
      {
        v21 = *(_QWORD *)v120;
        while (2)
        {
          for (i = 0; i != v20; ++i)
          {
            if (*(_QWORD *)v120 != v21)
              objc_enumerationMutation(v19);
            v23 = *(void **)(*((_QWORD *)&v119 + 1) + 8 * i);
            objc_msgSend(v23, "accessoryUUID");
            v24 = (void *)objc_claimAutoreleasedReturnValue();
            v25 = objc_msgSend(v24, "isEqual:", v8);

            if (v25)
            {
              v108 = v23;
              -[HMDHome addPendingAccessories](v11, "addPendingAccessories");
              v42 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v42, "objectForKey:", v108);
              v43 = objc_claimAutoreleasedReturnValue();

              v111 = (id)v43;
              goto LABEL_33;
            }
          }
          v20 = objc_msgSend(v19, "countByEnumeratingWithState:objects:count:", &v119, v124, 16);
          if (v20)
            continue;
          break;
        }
      }
      v108 = 0;
LABEL_33:

      objc_msgSend(v111, "stringForKey:", CFSTR("kAccessoryPairingPasswordKey"));
      v106 = (void *)objc_claimAutoreleasedReturnValue();
      if (v106)
      {
        v44 = (void *)MEMORY[0x227676638]();
        v45 = v11;
        HMFGetOSLogHandle();
        v46 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v46, OS_LOG_TYPE_INFO))
        {
          HMFGetLogIdentifier();
          v47 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543618;
          *(_QWORD *)&buf[4] = v47;
          *(_WORD *)&buf[12] = 2112;
          *(_QWORD *)&buf[14] = v109;
          _os_log_impl(&dword_2218F0000, v46, OS_LOG_TYPE_INFO, "%{public}@Storing setupCode accessory %@", buf, 0x16u);

        }
        objc_autoreleasePoolPop(v44);
        -[HMDHome addPendingAccessorySetupCodes](v45, "addPendingAccessorySetupCodes");
        v48 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v48, "setObject:forKey:", v106, v8);

      }
      else
      {
        objc_msgSend(v108, "setupCode");
        v106 = (void *)objc_claimAutoreleasedReturnValue();
      }
      objc_msgSend(v108, "appIdentifier");
      v53 = (void *)objc_claimAutoreleasedReturnValue();
      +[HMDAccessoryPairingEvent pairingAccessory:home:appIdentifier:retry:](HMDAccessoryPairingEvent, "pairingAccessory:home:appIdentifier:retry:", v109, v11, v53, objc_msgSend(v108, "retry"));
      v107 = (void *)objc_claimAutoreleasedReturnValue();

      if (objc_msgSend(v107, "isMatterAccessory"))
        notifyMatterMetricPairingStep(v11, 2uLL);
      v54 = objc_alloc_init(HMDUnpairedHAPAccessoryConfiguration);
      -[HMDUnpairedHAPAccessoryConfiguration setSetupCode:](v54, "setSetupCode:", v106);
      -[HMDHome _setupCodeProviderForMessage:](v11, "_setupCodeProviderForMessage:", v111);
      v55 = (void *)objc_claimAutoreleasedReturnValue();
      -[HMDUnpairedHAPAccessoryConfiguration setSetupCodeProvider:](v54, "setSetupCodeProvider:", v55);

      -[HMDHome homeLocationHandler](v11, "homeLocationHandler");
      v56 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v56, "isoCountryCode");
      v57 = (void *)objc_claimAutoreleasedReturnValue();
      -[HMDUnpairedHAPAccessoryConfiguration setIsoCountryCode:](v54, "setIsoCountryCode:", v57);

      -[HMDHome matterFabricID](v11, "matterFabricID");
      v58 = (void *)objc_claimAutoreleasedReturnValue();
      -[HMDUnpairedHAPAccessoryConfiguration setChipFabricID:](v54, "setChipFabricID:", v58);

      -[HMDHome uuid](v11, "uuid");
      v59 = (void *)objc_claimAutoreleasedReturnValue();
      -[HMDUnpairedHAPAccessoryConfiguration setHomeUUID:](v54, "setHomeUUID:", v59);

      objc_msgSend(v109, "preferredAccessoryServer");
      v60 = (void *)objc_claimAutoreleasedReturnValue();
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0)
        v61 = v60;
      else
        v61 = 0;
      v105 = v61;

      v62 = (void *)MEMORY[0x227676638]();
      v63 = v11;
      HMFGetOSLogHandle();
      v64 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v64, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v65 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v8, "UUIDString");
        v66 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v105, "isWacNeeded");
        HMFBooleanToString();
        v67 = (void *)objc_claimAutoreleasedReturnValue();
        HMDNetworkRouterSupportAsString(-[HMDHome networkRouterSupport](v63, "networkRouterSupport"));
        v68 = (void *)objc_claimAutoreleasedReturnValue();
        -[HMDHome networkRouterSupportDisableReason](v63, "networkRouterSupportDisableReason");
        HMNetworkRouterSupportDisableReasonAsString();
        v69 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138544386;
        *(_QWORD *)&buf[4] = v65;
        *(_WORD *)&buf[12] = 2112;
        *(_QWORD *)&buf[14] = v66;
        *(_WORD *)&buf[22] = 2112;
        v126 = v67;
        *(_WORD *)v127 = 2112;
        *(_QWORD *)&v127[2] = v68;
        *(_WORD *)&v127[10] = 2112;
        *(_QWORD *)&v127[12] = v69;
        _os_log_impl(&dword_2218F0000, v64, OS_LOG_TYPE_INFO, "%{public}@Adding unpaired accessory with uuid: %@, WAC needed: %@, network router support: %@ (Reason %@)", buf, 0x34u);

      }
      objc_autoreleasePoolPop(v62);
      objc_msgSend(MEMORY[0x24BE3F138], "currentActivity");
      v70 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v108, "accessoryUUID");

      objc_msgSend(v109, "preferredAccessoryServer");
      v71 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v71, "category");

      v72 = HMDNetworkRouterSupportAsString(-[HMDHome networkRouterSupport](v63, "networkRouterSupport"));
      v73 = (id)objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedInteger:", -[HMDHome networkRouterSupportDisableReason](v63, "networkRouterSupportDisableReason"));
      objc_msgSend(v107, "linkType");
      v74 = (id)HAPLinkTypeDescription();
      objc_msgSend(v107, "communicationProtocol");
      v75 = (id)HAPCommunicationProtocolDescription();
      objc_msgSend(v105, "isWacNeeded");
      v76 = (id)HMFBooleanToString();
      -[HMDUnpairedHAPAccessoryConfiguration requiresUserConsent](v54, "requiresUserConsent");
      v77 = (id)HMFBooleanToString();
      objc_msgSend(v108, "appIdentifier");

      objc_msgSend(v107, "isThreadAccessory");
      v78 = (id)HMFBooleanToString();
      if (objc_msgSend(v105, "isWacNeeded")
        && (-[HMDHome networkRouterSupport](v63, "networkRouterSupport") & 8) != 0)
      {
        v112[0] = MEMORY[0x24BDAC760];
        v112[1] = 3221225472;
        v112[2] = __93__HMDHome__continuePairingAfterUserConsentWithAccessoryUUID_orUnassociatedAccessory_message___block_invoke;
        v112[3] = &unk_24E776220;
        v112[4] = v63;
        v113 = v70;
        v114 = v108;
        v115 = v107;
        v116 = v111;
        v117 = v54;
        v118 = v109;
        -[HMDHome _createUniquePSKClientConfigurationWithRequestMessage:pairingEvent:completion:](v63, "_createUniquePSKClientConfigurationWithRequestMessage:pairingEvent:completion:", v116, v115, v112);

      }
      else
      {
        objc_msgSend(v70, "begin", v105);
        *(_QWORD *)buf = v70;
        -[HMDHome _pairAccessoryWithAccessoryDescription:unpairedAccessory:configuration:pairingEvent:requestMessage:](v63, "_pairAccessoryWithAccessoryDescription:unpairedAccessory:configuration:pairingEvent:requestMessage:", v108, v109, v54, v107, v111);
        __HMFActivityScopeLeave();

      }
    }
    else
    {
      v110 = v110;
      v111 = v111;
      if (v11)
      {
        objc_msgSend(MEMORY[0x24BE3F248], "sharedPreferences");
        v26 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v26, "preferenceForKey:", CFSTR("enableMediaAccessories"));
        v27 = (void *)objc_claimAutoreleasedReturnValue();
        v28 = objc_msgSend(v27, "BOOLValue");

        if ((v28 & 1) != 0)
        {
          v29 = v110;
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) != 0)
            v30 = v29;
          else
            v30 = 0;
          v31 = v30;

          if (v31
            && (objc_msgSend(MEMORY[0x24BE3F248], "sharedPreferences"),
                v32 = (void *)objc_claimAutoreleasedReturnValue(),
                objc_msgSend(v32, "preferenceForKey:", CFSTR("enableAppleMedia")),
                v33 = (void *)objc_claimAutoreleasedReturnValue(),
                v34 = objc_msgSend(v33, "BOOLValue"),
                v33,
                v32,
                (v34 & 1) == 0))
          {
            v92 = (void *)MEMORY[0x227676638]();
            v93 = v11;
            HMFGetOSLogHandle();
            v94 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v94, OS_LOG_TYPE_DEFAULT))
            {
              HMFGetLogIdentifier();
              v95 = (void *)objc_claimAutoreleasedReturnValue();
              *(_DWORD *)buf = 138543362;
              *(_QWORD *)&buf[4] = v95;
              _os_log_impl(&dword_2218F0000, v94, OS_LOG_TYPE_DEFAULT, "%{public}@Apple media accessories are not currently supported", buf, 0xCu);

            }
            objc_autoreleasePoolPop(v92);
            objc_msgSend(MEMORY[0x24BDD1540], "hmErrorWithCode:", 48);
            v96 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v111, "respondWithError:", v96);

          }
          else
          {
            objc_initWeak(&location, v11);
            v35 = v29;
            objc_opt_class();
            if ((objc_opt_isKindOfClass() & 1) != 0)
              v36 = v35;
            else
              v36 = 0;
            v37 = v36;

            if (v37)
            {
              v38 = (void *)MEMORY[0x227676638]();
              v39 = v11;
              HMFGetOSLogHandle();
              v40 = (id)objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v40, OS_LOG_TYPE_DEFAULT))
              {
                HMFGetLogIdentifier();
                v41 = (void *)objc_claimAutoreleasedReturnValue();
                *(_DWORD *)buf = 138543618;
                *(_QWORD *)&buf[4] = v41;
                *(_WORD *)&buf[12] = 2112;
                *(_QWORD *)&buf[14] = v37;
                _os_log_impl(&dword_2218F0000, v40, OS_LOG_TYPE_DEFAULT, "%{public}@Starting WAC for %@", buf, 0x16u);

              }
              objc_autoreleasePoolPop(v38);
              *(_QWORD *)buf = MEMORY[0x24BDAC760];
              *(_QWORD *)&buf[8] = 3221225472;
              *(_QWORD *)&buf[16] = __49__HMDHome__addAndMaybeWACMediaAccessory_message___block_invoke;
              v126 = &unk_24E776270;
              objc_copyWeak((id *)&v127[16], &location);
              *(_QWORD *)v127 = v111;
              *(_QWORD *)&v127[8] = v37;
              objc_msgSend(*(id *)&v127[8], "startConfigurationWithCompletionHandler:", buf);

              objc_destroyWeak((id *)&v127[16]);
            }
            else
            {
              v97 = v35;
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0)
                v98 = v97;
              else
                v98 = 0;
              v99 = v98;

              if (v99)
              {
                -[HMDHome _addAndMaybeAssociateMediaAccessory:message:](v11, v99, v111);
              }
              else
              {
                v100 = (void *)MEMORY[0x227676638]();
                v101 = v11;
                HMFGetOSLogHandle();
                v102 = (id)objc_claimAutoreleasedReturnValue();
                if (os_log_type_enabled(v102, OS_LOG_TYPE_DEFAULT))
                {
                  HMFGetLogIdentifier();
                  v103 = (void *)objc_claimAutoreleasedReturnValue();
                  *(_DWORD *)buf = 138543618;
                  *(_QWORD *)&buf[4] = v103;
                  *(_WORD *)&buf[12] = 2112;
                  *(_QWORD *)&buf[14] = v97;
                  _os_log_impl(&dword_2218F0000, v102, OS_LOG_TYPE_DEFAULT, "%{public}@Unable to add unknown unassociated accessory: %@", buf, 0x16u);

                }
                objc_autoreleasePoolPop(v100);
                objc_msgSend(MEMORY[0x24BDD1540], "hmErrorWithCode:", 48);
                v104 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v111, "respondWithError:", v104);

              }
            }

            objc_destroyWeak(&location);
          }
        }
        else
        {
          v49 = (void *)MEMORY[0x227676638]();
          v50 = v11;
          HMFGetOSLogHandle();
          v51 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v51, OS_LOG_TYPE_DEFAULT))
          {
            HMFGetLogIdentifier();
            v52 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 138543362;
            *(_QWORD *)&buf[4] = v52;
            _os_log_impl(&dword_2218F0000, v51, OS_LOG_TYPE_DEFAULT, "%{public}@Media accessories are not currently supported", buf, 0xCu);

          }
          objc_autoreleasePoolPop(v49);
          objc_msgSend(MEMORY[0x24BDD1540], "hmErrorWithCode:", 48);
          v31 = (id)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v111, "respondWithError:", v31);
        }

      }
    }
    goto LABEL_74;
  }
  v79 = (void *)MEMORY[0x227676638]();
  v80 = v11;
  HMFGetOSLogHandle();
  v81 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v81, OS_LOG_TYPE_DEFAULT))
  {
    HMFGetLogIdentifier();
    v82 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "UUIDString");
    v83 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543618;
    *(_QWORD *)&buf[4] = v82;
    *(_WORD *)&buf[12] = 2112;
    *(_QWORD *)&buf[14] = v83;
    _os_log_impl(&dword_2218F0000, v81, OS_LOG_TYPE_DEFAULT, "%{public}@Unknown accessory with identifier: %@", buf, 0x16u);

  }
  objc_autoreleasePoolPop(v79);
  v84 = (void *)MEMORY[0x227676638]();
  v85 = v80;
  HMFGetOSLogHandle();
  v86 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v86, OS_LOG_TYPE_DEFAULT))
  {
    HMFGetLogIdentifier();
    v87 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHome accessoryBrowser](v85, "accessoryBrowser");
    v88 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHome accessoryBrowser](v85, "accessoryBrowser");
    v89 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v89, "unassociatedAccessories");
    v90 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543874;
    *(_QWORD *)&buf[4] = v87;
    *(_WORD *)&buf[12] = 2112;
    *(_QWORD *)&buf[14] = v88;
    *(_WORD *)&buf[22] = 2112;
    v126 = v90;
    _os_log_impl(&dword_2218F0000, v86, OS_LOG_TYPE_DEFAULT, "%{public}@AccessoryBrowser %@, Unassociated accessories: %@", buf, 0x20u);

  }
  objc_autoreleasePoolPop(v84);
  objc_msgSend(v111, "responseHandler");
  v91 = (void *)objc_claimAutoreleasedReturnValue();

  if (v91)
  {
    objc_msgSend(v111, "responseHandler");
    v110 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD1540], "hmErrorWithCode:", 2);
    v109 = (id)objc_claimAutoreleasedReturnValue();
    (*((void (**)(id, id, _QWORD))v110 + 2))(v110, v109, 0);
LABEL_74:

  }
}

- (void)_pairAccessoryWithAccessoryDescription:(id)a3 unpairedAccessory:(id)a4 configuration:(id)a5 pairingEvent:(id)a6 requestMessage:(id)a7
{
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  void *v17;
  id v18;

  v12 = a7;
  v13 = a6;
  v14 = a5;
  v15 = a4;
  v16 = a3;
  -[HMDHome accessoryBrowser](self, "accessoryBrowser");
  v18 = (id)objc_claimAutoreleasedReturnValue();
  __createAccessoryBrowserAddAccessoryCompletionHandler(self, v16, v14, v13, v12);
  v17 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v18, "pairAccessory:configuration:completionHandler:", v15, v14, v17);
}

- (void)_accessoryPairingDidComplete:(id)a3 configuration:(id)a4 pairingEvent:(id)a5 accessoryServer:(id)a6 certificationStatus:(int64_t)a7 requestMessage:(id)a8
{
  id v14;
  id v15;
  id v16;
  id v17;
  void *v18;
  id v19;
  void *v20;
  void *v21;
  HMDHome *v22;
  NSObject *v23;
  void *v24;
  void *v25;
  void *v26;
  id v27;
  id v28;
  id v29;
  id v30;
  void *v31;
  id v32;
  id v33;
  _QWORD v34[4];
  id v35;
  id v36;
  id v37;
  id v38;
  id v39[2];
  uint8_t buf[4];
  void *v41;
  uint64_t v42;

  v42 = *MEMORY[0x24BDAC8D0];
  v14 = a3;
  v32 = a4;
  v15 = a5;
  v16 = a6;
  v33 = a8;
  -[HMDHome _removePendingAccessoryAdd:](self, "_removePendingAccessoryAdd:", v14);
  v17 = v16;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v18 = v17;
  else
    v18 = 0;
  v19 = v18;

  v31 = v19;
  v20 = 0;
  if (objc_msgSend(v19, "isWacComplete"))
  {
    v21 = (void *)MEMORY[0x227676638]();
    v22 = self;
    HMFGetOSLogHandle();
    v23 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v23, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v24 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v41 = v24;
      _os_log_impl(&dword_2218F0000, v23, OS_LOG_TYPE_INFO, "%{public}@WAC was completed as part of accessory pairing.", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v21);
    objc_msgSend(v32, "networkCredential");
    v20 = (void *)objc_claimAutoreleasedReturnValue();
  }
  if (objc_msgSend(v15, "isMatterAccessory"))
    notifyMatterMetricPairingStep(self, 0x18uLL);
  objc_msgSend(MEMORY[0x24BE3F138], "currentActivity");
  v25 = (void *)objc_claimAutoreleasedReturnValue();
  objc_initWeak((id *)buf, self);
  objc_msgSend(v14, "accessoryUUID");
  v26 = (void *)objc_claimAutoreleasedReturnValue();
  v34[0] = MEMORY[0x24BDAC760];
  v34[1] = 3221225472;
  v34[2] = __118__HMDHome__accessoryPairingDidComplete_configuration_pairingEvent_accessoryServer_certificationStatus_requestMessage___block_invoke;
  v34[3] = &unk_24E776248;
  objc_copyWeak(v39, (id *)buf);
  v27 = v17;
  v35 = v27;
  v28 = v15;
  v36 = v28;
  v29 = v14;
  v37 = v29;
  v30 = v25;
  v38 = v30;
  v39[1] = (id)a7;
  -[HMDHome _processAccessoriesToAddForUnpairedAccessory:certificationStatus:accessoryServer:networkCredential:pairingEvent:message:completionHandler:](self, "_processAccessoriesToAddForUnpairedAccessory:certificationStatus:accessoryServer:networkCredential:pairingEvent:message:completionHandler:", v26, a7, v27, v20, v28, v33, v34);

  objc_destroyWeak(v39);
  objc_destroyWeak((id *)buf);

}

- (void)_removePendingAccessoryAdd:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  HMDHome *v7;
  NSObject *v8;
  void *v9;
  void *v10;
  int v11;
  void *v12;
  __int16 v13;
  void *v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v4 = a3;
  objc_msgSend(v4, "accessoryUUID");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = (void *)MEMORY[0x227676638]();
  v7 = self;
  HMFGetOSLogHandle();
  v8 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "UUIDString");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v11 = 138543618;
    v12 = v9;
    v13 = 2112;
    v14 = v10;
    _os_log_impl(&dword_2218F0000, v8, OS_LOG_TYPE_INFO, "%{public}@Removing accessoryDescription, setupCode and handlers for accessory %@", (uint8_t *)&v11, 0x16u);

  }
  objc_autoreleasePoolPop(v6);
  os_unfair_recursive_lock_lock_with_options();
  -[NSMapTable removeObjectForKey:](v7->_addPendingAccessories, "removeObjectForKey:", v4);
  if (v5)
  {
    -[NSMutableDictionary removeObjectForKey:](v7->_addPendingAccessorySetupCodeHandlers, "removeObjectForKey:", v5);
    -[NSMutableDictionary removeObjectForKey:](v7->_addPendingAccessorySetupCodes, "removeObjectForKey:", v5);
    -[NSMutableDictionary removeObjectForKey:](v7->_addPendingAccessoryOnboardingSetupPayloadStrings, "removeObjectForKey:", v5);
  }
  os_unfair_recursive_lock_unlock();

}

- (void)_testOnlyAddMediaAccessory:(id)a3 message:(id)a4
{
  -[HMDHome _addMediaAccessory:message:](self, a3, a4);
}

- (void)_handleAddAccessoryWithDescription:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  id v7;
  void *v8;
  HMDHome *v9;
  NSObject *v10;
  void *v11;
  void *v12;
  id v13;
  uint8_t buf[4];
  void *v15;
  __int16 v16;
  id v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  v4 = a3;
  objc_msgSend(v4, "dataForKey:", CFSTR("kAccessoryDescriptionDataKey"));
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v13 = 0;
  -[HMDHome _setupDescriptionFromData:error:](self, "_setupDescriptionFromData:error:", v5, &v13);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = v13;
  if (v6)
  {
    -[HMDHome _handleAddAccessoryWithDescription:progressHandlerDelegate:message:]((id *)&self->super.super.isa, v6, 0, v4);
  }
  else
  {
    v8 = (void *)MEMORY[0x227676638]();
    v9 = self;
    HMFGetOSLogHandle();
    v10 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v15 = v11;
      v16 = 2112;
      v17 = v7;
      _os_log_impl(&dword_2218F0000, v10, OS_LOG_TYPE_ERROR, "%{public}@Failed to unarchive setup accessory description from accessory description data: %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v8);
    objc_msgSend(MEMORY[0x24BDD1540], "hmErrorWithCode:", 20);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "respondWithError:", v12);

  }
}

- (void)_continuePairingAfterUserConsentWithAccessoryDescription:(id)a3 progressHandlerDelegate:(id)a4 message:(id)a5
{
  id v9;
  void *v10;
  HMDHome *v11;
  NSObject *v12;
  void *v13;
  HMDUnpairedHAPAccessoryConfiguration *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  id v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;
  void *v33;
  HMDHome *v34;
  NSObject *v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  id v41;
  id v42;
  void *v43;
  id v44;
  _QWORD v45[5];
  id v46;
  id v47;
  id v48;
  id v49;
  HMDUnpairedHAPAccessoryConfiguration *v50;
  id v51;
  id location;
  _BYTE buf[24];
  void *v54;
  _BYTE v55[10];
  __int16 v56;
  void *v57;
  uint64_t v58;

  v58 = *MEMORY[0x24BDAC8D0];
  v9 = a3;
  v41 = a4;
  v42 = a5;
  v10 = (void *)MEMORY[0x227676638]();
  v11 = self;
  HMFGetOSLogHandle();
  v12 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543618;
    *(_QWORD *)&buf[4] = v13;
    *(_WORD *)&buf[12] = 2112;
    *(_QWORD *)&buf[14] = v9;
    _os_log_impl(&dword_2218F0000, v12, OS_LOG_TYPE_INFO, "%{public}@Continue pairing after user consent with accessoryDescription %@", buf, 0x16u);

  }
  objc_autoreleasePoolPop(v10);
  v14 = objc_alloc_init(HMDUnpairedHAPAccessoryConfiguration);
  -[HMDUnpairedHAPAccessoryConfiguration setRequiresUserConsent:](v14, "setRequiresUserConsent:", 1);
  -[HMDHome homeLocationHandler](v11, "homeLocationHandler");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v15, "isoCountryCode");
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDUnpairedHAPAccessoryConfiguration setIsoCountryCode:](v14, "setIsoCountryCode:", v16);

  -[HMDHome matterFabricID](v11, "matterFabricID");
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDUnpairedHAPAccessoryConfiguration setChipFabricID:](v14, "setChipFabricID:", v17);

  -[HMDHome uuid](v11, "uuid");
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDUnpairedHAPAccessoryConfiguration setHomeUUID:](v14, "setHomeUUID:", v18);

  +[HMDAccessoryPairingEvent pairingAccessoryWithDescription:home:](HMDAccessoryPairingEvent, "pairingAccessoryWithDescription:home:", v9, v11);
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v19, "isMatterAccessory"))
    notifyMatterMetricPairingStep(v11, 2uLL);
  objc_msgSend(v9, "setupAccessoryPayload");
  v43 = (void *)objc_claimAutoreleasedReturnValue();
  v20 = objc_alloc(MEMORY[0x24BE3F138]);
  v21 = (void *)MEMORY[0x24BDD17C8];
  MEMORY[0x227675180](v11, a2);
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v21, "stringWithFormat:", CFSTR("%@, %s:%ld"), v22, "/Library/Caches/com.apple.xbs/Sources/HomeKit_executables/Sources/homed/Home/HMDHome.m", 11958);
  v23 = (void *)objc_claimAutoreleasedReturnValue();
  v24 = (void *)objc_msgSend(v20, "initWithName:", v23);

  v44 = v24;
  objc_msgSend(v9, "accessoryUUID");

  objc_msgSend(v43, "categoryNumber");
  objc_msgSend(v19, "linkType");
  v25 = (id)HAPLinkTypeDescription();
  objc_msgSend(v19, "communicationProtocol");
  v26 = (id)HAPCommunicationProtocolDescription();
  objc_msgSend(v43, "supportsWAC");
  v27 = (id)HMFBooleanToString();
  -[HMDUnpairedHAPAccessoryConfiguration requiresUserConsent](v14, "requiresUserConsent");
  v28 = (id)HMFBooleanToString();
  v29 = HMDNetworkRouterSupportAsString(-[HMDHome networkRouterSupport](v11, "networkRouterSupport"));
  v30 = (id)objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedInteger:", -[HMDHome networkRouterSupportDisableReason](v11, "networkRouterSupportDisableReason"));
  objc_msgSend(v9, "appIdentifier");

  objc_msgSend(v19, "isThreadAccessory");
  v31 = (id)HMFBooleanToString();

  if (v41)
  {
    v32 = v41;
    if (v11)
    {
      objc_initWeak(&location, v11);
      *(_QWORD *)buf = MEMORY[0x24BDAC760];
      *(_QWORD *)&buf[8] = 3221225472;
      *(_QWORD *)&buf[16] = __74__HMDHome_createLocalAddAccessoryProgressHandler_progressHandlerDelegate___block_invoke;
      v54 = &unk_24E7761D0;
      objc_copyWeak((id *)&v55[8], &location);
      *(_QWORD *)v55 = v32;
      v40 = _Block_copy(buf);

      objc_destroyWeak((id *)&v55[8]);
      objc_destroyWeak(&location);
    }
    else
    {
      v40 = 0;
    }

  }
  else
  {
    HMDHomeCreateAddAccessoryProgressHandler(v11, v9, v42);
    v40 = (void *)objc_claimAutoreleasedReturnValue();
  }
  v33 = (void *)MEMORY[0x227676638]();
  v34 = v11;
  HMFGetOSLogHandle();
  v35 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v35, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v36 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "supportsWAC");
    HMFBooleanToString();
    v37 = (void *)objc_claimAutoreleasedReturnValue();
    HMDNetworkRouterSupportAsString(-[HMDHome networkRouterSupport](v34, "networkRouterSupport"));
    v38 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHome networkRouterSupportDisableReason](v34, "networkRouterSupportDisableReason");
    HMNetworkRouterSupportDisableReasonAsString();
    v39 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138544386;
    *(_QWORD *)&buf[4] = v36;
    *(_WORD *)&buf[12] = 2112;
    *(_QWORD *)&buf[14] = v9;
    *(_WORD *)&buf[22] = 2112;
    v54 = v37;
    *(_WORD *)v55 = 2112;
    *(_QWORD *)&v55[2] = v38;
    v56 = 2112;
    v57 = v39;
    _os_log_impl(&dword_2218F0000, v35, OS_LOG_TYPE_INFO, "%{public}@Adding unpaired accessory with description: %@, supports WAC: %@, network router support: %@ (Reason: %@)", buf, 0x34u);

  }
  objc_autoreleasePoolPop(v33);
  if (objc_msgSend(v9, "supportsWAC")
    && (-[HMDHome networkRouterSupport](v34, "networkRouterSupport") & 8) != 0)
  {
    v45[0] = MEMORY[0x24BDAC760];
    v45[1] = 3221225472;
    v45[2] = __100__HMDHome__continuePairingAfterUserConsentWithAccessoryDescription_progressHandlerDelegate_message___block_invoke;
    v45[3] = &unk_24E7762E8;
    v45[4] = v34;
    v46 = v44;
    v47 = v9;
    v48 = v19;
    v49 = v42;
    v50 = v14;
    v51 = v40;
    -[HMDHome _createUniquePSKClientConfigurationWithRequestMessage:pairingEvent:completion:](v34, "_createUniquePSKClientConfigurationWithRequestMessage:pairingEvent:completion:", v49, v48, v45);

  }
  else
  {
    objc_msgSend(v44, "begin");
    *(_QWORD *)buf = v44;
    -[HMDHome _pairAccessoryWithAccessoryDescription:configuration:pairingEvent:progressHandler:requestMessage:](v34, "_pairAccessoryWithAccessoryDescription:configuration:pairingEvent:progressHandler:requestMessage:", v9, v14, v19, v40, v42);
    __HMFActivityScopeLeave();

  }
}

- (void)_pairAccessoryWithAccessoryDescription:(id)a3 configuration:(id)a4 pairingEvent:(id)a5 progressHandler:(id)a6 requestMessage:(id)a7
{
  id v12;
  id v13;
  id v14;
  void *v15;
  id v16;

  v12 = a6;
  v13 = a4;
  v14 = a3;
  __createAccessoryBrowserAddAccessoryCompletionHandler(self, v14, v13, a5, a7);
  v16 = (id)objc_claimAutoreleasedReturnValue();
  -[HMDHome accessoryBrowser](self, "accessoryBrowser");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v15, "pairAccessoryWithDescription:configuration:progressHandler:completionHandler:", v14, v13, v12, v16);

}

- (void)_handleRemoteAddHAPAccessories:(id)a3
{
  id v4;
  void *v5;
  _QWORD v6[5];

  v4 = a3;
  -[HMDHome updateCATIDForUsersIfNeeded:](self, "updateCATIDForUsersIfNeeded:", 1);
  -[HMDHome residentSyncManager](self, "residentSyncManager");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6[0] = MEMORY[0x24BDAC760];
  v6[1] = 3221225472;
  v6[2] = __42__HMDHome__handleRemoteAddHAPAccessories___block_invoke;
  v6[3] = &unk_24E79BF48;
  v6[4] = self;
  objc_msgSend(v5, "interceptRemoteResidentRequest:proceed:", v4, v6);

}

- (void)_performRemoteAddHAPAccessories:(id)a3
{
  id v4;
  void *v5;
  HMDHome *v6;
  NSObject *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  id v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  uint64_t v21;
  id v22;
  id v23;
  void *v24;
  id v25;
  void *v26;
  HMDHome *v27;
  NSObject *v28;
  void *v29;
  void *v30;
  HMDHome *v31;
  NSObject *v32;
  void *v33;
  void *v34;
  void *v35;
  _QWORD v36[4];
  id v37;
  _QWORD v38[5];
  id v39;
  id v40;
  id v41;
  _BYTE buf[12];
  __int16 v43;
  void *v44;
  uint64_t v45;

  v45 = *MEMORY[0x24BDAC8D0];
  v4 = a3;
  v5 = (void *)MEMORY[0x227676638]();
  v6 = self;
  HMFGetOSLogHandle();
  v7 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "shortDescription");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543618;
    *(_QWORD *)&buf[4] = v8;
    v43 = 2112;
    v44 = v9;
    _os_log_impl(&dword_2218F0000, v7, OS_LOG_TYPE_INFO, "%{public}@performRemoteAddHAPAccessories: %@", buf, 0x16u);

  }
  objc_autoreleasePoolPop(v5);
  objc_msgSend(v4, "messagePayload");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "objectForKey:", CFSTR("HMDSerializedAccessoriesMessageKey"));
  v11 = (void *)objc_claimAutoreleasedReturnValue();

  if (v11)
  {
    +[HMDStructuredReader readerFromObjectWithExtendedTypes:](HMDStructuredReader, "readerFromObjectWithExtendedTypes:", v11);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    HMDRemoteAddCodingModel();
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "decodeRootObjectFromReader:", v12);
    v35 = (void *)objc_claimAutoreleasedReturnValue();

    if (v35)
    {
      objc_msgSend(v4, "dictionaryForKey:", CFSTR("HMDUpdatedHomeInfoMessageKey"));
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      v15 = objc_alloc(MEMORY[0x24BE3F168]);
      -[HMDHome workQueue](v6, "workQueue");
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      v17 = (void *)objc_msgSend(v15, "initWithQueue:", v16);

      -[HMDHome wiFiRouterAccessories](v6, "wiFiRouterAccessories");
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      v19 = v11;
      *(_QWORD *)buf = _HMFThreadLocalAsyncContextPush();
      -[HMDHome _addAccessoriesUsingPrimaryAccessoryModel:updatedHomeInfo:message:](v6, v35, v14, v4);
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      v21 = MEMORY[0x24BDAC760];
      v38[0] = MEMORY[0x24BDAC760];
      v38[1] = 3221225472;
      v38[2] = __43__HMDHome__performRemoteAddHAPAccessories___block_invoke;
      v38[3] = &unk_24E776310;
      v38[4] = v6;
      v22 = v4;
      v39 = v22;
      v23 = v18;
      v40 = v23;
      v41 = v35;
      objc_msgSend(v20, "then:", v38);
      v24 = (void *)objc_claimAutoreleasedReturnValue();
      v36[0] = v21;
      v36[1] = 3221225472;
      v36[2] = __43__HMDHome__performRemoteAddHAPAccessories___block_invoke_2;
      v36[3] = &unk_24E797A18;
      v37 = v22;
      v25 = (id)objc_msgSend(v24, "recover:", v36);

      v11 = v19;
      _HMFThreadLocalAsyncContextPop();

    }
    else
    {
      v30 = (void *)MEMORY[0x227676638]();
      v31 = v6;
      HMFGetOSLogHandle();
      v32 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v33 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v12, "error");
        v34 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        *(_QWORD *)&buf[4] = v33;
        v43 = 2112;
        v44 = v34;
        _os_log_impl(&dword_2218F0000, v32, OS_LOG_TYPE_ERROR, "%{public}@Failed to deserialize accessories in remote add request: %@", buf, 0x16u);

      }
      objc_autoreleasePoolPop(v30);
      objc_msgSend(MEMORY[0x24BDD1540], "hmErrorWithCode:", 3);
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "respondWithError:", v14);
    }

  }
  else
  {
    v26 = (void *)MEMORY[0x227676638]();
    v27 = v6;
    HMFGetOSLogHandle();
    v28 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v29 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      *(_QWORD *)&buf[4] = v29;
      _os_log_impl(&dword_2218F0000, v28, OS_LOG_TYPE_ERROR, "%{public}@Received a nil serialized accessories value in remote add message payload", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v26);
    objc_msgSend(MEMORY[0x24BDD1540], "hmErrorWithCode:", 27);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "respondWithError:", v12);
  }

}

- (void)_handleUserConsentForAccessoryReplacement:(id)a3 consent:(BOOL)a4 message:(id)a5
{
  id v8;
  id v9;
  void *v10;
  HMDHome *v11;
  NSObject *v12;
  _BOOL4 v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  int v27;
  void *v28;
  __int16 v29;
  void *v30;
  __int16 v31;
  void *v32;
  __int16 v33;
  void *v34;
  uint64_t v35;

  v35 = *MEMORY[0x24BDAC8D0];
  v8 = a3;
  v9 = a5;
  v10 = (void *)MEMORY[0x227676638]();
  v11 = self;
  HMFGetOSLogHandle();
  v12 = objc_claimAutoreleasedReturnValue();
  v13 = os_log_type_enabled(v12, OS_LOG_TYPE_INFO);
  if (a4)
  {
    if (v13)
    {
      HMFGetLogIdentifier();
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v9, "name");
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v9, "identifier");
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v9, "messagePayload");
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      v27 = 138544130;
      v28 = v14;
      v29 = 2112;
      v30 = v15;
      v31 = 2112;
      v32 = v16;
      v33 = 2112;
      v34 = v17;
      _os_log_impl(&dword_2218F0000, v12, OS_LOG_TYPE_INFO, "%{public}@User consented to Wi-Fi router replacement; continue to adding new Wi-Fi router - message %@/%@/%@",
        (uint8_t *)&v27,
        0x2Au);

    }
    objc_autoreleasePoolPop(v10);
    objc_msgSend(v8, "setUserConsentedForReplace:", 1);
    objc_msgSend(v8, "accessoryUUID");
    v18 = (void *)objc_claimAutoreleasedReturnValue();

    if (v18)
    {
      objc_msgSend(v8, "accessoryUUID");
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      -[HMDHome _continuePairingAfterUserConsentWithAccessoryUUID:orUnassociatedAccessory:message:](v11, "_continuePairingAfterUserConsentWithAccessoryUUID:orUnassociatedAccessory:message:", v19, 0, v9);

    }
    else
    {
      -[HMDHome _continuePairingAfterUserConsentWithAccessoryDescription:progressHandlerDelegate:message:](v11, "_continuePairingAfterUserConsentWithAccessoryDescription:progressHandlerDelegate:message:", v8, 0, v9);
    }
  }
  else
  {
    if (v13)
    {
      HMFGetLogIdentifier();
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v9, "name");
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v9, "identifier");
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v9, "messagePayload");
      v23 = (void *)objc_claimAutoreleasedReturnValue();
      v27 = 138544130;
      v28 = v20;
      v29 = 2112;
      v30 = v21;
      v31 = 2112;
      v32 = v22;
      v33 = 2112;
      v34 = v23;
      _os_log_impl(&dword_2218F0000, v12, OS_LOG_TYPE_INFO, "%{public}@User did not consent to Wi-Fi router replacement; cancelling adding new Wi-Fi router - message %@/%@/%@",
        (uint8_t *)&v27,
        0x2Au);

    }
    objc_autoreleasePoolPop(v10);
    objc_msgSend(MEMORY[0x24BDD1540], "hmInternalErrorWithCode:", 1091);
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    +[HMDMatterAccessoryPairingEndContext hmContextWithCancelledError:](HMDMatterAccessoryPairingEndContext, "hmContextWithCancelledError:", v24);
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHome _cancelPairingWithAccessoryDescription:context:](v11, "_cancelPairingWithAccessoryDescription:context:", v8, v25);

    objc_msgSend(MEMORY[0x24BDD1540], "hmErrorWithCode:", 23);
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "respondWithError:", v26);

  }
}

- (void)_handleUserConsentResponseForAccessory:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  id v7;
  void *v8;
  void *v9;
  void *v10;
  unint64_t v11;
  _BOOL8 v12;
  void *v13;
  void *v14;
  HMDHome *v15;
  NSObject *v16;
  void *v17;
  void *v18;
  HMDHome *v19;
  NSObject *v20;
  void *v21;
  void *v22;
  HMDHome *v23;
  NSObject *v24;
  void *v25;
  uint64_t v26;
  void *v27;
  void (**v28)(_QWORD, _QWORD, _QWORD);
  id v29;
  uint8_t buf[4];
  void *v31;
  __int16 v32;
  id v33;
  uint64_t v34;

  v34 = *MEMORY[0x24BDAC8D0];
  v4 = a3;
  if ((objc_msgSend(v4, "isEntitledForSPIAccess") & 1) != 0)
  {
    objc_msgSend(v4, "dataForKey:", CFSTR("kAccessoryDescriptionDataKey"));
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v29 = 0;
    -[HMDHome _setupDescriptionFromData:error:](self, "_setupDescriptionFromData:error:", v5, &v29);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v7 = v29;
    if (v6)
    {
      objc_msgSend(v4, "numberForKey:", *MEMORY[0x24BDD63D0]);
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      if (v8)
      {
        -[HMDHome addPendingAccessories](self, "addPendingAccessories");
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v9, "objectForKey:", v6);
        v10 = (void *)objc_claimAutoreleasedReturnValue();

        v11 = objc_msgSend(v8, "integerValue");
        if (v11 > 1)
        {
          if ((v11 & 0xFFFFFFFFFFFFFFFELL) == 2)
          {
            -[HMDHome _handleUserConsentForAccessoryReplacement:consent:message:](self, "_handleUserConsentForAccessoryReplacement:consent:message:", v6, v11 == 3, v10);
          }
          else
          {
            objc_msgSend(MEMORY[0x24BDD1540], "hmErrorWithCode:", 3);
            v26 = objc_claimAutoreleasedReturnValue();

            v7 = (id)v26;
          }
        }
        else
        {
          v12 = v11 == 1;
          -[HMDHome accessoryBrowser](self, "accessoryBrowser");
          v13 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v13, "didReceiveUserConsentResponseForSetupAccessoryDetail:consent:", v6, v12);

        }
        objc_msgSend(v4, "responseHandler");
        v27 = (void *)objc_claimAutoreleasedReturnValue();

        if (v27)
        {
          objc_msgSend(v4, "responseHandler");
          v28 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
          ((void (**)(_QWORD, id, _QWORD))v28)[2](v28, v7, 0);

        }
      }
      else
      {
        v22 = (void *)MEMORY[0x227676638]();
        v23 = self;
        HMFGetOSLogHandle();
        v24 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
        {
          HMFGetLogIdentifier();
          v25 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543362;
          v31 = v25;
          _os_log_impl(&dword_2218F0000, v24, OS_LOG_TYPE_ERROR, "%{public}@user consent response is absent", buf, 0xCu);

        }
        objc_autoreleasePoolPop(v22);
      }

    }
    else
    {
      v18 = (void *)MEMORY[0x227676638]();
      v19 = self;
      HMFGetOSLogHandle();
      v20 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v21 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        v31 = v21;
        v32 = 2112;
        v33 = v7;
        _os_log_impl(&dword_2218F0000, v20, OS_LOG_TYPE_ERROR, "%{public}@Failed to unarchive setup accessory description from accessory description data: %@", buf, 0x16u);

      }
      objc_autoreleasePoolPop(v18);
    }

  }
  else
  {
    v14 = (void *)MEMORY[0x227676638]();
    v15 = self;
    HMFGetOSLogHandle();
    v16 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v31 = v17;
      _os_log_impl(&dword_2218F0000, v16, OS_LOG_TYPE_ERROR, "%{public}@Client does not have entitlement to use SPI for user consent response", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v14);
  }

}

- (void)_handleAddAccessoryModel:(id)a3 message:(id)a4
{
  id v6;
  id v7;
  void *v8;
  id v9;
  id v10;
  void *v11;
  id v12;
  void *v13;
  void *v14;
  HMDHome *v15;
  NSObject *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  HMDHome *v22;
  NSObject *v23;
  void *v24;
  void *v25;
  void (**v26)(_QWORD, _QWORD, _QWORD);
  int v27;
  void *v28;
  __int16 v29;
  void *v30;
  uint64_t v31;

  v31 = *MEMORY[0x24BDAC8D0];
  v6 = a3;
  v7 = a4;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v8 = v6;
  else
    v8 = 0;
  v9 = v8;
  v10 = v6;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v11 = v10;
  else
    v11 = 0;
  v12 = v11;

  objc_msgSend(v10, "identifier");
  v13 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v13)
  {
    v14 = (void *)MEMORY[0x227676638]();
    v15 = self;
    HMFGetOSLogHandle();
    v16 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v10, "uuid");
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v18, "UUIDString");
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      v27 = 138543618;
      v28 = v17;
      v29 = 2112;
      v30 = v19;
      _os_log_impl(&dword_2218F0000, v16, OS_LOG_TYPE_ERROR, "%{public}@Unable to create accessory from object (null identifier) %@", (uint8_t *)&v27, 0x16u);

    }
    objc_autoreleasePoolPop(v14);
    objc_msgSend(MEMORY[0x24BDD1540], "hmErrorWithCode:", 20);
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "respondWithError:", v20);
    goto LABEL_13;
  }
  if (v9)
  {
    -[HMDHome __handleAddHAPAccessoryModel:message:](self, "__handleAddHAPAccessoryModel:message:", v9, v7);
    goto LABEL_16;
  }
  if (v12)
  {
    -[HMDHome __handleAddMediaAccessoryModel:message:](self, "__handleAddMediaAccessoryModel:message:", v12, v7);
    goto LABEL_16;
  }
  v21 = (void *)MEMORY[0x227676638]();
  v22 = self;
  HMFGetOSLogHandle();
  v23 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
  {
    HMFGetLogIdentifier();
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    v27 = 138543362;
    v28 = v24;
    _os_log_impl(&dword_2218F0000, v23, OS_LOG_TYPE_ERROR, "%{public}@Only HAP accessories can be added to the home currently", (uint8_t *)&v27, 0xCu);

  }
  objc_autoreleasePoolPop(v21);
  objc_msgSend(v7, "responseHandler");
  v25 = (void *)objc_claimAutoreleasedReturnValue();

  if (v25)
  {
    objc_msgSend(MEMORY[0x24BDD1540], "hmErrorWithCode:", 48);
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "responseHandler");
    v26 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
    ((void (**)(_QWORD, void *, _QWORD))v26)[2](v26, v20, 0);

LABEL_13:
  }
LABEL_16:

}

- (void)__requestAccessoryBrowsing
{
  id v2;

  -[HMDHome homeManager](self, "homeManager");
  v2 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "setAccessoryBrowsingRequested");
  objc_msgSend(v2, "requestAccessoryBrowsing");

}

- (void)__handleAddHAPAccessoryModel:(id)a3 message:(id)a4
{
  id v6;
  id v7;
  uint64_t v8;
  void *v9;
  id v10;
  void *v11;
  void *v12;
  void *v13;
  uint64_t v14;
  void *v15;
  id v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  HMDHome *v21;
  NSObject *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  id v27;
  void *v28;
  HMDHAPAccessory *v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  void *v33;
  void *v34;
  void *v35;
  uint64_t v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  char v41;
  void *v42;
  uint64_t v43;
  void *v44;
  void *v45;
  void *v46;
  void *v47;
  void *v48;
  uint64_t v49;
  void *v50;
  void *v51;
  char v52;
  void *v53;
  void *v54;
  void *v55;
  void *v56;
  void *v57;
  void *v58;
  NSObject *v59;
  id v60;
  void *v61;
  HMDHome *v62;
  NSObject *v63;
  void *v64;
  void *v65;
  void *v66;
  const char *v67;
  void *v68;
  HMDHome *v69;
  NSObject *v70;
  void *v71;
  void *v72;
  void *v73;
  void *v74;
  void *v75;
  id v76;
  BOOL v77;
  _QWORD block[5];
  HMDHAPAccessory *v79;
  id v80;
  id v81;
  BOOL v82;
  _QWORD v83[4];
  id v84;
  HMDHAPAccessory *v85;
  uint8_t buf[4];
  void *v87;
  __int16 v88;
  void *v89;
  __int16 v90;
  void *v91;
  __int16 v92;
  void *v93;
  __int16 v94;
  void *v95;
  uint64_t v96;

  v96 = *MEMORY[0x24BDAC8D0];
  v6 = a3;
  v7 = a4;
  objc_msgSend(v6, "bridgeUUID");
  v8 = objc_claimAutoreleasedReturnValue();
  if (v8)
  {
    v9 = (void *)v8;
    v10 = objc_alloc(MEMORY[0x24BDD1880]);
    objc_msgSend(v6, "bridgeUUID");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v12 = (void *)objc_msgSend(v10, "initWithUUIDString:", v11);
    -[HMDHome accessoryWithUUID:](self, "accessoryWithUUID:", v12);
    v13 = (void *)objc_claimAutoreleasedReturnValue();

    if (!v13)
    {
      v61 = (void *)MEMORY[0x227676638]();
      v62 = self;
      HMFGetOSLogHandle();
      v63 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v63, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v64 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v6, "bridgeUUID");
        v65 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v6, "uuid");
        v66 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543874;
        v87 = v64;
        v88 = 2112;
        v89 = v65;
        v90 = 2112;
        v91 = v66;
        v67 = "%{public}@No bridge accessory %@ for added bridged accessory %@";
LABEL_30:
        _os_log_impl(&dword_2218F0000, v63, OS_LOG_TYPE_ERROR, v67, buf, 0x20u);

      }
LABEL_31:

      objc_autoreleasePoolPop(v61);
      goto LABEL_32;
    }
  }
  objc_msgSend(v6, "hostAccessoryUUID");
  v14 = objc_claimAutoreleasedReturnValue();
  if (v14)
  {
    v15 = (void *)v14;
    v16 = objc_alloc(MEMORY[0x24BDD1880]);
    objc_msgSend(v6, "hostAccessoryUUID");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    v18 = (void *)objc_msgSend(v16, "initWithUUIDString:", v17);
    -[HMDHome accessoryWithUUID:](self, "accessoryWithUUID:", v18);
    v19 = (void *)objc_claimAutoreleasedReturnValue();

    if (!v19)
    {
      v61 = (void *)MEMORY[0x227676638]();
      v62 = self;
      HMFGetOSLogHandle();
      v63 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v63, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v64 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v6, "hostAccessoryUUID");
        v65 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v6, "uuid");
        v66 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543874;
        v87 = v64;
        v88 = 2112;
        v89 = v65;
        v90 = 2112;
        v91 = v66;
        v67 = "%{public}@No host accessory %@ for added hosted accessory %@";
        goto LABEL_30;
      }
      goto LABEL_31;
    }
  }
  v20 = (void *)MEMORY[0x227676638]();
  v21 = self;
  HMFGetOSLogHandle();
  v22 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v22, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "uuid");
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "name");
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "uniqueIdentifier");
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "shortDescription");
    v27 = v7;
    v28 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138544386;
    v87 = v23;
    v88 = 2112;
    v89 = v24;
    v90 = 2112;
    v91 = v25;
    v92 = 2112;
    v93 = v26;
    v94 = 2112;
    v95 = v28;
    _os_log_impl(&dword_2218F0000, v22, OS_LOG_TYPE_INFO, "%{public}@Creating new HAP accessory from model with UUID %@/%@/%@ from message: %@", buf, 0x34u);

    v7 = v27;
  }

  objc_autoreleasePoolPop(v20);
  v29 = -[HMDHAPAccessory initWithTransaction:home:]([HMDHAPAccessory alloc], "initWithTransaction:home:", v6, v21);
  if (v29)
  {
    objc_msgSend(v6, "configurationTracker");
    v30 = objc_claimAutoreleasedReturnValue();
    if (!v30)
      v30 = (uint64_t)dispatch_group_create();
    -[HMDHome notificationRegistrations](v21, "notificationRegistrations");
    v31 = (void *)objc_claimAutoreleasedReturnValue();
    v32 = objc_msgSend(v31, "count");
    v77 = v32 != 0;

    -[HMDHome uuidToHAPAccessoryConfigTable](v21, "uuidToHAPAccessoryConfigTable");
    v33 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "uuid");
    v34 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v33, "objectForKey:", v34);
    v35 = (void *)objc_claimAutoreleasedReturnValue();

    v36 = MEMORY[0x24BDAC760];
    if (v35)
    {
      -[HMDHome uuidToHAPAccessoryConfigTable](v21, "uuidToHAPAccessoryConfigTable");
      v37 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v6, "uuid");
      v38 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v37, "removeObjectForKey:", v38);

      dispatch_group_enter((dispatch_group_t)v30);
      -[HMDHome workQueue](v21, "workQueue");
      v39 = (void *)objc_claimAutoreleasedReturnValue();
      v83[0] = v36;
      v83[1] = 3221225472;
      v83[2] = __48__HMDHome___handleAddHAPAccessoryModel_message___block_invoke;
      v83[3] = &unk_24E79C240;
      v84 = (id)v30;
      -[HMDHAPAccessory configureWithAccessory:homeNotificationsEnabled:queue:completion:](v29, "configureWithAccessory:homeNotificationsEnabled:queue:completion:", v35, v32 != 0, v39, v83);

    }
    if (-[HMDHAPAccessory isPrimary](v29, "isPrimary"))
    {
      objc_msgSend(v7, "name");
      v40 = (void *)objc_claimAutoreleasedReturnValue();
      v41 = objc_msgSend(v40, "isEqualToString:", CFSTR("kAddAccessoryRequestKey"));

      if ((v41 & 1) == 0)
        -[HMDHAPAccessory savePublicKeyToKeychain](v29, "savePublicKeyToKeychain");
      -[HMDAccessory identifier](v29, "identifier");
      v42 = (void *)objc_claimAutoreleasedReturnValue();
      v43 = -[HMDHAPAccessory supportedTransports](v29, "supportedTransports");
      -[HMDHAPAccessory setupHash](v29, "setupHash");
      v44 = (void *)objc_claimAutoreleasedReturnValue();
      -[HMDHome _registerPairedAccessory:transports:setupHash:](v21, "_registerPairedAccessory:transports:setupHash:", v42, v43, v44);

    }
    -[HMDHome addAccessory:](v21, "addAccessory:", v29);
    -[HMDHome msgDispatcher](v21, "msgDispatcher");
    v45 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHAPAccessory configureWithHome:msgDispatcher:configurationTracker:initialConfiguration:](v29, "configureWithHome:msgDispatcher:configurationTracker:initialConfiguration:", v21, v45, v30, 0);

    v85 = v29;
    objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", &v85, 1);
    v46 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "identifier");
    v47 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHome addNewlyConfiguredAccessories:addSessionIdentifier:](v21, "addNewlyConfiguredAccessories:addSessionIdentifier:", v46, v47);

    -[HMDHome accessoryBrowser](v21, "accessoryBrowser");
    v48 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v48, "evaluateAccessoryDiscoveryState");

    -[HMDHAPAccessory matterNodeID](v29, "matterNodeID");
    v49 = objc_claimAutoreleasedReturnValue();
    if (v49)
    {
      v50 = (void *)v49;
      -[HMDHAPAccessory matterNodeID](v29, "matterNodeID");
      v51 = (void *)objc_claimAutoreleasedReturnValue();
      v52 = objc_msgSend(v51, "isEqual:", &unk_24E96A538);

      if ((v52 & 1) == 0)
      {
        -[HMDHome homeManager](v21, "homeManager");
        v75 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v75, "accessoryBrowser");
        v53 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v53, "chipAccessoryServerBrowser");
        v54 = (void *)objc_claimAutoreleasedReturnValue();
        -[HMDHAPAccessory matterNodeID](v29, "matterNodeID");
        v76 = v7;
        v55 = (void *)objc_claimAutoreleasedReturnValue();
        -[HMDHome home](v21, "home");
        v56 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v56, "fabric");
        v57 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v54, "handleHomeAddedAccessoryWithNodeID:fabric:", v55, v57);

        v7 = v76;
      }
    }
    objc_msgSend(v7, "transactionResult");
    v58 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v58, "markChanged");
    objc_msgSend(v58, "markSaveToAssistant");
    -[HMDHome workQueue](v21, "workQueue");
    v59 = objc_claimAutoreleasedReturnValue();
    block[0] = MEMORY[0x24BDAC760];
    block[1] = 3221225472;
    block[2] = __48__HMDHome___handleAddHAPAccessoryModel_message___block_invoke_1108;
    block[3] = &unk_24E78E830;
    block[4] = v21;
    v79 = v29;
    v80 = v7;
    v81 = v35;
    v82 = v77;
    v60 = v35;
    dispatch_group_notify((dispatch_group_t)v30, v59, block);

  }
  else
  {
    v68 = (void *)MEMORY[0x227676638]();
    v69 = v21;
    HMFGetOSLogHandle();
    v70 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v70, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v71 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v6, "uuid");
      v72 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v72, "UUIDString");
      v73 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v87 = v71;
      v88 = 2112;
      v89 = v73;
      _os_log_impl(&dword_2218F0000, v70, OS_LOG_TYPE_ERROR, "%{public}@Unable to create accessory from object (null accessory) %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v68);
    objc_msgSend(v7, "responseHandler");
    v74 = (void *)objc_claimAutoreleasedReturnValue();

    if (!v74)
      goto LABEL_27;
    objc_msgSend(v7, "responseHandler");
    v30 = objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD1540], "hmErrorWithCode:", 20);
    v58 = (void *)objc_claimAutoreleasedReturnValue();
    (*(void (**)(uint64_t, void *, _QWORD))(v30 + 16))(v30, v58, 0);
  }

LABEL_27:
LABEL_32:

}

- (void)__handleAddMediaAccessoryModel:(id)a3 message:(id)a4
{
  id v6;
  id v7;
  NSObject *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  uint64_t v13;
  void *v14;
  const __CFString *v15;
  void *v16;
  HMDHome *v17;
  NSObject *v18;
  void *v19;
  void *v20;
  id v21;
  void *v22;
  id v23;
  id v24;
  void *v25;
  id v26;
  void *v27;
  void *v28;
  int v29;
  HMDAppleMediaAccessory *v30;
  BOOL v31;
  void *v32;
  void *v33;
  int v34;
  HMDAirPlayAccessory *v35;
  NSObject *v36;
  HMDAppleMediaAccessory *v37;
  char isKindOfClass;
  HMDAppleMediaAccessory *v39;
  HMDAppleMediaAccessory *v40;
  void *v41;
  void *v42;
  void *v43;
  void *v44;
  void *v45;
  int v46;
  dispatch_group_t v47;
  void *v48;
  void *v49;
  void *v50;
  void *v51;
  void *v52;
  void *v53;
  NSObject *v54;
  id v55;
  id v56;
  HMDAppleMediaAccessory *v57;
  HMDAppleMediaAccessory *v58;
  void *v59;
  HMDHome *v60;
  NSObject *v61;
  void *v62;
  const char *v63;
  NSObject *v64;
  os_log_type_t v65;
  NSObject *v66;
  NSObject *group;
  void *v68;
  BOOL v69;
  id v70;
  void *v71;
  _QWORD v72[5];
  HMDAppleMediaAccessory *v73;
  id v74;
  id v75;
  HMDAppleMediaAccessory *v76;
  id v77;
  id v78;
  BOOL v79;
  _QWORD block[5];
  HMDAppleMediaAccessory *v81;
  HMDAppleMediaAccessory *v82;
  uint8_t buf[4];
  void *v84;
  __int16 v85;
  id v86;
  __int16 v87;
  const __CFString *v88;
  uint64_t v89;

  v89 = *MEMORY[0x24BDAC8D0];
  v6 = a3;
  v7 = a4;
  HMFGetOSLogHandle();
  v8 = objc_claimAutoreleasedReturnValue();
  if (os_signpost_enabled(v8))
  {
    objc_msgSend(v6, "uuid");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "parentUUID");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "bsoRecord");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "recordID");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "recordName");
    v13 = objc_claimAutoreleasedReturnValue();
    v14 = (void *)v13;
    v15 = &stru_24E79DB48;
    *(_DWORD *)buf = 138412802;
    v84 = v9;
    if (v13)
      v15 = (const __CFString *)v13;
    v85 = 2112;
    v86 = v10;
    v87 = 2112;
    v88 = v15;
    _os_signpost_emit_with_name_impl(&dword_2218F0000, v8, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "AddMediaAccessoryModel", "Identifier=%{signpost.description:attribute}@ parentUUID=%{signpost.description:attribute}@ recordName=%{signpost.description:attribute}@ ", buf, 0x20u);

  }
  v16 = (void *)MEMORY[0x227676638]();
  v17 = self;
  HMFGetOSLogHandle();
  v18 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "uuid");
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543618;
    v84 = v19;
    v85 = 2112;
    v86 = v20;
    _os_log_impl(&dword_2218F0000, v18, OS_LOG_TYPE_INFO, "%{public}@Creating new media accessory from model with UUID %@", buf, 0x16u);

  }
  objc_autoreleasePoolPop(v16);
  v21 = v6;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v22 = v21;
  else
    v22 = 0;
  v23 = v22;

  v24 = v21;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v25 = v24;
  else
    v25 = 0;
  v26 = v25;

  if (v23)
  {
    objc_msgSend(MEMORY[0x24BE3F248], "sharedPreferences");
    v27 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v27, "preferenceForKey:", CFSTR("enableAppleMedia"));
    v28 = (void *)objc_claimAutoreleasedReturnValue();
    v29 = objc_msgSend(v28, "BOOLValue");

    if (v29)
    {
      v30 = -[HMDAppleMediaAccessory initWithTransaction:home:]([HMDAppleMediaAccessory alloc], "initWithTransaction:home:", v23, v17);
      v31 = 0;
      if (!v30)
        goto LABEL_39;
      goto LABEL_20;
    }
    v59 = (void *)MEMORY[0x227676638]();
    v60 = v17;
    HMFGetOSLogHandle();
    v61 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v61, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v62 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v84 = v62;
      v85 = 2112;
      v86 = v23;
      v63 = "%{public}@WHA not enabled, dropping model: %@";
LABEL_36:
      v64 = v61;
      v65 = OS_LOG_TYPE_INFO;
      goto LABEL_37;
    }
    goto LABEL_38;
  }
  if (!v26)
  {
    v59 = (void *)MEMORY[0x227676638]();
    v60 = v17;
    HMFGetOSLogHandle();
    v61 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v61, OS_LOG_TYPE_DEFAULT))
    {
      HMFGetLogIdentifier();
      v62 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v84 = v62;
      v85 = 2112;
      v86 = v24;
      v63 = "%{public}@Invalid WHA accessory: %@";
      v64 = v61;
      v65 = OS_LOG_TYPE_DEFAULT;
LABEL_37:
      _os_log_impl(&dword_2218F0000, v64, v65, v63, buf, 0x16u);

      goto LABEL_38;
    }
    goto LABEL_38;
  }
  objc_msgSend(MEMORY[0x24BE3F248], "sharedPreferences");
  v32 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v32, "preferenceForKey:", CFSTR("enableAirPlay2"));
  v33 = (void *)objc_claimAutoreleasedReturnValue();
  v34 = objc_msgSend(v33, "BOOLValue");

  if (!v34)
  {
    v59 = (void *)MEMORY[0x227676638]();
    v60 = v17;
    HMFGetOSLogHandle();
    v61 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v61, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v62 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v84 = v62;
      v85 = 2112;
      v86 = v26;
      v63 = "%{public}@AirPlay2 not enabled, dropping model: %@";
      goto LABEL_36;
    }
LABEL_38:

    objc_autoreleasePoolPop(v59);
    goto LABEL_39;
  }
  v35 = -[HMDAirPlayAccessory initWithTransaction:home:]([HMDAirPlayAccessory alloc], "initWithTransaction:home:", v26, v17);
  v31 = -[HMDHome isCurrentDevicePrimaryResident](v17, "isCurrentDevicePrimaryResident");
  -[HMDHome workQueue](v17, "workQueue");
  v36 = objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x24BDAC760];
  block[1] = 3221225472;
  block[2] = __50__HMDHome___handleAddMediaAccessoryModel_message___block_invoke;
  block[3] = &unk_24E79C268;
  block[4] = v17;
  v30 = v35;
  v81 = v30;
  dispatch_async(v36, block);

  if (!v30)
    goto LABEL_39;
LABEL_20:
  v69 = v31;
  v70 = v26;
  v71 = v23;
  v37 = v30;
  objc_opt_class();
  isKindOfClass = objc_opt_isKindOfClass();
  if ((isKindOfClass & 1) != 0)
    v39 = v37;
  else
    v39 = 0;
  v40 = v39;

  -[HMDAppleMediaAccessory setDataSource:](v40, "setDataSource:", v17);
  -[HMDHome addAccessory:](v17, "addAccessory:", v37);
  -[HMDHome homeManager](v17, "homeManager");
  v41 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDAccessory uuid](v37, "uuid");
  v42 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v41, "accessorySetupMetricDispatcherForAccessoryUUID:", v42);
  v43 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v43, "markAccessoryAddCompleted");
  -[HMDHome _hasConfirmedPrimaryResidentDevice](v17, "_hasConfirmedPrimaryResidentDevice");
  v44 = (void *)objc_claimAutoreleasedReturnValue();

  if (v44)
  {
    objc_msgSend(v43, "markPrimaryResidentChanged");
    -[HMDHome remoteEventRouterClientController](v17, "remoteEventRouterClientController");
    v45 = (void *)objc_claimAutoreleasedReturnValue();
    v46 = objc_msgSend(v45, "isPrimaryResidentClientConnected");

    if (v46)
      objc_msgSend(v43, "markEventRouterPrimaryClientConnectStatusChanged:", 1);
  }
  v68 = v43;
  v47 = dispatch_group_create();
  -[HMDHome msgDispatcher](v17, "msgDispatcher");
  v48 = (void *)objc_claimAutoreleasedReturnValue();
  group = v47;
  -[HMDAppleMediaAccessory configureWithHome:msgDispatcher:configurationTracker:initialConfiguration:](v37, "configureWithHome:msgDispatcher:configurationTracker:initialConfiguration:", v17, v48, v47, 0);

  -[HMDHome homeManager](v17, "homeManager");
  v49 = (void *)objc_claimAutoreleasedReturnValue();
  if ((isKindOfClass & 1) != 0 && -[HMDAppleMediaAccessory isCurrentAccessory](v37, "isCurrentAccessory"))
  {
    objc_msgSend(v49, "currentAccessorySetupMetricDispatcher");
    v50 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v50, "markSetupBeginStage:error:", 7, 0);

  }
  v82 = v37;
  objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", &v82, 1);
  v51 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "identifier");
  v52 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHome addNewlyConfiguredAccessories:addSessionIdentifier:](v17, "addNewlyConfiguredAccessories:addSessionIdentifier:", v51, v52);

  objc_msgSend(v7, "transactionResult");
  v53 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v53, "markChanged");
  objc_msgSend(v53, "markSaveToAssistant");
  -[HMDHome workQueue](v17, "workQueue");
  v54 = objc_claimAutoreleasedReturnValue();
  v72[0] = MEMORY[0x24BDAC760];
  v72[1] = 3221225472;
  v72[2] = __50__HMDHome___handleAddMediaAccessoryModel_message___block_invoke_1113;
  v72[3] = &unk_24E776338;
  v72[4] = v17;
  v73 = v37;
  v74 = v7;
  v23 = v71;
  v75 = v71;
  v76 = v40;
  v79 = v69;
  v77 = v49;
  v78 = v53;
  v55 = v53;
  v56 = v49;
  v57 = v40;
  v58 = v37;
  dispatch_group_notify(group, v54, v72);

  v26 = v70;
LABEL_39:
  HMFGetOSLogHandle();
  v66 = objc_claimAutoreleasedReturnValue();
  if (os_signpost_enabled(v66))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl(&dword_2218F0000, v66, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "AddMediaAccessoryModel", ", buf, 2u);
  }

}

- (void)handleRemoveAccessory:(id)a3 completion:(id)a4
{
  id v6;
  objc_class *v7;
  id v8;
  id v9;
  id v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  id v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(uint64_t, void *);
  void *v22;
  id v23;
  const __CFString *v24;
  _QWORD v25[2];

  v25[1] = *MEMORY[0x24BDAC8D0];
  v6 = a4;
  v7 = (objc_class *)MEMORY[0x24BE3F1D0];
  v8 = a3;
  v9 = [v7 alloc];
  v10 = objc_alloc(MEMORY[0x24BE3F1B8]);
  -[HMDHome uuid](self, "uuid");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v12 = (void *)objc_msgSend(v10, "initWithTarget:", v11);
  v24 = CFSTR("kAccessoryUUID");
  objc_msgSend(v8, "uuid");
  v13 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v13, "UUIDString");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  v25[0] = v14;
  objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v25, &v24, 1);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  v16 = (void *)objc_msgSend(v9, "initWithName:destination:payload:", CFSTR("kRemoveAccessoryRequestKey"), v12, v15);

  v19 = MEMORY[0x24BDAC760];
  v20 = 3221225472;
  v21 = __44__HMDHome_handleRemoveAccessory_completion___block_invoke;
  v22 = &unk_24E790900;
  v23 = v6;
  v17 = v6;
  objc_msgSend(v16, "setResponseHandler:", &v19);
  if (-[HMDHome isCurrentDevicePrimaryResident](self, "isCurrentDevicePrimaryResident", v19, v20, v21, v22)
    || isFeatureMatteriPhoneOnlyPairingControlEnabled()
    && !-[HMDHome hasAnyResident](self, "hasAnyResident"))
  {
    -[HMDHome handleRemoveAccessoryMessage:](self, "handleRemoveAccessoryMessage:", v16);
  }
  else
  {
    -[HMDHome residentSyncManager](self, "residentSyncManager");
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v18, "performResidentRequest:options:", v16, 0);

  }
}

- (void)handleRemoveAccessoryMessage:(id)a3
{
  id v4;
  NSObject *v5;
  id v6;
  _QWORD v7[5];
  id v8;

  v4 = a3;
  -[HMDHome workQueue](self, "workQueue");
  v5 = objc_claimAutoreleasedReturnValue();
  v7[0] = MEMORY[0x24BDAC760];
  v7[1] = 3221225472;
  v7[2] = __40__HMDHome_handleRemoveAccessoryMessage___block_invoke;
  v7[3] = &unk_24E79C268;
  v7[4] = self;
  v8 = v4;
  v6 = v4;
  dispatch_async(v5, v7);

}

- (void)_handleRemoveAccessoryMessage:(id)a3
{
  id v4;
  NSObject *v5;
  void *v6;
  void *v7;
  id v8;
  void *v9;
  id v10;
  char v11;
  int v12;
  void *v13;
  HMDHome *v14;
  NSObject *v15;
  _BOOL4 v16;
  void *v17;
  void *v18;
  void *v19;
  HMDHome *v20;
  NSObject *v21;
  void *v22;
  void *v23;
  void *v24;
  void (**v25)(_QWORD, _QWORD, _QWORD);
  void *v26;
  HMDHome *v27;
  NSObject *v28;
  void *v29;
  void *v30;
  void (**v31)(_QWORD, _QWORD, _QWORD);
  void *v32;
  void *v33;
  HMDHome *v34;
  NSObject *v35;
  void *v36;
  void *v37;
  void *v38;
  id v39;
  void *v40;
  void *v41;
  void *v42;
  int v43;
  void *v44;
  void *v45;
  void *v46;
  HMDHome *v47;
  NSObject *v48;
  void *v49;
  void *v50;
  void *v51;
  void *v52;
  void *v53;
  void *v54;
  HMDHome *v55;
  NSObject *v56;
  void *v57;
  _QWORD aBlock[5];
  id v59;
  id v60;
  _QWORD v61[4];
  id v62;
  HMDHome *v63;
  uint8_t buf[4];
  void *v65;
  __int16 v66;
  id v67;
  uint64_t v68;

  v68 = *MEMORY[0x24BDAC8D0];
  v4 = a3;
  -[HMDHome workQueue](self, "workQueue");
  v5 = objc_claimAutoreleasedReturnValue();
  dispatch_assert_queue_V2(v5);

  objc_msgSend(v4, "uuidForKey:", CFSTR("kAccessoryUUID"));
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  if (v6)
  {
    -[HMDHome accessoryWithUUID:](self, "accessoryWithUUID:", v6);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    if (!v7)
    {
      v26 = (void *)MEMORY[0x227676638]();
      v27 = self;
      HMFGetOSLogHandle();
      v28 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
      {
        HMFGetLogIdentifier();
        v29 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        v65 = v29;
        v66 = 2112;
        v67 = v6;
        _os_log_impl(&dword_2218F0000, v28, OS_LOG_TYPE_DEFAULT, "%{public}@Failed to find accessory with UUID: %@", buf, 0x16u);

      }
      objc_autoreleasePoolPop(v26);
      objc_msgSend(v4, "responseHandler");
      v8 = (id)objc_claimAutoreleasedReturnValue();

      if (v8)
      {
        objc_msgSend(MEMORY[0x24BDD1540], "hmErrorWithCode:", 2);
        v30 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v4, "responseHandler");
        v31 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
        ((void (**)(_QWORD, void *, _QWORD))v31)[2](v31, v30, 0);

        v8 = 0;
      }
      goto LABEL_30;
    }
    v8 = v7;
    if (objc_msgSend(v8, "conformsToProtocol:", &unk_25582FAA8))
      v9 = v8;
    else
      v9 = 0;
    v10 = v9;

    v11 = objc_msgSend(v10, "supportsDisassociation");
    if ((v11 & 1) != 0 || (objc_msgSend(v8, "isPrimary") & 1) != 0)
    {
      v12 = objc_msgSend(v4, "isRemote");
      v13 = (void *)MEMORY[0x227676638]();
      v14 = self;
      HMFGetOSLogHandle();
      v15 = objc_claimAutoreleasedReturnValue();
      v16 = os_log_type_enabled(v15, OS_LOG_TYPE_INFO);
      if (v12)
      {
        if (v16)
        {
          HMFGetLogIdentifier();
          v17 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543618;
          v65 = v17;
          v66 = 2112;
          v67 = v8;
          _os_log_impl(&dword_2218F0000, v15, OS_LOG_TYPE_INFO, "%{public}@Received remote request to remove accessory: %@", buf, 0x16u);

        }
        objc_autoreleasePoolPop(v13);
        -[HMDHome residentSyncManager](v14, "residentSyncManager");
        v18 = (void *)objc_claimAutoreleasedReturnValue();
        v61[0] = MEMORY[0x24BDAC760];
        v61[1] = 3221225472;
        v61[2] = __41__HMDHome__handleRemoveAccessoryMessage___block_invoke;
        v61[3] = &unk_24E795E50;
        v8 = v8;
        v62 = v8;
        v63 = v14;
        objc_msgSend(v18, "interceptRemoteResidentRequest:proceed:", v4, v61);

        goto LABEL_30;
      }
      if (v16)
      {
        HMFGetLogIdentifier();
        v32 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        v65 = v32;
        v66 = 2112;
        v67 = v8;
        _os_log_impl(&dword_2218F0000, v15, OS_LOG_TYPE_INFO, "%{public}@Received request to remove accessory: %@", buf, 0x16u);

      }
      objc_autoreleasePoolPop(v13);
      if ((objc_msgSend(v4, "isRemote") & 1) != 0 || (objc_msgSend(v4, "isEntitledForSPIAccess") & 1) != 0)
        goto LABEL_24;
      aBlock[0] = MEMORY[0x24BDAC760];
      aBlock[1] = 3221225472;
      aBlock[2] = __41__HMDHome__handleRemoveAccessoryMessage___block_invoke_1120;
      aBlock[3] = &unk_24E7964E0;
      aBlock[4] = v14;
      v59 = v4;
      v39 = v8;
      v60 = v39;
      v40 = _Block_copy(aBlock);
      objc_msgSend(v39, "uuid");
      v41 = (void *)objc_claimAutoreleasedReturnValue();
      -[HMDHome activeNetworkRouterUUID](v14, "activeNetworkRouterUUID");
      v42 = (void *)objc_claimAutoreleasedReturnValue();
      v43 = objc_msgSend(v41, "isEqual:", v42);

      if (v43)
      {
        -[HMDHome accessoriesRequiringManualReconfigurationOnRouterRemoval](v14, "accessoriesRequiringManualReconfigurationOnRouterRemoval");
        v44 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v44, "na_map:", &__block_literal_global_1123);
        v45 = (void *)objc_claimAutoreleasedReturnValue();

        v46 = (void *)MEMORY[0x227676638]();
        v47 = v14;
        HMFGetOSLogHandle();
        v48 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v48, OS_LOG_TYPE_INFO))
        {
          HMFGetLogIdentifier();
          v49 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543362;
          v65 = v49;
          _os_log_impl(&dword_2218F0000, v48, OS_LOG_TYPE_INFO, "%{public}@Requesting permission to remove active network router accessory", buf, 0xCu);

        }
        objc_autoreleasePoolPop(v46);
        +[HMDUIDialogPresenter sharedUIDialogPresenter](HMDUIDialogPresenter, "sharedUIDialogPresenter");
        v50 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v39, "name");
        v51 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v39, "uuid");
        v52 = (void *)objc_claimAutoreleasedReturnValue();
        -[HMDHome workQueue](v47, "workQueue");
        v53 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v50, "requestUserPermissionForRemovalOfRouter:accessoriesRequiringManualReconfiguration:withContext:queue:completionHandler:", v51, v45, v52, v53, v40);

      }
      else
      {
        if (objc_msgSend(v39, "wiFiCredentialType") != 3)
        {

LABEL_24:
          -[HMDHome _handleRemoveAccessoryAfterUserConsent:message:](v14, "_handleRemoveAccessoryAfterUserConsent:message:", v8, v4);
LABEL_30:

          goto LABEL_31;
        }
        v54 = (void *)MEMORY[0x227676638]();
        v55 = v14;
        HMFGetOSLogHandle();
        v56 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v56, OS_LOG_TYPE_INFO))
        {
          HMFGetLogIdentifier();
          v57 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543362;
          v65 = v57;
          _os_log_impl(&dword_2218F0000, v56, OS_LOG_TYPE_INFO, "%{public}@Requesting permission to remove accessory with specific WiFi credential", buf, 0xCu);

        }
        objc_autoreleasePoolPop(v54);
        +[HMDUIDialogPresenter sharedUIDialogPresenter](HMDUIDialogPresenter, "sharedUIDialogPresenter");
        v45 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v39, "name");
        v50 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v39, "uuid");
        v51 = (void *)objc_claimAutoreleasedReturnValue();
        -[HMDHome workQueue](v55, "workQueue");
        v52 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v45, "requestUserPermissionForRemovalOfSpecificWiFiCredentialedAccessory:withContext:queue:completionHandler:", v50, v51, v52, v40);
      }

      v8 = v39;
      goto LABEL_30;
    }
    v33 = (void *)MEMORY[0x227676638]();
    v34 = self;
    HMFGetOSLogHandle();
    v35 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v35, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v36 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v65 = v36;
      v66 = 2112;
      v67 = v8;
      _os_log_impl(&dword_2218F0000, v35, OS_LOG_TYPE_ERROR, "%{public}@cannot remove non-primary accessory %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v33);
    objc_msgSend(v4, "responseHandler");
    v37 = (void *)objc_claimAutoreleasedReturnValue();

    if (!v37)
      goto LABEL_30;
    objc_msgSend(v4, "responseHandler");
    v25 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD1540], "errorWithDomain:code:userInfo:", *MEMORY[0x24BDD5BD8], 34, 0);
    v38 = (void *)objc_claimAutoreleasedReturnValue();
    ((void (**)(_QWORD, void *, _QWORD))v25)[2](v25, v38, 0);

LABEL_29:
    goto LABEL_30;
  }
  v19 = (void *)MEMORY[0x227676638]();
  v20 = self;
  HMFGetOSLogHandle();
  v21 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
  {
    HMFGetLogIdentifier();
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "messagePayload");
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543618;
    v65 = v22;
    v66 = 2112;
    v67 = v23;
    _os_log_impl(&dword_2218F0000, v21, OS_LOG_TYPE_DEFAULT, "%{public}@Missing target accessory UUID from message payload: %@", buf, 0x16u);

  }
  objc_autoreleasePoolPop(v19);
  objc_msgSend(v4, "responseHandler");
  v24 = (void *)objc_claimAutoreleasedReturnValue();

  if (v24)
  {
    objc_msgSend(MEMORY[0x24BDD1540], "hmErrorWithCode:", 3);
    v8 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "responseHandler");
    v25 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
    ((void (**)(_QWORD, id, _QWORD))v25)[2](v25, v8, 0);
    goto LABEL_29;
  }
LABEL_31:

}

- (void)_handleRemoveAccessoryAfterUserConsent:(id)a3 message:(id)a4
{
  id v6;
  id v7;
  void *v8;
  void *v9;
  HMDHome *v10;
  NSObject *v11;
  void *v12;
  void *v13;
  void *v14;
  id v15;
  void *v16;
  HMDHome *v17;
  NSObject *v18;
  void *v19;
  void *v20;
  HMDHome *v21;
  NSObject *v22;
  void *v23;
  void *v24;
  HMDHome *v25;
  NSObject *v26;
  void *v27;
  void *v28;
  id v29;
  _QWORD v30[5];
  id v31;
  id v32;
  uint8_t buf[4];
  void *v34;
  __int16 v35;
  id v36;
  uint64_t v37;

  v37 = *MEMORY[0x24BDAC8D0];
  v6 = a3;
  v7 = a4;
  if (-[HMDHome isAdminUser](self, "isAdminUser"))
  {
    -[HMDHome administratorHandler](self, "administratorHandler");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v8, "shouldRelayMessages")
      && (!isFeatureMatteriPhoneOnlyPairingControlEnabled()
       || -[HMDHome hasAnyResident](self, "hasAnyResident")))
    {
      v9 = (void *)MEMORY[0x227676638]();
      v10 = self;
      HMFGetOSLogHandle();
      v11 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v12 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543362;
        v34 = v12;
        _os_log_impl(&dword_2218F0000, v11, OS_LOG_TYPE_INFO, "%{public}@Sending remove accessory request to owner / primary resident", buf, 0xCu);

      }
      objc_autoreleasePoolPop(v9);
      v13 = (void *)objc_msgSend(v7, "mutableCopy");
      v30[0] = MEMORY[0x24BDAC760];
      v30[1] = 3221225472;
      v30[2] = __58__HMDHome__handleRemoveAccessoryAfterUserConsent_message___block_invoke;
      v30[3] = &unk_24E795C28;
      v30[4] = v10;
      v31 = v6;
      v32 = v7;
      objc_msgSend(v13, "setResponseHandler:", v30);
      v7 = (id)objc_msgSend(v13, "copy");
      v29 = 0;
      objc_msgSend(v8, "operationForMessage:error:", v7, &v29);
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      v15 = v29;
      if (v14)
      {
        objc_msgSend(v8, "addOperation:", v14);
      }
      else
      {
        v24 = (void *)MEMORY[0x227676638]();
        v25 = v10;
        HMFGetOSLogHandle();
        v26 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
        {
          HMFGetLogIdentifier();
          v27 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543618;
          v34 = v27;
          v35 = 2112;
          v36 = v15;
          _os_log_impl(&dword_2218F0000, v26, OS_LOG_TYPE_ERROR, "%{public}@Failed to create home administrator configuration operation for accessory removal: %@", buf, 0x16u);

        }
        objc_autoreleasePoolPop(v24);
        objc_msgSend(MEMORY[0x24BDD1540], "hmErrorWithCode:", 52);
        v28 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v7, "respondWithError:", v28);

      }
    }
    else
    {
      v20 = (void *)MEMORY[0x227676638]();
      v21 = self;
      HMFGetOSLogHandle();
      v22 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v22, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v23 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543362;
        v34 = v23;
        _os_log_impl(&dword_2218F0000, v22, OS_LOG_TYPE_INFO, "%{public}@Removing accessory locally", buf, 0xCu);

      }
      objc_autoreleasePoolPop(v20);
      -[HMDHome __removeAccessory:isBeingReplaced:isForceUpdate:message:](v21, v6, 0, 0, v7);
      -[HMDHome _submitRemovalLogEventForAccessory:isLocalRemoval:isLocalFallback:isDuplicate:duplicateCount:error:](v21, "_submitRemovalLogEventForAccessory:isLocalRemoval:isLocalFallback:isDuplicate:duplicateCount:error:", v6, 1, 0, 0, 0, 0);
    }
  }
  else
  {
    v16 = (void *)MEMORY[0x227676638]();
    v17 = self;
    HMFGetOSLogHandle();
    v18 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v34 = v19;
      _os_log_impl(&dword_2218F0000, v18, OS_LOG_TYPE_ERROR, "%{public}@Not removing accessory due to insufficient privileges", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v16);
    objc_msgSend(MEMORY[0x24BDD1540], "hmErrorWithCode:", 17);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "respondWithError:", v8);
  }

}

- (void)_submitRemovalLogEventForAccessory:(id)a3 isLocalRemoval:(BOOL)a4 isLocalFallback:(BOOL)a5 isDuplicate:(BOOL)a6 duplicateCount:(int64_t)a7 error:(id)a8
{
  _BOOL8 v10;
  _BOOL8 v11;
  _BOOL8 v12;
  id v14;
  id v15;
  id v16;
  void *v17;
  id v18;
  HMDAppleMediaAccessoryRemovalLogEvent *v19;
  void *v20;
  HMDHome *v21;
  NSObject *v22;
  void *v23;
  void *v24;
  void *v25;
  int v26;
  void *v27;
  __int16 v28;
  void *v29;
  __int16 v30;
  id v31;
  uint64_t v32;

  v10 = a6;
  v11 = a5;
  v12 = a4;
  v32 = *MEMORY[0x24BDAC8D0];
  v14 = a3;
  v15 = a8;
  v16 = v14;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v17 = v16;
  else
    v17 = 0;
  v18 = v17;

  if (v18 && objc_msgSend(v18, "isHomePod"))
  {
    v19 = -[HMDAppleMediaAccessoryRemovalLogEvent initWithIsLocalRemoval:isLocalFallback:isDuplicate:duplicateCount:]([HMDAppleMediaAccessoryRemovalLogEvent alloc], "initWithIsLocalRemoval:isLocalFallback:isDuplicate:duplicateCount:", v12, v11, v10, a7);
    v20 = (void *)MEMORY[0x227676638]();
    v21 = self;
    HMFGetOSLogHandle();
    v22 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v22, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v23 = (void *)objc_claimAutoreleasedReturnValue();
      -[HMDAppleMediaAccessoryRemovalLogEvent coreAnalyticsEventDictionary](v19, "coreAnalyticsEventDictionary");
      v24 = (void *)objc_claimAutoreleasedReturnValue();
      v26 = 138543874;
      v27 = v23;
      v28 = 2112;
      v29 = v24;
      v30 = 2112;
      v31 = v15;
      _os_log_impl(&dword_2218F0000, v22, OS_LOG_TYPE_INFO, "%{public}@Submitting apple media accessory removal log event: %@ error: %@", (uint8_t *)&v26, 0x20u);

    }
    objc_autoreleasePoolPop(v20);
    -[HMDHome logEventSubmitter](v21, "logEventSubmitter");
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v25, "submitLogEvent:error:", v19, v15);

  }
}

- (void)_handleRemoveAccessoryModel:(id)a3 message:(id)a4
{
  id v6;
  id v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  HMDHome *v13;
  NSObject *v14;
  void *v15;
  void *v16;
  id v17;
  void *v18;
  id v19;
  id v20;
  char isKindOfClass;
  void *v22;
  void *v23;
  void *v24;
  uint64_t v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  int v30;
  void *v31;
  void *v32;
  void (**v33)(_QWORD, _QWORD, _QWORD);
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  int v40;
  void *v41;
  void *v42;
  void *v43;
  void *v44;
  void *v45;
  HMDHome *v46;
  NSObject *v47;
  id v48;
  void *v49;
  void *v50;
  id v51;
  id v52;
  _QWORD v53[5];
  id v54;
  id v55;
  id v56;
  uint8_t buf[4];
  void *v58;
  __int16 v59;
  void *v60;
  uint64_t v61;

  v61 = *MEMORY[0x24BDAC8D0];
  v6 = a3;
  v7 = a4;
  objc_msgSend(v6, "uuid");
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  if (v8)
  {
    objc_msgSend(v7, "transactionResult");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "uuid");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHome accessoryWithUUID:](self, "accessoryWithUUID:", v10);
    v11 = (void *)objc_claimAutoreleasedReturnValue();

    v12 = (void *)MEMORY[0x227676638]();
    v13 = self;
    HMFGetOSLogHandle();
    v14 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v6, "debugString:", 1);
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v58 = v15;
      v59 = 2112;
      v60 = v16;
      _os_log_impl(&dword_2218F0000, v14, OS_LOG_TYPE_INFO, "%{public}@Going to remove accessory : %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v12);
    v17 = v11;
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
      v18 = v17;
    else
      v18 = 0;
    v19 = v18;

    if (v17)
    {
      if (isInternalBuild() && (objc_msgSend(v17, "shouldProcessTransactionRemoval") & 1) == 0)
      {
        v45 = (void *)MEMORY[0x227676638]();
        v46 = v13;
        HMFGetOSLogHandle();
        v47 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v47, OS_LOG_TYPE_ERROR))
        {
          HMFGetLogIdentifier();
          v48 = v19;
          v49 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543362;
          v58 = v49;
          _os_log_impl(&dword_2218F0000, v47, OS_LOG_TYPE_ERROR, "%{public}@Failed to process transaction removal due to internal flag set to simulate this failure", buf, 0xCu);

          v19 = v48;
        }

        objc_autoreleasePoolPop(v45);
        objc_msgSend(v7, "respondWithSuccess");
        goto LABEL_27;
      }
      if (objc_msgSend(v17, "isPrimary"))
      {
        v52 = v19;
        v20 = v17;
        objc_opt_class();
        isKindOfClass = objc_opt_isKindOfClass();
        if ((isKindOfClass & 1) != 0)
          v22 = v20;
        else
          v22 = 0;
        v51 = v22;

        if ((isKindOfClass & 1) != 0)
        {
          -[HMDHome mediaStateSubscriber](v13, "mediaStateSubscriber");
          v23 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v23, "unsubscribeForAppleMediaStateForAccessory:subscriptionToken:", v20, CFSTR("HMDHomeClientMediaStateRegistrationToken"));

          -[HMDHome mediaStateSubscriber](v13, "mediaStateSubscriber");
          v24 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v24, "localUnsubscribeForAppleMediaStateForAccessory:", v20);

        }
        -[HMDHome selfRemovalWatchdog](v13, "selfRemovalWatchdog");
        v25 = objc_claimAutoreleasedReturnValue();
        if (!v25)
          goto LABEL_21;
        v26 = (void *)v25;
        objc_msgSend(v20, "uuid");
        v50 = v9;
        v27 = (void *)objc_claimAutoreleasedReturnValue();
        -[HMDHome selfRemovalWatchdog](v13, "selfRemovalWatchdog");
        v28 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v28, "currentAccessoryUUID");
        v29 = (void *)objc_claimAutoreleasedReturnValue();
        v30 = objc_msgSend(v27, "hmf_isEqualToUUID:", v29);

        v9 = v50;
        if (v30)
        {
          -[HMDHome selfRemovalWatchdog](v13, "selfRemovalWatchdog");
          v31 = (void *)objc_claimAutoreleasedReturnValue();
          v53[0] = MEMORY[0x24BDAC760];
          v53[1] = 3221225472;
          v53[2] = __47__HMDHome__handleRemoveAccessoryModel_message___block_invoke;
          v53[3] = &unk_24E799FD0;
          v53[4] = v13;
          v54 = v6;
          v55 = v7;
          objc_msgSend(v31, "startWithCompletion:", v53);

        }
        else
        {
LABEL_21:
          objc_msgSend(v6, "uuid");
          v36 = (void *)objc_claimAutoreleasedReturnValue();
          -[HMDHome _removeAccessoryWithUUID:message:](v13, "_removeAccessoryWithUUID:message:", v36, v7);

        }
        -[HMDHome networkProtectionGroupRegistry](v13, "networkProtectionGroupRegistry");
        v37 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v37, "handleRemovedAccessory:", v20);

        objc_msgSend(v20, "uuid");
        v38 = (void *)objc_claimAutoreleasedReturnValue();
        -[HMDHome activeNetworkRouterUUID](v13, "activeNetworkRouterUUID");
        v39 = (void *)objc_claimAutoreleasedReturnValue();
        v40 = objc_msgSend(v38, "isEqual:", v39);

        v19 = v52;
        if (v40)
          -[HMDHome _evaluateNetworkRouterManagementForTransaction:](v13, "_evaluateNetworkRouterManagementForTransaction:", v9);
        v34 = v51;
      }
      else
      {
        objc_msgSend(v19, "bridge");
        v34 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v34, "removeHostedAccessory:", v17);
        -[HMDHome removeAccessory:](v13, "removeAccessory:", v17);
        v56 = v17;
        objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", &v56, 1);
        v35 = (void *)objc_claimAutoreleasedReturnValue();
        -[HMDHome _removeAccessories:message:](v13, "_removeAccessories:message:", v35, 0);

      }
      objc_msgSend(v7, "transactionResult");
      v41 = (void *)objc_claimAutoreleasedReturnValue();
      -[HMDHome notifyOfRemovedAccessory:source:](v13, "notifyOfRemovedAccessory:source:", v17, objc_msgSend(v41, "source"));
      -[HMDHome homeManager](v13, "homeManager");
      v42 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v42, "lastEventStoreController");
      v43 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v17, "uuid");
      v44 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v43, "didRemoveAccessory:", v44);

    }
    objc_msgSend(v9, "markChanged");
    objc_msgSend(v9, "markSaveToAssistant");
LABEL_27:

    goto LABEL_28;
  }
  objc_msgSend(MEMORY[0x24BDD1540], "errorWithDomain:code:userInfo:", *MEMORY[0x24BDD5BD8], 3, 0);
  v32 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "responseHandler");
  v33 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
  ((void (**)(_QWORD, void *, _QWORD))v33)[2](v33, v32, 0);

LABEL_28:
}

- (void)notifyOfRemovedAccessory:(id)a3 source:(unint64_t)a4
{
  id v6;
  NSObject *v7;
  id v8;
  _QWORD block[5];
  id v10;
  unint64_t v11;

  v6 = a3;
  -[HMDHome workQueue](self, "workQueue");
  v7 = objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x24BDAC760];
  block[1] = 3221225472;
  block[2] = __43__HMDHome_notifyOfRemovedAccessory_source___block_invoke;
  block[3] = &unk_24E796490;
  block[4] = self;
  v10 = v6;
  v11 = a4;
  v8 = v6;
  dispatch_async(v7, block);

}

- (void)notifyOfAddedAccessory:(id)a3
{
  id v4;
  NSObject *v5;
  id v6;
  _QWORD v7[5];
  id v8;

  v4 = a3;
  -[HMDHome workQueue](self, "workQueue");
  v5 = objc_claimAutoreleasedReturnValue();
  v7[0] = MEMORY[0x24BDAC760];
  v7[1] = 3221225472;
  v7[2] = __34__HMDHome_notifyOfAddedAccessory___block_invoke;
  v7[3] = &unk_24E79C268;
  v7[4] = self;
  v8 = v4;
  v6 = v4;
  dispatch_async(v5, v7);

}

- (void)notifyOfNewlyAddedAccessoryByThisOwnerDevice:(id)a3
{
  id v4;
  void *v5;
  id v6;
  void *v7;
  _BOOL4 v8;
  id v9;
  void *v10;
  id v11;
  BOOL v12;
  void *v13;
  void *v14;
  const __CFString *v15;
  _QWORD v16[2];

  v16[1] = *MEMORY[0x24BDAC8D0];
  v4 = a3;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v5 = v4;
  else
    v5 = 0;
  v6 = v5;
  if (v6)
  {
    v7 = v6;
    v8 = -[HMDHome isOwnerUser](self, "isOwnerUser");

    if (!v8)
      goto LABEL_13;
    goto LABEL_12;
  }
  v9 = v4;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v10 = v9;
  else
    v10 = 0;
  v11 = v10;

  if (v11)
  {
    v12 = -[HMDHome isOwnerUser](self, "isOwnerUser");

    if (v12)
    {
LABEL_12:
      -[HMDHome notificationCenter](self, "notificationCenter");
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      v15 = CFSTR("HMDAccessoryNotificationKey");
      v16[0] = v4;
      objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v16, &v15, 1);
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v13, "postNotificationName:object:userInfo:", CFSTR("HMDHomeThisOwnerDeviceAddedAccessoryNotification"), self, v14);

    }
  }
LABEL_13:

}

- (void)removeWithMergeSecondaryAccessory:(id)a3 removedFromBridgeAccessory:(id)a4 completionHandler:(id)a5
{
  id v8;
  id v9;
  id v10;
  NSObject *v11;
  id v12;
  id v13;
  id v14;
  _QWORD v15[5];
  id v16;
  id v17;
  id v18;

  v8 = a3;
  v9 = a4;
  v10 = a5;
  -[HMDHome workQueue](self, "workQueue");
  v11 = objc_claimAutoreleasedReturnValue();
  v15[0] = MEMORY[0x24BDAC760];
  v15[1] = 3221225472;
  v15[2] = __90__HMDHome_removeWithMergeSecondaryAccessory_removedFromBridgeAccessory_completionHandler___block_invoke;
  v15[3] = &unk_24E79B3F0;
  v15[4] = self;
  v16 = v8;
  v17 = v9;
  v18 = v10;
  v12 = v10;
  v13 = v9;
  v14 = v8;
  dispatch_async(v11, v15);

}

- (void)_removeWithMergeSecondaryAccessory:(id)a3 removedFromBridgeAccessory:(id)a4 completionHandler:(id)a5
{
  id v8;
  void (**v9)(id, void *, _QWORD);
  void *v10;
  void *v11;
  _QWORD v12[2];

  v12[1] = *MEMORY[0x24BDAC8D0];
  v8 = a3;
  v9 = (void (**)(id, void *, _QWORD))a5;
  objc_msgSend(a4, "removeHostedAccessory:", v8);
  -[HMDHome removeAccessory:](self, "removeAccessory:", v8);
  +[HMDBulletinBoard sharedBulletinBoard](HMDBulletinBoard, "sharedBulletinBoard");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "removeBulletinsForAccessory:", v8);

  -[HMDHome _reevaluateAccessoryInfoWithBadgeRefresh:](self, "_reevaluateAccessoryInfoWithBadgeRefresh:", 1);
  if (v9)
  {
    v12[0] = v8;
    objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", v12, 1);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v9[2](v9, v11, 0);

  }
}

- (id)accessoryWithIdentifier:(id)a3
{
  id v4;
  void *v5;
  id v6;
  uint64_t v7;
  void *i;
  void *v9;
  void *v10;
  char v11;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _BYTE v17[128];
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  v4 = a3;
  v13 = 0u;
  v14 = 0u;
  v15 = 0u;
  v16 = 0u;
  -[HMDHome accessories](self, "accessories", 0);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = (id)objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
  if (v6)
  {
    v7 = *(_QWORD *)v14;
    do
    {
      for (i = 0; i != v6; i = (char *)i + 1)
      {
        if (*(_QWORD *)v14 != v7)
          objc_enumerationMutation(v5);
        v9 = *(void **)(*((_QWORD *)&v13 + 1) + 8 * (_QWORD)i);
        objc_msgSend(v9, "identifier");
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        if (objc_msgSend(v10, "isEqualToString:", v4))
        {
          v11 = objc_msgSend(v9, "isPrimary");

          if ((v11 & 1) != 0)
          {
            v6 = v9;
            goto LABEL_12;
          }
        }
        else
        {

        }
      }
      v6 = (id)objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
    }
    while (v6);
  }
LABEL_12:

  return v6;
}

- (id)hapAccessoryWithIdentifier:(id)a3
{
  void *v3;
  void *v4;
  id v5;

  -[HMDHome accessoryWithIdentifier:](self, "accessoryWithIdentifier:", a3);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v4 = v3;
  else
    v4 = 0;
  v5 = v4;

  return v5;
}

- (id)hapAccessoryWithIdentifier:(id)a3 instanceID:(id)a4
{
  id v6;
  id v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t i;
  void *v13;
  void *v14;
  int v15;
  id v16;
  void *v17;
  id v18;
  void *v19;
  char v20;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  _BYTE v26[128];
  uint64_t v27;

  v27 = *MEMORY[0x24BDAC8D0];
  v6 = a3;
  v7 = a4;
  v22 = 0u;
  v23 = 0u;
  v24 = 0u;
  v25 = 0u;
  -[HMDHome accessories](self, "accessories", 0);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v22, v26, 16);
  if (v9)
  {
    v10 = v9;
    v11 = *(_QWORD *)v23;
    do
    {
      for (i = 0; i != v10; ++i)
      {
        if (*(_QWORD *)v23 != v11)
          objc_enumerationMutation(v8);
        v13 = *(void **)(*((_QWORD *)&v22 + 1) + 8 * i);
        objc_msgSend(v13, "identifier");
        v14 = (void *)objc_claimAutoreleasedReturnValue();
        v15 = objc_msgSend(v14, "isEqualToString:", v6);

        if (v15)
        {
          v16 = v13;
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) != 0)
            v17 = v16;
          else
            v17 = 0;
          v18 = v17;

          if (v18)
          {
            if (!v7)
              goto LABEL_17;
            objc_msgSend(v18, "hapInstanceId");
            v19 = (void *)objc_claimAutoreleasedReturnValue();
            v20 = objc_msgSend(v19, "isEqualToNumber:", v7);

            if ((v20 & 1) != 0)
              goto LABEL_17;
          }

        }
      }
      v10 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v22, v26, 16);
    }
    while (v10);
  }
  v16 = 0;
LABEL_17:

  return v16;
}

- (id)hmdHAPAccessoryWithHAPAccessory:(id)a3
{
  id v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  id v11;
  id v12;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  _BYTE v18[128];
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v4 = a3;
  v14 = 0u;
  v15 = 0u;
  v16 = 0u;
  v17 = 0u;
  -[HMDHome accessories](self, "accessories", 0);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
  if (v6)
  {
    v7 = v6;
    v8 = *(_QWORD *)v15;
LABEL_3:
    v9 = 0;
    while (1)
    {
      if (*(_QWORD *)v15 != v8)
        objc_enumerationMutation(v5);
      v10 = *(id *)(*((_QWORD *)&v14 + 1) + 8 * v9);
      objc_opt_class();
      v11 = (objc_opt_isKindOfClass() & 1) != 0 ? v10 : 0;
      v12 = v11;

      if ((objc_msgSend(v12, "matchesHAPAccessory:", v4) & 1) != 0)
        break;

      if (v7 == ++v9)
      {
        v7 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
        if (v7)
          goto LABEL_3;
        goto LABEL_12;
      }
    }
  }
  else
  {
LABEL_12:
    v12 = 0;
  }

  return v12;
}

- (void)scheduleRemoval
{
  void *v3;
  id v4;

  -[HMDHome homeManager](self, "homeManager");
  v4 = (id)objc_claimAutoreleasedReturnValue();
  +[HMDBackingStoreTransactionOptions defaultXPCOptions](HMDBackingStoreTransactionOptions, "defaultXPCOptions");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "scheduleRemovalForHome:message:options:", self, 0, v3);

}

- (unint64_t)accessoryCountForRoom:(id)a3
{
  void *v4;
  void *v5;
  void *v6;
  unint64_t v7;

  objc_msgSend(MEMORY[0x24BDD1758], "predicateWithFormat:", CFSTR("room == %@"), a3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHome accessories](self, "accessories");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "filteredArrayUsingPredicate:", v4);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  v7 = objc_msgSend(v6, "count");
  return v7;
}

- (id)hapAccessoryServerIdentifiers
{
  void *v2;
  void *v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  void *v10;
  id v11;
  void *v12;
  void *v13;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  _BYTE v19[128];
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  -[HMDHome accessories](self, "accessories");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x24BDBCEF0], "setWithCapacity:", objc_msgSend(v2, "count"));
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v15 = 0u;
  v16 = 0u;
  v17 = 0u;
  v18 = 0u;
  v4 = v2;
  v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v15, v19, 16);
  if (v5)
  {
    v6 = v5;
    v7 = *(_QWORD *)v16;
    do
    {
      v8 = 0;
      do
      {
        if (*(_QWORD *)v16 != v7)
          objc_enumerationMutation(v4);
        v9 = *(id *)(*((_QWORD *)&v15 + 1) + 8 * v8);
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0)
          v10 = v9;
        else
          v10 = 0;
        v11 = v10;

        if (v11 && objc_msgSend(v11, "isPrimary", (_QWORD)v15))
        {
          objc_msgSend(v11, "identifier");
          v12 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v3, "addObject:", v12);

        }
        ++v8;
      }
      while (v6 != v8);
      v6 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v15, v19, 16);
    }
    while (v6);
  }

  v13 = (void *)objc_msgSend(v3, "copy");
  return v13;
}

- (id)hapAccessoryUniqueIdentifiers
{
  void *v2;
  void *v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  void *v10;
  id v11;
  void *v12;
  void *v13;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  _BYTE v19[128];
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  -[HMDHome accessories](self, "accessories");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x24BDBCEF0], "setWithCapacity:", objc_msgSend(v2, "count"));
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v15 = 0u;
  v16 = 0u;
  v17 = 0u;
  v18 = 0u;
  v4 = v2;
  v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v15, v19, 16);
  if (v5)
  {
    v6 = v5;
    v7 = *(_QWORD *)v16;
    do
    {
      v8 = 0;
      do
      {
        if (*(_QWORD *)v16 != v7)
          objc_enumerationMutation(v4);
        v9 = *(id *)(*((_QWORD *)&v15 + 1) + 8 * v8);
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0)
          v10 = v9;
        else
          v10 = 0;
        v11 = v10;

        if (v11)
        {
          objc_msgSend(v11, "uniqueIdentifier", (_QWORD)v15);
          v12 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v3, "addObject:", v12);

        }
        ++v8;
      }
      while (v6 != v8);
      v6 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v15, v19, 16);
    }
    while (v6);
  }

  v13 = (void *)objc_msgSend(v3, "copy");
  return v13;
}

- (void)_registerPairedAccessory:(id)a3 transports:(unint64_t)a4 setupHash:(id)a5
{
  id v8;
  id v9;
  id v10;

  v8 = a5;
  v9 = a3;
  -[HMDHome accessoryBrowser](self, "accessoryBrowser");
  v10 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "registerPairedAccessory:transports:setupHash:delegate:", v9, a4, v8, self);

}

- (void)_deregisterPairedAccessory:(id)a3
{
  id v4;
  id v5;

  v4 = a3;
  -[HMDHome accessoryBrowser](self, "accessoryBrowser");
  v5 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "deregisterPairedAccessory:", v4);

}

- (BOOL)_addOwnerToPrimaryAccessory:(id)a3 error:(id *)a4
{
  objc_msgSend(a3, "isPrimary");
  return 1;
}

- (void)_notifyClientOfNewlyAddedAccessories:(id)a3 requestMessage:(id)a4
{
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t i;
  void *v11;
  void *v12;
  void *v13;
  HMDHome *v14;
  NSObject *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  id v21;
  void *v22;
  id v23;
  id v24;
  void *v25;
  id v26;
  void *v27;
  void *v28;
  uint64_t v29;
  uint64_t *v30;
  void *v31;
  void *v32;
  void *v33;
  HMDHome *v34;
  NSObject *v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  HMDHome *v42;
  NSObject *v43;
  void *v44;
  void *v45;
  void *v46;
  void *v47;
  HMDHome *v48;
  NSObject *v49;
  void *v50;
  void *v51;
  uint64_t v52;
  void *v53;
  void *v54;
  void *v55;
  void *v56;
  id v57;
  id v58;
  void *v59;
  void *v60;
  id obj;
  _QWORD v62[4];
  id v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  const __CFString *v68;
  void *v69;
  _QWORD v70[2];
  _QWORD v71[2];
  uint8_t buf[4];
  void *v73;
  __int16 v74;
  void *v75;
  _BYTE v76[128];
  uint64_t v77;

  v77 = *MEMORY[0x24BDAC8D0];
  v6 = a3;
  v58 = a4;
  objc_msgSend(MEMORY[0x24BDBCEB8], "array");
  v59 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x24BDBCEB8], "array");
  v60 = (void *)objc_claimAutoreleasedReturnValue();
  v64 = 0u;
  v65 = 0u;
  v66 = 0u;
  v67 = 0u;
  obj = v6;
  v7 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v64, v76, 16);
  if (v7)
  {
    v8 = v7;
    v9 = *(_QWORD *)v65;
    do
    {
      for (i = 0; i != v8; ++i)
      {
        if (*(_QWORD *)v65 != v9)
          objc_enumerationMutation(obj);
        v11 = *(void **)(*((_QWORD *)&v64 + 1) + 8 * i);
        accessoryToEncodeForXPCTransportForAccessory(v11);
        v12 = (void *)objc_claimAutoreleasedReturnValue();
        if (v12 == v11)
        {
          v70[0] = CFSTR("kAccessoryUUID");
          objc_msgSend(v11, "uuid");
          v17 = (void *)objc_claimAutoreleasedReturnValue();
          v70[1] = CFSTR("kAccessoryDataKey");
          v71[0] = v17;
          encodeRootObjectForSPIClients(v11);
          v18 = (void *)objc_claimAutoreleasedReturnValue();
          v71[1] = v18;
          objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v71, v70, 2);
          v19 = (void *)objc_claimAutoreleasedReturnValue();

          v20 = (void *)objc_msgSend(v19, "copy");
          objc_msgSend(v60, "addObject:", v20);

          v21 = v11;
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) != 0)
            v22 = v21;
          else
            v22 = 0;
          v23 = v22;

          v24 = v21;
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) != 0)
            v25 = v24;
          else
            v25 = 0;
          v26 = v25;

          if (v23
            && (!objc_msgSend(v23, "hasTelevisionService") || (_os_feature_enabled_impl() & 1) != 0)
            || v26 && _os_feature_enabled_impl())
          {
            objc_msgSend(v59, "addObject:", v19);
          }

        }
        else
        {
          v13 = (void *)MEMORY[0x227676638]();
          v14 = self;
          HMFGetOSLogHandle();
          v15 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
          {
            HMFGetLogIdentifier();
            v16 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 138543618;
            v73 = v16;
            v74 = 2112;
            v75 = v11;
            _os_log_impl(&dword_2218F0000, v15, OS_LOG_TYPE_INFO, "%{public}@Skipping notifying clients of added accessory: %@", buf, 0x16u);

          }
          objc_autoreleasePoolPop(v13);
        }

      }
      v8 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v64, v76, 16);
    }
    while (v8);
  }

  v68 = CFSTR("kHomeUUID");
  -[HMDHome uuid](self, "uuid");
  v27 = (void *)objc_claimAutoreleasedReturnValue();
  v69 = v27;
  objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", &v69, &v68, 1);
  v28 = (void *)objc_claimAutoreleasedReturnValue();

  v29 = objc_msgSend(v59, "count");
  v30 = (uint64_t *)MEMORY[0x24BDD5C20];
  if (v29)
  {
    v31 = (void *)objc_msgSend(v28, "mutableCopy");
    v32 = (void *)objc_msgSend(v59, "copy");
    objc_msgSend(v31, "setObject:forKeyedSubscript:", v32, CFSTR("kAccessoriesListKey"));

    v33 = (void *)MEMORY[0x227676638]();
    v34 = self;
    HMFGetOSLogHandle();
    v35 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v35, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v36 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v73 = v36;
      v74 = 2112;
      v75 = v31;
      _os_log_impl(&dword_2218F0000, v35, OS_LOG_TYPE_INFO, "%{public}@Notifying non-SPI-entitled clients of added accessories using payload: %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v33);
    objc_msgSend(MEMORY[0x24BE3F1D0], "nonSPIEntitledMessageWithName:messagePayload:", *v30, v31);
    v37 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v58, "identifier");
    v38 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v37, "setIdentifier:", v38);

    -[HMDHome msgDispatcher](v34, "msgDispatcher");
    v39 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHome uuid](v34, "uuid");
    v40 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v39, "sendMessage:target:", v37, v40);

  }
  else
  {
    v41 = (void *)MEMORY[0x227676638]();
    v42 = self;
    HMFGetOSLogHandle();
    v43 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v43, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v44 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v73 = v44;
      _os_log_impl(&dword_2218F0000, v43, OS_LOG_TYPE_INFO, "%{public}@Not notifying non-SPI-entitled clients of empty list of added accessories", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v41);
  }
  v45 = (void *)objc_msgSend(v28, "mutableCopy");
  v46 = (void *)objc_msgSend(v60, "copy");
  objc_msgSend(v45, "setObject:forKeyedSubscript:", v46, CFSTR("kAccessoriesListKey"));

  v47 = (void *)MEMORY[0x227676638]();
  v48 = self;
  HMFGetOSLogHandle();
  v49 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v49, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v50 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543618;
    v73 = v50;
    v74 = 2112;
    v75 = v45;
    _os_log_impl(&dword_2218F0000, v49, OS_LOG_TYPE_INFO, "%{public}@Notifying SPI-entitled clients of added accessories using payload: %@", buf, 0x16u);

  }
  objc_autoreleasePoolPop(v47);
  v51 = (void *)MEMORY[0x24BE3F1D0];
  v52 = *v30;
  objc_msgSend(v58, "identifier");
  v53 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v51, "entitledMessageWithName:identifier:messagePayload:", v52, v53, v45);
  v54 = (void *)objc_claimAutoreleasedReturnValue();

  -[HMDHome msgDispatcher](v48, "msgDispatcher");
  v55 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHome uuid](v48, "uuid");
  v56 = (void *)objc_claimAutoreleasedReturnValue();
  v62[0] = MEMORY[0x24BDAC760];
  v62[1] = 3221225472;
  v62[2] = __63__HMDHome__notifyClientOfNewlyAddedAccessories_requestMessage___block_invoke;
  v62[3] = &unk_24E79C240;
  v63 = v58;
  v57 = v58;
  objc_msgSend(v55, "sendMessage:target:andInvokeCompletionHandler:", v54, v56, v62);

}

- (void)_sendRemoveCompletionStatusForHMDAccessories:(id)a3 withCompletion:(id)a4 error:(id)a5
{
  id v8;
  void *v9;
  HMDHome *v10;
  NSObject *v11;
  _BOOL4 v12;
  void *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  id v19;
  void *v20;
  id v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void (**v27)(id, id, id);
  id v28;
  id obj;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  uint8_t v34[128];
  uint8_t buf[4];
  void *v36;
  __int16 v37;
  id v38;
  __int16 v39;
  id v40;
  uint64_t v41;

  v41 = *MEMORY[0x24BDAC8D0];
  v8 = a3;
  v27 = (void (**)(id, id, id))a4;
  v28 = a5;
  v9 = (void *)MEMORY[0x227676638]();
  v10 = self;
  HMFGetOSLogHandle();
  v11 = objc_claimAutoreleasedReturnValue();
  v12 = os_log_type_enabled(v11, OS_LOG_TYPE_INFO);
  if (v27)
  {
    if (v12)
    {
      HMFGetLogIdentifier();
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543874;
      v36 = v13;
      v37 = 2112;
      v38 = v28;
      v39 = 2112;
      v40 = v8;
      _os_log_impl(&dword_2218F0000, v11, OS_LOG_TYPE_INFO, "%{public}@Sending removal completion with error %@, accessories %@", buf, 0x20u);

    }
    objc_autoreleasePoolPop(v9);
    v27[2](v27, v8, v28);
  }
  else
  {
    if (v12)
    {
      HMFGetLogIdentifier();
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v36 = v14;
      _os_log_impl(&dword_2218F0000, v11, OS_LOG_TYPE_INFO, "%{public}@sending removal completion for accessory removal: no completion found", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v9);
  }
  v32 = 0u;
  v33 = 0u;
  v30 = 0u;
  v31 = 0u;
  obj = v8;
  v15 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v30, v34, 16);
  if (v15)
  {
    v16 = *(_QWORD *)v31;
    do
    {
      v17 = 0;
      do
      {
        if (*(_QWORD *)v31 != v16)
          objc_enumerationMutation(obj);
        v18 = *(void **)(*((_QWORD *)&v30 + 1) + 8 * v17);
        os_unfair_recursive_lock_lock_with_options();
        -[NSHashTable removeObject:](v10->_removeAccessoryInProgressForHMDAccessories, "removeObject:", v18);
        os_unfair_recursive_lock_unlock();
        v19 = v18;
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0)
          v20 = v19;
        else
          v20 = 0;
        v21 = v20;

        if (v21 && objc_msgSend(v19, "isPrimary"))
        {
          objc_msgSend(v21, "getPrimaryHAPAccessories");
          v22 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v22, "firstObject");
          v23 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v23, "server");
          v24 = (void *)objc_claimAutoreleasedReturnValue();

          -[HMDHome accessoryBrowser](v10, "accessoryBrowser");
          v25 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v21, "identifier");
          v26 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v25, "addUnpairedAccessoryServer:identifier:", v24, v26);

        }
        ++v17;
      }
      while (v15 != v17);
      v15 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v30, v34, 16);
    }
    while (v15);
  }

  if (objc_msgSend(obj, "count"))
    -[HMDHome _reevaluateAccessoryInfoWithBadgeRefresh:](v10, "_reevaluateAccessoryInfoWithBadgeRefresh:", 1);

}

- (void)_removeAccessoriesForPrimaryAccessory:(id)a3 error:(id)a4 completionHandler:(id)a5
{
  id v8;
  id v9;
  id v10;
  void *v11;
  HMDHome *v12;
  void *v13;
  id v14;
  char isKindOfClass;
  void *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t i;
  id v22;
  void *v23;
  id v24;
  void *v25;
  void *v26;
  void *v27;
  char v28;
  int v29;
  void *v30;
  char v31;
  void *v32;
  void *v33;
  id v34;
  void *v35;
  HMDHome *v36;
  NSObject *v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  id v42;
  char v43;
  void *v44;
  id v45;
  void *v46;
  NSObject *v47;
  void *v48;
  void *v49;
  void *v50;
  HMDHome *v51;
  NSObject *v52;
  void *v53;
  void *v54;
  HMDHome *v55;
  NSObject *v56;
  void *v57;
  void *v58;
  uint64_t v59;
  uint64_t v60;
  void *v61;
  NSObject *v62;
  void *v63;
  id v64;
  void *v65;
  id v66;
  id v67;
  void *v68;
  HMDHome *v69;
  id v70;
  _QWORD block[5];
  id v72;
  id v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  uint8_t buf[4];
  void *v79;
  __int16 v80;
  id v81;
  __int16 v82;
  void *v83;
  _BYTE v84[128];
  uint64_t v85;

  v85 = *MEMORY[0x24BDAC8D0];
  v8 = a3;
  v9 = a4;
  v10 = a5;
  if (!v8)
  {
    v54 = (void *)MEMORY[0x227676638]();
    v55 = self;
    HMFGetOSLogHandle();
    v56 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v56, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v57 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v79 = v57;
      _os_log_impl(&dword_2218F0000, v56, OS_LOG_TYPE_ERROR, "%{public}@Nil accessory was passed to remove it from the home.", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v54);
    v58 = (void *)MEMORY[0x24BDD1540];
    v59 = *MEMORY[0x24BDD5BD8];
    v60 = 20;
    goto LABEL_50;
  }
  v69 = self;
  if ((objc_msgSend(v8, "isPrimary") & 1) == 0)
  {
    v61 = (void *)MEMORY[0x227676638]();
    v55 = self;
    HMFGetOSLogHandle();
    v62 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v62, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v63 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v79 = v63;
      v80 = 2112;
      v81 = v8;
      _os_log_impl(&dword_2218F0000, v62, OS_LOG_TYPE_ERROR, "%{public}@Accessory is not primary (Bridged). Not moving further. [%@]", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v61);
    v58 = (void *)MEMORY[0x24BDD1540];
    v59 = *MEMORY[0x24BDD5BD8];
    v60 = 34;
LABEL_50:
    objc_msgSend(v58, "errorWithDomain:code:userInfo:", v59, v60, 0);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHome _sendRemoveCompletionStatusForHMDAccessories:withCompletion:error:](v55, "_sendRemoveCompletionStatusForHMDAccessories:withCompletion:error:", 0, v10, v11);
    goto LABEL_51;
  }
  objc_msgSend(MEMORY[0x24BDBCEB8], "array");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v12 = self;
  -[HMDHome removeAccessory:](self, "removeAccessory:", v8);
  objc_msgSend(v11, "addObject:", v8);
  +[HMDBulletinBoard sharedBulletinBoard](HMDBulletinBoard, "sharedBulletinBoard");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v13, "removeBulletinsForAccessory:", v8);

  v14 = v8;
  objc_opt_class();
  isKindOfClass = objc_opt_isKindOfClass();
  if ((isKindOfClass & 1) != 0)
    v16 = v14;
  else
    v16 = 0;
  v70 = v16;

  if ((isKindOfClass & 1) != 0)
  {
    v65 = v14;
    v66 = v10;
    v67 = v9;
    v68 = v11;
    v64 = v8;
    v76 = 0u;
    v77 = 0u;
    v74 = 0u;
    v75 = 0u;
    -[HMDHome accessories](v69, "accessories");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    v18 = objc_msgSend(v17, "countByEnumeratingWithState:objects:count:", &v74, v84, 16);
    if (v18)
    {
      v19 = v18;
      v20 = *(_QWORD *)v75;
      do
      {
        for (i = 0; i != v19; ++i)
        {
          if (*(_QWORD *)v75 != v20)
            objc_enumerationMutation(v17);
          v22 = *(id *)(*((_QWORD *)&v74 + 1) + 8 * i);
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) != 0)
            v23 = v22;
          else
            v23 = 0;
          v24 = v23;

          objc_msgSend(v24, "identifier");
          v25 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v70, "identifier");
          v26 = (void *)objc_claimAutoreleasedReturnValue();
          if ((objc_msgSend(v25, "isEqualToString:", v26) & 1) == 0)
          {

            goto LABEL_20;
          }
          objc_msgSend(v24, "hostAccessory");
          v27 = (void *)objc_claimAutoreleasedReturnValue();
          objc_opt_class();
          v28 = objc_opt_isKindOfClass();

          if ((v28 & 1) == 0 || !v27)
          {
            -[HMDHome removeAccessory:](v69, "removeAccessory:", v22);
            objc_msgSend(v68, "addObject:", v22);
            +[HMDBulletinBoard sharedBulletinBoard](HMDBulletinBoard, "sharedBulletinBoard");
            v25 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v25, "removeBulletinsForAccessory:", v22);
LABEL_20:

          }
        }
        v19 = objc_msgSend(v17, "countByEnumeratingWithState:objects:count:", &v74, v84, 16);
      }
      while (v19);
    }

    v14 = v65;
    v29 = objc_msgSend(v65, "isReachable");
    v8 = v64;
    v10 = v66;
    v9 = v67;
    v11 = v68;
    v12 = v69;
    if (v67
      || !v29
      || (objc_msgSend(v65, "home"),
          v30 = (void *)objc_claimAutoreleasedReturnValue(),
          v31 = objc_msgSend(v30, "isAdminUser"),
          v30,
          (v31 & 1) == 0))
    {
      -[HMDHome keychainStore](v69, "keychainStore");
      v32 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v70, "identifier");
      v33 = (void *)objc_claimAutoreleasedReturnValue();
      v73 = 0;
      objc_msgSend(v32, "removeAccessoryKeyForName:error:", v33, &v73);
      v34 = v73;

      if (v34)
      {
        v35 = (void *)MEMORY[0x227676638]();
        v36 = v69;
        HMFGetOSLogHandle();
        v37 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v37, OS_LOG_TYPE_ERROR))
        {
          HMFGetLogIdentifier();
          v38 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v65, "name");
          v39 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v70, "identifier");
          v40 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543874;
          v79 = v38;
          v80 = 2112;
          v81 = v39;
          v82 = 2112;
          v83 = v40;
          _os_log_impl(&dword_2218F0000, v37, OS_LOG_TYPE_ERROR, "%{public}@Failed to remove keychain entry for accessory %@ with identifier: %@", buf, 0x20u);

          v11 = v68;
          v14 = v65;

        }
        objc_autoreleasePoolPop(v35);
        v10 = v66;
        v9 = v67;
      }

    }
    objc_msgSend(v70, "identifier");
    v41 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHome _deregisterPairedAccessory:](v69, "_deregisterPairedAccessory:", v41);

  }
  v42 = v14;
  objc_opt_class();
  v43 = objc_opt_isKindOfClass();
  if ((v43 & 1) != 0)
    v44 = v42;
  else
    v44 = 0;
  v45 = v44;

  if ((v43 & 1) != 0)
  {
    objc_msgSend(v42, "mediaProfile");
    v46 = (void *)objc_claimAutoreleasedReturnValue();
    if (v46)
    {
      -[HMDHome workQueue](v12, "workQueue");
      v47 = objc_claimAutoreleasedReturnValue();
      block[0] = MEMORY[0x24BDAC760];
      block[1] = 3221225472;
      block[2] = __73__HMDHome__removeAccessoriesForPrimaryAccessory_error_completionHandler___block_invoke;
      block[3] = &unk_24E79C268;
      block[4] = v12;
      v72 = v46;
      dispatch_async(v47, block);

      objc_msgSend(v42, "identifier");
      v48 = (void *)objc_claimAutoreleasedReturnValue();
      -[HMDHome mediaSessionStateWithIdentifier:](v12, "mediaSessionStateWithIdentifier:", v48);
      v49 = (void *)objc_claimAutoreleasedReturnValue();

      if (v49)
        -[HMDHome removeMediaSessionState:](v12, "removeMediaSessionState:", v49);

    }
  }
  v50 = (void *)MEMORY[0x227676638]();
  v51 = v12;
  HMFGetOSLogHandle();
  v52 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v52, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v53 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543618;
    v79 = v53;
    v80 = 2112;
    v81 = v11;
    _os_log_impl(&dword_2218F0000, v52, OS_LOG_TYPE_INFO, "%{public}@removedAccessories %@", buf, 0x16u);

  }
  objc_autoreleasePoolPop(v50);
  -[HMDHome _sendRemoveCompletionStatusForHMDAccessories:withCompletion:error:](v51, "_sendRemoveCompletionStatusForHMDAccessories:withCompletion:error:", v11, v10, 0);

LABEL_51:
}

- (void)removeAccessory:(id)a3 completionHandler:(id)a4
{
  id v6;
  id v7;
  NSObject *v8;
  id v9;
  id v10;
  _QWORD block[5];
  id v12;
  id v13;

  v6 = a3;
  v7 = a4;
  -[HMDHome workQueue](self, "workQueue");
  v8 = objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x24BDAC760];
  block[1] = 3221225472;
  block[2] = __45__HMDHome_removeAccessory_completionHandler___block_invoke;
  block[3] = &unk_24E79B440;
  block[4] = self;
  v12 = v6;
  v13 = v7;
  v9 = v7;
  v10 = v6;
  dispatch_async(v8, block);

}

- (void)_removeAccessory:(id)a3 completionHandler:(id)a4
{
  id v6;
  void (**v7)(id, _QWORD, void *);
  void *v8;
  int v9;
  void *v10;
  HMDHome *v11;
  NSObject *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  id v21;
  void *v22;
  void *v23;
  HMDHome *v24;
  NSObject *v25;
  void *v26;
  id v27;
  void *v28;
  void *v29;
  char v30;
  uint64_t v31;
  void *v32;
  HMDHome *v33;
  NSObject *v34;
  void *v35;
  _QWORD v36[2];
  _QWORD v37[2];
  uint8_t buf[4];
  void *v39;
  __int16 v40;
  id v41;
  uint64_t v42;

  v42 = *MEMORY[0x24BDAC8D0];
  v6 = a3;
  v7 = (void (**)(id, _QWORD, void *))a4;
  if ((objc_msgSend(v6, "isPrimary") & 1) != 0)
  {
    -[HMDHome removeAccessoryInProgressForHMDAccessories](self, "removeAccessoryInProgressForHMDAccessories");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = objc_msgSend(v8, "containsObject:", v6);

    if (v9)
    {
      v10 = (void *)MEMORY[0x227676638]();
      v11 = self;
      HMFGetOSLogHandle();
      v12 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        v39 = v13;
        v40 = 2112;
        v41 = v6;
        _os_log_impl(&dword_2218F0000, v12, OS_LOG_TYPE_ERROR, "%{public}@Already have a remove operation queued for accessory %@", buf, 0x16u);

      }
      objc_autoreleasePoolPop(v10);
      v36[0] = *MEMORY[0x24BDD0FC8];
      v14 = (void *)MEMORY[0x24BDD17C8];
      objc_msgSend(v6, "name");
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v6, "uuid");
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v14, "stringWithFormat:", CFSTR("Failed to remove accessory %@(%@)"), v15, v16);
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      v36[1] = *MEMORY[0x24BDD0FD8];
      v37[0] = v17;
      v18 = (void *)MEMORY[0x24BDD17C8];
      objc_msgSend(MEMORY[0x24BDD1540], "hmStringFromErrorCode:", 15);
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v18, "stringWithFormat:", CFSTR("%ld (%@) This accessory is already being removed from the home."), 15, v19);
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      v37[1] = v20;
      objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v37, v36, 2);
      v21 = (id)objc_claimAutoreleasedReturnValue();

      objc_msgSend(MEMORY[0x24BDD1540], "errorWithDomain:code:userInfo:", *MEMORY[0x24BDD5BD8], 15, v21);
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      if (v7)
        v7[2](v7, 0, v22);

    }
    else
    {
      v27 = v6;
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0)
        v28 = v27;
      else
        v28 = 0;
      v21 = v28;

      objc_msgSend(v27, "home");
      v29 = (void *)objc_claimAutoreleasedReturnValue();
      if (objc_msgSend(v29, "isAdminUser"))
      {
        v30 = objc_msgSend(v21, "isPaired");

        if ((v30 & 1) != 0)
        {
          os_unfair_recursive_lock_lock_with_options();
          -[NSHashTable addObject:](self->_removeAccessoryInProgressForHMDAccessories, "addObject:", v21);
          v31 = os_unfair_recursive_lock_unlock();
          v32 = (void *)MEMORY[0x227676638](v31);
          v33 = self;
          HMFGetOSLogHandle();
          v34 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v34, OS_LOG_TYPE_INFO))
          {
            HMFGetLogIdentifier();
            v35 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 138543618;
            v39 = v35;
            v40 = 2112;
            v41 = v21;
            _os_log_impl(&dword_2218F0000, v34, OS_LOG_TYPE_INFO, "%{public}@Removing accessory %@. Also added accessory in removal-in-progress array", buf, 0x16u);

          }
          objc_autoreleasePoolPop(v32);
          -[HMDHome _removeAccessoriesForPrimaryAccessory:error:completionHandler:](v33, "_removeAccessoriesForPrimaryAccessory:error:completionHandler:", v21, 0, v7);
          goto LABEL_22;
        }
      }
      else
      {

      }
      -[HMDHome _removeAccessoriesForPrimaryAccessory:error:completionHandler:](self, "_removeAccessoriesForPrimaryAccessory:error:completionHandler:", v27, 0, v7);
    }
LABEL_22:

    goto LABEL_23;
  }
  v23 = (void *)MEMORY[0x227676638]();
  v24 = self;
  HMFGetOSLogHandle();
  v25 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
  {
    HMFGetLogIdentifier();
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543618;
    v39 = v26;
    v40 = 2112;
    v41 = v6;
    _os_log_impl(&dword_2218F0000, v25, OS_LOG_TYPE_ERROR, "%{public}@cannot remove non-primary accessory %@", buf, 0x16u);

  }
  objc_autoreleasePoolPop(v23);
  if (v7)
  {
    objc_msgSend(MEMORY[0x24BDD1540], "errorWithDomain:code:userInfo:", *MEMORY[0x24BDD5BD8], 34, 0);
    v21 = (id)objc_claimAutoreleasedReturnValue();
    v7[2](v7, 0, v21);
    goto LABEL_22;
  }
LABEL_23:

}

- (void)_removeAccessoryWithUUID:(id)a3 message:(id)a4
{
  id v6;
  id v7;
  void *v8;
  void *v9;
  HMDHome *v10;
  NSObject *v11;
  void *v12;
  id v13;
  void *v14;
  id v15;
  void *v16;
  void *v17;
  id v18;
  _QWORD v19[4];
  id v20;
  id v21;
  id v22;
  id v23;
  id location;
  _BYTE buf[12];
  __int16 v26;
  void *v27;
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  v6 = a3;
  v7 = a4;
  objc_initWeak(&location, self);
  -[HMDHome accessoryWithUUID:](self, "accessoryWithUUID:", v6);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  if (v8)
  {
    v9 = (void *)MEMORY[0x227676638]();
    v10 = self;
    HMFGetOSLogHandle();
    v11 = (id)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      *(_QWORD *)&buf[4] = v12;
      v26 = 2112;
      v27 = v8;
      _os_log_impl(&dword_2218F0000, v11, OS_LOG_TYPE_INFO, "%{public}@Remove accessory name: %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v9);
    v13 = v8;
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
      v14 = v13;
    else
      v14 = 0;
    v15 = v14;

    *(_QWORD *)buf = 0;
    objc_msgSend(v15, "preferredHAPAccessoryForOperation:linkType:", 8, buf);
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    +[HMDAccessoryPairingEvent removingAccessory:hapAccessory:](HMDAccessoryPairingEvent, "removingAccessory:hapAccessory:", v13, v16);
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    v19[0] = MEMORY[0x24BDAC760];
    v19[1] = 3221225472;
    v19[2] = __44__HMDHome__removeAccessoryWithUUID_message___block_invoke;
    v19[3] = &unk_24E776380;
    objc_copyWeak(&v23, &location);
    v20 = v7;
    v18 = v17;
    v21 = v18;
    v22 = v13;
    -[HMDHome _removeAccessory:completionHandler:](v10, "_removeAccessory:completionHandler:", v22, v19);

    objc_destroyWeak(&v23);
  }
  else
  {
    objc_msgSend(MEMORY[0x24BDD1540], "hmErrorWithCode:", 2);
    v15 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "respondWithError:", v15);
  }

  objc_destroyWeak(&location);
}

- (void)handleHomeDataLoaded:(id)a3
{
  NSObject *v4;
  _QWORD block[5];

  -[HMDHome workQueue](self, "workQueue", a3);
  v4 = objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x24BDAC760];
  block[1] = 3221225472;
  block[2] = __32__HMDHome_handleHomeDataLoaded___block_invoke;
  block[3] = &unk_24E79C240;
  block[4] = self;
  dispatch_async(v4, block);

}

- (void)checkForCATIDUpdate:(id)a3
{
  NSObject *v4;
  _QWORD block[5];

  -[HMDHome workQueue](self, "workQueue", a3);
  v4 = objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x24BDAC760];
  block[1] = 3221225472;
  block[2] = __31__HMDHome_checkForCATIDUpdate___block_invoke;
  block[3] = &unk_24E79C240;
  block[4] = self;
  dispatch_async(v4, block);

}

- (void)_auditActionSetsAndTriggersForAccessory:(id)a3
{
  id v4;
  NSObject *v5;
  void *v6;
  HMDHome *v7;
  NSObject *v8;
  void *v9;
  void *v10;
  void *v11;
  HMDHome *v12;
  NSObject *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  id v36;
  void *v37;
  id v38;
  _QWORD v39[5];
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  _BYTE v52[128];
  _BYTE v53[128];
  uint8_t v54[128];
  uint8_t buf[4];
  void *v56;
  __int16 v57;
  void *v58;
  uint64_t v59;

  v59 = *MEMORY[0x24BDAC8D0];
  v4 = a3;
  -[HMDHome workQueue](self, "workQueue");
  v5 = objc_claimAutoreleasedReturnValue();
  dispatch_assert_queue_V2(v5);

  if (-[HMDHome isCurrentDevicePrimaryResident](self, "isCurrentDevicePrimaryResident")
    || !-[HMDHome isResidentSupported](self, "isResidentSupported"))
  {
    v11 = (void *)MEMORY[0x227676638]();
    v12 = self;
    HMFGetOSLogHandle();
    v13 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "shortDescription");
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v56 = v14;
      v57 = 2112;
      v58 = v15;
      _os_log_impl(&dword_2218F0000, v13, OS_LOG_TYPE_INFO, "%{public}@Auditing actions/events for ActionSets and Triggers for accessory %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v11);
    -[HMDHome backingStore](v12, "backingStore");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    +[HMDBackingStoreTransactionOptions defaultXPCOptions](HMDBackingStoreTransactionOptions, "defaultXPCOptions");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v16, "transaction:options:", CFSTR("kAuditActionSetsAndTriggersRequestKey"), v17);
    v18 = (void *)objc_claimAutoreleasedReturnValue();

    v50 = 0u;
    v51 = 0u;
    v48 = 0u;
    v49 = 0u;
    -[HMDHome actionSets](v12, "actionSets");
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    v20 = (void *)objc_msgSend(v19, "copy");

    v21 = objc_msgSend(v20, "countByEnumeratingWithState:objects:count:", &v48, v54, 16);
    if (v21)
    {
      v22 = v21;
      v23 = *(_QWORD *)v49;
      do
      {
        v24 = 0;
        do
        {
          if (*(_QWORD *)v49 != v23)
            objc_enumerationMutation(v20);
          objc_msgSend(*(id *)(*((_QWORD *)&v48 + 1) + 8 * v24++), "auditActionsForAccessory:transaction:", v4, v18);
        }
        while (v22 != v24);
        v22 = objc_msgSend(v20, "countByEnumeratingWithState:objects:count:", &v48, v54, 16);
      }
      while (v22);
    }

    v46 = 0u;
    v47 = 0u;
    v44 = 0u;
    v45 = 0u;
    -[HMDHome triggerOwnedActionSets](v12, "triggerOwnedActionSets");
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    v26 = (void *)objc_msgSend(v25, "copy");

    v27 = objc_msgSend(v26, "countByEnumeratingWithState:objects:count:", &v44, v53, 16);
    if (v27)
    {
      v28 = v27;
      v29 = *(_QWORD *)v45;
      do
      {
        v30 = 0;
        do
        {
          if (*(_QWORD *)v45 != v29)
            objc_enumerationMutation(v26);
          objc_msgSend(*(id *)(*((_QWORD *)&v44 + 1) + 8 * v30++), "auditActionsForAccessory:transaction:", v4, v18);
        }
        while (v28 != v30);
        v28 = objc_msgSend(v26, "countByEnumeratingWithState:objects:count:", &v44, v53, 16);
      }
      while (v28);
    }

    v42 = 0u;
    v43 = 0u;
    v40 = 0u;
    v41 = 0u;
    -[HMDHome triggers](v12, "triggers");
    v31 = (void *)objc_claimAutoreleasedReturnValue();
    v32 = objc_msgSend(v31, "countByEnumeratingWithState:objects:count:", &v40, v52, 16);
    if (v32)
    {
      v33 = v32;
      v34 = *(_QWORD *)v41;
      do
      {
        v35 = 0;
        do
        {
          if (*(_QWORD *)v41 != v34)
            objc_enumerationMutation(v31);
          v36 = *(id *)(*((_QWORD *)&v40 + 1) + 8 * v35);
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) != 0)
            v37 = v36;
          else
            v37 = 0;
          v38 = v37;

          if (objc_msgSend(v38, "isConfigured"))
            objc_msgSend(v38, "auditForStaleEventsWithAccessory:transaction:", v4, v18);

          ++v35;
        }
        while (v33 != v35);
        v33 = objc_msgSend(v31, "countByEnumeratingWithState:objects:count:", &v40, v52, 16);
      }
      while (v33);
    }

    v39[0] = MEMORY[0x24BDAC760];
    v39[1] = 3221225472;
    v39[2] = __51__HMDHome__auditActionSetsAndTriggersForAccessory___block_invoke;
    v39[3] = &unk_24E79BD80;
    v39[4] = v12;
    objc_msgSend(v18, "run:", v39);

  }
  else
  {
    v6 = (void *)MEMORY[0x227676638]();
    v7 = self;
    HMFGetOSLogHandle();
    v8 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "shortDescription");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v56 = v9;
      v57 = 2112;
      v58 = v10;
      _os_log_impl(&dword_2218F0000, v8, OS_LOG_TYPE_INFO, "%{public}@Skipping audit of actions/events for ActionSets and Triggers for accessory %@ on non-primary resident", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v6);
  }

}

- (void)handleMobileAssetsUpdatedNotification:(id)a3
{
  NSObject *v4;
  _QWORD block[5];

  -[HMDHome workQueue](self, "workQueue", a3);
  v4 = objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x24BDAC760];
  block[1] = 3221225472;
  block[2] = __49__HMDHome_handleMobileAssetsUpdatedNotification___block_invoke;
  block[3] = &unk_24E79C240;
  block[4] = self;
  dispatch_async(v4, block);

}

- (void)_removeService:(id)a3
{
  id v4;
  void *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  void *v28;
  id v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  void *v37;
  NSObject *v38;
  id v39;
  void *v40;
  void *v41;
  _QWORD block[5];
  id v43;
  _QWORD v44[5];
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  const __CFString *v61;
  id v62;
  _BYTE v63[128];
  _BYTE v64[128];
  _BYTE v65[128];
  _BYTE v66[128];
  uint64_t v67;

  v67 = *MEMORY[0x24BDAC8D0];
  v4 = a3;
  -[HMDHome backingStore](self, "backingStore");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = *MEMORY[0x24BDD7D48];
  +[HMDBackingStoreTransactionOptions defaultXPCOptions](HMDBackingStoreTransactionOptions, "defaultXPCOptions");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "transaction:options:", v6, v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  v59 = 0u;
  v60 = 0u;
  v57 = 0u;
  v58 = 0u;
  -[HMDHome serviceGroups](self, "serviceGroups");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = (void *)objc_msgSend(v9, "copy");

  v11 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v57, v66, 16);
  if (v11)
  {
    v12 = v11;
    v13 = *(_QWORD *)v58;
    do
    {
      v14 = 0;
      do
      {
        if (*(_QWORD *)v58 != v13)
          objc_enumerationMutation(v10);
        objc_msgSend(*(id *)(*((_QWORD *)&v57 + 1) + 8 * v14++), "removeService:", v4);
      }
      while (v12 != v14);
      v12 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v57, v66, 16);
    }
    while (v12);
  }

  v55 = 0u;
  v56 = 0u;
  v53 = 0u;
  v54 = 0u;
  -[HMDHome actionSets](self, "actionSets");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  v16 = (void *)objc_msgSend(v15, "copy");

  v17 = objc_msgSend(v16, "countByEnumeratingWithState:objects:count:", &v53, v65, 16);
  if (v17)
  {
    v18 = v17;
    v19 = *(_QWORD *)v54;
    do
    {
      v20 = 0;
      do
      {
        if (*(_QWORD *)v54 != v19)
          objc_enumerationMutation(v16);
        objc_msgSend(*(id *)(*((_QWORD *)&v53 + 1) + 8 * v20++), "handleRemovalOfService:transaction:", v4, v8);
      }
      while (v18 != v20);
      v18 = objc_msgSend(v16, "countByEnumeratingWithState:objects:count:", &v53, v65, 16);
    }
    while (v18);
  }

  v51 = 0u;
  v52 = 0u;
  v49 = 0u;
  v50 = 0u;
  -[HMDHome triggerOwnedActionSets](self, "triggerOwnedActionSets");
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  v22 = (void *)objc_msgSend(v21, "copy");

  v23 = objc_msgSend(v22, "countByEnumeratingWithState:objects:count:", &v49, v64, 16);
  if (v23)
  {
    v24 = v23;
    v25 = *(_QWORD *)v50;
    do
    {
      v26 = 0;
      do
      {
        if (*(_QWORD *)v50 != v25)
          objc_enumerationMutation(v22);
        objc_msgSend(*(id *)(*((_QWORD *)&v49 + 1) + 8 * v26++), "handleRemovalOfService:transaction:", v4, v8);
      }
      while (v24 != v26);
      v24 = objc_msgSend(v22, "countByEnumeratingWithState:objects:count:", &v49, v64, 16);
    }
    while (v24);
  }

  objc_msgSend(v4, "getConfiguredName");
  v27 = (void *)objc_claimAutoreleasedReturnValue();

  if (v27)
  {
    objc_msgSend(v4, "getConfiguredName");
    v28 = (void *)objc_claimAutoreleasedReturnValue();
    v29 = -[HMDHome removeName:](self, "removeName:", v28);

  }
  v48 = 0u;
  v46 = 0u;
  v47 = 0u;
  v45 = 0u;
  -[HMDHome triggers](self, "triggers");
  v30 = (void *)objc_claimAutoreleasedReturnValue();
  v31 = objc_msgSend(v30, "countByEnumeratingWithState:objects:count:", &v45, v63, 16);
  if (v31)
  {
    v32 = v31;
    v33 = *(_QWORD *)v46;
    do
    {
      v34 = 0;
      do
      {
        if (*(_QWORD *)v46 != v33)
          objc_enumerationMutation(v30);
        objc_msgSend(*(id *)(*((_QWORD *)&v45 + 1) + 8 * v34++), "handleRemovalOfService:transaction:", v4, v8);
      }
      while (v32 != v34);
      v32 = objc_msgSend(v30, "countByEnumeratingWithState:objects:count:", &v45, v63, 16);
    }
    while (v32);
  }

  v35 = MEMORY[0x24BDAC760];
  v44[0] = MEMORY[0x24BDAC760];
  v44[1] = 3221225472;
  v44[2] = __26__HMDHome__removeService___block_invoke;
  v44[3] = &unk_24E79BD80;
  v44[4] = self;
  objc_msgSend(v8, "run:", v44);
  -[HMDHome notificationCenter](self, "notificationCenter");
  v36 = (void *)objc_claimAutoreleasedReturnValue();
  v61 = CFSTR("HMDServiceNotificationKey");
  v62 = v4;
  objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", &v62, &v61, 1);
  v37 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v36, "postNotificationName:object:userInfo:", CFSTR("HMDHomeServiceRemovedNotification"), self, v37);

  -[HMDHome workQueue](self, "workQueue");
  v38 = objc_claimAutoreleasedReturnValue();
  block[0] = v35;
  block[1] = 3221225472;
  block[2] = __26__HMDHome__removeService___block_invoke_1143;
  block[3] = &unk_24E79C268;
  block[4] = self;
  v39 = v4;
  v43 = v39;
  dispatch_async(v38, block);

  objc_msgSend(v39, "bulletinBoardNotification");
  v40 = (void *)objc_claimAutoreleasedReturnValue();

  if (v40)
  {
    -[HMDHome accessoryBulletinNotificationManager](self, "accessoryBulletinNotificationManager");
    v41 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v41, "handleRemovedService:", v39);

  }
}

- (void)_removeAccessoriesFromContainers:(id)a3
{
  id v4;
  void *v5;
  HMDHome *v6;
  NSObject *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  void *v16;
  id v17;
  void *v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  id v41;
  id v42;
  id obj;
  uint64_t v44;
  _QWORD v45[5];
  id v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  _BYTE v67[128];
  _BYTE v68[128];
  _BYTE v69[128];
  _BYTE v70[128];
  uint8_t v71[128];
  uint8_t buf[4];
  void *v73;
  __int16 v74;
  id v75;
  uint64_t v76;

  v76 = *MEMORY[0x24BDAC8D0];
  v4 = a3;
  if (objc_msgSend(v4, "count"))
  {
    v5 = (void *)MEMORY[0x227676638]();
    v6 = self;
    HMFGetOSLogHandle();
    v7 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v73 = v8;
      v74 = 2112;
      v75 = v4;
      _os_log_impl(&dword_2218F0000, v7, OS_LOG_TYPE_INFO, "%{public}@Removing accessories from containers : [%@]", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v5);
    -[HMDHome backingStore](v6, "backingStore");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    +[HMDBackingStoreTransactionOptions defaultXPCOptions](HMDBackingStoreTransactionOptions, "defaultXPCOptions");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "transaction:options:", CFSTR("kRemoveAccessoryFromContainersRequestKey"), v10);
    v11 = (void *)objc_claimAutoreleasedReturnValue();

    v65 = 0u;
    v66 = 0u;
    v63 = 0u;
    v64 = 0u;
    v42 = v4;
    obj = v4;
    v12 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v63, v71, 16);
    if (v12)
    {
      v13 = v12;
      v44 = *(_QWORD *)v64;
      do
      {
        v14 = 0;
        do
        {
          if (*(_QWORD *)v64 != v44)
            objc_enumerationMutation(obj);
          v15 = *(id *)(*((_QWORD *)&v63 + 1) + 8 * v14);
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) != 0)
            v16 = v15;
          else
            v16 = 0;
          v17 = v16;

          if (v17)
          {
            v61 = 0u;
            v62 = 0u;
            v59 = 0u;
            v60 = 0u;
            -[HMDHome serviceGroups](v6, "serviceGroups");
            v18 = (void *)objc_claimAutoreleasedReturnValue();
            v19 = (void *)objc_msgSend(v18, "copy");

            v20 = objc_msgSend(v19, "countByEnumeratingWithState:objects:count:", &v59, v70, 16);
            if (v20)
            {
              v21 = v20;
              v22 = *(_QWORD *)v60;
              do
              {
                v23 = 0;
                do
                {
                  if (*(_QWORD *)v60 != v22)
                    objc_enumerationMutation(v19);
                  objc_msgSend(*(id *)(*((_QWORD *)&v59 + 1) + 8 * v23++), "removeServicesForAccessory:", v17);
                }
                while (v21 != v23);
                v21 = objc_msgSend(v19, "countByEnumeratingWithState:objects:count:", &v59, v70, 16);
              }
              while (v21);
            }

          }
          v57 = 0u;
          v58 = 0u;
          v55 = 0u;
          v56 = 0u;
          -[HMDHome actionSets](v6, "actionSets");
          v24 = (void *)objc_claimAutoreleasedReturnValue();
          v25 = (void *)objc_msgSend(v24, "copy");

          v26 = objc_msgSend(v25, "countByEnumeratingWithState:objects:count:", &v55, v69, 16);
          if (v26)
          {
            v27 = v26;
            v28 = *(_QWORD *)v56;
            do
            {
              v29 = 0;
              do
              {
                if (*(_QWORD *)v56 != v28)
                  objc_enumerationMutation(v25);
                objc_msgSend(*(id *)(*((_QWORD *)&v55 + 1) + 8 * v29++), "handleRemovalOfAccessory:transaction:", v15, v11);
              }
              while (v27 != v29);
              v27 = objc_msgSend(v25, "countByEnumeratingWithState:objects:count:", &v55, v69, 16);
            }
            while (v27);
          }

          v53 = 0u;
          v54 = 0u;
          v51 = 0u;
          v52 = 0u;
          -[HMDHome triggerOwnedActionSets](v6, "triggerOwnedActionSets");
          v30 = (void *)objc_claimAutoreleasedReturnValue();
          v31 = (void *)objc_msgSend(v30, "copy");

          v32 = objc_msgSend(v31, "countByEnumeratingWithState:objects:count:", &v51, v68, 16);
          if (v32)
          {
            v33 = v32;
            v34 = *(_QWORD *)v52;
            do
            {
              v35 = 0;
              do
              {
                if (*(_QWORD *)v52 != v34)
                  objc_enumerationMutation(v31);
                objc_msgSend(*(id *)(*((_QWORD *)&v51 + 1) + 8 * v35++), "handleRemovalOfAccessory:transaction:", v15, v11);
              }
              while (v33 != v35);
              v33 = objc_msgSend(v31, "countByEnumeratingWithState:objects:count:", &v51, v68, 16);
            }
            while (v33);
          }

          v49 = 0u;
          v50 = 0u;
          v47 = 0u;
          v48 = 0u;
          -[HMDHome triggers](v6, "triggers");
          v36 = (void *)objc_claimAutoreleasedReturnValue();
          v37 = objc_msgSend(v36, "countByEnumeratingWithState:objects:count:", &v47, v67, 16);
          if (v37)
          {
            v38 = v37;
            v39 = *(_QWORD *)v48;
            do
            {
              v40 = 0;
              do
              {
                if (*(_QWORD *)v48 != v39)
                  objc_enumerationMutation(v36);
                objc_msgSend(*(id *)(*((_QWORD *)&v47 + 1) + 8 * v40++), "handleRemovalOfAccessory:transaction:", v15, v11);
              }
              while (v38 != v40);
              v38 = objc_msgSend(v36, "countByEnumeratingWithState:objects:count:", &v47, v67, 16);
            }
            while (v38);
          }

          v45[0] = MEMORY[0x24BDAC760];
          v45[1] = 3221225472;
          v45[2] = __44__HMDHome__removeAccessoriesFromContainers___block_invoke;
          v45[3] = &unk_24E79BCC8;
          v45[4] = v6;
          v46 = v17;
          v41 = v17;
          objc_msgSend(v11, "run:", v45);

          ++v14;
        }
        while (v14 != v13);
        v13 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v63, v71, 16);
      }
      while (v13);
    }

    -[HMDHome _evaluateShouldRelaunchAndSetRelaunch](v6, "_evaluateShouldRelaunchAndSetRelaunch");
    v4 = v42;
  }

}

- (id)_removeAccessoriesCommon:(id)a3
{
  id v4;
  uint64_t i;
  void *v6;
  void *v7;
  void *v8;
  id v9;
  id v10;
  void *v11;
  id v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t j;
  void *v18;
  void *v19;
  void *v20;
  id v21;
  void *v22;
  void *v23;
  void *v24;
  id obj;
  uint64_t v27;
  id v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  const __CFString *v38;
  void *v39;
  _BYTE v40[128];
  _BYTE v41[128];
  uint64_t v42;

  v42 = *MEMORY[0x24BDAC8D0];
  v4 = a3;
  objc_msgSend(MEMORY[0x24BDBCEB8], "arrayWithCapacity:", objc_msgSend(v4, "count"));
  v28 = (id)objc_claimAutoreleasedReturnValue();
  -[HMDHome _removeAccessoriesFromContainers:](self, "_removeAccessoriesFromContainers:", v4);
  v36 = 0u;
  v37 = 0u;
  v34 = 0u;
  v35 = 0u;
  obj = v4;
  v29 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v34, v41, 16);
  if (v29)
  {
    v27 = *(_QWORD *)v35;
    do
    {
      for (i = 0; i != v29; ++i)
      {
        if (*(_QWORD *)v35 != v27)
          objc_enumerationMutation(obj);
        v6 = *(void **)(*((_QWORD *)&v34 + 1) + 8 * i);
        -[HMDHome removeAccessory:](self, "removeAccessory:", v6);
        objc_msgSend(v6, "getConfiguredName");
        v7 = (void *)objc_claimAutoreleasedReturnValue();

        if (v7)
        {
          objc_msgSend(v6, "getConfiguredName");
          v8 = (void *)objc_claimAutoreleasedReturnValue();
          v9 = -[HMDHome removeName:](self, "removeName:", v8);

        }
        v10 = v6;
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0)
          v11 = v10;
        else
          v11 = 0;
        v12 = v11;

        if (v12)
        {
          v32 = 0u;
          v33 = 0u;
          v30 = 0u;
          v31 = 0u;
          objc_msgSend(v12, "services");
          v13 = (void *)objc_claimAutoreleasedReturnValue();
          v14 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v30, v40, 16);
          if (v14)
          {
            v15 = v14;
            v16 = *(_QWORD *)v31;
            do
            {
              for (j = 0; j != v15; ++j)
              {
                if (*(_QWORD *)v31 != v16)
                  objc_enumerationMutation(v13);
                v18 = *(void **)(*((_QWORD *)&v30 + 1) + 8 * j);
                objc_msgSend(v18, "getConfiguredName");
                v19 = (void *)objc_claimAutoreleasedReturnValue();

                if (v19)
                {
                  objc_msgSend(v18, "getConfiguredName");
                  v20 = (void *)objc_claimAutoreleasedReturnValue();
                  v21 = -[HMDHome removeName:](self, "removeName:", v20);

                }
              }
              v15 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v30, v40, 16);
            }
            while (v15);
          }

        }
        v38 = CFSTR("kAccessoryUUID");
        objc_msgSend(v10, "uuid");
        v22 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v22, "UUIDString");
        v23 = (void *)objc_claimAutoreleasedReturnValue();
        v39 = v23;
        objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", &v39, &v38, 1);
        v24 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v28, "addObject:", v24);

      }
      v29 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v34, v41, 16);
    }
    while (v29);
  }

  return v28;
}

- (void)_removeAccessories:(id)a3 message:(id)a4
{
  id v6;
  id v7;
  uint64_t v8;
  void *v9;
  int v10;
  void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t i;
  void *v17;
  void *v18;
  HMDHome *v19;
  NSObject *v20;
  void *v21;
  id v22;
  void *v23;
  id v24;
  void *v25;
  HMDHome *v26;
  NSObject *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  void *v43;
  id obj;
  HMDHome *v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  const __CFString *v50;
  void *v51;
  uint8_t buf[4];
  void *v53;
  __int16 v54;
  id v55;
  _BYTE v56[128];
  uint64_t v57;

  v57 = *MEMORY[0x24BDAC8D0];
  v6 = a3;
  v7 = a4;
  v45 = self;
  -[HMDHome _removeAccessoriesCommon:](self, "_removeAccessoriesCommon:", v6);
  v8 = objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "name");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = objc_msgSend(v9, "isEqualToString:", CFSTR("kRemoveAccessoryRequestKey"));

  v42 = (void *)v8;
  v43 = v7;
  if (v10)
  {
    objc_msgSend(MEMORY[0x24BDBCED8], "dictionary");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "setObject:forKeyedSubscript:", v8, CFSTR("kAccessoriesListKey"));
    v12 = (void *)objc_msgSend(v11, "copy");
    objc_msgSend(v7, "respondWithPayload:", v12);

  }
  else
  {
    objc_msgSend(v7, "respondWithSuccess");
  }
  v48 = 0u;
  v49 = 0u;
  v46 = 0u;
  v47 = 0u;
  obj = v6;
  v13 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v46, v56, 16);
  if (v13)
  {
    v14 = v13;
    v15 = *(_QWORD *)v47;
    do
    {
      for (i = 0; i != v14; ++i)
      {
        if (*(_QWORD *)v47 != v15)
          objc_enumerationMutation(obj);
        v17 = *(void **)(*((_QWORD *)&v46 + 1) + 8 * i);
        v18 = (void *)MEMORY[0x227676638]();
        v19 = v45;
        HMFGetOSLogHandle();
        v20 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG))
        {
          HMFGetLogIdentifier();
          v21 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543618;
          v53 = v21;
          v54 = 2112;
          v55 = v17;
          _os_log_impl(&dword_2218F0000, v20, OS_LOG_TYPE_DEBUG, "%{public}@Removing accessory %@", buf, 0x16u);

        }
        objc_autoreleasePoolPop(v18);
        v22 = v17;
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0)
          v23 = v22;
        else
          v23 = 0;
        v24 = v23;

        if (v24)
        {
          if (objc_msgSend(v24, "isCurrentAccessory"))
          {
            v25 = (void *)MEMORY[0x227676638]();
            v26 = v19;
            HMFGetOSLogHandle();
            v27 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
            {
              HMFGetLogIdentifier();
              v28 = (void *)objc_claimAutoreleasedReturnValue();
              *(_DWORD *)buf = 138543618;
              v53 = v28;
              v54 = 2112;
              v55 = v22;
              _os_log_impl(&dword_2218F0000, v27, OS_LOG_TYPE_DEFAULT, "%{public}@Posting notification about current accessory removal %@", buf, 0x16u);

            }
            objc_autoreleasePoolPop(v25);
            -[HMDHome notificationCenter](v26, "notificationCenter");
            v29 = (void *)objc_claimAutoreleasedReturnValue();
            v50 = CFSTR("HMDLastRemovedCurrentAccessoryUUIDKey");
            objc_msgSend(v24, "uuid");
            v30 = (void *)objc_claimAutoreleasedReturnValue();
            v51 = v30;
            objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", &v51, &v50, 1);
            v31 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v29, "postNotificationName:object:userInfo:", CFSTR("HMDHomeManagerDidRemoveCurrentAccessoryNotification"), v26, v31);

          }
          -[HMDHome homeManager](v19, "homeManager");
          v32 = (void *)objc_claimAutoreleasedReturnValue();
          -[HMDHome capabilitiesAggregator](v19, "capabilitiesAggregator");
          v33 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v24, "uuid");
          v34 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v33, "didRemoveAccessory:", v34);

          objc_msgSend(v24, "uuid");
          v35 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v32, "accessorySetupMetricDispatcherForAccessoryUUID:", v35);
          v36 = (void *)objc_claimAutoreleasedReturnValue();

          objc_msgSend(v36, "markAccessoryRemoved");
          -[HMDHome fetchedAccessorySettingsSubscriber](v19, "fetchedAccessorySettingsSubscriber");
          v37 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v24, "uuid");
          v38 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v37, "unsubscribeForAccessory:", v38);

          objc_msgSend(v32, "legacyAccessoryPairingController");
          v39 = (void *)objc_claimAutoreleasedReturnValue();

          if (v39)
          {
            objc_msgSend(v32, "legacyAccessoryPairingController");
            v40 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v40, "handleMessage:from:", v43, v19);

          }
        }
        if (objc_msgSend(v22, "isPrimary"))
        {
          objc_msgSend(v22, "identifier");
          v41 = (void *)objc_claimAutoreleasedReturnValue();
          -[HMDHome _deregisterPairedAccessory:](v19, "_deregisterPairedAccessory:", v41);

        }
        objc_msgSend(v22, "setHome:", 0);
        objc_msgSend(v22, "unconfigure");

      }
      v14 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v46, v56, 16);
    }
    while (v14);
  }

}

- (void)_removeAllHomeContentsAndAccessoryPairings:(BOOL)a3 queue:(id)a4 completionHandler:(id)a5
{
  void *v7;
  NSObject *v8;
  void *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t i;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t j;
  void *v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t k;
  void *v24;
  void *v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t m;
  void *v30;
  void *v31;
  HMDHome *v32;
  NSObject *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  HMDHome *v38;
  NSObject *v39;
  void *v40;
  void *v41;
  void *v42;
  void *v43;
  NSObject *v44;
  id v45;
  _BOOL4 v46;
  HMDHome *val;
  NSObject *group;
  _QWORD aBlock[5];
  NSObject *v50;
  id v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  id location;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  uint8_t buf[4];
  void *v70;
  __int16 v71;
  void *v72;
  _BYTE v73[128];
  _BYTE v74[128];
  _BYTE v75[128];
  _BYTE v76[128];
  uint64_t v77;

  v46 = a3;
  v77 = *MEMORY[0x24BDAC8D0];
  v44 = a4;
  v45 = a5;
  v7 = (void *)MEMORY[0x227676638]();
  val = self;
  HMFGetOSLogHandle();
  v8 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543362;
    v70 = v9;
    _os_log_impl(&dword_2218F0000, v8, OS_LOG_TYPE_INFO, "%{public}@Removing all home contents and accessory pairings", buf, 0xCu);

  }
  objc_autoreleasePoolPop(v7);
  -[HMDHome walletKeyManager](val, "walletKeyManager");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "handleHomeWillBeRemoved");

  v67 = 0u;
  v68 = 0u;
  v65 = 0u;
  v66 = 0u;
  -[HMDHome triggers](val, "triggers");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v12 = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v65, v76, 16);
  if (v12)
  {
    v13 = *(_QWORD *)v66;
    do
    {
      for (i = 0; i != v12; ++i)
      {
        if (*(_QWORD *)v66 != v13)
          objc_enumerationMutation(v11);
        objc_msgSend(*(id *)(*((_QWORD *)&v65 + 1) + 8 * i), "invalidate", v44);
      }
      v12 = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v65, v76, 16);
    }
    while (v12);
  }

  v63 = 0u;
  v64 = 0u;
  v61 = 0u;
  v62 = 0u;
  v15 = (void *)-[NSMutableArray copy](val->_actionSets, "copy");
  v16 = objc_msgSend(v15, "countByEnumeratingWithState:objects:count:", &v61, v75, 16);
  if (v16)
  {
    v17 = *(_QWORD *)v62;
    do
    {
      for (j = 0; j != v16; ++j)
      {
        if (*(_QWORD *)v62 != v17)
          objc_enumerationMutation(v15);
        objc_msgSend(*(id *)(*((_QWORD *)&v61 + 1) + 8 * j), "invalidate", v44);
      }
      v16 = objc_msgSend(v15, "countByEnumeratingWithState:objects:count:", &v61, v75, 16);
    }
    while (v16);
  }

  v59 = 0u;
  v60 = 0u;
  v57 = 0u;
  v58 = 0u;
  -[HMDHome users](val, "users");
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  v20 = (void *)objc_msgSend(v19, "copy");

  v21 = objc_msgSend(v20, "countByEnumeratingWithState:objects:count:", &v57, v74, 16);
  if (v21)
  {
    v22 = *(_QWORD *)v58;
    do
    {
      for (k = 0; k != v21; ++k)
      {
        if (*(_QWORD *)v58 != v22)
          objc_enumerationMutation(v20);
        v24 = *(void **)(*((_QWORD *)&v57 + 1) + 8 * k);
        objc_msgSend(v24, "removeCloudData", v44);
        objc_msgSend(v24, "unconfigure");
      }
      v21 = objc_msgSend(v20, "countByEnumeratingWithState:objects:count:", &v57, v74, 16);
    }
    while (v21);
  }

  -[HMDHome residentSyncManager](val, "residentSyncManager");
  v25 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v25, "stop");

  -[HMDHome setResidentSyncManager:](val, "setResidentSyncManager:", 0);
  objc_initWeak(&location, val);
  group = dispatch_group_create();
  v52 = 0u;
  v53 = 0u;
  v54 = 0u;
  v55 = 0u;
  -[HMDHome accessories](val, "accessories");
  v26 = (void *)objc_claimAutoreleasedReturnValue();
  v27 = objc_msgSend(v26, "countByEnumeratingWithState:objects:count:", &v52, v73, 16);
  if (v27)
  {
    v28 = *(_QWORD *)v53;
    do
    {
      for (m = 0; m != v27; ++m)
      {
        if (*(_QWORD *)v53 != v28)
          objc_enumerationMutation(v26);
        v30 = *(void **)(*((_QWORD *)&v52 + 1) + 8 * m);
        if (objc_msgSend(v30, "isPrimary", v44))
        {
          v31 = (void *)MEMORY[0x227676638]();
          v32 = val;
          HMFGetOSLogHandle();
          v33 = (id)objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v33, OS_LOG_TYPE_INFO))
          {
            HMFGetLogIdentifier();
            v34 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 138543618;
            v70 = v34;
            v71 = 2112;
            v72 = v30;
            _os_log_impl(&dword_2218F0000, v33, OS_LOG_TYPE_INFO, "%{public}@Removing primary accessory %@", buf, 0x16u);

          }
          objc_autoreleasePoolPop(v31);
          dispatch_group_enter(group);
          aBlock[0] = MEMORY[0x24BDAC760];
          aBlock[1] = 3221225472;
          aBlock[2] = __78__HMDHome__removeAllHomeContentsAndAccessoryPairings_queue_completionHandler___block_invoke;
          aBlock[3] = &unk_24E7965D0;
          objc_copyWeak(&v51, &location);
          aBlock[4] = v30;
          v50 = group;
          v35 = _Block_copy(aBlock);
          v36 = v35;
          if (v46)
            -[HMDHome removeAllUsersAndCloudDataFromAccessory:completionHandler:](v32, "removeAllUsersAndCloudDataFromAccessory:completionHandler:", v30, v35);
          else
            (*((void (**)(void *))v35 + 2))(v35);

          objc_destroyWeak(&v51);
        }
      }
      v27 = objc_msgSend(v26, "countByEnumeratingWithState:objects:count:", &v52, v73, 16);
    }
    while (v27);
  }

  -[HMDHome _removeCloudData](val, "_removeCloudData");
  dispatch_group_notify(group, v44, v45);
  v37 = (void *)MEMORY[0x227676638]();
  v38 = val;
  HMFGetOSLogHandle();
  v39 = (id)objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v39, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v40 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543362;
    v70 = v40;
    _os_log_impl(&dword_2218F0000, v39, OS_LOG_TYPE_INFO, "%{public}@Removed all accessories", buf, 0xCu);

  }
  objc_autoreleasePoolPop(v37);
  +[HMDHomeLocalOperationalCertificateDataStore localOperationalCertDataStore](HMDHomeLocalOperationalCertificateDataStore, "localOperationalCertDataStore");
  v41 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHome fabric](v38, "fabric");
  v42 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v42, "fabricID");
  v43 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v41, "removeOperationalCertDataForFabricID:", v43);

  objc_destroyWeak(&location);
}

- (void)handleHomeWasRemoved
{
  id v2;

  -[HMDHome walletKeyManager](self, "walletKeyManager");
  v2 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "handleHomeWasRemoved");

}

- (void)_removeCloudData
{
  NSObject *v3;
  void *v4;
  void *v5;
  id v6;

  -[HMDHome workQueue](self, "workQueue");
  v3 = objc_claimAutoreleasedReturnValue();
  dispatch_assert_queue_V2(v3);

  -[HMDHome hindsightCloudShareManager](self, "hindsightCloudShareManager");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "removeZones");

  -[HMDHome userActionPredictionManager](self, "userActionPredictionManager");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "removeZones");

  -[HMDHome personDataManager](self, "personDataManager");
  v6 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "removeCloudDataDueToHomeRemoval");

}

- (void)notifyClientsOfAccessoryInfoUpdatedForAccessories:(id)a3
{
  id v4;
  NSObject *v5;
  id v6;
  _QWORD v7[5];
  id v8;

  v4 = a3;
  -[HMDHome workQueue](self, "workQueue");
  v5 = objc_claimAutoreleasedReturnValue();
  v7[0] = MEMORY[0x24BDAC760];
  v7[1] = 3221225472;
  v7[2] = __61__HMDHome_notifyClientsOfAccessoryInfoUpdatedForAccessories___block_invoke;
  v7[3] = &unk_24E79C268;
  v7[4] = self;
  v8 = v4;
  v6 = v4;
  dispatch_async(v5, v7);

}

- (void)_notifyClientsOfAccessoryInfoUpdatedForAccessories:(id)a3 shouldRefreshBadge:(BOOL)a4 withCompletion:(id)a5
{
  _BOOL4 v6;
  id v8;
  void (**v9)(id, _QWORD);
  uint64_t v10;
  char v11;
  uint64_t i;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  uint64_t v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  id v34;
  void *v35;
  id v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  void *v43;
  void *v44;
  void *v45;
  void *v46;
  void *v47;
  void *v48;
  HMDHome *v49;
  NSObject *v50;
  void *v51;
  void *v52;
  void *v53;
  void *v54;
  void *v55;
  void *v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  HMDHome *v60;
  _BOOL4 v61;
  void (**v62)(id, _QWORD);
  id v63;
  id obj;
  void *v65;
  void *v66;
  uint64_t v67;
  uint64_t v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  uint8_t buf[4];
  void *v74;
  __int16 v75;
  void *v76;
  __int16 v77;
  void *v78;
  _BYTE v79[128];
  uint64_t v80;

  v6 = a4;
  v80 = *MEMORY[0x24BDAC8D0];
  v8 = a3;
  v9 = (void (**)(id, _QWORD))a5;
  if (objc_msgSend(v8, "count"))
  {
    v60 = self;
    v61 = v6;
    v62 = v9;
    objc_msgSend(MEMORY[0x24BDBCED8], "dictionary");
    v65 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDBCED8], "dictionary");
    v66 = (void *)objc_claimAutoreleasedReturnValue();
    v69 = 0u;
    v70 = 0u;
    v71 = 0u;
    v72 = 0u;
    v63 = v8;
    obj = v8;
    v10 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v69, v79, 16);
    v58 = v10;
    v11 = 0;
    if (!v10)
      goto LABEL_36;
    v67 = *(_QWORD *)v70;
    v68 = v10;
    while (1)
    {
      for (i = 0; i != v68; ++i)
      {
        if (*(_QWORD *)v70 != v67)
          objc_enumerationMutation(obj);
        v13 = *(void **)(*((_QWORD *)&v69 + 1) + 8 * i);
        objc_msgSend(v13, "vendorInfo", v58);
        v14 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v13, "firmwareVersion");
        v15 = (void *)objc_claimAutoreleasedReturnValue();
        if (v15)
        {
          objc_msgSend(v14, "firmwareVersion");
          v16 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v13, "firmwareVersion");
          v17 = (void *)objc_claimAutoreleasedReturnValue();
          v18 = objc_msgSend(v16, "isGreaterThanVersion:", v17);

        }
        else
        {
          v18 = 0;
        }

        objc_msgSend(MEMORY[0x24BDBCED8], "dictionary");
        v19 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(MEMORY[0x24BDBCED8], "dictionary");
        v20 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v14, "appBundleID");
        v21 = (void *)objc_claimAutoreleasedReturnValue();

        if (v21)
        {
          objc_msgSend(v14, "appBundleID");
          v22 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v20, "setObject:forKeyedSubscript:", v22, CFSTR("kAccessoryVendorInfoBundleIDKey"));

          v11 = 1;
        }
        objc_msgSend(v14, "appStoreID");
        v23 = (void *)objc_claimAutoreleasedReturnValue();

        if (v23)
        {
          objc_msgSend(v14, "appStoreID");
          v24 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v20, "setObject:forKeyedSubscript:", v24, CFSTR("kAccessoryVendorInfoStoreIDKey"));

          v11 = 1;
        }
        objc_msgSend(MEMORY[0x24BDD16E0], "numberWithBool:", v18);
        v25 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v20, "setObject:forKeyedSubscript:", v25, CFSTR("kAccessoryVendorInfoFirmwareUpdateAvailableKey"));

        objc_msgSend(v13, "serialNumber");
        v26 = (void *)objc_claimAutoreleasedReturnValue();

        if (v26)
        {
          objc_msgSend(v13, "serialNumber");
          v27 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v20, "setObject:forKeyedSubscript:", v27, CFSTR("kAccessoryInfoSerialNumberKey"));

          v11 = 1;
        }
        objc_msgSend(v13, "manufacturer");
        v28 = (void *)objc_claimAutoreleasedReturnValue();

        if (v28)
        {
          objc_msgSend(v13, "manufacturer");
          v29 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v19, "setObject:forKeyedSubscript:", v29, CFSTR("kAccessoryInfoManufacturerKey"));

          objc_msgSend(v13, "manufacturer");
          v30 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v20, "setObject:forKeyedSubscript:", v30, CFSTR("kAccessoryInfoManufacturerKey"));

        }
        objc_msgSend(v13, "model");
        v31 = (void *)objc_claimAutoreleasedReturnValue();

        if (v31)
        {
          objc_msgSend(v13, "model");
          v32 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v19, "setObject:forKeyedSubscript:", v32, CFSTR("kAccessoryInfoModelKey"));

          objc_msgSend(v13, "model");
          v33 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v20, "setObject:forKeyedSubscript:", v33, CFSTR("kAccessoryInfoModelKey"));

        }
        v34 = v13;
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0)
          v35 = v34;
        else
          v35 = 0;
        v36 = v35;

        if (v36 && objc_msgSend(v36, "supportsCHIP"))
        {
          objc_msgSend(v34, "displayableFirmwareVersion");
          v37 = (void *)objc_claimAutoreleasedReturnValue();

          if (!v37)
            goto LABEL_30;
          objc_msgSend(v34, "displayableFirmwareVersion");
          v38 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v19, "setObject:forKeyedSubscript:", v38, CFSTR("kAccessoryInfoFirmwareVersionKey"));

          objc_msgSend(v34, "displayableFirmwareVersion");
          v39 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v20, "setObject:forKeyedSubscript:", v39, CFSTR("kAccessoryInfoFirmwareVersionKey"));
        }
        else
        {
          objc_msgSend(v34, "firmwareVersion");
          v40 = (void *)objc_claimAutoreleasedReturnValue();

          if (!v40)
            goto LABEL_30;
          objc_msgSend(v34, "firmwareVersion");
          v41 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v41, "shortVersionString");
          v42 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v19, "setObject:forKeyedSubscript:", v42, CFSTR("kAccessoryInfoFirmwareVersionKey"));

          objc_msgSend(v34, "firmwareVersion");
          v39 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v39, "shortVersionString");
          v43 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v20, "setObject:forKeyedSubscript:", v43, CFSTR("kAccessoryInfoFirmwareVersionKey"));

        }
LABEL_30:
        if (objc_msgSend(v20, "count"))
        {
          objc_msgSend(v34, "uuid");
          v44 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v44, "UUIDString");
          v45 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v66, "setObject:forKeyedSubscript:", v20, v45);

        }
        if (objc_msgSend(v19, "count"))
        {
          objc_msgSend(v34, "uuid");
          v46 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v46, "UUIDString");
          v47 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v65, "setObject:forKeyedSubscript:", v19, v47);

        }
      }
      v68 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v69, v79, 16);
      if (!v68)
      {
LABEL_36:

        v48 = (void *)MEMORY[0x227676638]();
        v49 = v60;
        HMFGetOSLogHandle();
        v50 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v50, OS_LOG_TYPE_INFO))
        {
          HMFGetLogIdentifier();
          v51 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543874;
          v74 = v51;
          v75 = 2112;
          v76 = v65;
          v77 = 2112;
          v78 = v66;
          _os_log_impl(&dword_2218F0000, v50, OS_LOG_TYPE_INFO, "%{public}@Notify clients that vendor info has updated: %@  entitledInfo %@", buf, 0x20u);

        }
        objc_autoreleasePoolPop(v48);
        if (objc_msgSend(v65, "count"))
        {
          objc_msgSend(MEMORY[0x24BE3F1B0], "messageWithName:messagePayload:", CFSTR("kAccessoryInfoUpdatedNotificationKey"), v65);
          v52 = (void *)objc_claimAutoreleasedReturnValue();
          -[HMDHome msgDispatcher](v49, "msgDispatcher");
          v53 = (void *)objc_claimAutoreleasedReturnValue();
          -[HMDHome messageTargetUUID](v49, "messageTargetUUID");
          v54 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v53, "sendMessage:target:", v52, v54);

        }
        if ((v11 & 1) != 0)
        {
          objc_msgSend(MEMORY[0x24BE3F1B0], "entitledMessageWithName:messagePayload:", CFSTR("kAccessoryInfoUpdatedNotificationKey"), v66);
          v55 = (void *)objc_claimAutoreleasedReturnValue();
          -[HMDHome msgDispatcher](v49, "msgDispatcher");
          v56 = (void *)objc_claimAutoreleasedReturnValue();
          -[HMDHome messageTargetUUID](v49, "messageTargetUUID");
          v57 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v56, "sendMessage:target:", v55, v57);

        }
        -[HMDHome _reevaluateAccessoryInfoWithBadgeRefresh:](v49, "_reevaluateAccessoryInfoWithBadgeRefresh:", v61, v58);
        v9 = v62;
        if (v62)
          ((void (**)(id, BOOL))v62)[2](v62, v59 != 0);

        v8 = v63;
        goto LABEL_47;
      }
    }
  }
  if (v9)
    v9[2](v9, 0);
LABEL_47:

}

- (void)_reevaluateAccessoryInfoWithBadgeRefresh:(BOOL)a3
{
  _BOOL4 v3;
  _BOOL4 v5;
  _BOOL4 v6;
  void *v7;
  HMDHome *v8;
  NSObject *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  id v15;
  void *v16;
  void *v17;
  int v18;
  void *v19;
  __int16 v20;
  void *v21;
  __int16 v22;
  void *v23;
  __int16 v24;
  void *v25;
  uint64_t v26;

  v3 = a3;
  v26 = *MEMORY[0x24BDAC8D0];
  v5 = -[HMDHome isOwnerUser](self, "isOwnerUser");
  v6 = -[HMDHome isSharedAdmin](self, "isSharedAdmin");
  v7 = (void *)MEMORY[0x227676638]();
  v8 = self;
  HMFGetOSLogHandle();
  v9 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    HMFBooleanToString();
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    HMFBooleanToString();
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    HMFBooleanToString();
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    v18 = 138544130;
    v19 = v10;
    v20 = 2112;
    v21 = v11;
    v22 = 2112;
    v23 = v12;
    v24 = 2112;
    v25 = v13;
    _os_log_impl(&dword_2218F0000, v9, OS_LOG_TYPE_INFO, "%{public}@Re-evaluating accessory info with shouldRefreshBadge: %@, isOwnerUser: %@, isSharedAdminUser:%@ ", (uint8_t *)&v18, 0x2Au);

  }
  objc_autoreleasePoolPop(v7);
  if (v5)
  {
    +[HMDBulletinBoard sharedBulletinBoard](HMDBulletinBoard, "sharedBulletinBoard");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    v15 = (id)objc_msgSend(v14, "updateBulletinForFirmwareUpdateInHome:", v8);

  }
  else if (!v6)
  {
    goto LABEL_7;
  }
  +[HMDBulletinBoard sharedBulletinBoard](HMDBulletinBoard, "sharedBulletinBoard");
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v16, "insertBulletinsForMatterFirmwareUpdateInstalledInHome:", v8);

LABEL_7:
  if (v3)
  {
    +[HMDBulletinBoard sharedBulletinBoard](HMDBulletinBoard, "sharedBulletinBoard");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v17, "refreshHomeBadgeNumber");

  }
}

- (void)reevaluateAccessoryInfo
{
  void *v3;
  HMDHome *v4;
  NSObject *v5;
  void *v6;
  NSObject *v7;
  _QWORD block[5];
  uint8_t buf[4];
  void *v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  v3 = (void *)MEMORY[0x227676638](self, a2);
  v4 = self;
  HMFGetOSLogHandle();
  v5 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543362;
    v10 = v6;
    _os_log_impl(&dword_2218F0000, v5, OS_LOG_TYPE_INFO, "%{public}@Re-evaluating accessory info", buf, 0xCu);

  }
  objc_autoreleasePoolPop(v3);
  -[HMDHome workQueue](v4, "workQueue");
  v7 = objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x24BDAC760];
  block[1] = 3221225472;
  block[2] = __34__HMDHome_reevaluateAccessoryInfo__block_invoke;
  block[3] = &unk_24E79C240;
  block[4] = v4;
  dispatch_async(v7, block);

}

- (void)evaluateNotificationConditionForCharacteristics:(id)a3 homePresence:(id)a4 completion:(id)a5
{
  id v8;
  id v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  void *v16;
  void *v17;
  int v18;
  void *v19;
  HMDHome *v20;
  NSObject *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  char v26;
  void *v27;
  HMDHome *v28;
  NSObject *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  HMDHome *v35;
  NSObject *v36;
  void *v37;
  void *v38;
  int v39;
  HMDHome *v40;
  NSObject *v41;
  _BOOL4 v42;
  void *v43;
  void *v44;
  void *v45;
  void *v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t i;
  void *v52;
  void *v53;
  void *v54;
  void *v55;
  void *v56;
  void *v57;
  HMDHome *v58;
  NSObject *v59;
  void *v60;
  id v61;
  id v62;
  void *v63;
  id v64;
  void *v65;
  void *context;
  uint64_t v67;
  uint64_t v68;
  id obj;
  HMDHome *v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  uint8_t v79[128];
  uint8_t buf[4];
  void *v81;
  __int16 v82;
  id v83;
  __int16 v84;
  void *v85;
  const __CFString *v86;
  void *v87;
  _BYTE v88[128];
  uint64_t v89;

  v89 = *MEMORY[0x24BDAC8D0];
  v8 = a3;
  v9 = a4;
  v10 = a5;
  if (v10)
  {
    if (-[HMDHome bulletinNotificationsSupported](self, "bulletinNotificationsSupported"))
    {
      v61 = v10;
      objc_msgSend(MEMORY[0x24BDBCED8], "dictionaryWithCapacity:", objc_msgSend(v8, "count"));
      v63 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x24BDBCEB8], "arrayWithCapacity:", objc_msgSend(v8, "count"));
      v65 = (void *)objc_claimAutoreleasedReturnValue();
      v75 = 0u;
      v76 = 0u;
      v77 = 0u;
      v78 = 0u;
      v62 = v8;
      obj = v8;
      v11 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v75, v88, 16);
      v64 = v9;
      v70 = self;
      if (v11)
      {
        v12 = v11;
        v13 = *(_QWORD *)v76;
        v67 = *(_QWORD *)v76;
        do
        {
          v14 = 0;
          v68 = v12;
          do
          {
            if (*(_QWORD *)v76 != v13)
              objc_enumerationMutation(obj);
            v15 = *(void **)(*((_QWORD *)&v75 + 1) + 8 * v14);
            objc_msgSend(v15, "service");
            v16 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v16, "bulletinBoardNotification");
            v17 = (void *)objc_claimAutoreleasedReturnValue();
            v18 = objc_msgSend(v17, "isEnabled");

            if (v18)
            {
              v19 = (void *)MEMORY[0x227676638]();
              v20 = self;
              HMFGetOSLogHandle();
              v21 = objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
              {
                HMFGetLogIdentifier();
                v22 = (void *)objc_claimAutoreleasedReturnValue();
                *(_DWORD *)buf = 138543618;
                v81 = v22;
                v82 = 2112;
                v83 = v15;
                _os_log_impl(&dword_2218F0000, v21, OS_LOG_TYPE_INFO, "%{public}@Notification is enabled for characteristic %@.", buf, 0x16u);

              }
              objc_autoreleasePoolPop(v19);
              objc_msgSend(v16, "bulletinBoardNotification");
              v23 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v23, "condition");
              v24 = (void *)objc_claimAutoreleasedReturnValue();

              if (v24)
              {
                -[HMDHome predicateUtility](v20, "predicateUtility");
                v25 = (void *)objc_claimAutoreleasedReturnValue();
                v26 = objc_msgSend(v25, "containsPresenceEvents:", v24);
                if (v9 || (v26 & 1) == 0)
                {
                  objc_msgSend(v25, "rewritePredicate:currentCharacteristicInPredicate:characteristicsToRead:homePresence:", v24, 0, 0, v9);
                  v32 = (void *)objc_claimAutoreleasedReturnValue();
                  v86 = CFSTR("THIS_OBJECT");
                  v87 = v25;
                  objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", &v87, &v86, 1);
                  v38 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend(v32, "allowEvaluation");
                  v39 = objc_msgSend(v32, "evaluateWithObject:substitutionVariables:", v25, v38);
                  context = (void *)MEMORY[0x227676638]();
                  v40 = v20;
                  HMFGetOSLogHandle();
                  v41 = objc_claimAutoreleasedReturnValue();
                  v42 = os_log_type_enabled(v41, OS_LOG_TYPE_INFO);
                  if (v39)
                  {
                    if (v42)
                    {
                      HMFGetLogIdentifier();
                      v43 = (void *)objc_claimAutoreleasedReturnValue();
                      *(_DWORD *)buf = 138543874;
                      v81 = v43;
                      v82 = 2112;
                      v83 = v24;
                      v84 = 2112;
                      v85 = v15;
                      _os_log_impl(&dword_2218F0000, v41, OS_LOG_TYPE_INFO, "%{public}@Condition %@ for characteristic (%@) evaluates to true, posting bulletin for it.", buf, 0x20u);

                    }
                    objc_autoreleasePoolPop(context);
                    objc_msgSend(v65, "addObject:", v15);
                  }
                  else
                  {
                    if (v42)
                    {
                      HMFGetLogIdentifier();
                      v44 = (void *)objc_claimAutoreleasedReturnValue();
                      *(_DWORD *)buf = 138543874;
                      v81 = v44;
                      v82 = 2112;
                      v83 = v24;
                      v84 = 2112;
                      v85 = v15;
                      _os_log_impl(&dword_2218F0000, v41, OS_LOG_TYPE_INFO, "%{public}@Condition %@ for characteristic (%@) evaluates to false, not posting bulletin for it.", buf, 0x20u);

                    }
                    objc_autoreleasePoolPop(context);
                  }

                  v9 = v64;
                }
                else
                {
                  v27 = (void *)MEMORY[0x227676638]();
                  v28 = v20;
                  HMFGetOSLogHandle();
                  v29 = objc_claimAutoreleasedReturnValue();
                  if (os_log_type_enabled(v29, OS_LOG_TYPE_INFO))
                  {
                    HMFGetLogIdentifier();
                    v30 = (void *)objc_claimAutoreleasedReturnValue();
                    *(_DWORD *)buf = 138543874;
                    v81 = v30;
                    v82 = 2112;
                    v83 = v24;
                    v84 = 2112;
                    v85 = v15;
                    _os_log_impl(&dword_2218F0000, v29, OS_LOG_TYPE_INFO, "%{public}@Condition %@ contains presence and no homePresence presents, delaying bulletin for characteristic %@", buf, 0x20u);

                    v9 = v64;
                  }

                  objc_autoreleasePoolPop(v27);
                  objc_msgSend(v16, "uuid");
                  v31 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend(v63, "objectForKeyedSubscript:", v31);
                  v32 = (void *)objc_claimAutoreleasedReturnValue();

                  if (!v32)
                  {
                    objc_msgSend(MEMORY[0x24BDBCEB8], "array");
                    v32 = (void *)objc_claimAutoreleasedReturnValue();
                    objc_msgSend(v16, "uuid");
                    v33 = (void *)objc_claimAutoreleasedReturnValue();
                    objc_msgSend(v63, "setObject:forKeyedSubscript:", v32, v33);

                  }
                  objc_msgSend(v32, "addObject:", v15);
                }
                v12 = v68;

                self = v70;
                v13 = v67;
              }
              else
              {
                v34 = (void *)MEMORY[0x227676638]();
                v35 = v20;
                HMFGetOSLogHandle();
                v36 = objc_claimAutoreleasedReturnValue();
                if (os_log_type_enabled(v36, OS_LOG_TYPE_INFO))
                {
                  HMFGetLogIdentifier();
                  v37 = (void *)objc_claimAutoreleasedReturnValue();
                  *(_DWORD *)buf = 138543618;
                  v81 = v37;
                  v82 = 2112;
                  v83 = v15;
                  _os_log_impl(&dword_2218F0000, v36, OS_LOG_TYPE_INFO, "%{public}@No condition is present in chr (%@)", buf, 0x16u);

                  v13 = v67;
                }

                objc_autoreleasePoolPop(v34);
                objc_msgSend(v65, "addObject:", v15);
                v12 = v68;
              }

            }
            ++v14;
          }
          while (v12 != v14);
          v12 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v75, v88, 16);
        }
        while (v12);
      }

      v45 = v65;
      v10 = v61;
      if (objc_msgSend(v65, "count"))
        (*((void (**)(id, _QWORD, void *))v61 + 2))(v61, 0, v65);
      v46 = v63;
      if (objc_msgSend(v63, "count"))
      {
        v73 = 0u;
        v74 = 0u;
        v71 = 0u;
        v72 = 0u;
        objc_msgSend(v63, "allValues");
        v47 = (void *)objc_claimAutoreleasedReturnValue();
        v48 = objc_msgSend(v47, "countByEnumeratingWithState:objects:count:", &v71, v79, 16);
        if (v48)
        {
          v49 = v48;
          v50 = *(_QWORD *)v72;
          do
          {
            for (i = 0; i != v49; ++i)
            {
              if (*(_QWORD *)v72 != v50)
                objc_enumerationMutation(v47);
              v52 = *(void **)(*((_QWORD *)&v71 + 1) + 8 * i);
              objc_msgSend(v52, "firstObject");
              v53 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v53, "service");
              v54 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v54, "bulletinBoardNotification");
              v55 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v55, "condition");
              v56 = (void *)objc_claimAutoreleasedReturnValue();
              -[HMDHome dispatchRequestToEvaluateCondition:forCharacteristics:completion:](v70, "dispatchRequestToEvaluateCondition:forCharacteristics:completion:", v56, v52, v61);

            }
            v49 = objc_msgSend(v47, "countByEnumeratingWithState:objects:count:", &v71, v79, 16);
          }
          while (v49);
        }

        v46 = v63;
        v9 = v64;
        v45 = v65;
      }

      v8 = v62;
    }
    else
    {
      v57 = (void *)MEMORY[0x227676638]();
      v58 = self;
      HMFGetOSLogHandle();
      v59 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v59, OS_LOG_TYPE_DEBUG))
      {
        HMFGetLogIdentifier();
        v60 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        v81 = v60;
        v82 = 2112;
        v83 = v8;
        _os_log_impl(&dword_2218F0000, v59, OS_LOG_TYPE_DEBUG, "%{public}@Bulletin notifications are not supported, skipping evaluating bulletin for characteristics: %@", buf, 0x16u);

      }
      objc_autoreleasePoolPop(v57);
      (*((void (**)(id, _QWORD, _QWORD))v10 + 2))(v10, 0, MEMORY[0x24BDBD1A8]);
    }
  }

}

- (void)dispatchRequestToEvaluateCondition:(id)a3 forCharacteristics:(id)a4 completion:(id)a5
{
  id v8;
  id v9;
  void (**v10)(id, _QWORD, id);
  void *v11;
  int v12;
  void *v13;
  HMDHome *v14;
  NSObject *v15;
  void *v16;
  void *v17;
  void *v18;
  int v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  HMDRemoteDeviceMessageDestination *v27;
  void *v28;
  void *v29;
  void *v30;
  id v31;
  void *v32;
  HMDHome *v33;
  NSObject *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  HMDHome *v39;
  NSObject *v40;
  void *v41;
  void *v42;
  HMDPredicateUtilities *v43;
  HMDRemoteDeviceMessageDestination *v44;
  void *v45;
  void *v46;
  void *v47;
  void *v48;
  _QWORD v49[4];
  id v50;
  id v51;
  id v52;
  void (**v53)(id, _QWORD, id);
  id v54;
  id location;
  _QWORD v56[2];
  _QWORD v57[2];
  uint8_t buf[4];
  void *v59;
  __int16 v60;
  id v61;
  uint64_t v62;

  v62 = *MEMORY[0x24BDAC8D0];
  v8 = a3;
  v9 = a4;
  v10 = (void (**)(id, _QWORD, id))a5;
  if (v10 && objc_msgSend(v9, "count"))
  {
    -[HMDHome primaryResident](self, "primaryResident");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v12 = objc_msgSend(v11, "isCurrentDevice");

    if (v12)
    {
      v13 = (void *)MEMORY[0x227676638]();
      v14 = self;
      HMFGetOSLogHandle();
      v15 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v16 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543362;
        v59 = v16;
        _os_log_impl(&dword_2218F0000, v15, OS_LOG_TYPE_INFO, "%{public}@Current device is the resident device itself, evaluating locally.", buf, 0xCu);

      }
      objc_autoreleasePoolPop(v13);
      if (-[HMDHome evaluatePredicate:](v14, "evaluatePredicate:", v8))
        v10[2](v10, 0, v9);
    }
    else
    {
      -[HMDHome primaryResident](self, "primaryResident");
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v17, "device");
      v48 = (void *)objc_claimAutoreleasedReturnValue();

      -[HMDHome primaryResident](self, "primaryResident");
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      v19 = objc_msgSend(v18, "supportsSharedEventTriggerActivation");

      if ((v19 & 1) != 0)
      {
        v20 = (void *)MEMORY[0x24BDD17C8];
        -[HMDHome logIdentifier](self, "logIdentifier");
        v21 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v20, "stringWithFormat:", CFSTR("Bulletin-%@"), v21);
        v47 = (void *)objc_claimAutoreleasedReturnValue();

        v43 = -[HMDPredicateUtilities initWithHome:logIdentifier:]([HMDPredicateUtilities alloc], "initWithHome:logIdentifier:", self, v47);
        -[HMDPredicateUtilities rewritePredicateForDaemon:message:](v43, "rewritePredicateForDaemon:message:", v8, 0);
        v46 = (void *)objc_claimAutoreleasedReturnValue();
        v56[0] = CFSTR("kPredicateEvaluatePredicateDataKey");
        encodeRootObject();
        v22 = (void *)objc_claimAutoreleasedReturnValue();
        v57[0] = v22;
        v56[1] = CFSTR("serviceUUID");
        objc_msgSend(v9, "firstObject");
        v23 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v23, "service");
        v24 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v24, "uuid");
        v25 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v25, "UUIDString");
        v26 = (void *)objc_claimAutoreleasedReturnValue();
        v57[1] = v26;
        objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v57, v56, 2);
        v45 = (void *)objc_claimAutoreleasedReturnValue();

        v27 = [HMDRemoteDeviceMessageDestination alloc];
        -[HMDHome uuid](self, "uuid");
        v28 = (void *)objc_claimAutoreleasedReturnValue();
        v44 = -[HMDRemoteDeviceMessageDestination initWithTarget:device:](v27, "initWithTarget:device:", v28, v48);

        +[HMDRemoteMessage secureMessageWithName:destination:messagePayload:](HMDRemoteMessage, "secureMessageWithName:destination:messagePayload:", CFSTR("kPredicateEvaluatePredicateRequestKey"), v44, v45);
        v29 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v29, "identifier");
        v30 = (void *)objc_claimAutoreleasedReturnValue();
        objc_initWeak(&location, self);
        v49[0] = MEMORY[0x24BDAC760];
        v49[1] = 3221225472;
        v49[2] = __76__HMDHome_dispatchRequestToEvaluateCondition_forCharacteristics_completion___block_invoke;
        v49[3] = &unk_24E777BC8;
        objc_copyWeak(&v54, &location);
        v31 = v30;
        v50 = v31;
        v51 = v8;
        v52 = v9;
        v53 = v10;
        v32 = (void *)MEMORY[0x227676638](objc_msgSend(v29, "setResponseHandler:", v49));
        v33 = self;
        HMFGetOSLogHandle();
        v34 = (id)objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v34, OS_LOG_TYPE_INFO))
        {
          HMFGetLogIdentifier();
          v35 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543618;
          v59 = v35;
          v60 = 2114;
          v61 = v31;
          _os_log_impl(&dword_2218F0000, v34, OS_LOG_TYPE_INFO, "%{public}@Sending message with identifier %{public}@ to evaluate bulletin condition to resident", buf, 0x16u);

        }
        objc_autoreleasePoolPop(v32);
        -[HMDHome homeManager](v33, "homeManager");
        v36 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v36, "messageDispatcher");
        v37 = (void *)objc_claimAutoreleasedReturnValue();

        objc_msgSend(v37, "sendMessage:completionHandler:", v29, 0);
        objc_destroyWeak(&v54);
        objc_destroyWeak(&location);

      }
      else
      {
        v38 = (void *)MEMORY[0x227676638]();
        v39 = self;
        HMFGetOSLogHandle();
        v40 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v40, OS_LOG_TYPE_INFO))
        {
          HMFGetLogIdentifier();
          v41 = (void *)objc_claimAutoreleasedReturnValue();
          -[HMDHome primaryResident](v39, "primaryResident");
          v42 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543618;
          v59 = v41;
          v60 = 2112;
          v61 = v42;
          _os_log_impl(&dword_2218F0000, v40, OS_LOG_TYPE_INFO, "%{public}@Remote access device %@ is not capable of presence status. Directly send the notification.", buf, 0x16u);

        }
        objc_autoreleasePoolPop(v38);
        v10[2](v10, 0, v9);
      }

    }
  }

}

- (void)handleEvaluatePredicateMessage:(id)a3
{
  id v4;
  void *v5;
  uint64_t v6;
  void *v7;
  _BOOL8 v8;
  void *v9;
  void (**v10)(_QWORD, _QWORD, _QWORD);
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t i;
  id v19;
  void *v20;
  id v21;
  uint64_t v22;
  void *v23;
  void (**v24)(_QWORD, _QWORD, _QWORD);
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  _BYTE v34[128];
  const __CFString *v35;
  _QWORD v36[3];

  v36[1] = *MEMORY[0x24BDAC8D0];
  v4 = a3;
  objc_msgSend(v4, "predicateForKey:", CFSTR("kPredicateEvaluatePredicateDataKey"));
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "stringForKey:", CFSTR("serviceUUID"));
  v6 = objc_claimAutoreleasedReturnValue();
  v7 = (void *)v6;
  if (v5 && v6)
  {
    v8 = -[HMDHome evaluatePredicate:](self, "evaluatePredicate:", v5);
    objc_msgSend(v4, "responseHandler");
    v9 = (void *)objc_claimAutoreleasedReturnValue();

    if (v9)
    {
      objc_msgSend(v4, "responseHandler");
      v10 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
      v35 = CFSTR("kPredicateEvaluateResultKey");
      objc_msgSend(MEMORY[0x24BDD16E0], "numberWithBool:", v8);
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      v36[0] = v11;
      objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v36, &v35, 1);
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      ((void (**)(_QWORD, _QWORD, void *))v10)[2](v10, 0, v12);

    }
    v29 = v7;
    v13 = (void *)objc_msgSend(objc_alloc(MEMORY[0x24BDD1880]), "initWithUUIDString:", v7);
    v30 = 0u;
    v31 = 0u;
    v32 = 0u;
    v33 = 0u;
    -[HMDHome accessories](self, "accessories");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    v15 = objc_msgSend(v14, "countByEnumeratingWithState:objects:count:", &v30, v34, 16);
    if (v15)
    {
      v16 = v15;
      v17 = *(_QWORD *)v31;
      while (2)
      {
        for (i = 0; i != v16; ++i)
        {
          if (*(_QWORD *)v31 != v17)
            objc_enumerationMutation(v14);
          v19 = *(id *)(*((_QWORD *)&v30 + 1) + 8 * i);
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) != 0)
            v20 = v19;
          else
            v20 = 0;
          v21 = v20;

          objc_msgSend(v21, "serviceWithUUID:", v13);
          v22 = objc_claimAutoreleasedReturnValue();
          if (v22)
          {
            v26 = (void *)v22;
            objc_msgSend(v4, "remoteSourceDevice");
            v27 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v27, "remoteDestinationString");
            v28 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v26, "updatePresenceRequestTimeForDeviceWithDestination:", v28);

            goto LABEL_20;
          }

        }
        v16 = objc_msgSend(v14, "countByEnumeratingWithState:objects:count:", &v30, v34, 16);
        if (v16)
          continue;
        break;
      }
    }
LABEL_20:

    v7 = v29;
  }
  else
  {
    objc_msgSend(v4, "responseHandler");
    v23 = (void *)objc_claimAutoreleasedReturnValue();

    if (v23)
    {
      objc_msgSend(v4, "responseHandler");
      v24 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x24BDD1540], "hmErrorWithCode:", 3);
      v25 = (void *)objc_claimAutoreleasedReturnValue();
      ((void (**)(_QWORD, void *, _QWORD))v24)[2](v24, v25, 0);

    }
  }

}

- (BOOL)evaluatePredicate:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  char v10;
  void *v11;
  HMDHome *v12;
  NSObject *v13;
  void *v14;
  void *v15;
  int v17;
  void *v18;
  __int16 v19;
  id v20;
  __int16 v21;
  void *v22;
  __int16 v23;
  void *v24;
  const __CFString *v25;
  _QWORD v26[2];

  v26[1] = *MEMORY[0x24BDAC8D0];
  v4 = a3;
  -[HMDHome predicateUtility](self, "predicateUtility");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "rewritePredicate:currentCharacteristicInPredicate:characteristicsToRead:homePresence:", v4, 0, 0, 0);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  v25 = CFSTR("THIS_OBJECT");
  -[HMDHome predicateUtility](self, "predicateUtility");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v26[0] = v7;
  objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v26, &v25, 1);
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v6, "allowEvaluation");
  -[HMDHome predicateUtility](self, "predicateUtility");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = objc_msgSend(v6, "evaluateWithObject:substitutionVariables:", v9, v8);

  v11 = (void *)MEMORY[0x227676638]();
  v12 = self;
  HMFGetOSLogHandle();
  v13 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    HMFBooleanToString();
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    v17 = 138544130;
    v18 = v14;
    v19 = 2112;
    v20 = v4;
    v21 = 2112;
    v22 = v6;
    v23 = 2112;
    v24 = v15;
    _os_log_impl(&dword_2218F0000, v13, OS_LOG_TYPE_INFO, "%{public}@Evaluating predicate %@ (rewritten %@) with result %@", (uint8_t *)&v17, 0x2Au);

  }
  objc_autoreleasePoolPop(v11);

  return v10;
}

- (void)btleAccessoryReachabilityProbeTimer:(BOOL)a3
{
  NSObject *v5;
  _QWORD v6[5];
  BOOL v7;

  -[HMDHome workQueue](self, "workQueue");
  v5 = objc_claimAutoreleasedReturnValue();
  v6[0] = MEMORY[0x24BDAC760];
  v6[1] = 3221225472;
  v6[2] = __47__HMDHome_btleAccessoryReachabilityProbeTimer___block_invoke;
  v6[3] = &unk_24E7968C8;
  v6[4] = self;
  v7 = a3;
  dispatch_async(v5, v6);

}

- (void)resetAccessoryHashedRouteIdentifiers
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  _BYTE v11[128];
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v7 = 0u;
  v8 = 0u;
  v9 = 0u;
  v10 = 0u;
  -[HMDHome accessories](self, "accessories", 0);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v7, v11, 16);
  if (v3)
  {
    v4 = v3;
    v5 = *(_QWORD *)v8;
    do
    {
      v6 = 0;
      do
      {
        if (*(_QWORD *)v8 != v5)
          objc_enumerationMutation(v2);
        objc_msgSend(*(id *)(*((_QWORD *)&v7 + 1) + 8 * v6++), "resetHashedRoute");
      }
      while (v4 != v6);
      v4 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v7, v11, 16);
    }
    while (v4);
  }

}

- (void)_handleAccessoryReachabilityRegistrationAndEnable:(id)a3
{
  __handleAccessoryReachabilityRegistration(self, a3, 1);
}

- (void)_handleAccessoryReachabilityRegistration:(id)a3
{
  __handleAccessoryReachabilityRegistration(self, a3, 0);
}

- (void)_registerDeviceForReachabilityNotification:(id)a3 accessoryList:(id)a4
{
  id v6;
  id v7;
  void *v8;
  HMDHome *v9;
  NSObject *v10;
  void *v11;
  HMDDeviceRegistrationEntry *v12;
  void *v13;
  int v14;
  void *v15;
  __int16 v16;
  id v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  v6 = a3;
  v7 = a4;
  v8 = (void *)MEMORY[0x227676638](-[HMDHome _deregisterDeviceForReachabilityNotification:](self, "_deregisterDeviceForReachabilityNotification:", v6));
  v9 = self;
  HMFGetOSLogHandle();
  v10 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v14 = 138543618;
    v15 = v11;
    v16 = 2112;
    v17 = v6;
    _os_log_impl(&dword_2218F0000, v10, OS_LOG_TYPE_INFO, "%{public}@Registering device %@ for reachability notification", (uint8_t *)&v14, 0x16u);

  }
  objc_autoreleasePoolPop(v8);
  v12 = -[HMDDeviceRegistrationEntry initWithDevice:accessoryList:]([HMDDeviceRegistrationEntry alloc], "initWithDevice:accessoryList:", v6, v7);
  if (v12)
  {
    -[HMDHome reachabilityRegisteredDevices](v9, "reachabilityRegisteredDevices");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "addObject:", v12);

  }
}

- (void)_deregisterDeviceForReachabilityNotification:(id)a3
{
  id v4;
  void *v5;
  HMDHome *v6;
  NSObject *v7;
  void *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t i;
  void *v15;
  void *v16;
  int v17;
  void *v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint8_t v23[128];
  uint8_t buf[4];
  void *v25;
  __int16 v26;
  id v27;
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  v4 = a3;
  v5 = (void *)MEMORY[0x227676638]();
  v6 = self;
  HMFGetOSLogHandle();
  v7 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543618;
    v25 = v8;
    v26 = 2112;
    v27 = v4;
    _os_log_impl(&dword_2218F0000, v7, OS_LOG_TYPE_INFO, "%{public}@De-registering device %@ for reachability notification", buf, 0x16u);

  }
  objc_autoreleasePoolPop(v5);
  v21 = 0u;
  v22 = 0u;
  v19 = 0u;
  v20 = 0u;
  -[HMDHome reachabilityRegisteredDevices](v6, "reachabilityRegisteredDevices", 0);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = (void *)objc_msgSend(v9, "copy");

  v11 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v19, v23, 16);
  if (v11)
  {
    v12 = v11;
    v13 = *(_QWORD *)v20;
    do
    {
      for (i = 0; i != v12; ++i)
      {
        if (*(_QWORD *)v20 != v13)
          objc_enumerationMutation(v10);
        v15 = *(void **)(*((_QWORD *)&v19 + 1) + 8 * i);
        objc_msgSend(v15, "device");
        v16 = (void *)objc_claimAutoreleasedReturnValue();
        v17 = objc_msgSend(v16, "isEqual:", v4);

        if (v17)
        {
          -[HMDHome reachabilityRegisteredDevices](v6, "reachabilityRegisteredDevices");
          v18 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v18, "removeObject:", v15);

        }
      }
      v12 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v19, v23, 16);
    }
    while (v12);
  }

}

- (id)getReachabilityTupleForAccessoryUUID:(id)a3
{
  id v4;
  void *v5;
  id v6;
  uint64_t v7;
  void *i;
  void *v9;
  void *v10;
  char v11;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _BYTE v17[128];
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  v4 = a3;
  v13 = 0u;
  v14 = 0u;
  v15 = 0u;
  v16 = 0u;
  -[HMDHome remoteReachabilityNotificationPendingAccessories](self, "remoteReachabilityNotificationPendingAccessories", 0);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = (id)objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
  if (v6)
  {
    v7 = *(_QWORD *)v14;
    while (2)
    {
      for (i = 0; i != v6; i = (char *)i + 1)
      {
        if (*(_QWORD *)v14 != v7)
          objc_enumerationMutation(v5);
        v9 = *(void **)(*((_QWORD *)&v13 + 1) + 8 * (_QWORD)i);
        objc_msgSend(v9, "accessoryUUID");
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        v11 = objc_msgSend(v10, "isEqual:", v4);

        if ((v11 & 1) != 0)
        {
          v6 = v9;
          goto LABEL_11;
        }
      }
      v6 = (id)objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
      if (v6)
        continue;
      break;
    }
  }
LABEL_11:

  return v6;
}

- (void)_updateReachabilityChangeToRegisteredDevices:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  id v9;
  void *v10;
  id v11;
  int v12;
  uint64_t v13;
  void *v14;
  HMDHome *v15;
  NSObject *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  HMDHome *v28;
  NSObject *v29;
  void *v30;
  void *v31;
  int v32;
  void *v33;
  __int16 v34;
  id v35;
  __int16 v36;
  uint64_t v37;
  uint64_t v38;

  v38 = *MEMORY[0x24BDAC8D0];
  v4 = a3;
  objc_msgSend(v4, "uuid");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "UUIDString");
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  -[HMDHome getReachabilityTupleForAccessoryUUID:](self, "getReachabilityTupleForAccessoryUUID:", v6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = objc_msgSend(v4, "isReachable");
  v9 = v4;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v10 = v9;
  else
    v10 = 0;
  v11 = v10;

  if (v11)
  {
    objc_msgSend(v7, "setPreviouslySentSuspendedState:", objc_msgSend(v7, "currentSuspendedState"));
    objc_msgSend(v7, "setCurrentSuspendedState:", objc_msgSend(v11, "suspendedState"));
  }
  if (!v7)
  {
    +[HMDAccessoryReachabilityTuple tupleWithAccessoryUUID:reachable:](HMDAccessoryReachabilityTuple, "tupleWithAccessoryUUID:reachable:", v6, v8);
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v19, "setCurrentSuspendedState:", objc_msgSend(v11, "suspendedState"));
    -[HMDHome remoteReachabilityNotificationPendingAccessories](self, "remoteReachabilityNotificationPendingAccessories");
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v20, "addObject:", v19);

    -[HMDHome reachabilityNotificationTimer](self, "reachabilityNotificationTimer");
    v21 = (void *)objc_claimAutoreleasedReturnValue();

    if (!v21)
    {
      v22 = (void *)objc_msgSend(objc_alloc(MEMORY[0x24BE3F298]), "initWithTimeInterval:options:", 1, *(double *)&remoteReachabilityNotificationsDeferPeriod);
      -[HMDHome setReachabilityNotificationTimer:](self, "setReachabilityNotificationTimer:", v22);

      -[HMDHome workQueue](self, "workQueue");
      v23 = (void *)objc_claimAutoreleasedReturnValue();
      -[HMDHome reachabilityNotificationTimer](self, "reachabilityNotificationTimer");
      v24 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v24, "setDelegateQueue:", v23);

      -[HMDHome reachabilityNotificationTimer](self, "reachabilityNotificationTimer");
      v25 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v25, "setDelegate:", self);

      -[HMDHome reachabilityNotificationTimer](self, "reachabilityNotificationTimer");
      v26 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v26, "resume");

      v27 = (void *)MEMORY[0x227676638]();
      v28 = self;
      HMFGetOSLogHandle();
      v29 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v29, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v30 = (void *)objc_claimAutoreleasedReturnValue();
        -[HMDHome reachabilityNotificationTimer](v28, "reachabilityNotificationTimer");
        v31 = (void *)objc_claimAutoreleasedReturnValue();
        v32 = 138543874;
        v33 = v30;
        v34 = 2048;
        v35 = v31;
        v36 = 2048;
        v37 = remoteReachabilityNotificationsDeferPeriod;
        _os_log_impl(&dword_2218F0000, v29, OS_LOG_TYPE_INFO, "%{public}@Started reachability notification defer timer %p for %f sec", (uint8_t *)&v32, 0x20u);

      }
      objc_autoreleasePoolPop(v27);
    }
    goto LABEL_16;
  }
  objc_msgSend(v7, "setCurrentReachability:", v8);
  v12 = objc_msgSend(v7, "previouslySentReachability");
  if (v12 == objc_msgSend(v7, "currentReachability"))
  {
    v13 = objc_msgSend(v7, "previouslySentSuspendedState");
    if (v13 == objc_msgSend(v7, "currentSuspendedState"))
    {
      v14 = (void *)MEMORY[0x227676638]();
      v15 = self;
      HMFGetOSLogHandle();
      v16 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        HMFBooleanToString();
        v18 = (void *)objc_claimAutoreleasedReturnValue();
        v32 = 138543874;
        v33 = v17;
        v34 = 2112;
        v35 = v9;
        v36 = 2112;
        v37 = (uint64_t)v18;
        _os_log_impl(&dword_2218F0000, v16, OS_LOG_TYPE_INFO, "%{public}@Accessory %@ toggled reachability back to %@ ignoring", (uint8_t *)&v32, 0x20u);

      }
      objc_autoreleasePoolPop(v14);
      -[HMDHome remoteReachabilityNotificationPendingAccessories](v15, "remoteReachabilityNotificationPendingAccessories");
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v19, "removeObject:", v7);
LABEL_16:

    }
  }

}

- (void)_handleRemoteReachabilityNotificationTimerFired
{
  void *v3;
  HMDHome *v4;
  NSObject *v5;
  void *v6;
  void *v7;
  __int128 v8;
  unint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t i;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  id v25;
  void *v26;
  id v27;
  void *v28;
  void *v29;
  void *v30;
  unint64_t v31;
  void *v32;
  HMDHome *v33;
  NSObject *v34;
  void *v35;
  uint64_t v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  void *v43;
  void *v44;
  void *v45;
  void *v46;
  void *v47;
  void *v48;
  void *v49;
  void *v50;
  __int128 v51;
  id obj;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  uint64_t v56;
  id v57;
  HMDHome *v58;
  void *v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  _QWORD v68[2];
  _QWORD v69[2];
  uint8_t buf[4];
  void *v71;
  __int16 v72;
  uint64_t v73;
  __int16 v74;
  void *v75;
  _BYTE v76[128];
  _BYTE v77[128];
  uint64_t v78;

  v78 = *MEMORY[0x24BDAC8D0];
  v3 = (void *)MEMORY[0x227676638](self, a2);
  v4 = self;
  HMFGetOSLogHandle();
  v5 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHome remoteReachabilityNotificationPendingAccessories](v4, "remoteReachabilityNotificationPendingAccessories");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543618;
    v71 = v6;
    v72 = 2112;
    v73 = (uint64_t)v7;
    _os_log_impl(&dword_2218F0000, v5, OS_LOG_TYPE_INFO, "%{public}@Reachability notification timer fired, pending list: %@", buf, 0x16u);

  }
  objc_autoreleasePoolPop(v3);
  v66 = 0u;
  v67 = 0u;
  v64 = 0u;
  v65 = 0u;
  -[HMDHome reachabilityRegisteredDevices](v4, "reachabilityRegisteredDevices");
  obj = (id)objc_claimAutoreleasedReturnValue();
  v54 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v64, v77, 16);
  if (v54)
  {
    v53 = *(_QWORD *)v65;
    *(_QWORD *)&v8 = 138543874;
    v51 = v8;
    v9 = 0x24BDD1000uLL;
    v58 = v4;
    do
    {
      v10 = 0;
      do
      {
        if (*(_QWORD *)v65 != v53)
          objc_enumerationMutation(obj);
        v55 = *(void **)(*((_QWORD *)&v64 + 1) + 8 * v10);
        v56 = v10;
        v11 = (void *)MEMORY[0x24BDBCEB8];
        -[HMDHome remoteReachabilityNotificationPendingAccessories](v4, "remoteReachabilityNotificationPendingAccessories", v51);
        v12 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v11, "arrayWithCapacity:", objc_msgSend(v12, "count"));
        v59 = (void *)objc_claimAutoreleasedReturnValue();

        v62 = 0u;
        v63 = 0u;
        v60 = 0u;
        v61 = 0u;
        -[HMDHome accessories](v4, "accessories");
        v57 = (id)objc_claimAutoreleasedReturnValue();
        v13 = objc_msgSend(v57, "countByEnumeratingWithState:objects:count:", &v60, v76, 16);
        if (v13)
        {
          v14 = v13;
          v15 = *(_QWORD *)v61;
          do
          {
            for (i = 0; i != v14; ++i)
            {
              if (*(_QWORD *)v61 != v15)
                objc_enumerationMutation(v57);
              v17 = *(void **)(*((_QWORD *)&v60 + 1) + 8 * i);
              objc_msgSend(v17, "uuid");
              v18 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v18, "UUIDString");
              v19 = (void *)objc_claimAutoreleasedReturnValue();
              -[HMDHome getReachabilityTupleForAccessoryUUID:](v4, "getReachabilityTupleForAccessoryUUID:", v19);
              v20 = (void *)objc_claimAutoreleasedReturnValue();

              if (v20)
              {
                v21 = (void *)MEMORY[0x24BDBCED8];
                objc_msgSend(*(id *)(v9 + 1760), "numberWithBool:", objc_msgSend(v20, "currentReachability"));
                v22 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v20, "accessoryUUID");
                v23 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v21, "dictionaryWithObject:forKey:", v22, v23);
                v24 = (void *)objc_claimAutoreleasedReturnValue();

                v25 = v17;
                objc_opt_class();
                if ((objc_opt_isKindOfClass() & 1) != 0)
                  v26 = v25;
                else
                  v26 = 0;
                v27 = v26;

                objc_msgSend(v27, "identifier");
                v28 = (void *)objc_claimAutoreleasedReturnValue();

                if (v28)
                {
                  objc_msgSend(*(id *)(v9 + 1760), "numberWithUnsignedInteger:", objc_msgSend(v27, "suspendedState"));
                  v29 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend(v27, "identifier");
                  v30 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend(v24, "setObject:forKey:", v29, v30);

                }
                objc_msgSend(v59, "addObject:", v24);

                v4 = v58;
              }

            }
            v14 = objc_msgSend(v57, "countByEnumeratingWithState:objects:count:", &v60, v76, 16);
          }
          while (v14);
        }

        if (objc_msgSend(v59, "count"))
        {
          v31 = v9;
          v32 = (void *)MEMORY[0x227676638]();
          v33 = v4;
          HMFGetOSLogHandle();
          v34 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v34, OS_LOG_TYPE_INFO))
          {
            HMFGetLogIdentifier();
            v35 = (void *)objc_claimAutoreleasedReturnValue();
            v36 = objc_msgSend(v59, "count");
            objc_msgSend(v55, "device");
            v37 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v37, "remoteDestinationString");
            v38 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = v51;
            v71 = v35;
            v72 = 2048;
            v73 = v36;
            v74 = 2112;
            v75 = v38;
            _os_log_impl(&dword_2218F0000, v34, OS_LOG_TYPE_INFO, "%{public}@Sending current reachability for %tu accessories to destination:%@", buf, 0x20u);

          }
          objc_autoreleasePoolPop(v32);
          v68[0] = CFSTR("kAccessoriesListKey");
          v39 = (void *)objc_msgSend(v59, "copy");
          v68[1] = CFSTR("kHomeUUID");
          v69[0] = v39;
          -[HMDHome uuid](v33, "uuid");
          v40 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v40, "UUIDString");
          v41 = (void *)objc_claimAutoreleasedReturnValue();
          v69[1] = v41;
          objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v69, v68, 2);
          v42 = (void *)objc_claimAutoreleasedReturnValue();

          objc_msgSend(MEMORY[0x24BE3F1B0], "messageWithName:identifier:messagePayload:", CFSTR("kRemoteReachabilityChangedNotificationKey"), 0, v42);
          v43 = (void *)objc_claimAutoreleasedReturnValue();
          -[HMDHome homeManager](v33, "homeManager");
          v44 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v44, "messageDispatcher");
          v45 = (void *)objc_claimAutoreleasedReturnValue();
          -[HMDHome uuid](v33, "uuid");
          v46 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v55, "device");
          v47 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v47, "remoteDestinationString");
          v48 = (void *)objc_claimAutoreleasedReturnValue();
          -[HMDHome workQueue](v33, "workQueue");
          v49 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v45, "sendSecureMessage:target:userID:destination:responseQueue:responseHandler:", v43, v46, 0, v48, v49, 0);

          v4 = v58;
          v9 = v31;
        }

        v10 = v56 + 1;
      }
      while (v56 + 1 != v54);
      v54 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v64, v77, 16);
    }
    while (v54);
  }

  -[HMDHome remoteReachabilityNotificationPendingAccessories](v4, "remoteReachabilityNotificationPendingAccessories");
  v50 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v50, "removeAllObjects");

  -[HMDHome setReachabilityNotificationTimer:](v4, "setReachabilityNotificationTimer:", 0);
}

- (void)_handleAccessoryReachabilityChange:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  char v8;
  void *v9;
  HMDHome *v10;
  NSObject *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  uint64_t v17;
  void *v18;
  uint64_t i;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  HMDHome *v25;
  NSObject *v26;
  void *v27;
  id v28;
  void *v29;
  id v30;
  void *v31;
  void *v32;
  void *v33;
  uint64_t v34;
  HMDHome *v35;
  NSObject *v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  void (**v42)(_QWORD, _QWORD, _QWORD);
  void *v43;
  void *v44;
  void *v45;
  BOOL v46;
  void *v47;
  HMDHome *v48;
  NSObject *v49;
  void *v50;
  id v51;
  void *v52;
  void *v53;
  void *v54;
  void *v55;
  void *v56;
  void *v57;
  void *v58;
  void *v59;
  void *v60;
  void *v61;
  void *v62;
  void *v63;
  void *v64;
  id obj;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  void *v69;
  uint64_t v70;
  id v71;
  void *v72;
  void *context;
  uint64_t v74;
  HMDHome *v75;
  uint64_t v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  const __CFString *v85;
  void *v86;
  uint8_t buf[4];
  void *v88;
  __int16 v89;
  void *v90;
  __int16 v91;
  void *v92;
  __int16 v93;
  void *v94;
  _BYTE v95[128];
  _BYTE v96[128];
  uint64_t v97;

  v97 = *MEMORY[0x24BDAC8D0];
  v4 = a3;
  objc_msgSend(v4, "stringForKey:", CFSTR("kHomeUUID"));
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHome uuid](self, "uuid");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "UUIDString");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = objc_msgSend(v5, "isEqualToString:", v7);

  v75 = self;
  v63 = v5;
  if ((v8 & 1) != 0)
  {
    v62 = 0;
  }
  else
  {
    v9 = (void *)MEMORY[0x227676638]();
    v10 = self;
    HMFGetOSLogHandle();
    v11 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      -[HMDHome uuid](v10, "uuid");
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v13, "UUIDString");
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543874;
      v88 = v12;
      v89 = 2112;
      v90 = v5;
      v91 = 2112;
      v92 = v14;
      _os_log_impl(&dword_2218F0000, v11, OS_LOG_TYPE_ERROR, "%{public}@Home does not match, received: %@, current: %@", buf, 0x20u);

    }
    objc_autoreleasePoolPop(v9);
    objc_msgSend(MEMORY[0x24BDD1540], "errorWithDomain:code:userInfo:", *MEMORY[0x24BDD5BD8], 2, 0);
    v62 = (void *)objc_claimAutoreleasedReturnValue();
  }
  v64 = v4;
  objc_msgSend(v4, "messagePayload");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v15, "hmf_arrayForKey:", CFSTR("kAccessoriesListKey"));
  v16 = (void *)objc_claimAutoreleasedReturnValue();

  v83 = 0u;
  v84 = 0u;
  v81 = 0u;
  v82 = 0u;
  obj = v16;
  v67 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v81, v96, 16);
  if (v67)
  {
    v66 = *(_QWORD *)v82;
    do
    {
      v17 = 0;
      do
      {
        if (*(_QWORD *)v82 != v66)
          objc_enumerationMutation(obj);
        v68 = v17;
        v18 = *(void **)(*((_QWORD *)&v81 + 1) + 8 * v17);
        v77 = 0u;
        v78 = 0u;
        v79 = 0u;
        v80 = 0u;
        -[HMDHome accessories](v75, "accessories");
        v71 = (id)objc_claimAutoreleasedReturnValue();
        v76 = objc_msgSend(v71, "countByEnumeratingWithState:objects:count:", &v77, v95, 16);
        if (v76)
        {
          v74 = *(_QWORD *)v78;
          v72 = v18;
          do
          {
            for (i = 0; i != v76; ++i)
            {
              if (*(_QWORD *)v78 != v74)
                objc_enumerationMutation(v71);
              v20 = *(void **)(*((_QWORD *)&v77 + 1) + 8 * i);
              objc_msgSend(v20, "uuid");
              v21 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v21, "UUIDString");
              v22 = (void *)objc_claimAutoreleasedReturnValue();

              objc_msgSend(v18, "objectForKeyedSubscript:", v22);
              v23 = (void *)objc_claimAutoreleasedReturnValue();
              if (v23)
              {
                v24 = (void *)MEMORY[0x227676638]();
                v25 = v75;
                HMFGetOSLogHandle();
                v26 = objc_claimAutoreleasedReturnValue();
                if (os_log_type_enabled(v26, OS_LOG_TYPE_INFO))
                {
                  HMFGetLogIdentifier();
                  v27 = (void *)objc_claimAutoreleasedReturnValue();
                  *(_DWORD *)buf = 138543874;
                  v88 = v27;
                  v89 = 2112;
                  v90 = v22;
                  v91 = 2112;
                  v92 = v23;
                  _os_log_impl(&dword_2218F0000, v26, OS_LOG_TYPE_INFO, "%{public}@Setting remote reachability for accessory: %@ to: %@", buf, 0x20u);

                }
                objc_autoreleasePoolPop(v24);
                objc_msgSend(v20, "setRemotelyReachable:", objc_msgSend(v23, "BOOLValue"));
              }
              v28 = v20;
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0)
                v29 = v28;
              else
                v29 = 0;
              v30 = v29;

              objc_msgSend(v30, "identifier");
              v31 = (void *)objc_claimAutoreleasedReturnValue();

              if (v31)
              {
                objc_msgSend(v30, "identifier");
                v32 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v18, "objectForKeyedSubscript:", v32);
                v33 = (void *)objc_claimAutoreleasedReturnValue();

                if (v33)
                {
                  v34 = objc_msgSend(v33, "unsignedIntegerValue");
                  context = (void *)MEMORY[0x227676638]();
                  v35 = v75;
                  HMFGetOSLogHandle();
                  v36 = objc_claimAutoreleasedReturnValue();
                  if (os_log_type_enabled(v36, OS_LOG_TYPE_DEBUG))
                  {
                    HMFGetLogIdentifier();
                    v37 = (void *)objc_claimAutoreleasedReturnValue();
                    objc_msgSend(v28, "identifier");
                    v38 = (void *)objc_claimAutoreleasedReturnValue();
                    objc_msgSend(v30, "suspendedState");
                    HAPAccessorySuspendedStateDescription();
                    v69 = v22;
                    v39 = (void *)objc_claimAutoreleasedReturnValue();
                    HAPAccessorySuspendedStateDescription();
                    v70 = v34;
                    v40 = (void *)objc_claimAutoreleasedReturnValue();
                    *(_DWORD *)buf = 138544130;
                    v88 = v37;
                    v89 = 2112;
                    v90 = v38;
                    v91 = 2112;
                    v92 = v39;
                    v93 = 2112;
                    v94 = v40;
                    _os_log_impl(&dword_2218F0000, v36, OS_LOG_TYPE_DEBUG, "%{public}@Handle Reachability change. Setting suspended state of accessory: %@ from '%@' to '%@'", buf, 0x2Au);

                    v34 = v70;
                    v22 = v69;

                  }
                  objc_autoreleasePoolPop(context);
                  objc_msgSend(v30, "setSuspendedState:shouldNotify:", v34, 0);
                }

                v18 = v72;
              }

            }
            v76 = objc_msgSend(v71, "countByEnumeratingWithState:objects:count:", &v77, v95, 16);
          }
          while (v76);
        }

        v17 = v68 + 1;
      }
      while (v68 + 1 != v67);
      v67 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v81, v96, 16);
    }
    while (v67);
  }

  objc_msgSend(v64, "responseHandler");
  v41 = (void *)objc_claimAutoreleasedReturnValue();

  if (v41)
  {
    objc_msgSend(v64, "responseHandler");
    v42 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
    ((void (**)(_QWORD, void *, _QWORD))v42)[2](v42, v62, 0);

  }
  objc_msgSend(v64, "remoteSourceDevice");
  v43 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHome primaryResident](v75, "primaryResident");
  v44 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v44, "device");
  v45 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v43, "isEqual:", v45))
  {
    v46 = -[HMDHome currentRemoteReachabilityRegistration](v75, "currentRemoteReachabilityRegistration");

    if (v46)
      goto LABEL_42;
  }
  else
  {

  }
  v47 = (void *)MEMORY[0x227676638]();
  v48 = v75;
  HMFGetOSLogHandle();
  v49 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v49, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v50 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543618;
    v88 = v50;
    v89 = 2112;
    v90 = v43;
    _os_log_impl(&dword_2218F0000, v49, OS_LOG_TYPE_INFO, "%{public}@De-registering stale remote reachability for accessories with device = %@", buf, 0x16u);

  }
  objc_autoreleasePoolPop(v47);
  v51 = objc_alloc(MEMORY[0x24BE3F1B0]);
  objc_msgSend(MEMORY[0x24BE3F1B8], "allMessageDestinations");
  v52 = (void *)objc_claimAutoreleasedReturnValue();
  v85 = CFSTR("kHomeUUID");
  -[HMDHome uuid](v48, "uuid");
  v53 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v53, "UUIDString");
  v54 = (void *)objc_claimAutoreleasedReturnValue();
  v86 = v54;
  objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", &v86, &v85, 1);
  v55 = (void *)objc_claimAutoreleasedReturnValue();
  v56 = (void *)objc_msgSend(v51, "initWithName:destination:payload:", CFSTR("kDisableAccessoryReachabilityNotificationRequestKey"), v52, v55);

  -[HMDHome homeManager](v48, "homeManager");
  v57 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v57, "messageDispatcher");
  v58 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHome uuid](v48, "uuid");
  v59 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v43, "remoteDestinationString");
  v60 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHome workQueue](v48, "workQueue");
  v61 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v58, "sendSecureMessage:target:userID:destination:responseQueue:responseHandler:", v56, v59, 0, v60, v61, 0);

LABEL_42:
}

- (void)_reachabilityChangedForAccessory:(id)a3 reachable:(BOOL)a4
{
  id v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  int64_t v10;
  uint64_t v11;
  _BOOL4 v12;
  int v13;
  char v14;
  char v15;
  void *v16;
  HMDHome *v17;
  NSObject *v18;
  void *v19;
  void *v20;
  int v21;
  int64_t v22;
  int64_t v23;
  void *v24;
  void *v25;
  HMDHome *v26;
  NSObject *v27;
  uint64_t v28;
  void *v29;
  const __CFString *v30;
  void *v31;
  void *v32;
  void *v33;
  HMDHome *v34;
  NSObject *v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  uint64_t v43;
  void *v44;
  void *v45;
  void *v46;
  void *v47;
  HMDHome *v48;
  NSObject *v49;
  void *v50;
  void *v51;
  id v52;
  _BOOL4 v53;
  char v54;
  uint64_t v55;
  uint8_t buf[4];
  uint64_t v57;
  __int16 v58;
  uint64_t v59;
  __int16 v60;
  int64_t v61;
  __int16 v62;
  _BOOL4 v63;
  __int16 v64;
  uint64_t v65;
  __int16 v66;
  int64_t v67;
  uint64_t v68;

  v53 = a4;
  v68 = *MEMORY[0x24BDAC8D0];
  v5 = a3;
  -[HMDHome workQueue](self, "workQueue");
  v6 = objc_claimAutoreleasedReturnValue();
  dispatch_assert_queue_V2(v6);

  v7 = -[HMDHome reachableAccessoriesCount](self, "reachableAccessoriesCount");
  v8 = -[HMDHome previousReachableAccessoriesCount](self, "previousReachableAccessoriesCount");
  v9 = -[HMDHome reachableAppleMediaAccessoriesCount](self, "reachableAppleMediaAccessoriesCount");
  v10 = -[HMDHome previousReachableAppleMediaAccessoriesCount](self, "previousReachableAppleMediaAccessoriesCount");
  -[HMDHome setPreviousReachableAccessoriesCount:](self, "setPreviousReachableAccessoriesCount:", v7);
  v11 = -[HMDHome setPreviousReachableAppleMediaAccessoriesCount:](self, "setPreviousReachableAppleMediaAccessoriesCount:", v9);
  v12 = v9 + v7 < 1;
  if ((v10 + v8 < 0) ^ __OFADD__(v10, v8) | (v10 + v8 == 0))
    v13 = 0;
  else
    v13 = 1;
  v14 = v12 ^ v13;
  if (((v12 ^ v13) & 1) == 0)
  {
    v52 = v5;
    v15 = v12 ^ v13;
    v16 = (void *)MEMORY[0x227676638](v11);
    v17 = self;
    HMFGetOSLogHandle();
    v18 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138544642;
      v57 = (uint64_t)v19;
      v58 = 2048;
      v59 = v7;
      v60 = 2048;
      v61 = v9;
      v62 = 1024;
      v63 = v53;
      v64 = 2048;
      v65 = v8;
      v66 = 2048;
      v67 = v10;
      _os_log_impl(&dword_2218F0000, v18, OS_LOG_TYPE_INFO, "%{public}@Total reachable accessories %ld, apple media accessories: %ld, reachable = %d,                      last known reachable = %ld, last known apple media reachable = %ld", buf, 0x3Au);

    }
    objc_autoreleasePoolPop(v16);
    v14 = v15;
    v5 = v52;
  }
  -[HMDHome localCapabilitiesDataSource](self, "localCapabilitiesDataSource");
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  v21 = objc_msgSend(v20, "supportsRemoteAccess");

  if (v21)
  {
    v55 = 0;
    -[HMDHome getReachableIPAccessories:btleAccessories:mediaAccessories:](self, "getReachableIPAccessories:btleAccessories:mediaAccessories:", &v55, 0, 0);
    v22 = -[HMDHome reachableAccessoriesCountExcludingMatter](self, "reachableAccessoriesCountExcludingMatter");
    v23 = -[HMDHome previousReachableAccessoriesCountExcludingMatter](self, "previousReachableAccessoriesCountExcludingMatter");
    -[HMDHome setPreviousReachableAccessoriesCountExcludingMatter:](self, "setPreviousReachableAccessoriesCountExcludingMatter:", v22);
    -[HMDHome homeLocationHandler](self, "homeLocationHandler");
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v24, "accessoryReachabilityChanged:previousReachableAccessoriesCount:reachableAppleMediaAccessoriesCount:previousReachableAppleMediaAccessoriesCount:", v22, v23, v9, v10);

    v25 = (void *)MEMORY[0x227676638]();
    v26 = self;
    HMFGetOSLogHandle();
    v27 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v27, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v28 = objc_claimAutoreleasedReturnValue();
      v29 = (void *)v28;
      v30 = CFSTR("don't ");
      if (v7 > 0)
        v30 = &stru_24E79DB48;
      *(_DWORD *)buf = 138543618;
      v57 = v28;
      v58 = 2112;
      v59 = (uint64_t)v30;
      _os_log_impl(&dword_2218F0000, v27, OS_LOG_TYPE_INFO, "%{public}@Notifying home manager that we %@have locally reachable accessories", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v25);
    -[HMDHome homeManager](v26, "homeManager");
    v31 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHome uuid](v26, "uuid");
    v32 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v31, "accessoriesAreLocallyReachableOnTransientDevice:forHome:", v7 > 0, v32);

    if (objc_msgSend(v5, "accessoryReprovisionState") && v53)
    {
      v54 = v14;
      v33 = (void *)MEMORY[0x227676638]();
      v34 = v26;
      HMFGetOSLogHandle();
      v35 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v35, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v36 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v5, "name");
        v37 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        v57 = (uint64_t)v36;
        v58 = 2112;
        v59 = (uint64_t)v37;
        _os_log_impl(&dword_2218F0000, v35, OS_LOG_TYPE_INFO, "%{public}@Accessory %@ reprovision state is updated to Not Required", buf, 0x16u);

      }
      objc_autoreleasePoolPop(v33);
      objc_msgSend(v5, "setAccessoryReprovisionState:", 0);
      objc_msgSend(v5, "uuid");
      v38 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v31, "updateGenerationCounterWithReason:sourceUUID:shouldNotifyClients:", CFSTR("ReprovisionStateChange"), v38, 0);

      objc_msgSend(MEMORY[0x24BDBCED8], "dictionary");
      v39 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v5, "uuid");
      v40 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v40, "UUIDString");
      v41 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v39, "setObject:forKeyedSubscript:", v41, CFSTR("kAccessoryUUID"));

      objc_msgSend(v39, "setObject:forKeyedSubscript:", &unk_24E96A520, *MEMORY[0x24BDD7BD8]);
      v42 = (void *)MEMORY[0x24BE3F1D0];
      v43 = *MEMORY[0x24BDD7BC8];
      -[HMDHome messageDestination](v34, "messageDestination");
      v44 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v42, "messageWithName:destination:payload:", v43, v44, v39);
      v45 = (void *)objc_claimAutoreleasedReturnValue();

      -[HMDHome msgDispatcher](v34, "msgDispatcher");
      v46 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v46, "sendMessage:completionHandler:", v45, 0);

      v14 = v54;
    }

  }
  if (v7 >= 1 && v8 <= 0)
  {
    v47 = (void *)MEMORY[0x227676638]();
    v48 = self;
    HMFGetOSLogHandle();
    v49 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v49, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v50 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v57 = (uint64_t)v50;
      _os_log_impl(&dword_2218F0000, v49, OS_LOG_TYPE_INFO, "%{public}@Notifying that we see at least one reachable accessory", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v47);
    -[HMDHome notificationCenter](v48, "notificationCenter");
    v51 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v51, "postNotificationName:object:", CFSTR("HMDHomeCurrentDeviceHasReachableAccessories"), v48);

  }
  if ((v14 & 1) == 0)
    -[HMFTimer resume](self->_homeLocationTimer, "resume");

}

- (int64_t)reachableAccessoriesCount
{
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  uint64_t v5;
  uint64_t i;
  id v7;
  void *v8;
  id v9;
  id v10;
  void *v11;
  id v12;
  id obj;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  _BYTE v19[128];
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  v15 = 0u;
  v16 = 0u;
  v17 = 0u;
  v18 = 0u;
  -[HMDHome accessories](self, "accessories");
  obj = (id)objc_claimAutoreleasedReturnValue();
  v2 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v15, v19, 16);
  if (v2)
  {
    v3 = v2;
    v4 = 0;
    v5 = *(_QWORD *)v16;
    do
    {
      for (i = 0; i != v3; ++i)
      {
        if (*(_QWORD *)v16 != v5)
          objc_enumerationMutation(obj);
        v7 = *(id *)(*((_QWORD *)&v15 + 1) + 8 * i);
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0)
          v8 = v7;
        else
          v8 = 0;
        v9 = v8;

        v10 = v7;
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0)
          v11 = v10;
        else
          v11 = 0;
        v12 = v11;

        if (v9 && objc_msgSend(v9, "isReachable"))
        {
          ++v4;
        }
        else if (v12 && objc_msgSend(v12, "isCurrentAccessory"))
        {
          v4 += objc_msgSend(v12, "isReachable");
        }

      }
      v3 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v15, v19, 16);
    }
    while (v3);
  }
  else
  {
    v4 = 0;
  }

  return v4;
}

- (int64_t)reachableAccessoriesCountExcludingMatter
{
  HMDHome *v2;
  void *v3;
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t i;
  id v9;
  void *v10;
  id v11;
  void *v12;
  HMDHome *v13;
  NSObject *v14;
  void *v15;
  void *v16;
  void *v17;
  HMDHome *v18;
  NSObject *v19;
  void *v20;
  void *v21;
  int v22;
  const __CFString *v23;
  __int128 v25;
  void *v26;
  HMDHome *v27;
  int64_t v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint8_t buf[4];
  void *v34;
  __int16 v35;
  void *v36;
  __int16 v37;
  const __CFString *v38;
  _BYTE v39[128];
  uint64_t v40;

  v2 = self;
  v40 = *MEMORY[0x24BDAC8D0];
  v29 = 0u;
  v30 = 0u;
  v31 = 0u;
  v32 = 0u;
  -[HMDHome accessories](self, "accessories");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v29, v39, 16);
  if (v4)
  {
    v6 = v4;
    v28 = 0;
    v7 = *(_QWORD *)v30;
    *(_QWORD *)&v5 = 138543618;
    v25 = v5;
    v26 = v3;
    v27 = v2;
    do
    {
      for (i = 0; i != v6; ++i)
      {
        if (*(_QWORD *)v30 != v7)
          objc_enumerationMutation(v3);
        v9 = *(id *)(*((_QWORD *)&v29 + 1) + 8 * i);
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0)
          v10 = v9;
        else
          v10 = 0;
        v11 = v10;

        if (v11)
        {
          if (objc_msgSend(v11, "isReachable") && (objc_msgSend(v11, "supportsCHIP") & 1) == 0)
          {
            v12 = (void *)MEMORY[0x227676638]();
            v13 = v2;
            HMFGetOSLogHandle();
            v14 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
            {
              HMFGetLogIdentifier();
              v15 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v11, "name");
              v16 = (void *)objc_claimAutoreleasedReturnValue();
              *(_DWORD *)buf = v25;
              v34 = v15;
              v35 = 2112;
              v36 = v16;
              _os_log_impl(&dword_2218F0000, v14, OS_LOG_TYPE_DEBUG, "%{public}@Accessory: %@ is reachable", buf, 0x16u);

              v2 = v27;
              v3 = v26;
            }

            objc_autoreleasePoolPop(v12);
            ++v28;
          }
          if (objc_msgSend(v11, "supportsCHIP", v25))
          {
            v17 = (void *)MEMORY[0x227676638]();
            v18 = v2;
            HMFGetOSLogHandle();
            v19 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v19, OS_LOG_TYPE_DEBUG))
            {
              HMFGetLogIdentifier();
              v20 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v11, "name");
              v21 = (void *)objc_claimAutoreleasedReturnValue();
              v22 = objc_msgSend(v11, "isReachable");
              *(_DWORD *)buf = 138543874;
              v23 = CFSTR("NO");
              if (v22)
                v23 = CFSTR("YES");
              v34 = v20;
              v35 = 2112;
              v36 = v21;
              v37 = 2112;
              v38 = v23;
              _os_log_impl(&dword_2218F0000, v19, OS_LOG_TYPE_DEBUG, "%{public}@Ignoring Matter Accessory: %@ isReachable: %@", buf, 0x20u);

              v3 = v26;
              v2 = v27;
            }

            objc_autoreleasePoolPop(v17);
          }
        }

      }
      v6 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v29, v39, 16);
    }
    while (v6);
  }
  else
  {
    v28 = 0;
  }

  return v28;
}

- (int64_t)reachableAppleMediaAccessoriesCount
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t i;
  id v8;
  void *v9;
  id v10;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  _BYTE v16[128];
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  v15 = 0u;
  -[HMDHome accessories](self, "accessories", 0);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
  if (v3)
  {
    v4 = v3;
    v5 = 0;
    v6 = *(_QWORD *)v13;
    do
    {
      for (i = 0; i != v4; ++i)
      {
        if (*(_QWORD *)v13 != v6)
          objc_enumerationMutation(v2);
        v8 = *(id *)(*((_QWORD *)&v12 + 1) + 8 * i);
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0)
          v9 = v8;
        else
          v9 = 0;
        v10 = v9;

        if (v10)
          v5 += objc_msgSend(v8, "isReachable");

      }
      v4 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
    }
    while (v4);
  }
  else
  {
    v5 = 0;
  }

  return v5;
}

- (void)getReachableIPAccessories:(unint64_t *)a3 btleAccessories:(unint64_t *)a4 mediaAccessories:(unint64_t *)a5
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t i;
  id v12;
  void *v13;
  id v14;
  void *v15;
  void *v16;
  id v17;
  void *v18;
  id v19;
  unsigned int v20;
  id obj;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  _BYTE v29[128];
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  if ((unint64_t)a3 | (unint64_t)a4)
  {
    v27 = 0u;
    v28 = 0u;
    v25 = 0u;
    v26 = 0u;
    -[HMDHome accessories](self, "accessories");
    obj = (id)objc_claimAutoreleasedReturnValue();
    v5 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v25, v29, 16);
    if (v5)
    {
      v6 = v5;
      v7 = 0;
      v8 = 0;
      v9 = 0;
      v10 = *(_QWORD *)v26;
      do
      {
        for (i = 0; i != v6; ++i)
        {
          if (*(_QWORD *)v26 != v10)
            objc_enumerationMutation(obj);
          v12 = *(id *)(*((_QWORD *)&v25 + 1) + 8 * i);
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) != 0)
            v13 = v12;
          else
            v13 = 0;
          v14 = v13;

          if (v14)
          {
            objc_msgSend(v14, "matchingHAPAccessoryWithLinkType:", 1);
            v15 = (void *)objc_claimAutoreleasedReturnValue();
            v9 += objc_msgSend(v15, "isReachable");
            objc_msgSend(v14, "matchingHAPAccessoryWithLinkType:", 2);
            v16 = (void *)objc_claimAutoreleasedReturnValue();

            v8 += objc_msgSend(v16, "isReachable");
          }
          v17 = v12;
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) != 0)
            v18 = v17;
          else
            v18 = 0;
          v19 = v18;

          v20 = objc_msgSend(v19, "isReachable");
          v7 += v20;

        }
        v6 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v25, v29, 16);
      }
      while (v6);
    }
    else
    {
      v7 = 0;
      v8 = 0;
      v9 = 0;
    }

    if (a3)
      *a3 = v9;
    if (a4)
      *a4 = v8;
    if (a5)
      *a5 = v7;
  }
}

- (void)retrieveStateForTrackedAccessory:(id)a3 stateNumber:(id *)a4 isReachable:(BOOL *)a5 linkQuality:(unint64_t *)a6 lastSeen:(id *)a7
{
  id v12;
  void *v13;
  id v14;

  v12 = a3;
  -[HMDHome accessoryBrowser](self, "accessoryBrowser");
  v14 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v14, "accessoryBrowserHapProtocol");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v13, "retrieveCurrentStateForIdentifier:stateNumber:isReachable:linkQuality:lastSeen:", v12, a4, a5, a6, a7);

}

- (id)_setupCodeProviderForMessage:(id)a3
{
  id v4;
  id v5;
  void *v6;
  void *v7;
  _QWORD aBlock[4];
  id v10;
  id v11;
  id location;

  v4 = a3;
  objc_initWeak(&location, self);
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 3221225472;
  aBlock[2] = __40__HMDHome__setupCodeProviderForMessage___block_invoke;
  aBlock[3] = &unk_24E776418;
  objc_copyWeak(&v11, &location);
  v5 = v4;
  v10 = v5;
  v6 = _Block_copy(aBlock);
  v7 = (void *)objc_msgSend(v6, "copy");

  objc_destroyWeak(&v11);
  objc_destroyWeak(&location);

  return v7;
}

- (void)_handleCancelPairingAccessory:(id)a3
{
  void *v4;
  id v5;
  void *v6;
  void *v7;
  id v8;

  v4 = (void *)MEMORY[0x24BDD1540];
  v5 = a3;
  objc_msgSend(v4, "hmInternalErrorWithCode:", 1090);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  +[HMDMatterAccessoryPairingEndContext hmContextWithCancelledError:](HMDMatterAccessoryPairingEndContext, "hmContextWithCancelledError:", v6);
  v8 = (id)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v5, "dataForKey:", CFSTR("kAccessoryDescriptionDataKey"));
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  if (v7)
    -[HMDHome _processPairingRequestForMessage:cancelPairing:context:](self, "_processPairingRequestForMessage:cancelPairing:context:", v5, 1, v8);
  else
    -[HMDHome _processLegacyPairingRequestForMessage:cancelPairing:context:](self, "_processLegacyPairingRequestForMessage:cancelPairing:context:", v5, 1, v8);

}

- (void)_handleContinuePairingAccessory:(id)a3
{
  -[HMDHome _processLegacyPairingRequestForMessage:cancelPairing:context:](self, "_processLegacyPairingRequestForMessage:cancelPairing:context:", a3, 0, 0);
}

- (void)_cancelPairingWithAccessoryDescription:(id)a3 context:(id)a4
{
  id v6;
  id v7;
  void *v8;
  void *v9;
  HMDHome *v10;
  NSObject *v11;
  void *v12;
  void *v13;
  void *v14;
  int v15;
  void *v16;
  __int16 v17;
  id v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v6 = a3;
  v7 = a4;
  objc_msgSend(v6, "accessoryUUID");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = (void *)MEMORY[0x227676638]();
  v10 = self;
  HMFGetOSLogHandle();
  v11 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    v15 = 138543618;
    v16 = v12;
    v17 = 2112;
    v18 = v6;
    _os_log_impl(&dword_2218F0000, v11, OS_LOG_TYPE_INFO, "%{public}@Canceling pairing and removing all state for accessory with description %@", (uint8_t *)&v15, 0x16u);

  }
  objc_autoreleasePoolPop(v9);
  os_unfair_recursive_lock_lock_with_options();
  -[NSMapTable removeObjectForKey:](v10->_addPendingAccessories, "removeObjectForKey:", v6);
  if (v8)
  {
    -[NSMutableDictionary removeObjectForKey:](v10->_addPendingAccessorySetupCodes, "removeObjectForKey:", v8);
    -[NSMutableDictionary removeObjectForKey:](v10->_addPendingAccessoryOnboardingSetupPayloadStrings, "removeObjectForKey:", v8);
    -[NSMutableDictionary removeObjectForKey:](v10->_addPendingAccessorySetupCodeHandlers, "removeObjectForKey:", v8);
  }
  os_unfair_recursive_lock_unlock();
  -[HMDHome accessoryBrowser](v10, "accessoryBrowser");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x24BDD1540], "hmErrorWithCode:", 23);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v13, "cancelPairingWithAccessoryDescription:error:context:", v6, v14, v7);

}

- (void)_processPairingRequestForMessage:(id)a3 cancelPairing:(BOOL)a4 context:(id)a5
{
  _BOOL4 v6;
  id v8;
  id v9;
  void *v10;
  void *v11;
  id v12;
  void *v13;
  HMDHome *v14;
  NSObject *v15;
  void *v16;
  void *v17;
  id v18;
  uint8_t buf[4];
  void *v20;
  __int16 v21;
  id v22;
  uint64_t v23;

  v6 = a4;
  v23 = *MEMORY[0x24BDAC8D0];
  v8 = a3;
  v9 = a5;
  objc_msgSend(v8, "dataForKey:", CFSTR("kAccessoryDescriptionDataKey"));
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v18 = 0;
  -[HMDHome _setupDescriptionFromData:error:](self, "_setupDescriptionFromData:error:", v10, &v18);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v12 = v18;
  if (v11)
  {
    if (v6)
    {
      -[HMDHome _cancelPairingWithAccessoryDescription:context:](self, "_cancelPairingWithAccessoryDescription:context:", v11, v9);
      objc_msgSend(v8, "respondWithPayload:", 0);
    }
  }
  else
  {
    v13 = (void *)MEMORY[0x227676638]();
    v14 = self;
    HMFGetOSLogHandle();
    v15 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v20 = v16;
      v21 = 2112;
      v22 = v12;
      _os_log_impl(&dword_2218F0000, v15, OS_LOG_TYPE_ERROR, "%{public}@Failed to unarchive setup accessory description from accessory description data: %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v13);
    objc_msgSend(MEMORY[0x24BDD1540], "hmErrorWithCode:", 20);
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "respondWithError:", v17);

  }
}

- (void)_cancelPairingWithAccessoryUUID:(id)a3 context:(id)a4 completionHandler:(id)a5
{
  id v8;
  id v9;
  void *v10;
  void *v11;
  void *v12;
  id v13;
  void *v14;
  id v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  HMDHome *v20;
  NSObject *v21;
  void *v22;
  void *v23;
  void *v24;
  id v25;
  void *v26;
  uint64_t v27;
  void *v28;
  void *v29;
  void *v30;
  HMDHome *v31;
  NSObject *v32;
  void *v33;
  void *v34;
  void *v35;
  void *context;
  void (**v37)(_QWORD, _QWORD, _QWORD, _QWORD);
  uint64_t v38;
  id v39;
  _QWORD v40[4];
  id v41;
  _QWORD v42[4];
  id v43;
  uint8_t buf[4];
  void *v45;
  __int16 v46;
  void *v47;
  uint64_t v48;

  v48 = *MEMORY[0x24BDAC8D0];
  v8 = a3;
  v39 = a4;
  v9 = a5;
  -[HMDHome accessoryBrowser](self, "accessoryBrowser");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "unassociatedAccessories");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "hmf_firstObjectWithUUID:", v8);
  v12 = (void *)objc_claimAutoreleasedReturnValue();

  v13 = v12;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v14 = v13;
  else
    v14 = 0;
  v15 = v14;

  if (v15)
  {
    v42[0] = MEMORY[0x24BDAC760];
    v42[1] = 3221225472;
    v42[2] = __69__HMDHome__cancelPairingWithAccessoryUUID_context_completionHandler___block_invoke;
    v42[3] = &unk_24E799CC8;
    v43 = v9;
    objc_msgSend(v15, "cancelConfigurationWithCompletionHandler:", v42);
    v16 = v43;
  }
  else
  {
    -[HMDHome accessoryBrowser](self, "accessoryBrowser");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v17, "unpairedAccessoryWithUUID:", v8);
    v38 = objc_claimAutoreleasedReturnValue();

    -[HMDHome addPendingAccessorySetupCodeHandlers](self, "addPendingAccessorySetupCodeHandlers");
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v18, "objectForKeyedSubscript:", v8);
    v37 = (void (**)(_QWORD, _QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();

    v19 = (void *)MEMORY[0x227676638]();
    v20 = self;
    HMFGetOSLogHandle();
    v21 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v8, "UUIDString");
      v23 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v45 = v22;
      v46 = 2112;
      v47 = v23;
      _os_log_impl(&dword_2218F0000, v21, OS_LOG_TYPE_INFO, "%{public}@Canceling pairing and removing all state for accessory %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v19);
    os_unfair_recursive_lock_lock_with_options();
    -[NSMapTable hm_allKeys](v20->_addPendingAccessories, "hm_allKeys");
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    v40[0] = MEMORY[0x24BDAC760];
    v40[1] = 3221225472;
    v40[2] = __69__HMDHome__cancelPairingWithAccessoryUUID_context_completionHandler___block_invoke_1162;
    v40[3] = &unk_24E7763F0;
    v25 = v8;
    v41 = v25;
    objc_msgSend(v24, "na_firstObjectPassingTest:", v40);
    v26 = (void *)objc_claimAutoreleasedReturnValue();

    -[NSMutableDictionary removeObjectForKey:](v20->_addPendingAccessorySetupCodeHandlers, "removeObjectForKey:", v25);
    if (v26)
      -[NSMapTable removeObjectForKey:](v20->_addPendingAccessories, "removeObjectForKey:", v26);

    v27 = os_unfair_recursive_lock_unlock();
    if (v38)
    {
      -[HMDHome accessoryBrowser](v20, "accessoryBrowser");
      v28 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x24BDD1540], "hmErrorWithCode:", 23);
      v29 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v28, "cancelPairingWithAccessory:error:context:", v38, v29, v39);

    }
    if (v37)
    {
      objc_msgSend(MEMORY[0x24BDD1540], "hmErrorWithCode:", 23);
      v30 = (void *)objc_claimAutoreleasedReturnValue();
      ((void (**)(_QWORD, _QWORD, _QWORD, void *))v37)[2](v37, 0, 0, v30);

      if (v9)
        (*((void (**)(id, _QWORD, _QWORD))v9 + 2))(v9, 0, 0);
    }
    else
    {
      context = (void *)MEMORY[0x227676638](v27);
      v31 = v20;
      HMFGetOSLogHandle();
      v32 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v32, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v33 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v25, "UUIDString", context);
        v34 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        v45 = v33;
        v46 = 2112;
        v47 = v34;
        _os_log_impl(&dword_2218F0000, v32, OS_LOG_TYPE_INFO, "%{public}@Unable to find setup available completion handler for accessory %@", buf, 0x16u);

      }
      objc_autoreleasePoolPop(context);
      if (v9)
      {
        objc_msgSend(MEMORY[0x24BDD1540], "hmErrorWithCode:", 2);
        v35 = (void *)objc_claimAutoreleasedReturnValue();
        (*((void (**)(id, void *, _QWORD))v9 + 2))(v9, v35, 0);

      }
    }

    v16 = (void *)v38;
  }

}

- (void)_processLegacyPairingRequestForMessage:(id)a3 cancelPairing:(BOOL)a4 context:(id)a5
{
  _BOOL4 v6;
  id v8;
  void *v9;
  void *v10;
  void *v11;
  HMDHome *v12;
  NSObject *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  void *v23;
  char v24;
  id v25;
  void *v26;
  HMDHome *v27;
  NSObject *v28;
  _BOOL4 v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  void (**v37)(_QWORD, _QWORD, _QWORD, _QWORD);
  void *v38;
  HMDHome *v39;
  NSObject *v40;
  void *v41;
  void *v42;
  void *v43;
  void *v44;
  HMDHome *v45;
  NSObject *v46;
  void *v47;
  void *v48;
  void *v49;
  id v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  uint8_t v55[128];
  uint8_t buf[4];
  void *v57;
  __int16 v58;
  void *v59;
  uint64_t v60;

  v6 = a4;
  v60 = *MEMORY[0x24BDAC8D0];
  v8 = a3;
  v50 = a5;
  objc_msgSend(v8, "uuidForKey:", CFSTR("kAccessoryUUID"));
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  if (v9)
  {
    if (v6)
    {
      objc_msgSend(v8, "responseHandler");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      -[HMDHome _cancelPairingWithAccessoryUUID:context:completionHandler:](self, "_cancelPairingWithAccessoryUUID:context:completionHandler:", v9, v50, v10);

    }
    else
    {
      objc_msgSend(v8, "stringForKey:", CFSTR("kAccessoryPairingPasswordKey"));
      v49 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v8, "stringForKey:", CFSTR("kAccessoryOnboardingSetupPayloadStringKey"));
      v48 = (void *)objc_claimAutoreleasedReturnValue();
      v53 = 0u;
      v54 = 0u;
      v51 = 0u;
      v52 = 0u;
      -[HMDHome addPendingAccessories](self, "addPendingAccessories");
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v17, "hm_allKeys");
      v18 = (void *)objc_claimAutoreleasedReturnValue();

      v19 = objc_msgSend(v18, "countByEnumeratingWithState:objects:count:", &v51, v55, 16);
      if (v19)
      {
        v20 = *(_QWORD *)v52;
LABEL_9:
        v21 = 0;
        while (1)
        {
          if (*(_QWORD *)v52 != v20)
            objc_enumerationMutation(v18);
          v22 = *(void **)(*((_QWORD *)&v51 + 1) + 8 * v21);
          objc_msgSend(v22, "accessoryUUID");
          v23 = (void *)objc_claimAutoreleasedReturnValue();
          v24 = objc_msgSend(v23, "isEqual:", v9);

          if ((v24 & 1) != 0)
            break;
          if (v19 == ++v21)
          {
            v19 = objc_msgSend(v18, "countByEnumeratingWithState:objects:count:", &v51, v55, 16);
            if (v19)
              goto LABEL_9;
            goto LABEL_15;
          }
        }
        v25 = v22;

        if (!v25)
          goto LABEL_24;
        v26 = (void *)MEMORY[0x227676638]();
        v27 = self;
        HMFGetOSLogHandle();
        v28 = objc_claimAutoreleasedReturnValue();
        v29 = os_log_type_enabled(v28, OS_LOG_TYPE_INFO);
        if (v49)
        {
          if (v29)
          {
            HMFGetLogIdentifier();
            v30 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 138543618;
            v57 = v30;
            v58 = 2112;
            v59 = v9;
            _os_log_impl(&dword_2218F0000, v28, OS_LOG_TYPE_INFO, "%{public}@Storing the setupCode for accessory %@", buf, 0x16u);

          }
          objc_autoreleasePoolPop(v26);
          -[HMDHome addPendingAccessorySetupCodes](v27, "addPendingAccessorySetupCodes");
          v31 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v31, "setObject:forKey:", v49, v9);

          -[HMDHome addPendingAccessoryOnboardingSetupPayloadStrings](v27, "addPendingAccessoryOnboardingSetupPayloadStrings");
          v32 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v32, "setObject:forKeyedSubscript:", v48, v9);

          -[HMDHome accessoryBrowser](v27, "accessoryBrowser");
          v33 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v33, "unpairedAccessoryWithUUID:", v9);
          v34 = (void *)objc_claimAutoreleasedReturnValue();

          if (v34)
          {
            -[HMDHome accessoryBrowser](v27, "accessoryBrowser");
            v35 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v35, "handleSetupCodeAvailable:", v34);

          }
          -[HMDHome addPendingAccessorySetupCodeHandlers](v27, "addPendingAccessorySetupCodeHandlers");
          v36 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v36, "objectForKeyedSubscript:", v9);
          v37 = (void (**)(_QWORD, _QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();

          if (v37)
          {
            os_unfair_recursive_lock_lock_with_options();
            -[NSMutableDictionary removeObjectForKey:](v27->_addPendingAccessorySetupCodeHandlers, "removeObjectForKey:", v9);
            os_unfair_recursive_lock_unlock();
            ((void (**)(_QWORD, void *, void *, _QWORD))v37)[2](v37, v49, v48, 0);
          }
          else
          {
            v44 = (void *)MEMORY[0x227676638]();
            v45 = v27;
            HMFGetOSLogHandle();
            v46 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v46, OS_LOG_TYPE_INFO))
            {
              HMFGetLogIdentifier();
              v47 = (void *)objc_claimAutoreleasedReturnValue();
              *(_DWORD *)buf = 138543618;
              v57 = v47;
              v58 = 2112;
              v59 = v9;
              _os_log_impl(&dword_2218F0000, v46, OS_LOG_TYPE_INFO, "%{public}@No handler to provide the setup code to for accessory: %@", buf, 0x16u);

            }
            objc_autoreleasePoolPop(v44);
          }
          objc_msgSend(v8, "respondWithSuccess");

        }
        else
        {
          if (v29)
          {
            HMFGetLogIdentifier();
            v42 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 138543618;
            v57 = v42;
            v58 = 2112;
            v59 = v9;
            _os_log_impl(&dword_2218F0000, v28, OS_LOG_TYPE_INFO, "%{public}@No setupCode specified to continue pairing with accessory %@", buf, 0x16u);

          }
          objc_autoreleasePoolPop(v26);
          objc_msgSend(MEMORY[0x24BDD1540], "hmErrorWithCode:", 3);
          v43 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v8, "respondWithError:", v43);

        }
      }
      else
      {
LABEL_15:

LABEL_24:
        v38 = (void *)MEMORY[0x227676638]();
        v39 = self;
        HMFGetOSLogHandle();
        v40 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v40, OS_LOG_TYPE_INFO))
        {
          HMFGetLogIdentifier();
          v41 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543618;
          v57 = v41;
          v58 = 2112;
          v59 = v9;
          _os_log_impl(&dword_2218F0000, v40, OS_LOG_TYPE_INFO, "%{public}@Accessory with UUID %@ not being added to the home", buf, 0x16u);

        }
        objc_autoreleasePoolPop(v38);
        objc_msgSend(MEMORY[0x24BDD1540], "hmErrorWithCode:", 79);
        v25 = (id)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v8, "respondWithError:", v25);
      }

    }
  }
  else
  {
    v11 = (void *)MEMORY[0x227676638]();
    v12 = self;
    HMFGetOSLogHandle();
    v13 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v8, "messagePayload");
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v57 = v14;
      v58 = 2112;
      v59 = v15;
      _os_log_impl(&dword_2218F0000, v13, OS_LOG_TYPE_INFO, "%{public}@No accessory UUID found in payload: %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v11);
    objc_msgSend(MEMORY[0x24BDD1540], "hmErrorWithCode:", 3);
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "respondWithError:", v16);

  }
}

- (BOOL)hasNeverAddedAnyHAPAccessory
{
  void *v3;
  BOOL v4;
  void *v5;

  -[HMDHome firstHAPAccessoryAddedDate](self, "firstHAPAccessoryAddedDate");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  if (v3)
  {
    v4 = 0;
  }
  else
  {
    -[HMDHome hapAccessories](self, "hapAccessories");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v4 = objc_msgSend(v5, "count") == 0;

  }
  return v4;
}

- (HMDBackgroundTaskManager)backgroundTaskManager
{
  return +[HMDBackgroundTaskManager sharedManager](HMDBackgroundTaskManager, "sharedManager");
}

- (id)retrieveNewlyAddedAccessoriesForPairedAccessoryServerInfo:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  id v8;
  char isKindOfClass;
  void *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  void *v17;
  id v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  int v23;
  void *v24;
  void *v26;
  id v27;
  void *v28;
  id v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  _BYTE v34[128];
  uint64_t v35;

  v35 = *MEMORY[0x24BDAC8D0];
  v4 = a3;
  objc_msgSend(MEMORY[0x24BDBCEB8], "array");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "primaryAccessoryUUID");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHome accessoryWithUUID:](self, "accessoryWithUUID:", v6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  if (v7)
  {
    objc_msgSend(v5, "addObject:", v7);
    v8 = v7;
    objc_opt_class();
    isKindOfClass = objc_opt_isKindOfClass();
    if ((isKindOfClass & 1) != 0)
      v10 = v8;
    else
      v10 = 0;
    v29 = v10;

    if ((isKindOfClass & 1) != 0)
    {
      v26 = v7;
      v27 = v4;
      v28 = v5;
      v32 = 0u;
      v33 = 0u;
      v30 = 0u;
      v31 = 0u;
      -[HMDHome accessories](self, "accessories");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      v12 = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v30, v34, 16);
      if (v12)
      {
        v13 = v12;
        v14 = *(_QWORD *)v31;
        do
        {
          v15 = 0;
          do
          {
            if (*(_QWORD *)v31 != v14)
              objc_enumerationMutation(v11);
            v16 = *(id *)(*((_QWORD *)&v30 + 1) + 8 * v15);
            objc_opt_class();
            if ((objc_opt_isKindOfClass() & 1) != 0)
              v17 = v16;
            else
              v17 = 0;
            v18 = v17;

            objc_msgSend(v18, "bridge");
            v19 = (void *)objc_claimAutoreleasedReturnValue();
            v20 = v19;
            if (v19)
            {
              objc_msgSend(v19, "uuid");
              v21 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v29, "uuid");
              v22 = (void *)objc_claimAutoreleasedReturnValue();
              v23 = objc_msgSend(v21, "isEqual:", v22);

              if (v23)
                objc_msgSend(v28, "addObject:", v16);
            }

            ++v15;
          }
          while (v13 != v15);
          v13 = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v30, v34, 16);
        }
        while (v13);
      }

      v4 = v27;
      v5 = v28;
      v7 = v26;
    }

  }
  v24 = (void *)objc_msgSend(v5, "copy");

  return v24;
}

- (void)_removeFailedAddWithAccessoryServerInfo:(id)a3
{
  id v4;
  id v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  id v12;
  void *v13;
  id v14;
  id v15;
  _QWORD v16[4];
  id v17;
  HMDHome *v18;
  _QWORD v19[5];
  id v20;
  uint64_t v21;

  v4 = a3;
  v5 = objc_alloc(MEMORY[0x24BE3F168]);
  -[HMDHome workQueue](self, "workQueue");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = (void *)objc_msgSend(v5, "initWithQueue:", v6);

  v21 = _HMFThreadLocalAsyncContextPush();
  if (-[HMDHome isSharedAdmin](self, "isSharedAdmin"))
  {
    objc_msgSend(v4, "server");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHome owner](self, "owner");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHome _removeUserFromNewlyPairedAccessoryServer:user:](self, "_removeUserFromNewlyPairedAccessoryServer:user:", v8, v9);
    v10 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    objc_msgSend(MEMORY[0x24BE3F180], "futureWithNoValue");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
  }
  v11 = MEMORY[0x24BDAC760];
  v19[0] = MEMORY[0x24BDAC760];
  v19[1] = 3221225472;
  v19[2] = __51__HMDHome__removeFailedAddWithAccessoryServerInfo___block_invoke;
  v19[3] = &unk_24E79B238;
  v19[4] = self;
  v12 = v4;
  v20 = v12;
  objc_msgSend(v10, "finally:", v19);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  v16[0] = v11;
  v16[1] = 3221225472;
  v16[2] = __51__HMDHome__removeFailedAddWithAccessoryServerInfo___block_invoke_2;
  v16[3] = &unk_24E79B238;
  v14 = v12;
  v17 = v14;
  v18 = self;
  v15 = (id)objc_msgSend(v13, "finally:", v16);

  _HMFThreadLocalAsyncContextPop();
}

- (id)_configureWithFeatureSpecificDataAccessory:(id)a3 accessoryModel:(id)a4
{
  id v6;
  id v7;
  void *v8;
  void *v9;
  int v10;
  void *v11;
  void *v12;

  v6 = a3;
  v7 = a4;
  objc_msgSend(MEMORY[0x24BDBCEB8], "array");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  if (_os_feature_enabled_impl()
    && ((isInternalBuild() & 1) != 0
     || CFPreferencesGetAppBooleanValue(CFSTR("UWBUnlock"), CFSTR("/Library/Managed Preferences/mobile/com.apple.homed.plist"), 0)))
  {
    objc_msgSend(v7, "supportsMatCredACP");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v10 = objc_msgSend(v9, "BOOLValue");

    if (v10)
    {
      -[HMDHome _configureTTUAndUWBOnAccessory:accessoryModel:](self, "_configureTTUAndUWBOnAccessory:accessoryModel:", v6, v7);
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v8, "addObject:", v11);

    }
  }
  objc_msgSend(MEMORY[0x24BE3F180], "all:", v8);
  v12 = (void *)objc_claimAutoreleasedReturnValue();

  return v12;
}

- (id)_configureTTUAndUWBOnAccessory:(id)a3 accessoryModel:(id)a4
{
  id v6;
  id v7;
  void *v8;
  void *v9;
  HMDHome *v10;
  NSObject *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  id v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  HMDHome *v23;
  NSObject *v24;
  void *v25;
  void *v26;
  void *v27;
  _QWORD v29[5];
  id v30;
  id v31;
  uint8_t buf[4];
  void *v33;
  __int16 v34;
  void *v35;
  __int16 v36;
  id v37;
  __int16 v38;
  id v39;
  uint64_t v40;

  v40 = *MEMORY[0x24BDAC8D0];
  v6 = a3;
  v7 = a4;
  objc_msgSend(MEMORY[0x24BE3F178], "internalOnlyInitializer");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = (void *)MEMORY[0x227676638]();
  v10 = self;
  HMFGetOSLogHandle();
  v11 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "UUID");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138544130;
    v33 = v12;
    v34 = 2112;
    v35 = v13;
    v36 = 2112;
    v37 = v6;
    v38 = 2112;
    v39 = v7;
    _os_log_impl(&dword_2218F0000, v11, OS_LOG_TYPE_INFO, "%{public}@[NewFlow: %@] Configuring ACWG on accessory with serverInfo: %@, model: %@", buf, 0x2Au);

  }
  objc_autoreleasePoolPop(v9);
  objc_msgSend(v6, "server");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v15 = v14;
  else
    v15 = 0;
  v16 = v15;

  if (v16)
  {
    objc_msgSend(v16, "createDoorLockClusterObjectWithFlow:", v8);
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v17, "naFuture");
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    v29[0] = MEMORY[0x24BDAC760];
    v29[1] = 3221225472;
    v29[2] = __57__HMDHome__configureTTUAndUWBOnAccessory_accessoryModel___block_invoke;
    v29[3] = &unk_24E7765E0;
    v29[4] = v10;
    v30 = v8;
    v31 = v7;
    objc_msgSend(v18, "flatMap:", v29);
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v19, "hmfFuture");
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v20, "ignoreResult");
    v21 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v22 = (void *)MEMORY[0x227676638]();
    v23 = v10;
    HMFGetOSLogHandle();
    v24 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v25 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v8, "UUID");
      v26 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v6, "server");
      v27 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543874;
      v33 = v25;
      v34 = 2112;
      v35 = v26;
      v36 = 2112;
      v37 = v27;
      _os_log_impl(&dword_2218F0000, v24, OS_LOG_TYPE_ERROR, "%{public}@[Flow: %@] Failed to find HMMTRAccessoryServer: %@", buf, 0x20u);

    }
    objc_autoreleasePoolPop(v22);
    objc_msgSend(MEMORY[0x24BE3F180], "futureWithNoValue");
    v21 = (void *)objc_claimAutoreleasedReturnValue();
  }

  return v21;
}

- (id)_readDataNeededImmediatelyAfterPairing:(id)a3 intoModel:(id)a4
{
  id v6;
  void *v7;
  void *v8;
  id v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  _QWORD v15[4];
  id v16;
  HMDHome *v17;
  id v18;

  v6 = a4;
  objc_msgSend(a3, "server");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v8 = v7;
  else
    v8 = 0;
  v9 = v8;

  if (v9)
  {
    objc_msgSend(MEMORY[0x24BE3F178], "untrackedPlaceholderFlow");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "createDoorLockClusterObjectWithFlow:", v10);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v15[0] = MEMORY[0x24BDAC760];
    v15[1] = 3221225472;
    v15[2] = __60__HMDHome__readDataNeededImmediatelyAfterPairing_intoModel___block_invoke;
    v15[3] = &unk_24E7766A8;
    v16 = v6;
    v17 = self;
    v18 = v9;
    objc_msgSend(v11, "then:", v15);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "ignoreOutcome");
    v13 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    objc_msgSend(MEMORY[0x24BE3F180], "futureWithNoValue");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
  }

  return v13;
}

- (id)_addOwnerToNewlyPairedAccessoryServer:(id)a3
{
  id v4;
  void *v5;
  HMDHome *v6;
  NSObject *v7;
  void *v8;
  void *v9;
  void *v10;
  id v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  _QWORD v19[5];
  id v20;
  _BYTE buf[12];
  __int16 v22;
  void *v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v4 = a3;
  v5 = (void *)MEMORY[0x227676638]();
  v6 = self;
  HMFGetOSLogHandle();
  v7 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "identifier");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543618;
    *(_QWORD *)&buf[4] = v8;
    v22 = 2112;
    v23 = v9;
    _os_log_impl(&dword_2218F0000, v7, OS_LOG_TYPE_INFO, "%{public}@Adding owner to newly paired accessory server: %@", buf, 0x16u);

  }
  objc_autoreleasePoolPop(v5);
  if (-[HMDHome isSharedAdmin](v6, "isSharedAdmin"))
  {
    *(_QWORD *)buf = 0;
    objc_msgSend(MEMORY[0x24BE3F180], "futureWithPromise:", buf);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v11 = objc_alloc(MEMORY[0x24BE3F168]);
    -[HMDHome workQueue](v6, "workQueue");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    v13 = (void *)objc_msgSend(v11, "initWithQueue:", v12);

    objc_msgSend(v10, "ignoreErrors");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    v19[0] = MEMORY[0x24BDAC760];
    v19[1] = 3221225472;
    v19[2] = __49__HMDHome__addOwnerToNewlyPairedAccessoryServer___block_invoke;
    v19[3] = &unk_24E797BE8;
    v19[4] = v6;
    v20 = v4;
    objc_msgSend(v14, "inContext:then:", v13, v19);
    v15 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v16 = (void *)MEMORY[0x24BE3F180];
    objc_msgSend(MEMORY[0x24BDD1540], "hmErrorWithCode:", 17);
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v16, "futureWithError:", v17);
    v15 = (void *)objc_claimAutoreleasedReturnValue();

  }
  return v15;
}

- (id)_removeUserFromNewlyPairedAccessoryServer:(id)a3 user:(id)a4
{
  id v6;
  id v7;
  void *v8;
  HMDHome *v9;
  NSObject *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  _BYTE v18[12];
  __int16 v19;
  void *v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  v6 = a3;
  v7 = a4;
  v8 = (void *)MEMORY[0x227676638]();
  v9 = self;
  HMFGetOSLogHandle();
  v10 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "identifier");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)v18 = 138543618;
    *(_QWORD *)&v18[4] = v11;
    v19 = 2112;
    v20 = v12;
    _os_log_impl(&dword_2218F0000, v10, OS_LOG_TYPE_INFO, "%{public}@Removing user from newly paired accessory server: %@", v18, 0x16u);

  }
  objc_autoreleasePoolPop(v8);
  *(_QWORD *)v18 = 0;
  objc_msgSend(MEMORY[0x24BE3F180], "futureWithPromise:", v18);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v7, "isCurrentUser"))
  {
    -[HMDHome workQueue](v9, "workQueue");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)v18, "errorOnlyResolverBlock");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "removePairingForCurrentControllerOnQueue:completion:", v14, v15);
  }
  else
  {
    objc_msgSend(v7, "pairingIdentity");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHome workQueue](v9, "workQueue");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)v18, "errorOnlyResolverBlock");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "removePairing:completionQueue:completionHandler:", v14, v15, v16);

  }
  return v13;
}

- (void)_processAccessoriesToAddForUnpairedAccessory:(id)a3 certificationStatus:(int64_t)a4 accessoryServer:(id)a5 networkCredential:(id)a6 pairingEvent:(id)a7 message:(id)a8 completionHandler:(id)a9
{
  id v16;
  id v17;
  id v18;
  id v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  id v25;
  void *v26;
  int v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  HMDNewPairedAccessoryServerInfo *v32;
  void *v33;
  void *v34;
  HMDHome *v35;
  NSObject *v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  void *v43;
  void *v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t i;
  void *v49;
  void *v50;
  void *v51;
  void *v52;
  int v53;
  void *v54;
  void *v55;
  void *v56;
  id v57;
  void *v58;
  void *v59;
  uint64_t v60;
  HMDNewPairedAccessoryServerInfo *v61;
  id v62;
  void *v63;
  HMDNewPairedAccessoryServerInfo *v64;
  id v65;
  void *v66;
  HMDNewPairedAccessoryServerInfo *v67;
  void *v68;
  void *v69;
  id v70;
  id v71;
  void *v72;
  id v73;
  id v74;
  id v75;
  void *v76;
  void *v77;
  void *v78;
  void *v79;
  id v80;
  id v81;
  id v82;
  id v83;
  id v84;
  void *v85;
  id v86;
  HMDNewPairedAccessoryServerInfo *v87;
  id v88;
  void *v89;
  _QWORD v90[5];
  HMDNewPairedAccessoryServerInfo *v91;
  id v92;
  id v93;
  _QWORD v94[5];
  id v95;
  id v96;
  _QWORD *v97;
  _QWORD v98[5];
  id v99;
  _QWORD *v100;
  _QWORD v101[5];
  HMDNewPairedAccessoryServerInfo *v102;
  _QWORD *v103;
  _QWORD v104[5];
  HMDNewPairedAccessoryServerInfo *v105;
  id v106;
  id v107;
  _QWORD *v108;
  _QWORD v109[5];
  HMDNewPairedAccessoryServerInfo *v110;
  id v111;
  uint64_t v112;
  _QWORD v113[5];
  id v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  uint8_t buf[4];
  void *v120;
  __int16 v121;
  uint64_t v122;
  __int16 v123;
  HMDNewPairedAccessoryServerInfo *v124;
  uint64_t v125;

  v125 = *MEMORY[0x24BDAC8D0];
  v16 = a3;
  v80 = a5;
  v81 = a6;
  v82 = a7;
  v17 = a8;
  v18 = a9;
  v19 = objc_alloc(MEMORY[0x24BE3F138]);
  v20 = (void *)MEMORY[0x24BDD17C8];
  MEMORY[0x227675180](self, a2);
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v20, "stringWithFormat:", CFSTR("%@, %s:%ld"), v21, "/Library/Caches/com.apple.xbs/Sources/HomeKit_executables/Sources/homed/Home/HMDHome.m", 16242);
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  v89 = (void *)objc_msgSend(v19, "initWithName:", v22);

  v86 = v16;
  if (self)
  {
    -[HMDHome currentAccessory](self, "currentAccessory");
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
      v24 = v23;
    else
      v24 = 0;
    v25 = v24;

    v85 = 0;
    if (v86 && v25)
    {
      objc_msgSend(v25, "sensorAccessoryUUID");
      v26 = (void *)objc_claimAutoreleasedReturnValue();
      v27 = objc_msgSend(v26, "hmf_isEqualToUUID:", v86);

      if (v27)
      {
        objc_msgSend(v25, "uuid");
        v28 = (void *)objc_claimAutoreleasedReturnValue();
        +[MKFModelFactory createAppleMediaAccessoryModelWithModelID:](MKFModelFactory, "createAppleMediaAccessoryModelWithModelID:", v28);
        v85 = (void *)objc_claimAutoreleasedReturnValue();

        objc_msgSend(v25, "room");
        v29 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v29, "uuid");
        v30 = (void *)objc_claimAutoreleasedReturnValue();
        +[MKFModelFactory createRoomModelWithModelID:](MKFModelFactory, "createRoomModelWithModelID:", v30);
        v31 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v85, "setRoom:", v31);

      }
      else
      {
        v85 = 0;
      }
    }

  }
  else
  {
    v85 = 0;
  }

  objc_msgSend(v85, "modelID");
  v76 = (void *)objc_claimAutoreleasedReturnValue();
  v32 = -[HMDNewPairedAccessoryServerInfo initWithServer:primaryAccessoryUUID:certificationStatus:hostAccessory:networkCredential:pairingEvent:]([HMDNewPairedAccessoryServerInfo alloc], "initWithServer:primaryAccessoryUUID:certificationStatus:hostAccessory:networkCredential:pairingEvent:", v80, v86, a4, v85, v81, v82);
  objc_msgSend(v89, "begin");
  v88 = v89;
  v87 = v32;
  v84 = v17;
  v83 = v18;
  if (self)
  {
    -[HMDNewPairedAccessoryServerInfo server](v87, "server");
    v33 = (void *)objc_claimAutoreleasedReturnValue();
    v34 = (void *)MEMORY[0x227676638]();
    v35 = self;
    HMFGetOSLogHandle();
    v36 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v36, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v37 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v33, "accessories");
      v38 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543874;
      v120 = v37;
      v121 = 2048;
      v122 = objc_msgSend(v38, "count");
      v123 = 2112;
      v124 = v87;
      _os_log_impl(&dword_2218F0000, v36, OS_LOG_TYPE_INFO, "%{public}@Creating %tu new accessory objects for a newly paired accessory server: %@", buf, 0x20u);

    }
    objc_autoreleasePoolPop(v34);
    -[HMDHome uuidToHAPAccessoryConfigTable](v35, "uuidToHAPAccessoryConfigTable");
    v39 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v33, "primaryAccessory");
    v40 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDNewPairedAccessoryServerInfo primaryAccessoryUUID](v87, "primaryAccessoryUUID");
    v41 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v39, "setObject:forKey:", v40, v41);

    v42 = (void *)MEMORY[0x24BDBCED8];
    objc_msgSend(v33, "accessories");
    v43 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v42, "dictionaryWithCapacity:", objc_msgSend(v43, "count"));
    v44 = (void *)objc_claimAutoreleasedReturnValue();

    v117 = 0u;
    v118 = 0u;
    v115 = 0u;
    v116 = 0u;
    objc_msgSend(v33, "accessories");
    v45 = (void *)objc_claimAutoreleasedReturnValue();
    v46 = objc_msgSend(v45, "countByEnumeratingWithState:objects:count:", &v115, buf, 16);
    if (v46)
    {
      v47 = *(_QWORD *)v116;
      do
      {
        for (i = 0; i != v46; ++i)
        {
          if (*(_QWORD *)v116 != v47)
            objc_enumerationMutation(v45);
          v49 = *(void **)(*((_QWORD *)&v115 + 1) + 8 * i);
          objc_msgSend(v49, "uniqueIdentifier");
          v50 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v44, "setObject:forKey:", v49, v50);

        }
        v46 = objc_msgSend(v45, "countByEnumeratingWithState:objects:count:", &v115, buf, 16);
      }
      while (v46);
    }

    if (-[HMDHome hasNeverAddedAnyHAPAccessory](v35, "hasNeverAddedAnyHAPAccessory"))
    {
      -[HMDNewPairedAccessoryServerInfo pairingEvent](v87, "pairingEvent");
      v51 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v51, "setFirstHAPAccessoryInHome:", 1);

      -[HMDHome homeManager](v35, "homeManager");
      v52 = (void *)objc_claimAutoreleasedReturnValue();
      v53 = objc_msgSend(v52, "hasHAPAccessoryInAnyHome");
      -[HMDNewPairedAccessoryServerInfo pairingEvent](v87, "pairingEvent");
      v54 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v54, "setFirstHAPAccessoryInAnyHome:", v53 ^ 1u);

    }
    -[HMDNewPairedAccessoryServerInfo pairingEvent](v87, "pairingEvent");
    v55 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v33, "primaryAccessory");
    v56 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v55, "updateEventPropertiesWithHAPAccessory:", v56);

    v113[0] = 0;
    v113[1] = v113;
    v113[2] = 0x3032000000;
    v113[3] = __Block_byref_object_copy__14094;
    v113[4] = __Block_byref_object_dispose__14095;
    v114 = 0;
    v57 = objc_alloc(MEMORY[0x24BE3F168]);
    -[HMDHome workQueue](v35, "workQueue");
    v58 = (void *)objc_claimAutoreleasedReturnValue();
    v78 = (void *)objc_msgSend(v57, "initWithQueue:", v58);

    v112 = _HMFThreadLocalAsyncContextPush();
    if (-[HMDHome isSharedAdmin](v35, "isSharedAdmin"))
    {
      -[HMDNewPairedAccessoryServerInfo server](v87, "server");
      v59 = (void *)objc_claimAutoreleasedReturnValue();
      -[HMDHome _addOwnerToNewlyPairedAccessoryServer:](v35, "_addOwnerToNewlyPairedAccessoryServer:", v59);
      v77 = (void *)objc_claimAutoreleasedReturnValue();

    }
    else
    {
      objc_msgSend(MEMORY[0x24BE3F180], "futureWithNoValue");
      v77 = (void *)objc_claimAutoreleasedReturnValue();
    }
    v60 = MEMORY[0x24BDAC760];
    v109[0] = MEMORY[0x24BDAC760];
    v109[1] = 3221225472;
    v109[2] = __76__HMDHome__processNewlyPairedAccessoryServerInfo_message_completionHandler___block_invoke;
    v109[3] = &unk_24E785050;
    v109[4] = v35;
    v61 = v87;
    v110 = v61;
    v62 = v84;
    v111 = v62;
    objc_msgSend(v77, "then:", v109);
    v79 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v79, "timeout:", 180.0);
    v63 = (void *)objc_claimAutoreleasedReturnValue();
    v104[0] = v60;
    v104[1] = 3221225472;
    v104[2] = __76__HMDHome__processNewlyPairedAccessoryServerInfo_message_completionHandler___block_invoke_2;
    v104[3] = &unk_24E776440;
    v104[4] = v35;
    v108 = v113;
    v64 = v61;
    v105 = v64;
    v65 = v62;
    v106 = v65;
    v75 = v44;
    v107 = v75;
    objc_msgSend(v63, "then:", v104);
    v66 = (void *)objc_claimAutoreleasedReturnValue();
    v101[0] = v60;
    v101[1] = 3221225472;
    v101[2] = __76__HMDHome__processNewlyPairedAccessoryServerInfo_message_completionHandler___block_invoke_3;
    v101[3] = &unk_24E7764A8;
    v101[4] = v35;
    v103 = v113;
    v67 = v64;
    v102 = v67;
    objc_msgSend(v66, "then:", v101);
    v68 = (void *)objc_claimAutoreleasedReturnValue();
    v98[0] = v60;
    v98[1] = 3221225472;
    v98[2] = __76__HMDHome__processNewlyPairedAccessoryServerInfo_message_completionHandler___block_invoke_4;
    v98[3] = &unk_24E7764A8;
    v98[4] = v35;
    v74 = v33;
    v99 = v74;
    v100 = v113;
    objc_msgSend(v68, "then:", v98);
    v69 = (void *)objc_claimAutoreleasedReturnValue();
    v94[0] = v60;
    v94[1] = 3221225472;
    v94[2] = __76__HMDHome__processNewlyPairedAccessoryServerInfo_message_completionHandler___block_invoke_6;
    v94[3] = &unk_24E7764D0;
    v94[4] = v35;
    v97 = v113;
    v70 = v65;
    v95 = v70;
    v71 = v83;
    v96 = v71;
    objc_msgSend(v69, "then:", v94);
    v72 = (void *)objc_claimAutoreleasedReturnValue();
    v90[0] = v60;
    v90[1] = 3221225472;
    v90[2] = __76__HMDHome__processNewlyPairedAccessoryServerInfo_message_completionHandler___block_invoke_7;
    v90[3] = &unk_24E7764F8;
    v90[4] = v35;
    v91 = v67;
    v92 = v70;
    v93 = v71;
    v73 = (id)objc_msgSend(v72, "recover:", v90);

    _HMFThreadLocalAsyncContextPop();
    _Block_object_dispose(v113, 8);

  }
  __HMFActivityScopeLeave();

  __HMFActivityScopeLeave();
}

- (void)updateHomeFirstHAPAccessoryAddedDateToNow
{
  HMDHomeModel *v3;
  void *v4;
  void *v5;
  void *v6;
  id v7;
  void *v8;
  void *v9;
  void *v10;
  HMDHomeModel *v11;

  v3 = [HMDHomeModel alloc];
  -[HMDHome uuid](self, "uuid");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHome homeManager](self, "homeManager");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "uuid");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v11 = -[HMDBackingStoreModelObject initWithObjectChangeType:uuid:parentUUID:](v3, "initWithObjectChangeType:uuid:parentUUID:", 2, v4, v6);

  v7 = objc_alloc_init(MEMORY[0x24BDBCE60]);
  -[HMDHomeModel setFirstHAPAccessoryAddedDate:](v11, "setFirstHAPAccessoryAddedDate:", v7);

  -[HMDHome backingStore](self, "backingStore");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  +[HMDBackingStoreTransactionOptions defaultXPCOptions](HMDBackingStoreTransactionOptions, "defaultXPCOptions");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "transaction:options:", CFSTR("updateHomeFirstHAPAccessoryAddedDate"), v9);
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v10, "add:", v11);
  objc_msgSend(v10, "run");

}

- (void)_handleAddServiceGroup:(id)a3
{
  id v4;
  void *v5;
  unint64_t v6;
  void *v7;
  HMDHome *v8;
  NSObject *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  void *v13;
  void *v14;
  uint64_t v15;
  void *v16;
  unint64_t v17;
  unint64_t v18;
  void *v19;
  void *v20;
  HMDHome *v21;
  NSObject *v22;
  void *v23;
  void *v24;
  HMDHome *v25;
  NSObject *v26;
  void *v27;
  HMDServiceGroupModel *v28;
  void *v29;
  void *v30;
  HMDServiceGroupModel *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  HMDServiceGroupModel *v36;
  _QWORD v37[4];
  id v38;
  HMDServiceGroupModel *v39;
  uint8_t buf[4];
  void *v41;
  __int16 v42;
  void *v43;
  __int16 v44;
  void *v45;
  uint64_t v46;

  v46 = *MEMORY[0x24BDAC8D0];
  v4 = a3;
  objc_msgSend(v4, "stringForKey:", *MEMORY[0x24BDD7DA8]);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  if (v5)
  {
    v6 = HMMaxLengthForNaming();
    if (objc_msgSend(v5, "length") > v6)
    {
      v7 = (void *)MEMORY[0x227676638]();
      v8 = self;
      HMFGetOSLogHandle();
      v9 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543362;
        v41 = v10;
        _os_log_impl(&dword_2218F0000, v9, OS_LOG_TYPE_ERROR, "%{public}@New name is longer than the pre-defined max length", buf, 0xCu);

      }
      objc_autoreleasePoolPop(v7);
      v11 = (void *)MEMORY[0x24BDD1540];
      v12 = 46;
      goto LABEL_7;
    }
    -[HMDHome serviceGroupWithName:](self, "serviceGroupWithName:", v5);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    if (v13)
    {
      v14 = (void *)MEMORY[0x24BDD1540];
      v15 = 1;
    }
    else
    {
      -[HMDHome serviceGroups](self, "serviceGroups");
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      v17 = objc_msgSend(v16, "count");
      v18 = maximumServiceGroupsPerHome;

      if (v17 < v18)
      {
        -[HMDHome addName:](self, "addName:", v5);
        v19 = (void *)objc_claimAutoreleasedReturnValue();
        if (!v19)
        {
          v28 = [HMDServiceGroupModel alloc];
          objc_msgSend(v4, "uuidForKey:", CFSTR("kNewObjectUUIDKey"));
          v29 = (void *)objc_claimAutoreleasedReturnValue();
          -[HMDHome uuid](self, "uuid");
          v30 = (void *)objc_claimAutoreleasedReturnValue();
          v31 = -[HMDBackingStoreModelObject initWithObjectChangeType:uuid:parentUUID:](v28, "initWithObjectChangeType:uuid:parentUUID:", 1, v29, v30);

          -[HMDServiceGroupModel setName:](v31, "setName:", v5);
          -[HMDHome backingStore](self, "backingStore");
          v32 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v4, "name");
          v33 = (void *)objc_claimAutoreleasedReturnValue();
          +[HMDBackingStoreTransactionOptions defaultXPCOptions](HMDBackingStoreTransactionOptions, "defaultXPCOptions");
          v34 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v32, "transaction:options:", v33, v34);
          v35 = (void *)objc_claimAutoreleasedReturnValue();

          objc_msgSend(v35, "add:", v31);
          v37[0] = MEMORY[0x24BDAC760];
          v37[1] = 3221225472;
          v37[2] = __34__HMDHome__handleAddServiceGroup___block_invoke;
          v37[3] = &unk_24E79BCC8;
          v38 = v4;
          v39 = v31;
          v36 = v31;
          objc_msgSend(v35, "run:", v37);

          goto LABEL_20;
        }
        v20 = (void *)MEMORY[0x227676638]();
        v21 = self;
        HMFGetOSLogHandle();
        v22 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
        {
          HMFGetLogIdentifier();
          v23 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543874;
          v41 = v23;
          v42 = 2112;
          v43 = v5;
          v44 = 2112;
          v45 = v19;
          _os_log_impl(&dword_2218F0000, v22, OS_LOG_TYPE_ERROR, "%{public}@Can't add service group %@; namespace error %@",
            buf,
            0x20u);

        }
        objc_autoreleasePoolPop(v20);
LABEL_19:
        objc_msgSend(v4, "respondWithError:", v19);
LABEL_20:

        goto LABEL_21;
      }
      v24 = (void *)MEMORY[0x227676638]();
      v25 = self;
      HMFGetOSLogHandle();
      v26 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v27 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        v41 = v27;
        v42 = 2112;
        v43 = v5;
        _os_log_impl(&dword_2218F0000, v26, OS_LOG_TYPE_ERROR, "%{public}@Can't add service group %@; already at maximum service groups for home",
          buf,
          0x16u);

      }
      objc_autoreleasePoolPop(v24);
      v14 = (void *)MEMORY[0x24BDD1540];
      v15 = 49;
    }
    objc_msgSend(v14, "hmErrorWithCode:", v15);
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    goto LABEL_19;
  }
  v11 = (void *)MEMORY[0x24BDD1540];
  v12 = 20;
LABEL_7:
  objc_msgSend(v11, "hmErrorWithCode:", v12);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "respondWithError:", v13);
LABEL_21:

}

- (void)_handleAddServiceGroupModel:(id)a3 message:(id)a4
{
  id v6;
  id v7;
  void *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  HMDServiceGroup *v12;
  void *v13;
  HMDServiceGroup *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  HMDHome *v24;
  NSObject *v25;
  uint64_t v26;
  void *v27;
  void *v28;
  HMDHome *v29;
  NSObject *v30;
  void *v31;
  void *v32;
  uint8_t buf[4];
  void *v34;
  __int16 v35;
  uint64_t v36;
  uint64_t v37;

  v37 = *MEMORY[0x24BDAC8D0];
  v6 = a3;
  v7 = a4;
  objc_msgSend(v6, "name");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "uuid");
  v9 = objc_claimAutoreleasedReturnValue();
  v10 = (void *)v9;
  if (v8 && v9)
  {
    objc_msgSend(v8, "hm_truncatedNameString");
    v11 = objc_claimAutoreleasedReturnValue();

    v12 = [HMDServiceGroup alloc];
    -[HMDHome workQueue](self, "workQueue");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    v14 = -[HMDServiceGroup initWithName:uuid:home:queue:](v12, "initWithName:uuid:home:queue:", v11, v10, self, v13);

    -[HMDHome serviceGroups](self, "serviceGroups");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v15, "addObject:", v14);

    -[HMDHome msgDispatcher](self, "msgDispatcher");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHome workQueue](self, "workQueue");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDServiceGroup configure:queue:](v14, "configure:queue:", v16, v17);

    -[HMDServiceGroup updateServiceGroupWithModel:message:](v14, "updateServiceGroupWithModel:message:", v6, v7);
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "transactionResult");
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v19, "markChanged");
    -[HMDServiceGroup serviceUUIDs](v14, "serviceUUIDs");
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    v21 = objc_msgSend(v20, "count");

    if (v21)
      v22 = objc_msgSend(v19, "markSaveToAssistant");
    v23 = (void *)MEMORY[0x227676638](v22);
    v24 = self;
    HMFGetOSLogHandle();
    v25 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v25, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v32 = v10;
      v26 = v11;
      v27 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v34 = v27;
      v35 = 2112;
      v36 = v26;
      _os_log_impl(&dword_2218F0000, v25, OS_LOG_TYPE_INFO, "%{public}@Add service group: %@", buf, 0x16u);

      v11 = v26;
      v10 = v32;
    }

    objc_autoreleasePoolPop(v23);
    objc_msgSend(v7, "respondWithPayload:error:", 0, v18);

    v8 = (void *)v11;
  }
  else
  {
    v28 = (void *)MEMORY[0x227676638]();
    v29 = self;
    HMFGetOSLogHandle();
    v30 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v31 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v34 = v31;
      v35 = 2112;
      v36 = (uint64_t)v8;
      _os_log_impl(&dword_2218F0000, v30, OS_LOG_TYPE_ERROR, "%{public}@Can't add service group %@; invalid parameter",
        buf,
        0x16u);

    }
    objc_autoreleasePoolPop(v28);
    objc_msgSend(MEMORY[0x24BDD1540], "hmErrorWithCode:", 3);
    v14 = (HMDServiceGroup *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "respondWithError:", v14);
  }

}

- (void)_handleRemoveServiceGroup:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  HMDServiceGroupModel *v7;
  void *v8;
  HMDServiceGroupModel *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  _QWORD v14[4];
  id v15;

  v4 = a3;
  objc_msgSend(v4, "uuidForKey:", *MEMORY[0x24BDD7DC8]);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHome serviceGroupWithUUID:](self, "serviceGroupWithUUID:", v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  if (v6)
  {
    v7 = [HMDServiceGroupModel alloc];
    -[HMDHome uuid](self, "uuid");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = -[HMDBackingStoreModelObject initWithObjectChangeType:uuid:parentUUID:](v7, "initWithObjectChangeType:uuid:parentUUID:", 3, v5, v8);

    -[HMDHome backingStore](self, "backingStore");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "name");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    +[HMDBackingStoreTransactionOptions defaultXPCOptions](HMDBackingStoreTransactionOptions, "defaultXPCOptions");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "transaction:options:", v11, v12);
    v13 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v13, "add:", v9);
    v14[0] = MEMORY[0x24BDAC760];
    v14[1] = 3221225472;
    v14[2] = __37__HMDHome__handleRemoveServiceGroup___block_invoke;
    v14[3] = &unk_24E79BD80;
    v15 = v4;
    objc_msgSend(v13, "run:", v14);

  }
  else
  {
    objc_msgSend(MEMORY[0x24BDD1540], "hmErrorWithCode:", 2);
    v9 = (HMDServiceGroupModel *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "respondWithError:", v9);
  }

}

- (void)_handleRemoveServiceGroupModel:(id)a3 message:(id)a4
{
  id v6;
  id v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  id v12;
  void *v13;
  void *v14;
  void *v15;
  HMDHome *v16;
  NSObject *v17;
  void *v18;
  void *v19;
  int v20;
  void *v21;
  __int16 v22;
  void *v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v6 = a3;
  v7 = a4;
  objc_msgSend(v6, "uuid");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHome serviceGroupWithUUID:](self, "serviceGroupWithUUID:", v8);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = v9;
  if (v9)
  {
    objc_msgSend(v9, "name");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v12 = -[HMDHome removeName:](self, "removeName:", v11);

    -[HMDHome serviceGroups](self, "serviceGroups");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "removeObject:", v10);

    objc_msgSend(v7, "transactionResult");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v14, "markChanged");
    v15 = (void *)MEMORY[0x227676638](objc_msgSend(v14, "markSaveToAssistant"));
    v16 = self;
    HMFGetOSLogHandle();
    v17 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v10, "name");
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      v20 = 138543618;
      v21 = v18;
      v22 = 2112;
      v23 = v19;
      _os_log_impl(&dword_2218F0000, v17, OS_LOG_TYPE_INFO, "%{public}@Remove service group: %@", (uint8_t *)&v20, 0x16u);

    }
    objc_autoreleasePoolPop(v15);
    objc_msgSend(v7, "respondWithSuccess");
  }
  else
  {
    objc_msgSend(MEMORY[0x24BDD1540], "hmErrorWithCode:", 2);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "respondWithError:", v14);
  }

}

- (id)builtInActionSetInfo
{
  void *v3;
  NSObject *v4;
  id v5;
  void *v6;
  id v7;
  _QWORD v9[5];
  id v10;

  objc_msgSend(MEMORY[0x24BDBCEB8], "array");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHome workQueue](self, "workQueue");
  v4 = objc_claimAutoreleasedReturnValue();
  v9[0] = MEMORY[0x24BDAC760];
  v9[1] = 3221225472;
  v9[2] = __31__HMDHome_builtInActionSetInfo__block_invoke;
  v9[3] = &unk_24E79C268;
  v9[4] = self;
  v5 = v3;
  v10 = v5;
  dispatch_sync(v4, v9);

  v6 = v10;
  v7 = v5;

  return v7;
}

- (void)_handleAddActionSet:(id)a3
{
  id v4;
  void *v5;
  HMDHome *v6;
  NSObject *v7;
  void *v8;
  id v9;
  void *v10;
  unint64_t v11;
  void *v12;
  HMDHome *v13;
  NSObject *v14;
  void *v15;
  void *v16;
  void *v17;
  HMDAddActionSetLogEvent *v18;
  void *v19;
  HMDAddActionSetLogEvent *v20;
  void *v21;
  int v22;
  void *v23;
  __int16 v24;
  id v25;
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  v4 = a3;
  v5 = (void *)MEMORY[0x227676638]();
  v6 = self;
  HMFGetOSLogHandle();
  v7 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v22 = 138543618;
    v23 = v8;
    v24 = 2112;
    v25 = v4;
    _os_log_impl(&dword_2218F0000, v7, OS_LOG_TYPE_INFO, "%{public}@Received a request to add a new action set : %@", (uint8_t *)&v22, 0x16u);

  }
  objc_autoreleasePoolPop(v5);
  objc_msgSend(v4, "stringForKey:", CFSTR("kActionSetType"));
  v9 = (id)objc_claimAutoreleasedReturnValue();
  if (!v9)
    v9 = (id)*MEMORY[0x24BDD5220];
  objc_msgSend(v4, "stringForKey:", CFSTR("kActionSetName"));
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v11 = HMMaxLengthForNaming();
  if (objc_msgSend(v10, "length") <= v11)
  {
    -[HMDHome logEventSubmitter](v6, "logEventSubmitter");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    v18 = [HMDAddActionSetLogEvent alloc];
    -[HMDHome uuid](v6, "uuid");
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    v20 = -[HMDAddActionSetLogEvent initWithActionSetType:homeUUID:](v18, "initWithActionSetType:homeUUID:", v9, v19);
    objc_msgSend(v17, "submitLogEvent:", v20);

    objc_msgSend(v4, "name");
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    LODWORD(v20) = objc_msgSend(v21, "isEqualToString:", *MEMORY[0x24BDD5250]);

    if ((_DWORD)v20)
    {
      -[HMDHome _handleAddActionSetFromBuilder:](v6, "_handleAddActionSetFromBuilder:", v4);
    }
    else if (objc_msgSend(v9, "isEqualToString:", *MEMORY[0x24BDD5218]))
    {
      -[HMDHome _handleAddTriggerOwnedActionSet:](v6, "_handleAddTriggerOwnedActionSet:", v4);
    }
    else
    {
      -[HMDHome _handleAddHomeOwnedActionSet:](v6, "_handleAddHomeOwnedActionSet:", v4);
    }
  }
  else
  {
    v12 = (void *)MEMORY[0x227676638]();
    v13 = v6;
    HMFGetOSLogHandle();
    v14 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      v22 = 138543362;
      v23 = v15;
      _os_log_impl(&dword_2218F0000, v14, OS_LOG_TYPE_ERROR, "%{public}@New name is longer than the pre-defined max length", (uint8_t *)&v22, 0xCu);

    }
    objc_autoreleasePoolPop(v12);
    objc_msgSend(MEMORY[0x24BDD1540], "hmErrorWithCode:", 46);
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "respondWithError:", v16);

  }
}

- (void)_handleAddActionSetFromBuilder:(id)a3
{
  id v4;
  void *v5;
  HMDHome *v6;
  NSObject *v7;
  void *v8;
  void *v9;
  void *v10;
  id v11;
  void *v12;
  uint64_t v13;
  void *v14;
  void *v15;
  id v16;
  void *v17;
  uint64_t v18;
  id v19;
  void *v20;
  HMDHome *v21;
  NSObject *v22;
  void *v23;
  void *v24;
  void *v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  void *v29;
  HMDHome *v30;
  NSObject *v31;
  void *v32;
  void *v33;
  HMDHome *v34;
  NSObject *v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  id v43;
  id v44;
  _QWORD v45[5];
  id v46;
  id v47;
  id v48;
  id v49;
  id v50;
  uint8_t buf[4];
  void *v52;
  __int16 v53;
  void *v54;
  __int16 v55;
  id v56;
  uint64_t v57;

  v57 = *MEMORY[0x24BDAC8D0];
  v4 = a3;
  v5 = (void *)MEMORY[0x227676638]();
  v6 = self;
  HMFGetOSLogHandle();
  v7 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543362;
    v52 = v8;
    _os_log_impl(&dword_2218F0000, v7, OS_LOG_TYPE_INFO, "%{public}@Adding Home owned action set (from builder)", buf, 0xCu);

  }
  objc_autoreleasePoolPop(v5);
  objc_msgSend(v4, "uuidForKey:", CFSTR("kNewObjectUUIDKey"));
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = v9;
  if (v9)
  {
    v11 = v9;
  }
  else
  {
    objc_msgSend(MEMORY[0x24BDD1880], "UUID");
    v11 = (id)objc_claimAutoreleasedReturnValue();
  }
  v12 = v11;

  objc_msgSend(v4, "stringForKey:", CFSTR("kActionSetType"));
  v13 = objc_claimAutoreleasedReturnValue();
  v14 = (void *)v13;
  v15 = (void *)*MEMORY[0x24BDD5220];
  if (v13)
    v15 = (void *)v13;
  v16 = v15;

  objc_msgSend(v4, "stringForKey:", CFSTR("kActionSetName"));
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHome actionSetWithName:](v6, "actionSetWithName:", v17);
  v18 = objc_claimAutoreleasedReturnValue();
  if (!v18)
  {
    -[HMDHome actionSets](v6, "actionSets");
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    v26 = objc_msgSend(v25, "count");
    v27 = maximumActionSetsPerHome;

    if (v26 >= v27)
    {
      v33 = (void *)MEMORY[0x227676638]();
      v34 = v6;
      HMFGetOSLogHandle();
      v35 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v35, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v36 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        v52 = v36;
        v53 = 2112;
        v54 = v17;
        _os_log_impl(&dword_2218F0000, v35, OS_LOG_TYPE_ERROR, "%{public}@Can't add action set %@; already at maximum action sets for home",
          buf,
          0x16u);

      }
      objc_autoreleasePoolPop(v33);
      objc_msgSend(MEMORY[0x24BDD1540], "hmErrorWithCode:", 49);
      v19 = (id)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      -[HMDHome addActionSetName:](v6, "addActionSetName:", v17);
      v28 = objc_claimAutoreleasedReturnValue();
      if (!v28)
      {
        -[HMDHome backingStore](v6, "backingStore");
        v37 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v4, "name");
        v38 = (void *)objc_claimAutoreleasedReturnValue();
        +[HMDBackingStoreTransactionOptions defaultXPCOptions](HMDBackingStoreTransactionOptions, "defaultXPCOptions");
        v39 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v37, "transaction:options:", v38, v39);
        v40 = (void *)objc_claimAutoreleasedReturnValue();

        objc_msgSend(v4, "messagePayload");
        v41 = (void *)objc_claimAutoreleasedReturnValue();
        v49 = 0;
        v50 = 0;
        -[HMDHome _createActionSetWithUUID:name:type:fromDictionary:transaction:response:error:](v6, v12, v17, v16, v41, v40, &v50, &v49);
        v42 = (void *)objc_claimAutoreleasedReturnValue();
        v43 = v50;
        v19 = v49;

        if (v42)
        {
          v45[0] = MEMORY[0x24BDAC760];
          v45[1] = 3221225472;
          v45[2] = __42__HMDHome__handleAddActionSetFromBuilder___block_invoke;
          v45[3] = &unk_24E792CD8;
          v45[4] = v6;
          v46 = v17;
          v47 = v4;
          v48 = v43;
          objc_msgSend(v40, "run:", v45);

        }
        else
        {
          v44 = -[HMDHome removeName:](v6, "removeName:", v17);
          objc_msgSend(v4, "respondWithError:", v19);
        }

        goto LABEL_21;
      }
      v19 = (id)v28;
      v29 = (void *)MEMORY[0x227676638]();
      v30 = v6;
      HMFGetOSLogHandle();
      v31 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v32 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543874;
        v52 = v32;
        v53 = 2112;
        v54 = v17;
        v55 = 2112;
        v56 = v19;
        _os_log_impl(&dword_2218F0000, v31, OS_LOG_TYPE_ERROR, "%{public}@Can't add action set %@; namespace error %@",
          buf,
          0x20u);

      }
      objc_autoreleasePoolPop(v29);
    }
    objc_msgSend(v4, "respondWithError:", v19);
    goto LABEL_21;
  }
  v19 = (id)v18;
  v20 = (void *)MEMORY[0x227676638]();
  v21 = v6;
  HMFGetOSLogHandle();
  v22 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
  {
    HMFGetLogIdentifier();
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543618;
    v52 = v23;
    v53 = 2112;
    v54 = v17;
    _os_log_impl(&dword_2218F0000, v22, OS_LOG_TYPE_ERROR, "%{public}@Can't add action set %@ as it already exists.", buf, 0x16u);

  }
  objc_autoreleasePoolPop(v20);
  objc_msgSend(MEMORY[0x24BDD1540], "hmErrorWithCode:", 1);
  v24 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "respondWithError:", v24);

LABEL_21:
}

- (void)_handleAddTriggerOwnedActionSet:(id)a3
{
  id v4;
  void *v5;
  HMDHome *v6;
  NSObject *v7;
  void *v8;
  HMDActionSetModel *v9;
  void *v10;
  void *v11;
  HMDActionSetModel *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  int v18;
  void *v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  v4 = a3;
  v5 = (void *)MEMORY[0x227676638]();
  v6 = self;
  HMFGetOSLogHandle();
  v7 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v18 = 138543362;
    v19 = v8;
    _os_log_impl(&dword_2218F0000, v7, OS_LOG_TYPE_INFO, "%{public}@Adding trigger owned action set", (uint8_t *)&v18, 0xCu);

  }
  objc_autoreleasePoolPop(v5);
  v9 = [HMDActionSetModel alloc];
  objc_msgSend(v4, "uuidForKey:", CFSTR("kNewObjectUUIDKey"));
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHome uuid](v6, "uuid");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v12 = -[HMDBackingStoreModelObject initWithObjectChangeType:uuid:parentUUID:](v9, "initWithObjectChangeType:uuid:parentUUID:", 1, v10, v11);

  objc_msgSend(v4, "stringForKey:", CFSTR("kActionSetName"));
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDActionSetModel setName:](v12, "setName:", v13);

  -[HMDActionSetModel setType:](v12, "setType:", *MEMORY[0x24BDD5218]);
  -[HMDHome backingStore](v6, "backingStore");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "name");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  +[HMDBackingStoreTransactionOptions defaultXPCOptions](HMDBackingStoreTransactionOptions, "defaultXPCOptions");
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v14, "transaction:options:", v15, v16);
  v17 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v17, "add:withMessage:", v12, v4);
  objc_msgSend(v17, "run");

}

- (void)_handleAddHomeOwnedActionSet:(id)a3
{
  id v4;
  void *v5;
  HMDHome *v6;
  NSObject *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  HMDHome *v12;
  NSObject *v13;
  void *v14;
  void *v15;
  uint64_t v16;
  void *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  void *v21;
  void *v22;
  HMDHome *v23;
  NSObject *v24;
  void *v25;
  void *v26;
  HMDHome *v27;
  NSObject *v28;
  void *v29;
  HMDActionSetModel *v30;
  void *v31;
  void *v32;
  HMDActionSetModel *v33;
  void *v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  int v42;
  void *v43;
  __int16 v44;
  void *v45;
  __int16 v46;
  void *v47;
  uint64_t v48;

  v48 = *MEMORY[0x24BDAC8D0];
  v4 = a3;
  v5 = (void *)MEMORY[0x227676638]();
  v6 = self;
  HMFGetOSLogHandle();
  v7 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v42 = 138543362;
    v43 = v8;
    _os_log_impl(&dword_2218F0000, v7, OS_LOG_TYPE_INFO, "%{public}@Adding Home owned action set", (uint8_t *)&v42, 0xCu);

  }
  objc_autoreleasePoolPop(v5);
  objc_msgSend(v4, "stringForKey:", CFSTR("kActionSetName"));
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHome actionSetWithName:](v6, "actionSetWithName:", v9);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  if (v10)
  {
    v11 = (void *)MEMORY[0x227676638]();
    v12 = v6;
    HMFGetOSLogHandle();
    v13 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      v42 = 138543618;
      v43 = v14;
      v44 = 2112;
      v45 = v9;
      _os_log_impl(&dword_2218F0000, v13, OS_LOG_TYPE_ERROR, "%{public}@Can't add action set %@ as it already exists.", (uint8_t *)&v42, 0x16u);

    }
    objc_autoreleasePoolPop(v11);
    v15 = (void *)MEMORY[0x24BDD1540];
    v16 = 1;
LABEL_15:
    objc_msgSend(v15, "hmErrorWithCode:", v16);
    v21 = (void *)objc_claimAutoreleasedReturnValue();
LABEL_16:
    objc_msgSend(v4, "respondWithError:", v21);
    goto LABEL_17;
  }
  -[HMDHome actionSets](v6, "actionSets");
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  v18 = objc_msgSend(v17, "count");
  v19 = maximumActionSetsPerHome;

  if (v18 >= v19)
  {
    v26 = (void *)MEMORY[0x227676638]();
    v27 = v6;
    HMFGetOSLogHandle();
    v28 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v29 = (void *)objc_claimAutoreleasedReturnValue();
      v42 = 138543618;
      v43 = v29;
      v44 = 2112;
      v45 = v9;
      _os_log_impl(&dword_2218F0000, v28, OS_LOG_TYPE_ERROR, "%{public}@Can't add action set %@; already at maximum action sets for home",
        (uint8_t *)&v42,
        0x16u);

    }
    objc_autoreleasePoolPop(v26);
    v15 = (void *)MEMORY[0x24BDD1540];
    v16 = 49;
    goto LABEL_15;
  }
  -[HMDHome addActionSetName:](v6, "addActionSetName:", v9);
  v20 = objc_claimAutoreleasedReturnValue();
  if (v20)
  {
    v21 = (void *)v20;
    v22 = (void *)MEMORY[0x227676638]();
    v23 = v6;
    HMFGetOSLogHandle();
    v24 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v25 = (void *)objc_claimAutoreleasedReturnValue();
      v42 = 138543874;
      v43 = v25;
      v44 = 2112;
      v45 = v9;
      v46 = 2112;
      v47 = v21;
      _os_log_impl(&dword_2218F0000, v24, OS_LOG_TYPE_ERROR, "%{public}@Can't add action set %@; namespace error %@",
        (uint8_t *)&v42,
        0x20u);

    }
    objc_autoreleasePoolPop(v22);
    goto LABEL_16;
  }
  v30 = [HMDActionSetModel alloc];
  objc_msgSend(v4, "uuidForKey:", CFSTR("kNewObjectUUIDKey"));
  v31 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHome uuid](v6, "uuid");
  v32 = (void *)objc_claimAutoreleasedReturnValue();
  v33 = -[HMDBackingStoreModelObject initWithObjectChangeType:uuid:parentUUID:](v30, "initWithObjectChangeType:uuid:parentUUID:", 1, v31, v32);

  objc_msgSend(v4, "stringForKey:", CFSTR("kActionSetName"));
  v34 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDActionSetModel setName:](v33, "setName:", v34);

  objc_msgSend(v4, "stringForKey:", CFSTR("kActionSetType"));
  v35 = objc_claimAutoreleasedReturnValue();
  v36 = (void *)v35;
  if (v35)
    v37 = v35;
  else
    v37 = *MEMORY[0x24BDD5220];
  -[HMDActionSetModel setType:](v33, "setType:", v37);
  -[HMDHome backingStore](v6, "backingStore");
  v38 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "name");
  v39 = (void *)objc_claimAutoreleasedReturnValue();
  +[HMDBackingStoreTransactionOptions defaultXPCOptions](HMDBackingStoreTransactionOptions, "defaultXPCOptions");
  v40 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v38, "transaction:options:", v39, v40);
  v41 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v41, "add:withMessage:", v33, v4);
  objc_msgSend(v41, "run");

  v21 = 0;
LABEL_17:

}

- (void)_handleAddActionSetModel:(id)a3 message:(id)a4
{
  id v6;
  id v7;
  id v8;
  HMDHome *v9;
  void *v10;
  void *v11;
  void *v12;
  id v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  int v18;
  void *v19;
  void *v20;
  HMDHome *v21;
  NSObject *v22;
  void *v23;
  void *v24;
  void *v25;
  uint64_t v26;
  HMDHome *v27;
  id v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  HMDHome *v37;
  NSObject *v38;
  void *v39;
  void *v40;
  void *v41;
  id v42;
  void *v43;
  void *v44;
  id v45;
  const __CFString *v46;
  _BYTE v47[12];
  __int16 v48;
  void *v49;
  _QWORD v50[4];
  _BYTE buf[24];
  void *v52;
  uint64_t v53;

  v53 = *MEMORY[0x24BDAC8D0];
  v6 = a3;
  v7 = a4;
  v8 = v6;
  v9 = self;
  objc_msgSend(v8, "name");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "uuid");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "type");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  if (v12)
  {
    objc_msgSend(v8, "type");
    v13 = (id)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v13 = (id)*MEMORY[0x24BDD5220];
  }
  v14 = v13;

  -[HMDHome createActionSetWithName:uuid:type:](v9, "createActionSetWithName:uuid:type:", v10, v11, v14);
  v15 = (void *)objc_claimAutoreleasedReturnValue();

  if (v15)
  {
    objc_msgSend(v7, "transactionResult");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v16, "markChanged");
    objc_msgSend(v8, "type");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    v18 = objc_msgSend(v17, "isEqualToString:", *MEMORY[0x24BDD5218]);

    if (v18)
    {
      -[HMDHome triggerOwnedActionSets](v9, "triggerOwnedActionSets");
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v19, "addObject:", v15);

    }
    else
    {
      -[HMDHome actionSets](v9, "actionSets");
      v24 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v24, "addObject:", v15);

      objc_msgSend(v15, "actions");
      v25 = (void *)objc_claimAutoreleasedReturnValue();
      v26 = objc_msgSend(v25, "count");

      if (v26)
        objc_msgSend(v16, "markSaveToAssistant");
    }
    v43 = v16;
    v27 = v9;
    v44 = v15;
    v28 = v15;
    v45 = v7;
    v42 = v7;
    v50[0] = CFSTR("kHomeUUID");
    -[HMDHome uuid](v27, "uuid");
    v29 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v29, "UUIDString");
    v30 = (void *)objc_claimAutoreleasedReturnValue();
    *(_QWORD *)buf = v30;
    v50[1] = CFSTR("kActionSetName");
    objc_msgSend(v28, "name");
    v31 = (void *)objc_claimAutoreleasedReturnValue();
    *(_QWORD *)&buf[8] = v31;
    v50[2] = CFSTR("kActionSetUUID");
    objc_msgSend(v28, "uuid");
    v32 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v32, "UUIDString");
    v33 = (void *)objc_claimAutoreleasedReturnValue();
    *(_QWORD *)&buf[16] = v33;
    v50[3] = CFSTR("kActionSetType");
    objc_msgSend(v28, "type");
    v34 = (void *)objc_claimAutoreleasedReturnValue();
    v52 = v34;
    objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", buf, v50, 4);
    v35 = (void *)objc_claimAutoreleasedReturnValue();

    v36 = (void *)MEMORY[0x227676638]();
    v37 = v27;
    HMFGetOSLogHandle();
    v38 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v38, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v39 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)v47 = 138543618;
      *(_QWORD *)&v47[4] = v39;
      v48 = 2112;
      v49 = v35;
      _os_log_impl(&dword_2218F0000, v38, OS_LOG_TYPE_INFO, "%{public}@Add action set finished. Responding to clients with : %@", v47, 0x16u);

    }
    objc_autoreleasePoolPop(v36);
    -[HMDHome notificationCenter](v37, "notificationCenter");
    v40 = (void *)objc_claimAutoreleasedReturnValue();
    v46 = CFSTR("HMDActionSetNotificationKey");
    *(_QWORD *)v47 = v28;
    objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v47, &v46, 1);
    v41 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v40, "postNotificationName:object:userInfo:", CFSTR("HMDActionSetAddedNotification"), v37, v41);

    objc_msgSend(v42, "respondWithPayload:", v35);
    v15 = v44;
    v7 = v45;
  }
  else
  {
    v20 = (void *)MEMORY[0x227676638]();
    v21 = v9;
    HMFGetOSLogHandle();
    v22 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v23 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      *(_QWORD *)&buf[4] = v23;
      *(_WORD *)&buf[12] = 2112;
      *(_QWORD *)&buf[14] = v7;
      _os_log_impl(&dword_2218F0000, v22, OS_LOG_TYPE_ERROR, "%{public}@Unable to create action set model. %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v20);
  }

}

- (void)_handleRemoveActionSet:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  int v9;
  void *v10;
  HMDHome *v11;
  NSObject *v12;
  void *v13;
  void *v14;
  uint64_t v15;
  void *v16;
  HMDHome *v17;
  NSObject *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  HMDActionSetModel *v23;
  void (**v24)(_QWORD, _QWORD, _QWORD);
  void *v25;
  HMDHome *v26;
  NSObject *v27;
  void *v28;
  void *v29;
  HMDActionSetModel *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  int v36;
  void *v37;
  __int16 v38;
  void *v39;
  uint64_t v40;

  v40 = *MEMORY[0x24BDAC8D0];
  v4 = a3;
  objc_msgSend(v4, "uuidForKey:", CFSTR("kActionSetUUID"));
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHome actionSetWithUUID:](self, "actionSetWithUUID:", v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = v6;
  if (!v6)
  {
    v16 = (void *)MEMORY[0x227676638]();
    v17 = self;
    HMFGetOSLogHandle();
    v18 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      v36 = 138543618;
      v37 = v19;
      v38 = 2112;
      v39 = v5;
      _os_log_impl(&dword_2218F0000, v18, OS_LOG_TYPE_ERROR, "%{public}@Did not find the action set with UUID : %@", (uint8_t *)&v36, 0x16u);

    }
    objc_autoreleasePoolPop(v16);
    v14 = (void *)MEMORY[0x24BDD1540];
    v15 = 2;
    goto LABEL_9;
  }
  objc_msgSend(v6, "type");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = objc_msgSend(v8, "isEqualToString:", *MEMORY[0x24BDD5218]);

  if (v9)
  {
    v10 = (void *)MEMORY[0x227676638]();
    v11 = self;
    HMFGetOSLogHandle();
    v12 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      v36 = 138543618;
      v37 = v13;
      v38 = 2112;
      v39 = v7;
      _os_log_impl(&dword_2218F0000, v12, OS_LOG_TYPE_ERROR, "%{public}@Removing this action Set is not supported. : %@", (uint8_t *)&v36, 0x16u);

    }
    objc_autoreleasePoolPop(v10);
    v14 = (void *)MEMORY[0x24BDD1540];
    v15 = 48;
LABEL_9:
    objc_msgSend(v14, "hmErrorWithCode:", v15);
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "respondWithError:", v20);
    goto LABEL_16;
  }
  +[HMDHome getBuiltinActionSets](HMDHome, "getBuiltinActionSets");
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "type");
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v20, "objectForKey:", v21);
  v22 = (void *)objc_claimAutoreleasedReturnValue();

  if (v22)
  {
    objc_msgSend(MEMORY[0x24BDD1540], "errorWithDomain:code:userInfo:", *MEMORY[0x24BDD5BD8], 83, 0);
    v23 = (HMDActionSetModel *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "responseHandler");
    v24 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
    ((void (**)(_QWORD, HMDActionSetModel *, _QWORD))v24)[2](v24, v23, 0);

    v25 = (void *)MEMORY[0x227676638]();
    v26 = self;
    HMFGetOSLogHandle();
    v27 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v28 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v7, "type");
      v29 = (void *)objc_claimAutoreleasedReturnValue();
      v36 = 138543618;
      v37 = v28;
      v38 = 2112;
      v39 = v29;
      _os_log_impl(&dword_2218F0000, v27, OS_LOG_TYPE_ERROR, "%{public}@Cannot remove built in action set : %@", (uint8_t *)&v36, 0x16u);

    }
    objc_autoreleasePoolPop(v25);
    objc_msgSend(v4, "respondWithError:", v23);
  }
  else
  {
    v30 = [HMDActionSetModel alloc];
    -[HMDHome uuid](self, "uuid");
    v31 = (void *)objc_claimAutoreleasedReturnValue();
    v23 = -[HMDBackingStoreModelObject initWithObjectChangeType:uuid:parentUUID:](v30, "initWithObjectChangeType:uuid:parentUUID:", 3, v5, v31);

    -[HMDHome backingStore](self, "backingStore");
    v32 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "name");
    v33 = (void *)objc_claimAutoreleasedReturnValue();
    +[HMDBackingStoreTransactionOptions defaultXPCOptions](HMDBackingStoreTransactionOptions, "defaultXPCOptions");
    v34 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v32, "transaction:options:", v33, v34);
    v35 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v35, "add:withMessage:", v23, v4);
    objc_msgSend(v35, "run");

  }
LABEL_16:

}

- (void)_handleRemoveActionSetModel:(id)a3 message:(id)a4
{
  id v6;
  id v7;
  void *v8;
  void *v9;
  NSObject *v10;
  id v11;
  void *v12;
  void *v13;
  void *v14;
  id v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  void *v22;
  int v23;
  void *v24;
  HMDHome *v25;
  NSObject *v26;
  _BOOL4 v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  HMDHome *v40;
  NSObject *v41;
  void *v42;
  void *v43;
  HMDHome *v44;
  NSObject *v45;
  void *v46;
  void *v47;
  id v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  _QWORD block[5];
  id v54;
  _QWORD v55[3];
  _QWORD v56[3];
  uint8_t v57[128];
  uint8_t buf[4];
  void *v59;
  __int16 v60;
  void *v61;
  uint64_t v62;

  v62 = *MEMORY[0x24BDAC8D0];
  v6 = a3;
  v7 = a4;
  objc_msgSend(v6, "uuid");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHome actionSetWithUUID:](self, "actionSetWithUUID:", v8);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  if (v9
    || (-[HMDHome triggerOwnedActionSetWithUUID:](self, "triggerOwnedActionSetWithUUID:", v8),
        (v9 = (void *)objc_claimAutoreleasedReturnValue()) != 0))
  {
    v48 = v6;
    -[HMDHome workQueue](self, "workQueue");
    v10 = objc_claimAutoreleasedReturnValue();
    block[0] = MEMORY[0x24BDAC760];
    block[1] = 3221225472;
    block[2] = __47__HMDHome__handleRemoveActionSetModel_message___block_invoke;
    block[3] = &unk_24E79C268;
    block[4] = self;
    v11 = v8;
    v54 = v11;
    dispatch_async(v10, block);

    -[HMDHome actionSetStateSubscriptionManager](self, "actionSetStateSubscriptionManager");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "stopAllMonitoringForActionSetUUID:completion:", v11, &__block_literal_global_1213);

    -[HMDHome actionSetStateObserver](self, "actionSetStateObserver");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "stopMonitoringActionSet:", v9);

    objc_msgSend(v9, "name");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    v15 = -[HMDHome removeName:](self, "removeName:", v14);

    v51 = 0u;
    v52 = 0u;
    v49 = 0u;
    v50 = 0u;
    -[HMDHome triggers](self, "triggers");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    v17 = objc_msgSend(v16, "countByEnumeratingWithState:objects:count:", &v49, v57, 16);
    if (v17)
    {
      v18 = v17;
      v19 = *(_QWORD *)v50;
      do
      {
        v20 = 0;
        do
        {
          if (*(_QWORD *)v50 != v19)
            objc_enumerationMutation(v16);
          objc_msgSend(*(id *)(*((_QWORD *)&v49 + 1) + 8 * v20++), "removeActionSet:postUpdate:", v9, 1);
        }
        while (v18 != v20);
        v18 = objc_msgSend(v16, "countByEnumeratingWithState:objects:count:", &v49, v57, 16);
      }
      while (v18);
    }

    objc_msgSend(v7, "transactionResult");
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v21, "markChanged");
    objc_msgSend(v9, "type");
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    v23 = objc_msgSend(v22, "isEqualToString:", *MEMORY[0x24BDD5218]);

    v24 = (void *)MEMORY[0x227676638]();
    v25 = self;
    HMFGetOSLogHandle();
    v26 = objc_claimAutoreleasedReturnValue();
    v27 = os_log_type_enabled(v26, OS_LOG_TYPE_INFO);
    if (v23)
    {
      if (v27)
      {
        HMFGetLogIdentifier();
        v28 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v9, "name");
        v29 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        v59 = v28;
        v60 = 2112;
        v61 = v29;
        _os_log_impl(&dword_2218F0000, v26, OS_LOG_TYPE_INFO, "%{public}@Remove trigger owned action set: %@", buf, 0x16u);

      }
      objc_autoreleasePoolPop(v24);
      -[HMDHome triggerOwnedActionSets](v25, "triggerOwnedActionSets");
      v30 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v30, "removeObject:", v9);

    }
    else
    {
      if (v27)
      {
        HMFGetLogIdentifier();
        v31 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v9, "name");
        v32 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        v59 = v31;
        v60 = 2112;
        v61 = v32;
        _os_log_impl(&dword_2218F0000, v26, OS_LOG_TYPE_INFO, "%{public}@Remove action set: %@", buf, 0x16u);

      }
      objc_autoreleasePoolPop(v24);
      -[HMDHome actionSets](v25, "actionSets");
      v33 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v33, "removeObject:", v9);

      objc_msgSend(v21, "markSaveToAssistant");
    }
    objc_msgSend(v9, "invalidate");
    v55[0] = CFSTR("kHomeUUID");
    -[HMDHome uuid](v25, "uuid");
    v34 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v34, "UUIDString");
    v35 = (void *)objc_claimAutoreleasedReturnValue();
    v56[0] = v35;
    v55[1] = CFSTR("kActionSetName");
    objc_msgSend(v9, "name");
    v36 = (void *)objc_claimAutoreleasedReturnValue();
    v56[1] = v36;
    v55[2] = CFSTR("kActionSetUUID");
    objc_msgSend(v11, "UUIDString");
    v37 = (void *)objc_claimAutoreleasedReturnValue();
    v56[2] = v37;
    objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v56, v55, 3);
    v38 = (void *)objc_claimAutoreleasedReturnValue();

    v39 = (void *)MEMORY[0x227676638](objc_msgSend(v7, "respondWithPayload:", v38));
    v40 = v25;
    HMFGetOSLogHandle();
    v41 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v41, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v42 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v59 = v42;
      v60 = 2112;
      v61 = v38;
      _os_log_impl(&dword_2218F0000, v41, OS_LOG_TYPE_INFO, "%{public}@Responding back to clients after removing actionSet: %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v39);

    v6 = v48;
  }
  else
  {
    v43 = (void *)MEMORY[0x227676638]();
    v44 = self;
    HMFGetOSLogHandle();
    v45 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v45, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v46 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v8, "UUIDString");
      v47 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v59 = v46;
      v60 = 2112;
      v61 = v47;
      _os_log_impl(&dword_2218F0000, v45, OS_LOG_TYPE_ERROR, "%{public}@Count not find action set with UUID: %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v43);
    objc_msgSend(MEMORY[0x24BDD1540], "hmErrorWithCode:", 2);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "respondWithError:", v9);
  }

}

- (void)executeActionSet:(id)a3
{
  id v5;
  id v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  NSObject *v11;
  id v12;
  id v13;
  _QWORD block[5];
  id v15;
  id v16;

  v5 = a3;
  v6 = objc_alloc(MEMORY[0x24BE3F138]);
  v7 = (void *)MEMORY[0x24BDD17C8];
  MEMORY[0x227675180](self, a2);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "stringWithFormat:", CFSTR("%@, %s:%ld"), v8, "/Library/Caches/com.apple.xbs/Sources/HomeKit_executables/Sources/homed/Home/HMDHome.m", 17151);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = (void *)objc_msgSend(v6, "initWithName:", v9);

  -[HMDHome workQueue](self, "workQueue");
  v11 = objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x24BDAC760];
  block[1] = 3221225472;
  block[2] = __28__HMDHome_executeActionSet___block_invoke;
  block[3] = &unk_24E79BBD0;
  block[4] = self;
  v15 = v5;
  v16 = v10;
  v12 = v10;
  v13 = v5;
  dispatch_async(v11, block);

}

- (void)_handleExecuteActionSet:(id)a3
{
  void *v4;
  void *v5;
  void *v6;
  char v7;
  void (**v8)(_QWORD, _QWORD, _QWORD);
  void *v9;
  id v10;

  v10 = a3;
  objc_msgSend(v10, "uuidForKey:", CFSTR("kActionSetUUID"));
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHome actionSetWithUUID:](self, "actionSetWithUUID:", v4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v5)
  {
    if (!isInternalBuild()
      || (-[HMDHome triggerOwnedActionSetWithUUID:](self, "triggerOwnedActionSetWithUUID:", v4),
          (v5 = (void *)objc_claimAutoreleasedReturnValue()) == 0))
    {
      objc_msgSend(MEMORY[0x24BDD1540], "errorWithDomain:code:userInfo:", *MEMORY[0x24BDD5BD8], 2, 0);
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v10, "responseHandler");
      v8 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
      ((void (**)(_QWORD, void *, _QWORD))v8)[2](v8, v5, 0);
      goto LABEL_10;
    }
  }
  objc_msgSend(v5, "type");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  if (!objc_msgSend(v6, "isEqualToString:", *MEMORY[0x24BDD5218]))
  {

    goto LABEL_9;
  }
  v7 = isInternalBuild();

  if ((v7 & 1) != 0)
  {
LABEL_9:
    +[HMDDonationHandler sharedDonationHandler](HMDDonationHandler, "sharedDonationHandler");
    v8 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "donateActionSet:withMessage:", v5, v10);
    objc_msgSend(v5, "execute:", v10);
    goto LABEL_10;
  }
  objc_msgSend(v10, "responseHandler");
  v8 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x24BDD1540], "hmErrorWithCode:", 48);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  ((void (**)(_QWORD, void *, _QWORD))v8)[2](v8, v9, 0);

LABEL_10:
}

- (void)_updateOwnedTriggers
{
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t i;
  void *v9;
  void *v10;
  void *v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  _BYTE v16[128];
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  objc_msgSend(MEMORY[0x24BDBCEB8], "array");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  v15 = 0u;
  -[HMDHome triggers](self, "triggers", 0);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
  if (v5)
  {
    v6 = v5;
    v7 = *(_QWORD *)v13;
    do
    {
      for (i = 0; i != v6; ++i)
      {
        if (*(_QWORD *)v13 != v7)
          objc_enumerationMutation(v4);
        v9 = *(void **)(*((_QWORD *)&v12 + 1) + 8 * i);
        if (objc_msgSend(v9, "isOwnedByThisDevice"))
        {
          objc_msgSend(v9, "uuid");
          v10 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v3, "addObject:", v10);

        }
      }
      v6 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
    }
    while (v6);
  }

  -[HMDHome ownedTriggers](self, "ownedTriggers");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "setArray:", v3);

}

- (void)_handleAddEventTrigger:(id)a3
{
  id v4;
  void *v5;
  HMDHome *v6;
  NSObject *v7;
  void *v8;
  void *v9;
  _BOOL4 v10;
  void *v11;
  int v12;
  void *v13;
  void *v14;
  void *v15;
  HMDEventTriggerModel *v16;
  void *v17;
  HMDEventTriggerModel *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  id v24;
  HMDEventTriggerModel *v25;
  void *v26;
  void *v27;
  void *v28;
  id v29;
  void *v30;
  HMDEventTrigger *v31;
  HMDEventTrigger *v32;
  void *v33;
  BOOL v34;
  id v35;
  void *v36;
  HMDHome *v37;
  NSObject *v38;
  void *v39;
  void *v40;
  id v41;
  void *v42;
  void *v43;
  void *v44;
  void *v45;
  void *v46;
  void *v47;
  _QWORD v48[4];
  id v49;
  id v50;
  HMDEventTriggerModel *v51;
  id v52;
  HMDHome *v53;
  HMDEventTrigger *v54;
  id v55;
  _QWORD v56[4];
  id v57;
  HMDEventTriggerModel *v58;
  id v59;
  id v60;
  char v61;
  id location;
  uint8_t buf[4];
  void *v64;
  __int16 v65;
  id v66;
  uint64_t v67;

  v67 = *MEMORY[0x24BDAC8D0];
  v4 = a3;
  v5 = (void *)MEMORY[0x227676638]();
  v6 = self;
  HMFGetOSLogHandle();
  v7 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543618;
    v64 = v8;
    v65 = 2112;
    v66 = v4;
    _os_log_impl(&dword_2218F0000, v7, OS_LOG_TYPE_INFO, "%{public}@Received message %@", buf, 0x16u);

  }
  objc_autoreleasePoolPop(v5);
  -[HMDHome residentEnabledDevices](v6, "residentEnabledDevices");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = objc_msgSend(v9, "count") == 0;

  if (!v10)
  {
    objc_msgSend(v4, "name");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v12 = objc_msgSend(v11, "isEqualToString:", *MEMORY[0x24BDD5258]);

    objc_msgSend(v4, "stringForKey:", CFSTR("kTriggerName"));
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "stringForKey:", *MEMORY[0x24BDD6FB0]);
    v43 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "uuidForKey:", CFSTR("kNewObjectUUIDKey"));
    v44 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "predicateForKey:", CFSTR("kEventTriggerConditionKey"));
    v45 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "numberForKey:", CFSTR("kEventTriggerRecurrencesKey"));
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    v47 = v14;
    if (v14)
    {
      if (objc_msgSend(v14, "unsignedIntegerValue") == 127)
      {
        v46 = 0;
      }
      else
      {
        HMDaysOfTheWeekToDateComponents();
        v46 = (void *)objc_claimAutoreleasedReturnValue();
      }
    }
    else
    {
      objc_msgSend(v4, "arrayOfDateComponentsForKey:", CFSTR("kEventTriggerRecurrencesKey"));
      v46 = (void *)objc_claimAutoreleasedReturnValue();
    }
    objc_msgSend(v4, "userForHome:", v6);
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    v16 = [HMDEventTriggerModel alloc];
    -[HMDHome uuid](v6, "uuid");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    v18 = -[HMDBackingStoreModelObject initWithObjectChangeType:uuid:parentUUID:](v16, "initWithObjectChangeType:uuid:parentUUID:", 1, v44, v17);

    -[HMDEventTriggerModel setName:](v18, "setName:", v13);
    -[HMDEventTriggerModel setConfiguredName:](v18, "setConfiguredName:", v43);
    -[HMDEventTriggerModel setActive:](v18, "setActive:", MEMORY[0x24BDBD1C0]);
    -[HMDEventTriggerModel setOwner:](v18, "setOwner:", v15);
    -[HMDHome currentDevice](v6, "currentDevice");
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDEventTriggerModel setOwningDevice:](v18, "setOwningDevice:", v19);

    -[HMDHome predicateUtility](v6, "predicateUtility");
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v20, "rewritePredicateForDaemon:message:", v45, v4);
    v42 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(MEMORY[0x24BDD1618], "archivedDataWithRootObject:requiringSecureCoding:error:", v42, 1, 0);
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDEventTriggerModel setEvaluationCondition:](v18, "setEvaluationCondition:", v21);

    objc_msgSend(MEMORY[0x24BDD1618], "archivedDataWithRootObject:requiringSecureCoding:error:", v46, 1, 0);
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDEventTriggerModel setRecurrences:](v18, "setRecurrences:", v22);

    v23 = (void *)objc_msgSend(v4, "mutableCopy");
    objc_initWeak(&location, v6);
    v56[0] = MEMORY[0x24BDAC760];
    v56[1] = 3221225472;
    v56[2] = __34__HMDHome__handleAddEventTrigger___block_invoke;
    v56[3] = &unk_24E776718;
    objc_copyWeak(&v60, &location);
    v24 = v4;
    v57 = v24;
    v25 = v18;
    v58 = v25;
    v61 = v12;
    v41 = v15;
    v59 = v41;
    objc_msgSend(v23, "setResponseHandler:", v56);
    if (!-[HMDHome _validateAddingNewTriggerWithName:message:](v6, "_validateAddingNewTriggerWithName:message:", v13, v23))goto LABEL_31;
    if (!v47
      && !+[HMDEventTrigger __validateRecurrences:](HMDEventTrigger, "__validateRecurrences:", v46))
    {
      v36 = (void *)MEMORY[0x227676638]();
      v37 = v6;
      HMFGetOSLogHandle();
      v38 = (id)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v38, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v39 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        v64 = v39;
        v65 = 2112;
        v66 = v46;
        _os_log_impl(&dword_2218F0000, v38, OS_LOG_TYPE_ERROR, "%{public}@Received invalid values for recurrences: %@", buf, 0x16u);

      }
      objc_autoreleasePoolPop(v36);
      objc_msgSend(MEMORY[0x24BDD1540], "hmErrorWithCode:", 3);
      v29 = (id)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v23, "respondWithError:", v29);
      goto LABEL_30;
    }
    -[HMDHome backingStore](v6, "backingStore");
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v24, "name");
    v27 = (void *)objc_claimAutoreleasedReturnValue();
    +[HMDBackingStoreTransactionOptions defaultXPCOptions](HMDBackingStoreTransactionOptions, "defaultXPCOptions");
    v28 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v26, "transaction:options:", v27, v28);
    v40 = (void *)objc_claimAutoreleasedReturnValue();

    if (v12)
    {
      v29 = objc_alloc_init(MEMORY[0x24BDBCED8]);
      if (!-[HMDHome _populateTriggerModel:fromBuilderMessage:transaction:responsePayload:](v6, "_populateTriggerModel:fromBuilderMessage:transaction:responsePayload:", v25, v23, v40, v29))
      {
LABEL_29:

LABEL_30:
LABEL_31:

        objc_destroyWeak(&v60);
        objc_destroyWeak(&location);

        goto LABEL_32;
      }
      objc_msgSend(MEMORY[0x24BDD16E0], "numberWithBool:", objc_msgSend(v24, "BOOLForKey:", CFSTR("kEventTriggerExecuteOnce")));
      v30 = (void *)objc_claimAutoreleasedReturnValue();
      -[HMDEventTriggerModel setExecuteOnce:](v25, "setExecuteOnce:", v30);

    }
    else
    {
      v29 = 0;
    }
    v31 = -[HMDEventTrigger initWithModel:home:message:]([HMDEventTrigger alloc], "initWithModel:home:message:", v25, v6, v24);
    v32 = v31;
    if (v12)
      v33 = v40;
    else
      v33 = 0;
    v55 = 0;
    v34 = -[HMDEventTrigger addEventsFromMessage:preserveUUIDs:transaction:error:](v31, "addEventsFromMessage:preserveUUIDs:transaction:error:", v24, v12 ^ 1u, v33, &v55, v40);
    v35 = v55;
    if (v34)
    {
      if (v12)
      {
        objc_msgSend(v40, "add:", v25);
        v48[0] = MEMORY[0x24BDAC760];
        v48[1] = 3221225472;
        v48[2] = __34__HMDHome__handleAddEventTrigger___block_invoke_1219;
        v48[3] = &unk_24E77EE60;
        v49 = v23;
        v50 = v29;
        v51 = v25;
        v52 = v45;
        v53 = v6;
        v54 = v32;
        objc_msgSend(v40, "run:", v48);

      }
      else
      {
        objc_msgSend(v40, "add:withMessage:", v25, v23);
        objc_msgSend(v40, "run");
      }
    }
    else
    {
      objc_msgSend(v23, "respondWithError:", v35);
    }

    goto LABEL_29;
  }
  objc_msgSend(MEMORY[0x24BDD1540], "hmErrorWithCode:", 91);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "respondWithError:", v13);
LABEL_32:

}

- (BOOL)_populateTriggerModel:(id)a3 fromBuilderMessage:(id)a4 transaction:(id)a5 responsePayload:(id)a6
{
  id v10;
  id v11;
  void *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t i;
  id v18;
  void *v19;
  id v20;
  uint64_t v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  id v34;
  id v35;
  void *v36;
  void *v37;
  HMDHome *v38;
  NSObject *v39;
  void *v40;
  void *v41;
  BOOL v42;
  void *v43;
  HMDHome *v44;
  NSObject *v45;
  void *v46;
  void *v47;
  HMDHome *v48;
  NSObject *v49;
  void *v50;
  void *context;
  id v53;
  id v54;
  id v55;
  void *v56;
  id v57;
  id obj;
  id v59;
  id v60;
  id v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  uint8_t buf[4];
  void *v67;
  __int16 v68;
  id v69;
  _BYTE v70[128];
  uint64_t v71;

  v71 = *MEMORY[0x24BDAC8D0];
  v10 = a3;
  v11 = a4;
  v55 = a5;
  v57 = a6;
  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithBool:", objc_msgSend(v11, "BOOLForKey:", CFSTR("kTriggerActivate")));
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "setActive:", v12);

  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithBool:", objc_msgSend(v11, "BOOLForKey:", *MEMORY[0x24BDD6FC0]));
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "setAutoDelete:", v13);

  v59 = objc_alloc_init(MEMORY[0x24BDBCEB8]);
  v62 = 0u;
  v63 = 0u;
  v64 = 0u;
  v65 = 0u;
  v56 = v11;
  objc_msgSend(v11, "arrayForKey:", CFSTR("kTriggerActionSetUUIDKey"));
  obj = (id)objc_claimAutoreleasedReturnValue();
  v14 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v62, v70, 16);
  if (v14)
  {
    v15 = v14;
    v16 = *(_QWORD *)v63;
    v53 = v10;
    while (2)
    {
      for (i = 0; i != v15; ++i)
      {
        if (*(_QWORD *)v63 != v16)
          objc_enumerationMutation(obj);
        v18 = *(id *)(*((_QWORD *)&v62 + 1) + 8 * i);
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0)
          v19 = v18;
        else
          v19 = 0;
        v20 = v19;

        if (!v20)
          goto LABEL_18;
        v21 = objc_msgSend(objc_alloc(MEMORY[0x24BDD1880]), "initWithUUIDString:", v20);
        if (!v21)
        {
          v20 = v18;
LABEL_18:
          v37 = (void *)MEMORY[0x227676638]();
          v38 = self;
          HMFGetOSLogHandle();
          v39 = objc_claimAutoreleasedReturnValue();
          v28 = v55;
          v27 = v56;
          if (os_log_type_enabled(v39, OS_LOG_TYPE_ERROR))
          {
            HMFGetLogIdentifier();
            v40 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 138543618;
            v67 = v40;
            v68 = 2112;
            v69 = v20;
            _os_log_impl(&dword_2218F0000, v39, OS_LOG_TYPE_ERROR, "%{public}@Invalid ActionSet reference: '%@'", buf, 0x16u);

          }
          objc_autoreleasePoolPop(v37);
          objc_msgSend(MEMORY[0x24BDD1540], "hmErrorWithCode:", 3);
          v41 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v56, "respondWithError:", v41);

          v42 = 0;
          v10 = v53;
          goto LABEL_29;
        }
        v22 = (void *)v21;
        -[HMDHome actionSetWithUUID:](self, "actionSetWithUUID:", v21);
        v23 = (void *)objc_claimAutoreleasedReturnValue();
        if (!v23)
        {
          v43 = (void *)MEMORY[0x227676638]();
          v44 = self;
          HMFGetOSLogHandle();
          v45 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v45, OS_LOG_TYPE_ERROR))
          {
            HMFGetLogIdentifier();
            v46 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 138543618;
            v67 = v46;
            v68 = 2112;
            v69 = v22;
            _os_log_impl(&dword_2218F0000, v45, OS_LOG_TYPE_ERROR, "%{public}@Failed to resolve ActionSet reference: %@", buf, 0x16u);

          }
          objc_autoreleasePoolPop(v43);
          objc_msgSend(MEMORY[0x24BDD1540], "hmErrorWithCode:", 2);
          v47 = (void *)objc_claimAutoreleasedReturnValue();
          v27 = v56;
          objc_msgSend(v56, "respondWithError:", v47);

          v42 = 0;
          v10 = v53;
          v28 = v55;
          goto LABEL_29;
        }
        v24 = v23;
        objc_msgSend(v23, "uuid");
        v25 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v25, "UUIDString");
        v26 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v59, "addObject:", v26);

      }
      v15 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v62, v70, 16);
      v10 = v53;
      if (v15)
        continue;
      break;
    }
  }

  v27 = v56;
  objc_msgSend(v56, "dictionaryForKey:", CFSTR("kTriggerOwnedActionSetKey"));
  v28 = v55;
  obj = (id)objc_claimAutoreleasedReturnValue();
  if (!obj)
    goto LABEL_28;
  objc_msgSend(MEMORY[0x24BDD1880], "UUID");
  v29 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x24BDD1880], "hm_deriveUUIDFromBaseUUID:", v29);
  v30 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v30, "UUIDString");
  v31 = (void *)objc_claimAutoreleasedReturnValue();

  v32 = (void *)*MEMORY[0x24BDD5218];
  v60 = 0;
  v61 = 0;
  -[HMDHome _createActionSetWithUUID:name:type:fromDictionary:transaction:response:error:](self, v29, v31, v32, obj, v55, &v61, &v60);
  v33 = (void *)objc_claimAutoreleasedReturnValue();
  v34 = v61;
  v35 = v60;

  if (v33)
  {
    objc_msgSend(v57, "setObject:forKeyedSubscript:", v34, CFSTR("kTriggerOwnedActionSetKey"));
    objc_msgSend(v29, "UUIDString");
    v36 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v59, "addObject:", v36);

  }
  else
  {
    v54 = v10;
    context = (void *)MEMORY[0x227676638]();
    v48 = self;
    HMFGetOSLogHandle();
    v49 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v49, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v50 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v67 = v50;
      _os_log_impl(&dword_2218F0000, v49, OS_LOG_TYPE_ERROR, "%{public}@Failed to create trigger-owned action set", buf, 0xCu);

    }
    objc_autoreleasePoolPop(context);
    objc_msgSend(v56, "respondWithError:", v35);
    v10 = v54;
  }

  if (!v33)
  {
    v42 = 0;
  }
  else
  {
LABEL_28:
    v20 = (id)objc_msgSend(v59, "copy");
    objc_msgSend(v10, "setCurrentActionSets:", v20);
    v42 = 1;
LABEL_29:

  }
  return v42;
}

- (void)_handleAddEventTriggerModel:(id)a3 message:(id)a4
{
  id v6;
  id v7;
  HMDEventTrigger *v8;
  void (**v9)(_QWORD, _QWORD, _QWORD);
  void *v10;
  HMDHome *v11;
  NSObject *v12;
  void *v13;
  void *v14;
  void *v15;
  int v16;
  void *v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  v6 = a3;
  v7 = a4;
  v8 = -[HMDEventTrigger initWithModel:home:message:]([HMDEventTrigger alloc], "initWithModel:home:message:", v6, self, v7);
  if (v8)
  {
    objc_msgSend(v6, "createPayload");
    v9 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
    -[HMDHome _addNewTrigger:message:payloadAnnex:triggerModel:](self, "_addNewTrigger:message:payloadAnnex:triggerModel:", v8, v7, v9, v6);
LABEL_7:

    goto LABEL_8;
  }
  v10 = (void *)MEMORY[0x227676638]();
  v11 = self;
  HMFGetOSLogHandle();
  v12 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    v16 = 138543362;
    v17 = v13;
    _os_log_impl(&dword_2218F0000, v12, OS_LOG_TYPE_INFO, "%{public}@Could not create event trigger object from model", (uint8_t *)&v16, 0xCu);

  }
  objc_autoreleasePoolPop(v10);
  objc_msgSend(v7, "responseHandler");
  v14 = (void *)objc_claimAutoreleasedReturnValue();

  if (v14)
  {
    objc_msgSend(v7, "responseHandler");
    v9 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD1540], "hmErrorWithCode:", 3);
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    ((void (**)(_QWORD, void *, _QWORD))v9)[2](v9, v15, 0);

    goto LABEL_7;
  }
LABEL_8:

}

- (BOOL)_validateAddingNewTriggerWithName:(id)a3 message:(id)a4
{
  id v6;
  id v7;
  unint64_t v8;
  void *v9;
  HMDHome *v10;
  NSObject *v11;
  void *v12;
  void *v13;
  uint64_t v14;
  void *v15;
  BOOL v16;
  void *v18;
  void *v19;
  uint64_t v20;
  void *v21;
  unint64_t v22;
  unint64_t v23;
  void *v24;
  HMDHome *v25;
  NSObject *v26;
  void *v27;
  void *v28;
  int v29;
  void *v30;
  __int16 v31;
  id v32;
  uint64_t v33;

  v33 = *MEMORY[0x24BDAC8D0];
  v6 = a3;
  v7 = a4;
  if (v6)
  {
    if (objc_msgSend(v6, "length"))
    {
      v8 = HMMaxLengthForNaming();
      if (objc_msgSend(v6, "length") > v8)
      {
        v9 = (void *)MEMORY[0x227676638]();
        v10 = self;
        HMFGetOSLogHandle();
        v11 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
        {
          HMFGetLogIdentifier();
          v12 = (void *)objc_claimAutoreleasedReturnValue();
          v29 = 138543362;
          v30 = v12;
          _os_log_impl(&dword_2218F0000, v11, OS_LOG_TYPE_ERROR, "%{public}@New name is longer than the pre-defined max length", (uint8_t *)&v29, 0xCu);

        }
        objc_autoreleasePoolPop(v9);
        v13 = (void *)MEMORY[0x24BDD1540];
        v14 = 46;
        goto LABEL_9;
      }
      -[HMDHome triggerWithName:](self, "triggerWithName:", v6);
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      if (v18)
      {
        v19 = (void *)MEMORY[0x24BDD1540];
        v20 = 1;
      }
      else
      {
        -[HMDHome triggers](self, "triggers");
        v21 = (void *)objc_claimAutoreleasedReturnValue();
        v22 = objc_msgSend(v21, "count");
        v23 = maximumTriggersPerHome;

        if (v22 < v23)
        {
          v16 = 1;
LABEL_19:

          goto LABEL_10;
        }
        v24 = (void *)MEMORY[0x227676638]();
        v25 = self;
        HMFGetOSLogHandle();
        v26 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v26, OS_LOG_TYPE_INFO))
        {
          HMFGetLogIdentifier();
          v27 = (void *)objc_claimAutoreleasedReturnValue();
          v29 = 138543618;
          v30 = v27;
          v31 = 2112;
          v32 = v6;
          _os_log_impl(&dword_2218F0000, v26, OS_LOG_TYPE_INFO, "%{public}@Can't add trigger %@; already at maximum triggers for home",
            (uint8_t *)&v29,
            0x16u);

        }
        objc_autoreleasePoolPop(v24);
        v19 = (void *)MEMORY[0x24BDD1540];
        v20 = 49;
      }
      objc_msgSend(v19, "hmErrorWithCode:", v20);
      v28 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v7, "respondWithError:", v28);

      v16 = 0;
      goto LABEL_19;
    }
    v13 = (void *)MEMORY[0x24BDD1540];
    v14 = 3;
  }
  else
  {
    v13 = (void *)MEMORY[0x24BDD1540];
    v14 = 20;
  }
LABEL_9:
  objc_msgSend(v13, "hmErrorWithCode:", v14);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "respondWithError:", v15);

  v16 = 0;
LABEL_10:

  return v16;
}

- (void)_relayAddTriggerToResident:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;
  void *v10;
  id v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  _QWORD v17[4];
  id v18;
  id v19;
  id location;
  const __CFString *v21;
  void *v22;
  _QWORD v23[2];

  v23[1] = *MEMORY[0x24BDAC8D0];
  v4 = a3;
  v23[0] = v4;
  objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", v23, 1);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  encodeRootObject();
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  v21 = CFSTR("HM.triggers");
  v22 = v6;
  objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", &v22, &v21, 1);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_initWeak(&location, self);
  v8 = (void *)MEMORY[0x24BE3F1D0];
  v17[0] = MEMORY[0x24BDAC760];
  v17[1] = 3221225472;
  v17[2] = __38__HMDHome__relayAddTriggerToResident___block_invoke;
  v17[3] = &unk_24E798D90;
  objc_copyWeak(&v19, &location);
  v9 = v4;
  v18 = v9;
  objc_msgSend(v8, "messageWithName:messagePayload:responseHandler:", CFSTR("kAddTriggersInternalRequestKey"), v7, v17);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v11 = objc_alloc(MEMORY[0x24BE3F1B8]);
  -[HMDHome uuid](self, "uuid");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  v13 = (void *)objc_msgSend(v11, "initWithTarget:", v12);

  objc_msgSend(v10, "setDestination:", v13);
  objc_msgSend(v10, "setQualityOfService:", 33);
  -[HMDHome administratorHandler](self, "administratorHandler");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  v15 = (void *)objc_msgSend(v10, "copy");
  objc_msgSend(v14, "operationForMessage:error:", v15, 0);
  v16 = (void *)objc_claimAutoreleasedReturnValue();

  if (v16)
    objc_msgSend(v14, "addOperation:", v16);

  objc_destroyWeak(&v19);
  objc_destroyWeak(&location);

}

- (void)_handleAddTimerTrigger:(id)a3
{
  id v4;
  void *v5;
  uint64_t v6;
  void *v7;
  int v8;
  void *v9;
  void *v10;
  void *v11;
  HMDTimerTriggerModel *v12;
  void *v13;
  HMDTimerTriggerModel *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  id v21;
  void *v22;
  HMDHome *v23;
  NSObject *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  _QWORD v29[4];
  id v30;
  id v31;
  id v32;
  uint8_t buf[4];
  void *v34;
  uint64_t v35;

  v35 = *MEMORY[0x24BDAC8D0];
  v4 = a3;
  -[HMDHome residentEnabledDevices](self, "residentEnabledDevices");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend(v5, "count");

  if (v6)
  {
    objc_msgSend(v4, "name");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = objc_msgSend(v7, "isEqualToString:", *MEMORY[0x24BDD5260]);

    objc_msgSend(v4, "stringForKey:", CFSTR("kTriggerName"));
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    if (-[HMDHome _validateAddingNewTriggerWithName:message:](self, "_validateAddingNewTriggerWithName:message:", v9, v4))
    {
      objc_msgSend(v4, "stringForKey:", *MEMORY[0x24BDD6FB0]);
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x24BDD1880], "UUID");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      v12 = [HMDTimerTriggerModel alloc];
      -[HMDHome uuid](self, "uuid");
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      v14 = -[HMDBackingStoreModelObject initWithObjectChangeType:uuid:parentUUID:](v12, "initWithObjectChangeType:uuid:parentUUID:", 1, v11, v13);

      -[HMDTimerTriggerModel setName:](v14, "setName:", v9);
      -[HMDTimerTriggerModel setConfiguredName:](v14, "setConfiguredName:", v10);
      -[HMDTimerTriggerModel setActive:](v14, "setActive:", MEMORY[0x24BDBD1C0]);
      +[HMDTimerTrigger validateTriggerModel:message:currentFireDate:](HMDTimerTrigger, "validateTriggerModel:message:currentFireDate:", v14, v4, 0);
      v15 = (void *)objc_claimAutoreleasedReturnValue();

      if (!v15)
      {
LABEL_16:

        goto LABEL_17;
      }
      v28 = v11;
      v16 = v10;
      -[HMDHome backingStore](self, "backingStore");
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "name");
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      +[HMDBackingStoreTransactionOptions defaultXPCOptions](HMDBackingStoreTransactionOptions, "defaultXPCOptions");
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v17, "transaction:options:", v18, v19);
      v20 = (void *)objc_claimAutoreleasedReturnValue();

      if (v8)
      {
        v21 = objc_alloc_init(MEMORY[0x24BDBCED8]);
        v10 = v16;
        v11 = v28;
        if (!-[HMDHome _populateTriggerModel:fromBuilderMessage:transaction:responsePayload:](self, "_populateTriggerModel:fromBuilderMessage:transaction:responsePayload:", v15, v4, v20, v21))
        {
LABEL_15:

          goto LABEL_16;
        }
      }
      else
      {
        v21 = 0;
        v10 = v16;
        v11 = v28;
      }
      objc_msgSend(v4, "userForHome:", self);
      v26 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v15, "setOwner:", v26);

      -[HMDHome currentDevice](self, "currentDevice");
      v27 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v15, "setOwningDevice:", v27);

      if (v8)
      {
        objc_msgSend(v20, "add:", v15);
        v29[0] = MEMORY[0x24BDAC760];
        v29[1] = 3221225472;
        v29[2] = __34__HMDHome__handleAddTimerTrigger___block_invoke;
        v29[3] = &unk_24E799FD0;
        v30 = v4;
        v21 = v21;
        v31 = v21;
        v32 = v15;
        objc_msgSend(v20, "run:", v29);

      }
      else
      {
        objc_msgSend(v20, "add:withMessage:", v15, v4);
        objc_msgSend(v20, "run");
      }
      goto LABEL_15;
    }
    v22 = (void *)MEMORY[0x227676638]();
    v23 = self;
    HMFGetOSLogHandle();
    v24 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v25 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v34 = v25;
      _os_log_impl(&dword_2218F0000, v24, OS_LOG_TYPE_ERROR, "%{public}@Trigger name is not valid", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v22);
  }
  else
  {
    objc_msgSend(MEMORY[0x24BDD1540], "hmErrorWithCode:", 91);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "respondWithError:", v9);
  }
LABEL_17:

}

- (void)_handleAddTimerTriggerModel:(id)a3 message:(id)a4
{
  id v6;
  id v7;
  HMDTimerTrigger *v8;
  void (**v9)(_QWORD, _QWORD, _QWORD);
  void *v10;
  HMDHome *v11;
  NSObject *v12;
  void *v13;
  void *v14;
  void *v15;
  int v16;
  void *v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  v6 = a3;
  v7 = a4;
  v8 = -[HMDTimerTrigger initWithModel:home:]([HMDTimerTrigger alloc], "initWithModel:home:", v6, self);
  if (v8)
  {
    objc_msgSend(v6, "createPayload");
    v9 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
    -[HMDHome _addNewTrigger:message:payloadAnnex:triggerModel:](self, "_addNewTrigger:message:payloadAnnex:triggerModel:", v8, v7, v9, v6);
LABEL_7:

    goto LABEL_8;
  }
  v10 = (void *)MEMORY[0x227676638]();
  v11 = self;
  HMFGetOSLogHandle();
  v12 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    v16 = 138543362;
    v17 = v13;
    _os_log_impl(&dword_2218F0000, v12, OS_LOG_TYPE_INFO, "%{public}@Could not create timer trigger object from model", (uint8_t *)&v16, 0xCu);

  }
  objc_autoreleasePoolPop(v10);
  objc_msgSend(v7, "responseHandler");
  v14 = (void *)objc_claimAutoreleasedReturnValue();

  if (v14)
  {
    objc_msgSend(v7, "responseHandler");
    v9 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD1540], "hmErrorWithCode:", 3);
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    ((void (**)(_QWORD, void *, _QWORD))v9)[2](v9, v15, 0);

    goto LABEL_7;
  }
LABEL_8:

}

- (void)_addNewTrigger:(id)a3 message:(id)a4 payloadAnnex:(id)a5 triggerModel:(id)a6
{
  id v10;
  id v11;
  id v12;
  id v13;
  void *v14;
  void *v15;
  void *v16;
  int v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  char v23;
  void *v24;
  HMDHome *v25;
  NSObject *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  int v35;
  void *v36;
  __int16 v37;
  void *v38;
  __int16 v39;
  id v40;
  uint64_t v41;

  v41 = *MEMORY[0x24BDAC8D0];
  v10 = a3;
  v11 = a4;
  v12 = a5;
  v13 = a6;
  -[HMDHome addToCurrentTriggers:](self, "addToCurrentTriggers:", v10);
  -[HMDHome ownedTriggers](self, "ownedTriggers");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "uuid");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  if ((objc_msgSend(v14, "containsObject:", v15) & 1) == 0)
  {
    objc_msgSend(v10, "owner");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    v17 = objc_msgSend(v16, "isOwner");

    if (!v17)
      goto LABEL_5;
    -[HMDHome ownedTriggers](self, "ownedTriggers");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "uuid");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v14, "addObject:", v15);
  }

LABEL_5:
  -[HMDHome msgDispatcher](self, "msgDispatcher");
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHome workQueue](self, "workQueue");
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "configure:messageDispatcher:queue:", self, v18, v19);

  objc_msgSend(v11, "transactionResult");
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v20, "markChanged");
  objc_msgSend(v11, "name");
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v21, "isEqualToString:", CFSTR("kAddEventTriggerRequestKey")))
  {

  }
  else
  {
    objc_msgSend(v11, "name");
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    v23 = objc_msgSend(v22, "isEqualToString:", CFSTR("kAddTimerTriggerRequestKey"));

    if ((v23 & 1) == 0)
    {
      objc_msgSend(v11, "respondWithSuccess");
      goto LABEL_14;
    }
  }
  v24 = (void *)MEMORY[0x227676638]();
  v25 = self;
  HMFGetOSLogHandle();
  v26 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v26, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v27 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "name");
    v28 = (void *)objc_claimAutoreleasedReturnValue();
    v35 = 138543874;
    v36 = v27;
    v37 = 2112;
    v38 = v28;
    v39 = 2112;
    v40 = v11;
    _os_log_impl(&dword_2218F0000, v26, OS_LOG_TYPE_INFO, "%{public}@Add trigger Transaction marked for change. The client will be updated next: %@, %@", (uint8_t *)&v35, 0x20u);

  }
  objc_autoreleasePoolPop(v24);
  v29 = (void *)MEMORY[0x24BDBCED8];
  objc_msgSend(v11, "messagePayload");
  v30 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v29, "dictionaryWithDictionary:", v30);
  v31 = (void *)objc_claimAutoreleasedReturnValue();

  HMDRemoteMessagePayloadKeysForTransportMetadata();
  v32 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v31, "removeObjectsForKeys:", v32);

  objc_msgSend(v10, "uuid");
  v33 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v33, "UUIDString");
  v34 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v31, "setObject:forKey:", v34, CFSTR("kTriggerUUID"));

  if (v12)
    objc_msgSend(v31, "addEntriesFromDictionary:", v12);
  objc_msgSend(v11, "respondWithPayload:", v31);

LABEL_14:
}

- (void)_handleRemoveTrigger:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  HMDTriggerModel *v7;
  void *v8;
  void *v9;
  HMDTriggerModel *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  HMDHome *v16;
  NSObject *v17;
  void *v18;
  void *v19;
  int v20;
  void *v21;
  __int16 v22;
  void *v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v4 = a3;
  objc_msgSend(v4, "uuidForKey:", CFSTR("kTriggerUUID"));
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHome triggerWithUUID:](self, "triggerWithUUID:", v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  if (v6)
  {
    v7 = [HMDTriggerModel alloc];
    objc_msgSend(v6, "uuid");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHome uuid](self, "uuid");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v10 = -[HMDBackingStoreModelObject initWithObjectChangeType:uuid:parentUUID:](v7, "initWithObjectChangeType:uuid:parentUUID:", 3, v8, v9);

    -[HMDHome backingStore](self, "backingStore");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "name");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    +[HMDBackingStoreTransactionOptions defaultXPCOptions](HMDBackingStoreTransactionOptions, "defaultXPCOptions");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "transaction:options:", v12, v13);
    v14 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v14, "add:withMessage:", v10, v4);
    objc_msgSend(v14, "run");

  }
  else
  {
    v15 = (void *)MEMORY[0x227676638]();
    v16 = self;
    HMFGetOSLogHandle();
    v17 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      v20 = 138543618;
      v21 = v18;
      v22 = 2112;
      v23 = v5;
      _os_log_impl(&dword_2218F0000, v17, OS_LOG_TYPE_ERROR, "%{public}@Cannot find the trigger with UUID %@", (uint8_t *)&v20, 0x16u);

    }
    objc_autoreleasePoolPop(v15);
    objc_msgSend(MEMORY[0x24BDD1540], "hmErrorWithCode:", 3);
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "respondWithError:", v19);

  }
}

- (void)_handleRemoveTriggerModel:(id)a3 message:(id)a4
{
  id v6;
  id v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  HMDHome *v12;
  NSObject *v13;
  void *v14;
  void *v15;
  int v16;
  void *v17;
  __int16 v18;
  void *v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  v6 = a3;
  v7 = a4;
  objc_msgSend(v6, "uuid");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHome triggerWithUUID:](self, "triggerWithUUID:", v8);
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  if (v9)
  {
    -[HMDHome _removeTrigger:message:](self, "_removeTrigger:message:", v9, v7);
    objc_msgSend(v7, "transactionResult");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "markChanged");
  }
  else
  {
    v11 = (void *)MEMORY[0x227676638]();
    v12 = self;
    HMFGetOSLogHandle();
    v13 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v6, "uuid");
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      v16 = 138543618;
      v17 = v14;
      v18 = 2112;
      v19 = v15;
      _os_log_impl(&dword_2218F0000, v13, OS_LOG_TYPE_ERROR, "%{public}@Couldn't find trigger with UUID %@ to remove.", (uint8_t *)&v16, 0x16u);

    }
    objc_autoreleasePoolPop(v11);
    objc_msgSend(MEMORY[0x24BDD1540], "hmErrorWithCode:", 2);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "respondWithError:", v10);
  }

}

- (void)removeTrigger:(id)a3
{
  id v4;
  NSObject *v5;
  id v6;
  _QWORD v7[5];
  id v8;

  v4 = a3;
  -[HMDHome workQueue](self, "workQueue");
  v5 = objc_claimAutoreleasedReturnValue();
  v7[0] = MEMORY[0x24BDAC760];
  v7[1] = 3221225472;
  v7[2] = __25__HMDHome_removeTrigger___block_invoke;
  v7[3] = &unk_24E79C268;
  v7[4] = self;
  v8 = v4;
  v6 = v4;
  dispatch_async(v5, v7);

}

- (void)removeTriggerNoNotification:(id)a3
{
  id v4;
  void *v5;
  id v6;
  void *v7;
  id v8;

  if (a3)
  {
    v4 = a3;
    objc_msgSend(v4, "invalidate");
    objc_msgSend(v4, "name");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = -[HMDHome removeName:](self, "removeName:", v5);

    -[HMDHome removeFromCurrentTriggers:](self, "removeFromCurrentTriggers:", v4);
    -[HMDHome ownedTriggers](self, "ownedTriggers");
    v8 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "uuid");
    v7 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v8, "removeObject:", v7);
  }
}

- (void)_removeTrigger:(id)a3 message:(id)a4
{
  id v6;
  id v7;
  void *v8;
  void *v9;
  HMDHome *v10;
  NSObject *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  HMDHome *v20;
  NSObject *v21;
  void *v22;
  void *v23;
  HMDHome *v24;
  NSObject *v25;
  void *v26;
  _QWORD v27[3];
  _QWORD v28[3];
  uint8_t buf[4];
  void *v30;
  __int16 v31;
  id v32;
  uint64_t v33;

  v33 = *MEMORY[0x24BDAC8D0];
  v6 = a3;
  v7 = a4;
  if (v6)
  {
    -[HMDHome removeTriggerNoNotification:](self, "removeTriggerNoNotification:", v6);
    objc_msgSend(v7, "transactionResult");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = (void *)MEMORY[0x227676638](objc_msgSend(v8, "markChanged"));
    v10 = self;
    HMFGetOSLogHandle();
    v11 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v30 = v12;
      v31 = 2112;
      v32 = v6;
      _os_log_impl(&dword_2218F0000, v11, OS_LOG_TYPE_INFO, "%{public}@Remove trigger: %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v9);
    -[HMDHome uuid](v10, "uuid", CFSTR("kHomeUUID"));
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "UUIDString");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    v28[0] = v14;
    v27[1] = CFSTR("kTriggerName");
    objc_msgSend(v6, "name");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    v28[1] = v15;
    v27[2] = CFSTR("kTriggerUUID");
    objc_msgSend(v6, "uuid");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v16, "UUIDString");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    v28[2] = v17;
    objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v28, v27, 3);
    v18 = (void *)objc_claimAutoreleasedReturnValue();

    v19 = (void *)MEMORY[0x227676638]();
    v20 = v10;
    HMFGetOSLogHandle();
    v21 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v30 = v22;
      v31 = 2112;
      v32 = v18;
      _os_log_impl(&dword_2218F0000, v21, OS_LOG_TYPE_INFO, "%{public}@Successfully Removed trigger : sending back the result: %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v19);
    objc_msgSend(v7, "respondWithPayload:", v18);

  }
  else
  {
    v23 = (void *)MEMORY[0x227676638]();
    v24 = self;
    HMFGetOSLogHandle();
    v25 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v26 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v30 = v26;
      v31 = 2112;
      v32 = 0;
      _os_log_impl(&dword_2218F0000, v25, OS_LOG_TYPE_ERROR, "%{public}@Could not find the Trigger : %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v23);
    objc_msgSend(MEMORY[0x24BDD1540], "errorWithDomain:code:userInfo:", *MEMORY[0x24BDD5BD8], 2, 0);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "respondWithError:", v8);
  }

}

- (void)_handleExecuteConfirmationOfTrigger:(id)a3
{
  __CFString *v4;
  void (**v5)(_QWORD, _QWORD, _QWORD);
  void *v6;
  void *v7;
  id v8;
  void *v9;
  id v10;
  void *v11;
  HMDHome *v12;
  NSObject *v13;
  void *v14;
  uint64_t v15;
  id v16;
  void *v17;
  HMDHome *v18;
  NSObject *v19;
  void *v20;
  void *v21;
  uint64_t v22;
  void *v23;
  void *v24;
  HMDHome *v25;
  NSObject *v26;
  void *v27;
  HMDRemoteDeviceMessageDestination *v28;
  void *v29;
  HMDRemoteDeviceMessageDestination *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  HMDHome *v36;
  NSObject *v37;
  void *v38;
  void *v39;
  uint64_t v40;
  void *v41;
  void *v42;
  _QWORD v43[4];
  id v44;
  __CFString *v45;
  _QWORD v46[4];
  __CFString *v47;
  uint8_t buf[4];
  void *v49;
  __int16 v50;
  const __CFString *v51;
  __int16 v52;
  __CFString *v53;
  uint64_t v54;

  v54 = *MEMORY[0x24BDAC8D0];
  v4 = (__CFString *)a3;
  if ((-[__CFString isEntitledForSPIAccess](v4, "isEntitledForSPIAccess") & 1) != 0
    || (-[__CFString isRemote](v4, "isRemote") & 1) != 0)
  {
    -[__CFString uuidForKey:](v4, "uuidForKey:", CFSTR("kTriggerUUID"));
    v5 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
    -[HMDHome triggers](self, "triggers");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "hmf_firstObjectWithSPIUniqueIdentifier:", v5);
    v7 = (void *)objc_claimAutoreleasedReturnValue();

    v8 = v7;
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
      v9 = v8;
    else
      v9 = 0;
    v10 = v9;

    isWatch();
    if (isWatch() && (objc_msgSend(v10, "hasUserConfirmationSession") & 1) == 0)
    {
      v24 = (void *)MEMORY[0x227676638]();
      v25 = self;
      HMFGetOSLogHandle();
      v26 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v26, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v27 = (void *)objc_claimAutoreleasedReturnValue();
        isWatch();
        *(_DWORD *)buf = 138543874;
        v49 = v27;
        v50 = 2112;
        v51 = CFSTR("non-Tinker HH2");
        v52 = 2112;
        v53 = v4;
        _os_log_impl(&dword_2218F0000, v26, OS_LOG_TYPE_INFO, "%{public}@Received trigger execution confirmation for relay in %@ Watch, %@", buf, 0x20u);

      }
      objc_autoreleasePoolPop(v24);
      -[HMDHome homeManager](v25, "homeManager");
      v16 = (id)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v16, "companionDevice");
      v23 = (void *)objc_claimAutoreleasedReturnValue();
      if (v23 && objc_msgSend(v16, "companionReachable"))
      {
        v28 = [HMDRemoteDeviceMessageDestination alloc];
        -[HMDHome uuid](v25, "uuid");
        v29 = (void *)objc_claimAutoreleasedReturnValue();
        v42 = v23;
        v30 = -[HMDRemoteDeviceMessageDestination initWithTarget:device:](v28, "initWithTarget:device:", v29, v23);

        v31 = (void *)MEMORY[0x24BE3F1B0];
        -[__CFString messagePayload](v4, "messagePayload");
        v32 = (void *)objc_claimAutoreleasedReturnValue();
        v33 = (void *)objc_msgSend(v32, "copy");
        objc_msgSend(v31, "messageWithName:qualityOfService:destination:payload:", CFSTR("kConfirmExecuteTriggerRequestKey"), 25, v30, v33);
        v34 = (void *)objc_claimAutoreleasedReturnValue();

        v46[0] = MEMORY[0x24BDAC760];
        v46[1] = 3221225472;
        v46[2] = __47__HMDHome__handleExecuteConfirmationOfTrigger___block_invoke;
        v46[3] = &unk_24E79B7E0;
        v47 = v4;
        v35 = (void *)MEMORY[0x227676638](objc_msgSend(v34, "setResponseHandler:", v46));
        v36 = v25;
        HMFGetOSLogHandle();
        v37 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v37, OS_LOG_TYPE_INFO))
        {
          HMFGetLogIdentifier();
          v41 = v35;
          v38 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543362;
          v49 = v38;
          _os_log_impl(&dword_2218F0000, v37, OS_LOG_TYPE_INFO, "%{public}@Sending confirmation to companion", buf, 0xCu);

          v35 = v41;
        }

        objc_autoreleasePoolPop(v35);
        objc_msgSend(v16, "messageDispatcher");
        v39 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v39, "sendMessage:completionHandler:", v34, 0);

        v23 = v42;
      }
      else
      {
        objc_msgSend(MEMORY[0x24BDD1540], "errorWithDomain:code:userInfo:", *MEMORY[0x24BDD5BD8], 63, 0);
        v30 = (HMDRemoteDeviceMessageDestination *)objc_claimAutoreleasedReturnValue();
        -[__CFString responseHandler](v4, "responseHandler");
        v40 = objc_claimAutoreleasedReturnValue();
        v34 = (void *)v40;
        if (v40)
          (*(void (**)(uint64_t, HMDRemoteDeviceMessageDestination *, _QWORD))(v40 + 16))(v40, v30, 0);
      }

    }
    else
    {
      v11 = (void *)MEMORY[0x227676638]();
      v12 = self;
      HMFGetOSLogHandle();
      v13 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v14 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        v49 = v14;
        v50 = 2112;
        v51 = v4;
        _os_log_impl(&dword_2218F0000, v13, OS_LOG_TYPE_INFO, "%{public}@Received trigger execution confirmation on iOS or HH2 Watch: %@", buf, 0x16u);

      }
      objc_autoreleasePoolPop(v11);
      if (v8)
      {
        v15 = -[__CFString BOOLForKey:](v4, "BOOLForKey:", CFSTR("kTriggerExecuteConfirmationKey"));
        v43[0] = MEMORY[0x24BDAC760];
        v43[1] = 3221225472;
        v43[2] = __47__HMDHome__handleExecuteConfirmationOfTrigger___block_invoke_1229;
        v43[3] = &unk_24E79BCC8;
        v44 = v8;
        v45 = v4;
        objc_msgSend(v44, "userDidConfirmExecute:completionHandler:", v15, v43);

        v16 = v44;
LABEL_29:

        goto LABEL_30;
      }
      objc_msgSend(MEMORY[0x24BDD1540], "errorWithDomain:code:userInfo:", *MEMORY[0x24BDD5BD8], 2, 0);
      v16 = (id)objc_claimAutoreleasedReturnValue();
      -[__CFString responseHandler](v4, "responseHandler");
      v22 = objc_claimAutoreleasedReturnValue();
      v23 = (void *)v22;
      if (v22)
        (*(void (**)(uint64_t, id, _QWORD))(v22 + 16))(v22, v16, 0);
    }

    goto LABEL_29;
  }
  v17 = (void *)MEMORY[0x227676638]();
  v18 = self;
  HMFGetOSLogHandle();
  v19 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
  {
    HMFGetLogIdentifier();
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543362;
    v49 = v20;
    _os_log_impl(&dword_2218F0000, v19, OS_LOG_TYPE_ERROR, "%{public}@Client does not have entitlement to use SPI and it's not relayed from watch.", buf, 0xCu);

  }
  objc_autoreleasePoolPop(v17);
  -[__CFString responseHandler](v4, "responseHandler");
  v21 = (void *)objc_claimAutoreleasedReturnValue();

  if (v21)
  {
    -[__CFString responseHandler](v4, "responseHandler");
    v5 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD1540], "hmErrorWithCode:", 17);
    v8 = (id)objc_claimAutoreleasedReturnValue();
    ((void (**)(_QWORD, id, _QWORD))v5)[2](v5, v8, 0);
LABEL_30:

  }
}

- (void)_handleAllowUserManagementMessage:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  uint64_t v7;
  void (**v8)(_QWORD, _QWORD, _QWORD);
  void *v9;
  HMDHome *v10;
  NSObject *v11;
  void *v12;
  void *v13;
  uint64_t v14;
  void *v15;
  HMDHome *v16;
  NSObject *v17;
  void *v18;
  void (**v19)(_QWORD, _QWORD, _QWORD);
  int v20;
  void *v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  v4 = a3;
  -[HMDHome residentDeviceManager](self, "residentDeviceManager");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "availableResidentDevices");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = objc_msgSend(v6, "count");

  if (!v7)
  {
    v9 = (void *)MEMORY[0x227676638]();
    v10 = self;
    HMFGetOSLogHandle();
    v11 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      v20 = 138543362;
      v21 = v12;
      _os_log_impl(&dword_2218F0000, v11, OS_LOG_TYPE_ERROR, "%{public}@Unable to allow user management, no resident devices in home", (uint8_t *)&v20, 0xCu);

    }
    objc_autoreleasePoolPop(v9);
    v13 = (void *)MEMORY[0x24BDD1540];
    v14 = 91;
    goto LABEL_10;
  }
  if (!-[HMDHome isAdminUser](self, "isAdminUser"))
  {
    v15 = (void *)MEMORY[0x227676638]();
    v16 = self;
    HMFGetOSLogHandle();
    v17 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      v20 = 138543362;
      v21 = v18;
      _os_log_impl(&dword_2218F0000, v17, OS_LOG_TYPE_ERROR, "%{public}@Unable to allow user management, insufficient privileges", (uint8_t *)&v20, 0xCu);

    }
    objc_autoreleasePoolPop(v15);
    v13 = (void *)MEMORY[0x24BDD1540];
    v14 = 17;
LABEL_10:
    objc_msgSend(v13, "hmErrorWithCode:", v14);
    v8 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "responseHandler");
    v19 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
    v19[2](v19, v8, MEMORY[0x24BDBD1B8]);

    goto LABEL_11;
  }
  objc_msgSend(v4, "responseHandler");
  v8 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
  v8[2](v8, 0, MEMORY[0x24BDBD1B8]);
LABEL_11:

}

- (id)_getContainerForAppData:(id)a3 keyName:(id *)a4
{
  id v6;
  void *v7;
  __CFString *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  __CFString *v13;
  HMDHome *v14;

  v6 = a3;
  objc_msgSend(v6, "uuidForKey:", CFSTR("kRoomUUID"));
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  if (v7)
  {
    if (a4)
    {
      v8 = objc_retainAutorelease(CFSTR("kRoomUUID"));
      *a4 = CFSTR("kRoomUUID");
    }
    -[HMDHome roomWithUUID:](self, "roomWithUUID:", v7);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v10 = (void *)*MEMORY[0x24BDD7DC8];
    objc_msgSend(v6, "uuidForKey:", *MEMORY[0x24BDD7DC8]);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    if (v11)
    {
      if (a4)
        *a4 = objc_retainAutorelease(v10);
      -[HMDHome serviceGroupWithUUID:](self, "serviceGroupWithUUID:", v11);
      v9 = (void *)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      objc_msgSend(v6, "uuidForKey:", CFSTR("kActionSetUUID"));
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      if (v12)
      {
        if (a4)
        {
          v13 = objc_retainAutorelease(CFSTR("kActionSetUUID"));
          *a4 = CFSTR("kActionSetUUID");
        }
        -[HMDHome actionSetWithUUID:](self, "actionSetWithUUID:", v12);
        v14 = (HMDHome *)objc_claimAutoreleasedReturnValue();
      }
      else
      {
        v14 = self;
      }
      v9 = v14;

    }
  }

  return v9;
}

- (void)_handleSetAppData:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  id v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  HMDHome *v15;
  NSObject *v16;
  void *v17;
  void (**v18)(_QWORD, _QWORD, _QWORD);
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  id v29;
  id v30;
  uint8_t buf[4];
  void *v32;
  __int16 v33;
  void *v34;
  __int16 v35;
  void *v36;
  uint64_t v37;

  v37 = *MEMORY[0x24BDAC8D0];
  v4 = a3;
  objc_msgSend(v4, "dictionaryForKey:", CFSTR("kAppDataInformationKey"));
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = (void *)MEMORY[0x24BDBCED8];
  objc_msgSend(v4, "messagePayload");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "dictionaryWithCapacity:", objc_msgSend(v7, "count"));
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  v30 = 0;
  -[HMDHome _getContainerForAppData:keyName:](self, "_getContainerForAppData:keyName:", v4, &v30);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = v30;
  v11 = v10;
  if (v9)
  {
    if (v10)
    {
      objc_msgSend(v9, "uuid");
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v12, "UUIDString");
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v8, "setObject:forKey:", v13, v11);

    }
    v14 = (void *)MEMORY[0x227676638]();
    v15 = self;
    HMFGetOSLogHandle();
    v16 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543874;
      v32 = v17;
      v33 = 2112;
      v34 = v9;
      v35 = 2112;
      v36 = v5;
      _os_log_impl(&dword_2218F0000, v16, OS_LOG_TYPE_INFO, "%{public}@Going to update appData for %@ to: %@", buf, 0x20u);

    }
    objc_autoreleasePoolPop(v14);
    objc_msgSend(v9, "appData");
    v18 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "uuid");
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHome createModelForAppDataPayload:existingAppData:parentUUID:](v15, "createModelForAppDataPayload:existingAppData:parentUUID:", v5, v18, v19);
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    if (v5)
      objc_msgSend(v8, "setObject:forKey:", v5, CFSTR("kAppDataInformationKey"));
    if (v20)
    {
      -[HMDHome backingStore](v15, "backingStore");
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "name");
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      +[HMDBackingStoreTransactionOptions defaultXPCOptions](HMDBackingStoreTransactionOptions, "defaultXPCOptions");
      v29 = v4;
      v23 = v9;
      v24 = v5;
      v25 = v8;
      v26 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v21, "transaction:options:", v22, v26);
      v28 = v11;
      v27 = (void *)objc_claimAutoreleasedReturnValue();

      v8 = v25;
      v5 = v24;
      v9 = v23;
      v4 = v29;

      objc_msgSend(v27, "add:withMessage:", v20, v29);
      objc_msgSend(v27, "run");

      v11 = v28;
    }
    else
    {
      objc_msgSend(v4, "respondWithPayload:", 0);
    }

  }
  else
  {
    objc_msgSend(v4, "responseHandler");
    v18 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD1540], "hmErrorWithCode:", 2);
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    ((void (**)(_QWORD, void *, _QWORD))v18)[2](v18, v19, 0);
  }

}

- (id)createModelForAppDataPayload:(id)a3 existingAppData:(id)a4 parentUUID:(id)a5
{
  id v7;
  id v8;
  HMDApplicationData *v9;
  HMDApplicationData *v10;
  void *v11;
  void *v12;

  v7 = a3;
  v8 = a5;
  v9 = (HMDApplicationData *)objc_msgSend(a4, "copy");
  v10 = v9;
  if (v7)
  {
    if (!v9)
      v10 = -[HMDApplicationData initWithParentUUID:]([HMDApplicationData alloc], "initWithParentUUID:", v8);
    -[HMDApplicationData setApplicationData:forIdentifier:](v10, "setApplicationData:forIdentifier:", v7, CFSTR("com.apple.homekit-entitledclient.identifer"));
    -[HMDApplicationData modelObjectWithChangeType:](v10, "modelObjectWithChangeType:", 1);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v12 = v11;
    if (!a4)
      objc_msgSend(v11, "setObjectChangeType:", 1);
  }
  else
  {
    -[HMDApplicationData removeApplicationDataForIdentifier:](v9, "removeApplicationDataForIdentifier:", CFSTR("com.apple.homekit-entitledclient.identifer"));
    if (v10)
    {
      -[HMDApplicationData modelObjectWithChangeType:](v10, "modelObjectWithChangeType:", 1);
      v12 = (void *)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      v12 = 0;
    }
  }

  return v12;
}

- (void)_handleUpdateAppDataModel:(id)a3 message:(id)a4
{
  id v6;
  id v7;
  void *v8;
  void *v9;
  HMDApplicationData *v10;
  void *v11;
  void *v12;
  HMDApplicationData *v13;
  void *v14;
  HMDHome *v15;
  NSObject *v16;
  void *v17;
  void *v18;
  void *v19;
  int v20;
  void *v21;
  __int16 v22;
  void *v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v6 = a3;
  v7 = a4;
  -[HMDHome appData](self, "appData");
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  if (v8)
  {
    -[HMDHome appData](self, "appData");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "updateWithModel:", v6);

  }
  else
  {
    v10 = [HMDApplicationData alloc];
    objc_msgSend(v6, "appDataDictionary");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHome uuid](self, "uuid");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    v13 = -[HMDApplicationData initWithDictionary:parentUUID:](v10, "initWithDictionary:parentUUID:", v11, v12);
    -[HMDHome setAppData:](self, "setAppData:", v13);

    v14 = (void *)MEMORY[0x227676638]();
    v15 = self;
    HMFGetOSLogHandle();
    v16 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
    {
      HMFGetLogIdentifier();
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v6, "appDataDictionary");
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      v20 = 138543618;
      v21 = v17;
      v22 = 2112;
      v23 = v18;
      _os_log_impl(&dword_2218F0000, v16, OS_LOG_TYPE_DEBUG, "%{public}@Updating the application data : %@", (uint8_t *)&v20, 0x16u);

    }
    objc_autoreleasePoolPop(v14);
  }
  objc_msgSend(v7, "transactionResult");
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v19, "markChanged");
  objc_msgSend(v7, "respondWithPayload:", 0);

}

- (void)_handleRemoveAppDataModel:(id)a3 message:(id)a4
{
  id v5;
  id v6;

  v5 = a4;
  -[HMDHome setAppData:](self, "setAppData:", 0);
  objc_msgSend(v5, "transactionResult");
  v6 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "markChanged");
  objc_msgSend(v5, "respondWithPayload:", 0);

}

- (NSArray)users
{
  return (NSArray *)-[HMDHome usersIncludingPendingUsers:](self, "usersIncludingPendingUsers:", 0);
}

- (id)sharedUsers
{
  void *v2;
  void *v3;

  -[HMDHome users](self, "users");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "na_map:", &__block_literal_global_1232);
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  return v3;
}

- (id)restrictedGuests
{
  void *v2;
  void *v3;

  -[HMDHome users](self, "users");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "na_filter:", &__block_literal_global_1233);
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  return v3;
}

- (id)userIncludingPendingUserWithUUID:(id)a3
{
  id v4;
  void *v5;
  void *v6;

  v4 = a3;
  -[HMDHome usersIncludingPendingUsers:](self, "usersIncludingPendingUsers:", 1);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "hmf_firstObjectWithUUID:", v4);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  return v6;
}

- (id)pendingUsers
{
  void *v3;

  os_unfair_recursive_lock_lock_with_options();
  -[NSMutableArray na_filter:](self->_users, "na_filter:", &__block_literal_global_1234);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  os_unfair_recursive_lock_unlock();
  return v3;
}

- (id)usersIncludingPendingUsers:(BOOL)a3
{
  _BOOL4 v3;
  NSMutableArray *users;
  uint64_t v6;
  void *v7;

  v3 = a3;
  os_unfair_recursive_lock_lock_with_options();
  users = self->_users;
  if (v3)
  {
    v6 = -[NSMutableArray copy](users, "copy");
  }
  else
  {
    -[NSMutableArray na_filter:](users, "na_filter:", &__block_literal_global_1235);
    v6 = objc_claimAutoreleasedReturnValue();
  }
  v7 = (void *)v6;
  os_unfair_recursive_lock_unlock();
  return v7;
}

- (NSArray)usersSupportingPresence
{
  void *v2;
  void *v3;

  -[HMDHome users](self, "users");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  +[HMDHome filterUsersSupportingPresence:](HMDHome, "filterUsersSupportingPresence:", v2);
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  return (NSArray *)v3;
}

- (void)addUser:(id)a3
{
  id v5;
  void *v6;
  HMDHome *v7;
  NSObject *v8;
  void *v9;
  void *v10;
  HMDHome *v11;
  NSObject *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  char v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  HMDHome *v22;
  NSObject *v23;
  void *v24;
  void *v25;
  void *v26;
  HMDHome *v27;
  NSObject *v28;
  void *v29;
  int v30;
  void *v31;
  __int16 v32;
  id v33;
  uint64_t v34;

  v34 = *MEMORY[0x24BDAC8D0];
  v5 = a3;
  if (v5)
  {
    os_unfair_recursive_lock_lock_with_options();
    if ((-[NSMutableArray containsObject:](self->_users, "containsObject:", v5) & 1) == 0)
    {
      v6 = (void *)MEMORY[0x227676638]();
      v7 = self;
      HMFGetOSLogHandle();
      v8 = (id)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        v30 = 138543618;
        v31 = v9;
        v32 = 2112;
        v33 = v5;
        _os_log_impl(&dword_2218F0000, v8, OS_LOG_TYPE_INFO, "%{public}@Adding a new user : %@", (uint8_t *)&v30, 0x16u);

      }
      objc_autoreleasePoolPop(v6);
      -[NSMutableArray addObject:](self->_users, "addObject:", v5);
    }
    os_unfair_recursive_lock_unlock();
    if ((objc_msgSend(v5, "isCurrentUser") & 1) != 0 && (objc_msgSend(v5, "isPending") & 1) == 0)
    {
      v10 = (void *)MEMORY[0x227676638]();
      v11 = self;
      HMFGetOSLogHandle();
      v12 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v5, "uuid");
        v14 = (void *)objc_claimAutoreleasedReturnValue();
        v30 = 138543618;
        v31 = v13;
        v32 = 2112;
        v33 = v14;
        _os_log_impl(&dword_2218F0000, v12, OS_LOG_TYPE_INFO, "%{public}@Setting user %@ as current user", (uint8_t *)&v30, 0x16u);

      }
      objc_autoreleasePoolPop(v10);
      objc_storeStrong((id *)&v11->_currentUser, a3);
      -[HMDHome homeManager](v11, "homeManager");
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      if (v15)
      {
        -[HMDHome owner](v11, "owner");
        v16 = (void *)objc_claimAutoreleasedReturnValue();
        v17 = objc_msgSend(v16, "isCurrentUser");

        if ((v17 & 1) == 0)
        {
          objc_msgSend(v15, "homeSharedUserCloudShareManager");
          v18 = (void *)objc_claimAutoreleasedReturnValue();
          -[HMDHome uuid](v11, "uuid");
          v19 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v18, "removeSharesWithNoParticipantForHomeWithModelID:", v19);

        }
        -[HMDHome uuid](v11, "uuid");
        v20 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v15, "removeHomeFromSharedHomesNotYetMigrated:", v20);

      }
      v21 = (void *)MEMORY[0x227676638]();
      v22 = v11;
      HMFGetOSLogHandle();
      v23 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v23, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v24 = (void *)objc_claimAutoreleasedReturnValue();
        v30 = 138543362;
        v31 = v24;
        _os_log_impl(&dword_2218F0000, v23, OS_LOG_TYPE_INFO, "%{public}@Send the initial presence update to primary.", (uint8_t *)&v30, 0xCu);

      }
      objc_autoreleasePoolPop(v21);
      -[HMDHome presenceFeeder](v22, "presenceFeeder");
      v25 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v25, "sendInitialPresenceUpdate");

      v26 = (void *)MEMORY[0x227676638]();
      v27 = v22;
      HMFGetOSLogHandle();
      v28 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v28, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v29 = (void *)objc_claimAutoreleasedReturnValue();
        v30 = 138543362;
        v31 = v29;
        _os_log_impl(&dword_2218F0000, v28, OS_LOG_TYPE_INFO, "%{public}@Configuring HMDUserActivityStateDetectorManager - addUser", (uint8_t *)&v30, 0xCu);

      }
      objc_autoreleasePoolPop(v26);
      -[HMDHome configureUserActivityStateDetectorManager](v27, "configureUserActivityStateDetectorManager");

    }
  }

}

- (void)_removeUser:(id)a3
{
  id v4;
  id v5;

  v4 = a3;
  if (v4)
  {
    v5 = v4;
    os_unfair_recursive_lock_lock_with_options();
    if (-[NSMutableArray containsObject:](self->_users, "containsObject:", v5))
      -[NSMutableArray removeObject:](self->_users, "removeObject:", v5);
    os_unfair_recursive_lock_unlock();
    v4 = v5;
  }

}

- (id)owner
{
  HMDUser **p_owner;
  HMDUser *owner;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t i;
  void *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  p_owner = &self->_owner;
  owner = self->_owner;
  if (!owner)
  {
    v13 = 0u;
    v14 = 0u;
    v11 = 0u;
    v12 = 0u;
    -[HMDHome users](self, "users", 0);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    if (v5)
    {
      v6 = v5;
      v7 = *(_QWORD *)v12;
      while (2)
      {
        for (i = 0; i != v6; ++i)
        {
          if (*(_QWORD *)v12 != v7)
            objc_enumerationMutation(v4);
          v9 = *(void **)(*((_QWORD *)&v11 + 1) + 8 * i);
          if (objc_msgSend(v9, "privilege") == 3)
          {
            objc_storeStrong((id *)p_owner, v9);
            goto LABEL_12;
          }
        }
        v6 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
        if (v6)
          continue;
        break;
      }
    }
LABEL_12:

    owner = *p_owner;
  }
  return owner;
}

- (HMDUser)currentUser
{
  HMDUser **p_currentUser;
  HMDUser *currentUser;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t i;
  void *v10;
  void *v11;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _BYTE v17[128];
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  p_currentUser = &self->_currentUser;
  currentUser = self->_currentUser;
  if (!currentUser)
  {
    v15 = 0u;
    v16 = 0u;
    v13 = 0u;
    v14 = 0u;
    -[HMDHome users](self, "users", 0);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
    if (v6)
    {
      v7 = v6;
      v8 = *(_QWORD *)v14;
      while (2)
      {
        for (i = 0; i != v7; ++i)
        {
          if (*(_QWORD *)v14 != v8)
            objc_enumerationMutation(v5);
          v10 = *(void **)(*((_QWORD *)&v13 + 1) + 8 * i);
          if (objc_msgSend(v10, "isCurrentUser"))
          {
            objc_storeStrong((id *)p_currentUser, v10);
            -[HMDHome presenceAuthStatus](self, "presenceAuthStatus");
            v11 = (void *)objc_claimAutoreleasedReturnValue();
            -[HMDUser setPresenceAuthStatus:](*p_currentUser, "setPresenceAuthStatus:", v11);

            goto LABEL_12;
          }
        }
        v7 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
        if (v7)
          continue;
        break;
      }
    }
LABEL_12:

    currentUser = *p_currentUser;
  }
  return currentUser;
}

- (BOOL)isAdminUser
{
  void *v2;
  char v3;

  -[HMDHome currentUser](self, "currentUser");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "isAdministrator");

  return v3;
}

- (BOOL)isSharedAdmin
{
  _BOOL4 v3;

  v3 = -[HMDHome isAdminUser](self, "isAdminUser");
  if (v3)
    LOBYTE(v3) = !-[HMDHome isOwnerUser](self, "isOwnerUser");
  return v3;
}

- (void)setOwnerUser:(BOOL)a3
{
  os_unfair_recursive_lock_lock_with_options();
  self->_ownerUser = a3;
  os_unfair_recursive_lock_unlock();
}

- (BOOL)isOwnerUser
{
  os_unfair_recursive_lock_lock_with_options();
  LOBYTE(self) = self->_ownerUser;
  os_unfair_recursive_lock_unlock();
  return (char)self;
}

- (BOOL)isSmokeAlarmEnabled
{
  os_unfair_recursive_lock_lock_with_options();
  LODWORD(self) = self->_audioAnalysisClassifierOptions & 1;
  os_unfair_recursive_lock_unlock();
  return (char)self;
}

- (BOOL)isSiriPhraseOptionsHeySiriEnabled
{
  os_unfair_recursive_lock_lock_with_options();
  LODWORD(self) = self->_siriPhraseOptions & 1;
  os_unfair_recursive_lock_unlock();
  return (char)self;
}

- (BOOL)isSiriPhraseOptionsJustSiriEnabled
{
  unint64_t v3;

  os_unfair_recursive_lock_lock_with_options();
  v3 = (self->_siriPhraseOptions >> 1) & 1;
  os_unfair_recursive_lock_unlock();
  return v3;
}

- (id)userWithPairingIdentity:(id)a3
{
  id v4;
  void *v5;
  id v6;
  uint64_t v7;
  void *i;
  void *v9;
  void *v10;
  char v11;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _BYTE v17[128];
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  v4 = a3;
  if (v4)
  {
    v15 = 0u;
    v16 = 0u;
    v13 = 0u;
    v14 = 0u;
    -[HMDHome users](self, "users", 0);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = (id)objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
    if (v6)
    {
      v7 = *(_QWORD *)v14;
      while (2)
      {
        for (i = 0; i != v6; i = (char *)i + 1)
        {
          if (*(_QWORD *)v14 != v7)
            objc_enumerationMutation(v5);
          v9 = *(void **)(*((_QWORD *)&v13 + 1) + 8 * (_QWORD)i);
          objc_msgSend(v9, "pairingIdentity");
          v10 = (void *)objc_claimAutoreleasedReturnValue();
          v11 = objc_msgSend(v4, "isEqual:", v10);

          if ((v11 & 1) != 0)
          {
            v6 = v9;
            goto LABEL_12;
          }
        }
        v6 = (id)objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
        if (v6)
          continue;
        break;
      }
    }
LABEL_12:

  }
  else
  {
    v6 = 0;
  }

  return v6;
}

- (id)userWithPairingIdentityIdentifier:(id)a3
{
  id v4;
  void *v5;
  id v6;
  uint64_t v7;
  void *i;
  void *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  v4 = a3;
  if (v4)
  {
    v13 = 0u;
    v14 = 0u;
    v11 = 0u;
    v12 = 0u;
    -[HMDHome users](self, "users", 0);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = (id)objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    if (v6)
    {
      v7 = *(_QWORD *)v12;
      while (2)
      {
        for (i = 0; i != v6; i = (char *)i + 1)
        {
          if (*(_QWORD *)v12 != v7)
            objc_enumerationMutation(v5);
          v9 = *(void **)(*((_QWORD *)&v11 + 1) + 8 * (_QWORD)i);
          if ((objc_msgSend(v9, "matchingPairingIdentityIdentifier:", v4) & 1) != 0)
          {
            v6 = v9;
            goto LABEL_12;
          }
        }
        v6 = (id)objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
        if (v6)
          continue;
        break;
      }
    }
LABEL_12:

  }
  else
  {
    v6 = 0;
  }

  return v6;
}

- (id)userWithMergeID:(id)a3
{
  id v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t i;
  void *v10;
  void *v11;
  void *v12;
  int v13;
  void *v14;
  void *v15;
  void *v16;
  int v17;
  void *v18;
  HMDHome *v19;
  NSObject *v20;
  void *v21;
  id v22;
  void *v23;
  HMDHome *v24;
  HMDHome *v25;
  NSObject *v26;
  HMDHome *v27;
  void *v28;
  HMDHome *v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  uint8_t buf[4];
  void *v36;
  __int16 v37;
  id v38;
  __int16 v39;
  void *v40;
  _BYTE v41[128];
  uint64_t v42;

  v42 = *MEMORY[0x24BDAC8D0];
  v4 = a3;
  if (!v4)
    goto LABEL_13;
  v33 = 0u;
  v34 = 0u;
  v31 = 0u;
  v32 = 0u;
  -[HMDHome users](self, "users");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v31, v41, 16);
  if (!v6)
    goto LABEL_12;
  v7 = v6;
  v8 = *(_QWORD *)v32;
  v30 = self;
  while (2)
  {
    for (i = 0; i != v7; ++i)
    {
      if (*(_QWORD *)v32 != v8)
        objc_enumerationMutation(v5);
      v10 = *(void **)(*((_QWORD *)&v31 + 1) + 8 * i);
      objc_msgSend(v10, "account");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v11, "senderCorrelationIdentifier");
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      v13 = objc_msgSend(v12, "isEqualToString:", v4);

      if (v13)
      {
        v23 = (void *)MEMORY[0x227676638]();
        v24 = v30;
        v25 = v30;
        HMFGetOSLogHandle();
        v26 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v26, OS_LOG_TYPE_DEBUG))
        {
LABEL_20:
          HMFGetLogIdentifier();
          v28 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543874;
          v36 = v28;
          v37 = 2112;
          v38 = v4;
          v39 = 2112;
          v40 = v10;
          _os_log_impl(&dword_2218F0000, v26, OS_LOG_TYPE_DEBUG, "%{public}@Found user with mergeID %@: %@", buf, 0x20u);

        }
LABEL_21:

        objc_autoreleasePoolPop(v23);
        v22 = v10;

        goto LABEL_22;
      }
      objc_msgSend(v10, "mergeIdentifier");
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      if (objc_msgSend(v14, "isEqual:", v4))
      {

LABEL_19:
        v23 = (void *)MEMORY[0x227676638]();
        v24 = v30;
        v27 = v30;
        HMFGetOSLogHandle();
        v26 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v26, OS_LOG_TYPE_DEBUG))
          goto LABEL_20;
        goto LABEL_21;
      }
      objc_msgSend(v10, "accountIdentifier");
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v15, "senderCorrelationIdentifier");
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      v17 = objc_msgSend(v16, "isEqual:", v4);

      if (v17)
        goto LABEL_19;
    }
    v7 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v31, v41, 16);
    self = v30;
    if (v7)
      continue;
    break;
  }
LABEL_12:

LABEL_13:
  v18 = (void *)MEMORY[0x227676638]();
  v19 = self;
  HMFGetOSLogHandle();
  v20 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG))
  {
    HMFGetLogIdentifier();
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543618;
    v36 = v21;
    v37 = 2112;
    v38 = v4;
    _os_log_impl(&dword_2218F0000, v20, OS_LOG_TYPE_DEBUG, "%{public}@No user found with mergeID %@", buf, 0x16u);

  }
  objc_autoreleasePoolPop(v18);
  v22 = 0;
LABEL_22:

  return v22;
}

- (id)_residentUserForResidentDevice:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  id v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  uint64_t v14;
  HMDResidentUser *v15;
  void *v16;
  HMDResidentUser *v17;
  void *v18;
  HMDHome *v19;
  NSObject *v20;
  void *v21;
  int v23;
  void *v24;
  __int16 v25;
  id v26;
  uint64_t v27;

  v27 = *MEMORY[0x24BDAC8D0];
  v4 = a3;
  -[HMDHome owner](self, "owner");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "pairingIdentity");
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  if (v6)
  {
    objc_msgSend(v4, "device");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    if (v7)
    {
      v8 = objc_alloc(MEMORY[0x24BE1BBB0]);
      objc_msgSend(v7, "identifier");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v9, "UUIDString");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v6, "publicKey");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v6, "privateKey");
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      v13 = (void *)objc_msgSend(v8, "initWithIdentifier:publicKey:privateKey:permissions:", v10, v11, v12, objc_msgSend(v6, "permissions"));

      if (objc_msgSend(v4, "isEnabled"))
        v14 = 2;
      else
        v14 = 3;
      v15 = [HMDResidentUser alloc];
      objc_msgSend(v4, "home");
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      v17 = -[HMDResidentUser initWithDevice:home:pairingIdentity:configurationState:](v15, "initWithDevice:home:pairingIdentity:configurationState:", v7, v16, v13, v14);

      -[HMDUser setHome:](v17, "setHome:", self);
      if (-[HMDResidentUser isBlocked](v17, "isBlocked"))
        -[HMDResidentUser setConfigurationState:](v17, "setConfigurationState:", 3);

    }
    else
    {
      v17 = 0;
    }

  }
  else
  {
    v18 = (void *)MEMORY[0x227676638]();
    v19 = self;
    HMFGetOSLogHandle();
    v20 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
    {
      HMFGetLogIdentifier();
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      v23 = 138543618;
      v24 = v21;
      v25 = 2112;
      v26 = v4;
      _os_log_impl(&dword_2218F0000, v20, OS_LOG_TYPE_DEFAULT, "%{public}@Unable to retrieve owner's pairing identity to create legacy resident user for device: %@", (uint8_t *)&v23, 0x16u);

    }
    objc_autoreleasePoolPop(v18);
    v17 = 0;
  }

  return v17;
}

- (id)_residentDeviceForResidentUser:(id)a3
{
  id v4;
  void *v5;
  HMDResidentDevice *v6;
  void *v7;
  HMDResidentDevice *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  HMDHome *v13;
  NSObject *v14;
  void *v15;
  int v17;
  void *v18;
  __int16 v19;
  id v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  v4 = a3;
  objc_msgSend(v4, "device");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  if (v5)
  {
    v6 = [HMDResidentDevice alloc];
    objc_msgSend(v4, "uuid");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = -[HMDResidentDevice initWithDevice:identifier:](v6, "initWithDevice:identifier:", v5, v7);

    if (-[HMDHome isResidentSupported](self, "isResidentSupported") || objc_msgSend(v4, "configurationState") != 2)
      -[HMDResidentDevice setEnabled:](v8, "setEnabled:", 0);
    -[HMDHome homeManager](self, "homeManager");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "messageDispatcher");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "remoteAccessDeviceForHome:", self);
    v11 = (void *)objc_claimAutoreleasedReturnValue();

    if ((objc_msgSend(v11, "isEqual:", v5) & 1) == 0)
      -[HMDResidentDevice setReachable:](v8, "setReachable:", 0);

  }
  else
  {
    v12 = (void *)MEMORY[0x227676638]();
    v13 = self;
    HMFGetOSLogHandle();
    v14 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      v17 = 138543618;
      v18 = v15;
      v19 = 2112;
      v20 = v4;
      _os_log_impl(&dword_2218F0000, v14, OS_LOG_TYPE_INFO, "%{public}@Unable to find matching device for resident user: %@", (uint8_t *)&v17, 0x16u);

    }
    objc_autoreleasePoolPop(v12);
    v8 = 0;
  }

  return v8;
}

- (void)_notifyClientsOfUpdatedResidentUser:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  HMDHome *v7;
  NSObject *v8;
  NSObject *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  int v14;
  void *v15;
  __int16 v16;
  id v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  v4 = a3;
  -[HMDHome _residentDeviceForResidentUser:](self, "_residentDeviceForResidentUser:", v4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = (void *)MEMORY[0x227676638]();
  v7 = self;
  HMFGetOSLogHandle();
  v8 = objc_claimAutoreleasedReturnValue();
  v9 = v8;
  if (v5)
  {
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      v14 = 138543618;
      v15 = v10;
      v16 = 2112;
      v17 = v4;
      _os_log_impl(&dword_2218F0000, v9, OS_LOG_TYPE_INFO, "%{public}@Notifying clients of updated remote access gateway: %@", (uint8_t *)&v14, 0x16u);

    }
    objc_autoreleasePoolPop(v6);
    -[HMDHome homeManager](v7, "homeManager");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "identifier");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "updateGenerationCounterWithReason:sourceUUID:shouldNotifyClients:", CFSTR("ResidentUserUpdated"), v12, 1);

  }
  else
  {
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      v14 = 138543618;
      v15 = v13;
      v16 = 2112;
      v17 = v4;
      _os_log_impl(&dword_2218F0000, v9, OS_LOG_TYPE_ERROR, "%{public}@Failed to find resident for resident user: %@", (uint8_t *)&v14, 0x16u);

    }
    objc_autoreleasePoolPop(v6);
  }

}

- (void)_purgeResidentUsers
{
  HMDHome *v2;
  void *v3;
  void *v4;
  void *v5;
  __int128 v6;
  uint64_t v7;
  __objc2_class **p_superclass;
  uint64_t i;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  HMDHome *v14;
  NSObject *v15;
  void *v16;
  void *v17;
  HMDHome *v18;
  void *v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint8_t buf[4];
  void *v28;
  __int16 v29;
  void *v30;
  _BYTE v31[128];
  uint64_t v32;

  v2 = self;
  v32 = *MEMORY[0x24BDAC8D0];
  -[HMDHome residentCapableDevices](self, "residentCapableDevices");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v23 = 0u;
  v24 = 0u;
  v25 = 0u;
  v26 = 0u;
  -[HMDHome _residentUsers](v2, "_residentUsers");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = (void *)objc_msgSend(v4, "copy");

  v22 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v23, v31, 16);
  if (v22)
  {
    v7 = *(_QWORD *)v24;
    p_superclass = HMDCameraMetricsSnapshotLogEvent.superclass;
    *(_QWORD *)&v6 = 138543618;
    v20 = v6;
    v21 = *(_QWORD *)v24;
    do
    {
      for (i = 0; i != v22; ++i)
      {
        if (*(_QWORD *)v24 != v7)
          objc_enumerationMutation(v5);
        v10 = *(void **)(*((_QWORD *)&v23 + 1) + 8 * i);
        objc_msgSend(v10, "userID", v20);
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(p_superclass + 144, "deviceWithDestination:", v11);
        v12 = (void *)objc_claimAutoreleasedReturnValue();

        if (v12 && objc_msgSend(v3, "containsObject:", v12))
        {
          v13 = (void *)MEMORY[0x227676638]();
          v14 = v2;
          HMFGetOSLogHandle();
          v15 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
          {
            HMFGetLogIdentifier();
            v16 = v5;
            v17 = v3;
            v18 = v2;
            v19 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = v20;
            v28 = v19;
            v29 = 2112;
            v30 = v10;
            _os_log_impl(&dword_2218F0000, v15, OS_LOG_TYPE_INFO, "%{public}@Removing non-legacy resident user from home: %@", buf, 0x16u);

            v2 = v18;
            v3 = v17;
            v5 = v16;
            v7 = v21;
          }

          objc_autoreleasePoolPop(v13);
          -[HMDHome _removeUser:](v14, "_removeUser:", v10);
          p_superclass = (__objc2_class **)(HMDCameraMetricsSnapshotLogEvent + 8);
        }

      }
      v22 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v23, v31, 16);
    }
    while (v22);
  }

}

- (BOOL)_verifyUserManagementPermissionForAccessory:(id)a3 error:(id *)a4
{
  id v6;
  BOOL v7;
  void *v8;
  HMDHome *v9;
  NSObject *v10;
  void *v11;
  void *v12;
  HMDHome *v13;
  NSObject *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  _QWORD v24[2];
  _QWORD v25[2];
  uint8_t buf[4];
  void *v27;
  __int16 v28;
  void *v29;
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  v6 = a3;
  if (!-[HMDHome isAdminUser](self, "isAdminUser"))
  {
    v8 = (void *)MEMORY[0x227676638]();
    v9 = self;
    HMFGetOSLogHandle();
    v10 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      HMFGetLogIdentifier();
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v27 = v11;
      _os_log_impl(&dword_2218F0000, v10, OS_LOG_TYPE_DEFAULT, "%{public}@Non administrator cannot perform user management", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v8);
    if (a4)
    {
      objc_msgSend(MEMORY[0x24BDD1540], "hmErrorWithCode:description:reason:suggestion:", 17, CFSTR("Must be administrator to perform user management"), 0, 0);
      v7 = 0;
      *a4 = (id)objc_claimAutoreleasedReturnValue();
      goto LABEL_13;
    }
LABEL_12:
    v7 = 0;
    goto LABEL_13;
  }
  if ((objc_msgSend(v6, "supportsUserManagement") & 1) == 0)
  {
    v12 = (void *)MEMORY[0x227676638]();
    v13 = self;
    HMFGetOSLogHandle();
    v14 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v6, "name");
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v27 = v15;
      v28 = 2112;
      v29 = v16;
      _os_log_impl(&dword_2218F0000, v14, OS_LOG_TYPE_ERROR, "%{public}@Cannot perform user management on '%@' since it is does not support user management operations", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v12);
    if (a4)
    {
      v24[0] = *MEMORY[0x24BDD0FC8];
      v17 = (void *)MEMORY[0x24BDD17C8];
      objc_msgSend(v6, "name");
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v17, "stringWithFormat:", CFSTR("Cannot perform user management on '%@'"), v18);
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      v25[0] = v19;
      v24[1] = *MEMORY[0x24BDD0FD8];
      objc_msgSend(MEMORY[0x24BDD1488], "mainBundle");
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v20, "localizedStringForKey:value:table:", CFSTR("Accessory is not a primary accessory."), &stru_24E79DB48, 0);
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      v25[1] = v21;
      objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v25, v24, 2);
      v22 = (void *)objc_claimAutoreleasedReturnValue();

      objc_msgSend(MEMORY[0x24BDD1540], "errorWithDomain:code:userInfo:", *MEMORY[0x24BDD5BD8], 48, v22);
      *a4 = (id)objc_claimAutoreleasedReturnValue();

    }
    goto LABEL_12;
  }
  v7 = 1;
LABEL_13:

  return v7;
}

- (BOOL)_isUserValid:(id)a3 error:(id *)a4
{
  id v6;
  void *v7;
  void *v8;
  BOOL v9;
  void *v10;
  const __CFString *v11;
  uint64_t v12;
  void *v13;
  HMDHome *v14;
  NSObject *v15;
  void *v16;
  void *v17;
  int v19;
  void *v20;
  __int16 v21;
  void *v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  v6 = a3;
  v7 = v6;
  if (!v6)
  {
    if (a4)
    {
      v10 = (void *)MEMORY[0x24BDD1540];
      v11 = CFSTR("Missing required parameter to validate user");
      v12 = 3;
LABEL_10:
      objc_msgSend(v10, "hmErrorWithCode:description:reason:suggestion:", v12, v11, 0, 0);
      v9 = 0;
      *a4 = (id)objc_claimAutoreleasedReturnValue();
      goto LABEL_12;
    }
LABEL_11:
    v9 = 0;
    goto LABEL_12;
  }
  objc_msgSend(v6, "pairingIdentity");
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v8)
  {
    v13 = (void *)MEMORY[0x227676638]();
    v14 = self;
    HMFGetOSLogHandle();
    v15 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v7, "userID");
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      v19 = 138543618;
      v20 = v16;
      v21 = 2112;
      v22 = v17;
      _os_log_impl(&dword_2218F0000, v15, OS_LOG_TYPE_ERROR, "%{public}@Invalid user '%@', missing either pairing username or public key", (uint8_t *)&v19, 0x16u);

    }
    objc_autoreleasePoolPop(v13);
    if (a4)
    {
      v10 = (void *)MEMORY[0x24BDD1540];
      v11 = CFSTR("Invalid user information");
      v12 = 21;
      goto LABEL_10;
    }
    goto LABEL_11;
  }
  v9 = 1;
LABEL_12:

  return v9;
}

- (void)removeAllUsersAndCloudDataFromAccessory:(id)a3 completionHandler:(id)a4
{
  id v6;
  id v7;
  BOOL v8;
  void *v9;
  HMDHome *v10;
  NSObject *v11;
  _BOOL4 v12;
  void *v13;
  id v14;
  void *v15;
  id v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint8_t v31[128];
  uint8_t buf[4];
  void *v33;
  __int16 v34;
  id v35;
  uint64_t v36;

  v36 = *MEMORY[0x24BDAC8D0];
  v6 = a3;
  v7 = a4;
  v8 = -[HMDHome isOwnerUser](self, "isOwnerUser");
  v9 = (void *)MEMORY[0x227676638]();
  v10 = self;
  HMFGetOSLogHandle();
  v11 = objc_claimAutoreleasedReturnValue();
  v12 = os_log_type_enabled(v11, OS_LOG_TYPE_INFO);
  if (v8)
  {
    if (v12)
    {
      HMFGetLogIdentifier();
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v33 = v13;
      v34 = 2112;
      v35 = v6;
      _os_log_impl(&dword_2218F0000, v11, OS_LOG_TYPE_INFO, "%{public}@Removing cloud data from primary accessory %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v9);
    v14 = v6;
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
      v15 = v14;
    else
      v15 = 0;
    v16 = v15;

    v29 = 0u;
    v30 = 0u;
    v27 = 0u;
    v28 = 0u;
    objc_msgSend(v16, "identifiersForBridgedAccessories", 0);
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    v18 = objc_msgSend(v17, "countByEnumeratingWithState:objects:count:", &v27, v31, 16);
    if (v18)
    {
      v19 = v18;
      v20 = *(_QWORD *)v28;
      do
      {
        v21 = 0;
        do
        {
          if (*(_QWORD *)v28 != v20)
            objc_enumerationMutation(v17);
          -[HMDHome accessoryWithUUID:](v10, "accessoryWithUUID:", *(_QWORD *)(*((_QWORD *)&v27 + 1) + 8 * v21));
          v22 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v22, "removeCloudData");

          ++v21;
        }
        while (v19 != v21);
        v19 = objc_msgSend(v17, "countByEnumeratingWithState:objects:count:", &v27, v31, 16);
      }
      while (v19);
    }

    v23 = (void *)MEMORY[0x227676638](objc_msgSend(v14, "removeCloudData"));
    +[HMDBackgroundOperationManagerHelper removeAllUsersFromAccessory:withCompletionHandler:](HMDBackgroundOperationManagerHelper, "removeAllUsersFromAccessory:withCompletionHandler:", v14, v7);
    objc_autoreleasePoolPop(v23);
  }
  else
  {
    if (v12)
    {
      HMFGetLogIdentifier();
      v24 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v6, "shortDescription");
      v25 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v33 = v24;
      v34 = 2112;
      v35 = v25;
      _os_log_impl(&dword_2218F0000, v11, OS_LOG_TYPE_INFO, "%{public}@Not owner of home - bypassing removing users from accessory %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v9);
    v26 = _Block_copy(v7);
    v16 = v26;
    if (v26)
      (*((void (**)(void *))v26 + 2))(v26);
  }

}

- (void)_addAllUsersToAccessory:(id)a3
{
  id v4;
  id v5;

  v4 = a3;
  -[HMDHome users](self, "users");
  v5 = (id)objc_claimAutoreleasedReturnValue();
  -[HMDHome _addUsers:accessory:](self, "_addUsers:accessory:", v5, v4);

}

- (void)_cleanRemovedUsers:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t i;
  void *v11;
  void *v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _BYTE v17[128];
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  v4 = a3;
  objc_msgSend(MEMORY[0x24BDBCEB8], "array");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v13 = 0u;
  v14 = 0u;
  v15 = 0u;
  v16 = 0u;
  -[HMDHome removedUsers](self, "removedUsers", 0);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
  if (v7)
  {
    v8 = v7;
    v9 = *(_QWORD *)v14;
    do
    {
      for (i = 0; i != v8; ++i)
      {
        if (*(_QWORD *)v14 != v9)
          objc_enumerationMutation(v6);
        v11 = *(void **)(*((_QWORD *)&v13 + 1) + 8 * i);
        if (objc_msgSend(v11, "isEqualToUser:", v4))
          objc_msgSend(v5, "addObject:", v11);
      }
      v8 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
    }
    while (v8);
  }

  -[HMDHome removedUsers](self, "removedUsers");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v12, "removeObjectsInArray:", v5);

}

- (void)_handleUserInvitations:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  uint64_t v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  id v14;
  void *v15;
  HMDHome *v16;
  NSObject *v17;
  NSObject *v18;
  void *v19;
  void *v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  unint64_t v24;
  void *v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t i;
  void *v31;
  void *v32;
  HMDHome *v33;
  NSObject *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  uint64_t v42;
  void *v43;
  void *v44;
  char v45;
  void *v46;
  HMDHome *v47;
  NSObject *v48;
  void *v49;
  void *v50;
  HMDHome *v51;
  NSObject *v52;
  void *v53;
  void *v54;
  void *v55;
  void *v56;
  void *v57;
  HMDHome *v58;
  NSObject *v59;
  void *v60;
  void *v61;
  void (**v62)(_QWORD, _QWORD, _QWORD);
  void *v63;
  HMDHome *v64;
  NSObject *v65;
  void *v66;
  const char *v67;
  void (**v68)(_QWORD, _QWORD, _QWORD);
  void (**v69)(_QWORD, _QWORD, _QWORD);
  void *v70;
  HMDHome *v71;
  NSObject *v72;
  void *v73;
  void *v74;
  HMDHome *v75;
  NSObject *v76;
  void *v77;
  uint64_t v78;
  void *v79;
  HMDHome *v80;
  NSObject *v81;
  void *v82;
  void *v83;
  void *v84;
  void *v85;
  id v86;
  id obj;
  _QWORD v88[5];
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  id v93;
  uint8_t v94[128];
  uint8_t buf[4];
  void *v96;
  __int16 v97;
  uint64_t v98;
  __int16 v99;
  uint64_t (*v100)();
  _QWORD v101[5];

  v101[2] = *MEMORY[0x24BDAC8D0];
  v4 = a3;
  -[HMDHome residentDeviceManager](self, "residentDeviceManager");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "availableResidentDevices");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = objc_msgSend(v6, "count");

  if (!v7)
  {
    v46 = (void *)MEMORY[0x227676638]();
    v47 = self;
    HMFGetOSLogHandle();
    v48 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v48, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v49 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v96 = v49;
      _os_log_impl(&dword_2218F0000, v48, OS_LOG_TYPE_ERROR, "%{public}@Failed to invite user(s), no resident devices in home", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v46);
    objc_msgSend(MEMORY[0x24BDD1540], "hmErrorWithCode:", 91);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "respondWithError:", v8);
    goto LABEL_57;
  }
  objc_msgSend(v4, "dataForKey:", *MEMORY[0x24BDD63D8]);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v8)
  {
    v50 = (void *)MEMORY[0x227676638]();
    v51 = self;
    HMFGetOSLogHandle();
    v52 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v52, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v53 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "messagePayload");
      v54 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v96 = v53;
      v97 = 2112;
      v98 = (uint64_t)v54;
      _os_log_impl(&dword_2218F0000, v52, OS_LOG_TYPE_ERROR, "%{public}@Failed to send invitations, missing user invite information: %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v50);
    objc_msgSend(MEMORY[0x24BDD1540], "errorWithDomain:code:userInfo:", *MEMORY[0x24BDD5BD8], 3, 0);
    v14 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "respondWithError:", v14);
    goto LABEL_56;
  }
  v9 = (void *)MEMORY[0x24BDD1620];
  v10 = (void *)MEMORY[0x24BDBCF20];
  v101[0] = objc_opt_class();
  v101[1] = objc_opt_class();
  objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", v101, 2);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "setWithArray:", v11);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  v93 = 0;
  objc_msgSend(v9, "unarchivedObjectOfClasses:fromData:error:", v12, v8, &v93);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  v14 = v93;

  v15 = (void *)MEMORY[0x227676638]();
  v16 = self;
  HMFGetOSLogHandle();
  v17 = objc_claimAutoreleasedReturnValue();
  v18 = v17;
  if (!v13)
  {
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v55 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v96 = v55;
      v97 = 2112;
      v98 = (uint64_t)v14;
      _os_log_impl(&dword_2218F0000, v18, OS_LOG_TYPE_ERROR, "%{public}@Failed to decode user invite information: %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v15);
    objc_msgSend(MEMORY[0x24BDD1540], "errorWithDomain:code:userInfo:", *MEMORY[0x24BDD5BD8], 3, 0);
    v56 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "respondWithError:", v56);

    goto LABEL_55;
  }
  v86 = v14;
  if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHome users](v16, "users");
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    v21 = objc_msgSend(v20, "count");
    *(_DWORD *)buf = 138543874;
    v96 = v19;
    v97 = 2048;
    v98 = v21;
    v99 = 2048;
    v100 = getHMMaximumUsersPerHome;
    _os_log_impl(&dword_2218F0000, v18, OS_LOG_TYPE_INFO, "%{public}@Adding users; current user count is %ld and max is %ld",
      buf,
      0x20u);

  }
  objc_autoreleasePoolPop(v15);
  -[HMDHome users](v16, "users");
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  v23 = objc_msgSend(v22, "count");
  v24 = objc_msgSend(v13, "count") + v23;
  v25 = v13;
  v26 = maximumUsersPerHome;

  if (v24 >= v26)
  {
    v13 = v25;
    v57 = (void *)MEMORY[0x227676638]();
    v58 = v16;
    HMFGetOSLogHandle();
    v59 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v59, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v60 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v96 = v60;
      _os_log_impl(&dword_2218F0000, v59, OS_LOG_TYPE_INFO, "%{public}@Can't add users; already at maximum users for home",
        buf,
        0xCu);

    }
    objc_autoreleasePoolPop(v57);
    objc_msgSend(MEMORY[0x24BDD1540], "errorWithDomain:code:userInfo:", *MEMORY[0x24BDD5BD8], 49, 0);
    v61 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "responseHandler");
    v62 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
    ((void (**)(_QWORD, void *, _QWORD))v62)[2](v62, v61, 0);

    v14 = v86;
    goto LABEL_55;
  }
  v84 = v25;
  v85 = v4;
  v91 = 0u;
  v92 = 0u;
  v89 = 0u;
  v90 = 0u;
  obj = v25;
  v27 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v89, v94, 16);
  if (!v27)
    goto LABEL_24;
  v28 = v27;
  v29 = *(_QWORD *)v90;
  v83 = v8;
  while (2)
  {
    for (i = 0; i != v28; ++i)
    {
      if (*(_QWORD *)v90 != v29)
        objc_enumerationMutation(obj);
      v31 = *(void **)(*((_QWORD *)&v89 + 1) + 8 * i);
      v32 = (void *)MEMORY[0x227676638]();
      v33 = v16;
      HMFGetOSLogHandle();
      v34 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v34, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v35 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        v96 = v35;
        v97 = 2112;
        v98 = (uint64_t)v31;
        _os_log_impl(&dword_2218F0000, v34, OS_LOG_TYPE_INFO, "%{public}@Processing invite information : %@", buf, 0x16u);

      }
      objc_autoreleasePoolPop(v32);
      objc_msgSend(v31, "userID");
      v36 = (void *)objc_claimAutoreleasedReturnValue();
      -[HMDHome users](v33, "users");
      v37 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v37, "hmf_firstObjectWithValue:forKeyPath:", v36, CFSTR("userID"));
      v38 = (void *)objc_claimAutoreleasedReturnValue();

      if (v38)
      {
        v63 = (void *)MEMORY[0x227676638]();
        v64 = v33;
        HMFGetOSLogHandle();
        v65 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v65, OS_LOG_TYPE_INFO))
        {
          HMFGetLogIdentifier();
          v66 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543618;
          v96 = v66;
          v97 = 2112;
          v98 = (uint64_t)v36;
          v67 = "%{public}@Failed to invite user %@ since the user is already part of the home";
LABEL_41:
          _os_log_impl(&dword_2218F0000, v65, OS_LOG_TYPE_INFO, v67, buf, 0x16u);

        }
LABEL_42:

        objc_autoreleasePoolPop(v63);
        objc_msgSend(MEMORY[0x24BDD1540], "errorWithDomain:code:userInfo:", *MEMORY[0x24BDD5BD8], 1, 0);
        v68 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
        v4 = v85;
        objc_msgSend(v85, "responseHandler");
        v69 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
        v69[2](v69, v68, 0);

        goto LABEL_43;
      }
      -[HMDHome outgoingInvitations](v33, "outgoingInvitations");
      v39 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v39, "hmf_firstObjectWithValue:forKeyPath:", v36, CFSTR("user.userID"));
      v38 = (void *)objc_claimAutoreleasedReturnValue();

      if (v38)
      {
        v63 = (void *)MEMORY[0x227676638]();
        v64 = v33;
        HMFGetOSLogHandle();
        v65 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v65, OS_LOG_TYPE_INFO))
        {
          HMFGetLogIdentifier();
          v66 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543618;
          v96 = v66;
          v97 = 2112;
          v98 = (uint64_t)v36;
          v67 = "%{public}@Failed to invite user %@ since the user is already invited to the home";
          goto LABEL_41;
        }
        goto LABEL_42;
      }
      if (objc_msgSend(v31, "isAdministrator")
        && !-[HMDHome isResidentSupported](v33, "isResidentSupported"))
      {
        v70 = (void *)MEMORY[0x227676638]();
        v71 = v33;
        HMFGetOSLogHandle();
        v72 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v72, OS_LOG_TYPE_INFO))
        {
          HMFGetLogIdentifier();
          v73 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543618;
          v96 = v73;
          v97 = 2112;
          v98 = (uint64_t)v36;
          _os_log_impl(&dword_2218F0000, v72, OS_LOG_TYPE_INFO, "%{public}@Cannot invite admin user %@ because it requires a resident", buf, 0x16u);

        }
        objc_autoreleasePoolPop(v70);
        objc_msgSend(MEMORY[0x24BDD1540], "errorWithDomain:code:userInfo:", *MEMORY[0x24BDD5BD8], 48, 0);
        v38 = (void *)objc_claimAutoreleasedReturnValue();
        v4 = v85;
        objc_msgSend(v85, "responseHandler");
        v68 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
        ((void (**)(_QWORD, void *, _QWORD))v68)[2](v68, v38, 0);
LABEL_43:

LABEL_54:
        v14 = v86;
        v13 = v84;

        v8 = v83;
        goto LABEL_55;
      }
      if (objc_msgSend(v31, "isRestrictedGuest"))
      {
        if (!-[HMDHome isRestrictedGuestEnabled](v33, "isRestrictedGuestEnabled"))
        {
          v74 = (void *)MEMORY[0x227676638]();
          v75 = v33;
          HMFGetOSLogHandle();
          v76 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v76, OS_LOG_TYPE_ERROR))
          {
            HMFGetLogIdentifier();
            v77 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 138543362;
            v96 = v77;
            _os_log_impl(&dword_2218F0000, v76, OS_LOG_TYPE_ERROR, "%{public}@Failed to invite user with access restrictions because restricted guest is not enabled", buf, 0xCu);

          }
          objc_autoreleasePoolPop(v74);
          objc_msgSend(MEMORY[0x24BDD1540], "errorWithDomain:code:userInfo:", *MEMORY[0x24BDD5BD8], 48, 0);
          v78 = objc_claimAutoreleasedReturnValue();
          goto LABEL_53;
        }
        objc_msgSend(v31, "restrictedGuestHomeAccessSettings");
        v40 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v40, "identifiersOfAccessAllowedToAccessories");
        v41 = (void *)objc_claimAutoreleasedReturnValue();
        v42 = objc_msgSend(v41, "count");

        if (v42)
        {
          objc_msgSend(v31, "restrictedGuestHomeAccessSettings");
          v43 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v43, "identifiersOfAccessAllowedToAccessories");
          v44 = (void *)objc_claimAutoreleasedReturnValue();
          v88[0] = MEMORY[0x24BDAC760];
          v88[1] = 3221225472;
          v88[2] = __34__HMDHome__handleUserInvitations___block_invoke;
          v88[3] = &unk_24E79BCA0;
          v88[4] = v33;
          v45 = objc_msgSend(v44, "na_all:", v88);

          if ((v45 & 1) == 0)
          {
            v79 = (void *)MEMORY[0x227676638]();
            v80 = v33;
            HMFGetOSLogHandle();
            v81 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v81, OS_LOG_TYPE_ERROR))
            {
              HMFGetLogIdentifier();
              v82 = (void *)objc_claimAutoreleasedReturnValue();
              *(_DWORD *)buf = 138543362;
              v96 = v82;
              _os_log_impl(&dword_2218F0000, v81, OS_LOG_TYPE_ERROR, "%{public}@Failed to invite guest user as could not find all the accessories in the home.", buf, 0xCu);

            }
            objc_autoreleasePoolPop(v79);
            objc_msgSend(MEMORY[0x24BDD1540], "hmPrivateErrorWithCode:", 2903);
            v78 = objc_claimAutoreleasedReturnValue();
LABEL_53:
            v38 = (void *)v78;
            v4 = v85;
            objc_msgSend(v85, "respondWithError:", v78);
            goto LABEL_54;
          }
        }
      }

    }
    v28 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v89, v94, 16);
    v8 = v83;
    if (v28)
      continue;
    break;
  }
LABEL_24:

  v4 = v85;
  -[HMDHome _addUsersWithInviteInformations:message:](v16, "_addUsersWithInviteInformations:message:", obj, v85);
  v14 = v86;
  v13 = v84;
LABEL_55:

LABEL_56:
LABEL_57:

}

- (id)userFromOutgoingInvitationModel:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  HMDHome *v7;
  NSObject *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  HMDHome *v14;
  NSObject *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  HMDHome *v20;
  NSObject *v21;
  NSObject *v22;
  void *v23;
  const char *v24;
  void *v25;
  void *v26;
  HMDHome *v27;
  int v29;
  void *v30;
  __int16 v31;
  void *v32;
  __int16 v33;
  void *v34;
  __int16 v35;
  id v36;
  uint64_t v37;

  v37 = *MEMORY[0x24BDAC8D0];
  v4 = a3;
  objc_msgSend(v4, "pendingUserUUID");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = (void *)MEMORY[0x227676638]();
  v7 = self;
  HMFGetOSLogHandle();
  v8 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v10 = (void *)MEMORY[0x24BDD16E0];
    -[HMDHome pendingUsers](v7, "pendingUsers");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "numberWithUnsignedInteger:", objc_msgSend(v11, "count"));
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    v29 = 138544130;
    v30 = v9;
    v31 = 2112;
    v32 = v5;
    v33 = 2112;
    v34 = v12;
    v35 = 2112;
    v36 = v4;
    _os_log_impl(&dword_2218F0000, v8, OS_LOG_TYPE_INFO, "%{public}@pending User UUID : %@ / %@ / %@", (uint8_t *)&v29, 0x2Au);

  }
  objc_autoreleasePoolPop(v6);
  if (v5)
  {
    v13 = (void *)MEMORY[0x227676638]();
    v14 = v7;
    HMFGetOSLogHandle();
    v15 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      v29 = 138543618;
      v30 = v16;
      v31 = 2112;
      v32 = v5;
      _os_log_impl(&dword_2218F0000, v15, OS_LOG_TYPE_INFO, "%{public}@Going to find existing pending user with UUID: %@", (uint8_t *)&v29, 0x16u);

    }
    objc_autoreleasePoolPop(v13);
    -[HMDHome pendingUsers](v14, "pendingUsers");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v17, "hmf_firstObjectWithUUID:", v5);
    v18 = (void *)objc_claimAutoreleasedReturnValue();

    v19 = (void *)MEMORY[0x227676638]();
    v20 = v14;
    HMFGetOSLogHandle();
    v21 = objc_claimAutoreleasedReturnValue();
    v22 = v21;
    if (v18)
    {
      if (os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v23 = (void *)objc_claimAutoreleasedReturnValue();
        v29 = 138543618;
        v30 = v23;
        v31 = 2112;
        v32 = v18;
        v24 = "%{public}@Found the pending user from the list. Going to use it : %@";
LABEL_14:
        _os_log_impl(&dword_2218F0000, v22, OS_LOG_TYPE_INFO, v24, (uint8_t *)&v29, 0x16u);

        goto LABEL_15;
      }
      goto LABEL_15;
    }
    if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v25 = (void *)objc_claimAutoreleasedReturnValue();
      v29 = 138543618;
      v30 = v25;
      v31 = 2112;
      v32 = v5;
      _os_log_impl(&dword_2218F0000, v22, OS_LOG_TYPE_ERROR, "%{public}@Did not find existing pending user with UUID: %@. Will go ahead and create a brand new user with random UUID", (uint8_t *)&v29, 0x16u);

    }
    objc_autoreleasePoolPop(v19);
  }
  objc_msgSend(v4, "user");
  v26 = (void *)objc_claimAutoreleasedReturnValue();
  +[HMDUser userWithDictionary:](HMDUser, "userWithDictionary:", v26);
  v18 = (void *)objc_claimAutoreleasedReturnValue();

  v19 = (void *)MEMORY[0x227676638](objc_msgSend(v18, "setHome:", v7));
  v27 = v7;
  HMFGetOSLogHandle();
  v22 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v22, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    v29 = 138543618;
    v30 = v23;
    v31 = 2112;
    v32 = v18;
    v24 = "%{public}@No Pending user found for the invite. Creating a brand new user : %@";
    goto LABEL_14;
  }
LABEL_15:

  objc_autoreleasePoolPop(v19);
  return v18;
}

- (void)_handleAddOutgoingHomeInvitationModel:(id)a3 message:(id)a4
{
  id v6;
  id v7;
  void *v8;
  void *v9;
  void *v10;
  HMDOutgoingHomeInvitation *v11;
  void *v12;
  void *v13;
  uint64_t v14;
  void *v15;
  HMDOutgoingHomeInvitation *v16;
  void *v17;
  HMDHome *v18;
  NSObject *v19;
  void *v20;
  id v21;
  void *v22;
  void *v23;
  void *v24;
  id v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(id *);
  void *v30;
  id v31;
  id v32;
  id v33;
  id location;
  uint8_t buf[4];
  void *v36;
  __int16 v37;
  void *v38;
  __int16 v39;
  uint64_t v40;
  __int16 v41;
  HMDOutgoingHomeInvitation *v42;
  uint64_t v43;

  v43 = *MEMORY[0x24BDAC8D0];
  v6 = a3;
  v7 = a4;
  objc_msgSend(v6, "uuid");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHome outgoingInvitationWithUUID:](self, "outgoingInvitationWithUUID:", v8);
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v9)
  {
    -[HMDHome userFromOutgoingInvitationModel:](self, "userFromOutgoingInvitationModel:", v6);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "refreshDisplayName");
    v11 = [HMDOutgoingHomeInvitation alloc];
    objc_msgSend(v6, "uuid");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "invitationState");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    v14 = objc_msgSend(v13, "integerValue");
    objc_msgSend(v6, "expiryDate");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    v16 = -[HMDOutgoingHomeInvitation initWithUUID:invitee:invitationState:forHome:expiryDate:messageIdentifier:](v11, "initWithUUID:invitee:invitationState:forHome:expiryDate:messageIdentifier:", v12, v10, v14, self, v15, 0);

    v17 = (void *)MEMORY[0x227676638]();
    v18 = self;
    HMFGetOSLogHandle();
    v19 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138544130;
      v36 = v20;
      v37 = 2112;
      v38 = v10;
      v39 = 2112;
      v40 = 0;
      v41 = 2112;
      v42 = v16;
      _os_log_impl(&dword_2218F0000, v19, OS_LOG_TYPE_INFO, "%{public}@Created user [%@] from outgoing invitation: %@ / %@", buf, 0x2Au);

    }
    objc_autoreleasePoolPop(v17);
    v21 = objc_alloc(MEMORY[0x24BE3F1B0]);
    objc_msgSend(MEMORY[0x24BE3F1B8], "allMessageDestinations");
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    v23 = (void *)objc_msgSend(v21, "initWithName:destination:payload:", CFSTR("kTransactionUpdate"), v22, 0);
    -[HMDOutgoingHomeInvitation transactionObjectUpdated:newValues:message:](v16, "transactionObjectUpdated:newValues:message:", 0, v6, v23);

    -[HMDHome workQueue](v18, "workQueue");
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHomeInvitation setClientQueue:](v16, "setClientQueue:", v24);

    objc_initWeak((id *)buf, v18);
    objc_initWeak(&location, v16);
    v27 = MEMORY[0x24BDAC760];
    v28 = 3221225472;
    v29 = __57__HMDHome__handleAddOutgoingHomeInvitationModel_message___block_invoke;
    v30 = &unk_24E798350;
    objc_copyWeak(&v32, (id *)buf);
    objc_copyWeak(&v33, &location);
    v25 = v7;
    v31 = v25;
    -[HMDHomeInvitation setExpirationHandler:](v16, "setExpirationHandler:", &v27);
    -[HMDHome addOutgoingInvitation:](v18, "addOutgoingInvitation:", v16, v27, v28, v29, v30);
    -[HMDHome _cleanRemovedUsers:](v18, "_cleanRemovedUsers:", v10);
    objc_msgSend(v25, "transactionResult");
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v26, "markChanged");

    objc_destroyWeak(&v33);
    objc_destroyWeak(&v32);
    objc_destroyWeak(&location);
    objc_destroyWeak((id *)buf);

  }
}

- (void)_handleRemoveOutgoingHomeInvitationModel:(id)a3 message:(id)a4
{
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  id v12;

  v12 = a4;
  objc_msgSend(a3, "uuid");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHome outgoingInvitationWithUUID:](self, "outgoingInvitationWithUUID:", v6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  if (v7)
  {
    -[HMDHome removeOutgoingInvitation:](self, "removeOutgoingInvitation:", v7);
    objc_msgSend(v12, "transactionResult");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "markChanged");
    objc_msgSend(v7, "user");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "uuid");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHome userWithUUID:](self, "userWithUUID:", v10);
    v11 = (void *)objc_claimAutoreleasedReturnValue();

    if (v11)
    {
      -[HMDHome __handleCompletedOutgoingInvitation:](self, "__handleCompletedOutgoingInvitation:", v7);
    }
    else
    {
      if (objc_msgSend(v8, "source") == 2 || objc_msgSend(v8, "source") == 3)
        objc_msgSend(v7, "cancel");
      else
        -[HMDHome __handleCancelledOutgoingInvitation:](self, "__handleCancelledOutgoingInvitation:", v7);
      objc_msgSend(v7, "updateInvitationState:", 1);
    }

  }
  objc_msgSend(v12, "respondWithPayload:", 0);

}

- (void)_grantAccessAndSendOutgoingInvitation:(id)a3 suppressHomeInviteNotification:(BOOL)a4
{
  id v6;
  void *v7;
  void *v8;
  id v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  HMDHome *v18;
  NSObject *v19;
  void *v20;
  id v21;
  id v22;
  void *v23;
  id obj;
  _QWORD v25[4];
  id v26;
  id v27;
  _QWORD v28[5];
  id v29;
  BOOL v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  id location;
  uint8_t buf[4];
  void *v38;
  _BYTE v39[128];
  uint64_t v40;

  v40 = *MEMORY[0x24BDAC8D0];
  v6 = a3;
  if (!v6)
    _HMFPreconditionFailure();
  v7 = v6;
  objc_initWeak(&location, self);
  objc_msgSend(MEMORY[0x24BE3F180], "futureWithNoValue");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = objc_alloc(MEMORY[0x24BE3F168]);
  -[HMDHome workQueue](self, "workQueue");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v23 = (void *)objc_msgSend(v9, "initWithQueue:", v10);

  v35 = _HMFThreadLocalAsyncContextPush();
  v31 = 0u;
  v32 = 0u;
  v33 = 0u;
  v34 = 0u;
  obj = v7;
  v11 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v31, v39, 16);
  if (v11)
  {
    v12 = *(_QWORD *)v32;
    while (2)
    {
      v13 = 0;
      v14 = v8;
      do
      {
        if (*(_QWORD *)v32 != v12)
          objc_enumerationMutation(obj);
        v15 = *(void **)(*((_QWORD *)&v31 + 1) + 8 * v13);
        if (!-[HMDHome isCurrentDevicePrimaryResident](self, "isCurrentDevicePrimaryResident"))
        {
          v17 = (void *)MEMORY[0x227676638]();
          v18 = self;
          HMFGetOSLogHandle();
          v19 = (id)objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
          {
            HMFGetLogIdentifier();
            v20 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 138543362;
            v38 = v20;
            _os_log_impl(&dword_2218F0000, v19, OS_LOG_TYPE_ERROR, "%{public}@Current device is no longer primary, aborting the sending of outgoing invitations.", buf, 0xCu);

          }
          objc_autoreleasePoolPop(v17);
          v8 = v14;
          goto LABEL_14;
        }
        objc_msgSend(MEMORY[0x24BDBCE60], "now");
        v16 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v15, "setDateSent:", v16);

        v28[0] = MEMORY[0x24BDAC760];
        v28[1] = 3221225472;
        v28[2] = __80__HMDHome__grantAccessAndSendOutgoingInvitation_suppressHomeInviteNotification___block_invoke;
        v28[3] = &unk_24E776830;
        objc_copyWeak(&v29, &location);
        v28[4] = v15;
        v30 = a4;
        objc_msgSend(v14, "then:", v28);
        v8 = (void *)objc_claimAutoreleasedReturnValue();

        objc_destroyWeak(&v29);
        ++v13;
        v14 = v8;
      }
      while (v11 != v13);
      v11 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v31, v39, 16);
      if (v11)
        continue;
      break;
    }
  }
LABEL_14:

  v25[0] = MEMORY[0x24BDAC760];
  v25[1] = 3221225472;
  v25[2] = __80__HMDHome__grantAccessAndSendOutgoingInvitation_suppressHomeInviteNotification___block_invoke_1261;
  v25[3] = &unk_24E776858;
  objc_copyWeak(&v27, &location);
  v21 = obj;
  v26 = v21;
  v22 = (id)objc_msgSend(v8, "then:", v25);

  objc_destroyWeak(&v27);
  _HMFThreadLocalAsyncContextPop();

  objc_destroyWeak(&location);
}

- (void)resendOutgoingInvitationToUser:(id)a3
{
  id v4;
  NSObject *v5;
  id v6;
  _QWORD v7[5];
  id v8;

  v4 = a3;
  -[HMDHome workQueue](self, "workQueue");
  v5 = objc_claimAutoreleasedReturnValue();
  v7[0] = MEMORY[0x24BDAC760];
  v7[1] = 3221225472;
  v7[2] = __42__HMDHome_resendOutgoingInvitationToUser___block_invoke;
  v7[3] = &unk_24E79C268;
  v7[4] = self;
  v8 = v4;
  v6 = v4;
  dispatch_async(v5, v7);

}

- (void)_processUnsentOutgoingInvitations
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t i;
  uint64_t v11;
  void *v12;
  HMDHome *v13;
  NSObject *v14;
  void *v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint8_t buf[4];
  void *v21;
  __int16 v22;
  void *v23;
  _BYTE v24[128];
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v3 = (void *)MEMORY[0x24BDBCEB8];
  -[HMDHome outgoingInvitations](self, "outgoingInvitations");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "arrayWithCapacity:", objc_msgSend(v4, "count"));
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  v18 = 0u;
  v19 = 0u;
  v16 = 0u;
  v17 = 0u;
  -[HMDHome outgoingInvitations](self, "outgoingInvitations", 0);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v16, v24, 16);
  if (v7)
  {
    v8 = v7;
    v9 = *(_QWORD *)v17;
    do
    {
      for (i = 0; i != v8; ++i)
      {
        if (*(_QWORD *)v17 != v9)
          objc_enumerationMutation(v6);
        v11 = *(_QWORD *)(*((_QWORD *)&v16 + 1) + 8 * i);
        if (-[HMDHome _shouldResendOutgoingInvitation:](self, "_shouldResendOutgoingInvitation:", v11))
          objc_msgSend(v5, "addObject:", v11);
      }
      v8 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v16, v24, 16);
    }
    while (v8);
  }

  if (objc_msgSend(v5, "count"))
  {
    v12 = (void *)MEMORY[0x227676638]();
    v13 = self;
    HMFGetOSLogHandle();
    v14 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v21 = v15;
      v22 = 2112;
      v23 = v5;
      _os_log_impl(&dword_2218F0000, v14, OS_LOG_TYPE_INFO, "%{public}@Resending unsent outgoing invitations %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v12);
    -[HMDHome _grantAccessAndSendOutgoingInvitation:suppressHomeInviteNotification:](v13, "_grantAccessAndSendOutgoingInvitation:suppressHomeInviteNotification:", v5, 1);
  }

}

- (void)auditAccessForUsers
{
  NSObject *v3;
  _QWORD block[5];

  -[HMDHome workQueue](self, "workQueue");
  v3 = objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x24BDAC760];
  block[1] = 3221225472;
  block[2] = __30__HMDHome_auditAccessForUsers__block_invoke;
  block[3] = &unk_24E79C240;
  block[4] = self;
  dispatch_async(v3, block);

}

- (void)_auditAccessForUsers
{
  NSObject *v3;
  void *v4;
  void *v5;
  void *v6;
  id v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  id v13;
  _QWORD v14[6];

  -[HMDHome workQueue](self, "workQueue");
  v3 = objc_claimAutoreleasedReturnValue();
  dispatch_assert_queue_V2(v3);

  if (-[HMDHome isOwnerUser](self, "isOwnerUser"))
  {
    -[HMDHome usersSupportingPresence](self, "usersSupportingPresence");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    v5 = (void *)objc_msgSend(v4, "mutableCopy");

    -[HMDHome owner](self, "owner");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "removeObject:", v6);

    if (objc_msgSend(v5, "count"))
    {
      v7 = objc_alloc(MEMORY[0x24BE3F168]);
      -[HMDHome workQueue](self, "workQueue");
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      v9 = (void *)objc_msgSend(v7, "initWithQueue:", v8);

      v14[5] = _HMFThreadLocalAsyncContextPush();
      -[HMDHome homeManager](self, "homeManager");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v10, "homeOwnerCloudShareManager");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v11, "auditAccessForUsers:home:", v5, self);
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      v14[0] = MEMORY[0x24BDAC760];
      v14[1] = 3221225472;
      v14[2] = __31__HMDHome__auditAccessForUsers__block_invoke;
      v14[3] = &unk_24E797000;
      v14[4] = self;
      v13 = (id)objc_msgSend(v12, "then:", v14);

      _HMFThreadLocalAsyncContextPop();
    }

  }
}

- (void)_fixupUsersWithoutMergeID
{
  void *v3;
  void *v4;
  id v5;
  _QWORD v6[5];
  id v7;

  -[HMDHome backingStore](self, "backingStore");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "context");
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  v6[0] = MEMORY[0x24BDAC760];
  v6[1] = 3221225472;
  v6[2] = __36__HMDHome__fixupUsersWithoutMergeID__block_invoke;
  v6[3] = &unk_24E79C268;
  v6[4] = self;
  v7 = v4;
  v5 = v4;
  objc_msgSend(v5, "performBlock:", v6);

}

- (void)__sendOutgoingInvitations:(id)a3 suppressHomeInviteNotification:(BOOL)a4
{
  _BOOL8 v4;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v4 = a4;
  v16 = *MEMORY[0x24BDAC8D0];
  v6 = a3;
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
  if (v7)
  {
    v8 = v7;
    v9 = *(_QWORD *)v12;
    do
    {
      v10 = 0;
      do
      {
        if (*(_QWORD *)v12 != v9)
          objc_enumerationMutation(v6);
        -[HMDHome __sendOutgoingInvitation:shareURL:shareToken:suppressHomeInviteNotification:](self, *(void **)(*((_QWORD *)&v11 + 1) + 8 * v10++), 0, 0, v4);
      }
      while (v8 != v10);
      v8 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    }
    while (v8);
  }

}

- (void)_addUsersWithInviteInformations:(id)a3 message:(id)a4
{
  id v6;
  uint64_t v7;
  uint64_t i;
  void *v9;
  uint64_t v10;
  void *v11;
  void *v12;
  void *v13;
  HMDUser *v14;
  uint64_t v15;
  HMDRestrictedGuestHomeAccessSettings *v16;
  void *v17;
  HMDRestrictedGuestHomeAccessSettings *v18;
  uint64_t v19;
  void *v20;
  HMDHome *v21;
  NSObject *v22;
  void *v23;
  HMDOutgoingHomeInvitation *v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  id v33;
  void *v34;
  id v35;
  void *v36;
  void *v37;
  void *v38;
  id v39;
  void *v40;
  void *v41;
  id *location;
  id *locationa;
  id v44;
  void *v45;
  id obj;
  id *v47;
  void *v48;
  void *v49;
  void *v50;
  _QWORD v51[4];
  id v52;
  id v53;
  _QWORD v54[4];
  id v55;
  id v56;
  id v57;
  _QWORD aBlock[4];
  id v59;
  id v60;
  char v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  _QWORD v66[2];
  _QWORD v67[2];
  uint8_t buf[4];
  void *v69;
  __int16 v70;
  HMDUser *v71;
  _BYTE v72[128];
  uint64_t v73;

  v73 = *MEMORY[0x24BDAC8D0];
  v6 = a3;
  v44 = a4;
  objc_msgSend(MEMORY[0x24BDBCEB8], "array");
  v49 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x24BDBCEB8], "array");
  v48 = (void *)objc_claimAutoreleasedReturnValue();
  v64 = 0u;
  v65 = 0u;
  v62 = 0u;
  v63 = 0u;
  obj = v6;
  v7 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v62, v72, 16);
  if (v7)
  {
    v47 = *(id **)v63;
    do
    {
      for (i = 0; i != v7; ++i)
      {
        if (*(id **)v63 != v47)
          objc_enumerationMutation(obj);
        v9 = *(void **)(*((_QWORD *)&v62 + 1) + 8 * i);
        v10 = objc_msgSend((id)objc_opt_class(), "privilegeFromUserInviteInformation:", v9);
        +[HMDAccountHandleFormatter defaultFormatter](HMDAccountHandleFormatter, "defaultFormatter");
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v9, "userID");
        v12 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v11, "accountHandleFromString:", v12);
        v13 = (void *)objc_claimAutoreleasedReturnValue();

        v14 = -[HMDUser initWithAccountHandle:home:pairingIdentity:privilege:]([HMDUser alloc], "initWithAccountHandle:home:pairingIdentity:privilege:", v13, self, 0, v10);
        -[HMDUser refreshDisplayName](v14, "refreshDisplayName");
        -[HMDUser setRemoteAccessAllowed:](v14, "setRemoteAccessAllowed:", objc_msgSend(v9, "isRemoteAccessAllowed"));
        -[HMDUser setCamerasAccessLevel:](v14, "setCamerasAccessLevel:", objc_msgSend(v9, "camerasAccessLevel"));
        if (objc_msgSend(v9, "isAnnounceAccessAllowed"))
          v15 = 2;
        else
          v15 = 1;
        -[HMDUser setAnnounceAccessLevel:](v14, "setAnnounceAccessLevel:", v15);
        if (objc_msgSend(v9, "isRestrictedGuest")
          && -[HMDHome isRestrictedGuestEnabled](self, "isRestrictedGuestEnabled"))
        {
          v16 = [HMDRestrictedGuestHomeAccessSettings alloc];
          objc_msgSend(v9, "restrictedGuestHomeAccessSettings");
          v17 = (void *)objc_claimAutoreleasedReturnValue();
          v18 = -[HMDRestrictedGuestHomeAccessSettings initWithRestrictedGuestHomeAccessSettings:](v16, "initWithRestrictedGuestHomeAccessSettings:", v17);

          if (v18)
            v19 = -[HMDUser setRestrictedGuestAccessSettings:](v14, "setRestrictedGuestAccessSettings:", v18);
          v20 = (void *)MEMORY[0x227676638](v19);
          v21 = self;
          HMFGetOSLogHandle();
          v22 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v22, OS_LOG_TYPE_INFO))
          {
            HMFGetLogIdentifier();
            v23 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 138543618;
            v69 = v23;
            v70 = 2112;
            v71 = v14;
            _os_log_impl(&dword_2218F0000, v22, OS_LOG_TYPE_INFO, "%{public}@Received user invite request with restricted access settings : %@", buf, 0x16u);

          }
          objc_autoreleasePoolPop(v20);

        }
        v24 = -[HMDOutgoingHomeInvitation initWithInvitee:invitationState:forHome:expiryDate:messageIdentifier:]([HMDOutgoingHomeInvitation alloc], "initWithInvitee:invitationState:forHome:expiryDate:messageIdentifier:", v14, 2, self, 0, 0);
        objc_msgSend(v49, "addObject:", v24);
        -[HMDHomeInvitation invitationData](v24, "invitationData");
        v25 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v48, "addObject:", v25);

      }
      v7 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v62, v72, 16);
    }
    while (v7);
  }

  v26 = _os_feature_enabled_impl();
  objc_initWeak((id *)buf, self);
  v27 = MEMORY[0x24BDAC760];
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 3221225472;
  aBlock[2] = __51__HMDHome__addUsersWithInviteInformations_message___block_invoke;
  aBlock[3] = &unk_24E790A98;
  objc_copyWeak(&v60, (id *)buf);
  v28 = v49;
  v59 = v28;
  v61 = v26;
  v50 = _Block_copy(aBlock);
  -[HMDHome administratorHandler](self, "administratorHandler");
  v29 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v29, "shouldRelayMessages"))
  {
    encodeRootObject();
    v30 = (void *)objc_claimAutoreleasedReturnValue();
    v66[0] = CFSTR("HM.invitations");
    v66[1] = CFSTR("HMDHomeSuppressInviteNotificationKey");
    v67[0] = v30;
    objc_msgSend(MEMORY[0x24BDD16E0], "numberWithBool:", v26);
    v31 = (void *)objc_claimAutoreleasedReturnValue();
    v67[1] = v31;
    objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v67, v66, 2);
    v45 = (void *)objc_claimAutoreleasedReturnValue();

    v32 = (void *)MEMORY[0x24BE3F1D0];
    v54[0] = v27;
    v54[1] = 3221225472;
    v54[2] = __51__HMDHome__addUsersWithInviteInformations_message___block_invoke_2;
    v54[3] = &unk_24E79ACA8;
    location = &v57;
    objc_copyWeak(&v57, (id *)buf);
    v55 = v28;
    v33 = v44;
    v56 = v33;
    objc_msgSend(v32, "messageWithName:messagePayload:responseHandler:", CFSTR("kAddHomeInvitesInternalRequestKey"), v45, v54);
    v34 = (void *)objc_claimAutoreleasedReturnValue();
    v35 = objc_alloc(MEMORY[0x24BE3F1B8]);
    -[HMDHome uuid](self, "uuid");
    v36 = (void *)objc_claimAutoreleasedReturnValue();
    v37 = (void *)objc_msgSend(v35, "initWithTarget:", v36);

    objc_msgSend(v34, "setDestination:", v37);
    objc_msgSend(v34, "setQualityOfService:", 33);
    v53 = 0;
    objc_msgSend(v29, "operationForMessage:error:", v34, &v53);
    v38 = (void *)objc_claimAutoreleasedReturnValue();
    v39 = v53;
    v40 = v39;
    if (v38)
    {
      objc_msgSend(v29, "addOperation:", v38, &v57);
    }
    else
    {
      v41 = v39;
      if (!v39)
      {
        objc_msgSend(MEMORY[0x24BDD1540], "hmErrorWithCode:", 52, &v57);
        v41 = (void *)objc_claimAutoreleasedReturnValue();
      }
      objc_msgSend(v33, "respondWithError:", v41, location);
      if (!v40)

    }
    objc_destroyWeak(locationa);

  }
  else
  {
    v51[0] = v27;
    v51[1] = 3221225472;
    v51[2] = __51__HMDHome__addUsersWithInviteInformations_message___block_invoke_1268;
    v51[3] = &unk_24E79A050;
    v52 = v50;
    -[HMDHome _addOutgoingInvitations:message:transactionCompleted:](self, "_addOutgoingInvitations:message:transactionCompleted:", v28, v44, v51);
    v30 = v52;
  }

  objc_destroyWeak(&v60);
  objc_destroyWeak((id *)buf);

}

- (void)_handleUpdateUserCamerasAccessLevel:(id)a3
{
  id v4;
  __CFString *v5;
  void *v6;
  void *v7;
  void *v8;
  HMDHome *v9;
  NSObject *v10;
  void *v11;
  void *v12;
  uint64_t v13;
  void *v14;
  HMDHome *v15;
  NSObject *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  HMDHome *v24;
  NSObject *v25;
  NSObject *v26;
  void *v27;
  __CFString *v28;
  void *v29;
  uint64_t v30;
  void *v31;
  HMDHome *v32;
  NSObject *v33;
  void *v34;
  NSObject *v35;
  void *v36;
  void *v37;
  void *v38;
  __CFString *v39;
  void *v40;
  void *v41;
  void *v42;
  _QWORD v43[4];
  id v44;
  id v45;
  uint8_t buf[4];
  void *v47;
  __int16 v48;
  const __CFString *v49;
  __int16 v50;
  void *v51;
  uint64_t v52;

  v52 = *MEMORY[0x24BDAC8D0];
  v4 = a3;
  objc_msgSend(v4, "stringForKey:", CFSTR("kUserIDKey"));
  v5 = (__CFString *)objc_claimAutoreleasedReturnValue();
  -[HMDHome users](self, "users");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "hmf_firstObjectWithValue:forKeyPath:", v5, CFSTR("userID"));
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v7)
  {
    v14 = (void *)MEMORY[0x227676638]();
    v15 = self;
    HMFGetOSLogHandle();
    v16 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v47 = v17;
      v48 = 2112;
      v49 = v5;
      _os_log_impl(&dword_2218F0000, v16, OS_LOG_TYPE_INFO, "%{public}@Failed to find user %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v14);
    v12 = (void *)MEMORY[0x24BDD1540];
    v13 = 2;
    goto LABEL_9;
  }
  if (!objc_msgSend(v7, "isOwner"))
  {
    v18 = (void *)objc_msgSend(v7, "newModelWithChangeType:", 2);
    objc_msgSend(v4, "numberForKey:", CFSTR("kUserCamerasAccessLevelInformationKey"));
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    v20 = v19;
    if (v19)
    {
      v21 = objc_msgSend(v19, "integerValue");
      if ((HMUserIsValidCameraAccessLevel() & 1) != 0)
      {
        v22 = objc_msgSend(v7, "camerasAccessLevel");
        v23 = (void *)MEMORY[0x227676638]();
        v24 = self;
        HMFGetOSLogHandle();
        v25 = objc_claimAutoreleasedReturnValue();
        v26 = v25;
        if (v22 != v21)
        {
          if (os_log_type_enabled(v25, OS_LOG_TYPE_INFO))
          {
            HMFGetLogIdentifier();
            v38 = (void *)objc_claimAutoreleasedReturnValue();
            HMUserCameraAccessLevelAsString();
            v39 = (__CFString *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 138543874;
            v47 = v38;
            v48 = 2112;
            v49 = v39;
            v50 = 2112;
            v51 = v7;
            _os_log_impl(&dword_2218F0000, v26, OS_LOG_TYPE_INFO, "%{public}@Updating cameras access level to %@ for user: %@", buf, 0x20u);

          }
          objc_autoreleasePoolPop(v23);
          objc_msgSend(v18, "setCamerasAccessLevel:", v20);
          -[HMDHome backingStore](v24, "backingStore");
          v40 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v4, "name");
          v41 = (void *)objc_claimAutoreleasedReturnValue();
          +[HMDBackingStoreTransactionOptions defaultXPCOptions](HMDBackingStoreTransactionOptions, "defaultXPCOptions");
          v42 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v40, "transaction:options:", v41, v42);
          v37 = (void *)objc_claimAutoreleasedReturnValue();

          objc_msgSend(v37, "add:", v18);
          v43[0] = MEMORY[0x24BDAC760];
          v43[1] = 3221225472;
          v43[2] = __47__HMDHome__handleUpdateUserCamerasAccessLevel___block_invoke;
          v43[3] = &unk_24E79BCC8;
          v44 = v4;
          v45 = v20;
          objc_msgSend(v37, "run:", v43);

          goto LABEL_24;
        }
        if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
        {
          HMFGetLogIdentifier();
          v27 = (void *)objc_claimAutoreleasedReturnValue();
          HMUserCameraAccessLevelAsString();
          v28 = (__CFString *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543618;
          v47 = v27;
          v48 = 2112;
          v49 = v28;
          _os_log_impl(&dword_2218F0000, v26, OS_LOG_TYPE_ERROR, "%{public}@Cameras access level: %@ already set", buf, 0x16u);

        }
        objc_autoreleasePoolPop(v23);
        v29 = (void *)MEMORY[0x24BDD1540];
        v30 = 1;
LABEL_23:
        objc_msgSend(v29, "hmErrorWithCode:", v30);
        v37 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v4, "respondWithError:", v37);
LABEL_24:

        goto LABEL_25;
      }
      v31 = (void *)MEMORY[0x227676638]();
      v32 = self;
      HMFGetOSLogHandle();
      v35 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v35, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v36 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        v47 = v36;
        v48 = 2048;
        v49 = (const __CFString *)v21;
        _os_log_impl(&dword_2218F0000, v35, OS_LOG_TYPE_ERROR, "%{public}@Invalid cameras access level value: %ld", buf, 0x16u);

      }
    }
    else
    {
      v31 = (void *)MEMORY[0x227676638]();
      v32 = self;
      HMFGetOSLogHandle();
      v33 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v33, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v34 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        v47 = v34;
        v48 = 2112;
        v49 = CFSTR("kUserCamerasAccessLevelInformationKey");
        _os_log_impl(&dword_2218F0000, v33, OS_LOG_TYPE_ERROR, "%{public}@Missing value for key: %@", buf, 0x16u);

      }
    }

    objc_autoreleasePoolPop(v31);
    v29 = (void *)MEMORY[0x24BDD1540];
    v30 = 3;
    goto LABEL_23;
  }
  v8 = (void *)MEMORY[0x227676638]();
  v9 = self;
  HMFGetOSLogHandle();
  v10 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543618;
    v47 = v11;
    v48 = 2112;
    v49 = v5;
    _os_log_impl(&dword_2218F0000, v10, OS_LOG_TYPE_INFO, "%{public}@Cannot modify cameras access level for owner of the home: %@", buf, 0x16u);

  }
  objc_autoreleasePoolPop(v8);
  v12 = (void *)MEMORY[0x24BDD1540];
  v13 = 48;
LABEL_9:
  objc_msgSend(v12, "hmErrorWithCode:", v13);
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "respondWithError:", v18);
LABEL_25:

}

- (void)_handleUpdateUserAccess:(id)a3
{
  id v4;
  void (**v5)(_QWORD, _QWORD, _QWORD);
  void *v6;
  void *v7;
  void *v8;
  HMDHome *v9;
  NSObject *v10;
  void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  HMDHome *v16;
  NSObject *v17;
  void *v18;
  void *v19;
  void (**v20)(_QWORD, _QWORD, _QWORD);
  void *v21;
  HMDHome *v22;
  NSObject *v23;
  void *v24;
  void *v25;
  void *v26;
  int v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void (**v33)(_QWORD, _QWORD, _QWORD);
  void *v34;
  HMDHome *v35;
  NSObject *v36;
  void *v37;
  void *v38;
  HMDHome *v39;
  NSObject *v40;
  void *v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  HMDHome *v46;
  NSObject *v47;
  void *v48;
  const __CFString *v49;
  void *v50;
  void *v51;
  _QWORD v52[4];
  id v53;
  id v54;
  uint8_t buf[4];
  void *v56;
  __int16 v57;
  void *v58;
  __int16 v59;
  const __CFString *v60;
  uint64_t v61;

  v61 = *MEMORY[0x24BDAC8D0];
  v4 = a3;
  if ((objc_msgSend(v4, "isEntitledForSPIAccess") & 1) != 0 || (objc_msgSend(v4, "isRemote") & 1) != 0)
  {
    objc_msgSend(v4, "stringForKey:", CFSTR("kUserIDKey"));
    v5 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
    -[HMDHome users](self, "users");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "hmf_firstObjectWithValue:forKeyPath:", v5, CFSTR("userID"));
    v7 = (void *)objc_claimAutoreleasedReturnValue();

    if (!v7)
    {
      v15 = (void *)MEMORY[0x227676638]();
      v16 = self;
      HMFGetOSLogHandle();
      v17 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v18 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        v56 = v18;
        v57 = 2112;
        v58 = v5;
        _os_log_impl(&dword_2218F0000, v17, OS_LOG_TYPE_INFO, "%{public}@Failed to find user %@", buf, 0x16u);

      }
      objc_autoreleasePoolPop(v15);
      v12 = (void *)MEMORY[0x24BDD1540];
      v13 = *MEMORY[0x24BDD5BD8];
      v14 = 2;
      goto LABEL_11;
    }
    if (objc_msgSend(v7, "isOwner"))
    {
      v8 = (void *)MEMORY[0x227676638]();
      v9 = self;
      HMFGetOSLogHandle();
      v10 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        v56 = v11;
        v57 = 2112;
        v58 = v5;
        _os_log_impl(&dword_2218F0000, v10, OS_LOG_TYPE_INFO, "%{public}@Cannot modify the owner of the home: %@", buf, 0x16u);

      }
      objc_autoreleasePoolPop(v8);
      v12 = (void *)MEMORY[0x24BDD1540];
      v13 = *MEMORY[0x24BDD5BD8];
      v14 = 17;
LABEL_11:
      objc_msgSend(v12, "errorWithDomain:code:userInfo:", v13, v14, 0);
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "responseHandler");
      v20 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
      ((void (**)(_QWORD, void *, _QWORD))v20)[2](v20, v19, 0);
LABEL_42:

      goto LABEL_43;
    }
    -[HMDHome currentUser](self, "currentUser");
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    if ((objc_msgSend(v19, "isAdministrator") & 1) == 0)
    {
      v34 = (void *)MEMORY[0x227676638]();
      v35 = self;
      HMFGetOSLogHandle();
      v36 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v36, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v37 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        v56 = v37;
        v57 = 2112;
        v58 = v19;
        _os_log_impl(&dword_2218F0000, v36, OS_LOG_TYPE_ERROR, "%{public}@Current user is not an administrator, cannot modify access: %@", buf, 0x16u);

      }
      objc_autoreleasePoolPop(v34);
      objc_msgSend(v4, "responseHandler");
      v20 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x24BDD1540], "errorWithDomain:code:userInfo:", *MEMORY[0x24BDD5BD8], 17, 0);
      v26 = (void *)objc_claimAutoreleasedReturnValue();
      ((void (**)(_QWORD, void *, _QWORD))v20)[2](v20, v26, 0);
      goto LABEL_41;
    }
    v20 = (void (**)(_QWORD, _QWORD, _QWORD))objc_msgSend(v7, "newModelWithChangeType:", 2);
    objc_msgSend(v4, "numberForKey:", CFSTR("kUserAdministratorInformationKey"));
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    v26 = v25;
    if (!v25)
      goto LABEL_25;
    v27 = objc_msgSend(v25, "BOOLValue");
    if (v27 && !-[HMDHome isResidentSupported](self, "isResidentSupported"))
    {
      v38 = (void *)MEMORY[0x227676638]();
      v39 = self;
      HMFGetOSLogHandle();
      v40 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v40, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v41 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        v56 = v41;
        v57 = 2112;
        v58 = v5;
        _os_log_impl(&dword_2218F0000, v40, OS_LOG_TYPE_INFO, "%{public}@Cannot update user %@ to administrator because it requires a resident", buf, 0x16u);

      }
      objc_autoreleasePoolPop(v38);
      v42 = (void *)MEMORY[0x24BDD1540];
      v43 = *MEMORY[0x24BDD5BD8];
      v44 = 48;
    }
    else
    {
      if (!objc_msgSend(v7, "privilege") || objc_msgSend(v7, "privilege") == 4)
      {
        if (v27)
          v28 = &unk_24E96A550;
        else
          v28 = &unk_24E96A520;
        objc_msgSend(v20, "setPrivilege:", v28);
        objc_msgSend(v7, "privilege");
LABEL_25:
        v50 = v26;
        objc_msgSend(v4, "numberForKey:", CFSTR("kUserRemoteAccessInformationKey"));
        v29 = (void *)objc_claimAutoreleasedReturnValue();
        if (v29)
          objc_msgSend(v20, "setRemoteAccessAllowed:", v29);
        -[HMDHome backingStore](self, "backingStore");
        v30 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v4, "name");
        v31 = (void *)objc_claimAutoreleasedReturnValue();
        +[HMDBackingStoreTransactionOptions defaultXPCOptions](HMDBackingStoreTransactionOptions, "defaultXPCOptions");
        v32 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v30, "transaction:options:", v31, v32);
        v33 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();

        objc_msgSend(v33, "add:", v20);
        v52[0] = MEMORY[0x24BDAC760];
        v52[1] = 3221225472;
        v52[2] = __35__HMDHome__handleUpdateUserAccess___block_invoke;
        v52[3] = &unk_24E79BCC8;
        v53 = v4;
        v54 = v7;
        objc_msgSend(v33, "run:", v52);

        v26 = v50;
        goto LABEL_40;
      }
      v45 = (void *)MEMORY[0x227676638]();
      v46 = self;
      HMFGetOSLogHandle();
      v47 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v47, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v51 = v45;
        v48 = (void *)objc_claimAutoreleasedReturnValue();
        v49 = CFSTR("non-");
        *(_DWORD *)buf = 138543874;
        v56 = v48;
        v57 = 2112;
        if (v27)
          v49 = &stru_24E79DB48;
        v58 = v5;
        v59 = 2112;
        v60 = v49;
        _os_log_impl(&dword_2218F0000, v47, OS_LOG_TYPE_INFO, "%{public}@Failed to update user %@ to %@administrator", buf, 0x20u);

        v45 = v51;
      }

      objc_autoreleasePoolPop(v45);
      v42 = (void *)MEMORY[0x24BDD1540];
      v43 = *MEMORY[0x24BDD5BD8];
      v44 = 10;
    }
    objc_msgSend(v42, "errorWithDomain:code:userInfo:", v43, v44, 0);
    v29 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "responseHandler");
    v33 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
    ((void (**)(_QWORD, void *, _QWORD))v33)[2](v33, v29, 0);
LABEL_40:

LABEL_41:
    goto LABEL_42;
  }
  v21 = (void *)MEMORY[0x227676638]();
  v22 = self;
  HMFGetOSLogHandle();
  v23 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
  {
    HMFGetLogIdentifier();
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543362;
    v56 = v24;
    _os_log_impl(&dword_2218F0000, v23, OS_LOG_TYPE_ERROR, "%{public}@Client does not have entitlement to update users to home", buf, 0xCu);

  }
  objc_autoreleasePoolPop(v21);
  objc_msgSend(v4, "responseHandler");
  v5 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x24BDD1540], "errorWithDomain:code:userInfo:", *MEMORY[0x24BDD5BD8], 17, 0);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  ((void (**)(_QWORD, void *, _QWORD))v5)[2](v5, v7, 0);
LABEL_43:

}

- (void)_handleUpdateAudioAnalysisAccess:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void (**v9)(_QWORD, _QWORD, _QWORD);
  void *v10;
  void *v11;
  uint64_t v12;
  void *v13;
  HMDHome *v14;
  NSObject *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  HMDHome *v24;
  NSObject *v25;
  void *v26;
  void *v27;
  HMDHome *v28;
  NSObject *v29;
  void *v30;
  void *v31;
  HMDHome *v32;
  NSObject *v33;
  void *v34;
  void *v35;
  uint64_t v36;
  _QWORD v37[4];
  id v38;
  uint64_t v39;
  uint8_t buf[4];
  void *v41;
  __int16 v42;
  void *v43;
  __int16 v44;
  void *v45;
  uint64_t v46;

  v46 = *MEMORY[0x24BDAC8D0];
  v4 = a3;
  objc_msgSend(v4, "stringForKey:", CFSTR("kUserIDKey"));
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHome users](self, "users");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "hmf_firstObjectWithValue:forKeyPath:", v5, CFSTR("userID"));
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  if (v7)
  {
    -[HMDHome currentUser](self, "currentUser");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    if ((objc_msgSend(v8, "isAdministrator") & 1) != 0)
    {
      v9 = (void (**)(_QWORD, _QWORD, _QWORD))objc_msgSend(v7, "newModelWithChangeType:", 2);
      objc_msgSend(v4, "numberForKey:", *MEMORY[0x24BDD5C88]);
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      v11 = v10;
      if (v10)
      {
        v12 = objc_msgSend(v10, "integerValue");
        v13 = (void *)MEMORY[0x227676638]();
        v14 = self;
        HMFGetOSLogHandle();
        v15 = objc_claimAutoreleasedReturnValue();
        v36 = v12;
        if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
        {
          HMFGetLogIdentifier();
          v35 = v13;
          v16 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedInteger:", v12);
          v17 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543874;
          v41 = v16;
          v42 = 2112;
          v43 = v17;
          v44 = 2112;
          v45 = v7;
          _os_log_impl(&dword_2218F0000, v15, OS_LOG_TYPE_INFO, "%{public}@Updating audio analysis access level to %@ for user: %@", buf, 0x20u);

          v12 = v36;
          v13 = v35;
        }

        objc_autoreleasePoolPop(v13);
        objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedInteger:", v12);
        v18 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v9, "setAudioAnalysisUserDropInAccessLevel:", v18);

        -[HMDHome backingStore](v14, "backingStore");
        v19 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v4, "name");
        v20 = (void *)objc_claimAutoreleasedReturnValue();
        +[HMDBackingStoreTransactionOptions defaultXPCOptions](HMDBackingStoreTransactionOptions, "defaultXPCOptions");
        v21 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v19, "transaction:options:", v20, v21);
        v22 = (void *)objc_claimAutoreleasedReturnValue();

        objc_msgSend(v22, "add:withMessage:", v9, v4);
        v37[0] = MEMORY[0x24BDAC760];
        v37[1] = 3221225472;
        v37[2] = __44__HMDHome__handleUpdateAudioAnalysisAccess___block_invoke;
        v37[3] = &unk_24E79BC78;
        v38 = v4;
        v39 = v36;
        objc_msgSend(v22, "run:", v37);

      }
      else
      {
        v31 = (void *)MEMORY[0x227676638]();
        v32 = self;
        HMFGetOSLogHandle();
        v33 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v33, OS_LOG_TYPE_ERROR))
        {
          HMFGetLogIdentifier();
          v34 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543362;
          v41 = v34;
          _os_log_impl(&dword_2218F0000, v33, OS_LOG_TYPE_ERROR, "%{public}@Missing access level for audio analysis dropIn", buf, 0xCu);

        }
        objc_autoreleasePoolPop(v31);
        objc_msgSend(MEMORY[0x24BDD1540], "hmErrorWithCode:", 3);
        v22 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v4, "respondWithError:", v22);
      }

    }
    else
    {
      v27 = (void *)MEMORY[0x227676638]();
      v28 = self;
      HMFGetOSLogHandle();
      v29 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v30 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        v41 = v30;
        v42 = 2112;
        v43 = v8;
        _os_log_impl(&dword_2218F0000, v29, OS_LOG_TYPE_ERROR, "%{public}@Current user is not an administrator, cannot modify access: %@", buf, 0x16u);

      }
      objc_autoreleasePoolPop(v27);
      objc_msgSend(v4, "responseHandler");
      v9 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x24BDD1540], "errorWithDomain:code:userInfo:", *MEMORY[0x24BDD5BD8], 17, 0);
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      ((void (**)(_QWORD, void *, _QWORD))v9)[2](v9, v11, 0);
    }

  }
  else
  {
    v23 = (void *)MEMORY[0x227676638]();
    v24 = self;
    HMFGetOSLogHandle();
    v25 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v25, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v26 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v41 = v26;
      v42 = 2112;
      v43 = v5;
      _os_log_impl(&dword_2218F0000, v25, OS_LOG_TYPE_INFO, "%{public}@Failed to find user %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v23);
    objc_msgSend(MEMORY[0x24BDD1540], "hmErrorWithCode:", 2);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "respondWithError:", v8);
  }

}

- (void)_handleUpdateUserAnnounceAccess:(id)a3
{
  id v4;
  void (**v5)(_QWORD, _QWORD, _QWORD);
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  HMDHome *v17;
  NSObject *v18;
  void *v19;
  void (**v20)(_QWORD, _QWORD, _QWORD);
  void *v21;
  HMDHome *v22;
  NSObject *v23;
  void *v24;
  void *v25;
  HMDHome *v26;
  NSObject *v27;
  void *v28;
  void *v29;
  int v30;
  void *v31;
  __int16 v32;
  void *v33;
  uint64_t v34;

  v34 = *MEMORY[0x24BDAC8D0];
  v4 = a3;
  if ((objc_msgSend(v4, "isEntitledForSPIAccess") & 1) != 0 || (objc_msgSend(v4, "isRemote") & 1) != 0)
  {
    objc_msgSend(v4, "stringForKey:", CFSTR("kUserIDKey"));
    v5 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
    -[HMDHome users](self, "users");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "hmf_firstObjectWithValue:forKeyPath:", v5, CFSTR("userID"));
    v7 = (void *)objc_claimAutoreleasedReturnValue();

    if (v7)
    {
      -[HMDHome currentUser](self, "currentUser");
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      if ((objc_msgSend(v8, "isAdministrator") & 1) != 0)
      {
        v9 = (void *)objc_msgSend(v7, "newModelWithChangeType:", 2);
        objc_msgSend(v4, "numberForKey:", *MEMORY[0x24BDD63C0]);
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        if (v10)
        {
          objc_msgSend(v9, "setAnnounceAccessAllowed:", v10);
          if (objc_msgSend(v10, "BOOLValue"))
            v11 = &unk_24E96A568;
          else
            v11 = &unk_24E96A580;
          objc_msgSend(v9, "setAnnounceAccessLevel:", v11);
        }
        -[HMDHome backingStore](self, "backingStore");
        v12 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v4, "name");
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        +[HMDBackingStoreTransactionOptions defaultXPCOptions](HMDBackingStoreTransactionOptions, "defaultXPCOptions");
        v14 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v12, "transaction:options:", v13, v14);
        v15 = (void *)objc_claimAutoreleasedReturnValue();

        objc_msgSend(v15, "add:withMessage:", v9, v4);
        objc_msgSend(v15, "run");

        goto LABEL_21;
      }
      v25 = (void *)MEMORY[0x227676638]();
      v26 = self;
      HMFGetOSLogHandle();
      v27 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v28 = (void *)objc_claimAutoreleasedReturnValue();
        v30 = 138543618;
        v31 = v28;
        v32 = 2112;
        v33 = v8;
        _os_log_impl(&dword_2218F0000, v27, OS_LOG_TYPE_ERROR, "%{public}@Current user is not an administrator, cannot modify access: %@", (uint8_t *)&v30, 0x16u);

      }
      objc_autoreleasePoolPop(v25);
      objc_msgSend(v4, "responseHandler");
      v20 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x24BDD1540], "errorWithDomain:code:userInfo:", *MEMORY[0x24BDD5BD8], 17, 0);
      v29 = (void *)objc_claimAutoreleasedReturnValue();
      ((void (**)(_QWORD, void *, _QWORD))v20)[2](v20, v29, 0);

    }
    else
    {
      v16 = (void *)MEMORY[0x227676638]();
      v17 = self;
      HMFGetOSLogHandle();
      v18 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v19 = (void *)objc_claimAutoreleasedReturnValue();
        v30 = 138543618;
        v31 = v19;
        v32 = 2112;
        v33 = v5;
        _os_log_impl(&dword_2218F0000, v18, OS_LOG_TYPE_INFO, "%{public}@Failed to find user %@", (uint8_t *)&v30, 0x16u);

      }
      objc_autoreleasePoolPop(v16);
      objc_msgSend(MEMORY[0x24BDD1540], "errorWithDomain:code:userInfo:", *MEMORY[0x24BDD5BD8], 2, 0);
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "responseHandler");
      v20 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
      ((void (**)(_QWORD, void *, _QWORD))v20)[2](v20, v8, 0);
    }

LABEL_21:
    goto LABEL_22;
  }
  v21 = (void *)MEMORY[0x227676638]();
  v22 = self;
  HMFGetOSLogHandle();
  v23 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
  {
    HMFGetLogIdentifier();
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    v30 = 138543362;
    v31 = v24;
    _os_log_impl(&dword_2218F0000, v23, OS_LOG_TYPE_ERROR, "%{public}@Client does not have entitlement to update users to home", (uint8_t *)&v30, 0xCu);

  }
  objc_autoreleasePoolPop(v21);
  objc_msgSend(v4, "responseHandler");
  v5 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x24BDD1540], "errorWithDomain:code:userInfo:", *MEMORY[0x24BDD5BD8], 17, 0);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  ((void (**)(_QWORD, void *, _QWORD))v5)[2](v5, v7, 0);
LABEL_22:

}

- (void)_handleSetDismissedUWBOnboarding:(id)a3
{
  id v4;
  void *v5;
  HMDHome *v6;
  NSObject *v7;
  void *v8;
  void (**v9)(_QWORD, _QWORD, _QWORD);
  void *v10;
  _BOOL4 v11;
  void *v12;
  HMDHome *v13;
  NSObject *v14;
  _BOOL4 v15;
  void *v16;
  void *v17;
  int v18;
  void *v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  v4 = a3;
  if (objc_msgSend(v4, "isRemote"))
  {
    v5 = (void *)MEMORY[0x227676638]();
    v6 = self;
    HMFGetOSLogHandle();
    v7 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      v18 = 138543362;
      v19 = v8;
      _os_log_impl(&dword_2218F0000, v7, OS_LOG_TYPE_ERROR, "%{public}@Received remote message for a local setting of DismissedUWBOnboarding", (uint8_t *)&v18, 0xCu);

    }
    objc_autoreleasePoolPop(v5);
    objc_msgSend(v4, "responseHandler");
    v9 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD1540], "errorWithDomain:code:userInfo:", *MEMORY[0x24BDD5BD8], 17, 0);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    ((void (**)(_QWORD, void *, _QWORD))v9)[2](v9, v10, 0);

  }
  else
  {
    v11 = -[HMDHome dismissedWalletKeyUWBUnlockOnboarding](self, "dismissedWalletKeyUWBUnlockOnboarding");
    v12 = (void *)MEMORY[0x227676638]();
    v13 = self;
    HMFGetOSLogHandle();
    v14 = objc_claimAutoreleasedReturnValue();
    v15 = os_log_type_enabled(v14, OS_LOG_TYPE_INFO);
    if (v11)
    {
      if (v15)
      {
        HMFGetLogIdentifier();
        v16 = (void *)objc_claimAutoreleasedReturnValue();
        v18 = 138543362;
        v19 = v16;
        _os_log_impl(&dword_2218F0000, v14, OS_LOG_TYPE_INFO, "%{public}@Home has already been onboarded for UWB unlock", (uint8_t *)&v18, 0xCu);

      }
      objc_autoreleasePoolPop(v12);
    }
    else
    {
      if (v15)
      {
        HMFGetLogIdentifier();
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        v18 = 138543362;
        v19 = v17;
        _os_log_impl(&dword_2218F0000, v14, OS_LOG_TYPE_INFO, "%{public}@Setting Dismissed Wallet Key UWB Unlock Onboarding", (uint8_t *)&v18, 0xCu);

      }
      objc_autoreleasePoolPop(v12);
      -[HMDHome _setDismissedUWBOnboardingInLocalStore](v13, "_setDismissedUWBOnboardingInLocalStore");
      -[HMDHome setDismissedWalletKeyUWBUnlockOnboarding:](v13, "setDismissedWalletKeyUWBUnlockOnboarding:", 1);
    }
    objc_msgSend(v4, "respondWithSuccess");
  }

}

- (void)_setDismissedUWBOnboardingInLocalStore
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  __CFString *v7;
  id v8;
  id v9;
  _QWORD v10[5];
  id v11;
  id v12;

  -[HMDHome uuid](self, "uuid");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  +[HMDCoreData sharedInstance](HMDCoreData, "sharedInstance");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = (void *)objc_msgSend(v4, "newManagedObjectContext");

  HMDWorkingContextNameForHomeUUID(v3);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "setName:", v6);

  v7 = CFSTR("HMD.1P");
  objc_msgSend(v5, "setTransactionAuthor:", CFSTR("HMD.1P"));

  v10[0] = MEMORY[0x24BDAC760];
  v10[1] = 3221225472;
  v10[2] = __49__HMDHome__setDismissedUWBOnboardingInLocalStore__block_invoke;
  v10[3] = &unk_24E79BBD0;
  v10[4] = self;
  v11 = v3;
  v12 = v5;
  v8 = v5;
  v9 = v3;
  objc_msgSend(v8, "performBlockAndWait:", v10);

}

- (void)saveClientWalletKeyUUIDToLocalStore:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  __CFString *v9;
  id v10;
  id v11;
  id v12;
  _QWORD v13[5];
  id v14;
  id v15;
  id v16;

  v4 = a3;
  -[HMDHome uuid](self, "uuid");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  +[HMDCoreData sharedInstance](HMDCoreData, "sharedInstance");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = (void *)objc_msgSend(v6, "newManagedObjectContext");

  HMDWorkingContextNameForHomeUUID(v5);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "setName:", v8);

  v9 = CFSTR("HMD.1P");
  objc_msgSend(v7, "setTransactionAuthor:", CFSTR("HMD.1P"));

  v13[0] = MEMORY[0x24BDAC760];
  v13[1] = 3221225472;
  v13[2] = __47__HMDHome_saveClientWalletKeyUUIDToLocalStore___block_invoke;
  v13[3] = &unk_24E79A910;
  v13[4] = self;
  v14 = v4;
  v15 = v5;
  v16 = v7;
  v10 = v7;
  v11 = v5;
  v12 = v4;
  objc_msgSend(v10, "performBlockAndWait:", v13);
  -[HMDHome setClientWalletKeyUUID:](self, "setClientWalletKeyUUID:", v12);

}

- (void)resetHomeKeyMiscInfo
{
  void *v3;
  void *v4;
  HMDHome *v5;
  NSObject *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  __CFString *v14;
  id v15;
  id v16;
  void *v17;
  HMDHome *v18;
  NSObject *v19;
  void *v20;
  _QWORD v21[5];
  id v22;
  id v23;
  uint8_t buf[4];
  void *v25;
  __int16 v26;
  void *v27;
  __int16 v28;
  void *v29;
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  if (-[HMDHome dismissedWalletKeyUWBUnlockOnboarding](self, "dismissedWalletKeyUWBUnlockOnboarding")
    || (-[HMDHome clientWalletKeyUUID](self, "clientWalletKeyUUID"),
        v3 = (void *)objc_claimAutoreleasedReturnValue(),
        v3,
        v3))
  {
    v4 = (void *)MEMORY[0x227676638]();
    v5 = self;
    HMFGetOSLogHandle();
    v6 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      -[HMDHome dismissedWalletKeyUWBUnlockOnboarding](v5, "dismissedWalletKeyUWBUnlockOnboarding");
      HMFBooleanToString();
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      -[HMDHome clientWalletKeyUUID](v5, "clientWalletKeyUUID");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543874;
      v25 = v7;
      v26 = 2112;
      v27 = v8;
      v28 = 2112;
      v29 = v9;
      _os_log_impl(&dword_2218F0000, v6, OS_LOG_TYPE_INFO, "%{public}@Resetting HomeKeyMiscInfo with dismissedUWB: %@ and clientWalletKeyUUID: %@", buf, 0x20u);

    }
    objc_autoreleasePoolPop(v4);
    -[HMDHome uuid](v5, "uuid");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    +[HMDCoreData sharedInstance](HMDCoreData, "sharedInstance");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v12 = (void *)objc_msgSend(v11, "newManagedObjectContext");

    HMDWorkingContextNameForHomeUUID(v10);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "setName:", v13);

    v14 = CFSTR("HMD.1P");
    objc_msgSend(v12, "setTransactionAuthor:", CFSTR("HMD.1P"));

    v21[0] = MEMORY[0x24BDAC760];
    v21[1] = 3221225472;
    v21[2] = __31__HMDHome_resetHomeKeyMiscInfo__block_invoke;
    v21[3] = &unk_24E79BBD0;
    v21[4] = v5;
    v22 = v10;
    v23 = v12;
    v15 = v12;
    v16 = v10;
    objc_msgSend(v15, "performBlockAndWait:", v21);
    -[HMDHome setDismissedWalletKeyUWBUnlockOnboarding:](v5, "setDismissedWalletKeyUWBUnlockOnboarding:", 0);
    -[HMDHome setClientWalletKeyUUID:](v5, "setClientWalletKeyUUID:", 0);

  }
  else
  {
    v17 = (void *)MEMORY[0x227676638]();
    v18 = self;
    HMFGetOSLogHandle();
    v19 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v25 = v20;
      _os_log_impl(&dword_2218F0000, v19, OS_LOG_TYPE_INFO, "%{public}@Dismissed Wallet Key UWB Unlock Onboarding and clientWalletKeyUUID already unset, nothing to be done", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v17);
  }
}

- (void)_readLocalHomeKeyMiscInfo
{
  void *v3;
  void *v4;
  void *v5;
  id v6;
  id v7;
  id v8;
  _QWORD v9[4];
  id v10;
  id v11;
  HMDHome *v12;

  -[HMDHome uuid](self, "uuid");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHome backingStore](self, "backingStore");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "context");
  v8 = (id)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v8, "managedObjectContext");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v9[0] = MEMORY[0x24BDAC760];
  v9[1] = 3221225472;
  v9[2] = __36__HMDHome__readLocalHomeKeyMiscInfo__block_invoke;
  v9[3] = &unk_24E79BBD0;
  v10 = v3;
  v11 = v5;
  v12 = self;
  v6 = v5;
  v7 = v3;
  objc_msgSend(v6, "performBlockAndWait:", v9);

}

- (void)_handleUpdatePresenceConsent:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  int v7;
  void *v8;
  HMDHome *v9;
  NSObject *v10;
  void *v11;
  void *v12;
  HMDHome *v13;
  NSObject *v14;
  void *v15;
  HMDHomeModel *v16;
  uint64_t v17;
  HMDHomeModel *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  HMDHome *v28;
  NSObject *v29;
  void *v30;
  void *v31;
  _QWORD v32[4];
  id v33;
  HMDHome *v34;
  uint8_t buf[4];
  void *v36;
  __int16 v37;
  void *v38;
  uint64_t v39;

  v39 = *MEMORY[0x24BDAC8D0];
  v4 = a3;
  objc_msgSend(MEMORY[0x24BDD7A90], "authWithMessage:", v4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v5)
  {
    v12 = (void *)MEMORY[0x227676638]();
    v13 = self;
    HMFGetOSLogHandle();
    v14 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v36 = v15;
      _os_log_impl(&dword_2218F0000, v14, OS_LOG_TYPE_ERROR, "%{public}@Received nil presence auth", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v12);
    objc_msgSend(v4, "responseHandler");
    v16 = (HMDHomeModel *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD1540], "errorWithDomain:code:userInfo:", *MEMORY[0x24BDD5BD8], 17, 0);
    v17 = objc_claimAutoreleasedReturnValue();
    goto LABEL_15;
  }
  -[HMDHome presenceAuthStatus](self, "presenceAuthStatus");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = HMFEqualObjects();

  if (v7)
  {
    v8 = (void *)MEMORY[0x227676638]();
    v9 = self;
    HMFGetOSLogHandle();
    v10 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v36 = v11;
      v37 = 2112;
      v38 = v5;
      _os_log_impl(&dword_2218F0000, v10, OS_LOG_TYPE_ERROR, "%{public}@Presence auth status is already set to %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v8);
LABEL_14:
    objc_msgSend(v4, "responseHandler");
    v16 = (HMDHomeModel *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD1540], "hmErrorWithCode:", 3);
    v17 = objc_claimAutoreleasedReturnValue();
LABEL_15:
    v26 = (void *)v17;
    (*(void (**)(HMDHomeModel *, uint64_t, _QWORD))&v16->super._bsoDataVersionOverride)(v16, v17, 0);
    goto LABEL_16;
  }
  if ((unint64_t)(objc_msgSend(v5, "value") - 1) < 2)
  {
    v18 = [HMDHomeModel alloc];
    -[HMDHome uuid](self, "uuid");
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHome homeManager](self, "homeManager");
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v20, "uuid");
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    v16 = -[HMDBackingStoreModelObject initWithObjectChangeType:uuid:parentUUID:](v18, "initWithObjectChangeType:uuid:parentUUID:", 2, v19, v21);

    objc_msgSend(v5, "number");
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHomeModel setPresenceAuthorizationStatus:](v16, "setPresenceAuthorizationStatus:", v22);

    -[HMDHome backingStore](self, "backingStore");
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "name");
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    +[HMDBackingStoreTransactionOptions defaultXPCOptions](HMDBackingStoreTransactionOptions, "defaultXPCOptions");
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v23, "transaction:options:", v24, v25);
    v26 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v26, "add:", v16);
    v32[0] = MEMORY[0x24BDAC760];
    v32[1] = 3221225472;
    v32[2] = __40__HMDHome__handleUpdatePresenceConsent___block_invoke;
    v32[3] = &unk_24E79BCC8;
    v33 = v4;
    v34 = self;
    objc_msgSend(v26, "run:", v32);

LABEL_16:
    goto LABEL_17;
  }
  v27 = (void *)MEMORY[0x227676638]();
  v28 = self;
  HMFGetOSLogHandle();
  v29 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
  {
    HMFGetLogIdentifier();
    v30 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543618;
    v36 = v30;
    v37 = 2112;
    v38 = v5;
    _os_log_impl(&dword_2218F0000, v29, OS_LOG_TYPE_ERROR, "%{public}@Received invalid parameter for presence authorization: %@", buf, 0x16u);

  }
  objc_autoreleasePoolPop(v27);
  objc_msgSend(v4, "responseHandler");
  v31 = (void *)objc_claimAutoreleasedReturnValue();

  if (v31)
    goto LABEL_14;
LABEL_17:

}

- (void)_handleRemoveUser:(id)a3
{
  id v4;
  void *v5;
  id v6;
  void *v7;
  HMDHome *v8;
  NSObject *v9;
  void *v10;
  void *v11;
  id v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  id v17;
  id v18;
  void *v19;
  HMDHome *v20;
  NSObject *v21;
  void *v22;
  void *v23;
  void *v24;
  int v25;
  void *v26;
  HMDHome *v27;
  NSObject *v28;
  NSObject *v29;
  void *v30;
  void *v31;
  void (**v32)(_QWORD, _QWORD, _QWORD);
  void *v33;
  void (**v34)(_QWORD, _QWORD, _QWORD);
  void *v35;
  HMDHome *v36;
  NSObject *v37;
  void *v38;
  void *v39;
  void (**v40)(_QWORD, _QWORD, _QWORD);
  void *v41;
  void (**v42)(_QWORD, _QWORD, _QWORD);
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t (*v46)(uint64_t, uint64_t);
  void (*v47)(uint64_t);
  id v48;
  _BYTE buf[24];
  void *v50;
  id v51;
  id v52;
  HMDHome *v53;
  uint64_t *v54;
  uint64_t v55;

  v55 = *MEMORY[0x24BDAC8D0];
  v4 = a3;
  if ((objc_msgSend(v4, "isEntitledForSPIAccess") & 1) != 0 || (objc_msgSend(v4, "isRemote") & 1) != 0)
  {
    objc_msgSend(v4, "uuidForKey:", CFSTR("kUserUUIDKey"));
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    if (v5)
    {
      objc_msgSend(v4, "stringForKey:", *MEMORY[0x24BDD7168]);
      v6 = (id)objc_claimAutoreleasedReturnValue();
      if (v6)
        goto LABEL_9;
      v7 = (void *)MEMORY[0x227676638]();
      v8 = self;
      HMFGetOSLogHandle();
      v9 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v5, "UUIDString");
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        *(_QWORD *)&buf[4] = v10;
        *(_WORD *)&buf[12] = 2112;
        *(_QWORD *)&buf[14] = v11;
        _os_log_impl(&dword_2218F0000, v9, OS_LOG_TYPE_INFO, "%{public}@Message does not contain a mergeID for user being removed, looking mergeID from UUID: %@", buf, 0x16u);

      }
      objc_autoreleasePoolPop(v7);
      v12 = v5;
      v13 = v12;
      if (v8)
      {
        v44 = &v43;
        v45 = 0x3032000000;
        v46 = __Block_byref_object_copy__14094;
        v47 = __Block_byref_object_dispose__14095;
        v48 = 0;
        -[HMDHome backingStore](v8, "backingStore", 0);
        v14 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v14, "context");
        v15 = (void *)objc_claimAutoreleasedReturnValue();

        objc_msgSend(v15, "managedObjectContext");
        v16 = (void *)objc_claimAutoreleasedReturnValue();
        *(_QWORD *)buf = MEMORY[0x24BDAC760];
        *(_QWORD *)&buf[8] = 3221225472;
        *(_QWORD *)&buf[16] = __35__HMDHome__findMergeIDForUserUUID___block_invoke;
        v50 = &unk_24E79B5F8;
        v17 = v13;
        v51 = v17;
        v18 = v16;
        v52 = v18;
        v53 = v8;
        v54 = &v43;
        objc_msgSend(v15, "unsafeSynchronousBlock:", buf);
        v6 = (id)v44[5];

        _Block_object_dispose(&v43, 8);
        if (v6)
        {
LABEL_9:
          v19 = (void *)MEMORY[0x227676638]();
          v20 = self;
          HMFGetOSLogHandle();
          v21 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
          {
            HMFGetLogIdentifier();
            v22 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 138543618;
            *(_QWORD *)&buf[4] = v22;
            *(_WORD *)&buf[12] = 2112;
            *(_QWORD *)&buf[14] = v6;
            _os_log_impl(&dword_2218F0000, v21, OS_LOG_TYPE_INFO, "%{public}@Looking for user based on mergeID: %@", buf, 0x16u);

          }
          objc_autoreleasePoolPop(v19);
          -[HMDHome userWithMergeID:](v20, "userWithMergeID:", v6);
          v23 = (void *)objc_claimAutoreleasedReturnValue();
          if (v23)
            goto LABEL_13;
        }
      }
      else
      {

        v6 = 0;
      }
      -[HMDHome users](self, "users");
      v24 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v24, "hmf_firstObjectWithUUID:", v5);
      v23 = (void *)objc_claimAutoreleasedReturnValue();

      if (!v23)
      {
        objc_msgSend(MEMORY[0x24BDD1540], "errorWithDomain:code:userInfo:", *MEMORY[0x24BDD5BD8], 2, 0);
        v23 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v4, "responseHandler");
        v42 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
        ((void (**)(_QWORD, void *, _QWORD))v42)[2](v42, v23, 0);

LABEL_26:
        goto LABEL_27;
      }
LABEL_13:
      v25 = objc_msgSend(v23, "isOwner");
      v26 = (void *)MEMORY[0x227676638]();
      v27 = self;
      HMFGetOSLogHandle();
      v28 = objc_claimAutoreleasedReturnValue();
      v29 = v28;
      if (v25)
      {
        if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
        {
          HMFGetLogIdentifier();
          v30 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543362;
          *(_QWORD *)&buf[4] = v30;
          _os_log_impl(&dword_2218F0000, v29, OS_LOG_TYPE_ERROR, "%{public}@Owner cannot be removed from home", buf, 0xCu);

        }
        objc_autoreleasePoolPop(v26);
        objc_msgSend(MEMORY[0x24BDD1540], "errorWithDomain:code:userInfo:", *MEMORY[0x24BDD5BD8], 17, 0);
        v31 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v4, "responseHandler");
        v32 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
        ((void (**)(_QWORD, void *, _QWORD))v32)[2](v32, v31, 0);

      }
      else
      {
        if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
        {
          HMFGetLogIdentifier();
          v41 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543618;
          *(_QWORD *)&buf[4] = v41;
          *(_WORD *)&buf[12] = 2112;
          *(_QWORD *)&buf[14] = v23;
          _os_log_impl(&dword_2218F0000, v29, OS_LOG_TYPE_DEFAULT, "%{public}@Removing user: %@", buf, 0x16u);

        }
        objc_autoreleasePoolPop(v26);
        -[HMDHome _removeUser:message:](v27, "_removeUser:message:", v23, v4);
      }
      goto LABEL_26;
    }
    objc_msgSend(MEMORY[0x24BDD1540], "errorWithDomain:code:userInfo:", *MEMORY[0x24BDD5BD8], 20, 0);
    v33 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "responseHandler");
    v34 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
    ((void (**)(_QWORD, void *, _QWORD))v34)[2](v34, v33, 0);

    v5 = 0;
LABEL_27:

    goto LABEL_28;
  }
  v35 = (void *)MEMORY[0x227676638]();
  v36 = self;
  HMFGetOSLogHandle();
  v37 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v37, OS_LOG_TYPE_ERROR))
  {
    HMFGetLogIdentifier();
    v38 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543362;
    *(_QWORD *)&buf[4] = v38;
    _os_log_impl(&dword_2218F0000, v37, OS_LOG_TYPE_ERROR, "%{public}@User management (remove) not supported for non-SPI clients", buf, 0xCu);

  }
  objc_autoreleasePoolPop(v35);
  objc_msgSend(v4, "responseHandler");
  v39 = (void *)objc_claimAutoreleasedReturnValue();

  if (v39)
  {
    objc_msgSend(MEMORY[0x24BDD1540], "hmErrorWithCode:", 48);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "responseHandler");
    v40 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
    ((void (**)(_QWORD, void *, _QWORD))v40)[2](v40, v5, 0);

    goto LABEL_27;
  }
LABEL_28:

}

- (void)removeUserWithUserID:(id)a3
{
  id v4;
  NSObject *v5;
  id v6;
  _QWORD v7[5];
  id v8;

  v4 = a3;
  -[HMDHome workQueue](self, "workQueue");
  v5 = objc_claimAutoreleasedReturnValue();
  v7[0] = MEMORY[0x24BDAC760];
  v7[1] = 3221225472;
  v7[2] = __32__HMDHome_removeUserWithUserID___block_invoke;
  v7[3] = &unk_24E79C268;
  v7[4] = self;
  v8 = v4;
  v6 = v4;
  dispatch_async(v5, v7);

}

- (void)removeUser:(id)a3
{
  id v4;
  void *v5;
  HMDHome *v6;
  NSObject *v7;
  void *v8;
  void *v9;
  _QWORD v10[5];
  uint8_t buf[4];
  void *v12;
  __int16 v13;
  id v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v4 = a3;
  v5 = (void *)MEMORY[0x227676638]();
  v6 = self;
  HMFGetOSLogHandle();
  v7 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543618;
    v12 = v8;
    v13 = 2112;
    v14 = v4;
    _os_log_impl(&dword_2218F0000, v7, OS_LOG_TYPE_INFO, "%{public}@Attempting to remove user: %@", buf, 0x16u);

  }
  objc_autoreleasePoolPop(v5);
  v10[0] = MEMORY[0x24BDAC760];
  v10[1] = 3221225472;
  v10[2] = __22__HMDHome_removeUser___block_invoke;
  v10[3] = &unk_24E79B7E0;
  v10[4] = v6;
  objc_msgSend(MEMORY[0x24BE3F1B0], "messageWithName:messagePayload:responseHandler:", CFSTR("kDataSyncResponseNAckKey"), 0, v10);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHome _removeUser:message:](v6, "_removeUser:message:", v4, v9);

}

- (void)_removeOutgoingInvitationForUser:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  _QWORD v9[5];
  id v10;
  id v11;

  v4 = a3;
  -[HMDHome __modelObjectsForRemovingOutgoingInvitationForUser:](self, "__modelObjectsForRemovingOutgoingInvitationForUser:", v4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  if ((objc_msgSend(v5, "hmf_isEmpty") & 1) == 0)
  {
    -[HMDHome backingStore](self, "backingStore");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    +[HMDBackingStoreTransactionOptions defaultXPCOptions](HMDBackingStoreTransactionOptions, "defaultXPCOptions");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "transaction:options:", CFSTR("removeOutgoingInvitation"), v7);
    v8 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v8, "addObjects:", v5);
    v9[0] = MEMORY[0x24BDAC760];
    v9[1] = 3221225472;
    v9[2] = __44__HMDHome__removeOutgoingInvitationForUser___block_invoke;
    v9[3] = &unk_24E799FD0;
    v9[4] = self;
    v10 = v4;
    v11 = v5;
    objc_msgSend(v8, "run:", v9);

  }
}

- (id)__modelObjectsForRemovingOutgoingInvitationForUser:(id)a3
{
  id v4;
  void *v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  int v13;
  id v14;
  void *v15;
  id v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  uint64_t v22;
  id v23;
  HMDOutgoingHomeInvitationModel *v24;
  void *v25;
  void *v26;
  HMDOutgoingHomeInvitationModel *v27;
  void *v28;
  uint64_t v29;
  void *v30;
  HMDHome *v31;
  NSObject *v32;
  void *v33;
  HMDUserModel *v34;
  void *v35;
  void *v36;
  HMDUserModel *v37;
  void *v39;
  HMDHome *v40;
  _QWORD v41[5];
  id v42;
  _QWORD v43[5];
  id v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  uint8_t buf[4];
  void *v50;
  __int16 v51;
  id v52;
  _BYTE v53[128];
  uint64_t v54;

  v54 = *MEMORY[0x24BDAC8D0];
  v4 = a3;
  if (v4)
  {
    v47 = 0u;
    v48 = 0u;
    v45 = 0u;
    v46 = 0u;
    -[HMDHome outgoingInvitations](self, "outgoingInvitations");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = (id)objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v45, v53, 16);
    if (v6)
    {
      v40 = self;
      v7 = *(_QWORD *)v46;
LABEL_4:
      v8 = 0;
      while (1)
      {
        if (*(_QWORD *)v46 != v7)
          objc_enumerationMutation(v5);
        v9 = *(void **)(*((_QWORD *)&v45 + 1) + 8 * v8);
        objc_msgSend(v9, "user");
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        if (v10)
        {
          objc_msgSend(v4, "userID");
          v11 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v10, "userID");
          v12 = (void *)objc_claimAutoreleasedReturnValue();
          v13 = objc_msgSend(v11, "isEqualToString:", v12);

          if (v13)
            break;
        }

        if (v6 == (id)++v8)
        {
          v6 = (id)objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v45, v53, 16);
          if (v6)
            goto LABEL_4;
          v14 = v5;
          v15 = (void *)MEMORY[0x24BDBD1A8];
          goto LABEL_23;
        }
      }
      v14 = v9;
      if (objc_msgSend(v10, "isPending"))
        v6 = v10;
      else
        v6 = 0;

      if (!v14)
      {
        v15 = (void *)MEMORY[0x24BDBD1A8];
        goto LABEL_25;
      }
      objc_msgSend(MEMORY[0x24BDBCEB8], "arrayWithCapacity:", 2);
      v39 = (void *)objc_claimAutoreleasedReturnValue();
      v16 = objc_alloc(MEMORY[0x24BE3F168]);
      -[HMDHome workQueue](v40, "workQueue");
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      v18 = (void *)objc_msgSend(v16, "initWithQueue:", v17);

      -[HMDHome homeManager](v40, "homeManager");
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v19, "homeOwnerCloudShareManager");
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v20, "revokeAccessForUser:home:", v4, v40);
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      v22 = MEMORY[0x24BDAC760];
      v43[0] = MEMORY[0x24BDAC760];
      v43[1] = 3221225472;
      v43[2] = __62__HMDHome___modelObjectsForRemovingOutgoingInvitationForUser___block_invoke;
      v43[3] = &unk_24E797BE8;
      v43[4] = v40;
      v44 = v4;
      v41[0] = v22;
      v41[1] = 3221225472;
      v41[2] = __62__HMDHome___modelObjectsForRemovingOutgoingInvitationForUser___block_invoke_1277;
      v41[3] = &unk_24E79B210;
      v41[4] = v40;
      v42 = v44;
      v23 = (id)objc_msgSend(v21, "inContext:then:orRecover:", v18, v43, v41);

      v24 = [HMDOutgoingHomeInvitationModel alloc];
      objc_msgSend(v14, "identifier");
      v25 = (void *)objc_claimAutoreleasedReturnValue();
      -[HMDHome uuid](v40, "uuid");
      v26 = (void *)objc_claimAutoreleasedReturnValue();
      v27 = -[HMDBackingStoreModelObject initWithObjectChangeType:uuid:parentUUID:](v24, "initWithObjectChangeType:uuid:parentUUID:", 3, v25, v26);

      v28 = v39;
      v29 = objc_msgSend(v39, "addObject:", v27);
      if (v6)
      {
        v30 = (void *)MEMORY[0x227676638](v29);
        v31 = v40;
        HMFGetOSLogHandle();
        v32 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v32, OS_LOG_TYPE_INFO))
        {
          HMFGetLogIdentifier();
          v33 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543618;
          v50 = v33;
          v51 = 2112;
          v52 = v6;
          _os_log_impl(&dword_2218F0000, v32, OS_LOG_TYPE_INFO, "%{public}@Going to remove pending user with invitation : %@", buf, 0x16u);

          v28 = v39;
        }

        objc_autoreleasePoolPop(v30);
        v34 = [HMDUserModel alloc];
        objc_msgSend(v6, "uuid");
        v35 = (void *)objc_claimAutoreleasedReturnValue();
        -[HMDHome uuid](v31, "uuid");
        v36 = (void *)objc_claimAutoreleasedReturnValue();
        v37 = -[HMDBackingStoreModelObject initWithObjectChangeType:uuid:parentUUID:](v34, "initWithObjectChangeType:uuid:parentUUID:", 3, v35, v36);

        objc_msgSend(v28, "addObject:", v37);
      }
      v15 = (void *)objc_msgSend(v28, "copy", v39);

    }
    else
    {
      v15 = (void *)MEMORY[0x24BDBD1A8];
      v14 = v5;
    }
LABEL_23:

LABEL_25:
  }
  else
  {
    v15 = (void *)MEMORY[0x24BDBD1A8];
  }

  return v15;
}

- (void)_removeUser:(id)a3 message:(id)a4
{
  id v6;
  id v7;
  __CFString *v8;
  __CFString *v9;
  void *v10;
  void *v11;
  id v12;
  int v13;
  uint64_t v14;
  void *v15;
  void *v16;
  void *v17;
  uint64_t v18;
  NSObject *v19;
  id v20;
  void *v21;
  HMDHome *v22;
  NSObject *v23;
  void *v24;
  _QWORD block[5];
  id v26;
  id v27;
  id v28;
  _QWORD v29[5];
  uint8_t buf[4];
  void *v31;
  __int16 v32;
  __CFString *v33;
  uint64_t v34;

  v34 = *MEMORY[0x24BDAC8D0];
  v6 = a3;
  v7 = a4;
  if ((shouldLogPrivateInformation() & 1) != 0)
  {
    objc_msgSend(v6, "userID");
    v8 = (__CFString *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v8 = CFSTR("...");
    v9 = CFSTR("...");
  }
  objc_msgSend(v6, "pairingIdentity");
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  if (v10)
  {
    -[HMDHome homeManager](self, "homeManager");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    if ((_os_feature_enabled_impl() & 1) != 0
      || CFPreferencesGetAppBooleanValue(CFSTR("MatterTTU"), CFSTR("/Library/Managed Preferences/mobile/com.apple.homed.plist"), 0)|| _os_feature_enabled_impl())
    {
      v12 = -[HMDHome removeUserFromMatterAccessories:](self, "removeUserFromMatterAccessories:", v6);
    }
    v13 = isFeatureMatteriPhoneOnlyPairingControlEnabled();
    v14 = MEMORY[0x24BDAC760];
    if (v13 && (!objc_msgSend(v6, "privilege") || objc_msgSend(v6, "privilege") == 4))
    {
      v29[0] = v14;
      v29[1] = 3221225472;
      v29[2] = __31__HMDHome__removeUser_message___block_invoke;
      v29[3] = &unk_24E7945C8;
      v29[4] = self;
      -[HMDHome incrementOperatePrivilegeCATVersion:](self, "incrementOperatePrivilegeCATVersion:", v29);
    }
    objc_msgSend(v11, "backingStore");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    +[HMDBackingStoreTransactionOptions defaultXPCOptions](HMDBackingStoreTransactionOptions, "defaultXPCOptions");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v15, "transaction:options:", CFSTR("kUserManagementOperationAddedKey"), v16);
    v17 = (void *)objc_claimAutoreleasedReturnValue();

    v18 = (uint64_t)dispatch_group_create();
    -[HMDHome workQueue](self, "workQueue");
    v19 = objc_claimAutoreleasedReturnValue();
    block[0] = v14;
    block[1] = 3221225472;
    block[2] = __31__HMDHome__removeUser_message___block_invoke_2;
    block[3] = &unk_24E79A910;
    block[4] = self;
    v26 = v17;
    v27 = v6;
    v28 = v7;
    v20 = v17;
    dispatch_group_notify((dispatch_group_t)v18, v19, block);

    goto LABEL_18;
  }
  v21 = (void *)MEMORY[0x227676638]();
  v22 = self;
  HMFGetOSLogHandle();
  v23 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
  {
    HMFGetLogIdentifier();
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543618;
    v31 = v24;
    v32 = 2112;
    v33 = v8;
    _os_log_impl(&dword_2218F0000, v23, OS_LOG_TYPE_ERROR, "%{public}@Unable to retrieve user with name: %@", buf, 0x16u);

  }
  objc_autoreleasePoolPop(v21);
  if (v7)
  {
    objc_msgSend(MEMORY[0x24BDD1540], "errorWithDomain:code:userInfo:", *MEMORY[0x24BDD5BD8], 3, 0);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "responseHandler");
    v18 = objc_claimAutoreleasedReturnValue();
    (*(void (**)(uint64_t, void *, _QWORD))(v18 + 16))(v18, v11, 0);
LABEL_18:

  }
}

- (id)findAdditionalUUIDsForUser:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  id v7;
  id v8;
  _QWORD v10[4];
  id v11;
  HMDHome *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t (*v17)(uint64_t, uint64_t);
  void (*v18)(uint64_t);
  id v19;

  v4 = a3;
  v14 = 0;
  v15 = &v14;
  v16 = 0x3032000000;
  v17 = __Block_byref_object_copy__14094;
  v18 = __Block_byref_object_dispose__14095;
  v19 = 0;
  -[HMDHome backingStore](self, "backingStore");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "context");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v10[0] = MEMORY[0x24BDAC760];
  v10[1] = 3221225472;
  v10[2] = __38__HMDHome_findAdditionalUUIDsForUser___block_invoke;
  v10[3] = &unk_24E79C0A8;
  v7 = v4;
  v11 = v7;
  v12 = self;
  v13 = &v14;
  objc_msgSend(v6, "unsafeSynchronousBlock:", v10);

  v8 = (id)v15[5];
  _Block_object_dispose(&v14, 8);

  return v8;
}

- (void)_removeUserFromContainer:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  const __CFString *v8;
  _QWORD v9[2];

  v9[1] = *MEMORY[0x24BDAC8D0];
  v4 = a3;
  -[HMDHome presenceMonitor](self, "presenceMonitor");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "removeUser:", v4);

  objc_msgSend(v4, "removeCloudData");
  -[HMDHome _removeUser:](self, "_removeUser:", v4);
  objc_msgSend(v4, "unconfigure");
  -[HMDHome notificationCenter](self, "notificationCenter");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = CFSTR("HMDUserNotificationKey");
  v9[0] = v4;
  objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v9, &v8, 1);
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v6, "postNotificationName:object:userInfo:", CFSTR("HMDHomeUserRemovedNotification"), self, v7);
}

- (void)_addUserToContainer:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  const __CFString *v8;
  _QWORD v9[2];

  v9[1] = *MEMORY[0x24BDAC8D0];
  v4 = a3;
  -[HMDHome addUser:](self, "addUser:", v4);
  -[HMDHome presenceMonitor](self, "presenceMonitor");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "addNewUser:", v4);

  -[HMDHome notificationCenter](self, "notificationCenter");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = CFSTR("HMDUserNotificationKey");
  v9[0] = v4;
  objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v9, &v8, 1);
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v6, "postNotificationName:object:userInfo:", CFSTR("HMDHomeUserAddedNotification"), self, v7);
  -[HMDHome updateCATIDForUsersIfNeeded:](self, "updateCATIDForUsersIfNeeded:", 0);
}

- (void)refreshUserDisplayNames
{
  NSObject *v3;
  _QWORD block[5];

  -[HMDHome workQueue](self, "workQueue");
  v3 = objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x24BDAC760];
  block[1] = 3221225472;
  block[2] = __34__HMDHome_refreshUserDisplayNames__block_invoke;
  block[3] = &unk_24E79C240;
  block[4] = self;
  dispatch_async(v3, block);

}

- (void)_refreshUserDisplayNames
{
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t i;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t j;
  id v18;
  void *v19;
  id v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  HMDHome *v25;
  NSObject *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  HMDHome *v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  uint8_t buf[4];
  void *v43;
  __int16 v44;
  void *v45;
  _BYTE v46[128];
  _BYTE v47[128];
  uint64_t v48;

  v48 = *MEMORY[0x24BDAC8D0];
  objc_msgSend(MEMORY[0x24BDBCEF0], "set");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v38 = 0u;
  v39 = 0u;
  v40 = 0u;
  v41 = 0u;
  v33 = self;
  -[HMDHome outgoingInvitations](self, "outgoingInvitations");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v38, v47, 16);
  if (v5)
  {
    v6 = v5;
    v7 = *(_QWORD *)v39;
    do
    {
      for (i = 0; i != v6; ++i)
      {
        if (*(_QWORD *)v39 != v7)
          objc_enumerationMutation(v4);
        v9 = *(void **)(*((_QWORD *)&v38 + 1) + 8 * i);
        if (objc_msgSend(v9, "refreshDisplayName"))
        {
          if (isInternalBuild())
          {
            v10 = (void *)MEMORY[0x24BDD17C8];
            objc_msgSend(v9, "uuid");
            v11 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v10, "stringWithFormat:", CFSTR("OutgoingInviteDisplayNameUpdate_%@"), v11);
            v12 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v3, "addObject:", v12);

          }
          else
          {
            objc_msgSend(v3, "addObject:", CFSTR("OutgoingInviteDisplayNameUpdate"));
          }
        }
      }
      v6 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v38, v47, 16);
    }
    while (v6);
  }

  v36 = 0u;
  v37 = 0u;
  v34 = 0u;
  v35 = 0u;
  -[HMDHome users](v33, "users");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  v14 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v34, v46, 16);
  if (v14)
  {
    v15 = v14;
    v16 = *(_QWORD *)v35;
    do
    {
      for (j = 0; j != v15; ++j)
      {
        if (*(_QWORD *)v35 != v16)
          objc_enumerationMutation(v13);
        v18 = *(id *)(*((_QWORD *)&v34 + 1) + 8 * j);
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0)
          v19 = v18;
        else
          v19 = 0;
        v20 = v19;

        if (!v20 && objc_msgSend(v18, "refreshDisplayName"))
        {
          if (isInternalBuild())
          {
            v21 = (void *)MEMORY[0x24BDD17C8];
            objc_msgSend(v18, "uuid");
            v22 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v21, "stringWithFormat:", CFSTR("UserDisplayNameUpdate_%@"), v22);
            v23 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v3, "addObject:", v23);

          }
          else
          {
            objc_msgSend(v3, "addObject:", CFSTR("UserDisplayNameUpdate"));
          }
        }

      }
      v15 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v34, v46, 16);
    }
    while (v15);
  }

  if (objc_msgSend(v3, "count"))
  {
    v24 = (void *)MEMORY[0x227676638]();
    v25 = v33;
    HMFGetOSLogHandle();
    v26 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v26, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v27 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v3, "allObjects");
      v28 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v28, "componentsJoinedByString:", CFSTR(", "));
      v29 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v43 = v27;
      v44 = 2112;
      v45 = v29;
      _os_log_impl(&dword_2218F0000, v26, OS_LOG_TYPE_INFO, "%{public}@User display names updated: %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v24);
    -[HMDHome saveToCurrentAccountWithReason:](v25, "saveToCurrentAccountWithReason:", CFSTR("userDisplayNameUpdated"));
    -[HMDHome home](v25, "home");
    v30 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v30, "homeManager");
    v31 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHome uuid](v25, "uuid");
    v32 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v31, "updateGenerationCounterWithReason:sourceUUID:shouldNotifyClients:", CFSTR("userDisplayNameUpdated"), v32, 1);

  }
}

- (BOOL)containsRemovedUser:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t i;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  _BYTE v16[128];
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  v4 = a3;
  -[HMDHome removedUsers](self, "removedUsers");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = (void *)objc_msgSend(v5, "copy");

  v14 = 0u;
  v15 = 0u;
  v12 = 0u;
  v13 = 0u;
  v7 = v6;
  v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
  if (v8)
  {
    v9 = *(_QWORD *)v13;
    while (2)
    {
      for (i = 0; i != v8; ++i)
      {
        if (*(_QWORD *)v13 != v9)
          objc_enumerationMutation(v7);
        if ((objc_msgSend(*(id *)(*((_QWORD *)&v12 + 1) + 8 * i), "isEqualToUser:", v4, (_QWORD)v12) & 1) != 0)
        {
          LOBYTE(v8) = 1;
          goto LABEL_11;
        }
      }
      v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
      if (v8)
        continue;
      break;
    }
  }
LABEL_11:

  return v8;
}

- (id)outgoingInvitationToResendForUser:(id)a3
{
  id v4;
  void *v5;
  HMDHome *v6;
  NSObject *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t i;
  void *v14;
  void *v15;
  HMDHome *v16;
  NSObject *v17;
  void *v18;
  void *v19;
  void *v20;
  BOOL v21;
  id v22;
  HMDHome *v24;
  id obj;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint8_t buf[4];
  void *v31;
  __int16 v32;
  uint64_t v33;
  __int16 v34;
  id v35;
  _BYTE v36[128];
  uint64_t v37;

  v37 = *MEMORY[0x24BDAC8D0];
  v4 = a3;
  v5 = (void *)MEMORY[0x227676638]();
  v6 = self;
  HMFGetOSLogHandle();
  v7 = objc_claimAutoreleasedReturnValue();
  v24 = v6;
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHome outgoingInvitations](v6, "outgoingInvitations");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543618;
    v31 = v8;
    v32 = 2048;
    v33 = objc_msgSend(v9, "count");
    _os_log_impl(&dword_2218F0000, v7, OS_LOG_TYPE_INFO, "%{public}@There are %lu outgoing invitations", buf, 0x16u);

    v6 = v24;
  }

  objc_autoreleasePoolPop(v5);
  v28 = 0u;
  v29 = 0u;
  v26 = 0u;
  v27 = 0u;
  -[HMDHome outgoingInvitations](v6, "outgoingInvitations");
  obj = (id)objc_claimAutoreleasedReturnValue();
  v10 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v26, v36, 16);
  if (v10)
  {
    v11 = v10;
    v12 = *(_QWORD *)v27;
    do
    {
      for (i = 0; i != v11; ++i)
      {
        if (*(_QWORD *)v27 != v12)
          objc_enumerationMutation(obj);
        v14 = *(void **)(*((_QWORD *)&v26 + 1) + 8 * i);
        v15 = (void *)MEMORY[0x227676638]();
        v16 = v6;
        HMFGetOSLogHandle();
        v17 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG))
        {
          HMFGetLogIdentifier();
          v18 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v14, "user");
          v19 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543874;
          v31 = v18;
          v32 = 2112;
          v33 = (uint64_t)v19;
          v34 = 2112;
          v35 = v4;
          _os_log_impl(&dword_2218F0000, v17, OS_LOG_TYPE_DEBUG, "%{public}@Inspecting outgoing invite to user %@ to see if it matches %@", buf, 0x20u);

          v6 = v24;
        }

        objc_autoreleasePoolPop(v15);
        objc_msgSend(v14, "user");
        v20 = (void *)objc_claimAutoreleasedReturnValue();
        if (objc_msgSend(v20, "isAccountEqualWithUser:", v4))
        {
          v21 = -[HMDHome _shouldResendOutgoingInvitation:](v16, "_shouldResendOutgoingInvitation:", v14);

          if (v21)
          {
            v22 = v14;
            goto LABEL_17;
          }
        }
        else
        {

        }
      }
      v11 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v26, v36, 16);
    }
    while (v11);
  }
  v22 = 0;
LABEL_17:

  return v22;
}

- (BOOL)_justSentInvitation:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  double v7;
  double v8;
  BOOL v9;
  void *v10;
  HMDHome *v11;
  NSObject *v12;
  void *v13;
  void *v14;
  int v16;
  void *v17;
  __int16 v18;
  id v19;
  __int16 v20;
  void *v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  v4 = a3;
  objc_msgSend(v4, "dateSent");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  if (v5)
  {
    objc_msgSend(v4, "dateSent");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "timeIntervalSinceNow");
    v8 = fabs(v7);
    v9 = vabdd_f64(300.0, v8) >= 2.22044605e-16 && v8 < 300.0;

  }
  else
  {
    v9 = 0;
  }

  v10 = (void *)MEMORY[0x227676638]();
  v11 = self;
  HMFGetOSLogHandle();
  v12 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    HMFBooleanToString();
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    v16 = 138543874;
    v17 = v13;
    v18 = 2112;
    v19 = v4;
    v20 = 2112;
    v21 = v14;
    _os_log_impl(&dword_2218F0000, v12, OS_LOG_TYPE_INFO, "%{public}@Invitation %@ was just sent: %@", (uint8_t *)&v16, 0x20u);

  }
  objc_autoreleasePoolPop(v10);

  return v9;
}

- (BOOL)_shouldResendOutgoingInvitation:(id)a3
{
  id v4;
  _BOOL4 v5;

  v4 = a3;
  if (objc_msgSend(v4, "invitationState") == 2)
    v5 = !-[HMDHome _justSentInvitation:](self, "_justSentInvitation:", v4);
  else
    LOBYTE(v5) = 0;

  return v5;
}

- (void)handleCurrentUserPrivilegeChanged:(id)a3
{
  NSObject *v4;
  _QWORD block[5];

  -[HMDHome workQueue](self, "workQueue", a3);
  v4 = objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x24BDAC760];
  block[1] = 3221225472;
  block[2] = __45__HMDHome_handleCurrentUserPrivilegeChanged___block_invoke;
  block[3] = &unk_24E79C240;
  block[4] = self;
  dispatch_async(v4, block);

}

- (NSNumber)overriddenHomeAccessControl
{
  NSNumber *v3;

  os_unfair_recursive_lock_lock_with_options();
  v3 = self->_overriddenHomeAccessControl;
  os_unfair_recursive_lock_unlock();
  return v3;
}

- (void)setOverriddenHomeAccessControl:(id)a3
{
  NSNumber *v4;
  NSNumber *overriddenHomeAccessControl;

  v4 = (NSNumber *)a3;
  os_unfair_recursive_lock_lock_with_options();
  overriddenHomeAccessControl = self->_overriddenHomeAccessControl;
  self->_overriddenHomeAccessControl = v4;

  os_unfair_recursive_lock_unlock();
}

- (void)handleCATUpdate
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;

  -[HMDHome fabric](self, "fabric");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "fabricID");
  v9 = (id)objc_claimAutoreleasedReturnValue();

  +[HMDHomeLocalOperationalCertificateDataStore localOperationalCertDataStore](HMDHomeLocalOperationalCertificateDataStore, "localOperationalCertDataStore");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "removeOperationalCertDataForFabricID:", v9);

  -[HMDHome homeManager](self, "homeManager");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "accessoryBrowser");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "chipAccessoryServerBrowser");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHome fabric](self, "fabric");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "updateAccessoryACLAndGetNOCFromResidentForSharedUserForFabric:", v8);

}

- (void)_handleOutgoingInvitations:(id)a3
{
  id v4;
  void *v5;
  _QWORD v6[5];

  v4 = a3;
  -[HMDHome residentSyncManager](self, "residentSyncManager");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6[0] = MEMORY[0x24BDAC760];
  v6[1] = 3221225472;
  v6[2] = __38__HMDHome__handleOutgoingInvitations___block_invoke;
  v6[3] = &unk_24E79BF48;
  v6[4] = self;
  objc_msgSend(v5, "interceptRemoteResidentRequest:proceed:", v4, v6);

}

- (void)_processOutgoingInvitationsRequest:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  id v11;
  char v12;
  void *v13;
  HMDHome *v14;
  NSObject *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  HMDHome *v20;
  NSObject *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  _QWORD v26[4];
  id v27;
  id v28;
  char v29;
  id v30;
  _BYTE location[12];
  __int16 v32;
  void *v33;
  __int16 v34;
  id v35;
  _QWORD v36[3];

  v36[2] = *MEMORY[0x24BDAC8D0];
  v4 = a3;
  objc_msgSend(v4, "dataForKey:", CFSTR("HM.invitations"));
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  if (v5)
  {
    v6 = (void *)MEMORY[0x24BDD1620];
    v7 = (void *)MEMORY[0x24BDBCF20];
    v36[0] = objc_opt_class();
    v36[1] = objc_opt_class();
    objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", v36, 2);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "setWithArray:", v8);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v30 = 0;
    objc_msgSend(v6, "unarchivedObjectOfClasses:fromData:error:", v9, v5, &v30);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v11 = v30;

    if (v10)
    {
      v12 = objc_msgSend(v4, "BOOLForKey:", CFSTR("HMDHomeSuppressInviteNotificationKey"));
      objc_initWeak((id *)location, self);
      v26[0] = MEMORY[0x24BDAC760];
      v26[1] = 3221225472;
      v26[2] = __46__HMDHome__processOutgoingInvitationsRequest___block_invoke;
      v26[3] = &unk_24E77B448;
      objc_copyWeak(&v28, (id *)location);
      v27 = v10;
      v29 = v12;
      -[HMDHome _addOutgoingInvitations:message:transactionCompleted:](self, "_addOutgoingInvitations:message:transactionCompleted:", v27, v4, v26);

      objc_destroyWeak(&v28);
      objc_destroyWeak((id *)location);
    }
    else
    {
      v19 = (void *)MEMORY[0x227676638]();
      v20 = self;
      HMFGetOSLogHandle();
      v21 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v22 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v4, "identifier");
        v23 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v23, "UUIDString");
        v24 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)location = 138543874;
        *(_QWORD *)&location[4] = v22;
        v32 = 2112;
        v33 = v24;
        v34 = 2112;
        v35 = v11;
        _os_log_impl(&dword_2218F0000, v21, OS_LOG_TYPE_INFO, "%{public}@Failed to unarchive outgoing home invitations from serialized outgoing home invitation data: %@: %@", location, 0x20u);

      }
      objc_autoreleasePoolPop(v19);
      objc_msgSend(MEMORY[0x24BDD1540], "errorWithDomain:code:userInfo:", *MEMORY[0x24BDD5BD8], 2, 0);
      v25 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "respondWithError:", v25);

    }
  }
  else
  {
    v13 = (void *)MEMORY[0x227676638]();
    v14 = self;
    HMFGetOSLogHandle();
    v15 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "identifier");
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v17, "UUIDString");
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)location = 138543618;
      *(_QWORD *)&location[4] = v16;
      v32 = 2112;
      v33 = v18;
      _os_log_impl(&dword_2218F0000, v15, OS_LOG_TYPE_INFO, "%{public}@Unable to find outgoing invitations to add for message: %@", location, 0x16u);

    }
    objc_autoreleasePoolPop(v13);
    objc_msgSend(MEMORY[0x24BDD1540], "errorWithDomain:code:userInfo:", *MEMORY[0x24BDD5BD8], 2, 0);
    v11 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "respondWithError:", v11);
  }

}

- (id)_outgoingInvitationForUserWithHandle:(id)a3
{
  id v4;
  void *v5;
  id v6;
  uint64_t v7;
  void *i;
  void *v9;
  void *v10;
  void *v11;
  char v12;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  _BYTE v18[128];
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v4 = a3;
  v14 = 0u;
  v15 = 0u;
  v16 = 0u;
  v17 = 0u;
  -[HMDHome outgoingInvitations](self, "outgoingInvitations", 0);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = (id)objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
  if (v6)
  {
    v7 = *(_QWORD *)v15;
    while (2)
    {
      for (i = 0; i != v6; i = (char *)i + 1)
      {
        if (*(_QWORD *)v15 != v7)
          objc_enumerationMutation(v5);
        v9 = *(void **)(*((_QWORD *)&v14 + 1) + 8 * (_QWORD)i);
        objc_msgSend(v9, "user");
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v10, "accountHandle");
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        v12 = objc_msgSend(v11, "isEqual:", v4);

        if ((v12 & 1) != 0)
        {
          v6 = v9;
          goto LABEL_11;
        }
      }
      v6 = (id)objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
      if (v6)
        continue;
      break;
    }
  }
LABEL_11:

  return v6;
}

- (void)_addOutgoingInvitations:(id)a3 message:(id)a4 transactionCompleted:(id)a5
{
  id v8;
  id v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  HMDHome *v14;
  id v15;
  uint64_t i;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  HMDHome *v25;
  HMDHome *v26;
  NSObject *v27;
  void *v28;
  HMDUserModel *v29;
  void *v30;
  void *v31;
  HMDUserModel *v32;
  void *v33;
  id v34;
  id obj;
  id v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD v39[4];
  id v40;
  id v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  uint8_t buf[4];
  void *v47;
  __int16 v48;
  void *v49;
  __int16 v50;
  void *v51;
  _BYTE v52[128];
  uint64_t v53;

  v53 = *MEMORY[0x24BDAC8D0];
  v8 = a3;
  v9 = a4;
  v34 = a5;
  -[HMDHome backingStore](self, "backingStore");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "name");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  +[HMDBackingStoreTransactionOptions defaultXPCOptions](HMDBackingStoreTransactionOptions, "defaultXPCOptions");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "transaction:options:", v11, v12);
  v13 = (void *)objc_claimAutoreleasedReturnValue();

  v14 = self;
  v44 = 0u;
  v45 = 0u;
  v42 = 0u;
  v43 = 0u;
  v15 = v8;
  v38 = objc_msgSend(v15, "countByEnumeratingWithState:objects:count:", &v42, v52, 16);
  if (v38)
  {
    v37 = *(_QWORD *)v43;
    obj = v15;
    v36 = v9;
    do
    {
      for (i = 0; i != v38; ++i)
      {
        if (*(_QWORD *)v43 != v37)
          objc_enumerationMutation(obj);
        v17 = *(void **)(*((_QWORD *)&v42 + 1) + 8 * i);
        objc_msgSend(v17, "setHome:", v14);
        objc_msgSend(v17, "modelObjectWithChangeType:version:", 1, 4);
        v18 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v13, "add:withMessage:", v18, v9);
        objc_msgSend(v17, "user");
        v19 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v19, "userID");
        v20 = (void *)objc_claimAutoreleasedReturnValue();

        -[HMDHome pendingUsers](v14, "pendingUsers");
        v21 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v21, "hmf_firstObjectWithValue:forKeyPath:", v20, CFSTR("userID"));
        v22 = (void *)objc_claimAutoreleasedReturnValue();

        if (v22)
        {
          v23 = v13;
          v24 = (void *)MEMORY[0x227676638]();
          v25 = v14;
          v26 = v14;
          HMFGetOSLogHandle();
          v27 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v27, OS_LOG_TYPE_INFO))
          {
            HMFGetLogIdentifier();
            v28 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 138543874;
            v47 = v28;
            v48 = 2112;
            v49 = v22;
            v50 = 2112;
            v51 = v20;
            _os_log_impl(&dword_2218F0000, v27, OS_LOG_TYPE_INFO, "%{public}@Found stale pending user instance %@ that we need to remove since the owner is manually re-inviting %@", buf, 0x20u);

          }
          objc_autoreleasePoolPop(v24);
          v29 = [HMDUserModel alloc];
          objc_msgSend(v22, "uuid");
          v30 = (void *)objc_claimAutoreleasedReturnValue();
          -[HMDHome uuid](v26, "uuid");
          v31 = (void *)objc_claimAutoreleasedReturnValue();
          v32 = -[HMDBackingStoreModelObject initWithObjectChangeType:uuid:parentUUID:](v29, "initWithObjectChangeType:uuid:parentUUID:", 3, v30, v31);

          v13 = v23;
          objc_msgSend(v23, "add:", v32);

          v9 = v36;
          v14 = v25;
        }

      }
      v15 = obj;
      v38 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v42, v52, 16);
    }
    while (v38);
  }

  if (-[HMDHome isRestrictedGuestEnabled](v14, "isRestrictedGuestEnabled"))
  {
    v33 = v34;
    -[HMDHome _saveOutgoingInvitationsWithRestrictedGuestSettings:inTransaction:message:transactionCompleted:](v14, "_saveOutgoingInvitationsWithRestrictedGuestSettings:inTransaction:message:transactionCompleted:", v15, v13, v9, v34);
  }
  else
  {
    v39[0] = MEMORY[0x24BDAC760];
    v39[1] = 3221225472;
    v39[2] = __64__HMDHome__addOutgoingInvitations_message_transactionCompleted___block_invoke;
    v39[3] = &unk_24E79B3A0;
    v33 = v34;
    v41 = v34;
    v40 = v9;
    objc_msgSend(v13, "run:", v39);

  }
}

- (void)_sendInvitation:(id)a3 message:(id)a4 shareURL:(id)a5 shareToken:(id)a6 suppressHomeInviteNotification:(BOOL)a7
{
  id v12;
  id v13;
  id v14;
  id v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  _BOOL4 v22;
  void *v23;
  void *v24;
  id v25;
  void *v26;
  HMDHome *v27;
  NSObject *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  int v33;
  void *v34;
  HMDHome *v35;
  NSObject *v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  HMDHome *v41;
  NSObject *v42;
  void *v43;
  void *v44;
  HMDHome *v45;
  NSObject *v46;
  void *v47;
  void *v48;
  HMDHome *v49;
  NSObject *v50;
  void *v51;
  id v52;
  void *v53;
  void *v54;
  void *v55;
  void *v56;
  void *v57;
  void *v58;
  void *v59;
  void *v60;
  void *v61;
  HMDRemoteAccountMessageDestination *v62;
  void *v63;
  HMDRemoteAccountMessageDestination *v64;
  id v65;
  void *v66;
  void *v67;
  void *v68;
  uint64_t v69;
  id v70;
  uint64_t v71;
  void *v72;
  void *v73;
  void *v74;
  void *v75;
  void *v76;
  void *v77;
  id *v78;
  void *v79;
  void *v80;
  void *v81;
  unsigned int v82;
  void *v83;
  id v84;
  void *v85;
  id v86;
  _QWORD *v87;
  id v88;
  id v89;
  id v90;
  id v91;
  id v92;
  id val;
  _QWORD v94[2];
  void (*v95)(uint64_t, void *);
  void *v96;
  id v97;
  id v98;
  id v99;
  _QWORD v100[4];
  id v101;
  id v102;
  id v103;
  id location;
  _QWORD v105[4];
  id v106;
  id v107;
  _QWORD *v108;
  id v109;
  _QWORD v110[4];
  id v111;
  id v112;
  id v113;
  id v114;
  _QWORD v115[13];
  _BYTE from[24];
  id v117;
  void *v118;
  void *v119;
  void *v120;
  void *v121;
  void *v122;
  void *v123;
  void *v124;
  void *v125;
  void *v126;
  _QWORD v127[2];
  _QWORD v128[5];

  v128[2] = *MEMORY[0x24BDAC8D0];
  v12 = a3;
  v13 = a4;
  v14 = a5;
  v15 = a6;
  val = v12;
  objc_msgSend(v12, "user");
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v16, "accountHandle");
  v17 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v12, "identifier");
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v12, "endDate");
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  if (a7)
  {
    v82 = 1;
  }
  else
  {
    objc_msgSend(v12, "user");
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    v82 = objc_msgSend(v20, "isPending");

  }
  objc_initWeak(&location, self);
  objc_msgSend(v12, "expirationHandler");
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  v22 = v21 == 0;

  if (v22)
  {
    -[HMDHome workQueue](self, "workQueue");
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "setClientQueue:", v23);

    objc_initWeak((id *)from, v12);
    v100[0] = MEMORY[0x24BDAC760];
    v100[1] = 3221225472;
    v100[2] = __86__HMDHome__sendInvitation_message_shareURL_shareToken_suppressHomeInviteNotification___block_invoke;
    v100[3] = &unk_24E798350;
    objc_copyWeak(&v102, &location);
    objc_copyWeak(&v103, (id *)from);
    v101 = v13;
    objc_msgSend(v12, "setExpirationHandler:", v100);

    objc_destroyWeak(&v103);
    objc_destroyWeak(&v102);
    objc_destroyWeak((id *)from);
  }
  objc_msgSend(v12, "user");
  v24 = (void *)objc_claimAutoreleasedReturnValue();
  v94[0] = MEMORY[0x24BDAC760];
  v94[1] = 3221225472;
  v95 = __86__HMDHome__sendInvitation_message_shareURL_shareToken_suppressHomeInviteNotification___block_invoke_1301;
  v96 = &unk_24E796418;
  objc_copyWeak(&v99, &location);
  v97 = v17;
  v86 = v13;
  v98 = v86;
  v25 = v97;
  v88 = v18;
  v89 = v19;
  v91 = v14;
  v90 = v15;
  v92 = v24;
  v87 = v94;
  if (self)
  {
    v26 = (void *)MEMORY[0x227676638]();
    v27 = self;
    HMFGetOSLogHandle();
    v28 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v28, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v29 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)from = 138543874;
      *(_QWORD *)&from[4] = v29;
      *(_WORD *)&from[12] = 2112;
      *(_QWORD *)&from[14] = v25;
      *(_WORD *)&from[22] = 2112;
      v117 = v92;
      _os_log_impl(&dword_2218F0000, v28, OS_LOG_TYPE_INFO, "%{public}@Sending invite to: %@ for user: %@", from, 0x20u);

    }
    objc_autoreleasePoolPop(v26);
    +[HMDAppleAccountManager sharedManager](HMDAppleAccountManager, "sharedManager");
    v30 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v30, "account");
    v31 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v31, "handles");
    v32 = (void *)objc_claimAutoreleasedReturnValue();
    v33 = objc_msgSend(v32, "containsObject:", v25);

    if (v33)
    {
      v34 = (void *)MEMORY[0x227676638]();
      v35 = v27;
      HMFGetOSLogHandle();
      v36 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v36, OS_LOG_TYPE_DEFAULT))
      {
        HMFGetLogIdentifier();
        v37 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)from = 138543618;
        *(_QWORD *)&from[4] = v37;
        *(_WORD *)&from[12] = 2112;
        *(_QWORD *)&from[14] = v25;
        _os_log_impl(&dword_2218F0000, v36, OS_LOG_TYPE_DEFAULT, "%{public}@Attempt to add local user: %@", from, 0x16u);

      }
      objc_autoreleasePoolPop(v34);
      objc_msgSend(MEMORY[0x24BDD1540], "errorWithDomain:code:userInfo:", *MEMORY[0x24BDD5BD8], 3, 0);
      v38 = (void *)objc_claimAutoreleasedReturnValue();
      v95((uint64_t)v87, v38);
    }
    else
    {
      -[HMDHome keychainStore](v27, "keychainStore");
      v39 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v39, "getPreferredHH2ControllerKey");
      v38 = (void *)objc_claimAutoreleasedReturnValue();

      if (v38)
      {
        if (!v91 || !v90)
        {
          _HMFPreconditionFailure();
          __break(1u);
        }
        v114 = 0;
        objc_msgSend(MEMORY[0x24BDD1618], "archivedDataWithRootObject:requiringSecureCoding:error:", v90, 1, &v114);
        v81 = (void *)objc_claimAutoreleasedReturnValue();
        v84 = v114;
        if (v84)
        {
          v40 = (void *)MEMORY[0x227676638]();
          v41 = v27;
          HMFGetOSLogHandle();
          v42 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v42, OS_LOG_TYPE_ERROR))
          {
            HMFGetLogIdentifier();
            v43 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)from = 138543618;
            *(_QWORD *)&from[4] = v43;
            *(_WORD *)&from[12] = 2112;
            *(_QWORD *)&from[14] = v90;
            _os_log_impl(&dword_2218F0000, v42, OS_LOG_TYPE_ERROR, "%{public}@Failed to encode share token %@", from, 0x16u);

          }
          objc_autoreleasePoolPop(v40);
          v95((uint64_t)v87, v84);
        }
        else
        {
          v127[0] = CFSTR("kHomedVersionKey");
          v52 = (id)homedVersion;
          v127[1] = CFSTR("kHomedSupportedFeaturesKey");
          v128[0] = v52;
          v128[1] = &unk_24E970BC8;
          objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v128, v127, 2);
          v73 = (void *)objc_claimAutoreleasedReturnValue();

          objc_msgSend(v92, "restrictedGuestAccessSettings");
          v53 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v53, "schedule");
          v54 = (void *)objc_claimAutoreleasedReturnValue();

          if (v54)
          {
            objc_msgSend(v92, "restrictedGuestAccessSettings");
            v55 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v55, "schedule");
            v56 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v56, "dictionaryRepresentation");
            v71 = objc_claimAutoreleasedReturnValue();

          }
          else
          {
            v71 = MEMORY[0x24BDBD1B8];
          }
          v115[0] = CFSTR("kHomeName");
          -[HMDHome name](v27, "name", v71);
          v79 = (void *)objc_claimAutoreleasedReturnValue();
          *(_QWORD *)from = v79;
          v115[1] = CFSTR("kHomeUUID");
          -[HMDHome uuid](v27, "uuid");
          v78 = (id *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v78, "UUIDString");
          v77 = (void *)objc_claimAutoreleasedReturnValue();
          *(_QWORD *)&from[8] = v77;
          *(_QWORD *)&from[16] = v89;
          v115[2] = CFSTR("kInvitationExpiryDateKey");
          v115[3] = CFSTR("kControllerPublicKey");
          objc_msgSend(v38, "publicKey");
          v76 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v76, "data");
          v75 = (void *)objc_claimAutoreleasedReturnValue();
          v117 = v75;
          v115[4] = CFSTR("kControllerPairingNameKey");
          objc_msgSend(v38, "identifier");
          v74 = (void *)objc_claimAutoreleasedReturnValue();
          v118 = v74;
          v115[5] = CFSTR("kInvitationIdentifierKey");
          objc_msgSend(v88, "UUIDString");
          v57 = (void *)objc_claimAutoreleasedReturnValue();
          v119 = v57;
          v120 = v73;
          v115[6] = CFSTR("kRequestedCapabilitiesKey");
          v115[7] = CFSTR("HMDHomeInvitationShareURLKey");
          objc_msgSend(v91, "absoluteString");
          v58 = (void *)objc_claimAutoreleasedReturnValue();
          v121 = v58;
          v122 = v81;
          v115[8] = CFSTR("HMDHomeInvitationShareTokenKey");
          v115[9] = CFSTR("HMDHomeSuppressInviteNotificationKey");
          objc_msgSend(MEMORY[0x24BDD16E0], "numberWithBool:", v82);
          v59 = (void *)objc_claimAutoreleasedReturnValue();
          v123 = v59;
          v115[10] = *MEMORY[0x24BDD5DE8];
          objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedInteger:", objc_msgSend(v92, "privilege"));
          v60 = (void *)objc_claimAutoreleasedReturnValue();
          v124 = v60;
          v115[11] = *MEMORY[0x24BDD6488];
          objc_msgSend(MEMORY[0x24BDD16E0], "numberWithBool:", -[HMDHome doesThisHomeHaveCameras](v27, "doesThisHomeHaveCameras"));
          v61 = (void *)objc_claimAutoreleasedReturnValue();
          v115[12] = *MEMORY[0x24BDD6AB0];
          v125 = v61;
          v126 = v72;
          objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", from, v115, 13);
          v83 = (void *)objc_claimAutoreleasedReturnValue();

          v62 = [HMDRemoteAccountMessageDestination alloc];
          v63 = (void *)objc_msgSend(objc_alloc(MEMORY[0x24BDD1880]), "initWithUUIDString:", CFSTR("1CAEDC10-E3E5-41A4-BB17-A9EEBA14A938"));
          v64 = -[HMDRemoteAccountMessageDestination initWithTarget:handle:multicast:](v62, "initWithTarget:handle:multicast:", v63, v25, 1);

          objc_msgSend(MEMORY[0x24BE3F1D0], "messageWithName:destination:payload:", CFSTR("kAccessHomeInviteRequestKey"), v64, v83);
          v80 = (void *)objc_claimAutoreleasedReturnValue();
          objc_initWeak(&v113, v27);
          v110[0] = MEMORY[0x24BDAC760];
          v110[1] = 3221225472;
          v110[2] = __148__HMDHome__sendInviteToUserWithHandle_inviteIdentifier_expiryDate_shareURL_shareToken_suppressHomeInviteNotification_invitedUser_completionHandler___block_invoke;
          v110[3] = &unk_24E798D90;
          objc_copyWeak(&v112, &v113);
          v65 = v25;
          v111 = v65;
          objc_msgSend(v80, "setResponseHandler:", v110);
          -[HMDHome homeManager](v27, "homeManager");
          v66 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v66, "idsInvitationManager");
          v67 = (void *)objc_claimAutoreleasedReturnValue();
          -[HMDRemoteAccountMessageDestination remoteDestinationString](v64, "remoteDestinationString");
          v68 = (void *)objc_claimAutoreleasedReturnValue();
          v69 = objc_msgSend(v92, "isRestrictedGuest");
          v105[0] = MEMORY[0x24BDAC760];
          v105[1] = 3221225472;
          v105[2] = __148__HMDHome__sendInviteToUserWithHandle_inviteIdentifier_expiryDate_shareURL_shareToken_suppressHomeInviteNotification_invitedUser_completionHandler___block_invoke_1307;
          v105[3] = &unk_24E7768A8;
          objc_copyWeak(&v109, &v113);
          v70 = v88;
          v106 = v70;
          v107 = v65;
          v108 = v87;
          objc_msgSend(v67, "sendInvitationToDestination:expirationDate:dictionary:homeInvitationID:isRestrictedGuestInvitation:completionBlock:", v68, v89, v83, v70, v69, v105);

          objc_destroyWeak(&v109);
          objc_destroyWeak(&v112);
          objc_destroyWeak(&v113);

        }
      }
      else
      {
        v44 = (void *)MEMORY[0x227676638]();
        v45 = v27;
        HMFGetOSLogHandle();
        v46 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v46, OS_LOG_TYPE_FAULT))
        {
          HMFGetLogIdentifier();
          v47 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)from = 138543362;
          *(_QWORD *)&from[4] = v47;
          _os_log_impl(&dword_2218F0000, v46, OS_LOG_TYPE_FAULT, "%{public}@We are doomed. Could not find owner's HH2 Key and we are in HH2. Cannot send the invite.", from, 0xCu);

        }
        objc_autoreleasePoolPop(v44);
        v48 = (void *)MEMORY[0x227676638]();
        v49 = v45;
        HMFGetOSLogHandle();
        v50 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v50, OS_LOG_TYPE_ERROR))
        {
          HMFGetLogIdentifier();
          v51 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)from = 138543362;
          *(_QWORD *)&from[4] = v51;
          _os_log_impl(&dword_2218F0000, v50, OS_LOG_TYPE_ERROR, "%{public}@We are doomed. Could not find owner's HH2 Key and we are in HH2. Cannot send the invite.", from, 0xCu);

        }
        objc_autoreleasePoolPop(v48);
        objc_msgSend(MEMORY[0x24BDD1540], "hmPrivateErrorWithCode:", 2723);
        v85 = (void *)objc_claimAutoreleasedReturnValue();
        v95((uint64_t)v87, v85);

      }
    }

  }
  objc_destroyWeak(&v99);
  objc_destroyWeak(&location);

}

- (BOOL)doesThisHomeHaveCameras
{
  void *v2;
  char v3;

  -[HMDHome accessories](self, "accessories");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "na_any:", &__block_literal_global_1309);

  return v3;
}

- (void)_handleUpdateOutgoingInvitationState:(id)a3
{
  id v4;
  void *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  HMDHome *v11;
  NSObject *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  id v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  uint64_t v23;
  id v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  uint64_t v30;
  HMDUserModel *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  HMDHome *v37;
  NSObject *v38;
  void *v39;
  void *v40;
  HMDUserModel *v41;
  void *v42;
  void *v43;
  void *v44;
  void *v45;
  HMDHome *v46;
  NSObject *v47;
  void *v48;
  void (**v49)(_QWORD, _QWORD, _QWORD);
  void *v50;
  HMDHome *v51;
  NSObject *v52;
  void *v53;
  void *v54;
  void *v55;
  void (**v56)(_QWORD, _QWORD, _QWORD);
  void (**v57)(_QWORD, _QWORD, _QWORD);
  int v58;
  void *v59;
  void *v60;
  void *v61;
  _QWORD v62[5];
  id v63;
  _QWORD v64[5];
  id v65;
  uint8_t buf[4];
  void *v67;
  __int16 v68;
  void *v69;
  __int16 v70;
  void *v71;
  uint64_t v72;

  v72 = *MEMORY[0x24BDAC8D0];
  v4 = a3;
  objc_msgSend(v4, "uuidForKey:", CFSTR("kInvitationIdentifierKey"));
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "numberForKey:", CFSTR("kInvitationStateKey"));
  v6 = objc_claimAutoreleasedReturnValue();
  v7 = (void *)v6;
  if (!v5 || !v6)
  {
    v45 = (void *)MEMORY[0x227676638]();
    v46 = self;
    HMFGetOSLogHandle();
    v47 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v47, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v48 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v67 = v48;
      _os_log_impl(&dword_2218F0000, v47, OS_LOG_TYPE_ERROR, "%{public}@Unable to accept the invitation as could not find the invite", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v45);
    objc_msgSend(MEMORY[0x24BDD1540], "errorWithDomain:code:userInfo:", *MEMORY[0x24BDD5BD8], 3, 0);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "responseHandler");
    v49 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
    ((void (**)(_QWORD, void *, _QWORD))v49)[2](v49, v9, 0);
LABEL_22:

    goto LABEL_23;
  }
  -[HMDHome outgoingInvitations](self, "outgoingInvitations");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "hmf_firstObjectWithValue:forKeyPath:", v5, CFSTR("identifier"));
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  if (v9)
  {
    if (objc_msgSend(v7, "integerValue") == 1)
    {
      v10 = (void *)MEMORY[0x227676638]();
      v11 = self;
      HMFGetOSLogHandle();
      v12 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v9, "identifier");
        v14 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v14, "UUIDString");
        v15 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(MEMORY[0x24BDD76D0], "homeInvitationStateDescription:", 1);
        v59 = v10;
        v16 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543874;
        v67 = v13;
        v68 = 2112;
        v69 = v15;
        v70 = 2112;
        v71 = v16;
        _os_log_impl(&dword_2218F0000, v12, OS_LOG_TYPE_INFO, "%{public}@[Home] Processing request to update invitation %@ to state %@", buf, 0x20u);

        v10 = v59;
      }

      objc_autoreleasePoolPop(v10);
      if ((objc_msgSend(v9, "invitationState") & 0xFFFFFFFFFFFFFFFDLL) != 4)
      {
        -[HMDHome _sendInvitationCancelationRequestToInvitee:](v11, "_sendInvitationCancelationRequestToInvitee:", v9);
        v17 = objc_alloc(MEMORY[0x24BE3F168]);
        -[HMDHome workQueue](v11, "workQueue");
        v18 = (void *)objc_claimAutoreleasedReturnValue();
        v60 = (void *)objc_msgSend(v17, "initWithQueue:", v18);

        -[HMDHome homeManager](v11, "homeManager");
        v19 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v19, "homeOwnerCloudShareManager");
        v20 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v9, "user");
        v21 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v20, "revokeAccessForUser:home:", v21, v11);
        v22 = (void *)objc_claimAutoreleasedReturnValue();
        v23 = MEMORY[0x24BDAC760];
        v64[0] = MEMORY[0x24BDAC760];
        v64[1] = 3221225472;
        v64[2] = __48__HMDHome__handleUpdateOutgoingInvitationState___block_invoke;
        v64[3] = &unk_24E797BE8;
        v64[4] = v11;
        v65 = v9;
        v62[0] = v23;
        v62[1] = 3221225472;
        v62[2] = __48__HMDHome__handleUpdateOutgoingInvitationState___block_invoke_1311;
        v62[3] = &unk_24E79B210;
        v62[4] = v11;
        v63 = v65;
        v24 = (id)objc_msgSend(v22, "inContext:then:orRecover:", v60, v64, v62);

      }
      -[HMDHome backingStore](v11, "backingStore");
      v25 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "name");
      v26 = (void *)objc_claimAutoreleasedReturnValue();
      +[HMDBackingStoreTransactionOptions defaultXPCOptions](HMDBackingStoreTransactionOptions, "defaultXPCOptions");
      v27 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v25, "transaction:options:", v26, v27);
      v28 = (void *)objc_claimAutoreleasedReturnValue();

      objc_msgSend(v9, "emptyModelObjectWithChangeType:", 3);
      v29 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v28, "add:withMessage:", v29, v4);

      objc_msgSend(v9, "pendingUserUUID");
      v30 = objc_claimAutoreleasedReturnValue();
      if (!v30)
        goto LABEL_26;
      v31 = (HMDUserModel *)v30;
      objc_msgSend(v9, "user");
      v32 = (void *)objc_claimAutoreleasedReturnValue();
      if ((objc_msgSend(v32, "isPending") & 1) != 0)
      {
        objc_msgSend(v9, "pendingUserUUID");
        v33 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v9, "user");
        v61 = v28;
        v34 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v34, "uuid");
        v35 = (void *)objc_claimAutoreleasedReturnValue();
        v58 = objc_msgSend(v33, "isEqual:", v35);

        v28 = v61;
        if (!v58)
        {
LABEL_26:
          objc_msgSend(v28, "run");

          goto LABEL_23;
        }
        v36 = (void *)MEMORY[0x227676638]();
        v37 = v11;
        HMFGetOSLogHandle();
        v38 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v38, OS_LOG_TYPE_INFO))
        {
          HMFGetLogIdentifier();
          v39 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v9, "user");
          v40 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543874;
          v67 = v39;
          v68 = 2112;
          v69 = v40;
          v70 = 2112;
          v71 = v9;
          _os_log_impl(&dword_2218F0000, v38, OS_LOG_TYPE_INFO, "%{public}@Found pending user [%@] associated with this invitation [%@]. Going to delete it as well.", buf, 0x20u);

        }
        objc_autoreleasePoolPop(v36);
        v41 = [HMDUserModel alloc];
        objc_msgSend(v9, "user");
        v42 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v42, "uuid");
        v43 = (void *)objc_claimAutoreleasedReturnValue();
        -[HMDHome uuid](v37, "uuid");
        v44 = (void *)objc_claimAutoreleasedReturnValue();
        v31 = -[HMDBackingStoreModelObject initWithObjectChangeType:uuid:parentUUID:](v41, "initWithObjectChangeType:uuid:parentUUID:", 3, v43, v44);

        objc_msgSend(v61, "add:", v31);
      }
      else
      {

      }
      goto LABEL_26;
    }
    objc_msgSend(MEMORY[0x24BDD1540], "errorWithDomain:code:userInfo:", *MEMORY[0x24BDD5BD8], 43, 0);
    v49 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "responseHandler");
    v57 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
    v57[2](v57, v49, 0);

    goto LABEL_22;
  }
  v50 = (void *)MEMORY[0x227676638]();
  v51 = self;
  HMFGetOSLogHandle();
  v52 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v52, OS_LOG_TYPE_ERROR))
  {
    HMFGetLogIdentifier();
    v53 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "UUIDString");
    v54 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543618;
    v67 = v53;
    v68 = 2112;
    v69 = v54;
    _os_log_impl(&dword_2218F0000, v52, OS_LOG_TYPE_ERROR, "%{public}@Invalid invite identifier specified %@", buf, 0x16u);

  }
  objc_autoreleasePoolPop(v50);
  objc_msgSend(MEMORY[0x24BDD1540], "errorWithDomain:code:userInfo:", *MEMORY[0x24BDD5BD8], 2, 0);
  v55 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "responseHandler");
  v56 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
  ((void (**)(_QWORD, void *, _QWORD))v56)[2](v56, v55, 0);

  v9 = 0;
LABEL_23:

}

- (void)handleDeclineRequestForIDSInvitationWithIdentifier:(id)a3 fromAddress:(id)a4
{
  id v6;
  id v7;
  void *v8;
  void *v9;
  HMDHome *v10;
  NSObject *v11;
  void *v12;
  void *v13;
  uint8_t buf[4];
  void *v15;
  __int16 v16;
  void *v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  v6 = a3;
  v7 = a4;
  -[HMDHome invitationWithIDSInvitationIdentifier:](self, "invitationWithIDSInvitationIdentifier:", v6);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  if (v8)
  {
    -[HMDHome _handleUpdateRequestForHomeInvitation:controllerPublicKey:controllerUsername:invitationState:presenceAuthStatus:preferredUserID:fromHandle:fromAddress:fromMergeID:reverseShareURL:reverseShareToken:issuerPublicKeyER:message:messageResponseHandler:](self, "_handleUpdateRequestForHomeInvitation:controllerPublicKey:controllerUsername:invitationState:presenceAuthStatus:preferredUserID:fromHandle:fromAddress:fromMergeID:reverseShareURL:reverseShareToken:issuerPublicKeyER:message:messageResponseHandler:", v8, 0, 0, 4, 0, 0, 0, v7, 0, 0, 0, 0, 0, &__block_literal_global_1312);
  }
  else
  {
    v9 = (void *)MEMORY[0x227676638]();
    v10 = self;
    HMFGetOSLogHandle();
    v11 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v6, "UUIDString");
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v15 = v12;
      v16 = 2112;
      v17 = v13;
      _os_log_impl(&dword_2218F0000, v11, OS_LOG_TYPE_ERROR, "%{public}@Could not find matching outgoingInvitation for idsIdentifier %@ to handle decline.", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v9);
  }

}

- (id)invitationWithInvitationIdentifier:(id)a3
{
  id v4;
  void *v5;
  void *v6;

  v4 = a3;
  -[HMDHome outgoingInvitations](self, "outgoingInvitations");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "hmf_firstObjectWithValue:forKeyPath:", v4, CFSTR("identifier"));
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  return v6;
}

- (id)invitationWithIDSInvitationIdentifier:(id)a3
{
  id v4;
  void *v5;
  void *v6;

  v4 = a3;
  -[HMDHome outgoingInvitations](self, "outgoingInvitations");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "hmf_firstObjectWithValue:forKeyPath:", v4, CFSTR("idsInvitationUUID"));
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  return v6;
}

- (void)handleAcceptRequestForIDSInvitationWithIdentifier:(id)a3 payload:(id)a4 fromAddress:(id)a5 fromMergeID:(id)a6
{
  id v10;
  id v11;
  id v12;
  void *v13;
  void *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  HMDHome *v19;
  NSObject *v20;
  void *v21;
  void *v22;
  void *v23;
  id v24;
  void *v25;
  void *v26;
  void *v27;
  char v28;
  void *v29;
  uint64_t v30;
  void *v31;
  void *v32;
  uint64_t v33;
  id v34;
  void *v35;
  HMDHome *v36;
  NSObject *v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  HMDHome *v42;
  NSObject *v43;
  void *v44;
  void *v45;
  void *v46;
  id v47;
  void *v48;
  void *v49;
  HMDHome *v50;
  NSObject *v51;
  void *v52;
  void *v53;
  void *v54;
  void *v55;
  id v56;
  void *v57;
  void *v58;
  HMDHome *v59;
  NSObject *v60;
  void *v61;
  void *v62;
  void *v63;
  void *v64;
  HMDHome *v65;
  void *v66;
  void *v67;
  void *v68;
  void *v69;
  void *v70;
  void *v71;
  id v72;
  id v73;
  id v74;
  id v75;
  void *v76;
  id v77;
  id v78;
  void *v79;
  void *v80;
  void *v81;
  void *v82;
  uint64_t v83;
  void *v84;
  void *v85;
  id v86;
  void *v87;
  id v88;
  uint8_t buf[4];
  void *v90;
  __int16 v91;
  id v92;
  __int16 v93;
  void *v94;
  __int16 v95;
  void *v96;
  uint64_t v97;

  v97 = *MEMORY[0x24BDAC8D0];
  v10 = a3;
  v11 = a4;
  v12 = a5;
  v86 = a6;
  objc_msgSend(v11, "hmf_UUIDForKey:", CFSTR("kInvitationIdentifierKey"));
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "hmf_dataForKey:", CFSTR("kControllerPublicKey"));
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "hmf_stringForKey:", CFSTR("kControllerPairingNameKey"));
  v83 = objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "hmf_dataForKey:", CFSTR("HMDIssuerPublicKeyExternalRepresentationKey"));
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x24BDD7A90], "authWithDict:", v11);
  v85 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "hmf_stringForKey:", CFSTR("kUserIDKey"));
  v84 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHome invitationWithIDSInvitationIdentifier:](self, "invitationWithIDSInvitationIdentifier:", v10);
  v16 = objc_claimAutoreleasedReturnValue();
  -[HMDHome invitationWithInvitationIdentifier:](self, "invitationWithInvitationIdentifier:", v13);
  v17 = objc_claimAutoreleasedReturnValue();
  v87 = (void *)v17;
  if (!(v16 | v17))
  {
    v41 = (void *)MEMORY[0x227676638]();
    v42 = self;
    HMFGetOSLogHandle();
    v43 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v43, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v82 = v15;
      v44 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v10, "UUIDString");
      v78 = v12;
      v45 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v13, "UUIDString");
      v46 = v14;
      v47 = v10;
      v48 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543874;
      v90 = v44;
      v91 = 2112;
      v92 = v45;
      v93 = 2112;
      v94 = v48;
      _os_log_impl(&dword_2218F0000, v43, OS_LOG_TYPE_ERROR, "%{public}@Could not find matching outgoingInvitation for idsIdentifier %@ homeIdentifier %@ to handle accept.", buf, 0x20u);

      v10 = v47;
      v14 = v46;

      v12 = v78;
      v15 = v82;
    }

    objc_autoreleasePoolPop(v41);
    v16 = 0;
    goto LABEL_19;
  }
  v80 = v14;
  v81 = v15;
  if (!v16 && v17)
  {
    v18 = (void *)MEMORY[0x227676638]();
    v19 = self;
    HMFGetOSLogHandle();
    v20 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v20, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v10, "UUIDString");
      v72 = v10;
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v13, "UUIDString");
      v69 = v18;
      v23 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(0, "idsInvitationUUID");
      v76 = v13;
      v24 = v12;
      v25 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v25, "UUIDString");
      v26 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138544130;
      v90 = v21;
      v91 = 2112;
      v92 = v22;
      v93 = 2112;
      v94 = v23;
      v95 = 2112;
      v96 = v26;
      _os_log_impl(&dword_2218F0000, v20, OS_LOG_TYPE_INFO, "%{public}@Could not find matching outgoingInvitation for idsIdentifier %@, but found one for homeIdentifier %@ with idsIdentifier %@. Using homeIdentifier accept invite.", buf, 0x2Au);

      v12 = v24;
      v13 = v76;

      v18 = v69;
      v10 = v72;

    }
    objc_autoreleasePoolPop(v18);
    v16 = v87;
    v15 = v81;
  }
  objc_msgSend((id)v16, "identifier");
  v27 = (void *)objc_claimAutoreleasedReturnValue();
  v28 = objc_msgSend(v27, "hmf_isEqualToUUID:", v13);

  if ((v28 & 1) == 0)
  {
    v49 = (void *)MEMORY[0x227676638]();
    v50 = self;
    HMFGetOSLogHandle();
    v51 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v51, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v52 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v10, "UUIDString");
      v74 = v10;
      v53 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend((id)v16, "identifier");
      v71 = v49;
      v54 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v54, "UUIDString");
      v55 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v13, "UUIDString");
      v79 = v13;
      v56 = v12;
      v57 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138544130;
      v90 = v52;
      v91 = 2112;
      v92 = v53;
      v93 = 2112;
      v94 = v55;
      v95 = 2112;
      v96 = v57;
      _os_log_impl(&dword_2218F0000, v51, OS_LOG_TYPE_ERROR, "%{public}@Found matching outgoingInvitation for idsIdentifier %@, but homeIdentifier on IDS invitation: %@ did not match the one of the found invitation %@ to handle accept.", buf, 0x2Au);

      v49 = v71;
      v12 = v56;
      v13 = v79;

      v10 = v74;
    }

    objc_autoreleasePoolPop(v49);
    v14 = v80;
    v15 = v81;
LABEL_19:
    v39 = (void *)v83;
    goto LABEL_26;
  }
  v77 = v12;
  objc_msgSend(v11, "hmf_stringForKey:", CFSTR("HMDHomeInvitationShareURLKey"));
  v29 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x24BDBCF48], "URLWithString:", v29);
  v70 = (void *)objc_claimAutoreleasedReturnValue();
  if (v29)
  {
    v66 = v29;
    objc_msgSend(v11, "hmf_dataForKey:", CFSTR("HMDHomeInvitationShareTokenKey"));
    v30 = objc_claimAutoreleasedReturnValue();
    v31 = (void *)MEMORY[0x24BDD1620];
    objc_msgSend(MEMORY[0x24BDBCF20], "setWithObject:", objc_opt_class());
    v32 = (void *)objc_claimAutoreleasedReturnValue();
    v88 = 0;
    v67 = (void *)v30;
    objc_msgSend(v31, "_strictlyUnarchivedObjectOfClasses:fromData:error:", v32, v30, &v88);
    v33 = objc_claimAutoreleasedReturnValue();
    v34 = v88;

    if (v34)
    {
      v73 = v10;
      v35 = (void *)MEMORY[0x227676638]();
      v36 = self;
      HMFGetOSLogHandle();
      v37 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v37, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v38 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        v90 = v38;
        v91 = 2112;
        v92 = v34;
        _os_log_impl(&dword_2218F0000, v37, OS_LOG_TYPE_ERROR, "%{public}@Unarchive share token due to error %@", buf, 0x16u);

      }
      objc_autoreleasePoolPop(v35);
      v10 = v73;
      v12 = v77;
      v39 = (void *)v83;
      v40 = (void *)v33;
      v29 = v66;
    }
    else
    {
      v12 = v77;
      +[HMDAccountHandle accountHandleForDestination:](HMDAccountHandle, "accountHandleForDestination:", v77);
      v64 = (void *)objc_claimAutoreleasedReturnValue();
      v65 = self;
      v39 = (void *)v83;
      -[HMDHome _handleUpdateRequestForHomeInvitation:controllerPublicKey:controllerUsername:invitationState:presenceAuthStatus:preferredUserID:fromHandle:fromAddress:fromMergeID:reverseShareURL:reverseShareToken:issuerPublicKeyER:message:messageResponseHandler:](v65, "_handleUpdateRequestForHomeInvitation:controllerPublicKey:controllerUsername:invitationState:presenceAuthStatus:preferredUserID:fromHandle:fromAddress:fromMergeID:reverseShareURL:reverseShareToken:issuerPublicKeyER:message:messageResponseHandler:", v16, v80, v83, 3, v85, v84, v64, v77, v86, v70, v33, v81, 0, &__block_literal_global_1318);

      v40 = (void *)v33;
      v29 = v66;
    }

    v14 = v80;
    v15 = v81;
  }
  else
  {
    v58 = (void *)MEMORY[0x227676638]();
    v59 = self;
    HMFGetOSLogHandle();
    v60 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v60, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v68 = v58;
      v61 = (void *)objc_claimAutoreleasedReturnValue();
      -[HMDHome name](v59, "name");
      v75 = v10;
      v62 = (void *)objc_claimAutoreleasedReturnValue();
      -[HMDHome uuid](v59, "uuid");
      v63 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543874;
      v90 = v61;
      v91 = 2112;
      v92 = v62;
      v93 = 2112;
      v94 = v63;
      _os_log_impl(&dword_2218F0000, v60, OS_LOG_TYPE_ERROR, "%{public}@Share URL is missing from invite for home %@/%@", buf, 0x20u);

      v15 = v81;
      v10 = v75;

      v58 = v68;
    }

    objc_autoreleasePoolPop(v58);
    v12 = v77;
    v14 = v80;
    v39 = (void *)v83;
  }

LABEL_26:
}

- (void)_processUnacceptReverseShareAccessForUsers
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t i;
  void *v10;
  void *v11;
  void *v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  HMDHome *v17;
  NSObject *v18;
  id v19;
  void *v20;
  id v21;
  void *v22;
  HMDHome *v23;
  NSObject *v24;
  void *v25;
  void *v26;
  id obj;
  void *v28;
  _QWORD v29[5];
  id v30;
  _QWORD v31[5];
  id v32;
  __int128 *v33;
  _QWORD *v34;
  id v35;
  _QWORD v36[5];
  id v37;
  HMDHome *v38;
  __int128 *v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44;
  id location;
  _QWORD v46[3];
  char v47;
  uint8_t buf[4];
  id v49;
  __int16 v50;
  void *v51;
  __int128 v52;
  uint64_t v53;
  uint64_t (*v54)(uint64_t, uint64_t);
  void (*v55)(uint64_t);
  id v56;
  _BYTE v57[128];
  uint64_t v58;

  v58 = *MEMORY[0x24BDAC8D0];
  if (-[HMDHome isCurrentDeviceConfirmedPrimaryResident](self, "isCurrentDeviceConfirmedPrimaryResident"))
  {
    v46[0] = 0;
    v46[1] = v46;
    v46[2] = 0x2020000000;
    v47 = 0;
    objc_initWeak(&location, self);
    objc_msgSend(MEMORY[0x24BE3F180], "futureWithNoValue");
    v28 = (void *)objc_claimAutoreleasedReturnValue();
    v3 = objc_alloc(MEMORY[0x24BE3F168]);
    -[HMDHome workQueue](self, "workQueue");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    v26 = (void *)objc_msgSend(v3, "initWithQueue:", v4);

    v44 = _HMFThreadLocalAsyncContextPush();
    -[HMDHome home](self, "home");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "usersSupportingPresence");
    v6 = (void *)objc_claimAutoreleasedReturnValue();

    v42 = 0u;
    v43 = 0u;
    v40 = 0u;
    v41 = 0u;
    obj = v6;
    v7 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v40, v57, 16);
    if (v7)
    {
      v8 = *(_QWORD *)v41;
      do
      {
        for (i = 0; i != v7; ++i)
        {
          if (*(_QWORD *)v41 != v8)
            objc_enumerationMutation(obj);
          v10 = *(void **)(*((_QWORD *)&v40 + 1) + 8 * i);
          if ((objc_msgSend(v10, "isOwner") & 1) == 0)
          {
            *(_QWORD *)&v52 = 0;
            *((_QWORD *)&v52 + 1) = &v52;
            v53 = 0x3032000000;
            v54 = __Block_byref_object_copy__14094;
            v55 = __Block_byref_object_dispose__14095;
            v56 = 0;
            -[HMDHome backingStore](self, "backingStore");
            v11 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v11, "context");
            v12 = (void *)objc_claimAutoreleasedReturnValue();

            v36[0] = MEMORY[0x24BDAC760];
            v36[1] = 3221225472;
            v36[2] = __53__HMDHome__processUnacceptReverseShareAccessForUsers__block_invoke;
            v36[3] = &unk_24E79B5F8;
            v36[4] = v10;
            v13 = v12;
            v37 = v13;
            v38 = self;
            v39 = &v52;
            v14 = objc_msgSend(v13, "unsafeSynchronousBlock:", v36);
            if (*(_QWORD *)(*((_QWORD *)&v52 + 1) + 40))
            {
              v31[0] = MEMORY[0x24BDAC760];
              v31[1] = 3221225472;
              v31[2] = __53__HMDHome__processUnacceptReverseShareAccessForUsers__block_invoke_1319;
              v31[3] = &unk_24E776980;
              objc_copyWeak(&v35, &location);
              v33 = &v52;
              v31[4] = v10;
              v32 = v13;
              v34 = v46;
              objc_msgSend(v28, "then:", v31);
              v15 = objc_claimAutoreleasedReturnValue();

              objc_destroyWeak(&v35);
              v28 = (void *)v15;
            }
            else
            {
              v16 = (void *)MEMORY[0x227676638](v14);
              v17 = self;
              HMFGetOSLogHandle();
              v18 = (id)objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG))
              {
                HMFGetLogIdentifier();
                v19 = (id)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v10, "uuid");
                v20 = (void *)objc_claimAutoreleasedReturnValue();
                *(_DWORD *)buf = 138543618;
                v49 = v19;
                v50 = 2112;
                v51 = v20;
                _os_log_impl(&dword_2218F0000, v18, OS_LOG_TYPE_DEBUG, "%{public}@Unable to find user with UUID %@", buf, 0x16u);

              }
              objc_autoreleasePoolPop(v16);
            }

            _Block_object_dispose(&v52, 8);
          }
        }
        v7 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v40, v57, 16);
      }
      while (v7);
    }

    v29[0] = MEMORY[0x24BDAC760];
    v29[1] = 3221225472;
    v29[2] = __53__HMDHome__processUnacceptReverseShareAccessForUsers__block_invoke_1324;
    v29[3] = &unk_24E7769A8;
    objc_copyWeak(&v30, &location);
    v29[4] = v46;
    v21 = (id)objc_msgSend(v28, "then:", v29);
    objc_destroyWeak(&v30);

    _HMFThreadLocalAsyncContextPop();
    objc_destroyWeak(&location);
    _Block_object_dispose(v46, 8);
  }
  else
  {
    v22 = (void *)MEMORY[0x227676638]();
    v23 = self;
    HMFGetOSLogHandle();
    v24 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v24, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v25 = (void *)objc_claimAutoreleasedReturnValue();
      LODWORD(v52) = 138543362;
      *(_QWORD *)((char *)&v52 + 4) = v25;
      _os_log_impl(&dword_2218F0000, v24, OS_LOG_TYPE_INFO, "%{public}@Will not try to accept reverse shares because this is not longer the primary resident", (uint8_t *)&v52, 0xCu);

    }
    objc_autoreleasePoolPop(v22);
  }
}

- (void)_handleUpdateRequestForHomeInvitation:(id)a3 controllerPublicKey:(id)a4 controllerUsername:(id)a5 invitationState:(int64_t)a6 presenceAuthStatus:(id)a7 preferredUserID:(id)a8 fromHandle:(id)a9 fromAddress:(id)a10 fromMergeID:(id)a11 reverseShareURL:(id)a12 reverseShareToken:(id)a13 issuerPublicKeyER:(id)a14 message:(id)a15 messageResponseHandler:(id)a16
{
  id v20;
  id v21;
  id v22;
  id v23;
  id v24;
  void *v25;
  id v26;
  id v27;
  id v28;
  void (**v29)(id, void *, _QWORD);
  void *v30;
  HMDHome *v31;
  NSObject *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  HMDHome *v37;
  NSObject *v38;
  void *v39;
  void *v40;
  int v41;
  const __CFString *v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  void *v47;
  HMDHome *v48;
  NSObject *v49;
  id v50;
  id v51;
  id v52;
  id v53;
  id v54;
  void *v55;
  void *v56;
  HMDHome *v57;
  NSObject *v58;
  id v59;
  id v60;
  id v61;
  id v62;
  id v63;
  void *v64;
  void *v65;
  void *v66;
  HMDHome *v67;
  NSObject *v68;
  id v69;
  id v70;
  id v71;
  void *v72;
  void *v73;
  id v74;
  id v75;
  void *v76;
  void *v77;
  __CFString *v78;
  void *v79;
  HMDHome *v80;
  NSObject *v81;
  void *v82;
  id v83;
  void *v84;
  uint64_t v85;
  void *v86;
  void *v87;
  void *v88;
  void *v89;
  void *v90;
  uint64_t v91;
  id v92;
  void *v93;
  id v94;
  uint64_t v95;
  void *v96;
  __CFString *v97;
  __CFString *v98;
  void *v99;
  void *v100;
  void *v101;
  void *v102;
  void *v103;
  void *v104;
  id v105;
  void *v106;
  id v107;
  __CFString *v108;
  id v109;
  id v110;
  void *v111;
  id v112;
  id v113;
  id v114;
  id v115;
  id v117;
  void *v118;
  void *v119;
  id v120;
  id v121;
  id v122;
  void *context;
  void *contexta;
  void *contextb;
  void *v126;
  id v128;
  id v129;
  id v130;
  id v131;
  _QWORD v132[5];
  id v133;
  _QWORD v134[5];
  id v135;
  _QWORD v136[4];
  id v137;
  id v138;
  id v139;
  id v140;
  HMDHome *v141;
  id v142;
  id v143;
  id v144;
  id v145;
  id v146;
  id v147;
  id v148;
  void (**v149)(id, void *, _QWORD);
  uint8_t buf[4];
  void *v151;
  __int16 v152;
  void *v153;
  __int16 v154;
  const __CFString *v155;
  uint64_t v156;

  v156 = *MEMORY[0x24BDAC8D0];
  v20 = a3;
  v131 = a4;
  v21 = a5;
  v130 = a7;
  v22 = a8;
  v23 = a9;
  v24 = a10;
  v128 = a11;
  v25 = v20;
  v26 = a12;
  v129 = a13;
  v27 = a14;
  v28 = a15;
  v29 = (void (**)(id, void *, _QWORD))a16;
  v126 = v22;
  if (objc_msgSend(v25, "isExpired"))
  {
    context = v25;
    v30 = (void *)MEMORY[0x227676638]();
    v31 = self;
    HMFGetOSLogHandle();
    v32 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v32, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v120 = v26;
      v112 = v24;
      v33 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(context, "identifier");
      v34 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v151 = v33;
      v152 = 2112;
      v153 = v34;
      _os_log_impl(&dword_2218F0000, v32, OS_LOG_TYPE_INFO, "%{public}@Invitation (%@) has already expired, invitee cannot accept or decline", buf, 0x16u);

      v24 = v112;
      v26 = v120;
    }

    objc_autoreleasePoolPop(v30);
    objc_msgSend(MEMORY[0x24BDD1540], "errorWithDomain:code:userInfo:", *MEMORY[0x24BDD5BD8], 1006, 0);
    v35 = (void *)objc_claimAutoreleasedReturnValue();
    if (v29)
      v29[2](v29, v35, 0);

LABEL_48:
    v25 = context;
    goto LABEL_49;
  }
  if (objc_msgSend(v25, "responseReceived"))
  {
    v117 = v27;
    v36 = v25;
    contexta = (void *)MEMORY[0x227676638]();
    v37 = self;
    HMFGetOSLogHandle();
    v38 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v38, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v121 = v26;
      v113 = v24;
      v39 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v36, "identifier");
      v40 = (void *)objc_claimAutoreleasedReturnValue();
      v41 = objc_msgSend(v36, "isDeclined");
      v42 = CFSTR("accepted");
      *(_DWORD *)buf = 138543874;
      v151 = v39;
      v152 = 2112;
      if (v41)
        v42 = CFSTR("declined");
      v153 = v40;
      v154 = 2112;
      v155 = v42;
      _os_log_impl(&dword_2218F0000, v38, OS_LOG_TYPE_INFO, "%{public}@Invitation (%@) has already been %@, invitee cannot accept or decline", buf, 0x20u);

      v24 = v113;
      v26 = v121;
    }

    objc_autoreleasePoolPop(contexta);
    v43 = (void *)MEMORY[0x24BDD1540];
    v44 = *MEMORY[0x24BDD5BD8];
    v25 = v36;
    if (objc_msgSend(v36, "isDeclined"))
      v45 = 1008;
    else
      v45 = 1007;
    objc_msgSend(v43, "errorWithDomain:code:userInfo:", v44, v45, 0);
    v46 = (void *)objc_claimAutoreleasedReturnValue();
    if (v29)
      v29[2](v29, v46, 0);

    v27 = v117;
    goto LABEL_49;
  }
  if ((unint64_t)(a6 - 3) > 1)
  {
    context = v25;
    v114 = v24;
    v66 = (void *)MEMORY[0x227676638]();
    v67 = self;
    HMFGetOSLogHandle();
    v68 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v68, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v110 = v28;
      v69 = v27;
      v70 = v26;
      v71 = v23;
      v72 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v151 = v72;
      v152 = 2048;
      v153 = (void *)a6;
      _os_log_impl(&dword_2218F0000, v68, OS_LOG_TYPE_INFO, "%{public}@Failed to update invite state since the value %ld was incorrect", buf, 0x16u);

      v23 = v71;
      v26 = v70;
      v27 = v69;
      v28 = v110;
    }

    objc_autoreleasePoolPop(v66);
    objc_msgSend(MEMORY[0x24BDD1540], "errorWithDomain:code:userInfo:", *MEMORY[0x24BDD5BD8], 43, 0);
    v73 = (void *)objc_claimAutoreleasedReturnValue();
    if (v29)
      v29[2](v29, v73, 0);

    v24 = v114;
    goto LABEL_48;
  }
  if (a6 != 3)
  {
    v107 = v21;
    v74 = v23;
    v75 = v27;
    v115 = v24;
    v76 = v25;
    if ((shouldLogPrivateInformation() & 1) != 0)
    {
      objc_msgSend(v25, "user");
      v77 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v77, "userID");
      v108 = (__CFString *)objc_claimAutoreleasedReturnValue();

    }
    else
    {
      v108 = CFSTR("...");
      v78 = CFSTR("...");
    }
    v111 = v28;
    v118 = v75;
    v122 = v26;
    v106 = v74;
    v79 = (void *)MEMORY[0x227676638](v78);
    v80 = self;
    HMFGetOSLogHandle();
    v81 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v81, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v82 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v151 = v82;
      v152 = 2112;
      v153 = v108;
      _os_log_impl(&dword_2218F0000, v81, OS_LOG_TYPE_INFO, "%{public}@User %@ declined invite", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v79);
    v83 = objc_alloc(MEMORY[0x24BE3F168]);
    -[HMDHome workQueue](v80, "workQueue");
    v84 = (void *)objc_claimAutoreleasedReturnValue();
    v85 = objc_msgSend(v83, "initWithQueue:", v84);

    -[HMDHome homeManager](v80, "homeManager");
    v86 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v86, "homeOwnerCloudShareManager");
    v87 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v76, "user");
    v88 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v87, "revokeAccessForUser:home:", v88, v80);
    v89 = (void *)objc_claimAutoreleasedReturnValue();
    v90 = v76;
    v91 = MEMORY[0x24BDAC760];
    v134[0] = MEMORY[0x24BDAC760];
    v134[1] = 3221225472;
    v134[2] = __257__HMDHome__handleUpdateRequestForHomeInvitation_controllerPublicKey_controllerUsername_invitationState_presenceAuthStatus_preferredUserID_fromHandle_fromAddress_fromMergeID_reverseShareURL_reverseShareToken_issuerPublicKeyER_message_messageResponseHandler___block_invoke_1337;
    v134[3] = &unk_24E797BE8;
    v134[4] = v80;
    context = v90;
    v135 = v90;
    v132[0] = v91;
    v132[1] = 3221225472;
    v132[2] = __257__HMDHome__handleUpdateRequestForHomeInvitation_controllerPublicKey_controllerUsername_invitationState_presenceAuthStatus_preferredUserID_fromHandle_fromAddress_fromMergeID_reverseShareURL_reverseShareToken_issuerPublicKeyER_message_messageResponseHandler___block_invoke_1338;
    v132[3] = &unk_24E79B210;
    v132[4] = v80;
    v92 = v135;
    v133 = v92;
    v93 = (void *)v85;
    v94 = (id)objc_msgSend(v89, "inContext:then:orRecover:", v85, v134, v132);

    v28 = v111;
    objc_msgSend(v111, "name");
    v95 = objc_claimAutoreleasedReturnValue();
    v96 = (void *)v95;
    v97 = CFSTR("UpdateOutgoingInvitationToAccept");
    if (v95)
      v97 = (__CFString *)v95;
    v98 = v97;

    -[HMDHome backingStore](v80, "backingStore");
    v99 = (void *)objc_claimAutoreleasedReturnValue();
    +[HMDBackingStoreTransactionOptions defaultXPCOptions](HMDBackingStoreTransactionOptions, "defaultXPCOptions");
    v100 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v99, "transaction:options:", v98, v100);
    v101 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v92, "emptyModelObjectWithChangeType:", 2);
    v102 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD16E0], "numberWithInteger:", a6);
    v103 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v102, "setInvitationState:", v103);

    if (v111)
      objc_msgSend(v101, "add:withMessage:", v102, v111);
    else
      objc_msgSend(v101, "add:", v102);
    v23 = v106;
    v21 = v107;
    v24 = v115;
    v27 = v118;
    v26 = v122;
    objc_msgSend(v101, "run");

    goto LABEL_48;
  }
  if (!v131 || !v21)
  {
    objc_msgSend(MEMORY[0x24BDD1540], "errorWithDomain:code:userInfo:", *MEMORY[0x24BDD5BD8], 3, 0);
    v65 = (void *)objc_claimAutoreleasedReturnValue();
    if (!v29)
    {
LABEL_38:

      goto LABEL_49;
    }
LABEL_37:
    v29[2](v29, v65, 0);
    goto LABEL_38;
  }
  v109 = v28;
  if (-[HMDHome _doesInvitedUserHasTheSamePairingIdentityAsOwner:](self, "_doesInvitedUserHasTheSamePairingIdentityAsOwner:", v21))
  {
    contextb = v25;
    v47 = (void *)MEMORY[0x227676638]();
    v48 = self;
    HMFGetOSLogHandle();
    v49 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v49, OS_LOG_TYPE_FAULT))
    {
      HMFGetLogIdentifier();
      v50 = v27;
      v51 = v26;
      v52 = v23;
      v53 = v21;
      v54 = v24;
      v55 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v151 = v55;
      _os_log_impl(&dword_2218F0000, v49, OS_LOG_TYPE_FAULT, "%{public}@Owner and shared user has the same pairing identities.", buf, 0xCu);

      v24 = v54;
      v21 = v53;
      v23 = v52;
      v26 = v51;
      v27 = v50;
      v28 = v109;
    }

    objc_autoreleasePoolPop(v47);
    v56 = (void *)MEMORY[0x227676638]();
    v57 = v48;
    HMFGetOSLogHandle();
    v58 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v58, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v59 = v27;
      v60 = v26;
      v61 = v23;
      v62 = v21;
      v63 = v24;
      v64 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v151 = v64;
      v152 = 2112;
      v153 = &unk_24E96A598;
      _os_log_impl(&dword_2218F0000, v58, OS_LOG_TYPE_ERROR, "%{public}@Owner and shared user has the same pairing identities : %@", buf, 0x16u);

      v24 = v63;
      v21 = v62;
      v23 = v61;
      v26 = v60;
      v27 = v59;
      v28 = v109;
    }

    objc_autoreleasePoolPop(v56);
    v25 = contextb;
    if (v29)
    {
      objc_msgSend(MEMORY[0x24BDD1540], "hmPrivateErrorWithCode:", 2722);
      v65 = (void *)objc_claimAutoreleasedReturnValue();
      goto LABEL_37;
    }
  }
  else
  {
    v119 = v27;
    if (v22)
    {
      +[HMDAccountHandleFormatter defaultFormatter](HMDAccountHandleFormatter, "defaultFormatter");
      v104 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v104, "accountHandleFromString:", v22);
      v22 = (id)objc_claimAutoreleasedReturnValue();

    }
    v136[0] = MEMORY[0x24BDAC760];
    v136[1] = 3221225472;
    v136[2] = __257__HMDHome__handleUpdateRequestForHomeInvitation_controllerPublicKey_controllerUsername_invitationState_presenceAuthStatus_preferredUserID_fromHandle_fromAddress_fromMergeID_reverseShareURL_reverseShareToken_issuerPublicKeyER_message_messageResponseHandler___block_invoke;
    v136[3] = &unk_24E776A20;
    v149 = v29;
    v137 = v22;
    v138 = v25;
    v139 = v131;
    v140 = v21;
    v141 = self;
    v142 = v128;
    v143 = v26;
    v144 = v129;
    v145 = v23;
    v146 = v24;
    v27 = v119;
    v147 = v119;
    v148 = v130;
    v105 = v22;
    __authenticateAcceptedOutgoingInvitation(self, v138, v145, v105, v136);

  }
LABEL_49:

}

- (void)_handleAddUserModel:(id)a3 message:(id)a4
{
  id v6;
  id v7;
  void *v8;
  void *v9;
  HMDResidentUser *v10;
  void *v11;
  HMDHome *v12;
  NSObject *v13;
  void *v14;
  __CFString *v15;
  void *v16;
  HMDHome *v17;
  NSObject *v18;
  void *v19;
  __CFString *v20;
  void *v21;
  id v22;
  void *v23;
  id v24;
  void *v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t i;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  int v35;
  HMDHome *v36;
  char isKindOfClass;
  HMDResidentUser *v38;
  void *v39;
  HMDHome *v40;
  NSObject *v41;
  void *v42;
  __CFString *v43;
  void *v44;
  void *v45;
  HMDHome *v46;
  NSObject *v47;
  void *v48;
  __CFString *v49;
  void *v50;
  void *v51;
  void *v52;
  void *v53;
  void *v54;
  void *v55;
  void *v56;
  void *v57;
  __CFString *v58;
  void *v59;
  HMDHome *v60;
  NSObject *v61;
  void *v62;
  void *v63;
  void *v64;
  void *v65;
  void *v66;
  void *v67;
  void *v68;
  HMDHome *v69;
  NSObject *v70;
  void *v71;
  void *v72;
  void *v73;
  __CFString *v74;
  void *v75;
  HMDHome *v76;
  NSObject *v77;
  void *v78;
  __CFString *v79;
  id v80;
  id v81;
  void *v82;
  void *v83;
  HMDHome *v84;
  void *v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  _QWORD v90[3];
  _QWORD v91[3];
  uint8_t v92[128];
  uint8_t buf[4];
  void *v94;
  __int16 v95;
  __CFString *v96;
  __int16 v97;
  HMDResidentUser *v98;
  uint64_t v99;

  v99 = *MEMORY[0x24BDAC8D0];
  v6 = a3;
  v7 = a4;
  -[HMDHome usersIncludingPendingUsers:](self, "usersIncludingPendingUsers:", 1);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "uuid");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v85 = v8;
  objc_msgSend(v8, "hmf_firstObjectWithUUID:", v9);
  v10 = (HMDResidentUser *)objc_claimAutoreleasedReturnValue();

  v11 = (void *)MEMORY[0x227676638]();
  v12 = self;
  HMFGetOSLogHandle();
  v13 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "debugString:", 1);
    v15 = (__CFString *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543618;
    v94 = v14;
    v95 = 2112;
    v96 = v15;
    _os_log_impl(&dword_2218F0000, v13, OS_LOG_TYPE_INFO, "%{public}@Adding HMDUserModel: %@", buf, 0x16u);

  }
  objc_autoreleasePoolPop(v11);
  if (!v10)
  {
    v84 = v12;
    -[HMDHome homeManager](v12, "homeManager");
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    v22 = v6;
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
      v23 = v22;
    else
      v23 = 0;
    v24 = v23;

    if (v24)
    {
      v10 = -[HMDResidentUser initWithModelObject:]([HMDResidentUser alloc], "initWithModelObject:", v24);
    }
    else
    {
      v10 = -[HMDUser initWithModelObject:]([HMDUser alloc], "initWithModelObject:", v22);
      -[HMDResidentUser refreshDisplayName](v10, "refreshDisplayName");
      -[HMDResidentUser userID](v10, "userID");
      v25 = (void *)objc_claimAutoreleasedReturnValue();

      if (!v25)
      {
        if ((shouldLogPrivateInformation() & 1) != 0)
        {
          objc_msgSend(v22, "userID");
          v49 = (__CFString *)objc_claimAutoreleasedReturnValue();
        }
        else
        {
          v49 = CFSTR("...");
          v74 = CFSTR("...");
        }
        v75 = (void *)MEMORY[0x227676638]();
        v76 = v12;
        HMFGetOSLogHandle();
        v77 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v77, OS_LOG_TYPE_ERROR))
        {
          HMFGetLogIdentifier();
          v78 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543618;
          v94 = v78;
          v95 = 2112;
          v96 = v49;
          _os_log_impl(&dword_2218F0000, v77, OS_LOG_TYPE_ERROR, "%{public}@User created from model no longer has userID, model userID invalid %@", buf, 0x16u);

        }
        objc_autoreleasePoolPop(v75);
        v24 = 0;
LABEL_55:

        goto LABEL_56;
      }
    }
    if (v10)
    {
      v81 = v24;
      v82 = v7;
      v83 = v21;
      v80 = v6;
      -[HMDResidentUser configureWithHome:](v10, "configureWithHome:", v12);
      -[HMDUser updateRestrictedGuestSettingsFromWorkingStoreIfNeeded](v10, "updateRestrictedGuestSettingsFromWorkingStoreIfNeeded");
      -[HMDHome _addUserToContainer:](v12, "_addUserToContainer:", v10);
      -[HMDHome _cleanRemovedUsers:](v12, "_cleanRemovedUsers:", v10);
      v88 = 0u;
      v89 = 0u;
      v86 = 0u;
      v87 = 0u;
      -[HMDHome outgoingInvitations](v12, "outgoingInvitations");
      v26 = (void *)objc_claimAutoreleasedReturnValue();
      v27 = objc_msgSend(v26, "countByEnumeratingWithState:objects:count:", &v86, v92, 16);
      if (v27)
      {
        v28 = v27;
        v29 = *(_QWORD *)v87;
        while (2)
        {
          for (i = 0; i != v28; ++i)
          {
            if (*(_QWORD *)v87 != v29)
              objc_enumerationMutation(v26);
            v31 = *(void **)(*((_QWORD *)&v86 + 1) + 8 * i);
            objc_msgSend(v31, "user");
            v32 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v32, "pairingIdentity");
            v33 = (void *)objc_claimAutoreleasedReturnValue();
            -[HMDUser pairingIdentity](v10, "pairingIdentity");
            v34 = (void *)objc_claimAutoreleasedReturnValue();
            v35 = objc_msgSend(v33, "isEqual:", v34);

            if (v35)
            {
              objc_msgSend(v31, "setUser:", v10);
              goto LABEL_24;
            }
          }
          v28 = objc_msgSend(v26, "countByEnumeratingWithState:objects:count:", &v86, v92, 16);
          if (v28)
            continue;
          break;
        }
      }
LABEL_24:

      v36 = v84;
      -[HMDHome _addUserToIdentityRegistry:](v84, "_addUserToIdentityRegistry:", v10);
      v10 = v10;
      objc_opt_class();
      isKindOfClass = objc_opt_isKindOfClass();
      if ((isKindOfClass & 1) != 0)
        v38 = v10;
      else
        v38 = 0;
      v79 = v38;

      if ((isKindOfClass & 1) != 0)
      {
        v39 = (void *)MEMORY[0x227676638](-[HMDHome _updateConfigurationStateForResidentDevice:desiredConfigState:message:](v84, "_updateConfigurationStateForResidentDevice:desiredConfigState:message:", v10, 2, 0));
        v40 = v84;
        HMFGetOSLogHandle();
        v41 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v41, OS_LOG_TYPE_INFO))
        {
          HMFGetLogIdentifier();
          v42 = (void *)objc_claimAutoreleasedReturnValue();
          -[HMDResidentUser userID](v10, "userID");
          v43 = (__CFString *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543618;
          v94 = v42;
          v95 = 2112;
          v96 = v43;
          _os_log_impl(&dword_2218F0000, v41, OS_LOG_TYPE_INFO, "%{public}@Removing resident user %@ from unassociated list", buf, 0x16u);

        }
        objc_autoreleasePoolPop(v39);
        -[HMDResidentUser userID](v10, "userID");
        v44 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v83, "removeFromUnassociatedPeers:home:", v44, v40);

        v45 = (void *)MEMORY[0x227676638]();
        v46 = v40;
        HMFGetOSLogHandle();
        v47 = objc_claimAutoreleasedReturnValue();
        v6 = v80;
        if (os_log_type_enabled(v47, OS_LOG_TYPE_DEBUG))
        {
          HMFGetLogIdentifier();
          v48 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543362;
          v94 = v48;
          _os_log_impl(&dword_2218F0000, v47, OS_LOG_TYPE_DEBUG, "%{public}@Add resident device", buf, 0xCu);

        }
        objc_autoreleasePoolPop(v45);
      }
      else
      {
        v90[0] = CFSTR("kUserUUIDKey");
        -[HMDUser uuid](v10, "uuid");
        v50 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v50, "UUIDString");
        v51 = (void *)objc_claimAutoreleasedReturnValue();
        v91[0] = v51;
        v90[1] = CFSTR("kUserIDKey");
        -[HMDResidentUser userID](v10, "userID");
        v52 = (void *)objc_claimAutoreleasedReturnValue();
        v91[1] = v52;
        v90[2] = CFSTR("kUserDisplayNameKey");
        -[HMDResidentUser displayName](v10, "displayName");
        v53 = (void *)objc_claimAutoreleasedReturnValue();
        v91[2] = v53;
        objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v91, v90, 3);
        v54 = (void *)objc_claimAutoreleasedReturnValue();

        v55 = (void *)objc_msgSend(v54, "mutableCopy");
        -[HMDResidentUser userID](v10, "userID");
        v56 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v55, "setObject:forKeyedSubscript:", v56, CFSTR("kUserIDKey"));

        objc_msgSend(v82, "identifier");
        v57 = (void *)objc_claimAutoreleasedReturnValue();
        if (v57)
          objc_msgSend(v82, "identifier");
        else
          objc_msgSend(MEMORY[0x24BDD1880], "UUID");
        v63 = (void *)objc_claimAutoreleasedReturnValue();
        v6 = v80;

        objc_msgSend(MEMORY[0x24BE3F1B0], "entitledMessageWithName:identifier:messagePayload:", CFSTR("kUserAddedNotificationKey"), v63, v55);
        v64 = (void *)objc_claimAutoreleasedReturnValue();
        v36 = v84;
        -[HMDHome msgDispatcher](v84, "msgDispatcher");
        v65 = (void *)objc_claimAutoreleasedReturnValue();
        -[HMDHome uuid](v84, "uuid");
        v66 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v65, "sendMessage:target:", v64, v66);

      }
      v7 = v82;
      v21 = v83;
      v24 = v81;
      v49 = v79;
      if (-[HMDUser isCurrentUser](v10, "isCurrentUser"))
      {
        -[HMDHome walletKeyManager](v36, "walletKeyManager");
        v67 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v67, "didAddCurrentUserWithUUID:", v10);

        if (!-[HMDHome isOwnerUser](v36, "isOwnerUser"))
        {
          v68 = (void *)MEMORY[0x227676638]();
          v69 = v36;
          HMFGetOSLogHandle();
          v70 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v70, OS_LOG_TYPE_INFO))
          {
            HMFGetLogIdentifier();
            v71 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 138543362;
            v94 = v71;
            _os_log_impl(&dword_2218F0000, v70, OS_LOG_TYPE_INFO, "%{public}@Calling replaceWalletKeyAfterHH2MigrationIfNecessary because the current shared user has been synced from the primary resident", buf, 0xCu);

          }
          objc_autoreleasePoolPop(v68);
          -[HMDHome walletKeyManager](v69, "walletKeyManager");
          v72 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v72, "replaceWalletKeyAfterHH2MigrationIfNecessary");

          v21 = v83;
          v24 = v81;
        }
      }
      objc_msgSend(v82, "transactionResult");
      v73 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v73, "markChanged");

    }
    else
    {
      if ((shouldLogPrivateInformation() & 1) != 0)
      {
        objc_msgSend(v22, "userID");
        v49 = (__CFString *)objc_claimAutoreleasedReturnValue();
      }
      else
      {
        v49 = CFSTR("...");
        v58 = CFSTR("...");
      }
      v59 = (void *)MEMORY[0x227676638]();
      v60 = v12;
      HMFGetOSLogHandle();
      v61 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v61, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v62 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        v94 = v62;
        v95 = 2112;
        v96 = v49;
        _os_log_impl(&dword_2218F0000, v61, OS_LOG_TYPE_ERROR, "%{public}@Failed to create new user %@", buf, 0x16u);

      }
      objc_autoreleasePoolPop(v59);
      v10 = 0;
    }
    goto LABEL_55;
  }
  v16 = (void *)MEMORY[0x227676638]();
  v17 = v12;
  HMFGetOSLogHandle();
  v18 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
  {
    HMFGetLogIdentifier();
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "uuid");
    v20 = (__CFString *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543874;
    v94 = v19;
    v95 = 2112;
    v96 = v20;
    v97 = 2112;
    v98 = v10;
    _os_log_impl(&dword_2218F0000, v18, OS_LOG_TYPE_ERROR, "%{public}@HMDUserModel %@ passed as add for existing user %@", buf, 0x20u);

  }
  objc_autoreleasePoolPop(v16);
  -[HMDResidentUser transactionObjectUpdated:newValues:message:](v10, "transactionObjectUpdated:newValues:message:", 0, v6, v7);
LABEL_56:

}

- (void)_handleRemoveUserModel:(id)a3 message:(id)a4
{
  id v6;
  id v7;
  void *v8;
  HMDUser *v9;
  void *v10;
  HMDHome *v11;
  NSObject *v12;
  void *v13;
  HMDUser *currentUser;
  void *v15;
  void *v16;
  void *v17;
  HMDHome *v18;
  NSObject *v19;
  void *v20;
  void *v21;
  HMDHome *v22;
  NSObject *v23;
  void *v24;
  void *v25;
  int v26;
  void *v27;
  __int16 v28;
  void *v29;
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  v6 = a3;
  v7 = a4;
  objc_msgSend(v6, "uuid");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHome userIncludingPendingUserWithUUID:](self, "userIncludingPendingUserWithUUID:", v8);
  v9 = (HMDUser *)objc_claimAutoreleasedReturnValue();

  if (v9)
  {
    if (v9 == self->_currentUser)
    {
      v10 = (void *)MEMORY[0x227676638]();
      v11 = self;
      HMFGetOSLogHandle();
      v12 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        v26 = 138543362;
        v27 = v13;
        _os_log_impl(&dword_2218F0000, v12, OS_LOG_TYPE_ERROR, "%{public}@Attempting to remove current user", (uint8_t *)&v26, 0xCu);

      }
      objc_autoreleasePoolPop(v10);
      currentUser = self->_currentUser;
      self->_currentUser = 0;

    }
    -[HMDHome _removeUserFromContainer:](self, "_removeUserFromContainer:", v9);
    -[HMDHome usersPendingUserManagementOperations](self, "usersPendingUserManagementOperations");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v15, "removeObject:", v9);

    -[HMDUser setHome:](v9, "setHome:", 0);
    objc_msgSend(v7, "transactionResult");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v16, "markChanged");
    if (objc_msgSend(v16, "source") != 1)
    {
      v17 = (void *)MEMORY[0x227676638]();
      v18 = self;
      HMFGetOSLogHandle();
      v19 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v19, OS_LOG_TYPE_DEBUG))
      {
        HMFGetLogIdentifier();
        v20 = (void *)objc_claimAutoreleasedReturnValue();
        v26 = 138543362;
        v27 = v20;
        _os_log_impl(&dword_2218F0000, v19, OS_LOG_TYPE_DEBUG, "%{public}@Skipping remove user due to non-xpc backingstore transaction", (uint8_t *)&v26, 0xCu);

      }
      objc_autoreleasePoolPop(v17);
      objc_msgSend(v7, "respondWithPayload:", 0);
    }
  }
  else
  {
    v21 = (void *)MEMORY[0x227676638]();
    v22 = self;
    HMFGetOSLogHandle();
    v23 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v24 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v6, "uuid");
      v25 = (void *)objc_claimAutoreleasedReturnValue();
      v26 = 138543618;
      v27 = v24;
      v28 = 2112;
      v29 = v25;
      _os_log_impl(&dword_2218F0000, v23, OS_LOG_TYPE_ERROR, "%{public}@Cannot find the user with UUID %@", (uint8_t *)&v26, 0x16u);

    }
    objc_autoreleasePoolPop(v21);
    objc_msgSend(MEMORY[0x24BDD1540], "hmfErrorWithCode:", 2);
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "respondWithError:", v16);
  }

}

- (void)__handleAcceptedOutgoingInvitationResponse:(id)a3 destinationAddress:(id)a4 publicKey:(id)a5 username:(id)a6 reverseShare:(id)a7 reverseShareToken:(id)a8 issuerPublicKeyER:(id)a9 presenceAuthStatus:(id)a10 completionHandler:(id)a11
{
  id v17;
  id v18;
  __CFString *v19;
  void *v20;
  HMDHome *v21;
  NSObject *v22;
  void *v23;
  unint64_t v24;
  __CFString *v25;
  __CFString *v26;
  void *v27;
  void *v28;
  id v29;
  void *v30;
  unint64_t v31;
  void *v32;
  HMDHome *v33;
  NSObject *v34;
  void *v35;
  __CFString *v36;
  __CFString *v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  id v43;
  void *v44;
  void *v45;
  char v46;
  id v47;
  void *v48;
  void *v49;
  uint64_t v50;
  void *v51;
  void *v52;
  uint64_t v53;
  void *v54;
  void *v55;
  void *v56;
  void *v57;
  void *v58;
  void *v59;
  void *v60;
  uint64_t v61;
  id v62;
  void *v63;
  id v64;
  HMDOutgoingHomeInvitationModel *v65;
  void *v66;
  void *v67;
  HMDOutgoingHomeInvitationModel *v68;
  void *v69;
  void *v70;
  dispatch_group_t v71;
  void *v72;
  void *v73;
  void *v74;
  void *v75;
  void *v76;
  void *v77;
  void *v78;
  void *v79;
  uint64_t v80;
  id v81;
  NSObject *v82;
  void *v83;
  void *v84;
  void *v85;
  void *v86;
  void *v87;
  void *v88;
  HMDOutgoingHomeInvitationModel *v89;
  void *v90;
  void *v91;
  uint64_t v92;
  void *v93;
  HMDUserModel *v94;
  void *v95;
  void *v96;
  uint64_t v97;
  void *v98;
  void *v99;
  void *v100;
  HMDOutgoingHomeInvitationModel *v101;
  void *v102;
  void *v103;
  void *v104;
  id v105;
  void *v106;
  id v107;
  uint64_t v108;
  id v109;
  void *v110;
  void *v111;
  void *v112;
  id v113;
  id v114;
  id v115;
  id v116;
  void *v117;
  id v118;
  id v119;
  id v120;
  void *v121;
  _QWORD v122[5];
  id v123;
  _QWORD aBlock[5];
  __CFString *v125;
  dispatch_group_t v126;
  id v127;
  id v128;
  id v129;
  id v130;
  id v131;
  _QWORD v132[5];
  uint8_t buf[4];
  void *v134;
  __int16 v135;
  __CFString *v136;
  __int16 v137;
  __CFString *v138;
  uint64_t v139;

  v139 = *MEMORY[0x24BDAC8D0];
  v17 = a3;
  v115 = a4;
  v120 = a5;
  v114 = a6;
  v113 = a7;
  v119 = a8;
  v116 = a9;
  v118 = a10;
  v18 = a11;
  v121 = v17;
  objc_msgSend(v17, "user");
  v19 = (__CFString *)objc_claimAutoreleasedReturnValue();
  v20 = (void *)MEMORY[0x227676638]();
  v21 = self;
  HMFGetOSLogHandle();
  v22 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v22, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    v24 = -[__CFString privilege](v19, "privilege");
    if (v24 > 5)
      v25 = CFSTR("None");
    else
      v25 = off_24E793D90[v24];
    v26 = v25;
    *(_DWORD *)buf = 138543874;
    v134 = v23;
    v135 = 2112;
    v136 = v19;
    v137 = 2112;
    v138 = v26;
    _os_log_impl(&dword_2218F0000, v22, OS_LOG_TYPE_INFO, "%{public}@User: %@, has accepted an invitation, processing acceptance. %@", buf, 0x20u);

  }
  v117 = v18;

  objc_autoreleasePoolPop(v20);
  -[__CFString setHome:](v19, "setHome:", v21);
  -[__CFString modelObjectWithChangeType:](v19, "modelObjectWithChangeType:", 1);
  v27 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v28 = v27;
  else
    v28 = 0;
  v29 = v28;

  objc_msgSend(v17, "identifier");
  v30 = (void *)objc_claimAutoreleasedReturnValue();
  v31 = -[HMDHome pendingUserPrivilegeFromOutgoingInvitationUUID:](v21, "pendingUserPrivilegeFromOutgoingInvitationUUID:", v30);

  v32 = (void *)MEMORY[0x227676638]();
  v33 = v21;
  HMFGetOSLogHandle();
  v34 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v34, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v35 = (void *)objc_claimAutoreleasedReturnValue();
    if (v31 > 5)
      v36 = CFSTR("None");
    else
      v36 = off_24E793D90[v31];
    v37 = v36;
    *(_DWORD *)buf = 138543618;
    v134 = v35;
    v135 = 2112;
    v136 = v37;
    _os_log_impl(&dword_2218F0000, v34, OS_LOG_TYPE_INFO, "%{public}@Stored shared user privilege is : %@", buf, 0x16u);

  }
  objc_autoreleasePoolPop(v32);
  -[HMDHome pendingUsers](v33, "pendingUsers");
  v38 = (void *)objc_claimAutoreleasedReturnValue();
  -[__CFString uuid](v19, "uuid");
  v39 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v38, "hmf_firstObjectWithUUID:", v39);
  v40 = (void *)objc_claimAutoreleasedReturnValue();

  if (v40)
  {
    objc_msgSend(v29, "setObjectChangeType:", 2);
    objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedInteger:", v31);
    v41 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v29, "setPrivilege:", v41);

  }
  if (v19 && v29)
  {
    v42 = v114;
    v43 = v114;
    v44 = v113;
    if (-[__CFString isRemoteGateway](v19, "isRemoteGateway"))
    {
      v109 = v29;
      -[HMDHome keychainStore](v33, "keychainStore");
      v45 = (void *)objc_claimAutoreleasedReturnValue();
      v130 = 0;
      v131 = 0;
      v46 = objc_msgSend(v45, "getControllerPublicKey:secretKey:keyPair:username:allowCreation:error:", 0, 0, 0, &v131, 0, &v130);
      v47 = v131;
      v107 = v130;

      if ((v46 & 1) == 0)
      {
        v112 = v47;
        objc_msgSend(MEMORY[0x24BDD1540], "hmErrorWithCode:description:reason:suggestion:", 3, CFSTR("Failed to set resident pairing name"), 0, 0);
        v84 = (void *)objc_claimAutoreleasedReturnValue();
        v98 = v117;
        v102 = _Block_copy(v117);
        if (v102)
        {
          v106 = v102;
          (*((void (**)(void *, void *))v102 + 2))(v102, v84);
        }
        else
        {
          v106 = 0;
        }
        v85 = v107;
        v29 = v109;
LABEL_47:

        goto LABEL_48;
      }
      if (objc_msgSend(v47, "isEqualToString:", v43))
      {
        +[HMDDevice deviceWithDestination:](HMDDevice, "deviceWithDestination:", v115);
        v48 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v48, "identifier");
        v49 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v49, "UUIDString");
        v50 = objc_claimAutoreleasedReturnValue();
        v51 = v43;
        v52 = v40;
        v53 = v50;

        v54 = (void *)v53;
        v40 = v52;
        v43 = v54;
      }

      v29 = v109;
    }
    v108 = objc_msgSend(objc_alloc(MEMORY[0x24BE3F230]), "initWithPairingKeyData:", v120);
    v112 = (void *)objc_msgSend(objc_alloc(MEMORY[0x24BE1BBB0]), "initWithIdentifier:publicKey:privateKey:permissions:", v43, v108, 0, 0);
    objc_msgSend(v112, "hmd_dictionaryEncoding");
    v55 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v29, "setPairingIdentity:", v55);

    objc_msgSend(v118, "number");
    v56 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v29, "setPresenceAuthorizationStatus:", v56);

    if (v113)
    {
      objc_msgSend(v113, "recordID");
      v57 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v29, "setReverseShareID:", v57);

    }
    encodeRootObject();
    v58 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v29, "setReverseShareToken:", v58);

    v59 = (void *)objc_opt_class();
    -[HMDHome uniqueIDsOfAllUsers](v33, "uniqueIDsOfAllUsers");
    v60 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v59, "createUserUniqueIDForAccessoriesWithoutDuplicatingExistingIDs:", v60);
    v61 = objc_claimAutoreleasedReturnValue();

    v106 = (void *)v61;
    if (v61)
    {
      objc_msgSend(v29, "setUniqueIDForAccessories:", v61);
      if (v31 == 5)
      {
        v62 = v29;
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0)
          v63 = v62;
        else
          v63 = 0;
        v64 = v63;

        -[HMDHome _updateRestrictedGuestHomeAccessSettingsFromOutgoingInvitation:forUserModel:](v33, "_updateRestrictedGuestHomeAccessSettingsFromOutgoingInvitation:forUserModel:", v121, v64);
      }
      v105 = v43;
      v110 = v40;
      if (v116 && _os_feature_enabled_impl())
        objc_msgSend(v29, "setMatCredIPKExternalRepresentation:", v116);
      -[__CFString setPairingIdentity:](v19, "setPairingIdentity:", v112);
      v65 = [HMDOutgoingHomeInvitationModel alloc];
      objc_msgSend(v121, "identifier");
      v66 = (void *)objc_claimAutoreleasedReturnValue();
      -[HMDHome uuid](v33, "uuid");
      v67 = (void *)objc_claimAutoreleasedReturnValue();
      v68 = -[HMDBackingStoreModelObject initWithObjectChangeType:uuid:parentUUID:](v65, "initWithObjectChangeType:uuid:parentUUID:", 3, v66, v67);

      -[HMDOutgoingHomeInvitationModel setInvitationState:](v68, "setInvitationState:", &unk_24E96A5B0);
      -[HMDOutgoingHomeInvitationModel setInviteeDestinationAddress:](v68, "setInviteeDestinationAddress:", v115);
      -[HMDOutgoingHomeInvitationModel setPendingUserUUID:](v68, "setPendingUserUUID:", 0);
      -[HMDHome homeManager](v33, "homeManager");
      v104 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v104, "backingStore");
      v69 = (void *)objc_claimAutoreleasedReturnValue();
      +[HMDBackingStoreTransactionOptions defaultXPCOptions](HMDBackingStoreTransactionOptions, "defaultXPCOptions");
      v70 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v69, "transaction:options:", CFSTR("kUserManagementOperationAddedKey"), v70);
      v103 = (void *)objc_claimAutoreleasedReturnValue();

      v71 = dispatch_group_create();
      -[HMDHome backingStore](v33, "backingStore");
      v72 = (void *)objc_claimAutoreleasedReturnValue();
      +[HMDBackingStoreTransactionOptions defaultXPCOptions](HMDBackingStoreTransactionOptions, "defaultXPCOptions");
      v73 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v72, "transaction:options:", CFSTR("kAddUserRequestKey"), v73);
      v74 = (void *)objc_claimAutoreleasedReturnValue();

      v75 = (void *)MEMORY[0x24BE3F1B0];
      objc_msgSend(v121, "identifier");
      v76 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v75, "messageWithName:identifier:messagePayload:", CFSTR("kAddUserRequestKey"), v76, 0);
      v77 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v74, "add:withMessage:", v29, v77);

      objc_msgSend(v74, "add:", v68);
      objc_msgSend(v29, "uuid");
      v78 = (void *)objc_claimAutoreleasedReturnValue();
      -[HMDHome addUserAccessCodeForUser:fromOutgoingInvitation:](v33, "addUserAccessCodeForUser:fromOutgoingInvitation:", v78, v121);
      v79 = (void *)objc_claimAutoreleasedReturnValue();

      if (v79)
        objc_msgSend(v74, "add:", v79);
      v80 = MEMORY[0x24BDAC760];
      aBlock[0] = MEMORY[0x24BDAC760];
      aBlock[1] = 3221225472;
      aBlock[2] = __178__HMDHome___handleAcceptedOutgoingInvitationResponse_destinationAddress_publicKey_username_reverseShare_reverseShareToken_issuerPublicKeyER_presenceAuthStatus_completionHandler___block_invoke_1352;
      aBlock[3] = &unk_24E79B468;
      aBlock[4] = v33;
      v125 = v19;
      v126 = v71;
      v127 = v103;
      v128 = 0;
      v129 = v117;
      v81 = v103;
      v82 = v71;
      v83 = _Block_copy(aBlock);
      v122[0] = v80;
      v122[1] = 3221225472;
      v122[2] = __178__HMDHome___handleAcceptedOutgoingInvitationResponse_destinationAddress_publicKey_username_reverseShare_reverseShareToken_issuerPublicKeyER_presenceAuthStatus_completionHandler___block_invoke_3;
      v122[3] = &unk_24E776A68;
      v122[4] = v33;
      v123 = v121;
      objc_msgSend(v74, "runWithCoreDataBlock:withCompletionBlock:", v122, v83);

      v84 = 0;
      v44 = v113;
      v42 = v114;
      v85 = (void *)v108;
      v40 = v110;
      v43 = v105;
    }
    else
    {
      objc_msgSend(MEMORY[0x24BDD1540], "hmErrorWithCode:description:reason:suggestion:", -1, CFSTR("Failed to create uniqueIDForAccessories"), 0, 0);
      v84 = (void *)objc_claimAutoreleasedReturnValue();
      v101 = (HMDOutgoingHomeInvitationModel *)_Block_copy(v117);
      v68 = v101;
      v85 = (void *)v108;
      if (v101)
        (*(void (**)(HMDOutgoingHomeInvitationModel *, void *))&v101->super._bsoDataVersionOverride)(v101, v84);
    }

    v98 = v117;
    goto LABEL_47;
  }
  v111 = v40;
  -[HMDHome backingStore](v33, "backingStore");
  v86 = (void *)objc_claimAutoreleasedReturnValue();
  +[HMDBackingStoreTransactionOptions defaultXPCOptions](HMDBackingStoreTransactionOptions, "defaultXPCOptions");
  v87 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v86, "transaction:options:", CFSTR("kUpdateInvitationStateRequestKey"), v87);
  v88 = (void *)objc_claimAutoreleasedReturnValue();

  v89 = [HMDOutgoingHomeInvitationModel alloc];
  objc_msgSend(v121, "identifier");
  v90 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHome uuid](v33, "uuid");
  v91 = (void *)objc_claimAutoreleasedReturnValue();
  v92 = -[HMDBackingStoreModelObject initWithObjectChangeType:uuid:parentUUID:](v89, "initWithObjectChangeType:uuid:parentUUID:", 3, v90, v91);

  v93 = (void *)v92;
  objc_msgSend(v88, "add:", v92);
  v43 = v88;
  v94 = [HMDUserModel alloc];
  -[__CFString uuid](v19, "uuid");
  v95 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHome uuid](v33, "uuid");
  v96 = (void *)objc_claimAutoreleasedReturnValue();
  v97 = -[HMDBackingStoreModelObject initWithObjectChangeType:uuid:parentUUID:](v94, "initWithObjectChangeType:uuid:parentUUID:", 3, v95, v96);

  v112 = (void *)v97;
  objc_msgSend(v88, "add:", v97);
  v132[0] = MEMORY[0x24BDAC760];
  v132[1] = 3221225472;
  v132[2] = __178__HMDHome___handleAcceptedOutgoingInvitationResponse_destinationAddress_publicKey_username_reverseShare_reverseShareToken_issuerPublicKeyER_presenceAuthStatus_completionHandler___block_invoke;
  v132[3] = &unk_24E79BD80;
  v132[4] = v33;
  objc_msgSend(v88, "run:", v132);
  objc_msgSend(MEMORY[0x24BDD1540], "hmErrorWithCode:description:reason:suggestion:", 3, CFSTR("Outgoing Invitation does not have a valid invitee. Cancelling the invite."), 0, 0);
  v84 = (void *)objc_claimAutoreleasedReturnValue();
  v98 = v117;
  v99 = _Block_copy(v117);
  v100 = v99;
  if (v99)
    (*((void (**)(void *, void *))v99 + 2))(v99, v84);

  v44 = v113;
  v42 = v114;
  v40 = v111;
  v85 = v93;
LABEL_48:

}

- (id)addUserAccessCodeForUser:(id)a3 fromOutgoingInvitation:(id)a4
{
  id v6;
  id v7;
  void *v8;
  void *v9;
  HMDHome *v10;
  NSObject *v11;
  _BOOL4 v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  int v18;
  void *v19;
  __int16 v20;
  id v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  v6 = a3;
  v7 = a4;
  objc_msgSend(v7, "accessCode");
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  v9 = (void *)MEMORY[0x227676638]();
  v10 = self;
  HMFGetOSLogHandle();
  v11 = objc_claimAutoreleasedReturnValue();
  v12 = os_log_type_enabled(v11, OS_LOG_TYPE_INFO);
  if (v8)
  {
    if (v12)
    {
      HMFGetLogIdentifier();
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      v18 = 138543618;
      v19 = v13;
      v20 = 2112;
      v21 = v6;
      _os_log_impl(&dword_2218F0000, v11, OS_LOG_TYPE_INFO, "%{public}@Migrating access code from HH1 to HH2 for user : %@", (uint8_t *)&v18, 0x16u);

    }
    objc_autoreleasePoolPop(v9);
    objc_msgSend(v7, "accessCode");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    +[HMDAccessCodeDataManager createUserAccessCodeModelFromAccessCode:forUserUUID:changedByUserUUID:](HMDAccessCodeDataManager, "createUserAccessCodeModelFromAccessCode:forUserUUID:changedByUserUUID:", v14, v6, 0);
    v15 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    if (v12)
    {
      HMFGetLogIdentifier();
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      v18 = 138543362;
      v19 = v16;
      _os_log_impl(&dword_2218F0000, v11, OS_LOG_TYPE_INFO, "%{public}@This user does not have any access code in outgoing invitation. Not adding one.", (uint8_t *)&v18, 0xCu);

    }
    objc_autoreleasePoolPop(v9);
    v15 = 0;
  }

  return v15;
}

- (unint64_t)pendingUserPrivilegeFromOutgoingInvitationUUID:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  unint64_t v7;
  _QWORD v9[4];
  id v10;
  HMDHome *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;

  v4 = a3;
  v13 = 0;
  v14 = &v13;
  v15 = 0x2020000000;
  v16 = 0;
  if (v4)
  {
    -[HMDHome backingStore](self, "backingStore");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "context");
    v6 = (void *)objc_claimAutoreleasedReturnValue();

    v9[0] = MEMORY[0x24BDAC760];
    v9[1] = 3221225472;
    v9[2] = __58__HMDHome_pendingUserPrivilegeFromOutgoingInvitationUUID___block_invoke;
    v9[3] = &unk_24E79C0A8;
    v10 = v4;
    v11 = self;
    v12 = &v13;
    objc_msgSend(v6, "unsafeSynchronousBlock:", v9);
    v7 = v14[3];

  }
  else
  {
    v7 = 0;
  }
  _Block_object_dispose(&v13, 8);

  return v7;
}

- (BOOL)_doesInvitedUserHasTheSamePairingIdentityAsOwner:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  HMDHome *v8;
  NSObject *v9;
  NSObject *v10;
  void *v11;
  void *v12;
  void *v13;
  char v14;
  void *v15;
  HMDHome *v16;
  NSObject *v17;
  void *v18;
  void *v19;
  void *v20;
  HMDHome *v21;
  NSObject *v22;
  void *v23;
  int v25;
  void *v26;
  __int16 v27;
  void *v28;
  __int16 v29;
  id v30;
  uint64_t v31;

  v31 = *MEMORY[0x24BDAC8D0];
  v4 = a3;
  if (v4)
  {
    -[HMDHome keychainStore](self, "keychainStore");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "getPreferredHH2ControllerKey");
    v6 = (void *)objc_claimAutoreleasedReturnValue();

    v7 = (void *)MEMORY[0x227676638]();
    v8 = self;
    HMFGetOSLogHandle();
    v9 = objc_claimAutoreleasedReturnValue();
    v10 = v9;
    if (v6)
    {
      if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v6, "identifier");
        v12 = (void *)objc_claimAutoreleasedReturnValue();
        v25 = 138543874;
        v26 = v11;
        v27 = 2112;
        v28 = v12;
        v29 = 2112;
        v30 = v4;
        _os_log_impl(&dword_2218F0000, v10, OS_LOG_TYPE_INFO, "%{public}@Owner HH2 pairing identifier: %@, Shared user pairing identifier: %@", (uint8_t *)&v25, 0x20u);

      }
      objc_autoreleasePoolPop(v7);
      objc_msgSend(v6, "identifier");
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      v14 = HMFEqualObjects();

    }
    else
    {
      if (os_log_type_enabled(v9, OS_LOG_TYPE_FAULT))
      {
        HMFGetLogIdentifier();
        v19 = (void *)objc_claimAutoreleasedReturnValue();
        v25 = 138543362;
        v26 = v19;
        _os_log_impl(&dword_2218F0000, v10, OS_LOG_TYPE_FAULT, "%{public}@We are doomed. Could not find owner's HH2 Key and we are in HH2", (uint8_t *)&v25, 0xCu);

      }
      objc_autoreleasePoolPop(v7);
      v20 = (void *)MEMORY[0x227676638]();
      v21 = v8;
      HMFGetOSLogHandle();
      v22 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v23 = (void *)objc_claimAutoreleasedReturnValue();
        v25 = 138543362;
        v26 = v23;
        _os_log_impl(&dword_2218F0000, v22, OS_LOG_TYPE_ERROR, "%{public}@We are doomed. Could not find owner's HH2 Key and we are in HH2", (uint8_t *)&v25, 0xCu);

      }
      objc_autoreleasePoolPop(v20);
      v14 = 0;
    }

  }
  else
  {
    v15 = (void *)MEMORY[0x227676638]();
    v16 = self;
    HMFGetOSLogHandle();
    v17 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      v25 = 138543362;
      v26 = v18;
      _os_log_impl(&dword_2218F0000, v17, OS_LOG_TYPE_ERROR, "%{public}@shared user pairing identifier is nil.", (uint8_t *)&v25, 0xCu);

    }
    objc_autoreleasePoolPop(v15);
    v14 = 0;
  }

  return v14;
}

- (void)__handleCancelledOutgoingInvitation:(id)a3
{
  objc_msgSend(a3, "cancel");
}

- (void)__handleCompletedOutgoingInvitation:(id)a3
{
  id v4;
  void *v5;
  HMDHome *v6;
  NSObject *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  int v13;
  void *v14;
  __int16 v15;
  void *v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  v4 = a3;
  v5 = (void *)MEMORY[0x227676638]();
  v6 = self;
  HMFGetOSLogHandle();
  v7 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "identifier");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "UUIDString");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v13 = 138543618;
    v14 = v8;
    v15 = 2112;
    v16 = v10;
    _os_log_impl(&dword_2218F0000, v7, OS_LOG_TYPE_INFO, "%{public}@Removing outgoing invitation '%@' since it completed", (uint8_t *)&v13, 0x16u);

  }
  objc_autoreleasePoolPop(v5);
  objc_msgSend(v4, "updateInvitationState:", 3);
  objc_msgSend(v4, "user");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHome usersPendingUserManagementOperations](v6, "usersPendingUserManagementOperations");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v12, "removeObject:", v11);

}

- (void)_sendInvitationCancelationRequestToInvitee:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;
  _QWORD v10[5];
  id v11;

  v4 = a3;
  -[HMDHome homeManager](self, "homeManager");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "idsInvitationManager");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "idsInvitationUUID");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "identifier");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v10[0] = MEMORY[0x24BDAC760];
  v10[1] = 3221225472;
  v10[2] = __54__HMDHome__sendInvitationCancelationRequestToInvitee___block_invoke;
  v10[3] = &unk_24E776A90;
  v10[4] = self;
  v11 = v4;
  v9 = v4;
  objc_msgSend(v6, "cancelInvitationWithIDSIdentifier:homeInvitationID:completionBlock:", v7, v8, v10);

}

- (void)_handleRequestHomeDataSync:(id)a3
{
  id v4;
  BOOL v5;
  _QWORD *v6;
  void *v7;
  HMDHome *v8;
  NSObject *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void (**v15)(_QWORD, _QWORD, _QWORD);
  void *v16;
  void *v17;
  HMDHome *v18;
  NSObject *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void (**v25)(_QWORD, _QWORD, _QWORD);
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  void *v32;
  char v33;
  id v34;
  void *v35;
  HMDHome *v36;
  NSObject *v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  void (**v43)(_QWORD, _QWORD, _QWORD);
  void *v44;
  void *v45;
  id v46;
  void *v47;
  void *v48;
  void *v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  uint8_t v54[128];
  uint8_t buf[4];
  void *v56;
  __int16 v57;
  void *v58;
  uint64_t v59;

  v59 = *MEMORY[0x24BDAC8D0];
  v4 = a3;
  v5 = -[HMDHome isOwnerUser](self, "isOwnerUser");
  v6 = (_QWORD *)MEMORY[0x24BDD5BD8];
  if (!v5)
  {
    v7 = (void *)MEMORY[0x227676638]();
    v8 = self;
    HMFGetOSLogHandle();
    v9 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "identifier");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v11, "UUIDString");
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v56 = v10;
      v57 = 2112;
      v58 = v12;
      _os_log_impl(&dword_2218F0000, v9, OS_LOG_TYPE_INFO, "%{public}@Not owner, cannot send for message: %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v7);
    objc_msgSend(MEMORY[0x24BDD1540], "errorWithDomain:code:userInfo:", *v6, 10, 0);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "responseHandler");
    v14 = (void *)objc_claimAutoreleasedReturnValue();

    if (v14)
    {
      objc_msgSend(v4, "responseHandler");
      v15 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
      ((void (**)(_QWORD, void *, _QWORD))v15)[2](v15, v13, 0);

    }
  }
  objc_msgSend(v4, "stringForKey:", CFSTR("pairingUsername"));
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v16)
  {
    v17 = (void *)MEMORY[0x227676638]();
    v18 = self;
    HMFGetOSLogHandle();
    v19 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "identifier");
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v21, "UUIDString");
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v56 = v20;
      v57 = 2112;
      v58 = v22;
      _os_log_impl(&dword_2218F0000, v19, OS_LOG_TYPE_INFO, "%{public}@User is not specified for message: %@", buf, 0x16u);

      v6 = (_QWORD *)MEMORY[0x24BDD5BD8];
    }

    objc_autoreleasePoolPop(v17);
    objc_msgSend(MEMORY[0x24BDD1540], "errorWithDomain:code:userInfo:", *v6, 2, 0);
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "responseHandler");
    v24 = (void *)objc_claimAutoreleasedReturnValue();

    if (v24)
    {
      objc_msgSend(v4, "responseHandler");
      v25 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
      ((void (**)(_QWORD, void *, _QWORD))v25)[2](v25, v23, 0);

    }
  }
  v52 = 0u;
  v53 = 0u;
  v50 = 0u;
  v51 = 0u;
  -[HMDHome users](self, "users", 0);
  v26 = (void *)objc_claimAutoreleasedReturnValue();
  v27 = objc_msgSend(v26, "countByEnumeratingWithState:objects:count:", &v50, v54, 16);
  if (v27)
  {
    v28 = v27;
    v29 = *(_QWORD *)v51;
LABEL_15:
    v30 = 0;
    while (1)
    {
      if (*(_QWORD *)v51 != v29)
        objc_enumerationMutation(v26);
      v31 = *(void **)(*((_QWORD *)&v50 + 1) + 8 * v30);
      if ((objc_msgSend(v31, "isRemoteGateway") & 1) == 0)
      {
        objc_msgSend(v31, "pairingUsername");
        v32 = (void *)objc_claimAutoreleasedReturnValue();
        v33 = objc_msgSend(v16, "isEqualToString:", v32);

        if ((v33 & 1) != 0)
          break;
      }
      if (v28 == ++v30)
      {
        v28 = objc_msgSend(v26, "countByEnumeratingWithState:objects:count:", &v50, v54, 16);
        if (v28)
          goto LABEL_15;
        goto LABEL_22;
      }
    }
    v34 = v31;

    if (v34)
      goto LABEL_29;
  }
  else
  {
LABEL_22:

  }
  v35 = (void *)MEMORY[0x227676638]();
  v36 = self;
  HMFGetOSLogHandle();
  v37 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v37, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v38 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "identifier");
    v39 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v39, "UUIDString");
    v40 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543618;
    v56 = v38;
    v57 = 2112;
    v58 = v40;
    _os_log_impl(&dword_2218F0000, v37, OS_LOG_TYPE_INFO, "%{public}@Unable to find user for message: %@", buf, 0x16u);

  }
  objc_autoreleasePoolPop(v35);
  objc_msgSend(MEMORY[0x24BDD1540], "errorWithDomain:code:userInfo:", *MEMORY[0x24BDD5BD8], 2, 0);
  v41 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "responseHandler");
  v42 = (void *)objc_claimAutoreleasedReturnValue();

  if (v42)
  {
    objc_msgSend(v4, "responseHandler");
    v43 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
    ((void (**)(_QWORD, void *, _QWORD))v43)[2](v43, v41, 0);

  }
  v34 = 0;
LABEL_29:
  objc_msgSend(v4, "destination");
  v44 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v45 = v44;
  else
    v45 = 0;
  v46 = v45;

  if (v46)
  {
    -[HMDHome homeManager](self, "homeManager");
    v47 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v46, "device");
    v48 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v48, "remoteDestinationString");
    v49 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v47, "sendUserAdded:destination:toHome:", v34, v49, self);

  }
  objc_msgSend(v4, "respondWithPayload:", 0);

}

- (id)_splitCharacteristicChanges:(id)a3 changedAccessories:(id)a4
{
  id v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  uint64_t v13;
  void *v14;
  BOOL v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  uint64_t v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  uint64_t v28;
  void *v29;
  void *v30;
  void *v31;
  id v32;
  void *v33;
  void *v34;
  void *v35;
  int v36;
  id v37;
  void *v38;
  void *v39;
  uint64_t v40;
  void *v41;
  id v42;
  void *v43;
  void *v44;
  void *v45;
  void *v47;
  void *v48;
  void *v49;
  void *v50;
  void *v51;
  void *v52;
  void *v53;
  uint64_t v54;
  char v55;
  void *v56;
  void *v57;
  void *v58;
  id obj;
  void *v60;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  _QWORD v66[2];
  _QWORD v67[2];
  _BYTE v68[128];
  uint64_t v69;

  v69 = *MEMORY[0x24BDAC8D0];
  v5 = a3;
  v6 = a4;
  objc_msgSend(MEMORY[0x24BDBCED8], "dictionaryWithCapacity:", objc_msgSend(v6, "count"));
  v47 = (void *)objc_claimAutoreleasedReturnValue();
  v49 = v6;
  objc_msgSend(MEMORY[0x24BDBCED8], "dictionaryWithCapacity:", objc_msgSend(v6, "count"));
  v48 = (void *)objc_claimAutoreleasedReturnValue();
  v62 = 0u;
  v63 = 0u;
  v64 = 0u;
  v65 = 0u;
  obj = v5;
  v7 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v62, v68, 16);
  if (v7)
  {
    v8 = v7;
    v9 = *(_QWORD *)v63;
    do
    {
      v10 = 0;
      v54 = v8;
      do
      {
        if (*(_QWORD *)v63 != v9)
          objc_enumerationMutation(obj);
        v11 = *(void **)(*((_QWORD *)&v62 + 1) + 8 * v10);
        objc_msgSend(v11, "service");
        v12 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v12, "accessory");
        v13 = objc_claimAutoreleasedReturnValue();
        v14 = (void *)v13;
        if (v12)
          v15 = v13 == 0;
        else
          v15 = 1;
        if (!v15)
        {
          -[HMDHome hapMetadata](self, "hapMetadata");
          v16 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v11, "type");
          v17 = (void *)objc_claimAutoreleasedReturnValue();
          if ((objc_msgSend(v16, "shouldFilterCharacteristicOfTypeFromApp:", v17) & 1) == 0)
          {
            -[HMDHome hapMetadata](self, "hapMetadata");
            v18 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v12, "type");
            v19 = (void *)objc_claimAutoreleasedReturnValue();
            v60 = v18;
            if ((objc_msgSend(v18, "shouldFilterServiceOfTypeFromApp:", v19) & 1) == 0)
            {
              -[HMDHome hapMetadata](self, "hapMetadata");
              v20 = v17;
              v21 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v11, "type");
              v22 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v12, "type");
              v57 = v16;
              v23 = v9;
              v24 = (void *)objc_claimAutoreleasedReturnValue();
              v55 = objc_msgSend(v21, "shouldFilterChangeNotificationsForCharacteristicType:serviceType:", v22, v24);

              v9 = v23;
              v8 = v54;

              if ((v55 & 1) != 0)
                goto LABEL_29;
              objc_msgSend(v14, "uuid");
              v25 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v25, "UUIDString");
              v16 = (void *)objc_claimAutoreleasedReturnValue();

              objc_msgSend(v49, "objectForKey:", v16);
              v26 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v12, "instanceID");
              v27 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v27, "stringValue");
              v28 = objc_claimAutoreleasedReturnValue();

              v56 = v26;
              v60 = (void *)v28;
              objc_msgSend(v26, "objectForKey:", v28);
              v19 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v11, "instanceID");
              v29 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v29, "stringValue");
              v30 = (void *)objc_claimAutoreleasedReturnValue();

              objc_msgSend(v19, "objectForKey:", v30);
              v31 = (void *)objc_claimAutoreleasedReturnValue();
              if (v31)
              {
                v53 = v30;
                v32 = v48;
                v52 = v31;
                if (isAppleTV())
                {
                  v58 = v16;
                  -[HMDHome hapMetadata](self, "hapMetadata");
                  v33 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend(v11, "type");
                  v34 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend(v12, "type");
                  v35 = (void *)objc_claimAutoreleasedReturnValue();
                  v36 = objc_msgSend(v33, "requiresDeviceUnlock:forService:", v34, v35);

                  if (v36)
                  {
                    v37 = v47;

                    v8 = v54;
                    v16 = v58;
                    goto LABEL_19;
                  }
                  v8 = v54;
                  v16 = v58;
                }
                v37 = v32;
LABEL_19:
                accessoryToEncodeForXPCTransportForAccessory(v14);
                v38 = (void *)objc_claimAutoreleasedReturnValue();
                v51 = v38;
                if (v38 != v14)
                {
                  objc_msgSend(v38, "uuid");
                  v39 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend(v39, "UUIDString");
                  v40 = objc_claimAutoreleasedReturnValue();
                  v41 = v16;
                  v16 = (void *)v40;

                  v42 = v47;
                  v37 = v42;
                }
                objc_msgSend(v37, "objectForKey:", v16);
                v43 = (void *)objc_claimAutoreleasedReturnValue();
                if (!v43)
                {
                  objc_msgSend(MEMORY[0x24BDBCED8], "dictionaryWithCapacity:", objc_msgSend(v56, "count"));
                  v43 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend(v37, "setObject:forKey:", v43, v16);
                }
                objc_msgSend(v43, "objectForKey:", v60);
                v44 = (void *)objc_claimAutoreleasedReturnValue();
                if (!v44)
                {
                  objc_msgSend(MEMORY[0x24BDBCED8], "dictionaryWithCapacity:", objc_msgSend(v19, "count"));
                  v44 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend(v43, "setObject:forKey:", v44, v60);
                }
                v50 = v43;
                v30 = v53;
                objc_msgSend(v44, "setObject:forKey:", v52, v53);

                v31 = v52;
              }

              v17 = v56;
            }

          }
        }
LABEL_29:

        ++v10;
      }
      while (v8 != v10);
      v8 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v62, v68, 16);
    }
    while (v8);
  }

  v66[0] = CFSTR("kCharacteristicUpdatesForEntitledClientsNotificationKey");
  v66[1] = CFSTR("kCharacteristicUpdatesForAllClientsNotificationKey");
  v67[0] = v47;
  v67[1] = v48;
  objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v67, v66, 2);
  v45 = (void *)objc_claimAutoreleasedReturnValue();

  return v45;
}

- (void)_notifyChangedCharacteristics:(id)a3 message:(id)a4 modifiedCharacteristics:(id)a5 broadcast:(BOOL)a6
{
  _BOOL8 v6;
  id v10;
  id v11;
  id v12;
  void *v13;
  HMDHome *v14;
  NSObject *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  uint64_t v22;
  uint8_t buf[4];
  void *v24;
  __int16 v25;
  void *v26;
  uint64_t v27;

  v6 = a6;
  v27 = *MEMORY[0x24BDAC8D0];
  v10 = a3;
  v11 = a4;
  v12 = a5;
  v13 = (void *)MEMORY[0x227676638]();
  v14 = self;
  HMFGetOSLogHandle();
  v15 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "shortDescription");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543618;
    v24 = v16;
    v25 = 2112;
    v26 = v17;
    _os_log_impl(&dword_2218F0000, v15, OS_LOG_TYPE_INFO, "%{public}@Posting internal notification before remote and XPC notifications. %@", buf, 0x16u);

  }
  objc_autoreleasePoolPop(v13);
  LOBYTE(v22) = v6;
  v18 = (void *)MEMORY[0x227676638](-[HMDHome _postInternalNotificationForChangedCharacteristics:previouslyNilChangedCharacteristics:modifiedCharacteristics:changedByThisDevice:residentShouldNotifyPeers:message:broadcast:](v14, "_postInternalNotificationForChangedCharacteristics:previouslyNilChangedCharacteristics:modifiedCharacteristics:changedByThisDevice:residentShouldNotifyPeers:message:broadcast:", v10, MEMORY[0x24BDBD1A8], v12, 0, 0, v11, v22));
  +[HMDCharacteristicUpdateTuple characteristicUpdateTuplesWithCharacteristics:isBroadcast:](HMDCharacteristicUpdateTuple, "characteristicUpdateTuplesWithCharacteristics:isBroadcast:", v10, v6);
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  +[HMDHome notificationPayloadForChangedCharacteristics:destinationIsXPCTransport:](HMDHome, "notificationPayloadForChangedCharacteristics:destinationIsXPCTransport:", v19, 1);
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHome _splitCharacteristicChanges:changedAccessories:](v14, "_splitCharacteristicChanges:changedAccessories:", v10, v20);
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHome _sendClientCharacteristicsChangedNotificationWithIdentifier:requestMessage:multiPartResponse:moreInMultiPartResponse:characteristicChanges:completionHandler:](v14, "_sendClientCharacteristicsChangedNotificationWithIdentifier:requestMessage:multiPartResponse:moreInMultiPartResponse:characteristicChanges:completionHandler:", 0, 0, 0, 0, v21, 0);

  objc_autoreleasePoolPop(v18);
  isWatch();
  if (-[HMDHome shouldRelayNotificationToRegisteredDevicesForSource:](v14, "shouldRelayNotificationToRegisteredDevicesForSource:", v11))
  {
    -[HMDHome notifyRemoteUsersOfChangedCharacteristics:message:broadcast:](v14, "notifyRemoteUsersOfChangedCharacteristics:message:broadcast:", v10, v11, v6);
  }

}

- (BOOL)shouldRelayNotificationToRegisteredDevicesForSource:(id)a3
{
  id v4;
  void *v5;
  id v6;
  void *v7;
  char isKindOfClass;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  char v13;
  void *v14;
  char v15;

  v4 = a3;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v5 = v4;
  else
    v5 = 0;
  v6 = v5;
  objc_msgSend(v4, "destination");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  isKindOfClass = objc_opt_isKindOfClass();

  if (!objc_msgSend(v6, "isRemote") || (isKindOfClass & 1) == 0 || !v7)
    goto LABEL_15;
  objc_msgSend(v6, "name");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  if ((objc_msgSend(v9, "isEqualToString:", CFSTR("kCharacteristicValueUpdatedNotificationKey")) & 1) != 0)
  {
LABEL_10:

    goto LABEL_11;
  }
  objc_msgSend(v6, "name");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v10, "isEqualToString:", CFSTR("kMultipleCharacteristicValuesUpdatedNotificationKey")))
  {

    goto LABEL_10;
  }
  objc_msgSend(v6, "name");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  v15 = objc_msgSend(v14, "isEqualToString:", CFSTR("kCharacterisiticsChangedInternalNotificationKey"));

  if ((v15 & 1) == 0)
  {
LABEL_15:
    isWatch();
    goto LABEL_16;
  }
LABEL_11:
  -[HMDHome primaryResident](self, "primaryResident");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v11, "isCurrentDevice"))
  {

LABEL_16:
    v13 = 1;
    goto LABEL_17;
  }
  -[HMDHome homeManager](self, "homeManager");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  v13 = objc_msgSend(v12, "isPairedWithWatch");

LABEL_17:
  return v13;
}

- (BOOL)_shouldRegisterForNotificationsWithDevice:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  char v7;
  char v8;
  void *v9;

  v4 = a3;
  -[HMDHome primaryResident](self, "primaryResident");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  isWatch();
  if (v5)
  {
    objc_msgSend(v5, "device");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v7 = objc_msgSend(v6, "isCurrentDevice");

    if ((v7 & 1) != 0)
    {
      v8 = 1;
    }
    else
    {
      objc_msgSend(v5, "device");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      v8 = objc_msgSend(v4, "isEqual:", v9);

    }
  }
  else
  {
    v8 = 0;
  }

  return v8;
}

- (void)_notifyRemoteUsersOfChangedCharacteristics:(id)a3 message:(id)a4 broadcast:(BOOL)a5
{
  id v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t i;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  HMDHome *v19;
  void *v20;
  char v21;
  void *v22;
  HMDHome *v23;
  NSObject *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  id v30;
  void *v31;
  id v32;
  void *v33;
  void *v34;
  id v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  uint64_t v40;
  void *v41;
  void *v42;
  HMDHome *v43;
  NSObject *v44;
  void *v45;
  void *v46;
  void *v47;
  void *v48;
  void *v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t j;
  void *v55;
  void *v56;
  void *v57;
  void *v58;
  void *v59;
  char v60;
  void *v61;
  NSObject *v62;
  id v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  __objc2_class **p_superclass;
  uint64_t k;
  void *v69;
  void *v70;
  void *v71;
  void *v72;
  void *v73;
  HMDHome *v74;
  NSObject *v75;
  NSObject *v76;
  void *v77;
  NSObject *v78;
  void *v79;
  void *v80;
  HMDHome *v81;
  NSObject *v82;
  void *v83;
  NSObject *v84;
  void *v85;
  void *v86;
  HMDHome *v87;
  void *v88;
  HMDHome *v89;
  NSObject *v90;
  void *v91;
  NSObject *v92;
  void *v93;
  void *v94;
  void *v95;
  void *v96;
  HMDHome *v97;
  NSObject *v98;
  void *v99;
  unint64_t v100;
  int v101;
  unint64_t skippedInterDeviceChangeNotifications;
  void *v103;
  void *v104;
  void *v105;
  void *v106;
  _BOOL4 v107;
  void *v108;
  id v109;
  id v110;
  void *v111;
  void *v112;
  void *v113;
  void *v114;
  uint64_t v115;
  void *v116;
  void *v117;
  void *v118;
  HMDHome *v119;
  int v120;
  id obj;
  _QWORD block[4];
  id v123;
  HMDHome *v124;
  _QWORD v125[4];
  NSObject *v126;
  char v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  uint8_t buf[4];
  void *v141;
  __int16 v142;
  unint64_t v143;
  __int16 v144;
  void *v145;
  _BYTE v146[128];
  _BYTE v147[128];
  _BYTE v148[128];
  uint64_t v149;

  v107 = a5;
  v149 = *MEMORY[0x24BDAC8D0];
  v7 = a3;
  v109 = a4;
  objc_msgSend(MEMORY[0x24BDBCEB8], "arrayWithCapacity:", objc_msgSend(v7, "count"));
  v116 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x24BDBCEF0], "set");
  v111 = (void *)objc_claimAutoreleasedReturnValue();
  v136 = 0u;
  v137 = 0u;
  v138 = 0u;
  v139 = 0u;
  v8 = v7;
  v9 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v136, v148, 16);
  obj = v8;
  v119 = self;
  if (v9)
  {
    v10 = v9;
    v120 = 0;
    v11 = *(_QWORD *)v137;
    do
    {
      for (i = 0; i != v10; ++i)
      {
        if (*(_QWORD *)v137 != v11)
          objc_enumerationMutation(obj);
        v13 = *(void **)(*((_QWORD *)&v136 + 1) + 8 * i);
        objc_msgSend(v13, "accessory");
        v14 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v13, "stateNumber");
        v15 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v14, "updateTrackedAccessoryStateNumber:", v15);

        -[HMDHome hapMetadata](self, "hapMetadata");
        v16 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v13, "type");
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v13, "service");
        v18 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v18, "type");
        v19 = self;
        v20 = (void *)objc_claimAutoreleasedReturnValue();
        v21 = objc_msgSend(v16, "shouldFilterChangeNotificationsForCharacteristicType:serviceType:", v17, v20);

        if ((v21 & 1) != 0)
        {
          self = v19;
        }
        else
        {
          self = v19;
          if (-[HMDHome _shouldRateLimitChangeNotificationsForCharacteristic:](v19, "_shouldRateLimitChangeNotificationsForCharacteristic:", v13))
          {
            v22 = (void *)MEMORY[0x227676638]();
            v23 = v19;
            HMFGetOSLogHandle();
            v24 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v24, OS_LOG_TYPE_INFO))
            {
              HMFGetLogIdentifier();
              v25 = (void *)objc_claimAutoreleasedReturnValue();
              *(_DWORD *)buf = 138543618;
              v141 = v25;
              v142 = 2112;
              v143 = (unint64_t)v13;
              _os_log_impl(&dword_2218F0000, v24, OS_LOG_TYPE_INFO, "%{public}@Filtering out characteristic for remote notification due to rate limiting: %@", buf, 0x16u);

              self = v119;
            }

            objc_autoreleasePoolPop(v22);
          }
          else
          {
            objc_msgSend(v13, "accessory");
            v26 = (void *)objc_claimAutoreleasedReturnValue();
            if (objc_msgSend(v26, "hasBTLELink"))
            {
              objc_msgSend(v26, "identifier");
              v27 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v26, "matchingTransportInformationWithServerIdentifier:instanceID:linkType:", v27, 0, 1);
              v28 = (void *)objc_claimAutoreleasedReturnValue();

              if ((objc_msgSend(v28, "isReachable") & 1) == 0)
                objc_msgSend(v111, "addObject:", v13);

            }
            v120 |= +[HMDBulletinUserAttributionManager currentStateCharacteristicSupportsUserAttribution:](HMDBulletinUserAttributionManager, "currentStateCharacteristicSupportsUserAttribution:", v13);
            objc_msgSend(v116, "addObject:", v13);

          }
        }
      }
      v8 = obj;
      v10 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v136, v148, 16);
    }
    while (v10);
  }
  else
  {
    LOBYTE(v120) = 0;
  }

  v29 = v116;
  if (objc_msgSend(v116, "count"))
  {
    v30 = v109;
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
      v31 = v30;
    else
      v31 = 0;
    v32 = v31;

    v105 = v32;
    objc_msgSend(v32, "destination");
    v33 = (void *)objc_claimAutoreleasedReturnValue();
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
      v34 = v33;
    else
      v34 = 0;
    v35 = v34;

    v104 = v35;
    objc_msgSend(v35, "device");
    v117 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHome primaryResident](self, "primaryResident");
    v36 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v36, "device");
    v106 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(MEMORY[0x24BDBCEF0], "set");
    v118 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHome notificationRegistry](self, "notificationRegistry");
    v37 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v37, "characteristicsByDestinationForCharacteristics:", v116);
    v108 = (void *)objc_claimAutoreleasedReturnValue();

    -[HMDHome residentDeviceManager](self, "residentDeviceManager");
    v38 = (void *)objc_claimAutoreleasedReturnValue();
    LODWORD(v35) = objc_msgSend(v38, "isCurrentDeviceConfirmedPrimaryResident");

    if ((_DWORD)v35)
    {
      -[HMDHome accessoryBulletinNotificationManager](self, "accessoryBulletinNotificationManager");
      v39 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v39, "characteristicsByDestinationForCharacteristics:", v116);
      v40 = objc_claimAutoreleasedReturnValue();

    }
    else
    {
      v40 = MEMORY[0x24BDBD1B8];
    }
    v103 = (void *)v40;
    -[HMDHome _characteristicUpdatesByDestinationForNotificationRegistryDestinations:bulletinDestinations:broadcast:](self, "_characteristicUpdatesByDestinationForNotificationRegistryDestinations:bulletinDestinations:broadcast:", v108, v40, v107);
    v46 = (void *)objc_claimAutoreleasedReturnValue();
    v47 = (void *)MEMORY[0x24BDBCEF0];
    v113 = v46;
    objc_msgSend(v46, "allKeys");
    v48 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v47, "setWithArray:", v48);
    v114 = (void *)objc_claimAutoreleasedReturnValue();

    -[HMDHome residentDeviceManager](self, "residentDeviceManager");
    v49 = (void *)objc_claimAutoreleasedReturnValue();
    LODWORD(v48) = objc_msgSend(v49, "isCurrentDeviceAvailableResident");

    v101 = (int)v48;
    if ((_DWORD)v48)
    {
      v134 = 0u;
      v135 = 0u;
      v132 = 0u;
      v133 = 0u;
      -[HMDHome residentEnabledDevices](self, "residentEnabledDevices");
      v50 = (void *)objc_claimAutoreleasedReturnValue();
      v51 = objc_msgSend(v50, "countByEnumeratingWithState:objects:count:", &v132, v147, 16);
      if (!v51)
        goto LABEL_47;
      v52 = v51;
      v53 = *(_QWORD *)v133;
      while (1)
      {
        for (j = 0; j != v52; ++j)
        {
          if (*(_QWORD *)v133 != v53)
            objc_enumerationMutation(v50);
          v55 = *(void **)(*((_QWORD *)&v132 + 1) + 8 * j);
          -[HMDHome primaryResident](self, "primaryResident");
          v56 = (void *)objc_claimAutoreleasedReturnValue();
          if ((objc_msgSend(v56, "isCurrentDevice") & 1) == 0)
          {
            -[HMDHome primaryResident](self, "primaryResident");
            v57 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v57, "device");
            v58 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v58, "remoteDestinationString");
            v59 = (void *)objc_claimAutoreleasedReturnValue();
            v60 = objc_msgSend(v114, "containsObject:", v59);

            v8 = obj;
            if ((v60 & 1) != 0)
              goto LABEL_45;
            objc_msgSend(v55, "remoteDestinationString");
            v56 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v114, "addObject:", v56);
          }

LABEL_45:
          self = v119;
        }
        v52 = objc_msgSend(v50, "countByEnumeratingWithState:objects:count:", &v132, v147, 16);
        if (!v52)
        {
LABEL_47:

          break;
        }
      }
    }
    objc_msgSend(MEMORY[0x24BDD1880], "UUID");
    v61 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v61, "UUIDString");
    v112 = (void *)objc_claimAutoreleasedReturnValue();

    skippedInterDeviceChangeNotifications = self->_skippedInterDeviceChangeNotifications;
    if ((v120 & 1) != 0)
      v62 = dispatch_group_create();
    else
      v62 = 0;
    v130 = 0u;
    v131 = 0u;
    v128 = 0u;
    v129 = 0u;
    v63 = v114;
    v64 = objc_msgSend(v63, "countByEnumeratingWithState:objects:count:", &v128, v146, 16);
    if (v64)
    {
      v65 = v64;
      v66 = *(_QWORD *)v129;
      p_superclass = HMDCameraMetricsSnapshotLogEvent.superclass;
      v110 = v63;
      v115 = *(_QWORD *)v129;
      do
      {
        for (k = 0; k != v65; ++k)
        {
          if (*(_QWORD *)v129 != v66)
            objc_enumerationMutation(v63);
          v69 = *(void **)(*((_QWORD *)&v128 + 1) + 8 * k);
          objc_msgSend(p_superclass + 144, "deviceWithDestination:", v69);
          v70 = (void *)objc_claimAutoreleasedReturnValue();
          if (v70)
          {
            objc_msgSend(v118, "addObject:", v70);
            if (-[HMDHome _shouldSendToDestination:device:remoteSourceDevice:](self, "_shouldSendToDestination:device:remoteSourceDevice:", v69, v70, v117))
            {
              objc_msgSend(v113, "objectForKeyedSubscript:", v69);
              v71 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v71, "allObjects");
              v72 = (void *)objc_claimAutoreleasedReturnValue();

              if (objc_msgSend(v72, "count"))
              {
                v73 = (void *)MEMORY[0x227676638]();
                v74 = self;
                HMFGetOSLogHandle();
                v75 = objc_claimAutoreleasedReturnValue();
                if (os_log_type_enabled(v75, OS_LOG_TYPE_INFO))
                {
                  HMFGetLogIdentifier();
                  v76 = v62;
                  v77 = (void *)objc_claimAutoreleasedReturnValue();
                  *(_DWORD *)buf = 138543874;
                  v141 = v77;
                  v142 = 2112;
                  v143 = (unint64_t)v69;
                  v144 = 2112;
                  v145 = v112;
                  _os_log_impl(&dword_2218F0000, v75, OS_LOG_TYPE_INFO, "%{public}@Fanning out to device %@ with the characteristics that changed for notificationUpdateIdentifier: %@", buf, 0x20u);

                  v62 = v76;
                  v63 = v110;
                }

                objc_autoreleasePoolPop(v73);
                if ((v120 & 1) != 0)
                  dispatch_group_enter(v62);
                v125[0] = MEMORY[0x24BDAC760];
                v125[1] = 3221225472;
                v125[2] = __72__HMDHome__notifyRemoteUsersOfChangedCharacteristics_message_broadcast___block_invoke;
                v125[3] = &unk_24E77FBE0;
                v127 = v120 & 1;
                v126 = v62;
                -[HMDHome _notifyUpdatedCharacteristic:withRequestIdentifier:notificationUpdateIdentifier:toUserDeviceAddress:completion:](v74, "_notifyUpdatedCharacteristic:withRequestIdentifier:notificationUpdateIdentifier:toUserDeviceAddress:completion:", v72, 0, v112, v69, v125);

                v8 = obj;
                self = v119;
              }

              v66 = v115;
              p_superclass = (__objc2_class **)(HMDCameraMetricsSnapshotLogEvent + 8);
            }
          }

        }
        v65 = objc_msgSend(v63, "countByEnumeratingWithState:objects:count:", &v128, v146, 16);
      }
      while (v65);
    }

    if ((v120 & 1) != 0)
    {
      -[HMDHome workQueue](self, "workQueue");
      v78 = objc_claimAutoreleasedReturnValue();
      block[0] = MEMORY[0x24BDAC760];
      block[1] = 3221225472;
      block[2] = __72__HMDHome__notifyRemoteUsersOfChangedCharacteristics_message_broadcast___block_invoke_2;
      block[3] = &unk_24E79C268;
      v123 = v116;
      v124 = self;
      dispatch_group_notify(v62, v78, block);

    }
    v29 = v116;
    v41 = v109;
    v79 = v106;
    if (objc_msgSend(v116, "count")
      && v106
      && (objc_msgSend(v106, "isCurrentDevice") & 1) == 0
      && (objc_msgSend(v118, "containsObject:", v106) & 1) == 0
      && (objc_msgSend(v117, "isEqual:", v106) & 1) == 0)
    {
      if (v101)
      {
        v80 = (void *)MEMORY[0x227676638]();
        v81 = self;
        HMFGetOSLogHandle();
        v82 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v82, OS_LOG_TYPE_INFO))
        {
          HMFGetLogIdentifier();
          v83 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v106, "remoteDestinationString");
          v84 = v62;
          v85 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543874;
          v141 = v83;
          v142 = 2112;
          v143 = (unint64_t)v85;
          v144 = 2112;
          v145 = v112;
          _os_log_impl(&dword_2218F0000, v82, OS_LOG_TYPE_INFO, "%{public}@Fanning to primary resident destination %@ with notificationUpdateIdentifier: %@", buf, 0x20u);

          v62 = v84;
        }

        objc_autoreleasePoolPop(v80);
        v79 = v106;
        objc_msgSend(v106, "remoteDestinationString");
        v86 = (void *)objc_claimAutoreleasedReturnValue();
        v87 = v81;
        v29 = v116;
        -[HMDHome _notifyChangedCharacteristics:withRequestIdentifier:notificationUpdateIdentifier:toUserDeviceAddress:broadcast:](v87, "_notifyChangedCharacteristics:withRequestIdentifier:notificationUpdateIdentifier:toUserDeviceAddress:broadcast:", v116, 0, v112, v86, v107);

      }
      else if (objc_msgSend(v111, "count"))
      {
        v88 = (void *)MEMORY[0x227676638]();
        v89 = self;
        HMFGetOSLogHandle();
        v90 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v90, OS_LOG_TYPE_INFO))
        {
          HMFGetLogIdentifier();
          v91 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v106, "remoteDestinationString");
          v92 = v62;
          v93 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543874;
          v141 = v91;
          v142 = 2112;
          v143 = (unint64_t)v93;
          v144 = 2112;
          v145 = v112;
          _os_log_impl(&dword_2218F0000, v90, OS_LOG_TYPE_INFO, "%{public}@Fanning the characteristics changed over BTLE to primary resident destination %@ with notificationUpdateIdentifier: %@", buf, 0x20u);

          v62 = v92;
        }

        objc_autoreleasePoolPop(v88);
        objc_msgSend(v111, "allObjects");
        v94 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v106, "remoteDestinationString");
        v95 = (void *)objc_claimAutoreleasedReturnValue();
        -[HMDHome _notifyChangedCharacteristics:withRequestIdentifier:notificationUpdateIdentifier:toUserDeviceAddress:broadcast:](v89, "_notifyChangedCharacteristics:withRequestIdentifier:notificationUpdateIdentifier:toUserDeviceAddress:broadcast:", v94, 0, v112, v95, v107);

        v79 = v106;
        v29 = v116;
      }
      else
      {
        ++self->_skippedInterDeviceChangeNotifications;
      }
    }
    if (isInternalBuild()
      && skippedInterDeviceChangeNotifications != self->_skippedInterDeviceChangeNotifications)
    {
      v96 = (void *)MEMORY[0x227676638]();
      v97 = self;
      HMFGetOSLogHandle();
      v98 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v98, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v99 = (void *)objc_claimAutoreleasedReturnValue();
        v100 = self->_skippedInterDeviceChangeNotifications;
        *(_DWORD *)buf = 138543618;
        v141 = v99;
        v142 = 2048;
        v143 = v100;
        _os_log_impl(&dword_2218F0000, v98, OS_LOG_TYPE_INFO, "%{public}@Skipped %lu spurious inter-device characteristic change notifications", buf, 0x16u);

      }
      objc_autoreleasePoolPop(v96);
      v29 = v116;
      v79 = v106;
    }

  }
  else
  {
    v41 = v109;
    if (objc_msgSend(v8, "count"))
    {
      v42 = (void *)MEMORY[0x227676638]();
      v43 = self;
      HMFGetOSLogHandle();
      v44 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v44, OS_LOG_TYPE_DEBUG))
      {
        HMFGetLogIdentifier();
        v45 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543362;
        v141 = v45;
        _os_log_impl(&dword_2218F0000, v44, OS_LOG_TYPE_DEBUG, "%{public}@No changes to notify remote devices of changed characteristics after filtering", buf, 0xCu);

      }
      objc_autoreleasePoolPop(v42);
      v29 = v116;
    }
  }

}

- (BOOL)_shouldRateLimitChangeNotificationsForCharacteristic:(id)a3
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  int v8;
  void *v9;
  void *v10;
  id v11;
  double v12;
  double v13;
  double v14;
  void *v15;
  void *v16;
  id v17;
  double v18;
  double v19;
  BOOL v20;

  v3 = a3;
  objc_msgSend(v3, "service");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "type");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  if ((objc_msgSend(v5, "isEqualToString:", *MEMORY[0x24BE1B520]) & 1) == 0)
  {

    goto LABEL_13;
  }
  objc_msgSend(v4, "type");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  if (!objc_msgSend(v6, "isEqualToString:", *MEMORY[0x24BE1B870]))
  {
    objc_msgSend(v4, "type");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = objc_msgSend(v7, "isEqualToString:", *MEMORY[0x24BE1B7D0]);

    if (v8)
      goto LABEL_6;
LABEL_13:
    v20 = 0;
    goto LABEL_14;
  }

LABEL_6:
  objc_msgSend(v3, "previousValue");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v10 = v9;
  else
    v10 = 0;
  v11 = v10;

  objc_msgSend(v11, "doubleValue");
  v13 = v12;

  v14 = round(v13 + v13) * 0.5;
  objc_msgSend(v3, "value");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v16 = v15;
  else
    v16 = 0;
  v17 = v16;

  objc_msgSend(v17, "doubleValue");
  v19 = v18;

  v20 = vabdd_f64(v14, round(v19 + v19) * 0.5) < 2.22044605e-16;
LABEL_14:

  return v20;
}

- (id)_characteristicUpdatesByDestinationForNotificationRegistryDestinations:(id)a3 bulletinDestinations:(id)a4 broadcast:(BOOL)a5
{
  id v8;
  id v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  void *v23;
  _QWORD v25[4];
  id v26;
  id v27;
  id v28;
  id v29;
  HMDHome *v30;
  id v31;
  BOOL v32;

  v8 = a3;
  v9 = a4;
  objc_msgSend(v9, "allKeys");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHome _pushTokenToDestinationMappingForDestinations:](self, "_pushTokenToDestinationMappingForDestinations:", v10);
  v11 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v8, "allKeys");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHome _pushTokenToDestinationMappingForDestinations:](self, "_pushTokenToDestinationMappingForDestinations:", v12);
  v13 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(MEMORY[0x24BDBCEF0], "set");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "allKeys");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v14, "addObjectsFromArray:", v15);

  objc_msgSend(v13, "allKeys");
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v14, "addObjectsFromArray:", v16);

  objc_msgSend(MEMORY[0x24BDBCED8], "dictionary");
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  v25[0] = MEMORY[0x24BDAC760];
  v25[1] = 3221225472;
  v25[2] = __113__HMDHome__characteristicUpdatesByDestinationForNotificationRegistryDestinations_bulletinDestinations_broadcast___block_invoke;
  v25[3] = &unk_24E776AB8;
  v26 = v11;
  v27 = v9;
  v28 = v13;
  v29 = v8;
  v32 = a5;
  v30 = self;
  v31 = v17;
  v18 = v17;
  v19 = v8;
  v20 = v13;
  v21 = v9;
  v22 = v11;
  objc_msgSend(v14, "hmf_enumerateWithAutoreleasePoolUsingBlock:", v25);
  v23 = (void *)objc_msgSend(v18, "copy");

  return v23;
}

- (id)_pushTokenToDestinationMappingForDestinations:(id)a3
{
  void *v4;
  id v5;
  void *v6;
  id v7;
  void *v8;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, void *);
  void *v13;
  HMDHome *v14;
  id v15;

  v4 = (void *)MEMORY[0x24BDBCED8];
  v5 = a3;
  objc_msgSend(v4, "dictionary");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = MEMORY[0x24BDAC760];
  v11 = 3221225472;
  v12 = __57__HMDHome__pushTokenToDestinationMappingForDestinations___block_invoke;
  v13 = &unk_24E7868F0;
  v14 = self;
  v15 = v6;
  v7 = v6;
  objc_msgSend(v5, "hmf_enumerateWithAutoreleasePoolUsingBlock:", &v10);

  v8 = (void *)objc_msgSend(v7, "copy", v10, v11, v12, v13, v14);
  return v8;
}

- (id)_characteristicUpdatesForChangedCharacteristics:(id)a3 bulletinCharacteristics:(id)a4 broadcast:(BOOL)a5
{
  id v8;
  id v9;
  void *v10;
  _QWORD v12[4];
  id v13;
  HMDHome *v14;
  BOOL v15;

  v8 = a4;
  v12[0] = MEMORY[0x24BDAC760];
  v12[1] = 3221225472;
  v12[2] = __93__HMDHome__characteristicUpdatesForChangedCharacteristics_bulletinCharacteristics_broadcast___block_invoke;
  v12[3] = &unk_24E776AE0;
  v13 = v8;
  v14 = self;
  v15 = a5;
  v9 = v8;
  objc_msgSend(a3, "na_map:", v12);
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  return v10;
}

- (BOOL)_shouldUseAttributeReportForBulletin:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  int v7;
  void *v8;
  HMDHome *v9;
  NSObject *v10;
  void *v11;
  BOOL v12;
  int v14;
  void *v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  v4 = a3;
  if ((_os_feature_enabled_impl() & 1) == 0
    && (_os_feature_enabled_impl() & 1) == 0
    && !CFPreferencesGetAppBooleanValue(CFSTR("MatterTTU"), CFSTR("/Library/Managed Preferences/mobile/com.apple.homed.plist"), 0))
  {
    goto LABEL_10;
  }
  objc_msgSend(v4, "accessory");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  if ((objc_msgSend(v5, "supportsCHIP") & 1) == 0)
  {

    goto LABEL_10;
  }
  objc_msgSend(v4, "type");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = objc_msgSend(v6, "isEqualToString:", *MEMORY[0x24BDD5850]);

  if (!v7)
  {
LABEL_10:
    v12 = 1;
    goto LABEL_11;
  }
  v8 = (void *)MEMORY[0x227676638]();
  v9 = self;
  HMFGetOSLogHandle();
  v10 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v14 = 138543362;
    v15 = v11;
    _os_log_impl(&dword_2218F0000, v10, OS_LOG_TYPE_INFO, "%{public}@Not notifying matter lock characteristic change, this is handled upon receiving event report", (uint8_t *)&v14, 0xCu);

  }
  objc_autoreleasePoolPop(v8);
  v12 = 0;
LABEL_11:

  return v12;
}

- (void)saveAttributedUserUUID:(id)a3 forTargetStateCharacteristic:(id)a4
{
  id v6;
  id v7;
  void *v8;
  HMDBulletinUserAttributionManager *v9;
  void *v10;
  HMDBulletinUserAttributionManager *v11;
  id v12;

  v6 = a4;
  v7 = a3;
  -[HMDHome bulletinUserAttributionManager](self, "bulletinUserAttributionManager");
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v8)
  {
    v9 = [HMDBulletinUserAttributionManager alloc];
    +[HMDAccountRegistry sharedRegistry](HMDAccountRegistry, "sharedRegistry");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v11 = -[HMDBulletinUserAttributionManager initWithAccountRegistry:](v9, "initWithAccountRegistry:", v10);
    -[HMDHome setBulletinUserAttributionManager:](self, "setBulletinUserAttributionManager:", v11);

  }
  -[HMDHome bulletinUserAttributionManager](self, "bulletinUserAttributionManager");
  v12 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v12, "saveAttributedUserUUID:forTargetStateCharacteristic:", v7, v6);

}

- (id)_userForDevice:(id)a3
{
  id v4;
  void *v5;
  id v6;
  void *v7;
  _QWORD v9[4];
  id v10;

  v4 = a3;
  -[HMDHome users](self, "users");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v9[0] = MEMORY[0x24BDAC760];
  v9[1] = 3221225472;
  v9[2] = __26__HMDHome__userForDevice___block_invoke;
  v9[3] = &unk_24E776B08;
  v10 = v4;
  v6 = v4;
  objc_msgSend(v5, "hmf_objectPassingTest:", v9);
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  return v7;
}

- (BOOL)_shouldSendToDestination:(id)a3 device:(id)a4 remoteSourceDevice:(id)a5
{
  id v8;
  id v9;
  id v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  HMDHome *v16;
  NSObject *v17;
  void *v18;
  const char *v19;
  NSObject *v20;
  os_log_type_t v21;
  void *v22;
  void *v23;
  void *v24;
  char v25;
  void *v26;
  int v27;
  uint64_t v28;
  void *v29;
  void *v30;
  uint64_t v31;
  void *v32;
  char v33;
  BOOL v34;
  int v36;
  void *v37;
  __int16 v38;
  id v39;
  uint64_t v40;

  v40 = *MEMORY[0x24BDAC8D0];
  v8 = a3;
  v9 = a4;
  v10 = a5;
  +[HMDDeviceHandle deviceHandleForDestination:](HMDDeviceHandle, "deviceHandleForDestination:", v8);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  +[HMDAccountRegistry sharedRegistry](HMDAccountRegistry, "sharedRegistry");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v12, "deviceForHandle:", v11);
  v13 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v13, "account");
  v14 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v14)
  {
    v15 = (void *)MEMORY[0x227676638]();
    v16 = self;
    HMFGetOSLogHandle();
    v17 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v13, "shortDescription");
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      v36 = 138543618;
      v37 = v18;
      v38 = 2112;
      v39 = v22;
      _os_log_impl(&dword_2218F0000, v17, OS_LOG_TYPE_INFO, "%{public}@Device %@ has no user attached to it", (uint8_t *)&v36, 0x16u);

LABEL_28:
      goto LABEL_29;
    }
    goto LABEL_29;
  }
  if (v9 && objc_msgSend(v10, "isEqual:", v9))
  {
    v15 = (void *)MEMORY[0x227676638]();
    v16 = self;
    HMFGetOSLogHandle();
    v17 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG))
    {
      HMFGetLogIdentifier();
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      v36 = 138543618;
      v37 = v18;
      v38 = 2112;
      v39 = v8;
      v19 = "%{public}@Skipping device %@ since it is the original sender";
LABEL_9:
      v20 = v17;
      v21 = OS_LOG_TYPE_DEBUG;
LABEL_27:
      _os_log_impl(&dword_2218F0000, v20, v21, v19, (uint8_t *)&v36, 0x16u);
      goto LABEL_28;
    }
    goto LABEL_29;
  }
  if (objc_msgSend(v13, "isCurrentDevice"))
  {
    v15 = (void *)MEMORY[0x227676638]();
    v16 = self;
    HMFGetOSLogHandle();
    v17 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG))
    {
      HMFGetLogIdentifier();
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      v36 = 138543618;
      v37 = v18;
      v38 = 2112;
      v39 = v8;
      v19 = "%{public}@Skipping device %@ - ourselves";
      goto LABEL_9;
    }
LABEL_29:

    objc_autoreleasePoolPop(v15);
    v34 = 0;
    goto LABEL_30;
  }
  -[HMDHome localCapabilitiesDataSource](self, "localCapabilitiesDataSource");
  v23 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v23, "isCompanionCapable"))
  {

  }
  else
  {
    -[HMDHome residentDeviceManager](self, "residentDeviceManager");
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    v25 = objc_msgSend(v24, "isCurrentDeviceAvailableResident");

    if ((v25 & 1) == 0)
    {
      ++self->_skippedInterDeviceChangeNotifications;
      v15 = (void *)MEMORY[0x227676638]();
      v16 = self;
      HMFGetOSLogHandle();
      v17 = objc_claimAutoreleasedReturnValue();
      if (!os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
        goto LABEL_29;
      HMFGetLogIdentifier();
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      v36 = 138543618;
      v37 = v18;
      v38 = 2112;
      v39 = v8;
      v19 = "%{public}@Skipping device %@ since this device is not a companion or enabled resident";
      goto LABEL_26;
    }
  }
  -[HMDHome localCapabilitiesDataSource](self, "localCapabilitiesDataSource");
  v26 = (void *)objc_claimAutoreleasedReturnValue();
  v27 = objc_msgSend(v26, "isCompanionCapable");

  if (v27)
  {
    objc_msgSend(v13, "productInfo");
    v28 = objc_claimAutoreleasedReturnValue();
    if (v28
      && (v29 = (void *)v28,
          objc_msgSend(v13, "productInfo"),
          v30 = (void *)objc_claimAutoreleasedReturnValue(),
          v31 = objc_msgSend(v30, "productClass"),
          v30,
          v29,
          v31 != 5))
    {
      ++self->_skippedInterDeviceChangeNotifications;
      v15 = (void *)MEMORY[0x227676638]();
      v16 = self;
      HMFGetOSLogHandle();
      v17 = objc_claimAutoreleasedReturnValue();
      if (!os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
        goto LABEL_29;
      HMFGetLogIdentifier();
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      v36 = 138543618;
      v37 = v18;
      v38 = 2112;
      v39 = v8;
      v19 = "%{public}@Skipping device %@ since this device is a companion but sending to non-watch";
    }
    else
    {
      -[HMDHome homeManager](self, "homeManager");
      v32 = (void *)objc_claimAutoreleasedReturnValue();
      v33 = objc_msgSend(v32, "isPairedWithWatch");

      if ((v33 & 1) != 0)
        goto LABEL_19;
      ++self->_skippedInterDeviceChangeNotifications;
      v15 = (void *)MEMORY[0x227676638]();
      v16 = self;
      HMFGetOSLogHandle();
      v17 = objc_claimAutoreleasedReturnValue();
      if (!os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
        goto LABEL_29;
      HMFGetLogIdentifier();
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      v36 = 138543618;
      v37 = v18;
      v38 = 2112;
      v39 = v8;
      v19 = "%{public}@Skipping device %@ since this device is a companion but not paired with a watch";
    }
LABEL_26:
    v20 = v17;
    v21 = OS_LOG_TYPE_INFO;
    goto LABEL_27;
  }
LABEL_19:
  v34 = 1;
LABEL_30:

  return v34;
}

- (void)_notifyChangedCharacteristics:(id)a3 withRequestIdentifier:(id)a4 notificationUpdateIdentifier:(id)a5 toUserDeviceAddress:(id)a6 broadcast:(BOOL)a7
{
  _BOOL8 v7;
  id v12;
  id v13;
  id v14;
  id v15;

  v7 = a7;
  v12 = a6;
  v13 = a5;
  v14 = a4;
  +[HMDCharacteristicUpdateTuple characteristicUpdateTuplesWithCharacteristics:isBroadcast:](HMDCharacteristicUpdateTuple, "characteristicUpdateTuplesWithCharacteristics:isBroadcast:", a3, v7);
  v15 = (id)objc_claimAutoreleasedReturnValue();
  -[HMDHome _notifyUpdatedCharacteristic:withRequestIdentifier:notificationUpdateIdentifier:toUserDeviceAddress:completion:](self, "_notifyUpdatedCharacteristic:withRequestIdentifier:notificationUpdateIdentifier:toUserDeviceAddress:completion:", v15, v14, v13, v12, 0);

}

- (void)_sendCoalescedRemoteNotificationsForRequestMessage:(id)a3 accessories:(id)a4
{
  id v6;
  void *v7;
  void *v8;
  id v9;
  int v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  id v15;

  v15 = a4;
  v6 = a3;
  objc_msgSend(v6, "destination");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v8 = v7;
  else
    v8 = 0;
  v9 = v8;

  v10 = objc_msgSend(v6, "isRemote");
  if (v10)
  {
    objc_msgSend(v9, "device");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "remoteDestinationString");
    v12 = (void *)objc_claimAutoreleasedReturnValue();

    if (v12)
    {
      -[HMDHome notificationHandlerMap](self, "notificationHandlerMap");
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v13, "objectForKey:", v12);
      v14 = (void *)objc_claimAutoreleasedReturnValue();

      objc_msgSend(v14, "sendCoalescedRemoteNotificationForAccessories:", v15);
    }
  }

}

- (void)_notifyUpdatedCharacteristic:(id)a3 withRequestIdentifier:(id)a4 notificationUpdateIdentifier:(id)a5 toUserDeviceAddress:(id)a6 completion:(id)a7
{
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  void *v17;
  HMDDeviceNotificationHandler *v18;
  void *v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t i;
  void *v24;
  char v25;
  HMDDeviceNotificationHandler *v26;
  void *v27;
  void *v28;
  id v29;
  id v30;
  void *v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  _BYTE v36[128];
  uint64_t v37;

  v37 = *MEMORY[0x24BDAC8D0];
  v12 = a3;
  v13 = a4;
  v14 = a5;
  v15 = a6;
  v16 = a7;
  if (v15)
  {
    -[HMDHome notificationHandlerMap](self, "notificationHandlerMap");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v17, "objectForKey:", v15);
    v18 = (HMDDeviceNotificationHandler *)objc_claimAutoreleasedReturnValue();

    if (!v18)
    {
      -[HMDHome homeManager](self, "homeManager");
      v32 = 0u;
      v33 = 0u;
      v34 = 0u;
      v35 = 0u;
      v31 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v31, "watchManager");
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v19, "connectedWatches");
      v20 = (void *)objc_claimAutoreleasedReturnValue();

      v21 = objc_msgSend(v20, "countByEnumeratingWithState:objects:count:", &v32, v36, 16);
      if (v21)
      {
        v29 = v14;
        v30 = v12;
        v22 = *(_QWORD *)v33;
        while (2)
        {
          for (i = 0; i != v21; ++i)
          {
            if (*(_QWORD *)v33 != v22)
              objc_enumerationMutation(v20);
            objc_msgSend(*(id *)(*((_QWORD *)&v32 + 1) + 8 * i), "remoteDestinationString");
            v24 = (void *)objc_claimAutoreleasedReturnValue();
            v25 = objc_msgSend(v24, "isEqual:", v15);

            if ((v25 & 1) != 0)
            {
              v21 = 1;
              goto LABEL_13;
            }
          }
          v21 = objc_msgSend(v20, "countByEnumeratingWithState:objects:count:", &v32, v36, 16);
          if (v21)
            continue;
          break;
        }
LABEL_13:
        v14 = v29;
        v12 = v30;
      }

      v26 = [HMDDeviceNotificationHandler alloc];
      -[HMDHome msgDispatcher](self, "msgDispatcher");
      v27 = (void *)objc_claimAutoreleasedReturnValue();
      v18 = -[HMDDeviceNotificationHandler initWithDestination:watchDevice:withRequestIdentifier:messageDispatcher:home:](v26, "initWithDestination:watchDevice:withRequestIdentifier:messageDispatcher:home:", v15, v21, v13, v27, self);

      -[HMDHome notificationHandlerMap](self, "notificationHandlerMap");
      v28 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v28, "setObject:forKey:", v18, v15);

    }
    -[HMDDeviceNotificationHandler sendNotificationForCharacteristicUpdates:withRequestIdentifier:notificationUpdateIdentifier:completion:](v18, "sendNotificationForCharacteristicUpdates:withRequestIdentifier:notificationUpdateIdentifier:completion:", v12, v13, v14, v16);

  }
}

- (void)notifyRemoteUsersOfChangedProperties:(id)a3 requestMessageInformation:(id)a4
{
  id v6;
  id v7;
  NSObject *v8;
  id v9;
  id v10;
  _QWORD block[5];
  id v12;
  id v13;

  v6 = a3;
  v7 = a4;
  -[HMDHome workQueue](self, "workQueue");
  v8 = objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x24BDAC760];
  block[1] = 3221225472;
  block[2] = __74__HMDHome_notifyRemoteUsersOfChangedProperties_requestMessageInformation___block_invoke;
  block[3] = &unk_24E79BBD0;
  block[4] = self;
  v12 = v6;
  v13 = v7;
  v9 = v7;
  v10 = v6;
  dispatch_async(v8, block);

}

- (void)_notifyRemoteUsersOfChangedProperties:(id)a3 requestMessageInformation:(id)a4
{
  id v6;
  id v7;
  void *v8;
  HMDHome *v9;
  NSObject *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __objc2_class **p_superclass;
  uint64_t i;
  uint64_t v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  HMDHome *v28;
  NSObject *v29;
  void *v30;
  void *v31;
  HMDHome *v32;
  HMDHome *v33;
  NSObject *v34;
  void *v35;
  unint64_t v36;
  unint64_t skippedInterDeviceChangeNotifications;
  void *v38;
  id v39;
  HMDHome *v40;
  void *v41;
  void *v42;
  uint64_t v43;
  id obj;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  uint8_t buf[4];
  void *v50;
  __int16 v51;
  unint64_t v52;
  __int16 v53;
  void *v54;
  _BYTE v55[128];
  uint64_t v56;

  v56 = *MEMORY[0x24BDAC8D0];
  v6 = a3;
  v7 = a4;
  v8 = (void *)MEMORY[0x227676638]();
  v9 = self;
  HMFGetOSLogHandle();
  v10 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543362;
    v50 = v11;
    _os_log_impl(&dword_2218F0000, v10, OS_LOG_TYPE_INFO, "%{public}@Notifying users registered with resident of changes in properties", buf, 0xCu);

  }
  objc_autoreleasePoolPop(v8);
  v38 = v7;
  objc_msgSend(v7, "remoteSourceDevice");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHome notificationRegistry](v9, "notificationRegistry");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v13, "destinationsRegisteredForNotificationsForProperties:", v6);
  v14 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(MEMORY[0x24BDBCEF0], "set");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  skippedInterDeviceChangeNotifications = v9->_skippedInterDeviceChangeNotifications;
  objc_msgSend(MEMORY[0x24BDD1880], "UUID");
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v16, "UUIDString");
  v42 = (void *)objc_claimAutoreleasedReturnValue();

  v47 = 0u;
  v48 = 0u;
  v45 = 0u;
  v46 = 0u;
  obj = v14;
  v17 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v45, v55, 16);
  v41 = v12;
  if (v17)
  {
    v18 = v17;
    v19 = *(_QWORD *)v46;
    p_superclass = HMDCameraMetricsSnapshotLogEvent.superclass;
    v39 = v6;
    v40 = v9;
    v43 = *(_QWORD *)v46;
    do
    {
      for (i = 0; i != v18; ++i)
      {
        if (*(_QWORD *)v46 != v19)
          objc_enumerationMutation(obj);
        v22 = *(_QWORD *)(*((_QWORD *)&v45 + 1) + 8 * i);
        objc_msgSend(p_superclass + 144, "deviceWithDestination:", v22);
        v23 = (void *)objc_claimAutoreleasedReturnValue();
        if (v23)
        {
          objc_msgSend(v15, "addObject:", v23);
          if (-[HMDHome _shouldSendToDestination:device:remoteSourceDevice:](v9, "_shouldSendToDestination:device:remoteSourceDevice:", v22, v23, v12))
          {
            v24 = v15;
            -[HMDHome notificationRegistry](v9, "notificationRegistry");
            v25 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v25, "filterProperties:deviceIdsDestination:", v6, v22);
            v26 = (void *)objc_claimAutoreleasedReturnValue();

            if (objc_msgSend(v26, "count"))
            {
              v27 = (void *)MEMORY[0x227676638]();
              v28 = v9;
              HMFGetOSLogHandle();
              v29 = objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v29, OS_LOG_TYPE_INFO))
              {
                HMFGetLogIdentifier();
                v30 = (void *)objc_claimAutoreleasedReturnValue();
                *(_DWORD *)buf = 138543874;
                v50 = v30;
                v51 = 2112;
                v52 = v22;
                v53 = 2112;
                v54 = v42;
                _os_log_impl(&dword_2218F0000, v29, OS_LOG_TYPE_INFO, "%{public}@Fanning out to device %@ with the properties that changed with notificationUpdateIdentifier: %@", buf, 0x20u);

                v6 = v39;
              }

              objc_autoreleasePoolPop(v27);
              -[HMDHome _notifyChangedProperties:withRequestIdentifier:notificationUpdateIdentifier:toUserDeviceAddress:](v28, "_notifyChangedProperties:withRequestIdentifier:notificationUpdateIdentifier:toUserDeviceAddress:", v26, 0, v42, v22);
              v9 = v40;
              v12 = v41;
            }

            v15 = v24;
            v19 = v43;
            p_superclass = (__objc2_class **)(HMDCameraMetricsSnapshotLogEvent + 8);
          }
        }

      }
      v18 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v45, v55, 16);
    }
    while (v18);
  }

  if (isInternalBuild()
    && skippedInterDeviceChangeNotifications != v9->_skippedInterDeviceChangeNotifications)
  {
    v31 = (void *)MEMORY[0x227676638]();
    v32 = v9;
    HMFGetOSLogHandle();
    v33 = v9;
    v34 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v34, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v35 = (void *)objc_claimAutoreleasedReturnValue();
      v36 = v33->_skippedInterDeviceChangeNotifications;
      *(_DWORD *)buf = 138543618;
      v50 = v35;
      v51 = 2048;
      v52 = v36;
      _os_log_impl(&dword_2218F0000, v34, OS_LOG_TYPE_INFO, "%{public}@Skipped %lu spurious inter-device media property change notifications", buf, 0x16u);

      v12 = v41;
    }

    objc_autoreleasePoolPop(v31);
  }

}

- (void)_notifyChangedProperties:(id)a3 withRequestIdentifier:(id)a4 notificationUpdateIdentifier:(id)a5 toUserDeviceAddress:(id)a6
{
  id v10;
  id v11;
  id v12;
  id v13;
  void *v14;
  HMDDeviceNotificationHandler *v15;
  void *v16;
  void *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t i;
  void *v22;
  char v23;
  HMDDeviceNotificationHandler *v24;
  void *v25;
  void *v26;
  void *v27;
  id v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  _BYTE v33[128];
  uint64_t v34;

  v34 = *MEMORY[0x24BDAC8D0];
  v10 = a3;
  v11 = a4;
  v12 = a5;
  v13 = a6;
  if (v13)
  {
    -[HMDHome notificationHandlerMap](self, "notificationHandlerMap");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v14, "objectForKey:", v13);
    v15 = (HMDDeviceNotificationHandler *)objc_claimAutoreleasedReturnValue();

    if (!v15)
    {
      -[HMDHome homeManager](self, "homeManager");
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      v29 = 0u;
      v30 = 0u;
      v31 = 0u;
      v32 = 0u;
      objc_msgSend(v16, "watchManager");
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v17, "connectedWatches");
      v18 = (void *)objc_claimAutoreleasedReturnValue();

      v19 = objc_msgSend(v18, "countByEnumeratingWithState:objects:count:", &v29, v33, 16);
      if (v19)
      {
        v27 = v16;
        v28 = v10;
        v20 = *(_QWORD *)v30;
        while (2)
        {
          for (i = 0; i != v19; ++i)
          {
            if (*(_QWORD *)v30 != v20)
              objc_enumerationMutation(v18);
            objc_msgSend(*(id *)(*((_QWORD *)&v29 + 1) + 8 * i), "remoteDestinationString", v27, v28);
            v22 = (void *)objc_claimAutoreleasedReturnValue();
            v23 = objc_msgSend(v22, "isEqual:", v13);

            if ((v23 & 1) != 0)
            {
              v19 = 1;
              goto LABEL_13;
            }
          }
          v19 = objc_msgSend(v18, "countByEnumeratingWithState:objects:count:", &v29, v33, 16);
          if (v19)
            continue;
          break;
        }
LABEL_13:
        v16 = v27;
        v10 = v28;
      }

      v24 = [HMDDeviceNotificationHandler alloc];
      -[HMDHome msgDispatcher](self, "msgDispatcher");
      v25 = (void *)objc_claimAutoreleasedReturnValue();
      v15 = -[HMDDeviceNotificationHandler initWithDestination:watchDevice:withRequestIdentifier:messageDispatcher:home:](v24, "initWithDestination:watchDevice:withRequestIdentifier:messageDispatcher:home:", v13, v19, v11, v25, self);

      -[HMDHome notificationHandlerMap](self, "notificationHandlerMap");
      v26 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v26, "setObject:forKey:", v15, v13);

    }
    -[HMDDeviceNotificationHandler sendNotificationForMediaProperties:withRequestIdentifier:notificationUpdateIdentifier:](v15, "sendNotificationForMediaProperties:withRequestIdentifier:notificationUpdateIdentifier:", v10, v11, v12);

  }
}

- (void)_handleCharacteristicsChangedNotification:(id)a3
{
  void *v3;
  void *v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  void *v18;
  void *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  void *v29;
  void *v30;
  HMDHome *v31;
  NSObject *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  id v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t i;
  uint64_t v41;
  void *v42;
  void *v43;
  void *v44;
  id v45;
  void *v46;
  void *v47;
  id v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t j;
  void *v52;
  void *v53;
  void *v54;
  void *v55;
  void *v56;
  char v57;
  void *v58;
  void *v59;
  void *v60;
  HMDHome *v61;
  NSObject *v62;
  void *v63;
  void *v64;
  void *v65;
  void *v66;
  void *v67;
  void *v68;
  void *v69;
  HMDHome *v70;
  NSObject *v71;
  void *v72;
  void *v73;
  void *v74;
  void *v75;
  void *v76;
  void *v77;
  BOOL v78;
  void *v79;
  HMDHome *v80;
  NSObject *v81;
  void *v82;
  uint64_t v83;
  void *v84;
  HMDUnexpectedNotificationLogEvent *v85;
  void *v86;
  HMDHome *v87;
  NSObject *v88;
  void *v89;
  void *v90;
  HMDUnexpectedNotificationLogEvent *v91;
  void *v92;
  int v93;
  void *v94;
  HMDHome *v95;
  NSObject *v96;
  void *v97;
  uint64_t v98;
  void *v99;
  void *v100;
  HMDHome *v101;
  NSObject *v102;
  void *v103;
  void *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  void *v108;
  id obj;
  void *v110;
  void *v111;
  void *v112;
  id v113;
  uint64_t v114;
  id v115;
  uint64_t v116;
  void *v117;
  uint64_t v118;
  HMDMediaSessionRequestMessageInformation *v119;
  void *v120;
  void *v121;
  id v122;
  id v123;
  void *v124;
  void *v126;
  void *v127;
  void *v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  _QWORD v133[4];
  id v134;
  id v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  __int128 v150;
  __int128 v151;
  void *v152;
  _BYTE v153[128];
  uint8_t v154[128];
  uint8_t buf[4];
  void *v156;
  __int16 v157;
  uint64_t v158;
  __int16 v159;
  void *v160;
  _BYTE v161[128];
  _BYTE v162[128];
  _BYTE v163[128];
  uint64_t v164;

  v164 = *MEMORY[0x24BDAC8D0];
  v122 = a3;
  objc_msgSend(v122, "dictionaryForKey:", CFSTR("kCharacteristicNotificationsKey"));
  v111 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v122, "stringForKey:", CFSTR("kRequestIdentifierKey"));
  v112 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x24BDBCEB8], "array");
  v126 = (void *)objc_claimAutoreleasedReturnValue();
  if (v112)
  {
    -[HMDHome accessoryReaderWriter](self, "accessoryReaderWriter");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "handleRemotelyUpdatedCharacteristicsMessage:", v122);

    v108 = (void *)objc_msgSend(objc_alloc(MEMORY[0x24BDD1880]), "initWithUUIDString:", v112);
    -[HMDHome pendingResponses](self, "pendingResponses");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "objectForKeyedSubscript:", v112);
    v120 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(MEMORY[0x24BDBCEB8], "array");
    v127 = (void *)objc_claimAutoreleasedReturnValue();
    if (v120)
    {
      v5 = objc_alloc_init(MEMORY[0x24BDD16F0]);
      objc_msgSend(v5, "setNumberStyle:", 1);
      v150 = 0u;
      v151 = 0u;
      v148 = 0u;
      v149 = 0u;
      objc_msgSend(v111, "allKeys");
      obj = (id)objc_claimAutoreleasedReturnValue();
      v107 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v148, v163, 16);
      if (v107)
      {
        v105 = *(_QWORD *)v149;
        do
        {
          v6 = 0;
          do
          {
            if (*(_QWORD *)v149 != v105)
            {
              v7 = v6;
              objc_enumerationMutation(obj);
              v6 = v7;
            }
            v106 = v6;
            v8 = *(_QWORD *)(*((_QWORD *)&v148 + 1) + 8 * v6);
            objc_msgSend(v111, "objectForKeyedSubscript:", v8);
            v9 = (void *)objc_claimAutoreleasedReturnValue();
            objc_opt_class();
            if ((objc_opt_isKindOfClass() & 1) != 0)
              v10 = v9;
            else
              v10 = 0;
            v115 = v10;

            v110 = (void *)objc_msgSend(objc_alloc(MEMORY[0x24BDD1880]), "initWithUUIDString:", v8);
            -[HMDHome accessoryWithUUID:](self, "accessoryWithUUID:", v110);
            v11 = (void *)objc_claimAutoreleasedReturnValue();
            objc_opt_class();
            if ((objc_opt_isKindOfClass() & 1) != 0)
              v12 = v11;
            else
              v12 = 0;
            v13 = v12;

            v146 = 0u;
            v147 = 0u;
            v144 = 0u;
            v145 = 0u;
            objc_msgSend(v115, "allKeys");
            v113 = (id)objc_claimAutoreleasedReturnValue();
            v116 = objc_msgSend(v113, "countByEnumeratingWithState:objects:count:", &v144, v162, 16);
            if (v116)
            {
              v114 = *(_QWORD *)v145;
              do
              {
                v14 = 0;
                do
                {
                  if (*(_QWORD *)v145 != v114)
                  {
                    v15 = v14;
                    objc_enumerationMutation(v113);
                    v14 = v15;
                  }
                  v118 = v14;
                  v16 = *(_QWORD *)(*((_QWORD *)&v144 + 1) + 8 * v14);
                  objc_msgSend(v115, "objectForKeyedSubscript:", v16);
                  v17 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_opt_class();
                  if ((objc_opt_isKindOfClass() & 1) != 0)
                    v18 = v17;
                  else
                    v18 = 0;
                  v123 = v18;

                  objc_msgSend(v5, "numberFromString:", v16);
                  v19 = (void *)objc_claimAutoreleasedReturnValue();
                  v20 = objc_msgSend(v120, "pendingResponseCount");
                  if (v20 >= objc_msgSend(v123, "count"))
                  {
                    v22 = objc_msgSend(v123, "count");
                    v21 = objc_msgSend(v120, "pendingResponseCount") - v22;
                  }
                  else
                  {
                    v21 = 0;
                  }
                  objc_msgSend(v120, "setPendingResponseCount:", v21);
                  v142 = 0u;
                  v143 = 0u;
                  v140 = 0u;
                  v141 = 0u;
                  objc_msgSend(v123, "allKeys");
                  v23 = (void *)objc_claimAutoreleasedReturnValue();
                  v24 = objc_msgSend(v23, "countByEnumeratingWithState:objects:count:", &v140, v161, 16);
                  if (v24)
                  {
                    v25 = 0;
                    v26 = *(_QWORD *)v141;
                    do
                    {
                      v27 = 0;
                      v28 = v25;
                      do
                      {
                        if (*(_QWORD *)v141 != v26)
                          objc_enumerationMutation(v23);
                        objc_msgSend(v5, "numberFromString:", *(_QWORD *)(*((_QWORD *)&v140 + 1) + 8 * v27));
                        v29 = (void *)objc_claimAutoreleasedReturnValue();
                        objc_msgSend(v13, "findCharacteristic:forService:", v29, v19);
                        v25 = (void *)objc_claimAutoreleasedReturnValue();

                        if (v25)
                        {
                          objc_msgSend(v127, "addObject:", v25);
                          if (objc_msgSend(v25, "isNotificationEnabledForClientIdentifierPrefix:", CFSTR("com.apple.HomeKitDaemon.Local")))objc_msgSend(v126, "addObject:", v25);
                        }

                        ++v27;
                        v28 = v25;
                      }
                      while (v24 != v27);
                      v24 = objc_msgSend(v23, "countByEnumeratingWithState:objects:count:", &v140, v161, 16);
                    }
                    while (v24);

                  }
                  v14 = v118 + 1;
                }
                while (v118 + 1 != v116);
                v116 = objc_msgSend(v113, "countByEnumeratingWithState:objects:count:", &v144, v162, 16);
              }
              while (v116);
            }

            v6 = v106 + 1;
          }
          while (v106 + 1 != v107);
          v107 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v148, v163, 16);
        }
        while (v107);
      }

      v30 = (void *)MEMORY[0x227676638]();
      v31 = self;
      HMFGetOSLogHandle();
      v32 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v32, OS_LOG_TYPE_DEBUG))
      {
        HMFGetLogIdentifier();
        v33 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543874;
        v156 = v33;
        v157 = 2112;
        v158 = (uint64_t)v112;
        v159 = 2112;
        v160 = v111;
        _os_log_impl(&dword_2218F0000, v32, OS_LOG_TYPE_DEBUG, "%{public}@Notifying changes for requestIdentifier %@: %@", buf, 0x20u);

      }
      objc_autoreleasePoolPop(v30);
      v34 = (void *)MEMORY[0x227676638]();
      -[HMDHome _splitCharacteristicChanges:changedAccessories:](v31, "_splitCharacteristicChanges:changedAccessories:", v127, v111);
      v35 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v120, "requestMessage");
      v36 = (void *)objc_claimAutoreleasedReturnValue();
      -[HMDHome _sendClientCharacteristicsChangedNotificationWithIdentifier:requestMessage:multiPartResponse:moreInMultiPartResponse:characteristicChanges:completionHandler:](v31, "_sendClientCharacteristicsChangedNotificationWithIdentifier:requestMessage:multiPartResponse:moreInMultiPartResponse:characteristicChanges:completionHandler:", v108, v36, 1, 1, v35, 0);

      objc_autoreleasePoolPop(v34);
    }

    v117 = (void *)MEMORY[0x24BDBD1A8];
  }
  else
  {
    v138 = 0u;
    v139 = 0u;
    v136 = 0u;
    v137 = 0u;
    v37 = v111;
    v38 = objc_msgSend(v37, "countByEnumeratingWithState:objects:count:", &v136, v154, 16);
    if (v38)
    {
      v39 = *(_QWORD *)v137;
      do
      {
        for (i = 0; i != v38; ++i)
        {
          if (*(_QWORD *)v137 != v39)
            objc_enumerationMutation(v37);
          v41 = *(_QWORD *)(*((_QWORD *)&v136 + 1) + 8 * i);
          objc_initWeak((id *)buf, self);
          v42 = (void *)objc_msgSend(objc_alloc(MEMORY[0x24BDD1880]), "initWithUUIDString:", v41);
          -[HMDHome accessoryWithUUID:](self, "accessoryWithUUID:", v42);
          v43 = (void *)objc_claimAutoreleasedReturnValue();
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) != 0)
            v44 = v43;
          else
            v44 = 0;
          v45 = v44;

          objc_msgSend(v37, "hmf_dictionaryForKey:", v41);
          v46 = (void *)objc_claimAutoreleasedReturnValue();
          -[HMDHome workQueue](self, "workQueue");
          v47 = (void *)objc_claimAutoreleasedReturnValue();
          v133[0] = MEMORY[0x24BDAC760];
          v133[1] = 3221225472;
          v133[2] = __53__HMDHome__handleCharacteristicsChangedNotification___block_invoke;
          v133[3] = &unk_24E777C90;
          objc_copyWeak(&v135, (id *)buf);
          v134 = v122;
          objc_msgSend(v45, "handleMultipleCharacteristicsUpdated:message:completionQueue:completionHandler:", v46, v134, v47, v133);

          objc_destroyWeak(&v135);
          objc_destroyWeak((id *)buf);
        }
        v38 = objc_msgSend(v37, "countByEnumeratingWithState:objects:count:", &v136, v154, 16);
      }
      while (v38);
    }

    -[HMDHome _unexpectedCharacteristicsFromCharacteristicNotifications:](self, "_unexpectedCharacteristicsFromCharacteristicNotifications:", v37);
    v117 = (void *)objc_claimAutoreleasedReturnValue();
  }
  objc_msgSend(MEMORY[0x24BDBCEB8], "array");
  v128 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v122, "dictionaryForKey:", CFSTR("HMDDeviceNotificationActionSetsKey"));
  v121 = (void *)objc_claimAutoreleasedReturnValue();
  +[HMDActionSetResponse responsesFromSerializedResponses:](HMDActionSetResponse, "responsesFromSerializedResponses:", v121);
  v131 = 0u;
  v132 = 0u;
  v129 = 0u;
  v130 = 0u;
  v48 = (id)objc_claimAutoreleasedReturnValue();
  v49 = objc_msgSend(v48, "countByEnumeratingWithState:objects:count:", &v129, v153, 16);
  if (v49)
  {
    v50 = *(_QWORD *)v130;
    do
    {
      for (j = 0; j != v49; ++j)
      {
        if (*(_QWORD *)v130 != v50)
          objc_enumerationMutation(v48);
        v52 = *(void **)(*((_QWORD *)&v129 + 1) + 8 * j);
        objc_msgSend(v52, "actionSetUUID");
        v53 = (void *)objc_claimAutoreleasedReturnValue();
        -[HMDHome actionSetWithUUID:](self, "actionSetWithUUID:", v53);
        v54 = (void *)objc_claimAutoreleasedReturnValue();

        if (v54)
        {
          -[HMDHome actionSetStateSubscriptionManager](self, "actionSetStateSubscriptionManager");
          v55 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v54, "uuid");
          v56 = (void *)objc_claimAutoreleasedReturnValue();
          v57 = objc_msgSend(v55, "isMonitoringActionSet:", v56);

          if ((v57 & 1) != 0)
          {
            -[HMDHome actionSetStateSubscriptionManager](self, "actionSetStateSubscriptionManager");
            v58 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v52, "actionSetUUID");
            v59 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v58, "actionSetStateDidChange:state:", v59, objc_msgSend(v52, "state"));

          }
          else
          {
            objc_msgSend(v54, "uuid");
            v67 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v67, "UUIDString");
            v68 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v128, "addObject:", v68);

            v69 = (void *)MEMORY[0x227676638]();
            v70 = self;
            HMFGetOSLogHandle();
            v71 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v71, OS_LOG_TYPE_DEFAULT))
            {
              HMFGetLogIdentifier();
              v72 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v52, "actionSetUUID");
              v73 = (void *)objc_claimAutoreleasedReturnValue();
              *(_DWORD *)buf = 138543618;
              v156 = v72;
              v157 = 2112;
              v158 = (uint64_t)v73;
              _os_log_impl(&dword_2218F0000, v71, OS_LOG_TYPE_DEFAULT, "%{public}@Got action set response for unregistered action set %@", buf, 0x16u);

            }
            objc_autoreleasePoolPop(v69);
          }
        }
        else
        {
          v60 = (void *)MEMORY[0x227676638]();
          v61 = self;
          HMFGetOSLogHandle();
          v62 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v62, OS_LOG_TYPE_ERROR))
          {
            HMFGetLogIdentifier();
            v63 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v52, "actionSetUUID");
            v64 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 138543618;
            v156 = v63;
            v157 = 2112;
            v158 = (uint64_t)v64;
            _os_log_impl(&dword_2218F0000, v62, OS_LOG_TYPE_ERROR, "%{public}@Got action set response for unknown action set %@", buf, 0x16u);

          }
          objc_autoreleasePoolPop(v60);
          objc_msgSend(0, "uuid");
          v65 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v65, "UUIDString");
          v66 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v128, "addObject:", v66);

        }
      }
      v49 = objc_msgSend(v48, "countByEnumeratingWithState:objects:count:", &v129, v153, 16);
    }
    while (v49);
  }

  objc_msgSend(v122, "dictionaryForKey:", CFSTR("kMediaNotificationsKey"));
  v74 = (void *)objc_claimAutoreleasedReturnValue();
  +[HMDMediaPropertyResponse responsesFromSerializedResponse:requests:home:](HMDMediaPropertyResponse, "responsesFromSerializedResponse:requests:home:", v74, 0, self);
  v75 = (void *)objc_claimAutoreleasedReturnValue();
  v119 = -[HMDMediaSessionRequestMessageInformation initWithMessage:]([HMDMediaSessionRequestMessageInformation alloc], "initWithMessage:", v122);
  -[HMDHome updateMediaStateWithResponses:requestMessageInformation:]((uint64_t)self, v75, v119);
  objc_msgSend(v122, "remoteSourceDevice");
  v76 = (void *)objc_claimAutoreleasedReturnValue();
  if (-[HMDHome _shouldRegisterForNotificationsWithDevice:](self, "_shouldRegisterForNotificationsWithDevice:", v76))
  {
    -[HMDHome primaryResident](self, "primaryResident");
    v124 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v124, "device");
    v77 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v76, "isEqual:", v77))
    {
      v78 = objc_msgSend(v117, "count") == 0;

      if (!v78)
      {
        v79 = (void *)MEMORY[0x227676638]();
        v80 = self;
        HMFGetOSLogHandle();
        v81 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v81, OS_LOG_TYPE_INFO))
        {
          HMFGetLogIdentifier();
          v82 = (void *)objc_claimAutoreleasedReturnValue();
          v83 = objc_msgSend(v117, "count");
          *(_DWORD *)buf = 138543618;
          v156 = v82;
          v157 = 2048;
          v158 = v83;
          _os_log_impl(&dword_2218F0000, v81, OS_LOG_TYPE_INFO, "%{public}@Disabling %tu registrations with primary resident due to unexpected characteristic notification received", buf, 0x16u);

        }
        objc_autoreleasePoolPop(v79);
        -[HMDHome logEventSubmitter](v80, "logEventSubmitter");
        v84 = (void *)objc_claimAutoreleasedReturnValue();
        v85 = -[HMDUnexpectedNotificationLogEvent initWithCount:]([HMDUnexpectedNotificationLogEvent alloc], "initWithCount:", 1);
        objc_msgSend(v84, "submitLogEvent:", v85);

        -[HMDHome _remotelySetNotificationsEnabled:forCharacteristics:characteristicChangeThresholds:](v80, "_remotelySetNotificationsEnabled:forCharacteristics:characteristicChangeThresholds:", 0, v117, 0);
      }
    }
    else
    {

    }
    if (objc_msgSend(v126, "count"))
    {
      if (-[HMDHome isCurrentDeviceAvailableResident](self, "isCurrentDeviceAvailableResident"))
      {
        if (!-[HMDHome isCurrentDevicePrimaryResident](self, "isCurrentDevicePrimaryResident"))
        {
          objc_msgSend(v124, "device");
          v92 = (void *)objc_claimAutoreleasedReturnValue();
          v93 = objc_msgSend(v76, "isEqual:", v92);

          if (v93)
          {
            v94 = (void *)MEMORY[0x227676638]();
            v95 = self;
            HMFGetOSLogHandle();
            v96 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v96, OS_LOG_TYPE_INFO))
            {
              HMFGetLogIdentifier();
              v97 = (void *)objc_claimAutoreleasedReturnValue();
              v98 = objc_msgSend(v126, "count");
              *(_DWORD *)buf = 138543874;
              v156 = v97;
              v157 = 2048;
              v158 = v98;
              v159 = 2112;
              v160 = v126;
              _os_log_impl(&dword_2218F0000, v96, OS_LOG_TYPE_INFO, "%{public}@Disabling %tu notifications on primary resident: %@", buf, 0x20u);

            }
            objc_autoreleasePoolPop(v94);
            -[HMDHome _remotelySetNotificationsEnabled:forCharacteristics:characteristicChangeThresholds:](v95, "_remotelySetNotificationsEnabled:forCharacteristics:characteristicChangeThresholds:", 0, v126, 0);
          }
        }
      }
    }
    -[HMDHome _disablePayloadFromRemotelyUpdatedCharacteristicNotifications:](self, "_disablePayloadFromRemotelyUpdatedCharacteristicNotifications:", v111);
    v99 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v99, "count") || objc_msgSend(v128, "count"))
    {
      v100 = (void *)MEMORY[0x227676638]();
      v101 = self;
      HMFGetOSLogHandle();
      v102 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v102, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v103 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v76, "shortDescription");
        v104 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        v156 = v103;
        v157 = 2112;
        v158 = (uint64_t)v104;
        _os_log_impl(&dword_2218F0000, v102, OS_LOG_TYPE_INFO, "%{public}@Modifying notification registrations due to unexpected characteristic notification received on primary resident from remote device: %@", buf, 0x16u);

      }
      objc_autoreleasePoolPop(v100);
      -[HMDHome _modifyCharacteristicNotifications:characteristicChangeThresholds:mediaNotifications:actionSetNotificationPayload:enableNotification:withDevice:](v101, "_modifyCharacteristicNotifications:characteristicChangeThresholds:mediaNotifications:actionSetNotificationPayload:enableNotification:withDevice:", v99, MEMORY[0x24BDBD1B8], MEMORY[0x24BDBD1B8], v128, 0, v76);
    }

  }
  else
  {
    v86 = (void *)MEMORY[0x227676638]();
    v87 = self;
    HMFGetOSLogHandle();
    v88 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v88, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v89 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v156 = v89;
      v157 = 2112;
      v158 = (uint64_t)v76;
      _os_log_impl(&dword_2218F0000, v88, OS_LOG_TYPE_INFO, "%{public}@Disabling notification registrations with resident: %@ due to unexpected characteristic notification received", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v86);
    -[HMDHome logEventSubmitter](v87, "logEventSubmitter");
    v90 = (void *)objc_claimAutoreleasedReturnValue();
    v91 = -[HMDUnexpectedNotificationLogEvent initWithCount:]([HMDUnexpectedNotificationLogEvent alloc], "initWithCount:", 1);
    objc_msgSend(v90, "submitLogEvent:", v91);

    v152 = v76;
    objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", &v152, 1);
    v124 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHome _disableNotificationsForDevices:](v87, "_disableNotificationsForDevices:", v124);
  }

  objc_msgSend(v122, "respondWithPayload:", 0);
}

- (id)_disablePayloadFromRemotelyUpdatedCharacteristicNotifications:(id)a3
{
  id v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  void *v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v31;
  uint64_t v32;
  HMDHome *v33;
  id v34;
  uint64_t v35;
  id v36;
  id obj;
  uint64_t v38;
  void *v39;
  id v40;
  uint64_t v41;
  void *v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  _BYTE v55[128];
  _BYTE v56[128];
  _BYTE v57[128];
  uint64_t v58;

  v58 = *MEMORY[0x24BDAC8D0];
  v4 = a3;
  if (-[HMDHome isCurrentDeviceConfirmedPrimaryResident](self, "isCurrentDeviceConfirmedPrimaryResident"))
  {
    objc_msgSend(MEMORY[0x24BDBCED8], "dictionary");
    v31 = (void *)objc_claimAutoreleasedReturnValue();
    v5 = objc_alloc_init(MEMORY[0x24BDD16F0]);
    objc_msgSend(v5, "setNumberStyle:", 1);
    v53 = 0u;
    v54 = 0u;
    v51 = 0u;
    v52 = 0u;
    objc_msgSend(v4, "allKeys");
    obj = (id)objc_claimAutoreleasedReturnValue();
    v6 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v51, v57, 16);
    if (v6)
    {
      v7 = v6;
      v8 = *(_QWORD *)v52;
      v9 = 0x24BDBC000uLL;
      v10 = 0x24BDD1000uLL;
      v33 = self;
      v34 = v4;
      v32 = *(_QWORD *)v52;
      do
      {
        v11 = 0;
        v35 = v7;
        do
        {
          if (*(_QWORD *)v52 != v8)
            objc_enumerationMutation(obj);
          v38 = v11;
          v12 = *(_QWORD *)(*((_QWORD *)&v51 + 1) + 8 * v11);
          objc_msgSend(*(id *)(v9 + 3768), "array", v31);
          v13 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v4, "hmf_dictionaryForKey:", v12);
          v42 = (void *)objc_claimAutoreleasedReturnValue();
          v39 = (void *)objc_msgSend(objc_alloc(*(Class *)(v10 + 2176)), "initWithUUIDString:", v12);
          -[HMDHome accessoryWithUUID:](self, "accessoryWithUUID:");
          v14 = (void *)objc_claimAutoreleasedReturnValue();
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) != 0)
            v15 = v14;
          else
            v15 = 0;
          v16 = v15;

          if (v16 && (objc_msgSend(v16, "hasBTLELink") & 1) == 0 && objc_msgSend(v16, "hasIPLink"))
          {
            v36 = v16;
            v49 = 0u;
            v50 = 0u;
            v47 = 0u;
            v48 = 0u;
            objc_msgSend(v42, "allKeys");
            v40 = (id)objc_claimAutoreleasedReturnValue();
            v17 = objc_msgSend(v40, "countByEnumeratingWithState:objects:count:", &v47, v56, 16);
            if (v17)
            {
              v18 = v17;
              v41 = *(_QWORD *)v48;
              do
              {
                v19 = 0;
                do
                {
                  if (*(_QWORD *)v48 != v41)
                    objc_enumerationMutation(v40);
                  objc_msgSend(v42, "hmf_dictionaryForKey:", *(_QWORD *)(*((_QWORD *)&v47 + 1) + 8 * v19));
                  v20 = (void *)objc_claimAutoreleasedReturnValue();
                  v43 = 0u;
                  v44 = 0u;
                  v45 = 0u;
                  v46 = 0u;
                  objc_msgSend(v20, "allKeys");
                  v21 = (void *)objc_claimAutoreleasedReturnValue();
                  v22 = objc_msgSend(v21, "countByEnumeratingWithState:objects:count:", &v43, v55, 16);
                  if (v22)
                  {
                    v23 = v22;
                    v24 = *(_QWORD *)v44;
                    do
                    {
                      v25 = 0;
                      do
                      {
                        if (*(_QWORD *)v44 != v24)
                          objc_enumerationMutation(v21);
                        objc_msgSend(v5, "numberFromString:", *(_QWORD *)(*((_QWORD *)&v43 + 1) + 8 * v25));
                        v26 = (void *)objc_claimAutoreleasedReturnValue();
                        if (v26)
                          objc_msgSend(v13, "addObject:", v26);

                        ++v25;
                      }
                      while (v23 != v25);
                      v23 = objc_msgSend(v21, "countByEnumeratingWithState:objects:count:", &v43, v55, 16);
                    }
                    while (v23);
                  }

                  ++v19;
                }
                while (v19 != v18);
                v18 = objc_msgSend(v40, "countByEnumeratingWithState:objects:count:", &v47, v56, 16);
              }
              while (v18);
            }

            self = v33;
            v4 = v34;
            v8 = v32;
            v9 = 0x24BDBC000;
            v10 = 0x24BDD1000;
            v7 = v35;
            v16 = v36;
            if (objc_msgSend(v13, "count"))
            {
              v27 = (void *)objc_msgSend(v13, "copy");
              objc_msgSend(v39, "UUIDString");
              v28 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v31, "setObject:forKeyedSubscript:", v27, v28);

              v7 = v35;
              v16 = v36;
            }
          }

          v11 = v38 + 1;
        }
        while (v38 + 1 != v7);
        v7 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v51, v57, 16);
      }
      while (v7);
    }

    v29 = (void *)objc_msgSend(v31, "copy");
  }
  else
  {
    v29 = (void *)MEMORY[0x24BDBD1B8];
  }

  return v29;
}

- (void)_postInternalNotificationForChangedCharacteristics:(id)a3 previouslyNilChangedCharacteristics:(id)a4 modifiedCharacteristics:(id)a5 changedByThisDevice:(BOOL)a6 residentShouldNotifyPeers:(BOOL)a7 message:(id)a8 broadcast:(BOOL)a9
{
  id v13;
  void *v14;
  HMDHome *v15;
  NSObject *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  HMDHome *v21;
  void *v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  HMDHomePresenceRemote *v32;
  HMDHomePresenceRemote *v33;
  void *v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t i;
  void *v40;
  void *v41;
  void *v42;
  HMDHAPAccessoryNotificationEvent *v43;
  void *v44;
  id v45;
  uint64_t v46;
  id v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t j;
  void *v51;
  void *v52;
  void *v53;
  id v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t k;
  void *v59;
  void *v60;
  void *v61;
  void *v62;
  void *v63;
  void *v64;
  void *v65;
  void *v66;
  uint64_t v67;
  uint64_t m;
  void *v69;
  void *v70;
  void *v71;
  uint64_t v72;
  void *v73;
  uint64_t v74;
  void *v75;
  uint64_t v76;
  void *v77;
  uint64_t v78;
  void *v79;
  void *v80;
  uint64_t v81;
  void *v82;
  uint64_t v83;
  void *v84;
  HMDHome *v85;
  NSObject *v86;
  void *v87;
  void *v88;
  char v89;
  void *v90;
  HMDHome *v91;
  NSObject *v92;
  void *v93;
  void *v94;
  void *v95;
  HMDHome *v96;
  NSObject *v97;
  void *v98;
  void *v99;
  void *v100;
  void *v101;
  void *v102;
  void *v103;
  void *v104;
  HMDHome *v105;
  NSObject *v106;
  void *v107;
  HMDHome *v108;
  void *v109;
  id v110;
  void *v111;
  _BOOL4 v112;
  id v113;
  id v114;
  _BOOL4 v115;
  id obj;
  id v117;
  uint64_t v118;
  void *v119;
  void *v120;
  void *v121;
  uint64_t v122;
  void *v123;
  HMDHome *v124;
  id v125;
  void *v126;
  void *v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  _QWORD v144[5];
  id v145;
  BOOL v146;
  char v147;
  _QWORD v148[5];
  _BYTE v149[128];
  _BYTE v150[128];
  _BYTE v151[128];
  uint8_t v152[128];
  uint8_t buf[4];
  void *v154;
  __int16 v155;
  id v156;
  __int16 v157;
  void *v158;
  __int16 v159;
  void *v160;
  __int16 v161;
  id v162;
  __int16 v163;
  void *v164;
  uint64_t v165;

  v112 = a7;
  v115 = a6;
  v165 = *MEMORY[0x24BDAC8D0];
  v13 = a3;
  v113 = a4;
  v114 = a5;
  v125 = a8;
  v14 = (void *)MEMORY[0x227676638]();
  v15 = self;
  HMFGetOSLogHandle();
  v16 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    HMFBooleanToString();
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    HMFBooleanToString();
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    HMFBooleanToString();
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v125, "shortDescription");
    v21 = v15;
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138544642;
    v154 = v17;
    v155 = 2112;
    v156 = v18;
    v157 = 2112;
    v158 = v19;
    v159 = 2112;
    v160 = v20;
    v161 = 2112;
    v162 = v13;
    v163 = 2112;
    v164 = v22;
    _os_log_impl(&dword_2218F0000, v16, OS_LOG_TYPE_INFO, "%{public}@Posting internal notification and notifying remote users with changedByThisDevice: %@ residentShouldNotifyPeers: %@ broadcast: %@ about changed characteristics: %@ message: %@ ", buf, 0x3Eu);

    v15 = v21;
  }

  objc_autoreleasePoolPop(v14);
  v23 = v125;
  if (!objc_msgSend(v13, "count") && !objc_msgSend(v113, "count"))
    goto LABEL_90;
  objc_msgSend(v125, "dictionaryForKey:", CFSTR("kPresenceDictionaryForNotificationKey"));
  v24 = objc_claimAutoreleasedReturnValue();
  objc_msgSend(v125, "dictionaryForKey:", CFSTR("kPresencePairingIdentifierDictionaryForNotificationKey"));
  v25 = objc_claimAutoreleasedReturnValue();
  v26 = MEMORY[0x24BDAC760];
  v148[0] = MEMORY[0x24BDAC760];
  v148[1] = 3221225472;
  v148[2] = __186__HMDHome__postInternalNotificationForChangedCharacteristics_previouslyNilChangedCharacteristics_modifiedCharacteristics_changedByThisDevice_residentShouldNotifyPeers_message_broadcast___block_invoke;
  v148[3] = &unk_24E798C68;
  v148[4] = v15;
  objc_msgSend(v13, "na_filter:", v148);
  v27 = objc_claimAutoreleasedReturnValue();
  objc_msgSend(v125, "name");
  v28 = (void *)objc_claimAutoreleasedReturnValue();
  v29 = objc_msgSend(v28, "isEqual:", CFSTR("kCharacterisiticsChangedInternalNotificationKey"));

  -[HMDHome accessoryBulletinNotificationManager](v15, "accessoryBulletinNotificationManager");
  v30 = (void *)objc_claimAutoreleasedReturnValue();
  v111 = (void *)v27;
  objc_msgSend(v30, "bulletinCharacteristicsFromChangedCharacteristics:message:", v27, v125);
  v31 = objc_claimAutoreleasedReturnValue();

  v124 = v15;
  v120 = (void *)v25;
  v121 = (void *)v24;
  v119 = (void *)v31;
  if (!v31)
  {
    if (v25)
    {
      v32 = -[HMDHomePresenceRemote initWithPresenceByPairingIdentity:]([HMDHomePresenceRemote alloc], "initWithPresenceByPairingIdentity:", v25);
    }
    else
    {
      if (!v24)
      {
        v33 = 0;
        goto LABEL_12;
      }
      v32 = -[HMDHomePresenceRemote initWithPresenceByUserId:]([HMDHomePresenceRemote alloc], "initWithPresenceByUserId:", v24);
    }
    v33 = v32;
LABEL_12:
    -[HMDHome localCapabilitiesDataSource](v15, "localCapabilitiesDataSource");
    v34 = (void *)objc_claimAutoreleasedReturnValue();
    v35 = objc_msgSend(v34, "supportsBulletinBoard");

    if (v35)
    {
      v144[0] = v26;
      v144[1] = 3221225472;
      v144[2] = __186__HMDHome__postInternalNotificationForChangedCharacteristics_previouslyNilChangedCharacteristics_modifiedCharacteristics_changedByThisDevice_residentShouldNotifyPeers_message_broadcast___block_invoke_2;
      v144[3] = &unk_24E776B30;
      v144[4] = v15;
      v145 = v114;
      v146 = v115;
      v147 = v29;
      -[HMDHome evaluateNotificationConditionForCharacteristics:homePresence:completion:](v15, "evaluateNotificationConditionForCharacteristics:homePresence:completion:", v111, v33, v144);

    }
    goto LABEL_15;
  }
  -[HMDHome _updateBulletinBoardOfChangedCharacteristics:modifiedCharacteristics:changedByThisDevice:changeNotificationFromPrimary:](v15, "_updateBulletinBoardOfChangedCharacteristics:modifiedCharacteristics:changedByThisDevice:changeNotificationFromPrimary:", v31, v114, v115, v29);
LABEL_15:
  objc_msgSend(MEMORY[0x24BDD1650], "weakToStrongObjectsMapTable");
  v127 = (void *)objc_claimAutoreleasedReturnValue();
  v140 = 0u;
  v141 = 0u;
  v142 = 0u;
  v143 = 0u;
  v110 = v13;
  obj = v13;
  v36 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v140, v152, 16);
  if (v36)
  {
    v37 = v36;
    v38 = *(_QWORD *)v141;
    do
    {
      for (i = 0; i != v37; ++i)
      {
        if (*(_QWORD *)v141 != v38)
          objc_enumerationMutation(obj);
        v40 = *(void **)(*((_QWORD *)&v140 + 1) + 8 * i);
        objc_msgSend(v40, "accessory");
        v41 = (void *)objc_claimAutoreleasedReturnValue();
        if (v41)
        {
          objc_msgSend(v127, "objectForKey:", v41);
          v42 = (void *)objc_claimAutoreleasedReturnValue();
          if (!v42)
          {
            objc_msgSend(MEMORY[0x24BDBCEF0], "set");
            v42 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v127, "setObject:forKey:", v42, v41);
          }
          objc_msgSend(v42, "addObject:", v40);
          v43 = -[HMDHAPAccessoryNotificationEvent initWithAccessory:characteristic:]([HMDHAPAccessoryNotificationEvent alloc], "initWithAccessory:characteristic:", v41, v40);
          -[HMDHome logEventSubmitter](v124, "logEventSubmitter");
          v44 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v44, "submitLogEvent:error:", v43, 0);

        }
      }
      v37 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v140, v152, 16);
    }
    while (v37);
  }

  objc_msgSend(MEMORY[0x24BDD1650], "weakToStrongObjectsMapTable");
  v126 = (void *)objc_claimAutoreleasedReturnValue();
  v136 = 0u;
  v137 = 0u;
  v138 = 0u;
  v139 = 0u;
  v45 = v113;
  v46 = objc_msgSend(v45, "countByEnumeratingWithState:objects:count:", &v136, v151, 16);
  v47 = v114;
  if (v46)
  {
    v48 = v46;
    v49 = *(_QWORD *)v137;
    do
    {
      for (j = 0; j != v48; ++j)
      {
        if (*(_QWORD *)v137 != v49)
          objc_enumerationMutation(v45);
        v51 = *(void **)(*((_QWORD *)&v136 + 1) + 8 * j);
        objc_msgSend(v51, "accessory");
        v52 = (void *)objc_claimAutoreleasedReturnValue();
        if (v52)
        {
          objc_msgSend(v126, "objectForKey:", v52);
          v53 = (void *)objc_claimAutoreleasedReturnValue();
          if (!v53)
          {
            objc_msgSend(MEMORY[0x24BDBCEF0], "set");
            v53 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v126, "setObject:forKey:", v53, v52);
          }
          objc_msgSend(v53, "addObject:", v51);

        }
      }
      v48 = objc_msgSend(v45, "countByEnumeratingWithState:objects:count:", &v136, v151, 16);
    }
    while (v48);
  }

  objc_msgSend(MEMORY[0x24BDBCED8], "dictionary");
  v123 = (void *)objc_claimAutoreleasedReturnValue();
  v132 = 0u;
  v133 = 0u;
  v134 = 0u;
  v135 = 0u;
  v54 = v119;
  v55 = objc_msgSend(v54, "countByEnumeratingWithState:objects:count:", &v132, v150, 16);
  if (v55)
  {
    v56 = v55;
    v57 = *(_QWORD *)v133;
    do
    {
      for (k = 0; k != v56; ++k)
      {
        if (*(_QWORD *)v133 != v57)
          objc_enumerationMutation(v54);
        v59 = *(void **)(*((_QWORD *)&v132 + 1) + 8 * k);
        objc_msgSend(v59, "accessory");
        v60 = (void *)objc_claimAutoreleasedReturnValue();
        v61 = v60;
        if (v60)
        {
          objc_msgSend(v60, "uuid");
          v62 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v123, "objectForKeyedSubscript:", v62);
          v63 = (void *)objc_claimAutoreleasedReturnValue();
          if (!v63)
          {
            objc_msgSend(MEMORY[0x24BDBCEF0], "set");
            v63 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v123, "setObject:forKeyedSubscript:", v63, v62);
          }
          objc_msgSend(v63, "addObject:", v59);

        }
      }
      v56 = objc_msgSend(v54, "countByEnumeratingWithState:objects:count:", &v132, v150, 16);
    }
    while (v56);
  }
  v109 = v54;

  objc_msgSend(MEMORY[0x24BDBCEF0], "setWithCapacity:", objc_msgSend(v126, "count") + objc_msgSend(v127, "count"));
  v64 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v127, "hm_allKeys");
  v65 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v64, "addObjectsFromArray:", v65);

  objc_msgSend(v126, "hm_allKeys");
  v66 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v64, "addObjectsFromArray:", v66);

  v130 = 0u;
  v131 = 0u;
  v128 = 0u;
  v129 = 0u;
  v117 = v64;
  v23 = v125;
  v122 = objc_msgSend(v117, "countByEnumeratingWithState:objects:count:", &v128, v149, 16);
  if (v122)
  {
    v67 = MEMORY[0x24BDBD1A8];
    v118 = *(_QWORD *)v129;
    do
    {
      for (m = 0; m != v122; ++m)
      {
        if (*(_QWORD *)v129 != v118)
          objc_enumerationMutation(v117);
        v69 = *(void **)(*((_QWORD *)&v128 + 1) + 8 * m);
        objc_msgSend(MEMORY[0x24BDBCED8], "dictionary");
        v70 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v127, "objectForKey:", v69);
        v71 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v71, "allObjects");
        v72 = objc_claimAutoreleasedReturnValue();
        v73 = (void *)v72;
        if (v72)
          v74 = v72;
        else
          v74 = v67;
        objc_msgSend(v70, "setObject:forKeyedSubscript:", v74, CFSTR("kModifiedCharacteristicsKey"));

        objc_msgSend(v126, "objectForKey:", v69);
        v75 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v75, "allObjects");
        v76 = objc_claimAutoreleasedReturnValue();
        v77 = (void *)v76;
        if (v76)
          v78 = v76;
        else
          v78 = v67;
        objc_msgSend(v70, "setObject:forKeyedSubscript:", v78, CFSTR("HMDModifiedPreviouslyNilValuedCharacteristicsKey"));

        if (v119)
        {
          objc_msgSend(v69, "uuid");
          v79 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v123, "objectForKeyedSubscript:", v79);
          v80 = (void *)objc_claimAutoreleasedReturnValue();

          objc_msgSend(v80, "allObjects");
          v81 = objc_claimAutoreleasedReturnValue();
          v82 = (void *)v81;
          if (v81)
            v83 = v81;
          else
            v83 = v67;
          objc_msgSend(v70, "setObject:forKeyedSubscript:", v83, CFSTR("kCharacteristicsToShowBulletinsKey"));

        }
        else
        {
          v84 = (void *)MEMORY[0x227676638]();
          v85 = v124;
          HMFGetOSLogHandle();
          v86 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v86, OS_LOG_TYPE_INFO))
          {
            HMFGetLogIdentifier();
            v87 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 138543362;
            v154 = v87;
            _os_log_impl(&dword_2218F0000, v86, OS_LOG_TYPE_INFO, "%{public}@Not inserting kCharacteristicsToShowBulletinsKey, had to fall back to legacy evaluation", buf, 0xCu);

          }
          objc_autoreleasePoolPop(v84);
        }
        v23 = v125;
        if (v125)
        {
          objc_msgSend(v125, "name");
          v88 = (void *)objc_claimAutoreleasedReturnValue();
          v89 = objc_msgSend(v88, "isEqualToString:", CFSTR("kCharacterisiticsChangedInternalNotificationKey"));

          if ((v89 & 1) == 0)
          {
            v90 = (void *)MEMORY[0x227676638]();
            v91 = v124;
            HMFGetOSLogHandle();
            v92 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v92, OS_LOG_TYPE_DEBUG))
            {
              HMFGetLogIdentifier();
              v93 = (void *)objc_claimAutoreleasedReturnValue();
              *(_DWORD *)buf = 138543618;
              v154 = v93;
              v155 = 2112;
              v156 = v125;
              _os_log_impl(&dword_2218F0000, v92, OS_LOG_TYPE_DEBUG, "%{public}@Adding user context to changed characteristics notification using message: %@", buf, 0x16u);

            }
            objc_autoreleasePoolPop(v90);
            v23 = v125;
            objc_msgSend(v125, "userForHome:", v91);
            v94 = (void *)objc_claimAutoreleasedReturnValue();
            if (v94)
              goto LABEL_77;
          }
        }
        else if (v115)
        {
          v95 = (void *)MEMORY[0x227676638]();
          v96 = v124;
          HMFGetOSLogHandle();
          v97 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v97, OS_LOG_TYPE_DEBUG))
          {
            HMFGetLogIdentifier();
            v98 = (void *)objc_claimAutoreleasedReturnValue();
            -[HMDHome currentUser](v96, "currentUser");
            v99 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 138543618;
            v154 = v98;
            v155 = 2112;
            v156 = v99;
            _os_log_impl(&dword_2218F0000, v97, OS_LOG_TYPE_DEBUG, "%{public}@Adding user context to changed characteristics notification using currentUser: %@", buf, 0x16u);

            v47 = v114;
          }

          objc_autoreleasePoolPop(v95);
          -[HMDHome currentUser](v96, "currentUser");
          v94 = (void *)objc_claimAutoreleasedReturnValue();
          v23 = 0;
          if (v94)
          {
LABEL_77:
            objc_msgSend(v94, "uuid");
            v100 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v70, "setObject:forKeyedSubscript:", v100, CFSTR("kUserUUIDKey"));

          }
        }
        objc_msgSend(v23, "uuidForKey:", CFSTR("kMessageUserOverrideKey"));
        v101 = (void *)objc_claimAutoreleasedReturnValue();
        if (v101)
          objc_msgSend(v70, "setObject:forKeyedSubscript:", v101, CFSTR("kMessageUserOverrideKey"));
        if (v23)
        {
          objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedInteger:", +[HMDHome sanitizedOriginalSourceForMessage:]((uint64_t)HMDHome, v23));
          v102 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v70, "setObject:forKeyedSubscript:", v102, CFSTR("kMessageSourceForNotificationKey"));

        }
        objc_msgSend(v70, "setObject:forKeyedSubscript:", v47, CFSTR("kModifiedCharacteristicsMapKey"));
        objc_msgSend(v70, "setObject:forKeyedSubscript:", v121, CFSTR("kPresenceDictionaryForNotificationKey"));
        objc_msgSend(v70, "setObject:forKeyedSubscript:", v120, CFSTR("kPresencePairingIdentifierDictionaryForNotificationKey"));
        v103 = (void *)objc_msgSend(v70, "copy");
        logAndPostNotification(CFSTR("HMDAccessoryCharacteristicsChangedNotification"), v69, v103);

        v67 = MEMORY[0x24BDBD1A8];
      }
      v122 = objc_msgSend(v117, "countByEnumeratingWithState:objects:count:", &v128, v149, 16);
    }
    while (v122);
  }

  v13 = v110;
  if (v112
    && -[HMDHome shouldRelayNotificationToRegisteredDevicesForSource:](v124, "shouldRelayNotificationToRegisteredDevicesForSource:", v23))
  {
    v104 = (void *)MEMORY[0x227676638]();
    v105 = v124;
    HMFGetOSLogHandle();
    v106 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v106, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v107 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v154 = v107;
      _os_log_impl(&dword_2218F0000, v106, OS_LOG_TYPE_INFO, "%{public}@Posting notification to remote users since this is a resident device or is paired with a watch", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v104);
    v108 = v105;
    v23 = v125;
    -[HMDHome notifyRemoteUsersOfChangedCharacteristics:message:broadcast:](v108, "notifyRemoteUsersOfChangedCharacteristics:message:broadcast:", obj, v125, a9);
  }

LABEL_90:
}

- (void)notifyOfChangedCharacteristic:(id)a3 changedByThisDevice:(BOOL)a4 residentShouldNotifyPeers:(BOOL)a5 message:(id)a6
{
  id v10;
  id v11;
  NSObject *v12;
  id v13;
  id v14;
  _QWORD v15[5];
  id v16;
  id v17;
  BOOL v18;
  BOOL v19;

  v10 = a3;
  v11 = a6;
  -[HMDHome workQueue](self, "workQueue");
  v12 = objc_claimAutoreleasedReturnValue();
  v15[0] = MEMORY[0x24BDAC760];
  v15[1] = 3221225472;
  v15[2] = __95__HMDHome_notifyOfChangedCharacteristic_changedByThisDevice_residentShouldNotifyPeers_message___block_invoke;
  v15[3] = &unk_24E790140;
  v15[4] = self;
  v16 = v10;
  v18 = a4;
  v19 = a5;
  v17 = v11;
  v13 = v11;
  v14 = v10;
  dispatch_async(v12, v15);

}

- (void)notifyRemoteUsersOfChangedCharacteristics:(id)a3 message:(id)a4 broadcast:(BOOL)a5
{
  id v8;
  id v9;
  NSObject *v10;
  id v11;
  id v12;
  _QWORD v13[5];
  id v14;
  id v15;
  BOOL v16;

  v8 = a3;
  v9 = a4;
  -[HMDHome workQueue](self, "workQueue");
  v10 = objc_claimAutoreleasedReturnValue();
  v13[0] = MEMORY[0x24BDAC760];
  v13[1] = 3221225472;
  v13[2] = __71__HMDHome_notifyRemoteUsersOfChangedCharacteristics_message_broadcast___block_invoke;
  v13[3] = &unk_24E796150;
  v13[4] = self;
  v14 = v8;
  v15 = v9;
  v16 = a5;
  v11 = v9;
  v12 = v8;
  dispatch_async(v10, v13);

}

- (void)_updateBulletinBoardOfChangedCharacteristics:(id)a3 modifiedCharacteristics:(id)a4 changedByThisDevice:(BOOL)a5 changeNotificationFromPrimary:(BOOL)a6
{
  _BOOL8 v6;
  _BOOL8 v7;
  id v9;
  void *v10;
  id v11;

  v6 = a6;
  v7 = a5;
  v11 = a3;
  v9 = a4;
  if (objc_msgSend(v11, "count"))
  {
    +[HMDBulletinBoard sharedBulletinBoard](HMDBulletinBoard, "sharedBulletinBoard");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "insertBulletinsForChangedCharacteristics:modifiedCharacteristics:changedByThisDevice:changeNotificationFromPrimary:completion:", v11, v9, v7, v6, 0);

  }
}

- (void)_sendClientCharacteristicsChangedNotificationWithIdentifier:(id)a3 requestMessage:(id)a4 multiPartResponse:(BOOL)a5 moreInMultiPartResponse:(BOOL)a6 characteristicChanges:(id)a7 completionHandler:(id)a8
{
  _BOOL8 v10;
  id v14;
  void *v15;
  uint64_t v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  uint64_t v23;
  id v24;
  void *v25;
  uint64_t v26;
  void *v27;
  void *v28;
  void *v29;
  HMDHome *v30;
  NSObject *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  dispatch_group_t v38;
  void *v39;
  id v40;
  id v41;
  id v42;
  id v43;
  NSObject *v44;
  id v45;
  void *v46;
  void *v47;
  void *v48;
  NSObject *v49;
  void *v50;
  void *v51;
  void *v52;
  id v53;
  void *v54;
  void *v55;
  id v56;
  id v57;
  void *v58;
  __int128 v59;
  _QWORD block[4];
  id v61;
  _QWORD v62[4];
  id v63;
  id v64;
  id v65;
  id v66;
  NSObject *v67;
  id v68;
  _BYTE *v69;
  uint64_t v70;
  _BYTE buf[24];
  id v72;
  __int16 v73;
  void *v74;
  __int16 v75;
  void *v76;
  __int16 v77;
  void *v78;
  __int16 v79;
  void *v80;
  uint64_t v81;

  v10 = a6;
  v81 = *MEMORY[0x24BDAC8D0];
  v56 = a3;
  v57 = a4;
  v14 = a7;
  v53 = a8;
  v54 = v14;
  objc_msgSend(v14, "objectForKeyedSubscript:", CFSTR("kCharacteristicUpdatesForAllClientsNotificationKey"));
  *((_QWORD *)&v59 + 1) = objc_claimAutoreleasedReturnValue();
  objc_msgSend(v14, "objectForKeyedSubscript:", CFSTR("kCharacteristicUpdatesForEntitledClientsNotificationKey"));
  *(_QWORD *)&v59 = objc_claimAutoreleasedReturnValue();
  if (a5)
  {
    objc_msgSend(MEMORY[0x24BDD16E0], "numberWithBool:", v10);
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    +[HMDCharacteristicResponseNotificationContext responsePayloadForHome:changedAccessories:moreMessagesInMultipart:](HMDCharacteristicResponseNotificationContext, "responsePayloadForHome:changedAccessories:moreMessagesInMultipart:", self, *((_QWORD *)&v59 + 1), v15);
    v52 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    +[HMDCharacteristicResponseNotificationContext responsePayloadForHome:changedAccessories:moreMessagesInMultipart:](HMDCharacteristicResponseNotificationContext, "responsePayloadForHome:changedAccessories:moreMessagesInMultipart:", self, *((_QWORD *)&v59 + 1), 0);
    v52 = (void *)objc_claimAutoreleasedReturnValue();
  }
  if ((_QWORD)v59)
  {
    if (*((_QWORD *)&v59 + 1))
      v16 = *((_QWORD *)&v59 + 1);
    else
      v16 = MEMORY[0x24BDBD1B8];
    objc_msgSend(MEMORY[0x24BDBCED8], "dictionaryWithDictionary:", v16);
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v17, "addEntriesFromDictionary:", (_QWORD)v59);
    v18 = (void *)objc_msgSend(v17, "copy");
    if (a5)
    {
      objc_msgSend(MEMORY[0x24BDD16E0], "numberWithBool:", v10);
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      +[HMDCharacteristicResponseNotificationContext responsePayloadForHome:changedAccessories:moreMessagesInMultipart:](HMDCharacteristicResponseNotificationContext, "responsePayloadForHome:changedAccessories:moreMessagesInMultipart:", self, v18, v19);
      v51 = (void *)objc_claimAutoreleasedReturnValue();

    }
    else
    {
      +[HMDCharacteristicResponseNotificationContext responsePayloadForHome:changedAccessories:moreMessagesInMultipart:](HMDCharacteristicResponseNotificationContext, "responsePayloadForHome:changedAccessories:moreMessagesInMultipart:", self, v18, 0);
      v51 = (void *)objc_claimAutoreleasedReturnValue();
    }

  }
  else
  {
    v51 = 0;
  }
  objc_msgSend(v57, "proxyConnection");
  v55 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x24BDBCEE0], "orderedSet");
  v58 = (void *)objc_claimAutoreleasedReturnValue();
  if (v55)
    objc_msgSend(v58, "addObject:");
  if (v59 != 0)
  {
    -[HMDHome xpcMessageTransportFactory](self, "xpcMessageTransportFactory");
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v20, "defaultTransport");
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v21, "connections");
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v58, "addObjectsFromArray:", v22);

  }
  if (objc_msgSend(v57, "qualityOfService") < 17)
    v23 = 17;
  else
    v23 = objc_msgSend(v57, "qualityOfService");
  v24 = objc_alloc(MEMORY[0x24BE3F1B8]);
  -[HMDHome uuid](self, "uuid");
  v25 = (void *)objc_claimAutoreleasedReturnValue();
  v26 = objc_msgSend(v24, "initWithTarget:", v25);

  v50 = (void *)v26;
  v27 = (void *)objc_msgSend(objc_alloc(MEMORY[0x24BE3F1D0]), "initWithName:qualityOfService:destination:payload:", CFSTR("kMultipleCharacteristicValuesUpdatedNotificationKey"), v23, v26, 0);
  v28 = v27;
  if (v56)
    objc_msgSend(v27, "setIdentifier:");
  v29 = (void *)MEMORY[0x227676638]();
  v30 = self;
  HMFGetOSLogHandle();
  v31 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v31, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v32 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedInteger:", objc_msgSend(v58, "count"));
    v33 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*((id *)&v59 + 1), "count");
    HMFBooleanToString();
    v34 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend((id)v59, "count");
    HMFBooleanToString();
    v35 = (void *)objc_claimAutoreleasedReturnValue();
    HMFBooleanToString();
    v36 = (void *)objc_claimAutoreleasedReturnValue();
    HMFBooleanToString();
    v37 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138544898;
    *(_QWORD *)&buf[4] = v32;
    *(_WORD *)&buf[12] = 2112;
    *(_QWORD *)&buf[14] = v33;
    *(_WORD *)&buf[22] = 2112;
    v72 = v56;
    v73 = 2112;
    v74 = v34;
    v75 = 2112;
    v76 = v35;
    v77 = 2112;
    v78 = v36;
    v79 = 2112;
    v80 = v37;
    _os_log_impl(&dword_2218F0000, v31, OS_LOG_TYPE_INFO, "%{public}@Notifying %@ clients of characteristic changes with message identifier: %@ allClients: %@ entitledClients: %@ multiPartResponse: %@ moreMessagesInMultipart: %@", buf, 0x48u);

  }
  objc_autoreleasePoolPop(v29);
  *(_QWORD *)buf = 0;
  *(_QWORD *)&buf[8] = buf;
  *(_QWORD *)&buf[16] = 0x2020000000;
  LOBYTE(v72) = v53 != 0;
  v38 = dispatch_group_create();
  objc_msgSend(v58, "array");
  v39 = (void *)objc_claimAutoreleasedReturnValue();
  v62[0] = MEMORY[0x24BDAC760];
  v62[1] = 3221225472;
  v62[2] = __168__HMDHome__sendClientCharacteristicsChangedNotificationWithIdentifier_requestMessage_multiPartResponse_moreInMultiPartResponse_characteristicChanges_completionHandler___block_invoke;
  v62[3] = &unk_24E776B58;
  v40 = v51;
  v63 = v40;
  v41 = v28;
  v64 = v41;
  v42 = v52;
  v65 = v42;
  v43 = v55;
  v66 = v43;
  v69 = buf;
  v70 = 34305;
  v44 = v38;
  v67 = v44;
  v45 = v53;
  v68 = v45;
  objc_msgSend(v39, "na_each:", v62);

  -[HMDHome reportingSessionManager](v30, "reportingSessionManager");
  v46 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v41, "messagePayload");
  v47 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v41, "identifier");
  v48 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v46, "addResponseMessagePayload:toSessionWithUUID:", v47, v48);

  if (*(_BYTE *)(*(_QWORD *)&buf[8] + 24))
  {
    -[HMDHome workQueue](v30, "workQueue");
    v49 = objc_claimAutoreleasedReturnValue();
    block[0] = MEMORY[0x24BDAC760];
    block[1] = 3221225472;
    block[2] = __168__HMDHome__sendClientCharacteristicsChangedNotificationWithIdentifier_requestMessage_multiPartResponse_moreInMultiPartResponse_characteristicChanges_completionHandler___block_invoke_3;
    block[3] = &unk_24E799CC8;
    v61 = v45;
    dispatch_group_notify(v44, v49, block);

  }
  _Block_object_dispose(buf, 8);

}

- (void)_notifyChangedCharacteristics:(id)a3 identifier:(id)a4 multiPartResponse:(BOOL)a5 moreMessagesInMultipart:(BOOL)a6 requestMessage:(id)a7 withCompletionHandler:(id)a8
{
  _BOOL8 v10;
  id v13;
  id v14;
  id v15;
  HMDCharacteristicResponseNotificationContext *v16;
  void *v17;
  HMDHome *v18;
  NSObject *v19;
  void *v20;
  id v21;
  void *v22;
  id v23;
  void *v24;
  void *v25;
  id v26;
  _BOOL8 v27;
  void *v28;
  uint64_t v29;
  void *v30;
  id v31;
  void *v32;
  uint64_t v33;
  const void *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  void *v43;
  void *v44;
  void *v45;
  HMDHome *v46;
  NSObject *v47;
  void *v48;
  HMDCharacteristicResponseNotificationContext *v49;
  void *v50;
  void *v51;
  HMDHome *v52;
  NSObject *v53;
  void *v54;
  HMDCharacteristicResponseNotificationContext *v55;
  void *v56;
  void *v57;
  void *v58;
  void *v59;
  void *v60;
  void *v61;
  void *v62;
  void *v63;
  void *v64;
  BOOL v65;
  void *v66;
  char v67;
  void *v68;
  void *v69;
  void *v70;
  void *v71;
  uint64_t v72;
  void *v73;
  id v74;
  void *v75;
  void *v76;
  void *v77;
  void *v78;
  _BOOL4 v79;
  void *v80;
  _BOOL4 v81;
  id aBlock;
  HMDCharacteristicResponseNotificationContext *v83;
  _QWORD v84[4];
  id v85;
  id v86;
  uint8_t buf[4];
  void *v88;
  __int16 v89;
  HMDCharacteristicResponseNotificationContext *v90;
  __int16 v91;
  void *v92;
  __int16 v93;
  void *v94;
  uint64_t v95;

  v10 = a6;
  v81 = a5;
  v95 = *MEMORY[0x24BDAC8D0];
  v13 = a3;
  v14 = a4;
  v15 = a7;
  aBlock = a8;
  v78 = v14;
  v79 = v10;
  v16 = -[HMDCharacteristicResponseNotificationContext initWithRequestIdentifier:responses:pendingMultiPartResponses:]([HMDCharacteristicResponseNotificationContext alloc], "initWithRequestIdentifier:responses:pendingMultiPartResponses:", v14, v13, v10);
  v17 = (void *)MEMORY[0x227676638]();
  v18 = self;
  HMFGetOSLogHandle();
  v19 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
  {
    HMFGetLogIdentifier();
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543618;
    v88 = v20;
    v89 = 2112;
    v90 = v16;
    _os_log_impl(&dword_2218F0000, v19, OS_LOG_TYPE_DEFAULT, "%{public}@Preparing characteristics changed notifications using context: %@", buf, 0x16u);

  }
  objc_autoreleasePoolPop(v17);
  v21 = v15;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v22 = v21;
  else
    v22 = 0;
  v23 = v22;

  objc_msgSend(v21, "destination");
  v24 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v25 = v24;
  else
    v25 = 0;
  v26 = v25;

  v27 = 0;
  if (objc_msgSend(v21, "isRemote") && v26)
    v27 = objc_msgSend(v23, "type") != 2;
  v77 = v23;
  if ((objc_msgSend(v21, "isSingleReadWriteRequest") & 1) != 0)
  {
    objc_msgSend(v13, "firstObject");
    v28 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v28, "characteristicUpdateDictionary");
    v29 = objc_claimAutoreleasedReturnValue();

    if (v27)
      v30 = (void *)v29;
    else
      v30 = 0;
    v31 = v30;
    v32 = 0;
    v80 = (void *)v29;
    v33 = v29;
    v34 = aBlock;
    if (!v27)
      goto LABEL_27;
  }
  else
  {
    -[HMDCharacteristicResponseNotificationContext notificationPayloadByAccessoryUUID](v16, "notificationPayloadByAccessoryUUID");
    v80 = (void *)objc_claimAutoreleasedReturnValue();
    if (!v27)
    {
      v32 = 0;
      goto LABEL_27;
    }
    if (v81)
    {
      objc_msgSend(MEMORY[0x24BDD16E0], "numberWithBool:", v79);
      v35 = (void *)objc_claimAutoreleasedReturnValue();
      +[HMDCharacteristicResponseNotificationContext responsePayloadForHome:changedAccessories:moreMessagesInMultipart:](HMDCharacteristicResponseNotificationContext, "responsePayloadForHome:changedAccessories:moreMessagesInMultipart:", v18, v80, v35);
      v33 = objc_claimAutoreleasedReturnValue();

    }
    else
    {
      +[HMDCharacteristicResponseNotificationContext responsePayloadForHome:changedAccessories:moreMessagesInMultipart:](HMDCharacteristicResponseNotificationContext, "responsePayloadForHome:changedAccessories:moreMessagesInMultipart:", v18, v80, 0);
      v33 = objc_claimAutoreleasedReturnValue();
    }
    v34 = aBlock;
  }
  v36 = _Block_copy(v34);
  v37 = v36;
  if (v36)
    (*((void (**)(void *, _QWORD, uint64_t))v36 + 2))(v36, 0, v33);

  v32 = (void *)v33;
LABEL_27:
  v75 = v32;
  v76 = v26;
  -[HMDCharacteristicResponseNotificationContext changedCharacteristics](v16, "changedCharacteristics");
  v38 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v38, "allObjects");
  v39 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHome _handleMatterLockChangedCharacteristics:message:remoteRequest:](v18, "_handleMatterLockChangedCharacteristics:message:remoteRequest:", v39, v21, v27);

  -[HMDCharacteristicResponseNotificationContext changedCharacteristics](v16, "changedCharacteristics");
  v40 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v40, "allObjects");
  v41 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDCharacteristicResponseNotificationContext previouslyNilChangedCharacteristics](v16, "previouslyNilChangedCharacteristics");
  v42 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v42, "allObjects");
  v43 = (void *)objc_claimAutoreleasedReturnValue();
  LOBYTE(v72) = 0;
  -[HMDHome _postInternalNotificationForChangedCharacteristics:previouslyNilChangedCharacteristics:modifiedCharacteristics:changedByThisDevice:residentShouldNotifyPeers:message:broadcast:](v18, "_postInternalNotificationForChangedCharacteristics:previouslyNilChangedCharacteristics:modifiedCharacteristics:changedByThisDevice:residentShouldNotifyPeers:message:broadcast:", v41, v43, 0, v27 ^ 1, 1, v21, v72);

  v83 = v16;
  -[HMDCharacteristicResponseNotificationContext notificationWithHome:](v16, "notificationWithHome:", v18);
  v44 = (void *)objc_claimAutoreleasedReturnValue();
  if (v44)
  {
    v45 = (void *)MEMORY[0x227676638]();
    v46 = v18;
    HMFGetOSLogHandle();
    v47 = objc_claimAutoreleasedReturnValue();
    v74 = v13;
    if (os_log_type_enabled(v47, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v48 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v44, "name");
      v49 = (HMDCharacteristicResponseNotificationContext *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v44, "object");
      v50 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543874;
      v88 = v48;
      v89 = 2112;
      v90 = v49;
      v91 = 2112;
      v92 = v50;
      _os_log_impl(&dword_2218F0000, v47, OS_LOG_TYPE_INFO, "%{public}@Posting %@ with object: %@", buf, 0x20u);

      v13 = v74;
    }

    objc_autoreleasePoolPop(v45);
    v51 = (void *)MEMORY[0x227676638]();
    v52 = v46;
    HMFGetOSLogHandle();
    v53 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v53, OS_LOG_TYPE_DEBUG))
    {
      HMFGetLogIdentifier();
      v73 = v51;
      v54 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v44, "name");
      v55 = (HMDCharacteristicResponseNotificationContext *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v44, "object");
      v56 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v44, "userInfo");
      v57 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138544130;
      v88 = v54;
      v89 = 2112;
      v90 = v55;
      v91 = 2112;
      v92 = v56;
      v93 = 2112;
      v94 = v57;
      _os_log_impl(&dword_2218F0000, v53, OS_LOG_TYPE_DEBUG, "%{public}@Posting %@ with object: %@, userInfo: %@", buf, 0x2Au);

      v13 = v74;
      v51 = v73;
    }

    objc_autoreleasePoolPop(v51);
    -[HMDHome notificationCenter](v52, "notificationCenter");
    v58 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v58, "postNotification:", v44);

  }
  v59 = (void *)MEMORY[0x227676638]();
  -[HMDCharacteristicResponseNotificationContext responseCharacteristics](v83, "responseCharacteristics");
  v60 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v60, "allObjects");
  v61 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDCharacteristicResponseNotificationContext notificationPayloadByAccessoryUUID](v83, "notificationPayloadByAccessoryUUID");
  v62 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHome _splitCharacteristicChanges:changedAccessories:](v18, "_splitCharacteristicChanges:changedAccessories:", v61, v62);
  v63 = (void *)objc_claimAutoreleasedReturnValue();

  if (v21)
  {
    objc_msgSend(v21, "proxyConnection");
    v64 = (void *)objc_claimAutoreleasedReturnValue();
    v65 = v64 || v27;

    if (!v65)
    {
      v66 = aBlock;
      v71 = _Block_copy(aBlock);
      v70 = v71;
      if (v71)
      {
        v69 = v80;
        (*((void (**)(void *, _QWORD, void *))v71 + 2))(v71, 0, v80);
        v68 = 0;
      }
      else
      {
        v68 = 0;
        v69 = v80;
      }
      goto LABEL_47;
    }
  }
  v66 = aBlock;
  if (aBlock)
    v67 = v27;
  else
    v67 = 1;
  if ((v67 & 1) == 0)
  {
    v84[0] = MEMORY[0x24BDAC760];
    v84[1] = 3221225472;
    v84[2] = __131__HMDHome__notifyChangedCharacteristics_identifier_multiPartResponse_moreMessagesInMultipart_requestMessage_withCompletionHandler___block_invoke;
    v84[3] = &unk_24E79C2B8;
    v86 = aBlock;
    v69 = v80;
    v85 = v80;
    v68 = _Block_copy(v84);

    v70 = v86;
LABEL_47:

    goto LABEL_48;
  }
  v68 = 0;
  v69 = v80;
LABEL_48:
  -[HMDHome _sendClientCharacteristicsChangedNotificationWithIdentifier:requestMessage:multiPartResponse:moreInMultiPartResponse:characteristicChanges:completionHandler:](v18, "_sendClientCharacteristicsChangedNotificationWithIdentifier:requestMessage:multiPartResponse:moreInMultiPartResponse:characteristicChanges:completionHandler:", v78, v21, v81, v79, v63, v68);

  objc_autoreleasePoolPop(v59);
  -[HMDHome _wol_processChangedCharacteristicResponses:](v18, "_wol_processChangedCharacteristicResponses:", v13);

}

- (void)_handleMatterLockChangedCharacteristics:(id)a3 message:(id)a4 remoteRequest:(BOOL)a5
{
  id v8;
  id v9;
  void *v10;
  char v11;
  void *v12;
  void *v13;
  HMDHome *v14;
  NSObject *v15;
  void *v16;
  const char *v17;
  NSObject *v18;
  os_log_type_t v19;
  uint32_t v20;
  void *v21;
  int v22;
  _QWORD v23[5];
  id v24;
  BOOL v25;
  uint8_t buf[4];
  void *v27;
  __int16 v28;
  id v29;
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  v8 = a3;
  v9 = a4;
  -[HMDHome primaryResident](self, "primaryResident");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v11 = objc_msgSend(v10, "isCurrentDevice");

  if ((v11 & 1) != 0)
  {
    objc_msgSend(v9, "name");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v12, "isEqualToString:", CFSTR("kMultipleCharacteristicReadRequestKey")))
    {

    }
    else
    {
      objc_msgSend(v9, "name");
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      v22 = objc_msgSend(v21, "isEqualToString:", CFSTR("kCharacteristicReadRequestKey"));

      if (!v22)
      {
        v23[0] = MEMORY[0x24BDAC760];
        v23[1] = 3221225472;
        v23[2] = __73__HMDHome__handleMatterLockChangedCharacteristics_message_remoteRequest___block_invoke;
        v23[3] = &unk_24E77F868;
        v23[4] = self;
        v24 = v9;
        v25 = a5;
        objc_msgSend(v8, "na_each:", v23);

        goto LABEL_11;
      }
    }
    v13 = (void *)MEMORY[0x227676638]();
    v14 = self;
    HMFGetOSLogHandle();
    v15 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v27 = v16;
      v28 = 2112;
      v29 = v9;
      v17 = "%{public}@_handleMatterLockChangedCharacteristics: We are seeing characteristics changed, but from a charact"
            "eristic read request. This is an error, so we should not show a bulletin. We should not be triggering this p"
            "ath from a read request, so this should be looked into and fixed. message=%@";
      v18 = v15;
      v19 = OS_LOG_TYPE_ERROR;
      v20 = 22;
      goto LABEL_9;
    }
  }
  else
  {
    v13 = (void *)MEMORY[0x227676638]();
    v14 = self;
    HMFGetOSLogHandle();
    v15 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v27 = v16;
      v17 = "%{public}@Not handling Matter lock changed characteristic notification because this device is not the primary resident.";
      v18 = v15;
      v19 = OS_LOG_TYPE_INFO;
      v20 = 12;
LABEL_9:
      _os_log_impl(&dword_2218F0000, v18, v19, v17, buf, v20);

    }
  }

  objc_autoreleasePoolPop(v13);
LABEL_11:

}

- (void)writeCharacteristicValues:(id)a3 source:(unint64_t)a4 identifier:(id)a5 qualityOfService:(int64_t)a6 withCompletionHandler:(id)a7
{
  id v13;
  id v14;
  id v15;
  id v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  NSObject *v21;
  id v22;
  id v23;
  id v24;
  id v25;
  _QWORD block[4];
  id v27;
  id v28;
  id v29;
  id v30;
  id v31[3];
  id location;

  v13 = a3;
  v14 = a5;
  v15 = a7;
  v16 = objc_alloc(MEMORY[0x24BE3F138]);
  v17 = (void *)MEMORY[0x24BDD17C8];
  MEMORY[0x227675180](self, a2);
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v17, "stringWithFormat:", CFSTR("%@, %s:%ld"), v18, "/Library/Caches/com.apple.xbs/Sources/HomeKit_executables/Sources/homed/Home/HMDHome.m", 23884);
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  v20 = (void *)objc_msgSend(v16, "initWithName:", v19);

  objc_initWeak(&location, self);
  -[HMDHome workQueue](self, "workQueue");
  v21 = objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x24BDAC760];
  block[1] = 3221225472;
  block[2] = __94__HMDHome_writeCharacteristicValues_source_identifier_qualityOfService_withCompletionHandler___block_invoke;
  block[3] = &unk_24E776B80;
  objc_copyWeak(v31, &location);
  v27 = v13;
  v28 = v20;
  v29 = v14;
  v30 = v15;
  v31[1] = (id)a4;
  v31[2] = (id)a6;
  v22 = v14;
  v23 = v20;
  v24 = v13;
  v25 = v15;
  dispatch_async(v21, block);

  objc_destroyWeak(v31);
  objc_destroyWeak(&location);
}

- (BOOL)isAccessAllowedForCharacteristicsWithMessage:(id)a3
{
  id v4;
  BOOL v5;
  void *v6;
  HMDHome *v7;
  NSObject *v8;
  void *v9;
  void *v10;
  int v12;
  void *v13;
  __int16 v14;
  void *v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  v4 = a3;
  if (objc_msgSend(v4, "isEntitledForSecureAccess")
    && (objc_msgSend(v4, "isEntitledForSPIAccess") & 1) != 0)
  {
    v5 = 1;
  }
  else
  {
    v6 = (void *)MEMORY[0x227676638]();
    v7 = self;
    HMFGetOSLogHandle();
    v8 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "shortDescription");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      v12 = 138543618;
      v13 = v9;
      v14 = 2112;
      v15 = v10;
      _os_log_impl(&dword_2218F0000, v8, OS_LOG_TYPE_INFO, "%{public}@Insufficient entitlements, access is not allowed for characteristic with message: %@", (uint8_t *)&v12, 0x16u);

    }
    objc_autoreleasePoolPop(v6);
    v5 = 0;
  }

  return v5;
}

- (BOOL)requiresUnlockToAccessCharacteristics:(id)a3 withMessage:(id)a4
{
  id v6;
  char v7;
  _QWORD v9[5];

  v6 = a3;
  if (-[HMDHome applyDeviceLockStatus:](self, "applyDeviceLockStatus:", a4))
  {
    v9[0] = MEMORY[0x24BDAC760];
    v9[1] = 3221225472;
    v9[2] = __61__HMDHome_requiresUnlockToAccessCharacteristics_withMessage___block_invoke;
    v9[3] = &unk_24E798C68;
    v9[4] = self;
    v7 = objc_msgSend(v6, "na_any:", v9);
  }
  else
  {
    v7 = 0;
  }

  return v7;
}

- (id)_createMessageForReadWriteRequest:(id)a3 source:(unint64_t)a4 withCompletionHandler:(id)a5
{
  id v8;
  id v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  id v21;
  id v22;
  _QWORD v24[4];
  id v25;
  HMDHome *v26;
  id v27;
  id v28;
  id location;

  v8 = a3;
  v9 = a5;
  objc_msgSend(v8, "internal");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v11 = (void *)objc_msgSend(v10, "copy");

  objc_msgSend(v11, "messagePayload");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v12, "hmf_numberForKey:", CFSTR("kMessageOriginalSourceKey"));
  v13 = (void *)objc_claimAutoreleasedReturnValue();

  if (v13)
  {
    v14 = 0;
  }
  else
  {
    v14 = (void *)objc_msgSend(v12, "mutableCopy");
    objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedInteger:", a4);
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v14, "setObject:forKeyedSubscript:", v15, CFSTR("kMessageOriginalSourceKey"));

  }
  if (a4 == 1 && !isTVOSDevice())
  {
    objc_msgSend(v8, "userForHome:", self);
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    if (v16)
    {
      if (!v14)
        v14 = (void *)objc_msgSend(v12, "mutableCopy");
      objc_msgSend(v16, "uuid");
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v17, "UUIDString");
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v14, "setObject:forKeyedSubscript:", v18, CFSTR("kMessageUserOverrideKey"));

    }
  }
  if (v14)
  {
    v19 = (void *)objc_msgSend(v14, "copy");
    objc_msgSend(v11, "setMessagePayload:", v19);

  }
  v20 = (void *)objc_msgSend(objc_alloc((Class)objc_opt_class()), "initWithInternalMessage:", v11);

  objc_initWeak(&location, v20);
  v24[0] = MEMORY[0x24BDAC760];
  v24[1] = 3221225472;
  v24[2] = __74__HMDHome__createMessageForReadWriteRequest_source_withCompletionHandler___block_invoke;
  v24[3] = &unk_24E7967C0;
  objc_copyWeak(&v28, &location);
  v21 = v9;
  v27 = v21;
  v22 = v8;
  v25 = v22;
  v26 = self;
  objc_msgSend(v20, "setResponseHandler:", v24);

  objc_destroyWeak(&v28);
  objc_destroyWeak(&location);

  return v20;
}

- (void)_writeCharacteristicValues:(id)a3 requestMessage:(id)a4 source:(unint64_t)a5 withCompletionHandler:(id)a6
{
  id v11;
  id v12;
  id v13;
  id v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  HMDHome *v19;
  NSObject *v20;
  id v21;
  void *v22;
  id v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  uint8_t buf[4];
  id v29;
  __int16 v30;
  void *v31;
  uint64_t v32;

  v32 = *MEMORY[0x24BDAC8D0];
  v11 = a3;
  v12 = a4;
  v13 = a6;
  v14 = objc_alloc(MEMORY[0x24BE3F138]);
  v15 = (void *)MEMORY[0x24BDD17C8];
  MEMORY[0x227675180](self, a2);
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v15, "stringWithFormat:", CFSTR("%@, %s:%ld"), v16, "/Library/Caches/com.apple.xbs/Sources/HomeKit_executables/Sources/homed/Home/HMDHome.m", 25026);
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  v27 = (void *)objc_msgSend(v14, "initWithName:", v17);

  LOBYTE(v14) = -[HMDHome isCurrentDeviceAvailableResident](self, "isCurrentDeviceAvailableResident");
  v18 = (void *)MEMORY[0x227676638]();
  v19 = self;
  if ((v14 & 1) != 0)
  {
    HMFGetOSLogHandle();
    v20 = (id)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v20, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v21 = (id)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v12, "shortDescription");
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v29 = v21;
      v30 = 2112;
      v31 = v22;
      _os_log_impl(&dword_2218F0000, v20, OS_LOG_TYPE_INFO, "%{public}@Running new accessory communication logic for resident. %@", buf, 0x16u);

    }
  }
  else
  {
    HMFGetOSLogHandle();
    v20 = (id)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v20, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v23 = (id)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v12, "shortDescription");
      v24 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v29 = v23;
      v30 = 2112;
      v31 = v24;
      _os_log_impl(&dword_2218F0000, v20, OS_LOG_TYPE_INFO, "%{public}@Routing accessory write requests using Resident First logic. %@", buf, 0x16u);

    }
  }

  objc_autoreleasePoolPop(v18);
  -[HMDHome _createMessageForReadWriteRequest:source:withCompletionHandler:](v19, "_createMessageForReadWriteRequest:source:withCompletionHandler:", v12, a5, v13);
  v25 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHome accessoryReaderWriter](v19, "accessoryReaderWriter");
  v26 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v26, "submitWriteRequests:sourceType:requestMessage:", v11, a5, v25);

  __HMFActivityScopeLeave();
}

- (void)_addResponseTuplesFromDictionary:(id)a3 accessoryRequestMapTable:(id)a4 responseTuples:(id)a5 completedGroup:(id)a6 logEvents:(id)a7
{
  id v12;
  id v13;
  uint64_t i;
  uint64_t v15;
  void *v16;
  void *v17;
  void *v18;
  id v19;
  uint64_t v20;
  void *v21;
  void *v22;
  id v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  id v28;
  id v29;
  id v30;
  id v31;
  NSObject *group;
  id v33;
  uint64_t v34;
  uint64_t v35;
  id obj;
  _QWORD v37[4];
  id v38;
  id v39;
  id v40;
  id v41;
  id v42;
  HMDHome *v43;
  id v44;
  NSObject *v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  _BYTE v50[128];
  uint64_t v51;

  v51 = *MEMORY[0x24BDAC8D0];
  v12 = a3;
  v33 = a4;
  v13 = a5;
  group = a6;
  v31 = a7;
  if (v13)
    _HMFPreconditionFailure();
  objc_msgSend(v12, "hmf_dictionaryForKey:", CFSTR("kModifiedCharacteristicsForAccessoryKey"));
  v46 = 0u;
  v47 = 0u;
  v48 = 0u;
  v49 = 0u;
  obj = (id)objc_claimAutoreleasedReturnValue();
  v35 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v46, v50, 16);
  if (v35)
  {
    v34 = *(_QWORD *)v47;
    do
    {
      for (i = 0; i != v35; ++i)
      {
        if (*(_QWORD *)v47 != v34)
          objc_enumerationMutation(obj);
        v15 = *(_QWORD *)(*((_QWORD *)&v46 + 1) + 8 * i);
        v16 = (void *)objc_msgSend(objc_alloc(MEMORY[0x24BDD1880]), "initWithUUIDString:", v15);
        -[HMDHome accessoryWithUUID:](self, "accessoryWithUUID:", v16);
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0)
          v18 = v17;
        else
          v18 = 0;
        v19 = v18;

        if (v19)
        {
          objc_msgSend(v19, "bridge");
          v20 = objc_claimAutoreleasedReturnValue();
          v21 = (void *)v20;
          if (v20)
            v22 = (void *)v20;
          else
            v22 = v19;
          v23 = v22;

          objc_msgSend(v23, "uuid");
          v24 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v24, "UUIDString");
          v25 = (void *)objc_claimAutoreleasedReturnValue();

          objc_msgSend(v33, "objectForKey:", v23);
          v26 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(obj, "hmf_dictionaryForKey:", v15);
          v27 = (void *)objc_claimAutoreleasedReturnValue();
          dispatch_group_enter(group);
          v37[0] = MEMORY[0x24BDAC760];
          v37[1] = 3221225472;
          v37[2] = __109__HMDHome__addResponseTuplesFromDictionary_accessoryRequestMapTable_responseTuples_completedGroup_logEvents___block_invoke;
          v37[3] = &unk_24E776BF8;
          v38 = v26;
          v28 = v19;
          v39 = v28;
          v40 = v31;
          v41 = v25;
          v42 = v12;
          v43 = self;
          v44 = 0;
          v45 = group;
          v29 = v25;
          v30 = v26;
          objc_msgSend(v28, "handleMultipleCharacteristicsUpdated:message:completionQueue:completionHandler:", v27, 0, 0, v37);

        }
      }
      v35 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v46, v50, 16);
    }
    while (v35);
  }
  dispatch_group_leave(group);

}

- (id)__readWriteResponseHandler:(id)a3 unhandledRequests:(id)a4
{
  id v6;
  id v7;
  id v8;
  id v9;
  void *v10;
  _QWORD v12[4];
  id v13;
  id v14;
  id v15;
  id location;

  v6 = a3;
  v7 = a4;
  objc_initWeak(&location, self);
  v12[0] = MEMORY[0x24BDAC760];
  v12[1] = 3221225472;
  v12[2] = __56__HMDHome___readWriteResponseHandler_unhandledRequests___block_invoke;
  v12[3] = &unk_24E79ACA8;
  objc_copyWeak(&v15, &location);
  v13 = v7;
  v14 = v6;
  v8 = v6;
  v9 = v7;
  v10 = _Block_copy(v12);

  objc_destroyWeak(&v15);
  objc_destroyWeak(&location);
  return v10;
}

- (void)_handleCharacteristicWrite:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  int v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  id v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  _QWORD v27[4];
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;
  id v33;
  id v34;
  id location;
  _QWORD v36[2];

  v36[1] = *MEMORY[0x24BDAC8D0];
  v4 = a3;
  objc_msgSend(v4, "messagePayload");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "hmf_UUIDForKey:", CFSTR("kAccessoryUUID"));
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  -[HMDHome accessoryWithUUID:](self, "accessoryWithUUID:", v6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v8 = v7;
  else
    v8 = 0;
  v9 = v8;

  if (v9)
  {
    objc_msgSend(v4, "messagePayload");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "objectForKeyedSubscript:", CFSTR("kServiceInstanceID"));
    v26 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v4, "messagePayload");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "objectForKeyedSubscript:", CFSTR("kCharacteristicInstanceID"));
    v12 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v9, "findService:", v26);
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v25, "findCharacteristic:", v12);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    if (!v13)
    {
      objc_msgSend(MEMORY[0x24BDD1540], "hmErrorWithCode:", 2);
      v23 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "respondWithError:", v23);

      goto LABEL_13;
    }
    if (objc_msgSend(v4, "isRemote"))
    {
      objc_msgSend(v4, "dataForKey:", CFSTR("kAuthorizationDataKey"));
      v24 = (void *)objc_claimAutoreleasedReturnValue();
      if (v24)
      {
LABEL_10:
        objc_msgSend(v4, "messagePayload");
        v16 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v16, "objectForKeyedSubscript:", CFSTR("kCharacteristicValue"));
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v4, "identifier");
        v18 = (void *)objc_claimAutoreleasedReturnValue();
        +[HMDCharacteristicWriteRequest writeRequestWithCharacteristic:value:authorizationData:identifier:type:includeResponseValue:](HMDCharacteristicWriteRequest, "writeRequestWithCharacteristic:value:authorizationData:identifier:type:includeResponseValue:", v13, v17, v24, v18, 0, 0);
        v19 = (void *)objc_claimAutoreleasedReturnValue();

        objc_initWeak(&location, self);
        v36[0] = v19;
        objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", v36, 1);
        v20 = (void *)objc_claimAutoreleasedReturnValue();
        v27[0] = MEMORY[0x24BDAC760];
        v27[1] = 3221225472;
        v27[2] = __38__HMDHome__handleCharacteristicWrite___block_invoke;
        v27[3] = &unk_24E776C20;
        objc_copyWeak(&v34, &location);
        v28 = v4;
        v29 = v6;
        v30 = v9;
        v31 = v26;
        v32 = v12;
        v21 = v19;
        v33 = v21;
        -[HMDHome _areWriteRequestsAllowed:message:completion:](self, "_areWriteRequestsAllowed:message:completion:", v20, v28, v27);

        objc_destroyWeak(&v34);
        objc_destroyWeak(&location);

LABEL_13:
        goto LABEL_14;
      }
      objc_msgSend(v4, "userForHome:", self);
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      v15 = objc_msgSend(v14, "isRestrictedGuest");

      if (!v15)
      {
        v24 = 0;
        goto LABEL_10;
      }
    }
    objc_msgSend(v13, "authorizationData");
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    goto LABEL_10;
  }
  objc_msgSend(MEMORY[0x24BDD1540], "hmErrorWithCode:", 2);
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "respondWithError:", v22);

LABEL_14:
}

- (void)_handleMultipleCharacteristicWrite:(id)a3
{
  id v4;
  void *v5;
  id v6;
  void *v7;
  HMDHome *v8;
  NSObject *v9;
  void *v10;
  void *v11;
  void *v12;
  id v13;
  id v14;
  id v15;
  id v16;
  _QWORD v17[4];
  id v18;
  id v19;
  id v20;
  id v21[2];
  id v22;
  uint8_t buf[4];
  void *v24;
  __int16 v25;
  void *v26;
  __int16 v27;
  id v28;
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  v4 = a3;
  v22 = 0;
  -[HMDHome writeRequestTuplesFromMessage:outUnhandledRequests:](self, "writeRequestTuplesFromMessage:outUnhandledRequests:", v4, &v22);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = v22;
  if (objc_msgSend(v6, "count"))
  {
    v7 = (void *)MEMORY[0x227676638]();
    v8 = self;
    HMFGetOSLogHandle();
    v9 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "shortDescription");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543874;
      v24 = v10;
      v25 = 2112;
      v26 = v11;
      v27 = 2112;
      v28 = v6;
      _os_log_impl(&dword_2218F0000, v9, OS_LOG_TYPE_INFO, "%{public}@%@ has characteristic requests that cannot be handled: %@", buf, 0x20u);

    }
    objc_autoreleasePoolPop(v7);
  }
  v12 = (void *)parseMessageSource(v4);
  objc_msgSend(v5, "count");
  objc_msgSend(v4, "isRemote");
  v13 = +[HMDMetricsUtilities stringForSource:](HMDMetricsUtilities, "stringForSource:", v12);
  objc_initWeak((id *)buf, self);
  v17[0] = MEMORY[0x24BDAC760];
  v17[1] = 3221225472;
  v17[2] = __46__HMDHome__handleMultipleCharacteristicWrite___block_invoke;
  v17[3] = &unk_24E776C48;
  objc_copyWeak(v21, (id *)buf);
  v14 = v4;
  v18 = v14;
  v21[1] = v12;
  v15 = v5;
  v19 = v15;
  v16 = v6;
  v20 = v16;
  -[HMDHome _areWriteRequestsAllowed:message:completion:](self, "_areWriteRequestsAllowed:message:completion:", v15, v14, v17);

  objc_destroyWeak(v21);
  objc_destroyWeak((id *)buf);

}

- (void)_areWriteRequestsAllowed:(id)a3 message:(id)a4 completion:(id)a5
{
  id v8;
  id v9;
  id v10;
  void *v11;
  unint64_t v12;
  void (**v13)(void *, _QWORD, void *);
  void (**v14)(void *, _QWORD, void *);
  void *v15;
  HMDHome *v16;
  NSObject *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  int v22;
  void *v23;
  __int16 v24;
  id v25;
  __int16 v26;
  void *v27;
  __int16 v28;
  void *v29;
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  v8 = a3;
  v9 = a4;
  v10 = a5;
  objc_msgSend(v9, "userForHome:", self);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  if (v11
    && !-[HMDHome areCharacteristicRequests:allowedForUser:](self, "areCharacteristicRequests:allowedForUser:", v8, v11))
  {
    v15 = (void *)MEMORY[0x227676638]();
    v16 = self;
    HMFGetOSLogHandle();
    v17 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v11, "restrictedGuestAccessSettings");
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v19, "uuidsOfAllowedAccessories");
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      v22 = 138544130;
      v23 = v18;
      v24 = 2112;
      v25 = v9;
      v26 = 2112;
      v27 = v11;
      v28 = 2112;
      v29 = v20;
      _os_log_impl(&dword_2218F0000, v17, OS_LOG_TYPE_INFO, "%{public}@Rejecting message which is not allowed for user. Message: %@, user: %@, allowedAccessories: %@", (uint8_t *)&v22, 0x2Au);

    }
    objc_autoreleasePoolPop(v15);
    v14 = (void (**)(void *, _QWORD, void *))_Block_copy(v10);
    if (v14)
    {
      objc_msgSend(MEMORY[0x24BDD1540], "hmPrivateErrorWithCode:", 2906);
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      v14[2](v14, 0, v21);

    }
    goto LABEL_11;
  }
  v12 = parseMessageSource(v9);
  if (!-[HMDHome applyDeviceLockStatus:](self, "applyDeviceLockStatus:", v9))
  {
    v13 = (void (**)(void *, _QWORD, void *))_Block_copy(v10);
    v14 = v13;
    if (v13)
      v13[2](v13, 1, 0);
LABEL_11:

    goto LABEL_12;
  }
  -[HMDHome _applyDeviceLockCheck:forSource:message:completion:](self, v8, v12, v9, v10);
LABEL_12:

}

- (id)writeRequestTuplesFromMessage:(id)a3 outUnhandledRequests:(id *)a4
{
  id v6;
  void *v7;
  id v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  id v17;
  uint64_t i;
  void *v19;
  void *v20;
  void *v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  id v29;
  void *v30;
  int v31;
  id v32;
  uint64_t v33;
  void *v34;
  unint64_t v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  uint64_t v40;
  id *v42;
  uint64_t v43;
  uint64_t v44;
  id obj;
  uint64_t v46;
  id v47;
  id v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  void *v52;
  uint64_t v53;
  void *v54;
  uint64_t v55;
  void *v56;
  uint64_t v57;
  HMDHome *v58;
  id v59;
  void *v60;
  uint64_t v61;
  void *v62;
  void *v63;
  uint64_t v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  _BYTE v77[128];
  _BYTE v78[128];
  _BYTE v79[128];
  uint64_t v80;

  v80 = *MEMORY[0x24BDAC8D0];
  v6 = a3;
  objc_msgSend(v6, "dictionaryForKey:", CFSTR("kAccessoriesListKey"));
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x24BDBCEB8], "array");
  v59 = (id)objc_claimAutoreleasedReturnValue();
  v42 = a4;
  if (a4)
    v8 = objc_alloc_init(MEMORY[0x24BDBCED8]);
  else
    v8 = 0;
  objc_msgSend(v6, "uuidForKey:", CFSTR("kActionSetUUID"));
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  if (v9)
    v10 = 1;
  else
    v10 = objc_msgSend(v6, "BOOLForKey:", CFSTR("kShortActionKey"));
  v57 = v10;

  v75 = 0u;
  v76 = 0u;
  v73 = 0u;
  v74 = 0u;
  obj = v7;
  v44 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v73, v79, 16);
  if (v44)
  {
    v43 = *(_QWORD *)v74;
    v60 = v6;
    v58 = self;
    v54 = v8;
    do
    {
      v11 = 0;
      do
      {
        if (*(_QWORD *)v74 != v43)
          objc_enumerationMutation(obj);
        v46 = v11;
        v12 = *(_QWORD *)(*((_QWORD *)&v73 + 1) + 8 * v11);
        objc_msgSend(obj, "hmf_dictionaryForKey:", v12);
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        v55 = v12;
        v14 = (void *)objc_msgSend(objc_alloc(MEMORY[0x24BDD1880]), "initWithUUIDString:", v12);
        -[HMDHome accessoryWithUUID:](self, "accessoryWithUUID:", v14);
        v15 = (void *)objc_claimAutoreleasedReturnValue();

        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0)
          v16 = v15;
        else
          v16 = 0;
        v48 = v16;

        v71 = 0u;
        v72 = 0u;
        v69 = 0u;
        v70 = 0u;
        v17 = v13;
        v50 = objc_msgSend(v17, "countByEnumeratingWithState:objects:count:", &v69, v78, 16);
        if (v50)
        {
          v49 = *(_QWORD *)v70;
          v47 = v17;
          do
          {
            for (i = 0; i != v50; ++i)
            {
              if (*(_QWORD *)v70 != v49)
                objc_enumerationMutation(v17);
              v19 = *(void **)(*((_QWORD *)&v69 + 1) + 8 * i);
              objc_msgSend(v17, "hmf_dictionaryForKey:", v19);
              v20 = (void *)objc_claimAutoreleasedReturnValue();
              v56 = v19;
              -[HMDHome _stringToUnsignedLongLongNumber:]((uint64_t)self, v19);
              v21 = (void *)objc_claimAutoreleasedReturnValue();
              if (v21)
              {
                v53 = i;
                v51 = v21;
                objc_msgSend(v48, "findService:", v21);
                v62 = (void *)objc_claimAutoreleasedReturnValue();
                v65 = 0u;
                v66 = 0u;
                v67 = 0u;
                v68 = 0u;
                v52 = v20;
                v22 = v20;
                v64 = objc_msgSend(v22, "countByEnumeratingWithState:objects:count:", &v65, v77, 16);
                if (!v64)
                  goto LABEL_52;
                v23 = *(_QWORD *)v66;
                v63 = v22;
                v61 = *(_QWORD *)v66;
                while (1)
                {
                  v24 = 0;
                  do
                  {
                    if (*(_QWORD *)v66 != v23)
                      objc_enumerationMutation(v22);
                    v25 = *(void **)(*((_QWORD *)&v65 + 1) + 8 * v24);
                    -[HMDHome _stringToUnsignedLongLongNumber:]((uint64_t)self, v25);
                    v26 = (void *)objc_claimAutoreleasedReturnValue();
                    if (v26)
                    {
                      objc_msgSend(v62, "findCharacteristic:", v26);
                      v27 = (void *)objc_claimAutoreleasedReturnValue();
                      if (v27)
                      {
                        if (objc_msgSend(v6, "isRemote"))
                        {
                          objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("%@-%@"), v25, CFSTR("kAuthorizationDataKey"));
                          v28 = (void *)objc_claimAutoreleasedReturnValue();
                          objc_msgSend(v22, "hmf_dataForKey:", v28);
                          v29 = (id)objc_claimAutoreleasedReturnValue();
                          if (!v29)
                          {
                            objc_msgSend(v6, "userForHome:", self);
                            v30 = (void *)objc_claimAutoreleasedReturnValue();
                            v31 = objc_msgSend(v30, "isRestrictedGuest");

                            if (v31)
                            {
                              objc_msgSend(v27, "authorizationData");
                              v29 = (id)objc_claimAutoreleasedReturnValue();
                            }
                            else
                            {
                              v29 = 0;
                            }
                          }

                        }
                        else
                        {
                          objc_msgSend(v27, "authorizationData");
                          v29 = (id)objc_claimAutoreleasedReturnValue();
                        }
                        v33 = objc_msgSend(v22, "hmf_BOOLForKey:", CFSTR("HMDCharacteristicWriteRequestIncludeResponseValueKey"));
                        if (objc_msgSend(v6, "isRemote"))
                        {
                          objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("%@-%@"), v25, CFSTR("kCharacteristicContextDataForWriteKey"));
                          v34 = (void *)objc_claimAutoreleasedReturnValue();
                          objc_msgSend(v22, "hmf_dataForKey:", v34);
                          v32 = (id)objc_claimAutoreleasedReturnValue();
                          goto LABEL_44;
                        }
                        v35 = +[HMDHome sanitizedOriginalSourceForMessage:]((uint64_t)HMDHome, v6);
                        if (v35 - 2 >= 8 && v35)
                        {
                          v32 = 0;
                        }
                        else
                        {
                          -[HMDHome currentUser](self, "currentUser");
                          v34 = (void *)objc_claimAutoreleasedReturnValue();
                          objc_msgSend(v34, "notificationContextHAPIdentifier");
                          v36 = (void *)objc_claimAutoreleasedReturnValue();
                          objc_msgSend(v27, "contextDataForWriteRequestWithIdentifier:", v36);
                          v32 = (id)objc_claimAutoreleasedReturnValue();

LABEL_44:
                        }
                        objc_msgSend(v63, "objectForKeyedSubscript:", v25);
                        v37 = (void *)objc_claimAutoreleasedReturnValue();
                        objc_msgSend(v60, "identifier");
                        v38 = (void *)objc_claimAutoreleasedReturnValue();
                        +[HMDCharacteristicWriteRequest writeRequestWithCharacteristic:value:authorizationData:identifier:type:includeResponseValue:contextData:](HMDCharacteristicWriteRequest, "writeRequestWithCharacteristic:value:authorizationData:identifier:type:includeResponseValue:contextData:", v27, v37, v29, v38, v57, v33, v32);
                        v39 = (void *)objc_claimAutoreleasedReturnValue();

                        objc_msgSend(v59, "addObject:", v39);
                        v6 = v60;
                        self = v58;
                        v23 = v61;
                      }
                      else
                      {
                        objc_msgSend(v54, "hmf_mutableDictionaryForKey:", v55);
                        v29 = (id)objc_claimAutoreleasedReturnValue();
                        if (!v29)
                        {
                          v29 = objc_alloc_init(MEMORY[0x24BDBCED8]);
                          objc_msgSend(v54, "setObject:forKeyedSubscript:", v29, v55);
                        }
                        objc_msgSend(v29, "hmf_mutableArrayForKey:", v56);
                        v32 = (id)objc_claimAutoreleasedReturnValue();
                        if (!v32)
                        {
                          v32 = objc_alloc_init(MEMORY[0x24BDBCEB8]);
                          objc_msgSend(v29, "setObject:forKeyedSubscript:", v32, v56);
                        }
                        objc_msgSend(v32, "addObject:", v26);
                      }

                      v22 = v63;
                    }

                    ++v24;
                  }
                  while (v64 != v24);
                  v40 = objc_msgSend(v22, "countByEnumeratingWithState:objects:count:", &v65, v77, 16);
                  v64 = v40;
                  if (!v40)
                  {
LABEL_52:

                    i = v53;
                    v8 = v54;
                    v17 = v47;
                    v21 = v51;
                    v20 = v52;
                    break;
                  }
                }
              }

            }
            v50 = objc_msgSend(v17, "countByEnumeratingWithState:objects:count:", &v69, v78, 16);
          }
          while (v50);
        }

        v11 = v46 + 1;
      }
      while (v46 + 1 != v44);
      v44 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v73, v79, 16);
    }
    while (v44);
  }

  if (v42)
    *v42 = (id)objc_msgSend(v8, "copy");

  return v59;
}

- (BOOL)_shouldWaitForAccessoriesToBeReachable
{
  void *v3;
  int v4;
  void *v5;
  void *v6;

  if (isWatch())
  {
    +[HMDWatchSystemState sharedState](HMDWatchSystemState, "sharedState");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    if ((objc_msgSend(v3, "isCompanionReachable") & 1) != 0)
    {
      LOBYTE(v4) = 0;
    }
    else
    {
      -[HMDHome residentDeviceManager](self, "residentDeviceManager");
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v5, "primaryResidentDevice");
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      v4 = objc_msgSend(v6, "isReachable") ^ 1;

    }
  }
  else
  {
    LOBYTE(v4) = 0;
  }
  return v4;
}

- (void)_performOperation:(id)a3 completion:(id)a4
{
  id v6;
  id v7;
  void *v8;
  void *v9;
  void *v10;
  id v11;
  _QWORD v12[4];
  id v13;
  id v14;
  id v15;
  id from;
  id location;

  v6 = a3;
  v7 = a4;
  -[HMDHome assistantOperations](self, "assistantOperations");
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v8)
  {
    objc_msgSend(MEMORY[0x24BDBCEB8], "array");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHome setAssistantOperations:](self, "setAssistantOperations:", v9);

  }
  -[HMDHome assistantOperations](self, "assistantOperations");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "addObject:", v6);

  objc_initWeak(&location, self);
  objc_initWeak(&from, v6);
  v12[0] = MEMORY[0x24BDAC760];
  v12[1] = 3221225472;
  v12[2] = __40__HMDHome__performOperation_completion___block_invoke;
  v12[3] = &unk_24E776C70;
  v11 = v7;
  v13 = v11;
  objc_copyWeak(&v14, &from);
  objc_copyWeak(&v15, &location);
  objc_msgSend(v6, "startWithCompletion:", v12);
  objc_destroyWeak(&v15);
  objc_destroyWeak(&v14);

  objc_destroyWeak(&from);
  objc_destroyWeak(&location);

}

- (void)readCharacteristicValues:(id)a3 identifier:(id)a4 source:(unint64_t)a5 qualityOfService:(int64_t)a6 withCompletionHandler:(id)a7
{
  id v13;
  id v14;
  id v15;
  id v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  NSObject *v21;
  id v22;
  id v23;
  id v24;
  id v25;
  _QWORD block[4];
  id v27;
  id v28;
  HMDHome *v29;
  id v30;
  id v31;
  unint64_t v32;
  int64_t v33;

  v13 = a3;
  v14 = a4;
  v15 = a7;
  v16 = objc_alloc(MEMORY[0x24BE3F138]);
  v17 = (void *)MEMORY[0x24BDD17C8];
  MEMORY[0x227675180](self, a2);
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v17, "stringWithFormat:", CFSTR("%@, %s:%ld"), v18, "/Library/Caches/com.apple.xbs/Sources/HomeKit_executables/Sources/homed/Home/HMDHome.m", 25625);
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  v20 = (void *)objc_msgSend(v16, "initWithName:", v19);

  -[HMDHome workQueue](self, "workQueue");
  v21 = objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x24BDAC760];
  block[1] = 3221225472;
  block[2] = __93__HMDHome_readCharacteristicValues_identifier_source_qualityOfService_withCompletionHandler___block_invoke;
  block[3] = &unk_24E776C98;
  v27 = v20;
  v28 = v13;
  v31 = v15;
  v32 = a5;
  v33 = a6;
  v29 = self;
  v30 = v14;
  v22 = v14;
  v23 = v15;
  v24 = v13;
  v25 = v20;
  dispatch_async(v21, block);

}

- (id)_getLogEventsForOperation:(BOOL)a3 startTime:(double)a4 accessories:(id)a5 requestMap:(id)a6 identifier:(id)a7 userUUID:(id)a8 source:(unint64_t)a9 bundleID:(id)a10
{
  _BOOL8 v14;
  id v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t i;
  void *v22;
  void *v23;
  void *v24;
  id v25;
  void *v26;
  void *v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  void *v35;
  void *v36;
  id v37;
  void *v38;
  id v39;
  void *v40;
  void *v41;
  void *v42;
  id v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t j;
  void *v48;
  void *v49;
  id v50;
  void *v51;
  id v52;
  void *v53;
  void *v54;
  void *v55;
  HMDCharacteristicReadWriteLogEvent *v56;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  id v62;
  id v64;
  id v65;
  id v66;
  id v67;
  uint64_t v68;
  id obj;
  id v70;
  void *v71;
  void *v72;
  uint64_t v73;
  void *v74;
  uint64_t v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  _BYTE v88[128];
  _BYTE v89[128];
  _BYTE v90[128];
  uint64_t v91;

  v14 = a3;
  v91 = *MEMORY[0x24BDAC8D0];
  v16 = a5;
  v17 = a6;
  v67 = a7;
  v66 = a8;
  v65 = a10;
  objc_msgSend(MEMORY[0x24BDBCEF0], "set");
  v74 = (void *)objc_claimAutoreleasedReturnValue();
  v84 = 0u;
  v85 = 0u;
  v86 = 0u;
  v87 = 0u;
  obj = v16;
  v18 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v84, v90, 16);
  if (v18)
  {
    v19 = v18;
    v20 = *(_QWORD *)v85;
    do
    {
      for (i = 0; i != v19; ++i)
      {
        if (*(_QWORD *)v85 != v20)
          objc_enumerationMutation(obj);
        v22 = (void *)objc_msgSend(objc_alloc(MEMORY[0x24BDD1880]), "initWithUUIDString:", *(_QWORD *)(*((_QWORD *)&v84 + 1) + 8 * i));
        -[HMDHome accessoryWithUUID:](self, "accessoryWithUUID:", v22);
        v23 = (void *)objc_claimAutoreleasedReturnValue();

        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0)
          v24 = v23;
        else
          v24 = 0;
        v25 = v24;

        if (v25)
        {
          if ((objc_msgSend(v25, "isPrimary") & 1) == 0)
          {
            objc_msgSend(v25, "bridge");
            v23 = (void *)objc_claimAutoreleasedReturnValue();

          }
          objc_msgSend(v23, "uuid");
          v26 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v26, "UUIDString");
          v27 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v74, "addObject:", v27);

        }
      }
      v19 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v84, v90, 16);
    }
    while (v19);
  }

  objc_msgSend(MEMORY[0x24BDBCED8], "dictionaryWithCapacity:", objc_msgSend(v17, "count"));
  v64 = (id)objc_claimAutoreleasedReturnValue();
  v80 = 0u;
  v81 = 0u;
  v82 = 0u;
  v83 = 0u;
  v28 = v17;
  v29 = objc_msgSend(v28, "countByEnumeratingWithState:objects:count:", &v80, v89, 16);
  if (v29)
  {
    v30 = v29;
    v31 = *(_QWORD *)v81;
    v32 = 2;
    if (v14)
      v32 = 3;
    v60 = v32;
    v61 = *(_QWORD *)v81;
    v62 = v28;
    do
    {
      v33 = 0;
      v68 = v30;
      do
      {
        if (*(_QWORD *)v81 != v31)
          objc_enumerationMutation(v28);
        v34 = *(void **)(*((_QWORD *)&v80 + 1) + 8 * v33);
        objc_msgSend(v34, "uuid");
        v35 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v35, "UUIDString");
        v36 = (void *)objc_claimAutoreleasedReturnValue();

        if ((objc_msgSend(v74, "containsObject:", v36) & 1) != 0)
        {
          v72 = v36;
          v73 = v33;
          v37 = v34;
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) != 0)
            v38 = v37;
          else
            v38 = 0;
          v39 = v38;
          v70 = v37;

          v71 = v39;
          objc_msgSend(v28, "objectForKey:", v39);
          v40 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(MEMORY[0x24BDBCEB8], "arrayWithCapacity:", objc_msgSend(v40, "count"));
          v41 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(MEMORY[0x24BDBCEB8], "arrayWithCapacity:", objc_msgSend(v40, "count"));
          v42 = (void *)objc_claimAutoreleasedReturnValue();
          v76 = 0u;
          v77 = 0u;
          v78 = 0u;
          v79 = 0u;
          v43 = v40;
          v44 = objc_msgSend(v43, "countByEnumeratingWithState:objects:count:", &v76, v88, 16);
          if (v44)
          {
            v45 = v44;
            v46 = *(_QWORD *)v77;
            do
            {
              for (j = 0; j != v45; ++j)
              {
                if (*(_QWORD *)v77 != v46)
                  objc_enumerationMutation(v43);
                v48 = *(void **)(*((_QWORD *)&v76 + 1) + 8 * j);
                objc_msgSend(v48, "characteristic");
                v49 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v41, "addObject:", v49);

                v50 = v48;
                objc_opt_class();
                if ((objc_opt_isKindOfClass() & 1) != 0)
                  v51 = v50;
                else
                  v51 = 0;
                v52 = v51;

                if (v14 && v52)
                {
                  objc_msgSend(v52, "value");
                  v53 = (void *)objc_claimAutoreleasedReturnValue();
                  if (v53)
                  {
                    objc_msgSend(v42, "addObject:", v53);
                  }
                  else
                  {
                    objc_msgSend(MEMORY[0x24BDBCEF8], "null");
                    v54 = (void *)objc_claimAutoreleasedReturnValue();
                    objc_msgSend(v42, "addObject:", v54);

                  }
                }

              }
              v45 = objc_msgSend(v43, "countByEnumeratingWithState:objects:count:", &v76, v88, 16);
            }
            while (v45);
          }

          v75 = 0;
          objc_msgSend(v71, "preferredHAPAccessoryForOperation:linkType:", v60, &v75);
          v55 = (void *)objc_claimAutoreleasedReturnValue();
          LOBYTE(v59) = 0;
          LOBYTE(v58) = 0;
          v56 = -[HMDCharacteristicReadWriteLogEvent initWithStartTime:characteristics:hmdAccessory:hapAccessory:source:isWriteOperation:isTimedWrite:isLocal:transactionId:isCached:bundleId:userUUID:writtenValues:]([HMDCharacteristicReadWriteLogEvent alloc], "initWithStartTime:characteristics:hmdAccessory:hapAccessory:source:isWriteOperation:isTimedWrite:isLocal:transactionId:isCached:bundleId:userUUID:writtenValues:", v41, v70, v55, a9, v14, 0, a4, v58, v67, v59, v65, v66, v42);
          v36 = v72;
          objc_msgSend(v64, "setObject:forKeyedSubscript:", v56, v72);

          v31 = v61;
          v28 = v62;
          v30 = v68;
          v33 = v73;
        }
        else
        {
          isWatch();
        }

        ++v33;
      }
      while (v33 != v30);
      v30 = objc_msgSend(v28, "countByEnumeratingWithState:objects:count:", &v80, v89, 16);
    }
    while (v30);
  }

  return v64;
}

- (void)readCharacteristicValues:(id)a3 source:(unint64_t)a4 qualityOfService:(int64_t)a5 withCompletionHandler:(id)a6
{
  -[HMDHome readCharacteristicValues:source:sourceForLogging:qualityOfService:withCompletionHandler:](self, "readCharacteristicValues:source:sourceForLogging:qualityOfService:withCompletionHandler:", a3, a4, CFSTR("Unknown"), a5, a6);
}

- (void)readCharacteristicValues:(id)a3 source:(unint64_t)a4 sourceForLogging:(id)a5 qualityOfService:(int64_t)a6 withCompletionHandler:(id)a7
{
  id v13;
  id v14;
  id v15;
  id v16;
  void *v17;
  void *v18;
  void *v19;
  NSObject *v20;
  id v21;
  id v22;
  id v23;
  _QWORD block[4];
  id v25;
  HMDHome *v26;
  id v27;
  id v28;
  id v29;
  int64_t v30;
  unint64_t v31;
  id v32;

  v13 = a3;
  v14 = a5;
  v15 = a7;
  v16 = objc_alloc(MEMORY[0x24BE3F138]);
  v17 = (void *)MEMORY[0x24BDD17C8];
  MEMORY[0x227675180](self, a2);
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v17, "stringWithFormat:", CFSTR("%@, %s:%ld"), v18, "/Library/Caches/com.apple.xbs/Sources/HomeKit_executables/Sources/homed/Home/HMDHome.m", 26070);
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  v32 = (id)objc_msgSend(v16, "initWithName:", v19);

  -[HMDHome workQueue](self, "workQueue");
  v20 = objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x24BDAC760];
  block[1] = 3221225472;
  block[2] = __99__HMDHome_readCharacteristicValues_source_sourceForLogging_qualityOfService_withCompletionHandler___block_invoke;
  block[3] = &unk_24E776C98;
  v25 = v32;
  v26 = self;
  v27 = v14;
  v28 = v13;
  v30 = a6;
  v31 = a4;
  v29 = v15;
  v21 = v15;
  v22 = v13;
  v23 = v14;
  dispatch_async(v20, block);

  __HMFActivityScopeLeave();
}

- (void)_readCharacteristicValues:(id)a3 requestMessage:(id)a4 source:(unint64_t)a5 withCompletionHandler:(id)a6
{
  id v11;
  id v12;
  id v13;
  id v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  HMDHome *v19;
  NSObject *v20;
  id v21;
  void *v22;
  id v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  uint8_t buf[4];
  id v29;
  __int16 v30;
  void *v31;
  uint64_t v32;

  v32 = *MEMORY[0x24BDAC8D0];
  v11 = a3;
  v12 = a4;
  v13 = a6;
  v14 = objc_alloc(MEMORY[0x24BE3F138]);
  v15 = (void *)MEMORY[0x24BDD17C8];
  MEMORY[0x227675180](self, a2);
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v15, "stringWithFormat:", CFSTR("%@, %s:%ld"), v16, "/Library/Caches/com.apple.xbs/Sources/HomeKit_executables/Sources/homed/Home/HMDHome.m", 26461);
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  v27 = (void *)objc_msgSend(v14, "initWithName:", v17);

  LOBYTE(v14) = -[HMDHome isCurrentDeviceAvailableResident](self, "isCurrentDeviceAvailableResident");
  v18 = (void *)MEMORY[0x227676638]();
  v19 = self;
  if ((v14 & 1) != 0)
  {
    HMFGetOSLogHandle();
    v20 = (id)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v20, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v21 = (id)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v12, "shortDescription");
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v29 = v21;
      v30 = 2112;
      v31 = v22;
      _os_log_impl(&dword_2218F0000, v20, OS_LOG_TYPE_INFO, "%{public}@Running new accessory communication logic for resident. %@", buf, 0x16u);

    }
  }
  else
  {
    HMFGetOSLogHandle();
    v20 = (id)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v20, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v23 = (id)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v12, "shortDescription");
      v24 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v29 = v23;
      v30 = 2112;
      v31 = v24;
      _os_log_impl(&dword_2218F0000, v20, OS_LOG_TYPE_INFO, "%{public}@Routing accessory read requests using Resident First logic. %@", buf, 0x16u);

    }
  }

  objc_autoreleasePoolPop(v18);
  -[HMDHome _createMessageForReadWriteRequest:source:withCompletionHandler:](v19, "_createMessageForReadWriteRequest:source:withCompletionHandler:", v12, a5, v13);
  v25 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHome accessoryReaderWriter](v19, "accessoryReaderWriter");
  v26 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v26, "submitReadRequests:sourceType:requestMessage:", v11, a5, v25);

  __HMFActivityScopeLeave();
}

- (id)_readRequestTuplesFromMessage:(id)a3 outUnhandledRequests:(id *)a4
{
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  id v12;
  uint64_t i;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t j;
  uint64_t v23;
  void *v24;
  id v25;
  id v26;
  BOOL v27;
  id v28;
  void *v29;
  id *v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  id obj;
  uint64_t v36;
  id v37;
  id v38;
  uint64_t v39;
  uint64_t v41;
  void *v42;
  void *v43;
  uint64_t v44;
  void *v45;
  id v46;
  uint64_t v47;
  id v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  _BYTE v61[128];
  _BYTE v62[128];
  _BYTE v63[128];
  uint64_t v64;

  v31 = a4;
  v64 = *MEMORY[0x24BDAC8D0];
  v32 = a3;
  objc_msgSend(v32, "dictionaryForKey:", CFSTR("kAccessoriesListKey"));
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x24BDBCEB8], "array");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v46 = objc_alloc_init(MEMORY[0x24BDBCED8]);
  v57 = 0u;
  v58 = 0u;
  v59 = 0u;
  v60 = 0u;
  obj = v4;
  v34 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v57, v63, 16);
  if (v34)
  {
    v33 = *(_QWORD *)v58;
    v45 = v5;
    do
    {
      v6 = 0;
      do
      {
        if (*(_QWORD *)v58 != v33)
          objc_enumerationMutation(obj);
        v36 = v6;
        v7 = *(_QWORD *)(*((_QWORD *)&v57 + 1) + 8 * v6);
        objc_msgSend(obj, "hmf_dictionaryForKey:", v7, v31);
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        v47 = v7;
        v9 = (void *)objc_msgSend(objc_alloc(MEMORY[0x24BDD1880]), "initWithUUIDString:", v7);
        -[HMDHome accessoryWithUUID:](self, "accessoryWithUUID:", v9);
        v10 = (void *)objc_claimAutoreleasedReturnValue();

        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0)
          v11 = v10;
        else
          v11 = 0;
        v38 = v11;

        v55 = 0u;
        v56 = 0u;
        v53 = 0u;
        v54 = 0u;
        v12 = v8;
        v5 = v45;
        v41 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v53, v62, 16);
        if (v41)
        {
          v39 = *(_QWORD *)v54;
          v37 = v12;
          do
          {
            for (i = 0; i != v41; ++i)
            {
              if (*(_QWORD *)v54 != v39)
                objc_enumerationMutation(v12);
              v14 = *(void **)(*((_QWORD *)&v53 + 1) + 8 * i);
              objc_msgSend(v12, "hmf_arrayForKey:", v14);
              v15 = (void *)objc_claimAutoreleasedReturnValue();
              -[HMDHome _stringToUnsignedLongLongNumber:]((uint64_t)self, v14);
              v16 = (void *)objc_claimAutoreleasedReturnValue();
              if (v16)
              {
                v44 = i;
                v42 = v16;
                objc_msgSend(v38, "findService:", v16);
                v17 = (void *)objc_claimAutoreleasedReturnValue();
                v49 = 0u;
                v50 = 0u;
                v51 = 0u;
                v52 = 0u;
                v43 = v15;
                v18 = v15;
                v19 = objc_msgSend(v18, "countByEnumeratingWithState:objects:count:", &v49, v61, 16);
                if (v19)
                {
                  v20 = v19;
                  v21 = *(_QWORD *)v50;
                  do
                  {
                    for (j = 0; j != v20; ++j)
                    {
                      if (*(_QWORD *)v50 != v21)
                        objc_enumerationMutation(v18);
                      v23 = *(_QWORD *)(*((_QWORD *)&v49 + 1) + 8 * j);
                      objc_msgSend(v17, "findCharacteristic:", v23);
                      v24 = (void *)objc_claimAutoreleasedReturnValue();
                      if (v24)
                      {
                        objc_msgSend(v5, "addObject:", v24);
                      }
                      else
                      {
                        objc_msgSend(v46, "hmf_mutableDictionaryForKey:", v47);
                        v25 = (id)objc_claimAutoreleasedReturnValue();
                        if (!v25)
                        {
                          v25 = objc_alloc_init(MEMORY[0x24BDBCED8]);
                          objc_msgSend(v46, "setObject:forKeyedSubscript:", v25, v47);
                        }
                        objc_msgSend(v25, "hmf_mutableArrayForKey:", v14);
                        v26 = (id)objc_claimAutoreleasedReturnValue();
                        if (!v26)
                        {
                          v26 = objc_alloc_init(MEMORY[0x24BDBCEB8]);
                          objc_msgSend(v25, "setObject:forKeyedSubscript:", v26, v14);
                        }
                        objc_msgSend(v26, "addObject:", v23);

                        v5 = v45;
                      }

                    }
                    v20 = objc_msgSend(v18, "countByEnumeratingWithState:objects:count:", &v49, v61, 16);
                  }
                  while (v20);
                }

                v12 = v37;
                v15 = v43;
                i = v44;
                v16 = v42;
              }

            }
            v41 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v53, v62, 16);
          }
          while (v41);
        }

        v6 = v36 + 1;
      }
      while (v36 + 1 != v34);
      v34 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v57, v63, 16);
    }
    while (v34);
  }

  if (v31)
    *v31 = (id)objc_msgSend(v46, "copy");
  v48 = 0;
  v27 = -[HMDHome _isReadRequestAllowForCharacteristics:message:error:](self, "_isReadRequestAllowForCharacteristics:message:error:", v5, v32, &v48, v31);
  v28 = v48;
  if (v27)
  {
    objc_msgSend(v5, "na_map:", &__block_literal_global_1410);
    v29 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    objc_msgSend(v32, "respondWithError:", v28);
    v29 = 0;
  }

  return v29;
}

- (BOOL)_isReadRequestAllowForCharacteristics:(id)a3 message:(id)a4 error:(id *)a5
{
  id v8;
  BOOL v9;
  uint64_t v11;

  v8 = a4;
  if (-[HMDHome requiresUnlockToAccessCharacteristics:withMessage:](self, "requiresUnlockToAccessCharacteristics:withMessage:", a3, v8)&& !-[HMDHome isAccessAllowedForCharacteristicsWithMessage:](self, "isAccessAllowedForCharacteristicsWithMessage:", v8))
  {
    if (a5)
    {
      v11 = parseMessageSource(v8);
      HMDSecureAccessErrorCodeForMessage(v8, v11);
      v9 = 0;
      *a5 = (id)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      v9 = 0;
    }
  }
  else
  {
    v9 = 1;
  }

  return v9;
}

- (void)_handleCharacteristicRead:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  uint64_t v15;
  void *v16;
  void *v17;
  BOOL v18;
  id v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  HMDHome *v24;
  NSObject *v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  HMDHome *v34;
  NSObject *v35;
  void *v36;
  uint64_t v37;
  void *v38;
  void *v39;
  void *v40;
  void *context;
  void *contexta;
  void *v43;
  void *v44;
  id v45;
  void *v46;
  void *v47;
  void *v48;
  id v49;
  void *v50;
  uint8_t buf[4];
  void *v52;
  __int16 v53;
  uint64_t v54;
  __int16 v55;
  void *v56;
  __int16 v57;
  uint64_t v58;
  __int16 v59;
  void *v60;
  __int16 v61;
  void *v62;
  void *v63;
  _QWORD v64[3];

  v64[1] = *MEMORY[0x24BDAC8D0];
  v4 = a3;
  objc_msgSend(v4, "messagePayload");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "hmf_UUIDForKey:", CFSTR("kAccessoryUUID"));
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  -[HMDHome accessoryWithUUID:](self, "accessoryWithUUID:", v6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v8 = v7;
  else
    v8 = 0;
  v9 = v8;

  if (v9)
  {
    objc_msgSend(v4, "messagePayload");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "objectForKeyedSubscript:", CFSTR("kServiceInstanceID"));
    v11 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v4, "messagePayload");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "objectForKeyedSubscript:", CFSTR("kCharacteristicInstanceID"));
    v13 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v9, "findService:", v11);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v14, "findCharacteristic:", v13);
    v15 = objc_claimAutoreleasedReturnValue();
    v16 = (void *)v15;
    if (v15)
    {
      v48 = v11;
      v64[0] = v15;
      objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", v64, 1);
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      v49 = 0;
      v18 = -[HMDHome _isReadRequestAllowForCharacteristics:message:error:](self, "_isReadRequestAllowForCharacteristics:message:error:", v17, v4, &v49);
      v19 = v49;

      if (v18)
      {
        v45 = v19;
        +[HMDCharacteristicRequest requestWithCharacteristic:](HMDCharacteristicRequest, "requestWithCharacteristic:", v16);
        v20 = (void *)objc_claimAutoreleasedReturnValue();
        v43 = (void *)parseMessageSource(v4);
        objc_msgSend(v4, "userForHome:", self);
        v21 = objc_claimAutoreleasedReturnValue();
        v46 = (void *)v21;
        v47 = v20;
        if (v21
          && (v22 = v21,
              v63 = v20,
              objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", &v63, 1),
              v23 = (void *)objc_claimAutoreleasedReturnValue(),
              LOBYTE(v22) = -[HMDHome areCharacteristicRequests:allowedForUser:](self, "areCharacteristicRequests:allowedForUser:", v23, v22), v23, v20 = v47, (v22 & 1) == 0))
        {
          v44 = (void *)MEMORY[0x227676638]();
          v34 = self;
          HMFGetOSLogHandle();
          v35 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v35, OS_LOG_TYPE_INFO))
          {
            HMFGetLogIdentifier();
            v36 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v46, "restrictedGuestAccessSettings");
            contexta = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(contexta, "uuidsOfAllowedAccessories");
            v37 = objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 138544130;
            v52 = v36;
            v53 = 2112;
            v54 = (uint64_t)v4;
            v55 = 2112;
            v56 = v46;
            v57 = 2112;
            v58 = v37;
            v38 = (void *)v37;
            _os_log_impl(&dword_2218F0000, v35, OS_LOG_TYPE_INFO, "%{public}@Rejecting message which is not allowed for user. Message: %@, user: %@, allowedAccessories: %@", buf, 0x2Au);

            v20 = v47;
          }

          objc_autoreleasePoolPop(v44);
          objc_msgSend(MEMORY[0x24BDD1540], "hmPrivateErrorWithCode:", 2906);
          v31 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v4, "respondWithError:", v31);
        }
        else
        {
          context = (void *)MEMORY[0x227676638]();
          v24 = self;
          HMFGetOSLogHandle();
          v25 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v25, OS_LOG_TYPE_INFO))
          {
            HMFGetLogIdentifier();
            v39 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v4, "shortDescription");
            v26 = objc_claimAutoreleasedReturnValue();
            objc_msgSend(v6, "UUIDString");
            v40 = v14;
            v27 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v9, "uniqueIdentifier");
            v28 = objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 138544642;
            v52 = v39;
            v53 = 2112;
            v54 = v26;
            v29 = (void *)v26;
            v55 = 2112;
            v56 = v27;
            v57 = 2112;
            v58 = v28;
            v30 = (void *)v28;
            v59 = 2112;
            v60 = v48;
            v61 = 2112;
            v62 = v13;
            _os_log_impl(&dword_2218F0000, v25, OS_LOG_TYPE_INFO, "%{public}@Processing single characteristic read request: %@ (%@/%@/%@/%@) as a special case of multiple characteristic read requests", buf, 0x3Eu);

            v20 = v47;
            v14 = v40;

          }
          objc_autoreleasePoolPop(context);
          v50 = v20;
          objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", &v50, 1);
          v31 = (void *)objc_claimAutoreleasedReturnValue();
          -[HMDHome __readWriteResponseHandler:unhandledRequests:](v24, "__readWriteResponseHandler:unhandledRequests:", v4, 0);
          v32 = (void *)objc_claimAutoreleasedReturnValue();
          -[HMDHome _readCharacteristicValues:requestMessage:source:withCompletionHandler:](v24, "_readCharacteristicValues:requestMessage:source:withCompletionHandler:", v31, v4, v43, v32);

          v20 = v47;
        }

        v19 = v45;
      }
      else
      {
        objc_msgSend(v4, "respondWithError:", v19);
      }

      v11 = v48;
    }
    else
    {
      objc_msgSend(MEMORY[0x24BDD1540], "hmErrorWithCode:", 2);
      v33 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "respondWithError:", v33);

    }
  }
  else
  {
    objc_msgSend(MEMORY[0x24BDD1540], "hmErrorWithCode:", 2);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "respondWithError:", v11);
  }

}

- (void)_handleMultipleCharacteristicRead:(id)a3
{
  id v4;
  void *v5;
  void (**v6)(_QWORD, _QWORD, _QWORD);
  id v7;
  void *v8;
  HMDHome *v9;
  NSObject *v10;
  void *v11;
  void *v12;
  uint64_t v13;
  id v14;
  void *v15;
  void (**v16)(_QWORD, _QWORD, _QWORD);
  void *v17;
  HMDHome *v18;
  NSObject *v19;
  void *v20;
  const char *v21;
  NSObject *v22;
  uint32_t v23;
  void *v24;
  HMDHome *v25;
  NSObject *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  HMDHome *v31;
  NSObject *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  id v37;
  uint8_t buf[4];
  void *v39;
  __int16 v40;
  id v41;
  __int16 v42;
  id v43;
  __int16 v44;
  void *v45;
  uint64_t v46;

  v46 = *MEMORY[0x24BDAC8D0];
  v4 = a3;
  objc_msgSend(MEMORY[0x24BE3F138], "currentActivity");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v4, "isRemote") && (objc_msgSend(v4, "isSecureRemote") & 1) == 0)
  {
    v17 = (void *)MEMORY[0x227676638]();
    v18 = self;
    HMFGetOSLogHandle();
    v19 = objc_claimAutoreleasedReturnValue();
    if (!os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
      goto LABEL_22;
    HMFGetLogIdentifier();
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543618;
    v39 = v20;
    v40 = 2112;
    v41 = v4;
    v21 = "%{public}@Message not supported: %@";
    v22 = v19;
    v23 = 22;
    goto LABEL_21;
  }
  if ((objc_msgSend(v4, "isEntitledForSPIAccess") & 1) != 0 || (objc_msgSend(v4, "isRemote") & 1) != 0)
  {
    v37 = 0;
    -[HMDHome _readRequestTuplesFromMessage:outUnhandledRequests:](self, "_readRequestTuplesFromMessage:outUnhandledRequests:", v4, &v37);
    v6 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
    v7 = v37;
    if (objc_msgSend(v6, "count"))
    {
      if (objc_msgSend(v7, "count"))
      {
        v8 = (void *)MEMORY[0x227676638]();
        v9 = self;
        HMFGetOSLogHandle();
        v10 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
        {
          HMFGetLogIdentifier();
          v11 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v4, "shortDescription");
          v12 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543874;
          v39 = v11;
          v40 = 2112;
          v41 = v12;
          v42 = 2112;
          v43 = v7;
          _os_log_impl(&dword_2218F0000, v10, OS_LOG_TYPE_INFO, "%{public}@%@ has characteristic requests that cannot be handled: %@", buf, 0x20u);

        }
        objc_autoreleasePoolPop(v8);
      }
      v13 = parseMessageSource(v4);
      objc_msgSend(v6, "count");
      objc_msgSend(v4, "isRemote");
      v14 = +[HMDMetricsUtilities stringForSource:](HMDMetricsUtilities, "stringForSource:", v13);
      objc_msgSend(v4, "userForHome:", self);
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      if (v15
        && !-[HMDHome areCharacteristicRequests:allowedForUser:](self, "areCharacteristicRequests:allowedForUser:", v6, v15))
      {
        v30 = (void *)MEMORY[0x227676638]();
        v31 = self;
        HMFGetOSLogHandle();
        v32 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v32, OS_LOG_TYPE_INFO))
        {
          HMFGetLogIdentifier();
          v33 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v15, "restrictedGuestAccessSettings");
          v34 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v34, "uuidsOfAllowedAccessories");
          v36 = v30;
          v35 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138544130;
          v39 = v33;
          v40 = 2112;
          v41 = v4;
          v42 = 2112;
          v43 = v15;
          v44 = 2112;
          v45 = v35;
          _os_log_impl(&dword_2218F0000, v32, OS_LOG_TYPE_INFO, "%{public}@Rejecting message which is not allowed for user. Message: %@, user: %@, allowedAccessories: %@", buf, 0x2Au);

          v30 = v36;
        }

        objc_autoreleasePoolPop(v30);
        objc_msgSend(MEMORY[0x24BDD1540], "hmPrivateErrorWithCode:", 2906);
        v16 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
        objc_msgSend(v4, "respondWithError:", v16);
      }
      else
      {
        -[HMDHome startReportingSessionForMessage:](self, "startReportingSessionForMessage:", v4);
        -[HMDHome __readWriteResponseHandler:unhandledRequests:](self, "__readWriteResponseHandler:unhandledRequests:", v4, v7);
        v16 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
        -[HMDHome _readCharacteristicValues:requestMessage:source:withCompletionHandler:](self, "_readCharacteristicValues:requestMessage:source:withCompletionHandler:", v6, v4, v13, v16);
      }
    }
    else
    {
      v24 = (void *)MEMORY[0x227676638]();
      v25 = self;
      HMFGetOSLogHandle();
      v26 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
      {
        HMFGetLogIdentifier();
        v27 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543362;
        v39 = v27;
        _os_log_impl(&dword_2218F0000, v26, OS_LOG_TYPE_DEFAULT, "%{public}@None of the characteristics/properties in multi-read are valid", buf, 0xCu);

      }
      objc_autoreleasePoolPop(v24);
      objc_msgSend(MEMORY[0x24BDD1540], "hmErrorWithCode:", 3);
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v15, "domain");

      objc_msgSend(v15, "code");
      objc_msgSend(v4, "responseHandler");
      v28 = (void *)objc_claimAutoreleasedReturnValue();

      if (!v28)
        goto LABEL_28;
      objc_msgSend(v4, "responseHandler");
      v16 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
      ((void (**)(_QWORD, void *, _QWORD))v16)[2](v16, v15, 0);
    }

LABEL_28:
    goto LABEL_29;
  }
  v17 = (void *)MEMORY[0x227676638]();
  v18 = self;
  HMFGetOSLogHandle();
  v19 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
  {
    HMFGetLogIdentifier();
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543362;
    v39 = v20;
    v21 = "%{public}@Client does not have entitlement to use SPI";
    v22 = v19;
    v23 = 12;
LABEL_21:
    _os_log_impl(&dword_2218F0000, v22, OS_LOG_TYPE_DEFAULT, v21, buf, v23);

  }
LABEL_22:

  objc_autoreleasePoolPop(v17);
  objc_msgSend(MEMORY[0x24BDD1540], "hmErrorWithCode:", 17);
  v7 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "domain");

  objc_msgSend(v7, "code");
  objc_msgSend(v4, "responseHandler");
  v29 = (void *)objc_claimAutoreleasedReturnValue();

  if (v29)
  {
    objc_msgSend(v4, "responseHandler");
    v6 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
    ((void (**)(_QWORD, id, _QWORD))v6)[2](v6, v7, 0);
LABEL_29:

  }
}

- (void)_handleSendingNotificationsForRequest:(id)a3 requestIdentifier:(id)a4 supportsMultiPartResponse:(BOOL)a5 characteristicUpdates:(id)a6 completion:(id)a7
{
  _BOOL4 v9;
  id v12;
  id v13;
  id v14;
  void (**v15)(id, void *);
  void *v16;
  void *v17;
  id v18;
  void *v19;
  void *v20;
  void *v21;
  HMDHome *v22;
  NSObject *v23;
  uint64_t v24;
  uint64_t v25;
  const char *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  const char *v34;
  void *v35;
  void *v36;
  void *v37;
  uint8_t buf[4];
  uint64_t v39;
  __int16 v40;
  void *v41;
  __int16 v42;
  const char *v43;
  __int16 v44;
  void *v45;
  __int16 v46;
  id v47;
  __int16 v48;
  id v49;
  __int16 v50;
  uint64_t v51;
  uint64_t v52;

  v9 = a5;
  v52 = *MEMORY[0x24BDAC8D0];
  v12 = a3;
  v13 = a4;
  v14 = a6;
  v15 = (void (**)(id, void *))a7;
  objc_msgSend(v12, "destination");
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v17 = v16;
  else
    v17 = 0;
  v18 = v17;

  if (objc_msgSend(v12, "isRemote")
    && (objc_msgSend(v18, "device"),
        v19 = (void *)objc_claimAutoreleasedReturnValue(),
        objc_msgSend(v19, "remoteDestinationString"),
        v20 = (void *)objc_claimAutoreleasedReturnValue(),
        v20,
        v19,
        v20))
  {
    v21 = (void *)MEMORY[0x227676638]();
    v22 = self;
    HMFGetOSLogHandle();
    v23 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v23, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v24 = objc_claimAutoreleasedReturnValue();
      v37 = (void *)v24;
      objc_msgSend(v12, "shortDescription");
      v25 = objc_claimAutoreleasedReturnValue();
      v26 = "single";
      if (v9)
        v26 = "multi";
      v34 = v26;
      v35 = (void *)v25;
      objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedInteger:", objc_msgSend(v14, "count"));
      v27 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v18, "device");
      v36 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v36, "remoteDestinationString");
      *(_DWORD *)buf = 138544898;
      v39 = v24;
      v40 = 2112;
      v41 = v35;
      v42 = 2080;
      v43 = v34;
      v44 = 2112;
      v45 = v27;
      v46 = 2112;
      v47 = v14;
      v48 = 2112;
      v49 = v13;
      v50 = 2112;
      v51 = objc_claimAutoreleasedReturnValue();
      v28 = (void *)v51;
      _os_log_impl(&dword_2218F0000, v23, OS_LOG_TYPE_INFO, "%{public}@Response notification for %@ (%s part) [%@] with chars: %@ with id: %@ to device: %@", buf, 0x48u);

    }
    objc_autoreleasePoolPop(v21);
    objc_msgSend(MEMORY[0x24BDD1880], "UUID");
    v29 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v29, "UUIDString");
    v30 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v18, "device");
    v31 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v31, "remoteDestinationString");
    v32 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHome _notifyUpdatedCharacteristic:withRequestIdentifier:notificationUpdateIdentifier:toUserDeviceAddress:completion:](v22, "_notifyUpdatedCharacteristic:withRequestIdentifier:notificationUpdateIdentifier:toUserDeviceAddress:completion:", v14, v13, v30, v32, v15);

  }
  else if (v15)
  {
    objc_msgSend(MEMORY[0x24BDD1540], "hmErrorWithCode:", 48);
    v33 = (void *)objc_claimAutoreleasedReturnValue();
    v15[2](v15, v33);

  }
}

- (void)_handlePendingResponsesTimerFired:(BOOL)a3
{
  _BOOL8 v3;
  HMDHome *v4;
  void *v5;
  void *v6;
  void *v7;
  _BOOL8 v8;
  __int128 v9;
  uint64_t i;
  void *v11;
  void *v12;
  uint64_t v13;
  void *v14;
  int v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  HMDHome *v22;
  NSObject *v23;
  void *v24;
  void *v25;
  double Current;
  double v27;
  void *v28;
  void *v29;
  id v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  HMDHome *v35;
  NSObject *v36;
  void *v37;
  void *v38;
  _BOOL8 v39;
  void *v40;
  void *v41;
  void *v42;
  __int128 v43;
  id obj;
  void *v45;
  HMDHome *v46;
  uint64_t v47;
  uint64_t v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  uint8_t buf[4];
  void *v54;
  __int16 v55;
  void *v56;
  __int16 v57;
  void *v58;
  _BYTE v59[128];
  uint64_t v60;

  v3 = a3;
  v4 = self;
  v60 = *MEMORY[0x24BDAC8D0];
  v49 = 0u;
  v50 = 0u;
  v51 = 0u;
  v52 = 0u;
  -[HMDHome pendingResponses](self, "pendingResponses");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "allValues");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = (void *)objc_msgSend(v6, "copy");

  v8 = v3;
  obj = v7;
  v48 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v49, v59, 16);
  if (v48)
  {
    v47 = *(_QWORD *)v50;
    *(_QWORD *)&v9 = 138543618;
    v43 = v9;
    v46 = v4;
    do
    {
      for (i = 0; i != v48; ++i)
      {
        if (*(_QWORD *)v50 != v47)
          objc_enumerationMutation(obj);
        v11 = *(void **)(*((_QWORD *)&v49 + 1) + 8 * i);
        if (!objc_msgSend(v11, "pendingResponseCount", v43))
        {
          objc_msgSend(v11, "allResponses");
          v12 = (void *)objc_claimAutoreleasedReturnValue();
          v13 = objc_msgSend(v12, "count");

          if (!v13)
          {
            v21 = (void *)MEMORY[0x227676638]();
            v22 = v4;
            HMFGetOSLogHandle();
            v23 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v23, OS_LOG_TYPE_DEBUG))
            {
              HMFGetLogIdentifier();
              v24 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v11, "originalRequestIdentifier");
              v25 = (void *)objc_claimAutoreleasedReturnValue();
              *(_DWORD *)buf = v43;
              v54 = v24;
              v55 = 2112;
              v56 = v25;
              _os_log_impl(&dword_2218F0000, v23, OS_LOG_TYPE_DEBUG, "%{public}@Removing pending response for identifier %@ - all responses received", buf, 0x16u);

            }
            objc_autoreleasePoolPop(v21);
            -[HMDHome pendingResponses](v22, "pendingResponses");
            v17 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v11, "originalRequestIdentifier");
            v20 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v17, "removeObjectForKey:", v20);
            goto LABEL_15;
          }
        }
        objc_msgSend(v11, "requestMessage");
        v14 = (void *)objc_claimAutoreleasedReturnValue();
        v15 = objc_msgSend(v14, "BOOLForKey:", CFSTR("kMultiPartResponseKey"));

        if (v15)
        {
          objc_msgSend(v11, "retrieveAndClearLatestResponses");
          v16 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v16, "na_map:", &__block_literal_global_1424);
          v17 = (void *)objc_claimAutoreleasedReturnValue();

          if (objc_msgSend(v17, "count"))
          {
            objc_msgSend(v11, "requestMessage");
            v18 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v11, "originalRequestIdentifier");
            v19 = (void *)objc_claimAutoreleasedReturnValue();
            -[HMDHome _handleSendingNotificationsForRequest:requestIdentifier:supportsMultiPartResponse:characteristicUpdates:completion:](v4, "_handleSendingNotificationsForRequest:requestIdentifier:supportsMultiPartResponse:characteristicUpdates:completion:", v18, v19, 1, v17, 0);

          }
          -[HMDHome pendingResponsesTimer](v4, "pendingResponsesTimer");
          v20 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v20, "resume");
LABEL_15:

        }
        if (!v8)
        {
          if (objc_msgSend(v11, "pendingResponseCount"))
          {
            Current = CFAbsoluteTimeGetCurrent();
            objc_msgSend(v11, "creationTime");
            if (Current - v27 <= *(double *)&pendingResponseMaxPeriod)
              continue;
          }
        }
        objc_msgSend(v11, "requestMessage");
        v28 = (void *)objc_claimAutoreleasedReturnValue();
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0)
          v29 = v28;
        else
          v29 = 0;
        v30 = v29;

        objc_msgSend(v11, "retrieveAndClearAllResponses");
        v31 = (void *)objc_claimAutoreleasedReturnValue();
        if (v30)
        {
          objc_msgSend(v30, "identifier");
          v32 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v30, "responseHandler");
          v33 = (void *)objc_claimAutoreleasedReturnValue();
          -[HMDHome _notifyChangedCharacteristics:identifier:multiPartResponse:moreMessagesInMultipart:requestMessage:withCompletionHandler:](v4, "_notifyChangedCharacteristics:identifier:multiPartResponse:moreMessagesInMultipart:requestMessage:withCompletionHandler:", v31, v32, 1, 0, v30, v33);

        }
        v34 = (void *)MEMORY[0x227676638]();
        v35 = v4;
        HMFGetOSLogHandle();
        v36 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v36, OS_LOG_TYPE_DEBUG))
        {
          HMFGetLogIdentifier();
          v37 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v30, "identifier");
          v45 = v34;
          v38 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v11, "originalRequestIdentifier");
          v39 = v8;
          v40 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543874;
          v54 = v37;
          v55 = 2112;
          v56 = v38;
          v57 = 2112;
          v58 = v40;
          _os_log_impl(&dword_2218F0000, v36, OS_LOG_TYPE_DEBUG, "%{public}@Removing pending response and notifying changes for message identifier: %@(%@)", buf, 0x20u);

          v8 = v39;
          v34 = v45;

        }
        objc_autoreleasePoolPop(v34);
        -[HMDHome pendingResponses](v35, "pendingResponses");
        v41 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v11, "originalRequestIdentifier");
        v42 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v41, "removeObjectForKey:", v42);

        v4 = v46;
      }
      v48 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v49, v59, 16);
    }
    while (v48);
  }

}

- (void)_handleCharacteristicEnableNotification:(id)a3
{
  id v3;
  void *v4;
  const __CFString *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  HMDHome *v11;
  NSObject *v12;
  void *v13;
  void *v14;
  void *v15;
  void (**v16)(_QWORD, _QWORD, _QWORD);
  __CFString *v17;
  void *v18;
  uint64_t v19;
  __int128 v20;
  const __CFString *v21;
  uint64_t i;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  id v27;
  void *v28;
  void *v29;
  HMDHome *v30;
  NSObject *v31;
  id v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  HMDHome *v37;
  NSObject *v38;
  void *v39;
  void *v40;
  id v41;
  void *v42;
  uint64_t v43;
  id v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  void *v51;
  void *v52;
  void *v53;
  void *v54;
  void *v55;
  NSObject *v56;
  void (**v57)(_QWORD, _QWORD, _QWORD);
  void *v58;
  void (**v59)(_QWORD, _QWORD, _QWORD);
  void *v60;
  __int128 v61;
  void *v62;
  const __CFString *v63;
  void *v64;
  id v65;
  id obj;
  __CFString *v67;
  NSObject *group;
  void *v69;
  void *v70;
  void *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  _QWORD block[4];
  id v78;
  _QWORD *v79;
  _QWORD v80[4];
  NSObject *v81;
  _QWORD *v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  _QWORD v91[5];
  id v92;
  uint8_t v93[128];
  uint8_t buf[4];
  id v95;
  __int16 v96;
  void *v97;
  __int16 v98;
  id v99;
  __int16 v100;
  const __CFString *v101;
  __int16 v102;
  void *v103;
  __int16 v104;
  void *v105;
  _BYTE v106[128];
  uint64_t v107;

  v107 = *MEMORY[0x24BDAC8D0];
  v3 = a3;
  v71 = v3;
  if (objc_msgSend(v3, "isRemote") && (objc_msgSend(v3, "isSecureRemote") & 1) == 0)
  {
    v10 = (void *)MEMORY[0x227676638]();
    v11 = self;
    HMFGetOSLogHandle();
    v12 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      HMFGetLogIdentifier();
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v95 = v13;
      v96 = 2112;
      v97 = v71;
      _os_log_impl(&dword_2218F0000, v12, OS_LOG_TYPE_DEFAULT, "%{public}@Message not supported: %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v10);
    objc_msgSend(v71, "responseHandler");
    v14 = (void *)objc_claimAutoreleasedReturnValue();

    if (v14)
    {
      objc_msgSend(MEMORY[0x24BDD1540], "hmErrorWithCode:", 17);
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v71, "responseHandler");
      v16 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
      ((void (**)(_QWORD, void *, _QWORD))v16)[2](v16, v15, 0);

    }
  }
  else
  {
    objc_msgSend(v3, "messagePayload");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "objectForKey:", CFSTR("kNotificationEnablePayloadKey"));
    v69 = (void *)objc_claimAutoreleasedReturnValue();

    if (v69)
    {
      v5 = CFSTR("kNotificationEnablePayloadKey");
    }
    else
    {
      objc_msgSend(v71, "messagePayload");
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v6, "objectForKey:", CFSTR("kNotificationDisablePayloadKey"));
      v7 = (void *)objc_claimAutoreleasedReturnValue();

      if (!v7)
      {
        objc_msgSend(v71, "responseHandler");
        v59 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
        objc_msgSend(MEMORY[0x24BDD1540], "hmErrorWithCode:", 3);
        v60 = (void *)objc_claimAutoreleasedReturnValue();
        ((void (**)(_QWORD, void *, _QWORD))v59)[2](v59, v60, 0);

        goto LABEL_49;
      }
      v5 = CFSTR("kNotificationDisablePayloadKey");
    }
    objc_msgSend(v71, "dictionaryForKey:", v5);
    v70 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v71, "applicationBundleIdentifier");
    v8 = (void *)objc_claimAutoreleasedReturnValue();

    if (v8)
    {
      objc_msgSend(v71, "applicationBundleIdentifier");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(CFSTR("com.apple.HomeKit.client."), "stringByAppendingString:", v9);
      v67 = (__CFString *)objc_claimAutoreleasedReturnValue();

    }
    else
    {
      v67 = CFSTR("com.apple.HomeKitDaemon");
      v17 = CFSTR("com.apple.HomeKitDaemon");
    }
    group = dispatch_group_create();
    v91[0] = 0;
    v91[1] = v91;
    v91[2] = 0x3032000000;
    v91[3] = __Block_byref_object_copy__14094;
    v91[4] = __Block_byref_object_dispose__14095;
    v92 = 0;
    objc_msgSend(MEMORY[0x24BDD1650], "strongToStrongObjectsMapTable");
    v64 = (void *)objc_claimAutoreleasedReturnValue();
    v89 = 0u;
    v90 = 0u;
    v87 = 0u;
    v88 = 0u;
    objc_msgSend(v70, "allKeys");
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    v19 = objc_msgSend(v18, "countByEnumeratingWithState:objects:count:", &v87, v106, 16);
    if (v19)
    {
      v72 = *(_QWORD *)v88;
      v21 = CFSTR("disable");
      if (v69)
        v21 = CFSTR("enable");
      v63 = v21;
      *(_QWORD *)&v20 = 138544642;
      v61 = v20;
      obj = v18;
      do
      {
        v74 = v19;
        for (i = 0; i != v74; ++i)
        {
          if (*(_QWORD *)v88 != v72)
            objc_enumerationMutation(obj);
          v23 = *(void **)(*((_QWORD *)&v87 + 1) + 8 * i);
          v24 = (void *)objc_msgSend(objc_alloc(MEMORY[0x24BDD1880]), "initWithUUIDString:", v23);
          -[HMDHome accessoryWithUUID:](self, "accessoryWithUUID:", v24);
          v25 = (void *)objc_claimAutoreleasedReturnValue();

          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) != 0)
            v26 = v25;
          else
            v26 = 0;
          v27 = v26;

          if (v27)
          {
            objc_msgSend(v70, "hmf_arrayForKey:", v23);
            v28 = (void *)objc_claimAutoreleasedReturnValue();
            if (objc_msgSend(v28, "count"))
            {
              objc_msgSend(v64, "setObject:forKey:", v28, v27);
            }
            else
            {
              v36 = (void *)MEMORY[0x227676638]();
              v37 = self;
              HMFGetOSLogHandle();
              v38 = (id)objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v38, OS_LOG_TYPE_INFO))
              {
                v62 = v36;
                HMFGetLogIdentifier();
                v65 = (id)objc_claimAutoreleasedReturnValue();
                -[HMDHome name](v37, "name");
                v39 = (void *)objc_claimAutoreleasedReturnValue();
                -[HMDHome uuid](v37, "uuid");
                v40 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v40, "UUIDString");
                v41 = (id)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v27, "name");
                v42 = (void *)objc_claimAutoreleasedReturnValue();
                *(_DWORD *)buf = v61;
                v95 = v65;
                v96 = 2112;
                v97 = v39;
                v98 = 2112;
                v99 = v41;
                v100 = 2112;
                v101 = v63;
                v102 = 2112;
                v103 = v42;
                v104 = 2112;
                v105 = v23;
                _os_log_impl(&dword_2218F0000, v38, OS_LOG_TYPE_INFO, "%{public}@%@/%@: Received notification %@ for zero characteristics on accessory %@/%@", buf, 0x3Eu);

                v36 = v62;
              }

              objc_autoreleasePoolPop(v36);
            }

          }
          else
          {
            v29 = (void *)MEMORY[0x227676638]();
            v30 = self;
            HMFGetOSLogHandle();
            v31 = (id)objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v31, OS_LOG_TYPE_INFO))
            {
              HMFGetLogIdentifier();
              v32 = (id)objc_claimAutoreleasedReturnValue();
              -[HMDHome name](v30, "name");
              v33 = (void *)objc_claimAutoreleasedReturnValue();
              -[HMDHome uuid](v30, "uuid");
              v34 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v34, "UUIDString");
              v35 = (void *)objc_claimAutoreleasedReturnValue();
              *(_DWORD *)buf = 138544386;
              v95 = v32;
              v96 = 2112;
              v97 = v33;
              v98 = 2112;
              v99 = v35;
              v100 = 2112;
              v101 = v63;
              v102 = 2112;
              v103 = v23;
              _os_log_impl(&dword_2218F0000, v31, OS_LOG_TYPE_INFO, "%{public}@%@/%@: Received notification %@ for different accessory: %@", buf, 0x34u);

            }
            objc_autoreleasePoolPop(v29);
          }

        }
        v18 = obj;
        v19 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v87, v106, 16);
      }
      while (v19);
    }

    v43 = objc_msgSend(v64, "count");
    if (v43)
    {
      v85 = 0u;
      v86 = 0u;
      v83 = 0u;
      v84 = 0u;
      v44 = v64;
      v45 = objc_msgSend(v44, "countByEnumeratingWithState:objects:count:", &v83, v93, 16);
      if (v45)
      {
        v46 = 0;
        v47 = *(_QWORD *)v84;
        v73 = v43 - 1;
        do
        {
          v48 = 0;
          v49 = v73 - v46;
          v75 = v46 + v45;
          do
          {
            if (*(_QWORD *)v84 != v47)
              objc_enumerationMutation(v44);
            v50 = *(void **)(*((_QWORD *)&v83 + 1) + 8 * v48);
            dispatch_group_enter(group);
            v51 = (void *)MEMORY[0x24BE3F1B0];
            v80[0] = MEMORY[0x24BDAC760];
            v80[1] = 3221225472;
            v80[2] = __51__HMDHome__handleCharacteristicEnableNotification___block_invoke;
            v80[3] = &unk_24E7960B0;
            v82 = v91;
            v81 = group;
            objc_msgSend(v51, "messageWithMessage:messagePayload:responseHandler:", v71, 0, v80);
            v52 = (void *)objc_claimAutoreleasedReturnValue();
            v53 = (void *)objc_msgSend(v52, "mutableCopy");

            if (v49 != v48)
            {
              objc_msgSend(MEMORY[0x24BDD1880], "UUID");
              v54 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v53, "setIdentifier:", v54);

            }
            objc_msgSend(v44, "objectForKey:", v50, v61);
            v55 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v50, "enableNotification:forCharacteristicIDs:message:clientIdentifier:", v69 != 0, v55, v53, v67);

            ++v48;
          }
          while (v45 != v48);
          v45 = objc_msgSend(v44, "countByEnumeratingWithState:objects:count:", &v83, v93, 16);
          v46 = v75;
        }
        while (v45);
      }

      -[HMDHome workQueue](self, "workQueue");
      v56 = objc_claimAutoreleasedReturnValue();
      block[0] = MEMORY[0x24BDAC760];
      block[1] = 3221225472;
      block[2] = __51__HMDHome__handleCharacteristicEnableNotification___block_invoke_2;
      block[3] = &unk_24E79B698;
      v78 = v71;
      v79 = v91;
      dispatch_group_notify(group, v56, block);

      v57 = (void (**)(_QWORD, _QWORD, _QWORD))v78;
    }
    else
    {
      objc_msgSend(v71, "responseHandler");
      v57 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x24BDD1540], "hmErrorWithCode:", 2);
      v58 = (void *)objc_claimAutoreleasedReturnValue();
      ((void (**)(_QWORD, void *, _QWORD))v57)[2](v57, v58, 0);

    }
    _Block_object_dispose(v91, 8);

  }
LABEL_49:

}

- (BOOL)isResidentSupported
{
  void *v3;
  char v4;

  isWatch();
  -[HMDHome residentDeviceManager](self, "residentDeviceManager");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "isResidentAvailable");

  return v4;
}

- (id)primaryResident
{
  void *v2;
  void *v3;

  -[HMDHome residentDeviceManager](self, "residentDeviceManager");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "primaryResidentDevice");
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  return v3;
}

- (BOOL)isCurrentDevicePrimaryResident
{
  void *v2;
  char v3;

  -[HMDHome residentDeviceManager](self, "residentDeviceManager");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "isCurrentDevicePrimaryResident");

  return v3;
}

- (BOOL)residentSyncDidSync
{
  return -[HMDHome residentSyncClientDidSync](self, "residentSyncClientDidSync")
      || -[HMDHome isCurrentDevicePrimaryResident](self, "isCurrentDevicePrimaryResident");
}

- (BOOL)hasResidentDevicesForPrimaryResidentChangeMonitor:(id)a3
{
  void *v3;
  void *v4;
  BOOL v5;

  -[HMDHome residentDeviceManager](self, "residentDeviceManager", a3);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "residentDevices");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v4, "count") != 0;

  return v5;
}

- (id)_hasConfirmedPrimaryResidentDevice
{
  void *v2;
  void *v3;

  -[HMDHome residentDeviceManager](self, "residentDeviceManager");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "confirmedPrimaryResidentDevice");
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  return v3;
}

- (BOOL)isCurrentDeviceConfirmedPrimaryResident
{
  void *v2;
  char v3;

  -[HMDHome residentDeviceManager](self, "residentDeviceManager");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "isCurrentDeviceConfirmedPrimaryResident");

  return v3;
}

- (NSNumber)matterFabricID
{
  void *v3;
  void *v4;

  if (isFeatureMatteriPhoneOnlyPairingControlEnabled())
    -[HMDHome fabric](self, "fabric");
  else
    -[HMDHome chipStorage](self, "chipStorage");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "fabricID");
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  return (NSNumber *)v4;
}

- (BOOL)doesHomeContainResident
{
  void *v2;
  void *v3;
  BOOL v4;

  -[HMDHome residentDeviceManager](self, "residentDeviceManager");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "residentDevices");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "count") != 0;

  return v4;
}

- (BOOL)hasAnyResident
{
  void *v2;
  char v3;

  -[HMDHome residentDeviceManager](self, "residentDeviceManager");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "hasAnyResident");

  return v3;
}

- (NSNumber)residentSelectionVersion
{
  NSNumber *v3;

  os_unfair_recursive_lock_lock_with_options();
  v3 = self->_residentSelectionVersion;
  os_unfair_recursive_lock_unlock();
  return v3;
}

- (void)setResidentSelectionVersion:(id)a3
{
  NSNumber *v4;
  NSNumber *residentSelectionVersion;

  v4 = (NSNumber *)a3;
  os_unfair_recursive_lock_lock_with_options();
  residentSelectionVersion = self->_residentSelectionVersion;
  self->_residentSelectionVersion = v4;

  os_unfair_recursive_lock_unlock();
  logAndPostNotification(CFSTR("HMDHomeResidentSelectionVersionDidChangeNotification"), self, 0);
}

- (void)_handleSetResidentElectionVersion:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  HMDHome *v8;
  NSObject *v9;
  void *v10;
  void *v11;
  HMDHomeModel *v12;
  void *v13;
  void *v14;
  void *v15;
  HMDHomeModel *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  int v23;
  void *v24;
  __int16 v25;
  void *v26;
  __int16 v27;
  void *v28;
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  v4 = a3;
  objc_msgSend(v4, "messagePayload");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "hmf_numberForKey:", *MEMORY[0x24BDD61D8]);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  if (v6)
  {
    v7 = (void *)MEMORY[0x227676638]();
    v8 = self;
    HMFGetOSLogHandle();
    v9 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      -[HMDHome residentSelectionVersion](v8, "residentSelectionVersion");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      v23 = 138543874;
      v24 = v10;
      v25 = 2114;
      v26 = v11;
      v27 = 2114;
      v28 = v6;
      _os_log_impl(&dword_2218F0000, v9, OS_LOG_TYPE_INFO, "%{public}@Received request to update resident selection version from %{public}@ to %{public}@", (uint8_t *)&v23, 0x20u);

    }
    objc_autoreleasePoolPop(v7);
    v12 = [HMDHomeModel alloc];
    -[HMDHome uuid](v8, "uuid");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHome homeManager](v8, "homeManager");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v14, "uuid");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    v16 = -[HMDBackingStoreModelObject initWithObjectChangeType:uuid:parentUUID:](v12, "initWithObjectChangeType:uuid:parentUUID:", 2, v13, v15);

    -[HMDHomeModel setResidentSelectionVersion:](v16, "setResidentSelectionVersion:", v6);
    objc_msgSend(v4, "untrustedClientIdentifier");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    +[HMDBackingStoreTransactionOptions defaultXPCOptionsWithCDTransactionAuthor:clientIdentifier:](HMDBackingStoreTransactionOptions, "defaultXPCOptionsWithCDTransactionAuthor:clientIdentifier:", 10, v17);
    v18 = (void *)objc_claimAutoreleasedReturnValue();

    -[HMDHome backingStore](v8, "backingStore");
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "name");
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v19, "transaction:options:", v20, v18);
    v21 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v21, "add:withMessage:", v16, v4);
    objc_msgSend(v21, "run");

  }
  else
  {
    objc_msgSend(MEMORY[0x24BDD1540], "hmErrorWithCode:", 20);
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "respondWithError:", v22);

  }
}

- (id)preferredDevice
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  -[HMDHome homeManager](self, "homeManager");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "messageDispatcher");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "residentCommunicationHandlerForHome:", self);
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v5, "preferredDevice");
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  return v6;
}

- (NSArray)residentCapableDevices
{
  void *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  _BYTE v16[128];
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  objc_msgSend(MEMORY[0x24BDBCEB8], "array");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  v15 = 0u;
  -[HMDHome residentDeviceManager](self, "residentDeviceManager", 0);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "residentDevices");
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
  if (v6)
  {
    v7 = v6;
    v8 = *(_QWORD *)v13;
    do
    {
      v9 = 0;
      do
      {
        if (*(_QWORD *)v13 != v8)
          objc_enumerationMutation(v5);
        objc_msgSend(*(id *)(*((_QWORD *)&v12 + 1) + 8 * v9), "device");
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v3, "addObject:", v10);

        ++v9;
      }
      while (v7 != v9);
      v7 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
    }
    while (v7);
  }

  return (NSArray *)v3;
}

- (NSArray)residentEnabledDevices
{
  void *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t i;
  void *v10;
  void *v11;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _BYTE v17[128];
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  objc_msgSend(MEMORY[0x24BDBCEB8], "array");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v13 = 0u;
  v14 = 0u;
  v15 = 0u;
  v16 = 0u;
  -[HMDHome residentDeviceManager](self, "residentDeviceManager", 0);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "residentDevices");
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
  if (v6)
  {
    v7 = v6;
    v8 = *(_QWORD *)v14;
    do
    {
      for (i = 0; i != v7; ++i)
      {
        if (*(_QWORD *)v14 != v8)
          objc_enumerationMutation(v5);
        v10 = *(void **)(*((_QWORD *)&v13 + 1) + 8 * i);
        if (objc_msgSend(v10, "isEnabled"))
        {
          objc_msgSend(v10, "device");
          v11 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v3, "addObject:", v11);

        }
      }
      v7 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
    }
    while (v7);
  }

  return (NSArray *)v3;
}

- (NSArray)enabledResidents
{
  void *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t i;
  void *v10;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  _BYTE v16[128];
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  objc_msgSend(MEMORY[0x24BDBCEB8], "array");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  v15 = 0u;
  -[HMDHome residentDeviceManager](self, "residentDeviceManager", 0);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "residentDevices");
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
  if (v6)
  {
    v7 = v6;
    v8 = *(_QWORD *)v13;
    do
    {
      for (i = 0; i != v7; ++i)
      {
        if (*(_QWORD *)v13 != v8)
          objc_enumerationMutation(v5);
        v10 = *(void **)(*((_QWORD *)&v12 + 1) + 8 * i);
        if (objc_msgSend(v10, "isEnabled"))
          objc_msgSend(v3, "addObject:", v10);
      }
      v7 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
    }
    while (v7);
  }

  return (NSArray *)v3;
}

- (void)addResidentCapableDevice:(id)a3
{
  id v4;
  void *v5;
  int v6;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t i;
  void *v13;
  void *v14;
  int v15;
  void *v16;
  void *v17;
  HMDResidentDeviceModel *v18;
  void *v19;
  HMDResidentDeviceModel *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  HMDHome *v27;
  NSObject *v28;
  void *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  uint8_t buf[4];
  void *v35;
  __int16 v36;
  void *v37;
  _BYTE v38[128];
  uint64_t v39;

  v39 = *MEMORY[0x24BDAC8D0];
  v4 = a3;
  if (-[HMDHome isOwnerUser](self, "isOwnerUser"))
  {
    objc_msgSend(v4, "capabilities");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = objc_msgSend(v5, "isResidentCapable");

    if (v6)
    {
      v32 = 0u;
      v33 = 0u;
      v30 = 0u;
      v31 = 0u;
      -[HMDHome residentDeviceManager](self, "residentDeviceManager", 0);
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v7, "residentDevices");
      v8 = (void *)objc_claimAutoreleasedReturnValue();

      v9 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v30, v38, 16);
      if (v9)
      {
        v10 = v9;
        v11 = *(_QWORD *)v31;
        while (2)
        {
          for (i = 0; i != v10; ++i)
          {
            if (*(_QWORD *)v31 != v11)
              objc_enumerationMutation(v8);
            v13 = *(void **)(*((_QWORD *)&v30 + 1) + 8 * i);
            objc_msgSend(v13, "device");
            v14 = (void *)objc_claimAutoreleasedReturnValue();
            v15 = objc_msgSend(v14, "isEqual:", v4);

            if (v15)
            {
              v26 = (void *)MEMORY[0x227676638]();
              v27 = self;
              HMFGetOSLogHandle();
              v28 = objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v28, OS_LOG_TYPE_DEBUG))
              {
                HMFGetLogIdentifier();
                v29 = (void *)objc_claimAutoreleasedReturnValue();
                *(_DWORD *)buf = 138543618;
                v35 = v29;
                v36 = 2112;
                v37 = v13;
                _os_log_impl(&dword_2218F0000, v28, OS_LOG_TYPE_DEBUG, "%{public}@Resident device already exists, refraining from creating a new transaction: %@", buf, 0x16u);

              }
              objc_autoreleasePoolPop(v26);
              goto LABEL_17;
            }
          }
          v10 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v30, v38, 16);
          if (v10)
            continue;
          break;
        }
      }

      -[HMDHome uuid](self, "uuid");
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "identifier");
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      +[HMDResidentDevice deriveUUIDFromHomeUUID:deviceUUID:](HMDResidentDevice, "deriveUUIDFromHomeUUID:deviceUUID:", v16, v17);
      v8 = (void *)objc_claimAutoreleasedReturnValue();

      v18 = [HMDResidentDeviceModel alloc];
      -[HMDHome uuid](self, "uuid");
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      v20 = -[HMDBackingStoreModelObject initWithObjectChangeType:uuid:parentUUID:](v18, "initWithObjectChangeType:uuid:parentUUID:", 1, v8, v19);

      -[HMDResidentDeviceModel setEnabled:](v20, "setEnabled:", MEMORY[0x24BDBD1C8]);
      objc_msgSend(v4, "identifier");
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v21, "UUIDString");
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      -[HMDResidentDeviceModel setDeviceUUID:](v20, "setDeviceUUID:", v22);

      if (objc_msgSend(v4, "isCurrentDevice"))
        -[HMDResidentDeviceModel setDevice:](v20, "setDevice:", v4);
      -[HMDHome backingStore](self, "backingStore");
      v23 = (void *)objc_claimAutoreleasedReturnValue();
      +[HMDBackingStoreTransactionOptions defaultXPCOptions](HMDBackingStoreTransactionOptions, "defaultXPCOptions");
      v24 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v23, "transaction:options:", CFSTR("addResidentCapableDevice"), v24);
      v25 = (void *)objc_claimAutoreleasedReturnValue();

      objc_msgSend(v25, "add:withMessage:", v20, 0);
      objc_msgSend(v25, "run");

LABEL_17:
    }
  }

}

- (void)removeResidentCapableDevice:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t i;
  void *v11;
  void *v12;
  int v13;
  void *v14;
  void *v15;
  HMDHome *v16;
  NSObject *v17;
  void *v18;
  void *v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint8_t v24[128];
  uint8_t buf[4];
  void *v26;
  __int16 v27;
  id v28;
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  v4 = a3;
  if (-[HMDHome isOwnerUser](self, "isOwnerUser"))
  {
    v22 = 0u;
    v23 = 0u;
    v20 = 0u;
    v21 = 0u;
    -[HMDHome residentDeviceManager](self, "residentDeviceManager", 0);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "residentDevices");
    v6 = (void *)objc_claimAutoreleasedReturnValue();

    v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v20, v24, 16);
    if (v7)
    {
      v8 = v7;
      v9 = *(_QWORD *)v21;
      while (2)
      {
        for (i = 0; i != v8; ++i)
        {
          if (*(_QWORD *)v21 != v9)
            objc_enumerationMutation(v6);
          v11 = *(void **)(*((_QWORD *)&v20 + 1) + 8 * i);
          objc_msgSend(v11, "device");
          v12 = (void *)objc_claimAutoreleasedReturnValue();
          v13 = objc_msgSend(v12, "isEqual:", v4);

          if (v13)
          {
            -[HMDHome residentDeviceManager](self, "residentDeviceManager");
            v19 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v19, "removeResidentDevice:", v11);

            goto LABEL_16;
          }
        }
        v8 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v20, v24, 16);
        if (v8)
          continue;
        break;
      }
    }

    if (objc_msgSend(v4, "isCurrentDevice"))
    {
      -[HMDHome notificationRegistry](self, "notificationRegistry");
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v14, "clearAllRegistrations");

    }
  }
  else
  {
    v15 = (void *)MEMORY[0x227676638]();
    v16 = self;
    HMFGetOSLogHandle();
    v17 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v26 = v18;
      v27 = 2112;
      v28 = v4;
      _os_log_impl(&dword_2218F0000, v17, OS_LOG_TYPE_ERROR, "%{public}@Attempting to remove resident on non-owner home -- device: %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v15);
  }
LABEL_16:

}

- (void)migrateAfterResidentChange
{
  void *v3;
  HMDHome *v4;
  NSObject *v5;
  void *v6;
  void *v7;
  HMDHome *v8;
  NSObject *v9;
  void *v10;
  void *v11;
  _QWORD v12[4];
  id v13;
  uint8_t buf[4];
  void *v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  v3 = (void *)MEMORY[0x227676638](self, a2);
  v4 = self;
  HMFGetOSLogHandle();
  v5 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543362;
    v15 = v6;
    _os_log_impl(&dword_2218F0000, v5, OS_LOG_TYPE_INFO, "%{public}@migrateAfterResidentChange", buf, 0xCu);

  }
  objc_autoreleasePoolPop(v3);
  if (-[HMDHome isMigratingAfterResidentChange](v4, "isMigratingAfterResidentChange"))
  {
    v7 = (void *)MEMORY[0x227676638]();
    v8 = v4;
    HMFGetOSLogHandle();
    v9 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v15 = v10;
      _os_log_impl(&dword_2218F0000, v9, OS_LOG_TYPE_INFO, "%{public}@Migration after resident change is already running", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v7);
  }
  else
  {
    -[HMDHome setMigratingAfterResidentChange:](v4, "setMigratingAfterResidentChange:", 1);
    objc_initWeak((id *)buf, v4);
    -[HMDHome backingStore](v4, "backingStore");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v12[0] = MEMORY[0x24BDAC760];
    v12[1] = 3221225472;
    v12[2] = __37__HMDHome_migrateAfterResidentChange__block_invoke;
    v12[3] = &unk_24E799B48;
    objc_copyWeak(&v13, (id *)buf);
    objc_msgSend(v11, "submitBlock:", v12);

    objc_destroyWeak(&v13);
    objc_destroyWeak((id *)buf);
  }
}

- (void)_handleResidentChange
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  void *v8;
  void *v9;
  HMDHome *v10;
  NSObject *v11;
  void *v12;
  void *v13;
  void *v14;
  _QWORD v15[4];
  id v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  id location[2];
  _BYTE v22[128];
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  -[HMDHome setMigratingAfterResidentChange:](self, "setMigratingAfterResidentChange:", 0);
  v19 = 0u;
  v20 = 0u;
  v17 = 0u;
  v18 = 0u;
  -[HMDHome triggers](self, "triggers");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v17, v22, 16);
  if (v4)
  {
    v5 = *(_QWORD *)v18;
    v6 = MEMORY[0x24BDAC760];
    do
    {
      for (i = 0; i != v4; ++i)
      {
        if (*(_QWORD *)v18 != v5)
          objc_enumerationMutation(v3);
        v8 = *(void **)(*((_QWORD *)&v17 + 1) + 8 * i);
        objc_initWeak(location, v8);
        v15[0] = v6;
        v15[1] = 3221225472;
        v15[2] = __32__HMDHome__handleResidentChange__block_invoke;
        v15[3] = &unk_24E799B48;
        objc_copyWeak(&v16, location);
        objc_msgSend(v8, "activateAfterResidentChangeWithCompletion:", v15);
        objc_destroyWeak(&v16);
        objc_destroyWeak(location);
      }
      v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v17, v22, 16);
    }
    while (v4);
  }

  v9 = (void *)MEMORY[0x227676638]();
  v10 = self;
  HMFGetOSLogHandle();
  v11 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    LODWORD(location[0]) = 138543362;
    *(id *)((char *)location + 4) = v12;
    _os_log_impl(&dword_2218F0000, v11, OS_LOG_TYPE_INFO, "%{public}@Calling presence feeder to notify the presence status to the new resident", (uint8_t *)location, 0xCu);

  }
  objc_autoreleasePoolPop(v9);
  -[HMDHome presenceMonitor](v10, "presenceMonitor");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v13, "residentChanged");

  -[HMDHome periodicReader](v10, "periodicReader");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v14, "residentUpdated");

  -[HMDHome _evaluateNetworkProtectionAndRouterManagement](v10, "_evaluateNetworkProtectionAndRouterManagement");
}

- (void)handlePrimaryResidentChangeNotification:(id)a3
{
  id v4;
  void *v5;
  HMDHome *v6;
  NSObject *v7;
  void *v8;
  void *v9;
  NSObject *v10;
  id v11;
  _QWORD v12[4];
  id v13;
  HMDHome *v14;
  uint8_t buf[4];
  void *v16;
  __int16 v17;
  void *v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v4 = a3;
  v5 = (void *)MEMORY[0x227676638]();
  v6 = self;
  HMFGetOSLogHandle();
  v7 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "name");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543618;
    v16 = v8;
    v17 = 2112;
    v18 = v9;
    _os_log_impl(&dword_2218F0000, v7, OS_LOG_TYPE_INFO, "%{public}@Received resident update notification: %@", buf, 0x16u);

  }
  objc_autoreleasePoolPop(v5);
  -[HMDHome workQueue](v6, "workQueue");
  v10 = objc_claimAutoreleasedReturnValue();
  v12[0] = MEMORY[0x24BDAC760];
  v12[1] = 3221225472;
  v12[2] = __51__HMDHome_handlePrimaryResidentChangeNotification___block_invoke;
  v12[3] = &unk_24E79C268;
  v13 = v4;
  v14 = v6;
  v11 = v4;
  dispatch_async(v10, v12);

}

- (void)updateAccessoryBrowsing
{
  _BOOL8 v3;
  _BOOL8 v4;
  id v5;

  v3 = -[HMDHome isCurrentDeviceConfirmedPrimaryResident](self, "isCurrentDeviceConfirmedPrimaryResident");
  v4 = -[HMDHome isCurrentDeviceAvailableResident](self, "isCurrentDeviceAvailableResident");
  -[HMDHome accessoryBrowser](self, "accessoryBrowser");
  v5 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "updateRemoteAccessoryBrowsing:whbScan:", v4, v3);

}

- (BOOL)isRemoteAccessDeviceReachable
{
  void *v3;
  BOOL v4;

  if (!-[HMDHome remoteAccessIsEnabled](self, "remoteAccessIsEnabled"))
    return 0;
  -[HMDHome primaryResident](self, "primaryResident");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = (objc_msgSend(v3, "isReachable") & 1) != 0 || -[HMDHome isCompanionReachable](self, "isCompanionReachable");

  return v4;
}

- (id)_residentUsers
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _BYTE v17[128];
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  v3 = (void *)MEMORY[0x24BDBCEB8];
  -[HMDHome users](self, "users");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "arrayWithCapacity:", objc_msgSend(v4, "count"));
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  v15 = 0u;
  v16 = 0u;
  v13 = 0u;
  v14 = 0u;
  -[HMDHome users](self, "users", 0);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
  if (v7)
  {
    v8 = v7;
    v9 = *(_QWORD *)v14;
    do
    {
      v10 = 0;
      do
      {
        if (*(_QWORD *)v14 != v9)
          objc_enumerationMutation(v6);
        v11 = *(_QWORD *)(*((_QWORD *)&v13 + 1) + 8 * v10);
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0)
          objc_msgSend(v5, "addObject:", v11);
        ++v10;
      }
      while (v8 != v10);
      v8 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
    }
    while (v8);
  }

  return v5;
}

- (BOOL)_residentDeviceAvailable
{
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t i;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  _BYTE v12[128];
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  if (-[HMDHome isResidentSupported](self, "isResidentSupported"))
  {
    LOBYTE(v3) = 1;
  }
  else
  {
    v10 = 0u;
    v11 = 0u;
    v8 = 0u;
    v9 = 0u;
    -[HMDHome _residentUsers](self, "_residentUsers", 0);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    v3 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
    if (v3)
    {
      v5 = *(_QWORD *)v9;
      while (2)
      {
        for (i = 0; i != v3; ++i)
        {
          if (*(_QWORD *)v9 != v5)
            objc_enumerationMutation(v4);
          if (objc_msgSend(*(id *)(*((_QWORD *)&v8 + 1) + 8 * i), "configurationState") == 2)
          {
            LOBYTE(v3) = 1;
            goto LABEL_13;
          }
        }
        v3 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
        if (v3)
          continue;
        break;
      }
    }
LABEL_13:

  }
  return v3;
}

- (void)updateNetworkConnectivity:(BOOL)a3 companionReachable:(BOOL)a4
{
  NSObject *v7;
  _QWORD v8[5];
  BOOL v9;
  BOOL v10;

  -[HMDHome workQueue](self, "workQueue");
  v7 = objc_claimAutoreleasedReturnValue();
  v8[0] = MEMORY[0x24BDAC760];
  v8[1] = 3221225472;
  v8[2] = __56__HMDHome_updateNetworkConnectivity_companionReachable___block_invoke;
  v8[3] = &unk_24E789C58;
  v8[4] = self;
  v9 = a3;
  v10 = a4;
  dispatch_async(v7, v8);

}

- (void)setRemoteAccessEnabled:(BOOL)a3
{
  os_unfair_recursive_lock_lock_with_options();
  self->_remoteAccessIsEnabled = a3;
  os_unfair_recursive_lock_unlock();
}

- (BOOL)remoteAccessIsEnabled
{
  os_unfair_recursive_lock_lock_with_options();
  LOBYTE(self) = self->_remoteAccessIsEnabled;
  os_unfair_recursive_lock_unlock();
  return (char)self;
}

- (void)remoteAccessEnabled:(BOOL)a3
{
  NSObject *v5;
  _QWORD v6[5];
  BOOL v7;

  -[HMDHome workQueue](self, "workQueue");
  v5 = objc_claimAutoreleasedReturnValue();
  v6[0] = MEMORY[0x24BDAC760];
  v6[1] = 3221225472;
  v6[2] = __31__HMDHome_remoteAccessEnabled___block_invoke;
  v6[3] = &unk_24E7968C8;
  v6[4] = self;
  v7 = a3;
  dispatch_async(v5, v6);

}

- (void)_remoteAccessEnabled:(BOOL)a3
{
  _BOOL8 v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  void *v10;
  id v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  _BYTE v16[128];
  uint64_t v17;

  v3 = a3;
  v17 = *MEMORY[0x24BDAC8D0];
  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  v15 = 0u;
  -[HMDHome accessories](self, "accessories", 0);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
  if (v5)
  {
    v6 = v5;
    v7 = *(_QWORD *)v13;
    do
    {
      v8 = 0;
      do
      {
        if (*(_QWORD *)v13 != v7)
          objc_enumerationMutation(v4);
        v9 = *(id *)(*((_QWORD *)&v12 + 1) + 8 * v8);
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0)
          v10 = v9;
        else
          v10 = 0;
        v11 = v10;

        objc_msgSend(v11, "remoteAccessEnabled:", v3);
        ++v8;
      }
      while (v6 != v8);
      v6 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
    }
    while (v6);
  }

}

- (void)notifyNewRemotePeersFound:(BOOL)a3 remoteUsersRemoved:(id)a4 forceRemoteNotificationRegistration:(BOOL)a5
{
  id v8;
  NSObject *v9;
  id v10;
  _QWORD block[5];
  id v12;
  BOOL v13;
  BOOL v14;

  v8 = a4;
  -[HMDHome workQueue](self, "workQueue");
  v9 = objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x24BDAC760];
  block[1] = 3221225472;
  block[2] = __92__HMDHome_notifyNewRemotePeersFound_remoteUsersRemoved_forceRemoteNotificationRegistration___block_invoke;
  block[3] = &unk_24E790028;
  block[4] = self;
  v12 = v8;
  v13 = a3;
  v14 = a5;
  v10 = v8;
  dispatch_async(v9, block);

}

- (void)_updateConfigurationStateForResidentDevice:(id)a3 desiredConfigState:(unint64_t)a4 message:(id)a5
{
  id v8;
  id v9;
  void *v10;
  HMDHome *v11;
  NSObject *v12;
  void *v13;
  void *v14;
  int v15;
  void *v16;
  __int16 v17;
  void *v18;
  __int16 v19;
  unint64_t v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  v8 = a3;
  v9 = a5;
  v10 = (void *)MEMORY[0x227676638]();
  v11 = self;
  HMFGetOSLogHandle();
  v12 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "displayName");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    v15 = 138543874;
    v16 = v13;
    v17 = 2112;
    v18 = v14;
    v19 = 2048;
    v20 = a4;
    _os_log_impl(&dword_2218F0000, v12, OS_LOG_TYPE_INFO, "%{public}@Updated configuration state of resident %@ to %ld", (uint8_t *)&v15, 0x20u);

  }
  objc_autoreleasePoolPop(v10);
  if (objc_msgSend(v8, "configurationState") != a4)
  {
    objc_msgSend(v8, "setConfigurationState:", a4);
    -[HMDHome _notifyClientsOfUpdatedResidentUser:](v11, "_notifyClientsOfUpdatedResidentUser:", v8);
  }

}

- (void)_configureUnconfiguredResident:(id)a3 desiredConfigState:(unint64_t)a4
{
  id v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  void *v15;
  int v16;
  _BOOL4 v18;
  void *v19;
  HMDHome *v20;
  NSObject *v21;
  _BOOL4 v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  int v29;
  void *v30;
  HMDHome *v31;
  NSObject *v32;
  void *v33;
  void *v34;
  HMDHome *v35;
  NSObject *v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  HMDHome *v42;
  NSObject *v43;
  void *v44;
  void *v45;
  void *v46;
  void *v47;
  void *v48;
  void *v49;
  HMDHome *v50;
  NSObject *v51;
  void *v52;
  void *v53;
  void *v54;
  void *v55;
  void *v56;
  void *v57;
  id v58;
  void *v59;
  HMDHome *v60;
  void *v61;
  _QWORD v62[4];
  id v63;
  id v64;
  id v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  uint8_t buf[4];
  void *v71;
  __int16 v72;
  void *v73;
  __int16 v74;
  void *v75;
  _QWORD v76[2];
  _QWORD v77[2];
  _BYTE v78[128];
  uint64_t v79;

  v79 = *MEMORY[0x24BDAC8D0];
  v6 = a3;
  v7 = objc_msgSend(v6, "configurationState");
  if (v7 == a4)
  {
    -[HMDHome _updateConfigurationStateForResidentDevice:desiredConfigState:message:](self, "_updateConfigurationStateForResidentDevice:desiredConfigState:message:", v6, a4, 0);
  }
  else
  {
    v8 = v7;
    v60 = self;
    v61 = v6;
    v68 = 0u;
    v69 = 0u;
    v66 = 0u;
    v67 = 0u;
    -[HMDHome outgoingInvitations](self, "outgoingInvitations");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v10 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v66, v78, 16);
    if (v10)
    {
      v11 = *(_QWORD *)v67;
      while (2)
      {
        v12 = 0;
        do
        {
          if (*(_QWORD *)v67 != v11)
            objc_enumerationMutation(v9);
          objc_msgSend(*(id *)(*((_QWORD *)&v66 + 1) + 8 * v12), "user");
          v13 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v13, "userID");
          v14 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v61, "userID");
          v15 = (void *)objc_claimAutoreleasedReturnValue();
          v16 = objc_msgSend(v14, "isEqualToString:", v15);

          if (v16)
          {
            v34 = (void *)MEMORY[0x227676638]();
            v35 = v60;
            HMFGetOSLogHandle();
            v36 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v36, OS_LOG_TYPE_INFO))
            {
              HMFGetLogIdentifier();
              v37 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v61, "userID");
              v38 = (void *)objc_claimAutoreleasedReturnValue();
              *(_DWORD *)buf = 138543618;
              v71 = v37;
              v72 = 2112;
              v73 = v38;
              _os_log_impl(&dword_2218F0000, v36, OS_LOG_TYPE_INFO, "%{public}@Already have a pending invitation for the resident user '%@', not setting up remote access", buf, 0x16u);

            }
            objc_autoreleasePoolPop(v34);

            goto LABEL_39;
          }
          ++v12;
        }
        while (v10 != v12);
        v10 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v66, v78, 16);
        if (v10)
          continue;
        break;
      }
    }

    v18 = a4 == 2 && v8 == 1;
    v19 = (void *)MEMORY[0x227676638]();
    v20 = v60;
    HMFGetOSLogHandle();
    v21 = objc_claimAutoreleasedReturnValue();
    v22 = os_log_type_enabled(v21, OS_LOG_TYPE_INFO);
    if (v18)
    {
      if (v22)
      {
        HMFGetLogIdentifier();
        v23 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v61, "displayName");
        v24 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        v71 = v23;
        v72 = 2112;
        v73 = v24;
        _os_log_impl(&dword_2218F0000, v21, OS_LOG_TYPE_INFO, "%{public}@Configuring unconfigured resident %@ for remote access", buf, 0x16u);

      }
      objc_autoreleasePoolPop(v19);
      -[HMDHome hapAccessoryUniqueIdentifiers](v20, "hapAccessoryUniqueIdentifiers");
      v25 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v25, "allObjects");
      v26 = (void *)objc_claimAutoreleasedReturnValue();

      if (objc_msgSend(v26, "count"))
      {
        objc_msgSend(v61, "userID");
        v27 = (void *)objc_claimAutoreleasedReturnValue();
        -[HMDHome pendingResponsesForRemoteAccessSetup](v20, "pendingResponsesForRemoteAccessSetup");
        v28 = (void *)objc_claimAutoreleasedReturnValue();
        v29 = objc_msgSend(v28, "containsObject:", v27);

        if (v29)
        {
          v30 = (void *)MEMORY[0x227676638]();
          v31 = v20;
          HMFGetOSLogHandle();
          v32 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v32, OS_LOG_TYPE_INFO))
          {
            HMFGetLogIdentifier();
            v33 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 138543618;
            v71 = v33;
            v72 = 2112;
            v73 = v27;
            _os_log_impl(&dword_2218F0000, v32, OS_LOG_TYPE_INFO, "%{public}@There is already a pending request to detect if %@ is at home, dropping multiple requests", buf, 0x16u);

          }
          objc_autoreleasePoolPop(v30);
        }
        else
        {
          -[HMDHome pendingResponsesForRemoteAccessSetup](v20, "pendingResponsesForRemoteAccessSetup");
          v45 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v45, "addObject:", v27);

          v76[0] = CFSTR("kAccessoryIdentitiesKey");
          v76[1] = CFSTR("kHomeUUID");
          v77[0] = v26;
          -[HMDHome uuid](v20, "uuid");
          v46 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v46, "UUIDString");
          v47 = (void *)objc_claimAutoreleasedReturnValue();
          v77[1] = v47;
          objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v77, v76, 2);
          v48 = (void *)objc_claimAutoreleasedReturnValue();

          v49 = (void *)MEMORY[0x227676638]();
          v50 = v20;
          HMFGetOSLogHandle();
          v51 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v51, OS_LOG_TYPE_INFO))
          {
            HMFGetLogIdentifier();
            v52 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v61, "displayName");
            v53 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 138543874;
            v71 = v52;
            v72 = 2112;
            v73 = v27;
            v74 = 2112;
            v75 = v53;
            _os_log_impl(&dword_2218F0000, v51, OS_LOG_TYPE_INFO, "%{public}@Requesting remote gateway %@/%@ to look for accessories", buf, 0x20u);

          }
          objc_autoreleasePoolPop(v49);
          -[HMDHome homeManager](v50, "homeManager");
          v54 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v54, "uuid");
          v55 = (void *)objc_claimAutoreleasedReturnValue();
          +[HMDMessageDispatcher destinationWithTarget:userID:destination:multicast:](HMDMessageDispatcher, "destinationWithTarget:userID:destination:multicast:", v55, 0, v27, 0);
          v56 = (void *)objc_claimAutoreleasedReturnValue();

          objc_msgSend(MEMORY[0x24BE3F1B0], "internalMessageWithName:destination:messagePayload:", CFSTR("kDoYouSeeUnpairedAccessoriesKey"), v56, v48);
          v57 = (void *)objc_claimAutoreleasedReturnValue();
          objc_initWeak((id *)buf, v50);
          v62[0] = MEMORY[0x24BDAC760];
          v62[1] = 3221225472;
          v62[2] = __61__HMDHome__configureUnconfiguredResident_desiredConfigState___block_invoke;
          v62[3] = &unk_24E79ACA8;
          objc_copyWeak(&v65, (id *)buf);
          v63 = v27;
          v58 = v56;
          v64 = v58;
          objc_msgSend(v57, "setResponseHandler:", v62);
          objc_msgSend(v54, "messageDispatcher");
          v59 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v59, "sendMessage:completionHandler:", v57, 0);

          objc_destroyWeak(&v65);
          objc_destroyWeak((id *)buf);

        }
      }
      else
      {
        v41 = (void *)MEMORY[0x227676638]();
        v42 = v20;
        HMFGetOSLogHandle();
        v43 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v43, OS_LOG_TYPE_ERROR))
        {
          HMFGetLogIdentifier();
          v44 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543362;
          v71 = v44;
          _os_log_impl(&dword_2218F0000, v43, OS_LOG_TYPE_ERROR, "%{public}@No accessory identifiers found, not setting up remote access", buf, 0xCu);

        }
        objc_autoreleasePoolPop(v41);
      }

    }
    else
    {
      if (v22)
      {
        HMFGetLogIdentifier();
        v39 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v61, "displayName");
        v40 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        v71 = v39;
        v72 = 2112;
        v73 = v40;
        _os_log_impl(&dword_2218F0000, v21, OS_LOG_TYPE_INFO, "%{public}@Cannot configure unconfigured resident %@ to desired state", buf, 0x16u);

      }
      objc_autoreleasePoolPop(v19);
    }
LABEL_39:
    v6 = v61;
  }

}

- (void)_sendResidentInviteWithDestination:(id)a3
{
  id v4;
  void *v5;
  id v6;
  void *v7;
  HMDHome *v8;
  NSObject *v9;
  NSObject *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  char v15;
  id v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  HMDHome *v26;
  NSObject *v27;
  void *v28;
  void *v29;
  id v30;
  id v31;
  _QWORD v32[4];
  id v33;
  id v34;
  id v35;
  id v36;
  id v37;
  _QWORD v38[4];
  _QWORD v39[4];
  uint8_t buf[4];
  void *v41;
  __int16 v42;
  void *v43;
  __int16 v44;
  id v45;
  uint64_t v46;

  v46 = *MEMORY[0x24BDAC8D0];
  v4 = a3;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v5 = v4;
  else
    v5 = 0;
  v6 = v5;

  v7 = (void *)MEMORY[0x227676638]();
  v8 = self;
  HMFGetOSLogHandle();
  v9 = objc_claimAutoreleasedReturnValue();
  v10 = v9;
  if (v6)
  {
    if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v6, "device");
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v12, "remoteDestinationString");
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v41 = v11;
      v42 = 2112;
      v43 = v13;
      _os_log_impl(&dword_2218F0000, v10, OS_LOG_TYPE_INFO, "%{public}@Adding user %@ as remote access point", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v7);
    -[HMDHome homeManager](v8, "homeManager");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    v36 = 0;
    v37 = 0;
    v35 = 0;
    v15 = objc_msgSend(v14, "getOrCreateControllerPublicKey:controllerUsername:error:", &v37, &v36, &v35);
    v16 = v37;
    v31 = v36;
    v30 = v35;
    if ((v15 & 1) != 0)
    {
      v38[0] = CFSTR("kHomeName");
      -[HMDHome name](v8, "name");
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      v39[0] = v17;
      v38[1] = CFSTR("kHomeUUID");
      -[HMDHome uuid](v8, "uuid");
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v18, "UUIDString");
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      v39[1] = v19;
      v38[2] = CFSTR("kControllerPublicKey");
      v20 = v16;
      if (!v16)
      {
        objc_msgSend(MEMORY[0x24BDBCEF8], "null");
        v20 = (void *)objc_claimAutoreleasedReturnValue();
      }
      v38[3] = CFSTR("kControllerPairingNameKey");
      v39[2] = v20;
      v39[3] = v31;
      objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v39, v38, 4);
      v29 = (void *)objc_claimAutoreleasedReturnValue();
      if (!v16)

      objc_msgSend(MEMORY[0x24BE3F1B0], "internalMessageWithName:destination:messagePayload:", CFSTR("kAddRemoteAccessRequestKey"), v4, v29);
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      objc_initWeak((id *)buf, v8);
      v32[0] = MEMORY[0x24BDAC760];
      v32[1] = 3221225472;
      v32[2] = __46__HMDHome__sendResidentInviteWithDestination___block_invoke;
      v32[3] = &unk_24E798D90;
      objc_copyWeak(&v34, (id *)buf);
      v33 = v6;
      objc_msgSend(v21, "setResponseHandler:", v32);
      objc_msgSend(v14, "messageDispatcher");
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v22, "sendMessage:completionHandler:", v21, 0);

      objc_destroyWeak(&v34);
      objc_destroyWeak((id *)buf);

    }
    else
    {
      v25 = (void *)MEMORY[0x227676638]();
      v26 = v8;
      HMFGetOSLogHandle();
      v27 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v28 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543362;
        v41 = v28;
        _os_log_impl(&dword_2218F0000, v27, OS_LOG_TYPE_ERROR, "%{public}@Failed getting controller public key to add remote gateway", buf, 0xCu);

      }
      objc_autoreleasePoolPop(v25);
    }

  }
  else
  {
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v23 = (void *)objc_claimAutoreleasedReturnValue();
      -[HMDHome shortDescription](v8, "shortDescription");
      v24 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543874;
      v41 = v23;
      v42 = 2112;
      v43 = v24;
      v44 = 2112;
      v45 = v4;
      _os_log_impl(&dword_2218F0000, v10, OS_LOG_TYPE_ERROR, "%{public}@[%@] Invalid resident invite destination: %@", buf, 0x20u);

    }
    objc_autoreleasePoolPop(v7);
  }

}

- (void)_addResidentWithUsername:(id)a3 publicKey:(id)a4 destination:(id)a5
{
  id v8;
  id v9;
  id v10;
  void *v11;
  void *v12;
  char isKindOfClass;
  void *v14;
  HMDHome *v15;
  NSObject *v16;
  NSObject *v17;
  void *v18;
  HMDOutgoingHomeInvitation *v19;
  void *v20;
  HMDOutgoingHomeInvitation *v21;
  void *v22;
  HMDHome *v23;
  NSObject *v24;
  void *v25;
  void *v26;
  _QWORD v27[4];
  id v28;
  HMDOutgoingHomeInvitation *v29;
  id v30;
  uint8_t buf[4];
  void *v32;
  __int16 v33;
  id v34;
  __int16 v35;
  id v36;
  uint64_t v37;

  v37 = *MEMORY[0x24BDAC8D0];
  v8 = a3;
  v9 = a4;
  v10 = a5;
  if (v8 && v9)
  {
    -[HMDHome unconfiguredResidentDevices](self, "unconfiguredResidentDevices");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "hmf_firstObjectWithValue:forKeyPath:", v10, CFSTR("userID"));
    v12 = (void *)objc_claimAutoreleasedReturnValue();

    objc_opt_class();
    isKindOfClass = objc_opt_isKindOfClass();
    v14 = (void *)MEMORY[0x227676638]();
    v15 = self;
    HMFGetOSLogHandle();
    v16 = objc_claimAutoreleasedReturnValue();
    v17 = v16;
    if ((isKindOfClass & 1) != 0)
    {
      if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v18 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543362;
        v32 = v18;
        _os_log_impl(&dword_2218F0000, v17, OS_LOG_TYPE_INFO, "%{public}@Found user as unconfigured resident, creating an accepted invitation to track adding the resident", buf, 0xCu);

      }
      objc_autoreleasePoolPop(v14);
      v19 = -[HMDOutgoingHomeInvitation initWithInvitee:invitationState:forHome:expiryDate:messageIdentifier:]([HMDOutgoingHomeInvitation alloc], "initWithInvitee:invitationState:forHome:expiryDate:messageIdentifier:", v12, 5, v15, 0, 0);
      -[HMDHome outgoingInvitations](v15, "outgoingInvitations");
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v20, "addObject:", v19);

      objc_initWeak((id *)buf, v15);
      v27[0] = MEMORY[0x24BDAC760];
      v27[1] = 3221225472;
      v27[2] = __58__HMDHome__addResidentWithUsername_publicKey_destination___block_invoke;
      v27[3] = &unk_24E796418;
      objc_copyWeak(&v30, (id *)buf);
      v28 = v12;
      v21 = v19;
      v29 = v21;
      -[HMDHome __handleAcceptedOutgoingInvitationResponse:destinationAddress:publicKey:username:reverseShare:reverseShareToken:issuerPublicKeyER:presenceAuthStatus:completionHandler:](v15, "__handleAcceptedOutgoingInvitationResponse:destinationAddress:publicKey:username:reverseShare:reverseShareToken:issuerPublicKeyER:presenceAuthStatus:completionHandler:", v21, v10, v9, v8, 0, 0, 0, 0, v27);

      objc_destroyWeak(&v30);
      objc_destroyWeak((id *)buf);

    }
    else
    {
      if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v26 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        v32 = v26;
        v33 = 2112;
        v34 = v10;
        _os_log_impl(&dword_2218F0000, v17, OS_LOG_TYPE_ERROR, "%{public}@Attempt to pair an unknown resident user '%@', aborting", buf, 0x16u);

      }
      objc_autoreleasePoolPop(v14);
    }

  }
  else
  {
    v22 = (void *)MEMORY[0x227676638]();
    v23 = self;
    HMFGetOSLogHandle();
    v24 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v25 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543874;
      v32 = v25;
      v33 = 2112;
      v34 = v8;
      v35 = 2112;
      v36 = v9;
      _os_log_impl(&dword_2218F0000, v24, OS_LOG_TYPE_ERROR, "%{public}@Aborting adding resident due to missing userName '%@' and publicKey '%@'", buf, 0x20u);

    }
    objc_autoreleasePoolPop(v22);
  }

}

- (void)_configureConfiguredResident:(id)a3 desiredConfigState:(unint64_t)a4 message:(id)a5
{
  id v8;
  id v9;
  void *v10;
  HMDHome *v11;
  NSObject *v12;
  void *v13;
  void *v14;
  void *v15;
  void (**v16)(_QWORD, _QWORD, _QWORD);
  uint64_t v17;
  void *v18;
  HMDHome *v19;
  NSObject *v20;
  _BOOL4 v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  int v27;
  void *v28;
  __int16 v29;
  void *v30;
  uint64_t v31;

  v31 = *MEMORY[0x24BDAC8D0];
  v8 = a3;
  v9 = a5;
  if (a4 == 1)
  {
    v10 = (void *)MEMORY[0x227676638]();
    v11 = self;
    HMFGetOSLogHandle();
    v12 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      v27 = 138543362;
      v28 = v13;
      _os_log_impl(&dword_2218F0000, v12, OS_LOG_TYPE_INFO, "%{public}@Unconfiguring residents is not supported", (uint8_t *)&v27, 0xCu);

    }
    objc_autoreleasePoolPop(v10);
    objc_msgSend(v9, "responseHandler");
    v14 = (void *)objc_claimAutoreleasedReturnValue();

    if (v14)
    {
      objc_msgSend(MEMORY[0x24BDD1540], "hmErrorWithCode:description:reason:suggestion:", 48, 0, 0, 0);
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v9, "responseHandler");
      v16 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
      ((void (**)(_QWORD, void *, _QWORD))v16)[2](v16, v15, 0);
LABEL_17:

    }
  }
  else
  {
    v17 = objc_msgSend(v8, "configurationState");
    -[HMDHome _updateConfigurationStateForResidentDevice:desiredConfigState:message:](self, "_updateConfigurationStateForResidentDevice:desiredConfigState:message:", v8, a4, v9);
    if (v17 != a4)
    {
      -[HMDHome homeManager](self, "homeManager");
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      v18 = (void *)MEMORY[0x227676638]();
      v19 = self;
      HMFGetOSLogHandle();
      v20 = objc_claimAutoreleasedReturnValue();
      v21 = os_log_type_enabled(v20, OS_LOG_TYPE_INFO);
      if (a4 == 2)
      {
        if (v21)
        {
          HMFGetLogIdentifier();
          v22 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v8, "displayName");
          v23 = (void *)objc_claimAutoreleasedReturnValue();
          v27 = 138543618;
          v28 = v22;
          v29 = 2112;
          v30 = v23;
          _os_log_impl(&dword_2218F0000, v20, OS_LOG_TYPE_INFO, "%{public}@Enabling resident device %@, checking if we need to go remote", (uint8_t *)&v27, 0x16u);

        }
        objc_autoreleasePoolPop(v18);
      }
      else
      {
        if (v21)
        {
          HMFGetLogIdentifier();
          v24 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v8, "displayName");
          v25 = (void *)objc_claimAutoreleasedReturnValue();
          v27 = 138543618;
          v28 = v24;
          v29 = 2112;
          v30 = v25;
          _os_log_impl(&dword_2218F0000, v20, OS_LOG_TYPE_INFO, "%{public}@Disabling resident device %@, checking if we need to go remote", (uint8_t *)&v27, 0x16u);

        }
        objc_autoreleasePoolPop(v18);
        -[HMDHome uuid](v19, "uuid");
        v26 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v15, "teardownRemoteAccessForHome:", v26);

      }
      if (!-[HMDHome isResidentSupported](v19, "isResidentSupported"))
        objc_msgSend(v15, "checkForRemotePeers");
      objc_msgSend(v9, "name");
      v16 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
      -[HMDHome saveWithReason:postSyncNotification:](v19, "saveWithReason:postSyncNotification:", v16, 0);
      goto LABEL_17;
    }
  }

}

- (void)handleFindResidentsNotification:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  int v8;
  void *v9;
  HMDHome *v10;
  NSObject *v11;
  void *v12;
  void *v13;
  id v14;
  void *v15;
  HMDHome *v16;
  NSObject *v17;
  void *v18;
  _QWORD v19[5];
  id v20;
  id v21;
  uint8_t buf[4];
  void *v23;
  __int16 v24;
  void *v25;
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  v4 = a3;
  objc_msgSend(v4, "userInfo");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "hmf_UUIDForKey:", CFSTR("kHomeUUID"));
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  if (v6)
  {
    -[HMDHome uuid](self, "uuid");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = objc_msgSend(v6, "isEqual:", v7);

    if (v8)
    {
      v9 = (void *)MEMORY[0x227676638]();
      v10 = self;
      HMFGetOSLogHandle();
      v11 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v12 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        v23 = v12;
        v24 = 2112;
        v25 = v6;
        _os_log_impl(&dword_2218F0000, v11, OS_LOG_TYPE_INFO, "%{public}@Received notification to check if there are any residents for home with UUID: %@.", buf, 0x16u);

      }
      objc_autoreleasePoolPop(v9);
      +[HMDCoreDataCloudTransform sharedInstance](HMDCoreDataCloudTransform, "sharedInstance");
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      v19[0] = MEMORY[0x24BDAC760];
      v19[1] = 3221225472;
      v19[2] = __43__HMDHome_handleFindResidentsNotification___block_invoke;
      v19[3] = &unk_24E776D00;
      v19[4] = v10;
      v20 = v13;
      v21 = v6;
      v14 = v13;
      objc_msgSend(v14, "countResidentsInHomeWithUUID:completion:", v21, v19);

    }
  }
  else
  {
    v15 = (void *)MEMORY[0x227676638]();
    v16 = self;
    HMFGetOSLogHandle();
    v17 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v23 = v18;
      _os_log_impl(&dword_2218F0000, v17, OS_LOG_TYPE_ERROR, "%{public}@homeUUID is nil", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v15);
  }

}

- (void)_handleEnableMultiUserRequest:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  HMDHome *v7;
  NSObject *v8;
  void *v9;
  void *v10;
  HMDHome *v11;
  NSObject *v12;
  void *v13;
  void *v14;
  HMDHome *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  HMDRemoteDeviceMessageDestination *v20;
  void *v21;
  void *v22;
  void *v23;
  HMDRemoteDeviceMessageDestination *v24;
  void *v25;
  HMDHome *v26;
  NSObject *v27;
  void *v28;
  void *v29;
  _QWORD v30[4];
  id v31;
  id v32;
  id location;
  const __CFString *v34;
  uint64_t v35;
  uint8_t buf[4];
  void *v37;
  __int16 v38;
  id v39;
  uint64_t v40;

  v40 = *MEMORY[0x24BDAC8D0];
  v4 = a3;
  if (objc_msgSend(v4, "isRemote") && (objc_msgSend(v4, "isSecureRemote") & 1) == 0)
  {
    v10 = (void *)MEMORY[0x227676638]();
    v11 = self;
    HMFGetOSLogHandle();
    v12 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      HMFGetLogIdentifier();
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v37 = v13;
      v38 = 2112;
      v39 = v4;
      _os_log_impl(&dword_2218F0000, v12, OS_LOG_TYPE_DEFAULT, "%{public}@Message not supported: %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v10);
    objc_msgSend(MEMORY[0x24BDD1540], "hmErrorWithCode:", 17);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "respondWithError:", v14);

  }
  else
  {
    if (-[HMDHome isOwnerUser](self, "isOwnerUser"))
    {
      -[HMDHome _enableMultiUserWithMessage:](self, v4);
      goto LABEL_16;
    }
    -[HMDHome primaryResident](self, "primaryResident");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    if (!v5)
    {
      v6 = (void *)MEMORY[0x227676638]();
      v15 = self;
      HMFGetOSLogHandle();
      v8 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v16 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543362;
        v37 = v16;
        _os_log_impl(&dword_2218F0000, v8, OS_LOG_TYPE_ERROR, "%{public}@Unable to forward message to home owner no resident found", buf, 0xCu);

      }
      goto LABEL_15;
    }
    if ((objc_msgSend(v4, "isRemote") & 1) != 0
      || objc_msgSend(v4, "BOOLForKey:", CFSTR("kDoNotForwardMessageKey")))
    {
      v6 = (void *)MEMORY[0x227676638]();
      v7 = self;
      HMFGetOSLogHandle();
      v8 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543362;
        v37 = v9;
        _os_log_impl(&dword_2218F0000, v8, OS_LOG_TYPE_ERROR, "%{public}@Did not expect remote message.", buf, 0xCu);

      }
LABEL_15:

      objc_autoreleasePoolPop(v6);
      objc_msgSend(MEMORY[0x24BDD1540], "hmErrorWithCode:", 2);
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "respondWithError:", v17);

      goto LABEL_16;
    }
    v18 = (void *)objc_msgSend(v4, "mutableCopy");
    objc_msgSend(v18, "setRemote:", 1);
    objc_msgSend(v18, "setSecureRemote:", 1);
    v34 = CFSTR("kDoNotForwardMessageKey");
    v35 = MEMORY[0x24BDBD1C8];
    objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", &v35, &v34, 1);
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v18, "setMessagePayload:", v19);

    v20 = [HMDRemoteDeviceMessageDestination alloc];
    objc_msgSend(v4, "destination");
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v21, "target");
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "device");
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    v24 = -[HMDRemoteDeviceMessageDestination initWithTarget:device:](v20, "initWithTarget:device:", v22, v23);
    objc_msgSend(v18, "setDestination:", v24);

    objc_initWeak(&location, self);
    v30[0] = MEMORY[0x24BDAC760];
    v30[1] = 3221225472;
    v30[2] = __41__HMDHome__handleEnableMultiUserRequest___block_invoke;
    v30[3] = &unk_24E798D90;
    objc_copyWeak(&v32, &location);
    v31 = v4;
    v25 = (void *)MEMORY[0x227676638](objc_msgSend(v18, "setResponseHandler:", v30));
    v26 = self;
    HMFGetOSLogHandle();
    v27 = (id)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v27, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v28 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v37 = v28;
      _os_log_impl(&dword_2218F0000, v27, OS_LOG_TYPE_INFO, "%{public}@Forwarding enable multi-user request to owner.", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v25);
    -[HMDHome msgDispatcher](v26, "msgDispatcher");
    v29 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v29, "sendMessage:", v18);

    objc_destroyWeak(&v32);
    objc_destroyWeak(&location);

  }
LABEL_16:

}

- (void)enableMultiUser
{
  void *v3;
  HMDHome *v4;
  NSObject *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  int v11;
  void *v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v3 = (void *)MEMORY[0x227676638](self, a2);
  v4 = self;
  HMFGetOSLogHandle();
  v5 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v11 = 138543362;
    v12 = v6;
    _os_log_impl(&dword_2218F0000, v5, OS_LOG_TYPE_INFO, "%{public}@Received local request to enable Multi-User", (uint8_t *)&v11, 0xCu);

  }
  objc_autoreleasePoolPop(v3);
  v7 = (void *)MEMORY[0x24BE3F1B0];
  v8 = *MEMORY[0x24BDD5CF8];
  -[HMDHome messageDestination](v4, "messageDestination");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "messageWithName:destination:payload:", v8, v9, MEMORY[0x24BDBD1B8]);
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  -[HMDHome _enableMultiUserWithMessage:](v4, v10);
}

- (void)_handleSetHasAnyUserAcknowledgedCameraRecordingOnboardingRequest:(id)a3
{
  id v4;
  void *v5;
  HMDHome *v6;
  NSObject *v7;
  void *v8;
  HMDHomeModel *v9;
  void *v10;
  void *v11;
  void *v12;
  HMDHomeModel *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  id v18;
  _QWORD v19[4];
  id v20;
  uint8_t buf[4];
  void *v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  v4 = a3;
  v5 = (void *)MEMORY[0x227676638]();
  v6 = self;
  HMFGetOSLogHandle();
  v7 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543362;
    v22 = v8;
    _os_log_impl(&dword_2218F0000, v7, OS_LOG_TYPE_INFO, "%{public}@Received set has any user acknowledged camera recording onboarding request", buf, 0xCu);

  }
  objc_autoreleasePoolPop(v5);
  v9 = [HMDHomeModel alloc];
  -[HMDHome uuid](v6, "uuid");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHome homeManager](v6, "homeManager");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "uuid");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  v13 = -[HMDBackingStoreModelObject initWithObjectChangeType:uuid:parentUUID:](v9, "initWithObjectChangeType:uuid:parentUUID:", 2, v10, v12);

  -[HMDHomeModel setHasAnyUserAcknowledgedCameraRecordingOnboarding:](v13, "setHasAnyUserAcknowledgedCameraRecordingOnboarding:", MEMORY[0x24BDBD1C8]);
  -[HMDHome backingStore](v6, "backingStore");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "name");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  +[HMDBackingStoreTransactionOptions defaultPreferencesOptions](HMDBackingStoreTransactionOptions, "defaultPreferencesOptions");
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v14, "transaction:options:", v15, v16);
  v17 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v17, "add:withMessage:", v13, v4);
  v19[0] = MEMORY[0x24BDAC760];
  v19[1] = 3221225472;
  v19[2] = __76__HMDHome__handleSetHasAnyUserAcknowledgedCameraRecordingOnboardingRequest___block_invoke;
  v19[3] = &unk_24E79BD80;
  v20 = v4;
  v18 = v4;
  objc_msgSend(v17, "run:", v19);

}

- (void)_handleSetHasOnboardedForAccessCodeMessage:(id)a3
{
  id v4;
  void *v5;
  HMDHome *v6;
  NSObject *v7;
  void *v8;
  HMDHomeModel *v9;
  void *v10;
  void *v11;
  void *v12;
  HMDHomeModel *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  int v18;
  void *v19;
  __int16 v20;
  id v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  v4 = a3;
  v5 = (void *)MEMORY[0x227676638]();
  v6 = self;
  HMFGetOSLogHandle();
  v7 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v18 = 138543618;
    v19 = v8;
    v20 = 2112;
    v21 = v4;
    _os_log_impl(&dword_2218F0000, v7, OS_LOG_TYPE_INFO, "%{public}@Handling message to set has onboarded for access code: %@", (uint8_t *)&v18, 0x16u);

  }
  objc_autoreleasePoolPop(v5);
  v9 = [HMDHomeModel alloc];
  -[HMDHome uuid](v6, "uuid");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHome homeManager](v6, "homeManager");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "uuid");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  v13 = -[HMDBackingStoreModelObject initWithObjectChangeType:uuid:parentUUID:](v9, "initWithObjectChangeType:uuid:parentUUID:", 2, v10, v12);

  -[HMDHomeModel setHasOnboardedForAccessCode:](v13, "setHasOnboardedForAccessCode:", MEMORY[0x24BDBD1C8]);
  -[HMDHome backingStore](v6, "backingStore");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "name");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  +[HMDBackingStoreTransactionOptions defaultPreferencesOptions](HMDBackingStoreTransactionOptions, "defaultPreferencesOptions");
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v14, "transaction:options:", v15, v16);
  v17 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v17, "add:withMessage:", v13, v4);
  objc_msgSend(v17, "run");

}

- (void)_handleSetHasOnboardedForWalletKeyMessage:(id)a3
{
  -[HMDHome updateHasOnboardedForWalletKey:message:](self, "updateHasOnboardedForWalletKey:message:", 1, a3);
}

- (void)_handleMultiUserEnabledChange:(id)a3 message:(id)a4
{
  id v6;
  id v7;
  void *v8;
  HMDHome *v9;
  NSObject *v10;
  void *v11;
  void *v12;
  void *v13;
  uint64_t v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  int v20;
  void *v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  v6 = a3;
  v7 = a4;
  v8 = (void *)MEMORY[0x227676638]();
  v9 = self;
  HMFGetOSLogHandle();
  v10 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v20 = 138543362;
    v21 = v11;
    _os_log_impl(&dword_2218F0000, v10, OS_LOG_TYPE_INFO, "%{public}@Multi-user enabled changed, sending notification", (uint8_t *)&v20, 0xCu);

  }
  objc_autoreleasePoolPop(v8);
  objc_msgSend(v6, "multiUserEnabled");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHome setMultiUserEnabled:](v9, "setMultiUserEnabled:", objc_msgSend(v12, "BOOLValue"));

  -[HMDHome notificationCenter](v9, "notificationCenter");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  v14 = *MEMORY[0x24BDD61E0];
  objc_msgSend(v13, "postNotificationName:object:", *MEMORY[0x24BDD61E0], 0);

  v15 = (void *)MEMORY[0x24BE3F1D0];
  -[HMDHome messageDestination](v9, "messageDestination");
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v15, "messageWithName:destination:payload:", v14, v16, 0);
  v17 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v7, "identifier");
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v17, "setIdentifier:", v18);

  objc_msgSend(v17, "setRemote:", objc_msgSend(v7, "isRemote"));
  -[HMDHome msgDispatcher](v9, "msgDispatcher");
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v19, "sendMessage:completionHandler:", v17, 0);

}

- (void)_handleAudioAnalysisClassifierOptionsChange:(id)a3 message:(id)a4
{
  void *v5;
  id v6;

  objc_msgSend(a3, "analysisOptions");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHome setAudioAnalysisClassifierOptions:](self, "setAudioAnalysisClassifierOptions:", objc_msgSend(v5, "unsignedIntegerValue"));

  -[HMDHome notificationCenter](self, "notificationCenter");
  v6 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "postNotificationName:object:", CFSTR("HMDAudioAnalysisClassifierOptionsUpdatedNotification"), self);

}

- (void)_handleAudioAnalysisClassifierOptionsUpdateRequest:(id)a3
{
  id v4;
  NSObject *v5;
  void *v6;
  HMDHome *v7;
  NSObject *v8;
  void *v9;
  HMDHomeModel *v10;
  void *v11;
  void *v12;
  void *v13;
  HMDHomeModel *v14;
  void *v15;
  void *v16;
  uint64_t v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  int v23;
  void *v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v4 = a3;
  -[HMDHome workQueue](self, "workQueue");
  v5 = objc_claimAutoreleasedReturnValue();
  dispatch_assert_queue_V2(v5);

  v6 = (void *)MEMORY[0x227676638]();
  v7 = self;
  HMFGetOSLogHandle();
  v8 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v23 = 138543362;
    v24 = v9;
    _os_log_impl(&dword_2218F0000, v8, OS_LOG_TYPE_INFO, "%{public}@Received update audio analysis classifier options request", (uint8_t *)&v23, 0xCu);

  }
  objc_autoreleasePoolPop(v6);
  v10 = [HMDHomeModel alloc];
  -[HMDHome uuid](v7, "uuid");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHome homeManager](v7, "homeManager");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v12, "uuid");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  v14 = -[HMDBackingStoreModelObject initWithObjectChangeType:uuid:parentUUID:](v10, "initWithObjectChangeType:uuid:parentUUID:", 2, v11, v13);

  objc_msgSend(v4, "messagePayload");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v15, "hmf_numberForKey:", *MEMORY[0x24BDD5C78]);
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  v17 = objc_msgSend(v16, "unsignedIntegerValue");

  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedInteger:", v17);
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHomeModel setAnalysisOptions:](v14, "setAnalysisOptions:", v18);

  -[HMDHome backingStore](v7, "backingStore");
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "name");
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  +[HMDBackingStoreTransactionOptions defaultPreferencesOptions](HMDBackingStoreTransactionOptions, "defaultPreferencesOptions");
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v19, "transaction:options:", v20, v21);
  v22 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v22, "add:withMessage:", v14, v4);
  objc_msgSend(v22, "run");

}

- (void)_handleAudioAnalysisOnboardingStatusChange:(id)a3 message:(id)a4
{
  id v5;

  objc_msgSend(a3, "didOnboardAnalysis");
  v5 = (id)objc_claimAutoreleasedReturnValue();
  -[HMDHome setDidOnboardAudioAnalysis:](self, "setDidOnboardAudioAnalysis:", objc_msgSend(v5, "BOOLValue"));

}

- (void)_handleAudioAnalysisOnboardingUpdateRequest:(id)a3
{
  id v4;
  NSObject *v5;
  void *v6;
  HMDHome *v7;
  NSObject *v8;
  void *v9;
  HMDHomeModel *v10;
  void *v11;
  void *v12;
  void *v13;
  HMDHomeModel *v14;
  void *v15;
  uint64_t v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  int v22;
  void *v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v4 = a3;
  -[HMDHome workQueue](self, "workQueue");
  v5 = objc_claimAutoreleasedReturnValue();
  dispatch_assert_queue_V2(v5);

  v6 = (void *)MEMORY[0x227676638]();
  v7 = self;
  HMFGetOSLogHandle();
  v8 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v22 = 138543362;
    v23 = v9;
    _os_log_impl(&dword_2218F0000, v8, OS_LOG_TYPE_INFO, "%{public}@Received update audio analysis classifier options request", (uint8_t *)&v22, 0xCu);

  }
  objc_autoreleasePoolPop(v6);
  v10 = [HMDHomeModel alloc];
  -[HMDHome uuid](v7, "uuid");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHome homeManager](v7, "homeManager");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v12, "uuid");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  v14 = -[HMDBackingStoreModelObject initWithObjectChangeType:uuid:parentUUID:](v10, "initWithObjectChangeType:uuid:parentUUID:", 2, v11, v13);

  objc_msgSend(v4, "messagePayload");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  v16 = objc_msgSend(v15, "hmf_BOOLForKey:", *MEMORY[0x24BDD5C98]);

  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithBool:", v16);
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHomeModel setDidOnboardAnalysis:](v14, "setDidOnboardAnalysis:", v17);

  -[HMDHome backingStore](v7, "backingStore");
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "name");
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  +[HMDBackingStoreTransactionOptions defaultPreferencesOptions](HMDBackingStoreTransactionOptions, "defaultPreferencesOptions");
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v18, "transaction:options:", v19, v20);
  v21 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v21, "add:withMessage:", v14, v4);
  objc_msgSend(v21, "run");

}

- (void)_handleSiriPhraseOptionsStatusChange:(id)a3 message:(id)a4
{
  id v5;

  objc_msgSend(a3, "siriPhraseOptions");
  v5 = (id)objc_claimAutoreleasedReturnValue();
  -[HMDHome setSiriPhraseOptions:](self, "setSiriPhraseOptions:", objc_msgSend(v5, "unsignedIntegerValue"));

}

- (void)_handleSiriPhraseOptionsUpdateRequest:(id)a3
{
  id v4;
  NSObject *v5;
  void *v6;
  HMDHome *v7;
  NSObject *v8;
  void *v9;
  HMDHomeModel *v10;
  void *v11;
  void *v12;
  void *v13;
  HMDHomeModel *v14;
  void *v15;
  void *v16;
  uint64_t v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  int v23;
  void *v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v4 = a3;
  -[HMDHome workQueue](self, "workQueue");
  v5 = objc_claimAutoreleasedReturnValue();
  dispatch_assert_queue_V2(v5);

  v6 = (void *)MEMORY[0x227676638]();
  v7 = self;
  HMFGetOSLogHandle();
  v8 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v23 = 138543362;
    v24 = v9;
    _os_log_impl(&dword_2218F0000, v8, OS_LOG_TYPE_INFO, "%{public}@Received update Siri phrase options request", (uint8_t *)&v23, 0xCu);

  }
  objc_autoreleasePoolPop(v6);
  v10 = [HMDHomeModel alloc];
  -[HMDHome uuid](v7, "uuid");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHome homeManager](v7, "homeManager");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v12, "uuid");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  v14 = -[HMDBackingStoreModelObject initWithObjectChangeType:uuid:parentUUID:](v10, "initWithObjectChangeType:uuid:parentUUID:", 2, v11, v13);

  objc_msgSend(v4, "messagePayload");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v15, "hmf_numberForKey:", *MEMORY[0x24BDD6308]);
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  v17 = objc_msgSend(v16, "unsignedIntegerValue");

  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedInteger:", v17);
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHomeModel setSiriPhraseOptions:](v14, "setSiriPhraseOptions:", v18);

  -[HMDHome backingStore](v7, "backingStore");
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "name");
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  +[HMDBackingStoreTransactionOptions defaultPreferencesOptions](HMDBackingStoreTransactionOptions, "defaultPreferencesOptions");
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v19, "transaction:options:", v20, v21);
  v22 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v22, "add:withMessage:", v14, v4);
  objc_msgSend(v22, "run");

}

- (void)_handleAssistantAccessControlUpdate:(id)a3
{
  id v4;
  id v5;

  v4 = a3;
  __decodeAndVerifyCurrentUser(self, v4);
  v5 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "handleAssistantAccessControlUpdate:", v4);

}

- (void)_handleMediaContentProfileAccessControlUpdate:(id)a3
{
  id v4;
  id v5;

  v4 = a3;
  __decodeAndVerifyCurrentUser(self, v4);
  v5 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "handleMediaContentProfileAccessControlUpdate:", v4);

}

- (void)_handleUserListeningHistoryUpdateControlUpdatedAccessoryUUIDs:(id)a3
{
  id v4;
  id v5;

  v4 = a3;
  __decodeAndVerifyCurrentUser(self, v4);
  v5 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "handleUserListeningHistoryUpdateControlUpdatedAccessoryUUIDs:", v4);

}

- (void)enableUserListeningHistoryForAccessoryUUID:(id)a3 userUUID:(id)a4
{
  id v6;
  id v7;
  HMDHome *v8;
  void *v9;
  HMDHome *v10;
  NSObject *v11;
  NSObject *v12;
  void *v13;
  void *v14;
  int v15;
  void *v16;
  __int16 v17;
  id v18;
  __int16 v19;
  HMDHome *v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  v6 = a3;
  v7 = a4;
  -[HMDHome userWithUUID:](self, "userWithUUID:", v7);
  v8 = (HMDHome *)objc_claimAutoreleasedReturnValue();
  v9 = (void *)MEMORY[0x227676638]();
  v10 = self;
  HMFGetOSLogHandle();
  v11 = objc_claimAutoreleasedReturnValue();
  v12 = v11;
  if (v8)
  {
    if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      v15 = 138543874;
      v16 = v13;
      v17 = 2112;
      v18 = v6;
      v19 = 2112;
      v20 = v8;
      _os_log_impl(&dword_2218F0000, v12, OS_LOG_TYPE_INFO, "%{public}@Enable ULH: accessoryUUID %@ user %@", (uint8_t *)&v15, 0x20u);

    }
    objc_autoreleasePoolPop(v9);
    -[HMDHome enableUserListeningHistoryForAccessory:](v8, "enableUserListeningHistoryForAccessory:", v6);
  }
  else
  {
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      v15 = 138543874;
      v16 = v14;
      v17 = 2112;
      v18 = v7;
      v19 = 2112;
      v20 = v10;
      _os_log_impl(&dword_2218F0000, v12, OS_LOG_TYPE_ERROR, "%{public}@No user exist for userUUID %@ in home %@", (uint8_t *)&v15, 0x20u);

    }
    objc_autoreleasePoolPop(v9);
  }

}

- (void)_handleOwnerSettingsUpdate:(id)a3
{
  id v4;
  BOOL v5;
  id v6;
  id v7;
  id v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  HMDHome *v15;
  NSObject *v16;
  void *v17;
  void *v18;
  _QWORD v19[5];
  id v20;
  id v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  uint64_t v27;
  uint8_t buf[4];
  void *v29;
  __int16 v30;
  id v31;
  uint64_t v32;

  v32 = *MEMORY[0x24BDAC8D0];
  v4 = a3;
  v26 = 0;
  v27 = 0;
  v24 = 0;
  v25 = 0;
  v5 = -[HMDHome _validateSettingsUpdate:type:keyPath:value:error:](self, "_validateSettingsUpdate:type:keyPath:value:error:", v4, &v27, &v26, &v25, &v24);
  v6 = v26;
  v7 = v25;
  v8 = v24;
  v9 = v8;
  if (v5)
  {
    +[_MKFUser entity](_MKFUser, "entity");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "hmd_attributeForSettingsPath:", v6);
    v11 = (void *)objc_claimAutoreleasedReturnValue();

    if (v11)
    {
      -[HMDHome backingStore](self, "backingStore");
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v12, "context");
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      v19[0] = MEMORY[0x24BDAC760];
      v19[1] = 3221225472;
      v19[2] = __38__HMDHome__handleOwnerSettingsUpdate___block_invoke;
      v19[3] = &unk_24E79AD20;
      v19[4] = self;
      v20 = v4;
      v21 = v6;
      v22 = v11;
      v23 = v7;
      objc_msgSend(v13, "performBlock:", v19);

    }
    else
    {
      v14 = (void *)MEMORY[0x227676638]();
      v15 = self;
      HMFGetOSLogHandle();
      v16 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        v29 = v17;
        v30 = 2112;
        v31 = v6;
        _os_log_impl(&dword_2218F0000, v16, OS_LOG_TYPE_ERROR, "%{public}@Invalid settings key path: %@", buf, 0x16u);

      }
      objc_autoreleasePoolPop(v14);
      objc_msgSend(MEMORY[0x24BDD1540], "hmErrorWithCode:", 3);
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "respondWithError:", v18);

    }
    goto LABEL_10;
  }
  if (!v8)
  {
    objc_msgSend(MEMORY[0x24BDD1540], "hmErrorWithCode:", 3);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "respondWithError:", v11);
LABEL_10:

    goto LABEL_11;
  }
  objc_msgSend(v4, "respondWithError:", v8);
LABEL_11:

}

- (void)_updateOwnerSettingDependents:(id)a3 keyPath:(id)a4 value:(id)a5
{
  id v8;
  id v9;
  id v10;
  void *v11;
  HMDHome *v12;
  NSObject *v13;
  void *v14;
  void *v15;
  void *v16;
  id v17;
  void *v18;
  HMDHome *v19;
  NSObject *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t i;
  const __CFString *v30;
  void *v31;
  HMDHome *v32;
  NSObject *v33;
  void *v34;
  void *v35;
  void *v36;
  id v37;
  void *v38;
  HMDHome *v39;
  NSObject *v40;
  void *v41;
  void *v42;
  id v43;
  void *v44;
  id v45;
  void *v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  uint8_t v51[128];
  uint8_t buf[4];
  void *v53;
  __int16 v54;
  const __CFString *v55;
  __int16 v56;
  void *v57;
  __int16 v58;
  id v59;
  __int16 v60;
  const __CFString *v61;
  uint64_t v62;

  v62 = *MEMORY[0x24BDAC8D0];
  v8 = a3;
  v9 = a4;
  v10 = a5;
  if (objc_msgSend(v9, "isEqualToString:", CFSTR("root.siri.identifyVoice")))
  {
    v11 = (void *)MEMORY[0x227676638]();
    v12 = self;
    HMFGetOSLogHandle();
    v13 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v53 = v14;
      _os_log_impl(&dword_2218F0000, v13, OS_LOG_TYPE_INFO, "%{public}@Updating owner setting dependents", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v11);
    v46 = v8;
    if (objc_msgSend(v10, "isEqualToNumber:", &unk_24E96A538))
    {
      v45 = v9;
      +[_MKFUser entity](_MKFUser, "entity");
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v15, "hmd_attributeForSettingsPath:", CFSTR("root.music.playbackInfluencesForYou"));
      v16 = (void *)objc_claimAutoreleasedReturnValue();

      v44 = v16;
      if (v16)
      {
        v17 = v10;
        v18 = (void *)MEMORY[0x227676638]();
        v19 = v12;
        HMFGetOSLogHandle();
        v20 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v20, OS_LOG_TYPE_INFO))
        {
          HMFGetLogIdentifier();
          v21 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v16, "name");
          v22 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138544386;
          v53 = v21;
          v54 = 2112;
          v55 = CFSTR("root.music.playbackInfluencesForYou");
          v56 = 2112;
          v57 = v22;
          v58 = 2112;
          v59 = v17;
          v60 = 2112;
          v61 = CFSTR("root.siri.identifyVoice");
          _os_log_impl(&dword_2218F0000, v20, OS_LOG_TYPE_INFO, "%{public}@Updating setting '%@' (%@) = %@ due to %@ is off", buf, 0x34u);

          v16 = v44;
        }

        objc_autoreleasePoolPop(v18);
        objc_msgSend(v16, "name");
        v23 = (void *)objc_claimAutoreleasedReturnValue();
        v10 = v17;
        objc_msgSend(v8, "setValue:forKey:", v17, v23);

      }
      objc_msgSend(v8, "accessoriesWithPersonalRequestsEnabled");
      v24 = (void *)objc_claimAutoreleasedReturnValue();
      if (v24)
      {
        v43 = v10;
        v49 = 0u;
        v50 = 0u;
        v47 = 0u;
        v48 = 0u;
        v25 = v24;
        v26 = objc_msgSend(v25, "countByEnumeratingWithState:objects:count:", &v47, v51, 16);
        if (v26)
        {
          v27 = v26;
          v28 = *(_QWORD *)v48;
          do
          {
            for (i = 0; i != v27; ++i)
            {
              if (*(_QWORD *)v48 != v28)
                objc_enumerationMutation(v25);
              v30 = *(const __CFString **)(*((_QWORD *)&v47 + 1) + 8 * i);
              v31 = (void *)MEMORY[0x227676638]();
              v32 = v12;
              HMFGetOSLogHandle();
              v33 = objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v33, OS_LOG_TYPE_INFO))
              {
                HMFGetLogIdentifier();
                v34 = (void *)objc_claimAutoreleasedReturnValue();
                *(_DWORD *)buf = 138543618;
                v53 = v34;
                v54 = 2112;
                v55 = v30;
                _os_log_impl(&dword_2218F0000, v33, OS_LOG_TYPE_INFO, "%{public}@Removing personal requests enabled accessory %@", buf, 0x16u);

                v8 = v46;
              }

              objc_autoreleasePoolPop(v31);
              objc_msgSend(v8, "removeAccessoriesWithPersonalRequestsEnabledObject:", v30);
            }
            v27 = objc_msgSend(v25, "countByEnumeratingWithState:objects:count:", &v47, v51, 16);
          }
          while (v27);
        }

        v16 = v44;
        v9 = v45;
        v10 = v43;
      }
      else
      {
        v25 = 0;
      }
      goto LABEL_26;
    }
    if (objc_msgSend(v10, "isEqualToNumber:", &unk_24E96A610))
    {
      +[_MKFUser entity](_MKFUser, "entity");
      v35 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v35, "hmd_attributeForSettingsPath:", CFSTR("root.music.allowiTunesAccount"));
      v36 = (void *)objc_claimAutoreleasedReturnValue();

      if (!v36)
      {
        v16 = 0;
        v8 = v46;
        goto LABEL_27;
      }
      v37 = v10;
      v38 = (void *)MEMORY[0x227676638]();
      v39 = v12;
      HMFGetOSLogHandle();
      v40 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v40, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v41 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v36, "name");
        v42 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138544386;
        v53 = v41;
        v54 = 2112;
        v55 = CFSTR("root.music.allowiTunesAccount");
        v56 = 2112;
        v57 = v42;
        v58 = 2112;
        v59 = v37;
        v60 = 2112;
        v61 = CFSTR("root.siri.identifyVoice");
        _os_log_impl(&dword_2218F0000, v40, OS_LOG_TYPE_INFO, "%{public}@Updating setting '%@' (%@) = %@ due to %@ is on", buf, 0x34u);

      }
      objc_autoreleasePoolPop(v38);
      objc_msgSend(v36, "name");
      v25 = (id)objc_claimAutoreleasedReturnValue();
      v8 = v46;
      v10 = v37;
      v16 = v36;
      objc_msgSend(v46, "setValue:forKey:", v10, v25);
LABEL_26:

LABEL_27:
    }
  }

}

- (void)_handleSharedUserSettingsUpdate:(id)a3
{
  id v4;
  BOOL v5;
  id v6;
  id v7;
  id v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  id v19;
  id v20;
  id v21;
  uint64_t v22;

  v4 = a3;
  v21 = 0;
  v22 = 0;
  v19 = 0;
  v20 = 0;
  v5 = -[HMDHome _validateSettingsUpdate:type:keyPath:value:error:](self, "_validateSettingsUpdate:type:keyPath:value:error:", v4, &v22, &v21, &v20, &v19);
  v6 = v21;
  v7 = v20;
  v8 = v19;
  v9 = v8;
  if (v5)
  {
    -[HMDHome backingStore](self, "backingStore");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "context");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "managedObjectContext");
    v12 = (void *)objc_claimAutoreleasedReturnValue();

    -[HMDHome homeManager](self, "homeManager");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "sharedUserPrivateSettingsManager");
    v14 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(MEMORY[0x24BDBCED8], "dictionary");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v15, "setObject:forKeyedSubscript:", v7, v6);
    if (objc_msgSend(v6, "isEqualToString:", CFSTR("root.siri.identifyVoice"))
      && objc_msgSend(v7, "isEqualToNumber:", &unk_24E96A610))
    {
      objc_msgSend(v15, "setObject:forKeyedSubscript:", v7, CFSTR("root.music.allowiTunesAccount"));
    }
    -[HMDHome uuid](self, "uuid");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v14, "updateSettingsForHome:ofType:withValues:context:", v16, v22, v15, v12);
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "respondWithOutcomeOf:", v17);

  }
  else if (v8)
  {
    objc_msgSend(v4, "respondWithError:", v8);
  }
  else
  {
    objc_msgSend(MEMORY[0x24BDD1540], "hmErrorWithCode:", 3);
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "respondWithError:", v18);

  }
}

- (BOOL)_validateSettingsUpdate:(id)a3 type:(int64_t *)a4 keyPath:(id *)a5 value:(id *)a6 error:(id *)a7
{
  id v12;
  void *v13;
  void *v14;
  void *v15;
  char v16;
  void *v17;
  int64_t v18;
  void *v19;
  uint64_t v20;
  BOOL v21;
  void *v22;
  void *v23;
  uint64_t v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  HMDHome *v29;
  NSObject *v30;
  void *v31;
  id v33;
  void *v34;
  id v35;
  id v36;
  id v37;
  uint8_t buf[4];
  void *v39;
  __int16 v40;
  id v41;
  uint64_t v42;

  v42 = *MEMORY[0x24BDAC8D0];
  v12 = a3;
  objc_msgSend(v12, "uuidForKey:", CFSTR("kUserUUIDKey"));
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v13)
  {
    if (a7)
    {
      v19 = (void *)MEMORY[0x24BDD1540];
      v20 = 27;
      goto LABEL_10;
    }
LABEL_11:
    v21 = 0;
    goto LABEL_33;
  }
  -[HMDHome currentUser](self, "currentUser");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v14, "uuid");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  v16 = objc_msgSend(v15, "hmf_isEqualToUUID:", v13);

  if ((v16 & 1) == 0)
  {
    if (a7)
    {
      v19 = (void *)MEMORY[0x24BDD1540];
      v20 = 48;
      goto LABEL_10;
    }
    goto LABEL_11;
  }
  objc_msgSend(v12, "numberForKey:", *MEMORY[0x24BDD6CD8]);
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  v18 = objc_msgSend(v17, "integerValue");

  if ((unint64_t)(v18 - 3) > 0xFFFFFFFFFFFFFFFDLL)
  {
    objc_msgSend(v12, "stringForKey:", *MEMORY[0x24BDD6CD0]);
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    if (!v22)
    {
      if (a7)
      {
        objc_msgSend(MEMORY[0x24BDD1540], "hmErrorWithCode:", 27);
        v21 = 0;
        *a7 = (id)objc_claimAutoreleasedReturnValue();
      }
      else
      {
        v21 = 0;
      }
      goto LABEL_32;
    }
    objc_msgSend(v12, "dataForKey:", *MEMORY[0x24BDD4E90]);
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    if (!v23)
    {
      if (a7)
      {
        objc_msgSend(MEMORY[0x24BDD1540], "hmErrorWithCode:", 27);
        v21 = 0;
        *a7 = (id)objc_claimAutoreleasedReturnValue();
        v23 = 0;
      }
      else
      {
        v21 = 0;
      }
      goto LABEL_31;
    }
    v35 = v22;
    v36 = v23;
    v37 = 0;
    objc_msgSend(MEMORY[0x24BDD1620], "unarchivedObjectOfClass:fromData:error:", objc_opt_class(), v23, &v37);
    v24 = objc_claimAutoreleasedReturnValue();
    v33 = v37;
    v34 = (void *)v24;
    v21 = v24 != 0;
    if (v24)
    {
      v22 = v35;
      if (a4)
        *a4 = v18;
      v25 = v33;
      if (a5)
        *a5 = objc_retainAutorelease(v35);
      v26 = v34;
      if (!a6)
        goto LABEL_30;
      objc_msgSend(v34, "numberValue");
      v27 = (void *)objc_claimAutoreleasedReturnValue();
      a7 = a6;
    }
    else
    {
      v28 = (void *)MEMORY[0x227676638]();
      v29 = self;
      HMFGetOSLogHandle();
      v30 = objc_claimAutoreleasedReturnValue();
      v25 = v33;
      if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v31 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        v39 = v31;
        v40 = 2112;
        v41 = v33;
        _os_log_impl(&dword_2218F0000, v30, OS_LOG_TYPE_ERROR, "%{public}@Failed to unarchive setting value from encoded value: %@", buf, 0x16u);

      }
      objc_autoreleasePoolPop(v28);
      v26 = 0;
      v22 = v35;
      if (!a7)
        goto LABEL_30;
      objc_msgSend(MEMORY[0x24BDD1540], "hmErrorWithCode:", 3);
      v27 = (void *)objc_claimAutoreleasedReturnValue();
    }
    *a7 = v27;
LABEL_30:

    v23 = v36;
LABEL_31:

LABEL_32:
    goto LABEL_33;
  }
  if (!a7)
    goto LABEL_11;
  v19 = (void *)MEMORY[0x24BDD1540];
  v20 = 3;
LABEL_10:
  objc_msgSend(v19, "hmErrorWithCode:", v20);
  v21 = 0;
  *a7 = (id)objc_claimAutoreleasedReturnValue();
LABEL_33:

  return v21;
}

- (void)_handleSoundCheckChange:(id)a3 message:(id)a4
{
  id v5;

  objc_msgSend(a3, "soundCheckEnabled");
  v5 = (id)objc_claimAutoreleasedReturnValue();
  -[HMDHome setSoundCheckEnabled:](self, "setSoundCheckEnabled:", objc_msgSend(v5, "BOOLValue"));

}

- (void)_handleSoundCheckUpdateRequest:(id)a3
{
  id v4;
  NSObject *v5;
  void *v6;
  HMDHome *v7;
  NSObject *v8;
  void *v9;
  HMDHomeModel *v10;
  void *v11;
  void *v12;
  void *v13;
  HMDHomeModel *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  id v24;
  uint8_t buf[4];
  void *v26;
  uint64_t v27;

  v27 = *MEMORY[0x24BDAC8D0];
  v4 = a3;
  -[HMDHome workQueue](self, "workQueue");
  v5 = objc_claimAutoreleasedReturnValue();
  dispatch_assert_queue_V2(v5);

  v6 = (void *)MEMORY[0x227676638]();
  v7 = self;
  HMFGetOSLogHandle();
  v8 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543362;
    v26 = v9;
    _os_log_impl(&dword_2218F0000, v8, OS_LOG_TYPE_INFO, "%{public}@Received update soundCheck request", buf, 0xCu);

  }
  objc_autoreleasePoolPop(v6);
  v10 = [HMDHomeModel alloc];
  -[HMDHome uuid](v7, "uuid");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHome homeManager](v7, "homeManager");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v12, "uuid");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  v14 = -[HMDBackingStoreModelObject initWithObjectChangeType:uuid:parentUUID:](v10, "initWithObjectChangeType:uuid:parentUUID:", 2, v11, v13);

  objc_msgSend(v4, "messagePayload");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  v16 = *MEMORY[0x24BDD6318];
  v24 = 0;
  v17 = objc_msgSend(v15, "hmf_BOOLForKey:error:", v16, &v24);
  v18 = v24;

  if (v18)
  {
    objc_msgSend(v4, "respondWithError:", v18);
  }
  else
  {
    objc_msgSend(MEMORY[0x24BDD16E0], "numberWithBool:", v17);
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHomeModel setSoundCheckEnabled:](v14, "setSoundCheckEnabled:", v19);

    -[HMDHome backingStore](v7, "backingStore");
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "name");
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    +[HMDBackingStoreTransactionOptions defaultPreferencesOptions](HMDBackingStoreTransactionOptions, "defaultPreferencesOptions");
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v20, "transaction:options:", v21, v22);
    v23 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v23, "add:withMessage:", v14, v4);
    objc_msgSend(v23, "run");

  }
}

- (void)_handleLocationServicesEnabledChange:(id)a3 message:(id)a4
{
  id v6;
  id v7;
  void *v8;
  uint64_t v9;
  void *v10;
  HMDHome *v11;
  NSObject *v12;
  void *v13;
  void *v14;
  int v15;
  void *v16;
  __int16 v17;
  void *v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v6 = a3;
  v7 = a4;
  objc_msgSend(v6, "locationServicesEnabled");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = objc_msgSend(v8, "BOOLValue");

  v10 = (void *)MEMORY[0x227676638]();
  v11 = self;
  HMFGetOSLogHandle();
  v12 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    HMFBooleanToString();
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    v15 = 138543618;
    v16 = v13;
    v17 = 2112;
    v18 = v14;
    _os_log_impl(&dword_2218F0000, v12, OS_LOG_TYPE_INFO, "%{public}@Updating location services enabled: %@", (uint8_t *)&v15, 0x16u);

  }
  objc_autoreleasePoolPop(v10);
  -[HMDHome setLocationServicesEnabled:](v11, "setLocationServicesEnabled:", v9);

}

- (void)_handleHomeUpdateLocationServicesEnabledRequest:(id)a3
{
  id v4;
  NSObject *v5;
  void *v6;
  HMDHome *v7;
  NSObject *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  void *v14;
  HMDHome *v15;
  NSObject *v16;
  void *v17;
  void *v18;
  id v19;
  uint8_t buf[4];
  void *v21;
  __int16 v22;
  id v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v4 = a3;
  -[HMDHome workQueue](self, "workQueue");
  v5 = objc_claimAutoreleasedReturnValue();
  dispatch_assert_queue_V2(v5);

  v6 = (void *)MEMORY[0x227676638]();
  v7 = self;
  HMFGetOSLogHandle();
  v8 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543618;
    v21 = v9;
    v22 = 2112;
    v23 = v4;
    _os_log_impl(&dword_2218F0000, v8, OS_LOG_TYPE_INFO, "%{public}@Received update location services enabled request message: %@", buf, 0x16u);

  }
  objc_autoreleasePoolPop(v6);
  objc_msgSend(v4, "messagePayload");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v11 = *MEMORY[0x24BDD5E10];
  v19 = 0;
  v12 = objc_msgSend(v10, "hmf_BOOLForKey:error:", v11, &v19);
  v13 = v19;

  if (v13)
  {
    v14 = (void *)MEMORY[0x227676638]();
    v15 = v7;
    HMFGetOSLogHandle();
    v16 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "messagePayload");
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v21 = v17;
      v22 = 2112;
      v23 = v18;
      _os_log_impl(&dword_2218F0000, v16, OS_LOG_TYPE_ERROR, "%{public}@Failed to decode location services enabled from update request payload: %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v14);
    objc_msgSend(v4, "respondWithError:", v13);
  }
  else
  {
    -[HMDHome runLocationServicesEnabledUpdateWithValue:message:](v7, "runLocationServicesEnabledUpdateWithValue:message:", v12, v4);
  }

}

- (void)runLocationServicesEnabledUpdateWithValue:(BOOL)a3
{
  -[HMDHome runLocationServicesEnabledUpdateWithValue:message:](self, "runLocationServicesEnabledUpdateWithValue:message:", a3, 0);
}

- (void)runLocationServicesEnabledUpdateWithValue:(BOOL)a3 message:(id)a4
{
  _BOOL8 v4;
  id v6;
  HMDHomeModel *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  HMDHomeModel *v15;

  v4 = a3;
  v6 = a4;
  v7 = [HMDHomeModel alloc];
  -[HMDHome uuid](self, "uuid");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHome homeManager](self, "homeManager");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "uuid");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v15 = -[HMDBackingStoreModelObject initWithObjectChangeType:uuid:parentUUID:](v7, "initWithObjectChangeType:uuid:parentUUID:", 2, v8, v10);

  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithBool:", v4);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHomeModel setLocationServicesEnabled:](v15, "setLocationServicesEnabled:", v11);

  -[HMDHomeModel setDidOnboardLocationServices:](v15, "setDidOnboardLocationServices:", MEMORY[0x24BDBD1C8]);
  -[HMDHome backingStore](self, "backingStore");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  +[HMDBackingStoreTransactionOptions defaultPreferencesOptions](HMDBackingStoreTransactionOptions, "defaultPreferencesOptions");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v12, "transaction:options:", CFSTR("LocationServicesEnabledUpdate"), v13);
  v14 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v14, "add:withMessage:", v15, v6);
  objc_msgSend(v14, "run");

}

- (void)_handleDidOnboardLocationServicesChange:(id)a3 message:(id)a4
{
  id v6;
  id v7;
  void *v8;
  uint64_t v9;
  void *v10;
  HMDHome *v11;
  NSObject *v12;
  void *v13;
  void *v14;
  int v15;
  void *v16;
  __int16 v17;
  void *v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v6 = a3;
  v7 = a4;
  objc_msgSend(v6, "didOnboardLocationServices");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = objc_msgSend(v8, "BOOLValue");

  v10 = (void *)MEMORY[0x227676638]();
  v11 = self;
  HMFGetOSLogHandle();
  v12 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    HMFBooleanToString();
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    v15 = 138543618;
    v16 = v13;
    v17 = 2112;
    v18 = v14;
    _os_log_impl(&dword_2218F0000, v12, OS_LOG_TYPE_INFO, "%{public}@Updating did onboard location services: %@", (uint8_t *)&v15, 0x16u);

  }
  objc_autoreleasePoolPop(v10);
  -[HMDHome setDidOnboardLocationServices:](v11, "setDidOnboardLocationServices:", v9);

}

- (void)_handleHomeUpdateDidOnboardLocationServicesRequest:(id)a3
{
  id v4;
  NSObject *v5;
  void *v6;
  HMDHome *v7;
  NSObject *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  void *v14;
  HMDHome *v15;
  NSObject *v16;
  void *v17;
  void *v18;
  HMDHomeModel *v19;
  void *v20;
  void *v21;
  void *v22;
  HMDHomeModel *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  id v29;
  uint8_t buf[4];
  void *v31;
  __int16 v32;
  void *v33;
  uint64_t v34;

  v34 = *MEMORY[0x24BDAC8D0];
  v4 = a3;
  -[HMDHome workQueue](self, "workQueue");
  v5 = objc_claimAutoreleasedReturnValue();
  dispatch_assert_queue_V2(v5);

  v6 = (void *)MEMORY[0x227676638]();
  v7 = self;
  HMFGetOSLogHandle();
  v8 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543362;
    v31 = v9;
    _os_log_impl(&dword_2218F0000, v8, OS_LOG_TYPE_INFO, "%{public}@Received update did onboard locations services request", buf, 0xCu);

  }
  objc_autoreleasePoolPop(v6);
  objc_msgSend(v4, "messagePayload");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v11 = *MEMORY[0x24BDD5CD0];
  v29 = 0;
  v12 = objc_msgSend(v10, "hmf_BOOLForKey:error:", v11, &v29);
  v13 = v29;

  if (v13)
  {
    v14 = (void *)MEMORY[0x227676638]();
    v15 = v7;
    HMFGetOSLogHandle();
    v16 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "messagePayload");
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v31 = v17;
      v32 = 2112;
      v33 = v18;
      _os_log_impl(&dword_2218F0000, v16, OS_LOG_TYPE_ERROR, "%{public}@Failed to decode did onboard location services from update request payload: %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v14);
    objc_msgSend(v4, "respondWithError:", v13);
  }
  else
  {
    v19 = [HMDHomeModel alloc];
    -[HMDHome uuid](v7, "uuid");
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHome homeManager](v7, "homeManager");
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v21, "uuid");
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    v23 = -[HMDBackingStoreModelObject initWithObjectChangeType:uuid:parentUUID:](v19, "initWithObjectChangeType:uuid:parentUUID:", 2, v20, v22);

    objc_msgSend(MEMORY[0x24BDD16E0], "numberWithBool:", v12);
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHomeModel setDidOnboardLocationServices:](v23, "setDidOnboardLocationServices:", v24);

    -[HMDHome backingStore](v7, "backingStore");
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "name");
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    +[HMDBackingStoreTransactionOptions defaultPreferencesOptions](HMDBackingStoreTransactionOptions, "defaultPreferencesOptions");
    v27 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v25, "transaction:options:", v26, v27);
    v28 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v28, "add:withMessage:", v23, v4);
    objc_msgSend(v28, "run");

  }
}

- (void)_handleResolveThreadNetworkRequest:(id)a3
{
  id v4;
  void *v5;
  HMDHome *v6;
  NSObject *v7;
  void *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  void *v12;
  HMDHome *v13;
  NSObject *v14;
  void *v15;
  _QWORD v16[4];
  id v17;
  id v18;
  uint8_t buf[4];
  void *v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  v4 = a3;
  v5 = (void *)MEMORY[0x227676638]();
  v6 = self;
  HMFGetOSLogHandle();
  v7 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543362;
    v20 = v8;
    _os_log_impl(&dword_2218F0000, v7, OS_LOG_TYPE_INFO, "%{public}@Attempting to resolve thread network credentials", buf, 0xCu);

  }
  objc_autoreleasePoolPop(v5);
  +[HMDThreadNetworkMetadataStore defaultStore](HMDThreadNetworkMetadataStore, "defaultStore");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  if (v9)
  {
    -[HMDHome threadOperationalDataset](v6, "threadOperationalDataset");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_initWeak((id *)buf, v6);
    v11 = -[HMDHome doesHomeContainResident](v6, "doesHomeContainResident");
    v16[0] = MEMORY[0x24BDAC760];
    v16[1] = 3221225472;
    v16[2] = __46__HMDHome__handleResolveThreadNetworkRequest___block_invoke;
    v16[3] = &unk_24E77B2F0;
    objc_copyWeak(&v18, (id *)buf);
    v17 = v4;
    objc_msgSend(v9, "retrieveMetadata:homeHasResident:completion:", v10, v11, v16);

    objc_destroyWeak(&v18);
    objc_destroyWeak((id *)buf);
  }
  else
  {
    v12 = (void *)MEMORY[0x227676638]();
    v13 = v6;
    HMFGetOSLogHandle();
    v14 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v20 = v15;
      _os_log_impl(&dword_2218F0000, v14, OS_LOG_TYPE_ERROR, "%{public}@No thread network metadata store", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v12);
    objc_msgSend(MEMORY[0x24BDD1540], "hmfErrorWithCode:", 2);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "respondWithError:", v10);
  }

}

- (void)_handleHasAnyUserAcknowledgedCameraRecordingOnboardingChange:(id)a3 message:(id)a4
{
  id v6;
  id v7;
  void *v8;
  HMDHome *v9;
  NSObject *v10;
  void *v11;
  void *v12;
  int v13;
  void *v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v6 = a3;
  v7 = a4;
  v8 = (void *)MEMORY[0x227676638]();
  v9 = self;
  HMFGetOSLogHandle();
  v10 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v13 = 138543362;
    v14 = v11;
    _os_log_impl(&dword_2218F0000, v10, OS_LOG_TYPE_INFO, "%{public}@Home's has any user acknowledged camera recording onboarding value changed, sending notification", (uint8_t *)&v13, 0xCu);

  }
  objc_autoreleasePoolPop(v8);
  objc_msgSend(v6, "hasAnyUserAcknowledgedCameraRecordingOnboarding");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHome setHasAnyUserAcknowledgedCameraRecordingOnboarding:](v9, "setHasAnyUserAcknowledgedCameraRecordingOnboarding:", objc_msgSend(v12, "BOOLValue"));

}

- (void)_handleSetHasOnboardedForAccessCodeChange:(id)a3 message:(id)a4
{
  id v6;
  id v7;
  void *v8;
  HMDHome *v9;
  NSObject *v10;
  void *v11;
  void *v12;
  void *v13;
  int v14;
  void *v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  v6 = a3;
  v7 = a4;
  v8 = (void *)MEMORY[0x227676638]();
  v9 = self;
  HMFGetOSLogHandle();
  v10 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v14 = 138543362;
    v15 = v11;
    _os_log_impl(&dword_2218F0000, v10, OS_LOG_TYPE_INFO, "%{public}@Home's has onboarded for access code value changed, sending notification", (uint8_t *)&v14, 0xCu);

  }
  objc_autoreleasePoolPop(v8);
  objc_msgSend(v6, "hasOnboardedForAccessCode");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHome setHasOnboardedForAccessCode:](v9, "setHasOnboardedForAccessCode:", objc_msgSend(v12, "BOOLValue"));

  -[HMDHome notificationCenter](v9, "notificationCenter");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v13, "postNotificationName:object:", CFSTR("HMDHomeHasOnboardedForAccessCodeChangeNotification"), v9);

}

- (void)_handleSetHasOnboardedForWalletKeyChange:(id)a3 message:(id)a4
{
  id v6;
  id v7;
  void *v8;
  HMDHome *v9;
  NSObject *v10;
  void *v11;
  void *v12;
  void *v13;
  int v14;
  void *v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  v6 = a3;
  v7 = a4;
  v8 = (void *)MEMORY[0x227676638]();
  v9 = self;
  HMFGetOSLogHandle();
  v10 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v14 = 138543362;
    v15 = v11;
    _os_log_impl(&dword_2218F0000, v10, OS_LOG_TYPE_INFO, "%{public}@Home's has onboarded for wallet key value changed, sending notification", (uint8_t *)&v14, 0xCu);

  }
  objc_autoreleasePoolPop(v8);
  objc_msgSend(v6, "hasOnboardedForWalletKey");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHome setHasOnboardedForWalletKey:](v9, "setHasOnboardedForWalletKey:", objc_msgSend(v12, "BOOLValue"));

  -[HMDHome notificationCenter](v9, "notificationCenter");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v13, "postNotificationName:object:", CFSTR("HMDHomeHasOnboardedForWalletKeyChangeNotification"), v9);

}

- (void)_refreshCharacteristicValuesOnHomeNotificationEnable
{
  void *v3;
  void *v4;
  __objc2_class *v5;
  uint64_t v6;
  id v7;
  void *v8;
  id v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t i;
  void *v15;
  void *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t j;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  char v26;
  void *v27;
  HMDHome *v28;
  NSObject *v29;
  _BOOL4 v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  HMDHome *v38;
  NSObject *v39;
  void *v40;
  void *v41;
  void *v42;
  void *v43;
  id obj;
  uint64_t v45;
  HMDHome *v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  _QWORD v50[4];
  id v51;
  HMDHome *v52;
  id v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  _QWORD v62[5];
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  const __CFString *v67;
  uint64_t v68;
  uint8_t buf[4];
  void *v70;
  __int16 v71;
  void *v72;
  _BYTE v73[128];
  _BYTE v74[128];
  _BYTE v75[128];
  uint64_t v76;

  v76 = *MEMORY[0x24BDAC8D0];
  objc_msgSend(MEMORY[0x24BDBCEB8], "array");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x24BDBCEF0], "set");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v63 = 0u;
  v64 = 0u;
  v65 = 0u;
  v66 = 0u;
  v46 = self;
  -[HMDHome accessories](self, "accessories");
  obj = (id)objc_claimAutoreleasedReturnValue();
  v47 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v63, v75, 16);
  if (v47)
  {
    v45 = *(_QWORD *)v64;
    v5 = &OBJC_METACLASS___HMDCHIPControllerPrivateStorage;
    do
    {
      v6 = 0;
      do
      {
        if (*(_QWORD *)v64 != v45)
          objc_enumerationMutation(obj);
        v49 = v6;
        v7 = *(id *)(*((_QWORD *)&v63 + 1) + 8 * v6);
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0)
          v8 = v7;
        else
          v8 = 0;
        v9 = v8;

        v62[0] = MEMORY[0x24BDAC760];
        v62[1] = 3221225472;
        v62[2] = __63__HMDHome__refreshCharacteristicValuesOnHomeNotificationEnable__block_invoke;
        v62[3] = &unk_24E798C68;
        v62[4] = v46;
        objc_msgSend(v9, "characteristicsPassingTest:", v62);
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        v58 = 0u;
        v59 = 0u;
        v60 = 0u;
        v61 = 0u;
        v11 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v58, v74, 16);
        if (v11)
        {
          v12 = v11;
          v13 = *(_QWORD *)v59;
          do
          {
            for (i = 0; i != v12; ++i)
            {
              if (*(_QWORD *)v59 != v13)
                objc_enumerationMutation(v10);
              objc_msgSend(&v5[84], "requestWithCharacteristic:", *(_QWORD *)(*((_QWORD *)&v58 + 1) + 8 * i));
              v15 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v3, "addObject:", v15);

            }
            v12 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v58, v74, 16);
          }
          while (v12);
        }
        v56 = 0u;
        v57 = 0u;
        v54 = 0u;
        v55 = 0u;
        v48 = v9;
        objc_msgSend(v9, "lightProfiles");
        v16 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v16, "allObjects");
        v17 = (void *)objc_claimAutoreleasedReturnValue();

        v18 = objc_msgSend(v17, "countByEnumeratingWithState:objects:count:", &v54, v73, 16);
        if (v18)
        {
          v19 = v18;
          v20 = *(_QWORD *)v55;
          do
          {
            for (j = 0; j != v19; ++j)
            {
              if (*(_QWORD *)v55 != v20)
                objc_enumerationMutation(v17);
              v22 = *(void **)(*((_QWORD *)&v54 + 1) + 8 * j);
              if (!objc_msgSend(v22, "supportsCHIP") || (_os_feature_enabled_impl() & 1) == 0)
              {
                objc_msgSend(v22, "readCharacteristicRequests");
                v23 = (void *)objc_claimAutoreleasedReturnValue();
                if (objc_msgSend(v23, "count"))
                {
                  objc_msgSend(v23, "allObjects");
                  v24 = v4;
                  v25 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend(v3, "addObjectsFromArray:", v25);

                  v4 = v24;
                  objc_msgSend(v24, "addObject:", v22);
                }

              }
            }
            v19 = objc_msgSend(v17, "countByEnumeratingWithState:objects:count:", &v54, v73, 16);
          }
          while (v19);
        }

        v6 = v49 + 1;
        v5 = &OBJC_METACLASS___HMDCHIPControllerPrivateStorage;
      }
      while (v49 + 1 != v47);
      v47 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v63, v75, 16);
    }
    while (v47);
  }

  v26 = objc_msgSend(v3, "hmf_isEmpty");
  v27 = (void *)MEMORY[0x227676638]();
  v28 = v46;
  HMFGetOSLogHandle();
  v29 = objc_claimAutoreleasedReturnValue();
  v30 = os_log_type_enabled(v29, OS_LOG_TYPE_INFO);
  if ((v26 & 1) != 0)
  {
    if (v30)
    {
      HMFGetLogIdentifier();
      v31 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v70 = v31;
      _os_log_impl(&dword_2218F0000, v29, OS_LOG_TYPE_INFO, "%{public}@Not refreshing characteristics as read requests are empty", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v27);
  }
  else
  {
    if (v30)
    {
      HMFGetLogIdentifier();
      v32 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v70 = v32;
      v71 = 2112;
      v72 = v3;
      _os_log_impl(&dword_2218F0000, v29, OS_LOG_TYPE_INFO, "%{public}@Issuing characteristic read requests when Home app enabled notifications: %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v27);
    v33 = (void *)MEMORY[0x24BE3F1B0];
    objc_msgSend(MEMORY[0x24BE3F1B8], "allMessageDestinations");
    v34 = (void *)objc_claimAutoreleasedReturnValue();
    v67 = CFSTR("kMultiPartResponseKey");
    v68 = MEMORY[0x24BDBD1C8];
    objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", &v68, &v67, 1);
    v35 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v33, "messageWithName:destination:payload:", CFSTR("kMultipleCharacteristicReadRequestKey"), v34, v35);
    v36 = (void *)objc_claimAutoreleasedReturnValue();

    v37 = (void *)MEMORY[0x227676638]();
    v38 = v28;
    HMFGetOSLogHandle();
    v39 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v39, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v40 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v36, "identifier");
      v41 = v4;
      v42 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v70 = v40;
      v71 = 2114;
      v72 = v42;
      _os_log_impl(&dword_2218F0000, v39, OS_LOG_TYPE_INFO, "%{public}@Issuing read requests with identifier %{public}@, Source: App enabled notifications", buf, 0x16u);

      v4 = v41;
    }

    objc_autoreleasePoolPop(v37);
    v43 = (void *)objc_msgSend(v3, "copy");
    v50[0] = MEMORY[0x24BDAC760];
    v50[1] = 3221225472;
    v50[2] = __63__HMDHome__refreshCharacteristicValuesOnHomeNotificationEnable__block_invoke_1453;
    v50[3] = &unk_24E795C28;
    v51 = v3;
    v52 = v38;
    v53 = v4;
    -[HMDHome _readCharacteristicValues:requestMessage:source:withCompletionHandler:](v38, "_readCharacteristicValues:requestMessage:source:withCompletionHandler:", v43, v36, 7, v50);

  }
}

- (void)_handleEnableNotifications:(id)a3
{
  id v4;
  NSObject *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (**v10)(_QWORD, _QWORD, _QWORD);
  void *v11;
  HMDHome *v12;
  NSObject *v13;
  NSObject *v14;
  void *v15;
  void *v16;
  void (**v17)(void *, _QWORD);
  void *v18;
  uint64_t v19;
  void *v20;
  HMDHome *v21;
  uint64_t v22;
  void *v23;
  NSObject *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  HMDHome *v30;
  NSObject *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  void (**v38)(_QWORD, _QWORD, _QWORD);
  void *v39;
  void *v40;
  HMDHome *v41;
  NSObject *v42;
  void *v43;
  void *v44;
  void *v45;
  void *v46;
  void *v47;
  void *v48;
  void *v49;
  char v50;
  void *v51;
  char v52;
  uint64_t v53;
  _QWORD aBlock[5];
  id v55;
  char v56;
  char v57;
  _QWORD v58[3];
  _QWORD v59[3];
  uint8_t buf[4];
  void *v61;
  __int16 v62;
  void *v63;
  __int16 v64;
  void *v65;
  uint64_t v66;

  v66 = *MEMORY[0x24BDAC8D0];
  v4 = a3;
  -[HMDHome workQueue](self, "workQueue");
  v5 = objc_claimAutoreleasedReturnValue();
  dispatch_assert_queue_V2(v5);

  v57 = 0;
  v6 = objc_msgSend(v4, "BOOLForKey:keyPresent:", CFSTR("kCharacteristicNotificationEnableKey"), &v57);
  v56 = 0;
  v7 = *MEMORY[0x24BDD5CF0];
  v8 = objc_msgSend(v4, "BOOLForKey:keyPresent:", *MEMORY[0x24BDD5CF0], &v56);
  if (v57 && v56)
  {
    v9 = v8;
    objc_msgSend(v4, "applicationBundleIdentifier");
    v10 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
    v11 = (void *)MEMORY[0x227676638]();
    v12 = self;
    HMFGetOSLogHandle();
    v13 = objc_claimAutoreleasedReturnValue();
    v14 = v13;
    if (!v10)
    {
      if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v37 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543362;
        v61 = v37;
        _os_log_impl(&dword_2218F0000, v14, OS_LOG_TYPE_ERROR, "%{public}@Unable to look up the application bundle identifier from request to enable home notifications", buf, 0xCu);

      }
      objc_autoreleasePoolPop(v11);
      objc_msgSend(v4, "responseHandler");
      v10 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();

      if (v10)
      {
        objc_msgSend(v4, "responseHandler");
        v38 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
        objc_msgSend(MEMORY[0x24BDD1540], "hmErrorWithCode:", 52);
        v39 = (void *)objc_claimAutoreleasedReturnValue();
        ((void (**)(_QWORD, void *, _QWORD))v38)[2](v38, v39, 0);

        v10 = 0;
      }
      goto LABEL_36;
    }
    if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      HMFBooleanToString();
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543874;
      v61 = v15;
      v62 = 2112;
      v63 = v10;
      v64 = 2112;
      v65 = v16;
      _os_log_impl(&dword_2218F0000, v14, OS_LOG_TYPE_INFO, "%{public}@Handling Enable Notifications from ClientIdentifier: %@, setting: %@", buf, 0x20u);

    }
    objc_autoreleasePoolPop(v11);
    aBlock[0] = MEMORY[0x24BDAC760];
    aBlock[1] = 3221225472;
    aBlock[2] = __38__HMDHome__handleEnableNotifications___block_invoke;
    aBlock[3] = &unk_24E792260;
    aBlock[4] = v12;
    v55 = v4;
    v17 = (void (**)(void *, _QWORD))_Block_copy(aBlock);
    if (!v6)
    {
      -[HMDHome addNotificationDeregistrationForApplicationBundleIdentifier:](v12, "addNotificationDeregistrationForApplicationBundleIdentifier:", v10);
      -[HMDHome _startHomeNotificationDeregistrationTimer](v12, "_startHomeNotificationDeregistrationTimer");
      objc_msgSend(MEMORY[0x24BE3F238], "sharedPowerLogger");
      v40 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v40, "reportCharacteristicNotificationRegistrationEvent:clientIdentifier:", 0, v10);

LABEL_34:
      v17[2](v17, 0);
LABEL_35:

      goto LABEL_36;
    }
    -[HMDHome removeNotificationDeregistrationForApplicationBundleIdentifier:](v12, "removeNotificationDeregistrationForApplicationBundleIdentifier:", v10);
    -[HMDHome notificationRegistrations](v12, "notificationRegistrations");
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    v19 = objc_msgSend(v18, "count");

    -[HMDHome notificationRegistrationsForAppleMediaAccessories](v12, "notificationRegistrationsForAppleMediaAccessories");
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v20, "count"))
      LODWORD(v21) = 0;
    else
      LODWORD(v21) = v9;

    v22 = -[HMDHome addNotificationRegistrationForApplicationBundleIdentifier:includesAppleMediaAccessories:](v12, "addNotificationRegistrationForApplicationBundleIdentifier:includesAppleMediaAccessories:", v10, v9);
    if ((_DWORD)v21 == 1)
    {
      v53 = v19;
      v23 = (void *)MEMORY[0x227676638](v22);
      v21 = v12;
      HMFGetOSLogHandle();
      v24 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v24, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v25 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543362;
        v61 = v25;
        _os_log_impl(&dword_2218F0000, v24, OS_LOG_TYPE_INFO, "%{public}@Modifying direct Apple Media notification registrations with resident due to HomeKit client request", buf, 0xCu);

      }
      objc_autoreleasePoolPop(v23);
      -[HMDHome mediaStateSubscriber](v21, "mediaStateSubscriber");
      v26 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v26, "subscribeForAppleMediaStateWithSubscriptionToken:", CFSTR("HMDHomeClientMediaStateRegistrationToken"));

      v19 = v53;
      LODWORD(v21) = 1;
    }
    if (v19)
    {
      -[HMDHome homeManager](v12, "homeManager");
      v27 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v27, "chipDataSource");
      v28 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v28, "updateNotificationsEnabled:forHome:keepAliveOnly:", 1, v12, 0);

      if (!(_DWORD)v21)
      {
LABEL_30:
        logAndPostNotification(CFSTR("HMDHomeDidEnableCharacteristicNotifyEventNotification"), v12, 0);
        -[HMDHome _refreshCharacteristicValuesOnHomeNotificationEnable](v12, "_refreshCharacteristicValuesOnHomeNotificationEnable");
        if (v19)
          v50 = (char)v21;
        else
          v50 = 1;
        objc_msgSend(MEMORY[0x24BE3F238], "sharedPowerLogger");
        v51 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v51, "reportCharacteristicNotificationRegistrationEvent:clientIdentifier:", 1, v10);

        if ((v50 & 1) != 0)
          goto LABEL_35;
        goto LABEL_34;
      }
    }
    else
    {
      v52 = (char)v21;
      v21 = (HMDHome *)MEMORY[0x227676638]();
      v41 = v12;
      HMFGetOSLogHandle();
      v42 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v42, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v43 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543362;
        v61 = v43;
        _os_log_impl(&dword_2218F0000, v42, OS_LOG_TYPE_INFO, "%{public}@Modifying notification registrations with resident due to HomeKit client request", buf, 0xCu);

      }
      objc_autoreleasePoolPop(v21);
      -[HMDHome _subscribeForHomeNotificationsFromRemoteGateway:](v41, "_subscribeForHomeNotificationsFromRemoteGateway:", 1);
      -[HMDHome _subscribeForHomeNotificationsOnDirectTransports:](v41, 1);
      objc_msgSend(MEMORY[0x24BDBCE60], "date");
      v44 = (void *)objc_claimAutoreleasedReturnValue();
      -[HMDHome setNotificationsUpdatedTime:](v41, "setNotificationsUpdatedTime:", v44);

      -[HMDHome homeManager](v41, "homeManager");
      v45 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v45, "chipDataSource");
      v46 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v46, "updateNotificationsEnabled:forHome:keepAliveOnly:", 1, v41, 0);

      v19 = 0;
      LOBYTE(v21) = v52;
    }
    v59[0] = MEMORY[0x24BDBD1C8];
    v58[0] = CFSTR("kCharacteristicNotificationEnableKey");
    v58[1] = CFSTR("kCharacteristicNotificationEnableTime");
    -[HMDHome notificationsUpdatedTime](v12, "notificationsUpdatedTime");
    v47 = (void *)objc_claimAutoreleasedReturnValue();
    v59[1] = v47;
    v58[2] = v7;
    objc_msgSend(MEMORY[0x24BDD16E0], "numberWithBool:", v9);
    v48 = (void *)objc_claimAutoreleasedReturnValue();
    v59[2] = v48;
    objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v59, v58, 3);
    v49 = (void *)objc_claimAutoreleasedReturnValue();

    ((void (**)(void *, void *))v17)[2](v17, v49);
    goto LABEL_30;
  }
  v29 = (void *)MEMORY[0x227676638](v8);
  v30 = self;
  HMFGetOSLogHandle();
  v31 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
  {
    HMFGetLogIdentifier();
    v32 = (void *)objc_claimAutoreleasedReturnValue();
    HMFBooleanToString();
    v33 = (void *)objc_claimAutoreleasedReturnValue();
    HMFBooleanToString();
    v34 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543874;
    v61 = v32;
    v62 = 2112;
    v63 = v33;
    v64 = 2112;
    v65 = v34;
    _os_log_impl(&dword_2218F0000, v31, OS_LOG_TYPE_ERROR, "%{public}@Client request missing required key (hasHAPKey: %@, hasAppleMediaKey: %@) to enable home notifications", buf, 0x20u);

  }
  objc_autoreleasePoolPop(v29);
  objc_msgSend(v4, "responseHandler");
  v35 = (void *)objc_claimAutoreleasedReturnValue();

  if (v35)
  {
    objc_msgSend(v4, "responseHandler");
    v10 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD1540], "hmErrorWithCode:", 27);
    v36 = (void *)objc_claimAutoreleasedReturnValue();
    ((void (**)(_QWORD, void *, _QWORD))v10)[2](v10, v36, 0);

LABEL_36:
  }

}

- (void)handleSiriEndPointAddedNotification:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  id v7;
  HMDHome *v8;
  void *v9;
  HMDHome *v10;
  NSObject *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  HMDHome *v16;
  NSObject *v17;
  void *v18;
  void *v19;
  int v20;
  void *v21;
  __int16 v22;
  id v23;
  __int16 v24;
  void *v25;
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  v4 = a3;
  objc_msgSend(v4, "object");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v6 = v5;
  else
    v6 = 0;
  v7 = v6;

  if (!v7)
  {
    v9 = (void *)MEMORY[0x227676638]();
    v10 = self;
    HMFGetOSLogHandle();
    v11 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      v20 = 138543618;
      v21 = v12;
      v22 = 2112;
      v23 = v4;
      _os_log_impl(&dword_2218F0000, v11, OS_LOG_TYPE_ERROR, "%{public}@Unable to synchronize settings after receiving endpoint added notification with no HAP accessory. %@", (uint8_t *)&v20, 0x16u);
      goto LABEL_10;
    }
LABEL_11:

    objc_autoreleasePoolPop(v9);
    goto LABEL_12;
  }
  objc_msgSend(v7, "home");
  v8 = (HMDHome *)objc_claimAutoreleasedReturnValue();

  if (v8 != self)
  {
    v9 = (void *)MEMORY[0x227676638]();
    v10 = self;
    HMFGetOSLogHandle();
    v11 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      HMFGetLogIdentifier();
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v7, "home");
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      v20 = 138543874;
      v21 = v12;
      v22 = 2112;
      v23 = v7;
      v24 = 2112;
      v25 = v13;
      _os_log_impl(&dword_2218F0000, v11, OS_LOG_TYPE_DEFAULT, "%{public}@New accessory is added for another home for HAP accessory: %@ home:%@", (uint8_t *)&v20, 0x20u);

LABEL_10:
      goto LABEL_11;
    }
    goto LABEL_11;
  }
  objc_msgSend(v7, "siriEndpointProfile");
  v14 = (void *)objc_claimAutoreleasedReturnValue();

  if (v14)
  {
    v15 = (void *)MEMORY[0x227676638]();
    v16 = self;
    HMFGetOSLogHandle();
    v17 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
    {
      HMFGetLogIdentifier();
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      v20 = 138543618;
      v21 = v18;
      v22 = 2112;
      v23 = v7;
      _os_log_impl(&dword_2218F0000, v17, OS_LOG_TYPE_DEFAULT, "%{public}@A siri endpoint accessory is added. Confirm resident device: %@", (uint8_t *)&v20, 0x16u);

    }
    objc_autoreleasePoolPop(v15);
    -[HMDHome residentDeviceManager](v16, "residentDeviceManager");
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v19, "confirmWithCompletionHandler:", 0);

  }
LABEL_12:

}

- (BOOL)supportsSiriEndpointOnBoarding
{
  void *v3;
  void *v4;
  int v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t i;
  void *v12;
  void *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t j;
  void *v18;
  void *v19;
  void *v20;
  char v21;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  _BYTE v31[128];
  _BYTE v32[128];
  uint64_t v33;

  v33 = *MEMORY[0x24BDAC8D0];
  -[HMDHome primaryResident](self, "primaryResident");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "capabilities");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v4, "supportsSiriEndpointSetup");

  if (v5)
  {
    objc_msgSend(MEMORY[0x24BDBCEB8], "array");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v27 = 0u;
    v28 = 0u;
    v29 = 0u;
    v30 = 0u;
    -[HMDHome appleMediaAccessories](self, "appleMediaAccessories");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v27, v32, 16);
    if (v8)
    {
      v9 = v8;
      v10 = *(_QWORD *)v28;
      do
      {
        for (i = 0; i != v9; ++i)
        {
          if (*(_QWORD *)v28 != v10)
            objc_enumerationMutation(v7);
          objc_msgSend(*(id *)(*((_QWORD *)&v27 + 1) + 8 * i), "device");
          v12 = (void *)objc_claimAutoreleasedReturnValue();
          if (v12)
            objc_msgSend(v6, "addObject:", v12);

        }
        v9 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v27, v32, 16);
      }
      while (v9);
    }

    v25 = 0u;
    v26 = 0u;
    v23 = 0u;
    v24 = 0u;
    -[HMDHome residentDeviceManager](self, "residentDeviceManager", 0);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "residentDevices");
    v14 = (void *)objc_claimAutoreleasedReturnValue();

    v15 = objc_msgSend(v14, "countByEnumeratingWithState:objects:count:", &v23, v31, 16);
    if (v15)
    {
      v16 = *(_QWORD *)v24;
      do
      {
        for (j = 0; j != v15; ++j)
        {
          if (*(_QWORD *)v24 != v16)
            objc_enumerationMutation(v14);
          v18 = *(void **)(*((_QWORD *)&v23 + 1) + 8 * j);
          objc_msgSend(v18, "device");
          v19 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v18, "capabilities");
          v20 = (void *)objc_claimAutoreleasedReturnValue();
          if (objc_msgSend(v20, "supportsHomeHub"))
          {
            v21 = objc_msgSend(v6, "containsObject:", v19);

            if ((v21 & 1) != 0)
            {

              LOBYTE(v15) = 1;
              goto LABEL_24;
            }
          }
          else
          {

          }
        }
        v15 = objc_msgSend(v14, "countByEnumeratingWithState:objects:count:", &v23, v31, 16);
      }
      while (v15);
    }
LABEL_24:

  }
  else
  {
    LOBYTE(v15) = 0;
  }
  return v15;
}

- (BOOL)currentDeviceSupportsSidekickSettings
{
  void *v2;
  void *v3;
  void *v4;
  char v5;

  -[HMDHome homeManager](self, "homeManager");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "capabilitiesController");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "currentResidentCapabilities");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v4, "supportsSiriEndpointSetup");

  return v5;
}

- (BOOL)enabledResidentsSupportsHomeHub
{
  void *v2;
  void *v3;
  char v4;

  -[HMDHome residentDeviceManager](self, "residentDeviceManager");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "availableResidentDevices");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "na_any:", &__block_literal_global_1456);

  return v4;
}

- (int64_t)atHomeLevel
{
  int64_t atHomeLevel;

  os_unfair_recursive_lock_lock_with_options();
  atHomeLevel = self->_atHomeLevel;
  os_unfair_recursive_lock_unlock();
  return atHomeLevel;
}

- (void)setAtHomeLevel:(int64_t)a3
{
  unint64_t atHomeLevel;
  uint64_t v6;
  void *v7;
  HMDHome *v8;
  NSObject *v9;
  uint64_t v10;
  void *v11;
  const __CFString *v12;
  const __CFString *v13;
  const __CFString *v14;
  void *v15;
  void *v16;
  void *v17;
  int v18;
  uint64_t v19;
  __int16 v20;
  const __CFString *v21;
  __int16 v22;
  const __CFString *v23;
  __int16 v24;
  const __CFString *v25;
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  os_unfair_recursive_lock_lock_with_options();
  atHomeLevel = self->_atHomeLevel;
  if (atHomeLevel != a3)
    self->_atHomeLevel = a3;
  v6 = os_unfair_recursive_lock_unlock();
  v7 = (void *)MEMORY[0x227676638](v6);
  v8 = self;
  HMFGetOSLogHandle();
  v9 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v10 = objc_claimAutoreleasedReturnValue();
    v11 = (void *)v10;
    v12 = CFSTR("Updated");
    if (atHomeLevel == a3)
      v12 = CFSTR("Did not update");
    if (atHomeLevel > 3)
      v13 = CFSTR("HMDAtHomeLevelNotAtHome");
    else
      v13 = off_24E777248[atHomeLevel];
    if ((unint64_t)a3 > 3)
      v14 = CFSTR("HMDAtHomeLevelNotAtHome");
    else
      v14 = off_24E777248[a3];
    v18 = 138544130;
    v19 = v10;
    v20 = 2112;
    v21 = v12;
    v22 = 2112;
    v23 = v13;
    v24 = 2112;
    v25 = v14;
    _os_log_impl(&dword_2218F0000, v9, OS_LOG_TYPE_INFO, "%{public}@%@ atHomeLevel from %@ to %@", (uint8_t *)&v18, 0x2Au);

  }
  objc_autoreleasePoolPop(v7);
  if (atHomeLevel != a3)
  {
    -[HMDHome residentDeviceManager](v8, "residentDeviceManager");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v15, "atHomeLevelChanged:", a3);

    -[HMDHome homeManager](v8, "homeManager");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHome uuid](v8, "uuid");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v16, "atHomeLevelChanged:formerLevel:home:", a3, atHomeLevel, v17);

  }
}

- (int64_t)homeLocation
{
  int *v3;
  int64_t v4;

  os_unfair_recursive_lock_lock_with_options();
  if (self->_overrideHomeLocation)
    v3 = &OBJC_IVAR___HMDHome__overriddenHomeLocation;
  else
    v3 = &OBJC_IVAR___HMDHome__homeLocation;
  v4 = *(int64_t *)((char *)&self->super.super.isa + *v3);
  os_unfair_recursive_lock_unlock();
  return v4;
}

- (BOOL)hasReachableAccessories
{
  return -[HMDHome reachableAccessoriesCount](self, "reachableAccessoriesCount") > 0;
}

- (void)_handleHomeLocationChange:(int64_t)a3 previousLocation:(int64_t)a4
{
  void *v7;
  HMDHome *v8;
  NSObject *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  uint64_t v19;
  HMDHome *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  _BYTE v27[12];
  __int16 v28;
  void *v29;
  __int16 v30;
  void *v31;
  __int16 v32;
  void *v33;
  __int16 v34;
  void *v35;
  _QWORD v36[2];

  v36[1] = *MEMORY[0x24BDAC8D0];
  v7 = (void *)MEMORY[0x227676638](self, a2);
  v8 = self;
  HMFGetOSLogHandle();
  v9 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHome name](v8, "name");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHome shortDescription](v8, "shortDescription");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    HMStringFromHomeLocation();
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    HMStringFromHomeLocation();
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)v27 = 138544386;
    *(_QWORD *)&v27[4] = v10;
    v28 = 2112;
    v29 = v11;
    v30 = 2112;
    v31 = v12;
    v32 = 2112;
    v33 = v13;
    v34 = 2112;
    v35 = v14;
    _os_log_impl(&dword_2218F0000, v9, OS_LOG_TYPE_INFO, "%{public}@Location status for home %@/%@ changing from %@ to %@", v27, 0x34u);

  }
  objc_autoreleasePoolPop(v7);
  -[HMDHome notificationCenter](v8, "notificationCenter");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v15, "postNotificationName:object:", CFSTR("HMDHomeLocationChangedNotification"), v8);

  -[HMDHome homeManager](v8, "homeManager");
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHome uuid](v8, "uuid");
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v16, "updateGenerationCounterWithReason:sourceUUID:shouldNotifyClients:", CFSTR("HomeLocationChanged"), v17, 0);

  v18 = (void *)MEMORY[0x24BE3F1B0];
  v19 = *MEMORY[0x24BDD5E18];
  v20 = v8;
  -[HMDHome uuid](v20, "uuid");
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  v36[0] = *MEMORY[0x24BDD5E28];
  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithInteger:", a3);
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  *(_QWORD *)v27 = v22;
  objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v27, v36, 1);
  v23 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v18, "homeLocationAuthorizedAndEntitledMessageWithName:target:messagePayload:", v19, v21, v23);
  v24 = (void *)objc_claimAutoreleasedReturnValue();

  -[HMDHome msgDispatcher](v20, "msgDispatcher");
  v25 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v25, "sendMessage:completionHandler:", v24, 0);
  if (a3 == 1)
  {
    -[HMDHome presenceFeeder](v20, "presenceFeeder");
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v26, "notifyDidArriveHome");
LABEL_10:

    return;
  }
  if (a3 == 3 && a4 != 2 || a3 == 2 && a4 != 3)
  {
    -[HMDHome presenceFeeder](v20, "presenceFeeder");
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v26, "notifyDidLeaveHome");
    goto LABEL_10;
  }
}

- (void)setHomeLocation:(int64_t)a3
{
  _BOOL4 v5;
  int64_t homeLocation;
  uint64_t v7;
  void *v8;
  HMDHome *v9;
  NSObject *v10;
  void *v11;
  const __CFString *v12;
  void *v13;
  void *v14;
  int v15;
  void *v16;
  __int16 v17;
  const __CFString *v18;
  __int16 v19;
  void *v20;
  __int16 v21;
  void *v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  os_unfair_recursive_lock_lock_with_options();
  v5 = 0;
  homeLocation = self->_homeLocation;
  if (homeLocation != a3)
  {
    self->_homeLocation = a3;
    v5 = !self->_overrideHomeLocation;
  }
  v7 = os_unfair_recursive_lock_unlock();
  v8 = (void *)MEMORY[0x227676638](v7);
  v9 = self;
  HMFGetOSLogHandle();
  v10 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    if (v5)
      v12 = CFSTR("Updated");
    else
      v12 = CFSTR("Did not update");
    HMStringFromHomeLocation();
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    HMStringFromHomeLocation();
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    v15 = 138544130;
    v16 = v11;
    v17 = 2112;
    v18 = v12;
    v19 = 2112;
    v20 = v13;
    v21 = 2112;
    v22 = v14;
    _os_log_impl(&dword_2218F0000, v10, OS_LOG_TYPE_INFO, "%{public}@%@ home location from %@ to %@", (uint8_t *)&v15, 0x2Au);

  }
  objc_autoreleasePoolPop(v8);
  if (v5)
    -[HMDHome _handleHomeLocationChange:previousLocation:](v9, "_handleHomeLocationChange:previousLocation:", a3, homeLocation);
}

- (void)updateHomeLocationForPairing
{
  NSObject *v3;
  _QWORD block[5];

  -[HMDHome workQueue](self, "workQueue");
  v3 = objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x24BDAC760];
  block[1] = 3221225472;
  block[2] = __39__HMDHome_updateHomeLocationForPairing__block_invoke;
  block[3] = &unk_24E79C240;
  block[4] = self;
  dispatch_async(v3, block);

}

- (void)matterAccessoryBecameReachable
{
  NSObject *v3;
  _QWORD block[5];

  -[HMDHome workQueue](self, "workQueue");
  v3 = objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x24BDAC760];
  block[1] = 3221225472;
  block[2] = __41__HMDHome_matterAccessoryBecameReachable__block_invoke;
  block[3] = &unk_24E79C240;
  block[4] = self;
  dispatch_async(v3, block);

}

- (void)updateHomeLocation
{
  NSObject *v3;
  _QWORD block[5];

  -[HMDHome workQueue](self, "workQueue");
  v3 = objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x24BDAC760];
  block[1] = 3221225472;
  block[2] = __29__HMDHome_updateHomeLocation__block_invoke;
  block[3] = &unk_24E79C240;
  block[4] = self;
  dispatch_async(v3, block);

}

- (void)_updateHomeLocation
{
  void *v3;
  void *v4;
  uint64_t v5;
  void *v6;
  HMDHome *v7;
  NSObject *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  uint64_t v14;
  void *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  HMDHome *v21;
  NSObject *v22;
  void *v23;
  void *v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  void *v28;
  uint8_t buf[4];
  void *v30;
  __int16 v31;
  void *v32;
  __int16 v33;
  void *v34;
  __int16 v35;
  uint64_t v36;
  __int16 v37;
  void *v38;
  uint64_t v39;

  v39 = *MEMORY[0x24BDAC8D0];
  -[HMDHome homeLocationHandler](self, "homeLocationHandler");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  if (!objc_msgSend(v3, "regionStateAtHome"))
  {

    goto LABEL_8;
  }
  -[HMDHome homeLocationHandler](self, "homeLocationHandler");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v4, "regionStateNearbyHome");

  if (!v5)
  {
LABEL_8:
    v20 = (void *)MEMORY[0x227676638]();
    v21 = self;
    HMFGetOSLogHandle();
    v22 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v22, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v23 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v30 = v23;
      _os_log_impl(&dword_2218F0000, v22, OS_LOG_TYPE_INFO, "%{public}@No reachable accessories found and not all regions are determined. Setting Home location to unknown & home level to Not at Home.", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v20);
    v19 = 0;
    v18 = 1;
    goto LABEL_11;
  }
  v6 = (void *)MEMORY[0x227676638]();
  v7 = self;
  HMFGetOSLogHandle();
  v8 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHome homeLocationHandler](v7, "homeLocationHandler");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "regionStateAtHome");
    HMDRegionStateString();
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHome homeLocationHandler](v7, "homeLocationHandler");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "regionStateNearbyHome");
    HMDRegionStateString();
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    v14 = -[HMDHome reachableAccessoriesCount](v7, "reachableAccessoriesCount");
    HMFBooleanToString();
    v28 = v6;
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138544386;
    v30 = v9;
    v31 = 2112;
    v32 = v11;
    v33 = 2112;
    v34 = v13;
    v35 = 2048;
    v36 = v14;
    v37 = 2112;
    v38 = v15;
    _os_log_impl(&dword_2218F0000, v8, OS_LOG_TYPE_INFO, "%{public}@RegionStateAtHome : %@, RegionStateNearbyHome : %@, reachableAccessoriesCount : %lu/%@", buf, 0x34u);

    v6 = v28;
  }

  objc_autoreleasePoolPop(v6);
  -[HMDHome homeLocationHandler](v7, "homeLocationHandler");
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  v17 = objc_msgSend(v16, "regionStateAtHome");

  if (v17 == 1)
  {
    v18 = 2;
    v19 = 1;
  }
  else
  {
    -[HMDHome homeLocationHandler](v7, "homeLocationHandler");
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    v25 = objc_msgSend(v24, "regionStateNearbyHome");

    if (v25 == 1)
    {
      v18 = 1;
      v19 = 3;
    }
    else
    {
      -[HMDHome homeLocationHandler](v7, "homeLocationHandler");
      v26 = (void *)objc_claimAutoreleasedReturnValue();
      v27 = objc_msgSend(v26, "regionStateNearbyHome");

      v18 = 1;
      if (v27 != 2)
        goto LABEL_12;
      v19 = 2;
    }
  }
LABEL_11:
  -[HMDHome setHomeLocation:](self, "setHomeLocation:", v19);
LABEL_12:
  -[HMDHome setAtHomeLevel:](self, "setAtHomeLevel:", v18);
}

- (void)_handleHomeLocationUpdateFromSharedAdmin:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  id v7;
  void *v8;
  unint64_t v9;
  int v10;
  void *v11;
  HMDHome *v12;
  NSObject *v13;
  _BOOL4 v14;
  void *v15;
  void *v16;
  const char *v17;
  void *v18;
  HMDHome *v19;
  NSObject *v20;
  void *v21;
  void *v22;
  void *v23;
  id v24;
  uint8_t buf[4];
  void *v26;
  __int16 v27;
  id v28;
  __int16 v29;
  void *v30;
  uint64_t v31;

  v31 = *MEMORY[0x24BDAC8D0];
  v4 = a3;
  objc_msgSend(v4, "dataForKey:", CFSTR("kHomeLocationDataKey"));
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  if (v5)
  {
    v24 = 0;
    objc_msgSend(MEMORY[0x24BDD1620], "unarchivedObjectOfClass:fromData:error:", objc_opt_class(), v5, &v24);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v7 = v24;
    if (!v6)
    {
      v18 = (void *)MEMORY[0x227676638]();
      v19 = self;
      HMFGetOSLogHandle();
      v20 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v21 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        v26 = v21;
        v27 = 2112;
        v28 = v7;
        _os_log_impl(&dword_2218F0000, v20, OS_LOG_TYPE_ERROR, "%{public}@Failed to unarchive location from data: %@", buf, 0x16u);

      }
      objc_autoreleasePoolPop(v18);
      goto LABEL_13;
    }
    objc_msgSend(v4, "numberForKey:", CFSTR("HMD.LOC.SRC"));
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = (int)objc_msgSend(v8, "intValue");

    v10 = isInternalBuild();
    v11 = (void *)MEMORY[0x227676638]();
    v12 = self;
    HMFGetOSLogHandle();
    v13 = objc_claimAutoreleasedReturnValue();
    v14 = os_log_type_enabled(v13, OS_LOG_TYPE_INFO);
    if (v10)
    {
      if (v14)
      {
        HMFGetLogIdentifier();
        v15 = (void *)objc_claimAutoreleasedReturnValue();
        HMDHomeLocationSourceToString(v9);
        v16 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543874;
        v26 = v15;
        v27 = 2112;
        v28 = v6;
        v29 = 2112;
        v30 = v16;
        v17 = "%{public}@Received new home location from shared admin: %@, source : %@";
LABEL_11:
        _os_log_impl(&dword_2218F0000, v13, OS_LOG_TYPE_INFO, v17, buf, 0x20u);

      }
    }
    else if (v14)
    {
      HMFGetLogIdentifier();
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      HMDHomeLocationSourceToString(v9);
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543875;
      v26 = v15;
      v27 = 2117;
      v28 = v6;
      v29 = 2112;
      v30 = v16;
      v17 = "%{public}@Received new home location from shared admin: %{sensitive}@, source : %@";
      goto LABEL_11;
    }

    objc_autoreleasePoolPop(v11);
    -[HMDHome homeLocationHandler](v12, "homeLocationHandler");
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDBCE60], "date");
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v22, "runTransactionWithLocation:updatedTime:source:", v6, v23, v9);

LABEL_13:
  }

}

- (BOOL)isAutomaticSoftwareUpdateEnabled
{
  os_unfair_recursive_lock_lock_with_options();
  LOBYTE(self) = self->_automaticSoftwareUpdateEnabled;
  os_unfair_recursive_lock_unlock();
  return (char)self;
}

- (void)setAutomaticSoftwareUpdateEnabled:(BOOL)a3
{
  _BOOL4 v3;
  uint64_t v5;
  void *v6;
  HMDHome *v7;
  NSObject *v8;
  uint64_t v9;
  void *v10;
  const __CFString *v11;
  int v12;
  uint64_t v13;
  __int16 v14;
  const __CFString *v15;
  uint64_t v16;

  v3 = a3;
  v16 = *MEMORY[0x24BDAC8D0];
  os_unfair_recursive_lock_lock_with_options();
  if (self->_automaticSoftwareUpdateEnabled == v3)
  {
    os_unfair_recursive_lock_unlock();
  }
  else
  {
    self->_automaticSoftwareUpdateEnabled = v3;
    v5 = os_unfair_recursive_lock_unlock();
    v6 = (void *)MEMORY[0x227676638](v5);
    v7 = self;
    HMFGetOSLogHandle();
    v8 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      HMFGetLogIdentifier();
      v9 = objc_claimAutoreleasedReturnValue();
      v10 = (void *)v9;
      v11 = CFSTR("disabled");
      if (v3)
        v11 = CFSTR("enabled");
      v12 = 138543618;
      v13 = v9;
      v14 = 2112;
      v15 = v11;
      _os_log_impl(&dword_2218F0000, v8, OS_LOG_TYPE_DEFAULT, "%{public}@Automatic software updates %@", (uint8_t *)&v12, 0x16u);

    }
    objc_autoreleasePoolPop(v6);
    -[HMDHome _reevaluateAccessoryInfoWithBadgeRefresh:](v7, "_reevaluateAccessoryInfoWithBadgeRefresh:", 1);
  }
}

- (void)_handleUpdateAutomaticSoftwareUpdate:(id)a3
{
  id v4;
  void *v5;
  HMDHome *v6;
  NSObject *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  void *v12;
  HMDHome *v13;
  NSObject *v14;
  _BOOL4 v15;
  void *v16;
  void *v17;
  void (**v18)(_QWORD, _QWORD, _QWORD);
  void *v19;
  HMDHomeSettingsModel *v20;
  void *v21;
  void *v22;
  void *v23;
  HMDHomeSettingsModel *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  HMDHome *v30;
  NSObject *v31;
  void *v32;
  void *v33;
  void (**v34)(_QWORD, _QWORD, _QWORD);
  void *v35;
  void *v36;
  void *v37;
  char v38;
  uint8_t buf[4];
  void *v40;
  __int16 v41;
  void *v42;
  uint64_t v43;

  v43 = *MEMORY[0x24BDAC8D0];
  v4 = a3;
  v5 = (void *)MEMORY[0x227676638]();
  v6 = self;
  HMFGetOSLogHandle();
  v7 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543362;
    v40 = v8;
    _os_log_impl(&dword_2218F0000, v7, OS_LOG_TYPE_INFO, "%{public}@Handling update automatic software update message", buf, 0xCu);

  }
  objc_autoreleasePoolPop(v5);
  v38 = 0;
  v9 = objc_msgSend(v4, "BOOLForKey:keyPresent:", CFSTR("kEnabledKey"), &v38);
  if (v38)
  {
    v10 = v9;
    v11 = -[HMDHome isAutomaticSoftwareUpdateEnabled](v6, "isAutomaticSoftwareUpdateEnabled");
    v12 = (void *)MEMORY[0x227676638]();
    v13 = v6;
    HMFGetOSLogHandle();
    v14 = objc_claimAutoreleasedReturnValue();
    v15 = os_log_type_enabled(v14, OS_LOG_TYPE_INFO);
    if ((_DWORD)v10 != v11)
    {
      if (v15)
      {
        HMFGetLogIdentifier();
        v16 = (void *)objc_claimAutoreleasedReturnValue();
        HMFBooleanToString();
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        v40 = v16;
        v41 = 2112;
        v42 = v17;
        _os_log_impl(&dword_2218F0000, v14, OS_LOG_TYPE_INFO, "%{public}@Updating automatic software update to: %@", buf, 0x16u);

      }
      objc_autoreleasePoolPop(v12);
      +[HMDSoftwareUpdateAutomaticUpdateToggledEvent eventWithAutomaticUpdateEnabled:](HMDSoftwareUpdateAutomaticUpdateToggledEvent, "eventWithAutomaticUpdateEnabled:", v10);
      v18 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
      -[HMDHome logEventSubmitter](v13, "logEventSubmitter");
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v19, "submitLogEvent:", v18);

      v20 = [HMDHomeSettingsModel alloc];
      -[HMDHome uuid](v13, "uuid");
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      +[HMDHomeSettingsModel modelIDForHomeUUID:](HMDHomeSettingsModel, "modelIDForHomeUUID:", v21);
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      -[HMDHome uuid](v13, "uuid");
      v23 = (void *)objc_claimAutoreleasedReturnValue();
      v24 = -[HMDBackingStoreModelObject initWithObjectChangeType:uuid:parentUUID:](v20, "initWithObjectChangeType:uuid:parentUUID:", 2, v22, v23);

      objc_msgSend(MEMORY[0x24BDD16E0], "numberWithBool:", v10);
      v25 = (void *)objc_claimAutoreleasedReturnValue();
      -[HMDHomeSettingsModel setAutomaticSoftwareUpdateEnabled:](v24, "setAutomaticSoftwareUpdateEnabled:", v25);

      -[HMDHome backingStore](v13, "backingStore");
      v26 = (void *)objc_claimAutoreleasedReturnValue();
      +[HMDBackingStoreTransactionOptions defaultXPCOptions](HMDBackingStoreTransactionOptions, "defaultXPCOptions");
      v27 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v26, "transaction:options:", CFSTR("Update Automatic Software Update"), v27);
      v28 = (void *)objc_claimAutoreleasedReturnValue();

      objc_msgSend(v28, "add:withMessage:", v24, v4);
      objc_msgSend(v28, "run");

      goto LABEL_16;
    }
    if (v15)
    {
      HMFGetLogIdentifier();
      v35 = (void *)objc_claimAutoreleasedReturnValue();
      HMFBooleanToString();
      v36 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v40 = v35;
      v41 = 2112;
      v42 = v36;
      _os_log_impl(&dword_2218F0000, v14, OS_LOG_TYPE_INFO, "%{public}@Not changing the setting because it is already set to: %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v12);
    objc_msgSend(v4, "responseHandler");
    v37 = (void *)objc_claimAutoreleasedReturnValue();

    if (v37)
    {
      objc_msgSend(v4, "responseHandler");
      v18 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
      v18[2](v18, 0, 0);
      goto LABEL_16;
    }
  }
  else
  {
    v29 = (void *)MEMORY[0x227676638](v9);
    v30 = v6;
    HMFGetOSLogHandle();
    v31 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v32 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v40 = v32;
      _os_log_impl(&dword_2218F0000, v31, OS_LOG_TYPE_ERROR, "%{public}@Client request missing required key", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v29);
    objc_msgSend(v4, "responseHandler");
    v33 = (void *)objc_claimAutoreleasedReturnValue();

    if (v33)
    {
      objc_msgSend(MEMORY[0x24BDD1540], "hmErrorWithCode:", 27);
      v18 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "responseHandler");
      v34 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
      v34[2](v34, v18, 0);

LABEL_16:
    }
  }

}

- (BOOL)isAutomaticThirdPartyAccessorySoftwareUpdateEnabled
{
  os_unfair_recursive_lock_lock_with_options();
  LOBYTE(self) = self->_automaticThirdPartyAccessorySoftwareUpdateEnabled;
  os_unfair_recursive_lock_unlock();
  return (char)self;
}

- (void)setAutomaticThirdPartyAccessorySoftwareUpdateEnabled:(BOOL)a3
{
  _BOOL8 v3;
  uint64_t v5;
  void *v6;
  HMDHome *v7;
  NSObject *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  uint64_t v16;
  void *v17;
  uint8_t buf[4];
  void *v19;
  __int16 v20;
  void *v21;
  uint64_t v22;

  v3 = a3;
  v22 = *MEMORY[0x24BDAC8D0];
  os_unfair_recursive_lock_lock_with_options();
  if (self->_automaticThirdPartyAccessorySoftwareUpdateEnabled == v3)
  {
    os_unfair_recursive_lock_unlock();
  }
  else
  {
    self->_automaticThirdPartyAccessorySoftwareUpdateEnabled = v3;
    v5 = os_unfair_recursive_lock_unlock();
    v6 = (void *)MEMORY[0x227676638](v5);
    v7 = self;
    HMFGetOSLogHandle();
    v8 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      HMFGetLogIdentifier();
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      HMFEnabledStatusToString();
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v19 = v9;
      v20 = 2112;
      v21 = v10;
      _os_log_impl(&dword_2218F0000, v8, OS_LOG_TYPE_DEFAULT, "%{public}@Setting Automatic third-party accessory software updates to: %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v6);
    -[HMDHome notificationCenter](v7, "notificationCenter");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD16E0], "numberWithBool:", v3, CFSTR("kEnabledKey"));
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    v17 = v12;
    objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", &v17, &v16, 1);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "postNotificationName:object:userInfo:", CFSTR("HMDHomeAutomaticThirdPartyUpdateEnabledChangedNotification"), v7, v13);

    -[HMDHome logEventSubmitter](v7, "logEventSubmitter");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    +[HMDAccessorySoftwareUpdateAutoThirdPartyToggledEvent eventWithHome:](HMDAccessorySoftwareUpdateAutoThirdPartyToggledEvent, "eventWithHome:", v7);
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v14, "submitLogEvent:", v15);

    -[HMDHome _reevaluateAccessoryInfoWithBadgeRefresh:](v7, "_reevaluateAccessoryInfoWithBadgeRefresh:", 1);
  }
}

- (void)_handleUpdateAutomaticThirdPartyAccessorySoftwareUpdate:(id)a3
{
  id v4;
  uint64_t v5;
  uint64_t v6;
  HMDHomeSettingsModel *v7;
  void *v8;
  void *v9;
  void *v10;
  HMDHomeSettingsModel *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  HMDHome *v17;
  NSObject *v18;
  void *v19;
  void *v20;
  void (**v21)(_QWORD, _QWORD, _QWORD);
  void *v22;
  char v23;
  uint8_t buf[4];
  void *v25;
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  v4 = a3;
  v23 = 0;
  v5 = objc_msgSend(v4, "BOOLForKey:keyPresent:", CFSTR("kEnabledKey"), &v23);
  if (v23)
  {
    v6 = v5;
    if ((_DWORD)v5 != -[HMDHome isAutomaticThirdPartyAccessorySoftwareUpdateEnabled](self, "isAutomaticThirdPartyAccessorySoftwareUpdateEnabled"))
    {
      v7 = [HMDHomeSettingsModel alloc];
      -[HMDHome uuid](self, "uuid");
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      +[HMDHomeSettingsModel modelIDForHomeUUID:](HMDHomeSettingsModel, "modelIDForHomeUUID:", v8);
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      -[HMDHome uuid](self, "uuid");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      v11 = -[HMDBackingStoreModelObject initWithObjectChangeType:uuid:parentUUID:](v7, "initWithObjectChangeType:uuid:parentUUID:", 2, v9, v10);

      objc_msgSend(MEMORY[0x24BDD16E0], "numberWithBool:", v6);
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      -[HMDHomeSettingsModel setAutomaticThirdPartyAccessorySoftwareUpdateEnabled:](v11, "setAutomaticThirdPartyAccessorySoftwareUpdateEnabled:", v12);

      -[HMDHome backingStore](self, "backingStore");
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      +[HMDBackingStoreTransactionOptions defaultXPCOptions](HMDBackingStoreTransactionOptions, "defaultXPCOptions");
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v13, "transaction:options:", CFSTR("Update Automatic Accessory Firmware Update"), v14);
      v15 = (void *)objc_claimAutoreleasedReturnValue();

      objc_msgSend(v15, "add:withMessage:", v11, v4);
      objc_msgSend(v15, "run");

LABEL_10:
      goto LABEL_11;
    }
    objc_msgSend(v4, "responseHandler");
    v22 = (void *)objc_claimAutoreleasedReturnValue();

    if (v22)
    {
      objc_msgSend(v4, "responseHandler");
      v11 = (HMDHomeSettingsModel *)objc_claimAutoreleasedReturnValue();
      (*(void (**)(HMDHomeSettingsModel *, _QWORD, _QWORD))&v11->super.super._bsoDataVersionOverride)(v11, 0, 0);
      goto LABEL_10;
    }
  }
  else
  {
    v16 = (void *)MEMORY[0x227676638](v5);
    v17 = self;
    HMFGetOSLogHandle();
    v18 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v25 = v19;
      _os_log_impl(&dword_2218F0000, v18, OS_LOG_TYPE_ERROR, "%{public}@Client request missing required key", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v16);
    objc_msgSend(v4, "responseHandler");
    v20 = (void *)objc_claimAutoreleasedReturnValue();

    if (v20)
    {
      objc_msgSend(MEMORY[0x24BDD1540], "hmErrorWithCode:", 27);
      v11 = (HMDHomeSettingsModel *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "responseHandler");
      v21 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
      ((void (**)(_QWORD, HMDHomeSettingsModel *, _QWORD))v21)[2](v21, v11, 0);

      goto LABEL_10;
    }
  }
LABEL_11:

}

- (void)_handleQueryResidentReachabilityForAccessories:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t i;
  uint64_t v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  HMDHome *v21;
  NSObject *v22;
  void *v23;
  void *v24;
  void *v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  const __CFString *v30;
  void *v31;
  _QWORD v32[2];
  _QWORD v33[2];
  uint8_t v34[128];
  uint8_t buf[4];
  void *v36;
  uint64_t v37;

  v37 = *MEMORY[0x24BDAC8D0];
  v4 = a3;
  objc_msgSend(v4, "messagePayload");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "hmf_arrayForKey:", CFSTR("kAccessoriesUUIDKey"));
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = v6;
  if (v6)
  {
    v24 = v5;
    v25 = v4;
    objc_msgSend(MEMORY[0x24BDBCEB8], "arrayWithCapacity:", objc_msgSend(v6, "count"));
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v26 = 0u;
    v27 = 0u;
    v28 = 0u;
    v29 = 0u;
    v9 = v7;
    v10 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v26, v34, 16);
    if (v10)
    {
      v11 = v10;
      v12 = *(_QWORD *)v27;
      do
      {
        for (i = 0; i != v11; ++i)
        {
          if (*(_QWORD *)v27 != v12)
            objc_enumerationMutation(v9);
          v14 = *(_QWORD *)(*((_QWORD *)&v26 + 1) + 8 * i);
          v15 = (void *)objc_msgSend(objc_alloc(MEMORY[0x24BDD1880]), "initWithUUIDString:", v14);
          -[HMDHome accessoryWithUUID:](self, "accessoryWithUUID:", v15);
          v16 = (void *)objc_claimAutoreleasedReturnValue();

          if (v16)
          {
            v32[0] = CFSTR("kAccessoryUUID");
            v32[1] = CFSTR("kAccessoryIsReachableKey");
            v33[0] = v14;
            objc_msgSend(MEMORY[0x24BDD16E0], "numberWithBool:", objc_msgSend(v16, "isReachable"));
            v17 = (void *)objc_claimAutoreleasedReturnValue();
            v33[1] = v17;
            objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v33, v32, 2);
            v18 = (void *)objc_claimAutoreleasedReturnValue();

            objc_msgSend(v8, "addObject:", v18);
          }

        }
        v11 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v26, v34, 16);
      }
      while (v11);
    }

    v30 = CFSTR("kAccessoriesInfoDictionaryKey");
    v31 = v8;
    objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", &v31, &v30, 1);
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    v4 = v25;
    objc_msgSend(v25, "respondWithPayload:", v19);

    v5 = v24;
  }
  else
  {
    v20 = (void *)MEMORY[0x227676638]();
    v21 = self;
    HMFGetOSLogHandle();
    v22 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v23 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v36 = v23;
      _os_log_impl(&dword_2218F0000, v22, OS_LOG_TYPE_ERROR, "%{public}@Query reachability request is missing accessory UUID in payload", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v20);
    objc_msgSend(MEMORY[0x24BDD1540], "hmfErrorWithCode:", 8);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "respondWithError:", v8);
  }

}

- (void)queryPrimaryResidentReachabilityForAccessories:(id)a3 completion:(id)a4
{
  id v6;
  void (**v7)(_QWORD, void *);
  _BOOL4 v8;
  void *v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t i;
  void *v15;
  void *v16;
  void *v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t j;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void (**v31)(_QWORD, void *);
  _QWORD v32[5];
  void (**v33)(_QWORD, void *);
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  const __CFString *v42;
  void *v43;
  _BYTE v44[128];
  const __CFString *v45;
  void *v46;
  _BYTE v47[128];
  uint64_t v48;

  v48 = *MEMORY[0x24BDAC8D0];
  v6 = a3;
  v7 = (void (**)(_QWORD, void *))a4;
  v8 = -[HMDHome isCurrentDeviceConfirmedPrimaryResident](self, "isCurrentDeviceConfirmedPrimaryResident");
  objc_msgSend(MEMORY[0x24BDBCEB8], "arrayWithCapacity:", objc_msgSend(v6, "count"));
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  if (v8)
  {
    v31 = v7;
    v40 = 0u;
    v41 = 0u;
    v38 = 0u;
    v39 = 0u;
    v10 = v6;
    v11 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v38, v47, 16);
    if (v11)
    {
      v12 = v11;
      v13 = *(_QWORD *)v39;
      do
      {
        for (i = 0; i != v12; ++i)
        {
          if (*(_QWORD *)v39 != v13)
            objc_enumerationMutation(v10);
          v15 = *(void **)(*((_QWORD *)&v38 + 1) + 8 * i);
          v45 = CFSTR("kAccessoryIsReachableKey");
          objc_msgSend(MEMORY[0x24BDD16E0], "numberWithBool:", objc_msgSend(v15, "isReachable", v31));
          v16 = (void *)objc_claimAutoreleasedReturnValue();
          v46 = v16;
          objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", &v46, &v45, 1);
          v17 = (void *)objc_claimAutoreleasedReturnValue();

          objc_msgSend(v9, "addObject:", v17);
        }
        v12 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v38, v47, 16);
      }
      while (v12);
    }

    v7 = v31;
    v31[2](v31, v9);
  }
  else
  {
    v36 = 0u;
    v37 = 0u;
    v34 = 0u;
    v35 = 0u;
    v18 = v6;
    v19 = objc_msgSend(v18, "countByEnumeratingWithState:objects:count:", &v34, v44, 16);
    if (v19)
    {
      v20 = v19;
      v21 = *(_QWORD *)v35;
      do
      {
        for (j = 0; j != v20; ++j)
        {
          if (*(_QWORD *)v35 != v21)
            objc_enumerationMutation(v18);
          objc_msgSend(*(id *)(*((_QWORD *)&v34 + 1) + 8 * j), "uuid");
          v23 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v23, "UUIDString");
          v24 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v9, "addObject:", v24);

        }
        v20 = objc_msgSend(v18, "countByEnumeratingWithState:objects:count:", &v34, v44, 16);
      }
      while (v20);
    }

    v42 = CFSTR("kAccessoriesUUIDKey");
    v43 = v9;
    objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", &v43, &v42, 1);
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    v26 = (void *)MEMORY[0x24BE3F1B0];
    objc_msgSend(MEMORY[0x24BDD1880], "UUID");
    v27 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v26, "messageWithName:identifier:messagePayload:", CFSTR("HMDHomeQueryResidentReachabilityForAccessoriesMessageKey"), v27, v25);
    v28 = (void *)objc_claimAutoreleasedReturnValue();

    v32[0] = MEMORY[0x24BDAC760];
    v32[1] = 3221225472;
    v32[2] = __69__HMDHome_queryPrimaryResidentReachabilityForAccessories_completion___block_invoke;
    v32[3] = &unk_24E7961A0;
    v32[4] = self;
    v33 = v7;
    objc_msgSend(v28, "setResponseHandler:", v32);
    -[HMDHome uuid](self, "uuid");
    v29 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHome workQueue](self, "workQueue");
    v30 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHome redispatchToResidentMessage:target:responseQueue:](self, "redispatchToResidentMessage:target:responseQueue:", v28, v29, v30);

  }
}

- (int64_t)minimumMediaUserPrivilege
{
  int64_t minimumMediaUserPrivilege;

  os_unfair_recursive_lock_lock_with_options();
  minimumMediaUserPrivilege = self->_minimumMediaUserPrivilege;
  os_unfair_recursive_lock_unlock();
  return minimumMediaUserPrivilege;
}

- (void)setMinimumMediaUserPrivilege:(int64_t)a3
{
  uint64_t v5;
  void *v6;
  HMDHome *v7;
  NSObject *v8;
  void *v9;
  void *v10;
  NSObject *workQueue;
  _QWORD v12[6];
  uint8_t buf[4];
  void *v14;
  __int16 v15;
  void *v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  os_unfair_recursive_lock_lock_with_options();
  if (self->_minimumMediaUserPrivilege == a3)
  {
    os_unfair_recursive_lock_unlock();
  }
  else
  {
    self->_minimumMediaUserPrivilege = a3;
    v5 = os_unfair_recursive_lock_unlock();
    v6 = (void *)MEMORY[0x227676638](v5);
    v7 = self;
    HMFGetOSLogHandle();
    v8 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      HMUserPrivilegeToString();
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v14 = v9;
      v15 = 2112;
      v16 = v10;
      _os_log_impl(&dword_2218F0000, v8, OS_LOG_TYPE_INFO, "%{public}@Updated minimum user privilege to: %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v6);
    workQueue = v7->_workQueue;
    v12[0] = MEMORY[0x24BDAC760];
    v12[1] = 3221225472;
    v12[2] = __40__HMDHome_setMinimumMediaUserPrivilege___block_invoke;
    v12[3] = &unk_24E797C10;
    v12[4] = v7;
    v12[5] = a3;
    dispatch_async(workQueue, v12);
  }
}

- (void)_handleUpdateMinimumMediaUserPrivilege:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  uint64_t v7;
  void *v8;
  void (**v9)(_QWORD, _QWORD, _QWORD);
  void *v10;
  HMDHome *v11;
  NSObject *v12;
  void *v13;
  void *v14;
  void (**v15)(_QWORD, _QWORD, _QWORD);
  HMDHomeMediaSettingsModel *v16;
  void *v17;
  void *v18;
  void *v19;
  HMDHomeMediaSettingsModel *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  int v25;
  void *v26;
  uint64_t v27;

  v27 = *MEMORY[0x24BDAC8D0];
  v4 = a3;
  objc_msgSend(v4, "numberForKey:", CFSTR("kUserPrivilegeLevelKey"));
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = v5;
  if (v5)
  {
    v7 = objc_msgSend(v5, "integerValue");
    if (-[HMDHome minimumMediaUserPrivilege](self, "minimumMediaUserPrivilege") != v7)
    {
      v16 = [HMDHomeMediaSettingsModel alloc];
      -[HMDHome uuid](self, "uuid");
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      +[HMDHomeMediaSettingsModel modelIDForHomeUUID:](HMDHomeMediaSettingsModel, "modelIDForHomeUUID:", v17);
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      -[HMDHome uuid](self, "uuid");
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      v20 = -[HMDBackingStoreModelObject initWithObjectChangeType:uuid:parentUUID:](v16, "initWithObjectChangeType:uuid:parentUUID:", 2, v18, v19);

      objc_msgSend(MEMORY[0x24BDD16E0], "numberWithInteger:", v7);
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      -[HMDHomeMediaSettingsModel setMinimumMediaUserPrivilege:](v20, "setMinimumMediaUserPrivilege:", v21);

      -[HMDHome backingStore](self, "backingStore");
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      +[HMDBackingStoreTransactionOptions defaultXPCOptions](HMDBackingStoreTransactionOptions, "defaultXPCOptions");
      v23 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v22, "transaction:options:", CFSTR("Update Minimum User Privilege"), v23);
      v24 = (void *)objc_claimAutoreleasedReturnValue();

      objc_msgSend(v24, "add:withMessage:", v20, v4);
      objc_msgSend(v24, "run");

      goto LABEL_11;
    }
    objc_msgSend(v4, "responseHandler");
    v8 = (void *)objc_claimAutoreleasedReturnValue();

    if (v8)
    {
      objc_msgSend(v4, "responseHandler");
      v9 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
      v9[2](v9, 0, 0);
LABEL_9:

    }
  }
  else
  {
    v10 = (void *)MEMORY[0x227676638]();
    v11 = self;
    HMFGetOSLogHandle();
    v12 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      v25 = 138543362;
      v26 = v13;
      _os_log_impl(&dword_2218F0000, v12, OS_LOG_TYPE_ERROR, "%{public}@Client request missing required key", (uint8_t *)&v25, 0xCu);

    }
    objc_autoreleasePoolPop(v10);
    objc_msgSend(v4, "responseHandler");
    v14 = (void *)objc_claimAutoreleasedReturnValue();

    if (v14)
    {
      objc_msgSend(MEMORY[0x24BDD1540], "hmErrorWithCode:", 27);
      v9 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "responseHandler");
      v15 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
      v15[2](v15, v9, 0);

      goto LABEL_9;
    }
  }
LABEL_11:

}

- (BOOL)isMediaPeerToPeerEnabled
{
  os_unfair_recursive_lock_lock_with_options();
  LOBYTE(self) = self->_mediaPeerToPeerEnabled;
  os_unfair_recursive_lock_unlock();
  return (char)self;
}

- (void)setMediaPeerToPeerEnabled:(BOOL)a3
{
  os_unfair_recursive_lock_lock_with_options();
  self->_mediaPeerToPeerEnabled = a3;
  os_unfair_recursive_lock_unlock();
}

- (void)_handleUpdateMediaPeerToPeerEnabled:(id)a3
{
  id v4;
  uint64_t v5;
  uint64_t v6;
  HMDHomeMediaSettingsModel *v7;
  void *v8;
  void *v9;
  void *v10;
  HMDHomeMediaSettingsModel *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  HMDHome *v17;
  NSObject *v18;
  void *v19;
  void *v20;
  void (**v21)(_QWORD, _QWORD, _QWORD);
  void *v22;
  char v23;
  uint8_t buf[4];
  void *v25;
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  v4 = a3;
  v23 = 0;
  v5 = objc_msgSend(v4, "BOOLForKey:keyPresent:", CFSTR("kEnabledKey"), &v23);
  if (v23)
  {
    v6 = v5;
    if ((_DWORD)v5 != -[HMDHome isMediaPeerToPeerEnabled](self, "isMediaPeerToPeerEnabled"))
    {
      v7 = [HMDHomeMediaSettingsModel alloc];
      -[HMDHome uuid](self, "uuid");
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      +[HMDHomeMediaSettingsModel modelIDForHomeUUID:](HMDHomeMediaSettingsModel, "modelIDForHomeUUID:", v8);
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      -[HMDHome uuid](self, "uuid");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      v11 = -[HMDBackingStoreModelObject initWithObjectChangeType:uuid:parentUUID:](v7, "initWithObjectChangeType:uuid:parentUUID:", 2, v9, v10);

      objc_msgSend(MEMORY[0x24BDD16E0], "numberWithBool:", v6);
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      -[HMDHomeMediaSettingsModel setMediaPeerToPeerEnabled:](v11, "setMediaPeerToPeerEnabled:", v12);

      -[HMDHome backingStore](self, "backingStore");
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      +[HMDBackingStoreTransactionOptions defaultXPCOptions](HMDBackingStoreTransactionOptions, "defaultXPCOptions");
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v13, "transaction:options:", CFSTR("Update Media Peer-to-peer Enabled"), v14);
      v15 = (void *)objc_claimAutoreleasedReturnValue();

      objc_msgSend(v15, "add:withMessage:", v11, v4);
      objc_msgSend(v15, "run");

LABEL_10:
      goto LABEL_11;
    }
    objc_msgSend(v4, "responseHandler");
    v22 = (void *)objc_claimAutoreleasedReturnValue();

    if (v22)
    {
      objc_msgSend(v4, "responseHandler");
      v11 = (HMDHomeMediaSettingsModel *)objc_claimAutoreleasedReturnValue();
      (*(void (**)(HMDHomeMediaSettingsModel *, _QWORD, _QWORD))&v11->super.super._bsoDataVersionOverride)(v11, 0, 0);
      goto LABEL_10;
    }
  }
  else
  {
    v16 = (void *)MEMORY[0x227676638](v5);
    v17 = self;
    HMFGetOSLogHandle();
    v18 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v25 = v19;
      _os_log_impl(&dword_2218F0000, v18, OS_LOG_TYPE_ERROR, "%{public}@Client request missing required key", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v16);
    objc_msgSend(v4, "responseHandler");
    v20 = (void *)objc_claimAutoreleasedReturnValue();

    if (v20)
    {
      objc_msgSend(MEMORY[0x24BDD1540], "hmErrorWithCode:", 27);
      v11 = (HMDHomeMediaSettingsModel *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "responseHandler");
      v21 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
      ((void (**)(_QWORD, HMDHomeMediaSettingsModel *, _QWORD))v21)[2](v21, v11, 0);

      goto LABEL_10;
    }
  }
LABEL_11:

}

- (id)mediaPassword
{
  NSString *v3;

  os_unfair_recursive_lock_lock_with_options();
  v3 = self->_mediaPassword;
  os_unfair_recursive_lock_unlock();
  return v3;
}

- (void)setMediaPassword:(id)a3
{
  id v4;
  void *v5;
  uint64_t v6;
  void *v7;
  HMDHome *v8;
  NSObject *v9;
  void *v10;
  NSObject *workQueue;
  _QWORD v12[5];
  id v13;
  uint8_t buf[4];
  void *v15;
  __int16 v16;
  void *v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  v4 = a3;
  v5 = (void *)objc_msgSend(v4, "copy");
  os_unfair_recursive_lock_lock_with_options();
  if ((HMFEqualObjects() & 1) != 0)
  {
    os_unfair_recursive_lock_unlock();
  }
  else
  {
    objc_storeStrong((id *)&self->_mediaPassword, v5);
    v6 = os_unfair_recursive_lock_unlock();
    v7 = (void *)MEMORY[0x227676638](v6);
    v8 = self;
    HMFGetOSLogHandle();
    v9 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v15 = v10;
      v16 = 2112;
      v17 = v5;
      _os_log_impl(&dword_2218F0000, v9, OS_LOG_TYPE_INFO, "%{public}@Updated media password to: %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v7);
    workQueue = v8->_workQueue;
    v12[0] = MEMORY[0x24BDAC760];
    v12[1] = 3221225472;
    v12[2] = __28__HMDHome_setMediaPassword___block_invoke;
    v12[3] = &unk_24E79C268;
    v12[4] = v8;
    v13 = v5;
    dispatch_async(workQueue, v12);

  }
}

- (void)_handleUpdateMediaPassword:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  char v7;
  HMDHomeMediaSettingsModel *v8;
  HMDHomeMediaSettingsModel *v9;
  void *v10;
  int v11;
  void *v12;
  void *v13;
  HMDHome *v14;
  NSObject *v15;
  void *v16;
  void *v17;
  HMDHomeMediaSettingsModel *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  HMDHome *v26;
  NSObject *v27;
  void *v28;
  void *v29;
  void (**v30)(_QWORD, _QWORD, _QWORD);
  id v31;
  uint8_t buf[4];
  void *v33;
  __int16 v34;
  void *v35;
  __int16 v36;
  HMDHomeMediaSettingsModel *v37;
  uint64_t v38;

  v38 = *MEMORY[0x24BDAC8D0];
  v4 = a3;
  objc_msgSend(v4, "messagePayload");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "objectForKeyedSubscript:", *MEMORY[0x24BDD61A0]);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v6)
    goto LABEL_5;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    v13 = (void *)MEMORY[0x227676638]();
    v14 = self;
    HMFGetOSLogHandle();
    v15 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v33 = v16;
      v34 = 2112;
      v35 = v6;
      _os_log_impl(&dword_2218F0000, v15, OS_LOG_TYPE_ERROR, "%{public}@Invalid password: %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v13);
    objc_msgSend(v4, "responseHandler");
    v17 = (void *)objc_claimAutoreleasedReturnValue();

    if (!v17)
      goto LABEL_18;
    objc_msgSend(MEMORY[0x24BDD1540], "hmErrorWithCode:", 22);
    v9 = (HMDHomeMediaSettingsModel *)objc_claimAutoreleasedReturnValue();
LABEL_16:
    objc_msgSend(v4, "responseHandler");
    v30 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
    ((void (**)(_QWORD, HMDHomeMediaSettingsModel *, _QWORD))v30)[2](v30, v9, 0);

    goto LABEL_17;
  }
  v31 = 0;
  v7 = objc_msgSend(MEMORY[0x24BDD76B0], "isValidMediaPassword:error:", v6, &v31);
  v8 = (HMDHomeMediaSettingsModel *)v31;
  v9 = v8;
  if ((v7 & 1) == 0)
  {
    v25 = (void *)MEMORY[0x227676638]();
    v26 = self;
    HMFGetOSLogHandle();
    v27 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
    {
      HMFGetLogIdentifier();
      v28 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543874;
      v33 = v28;
      v34 = 2112;
      v35 = v6;
      v36 = 2112;
      v37 = v9;
      _os_log_impl(&dword_2218F0000, v27, OS_LOG_TYPE_DEFAULT, "%{public}@Failed to validate password, %@, with error: %@", buf, 0x20u);

    }
    objc_autoreleasePoolPop(v25);
    objc_msgSend(v4, "responseHandler");
    v29 = (void *)objc_claimAutoreleasedReturnValue();

    if (!v29)
      goto LABEL_17;
    goto LABEL_16;
  }

LABEL_5:
  -[HMDHome mediaPassword](self, "mediaPassword");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v11 = HMFEqualObjects();

  if (!v11)
  {
    v18 = [HMDHomeMediaSettingsModel alloc];
    -[HMDHome uuid](self, "uuid");
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    +[HMDHomeMediaSettingsModel modelIDForHomeUUID:](HMDHomeMediaSettingsModel, "modelIDForHomeUUID:", v19);
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHome uuid](self, "uuid");
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = -[HMDBackingStoreModelObject initWithObjectChangeType:uuid:parentUUID:](v18, "initWithObjectChangeType:uuid:parentUUID:", 2, v20, v21);

    -[HMDHomeMediaSettingsModel setMediaPassword:](v9, "setMediaPassword:", v6);
    -[HMDHome backingStore](self, "backingStore");
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    +[HMDBackingStoreTransactionOptions defaultXPCOptions](HMDBackingStoreTransactionOptions, "defaultXPCOptions");
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v22, "transaction:options:", CFSTR("Update Media Password"), v23);
    v24 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v24, "add:withMessage:", v9, v4);
    objc_msgSend(v24, "run");

    goto LABEL_17;
  }
  objc_msgSend(v4, "responseHandler");
  v12 = (void *)objc_claimAutoreleasedReturnValue();

  if (v12)
  {
    objc_msgSend(v4, "responseHandler");
    v9 = (HMDHomeMediaSettingsModel *)objc_claimAutoreleasedReturnValue();
    (*(void (**)(HMDHomeMediaSettingsModel *, _QWORD, _QWORD))&v9->super.super._bsoDataVersionOverride)(v9, 0, 0);
LABEL_17:

  }
LABEL_18:

}

- (void)updateAppData:(id)a3 identifierKey:(id)a4 lookup:(id)a5
{
  id v8;
  id v9;
  id v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  uint64_t v16;
  uint64_t i;
  void *v18;
  void *v19;
  void *v20;
  HMDHome *v21;
  NSObject *v22;
  void *v23;
  HMDHome *v24;
  id v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  uint64_t v35;
  void *v36;
  id obj;
  uint64_t v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  uint8_t buf[4];
  void *v44;
  __int16 v45;
  void *v46;
  __int16 v47;
  void *v48;
  __int16 v49;
  void *v50;
  _BYTE v51[128];
  uint64_t v52;

  v52 = *MEMORY[0x24BDAC8D0];
  v8 = a3;
  v9 = a4;
  v10 = a5;
  objc_msgSend(v8, "dictionary");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "hmf_dictionaryForKey:", CFSTR("com.apple.homekit-entitledclient.identifer"));
  v12 = (void *)objc_claimAutoreleasedReturnValue();

  v36 = v9;
  objc_msgSend(v12, "objectForKey:", v9);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  v14 = v13;
  if (v13 && objc_msgSend(v13, "count"))
  {
    v33 = v12;
    v34 = v8;
    v31 = (void *)objc_msgSend(v12, "mutableCopy");
    objc_msgSend(MEMORY[0x24BDBCEB8], "arrayWithCapacity:", objc_msgSend(v14, "count"));
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    v39 = 0u;
    v40 = 0u;
    v41 = 0u;
    v42 = 0u;
    v32 = v14;
    obj = v14;
    v38 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v39, v51, 16);
    if (v38)
    {
      v16 = *(_QWORD *)v40;
      v35 = *(_QWORD *)v40;
      do
      {
        for (i = 0; i != v38; ++i)
        {
          if (*(_QWORD *)v40 != v16)
            objc_enumerationMutation(obj);
          v18 = *(void **)(*((_QWORD *)&v39 + 1) + 8 * i);
          objc_msgSend(v10, "objectForKey:", v18);
          v19 = (void *)objc_claimAutoreleasedReturnValue();
          if (v19)
          {
            v20 = (void *)MEMORY[0x227676638]();
            v21 = self;
            HMFGetOSLogHandle();
            v22 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
            {
              HMFGetLogIdentifier();
              v23 = v15;
              v24 = self;
              v25 = v10;
              v26 = (void *)objc_claimAutoreleasedReturnValue();
              *(_DWORD *)buf = 138544130;
              v44 = v26;
              v45 = 2112;
              v46 = v36;
              v47 = 2112;
              v48 = v18;
              v49 = 2112;
              v50 = v19;
              _os_log_impl(&dword_2218F0000, v22, OS_LOG_TYPE_DEFAULT, "%{public}@Fixup of service uuid list %@ from legacy archive %@ -> %@", buf, 0x2Au);

              v10 = v25;
              self = v24;
              v15 = v23;
              v16 = v35;
            }

            objc_autoreleasePoolPop(v20);
            v27 = v15;
            v28 = v19;
          }
          else
          {
            v27 = v15;
            v28 = v18;
          }
          objc_msgSend(v27, "addObject:", v28);

        }
        v38 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v39, v51, 16);
      }
      while (v38);
    }

    v29 = (void *)objc_msgSend(v15, "copy");
    objc_msgSend(v31, "setObject:forKey:", v29, v36);

    v30 = (void *)objc_msgSend(v31, "copy");
    v8 = v34;
    objc_msgSend(v34, "setApplicationData:forIdentifier:", v30, CFSTR("com.apple.homekit-entitledclient.identifer"));

    v14 = v32;
    v12 = v33;
  }

}

- (void)fixupHomeAfterDecoding
{
  void *v3;
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  __objc2_class **p_superclass;
  uint64_t v9;
  id v10;
  void *v11;
  id v12;
  uint64_t v13;
  void *v14;
  BOOL v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  HMDHome *v28;
  NSObject *v29;
  void *v30;
  void *v31;
  __objc2_class **v32;
  id v33;
  uint64_t v34;
  void *v35;
  void *v36;
  HMDHome *v37;
  NSObject *v38;
  void *v39;
  void *v40;
  uint64_t v41;
  void *v42;
  void *v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t i;
  void *v48;
  void *v49;
  void *v50;
  void *v51;
  void *v52;
  void *v53;
  void *v54;
  void *v55;
  void *v56;
  void *v57;
  void *v58;
  void *v59;
  void *v60;
  void *v61;
  void *v62;
  void *v63;
  void *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t j;
  void *v69;
  void *v70;
  void *v71;
  void *v72;
  void *v73;
  void *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t k;
  __int128 v79;
  void *v80;
  void *v81;
  id v82;
  void *v83;
  uint64_t v84;
  uint64_t v85;
  void *v86;
  uint64_t v87;
  HMDHome *v88;
  id obj;
  uint64_t v90;
  void *v91;
  void *v92;
  void *v93;
  void *v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  _BYTE v111[128];
  _BYTE v112[128];
  void *v113;
  void *v114;
  uint8_t v115[128];
  uint8_t buf[4];
  void *v117;
  __int16 v118;
  void *v119;
  __int16 v120;
  void *v121;
  void *v122;
  _BYTE v123[128];
  uint64_t v124;

  v124 = *MEMORY[0x24BDAC8D0];
  +[HMDProcessInfo privateClientIdentifierSalt](HMDProcessInfo, "privateClientIdentifierSalt");
  v91 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x24BDBCED8], "dictionary");
  v94 = (void *)objc_claimAutoreleasedReturnValue();
  v88 = self;
  if (-[HMDHome isOwnerUser](self, "isOwnerUser"))
  {
    v109 = 0u;
    v110 = 0u;
    v107 = 0u;
    v108 = 0u;
    -[HMDHome accessories](self, "accessories");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v107, v123, 16);
    if (v4)
    {
      v6 = v4;
      v7 = *(_QWORD *)v108;
      p_superclass = HMDCameraMetricsSnapshotLogEvent.superclass;
      *(_QWORD *)&v5 = 138543874;
      v79 = v5;
      v83 = v3;
      v84 = *(_QWORD *)v108;
      do
      {
        v9 = 0;
        v85 = v6;
        do
        {
          if (*(_QWORD *)v108 != v7)
            objc_enumerationMutation(v3);
          v10 = *(id *)(*((_QWORD *)&v107 + 1) + 8 * v9);
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) != 0)
            v11 = v10;
          else
            v11 = 0;
          v12 = v11;

          objc_msgSend(v12, "bridge");
          v13 = objc_claimAutoreleasedReturnValue();
          v14 = (void *)v13;
          if (v12)
            v15 = v13 == 0;
          else
            v15 = 1;
          if (!v15)
          {
            objc_msgSend(v12, "uniqueIdentifier");
            v16 = (void *)objc_claimAutoreleasedReturnValue();

            if (v16)
            {
              v86 = v14;
              v87 = v9;
              v17 = (void *)MEMORY[0x24BDD1880];
              objc_msgSend(v14, "uuid");
              v18 = (void *)objc_claimAutoreleasedReturnValue();
              v19 = (void *)MEMORY[0x24BE1B998];
              objc_msgSend(v12, "uniqueIdentifier");
              v20 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v19, "instanceIDForUniqueIdentifier:", v20);
              v21 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v21, "stringValue");
              v22 = (void *)objc_claimAutoreleasedReturnValue();
              v122 = v22;
              objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", &v122, 1);
              v23 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v17, "hm_deriveUUIDFromBaseUUID:withSalts:", v18, v23);
              v24 = (void *)objc_claimAutoreleasedReturnValue();

              objc_msgSend(v12, "uuid");
              v25 = (void *)objc_claimAutoreleasedReturnValue();
              LOBYTE(v17) = objc_msgSend(v24, "isEqual:", v25);

              if ((v17 & 1) != 0)
              {

                v6 = v85;
                v14 = v86;
                v9 = v87;
                v7 = v84;
              }
              else
              {
                v36 = (void *)MEMORY[0x227676638]();
                v37 = v88;
                HMFGetOSLogHandle();
                v38 = objc_claimAutoreleasedReturnValue();
                if (os_log_type_enabled(v38, OS_LOG_TYPE_DEFAULT))
                {
                  HMFGetLogIdentifier();
                  v39 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend(v12, "uuid");
                  v40 = (void *)objc_claimAutoreleasedReturnValue();
                  *(_DWORD *)buf = v79;
                  v117 = v39;
                  v118 = 2112;
                  v119 = v40;
                  v120 = 2112;
                  v121 = v24;
                  _os_log_impl(&dword_2218F0000, v38, OS_LOG_TYPE_DEFAULT, "%{public}@Fixup of accessory uuid from legacy archive %@ -> %@", buf, 0x20u);

                }
                objc_autoreleasePoolPop(v36);
                objc_msgSend(v12, "uuid");
                v41 = objc_claimAutoreleasedReturnValue();
                objc_msgSend(v12, "setUuid:", v24);
                objc_msgSend(v12, "appData");
                v42 = (void *)objc_claimAutoreleasedReturnValue();

                if (v42)
                {
                  objc_msgSend(v12, "uuid");
                  v43 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend(v12, "appData");
                  v44 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend(v44, "setParentUUID:", v43);

                }
                v80 = (void *)v41;
                objc_msgSend(MEMORY[0x24BDD1880], "hm_deriveUUIDFromBaseUUID:identifierSalt:withSalts:", v41, v91, 0, v79);
                v93 = (void *)objc_claimAutoreleasedReturnValue();
                v81 = v24;
                objc_msgSend(MEMORY[0x24BDD1880], "hm_deriveUUIDFromBaseUUID:identifierSalt:withSalts:", v24, v91, 0);
                v92 = (void *)objc_claimAutoreleasedReturnValue();
                v103 = 0u;
                v104 = 0u;
                v105 = 0u;
                v106 = 0u;
                v82 = v12;
                objc_msgSend(v12, "services");
                obj = (id)objc_claimAutoreleasedReturnValue();
                v45 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v103, v115, 16);
                if (v45)
                {
                  v46 = v45;
                  v90 = *(_QWORD *)v104;
                  do
                  {
                    for (i = 0; i != v46; ++i)
                    {
                      if (*(_QWORD *)v104 != v90)
                        objc_enumerationMutation(obj);
                      v48 = *(void **)(*((_QWORD *)&v103 + 1) + 8 * i);
                      objc_msgSend(v48, "_recalculateUUID");
                      v49 = (void *)MEMORY[0x24BDD1880];
                      objc_msgSend(v48, "instanceID");
                      v50 = (void *)objc_claimAutoreleasedReturnValue();
                      objc_msgSend(v50, "stringValue");
                      v51 = (void *)objc_claimAutoreleasedReturnValue();
                      v114 = v51;
                      objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", &v114, 1);
                      v52 = (void *)objc_claimAutoreleasedReturnValue();
                      objc_msgSend(v49, "hm_deriveUUIDFromBaseUUID:identifierSalt:withSalts:", v93, v91, v52);
                      v53 = (void *)objc_claimAutoreleasedReturnValue();

                      v54 = (void *)MEMORY[0x24BDD1880];
                      objc_msgSend(v48, "instanceID");
                      v55 = (void *)objc_claimAutoreleasedReturnValue();
                      objc_msgSend(v55, "stringValue");
                      v56 = (void *)objc_claimAutoreleasedReturnValue();
                      v113 = v56;
                      objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", &v113, 1);
                      v57 = (void *)objc_claimAutoreleasedReturnValue();
                      objc_msgSend(v54, "hm_deriveUUIDFromBaseUUID:identifierSalt:withSalts:", v92, v91, v57);
                      v58 = (void *)objc_claimAutoreleasedReturnValue();

                      objc_msgSend(v58, "UUIDString");
                      v59 = (void *)objc_claimAutoreleasedReturnValue();
                      objc_msgSend(v53, "UUIDString");
                      v60 = (void *)objc_claimAutoreleasedReturnValue();
                      objc_msgSend(v94, "setObject:forKey:", v59, v60);

                      objc_msgSend(v48, "appData");
                      v61 = (void *)objc_claimAutoreleasedReturnValue();

                      if (v61)
                      {
                        objc_msgSend(v48, "uuid");
                        v62 = (void *)objc_claimAutoreleasedReturnValue();
                        objc_msgSend(v48, "appData");
                        v63 = (void *)objc_claimAutoreleasedReturnValue();
                        objc_msgSend(v63, "setParentUUID:", v62);

                      }
                    }
                    v46 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v103, v115, 16);
                  }
                  while (v46);
                }

                v3 = v83;
                v7 = v84;
                p_superclass = (__objc2_class **)(HMDCameraMetricsSnapshotLogEvent + 8);
                v6 = v85;
                v14 = v86;
                v9 = v87;
                v12 = v82;
              }
            }
            else
            {
              v26 = v14;
              v27 = (void *)MEMORY[0x227676638]();
              v28 = v88;
              HMFGetOSLogHandle();
              v29 = objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
              {
                HMFGetLogIdentifier();
                v30 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v12, "uuid");
                v31 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v31, "UUIDString");
                v32 = p_superclass;
                v33 = v12;
                v34 = v9;
                v35 = (void *)objc_claimAutoreleasedReturnValue();
                *(_DWORD *)buf = 138543618;
                v117 = v30;
                v118 = 2112;
                v119 = v35;
                _os_log_impl(&dword_2218F0000, v29, OS_LOG_TYPE_DEFAULT, "%{public}@Unable to check validity of uuid %@ (accessory has nil uniqueIdentifier)", buf, 0x16u);

                v9 = v34;
                v12 = v33;
                p_superclass = v32;

                v6 = v85;
                v7 = v84;
              }

              objc_autoreleasePoolPop(v27);
              v14 = v26;
              v3 = v83;
            }
          }

          ++v9;
        }
        while (v9 != v6);
        v6 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v107, v123, 16);
      }
      while (v6);
    }

    v101 = 0u;
    v102 = 0u;
    v99 = 0u;
    v100 = 0u;
    -[HMDHome rooms](v88, "rooms");
    v64 = (void *)objc_claimAutoreleasedReturnValue();
    v65 = objc_msgSend(v64, "countByEnumeratingWithState:objects:count:", &v99, v112, 16);
    if (v65)
    {
      v66 = v65;
      v67 = *(_QWORD *)v100;
      do
      {
        for (j = 0; j != v66; ++j)
        {
          if (*(_QWORD *)v100 != v67)
            objc_enumerationMutation(v64);
          v69 = *(void **)(*((_QWORD *)&v99 + 1) + 8 * j);
          objc_msgSend(v69, "appData", v79);
          v70 = (void *)objc_claimAutoreleasedReturnValue();

          if (v70)
          {
            objc_msgSend(v69, "appData");
            v71 = (void *)objc_claimAutoreleasedReturnValue();
            -[HMDHome updateAppData:identifierKey:lookup:](v88, "updateAppData:identifierKey:lookup:", v71, CFSTR("HFSortedIdentifierStrings_roomServices"), v94);

          }
        }
        v66 = objc_msgSend(v64, "countByEnumeratingWithState:objects:count:", &v99, v112, 16);
      }
      while (v66);
    }

    -[HMDHome appData](v88, "appData");
    v72 = (void *)objc_claimAutoreleasedReturnValue();

    if (v72)
    {
      -[HMDHome appData](v88, "appData");
      v73 = (void *)objc_claimAutoreleasedReturnValue();
      -[HMDHome updateAppData:identifierKey:lookup:](v88, "updateAppData:identifierKey:lookup:", v73, CFSTR("HFSortedIdentifierStrings_homeServices"), v94);

    }
    -[HMDHome computeBridgedAccessoriesForAllBridges](v88, "computeBridgedAccessoriesForAllBridges", v79);
  }
  v97 = 0u;
  v98 = 0u;
  v95 = 0u;
  v96 = 0u;
  -[HMDHome serviceGroups](v88, "serviceGroups");
  v74 = (void *)objc_claimAutoreleasedReturnValue();
  v75 = objc_msgSend(v74, "countByEnumeratingWithState:objects:count:", &v95, v111, 16);
  if (v75)
  {
    v76 = v75;
    v77 = *(_QWORD *)v96;
    do
    {
      for (k = 0; k != v76; ++k)
      {
        if (*(_QWORD *)v96 != v77)
          objc_enumerationMutation(v74);
        objc_msgSend(*(id *)(*((_QWORD *)&v95 + 1) + 8 * k), "fixupServiceGroup");
      }
      v76 = objc_msgSend(v74, "countByEnumeratingWithState:objects:count:", &v95, v111, 16);
    }
    while (v76);
  }

}

- (HMDHome)initWithCoder:(id)a3
{
  id v4;
  void *v5;
  HMDHome *v6;

  v4 = a3;
  v5 = (void *)MEMORY[0x227676638]();
  v6 = (HMDHome *)-[HMDHome _initWithCoder:](self, "_initWithCoder:", v4);
  objc_autoreleasePoolPop(v5);

  return v6;
}

- (id)_initWithCoder:(id)a3
{
  id v4;
  uint64_t v5;
  void *v6;
  HMDHome *v7;
  uint64_t v8;
  NSUUID *zoneID;
  HMDHome *v10;
  uint64_t v11;
  NSDate *creationDate;
  uint64_t v13;
  NSDate *firstHAPAccessoryAddedDate;
  uint64_t v15;
  NSString *ownerName;
  void *v17;
  HMDHome *v18;
  NSObject *v19;
  id v20;
  id v21;
  NSMutableArray *v22;
  HMDHome *v23;
  void *v24;
  int v25;
  HMDHomePresenceMonitor *v26;
  HMDHomePresenceMonitor *v27;
  HMDHomePeriodicReader *v28;
  HMDHomePeriodicReader *periodicReader;
  HMDHomeAdministratorHandler *v30;
  HMDHomeAdministratorHandler *administratorHandler;
  HMDSharedHomeUpdateHandler *sharedHomeUpdateHandler;
  HMDSharedHomeUpdateHandler *v33;
  HMDSharedHomeUpdateHandler *v34;
  void *v35;
  HMDHomeMediaSystemHandler *v36;
  HMDHomeMediaSystemHandler *mediaSystemController;
  NSMutableArray *rooms;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  NSMutableArray *zones;
  void *v44;
  void *v45;
  void *v46;
  void *v47;
  void *v48;
  void *v49;
  void *v50;
  void *v51;
  char v52;
  void *v53;
  void *v54;
  char v55;
  void *v56;
  void *v57;
  char v58;
  void *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t j;
  void *v64;
  void *v65;
  HMDHome *v66;
  NSObject *v67;
  id v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t i;
  void *v73;
  void *v74;
  HMDHome *v75;
  NSObject *v76;
  id v77;
  void *v78;
  void *v79;
  int v80;
  void *v81;
  void *v82;
  void *v83;
  void *v84;
  void *v85;
  void *v86;
  void *v87;
  void *v88;
  uint64_t v89;
  void *v90;
  void *v91;
  id v92;
  void *v93;
  void *v94;
  id v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  NSMutableArray *serviceGroups;
  void *v100;
  void *v101;
  void *v102;
  void *v103;
  void *v104;
  void *v105;
  uint64_t v106;
  NSMutableArray *actionSets;
  void *v108;
  NSMutableArray *triggerOwnedActionSets;
  void *v110;
  void *v111;
  void *v112;
  void *v113;
  HMDHome *v114;
  NSObject *v115;
  id v116;
  uint64_t v117;
  NSMutableArray *v118;
  void *v119;
  NSMutableArray *removedUsers;
  void *v121;
  void *v122;
  void *v123;
  void *v124;
  void *v125;
  void *v126;
  void *v127;
  void *v128;
  void *v129;
  void *v130;
  void *v131;
  void *v132;
  void *v133;
  void *v134;
  void *v135;
  void *v136;
  void *v137;
  void *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t k;
  void *v142;
  id v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t m;
  void *v148;
  void *v149;
  char v150;
  NSMutableArray *users;
  void *v152;
  void *v153;
  id *v154;
  NSObject *v155;
  id v156;
  NSMutableArray *v157;
  void *v158;
  HMDRoom *v159;
  uint64_t v160;
  void *v161;
  id *v162;
  NSObject *v163;
  id v164;
  void *v165;
  void *v166;
  void *v167;
  HMDNotificationRegistry *v168;
  id v169;
  void *v170;
  void *v171;
  id v172;
  void *v173;
  void *v174;
  void *v175;
  void *v176;
  id *v177;
  void *v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t n;
  void *v183;
  void *v184;
  void *v185;
  NSMutableArray *v186;
  void *v187;
  void *v188;
  int v189;
  void *v190;
  id *v191;
  NSObject *v192;
  _BOOL4 v193;
  id v194;
  id v195;
  uint64_t v196;
  id v197;
  void *v198;
  void *v199;
  void *v200;
  void *v201;
  id *v202;
  NSObject *v203;
  id v204;
  id v205;
  NSMutableArray *v206;
  void *v207;
  id *v208;
  NSObject *v209;
  id v210;
  void (**v211)(_QWORD, _QWORD, _QWORD);
  void *v212;
  uint64_t v213;
  void *v214;
  void *v215;
  id *v216;
  NSObject *v217;
  id v218;
  HMDHome *v219;
  uint64_t v220;
  void *v221;
  void *v222;
  NSMutableArray *v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t ii;
  void *v228;
  void *v229;
  void *v230;
  int v231;
  HMDHome *v232;
  id *v233;
  id v234;
  void *v235;
  void *v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t jj;
  void *v241;
  void *v242;
  void *v243;
  uint64_t v244;
  void *v245;
  id *v246;
  NSObject *v247;
  id v248;
  uint64_t v249;
  id v250;
  uint64_t v251;
  id v252;
  void *v253;
  id *v254;
  NSObject *v255;
  id v256;
  id v257;
  void *v258;
  void *v259;
  void *v260;
  void *v261;
  void *v262;
  void *v263;
  void *v264;
  void *v265;
  void *v266;
  void *v267;
  void *v268;
  void *v269;
  void *v270;
  void *v271;
  id v272;
  void *v273;
  void *v274;
  void *v275;
  void *v276;
  uint64_t v277;
  id v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  id v285;
  uint64_t v286;
  id v287;
  id v288;
  HMDHomeKitVersion *v289;
  int v290;
  uint64_t v291;
  uint64_t v292;
  void *v293;
  HMDHomeKitVersion *v294;
  id v295;
  void *v296;
  HMDHomeKitVersion *v297;
  id v298;
  uint64_t v299;
  id v300;
  uint64_t v301;
  id v302;
  void *v303;
  void *v304;
  void *v305;
  uint64_t v306;
  HMDAccessoryNetworkProtectionGroupRegistry *v307;
  void *v308;
  uint64_t v309;
  id v310;
  void *v311;
  void *v312;
  HMDResidentReachabilityContext *v313;
  HMDResidentReachabilityNotificationManager *v314;
  id v315;
  uint64_t v316;
  id v317;
  uint64_t v318;
  id v319;
  uint64_t v320;
  id v321;
  uint64_t v322;
  id v323;
  void *v324;
  void *v325;
  void *v326;
  void *v327;
  uint64_t v328;
  id v329;
  void *v330;
  void *v331;
  void *v332;
  void *v333;
  uint64_t v334;
  id v335;
  uint64_t v336;
  id v337;
  void *v338;
  void *v339;
  void *v340;
  void *v341;
  void *v342;
  void *v343;
  void *v344;
  void *v345;
  void *v346;
  int v347;
  HMDHome *v348;
  HMDHome *v349;
  void *v351;
  id *v352;
  NSObject *v353;
  id v354;
  void *v355;
  void *v356;
  HMDRoom *v357;
  void *v358;
  void *v359;
  void *v360;
  void *v361;
  void *v362;
  void *v363;
  void *v364;
  void *v365;
  id *v366;
  id v367;
  NSMutableArray *v368;
  id obj;
  uint64_t v370;
  void *v371;
  void *v372;
  HMDHome *v373;
  __int128 v374;
  __int128 v375;
  __int128 v376;
  __int128 v377;
  __int128 v378;
  __int128 v379;
  __int128 v380;
  __int128 v381;
  __int128 v382;
  __int128 v383;
  __int128 v384;
  __int128 v385;
  __int128 v386;
  __int128 v387;
  __int128 v388;
  __int128 v389;
  __int128 v390;
  __int128 v391;
  __int128 v392;
  __int128 v393;
  __int128 v394;
  __int128 v395;
  __int128 v396;
  __int128 v397;
  __int128 v398;
  __int128 v399;
  __int128 v400;
  __int128 v401;
  _QWORD v402[3];
  _QWORD v403[2];
  _QWORD v404[2];
  _QWORD v405[2];
  _QWORD v406[4];
  _QWORD v407[4];
  _QWORD v408[4];
  _BYTE v409[128];
  _BYTE v410[128];
  _BYTE v411[128];
  _QWORD v412[2];
  _BYTE v413[128];
  _BYTE v414[128];
  _QWORD v415[2];
  _QWORD v416[2];
  _QWORD v417[2];
  _QWORD v418[2];
  _QWORD v419[2];
  _QWORD v420[2];
  _BYTE v421[128];
  _BYTE v422[128];
  _QWORD v423[2];
  _QWORD v424[2];
  uint8_t buf[4];
  id v426;
  __int16 v427;
  uint64_t v428;
  __int16 v429;
  NSMutableArray *v430;
  uint64_t v431;

  v431 = *MEMORY[0x24BDAC8D0];
  v4 = a3;
  objc_msgSend(v4, "decodeObjectOfClass:forKey:", objc_opt_class(), CFSTR("homeName"));
  v5 = objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "decodeObjectOfClass:forKey:", objc_opt_class(), CFSTR("homeUUID"));
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v362 = (void *)v5;
  v363 = (void *)objc_msgSend(objc_alloc(MEMORY[0x24BDD1880]), "initWithUUIDString:", v6);
  v7 = -[HMDHome initWithName:uuid:defaultRoomUUID:owner:homeManager:presenceAuth:](self, "initWithName:uuid:defaultRoomUUID:owner:homeManager:presenceAuth:", v5);

  if (!v7)
    goto LABEL_244;
  +[HMDHome zoneIDFromHomeUUID:](HMDHome, "zoneIDFromHomeUUID:", v7->_uuid);
  v8 = objc_claimAutoreleasedReturnValue();
  zoneID = v7->_zoneID;
  v7->_zoneID = (NSUUID *)v8;

  v10 = v7;
  objc_msgSend(v4, "decodeObjectOfClass:forKey:", objc_opt_class(), CFSTR("creationDate"));
  v11 = objc_claimAutoreleasedReturnValue();
  creationDate = v7->_creationDate;
  v7->_creationDate = (NSDate *)v11;

  objc_msgSend(v4, "decodeObjectOfClass:forKey:", objc_opt_class(), CFSTR("firstHAPAccessoryAddedDate"));
  v13 = objc_claimAutoreleasedReturnValue();
  firstHAPAccessoryAddedDate = v7->_firstHAPAccessoryAddedDate;
  v7->_firstHAPAccessoryAddedDate = (NSDate *)v13;

  objc_msgSend(v4, "decodeObjectOfClass:forKey:", objc_opt_class(), CFSTR("homeAdmin"));
  v15 = objc_claimAutoreleasedReturnValue();
  ownerName = v7->_ownerName;
  v7->_ownerName = (NSString *)v15;

  v364 = v4;
  v373 = v7;
  v361 = v6;
  if ((objc_msgSend(v4, "hmd_isHH2MigrationInProgress") & 1) != 0)
  {
    v7->_ownerUser = objc_msgSend(v4, "decodeBoolForKey:", CFSTR("HM.Owner.HH2.MI"));
    v17 = (void *)MEMORY[0x227676638]();
    v18 = v10;
    HMFGetOSLogHandle();
    v19 = (id)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
    {
      HMFGetLogIdentifier();
      v20 = (id)objc_claimAutoreleasedReturnValue();
      HMFBooleanToString();
      v21 = (id)objc_claimAutoreleasedReturnValue();
      -[HMDHome isOwnerUser](v18, "isOwnerUser");
      HMFBooleanToString();
      v22 = (NSMutableArray *)(id)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543874;
      v426 = v20;
      v427 = 2112;
      v428 = (uint64_t)v21;
      v429 = 2112;
      v430 = v22;
      _os_log_impl(&dword_2218F0000, v19, OS_LOG_TYPE_DEFAULT, "%{public}@HH2 Migration : isOwnerUser : %@ / %@", buf, 0x20u);

    }
    objc_autoreleasePoolPop(v17);
  }
  v23 = v373;
  if (v373->_ownerUser)
  {
    -[HMDHome localCapabilitiesDataSource](v373, "localCapabilitiesDataSource");
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    v25 = objc_msgSend(v24, "isResidentCapable");

    v23 = v373;
    if (v25)
    {
      objc_msgSend(v364, "decodeObjectOfClass:forKey:", objc_opt_class(), CFSTR("kHMDHomePresenceMonitorCodingKey"));
      v26 = (HMDHomePresenceMonitor *)objc_claimAutoreleasedReturnValue();
      v27 = v26;
      if (!v26)
        v27 = objc_alloc_init(HMDHomePresenceMonitor);
      objc_storeStrong((id *)&v373->_presenceMonitor, v27);
      if (!v26)

      v28 = objc_alloc_init(HMDHomePeriodicReader);
      periodicReader = v373->_periodicReader;
      v373->_periodicReader = v28;

      v23 = v373;
    }
  }
  v30 = -[HMDHomeAdministratorHandler initWithHome:]([HMDHomeAdministratorHandler alloc], "initWithHome:", v23);
  administratorHandler = v23->_administratorHandler;
  v23->_administratorHandler = v30;

  if (v23->_ownerUser)
  {
    sharedHomeUpdateHandler = v23->_sharedHomeUpdateHandler;
    v23->_sharedHomeUpdateHandler = 0;

  }
  else
  {
    isWatch();
    v33 = objc_alloc_init(HMDSharedHomeUpdateHandler);
    v34 = v23->_sharedHomeUpdateHandler;
    v23->_sharedHomeUpdateHandler = v33;

    -[HMDSharedHomeUpdateHandler configureWithHome:](v23->_sharedHomeUpdateHandler, "configureWithHome:", v23);
  }
  v35 = v364;
  objc_msgSend(v364, "decodeObjectOfClass:forKey:", objc_opt_class(), *MEMORY[0x24BDD7D00]);
  v36 = (HMDHomeMediaSystemHandler *)objc_claimAutoreleasedReturnValue();
  mediaSystemController = v36;
  if (!v36)
    mediaSystemController = v373->_mediaSystemController;
  objc_storeStrong((id *)&v373->_mediaSystemController, mediaSystemController);

  rooms = v373->_rooms;
  v39 = (void *)MEMORY[0x24BDBCF20];
  v424[0] = objc_opt_class();
  v424[1] = objc_opt_class();
  objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", v424, 2);
  v40 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v39, "setWithArray:", v40);
  v41 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v364, "decodeObjectOfClasses:forKey:", v41, CFSTR("rooms"));
  v42 = (void *)objc_claimAutoreleasedReturnValue();
  -[NSMutableArray setArray:](rooms, "setArray:", v42);

  zones = v373->_zones;
  v44 = (void *)MEMORY[0x24BDBCF20];
  v423[0] = objc_opt_class();
  v423[1] = objc_opt_class();
  objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", v423, 2);
  v45 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v44, "setWithArray:", v45);
  v46 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v364, "decodeObjectOfClasses:forKey:", v46, CFSTR("zones"));
  v47 = (void *)objc_claimAutoreleasedReturnValue();
  -[NSMutableArray setArray:](zones, "setArray:", v47);

  if (objc_msgSend(v364, "containsValueForKey:", CFSTR("accessories")))
  {
    +[HMDHome supportedAccessoryClasses](HMDHome, "supportedAccessoryClasses");
    v48 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v364, "decodeObjectOfClasses:forKey:", v48, CFSTR("accessories"));
    v49 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHome _addAccessories:](v373, "_addAccessories:", v49);

    objc_msgSend(MEMORY[0x24BE3F248], "sharedPreferences");
    v50 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v50, "preferenceForKey:", CFSTR("enableMediaAccessories"));
    v51 = (void *)objc_claimAutoreleasedReturnValue();
    v52 = objc_msgSend(v51, "BOOLValue");

    v35 = v364;
    if ((v52 & 1) == 0)
    {
      objc_msgSend(MEMORY[0x24BE3F248], "sharedPreferences");
      v53 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v53, "preferenceForKey:", CFSTR("enableAirPlay2"));
      v54 = (void *)objc_claimAutoreleasedReturnValue();
      v55 = objc_msgSend(v54, "BOOLValue");

      if ((v55 & 1) == 0)
      {
        v400 = 0u;
        v401 = 0u;
        v398 = 0u;
        v399 = 0u;
        -[HMDHome accessories](v373, "accessories");
        v59 = (void *)objc_claimAutoreleasedReturnValue();
        v69 = objc_msgSend(v59, "countByEnumeratingWithState:objects:count:", &v398, v422, 16);
        if (v69)
        {
          v70 = v69;
          v71 = *(_QWORD *)v399;
          do
          {
            for (i = 0; i != v70; ++i)
            {
              if (*(_QWORD *)v399 != v71)
                objc_enumerationMutation(v59);
              v73 = *(void **)(*((_QWORD *)&v398 + 1) + 8 * i);
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0)
              {
                v74 = (void *)MEMORY[0x227676638]();
                v75 = v373;
                HMFGetOSLogHandle();
                v76 = (id)objc_claimAutoreleasedReturnValue();
                if (os_log_type_enabled(v76, OS_LOG_TYPE_INFO))
                {
                  HMFGetLogIdentifier();
                  v77 = (id)objc_claimAutoreleasedReturnValue();
                  *(_DWORD *)buf = 138543618;
                  v426 = v77;
                  v427 = 2112;
                  v428 = (uint64_t)v73;
                  _os_log_impl(&dword_2218F0000, v76, OS_LOG_TYPE_INFO, "%{public}@AirPlay2 is not enabled, dropping accessory: %@", buf, 0x16u);

                }
                objc_autoreleasePoolPop(v74);
                -[HMDHome _removeAccessory:](v75, "_removeAccessory:", v73);
              }
            }
            v70 = objc_msgSend(v59, "countByEnumeratingWithState:objects:count:", &v398, v422, 16);
          }
          while (v70);
        }
        goto LABEL_45;
      }
      objc_msgSend(MEMORY[0x24BE3F248], "sharedPreferences");
      v56 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v56, "preferenceForKey:", CFSTR("enableAppleMedia"));
      v57 = (void *)objc_claimAutoreleasedReturnValue();
      v58 = objc_msgSend(v57, "BOOLValue");

      v35 = v364;
      if ((v58 & 1) == 0)
      {
        v396 = 0u;
        v397 = 0u;
        v394 = 0u;
        v395 = 0u;
        -[HMDHome accessories](v373, "accessories");
        v59 = (void *)objc_claimAutoreleasedReturnValue();
        v60 = objc_msgSend(v59, "countByEnumeratingWithState:objects:count:", &v394, v421, 16);
        if (v60)
        {
          v61 = v60;
          v62 = *(_QWORD *)v395;
          do
          {
            for (j = 0; j != v61; ++j)
            {
              if (*(_QWORD *)v395 != v62)
                objc_enumerationMutation(v59);
              v64 = *(void **)(*((_QWORD *)&v394 + 1) + 8 * j);
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0)
              {
                v65 = (void *)MEMORY[0x227676638]();
                v66 = v373;
                HMFGetOSLogHandle();
                v67 = (id)objc_claimAutoreleasedReturnValue();
                if (os_log_type_enabled(v67, OS_LOG_TYPE_INFO))
                {
                  HMFGetLogIdentifier();
                  v68 = (id)objc_claimAutoreleasedReturnValue();
                  *(_DWORD *)buf = 138543618;
                  v426 = v68;
                  v427 = 2112;
                  v428 = (uint64_t)v64;
                  _os_log_impl(&dword_2218F0000, v67, OS_LOG_TYPE_INFO, "%{public}@Apple media is not enabled, dropping accessory: %@", buf, 0x16u);

                }
                objc_autoreleasePoolPop(v65);
                -[HMDHome _removeAccessory:](v66, "_removeAccessory:", v64);
              }
            }
            v61 = objc_msgSend(v59, "countByEnumeratingWithState:objects:count:", &v394, v421, 16);
          }
          while (v61);
        }
LABEL_45:

        v35 = v364;
      }
    }
  }
  if (objc_msgSend(v35, "containsValueForKey:", CFSTR("accessories.airplay")))
  {
    objc_msgSend(MEMORY[0x24BE3F248], "sharedPreferences");
    v78 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v78, "preferenceForKey:", CFSTR("enableAirPlay2"));
    v79 = (void *)objc_claimAutoreleasedReturnValue();
    v80 = objc_msgSend(v79, "BOOLValue");

    v35 = v364;
    if (v80)
    {
      +[HMDHome supportedAccessoryClasses](HMDHome, "supportedAccessoryClasses");
      v81 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v364, "decodeObjectOfClasses:forKey:", v81, CFSTR("accessories.airplay"));
      v82 = (void *)objc_claimAutoreleasedReturnValue();
      -[HMDHome _addAccessories:](v373, "_addAccessories:", v82);

      v35 = v364;
    }
  }
  if (objc_msgSend(v35, "containsValueForKey:", CFSTR("accessories.homepod")))
  {
    +[HMDHome supportedAccessoryClasses](HMDHome, "supportedAccessoryClasses");
    v83 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v35, "decodeObjectOfClasses:forKey:", v83, CFSTR("accessories.homepod"));
    v84 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHome _addAccessories:](v373, "_addAccessories:", v84);

    v35 = v364;
  }
  if (objc_msgSend(v35, "containsValueForKey:", CFSTR("accessories.homepod_6_1")))
  {
    +[HMDHome supportedAccessoryClasses](HMDHome, "supportedAccessoryClasses");
    v85 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v35, "decodeObjectOfClasses:forKey:", v85, CFSTR("accessories.homepod_6_1"));
    v86 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHome _addAccessories:](v373, "_addAccessories:", v86);

    v35 = v364;
  }
  if (objc_msgSend(v35, "containsValueForKey:", CFSTR("HM.AppleMediaAccessorySensor")))
  {
    +[HMDHome supportedAccessoryClasses](HMDHome, "supportedAccessoryClasses");
    v87 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v35, "decodeObjectOfClasses:forKey:", v87, CFSTR("HM.AppleMediaAccessorySensor"));
    v88 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHome _addAccessories:](v373, "_addAccessories:", v88);

    v35 = v364;
  }
  v89 = *MEMORY[0x24BDD61E8];
  if (objc_msgSend(v35, "containsValueForKey:", *MEMORY[0x24BDD61E8]))
    -[HMDHome setMultiUserEnabled:](v373, "setMultiUserEnabled:", objc_msgSend(v35, "decodeBoolForKey:", v89));
  v373->_soundCheckEnabled = objc_msgSend(v35, "decodeBoolForKey:", *MEMORY[0x24BDD6318]);
  objc_msgSend(v35, "decodeObjectOfClass:forKey:", objc_opt_class(), *MEMORY[0x24BDD5C78]);
  v90 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v91 = v90;
  else
    v91 = 0;
  v92 = v91;

  v373->_audioAnalysisClassifierOptions = objc_msgSend(v92, "unsignedIntegerValue");
  v373->_didOnboardAudioAnalysis = objc_msgSend(v364, "decodeBoolForKey:", *MEMORY[0x24BDD5C98]);
  objc_msgSend(v364, "decodeObjectOfClass:forKey:", objc_opt_class(), *MEMORY[0x24BDD6308]);
  v93 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v94 = v93;
  else
    v94 = 0;
  v95 = v94;

  v373->_siriPhraseOptions = objc_msgSend(v95, "unsignedIntegerValue");
  v373->_locationServicesEnabled = objc_msgSend(v364, "decodeBoolForKey:", *MEMORY[0x24BDD5E10]);
  v373->_didOnboardLocationServices = objc_msgSend(v364, "decodeBoolForKey:", *MEMORY[0x24BDD5CD0]);
  v96 = *MEMORY[0x24BDD5DA8];
  if (objc_msgSend(v364, "containsValueForKey:", *MEMORY[0x24BDD5DA8]))
    -[HMDHome setHasAnyUserAcknowledgedCameraRecordingOnboarding:](v373, "setHasAnyUserAcknowledgedCameraRecordingOnboarding:", objc_msgSend(v364, "decodeBoolForKey:", v96));
  v97 = *MEMORY[0x24BDD5DB0];
  if (objc_msgSend(v364, "containsValueForKey:", *MEMORY[0x24BDD5DB0]))
    v373->_hasOnboardedForAccessCode = objc_msgSend(v364, "decodeBoolForKey:", v97);
  v98 = *MEMORY[0x24BDD5DB8];
  if (objc_msgSend(v364, "containsValueForKey:", *MEMORY[0x24BDD5DB8]))
    v373->_hasOnboardedForWalletKey = objc_msgSend(v364, "decodeBoolForKey:", v98);
  else
    v373->_shouldEncodeHasOnboardedForWalletKey = 0;
  serviceGroups = v373->_serviceGroups;
  v100 = (void *)MEMORY[0x24BDBCF20];
  v420[0] = objc_opt_class();
  v420[1] = objc_opt_class();
  objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", v420, 2);
  v101 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v100, "setWithArray:", v101);
  v102 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v364, "decodeObjectOfClasses:forKey:", v102, *MEMORY[0x24BDD7DD0]);
  v103 = (void *)objc_claimAutoreleasedReturnValue();
  -[NSMutableArray setArray:](serviceGroups, "setArray:", v103);

  v104 = (void *)MEMORY[0x24BDBCF20];
  v419[0] = objc_opt_class();
  v419[1] = objc_opt_class();
  objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", v419, 2);
  v105 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v104, "setWithArray:", v105);
  v106 = objc_claimAutoreleasedReturnValue();

  actionSets = v373->_actionSets;
  objc_msgSend(v364, "decodeObjectOfClasses:forKey:", v106, CFSTR("actionSets"));
  v108 = (void *)objc_claimAutoreleasedReturnValue();
  -[NSMutableArray setArray:](actionSets, "setArray:", v108);

  triggerOwnedActionSets = v373->_triggerOwnedActionSets;
  objc_msgSend(v364, "decodeObjectOfClasses:forKey:", v106, CFSTR("HM.triggerOwnedActionSets"));
  v110 = (void *)objc_claimAutoreleasedReturnValue();
  -[NSMutableArray setArray:](triggerOwnedActionSets, "setArray:", v110);

  objc_msgSend(MEMORY[0x24BDBCEB8], "array");
  v111 = (void *)objc_claimAutoreleasedReturnValue();
  v359 = (void *)v106;
  objc_msgSend(v364, "decodeObjectOfClasses:forKey:", v106, CFSTR("builtinActionSets"));
  v112 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v111, "setArray:", v112);

  v358 = v111;
  if (objc_msgSend(v111, "count"))
  {
    -[NSMutableArray addObjectsFromArray:](v373->_actionSets, "addObjectsFromArray:", v111);
  }
  else if (-[HMDHome isOwnerUser](v373, "isOwnerUser"))
  {
    v113 = (void *)MEMORY[0x227676638]();
    v114 = v373;
    HMFGetOSLogHandle();
    v115 = (id)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v115, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v116 = (id)objc_claimAutoreleasedReturnValue();
      v117 = -[NSMutableArray count](v373->_actionSets, "count");
      *(_DWORD *)buf = 138543618;
      v426 = v116;
      v427 = 2048;
      v428 = v117;
      _os_log_impl(&dword_2218F0000, v115, OS_LOG_TYPE_INFO, "%{public}@init: %ld user-defined actionSets; no builtin actionSets - creating....",
        buf,
        0x16u);

    }
    objc_autoreleasePoolPop(v113);
    v118 = v373->_actionSets;
    -[HMDHome _createBuiltinActionSets](v114, "_createBuiltinActionSets");
    v119 = (void *)objc_claimAutoreleasedReturnValue();
    -[NSMutableArray addObjectsFromArray:](v118, "addObjectsFromArray:", v119);

  }
  removedUsers = v373->_removedUsers;
  v121 = (void *)MEMORY[0x24BDBCF20];
  v418[0] = objc_opt_class();
  v418[1] = objc_opt_class();
  objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", v418, 2);
  v122 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v121, "setWithArray:", v122);
  v123 = (void *)objc_claimAutoreleasedReturnValue();
  v124 = v364;
  objc_msgSend(v364, "decodeObjectOfClasses:forKey:", v123, CFSTR("HM.removedUsersCodingKey"));
  v125 = (void *)objc_claimAutoreleasedReturnValue();
  -[NSMutableArray setArray:](removedUsers, "setArray:", v125);

  objc_msgSend(MEMORY[0x24BDBCEF0], "set");
  v372 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x24BDBCEF0], "set");
  v126 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v364, "containsValueForKey:", CFSTR("residentDevices")))
  {
    v127 = (void *)MEMORY[0x24BDBCF20];
    v417[0] = objc_opt_class();
    v417[1] = objc_opt_class();
    objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", v417, 2);
    v128 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v127, "setWithArray:", v128);
    v129 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v364, "decodeObjectOfClasses:forKey:", v129, CFSTR("residentDevices"));
    v130 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v372, "addObjectsFromArray:", v130);

    v124 = v364;
  }
  if (objc_msgSend(v124, "containsValueForKey:", CFSTR("HM.sharedUsers")))
  {
    v131 = (void *)MEMORY[0x24BDBCF20];
    v416[0] = objc_opt_class();
    v416[1] = objc_opt_class();
    objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", v416, 2);
    v132 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v131, "setWithArray:", v132);
    v133 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v124, "decodeObjectOfClasses:forKey:", v133, CFSTR("HM.sharedUsers"));
    v134 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v126, "addObjectsFromArray:", v134);

  }
  v135 = (void *)MEMORY[0x24BDBCF20];
  v415[0] = objc_opt_class();
  v415[1] = objc_opt_class();
  objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", v415, 2);
  v136 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v135, "setWithArray:", v136);
  v137 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v124, "decodeObjectOfClasses:forKey:", v137, CFSTR("users"));
  v138 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v126, "addObjectsFromArray:", v138);

  v392 = 0u;
  v393 = 0u;
  v390 = 0u;
  v391 = 0u;
  obj = v126;
  v139 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v390, v414, 16);
  if (v139)
  {
    v140 = v139;
    v370 = *(_QWORD *)v391;
    do
    {
      for (k = 0; k != v140; ++k)
      {
        if (*(_QWORD *)v391 != v370)
          objc_enumerationMutation(obj);
        v142 = *(void **)(*((_QWORD *)&v390 + 1) + 8 * k);
        v386 = 0u;
        v387 = 0u;
        v388 = 0u;
        v389 = 0u;
        v143 = v372;
        v144 = objc_msgSend(v143, "countByEnumeratingWithState:objects:count:", &v386, v413, 16);
        if (v144)
        {
          v145 = v144;
          v146 = *(_QWORD *)v387;
          while (2)
          {
            for (m = 0; m != v145; ++m)
            {
              if (*(_QWORD *)v387 != v146)
                objc_enumerationMutation(v143);
              objc_msgSend(*(id *)(*((_QWORD *)&v386 + 1) + 8 * m), "userID");
              v148 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v142, "userID");
              v149 = (void *)objc_claimAutoreleasedReturnValue();
              v150 = objc_msgSend(v148, "isEqualToString:", v149);

              if ((v150 & 1) != 0)
              {

                goto LABEL_95;
              }
            }
            v145 = objc_msgSend(v143, "countByEnumeratingWithState:objects:count:", &v386, v413, 16);
            if (v145)
              continue;
            break;
          }
        }

        -[NSMutableArray addObject:](v373->_users, "addObject:", v142);
LABEL_95:
        ;
      }
      v140 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v390, v414, 16);
    }
    while (v140);
  }

  users = v373->_users;
  objc_msgSend(v372, "allObjects");
  v152 = (void *)objc_claimAutoreleasedReturnValue();
  -[NSMutableArray addObjectsFromArray:](users, "addObjectsFromArray:", v152);

  v153 = (void *)MEMORY[0x227676638]();
  v154 = v373;
  HMFGetOSLogHandle();
  v155 = (id)objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v155, OS_LOG_TYPE_DEBUG))
  {
    HMFGetLogIdentifier();
    v156 = (id)objc_claimAutoreleasedReturnValue();
    v157 = v373->_users;
    *(_DWORD *)buf = 138543618;
    v426 = v156;
    v427 = 2112;
    v428 = (uint64_t)v157;
    _os_log_impl(&dword_2218F0000, v155, OS_LOG_TYPE_DEBUG, "%{public}@Received users in the home data: %@", buf, 0x16u);

  }
  objc_autoreleasePoolPop(v153);
  v158 = v364;
  objc_msgSend(v364, "decodeObjectOfClass:forKey:", objc_opt_class(), CFSTR("roomForEntireHome"));
  v159 = (HMDRoom *)objc_claimAutoreleasedReturnValue();
  HMDDefaultRoomName();
  v160 = objc_claimAutoreleasedReturnValue();
  v360 = (void *)v160;
  if (v159)
  {
    -[HMDRoom setName:](v159, "setName:", v160);
  }
  else
  {
    v161 = (void *)MEMORY[0x227676638]();
    v162 = v154;
    HMFGetOSLogHandle();
    v163 = (id)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v163, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v164 = (id)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v426 = v164;
      _os_log_impl(&dword_2218F0000, v163, OS_LOG_TYPE_INFO, "%{public}@Missing roomForEntireHome - creating one", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v161);
    v159 = -[HMDRoom initWithName:uuid:home:]([HMDRoom alloc], "initWithName:uuid:home:", v360, 0, v162);
    v158 = v364;
  }
  v357 = v159;
  objc_storeStrong(v154 + 164, v159);
  isWatch();
  objc_msgSend(v158, "decodeObjectOfClass:forKey:", objc_opt_class(), CFSTR("homeLocationHandler"));
  v165 = (void *)objc_claimAutoreleasedReturnValue();
  if (v165)
    objc_storeStrong(v154 + 61, v165);

  objc_msgSend(v158, "decodeObjectOfClass:forKey:", objc_opt_class(), CFSTR("homeConfigVersion"));
  v166 = (void *)objc_claimAutoreleasedReturnValue();
  v154[165] = (id)objc_msgSend(v166, "integerValue");

  if (objc_msgSend(v158, "containsValueForKey:", CFSTR("lastSyncedHomeConfigVersion")))
  {
    objc_msgSend(v158, "decodeObjectOfClass:forKey:", objc_opt_class(), CFSTR("lastSyncedHomeConfigVersion"));
    v167 = (void *)objc_claimAutoreleasedReturnValue();
    v154[166] = (id)objc_msgSend(v167, "integerValue");

  }
  isWatch();
  v168 = objc_alloc_init(HMDNotificationRegistry);
  v169 = v154[171];
  v154[171] = v168;

  objc_msgSend(v154[171], "configureWithHome:", v154);
  if (isiOSDevice() || isTVOSDevice())
  {
    objc_msgSend(v158, "decodeObjectOfClass:forKey:", objc_opt_class(), CFSTR("HM.allowsRemoteAccess"));
    v170 = (void *)objc_claimAutoreleasedReturnValue();
    v171 = v170;
    if (v170)
      *((_BYTE *)v154 + 216) = objc_msgSend(v170, "BOOLValue");

  }
  isWatch();
  v172 = v154[44];
  v173 = (void *)MEMORY[0x24BDBCF20];
  v412[0] = objc_opt_class();
  v412[1] = objc_opt_class();
  objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", v412, 2);
  v174 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v173, "setWithArray:", v174);
  v175 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v158, "decodeObjectOfClasses:forKey:", v175, CFSTR("HM.invitations"));
  v176 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v172, "setArray:", v176);

  v384 = 0u;
  v385 = 0u;
  v382 = 0u;
  v383 = 0u;
  v177 = v154;
  v178 = (void *)objc_msgSend(v154[44], "copy");
  v179 = objc_msgSend(v178, "countByEnumeratingWithState:objects:count:", &v382, v411, 16);
  if (v179)
  {
    v180 = v179;
    v181 = *(_QWORD *)v383;
    do
    {
      for (n = 0; n != v180; ++n)
      {
        if (*(_QWORD *)v383 != v181)
          objc_enumerationMutation(v178);
        v183 = *(void **)(*((_QWORD *)&v382 + 1) + 8 * n);
        objc_msgSend(v183, "user");
        v184 = (void *)objc_claimAutoreleasedReturnValue();
        v185 = v184;
        if (v184)
        {
          v186 = v373->_users;
          objc_msgSend(v184, "userID");
          v187 = (void *)objc_claimAutoreleasedReturnValue();
          -[NSMutableArray hmf_firstObjectWithValue:forKeyPath:](v186, "hmf_firstObjectWithValue:forKeyPath:", v187, CFSTR("userID"));
          v188 = (void *)objc_claimAutoreleasedReturnValue();

          if (v188 && objc_msgSend(v183, "isComplete"))
          {
            objc_msgSend(v177[44], "removeObject:", v183);
          }
          else if (objc_msgSend(v183, "isAccepted"))
          {
            -[NSMutableArray addObject:](v373->_users, "addObject:", v185);
            objc_msgSend(v177[161], "addObject:", v185);
            objc_msgSend(v185, "setHome:", v177);
          }

        }
      }
      v180 = objc_msgSend(v178, "countByEnumeratingWithState:objects:count:", &v382, v411, 16);
    }
    while (v180);
  }

  v189 = objc_msgSend(v364, "hmd_isHH2MigrationInProgress");
  v190 = (void *)MEMORY[0x227676638]();
  v191 = v177;
  HMFGetOSLogHandle();
  v192 = (id)objc_claimAutoreleasedReturnValue();
  v193 = os_log_type_enabled(v192, OS_LOG_TYPE_INFO);
  if (v189)
  {
    v6 = v361;
    if (v193)
    {
      HMFGetLogIdentifier();
      v194 = (id)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v426 = v194;
      _os_log_impl(&dword_2218F0000, v192, OS_LOG_TYPE_INFO, "%{public}@HH2 Migration is in progress. Not decoding HMDResidentDeviceManagerLegacy as it does not exist in HH2", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v190);
  }
  else
  {
    v6 = v361;
    if (v193)
    {
      HMFGetLogIdentifier();
      v195 = (id)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v426 = v195;
      _os_log_impl(&dword_2218F0000, v192, OS_LOG_TYPE_INFO, "%{public}@Allocating a new resident device manager", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v190);
    +[HMDResidentDeviceManagerFactory createManagerForHomeUUID:](HMDResidentDeviceManagerFactory, "createManagerForHomeUUID:", v363);
    v196 = objc_claimAutoreleasedReturnValue();
    v197 = v191[182];
    v191[182] = (id)v196;

  }
  v198 = v364;
  v191[201] = (id)objc_msgSend(v364, "decodeIntegerForKey:", CFSTR("HMD.nonIPadResidentDeviceCount"));
  if (objc_msgSend(v191, "isOwnerUser"))
  {
    if (objc_msgSend(v364, "hmd_isHH2MigrationInProgress"))
    {
      +[HMDUser currentUserWithPrivilege:forHome:forceHH1Key:](HMDUser, "currentUserWithPrivilege:forHome:forceHH1Key:", 3, v191, 1);
      v199 = (void *)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      v215 = (void *)MEMORY[0x227676638]();
      v216 = v191;
      HMFGetOSLogHandle();
      v217 = (id)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v217, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v218 = (id)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543362;
        v426 = v218;
        _os_log_impl(&dword_2218F0000, v217, OS_LOG_TYPE_INFO, "%{public}@Not creating a new owner user in HH2", buf, 0xCu);

      }
      objc_autoreleasePoolPop(v215);
      v199 = 0;
      v198 = v364;
    }
    v219 = v373;
    objc_msgSend(v198, "decodeObjectOfClass:forKey:", objc_opt_class(), CFSTR("kHomeOwnerUUID"));
    v220 = objc_claimAutoreleasedReturnValue();
    if (v220)
    {
      v221 = (void *)objc_msgSend(objc_alloc(MEMORY[0x24BDD1880]), "initWithUUIDString:", v220);
      objc_msgSend(v199, "setUUID:", v221);

      v219 = v373;
    }
    v356 = (void *)v220;
    v366 = v191;
    objc_msgSend(MEMORY[0x24BDBCEB8], "array");
    v222 = (void *)objc_claimAutoreleasedReturnValue();
    v378 = 0u;
    v379 = 0u;
    v380 = 0u;
    v381 = 0u;
    v223 = v219->_users;
    v224 = -[NSMutableArray countByEnumeratingWithState:objects:count:](v223, "countByEnumeratingWithState:objects:count:", &v378, v410, 16);
    v365 = v222;
    if (v224)
    {
      v225 = v224;
      v367 = 0;
      v226 = *(_QWORD *)v379;
      do
      {
        for (ii = 0; ii != v225; ++ii)
        {
          if (*(_QWORD *)v379 != v226)
            objc_enumerationMutation(v223);
          v228 = *(void **)(*((_QWORD *)&v378 + 1) + 8 * ii);
          if (objc_msgSend(v228, "privilege") == 3 && (objc_msgSend(v228, "isRemoteGateway") & 1) == 0)
          {
            if (v367)
              goto LABEL_162;
            objc_msgSend(v228, "pairingUsername");
            v229 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v199, "pairingUsername");
            v230 = (void *)objc_claimAutoreleasedReturnValue();
            v231 = objc_msgSend(v229, "isEqual:", v230);

            v222 = v365;
            if (!v231)
LABEL_162:
              objc_msgSend(v222, "addObject:", v228);
            else
              v367 = v228;
          }
        }
        v225 = -[NSMutableArray countByEnumeratingWithState:objects:count:](v223, "countByEnumeratingWithState:objects:count:", &v378, v410, 16);
      }
      while (v225);
    }
    else
    {
      v367 = 0;
    }

    v232 = v373;
    -[NSMutableArray removeObjectsInArray:](v373->_users, "removeObjectsInArray:", v222);
    v191 = v366;
    v233 = v366 + 5;
    if (v367)
    {
      v234 = v367;
      v235 = *v233;
      *v233 = v234;
    }
    else
    {
      objc_storeStrong(v366 + 5, v199);
      -[NSMutableArray addObject:](v373->_users, "addObject:", v199);
      objc_msgSend(v199, "setHome:", v366);
      if (!objc_msgSend(v364, "hmd_isHH2MigrationInProgress"))
      {
LABEL_172:
        v355 = v199;
        objc_storeStrong(v366 + 6, *v233);
        objc_msgSend(MEMORY[0x24BDBCEB8], "array");
        v236 = (void *)objc_claimAutoreleasedReturnValue();
        v374 = 0u;
        v375 = 0u;
        v376 = 0u;
        v377 = 0u;
        v368 = v232->_users;
        v237 = -[NSMutableArray countByEnumeratingWithState:objects:count:](v368, "countByEnumeratingWithState:objects:count:", &v374, v409, 16);
        if (!v237)
          goto LABEL_190;
        v238 = v237;
        v239 = *(_QWORD *)v375;
        while (1)
        {
          for (jj = 0; jj != v238; ++jj)
          {
            if (*(_QWORD *)v375 != v239)
              objc_enumerationMutation(v368);
            v241 = *(void **)(*((_QWORD *)&v374 + 1) + 8 * jj);
            objc_msgSend(v241, "pairingUsername", v355);
            v242 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(*v233, "pairingUsername");
            v243 = (void *)objc_claimAutoreleasedReturnValue();
            if (objc_msgSend(v242, "isEqual:", v243))
            {
              if (!objc_msgSend(v241, "privilege"))
              {

                goto LABEL_187;
              }
              v244 = objc_msgSend(v241, "privilege");

              if (v244 == 4)
                goto LABEL_187;
            }
            else
            {

            }
            if ((objc_msgSend(v241, "isValid") & 1) != 0)
              continue;
            v245 = (void *)MEMORY[0x227676638]();
            v246 = v191;
            HMFGetOSLogHandle();
            v247 = (id)objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v247, OS_LOG_TYPE_DEFAULT))
            {
              HMFGetLogIdentifier();
              v248 = (id)objc_claimAutoreleasedReturnValue();
              *(_DWORD *)buf = 138543618;
              v426 = v248;
              v427 = 2112;
              v428 = (uint64_t)v241;
              _os_log_impl(&dword_2218F0000, v247, OS_LOG_TYPE_DEFAULT, "%{public}@Removing invalid user %@", buf, 0x16u);

              v191 = v366;
            }

            objc_autoreleasePoolPop(v245);
LABEL_187:
            objc_msgSend(v236, "addObject:", v241);
          }
          v238 = -[NSMutableArray countByEnumeratingWithState:objects:count:](v368, "countByEnumeratingWithState:objects:count:", &v374, v409, 16);
          if (!v238)
          {
LABEL_190:

            -[NSMutableArray removeObjectsInArray:](v373->_users, "removeObjectsInArray:", v236);
            v198 = v364;
            v212 = v355;
            goto LABEL_191;
          }
        }
      }
      objc_msgSend(v199, "pairingUsername");
      v235 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v366, "setOwnerName:", v235);
    }

    v232 = v373;
    goto LABEL_172;
  }
  objc_msgSend(v191, "currentUser");
  v200 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v200)
  {
    v201 = (void *)MEMORY[0x227676638]();
    v202 = v191;
    HMFGetOSLogHandle();
    v203 = (id)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v203, OS_LOG_TYPE_DEBUG))
    {
      HMFGetLogIdentifier();
      v204 = (id)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v364, "hmd_isHH2MigrationInProgress");
      HMFBooleanToString();
      v205 = (id)objc_claimAutoreleasedReturnValue();
      v206 = v373->_users;
      *(_DWORD *)buf = 138543874;
      v426 = v204;
      v427 = 2112;
      v428 = (uint64_t)v205;
      v429 = 2112;
      v430 = v206;
      _os_log_impl(&dword_2218F0000, v203, OS_LOG_TYPE_DEBUG, "%{public}@No current user found for this home: isHH2MigrationInProgress = %@, users = %@", buf, 0x20u);

      v6 = v361;
    }

    objc_autoreleasePoolPop(v201);
    v198 = v364;
    if ((objc_msgSend(v364, "hmd_isHH2MigrationInProgress") & 1) == 0)
    {
      v207 = (void *)MEMORY[0x227676638]();
      v208 = v202;
      HMFGetOSLogHandle();
      v209 = (id)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v209, OS_LOG_TYPE_DEFAULT))
      {
        HMFGetLogIdentifier();
        v210 = (id)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543362;
        v426 = v210;
        _os_log_impl(&dword_2218F0000, v209, OS_LOG_TYPE_DEFAULT, "%{public}@Current user not found, creating", buf, 0xCu);

      }
      objc_autoreleasePoolPop(v207);
      objc_msgSend(v208, "currentUserFactory");
      v211 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
      ((void (**)(_QWORD, _QWORD, id *))v211)[2](v211, 0, v208);
      v212 = (void *)objc_claimAutoreleasedReturnValue();

      if (!v212)
      {
        v351 = (void *)MEMORY[0x227676638]();
        v352 = v208;
        HMFGetOSLogHandle();
        v353 = (id)objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v353, OS_LOG_TYPE_ERROR))
        {
          HMFGetLogIdentifier();
          v354 = (id)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543362;
          v426 = v354;
          _os_log_impl(&dword_2218F0000, v353, OS_LOG_TYPE_ERROR, "%{public}@Current user cannot be found or created, failing to deserialize home", buf, 0xCu);

        }
        objc_autoreleasePoolPop(v351);
        v347 = 0;
        goto LABEL_242;
      }
      v198 = v364;
      objc_msgSend(v364, "decodeObjectOfClass:forKey:", objc_opt_class(), CFSTR("kHomeOwnerUUID"));
      v213 = objc_claimAutoreleasedReturnValue();
      if (v213)
      {
        v214 = (void *)objc_msgSend(objc_alloc(MEMORY[0x24BDD1880]), "initWithUUIDString:", v213);
        objc_msgSend(v212, "setUUID:", v214);

        v198 = v364;
      }
      v356 = (void *)v213;
      objc_storeStrong(v208 + 6, v212);
      -[NSMutableArray addObject:](v373->_users, "addObject:", v212);
      objc_msgSend(v212, "setHome:", v208);
LABEL_191:

    }
  }
  objc_msgSend(MEMORY[0x24BDD7A90], "authWithCoder:", v198, v355);
  v249 = objc_claimAutoreleasedReturnValue();
  v250 = v191[62];
  v191[62] = (id)v249;

  objc_msgSend(v191[6], "setPresenceAuthStatus:", v191[62]);
  objc_msgSend(MEMORY[0x24BDD7A98], "computeWithCoder:", v198);
  v251 = objc_claimAutoreleasedReturnValue();
  v252 = v191[63];
  v191[63] = (id)v251;

  v253 = (void *)MEMORY[0x227676638]();
  v254 = v191;
  HMFGetOSLogHandle();
  v255 = (id)objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v255, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v256 = (id)objc_claimAutoreleasedReturnValue();
    v257 = v191[6];
    *(_DWORD *)buf = 138543618;
    v426 = v256;
    v427 = 2112;
    v428 = (uint64_t)v257;
    _os_log_impl(&dword_2218F0000, v255, OS_LOG_TYPE_INFO, "%{public}@Current user is %@", buf, 0x16u);

  }
  objc_autoreleasePoolPop(v253);
  objc_msgSend(MEMORY[0x24BDBCEB8], "array");
  v258 = (void *)objc_claimAutoreleasedReturnValue();
  v259 = v364;
  if (objc_msgSend(v364, "containsValueForKey:", CFSTR("triggers")))
  {
    v260 = (void *)MEMORY[0x24BDBCF20];
    v408[0] = objc_opt_class();
    v408[1] = objc_opt_class();
    v408[2] = objc_opt_class();
    v408[3] = objc_opt_class();
    objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", v408, 4);
    v261 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v260, "setWithArray:", v261);
    v262 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v364, "decodeObjectOfClasses:forKey:", v262, CFSTR("triggers"));
    v263 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v258, "addObjectsFromArray:", v263);

    v259 = v364;
  }
  if (objc_msgSend(v259, "containsValueForKey:", CFSTR("HM.triggers")))
  {
    v264 = (void *)MEMORY[0x24BDBCF20];
    v407[0] = objc_opt_class();
    v407[1] = objc_opt_class();
    v407[2] = objc_opt_class();
    v407[3] = objc_opt_class();
    objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", v407, 4);
    v265 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v264, "setWithArray:", v265);
    v266 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v364, "decodeObjectOfClasses:forKey:", v266, CFSTR("HM.triggers"));
    v267 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v258, "addObjectsFromArray:", v267);

    v259 = v364;
  }
  if (objc_msgSend(v259, "containsValueForKey:", CFSTR("HM.sharedActivationTriggers")))
  {
    v268 = (void *)MEMORY[0x24BDBCF20];
    v406[0] = objc_opt_class();
    v406[1] = objc_opt_class();
    v406[2] = objc_opt_class();
    v406[3] = objc_opt_class();
    objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", v406, 4);
    v269 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v268, "setWithArray:", v269);
    v270 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v259, "decodeObjectOfClasses:forKey:", v270, CFSTR("HM.sharedActivationTriggers"));
    v271 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v258, "addObjectsFromArray:", v271);

  }
  objc_msgSend(v254[43], "setArray:", v258);
  v272 = v254[191];
  v273 = (void *)MEMORY[0x24BDBCF20];
  v405[0] = objc_opt_class();
  v405[1] = objc_opt_class();
  objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", v405, 2);
  v274 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v273, "setWithArray:", v274);
  v275 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v259, "decodeObjectOfClasses:forKey:", v275, CFSTR("HM.deviceOwnedTriggers"));
  v276 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v272, "setArray:", v276);

  objc_msgSend(v259, "decodeObjectOfClass:forKey:", objc_opt_class(), CFSTR("HM.appDataRepository"));
  v277 = objc_claimAutoreleasedReturnValue();
  v278 = v254[140];
  v254[140] = (id)v277;

  objc_msgSend(v254[140], "updateParentUUIDIfNil:", v373->_uuid);
  v279 = *MEMORY[0x24BDD5CA8];
  if (objc_msgSend(v259, "containsValueForKey:", *MEMORY[0x24BDD5CA8]))
    *((_BYTE *)v254 + 56) = objc_msgSend(v259, "decodeBoolForKey:", v279);
  v280 = *MEMORY[0x24BDD5CB0];
  if (objc_msgSend(v259, "containsValueForKey:", *MEMORY[0x24BDD5CB0]))
    *((_BYTE *)v254 + 57) = objc_msgSend(v259, "decodeBoolForKey:", v280);
  v281 = *MEMORY[0x24BDD6190];
  if (objc_msgSend(v259, "containsValueForKey:", *MEMORY[0x24BDD6190]))
    v254[8] = (id)objc_msgSend(v259, "decodeIntegerForKey:", v281);
  v282 = *MEMORY[0x24BDD61A8];
  if (objc_msgSend(v259, "containsValueForKey:", *MEMORY[0x24BDD61A8]))
    *((_BYTE *)v254 + 72) = objc_msgSend(v259, "decodeBoolForKey:", v282);
  v283 = *MEMORY[0x24BDD6198];
  if (objc_msgSend(v259, "containsValueForKey:", *MEMORY[0x24BDD6198]))
  {
    objc_msgSend(v259, "decodeObjectOfClass:forKey:", objc_opt_class(), v283);
    v284 = objc_claimAutoreleasedReturnValue();
    v285 = v254[10];
    v254[10] = (id)v284;

  }
  objc_msgSend(v259, "decodeObjectOfClass:forKey:", objc_opt_class(), CFSTR("kHomeKitVersionStringKey"));
  v286 = objc_claimAutoreleasedReturnValue();
  v287 = v254[194];
  v254[194] = (id)v286;

  v288 = v254[194];
  if (v288)
  {
    v289 = -[HMDHomeKitVersion initWithVersionString:]([HMDHomeKitVersion alloc], "initWithVersionString:", CFSTR("6.1"));
    v290 = objc_msgSend(v288, "isAtLeastVersion:", v289);

    v259 = v364;
    if (v290)
      *((_BYTE *)v254 + 195) = 1;
  }
  v291 = *MEMORY[0x24BDD61F0];
  if (objc_msgSend(v259, "containsValueForKey:", *MEMORY[0x24BDD61F0]))
    v292 = objc_msgSend(v259, "decodeIntegerForKey:", v291);
  else
    v292 = 0;
  v254[31] = (id)v292;
  objc_msgSend(v259, "decodeObjectOfClass:forKey:", objc_opt_class(), CFSTR("HMHM.minimumNetworkRouterSupportHomeKitVersion"));
  v293 = (void *)objc_claimAutoreleasedReturnValue();
  if (v293)
  {
    v294 = -[HMDHomeKitVersion initWithVersionString:]([HMDHomeKitVersion alloc], "initWithVersionString:", v293);
    v295 = v254[38];
    v254[38] = v294;

  }
  objc_msgSend(v259, "decodeObjectOfClass:forKey:", objc_opt_class(), CFSTR("HMHM.minHomeKitVersionForAccessoryNetworkProtectionChangeCodingKey"));
  v296 = (void *)objc_claimAutoreleasedReturnValue();

  if (v296)
  {
    v297 = -[HMDHomeKitVersion initWithVersionString:]([HMDHomeKitVersion alloc], "initWithVersionString:", v296);
    v298 = v254[39];
    v254[39] = v297;

  }
  objc_msgSend(v259, "decodeObjectOfClass:forKey:", objc_opt_class(), CFSTR("HMHM.activeNetworkRouter"));
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  if (v6)
  {
    v299 = objc_msgSend(objc_alloc(MEMORY[0x24BDD1880]), "initWithUUIDString:", v6);
    v300 = v254[34];
    v254[34] = (id)v299;

  }
  if (objc_msgSend(v259, "containsValueForKey:", CFSTR("HMDHomePrimaryNetworkRouterManagingDeviceUUIDCodingKey")))
  {
    objc_msgSend(v259, "decodeObjectOfClass:forKey:", objc_opt_class(), CFSTR("HMDHomePrimaryNetworkRouterManagingDeviceUUIDCodingKey"));
    v301 = objc_claimAutoreleasedReturnValue();
    v302 = v254[36];
    v254[36] = (id)v301;

  }
  v303 = (void *)MEMORY[0x24BDBCF20];
  v404[0] = objc_opt_class();
  v404[1] = objc_opt_class();
  objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", v404, 2);
  v304 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v303, "setWithArray:", v304);
  v305 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v259, "decodeObjectOfClasses:forKey:", v305, *MEMORY[0x24BDD5C30]);
  v306 = objc_claimAutoreleasedReturnValue();

  v307 = [HMDAccessoryNetworkProtectionGroupRegistry alloc];
  objc_msgSend(v254, "notificationCenter");
  v308 = (void *)objc_claimAutoreleasedReturnValue();
  v371 = (void *)v306;
  v309 = -[HMDAccessoryNetworkProtectionGroupRegistry initWithHome:notificationCenter:persistedGroups:](v307, "initWithHome:notificationCenter:persistedGroups:", v254, v308, v306);
  v310 = v254[33];
  v254[33] = (id)v309;

  objc_msgSend(v259, "decodeObjectOfClass:forKey:", objc_opt_class(), CFSTR("HMHH.residentReachabilityContext"));
  v311 = (void *)objc_claimAutoreleasedReturnValue();
  v312 = v311;
  if (v311)
  {
    v313 = v311;
  }
  else
  {
    v313 = objc_alloc_init(HMDResidentReachabilityContext);

  }
  v314 = -[HMDResidentReachabilityNotificationManager initWithResidentReachabilityContext:workQueue:]([HMDResidentReachabilityNotificationManager alloc], "initWithResidentReachabilityContext:workQueue:", v313, v254[146]);
  v315 = v254[198];
  v254[198] = v314;

  if (objc_msgSend(v364, "containsValueForKey:", CFSTR("HMHM.threadNetworkID")))
  {
    objc_msgSend(v364, "decodeObjectOfClass:forKey:", objc_opt_class(), CFSTR("HMHM.threadNetworkID"));
    v316 = objc_claimAutoreleasedReturnValue();
    v317 = v254[45];
    v254[45] = (id)v316;

  }
  objc_msgSend(v364, "decodeObjectOfClass:forKey:", objc_opt_class(), *MEMORY[0x24BDD6218]);
  v318 = objc_claimAutoreleasedReturnValue();
  v319 = v254[54];
  v254[54] = (id)v318;

  objc_msgSend(v364, "decodeObjectOfClass:forKey:", objc_opt_class(), CFSTR("HMHM.personManagerZoneUUID"));
  v320 = objc_claimAutoreleasedReturnValue();
  v321 = v254[197];
  v254[197] = (id)v320;

  objc_msgSend(v364, "decodeObjectOfClass:forKey:", objc_opt_class(), CFSTR("HM.nlcck"));
  v322 = objc_claimAutoreleasedReturnValue();
  v323 = v254[55];
  v254[55] = (id)v322;

  if (objc_msgSend(v364, "containsValueForKey:", CFSTR("HMDHomeLabelsByAccessCodeCodingKey")))
  {
    v324 = (void *)MEMORY[0x24BDBCF20];
    v403[0] = objc_opt_class();
    v403[1] = objc_opt_class();
    objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", v403, 2);
    v325 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v324, "setWithArray:", v325);
    v326 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v364, "decodeObjectOfClasses:forKey:", v326, CFSTR("HMDHomeLabelsByAccessCodeCodingKey"));
    v327 = (void *)objc_claimAutoreleasedReturnValue();

    v328 = objc_msgSend(v327, "mutableCopy");
    v329 = v254[81];
    v254[81] = (id)v328;

  }
  if (objc_msgSend(v364, "containsValueForKey:", CFSTR("HMDHomeRemovedUserInfoByAccessCodeCodingKey")))
  {
    v330 = (void *)MEMORY[0x24BDBCF20];
    v402[0] = objc_opt_class();
    v402[1] = objc_opt_class();
    v402[2] = objc_opt_class();
    objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", v402, 3);
    v331 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v330, "setWithArray:", v331);
    v332 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v364, "decodeObjectOfClasses:forKey:", v332, CFSTR("HMDHomeRemovedUserInfoByAccessCodeCodingKey"));
    v333 = (void *)objc_claimAutoreleasedReturnValue();

    v334 = objc_msgSend(v333, "mutableCopy");
    v335 = v254[83];
    v254[83] = (id)v334;

  }
  if (objc_msgSend(v364, "containsValueForKey:", CFSTR("HMDHomeNFCReaderKeyCodingKey")))
  {
    objc_msgSend(v364, "decodeObjectOfClass:forKey:", objc_opt_class(), CFSTR("HMDHomeNFCReaderKeyCodingKey"));
    v336 = objc_claimAutoreleasedReturnValue();
    v337 = v254[48];
    v254[48] = (id)v336;

  }
  else
  {
    *((_BYTE *)v254 + 208) = 0;
  }
  objc_msgSend(v364, "decodeObjectOfClass:forKey:", objc_opt_class(), CFSTR("HMHM.chipStorage"));
  v338 = (void *)objc_claimAutoreleasedReturnValue();
  if (v338)
  {
    objc_storeStrong(v254 + 203, v338);
    if (isFeatureMatteriPhoneOnlyPairingControlEnabled())
    {
      v339 = v296;
      v340 = v258;
      objc_msgSend(v338, "fabricID");
      v341 = (void *)objc_claimAutoreleasedReturnValue();

      if (v341)
      {
        objc_msgSend(v338, "fabricID");
        v342 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v254[205], "setFabricID:", v342);

      }
      objc_msgSend(v254, "homeManager");
      v343 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v343, "accessoryBrowser");
      v344 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v344, "chipAccessoryServerBrowser");
      v345 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v345, "storage");
      v346 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v254[205], "setStorage:", v346);

      v258 = v340;
      v296 = v339;
    }
  }
  *((_BYTE *)v254 + 219) = objc_msgSend(v364, "decodeBoolForKey:", *MEMORY[0x24BDD63B8]);

  v347 = 1;
LABEL_242:

  if (!v347)
  {
    v349 = 0;
    v4 = v364;
    v348 = v373;
    goto LABEL_246;
  }
  v4 = v364;
  v7 = v373;
LABEL_244:
  v348 = v7;
  v349 = v7;
LABEL_246:

  return v349;
}

- (void)encodeWithCoder:(id)a3
{
  void *v4;
  id v5;

  v5 = a3;
  v4 = (void *)MEMORY[0x227676638]();
  -[HMDHome _encodeWithCoder:](self, "_encodeWithCoder:", v5);
  objc_autoreleasePoolPop(v4);

}

- (void)_encodeWithCoder:(id)a3
{
  id v4;
  int v5;
  void *v6;
  HMDHome *v7;
  NSObject *v8;
  id v9;
  id v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  int64_t v18;
  void *v19;
  void *v20;
  unint64_t v21;
  _BOOL8 v22;
  uint64_t v23;
  _BOOL8 v24;
  void *v25;
  _BOOL8 v26;
  void *v27;
  _BOOL8 v28;
  _BOOL8 v29;
  _BOOL8 v30;
  _BOOL8 v31;
  _BOOL8 v32;
  _BOOL8 v33;
  void *v34;
  int v35;
  void *v36;
  NSObject *v37;
  _BOOL4 v38;
  HMDHome *v39;
  id v40;
  uint64_t v41;
  id v42;
  id v43;
  uint64_t v44;
  void *v45;
  void *v46;
  uint64_t v47;
  void *v48;
  void *v49;
  int v50;
  void *v51;
  __CFString **v52;
  void *v53;
  void *v54;
  void *v55;
  __int16 v56;
  void *v57;
  void *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t i;
  void *v63;
  void *v64;
  void *v65;
  void *v66;
  void *v67;
  uint64_t v68;
  void *v69;
  void *v70;
  _BOOL4 v71;
  void *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t j;
  void *v77;
  uint64_t v78;
  void *v79;
  char v80;
  void *v81;
  void *v82;
  void *v83;
  void *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t k;
  void *v89;
  void *v90;
  char v91;
  void *v92;
  void *v93;
  void *v94;
  void *v95;
  char v96;
  void *v97;
  void *v98;
  void *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t m;
  void *v104;
  void *v105;
  void *v106;
  void *v107;
  void *v108;
  id v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t n;
  void *v114;
  void *v115;
  void *v116;
  void *v117;
  void *v118;
  void *v119;
  void *v120;
  id v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t ii;
  void *v126;
  void *v127;
  void *v128;
  void *v129;
  void *v130;
  void *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t jj;
  void *v136;
  void *v137;
  int v138;
  void *v139;
  void *v140;
  HMDHome *v141;
  NSObject *v142;
  id v143;
  void *v144;
  void *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  void *v150;
  void *v151;
  int v152;
  void *v153;
  HMDHome *v154;
  NSObject *v155;
  id v156;
  void *v157;
  void *v158;
  uint64_t v159;
  id v160;
  void *v161;
  void *v162;
  void *v163;
  uint64_t v164;
  uint64_t v165;
  void *v166;
  uint64_t v167;
  void *v168;
  void *v169;
  void *v170;
  void *v171;
  void *v172;
  void *v173;
  void *v174;
  void *v175;
  void *v176;
  void *v177;
  void *v178;
  uint64_t v179;
  uint64_t v180;
  void *v181;
  uint64_t v182;
  uint64_t v183;
  void *v184;
  void *v185;
  void *v186;
  void *v187;
  void *v188;
  void *v189;
  void *v190;
  void *v191;
  void *v192;
  void *v193;
  void *v194;
  void *v195;
  void *v196;
  void *v197;
  void *v198;
  void *v199;
  void *v200;
  char v201;
  void *v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t kk;
  void *v207;
  void *v208;
  void *v209;
  uint64_t v210;
  uint64_t v211;
  unint64_t v212;
  void *v213;
  int v214;
  void *v215;
  void *v216;
  void *v217;
  void *v218;
  void *v219;
  void *v220;
  void *v221;
  const __CFString *v222;
  void *v223;
  void *v224;
  void *v225;
  void *v226;
  void *v227;
  void *v228;
  void *v229;
  void *v230;
  void *v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  void *v236;
  void *v237;
  void *v238;
  void *v239;
  int v240;
  void *v241;
  void *v242;
  void *v243;
  void *v244;
  int v245;
  int v246;
  __int16 v247;
  HMDHome *v248;
  int v249;
  int v250;
  id v251;
  HMDHome *v252;
  void *v253;
  void *v254;
  void *v255;
  void *v256;
  void *v257;
  uint64_t v258;
  __int128 v259;
  __int128 v260;
  __int128 v261;
  __int128 v262;
  __int128 v263;
  __int128 v264;
  __int128 v265;
  __int128 v266;
  __int128 v267;
  __int128 v268;
  __int128 v269;
  __int128 v270;
  __int128 v271;
  __int128 v272;
  __int128 v273;
  __int128 v274;
  __int128 v275;
  __int128 v276;
  __int128 v277;
  __int128 v278;
  __int128 v279;
  __int128 v280;
  __int128 v281;
  __int128 v282;
  __int128 v283;
  __int128 v284;
  __int128 v285;
  __int128 v286;
  __int128 v287;
  __int128 v288;
  __int128 v289;
  __int128 v290;
  __int128 v291;
  __int128 v292;
  __int128 v293;
  __int128 v294;
  uint8_t v295[128];
  uint8_t buf[4];
  id v297;
  __int16 v298;
  id v299;
  __int16 v300;
  void *v301;
  __int16 v302;
  void *v303;
  _BYTE v304[128];
  _BYTE v305[128];
  _BYTE v306[128];
  _BYTE v307[128];
  _BYTE v308[128];
  _BYTE v309[128];
  _BYTE v310[128];
  _BYTE v311[128];
  uint64_t v312;

  v312 = *MEMORY[0x24BDAC8D0];
  v4 = a3;
  v250 = objc_msgSend(v4, "hmd_isForXPCTransport");
  v5 = objc_msgSend(v4, "hmd_isForLocalStore");
  v246 = objc_msgSend(v4, "hmd_isForXPCTransportEntitledForSPIAccess");
  v245 = objc_msgSend(v4, "hmd_isForRemoteTransportOnSameAccount");
  v247 = objc_msgSend(v4, "hmd_homeManagerOptions");
  v249 = v5;
  if (v5)
  {
    v6 = (void *)MEMORY[0x227676638]();
    v7 = self;
    HMFGetOSLogHandle();
    v8 = (id)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
    {
      HMFGetLogIdentifier();
      v9 = (id)objc_claimAutoreleasedReturnValue();
      -[HMDHome isOwnerUser](v7, "isOwnerUser");
      HMFBooleanToString();
      v10 = (id)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v297 = v9;
      v298 = 2112;
      v299 = v10;
      _os_log_impl(&dword_2218F0000, v8, OS_LOG_TYPE_DEBUG, "%{public}@Encoding isOwnerUser : %@ for HH2 migration", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v6);
    objc_msgSend(v4, "encodeBool:forKey:", -[HMDHome isOwnerUser](v7, "isOwnerUser"), CFSTR("HM.Owner.HH2.MI"));
  }
  -[HMDHome uuid](self, "uuid");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "UUIDString");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "encodeObject:forKey:", v12, CFSTR("homeUUID"));

  -[HMDHome ownerName](self, "ownerName");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "encodeObject:forKey:", v13, CFSTR("homeAdmin"));

  -[HMDUser uuid](self->_owner, "uuid");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v14, "UUIDString");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "encodeObject:forKey:", v15, CFSTR("kHomeOwnerUUID"));

  -[HMDHome creationDate](self, "creationDate");
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "encodeObject:forKey:", v16, CFSTR("creationDate"));

  -[HMDHome firstHAPAccessoryAddedDate](self, "firstHAPAccessoryAddedDate");
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "encodeObject:forKey:", v17, CFSTR("firstHAPAccessoryAddedDate"));

  v18 = -[HMDHome configurationVersion](self, "configurationVersion");
  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithInteger:", v18);
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "encodeObject:forKey:", v19, CFSTR("homeConfigVersion"));

  -[HMDHome name](self, "name");
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "encodeObject:forKey:", v20, CFSTR("homeName"));

  v21 = -[HMDHome homeHubState](self, "homeHubState");
  objc_msgSend(v4, "encodeInteger:forKey:", v21, *MEMORY[0x24BDD5DC0]);
  v22 = -[HMDHome isMultiUserEnabled](self, "isMultiUserEnabled");
  objc_msgSend(v4, "encodeBool:forKey:", v22, *MEMORY[0x24BDD61E8]);
  if (isFeatureHomeTheaterQFAEnabledForTests)
    v23 = objc_msgSend((id)isFeatureHomeTheaterQFAEnabledForTests, "BOOLValue");
  else
    v23 = 1;
  objc_msgSend(v4, "encodeBool:forKey:", v23, *MEMORY[0x24BDD6340]);
  v24 = -[HMDHome soundCheckEnabled](self, "soundCheckEnabled");
  objc_msgSend(v4, "encodeBool:forKey:", v24, *MEMORY[0x24BDD6318]);
  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedInteger:", -[HMDHome audioAnalysisClassifierOptions](self, "audioAnalysisClassifierOptions"));
  v25 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "encodeObject:forKey:", v25, *MEMORY[0x24BDD5C78]);

  v26 = -[HMDHome didOnboardAudioAnalysis](self, "didOnboardAudioAnalysis");
  objc_msgSend(v4, "encodeBool:forKey:", v26, *MEMORY[0x24BDD5C98]);
  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedInteger:", -[HMDHome siriPhraseOptions](self, "siriPhraseOptions"));
  v27 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "encodeObject:forKey:", v27, *MEMORY[0x24BDD6308]);

  v28 = -[HMDHome locationServicesEnabled](self, "locationServicesEnabled");
  objc_msgSend(v4, "encodeBool:forKey:", v28, *MEMORY[0x24BDD5E10]);
  v29 = -[HMDHome didOnboardLocationServices](self, "didOnboardLocationServices");
  objc_msgSend(v4, "encodeBool:forKey:", v29, *MEMORY[0x24BDD5CD0]);
  v30 = -[HMDHome hasAnyUserAcknowledgedCameraRecordingOnboarding](self, "hasAnyUserAcknowledgedCameraRecordingOnboarding");
  objc_msgSend(v4, "encodeBool:forKey:", v30, *MEMORY[0x24BDD5DA8]);
  v31 = -[HMDHome hasOnboardedForAccessCode](self, "hasOnboardedForAccessCode");
  objc_msgSend(v4, "encodeBool:forKey:", v31, *MEMORY[0x24BDD5DB0]);
  v32 = -[HMDHome hasOnboardedForWalletKey](self, "hasOnboardedForWalletKey");
  objc_msgSend(v4, "encodeBool:forKey:", v32, *MEMORY[0x24BDD5DB8]);
  v33 = -[HMDHome dismissedWalletKeyUWBUnlockOnboarding](self, "dismissedWalletKeyUWBUnlockOnboarding");
  objc_msgSend(v4, "encodeBool:forKey:", v33, *MEMORY[0x24BDD5CE0]);
  objc_msgSend(v4, "hmd_supportedFeatures");
  v34 = (void *)objc_claimAutoreleasedReturnValue();
  v35 = objc_msgSend(v34, "containsObject:", &unk_24E96A628);

  v36 = (void *)MEMORY[0x227676638]();
  v248 = self;
  HMFGetOSLogHandle();
  v37 = (id)objc_claimAutoreleasedReturnValue();
  v38 = os_log_type_enabled(v37, OS_LOG_TYPE_INFO);
  if (v35)
  {
    v39 = v248;
    if (v38)
    {
      HMFGetLogIdentifier();
      v40 = (id)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v297 = v40;
      _os_log_impl(&dword_2218F0000, v37, OS_LOG_TYPE_INFO, "%{public}@Forcing isUpdatedToHH2 to YES", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v36);
    v41 = 1;
  }
  else
  {
    if (v38)
    {
      HMFGetLogIdentifier();
      v42 = (id)objc_claimAutoreleasedReturnValue();
      -[HMDHome isUpdatedToHH2](v248, "isUpdatedToHH2");
      HMFBooleanToString();
      v43 = (id)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v297 = v42;
      v298 = 2112;
      v299 = v43;
      _os_log_impl(&dword_2218F0000, v37, OS_LOG_TYPE_INFO, "%{public}@isUpdatedToHH2 is set to %@", buf, 0x16u);

    }
    v39 = v248;

    objc_autoreleasePoolPop(v36);
    v41 = -[HMDHome isUpdatedToHH2](v248, "isUpdatedToHH2");
  }
  objc_msgSend(v4, "encodeBool:forKey:", v41, *MEMORY[0x24BDD63B8]);
  if (objc_msgSend(v4, "hmd_isForXPCTransportEntitledForSPIAccess"))
  {
    v44 = -[HMDHome bulletinNotificationsSupported](v39, "bulletinNotificationsSupported");
    objc_msgSend(v4, "encodeBool:forKey:", v44, *MEMORY[0x24BDD5CB8]);
  }
  if ((objc_msgSend(v4, "hmd_isForRemoteGatewayCoder") & 1) == 0)
  {
    if ((v250 & v246) != 1)
    {
      -[HMDHome homeLocationHandler](v39, "homeLocationHandler");
      v51 = (void *)objc_claimAutoreleasedReturnValue();
      v52 = &kHomeLocationHandlerCodingKey;
      goto LABEL_25;
    }
    if (objc_msgSend(v4, "hmd_isForXPCTransportAuthorizedForLocationAccess"))
    {
      -[HMDHome homeLocationHandler](v39, "homeLocationHandler");
      v45 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v45, "location");
      v46 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "encodeObject:forKey:", v46, CFSTR("homeLocation"));

      if (objc_msgSend(v4, "hmd_isForXPCTransportEntitledForHomeLocationAccess"))
      {
        v47 = -[HMDHome homeLocation](v39, "homeLocation");
        objc_msgSend(v4, "encodeInteger:forKey:", v47, *MEMORY[0x24BDD5E20]);
      }
    }
    -[HMDHome primaryResident](v39, "primaryResident");
    v48 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v48, "capabilities");
    v49 = (void *)objc_claimAutoreleasedReturnValue();
    v50 = objc_msgSend(v49, "supportsSiriEndpointSetup");

    if (v50)
    {
      v51 = (void *)objc_msgSend(objc_alloc(MEMORY[0x24BE3F2A8]), "initWithVersionString:", CFSTR("7.2"));
      v52 = (__CFString **)MEMORY[0x24BDD6300];
LABEL_25:
      objc_msgSend(v4, "encodeObject:forKey:", v51, *v52);

    }
  }
  if (v5)
  {
    objc_msgSend(MEMORY[0x24BDD16E0], "numberWithInteger:", -[HMDHome lastSyncedConfigurationVersion](v39, "lastSyncedConfigurationVersion"));
    v53 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "encodeObject:forKey:", v53, CFSTR("lastSyncedHomeConfigVersion"));

    -[HMDHome reachabilityNotificationManager](v39, "reachabilityNotificationManager");
    v54 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v54, "reachabilityContext");
    v55 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "encodeObject:forKey:", v55, CFSTR("HMHH.residentReachabilityContext"));

  }
  v56 = v247;
  if ((v247 & 9) != 0)
  {
    objc_msgSend(MEMORY[0x24BDD1650], "strongToStrongObjectsMapTable");
    v57 = (void *)objc_claimAutoreleasedReturnValue();
    v291 = 0u;
    v292 = 0u;
    v293 = 0u;
    v294 = 0u;
    -[HMDHome _residentUsers](v39, "_residentUsers");
    v58 = (void *)objc_claimAutoreleasedReturnValue();
    v59 = objc_msgSend(v58, "countByEnumeratingWithState:objects:count:", &v291, v311, 16);
    if (v59)
    {
      v60 = v59;
      v61 = *(_QWORD *)v292;
      do
      {
        for (i = 0; i != v60; ++i)
        {
          if (*(_QWORD *)v292 != v61)
            objc_enumerationMutation(v58);
          v63 = *(void **)(*((_QWORD *)&v291 + 1) + 8 * i);
          objc_msgSend(v63, "userID");
          v64 = (void *)objc_claimAutoreleasedReturnValue();
          +[HMDDevice deviceWithDestination:](HMDDevice, "deviceWithDestination:", v64);
          v65 = (void *)objc_claimAutoreleasedReturnValue();

          if (v65)
            objc_msgSend(v57, "setObject:forKey:", v63, v65);

        }
        v60 = objc_msgSend(v58, "countByEnumeratingWithState:objects:count:", &v291, v311, 16);
      }
      while (v60);
    }

    objc_msgSend(v57, "objectEnumerator");
    v66 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v66, "allObjects");
    v67 = (void *)objc_claimAutoreleasedReturnValue();

    v256 = v57;
    if (v250 && (!isAppleTV() | v246) == 1)
    {
      objc_msgSend(MEMORY[0x24BDBCEB8], "array");
      v68 = objc_claimAutoreleasedReturnValue();
      v69 = (void *)v68;
      v39 = v248;
      if ((v246 & 1) != 0)
      {
        v253 = (void *)v68;
        v243 = v67;
        v257 = v4;
        -[HMDHome owner](v248, "owner");
        v70 = (void *)objc_claimAutoreleasedReturnValue();
        v71 = -[HMDHome isOwnerUser](v248, "isOwnerUser");
        v287 = 0u;
        v288 = 0u;
        v289 = 0u;
        v290 = 0u;
        -[HMDHome users](v248, "users");
        v72 = (void *)objc_claimAutoreleasedReturnValue();
        v73 = objc_msgSend(v72, "countByEnumeratingWithState:objects:count:", &v287, v310, 16);
        if (v73)
        {
          v74 = v73;
          v75 = *(_QWORD *)v288;
          do
          {
            for (j = 0; j != v74; ++j)
            {
              if (*(_QWORD *)v288 != v75)
                objc_enumerationMutation(v72);
              v77 = *(void **)(*((_QWORD *)&v287 + 1) + 8 * j);
              if (!v71 || (objc_msgSend(*(id *)(*((_QWORD *)&v287 + 1) + 8 * j), "isEqual:", v70) & 1) == 0)
              {
                objc_msgSend(v77, "userID");
                v78 = objc_claimAutoreleasedReturnValue();
                if (!v78)
                  continue;
                v79 = (void *)v78;
                v80 = objc_msgSend(v77, "isRemoteGateway");

                if ((v80 & 1) != 0)
                  continue;
              }
              objc_msgSend(v253, "addObject:", v77);
            }
            v74 = objc_msgSend(v72, "countByEnumeratingWithState:objects:count:", &v287, v310, 16);
          }
          while (v74);
        }

        v39 = v248;
        v57 = v256;
        v4 = v257;
        v67 = v243;
        v69 = v253;
        if (-[HMDHome isAdminUser](v248, "isAdminUser"))
        {
          v81 = (void *)MEMORY[0x24BDBCEB8];
          -[HMDHome outgoingInvitations](v248, "outgoingInvitations");
          v82 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v81, "arrayWithCapacity:", objc_msgSend(v82, "count"));
          v83 = (void *)objc_claimAutoreleasedReturnValue();

          v285 = 0u;
          v286 = 0u;
          v283 = 0u;
          v284 = 0u;
          -[HMDHome outgoingInvitations](v248, "outgoingInvitations");
          v84 = (void *)objc_claimAutoreleasedReturnValue();
          v85 = objc_msgSend(v84, "countByEnumeratingWithState:objects:count:", &v283, v309, 16);
          if (v85)
          {
            v86 = v85;
            v87 = *(_QWORD *)v284;
            do
            {
              for (k = 0; k != v86; ++k)
              {
                if (*(_QWORD *)v284 != v87)
                  objc_enumerationMutation(v84);
                v89 = *(void **)(*((_QWORD *)&v283 + 1) + 8 * k);
                objc_msgSend(v89, "user");
                v90 = (void *)objc_claimAutoreleasedReturnValue();
                v91 = objc_msgSend(v90, "isRemoteGateway");

                if ((v91 & 1) == 0)
                  objc_msgSend(v83, "addObject:", v89);
              }
              v86 = objc_msgSend(v84, "countByEnumeratingWithState:objects:count:", &v283, v309, 16);
            }
            while (v86);
          }

          v92 = (void *)objc_msgSend(v83, "copy");
          objc_msgSend(v257, "encodeObject:forKey:", v92, CFSTR("HM.invitations"));

          v39 = v248;
          v67 = v243;
          v69 = v253;
        }
      }
      else
      {
        -[HMDHome isAdminUser](v248, "isAdminUser");
      }
      v163 = (void *)objc_msgSend(v69, "copy");
      objc_msgSend(v4, "encodeObject:forKey:", v163, CFSTR("users"));

      objc_msgSend(v4, "encodeBool:forKey:", -[HMDHome isAdminUser](v39, "isAdminUser"), CFSTR("isAdminUser"));
      objc_msgSend(v4, "encodeBool:forKey:", -[HMDHome isOwnerUser](v39, "isOwnerUser"), CFSTR("HM.isOwnerUser"));
      v164 = -[HMDHome isAccessToHomeAllowed](v39, "isAccessToHomeAllowed");
      objc_msgSend(v4, "encodeBool:forKey:", v164, *MEMORY[0x24BDD5DF0]);
      v56 = v247;
      if ((v164 & 1) == 0)
      {
        v165 = -[HMDHome accessNotAllowedReasonCode](v39, "accessNotAllowedReasonCode");
        objc_msgSend(v4, "encodeInteger:forKey:", v165, *MEMORY[0x24BDD5C18]);
      }
      -[HMDHome overriddenHomeAccessControl](v39, "overriddenHomeAccessControl");
      v166 = (void *)objc_claimAutoreleasedReturnValue();

      if (!v166)
        goto LABEL_134;
      -[HMDHome overriddenHomeAccessControl](v39, "overriddenHomeAccessControl");
      v109 = (id)objc_claimAutoreleasedReturnValue();
      v167 = objc_msgSend(v109, "unsignedIntegerValue");
      objc_msgSend(v4, "encodeInteger:forKey:", v167, *MEMORY[0x24BDD5C10]);
    }
    else
    {
      v56 = v247;
      v39 = v248;
      if ((v249 | v245) == 1)
      {
        v93 = (void *)MEMORY[0x24BDBCEB8];
        -[HMDHome users](v248, "users");
        v94 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v93, "arrayWithArray:", v94);
        v69 = (void *)objc_claimAutoreleasedReturnValue();

        if (objc_msgSend(v4, "hmd_isForRemoteTransportOnSameAccount"))
        {
          objc_msgSend(v4, "hmd_supportedFeatures");
          v95 = (void *)objc_claimAutoreleasedReturnValue();
          v96 = objc_msgSend(v95, "containsObject:", &unk_24E96A640);

          if ((v96 & 1) == 0)
          {
            v97 = v67;
            v281 = 0u;
            v282 = 0u;
            v279 = 0u;
            v280 = 0u;
            -[HMDHome users](v248, "users");
            v98 = (void *)objc_claimAutoreleasedReturnValue();
            v99 = (void *)objc_msgSend(v98, "copy");

            v100 = objc_msgSend(v99, "countByEnumeratingWithState:objects:count:", &v279, v308, 16);
            if (v100)
            {
              v101 = v100;
              v102 = *(_QWORD *)v280;
              do
              {
                for (m = 0; m != v101; ++m)
                {
                  if (*(_QWORD *)v280 != v102)
                    objc_enumerationMutation(v99);
                  v104 = *(void **)(*((_QWORD *)&v279 + 1) + 8 * m);
                  if (objc_msgSend(v104, "requiresMakoSupport"))
                    objc_msgSend(v69, "removeObject:", v104);
                }
                v101 = objc_msgSend(v99, "countByEnumeratingWithState:objects:count:", &v279, v308, 16);
              }
              while (v101);
            }

            v39 = v248;
            v67 = v97;
          }
        }
        v105 = (void *)objc_msgSend(v67, "mutableCopy");
        v106 = v67;
        objc_msgSend(v69, "removeObjectsInArray:", v67);
        if ((objc_msgSend(v4, "hmd_isForRemoteGatewayCoder") & 1) == 0)
        {
          -[HMDHome usersPendingUserManagementOperations](v39, "usersPendingUserManagementOperations");
          v107 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v69, "removeObjectsInArray:", v107);

          -[HMDHome usersPendingUserManagementOperations](v39, "usersPendingUserManagementOperations");
          v108 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v105, "removeObjectsInArray:", v108);

        }
        v277 = 0u;
        v278 = 0u;
        v275 = 0u;
        v276 = 0u;
        v109 = v105;
        v110 = objc_msgSend(v109, "countByEnumeratingWithState:objects:count:", &v275, v307, 16);
        if (v110)
        {
          v111 = v110;
          v112 = *(_QWORD *)v276;
          do
          {
            for (n = 0; n != v111; ++n)
            {
              if (*(_QWORD *)v276 != v112)
                objc_enumerationMutation(v109);
              objc_msgSend(*(id *)(*((_QWORD *)&v275 + 1) + 8 * n), "legacyUser");
              v114 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v69, "addObject:", v114);

            }
            v111 = objc_msgSend(v109, "countByEnumeratingWithState:objects:count:", &v275, v307, 16);
          }
          while (v111);
        }

        v115 = (void *)objc_msgSend(v69, "copy");
        objc_msgSend(v4, "encodeObject:forKey:", v115, CFSTR("users"));

        v116 = (void *)objc_msgSend(v109, "copy");
        objc_msgSend(v4, "encodeObject:forKey:", v116, CFSTR("residentDevices"));

        v56 = v247;
        v67 = v106;
      }
      else
      {
        if (!objc_msgSend(v4, "hmd_isForRemoteTransport"))
        {
LABEL_135:

          goto LABEL_136;
        }
        objc_msgSend(MEMORY[0x24BDBCEB8], "array");
        v69 = (void *)objc_claimAutoreleasedReturnValue();
        -[HMDHome owner](v248, "owner");
        v117 = (void *)objc_claimAutoreleasedReturnValue();

        if (v117)
        {
          -[HMDHome owner](v248, "owner");
          v118 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v69, "addObject:", v118);

          objc_msgSend(v4, "hmd_user");
          v119 = (void *)objc_claimAutoreleasedReturnValue();

          if (v119)
          {
            objc_msgSend(v4, "hmd_user");
            v120 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v69, "addObject:", v120);

          }
        }
        v273 = 0u;
        v274 = 0u;
        v271 = 0u;
        v272 = 0u;
        v244 = v67;
        v121 = v67;
        v122 = objc_msgSend(v121, "countByEnumeratingWithState:objects:count:", &v271, v306, 16);
        if (v122)
        {
          v123 = v122;
          v124 = *(_QWORD *)v272;
          do
          {
            for (ii = 0; ii != v123; ++ii)
            {
              if (*(_QWORD *)v272 != v124)
                objc_enumerationMutation(v121);
              objc_msgSend(*(id *)(*((_QWORD *)&v271 + 1) + 8 * ii), "legacyUser");
              v126 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v69, "addObject:", v126);

            }
            v123 = objc_msgSend(v121, "countByEnumeratingWithState:objects:count:", &v271, v306, 16);
          }
          while (v123);
        }

        v127 = (void *)objc_msgSend(v69, "copy");
        objc_msgSend(v4, "encodeObject:forKey:", v127, CFSTR("users"));

        objc_msgSend(v4, "encodeObject:forKey:", v121, CFSTR("residentDevices"));
        v254 = v69;
        if (objc_msgSend(v4, "hmd_isForRemoteUserAdministrator"))
        {
          v128 = (void *)MEMORY[0x24BDBCEB8];
          -[HMDHome users](v248, "users");
          v129 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v128, "arrayWithCapacity:", objc_msgSend(v129, "count"));
          v130 = (void *)objc_claimAutoreleasedReturnValue();

          v269 = 0u;
          v270 = 0u;
          v267 = 0u;
          v268 = 0u;
          -[HMDHome users](v248, "users");
          v131 = (void *)objc_claimAutoreleasedReturnValue();
          v132 = objc_msgSend(v131, "countByEnumeratingWithState:objects:count:", &v267, v305, 16);
          if (v132)
          {
            v133 = v132;
            v134 = *(_QWORD *)v268;
            do
            {
              for (jj = 0; jj != v133; ++jj)
              {
                if (*(_QWORD *)v268 != v134)
                  objc_enumerationMutation(v131);
                v136 = *(void **)(*((_QWORD *)&v267 + 1) + 8 * jj);
                if ((objc_msgSend(v136, "isRemoteGateway") & 1) == 0
                  && (objc_msgSend(v136, "privilege") == 4 || !objc_msgSend(v136, "privilege")))
                {
                  if (!objc_msgSend(v136, "requiresMakoSupport")
                    || (objc_msgSend(v4, "hmd_supportedFeatures"),
                        v137 = (void *)objc_claimAutoreleasedReturnValue(),
                        v138 = objc_msgSend(v137, "containsObject:", &unk_24E96A640),
                        v137,
                        v69 = v254,
                        v138))
                  {
                    objc_msgSend(v130, "addObject:", v136);
                  }
                }
              }
              v133 = objc_msgSend(v131, "countByEnumeratingWithState:objects:count:", &v267, v305, 16);
            }
            while (v133);
          }

          v139 = (void *)objc_msgSend(v130, "copy");
          objc_msgSend(v4, "encodeObject:forKey:", v139, CFSTR("HM.sharedUsers"));

          v57 = v256;
        }
        v140 = (void *)MEMORY[0x227676638]();
        v39 = v248;
        v141 = v248;
        HMFGetOSLogHandle();
        v142 = (id)objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v142, OS_LOG_TYPE_INFO))
        {
          HMFGetLogIdentifier();
          v143 = (id)objc_claimAutoreleasedReturnValue();
          -[HMDHome users](v141, "users");
          v144 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v4, "hmd_user");
          v145 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543874;
          v297 = v143;
          v298 = 2112;
          v299 = v144;
          v300 = 2112;
          v301 = v145;
          _os_log_impl(&dword_2218F0000, v142, OS_LOG_TYPE_INFO, "%{public}@encode users: %@, coder username: %@", buf, 0x20u);

          v69 = v254;
          v39 = v248;
        }

        objc_autoreleasePoolPop(v140);
        v265 = 0u;
        v266 = 0u;
        v263 = 0u;
        v264 = 0u;
        -[HMDHome users](v141, "users");
        v109 = (id)objc_claimAutoreleasedReturnValue();
        v146 = objc_msgSend(v109, "countByEnumeratingWithState:objects:count:", &v263, v304, 16);
        if (v146)
        {
          v147 = v146;
          v148 = *(_QWORD *)v264;
          v251 = v109;
          v252 = v141;
          do
          {
            v149 = 0;
            v258 = v147;
            do
            {
              if (*(_QWORD *)v264 != v148)
                objc_enumerationMutation(v109);
              v150 = *(void **)(*((_QWORD *)&v263 + 1) + 8 * v149);
              objc_msgSend(v4, "hmd_user");
              v151 = (void *)objc_claimAutoreleasedReturnValue();
              v152 = objc_msgSend(v150, "isEqual:", v151);

              if (v152)
              {
                v153 = (void *)MEMORY[0x227676638]();
                v154 = v141;
                HMFGetOSLogHandle();
                v155 = (id)objc_claimAutoreleasedReturnValue();
                if (os_log_type_enabled(v155, OS_LOG_TYPE_INFO))
                {
                  HMFGetLogIdentifier();
                  v255 = v153;
                  v156 = (id)objc_claimAutoreleasedReturnValue();
                  -[HMDHome users](v154, "users");
                  v157 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend(v4, "hmd_user");
                  v158 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend(v150, "presenceAuthStatus");
                  v159 = v148;
                  v160 = v4;
                  v161 = (void *)objc_claimAutoreleasedReturnValue();
                  *(_DWORD *)buf = 138544130;
                  v297 = v156;
                  v298 = 2112;
                  v299 = v157;
                  v300 = 2112;
                  v301 = v158;
                  v302 = 2112;
                  v303 = v161;
                  _os_log_impl(&dword_2218F0000, v155, OS_LOG_TYPE_INFO, "%{public}@encode users: %@, coder username: %@, %@", buf, 0x2Au);

                  v4 = v160;
                  v148 = v159;

                  v109 = v251;
                  v141 = v252;

                  v153 = v255;
                }

                objc_autoreleasePoolPop(v153);
                objc_msgSend(v150, "presenceAuthStatus");
                v162 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v162, "addToCoder:", v4);

                v57 = v256;
                v147 = v258;
              }
              ++v149;
            }
            while (v147 != v149);
            v147 = objc_msgSend(v109, "countByEnumeratingWithState:objects:count:", &v263, v304, 16);
          }
          while (v147);
          v56 = v247;
          v39 = v248;
          v67 = v244;
          v69 = v254;
        }
        else
        {
          v56 = v247;
          v67 = v244;
        }
      }
    }

LABEL_134:
    goto LABEL_135;
  }
LABEL_136:
  if ((v56 & 0x9FD1) != 0)
    -[HMDHome _encodeObjectsWithAccessoriesWithCoder:](v39, "_encodeObjectsWithAccessoriesWithCoder:", v4);
  -[HMDHome roomForEntireHome](v39, "roomForEntireHome");
  v168 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "encodeObject:forKey:", v168, CFSTR("roomForEntireHome"));

  if ((v56 & 5) != 0 && (objc_msgSend(v4, "hmd_isForRemoteGatewayCoder") & 1) == 0)
  {
    -[HMDHome rooms](v39, "rooms");
    v169 = (void *)objc_claimAutoreleasedReturnValue();
    v170 = (void *)objc_msgSend(v169, "copy");
    objc_msgSend(v4, "encodeObject:forKey:", v170, CFSTR("rooms"));

    -[HMDHome zones](v39, "zones");
    v171 = (void *)objc_claimAutoreleasedReturnValue();
    v172 = (void *)objc_msgSend(v171, "copy");
    objc_msgSend(v4, "encodeObject:forKey:", v172, CFSTR("zones"));

  }
  if ((v56 & 0x801) != 0)
  {
    if (v250)
    {
      if (!v246)
        goto LABEL_147;
      -[HMDHome residentDeviceManager](v39, "residentDeviceManager");
      v173 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v173, "residentDevices");
      v174 = (void *)objc_claimAutoreleasedReturnValue();

      objc_msgSend(v4, "encodeObject:forKey:", v174, CFSTR("residentDevices"));
      -[HMDHome notificationRegistrations](v39, "notificationRegistrations");
      v175 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "encodeBool:forKey:", objc_msgSend(v175, "count") != 0, CFSTR("kCharacteristicNotificationEnableKey"));

      -[HMDHome notificationsUpdatedTime](v39, "notificationsUpdatedTime");
      v176 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "encodeObject:forKey:", v176, CFSTR("kCharacteristicNotificationEnableTime"));

    }
    else
    {
      -[HMDHome enabledResidents](v39, "enabledResidents");
      v177 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v177, "na_filter:", &__block_literal_global_1516);
      v178 = (void *)objc_claimAutoreleasedReturnValue();

      objc_msgSend(v4, "encodeInteger:forKey:", objc_msgSend(v178, "count"), CFSTR("HMD.nonIPadResidentDeviceCount"));
      -[HMDHome primaryNetworkRouterManagingDeviceUUID](v39, "primaryNetworkRouterManagingDeviceUUID");
      v174 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "encodeObject:forKey:", v174, CFSTR("HMDHomePrimaryNetworkRouterManagingDeviceUUIDCodingKey"));
    }

  }
LABEL_147:
  if ((v56 & 0x85D1) != 0
    && (!objc_msgSend(v4, "hmd_isForXPCTransport")
     || objc_msgSend(v4, "hmd_isForXPCTransportEntitledForSPIAccess")))
  {
    v179 = -[HMDHome minimumMediaUserPrivilege](v39, "minimumMediaUserPrivilege");
    objc_msgSend(v4, "encodeInteger:forKey:", v179, *MEMORY[0x24BDD6190]);
    v180 = -[HMDHome isMediaPeerToPeerEnabled](v39, "isMediaPeerToPeerEnabled");
    objc_msgSend(v4, "encodeBool:forKey:", v180, *MEMORY[0x24BDD61A8]);
    if ((objc_msgSend(v4, "hmd_isForNonAdminSharedUser") & 1) == 0)
    {
      -[HMDHome mediaPassword](v39, "mediaPassword");
      v181 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "encodeObject:forKey:", v181, *MEMORY[0x24BDD6198]);

    }
  }
  if ((v56 & 0x11) != 0
    && (!objc_msgSend(v4, "hmd_isForXPCTransport")
     || objc_msgSend(v4, "hmd_isForXPCTransportEntitledForSPIAccess")))
  {
    v182 = -[HMDHome isAutomaticSoftwareUpdateEnabled](v39, "isAutomaticSoftwareUpdateEnabled");
    objc_msgSend(v4, "encodeBool:forKey:", v182, *MEMORY[0x24BDD5CA8]);
    v183 = -[HMDHome isAutomaticThirdPartyAccessorySoftwareUpdateEnabled](v39, "isAutomaticThirdPartyAccessorySoftwareUpdateEnabled");
    objc_msgSend(v4, "encodeBool:forKey:", v183, *MEMORY[0x24BDD5CB0]);
  }
  -[HMDHome matterFabricID](v39, "matterFabricID");
  v184 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "encodeObject:forKey:", v184, CFSTR("HM.matterFabricID"));

  if ((v56 & 1) != 0)
  {
    if (v249)
    {
      -[HMDHome presenceMonitor](v39, "presenceMonitor");
      v185 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "encodeObject:forKey:", v185, CFSTR("kHMDHomePresenceMonitorCodingKey"));

      -[HMDHome unfilteredThreadNetworkID](v39, "unfilteredThreadNetworkID");
      v186 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "encodeObject:forKey:", v186, CFSTR("HMHM.threadNetworkID"));

    }
    if ((objc_msgSend(v4, "hmd_isForRemoteGatewayCoder") & 1) != 0)
    {
      if (!v250)
        goto LABEL_167;
    }
    else
    {
      if ((v250 & 1) == 0)
      {
        objc_msgSend(MEMORY[0x24BDD16E0], "numberWithBool:", -[HMDHome allowsRemoteAccess](v39, "allowsRemoteAccess"));
        v190 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v4, "encodeObject:forKey:", v190, CFSTR("HM.allowsRemoteAccess"));

        -[HMDHome networkProtectionGroupRegistry](v39, "networkProtectionGroupRegistry");
        v191 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v191, "persistedGroups");
        v192 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v4, "encodeObject:forKey:", v192, *MEMORY[0x24BDD5C30]);

LABEL_167:
        -[HMDHome appData](v39, "appData");
        v189 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v4, "encodeObject:forKey:", v189, CFSTR("HM.appDataRepository"));
LABEL_168:

        if (v249)
        {
          -[HMDHome removedUsers](v39, "removedUsers");
          v193 = (void *)objc_claimAutoreleasedReturnValue();
          v194 = (void *)objc_msgSend(v193, "copy");
          objc_msgSend(v4, "encodeObject:forKey:", v194, CFSTR("HM.removedUsersCodingKey"));

        }
        else if (!v245)
        {
LABEL_172:
          if ((v249 | v245) == 1)
          {
            isWatch();
            if ((objc_msgSend(v4, "hmd_isForRemoteGatewayCoder") & 1) == 0)
            {
              v197 = (void *)MEMORY[0x24BDBCEB8];
              -[HMDHome outgoingInvitations](v39, "outgoingInvitations");
              v198 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v197, "arrayWithArray:", v198);
              v199 = (void *)objc_claimAutoreleasedReturnValue();

              if (objc_msgSend(v4, "hmd_isForRemoteTransportOnSameAccount"))
              {
                objc_msgSend(v4, "hmd_supportedFeatures");
                v200 = (void *)objc_claimAutoreleasedReturnValue();
                v201 = objc_msgSend(v200, "containsObject:", &unk_24E96A640);

                if ((v201 & 1) == 0)
                {
                  v261 = 0u;
                  v262 = 0u;
                  v259 = 0u;
                  v260 = 0u;
                  -[HMDHome outgoingInvitations](v39, "outgoingInvitations");
                  v202 = (void *)objc_claimAutoreleasedReturnValue();
                  v203 = objc_msgSend(v202, "countByEnumeratingWithState:objects:count:", &v259, v295, 16);
                  if (v203)
                  {
                    v204 = v203;
                    v205 = *(_QWORD *)v260;
                    do
                    {
                      for (kk = 0; kk != v204; ++kk)
                      {
                        if (*(_QWORD *)v260 != v205)
                          objc_enumerationMutation(v202);
                        v207 = *(void **)(*((_QWORD *)&v259 + 1) + 8 * kk);
                        objc_msgSend(v207, "user");
                        v208 = (void *)objc_claimAutoreleasedReturnValue();
                        if (objc_msgSend(v208, "requiresMakoSupport"))
                          objc_msgSend(v199, "removeObject:", v207);

                      }
                      v204 = objc_msgSend(v202, "countByEnumeratingWithState:objects:count:", &v259, v295, 16);
                    }
                    while (v204);
                  }

                  v39 = v248;
                }
              }
              v209 = (void *)objc_msgSend(v199, "copy");
              objc_msgSend(v4, "encodeObject:forKey:", v209, CFSTR("HM.invitations"));

            }
          }
          if (!objc_msgSend(v4, "hmd_isForXPCTransport")
            || objc_msgSend(v4, "hmd_isForXPCTransportEntitledForSPIAccess"))
          {
            v210 = -[HMDHome protectionMode](v39, "protectionMode");
            objc_msgSend(v4, "encodeInteger:forKey:", v210, *MEMORY[0x24BDD61F0]);
          }
          if (objc_msgSend(v4, "hmd_isForXPCTransport"))
          {
            if (objc_msgSend(v4, "hmd_isForXPCTransportEntitledForSPIAccess"))
            {
              v211 = -[HMDHome networkRouterSupportDisableReason](v39, "networkRouterSupportDisableReason");
              objc_msgSend(v4, "encodeInteger:forKey:", v211, *MEMORY[0x24BDD61F8]);
            }
            v212 = -[HMDHome networkRouterSupport](v39, "networkRouterSupport");
            objc_msgSend(v4, "encodeBool:forKey:", (v212 >> 2) & 1, *MEMORY[0x24BDD5C40]);
          }
          -[HMDHome threadNetworkID](v39, "threadNetworkID");
          v213 = (void *)objc_claimAutoreleasedReturnValue();
          if (v213 && objc_msgSend(v4, "hmd_isForXPCTransport"))
          {
            v214 = objc_msgSend(v4, "hmd_isForXPCTransportEntitledForSPIAccess");

            if (!v214)
              goto LABEL_199;
            -[HMDHome threadNetworkID](v39, "threadNetworkID");
            v213 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v4, "encodeObject:forKey:", v213, *MEMORY[0x24BDD6350]);
          }

LABEL_199:
          if ((objc_msgSend(v4, "hmd_isForXPCTransport") & 1) == 0)
          {
            -[HMDHome activeNetworkRouterUUID](v39, "activeNetworkRouterUUID");
            v215 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v215, "UUIDString");
            v216 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v4, "encodeObject:forKey:", v216, CFSTR("HMHM.activeNetworkRouter"));

            -[HMDHome minimumNetworkRouterSupportHomeKitVersion](v39, "minimumNetworkRouterSupportHomeKitVersion");
            v217 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v217, "versionString");
            v218 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v4, "encodeObject:forKey:", v218, CFSTR("HMHM.minimumNetworkRouterSupportHomeKitVersion"));

            -[HMDHome minHomeKitVersionForAccessoryNetworkProtectionChange](v39, "minHomeKitVersionForAccessoryNetworkProtectionChange");
            v219 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v219, "versionString");
            v220 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v4, "encodeObject:forKey:", v220, CFSTR("HMHM.minHomeKitVersionForAccessoryNetworkProtectionChangeCodingKey"));

          }
          if (v250)
          {
            if (!objc_msgSend(v4, "hmd_isForXPCTransportEntitledForSPIAccess"))
            {
LABEL_209:
              if (v249 | v245)
              {
                -[HMDHome chipStorage](v39, "chipStorage");
                v228 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v4, "encodeObject:forKey:", v228, CFSTR("HMHM.chipStorage"));

              }
              if (!-[HMDHome isOwnerUser](v39, "isOwnerUser")
                && ((objc_msgSend(v4, "hmd_isForLocalStore") & 1) != 0
                 || objc_msgSend(v4, "hmd_isForRemoteTransportOnSameAccount")))
              {
                -[HMDHome sharedHomeSourceVersion](v39, "sharedHomeSourceVersion");
                v229 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v4, "encodeObject:forKey:", v229, CFSTR("kHomeKitVersionStringKey"));

              }
              if ((v250 & v246) == 1)
              {
                -[HMDHome primaryResident](v39, "primaryResident");
                v230 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v230, "capabilities");
                v231 = (void *)objc_claimAutoreleasedReturnValue();
                v232 = objc_msgSend(v231, "supportsResidentActionSetStateEvaluation");
                objc_msgSend(v4, "encodeBool:forKey:", v232, *MEMORY[0x24BDD6320]);

                v233 = -[HMDHome isEventLogEnabled](v39, "isEventLogEnabled");
                objc_msgSend(v4, "encodeBool:forKey:", v233, *MEMORY[0x24BDD5D18]);
                v234 = -[HMDHome didOnboardEventLog](v39, "didOnboardEventLog");
                objc_msgSend(v4, "encodeBool:forKey:", v234, *MEMORY[0x24BDD5D20]);
                v235 = -[HMDHome eventLogDuration](v39, "eventLogDuration");
                objc_msgSend(v4, "encodeInteger:forKey:", v235, *MEMORY[0x24BDD5D10]);
                -[HMDHome timeZone](v39, "timeZone");
                v236 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v4, "encodeObject:forKey:", v236, *MEMORY[0x24BDD6358]);

                -[HMDHome numberOfCameras](v39, "numberOfCameras");
                v237 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v4, "encodeObject:forKey:", v237, *MEMORY[0x24BDD6210]);

                -[HMDHome featureDataSource](v39, "featureDataSource");
                v238 = (void *)objc_claimAutoreleasedReturnValue();
                -[HMDHome uuid](v39, "uuid");
                v239 = (void *)objc_claimAutoreleasedReturnValue();
                v240 = objc_msgSend(v238, "isResidentSelectionEnabledForHomeUUID:", v239);

                if (v240)
                {
                  objc_msgSend(v4, "encodeBool:forKey:", -[HMDHome supportsResidentSelection](v39, "supportsResidentSelection"), CFSTR("HMHomeResidentSelectionSupported"));
                  -[HMDHome userSelectedPreferredResident](v39, "userSelectedPreferredResident");
                  v241 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend(v4, "encodeObject:forKey:", v241, CFSTR("HMHomeUserSelectedPreferredResident"));

                  -[HMDHome autoSelectedPreferredResidents](v39, "autoSelectedPreferredResidents");
                  v242 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend(v4, "encodeObject:forKey:", v242, CFSTR("HMHomeAutoSelectedPreferredResidents"));

                }
              }
              goto LABEL_218;
            }
            -[HMDHome personManagerSettings](v39, "personManagerSettings");
            v221 = (void *)objc_claimAutoreleasedReturnValue();
            v222 = (const __CFString *)*MEMORY[0x24BDD6218];
          }
          else
          {
            -[HMDHome personManagerSettings](v39, "personManagerSettings");
            v223 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v4, "encodeObject:forKey:", v223, *MEMORY[0x24BDD6218]);

            -[HMDHome personManagerZoneUUID](v39, "personManagerZoneUUID");
            v224 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v4, "encodeObject:forKey:", v224, CFSTR("HMHM.personManagerZoneUUID"));

            -[HMDHome naturalLightingContext](v39, "naturalLightingContext");
            v225 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v4, "encodeObject:forKey:", v225, CFSTR("HM.nlcck"));

            if ((objc_msgSend(v4, "hmd_isForLocalStore") & 1) != 0
              || objc_msgSend(v4, "hmd_isForRemoteUserAdministrator"))
            {
              -[HMDHome labelsByAccessCode](v39, "labelsByAccessCode");
              v226 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v4, "encodeObject:forKey:", v226, CFSTR("HMDHomeLabelsByAccessCodeCodingKey"));

              -[HMDHome removedUserInfoByAccessCode](v39, "removedUserInfoByAccessCode");
              v227 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v4, "encodeObject:forKey:", v227, CFSTR("HMDHomeRemovedUserInfoByAccessCodeCodingKey"));

            }
            -[HMDHome nfcReaderKey](v39, "nfcReaderKey");
            v221 = (void *)objc_claimAutoreleasedReturnValue();
            v222 = CFSTR("HMDHomeNFCReaderKeyCodingKey");
          }
          objc_msgSend(v4, "encodeObject:forKey:", v221, v222);

          goto LABEL_209;
        }
        -[HMDHome presenceAuthStatus](v39, "presenceAuthStatus");
        v195 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v195, "addToCoder:", v4);

        -[HMDHome presenceComputeStatus](v39, "presenceComputeStatus");
        v196 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v196, "addToCoder:", v4);

        goto LABEL_172;
      }
      if (v246)
      {
        -[HMDHome networkProtectionGroupRegistry](v39, "networkProtectionGroupRegistry");
        v187 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v187, "activeGroups");
        v188 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v4, "encodeObject:forKey:", v188, *MEMORY[0x24BDD5C30]);

      }
    }
    -[HMDHome appData](v39, "appData");
    v189 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v189, "encodeForXPCTransportWithCoder:key:", v4, CFSTR("HM.appData"));
    goto LABEL_168;
  }
LABEL_218:

}

- (void)__encodeAccessoriesWithCoder:(id)a3 options:(unint64_t)a4
{
  __int16 v4;
  void *v5;
  void *v6;
  void *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t i;
  void *v13;
  int v14;
  id v15;
  void *v16;
  id v17;
  id v18;
  void *v19;
  id v20;
  void *v21;
  id v22;
  void *v23;
  id v24;
  void *v25;
  char isKindOfClass;
  void *v27;
  char v28;
  void *v29;
  void *v30;
  HMDHome *v31;
  NSObject *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  id v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t j;
  void *v46;
  void *v47;
  void *v48;
  id v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t k;
  void *v54;
  void *v55;
  void *v56;
  void *v57;
  id v59;
  void *v60;
  void *v61;
  id v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  _BYTE v75[128];
  uint8_t v76[128];
  uint8_t buf[4];
  void *v78;
  __int16 v79;
  void *v80;
  __int16 v81;
  void *v82;
  __int16 v83;
  void *v84;
  _BYTE v85[128];
  uint64_t v86;

  v4 = a4;
  v86 = *MEMORY[0x24BDAC8D0];
  v59 = a3;
  -[HMDHome accessories](self, "accessories");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x24BDBCEB8], "arrayWithCapacity:", objc_msgSend(v5, "count"));
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x24BDBCEB8], "arrayWithCapacity:", objc_msgSend(v5, "count"));
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v71 = 0u;
  v72 = 0u;
  v73 = 0u;
  v74 = 0u;
  v8 = v5;
  v9 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v71, v85, 16);
  v60 = v6;
  v61 = v7;
  v62 = v8;
  if (v9)
  {
    v10 = v9;
    v11 = *(_QWORD *)v72;
    do
    {
      for (i = 0; i != v10; ++i)
      {
        if (*(_QWORD *)v72 != v11)
          objc_enumerationMutation(v8);
        v13 = *(void **)(*((_QWORD *)&v71 + 1) + 8 * i);
        v14 = objc_msgSend(v13, "isCurrentAccessory");
        if ((v4 & 0x10) != 0 && v14)
        {
          objc_msgSend(v7, "addObject:", v13);
          continue;
        }
        v15 = v13;
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0)
          v16 = v15;
        else
          v16 = 0;
        v17 = v16;

        if (v17)
        {
          if ((v4 & 0x100) != 0)
            objc_msgSend(v6, "addObject:", v17);
          goto LABEL_43;
        }
        v18 = v15;
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0)
          v19 = v18;
        else
          v19 = 0;
        v20 = v19;

        if (v20)
        {
          if ((v4 & 0x40) != 0
            || (v4 & 0x800) != 0
            && (objc_msgSend(v20, "device"), v21 = (void *)objc_claimAutoreleasedReturnValue(), v21, v21))
          {
            objc_msgSend(v7, "addObject:", v20);
          }
          goto LABEL_42;
        }
        v22 = v18;
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0)
          v23 = v22;
        else
          v23 = 0;
        v24 = v23;

        if (v24)
        {
          objc_msgSend(v24, "hostAccessory");
          v25 = (void *)objc_claimAutoreleasedReturnValue();
          objc_opt_class();
          isKindOfClass = objc_opt_isKindOfClass();

          if ((isKindOfClass & 1) == 0 || !v25)
          {
            if (objc_msgSend(v24, "hasTelevisionService"))
            {
              if ((v4 & 0x400) == 0)
                goto LABEL_41;
            }
            else
            {
              objc_msgSend(v24, "networkRouterController");
              v27 = (void *)objc_claimAutoreleasedReturnValue();

              if (v27)
              {
                if ((v4 & 0x1000) == 0)
                  goto LABEL_41;
              }
              else if ((v4 & 0x200) == 0)
              {
                v28 = objc_msgSend(v24, "hasSmartSpeakerService");
                if ((v4 & 0x100) == 0 || (v28 & 1) == 0)
                {
                  objc_msgSend(v24, "siriEndpointProfile");
                  v29 = (void *)objc_claimAutoreleasedReturnValue();

                  if ((v4 & 0x8000) == 0 || !v29)
                    goto LABEL_41;
                }
              }
            }
            objc_msgSend(v61, "addObject:", v22);
          }
        }
LABEL_41:

        v6 = v60;
        v7 = v61;
LABEL_42:

        v8 = v62;
LABEL_43:

      }
      v10 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v71, v85, 16);
    }
    while (v10);
  }

  v30 = (void *)MEMORY[0x227676638]();
  v31 = self;
  HMFGetOSLogHandle();
  v32 = objc_claimAutoreleasedReturnValue();
  v33 = v59;
  if (os_log_type_enabled(v32, OS_LOG_TYPE_DEBUG))
  {
    HMFGetLogIdentifier();
    v34 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v59, "hmd_applicationBundleIdentifier");
    v35 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedInteger:", objc_msgSend(v61, "count"));
    v36 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v61, "shortDescription");
    v37 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138544130;
    v78 = v34;
    v79 = 2112;
    v80 = v35;
    v81 = 2112;
    v82 = v36;
    v83 = 2112;
    v84 = v37;
    _os_log_impl(&dword_2218F0000, v32, OS_LOG_TYPE_DEBUG, "%{public}@encoded Accessories [%@]: %@, %@", buf, 0x2Au);

    v6 = v60;
    v7 = v61;

    v8 = v62;
  }

  objc_autoreleasePoolPop(v30);
  v38 = (void *)objc_msgSend(v7, "copy");
  objc_msgSend(v59, "encodeObject:forKey:", v38, CFSTR("accessories"));

  v39 = (void *)objc_msgSend(v6, "copy");
  objc_msgSend(v59, "encodeObject:forKey:", v39, CFSTR("accessories.airplay"));

  if ((v4 & 5) == 0)
  {
    objc_msgSend(MEMORY[0x24BDBCEF0], "setWithCapacity:", objc_msgSend(v8, "count"));
    v40 = (void *)objc_claimAutoreleasedReturnValue();
    v67 = 0u;
    v68 = 0u;
    v69 = 0u;
    v70 = 0u;
    v41 = v7;
    v42 = objc_msgSend(v41, "countByEnumeratingWithState:objects:count:", &v67, v76, 16);
    if (v42)
    {
      v43 = v42;
      v44 = *(_QWORD *)v68;
      do
      {
        for (j = 0; j != v43; ++j)
        {
          if (*(_QWORD *)v68 != v44)
            objc_enumerationMutation(v41);
          v46 = *(void **)(*((_QWORD *)&v67 + 1) + 8 * j);
          objc_msgSend(v46, "room");
          v47 = (void *)objc_claimAutoreleasedReturnValue();

          if (v47)
          {
            objc_msgSend(v46, "room");
            v48 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v40, "addObject:", v48);

          }
        }
        v43 = objc_msgSend(v41, "countByEnumeratingWithState:objects:count:", &v67, v76, 16);
      }
      while (v43);
    }

    v65 = 0u;
    v66 = 0u;
    v63 = 0u;
    v64 = 0u;
    v49 = v6;
    v50 = objc_msgSend(v49, "countByEnumeratingWithState:objects:count:", &v63, v75, 16);
    if (v50)
    {
      v51 = v50;
      v52 = *(_QWORD *)v64;
      do
      {
        for (k = 0; k != v51; ++k)
        {
          if (*(_QWORD *)v64 != v52)
            objc_enumerationMutation(v49);
          v54 = *(void **)(*((_QWORD *)&v63 + 1) + 8 * k);
          objc_msgSend(v54, "room");
          v55 = (void *)objc_claimAutoreleasedReturnValue();

          if (v55)
          {
            objc_msgSend(v54, "room");
            v56 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v40, "addObject:", v56);

          }
        }
        v51 = objc_msgSend(v49, "countByEnumeratingWithState:objects:count:", &v63, v75, 16);
      }
      while (v51);
    }

    objc_msgSend(v40, "allObjects");
    v57 = (void *)objc_claimAutoreleasedReturnValue();
    v33 = v59;
    objc_msgSend(v59, "encodeObject:forKey:", v57, CFSTR("rooms"));

    v7 = v61;
  }

}

- (void)_encodeObjectsWithAccessoriesWithCoder:(id)a3
{
  id v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  HMDHome *v12;
  void *v13;
  void *v14;
  char v15;
  void *v16;
  HMDHome *v17;
  NSObject *v18;
  void *v19;
  void *v20;
  void *v21;
  char v22;
  void *v23;
  HMDHome *v24;
  NSObject *v25;
  void *v26;
  void *v27;
  void *v28;
  HMDHome *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t i;
  id v42;
  void *v43;
  id v44;
  id v45;
  void *v46;
  int v47;
  void *v48;
  void *v49;
  void *v50;
  void *v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t j;
  void *v57;
  void *v58;
  void *v59;
  void *v60;
  void *v61;
  void *v62;
  HMDHome *v63;
  NSObject *v64;
  void *v65;
  void *v66;
  void *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t k;
  void *v72;
  void *v73;
  void *v74;
  int v75;
  void *v76;
  int v77;
  int v78;
  HMDHome *v79;
  id v80;
  void *v81;
  int v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  _BYTE v95[128];
  _BYTE v96[128];
  uint8_t v97[128];
  uint8_t buf[4];
  void *v99;
  uint64_t v100;

  v100 = *MEMORY[0x24BDAC8D0];
  v4 = a3;
  v5 = objc_msgSend(v4, "hmd_isForXPCTransport");
  v6 = objc_msgSend(v4, "hmd_isForLocalStore");
  v7 = objc_msgSend(v4, "hmd_isForRemoteTransport");
  v8 = objc_msgSend(v4, "hmd_isForRemoteTransportOnSameAccount");
  v9 = objc_msgSend(v4, "hmd_isForRemoteGatewayCoder");
  v82 = objc_msgSend(v4, "hmd_isForXPCTransportEntitledForSPIAccess");
  v10 = objc_msgSend(v4, "hmd_homeManagerOptions");
  v11 = v10;
  if ((v10 & 1) != 0)
  {
    if (v5)
    {
      if (v82)
        v11 = v10 | 0x9FD0;
    }
    else if (((v7 ^ 1 | v8) & 1) == 0)
    {
      v77 = v9;
      v78 = v6;
      v12 = self;
      v80 = v4;
      objc_msgSend(MEMORY[0x24BE3F248], "sharedPreferences");
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v13, "preferenceForKey:", CFSTR("enableAirPlay2Syncing"));
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      v15 = objc_msgSend(v14, "BOOLValue");

      if ((v15 & 1) != 0)
      {
        v11 = -1;
      }
      else
      {
        v16 = (void *)MEMORY[0x227676638]();
        v17 = v12;
        HMFGetOSLogHandle();
        v18 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
        {
          HMFGetLogIdentifier();
          v19 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543362;
          v99 = v19;
          _os_log_impl(&dword_2218F0000, v18, OS_LOG_TYPE_DEFAULT, "%{public}@Filtering AirPlay2 accessories for shared user", buf, 0xCu);

        }
        objc_autoreleasePoolPop(v16);
        v11 = -257;
      }
      objc_msgSend(MEMORY[0x24BE3F248], "sharedPreferences");
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v20, "preferenceForKey:", CFSTR("enableAppleMediaSyncing"));
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      v22 = objc_msgSend(v21, "BOOLValue");

      if ((v22 & 1) != 0)
      {
        v4 = v80;
        self = v12;
      }
      else
      {
        v23 = (void *)MEMORY[0x227676638]();
        self = v12;
        v24 = v12;
        HMFGetOSLogHandle();
        v25 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
        {
          HMFGetLogIdentifier();
          v26 = v23;
          v27 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543362;
          v99 = v27;
          _os_log_impl(&dword_2218F0000, v25, OS_LOG_TYPE_DEFAULT, "%{public}@Filtering Apple media accessories for shared user", buf, 0xCu);

          v23 = v26;
        }

        objc_autoreleasePoolPop(v23);
        v11 &= ~0x40uLL;
        v4 = v80;
      }
      v9 = v77;
      v6 = v78;
    }
    -[HMDHome __encodeAccessoriesWithCoder:options:](self, "__encodeAccessoriesWithCoder:options:", v4, v11);
    -[HMDHome encodeMediaSystemsWithCoder:modifiedOptions:](self, "encodeMediaSystemsWithCoder:modifiedOptions:", v4, v11);
    if ((objc_msgSend(v4, "hmd_isForRemoteGatewayCoder") & 1) == 0)
    {
      -[HMDHome serviceGroups](self, "serviceGroups");
      v28 = (void *)objc_claimAutoreleasedReturnValue();
      v29 = self;
      v30 = (void *)objc_msgSend(v28, "copy");
      objc_msgSend(v4, "encodeObject:forKey:", v30, *MEMORY[0x24BDD7DD0]);

      self = v29;
    }
    -[HMDHome actionSets](self, "actionSets");
    v31 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHome _encodeActionSets:coder:](self, "_encodeActionSets:coder:", v31, v4);

    if (((v5 | v6) == 1 || !(v7 ^ 1 | v8) || ((v8 ^ 1 | v9) & 1) == 0)
      && -[HMDHome shouldWeSendAutomationsToClients](self, "shouldWeSendAutomationsToClients"))
    {
      -[HMDHome triggerOwnedActionSets](self, "triggerOwnedActionSets");
      v32 = (void *)objc_claimAutoreleasedReturnValue();
      v33 = (void *)objc_msgSend(v32, "copy");
      objc_msgSend(v4, "encodeObject:forKey:", v33, CFSTR("HM.triggerOwnedActionSets"));

    }
    isWatch();
    if (v5 && (!isAppleTV() | v82) == 1)
    {
      v81 = v4;
      v34 = (void *)MEMORY[0x24BDBCEB8];
      -[HMDHome triggers](self, "triggers");
      v35 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v34, "arrayWithCapacity:", objc_msgSend(v35, "count"));
      v36 = (void *)objc_claimAutoreleasedReturnValue();

      v93 = 0u;
      v94 = 0u;
      v91 = 0u;
      v92 = 0u;
      v79 = self;
      -[HMDHome triggers](self, "triggers");
      v37 = (void *)objc_claimAutoreleasedReturnValue();
      v38 = objc_msgSend(v37, "countByEnumeratingWithState:objects:count:", &v91, v97, 16);
      if (v38)
      {
        v39 = v38;
        v40 = *(_QWORD *)v92;
        do
        {
          for (i = 0; i != v39; ++i)
          {
            if (*(_QWORD *)v92 != v40)
              objc_enumerationMutation(v37);
            v42 = *(id *)(*((_QWORD *)&v91 + 1) + 8 * i);
            objc_opt_class();
            if ((objc_opt_isKindOfClass() & 1) != 0)
              v43 = v42;
            else
              v43 = 0;
            v44 = v43;

            if (v44)
            {
              objc_msgSend(v36, "addObject:", v42);
            }
            else
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0)
              {
                v45 = v42;
                objc_msgSend(v45, "significantEvent");
                v46 = (void *)objc_claimAutoreleasedReturnValue();

                if (v46)
                  v47 = v82;
                else
                  v47 = 1;
                if (v47 == 1)
                  objc_msgSend(v36, "addObject:", v45);

              }
            }

          }
          v39 = objc_msgSend(v37, "countByEnumeratingWithState:objects:count:", &v91, v97, 16);
        }
        while (v39);
      }

      v4 = v81;
      if (-[HMDHome shouldWeSendAutomationsToClients](v79, "shouldWeSendAutomationsToClients"))
      {
        v48 = (void *)objc_msgSend(v36, "copy");
        objc_msgSend(v81, "encodeObject:forKey:", v48, CFSTR("triggers"));

      }
    }
    else if ((objc_msgSend(v4, "hmd_isForLocalStore") & 1) != 0
           || objc_msgSend(v4, "hmd_isForRemoteTransport")
           && (objc_msgSend(v4, "hmd_isForRemoteTransportOnSameAccount") & 1) == 0
           && (objc_msgSend(v4, "hmd_isForRemoteUserAdministrator") & 1) != 0
           || objc_msgSend(v4, "hmd_isForRemoteTransportOnSameAccount")
           && (objc_msgSend(v4, "hmd_isForRemoteGatewayCoder") & 1) == 0)
    {
      objc_msgSend(MEMORY[0x24BDBCEB8], "array");
      v49 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x24BDBCEB8], "array");
      v50 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x24BDBCEB8], "array");
      v51 = (void *)objc_claimAutoreleasedReturnValue();
      v87 = 0u;
      v88 = 0u;
      v89 = 0u;
      v90 = 0u;
      -[HMDHome triggers](self, "triggers");
      v52 = (void *)objc_claimAutoreleasedReturnValue();
      v53 = objc_msgSend(v52, "countByEnumeratingWithState:objects:count:", &v87, v96, 16);
      if (v53)
      {
        v54 = v53;
        v55 = *(_QWORD *)v88;
        do
        {
          for (j = 0; j != v54; ++j)
          {
            if (*(_QWORD *)v88 != v55)
              objc_enumerationMutation(v52);
            objc_msgSend(v49, "addObject:", *(_QWORD *)(*((_QWORD *)&v87 + 1) + 8 * j));
          }
          v54 = objc_msgSend(v52, "countByEnumeratingWithState:objects:count:", &v87, v96, 16);
        }
        while (v54);
      }

      v57 = (void *)objc_msgSend(v50, "copy");
      objc_msgSend(v4, "encodeObject:forKey:", v57, CFSTR("HM.triggers"));

      v58 = (void *)objc_msgSend(v51, "copy");
      objc_msgSend(v4, "encodeObject:forKey:", v58, CFSTR("HM.sharedActivationTriggers"));

      if (objc_msgSend(v4, "hmd_isForLocalStore"))
      {
        v59 = (void *)objc_msgSend(v49, "copy");
        objc_msgSend(v4, "encodeObject:forKey:", v59, CFSTR("triggers"));

        -[HMDHome _updateOwnedTriggers](self, "_updateOwnedTriggers");
        -[HMDHome ownedTriggers](self, "ownedTriggers");
        v60 = (void *)objc_claimAutoreleasedReturnValue();
        v61 = (void *)objc_msgSend(v60, "copy");
        objc_msgSend(v4, "encodeObject:forKey:", v61, CFSTR("HM.deviceOwnedTriggers"));

      }
    }
    else if (objc_msgSend(v4, "hmd_isForNonAdminSharedUser"))
    {
      v62 = (void *)MEMORY[0x227676638]();
      v63 = self;
      HMFGetOSLogHandle();
      v64 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v64, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v65 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543362;
        v99 = v65;
        _os_log_impl(&dword_2218F0000, v64, OS_LOG_TYPE_INFO, "%{public}@Syncing triggers to remote transport", buf, 0xCu);

      }
      objc_autoreleasePoolPop(v62);
      objc_msgSend(MEMORY[0x24BDBCEB8], "array");
      v66 = (void *)objc_claimAutoreleasedReturnValue();
      v83 = 0u;
      v84 = 0u;
      v85 = 0u;
      v86 = 0u;
      -[HMDHome triggers](v63, "triggers");
      v67 = (void *)objc_claimAutoreleasedReturnValue();
      v68 = objc_msgSend(v67, "countByEnumeratingWithState:objects:count:", &v83, v95, 16);
      if (v68)
      {
        v69 = v68;
        v70 = *(_QWORD *)v84;
        do
        {
          for (k = 0; k != v69; ++k)
          {
            if (*(_QWORD *)v84 != v70)
              objc_enumerationMutation(v67);
            v72 = *(void **)(*((_QWORD *)&v83 + 1) + 8 * k);
            objc_msgSend(v4, "hmd_supportedFeatures");
            v73 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v4, "hmd_user");
            v74 = (void *)objc_claimAutoreleasedReturnValue();
            v75 = objc_msgSend(v72, "compatible:user:", v73, v74);

            if (v75)
              objc_msgSend(v66, "addObject:", v72);
          }
          v69 = objc_msgSend(v67, "countByEnumeratingWithState:objects:count:", &v83, v95, 16);
        }
        while (v69);
      }

      v76 = (void *)objc_msgSend(v66, "copy");
      objc_msgSend(v4, "encodeObject:forKey:", v76, CFSTR("HM.triggers"));

    }
  }
  else
  {
    -[HMDHome __encodeAccessoriesWithCoder:options:](self, "__encodeAccessoriesWithCoder:options:", v4, v10);
    -[HMDHome encodeMediaSystemsWithCoder:modifiedOptions:](self, "encodeMediaSystemsWithCoder:modifiedOptions:", v4, v11);
  }

}

- (void)encodeMediaSystemsWithCoder:(id)a3 modifiedOptions:(unint64_t)a4
{
  char v4;
  id v6;
  int v7;
  void *v8;
  void *v9;
  void *v10;
  id v11;

  v4 = a4;
  v6 = a3;
  if ((v4 & 0xC0) != 0)
  {
    v11 = v6;
    v7 = objc_msgSend(v6, "hmd_isForXPCTransport");
    -[HMDHome mediaSystemController](self, "mediaSystemController");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = v8;
    if (v7)
    {
      objc_msgSend(v8, "filteredMediaSystems");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v11, "encodeObject:forKey:", v10, *MEMORY[0x24BDD7D30]);

    }
    else
    {
      objc_msgSend(v11, "encodeObject:forKey:", v8, *MEMORY[0x24BDD7D00]);
    }

    v6 = v11;
  }

}

- (void)_encodeActionSets:(id)a3 coder:(id)a4
{
  id v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  id v12;

  v12 = a3;
  v6 = a4;
  if (-[HMDHome shouldWeSendAutomationsToClients](self, "shouldWeSendAutomationsToClients"))
  {
    objc_msgSend(MEMORY[0x24BDBCEB8], "arrayWithArray:", v12);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD1758], "predicateWithFormat:", CFSTR("type == %@"), *MEMORY[0x24BDD5220]);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "filteredArrayUsingPredicate:", v8);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v9, "count"))
    {
      v10 = (void *)objc_msgSend(v9, "copy");
      objc_msgSend(v6, "encodeObject:forKey:", v10, CFSTR("actionSets"));

    }
    if ((objc_msgSend(v6, "hmd_isForRemoteGatewayCoder") & 1) == 0)
    {
      objc_msgSend(v7, "arrayByExcludingObjectsInArray:", v9);
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v6, "encodeObject:forKey:", v11, CFSTR("builtinActionSets"));

    }
  }

}

- (void)_removeCorruptAccessories
{
  HMDHome *v2;
  void *v3;
  id v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  void *v9;
  id v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  HMDHome *v15;
  NSObject *v16;
  void *v17;
  void *v18;
  void *v19;
  uint64_t v20;
  void *v21;
  __int128 v22;
  id v23;
  HMDHome *v24;
  void *v25;
  void *v26;
  void *v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint8_t buf[4];
  void *v34;
  __int16 v35;
  void *v36;
  __int16 v37;
  void *v38;
  __int16 v39;
  void *v40;
  _BYTE v41[128];
  uint64_t v42;

  v2 = self;
  v42 = *MEMORY[0x24BDAC8D0];
  -[HMDHome accessories](self, "accessories");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x24BDBCEB8], "arrayWithCapacity:", objc_msgSend(v3, "count"));
  v25 = (void *)objc_claimAutoreleasedReturnValue();
  v29 = 0u;
  v30 = 0u;
  v31 = 0u;
  v32 = 0u;
  v4 = v3;
  v28 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v29, v41, 16);
  if (v28)
  {
    v6 = *(_QWORD *)v30;
    *(_QWORD *)&v5 = 138544130;
    v22 = v5;
    v23 = v4;
    v24 = v2;
    do
    {
      v7 = 0;
      do
      {
        if (*(_QWORD *)v30 != v6)
          objc_enumerationMutation(v4);
        v8 = *(id *)(*((_QWORD *)&v29 + 1) + 8 * v7);
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0)
          v9 = v8;
        else
          v9 = 0;
        v10 = v9;

        objc_msgSend(v8, "identifier");
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        if (v11)
        {
          v12 = v11;
          if (!v10)
          {

LABEL_16:
            objc_msgSend(v25, "addObject:", v8, v22);
            goto LABEL_17;
          }
          objc_msgSend(v10, "uniqueIdentifier");
          v13 = (void *)objc_claimAutoreleasedReturnValue();

          if (v13)
            goto LABEL_16;
        }
        v14 = (void *)MEMORY[0x227676638]();
        v15 = v2;
        HMFGetOSLogHandle();
        v16 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
        {
          HMFGetLogIdentifier();
          v26 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v8, "uuid");
          v17 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v17, "UUIDString");
          v18 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v8, "identifier");
          v19 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v10, "uniqueIdentifier");
          v27 = v14;
          v20 = v6;
          v21 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = v22;
          v34 = v26;
          v35 = 2112;
          v36 = v18;
          v37 = 2112;
          v38 = v19;
          v39 = 2112;
          v40 = v21;
          _os_log_impl(&dword_2218F0000, v16, OS_LOG_TYPE_DEBUG, "%{public}@Incomplete accessory: %@ (%@ / %@)", buf, 0x2Au);

          v6 = v20;
          v14 = v27;

          v4 = v23;
          v2 = v24;

        }
        objc_autoreleasePoolPop(v14);
LABEL_17:

        ++v7;
      }
      while (v28 != v7);
      v28 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v29, v41, 16);
    }
    while (v28);
  }

  -[HMDHome setAccessories:](v2, "setAccessories:", v25);
}

- (HMFMessageDestination)messageDestination
{
  id v3;
  void *v4;
  void *v5;

  v3 = objc_alloc(MEMORY[0x24BE3F1B8]);
  -[HMDHome messageTargetUUID](self, "messageTargetUUID");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = (void *)objc_msgSend(v3, "initWithTarget:", v4);

  return (HMFMessageDestination *)v5;
}

- (NSSet)messageReceiverChildren
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;

  objc_msgSend(MEMORY[0x24BDBCEF0], "set");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHome zones](self, "zones");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "addObjectsFromArray:", v4);

  -[HMDHome rooms](self, "rooms");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "addObjectsFromArray:", v5);

  -[HMDHome actionSets](self, "actionSets");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "addObjectsFromArray:", v6);

  -[HMDHome triggers](self, "triggers");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "addObjectsFromArray:", v7);

  -[HMDHome users](self, "users");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "addObjectsFromArray:", v8);

  -[HMDHome residentDeviceManager](self, "residentDeviceManager");
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  if (v9)
  {
    -[HMDHome residentDeviceManager](self, "residentDeviceManager");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "addObject:", v10);

  }
  -[HMDHome presenceMonitor](self, "presenceMonitor");
  v11 = (void *)objc_claimAutoreleasedReturnValue();

  if (v11)
  {
    -[HMDHome presenceMonitor](self, "presenceMonitor");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "addObject:", v12);

  }
  -[HMDHome presenceFeeder](self, "presenceFeeder");
  v13 = (void *)objc_claimAutoreleasedReturnValue();

  if (v13)
  {
    -[HMDHome presenceFeeder](self, "presenceFeeder");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "addObject:", v14);

  }
  -[HMDHome homeLocationHandler](self, "homeLocationHandler");
  v15 = (void *)objc_claimAutoreleasedReturnValue();

  if (v15)
  {
    -[HMDHome homeLocationHandler](self, "homeLocationHandler");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "addObject:", v16);

  }
  -[HMDHome serviceGroups](self, "serviceGroups");
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "addObjectsFromArray:", v17);

  -[HMDHome mediaSessions](self, "mediaSessions");
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "addObjectsFromArray:", v18);

  -[HMDHome accessories](self, "accessories");
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "addObjectsFromArray:", v19);

  -[HMDHome homeReprovisionHandler](self, "homeReprovisionHandler");
  v20 = (void *)objc_claimAutoreleasedReturnValue();

  if (v20)
  {
    -[HMDHome homeReprovisionHandler](self, "homeReprovisionHandler");
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "addObject:", v21);

  }
  v22 = (void *)objc_msgSend(v3, "copy");

  return (NSSet *)v22;
}

- (void)retrieveHAPAccessoryForHMDAccessory:(id)a3 linkType:(int64_t)a4 forceRetrieve:(BOOL)a5 queue:(id)a6 completion:(id)a7
{
  id v12;
  id v13;
  id v14;
  NSObject *v15;
  id v16;
  id v17;
  id v18;
  _QWORD v19[5];
  id v20;
  id v21;
  id v22;
  int64_t v23;
  BOOL v24;

  v12 = a3;
  v13 = a6;
  v14 = a7;
  -[HMDHome workQueue](self, "workQueue");
  v15 = objc_claimAutoreleasedReturnValue();
  v19[0] = MEMORY[0x24BDAC760];
  v19[1] = 3221225472;
  v19[2] = __87__HMDHome_retrieveHAPAccessoryForHMDAccessory_linkType_forceRetrieve_queue_completion___block_invoke;
  v19[3] = &unk_24E77F4B0;
  v19[4] = self;
  v20 = v12;
  v22 = v14;
  v23 = a4;
  v24 = a5;
  v21 = v13;
  v16 = v13;
  v17 = v14;
  v18 = v12;
  dispatch_async(v15, v19);

}

- (BOOL)_isRegisteredForNotificationsWithRemoteGateway:(id)a3
{
  id v3;
  void *v4;
  id v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t i;
  void *v12;
  void *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t j;
  BOOL v19;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  _BYTE v29[128];
  _BYTE v30[128];
  uint64_t v31;

  v31 = *MEMORY[0x24BDAC8D0];
  v3 = a3;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v4 = v3;
  else
    v4 = 0;
  v5 = v4;
  v25 = 0u;
  v26 = 0u;
  v27 = 0u;
  v28 = 0u;
  objc_msgSend(v5, "services");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = (void *)objc_msgSend(v6, "copy");

  v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v25, v30, 16);
  if (v8)
  {
    v9 = v8;
    v10 = *(_QWORD *)v26;
    do
    {
      for (i = 0; i != v9; ++i)
      {
        if (*(_QWORD *)v26 != v10)
          objc_enumerationMutation(v7);
        v12 = *(void **)(*((_QWORD *)&v25 + 1) + 8 * i);
        v21 = 0u;
        v22 = 0u;
        v23 = 0u;
        v24 = 0u;
        objc_msgSend(v12, "characteristics", 0);
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        v14 = (void *)objc_msgSend(v13, "copy");

        v15 = objc_msgSend(v14, "countByEnumeratingWithState:objects:count:", &v21, v29, 16);
        if (v15)
        {
          v16 = v15;
          v17 = *(_QWORD *)v22;
          while (2)
          {
            for (j = 0; j != v16; ++j)
            {
              if (*(_QWORD *)v22 != v17)
                objc_enumerationMutation(v14);
              if ((objc_msgSend(*(id *)(*((_QWORD *)&v21 + 1) + 8 * j), "notificationRegisteredWithRemoteGateway") & 1) != 0)
              {

                v19 = 1;
                goto LABEL_22;
              }
            }
            v16 = objc_msgSend(v14, "countByEnumeratingWithState:objects:count:", &v21, v29, 16);
            if (v16)
              continue;
            break;
          }
        }

      }
      v9 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v25, v30, 16);
      v19 = 0;
    }
    while (v9);
  }
  else
  {
    v19 = 0;
  }
LABEL_22:

  return v19;
}

- (BOOL)_isRegisteredForNotificationsForClients:(id)a3
{
  id v3;
  void *v4;
  id v5;
  char v6;

  v3 = a3;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v4 = v3;
  else
    v4 = 0;
  v5 = v4;
  v6 = objc_msgSend(v5, "isClientRegisteredForNotifications");

  return v6;
}

- (BOOL)_isEventTriggerOnRemoteGatewayForAccessory:(id)a3
{
  id v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t i;
  id v9;
  void *v10;
  id v11;
  char v12;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  _BYTE v18[128];
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v4 = a3;
  v14 = 0u;
  v15 = 0u;
  v16 = 0u;
  v17 = 0u;
  -[HMDHome triggers](self, "triggers", 0);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
  if (v6)
  {
    v7 = *(_QWORD *)v15;
    while (2)
    {
      for (i = 0; i != v6; ++i)
      {
        if (*(_QWORD *)v15 != v7)
          objc_enumerationMutation(v5);
        v9 = *(id *)(*((_QWORD *)&v14 + 1) + 8 * i);
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0)
          v10 = v9;
        else
          v10 = 0;
        v11 = v10;

        v12 = objc_msgSend(v11, "isEventTriggerOnRemoteGatewayForAccessory:", v4);
        if ((v12 & 1) != 0)
        {
          LOBYTE(v6) = 1;
          goto LABEL_14;
        }
      }
      v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
      if (v6)
        continue;
      break;
    }
  }
LABEL_14:

  return v6;
}

- (BOOL)_isEventTriggerOnLocalDeviceForAccessory:(id)a3
{
  id v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t i;
  id v9;
  void *v10;
  id v11;
  char v12;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  _BYTE v18[128];
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v4 = a3;
  v14 = 0u;
  v15 = 0u;
  v16 = 0u;
  v17 = 0u;
  -[HMDHome triggers](self, "triggers", 0);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
  if (v6)
  {
    v7 = *(_QWORD *)v15;
    while (2)
    {
      for (i = 0; i != v6; ++i)
      {
        if (*(_QWORD *)v15 != v7)
          objc_enumerationMutation(v5);
        v9 = *(id *)(*((_QWORD *)&v14 + 1) + 8 * i);
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0)
          v10 = v9;
        else
          v10 = 0;
        v11 = v10;

        v12 = objc_msgSend(v11, "isEventTriggerOnLocalDeviceForAccessory:", v4);
        if ((v12 & 1) != 0)
        {
          LOBYTE(v6) = 1;
          goto LABEL_14;
        }
      }
      v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
      if (v6)
        continue;
      break;
    }
  }
LABEL_14:

  return v6;
}

- (BOOL)_shouldAvoidTombstoningAccessoryServer:(id)a3 accessory:(id)a4
{
  id v6;
  id v7;
  void *v8;
  BOOL v9;
  void *v10;
  int v11;
  void *v12;
  HMDHome *v13;
  NSObject *v14;
  void *v15;
  void *v16;
  void *v17;
  const char *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v23;
  void *v24;
  id v25;
  int v26;
  void *v27;
  HMDHome *v28;
  NSObject *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  id v35;
  uint64_t v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  void *v43;
  void *v44;
  HMDHome *v45;
  NSObject *v46;
  void *v47;
  void *v48;
  void *v49;
  void *v50;
  char v51;
  id v52;
  _QWORD v53[4];
  id v54;
  uint8_t buf[4];
  void *v56;
  __int16 v57;
  void *v58;
  __int16 v59;
  void *v60;
  __int16 v61;
  id v62;
  __int16 v63;
  id v64;
  uint64_t v65;

  v65 = *MEMORY[0x24BDAC8D0];
  v6 = a3;
  v7 = a4;
  v8 = v7;
  v9 = 0;
  if (v6 && v7)
  {
    -[HMDHome removeAccessoryInProgressForHMDAccessories](self, "removeAccessoryInProgressForHMDAccessories");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v11 = objc_msgSend(v10, "containsObject:", v8);

    if (v11)
    {
      v12 = (void *)MEMORY[0x227676638]();
      v13 = self;
      HMFGetOSLogHandle();
      v14 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v15 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v6, "name");
        v16 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v6, "identifier");
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543874;
        v56 = v15;
        v57 = 2112;
        v58 = v16;
        v59 = 2112;
        v60 = v17;
        v18 = "%{public}@Accessory %@/%@ being removed from home - not tombstoning";
LABEL_9:
        _os_log_impl(&dword_2218F0000, v14, OS_LOG_TYPE_INFO, v18, buf, 0x20u);

        goto LABEL_10;
      }
      goto LABEL_10;
    }
    -[HMDHome addPendingAccessorySetupCodeHandlers](self, "addPendingAccessorySetupCodeHandlers");
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "uuid");
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v19, "objectForKey:", v20);
    v21 = (void *)objc_claimAutoreleasedReturnValue();

    if (v21)
    {
      v12 = (void *)MEMORY[0x227676638]();
      v13 = self;
      HMFGetOSLogHandle();
      v14 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v15 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v6, "name");
        v16 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v6, "identifier");
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543874;
        v56 = v15;
        v57 = 2112;
        v58 = v16;
        v59 = 2112;
        v60 = v17;
        v18 = "%{public}@Accessory %@/%@ being added to home - not tombstoning";
        goto LABEL_9;
      }
LABEL_10:

      objc_autoreleasePoolPop(v12);
LABEL_11:
      v9 = 1;
      goto LABEL_12;
    }
    -[HMDHome addPendingAccessories](self, "addPendingAccessories");
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v23, "hm_allKeys");
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    v53[0] = MEMORY[0x24BDAC760];
    v53[1] = 3221225472;
    v53[2] = __60__HMDHome__shouldAvoidTombstoningAccessoryServer_accessory___block_invoke;
    v53[3] = &unk_24E7763F0;
    v25 = v8;
    v54 = v25;
    v26 = objc_msgSend(v24, "na_any:", v53);

    if (v26)
    {
      v27 = (void *)MEMORY[0x227676638]();
      v28 = self;
      HMFGetOSLogHandle();
      v29 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v29, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v30 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v6, "name");
        v31 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v6, "identifier");
        v32 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543874;
        v56 = v30;
        v57 = 2112;
        v58 = v31;
        v59 = 2112;
        v60 = v32;
        _os_log_impl(&dword_2218F0000, v29, OS_LOG_TYPE_INFO, "%{public}@Accessory %@/%@ being added to home (via setupDescription) - not tombstoning", buf, 0x20u);

      }
      objc_autoreleasePoolPop(v27);

      goto LABEL_11;
    }

    -[HMDHome currentAccessory](self, "currentAccessory");
    v33 = (void *)objc_claimAutoreleasedReturnValue();
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
      v34 = v33;
    else
      v34 = 0;
    v35 = v34;

    objc_msgSend(v35, "sensorManager");
    v36 = objc_claimAutoreleasedReturnValue();
    if (v36)
    {
      v37 = (void *)v36;
      objc_msgSend(v25, "identifier");
      v38 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v35, "sensorManager");
      v39 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v39, "derivedHAPAccessoryIdentifier");
      v40 = (void *)objc_claimAutoreleasedReturnValue();
      if ((objc_msgSend(v38, "isEqualToString:", v40) & 1) != 0)
      {

LABEL_24:
        v44 = (void *)MEMORY[0x227676638]();
        v45 = self;
        HMFGetOSLogHandle();
        v46 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v46, OS_LOG_TYPE_INFO))
        {
          HMFGetLogIdentifier();
          v47 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v6, "name");
          v48 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v6, "identifier");
          v49 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138544386;
          v56 = v47;
          v57 = 2112;
          v58 = v48;
          v59 = 2112;
          v60 = v49;
          v61 = 2112;
          v62 = v25;
          v63 = 2112;
          v64 = v35;
          _os_log_impl(&dword_2218F0000, v46, OS_LOG_TYPE_INFO, "%{public}@Accessory %@/%@ (%@) is a derived homepod sensor for %@ - not tombstoning", buf, 0x34u);

        }
        objc_autoreleasePoolPop(v44);
        v9 = 1;
        goto LABEL_28;
      }
      objc_msgSend(v25, "uuid");
      v41 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v35, "sensorManager");
      v50 = v38;
      v42 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v42, "derivedSensorUUID");
      v52 = v35;
      v43 = (void *)objc_claimAutoreleasedReturnValue();
      v51 = objc_msgSend(v41, "hmf_isEqualToUUID:", v43);

      v35 = v52;
      if ((v51 & 1) != 0)
        goto LABEL_24;
    }
    v9 = -[HMDHome _isRetrievalInProgressForPrimaryAccessory:linkType:](self, "_isRetrievalInProgressForPrimaryAccessory:linkType:", v25, objc_msgSend(v6, "linkType"));
LABEL_28:

  }
LABEL_12:

  return v9;
}

- (BOOL)isCurrentDeviceAvailableResident
{
  void *v2;
  char v3;

  -[HMDHome residentDeviceManager](self, "residentDeviceManager");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "isCurrentDeviceAvailableResident");

  return v3;
}

- (void)accessoryBrowser:(id)a3 didAddAccessoryAdvertisement:(id)a4
{
  id v6;
  id v7;
  void *v8;
  void *v9;
  void *v10;
  HMDHome *v11;
  NSObject *v12;
  void *v13;
  int v14;
  void *v15;
  __int16 v16;
  id v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  v6 = a3;
  v7 = a4;
  objc_msgSend(v7, "identifier");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHome accessoryWithIdentifier:](self, "accessoryWithIdentifier:", v8);
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  if (v9)
  {
    v10 = (void *)MEMORY[0x227676638]();
    v11 = self;
    HMFGetOSLogHandle();
    v12 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      v14 = 138543618;
      v15 = v13;
      v16 = 2112;
      v17 = v7;
      _os_log_impl(&dword_2218F0000, v12, OS_LOG_TYPE_INFO, "%{public}@Handling added advertisement: %@", (uint8_t *)&v14, 0x16u);

    }
    objc_autoreleasePoolPop(v10);
    objc_msgSend(v9, "addAdvertisement:", v7);
  }

}

- (void)accessoryBrowser:(id)a3 didRemoveAccessoryAdvertisement:(id)a4
{
  id v6;
  id v7;
  void *v8;
  void *v9;
  void *v10;
  HMDHome *v11;
  NSObject *v12;
  void *v13;
  int v14;
  void *v15;
  __int16 v16;
  id v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  v6 = a3;
  v7 = a4;
  objc_msgSend(v7, "identifier");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHome accessoryWithIdentifier:](self, "accessoryWithIdentifier:", v8);
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  if (v9)
  {
    v10 = (void *)MEMORY[0x227676638]();
    v11 = self;
    HMFGetOSLogHandle();
    v12 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      v14 = 138543618;
      v15 = v13;
      v16 = 2112;
      v17 = v7;
      _os_log_impl(&dword_2218F0000, v12, OS_LOG_TYPE_INFO, "%{public}@Handling removed advertisement: %@", (uint8_t *)&v14, 0x16u);

    }
    objc_autoreleasePoolPop(v10);
    objc_msgSend(v9, "removeAdvertisement:", v7);
  }

}

- (void)handleRemovedMediaSessions:(id)a3
{
  id v4;
  NSObject *v5;
  id v6;
  _QWORD v7[4];
  id v8;
  HMDHome *v9;

  v4 = a3;
  -[HMDHome workQueue](self, "workQueue");
  v5 = objc_claimAutoreleasedReturnValue();
  v7[0] = MEMORY[0x24BDAC760];
  v7[1] = 3221225472;
  v7[2] = __38__HMDHome_handleRemovedMediaSessions___block_invoke;
  v7[3] = &unk_24E79C268;
  v8 = v4;
  v9 = self;
  v6 = v4;
  dispatch_async(v5, v7);

}

- (void)accessoryBrowser:(id)a3 didFindAccessoryServer:(id)a4 stateChanged:(BOOL)a5 stateNumber:(id)a6 completion:(id)a7
{
  id v11;
  id v12;
  __CFString *v13;
  void (**v14)(id, _QWORD, uint64_t);
  void *v15;
  HMDHome *v16;
  NSObject *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  char v26;
  void *v27;
  HMDHome *v28;
  NSObject *v29;
  void *v30;
  void *v31;
  id v32;
  __CFString *v33;
  __CFString *v34;
  void *v35;
  HMDHome *v36;
  NSObject *v37;
  void *v38;
  void *v39;
  __CFString *v40;
  void *v41;
  id v42;
  __CFString *v43;
  void *v44;
  void *v45;
  void *v46;
  void *v47;
  uint64_t v48;
  id v49;
  void *v50;
  id v51;
  void *v52;
  void *v53;
  void *v54;
  void *v55;
  void *v56;
  HMDHome *v57;
  NSObject *v58;
  void *v59;
  void *v60;
  __CFString *v61;
  void *v62;
  uint64_t v63;
  void *v64;
  uint64_t v65;
  void *v66;
  double DiscoveryBackoffPeriod;
  double Current;
  double v69;
  double v70;
  unint64_t v71;
  void *v72;
  HMDHome *v73;
  HMDHome *v74;
  NSObject *v75;
  void *v76;
  void *v77;
  void *v78;
  void *v79;
  int v80;
  uint64_t v81;
  unsigned int v82;
  HMDHome *v83;
  NSObject *v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  __CFString *v88;
  __CFString *v89;
  void *v90;
  void *v91;
  void *v92;
  void *v93;
  HMDHome *v94;
  NSObject *v95;
  void *v96;
  void *v97;
  void *v98;
  void *v99;
  HMDHome *v100;
  HMDHome *v101;
  NSObject *v102;
  void *v103;
  void *v104;
  _BOOL4 v105;
  void *v106;
  HMDHome *v107;
  NSObject *v108;
  _BOOL4 v109;
  void *v110;
  HMDHome *v111;
  void *v112;
  void *v113;
  void *v114;
  __CFString *v115;
  void *v116;
  void *v117;
  HMDHome *v118;
  NSObject *v119;
  void *v120;
  void *v121;
  uint64_t v122;
  void *v123;
  HMDHome *v124;
  void *v125;
  void *context;
  __CFString *v127;
  void *v128;
  void *v129;
  unsigned int v130;
  id v131;
  void (**v132)(id, _QWORD, uint64_t);
  _BOOL4 v133;
  void *v134;
  _QWORD v135[4];
  id v136;
  uint8_t buf[4];
  void *v138;
  __int16 v139;
  void *v140;
  __int16 v141;
  __CFString *v142;
  __int16 v143;
  void *v144;
  __int16 v145;
  double v146;
  __int16 v147;
  void *v148;
  uint64_t v149;

  v133 = a5;
  v149 = *MEMORY[0x24BDAC8D0];
  v11 = a3;
  v12 = a4;
  v13 = (__CFString *)a6;
  v14 = (void (**)(id, _QWORD, uint64_t))a7;
  v15 = (void *)MEMORY[0x227676638]();
  v16 = self;
  HMFGetOSLogHandle();
  v17 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "shortDescription");
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    HMFBooleanToString();
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138544130;
    v138 = v18;
    v139 = 2112;
    v140 = v19;
    v141 = 2112;
    v142 = v13;
    v143 = 2112;
    v144 = v20;
    _os_log_impl(&dword_2218F0000, v17, OS_LOG_TYPE_INFO, "%{public}@Found paired accessory server %@. State: %@/%@", buf, 0x2Au);

  }
  objc_autoreleasePoolPop(v15);
  objc_msgSend(v12, "identifier");
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHome hapAccessoryWithIdentifier:](v16, "hapAccessoryWithIdentifier:", v21);
  v22 = (void *)objc_claimAutoreleasedReturnValue();

  v23 = -[HMDHome _shouldAvoidTombstoningAccessoryServer:accessory:](v16, "_shouldAvoidTombstoningAccessoryServer:accessory:", v12, v22);
  v24 = v23;
  if (!v22)
  {
    v48 = 0;
LABEL_52:
    v14[2](v14, v24, v48);
    goto LABEL_53;
  }
  v130 = v23;
  v131 = v11;
  -[HMDHome residentDeviceManager](v16, "residentDeviceManager");
  v25 = (void *)objc_claimAutoreleasedReturnValue();
  v26 = objc_msgSend(v25, "isCurrentDeviceAvailableResident");

  v27 = (void *)MEMORY[0x227676638]();
  v28 = v16;
  HMFGetOSLogHandle();
  v29 = objc_claimAutoreleasedReturnValue();
  v132 = v14;
  if (os_log_type_enabled(v29, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v30 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v22, "shortDescription");
    v31 = (void *)objc_claimAutoreleasedReturnValue();
    HMFBooleanToString();
    v32 = v12;
    v33 = v13;
    v34 = (__CFString *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543874;
    v138 = v30;
    v139 = 2112;
    v140 = v31;
    v141 = 2112;
    v142 = v34;
    _os_log_impl(&dword_2218F0000, v29, OS_LOG_TYPE_INFO, "%{public}@Performing accessory/service discovery on paired accessory %@. isResidentDevice: %@", buf, 0x20u);

    v13 = v33;
    v12 = v32;

  }
  objc_autoreleasePoolPop(v27);
  if ((!objc_msgSend(v22, "canWakeUpViaWoL")
     || objc_msgSend(v22, "shouldDiscoverSuspendCapableAccessoryServer:", v12))
    && !objc_msgSend(v12, "wakeNumber"))
  {
    v127 = v13;
    v49 = v12;
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
      v50 = v49;
    else
      v50 = 0;
    v51 = v50;

    v129 = v49;
    if (objc_msgSend(v49, "isReachable") && (objc_msgSend(v51, "isCached") & 1) == 0)
    {
      objc_msgSend(MEMORY[0x24BDBCEB8], "arrayWithObject:", v22);
      v52 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v22, "identifiersForBridgedAccessories");
      v53 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v53, "allObjects");
      v54 = (void *)objc_claimAutoreleasedReturnValue();
      -[HMDHome accessoriesWithUUIDs:](v28, "accessoriesWithUUIDs:", v54);
      v55 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v52, "addObjectsFromArray:", v55);

      v135[0] = MEMORY[0x24BDAC760];
      v135[1] = 3221225472;
      v135[2] = __87__HMDHome_accessoryBrowser_didFindAccessoryServer_stateChanged_stateNumber_completion___block_invoke;
      v135[3] = &unk_24E776180;
      v136 = v129;
      objc_msgSend(v52, "na_each:", v135);

    }
    v56 = (void *)MEMORY[0x227676638]();
    v57 = v28;
    HMFGetOSLogHandle();
    v58 = objc_claimAutoreleasedReturnValue();
    v128 = v51;
    if (os_log_type_enabled(v58, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v59 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v22, "shortDescription");
      v60 = (void *)objc_claimAutoreleasedReturnValue();
      -[HMDHome isCurrentDevicePrimaryResident](v57, "isCurrentDevicePrimaryResident");
      HMFBooleanToString();
      v61 = (__CFString *)objc_claimAutoreleasedReturnValue();
      -[HMDHome isCurrentDeviceAvailableResident](v57, "isCurrentDeviceAvailableResident");
      HMFBooleanToString();
      v62 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138544130;
      v138 = v59;
      v139 = 2112;
      v140 = v60;
      v141 = 2114;
      v142 = v61;
      v143 = 2114;
      v144 = v62;
      _os_log_impl(&dword_2218F0000, v58, OS_LOG_TYPE_INFO, "%{public}@Evaluating disconnect on idle status for %@ using - isCurrentDevicePrimaryResident = %{public}@, isCurrentDeviceAvailableResident = %{public}@", buf, 0x2Au);

      v51 = v128;
    }

    objc_autoreleasePoolPop(v56);
    v63 = shouldDisconnectOnIdleForAccessory(v22);
    if ((_DWORD)v63 != objc_msgSend(v22, "shouldDisconnectOnIdle"))
      objc_msgSend(v22, "setShouldDisconnectOnIdle:", v63);
    objc_msgSend(v129, "setShouldDisconnectOnIdle:", v63);
    objc_msgSend(v129, "identifier");
    v64 = (void *)objc_claimAutoreleasedReturnValue();
    v65 = objc_msgSend(v22, "supportedTransports");
    objc_msgSend(v129, "setupHash");
    v66 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHome _registerPairedAccessory:transports:setupHash:](v57, "_registerPairedAccessory:transports:setupHash:", v64, v65, v66);

    DiscoveryBackoffPeriod = 0.0;
    if ((v26 & 1) != 0)
      goto LABEL_24;
    Current = CFAbsoluteTimeGetCurrent();
    objc_msgSend(v22, "lastPairingFailureTime");
    v70 = Current - v69;
    v71 = objc_msgSend(v22, "consecutivePairingFailures");
    if (v70 < getDiscoveryBackoffPeriod() || v71 >= 6)
    {
      if (v71 <= 5)
        DiscoveryBackoffPeriod = getDiscoveryBackoffPeriod();
      else
        DiscoveryBackoffPeriod = 1800.0;
      v11 = v131;
      v14 = v132;
      objc_msgSend(v22, "setResetOnBackoffExpiry:", v71 > 5);
      objc_msgSend(MEMORY[0x24BDD1540], "hmErrorWithCode:", 4);
      v78 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v129, "identifier");
      v79 = (void *)objc_claimAutoreleasedReturnValue();
      -[HMDHome _notifyRetrievalError:accessoryServer:linkType:accessoryOperationBlock:](v57, "_notifyRetrievalError:accessoryServer:linkType:accessoryOperationBlock:", v78, v79, 0, 0);

    }
    else
    {
      if (!v51)
      {
LABEL_24:
        v14 = v132;
        goto LABEL_38;
      }
      v14 = v132;
      if (!v133)
        goto LABEL_38;
      if (objc_msgSend(v22, "isRemotelyReachable"))
      {
        v72 = (void *)MEMORY[0x227676638]();
        v73 = v57;
        v74 = v57;
        HMFGetOSLogHandle();
        v75 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v75, OS_LOG_TYPE_INFO))
        {
          HMFGetLogIdentifier();
          v76 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v22, "shortDescription");
          v77 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543618;
          v138 = v76;
          v139 = 2112;
          v140 = v77;
          _os_log_impl(&dword_2218F0000, v75, OS_LOG_TYPE_INFO, "%{public}@Skipping discovery since accessory: %@ is remotely reachable.", buf, 0x16u);

          v51 = v128;
          v14 = v132;
        }

        objc_autoreleasePoolPop(v72);
        v57 = v73;
        goto LABEL_38;
      }
      if (-[HMDHome _isRegisteredForNotificationsWithRemoteGateway:](v57, "_isRegisteredForNotificationsWithRemoteGateway:", v22))
      {
        v99 = (void *)MEMORY[0x227676638]();
        v100 = v57;
        v101 = v57;
        HMFGetOSLogHandle();
        v102 = objc_claimAutoreleasedReturnValue();
        v11 = v131;
        if (os_log_type_enabled(v102, OS_LOG_TYPE_INFO))
        {
          HMFGetLogIdentifier();
          v103 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v22, "shortDescription");
          v104 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543618;
          v138 = v103;
          v139 = 2112;
          v140 = v104;
          _os_log_impl(&dword_2218F0000, v102, OS_LOG_TYPE_INFO, "%{public}@Backing off since notifications for %@ are registered with remote gateway", buf, 0x16u);

          v51 = v128;
          v14 = v132;
        }

        objc_autoreleasePoolPop(v99);
        DiscoveryBackoffPeriod = getDiscoveryBackoffPeriod();
LABEL_59:
        v57 = v100;
        goto LABEL_37;
      }
      v11 = v131;
      if (-[HMDHome _isEventTriggerOnRemoteGatewayForAccessory:](v57, "_isEventTriggerOnRemoteGatewayForAccessory:", v22)&& !-[HMDHome _isRegisteredForNotificationsForClients:](v57, "_isRegisteredForNotificationsForClients:", v22)&& !-[HMDHome _isEventTriggerOnLocalDeviceForAccessory:](v57, "_isEventTriggerOnLocalDeviceForAccessory:", v22))
      {
        v117 = (void *)MEMORY[0x227676638]();
        v100 = v57;
        v118 = v57;
        HMFGetOSLogHandle();
        v119 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v119, OS_LOG_TYPE_INFO))
        {
          HMFGetLogIdentifier();
          v120 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v22, "shortDescription");
          v121 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543618;
          v138 = v120;
          v139 = 2112;
          v140 = v121;
          _os_log_impl(&dword_2218F0000, v119, OS_LOG_TYPE_INFO, "%{public}@Not discovering accessory (%@) as trigger is active on resident and no clients and no local triggers locally", buf, 0x16u);

          v51 = v128;
        }

        objc_autoreleasePoolPop(v117);
        DiscoveryBackoffPeriod = getDiscoveryBackoffPeriod();
        v14 = v132;
        goto LABEL_59;
      }
      v105 = -[HMDHome _isEventTriggerOnRemoteGatewayForAccessory:](v57, "_isEventTriggerOnRemoteGatewayForAccessory:", v22);
      v106 = (void *)MEMORY[0x227676638]();
      v107 = v57;
      HMFGetOSLogHandle();
      v108 = objc_claimAutoreleasedReturnValue();
      v109 = os_log_type_enabled(v108, OS_LOG_TYPE_INFO);
      if (!v105)
      {
        if (v109)
        {
          HMFGetLogIdentifier();
          v113 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v22, "shortDescription");
          v114 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v128, "stateNumber");
          v115 = (__CFString *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v128, "stateChanged");
          HMFBooleanToString();
          v116 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138544130;
          v138 = v113;
          v139 = 2112;
          v140 = v114;
          v141 = 2112;
          v142 = v115;
          v143 = 2112;
          v144 = v116;
          _os_log_impl(&dword_2218F0000, v108, OS_LOG_TYPE_INFO, "%{public}@Discovering BLE Accessory: %@, State Number: %@, State Changed: %@", buf, 0x2Au);

          v11 = v131;
        }

        objc_autoreleasePoolPop(v106);
        v48 = 1;
        v13 = v127;
        v14 = v132;
        goto LABEL_51;
      }
      if (v109)
      {
        HMFGetLogIdentifier();
        v110 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v22, "shortDescription");
        v111 = v57;
        v112 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        v138 = v110;
        v139 = 2112;
        v140 = v112;
        _os_log_impl(&dword_2218F0000, v108, OS_LOG_TYPE_INFO, "%{public}@Backing off since triggers are on resident and have clients interested for accessory: %@", buf, 0x16u);

        v57 = v111;
      }

      objc_autoreleasePoolPop(v106);
      DiscoveryBackoffPeriod = getDiscoveryBackoffPeriod();
      v14 = v132;
      v51 = v128;
    }
LABEL_37:
    if (DiscoveryBackoffPeriod != 0.0)
    {
      v48 = 0;
LABEL_47:

      v13 = v127;
      if (DiscoveryBackoffPeriod > 0.0)
      {
        v93 = (void *)MEMORY[0x227676638]();
        v94 = v57;
        HMFGetOSLogHandle();
        v95 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v95, OS_LOG_TYPE_INFO))
        {
          HMFGetLogIdentifier();
          v96 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v22, "shortDescription");
          v97 = (void *)objc_claimAutoreleasedReturnValue();
          HMFBooleanToString();
          v98 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138544386;
          v138 = v96;
          v139 = 2112;
          v140 = v97;
          v141 = 2112;
          v142 = v127;
          v143 = 2112;
          v144 = v98;
          v145 = 2048;
          v146 = DiscoveryBackoffPeriod;
          _os_log_impl(&dword_2218F0000, v95, OS_LOG_TYPE_INFO, "%{public}@Backing off discovery for accessory %@ with s# %@, state changed: %@ for %.2f sec", buf, 0x34u);

          v11 = v131;
          v14 = v132;
        }

        objc_autoreleasePoolPop(v93);
        objc_msgSend(v22, "backOffAccessoryForStateNumber:backoffPeriod:", v127, DiscoveryBackoffPeriod);
      }
LABEL_51:
      v24 = v130;
      goto LABEL_52;
    }
LABEL_38:
    v80 = objc_msgSend(v22, "shouldAutoDiscoverAccessoryServer");
    v81 = objc_msgSend(v22, "enhancedAuthMethod");
    v82 = -[HMDHome _isRetrievalInProgressForPrimaryAccessory:linkType:](v57, "_isRetrievalInProgressForPrimaryAccessory:linkType:", v22, objc_msgSend(v129, "linkType"));
    context = (void *)MEMORY[0x227676638]();
    v83 = v57;
    HMFGetOSLogHandle();
    v84 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v84, OS_LOG_TYPE_INFO))
    {
      v124 = v57;
      HMFGetLogIdentifier();
      v85 = objc_claimAutoreleasedReturnValue();
      objc_msgSend(v129, "identifier");
      v86 = objc_claimAutoreleasedReturnValue();
      v87 = objc_msgSend(v129, "linkType");
      v125 = (void *)v85;
      v123 = (void *)v86;
      if (v87 > 2)
        v88 = CFSTR("Undefined");
      else
        v88 = off_24E780090[v87];
      v122 = v81;
      v89 = v88;
      HMFBooleanToString();
      v90 = (void *)objc_claimAutoreleasedReturnValue();
      HMFBooleanToString();
      v91 = (void *)objc_claimAutoreleasedReturnValue();
      HMFBooleanToString();
      v92 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138544642;
      v138 = v125;
      v139 = 2112;
      v140 = v123;
      v141 = 2112;
      v142 = v89;
      v143 = 2112;
      v144 = v90;
      v145 = 2112;
      v146 = *(double *)&v91;
      v147 = 2112;
      v148 = v92;
      _os_log_impl(&dword_2218F0000, v84, OS_LOG_TYPE_INFO, "%{public}@Evaluating need to discover accessories from found accessory server %@/%@, autoDiscoveryEnabled =  %@, hasExplicitRetrieveRequest = %@ discoverForEAuth = %@", buf, 0x3Eu);

      v81 = v122;
      v14 = v132;
      v51 = v128;
      v57 = v124;
    }

    objc_autoreleasePoolPop(context);
    if (v81)
      v48 = v80 | v82;
    else
      v48 = 1;
    v11 = v131;
    goto LABEL_47;
  }
  v35 = (void *)MEMORY[0x227676638]();
  v36 = v28;
  HMFGetOSLogHandle();
  v37 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v37, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v38 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "shortDescription");
    v39 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v22, "lpmProfile");
    v40 = (__CFString *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v22, "connectivityInfo");
    v134 = v35;
    v41 = v22;
    v42 = v12;
    v43 = v13;
    v44 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v44, "woWLANInfo");
    v45 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138544130;
    v138 = v38;
    v139 = 2112;
    v140 = v39;
    v141 = 2112;
    v142 = v40;
    v143 = 2112;
    v144 = v45;
    _os_log_impl(&dword_2218F0000, v37, OS_LOG_TYPE_INFO, "%{public}@Not discovering the suspended accessory server: %@ with LPM Profile: %@ and WoWInfo: %@.", buf, 0x2Au);

    v13 = v43;
    v12 = v42;
    v22 = v41;
    v35 = v134;

  }
  objc_autoreleasePoolPop(v35);
  objc_msgSend(MEMORY[0x24BDD1540], "hmErrorWithCode:", 23);
  v46 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v12, "identifier");
  v47 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHome _notifyRetrievalError:accessoryServer:linkType:accessoryOperationBlock:](v36, "_notifyRetrievalError:accessoryServer:linkType:accessoryOperationBlock:", v46, v47, objc_msgSend(v12, "linkType"), 0);

  v14 = v132;
  v132[2](v132, v130, 0);

  v11 = v131;
LABEL_53:

}

- (void)accessoryBrowser:(id)a3 didRemoveAccessoryServer:(id)a4 error:(id)a5
{
  id v8;
  id v9;
  id v10;
  void *v11;
  void *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  HMDHome *v18;
  NSObject *v19;
  void *v20;
  const __CFString *v21;
  HMDHAPMetricsLogEvent *v22;
  void *v23;
  int v24;
  void *v25;
  __int16 v26;
  id v27;
  __int16 v28;
  const __CFString *v29;
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  v8 = a3;
  v9 = a4;
  v10 = a5;
  objc_msgSend(v9, "identifier");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHome hapAccessoryWithIdentifier:](self, "hapAccessoryWithIdentifier:", v11);
  v12 = (void *)objc_claimAutoreleasedReturnValue();

  if (v12)
  {
    v13 = objc_msgSend(v9, "linkType");
    if (v10)
      v14 = 0;
    else
      v14 = v13 == 2;
    v15 = !v14;
    v16 = objc_msgSend(v9, "linkType");
    if (v16 == 1)
      v16 = objc_msgSend(v12, "_wol_processDidRemoveHPAccessoryServer:", v9);
    v17 = (void *)MEMORY[0x227676638](v16);
    v18 = self;
    HMFGetOSLogHandle();
    v19 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      v21 = CFSTR("not updating");
      v24 = 138543874;
      v25 = v20;
      v26 = 2112;
      if ((_DWORD)v15)
        v21 = CFSTR("updating");
      v27 = v9;
      v28 = 2112;
      v29 = v21;
      _os_log_impl(&dword_2218F0000, v19, OS_LOG_TYPE_INFO, "%{public}@AccessoryServer %@ removed - %@ reachability", (uint8_t *)&v24, 0x20u);

    }
    objc_autoreleasePoolPop(v17);
    -[HMDHome _unconfigurePairedAccessoriesForServer:updateReachability:](v18, "_unconfigurePairedAccessoriesForServer:updateReachability:", v9, v15);
    v22 = objc_alloc_init(HMDHAPMetricsLogEvent);
    -[HMDHAPMetricsLogEvent updateWithHAPAccessoryServer:](v22, "updateWithHAPAccessoryServer:", v9);
    -[HMDHome logEventSubmitter](v18, "logEventSubmitter");
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v23, "submitLogEvent:", v22);

  }
}

- (void)accessoryBrowser:(id)a3 didTombstoneAccessoryServer:(id)a4
{
  id v6;
  id v7;
  void *v8;
  void *v9;
  void *v10;
  HMDHome *v11;
  NSObject *v12;
  void *v13;
  void *v14;
  int v15;
  void *v16;
  __int16 v17;
  id v18;
  __int16 v19;
  void *v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  v6 = a3;
  v7 = a4;
  objc_msgSend(v7, "identifier");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHome hapAccessoryWithIdentifier:](self, "hapAccessoryWithIdentifier:", v8);
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  if (v9)
  {
    v10 = (void *)MEMORY[0x227676638]();
    v11 = self;
    HMFGetOSLogHandle();
    v12 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v9, "shortDescription");
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      v15 = 138543874;
      v16 = v13;
      v17 = 2112;
      v18 = v7;
      v19 = 2112;
      v20 = v14;
      _os_log_impl(&dword_2218F0000, v12, OS_LOG_TYPE_INFO, "%{public}@AccessoryServer %@ tombstoned - unconfiguring all paired accessories for %@", (uint8_t *)&v15, 0x20u);

    }
    objc_autoreleasePoolPop(v10);
    -[HMDHome _unconfigurePairedAccessoriesForServer:updateReachability:](v11, "_unconfigurePairedAccessoriesForServer:updateReachability:", v7, 1);
  }

}

- (void)accessoryBrowser:(id)a3 didFindAccessoryServerNeedingReprovisioning:(id)a4 error:(id)a5
{
  id v8;
  id v9;
  id v10;
  void *v11;
  void *v12;
  void *v13;
  HMDHome *v14;
  NSObject *v15;
  void *v16;
  void *v17;
  void *v18;
  int v19;
  void *v20;
  __int16 v21;
  void *v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  v8 = a3;
  v9 = a4;
  v10 = a5;
  if (objc_msgSend(v9, "isPaired"))
  {
    objc_msgSend(v9, "identifier");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHome hapAccessoryWithIdentifier:](self, "hapAccessoryWithIdentifier:", v11);
    v12 = (void *)objc_claimAutoreleasedReturnValue();

    if (v12)
    {
      v13 = (void *)MEMORY[0x227676638]();
      v14 = self;
      HMFGetOSLogHandle();
      v15 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v16 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v12, "shortDescription");
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        v19 = 138543618;
        v20 = v16;
        v21 = 2112;
        v22 = v17;
        _os_log_impl(&dword_2218F0000, v15, OS_LOG_TYPE_INFO, "%{public}@Accessory %@ needs reprovisioning is found", (uint8_t *)&v19, 0x16u);

      }
      objc_autoreleasePoolPop(v13);
      -[HMDHome homeReprovisionHandler](v14, "homeReprovisionHandler");
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v18, "handleFoundAccessoryNeedingReprovisioning:error:", v12, v10);

    }
  }

}

- (void)accessoryBrowser:(id)a3 didFinishWACForAccessoryWithIdentifier:(id)a4 error:(id)a5
{
  id v7;
  void *v8;
  void *v9;
  id v10;

  v10 = a4;
  v7 = a5;
  -[HMDHome accessoryWithIdentifier:](self, "accessoryWithIdentifier:", v10);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  if (v8)
  {
    -[HMDHome homeReprovisionHandler](self, "homeReprovisionHandler");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "handleReprovionedAccessory:identifier:error:", v8, v10, v7);

  }
}

- (void)accessoryBrowser:(id)a3 discoveryFailedWithError:(id)a4 accessoryServer:(id)a5 linkType:(int64_t)a6
{
  id v9;
  id v10;
  void *v11;
  _QWORD v12[4];
  id v13;
  int64_t v14;

  v9 = a4;
  v10 = a5;
  -[HMDHome hapAccessoryWithIdentifier:](self, "hapAccessoryWithIdentifier:", v10);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  if (v11)
  {
    v12[0] = MEMORY[0x24BDAC760];
    v12[1] = 3221225472;
    v12[2] = __78__HMDHome_accessoryBrowser_discoveryFailedWithError_accessoryServer_linkType___block_invoke;
    v12[3] = &unk_24E776D90;
    v14 = a6;
    v13 = v10;
    -[HMDHome _notifyRetrievalError:accessoryServer:linkType:accessoryOperationBlock:](self, "_notifyRetrievalError:accessoryServer:linkType:accessoryOperationBlock:", v9, v13, a6, v12);

  }
}

- (void)accessoryBrowser:(id)a3 accessoryServer:(id)a4 didStopPairingWithError:(id)a5
{
  id v8;
  id v9;
  id v10;
  void *v11;
  void *v12;
  void *v13;
  HMDHome *v14;
  NSObject *v15;
  void *v16;
  void *v17;
  void *v18;
  HMDHome *v19;
  NSObject *v20;
  _BOOL4 v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  id v27;
  void *v28;
  int v29;
  void *v30;
  uint64_t v31;
  void *v32;
  void *v33;
  _QWORD v34[4];
  id v35;
  uint8_t buf[4];
  void *v37;
  __int16 v38;
  void *v39;
  __int16 v40;
  id v41;
  uint64_t v42;

  v42 = *MEMORY[0x24BDAC8D0];
  v8 = a3;
  v9 = a4;
  v10 = a5;
  objc_msgSend(v9, "identifier");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHome hapAccessoryWithIdentifier:](self, "hapAccessoryWithIdentifier:", v11);
  v12 = (void *)objc_claimAutoreleasedReturnValue();

  if (v12)
  {
    v13 = (void *)MEMORY[0x227676638]();
    v14 = self;
    HMFGetOSLogHandle();
    v15 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v9, "shortDescription");
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543874;
      v37 = v16;
      v38 = 2112;
      v39 = v17;
      v40 = 2112;
      v41 = v10;
      _os_log_impl(&dword_2218F0000, v15, OS_LOG_TYPE_INFO, "%{public}@Accessory server %@ stopped pairing with error: %@", buf, 0x20u);

    }
    objc_autoreleasePoolPop(v13);
    v18 = (void *)MEMORY[0x227676638]();
    v19 = v14;
    HMFGetOSLogHandle();
    v20 = objc_claimAutoreleasedReturnValue();
    v21 = os_log_type_enabled(v20, OS_LOG_TYPE_INFO);
    if (v10)
    {
      if (v21)
      {
        HMFGetLogIdentifier();
        v22 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v9, "shortDescription");
        v23 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543874;
        v37 = v22;
        v38 = 2112;
        v39 = v23;
        v40 = 2112;
        v41 = v10;
        _os_log_impl(&dword_2218F0000, v20, OS_LOG_TYPE_INFO, "%{public}@Accessory server %@ failed to pair with error: %@", buf, 0x20u);

      }
      objc_autoreleasePoolPop(v18);
      objc_msgSend(v10, "userInfo");
      v24 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v24, "objectForKeyedSubscript:", *MEMORY[0x24BDD1398]);
      v25 = (void *)objc_claimAutoreleasedReturnValue();

      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0)
        v26 = v25;
      else
        v26 = 0;
      v27 = v26;

      objc_msgSend(v27, "domain");
      v28 = (void *)objc_claimAutoreleasedReturnValue();
      v29 = HMFEqualObjects();

      if (!v29 || objc_msgSend(v27, "code") != -6754)
      {
        objc_msgSend(v12, "setLastPairingFailureTime:", CFAbsoluteTimeGetCurrent());
        objc_msgSend(v12, "setConsecutivePairingFailures:", objc_msgSend(v12, "consecutivePairingFailures") + 1);
      }
      objc_msgSend(v9, "identifier");
      v30 = (void *)objc_claimAutoreleasedReturnValue();
      v31 = objc_msgSend(v9, "linkType");
      v34[0] = MEMORY[0x24BDAC760];
      v34[1] = 3221225472;
      v34[2] = __68__HMDHome_accessoryBrowser_accessoryServer_didStopPairingWithError___block_invoke;
      v34[3] = &unk_24E776180;
      v35 = v10;
      -[HMDHome _notifyRetrievalError:accessoryServer:linkType:accessoryOperationBlock:](v19, "_notifyRetrievalError:accessoryServer:linkType:accessoryOperationBlock:", v35, v30, v31, v34);

    }
    else
    {
      if (v21)
      {
        HMFGetLogIdentifier();
        v32 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v9, "shortDescription");
        v33 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        v37 = v32;
        v38 = 2112;
        v39 = v33;
        _os_log_impl(&dword_2218F0000, v20, OS_LOG_TYPE_INFO, "%{public}@Accessory server %@ pairing completed successfully", buf, 0x16u);

      }
      objc_autoreleasePoolPop(v18);
      -[HMDHome accessoryBrowser](v19, "accessoryBrowser");
      v27 = (id)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v27, "discoverAccessories:", v9);
    }

  }
}

- (void)accessoryBrowser:(id)a3 accessoryServer:(id)a4 didDiscoverAccessories:(id)a5 transaction:(id)a6 error:(id)a7
{
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  void *v17;
  void *v18;
  void *v19;
  HMDHome *v20;
  NSObject *v21;
  NSObject *v22;
  void *v23;
  void *v24;
  uint64_t v25;
  id v26;
  void *v27;
  uint64_t v28;
  void *v29;
  id v30;
  char isKindOfClass;
  _QWORD v32[4];
  id v33;
  HMDHome *v34;
  uint64_t v35;
  uint8_t buf[4];
  void *v37;
  __int16 v38;
  id v39;
  __int16 v40;
  id v41;
  uint64_t v42;

  v42 = *MEMORY[0x24BDAC8D0];
  v12 = a3;
  v13 = a4;
  v14 = a5;
  v15 = a6;
  v16 = a7;
  objc_msgSend(v13, "identifier");
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHome hapAccessoryWithIdentifier:](self, "hapAccessoryWithIdentifier:", v17);
  v18 = (void *)objc_claimAutoreleasedReturnValue();

  if (v18)
  {
    v19 = (void *)MEMORY[0x227676638]();
    v20 = self;
    HMFGetOSLogHandle();
    v21 = objc_claimAutoreleasedReturnValue();
    v22 = v21;
    if (v16)
    {
      if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v23 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543874;
        v37 = v23;
        v38 = 2112;
        v39 = v13;
        v40 = 2114;
        v41 = v16;
        _os_log_impl(&dword_2218F0000, v22, OS_LOG_TYPE_ERROR, "%{public}@Failed HAP service discovery on accessory server %@ with error: %{public}@", buf, 0x20u);

      }
      objc_autoreleasePoolPop(v19);
      objc_msgSend(v13, "identifier");
      v24 = (void *)objc_claimAutoreleasedReturnValue();
      v25 = objc_msgSend(v13, "linkType");
      v32[0] = MEMORY[0x24BDAC760];
      v32[1] = 3221225472;
      v32[2] = __85__HMDHome_accessoryBrowser_accessoryServer_didDiscoverAccessories_transaction_error___block_invoke;
      v32[3] = &unk_24E776DE0;
      v26 = v24;
      v34 = v20;
      v35 = v25;
      v33 = v26;
      -[HMDHome _notifyRetrievalError:accessoryServer:linkType:accessoryOperationBlock:](v20, "_notifyRetrievalError:accessoryServer:linkType:accessoryOperationBlock:", v16, v26, v25, v32);
      objc_msgSend(v16, "domain");
      v27 = (void *)objc_claimAutoreleasedReturnValue();
      if (objc_msgSend(v27, "isEqualToString:", *MEMORY[0x24BDD5BD8]))
      {
        v28 = objc_msgSend(v16, "code");

        if (v28 == 66)
        {
          objc_msgSend(v18, "didEncounterError:", v16);
LABEL_15:

          goto LABEL_16;
        }
      }
      else
      {

      }
      v30 = v13;
      objc_opt_class();
      isKindOfClass = objc_opt_isKindOfClass();

      if (v30 && (isKindOfClass & 1) != 0)
        objc_msgSend(v18, "_forceEnableReachabilityPingForPrimaryResident:", v30);
      goto LABEL_15;
    }
    if (os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v29 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v37 = v29;
      v38 = 2112;
      v39 = v13;
      _os_log_impl(&dword_2218F0000, v22, OS_LOG_TYPE_INFO, "%{public}@Completed HAP service discovery on accessory server %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v19);
    objc_msgSend(v18, "setLastPairingFailureTime:", 0.0);
    objc_msgSend(v18, "setConsecutivePairingFailures:", 0);
    -[HMDHome _configurePairedAccessoriesForServer:reAddServices:](v20, "_configurePairedAccessoriesForServer:reAddServices:", v13, objc_msgSend(v14, "count") == 0);
  }
LABEL_16:

}

- (void)accessoryBrowser:(id)a3 identifier:(id)a4 reachable:(BOOL)a5
{
  id v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  void *v13;
  id v14;
  void *v15;
  int v16;
  _BOOL4 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _BYTE v22[128];
  uint64_t v23;

  v17 = a5;
  v23 = *MEMORY[0x24BDAC8D0];
  v6 = a4;
  v18 = 0u;
  v19 = 0u;
  v20 = 0u;
  v21 = 0u;
  -[HMDHome accessories](self, "accessories");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v18, v22, 16);
  if (v8)
  {
    v9 = v8;
    v10 = *(_QWORD *)v19;
    do
    {
      v11 = 0;
      do
      {
        if (*(_QWORD *)v19 != v10)
          objc_enumerationMutation(v7);
        v12 = *(id *)(*((_QWORD *)&v18 + 1) + 8 * v11);
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0)
          v13 = v12;
        else
          v13 = 0;
        v14 = v13;

        if (!v14)
        {
          objc_msgSend(v12, "identifier");
          v15 = (void *)objc_claimAutoreleasedReturnValue();
          v16 = objc_msgSend(v15, "isEqualToString:", v6);

          if (v16)
            objc_msgSend(v12, "setReachable:", v17);
        }

        ++v11;
      }
      while (v9 != v11);
      v9 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v18, v22, 16);
    }
    while (v9);
  }

}

- (void)accessoryBrowser:(id)a3 didUpdateEndpoint:(id)a4
{
  id v6;
  void *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t i;
  id v17;
  void *v18;
  id v19;
  void *v20;
  int v21;
  void *v22;
  HMDHome *v23;
  NSObject *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  uint64_t v29;
  void *v30;
  void *v31;
  HMDHome *v32;
  NSObject *v33;
  void *v34;
  void *v35;
  void *v36;
  uint64_t v37;
  const char *v38;
  void *v39;
  HMDHome *v40;
  NSObject *v41;
  void *v42;
  HMDHome *v43;
  uint64_t v44;
  id v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t j;
  id v50;
  void *v51;
  id v52;
  id v53;
  void *v54;
  id obj;
  uint64_t v56;
  HMDHome *v57;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  uint8_t v73[128];
  uint8_t buf[4];
  void *v75;
  __int16 v76;
  void *v77;
  __int16 v78;
  id v79;
  __int16 v80;
  id v81;
  __int16 v82;
  uint64_t v83;
  _BYTE v84[128];
  _BYTE v85[128];
  uint64_t v86;

  v86 = *MEMORY[0x24BDAC8D0];
  v53 = a3;
  v6 = a4;
  v7 = (void *)MEMORY[0x24BDBCEB8];
  v57 = self;
  -[HMDHome accessories](self, "accessories");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "arrayWithCapacity:", objc_msgSend(v8, "count"));
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  v54 = v6;
  objc_msgSend(v6, "advertisements");
  v69 = 0u;
  v70 = 0u;
  v71 = 0u;
  v72 = 0u;
  obj = (id)objc_claimAutoreleasedReturnValue();
  v58 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v69, v85, 16);
  if (v58)
  {
    v56 = *(_QWORD *)v70;
    do
    {
      v10 = 0;
      do
      {
        if (*(_QWORD *)v70 != v56)
          objc_enumerationMutation(obj);
        v59 = v10;
        objc_msgSend(*(id *)(*((_QWORD *)&v69 + 1) + 8 * v10), "identifier");
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        v65 = 0u;
        v66 = 0u;
        v67 = 0u;
        v68 = 0u;
        -[HMDHome accessories](v57, "accessories");
        v12 = (void *)objc_claimAutoreleasedReturnValue();
        v13 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v65, v84, 16);
        if (v13)
        {
          v14 = v13;
          v15 = *(_QWORD *)v66;
          do
          {
            for (i = 0; i != v14; ++i)
            {
              if (*(_QWORD *)v66 != v15)
                objc_enumerationMutation(v12);
              v17 = *(id *)(*((_QWORD *)&v65 + 1) + 8 * i);
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0)
                v18 = v17;
              else
                v18 = 0;
              v19 = v18;

              objc_msgSend(v19, "identifier");
              v20 = (void *)objc_claimAutoreleasedReturnValue();
              v21 = objc_msgSend(v20, "isEqual:", v11);

              if (v21)
                objc_msgSend(v9, "addObject:", v19);

            }
            v14 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v65, v84, 16);
          }
          while (v14);
        }

        v10 = v59 + 1;
      }
      while (v59 + 1 != v58);
      v58 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v69, v85, 16);
    }
    while (v58);
  }

  v22 = (void *)MEMORY[0x227676638]();
  v23 = v57;
  HMFGetOSLogHandle();
  v24 = objc_claimAutoreleasedReturnValue();
  v25 = v54;
  if (os_log_type_enabled(v24, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v54, "sessionIdentifier");
    v27 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138544130;
    v75 = v26;
    v76 = 2112;
    v77 = v27;
    v78 = 2112;
    v79 = obj;
    v80 = 2112;
    v81 = v9;
    _os_log_impl(&dword_2218F0000, v24, OS_LOG_TYPE_INFO, "%{public}@Endpoint %@ with advertisements %@ matches accessories %@", buf, 0x2Au);

  }
  objc_autoreleasePoolPop(v22);
  if (objc_msgSend(v9, "count"))
  {
    objc_msgSend(v54, "sessionIdentifier");
    v28 = (void *)objc_claimAutoreleasedReturnValue();
    if (!v28)
    {
      v39 = (void *)MEMORY[0x227676638]();
      v40 = v23;
      HMFGetOSLogHandle();
      v41 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v41, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v42 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        v75 = v42;
        v76 = 2112;
        v77 = 0;
        _os_log_impl(&dword_2218F0000, v41, OS_LOG_TYPE_INFO, "%{public}@Nil session identifier - dropping update for endpoint %@", buf, 0x16u);

      }
      objc_autoreleasePoolPop(v39);
      goto LABEL_46;
    }
    -[HMDHome mediaSessionWithIdentifier:](v23, "mediaSessionWithIdentifier:", v28);
    v29 = objc_claimAutoreleasedReturnValue();
    v60 = v28;
    if (v29)
    {
      v30 = (void *)v29;
      v31 = (void *)MEMORY[0x227676638]();
      v32 = v23;
      HMFGetOSLogHandle();
      v33 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v33, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v34 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v30, "uuid");
        v35 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v35, "UUIDString");
        v36 = (void *)objc_claimAutoreleasedReturnValue();
        v37 = objc_msgSend(v9, "count");
        *(_DWORD *)buf = 138544386;
        v75 = v34;
        v76 = 2112;
        v77 = v36;
        v78 = 2112;
        v79 = v28;
        v80 = 2112;
        v81 = obj;
        v82 = 2048;
        v83 = v37;
        v38 = "%{public}@Updated the endpoint for mediaSession %@ with sessionIdentifier %@ (%@ advertisements for %tu accessories) ";
LABEL_32:
        _os_log_impl(&dword_2218F0000, v33, OS_LOG_TYPE_INFO, v38, buf, 0x34u);

      }
    }
    else
    {
      -[HMDHome _createMediaSessionWithEndpoint:](v23, "_createMediaSessionWithEndpoint:", v54);
      v30 = (void *)objc_claimAutoreleasedReturnValue();
      v31 = (void *)MEMORY[0x227676638]();
      v43 = v23;
      HMFGetOSLogHandle();
      v33 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v33, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v34 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v30, "uuid");
        v35 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v35, "UUIDString");
        v36 = (void *)objc_claimAutoreleasedReturnValue();
        v44 = objc_msgSend(v9, "count");
        *(_DWORD *)buf = 138544386;
        v75 = v34;
        v76 = 2112;
        v77 = v36;
        v78 = 2112;
        v79 = v28;
        v80 = 2112;
        v81 = obj;
        v82 = 2048;
        v83 = v44;
        v38 = "%{public}@Creating mediaSession %@ for sessionIdentifier %@ (%@ advertisements for %tu accessories) ";
        goto LABEL_32;
      }
    }

    objc_autoreleasePoolPop(v31);
    v63 = 0u;
    v64 = 0u;
    v61 = 0u;
    v62 = 0u;
    v45 = v9;
    v46 = objc_msgSend(v45, "countByEnumeratingWithState:objects:count:", &v61, v73, 16);
    if (v46)
    {
      v47 = v46;
      v48 = *(_QWORD *)v62;
      do
      {
        for (j = 0; j != v47; ++j)
        {
          if (*(_QWORD *)v62 != v48)
            objc_enumerationMutation(v45);
          v50 = *(id *)(*((_QWORD *)&v61 + 1) + 8 * j);
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) != 0)
            v51 = v50;
          else
            v51 = 0;
          v52 = v51;

          if (!v52)
            objc_msgSend(v50, "setReachable:", 1);
          objc_msgSend(v50, "updateMediaSession:", v30);

        }
        v47 = objc_msgSend(v45, "countByEnumeratingWithState:objects:count:", &v61, v73, 16);
      }
      while (v47);
    }

    v25 = v54;
    v28 = v60;
LABEL_46:

  }
}

- (id)_hmdCharacteristicsForUpdatedHAPCharacteristics:(id)a3 accessoryServer:(id)a4
{
  id v6;
  uint64_t v7;
  void *v8;
  void *v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  void *v16;
  id v17;
  void *v18;
  void *v19;
  id obj;
  uint64_t v22;
  void *v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  _BYTE v36[128];
  _BYTE v37[128];
  uint64_t v38;

  v38 = *MEMORY[0x24BDAC8D0];
  v6 = a3;
  v24 = a4;
  objc_msgSend(MEMORY[0x24BDBCEB8], "arrayWithCapacity:", objc_msgSend(v6, "count"));
  v27 = (id)objc_claimAutoreleasedReturnValue();
  -[HMDHome accessories](self, "accessories");
  v23 = (void *)objc_claimAutoreleasedReturnValue();
  v32 = 0u;
  v33 = 0u;
  v34 = 0u;
  v35 = 0u;
  obj = v6;
  v25 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v32, v37, 16);
  if (v25)
  {
    v22 = *(_QWORD *)v33;
    do
    {
      v7 = 0;
      do
      {
        if (*(_QWORD *)v33 != v22)
          objc_enumerationMutation(obj);
        v26 = v7;
        v8 = *(void **)(*((_QWORD *)&v32 + 1) + 8 * v7);
        objc_msgSend(v24, "primaryAccessory");
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        v28 = 0u;
        v29 = 0u;
        v30 = 0u;
        v31 = 0u;
        v10 = v23;
        v11 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v28, v36, 16);
        if (v11)
        {
          v12 = v11;
          v13 = *(_QWORD *)v29;
          do
          {
            v14 = 0;
            do
            {
              if (*(_QWORD *)v29 != v13)
                objc_enumerationMutation(v10);
              v15 = *(id *)(*((_QWORD *)&v28 + 1) + 8 * v14);
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0)
                v16 = v15;
              else
                v16 = 0;
              v17 = v16;

              if (objc_msgSend(v17, "matchesHAPAccessory:", v9))
              {
                objc_msgSend(v8, "instanceID");
                v18 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v17, "hmdCharacteristicForInstanceId:", v18);
                v19 = (void *)objc_claimAutoreleasedReturnValue();

                if (objc_msgSend(v19, "shouldUpdateValueFromHAPCharacteristic:", v8))
                  objc_msgSend(v27, "addObject:", v19);

              }
              ++v14;
            }
            while (v12 != v14);
            v12 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v28, v36, 16);
          }
          while (v12);
        }

        v7 = v26 + 1;
      }
      while (v26 + 1 != v25);
      v25 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v32, v37, 16);
    }
    while (v25);
  }

  return v27;
}

- (id)_changedHMDCharacteristicsForHAPCharacteristics:(id)a3 stateNumber:(id)a4 broadcast:(BOOL)a5 accessoryServer:(id)a6
{
  _BOOL4 v7;
  id v10;
  uint64_t i;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  char v17;
  uint64_t v18;
  void *v19;
  char v20;
  void *v21;
  void *v22;
  void *v23;
  HMDHome *v24;
  NSObject *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  __int128 v32;
  int v33;
  void *v34;
  uint64_t v35;
  void *v36;
  void *v37;
  void *v38;
  int v39;
  void *v40;
  void *v41;
  _BOOL4 v42;
  HMDHome *v43;
  NSObject *v44;
  void *v45;
  uint64_t v46;
  void *v47;
  void *v48;
  void *v49;
  void *v50;
  void *v51;
  uint64_t v52;
  void *v53;
  char v54;
  HMDHome *v55;
  void *v56;
  void *v57;
  void *v58;
  void *v59;
  void *v60;
  void *v61;
  void *v62;
  void *v63;
  void *v64;
  HMDHome *v65;
  NSObject *v66;
  void *v67;
  void *v68;
  void *v69;
  void *v70;
  void *v71;
  void *v72;
  void *v73;
  void *v74;
  HMDHome *v75;
  NSObject *v76;
  void *v77;
  void *v78;
  void *v79;
  void *v80;
  void *v81;
  void *v82;
  void *v83;
  void *v84;
  HMDHome *v85;
  NSObject *v86;
  void *v87;
  void *v88;
  void *v89;
  void *v90;
  uint64_t v91;
  void *v92;
  HMDHome *v93;
  NSObject *v94;
  uint64_t v95;
  void *v96;
  void *v97;
  void *v98;
  void *v99;
  void *v100;
  void *v101;
  void *v102;
  void *v103;
  HMDHome *v104;
  NSObject *v105;
  void *v106;
  void *v107;
  void *v108;
  void *v109;
  void *v110;
  HMDHome *v111;
  NSObject *v112;
  void *v113;
  void *v114;
  uint64_t v115;
  id v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t j;
  __int128 v122;
  void *v123;
  void *v124;
  void *v125;
  HMDHome *v126;
  int v127;
  HMDHome *v128;
  id v129;
  id obj;
  id v131;
  id v132;
  id v133;
  void *context;
  void *contexta;
  HMDHome *v136;
  _BOOL4 v137;
  uint64_t v138;
  id v139;
  void *v140;
  void *v141;
  void *v142;
  void *v143;
  void *v144;
  uint64_t v145;
  uint64_t v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  __int128 v150;
  __int128 v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  __int128 v158;
  uint8_t v159[128];
  uint8_t buf[4];
  id v161;
  __int16 v162;
  uint64_t v163;
  __int16 v164;
  uint64_t v165;
  __int16 v166;
  void *v167;
  __int16 v168;
  void *v169;
  __int16 v170;
  id v171;
  __int16 v172;
  id v173;
  __int16 v174;
  void *v175;
  _BYTE v176[128];
  _BYTE v177[128];
  uint64_t v178;

  v7 = a5;
  v178 = *MEMORY[0x24BDAC8D0];
  v10 = a3;
  v139 = a4;
  v133 = a6;
  objc_msgSend(MEMORY[0x24BDD1650], "strongToStrongObjectsMapTable");
  v144 = (void *)objc_claimAutoreleasedReturnValue();
  v155 = 0u;
  v156 = 0u;
  v157 = 0u;
  v158 = 0u;
  v136 = self;
  obj = v10;
  v145 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v155, v177, 16);
  if (v145)
  {
    v140 = *(void **)v156;
    v137 = v7;
    do
    {
      for (i = 0; i != v145; ++i)
      {
        if (*(void **)v156 != v140)
          objc_enumerationMutation(obj);
        v12 = *(void **)(*((_QWORD *)&v155 + 1) + 8 * i);
        objc_msgSend(v12, "service");
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v13, "accessory");
        v14 = (void *)objc_claimAutoreleasedReturnValue();
        -[HMDHome hapMetadata](self, "hapMetadata");
        v15 = (void *)objc_claimAutoreleasedReturnValue();
        if (v7)
        {
          objc_msgSend(v12, "type");
          v16 = (void *)objc_claimAutoreleasedReturnValue();
          v17 = objc_msgSend(v15, "shouldFilterCharacteristicOfType:", v16);

          if ((v17 & 1) != 0)
            goto LABEL_16;
          objc_msgSend(v133, "primaryAccessory");
          v18 = objc_claimAutoreleasedReturnValue();

          v14 = (void *)v18;
        }
        else
        {
          objc_msgSend(v13, "type");
          v19 = (void *)objc_claimAutoreleasedReturnValue();
          v20 = objc_msgSend(v15, "shouldFilterServiceOfType:", v19);

          if ((v20 & 1) != 0)
            goto LABEL_16;
        }
        -[HMDHome hmdHAPAccessoryWithHAPAccessory:](self, "hmdHAPAccessoryWithHAPAccessory:", v14);
        v21 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v12, "instanceID");
        v22 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v21, "hmdCharacteristicForInstanceId:", v22);
        v23 = (void *)objc_claimAutoreleasedReturnValue();

        if (v23)
        {
          objc_msgSend(v144, "setObject:forKey:", v23, v12);
        }
        else
        {
          context = (void *)MEMORY[0x227676638]();
          v24 = self;
          HMFGetOSLogHandle();
          v25 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
          {
            HMFGetLogIdentifier();
            v131 = (id)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v133, "identifier");
            v128 = v24;
            v26 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v13, "instanceID");
            v27 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v12, "instanceID");
            v28 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v12, "type");
            v29 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 138544386;
            v161 = v131;
            v162 = 2112;
            v163 = (uint64_t)v26;
            v164 = 2112;
            v165 = (uint64_t)v27;
            v166 = 2112;
            v167 = v28;
            v168 = 2112;
            v169 = v29;
            _os_log_impl(&dword_2218F0000, v25, OS_LOG_TYPE_DEFAULT, "%{public}@Cannot map HAPCharacteristic %@/%@/%@/%@ to a HMDCharacteristic", buf, 0x34u);

            v24 = v128;
          }

          objc_autoreleasePoolPop(context);
          self = v136;
        }

        v7 = v137;
LABEL_16:

      }
      v145 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v155, v177, 16);
    }
    while (v145);
  }

  objc_msgSend(MEMORY[0x24BDBCEB8], "arrayWithCapacity:", objc_msgSend(obj, "count"));
  v132 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x24BDBCEF0], "set");
  v123 = (void *)objc_claimAutoreleasedReturnValue();
  v151 = 0u;
  v152 = 0u;
  v153 = 0u;
  v154 = 0u;
  objc_msgSend(v144, "keyEnumerator");
  v30 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v30, "allObjects");
  v31 = (void *)objc_claimAutoreleasedReturnValue();

  v129 = v31;
  v138 = objc_msgSend(v31, "countByEnumeratingWithState:objects:count:", &v151, v176, 16);
  v33 = 0;
  if (!v138)
  {
    v34 = v139;
    goto LABEL_71;
  }
  contexta = *(void **)v152;
  *(_QWORD *)&v32 = 138543618;
  v122 = v32;
  v34 = v139;
  do
  {
    v35 = 0;
    do
    {
      if (*(void **)v152 != contexta)
        objc_enumerationMutation(v129);
      v36 = *(void **)(*((_QWORD *)&v151 + 1) + 8 * v35);
      objc_msgSend(v144, "objectForKey:", v36, v122);
      v37 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v37, "stateNumber");
      v38 = (void *)objc_claimAutoreleasedReturnValue();
      v39 = HMFEqualObjects();

      if (v39)
      {
        v146 = v35;
        objc_msgSend(v36, "value");
        v40 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v37, "lastKnownValue");
        v41 = (void *)objc_claimAutoreleasedReturnValue();
        v42 = +[HMDCharacteristic value:differentThan:](HMDCharacteristic, "value:differentThan:", v40, v41);

        if (v34 && v42)
        {
          v141 = (void *)MEMORY[0x227676638]();
          v43 = self;
          HMFGetOSLogHandle();
          v44 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v44, OS_LOG_TYPE_DEFAULT))
          {
            HMFGetLogIdentifier();
            v125 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v37, "type");
            v45 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v37, "instanceID");
            v46 = objc_claimAutoreleasedReturnValue();
            objc_msgSend(v37, "lastKnownValue");
            v47 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v37, "stateNumber");
            v48 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v36, "value");
            v49 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v133, "identifier");
            v50 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 138545154;
            v161 = v125;
            v162 = 2112;
            v163 = (uint64_t)v45;
            v164 = 2112;
            v165 = v46;
            v51 = (void *)v46;
            v166 = 2112;
            v167 = v47;
            v168 = 2112;
            v169 = v48;
            v170 = 2112;
            v171 = v49;
            v172 = 2112;
            v173 = v139;
            v174 = 2112;
            v175 = v50;
            _os_log_impl(&dword_2218F0000, v44, OS_LOG_TYPE_DEFAULT, "%{public}@Characteristic: '%@'/%@ updated value at same state number from %@/%@ to %@/%@ for accessory: %@", buf, 0x52u);

            self = v136;
          }
          goto LABEL_32;
        }
        if (objc_msgSend(v37, "shouldUpdateValueFromHAPCharacteristic:", v36)
          && (objc_msgSend(v36, "value"), v73 = (void *)objc_claimAutoreleasedReturnValue(), v73, v73))
        {
          v74 = (void *)MEMORY[0x227676638]();
          v75 = self;
          HMFGetOSLogHandle();
          v76 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v76, OS_LOG_TYPE_DEFAULT))
          {
            HMFGetLogIdentifier();
            v77 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v37, "type");
            v78 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v37, "instanceID");
            v126 = v75;
            v79 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v37, "lastKnownValue");
            v142 = v74;
            v80 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v36, "value");
            v81 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v133, "identifier");
            v82 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 138544898;
            v161 = v77;
            v162 = 2112;
            v163 = (uint64_t)v78;
            v164 = 2112;
            v165 = (uint64_t)v79;
            v166 = 2112;
            v167 = v80;
            v168 = 2112;
            v169 = v81;
            v170 = 2112;
            v171 = v139;
            v172 = 2112;
            v173 = v82;
            _os_log_impl(&dword_2218F0000, v76, OS_LOG_TYPE_DEFAULT, "%{public}@Characteristic: '%@'/%@ updated value from %@ to %@ at same state number %@ for accessory: %@", buf, 0x48u);

            v74 = v142;
            v75 = v126;

          }
          objc_autoreleasePoolPop(v74);
          objc_msgSend(v132, "addObject:", v37);
          objc_msgSend(v37, "accessory");
          v83 = (void *)objc_claimAutoreleasedReturnValue();
          if ((objc_msgSend(v83, "supportsWoL") & 1) == 0 && !objc_msgSend(v83, "custom1WoBLE"))
            goto LABEL_48;
          v84 = (void *)MEMORY[0x227676638]();
          v85 = v75;
          HMFGetOSLogHandle();
          v86 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v86, OS_LOG_TYPE_INFO))
          {
            HMFGetLogIdentifier();
            v87 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v133, "identifier");
            v88 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 138544130;
            v161 = v87;
            v162 = 2112;
            v163 = (uint64_t)v36;
            v164 = 2112;
            v165 = (uint64_t)v37;
            v166 = 2112;
            v167 = v88;
            _os_log_impl(&dword_2218F0000, v86, OS_LOG_TYPE_INFO, "%{public}@Checking if we should update value hapCharacteristic %@ to hmdCharacteristic %@ for accessory: %@", buf, 0x2Au);

          }
          objc_autoreleasePoolPop(v84);
          if (v42
            || (objc_msgSend(v37, "lastKnownValueUpdateTime"),
                v89 = (void *)objc_claimAutoreleasedReturnValue(),
                objc_msgSend(v36, "valueUpdatedTime"),
                v90 = (void *)objc_claimAutoreleasedReturnValue(),
                v91 = objc_msgSend(v89, "compare:", v90),
                v90,
                v89,
                v91))
          {
LABEL_48:

            self = v136;
            goto LABEL_33;
          }
          v110 = (void *)MEMORY[0x227676638]();
          v111 = v85;
          HMFGetOSLogHandle();
          v112 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v112, OS_LOG_TYPE_INFO))
          {
            HMFGetLogIdentifier();
            v113 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v133, "identifier");
            v114 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = v122;
            v161 = v113;
            v162 = 2112;
            v163 = (uint64_t)v114;
            _os_log_impl(&dword_2218F0000, v112, OS_LOG_TYPE_INFO, "%{public}@Not updating value because update times and values are the same for accessory: %@", buf, 0x16u);

          }
          objc_autoreleasePoolPop(v110);

          v34 = v139;
          objc_msgSend(v37, "setStateNumber:", v139);
          v33 = 1;
        }
        else
        {
          v92 = (void *)MEMORY[0x227676638]();
          v93 = self;
          HMFGetOSLogHandle();
          v94 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v94, OS_LOG_TYPE_DEBUG))
          {
            HMFGetLogIdentifier();
            v124 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v37, "type");
            v95 = objc_claimAutoreleasedReturnValue();
            objc_msgSend(v37, "instanceID");
            v96 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v37, "stateNumber");
            v127 = v33;
            v97 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v37, "lastKnownValue");
            v143 = v92;
            v98 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v36, "value");
            v99 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v133, "identifier");
            v100 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 138544898;
            v161 = v124;
            v162 = 2112;
            v163 = v95;
            v101 = (void *)v95;
            v164 = 2112;
            v165 = (uint64_t)v96;
            v166 = 2112;
            v167 = v97;
            v168 = 2112;
            v169 = v98;
            v170 = 2112;
            v171 = v99;
            v172 = 2112;
            v173 = v100;
            _os_log_impl(&dword_2218F0000, v94, OS_LOG_TYPE_DEBUG, "%{public}@Ignoring the update for characteristic: '%@'/%@/%@ from %@ to %@ for accessory: %@", buf, 0x48u);

            v92 = v143;
            v33 = v127;

            v34 = v139;
          }

          objc_autoreleasePoolPop(v92);
        }
        self = v136;
LABEL_53:
        v35 = v146;
        if (!v34)
          goto LABEL_59;
LABEL_54:
        if ((v33 & 1) != 0 && (objc_msgSend(v37, "shouldIgnoreCacheValueForRead") & 1) == 0)
        {
          objc_msgSend(v37, "accessory");
          v102 = (void *)objc_claimAutoreleasedReturnValue();
          if (v102)
            objc_msgSend(v123, "addObject:", v102);

        }
        goto LABEL_59;
      }
      objc_msgSend(v36, "value");
      v52 = objc_claimAutoreleasedReturnValue();
      if (!v52
        || (v53 = (void *)v52,
            v54 = objc_msgSend(v37, "shouldUpdateValueFromHAPCharacteristic:", v36),
            v53,
            (v54 & 1) != 0))
      {
        v141 = (void *)MEMORY[0x227676638]();
        v55 = self;
        HMFGetOSLogHandle();
        v44 = objc_claimAutoreleasedReturnValue();
        v146 = v35;
        if (os_log_type_enabled(v44, OS_LOG_TYPE_DEFAULT))
        {
          HMFGetLogIdentifier();
          v56 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v37, "type");
          v57 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v37, "instanceID");
          v58 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v37, "lastKnownValue");
          v59 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v37, "stateNumber");
          v60 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v36, "value");
          v61 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v133, "identifier");
          v62 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138545154;
          v161 = v56;
          v162 = 2112;
          v163 = (uint64_t)v57;
          v164 = 2112;
          v165 = (uint64_t)v58;
          v166 = 2112;
          v167 = v59;
          v168 = 2112;
          v169 = v60;
          v170 = 2112;
          v171 = v61;
          v172 = 2112;
          v173 = v139;
          v174 = 2112;
          v175 = v62;
          _os_log_impl(&dword_2218F0000, v44, OS_LOG_TYPE_DEFAULT, "%{public}@Characteristic: '%@'/%@ updated value / state number from %@/%@ to %@/%@ for accessory: %@", buf, 0x52u);

          self = v136;
        }
LABEL_32:

        objc_autoreleasePoolPop(v141);
        objc_msgSend(v132, "addObject:", v37);
LABEL_33:
        v34 = v139;
        objc_msgSend(v37, "setStateNumber:", v139);
        objc_msgSend(v36, "notificationContext");
        v63 = (void *)objc_claimAutoreleasedReturnValue();

        if (v63)
        {
          v64 = (void *)MEMORY[0x227676638]();
          v65 = self;
          HMFGetOSLogHandle();
          v66 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v66, OS_LOG_TYPE_INFO))
          {
            HMFGetLogIdentifier();
            v67 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v36, "value");
            v68 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v36, "notificationContext");
            v69 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 138543874;
            v161 = v67;
            v162 = 2112;
            v163 = (uint64_t)v68;
            v164 = 2112;
            v165 = (uint64_t)v69;
            _os_log_impl(&dword_2218F0000, v66, OS_LOG_TYPE_INFO, "%{public}@Updating HMD characteristic with value: %@ and notification context: %@", buf, 0x20u);

            self = v136;
          }

          objc_autoreleasePoolPop(v64);
        }
        objc_msgSend(v36, "value");
        v70 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v36, "valueUpdatedTime");
        v71 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v36, "notificationContext");
        v72 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v37, "updateValue:updatedTime:stateNumber:notificationContext:", v70, v71, v139, v72);

        v33 = 1;
        goto LABEL_53;
      }
      v103 = (void *)MEMORY[0x227676638]();
      v104 = self;
      HMFGetOSLogHandle();
      v105 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v105, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v106 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v36, "value");
        v107 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v37, "shortDescription");
        v108 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v133, "identifier");
        v109 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138544130;
        v161 = v106;
        v162 = 2112;
        v163 = (uint64_t)v107;
        v164 = 2112;
        v165 = (uint64_t)v108;
        v166 = 2112;
        v167 = v109;
        _os_log_impl(&dword_2218F0000, v105, OS_LOG_TYPE_INFO, "%{public}@Ignoring same value %@ updates from local for characteristic: '%@' for accessory: %@", buf, 0x2Au);

        v34 = v139;
        self = v136;

      }
      objc_autoreleasePoolPop(v103);
      objc_msgSend(v37, "setStateNumber:", v34);
      v33 = 1;
      if (v34)
        goto LABEL_54;
LABEL_59:

      ++v35;
    }
    while (v138 != v35);
    v115 = objc_msgSend(v129, "countByEnumeratingWithState:objects:count:", &v151, v176, 16);
    v138 = v115;
  }
  while (v115);
LABEL_71:

  v149 = 0u;
  v150 = 0u;
  v147 = 0u;
  v148 = 0u;
  v116 = v123;
  v117 = objc_msgSend(v116, "countByEnumeratingWithState:objects:count:", &v147, v159, 16);
  if (v117)
  {
    v118 = v117;
    v119 = *(_QWORD *)v148;
    do
    {
      for (j = 0; j != v118; ++j)
      {
        if (*(_QWORD *)v148 != v119)
          objc_enumerationMutation(v116);
        objc_msgSend(*(id *)(*((_QWORD *)&v147 + 1) + 8 * j), "notifyingCharacteristicStateNumberUpdated:", v34);
      }
      v118 = objc_msgSend(v116, "countByEnumeratingWithState:objects:count:", &v147, v159, 16);
    }
    while (v118);
  }

  if (v34 != 0 && (v33 & 1) != 0)
    -[HMDHome saveToCurrentAccountWithReason:](self, "saveToCurrentAccountWithReason:", CFSTR("kCharacteristicValueUpdateStateNumberKey"));

  return v132;
}

- (void)accessoryBrowser:(id)a3 accessoryServer:(id)a4 didUpdateValuesForCharacteristics:(id)a5 stateNumber:(id)a6 broadcast:(BOOL)a7
{
  id v11;
  id v12;
  id v13;
  NSObject *v14;
  id v15;
  id v16;
  id v17;
  _QWORD block[5];
  id v19;
  id v20;
  id v21;
  BOOL v22;

  v11 = a4;
  v12 = a5;
  v13 = a6;
  -[HMDHome workQueue](self, "workQueue");
  v14 = objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x24BDAC760];
  block[1] = 3221225472;
  block[2] = __100__HMDHome_accessoryBrowser_accessoryServer_didUpdateValuesForCharacteristics_stateNumber_broadcast___block_invoke;
  block[3] = &unk_24E78E830;
  block[4] = self;
  v19 = v12;
  v20 = v11;
  v21 = v13;
  v22 = a7;
  v15 = v13;
  v16 = v11;
  v17 = v12;
  dispatch_async(v14, block);

}

- (void)handleUpdatedCharacteristics:(id)a3 accessoryServer:(id)a4
{
  id v6;
  id v7;
  NSObject *v8;
  id v9;
  id v10;
  _QWORD block[5];
  id v12;
  id v13;

  v6 = a3;
  v7 = a4;
  -[HMDHome workQueue](self, "workQueue");
  v8 = objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x24BDAC760];
  block[1] = 3221225472;
  block[2] = __56__HMDHome_handleUpdatedCharacteristics_accessoryServer___block_invoke;
  block[3] = &unk_24E79BBD0;
  block[4] = self;
  v12 = v6;
  v13 = v7;
  v9 = v7;
  v10 = v6;
  dispatch_async(v8, block);

}

- (void)_handleUpdatedCharacteristics:(id)a3 accessoryServer:(id)a4 stateNumber:(id)a5 broadcast:(BOOL)a6 internal:(BOOL)a7
{
  _BOOL8 v8;
  id v12;
  id v13;
  id v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  _BOOL4 v20;
  void *v21;
  HMDHome *v22;
  NSObject *v23;
  void *v24;
  id v25;
  void *v26;
  id v27;
  void *v28;
  void *v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t i;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t j;
  void *v44;
  void *v45;
  void *v46;
  void *v47;
  id v48;
  id v49;
  id v50;
  id v51;
  id obj;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  _QWORD v61[2];
  _QWORD v62[2];
  _BYTE v63[128];
  uint8_t v64[128];
  uint8_t buf[4];
  void *v66;
  uint64_t v67;

  v8 = a6;
  v67 = *MEMORY[0x24BDAC8D0];
  v12 = a3;
  v13 = a4;
  v14 = a5;
  objc_msgSend(v13, "identifier");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHome hapAccessoryWithIdentifier:](self, "hapAccessoryWithIdentifier:", v15);
  v16 = (void *)objc_claimAutoreleasedReturnValue();

  if (v16)
  {
    if (v8)
    {
      +[HMDBLEBroadcastEventReceived broadcastEventFromAccessory:withExpectedGSN:](HMDBLEBroadcastEventReceived, "broadcastEventFromAccessory:withExpectedGSN:", v16, 1);
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      -[HMDHome logEventSubmitter](self, "logEventSubmitter");
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v18, "submitLogEvent:", v17);

      -[HMDHome _hmdCharacteristicsForUpdatedHAPCharacteristics:accessoryServer:](self, "_hmdCharacteristicsForUpdatedHAPCharacteristics:accessoryServer:", v12, v13);
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      v20 = -[HMDHome _isSecureClassTriggeredByCharacteristics:](self, "_isSecureClassTriggeredByCharacteristics:", v19);

      if (v20)
      {
        v21 = (void *)MEMORY[0x227676638]();
        v22 = self;
        HMFGetOSLogHandle();
        v23 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v23, OS_LOG_TYPE_DEBUG))
        {
          HMFGetLogIdentifier();
          v24 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543362;
          v66 = v24;
          _os_log_impl(&dword_2218F0000, v23, OS_LOG_TYPE_DEBUG, "%{public}@Broadcasted change - triggering secure class - confirming", buf, 0xCu);

        }
        objc_autoreleasePoolPop(v21);
        if (objc_msgSend(v13, "linkType") == 2)
        {
          v25 = v13;
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) != 0)
            v26 = v25;
          else
            v26 = 0;
          v27 = v26;

          objc_msgSend(v27, "setConnectReason:", 4);
        }
        -[HMDHome accessoryBrowser](v22, "accessoryBrowser");
        v28 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v28, "discoverAccessories:", v13);
LABEL_33:

        goto LABEL_34;
      }

    }
    v49 = v14;
    v50 = v13;
    v51 = v12;
    -[HMDHome _changedHMDCharacteristicsForHAPCharacteristics:stateNumber:broadcast:accessoryServer:](self, "_changedHMDCharacteristicsForHAPCharacteristics:stateNumber:broadcast:accessoryServer:", v12, v14, v8, v13);
    v29 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHome _notifyChangedCharacteristics:message:modifiedCharacteristics:broadcast:](self, "_notifyChangedCharacteristics:message:modifiedCharacteristics:broadcast:", v29, 0, 0, v8);
    if (!v8 && !a7)
      -[HMDHome _auditChangedCharactersitics:](self, "_auditChangedCharactersitics:", v29);
    objc_msgSend(MEMORY[0x24BDBCED8], "dictionary");
    v28 = (void *)objc_claimAutoreleasedReturnValue();
    v57 = 0u;
    v58 = 0u;
    v59 = 0u;
    v60 = 0u;
    v30 = v29;
    v31 = objc_msgSend(v30, "countByEnumeratingWithState:objects:count:", &v57, v64, 16);
    if (v31)
    {
      v32 = v31;
      v33 = *(_QWORD *)v58;
      do
      {
        for (i = 0; i != v32; ++i)
        {
          if (*(_QWORD *)v58 != v33)
            objc_enumerationMutation(v30);
          v35 = *(void **)(*((_QWORD *)&v57 + 1) + 8 * i);
          objc_msgSend(v35, "accessory");
          v36 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v36, "uuid");
          v37 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v28, "objectForKeyedSubscript:", v37);
          v38 = (void *)objc_claimAutoreleasedReturnValue();

          if (!v38)
          {
            objc_msgSend(MEMORY[0x24BDBCEB8], "array");
            v38 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v36, "uuid");
            v39 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v28, "setObject:forKeyedSubscript:", v38, v39);

          }
          objc_msgSend(v38, "addObject:", v35);

        }
        v32 = objc_msgSend(v30, "countByEnumeratingWithState:objects:count:", &v57, v64, 16);
      }
      while (v32);
    }
    v48 = v30;

    v55 = 0u;
    v56 = 0u;
    v53 = 0u;
    v54 = 0u;
    objc_msgSend(v28, "allValues");
    obj = (id)objc_claimAutoreleasedReturnValue();
    v40 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v53, v63, 16);
    if (v40)
    {
      v41 = v40;
      v42 = *(_QWORD *)v54;
      do
      {
        for (j = 0; j != v41; ++j)
        {
          if (*(_QWORD *)v54 != v42)
            objc_enumerationMutation(obj);
          v44 = *(void **)(*((_QWORD *)&v53 + 1) + 8 * j);
          v61[0] = CFSTR("HMDNotificationCharacteristicValueUpdatedReasonKey");
          v61[1] = CFSTR("HMDNotificationCharacteristicValueUpdatedChangedCharacteristicsKey");
          v62[0] = &unk_24E96A658;
          v62[1] = v44;
          objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v62, v61, 2, v48);
          v45 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v44, "firstObject");
          v46 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v46, "accessory");
          v47 = (void *)objc_claimAutoreleasedReturnValue();
          logAndPostNotification(CFSTR("HMDNotificationCharacteristicValueUpdated"), v47, v45);

        }
        v41 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v53, v63, 16);
      }
      while (v41);
    }

    v13 = v50;
    v12 = v51;
    v14 = v49;
    v17 = v48;
    goto LABEL_33;
  }
LABEL_34:

}

- (BOOL)_isSecureClassTriggeredByCharacteristics:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t i;
  id v9;
  void *v10;
  id v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t j;
  void *v17;
  int v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t k;
  void *v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t m;
  void *v30;
  BOOL v31;
  void *v32;
  HMDHome *v33;
  NSObject *v34;
  void *v35;
  HMDHome *v37;
  id obj;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  uint64_t v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  uint8_t buf[4];
  void *v60;
  __int16 v61;
  void *v62;
  __int16 v63;
  void *v64;
  _BYTE v65[128];
  _BYTE v66[128];
  _BYTE v67[128];
  _BYTE v68[128];
  uint64_t v69;

  v69 = *MEMORY[0x24BDAC8D0];
  v4 = a3;
  v5 = (void *)MEMORY[0x24BDBCEB8];
  -[HMDHome triggers](self, "triggers");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "arrayWithCapacity:", objc_msgSend(v6, "count"));
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  v57 = 0u;
  v58 = 0u;
  v55 = 0u;
  v56 = 0u;
  v37 = self;
  -[HMDHome triggers](self, "triggers");
  obj = (id)objc_claimAutoreleasedReturnValue();
  v40 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v55, v68, 16);
  if (v40)
  {
    v39 = *(_QWORD *)v56;
    do
    {
      for (i = 0; i != v40; ++i)
      {
        if (*(_QWORD *)v56 != v39)
          objc_enumerationMutation(obj);
        v9 = *(id *)(*((_QWORD *)&v55 + 1) + 8 * i);
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0)
          v10 = v9;
        else
          v10 = 0;
        v11 = v10;

        v53 = 0u;
        v54 = 0u;
        v51 = 0u;
        v52 = 0u;
        v41 = v11;
        objc_msgSend(v11, "characteristicBaseEvents");
        v12 = (void *)objc_claimAutoreleasedReturnValue();
        v13 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v51, v67, 16);
        if (v13)
        {
          v14 = v13;
          v15 = *(_QWORD *)v52;
          do
          {
            for (j = 0; j != v14; ++j)
            {
              if (*(_QWORD *)v52 != v15)
                objc_enumerationMutation(v12);
              objc_msgSend(*(id *)(*((_QWORD *)&v51 + 1) + 8 * j), "characteristic");
              v17 = (void *)objc_claimAutoreleasedReturnValue();
              v18 = objc_msgSend(v4, "containsObject:", v17);

              if (v18)
                objc_msgSend(v7, "addObject:", v9);
            }
            v14 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v51, v67, 16);
          }
          while (v14);
        }

      }
      v40 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v55, v68, 16);
    }
    while (v40);
  }

  v49 = 0u;
  v50 = 0u;
  v47 = 0u;
  v48 = 0u;
  v19 = v7;
  v20 = objc_msgSend(v19, "countByEnumeratingWithState:objects:count:", &v47, v66, 16);
  if (v20)
  {
    v21 = v20;
    v22 = *(_QWORD *)v48;
    v42 = *(_QWORD *)v48;
    do
    {
      for (k = 0; k != v21; ++k)
      {
        if (*(_QWORD *)v48 != v22)
          objc_enumerationMutation(v19);
        v24 = *(void **)(*((_QWORD *)&v47 + 1) + 8 * k);
        v43 = 0u;
        v44 = 0u;
        v45 = 0u;
        v46 = 0u;
        objc_msgSend(v24, "actionSets");
        v25 = (void *)objc_claimAutoreleasedReturnValue();
        v26 = objc_msgSend(v25, "countByEnumeratingWithState:objects:count:", &v43, v65, 16);
        if (v26)
        {
          v27 = v26;
          v28 = *(_QWORD *)v44;
          while (2)
          {
            for (m = 0; m != v27; ++m)
            {
              if (*(_QWORD *)v44 != v28)
                objc_enumerationMutation(v25);
              v30 = *(void **)(*((_QWORD *)&v43 + 1) + 8 * m);
              if (objc_msgSend(v30, "containsSecureCharacteristic"))
              {
                v32 = (void *)MEMORY[0x227676638]();
                v33 = v37;
                HMFGetOSLogHandle();
                v34 = objc_claimAutoreleasedReturnValue();
                if (os_log_type_enabled(v34, OS_LOG_TYPE_DEBUG))
                {
                  HMFGetLogIdentifier();
                  v35 = (void *)objc_claimAutoreleasedReturnValue();
                  *(_DWORD *)buf = 138543874;
                  v60 = v35;
                  v61 = 2112;
                  v62 = v24;
                  v63 = 2112;
                  v64 = v30;
                  _os_log_impl(&dword_2218F0000, v34, OS_LOG_TYPE_DEBUG, "%{public}@Trigger %@ has action set %@ with security class", buf, 0x20u);

                }
                objc_autoreleasePoolPop(v32);

                v31 = 1;
                goto LABEL_40;
              }
            }
            v27 = objc_msgSend(v25, "countByEnumeratingWithState:objects:count:", &v43, v65, 16);
            if (v27)
              continue;
            break;
          }
        }

        v22 = v42;
      }
      v21 = objc_msgSend(v19, "countByEnumeratingWithState:objects:count:", &v47, v66, 16);
      v31 = 0;
    }
    while (v21);
  }
  else
  {
    v31 = 0;
  }
LABEL_40:

  return v31;
}

- (void)accessoryBrowser:(id)a3 accessoryServer:(id)a4 didUpdateHasPairings:(BOOL)a5
{
  int v5;
  id v8;
  id v9;
  void *v10;
  void *v11;
  void *v12;
  HMDHome *v13;
  NSObject *v14;
  void *v15;
  void *v16;
  void *v17;
  int v18;
  void *v19;
  __int16 v20;
  void *v21;
  __int16 v22;
  int v23;
  uint64_t v24;

  v5 = a5;
  v24 = *MEMORY[0x24BDAC8D0];
  v8 = a3;
  v9 = a4;
  objc_msgSend(v9, "identifier");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHome hapAccessoryWithIdentifier:](self, "hapAccessoryWithIdentifier:", v10);
  v11 = (void *)objc_claimAutoreleasedReturnValue();

  if (v11)
  {
    v12 = (void *)MEMORY[0x227676638]();
    v13 = self;
    HMFGetOSLogHandle();
    v14 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v9, "identifier");
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      v18 = 138543874;
      v19 = v15;
      v20 = 2112;
      v21 = v16;
      v22 = 1024;
      v23 = v5;
      _os_log_impl(&dword_2218F0000, v14, OS_LOG_TYPE_INFO, "%{public}@Updating accessory server %@ with new value of hasPairings: %d", (uint8_t *)&v18, 0x1Cu);

    }
    objc_autoreleasePoolPop(v12);
    if (objc_msgSend(v9, "isPaired") == v5)
    {
      -[HMDHome accessoryBrowser](v13, "accessoryBrowser");
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v17, "resurrectAccessoryServer:", v9);
    }
    else
    {
      -[HMDHome _unconfigurePairedAccessoriesForServer:updateReachability:](v13, "_unconfigurePairedAccessoriesForServer:updateReachability:", v9, 1);
      -[HMDHome accessoryBrowser](v13, "accessoryBrowser");
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v17, "tombstoneAccessoryServer:", v9);
    }

  }
}

- (void)accessoryBrowser:(id)a3 accessoryServer:(id)a4 didUpdateCategory:(id)a5
{
  id v8;
  id v9;
  id v10;
  void *v11;
  void *v12;
  void *v13;
  HMDHome *v14;
  NSObject *v15;
  void *v16;
  void *v17;
  int v18;
  void *v19;
  __int16 v20;
  void *v21;
  __int16 v22;
  id v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v8 = a3;
  v9 = a4;
  v10 = a5;
  objc_msgSend(v9, "identifier");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHome hapAccessoryWithIdentifier:](self, "hapAccessoryWithIdentifier:", v11);
  v12 = (void *)objc_claimAutoreleasedReturnValue();

  if (v12)
  {
    v13 = (void *)MEMORY[0x227676638]();
    v14 = self;
    HMFGetOSLogHandle();
    v15 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v12, "shortDescription");
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      v18 = 138543874;
      v19 = v16;
      v20 = 2112;
      v21 = v17;
      v22 = 2112;
      v23 = v10;
      _os_log_impl(&dword_2218F0000, v15, OS_LOG_TYPE_INFO, "%{public}@Paired Accessory: %@, Updated Category to %@", (uint8_t *)&v18, 0x20u);

    }
    objc_autoreleasePoolPop(v13);
    objc_msgSend(v12, "updateCategory:", v10);
  }

}

- (void)accessoryBrowser:(id)a3 didUpdateReachability:(BOOL)a4 forBTLEAccessoriesWithServerIdentifier:(id)a5
{
  _BOOL8 v6;
  id v8;
  id v9;
  void *v10;
  id v11;
  void *v12;
  void *v13;
  HMDHome *v14;
  NSObject *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  HMDHome *v21;
  NSObject *v22;
  void *v23;
  void *v24;
  void *v25;
  _QWORD v26[4];
  id v27;
  uint8_t buf[4];
  void *v29;
  __int16 v30;
  void *v31;
  __int16 v32;
  void *v33;
  uint64_t v34;

  v6 = a4;
  v34 = *MEMORY[0x24BDAC8D0];
  v8 = a3;
  v9 = a5;
  -[HMDHome hapAccessories](self, "hapAccessories");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v26[0] = MEMORY[0x24BDAC760];
  v26[1] = 3221225472;
  v26[2] = __89__HMDHome_accessoryBrowser_didUpdateReachability_forBTLEAccessoriesWithServerIdentifier___block_invoke;
  v26[3] = &unk_24E7928E0;
  v11 = v9;
  v27 = v11;
  objc_msgSend(v10, "na_firstObjectPassingTest:", v26);
  v12 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v12, "setReachability:serverIdentifier:linkType:", v6, v11, 2);
  if (!v6
    && isiOSDevice()
    && !-[HMDHome _hasPairedReachableBTLEAccessories](self, "_hasPairedReachableBTLEAccessories")
    && (-[HMDHome homeLocation](self, "homeLocation") == 3 || -[HMDHome homeLocation](self, "homeLocation") == 2))
  {
    v13 = (void *)MEMORY[0x227676638]();
    v14 = self;
    HMFGetOSLogHandle();
    v15 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v29 = v16;
      _os_log_impl(&dword_2218F0000, v15, OS_LOG_TYPE_INFO, "%{public}@All BLE accessories have become unreachable and we are out... Stop looking", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v13);
    -[HMDHome accessoryBrowser](v14, "accessoryBrowser");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v17, "btleAccessoryReachabilityProbeTimer:", 0);

    -[HMDHome hapAccessories](v14, "hapAccessories");
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v18, "na_map:", &__block_literal_global_1533);
    v19 = (void *)objc_claimAutoreleasedReturnValue();

    if (objc_msgSend(v19, "count"))
    {
      v20 = (void *)MEMORY[0x227676638]();
      v21 = v14;
      HMFGetOSLogHandle();
      v22 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v22, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v23 = (void *)objc_claimAutoreleasedReturnValue();
        -[HMDHome uuid](v21, "uuid");
        v24 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543874;
        v29 = v23;
        v30 = 2112;
        v31 = v19;
        v32 = 2112;
        v33 = v24;
        _os_log_impl(&dword_2218F0000, v22, OS_LOG_TYPE_INFO, "%{public}@Stop tracking BLE accessories: %@ in Home UUID: %@", buf, 0x20u);

      }
      objc_autoreleasePoolPop(v20);
      -[HMDHome accessoryBrowser](v21, "accessoryBrowser");
      v25 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v25, "stopTrackingBTLEAccessoriesWithIdentifiers:", v19);

    }
  }

}

- (void)accessoryBrowser:(id)a3 accessoryServer:(id)a4 didUpdateConnectionState:(BOOL)a5 sessionInfo:(id)a6 linkLayerType:(int64_t)a7 withError:(id)a8
{
  _BOOL8 v11;
  id v14;
  id v15;
  id v16;
  id v17;
  void *v18;
  void *v19;
  void *v20;
  HMDHome *v21;
  NSObject *v22;
  void *v23;
  void *v24;
  void *v25;
  int v26;
  void *v27;
  __int16 v28;
  void *v29;
  uint64_t v30;

  v11 = a5;
  v30 = *MEMORY[0x24BDAC8D0];
  v14 = a3;
  v15 = a4;
  v16 = a6;
  v17 = a8;
  objc_msgSend(v15, "identifier");
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHome hapAccessoryWithIdentifier:](self, "hapAccessoryWithIdentifier:", v18);
  v19 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v19, "didUpdateConnectionState:sessionInfo:linkLayerType:bookkeeping:withError:", v11, v16, a7, 0, v17);
  if (!-[HMDHome hasAnyResident](self, "hasAnyResident") && objc_msgSend(v19, "supportsCHIP") && v11)
  {
    v20 = (void *)MEMORY[0x227676638]();
    v21 = self;
    HMFGetOSLogHandle();
    v22 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v22, OS_LOG_TYPE_DEBUG))
    {
      HMFGetLogIdentifier();
      v23 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v19, "name");
      v24 = (void *)objc_claimAutoreleasedReturnValue();
      v26 = 138543618;
      v27 = v23;
      v28 = 2112;
      v29 = v24;
      _os_log_impl(&dword_2218F0000, v22, OS_LOG_TYPE_DEBUG, "%{public}@Matter accessory: %@ is reachable. Evaluating home location.", (uint8_t *)&v26, 0x16u);

    }
    objc_autoreleasePoolPop(v20);
    -[HMDHome homeLocationHandler](v21, "homeLocationHandler");
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v25, "matterAccessoryBecameReachable");

  }
}

- (void)accessoryBrowser:(id)a3 accessoryServer:(id)a4 didUpdateConnectionState:(BOOL)a5 linkLayerType:(int64_t)a6 bookkeeping:(id)a7 withError:(id)a8
{
  _BOOL8 v10;
  id v13;
  id v14;
  void *v15;
  id v16;

  v10 = a5;
  v13 = a8;
  v14 = a7;
  objc_msgSend(a4, "identifier");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHome hapAccessoryWithIdentifier:](self, "hapAccessoryWithIdentifier:", v15);
  v16 = (id)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v16, "didUpdateConnectionState:sessionInfo:linkLayerType:bookkeeping:withError:", v10, 0, a6, v14, v13);
}

- (void)accessoryBrowser:(id)a3 didFinishPairingForAccessoryServer:(id)a4
{
  void *v6;
  void *v7;
  void *v8;
  HMDRemoteDeviceMessageDestination *v9;
  void *v10;
  void *v11;
  HMDRemoteDeviceMessageDestination *v12;
  id v13;
  void *v14;
  id v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  HMDHome *v27;
  NSObject *v28;
  id v29;
  void *v30;
  void *v31;
  void *v32;
  HMDHome *v33;
  NSObject *v34;
  void *v35;
  id *v36;
  id v37;
  id v38;
  _QWORD v39[4];
  id v40;
  id v41;
  id location;
  uint8_t buf[4];
  id v44;
  __int16 v45;
  void *v46;
  uint64_t v47;

  v47 = *MEMORY[0x24BDAC8D0];
  v37 = a3;
  v38 = a4;
  -[HMDHome primaryResident](self, "primaryResident");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = v6;
  if (v6 && (objc_msgSend(v6, "device"), v8 = (void *)objc_claimAutoreleasedReturnValue(), v8, v8))
  {
    v9 = [HMDRemoteDeviceMessageDestination alloc];
    -[HMDHome uuid](self, "uuid");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "device");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v12 = -[HMDRemoteDeviceMessageDestination initWithTarget:device:](v9, "initWithTarget:device:", v10, v11);

    v13 = v38;
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
      v14 = v13;
    else
      v14 = 0;
    v15 = v14;

    objc_msgSend(MEMORY[0x24BDBCED8], "dictionary");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v15, "nodeID");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v16, "setObject:forKeyedSubscript:", v17, CFSTR("HMDHomePairingCompletionNodeIDMessageKey"));

    objc_msgSend(v15, "fabricID");
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v16, "setObject:forKeyedSubscript:", v18, CFSTR("HMDHomePairingCompletionFabricIDMessageKey"));

    objc_msgSend(v15, "fabricID");
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v16, "setObject:forKeyedSubscript:", v19, CFSTR("HMDHomePairingCompletionFabricIndexMessageKey"));

    objc_msgSend(v15, "vendorID");
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v16, "setObject:forKeyedSubscript:", v20, CFSTR("HMDHomePairingCompletionVendorIDMessageKey"));

    objc_msgSend(v15, "productID");
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v16, "setObject:forKeyedSubscript:", v21, CFSTR("HMDHomePairingCompletionProductIDMessageKey"));

    objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedInteger:", objc_msgSend(v15, "configNumber"));
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v16, "setObject:forKeyedSubscript:", v22, CFSTR("HMDHomePairingCompletionConfigNumberMessageKey"));

    objc_msgSend(v15, "category");
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v16, "setObject:forKeyedSubscript:", v23, CFSTR("HMDHomePairingCompletionCategoryMessageKey"));

    objc_msgSend(v15, "topology");
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v16, "setObject:forKeyedSubscript:", v24, CFSTR("HMDHomePairingCompletionTopologyMessageKey"));

    v25 = (void *)objc_msgSend(objc_alloc(MEMORY[0x24BE3F1D0]), "initWithName:destination:payload:", CFSTR("HMDHomeNotificationPairingCompletionMessage"), v12, v16);
    objc_msgSend(v25, "setRemote:", 1);
    objc_msgSend(v25, "setSecureRemote:", 1);
    objc_initWeak(&location, self);
    v39[0] = MEMORY[0x24BDAC760];
    v39[1] = 3221225472;
    v39[2] = __63__HMDHome_accessoryBrowser_didFinishPairingForAccessoryServer___block_invoke;
    v39[3] = &unk_24E798D90;
    v36 = &v41;
    objc_copyWeak(&v41, &location);
    v40 = v13;
    v26 = (void *)MEMORY[0x227676638](objc_msgSend(v25, "setResponseHandler:", v39));
    v27 = self;
    HMFGetOSLogHandle();
    v28 = (id)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v28, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v29 = (id)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v25, "shortDescription", &v41, v37);
      v30 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v44 = v29;
      v45 = 2112;
      v46 = v30;
      _os_log_impl(&dword_2218F0000, v28, OS_LOG_TYPE_INFO, "%{public}@Sending message %@ to notify pairing completion", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v26);
    -[HMDHome msgDispatcher](v27, "msgDispatcher");
    v31 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v31, "sendMessage:", v25);

    objc_destroyWeak(v36);
    objc_destroyWeak(&location);

  }
  else
  {
    v32 = (void *)MEMORY[0x227676638]();
    v33 = self;
    HMFGetOSLogHandle();
    v34 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v35 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v44 = v35;
      _os_log_impl(&dword_2218F0000, v34, OS_LOG_TYPE_ERROR, "%{public}@Primary resident is not available", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v32);
  }

}

- (void)__updateServiceTransaction:(id)a3 accessoryTransaction:(id)a4 service:(id)a5 accessory:(id)a6 hapService:(id)a7
{
  id v12;
  id v13;
  void *v14;
  void *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  void *v22;
  void *v23;
  void *v24;
  char v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  void *v43;
  void *v44;
  void *v45;
  void *v46;
  uint64_t v47;
  void *v48;
  id v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  void *v53;
  void *v54;
  char v55;
  void *v56;
  uint64_t v57;
  unsigned __int8 v58;
  void *v59;
  void *v60;
  void *v61;
  void *v62;
  void *v63;
  void *v64;
  void *v65;
  void *v66;
  void *v67;
  id v68;
  id v69;
  id v70;
  id v71;
  void *v72;
  id v73;
  uint64_t v74;
  HMDHome *v75;
  void *v76;
  uint64_t v77;
  id obj;
  void *v79;
  void *v80;
  uint64_t v81;
  _QWORD aBlock[4];
  id v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  _BYTE v92[128];
  _QWORD v93[4];
  _QWORD v94[4];
  _BYTE v95[128];
  uint64_t v96;

  v96 = *MEMORY[0x24BDAC8D0];
  v71 = a3;
  v70 = a4;
  v12 = a5;
  v73 = a6;
  v13 = a7;
  v14 = (void *)MEMORY[0x24BDBCEB8];
  v69 = v13;
  objc_msgSend(v13, "characteristics");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v14, "arrayWithArray:", v15);
  v16 = (void *)objc_claimAutoreleasedReturnValue();

  if (objc_msgSend(v16, "count"))
  {
    objc_msgSend(MEMORY[0x24BDBCEB8], "arrayWithCapacity:", objc_msgSend(v16, "count"));
    v76 = (void *)objc_claimAutoreleasedReturnValue();
    v88 = 0u;
    v89 = 0u;
    v90 = 0u;
    v91 = 0u;
    v67 = v16;
    obj = v16;
    v17 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v88, v95, 16);
    if (v17)
    {
      v18 = v17;
      v19 = *(_QWORD *)v89;
      v20 = 0x24BDBC000uLL;
      v68 = v12;
      v74 = *(_QWORD *)v89;
      v75 = self;
      do
      {
        v21 = 0;
        v77 = v18;
        do
        {
          if (*(_QWORD *)v89 != v19)
            objc_enumerationMutation(obj);
          v22 = *(void **)(*((_QWORD *)&v88 + 1) + 8 * v21);
          -[HMDHome hapMetadata](self, "hapMetadata");
          v23 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v22, "type");
          v24 = (void *)objc_claimAutoreleasedReturnValue();
          v25 = objc_msgSend(v23, "shouldFilterCharacteristicOfType:", v24);

          if ((v25 & 1) == 0)
          {
            v81 = v21;
            objc_msgSend(v22, "metadata");
            v26 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(*(id *)(v20 + 3800), "dictionaryWithCapacity:", 8);
            v27 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v26, "format");
            v28 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v27, "setObject:forKeyedSubscript:", v28, CFSTR("metadataFormat"));

            objc_msgSend(v26, "units");
            v29 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v27, "setObject:forKeyedSubscript:", v29, CFSTR("metadataUnits"));

            objc_msgSend(v26, "manufacturerDescription");
            v30 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v27, "setObject:forKeyedSubscript:", v30, CFSTR("metadataUserDescription"));

            objc_msgSend(v26, "constraints");
            v31 = (void *)objc_claimAutoreleasedReturnValue();

            if (v31)
            {
              objc_msgSend(v26, "constraints");
              v32 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v32, "minimumValue");
              v33 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v27, "setObject:forKeyedSubscript:", v33, CFSTR("metadataMinimumValue"));

              objc_msgSend(v26, "constraints");
              v34 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v34, "maximumValue");
              v35 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v27, "setObject:forKeyedSubscript:", v35, CFSTR("metadataMaximumValue"));

              objc_msgSend(v26, "constraints");
              v36 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v36, "stepValue");
              v37 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v27, "setObject:forKeyedSubscript:", v37, CFSTR("metadataStepValue"));

              objc_msgSend(v26, "constraints");
              v38 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v38, "maxLength");
              v39 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v27, "setObject:forKeyedSubscript:", v39, CFSTR("metadataMaxLength"));

              objc_msgSend(v26, "constraints");
              v40 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v40, "validValues");
              v41 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v27, "setObject:forKeyedSubscript:", v41, CFSTR("metadataValidValues"));

            }
            v42 = *(void **)(v20 + 3800);
            v93[0] = CFSTR("characteristicInstanceID");
            objc_msgSend(v22, "instanceID");
            v43 = (void *)objc_claimAutoreleasedReturnValue();
            v94[0] = v43;
            v93[1] = CFSTR("characteristicType");
            objc_msgSend(v22, "type");
            v44 = (void *)objc_claimAutoreleasedReturnValue();
            v94[1] = v44;
            v93[2] = CFSTR("characteristicProperties");
            objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedInteger:", objc_msgSend(v22, "properties"));
            v45 = (void *)objc_claimAutoreleasedReturnValue();
            v93[3] = CFSTR("characteristicMetadata");
            v94[2] = v45;
            v94[3] = v27;
            objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v94, v93, 4);
            v46 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v42, "dictionaryWithDictionary:", v46);
            v47 = objc_claimAutoreleasedReturnValue();

            if (v12)
            {
              v86 = 0u;
              v87 = 0u;
              v84 = 0u;
              v85 = 0u;
              objc_msgSend(v12, "characteristics");
              v48 = (void *)objc_claimAutoreleasedReturnValue();
              v49 = (id)objc_msgSend(v48, "countByEnumeratingWithState:objects:count:", &v84, v92, 16);
              if (v49)
              {
                v72 = (void *)v47;
                v79 = v26;
                v50 = *(_QWORD *)v85;
LABEL_13:
                v51 = 0;
                while (1)
                {
                  if (*(_QWORD *)v85 != v50)
                    objc_enumerationMutation(v48);
                  v52 = *(void **)(*((_QWORD *)&v84 + 1) + 8 * v51);
                  objc_msgSend(v52, "instanceID");
                  v53 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend(v22, "instanceID");
                  v54 = (void *)objc_claimAutoreleasedReturnValue();
                  v55 = objc_msgSend(v53, "isEqual:", v54);

                  if ((v55 & 1) != 0)
                    break;
                  if (v49 == (id)++v51)
                  {
                    v49 = (id)objc_msgSend(v48, "countByEnumeratingWithState:objects:count:", &v84, v92, 16);
                    if (v49)
                      goto LABEL_13;
                    v12 = v68;
                    v26 = v79;
                    v47 = (uint64_t)v72;
                    goto LABEL_23;
                  }
                }
                v49 = v52;

                if (v49)
                {
                  objc_msgSend(v73, "findServiceWithServiceType:", CFSTR("00000701-0000-1000-8000-0026BB765291"));
                  v56 = (void *)objc_claimAutoreleasedReturnValue();

                  v12 = v68;
                  v26 = v79;
                  if (v56)
                  {
                    v57 = objc_msgSend(v22, "properties");
                    v58 = objc_msgSend(v49, "properties");
                    objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedInteger:", v58 & 0x80 | (unint64_t)v57);
                    v48 = (void *)objc_claimAutoreleasedReturnValue();
                    v47 = (uint64_t)v72;
                    objc_msgSend(v72, "setObject:forKeyedSubscript:", v48, CFSTR("characteristicProperties"));
                    goto LABEL_23;
                  }
                }
                else
                {
                  v12 = v68;
                  v26 = v79;
                }
                v47 = (uint64_t)v72;
              }
              else
              {
LABEL_23:

              }
            }
            v80 = v27;
            v59 = (void *)v47;
            objc_msgSend(v76, "addObject:", v47);
            objc_msgSend(v22, "value");
            v60 = (void *)objc_claimAutoreleasedReturnValue();

            v19 = v74;
            v21 = v81;
            if (v60)
            {
              aBlock[0] = MEMORY[0x24BDAC760];
              aBlock[1] = 3221225472;
              aBlock[2] = __88__HMDHome___updateServiceTransaction_accessoryTransaction_service_accessory_hapService___block_invoke;
              aBlock[3] = &unk_24E783568;
              v83 = v71;
              v61 = _Block_copy(aBlock);
              objc_msgSend(v22, "type");
              v62 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v22, "value");
              v63 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v69, "type");
              v64 = (void *)objc_claimAutoreleasedReturnValue();
              +[HMDService processUpdateForCharacteristicType:value:serviceType:service:serviceTransactionGetter:accessory:accessoryTransaction:accessoryTransactionChanged:](HMDService, "processUpdateForCharacteristicType:value:serviceType:service:serviceTransactionGetter:accessory:accessoryTransaction:accessoryTransactionChanged:", v62, v63, v64, v12, v61, v73, v70, 0);

            }
            self = v75;
            v18 = v77;
            v20 = 0x24BDBC000;
          }
          ++v21;
        }
        while (v21 != v18);
        v18 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v88, v95, 16);
      }
      while (v18);
    }

    v16 = v67;
    v65 = v76;
  }
  else
  {
    v65 = 0;
  }
  +[HMDCharacteristic sortComparatorForCharacteristicDictionary](HMDCharacteristic, "sortComparatorForCharacteristicDictionary");
  v66 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v65, "sortUsingComparator:", v66);

  objc_msgSend(v71, "setCharacteristics:", v65);
}

- (BOOL)getUpdateTransactionForAccessory:(id)a3 hapAccessory:(id)a4 accessoryTransaction:(id)a5 addSvcTransactions:(id *)a6 updateSvcTransactions:(id *)a7 removeSvcTransactions:(id *)a8
{
  id v10;
  id v11;
  void *v12;
  void *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  void *v20;
  void *v21;
  char v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t i;
  void *v28;
  void *v29;
  void *v30;
  int v31;
  HMDServiceTransaction *v32;
  void *v33;
  uint64_t v34;
  HMDServiceTransaction *v35;
  uint64_t v36;
  void *v37;
  void *v38;
  void *v39;
  char v40;
  void *v41;
  void *v42;
  void *v43;
  void *v44;
  void *v45;
  id v46;
  void *v47;
  void *v48;
  HMDHome *v49;
  NSObject *v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t j;
  HMDServiceTransaction *v56;
  void *v57;
  HMDHome *v58;
  HMDHome *v59;
  NSObject *v60;
  void *v61;
  void *v62;
  void *v63;
  HMDHome *v64;
  NSObject *v65;
  void *v66;
  void *v67;
  void *v68;
  id v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t k;
  void *v74;
  void *v75;
  void *v76;
  char v77;
  HMDServiceTransaction *v78;
  HMDServiceTransaction *v79;
  void *v80;
  HMDHome *v81;
  NSObject *v82;
  void *v83;
  id v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t m;
  void *v89;
  HMDServiceTransaction *v90;
  void *v91;
  void *v92;
  HMDServiceTransaction *v93;
  void *v94;
  HMDHome *v95;
  NSObject *v96;
  id v97;
  void *v98;
  HMDServiceTransaction *v99;
  HMDServiceTransaction *v100;
  BOOL v101;
  void *v102;
  void *v103;
  void *v104;
  void *v106;
  HMDServiceTransaction *v108;
  uint64_t v110;
  void *v111;
  uint64_t v112;
  void *v113;
  uint64_t v114;
  id v115;
  id v116;
  id v117;
  id v118;
  void *v121;
  HMDServiceTransaction *v122;
  id obj;
  uint64_t v124;
  HMDServiceTransaction *v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  id v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  _BYTE v147[128];
  _BYTE v148[128];
  uint8_t v149[128];
  uint8_t buf[4];
  id v151;
  __int16 v152;
  HMDServiceTransaction *v153;
  __int16 v154;
  HMDServiceTransaction *v155;
  __int16 v156;
  void *v157;
  _BYTE v158[128];
  _BYTE v159[128];
  uint64_t v160;

  v160 = *MEMORY[0x24BDAC8D0];
  v10 = a3;
  v11 = a4;
  v115 = a5;
  objc_msgSend(v10, "services");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  v13 = (void *)objc_msgSend(v12, "mutableCopy");

  v145 = 0u;
  v146 = 0u;
  v143 = 0u;
  v144 = 0u;
  v106 = v11;
  objc_msgSend(v11, "services");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  v15 = objc_msgSend(v14, "countByEnumeratingWithState:objects:count:", &v143, v159, 16);
  v116 = v10;
  if (v15)
  {
    v16 = v15;
    v17 = *(_QWORD *)v144;
    v124 = 138544130;
    v110 = *(_QWORD *)v144;
    v111 = v14;
    while (2)
    {
      v18 = 0;
      v112 = v16;
      do
      {
        if (*(_QWORD *)v144 != v17)
          objc_enumerationMutation(v14);
        v19 = *(void **)(*((_QWORD *)&v143 + 1) + 8 * v18);
        -[HMDHome hapMetadata](self, "hapMetadata");
        v20 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v19, "type");
        v21 = (void *)objc_claimAutoreleasedReturnValue();
        v22 = objc_msgSend(v20, "shouldFilterServiceOfType:", v21);

        if ((v22 & 1) == 0)
        {
          v114 = v18;
          v117 = v13;
          v141 = 0u;
          v142 = 0u;
          v139 = 0u;
          v140 = 0u;
          objc_msgSend(v10, "services");
          v23 = (void *)objc_claimAutoreleasedReturnValue();
          v24 = objc_msgSend(v23, "countByEnumeratingWithState:objects:count:", &v139, v158, 16);
          if (v24)
          {
            v25 = v24;
            v26 = *(_QWORD *)v140;
            while (2)
            {
              for (i = 0; i != v25; ++i)
              {
                if (*(_QWORD *)v140 != v26)
                  objc_enumerationMutation(v23);
                v28 = *(void **)(*((_QWORD *)&v139 + 1) + 8 * i);
                objc_msgSend(v28, "instanceID");
                v29 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v19, "instanceID");
                v30 = (void *)objc_claimAutoreleasedReturnValue();
                v31 = objc_msgSend(v29, "isEqual:", v30);

                if (v31)
                {
                  v32 = v28;
                  goto LABEL_17;
                }
              }
              v25 = objc_msgSend(v23, "countByEnumeratingWithState:objects:count:", &v139, v158, 16);
              if (v25)
                continue;
              break;
            }
          }
          v32 = 0;
LABEL_17:

          objc_msgSend(v115, "uuid");
          v33 = (void *)objc_claimAutoreleasedReturnValue();
          if (v32)
            v34 = 2;
          else
            v34 = 1;
          -[HMDHome getServiceTransaction:parentUUID:changeType:](self, "getServiceTransaction:parentUUID:changeType:", v19, v33, v34);
          v35 = (HMDServiceTransaction *)objc_claimAutoreleasedReturnValue();

          -[HMDServiceTransaction type](v32, "type");
          v36 = objc_claimAutoreleasedReturnValue();
          if (v36)
          {
            v37 = (void *)v36;
            -[HMDServiceTransaction type](v32, "type");
            v38 = (void *)objc_claimAutoreleasedReturnValue();
            -[HMDServiceTransaction serviceType](v35, "serviceType");
            v39 = (void *)objc_claimAutoreleasedReturnValue();
            v40 = objc_msgSend(v38, "isEqualToString:", v39);

            if ((v40 & 1) == 0)
            {

              v101 = 0;
              v84 = v117;
              v102 = v111;
              goto LABEL_75;
            }
          }
          -[HMDHome __updateServiceTransaction:accessoryTransaction:service:accessory:hapService:](self, "__updateServiceTransaction:accessoryTransaction:service:accessory:hapService:", v35, v115, v32, v10, v19);
          -[HMDServiceTransaction accessory](v32, "accessory");
          v41 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v41, "shortDescription");
          v42 = (void *)objc_claimAutoreleasedReturnValue();
          v43 = v42;
          if (v42)
          {
            v125 = v42;
          }
          else
          {
            -[HMDBackingStoreModelObject parentUUID](v35, "parentUUID");
            v44 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v44, "UUIDString");
            v125 = (HMDServiceTransaction *)objc_claimAutoreleasedReturnValue();

          }
          v13 = v117;

          if (v32)
          {
            -[HMDServiceTransaction modelObjectWithChangeType:](v32, "modelObjectWithChangeType:", 1);
            v45 = (void *)objc_claimAutoreleasedReturnValue();
            v138 = 0;
            v121 = v45;
            objc_msgSend(v45, "diff:differingFields:", v35, &v138);
            v46 = v138;
            v113 = v46;
            v122 = v35;
            if (a7)
            {
              v47 = v46;
              if (objc_msgSend(v46, "count"))
              {
                v108 = v32;
                v48 = (void *)MEMORY[0x227676638]();
                v49 = self;
                HMFGetOSLogHandle();
                v50 = objc_claimAutoreleasedReturnValue();
                if (os_log_type_enabled(v50, OS_LOG_TYPE_INFO))
                {
                  HMFGetLogIdentifier();
                  v51 = (void *)objc_claimAutoreleasedReturnValue();
                  *(_DWORD *)buf = 138544130;
                  v151 = v51;
                  v152 = 2112;
                  v153 = v125;
                  v154 = 2114;
                  v155 = v35;
                  v156 = 2114;
                  v157 = v47;
                  _os_log_impl(&dword_2218F0000, v50, OS_LOG_TYPE_INFO, "%{public}@[Pair-Verify %@] Received service update %{public}@ due to diff %{public}@", buf, 0x2Au);

                }
                objc_autoreleasePoolPop(v48);
                v136 = 0u;
                v137 = 0u;
                v134 = 0u;
                v135 = 0u;
                obj = v47;
                v52 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v134, v149, 16);
                if (v52)
                {
                  v53 = v52;
                  v54 = *(_QWORD *)v135;
                  do
                  {
                    for (j = 0; j != v53; ++j)
                    {
                      if (*(_QWORD *)v135 != v54)
                        objc_enumerationMutation(obj);
                      v56 = *(HMDServiceTransaction **)(*((_QWORD *)&v134 + 1) + 8 * j);
                      v57 = (void *)MEMORY[0x227676638]();
                      v58 = v49;
                      v59 = v49;
                      HMFGetOSLogHandle();
                      v60 = objc_claimAutoreleasedReturnValue();
                      if (os_log_type_enabled(v60, OS_LOG_TYPE_INFO))
                      {
                        HMFGetLogIdentifier();
                        v61 = (void *)objc_claimAutoreleasedReturnValue();
                        objc_msgSend(v121, "valueForKeyPath:", v56);
                        v62 = (void *)objc_claimAutoreleasedReturnValue();
                        *(_DWORD *)buf = 138544130;
                        v151 = v61;
                        v152 = 2114;
                        v153 = v125;
                        v154 = 2114;
                        v155 = v56;
                        v156 = 2114;
                        v157 = v62;
                        _os_log_impl(&dword_2218F0000, v60, OS_LOG_TYPE_INFO, "%{public}@[%{public}@] LOCAL %{public}@: %{public}@", buf, 0x2Au);

                      }
                      objc_autoreleasePoolPop(v57);
                      v63 = (void *)MEMORY[0x227676638]();
                      v64 = v59;
                      HMFGetOSLogHandle();
                      v65 = objc_claimAutoreleasedReturnValue();
                      if (os_log_type_enabled(v65, OS_LOG_TYPE_INFO))
                      {
                        HMFGetLogIdentifier();
                        v66 = (void *)objc_claimAutoreleasedReturnValue();
                        -[HMDServiceTransaction valueForKeyPath:](v122, "valueForKeyPath:", v56);
                        v67 = (void *)objc_claimAutoreleasedReturnValue();
                        *(_DWORD *)buf = 138544130;
                        v151 = v66;
                        v152 = 2114;
                        v153 = v125;
                        v154 = 2114;
                        v155 = v56;
                        v156 = 2114;
                        v157 = v67;
                        _os_log_impl(&dword_2218F0000, v65, OS_LOG_TYPE_INFO, "%{public}@[%{public}@] UPDATE %{public}@: %{public}@", buf, 0x2Au);

                      }
                      objc_autoreleasePoolPop(v63);
                      v49 = v58;
                    }
                    v53 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v134, v149, 16);
                  }
                  while (v53);
                }

                objc_msgSend(*a7, "addObject:", v122);
                v13 = v117;
                v32 = v108;
              }
            }
            objc_msgSend(MEMORY[0x24BDBCEB8], "arrayWithCapacity:", objc_msgSend(v13, "count"));
            v68 = (void *)objc_claimAutoreleasedReturnValue();
            v130 = 0u;
            v131 = 0u;
            v132 = 0u;
            v133 = 0u;
            v69 = v13;
            v70 = objc_msgSend(v69, "countByEnumeratingWithState:objects:count:", &v130, v148, 16);
            if (v70)
            {
              v71 = v70;
              v72 = *(_QWORD *)v131;
              do
              {
                for (k = 0; k != v71; ++k)
                {
                  if (*(_QWORD *)v131 != v72)
                    objc_enumerationMutation(v69);
                  v74 = *(void **)(*((_QWORD *)&v130 + 1) + 8 * k);
                  objc_msgSend(v74, "uuid");
                  v75 = (void *)objc_claimAutoreleasedReturnValue();
                  -[HMDBackingStoreModelObject uuid](v32, "uuid");
                  v76 = (void *)objc_claimAutoreleasedReturnValue();
                  v77 = objc_msgSend(v75, "isEqual:", v76);

                  if ((v77 & 1) == 0)
                    objc_msgSend(v68, "addObject:", v74);
                }
                v71 = objc_msgSend(v69, "countByEnumeratingWithState:objects:count:", &v130, v148, 16);
              }
              while (v71);
            }

            v78 = v122;
            v79 = v32;
            v13 = v68;
            v10 = v116;
            v17 = v110;
            v14 = v111;
            v16 = v112;
            v18 = v114;
          }
          else
          {
            v80 = (void *)MEMORY[0x227676638]();
            v81 = self;
            HMFGetOSLogHandle();
            v82 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v82, OS_LOG_TYPE_INFO))
            {
              HMFGetLogIdentifier();
              v83 = (void *)objc_claimAutoreleasedReturnValue();
              *(_DWORD *)buf = 138543874;
              v151 = v83;
              v152 = 2114;
              v153 = v125;
              v154 = 2114;
              v155 = v35;
              _os_log_impl(&dword_2218F0000, v82, OS_LOG_TYPE_INFO, "%{public}@[Pair-Verify %{public}@] Adding service %{public}@", buf, 0x20u);

            }
            objc_autoreleasePoolPop(v80);
            objc_msgSend(*a6, "addObject:", v35);
            v79 = v35;
            v17 = v110;
            v14 = v111;
            v16 = v112;
            v18 = v114;
            v78 = v125;
          }

        }
        ++v18;
      }
      while (v18 != v16);
      v16 = objc_msgSend(v14, "countByEnumeratingWithState:objects:count:", &v143, v159, 16);
      if (v16)
        continue;
      break;
    }
  }

  v128 = 0u;
  v129 = 0u;
  v126 = 0u;
  v127 = 0u;
  v84 = v13;
  v85 = objc_msgSend(v84, "countByEnumeratingWithState:objects:count:", &v126, v147, 16);
  if (v85)
  {
    v86 = v85;
    v118 = v84;
    v87 = *(_QWORD *)v127;
    do
    {
      for (m = 0; m != v86; ++m)
      {
        if (*(_QWORD *)v127 != v87)
          objc_enumerationMutation(v118);
        v89 = *(void **)(*((_QWORD *)&v126 + 1) + 8 * m);
        v90 = [HMDServiceTransaction alloc];
        objc_msgSend(v89, "uuid");
        v91 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v10, "uuid");
        v92 = (void *)objc_claimAutoreleasedReturnValue();
        v93 = -[HMDBackingStoreModelObject initWithObjectChangeType:uuid:parentUUID:](v90, "initWithObjectChangeType:uuid:parentUUID:", 3, v91, v92);

        v94 = (void *)MEMORY[0x227676638]();
        v95 = self;
        HMFGetOSLogHandle();
        v96 = (id)objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v96, OS_LOG_TYPE_INFO))
        {
          HMFGetLogIdentifier();
          v97 = (id)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v89, "accessory");
          v98 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v98, "shortDescription");
          v99 = (HMDServiceTransaction *)objc_claimAutoreleasedReturnValue();
          v100 = v99;
          if (!v99)
          {
            -[HMDBackingStoreModelObject parentUUID](v93, "parentUUID");
            v124 = objc_claimAutoreleasedReturnValue();
            v100 = (HMDServiceTransaction *)v124;
          }
          *(_DWORD *)buf = 138543874;
          v151 = v97;
          v152 = 2114;
          v153 = v100;
          v154 = 2114;
          v155 = v93;
          _os_log_impl(&dword_2218F0000, v96, OS_LOG_TYPE_INFO, "%{public}@[Pair-Verify %{public}@] Removing service %{public}@", buf, 0x20u);
          if (!v99)

          v10 = v116;
        }

        objc_autoreleasePoolPop(v94);
        objc_msgSend(*a8, "addObject:", v93);

      }
      v86 = objc_msgSend(v118, "countByEnumeratingWithState:objects:count:", &v126, v147, 16);
    }
    while (v86);
    v84 = v118;

  }
  else
  {

    if (!a8)
    {
      v101 = 1;
      goto LABEL_76;
    }
  }
  v103 = (void *)MEMORY[0x24BDBCF20];
  objc_msgSend(*a8, "na_map:", &__block_literal_global_1536);
  v104 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v103, "setWithArray:", v104);
  v102 = (void *)objc_claimAutoreleasedReturnValue();

  -[HMDHome filterServiceTransactions:removedServiceUUIDs:](self, "filterServiceTransactions:removedServiceUUIDs:", *a6, v102);
  -[HMDHome filterServiceTransactions:removedServiceUUIDs:](self, "filterServiceTransactions:removedServiceUUIDs:", *a7, v102);
  v101 = 1;
LABEL_75:

LABEL_76:
  return v101;
}

- (void)filterServiceTransactions:(id)a3 removedServiceUUIDs:(id)a4
{
  id v6;
  id v7;
  void *v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  int v16;
  void *v17;
  HMDHome *v18;
  NSObject *v19;
  void *v20;
  void *v21;
  HMDHome *v22;
  id v23;
  void *v24;
  id v25;
  uint64_t v26;
  id v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint8_t buf[4];
  void *v34;
  __int16 v35;
  void *v36;
  __int16 v37;
  void *v38;
  _BYTE v39[128];
  uint64_t v40;

  v40 = *MEMORY[0x24BDAC8D0];
  v6 = a3;
  v7 = a4;
  if (v6 && objc_msgSend(v6, "count") && objc_msgSend(v7, "count"))
  {
    objc_msgSend(MEMORY[0x24BDD1698], "indexSet");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v29 = 0u;
    v30 = 0u;
    v31 = 0u;
    v32 = 0u;
    v25 = v6;
    v9 = v6;
    v10 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v29, v39, 16);
    if (v10)
    {
      v11 = v10;
      v12 = *(_QWORD *)v30;
      v26 = *(_QWORD *)v30;
      v27 = v9;
      do
      {
        v13 = 0;
        v28 = v11;
        do
        {
          if (*(_QWORD *)v30 != v12)
            objc_enumerationMutation(v9);
          v14 = *(void **)(*((_QWORD *)&v29 + 1) + 8 * v13);
          objc_msgSend(v14, "uuid");
          v15 = (void *)objc_claimAutoreleasedReturnValue();
          v16 = objc_msgSend(v7, "containsObject:", v15);

          if (v16)
          {
            v17 = (void *)MEMORY[0x227676638](objc_msgSend(v8, "addIndex:", objc_msgSend(v9, "indexOfObject:", v14)));
            v18 = self;
            HMFGetOSLogHandle();
            v19 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
            {
              HMFGetLogIdentifier();
              v20 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v14, "uuid");
              v21 = v8;
              v22 = self;
              v23 = v7;
              v24 = (void *)objc_claimAutoreleasedReturnValue();
              *(_DWORD *)buf = 138543874;
              v34 = v20;
              v35 = 2114;
              v36 = v24;
              v37 = 2114;
              v38 = v14;
              _os_log_impl(&dword_2218F0000, v19, OS_LOG_TYPE_ERROR, "%{public}@[Pair-Verify %{public}@] Removing duplicate service transaction %{public}@", buf, 0x20u);

              v7 = v23;
              self = v22;
              v8 = v21;
              v9 = v27;

              v12 = v26;
            }

            objc_autoreleasePoolPop(v17);
            v11 = v28;
          }
          ++v13;
        }
        while (v11 != v13);
        v11 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v29, v39, 16);
      }
      while (v11);
    }

    objc_msgSend(v9, "removeObjectsAtIndexes:", v8);
    v6 = v25;
  }

}

- (id)_productDataFromHAPAccessory:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  _BOOL4 v8;
  uint64_t v9;
  void *v10;
  void *v11;
  void *v12;
  char v13;
  void *v14;
  HMDHome *v15;
  NSObject *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  HMDHome *v23;
  NSObject *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  _BOOL4 v30;
  void *v31;
  void *v32;
  HMDHome *v33;
  NSObject *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  void *v43;
  HMDHome *v44;
  NSObject *v45;
  void *v46;
  void *v47;
  void *v48;
  void *v49;
  const char *v50;
  int v52;
  void *v53;
  __int16 v54;
  void *v55;
  __int16 v56;
  void *v57;
  __int16 v58;
  void *v59;
  uint64_t v60;

  v60 = *MEMORY[0x24BDAC8D0];
  v4 = a3;
  objc_msgSend(v4, "server");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "productData");
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  if (v6)
  {
    objc_msgSend(v5, "productData");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = +[HMDAccessory validateProductData:](HMDAccessory, "validateProductData:", v7);

    if (v8)
    {
      objc_msgSend(v4, "productData");
      v9 = objc_claimAutoreleasedReturnValue();
      if (v9)
      {
        v10 = (void *)v9;
        objc_msgSend(v5, "productData");
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v4, "productData");
        v12 = (void *)objc_claimAutoreleasedReturnValue();
        v13 = objc_msgSend(v11, "isEqualToString:", v12);

        if ((v13 & 1) == 0)
        {
          v14 = (void *)MEMORY[0x227676638]();
          v15 = self;
          HMFGetOSLogHandle();
          v16 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
          {
            HMFGetLogIdentifier();
            v17 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v4, "shortDescription");
            v18 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v5, "productData");
            v19 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v4, "productData");
            v20 = (void *)objc_claimAutoreleasedReturnValue();
            v52 = 138544130;
            v53 = v17;
            v54 = 2112;
            v55 = v18;
            v56 = 2112;
            v57 = v19;
            v58 = 2112;
            v59 = v20;
            _os_log_impl(&dword_2218F0000, v16, OS_LOG_TYPE_ERROR, "%{public}@Accessory %@ is using productData from pair setup that differs from productData published on AIS: %@ != %@", (uint8_t *)&v52, 0x2Au);

          }
          objc_autoreleasePoolPop(v14);
        }
      }
      v21 = v5;
      goto LABEL_15;
    }
    v22 = (void *)MEMORY[0x227676638]();
    v23 = self;
    HMFGetOSLogHandle();
    v24 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v25 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "shortDescription");
      v26 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v5, "productData");
      v27 = (void *)objc_claimAutoreleasedReturnValue();
      v52 = 138543874;
      v53 = v25;
      v54 = 2112;
      v55 = v26;
      v56 = 2112;
      v57 = v27;
      _os_log_impl(&dword_2218F0000, v24, OS_LOG_TYPE_ERROR, "%{public}@Accessory %@ has invalid productData from pair setup: %@", (uint8_t *)&v52, 0x20u);

    }
    objc_autoreleasePoolPop(v22);
  }
  objc_msgSend(v4, "productData");
  v28 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v28)
  {
LABEL_19:
    +[HMDVendorDataManager sharedVendorDataManager](HMDVendorDataManager, "sharedVendorDataManager");
    v38 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "manufacturer");
    v39 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "model");
    v40 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v38, "vendorModelEntryForManufacturer:model:", v39, v40);
    v41 = (void *)objc_claimAutoreleasedReturnValue();

    if (v41)
    {
      objc_msgSend(v41, "productData");
      v42 = (void *)objc_claimAutoreleasedReturnValue();

      if (v42)
      {
        objc_msgSend(v41, "productData");
        v31 = (void *)objc_claimAutoreleasedReturnValue();
LABEL_28:

        goto LABEL_29;
      }
      v43 = (void *)MEMORY[0x227676638]();
      v44 = self;
      HMFGetOSLogHandle();
      v45 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v45, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v46 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v4, "shortDescription");
        v47 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v4, "manufacturer");
        v48 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v4, "model");
        v49 = (void *)objc_claimAutoreleasedReturnValue();
        v52 = 138544130;
        v53 = v46;
        v54 = 2112;
        v55 = v47;
        v56 = 2112;
        v57 = v48;
        v58 = 2112;
        v59 = v49;
        v50 = "%{public}@Accessory %@ does not have productData in the VIDB (manufacturer: '%@', model: '%@')";
        goto LABEL_26;
      }
    }
    else
    {
      v43 = (void *)MEMORY[0x227676638]();
      v44 = self;
      HMFGetOSLogHandle();
      v45 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v45, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v46 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v4, "shortDescription");
        v47 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v4, "manufacturer");
        v48 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v4, "model");
        v49 = (void *)objc_claimAutoreleasedReturnValue();
        v52 = 138544130;
        v53 = v46;
        v54 = 2112;
        v55 = v47;
        v56 = 2112;
        v57 = v48;
        v58 = 2112;
        v59 = v49;
        v50 = "%{public}@Accessory %@ could not be found in the VIDB (manufacturer: '%@', model: '%@')";
LABEL_26:
        _os_log_impl(&dword_2218F0000, v45, OS_LOG_TYPE_ERROR, v50, (uint8_t *)&v52, 0x2Au);

      }
    }

    objc_autoreleasePoolPop(v43);
    v31 = 0;
    goto LABEL_28;
  }
  objc_msgSend(v4, "productData");
  v29 = (void *)objc_claimAutoreleasedReturnValue();
  v30 = +[HMDAccessory validateProductData:](HMDAccessory, "validateProductData:", v29);

  if (!v30)
  {
    v32 = (void *)MEMORY[0x227676638]();
    v33 = self;
    HMFGetOSLogHandle();
    v34 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v35 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "shortDescription");
      v36 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "productData");
      v37 = (void *)objc_claimAutoreleasedReturnValue();
      v52 = 138543874;
      v53 = v35;
      v54 = 2112;
      v55 = v36;
      v56 = 2112;
      v57 = v37;
      _os_log_impl(&dword_2218F0000, v34, OS_LOG_TYPE_ERROR, "%{public}@Accessory %@ has invalid productData published on AIS: %@", (uint8_t *)&v52, 0x20u);

    }
    objc_autoreleasePoolPop(v32);
    goto LABEL_19;
  }
  v21 = v4;
LABEL_15:
  objc_msgSend(v21, "productData");
  v31 = (void *)objc_claimAutoreleasedReturnValue();
LABEL_29:

  return v31;
}

- (void)_processProductDataForNewlyAddedAccessory:(id)a3 transaction:(id)a4
{
  id v6;
  id v7;
  void *v8;
  void *v9;
  HMDHome *v10;
  NSObject *v11;
  void *v12;
  void *v13;
  int v14;
  void *v15;
  __int16 v16;
  void *v17;
  __int16 v18;
  void *v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  v6 = a3;
  v7 = a4;
  -[HMDHome _productDataFromHAPAccessory:](self, "_productDataFromHAPAccessory:", v6);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  if (v8)
  {
    v9 = (void *)MEMORY[0x227676638]();
    v10 = self;
    HMFGetOSLogHandle();
    v11 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      HMFGetLogIdentifier();
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v6, "shortDescription");
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      v14 = 138543874;
      v15 = v12;
      v16 = 2112;
      v17 = v13;
      v18 = 2112;
      v19 = v8;
      _os_log_impl(&dword_2218F0000, v11, OS_LOG_TYPE_DEFAULT, "%{public}@Accessory %@ is now bound to productData %@", (uint8_t *)&v14, 0x20u);

    }
    objc_autoreleasePoolPop(v9);
    objc_msgSend(v7, "setProductDataV2:", v8);
    objc_msgSend(v7, "setProductData:", v8);
  }

}

- (void)_processUpdatedProductDataForAccessory:(id)a3 hapAccessory:(id)a4 transaction:(id)a5
{
  id v8;
  id v9;
  id v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  char v17;
  void *v18;
  HMDHome *v19;
  NSObject *v20;
  NSObject *v21;
  void *v22;
  void *v23;
  void *v24;
  HMDHome *v25;
  NSObject *v26;
  void *v27;
  void *v28;
  void *v29;
  HMDHome *v30;
  NSObject *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  HMDHome *v39;
  void *v40;
  void *v41;
  void *v42;
  uint8_t buf[4];
  void *v44;
  __int16 v45;
  void *v46;
  __int16 v47;
  void *v48;
  __int16 v49;
  void *v50;
  __int16 v51;
  void *v52;
  uint64_t v53;

  v53 = *MEMORY[0x24BDAC8D0];
  v8 = a3;
  v9 = a4;
  v10 = a5;
  objc_msgSend(v8, "productData");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHome _productDataFromHAPAccessory:](self, "_productDataFromHAPAccessory:", v9);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  v13 = v12;
  if (v11)
  {
    if (v12)
    {
      if ((objc_msgSend(v12, "isEqualToString:", v11) & 1) == 0)
      {
        +[HMDVendorDataManager sharedVendorDataManager](HMDVendorDataManager, "sharedVendorDataManager");
        v14 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v14, "vendorModelEntryForProductData:", v11);
        v15 = (void *)objc_claimAutoreleasedReturnValue();

        if (v15)
        {
          objc_msgSend(v15, "productDataAlternates");
          v16 = (void *)objc_claimAutoreleasedReturnValue();
          v17 = objc_msgSend(v16, "containsObject:", v13);

          v18 = (void *)MEMORY[0x227676638]();
          v19 = self;
          HMFGetOSLogHandle();
          v20 = objc_claimAutoreleasedReturnValue();
          v21 = v20;
          if ((v17 & 1) != 0)
          {
            if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
            {
              HMFGetLogIdentifier();
              v40 = v18;
              v22 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v8, "shortDescription");
              v23 = (void *)objc_claimAutoreleasedReturnValue();
              *(_DWORD *)buf = 138544130;
              v44 = v22;
              v45 = 2112;
              v46 = v23;
              v47 = 2112;
              v48 = v11;
              v49 = 2112;
              v50 = v13;
              _os_log_impl(&dword_2218F0000, v21, OS_LOG_TYPE_DEFAULT, "%{public}@Accessory %@ has changed its product data to a value that is allowed, binding: %@ -> %@", buf, 0x2Au);

              v18 = v40;
            }

            objc_autoreleasePoolPop(v18);
            objc_msgSend(v10, "setProductDataV2:", v13);
            goto LABEL_22;
          }
          if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
          {
            HMFGetLogIdentifier();
            v34 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v8, "shortDescription");
            v42 = v18;
            v38 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 138544130;
            v44 = v34;
            v45 = 2112;
            v46 = v38;
            v47 = 2112;
            v48 = v11;
            v49 = 2112;
            v50 = v13;
            _os_log_impl(&dword_2218F0000, v21, OS_LOG_TYPE_ERROR, "%{public}@Accessory %@ has changed its productData to a value that is not allowed, keeping previous product data: %@ -> %@", buf, 0x2Au);

            v18 = v42;
            goto LABEL_20;
          }
        }
        else
        {
          v18 = (void *)MEMORY[0x227676638]();
          v19 = self;
          HMFGetOSLogHandle();
          v21 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
          {
            HMFGetLogIdentifier();
            v34 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v8, "shortDescription");
            v35 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v8, "manufacturer");
            v39 = v19;
            v36 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v8, "model");
            v41 = v18;
            v37 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 138544386;
            v44 = v34;
            v45 = 2112;
            v46 = v35;
            v47 = 2112;
            v48 = v36;
            v49 = 2112;
            v50 = v37;
            v51 = 2112;
            v52 = v11;
            _os_log_impl(&dword_2218F0000, v21, OS_LOG_TYPE_INFO, "%{public}@Accessory %@ could not be found in the VIDB, keeping previous product data (manufacturer: '%@', model: '%@', productData: '%@')", buf, 0x34u);

            v18 = v41;
            v19 = v39;

            v15 = 0;
LABEL_20:

          }
        }

        objc_autoreleasePoolPop(v18);
LABEL_22:

      }
    }
    else
    {
      v29 = (void *)MEMORY[0x227676638]();
      v30 = self;
      HMFGetOSLogHandle();
      v31 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v32 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v8, "shortDescription");
        v33 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543874;
        v44 = v32;
        v45 = 2112;
        v46 = v33;
        v47 = 2112;
        v48 = v11;
        _os_log_impl(&dword_2218F0000, v31, OS_LOG_TYPE_ERROR, "%{public}@Accessory %@ is no longer advertising product data, keeping previous product data %@", buf, 0x20u);

      }
      objc_autoreleasePoolPop(v29);
    }
  }
  else if (v12)
  {
    v24 = (void *)MEMORY[0x227676638]();
    v25 = self;
    HMFGetOSLogHandle();
    v26 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
    {
      HMFGetLogIdentifier();
      v27 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v8, "shortDescription");
      v28 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543874;
      v44 = v27;
      v45 = 2112;
      v46 = v28;
      v47 = 2112;
      v48 = v13;
      _os_log_impl(&dword_2218F0000, v26, OS_LOG_TYPE_DEFAULT, "%{public}@Accessory %@ is now bound to product data %@", buf, 0x20u);

    }
    objc_autoreleasePoolPop(v24);
    objc_msgSend(v10, "setProductDataV2:", v13);
    objc_msgSend(v10, "setProductData:", v13);
  }

}

- (void)_processUpdatedAccessoryServer:(id)a3 reAddServices:(BOOL)a4
{
  void *v5;
  HMDHome *v6;
  NSObject *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  NSObject *v15;
  void *v16;
  uint64_t v17;
  void *v18;
  void *v19;
  uint64_t v20;
  uint64_t i;
  void *v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t j;
  id v27;
  void *v28;
  id v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  id v34;
  id v35;
  id v36;
  void *v37;
  void *v38;
  _BOOL8 v39;
  void *v40;
  void *v41;
  _BOOL8 v42;
  void *v43;
  void *v44;
  _BOOL8 v45;
  void *v46;
  _BOOL4 v47;
  void *v48;
  void *v49;
  HMDHome *v50;
  NSObject *v51;
  void *v52;
  void *v53;
  void *v54;
  __CFString *v55;
  void *v56;
  HMDHome *v57;
  NSObject *v58;
  void *v59;
  void *v60;
  void *v61;
  HMDHome *v62;
  NSObject *v63;
  void *v64;
  void *v65;
  void *v66;
  NSObject *v67;
  void *v68;
  uint64_t v69;
  uint64_t v70;
  void *v71;
  id v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  id v76;
  id v77;
  id v78;
  void *v79;
  void *v80;
  int v81;
  NSObject *v82;
  void *v83;
  void *v84;
  unint64_t v85;
  __CFString *v86;
  __CFString *v87;
  void *v88;
  void *v89;
  void *v90;
  void *v91;
  void *v92;
  id v93;
  id v94;
  id v95;
  void *v96;
  __CFString *v97;
  void *v98;
  HMDHome *v99;
  NSObject *v100;
  void *v101;
  void *v102;
  void *v103;
  void *v104;
  void *v105;
  void *v106;
  void *v107;
  HMDHome *v108;
  NSObject *v109;
  void *v110;
  void *v111;
  void *v112;
  void *v113;
  HMDHome *v114;
  NSObject *v115;
  void *v116;
  void *v117;
  void *v118;
  __CFString *v119;
  void *v120;
  void *v121;
  void *v122;
  void *v123;
  void *v124;
  void *v125;
  void *v126;
  id v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t k;
  void *v131;
  void *v132;
  void *v133;
  id v134;
  void *v135;
  HMDHome *v136;
  NSObject *v137;
  void *v138;
  void *v139;
  dispatch_group_t v140;
  id v141;
  uint64_t v142;
  void *v143;
  HMDHome *v144;
  NSObject *v145;
  void *v146;
  void *v147;
  void *v148;
  __CFString *v149;
  uint64_t v150;
  __CFString *v151;
  void *v152;
  void *v153;
  void *v154;
  void *v155;
  id v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t n;
  void *v160;
  void *v161;
  void *v162;
  id v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t ii;
  void *v167;
  id v168;
  NSObject *v169;
  id v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  void *v174;
  void *v175;
  void *v176;
  void *v177;
  void *v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t m;
  void *v182;
  void *v183;
  void *v184;
  void *v185;
  void *v186;
  int v187;
  uint64_t v188;
  id v189;
  void *v190;
  void *v191;
  void *v192;
  void *v193;
  void *v194;
  id v195;
  void *v196;
  void *v197;
  uint64_t v198;
  void *v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  void *v203;
  id obj;
  id obja;
  id objb;
  id val;
  HMDHome *vala;
  void *v209;
  uint64_t v210;
  uint64_t v211;
  void *v212;
  uint64_t v213;
  HMDHome *v214;
  id v215;
  id v216;
  id v217;
  void *context;
  void *contexta;
  void *contextb;
  void *v221;
  id v222;
  id v223;
  void *v224;
  id v225;
  id v226;
  HMDHome *v227;
  void *v228;
  void *v229;
  id v230;
  _QWORD v231[4];
  id v232;
  NSObject *v233;
  id v234;
  id v235;
  __int128 v236;
  __int128 v237;
  __int128 v238;
  __int128 v239;
  __int128 v240;
  __int128 v241;
  __int128 v242;
  __int128 v243;
  __int128 v244;
  __int128 v245;
  __int128 v246;
  __int128 v247;
  id v248;
  id v249;
  id v250;
  id v251;
  id v252;
  id v253;
  id v254;
  __int128 v255;
  __int128 v256;
  __int128 v257;
  __int128 v258;
  __int128 v259;
  __int128 v260;
  __int128 v261;
  __int128 v262;
  id v263;
  id v264;
  id v265;
  id v266;
  __int128 v267;
  __int128 v268;
  __int128 v269;
  __int128 v270;
  __int128 v271;
  __int128 v272;
  __int128 v273;
  __int128 v274;
  __int128 v275;
  __int128 v276;
  __int128 v277;
  __int128 v278;
  __int128 v279;
  __int128 v280;
  __int128 v281;
  __int128 v282;
  _BYTE v283[128];
  _BYTE v284[128];
  _BYTE v285[128];
  void *v286;
  _BYTE v287[128];
  _BYTE v288[128];
  _BYTE v289[128];
  _BYTE v290[128];
  uint8_t v291[128];
  uint8_t buf[4];
  void *v293;
  __int16 v294;
  uint64_t v295;
  __int16 v296;
  id v297;
  __int16 v298;
  __CFString *v299;
  __int16 v300;
  void *v301;
  __int16 v302;
  void *v303;
  uint64_t v304;

  v304 = *MEMORY[0x24BDAC8D0];
  v189 = a3;
  v5 = (void *)MEMORY[0x227676638]();
  v6 = self;
  HMFGetOSLogHandle();
  v7 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543618;
    v293 = v8;
    v294 = 2112;
    v295 = (uint64_t)v189;
    _os_log_impl(&dword_2218F0000, v7, OS_LOG_TYPE_INFO, "%{public}@Updating existing HMDAccessory objects from HAPAccessory objects for server: %@", buf, 0x16u);

  }
  objc_autoreleasePoolPop(v5);
  objc_msgSend(MEMORY[0x24BDBCEB8], "array");
  v192 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x24BDBCEB8], "array");
  v191 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHome _primaryAccessoryForServer:](v6, "_primaryAccessoryForServer:", v189);
  v216 = (id)objc_claimAutoreleasedReturnValue();
  v188 = objc_msgSend(v216, "configNumber");
  v9 = (void *)MEMORY[0x24BDBCEB8];
  objc_msgSend(v189, "accessories");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "arrayWithArray:", v10);
  v196 = (void *)objc_claimAutoreleasedReturnValue();

  v11 = (void *)MEMORY[0x24BDBCEB8];
  -[HMDHome hapAccessoriesForServer:](v6, "hapAccessoriesForServer:", v189);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "arrayWithArray:", v12);
  v209 = (void *)objc_claimAutoreleasedReturnValue();

  -[HMDHome _discoveredAccessoriesForServer:](v6, "_discoveredAccessoriesForServer:", v189);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v209, "addObjectsFromArray:", v13);

  v14 = (void *)MEMORY[0x227676638]();
  v227 = v6;
  HMFGetOSLogHandle();
  v15 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    v17 = objc_msgSend(v209, "count");
    objc_msgSend(v189, "identifier");
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v189, "accessories");
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    v20 = objc_msgSend(v19, "count");
    *(_DWORD *)buf = 138544130;
    v293 = v16;
    v294 = 2050;
    v295 = v17;
    v296 = 2114;
    v297 = v18;
    v298 = 2050;
    v299 = (__CFString *)v20;
    _os_log_impl(&dword_2218F0000, v15, OS_LOG_TYPE_INFO, "%{public}@Found %{public}tu existing HMDAccessory objects associated with the server: '%{public}@' and discovered %{public}tu HAPAccessory objects", buf, 0x2Au);

  }
  objc_autoreleasePoolPop(v14);
  objc_msgSend(MEMORY[0x24BDBCEB8], "array");
  v193 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x24BDBCEB8], "array");
  v194 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x24BDBCEB8], "array");
  v190 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x24BDBCEB8], "array");
  v224 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x24BDBCEB8], "array");
  v221 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x24BDBCEB8], "array");
  context = (void *)objc_claimAutoreleasedReturnValue();
  v273 = 0u;
  v274 = 0u;
  v271 = 0u;
  v272 = 0u;
  objc_msgSend(v189, "accessories");
  obj = (id)objc_claimAutoreleasedReturnValue();
  v213 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v271, v290, 16);
  if (v213)
  {
    v210 = *(_QWORD *)v272;
    do
    {
      for (i = 0; i != v213; ++i)
      {
        if (*(_QWORD *)v272 != v210)
          objc_enumerationMutation(obj);
        v22 = *(void **)(*((_QWORD *)&v271 + 1) + 8 * i);
        v267 = 0u;
        v268 = 0u;
        v269 = 0u;
        v270 = 0u;
        v23 = v209;
        v24 = objc_msgSend(v23, "countByEnumeratingWithState:objects:count:", &v267, v289, 16);
        if (!v24)
          goto LABEL_21;
        v25 = *(_QWORD *)v268;
        while (2)
        {
          for (j = 0; j != v24; ++j)
          {
            if (*(_QWORD *)v268 != v25)
              objc_enumerationMutation(v23);
            v27 = *(id *)(*((_QWORD *)&v267 + 1) + 8 * j);
            objc_opt_class();
            if ((objc_opt_isKindOfClass() & 1) != 0)
              v28 = v27;
            else
              v28 = 0;
            v29 = v28;

            if ((objc_msgSend(v29, "matchesHAPAccessory:", v22) & 1) != 0)
            {

              if (!v29)
                goto LABEL_56;
              if ((objc_msgSend(v29, "isPrimary") & 1) == 0 && (objc_msgSend(v29, "isPaired") & 1) == 0)
              {
                v61 = (void *)MEMORY[0x227676638]();
                v62 = v227;
                HMFGetOSLogHandle();
                v63 = objc_claimAutoreleasedReturnValue();
                if (os_log_type_enabled(v63, OS_LOG_TYPE_INFO))
                {
                  HMFGetLogIdentifier();
                  v64 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend(v29, "shortDescription");
                  v65 = (void *)objc_claimAutoreleasedReturnValue();
                  *(_DWORD *)buf = 138543618;
                  v293 = v64;
                  v294 = 2114;
                  v295 = (uint64_t)v65;
                  _os_log_impl(&dword_2218F0000, v63, OS_LOG_TYPE_INFO, "%{public}@Skipping configuring unpaired secondary accessory with identifier: %{public}@", buf, 0x16u);

                }
                objc_autoreleasePoolPop(v61);
                goto LABEL_55;
              }
              objc_msgSend(v192, "addObject:", v22);
              objc_msgSend(v191, "addObject:", v29);
              objc_msgSend(v29, "uuid");
              v30 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v29, "hostAccessory");
              v31 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v31, "uuid");
              v32 = (void *)objc_claimAutoreleasedReturnValue();
              -[HMDHome getTransactionFromHAPAccessory:hmdAccessory:uuid:hostAccessoryUUID:objectChangeType:](v227, "getTransactionFromHAPAccessory:hmdAccessory:uuid:hostAccessoryUUID:objectChangeType:", v22, v29, v30, v32, 2);
              v33 = (void *)objc_claimAutoreleasedReturnValue();

              v34 = v22;
              v35 = v29;
              v36 = v33;
              objc_msgSend(v35, "initialManufacturer");
              v37 = (void *)objc_claimAutoreleasedReturnValue();
              if (v37)
              {
LABEL_28:

              }
              else
              {
                objc_msgSend(v34, "manufacturer");
                v38 = (void *)objc_claimAutoreleasedReturnValue();
                v39 = v38 == 0;

                if (!v39)
                {
                  objc_msgSend(v34, "manufacturer");
                  v37 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend(v36, "setInitialManufacturer:", v37);
                  goto LABEL_28;
                }
              }
              objc_msgSend(v35, "initialModel");
              v40 = (void *)objc_claimAutoreleasedReturnValue();
              if (v40)
              {
LABEL_32:

              }
              else
              {
                objc_msgSend(v34, "model");
                v41 = (void *)objc_claimAutoreleasedReturnValue();
                v42 = v41 == 0;

                if (!v42)
                {
                  objc_msgSend(v34, "model");
                  v40 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend(v36, "setInitialModel:", v40);
                  goto LABEL_32;
                }
              }
              objc_msgSend(v35, "initialCategoryIdentifier");
              v43 = (void *)objc_claimAutoreleasedReturnValue();
              if (v43)
              {
LABEL_36:

              }
              else
              {
                objc_msgSend(v34, "category");
                v44 = (void *)objc_claimAutoreleasedReturnValue();
                v45 = v44 == 0;

                if (!v45)
                {
                  objc_msgSend(v34, "category");
                  v43 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend(v36, "setInitialCategoryIdentifier:", v43);
                  goto LABEL_36;
                }
              }
              objc_msgSend(v35, "initialServiceTypeUUIDs");
              v46 = (void *)objc_claimAutoreleasedReturnValue();
              v47 = v46 == 0;

              if (v47)
              {
                serviceTypeUUIDsForAccessory(v34);
                v48 = (void *)objc_claimAutoreleasedReturnValue();
                if (v48)
                  objc_msgSend(v36, "setInitialServiceTypeUUIDs:", v48);

              }
              v266 = v224;
              v265 = v221;
              v264 = context;
              -[HMDHome getUpdateTransactionForAccessory:hapAccessory:accessoryTransaction:addSvcTransactions:updateSvcTransactions:removeSvcTransactions:](v227, "getUpdateTransactionForAccessory:hapAccessory:accessoryTransaction:addSvcTransactions:updateSvcTransactions:removeSvcTransactions:", v35, v34, v36, &v266, &v265, &v264);
              val = v266;

              v225 = v265;
              v222 = v264;

              if (objc_msgSend(v34, "isPrimary"))
              {
                objc_msgSend(v189, "setupHash");
                v49 = (void *)objc_claimAutoreleasedReturnValue();
                if (v49)
                {
                  contexta = (void *)MEMORY[0x227676638]();
                  v50 = v227;
                  HMFGetOSLogHandle();
                  v51 = objc_claimAutoreleasedReturnValue();
                  if (os_log_type_enabled(v51, OS_LOG_TYPE_INFO))
                  {
                    HMFGetLogIdentifier();
                    v52 = (void *)objc_claimAutoreleasedReturnValue();
                    objc_msgSend(v35, "shortDescription");
                    v53 = (void *)objc_claimAutoreleasedReturnValue();
                    *(_DWORD *)buf = 138543874;
                    v293 = v52;
                    v294 = 2112;
                    v295 = (uint64_t)v49;
                    v296 = 2112;
                    v297 = v53;
                    _os_log_impl(&dword_2218F0000, v51, OS_LOG_TYPE_INFO, "%{public}@Saving setup hash '%@ for accessory %@", buf, 0x20u);

                  }
                  objc_autoreleasePoolPop(contexta);
                  objc_msgSend(v36, "setAccessorySetupHash:", v49);
                }
                -[HMDHome _processUpdatedProductDataForAccessory:hapAccessory:transaction:](v227, "_processUpdatedProductDataForAccessory:hapAccessory:transaction:", v35, v34, v36);

              }
              objc_msgSend(v35, "modelObjectWithChangeType:", 1);
              v54 = (void *)objc_claimAutoreleasedReturnValue();
              v263 = 0;
              objc_msgSend(v54, "diff:differingFields:", v36, &v263);
              v55 = (__CFString *)v263;

              if (-[__CFString count](v55, "count"))
              {
                v56 = (void *)MEMORY[0x227676638]();
                v57 = v227;
                HMFGetOSLogHandle();
                v58 = objc_claimAutoreleasedReturnValue();
                if (os_log_type_enabled(v58, OS_LOG_TYPE_INFO))
                {
                  HMFGetLogIdentifier();
                  v59 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend(v216, "shortDescription");
                  v60 = (void *)objc_claimAutoreleasedReturnValue();
                  *(_DWORD *)buf = 138544130;
                  v293 = v59;
                  v294 = 2114;
                  v295 = (uint64_t)v60;
                  v296 = 2114;
                  v297 = v36;
                  v298 = 2114;
                  v299 = v55;
                  _os_log_impl(&dword_2218F0000, v58, OS_LOG_TYPE_INFO, "%{public}@[Pair-Verify %{public}@] Received accessory update %{public}@ due to diff %{public}@", buf, 0x2Au);

                }
                objc_autoreleasePoolPop(v56);
                objc_msgSend(v194, "addObject:", v36);
              }

              context = v222;
              v221 = v225;
              v224 = val;
              goto LABEL_55;
            }

          }
          v24 = objc_msgSend(v23, "countByEnumeratingWithState:objects:count:", &v267, v289, 16);
          if (v24)
            continue;
          break;
        }
LABEL_21:
        v27 = v23;
LABEL_55:

LABEL_56:
        ;
      }
      v213 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v271, v290, 16);
    }
    while (v213);
  }

  v66 = (void *)MEMORY[0x227676638]();
  vala = v227;
  HMFGetOSLogHandle();
  v67 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v67, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v68 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543618;
    v293 = v68;
    v294 = 2112;
    v295 = (uint64_t)v189;
    _os_log_impl(&dword_2218F0000, v67, OS_LOG_TYPE_INFO, "%{public}@Finished updating paired accessories for server: %@", buf, 0x16u);

  }
  objc_autoreleasePoolPop(v66);
  objc_msgSend(v196, "removeObjectsInArray:", v192);
  objc_msgSend(v209, "removeObjectsInArray:", v191);
  -[HMDHome accessories](vala, "accessories");
  v203 = (void *)objc_claimAutoreleasedReturnValue();
  v261 = 0u;
  v262 = 0u;
  v259 = 0u;
  v260 = 0u;
  v195 = v196;
  obja = (id)objc_msgSend(v195, "countByEnumeratingWithState:objects:count:", &v259, v288, 16);
  if (obja)
  {
    v201 = *(_QWORD *)v260;
    do
    {
      v69 = 0;
      do
      {
        if (*(_QWORD *)v260 != v201)
        {
          v70 = v69;
          objc_enumerationMutation(v195);
          v69 = v70;
        }
        v211 = v69;
        v71 = *(void **)(*((_QWORD *)&v259 + 1) + 8 * v69);
        v255 = 0u;
        v256 = 0u;
        v257 = 0u;
        v258 = 0u;
        v72 = v203;
        v73 = objc_msgSend(v72, "countByEnumeratingWithState:objects:count:", &v255, v287, 16);
        if (v73)
        {
          v74 = *(_QWORD *)v256;
LABEL_67:
          v75 = 0;
          while (1)
          {
            if (*(_QWORD *)v256 != v74)
              objc_enumerationMutation(v72);
            v76 = *(id *)(*((_QWORD *)&v255 + 1) + 8 * v75);
            objc_opt_class();
            v77 = (objc_opt_isKindOfClass() & 1) != 0 ? v76 : 0;
            v78 = v77;

            objc_msgSend(v71, "identifier");
            v79 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v71, "instanceID");
            v80 = (void *)objc_claimAutoreleasedReturnValue();
            v81 = objc_msgSend(v78, "matchesHAPAccessoryWithServerIdentifier:instanceID:", v79, v80);

            if (v81)
              break;

            if (v73 == ++v75)
            {
              v73 = objc_msgSend(v72, "countByEnumeratingWithState:objects:count:", &v255, v287, 16);
              if (v73)
                goto LABEL_67;
              goto LABEL_76;
            }
          }
          v228 = (void *)MEMORY[0x227676638]();
          v214 = vala;
          HMFGetOSLogHandle();
          v82 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v82, OS_LOG_TYPE_INFO))
          {
            HMFGetLogIdentifier();
            v197 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v71, "server");
            v199 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v199, "identifier");
            v83 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v71, "instanceID");
            v84 = (void *)objc_claimAutoreleasedReturnValue();
            v85 = objc_msgSend(v71, "linkType");
            v86 = CFSTR("Undefined");
            if (v85 <= 2)
              v86 = off_24E780090[v85];
            v87 = v86;
            objc_msgSend(v78, "name");
            v88 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v78, "uniqueIdentifier");
            v89 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 138544642;
            v293 = v197;
            v294 = 2114;
            v295 = (uint64_t)v83;
            v296 = 2114;
            v297 = v84;
            v298 = 2112;
            v299 = v87;
            v300 = 2112;
            v301 = v88;
            v302 = 2112;
            v303 = v89;
            _os_log_impl(&dword_2218F0000, v82, OS_LOG_TYPE_INFO, "%{public}@HAPAccessory %{public}@/%{public}@/%@ matches existing HMDAccessory %@(%@)", buf, 0x3Eu);

          }
          objc_autoreleasePoolPop(v228);

          if (v78)
          {
            objc_msgSend(v209, "removeObject:", v78);
            objc_msgSend(v78, "uuid");
            v90 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v78, "hostAccessory");
            v91 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v91, "uuid");
            v92 = (void *)objc_claimAutoreleasedReturnValue();
            -[HMDHome getTransactionFromHAPAccessory:hmdAccessory:uuid:hostAccessoryUUID:objectChangeType:](v214, "getTransactionFromHAPAccessory:hmdAccessory:uuid:hostAccessoryUUID:objectChangeType:", v71, v78, v90, v92, 2);
            v229 = (void *)objc_claimAutoreleasedReturnValue();

            v254 = v224;
            v253 = v221;
            v252 = context;
            -[HMDHome getUpdateTransactionForAccessory:hapAccessory:accessoryTransaction:addSvcTransactions:updateSvcTransactions:removeSvcTransactions:](v214, "getUpdateTransactionForAccessory:hapAccessory:accessoryTransaction:addSvcTransactions:updateSvcTransactions:removeSvcTransactions:", v78, v71, v229, &v254, &v253, &v252);
            v93 = v254;

            v94 = v253;
            v95 = v252;

            objc_msgSend(v78, "modelObjectWithChangeType:", 1);
            v96 = (void *)objc_claimAutoreleasedReturnValue();
            v251 = 0;
            objc_msgSend(v96, "diff:differingFields:", v229, &v251);
            v97 = (__CFString *)v251;

            if (-[__CFString count](v97, "count"))
            {
              v98 = (void *)MEMORY[0x227676638]();
              v99 = v214;
              HMFGetOSLogHandle();
              v100 = objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v100, OS_LOG_TYPE_INFO))
              {
                HMFGetLogIdentifier();
                v101 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v216, "uuid");
                v102 = (void *)objc_claimAutoreleasedReturnValue();
                *(_DWORD *)buf = 138544130;
                v293 = v101;
                v294 = 2114;
                v295 = (uint64_t)v102;
                v296 = 2114;
                v297 = v229;
                v298 = 2114;
                v299 = v97;
                _os_log_impl(&dword_2218F0000, v100, OS_LOG_TYPE_INFO, "%{public}@[Pair-Verify %{public}@] Received accessory update %{public}@ due to diff %{public}@", buf, 0x2Au);

              }
              objc_autoreleasePoolPop(v98);
              objc_msgSend(v194, "addObject:", v229);
            }
            goto LABEL_96;
          }
        }
        else
        {
LABEL_76:

        }
        if (v216)
        {
          objc_msgSend(v71, "instanceID");
          v103 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v103, "stringValue");
          v104 = (void *)objc_claimAutoreleasedReturnValue();
          v286 = v104;
          objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", &v286, 1);
          v76 = (id)objc_claimAutoreleasedReturnValue();

          v105 = (void *)MEMORY[0x24BDD1880];
          objc_msgSend(v216, "uuid");
          v106 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v105, "hm_deriveUUIDFromBaseUUID:withSalts:", v106, v76);
          v229 = (void *)objc_claimAutoreleasedReturnValue();

          if (!v229)
          {
            v107 = (void *)MEMORY[0x227676638]();
            v108 = vala;
            HMFGetOSLogHandle();
            v109 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v109, OS_LOG_TYPE_ERROR))
            {
              HMFGetLogIdentifier();
              v110 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v216, "shortDescription");
              v111 = (void *)objc_claimAutoreleasedReturnValue();
              *(_DWORD *)buf = 138543618;
              v293 = v110;
              v294 = 2112;
              v295 = (uint64_t)v111;
              _os_log_impl(&dword_2218F0000, v109, OS_LOG_TYPE_ERROR, "%{public}@Error during _processUpdatedAccessoryServer: Primary Accessory for Server has nil UUID: %@", buf, 0x16u);

            }
            objc_autoreleasePoolPop(v107);
            +[HMDTTRManager sharedManager](HMDTTRManager, "sharedManager");
            v112 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v112, "requestRadarWithMessage:radarTitle:", CFSTR("Null identifier for accessory detected. Please file a radar against: HomeKit | New Bugs."), CFSTR("PrimaryAccessoryForServer results in nil uuid during processUpdatedAccessoryServer"));

          }
          v113 = (void *)MEMORY[0x227676638]();
          v114 = vala;
          HMFGetOSLogHandle();
          v115 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v115, OS_LOG_TYPE_INFO))
          {
            HMFGetLogIdentifier();
            v116 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v216, "shortDescription");
            v117 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v71, "instanceID");
            v118 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v229, "UUIDString");
            v119 = (__CFString *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 138544130;
            v293 = v116;
            v294 = 2114;
            v295 = (uint64_t)v117;
            v296 = 2114;
            v297 = v118;
            v298 = 2114;
            v299 = v119;
            _os_log_impl(&dword_2218F0000, v115, OS_LOG_TYPE_INFO, "%{public}@[Pair-Verify %{public}@] Adding a new bridged accessory instanceID %{public}@ and uuid %{public}@", buf, 0x2Au);

          }
          objc_autoreleasePoolPop(v113);
          objc_msgSend(v216, "uuid");
          v120 = (void *)objc_claimAutoreleasedReturnValue();
          -[HMDHome getTransactionFromHAPAccessory:hmdAccessory:uuid:hostAccessoryUUID:objectChangeType:](v114, "getTransactionFromHAPAccessory:hmdAccessory:uuid:hostAccessoryUUID:objectChangeType:", v71, 0, v229, v120, 1);
          v97 = (__CFString *)objc_claimAutoreleasedReturnValue();

          -[__CFString roomUUID](v97, "roomUUID");
          v121 = (void *)objc_claimAutoreleasedReturnValue();
          LODWORD(v120) = v121 == 0;

          if ((_DWORD)v120)
          {
            objc_msgSend(v216, "room");
            v122 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v122, "uuid");
            v123 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v123, "UUIDString");
            v124 = (void *)objc_claimAutoreleasedReturnValue();
            -[__CFString setRoomUUID:](v97, "setRoomUUID:", v124);

          }
          v250 = v224;
          v249 = v221;
          v248 = context;
          -[HMDHome getUpdateTransactionForAccessory:hapAccessory:accessoryTransaction:addSvcTransactions:updateSvcTransactions:removeSvcTransactions:](v114, "getUpdateTransactionForAccessory:hapAccessory:accessoryTransaction:addSvcTransactions:updateSvcTransactions:removeSvcTransactions:", 0, v71, v97, &v250, &v249, &v248);
          v93 = v250;

          v94 = v249;
          v95 = v248;

          objc_msgSend(MEMORY[0x24BDD16E0], "numberWithInteger:", objc_msgSend(v216, "certificationStatus"));
          v125 = (void *)objc_claimAutoreleasedReturnValue();
          -[__CFString setCertificationStatus:](v97, "setCertificationStatus:", v125);

          -[HMDHome uuidToHAPAccessoryConfigTable](v114, "uuidToHAPAccessoryConfigTable");
          v126 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v126, "setObject:forKey:", v71, v229);

          objc_msgSend(v193, "addObject:", v97);
LABEL_96:

          context = v95;
          v221 = v94;
          v224 = v93;
        }
        v69 = v211 + 1;
      }
      while ((id)(v211 + 1) != obja);
      obja = (id)objc_msgSend(v195, "countByEnumeratingWithState:objects:count:", &v259, v288, 16);
    }
    while (obja);
  }

  if (objc_msgSend(v209, "count"))
  {
    v246 = 0u;
    v247 = 0u;
    v244 = 0u;
    v245 = 0u;
    v127 = v209;
    v128 = objc_msgSend(v127, "countByEnumeratingWithState:objects:count:", &v244, v285, 16);
    if (v128)
    {
      v129 = *(_QWORD *)v245;
      do
      {
        for (k = 0; k != v128; ++k)
        {
          if (*(_QWORD *)v245 != v129)
            objc_enumerationMutation(v127);
          v131 = *(void **)(*((_QWORD *)&v244 + 1) + 8 * k);
          if ((objc_msgSend(v131, "isPrimary") & 1) == 0)
          {
            objc_msgSend(v131, "transactionWithObjectChangeType:", 3);
            v132 = (void *)objc_claimAutoreleasedReturnValue();
            objc_opt_class();
            if ((objc_opt_isKindOfClass() & 1) != 0)
              v133 = v132;
            else
              v133 = 0;
            v134 = v133;

            v135 = (void *)MEMORY[0x227676638]();
            v136 = vala;
            HMFGetOSLogHandle();
            v137 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v137, OS_LOG_TYPE_INFO))
            {
              HMFGetLogIdentifier();
              v138 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v216, "shortDescription");
              v139 = (void *)objc_claimAutoreleasedReturnValue();
              *(_DWORD *)buf = 138543874;
              v293 = v138;
              v294 = 2114;
              v295 = (uint64_t)v139;
              v296 = 2114;
              v297 = v134;
              _os_log_impl(&dword_2218F0000, v137, OS_LOG_TYPE_INFO, "%{public}@[Pair-Verify %{public}@] Removing a secondary accessory %{public}@", buf, 0x20u);

            }
            objc_autoreleasePoolPop(v135);
            if (v134)
              objc_msgSend(v190, "addObject:", v134);

          }
        }
        v128 = objc_msgSend(v127, "countByEnumeratingWithState:objects:count:", &v244, v285, 16);
      }
      while (v128);
    }

  }
  v140 = dispatch_group_create();
  +[HMDBackingStoreTransactionOptions defaultXPCOptions](HMDBackingStoreTransactionOptions, "defaultXPCOptions");
  v212 = (void *)objc_claimAutoreleasedReturnValue();
  v215 = v189;
  v141 = v216;
  v226 = v224;
  v223 = v221;
  v230 = context;
  contextb = v141;
  v142 = objc_msgSend(v141, "configNumber");
  if (objc_msgSend(v215, "configNumber") != v142)
  {

LABEL_125:
    v151 = CFSTR("Add Accessory");
    goto LABEL_126;
  }
  if (!objc_msgSend(v230, "count") && !objc_msgSend(v226, "count"))
  {
    v281 = 0u;
    v282 = 0u;
    v279 = 0u;
    v280 = 0u;
    objb = v223;
    v202 = objc_msgSend(objb, "countByEnumeratingWithState:objects:count:", &v279, buf, 16);
    if (v202)
    {
      v171 = *(_QWORD *)v280;
      v198 = *(_QWORD *)v280;
      while (2)
      {
        v172 = 0;
        do
        {
          if (*(_QWORD *)v280 != v171)
          {
            v173 = v172;
            objc_enumerationMutation(objb);
            v172 = v173;
          }
          v200 = v172;
          v174 = *(void **)(*((_QWORD *)&v279 + 1) + 8 * v172);
          objc_msgSend(v174, "instanceID");
          v175 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(contextb, "findService:", v175);
          v176 = (void *)objc_claimAutoreleasedReturnValue();

          objc_msgSend(v176, "serviceType");
          v177 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v174, "serviceType");
          v178 = (void *)objc_claimAutoreleasedReturnValue();
          LODWORD(v175) = objc_msgSend(v177, "isEqualToString:", v178);

          if (!(_DWORD)v175)
          {
LABEL_159:

            goto LABEL_121;
          }
          v277 = 0u;
          v278 = 0u;
          v275 = 0u;
          v276 = 0u;
          objc_msgSend(v174, "characteristics");
          v217 = (id)objc_claimAutoreleasedReturnValue();
          v179 = objc_msgSend(v217, "countByEnumeratingWithState:objects:count:", &v275, v291, 16);
          if (v179)
          {
            v180 = *(_QWORD *)v276;
            while (2)
            {
              for (m = 0; m != v179; ++m)
              {
                if (*(_QWORD *)v276 != v180)
                  objc_enumerationMutation(v217);
                v182 = *(void **)(*((_QWORD *)&v275 + 1) + 8 * m);
                objc_msgSend(v182, "objectForKeyedSubscript:", CFSTR("characteristicInstanceID"));
                v183 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v182, "objectForKeyedSubscript:", CFSTR("characteristicType"));
                v184 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v176, "findCharacteristic:", v183);
                v185 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v185, "characteristicType");
                v186 = (void *)objc_claimAutoreleasedReturnValue();
                v187 = objc_msgSend(v186, "isEqualToString:", v184);

                if (!v187)
                {

                  goto LABEL_159;
                }
              }
              v179 = objc_msgSend(v217, "countByEnumeratingWithState:objects:count:", &v275, v291, 16);
              if (v179)
                continue;
              break;
            }
          }

          v171 = v198;
          v172 = v200 + 1;
        }
        while (v200 + 1 != v202);
        v202 = objc_msgSend(objb, "countByEnumeratingWithState:objects:count:", &v279, buf, 16);
        v171 = v198;
        if (v202)
          continue;
        break;
      }
    }

    goto LABEL_125;
  }

LABEL_121:
  v143 = (void *)MEMORY[0x227676638]();
  v144 = vala;
  HMFGetOSLogHandle();
  v145 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v145, OS_LOG_TYPE_ERROR))
  {
    HMFGetLogIdentifier();
    v146 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(contextb, "shortDescription");
    v147 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedInteger:", v188);
    v148 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543874;
    v293 = v146;
    v294 = 2112;
    v295 = (uint64_t)v147;
    v296 = 2112;
    v297 = v148;
    _os_log_impl(&dword_2218F0000, v145, OS_LOG_TYPE_ERROR, "%{public}@Only storing the update locally since the accessory %@ didn't update its config number: %@ after updating its services/characteristics.", buf, 0x20u);

  }
  objc_autoreleasePoolPop(v143);
  v149 = CFSTR("Add Accessory Locally");
  +[HMDBackingStoreTransactionOptions defaultLocalOptions](HMDBackingStoreTransactionOptions, "defaultLocalOptions");
  v150 = objc_claimAutoreleasedReturnValue();

  v151 = CFSTR("Add Accessory Locally");
  v212 = (void *)v150;
LABEL_126:
  -[HMDHome backingStore](vala, "backingStore");
  v152 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v152, "transaction:options:", v151, v212);
  v153 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v194, "arrayByAddingObjectsFromArray:", v193);
  v154 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v154, "arrayByAddingObjectsFromArray:", v190);
  v155 = (void *)objc_claimAutoreleasedReturnValue();

  v242 = 0u;
  v243 = 0u;
  v240 = 0u;
  v241 = 0u;
  v156 = v155;
  v157 = objc_msgSend(v156, "countByEnumeratingWithState:objects:count:", &v240, v284, 16);
  if (v157)
  {
    v158 = *(_QWORD *)v241;
    do
    {
      for (n = 0; n != v157; ++n)
      {
        if (*(_QWORD *)v241 != v158)
          objc_enumerationMutation(v156);
        v160 = *(void **)(*((_QWORD *)&v240 + 1) + 8 * n);
        objc_msgSend(v160, "setConfigurationTracker:", v140);
        objc_msgSend(v153, "add:withMessage:", v160, 0);
      }
      v157 = objc_msgSend(v156, "countByEnumeratingWithState:objects:count:", &v240, v284, 16);
    }
    while (v157);
  }

  objc_msgSend(v223, "arrayByAddingObjectsFromArray:", v226);
  v161 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v161, "arrayByAddingObjectsFromArray:", v230);
  v162 = (void *)objc_claimAutoreleasedReturnValue();

  v238 = 0u;
  v239 = 0u;
  v236 = 0u;
  v237 = 0u;
  v163 = v162;
  v164 = objc_msgSend(v163, "countByEnumeratingWithState:objects:count:", &v236, v283, 16);
  if (v164)
  {
    v165 = *(_QWORD *)v237;
    do
    {
      for (ii = 0; ii != v164; ++ii)
      {
        if (*(_QWORD *)v237 != v165)
          objc_enumerationMutation(v163);
        v167 = *(void **)(*((_QWORD *)&v236 + 1) + 8 * ii);
        objc_msgSend(v167, "setConfigurationTracker:", v140);
        objc_msgSend(v153, "add:withMessage:", v167, 0);
      }
      v164 = objc_msgSend(v163, "countByEnumeratingWithState:objects:count:", &v236, v283, 16);
    }
    while (v164);
  }

  objc_initWeak((id *)buf, vala);
  v231[0] = MEMORY[0x24BDAC760];
  v231[1] = 3221225472;
  v231[2] = __56__HMDHome__processUpdatedAccessoryServer_reAddServices___block_invoke;
  v231[3] = &unk_24E791130;
  objc_copyWeak(&v235, (id *)buf);
  v168 = v215;
  v232 = v168;
  v169 = v140;
  v233 = v169;
  v170 = v193;
  v234 = v170;
  objc_msgSend(v153, "run:", v231);

  objc_destroyWeak(&v235);
  objc_destroyWeak((id *)buf);

}

- (void)_unconfigurePairedAccessoriesForServer:(id)a3 updateReachability:(BOOL)a4
{
  _BOOL4 v4;
  id v6;
  void *v7;
  HMDHome *v8;
  NSObject *v9;
  void *v10;
  void *v11;
  void *v12;
  uint64_t v13;
  id v14;
  _QWORD v15[4];
  id v16;
  uint64_t v17;
  BOOL v18;
  uint8_t buf[4];
  void *v20;
  __int16 v21;
  id v22;
  uint64_t v23;

  v4 = a4;
  v23 = *MEMORY[0x24BDAC8D0];
  v6 = a3;
  if (objc_msgSend(v6, "isPaired"))
  {
    if (v4)
    {
      v7 = (void *)MEMORY[0x227676638]();
      v8 = self;
      HMFGetOSLogHandle();
      v9 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        v20 = v10;
        v21 = 2112;
        v22 = v6;
        _os_log_impl(&dword_2218F0000, v9, OS_LOG_TYPE_INFO, "%{public}@Setting reachability to false for all paired accessories associated with %@", buf, 0x16u);

      }
      objc_autoreleasePoolPop(v7);
    }
    objc_msgSend(MEMORY[0x24BDD1540], "hmErrorWithCode:", 4);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "identifier");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    v13 = objc_msgSend(v6, "linkType");
    v15[0] = MEMORY[0x24BDAC760];
    v15[1] = 3221225472;
    v15[2] = __69__HMDHome__unconfigurePairedAccessoriesForServer_updateReachability___block_invoke;
    v15[3] = &unk_24E776E68;
    v16 = v12;
    v17 = v13;
    v18 = v4;
    v14 = v12;
    -[HMDHome _notifyRetrievalError:accessoryServer:linkType:accessoryOperationBlock:](self, "_notifyRetrievalError:accessoryServer:linkType:accessoryOperationBlock:", v11, v14, v13, v15);

  }
}

- (void)_configurePairedAccessoriesForServer:(id)a3 reAddServices:(BOOL)a4
{
  _BOOL8 v4;
  id v6;
  char v7;
  void *v8;
  HMDHome *v9;
  NSObject *v10;
  NSObject *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  HMDHome *v16;
  NSObject *v17;
  void *v18;
  void *v19;
  void *v20;
  int v21;
  void *v22;
  __int16 v23;
  id v24;
  uint64_t v25;

  v4 = a4;
  v25 = *MEMORY[0x24BDAC8D0];
  v6 = a3;
  v7 = objc_msgSend(v6, "isPaired");
  v8 = (void *)MEMORY[0x227676638]();
  v9 = self;
  HMFGetOSLogHandle();
  v10 = objc_claimAutoreleasedReturnValue();
  v11 = v10;
  if ((v7 & 1) != 0)
  {
    if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      v21 = 138543618;
      v22 = v12;
      v23 = 2112;
      v24 = v6;
      _os_log_impl(&dword_2218F0000, v11, OS_LOG_TYPE_INFO, "%{public}@Configuring paired accessories with accessory server '%@'", (uint8_t *)&v21, 0x16u);

    }
    objc_autoreleasePoolPop(v8);
    objc_msgSend(v6, "identifier");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHome hapAccessoryWithIdentifier:](v9, "hapAccessoryWithIdentifier:", v13);
    v14 = (void *)objc_claimAutoreleasedReturnValue();

    if (v14)
    {
      v15 = (void *)MEMORY[0x227676638]();
      v16 = v9;
      HMFGetOSLogHandle();
      v17 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v18 = (void *)objc_claimAutoreleasedReturnValue();
        v21 = 138543618;
        v22 = v18;
        v23 = 2112;
        v24 = v14;
        _os_log_impl(&dword_2218F0000, v17, OS_LOG_TYPE_INFO, "%{public}@Primary HMDAccessory %@ is listed as paired", (uint8_t *)&v21, 0x16u);

      }
      objc_autoreleasePoolPop(v15);
      -[HMDHome _processUpdatedAccessoryServer:reAddServices:](v16, "_processUpdatedAccessoryServer:reAddServices:", v6, v4);
    }
  }
  else
  {
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      HMFGetLogIdentifier();
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      v21 = 138543618;
      v22 = v19;
      v23 = 2112;
      v24 = v6;
      _os_log_impl(&dword_2218F0000, v11, OS_LOG_TYPE_DEFAULT, "%{public}@Skipping configuration of unpaired accessory server '%@'", (uint8_t *)&v21, 0x16u);

    }
    objc_autoreleasePoolPop(v8);
    objc_msgSend(MEMORY[0x24BDD1540], "errorWithDomain:code:userInfo:", *MEMORY[0x24BDD5BD8], 4, 0);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "identifier");
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHome _notifyRetrievalError:accessoryServer:linkType:accessoryOperationBlock:](v9, "_notifyRetrievalError:accessoryServer:linkType:accessoryOperationBlock:", v14, v20, objc_msgSend(v6, "linkType"), 0);

  }
}

- (void)_fetchMetadataOnCurrentDeviceWithCompletion:(id)a3
{
  id v4;
  void *v5;
  id v6;

  v4 = a3;
  +[HMDThreadNetworkMetadataStore defaultStore](HMDThreadNetworkMetadataStore, "defaultStore");
  v6 = (id)objc_claimAutoreleasedReturnValue();
  -[HMDHome threadOperationalDataset](self, "threadOperationalDataset");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "retrieveMetadata:homeHasResident:completion:", v5, -[HMDHome doesHomeContainResident](self, "doesHomeContainResident"), v4);

}

- (void)retrieveThreadNetworkMetadataWithCompletion:(id)a3
{
  void (**v4)(id, _QWORD, void *);
  void *v5;
  void *v6;
  void *v7;
  int v8;
  void *v9;
  HMDHome *v10;
  NSObject *v11;
  void *v12;
  void *v13;
  void *v14;
  HMDHome *v15;
  NSObject *v16;
  void *v17;
  _QWORD v18[5];
  void (**v19)(id, _QWORD, void *);
  uint8_t buf[4];
  void *v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  v4 = (void (**)(id, _QWORD, void *))a3;
  if (!-[HMDHome isSharedAdmin](self, "isSharedAdmin") && !-[HMDHome isOwnerUser](self, "isOwnerUser"))
  {
    v14 = (void *)MEMORY[0x227676638]();
    v15 = self;
    HMFGetOSLogHandle();
    v16 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v21 = v17;
      _os_log_impl(&dword_2218F0000, v16, OS_LOG_TYPE_ERROR, "%{public}@Unexpected user. Returning without retrieving thread network credentials", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v14);
    objc_msgSend(MEMORY[0x24BDD1540], "hmErrorWithCode:", 47);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v4[2](v4, 0, v6);
    goto LABEL_16;
  }
  if (!-[HMDHome isCurrentDeviceConfirmedPrimaryResident](self, "isCurrentDeviceConfirmedPrimaryResident"))
  {
    -[HMDHome residentDeviceManager](self, "residentDeviceManager");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "residentDevices");
    v6 = (void *)objc_claimAutoreleasedReturnValue();

    if (objc_msgSend(v6, "count")
      && (-[HMDHome primaryResident](self, "primaryResident"),
          v7 = (void *)objc_claimAutoreleasedReturnValue(),
          v8 = objc_msgSend(v7, "isReachable"),
          v7,
          v8))
    {
      v18[0] = MEMORY[0x24BDAC760];
      v18[1] = 3221225472;
      v18[2] = __55__HMDHome_retrieveThreadNetworkMetadataWithCompletion___block_invoke;
      v18[3] = &unk_24E790418;
      v18[4] = self;
      v19 = v4;
      -[HMDHome _fetchMetadataFromPrimaryResidentWithCompletion:](self, "_fetchMetadataFromPrimaryResidentWithCompletion:", v18);

    }
    else if (-[HMDHome isSharedAdmin](self, "isSharedAdmin"))
    {
      v9 = (void *)MEMORY[0x227676638]();
      v10 = self;
      HMFGetOSLogHandle();
      v11 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v12 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543362;
        v21 = v12;
        _os_log_impl(&dword_2218F0000, v11, OS_LOG_TYPE_ERROR, "%{public}@No resident available. Returning without retrieving thread network credentials", buf, 0xCu);

      }
      objc_autoreleasePoolPop(v9);
      objc_msgSend(MEMORY[0x24BDD1540], "hmErrorWithCode:", 91);
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      v4[2](v4, 0, v13);

    }
    else
    {
      -[HMDHome _fetchMetadataOnCurrentDeviceWithCompletion:](self, "_fetchMetadataOnCurrentDeviceWithCompletion:", v4);
    }
LABEL_16:

    goto LABEL_17;
  }
  -[HMDHome _fetchMetadataOnCurrentDeviceWithCompletion:](self, "_fetchMetadataOnCurrentDeviceWithCompletion:", v4);
LABEL_17:

}

- (void)removeThreadNetworkPreferredNetworkWithCompletion:(id)a3
{
  id v3;
  id v4;

  v3 = a3;
  +[HMDThreadNetworkMetadataStore defaultStore](HMDThreadNetworkMetadataStore, "defaultStore");
  v4 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "removePreferredNetworkWithCompletion:", v3);

}

- (id)_checkResidentCapabilitiesForCredentialSharing:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  char v8;
  void *v9;
  void *v10;
  HMDHome *v11;
  NSObject *v12;
  void *v13;
  uint64_t v14;
  HMDHome *v15;
  void *v16;
  int v18;
  void *v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  v4 = a3;
  v5 = v4;
  if (!v4 || (objc_msgSend(v4, "device"), v6 = (void *)objc_claimAutoreleasedReturnValue(), v6, !v6))
  {
    v10 = (void *)MEMORY[0x227676638]();
    v11 = self;
    HMFGetOSLogHandle();
    v12 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      v18 = 138543362;
      v19 = v13;
      _os_log_impl(&dword_2218F0000, v12, OS_LOG_TYPE_ERROR, "%{public}@No primary resident device to request thread credentials from", (uint8_t *)&v18, 0xCu);

    }
    v14 = 91;
    goto LABEL_11;
  }
  objc_msgSend(v5, "capabilities");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = objc_msgSend(v7, "supportsThreadNetworkCredentialSharing");

  if ((v8 & 1) == 0)
  {
    v10 = (void *)MEMORY[0x227676638]();
    v15 = self;
    HMFGetOSLogHandle();
    v12 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      v18 = 138543362;
      v19 = v16;
      _os_log_impl(&dword_2218F0000, v12, OS_LOG_TYPE_ERROR, "%{public}@Primary resident doesn't support Thread Network Credential sharing", (uint8_t *)&v18, 0xCu);

    }
    v14 = 92;
LABEL_11:

    objc_autoreleasePoolPop(v10);
    objc_msgSend(MEMORY[0x24BDD1540], "hmErrorWithCode:", v14);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    goto LABEL_12;
  }
  v9 = 0;
LABEL_12:

  return v9;
}

- (void)_fetchMetadataFromPrimaryResidentWithCompletion:(id)a3
{
  void (**v4)(id, _QWORD, void *);
  void *v5;
  void *v6;
  void *v7;
  HMDHome *v8;
  NSObject *v9;
  void *v10;
  void *v11;
  int v12;
  void *v13;
  HMDRemoteDeviceMessageDestination *v14;
  void *v15;
  void *v16;
  HMDRemoteDeviceMessageDestination *v17;
  void *v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(uint64_t, void *, void *);
  void *v23;
  void (**v24)(id, _QWORD, void *);
  id v25;
  const __CFString *v26;
  void *v27;
  uint8_t buf[4];
  void *v29;
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  v4 = (void (**)(id, _QWORD, void *))a3;
  -[HMDHome primaryResident](self, "primaryResident");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHome _checkResidentCapabilitiesForCredentialSharing:](self, "_checkResidentCapabilitiesForCredentialSharing:", v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  if (v6)
  {
    v7 = (void *)MEMORY[0x227676638]();
    v8 = self;
    HMFGetOSLogHandle();
    v9 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v29 = v10;
      _os_log_impl(&dword_2218F0000, v9, OS_LOG_TYPE_ERROR, "%{public}@Couldn't find compatible resident to fetch Thread network credentials", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v7);
    v4[2](v4, 0, v6);
  }
  else
  {
    if (isFeatureMatteriPhoneOnlyPairingControlForThreadEnabled()
      && (+[HMDDeviceCapabilities deviceCapabilities](HMDDeviceCapabilities, "deviceCapabilities"),
          v11 = (void *)objc_claimAutoreleasedReturnValue(),
          v12 = objc_msgSend(v11, "supportsThreadService"),
          v11,
          v12))
    {
      v26 = CFSTR("HMDHomeThreadNetworkCredentialsIsRequestorThreadCapablePayloadKey");
      v27 = &unk_24E96A610;
      objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", &v27, &v26, 1);
      v13 = (void *)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      v13 = 0;
    }
    v14 = [HMDRemoteDeviceMessageDestination alloc];
    -[HMDHome uuid](self, "uuid");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "device");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    v17 = -[HMDRemoteDeviceMessageDestination initWithTarget:device:](v14, "initWithTarget:device:", v15, v16);

    v18 = (void *)objc_msgSend(objc_alloc(MEMORY[0x24BE3F1D0]), "initWithName:destination:payload:", CFSTR("HMDHomeThreadNetworkCredentialsRequestKey"), v17, v13);
    objc_msgSend(v18, "setRemote:", 1);
    objc_msgSend(v18, "setSecureRemote:", 1);
    objc_initWeak((id *)buf, self);
    v20 = MEMORY[0x24BDAC760];
    v21 = 3221225472;
    v22 = __59__HMDHome__fetchMetadataFromPrimaryResidentWithCompletion___block_invoke;
    v23 = &unk_24E79AFA0;
    objc_copyWeak(&v25, (id *)buf);
    v24 = v4;
    objc_msgSend(v18, "setResponseHandler:", &v20);
    -[HMDHome msgDispatcher](self, "msgDispatcher", v20, v21, v22, v23);
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v19, "sendMessage:completionHandler:", v18, 0);

    objc_destroyWeak(&v25);
    objc_destroyWeak((id *)buf);

  }
}

- (void)retrieveOperationalCertificatesForFabricID:(id)a3 commissionerNodeID:(id)a4 commissioneeNodeID:(id)a5 publicKey:(id)a6 completion:(id)a7
{
  id v12;
  void *v13;
  void *v14;
  void *v15;
  HMDRemoteDeviceMessageDestination *v16;
  void *v17;
  void *v18;
  HMDRemoteDeviceMessageDestination *v19;
  void *v20;
  void *v21;
  void *v22;
  HMDHome *v23;
  NSObject *v24;
  id v25;
  void *v26;
  void *v27;
  void *v28;
  HMDHome *v29;
  NSObject *v30;
  void *v31;
  id v32;
  id v33;
  id v34;
  id v35;
  _QWORD v36[4];
  id v37;
  id v38;
  id location;
  uint8_t buf[4];
  id v41;
  __int16 v42;
  void *v43;
  uint64_t v44;

  v44 = *MEMORY[0x24BDAC8D0];
  v33 = a3;
  v32 = a4;
  v34 = a5;
  v35 = a6;
  v12 = a7;
  -[HMDHome primaryResident](self, "primaryResident");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  v14 = v13;
  if (v13 && (objc_msgSend(v13, "device"), v15 = (void *)objc_claimAutoreleasedReturnValue(), v15, v15))
  {
    v16 = [HMDRemoteDeviceMessageDestination alloc];
    -[HMDHome uuid](self, "uuid");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v14, "device");
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    v19 = -[HMDRemoteDeviceMessageDestination initWithTarget:device:](v16, "initWithTarget:device:", v17, v18);

    objc_msgSend(MEMORY[0x24BDBCED8], "dictionary");
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v20, "setObject:forKeyedSubscript:", v34, CFSTR("HMDHomeCommissioningDeviceNodeIDMessageKey"));
    objc_msgSend(v20, "setObject:forKeyedSubscript:", v33, CFSTR("HMDHomeCommissioningFabricIDMessageKey"));
    objc_msgSend(v20, "setObject:forKeyedSubscript:", v33, CFSTR("HMDHomeCommissioningFabricIndexMessageKey"));
    objc_msgSend(v20, "setObject:forKeyedSubscript:", v35, CFSTR("HMDHomeCommissioningPublicKeyMessageKey"));
    if (isFeatureMatteriPhoneOnlyPairingControlEnabled())
      objc_msgSend(v20, "setObject:forKeyedSubscript:", v32, CFSTR("HMDHomeCommissioningCommissionerNodeIDMessageKey"));
    v21 = (void *)objc_msgSend(objc_alloc(MEMORY[0x24BE3F1D0]), "initWithName:destination:payload:", CFSTR("HMDHomeRequestCommissioningCertificatesMessage"), v19, v20);
    objc_msgSend(v21, "setRemote:", 1);
    objc_msgSend(v21, "setSecureRemote:", 1);
    objc_initWeak(&location, self);
    v36[0] = MEMORY[0x24BDAC760];
    v36[1] = 3221225472;
    v36[2] = __113__HMDHome_retrieveOperationalCertificatesForFabricID_commissionerNodeID_commissioneeNodeID_publicKey_completion___block_invoke;
    v36[3] = &unk_24E79AFA0;
    objc_copyWeak(&v38, &location);
    v37 = v12;
    v22 = (void *)MEMORY[0x227676638](objc_msgSend(v21, "setResponseHandler:", v36));
    v23 = self;
    HMFGetOSLogHandle();
    v24 = (id)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v24, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v25 = (id)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v21, "shortDescription");
      v26 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v41 = v25;
      v42 = 2112;
      v43 = v26;
      _os_log_impl(&dword_2218F0000, v24, OS_LOG_TYPE_INFO, "%{public}@Sending message %@ to fetch Matter operational certificates from the primary resident", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v22);
    -[HMDHome msgDispatcher](v23, "msgDispatcher");
    v27 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v27, "sendMessage:", v21);

    objc_destroyWeak(&v38);
    objc_destroyWeak(&location);

  }
  else
  {
    v28 = (void *)MEMORY[0x227676638]();
    v29 = self;
    HMFGetOSLogHandle();
    v30 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v31 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v41 = v31;
      _os_log_impl(&dword_2218F0000, v30, OS_LOG_TYPE_ERROR, "%{public}@Primary resident is not available", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v28);
    objc_msgSend(MEMORY[0x24BDD1540], "hmErrorWithCode:", 91);
    v19 = (HMDRemoteDeviceMessageDestination *)objc_claimAutoreleasedReturnValue();
    (*((void (**)(id, _QWORD, _QWORD, _QWORD, _QWORD, HMDRemoteDeviceMessageDestination *))v12 + 2))(v12, 0, 0, 0, 0, v19);
  }

}

- (void)residentDeviceManager:(id)a3 didUpdateResidentAvailable:(BOOL)a4
{
  NSObject *v6;
  _QWORD v7[5];
  BOOL v8;

  -[HMDHome workQueue](self, "workQueue", a3);
  v6 = objc_claimAutoreleasedReturnValue();
  v7[0] = MEMORY[0x24BDAC760];
  v7[1] = 3221225472;
  v7[2] = __60__HMDHome_residentDeviceManager_didUpdateResidentAvailable___block_invoke;
  v7[3] = &unk_24E7968C8;
  v7[4] = self;
  v8 = a4;
  dispatch_async(v6, v7);

}

- (void)residentDeviceManager:(id)a3 didUpdatePrimaryResident:(id)a4 previousPrimaryResident:(id)a5
{
  id v7;
  id v8;
  NSObject *v9;
  id v10;
  id v11;
  _QWORD block[5];
  id v13;
  id v14;

  v7 = a4;
  v8 = a5;
  -[HMDHome workQueue](self, "workQueue");
  v9 = objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x24BDAC760];
  block[1] = 3221225472;
  block[2] = __82__HMDHome_residentDeviceManager_didUpdatePrimaryResident_previousPrimaryResident___block_invoke;
  block[3] = &unk_24E79BBD0;
  block[4] = self;
  v13 = v7;
  v14 = v8;
  v10 = v8;
  v11 = v7;
  dispatch_async(v9, block);

}

- (void)residentDeviceManagerDidUpdateResidents:(id)a3
{
  NSObject *v4;
  _QWORD block[5];

  -[HMDHome workQueue](self, "workQueue", a3);
  v4 = objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x24BDAC760];
  block[1] = 3221225472;
  block[2] = __51__HMDHome_residentDeviceManagerDidUpdateResidents___block_invoke;
  block[3] = &unk_24E79C240;
  block[4] = self;
  dispatch_async(v4, block);

}

- (void)_handleCoalescedModifyNotifications
{
  NSObject *v3;
  void *v4;
  HMDHome *v5;
  NSObject *v6;
  void *v7;
  void (**v8)(void *, void *, void *, void *, void *, uint64_t);
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  _QWORD aBlock[5];
  uint8_t buf[4];
  void *v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  -[HMDHome workQueue](self, "workQueue");
  v3 = objc_claimAutoreleasedReturnValue();
  dispatch_assert_queue_V2(v3);

  v4 = (void *)MEMORY[0x227676638](-[HMDHome setModifyNotificationsCoalesceTimer:](self, "setModifyNotificationsCoalesceTimer:", 0));
  v5 = self;
  HMFGetOSLogHandle();
  v6 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543362;
    v18 = v7;
    _os_log_impl(&dword_2218F0000, v6, OS_LOG_TYPE_INFO, "%{public}@Modifying notification registrations with resident due to notification coalesce timer firing", buf, 0xCu);

  }
  objc_autoreleasePoolPop(v4);
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 3221225472;
  aBlock[2] = __46__HMDHome__handleCoalescedModifyNotifications__block_invoke;
  aBlock[3] = &unk_24E776EF8;
  aBlock[4] = v5;
  v8 = (void (**)(void *, void *, void *, void *, void *, uint64_t))_Block_copy(aBlock);
  -[HMDHome enableNotificationPayload](v5, "enableNotificationPayload");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHome pendingCharacteristicThresholdPayload](v5, "pendingCharacteristicThresholdPayload");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHome actionSetsEnableNotificationPayload](v5, "actionSetsEnableNotificationPayload");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHome matterAttributesEnableNotificationPayload](v5, "matterAttributesEnableNotificationPayload");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  v8[2](v8, v9, v10, v11, v12, 1);

  -[HMDHome disableNotificationPayload](v5, "disableNotificationPayload");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x24BDBCED8], "dictionary");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHome actionSetsDisableNotificationPayload](v5, "actionSetsDisableNotificationPayload");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  v8[2](v8, v13, v14, v15, 0, 0);

}

- (void)_handleDisableNotificationsTimerFired
{
  NSObject *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  HMDHome *v9;
  NSObject *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  void *v20;
  HMDHome *v21;
  NSObject *v22;
  void *v23;
  void *v24;
  void *v25;
  HMDHome *v26;
  NSObject *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  _QWORD v39[3];
  _QWORD v40[3];
  uint8_t buf[4];
  void *v42;
  __int16 v43;
  void *v44;
  __int16 v45;
  void *v46;
  uint64_t v47;

  v47 = *MEMORY[0x24BDAC8D0];
  -[HMDHome workQueue](self, "workQueue");
  v3 = objc_claimAutoreleasedReturnValue();
  dispatch_assert_queue_V2(v3);

  -[HMDHome notificationRegistrations](self, "notificationRegistrations");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = (void *)objc_msgSend(v4, "copy");

  -[HMDHome notificationDeregistrations](self, "notificationDeregistrations");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = (void *)objc_msgSend(v6, "copy");

  v8 = (void *)MEMORY[0x227676638]();
  v9 = self;
  HMFGetOSLogHandle();
  v10 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "shortDescription");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "shortDescription");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543874;
    v42 = v11;
    v43 = 2112;
    v44 = v12;
    v45 = 2112;
    v46 = v13;
    _os_log_impl(&dword_2218F0000, v10, OS_LOG_TYPE_INFO, "%{public}@Notification disable timer fired - registrations %@  deregistrations %@", buf, 0x20u);

  }
  objc_autoreleasePoolPop(v8);
  -[HMDHome setDisableNotificationTimer:](v9, "setDisableNotificationTimer:", 0);
  -[HMDHome notificationRegistrationsForAppleMediaAccessories](v9, "notificationRegistrationsForAppleMediaAccessories");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  v15 = objc_msgSend(v14, "count");

  -[HMDHome _applyNotificationDeregistrations](v9, "_applyNotificationDeregistrations");
  -[HMDHome notificationRegistrations](v9, "notificationRegistrations");
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  v17 = objc_msgSend(v16, "count");

  -[HMDHome notificationRegistrationsForAppleMediaAccessories](v9, "notificationRegistrationsForAppleMediaAccessories");
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  v19 = objc_msgSend(v18, "count");

  if (!v19 && v15)
  {
    v20 = (void *)MEMORY[0x227676638]();
    v21 = v9;
    HMFGetOSLogHandle();
    v22 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v22, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v23 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v42 = v23;
      _os_log_impl(&dword_2218F0000, v22, OS_LOG_TYPE_INFO, "%{public}@Modifying Apple Media notification registrations with devices due to HomeKit client no longer active", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v20);
    -[HMDHome mediaStateSubscriber](v21, "mediaStateSubscriber");
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v24, "unsubscribeForAppleMediaStateWithSubscriptionToken:", CFSTR("HMDHomeClientMediaStateRegistrationToken"));

  }
  if (!v17)
  {
    v25 = (void *)MEMORY[0x227676638]();
    v26 = v9;
    HMFGetOSLogHandle();
    v27 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v27, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v28 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v42 = v28;
      _os_log_impl(&dword_2218F0000, v27, OS_LOG_TYPE_INFO, "%{public}@Modifying notification registrations with resident due to HomeKit client no longer active", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v25);
    -[HMDHome _subscribeForHomeNotificationsFromRemoteGateway:](v26, "_subscribeForHomeNotificationsFromRemoteGateway:", 0);
    -[HMDHome _subscribeForHomeNotificationsOnDirectTransports:](v26, 0);
    objc_msgSend(MEMORY[0x24BDBCE60], "date");
    v29 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHome setNotificationsUpdatedTime:](v26, "setNotificationsUpdatedTime:", v29);

    -[HMDHome homeManager](v26, "homeManager");
    v30 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v30, "chipDataSource");
    v31 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v31, "updateNotificationsEnabled:forHome:keepAliveOnly:", 0, v26, 0);

    objc_msgSend(MEMORY[0x24BDD16E0], "numberWithBool:", 0, CFSTR("kCharacteristicNotificationEnableKey"));
    v32 = (void *)objc_claimAutoreleasedReturnValue();
    v40[0] = v32;
    v39[1] = *MEMORY[0x24BDD5CF0];
    objc_msgSend(MEMORY[0x24BDD16E0], "numberWithBool:", 0);
    v33 = (void *)objc_claimAutoreleasedReturnValue();
    v40[1] = v33;
    v39[2] = CFSTR("kCharacteristicNotificationEnableTime");
    -[HMDHome notificationsUpdatedTime](v26, "notificationsUpdatedTime");
    v34 = (void *)objc_claimAutoreleasedReturnValue();
    v40[2] = v34;
    objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v40, v39, 3);
    v35 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(MEMORY[0x24BE3F1B0], "entitledMessageWithName:messagePayload:", *MEMORY[0x24BDD7C38], v35);
    v36 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHome msgDispatcher](v26, "msgDispatcher");
    v37 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHome uuid](v26, "uuid");
    v38 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v37, "sendMessage:target:", v36, v38);

    logAndPostNotification(CFSTR("HMDHomeDidDisableCharacteristicNotifyEventNotification"), v26, 0);
  }

}

- (void)notifyClientsOfReachabilityUpdateForAccessory:(id)a3
{
  id v4;
  NSObject *v5;
  id v6;
  _QWORD v7[4];
  id v8;
  HMDHome *v9;

  v4 = a3;
  -[HMDHome workQueue](self, "workQueue");
  v5 = objc_claimAutoreleasedReturnValue();
  v7[0] = MEMORY[0x24BDAC760];
  v7[1] = 3221225472;
  v7[2] = __57__HMDHome_notifyClientsOfReachabilityUpdateForAccessory___block_invoke;
  v7[3] = &unk_24E79C268;
  v8 = v4;
  v9 = self;
  v6 = v4;
  dispatch_async(v5, v7);

}

- (void)_handleAccessoryReachabilityUpdatesTimerFired
{
  void *v3;
  HMDHome *v4;
  void *v5;
  NSObject *v6;
  _BOOL4 v7;
  void *v8;
  uint64_t v9;
  uint64_t i;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  id v19;
  void *v20;
  id v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t j;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  HMDHomeManagerXPCMessageSendPolicy *v37;
  HMDHomeManagerXPCMessageSendPolicy *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t k;
  void *v43;
  void *v44;
  void *v45;
  void *v46;
  void *v47;
  void *v48;
  void *v49;
  HMDHomeManagerXPCMessageSendPolicy *v50;
  void *v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t m;
  uint64_t v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  uint64_t v61;
  id obj;
  id v63;
  id v64;
  id v65;
  id v66;
  void *v67;
  void *v68;
  HMDHome *v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  _BYTE v86[128];
  const __CFString *v87;
  void *v88;
  _BYTE v89[128];
  const __CFString *v90;
  void *v91;
  _BYTE v92[128];
  const __CFString *v93;
  void *v94;
  uint8_t buf[4];
  void *v96;
  __int16 v97;
  uint64_t v98;
  uint64_t v99;

  v99 = *MEMORY[0x24BDAC8D0];
  os_unfair_recursive_lock_lock_with_options();
  -[NSMutableSet allObjects](self->_reachabilityUpdatedAccessories, "allObjects");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  -[NSMutableSet removeAllObjects](self->_reachabilityUpdatedAccessories, "removeAllObjects");
  os_unfair_recursive_lock_unlock();
  v4 = self;
  v66 = v3;
  v58 = objc_msgSend(v66, "count");
  v5 = (void *)MEMORY[0x227676638]();
  v69 = v4;
  HMFGetOSLogHandle();
  v6 = objc_claimAutoreleasedReturnValue();
  v7 = os_log_type_enabled(v6, OS_LOG_TYPE_INFO);
  if (v58)
  {
    if (v7)
    {
      HMFGetLogIdentifier();
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v96 = v8;
      v97 = 2048;
      v98 = v58;
      _os_log_impl(&dword_2218F0000, v6, OS_LOG_TYPE_INFO, "%{public}@Sending accessory reachability updates - number of entries %lu", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v5);
    objc_msgSend(MEMORY[0x24BDBCED8], "dictionaryWithCapacity:", v58);
    v68 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDBCED8], "dictionaryWithCapacity:", v58);
    v60 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDBCEB8], "arrayWithCapacity:", v58);
    v67 = (void *)objc_claimAutoreleasedReturnValue();
    v84 = 0u;
    v85 = 0u;
    v82 = 0u;
    v83 = 0u;
    -[HMDHome accessories](v69, "accessories");
    obj = (id)objc_claimAutoreleasedReturnValue();
    v9 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v82, buf, 16);
    if (v9)
    {
      v63 = *(id *)v83;
      v61 = *MEMORY[0x24BDD4D60];
      v59 = *MEMORY[0x24BDD50D0];
      do
      {
        for (i = 0; i != v9; ++i)
        {
          if (*(id *)v83 != v63)
            objc_enumerationMutation(obj);
          v11 = *(void **)(*((_QWORD *)&v82 + 1) + 8 * i);
          objc_msgSend(v11, "uuid", v58);
          v12 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v12, "UUIDString");
          v13 = (void *)objc_claimAutoreleasedReturnValue();

          if (objc_msgSend(v66, "containsObject:", v13))
          {
            objc_msgSend(MEMORY[0x24BDD16E0], "numberWithBool:", objc_msgSend(v11, "isReachableForXPCClients"));
            v14 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v11, "messageSendPolicy");
            v15 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v68, "hmf_mutableDictionaryForKey:", v15);
            v16 = (void *)objc_claimAutoreleasedReturnValue();
            if (!v16)
            {
              objc_msgSend(MEMORY[0x24BDBCED8], "dictionaryWithCapacity:", v58);
              v16 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v68, "setObject:forKey:", v16, v15);
            }
            objc_msgSend(MEMORY[0x24BDBCED8], "dictionaryWithCapacity:", 3);
            v17 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v17, "setObject:forKeyedSubscript:", v14, CFSTR("kAccessoryIsReachableKey"));
            objc_msgSend(MEMORY[0x24BDD16E0], "numberWithInteger:", objc_msgSend(v11, "reachableTransports"));
            v18 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v17, "setObject:forKeyedSubscript:", v18, v61);

            v19 = v11;
            objc_opt_class();
            if ((objc_opt_isKindOfClass() & 1) != 0)
              v20 = v19;
            else
              v20 = 0;
            v21 = v20;

            if (v21)
            {
              objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedInteger:", objc_msgSend(v21, "suspendedState"));
              v22 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v17, "setObject:forKeyedSubscript:", v22, v59);

            }
            v23 = (void *)objc_msgSend(v17, "copy");
            objc_msgSend(v16, "setObject:forKeyedSubscript:", v23, v13);

            if ((objc_msgSend(v15, "entitlements") & 4) == 0)
            {
              objc_msgSend(v60, "hmf_mutableDictionaryForKey:", v15);
              v24 = (void *)objc_claimAutoreleasedReturnValue();
              if (!v24)
              {
                objc_msgSend(MEMORY[0x24BDBCED8], "dictionaryWithCapacity:", v58);
                v24 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v60, "setObject:forKey:", v24, v15);
              }
              v93 = CFSTR("kAccessoryIsReachableKey");
              v94 = v14;
              objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", &v94, &v93, 1);
              v25 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v24, "setObject:forKeyedSubscript:", v25, v13);

            }
          }

        }
        v9 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v82, buf, 16);
      }
      while (v9);
    }

    v80 = 0u;
    v81 = 0u;
    v78 = 0u;
    v79 = 0u;
    objc_msgSend(v68, "allKeys");
    v64 = (id)objc_claimAutoreleasedReturnValue();
    v26 = objc_msgSend(v64, "countByEnumeratingWithState:objects:count:", &v78, v92, 16);
    if (v26)
    {
      v27 = *(_QWORD *)v79;
      v28 = *MEMORY[0x24BDD4AF0];
      do
      {
        for (j = 0; j != v26; ++j)
        {
          if (*(_QWORD *)v79 != v27)
            objc_enumerationMutation(v64);
          v30 = *(void **)(*((_QWORD *)&v78 + 1) + 8 * j);
          objc_msgSend(v68, "hmf_mutableDictionaryForKey:", v30, v58);
          v31 = (void *)objc_claimAutoreleasedReturnValue();
          if (objc_msgSend(v31, "count"))
          {
            v32 = (void *)MEMORY[0x24BE3F1D0];
            -[HMDHome messageDestination](v69, "messageDestination");
            v33 = (void *)objc_claimAutoreleasedReturnValue();
            v90 = CFSTR("kAccessoriesListKey");
            v34 = (void *)objc_msgSend(v31, "copy");
            v91 = v34;
            objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", &v91, &v90, 1);
            v35 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v32, "messageWithName:destination:payload:", v28, v33, v35);
            v36 = (void *)objc_claimAutoreleasedReturnValue();

            if ((objc_msgSend(v30, "entitlements") & 4) != 0)
              v37 = -[HMDHomeManagerXPCMessageSendPolicy initWithEntitlements:options:active:]([HMDHomeManagerXPCMessageSendPolicy alloc], "initWithEntitlements:options:active:", objc_msgSend(v30, "entitlements"), objc_msgSend(v30, "options"), 1);
            else
              v37 = -[HMDHomeManagerXPCMessageSendPolicy initWithEntitlements:options:active:]([HMDHomeManagerXPCMessageSendPolicy alloc], "initWithEntitlements:options:active:", objc_msgSend(v30, "entitlements") | 4, objc_msgSend(v30, "options"), 1);
            v38 = v37;
            objc_msgSend(v36, "setSendPolicy:", v37);

            objc_msgSend(v67, "addObject:", v36);
          }

        }
        v26 = objc_msgSend(v64, "countByEnumeratingWithState:objects:count:", &v78, v92, 16);
      }
      while (v26);
    }

    v76 = 0u;
    v77 = 0u;
    v74 = 0u;
    v75 = 0u;
    objc_msgSend(v60, "allKeys");
    v65 = (id)objc_claimAutoreleasedReturnValue();
    v39 = objc_msgSend(v65, "countByEnumeratingWithState:objects:count:", &v74, v89, 16);
    if (v39)
    {
      v40 = *(_QWORD *)v75;
      v41 = *MEMORY[0x24BDD4AF0];
      do
      {
        for (k = 0; k != v39; ++k)
        {
          if (*(_QWORD *)v75 != v40)
            objc_enumerationMutation(v65);
          v43 = *(void **)(*((_QWORD *)&v74 + 1) + 8 * k);
          objc_msgSend(v68, "hmf_mutableDictionaryForKey:", v43, v58);
          v44 = (void *)objc_claimAutoreleasedReturnValue();
          if (objc_msgSend(v44, "count"))
          {
            v45 = (void *)MEMORY[0x24BE3F1D0];
            -[HMDHome messageDestination](v69, "messageDestination");
            v46 = (void *)objc_claimAutoreleasedReturnValue();
            v87 = CFSTR("kAccessoriesListKey");
            v47 = (void *)objc_msgSend(v44, "copy");
            v88 = v47;
            objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", &v88, &v87, 1);
            v48 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v45, "messageWithName:destination:payload:", v41, v46, v48);
            v49 = (void *)objc_claimAutoreleasedReturnValue();

            objc_msgSend(v49, "setRequiresNoSPIEntitlement:", 1);
            v50 = -[HMDHomeManagerXPCMessageSendPolicy initWithEntitlements:options:active:]([HMDHomeManagerXPCMessageSendPolicy alloc], "initWithEntitlements:options:active:", objc_msgSend(v43, "entitlements"), objc_msgSend(v43, "options"), 1);
            objc_msgSend(v49, "setSendPolicy:", v50);
            objc_msgSend(v67, "addObject:", v49);

          }
        }
        v39 = objc_msgSend(v65, "countByEnumeratingWithState:objects:count:", &v74, v89, 16);
      }
      while (v39);
    }

    v51 = (void *)objc_msgSend(v67, "copy");
  }
  else
  {
    if (v7)
    {
      HMFGetLogIdentifier();
      v52 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v96 = v52;
      _os_log_impl(&dword_2218F0000, v6, OS_LOG_TYPE_INFO, "%{public}@Reachability update timer fired but no entries", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v5);
    v51 = (void *)MEMORY[0x24BDBD1A8];
  }

  v70 = 0u;
  v71 = 0u;
  v72 = 0u;
  v73 = 0u;
  v53 = objc_msgSend(v51, "countByEnumeratingWithState:objects:count:", &v70, v86, 16);
  if (v53)
  {
    v54 = *(_QWORD *)v71;
    do
    {
      for (m = 0; m != v53; ++m)
      {
        if (*(_QWORD *)v71 != v54)
          objc_enumerationMutation(v51);
        v56 = *(_QWORD *)(*((_QWORD *)&v70 + 1) + 8 * m);
        -[HMDHome msgDispatcher](v69, "msgDispatcher", v58);
        v57 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v57, "sendMessage:", v56);

      }
      v53 = objc_msgSend(v51, "countByEnumeratingWithState:objects:count:", &v70, v86, 16);
    }
    while (v53);
  }

}

- (void)timerDidFire:(id)a3
{
  HMFTimer *v4;
  NSObject *v5;
  HMFTimer *v6;
  HMFTimer *v7;
  HMFTimer *v8;
  HMFTimer *v9;
  void *v10;
  HMDHome *v11;
  NSObject *v12;
  void *v13;
  int v14;
  void *v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  v4 = (HMFTimer *)a3;
  -[HMDHome workQueue](self, "workQueue");
  v5 = objc_claimAutoreleasedReturnValue();
  dispatch_assert_queue_V2(v5);

  -[HMDHome modifyNotificationsCoalesceTimer](self, "modifyNotificationsCoalesceTimer");
  v6 = (HMFTimer *)objc_claimAutoreleasedReturnValue();

  if (v6 == v4)
  {
    -[HMDHome _handleCoalescedModifyNotifications](self, "_handleCoalescedModifyNotifications");
  }
  else
  {
    -[HMDHome disableNotificationTimer](self, "disableNotificationTimer");
    v7 = (HMFTimer *)objc_claimAutoreleasedReturnValue();

    if (v7 == v4)
    {
      -[HMDHome _handleDisableNotificationsTimerFired](self, "_handleDisableNotificationsTimerFired");
    }
    else
    {
      -[HMDHome reachabilityNotificationTimer](self, "reachabilityNotificationTimer");
      v8 = (HMFTimer *)objc_claimAutoreleasedReturnValue();

      if (v8 == v4)
      {
        -[HMDHome _handleRemoteReachabilityNotificationTimerFired](self, "_handleRemoteReachabilityNotificationTimerFired");
      }
      else
      {
        -[HMDHome pendingResponsesTimer](self, "pendingResponsesTimer");
        v9 = (HMFTimer *)objc_claimAutoreleasedReturnValue();

        if (v9 == v4)
        {
          -[HMDHome _handlePendingResponsesTimerFired:](self, "_handlePendingResponsesTimerFired:", 0);
        }
        else if (self->_homeLocationTimer == v4)
        {
          v10 = (void *)MEMORY[0x227676638]();
          v11 = self;
          HMFGetOSLogHandle();
          v12 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
          {
            HMFGetLogIdentifier();
            v13 = (void *)objc_claimAutoreleasedReturnValue();
            v14 = 138543362;
            v15 = v13;
            _os_log_impl(&dword_2218F0000, v12, OS_LOG_TYPE_INFO, "%{public}@Evaluating home location", (uint8_t *)&v14, 0xCu);

          }
          objc_autoreleasePoolPop(v10);
          -[HMDHome updateHomeLocation](v11, "updateHomeLocation");
        }
        else if (self->_accessoryReachabilityUpdatesTimer == v4)
        {
          -[HMDHome _handleAccessoryReachabilityUpdatesTimerFired](self, "_handleAccessoryReachabilityUpdatesTimerFired");
        }
      }
    }
  }

}

- (void)addUnconfiguredResidentDevice:(id)a3
{
  id v4;
  NSObject *v5;
  id v6;
  _QWORD v7[5];
  id v8;

  v4 = a3;
  -[HMDHome workQueue](self, "workQueue");
  v5 = objc_claimAutoreleasedReturnValue();
  v7[0] = MEMORY[0x24BDAC760];
  v7[1] = 3221225472;
  v7[2] = __41__HMDHome_addUnconfiguredResidentDevice___block_invoke;
  v7[3] = &unk_24E79C268;
  v7[4] = self;
  v8 = v4;
  v6 = v4;
  dispatch_async(v5, v7);

}

- (void)removeUnconfiguredResidentDeviceWithUserID:(id)a3
{
  id v4;
  NSObject *v5;
  id v6;
  _QWORD v7[5];
  id v8;

  v4 = a3;
  -[HMDHome workQueue](self, "workQueue");
  v5 = objc_claimAutoreleasedReturnValue();
  v7[0] = MEMORY[0x24BDAC760];
  v7[1] = 3221225472;
  v7[2] = __54__HMDHome_removeUnconfiguredResidentDeviceWithUserID___block_invoke;
  v7[3] = &unk_24E79C268;
  v7[4] = self;
  v8 = v4;
  v6 = v4;
  dispatch_async(v5, v7);

}

- (void)handleAccountHandlesUpdated:(id)a3
{
  id v4;
  NSObject *v5;
  id v6;
  _QWORD v7[4];
  id v8;
  HMDHome *v9;

  v4 = a3;
  -[HMDHome workQueue](self, "workQueue");
  v5 = objc_claimAutoreleasedReturnValue();
  v7[0] = MEMORY[0x24BDAC760];
  v7[1] = 3221225472;
  v7[2] = __39__HMDHome_handleAccountHandlesUpdated___block_invoke;
  v7[3] = &unk_24E79C268;
  v8 = v4;
  v9 = self;
  v6 = v4;
  dispatch_async(v5, v7);

}

- (void)handleCurrentAccountMergeIdentifierUpdated:(id)a3
{
  id v4;
  NSObject *v5;
  id v6;
  _QWORD v7[4];
  id v8;
  HMDHome *v9;

  v4 = a3;
  -[HMDHome workQueue](self, "workQueue");
  v5 = objc_claimAutoreleasedReturnValue();
  v7[0] = MEMORY[0x24BDAC760];
  v7[1] = 3221225472;
  v7[2] = __54__HMDHome_handleCurrentAccountMergeIdentifierUpdated___block_invoke;
  v7[3] = &unk_24E79C268;
  v8 = v4;
  v9 = self;
  v6 = v4;
  dispatch_async(v5, v7);

}

- (void)handleActiveAccountChanged:(id)a3
{
  void *v4;
  void *v5;
  void *v6;
  id v7;
  NSObject *v8;
  id v9;
  _QWORD v10[5];
  id v11;

  objc_msgSend(a3, "userInfo");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "objectForKeyedSubscript:", CFSTR("HMDAccountNotificationKey"));
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v6 = v5;
  else
    v6 = 0;
  v7 = v6;

  -[HMDHome workQueue](self, "workQueue");
  v8 = objc_claimAutoreleasedReturnValue();
  v10[0] = MEMORY[0x24BDAC760];
  v10[1] = 3221225472;
  v10[2] = __38__HMDHome_handleActiveAccountChanged___block_invoke;
  v10[3] = &unk_24E79C268;
  v10[4] = self;
  v11 = v7;
  v9 = v7;
  dispatch_async(v8, v10);

}

- (void)handleDidReceiveIDSMessageWithNoListener:(id)a3
{
  id v4;
  NSObject *v5;
  id v6;
  _QWORD v7[4];
  id v8;
  HMDHome *v9;

  v4 = a3;
  -[HMDHome workQueue](self, "workQueue");
  v5 = objc_claimAutoreleasedReturnValue();
  v7[0] = MEMORY[0x24BDAC760];
  v7[1] = 3221225472;
  v7[2] = __52__HMDHome_handleDidReceiveIDSMessageWithNoListener___block_invoke;
  v7[3] = &unk_24E79C268;
  v8 = v4;
  v9 = self;
  v6 = v4;
  dispatch_async(v5, v7);

}

- (void)_handleDidReceiveIDSMessageWithNoListenerFromAddress:(id)a3
{
  __CFString *v4;
  int v5;
  __CFString *v6;
  __CFString *v7;
  void *v8;
  HMDHome *v9;
  NSObject *v10;
  void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t i;
  void *v17;
  void *v18;
  int v19;
  void *v20;
  HMDHome *v21;
  NSObject *v22;
  void *v23;
  void *v24;
  void *v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint8_t v30[128];
  uint8_t buf[4];
  void *v32;
  __int16 v33;
  __CFString *v34;
  uint64_t v35;

  v35 = *MEMORY[0x24BDAC8D0];
  v4 = (__CFString *)a3;
  v5 = shouldLogPrivateInformation();
  v6 = CFSTR("...");
  if (v5)
    v6 = v4;
  v7 = v6;
  if (-[HMDHome remoteAccessIsEnabled](self, "remoteAccessIsEnabled"))
  {
    v8 = (void *)MEMORY[0x227676638]();
    v9 = self;
    HMFGetOSLogHandle();
    v10 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v32 = v11;
      v33 = 2112;
      v34 = v7;
      _os_log_impl(&dword_2218F0000, v10, OS_LOG_TYPE_INFO, "%{public}@Received IDS message from %@ but home has remote access enabled, ignoring notification", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v8);
  }
  else
  {
    v28 = 0u;
    v29 = 0u;
    v26 = 0u;
    v27 = 0u;
    -[HMDHome _residentUsers](self, "_residentUsers", 0);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    v13 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v26, v30, 16);
    if (v13)
    {
      v14 = v13;
      v15 = *(_QWORD *)v27;
      while (2)
      {
        for (i = 0; i != v14; ++i)
        {
          if (*(_QWORD *)v27 != v15)
            objc_enumerationMutation(v12);
          v17 = *(void **)(*((_QWORD *)&v26 + 1) + 8 * i);
          if (objc_msgSend(v17, "configurationState") == 2)
          {
            objc_msgSend(v17, "userID");
            v18 = (void *)objc_claimAutoreleasedReturnValue();
            v19 = objc_msgSend(v18, "isEqualToString:", v4);

            if (v19)
            {
              v20 = (void *)MEMORY[0x227676638]();
              v21 = self;
              HMFGetOSLogHandle();
              v22 = objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v22, OS_LOG_TYPE_INFO))
              {
                HMFGetLogIdentifier();
                v23 = (void *)objc_claimAutoreleasedReturnValue();
                *(_DWORD *)buf = 138543618;
                v32 = v23;
                v33 = 2112;
                v34 = v7;
                _os_log_impl(&dword_2218F0000, v22, OS_LOG_TYPE_INFO, "%{public}@Home does not have remote access enabled but we received a message from resident at %@, requesting electing a remote peer", buf, 0x16u);

              }
              objc_autoreleasePoolPop(v20);
              -[HMDHome homeManager](v21, "homeManager");
              v24 = (void *)objc_claimAutoreleasedReturnValue();
              -[HMDHome uuid](v21, "uuid");
              v25 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v24, "electRemoteAccessPeerForHome:", v25);

              goto LABEL_20;
            }
          }
        }
        v14 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v26, v30, 16);
        if (v14)
          continue;
        break;
      }
    }
LABEL_20:

  }
}

- (void)remoteAccessHealthMonitorTimerDidFire
{
  NSObject *v3;
  _QWORD block[5];

  if (isiOSDevice())
  {
    -[HMDHome workQueue](self, "workQueue");
    v3 = objc_claimAutoreleasedReturnValue();
    block[0] = MEMORY[0x24BDAC760];
    block[1] = 3221225472;
    block[2] = __48__HMDHome_remoteAccessHealthMonitorTimerDidFire__block_invoke;
    block[3] = &unk_24E79C240;
    block[4] = self;
    dispatch_async(v3, block);

  }
}

- (void)_remoteAccessHealthMonitorTimerDidFire
{
  void *v3;
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  char v10;
  void *v11;
  HMDHome *v12;
  NSObject *v13;
  id v14;
  void *v15;
  NSObject *v16;
  id v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  __int128 v24;
  id obj;
  uint64_t v26;
  _QWORD aBlock[5];
  id v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  id location;
  uint8_t buf[4];
  id v35;
  __int16 v36;
  void *v37;
  _BYTE v38[128];
  uint64_t v39;

  v39 = *MEMORY[0x24BDAC8D0];
  if (!-[HMDHome remoteAccessIsEnabled](self, "remoteAccessIsEnabled"))
  {
    -[HMDHome _residentUsers](self, "_residentUsers");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_initWeak(&location, self);
    v31 = 0u;
    v32 = 0u;
    v29 = 0u;
    v30 = 0u;
    obj = v3;
    v4 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v29, v38, 16);
    if (v4)
    {
      v26 = *(_QWORD *)v30;
      *(_QWORD *)&v5 = 138543618;
      v24 = v5;
      do
      {
        v6 = 0;
        do
        {
          if (*(_QWORD *)v30 != v26)
            objc_enumerationMutation(obj);
          v7 = *(void **)(*((_QWORD *)&v29 + 1) + 8 * v6);
          -[HMDHome heartbeatPingMessagesQueuedWithServer](self, "heartbeatPingMessagesQueuedWithServer", v24);
          v8 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v7, "userID");
          v9 = (void *)objc_claimAutoreleasedReturnValue();
          v10 = objc_msgSend(v8, "containsObject:", v9);

          v11 = (void *)MEMORY[0x227676638]();
          v12 = self;
          if ((v10 & 1) != 0)
          {
            HMFGetOSLogHandle();
            v13 = (id)objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
            {
              HMFGetLogIdentifier();
              v14 = (id)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v7, "userID");
              v15 = (void *)objc_claimAutoreleasedReturnValue();
              *(_DWORD *)buf = v24;
              v35 = v14;
              v36 = 2112;
              v37 = v15;
              _os_log_impl(&dword_2218F0000, v13, OS_LOG_TYPE_INFO, "%{public}@Remote access health monitor fired, but we already have a ping queued with server to %@", buf, 0x16u);

            }
            objc_autoreleasePoolPop(v11);
          }
          else
          {
            HMFGetOSLogHandle();
            v16 = (id)objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
            {
              HMFGetLogIdentifier();
              v17 = (id)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v7, "userID");
              v18 = (void *)objc_claimAutoreleasedReturnValue();
              *(_DWORD *)buf = v24;
              v35 = v17;
              v36 = 2112;
              v37 = v18;
              _os_log_impl(&dword_2218F0000, v16, OS_LOG_TYPE_INFO, "%{public}@Remote access health monitor fired, sending ping elect message to %@", buf, 0x16u);

            }
            objc_autoreleasePoolPop(v11);
            aBlock[0] = MEMORY[0x24BDAC760];
            aBlock[1] = 3221225472;
            aBlock[2] = __49__HMDHome__remoteAccessHealthMonitorTimerDidFire__block_invoke;
            aBlock[3] = &unk_24E776F20;
            objc_copyWeak(&v28, &location);
            aBlock[4] = v7;
            v19 = _Block_copy(aBlock);
            -[HMDHome homeManager](v12, "homeManager");
            v20 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v7, "userID");
            v21 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v7, "userID");
            v22 = (void *)objc_claimAutoreleasedReturnValue();
            -[HMDHome workQueue](v12, "workQueue");
            v23 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v20, "electDeviceForUser:destination:deviceCapabilities:responseTimeout:queue:completionHandler:", v21, v22, 0, v23, v19, 600.0);

            objc_destroyWeak(&v28);
          }
          ++v6;
        }
        while (v4 != v6);
        v4 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v29, v38, 16);
      }
      while (v4);
    }

    objc_destroyWeak(&location);
  }
}

- (void)_handleResponseForElectMessageToResident:(id)a3 error:(id)a4
{
  id v6;
  id v7;
  void *v8;
  HMDHome *v9;
  NSObject *v10;
  void *v11;
  void *v12;
  const char *v13;
  void *v14;
  void *v15;
  HMDHome *v16;
  NSObject *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  HMDHome *v23;
  NSObject *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  HMDHome *v29;
  NSObject *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  uint64_t v35;
  int v36;
  void *v37;
  __int16 v38;
  void *v39;
  __int16 v40;
  id v41;
  uint64_t v42;

  v42 = *MEMORY[0x24BDAC8D0];
  v6 = a3;
  v7 = a4;
  if (-[HMDHome remoteAccessIsEnabled](self, "remoteAccessIsEnabled"))
  {
    v8 = (void *)MEMORY[0x227676638]();
    v9 = self;
    HMFGetOSLogHandle();
    v10 = objc_claimAutoreleasedReturnValue();
    if (!os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
    {
LABEL_5:

      objc_autoreleasePoolPop(v8);
      goto LABEL_19;
    }
    HMFGetLogIdentifier();
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "userID");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    v36 = 138543618;
    v37 = v11;
    v38 = 2112;
    v39 = v12;
    v13 = "%{public}@Received response for ping message to resident %@. Remote access is already setup, dropping response";
LABEL_4:
    _os_log_impl(&dword_2218F0000, v10, OS_LOG_TYPE_INFO, v13, (uint8_t *)&v36, 0x16u);

    goto LABEL_5;
  }
  if (v7)
  {
    objc_msgSend(v7, "domain");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v14, "isEqualToString:", *MEMORY[0x24BE4F9D0]))
    {
      if (objc_msgSend(v7, "code") == 16)
      {

LABEL_21:
        v8 = (void *)MEMORY[0x227676638]();
        v9 = self;
        HMFGetOSLogHandle();
        v10 = objc_claimAutoreleasedReturnValue();
        if (!os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
          goto LABEL_5;
        HMFGetLogIdentifier();
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v6, "userID");
        v12 = (void *)objc_claimAutoreleasedReturnValue();
        v36 = 138543618;
        v37 = v11;
        v38 = 2112;
        v39 = v12;
        v13 = "%{public}@Failed to ping resident %@, will try again at next heartbeat";
        goto LABEL_4;
      }
      v35 = objc_msgSend(v7, "code");

      if (v35 == 23)
        goto LABEL_21;
    }
    else
    {

    }
    v28 = (void *)MEMORY[0x227676638]();
    v29 = self;
    HMFGetOSLogHandle();
    v30 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v30, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v31 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v6, "userID");
      v32 = (void *)objc_claimAutoreleasedReturnValue();
      v36 = 138543874;
      v37 = v31;
      v38 = 2112;
      v39 = v32;
      v40 = 2112;
      v41 = v7;
      _os_log_impl(&dword_2218F0000, v30, OS_LOG_TYPE_INFO, "%{public}@Failed to ping resident %@, but error %@ is not specific IDS error, will not re-try at next heartbeat", (uint8_t *)&v36, 0x20u);

    }
    objc_autoreleasePoolPop(v28);
    -[HMDHome heartbeatPingMessagesQueuedWithServer](v29, "heartbeatPingMessagesQueuedWithServer");
    v33 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "userID");
    v34 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v33, "addObject:", v34);

  }
  else
  {
    v15 = (void *)MEMORY[0x227676638]();
    v16 = self;
    HMFGetOSLogHandle();
    v17 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v6, "userID");
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      v36 = 138543618;
      v37 = v18;
      v38 = 2112;
      v39 = v19;
      _os_log_impl(&dword_2218F0000, v17, OS_LOG_TYPE_INFO, "%{public}@Successfully sent ping message to resident %@, remembering queued message", (uint8_t *)&v36, 0x16u);

    }
    objc_autoreleasePoolPop(v15);
    -[HMDHome heartbeatPingMessagesQueuedWithServer](v16, "heartbeatPingMessagesQueuedWithServer");
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "userID");
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v20, "addObject:", v21);

    v22 = (void *)MEMORY[0x227676638]();
    v23 = v16;
    HMFGetOSLogHandle();
    v24 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v24, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v25 = (void *)objc_claimAutoreleasedReturnValue();
      v36 = 138543362;
      v37 = v25;
      _os_log_impl(&dword_2218F0000, v24, OS_LOG_TYPE_INFO, "%{public}@Home does not have remote access enabled, requesting electing a remote peer", (uint8_t *)&v36, 0xCu);

    }
    objc_autoreleasePoolPop(v22);
    -[HMDHome homeManager](v23, "homeManager");
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHome uuid](v23, "uuid");
    v27 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v26, "electRemoteAccessPeerForHome:", v27);

  }
LABEL_19:

}

- (void)doFullImportWithCompletion:(id)a3
{
  id v4;
  void *v5;
  id v6;

  v4 = a3;
  +[HMDCoreDataCloudTransform sharedInstance](HMDCoreDataCloudTransform, "sharedInstance");
  v6 = (id)objc_claimAutoreleasedReturnValue();
  -[HMDHome uuid](self, "uuid");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "runCompleteMergeTransformForHomeWithModelID:completion:", v5, v4);

}

- (id)dumpActionSetDescription
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  void *v17;
  void *v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  _BYTE v34[128];
  _BYTE v35[128];
  uint64_t v36;

  v36 = *MEMORY[0x24BDAC8D0];
  -[HMDHome actionSets](self, "actionSets");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = (void *)objc_msgSend(v3, "copy");

  objc_msgSend(MEMORY[0x24BDBCEB8], "arrayWithCapacity:", objc_msgSend(v4, "count"));
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = (void *)MEMORY[0x24BDD17C8];
  -[HMDHome name](self, "name");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHome uuid](self, "uuid");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "UUIDString");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "stringWithFormat:", CFSTR("Home %@/%@:"), v7, v9);
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v5, "addObject:", v10);
  v32 = 0u;
  v33 = 0u;
  v30 = 0u;
  v31 = 0u;
  v11 = v4;
  v12 = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v30, v35, 16);
  if (v12)
  {
    v13 = v12;
    v14 = *(_QWORD *)v31;
    do
    {
      v15 = 0;
      do
      {
        if (*(_QWORD *)v31 != v14)
          objc_enumerationMutation(v11);
        objc_msgSend(*(id *)(*((_QWORD *)&v30 + 1) + 8 * v15), "dumpState");
        v16 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v5, "addObject:", v16);

        ++v15;
      }
      while (v13 != v15);
      v13 = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v30, v35, 16);
    }
    while (v13);
  }

  -[HMDHome triggerOwnedActionSets](self, "triggerOwnedActionSets");
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  v18 = (void *)objc_msgSend(v17, "copy");

  v28 = 0u;
  v29 = 0u;
  v26 = 0u;
  v27 = 0u;
  v19 = v18;
  v20 = objc_msgSend(v19, "countByEnumeratingWithState:objects:count:", &v26, v34, 16);
  if (v20)
  {
    v21 = v20;
    v22 = *(_QWORD *)v27;
    do
    {
      v23 = 0;
      do
      {
        if (*(_QWORD *)v27 != v22)
          objc_enumerationMutation(v19);
        objc_msgSend(*(id *)(*((_QWORD *)&v26 + 1) + 8 * v23), "dumpState");
        v24 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v5, "addObject:", v24);

        ++v23;
      }
      while (v21 != v23);
      v21 = objc_msgSend(v19, "countByEnumeratingWithState:objects:count:", &v26, v34, 16);
    }
    while (v21);
  }

  return v5;
}

- (id)dumpCharacteristicNotificationRegistry
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;

  v3 = (void *)MEMORY[0x24BDD16A8];
  -[HMDHome name](self, "name");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHome uuid](self, "uuid");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "UUIDString");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "stringWithFormat:", CFSTR("Home %@/%@:"), v4, v6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  -[HMDHome notificationRegistry](self, "notificationRegistry");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "shortDescription");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "appendString:", v9);

  return v7;
}

- (id)dumpMediaSessionDescription
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _BYTE v22[128];
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  v3 = (void *)MEMORY[0x24BDBCEB8];
  -[HMDHome mediaSessionStates](self, "mediaSessionStates");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "arrayWithCapacity:", objc_msgSend(v4, "count"));
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  v6 = (void *)MEMORY[0x24BDD16A8];
  -[HMDHome name](self, "name");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHome uuid](self, "uuid");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "UUIDString");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "stringWithFormat:", CFSTR("Home %@/%@:"), v7, v9);
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v5, "addObject:", v10);
  v20 = 0u;
  v21 = 0u;
  v18 = 0u;
  v19 = 0u;
  -[HMDHome mediaSessionStates](self, "mediaSessionStates");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v12 = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v18, v22, 16);
  if (v12)
  {
    v13 = v12;
    v14 = *(_QWORD *)v19;
    do
    {
      v15 = 0;
      do
      {
        if (*(_QWORD *)v19 != v14)
          objc_enumerationMutation(v11);
        objc_msgSend(*(id *)(*((_QWORD *)&v18 + 1) + 8 * v15), "dumpState");
        v16 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v5, "addObject:", v16);

        ++v15;
      }
      while (v13 != v15);
      v13 = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v18, v22, 16);
    }
    while (v13);
  }

  return v5;
}

- (void)setAvailableBSPsCount:(id)a3
{
  NSNumber *v4;
  NSNumber *availableBSPsCount;

  v4 = (NSNumber *)a3;
  os_unfair_recursive_lock_lock_with_options();
  availableBSPsCount = self->_availableBSPsCount;
  self->_availableBSPsCount = v4;

  os_unfair_recursive_lock_unlock();
}

- (NSNumber)availableBSPsCount
{
  NSNumber *v3;

  os_unfair_recursive_lock_lock_with_options();
  v3 = self->_availableBSPsCount;
  os_unfair_recursive_lock_unlock();
  return v3;
}

- (void)setAvailableBorderRouters:(id)a3
{
  NSNumber *v4;
  NSNumber *availableBorderRouters;

  v4 = (NSNumber *)a3;
  os_unfair_recursive_lock_lock_with_options();
  availableBorderRouters = self->_availableBorderRouters;
  self->_availableBorderRouters = v4;

  os_unfair_recursive_lock_unlock();
}

- (NSNumber)availableBorderRouters
{
  NSNumber *v3;

  os_unfair_recursive_lock_lock_with_options();
  v3 = self->_availableBorderRouters;
  os_unfair_recursive_lock_unlock();
  return v3;
}

- (BOOL)awdPrimaryReportingDevice
{
  void *v3;
  void *v4;
  void *v5;
  char v6;
  void *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t i;
  void *v15;
  uint64_t v16;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _BYTE v22[128];
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  -[HMDHome residentDeviceManager](self, "residentDeviceManager");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "primaryResidentDevice");
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  if (v4 && objc_msgSend(v4, "isReachable"))
  {
    objc_msgSend(v4, "device");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = objc_msgSend(v5, "isCurrentDevice");
LABEL_19:

    goto LABEL_20;
  }
  if (-[HMDHome isOwnerUser](self, "isOwnerUser")
    && (objc_msgSend(MEMORY[0x24BE3F260], "productInfo"),
        v7 = (void *)objc_claimAutoreleasedReturnValue(),
        v8 = objc_msgSend(v7, "productClass"),
        v7,
        v8 == 1))
  {
    v6 = 1;
  }
  else
  {
    if (-[HMDHome isOwnerUser](self, "isOwnerUser"))
    {
      v20 = 0u;
      v21 = 0u;
      v18 = 0u;
      v19 = 0u;
      +[HMDAppleAccountManager sharedManager](HMDAppleAccountManager, "sharedManager", 0);
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v9, "account");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v10, "devices");
      v5 = (void *)objc_claimAutoreleasedReturnValue();

      v11 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v18, v22, 16);
      if (v11)
      {
        v12 = v11;
        v13 = *(_QWORD *)v19;
        while (2)
        {
          for (i = 0; i != v12; ++i)
          {
            if (*(_QWORD *)v19 != v13)
              objc_enumerationMutation(v5);
            objc_msgSend(*(id *)(*((_QWORD *)&v18 + 1) + 8 * i), "productInfo");
            v15 = (void *)objc_claimAutoreleasedReturnValue();
            v16 = objc_msgSend(v15, "productClass");

            if (v16 == 1)
            {
              v6 = 0;
              goto LABEL_19;
            }
          }
          v12 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v18, v22, 16);
          if (v12)
            continue;
          break;
        }
      }
      v6 = 1;
      goto LABEL_19;
    }
    v6 = 0;
  }
LABEL_20:

  return v6;
}

- (void)_handleUpdateNetworkProtectionWithHomeModel:(id)a3 message:(id)a4
{
  void *v6;
  uint64_t v7;
  void *v8;
  id v9;

  v9 = a4;
  objc_msgSend(a3, "networkProtectionMode");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = objc_msgSend(v6, "unsignedIntegerValue");

  if (-[HMDHome protectionMode](self, "protectionMode") != v7)
  {
    -[HMDHome setProtectionMode:](self, "setProtectionMode:", v7);
    objc_msgSend(v9, "transactionResult");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHome _handleNetworkProtectionModeChangeForTransaction:](self, "_handleNetworkProtectionModeChangeForTransaction:", v8);
    objc_msgSend(v8, "markChanged");

  }
}

- (id)updateHomeWithModel:(id)a3 message:(id)a4
{
  id v6;
  HMDHome *v7;
  void *v8;
  void *v9;
  HMDHome *v10;
  NSObject *v11;
  id v12;
  void *v13;
  void *v14;
  HMDHome *v15;
  NSObject *v16;
  id v17;
  void *v18;
  void *v19;
  int v20;
  void *v21;
  void *v22;
  HMDHome *v23;
  NSObject *v24;
  id v25;
  id v26;
  uint64_t v27;
  void *v28;
  void *v29;
  char v30;
  void *v31;
  HMDHome *v32;
  NSObject *v33;
  id v34;
  void *v35;
  void *v36;
  void *v37;
  int v38;
  HMDHome *v39;
  void *v40;
  HMDHome *v41;
  NSObject *v42;
  id v43;
  void *v44;
  void *v45;
  int v46;
  void *v47;
  void *v48;
  void *v49;
  void *v50;
  char v51;
  void *v52;
  HMDHome *v53;
  NSObject *v54;
  id v55;
  void *v56;
  int v57;
  void *v58;
  HMDHome *v59;
  NSObject *v60;
  id v61;
  void *v62;
  void *v63;
  int v64;
  void *v65;
  void *v66;
  void *v67;
  void *v68;
  char v69;
  void *v70;
  int v71;
  void *v72;
  void *v73;
  void *v74;
  void *v75;
  void *v76;
  void *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t i;
  void *v82;
  void *v83;
  id v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t j;
  void *v89;
  uint64_t v90;
  void *v91;
  void *v92;
  char v93;
  void *v94;
  HMDHome *v95;
  NSObject *v96;
  id v97;
  void *v98;
  void *v99;
  void *v100;
  void *v101;
  char v102;
  void *v103;
  id v104;
  uint64_t v105;
  void *v106;
  void *v107;
  void *v108;
  char v109;
  void *v110;
  uint64_t v111;
  void *v112;
  void *v113;
  void *v114;
  char v115;
  void *v116;
  void *v117;
  void *v118;
  int v119;
  int v120;
  void *v121;
  HMDHome *v122;
  NSObject *v123;
  id v124;
  void *v125;
  const __CFString *v126;
  void *v127;
  int v128;
  int v129;
  void *v130;
  uint64_t v131;
  uint64_t v132;
  void *v133;
  int v134;
  int v135;
  void *v136;
  uint64_t v137;
  uint64_t v138;
  void *v139;
  int v140;
  int v141;
  void *v142;
  int v143;
  int v144;
  void *v145;
  void *v146;
  int v147;
  int v148;
  void *v149;
  HMDHome *v150;
  NSObject *v151;
  id v152;
  void *v153;
  const __CFString *v154;
  void *v155;
  void *v156;
  int v157;
  int v158;
  void *v159;
  HMDHome *v160;
  NSObject *v161;
  id v162;
  void *v163;
  id v164;
  void *v165;
  void *v166;
  int v167;
  int v168;
  BOOL v169;
  void *v170;
  HMDHome *v171;
  NSObject *v172;
  id v173;
  void *v174;
  id v175;
  void *v176;
  int v177;
  BOOL v178;
  void *v179;
  int v180;
  void *v181;
  HMDHome *v182;
  NSObject *v183;
  id v184;
  void *v185;
  HMDHome *v186;
  void *v187;
  void *v188;
  char v189;
  void *v190;
  void *v191;
  void *v192;
  void *v193;
  char v194;
  void *v195;
  HMDHome *v196;
  NSObject *v197;
  id v198;
  void *v199;
  void *v200;
  void *v201;
  uint64_t v202;
  void *v203;
  HMDHome *v204;
  NSObject *v205;
  id v206;
  __CFString *v207;
  HMDHome *v208;
  int v209;
  void *v210;
  uint64_t v211;
  void *v212;
  HMDHome *v213;
  NSObject *v214;
  id v215;
  __CFString *v216;
  HMDHome *v217;
  void *v218;
  uint64_t v219;
  void *v220;
  HMDHome *v221;
  NSObject *v222;
  id v223;
  __CFString *v224;
  void *v225;
  void *v226;
  void *v227;
  char v228;
  void *v229;
  HMDHome *v230;
  NSObject *v231;
  id v232;
  void *v233;
  HMDHome *v234;
  void *v235;
  void *v236;
  void *v237;
  void *v238;
  void *v239;
  char v240;
  void *v241;
  HMDHome *v242;
  NSObject *v243;
  id v244;
  void *v245;
  int v246;
  void *v247;
  int v248;
  void *v249;
  void *v250;
  void (**v251)(_QWORD, _QWORD, _QWORD);
  void *v252;
  int v253;
  void *v254;
  void *v255;
  void *v256;
  id v257;
  HMDHome *v259;
  void *v260;
  _BOOL4 v261;
  void *v262;
  void *v263;
  id v264;
  HMDHome *v265;
  void *v266;
  __int128 v267;
  __int128 v268;
  __int128 v269;
  __int128 v270;
  __int128 v271;
  __int128 v272;
  __int128 v273;
  __int128 v274;
  _BYTE v275[128];
  uint8_t v276[128];
  uint8_t buf[4];
  id v278;
  __int16 v279;
  _BYTE v280[10];
  HMDHome *v281;
  uint64_t v282;

  v282 = *MEMORY[0x24BDAC8D0];
  v6 = a3;
  v7 = (HMDHome *)a4;
  -[HMDHome transactionResult](v7, "transactionResult");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = (void *)MEMORY[0x227676638]();
  v10 = self;
  HMFGetOSLogHandle();
  v11 = (id)objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v12 = (id)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543874;
    v278 = v12;
    v279 = 2112;
    *(_QWORD *)v280 = v6;
    *(_WORD *)&v280[8] = 2112;
    v281 = v7;
    _os_log_impl(&dword_2218F0000, v11, OS_LOG_TYPE_INFO, "%{public}@Updating home with model: %@ / %@", buf, 0x20u);

  }
  objc_autoreleasePoolPop(v9);
  objc_msgSend(v6, "residentSyncClientDidSync");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHome setResidentSyncClientDidSync:](v10, "setResidentSyncClientDidSync:", objc_msgSend(v13, "BOOLValue"));

  v266 = v8;
  if (-[HMDHome residentSyncDidSync](v10, "residentSyncDidSync"))
  {
    v14 = (void *)MEMORY[0x227676638]();
    v15 = v10;
    HMFGetOSLogHandle();
    v16 = (id)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v17 = (id)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v278 = v17;
      _os_log_impl(&dword_2218F0000, v16, OS_LOG_TYPE_INFO, "%{public}@Fulfilling resident sync complete promise", buf, 0xCu);

      v8 = v266;
    }

    objc_autoreleasePoolPop(v14);
    -[HMDHome residentSyncClientDidSyncPromise](v15, "residentSyncClientDidSyncPromise");
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v18, "fulfillWithNoValue");

  }
  objc_msgSend(v6, "setProperties");
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  v20 = objc_msgSend(v19, "containsObject:", CFSTR("owned"));

  if (v20)
  {
    objc_msgSend(v6, "owned");
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHome setOwnerUser:](v10, "setOwnerUser:", objc_msgSend(v21, "BOOLValue"));

    v22 = (void *)MEMORY[0x227676638]();
    v23 = v10;
    HMFGetOSLogHandle();
    v24 = (id)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v24, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v25 = (id)objc_claimAutoreleasedReturnValue();
      -[HMDHome isOwnerUser](v23, "isOwnerUser");
      HMFBooleanToString();
      v26 = (id)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v278 = v25;
      v279 = 2112;
      *(_QWORD *)v280 = v26;
      _os_log_impl(&dword_2218F0000, v24, OS_LOG_TYPE_INFO, "%{public}@Is this device owner of this home : [%@]", buf, 0x16u);

      v8 = v266;
    }

    objc_autoreleasePoolPop(v22);
  }
  objc_msgSend(v6, "nfcReaderKey");
  v27 = objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "setProperties");
  v28 = (void *)objc_claimAutoreleasedReturnValue();
  v263 = (void *)v27;
  if (!objc_msgSend(v28, "containsObject:", CFSTR("hh2EncodedNfcReaderKey")))
    goto LABEL_16;
  -[HMDHome nfcReaderKey](v10, "nfcReaderKey");
  v29 = (void *)objc_claimAutoreleasedReturnValue();
  v30 = HMFEqualObjects();

  if ((v30 & 1) == 0)
  {
    v31 = (void *)MEMORY[0x227676638]();
    v32 = v10;
    HMFGetOSLogHandle();
    v33 = (id)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v33, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v34 = (id)objc_claimAutoreleasedReturnValue();
      -[HMDHome nfcReaderKey](v32, "nfcReaderKey");
      v35 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543874;
      v278 = v34;
      v279 = 2112;
      *(_QWORD *)v280 = v35;
      *(_WORD *)&v280[8] = 2112;
      v281 = (HMDHome *)v27;
      _os_log_impl(&dword_2218F0000, v33, OS_LOG_TYPE_INFO, "%{public}@HH2: Updating nfc reader key from %@ -> %@", buf, 0x20u);

      v8 = v266;
    }

    objc_autoreleasePoolPop(v31);
    objc_msgSend(MEMORY[0x24BDBCED8], "dictionary");
    v28 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHome nfcReaderKey](v32, "nfcReaderKey");
    v36 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v28, "setObject:forKeyedSubscript:", v36, CFSTR("HMDHomeDidUpdateNFCReaderKeyNotificationKeyPreviousNFCReaderKey"));

    -[HMDHome setNfcReaderKey:](v32, "setNfcReaderKey:", v27);
    logAndPostNotification(CFSTR("HMDHomeDidUpdateNFCReaderKeyNotification"), v32, v28);
    objc_msgSend(v8, "markChanged");
LABEL_16:

  }
  objc_msgSend(v6, "residentSelectionVersion");
  v265 = (HMDHome *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "setProperties");
  v37 = (void *)objc_claimAutoreleasedReturnValue();
  v38 = objc_msgSend(v37, "containsObject:", CFSTR("residentSelectionVersion"));

  if (v38)
  {
    -[HMDHome residentSelectionVersion](v10, "residentSelectionVersion");
    v39 = (HMDHome *)objc_claimAutoreleasedReturnValue();

    if (v39 != v265)
    {
      v40 = (void *)MEMORY[0x227676638]();
      v41 = v10;
      HMFGetOSLogHandle();
      v42 = (id)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v42, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v43 = (id)objc_claimAutoreleasedReturnValue();
        -[HMDHome residentSelectionVersion](v41, "residentSelectionVersion");
        v44 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543874;
        v278 = v43;
        v279 = 2114;
        *(_QWORD *)v280 = v44;
        *(_WORD *)&v280[8] = 2114;
        v281 = v265;
        _os_log_impl(&dword_2218F0000, v42, OS_LOG_TYPE_INFO, "%{public}@Updating resident selection version from %{public}@ to %{public}@", buf, 0x20u);

        v8 = v266;
      }

      objc_autoreleasePoolPop(v40);
      -[HMDHome setResidentSelectionVersion:](v41, "setResidentSelectionVersion:", v265);
      objc_msgSend(v8, "markChanged");
    }
  }
  -[HMDHome currentUser](v10, "currentUser");
  v262 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "setProperties");
  v45 = (void *)objc_claimAutoreleasedReturnValue();
  v46 = objc_msgSend(v45, "containsObject:", CFSTR("presenceAuthorizationStatus"));

  if (v46)
  {
    v47 = (void *)MEMORY[0x24BDD7A90];
    objc_msgSend(v6, "presenceAuthorizationStatus");
    v48 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v47, "authWithNumber:", v48);
    v49 = (void *)objc_claimAutoreleasedReturnValue();

    if (isPresenceAuthorizationValid())
    {
      -[HMDHome presenceAuthStatus](v10, "presenceAuthStatus");
      v50 = (void *)objc_claimAutoreleasedReturnValue();
      v51 = HMFEqualObjects();

      if ((v51 & 1) != 0)
      {
        v52 = (void *)MEMORY[0x227676638]();
        v53 = v10;
        HMFGetOSLogHandle();
        v54 = (id)objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v54, OS_LOG_TYPE_INFO))
        {
          HMFGetLogIdentifier();
          v55 = (id)objc_claimAutoreleasedReturnValue();
          -[HMDHome presenceAuthStatus](v53, "presenceAuthStatus");
          v56 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543618;
          v278 = v55;
          v279 = 2112;
          *(_QWORD *)v280 = v56;
          _os_log_impl(&dword_2218F0000, v54, OS_LOG_TYPE_INFO, "%{public}@Presence auth is not changing from %@", buf, 0x16u);

        }
        objc_autoreleasePoolPop(v52);
        v57 = 0;
      }
      else
      {
        -[HMDHome setPresenceAuthStatus:](v10, "setPresenceAuthStatus:", v49);
        objc_msgSend(v262, "setPresenceAuthStatus:", v49);
        objc_msgSend(v266, "markChanged");
        v57 = 1;
      }
      if (!-[HMDHome isOwnerUser](v10, "isOwnerUser"))
        objc_msgSend(v266, "markSaveToSharedUserAccount");
    }
    else
    {
      v58 = (void *)MEMORY[0x227676638]();
      v59 = v10;
      HMFGetOSLogHandle();
      v60 = (id)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v60, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v61 = (id)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v6, "presenceAuthorizationStatus");
        v62 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        v278 = v61;
        v279 = 2112;
        *(_QWORD *)v280 = v62;
        _os_log_impl(&dword_2218F0000, v60, OS_LOG_TYPE_INFO, "%{public}@Ignoring the value for presence auth in home model: %@", buf, 0x16u);

      }
      objc_autoreleasePoolPop(v58);
      v57 = 0;
    }

    v261 = v57 != 0;
    v8 = v266;
  }
  else
  {
    v261 = 0;
  }
  objc_msgSend(v6, "setProperties");
  v63 = (void *)objc_claimAutoreleasedReturnValue();
  v64 = objc_msgSend(v63, "containsObject:", CFSTR("presenceComputeStatus"));

  if (v64)
  {
    v65 = (void *)MEMORY[0x24BDD7A98];
    objc_msgSend(v6, "presenceComputeStatus");
    v66 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v65, "computeWithNumber:", v66);
    v67 = (void *)objc_claimAutoreleasedReturnValue();

    if (v67)
    {
      -[HMDHome presenceComputeStatus](v10, "presenceComputeStatus");
      v68 = (void *)objc_claimAutoreleasedReturnValue();
      v69 = HMFEqualObjects();

      if ((v69 & 1) == 0)
      {
        -[HMDHome setPresenceComputeStatus:](v10, "setPresenceComputeStatus:", v67);
        if (!-[HMDHome isOwnerUser](v10, "isOwnerUser"))
          objc_msgSend(v8, "markSaveToSharedUserAccount");
        objc_msgSend(v8, "markChanged");
      }
    }

  }
  objc_msgSend(v6, "setProperties");
  v70 = (void *)objc_claimAutoreleasedReturnValue();
  v71 = objc_msgSend(v70, "containsObject:", CFSTR("homeLocationData"));

  if (v71)
  {
    -[HMDHome homeLocationHandler](v10, "homeLocationHandler");
    v72 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v72, "_handleHomeLocationData:message:", v6, v7);
    v73 = (void *)objc_claimAutoreleasedReturnValue();

    if (v73)
    {
      v264 = v73;
    }
    else
    {
      v259 = v7;
      objc_msgSend(MEMORY[0x24BDBCEF0], "set");
      v74 = (void *)objc_claimAutoreleasedReturnValue();
      v271 = 0u;
      v272 = 0u;
      v273 = 0u;
      v274 = 0u;
      -[HMDHome xpcMessageTransportFactory](v10, "xpcMessageTransportFactory");
      v75 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v75, "defaultTransport");
      v76 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v76, "connections");
      v77 = (void *)objc_claimAutoreleasedReturnValue();

      v78 = objc_msgSend(v77, "countByEnumeratingWithState:objects:count:", &v271, v276, 16);
      if (v78)
      {
        v79 = v78;
        v80 = *(_QWORD *)v272;
        do
        {
          for (i = 0; i != v79; ++i)
          {
            if (*(_QWORD *)v272 != v80)
              objc_enumerationMutation(v77);
            objc_msgSend(*(id *)(*((_QWORD *)&v271 + 1) + 8 * i), "processInfo");
            v82 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v82, "locationAuthorization");
            v83 = (void *)objc_claimAutoreleasedReturnValue();

            if (v83)
              objc_msgSend(v74, "addObject:", v83);

          }
          v79 = objc_msgSend(v77, "countByEnumeratingWithState:objects:count:", &v271, v276, 16);
        }
        while (v79);
      }

      v269 = 0u;
      v270 = 0u;
      v267 = 0u;
      v268 = 0u;
      v84 = v74;
      v85 = objc_msgSend(v84, "countByEnumeratingWithState:objects:count:", &v267, v275, 16);
      v8 = v266;
      if (v85)
      {
        v86 = v85;
        v87 = *(_QWORD *)v268;
        do
        {
          for (j = 0; j != v86; ++j)
          {
            if (*(_QWORD *)v268 != v87)
              objc_enumerationMutation(v84);
            v89 = *(void **)(*((_QWORD *)&v267 + 1) + 8 * j);
            if (objc_msgSend(v89, "isAuthorized"))
              objc_msgSend(v89, "mark");
          }
          v86 = objc_msgSend(v84, "countByEnumeratingWithState:objects:count:", &v267, v275, 16);
        }
        while (v86);
      }

      v264 = 0;
      v7 = v259;
    }

  }
  else
  {
    v264 = 0;
  }
  objc_msgSend(v6, "naturalLightingContext");
  v90 = objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "setProperties");
  v91 = (void *)objc_claimAutoreleasedReturnValue();
  if ((objc_msgSend(v91, "containsObject:", CFSTR("encodedNaturalLightingContext")) & 1) != 0)
  {
    -[HMDHome naturalLightingContext](v10, "naturalLightingContext");
    v92 = (void *)objc_claimAutoreleasedReturnValue();
    v93 = objc_msgSend(v92, "isEqual:", v90);

    if ((v93 & 1) == 0)
    {
      v94 = (void *)MEMORY[0x227676638]();
      v95 = v10;
      HMFGetOSLogHandle();
      v96 = (id)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v96, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v97 = (id)objc_claimAutoreleasedReturnValue();
        -[HMDHome naturalLightingContext](v95, "naturalLightingContext");
        v98 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543874;
        v278 = v97;
        v279 = 2112;
        *(_QWORD *)v280 = v98;
        *(_WORD *)&v280[8] = 2112;
        v281 = (HMDHome *)v90;
        _os_log_impl(&dword_2218F0000, v96, OS_LOG_TYPE_INFO, "%{public}@Updating natural lighting context from %@ -> %@", buf, 0x20u);

      }
      objc_autoreleasePoolPop(v94);
      -[HMDHome setNaturalLightingContext:](v95, "setNaturalLightingContext:", v90);
      objc_msgSend(v8, "markChanged");
    }
  }
  else
  {

  }
  objc_msgSend(v6, "setProperties");
  v99 = (void *)objc_claimAutoreleasedReturnValue();
  if (!objc_msgSend(v99, "containsObject:", CFSTR("name")))
    goto LABEL_78;
  objc_msgSend(v6, "name");
  v100 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHome name](v10, "name");
  v101 = (void *)objc_claimAutoreleasedReturnValue();
  v102 = objc_msgSend(v100, "isEqualToString:", v101);

  if ((v102 & 1) == 0)
  {
    -[HMDHome _handleRenameHomeModel:message:](v10, "_handleRenameHomeModel:message:", v6, v7);
    v103 = (void *)objc_claimAutoreleasedReturnValue();
    v99 = v103;
    if (v103)
    {
      v104 = v103;

      v264 = v104;
    }
    objc_msgSend(v8, "markSaveToAssistant");
    objc_msgSend(v8, "markChanged");
LABEL_78:

  }
  objc_msgSend(v6, "creationDate");
  v105 = objc_claimAutoreleasedReturnValue();
  if (v105)
  {
    v106 = (void *)v105;
    objc_msgSend(v6, "creationDate");
    v107 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHome creationDate](v10, "creationDate");
    v108 = (void *)objc_claimAutoreleasedReturnValue();
    v109 = objc_msgSend(v107, "isEqualToDate:", v108);

    if ((v109 & 1) == 0)
    {
      objc_msgSend(v6, "creationDate");
      v110 = (void *)objc_claimAutoreleasedReturnValue();
      -[HMDHome setCreationDate:](v10, "setCreationDate:", v110);

      objc_msgSend(v8, "markChanged");
    }
  }
  objc_msgSend(v6, "firstHAPAccessoryAddedDate");
  v111 = objc_claimAutoreleasedReturnValue();
  if (v111)
  {
    v112 = (void *)v111;
    objc_msgSend(v6, "firstHAPAccessoryAddedDate");
    v113 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHome firstHAPAccessoryAddedDate](v10, "firstHAPAccessoryAddedDate");
    v114 = (void *)objc_claimAutoreleasedReturnValue();
    v115 = objc_msgSend(v113, "isEqualToDate:", v114);

    if ((v115 & 1) == 0)
    {
      objc_msgSend(v6, "firstHAPAccessoryAddedDate");
      v116 = (void *)objc_claimAutoreleasedReturnValue();
      -[HMDHome setFirstHAPAccessoryAddedDate:](v10, "setFirstHAPAccessoryAddedDate:", v116);

      objc_msgSend(v8, "markChanged");
    }
  }
  objc_msgSend(v6, "setProperties");
  v117 = (void *)objc_claimAutoreleasedReturnValue();
  if ((objc_msgSend(v117, "containsObject:", CFSTR("multiUserEnabled")) & 1) != 0)
  {
    objc_msgSend(v6, "multiUserEnabled");
    v118 = (void *)objc_claimAutoreleasedReturnValue();
    v119 = objc_msgSend(v118, "BOOLValue");
    v120 = -[HMDHome isMultiUserEnabled](v10, "isMultiUserEnabled");

    if (v119 != v120)
    {
      v121 = (void *)MEMORY[0x227676638]();
      v122 = v10;
      HMFGetOSLogHandle();
      v123 = (id)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v123, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v124 = (id)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v6, "multiUserEnabled");
        v125 = (void *)objc_claimAutoreleasedReturnValue();
        v126 = CFSTR("YES");
        *(_DWORD *)buf = 138543874;
        v278 = v124;
        v279 = 2112;
        if (!v125)
          v126 = CFSTR("NO");
        *(_QWORD *)v280 = v126;
        *(_WORD *)&v280[8] = 2112;
        v281 = v122;
        _os_log_impl(&dword_2218F0000, v123, OS_LOG_TYPE_INFO, "%{public}@Merging multi-user enabled value %@ into home: %@", buf, 0x20u);

      }
      objc_autoreleasePoolPop(v121);
      -[HMDHome _handleMultiUserEnabledChange:message:](v122, "_handleMultiUserEnabledChange:message:", v6, v7);
      objc_msgSend(v8, "markChanged");
    }
  }
  else
  {

  }
  if (objc_msgSend(v6, "propertyWasSet:", CFSTR("soundCheckEnabled")))
  {
    objc_msgSend(v6, "soundCheckEnabled");
    v127 = (void *)objc_claimAutoreleasedReturnValue();
    v128 = objc_msgSend(v127, "BOOLValue");
    v129 = -[HMDHome soundCheckEnabled](v10, "soundCheckEnabled");

    if (v128 != v129)
    {
      -[HMDHome _handleSoundCheckChange:message:](v10, "_handleSoundCheckChange:message:", v6, v7);
      objc_msgSend(v8, "markChanged");
    }
  }
  if (objc_msgSend(v6, "propertyWasSet:", CFSTR("analysisOptions")))
  {
    objc_msgSend(v6, "analysisOptions");
    v130 = (void *)objc_claimAutoreleasedReturnValue();
    v131 = objc_msgSend(v130, "unsignedIntegerValue");
    v132 = -[HMDHome audioAnalysisClassifierOptions](v10, "audioAnalysisClassifierOptions");

    if (v131 != v132)
    {
      -[HMDHome _handleAudioAnalysisClassifierOptionsChange:message:](v10, "_handleAudioAnalysisClassifierOptionsChange:message:", v6, v7);
      objc_msgSend(v8, "markChanged");
    }
  }
  if (objc_msgSend(v6, "propertyWasSet:", CFSTR("didOnboardAnalysis")))
  {
    objc_msgSend(v6, "didOnboardAnalysis");
    v133 = (void *)objc_claimAutoreleasedReturnValue();
    v134 = objc_msgSend(v133, "BOOLValue");
    v135 = -[HMDHome didOnboardAudioAnalysis](v10, "didOnboardAudioAnalysis");

    if (v134 != v135)
    {
      -[HMDHome _handleAudioAnalysisOnboardingStatusChange:message:](v10, "_handleAudioAnalysisOnboardingStatusChange:message:", v6, v7);
      objc_msgSend(v8, "markChanged");
    }
  }
  if (objc_msgSend(v6, "propertyWasSet:", CFSTR("siriPhraseOptions")))
  {
    objc_msgSend(v6, "siriPhraseOptions");
    v136 = (void *)objc_claimAutoreleasedReturnValue();
    v137 = objc_msgSend(v136, "unsignedIntegerValue");
    v138 = -[HMDHome siriPhraseOptions](v10, "siriPhraseOptions");

    if (v137 != v138)
    {
      -[HMDHome _handleSiriPhraseOptionsStatusChange:message:](v10, "_handleSiriPhraseOptionsStatusChange:message:", v6, v7);
      objc_msgSend(v8, "markChanged");
    }
  }
  if (objc_msgSend(v6, "propertyWasSet:", CFSTR("locationServicesEnabled")))
  {
    objc_msgSend(v6, "locationServicesEnabled");
    v139 = (void *)objc_claimAutoreleasedReturnValue();
    v140 = objc_msgSend(v139, "BOOLValue");
    v141 = -[HMDHome locationServicesEnabled](v10, "locationServicesEnabled");

    if (v140 != v141)
    {
      -[HMDHome _handleLocationServicesEnabledChange:message:](v10, "_handleLocationServicesEnabledChange:message:", v6, v7);
      objc_msgSend(v8, "markChanged");
    }
  }
  if (objc_msgSend(v6, "propertyWasSet:", CFSTR("didOnboardLocationServices")))
  {
    objc_msgSend(v6, "didOnboardLocationServices");
    v142 = (void *)objc_claimAutoreleasedReturnValue();
    v143 = objc_msgSend(v142, "BOOLValue");
    v144 = -[HMDHome didOnboardLocationServices](v10, "didOnboardLocationServices");

    if (v143 != v144)
    {
      -[HMDHome _handleDidOnboardLocationServicesChange:message:](v10, "_handleDidOnboardLocationServicesChange:message:", v6, v7);
      objc_msgSend(v8, "markChanged");
    }
  }
  objc_msgSend(v6, "setProperties");
  v145 = (void *)objc_claimAutoreleasedReturnValue();
  if ((objc_msgSend(v145, "containsObject:", CFSTR("hasAnyUserAcknowledgedCameraRecordingOnboarding")) & 1) != 0)
  {
    objc_msgSend(v6, "hasAnyUserAcknowledgedCameraRecordingOnboarding");
    v146 = (void *)objc_claimAutoreleasedReturnValue();
    v147 = objc_msgSend(v146, "BOOLValue");
    v148 = -[HMDHome hasAnyUserAcknowledgedCameraRecordingOnboarding](v10, "hasAnyUserAcknowledgedCameraRecordingOnboarding");

    if (v147 != v148)
    {
      v149 = (void *)MEMORY[0x227676638]();
      v150 = v10;
      HMFGetOSLogHandle();
      v151 = (id)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v151, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v152 = (id)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v6, "hasAnyUserAcknowledgedCameraRecordingOnboarding");
        v153 = (void *)objc_claimAutoreleasedReturnValue();
        v154 = CFSTR("YES");
        *(_DWORD *)buf = 138543874;
        v278 = v152;
        v279 = 2112;
        if (!v153)
          v154 = CFSTR("NO");
        *(_QWORD *)v280 = v154;
        *(_WORD *)&v280[8] = 2112;
        v281 = v150;
        _os_log_impl(&dword_2218F0000, v151, OS_LOG_TYPE_INFO, "%{public}@Merging home's has any user acknowledged camera recording onboarding value %@ into home: %@", buf, 0x20u);

      }
      objc_autoreleasePoolPop(v149);
      -[HMDHome _handleHasAnyUserAcknowledgedCameraRecordingOnboardingChange:message:](v150, "_handleHasAnyUserAcknowledgedCameraRecordingOnboardingChange:message:", v6, v7);
      objc_msgSend(v8, "markChanged");
    }
  }
  else
  {

  }
  objc_msgSend(v6, "setProperties");
  v155 = (void *)objc_claimAutoreleasedReturnValue();
  if ((objc_msgSend(v155, "containsObject:", CFSTR("hasOnboardedForAccessCode")) & 1) != 0)
  {
    objc_msgSend(v6, "hasOnboardedForAccessCode");
    v156 = (void *)objc_claimAutoreleasedReturnValue();
    v157 = objc_msgSend(v156, "BOOLValue");
    v158 = -[HMDHome hasOnboardedForAccessCode](v10, "hasOnboardedForAccessCode");

    if (v157 != v158)
    {
      v159 = (void *)MEMORY[0x227676638]();
      v160 = v10;
      HMFGetOSLogHandle();
      v161 = (id)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v161, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v162 = (id)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v6, "hasOnboardedForAccessCode");
        v163 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v163, "BOOLValue");
        HMFBooleanToString();
        v164 = (id)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543874;
        v278 = v162;
        v279 = 2112;
        *(_QWORD *)v280 = v164;
        *(_WORD *)&v280[8] = 2112;
        v281 = v160;
        _os_log_impl(&dword_2218F0000, v161, OS_LOG_TYPE_INFO, "%{public}@Merging home's has onboarded for access code value %@ into home: %@", buf, 0x20u);

        v8 = v266;
      }

      objc_autoreleasePoolPop(v159);
      -[HMDHome _handleSetHasOnboardedForAccessCodeChange:message:](v160, "_handleSetHasOnboardedForAccessCodeChange:message:", v6, v7);
      objc_msgSend(v8, "markChanged");
    }
  }
  else
  {

  }
  objc_msgSend(v6, "setProperties");
  v165 = (void *)objc_claimAutoreleasedReturnValue();
  if ((objc_msgSend(v165, "containsObject:", CFSTR("hasOnboardedForWalletKey")) & 1) != 0)
  {
    objc_msgSend(v6, "hasOnboardedForWalletKey");
    v166 = (void *)objc_claimAutoreleasedReturnValue();
    v167 = objc_msgSend(v166, "BOOLValue");
    v168 = -[HMDHome hasOnboardedForWalletKey](v10, "hasOnboardedForWalletKey");

    v169 = v167 == v168;
    v8 = v266;
    if (!v169)
    {
      v170 = (void *)MEMORY[0x227676638]();
      v171 = v10;
      HMFGetOSLogHandle();
      v172 = (id)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v172, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v173 = (id)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v6, "hasOnboardedForWalletKey");
        v174 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v174, "BOOLValue");
        HMFBooleanToString();
        v175 = (id)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543874;
        v278 = v173;
        v279 = 2112;
        *(_QWORD *)v280 = v175;
        *(_WORD *)&v280[8] = 2112;
        v281 = v171;
        _os_log_impl(&dword_2218F0000, v172, OS_LOG_TYPE_INFO, "%{public}@Merging home's has onboarded for wallet key value %@ into home: %@", buf, 0x20u);

        v8 = v266;
      }

      objc_autoreleasePoolPop(v170);
      -[HMDHome _handleSetHasOnboardedForWalletKeyChange:message:](v171, "_handleSetHasOnboardedForWalletKeyChange:message:", v6, v7);
      objc_msgSend(v8, "markChanged");
    }
  }
  else
  {

  }
  v260 = (void *)v90;
  objc_msgSend(v6, "setProperties");
  v176 = (void *)objc_claimAutoreleasedReturnValue();
  v177 = objc_msgSend(v176, "containsObject:", CFSTR("networkProtectionMode"));

  if (v177)
    -[HMDHome _handleUpdateNetworkProtectionWithHomeModel:message:](v10, "_handleUpdateNetworkProtectionWithHomeModel:message:", v6, v7);
  if (!-[HMDHome isOwnerUser](v10, "isOwnerUser"))
  {
    v178 = objc_msgSend(v8, "source") == 2 || objc_msgSend(v8, "source") == 3;
    objc_msgSend(v6, "setProperties");
    v179 = (void *)objc_claimAutoreleasedReturnValue();
    v180 = objc_msgSend(v179, "containsObject:", CFSTR("sharedHomeSourceVersion"));

    if (v180)
    {
      if (!v178)
      {
        v181 = (void *)MEMORY[0x227676638](-[HMDHome _handleReceivedNonCloudSourcedSharedHomeModel](v10, "_handleReceivedNonCloudSourcedSharedHomeModel"));
        v182 = v10;
        HMFGetOSLogHandle();
        v183 = (id)objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v183, OS_LOG_TYPE_INFO))
        {
          HMFGetLogIdentifier();
          v184 = (id)objc_claimAutoreleasedReturnValue();
          -[HMDHome sharedHomeSourceVersion](v182, "sharedHomeSourceVersion");
          v185 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v6, "sharedHomeSourceVersion");
          v186 = (HMDHome *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543874;
          v278 = v184;
          v279 = 2112;
          *(_QWORD *)v280 = v185;
          *(_WORD *)&v280[8] = 2112;
          v281 = v186;
          _os_log_impl(&dword_2218F0000, v183, OS_LOG_TYPE_INFO, "%{public}@Updating shared home source version from %@ to %@", buf, 0x20u);

          v8 = v266;
        }

        objc_autoreleasePoolPop(v181);
        -[HMDHome sharedHomeSourceVersion](v182, "sharedHomeSourceVersion");
        v187 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v6, "sharedHomeSourceVersion");
        v188 = (void *)objc_claimAutoreleasedReturnValue();
        v189 = HMFEqualObjects();

        if ((v189 & 1) == 0)
        {
          objc_msgSend(v6, "sharedHomeSourceVersion");
          v190 = (void *)objc_claimAutoreleasedReturnValue();
          -[HMDHome setSharedHomeSourceVersion:](v182, "setSharedHomeSourceVersion:", v190);

          objc_msgSend(v8, "markChanged");
        }
      }
    }
  }
  if (objc_msgSend(v6, "propertyWasSet:", CFSTR("threadOperationalDataset")))
  {
    objc_msgSend(v6, "threadOperationalDataset");
    v191 = (void *)objc_claimAutoreleasedReturnValue();

    if (v191)
      -[HMDHome updateThreadOperationalDatasetWithHomeModel:message:](v10, "updateThreadOperationalDatasetWithHomeModel:message:", v6, v7);
  }
  if (objc_msgSend(v6, "propertyWasSet:", CFSTR("matCredGRK")))
  {
    -[HMDHome acwgGroupResolvingKey](v10, "acwgGroupResolvingKey");
    v192 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "matCredGRK");
    v193 = (void *)objc_claimAutoreleasedReturnValue();
    v194 = HMFEqualObjects();

    if ((v194 & 1) == 0)
    {
      v195 = (void *)MEMORY[0x227676638]();
      v196 = v10;
      HMFGetOSLogHandle();
      v197 = (id)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v197, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v198 = (id)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v6, "matCredGRK");
        v199 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        v278 = v198;
        v279 = 2112;
        *(_QWORD *)v280 = v199;
        _os_log_impl(&dword_2218F0000, v197, OS_LOG_TYPE_INFO, "%{public}@Updating acwgGroupResolvingKey to: %@", buf, 0x16u);

        v8 = v266;
      }

      objc_autoreleasePoolPop(v195);
      objc_msgSend(v6, "matCredGRK");
      v200 = (void *)objc_claimAutoreleasedReturnValue();
      -[HMDHome setAcwgGroupResolvingKey:](v196, "setAcwgGroupResolvingKey:", v200);

      objc_msgSend(v8, "markChanged");
    }
  }
  -[HMDHome handleUpdatedCHIPPropertiesOnHomeModel:actions:](v10, "handleUpdatedCHIPPropertiesOnHomeModel:actions:", v6, v8);
  if (!objc_msgSend(v6, "propertyWasSet:", CFSTR("didOnboardEventLog"))
    || (objc_msgSend(v6, "didOnboardEventLog"),
        v201 = (void *)objc_claimAutoreleasedReturnValue(),
        v202 = objc_msgSend(v201, "BOOLValue"),
        v201,
        (_DWORD)v202 == -[HMDHome didOnboardEventLog](v10, "didOnboardEventLog")))
  {
    v209 = 0;
  }
  else
  {
    v203 = (void *)MEMORY[0x227676638](-[HMDHome setDidOnboardEventLog:](v10, "setDidOnboardEventLog:", v202));
    v204 = v10;
    HMFGetOSLogHandle();
    v205 = (id)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v205, OS_LOG_TYPE_DEFAULT))
    {
      HMFGetLogIdentifier();
      v206 = (id)objc_claimAutoreleasedReturnValue();
      objc_opt_class();
      objc_opt_self();
      v207 = CFSTR("[Hindsight]");
      HMFBooleanToString();
      v208 = (HMDHome *)(id)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543874;
      v278 = v206;
      v279 = 2114;
      *(_QWORD *)v280 = CFSTR("[Hindsight]");
      *(_WORD *)&v280[8] = 2114;
      v281 = v208;
      _os_log_impl(&dword_2218F0000, v205, OS_LOG_TYPE_DEFAULT, "%{public}@%{public}@ Activity history did onboard is now %{public}@", buf, 0x20u);

    }
    objc_autoreleasePoolPop(v203);
    objc_msgSend(v8, "markChanged");
    -[HMDHome _didOnboardHindsightChanged](v204, "_didOnboardHindsightChanged");
    v209 = 1;
  }
  if (objc_msgSend(v6, "propertyWasSet:", CFSTR("eventLogHomeSettingEnabled")))
  {
    objc_msgSend(v6, "eventLogHomeSettingEnabled");
    v210 = (void *)objc_claimAutoreleasedReturnValue();
    v211 = objc_msgSend(v210, "BOOLValue");

    if ((_DWORD)v211 != -[HMDHome isEventLogHomeSettingEnabled](v10, "isEventLogHomeSettingEnabled"))
    {
      v212 = (void *)MEMORY[0x227676638](-[HMDHome setEventLogHomeSettingEnabled:](v10, "setEventLogHomeSettingEnabled:", v211));
      v213 = v10;
      HMFGetOSLogHandle();
      v214 = (id)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v214, OS_LOG_TYPE_DEFAULT))
      {
        HMFGetLogIdentifier();
        v215 = (id)objc_claimAutoreleasedReturnValue();
        objc_opt_class();
        objc_opt_self();
        v216 = CFSTR("[Hindsight]");
        HMFEnabledStatusToString();
        v217 = (HMDHome *)(id)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543874;
        v278 = v215;
        v279 = 2114;
        *(_QWORD *)v280 = CFSTR("[Hindsight]");
        *(_WORD *)&v280[8] = 2114;
        v281 = v217;
        _os_log_impl(&dword_2218F0000, v214, OS_LOG_TYPE_DEFAULT, "%{public}@%{public}@ Activity history is now %{public}@", buf, 0x20u);

      }
      objc_autoreleasePoolPop(v212);
      objc_msgSend(v8, "markChanged");
      v209 = 1;
    }
  }
  if (objc_msgSend(v6, "propertyWasSet:", CFSTR("eventLogDuration")))
  {
    objc_msgSend(v6, "eventLogDuration");
    v218 = (void *)objc_claimAutoreleasedReturnValue();
    v219 = objc_msgSend(v218, "unsignedIntegerValue");

    if (-[HMDHome eventLogDuration](v10, "eventLogDuration") != v219)
    {
      v220 = (void *)MEMORY[0x227676638](-[HMDHome setEventLogDuration:](v10, "setEventLogDuration:", v219));
      v221 = v10;
      HMFGetOSLogHandle();
      v222 = (id)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v222, OS_LOG_TYPE_DEFAULT))
      {
        HMFGetLogIdentifier();
        v223 = (id)objc_claimAutoreleasedReturnValue();
        objc_opt_class();
        objc_opt_self();
        v224 = CFSTR("[Hindsight]");
        *(_DWORD *)buf = 138543874;
        v278 = v223;
        v279 = 2114;
        *(_QWORD *)v280 = CFSTR("[Hindsight]");
        *(_WORD *)&v280[8] = 2048;
        v281 = (HMDHome *)v219;
        _os_log_impl(&dword_2218F0000, v222, OS_LOG_TYPE_DEFAULT, "%{public}@%{public}@ Activity history duration is now %lu days", buf, 0x20u);

        v8 = v266;
      }

      objc_autoreleasePoolPop(v220);
      objc_msgSend(v8, "markChanged");
    }
  }
  if (v209)
  {
    -[HMDHome hindsightCloudShareManager](v10, "hindsightCloudShareManager");
    v225 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v225, "synchronize");

  }
  if (objc_msgSend(v6, "propertyWasSet:", CFSTR("timeZone")))
  {
    objc_msgSend(v6, "timeZone");
    v226 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHome timeZone](v10, "timeZone");
    v227 = (void *)objc_claimAutoreleasedReturnValue();
    v228 = HMFEqualObjects();

    if ((v228 & 1) == 0)
    {
      v229 = (void *)MEMORY[0x227676638]();
      v230 = v10;
      HMFGetOSLogHandle();
      v231 = (id)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v231, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v232 = (id)objc_claimAutoreleasedReturnValue();
        -[HMDHome timeZone](v230, "timeZone");
        v233 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v6, "timeZone");
        v234 = (HMDHome *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543874;
        v278 = v232;
        v279 = 2112;
        *(_QWORD *)v280 = v233;
        *(_WORD *)&v280[8] = 2112;
        v281 = v234;
        _os_log_impl(&dword_2218F0000, v231, OS_LOG_TYPE_INFO, "%{public}@Home timeZone was updated to: %@ from : %@", buf, 0x20u);

        v8 = v266;
      }

      objc_autoreleasePoolPop(v229);
      objc_msgSend(v6, "timeZone");
      v235 = (void *)objc_claimAutoreleasedReturnValue();
      -[HMDHome setTimeZone:](v230, "setTimeZone:", v235);

      -[HMDHome timeZone](v230, "timeZone");
      v236 = (void *)objc_claimAutoreleasedReturnValue();

      if (!v236)
      {
        objc_msgSend(MEMORY[0x24BDBCF38], "localTimeZone");
        v237 = (void *)objc_claimAutoreleasedReturnValue();
        -[HMDHome setTimeZone:](v230, "setTimeZone:", v237);

      }
      objc_msgSend(v8, "markChanged");
    }
  }
  if (objc_msgSend(v6, "propertyWasSet:", CFSTR("numberOfCameras")))
  {
    objc_msgSend(v6, "numberOfCameras");
    v238 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHome numberOfCameras](v10, "numberOfCameras");
    v239 = (void *)objc_claimAutoreleasedReturnValue();
    v240 = HMFEqualObjects();

    if ((v240 & 1) == 0)
    {
      v241 = (void *)MEMORY[0x227676638]();
      v242 = v10;
      HMFGetOSLogHandle();
      v243 = (id)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v243, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v244 = (id)objc_claimAutoreleasedReturnValue();
        -[HMDHome numberOfCameras](v242, "numberOfCameras");
        v245 = (void *)objc_claimAutoreleasedReturnValue();
        v246 = objc_msgSend(v245, "unsignedIntValue");
        objc_msgSend(v6, "numberOfCameras");
        v247 = (void *)objc_claimAutoreleasedReturnValue();
        v248 = objc_msgSend(v247, "unsignedIntValue");
        *(_DWORD *)buf = 138543874;
        v278 = v244;
        v279 = 1024;
        *(_DWORD *)v280 = v246;
        *(_WORD *)&v280[4] = 1024;
        *(_DWORD *)&v280[6] = v248;
        _os_log_impl(&dword_2218F0000, v243, OS_LOG_TYPE_INFO, "%{public}@Home numberOfCameras changed from %u to %u", buf, 0x18u);

        v8 = v266;
      }

      objc_autoreleasePoolPop(v241);
      objc_msgSend(v6, "numberOfCameras");
      v249 = (void *)objc_claimAutoreleasedReturnValue();
      -[HMDHome setNumberOfCameras:](v242, "setNumberOfCameras:", v249);

      objc_msgSend(v8, "markChanged");
    }
  }
  -[HMDHome responseHandler](v7, "responseHandler");
  v250 = (void *)objc_claimAutoreleasedReturnValue();

  if (v250)
  {
    -[HMDHome responseHandler](v7, "responseHandler");
    v251 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
    ((void (**)(_QWORD, id, _QWORD))v251)[2](v251, v264, 0);

  }
  if (v261)
  {
    -[HMDHome name](v7, "name");
    v252 = (void *)objc_claimAutoreleasedReturnValue();
    v253 = HMFEqualObjects();

    -[HMDHome presenceFeeder](v10, "presenceFeeder");
    v254 = (void *)objc_claimAutoreleasedReturnValue();
    v255 = v254;
    if (v253)
    {
      objc_msgSend(v254, "presenceAuthChanged");
    }
    else
    {
      -[HMDHome presenceAuthStatus](v10, "presenceAuthStatus");
      v256 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v255, "presenceAuthStatusChangedForUser:presenceAuthStatus:", v262, v256);

    }
  }
  v257 = v264;

  return v257;
}

- (void)updateHomeConfigurationWithModel:(id)a3 message:(id)a4
{
  id v6;
  id v7;
  void *v8;
  void *v9;
  int v10;
  void *v11;
  uint64_t v12;
  void *v13;
  HMDHome *v14;
  NSObject *v15;
  void *v16;
  void *v17;
  HMDHome *v18;
  NSObject *v19;
  void *v20;
  uint64_t v21;
  int v22;
  void *v23;
  __int16 v24;
  uint64_t v25;
  __int16 v26;
  uint64_t v27;
  __int16 v28;
  uint64_t v29;
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  v6 = a3;
  v7 = a4;
  objc_msgSend(v7, "transactionResult");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "setProperties");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = objc_msgSend(v9, "containsObject:", CFSTR("configurationVersion"));

  if (v10)
  {
    objc_msgSend(v6, "configurationVersion");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v12 = objc_msgSend(v11, "integerValue");

    v13 = (void *)MEMORY[0x227676638]();
    v14 = self;
    HMFGetOSLogHandle();
    v15 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      HMFGetLogIdentifier();
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      v22 = 138544130;
      v23 = v16;
      v24 = 2048;
      v25 = v12;
      v26 = 2048;
      v27 = -[HMDHome lastSyncedConfigurationVersion](v14, "lastSyncedConfigurationVersion");
      v28 = 2048;
      v29 = -[HMDHome configurationVersion](v14, "configurationVersion");
      _os_log_impl(&dword_2218F0000, v15, OS_LOG_TYPE_DEFAULT, "%{public}@Received incoming configuration version %lu, last synced was %lu, and current is %lu", (uint8_t *)&v22, 0x2Au);

    }
    objc_autoreleasePoolPop(v13);
    if (-[HMDHome isOwnerUser](v14, "isOwnerUser"))
    {
      if (v12 >= -[HMDHome configurationVersion](v14, "configurationVersion"))
      {
        v21 = -[HMDHome configurationVersion](v14, "configurationVersion");
        if (v21 <= -[HMDHome lastSyncedConfigurationVersion](v14, "lastSyncedConfigurationVersion"))
        {
          -[HMDHome setConfigurationVersion:](v14, "setConfigurationVersion:", v12);
        }
        else
        {
          -[HMDHome setConfigurationVersion:](v14, "setConfigurationVersion:", v12 + 1);
          -[HMDHome __saveConfigurationVersionTransaction](v14, "__saveConfigurationVersionTransaction");
        }
        -[HMDHome setLastSyncedConfigurationVersion:](v14, "setLastSyncedConfigurationVersion:", v12);
      }
      else
      {
        -[HMDHome __saveConfigurationVersionTransaction](v14, "__saveConfigurationVersionTransaction");
      }
    }
    else
    {
      v17 = (void *)MEMORY[0x227676638]();
      v18 = v14;
      HMFGetOSLogHandle();
      v19 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v19, OS_LOG_TYPE_DEBUG))
      {
        HMFGetLogIdentifier();
        v20 = (void *)objc_claimAutoreleasedReturnValue();
        v22 = 138543362;
        v23 = v20;
        _os_log_impl(&dword_2218F0000, v19, OS_LOG_TYPE_DEBUG, "%{public}@Shared user will use incoming configuration version", (uint8_t *)&v22, 0xCu);

      }
      objc_autoreleasePoolPop(v17);
      -[HMDHome setConfigurationVersion:](v18, "setConfigurationVersion:", v12);
      -[HMDHome setLastSyncedConfigurationVersion:](v18, "setLastSyncedConfigurationVersion:", v12);
      -[HMDHome setExpectedConfigurationVersion:](v18, "setExpectedConfigurationVersion:", 0);
    }
  }
  objc_msgSend(v7, "respondWithPayload:", 0);
  objc_msgSend(v8, "markChanged");

}

- (void)updateNetworkRouterSettingsWithModel:(id)a3 message:(id)a4
{
  id v6;
  id v7;
  void *v8;
  void *v9;
  int v10;
  id v11;
  void *v12;
  void *v13;
  void *v14;
  int v15;
  void *v16;
  void *v17;
  int v18;
  void *v19;
  int v20;
  HMDHomeKitVersion *v21;
  HMDHomeKitVersion *v22;
  void *v23;
  HMDHomeKitVersion *v24;
  void *v25;
  HMDHome *v26;
  NSObject *v27;
  HMDHomeKitVersion *v28;
  void *v29;
  NSObject *v30;
  void *v31;
  HMDHome *v32;
  NSObject *v33;
  void *v34;
  HMDHomeKitVersion *v35;
  HMDHomeKitVersion *v36;
  void *v37;
  int v38;
  HMDHomeKitVersion *v39;
  HMDHomeKitVersion *v40;
  void *v41;
  void *v42;
  char v43;
  void *v44;
  uint64_t block;
  uint64_t v46;
  uint64_t (*v47)(uint64_t);
  void *v48;
  HMDHome *v49;
  HMDHomeKitVersion *v50;
  id v51;
  uint8_t buf[4];
  void *v53;
  __int16 v54;
  HMDHomeKitVersion *v55;
  __int16 v56;
  HMDHomeKitVersion *v57;
  uint64_t v58;

  v58 = *MEMORY[0x24BDAC8D0];
  v6 = a3;
  v7 = a4;
  objc_msgSend(v7, "transactionResult");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "setProperties");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = objc_msgSend(v9, "containsObject:", CFSTR("activeNetworkRouterAccessoryUUID"));

  if (v10)
  {
    v11 = objc_alloc(MEMORY[0x24BDD1880]);
    objc_msgSend(v6, "activeNetworkRouterAccessoryUUID");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    v13 = (void *)objc_msgSend(v11, "initWithUUIDString:", v12);

    -[HMDHome activeNetworkRouterUUID](self, "activeNetworkRouterUUID");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    v15 = HMFEqualObjects();

    if ((v15 & 1) == 0)
    {
      -[HMDHome setActiveNetworkRouterUUID:](self, "setActiveNetworkRouterUUID:", v13);
      if (v13)
      {
        objc_msgSend(v6, "activeNetworkRouterAccessoryUUID");
        v16 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v6, "activeNetworkRouterInitialSetupNeededUUID");
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        -[HMDHome setActiveNetworkRouterInitialSetupNeeded:](self, "setActiveNetworkRouterInitialSetupNeeded:", objc_msgSend(v16, "isEqual:", v17));

      }
      else
      {
        -[HMDHome setActiveNetworkRouterInitialSetupNeeded:](self, "setActiveNetworkRouterInitialSetupNeeded:", 0);
      }
    }
    v18 = v15 ^ 1;

  }
  else
  {
    v18 = 0;
  }
  objc_msgSend(v6, "setProperties");
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  v20 = objc_msgSend(v19, "containsObject:", CFSTR("minimumNetworkRouterSupportHomeKitVersion"));

  if (v20)
  {
    objc_msgSend(v6, "minimumNetworkRouterSupportHomeKitVersion");
    v21 = (HMDHomeKitVersion *)objc_claimAutoreleasedReturnValue();

    if (v21)
    {
      v22 = [HMDHomeKitVersion alloc];
      objc_msgSend(v6, "minimumNetworkRouterSupportHomeKitVersion");
      v23 = (void *)objc_claimAutoreleasedReturnValue();
      v21 = -[HMDHomeKitVersion initWithVersionString:](v22, "initWithVersionString:", v23);

    }
    v24 = -[HMDHomeKitVersion initWithVersionString:]([HMDHomeKitVersion alloc], "initWithVersionString:", CFSTR("6.2"));
    if (-[HMDHome isOwnerUser](self, "isOwnerUser")
      && objc_msgSend(v8, "source") != 1
      && -[HMDHomeKitVersion isGreaterThanVersion:](v21, "isGreaterThanVersion:", v24))
    {
      v25 = (void *)MEMORY[0x227676638]();
      v26 = self;
      HMFGetOSLogHandle();
      v27 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v27, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v44 = v25;
        v28 = v24;
        v29 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543874;
        v53 = v29;
        v54 = 2112;
        v55 = v21;
        v56 = 2112;
        v57 = v28;
        _os_log_impl(&dword_2218F0000, v27, OS_LOG_TYPE_INFO, "%{public}@Overriding minimum router support HomeKit version to enable network router support from %@ in cloud to our version %@", buf, 0x20u);

        v24 = v28;
        v25 = v44;
      }

      objc_autoreleasePoolPop(v25);
      -[HMDHome workQueue](v26, "workQueue");
      v30 = objc_claimAutoreleasedReturnValue();
      block = MEMORY[0x24BDAC760];
      v46 = 3221225472;
      v47 = __56__HMDHome_updateNetworkRouterSettingsWithModel_message___block_invoke;
      v48 = &unk_24E79BBD0;
      v49 = v26;
      v50 = v21;
      v51 = v7;
      dispatch_async(v30, &block);

    }
    else
    {
      v31 = (void *)MEMORY[0x227676638]();
      v32 = self;
      HMFGetOSLogHandle();
      v33 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v33, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v34 = (void *)objc_claimAutoreleasedReturnValue();
        -[HMDHome minimumNetworkRouterSupportHomeKitVersion](v32, "minimumNetworkRouterSupportHomeKitVersion");
        v44 = v8;
        v35 = v24;
        v36 = (HMDHomeKitVersion *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543874;
        v53 = v34;
        v54 = 2112;
        v55 = v36;
        v56 = 2112;
        v57 = v21;
        _os_log_impl(&dword_2218F0000, v33, OS_LOG_TYPE_INFO, "%{public}@Updating minimum router support HomeKit version to enable network router support from %@ to cloud version %@", buf, 0x20u);

        v24 = v35;
        v8 = v44;

      }
      objc_autoreleasePoolPop(v31);
      -[HMDHome setMinimumNetworkRouterSupportHomeKitVersion:](v32, "setMinimumNetworkRouterSupportHomeKitVersion:", v21);
      v18 = 1;
    }

  }
  objc_msgSend(v6, "setProperties", v44, block, v46, v47, v48, v49);
  v37 = (void *)objc_claimAutoreleasedReturnValue();
  v38 = objc_msgSend(v37, "containsObject:", CFSTR("minHomeKitVersionForAccessoryNetworkProtectionChange"));

  if (v38)
  {
    objc_msgSend(v6, "minHomeKitVersionForAccessoryNetworkProtectionChange");
    v39 = (HMDHomeKitVersion *)objc_claimAutoreleasedReturnValue();

    if (v39)
    {
      v40 = [HMDHomeKitVersion alloc];
      objc_msgSend(v6, "minHomeKitVersionForAccessoryNetworkProtectionChange");
      v41 = (void *)objc_claimAutoreleasedReturnValue();
      v39 = -[HMDHomeKitVersion initWithVersionString:](v40, "initWithVersionString:", v41);

    }
    -[HMDHome minHomeKitVersionForAccessoryNetworkProtectionChange](self, "minHomeKitVersionForAccessoryNetworkProtectionChange");
    v42 = (void *)objc_claimAutoreleasedReturnValue();
    v43 = HMFEqualObjects();

    if ((v43 & 1) != 0)
    {

      if ((v18 & 1) == 0)
        goto LABEL_31;
    }
    else
    {
      -[HMDHome setMinHomeKitVersionForAccessoryNetworkProtectionChange:](self, "setMinHomeKitVersionForAccessoryNetworkProtectionChange:", v39);

    }
  }
  else if (!v18)
  {
    goto LABEL_31;
  }
  -[HMDHome _evaluateNetworkRouterManagementForTransaction:](self, "_evaluateNetworkRouterManagementForTransaction:", v8);
  objc_msgSend(v8, "markChanged");
LABEL_31:
  objc_msgSend(v7, "respondWithPayload:", 0);

}

- (void)updateROARStatus:(id)a3 message:(id)a4
{
  id v6;
  id v7;
  void *v8;
  HMDHome *v9;
  NSObject *v10;
  void *v11;
  void *v12;
  NSObject *v13;
  _QWORD block[5];
  uint8_t buf[4];
  void *v16;
  __int16 v17;
  id v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v6 = a3;
  v7 = a4;
  v8 = (void *)MEMORY[0x227676638]();
  v9 = self;
  HMFGetOSLogHandle();
  v10 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543618;
    v16 = v11;
    v17 = 2112;
    v18 = v6;
    _os_log_impl(&dword_2218F0000, v10, OS_LOG_TYPE_INFO, "%{public}@Found ROAR Model : %@", buf, 0x16u);

  }
  objc_autoreleasePoolPop(v8);
  objc_msgSend(v7, "transactionResult");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHome workQueue](v9, "workQueue");
  v13 = objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x24BDAC760];
  block[1] = 3221225472;
  block[2] = __36__HMDHome_updateROARStatus_message___block_invoke;
  block[3] = &unk_24E79C240;
  block[4] = v9;
  dispatch_async(v13, block);

  objc_msgSend(v12, "markSaveToAssistant");
  objc_msgSend(v12, "markChanged");

}

- (void)setHomeUpdatedToROARAndInformClients
{
  void *v3;
  HMDHome *v4;
  NSObject *v5;
  void *v6;
  void *v7;
  HMDHome *v8;
  NSObject *v9;
  void *v10;
  int v11;
  void *v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  if (-[HMDHome isUpdatedToHH2](self, "isUpdatedToHH2"))
  {
    v3 = (void *)MEMORY[0x227676638]();
    v4 = self;
    HMFGetOSLogHandle();
    v5 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      v11 = 138543362;
      v12 = v6;
      _os_log_impl(&dword_2218F0000, v5, OS_LOG_TYPE_INFO, "%{public}@isUpdatedToHH2 is already set on this home. Not doing anything.", (uint8_t *)&v11, 0xCu);

    }
    objc_autoreleasePoolPop(v3);
  }
  else if (!-[HMDHome isUpdatedToHH2](self, "isUpdatedToHH2"))
  {
    v7 = (void *)MEMORY[0x227676638](-[HMDHome setIsUpdatedToHH2:](self, "setIsUpdatedToHH2:", 1));
    v8 = self;
    HMFGetOSLogHandle();
    v9 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      v11 = 138543362;
      v12 = v10;
      _os_log_impl(&dword_2218F0000, v9, OS_LOG_TYPE_INFO, "%{public}@Marked home upgraded to HH2 & informing clients about the status", (uint8_t *)&v11, 0xCu);

    }
    objc_autoreleasePoolPop(v7);
    -[HMDHome saveWithReason:postSyncNotification:objectChange:](v8, "saveWithReason:postSyncNotification:objectChange:", CFSTR("Upgraded To HH2"), 0, 1);
  }
}

- (void)updateNetworkRouterManagingDeviceSettingsWithModel:(id)a3 message:(id)a4
{
  id v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  char v11;
  id v12;
  void *v13;
  void *v14;
  id v15;

  v15 = a3;
  v6 = a4;
  objc_msgSend(v15, "setProperties");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  if (!objc_msgSend(v7, "containsObject:", CFSTR("primaryNetworkRouterManagingDeviceUUID")))
    goto LABEL_4;
  -[HMDHome primaryNetworkRouterManagingDeviceUUID](self, "primaryNetworkRouterManagingDeviceUUID");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "UUIDString");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v15, "primaryNetworkRouterManagingDeviceUUID");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v11 = HMFEqualObjects();

  if ((v11 & 1) == 0)
  {
    v12 = objc_alloc(MEMORY[0x24BDD1880]);
    objc_msgSend(v15, "primaryNetworkRouterManagingDeviceUUID");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    v7 = (void *)objc_msgSend(v12, "initWithUUIDString:", v13);

    -[HMDHome setPrimaryNetworkRouterManagingDeviceUUID:](self, "setPrimaryNetworkRouterManagingDeviceUUID:", v7);
    objc_msgSend(v6, "transactionResult");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHome _evaluateNetworkRouterManagementForTransaction:](self, "_evaluateNetworkRouterManagementForTransaction:", v14);
    objc_msgSend(v14, "markChanged");

LABEL_4:
  }
  objc_msgSend(v6, "respondWithPayload:", 0);

}

- (void)transactionObjectUpdated:(id)a3 newValues:(id)a4 message:(id)a5
{
  id v8;
  id v9;
  id v10;
  void *v11;
  id v12;
  id v13;
  id v14;
  void *v15;
  id v16;
  id v17;
  void *v18;
  id v19;
  void *v20;
  id v21;
  void *v22;
  id v23;
  void *v24;
  id v25;
  void *v26;
  id v27;
  id v28;
  void *v29;
  id v30;
  id v31;
  void *v32;
  id v33;
  id v34;
  void *v35;
  id v36;
  void *v37;
  id v38;
  void *v39;
  id v40;
  void *v41;
  id v42;
  void *v43;
  id v44;
  id v45;
  void *v46;
  id v47;
  void *v48;
  id v49;
  void *v50;
  id v51;
  void *v52;
  void *v53;
  void *v54;
  id v55;
  void *v56;
  id v57;
  void *v58;
  void *v59;
  void *v60;
  HMDHome *v61;
  NSObject *v62;
  void *v63;
  void *v64;
  id v65;
  void *v66;
  id v67;
  HMDHome *v68;
  NSObject *v69;
  void *v70;
  void *v71;
  void *v72;
  void *context;
  void *v74;
  uint8_t buf[4];
  void *v76;
  uint64_t v77;

  v77 = *MEMORY[0x24BDAC8D0];
  v8 = a3;
  v9 = a4;
  v10 = a5;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v11 = v9;
  else
    v11 = 0;
  v12 = v11;
  if (!v12)
  {
    v14 = v9;
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
      v15 = v14;
    else
      v15 = 0;
    v16 = v15;

    if (v16)
    {
      -[HMDHome updateHomeConfigurationWithModel:message:](self, "updateHomeConfigurationWithModel:message:", v16, v10);
LABEL_90:

      goto LABEL_91;
    }
    v17 = v14;
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
      v18 = v17;
    else
      v18 = 0;
    v19 = v18;

    if (v19)
    {
      -[HMDHome residentDeviceManager](self, "residentDeviceManager");
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v20, "transactionObjectUpdated:newValues:message:", v8, v17, v10);

LABEL_89:
      goto LABEL_90;
    }
    v21 = v17;
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
      v22 = v21;
    else
      v22 = 0;
    v23 = v22;

    if (v23)
    {
      -[HMDHome homeManager](self, "homeManager");
      v24 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v24, "transactionObjectUpdated:newValues:message:", v8, v21, v10);

LABEL_88:
      goto LABEL_89;
    }
    v25 = v21;
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
      v26 = v25;
    else
      v26 = 0;
    v27 = v26;

    if (v27)
    {
      __transactionHomeSettingsUpdated(self, v27, v10);
      v23 = 0;
LABEL_87:

      goto LABEL_88;
    }
    v28 = v25;
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
      v29 = v28;
    else
      v29 = 0;
    v30 = v29;

    if (v30)
    {
      __transactionHomeMediaSettingsUpdated(self, v30, v10);
      v23 = 0;
LABEL_86:

      v27 = 0;
      goto LABEL_87;
    }
    v31 = v28;
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
      v32 = v31;
    else
      v32 = 0;
    v33 = v32;

    if (v33)
    {
      -[HMDHome updateNetworkRouterSettingsWithModel:message:](self, "updateNetworkRouterSettingsWithModel:message:", v33, v10);
      v23 = 0;
      v30 = 0;
LABEL_85:

      goto LABEL_86;
    }
    v34 = v31;
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
      v35 = v34;
    else
      v35 = 0;
    v36 = v35;

    if (v36)
    {
      -[HMDHome updateNetworkRouterManagingDeviceSettingsWithModel:message:](self, "updateNetworkRouterManagingDeviceSettingsWithModel:message:", v36, v10);
      v23 = 0;
      v37 = v36;
      v33 = 0;
      v30 = 0;
LABEL_84:

      goto LABEL_85;
    }
    v38 = v34;
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
      v39 = v38;
    else
      v39 = 0;
    v40 = v39;

    if (v40)
    {
      -[HMDHome _updateThreadNetworkWithModel:message:](self, "_updateThreadNetworkWithModel:message:", v40, v10);
      v41 = v40;
      v23 = 0;
      v33 = 0;
      v30 = 0;
LABEL_83:

      v37 = 0;
      goto LABEL_84;
    }
    v42 = v38;
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
      v43 = v42;
    else
      v43 = 0;
    v44 = v43;

    if (v44)
    {
      v45 = v8;
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0)
        v46 = v45;
      else
        v46 = 0;
      v47 = v46;

      -[HMDHome personDataManager](self, "personDataManager");
      v48 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v48, "handleUpdatedSettingsModel:previousSettingsModel:message:", v44, v47, v10);

      goto LABEL_82;
    }
    v49 = v42;
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
      v50 = v49;
    else
      v50 = 0;
    v51 = v50;

    v74 = v51;
    if (v51)
    {
      -[HMDHome accessCodeManager](self, "accessCodeManager");
      v52 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v52, "dataManager");
      v53 = (void *)objc_claimAutoreleasedReturnValue();

      if (v53)
      {
        v54 = v53;
        objc_msgSend(v53, "handleUpdatedHomeAccessCodeModel:message:", v74, v10);
LABEL_81:

        v44 = 0;
LABEL_82:

        v23 = 0;
        v33 = 0;
        v30 = 0;
        v41 = 0;
        goto LABEL_83;
      }
      v60 = (void *)MEMORY[0x227676638]();
      v61 = self;
      HMFGetOSLogHandle();
      v62 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v62, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v63 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543362;
        v76 = v63;
        _os_log_impl(&dword_2218F0000, v62, OS_LOG_TYPE_ERROR, "%{public}@Not handling removed HMDHomeAccessCodeModel because self.accessCodeManager.dataManager is nil", buf, 0xCu);

      }
      objc_autoreleasePoolPop(v60);
      objc_msgSend(MEMORY[0x24BDD1540], "hmErrorWithCode:", -1);
      v64 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v10, "respondWithError:", v64);

    }
    else
    {
      v55 = v49;
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0)
        v56 = v55;
      else
        v56 = 0;
      v57 = v56;

      if (v57)
      {
        v54 = v57;
        -[HMDHome accessCodeManager](self, "accessCodeManager");
        v58 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v58, "dataManager");
        v59 = (void *)objc_claimAutoreleasedReturnValue();

        if (v59)
        {
          objc_msgSend(v59, "handleUpdatedHMDRemovedUserAccessCodeModel:message:", v54, v10);
        }
        else
        {
          context = (void *)MEMORY[0x227676638]();
          v68 = self;
          HMFGetOSLogHandle();
          v69 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v69, OS_LOG_TYPE_ERROR))
          {
            HMFGetLogIdentifier();
            v72 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 138543362;
            v76 = v72;
            _os_log_impl(&dword_2218F0000, v69, OS_LOG_TYPE_ERROR, "%{public}@Not handling removed HMDRemovedUserAccessCodeModel because self.accessCodeManager.dataManager is nil", buf, 0xCu);

          }
          objc_autoreleasePoolPop(context);
          objc_msgSend(MEMORY[0x24BDD1540], "hmErrorWithCode:", -1);
          v70 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v10, "respondWithError:", v70);

        }
        goto LABEL_81;
      }
      v65 = v55;
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0)
        v66 = v65;
      else
        v66 = 0;
      v67 = v66;

      if (v67)
      {
        -[HMDHome updateROARStatus:message:](self, "updateROARStatus:message:", v67, v10);
        objc_msgSend(v10, "respondWithSuccess");
      }
      else
      {
        -[HMDHome homeObjectChangeHandler](self, "homeObjectChangeHandler");
        v71 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v71, "handleObjectUpdate:newValues:message:", v8, v65, v10);

      }
    }
    v54 = 0;
    goto LABEL_81;
  }
  v13 = -[HMDHome updateHomeWithModel:message:](self, "updateHomeWithModel:message:", v12, v10);
LABEL_91:

}

- (void)transactionObjectRemoved:(id)a3 message:(id)a4
{
  id v6;
  id v7;
  void *v8;
  id v9;
  id v10;
  id v11;
  void *v12;
  void *v13;
  id v14;
  id v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  HMDHome *v20;
  NSObject *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  HMDHome *v26;
  NSObject *v27;
  void *v28;
  void *v29;
  int v30;
  void *v31;
  uint64_t v32;

  v32 = *MEMORY[0x24BDAC8D0];
  v6 = a3;
  v7 = a4;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v8 = v6;
  else
    v8 = 0;
  v9 = v8;
  if (v9)
  {
    -[HMDHome residentDeviceManager](self, "residentDeviceManager");
    v10 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "transactionObjectRemoved:message:", v6, v7);
  }
  else
  {
    v11 = v6;
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
      v12 = v11;
    else
      v12 = 0;
    v10 = v12;

    if (v10)
    {
      -[HMDHome accessCodeManager](self, "accessCodeManager");
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v13, "dataManager");
      v14 = (id)objc_claimAutoreleasedReturnValue();

      if (v14)
      {
        objc_msgSend(v14, "handleRemovedHomeAccessCodeModel:message:", v10, v7);
      }
      else
      {
        v19 = (void *)MEMORY[0x227676638]();
        v20 = self;
        HMFGetOSLogHandle();
        v21 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
        {
          HMFGetLogIdentifier();
          v22 = (void *)objc_claimAutoreleasedReturnValue();
          v30 = 138543362;
          v31 = v22;
          _os_log_impl(&dword_2218F0000, v21, OS_LOG_TYPE_ERROR, "%{public}@Not handling removed HMDHomeAccessCodeModel because self.accessCodeManager.dataManager is nil", (uint8_t *)&v30, 0xCu);

        }
        objc_autoreleasePoolPop(v19);
        objc_msgSend(MEMORY[0x24BDD1540], "hmErrorWithCode:", -1);
        v23 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v7, "respondWithError:", v23);

        v14 = 0;
      }
    }
    else
    {
      v15 = v11;
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0)
        v16 = v15;
      else
        v16 = 0;
      v14 = v16;

      if (v14)
      {
        -[HMDHome accessCodeManager](self, "accessCodeManager");
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v17, "dataManager");
        v18 = (void *)objc_claimAutoreleasedReturnValue();

        if (v18)
        {
          objc_msgSend(v18, "handleRemovedHMDRemovedUserAccessCodeModel:message:", v14, v7);
        }
        else
        {
          v25 = (void *)MEMORY[0x227676638]();
          v26 = self;
          HMFGetOSLogHandle();
          v27 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
          {
            HMFGetLogIdentifier();
            v28 = (void *)objc_claimAutoreleasedReturnValue();
            v30 = 138543362;
            v31 = v28;
            _os_log_impl(&dword_2218F0000, v27, OS_LOG_TYPE_ERROR, "%{public}@Not handling removed HMDRemovedUserAccessCodeModel because self.accessCodeManager.dataManager is nil", (uint8_t *)&v30, 0xCu);

          }
          objc_autoreleasePoolPop(v25);
          objc_msgSend(MEMORY[0x24BDD1540], "hmErrorWithCode:", -1);
          v29 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v7, "respondWithError:", v29);

        }
      }
      else
      {
        -[HMDHome homeObjectChangeHandler](self, "homeObjectChangeHandler");
        v24 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v24, "handleObjectRemove:message:", v15, v7);

      }
    }

  }
}

- (id)deletedBackingStoreObject
{
  void *v3;
  __objc2_class *v4;
  id v5;
  void *v6;
  void *v7;
  void *v8;

  -[HMDHome homeManager](self, "homeManager");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  if (-[HMDHome isOwnerUser](self, "isOwnerUser"))
    v4 = HMDHomeModel;
  else
    v4 = HMDSharedHomeModel;
  v5 = [v4 alloc];
  -[HMDHome uuid](self, "uuid");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "uuid");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = (void *)objc_msgSend(v5, "initWithObjectChangeType:uuid:parentUUID:", 3, v6, v7);

  return v8;
}

- (id)sharedHomeModel
{
  HMDSharedHomeModel *v3;
  void *v4;
  void *v5;
  HMDSharedHomeModel *v6;
  void *v7;
  void *v8;
  void *v9;

  v3 = [HMDSharedHomeModel alloc];
  -[HMDHome uuid](self, "uuid");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = (void *)objc_msgSend(objc_alloc(MEMORY[0x24BDD1880]), "initWithUUIDString:", CFSTR("1CAEDC10-E3E5-41A4-BB17-A9EEBA14A938"));
  v6 = -[HMDBackingStoreModelObject initWithObjectChangeType:uuid:parentUUID:](v3, "initWithObjectChangeType:uuid:parentUUID:", 1, v4, v5);

  -[HMDHome homeManager](self, "homeManager");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "generateDataForSharedHomeModel:", self);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDSharedHomeModel setHomeData:](v6, "setHomeData:", v8);

  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithInteger:", -[HMDHome configurationVersion](self, "configurationVersion"));
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDSharedHomeModel setConfigurationVersion:](v6, "setConfigurationVersion:", v9);

  return v6;
}

- (id)backingStoreObjects:(int64_t)a3
{
  return -[HMDHome backingStoreObjects:hh2Migration:](self, "backingStoreObjects:hh2Migration:", a3, 0);
}

- (id)backingStoreObjects:(int64_t)a3 hh2Migration:(BOOL)a4
{
  void *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t i;
  void *v13;
  void *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t j;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t k;
  void *v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t m;
  void *v35;
  char v36;
  void *v37;
  void *v38;
  uint64_t v39;
  _BOOL4 v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t n;
  void *v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t ii;
  void *v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t jj;
  void *v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t kk;
  HMDOutgoingHomeInvitation *v62;
  char isKindOfClass;
  char v64;
  void *v65;
  void *v66;
  HMDHome *v67;
  NSObject *v68;
  void *v69;
  NSObject *v70;
  const char *v71;
  void *v72;
  void *v73;
  void *v74;
  void *v75;
  HMDOutgoingHomeInvitation *v76;
  HMDOutgoingHomeInvitation *v77;
  void *v78;
  void *v79;
  HMDOutgoingHomeInvitation *v80;
  HMDHome *v81;
  NSObject *v82;
  void *v83;
  void *v84;
  void *v85;
  HMDHome *v86;
  NSObject *v87;
  void *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t mm;
  HMDOutgoingHomeInvitation *v93;
  void *v94;
  char v95;
  void *v96;
  char v97;
  void *v98;
  HMDHome *v99;
  NSObject *v100;
  void *v101;
  NSObject *v102;
  const char *v103;
  void *v104;
  void *v105;
  id v106;
  void *v107;
  void *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t nn;
  void *v113;
  void *v114;
  void *v115;
  void *v116;
  HMDHomeSettingsModel *v117;
  void *v118;
  void *v119;
  void *v120;
  HMDHomeSettingsModel *v121;
  void *v122;
  void *v123;
  HMDHomeMediaSettingsModel *v124;
  void *v125;
  void *v126;
  void *v127;
  HMDHomeMediaSettingsModel *v128;
  void *v129;
  void *v130;
  void *v131;
  void *v132;
  void *v133;
  void *v134;
  void *v135;
  void *v136;
  void *v137;
  void *v138;
  void *v139;
  void *v140;
  void *v141;
  HMDHomeKitVersion *v142;
  uint64_t v143;
  void *v144;
  void *v145;
  uint64_t v146;
  void *v147;
  void *v148;
  void *v149;
  void *v150;
  void *v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t i1;
  void *v156;
  void *v157;
  void *v158;
  void *v159;
  void *v160;
  void *v161;
  void *v162;
  void *v163;
  void *v164;
  void *v165;
  id v166;
  HMDOutgoingHomeInvitation *v168;
  void *v169;
  void *v170;
  _BOOL4 v171;
  id obj;
  id obja;
  id objb;
  HMDHome *v175;
  __int128 v176;
  __int128 v177;
  __int128 v178;
  __int128 v179;
  __int128 v180;
  __int128 v181;
  __int128 v182;
  __int128 v183;
  _QWORD v184[5];
  __int128 v185;
  __int128 v186;
  __int128 v187;
  __int128 v188;
  __int128 v189;
  __int128 v190;
  __int128 v191;
  __int128 v192;
  __int128 v193;
  __int128 v194;
  __int128 v195;
  __int128 v196;
  __int128 v197;
  __int128 v198;
  __int128 v199;
  __int128 v200;
  __int128 v201;
  __int128 v202;
  __int128 v203;
  __int128 v204;
  __int128 v205;
  __int128 v206;
  __int128 v207;
  __int128 v208;
  __int128 v209;
  __int128 v210;
  __int128 v211;
  __int128 v212;
  __int128 v213;
  __int128 v214;
  __int128 v215;
  __int128 v216;
  __int128 v217;
  __int128 v218;
  __int128 v219;
  __int128 v220;
  _BYTE v221[128];
  _BYTE v222[128];
  _BYTE v223[128];
  const __CFString *v224;
  uint8_t buf[4];
  void *v226;
  __int16 v227;
  HMDOutgoingHomeInvitation *v228;
  _BYTE v229[128];
  _BYTE v230[128];
  _BYTE v231[128];
  _BYTE v232[128];
  _BYTE v233[128];
  _BYTE v234[128];
  _BYTE v235[128];
  _BYTE v236[128];
  uint64_t v237;

  v171 = a4;
  v237 = *MEMORY[0x24BDAC8D0];
  objc_msgSend(MEMORY[0x24BDBCEB8], "array");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHome modelObjectWithChangeType:version:](self, "modelObjectWithChangeType:version:", 1, a3);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "addObject:", v7);

  v219 = 0u;
  v220 = 0u;
  v217 = 0u;
  v218 = 0u;
  v175 = self;
  -[HMDHome accessories](self, "accessories");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v217, v236, 16);
  if (v9)
  {
    v10 = v9;
    v11 = *(_QWORD *)v218;
    do
    {
      for (i = 0; i != v10; ++i)
      {
        if (*(_QWORD *)v218 != v11)
          objc_enumerationMutation(v8);
        v13 = *(void **)(*((_QWORD *)&v217 + 1) + 8 * i);
        if (a3 <= 3)
        {
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) == 0)
            continue;
        }
        objc_msgSend(v13, "backingStoreObjects:", a3);
        v14 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v6, "addObjectsFromArray:", v14);

      }
      v10 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v217, v236, 16);
    }
    while (v10);
  }

  v215 = 0u;
  v216 = 0u;
  v213 = 0u;
  v214 = 0u;
  -[HMDHome actionSets](v175, "actionSets");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  v16 = objc_msgSend(v15, "countByEnumeratingWithState:objects:count:", &v213, v235, 16);
  if (v16)
  {
    v17 = v16;
    v18 = *(_QWORD *)v214;
    do
    {
      for (j = 0; j != v17; ++j)
      {
        if (*(_QWORD *)v214 != v18)
          objc_enumerationMutation(v15);
        v20 = *(void **)(*((_QWORD *)&v213 + 1) + 8 * j);
        if (a3 <= 1)
        {
          v21 = (void *)MEMORY[0x24BDD7480];
          objc_msgSend(*(id *)(*((_QWORD *)&v213 + 1) + 8 * j), "type");
          v22 = (void *)objc_claimAutoreleasedReturnValue();
          LOBYTE(v21) = objc_msgSend(v21, "isBuiltinActionSetType:", v22);

          if ((v21 & 1) != 0)
            continue;
        }
        objc_msgSend(v20, "backingStoreObjects:", a3);
        v23 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v6, "addObjectsFromArray:", v23);

      }
      v17 = objc_msgSend(v15, "countByEnumeratingWithState:objects:count:", &v213, v235, 16);
    }
    while (v17);
  }

  if (a3 >= 3)
  {
    isWatch();
    v209 = 0u;
    v210 = 0u;
    v211 = 0u;
    v212 = 0u;
    -[HMDHome triggerOwnedActionSets](v175, "triggerOwnedActionSets");
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    v25 = objc_msgSend(v24, "countByEnumeratingWithState:objects:count:", &v209, v234, 16);
    if (v25)
    {
      v26 = v25;
      v27 = *(_QWORD *)v210;
      do
      {
        for (k = 0; k != v26; ++k)
        {
          if (*(_QWORD *)v210 != v27)
            objc_enumerationMutation(v24);
          objc_msgSend(*(id *)(*((_QWORD *)&v209 + 1) + 8 * k), "backingStoreObjects:", a3);
          v29 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v6, "addObjectsFromArray:", v29);

        }
        v26 = objc_msgSend(v24, "countByEnumeratingWithState:objects:count:", &v209, v234, 16);
      }
      while (v26);
    }

    v207 = 0u;
    v208 = 0u;
    v205 = 0u;
    v206 = 0u;
    -[HMDHome triggers](v175, "triggers");
    v30 = (void *)objc_claimAutoreleasedReturnValue();
    v31 = objc_msgSend(v30, "countByEnumeratingWithState:objects:count:", &v205, v233, 16);
    if (v31)
    {
      v32 = v31;
      v33 = *(_QWORD *)v206;
      do
      {
        for (m = 0; m != v32; ++m)
        {
          if (*(_QWORD *)v206 != v33)
            objc_enumerationMutation(v30);
          v35 = *(void **)(*((_QWORD *)&v205 + 1) + 8 * m);
          v36 = objc_msgSend(v35, "requiresDataVersion4");
          if (a3 > 3 || (v36 & 1) == 0)
          {
            objc_msgSend(v35, "backingStoreObjects:", a3);
            v37 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v6, "addObjectsFromArray:", v37);

          }
        }
        v32 = objc_msgSend(v30, "countByEnumeratingWithState:objects:count:", &v205, v233, 16);
      }
      while (v32);
    }

  }
  v203 = 0u;
  v204 = 0u;
  v201 = 0u;
  v202 = 0u;
  -[HMDHome rooms](v175, "rooms");
  v38 = (void *)objc_claimAutoreleasedReturnValue();
  v39 = objc_msgSend(v38, "countByEnumeratingWithState:objects:count:", &v201, v232, 16);
  v40 = v171;
  if (v39)
  {
    v41 = v39;
    v42 = *(_QWORD *)v202;
    do
    {
      for (n = 0; n != v41; ++n)
      {
        if (*(_QWORD *)v202 != v42)
          objc_enumerationMutation(v38);
        objc_msgSend(*(id *)(*((_QWORD *)&v201 + 1) + 8 * n), "backingStoreObjects:", a3);
        v44 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v6, "addObjectsFromArray:", v44);

      }
      v41 = objc_msgSend(v38, "countByEnumeratingWithState:objects:count:", &v201, v232, 16);
    }
    while (v41);
  }

  v199 = 0u;
  v200 = 0u;
  v197 = 0u;
  v198 = 0u;
  -[HMDHome zones](v175, "zones");
  v45 = (void *)objc_claimAutoreleasedReturnValue();
  v46 = objc_msgSend(v45, "countByEnumeratingWithState:objects:count:", &v197, v231, 16);
  if (v46)
  {
    v47 = v46;
    v48 = *(_QWORD *)v198;
    do
    {
      for (ii = 0; ii != v47; ++ii)
      {
        if (*(_QWORD *)v198 != v48)
          objc_enumerationMutation(v45);
        objc_msgSend(*(id *)(*((_QWORD *)&v197 + 1) + 8 * ii), "backingStoreObjects:", a3);
        v50 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v6, "addObjectsFromArray:", v50);

      }
      v47 = objc_msgSend(v45, "countByEnumeratingWithState:objects:count:", &v197, v231, 16);
    }
    while (v47);
  }

  v195 = 0u;
  v196 = 0u;
  v193 = 0u;
  v194 = 0u;
  -[HMDHome serviceGroups](v175, "serviceGroups");
  v51 = (void *)objc_claimAutoreleasedReturnValue();
  v52 = objc_msgSend(v51, "countByEnumeratingWithState:objects:count:", &v193, v230, 16);
  if (v52)
  {
    v53 = v52;
    v54 = *(_QWORD *)v194;
    do
    {
      for (jj = 0; jj != v53; ++jj)
      {
        if (*(_QWORD *)v194 != v54)
          objc_enumerationMutation(v51);
        objc_msgSend(*(id *)(*((_QWORD *)&v193 + 1) + 8 * jj), "backingStoreObjects:", a3);
        v56 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v6, "addObjectsFromArray:", v56);

      }
      v53 = objc_msgSend(v51, "countByEnumeratingWithState:objects:count:", &v193, v230, 16);
    }
    while (v53);
  }

  v191 = 0u;
  v192 = 0u;
  v189 = 0u;
  v190 = 0u;
  -[HMDHome users](v175, "users");
  v57 = (void *)objc_claimAutoreleasedReturnValue();
  v58 = objc_msgSend(v57, "countByEnumeratingWithState:objects:count:", &v189, v229, 16);
  if (v58)
  {
    v59 = v58;
    v60 = *(_QWORD *)v190;
    obj = v57;
    do
    {
      for (kk = 0; kk != v59; ++kk)
      {
        if (*(_QWORD *)v190 != v60)
          objc_enumerationMutation(v57);
        v62 = *(HMDOutgoingHomeInvitation **)(*((_QWORD *)&v189 + 1) + 8 * kk);
        objc_opt_class();
        isKindOfClass = objc_opt_isKindOfClass();
        v64 = isKindOfClass;
        if (a3 > 1 || (isKindOfClass & 1) == 0)
        {
          isWatch();
          if (a3 > 3 || (-[HMDOutgoingHomeInvitation requiresMakoSupport](v62, "requiresMakoSupport") & 1) == 0)
          {
            if (!v40 || (-[HMDOutgoingHomeInvitation isOwner](v62, "isOwner") & 1) != 0)
            {
              -[HMDOutgoingHomeInvitation backingStoreObjects:](v62, "backingStoreObjects:", a3);
              v65 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v6, "addObjectsFromArray:", v65);

              continue;
            }
            if ((v64 & 1) != 0)
            {
              v66 = (void *)MEMORY[0x227676638]();
              v67 = v175;
              HMFGetOSLogHandle();
              v68 = objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v68, OS_LOG_TYPE_INFO))
              {
                HMFGetLogIdentifier();
                v69 = (void *)objc_claimAutoreleasedReturnValue();
                *(_DWORD *)buf = 138543618;
                v226 = v69;
                v227 = 2112;
                v228 = v62;
                v70 = v68;
                v71 = "%{public}@Skipping resident user [%@] for HH2 migration as it is deprecated in HH2";
                goto LABEL_83;
              }
              goto LABEL_84;
            }
            -[HMDOutgoingHomeInvitation userID](v62, "userID");
            v72 = (void *)objc_claimAutoreleasedReturnValue();

            if (v72)
            {
              if (-[HMDHome nonIPadResidentDeviceCountForHH2Migration](v175, "nonIPadResidentDeviceCountForHH2Migration"))
              {
                v168 = [HMDOutgoingHomeInvitation alloc];
                v73 = (void *)MEMORY[0x24BDD1880];
                -[HMDOutgoingHomeInvitation uuid](v62, "uuid");
                v169 = (void *)objc_claimAutoreleasedReturnValue();
                v224 = CFSTR("50690AC3-FD93-4D1F-A677-9369289BB998");
                objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", &v224, 1);
                v74 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v73, "hm_deriveUUIDFromBaseUUID:withSalts:", v169, v74);
                v75 = (void *)objc_claimAutoreleasedReturnValue();
                v76 = -[HMDOutgoingHomeInvitation initWithUUID:invitee:invitationState:forHome:expiryDate:messageIdentifier:](v168, "initWithUUID:invitee:invitationState:forHome:expiryDate:messageIdentifier:", v75, v62, 2, v175, 0, 0);

                v77 = v76;
                -[HMDOutgoingHomeInvitation modelObjectWithChangeType:version:](v76, "modelObjectWithChangeType:version:", 1, a3);
                v78 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v6, "addObject:", v78);

                v79 = (void *)MEMORY[0x227676638]();
                v80 = v77;
                v81 = v175;
                HMFGetOSLogHandle();
                v82 = objc_claimAutoreleasedReturnValue();
                if (os_log_type_enabled(v82, OS_LOG_TYPE_INFO))
                {
                  HMFGetLogIdentifier();
                  v170 = v79;
                  v83 = (void *)objc_claimAutoreleasedReturnValue();
                  *(_DWORD *)buf = 138543618;
                  v226 = v83;
                  v227 = 2112;
                  v228 = v80;
                  _os_log_impl(&dword_2218F0000, v82, OS_LOG_TYPE_INFO, "%{public}@Generated re-invite for shared user: %@", buf, 0x16u);

                  v79 = v170;
                }

                objc_autoreleasePoolPop(v79);
                -[HMDOutgoingHomeInvitation setPrivilege:](v62, "setPrivilege:", 2);
                -[HMDOutgoingHomeInvitation backingStoreObjects:](v62, "backingStoreObjects:", a3);
                v84 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v6, "addObjectsFromArray:", v84);

              }
              else
              {
                v85 = (void *)MEMORY[0x227676638]();
                v86 = v175;
                HMFGetOSLogHandle();
                v87 = objc_claimAutoreleasedReturnValue();
                if (os_log_type_enabled(v87, OS_LOG_TYPE_INFO))
                {
                  HMFGetLogIdentifier();
                  v88 = (void *)objc_claimAutoreleasedReturnValue();
                  *(_DWORD *)buf = 138543618;
                  v226 = v88;
                  v227 = 2112;
                  v228 = v62;
                  _os_log_impl(&dword_2218F0000, v87, OS_LOG_TYPE_INFO, "%{public}@Dropping shared user as there will be no valid resident after migration: %@", buf, 0x16u);

                }
                objc_autoreleasePoolPop(v85);
              }
              v40 = v171;
            }
            else
            {
              v66 = (void *)MEMORY[0x227676638]();
              v67 = v175;
              HMFGetOSLogHandle();
              v68 = objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v68, OS_LOG_TYPE_INFO))
              {
                HMFGetLogIdentifier();
                v69 = (void *)objc_claimAutoreleasedReturnValue();
                *(_DWORD *)buf = 138543618;
                v226 = v69;
                v227 = 2112;
                v228 = v62;
                v70 = v68;
                v71 = "%{public}@Skipping bad user [%@] for HH2 migration, no account handle";
LABEL_83:
                _os_log_impl(&dword_2218F0000, v70, OS_LOG_TYPE_INFO, v71, buf, 0x16u);

                v40 = v171;
              }
LABEL_84:

              objc_autoreleasePoolPop(v66);
            }
            v57 = obj;
            continue;
          }
        }
      }
      v59 = objc_msgSend(v57, "countByEnumeratingWithState:objects:count:", &v189, v229, 16);
    }
    while (v59);
  }

  if (a3 >= 2)
  {
    v187 = 0u;
    v188 = 0u;
    v185 = 0u;
    v186 = 0u;
    -[HMDHome outgoingInvitations](v175, "outgoingInvitations");
    obja = (id)objc_claimAutoreleasedReturnValue();
    v89 = objc_msgSend(obja, "countByEnumeratingWithState:objects:count:", &v185, v223, 16);
    if (v89)
    {
      v90 = v89;
      v91 = *(_QWORD *)v186;
      do
      {
        for (mm = 0; mm != v90; ++mm)
        {
          if (*(_QWORD *)v186 != v91)
            objc_enumerationMutation(obja);
          v93 = *(HMDOutgoingHomeInvitation **)(*((_QWORD *)&v185 + 1) + 8 * mm);
          if (a3 <= 3)
          {
            objc_msgSend(*(id *)(*((_QWORD *)&v185 + 1) + 8 * mm), "user");
            v94 = (void *)objc_claimAutoreleasedReturnValue();
            v95 = objc_msgSend(v94, "requiresMakoSupport");

            if ((v95 & 1) != 0)
              continue;
          }
          if (v40)
          {
            if (!-[HMDHome nonIPadResidentDeviceCountForHH2Migration](v175, "nonIPadResidentDeviceCountForHH2Migration"))
            {
              v98 = (void *)MEMORY[0x227676638]();
              v99 = v175;
              HMFGetOSLogHandle();
              v100 = objc_claimAutoreleasedReturnValue();
              if (!os_log_type_enabled(v100, OS_LOG_TYPE_INFO))
                goto LABEL_117;
              HMFGetLogIdentifier();
              v101 = (void *)objc_claimAutoreleasedReturnValue();
              *(_DWORD *)buf = 138543618;
              v226 = v101;
              v227 = 2112;
              v228 = v93;
              v102 = v100;
              v103 = "%{public}@Dropping outgoing invite as there will be no valid resident after migration: %@";
LABEL_116:
              _os_log_impl(&dword_2218F0000, v102, OS_LOG_TYPE_INFO, v103, buf, 0x16u);

              goto LABEL_117;
            }
            if (-[HMDHomeInvitation invitationState](v93, "invitationState") != 2)
            {
              v98 = (void *)MEMORY[0x227676638]();
              v99 = v175;
              HMFGetOSLogHandle();
              v100 = objc_claimAutoreleasedReturnValue();
              if (!os_log_type_enabled(v100, OS_LOG_TYPE_INFO))
                goto LABEL_117;
              HMFGetLogIdentifier();
              v101 = (void *)objc_claimAutoreleasedReturnValue();
              *(_DWORD *)buf = 138543618;
              v226 = v101;
              v227 = 2112;
              v228 = v93;
              v102 = v100;
              v103 = "%{public}@Dropping outgoing invite as it is in a terminal state: %@";
              goto LABEL_116;
            }
            -[HMDHome users](v175, "users");
            v96 = (void *)objc_claimAutoreleasedReturnValue();
            v184[0] = MEMORY[0x24BDAC760];
            v184[1] = 3221225472;
            v184[2] = __44__HMDHome_backingStoreObjects_hh2Migration___block_invoke;
            v184[3] = &unk_24E799728;
            v184[4] = v93;
            v97 = objc_msgSend(v96, "na_any:", v184);

            if ((v97 & 1) != 0)
            {
              v98 = (void *)MEMORY[0x227676638]();
              v99 = v175;
              HMFGetOSLogHandle();
              v100 = objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v100, OS_LOG_TYPE_INFO))
              {
                HMFGetLogIdentifier();
                v101 = (void *)objc_claimAutoreleasedReturnValue();
                *(_DWORD *)buf = 138543618;
                v226 = v101;
                v227 = 2112;
                v228 = v93;
                v102 = v100;
                v103 = "%{public}@Dropping outgoing invite as there is already a matching user in the home: %@";
                goto LABEL_116;
              }
LABEL_117:

              objc_autoreleasePoolPop(v98);
              v40 = v171;
              continue;
            }
          }
          -[HMDOutgoingHomeInvitation modelObjectWithChangeType:version:](v93, "modelObjectWithChangeType:version:", 1, a3);
          v104 = (void *)objc_claimAutoreleasedReturnValue();
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) != 0)
            v105 = v104;
          else
            v105 = 0;
          v106 = v105;

          if (v106)
            objc_msgSend(v6, "addObject:", v106);

        }
        v90 = objc_msgSend(obja, "countByEnumeratingWithState:objects:count:", &v185, v223, 16);
      }
      while (v90);
    }

    if (a3 >= 3)
    {
      v182 = 0u;
      v183 = 0u;
      v180 = 0u;
      v181 = 0u;
      -[HMDHome residentDeviceManager](v175, "residentDeviceManager");
      v107 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v107, "residentDevices");
      v108 = (void *)objc_claimAutoreleasedReturnValue();

      v109 = objc_msgSend(v108, "countByEnumeratingWithState:objects:count:", &v180, v222, 16);
      if (v109)
      {
        v110 = v109;
        v111 = *(_QWORD *)v181;
        do
        {
          for (nn = 0; nn != v110; ++nn)
          {
            if (*(_QWORD *)v181 != v111)
              objc_enumerationMutation(v108);
            objc_msgSend(*(id *)(*((_QWORD *)&v180 + 1) + 8 * nn), "modelObjectWithChangeType:version:", 1, a3);
            v113 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v6, "addObject:", v113);

          }
          v110 = objc_msgSend(v108, "countByEnumeratingWithState:objects:count:", &v180, v222, 16);
        }
        while (v110);
      }

      -[HMDHome appData](v175, "appData");
      v114 = (void *)objc_claimAutoreleasedReturnValue();

      if (v114)
      {
        -[HMDHome appData](v175, "appData");
        v115 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v115, "modelObjectWithChangeType:", 1);
        v116 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v6, "addObject:", v116);

      }
      if (a3 >= 4)
      {
        v117 = [HMDHomeSettingsModel alloc];
        -[HMDHome uuid](v175, "uuid");
        v118 = (void *)objc_claimAutoreleasedReturnValue();
        +[HMDHomeSettingsModel modelIDForHomeUUID:](HMDHomeSettingsModel, "modelIDForHomeUUID:", v118);
        v119 = (void *)objc_claimAutoreleasedReturnValue();
        -[HMDHome uuid](v175, "uuid");
        v120 = (void *)objc_claimAutoreleasedReturnValue();
        v121 = -[HMDBackingStoreModelObject initWithObjectChangeType:uuid:parentUUID:](v117, "initWithObjectChangeType:uuid:parentUUID:", 1, v119, v120);

        objc_msgSend(MEMORY[0x24BDD16E0], "numberWithBool:", -[HMDHome isAutomaticSoftwareUpdateEnabled](v175, "isAutomaticSoftwareUpdateEnabled"));
        v122 = (void *)objc_claimAutoreleasedReturnValue();
        -[HMDHomeSettingsModel setAutomaticSoftwareUpdateEnabled:](v121, "setAutomaticSoftwareUpdateEnabled:", v122);

        objc_msgSend(MEMORY[0x24BDD16E0], "numberWithBool:", -[HMDHome isAutomaticThirdPartyAccessorySoftwareUpdateEnabled](v175, "isAutomaticThirdPartyAccessorySoftwareUpdateEnabled"));
        v123 = (void *)objc_claimAutoreleasedReturnValue();
        -[HMDHomeSettingsModel setAutomaticThirdPartyAccessorySoftwareUpdateEnabled:](v121, "setAutomaticThirdPartyAccessorySoftwareUpdateEnabled:", v123);

        objc_msgSend(v6, "addObject:", v121);
        v124 = [HMDHomeMediaSettingsModel alloc];
        -[HMDHome uuid](v175, "uuid");
        v125 = (void *)objc_claimAutoreleasedReturnValue();
        +[HMDHomeMediaSettingsModel modelIDForHomeUUID:](HMDHomeMediaSettingsModel, "modelIDForHomeUUID:", v125);
        v126 = (void *)objc_claimAutoreleasedReturnValue();
        -[HMDHome uuid](v175, "uuid");
        v127 = (void *)objc_claimAutoreleasedReturnValue();
        v128 = -[HMDBackingStoreModelObject initWithObjectChangeType:uuid:parentUUID:](v124, "initWithObjectChangeType:uuid:parentUUID:", 1, v126, v127);

        objc_msgSend(MEMORY[0x24BDD16E0], "numberWithInteger:", -[HMDHome minimumMediaUserPrivilege](v175, "minimumMediaUserPrivilege"));
        v129 = (void *)objc_claimAutoreleasedReturnValue();
        -[HMDHomeMediaSettingsModel setMinimumMediaUserPrivilege:](v128, "setMinimumMediaUserPrivilege:", v129);

        objc_msgSend(MEMORY[0x24BDD16E0], "numberWithBool:", -[HMDHome isMediaPeerToPeerEnabled](v175, "isMediaPeerToPeerEnabled"));
        v130 = (void *)objc_claimAutoreleasedReturnValue();
        -[HMDHomeMediaSettingsModel setMediaPeerToPeerEnabled:](v128, "setMediaPeerToPeerEnabled:", v130);

        -[HMDHome mediaPassword](v175, "mediaPassword");
        v131 = (void *)objc_claimAutoreleasedReturnValue();
        -[HMDHomeMediaSettingsModel setMediaPassword:](v128, "setMediaPassword:", v131);

        objc_msgSend(v6, "addObject:", v128);
        -[HMDHome mediaSystemController](v175, "mediaSystemController");
        v132 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v132, "backingStoreObjectsForVersion:", a3);
        v133 = (void *)objc_claimAutoreleasedReturnValue();

        if (objc_msgSend(v133, "count"))
          objc_msgSend(v6, "addObjectsFromArray:", v133);
        objb = v133;
        -[HMDHome uuid](v175, "uuid");
        v134 = (void *)objc_claimAutoreleasedReturnValue();
        +[HMDHomeNetworkRouterManagingDeviceSettingsModel defaultModelForHomeUUID:](HMDHomeNetworkRouterManagingDeviceSettingsModel, "defaultModelForHomeUUID:", v134);
        v135 = (void *)objc_claimAutoreleasedReturnValue();

        -[HMDHome primaryNetworkRouterManagingDeviceUUID](v175, "primaryNetworkRouterManagingDeviceUUID");
        v136 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v136, "UUIDString");
        v137 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v135, "setPrimaryNetworkRouterManagingDeviceUUID:", v137);

        objc_msgSend(v6, "addObject:", v135);
        -[HMDHome uuid](v175, "uuid");
        v138 = (void *)objc_claimAutoreleasedReturnValue();
        +[HMDHomeNetworkRouterSettingsModel defaultModelForHomeUUID:](HMDHomeNetworkRouterSettingsModel, "defaultModelForHomeUUID:", v138);
        v139 = (void *)objc_claimAutoreleasedReturnValue();

        -[HMDHome activeNetworkRouterUUID](v175, "activeNetworkRouterUUID");
        v140 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v140, "UUIDString");
        v141 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v139, "setActiveNetworkRouterAccessoryUUID:", v141);

        v142 = -[HMDHomeKitVersion initWithVersionString:]([HMDHomeKitVersion alloc], "initWithVersionString:", CFSTR("6.2"));
        -[HMDHome minimumNetworkRouterSupportHomeKitVersion](v175, "minimumNetworkRouterSupportHomeKitVersion");
        v143 = objc_claimAutoreleasedReturnValue();
        if (!v143
          || (v144 = (void *)v143,
              -[HMDHome minimumNetworkRouterSupportHomeKitVersion](v175, "minimumNetworkRouterSupportHomeKitVersion"),
              v145 = (void *)objc_claimAutoreleasedReturnValue(),
              v146 = objc_msgSend(v145, "compare:", v142),
              v145,
              v144,
              v146 == -1))
        {
          -[HMDHomeKitVersion versionString](v142, "versionString");
          v147 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v139, "setMinimumNetworkRouterSupportHomeKitVersion:", v147);

        }
        -[HMDHome minHomeKitVersionForAccessoryNetworkProtectionChange](v175, "minHomeKitVersionForAccessoryNetworkProtectionChange");
        v148 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v148, "versionString");
        v149 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v139, "setMinHomeKitVersionForAccessoryNetworkProtectionChange:", v149);

        objc_msgSend(v6, "addObject:", v139);
        v178 = 0u;
        v179 = 0u;
        v176 = 0u;
        v177 = 0u;
        -[HMDHome networkProtectionGroupRegistry](v175, "networkProtectionGroupRegistry");
        v150 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v150, "persistedGroups");
        v151 = (void *)objc_claimAutoreleasedReturnValue();

        v152 = objc_msgSend(v151, "countByEnumeratingWithState:objects:count:", &v176, v221, 16);
        if (v152)
        {
          v153 = v152;
          v154 = *(_QWORD *)v177;
          do
          {
            for (i1 = 0; i1 != v153; ++i1)
            {
              if (*(_QWORD *)v177 != v154)
                objc_enumerationMutation(v151);
              objc_msgSend(*(id *)(*((_QWORD *)&v176 + 1) + 8 * i1), "modelForVersion:", a3);
              v156 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v6, "addObject:", v156);

            }
            v153 = objc_msgSend(v151, "countByEnumeratingWithState:objects:count:", &v176, v221, 16);
          }
          while (v153);
        }

        +[HMDHomeThreadNetworkModel defaultModelForHome:](HMDHomeThreadNetworkModel, "defaultModelForHome:", v175);
        v157 = (void *)objc_claimAutoreleasedReturnValue();
        -[HMDHome unfilteredThreadNetworkID](v175, "unfilteredThreadNetworkID");
        v158 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v157, "setThreadNetworkID:", v158);

        objc_msgSend(v6, "addObject:", v157);
        -[HMDHome uuid](v175, "uuid");
        v159 = (void *)objc_claimAutoreleasedReturnValue();
        +[HMDHomePersonManagerSettingsModel defaultModelForHomeUUID:](HMDHomePersonManagerSettingsModel, "defaultModelForHomeUUID:", v159);
        v160 = (void *)objc_claimAutoreleasedReturnValue();

        -[HMDHome personManagerZoneUUID](v175, "personManagerZoneUUID");
        v161 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v160, "setZoneUUID:", v161);

        objc_msgSend(v6, "addObject:", v160);
        -[HMDHome labelsByAccessCode](v175, "labelsByAccessCode");
        v162 = (void *)objc_claimAutoreleasedReturnValue();
        +[HMDAccessCodeDataManager createHomeAccessCodeModelsFromLabelsByAccessCode:forHome:](HMDAccessCodeDataManager, "createHomeAccessCodeModelsFromLabelsByAccessCode:forHome:", v162, v175);
        v163 = (void *)objc_claimAutoreleasedReturnValue();

        objc_msgSend(v6, "addObjectsFromArray:", v163);
        -[HMDHome removedUserInfoByAccessCode](v175, "removedUserInfoByAccessCode");
        v164 = (void *)objc_claimAutoreleasedReturnValue();
        +[HMDAccessCodeDataManager createRemovedUserInfoModelsFromRemovedUserInfoByAccessCode:forHome:](HMDAccessCodeDataManager, "createRemovedUserInfoModelsFromRemovedUserInfoByAccessCode:forHome:", v164, v175);
        v165 = (void *)objc_claimAutoreleasedReturnValue();

        objc_msgSend(v6, "addObjectsFromArray:", v165);
      }
    }
  }
  v166 = v6;

  return v166;
}

- (id)modelObjectWithChangeType:(unint64_t)a3
{
  return -[HMDHome modelObjectWithChangeType:version:](self, "modelObjectWithChangeType:version:", a3, 4);
}

- (id)modelObjectWithChangeType:(unint64_t)a3 version:(int64_t)a4
{
  void *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  void *v43;
  void *v44;
  void *v45;
  void *v46;
  void *v47;
  void *v48;
  void *v49;
  void *v50;
  void *v51;
  void *v52;
  void *v53;
  void *v54;
  void *v55;

  -[HMDHome emptyModelObjectWithChangeType:](self, "emptyModelObjectWithChangeType:", a3);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHome name](self, "name");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "setName:", v7);

  -[HMDHome ownerName](self, "ownerName");
  v8 = objc_claimAutoreleasedReturnValue();
  if (v8)
  {
    v9 = (void *)v8;
    -[HMDHome owner](self, "owner");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "publicKey");
    v11 = (void *)objc_claimAutoreleasedReturnValue();

    if (v11)
    {
      -[HMDHome ownerName](self, "ownerName");
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v6, "setOwnerName:", v12);

      -[HMDHome owner](self, "owner");
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v13, "uuid");
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v14, "UUIDString");
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v6, "setOwnerUUID:", v15);

      -[HMDHome owner](self, "owner");
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v16, "userID");
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v6, "setOwnerUserID:", v17);

      -[HMDHome owner](self, "owner");
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v18, "publicKey");
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v6, "setOwnerPublicKey:", v19);

    }
  }
  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithBool:", -[HMDHome isOwnerUser](self, "isOwnerUser"));
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "setOwned:", v20);

  -[HMDHome nfcReaderKey](self, "nfcReaderKey");
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "setNfcReaderKey:", v21);

  -[HMDHome creationDate](self, "creationDate");
  v22 = (void *)objc_claimAutoreleasedReturnValue();

  if (v22)
  {
    -[HMDHome creationDate](self, "creationDate");
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "setCreationDate:", v23);

  }
  -[HMDHome firstHAPAccessoryAddedDate](self, "firstHAPAccessoryAddedDate");
  v24 = (void *)objc_claimAutoreleasedReturnValue();

  if (v24)
  {
    -[HMDHome firstHAPAccessoryAddedDate](self, "firstHAPAccessoryAddedDate");
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "setFirstHAPAccessoryAddedDate:", v25);

  }
  -[HMDHome roomForEntireHome](self, "roomForEntireHome");
  v26 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v26, "uuid");
  v27 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v27, "UUIDString");
  v28 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "setDefaultRoomUUID:", v28);

  -[HMDHome homeLocationHandler](self, "homeLocationHandler");
  v29 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v29, "locationData");
  v30 = (void *)objc_claimAutoreleasedReturnValue();
  encodeRootObject();
  v31 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "setHomeLocationData:", v31);

  if (a4 >= 4)
  {
    -[HMDHome presenceAuthStatus](self, "presenceAuthStatus");
    v32 = (void *)objc_claimAutoreleasedReturnValue();

    if (v32)
    {
      -[HMDHome presenceAuthStatus](self, "presenceAuthStatus");
      v33 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v33, "number");
      v34 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v6, "setPresenceAuthorizationStatus:", v34);

    }
    -[HMDHome presenceComputeStatus](self, "presenceComputeStatus");
    v35 = (void *)objc_claimAutoreleasedReturnValue();

    if (v35)
    {
      -[HMDHome presenceComputeStatus](self, "presenceComputeStatus");
      v36 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v36, "number");
      v37 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v6, "setPresenceComputeStatus:", v37);

    }
    -[HMDHome sharedHomeSourceVersion](self, "sharedHomeSourceVersion");
    v38 = (void *)objc_claimAutoreleasedReturnValue();

    if (v38)
    {
      -[HMDHome sharedHomeSourceVersion](self, "sharedHomeSourceVersion");
      v39 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v6, "setSharedHomeSourceVersion:", v39);

    }
    objc_msgSend(MEMORY[0x24BDD16E0], "numberWithInteger:", -[HMDHome protectionMode](self, "protectionMode"));
    v40 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "setNetworkProtectionMode:", v40);

  }
  if (-[HMDHome isMultiUserEnabled](self, "isMultiUserEnabled"))
  {
    objc_msgSend(MEMORY[0x24BDD16E0], "numberWithBool:", -[HMDHome isMultiUserEnabled](self, "isMultiUserEnabled"));
    v41 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "setMultiUserEnabled:", v41);

  }
  objc_msgSend(v6, "hasAnyUserAcknowledgedCameraRecordingOnboarding");
  v42 = (void *)objc_claimAutoreleasedReturnValue();

  if (v42)
  {
    objc_msgSend(MEMORY[0x24BDD16E0], "numberWithBool:", -[HMDHome hasAnyUserAcknowledgedCameraRecordingOnboarding](self, "hasAnyUserAcknowledgedCameraRecordingOnboarding"));
    v43 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "setHasAnyUserAcknowledgedCameraRecordingOnboarding:", v43);

  }
  if (-[HMDHome hasOnboardedForAccessCode](self, "hasOnboardedForAccessCode"))
  {
    objc_msgSend(MEMORY[0x24BDD16E0], "numberWithBool:", -[HMDHome hasOnboardedForAccessCode](self, "hasOnboardedForAccessCode"));
    v44 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "setHasOnboardedForAccessCode:", v44);

  }
  if (-[HMDHome shouldEncodeHasOnboardedForWalletKey](self, "shouldEncodeHasOnboardedForWalletKey"))
  {
    objc_msgSend(MEMORY[0x24BDD16E0], "numberWithBool:", -[HMDHome hasOnboardedForWalletKey](self, "hasOnboardedForWalletKey"));
    v45 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "setHasOnboardedForWalletKey:", v45);

  }
  -[HMDHome naturalLightingContext](self, "naturalLightingContext");
  v46 = (void *)objc_claimAutoreleasedReturnValue();
  if (v46)
    objc_msgSend(v6, "setNaturalLightingContext:", v46);
  -[HMDHome chipStorage](self, "chipStorage");
  v47 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v47, "updateHomeModel:", v6);

  if (isFeatureMatteriPhoneOnlyPairingControlEnabled())
  {
    -[HMDHome fabric](self, "fabric");
    v48 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v48, "fabricID");
    v49 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "setMatterFabricID:", v49);

  }
  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithBool:", -[HMDHome soundCheckEnabled](self, "soundCheckEnabled"));
  v50 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "setSoundCheckEnabled:", v50);

  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedInteger:", -[HMDHome audioAnalysisClassifierOptions](self, "audioAnalysisClassifierOptions"));
  v51 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "setAnalysisOptions:", v51);

  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithBool:", -[HMDHome didOnboardAudioAnalysis](self, "didOnboardAudioAnalysis"));
  v52 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "setDidOnboardAnalysis:", v52);

  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedInteger:", -[HMDHome siriPhraseOptions](self, "siriPhraseOptions"));
  v53 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "setSiriPhraseOptions:", v53);

  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithBool:", -[HMDHome locationServicesEnabled](self, "locationServicesEnabled"));
  v54 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "setLocationServicesEnabled:", v54);

  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithBool:", -[HMDHome didOnboardLocationServices](self, "didOnboardLocationServices"));
  v55 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "setDidOnboardLocationServices:", v55);

  return v6;
}

- (id)emptyModelObjectWithChangeType:(unint64_t)a3
{
  HMDHomeModel *v5;
  void *v6;
  void *v7;
  HMDHomeModel *v8;

  v5 = [HMDHomeModel alloc];
  -[HMDHome uuid](self, "uuid");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = (void *)objc_msgSend(objc_alloc(MEMORY[0x24BDD1880]), "initWithUUIDString:", CFSTR("1CAEDC10-E3E5-41A4-BB17-A9EEBA14A938"));
  v8 = -[HMDBackingStoreModelObject initWithObjectChangeType:uuid:parentUUID:](v5, "initWithObjectChangeType:uuid:parentUUID:", a3, v6, v7);

  return v8;
}

- (id)homeConfigurationUUID
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  _QWORD v7[2];

  v7[1] = *MEMORY[0x24BDAC8D0];
  v2 = (void *)MEMORY[0x24BDD1880];
  -[HMDHome uuid](self, "uuid");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v7[0] = CFSTR("6741775F-2ED4-4DF8-B582-1F64BB3D1C75");
  objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", v7, 1);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "hm_deriveUUIDFromBaseUUID:identifierSalt:withSalts:", v3, 0, v4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  return v5;
}

- (id)homeConfigurationModelObjectWithChangeType:(unint64_t)a3
{
  HMDHomeConfigurationModel *v5;
  void *v6;
  void *v7;
  HMDHomeConfigurationModel *v8;
  void *v9;

  v5 = [HMDHomeConfigurationModel alloc];
  -[HMDHome homeConfigurationUUID](self, "homeConfigurationUUID");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHome uuid](self, "uuid");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = -[HMDBackingStoreModelObject initWithObjectChangeType:uuid:parentUUID:](v5, "initWithObjectChangeType:uuid:parentUUID:", a3, v6, v7);

  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithInteger:", -[HMDHome configurationVersion](self, "configurationVersion"));
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHomeConfigurationModel setConfigurationVersion:](v8, "setConfigurationVersion:", v9);

  return v8;
}

- (void)_registerStateHandler
{
  void *v3;
  uint64_t v4;
  id v5;
  id location;

  objc_initWeak(&location, self);
  -[HMDHome workQueue](self, "workQueue");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = MEMORY[0x24BDAC760];
  objc_copyWeak(&v5, &location);
  -[HMDHome setStateHandle:](self, "setStateHandle:", os_state_add_handler(), v4, 3221225472, __32__HMDHome__registerStateHandler__block_invoke, &unk_24E796968);

  objc_destroyWeak(&v5);
  objc_destroyWeak(&location);
}

- (void)_deregisterStateHandler
{
  if (-[HMDHome stateHandle](self, "stateHandle"))
  {
    -[HMDHome stateHandle](self, "stateHandle");
    os_state_remove_handler();
    -[HMDHome setStateHandle:](self, "setStateHandle:", 0);
  }
}

- (NSArray)mediaSessions
{
  void *v3;

  os_unfair_recursive_lock_lock_with_options();
  v3 = (void *)-[NSMutableArray copy](self->_mediaSessions, "copy");
  os_unfair_recursive_lock_unlock();
  return (NSArray *)v3;
}

- (id)mediaSessionWithIdentifier:(id)a3
{
  id v4;
  void *v5;
  void *v6;

  v4 = a3;
  -[HMDHome mediaSessions](self, "mediaSessions");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "hmf_firstObjectWithValue:forKeyPath:", v4, CFSTR("sessionIdentifier"));
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  return v6;
}

- (id)mediaSessionWithUUID:(id)a3
{
  id v4;
  void *v5;
  void *v6;

  v4 = a3;
  -[HMDHome mediaSessions](self, "mediaSessions");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "hmf_firstObjectWithUUID:", v4);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  return v6;
}

- (void)addMediaSession:(id)a3
{
  id v4;

  v4 = a3;
  os_unfair_recursive_lock_lock_with_options();
  if ((-[NSMutableArray containsObject:](self->_mediaSessions, "containsObject:", v4) & 1) == 0)
    -[NSMutableArray addObject:](self->_mediaSessions, "addObject:", v4);
  os_unfair_recursive_lock_unlock();

}

- (void)removeMediaSession:(id)a3
{
  id v4;

  v4 = a3;
  os_unfair_recursive_lock_lock_with_options();
  if (-[NSMutableArray containsObject:](self->_mediaSessions, "containsObject:", v4))
    -[NSMutableArray removeObject:](self->_mediaSessions, "removeObject:", v4);
  os_unfair_recursive_lock_unlock();

}

- (NSArray)mediaSessionStates
{
  void *v3;

  os_unfair_recursive_lock_lock_with_options();
  v3 = (void *)-[NSMutableArray copy](self->_mediaSessionStates, "copy");
  os_unfair_recursive_lock_unlock();
  return (NSArray *)v3;
}

- (id)mediaSessionStateWithIdentifier:(id)a3
{
  id v4;
  id v5;
  id v6;
  void *v7;
  void *v8;
  id v9;
  id v10;
  void *v11;
  _QWORD v13[4];
  id v14;
  id v15;

  v4 = a3;
  if ((objc_msgSend(v4, "hasPrefix:", CFSTR("direct://")) & 1) != 0)
  {
    v5 = v4;
    objc_msgSend(v5, "substringFromIndex:", 8);
    v6 = (id)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("direct://%@"), v4);
    v5 = (id)objc_claimAutoreleasedReturnValue();
    v6 = v4;
  }
  v7 = v6;
  -[HMDHome mediaSessionStates](self, "mediaSessionStates");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v13[0] = MEMORY[0x24BDAC760];
  v13[1] = 3221225472;
  v13[2] = __43__HMDHome_mediaSessionStateWithIdentifier___block_invoke;
  v13[3] = &unk_24E776F68;
  v14 = v5;
  v15 = v7;
  v9 = v7;
  v10 = v5;
  objc_msgSend(v8, "na_firstObjectPassingTest:", v13);
  v11 = (void *)objc_claimAutoreleasedReturnValue();

  return v11;
}

- (void)addMediaSessionState:(id)a3
{
  id v4;

  v4 = a3;
  os_unfair_recursive_lock_lock_with_options();
  if ((-[NSMutableArray containsObject:](self->_mediaSessionStates, "containsObject:", v4) & 1) == 0)
    -[NSMutableArray addObject:](self->_mediaSessionStates, "addObject:", v4);
  os_unfair_recursive_lock_unlock();

}

- (void)removeMediaSessionState:(id)a3
{
  id v4;

  v4 = a3;
  os_unfair_recursive_lock_lock_with_options();
  if (-[NSMutableArray containsObject:](self->_mediaSessionStates, "containsObject:", v4))
    -[NSMutableArray removeObject:](self->_mediaSessionStates, "removeObject:", v4);
  os_unfair_recursive_lock_unlock();

}

- (void)redispatchMediaReadRequests:(id)a3 viaDevice:(id)a4 completion:(id)a5
{
  id v8;
  id v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  id v19;
  _QWORD v20[4];
  id v21;
  id v22;
  id v23;
  id location;
  _QWORD v25[2];
  _QWORD v26[2];
  _QWORD v27[2];

  v27[1] = *MEMORY[0x24BDAC8D0];
  v8 = a3;
  v19 = a4;
  v9 = a5;
  +[HMDMediaPropertyRequest serializeReadRequests:](HMDMediaPropertyRequest, "serializeReadRequests:", v8);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v10, "count"))
  {
    -[HMDHome uuid](self, "uuid");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "UUIDString");
    v12 = (void *)objc_claimAutoreleasedReturnValue();

    v25[0] = CFSTR("kMediaPropertiesListKey");
    v25[1] = CFSTR("kHomeUUID");
    v26[0] = v10;
    v26[1] = v12;
    objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v26, v25, 2);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    v14 = (void *)MEMORY[0x24BE3F1D0];
    -[HMDHome messageDestination](self, "messageDestination");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v14, "messageWithName:qualityOfService:destination:payload:", CFSTR("kMediaPropertiesReadRequestKey"), 33, v15, v13);
    v16 = (void *)objc_claimAutoreleasedReturnValue();

    objc_initWeak(&location, self);
    v20[0] = MEMORY[0x24BDAC760];
    v20[1] = 3221225472;
    v20[2] = __60__HMDHome_redispatchMediaReadRequests_viaDevice_completion___block_invoke;
    v20[3] = &unk_24E796558;
    objc_copyWeak(&v23, &location);
    v22 = v9;
    v21 = v8;
    objc_msgSend(v16, "setResponseHandler:", v20);
    -[HMDHome uuid](self, "uuid");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHome workQueue](self, "workQueue");
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHome redispatchToResidentMessage:target:responseQueue:viaDevice:](self, "redispatchToResidentMessage:target:responseQueue:viaDevice:", v16, v17, v18, v19);

    objc_destroyWeak(&v23);
    objc_destroyWeak(&location);
LABEL_5:

    goto LABEL_6;
  }
  if (v9)
  {
    objc_msgSend(MEMORY[0x24BDD1540], "hmErrorWithCode:", 3);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    +[HMDMediaPropertyResponse propertyResponsesFromRequests:error:](HMDMediaPropertyResponse, "propertyResponsesFromRequests:error:", v8, v12);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    v27[0] = v13;
    objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", v27, 1);
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    (*((void (**)(id, void *))v9 + 2))(v9, v16);
    goto LABEL_5;
  }
LABEL_6:

}

- (void)_handleReadMediaProperties:(id)a3 source:(unint64_t)a4 message:(id)a5 completionHandler:(id)a6
{
  id v8;
  uint64_t v9;
  void *v10;
  void *v11;
  void *v12;
  id v13;
  void *v14;
  NSObject *v15;
  id v16;
  void *v17;
  void *v18;
  id v19;
  void *v20;
  void *v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t i;
  void *v26;
  void *v27;
  int v28;
  void *v29;
  uint64_t v30;
  void *v31;
  int v32;
  void *v33;
  int v34;
  void *v35;
  int v36;
  void *v37;
  void *v38;
  BOOL v39;
  void *v40;
  void *v41;
  BOOL v42;
  void *v43;
  int v44;
  void *v45;
  void *v46;
  NSObject *v47;
  id v48;
  void *v49;
  HMDHome *v50;
  NSObject *v51;
  id v52;
  void *v53;
  void *v54;
  void *v55;
  HMDHome *v56;
  NSObject *v57;
  id v58;
  void *v59;
  void *v60;
  void *v61;
  void *v62;
  void *v63;
  uint64_t v64;
  NSObject *v65;
  id v66;
  id v67;
  id v68;
  id v69;
  void *v70;
  HMDHome *v71;
  void *v72;
  NSObject *group;
  id obj;
  void *v75;
  void *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  void *v80;
  void *v81;
  void *v82;
  uint64_t v83;
  void *v85;
  uint64_t v86;
  uint64_t v87;
  void *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  _QWORD v93[4];
  id v94;
  id v95;
  _QWORD v96[4];
  NSObject *v97;
  id v98;
  id v99;
  _QWORD block[4];
  id v101;
  id v102;
  NSObject *v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  id location;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  uint8_t v113[128];
  uint8_t buf[4];
  id v115;
  __int16 v116;
  void *v117;
  __int16 v118;
  uint64_t v119;
  __int16 v120;
  void *v121;
  uint64_t v122;

  v122 = *MEMORY[0x24BDAC8D0];
  v8 = a3;
  v68 = a5;
  v69 = a6;
  group = dispatch_group_create();
  v75 = v8;
  objc_msgSend(MEMORY[0x24BDBCED8], "dictionaryWithCapacity:", objc_msgSend(v8, "count"));
  v72 = (void *)objc_claimAutoreleasedReturnValue();
  objc_initWeak(&location, self);
  v106 = 0u;
  v107 = 0u;
  v104 = 0u;
  v105 = 0u;
  objc_msgSend(v8, "allKeys");
  obj = (id)objc_claimAutoreleasedReturnValue();
  v78 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v104, v113, 16);
  if (v78)
  {
    v77 = *(_QWORD *)v105;
    v91 = *MEMORY[0x24BDD66E0];
    v92 = *MEMORY[0x24BDD66B8];
    v89 = *MEMORY[0x24BDD6708];
    v90 = *MEMORY[0x24BDD6738];
    v86 = *MEMORY[0x24BDD6758];
    v83 = *MEMORY[0x24BDD66C8];
    v79 = *MEMORY[0x24BDD6748];
    do
    {
      v87 = 0;
      do
      {
        if (*(_QWORD *)v105 != v77)
          objc_enumerationMutation(obj);
        v9 = *(_QWORD *)(*((_QWORD *)&v104 + 1) + 8 * v87);
        v85 = (void *)objc_msgSend(objc_alloc(MEMORY[0x24BDD1880]), "initWithUUIDString:", v9, v68);
        -[HMDHome mediaProfileWithUUID:](self, "mediaProfileWithUUID:");
        v88 = (void *)objc_claimAutoreleasedReturnValue();
        if (v88)
        {
          objc_msgSend(v75, "hmf_arrayForKey:", v9);
          v81 = (void *)objc_claimAutoreleasedReturnValue();
          +[HMDMediaPropertyRequest deserializeReadRequests:mediaProfile:](HMDMediaPropertyRequest, "deserializeReadRequests:mediaProfile:");
          v10 = (void *)objc_claimAutoreleasedReturnValue();
          if (!objc_msgSend(v10, "count"))
            goto LABEL_53;
          objc_msgSend(v88, "mediaSession");
          v82 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v88, "accessory");
          v11 = (void *)objc_claimAutoreleasedReturnValue();
          v80 = v10;
          v76 = v11;
          if (v11)
          {
            objc_msgSend(v11, "identifier");
            v12 = (void *)objc_claimAutoreleasedReturnValue();
            -[HMDHome mediaSessionStateWithIdentifier:](self, "mediaSessionStateWithIdentifier:", v12);
            v13 = (id)objc_claimAutoreleasedReturnValue();

            if (!v82 && v13)
            {
              if (-[HMDHome isCurrentDevicePrimaryResident](self, "isCurrentDevicePrimaryResident"))
              {
                v14 = (void *)MEMORY[0x227676638]();
                v71 = self;
                HMFGetOSLogHandle();
                v15 = (id)objc_claimAutoreleasedReturnValue();
                if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
                {
                  HMFGetLogIdentifier();
                  v16 = (id)objc_claimAutoreleasedReturnValue();
                  objc_msgSend(v88, "accessory");
                  v17 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend(v17, "name");
                  v18 = (void *)objc_claimAutoreleasedReturnValue();
                  *(_DWORD *)buf = 138543874;
                  v115 = v16;
                  v116 = 2112;
                  v117 = v18;
                  v118 = 2112;
                  v119 = v9;
                  _os_log_impl(&dword_2218F0000, v15, OS_LOG_TYPE_INFO, "%{public}@Accessory with media profile %@/%@ has no session, returning local state", buf, 0x20u);

                }
                objc_autoreleasePoolPop(v14);
                v13 = v13;
                v19 = v80;
                v70 = v19;
                if (self)
                {
                  objc_msgSend(MEMORY[0x24BDBCEB8], "arrayWithCapacity:", objc_msgSend(v19, "count"));
                  v20 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend(MEMORY[0x24BDBCE60], "now");
                  v21 = (void *)objc_claimAutoreleasedReturnValue();
                  v111 = 0u;
                  v112 = 0u;
                  v109 = 0u;
                  v110 = 0u;
                  v22 = v70;
                  v23 = objc_msgSend(v22, "countByEnumeratingWithState:objects:count:", &v109, buf, 16);
                  if (!v23)
                    goto LABEL_42;
                  v24 = *(_QWORD *)v110;
                  while (1)
                  {
                    for (i = 0; i != v23; ++i)
                    {
                      if (*(_QWORD *)v110 != v24)
                        objc_enumerationMutation(v22);
                      v26 = *(void **)(*((_QWORD *)&v109 + 1) + 8 * i);
                      objc_msgSend(v26, "property");
                      v27 = (void *)objc_claimAutoreleasedReturnValue();
                      v28 = objc_msgSend(v27, "isEqualToString:", v92);

                      if (v28)
                      {
                        objc_msgSend(v13, "sessionIdentifier");
                        v29 = (void *)objc_claimAutoreleasedReturnValue();
                        +[HMDMediaPropertyResponse responseWithRequest:value:updatedTime:](HMDMediaPropertyResponse, "responseWithRequest:value:updatedTime:", v26, v29, v21);
                        v30 = objc_claimAutoreleasedReturnValue();
                        goto LABEL_38;
                      }
                      objc_msgSend(v26, "property");
                      v31 = (void *)objc_claimAutoreleasedReturnValue();
                      v32 = objc_msgSend(v31, "isEqualToString:", v91);

                      if (v32)
                      {
                        objc_msgSend(MEMORY[0x24BDD16E0], "numberWithInteger:", objc_msgSend(v13, "playbackState"));
                        v29 = (void *)objc_claimAutoreleasedReturnValue();
                        +[HMDMediaPropertyResponse responseWithRequest:value:updatedTime:](HMDMediaPropertyResponse, "responseWithRequest:value:updatedTime:", v26, v29, v21);
                        v30 = objc_claimAutoreleasedReturnValue();
                        goto LABEL_38;
                      }
                      objc_msgSend(v26, "property");
                      v33 = (void *)objc_claimAutoreleasedReturnValue();
                      v34 = objc_msgSend(v33, "isEqualToString:", v90);

                      if (v34)
                      {
                        objc_msgSend(MEMORY[0x24BDD16E0], "numberWithInteger:", objc_msgSend(v13, "shuffleState"));
                        v29 = (void *)objc_claimAutoreleasedReturnValue();
                        +[HMDMediaPropertyResponse responseWithRequest:value:updatedTime:](HMDMediaPropertyResponse, "responseWithRequest:value:updatedTime:", v26, v29, v21);
                        v30 = objc_claimAutoreleasedReturnValue();
                        goto LABEL_38;
                      }
                      objc_msgSend(v26, "property");
                      v35 = (void *)objc_claimAutoreleasedReturnValue();
                      v36 = objc_msgSend(v35, "isEqualToString:", v89);

                      if (v36)
                      {
                        objc_msgSend(MEMORY[0x24BDD16E0], "numberWithInteger:", objc_msgSend(v13, "repeatState"));
                        v29 = (void *)objc_claimAutoreleasedReturnValue();
                        +[HMDMediaPropertyResponse responseWithRequest:value:updatedTime:](HMDMediaPropertyResponse, "responseWithRequest:value:updatedTime:", v26, v29, v21);
                        v30 = objc_claimAutoreleasedReturnValue();
                        goto LABEL_38;
                      }
                      objc_msgSend(v26, "property");
                      v37 = (void *)objc_claimAutoreleasedReturnValue();
                      if ((objc_msgSend(v37, "isEqualToString:", v86) & 1) != 0)
                      {
                        objc_msgSend(v13, "volume");
                        v38 = (void *)objc_claimAutoreleasedReturnValue();
                        v39 = v38 == 0;

                        if (!v39)
                        {
                          objc_msgSend(v13, "volume");
                          v29 = (void *)objc_claimAutoreleasedReturnValue();
                          +[HMDMediaPropertyResponse responseWithRequest:value:updatedTime:](HMDMediaPropertyResponse, "responseWithRequest:value:updatedTime:", v26, v29, v21);
                          v30 = objc_claimAutoreleasedReturnValue();
                          goto LABEL_38;
                        }
                      }
                      else
                      {

                      }
                      objc_msgSend(v26, "property");
                      v40 = (void *)objc_claimAutoreleasedReturnValue();
                      if ((objc_msgSend(v40, "isEqualToString:", v83) & 1) != 0)
                      {
                        objc_msgSend(v13, "mediaUniqueIdentifier");
                        v41 = (void *)objc_claimAutoreleasedReturnValue();
                        v42 = v41 == 0;

                        if (!v42)
                        {
                          objc_msgSend(v13, "mediaUniqueIdentifier");
                          v29 = (void *)objc_claimAutoreleasedReturnValue();
                          +[HMDMediaPropertyResponse responseWithRequest:value:updatedTime:](HMDMediaPropertyResponse, "responseWithRequest:value:updatedTime:", v26, v29, v21);
                          v30 = objc_claimAutoreleasedReturnValue();
                          goto LABEL_38;
                        }
                      }
                      else
                      {

                      }
                      objc_msgSend(v26, "property");
                      v43 = (void *)objc_claimAutoreleasedReturnValue();
                      v44 = objc_msgSend(v43, "isEqualToString:", v79);

                      if (!v44)
                        continue;
                      objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedInteger:", objc_msgSend(v13, "sleepWakeState"));
                      v29 = (void *)objc_claimAutoreleasedReturnValue();
                      +[HMDMediaPropertyResponse responseWithRequest:value:updatedTime:](HMDMediaPropertyResponse, "responseWithRequest:value:updatedTime:", v26, v29, v21);
                      v30 = objc_claimAutoreleasedReturnValue();
LABEL_38:
                      v45 = (void *)v30;

                      if (v45)
                      {
                        objc_msgSend(v20, "addObject:", v45);

                      }
                    }
                    v23 = objc_msgSend(v22, "countByEnumeratingWithState:objects:count:", &v109, buf, 16);
                    if (!v23)
                    {
LABEL_42:

                      v46 = (void *)objc_msgSend(v20, "copy");
                      goto LABEL_43;
                    }
                  }
                }
                v46 = 0;
LABEL_43:

                dispatch_group_enter(group);
                -[HMDHome workQueue](v71, "workQueue");
                v47 = objc_claimAutoreleasedReturnValue();
                block[0] = MEMORY[0x24BDAC760];
                block[1] = 3221225472;
                block[2] = __71__HMDHome__handleReadMediaProperties_source_message_completionHandler___block_invoke;
                block[3] = &unk_24E79BBD0;
                v101 = v72;
                v102 = v46;
                v103 = group;
                v48 = v46;
                dispatch_async(v47, block);

LABEL_52:
                v10 = v80;
LABEL_53:

                goto LABEL_54;
              }
LABEL_49:
              v55 = (void *)MEMORY[0x227676638]();
              v56 = self;
              HMFGetOSLogHandle();
              v57 = (id)objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v57, OS_LOG_TYPE_INFO))
              {
                HMFGetLogIdentifier();
                v58 = (id)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v88, "accessory");
                v59 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v59, "name");
                v60 = (void *)objc_claimAutoreleasedReturnValue();
                *(_DWORD *)buf = 138543874;
                v115 = v58;
                v116 = 2112;
                v117 = v60;
                v118 = 2112;
                v119 = v9;
                _os_log_impl(&dword_2218F0000, v57, OS_LOG_TYPE_INFO, "%{public}@Accessory with media profile %@/%@ not reachable for reading", buf, 0x20u);

              }
              objc_autoreleasePoolPop(v55);
              objc_msgSend(MEMORY[0x24BDD1540], "hmErrorWithCode:", 4);
              v61 = (void *)objc_claimAutoreleasedReturnValue();
              +[HMDMediaPropertyResponse propertyResponsesFromRequests:error:](HMDMediaPropertyResponse, "propertyResponsesFromRequests:error:", v80, v61);
              v62 = (void *)objc_claimAutoreleasedReturnValue();
              +[HMDMediaPropertyResponse serializeResponses:](HMDMediaPropertyResponse, "serializeResponses:", v62);
              v63 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v72, "addEntriesFromDictionary:", v63);

              goto LABEL_52;
            }
          }
          else
          {
            v13 = 0;
          }
          if (v82)
          {
            dispatch_group_enter(group);
            v49 = (void *)MEMORY[0x227676638]();
            v50 = self;
            HMFGetOSLogHandle();
            v51 = (id)objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v51, OS_LOG_TYPE_INFO))
            {
              HMFGetLogIdentifier();
              v52 = (id)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v88, "accessory");
              v53 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v53, "name");
              v54 = (void *)objc_claimAutoreleasedReturnValue();
              *(_DWORD *)buf = 138544130;
              v115 = v52;
              v116 = 2112;
              v117 = v54;
              v118 = 2112;
              v119 = v9;
              v120 = 2112;
              v121 = v82;
              _os_log_impl(&dword_2218F0000, v51, OS_LOG_TYPE_INFO, "%{public}@Reading state for accessory with media profile %@/%@ from media session: %@", buf, 0x2Au);

            }
            objc_autoreleasePoolPop(v49);
            v96[0] = MEMORY[0x24BDAC760];
            v96[1] = 3221225472;
            v96[2] = __71__HMDHome__handleReadMediaProperties_source_message_completionHandler___block_invoke_1658;
            v96[3] = &unk_24E7945F0;
            objc_copyWeak(&v99, &location);
            v97 = group;
            v98 = v72;
            objc_msgSend(v82, "readProperties:completion:", v80, v96);

            objc_destroyWeak(&v99);
            goto LABEL_52;
          }
          goto LABEL_49;
        }
LABEL_54:

        ++v87;
      }
      while (v87 != v78);
      v64 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v104, v113, 16);
      v78 = v64;
    }
    while (v64);
  }

  -[HMDHome workQueue](self, "workQueue");
  v65 = objc_claimAutoreleasedReturnValue();
  v93[0] = MEMORY[0x24BDAC760];
  v93[1] = 3221225472;
  v93[2] = __71__HMDHome__handleReadMediaProperties_source_message_completionHandler___block_invoke_3;
  v93[3] = &unk_24E79C2B8;
  v94 = v72;
  v95 = v69;
  v66 = v72;
  v67 = v69;
  dispatch_group_notify(group, v65, v93);

  objc_destroyWeak(&location);
}

- (void)_handleMediaPropertiesRead:(id)a3
{
  id v4;
  void *v5;
  uint64_t v6;
  void *v7;
  HMDHome *v8;
  NSObject *v9;
  void *v10;
  void *v11;
  _QWORD v12[4];
  id v13;
  id v14;
  id location[4];

  location[3] = *(id *)MEMORY[0x24BDAC8D0];
  v4 = a3;
  objc_msgSend(v4, "dictionaryForKey:", CFSTR("kMediaPropertiesListKey"));
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v5, "count"))
  {
    v6 = parseMessageSource(v4);
    objc_initWeak(location, self);
    v12[0] = MEMORY[0x24BDAC760];
    v12[1] = 3221225472;
    v12[2] = __38__HMDHome__handleMediaPropertiesRead___block_invoke;
    v12[3] = &unk_24E7861E8;
    objc_copyWeak(&v14, location);
    v13 = v4;
    -[HMDHome _handleReadMediaProperties:source:message:completionHandler:](self, "_handleReadMediaProperties:source:message:completionHandler:", v5, v6, v13, v12);

    objc_destroyWeak(&v14);
    objc_destroyWeak(location);
  }
  else
  {
    v7 = (void *)MEMORY[0x227676638]();
    v8 = self;
    HMFGetOSLogHandle();
    v9 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      HMFGetLogIdentifier();
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      LODWORD(location[0]) = 138543362;
      *(id *)((char *)location + 4) = v10;
      _os_log_impl(&dword_2218F0000, v9, OS_LOG_TYPE_DEFAULT, "%{public}@None of the properties in media properties read are valid", (uint8_t *)location, 0xCu);

    }
    objc_autoreleasePoolPop(v7);
    objc_msgSend(MEMORY[0x24BDD1540], "hmErrorWithCode:", 3);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "respondWithError:", v11);

  }
}

- (void)redispatchMediaWriteRequests:(id)a3 viaDevice:(id)a4 completion:(id)a5
{
  id v8;
  id v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  id v19;
  _QWORD v20[4];
  id v21;
  id v22;
  id v23;
  id location;
  _QWORD v25[2];
  _QWORD v26[2];
  _QWORD v27[2];

  v27[1] = *MEMORY[0x24BDAC8D0];
  v8 = a3;
  v19 = a4;
  v9 = a5;
  +[HMDMediaPropertyWriteRequest serializeWriteRequests:](HMDMediaPropertyWriteRequest, "serializeWriteRequests:", v8);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v10, "count"))
  {
    -[HMDHome uuid](self, "uuid");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "UUIDString");
    v12 = (void *)objc_claimAutoreleasedReturnValue();

    v25[0] = CFSTR("kMediaPropertiesListKey");
    v25[1] = CFSTR("kHomeUUID");
    v26[0] = v10;
    v26[1] = v12;
    objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v26, v25, 2);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    v14 = (void *)MEMORY[0x24BE3F1D0];
    -[HMDHome messageDestination](self, "messageDestination");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v14, "messageWithName:qualityOfService:destination:payload:", CFSTR("kMediaPropertiesWriteRequestKey"), 25, v15, v13);
    v16 = (void *)objc_claimAutoreleasedReturnValue();

    objc_initWeak(&location, self);
    v20[0] = MEMORY[0x24BDAC760];
    v20[1] = 3221225472;
    v20[2] = __61__HMDHome_redispatchMediaWriteRequests_viaDevice_completion___block_invoke;
    v20[3] = &unk_24E796558;
    objc_copyWeak(&v23, &location);
    v22 = v9;
    v21 = v8;
    objc_msgSend(v16, "setResponseHandler:", v20);
    -[HMDHome uuid](self, "uuid");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHome workQueue](self, "workQueue");
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHome redispatchToResidentMessage:target:responseQueue:viaDevice:](self, "redispatchToResidentMessage:target:responseQueue:viaDevice:", v16, v17, v18, v19);

    objc_destroyWeak(&v23);
    objc_destroyWeak(&location);
LABEL_5:

    goto LABEL_6;
  }
  if (v9)
  {
    objc_msgSend(MEMORY[0x24BDD1540], "hmErrorWithCode:", 3);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    +[HMDMediaPropertyResponse propertyResponsesFromRequests:error:](HMDMediaPropertyResponse, "propertyResponsesFromRequests:error:", v8, v12);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    v27[0] = v13;
    objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", v27, 1);
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    (*((void (**)(id, void *))v9 + 2))(v9, v16);
    goto LABEL_5;
  }
LABEL_6:

}

- (void)_handleWriteMediaProperties:(id)a3 source:(unint64_t)a4 requestMessage:(id)a5 completionHandler:(id)a6
{
  id v8;
  void *v9;
  uint64_t v10;
  uint64_t i;
  uint64_t v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  HMDHome *v21;
  NSObject *v22;
  id v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  NSObject *v30;
  id v31;
  id v32;
  id v33;
  id v34;
  NSObject *log;
  void *v36;
  id obj;
  NSObject *group;
  uint64_t v39;
  void *v40;
  void *v41;
  uint64_t v42;
  _QWORD block[4];
  id v45;
  id v46;
  _QWORD v47[4];
  id v48;
  NSObject *v49;
  id v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  id location;
  uint8_t buf[4];
  id v57;
  __int16 v58;
  void *v59;
  __int16 v60;
  uint64_t v61;
  _BYTE v62[128];
  uint64_t v63;

  v63 = *MEMORY[0x24BDAC8D0];
  v8 = a3;
  v33 = a5;
  v34 = a6;
  v41 = v8;
  objc_msgSend(MEMORY[0x24BDBCED8], "dictionaryWithCapacity:", objc_msgSend(v8, "count"));
  v40 = (void *)objc_claimAutoreleasedReturnValue();
  group = dispatch_group_create();
  objc_initWeak(&location, self);
  v53 = 0u;
  v54 = 0u;
  v51 = 0u;
  v52 = 0u;
  objc_msgSend(v8, "allKeys");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v51, v62, 16);
  if (v10)
  {
    v39 = *(_QWORD *)v52;
    obj = v9;
    do
    {
      v42 = v10;
      for (i = 0; i != v42; ++i)
      {
        if (*(_QWORD *)v52 != v39)
          objc_enumerationMutation(obj);
        v12 = *(_QWORD *)(*((_QWORD *)&v51 + 1) + 8 * i);
        v13 = (void *)objc_msgSend(objc_alloc(MEMORY[0x24BDD1880]), "initWithUUIDString:", v12, v33);
        -[HMDHome mediaProfileWithUUID:](self, "mediaProfileWithUUID:", v13);
        v14 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v41, "hmf_dictionaryForKey:", v12);
        v15 = (void *)objc_claimAutoreleasedReturnValue();
        +[HMDMediaPropertyWriteRequest deserializeWriteRequests:mediaProfile:](HMDMediaPropertyWriteRequest, "deserializeWriteRequests:mediaProfile:", v15, v14);
        v16 = (void *)objc_claimAutoreleasedReturnValue();
        if (objc_msgSend(v16, "count"))
        {
          objc_msgSend(v14, "mediaSession");
          v17 = (void *)objc_claimAutoreleasedReturnValue();
          if (v17)
          {
            dispatch_group_enter(group);
            v47[0] = MEMORY[0x24BDAC760];
            v47[1] = 3221225472;
            v47[2] = __79__HMDHome__handleWriteMediaProperties_source_requestMessage_completionHandler___block_invoke;
            v47[3] = &unk_24E7945F0;
            objc_copyWeak(&v50, &location);
            v48 = v40;
            v49 = group;
            objc_msgSend(v17, "writeProperties:completion:", v16, v47);

            objc_destroyWeak(&v50);
          }
          else
          {
            v20 = (void *)MEMORY[0x227676638]();
            v21 = self;
            HMFGetOSLogHandle();
            v22 = (id)objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v22, OS_LOG_TYPE_INFO))
            {
              log = v22;
              v36 = v20;
              HMFGetLogIdentifier();
              v23 = (id)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v14, "accessory");
              v24 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v24, "name");
              v25 = (void *)objc_claimAutoreleasedReturnValue();
              *(_DWORD *)buf = 138543874;
              v57 = v23;
              v58 = 2112;
              v59 = v25;
              v60 = 2112;
              v61 = v12;
              v26 = v23;
              v22 = log;
              _os_log_impl(&dword_2218F0000, log, OS_LOG_TYPE_INFO, "%{public}@Accessory with media profile %@/%@ not reachable for writing", buf, 0x20u);

              v20 = v36;
            }

            objc_autoreleasePoolPop(v20);
            objc_msgSend(MEMORY[0x24BDD1540], "hmErrorWithCode:", 4);
            v27 = (void *)objc_claimAutoreleasedReturnValue();
            +[HMDMediaPropertyResponse propertyResponsesFromRequests:error:](HMDMediaPropertyResponse, "propertyResponsesFromRequests:error:", v16, v27);
            v28 = (void *)objc_claimAutoreleasedReturnValue();
            +[HMDMediaPropertyResponse serializeResponses:](HMDMediaPropertyResponse, "serializeResponses:", v28);
            v29 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v40, "addEntriesFromDictionary:", v29);

            v17 = 0;
          }
        }
        else
        {
          objc_msgSend(MEMORY[0x24BDD1540], "hmErrorWithCode:", 2);
          v17 = (void *)objc_claimAutoreleasedReturnValue();
          +[HMDMediaPropertyResponse propertyResponsesFromRequests:error:](HMDMediaPropertyResponse, "propertyResponsesFromRequests:error:", v16, v17);
          v18 = (void *)objc_claimAutoreleasedReturnValue();
          +[HMDMediaPropertyResponse serializeResponses:](HMDMediaPropertyResponse, "serializeResponses:", v18);
          v19 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v40, "addEntriesFromDictionary:", v19);

        }
      }
      v9 = obj;
      v10 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v51, v62, 16);
    }
    while (v10);
  }

  -[HMDHome workQueue](self, "workQueue");
  v30 = objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x24BDAC760];
  block[1] = 3221225472;
  block[2] = __79__HMDHome__handleWriteMediaProperties_source_requestMessage_completionHandler___block_invoke_3;
  block[3] = &unk_24E79C2B8;
  v45 = v40;
  v46 = v34;
  v31 = v40;
  v32 = v34;
  dispatch_group_notify(group, v30, block);

  objc_destroyWeak(&location);
}

- (void)_handleMediaPropertiesWrite:(id)a3
{
  id v4;
  uint64_t v5;
  void *v6;
  id v7;
  _QWORD v8[4];
  id v9;
  id v10;
  id location;

  v4 = a3;
  v5 = parseMessageSource(v4);
  objc_msgSend(v4, "dictionaryForKey:", CFSTR("kMediaPropertiesListKey"));
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_initWeak(&location, self);
  v8[0] = MEMORY[0x24BDAC760];
  v8[1] = 3221225472;
  v8[2] = __39__HMDHome__handleMediaPropertiesWrite___block_invoke;
  v8[3] = &unk_24E7861E8;
  objc_copyWeak(&v10, &location);
  v7 = v4;
  v9 = v7;
  -[HMDHome _handleWriteMediaProperties:source:requestMessage:completionHandler:](self, "_handleWriteMediaProperties:source:requestMessage:completionHandler:", v6, v5, v7, v8);

  objc_destroyWeak(&v10);
  objc_destroyWeak(&location);

}

- (NSArray)hapAccessories
{
  void *v2;
  void *v3;
  void *v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  void *v11;
  id v12;
  void *v13;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  _BYTE v19[128];
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  -[HMDHome accessories](self, "accessories");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = (void *)objc_msgSend(v2, "copy");

  v4 = (void *)objc_msgSend(objc_alloc(MEMORY[0x24BDBCEB8]), "initWithCapacity:", objc_msgSend(v3, "count"));
  v15 = 0u;
  v16 = 0u;
  v17 = 0u;
  v18 = 0u;
  v5 = v3;
  v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v15, v19, 16);
  if (v6)
  {
    v7 = v6;
    v8 = *(_QWORD *)v16;
    do
    {
      v9 = 0;
      do
      {
        if (*(_QWORD *)v16 != v8)
          objc_enumerationMutation(v5);
        v10 = *(id *)(*((_QWORD *)&v15 + 1) + 8 * v9);
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0)
          v11 = v10;
        else
          v11 = 0;
        v12 = v11;

        if (v12)
          objc_msgSend(v4, "addObject:", v12, (_QWORD)v15);

        ++v9;
      }
      while (v7 != v9);
      v7 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v15, v19, 16);
    }
    while (v7);
  }

  v13 = (void *)objc_msgSend(v4, "copy");
  return (NSArray *)v13;
}

- (NSArray)matterAccessories
{
  void *v2;
  void *v3;

  -[HMDHome hapAccessories](self, "hapAccessories");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "na_filter:", &__block_literal_global_1660);
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  return (NSArray *)v3;
}

- (NSArray)hapAccessoriesForLegacyDataBlobEncoding
{
  void *v2;
  void *v3;

  -[HMDHome hapAccessories](self, "hapAccessories");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "na_filter:", &__block_literal_global_1661);
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  return (NSArray *)v3;
}

- (NSArray)cameraAccessories
{
  void *v2;
  void *v3;

  -[HMDHome accessories](self, "accessories");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "na_map:", &__block_literal_global_1662);
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  return (NSArray *)v3;
}

- (void)userAssistantAccessControlDidUpdate:(id)a3 accessories:(id)a4
{
  id v6;
  id v7;
  void *v8;
  int v9;
  NSObject *v10;
  _QWORD block[5];
  id v12;
  id v13;

  v6 = a3;
  v7 = a4;
  -[HMDHome currentUser](self, "currentUser");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = objc_msgSend(v8, "isEqual:", v6);

  if (v9)
  {
    -[HMDHome workQueue](self, "workQueue");
    v10 = objc_claimAutoreleasedReturnValue();
    block[0] = MEMORY[0x24BDAC760];
    block[1] = 3221225472;
    block[2] = __59__HMDHome_userAssistantAccessControlDidUpdate_accessories___block_invoke;
    block[3] = &unk_24E79BBD0;
    block[4] = self;
    v12 = v6;
    v13 = v7;
    dispatch_async(v10, block);

  }
}

- (id)destinationForMediaSystem:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  void *v7;

  v4 = a3;
  -[HMDHome mediaGroupsAggregateConsumer](self, "mediaGroupsAggregateConsumer");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "uuid");
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v5, "destinationWithParentIdentifier:", v6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  return v7;
}

- (id)mediaSystemController:(id)a3 accessoryForUUID:(id)a4
{
  id v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;

  v5 = a4;
  -[HMDHome accessories](self, "accessories");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "hmf_firstObjectWithUUID:", v5);
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v8 = v7;
  else
    v8 = 0;
  v9 = v8;

  return v9;
}

- (void)mediaSystemController:(id)a3 removeAccessories:(id)a4 fromAssistantAccessControl:(id)a5
{
  id v7;
  void *v8;
  int v9;
  void *v10;
  id v11;

  v11 = a4;
  v7 = a5;
  -[HMDHome currentUser](self, "currentUser");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = objc_msgSend(v8, "isEqual:", v7);

  if (v9)
  {
    -[HMDHome currentUser](self, "currentUser");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "removeAccessoriesFromAssistantAccessControlList:", v11);

  }
}

- (void)mediaSystemController:(id)a3 didRemoveMediaSystem:(id)a4
{
  id v5;
  void *v6;
  id v7;

  v5 = a4;
  -[HMDHome homeManager](self, "homeManager");
  v7 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "lastEventStoreController");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "didRemoveMediaSystem:", v5);

}

- (BOOL)_ensureDevicesSymptomDiscoveryMessageCanBeHandled:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  HMDHome *v7;
  NSObject *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  void *v12;
  HMDHome *v13;
  NSObject *v14;
  void *v15;
  void (**v16)(_QWORD, _QWORD, _QWORD);
  int v18;
  void *v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  v4 = a3;
  if ((objc_msgSend(v4, "isEntitledForSPIAccess") & 1) != 0)
  {
    if (-[HMDHome isOwnerUser](self, "isOwnerUser"))
    {
      LOBYTE(v5) = 1;
      goto LABEL_13;
    }
    v12 = (void *)MEMORY[0x227676638]();
    v13 = self;
    HMFGetOSLogHandle();
    v14 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
    {
      HMFGetLogIdentifier();
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      v18 = 138543362;
      v19 = v15;
      _os_log_impl(&dword_2218F0000, v14, OS_LOG_TYPE_DEBUG, "%{public}@Only owners may start discovering symptoms for nearby devices", (uint8_t *)&v18, 0xCu);

    }
    objc_autoreleasePoolPop(v12);
    objc_msgSend(v4, "responseHandler");
    v5 = (void *)objc_claimAutoreleasedReturnValue();

    if (v5)
    {
      v10 = (void *)MEMORY[0x24BDD1540];
      v11 = 17;
      goto LABEL_12;
    }
  }
  else
  {
    v6 = (void *)MEMORY[0x227676638]();
    v7 = self;
    HMFGetOSLogHandle();
    v8 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
    {
      HMFGetLogIdentifier();
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      v18 = 138543362;
      v19 = v9;
      _os_log_impl(&dword_2218F0000, v8, OS_LOG_TYPE_DEBUG, "%{public}@Only entitled clients may stop discovering symptoms for nearby devices", (uint8_t *)&v18, 0xCu);

    }
    objc_autoreleasePoolPop(v6);
    objc_msgSend(v4, "responseHandler");
    v5 = (void *)objc_claimAutoreleasedReturnValue();

    if (v5)
    {
      v10 = (void *)MEMORY[0x24BDD1540];
      v11 = 10;
LABEL_12:
      objc_msgSend(v10, "hmErrorWithCode:", v11);
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "responseHandler");
      v16 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
      ((void (**)(_QWORD, void *, _QWORD))v16)[2](v16, v5, 0);

      LOBYTE(v5) = 0;
    }
  }
LABEL_13:

  return (char)v5;
}

- (void)_handleStartDiscoveringSymptomsForNearbyDevicesMessage:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  id v7;
  void *v8;
  HMDHome *v9;
  NSObject *v10;
  void *v11;
  NSUInteger v12;
  void *v13;
  void *v14;
  int v15;
  void *v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  v4 = a3;
  if (-[HMDHome _ensureDevicesSymptomDiscoveryMessageCanBeHandled:](self, "_ensureDevicesSymptomDiscoveryMessageCanBeHandled:", v4))
  {
    objc_msgSend(v4, "transport");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
      v6 = v5;
    else
      v6 = 0;
    v7 = v6;

    if (v7)
    {
      os_unfair_recursive_lock_lock_with_options();
      if (-[NSHashTable containsObject:](self->_connectionsDiscoveringSymptomsForNearbyDevices, "containsObject:", v7))
      {
        os_unfair_recursive_lock_unlock();
      }
      else
      {
        -[NSHashTable addObject:](self->_connectionsDiscoveringSymptomsForNearbyDevices, "addObject:", v7);
        v12 = -[NSHashTable count](self->_connectionsDiscoveringSymptomsForNearbyDevices, "count");
        os_unfair_recursive_lock_unlock();
        if (v12 == 1)
        {
          +[HMDMainDriver driver](HMDMainDriver, "driver");
          v13 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v13, "symptomManager");
          v14 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v14, "startDiscoveringSymptomsRequiringNearbyInfo");

        }
      }
    }
    else
    {
      v8 = (void *)MEMORY[0x227676638]();
      v9 = self;
      HMFGetOSLogHandle();
      v10 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        v15 = 138543362;
        v16 = v11;
        _os_log_impl(&dword_2218F0000, v10, OS_LOG_TYPE_ERROR, "%{public}@Asked to start discovering symptoms, but no connection proxy was available", (uint8_t *)&v15, 0xCu);

      }
      objc_autoreleasePoolPop(v8);
    }
    objc_msgSend(v4, "respondWithPayload:", 0);

  }
}

- (void)_handleStopDiscoveringSymptomsForNearbyDevicesMessage:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  id v7;
  void *v8;
  HMDHome *v9;
  NSObject *v10;
  void *v11;
  int v12;
  void *v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  v4 = a3;
  if (-[HMDHome _ensureDevicesSymptomDiscoveryMessageCanBeHandled:](self, "_ensureDevicesSymptomDiscoveryMessageCanBeHandled:", v4))
  {
    objc_msgSend(v4, "transport");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
      v6 = v5;
    else
      v6 = 0;
    v7 = v6;

    if (v7)
    {
      -[HMDHome _removeConnectionFromConnectionsDiscoveringSymptomsForNearbyDevices:](self, "_removeConnectionFromConnectionsDiscoveringSymptomsForNearbyDevices:", v7);
    }
    else
    {
      v8 = (void *)MEMORY[0x227676638]();
      v9 = self;
      HMFGetOSLogHandle();
      v10 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        v12 = 138543362;
        v13 = v11;
        _os_log_impl(&dword_2218F0000, v10, OS_LOG_TYPE_ERROR, "%{public}@Asked to stop discovering symptoms, but no connection proxy was available", (uint8_t *)&v12, 0xCu);

      }
      objc_autoreleasePoolPop(v8);
    }
    objc_msgSend(v4, "respondWithPayload:", 0);

  }
}

- (void)_removeConnectionFromConnectionsDiscoveringSymptomsForNearbyDevices:(id)a3
{
  NSUInteger v4;
  void *v5;
  void *v6;
  id v7;

  v7 = a3;
  os_unfair_recursive_lock_lock_with_options();
  if (-[NSHashTable containsObject:](self->_connectionsDiscoveringSymptomsForNearbyDevices, "containsObject:", v7))
  {
    -[NSHashTable removeObject:](self->_connectionsDiscoveringSymptomsForNearbyDevices, "removeObject:", v7);
    v4 = -[NSHashTable count](self->_connectionsDiscoveringSymptomsForNearbyDevices, "count");
    os_unfair_recursive_lock_unlock();
    if (!v4)
    {
      +[HMDMainDriver driver](HMDMainDriver, "driver");
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v5, "symptomManager");
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v6, "stopDiscoveringSymptomsRequiringNearbyInfo");

    }
  }
  else
  {
    os_unfair_recursive_lock_unlock();
  }

}

- (HMHomePersonManagerSettings)personManagerSettings
{
  HMHomePersonManagerSettings *personManagerSettings;
  HMHomePersonManagerSettings *v4;
  HMHomePersonManagerSettings *v5;

  os_unfair_recursive_lock_lock_with_options();
  personManagerSettings = self->_personManagerSettings;
  if (personManagerSettings)
    v4 = personManagerSettings;
  else
    v4 = (HMHomePersonManagerSettings *)objc_alloc_init(MEMORY[0x24BDD76F0]);
  v5 = v4;
  os_unfair_recursive_lock_unlock();
  return v5;
}

- (void)setPersonManagerSettings:(id)a3
{
  HMHomePersonManagerSettings *v4;
  HMHomePersonManagerSettings *personManagerSettings;
  id v6;

  v6 = a3;
  os_unfair_recursive_lock_lock_with_options();
  if ((-[HMHomePersonManagerSettings isEqual:](self->_personManagerSettings, "isEqual:", v6) & 1) != 0)
  {
    os_unfair_recursive_lock_unlock();
  }
  else
  {
    v4 = (HMHomePersonManagerSettings *)objc_msgSend(v6, "copy");
    personManagerSettings = self->_personManagerSettings;
    self->_personManagerSettings = v4;

    os_unfair_recursive_lock_unlock();
    logAndPostNotification(CFSTR("HMDHomePersonManagerSettingsDidChangeNotification"), self, 0);
  }

}

- (HMDHomePersonManager)personManager
{
  void *v2;
  void *v3;

  -[HMDHome personDataManager](self, "personDataManager");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "personManager");
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  return (HMDHomePersonManager *)v3;
}

- (id)updatePersonManagerSettings:(id)a3
{
  id v4;
  void *v5;
  void *v6;

  v4 = a3;
  -[HMDHome personDataManager](self, "personDataManager");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "updateSettingsModelWithSettings:", v4);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  return v6;
}

- (void)handleXPCConnectionInvalidated:(id)a3
{
  id v4;
  NSObject *v5;
  id v6;
  _QWORD v7[4];
  id v8;
  HMDHome *v9;

  v4 = a3;
  -[HMDHome workQueue](self, "workQueue");
  v5 = objc_claimAutoreleasedReturnValue();
  v7[0] = MEMORY[0x24BDAC760];
  v7[1] = 3221225472;
  v7[2] = __42__HMDHome_handleXPCConnectionInvalidated___block_invoke;
  v7[3] = &unk_24E79C268;
  v8 = v4;
  v9 = self;
  v6 = v4;
  dispatch_async(v5, v7);

}

- (void)_handleRemoteUserClientCloudShareRequest:(id)a3
{
  id v4;
  id v5;

  v4 = a3;
  -[HMDHome homeManager](self, "homeManager");
  v5 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "handleRemoteUserClientCloudShareRequest:", v4);

}

- (void)_handleRemoteUserClientCloudShareRepairRequest:(id)a3
{
  id v4;
  id v5;

  v4 = a3;
  -[HMDHome homeManager](self, "homeManager");
  v5 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "handleRemoteUserClientCloudShareRepairRequest:", v4);

}

- (void)_handleSetHomeManagerAppData:(id)a3
{
  id v4;
  id v5;

  v4 = a3;
  -[HMDHome homeManager](self, "homeManager");
  v5 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "setAppDataWithMessage:", v4);

}

- (unint64_t)threadNetworkSequenceNumber
{
  NSObject *v3;

  -[HMDHome workQueue](self, "workQueue");
  v3 = objc_claimAutoreleasedReturnValue();
  dispatch_assert_queue_V2(v3);

  return self->_threadNetworkSequenceNumber;
}

- (void)setThreadNetworkSequenceNumber:(unint64_t)a3
{
  NSObject *v5;

  -[HMDHome workQueue](self, "workQueue");
  v5 = objc_claimAutoreleasedReturnValue();
  dispatch_assert_queue_V2(v5);

  self->_threadNetworkSequenceNumber = a3;
}

- (NSString)unfilteredThreadNetworkID
{
  NSString *v3;

  os_unfair_recursive_lock_lock_with_options();
  v3 = self->_unfilteredThreadNetworkID;
  os_unfair_recursive_lock_unlock();
  return v3;
}

- (BOOL)attemptToUpdateThreadNetworkID:(id)a3
{
  id v5;
  id *p_unfilteredThreadNetworkID;
  char v7;
  void *v8;
  HMDHome *v9;
  NSObject *v10;
  void *v11;
  NSObject *v12;
  void *v13;
  id v14;
  int v16;
  void *v17;
  __int16 v18;
  id v19;
  __int16 v20;
  id v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  v5 = a3;
  os_unfair_recursive_lock_lock_with_options();
  p_unfilteredThreadNetworkID = (id *)&self->_unfilteredThreadNetworkID;
  v7 = HMFEqualObjects();
  v8 = (void *)MEMORY[0x227676638]();
  v9 = self;
  if ((v7 & 1) != 0)
  {
    HMFGetOSLogHandle();
    v10 = (id)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
    {
      HMFGetLogIdentifier();
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      v16 = 138543618;
      v17 = v11;
      v18 = 2112;
      v19 = v5;
      _os_log_impl(&dword_2218F0000, v10, OS_LOG_TYPE_DEBUG, "%{public}@unfilteredThreadNetworkID did not change (%@)", (uint8_t *)&v16, 0x16u);

    }
    objc_autoreleasePoolPop(v8);
  }
  else
  {
    HMFGetOSLogHandle();
    v12 = (id)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      v14 = *p_unfilteredThreadNetworkID;
      v16 = 138543874;
      v17 = v13;
      v18 = 2112;
      v19 = v14;
      v20 = 2112;
      v21 = v5;
      _os_log_impl(&dword_2218F0000, v12, OS_LOG_TYPE_INFO, "%{public}@unfilteredThreadNetworkID changed: %@ -> %@", (uint8_t *)&v16, 0x20u);

    }
    objc_autoreleasePoolPop(v8);
    objc_storeStrong(p_unfilteredThreadNetworkID, a3);
  }
  os_unfair_recursive_lock_unlock();

  return v7 ^ 1;
}

- (void)_wol_processChangedCharacteristicResponses:(id)a3
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  id v13;
  void *v14;
  char isKindOfClass;
  void *v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  _BYTE v21[128];
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  v3 = a3;
  v17 = 0u;
  v18 = 0u;
  v19 = 0u;
  v20 = 0u;
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v17, v21, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v18;
    do
    {
      for (i = 0; i != v5; ++i)
      {
        if (*(_QWORD *)v18 != v6)
          objc_enumerationMutation(v3);
        v8 = *(void **)(*((_QWORD *)&v17 + 1) + 8 * i);
        objc_msgSend(v8, "request");
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v9, "characteristic");
        v10 = (void *)objc_claimAutoreleasedReturnValue();

        objc_msgSend(v10, "accessory");
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0)
          v12 = v11;
        else
          v12 = 0;
        v13 = v12;

        if (objc_msgSend(v13, "canWakeUpViaWoL"))
        {
          objc_msgSend(v8, "request");
          v14 = (void *)objc_claimAutoreleasedReturnValue();
          objc_opt_class();
          isKindOfClass = objc_opt_isKindOfClass();

          objc_msgSend(v8, "error");
          v16 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v13, "_wol_processReadWriteResponseForCharacteristic:isRead:error:", v10, (v14 == 0) | ((isKindOfClass & 1) == 0), v16);

        }
      }
      v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v17, v21, 16);
    }
    while (v5);
  }

}

- (HMDDevice)companionDevice
{
  void *v2;
  void *v3;

  -[HMDHome homeManager](self, "homeManager");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "companionDevice");
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  return (HMDDevice *)v3;
}

- (BOOL)isCompanionReachable
{
  void *v2;
  char v3;

  -[HMDHome homeManager](self, "homeManager");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "companionReachable");

  return v3;
}

- (BOOL)isResidentReachable:(id)a3
{
  id v4;
  void *v5;
  int v6;
  char v7;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t i;
  void *v14;
  void *v15;
  void *v16;
  int v17;
  void *v18;
  HMDHome *v19;
  NSObject *v20;
  void *v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint8_t buf[4];
  void *v27;
  __int16 v28;
  id v29;
  _BYTE v30[128];
  uint64_t v31;

  v31 = *MEMORY[0x24BDAC8D0];
  v4 = a3;
  if (-[HMDHome isCurrentDevicePrimaryResident](self, "isCurrentDevicePrimaryResident")
    || (-[HMDHome primaryResident](self, "primaryResident"),
        v5 = (void *)objc_claimAutoreleasedReturnValue(),
        v6 = objc_msgSend(v5, "isEqual:", v4),
        v5,
        v6))
  {
    v7 = objc_msgSend(v4, "isReachable");
  }
  else
  {
    v24 = 0u;
    v25 = 0u;
    v22 = 0u;
    v23 = 0u;
    -[HMDHome appleMediaAccessories](self, "appleMediaAccessories", 0);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v10 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v22, v30, 16);
    if (v10)
    {
      v11 = v10;
      v12 = *(_QWORD *)v23;
      while (2)
      {
        for (i = 0; i != v11; ++i)
        {
          if (*(_QWORD *)v23 != v12)
            objc_enumerationMutation(v9);
          v14 = *(void **)(*((_QWORD *)&v22 + 1) + 8 * i);
          objc_msgSend(v14, "device");
          v15 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v4, "device");
          v16 = (void *)objc_claimAutoreleasedReturnValue();
          v17 = objc_msgSend(v15, "isEqual:", v16);

          if (v17)
          {
            if ((objc_msgSend(v14, "isReachable") & 1) != 0)
              v7 = 1;
            else
              v7 = objc_msgSend(v14, "isDeviceReachable");

            goto LABEL_4;
          }
        }
        v11 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v22, v30, 16);
        if (v11)
          continue;
        break;
      }
    }

    v18 = (void *)MEMORY[0x227676638]();
    v19 = self;
    HMFGetOSLogHandle();
    v20 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG))
    {
      HMFGetLogIdentifier();
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v27 = v21;
      v28 = 2112;
      v29 = v4;
      _os_log_impl(&dword_2218F0000, v20, OS_LOG_TYPE_DEBUG, "%{public}@Could not find matching accessory for resident %@ so assuming unreachable", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v18);
    v7 = 0;
  }
LABEL_4:

  return v7;
}

- (NSArray)mediaSystems
{
  void *v2;
  void *v3;

  -[HMDHome mediaSystemController](self, "mediaSystemController");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "mediaSystems");
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  return (NSArray *)v3;
}

- (void)setNaturalLightingContext:(id)a3
{
  HMDNaturalLightingContext *v4;
  HMDNaturalLightingContext *naturalLightingContext;
  void *v6;
  id v7;

  v7 = a3;
  os_unfair_recursive_lock_lock_with_options();
  if (-[HMDNaturalLightingContext isEqual:](self->_naturalLightingContext, "isEqual:", v7))
  {
    os_unfair_recursive_lock_unlock();
  }
  else
  {
    v4 = (HMDNaturalLightingContext *)objc_msgSend(v7, "copy");
    naturalLightingContext = self->_naturalLightingContext;
    self->_naturalLightingContext = v4;

    os_unfair_recursive_lock_unlock();
    -[HMDHome notificationCenter](self, "notificationCenter");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "postNotificationName:object:", CFSTR("HMDHomeNaturalLightingContextUpdatedNotification"), self);

  }
}

- (HMDNaturalLightingContext)naturalLightingContext
{
  HMDNaturalLightingContext *v3;

  os_unfair_recursive_lock_lock_with_options();
  v3 = self->_naturalLightingContext;
  os_unfair_recursive_lock_unlock();
  return v3;
}

- (void)configureNaturalLightingForDemoMode
{
  void *v3;
  HMDHome *v4;
  NSObject *v5;
  void *v6;
  int v7;
  void *v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v3 = (void *)MEMORY[0x227676638](self, a2);
  v4 = self;
  HMFGetOSLogHandle();
  v5 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v7 = 138543362;
    v8 = v6;
    _os_log_impl(&dword_2218F0000, v5, OS_LOG_TYPE_INFO, "%{public}@Setting up natural lighting for demo mode", (uint8_t *)&v7, 0xCu);

  }
  objc_autoreleasePoolPop(v3);
  -[HMDHome configureNaturalLightingWithDemoModeEnabled:](v4, "configureNaturalLightingWithDemoModeEnabled:", 1);
}

- (void)setNfcReaderKey:(id)a3
{
  HMDHomeNFCReaderKey *v4;
  HMDHomeNFCReaderKey *nfcReaderKey;

  v4 = (HMDHomeNFCReaderKey *)a3;
  os_unfair_recursive_lock_lock_with_options();
  nfcReaderKey = self->_nfcReaderKey;
  self->_nfcReaderKey = v4;

  os_unfair_recursive_lock_unlock();
}

- (HMDHomeNFCReaderKey)nfcReaderKey
{
  HMDHomeNFCReaderKey *v3;

  os_unfair_recursive_lock_lock_with_options();
  v3 = self->_nfcReaderKey;
  os_unfair_recursive_lock_unlock();
  return v3;
}

- (void)_handleTestUpgradeToROAR:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  HMDHomeUpgradedToROAR *v7;
  void *v8;
  HMDHome *v9;
  NSObject *v10;
  void *v11;
  void *v12;
  HMDHomeUpgradedToROAR *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  int v20;
  void *v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  v4 = a3;
  objc_msgSend(v4, "numberForKey:", *MEMORY[0x24BDD6330]);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = v5;
  if (v5)
  {
    if (objc_msgSend(v5, "BOOLValue"))
    {
      +[HMDHomeUpgradedToROAR defaultModelForHome:](HMDHomeUpgradedToROAR, "defaultModelForHome:", self);
      v7 = (HMDHomeUpgradedToROAR *)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      -[HMDHome setIsUpdatedToHH2:](self, "setIsUpdatedToHH2:", 0);
      v13 = [HMDHomeUpgradedToROAR alloc];
      +[HMDHomeUpgradedToROAR modelIDForHome:](HMDHomeUpgradedToROAR, "modelIDForHome:", self);
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      -[HMDHome uuid](self, "uuid");
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      v7 = -[HMDBackingStoreModelObject initWithObjectChangeType:uuid:parentUUID:](v13, "initWithObjectChangeType:uuid:parentUUID:", 3, v14, v15);

      -[HMDHome saveWithReason:postSyncNotification:objectChange:](self, "saveWithReason:postSyncNotification:objectChange:", CFSTR("Downgrading To HH1"), 0, 1);
    }
    -[HMDHome backingStore](self, "backingStore");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "name");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    +[HMDBackingStoreTransactionOptions defaultXPCOptions](HMDBackingStoreTransactionOptions, "defaultXPCOptions");
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v16, "transaction:options:", v17, v18);
    v19 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v19, "add:withMessage:", v7, v4);
    objc_msgSend(v19, "run");
    objc_msgSend(v4, "respondWithSuccess");

  }
  else
  {
    v8 = (void *)MEMORY[0x227676638]();
    v9 = self;
    HMFGetOSLogHandle();
    v10 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      v20 = 138543362;
      v21 = v11;
      _os_log_impl(&dword_2218F0000, v10, OS_LOG_TYPE_ERROR, "%{public}@Update flag is needed.", (uint8_t *)&v20, 0xCu);

    }
    objc_autoreleasePoolPop(v8);
    objc_msgSend(MEMORY[0x24BDD1540], "errorWithDomain:code:userInfo:", *MEMORY[0x24BDD5BD8], 20, 0);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "respondWithError:", v12);

  }
}

- (id)destinationForEnabledResidents
{
  void *v3;
  void *v4;
  HMDMultipleRemoteDeviceDestination *v5;
  void *v6;
  HMDMultipleRemoteDeviceDestination *v7;

  -[HMDHome enabledResidents](self, "enabledResidents");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "na_map:", &__block_literal_global_1667);
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  if (objc_msgSend(v4, "count"))
  {
    v5 = [HMDMultipleRemoteDeviceDestination alloc];
    -[HMDHome uuid](self, "uuid");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v7 = -[HMDMultipleRemoteDeviceDestination initWithTarget:devices:](v5, "initWithTarget:devices:", v6, v4);

  }
  else
  {
    v7 = 0;
  }

  return v7;
}

- (void)handleSetPreferredPrimaryMessage:(id)a3
{
  id v4;
  void *v5;
  HMDHome *v6;
  NSObject *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  HMDRemoteMessage *v20;
  void *v21;
  void *v22;
  void *v23;
  HMDHome *v24;
  NSObject *v25;
  void *v26;
  _QWORD v27[3];
  _QWORD v28[3];
  uint8_t buf[4];
  void *v30;
  __int16 v31;
  void *v32;
  uint64_t v33;

  v33 = *MEMORY[0x24BDAC8D0];
  v4 = a3;
  v5 = (void *)MEMORY[0x227676638]();
  v6 = self;
  HMFGetOSLogHandle();
  v7 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    HMFGetLogIdentifier();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "messagePayload");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543618;
    v30 = v8;
    v31 = 2112;
    v32 = v9;
    _os_log_impl(&dword_2218F0000, v7, OS_LOG_TYPE_DEFAULT, "%{public}@SetPreferredPrimary - Received set preferred primary message with payload: %@", buf, 0x16u);

  }
  objc_autoreleasePoolPop(v5);
  objc_msgSend(v4, "messagePayload");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "hmf_stringForKey:", *MEMORY[0x24BDD62D8]);
  v11 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v4, "messagePayload");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  v13 = objc_msgSend(v12, "hmf_BOOLForKey:", *MEMORY[0x24BDD62D0]);

  objc_msgSend(v4, "messagePayload");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  v15 = objc_msgSend(v14, "hmf_BOOLForKey:", *MEMORY[0x24BDD62E0]);

  -[HMDHome destinationForEnabledResidents](v6, "destinationForEnabledResidents");
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v16)
  {
    v23 = (void *)MEMORY[0x227676638]();
    v24 = v6;
    HMFGetOSLogHandle();
    v25 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
    {
      HMFGetLogIdentifier();
      v26 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v30 = v26;
      _os_log_impl(&dword_2218F0000, v25, OS_LOG_TYPE_DEFAULT, "%{public}@SetPreferredPrimary - Not propagating message, no known enabled residents in home", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v23);
    if (v11)
      goto LABEL_5;
LABEL_10:
    clearPrimaryPreference(0);
    goto LABEL_11;
  }
  v28[0] = v11;
  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithBool:", v13, CFSTR("preferred.primary.identifier"), CFSTR("preferred.primary.one.time"));
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  v28[1] = v17;
  v27[2] = CFSTR("preferred.primary.trigger.election");
  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithBool:", v15);
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  v28[2] = v18;
  objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v28, v27, 3);
  v19 = (void *)objc_claimAutoreleasedReturnValue();

  v20 = -[HMDRemoteMessage initWithName:qualityOfService:destination:payload:type:timeout:secure:]([HMDRemoteMessage alloc], "initWithName:qualityOfService:destination:payload:type:timeout:secure:", CFSTR("mesh.setPreferredPrimary.debug"), 9, v16, v19, 3, 1, 0.0);
  -[HMDHome msgDispatcher](v6, "msgDispatcher");
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v21, "sendMessage:", v20);

  if (!v11)
    goto LABEL_10;
LABEL_5:
  setPrimaryPreference(v11, v13);
  if ((_DWORD)v15)
  {
    -[HMDHome residentDeviceManager](v6, "residentDeviceManager");
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v22, "electResidentDevice:", 7);

  }
LABEL_11:
  objc_msgSend(v4, "respondWithSuccess");

}

- (void)handleSwitchFromResidentSelectionToREV2:(id)a3
{
  id v4;
  void *v5;
  HMDHome *v6;
  NSObject *v7;
  void *v8;
  void *v9;
  void *v10;
  id v11;
  id v12;
  _QWORD v13[5];
  id v14;
  id v15;
  uint8_t buf[4];
  void *v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  v4 = a3;
  v5 = (void *)MEMORY[0x227676638]();
  v6 = self;
  HMFGetOSLogHandle();
  v7 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543362;
    v17 = v8;
    _os_log_impl(&dword_2218F0000, v7, OS_LOG_TYPE_INFO, "%{public}@Received request to switch from Resident Selection to REV2", buf, 0xCu);

  }
  objc_autoreleasePoolPop(v5);
  -[HMDHome backingStore](v6, "backingStore");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "context");
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  v13[0] = MEMORY[0x24BDAC760];
  v13[1] = 3221225472;
  v13[2] = __51__HMDHome_handleSwitchFromResidentSelectionToREV2___block_invoke;
  v13[3] = &unk_24E79BBD0;
  v13[4] = v6;
  v14 = v10;
  v15 = v4;
  v11 = v4;
  v12 = v10;
  objc_msgSend(v12, "performBlock:", v13);

}

- (void)cleanupHMMMHandlersForClientConnection:(id)a3
{
  id v4;
  id v5;

  v4 = a3;
  -[HMDHome modernMessagingHandler](self, "modernMessagingHandler");
  v5 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "cleanupHMMMHandlersForClientConnection:", v4);

}

- (void)_handleFetchLastModifiedServiceOfType:(id)a3
{
  id v4;
  __CFString *v5;
  __CFString *v6;
  id v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  HMDHome *v12;
  NSObject *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  HMDHome *v18;
  NSObject *v19;
  void *v20;
  void *v21;
  _QWORD v22[4];
  id v23;
  __CFString *v24;
  id v25;
  _BYTE location[12];
  __int16 v27;
  const __CFString *v28;
  __int16 v29;
  void *v30;
  uint64_t v31;

  v31 = *MEMORY[0x24BDAC8D0];
  v4 = a3;
  objc_msgSend(v4, "stringForKey:", CFSTR("kServiceType"));
  v5 = (__CFString *)objc_claimAutoreleasedReturnValue();
  v6 = v5;
  if (!v5)
  {
    v11 = (void *)MEMORY[0x227676638]();
    v12 = self;
    HMFGetOSLogHandle();
    v13 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "messagePayload");
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)location = 138543874;
      *(_QWORD *)&location[4] = v14;
      v27 = 2112;
      v28 = CFSTR("kServiceType");
      v29 = 2112;
      v30 = v15;
      _os_log_impl(&dword_2218F0000, v13, OS_LOG_TYPE_ERROR, "%{public}@Missing service type parameter in message payload %@:%@", location, 0x20u);

    }
    objc_autoreleasePoolPop(v11);
    objc_msgSend(MEMORY[0x24BDD1540], "hmErrorWithCode:", 27);
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "respondWithError:", v16);

    goto LABEL_10;
  }
  if (!-[__CFString isEqualToString:](v5, "isEqualToString:", *MEMORY[0x24BDD6BC0]))
  {
    v17 = (void *)MEMORY[0x227676638]();
    v18 = self;
    HMFGetOSLogHandle();
    v19 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)location = 138543618;
      *(_QWORD *)&location[4] = v20;
      v27 = 2112;
      v28 = v6;
      _os_log_impl(&dword_2218F0000, v19, OS_LOG_TYPE_ERROR, "%{public}@Querying for the service type is not supported: %@", location, 0x16u);

    }
    objc_autoreleasePoolPop(v17);
    objc_msgSend(MEMORY[0x24BDD1540], "hmErrorWithCode:", 48);
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "respondWithError:", v21);

LABEL_10:
    v7 = 0;
    goto LABEL_11;
  }
  v7 = (id)*MEMORY[0x24BDD5A18];
  objc_initWeak((id *)location, self);
  -[HMDHome homeManager](self, "homeManager");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "biomeEventManager");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHome spiClientIdentifier](self, "spiClientIdentifier");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v22[0] = MEMORY[0x24BDAC760];
  v22[1] = 3221225472;
  v22[2] = __49__HMDHome__handleFetchLastModifiedServiceOfType___block_invoke;
  v22[3] = &unk_24E777038;
  objc_copyWeak(&v25, (id *)location);
  v23 = v4;
  v24 = v6;
  objc_msgSend(v9, "fetchMostRecentEventWithCharacteristicType:serviceType:homeSPIClientIdentifier:completion:", v7, v24, v10, v22);

  objc_destroyWeak(&v25);
  objc_destroyWeak((id *)location);
LABEL_11:

}

- (NSSet)notificationRegistrations
{
  void *v3;

  os_unfair_recursive_lock_lock_with_options();
  v3 = (void *)-[NSMutableSet copy](self->_notificationRegistrations, "copy");
  os_unfair_recursive_lock_unlock();
  return (NSSet *)v3;
}

- (id)notificationRegistrationsForAppleMediaAccessories
{
  void *v3;

  os_unfair_recursive_lock_lock_with_options();
  v3 = (void *)-[NSMutableSet copy](self->_notificationRegistrationsForAppleMediaAccessories, "copy");
  os_unfair_recursive_lock_unlock();
  return v3;
}

- (void)addNotificationRegistrationForApplicationBundleIdentifier:(id)a3 includesAppleMediaAccessories:(BOOL)a4
{
  _BOOL4 v4;
  id v6;

  v4 = a4;
  v6 = a3;
  os_unfair_recursive_lock_lock_with_options();
  -[NSMutableSet addObject:](self->_notificationRegistrations, "addObject:", v6);
  if (v4)
    -[NSMutableSet addObject:](self->_notificationRegistrationsForAppleMediaAccessories, "addObject:", v6);
  os_unfair_recursive_lock_unlock();

}

- (BOOL)isApplicationBundleIDSubscribedToAppleMediaAccessoryState:(id)a3
{
  id v4;

  v4 = a3;
  os_unfair_recursive_lock_lock_with_options();
  LOBYTE(self) = -[NSMutableSet containsObject:](self->_notificationRegistrationsForAppleMediaAccessories, "containsObject:", v4);
  os_unfair_recursive_lock_unlock();

  return (char)self;
}

- (NSSet)notificationDeregistrations
{
  void *v3;

  os_unfair_recursive_lock_lock_with_options();
  v3 = (void *)-[NSMutableSet copy](self->_notificationDeregistrations, "copy");
  os_unfair_recursive_lock_unlock();
  return (NSSet *)v3;
}

- (void)addNotificationDeregistrationForApplicationBundleIdentifier:(id)a3
{
  id v4;

  v4 = a3;
  os_unfair_recursive_lock_lock_with_options();
  -[NSMutableSet addObject:](self->_notificationDeregistrations, "addObject:", v4);
  os_unfair_recursive_lock_unlock();

}

- (void)removeNotificationDeregistrationForApplicationBundleIdentifier:(id)a3
{
  id v4;

  v4 = a3;
  os_unfair_recursive_lock_lock_with_options();
  -[NSMutableSet removeObject:](self->_notificationDeregistrations, "removeObject:", v4);
  os_unfair_recursive_lock_unlock();

}

- (void)_applyNotificationDeregistrations
{
  os_unfair_recursive_lock_lock_with_options();
  -[NSMutableSet minusSet:](self->_notificationRegistrations, "minusSet:", self->_notificationDeregistrations);
  -[NSMutableSet minusSet:](self->_notificationRegistrationsForAppleMediaAccessories, "minusSet:", self->_notificationDeregistrations);
  -[NSMutableSet removeAllObjects](self->_notificationDeregistrations, "removeAllObjects");
  os_unfair_recursive_lock_unlock();
}

- (BOOL)hasCharacteristicNotificationRegistrations
{
  void *v2;
  BOOL v3;

  -[HMDHome notificationRegistrations](self, "notificationRegistrations");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "count") != 0;

  return v3;
}

- (void)startReportingSessionForMessage:(id)a3
{
  void *v4;
  void *v5;
  void *v6;
  id v7;
  void *v8;
  void *v9;
  id v10;

  v10 = a3;
  reportContextFromMessage(v10);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  if (v4)
  {
    objc_msgSend(v10, "transport");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
      v6 = v5;
    else
      v6 = 0;
    v7 = v6;

    if (v7)
    {
      -[HMDHome reportingSessionManager](self, "reportingSessionManager");
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v10, "identifier");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v8, "startSessionWithUUID:reportContext:xpcClientConnection:", v9, v4, v7);

    }
  }

}

- (void)handleReportingSessionResponseMessage:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  id v7;

  v4 = a3;
  -[HMDHome reportingSessionManager](self, "reportingSessionManager");
  v7 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "messagePayload");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "identifier");
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v7, "addResponseMessagePayload:toSessionWithUUID:", v5, v6);
}

- (void)endReportingSessionForMessage:(id)a3
{
  void *v4;
  id v5;
  void *v6;
  id v7;
  void *v8;
  void *v9;
  id v10;

  v10 = a3;
  reportContextFromMessage(v10);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  if (v4)
  {
    v5 = v10;
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
      v6 = v5;
    else
      v6 = 0;
    v7 = v6;

    if (!v7)
    {
      -[HMDHome reportingSessionManager](self, "reportingSessionManager");
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v5, "identifier");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v8, "endSessionWithUUID:", v9);

    }
  }

}

- (void)_handleRetrieveAsyncResults:(id)a3
{
  id v4;
  void *v5;
  HMDHome *v6;
  NSObject *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  id v13;
  uint64_t i;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  HMDHome *v19;
  HMDHome *v20;
  NSObject *v21;
  void *v22;
  uint64_t v23;
  id v24;
  void *v25;
  void *v26;
  id v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  HMDHome *v34;
  NSObject *v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  HMDHome *v40;
  NSObject *v41;
  void *v42;
  void *v43;
  void *v44;
  id obj;
  uint64_t v46;
  uint64_t v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  uint8_t buf[4];
  void *v53;
  __int16 v54;
  void *v55;
  __int16 v56;
  void *v57;
  _BYTE v58[128];
  uint64_t v59;

  v59 = *MEMORY[0x24BDAC8D0];
  v4 = a3;
  v5 = (void *)MEMORY[0x227676638]();
  v6 = self;
  HMFGetOSLogHandle();
  v7 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "shortDescription");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543618;
    v53 = v8;
    v54 = 2112;
    v55 = v9;
    _os_log_impl(&dword_2218F0000, v7, OS_LOG_TYPE_INFO, "%{public}@Handling retrieve async results message: %@", buf, 0x16u);

  }
  objc_autoreleasePoolPop(v5);
  objc_msgSend(v4, "dataForKey:", *MEMORY[0x24BDD6268]);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  if (v10)
  {
    -[HMDHome reportingSessionManager](v6, "reportingSessionManager");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "consumeResponseMessagePayloadsForSessionWithReportContextRequestInfo:", v10);
    v12 = (void *)objc_claimAutoreleasedReturnValue();

    if (objc_msgSend(v12, "count"))
    {
      v44 = v10;
      v50 = 0u;
      v51 = 0u;
      v48 = 0u;
      v49 = 0u;
      v13 = v12;
      v47 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v48, v58, 16);
      if (v47)
      {
        v46 = *(_QWORD *)v49;
        obj = v13;
        do
        {
          for (i = 0; i != v47; ++i)
          {
            if (*(_QWORD *)v49 != v46)
              objc_enumerationMutation(obj);
            v15 = *(void **)(*((_QWORD *)&v48 + 1) + 8 * i);
            v16 = (void *)MEMORY[0x227676638]();
            v17 = (void *)objc_msgSend(v15, "mutableCopy");
            v18 = (void *)MEMORY[0x227676638](objc_msgSend(v17, "setObject:forKeyedSubscript:", MEMORY[0x24BDBD1C0], CFSTR("kMultiPartResponseKey")));
            v19 = v6;
            v20 = v6;
            HMFGetOSLogHandle();
            v21 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
            {
              HMFGetLogIdentifier();
              v22 = (void *)objc_claimAutoreleasedReturnValue();
              *(_DWORD *)buf = 138543874;
              v53 = v22;
              v54 = 2112;
              v55 = v15;
              v56 = 2112;
              v57 = v17;
              _os_log_impl(&dword_2218F0000, v21, OS_LOG_TYPE_INFO, "%{public}@Overriding payload in last cached message from %@ to %@", buf, 0x20u);

            }
            objc_autoreleasePoolPop(v18);
            if (objc_msgSend(v4, "qualityOfService") < 17)
              v23 = 17;
            else
              v23 = objc_msgSend(v4, "qualityOfService");
            v24 = objc_alloc(MEMORY[0x24BE3F1B8]);
            -[HMDHome uuid](v20, "uuid");
            v25 = (void *)objc_claimAutoreleasedReturnValue();
            v26 = (void *)objc_msgSend(v24, "initWithTarget:", v25);

            v27 = objc_alloc(MEMORY[0x24BE3F1D0]);
            v28 = (void *)objc_msgSend(v17, "copy");
            v29 = (void *)objc_msgSend(v27, "initWithName:qualityOfService:destination:payload:", CFSTR("kMultipleCharacteristicValuesUpdatedNotificationKey"), v23, v26, v28);

            objc_msgSend(v4, "transport");
            v30 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v29, "setTransport:", v30);
            objc_msgSend(v4, "identifier");
            v31 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v29, "setIdentifier:", v31);

            -[HMDHome msgDispatcher](v20, "msgDispatcher");
            v32 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v32, "sendMessage:", v29);

            objc_autoreleasePoolPop(v16);
            v6 = v19;
          }
          v13 = obj;
          v47 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v48, v58, 16);
        }
        while (v47);
      }

      objc_msgSend(v4, "respondWithSuccess");
      v10 = v44;
    }
    else
    {
      v38 = v12;
      v39 = (void *)MEMORY[0x227676638]();
      v40 = v6;
      HMFGetOSLogHandle();
      v41 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v41, OS_LOG_TYPE_DEFAULT))
      {
        HMFGetLogIdentifier();
        v42 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543362;
        v53 = v42;
        _os_log_impl(&dword_2218F0000, v41, OS_LOG_TYPE_DEFAULT, "%{public}@Did not find any response message payloads to retrieve", buf, 0xCu);

      }
      objc_autoreleasePoolPop(v39);
      objc_msgSend(MEMORY[0x24BDD1540], "hmErrorWithCode:", 2);
      v43 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "respondWithError:", v43);

      v13 = v38;
    }
  }
  else
  {
    v33 = (void *)MEMORY[0x227676638]();
    v34 = v6;
    HMFGetOSLogHandle();
    v35 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v35, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v36 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "messagePayload");
      v37 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v53 = v36;
      v54 = 2112;
      v55 = v37;
      _os_log_impl(&dword_2218F0000, v35, OS_LOG_TYPE_ERROR, "%{public}@Could not find request info in message payload: %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v33);
    objc_msgSend(MEMORY[0x24BDD1540], "hmErrorWithCode:", 20);
    v13 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "respondWithError:", v13);
  }

}

- (id)eventRouterDumpStateInfo
{
  void *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  void *v7;
  const __CFString *v8;
  void *v9;
  uint64_t v10;
  void *v11;
  const __CFString *v12;
  void *v13;
  void *v14;
  _QWORD v16[2];
  _QWORD v17[2];
  void *v18;
  _QWORD v19[2];

  v19[1] = *MEMORY[0x24BDAC8D0];
  -[HMDHome uuid](self, "uuid");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "UUIDString");
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  v18 = v4;
  v16[0] = CFSTR("RemoteClientController");
  -[HMDHome remoteEventRouterClientController](self, "remoteEventRouterClientController");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "dumpStateDescription");
  v6 = objc_claimAutoreleasedReturnValue();
  v7 = (void *)v6;
  if (v6)
    v8 = (const __CFString *)v6;
  else
    v8 = &stru_24E79DB48;
  v16[1] = CFSTR("RemoteServer");
  v17[0] = v8;
  -[HMDHome remoteEventRouterServer](self, "remoteEventRouterServer");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "dumpStateDescription");
  v10 = objc_claimAutoreleasedReturnValue();
  v11 = (void *)v10;
  if (v10)
    v12 = (const __CFString *)v10;
  else
    v12 = &stru_24E79DB48;
  v17[1] = v12;
  objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v17, v16, 2);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  v19[0] = v13;
  objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v19, &v18, 1);
  v14 = (void *)objc_claimAutoreleasedReturnValue();

  return v14;
}

- (id)delegatingRouter:(id)a3 filteredTopics:(id)a4 forRouter:(id)a5
{
  return a4;
}

- (id)delegatingRouter:(id)a3 upstreamTopicsFor:(id)a4
{
  return +[HMDHomeEventsGenerated upstreamTopicsForTopic:](HMDHomeEventsGenerated, "upstreamTopicsForTopic:", a4);
}

- (void)clientController:(id)a3 didReceiveFetchedCachedEvents:(id)a4 source:(id)a5
{
  id v7;
  id v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  id v19;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  _BYTE v25[128];
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  v19 = a3;
  v7 = a4;
  v8 = a5;
  v21 = 0u;
  v22 = 0u;
  v23 = 0u;
  v24 = 0u;
  v9 = v7;
  v10 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v21, v25, 16);
  if (v10)
  {
    v11 = v10;
    v12 = *(_QWORD *)v22;
    do
    {
      v13 = 0;
      do
      {
        if (*(_QWORD *)v22 != v12)
          objc_enumerationMutation(v9);
        v14 = *(_QWORD *)(*((_QWORD *)&v21 + 1) + 8 * v13);
        v15 = (void *)MEMORY[0x227676638](v10);
        objc_msgSend(v9, "objectForKeyedSubscript:", v14, v19);
        v16 = (void *)objc_claimAutoreleasedReturnValue();
        -[HMDHome homeManager](self, "homeManager");
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v17, "memoryEventConsumer");
        v18 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v18, "didReceiveCachedEvent:topic:source:", v16, v14, v8);

        objc_autoreleasePoolPop(v15);
        ++v13;
      }
      while (v11 != v13);
      v10 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v21, v25, 16);
      v11 = v10;
    }
    while (v10);
  }

}

- (id)primaryResidentDeviceIdentifierForRemoteEventRouterClientController:(id)a3
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  -[HMDHome residentDeviceManager](self, "residentDeviceManager", a3);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "primaryResidentDevice");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "device");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "identifier");
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  return v6;
}

- (id)eventStoreReadHandleForRemoteEventRouterClientController:(id)a3
{
  void *v3;
  void *v4;

  -[HMDHome homeManager](self, "homeManager", a3);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "eventStoreReadHandle");
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  return v4;
}

- (id)eventStoreWriteHandleForRemoteEventRouterClientController:(id)a3
{
  void *v3;
  void *v4;

  -[HMDHome homeManager](self, "homeManager", a3);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "eventStoreWriteHandle");
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  return v4;
}

- (id)deviceForAccessoryUUID:(id)a3 forRemoteEventRouterClientController:(id)a4
{
  void *v4;
  void *v5;
  id v6;
  void *v7;

  -[HMDHome accessoryWithUUID:](self, "accessoryWithUUID:", a3, a4);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v5 = v4;
  else
    v5 = 0;
  v6 = v5;

  if (v6)
  {
    objc_msgSend(v6, "deviceForDirectMessaging");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v7 = 0;
  }

  return v7;
}

- (id)deviceForPrimaryResidentForRemoteEventRouterClientController:(id)a3
{
  void *v3;
  void *v4;
  void *v5;
  id v6;

  -[HMDHome residentDeviceManager](self, "residentDeviceManager", a3);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "primaryResidentDevice");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "device");
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  if ((objc_msgSend(v5, "isCurrentDevice") & 1) != 0)
    v6 = 0;
  else
    v6 = v5;

  return v6;
}

- (BOOL)isCurrentDeviceResidentCapableForRemoteEventRouterClientController:(id)a3
{
  void *v3;
  char v4;

  -[HMDHome localCapabilitiesDataSource](self, "localCapabilitiesDataSource", a3);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "isResidentCapable");

  return v4;
}

- (BOOL)isCurrentDevicePrimaryResidentForRemoteEventRouterClientController:(id)a3
{
  void *v3;
  char v4;

  -[HMDHome residentDeviceManager](self, "residentDeviceManager", a3);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "isCurrentDevicePrimaryResident");

  return v4;
}

- (BOOL)isMessagedHomepodSettingsEnabledForClientController:(id)a3
{
  return 1;
}

- (void)discoverPrimaryResidentForEventRouterClientController:(id)a3
{
  id v3;

  -[HMDHome residentDeviceManager](self, "residentDeviceManager", a3);
  v3 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "discoverPrimaryResidentForRequester:", 0);

}

- (BOOL)isCurrentUserRestrictedForRemoteEventRouterClientController:(id)a3
{
  void *v3;
  char v4;

  -[HMDHome currentUser](self, "currentUser", a3);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "isRestrictedGuest");

  return v4;
}

- (void)clientController:(id)a3 connectionStatusDidChange:(BOOL)a4
{
  _BOOL8 v4;
  void *v6;
  uint64_t v7;
  void *v8;
  void *v9;
  void *v10;
  id v11;
  _QWORD v12[5];
  BOOL v13;

  v4 = a4;
  -[HMDHome homeManager](self, "homeManager", a3);
  v11 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "accessorySetupMetricDispatchersForHome:", self);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v12[0] = MEMORY[0x24BDAC760];
  v12[1] = 3221225472;
  v12[2] = __54__HMDHome_clientController_connectionStatusDidChange___block_invoke;
  v12[3] = &unk_24E777060;
  v12[4] = self;
  v13 = v4;
  objc_msgSend(v6, "na_each:", v12);
  -[HMDHome currentDevice](self, "currentDevice");
  v7 = objc_claimAutoreleasedReturnValue();
  if (v7)
  {
    v8 = (void *)v7;
    -[HMDHome _hasConfirmedPrimaryResidentDevice](self, "_hasConfirmedPrimaryResidentDevice");
    v9 = (void *)objc_claimAutoreleasedReturnValue();

    if (v9)
    {
      objc_msgSend(v11, "currentAccessorySetupMetricDispatcher");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v10, "markEventRouterPrimaryClientConnectStatusChanged:", v4);

    }
  }

}

- (void)clientController:(id)a3 primaryClientConnectMessageFailWithError:(id)a4
{
  id v5;
  void *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  id v13;
  _QWORD v14[5];
  id v15;

  v5 = a4;
  -[HMDHome homeManager](self, "homeManager");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "accessorySetupMetricDispatchersForHome:", self);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v14[0] = MEMORY[0x24BDAC760];
  v14[1] = 3221225472;
  v14[2] = __69__HMDHome_clientController_primaryClientConnectMessageFailWithError___block_invoke;
  v14[3] = &unk_24E777088;
  v14[4] = self;
  v13 = v5;
  v15 = v13;
  objc_msgSend(v7, "na_each:", v14);
  -[HMDHome currentDevice](self, "currentDevice");
  v8 = objc_claimAutoreleasedReturnValue();
  if (v8)
  {
    v9 = (void *)v8;
    -[HMDHome _hasConfirmedPrimaryResidentDevice](self, "_hasConfirmedPrimaryResidentDevice");
    v10 = (void *)objc_claimAutoreleasedReturnValue();

    if (v10)
    {
      objc_msgSend(v6, "currentAccessorySetupMetricDispatcher");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v11, "markEventRouterPrimaryClientConnectMessageFailedWithError:", v13);

      objc_msgSend(v6, "currentAccessorySetupMetricDispatcher");
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v12, "markCurrentDeviceConfirmedPrimaryResidentStatusDidChange:", -[HMDHome isCurrentDeviceConfirmedPrimaryResident](self, "isCurrentDeviceConfirmedPrimaryResident"));

    }
  }

}

- (id)routerServerUserAccessControlProviderIdentifierForMessage:(id)a3
{
  void *v3;
  void *v4;

  objc_msgSend(a3, "matchingRemoteIdentityUserForHome:", self);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "uuid");
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  return v4;
}

- (id)routerServerUserAccessControlProviderForIdentifier:(id)a3
{
  id v4;
  void *v5;
  id v6;
  void *v7;
  _QWORD v9[4];
  id v10;

  v4 = a3;
  -[HMDHome users](self, "users");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v9[0] = MEMORY[0x24BDAC760];
  v9[1] = 3221225472;
  v9[2] = __62__HMDHome_routerServerUserAccessControlProviderForIdentifier___block_invoke;
  v9[3] = &unk_24E799728;
  v10 = v4;
  v6 = v4;
  objc_msgSend(v5, "na_firstObjectPassingTest:", v9);
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  return v7;
}

- (BOOL)shouldAllowTopic:(id)a3 forDeviceWithMessageIdentifier:(id)a4
{
  id v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  BOOL v11;
  _QWORD v13[2];

  v13[1] = *MEMORY[0x24BDAC8D0];
  v6 = a3;
  -[HMDHome accessoryWithDeviceIdentifier:](self, "accessoryWithDeviceIdentifier:", a4);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  if (v7)
  {
    v13[0] = v6;
    objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", v13, 1);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "uuid");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    +[HMDAccessoryEventsGenerated topicsRemovingAccessoryTopics:accessoryUUID:](HMDAccessoryEventsGenerated, "topicsRemovingAccessoryTopics:accessoryUUID:", v8, v9);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v11 = objc_msgSend(v10, "count") != 0;

  }
  else
  {
    v11 = 1;
  }

  return v11;
}

- (BOOL)isDevicePrimaryResident:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  char v7;

  v4 = a3;
  -[HMDHome primaryResident](self, "primaryResident");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "device");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = objc_msgSend(v6, "isEqual:", v4);

  return v7;
}

- (BOOL)isDeviceIdentifierPrimaryResident:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  char v8;

  v4 = a3;
  -[HMDHome primaryResident](self, "primaryResident");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "device");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "identifier");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = objc_msgSend(v7, "hmf_isEqualToUUID:", v4);

  return v8;
}

- (id)messageTargetForDeviceIdentifier:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  id v7;
  void *v8;
  void *v9;
  _QWORD v11[4];
  id v12;

  v4 = a3;
  -[HMDHome residentDeviceManager](self, "residentDeviceManager");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "residentDevices");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v11[0] = MEMORY[0x24BDAC760];
  v11[1] = 3221225472;
  v11[2] = __44__HMDHome_messageTargetForDeviceIdentifier___block_invoke;
  v11[3] = &unk_24E7953A8;
  v12 = v4;
  v7 = v4;
  objc_msgSend(v6, "na_firstObjectPassingTest:", v11);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "device");
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  return v9;
}

- (BOOL)canTopicBeForwardedToPrimaryFromResident:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  id v7;
  void *v8;
  id v9;
  void *v10;
  void *v11;
  char v12;

  v4 = a3;
  -[HMDHome currentAccessory](self, "currentAccessory");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v6 = v5;
  else
    v6 = 0;
  v7 = v6;

  if (v7)
  {
    if (self)
    {
      v8 = (void *)MEMORY[0x24BDD73A0];
      v9 = v7;
      -[HMDHome uuid](self, "uuid");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v9, "uuid");
      v11 = (void *)objc_claimAutoreleasedReturnValue();

      objc_msgSend(v8, "topicPrefixWithHomeUUID:accessoryUUID:", v10, v11);
      self = (HMDHome *)objc_claimAutoreleasedReturnValue();

    }
    v12 = objc_msgSend(v4, "hasPrefix:", self);

  }
  else
  {
    v12 = 0;
  }

  return v12;
}

- (id)expandedTopicsWithTopics:(id)a3
{
  id v4;
  void *v5;
  void *v6;

  v4 = a3;
  -[HMDHome homeManager](self, "homeManager");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  +[HMDHomeEventsGenerated expandedTopicsWithTopics:homeManager:](HMDHomeEventsGenerated, "expandedTopicsWithTopics:homeManager:", v4, v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  return v6;
}

- (id)currentAccessorySetupMetricDispatcher
{
  void *v2;
  void *v3;

  -[HMDHome homeManager](self, "homeManager");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "currentAccessorySetupMetricDispatcher");
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  return v3;
}

- (id)currentAccessoryHomeUUID
{
  void *v3;
  void *v4;

  -[HMDHome currentAccessory](self, "currentAccessory");
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  if (v3)
  {
    -[HMDHome uuid](self, "uuid");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v4 = 0;
  }
  return v4;
}

- (BOOL)remoteEventAllowedForTopic:(id)a3 deviceType:(unint64_t)a4 userType:(unint64_t)a5
{
  id v8;
  void *v9;

  v8 = a3;
  -[HMDHome homeRemoteEventAccessController](self, "homeRemoteEventAccessController");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  LOBYTE(a5) = objc_msgSend(v9, "remoteEventAllowedForTopic:deviceType:userType:", v8, a4, a5);

  return a5;
}

- (BOOL)router:(id)a3 shouldHandleMessage:(id)a4 usingRouter:(id)a5
{
  id v8;
  id v9;
  id v10;
  id v11;
  BOOL v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  id v17;
  void *v18;
  void *v19;
  void *v20;
  int v21;
  id v22;
  int v23;
  void *v24;
  HMDHome *v25;
  NSObject *v26;
  void *v27;
  char v28;
  id v29;
  int v31;
  void *v32;
  uint64_t v33;

  v33 = *MEMORY[0x24BDAC8D0];
  v8 = a3;
  v9 = a4;
  v10 = a5;
  -[HMDHome accessoryMessageRouterViaPrimary](self, "accessoryMessageRouterViaPrimary");
  v11 = (id)objc_claimAutoreleasedReturnValue();

  if (v11 != v8)
  {
    v12 = 0;
    goto LABEL_18;
  }
  objc_msgSend(v9, "messagePayload");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v13, "hmf_UUIDForKey:", *MEMORY[0x24BDD5128]);
  v14 = (void *)objc_claimAutoreleasedReturnValue();

  -[HMDHome accessoryWithUUID:](self, "accessoryWithUUID:", v14);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v16 = v15;
  else
    v16 = 0;
  v17 = v16;

  -[HMDHome currentAccessory](self, "currentAccessory");
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v18, "uuid");
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v17, "uuid");
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  v21 = objc_msgSend(v19, "hmf_isEqualToUUID:", v20);

  if (v17)
  {
    -[HMDHome appleDeviceRouter](self, "appleDeviceRouter");
    v22 = (id)objc_claimAutoreleasedReturnValue();
    if (v22 == v10)
    {
      v23 = -[HMDHome isCurrentDeviceConfirmedPrimaryResident](self, "isCurrentDeviceConfirmedPrimaryResident") | v21;

      if (v23 == 1)
      {
        v24 = (void *)MEMORY[0x227676638]();
        v25 = self;
        HMFGetOSLogHandle();
        v26 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v26, OS_LOG_TYPE_DEBUG))
        {
          HMFGetLogIdentifier();
          v27 = (void *)objc_claimAutoreleasedReturnValue();
          v31 = 138543362;
          v32 = v27;
          _os_log_impl(&dword_2218F0000, v26, OS_LOG_TYPE_DEBUG, "%{public}@accepting accessory router", (uint8_t *)&v31, 0xCu);

        }
        objc_autoreleasePoolPop(v24);
        v28 = 1;
        goto LABEL_14;
      }
    }
    else
    {

    }
  }
  v28 = 0;
LABEL_14:
  -[HMDHome primaryResidentMessageRouter](self, "primaryResidentMessageRouter");
  v29 = (id)objc_claimAutoreleasedReturnValue();

  if (v29 == v10)
    v12 = 1;
  else
    v12 = v28;

LABEL_18:
  return v12;
}

- (BOOL)isAppleMediaAccessory:(id)a3
{
  void *v3;
  BOOL v4;

  -[HMDHome accessoryWithUUID:](self, "accessoryWithUUID:", a3);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  v4 = objc_opt_isKindOfClass() & (v3 != 0);

  return v4;
}

- (BOOL)isSidekickAccessory:(id)a3
{
  void *v3;
  void *v4;
  id v5;
  void *v6;
  void *v7;
  BOOL v8;

  -[HMDHome accessoryWithUUID:](self, "accessoryWithUUID:", a3);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v4 = v3;
  else
    v4 = 0;
  v5 = v4;
  v6 = v5;
  if (v5)
  {
    objc_msgSend(v5, "siriEndpointProfile");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = v7 != 0;

  }
  else
  {
    v8 = 0;
  }

  return v8;
}

- (BOOL)isMediaSystem:(id)a3
{
  id v4;
  void *v5;
  id v6;
  void *v7;
  _QWORD v9[4];
  id v10;

  v4 = a3;
  -[HMDHome mediaSystems](self, "mediaSystems");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v9[0] = MEMORY[0x24BDAC760];
  v9[1] = 3221225472;
  v9[2] = __25__HMDHome_isMediaSystem___block_invoke;
  v9[3] = &unk_24E77E3B8;
  v10 = v4;
  v6 = v4;
  objc_msgSend(v5, "na_firstObjectPassingTest:", v9);
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  return v7 != 0;
}

- (BOOL)currentDeviceSupportsSiriUnsecuringActionsWithNoPasscodeForSiriSecureAccessoryAccessController:(id)a3
{
  void *v3;
  char v4;

  -[HMDHome localCapabilitiesDataSource](self, "localCapabilitiesDataSource", a3);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "supportsSiriUnsecuringActionsWithNoPasscode");

  return v4;
}

- (BOOL)currentDeviceSupportsSiriUnsecuringActionsWithWatchAuthForSiriSecureAccessoryAccessController:(id)a3
{
  void *v3;
  char v4;

  -[HMDHome localCapabilitiesDataSource](self, "localCapabilitiesDataSource", a3);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "supportsSiriUnsecuringActionsWithWatchAuth");

  return v4;
}

- (BOOL)isCurrentDevicePairedWithWatchForSiriSecureAccessoryAccessController:(id)a3
{
  void *v3;
  char v4;

  -[HMDHome homeManager](self, "homeManager", a3);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "isPairedWithWatch");

  return v4;
}

- (id)deviceForAppleMediaAccessoryMessageRouter:(id)a3 message:(id)a4
{
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;
  void *v10;

  objc_msgSend(a4, "messagePayload", a3);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "hmf_UUIDForKey:", *MEMORY[0x24BDD5128]);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  -[HMDHome accessoryWithUUID:](self, "accessoryWithUUID:", v6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v8 = v7;
  else
    v8 = 0;
  v9 = v8;

  objc_msgSend(v9, "device");
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  return v10;
}

- (void)didReceiveAccessorySetting:(id)a3 accessoryUUID:(id)a4
{
  id v6;
  id v7;
  id v8;
  void *v9;
  id v10;
  void *v11;
  char v12;
  void *v13;
  void *v14;
  id v15;
  void *v16;
  void *v17;
  void *v18;
  HMDHome *v19;
  NSObject *v20;
  void *v21;
  void *v22;
  HMDHome *v23;
  NSObject *v24;
  void *v25;
  const __CFString *v26;
  HMDHome *v27;
  uint8_t buf[4];
  void *v29;
  __int16 v30;
  id v31;
  __int16 v32;
  id v33;
  uint64_t v34;

  v34 = *MEMORY[0x24BDAC8D0];
  v6 = a3;
  v7 = a4;
  v8 = v6;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v9 = v8;
  else
    v9 = 0;
  v10 = v9;

  if (v10
    && (objc_msgSend(v10, "keyPath"),
        v11 = (void *)objc_claimAutoreleasedReturnValue(),
        v12 = objc_msgSend(v11, "isEqualToString:", CFSTR("root.siri.availableLanguages")),
        v11,
        (v12 & 1) != 0))
  {
    -[HMDHome accessoryWithUUID:](self, "accessoryWithUUID:", v7);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
      v14 = v13;
    else
      v14 = 0;
    v15 = v14;

    if (v15)
    {
      -[HMDHome notificationCenter](self, "notificationCenter");
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      v26 = CFSTR("HMDHomeNotificationKey");
      v27 = self;
      objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", &v27, &v26, 1);
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v16, "postNotificationName:object:userInfo:", CFSTR("HMDAppleMediaAccessoryLanguagesChangedNotification"), self, v17);

    }
    else
    {
      v22 = (void *)MEMORY[0x227676638]();
      v23 = self;
      HMFGetOSLogHandle();
      v24 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v24, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v25 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543874;
        v29 = v25;
        v30 = 2112;
        v31 = v8;
        v32 = 2112;
        v33 = v7;
        _os_log_impl(&dword_2218F0000, v24, OS_LOG_TYPE_INFO, "%{public}@Received accessory setting %@ that is not for an accessory %@ in this home", buf, 0x20u);

      }
      objc_autoreleasePoolPop(v22);
    }

  }
  else
  {
    v18 = (void *)MEMORY[0x227676638]();
    v19 = self;
    HMFGetOSLogHandle();
    v20 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v20, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v29 = v21;
      v30 = 2112;
      v31 = v8;
      _os_log_impl(&dword_2218F0000, v20, OS_LOG_TYPE_INFO, "%{public}@Unexpectedly received accessory setting %@ that is not for available languages", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v18);
  }

}

- (HMEEventForwarder)eventForwarder
{
  void *v2;
  void *v3;

  -[HMDHome homeManager](self, "homeManager");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "eventForwarder");
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  return (HMEEventForwarder *)v3;
}

- (id)eventStoreReadHandle
{
  void *v2;
  void *v3;

  -[HMDHome homeManager](self, "homeManager");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "eventStoreReadHandle");
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  return v3;
}

- (id)localAndRemoteSubscriptionProvider
{
  void *v2;
  void *v3;

  -[HMDHome homeManager](self, "homeManager");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "localAndRemoteSubscriptionProvider");
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  return v3;
}

- (void)_writeAccessoryCapabilities:(id)a3 accessoryUUID:(id)a4 homeUUID:(id)a5
{
  id v7;
  id v8;
  void *v9;
  char isKindOfClass;
  void *v11;
  void *v12;
  id v13;
  _QWORD v14[4];
  id v15;
  id v16;
  id v17;
  HMDHome *v18;

  v7 = a3;
  v8 = a4;
  -[HMDHome accessoryWithUUID:](self, "accessoryWithUUID:", v8);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  isKindOfClass = objc_opt_isKindOfClass();

  if ((isKindOfClass & 1) != 0 && v9)
  {
    -[HMDHome backingStore](self, "backingStore");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "context");
    v12 = (void *)objc_claimAutoreleasedReturnValue();

    v14[0] = MEMORY[0x24BDAC760];
    v14[1] = 3221225472;
    v14[2] = __62__HMDHome__writeAccessoryCapabilities_accessoryUUID_homeUUID___block_invoke;
    v14[3] = &unk_24E79A910;
    v15 = v8;
    v16 = v7;
    v17 = v12;
    v18 = self;
    v13 = v12;
    objc_msgSend(v13, "performBlock:", v14);

  }
}

- (void)_writeResidentCapabilities:(id)a3 accessoryUUID:(id)a4 homeUUID:(id)a5
{
  id v7;
  id v8;
  void *v9;
  char isKindOfClass;
  void *v11;
  void *v12;
  id v13;
  _QWORD v14[4];
  id v15;
  id v16;
  id v17;
  HMDHome *v18;

  v7 = a3;
  v8 = a4;
  -[HMDHome accessoryWithUUID:](self, "accessoryWithUUID:", v8);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  isKindOfClass = objc_opt_isKindOfClass();

  if ((isKindOfClass & 1) != 0 && v9)
  {
    -[HMDHome backingStore](self, "backingStore");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "context");
    v12 = (void *)objc_claimAutoreleasedReturnValue();

    v14[0] = MEMORY[0x24BDAC760];
    v14[1] = 3221225472;
    v14[2] = __61__HMDHome__writeResidentCapabilities_accessoryUUID_homeUUID___block_invoke;
    v14[3] = &unk_24E79A910;
    v15 = v8;
    v16 = v7;
    v17 = v12;
    v18 = self;
    v13 = v12;
    objc_msgSend(v13, "performBlock:", v14);

  }
}

- (void)aggregator:(id)a3 changedAccessoryCapabilities:(id)a4 rawCapabilities:(id)a5 accessoryUUID:(id)a6 homeUUID:(id)a7
{
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  void *v17;
  HMDHome *v18;
  NSObject *v19;
  void *v20;
  int v21;
  void *v22;
  __int16 v23;
  id v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v12 = a3;
  v13 = a4;
  v14 = a5;
  v15 = a6;
  v16 = a7;
  v17 = (void *)MEMORY[0x227676638]();
  v18 = self;
  HMFGetOSLogHandle();
  v19 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    v21 = 138543618;
    v22 = v20;
    v23 = 2112;
    v24 = v15;
    _os_log_impl(&dword_2218F0000, v19, OS_LOG_TYPE_INFO, "%{public}@Aggregator: Received accessory capabilities for accessory: %@", (uint8_t *)&v21, 0x16u);

  }
  objc_autoreleasePoolPop(v17);
  -[HMDHome _writeAccessoryCapabilities:accessoryUUID:homeUUID:](v18, "_writeAccessoryCapabilities:accessoryUUID:homeUUID:", v14, v15, v16);

}

- (void)aggregator:(id)a3 changedResidentCapabilities:(id)a4 rawCapabilities:(id)a5 accessoryUUID:(id)a6 homeUUID:(id)a7
{
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  void *v17;
  HMDHome *v18;
  NSObject *v19;
  void *v20;
  int v21;
  void *v22;
  __int16 v23;
  id v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v12 = a3;
  v13 = a4;
  v14 = a5;
  v15 = a6;
  v16 = a7;
  v17 = (void *)MEMORY[0x227676638]();
  v18 = self;
  HMFGetOSLogHandle();
  v19 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    v21 = 138543618;
    v22 = v20;
    v23 = 2112;
    v24 = v15;
    _os_log_impl(&dword_2218F0000, v19, OS_LOG_TYPE_INFO, "%{public}@Aggregator: Received resident capabilities for accessory: %@", (uint8_t *)&v21, 0x16u);

  }
  objc_autoreleasePoolPop(v17);
  -[HMDHome _writeResidentCapabilities:accessoryUUID:homeUUID:](v18, "_writeResidentCapabilities:accessoryUUID:homeUUID:", v14, v15, v16);

}

- (void)aggregatorDidBecomePrimary:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  id v8;
  void *v9;
  void *v10;
  HMDHome *v11;
  NSObject *v12;
  void *v13;
  void *v14;
  void *v15;
  id v16;
  _QWORD v17[4];
  id v18;
  HMDHome *v19;
  id v20;
  uint8_t buf[4];
  void *v22;
  __int16 v23;
  id v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v4 = a3;
  -[HMDHome homeManager](self, "homeManager");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "_accessoryOfCurrentDevice");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v7 = v6;
  else
    v7 = 0;
  v8 = v7;

  -[HMDHome appleMediaAccessories](self, "appleMediaAccessories");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  if (v8)
  {
    v10 = (void *)MEMORY[0x227676638]();
    v11 = self;
    HMFGetOSLogHandle();
    v12 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v22 = v13;
      v23 = 2112;
      v24 = v8;
      _os_log_impl(&dword_2218F0000, v12, OS_LOG_TYPE_INFO, "%{public}@Aggregator: Became primary with current accessory %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v10);
    -[HMDHome backingStore](v11, "backingStore");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v14, "context");
    v15 = (void *)objc_claimAutoreleasedReturnValue();

    v17[0] = MEMORY[0x24BDAC760];
    v17[1] = 3221225472;
    v17[2] = __38__HMDHome_aggregatorDidBecomePrimary___block_invoke;
    v17[3] = &unk_24E79BBD0;
    v18 = v9;
    v19 = v11;
    v20 = v15;
    v16 = v15;
    objc_msgSend(v16, "performBlock:", v17);

  }
}

- (void)aggregator:(id)a3 accessoryCapabilitiesWithUUID:(id)a4 completion:(id)a5
{
  id v8;
  id v9;
  id v10;
  void *v11;
  void *v12;
  id v13;
  void *v14;
  void *v15;
  void *v16;
  HMDHome *v17;
  NSObject *v18;
  void *v19;
  void *v20;
  HMDHome *v21;
  NSObject *v22;
  void *v23;
  _QWORD v24[4];
  id v25;
  id v26;
  uint8_t buf[4];
  void *v28;
  __int16 v29;
  id v30;
  uint64_t v31;

  v31 = *MEMORY[0x24BDAC8D0];
  v8 = a3;
  v9 = a4;
  v10 = a5;
  -[HMDHome accessoryWithUUID:](self, "accessoryWithUUID:", v9);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v12 = v11;
  else
    v12 = 0;
  v13 = v12;

  if (v13)
  {
    -[HMDHome backingStore](self, "backingStore");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v14, "context");
    v15 = (void *)objc_claimAutoreleasedReturnValue();

    if (v15)
    {
      v24[0] = MEMORY[0x24BDAC760];
      v24[1] = 3221225472;
      v24[2] = __63__HMDHome_aggregator_accessoryCapabilitiesWithUUID_completion___block_invoke;
      v24[3] = &unk_24E79C2B8;
      v25 = v9;
      v26 = v10;
      objc_msgSend(v15, "performBlock:", v24);

    }
    else
    {
      v20 = (void *)MEMORY[0x227676638]();
      v21 = self;
      HMFGetOSLogHandle();
      v22 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v23 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543362;
        v28 = v23;
        _os_log_impl(&dword_2218F0000, v22, OS_LOG_TYPE_ERROR, "%{public}@Aggregator: Did not find backingstore context", buf, 0xCu);

      }
      objc_autoreleasePoolPop(v20);
      (*((void (**)(id, _QWORD))v10 + 2))(v10, 0);
    }

  }
  else
  {
    v16 = (void *)MEMORY[0x227676638]();
    v17 = self;
    HMFGetOSLogHandle();
    v18 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v28 = v19;
      v29 = 2112;
      v30 = v9;
      _os_log_impl(&dword_2218F0000, v18, OS_LOG_TYPE_ERROR, "%{public}@Aggregator: Did not find accessory for %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v16);
    (*((void (**)(id, _QWORD))v10 + 2))(v10, 0);
  }

}

- (void)aggregator:(id)a3 residentCapabilitiesWithUUID:(id)a4 completion:(id)a5
{
  id v8;
  id v9;
  id v10;
  void *v11;
  void *v12;
  id v13;
  void *v14;
  void *v15;
  void *v16;
  HMDHome *v17;
  NSObject *v18;
  void *v19;
  void *v20;
  HMDHome *v21;
  NSObject *v22;
  void *v23;
  _QWORD v24[4];
  id v25;
  id v26;
  uint8_t buf[4];
  void *v28;
  __int16 v29;
  id v30;
  uint64_t v31;

  v31 = *MEMORY[0x24BDAC8D0];
  v8 = a3;
  v9 = a4;
  v10 = a5;
  -[HMDHome accessoryWithUUID:](self, "accessoryWithUUID:", v9);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v12 = v11;
  else
    v12 = 0;
  v13 = v12;

  if (v13)
  {
    -[HMDHome backingStore](self, "backingStore");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v14, "context");
    v15 = (void *)objc_claimAutoreleasedReturnValue();

    if (v15)
    {
      v24[0] = MEMORY[0x24BDAC760];
      v24[1] = 3221225472;
      v24[2] = __62__HMDHome_aggregator_residentCapabilitiesWithUUID_completion___block_invoke;
      v24[3] = &unk_24E79C2B8;
      v25 = v9;
      v26 = v10;
      objc_msgSend(v15, "performBlock:", v24);

    }
    else
    {
      v20 = (void *)MEMORY[0x227676638]();
      v21 = self;
      HMFGetOSLogHandle();
      v22 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v23 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543362;
        v28 = v23;
        _os_log_impl(&dword_2218F0000, v22, OS_LOG_TYPE_ERROR, "%{public}@Aggregator: Did not find backingstore context", buf, 0xCu);

      }
      objc_autoreleasePoolPop(v20);
      (*((void (**)(id, _QWORD))v10 + 2))(v10, 0);
    }

  }
  else
  {
    v16 = (void *)MEMORY[0x227676638]();
    v17 = self;
    HMFGetOSLogHandle();
    v18 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v28 = v19;
      v29 = 2112;
      v30 = v9;
      _os_log_impl(&dword_2218F0000, v18, OS_LOG_TYPE_ERROR, "%{public}@Aggregator: Did not find accessory for %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v16);
    (*((void (**)(id, _QWORD))v10 + 2))(v10, 0);
  }

}

- (void)aggregator:(id)a3 didReceivePublicPairingKeyWithUUID:(id)a4 pairingIdentity:(id)a5
{
  id v8;
  id v9;
  id v10;
  void *v11;
  HMDHome *v12;
  NSObject *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  HMDHome *v18;
  NSObject *v19;
  void *v20;
  _QWORD v21[5];
  id v22;
  id v23;
  id v24;
  uint8_t buf[4];
  void *v26;
  __int16 v27;
  id v28;
  __int16 v29;
  id v30;
  uint64_t v31;

  v31 = *MEMORY[0x24BDAC8D0];
  v8 = a3;
  v9 = a4;
  v10 = a5;
  v11 = (void *)MEMORY[0x227676638]();
  v12 = self;
  HMFGetOSLogHandle();
  v13 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543874;
    v26 = v14;
    v27 = 2112;
    v28 = v10;
    v29 = 2112;
    v30 = v9;
    _os_log_impl(&dword_2218F0000, v13, OS_LOG_TYPE_INFO, "%{public}@Aggregator: Received accessory public pairing identity: %@ accessory: %@", buf, 0x20u);

  }
  objc_autoreleasePoolPop(v11);
  -[HMDHome backingStore](v12, "backingStore");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v15, "context");
  v16 = (void *)objc_claimAutoreleasedReturnValue();

  if (v16)
  {
    v21[0] = MEMORY[0x24BDAC760];
    v21[1] = 3221225472;
    v21[2] = __73__HMDHome_aggregator_didReceivePublicPairingKeyWithUUID_pairingIdentity___block_invoke;
    v21[3] = &unk_24E79A910;
    v21[4] = v12;
    v22 = v10;
    v23 = v9;
    v24 = v16;
    objc_msgSend(v24, "performBlock:", v21);

  }
  else
  {
    v17 = (void *)MEMORY[0x227676638]();
    v18 = v12;
    HMFGetOSLogHandle();
    v19 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v26 = v20;
      v27 = 2112;
      v28 = 0;
      _os_log_impl(&dword_2218F0000, v19, OS_LOG_TYPE_ERROR, "%{public}@Aggregator: Failed to handle received accessory public pairing identity due to missing backing store context: %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v17);
  }

}

- (void)aggregator:(id)a3 didReceiveDeviceIRKWithUUID:(id)a4 deviceIRK:(id)a5
{
  id v8;
  id v9;
  id v10;
  void *v11;
  HMDHome *v12;
  NSObject *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  HMDHome *v18;
  NSObject *v19;
  void *v20;
  _QWORD v21[5];
  id v22;
  id v23;
  id v24;
  uint8_t buf[4];
  void *v26;
  __int16 v27;
  id v28;
  __int16 v29;
  id v30;
  uint64_t v31;

  v31 = *MEMORY[0x24BDAC8D0];
  v8 = a3;
  v9 = a4;
  v10 = a5;
  v11 = (void *)MEMORY[0x227676638]();
  v12 = self;
  HMFGetOSLogHandle();
  v13 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543874;
    v26 = v14;
    v27 = 2112;
    v28 = v10;
    v29 = 2112;
    v30 = v9;
    _os_log_impl(&dword_2218F0000, v13, OS_LOG_TYPE_INFO, "%{public}@Aggregator: Received accessory deviceIRK: %@ accessory: %@", buf, 0x20u);

  }
  objc_autoreleasePoolPop(v11);
  -[HMDHome backingStore](v12, "backingStore");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v15, "context");
  v16 = (void *)objc_claimAutoreleasedReturnValue();

  if (v16)
  {
    v21[0] = MEMORY[0x24BDAC760];
    v21[1] = 3221225472;
    v21[2] = __60__HMDHome_aggregator_didReceiveDeviceIRKWithUUID_deviceIRK___block_invoke;
    v21[3] = &unk_24E79A910;
    v21[4] = v12;
    v22 = v10;
    v23 = v9;
    v24 = v16;
    objc_msgSend(v24, "performBlock:", v21);

  }
  else
  {
    v17 = (void *)MEMORY[0x227676638]();
    v18 = v12;
    HMFGetOSLogHandle();
    v19 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v26 = v20;
      v27 = 2112;
      v28 = 0;
      _os_log_impl(&dword_2218F0000, v19, OS_LOG_TYPE_ERROR, "%{public}@Aggregator: Missing backing store context: %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v17);
  }

}

- (void)aggregator:(id)a3 didReceiveSoftwareVersionWithUUID:(id)a4 softwareVersion:(id)a5
{
  id v8;
  id v9;
  id v10;
  void *v11;
  HMDHome *v12;
  NSObject *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  HMDHome *v19;
  NSObject *v20;
  void *v21;
  _QWORD v22[5];
  id v23;
  id v24;
  id v25;
  uint8_t buf[4];
  void *v27;
  __int16 v28;
  id v29;
  __int16 v30;
  void *v31;
  __int16 v32;
  id v33;
  uint64_t v34;

  v34 = *MEMORY[0x24BDAC8D0];
  v8 = a3;
  v9 = a4;
  v10 = a5;
  v11 = (void *)MEMORY[0x227676638]();
  v12 = self;
  HMFGetOSLogHandle();
  v13 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "buildVersion");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138544130;
    v27 = v14;
    v28 = 2112;
    v29 = v10;
    v30 = 2112;
    v31 = v15;
    v32 = 2112;
    v33 = v9;
    _os_log_impl(&dword_2218F0000, v13, OS_LOG_TYPE_INFO, "%{public}@Aggregator: Received accessory software version: %@ (%@) accessory: %@", buf, 0x2Au);

  }
  objc_autoreleasePoolPop(v11);
  -[HMDHome backingStore](v12, "backingStore");
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v16, "context");
  v17 = (void *)objc_claimAutoreleasedReturnValue();

  if (v17)
  {
    v22[0] = MEMORY[0x24BDAC760];
    v22[1] = 3221225472;
    v22[2] = __72__HMDHome_aggregator_didReceiveSoftwareVersionWithUUID_softwareVersion___block_invoke;
    v22[3] = &unk_24E79A910;
    v22[4] = v12;
    v23 = v10;
    v24 = v9;
    v25 = v17;
    objc_msgSend(v25, "performBlock:", v22);

  }
  else
  {
    v18 = (void *)MEMORY[0x227676638]();
    v19 = v12;
    HMFGetOSLogHandle();
    v20 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v27 = v21;
      v28 = 2112;
      v29 = 0;
      _os_log_impl(&dword_2218F0000, v20, OS_LOG_TYPE_ERROR, "%{public}@Aggregator: Failed to handle received software version due to missing backing store context: %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v18);
  }

}

- (id)_processTestModeHomeLocationStatusOverride:(id)a3
{
  id v4;
  int v5;
  void *v6;
  void *v7;
  void *v8;
  HMDHome *v9;
  NSObject *v10;
  void *v11;
  void *v12;
  int64_t v13;
  int64_t v14;
  BOOL v15;
  int64_t v16;
  int v18;
  void *v19;
  __int16 v20;
  id v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  v4 = a3;
  v5 = objc_msgSend(v4, "hmf_BOOLForKey:", CFSTR("kConfigTestingResetOverrideKey"));
  objc_msgSend(v4, "hmf_numberForKey:", CFSTR("kConfigTestingHomeLocationStatusKey"));
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = v6;
  if ((v5 & 1) != 0 || v6)
  {
    v13 = objc_msgSend(v6, "unsignedIntegerValue");
    v14 = -[HMDHome homeLocation](self, "homeLocation");
    os_unfair_recursive_lock_lock_with_options();
    if (v5)
    {
      if (!self->_overrideHomeLocation)
      {
        self->_overriddenHomeLocation = v13;
        os_unfair_recursive_lock_unlock();
LABEL_13:
        v12 = 0;
        goto LABEL_14;
      }
      v15 = 0;
    }
    else
    {
      v15 = 1;
    }
    self->_overrideHomeLocation = v15;
    self->_overriddenHomeLocation = v13;
    os_unfair_recursive_lock_unlock();
    v16 = -[HMDHome homeLocation](self, "homeLocation");
    if (v16 != v14)
      -[HMDHome _handleHomeLocationChange:previousLocation:](self, "_handleHomeLocationChange:previousLocation:", v16, v14);
    goto LABEL_13;
  }
  v8 = (void *)MEMORY[0x227676638]();
  v9 = self;
  HMFGetOSLogHandle();
  v10 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v18 = 138543618;
    v19 = v11;
    v20 = 2112;
    v21 = v4;
    _os_log_impl(&dword_2218F0000, v10, OS_LOG_TYPE_INFO, "%{public}@Home Location override configuration incomplete: %@", (uint8_t *)&v18, 0x16u);

  }
  objc_autoreleasePoolPop(v8);
  objc_msgSend(MEMORY[0x24BDD1540], "hmErrorWithCode:", 3);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
LABEL_14:

  return v12;
}

- (id)_processTestModeHomeAccessControlOverride:(id)a3
{
  id v4;
  int v5;
  void *v6;
  char v7;
  char v8;
  uint64_t v9;
  void *v10;
  HMDHome *v11;
  NSObject *v12;
  void *v13;
  void *v14;
  void *v15;
  HMDHome *v16;
  NSObject *v17;
  void *v18;
  int v20;
  void *v21;
  __int16 v22;
  id v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v4 = a3;
  v5 = objc_msgSend(v4, "hmf_BOOLForKey:", CFSTR("kConfigTestingResetOverrideKey"));
  objc_msgSend(v4, "hmf_numberForKey:", CFSTR("kConfigTestingHomeAccessControlKey"));
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  if (v6)
    v7 = 1;
  else
    v7 = v5;
  if ((v7 & 1) != 0)
  {
    os_unfair_recursive_lock_lock_with_options();
    if (v5)
    {

      v6 = 0;
    }
    v8 = HMFEqualObjects();
    objc_storeStrong((id *)&self->_overriddenHomeAccessControl, v6);
    v9 = os_unfair_recursive_lock_unlock();
    if ((v8 & 1) != 0)
    {
      v10 = (void *)MEMORY[0x227676638](v9);
      v11 = self;
      HMFGetOSLogHandle();
      v12 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        v20 = 138543618;
        v21 = v13;
        v22 = 2112;
        v23 = v4;
        _os_log_impl(&dword_2218F0000, v12, OS_LOG_TYPE_INFO, "%{public}@Home Access Control overridden to %@", (uint8_t *)&v20, 0x16u);

      }
      objc_autoreleasePoolPop(v10);
    }
    v14 = 0;
  }
  else
  {
    v15 = (void *)MEMORY[0x227676638]();
    v16 = self;
    HMFGetOSLogHandle();
    v17 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      v20 = 138543618;
      v21 = v18;
      v22 = 2112;
      v23 = v4;
      _os_log_impl(&dword_2218F0000, v17, OS_LOG_TYPE_INFO, "%{public}@Home Access Control override configuration incomplete: %@", (uint8_t *)&v20, 0x16u);

    }
    objc_autoreleasePoolPop(v15);
    objc_msgSend(MEMORY[0x24BDD1540], "hmErrorWithCode:", 3);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = 0;
  }

  return v14;
}

- (void)_handleRetrieveHomeLocationForFeedback:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  HMDHome *v12;
  NSObject *v13;
  void *v14;
  void *v15;
  HMDHome *v16;
  NSObject *v17;
  void *v18;
  int v19;
  void *v20;
  __int16 v21;
  void *v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  v4 = a3;
  -[HMDHome homeLocationHandler](self, "homeLocationHandler");
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  if (v5)
  {
    objc_msgSend(MEMORY[0x24BDBCED8], "dictionary");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHome homeLocationHandler](self, "homeLocationHandler");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "locationUpdateTimestamp");
    v8 = (void *)objc_claimAutoreleasedReturnValue();

    if (v8)
    {
      -[HMDHome homeLocationHandler](self, "homeLocationHandler");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v9, "locationUpdateTimestamp");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v6, "setObject:forKeyedSubscript:", v10, *MEMORY[0x24BDD5E08]);

    }
    v11 = (void *)MEMORY[0x227676638]();
    v12 = self;
    HMFGetOSLogHandle();
    v13 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      v19 = 138543618;
      v20 = v14;
      v21 = 2112;
      v22 = v6;
      _os_log_impl(&dword_2218F0000, v13, OS_LOG_TYPE_INFO, "%{public}@Retrieve home location for feedback : %@", (uint8_t *)&v19, 0x16u);

    }
    objc_autoreleasePoolPop(v11);
    objc_msgSend(v4, "respondWithPayload:", v6);
  }
  else
  {
    v15 = (void *)MEMORY[0x227676638]();
    v16 = self;
    HMFGetOSLogHandle();
    v17 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      v19 = 138543362;
      v20 = v18;
      _os_log_impl(&dword_2218F0000, v17, OS_LOG_TYPE_INFO, "%{public}@Home Location Handler does not exist.", (uint8_t *)&v19, 0xCu);

    }
    objc_autoreleasePoolPop(v15);
    objc_msgSend(MEMORY[0x24BDD1540], "hmErrorWithCode:", 20);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "respondWithError:", v6);
  }

}

- (void)runDailyTask
{
  HMDUnexpectedNotificationLogEvent *v2;
  id v3;

  -[HMDHome logEventSubmitter](self, "logEventSubmitter");
  v3 = (id)objc_claimAutoreleasedReturnValue();
  v2 = -[HMDUnexpectedNotificationLogEvent initWithCount:]([HMDUnexpectedNotificationLogEvent alloc], "initWithCount:", 0);
  objc_msgSend(v3, "submitLogEvent:", v2);

}

- (id)mediaGroupsAggregateDataTopicName
{
  void *v2;
  uint64_t v3;
  void *v4;
  void *v5;

  v2 = (void *)MEMORY[0x24BDD76C0];
  v3 = *MEMORY[0x24BDD5D40];
  -[HMDHome uuid](self, "uuid");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "topicFromSuffixID:homeUUID:", v3, v4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  return v5;
}

- (id)destinationControllerDataForAppleMediaAccessory:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  void *v7;

  v4 = a3;
  -[HMDHome mediaGroupsAggregateConsumer](self, "mediaGroupsAggregateConsumer");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "uuid");
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v5, "destinationControllerDataWithParentIdentifier:", v6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  return v7;
}

- (id)destinationForAppleMediaAccessory:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  void *v7;

  v4 = a3;
  -[HMDHome mediaGroupsAggregateConsumer](self, "mediaGroupsAggregateConsumer");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "uuid");
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v5, "destinationWithParentIdentifier:", v6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  return v7;
}

- (BOOL)hasActiveWACPairing
{
  void *v2;
  char v3;

  -[HMDHome accessoryBrowser](self, "accessoryBrowser");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "hasActiveWACPairing");

  return v3;
}

- (BOOL)defaultRoomContainsAccessoryWithUUID:(id)a3
{
  void *v4;
  void *v5;
  void *v6;
  char v7;

  -[HMDHome accessoryWithUUID:](self, "accessoryWithUUID:", a3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHome roomForEntireHome](self, "roomForEntireHome");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "room");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = objc_msgSend(v5, "isEqual:", v6);

  return v7;
}

- (BOOL)shouldWeSendAutomationsToClients
{
  void *v2;
  char v3;

  -[HMDHome currentUser](self, "currentUser");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "isRestrictedGuest") ^ 1;

  return v3;
}

- (BOOL)isRestrictedGuestEnabled
{
  void *v2;
  char v3;

  -[HMDHome featureDataSource](self, "featureDataSource");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "isRestrictedGuestEnabled");

  return v3;
}

- (void)_updateRestrictedGuestHomeAccessSettingsFromOutgoingInvitation:(id)a3 forUserModel:(id)a4
{
  id v6;
  id v7;
  void *v8;
  void *v9;
  HMDHome *v10;
  NSObject *v11;
  void *v12;
  void *v13;
  HMDHome *v14;
  int v15;
  void *v16;
  __int16 v17;
  void *v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v6 = a3;
  v7 = a4;
  if (-[HMDHome isRestrictedGuestEnabled](self, "isRestrictedGuestEnabled"))
  {
    objc_msgSend(v6, "uuidsOfAllowedAccessories");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "setAllowedAccessoryUUIDs:", v8);

    v9 = (void *)MEMORY[0x227676638]();
    v10 = self;
    HMFGetOSLogHandle();
    v11 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v7, "allowedAccessoryUUIDs");
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      v15 = 138543618;
      v16 = v12;
      v17 = 2112;
      v18 = v13;
      _os_log_impl(&dword_2218F0000, v11, OS_LOG_TYPE_INFO, "%{public}@Allowed accessories for RG users: %@", (uint8_t *)&v15, 0x16u);

LABEL_6:
    }
  }
  else
  {
    v9 = (void *)MEMORY[0x227676638]();
    v14 = self;
    HMFGetOSLogHandle();
    v11 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      v15 = 138543362;
      v16 = v12;
      _os_log_impl(&dword_2218F0000, v11, OS_LOG_TYPE_INFO, "%{public}@Restricted feature flag is not turned on.", (uint8_t *)&v15, 0xCu);
      goto LABEL_6;
    }
  }

  objc_autoreleasePoolPop(v9);
}

- (void)_handleUpdateRestrictedGuestSettings:(id)a3
{
  id v4;
  void *v5;
  HMDHome *v6;
  NSObject *v7;
  void *v8;
  void *v9;
  int v10;
  void *v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v4 = a3;
  if (-[HMDHome hasAnyResident](self, "hasAnyResident") && isTVOSDevice())
  {
    -[HMDHome __handleUpdateRestrictedGuestSettings:](self, "__handleUpdateRestrictedGuestSettings:", v4);
  }
  else
  {
    v5 = (void *)MEMORY[0x227676638]();
    v6 = self;
    HMFGetOSLogHandle();
    v7 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      v10 = 138543362;
      v11 = v8;
      _os_log_impl(&dword_2218F0000, v7, OS_LOG_TYPE_ERROR, "%{public}@Not handling this message as this home does not have any resident and this is controller.", (uint8_t *)&v10, 0xCu);

    }
    objc_autoreleasePoolPop(v5);
    objc_msgSend(MEMORY[0x24BDD1540], "hmErrorWithCode:", 91);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "respondWithError:", v9);

  }
}

- (void)__handleUpdateRestrictedGuestSettings:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  HMDHome *v7;
  NSObject *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  uint64_t v14;
  void *v15;
  void *v16;
  HMDRestrictedGuestHomeAccessSettings *v17;
  void *v18;
  int v19;
  void *v20;
  HMDHome *v21;
  NSObject *v22;
  void *v23;
  void *v24;
  uint64_t v25;
  void *v26;
  HMDHome *v27;
  NSObject *v28;
  void *v29;
  void *v30;
  void *v31;
  HMDHome *v32;
  NSObject *v33;
  void *v34;
  void *v35;
  uint64_t v36;
  void *v37;
  HMDHome *v38;
  NSObject *v39;
  void *v40;
  void *v41;
  void *v42;
  HMDHome *v43;
  NSObject *v44;
  void *v45;
  void *v46;
  void *v47;
  HMDHome *v48;
  NSObject *v49;
  void *v50;
  void *v51;
  void *v52;
  void *v53;
  void *v54;
  void *v55;
  void *v56;
  _QWORD v57[4];
  id v58;
  HMDHome *v59;
  id v60;
  id v61;
  HMDRestrictedGuestHomeAccessSettings *v62;
  uint64_t v63;
  uint8_t buf[4];
  void *v65;
  __int16 v66;
  void *v67;
  __int16 v68;
  id v69;
  uint64_t v70;

  v70 = *MEMORY[0x24BDAC8D0];
  v4 = a3;
  objc_msgSend(v4, "flow");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = (void *)MEMORY[0x227676638]();
  v7 = self;
  HMFGetOSLogHandle();
  v8 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "UUID");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543874;
    v65 = v9;
    v66 = 2112;
    v67 = v10;
    v68 = 2112;
    v69 = v4;
    _os_log_impl(&dword_2218F0000, v8, OS_LOG_TYPE_INFO, "%{public}@[Flow: %@] Handling update restricted guest settings message: %@", buf, 0x20u);

  }
  objc_autoreleasePoolPop(v6);
  if (-[HMDHome isRestrictedGuestEnabled](v7, "isRestrictedGuestEnabled"))
  {
    objc_msgSend(v4, "stringForKey:", CFSTR("kUserIDKey"));
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHome users](v7, "users");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "hmf_firstObjectWithValue:forKeyPath:", v11, CFSTR("userID"));
    v13 = (void *)objc_claimAutoreleasedReturnValue();

    if (v13)
    {
      if ((objc_msgSend(v13, "isRestrictedGuest") & 1) != 0)
      {
        v14 = *MEMORY[0x24BDD6AA8];
        v63 = objc_opt_class();
        objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", &v63, 1);
        v15 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v4, "unarchivedObjectForKey:ofClasses:", v14, v15);
        v16 = (void *)objc_claimAutoreleasedReturnValue();

        if (!v16)
        {
          v42 = (void *)MEMORY[0x227676638]();
          v43 = v7;
          HMFGetOSLogHandle();
          v44 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v44, OS_LOG_TYPE_ERROR))
          {
            HMFGetLogIdentifier();
            v45 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v5, "UUID");
            v46 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 138543618;
            v65 = v45;
            v66 = 2112;
            v67 = v46;
            _os_log_impl(&dword_2218F0000, v44, OS_LOG_TYPE_ERROR, "%{public}@[Flow: %@] Failed to decode restricted guest settings", buf, 0x16u);

          }
          objc_autoreleasePoolPop(v42);
          objc_msgSend(MEMORY[0x24BDD1540], "hmErrorWithCode:", 3);
          v17 = (HMDRestrictedGuestHomeAccessSettings *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v4, "respondWithError:", v17);
          goto LABEL_31;
        }
        v17 = -[HMDRestrictedGuestHomeAccessSettings initWithRestrictedGuestHomeAccessSettings:]([HMDRestrictedGuestHomeAccessSettings alloc], "initWithRestrictedGuestHomeAccessSettings:", v16);
        if (v17)
        {
          objc_msgSend(v13, "restrictedGuestAccessSettings");
          v18 = (void *)objc_claimAutoreleasedReturnValue();
          v19 = HMFEqualObjects();

          if (!v19)
          {
            -[HMDHome backingStore](v7, "backingStore");
            v53 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v53, "context");
            v54 = (void *)objc_claimAutoreleasedReturnValue();
            v57[0] = MEMORY[0x24BDAC760];
            v57[1] = 3221225472;
            v57[2] = __49__HMDHome___handleUpdateRestrictedGuestSettings___block_invoke;
            v57[3] = &unk_24E79AD20;
            v58 = v13;
            v59 = v7;
            v60 = v5;
            v61 = v4;
            v62 = v17;
            objc_msgSend(v54, "performBlock:", v57);

            v52 = v58;
            goto LABEL_30;
          }
          v20 = (void *)MEMORY[0x227676638]();
          v21 = v7;
          HMFGetOSLogHandle();
          v22 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
          {
            HMFGetLogIdentifier();
            v23 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v5, "UUID");
            v55 = v20;
            v24 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 138543618;
            v65 = v23;
            v66 = 2112;
            v67 = v24;
            _os_log_impl(&dword_2218F0000, v22, OS_LOG_TYPE_ERROR, "%{public}@[Flow: %@] Current restricted guest settings are the same as the new settings. Nothing to done here", buf, 0x16u);

            v20 = v55;
          }

          objc_autoreleasePoolPop(v20);
          objc_msgSend(MEMORY[0x24BDD1540], "hmPrivateErrorWithCode:", 2904);
          v25 = objc_claimAutoreleasedReturnValue();
        }
        else
        {
          v47 = (void *)MEMORY[0x227676638]();
          v48 = v7;
          HMFGetOSLogHandle();
          v49 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v49, OS_LOG_TYPE_ERROR))
          {
            HMFGetLogIdentifier();
            v50 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v5, "UUID");
            v56 = v47;
            v51 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 138543618;
            v65 = v50;
            v66 = 2112;
            v67 = v51;
            _os_log_impl(&dword_2218F0000, v49, OS_LOG_TYPE_ERROR, "%{public}@[Flow: %@] Failed to initialize restricted guest settings", buf, 0x16u);

            v47 = v56;
          }

          objc_autoreleasePoolPop(v47);
          objc_msgSend(MEMORY[0x24BDD1540], "hmErrorWithCode:", 3);
          v25 = objc_claimAutoreleasedReturnValue();
        }
        v52 = (void *)v25;
        objc_msgSend(v4, "respondWithError:", v25);
LABEL_30:

LABEL_31:
        goto LABEL_32;
      }
      v37 = (void *)MEMORY[0x227676638]();
      v38 = v7;
      HMFGetOSLogHandle();
      v39 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v39, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v40 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v5, "UUID");
        v41 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543874;
        v65 = v40;
        v66 = 2112;
        v67 = v41;
        v68 = 2112;
        v69 = v13;
        _os_log_impl(&dword_2218F0000, v39, OS_LOG_TYPE_ERROR, "%{public}@[Flow: %@] Cannot update restricted guest settings for user with UUID %@ as the user is not RG", buf, 0x20u);

      }
      objc_autoreleasePoolPop(v37);
      objc_msgSend(MEMORY[0x24BDD1540], "hmPrivateErrorWithCode:", 2901);
      v36 = objc_claimAutoreleasedReturnValue();
    }
    else
    {
      v31 = (void *)MEMORY[0x227676638]();
      v32 = v7;
      HMFGetOSLogHandle();
      v33 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v33, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v34 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v5, "UUID");
        v35 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543874;
        v65 = v34;
        v66 = 2112;
        v67 = v35;
        v68 = 2112;
        v69 = v11;
        _os_log_impl(&dword_2218F0000, v33, OS_LOG_TYPE_ERROR, "%{public}@[Flow: %@] Failed to find user with userID %@ in the home", buf, 0x20u);

      }
      objc_autoreleasePoolPop(v31);
      objc_msgSend(MEMORY[0x24BDD1540], "hmErrorWithCode:", 2);
      v36 = objc_claimAutoreleasedReturnValue();
    }
    v16 = (void *)v36;
    objc_msgSend(v4, "respondWithError:", v36);
LABEL_32:

    goto LABEL_33;
  }
  v26 = (void *)MEMORY[0x227676638]();
  v27 = v7;
  HMFGetOSLogHandle();
  v28 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v28, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v29 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "UUID");
    v30 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543618;
    v65 = v29;
    v66 = 2112;
    v67 = v30;
    _os_log_impl(&dword_2218F0000, v28, OS_LOG_TYPE_INFO, "%{public}@[Flow: %@] Failed to update restricted guest settings because restricted guest is not enabled", buf, 0x16u);

  }
  objc_autoreleasePoolPop(v26);
  objc_msgSend(MEMORY[0x24BDD1540], "hmErrorWithCode:", 48);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "respondWithError:", v11);
LABEL_33:

}

- (void)_saveOutgoingInvitationsWithRestrictedGuestSettings:(id)a3 inTransaction:(id)a4 message:(id)a5 transactionCompleted:(id)a6
{
  id v10;
  id v11;
  id v12;
  id v13;
  id v14;
  _QWORD v15[5];
  id v16;
  id v17;
  _QWORD v18[5];
  id v19;

  v10 = a3;
  v11 = a5;
  v17 = a6;
  v18[0] = MEMORY[0x24BDAC760];
  v18[1] = 3221225472;
  v18[2] = __106__HMDHome__saveOutgoingInvitationsWithRestrictedGuestSettings_inTransaction_message_transactionCompleted___block_invoke;
  v18[3] = &unk_24E776A68;
  v18[4] = self;
  v19 = v10;
  v15[0] = MEMORY[0x24BDAC760];
  v15[1] = 3221225472;
  v15[2] = __106__HMDHome__saveOutgoingInvitationsWithRestrictedGuestSettings_inTransaction_message_transactionCompleted___block_invoke_1884;
  v15[3] = &unk_24E79AB68;
  v15[4] = self;
  v16 = v11;
  v12 = v11;
  v13 = v17;
  v14 = v10;
  objc_msgSend(a4, "runWithCoreDataBlock:withCompletionBlock:", v18, v15);

}

- (void)_saveRestrictedGuestSettingsFromOutgoingInvitation:(id)a3 managedObjectContext:(id)a4 error:(id *)a5
{
  id v8;
  id v9;
  void *v10;
  int v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  HMDHome *v19;
  NSObject *v20;
  void *v21;
  id v22;
  void *v23;
  HMDHome *v24;
  NSObject *v25;
  void *v26;
  void *v27;
  HMDHome *v28;
  NSObject *v29;
  void *v30;
  void *v31;
  void *v32;
  void *context;
  _QWORD v34[4];
  id v35;
  HMDHome *v36;
  _BYTE *v37;
  uint8_t buf[4];
  void *v39;
  __int16 v40;
  id v41;
  _BYTE v42[24];
  char v43;
  uint64_t v44;

  v44 = *MEMORY[0x24BDAC8D0];
  v8 = a3;
  v9 = a4;
  objc_msgSend(v8, "user");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v11 = objc_msgSend(v10, "isRestrictedGuest");

  if (v11)
  {
    objc_msgSend(v9, "deletedObjects");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "na_firstObjectPassingTest:", &__block_literal_global_1886);
    v13 = (void *)objc_claimAutoreleasedReturnValue();

    if (v13)
    {
      objc_msgSend(v8, "user");
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v14, "uuid");
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      +[HMCContext findGuestWithModelID:](HMCContext, "findGuestWithModelID:", v15);
      v16 = (void *)objc_claimAutoreleasedReturnValue();

      if (v16)
      {
        *(_QWORD *)v42 = 0;
        *(_QWORD *)&v42[8] = v42;
        *(_QWORD *)&v42[16] = 0x2020000000;
        v43 = 1;
        objc_msgSend(v9, "deletedObjects");
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        v34[0] = MEMORY[0x24BDAC760];
        v34[1] = 3221225472;
        v34[2] = __89__HMDHome__saveRestrictedGuestSettingsFromOutgoingInvitation_managedObjectContext_error___block_invoke_1999;
        v34[3] = &unk_24E790B60;
        v35 = v16;
        v36 = self;
        v37 = v42;
        objc_msgSend(v17, "hmf_enumerateWithAutoreleasePoolUsingBlock:", v34);

        if (a5)
        {
          *a5 = 0;
          if (!*(_BYTE *)(*(_QWORD *)&v42[8] + 24))
          {
            objc_msgSend(MEMORY[0x24BDD1540], "hmPrivateErrorWithCode:", 2905);
            *a5 = (id)objc_claimAutoreleasedReturnValue();
          }
        }
        v18 = (void *)MEMORY[0x227676638]();
        v19 = self;
        HMFGetOSLogHandle();
        v20 = (id)objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v20, OS_LOG_TYPE_INFO))
        {
          HMFGetLogIdentifier();
          v21 = (void *)objc_claimAutoreleasedReturnValue();
          v22 = *a5;
          *(_DWORD *)buf = 138543618;
          v39 = v21;
          v40 = 2112;
          v41 = v22;
          _os_log_impl(&dword_2218F0000, v20, OS_LOG_TYPE_INFO, "%{public}@Finishing outgoing invitation acceptance with error: %@", buf, 0x16u);

        }
        objc_autoreleasePoolPop(v18);

        _Block_object_dispose(v42, 8);
      }
      else
      {
        context = (void *)MEMORY[0x227676638]();
        v28 = self;
        HMFGetOSLogHandle();
        v29 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
        {
          HMFGetLogIdentifier();
          v30 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v8, "user", context);
          v31 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v31, "uuid");
          v32 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)v42 = 138543618;
          *(_QWORD *)&v42[4] = v30;
          *(_WORD *)&v42[12] = 2112;
          *(_QWORD *)&v42[14] = v32;
          _os_log_impl(&dword_2218F0000, v29, OS_LOG_TYPE_ERROR, "%{public}@Unable to find the newly created guest model after accepting the invitation in database: %@", v42, 0x16u);

        }
        objc_autoreleasePoolPop(context);
        if (a5)
        {
          objc_msgSend(MEMORY[0x24BDD1540], "hmErrorWithCode:", 2);
          *a5 = (id)objc_claimAutoreleasedReturnValue();
        }
      }

    }
    else
    {
      v23 = (void *)MEMORY[0x227676638]();
      v24 = self;
      HMFGetOSLogHandle();
      v25 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v26 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v8, "uuid");
        v27 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)v42 = 138543618;
        *(_QWORD *)&v42[4] = v26;
        *(_WORD *)&v42[12] = 2112;
        *(_QWORD *)&v42[14] = v27;
        _os_log_impl(&dword_2218F0000, v25, OS_LOG_TYPE_ERROR, "%{public}@Unable to find the outgoing invitation with UUID in database: %@", v42, 0x16u);

      }
      objc_autoreleasePoolPop(v23);
      if (a5)
      {
        objc_msgSend(MEMORY[0x24BDD1540], "hmErrorWithCode:", 2);
        *a5 = (id)objc_claimAutoreleasedReturnValue();
      }
    }

  }
}

- (void)_loadRestrictedGuestConfigurationOnLocksAfterInviteAcceptance:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  HMDHome *v10;
  NSObject *v11;
  void *v12;
  void *v13;
  void *v14;
  id v15;
  void *v16;
  void *v17;
  void *v18;
  uint64_t v19;
  id v20;
  id v21;
  void *v22;
  id v23;
  id v24;
  void *v25;
  HMDHome *v26;
  NSObject *v27;
  void *v28;
  void *v29;
  HMDHome *v30;
  NSObject *v31;
  void *v32;
  _QWORD v33[5];
  id v34;
  id v35;
  _QWORD v36[4];
  id v37;
  void *v38;
  id v39;
  uint8_t buf[4];
  void *v41;
  __int16 v42;
  id v43;
  __int16 v44;
  void *v45;
  __int16 v46;
  void *v47;
  uint64_t v48;

  v48 = *MEMORY[0x24BDAC8D0];
  v4 = a3;
  -[HMDHome userWithUUID:](self, "userWithUUID:", v4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  if ((objc_msgSend(v5, "isRestrictedGuest") & 1) != 0)
  {
    objc_msgSend(v5, "restrictedGuestAccessSettings");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "uuidsOfAllowedAccessories");
    v7 = (void *)objc_claimAutoreleasedReturnValue();

    if (v7)
    {
      if ((objc_msgSend(v7, "hmf_isEmpty") & 1) == 0)
      {
        objc_msgSend(MEMORY[0x24BE3F178], "internalOnlyInitializer");
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        v9 = (void *)MEMORY[0x227676638]();
        v10 = self;
        HMFGetOSLogHandle();
        v11 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
        {
          HMFGetLogIdentifier();
          v12 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v8, "UUID");
          v13 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v5, "uuid");
          v14 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138544130;
          v41 = v12;
          v42 = 2112;
          v43 = v13;
          v44 = 2112;
          v45 = v14;
          v46 = 2112;
          v47 = v7;
          _os_log_impl(&dword_2218F0000, v11, OS_LOG_TYPE_INFO, "%{public}@[NewFlow: %@] Kicking off operations for restricted guest: %@ on invitation acceptance with allowed accessories: %@", buf, 0x2Au);

        }
        objc_autoreleasePoolPop(v9);
        v15 = objc_alloc(MEMORY[0x24BE3F168]);
        -[HMDHome workQueue](v10, "workQueue");
        v16 = (void *)objc_claimAutoreleasedReturnValue();
        v17 = (void *)objc_msgSend(v15, "initWithQueue:", v16);

        v18 = (void *)MEMORY[0x24BE3F180];
        v19 = MEMORY[0x24BDAC760];
        v36[0] = MEMORY[0x24BDAC760];
        v36[1] = 3221225472;
        v36[2] = __73__HMDHome__loadRestrictedGuestConfigurationOnLocksAfterInviteAcceptance___block_invoke;
        v36[3] = &unk_24E796FD8;
        v20 = v5;
        v37 = v20;
        v38 = v7;
        v21 = v8;
        v39 = v21;
        objc_msgSend(v18, "inContext:perform:", v17, v36);
        v22 = (void *)objc_claimAutoreleasedReturnValue();
        v33[0] = v19;
        v33[1] = 3221225472;
        v33[2] = __73__HMDHome__loadRestrictedGuestConfigurationOnLocksAfterInviteAcceptance___block_invoke_2;
        v33[3] = &unk_24E78A3B0;
        v33[4] = v10;
        v34 = v21;
        v35 = v20;
        v23 = v21;
        v24 = (id)objc_msgSend(v22, "then:", v33);

      }
    }
    else
    {
      v29 = (void *)MEMORY[0x227676638]();
      v30 = self;
      HMFGetOSLogHandle();
      v31 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v32 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        v41 = v32;
        v42 = 2112;
        v43 = v4;
        _os_log_impl(&dword_2218F0000, v31, OS_LOG_TYPE_ERROR, "%{public}@Allowed Accessories not set for guest: %@", buf, 0x16u);

      }
      objc_autoreleasePoolPop(v29);
    }

  }
  else
  {
    v25 = (void *)MEMORY[0x227676638]();
    v26 = self;
    HMFGetOSLogHandle();
    v27 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v27, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v28 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v41 = v28;
      v42 = 2112;
      v43 = v4;
      _os_log_impl(&dword_2218F0000, v27, OS_LOG_TYPE_INFO, "%{public}@User %@ is not a restricted guest, not configuring credentials on locks here", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v25);
  }

}

- (BOOL)areCharacteristicRequests:(id)a3 allowedForUser:(id)a4
{
  id v6;
  id v7;
  void *v8;
  void *v9;
  id v10;
  char v11;
  _QWORD v13[4];
  id v14;

  v6 = a3;
  v7 = a4;
  if (-[HMDHome isRestrictedGuestEnabled](self, "isRestrictedGuestEnabled")
    && objc_msgSend(v7, "isRestrictedGuest"))
  {
    objc_msgSend(v7, "restrictedGuestAccessSettings");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "uuidsOfAllowedAccessories");
    v9 = (void *)objc_claimAutoreleasedReturnValue();

    v13[0] = MEMORY[0x24BDAC760];
    v13[1] = 3221225472;
    v13[2] = __52__HMDHome_areCharacteristicRequests_allowedForUser___block_invoke;
    v13[3] = &unk_24E79AA10;
    v10 = v9;
    v14 = v10;
    if (objc_msgSend(v6, "na_all:", v13))
      v11 = objc_msgSend(v7, "isAccessCurrentlyAllowedBySchedule");
    else
      v11 = 0;

  }
  else
  {
    v11 = 1;
  }

  return v11;
}

- (BOOL)receivedRemoteMessageOverTransportType:(int)a3 remoteMessageSenderContext:(id)a4
{
  id v5;
  _BOOL4 v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;

  v5 = a4;
  v6 = -[HMDHome isCurrentDeviceConfirmedPrimaryResident](self, "isCurrentDeviceConfirmedPrimaryResident");
  if (v6)
  {
    objc_msgSend(v5, "pairingIdentityIdentifier");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHome userWithPairingIdentityIdentifier:](self, "userWithPairingIdentityIdentifier:", v7);
    v8 = (void *)objc_claimAutoreleasedReturnValue();

    if (v8 && (objc_msgSend(v8, "isRemoteAccessAllowed") & 1) == 0)
    {
      -[HMDHome presenceMonitor](self, "presenceMonitor");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x24BDBCE60], "now");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v8, "uuid");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v9, "updateLastLocalActivityTimestamp:forUserUUID:", v10, v11);

    }
  }

  return v6;
}

- (BOOL)supportsResidentSelection
{
  void *v2;
  char v3;

  -[HMDHome residentDeviceManager](self, "residentDeviceManager");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "homeSupportsResidentSelection");

  return v3;
}

- (HMDResidentDevice)userSelectedPreferredResident
{
  void *v2;
  void *v3;

  -[HMDHome residentDeviceManager](self, "residentDeviceManager");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "userSelectedPreferredResident");
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  return (HMDResidentDevice *)v3;
}

- (NSArray)autoSelectedPreferredResidents
{
  void *v2;
  void *v3;

  -[HMDHome residentDeviceManager](self, "residentDeviceManager");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "autoSelectedPreferredResidents");
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  return (NSArray *)v3;
}

- (void)_handleFetchTriggerNameRequest:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  HMDHome *v12;
  NSObject *v13;
  void *v14;
  void *v15;
  HMDHome *v16;
  NSObject *v17;
  void *v18;
  _QWORD v19[4];
  id v20;
  const __CFString *v21;
  void *v22;
  uint8_t buf[4];
  void *v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v4 = a3;
  objc_msgSend(v4, "uuidForKey:", CFSTR("triggerUUID"));
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  if (v5)
  {
    -[HMDHome triggers](self, "triggers");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v19[0] = MEMORY[0x24BDAC760];
    v19[1] = 3221225472;
    v19[2] = __42__HMDHome__handleFetchTriggerNameRequest___block_invoke;
    v19[3] = &unk_24E786F80;
    v20 = v5;
    objc_msgSend(v6, "na_firstObjectPassingTest:", v19);
    v7 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v7, "configuredName");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    if (v8 || (objc_msgSend(v7, "name"), (v8 = (void *)objc_claimAutoreleasedReturnValue()) != 0))
    {
      v21 = CFSTR("kTriggerName");
      v22 = v8;
      objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", &v22, &v21, 1);
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "respondWithPayload:", v9);

    }
    else
    {
      v15 = (void *)MEMORY[0x227676638]();
      v16 = self;
      HMFGetOSLogHandle();
      v17 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v18 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543362;
        v24 = v18;
        _os_log_impl(&dword_2218F0000, v17, OS_LOG_TYPE_ERROR, "%{public}@trigger name is nil.", buf, 0xCu);

      }
      objc_autoreleasePoolPop(v15);
      objc_msgSend(MEMORY[0x24BDD1540], "hmErrorWithCode:", 20);
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "respondWithError:", v8);
    }

    v10 = v20;
  }
  else
  {
    v11 = (void *)MEMORY[0x227676638]();
    v12 = self;
    HMFGetOSLogHandle();
    v13 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v24 = v14;
      _os_log_impl(&dword_2218F0000, v13, OS_LOG_TYPE_ERROR, "%{public}@message does not contain the trigger SPI identifier", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v11);
    objc_msgSend(MEMORY[0x24BDD1540], "hmErrorWithCode:", 20);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "respondWithError:", v10);
  }

}

- (BOOL)shouldPostBulletin
{
  void *v3;
  char v4;
  char v5;
  BOOL v6;
  void *v7;
  HMDHome *v8;
  NSObject *v9;
  void *v10;
  void *v11;
  void *v12;
  int v14;
  void *v15;
  __int16 v16;
  void *v17;
  __int16 v18;
  void *v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  -[HMDHome currentUser](self, "currentUser");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "isAccessCurrentlyAllowedBySchedule");
  if (objc_msgSend(v3, "isRestrictedGuest")
    && (-[HMDHome homeLocation](self, "homeLocation") == 1 ? (v5 = v4) : (v5 = 0), (v5 & 1) == 0))
  {
    v7 = (void *)MEMORY[0x227676638]();
    v8 = self;
    HMFGetOSLogHandle();
    v9 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      -[HMDHome homeLocation](v8, "homeLocation");
      HMStringFromHomeLocation();
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      HMFBooleanToString();
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      v14 = 138543874;
      v15 = v10;
      v16 = 2112;
      v17 = v11;
      v18 = 2112;
      v19 = v12;
      _os_log_impl(&dword_2218F0000, v9, OS_LOG_TYPE_INFO, "%{public}@Will not post the bulletin as RG is either away from the home or not within schedule. HomeLocation: %@, allowedBySchedule: %@", (uint8_t *)&v14, 0x20u);

    }
    objc_autoreleasePoolPop(v7);
    v6 = 0;
  }
  else
  {
    v6 = 1;
  }

  return v6;
}

- (void)setMediaSessions:(id)a3
{
  objc_storeStrong((id *)&self->_mediaSessions, a3);
}

- (void)setMediaSessionStates:(id)a3
{
  objc_storeStrong((id *)&self->_mediaSessionStates, a3);
}

- (HMDAccessoryNetworkProtectionGroupRegistry)networkProtectionGroupRegistry
{
  return self->_networkProtectionGroupRegistry;
}

- (void)setNetworkProtectionGroupRegistry:(id)a3
{
  objc_storeStrong((id *)&self->_networkProtectionGroupRegistry, a3);
}

- (NSMutableDictionary)newlyConfiguredAccessories
{
  return self->_newlyConfiguredAccessories;
}

- (BOOL)isOwnerTrustZoneCapable
{
  return self->_ownerTrustZoneCapable;
}

- (NSMutableArray)currentTriggers
{
  return self->_currentTriggers;
}

- (void)setCurrentTriggers:(id)a3
{
  objc_storeStrong((id *)&self->_currentTriggers, a3);
}

- (BOOL)startThreadNetworkInProgress
{
  return self->_startThreadNetworkInProgress;
}

- (void)setStartThreadNetworkInProgress:(BOOL)a3
{
  self->_startThreadNetworkInProgress = a3;
}

- (HMDThreadNetworkStatusReporter)threadNetworkPeriodicStatusReporter
{
  return self->_threadNetworkPeriodicStatusReporter;
}

- (void)setThreadNetworkPeriodicStatusReporter:(id)a3
{
  objc_storeStrong((id *)&self->_threadNetworkPeriodicStatusReporter, a3);
}

- (BOOL)threadPreferredNetworkExists
{
  return self->_threadPreferredNetworkExists;
}

- (void)setThreadPreferredNetworkExists:(BOOL)a3
{
  self->_threadPreferredNetworkExists = a3;
}

- (BOOL)threadNetworkIsUp
{
  return self->_threadNetworkIsUp;
}

- (void)setThreadNetworkIsUp:(BOOL)a3
{
  self->_threadNetworkIsUp = a3;
}

- (NSNumber)numberOfCameras
{
  return self->_numberOfCameras;
}

- (void)setNumberOfCameras:(id)a3
{
  objc_setProperty_nonatomic_copy(self, a2, a3, 416);
}

- (NSUUID)clientWalletKeyUUID
{
  return (NSUUID *)objc_getProperty(self, a2, 424, 1);
}

- (void)setClientWalletKeyUUID:(id)a3
{
  objc_setProperty_atomic_copy(self, a2, a3, 424);
}

- (HMDHomeObjectLookup)lookup
{
  return self->_lookup;
}

- (HMDHomeManager)homeManager
{
  return (HMDHomeManager *)objc_loadWeakRetained((id *)&self->_homeManager);
}

- (void)setHomeManager:(id)a3
{
  objc_storeWeak((id *)&self->_homeManager, a3);
}

- (NSUUID)uuid
{
  return self->_uuid;
}

- (NSUUID)spiClientIdentifier
{
  return self->_spiClientIdentifier;
}

- (NSUUID)zoneID
{
  return self->_zoneID;
}

- (HMDHomeLocationHandler)homeLocationHandler
{
  return self->_homeLocationHandler;
}

- (HMUserPresenceAuthorization)presenceAuthStatus
{
  return self->_presenceAuthStatus;
}

- (void)setPresenceAuthStatus:(id)a3
{
  objc_storeStrong((id *)&self->_presenceAuthStatus, a3);
}

- (HMUserPresenceCompute)presenceComputeStatus
{
  return self->_presenceComputeStatus;
}

- (void)setPresenceComputeStatus:(id)a3
{
  objc_storeStrong((id *)&self->_presenceComputeStatus, a3);
}

- (HMDHomeAdministratorHandler)administratorHandler
{
  return (HMDHomeAdministratorHandler *)objc_getProperty(self, a2, 512, 1);
}

- (HMDMediaGroupsAggregator)mediaGroupsAggregator
{
  return (HMDMediaGroupsAggregator *)objc_getProperty(self, a2, 520, 1);
}

- (void)setMediaGroupsAggregator:(id)a3
{
  objc_setProperty_atomic(self, a2, a3, 520);
}

- (HMDMediaGroupsUnconfiguredParticipantOnboardingManager)mediaGroupsUnconfiguredParticipantOnboardingManager
{
  return (HMDMediaGroupsUnconfiguredParticipantOnboardingManager *)objc_getProperty(self, a2, 528, 1);
}

- (void)setMediaGroupsUnconfiguredParticipantOnboardingManager:(id)a3
{
  objc_setProperty_atomic(self, a2, a3, 528);
}

- (NSDate)notificationsUpdatedTime
{
  return self->_notificationsUpdatedTime;
}

- (void)setNotificationsUpdatedTime:(id)a3
{
  objc_setProperty_nonatomic_copy(self, a2, a3, 536);
}

- (HMDHomePresenceMonitor)presenceMonitor
{
  return self->_presenceMonitor;
}

- (void)setPresenceMonitor:(id)a3
{
  objc_storeStrong((id *)&self->_presenceMonitor, a3);
}

- (HMDUserPresenceFeeder)presenceFeeder
{
  return self->_presenceFeeder;
}

- (HMDHomeMediaSystemHandler)mediaSystemController
{
  return (HMDHomeMediaSystemHandler *)objc_getProperty(self, a2, 560, 1);
}

- (void)setMediaSystemController:(id)a3
{
  objc_setProperty_atomic(self, a2, a3, 560);
}

- (HMDHomePeriodicReader)periodicReader
{
  return self->_periodicReader;
}

- (HMDPrimaryResidentChangeMonitor)primaryResidentChangeMonitor
{
  return (HMDPrimaryResidentChangeMonitor *)objc_getProperty(self, a2, 576, 1);
}

- (BOOL)isMultiUserEnabled
{
  return self->_multiUserEnabled;
}

- (void)setMultiUserEnabled:(BOOL)a3
{
  self->_multiUserEnabled = a3;
}

- (BOOL)soundCheckEnabled
{
  return self->_soundCheckEnabled;
}

- (void)setSoundCheckEnabled:(BOOL)a3
{
  self->_soundCheckEnabled = a3;
}

- (unint64_t)audioAnalysisClassifierOptions
{
  return self->_audioAnalysisClassifierOptions;
}

- (void)setAudioAnalysisClassifierOptions:(unint64_t)a3
{
  self->_audioAnalysisClassifierOptions = a3;
}

- (BOOL)didOnboardAudioAnalysis
{
  return self->_didOnboardAudioAnalysis;
}

- (void)setDidOnboardAudioAnalysis:(BOOL)a3
{
  self->_didOnboardAudioAnalysis = a3;
}

- (unint64_t)siriPhraseOptions
{
  return self->_siriPhraseOptions;
}

- (void)setSiriPhraseOptions:(unint64_t)a3
{
  self->_siriPhraseOptions = a3;
}

- (BOOL)locationServicesEnabled
{
  return self->_locationServicesEnabled;
}

- (void)setLocationServicesEnabled:(BOOL)a3
{
  self->_locationServicesEnabled = a3;
}

- (BOOL)didOnboardLocationServices
{
  return self->_didOnboardLocationServices;
}

- (void)setDidOnboardLocationServices:(BOOL)a3
{
  self->_didOnboardLocationServices = a3;
}

- (BOOL)hasAnyUserAcknowledgedCameraRecordingOnboarding
{
  return self->_hasAnyUserAcknowledgedCameraRecordingOnboarding;
}

- (void)setHasAnyUserAcknowledgedCameraRecordingOnboarding:(BOOL)a3
{
  self->_hasAnyUserAcknowledgedCameraRecordingOnboarding = a3;
}

- (BOOL)hasOnboardedForAccessCode
{
  return self->_hasOnboardedForAccessCode;
}

- (void)setHasOnboardedForAccessCode:(BOOL)a3
{
  self->_hasOnboardedForAccessCode = a3;
}

- (BOOL)hasOnboardedForWalletKey
{
  return self->_hasOnboardedForWalletKey;
}

- (void)setHasOnboardedForWalletKey:(BOOL)a3
{
  self->_hasOnboardedForWalletKey = a3;
}

- (HMDCameraAnalysisStatePublisher)analysisStatePublisher
{
  return (HMDCameraAnalysisStatePublisher *)objc_getProperty(self, a2, 600, 1);
}

- (HMDUserActionPredictionManager)userActionPredictionManager
{
  return (HMDUserActionPredictionManager *)objc_getProperty(self, a2, 608, 1);
}

- (void)setUserActionPredictionManager:(id)a3
{
  objc_setProperty_atomic(self, a2, a3, 608);
}

- (HMDHomeNaturalLightingCurveWriter)naturalLightingCurveWriter
{
  return (HMDHomeNaturalLightingCurveWriter *)objc_getProperty(self, a2, 616, 1);
}

- (HMDHomeWalletKeyManager)walletKeyManager
{
  return (HMDHomeWalletKeyManager *)objc_getProperty(self, a2, 624, 1);
}

- (HMDHomeNFCReaderKeyManager)nfcReaderKeyManager
{
  return (HMDHomeNFCReaderKeyManager *)objc_getProperty(self, a2, 632, 1);
}

- (HMDAccessCodeManager)accessCodeManager
{
  return (HMDAccessCodeManager *)objc_getProperty(self, a2, 640, 1);
}

- (void)setAccessCodeManager:(id)a3
{
  objc_setProperty_atomic(self, a2, a3, 640);
}

- (NSMutableDictionary)labelsByAccessCode
{
  return (NSMutableDictionary *)objc_getProperty(self, a2, 648, 1);
}

- (void)setLabelsByAccessCode:(id)a3
{
  objc_setProperty_atomic_copy(self, a2, a3, 648);
}

- (NSMutableDictionary)labelIdentifiersByAccessCode
{
  return (NSMutableDictionary *)objc_getProperty(self, a2, 656, 1);
}

- (void)setLabelIdentifiersByAccessCode:(id)a3
{
  objc_setProperty_atomic_copy(self, a2, a3, 656);
}

- (NSMutableDictionary)removedUserInfoByAccessCode
{
  return (NSMutableDictionary *)objc_getProperty(self, a2, 664, 1);
}

- (void)setRemovedUserInfoByAccessCode:(id)a3
{
  objc_setProperty_atomic_copy(self, a2, a3, 664);
}

- (HMDHomeLockNotificationManager)lockNotificationManager
{
  return (HMDHomeLockNotificationManager *)objc_getProperty(self, a2, 672, 1);
}

- (HMDResidentSyncManager)residentSyncManager
{
  return self->_residentSyncManager;
}

- (void)setResidentSyncManager:(id)a3
{
  objc_storeStrong((id *)&self->_residentSyncManager, a3);
}

- (HMFFuture)residentSyncClientDidSyncFuture
{
  return self->_residentSyncClientDidSyncFuture;
}

- (HMDAccessoryReachabilityChangedLogEventManager)reachabilityChangedLogEventManager
{
  return (HMDAccessoryReachabilityChangedLogEventManager *)objc_getProperty(self, a2, 696, 1);
}

- (HMDAccessoryBulletinNotificationManager)accessoryBulletinNotificationManager
{
  return (HMDAccessoryBulletinNotificationManager *)objc_getProperty(self, a2, 704, 1);
}

- (void)setAccessoryBulletinNotificationManager:(id)a3
{
  objc_setProperty_atomic(self, a2, a3, 704);
}

- (HMDCameraBulletinNotificationManager)cameraBulletinNotificationManager
{
  return (HMDCameraBulletinNotificationManager *)objc_getProperty(self, a2, 712, 1);
}

- (void)setCameraBulletinNotificationManager:(id)a3
{
  objc_setProperty_atomic(self, a2, a3, 712);
}

- (HMDBulletinUserAttributionManager)bulletinUserAttributionManager
{
  return (HMDBulletinUserAttributionManager *)objc_getProperty(self, a2, 720, 1);
}

- (void)setBulletinUserAttributionManager:(id)a3
{
  objc_setProperty_atomic(self, a2, a3, 720);
}

- (HMMLogEventSubmitting)logEventSubmitter
{
  return self->_logEventSubmitter;
}

- (HMDLogEventDailyScheduler)dailyScheduler
{
  return self->_dailyScheduler;
}

- (NSData)acwgGroupResolvingKey
{
  return (NSData *)objc_getProperty(self, a2, 744, 1);
}

- (void)setAcwgGroupResolvingKey:(id)a3
{
  objc_setProperty_atomic(self, a2, a3, 744);
}

- (HMDUserActivityStateDetectorManager)userActivityStateDetectorManager
{
  return self->_userActivityStateDetectorManager;
}

- (void)setUserActivityStateDetectorManager:(id)a3
{
  objc_storeStrong((id *)&self->_userActivityStateDetectorManager, a3);
}

- (NSTimeZone)timeZone
{
  return self->_timeZone;
}

- (void)setTimeZone:(id)a3
{
  objc_setProperty_nonatomic_copy(self, a2, a3, 760);
}

- (id)currentUserFactory
{
  return objc_getProperty(self, a2, 768, 1);
}

- (HMDXPCMessageTransportFactory)xpcMessageTransportFactory
{
  return (HMDXPCMessageTransportFactory *)objc_getProperty(self, a2, 776, 1);
}

- (void)setRemoveAccessoryInProgressForHMDAccessories:(id)a3
{
  objc_storeStrong((id *)&self->_removeAccessoryInProgressForHMDAccessories, a3);
}

- (unint64_t)homeHubState
{
  return self->_homeHubState;
}

- (void)setHomeHubState:(unint64_t)a3
{
  self->_homeHubState = a3;
}

- (HMDHomeLocalDeviceCapabilitiesDataSource)localCapabilitiesDataSource
{
  return self->_localCapabilitiesDataSource;
}

- (NSObject)WiFiAssertion
{
  return self->_WiFiAssertion;
}

- (void)setWiFiAssertion:(id)a3
{
  objc_storeStrong((id *)&self->_WiFiAssertion, a3);
}

- (void)setAddPendingAccessorySetupCodeHandlers:(id)a3
{
  objc_storeStrong((id *)&self->_addPendingAccessorySetupCodeHandlers, a3);
}

- (NSMutableDictionary)addPendingAccessorySetupCodes
{
  return self->_addPendingAccessorySetupCodes;
}

- (void)setAddPendingAccessorySetupCodes:(id)a3
{
  objc_storeStrong((id *)&self->_addPendingAccessorySetupCodes, a3);
}

- (NSMutableDictionary)addPendingAccessoryOnboardingSetupPayloadStrings
{
  return self->_addPendingAccessoryOnboardingSetupPayloadStrings;
}

- (void)setAddPendingAccessories:(id)a3
{
  objc_storeStrong((id *)&self->_addPendingAccessories, a3);
}

- (HMDHomeReprovisionHandler)homeReprovisionHandler
{
  return self->_homeReprovisionHandler;
}

- (void)setHomeReprovisionHandler:(id)a3
{
  objc_storeStrong((id *)&self->_homeReprovisionHandler, a3);
}

- (unint64_t)stateHandle
{
  return self->_stateHandle;
}

- (void)setStateHandle:(unint64_t)a3
{
  self->_stateHandle = a3;
}

- (NSHashTable)connectionsDiscoveringSymptomsForNearbyDevices
{
  return self->_connectionsDiscoveringSymptomsForNearbyDevices;
}

- (HMDActionSetStateObserver)actionSetStateObserver
{
  return (HMDActionSetStateObserver *)objc_getProperty(self, a2, 872, 1);
}

- (BOOL)shouldEncodeHasOnboardedForWalletKey
{
  return self->_shouldEncodeHasOnboardedForWalletKey;
}

- (BOOL)shouldEncodeNFCReaderKey
{
  return self->_shouldEncodeNFCReaderKey;
}

- (HMDRemoteEventRouterServer)remoteEventRouterServer
{
  return self->_remoteEventRouterServer;
}

- (void)setRemoteEventRouterServer:(id)a3
{
  objc_storeStrong((id *)&self->_remoteEventRouterServer, a3);
}

- (int64_t)previousReachableAccessoriesCount
{
  return self->_previousReachableAccessoriesCount;
}

- (void)setPreviousReachableAccessoriesCount:(int64_t)a3
{
  self->_previousReachableAccessoriesCount = a3;
}

- (int64_t)previousReachableAppleMediaAccessoriesCount
{
  return self->_previousReachableAppleMediaAccessoriesCount;
}

- (void)setPreviousReachableAppleMediaAccessoriesCount:(int64_t)a3
{
  self->_previousReachableAppleMediaAccessoriesCount = a3;
}

- (int64_t)previousReachableAccessoriesCountExcludingMatter
{
  return self->_previousReachableAccessoriesCountExcludingMatter;
}

- (void)setPreviousReachableAccessoriesCountExcludingMatter:(int64_t)a3
{
  self->_previousReachableAccessoriesCountExcludingMatter = a3;
}

- (HMDHomePersonDataManager)personDataManager
{
  return (HMDHomePersonDataManager *)objc_getProperty(self, a2, 912, 1);
}

- (HMDHomeNaturalLightingContextUpdater)naturalLightingContextUpdater
{
  return (HMDHomeNaturalLightingContextUpdater *)objc_getProperty(self, a2, 920, 1);
}

- (void)setNaturalLightingContextUpdater:(id)a3
{
  objc_setProperty_atomic(self, a2, a3, 920);
}

- (HMDHAPAccessoryConnectionCoordinator)accessoryConnectionCoordinator
{
  return self->_accessoryConnectionCoordinator;
}

- (void)setAccessoryConnectionCoordinator:(id)a3
{
  objc_storeStrong((id *)&self->_accessoryConnectionCoordinator, a3);
}

- (HMDHAPAccessoryReaderWriter)accessoryReaderWriter
{
  return self->_accessoryReaderWriter;
}

- (void)setAccessoryReaderWriter:(id)a3
{
  objc_storeStrong((id *)&self->_accessoryReaderWriter, a3);
}

- (BOOL)residentSyncClientDidSync
{
  return self->_residentSyncClientDidSync;
}

- (void)setResidentSyncClientDidSync:(BOOL)a3
{
  self->_residentSyncClientDidSync = a3;
}

- (HMFPromise)residentSyncClientDidSyncPromise
{
  return self->_residentSyncClientDidSyncPromise;
}

- (BOOL)isNetworkAvailable
{
  return self->_isNetworkAvailable;
}

- (void)setIsNetworkAvailable:(BOOL)a3
{
  self->_isNetworkAvailable = a3;
}

- (HomeIntelligenceActivityLogger)homeIntelligenceActivityLogger
{
  return (HomeIntelligenceActivityLogger *)objc_getProperty(self, a2, 952, 1);
}

- (HMDHomeMetricsDispatcher)metricsDispatcher
{
  return (HMDHomeMetricsDispatcher *)objc_getProperty(self, a2, 960, 1);
}

- (HMDHAPMetadata)hapMetadata
{
  return (HMDHAPMetadata *)objc_getProperty(self, a2, 968, 1);
}

- (HMDDeviceLockStateDataSource)deviceLockStateDataSource
{
  return (HMDDeviceLockStateDataSource *)objc_getProperty(self, a2, 976, 1);
}

- (HMDAccessoryInfoFetchController)accessoryInfoFetchController
{
  return self->_accessoryInfoFetchController;
}

- (HMEDelegatingEventRouter)serverDelegatingEventRouter
{
  return (HMEDelegatingEventRouter *)objc_getProperty(self, a2, 992, 1);
}

- (HMDPrimaryResidentCapabilitiesAggregator)capabilitiesAggregator
{
  return self->_capabilitiesAggregator;
}

- (void)setCapabilitiesAggregator:(id)a3
{
  objc_storeStrong((id *)&self->_capabilitiesAggregator, a3);
}

- (HMDHomePrimaryResidentMessagingHandler)primaryResidentMessagingHandler
{
  return self->_primaryResidentMessagingHandler;
}

- (HAPKeyStore)keychainStore
{
  return (HAPKeyStore *)objc_getProperty(self, a2, 1016, 1);
}

- (HMDXPCMessageReportingSessionManager)reportingSessionManager
{
  return (HMDXPCMessageReportingSessionManager *)objc_getProperty(self, a2, 1024, 1);
}

- (HMDModernMessagingHandler)modernMessagingHandler
{
  return self->_modernMessagingHandler;
}

- (id)matterCapabilitiesFactory
{
  return self->_matterCapabilitiesFactory;
}

- (BOOL)overrideSentinelZoneForConvergencePeriod
{
  return self->_overrideSentinelZoneForConvergencePeriod;
}

- (void)setOverrideSentinelZoneForConvergencePeriod:(BOOL)a3
{
  self->_overrideSentinelZoneForConvergencePeriod = a3;
}

- (HMDHomeKitVersion)currentHomeKitVersion
{
  return self->_currentHomeKitVersion;
}

- (void)setCurrentHomeKitVersion:(id)a3
{
  objc_storeStrong((id *)&self->_currentHomeKitVersion, a3);
}

- (HMDHomeMediaStateSubscriber)mediaStateSubscriber
{
  return self->_mediaStateSubscriber;
}

- (void)setMediaStateSubscriber:(id)a3
{
  objc_storeStrong((id *)&self->_mediaStateSubscriber, a3);
}

- (HMDSelfRemovalWatchdog)selfRemovalWatchdog
{
  return self->_selfRemovalWatchdog;
}

- (void)setSelfRemovalWatchdog:(id)a3
{
  objc_storeStrong((id *)&self->_selfRemovalWatchdog, a3);
}

- (NSMutableDictionary)pendingCharacteristicThresholdPayload
{
  return self->_pendingCharacteristicThresholdPayload;
}

- (HMDHomeRemoteEventRouterClientController)remoteEventRouterClientController
{
  return (HMDHomeRemoteEventRouterClientController *)objc_getProperty(self, a2, 1080, 1);
}

- (void)setRemoteEventRouterClientController:(id)a3
{
  objc_setProperty_atomic(self, a2, a3, 1080);
}

- (NSMutableArray)accessoryRemoteReachabilityEnabledClients
{
  return self->_accessoryRemoteReachabilityEnabledClients;
}

- (NSMutableArray)matterFabricEnabledClients
{
  return self->_matterFabricEnabledClients;
}

- (id)netManagerFactory
{
  return objc_getProperty(self, a2, 1104, 1);
}

- (void)setNetManagerFactory:(id)a3
{
  objc_setProperty_atomic_copy(self, a2, a3, 1104);
}

- (id)wifiManagerFactory
{
  return objc_getProperty(self, a2, 1112, 1);
}

- (void)setWifiManagerFactory:(id)a3
{
  objc_setProperty_atomic_copy(self, a2, a3, 1112);
}

- (HMDApplicationData)appData
{
  return (HMDApplicationData *)objc_getProperty(self, a2, 1120, 1);
}

- (void)setAppData:(id)a3
{
  objc_setProperty_atomic(self, a2, a3, 1120);
}

- (HMDUnifiedLanguageValueListSettingDataProvider)unifiedLanguageValueListSettingDataProvider
{
  return (HMDUnifiedLanguageValueListSettingDataProvider *)objc_getProperty(self, a2, 1128, 1);
}

- (void)setUnifiedLanguageValueListSettingDataProvider:(id)a3
{
  objc_setProperty_atomic(self, a2, a3, 1128);
}

- (HMDSiriEndpointProfilesMessenger)siriEndpointProfilesMessenger
{
  return (HMDSiriEndpointProfilesMessenger *)objc_getProperty(self, a2, 1136, 1);
}

- (void)setSiriEndpointProfilesMessenger:(id)a3
{
  objc_setProperty_atomic(self, a2, a3, 1136);
}

- (HMDMultiuserSettingsMessenger)multiuserSettingsMessenger
{
  return (HMDMultiuserSettingsMessenger *)objc_getProperty(self, a2, 1144, 1);
}

- (void)setMultiuserSettingsMessenger:(id)a3
{
  objc_setProperty_atomic(self, a2, a3, 1144);
}

- (HMDAccessorySettingsMessenger)accessorySettingsMessenger
{
  return (HMDAccessorySettingsMessenger *)objc_getProperty(self, a2, 1152, 1);
}

- (void)setAccessorySettingsMessenger:(id)a3
{
  objc_setProperty_atomic(self, a2, a3, 1152);
}

- (HMDHomeObjectChangeHandler)homeObjectChangeHandler
{
  return self->_homeObjectChangeHandler;
}

- (OS_dispatch_queue)workQueue
{
  return self->_workQueue;
}

- (void)setWorkQueue:(id)a3
{
  objc_storeStrong((id *)&self->_workQueue, a3);
}

- (HMFMessageDispatcher)msgDispatcher
{
  return self->_msgDispatcher;
}

- (void)setMsgDispatcher:(id)a3
{
  objc_storeStrong((id *)&self->_msgDispatcher, a3);
}

- (HMDAccessoryBrowserProtocol)accessoryBrowser
{
  return self->_accessoryBrowser;
}

- (void)setAccessoryBrowser:(id)a3
{
  objc_storeStrong((id *)&self->_accessoryBrowser, a3);
}

- (HMDPrimaryResidentMessageRouter)primaryResidentMessageRouter
{
  return (HMDPrimaryResidentMessageRouter *)objc_getProperty(self, a2, 1192, 1);
}

- (void)setPrimaryResidentMessageRouter:(id)a3
{
  objc_setProperty_atomic(self, a2, a3, 1192);
}

- (HMDAppleMediaAccessoryMessageRouter)appleDeviceRouter
{
  return (HMDAppleMediaAccessoryMessageRouter *)objc_getProperty(self, a2, 1200, 1);
}

- (void)setAppleDeviceRouter:(id)a3
{
  objc_setProperty_atomic(self, a2, a3, 1200);
}

- (NSNotificationCenter)notificationCenter
{
  return (NSNotificationCenter *)objc_getProperty(self, a2, 1208, 1);
}

- (HMDDelegatingMessageRouter)accessoryMessageRouterViaPrimary
{
  return (HMDDelegatingMessageRouter *)objc_getProperty(self, a2, 1216, 1);
}

- (void)setAccessoryMessageRouterViaPrimary:(id)a3
{
  objc_setProperty_atomic(self, a2, a3, 1216);
}

- (NSMutableArray)rooms
{
  return self->_rooms;
}

- (void)setRooms:(id)a3
{
  objc_storeStrong((id *)&self->_rooms, a3);
}

- (NSMutableArray)zones
{
  return self->_zones;
}

- (void)setZones:(id)a3
{
  objc_storeStrong((id *)&self->_zones, a3);
}

- (NSMutableArray)discoveredAccessories
{
  return self->_discoveredAccessories;
}

- (void)setDiscoveredAccessories:(id)a3
{
  objc_storeStrong((id *)&self->_discoveredAccessories, a3);
}

- (NSMutableArray)services
{
  return self->_services;
}

- (void)setServices:(id)a3
{
  objc_storeStrong((id *)&self->_services, a3);
}

- (NSMutableArray)serviceGroups
{
  return self->_serviceGroups;
}

- (void)setServiceGroups:(id)a3
{
  objc_storeStrong((id *)&self->_serviceGroups, a3);
}

- (NSMutableArray)actionSets
{
  return self->_actionSets;
}

- (void)setActionSets:(id)a3
{
  objc_storeStrong((id *)&self->_actionSets, a3);
}

- (NSMutableArray)triggerOwnedActionSets
{
  return self->_triggerOwnedActionSets;
}

- (void)setTriggerOwnedActionSets:(id)a3
{
  objc_storeStrong((id *)&self->_triggerOwnedActionSets, a3);
}

- (NSMutableArray)retrievalAccessoryCompletionTuples
{
  return self->_retrievalAccessoryCompletionTuples;
}

- (void)setRetrievalAccessoryCompletionTuples:(id)a3
{
  objc_storeStrong((id *)&self->_retrievalAccessoryCompletionTuples, a3);
}

- (NSMutableArray)usersPendingUserManagementOperations
{
  return self->_usersPendingUserManagementOperations;
}

- (void)setUsersPendingUserManagementOperations:(id)a3
{
  objc_storeStrong((id *)&self->_usersPendingUserManagementOperations, a3);
}

- (NSMutableArray)removedUsers
{
  return self->_removedUsers;
}

- (void)setRemovedUsers:(id)a3
{
  objc_storeStrong((id *)&self->_removedUsers, a3);
}

- (NSMutableArray)unconfiguredResidentDevices
{
  return self->_unconfiguredResidentDevices;
}

- (void)setUnconfiguredResidentDevices:(id)a3
{
  objc_storeStrong((id *)&self->_unconfiguredResidentDevices, a3);
}

- (HMDRoom)roomForEntireHome
{
  return self->_roomForEntireHome;
}

- (void)setRoomForEntireHome:(id)a3
{
  objc_storeStrong((id *)&self->_roomForEntireHome, a3);
}

- (int64_t)configurationVersion
{
  return self->_configurationVersion;
}

- (void)setConfigurationVersion:(int64_t)a3
{
  self->_configurationVersion = a3;
}

- (int64_t)lastSyncedConfigurationVersion
{
  return self->_lastSyncedConfigurationVersion;
}

- (void)setLastSyncedConfigurationVersion:(int64_t)a3
{
  self->_lastSyncedConfigurationVersion = a3;
}

- (int64_t)expectedConfigurationVersion
{
  return self->_expectedConfigurationVersion;
}

- (void)setExpectedConfigurationVersion:(int64_t)a3
{
  self->_expectedConfigurationVersion = a3;
}

- (NSString)ownerName
{
  return self->_ownerName;
}

- (void)setOwnerName:(id)a3
{
  objc_storeStrong((id *)&self->_ownerName, a3);
}

- (NSDate)creationDate
{
  return self->_creationDate;
}

- (void)setCreationDate:(id)a3
{
  objc_storeStrong((id *)&self->_creationDate, a3);
}

- (NSDate)firstHAPAccessoryAddedDate
{
  return self->_firstHAPAccessoryAddedDate;
}

- (void)setFirstHAPAccessoryAddedDate:(id)a3
{
  objc_storeStrong((id *)&self->_firstHAPAccessoryAddedDate, a3);
}

- (HMDNotificationRegistry)notificationRegistry
{
  return self->_notificationRegistry;
}

- (void)setNotificationRegistry:(id)a3
{
  objc_storeStrong((id *)&self->_notificationRegistry, a3);
}

- (void)setRemoteAccessIsEnabled:(BOOL)a3
{
  self->_remoteAccessIsEnabled = a3;
}

- (NSMutableSet)heartbeatPingMessagesQueuedWithServer
{
  return self->_heartbeatPingMessagesQueuedWithServer;
}

- (void)setHeartbeatPingMessagesQueuedWithServer:(id)a3
{
  objc_storeStrong((id *)&self->_heartbeatPingMessagesQueuedWithServer, a3);
}

- (NSMutableSet)pendingResponsesForRemoteAccessSetup
{
  return self->_pendingResponsesForRemoteAccessSetup;
}

- (void)setPendingResponsesForRemoteAccessSetup:(id)a3
{
  objc_storeStrong((id *)&self->_pendingResponsesForRemoteAccessSetup, a3);
}

- (void)setAdminUser:(BOOL)a3
{
  self->_adminUser = a3;
}

- (void)setSharedAdmin:(BOOL)a3
{
  self->_sharedAdmin = a3;
}

- (BOOL)registeredNotificationWithRemoteGateway
{
  return self->_registeredNotificationWithRemoteGateway;
}

- (void)setRegisteredNotificationWithRemoteGateway:(BOOL)a3
{
  self->_registeredNotificationWithRemoteGateway = a3;
}

- (BOOL)allowsRemoteAccess
{
  return self->_allowsRemoteAccess;
}

- (void)setAllowsRemoteAccess:(BOOL)a3
{
  self->_allowsRemoteAccess = a3;
}

- (BOOL)isMigratingAfterResidentChange
{
  return self->_migratingAfterResidentChange;
}

- (void)setMigratingAfterResidentChange:(BOOL)a3
{
  self->_migratingAfterResidentChange = a3;
}

- (NSMutableArray)assistantOperations
{
  return self->_assistantOperations;
}

- (void)setAssistantOperations:(id)a3
{
  objc_storeStrong((id *)&self->_assistantOperations, a3);
}

- (NSMutableDictionary)enableNotificationPayload
{
  return self->_enableNotificationPayload;
}

- (NSMutableDictionary)disableNotificationPayload
{
  return self->_disableNotificationPayload;
}

- (NSMutableArray)actionSetsEnableNotificationPayload
{
  return self->_actionSetsEnableNotificationPayload;
}

- (NSMutableArray)actionSetsDisableNotificationPayload
{
  return self->_actionSetsDisableNotificationPayload;
}

- (NSMutableDictionary)matterAttributesEnableNotificationPayload
{
  return self->_matterAttributesEnableNotificationPayload;
}

- (HMFTimer)modifyNotificationsCoalesceTimer
{
  return self->_modifyNotificationsCoalesceTimer;
}

- (void)setModifyNotificationsCoalesceTimer:(id)a3
{
  objc_storeStrong((id *)&self->_modifyNotificationsCoalesceTimer, a3);
}

- (NSHashTable)unpairedSecondaryHAPAccessories
{
  return self->_unpairedSecondaryHAPAccessories;
}

- (HMDResidentDeviceManager)residentDeviceManager
{
  return self->_residentDeviceManager;
}

- (HMDSharedHomeUpdateHandler)sharedHomeUpdateHandler
{
  return self->_sharedHomeUpdateHandler;
}

- (void)setCurrentRemoteReachabilityRegistration:(BOOL)a3
{
  self->_currentRemoteReachabilityRegistration = a3;
}

- (HMDManagedStagedValue)stagedRemoteReachabilityRegistration
{
  return self->_stagedRemoteReachabilityRegistration;
}

- (BOOL)isUpdatedToHH2
{
  return self->_isUpdatedToHH2;
}

- (void)setIsUpdatedToHH2:(BOOL)a3
{
  self->_isUpdatedToHH2 = a3;
}

- (NSMutableArray)reachabilityRegisteredDevices
{
  return self->_reachabilityRegisteredDevices;
}

- (void)setReachabilityRegisteredDevices:(id)a3
{
  objc_storeStrong((id *)&self->_reachabilityRegisteredDevices, a3);
}

- (HMFTimer)reachabilityNotificationTimer
{
  return self->_reachabilityNotificationTimer;
}

- (void)setReachabilityNotificationTimer:(id)a3
{
  objc_storeStrong((id *)&self->_reachabilityNotificationTimer, a3);
}

- (NSMutableArray)remoteReachabilityNotificationPendingAccessories
{
  return self->_remoteReachabilityNotificationPendingAccessories;
}

- (void)setRemoteReachabilityNotificationPendingAccessories:(id)a3
{
  objc_storeStrong((id *)&self->_remoteReachabilityNotificationPendingAccessories, a3);
}

- (HMFTimer)disableNotificationTimer
{
  return self->_disableNotificationTimer;
}

- (void)setDisableNotificationTimer:(id)a3
{
  objc_storeStrong((id *)&self->_disableNotificationTimer, a3);
}

- (NSMutableDictionary)pendingResponses
{
  return self->_pendingResponses;
}

- (void)setPendingResponses:(id)a3
{
  objc_storeStrong((id *)&self->_pendingResponses, a3);
}

- (HMFTimer)pendingResponsesTimer
{
  return self->_pendingResponsesTimer;
}

- (void)setPendingResponsesTimer:(id)a3
{
  objc_storeStrong((id *)&self->_pendingResponsesTimer, a3);
}

- (NSMutableArray)ownedTriggers
{
  return self->_ownedTriggers;
}

- (void)setOwnedTriggers:(id)a3
{
  objc_storeStrong((id *)&self->_ownedTriggers, a3);
}

- (NSMapTable)uuidToHAPAccessoryConfigTable
{
  return self->_uuidToHAPAccessoryConfigTable;
}

- (void)setUuidToHAPAccessoryConfigTable:(id)a3
{
  objc_storeStrong((id *)&self->_uuidToHAPAccessoryConfigTable, a3);
}

- (HMDPredicateUtilities)predicateUtility
{
  return self->_predicateUtility;
}

- (HMDHomeKitVersion)sharedHomeSourceVersion
{
  return self->_sharedHomeSourceVersion;
}

- (void)setSharedHomeSourceVersion:(id)a3
{
  objc_storeStrong((id *)&self->_sharedHomeSourceVersion, a3);
}

- (HMDMediaActionRouter)mediaActionRouter
{
  return self->_mediaActionRouter;
}

- (void)setMediaActionRouter:(id)a3
{
  objc_storeStrong((id *)&self->_mediaActionRouter, a3);
}

- (HMDFetchedAccessorySettingsSubscriber)fetchedAccessorySettingsSubscriber
{
  return self->_fetchedAccessorySettingsSubscriber;
}

- (void)setFetchedAccessorySettingsSubscriber:(id)a3
{
  objc_storeStrong((id *)&self->_fetchedAccessorySettingsSubscriber, a3);
}

- (NSUUID)personManagerZoneUUID
{
  return self->_personManagerZoneUUID;
}

- (void)setPersonManagerZoneUUID:(id)a3
{
  objc_setProperty_nonatomic_copy(self, a2, a3, 1576);
}

- (HMDResidentReachabilityNotificationManager)reachabilityNotificationManager
{
  return (HMDResidentReachabilityNotificationManager *)objc_getProperty(self, a2, 1584, 1);
}

- (HMDCOStateManager)coordinationStateManager
{
  return (HMDCOStateManager *)objc_getProperty(self, a2, 1592, 1);
}

- (void)setCoordinationStateManager:(id)a3
{
  objc_setProperty_atomic(self, a2, a3, 1592);
}

- (HMDHomeRemoteEventAccessController)homeRemoteEventAccessController
{
  return (HMDHomeRemoteEventAccessController *)objc_getProperty(self, a2, 1600, 1);
}

- (unint64_t)nonIPadResidentDeviceCountForHH2Migration
{
  return self->_nonIPadResidentDeviceCountForHH2Migration;
}

- (HMDAppleAccountSettings)accountSettings
{
  return (HMDAppleAccountSettings *)objc_getProperty(self, a2, 1616, 1);
}

- (HMDCHIPHomeStorage)chipStorage
{
  return (HMDCHIPHomeStorage *)objc_getProperty(self, a2, 1624, 1);
}

- (void)setChipStorage:(id)a3
{
  objc_setProperty_atomic_copy(self, a2, a3, 1624);
}

- (HMDCHIPControllerPrivateStorage)controllerPrivateStorage
{
  return (HMDCHIPControllerPrivateStorage *)objc_getProperty(self, a2, 1632, 1);
}

- (void)setControllerPrivateStorage:(id)a3
{
  objc_setProperty_atomic_copy(self, a2, a3, 1632);
}

- (HMMTRFabric)fabric
{
  return (HMMTRFabric *)objc_getProperty(self, a2, 1640, 1);
}

- (void)setFabric:(id)a3
{
  objc_setProperty_atomic_copy(self, a2, a3, 1640);
}

- (NSData)threadOperationalDataset
{
  return self->_threadOperationalDataset;
}

- (void)setThreadOperationalDataset:(id)a3
{
  objc_storeStrong((id *)&self->_threadOperationalDataset, a3);
}

- (NSNumber)currentOperateCATID
{
  return self->_currentOperateCATID;
}

- (void)setCurrentOperateCATID:(id)a3
{
  objc_storeStrong((id *)&self->_currentOperateCATID, a3);
}

- (NSNumber)currentAdministerCATID
{
  return self->_currentAdministerCATID;
}

- (void)setCurrentAdministerCATID:(id)a3
{
  objc_storeStrong((id *)&self->_currentAdministerCATID, a3);
}

- (BOOL)currentMatterClientRegistration
{
  return self->_currentMatterClientRegistration;
}

- (void)setCurrentMatterClientRegistration:(BOOL)a3
{
  self->_currentMatterClientRegistration = a3;
}

- (NSMutableDictionary)chipLocalSubscribers
{
  return self->_chipLocalSubscribers;
}

- (void)setChipLocalSubscribers:(id)a3
{
  objc_storeStrong((id *)&self->_chipLocalSubscribers, a3);
}

- (BOOL)bulletinNotificationsSupported
{
  return self->_bulletinNotificationsSupported;
}

- (void)setBulletinNotificationsSupported:(BOOL)a3
{
  self->_bulletinNotificationsSupported = a3;
}

- (HMDMediaGroupsAggregateConsumer)mediaGroupsAggregateConsumer
{
  return (HMDMediaGroupsAggregateConsumer *)objc_getProperty(self, a2, 1680, 1);
}

- (HMDMediaGroupSetupMetricDispatcher)mediaSystemSetupMetricDispatcher
{
  return self->_mediaSystemSetupMetricDispatcher;
}

- (HMDMediaGroupSetupMetricDispatcher)homeTheaterSetupMetricDispatcher
{
  return self->_homeTheaterSetupMetricDispatcher;
}

- (BOOL)threadNetworkShouldRestartOnNetworkChange
{
  return self->_threadNetworkShouldRestartOnNetworkChange;
}

- (void)setThreadNetworkShouldRestartOnNetworkChange:(BOOL)a3
{
  self->_threadNetworkShouldRestartOnNetworkChange = a3;
}

- (HMDSiriSecureAccessoryAccessController)siriSecureAccessoryAccessController
{
  return (HMDSiriSecureAccessoryAccessController *)objc_getProperty(self, a2, 1704, 1);
}

- (HMDCarPlayDataSource)carPlayDataSource
{
  return (HMDCarPlayDataSource *)objc_getProperty(self, a2, 1712, 1);
}

- (HMDActionSetStateSubscriptionManager)actionSetStateSubscriptionManager
{
  return (HMDActionSetStateSubscriptionManager *)objc_getProperty(self, a2, 1720, 1);
}

- (HMDHomeAudioAnalysisStereoPairController)audioAnalysisStereoPairController
{
  return (HMDHomeAudioAnalysisStereoPairController *)objc_getProperty(self, a2, 1728, 1);
}

- (void)setAudioAnalysisStereoPairController:(id)a3
{
  objc_setProperty_atomic(self, a2, a3, 1728);
}

- (HMDAudioAnalysisBulletinNotificationManager)audioAnalysisBulletinNotificationManager
{
  return (HMDAudioAnalysisBulletinNotificationManager *)objc_getProperty(self, a2, 1736, 1);
}

- (void)setAudioAnalysisBulletinNotificationManager:(id)a3
{
  objc_setProperty_atomic(self, a2, a3, 1736);
}

- (void)setIsSmokeAlarmEnabled:(BOOL)a3
{
  self->_isSmokeAlarmEnabled = a3;
}

- (void)setIsSiriPhraseOptionsHeySiriEnabled:(BOOL)a3
{
  self->_isSiriPhraseOptionsHeySiriEnabled = a3;
}

- (void)setIsSiriPhraseOptionsJustSiriEnabled:(BOOL)a3
{
  self->_isSiriPhraseOptionsJustSiriEnabled = a3;
}

- (HMDDeviceHomeKitSetupSession)deviceHomeKitSetupSession
{
  return self->_deviceHomeKitSetupSession;
}

- (void)setDeviceHomeKitSetupSession:(id)a3
{
  objc_storeStrong((id *)&self->_deviceHomeKitSetupSession, a3);
}

- (BOOL)didOnboardEventLog
{
  return self->_didOnboardEventLog;
}

- (void)setDidOnboardEventLog:(BOOL)a3
{
  self->_didOnboardEventLog = a3;
}

- (BOOL)isEventLogHomeSettingEnabled
{
  return self->_eventLogHomeSettingEnabled;
}

- (void)setEventLogHomeSettingEnabled:(BOOL)a3
{
  self->_eventLogHomeSettingEnabled = a3;
}

- (unint64_t)eventLogDuration
{
  return self->_eventLogDuration;
}

- (void)setEventLogDuration:(unint64_t)a3
{
  self->_eventLogDuration = a3;
}

- (HMDHomeHindsightCloudShareManager)hindsightCloudShareManager
{
  return (HMDHomeHindsightCloudShareManager *)objc_getProperty(self, a2, 1760, 1);
}

- (void)setHindsightCloudShareManager:(id)a3
{
  objc_setProperty_atomic(self, a2, a3, 1760);
}

- (int64_t)threadNetworkConnectionState
{
  return self->_threadNetworkConnectionState;
}

- (void)setThreadNetworkConnectionState:(int64_t)a3
{
  self->_threadNetworkConnectionState = a3;
}

- (int64_t)threadNetworkNodeType
{
  return self->_threadNetworkNodeType;
}

- (void)setThreadNetworkNodeType:(int64_t)a3
{
  self->_threadNetworkNodeType = a3;
}

- (HMDFeaturesDataSource)featureDataSource
{
  return (HMDFeaturesDataSource *)objc_getProperty(self, a2, 1784, 1);
}

- (void)setFeatureDataSource:(id)a3
{
  objc_setProperty_atomic(self, a2, a3, 1784);
}

- (NSMutableDictionary)notificationHandlerMap
{
  return self->_notificationHandlerMap;
}

- (void)setNotificationHandlerMap:(id)a3
{
  objc_storeStrong((id *)&self->_notificationHandlerMap, a3);
}

- (BOOL)dismissedWalletKeyUWBUnlockOnboarding
{
  return self->_dismissedWalletKeyUWBUnlockOnboarding;
}

- (void)setDismissedWalletKeyUWBUnlockOnboarding:(BOOL)a3
{
  self->_dismissedWalletKeyUWBUnlockOnboarding = a3;
}

- (void).cxx_destruct
{
  objc_storeStrong((id *)&self->_notificationHandlerMap, 0);
  objc_storeStrong((id *)&self->_featureDataSource, 0);
  objc_storeStrong((id *)&self->_hindsightCloudShareManager, 0);
  objc_storeStrong((id *)&self->_deviceHomeKitSetupSession, 0);
  objc_storeStrong((id *)&self->_audioAnalysisBulletinNotificationManager, 0);
  objc_storeStrong((id *)&self->_audioAnalysisStereoPairController, 0);
  objc_storeStrong((id *)&self->_actionSetStateSubscriptionManager, 0);
  objc_storeStrong((id *)&self->_carPlayDataSource, 0);
  objc_storeStrong((id *)&self->_siriSecureAccessoryAccessController, 0);
  objc_storeStrong((id *)&self->_homeTheaterSetupMetricDispatcher, 0);
  objc_storeStrong((id *)&self->_mediaSystemSetupMetricDispatcher, 0);
  objc_storeStrong((id *)&self->_mediaGroupsAggregateConsumer, 0);
  objc_storeStrong((id *)&self->_chipLocalSubscribers, 0);
  objc_storeStrong((id *)&self->_currentAdministerCATID, 0);
  objc_storeStrong((id *)&self->_currentOperateCATID, 0);
  objc_storeStrong((id *)&self->_threadOperationalDataset, 0);
  objc_storeStrong((id *)&self->_fabric, 0);
  objc_storeStrong((id *)&self->_controllerPrivateStorage, 0);
  objc_storeStrong((id *)&self->_chipStorage, 0);
  objc_storeStrong((id *)&self->_accountSettings, 0);
  objc_storeStrong((id *)&self->_homeRemoteEventAccessController, 0);
  objc_storeStrong((id *)&self->_coordinationStateManager, 0);
  objc_storeStrong((id *)&self->_reachabilityNotificationManager, 0);
  objc_storeStrong((id *)&self->_personManagerZoneUUID, 0);
  objc_storeStrong((id *)&self->_fetchedAccessorySettingsSubscriber, 0);
  objc_storeStrong((id *)&self->_mediaActionRouter, 0);
  objc_storeStrong((id *)&self->_sharedHomeSourceVersion, 0);
  objc_storeStrong((id *)&self->_predicateUtility, 0);
  objc_storeStrong((id *)&self->_uuidToHAPAccessoryConfigTable, 0);
  objc_storeStrong((id *)&self->_ownedTriggers, 0);
  objc_storeStrong((id *)&self->_pendingResponsesTimer, 0);
  objc_storeStrong((id *)&self->_pendingResponses, 0);
  objc_storeStrong((id *)&self->_disableNotificationTimer, 0);
  objc_storeStrong((id *)&self->_remoteReachabilityNotificationPendingAccessories, 0);
  objc_storeStrong((id *)&self->_reachabilityNotificationTimer, 0);
  objc_storeStrong((id *)&self->_reachabilityRegisteredDevices, 0);
  objc_storeStrong((id *)&self->_stagedRemoteReachabilityRegistration, 0);
  objc_storeStrong((id *)&self->_sharedHomeUpdateHandler, 0);
  objc_storeStrong((id *)&self->_residentDeviceManager, 0);
  objc_storeStrong((id *)&self->_unpairedSecondaryHAPAccessories, 0);
  objc_storeStrong((id *)&self->_modifyNotificationsCoalesceTimer, 0);
  objc_storeStrong((id *)&self->_matterAttributesEnableNotificationPayload, 0);
  objc_storeStrong((id *)&self->_actionSetsDisableNotificationPayload, 0);
  objc_storeStrong((id *)&self->_actionSetsEnableNotificationPayload, 0);
  objc_storeStrong((id *)&self->_disableNotificationPayload, 0);
  objc_storeStrong((id *)&self->_enableNotificationPayload, 0);
  objc_storeStrong((id *)&self->_assistantOperations, 0);
  objc_storeStrong((id *)&self->_pendingResponsesForRemoteAccessSetup, 0);
  objc_storeStrong((id *)&self->_heartbeatPingMessagesQueuedWithServer, 0);
  objc_storeStrong((id *)&self->_notificationRegistry, 0);
  objc_storeStrong((id *)&self->_firstHAPAccessoryAddedDate, 0);
  objc_storeStrong((id *)&self->_creationDate, 0);
  objc_storeStrong((id *)&self->_ownerName, 0);
  objc_storeStrong((id *)&self->_roomForEntireHome, 0);
  objc_storeStrong((id *)&self->_unconfiguredResidentDevices, 0);
  objc_storeStrong((id *)&self->_removedUsers, 0);
  objc_storeStrong((id *)&self->_usersPendingUserManagementOperations, 0);
  objc_storeStrong((id *)&self->_retrievalAccessoryCompletionTuples, 0);
  objc_storeStrong((id *)&self->_triggerOwnedActionSets, 0);
  objc_storeStrong((id *)&self->_actionSets, 0);
  objc_storeStrong((id *)&self->_serviceGroups, 0);
  objc_storeStrong((id *)&self->_services, 0);
  objc_storeStrong((id *)&self->_discoveredAccessories, 0);
  objc_storeStrong((id *)&self->_zones, 0);
  objc_storeStrong((id *)&self->_rooms, 0);
  objc_storeStrong((id *)&self->_accessoryMessageRouterViaPrimary, 0);
  objc_storeStrong((id *)&self->_notificationCenter, 0);
  objc_storeStrong((id *)&self->_appleDeviceRouter, 0);
  objc_storeStrong((id *)&self->_primaryResidentMessageRouter, 0);
  objc_storeStrong((id *)&self->_accessoryBrowser, 0);
  objc_storeStrong((id *)&self->_msgDispatcher, 0);
  objc_storeStrong((id *)&self->_workQueue, 0);
  objc_storeStrong((id *)&self->_homeObjectChangeHandler, 0);
  objc_storeStrong((id *)&self->_accessorySettingsMessenger, 0);
  objc_storeStrong((id *)&self->_multiuserSettingsMessenger, 0);
  objc_storeStrong((id *)&self->_siriEndpointProfilesMessenger, 0);
  objc_storeStrong((id *)&self->_unifiedLanguageValueListSettingDataProvider, 0);
  objc_storeStrong((id *)&self->_appData, 0);
  objc_storeStrong(&self->_wifiManagerFactory, 0);
  objc_storeStrong(&self->_netManagerFactory, 0);
  objc_storeStrong((id *)&self->_matterFabricEnabledClients, 0);
  objc_storeStrong((id *)&self->_accessoryRemoteReachabilityEnabledClients, 0);
  objc_storeStrong((id *)&self->_remoteEventRouterClientController, 0);
  objc_storeStrong((id *)&self->_pendingCharacteristicThresholdPayload, 0);
  objc_storeStrong((id *)&self->_selfRemovalWatchdog, 0);
  objc_storeStrong((id *)&self->_mediaStateSubscriber, 0);
  objc_storeStrong((id *)&self->_currentHomeKitVersion, 0);
  objc_storeStrong(&self->_matterCapabilitiesFactory, 0);
  objc_storeStrong((id *)&self->_modernMessagingHandler, 0);
  objc_storeStrong((id *)&self->_reportingSessionManager, 0);
  objc_storeStrong((id *)&self->_keychainStore, 0);
  objc_storeStrong((id *)&self->_primaryResidentMessagingHandler, 0);
  objc_storeStrong((id *)&self->_capabilitiesAggregator, 0);
  objc_storeStrong((id *)&self->_serverDelegatingEventRouter, 0);
  objc_storeStrong((id *)&self->_accessoryInfoFetchController, 0);
  objc_storeStrong((id *)&self->_deviceLockStateDataSource, 0);
  objc_storeStrong((id *)&self->_hapMetadata, 0);
  objc_storeStrong((id *)&self->_metricsDispatcher, 0);
  objc_storeStrong((id *)&self->_homeIntelligenceActivityLogger, 0);
  objc_storeStrong((id *)&self->_residentSyncClientDidSyncPromise, 0);
  objc_storeStrong((id *)&self->_accessoryReaderWriter, 0);
  objc_storeStrong((id *)&self->_accessoryConnectionCoordinator, 0);
  objc_storeStrong((id *)&self->_naturalLightingContextUpdater, 0);
  objc_storeStrong((id *)&self->_personDataManager, 0);
  objc_storeStrong((id *)&self->_remoteEventRouterServer, 0);
  objc_storeStrong((id *)&self->_actionSetStateObserver, 0);
  objc_storeStrong((id *)&self->_connectionsDiscoveringSymptomsForNearbyDevices, 0);
  objc_storeStrong((id *)&self->_homeReprovisionHandler, 0);
  objc_storeStrong((id *)&self->_addPendingAccessories, 0);
  objc_storeStrong((id *)&self->_addPendingAccessoryOnboardingSetupPayloadStrings, 0);
  objc_storeStrong((id *)&self->_addPendingAccessorySetupCodes, 0);
  objc_storeStrong((id *)&self->_addPendingAccessorySetupCodeHandlers, 0);
  objc_storeStrong((id *)&self->_WiFiAssertion, 0);
  objc_storeStrong((id *)&self->_localCapabilitiesDataSource, 0);
  objc_storeStrong((id *)&self->_removeAccessoryInProgressForHMDAccessories, 0);
  objc_storeStrong((id *)&self->_xpcMessageTransportFactory, 0);
  objc_storeStrong(&self->_currentUserFactory, 0);
  objc_storeStrong((id *)&self->_timeZone, 0);
  objc_storeStrong((id *)&self->_userActivityStateDetectorManager, 0);
  objc_storeStrong((id *)&self->_acwgGroupResolvingKey, 0);
  objc_storeStrong((id *)&self->_dailyScheduler, 0);
  objc_storeStrong((id *)&self->_logEventSubmitter, 0);
  objc_storeStrong((id *)&self->_bulletinUserAttributionManager, 0);
  objc_storeStrong((id *)&self->_cameraBulletinNotificationManager, 0);
  objc_storeStrong((id *)&self->_accessoryBulletinNotificationManager, 0);
  objc_storeStrong((id *)&self->_reachabilityChangedLogEventManager, 0);
  objc_storeStrong((id *)&self->_residentSyncClientDidSyncFuture, 0);
  objc_storeStrong((id *)&self->_residentSyncManager, 0);
  objc_storeStrong((id *)&self->_lockNotificationManager, 0);
  objc_storeStrong((id *)&self->_removedUserInfoByAccessCode, 0);
  objc_storeStrong((id *)&self->_labelIdentifiersByAccessCode, 0);
  objc_storeStrong((id *)&self->_labelsByAccessCode, 0);
  objc_storeStrong((id *)&self->_accessCodeManager, 0);
  objc_storeStrong((id *)&self->_nfcReaderKeyManager, 0);
  objc_storeStrong((id *)&self->_walletKeyManager, 0);
  objc_storeStrong((id *)&self->_naturalLightingCurveWriter, 0);
  objc_storeStrong((id *)&self->_userActionPredictionManager, 0);
  objc_storeStrong((id *)&self->_analysisStatePublisher, 0);
  objc_storeStrong((id *)&self->_primaryResidentChangeMonitor, 0);
  objc_storeStrong((id *)&self->_periodicReader, 0);
  objc_storeStrong((id *)&self->_mediaSystemController, 0);
  objc_storeStrong((id *)&self->_presenceFeeder, 0);
  objc_storeStrong((id *)&self->_presenceMonitor, 0);
  objc_storeStrong((id *)&self->_notificationsUpdatedTime, 0);
  objc_storeStrong((id *)&self->_mediaGroupsUnconfiguredParticipantOnboardingManager, 0);
  objc_storeStrong((id *)&self->_mediaGroupsAggregator, 0);
  objc_storeStrong((id *)&self->_administratorHandler, 0);
  objc_storeStrong((id *)&self->_presenceComputeStatus, 0);
  objc_storeStrong((id *)&self->_presenceAuthStatus, 0);
  objc_storeStrong((id *)&self->_homeLocationHandler, 0);
  objc_storeStrong((id *)&self->_zoneID, 0);
  objc_storeStrong((id *)&self->_spiClientIdentifier, 0);
  objc_storeStrong((id *)&self->_uuid, 0);
  objc_destroyWeak((id *)&self->_homeManager);
  objc_storeStrong((id *)&self->_lookup, 0);
  objc_storeStrong((id *)&self->_naturalLightingContext, 0);
  objc_storeStrong((id *)&self->_personManagerSettings, 0);
  objc_storeStrong((id *)&self->_clientWalletKeyUUID, 0);
  objc_storeStrong((id *)&self->_numberOfCameras, 0);
  objc_storeStrong((id *)&self->_availableBSPsCount, 0);
  objc_storeStrong((id *)&self->_availableBorderRouters, 0);
  objc_storeStrong((id *)&self->_overriddenHomeAccessControl, 0);
  objc_storeStrong((id *)&self->_nfcReaderKey, 0);
  objc_storeStrong((id *)&self->_threadNetworkPeriodicStatusReporter, 0);
  objc_storeStrong((id *)&self->_unfilteredThreadNetworkID, 0);
  objc_storeStrong((id *)&self->_outgoingInvitations, 0);
  objc_storeStrong((id *)&self->_currentTriggers, 0);
  objc_storeStrong((id *)&self->_name, 0);
  objc_storeStrong((id *)&self->_minHomeKitVersionForAccessoryNetworkProtectionChange, 0);
  objc_storeStrong((id *)&self->_minimumNetworkRouterSupportHomeKitVersion, 0);
  objc_storeStrong((id *)&self->_backingStore, 0);
  objc_storeStrong((id *)&self->_primaryNetworkRouterManagingDeviceUUID, 0);
  objc_storeStrong((id *)&self->_newlyConfiguredAccessories, 0);
  objc_storeStrong((id *)&self->_activeNetworkRouterUUID, 0);
  objc_storeStrong((id *)&self->_networkProtectionGroupRegistry, 0);
  objc_storeStrong((id *)&self->_routerClientManager, 0);
  objc_storeStrong((id *)&self->_notificationDeregistrations, 0);
  objc_storeStrong((id *)&self->_notificationRegistrationsForAppleMediaAccessories, 0);
  objc_storeStrong((id *)&self->_notificationRegistrations, 0);
  objc_storeStrong((id *)&self->_residentSelectionVersion, 0);
  objc_storeStrong((id *)&self->_logger, 0);
  objc_storeStrong((id *)&self->_reachabilityUpdatedAccessories, 0);
  objc_storeStrong((id *)&self->_accessoryReachabilityUpdatesTimer, 0);
  objc_storeStrong((id *)&self->_homeLocationTimer, 0);
  objc_storeStrong((id *)&self->_mediaPassword, 0);
  objc_storeStrong((id *)&self->_currentUser, 0);
  objc_storeStrong((id *)&self->_owner, 0);
  objc_storeStrong((id *)&self->_users, 0);
  objc_storeStrong((id *)&self->_mediaSessionStates, 0);
  objc_storeStrong((id *)&self->_mediaSessions, 0);
  objc_storeStrong((id *)&self->_accessories, 0);
}

uint64_t __42__HMDHome__handleFetchTriggerNameRequest___block_invoke(uint64_t a1, void *a2)
{
  void *v2;
  uint64_t v3;

  objc_msgSend(a2, "spiClientIdentifier");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = HMFEqualObjects();

  return v3;
}

uint64_t __52__HMDHome_areCharacteristicRequests_allowedForUser___block_invoke(uint64_t a1, void *a2)
{
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;

  v2 = *(void **)(a1 + 32);
  objc_msgSend(a2, "accessory");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "uuid");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v2, "containsObject:", v4);

  return v5;
}

uint64_t __73__HMDHome__loadRestrictedGuestConfigurationOnLocksAfterInviteAcceptance___block_invoke(_QWORD *a1)
{
  id v1;
  void *v2;
  uint64_t v4;

  +[HMDBackgroundOperationManagerHelper auditAllowedAccessToRestrictedGuest:forAccessories:shouldRemoveScheduledOperations:parentFlow:](HMDBackgroundOperationManagerHelper, "auditAllowedAccessToRestrictedGuest:forAccessories:shouldRemoveScheduledOperations:parentFlow:", a1[4], a1[5], 0, a1[6]);
  v1 = (id)objc_claimAutoreleasedReturnValue();
  if (v1)
  {
    v2 = v1;

    return 3;
  }
  else
  {
    v4 = _HMFPreconditionFailure();
    return __73__HMDHome__loadRestrictedGuestConfigurationOnLocksAfterInviteAcceptance___block_invoke_2(v4);
  }
}

uint64_t __73__HMDHome__loadRestrictedGuestConfigurationOnLocksAfterInviteAcceptance___block_invoke_2(id *a1, void *a2)
{
  id v3;
  uint64_t v4;
  void *v5;
  id v6;
  NSObject *v7;
  NSObject *v8;
  void *v9;
  void *v10;
  void *v11;
  const char *v12;
  NSObject *v13;
  os_log_type_t v14;
  uint32_t v15;
  int v17;
  void *v18;
  __int16 v19;
  void *v20;
  __int16 v21;
  void *v22;
  __int16 v23;
  id v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v3 = a2;
  v4 = objc_msgSend(v3, "count");
  v5 = (void *)MEMORY[0x227676638]();
  v6 = a1[4];
  HMFGetOSLogHandle();
  v7 = objc_claimAutoreleasedReturnValue();
  v8 = v7;
  if (v4)
  {
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(a1[5], "UUID");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(a1[6], "uuid");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      v17 = 138544130;
      v18 = v9;
      v19 = 2112;
      v20 = v10;
      v21 = 2112;
      v22 = v11;
      v23 = 2112;
      v24 = v3;
      v12 = "%{public}@[Flow: %@] Some error occurred when adding pairings, pin codes & Home keys for the restricted gues"
            "t %@ with error dictionary: %@";
      v13 = v8;
      v14 = OS_LOG_TYPE_ERROR;
      v15 = 42;
LABEL_6:
      _os_log_impl(&dword_2218F0000, v13, v14, v12, (uint8_t *)&v17, v15);

    }
  }
  else if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(a1[5], "UUID");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(a1[6], "uuid");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v17 = 138543874;
    v18 = v9;
    v19 = 2112;
    v20 = v10;
    v21 = 2112;
    v22 = v11;
    v12 = "%{public}@[Flow: %@] Successfully added pairings, pin codes & Home keys for the restricted guest %@";
    v13 = v8;
    v14 = OS_LOG_TYPE_INFO;
    v15 = 32;
    goto LABEL_6;
  }

  objc_autoreleasePoolPop(v5);
  return 1;
}

void __89__HMDHome__saveRestrictedGuestSettingsFromOutgoingInvitation_managedObjectContext_error___block_invoke_1999(uint64_t a1, void *a2, _BYTE *a3)
{
  id v5;
  void *v6;
  id v7;
  void *v8;
  void *v9;
  id v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  id v15;
  NSObject *v16;
  void *v17;
  void *v18;
  id v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  id v27;
  NSObject *v28;
  void *v29;
  void *v30;
  void *v31;
  id v32;
  NSObject *v33;
  void *v34;
  void *v35;
  id v36;
  NSObject *v37;
  void *v38;
  char v39;
  uint8_t buf[4];
  void *v41;
  __int16 v42;
  id v43;
  uint64_t v44;

  v44 = *MEMORY[0x24BDAC8D0];
  v5 = a2;
  if (objc_msgSend(v5, "conformsToProtocol:", &unk_2558BCAD0))
    v6 = v5;
  else
    v6 = 0;
  v7 = v6;

  if (v7)
  {
    v39 = 0;
    v8 = *(void **)(a1 + 32);
    objc_msgSend(MEMORY[0x24BDD1880], "UUID");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "materializeOrCreateWeekDayScheduleRulesRelationWithModelID:createdNew:", v9, &v39);
    v10 = (id)objc_claimAutoreleasedReturnValue();

    if (v39)
    {
      objc_msgSend(v7, "startTime");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v10, "setStartTime:", v11);

      objc_msgSend(v7, "endTime");
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v10, "setEndTime:", v12);

      objc_msgSend(v7, "daysOfTheWeek");
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v10, "setDaysOfTheWeek:", v13);

      v14 = (void *)MEMORY[0x227676638]();
      v15 = *(id *)(a1 + 40);
      HMFGetOSLogHandle();
      v16 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v10, "debugDescription");
        v18 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        v41 = v17;
        v42 = 2112;
        v43 = v18;
        _os_log_impl(&dword_2218F0000, v16, OS_LOG_TYPE_INFO, "%{public}@Created new week day rule: %@", buf, 0x16u);

      }
      objc_autoreleasePoolPop(v14);
    }
    else
    {
      v31 = (void *)MEMORY[0x227676638]();
      v32 = *(id *)(a1 + 40);
      HMFGetOSLogHandle();
      v33 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v33, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v34 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        v41 = v34;
        v42 = 2112;
        v43 = v7;
        _os_log_impl(&dword_2218F0000, v33, OS_LOG_TYPE_ERROR, "%{public}@Unable to create week day schedule from : %@", buf, 0x16u);

      }
      objc_autoreleasePoolPop(v31);
      *a3 = 1;
      *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = 0;
    }
  }
  else
  {
    v19 = v5;
    if (objc_msgSend(v19, "conformsToProtocol:", &unk_25586F4D8))
      v20 = v19;
    else
      v20 = 0;
    v10 = v20;

    if (v10)
    {
      v39 = 0;
      v21 = *(void **)(a1 + 32);
      objc_msgSend(MEMORY[0x24BDD1880], "UUID");
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v21, "materializeOrCreateYearDayScheduleRulesRelationWithModelID:createdNew:", v22, &v39);
      v23 = (void *)objc_claimAutoreleasedReturnValue();

      if (v39)
      {
        objc_msgSend(v10, "startDate");
        v24 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v23, "setStartDate:", v24);

        objc_msgSend(v10, "endDate");
        v25 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v23, "setEndDate:", v25);

        v26 = (void *)MEMORY[0x227676638]();
        v27 = *(id *)(a1 + 40);
        HMFGetOSLogHandle();
        v28 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v28, OS_LOG_TYPE_INFO))
        {
          HMFGetLogIdentifier();
          v29 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v23, "debugDescription");
          v30 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543618;
          v41 = v29;
          v42 = 2112;
          v43 = v30;
          _os_log_impl(&dword_2218F0000, v28, OS_LOG_TYPE_INFO, "%{public}@Created new year day rule: %@", buf, 0x16u);

        }
        objc_autoreleasePoolPop(v26);
      }
      else
      {
        v35 = (void *)MEMORY[0x227676638]();
        v36 = *(id *)(a1 + 40);
        HMFGetOSLogHandle();
        v37 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v37, OS_LOG_TYPE_ERROR))
        {
          HMFGetLogIdentifier();
          v38 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543618;
          v41 = v38;
          v42 = 2112;
          v43 = v10;
          _os_log_impl(&dword_2218F0000, v37, OS_LOG_TYPE_ERROR, "%{public}@Unable to create year day schedule from : %@", buf, 0x16u);

        }
        objc_autoreleasePoolPop(v35);
        *a3 = 1;
        *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = 0;
      }

    }
  }

}

uint64_t __89__HMDHome__saveRestrictedGuestSettingsFromOutgoingInvitation_managedObjectContext_error___block_invoke(uint64_t a1, void *a2)
{
  id v2;
  unsigned int v3;
  uint64_t v4;

  v2 = a2;
  v3 = objc_msgSend(v2, "conformsToProtocol:", &unk_255857640);
  if (v2)
    v4 = v3;
  else
    v4 = 0;

  return v4;
}

void __106__HMDHome__saveOutgoingInvitationsWithRestrictedGuestSettings_inTransaction_message_transactionCompleted___block_invoke(uint64_t a1, void *a2, void *a3, _QWORD *a4)
{
  id v7;
  id v8;
  void *v9;
  id v10;
  NSObject *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __objc2_class *v16;
  uint64_t v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  char v24;
  uint64_t v25;
  __objc2_class *v26;
  _QWORD *v27;
  void *v28;
  id v29;
  NSObject *v30;
  void *v31;
  void *v32;
  void *v33;
  id v34;
  uint64_t v35;
  uint64_t v36;
  id obj;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  uint8_t v42[128];
  uint8_t buf[4];
  void *v44;
  __int16 v45;
  id v46;
  uint64_t v47;

  v47 = *MEMORY[0x24BDAC8D0];
  v7 = a2;
  v8 = a3;
  v9 = (void *)MEMORY[0x227676638]();
  v36 = a1;
  v10 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v11 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543618;
    v44 = v12;
    v45 = 2112;
    v46 = v8;
    _os_log_impl(&dword_2218F0000, v11, OS_LOG_TYPE_INFO, "%{public}@Going to save RG settings with previous error: %@", buf, 0x16u);

  }
  objc_autoreleasePoolPop(v9);
  if (!v8)
  {
    v33 = 0;
    v34 = v7;
    v40 = 0u;
    v41 = 0u;
    v38 = 0u;
    v39 = 0u;
    obj = *(id *)(a1 + 40);
    v13 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v38, v42, 16);
    if (v13)
    {
      v14 = v13;
      v15 = *(_QWORD *)v39;
      v16 = &OBJC_METACLASS___HMDAccessorySetupCoordinator;
      while (2)
      {
        v17 = 0;
        v35 = v14;
        do
        {
          if (*(_QWORD *)v39 != v15)
            objc_enumerationMutation(obj);
          v18 = *(void **)(*((_QWORD *)&v38 + 1) + 8 * v17);
          objc_msgSend(v18, "identifier", v33, v34);
          v19 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(&v16[78], "findOutgoingInvitationWithModelID:", v19);
          v20 = (void *)objc_claimAutoreleasedReturnValue();

          if (v20)
          {
            objc_msgSend(v18, "user");
            v21 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v21, "restrictedGuestAccessSettings");
            v22 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v22, "schedule");
            v23 = (void *)objc_claimAutoreleasedReturnValue();
            v24 = objc_msgSend(v20, "populateWorkingStoreFromRestrictedGuestSchedule:", v23);

            if ((v24 & 1) == 0)
            {
              if (a4)
              {
                objc_msgSend(MEMORY[0x24BDD1540], "hmPrivateErrorWithCode:", 2905);
                *a4 = (id)objc_claimAutoreleasedReturnValue();
              }

              goto LABEL_22;
            }
          }
          else
          {
            v25 = v15;
            v26 = v16;
            v27 = a4;
            v28 = (void *)MEMORY[0x227676638]();
            v29 = *(id *)(v36 + 32);
            HMFGetOSLogHandle();
            v30 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
            {
              HMFGetLogIdentifier();
              v31 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v18, "uuid");
              v32 = (void *)objc_claimAutoreleasedReturnValue();
              *(_DWORD *)buf = 138543618;
              v44 = v31;
              v45 = 2112;
              v46 = v32;
              _os_log_impl(&dword_2218F0000, v30, OS_LOG_TYPE_ERROR, "%{public}@Unable to find the outgoing invitation with UUID in database: %@", buf, 0x16u);

            }
            objc_autoreleasePoolPop(v28);
            a4 = v27;
            v16 = v26;
            v15 = v25;
            v14 = v35;
            if (a4)
            {
              objc_msgSend(MEMORY[0x24BDD1540], "hmErrorWithCode:", 2);
              *a4 = (id)objc_claimAutoreleasedReturnValue();
            }
          }

          ++v17;
        }
        while (v14 != v17);
        v14 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v38, v42, 16);
        if (v14)
          continue;
        break;
      }
    }
LABEL_22:

    v8 = v33;
    v7 = v34;
  }

}

void __106__HMDHome__saveOutgoingInvitationsWithRestrictedGuestSettings_inTransaction_message_transactionCompleted___block_invoke_1884(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  NSObject *v6;
  void *v7;
  void *v8;
  void *v9;
  int v10;
  void *v11;
  __int16 v12;
  id v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  v3 = a2;
  v4 = (void *)MEMORY[0x227676638]();
  v5 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v6 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v10 = 138543618;
    v11 = v7;
    v12 = 2112;
    v13 = v3;
    _os_log_impl(&dword_2218F0000, v6, OS_LOG_TYPE_INFO, "%{public}@RG settings transaction finished with error: %@", (uint8_t *)&v10, 0x16u);

  }
  objc_autoreleasePoolPop(v4);
  v8 = _Block_copy(*(const void **)(a1 + 48));
  v9 = v8;
  if (v8)
    (*((void (**)(void *, id))v8 + 2))(v8, v3);

  objc_msgSend(*(id *)(a1 + 40), "respondWithPayload:error:", 0, v3);
}

void __49__HMDHome___handleUpdateRestrictedGuestSettings___block_invoke(id *a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  id v10;
  id v11;
  void *v12;
  id v13;
  NSObject *v14;
  void *v15;
  void *v16;
  uint64_t (*v17)(uint64_t, uint64_t);
  id v18;
  void *v19;
  _BOOL4 v20;
  void *v21;
  char v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  id v28;
  NSObject *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  char v34;
  void *v35;
  id v36;
  NSObject *v37;
  id v38;
  void *v39;
  id v40;
  void *v41;
  id v42;
  void *v43;
  id v44;
  NSObject *v45;
  id v46;
  void *v47;
  void *v48;
  id v49;
  NSObject *v50;
  id v51;
  void *v52;
  id v53;
  void *v54;
  id v55;
  void *v56;
  void *v57;
  void *v58;
  void *v59;
  void *v60;
  id v61;
  id v62;
  void *v63;
  void *v64;
  id v65;
  id v66;
  void *v67;
  void *v68;
  int v69;
  void *v70;
  void *v71;
  _QWORD v72[5];
  id v73;
  id v74;
  id v75;
  id v76;
  _QWORD v77[4];
  id v78;
  _QWORD v79[5];
  id v80;
  id v81;
  uint64_t *v82;
  _BYTE *v83;
  uint64_t v84;
  uint64_t *v85;
  uint64_t v86;
  uint64_t (*v87)(uint64_t, uint64_t);
  void (*v88)(uint64_t);
  id v89;
  _QWORD v90[2];
  uint8_t v91[4];
  id v92;
  __int16 v93;
  void *v94;
  __int16 v95;
  id v96;
  __int16 v97;
  void *v98;
  _BYTE buf[24];
  uint64_t (*v100)(uint64_t, uint64_t);
  void (*v101)(uint64_t);
  id v102;
  uint64_t v103;

  v103 = *MEMORY[0x24BDAC8D0];
  objc_msgSend(a1[4], "uuid");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  +[HMCContext findGuestWithModelID:](HMCContext, "findGuestWithModelID:", v2);
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  if (v3)
  {
    v4 = (void *)MEMORY[0x24BDBCF20];
    objc_msgSend(v3, "allowedAccessories");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "setWithArray:", v5);
    v6 = (void *)objc_claimAutoreleasedReturnValue();

    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = buf;
    *(_QWORD *)&buf[16] = 0x3032000000;
    v100 = __Block_byref_object_copy__14094;
    v101 = __Block_byref_object_dispose__14095;
    v7 = (void *)MEMORY[0x24BDBCEF0];
    objc_msgSend(a1[8], "uuidsOfAllowedAccessories");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "setWithCapacity:", objc_msgSend(v8, "count"));
    v102 = (id)objc_claimAutoreleasedReturnValue();

    v84 = 0;
    v85 = &v84;
    v86 = 0x3032000000;
    v87 = __Block_byref_object_copy__14094;
    v88 = __Block_byref_object_dispose__14095;
    v89 = 0;
    objc_msgSend(a1[8], "uuidsOfAllowedAccessories");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v79[0] = MEMORY[0x24BDAC760];
    v79[1] = 3221225472;
    v79[2] = __49__HMDHome___handleUpdateRestrictedGuestSettings___block_invoke_1872;
    v79[3] = &unk_24E7770B0;
    v10 = a1[6];
    v79[4] = a1[5];
    v80 = v10;
    v82 = &v84;
    v83 = buf;
    v11 = v3;
    v81 = v11;
    objc_msgSend(v9, "hmf_enumerateWithAutoreleasePoolUsingBlock:", v79);

    if (v85[5])
    {
      objc_msgSend(a1[7], "respondWithError:");
    }
    else
    {
      objc_msgSend(a1[8], "uuidsOfAllowedAccessories");
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      v20 = objc_msgSend(v19, "count") == 0;

      if (v20)
        objc_msgSend(v11, "dematerializeAllowedAccessoriesRelationship");
      objc_msgSend(a1[8], "schedule");
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      v22 = objc_msgSend(v11, "populateWorkingStoreFromRestrictedGuestSchedule:", v21);

      if ((v22 & 1) != 0)
      {
        v23 = (void *)objc_msgSend(v6, "mutableCopy");
        objc_msgSend(v23, "minusSet:", *(_QWORD *)(*(_QWORD *)&buf[8] + 40));
        v71 = (void *)objc_msgSend(*(id *)(*(_QWORD *)&buf[8] + 40), "mutableCopy");
        objc_msgSend(v71, "minusSet:", v6);
        objc_msgSend((id)objc_opt_class(), "dumpAccessories:usingTag:flow:", v23, CFSTR("removed from allowed accessories"), a1[6]);
        objc_msgSend((id)objc_opt_class(), "dumpAccessories:usingTag:flow:", v71, CFSTR("newly added to allowed accessories"), a1[6]);
        v77[0] = MEMORY[0x24BDAC760];
        v77[1] = 3221225472;
        v77[2] = __49__HMDHome___handleUpdateRestrictedGuestSettings___block_invoke_1878;
        v77[3] = &unk_24E7770D8;
        v78 = v11;
        objc_msgSend(v23, "na_each:", v77);
        listOfUUIDsFromManagedObjectSet(v23);
        v68 = (void *)objc_claimAutoreleasedReturnValue();
        listOfUUIDsFromManagedObjectSet(v71);
        v67 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1[4], "restrictedGuestAccessSettings");
        v24 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v24, "schedule");
        v25 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1[8], "schedule");
        v26 = (void *)objc_claimAutoreleasedReturnValue();
        v69 = HMFEqualObjects();

        if ((v69 & 1) == 0)
        {
          v27 = (void *)MEMORY[0x227676638]();
          v28 = a1[5];
          HMFGetOSLogHandle();
          v29 = (id)objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v29, OS_LOG_TYPE_INFO))
          {
            v63 = v27;
            HMFGetLogIdentifier();
            v65 = (id)objc_claimAutoreleasedReturnValue();
            objc_msgSend(a1[6], "UUID");
            v64 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(a1[4], "restrictedGuestAccessSettings");
            v30 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v30, "schedule");
            v31 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(a1[8], "schedule");
            v32 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)v91 = 138544130;
            v92 = v65;
            v93 = 2112;
            v94 = v64;
            v95 = 2112;
            v96 = v31;
            v97 = 2112;
            v98 = v32;
            _os_log_impl(&dword_2218F0000, v29, OS_LOG_TYPE_INFO, "%{public}@[Flow: %@] Changing schedule from: %@, to: %@", v91, 0x2Au);

            v27 = v63;
          }

          objc_autoreleasePoolPop(v27);
        }
        +[HMCContext currentContext](HMCContext, "currentContext", v63);
        v33 = (void *)objc_claimAutoreleasedReturnValue();
        v76 = 0;
        v34 = objc_msgSend(v33, "save:", &v76);
        v66 = v76;

        v35 = (void *)MEMORY[0x227676638]();
        v36 = a1[5];
        if ((v34 & 1) != 0)
        {
          HMFGetOSLogHandle();
          v37 = (id)objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v37, OS_LOG_TYPE_INFO))
          {
            HMFGetLogIdentifier();
            v38 = (id)objc_claimAutoreleasedReturnValue();
            objc_msgSend(a1[6], "UUID");
            v39 = (void *)objc_claimAutoreleasedReturnValue();
            v40 = a1[8];
            *(_DWORD *)v91 = 138543874;
            v92 = v38;
            v93 = 2112;
            v94 = v39;
            v95 = 2112;
            v96 = v40;
            _os_log_impl(&dword_2218F0000, v37, OS_LOG_TYPE_INFO, "%{public}@[Flow: %@] Successfully saved the restricted guest settings to working store : %@", v91, 0x20u);

          }
          objc_autoreleasePoolPop(v35);
          objc_msgSend(a1[4], "setRestrictedGuestAccessSettings:", a1[8]);
          objc_msgSend(a1[4], "scheduleRestrictedGuestAccessTimersWithReason:", CFSTR("Admin updated RG Settings"));
          +[HMDBackgroundOperationManagerHelper auditProhibitedAccessToRestrictedGuest:forAccessories:shouldRemoveScheduledOperations:parentFlow:](HMDBackgroundOperationManagerHelper, "auditProhibitedAccessToRestrictedGuest:forAccessories:shouldRemoveScheduledOperations:parentFlow:", a1[4], v68, 1, a1[6]);
          v41 = (void *)objc_claimAutoreleasedReturnValue();
          if (v69)
          {
            v42 = v67;
          }
          else
          {
            objc_msgSend(a1[8], "uuidsOfAllowedAccessories");
            v42 = (id)objc_claimAutoreleasedReturnValue();
          }
          v70 = v42;
          +[HMDBackgroundOperationManagerHelper auditAllowedAccessToRestrictedGuest:forAccessories:shouldRemoveScheduledOperations:parentFlow:](HMDBackgroundOperationManagerHelper, "auditAllowedAccessToRestrictedGuest:forAccessories:shouldRemoveScheduledOperations:parentFlow:", a1[4], v42, 1, a1[6]);
          v54 = (void *)objc_claimAutoreleasedReturnValue();
          v55 = objc_alloc(MEMORY[0x24BE3F168]);
          objc_msgSend(a1[5], "workQueue");
          v56 = (void *)objc_claimAutoreleasedReturnValue();
          v57 = (void *)objc_msgSend(v55, "initWithQueue:", v56);

          v58 = (void *)MEMORY[0x24BE3F180];
          v90[0] = v41;
          v90[1] = v54;
          objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", v90, 2);
          v59 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v58, "allSettled:", v59);
          v60 = (void *)objc_claimAutoreleasedReturnValue();

          v72[0] = MEMORY[0x24BDAC760];
          v72[1] = 3221225472;
          v72[2] = __49__HMDHome___handleUpdateRestrictedGuestSettings___block_invoke_1882;
          v72[3] = &unk_24E777100;
          v61 = a1[6];
          v72[4] = a1[5];
          v73 = v61;
          v74 = a1[4];
          v75 = a1[7];
          v62 = (id)objc_msgSend(v60, "inContext:then:", v57, v72);

        }
        else
        {
          HMFGetOSLogHandle();
          v50 = (id)objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v50, OS_LOG_TYPE_ERROR))
          {
            HMFGetLogIdentifier();
            v51 = (id)objc_claimAutoreleasedReturnValue();
            objc_msgSend(a1[6], "UUID");
            v52 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)v91 = 138543874;
            v92 = v51;
            v93 = 2112;
            v94 = v52;
            v95 = 2112;
            v96 = v66;
            _os_log_impl(&dword_2218F0000, v50, OS_LOG_TYPE_ERROR, "%{public}@[Flow: %@] Unable to save the restricted guest settings to working store : %@", v91, 0x20u);

          }
          objc_autoreleasePoolPop(v35);
          v53 = a1[7];
          objc_msgSend(MEMORY[0x24BDD1540], "hmPrivateErrorWithCode:", 2711);
          v41 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v53, "respondWithError:", v41);
        }

      }
      else
      {
        v43 = (void *)MEMORY[0x227676638]();
        v44 = a1[5];
        HMFGetOSLogHandle();
        v45 = (id)objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v45, OS_LOG_TYPE_ERROR))
        {
          HMFGetLogIdentifier();
          v46 = (id)objc_claimAutoreleasedReturnValue();
          objc_msgSend(a1[6], "UUID");
          v47 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(a1[8], "schedule");
          v48 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)v91 = 138543874;
          v92 = v46;
          v93 = 2112;
          v94 = v47;
          v95 = 2112;
          v96 = v48;
          _os_log_impl(&dword_2218F0000, v45, OS_LOG_TYPE_ERROR, "%{public}@[Flow: %@] Unable to save the restricted guest schedule to working store : %@", v91, 0x20u);

        }
        objc_autoreleasePoolPop(v43);
        v49 = a1[7];
        objc_msgSend(MEMORY[0x24BDD1540], "hmPrivateErrorWithCode:", 2711);
        v23 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v49, "respondWithError:", v23);
      }

    }
    _Block_object_dispose(&v84, 8);

    _Block_object_dispose(buf, 8);
  }
  else
  {
    v12 = (void *)MEMORY[0x227676638]();
    v13 = a1[5];
    HMFGetOSLogHandle();
    v14 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(a1[6], "UUID");
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(a1[4], "uuid");
      v17 = (uint64_t (*)(uint64_t, uint64_t))objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543874;
      *(_QWORD *)&buf[4] = v15;
      *(_WORD *)&buf[12] = 2112;
      *(_QWORD *)&buf[14] = v16;
      *(_WORD *)&buf[22] = 2112;
      v100 = v17;
      _os_log_impl(&dword_2218F0000, v14, OS_LOG_TYPE_ERROR, "%{public}@[Flow: %@] Unable to fetch the guest with id [%@] from working store", buf, 0x20u);

    }
    objc_autoreleasePoolPop(v12);
    v18 = a1[7];
    objc_msgSend(MEMORY[0x24BDD1540], "hmErrorWithCode:", 2);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v18, "respondWithError:", v6);
  }

}

void __49__HMDHome___handleUpdateRestrictedGuestSettings___block_invoke_1872(uint64_t a1, void *a2, uint64_t a3, _BYTE *a4)
{
  id v6;
  void *v7;
  void *v8;
  id v9;
  NSObject *v10;
  void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  int v16;
  void *v17;
  __int16 v18;
  void *v19;
  __int16 v20;
  id v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  v6 = a2;
  +[HMCContext findAccessoryWithModelID:](HMCContext, "findAccessoryWithModelID:", v6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  if (v7)
  {
    objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 40), "addObject:", v7);
    objc_msgSend(*(id *)(a1 + 48), "addAllowedAccessoriesObject:", v7);
  }
  else
  {
    v8 = (void *)MEMORY[0x227676638]();
    v9 = *(id *)(a1 + 32);
    HMFGetOSLogHandle();
    v10 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(*(id *)(a1 + 40), "UUID");
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      v16 = 138543874;
      v17 = v11;
      v18 = 2112;
      v19 = v12;
      v20 = 2112;
      v21 = v6;
      _os_log_impl(&dword_2218F0000, v10, OS_LOG_TYPE_ERROR, "%{public}@[Flow: %@] Unable to fetch the accessory with id [%@] from working store", (uint8_t *)&v16, 0x20u);

    }
    objc_autoreleasePoolPop(v8);
    objc_msgSend(MEMORY[0x24BDD1540], "hmErrorWithCode:", 2);
    v13 = objc_claimAutoreleasedReturnValue();
    v14 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    v15 = *(void **)(v14 + 40);
    *(_QWORD *)(v14 + 40) = v13;

    *a4 = 1;
  }

}

uint64_t __49__HMDHome___handleUpdateRestrictedGuestSettings___block_invoke_1878(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(a1 + 32), "removeAllowedAccessoriesObject:", a2);
}

uint64_t __49__HMDHome___handleUpdateRestrictedGuestSettings___block_invoke_1882(id *a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  void *v6;
  id v7;
  NSObject *v8;
  NSObject *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  uint64_t v15;
  void *v16;
  id v17;
  NSObject *v18;
  NSObject *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  int v25;
  void *v26;
  __int16 v27;
  void *v28;
  __int16 v29;
  void *v30;
  __int16 v31;
  void *v32;
  uint64_t v33;

  v33 = *MEMORY[0x24BDAC8D0];
  v3 = a2;
  objc_msgSend(v3, "objectAtIndexedSubscript:", 0);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v4, "count");

  v6 = (void *)MEMORY[0x227676638]();
  v7 = a1[4];
  HMFGetOSLogHandle();
  v8 = objc_claimAutoreleasedReturnValue();
  v9 = v8;
  if (v5)
  {
    if (!os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      goto LABEL_7;
    HMFGetLogIdentifier();
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(a1[5], "UUID");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(a1[6], "uuid");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "objectAtIndexedSubscript:", 0);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    v25 = 138544130;
    v26 = v10;
    v27 = 2112;
    v28 = v11;
    v29 = 2112;
    v30 = v12;
    v31 = 2112;
    v32 = v13;
    _os_log_impl(&dword_2218F0000, v9, OS_LOG_TYPE_ERROR, "%{public}@[Flow: %@] Some error occurred when removing pairings, pin codes & Home keys for the restricted guest %@ with error dictionary: %@", (uint8_t *)&v25, 0x2Au);

  }
  else
  {
    if (!os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
      goto LABEL_7;
    HMFGetLogIdentifier();
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(a1[5], "UUID");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v25 = 138543618;
    v26 = v10;
    v27 = 2112;
    v28 = v11;
    _os_log_impl(&dword_2218F0000, v9, OS_LOG_TYPE_INFO, "%{public}@[Flow: %@] Successfully finished removing pairings, pin codes & Home keys for the restricted guest", (uint8_t *)&v25, 0x16u);
  }

LABEL_7:
  objc_autoreleasePoolPop(v6);
  objc_msgSend(v3, "objectAtIndexedSubscript:", 1);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  v15 = objc_msgSend(v14, "count");

  v16 = (void *)MEMORY[0x227676638]();
  v17 = a1[4];
  HMFGetOSLogHandle();
  v18 = objc_claimAutoreleasedReturnValue();
  v19 = v18;
  if (v15)
  {
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(a1[5], "UUID");
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(a1[6], "uuid");
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v3, "objectAtIndexedSubscript:", 1);
      v23 = (void *)objc_claimAutoreleasedReturnValue();
      v25 = 138544130;
      v26 = v20;
      v27 = 2112;
      v28 = v21;
      v29 = 2112;
      v30 = v22;
      v31 = 2112;
      v32 = v23;
      _os_log_impl(&dword_2218F0000, v19, OS_LOG_TYPE_ERROR, "%{public}@[Flow: %@] Some error occurred when adding pairings, pin codes & Home keys for the restricted guest %@ with error dictionary: %@", (uint8_t *)&v25, 0x2Au);

LABEL_12:
    }
  }
  else if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(a1[5], "UUID");
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    v25 = 138543618;
    v26 = v20;
    v27 = 2112;
    v28 = v21;
    _os_log_impl(&dword_2218F0000, v19, OS_LOG_TYPE_INFO, "%{public}@[Flow: %@] Successfully finished adding pairings, pin codes & Home keys for the restricted guest", (uint8_t *)&v25, 0x16u);
    goto LABEL_12;
  }

  objc_autoreleasePoolPop(v16);
  objc_msgSend(a1[7], "respondWithSuccess");

  return 1;
}

void __72__HMDHome_aggregator_didReceiveSoftwareVersionWithUUID_softwareVersion___block_invoke(uint64_t a1)
{
  void *v2;
  id v3;
  NSObject *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  id v13;
  NSObject *v14;
  void *v15;
  void *v16;
  const char *v17;
  NSObject *v18;
  os_log_type_t v19;
  void *v20;
  void *v21;
  id v22;
  void *v23;
  id v24;
  NSObject *v25;
  void *v26;
  id v27;
  uint8_t buf[4];
  void *v29;
  __int16 v30;
  id v31;
  __int16 v32;
  uint64_t v33;
  uint64_t v34;

  v34 = *MEMORY[0x24BDAC8D0];
  v2 = (void *)MEMORY[0x227676638]();
  v3 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    HMFGetLogIdentifier();
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = *(void **)(a1 + 40);
    v7 = *(_QWORD *)(a1 + 48);
    *(_DWORD *)buf = 138543874;
    v29 = v5;
    v30 = 2112;
    v31 = v6;
    v32 = 2112;
    v33 = v7;
    _os_log_impl(&dword_2218F0000, v4, OS_LOG_TYPE_DEFAULT, "%{public}@Aggregator: Saving accessory software version: %@ accessory: %@", buf, 0x20u);

  }
  objc_autoreleasePoolPop(v2);
  +[HMCContext findAppleMediaAccessoryWithModelID:](HMCContext, "findAppleMediaAccessoryWithModelID:", *(_QWORD *)(a1 + 48));
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = v8;
  if (!v8)
  {
    v12 = (void *)MEMORY[0x227676638]();
    v13 = *(id *)(a1 + 32);
    HMFGetOSLogHandle();
    v14 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      v20 = *(void **)(a1 + 48);
      *(_DWORD *)buf = 138543618;
      v29 = v15;
      v30 = 2112;
      v31 = v20;
      v17 = "%{public}@Aggregator: Failed to save accessory software version due to missing mkfAppleMediaAccessory with uuid: %@";
      v18 = v14;
      v19 = OS_LOG_TYPE_ERROR;
      goto LABEL_9;
    }
LABEL_10:

    objc_autoreleasePoolPop(v12);
    goto LABEL_16;
  }
  v10 = *(void **)(a1 + 40);
  objc_msgSend(v8, "softwareVersion");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  LODWORD(v10) = objc_msgSend(v10, "isEqual:", v11);

  if ((_DWORD)v10)
  {
    v12 = (void *)MEMORY[0x227676638]();
    v13 = *(id *)(a1 + 32);
    HMFGetOSLogHandle();
    v14 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      v16 = *(void **)(a1 + 48);
      *(_DWORD *)buf = 138543618;
      v29 = v15;
      v30 = 2112;
      v31 = v16;
      v17 = "%{public}@Aggregator: Skipping already saved accessory software version for accessory: %@";
      v18 = v14;
      v19 = OS_LOG_TYPE_INFO;
LABEL_9:
      _os_log_impl(&dword_2218F0000, v18, v19, v17, buf, 0x16u);

      goto LABEL_10;
    }
    goto LABEL_10;
  }
  objc_msgSend(v9, "setSoftwareVersion:", *(_QWORD *)(a1 + 40));
  v21 = *(void **)(a1 + 56);
  v27 = 0;
  objc_msgSend(v21, "save:", &v27);
  v22 = v27;
  if (v22)
  {
    v23 = (void *)MEMORY[0x227676638]();
    v24 = *(id *)(a1 + 32);
    HMFGetOSLogHandle();
    v25 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v26 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v29 = v26;
      v30 = 2112;
      v31 = v22;
      _os_log_impl(&dword_2218F0000, v25, OS_LOG_TYPE_ERROR, "%{public}@Aggregator: Failed to save accessory software version with error: %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v23);
  }

LABEL_16:
}

void __60__HMDHome_aggregator_didReceiveDeviceIRKWithUUID_deviceIRK___block_invoke(uint64_t a1)
{
  void *v2;
  id v3;
  NSObject *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  id v12;
  NSObject *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  id v21;
  NSObject *v22;
  void *v23;
  void *v24;
  void *v25;
  id v26;
  NSObject *v27;
  void *v28;
  void *v29;
  void *v30;
  id v31;
  void *v32;
  id v33;
  NSObject *v34;
  void *v35;
  id v36;
  uint8_t buf[4];
  void *v38;
  __int16 v39;
  id v40;
  __int16 v41;
  uint64_t v42;
  uint64_t v43;

  v43 = *MEMORY[0x24BDAC8D0];
  v2 = (void *)MEMORY[0x227676638]();
  v3 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    HMFGetLogIdentifier();
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = *(void **)(a1 + 40);
    v7 = *(_QWORD *)(a1 + 48);
    *(_DWORD *)buf = 138543874;
    v38 = v5;
    v39 = 2112;
    v40 = v6;
    v41 = 2112;
    v42 = v7;
    _os_log_impl(&dword_2218F0000, v4, OS_LOG_TYPE_DEFAULT, "%{public}@Aggregator: Saving accessory deviceIRK: %@ accessory: %@", buf, 0x20u);

  }
  objc_autoreleasePoolPop(v2);
  +[HMCContext findAppleMediaAccessoryWithModelID:](HMCContext, "findAppleMediaAccessoryWithModelID:", *(_QWORD *)(a1 + 48));
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = v8;
  if (v8)
  {
    objc_msgSend(v8, "resident");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    if (!v10)
    {
      v11 = (void *)MEMORY[0x227676638]();
      v12 = *(id *)(a1 + 32);
      HMFGetOSLogHandle();
      v13 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v14 = (void *)objc_claimAutoreleasedReturnValue();
        v15 = *(void **)(a1 + 48);
        *(_DWORD *)buf = 138543618;
        v38 = v14;
        v39 = 2112;
        v40 = v15;
        _os_log_impl(&dword_2218F0000, v13, OS_LOG_TYPE_ERROR, "%{public}@Aggregator: Failed to save deviceIRK due to missing mkfResident for accessory with uuid: %@", buf, 0x16u);

      }
      objc_autoreleasePoolPop(v11);
    }
    v16 = *(void **)(a1 + 40);
    objc_msgSend(v9, "deviceIRKData");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    if ((objc_msgSend(v16, "isEqual:", v17) & 1) != 0)
    {
      v18 = *(void **)(a1 + 40);
      objc_msgSend(v10, "deviceIRKData");
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      LODWORD(v18) = objc_msgSend(v18, "isEqual:", v19);

      if ((_DWORD)v18)
      {
        v20 = (void *)MEMORY[0x227676638]();
        v21 = *(id *)(a1 + 32);
        HMFGetOSLogHandle();
        v22 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v22, OS_LOG_TYPE_INFO))
        {
          HMFGetLogIdentifier();
          v23 = (void *)objc_claimAutoreleasedReturnValue();
          v24 = *(void **)(a1 + 48);
          *(_DWORD *)buf = 138543618;
          v38 = v23;
          v39 = 2112;
          v40 = v24;
          _os_log_impl(&dword_2218F0000, v22, OS_LOG_TYPE_INFO, "%{public}@Aggregator: Skipping matching deviceIRK for accessory: %@", buf, 0x16u);

        }
        objc_autoreleasePoolPop(v20);
LABEL_22:

        goto LABEL_23;
      }
    }
    else
    {

    }
    objc_msgSend(v9, "setDeviceIRKData:", *(_QWORD *)(a1 + 40));
    objc_msgSend(v10, "setDeviceIRKData:", *(_QWORD *)(a1 + 40));
    v30 = *(void **)(a1 + 56);
    v36 = 0;
    objc_msgSend(v30, "save:", &v36);
    v31 = v36;
    if (v31)
    {
      v32 = (void *)MEMORY[0x227676638]();
      v33 = *(id *)(a1 + 32);
      HMFGetOSLogHandle();
      v34 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v35 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        v38 = v35;
        v39 = 2112;
        v40 = v31;
        _os_log_impl(&dword_2218F0000, v34, OS_LOG_TYPE_ERROR, "%{public}@Aggregator: Failed to save accessory pairing identity with error: %@", buf, 0x16u);

      }
      objc_autoreleasePoolPop(v32);
    }

    goto LABEL_22;
  }
  v25 = (void *)MEMORY[0x227676638]();
  v26 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v27 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
  {
    HMFGetLogIdentifier();
    v28 = (void *)objc_claimAutoreleasedReturnValue();
    v29 = *(void **)(a1 + 48);
    *(_DWORD *)buf = 138543618;
    v38 = v28;
    v39 = 2112;
    v40 = v29;
    _os_log_impl(&dword_2218F0000, v27, OS_LOG_TYPE_ERROR, "%{public}@Aggregator: did not find mkfAppleMediaAccessory with uuid: %@", buf, 0x16u);

  }
  objc_autoreleasePoolPop(v25);
LABEL_23:

}

void __73__HMDHome_aggregator_didReceivePublicPairingKeyWithUUID_pairingIdentity___block_invoke(uint64_t a1)
{
  void *v2;
  id v3;
  NSObject *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  id v12;
  NSObject *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  id v21;
  NSObject *v22;
  void *v23;
  void *v24;
  void *v25;
  id v26;
  NSObject *v27;
  void *v28;
  void *v29;
  void *v30;
  int v31;
  id v32;
  void *v33;
  void *v34;
  id v35;
  NSObject *v36;
  void *v37;
  void *v38;
  void *v39;
  id v40;
  uint8_t buf[4];
  void *v42;
  __int16 v43;
  void *v44;
  __int16 v45;
  uint64_t v46;
  uint64_t v47;

  v47 = *MEMORY[0x24BDAC8D0];
  v2 = (void *)MEMORY[0x227676638]();
  v3 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    HMFGetLogIdentifier();
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = *(void **)(a1 + 40);
    v7 = *(_QWORD *)(a1 + 48);
    *(_DWORD *)buf = 138543874;
    v42 = v5;
    v43 = 2112;
    v44 = v6;
    v45 = 2112;
    v46 = v7;
    _os_log_impl(&dword_2218F0000, v4, OS_LOG_TYPE_DEFAULT, "%{public}@Aggregator: Saving accessory public pairing identity: %@ accessory: %@", buf, 0x20u);

  }
  objc_autoreleasePoolPop(v2);
  +[HMCContext findAppleMediaAccessoryWithModelID:](HMCContext, "findAppleMediaAccessoryWithModelID:", *(_QWORD *)(a1 + 48));
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = v8;
  if (v8)
  {
    objc_msgSend(v8, "resident");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    if (!v10)
    {
      v11 = (void *)MEMORY[0x227676638]();
      v12 = *(id *)(a1 + 32);
      HMFGetOSLogHandle();
      v13 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v14 = (void *)objc_claimAutoreleasedReturnValue();
        v15 = *(void **)(a1 + 48);
        *(_DWORD *)buf = 138543618;
        v42 = v14;
        v43 = 2112;
        v44 = v15;
        _os_log_impl(&dword_2218F0000, v13, OS_LOG_TYPE_ERROR, "%{public}@Aggregator: Failed to save accessory public pairing identity due to missing mkfResident for accessory with uuid: %@", buf, 0x16u);

      }
      objc_autoreleasePoolPop(v11);
    }
    v16 = *(void **)(a1 + 40);
    objc_msgSend(v9, "pairingIdentity");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    if ((objc_msgSend(v16, "isEqual:", v17) & 1) != 0)
    {
      v18 = *(void **)(a1 + 40);
      objc_msgSend(v10, "pairingIdentity");
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      LODWORD(v18) = objc_msgSend(v18, "isEqual:", v19);

      if ((_DWORD)v18)
      {
        v20 = (void *)MEMORY[0x227676638]();
        v21 = *(id *)(a1 + 32);
        HMFGetOSLogHandle();
        v22 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v22, OS_LOG_TYPE_INFO))
        {
          HMFGetLogIdentifier();
          v23 = (void *)objc_claimAutoreleasedReturnValue();
          v24 = *(void **)(a1 + 48);
          *(_DWORD *)buf = 138543618;
          v42 = v23;
          v43 = 2112;
          v44 = v24;
          _os_log_impl(&dword_2218F0000, v22, OS_LOG_TYPE_INFO, "%{public}@Aggregator: Skipping already saved accessory public pairing identity for accessory: %@", buf, 0x16u);

        }
        objc_autoreleasePoolPop(v20);
        goto LABEL_25;
      }
    }
    else
    {

    }
    objc_msgSend(v9, "setPairingIdentity:", *(_QWORD *)(a1 + 40));
    objc_msgSend(v10, "setPairingIdentity:", *(_QWORD *)(a1 + 40));
    v30 = *(void **)(a1 + 56);
    v40 = 0;
    v31 = objc_msgSend(v30, "save:", &v40);
    v32 = v40;
    v33 = v32;
    if (v31)
    {
      v34 = (void *)MEMORY[0x227676638]();
      v35 = *(id *)(a1 + 32);
      HMFGetOSLogHandle();
      v36 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v36, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v37 = (void *)objc_claimAutoreleasedReturnValue();
        v38 = *(void **)(a1 + 48);
        *(_DWORD *)buf = 138543618;
        v42 = v37;
        v43 = 2112;
        v44 = v38;
        _os_log_impl(&dword_2218F0000, v36, OS_LOG_TYPE_INFO, "%{public}@Aggregator: Saved pairing identity for accessory: %@", buf, 0x16u);

      }
    }
    else
    {
      if (!v32)
      {
LABEL_24:

LABEL_25:
        goto LABEL_26;
      }
      v34 = (void *)MEMORY[0x227676638]();
      v35 = *(id *)(a1 + 32);
      HMFGetOSLogHandle();
      v36 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v36, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v39 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        v42 = v39;
        v43 = 2112;
        v44 = v33;
        _os_log_impl(&dword_2218F0000, v36, OS_LOG_TYPE_ERROR, "%{public}@Aggregator: Failed to save pairing identity error: %@", buf, 0x16u);

      }
    }

    objc_autoreleasePoolPop(v34);
    goto LABEL_24;
  }
  v25 = (void *)MEMORY[0x227676638]();
  v26 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v27 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
  {
    HMFGetLogIdentifier();
    v28 = (void *)objc_claimAutoreleasedReturnValue();
    v29 = *(void **)(a1 + 48);
    *(_DWORD *)buf = 138543618;
    v42 = v28;
    v43 = 2112;
    v44 = v29;
    _os_log_impl(&dword_2218F0000, v27, OS_LOG_TYPE_ERROR, "%{public}@Aggregator: Failed to save accessory public pairing identity due to missing mkfAppleMediaAccessory with uuid: %@", buf, 0x16u);

  }
  objc_autoreleasePoolPop(v25);
LABEL_26:

}

void __62__HMDHome_aggregator_residentCapabilitiesWithUUID_completion___block_invoke(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  void *v4;
  id v5;

  +[HMCContext findAppleMediaAccessoryWithModelID:](HMCContext, "findAppleMediaAccessoryWithModelID:", *(_QWORD *)(a1 + 32));
  v5 = (id)objc_claimAutoreleasedReturnValue();
  v2 = *(_QWORD *)(a1 + 40);
  objc_msgSend(v5, "resident");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "residentCapabilities");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  (*(void (**)(uint64_t, void *))(v2 + 16))(v2, v4);

}

void __63__HMDHome_aggregator_accessoryCapabilitiesWithUUID_completion___block_invoke(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  id v4;

  +[HMCContext findAppleMediaAccessoryWithModelID:](HMCContext, "findAppleMediaAccessoryWithModelID:", *(_QWORD *)(a1 + 32));
  v4 = (id)objc_claimAutoreleasedReturnValue();
  v2 = *(_QWORD *)(a1 + 40);
  objc_msgSend(v4, "accessoryCapabilities");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  (*(void (**)(uint64_t, void *))(v2 + 16))(v2, v3);

}

void __38__HMDHome_aggregatorDidBecomePrimary___block_invoke(uint64_t a1)
{
  uint64_t v1;
  id v2;
  char v3;
  uint64_t i;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  id v13;
  NSObject *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  id v23;
  NSObject *v24;
  void *v25;
  void *v26;
  void *v27;
  id v28;
  NSObject *v29;
  void *v30;
  id obj;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  uint8_t buf[4];
  void *v40;
  __int16 v41;
  void *v42;
  _BYTE v43[128];
  uint64_t v44;

  v1 = a1;
  v44 = *MEMORY[0x24BDAC8D0];
  v35 = 0u;
  v36 = 0u;
  v37 = 0u;
  v38 = 0u;
  v2 = *(id *)(a1 + 32);
  v33 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v35, v43, 16);
  if (v33)
  {
    v3 = 0;
    v32 = *(_QWORD *)v36;
    v34 = v1;
    obj = v2;
    do
    {
      for (i = 0; i != v33; ++i)
      {
        if (*(_QWORD *)v36 != v32)
          objc_enumerationMutation(obj);
        v5 = *(void **)(*((_QWORD *)&v35 + 1) + 8 * i);
        objc_msgSend(v5, "uuid");
        v6 = (void *)objc_claimAutoreleasedReturnValue();
        +[HMCContext findAppleMediaAccessoryWithModelID:](HMCContext, "findAppleMediaAccessoryWithModelID:", v6);
        v7 = (void *)objc_claimAutoreleasedReturnValue();

        objc_msgSend(*(id *)(v1 + 40), "capabilitiesAggregator");
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v5, "uuid");
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v7, "accessoryCapabilities");
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v8, "accessoryCapabilitiesForAccessory:ifDifferentFrom:", v9, v10);
        v11 = (void *)objc_claimAutoreleasedReturnValue();

        if (v11)
        {
          v12 = (void *)MEMORY[0x227676638](objc_msgSend(v7, "setAccessoryCapabilities:", v11));
          v13 = *(id *)(v1 + 40);
          HMFGetOSLogHandle();
          v14 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
          {
            HMFGetLogIdentifier();
            v15 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v5, "uuid");
            v16 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 138543618;
            v40 = v15;
            v41 = 2112;
            v42 = v16;
            _os_log_impl(&dword_2218F0000, v14, OS_LOG_TYPE_DEFAULT, "%{public}@Aggregator: Accessory capabilities differ for %@", buf, 0x16u);

          }
          objc_autoreleasePoolPop(v12);
          v3 = 1;
          v1 = v34;
        }
        objc_msgSend(v7, "resident");
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(*(id *)(v1 + 40), "capabilitiesAggregator");
        v18 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v5, "uuid");
        v19 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v17, "residentCapabilities");
        v20 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v18, "residentCapabilitiesForAccessory:ifDifferentFrom:", v19, v20);
        v21 = (void *)objc_claimAutoreleasedReturnValue();

        if (v17 && v21)
        {
          v22 = (void *)MEMORY[0x227676638](objc_msgSend(v17, "setResidentCapabilities:", v21));
          v23 = *(id *)(v34 + 40);
          HMFGetOSLogHandle();
          v24 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
          {
            HMFGetLogIdentifier();
            v25 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v5, "uuid");
            v26 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 138543618;
            v40 = v25;
            v41 = 2112;
            v42 = v26;
            _os_log_impl(&dword_2218F0000, v24, OS_LOG_TYPE_DEFAULT, "%{public}@Aggregator: Resident capabilities differ for %@", buf, 0x16u);

          }
          objc_autoreleasePoolPop(v22);
          v3 = 1;
        }

        v1 = v34;
      }
      v33 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v35, v43, 16);
    }
    while (v33);

    if ((v3 & 1) != 0 && objc_msgSend(*(id *)(v34 + 48), "save"))
    {
      v27 = (void *)MEMORY[0x227676638]();
      v28 = *(id *)(v34 + 40);
      HMFGetOSLogHandle();
      v29 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
      {
        HMFGetLogIdentifier();
        v30 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543362;
        v40 = v30;
        _os_log_impl(&dword_2218F0000, v29, OS_LOG_TYPE_DEFAULT, "%{public}@Aggregator: Saved capabilities as they are different", buf, 0xCu);

      }
      objc_autoreleasePoolPop(v27);
    }
  }
  else
  {

  }
}

void __61__HMDHome__writeResidentCapabilities_accessoryUUID_homeUUID___block_invoke(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  void *v4;
  void *v5;
  id v6;
  NSObject *v7;
  void *v8;
  uint64_t v9;
  int v10;
  void *v11;
  __int16 v12;
  uint64_t v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  +[HMCContext findAppleMediaAccessoryWithModelID:](HMCContext, "findAppleMediaAccessoryWithModelID:", *(_QWORD *)(a1 + 32));
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = *(_QWORD *)(a1 + 40);
  objc_msgSend(v2, "resident");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "setResidentCapabilities:", v3);

  if (objc_msgSend(*(id *)(a1 + 48), "save"))
  {
    v5 = (void *)MEMORY[0x227676638]();
    v6 = *(id *)(a1 + 56);
    HMFGetOSLogHandle();
    v7 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      HMFGetLogIdentifier();
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      v9 = *(_QWORD *)(a1 + 32);
      v10 = 138543618;
      v11 = v8;
      v12 = 2112;
      v13 = v9;
      _os_log_impl(&dword_2218F0000, v7, OS_LOG_TYPE_DEFAULT, "%{public}@Aggregator: Saved resident capabilities for %@", (uint8_t *)&v10, 0x16u);

    }
    objc_autoreleasePoolPop(v5);
  }

}

void __62__HMDHome__writeAccessoryCapabilities_accessoryUUID_homeUUID___block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;
  id v4;
  NSObject *v5;
  void *v6;
  uint64_t v7;
  int v8;
  void *v9;
  __int16 v10;
  uint64_t v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  +[HMCContext findAppleMediaAccessoryWithModelID:](HMCContext, "findAppleMediaAccessoryWithModelID:", *(_QWORD *)(a1 + 32));
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "setAccessoryCapabilities:", *(_QWORD *)(a1 + 40));
  if (objc_msgSend(*(id *)(a1 + 48), "save"))
  {
    v3 = (void *)MEMORY[0x227676638]();
    v4 = *(id *)(a1 + 56);
    HMFGetOSLogHandle();
    v5 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      HMFGetLogIdentifier();
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      v7 = *(_QWORD *)(a1 + 32);
      v8 = 138543618;
      v9 = v6;
      v10 = 2112;
      v11 = v7;
      _os_log_impl(&dword_2218F0000, v5, OS_LOG_TYPE_DEFAULT, "%{public}@Aggregator: Saved accessory capabilities for %@", (uint8_t *)&v8, 0x16u);

    }
    objc_autoreleasePoolPop(v3);
  }

}

uint64_t __25__HMDHome_isMediaSystem___block_invoke(uint64_t a1, void *a2)
{
  void *v3;
  uint64_t v4;

  objc_msgSend(a2, "uuid");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "hmf_isEqualToUUID:", *(_QWORD *)(a1 + 32));

  return v4;
}

uint64_t __44__HMDHome_messageTargetForDeviceIdentifier___block_invoke(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  uint64_t v5;

  objc_msgSend(a2, "device");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "identifier");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v4, "hmf_isEqualToUUID:", *(_QWORD *)(a1 + 32));

  return v5;
}

uint64_t __62__HMDHome_routerServerUserAccessControlProviderForIdentifier___block_invoke(uint64_t a1, void *a2)
{
  void *v3;
  uint64_t v4;

  objc_msgSend(a2, "uuid");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "isEqual:", *(_QWORD *)(a1 + 32));

  return v4;
}

void __69__HMDHome_clientController_primaryClientConnectMessageFailWithError___block_invoke(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  NSObject *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  int v11;
  void *v12;
  __int16 v13;
  void *v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v3 = a2;
  v4 = (void *)MEMORY[0x227676638]();
  v5 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v6 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "trackingInfo");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "accessoryUUID");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v11 = 138543618;
    v12 = v7;
    v13 = 2112;
    v14 = v9;
    _os_log_impl(&dword_2218F0000, v6, OS_LOG_TYPE_INFO, "%{public}@Marking primary client connect message failed for accessory: %@", (uint8_t *)&v11, 0x16u);

  }
  objc_autoreleasePoolPop(v4);
  objc_msgSend(*(id *)(a1 + 32), "_hasConfirmedPrimaryResidentDevice");
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  if (v10)
    objc_msgSend(v3, "markEventRouterPrimaryClientConnectMessageFailedWithError:", *(_QWORD *)(a1 + 40));

}

void __54__HMDHome_clientController_connectionStatusDidChange___block_invoke(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  NSObject *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  int v11;
  void *v12;
  __int16 v13;
  void *v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v3 = a2;
  v4 = (void *)MEMORY[0x227676638]();
  v5 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v6 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "trackingInfo");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "accessoryUUID");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v11 = 138543618;
    v12 = v7;
    v13 = 2112;
    v14 = v9;
    _os_log_impl(&dword_2218F0000, v6, OS_LOG_TYPE_INFO, "%{public}@Marking primary client connection status changed for accessory: %@", (uint8_t *)&v11, 0x16u);

  }
  objc_autoreleasePoolPop(v4);
  objc_msgSend(*(id *)(a1 + 32), "_hasConfirmedPrimaryResidentDevice");
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  if (v10)
    objc_msgSend(v3, "markEventRouterPrimaryClientConnectStatusChanged:", *(unsigned __int8 *)(a1 + 40));

}

void __49__HMDHome__handleFetchLastModifiedServiceOfType___block_invoke(uint64_t a1, void *a2)
{
  id v3;
  id WeakRetained;
  void *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  id v10;
  void *v11;
  uint64_t v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  id v19;
  NSObject *v20;
  void *v21;
  void *v22;
  void *v23;
  id v24;
  NSObject *v25;
  void *v26;
  void *v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t i;
  id v33;
  void *v34;
  id v35;
  uint64_t v36;
  void *v37;
  id v38;
  NSObject *v39;
  void *v40;
  void *v41;
  void *v42;
  void *v43;
  void *v44;
  void *v45;
  BOOL v46;
  id v47;
  NSObject *v48;
  void *v49;
  void *v50;
  void *v51;
  void *v52;
  void *v53;
  void *context;
  uint64_t v55;
  void *v56;
  id v57;
  void *v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  _QWORD v63[2];
  _QWORD v64[2];
  uint8_t buf[4];
  void *v66;
  __int16 v67;
  void *v68;
  __int16 v69;
  void *v70;
  _BYTE v71[128];
  _QWORD v72[3];

  v72[1] = *MEMORY[0x24BDAC8D0];
  v3 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  if (objc_msgSend(v3, "count"))
  {
    objc_msgSend(v3, "hmf_UUIDForKey:", CFSTR("HMDAccessorySPIClientIdentifierKey"));
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "hmf_UUIDForKey:", CFSTR("HMDServiceSPIClientIdentifierKey"));
    v6 = objc_claimAutoreleasedReturnValue();
    v7 = (void *)v6;
    if (v5 && v6)
    {
      objc_msgSend(WeakRetained, "accessoryWithSPIClientIdentifier:", v5);
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0)
        v9 = v8;
      else
        v9 = 0;
      v10 = v9;

      if (v10)
      {
        objc_msgSend(v10, "identifiersForBridgedAccessories");
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        v12 = objc_msgSend(v11, "count");

        v55 = a1;
        v56 = WeakRetained;
        v57 = v10;
        v58 = v5;
        if (v12)
        {
          objc_msgSend(v10, "identifiersForBridgedAccessories");
          v13 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v13, "allObjects");
          v14 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(WeakRetained, "accessoriesWithUUIDs:", v14);
          v15 = (void *)objc_claimAutoreleasedReturnValue();

        }
        else
        {
          v72[0] = v10;
          objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", v72, 1);
          v15 = (void *)objc_claimAutoreleasedReturnValue();
        }
        v61 = 0u;
        v62 = 0u;
        v59 = 0u;
        v60 = 0u;
        v28 = v15;
        v29 = objc_msgSend(v28, "countByEnumeratingWithState:objects:count:", &v59, v71, 16);
        if (v29)
        {
          v30 = v29;
          v31 = *(_QWORD *)v60;
          while (2)
          {
            for (i = 0; i != v30; ++i)
            {
              if (*(_QWORD *)v60 != v31)
                objc_enumerationMutation(v28);
              v33 = *(id *)(*((_QWORD *)&v59 + 1) + 8 * i);
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0)
                v34 = v33;
              else
                v34 = 0;
              v35 = v34;

              if (v35)
              {
                objc_msgSend(v35, "serviceWithSPIClientIdentifier:", v7);
                v36 = objc_claimAutoreleasedReturnValue();
                if (v36)
                {
                  v42 = (void *)v36;

                  objc_msgSend(v42, "instanceID");
                  v43 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend(v33, "uuid");
                  v44 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend(v44, "UUIDString");
                  v45 = (void *)objc_claimAutoreleasedReturnValue();

                  if (v43)
                    v46 = v45 == 0;
                  else
                    v46 = 1;
                  if (v46)
                  {
                    context = (void *)MEMORY[0x227676638]();
                    WeakRetained = v56;
                    v47 = v56;
                    HMFGetOSLogHandle();
                    v48 = objc_claimAutoreleasedReturnValue();
                    if (os_log_type_enabled(v48, OS_LOG_TYPE_ERROR))
                    {
                      HMFGetLogIdentifier();
                      v53 = (void *)objc_claimAutoreleasedReturnValue();
                      *(_DWORD *)buf = 138543874;
                      v66 = v53;
                      v67 = 2112;
                      v68 = v43;
                      v69 = 2112;
                      v70 = v45;
                      _os_log_impl(&dword_2218F0000, v48, OS_LOG_TYPE_ERROR, "%{public}@Either service instanceID (%@) is nil or accessory UUID (%@) is nil", buf, 0x20u);

                    }
                    objc_autoreleasePoolPop(context);
                    v49 = v43;
                    v50 = *(void **)(v55 + 32);
                    objc_msgSend(MEMORY[0x24BDD1540], "hmErrorWithCode:", -1);
                    v52 = (void *)objc_claimAutoreleasedReturnValue();
                    v51 = v50;
                    v43 = v49;
                    objc_msgSend(v51, "respondWithError:", v52);
                  }
                  else
                  {
                    v63[0] = CFSTR("kServiceInstanceID");
                    v63[1] = CFSTR("kAccessoryUUID");
                    v64[0] = v43;
                    v64[1] = v45;
                    objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v64, v63, 2);
                    v52 = (void *)objc_claimAutoreleasedReturnValue();
                    objc_msgSend(*(id *)(v55 + 32), "respondWithPayload:", v52);
                    WeakRetained = v56;
                  }

                  goto LABEL_43;
                }

              }
            }
            v30 = objc_msgSend(v28, "countByEnumeratingWithState:objects:count:", &v59, v71, 16);
            if (v30)
              continue;
            break;
          }
        }

        v37 = (void *)MEMORY[0x227676638]();
        WeakRetained = v56;
        v38 = v56;
        HMFGetOSLogHandle();
        v39 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v39, OS_LOG_TYPE_ERROR))
        {
          HMFGetLogIdentifier();
          v40 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543618;
          v66 = v40;
          v67 = 2112;
          v68 = v7;
          _os_log_impl(&dword_2218F0000, v39, OS_LOG_TYPE_ERROR, "%{public}@Unable to find service with serviceSPIClientIdentifier %@", buf, 0x16u);

        }
        objc_autoreleasePoolPop(v37);
        v41 = *(void **)(v55 + 32);
        objc_msgSend(MEMORY[0x24BDD1540], "hmErrorWithCode:", -1);
        v33 = (id)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v41, "respondWithError:", v33);
LABEL_43:

        v10 = v57;
        v5 = v58;
      }
      else
      {
        v23 = (void *)MEMORY[0x227676638]();
        v24 = WeakRetained;
        HMFGetOSLogHandle();
        v25 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
        {
          HMFGetLogIdentifier();
          v26 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543618;
          v66 = v26;
          v67 = 2112;
          v68 = v5;
          _os_log_impl(&dword_2218F0000, v25, OS_LOG_TYPE_ERROR, "%{public}@Unable to find accessory with accessorySPIClientIdentifier %@", buf, 0x16u);

          v10 = 0;
        }

        objc_autoreleasePoolPop(v23);
        v27 = *(void **)(a1 + 32);
        objc_msgSend(MEMORY[0x24BDD1540], "hmErrorWithCode:", -1);
        v28 = (id)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v27, "respondWithError:", v28);
      }

    }
    else
    {
      v18 = (void *)MEMORY[0x227676638]();
      v19 = WeakRetained;
      HMFGetOSLogHandle();
      v20 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v20, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v21 = (void *)objc_claimAutoreleasedReturnValue();
        v22 = *(void **)(a1 + 40);
        *(_DWORD *)buf = 138543618;
        v66 = v21;
        v67 = 2112;
        v68 = v22;
        _os_log_impl(&dword_2218F0000, v20, OS_LOG_TYPE_INFO, "%{public}@Found no query results for last modified service of type: %@ ", buf, 0x16u);

      }
      objc_autoreleasePoolPop(v18);
      objc_msgSend(*(id *)(a1 + 32), "respondWithPayload:", MEMORY[0x24BDBD1B8]);
    }

  }
  else
  {
    v16 = *(void **)(a1 + 32);
    objc_msgSend(MEMORY[0x24BDD1540], "hmErrorWithCode:", 23);
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v16, "respondWithError:", v17);

  }
}

void __51__HMDHome_handleSwitchFromResidentSelectionToREV2___block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  int v8;
  id v9;
  void *v10;
  void *v11;
  id v12;
  NSObject *v13;
  void *v14;
  void *v15;
  id v16;
  NSObject *v17;
  void *v18;
  void *v19;
  void *v20;
  id v21;
  _QWORD v22[5];
  id v23;
  uint8_t buf[4];
  void *v25;
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  objc_msgSend(*(id *)(a1 + 32), "uuid");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  +[HMCContext findHomeWithModelID:](HMCContext, "findHomeWithModelID:", v2);
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithLong:", 2);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "setResidentSelectionVersion:", v4);

  objc_msgSend(v3, "residentSelections");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v22[0] = MEMORY[0x24BDAC760];
  v22[1] = 3221225472;
  v22[2] = __51__HMDHome_handleSwitchFromResidentSelectionToREV2___block_invoke_2;
  v22[3] = &unk_24E777010;
  v6 = *(void **)(a1 + 40);
  v22[4] = *(_QWORD *)(a1 + 32);
  v23 = v6;
  objc_msgSend(v5, "hmf_enumerateWithAutoreleasePoolUsingBlock:", v22);

  v7 = *(void **)(a1 + 40);
  v21 = 0;
  v8 = objc_msgSend(v7, "save:", &v21);
  v9 = v21;
  v10 = v9;
  if (v8)
  {
    v11 = (void *)MEMORY[0x227676638]();
    v12 = *(id *)(a1 + 32);
    HMFGetOSLogHandle();
    v13 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v25 = v14;
      _os_log_impl(&dword_2218F0000, v13, OS_LOG_TYPE_INFO, "%{public}@Finished removing Resident Selection models.", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v11);
    objc_msgSend(*(id *)(a1 + 48), "respondWithSuccess");
  }
  else if (v9)
  {
    v15 = (void *)MEMORY[0x227676638]();
    v16 = *(id *)(a1 + 32);
    HMFGetOSLogHandle();
    v17 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v25 = v18;
      _os_log_impl(&dword_2218F0000, v17, OS_LOG_TYPE_ERROR, "%{public}@Failed to remove Resident Selection models.", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v15);
    v19 = *(void **)(a1 + 48);
    objc_msgSend(MEMORY[0x24BDD1540], "hmfErrorWithCode:", 15);
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v19, "respondWithError:", v20);

  }
}

void __51__HMDHome_handleSwitchFromResidentSelectionToREV2___block_invoke_2(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  NSObject *v6;
  void *v7;
  id v8;
  void *v9;
  id v10;
  int v11;
  void *v12;
  __int16 v13;
  id v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v3 = a2;
  v4 = (void *)MEMORY[0x227676638]();
  v5 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v6 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v11 = 138543618;
    v12 = v7;
    v13 = 2112;
    v14 = v3;
    _os_log_impl(&dword_2218F0000, v6, OS_LOG_TYPE_INFO, "%{public}@Deleting: %@", (uint8_t *)&v11, 0x16u);

  }
  objc_autoreleasePoolPop(v4);
  v8 = v3;
  if (objc_msgSend(v8, "conformsToProtocol:", &unk_255772890))
    v9 = v8;
  else
    v9 = 0;
  v10 = v9;

  objc_msgSend(*(id *)(a1 + 40), "deleteObject:", v10);
}

id __41__HMDHome_destinationForEnabledResidents__block_invoke(uint64_t a1, void *a2)
{
  id v2;
  void *v3;
  char v4;
  void *v5;

  v2 = a2;
  objc_msgSend(v2, "device");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "isCurrentDevice");

  if ((v4 & 1) != 0)
  {
    v5 = 0;
  }
  else
  {
    objc_msgSend(v2, "device");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
  }

  return v5;
}

void __42__HMDHome_handleXPCConnectionInvalidated___block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;
  id v4;
  void *v5;
  void *v6;
  int v7;
  void *v8;
  id v9;
  NSObject *v10;
  void *v11;
  void *v12;
  void *v13;
  id v14;
  NSObject *v15;
  void *v16;
  void *v17;
  int v18;
  void *v19;
  __int16 v20;
  void *v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  objc_msgSend(*(id *)(a1 + 32), "object");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v3 = v2;
  else
    v3 = 0;
  v4 = v3;

  if (v4)
  {
    objc_msgSend(*(id *)(a1 + 40), "_removeConnectionFromConnectionsDiscoveringSymptomsForNearbyDevices:", v4);
    objc_msgSend(*(id *)(a1 + 40), "deviceHomeKitSetupSession");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "clientConnection");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v7 = HMFEqualObjects();

    if (v7)
    {
      v8 = (void *)MEMORY[0x227676638]();
      v9 = *(id *)(a1 + 40);
      HMFGetOSLogHandle();
      v10 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v4, "shortDescription");
        v12 = (void *)objc_claimAutoreleasedReturnValue();
        v18 = 138543618;
        v19 = v11;
        v20 = 2112;
        v21 = v12;
        _os_log_impl(&dword_2218F0000, v10, OS_LOG_TYPE_INFO, "%{public}@Client connection %@ is invalidated, removing device HomeKit setup session", (uint8_t *)&v18, 0x16u);

      }
      objc_autoreleasePoolPop(v8);
      objc_msgSend(*(id *)(a1 + 40), "setDeviceHomeKitSetupSession:", 0);
    }
  }
  else
  {
    v13 = (void *)MEMORY[0x227676638]();
    v14 = *(id *)(a1 + 40);
    HMFGetOSLogHandle();
    v15 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      v17 = *(void **)(a1 + 32);
      v18 = 138543618;
      v19 = v16;
      v20 = 2112;
      v21 = v17;
      _os_log_impl(&dword_2218F0000, v15, OS_LOG_TYPE_ERROR, "%{public}@Received connection invalidated notification, but no connection object was found: %@", (uint8_t *)&v18, 0x16u);

    }
    objc_autoreleasePoolPop(v13);
  }

}

void __59__HMDHome_userAssistantAccessControlDidUpdate_accessories___block_invoke(uint64_t a1)
{
  id v2;

  objc_msgSend(*(id *)(a1 + 32), "mediaSystemController");
  v2 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "_userAssistantAccessControlDidUpdate:accessories:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));

}

id __28__HMDHome_cameraAccessories__block_invoke(uint64_t a1, void *a2)
{
  id v2;
  void *v3;
  id v4;
  void *v5;
  uint64_t v6;
  id v7;

  v2 = a2;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v3 = v2;
  else
    v3 = 0;
  v4 = v3;
  objc_msgSend(v4, "cameraProfiles");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend(v5, "count");

  if (v6)
    v7 = v4;
  else
    v7 = 0;

  return v7;
}

uint64_t __50__HMDHome_hapAccessoriesForLegacyDataBlobEncoding__block_invoke()
{
  return 1;
}

uint64_t __28__HMDHome_matterAccessories__block_invoke(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "supportsCHIP");
}

void __39__HMDHome__handleMediaPropertiesWrite___block_invoke(uint64_t a1, void *a2)
{
  id v3;
  id WeakRetained;
  void *v5;
  id v6;
  NSObject *v7;
  void *v8;
  void (**v9)(_QWORD, _QWORD, _QWORD);
  void *v10;
  int v11;
  void *v12;
  __int16 v13;
  id v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v3 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    v5 = (void *)MEMORY[0x227676638]();
    v6 = WeakRetained;
    HMFGetOSLogHandle();
    v7 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
    {
      HMFGetLogIdentifier();
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      v11 = 138543618;
      v12 = v8;
      v13 = 2112;
      v14 = v3;
      _os_log_impl(&dword_2218F0000, v7, OS_LOG_TYPE_DEBUG, "%{public}@Responding to media write with %@", (uint8_t *)&v11, 0x16u);

    }
    objc_autoreleasePoolPop(v5);
    objc_msgSend(*(id *)(a1 + 32), "responseHandler");
    v9 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
    ((void (**)(_QWORD, _QWORD, id))v9)[2](v9, 0, v3);
  }
  else
  {
    objc_msgSend(*(id *)(a1 + 32), "responseHandler");
    v9 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD1540], "hmErrorWithCode:", 4);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    ((void (**)(_QWORD, void *, _QWORD))v9)[2](v9, v10, 0);

  }
}

void __79__HMDHome__handleWriteMediaProperties_source_requestMessage_completionHandler___block_invoke(id *a1, void *a2)
{
  id v3;
  id WeakRetained;
  void *v5;
  NSObject *v6;
  _QWORD block[4];
  id v8;
  id v9;
  id v10;

  v3 = a2;
  WeakRetained = objc_loadWeakRetained(a1 + 6);
  v5 = WeakRetained;
  if (WeakRetained)
  {
    objc_msgSend(WeakRetained, "workQueue");
    v6 = objc_claimAutoreleasedReturnValue();
    block[0] = MEMORY[0x24BDAC760];
    block[1] = 3221225472;
    block[2] = __79__HMDHome__handleWriteMediaProperties_source_requestMessage_completionHandler___block_invoke_2;
    block[3] = &unk_24E79BBD0;
    v8 = a1[4];
    v9 = v3;
    v10 = a1[5];
    dispatch_async(v6, block);

  }
}

void __79__HMDHome__handleWriteMediaProperties_source_requestMessage_completionHandler___block_invoke_3(uint64_t a1)
{
  uint64_t v1;
  id v2;

  v1 = *(_QWORD *)(a1 + 40);
  if (v1)
  {
    v2 = (id)objc_msgSend(*(id *)(a1 + 32), "copy");
    (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);

  }
}

void __79__HMDHome__handleWriteMediaProperties_source_requestMessage_completionHandler___block_invoke_2(uint64_t a1)
{
  void *v2;
  void *v3;

  v2 = *(void **)(a1 + 32);
  +[HMDMediaPropertyResponse serializeResponses:](HMDMediaPropertyResponse, "serializeResponses:", *(_QWORD *)(a1 + 40));
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "addEntriesFromDictionary:", v3);

  dispatch_group_leave(*(dispatch_group_t *)(a1 + 48));
}

void __61__HMDHome_redispatchMediaWriteRequests_viaDevice_completion___block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id WeakRetained;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  void *v11;
  _QWORD v12[2];

  v12[1] = *MEMORY[0x24BDAC8D0];
  v5 = a2;
  v6 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  if (WeakRetained)
  {
    v8 = *(_QWORD *)(a1 + 40);
    if (v5)
    {
      if (v8)
      {
        +[HMDMediaPropertyResponse propertyResponsesFromRequests:error:](HMDMediaPropertyResponse, "propertyResponsesFromRequests:error:", *(_QWORD *)(a1 + 32), v5);
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        v10 = *(_QWORD *)(a1 + 40);
        v12[0] = v9;
        objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", v12, 1);
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        (*(void (**)(uint64_t, void *))(v10 + 16))(v10, v11);

LABEL_7:
      }
    }
    else if (v8)
    {
      +[HMDMediaPropertyResponse responsesFromSerializedResponse:requests:home:](HMDMediaPropertyResponse, "responsesFromSerializedResponse:requests:home:", v6, *(_QWORD *)(a1 + 32), WeakRetained);
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
      goto LABEL_7;
    }
  }

}

void __38__HMDHome__handleMediaPropertiesRead___block_invoke(uint64_t a1, void *a2)
{
  id v3;
  id WeakRetained;
  void *v5;
  id v6;
  NSObject *v7;
  void *v8;
  void *v9;
  void *v10;
  int v11;
  void *v12;
  __int16 v13;
  id v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v3 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    v5 = (void *)MEMORY[0x227676638]();
    v6 = WeakRetained;
    HMFGetOSLogHandle();
    v7 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
    {
      HMFGetLogIdentifier();
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      v11 = 138543618;
      v12 = v8;
      v13 = 2112;
      v14 = v3;
      _os_log_impl(&dword_2218F0000, v7, OS_LOG_TYPE_DEBUG, "%{public}@Responding to media read with %@", (uint8_t *)&v11, 0x16u);

    }
    objc_autoreleasePoolPop(v5);
    objc_msgSend(*(id *)(a1 + 32), "respondWithPayload:", v3);
  }
  else
  {
    v9 = *(void **)(a1 + 32);
    objc_msgSend(MEMORY[0x24BDD1540], "hmErrorWithCode:", 20);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "respondWithError:", v10);

  }
}

void __71__HMDHome__handleReadMediaProperties_source_message_completionHandler___block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;

  v2 = *(void **)(a1 + 32);
  +[HMDMediaPropertyResponse serializeResponses:](HMDMediaPropertyResponse, "serializeResponses:", *(_QWORD *)(a1 + 40));
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "addEntriesFromDictionary:", v3);

  dispatch_group_leave(*(dispatch_group_t *)(a1 + 48));
}

void __71__HMDHome__handleReadMediaProperties_source_message_completionHandler___block_invoke_1658(id *a1, void *a2)
{
  id v3;
  id WeakRetained;
  void *v5;
  NSObject *v6;
  _QWORD block[4];
  id v8;
  id v9;
  id v10;

  v3 = a2;
  WeakRetained = objc_loadWeakRetained(a1 + 6);
  v5 = WeakRetained;
  if (WeakRetained)
  {
    objc_msgSend(WeakRetained, "workQueue");
    v6 = objc_claimAutoreleasedReturnValue();
    block[0] = MEMORY[0x24BDAC760];
    block[1] = 3221225472;
    block[2] = __71__HMDHome__handleReadMediaProperties_source_message_completionHandler___block_invoke_2;
    block[3] = &unk_24E79BBD0;
    v8 = a1[5];
    v9 = v3;
    v10 = a1[4];
    dispatch_async(v6, block);

  }
  else
  {
    dispatch_group_leave((dispatch_group_t)a1[4]);
  }

}

void __71__HMDHome__handleReadMediaProperties_source_message_completionHandler___block_invoke_3(uint64_t a1)
{
  uint64_t v1;
  id v2;

  v1 = *(_QWORD *)(a1 + 40);
  if (v1)
  {
    v2 = (id)objc_msgSend(*(id *)(a1 + 32), "copy");
    (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);

  }
}

void __71__HMDHome__handleReadMediaProperties_source_message_completionHandler___block_invoke_2(uint64_t a1)
{
  void *v2;
  void *v3;

  v2 = *(void **)(a1 + 32);
  +[HMDMediaPropertyResponse serializeResponses:](HMDMediaPropertyResponse, "serializeResponses:", *(_QWORD *)(a1 + 40));
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "addEntriesFromDictionary:", v3);

  dispatch_group_leave(*(dispatch_group_t *)(a1 + 48));
}

void __60__HMDHome_redispatchMediaReadRequests_viaDevice_completion___block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id WeakRetained;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  void *v11;
  _QWORD v12[2];

  v12[1] = *MEMORY[0x24BDAC8D0];
  v5 = a2;
  v6 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  if (WeakRetained)
  {
    v8 = *(_QWORD *)(a1 + 40);
    if (v5)
    {
      if (v8)
      {
        +[HMDMediaPropertyResponse propertyResponsesFromRequests:error:](HMDMediaPropertyResponse, "propertyResponsesFromRequests:error:", *(_QWORD *)(a1 + 32), v5);
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        v10 = *(_QWORD *)(a1 + 40);
        v12[0] = v9;
        objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", v12, 1);
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        (*(void (**)(uint64_t, void *))(v10 + 16))(v10, v11);

LABEL_7:
      }
    }
    else if (v8)
    {
      +[HMDMediaPropertyResponse responsesFromSerializedResponse:requests:home:](HMDMediaPropertyResponse, "responsesFromSerializedResponse:requests:home:", v6, *(_QWORD *)(a1 + 32), WeakRetained);
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
      goto LABEL_7;
    }
  }

}

uint64_t __43__HMDHome_mediaSessionStateWithIdentifier___block_invoke(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  void *v6;

  v3 = a2;
  objc_msgSend(v3, "sessionIdentifier");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  if ((objc_msgSend(v4, "isEqualToString:", *(_QWORD *)(a1 + 32)) & 1) != 0)
  {
    v5 = 1;
  }
  else
  {
    objc_msgSend(v3, "sessionIdentifier");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v5 = objc_msgSend(v6, "isEqualToString:", *(_QWORD *)(a1 + 40));

  }
  return v5;
}

_DWORD *__32__HMDHome__registerStateHandler__block_invoke(uint64_t a1, uint64_t a2)
{
  id WeakRetained;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  _DWORD *StateData;

  if (*(_DWORD *)(a2 + 16) != 3)
    return 0;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v3 = (void *)objc_msgSend(objc_alloc(MEMORY[0x24BE3F200]), "initWithName:", CFSTR("os-state-home"));
    objc_msgSend(WeakRetained, "dumpState");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    v5 = (void *)MEMORY[0x24BDD17C8];
    objc_msgSend(WeakRetained, "uuid");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "UUIDString");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "stringWithFormat:", CFSTR("HomeKit Home State %@"), v7);
    v8 = (void *)objc_claimAutoreleasedReturnValue();

    StateData = createStateData(v8, (uint64_t)v4);
  }
  else
  {
    StateData = 0;
  }

  return StateData;
}

uint64_t __44__HMDHome_backingStoreObjects_hh2Migration___block_invoke(uint64_t a1, void *a2)
{
  void *v2;
  id v3;
  void *v4;
  uint64_t v5;

  v2 = *(void **)(a1 + 32);
  v3 = a2;
  objc_msgSend(v2, "user");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v4, "isEqual:", v3);

  return v5;
}

uint64_t __36__HMDHome_updateROARStatus_message___block_invoke(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "setHomeUpdatedToROARAndInformClients");
}

uint64_t __56__HMDHome_updateNetworkRouterSettingsWithModel_message___block_invoke(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_addTransactionForMinimumNetworkRouterHomeKitVersion:message:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
}

void __49__HMDHome__remoteAccessHealthMonitorTimerDidFire__block_invoke(uint64_t a1, void *a2)
{
  id WeakRetained;
  void *v4;
  void *v5;
  id v6;

  v6 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    if (v6)
    {
      objc_msgSend(v6, "userInfo");
      v4 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "objectForKeyedSubscript:", *MEMORY[0x24BDD1398]);
      v5 = (void *)objc_claimAutoreleasedReturnValue();

      objc_msgSend(WeakRetained, "_handleResponseForElectMessageToResident:error:", *(_QWORD *)(a1 + 32), v5);
    }
    else
    {
      objc_msgSend(WeakRetained, "_handleResponseForElectMessageToResident:error:", *(_QWORD *)(a1 + 32), 0);
    }
  }

}

uint64_t __48__HMDHome_remoteAccessHealthMonitorTimerDidFire__block_invoke(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_remoteAccessHealthMonitorTimerDidFire");
}

void __52__HMDHome_handleDidReceiveIDSMessageWithNoListener___block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  id v5;

  objc_msgSend(*(id *)(a1 + 32), "userInfo");
  v2 = (void *)objc_claimAutoreleasedReturnValue();

  if (v2)
  {
    objc_msgSend(*(id *)(a1 + 32), "userInfo");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "hmf_stringForKey:", CFSTR("kIDSMessageSourceIDKey"));
    v5 = (id)objc_claimAutoreleasedReturnValue();

    v4 = v5;
    if (v5)
    {
      objc_msgSend(*(id *)(a1 + 40), "_handleDidReceiveIDSMessageWithNoListenerFromAddress:", v5);
      v4 = v5;
    }

  }
}

void __38__HMDHome_handleActiveAccountChanged___block_invoke(uint64_t a1)
{
  __updateAccountHandleForCurrentUser(*(void **)(a1 + 32), *(void **)(a1 + 40));
}

void __54__HMDHome_handleCurrentAccountMergeIdentifierUpdated___block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;
  id v4;
  void *v5;
  void *v6;
  int v7;
  void *v8;
  uint64_t v9;
  void *v10;
  void *v11;
  void *v12;
  char v13;
  void *v14;
  void *v15;
  id v16;
  uint64_t v17;
  id v18;
  void *v19;
  id v20;
  NSObject *v21;
  void *v22;
  const char *v23;
  NSObject *v24;
  os_log_type_t v25;
  _QWORD v26[4];
  id v27;
  id v28;
  id v29;
  uint64_t v30;
  uint8_t buf[4];
  void *v32;
  uint64_t v33;

  v33 = *MEMORY[0x24BDAC8D0];
  objc_msgSend(*(id *)(a1 + 32), "object");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v3 = v2;
  else
    v3 = 0;
  v4 = v3;

  if (objc_msgSend(*(id *)(a1 + 40), "isOwnerUser"))
  {
    +[HMDAppleAccountManager sharedManager](HMDAppleAccountManager, "sharedManager");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "account");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v7 = objc_msgSend(v4, "isEqualToAccount:", v6);

    if (v7)
    {
      objc_msgSend(*(id *)(a1 + 40), "currentUser");
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      if (v8)
      {
        objc_msgSend(v4, "senderCorrelationIdentifier");
        v9 = objc_claimAutoreleasedReturnValue();
        if (!v9)
          goto LABEL_16;
        v10 = (void *)v9;
        objc_msgSend(v4, "senderCorrelationIdentifier");
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v8, "mergeIdentifier");
        v12 = (void *)objc_claimAutoreleasedReturnValue();
        v13 = HMFEqualObjects();

        if ((v13 & 1) != 0)
          goto LABEL_16;
        if (!objc_msgSend(*(id *)(a1 + 40), "hasAnyResident")
          || (objc_msgSend(*(id *)(a1 + 40), "isCurrentDevicePrimaryResident") & 1) != 0)
        {
          objc_msgSend(*(id *)(a1 + 40), "backingStore");
          v14 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v14, "context");
          v15 = (void *)objc_claimAutoreleasedReturnValue();

          v26[0] = MEMORY[0x24BDAC760];
          v26[1] = 3221225472;
          v26[2] = __54__HMDHome_handleCurrentAccountMergeIdentifierUpdated___block_invoke_1558;
          v26[3] = &unk_24E79A910;
          v27 = v8;
          v28 = v15;
          v16 = v4;
          v17 = *(_QWORD *)(a1 + 40);
          v29 = v16;
          v30 = v17;
          v18 = v15;
          objc_msgSend(v18, "unsafeSynchronousBlock:", v26);

LABEL_16:
          goto LABEL_17;
        }
        v19 = (void *)MEMORY[0x227676638]();
        v20 = *(id *)(a1 + 40);
        HMFGetOSLogHandle();
        v21 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
        {
          HMFGetLogIdentifier();
          v22 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543362;
          v32 = v22;
          v23 = "%{public}@Skip updating owner user with mergeID since this device is not the primary resident";
          v24 = v21;
          v25 = OS_LOG_TYPE_INFO;
          goto LABEL_14;
        }
      }
      else
      {
        v19 = (void *)MEMORY[0x227676638]();
        v20 = *(id *)(a1 + 40);
        HMFGetOSLogHandle();
        v21 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
        {
          HMFGetLogIdentifier();
          v22 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543362;
          v32 = v22;
          v23 = "%{public}@Home does not currently have a user account. Not attempting to update mergeID.";
          v24 = v21;
          v25 = OS_LOG_TYPE_ERROR;
LABEL_14:
          _os_log_impl(&dword_2218F0000, v24, v25, v23, buf, 0xCu);

        }
      }

      objc_autoreleasePoolPop(v19);
      goto LABEL_16;
    }
  }
LABEL_17:

}

void __54__HMDHome_handleCurrentAccountMergeIdentifierUpdated___block_invoke_1558(id *a1)
{
  void *v2;
  uint64_t v3;
  void *v4;
  void *v5;
  id v6;
  id v7;
  void *v8;
  id v9;
  NSObject *v10;
  void *v11;
  id v12;
  uint8_t buf[4];
  void *v14;
  __int16 v15;
  id v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  objc_msgSend(a1[4], "uuid");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(a1[5], "managedObjectContext");
  v3 = objc_claimAutoreleasedReturnValue();
  +[_MKFHome findHomeMemberWithUUID:context:](_MKFHome, "findHomeMemberWithUUID:context:", v2, v3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(a1[6], "senderCorrelationIdentifier");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "setIdsMergeIdentifier:", v5);

  v6 = a1[5];
  v12 = 0;
  LOBYTE(v3) = objc_msgSend(v6, "save:", &v12);
  v7 = v12;
  if ((v3 & 1) == 0)
  {
    v8 = (void *)MEMORY[0x227676638]();
    v9 = a1[7];
    HMFGetOSLogHandle();
    v10 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v14 = v11;
      v15 = 2112;
      v16 = v7;
      _os_log_impl(&dword_2218F0000, v10, OS_LOG_TYPE_ERROR, "%{public}@Failed to update mergeID for owner: %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v8);
  }

}

void __39__HMDHome_handleAccountHandlesUpdated___block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  int v6;
  id v7;

  objc_msgSend(*(id *)(a1 + 32), "object");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v3 = v2;
  else
    v3 = 0;
  v7 = v3;

  +[HMDAppleAccountManager sharedManager](HMDAppleAccountManager, "sharedManager");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "account");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend(v7, "isEqualToAccount:", v5);

  if (v6)
    __updateAccountHandleForCurrentUser(*(void **)(a1 + 40), v7);

}

void __54__HMDHome_removeUnconfiguredResidentDeviceWithUserID___block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;
  id v4;

  objc_msgSend(*(id *)(a1 + 32), "unconfiguredResidentDevices");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "hmf_firstObjectWithValue:forKeyPath:", *(_QWORD *)(a1 + 40), CFSTR("userID"));
  v4 = (id)objc_claimAutoreleasedReturnValue();

  if (v4)
  {
    objc_msgSend(v4, "setConfigurationState:", 2);
    objc_msgSend(*(id *)(a1 + 32), "unconfiguredResidentDevices");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "removeObject:", v4);

  }
}

void __41__HMDHome_addUnconfiguredResidentDevice___block_invoke(uint64_t a1)
{
  HMDResidentUser *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  int v14;
  void *v15;
  id v16;
  NSObject *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  id v22;
  NSObject *v23;
  void *v24;
  void *v25;
  const char *v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  uint8_t v35[128];
  uint8_t buf[4];
  void *v37;
  __int16 v38;
  void *v39;
  _BYTE v40[128];
  uint64_t v41;

  v41 = *MEMORY[0x24BDAC8D0];
  v31 = 0u;
  v32 = 0u;
  v33 = 0u;
  v34 = 0u;
  objc_msgSend(*(id *)(a1 + 32), "unconfiguredResidentDevices");
  v2 = (HMDResidentUser *)objc_claimAutoreleasedReturnValue();
  v3 = -[HMDResidentUser countByEnumeratingWithState:objects:count:](v2, "countByEnumeratingWithState:objects:count:", &v31, v40, 16);
  if (v3)
  {
    v4 = v3;
    v5 = *(_QWORD *)v32;
LABEL_3:
    v6 = 0;
    while (1)
    {
      if (*(_QWORD *)v32 != v5)
        objc_enumerationMutation(v2);
      objc_msgSend(*(id *)(*((_QWORD *)&v31 + 1) + 8 * v6), "device");
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      v8 = objc_msgSend(v7, "isEqual:", *(_QWORD *)(a1 + 40));

      if (v8)
        break;
      if (v4 == ++v6)
      {
        v4 = -[HMDResidentUser countByEnumeratingWithState:objects:count:](v2, "countByEnumeratingWithState:objects:count:", &v31, v40, 16);
        if (v4)
          goto LABEL_3;
        goto LABEL_9;
      }
    }
    v21 = (void *)MEMORY[0x227676638]();
    v22 = *(id *)(a1 + 32);
    HMFGetOSLogHandle();
    v23 = objc_claimAutoreleasedReturnValue();
    if (!os_log_type_enabled(v23, OS_LOG_TYPE_INFO))
      goto LABEL_25;
    HMFGetLogIdentifier();
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 40), "shortDescription");
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543618;
    v37 = v24;
    v38 = 2112;
    v39 = v25;
    v26 = "%{public}@Not adding resident device, %@, to unconfigured list since it already exists";
  }
  else
  {
LABEL_9:

    v29 = 0u;
    v30 = 0u;
    v27 = 0u;
    v28 = 0u;
    objc_msgSend(*(id *)(a1 + 32), "_residentUsers", 0);
    v2 = (HMDResidentUser *)objc_claimAutoreleasedReturnValue();
    v9 = -[HMDResidentUser countByEnumeratingWithState:objects:count:](v2, "countByEnumeratingWithState:objects:count:", &v27, v35, 16);
    if (!v9)
    {
LABEL_17:

      v15 = (void *)MEMORY[0x227676638]();
      v16 = *(id *)(a1 + 32);
      HMFGetOSLogHandle();
      v17 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v18 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(*(id *)(a1 + 40), "shortDescription");
        v19 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        v37 = v18;
        v38 = 2112;
        v39 = v19;
        _os_log_impl(&dword_2218F0000, v17, OS_LOG_TYPE_INFO, "%{public}@Adding resident device, %@, to unconfigured list and posting notification", buf, 0x16u);

      }
      objc_autoreleasePoolPop(v15);
      v2 = -[HMDResidentUser initWithDevice:home:pairingIdentity:configurationState:]([HMDResidentUser alloc], "initWithDevice:home:pairingIdentity:configurationState:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32), 0, 1);
      objc_msgSend(*(id *)(a1 + 32), "unconfiguredResidentDevices");
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v20, "addObject:", v2);

      -[HMDUser setHome:](v2, "setHome:", *(_QWORD *)(a1 + 32));
      objc_msgSend(*(id *)(a1 + 32), "_configureUnconfiguredResident:desiredConfigState:", v2, 2);
      goto LABEL_26;
    }
    v10 = v9;
    v11 = *(_QWORD *)v28;
LABEL_11:
    v12 = 0;
    while (1)
    {
      if (*(_QWORD *)v28 != v11)
        objc_enumerationMutation(v2);
      objc_msgSend(*(id *)(*((_QWORD *)&v27 + 1) + 8 * v12), "device");
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      v14 = objc_msgSend(v13, "isEqual:", *(_QWORD *)(a1 + 40));

      if (v14)
        break;
      if (v10 == ++v12)
      {
        v10 = -[HMDResidentUser countByEnumeratingWithState:objects:count:](v2, "countByEnumeratingWithState:objects:count:", &v27, v35, 16);
        if (v10)
          goto LABEL_11;
        goto LABEL_17;
      }
    }
    v21 = (void *)MEMORY[0x227676638]();
    v22 = *(id *)(a1 + 32);
    HMFGetOSLogHandle();
    v23 = objc_claimAutoreleasedReturnValue();
    if (!os_log_type_enabled(v23, OS_LOG_TYPE_INFO))
      goto LABEL_25;
    HMFGetLogIdentifier();
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 40), "shortDescription");
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543618;
    v37 = v24;
    v38 = 2112;
    v39 = v25;
    v26 = "%{public}@Not adding resident device, %@, to unconfigured list since it already exists in users";
  }
  _os_log_impl(&dword_2218F0000, v23, OS_LOG_TYPE_INFO, v26, buf, 0x16u);

LABEL_25:
  objc_autoreleasePoolPop(v21);
LABEL_26:

}

void __57__HMDHome_notifyClientsOfReachabilityUpdateForAccessory___block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;
  _BOOL4 v4;
  void *v5;
  id v6;
  NSObject *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  void *v11;
  id v12;
  NSObject *v13;
  void *v14;
  void *v15;
  void *v16;
  int v17;
  void *v18;
  __int16 v19;
  void *v20;
  __int16 v21;
  void *v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  objc_msgSend(*(id *)(a1 + 32), "uuid");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "UUIDString");
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  if (v3)
  {
    os_unfair_recursive_lock_lock_with_options();
    if ((objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 112), "containsObject:", v3) & 1) != 0)
    {
      v4 = 0;
    }
    else
    {
      objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 112), "addObject:", v3);
      v4 = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 112), "count") == 1;
    }
    v10 = os_unfair_recursive_lock_unlock();
    v11 = (void *)MEMORY[0x227676638](v10);
    v12 = *(id *)(a1 + 40);
    HMFGetOSLogHandle();
    v13 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(*(id *)(a1 + 32), "shortDescription");
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      HMFBooleanToString();
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      v17 = 138543874;
      v18 = v14;
      v19 = 2112;
      v20 = v15;
      v21 = 2112;
      v22 = v16;
      _os_log_impl(&dword_2218F0000, v13, OS_LOG_TYPE_INFO, "%{public}@Queuing up reachability update for accessory %@. Started timer: %@", (uint8_t *)&v17, 0x20u);

    }
    objc_autoreleasePoolPop(v11);
    if (v4)
      objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 104), "resume");
  }
  else
  {
    v5 = (void *)MEMORY[0x227676638]();
    v6 = *(id *)(a1 + 40);
    HMFGetOSLogHandle();
    v7 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      v9 = *(void **)(a1 + 32);
      v17 = 138543618;
      v18 = v8;
      v19 = 2112;
      v20 = v9;
      _os_log_impl(&dword_2218F0000, v7, OS_LOG_TYPE_ERROR, "%{public}@Attempt to queue reachability update for accessory with no UUID - %@", (uint8_t *)&v17, 0x16u);

    }
    objc_autoreleasePoolPop(v5);
  }

}

- (void)_subscribeForHomeNotificationsOnDirectTransports:(void *)a1
{
  int v2;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  id v8;
  NSObject *v9;
  void *v10;
  void *v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t i;
  uint64_t v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  id v22;
  void *v23;
  id v24;
  NSObject *v25;
  void *v26;
  void *v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t j;
  uint64_t v33;
  void *v34;
  void *v35;
  void *v36;
  id v37;
  void *v38;
  id v39;
  void *v40;
  id v41;
  NSObject *v42;
  void *v43;
  void *v44;
  void *v45;
  int v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  _BYTE v55[128];
  uint8_t v56[128];
  uint8_t buf[4];
  void *v58;
  __int16 v59;
  void *v60;
  uint64_t v61;

  v61 = *MEMORY[0x24BDAC8D0];
  if (a1)
  {
    v2 = a2;
    objc_msgSend(a1, "_characteristicNotificationPayloadsOnDirectTransports:", a2);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "objectAtIndex:", 0);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "objectAtIndex:", 1);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v5, "count") || objc_msgSend(v6, "count"))
    {
      if (objc_msgSend(v5, "count"))
      {
        v7 = (void *)MEMORY[0x227676638]();
        v8 = a1;
        HMFGetOSLogHandle();
        v9 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
        {
          HMFGetLogIdentifier();
          v10 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v5, "shortDescription");
          v11 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543618;
          v58 = v10;
          v59 = 2112;
          v60 = v11;
          _os_log_impl(&dword_2218F0000, v9, OS_LOG_TYPE_DEBUG, "%{public}@Deregistering notifications %@ with direct transports", buf, 0x16u);

        }
        objc_autoreleasePoolPop(v7);
      }
      v46 = v2;
      v45 = v6;
      v53 = 0u;
      v54 = 0u;
      v51 = 0u;
      v52 = 0u;
      v44 = v5;
      v12 = v5;
      v13 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v51, v56, 16);
      if (v13)
      {
        v14 = v13;
        v15 = *(_QWORD *)v52;
        do
        {
          for (i = 0; i != v14; ++i)
          {
            if (*(_QWORD *)v52 != v15)
              objc_enumerationMutation(v12);
            v17 = *(_QWORD *)(*((_QWORD *)&v51 + 1) + 8 * i);
            objc_msgSend(v12, "objectForKey:", v17, v44);
            v18 = (void *)objc_claimAutoreleasedReturnValue();
            v19 = (void *)objc_msgSend(objc_alloc(MEMORY[0x24BDD1880]), "initWithUUIDString:", v17);
            objc_msgSend(a1, "accessoryWithUUID:", v19);
            v20 = (void *)objc_claimAutoreleasedReturnValue();

            objc_opt_class();
            if ((objc_opt_isKindOfClass() & 1) != 0)
              v21 = v20;
            else
              v21 = 0;
            v22 = v21;

            objc_msgSend(v22, "enableNotification:forCharacteristics:message:clientIdentifier:", 0, v18, 0, CFSTR("com.apple.HomeKitDaemon.homeNotifications"));
          }
          v14 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v51, v56, 16);
        }
        while (v14);
      }

      if (objc_msgSend(v45, "count"))
      {
        v23 = (void *)MEMORY[0x227676638]();
        v24 = a1;
        HMFGetOSLogHandle();
        v25 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v25, OS_LOG_TYPE_DEBUG))
        {
          HMFGetLogIdentifier();
          v26 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v45, "shortDescription");
          v27 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543618;
          v58 = v26;
          v59 = 2112;
          v60 = v27;
          _os_log_impl(&dword_2218F0000, v25, OS_LOG_TYPE_DEBUG, "%{public}@Registering notifications %@ with direct transports", buf, 0x16u);

        }
        objc_autoreleasePoolPop(v23);
      }
      v49 = 0u;
      v50 = 0u;
      v47 = 0u;
      v48 = 0u;
      v28 = v45;
      v29 = objc_msgSend(v28, "countByEnumeratingWithState:objects:count:", &v47, v55, 16);
      v5 = v44;
      if (v29)
      {
        v30 = v29;
        v31 = *(_QWORD *)v48;
        do
        {
          for (j = 0; j != v30; ++j)
          {
            if (*(_QWORD *)v48 != v31)
              objc_enumerationMutation(v28);
            v33 = *(_QWORD *)(*((_QWORD *)&v47 + 1) + 8 * j);
            objc_msgSend(v28, "objectForKey:", v33, v44);
            v34 = (void *)objc_claimAutoreleasedReturnValue();
            v35 = (void *)objc_msgSend(objc_alloc(MEMORY[0x24BDD1880]), "initWithUUIDString:", v33);
            objc_msgSend(a1, "accessoryWithUUID:", v35);
            v36 = (void *)objc_claimAutoreleasedReturnValue();

            v37 = v36;
            objc_opt_class();
            if ((objc_opt_isKindOfClass() & 1) != 0)
              v38 = v37;
            else
              v38 = 0;
            v39 = v38;

            if (v39)
            {
              if (v46)
                objc_msgSend(v39, "enableNotification:forCharacteristics:message:clientIdentifier:", 1, v34, 0, CFSTR("com.apple.HomeKitDaemon.homeNotifications"));
              else
                objc_msgSend(v39, "updateNotificationEnabled:forCharacteristics:onBehalfOf:", 0, v34, CFSTR("com.apple.HomeKitDaemon.homeNotifications"));
              objc_msgSend(v39, "checkHAPSessionRestore");
            }

          }
          v30 = objc_msgSend(v28, "countByEnumeratingWithState:objects:count:", &v47, v55, 16);
        }
        while (v30);
      }

      v6 = v45;
    }
    else
    {
      v40 = (void *)MEMORY[0x227676638]();
      v41 = a1;
      HMFGetOSLogHandle();
      v42 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v42, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v43 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543362;
        v58 = v43;
        _os_log_impl(&dword_2218F0000, v42, OS_LOG_TYPE_INFO, "%{public}@Not registering notifications on direct transports since we have no modifications", buf, 0xCu);

      }
      objc_autoreleasePoolPop(v40);
    }

  }
}

void __46__HMDHome__handleCoalescedModifyNotifications__block_invoke(uint64_t a1, void *a2, void *a3, void *a4, void *a5, unsigned int a6)
{
  id v11;
  id v12;
  id v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  void *v24;
  id v25;
  _QWORD v26[5];

  v25 = a2;
  v11 = a3;
  v12 = a4;
  v13 = a5;
  if (objc_msgSend(v25, "count") || objc_msgSend(v12, "count") || objc_msgSend(v13, "count"))
  {
    v23 = a6;
    objc_msgSend(v25, "na_dictionaryByMappingValues:", &__block_literal_global_1554);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    v15 = (void *)objc_msgSend(v14, "copy");

    v16 = (void *)objc_msgSend(v12, "copy");
    v17 = (void *)objc_msgSend(v13, "copy");
    v24 = v11;
    v18 = (void *)objc_msgSend(v11, "copy");
    v19 = (void *)MEMORY[0x227676638]();
    objc_msgSend(*(id *)(a1 + 32), "notificationRegistrations");
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    v21 = objc_msgSend(v20, "count");

    if (v21)
    {
      v26[0] = MEMORY[0x24BDAC760];
      v26[1] = 3221225472;
      v26[2] = __46__HMDHome__handleCoalescedModifyNotifications__block_invoke_3;
      v26[3] = &unk_24E776ED0;
      v26[4] = *(_QWORD *)(a1 + 32);
      objc_msgSend(v18, "na_filter:", v26);
      v22 = objc_claimAutoreleasedReturnValue();

      v18 = (void *)v22;
    }
    objc_autoreleasePoolPop(v19);
    objc_msgSend(*(id *)(a1 + 32), "_modifyCharacteristicNotificationsOnResident:characteristicChangeThresholds:mediaNotifications:actionSetNotificationPayload:matterAttributeNotifications:enableNotification:", v15, v18, MEMORY[0x24BDBD1B8], v16, v17, v23);
    objc_msgSend(v25, "removeAllObjects");
    v11 = v24;
    objc_msgSend(v24, "removeAllObjects");
    objc_msgSend(v12, "removeAllObjects");
    objc_msgSend(v13, "removeAllObjects");

  }
}

BOOL __46__HMDHome__handleCoalescedModifyNotifications__block_invoke_3(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  void *v8;
  void *v9;
  id v10;
  void *v11;
  uint64_t v12;
  uint64_t i;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  id v21;
  uint64_t v22;
  void *v23;
  _BOOL8 v24;
  void *v26;
  id v27;
  uint64_t v28;
  void *v29;
  id v30;
  int v31;
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  _BYTE v37[128];
  uint64_t v38;

  v38 = *MEMORY[0x24BDAC8D0];
  v5 = a2;
  v6 = a3;
  v7 = (void *)objc_msgSend(objc_alloc(MEMORY[0x24BDD1880]), "initWithUUIDString:", v5);
  if (v7)
  {
    objc_msgSend(*(id *)(a1 + 32), "accessoryWithUUID:", v7);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
      v9 = v8;
    else
      v9 = 0;
    v10 = v9;

    if (v10)
    {
      v26 = v7;
      v27 = v5;
      v35 = 0u;
      v36 = 0u;
      v33 = 0u;
      v34 = 0u;
      objc_msgSend(v6, "allKeys");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      v32 = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v33, v37, 16);
      if (v32)
      {
        v12 = *(_QWORD *)v34;
        v29 = v11;
        v30 = v6;
        v28 = *(_QWORD *)v34;
        do
        {
          for (i = 0; i != v32; ++i)
          {
            if (*(_QWORD *)v34 != v12)
              objc_enumerationMutation(v11);
            v14 = *(void **)(*((_QWORD *)&v33 + 1) + 8 * i);
            objc_msgSend(MEMORY[0x24BDD16E0], "numberWithInteger:", objc_msgSend(v14, "integerValue"));
            v15 = (void *)objc_claimAutoreleasedReturnValue();
            if (v15)
            {
              objc_msgSend(v10, "hmdCharacteristicForInstanceId:", v15);
              v16 = (void *)objc_claimAutoreleasedReturnValue();
              v17 = v16;
              if (v16)
              {
                objc_msgSend(v16, "service");
                v18 = (void *)objc_claimAutoreleasedReturnValue();
                if (!v18)
                  goto LABEL_15;
                objc_msgSend(*(id *)(a1 + 32), "hapMetadata");
                v19 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v17, "type");
                v20 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v18, "type");
                v21 = v10;
                v22 = a1;
                v23 = (void *)objc_claimAutoreleasedReturnValue();
                v31 = objc_msgSend(v19, "shouldEnableHomeNotificationForCharacteristicType:serviceType:", v20, v23);

                a1 = v22;
                v10 = v21;
                v12 = v28;

                v11 = v29;
                v6 = v30;
                if (v31)
LABEL_15:
                  objc_msgSend(v6, "setObject:forKeyedSubscript:", 0, v14);

              }
              else
              {
                objc_msgSend(v6, "setObject:forKeyedSubscript:", 0, v14);
              }

            }
            else
            {
              objc_msgSend(v6, "setObject:forKeyedSubscript:", 0, v14);
            }

          }
          v32 = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v33, v37, 16);
        }
        while (v32);
      }

      v24 = objc_msgSend(v6, "count") != 0;
      v7 = v26;
      v5 = v27;
    }
    else
    {
      v24 = 0;
    }

  }
  else
  {
    v24 = 0;
  }

  return v24;
}

id __46__HMDHome__handleCoalescedModifyNotifications__block_invoke_2(uint64_t a1, uint64_t a2, void *a3)
{
  return (id)objc_msgSend(a3, "copy");
}

uint64_t __51__HMDHome_residentDeviceManagerDidUpdateResidents___block_invoke(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_evaluateOwnerTrustZoneCapabilityAndNotify");
}

void __82__HMDHome_residentDeviceManager_didUpdatePrimaryResident_previousPrimaryResident___block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;
  id v4;
  NSObject *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  int v12;
  void *v13;
  __int16 v14;
  uint64_t v15;
  __int16 v16;
  uint64_t v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  if ((objc_msgSend(*(id *)(a1 + 32), "isOwnerUser") & 1) == 0)
  {
    objc_msgSend(*(id *)(a1 + 32), "residentSyncManager");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "performSync");

  }
  v3 = (void *)MEMORY[0x227676638]();
  v4 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v5 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v7 = *(_QWORD *)(a1 + 40);
    v8 = *(_QWORD *)(a1 + 48);
    v12 = 138543874;
    v13 = v6;
    v14 = 2112;
    v15 = v7;
    v16 = 2112;
    v17 = v8;
    _os_log_impl(&dword_2218F0000, v5, OS_LOG_TYPE_INFO, "%{public}@Scheduling re-subscription for new primary resident: %@, old primary: %@", (uint8_t *)&v12, 0x20u);

  }
  objc_autoreleasePoolPop(v3);
  v9 = *(void **)(a1 + 32);
  objc_msgSend(*(id *)(a1 + 48), "device");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "resubscribeForNotificationsOnResident:", v10);

  objc_msgSend(*(id *)(a1 + 32), "migrateAfterResidentChange");
  objc_msgSend(*(id *)(a1 + 32), "reEvaluateHomeHubState");
  objc_msgSend(*(id *)(a1 + 32), "stagedRemoteReachabilityRegistration");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "resetAndStagePriorValue");

}

uint64_t __60__HMDHome_residentDeviceManager_didUpdateResidentAvailable___block_invoke(uint64_t a1)
{
  void *v2;
  id v3;
  NSObject *v4;
  void *v5;
  uint64_t v6;
  void *v7;
  int v8;
  const __CFString *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t i;
  void *v15;
  void *v16;
  void *v17;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint8_t v23[128];
  uint8_t buf[4];
  void *v25;
  __int16 v26;
  uint64_t v27;
  __int16 v28;
  const __CFString *v29;
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  v2 = (void *)MEMORY[0x227676638]();
  v3 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 32), "shortDescription");
    v6 = objc_claimAutoreleasedReturnValue();
    v7 = (void *)v6;
    v8 = *(unsigned __int8 *)(a1 + 40);
    *(_DWORD *)buf = 138543874;
    v25 = v5;
    if (v8)
      v9 = CFSTR("available");
    else
      v9 = CFSTR("unavailable");
    v26 = 2112;
    v27 = v6;
    v28 = 2112;
    v29 = v9;
    _os_log_impl(&dword_2218F0000, v4, OS_LOG_TYPE_INFO, "%{public}@[%@] Resident devices are %@ for this home", buf, 0x20u);

  }
  objc_autoreleasePoolPop(v2);
  if (!*(_BYTE *)(a1 + 40))
  {
    objc_msgSend(*(id *)(a1 + 32), "migrateAfterResidentChange");
    if (!*(_BYTE *)(a1 + 40))
    {
      v21 = 0u;
      v22 = 0u;
      v19 = 0u;
      v20 = 0u;
      objc_msgSend(*(id *)(a1 + 32), "_residentUsers", 0);
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      v11 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v19, v23, 16);
      if (v11)
      {
        v12 = v11;
        v13 = *(_QWORD *)v20;
        do
        {
          for (i = 0; i != v12; ++i)
          {
            if (*(_QWORD *)v20 != v13)
              objc_enumerationMutation(v10);
            objc_msgSend(*(id *)(a1 + 32), "_notifyClientsOfUpdatedResidentUser:", *(_QWORD *)(*((_QWORD *)&v19 + 1) + 8 * i));
          }
          v12 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v19, v23, 16);
        }
        while (v12);
      }

      objc_msgSend(*(id *)(a1 + 32), "homeManager");
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(*(id *)(a1 + 32), "uuid");
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v15, "electRemoteAccessPeerForHome:", v16);

      if ((objc_msgSend(*(id *)(a1 + 32), "isOwnerUser") & 1) == 0)
      {
        objc_msgSend(*(id *)(a1 + 32), "residentDeviceManager");
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v17, "discoverPrimaryResidentForRequester:", 0);

      }
    }
  }
  return objc_msgSend(*(id *)(a1 + 32), "reEvaluateHomeHubState");
}

void __113__HMDHome_retrieveOperationalCertificatesForFabricID_commissionerNodeID_commissioneeNodeID_publicKey_completion___block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id WeakRetained;
  void *v8;
  id v9;
  NSObject *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  id v16;
  NSObject *v17;
  NSObject *v18;
  void *v19;
  void *v20;
  uint64_t v21;
  void *v22;
  void *v23;
  void *v24;
  void *context;
  uint8_t buf[4];
  void *v27;
  __int16 v28;
  id v29;
  __int16 v30;
  void *v31;
  __int16 v32;
  void *v33;
  uint64_t v34;

  v34 = *MEMORY[0x24BDAC8D0];
  v5 = a2;
  v6 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    if (v5)
    {
      v8 = (void *)MEMORY[0x227676638]();
      v9 = WeakRetained;
      HMFGetOSLogHandle();
      v10 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        v27 = v11;
        v28 = 2112;
        v29 = v5;
        _os_log_impl(&dword_2218F0000, v10, OS_LOG_TYPE_ERROR, "%{public}@Request for operational certificates failed with %@", buf, 0x16u);

      }
      objc_autoreleasePoolPop(v8);
      (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
    }
    else
    {
      objc_msgSend(v6, "hmf_dataForKey:", CFSTR("HMDHomeCommissioningRootCertMessageKey"));
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v6, "hmf_dataForKey:", CFSTR("HMDHomeCommissioningOperationalCertMessageKey"));
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v6, "hmf_numberForKey:", CFSTR("HMDHomeCommissioningOwnerNodeIDMessageKey"));
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v6, "hmf_dataForKey:", CFSTR("HMDHomeCommissioningIPKMessageKey"));
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      context = (void *)MEMORY[0x227676638]();
      v16 = WeakRetained;
      HMFGetOSLogHandle();
      v17 = objc_claimAutoreleasedReturnValue();
      v18 = v17;
      if (v12 && v13)
      {
        if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
        {
          HMFGetLogIdentifier();
          v23 = v15;
          v19 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138544130;
          v27 = v19;
          v28 = 2112;
          v29 = v12;
          v30 = 2112;
          v31 = v13;
          v32 = 2112;
          v33 = v14;
          _os_log_impl(&dword_2218F0000, v18, OS_LOG_TYPE_INFO, "%{public}@Request for operational certificates successful. rootCertificate %@, operationalCert %@, ownerNodeID %@", buf, 0x2Au);

          v15 = v23;
        }

        objc_autoreleasePoolPop(context);
        (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
      }
      else
      {
        if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
        {
          HMFGetLogIdentifier();
          v24 = v15;
          v20 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138544130;
          v27 = v20;
          v28 = 2112;
          v29 = v12;
          v30 = 2112;
          v31 = v13;
          v32 = 2112;
          v33 = v14;
          _os_log_impl(&dword_2218F0000, v18, OS_LOG_TYPE_ERROR, "%{public}@Primary resident returned unexpected values for rootCertificate %@, operationalCert %@, ownerNodeID %@", buf, 0x2Au);

          v15 = v24;
        }

        objc_autoreleasePoolPop(context);
        v21 = *(_QWORD *)(a1 + 32);
        objc_msgSend(MEMORY[0x24BDD1540], "hmErrorWithCode:", -1);
        v22 = (void *)objc_claimAutoreleasedReturnValue();
        (*(void (**)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, void *))(v21 + 16))(v21, 0, 0, 0, 0, v22);

      }
    }
  }

}

void __59__HMDHome__fetchMetadataFromPrimaryResidentWithCompletion___block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id WeakRetained;
  void *v8;
  id v9;
  NSObject *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  id v16;
  NSObject *v17;
  NSObject *v18;
  BOOL v19;
  void *v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  unsigned int v33;
  id v34;
  id v35;
  void *v36;
  id v37;
  void *v38;
  id v39;
  uint8_t buf[4];
  void *v41;
  __int16 v42;
  id v43;
  __int16 v44;
  uint64_t v45;
  uint64_t v46;

  v46 = *MEMORY[0x24BDAC8D0];
  v5 = a2;
  v6 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    if (v5)
    {
      v8 = (void *)MEMORY[0x227676638]();
      v9 = WeakRetained;
      HMFGetOSLogHandle();
      v10 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        v41 = v11;
        v42 = 2112;
        v43 = v5;
        _os_log_impl(&dword_2218F0000, v10, OS_LOG_TYPE_ERROR, "%{public}@Request for Thread Network credentials failed with error: %@", buf, 0x16u);

      }
      objc_autoreleasePoolPop(v8);
      (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
    }
    else
    {
      objc_msgSend(v6, "hmf_dataForKey:", *MEMORY[0x24BDD6348]);
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      v39 = 0;
      objc_msgSend(MEMORY[0x24BDD1620], "unarchivedObjectOfClass:fromData:error:", objc_opt_class(), v12, &v39);
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      v37 = v39;
      objc_msgSend(v6, "hmf_dataForKey:", CFSTR("HMHomeThreadNetworkCredentialsMasterKeyMessageKey"));
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      v15 = (void *)MEMORY[0x227676638]();
      v16 = WeakRetained;
      HMFGetOSLogHandle();
      v17 = objc_claimAutoreleasedReturnValue();
      v18 = v17;
      v38 = v14;
      if (v13)
        v19 = v14 == 0;
      else
        v19 = 1;
      if (v19)
      {
        if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
        {
          HMFGetLogIdentifier();
          v20 = v12;
          v21 = (void *)objc_claimAutoreleasedReturnValue();
          v22 = objc_msgSend(v38, "length");
          *(_DWORD *)buf = 138543874;
          v41 = v21;
          v42 = 2112;
          v43 = v13;
          v44 = 2048;
          v45 = v22;
          _os_log_impl(&dword_2218F0000, v18, OS_LOG_TYPE_ERROR, "%{public}@Missing metadata (%@)/masterKeyData (length %zu) in response", buf, 0x20u);

          v12 = v20;
        }

        objc_autoreleasePoolPop(v15);
        v23 = *(_QWORD *)(a1 + 32);
        objc_msgSend(MEMORY[0x24BDD1540], "hmErrorWithCode:", -1);
        v24 = (void *)objc_claimAutoreleasedReturnValue();
        (*(void (**)(uint64_t, _QWORD, void *))(v23 + 16))(v23, 0, v24);
        v14 = v38;
      }
      else
      {
        v35 = v6;
        v36 = v12;
        if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
        {
          HMFGetLogIdentifier();
          v26 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543362;
          v41 = v26;
          _os_log_impl(&dword_2218F0000, v18, OS_LOG_TYPE_INFO, "%{public}@Request for Thread Network Metadata successful", buf, 0xCu);

        }
        objc_autoreleasePoolPop(v15);
        v34 = objc_alloc(MEMORY[0x24BDD7A48]);
        objc_msgSend(v13, "name");
        v32 = (void *)objc_claimAutoreleasedReturnValue();
        v33 = objc_msgSend(v13, "channel");
        objc_msgSend(v13, "PANID");
        v31 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v13, "extendedPANID");
        v27 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v13, "passPhrase");
        v28 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v13, "PSKc");
        v29 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v13, "operationalDataset");
        v30 = (void *)objc_claimAutoreleasedReturnValue();
        v24 = (void *)objc_msgSend(v34, "initWithName:channel:PANID:extendedPANID:masterKey:passPhrase:PSKc:operationalDataset:", v32, v33, v31, v27, v14, v28, v29, v30);

        (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
        v6 = v35;
        v12 = v36;
      }

    }
  }

}

void __55__HMDHome_retrieveThreadNetworkMetadataWithCompletion___block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  void *v8;
  id v9;
  NSObject *v10;
  void *v11;
  void *v12;
  id v13;
  NSObject *v14;
  void *v15;
  int v16;
  void *v17;
  __int16 v18;
  void *v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  v5 = a2;
  v6 = a3;
  v7 = v6;
  if (v5 && !v6)
    goto LABEL_9;
  v8 = (void *)MEMORY[0x227676638]();
  v9 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v10 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
  {
    HMFGetLogIdentifier();
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v16 = 138543618;
    v17 = v11;
    v18 = 2112;
    v19 = v7;
    _os_log_impl(&dword_2218F0000, v10, OS_LOG_TYPE_ERROR, "%{public}@Failed to get thread network credentials from resident. Error: %@", (uint8_t *)&v16, 0x16u);

  }
  objc_autoreleasePoolPop(v8);
  if (objc_msgSend(*(id *)(a1 + 32), "isOwnerUser"))
  {
    v12 = (void *)MEMORY[0x227676638]();
    v13 = *(id *)(a1 + 32);
    HMFGetOSLogHandle();
    v14 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      v16 = 138543362;
      v17 = v15;
      _os_log_impl(&dword_2218F0000, v14, OS_LOG_TYPE_INFO, "%{public}@Falling back to get thread network credentials from current owner device", (uint8_t *)&v16, 0xCu);

    }
    objc_autoreleasePoolPop(v12);
    objc_msgSend(*(id *)(a1 + 32), "_fetchMetadataOnCurrentDeviceWithCompletion:", *(_QWORD *)(a1 + 40));
  }
  else
  {
LABEL_9:
    (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  }

}

uint64_t __69__HMDHome__unconfigurePairedAccessoriesForServer_updateReachability___block_invoke(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "unconfigureAccessoryWithServerIdentifier:linkType:updateReachability:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(unsigned __int8 *)(a1 + 48));
}

void __56__HMDHome__processUpdatedAccessoryServer_reAddServices___block_invoke(uint64_t a1)
{
  id WeakRetained;
  void *v3;
  void *v4;
  uint64_t i;
  uint64_t v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t j;
  id v12;
  void *v13;
  id v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t k;
  void *v19;
  void *v20;
  void *v21;
  _BOOL8 v22;
  void *v23;
  NSObject *v24;
  NSObject *v25;
  void *v26;
  id obj;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD block[5];
  id v34;
  id v35;
  _QWORD v36[6];
  id v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  _BYTE v50[128];
  _BYTE v51[128];
  _BYTE v52[128];
  uint64_t v53;

  v53 = *MEMORY[0x24BDAC8D0];
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  if (WeakRetained)
  {
    v29 = a1;
    objc_msgSend(*(id *)(a1 + 32), "accessories");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    v26 = WeakRetained;
    objc_msgSend(WeakRetained, "accessories");
    v30 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD1650], "strongToStrongObjectsMapTable");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    v46 = 0u;
    v47 = 0u;
    v48 = 0u;
    v49 = 0u;
    obj = v3;
    v31 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v46, v52, 16);
    if (v31)
    {
      v28 = *(_QWORD *)v47;
      do
      {
        for (i = 0; i != v31; ++i)
        {
          if (*(_QWORD *)v47 != v28)
            objc_enumerationMutation(obj);
          v6 = *(_QWORD *)(*((_QWORD *)&v46 + 1) + 8 * i);
          v42 = 0u;
          v43 = 0u;
          v44 = 0u;
          v45 = 0u;
          v7 = v30;
          v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v42, v51, 16);
          if (v8)
          {
            v9 = v8;
            v10 = *(_QWORD *)v43;
            do
            {
              for (j = 0; j != v9; ++j)
              {
                if (*(_QWORD *)v43 != v10)
                  objc_enumerationMutation(v7);
                v12 = *(id *)(*((_QWORD *)&v42 + 1) + 8 * j);
                objc_opt_class();
                if ((objc_opt_isKindOfClass() & 1) != 0)
                  v13 = v12;
                else
                  v13 = 0;
                v14 = v13;

                if (v14 && objc_msgSend(v14, "matchesHAPAccessory:", v6))
                  objc_msgSend(v4, "setObject:forKey:", v6, v14);

              }
              v9 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v42, v51, 16);
            }
            while (v9);
          }

        }
        v31 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v46, v52, 16);
      }
      while (v31);
    }

    v40 = 0u;
    v41 = 0u;
    v38 = 0u;
    v39 = 0u;
    v15 = v4;
    v16 = objc_msgSend(v15, "countByEnumeratingWithState:objects:count:", &v38, v50, 16);
    WeakRetained = v26;
    if (v16)
    {
      v17 = v16;
      v32 = *(_QWORD *)v39;
      do
      {
        for (k = 0; k != v17; ++k)
        {
          if (*(_QWORD *)v39 != v32)
            objc_enumerationMutation(v15);
          v19 = *(void **)(*((_QWORD *)&v38 + 1) + 8 * k);
          dispatch_group_enter(*(dispatch_group_t *)(v29 + 40));
          objc_msgSend(v15, "objectForKey:", v19);
          v20 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v26, "notificationRegistrations");
          v21 = (void *)objc_claimAutoreleasedReturnValue();
          v22 = objc_msgSend(v21, "count") != 0;
          objc_msgSend(v26, "workQueue");
          v23 = (void *)objc_claimAutoreleasedReturnValue();
          v36[0] = MEMORY[0x24BDAC760];
          v36[1] = 3221225472;
          v36[2] = __56__HMDHome__processUpdatedAccessoryServer_reAddServices___block_invoke_2;
          v36[3] = &unk_24E79BBD0;
          v36[4] = v19;
          v36[5] = v26;
          v37 = *(id *)(v29 + 40);
          objc_msgSend(v19, "configureWithAccessory:homeNotificationsEnabled:queue:completion:", v20, v22, v23, v36);

        }
        v17 = objc_msgSend(v15, "countByEnumeratingWithState:objects:count:", &v38, v50, 16);
      }
      while (v17);
    }

    v24 = *(NSObject **)(v29 + 40);
    objc_msgSend(v26, "workQueue");
    v25 = objc_claimAutoreleasedReturnValue();
    block[0] = MEMORY[0x24BDAC760];
    block[1] = 3221225472;
    block[2] = __56__HMDHome__processUpdatedAccessoryServer_reAddServices___block_invoke_1545;
    block[3] = &unk_24E79BBD0;
    block[4] = v26;
    v34 = *(id *)(v29 + 32);
    v35 = *(id *)(v29 + 48);
    dispatch_group_notify(v24, v25, block);

  }
}

void __56__HMDHome__processUpdatedAccessoryServer_reAddServices___block_invoke_2(uint64_t a1)
{
  void *v2;
  void *v3;
  id v4;
  NSObject *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  int v11;
  int v12;
  void *v13;
  __int16 v14;
  void *v15;
  __int16 v16;
  void *v17;
  __int16 v18;
  void *v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  logAndPostNotification(CFSTR("HMDAccessoryConnectedNotification"), *(void **)(a1 + 32), 0);
  objc_msgSend(*(id *)(a1 + 32), "updateLightProfilesSettings");
  objc_msgSend(*(id *)(a1 + 32), "chipAccessoryServer");
  v2 = (void *)objc_claimAutoreleasedReturnValue();

  if (v2)
  {
    v3 = (void *)MEMORY[0x227676638]();
    v4 = *(id *)(a1 + 40);
    HMFGetOSLogHandle();
    v5 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(*(id *)(a1 + 32), "uuid");
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(*(id *)(a1 + 32), "chipAccessoryServer");
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(*(id *)(a1 + 32), "chipAccessoryServer");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      v12 = 138544130;
      v13 = v6;
      v14 = 2112;
      v15 = v7;
      v16 = 2048;
      v17 = v8;
      v18 = 2112;
      v19 = v9;
      _os_log_impl(&dword_2218F0000, v5, OS_LOG_TYPE_INFO, "%{public}@Configured chipAccessoryServer on accessory: %@, chipAccessoryServer: %p %@", (uint8_t *)&v12, 0x2Au);

    }
    objc_autoreleasePoolPop(v3);
    objc_msgSend(*(id *)(a1 + 32), "setDidConfigureCHIPAccessoryServer");
  }
  objc_msgSend(*(id *)(a1 + 40), "homeManager");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v11 = objc_msgSend(v10, "hasLoadedData");

  if (v11)
    objc_msgSend(*(id *)(a1 + 40), "_auditActionSetsAndTriggersForAccessory:", *(_QWORD *)(a1 + 32));
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 48));
}

uint64_t __56__HMDHome__processUpdatedAccessoryServer_reAddServices___block_invoke_1545(uint64_t a1)
{
  id *v1;
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  __objc2_class **p_superclass;
  uint64_t v9;
  id v10;
  void *v11;
  void *v12;
  void *v13;
  id v14;
  void *v15;
  id v16;
  NSObject *v17;
  void *v18;
  void *v19;
  uint64_t v20;
  __objc2_class **v21;
  void *v22;
  __int128 v24;
  id *v25;
  id obj;
  uint64_t v27;
  _QWORD v28[4];
  id v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  _QWORD v34[5];
  uint8_t buf[4];
  void *v36;
  __int16 v37;
  void *v38;
  __int16 v39;
  void *v40;
  _BYTE v41[128];
  uint64_t v42;

  v1 = (id *)a1;
  v42 = *MEMORY[0x24BDAC8D0];
  v2 = *(void **)(a1 + 32);
  objc_msgSend(*(id *)(a1 + 40), "identifier");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v1[5], "linkType");
  v34[0] = MEMORY[0x24BDAC760];
  v34[1] = 3221225472;
  v34[2] = __56__HMDHome__processUpdatedAccessoryServer_reAddServices___block_invoke_2_1546;
  v34[3] = &unk_24E791F98;
  v34[4] = v1[4];
  objc_msgSend(v2, "_notifyRetrievalError:accessoryServer:linkType:accessoryOperationBlock:", 0, v3, v4, v34);

  v32 = 0u;
  v33 = 0u;
  v30 = 0u;
  v31 = 0u;
  obj = v1[6];
  v5 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v30, v41, 16);
  if (v5)
  {
    v7 = v5;
    v27 = *(_QWORD *)v31;
    p_superclass = HMDCameraMetricsSnapshotLogEvent.superclass;
    *(_QWORD *)&v6 = 138543874;
    v24 = v6;
    v25 = v1;
    do
    {
      v9 = 0;
      do
      {
        if (*(_QWORD *)v31 != v27)
          objc_enumerationMutation(obj);
        v10 = v1[4];
        objc_msgSend(*(id *)(*((_QWORD *)&v30 + 1) + 8 * v9), "uuid", v24);
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v10, "accessoryWithUUID:", v11);
        v12 = (void *)objc_claimAutoreleasedReturnValue();

        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0)
          v13 = v12;
        else
          v13 = 0;
        v14 = v13;

        if (v14)
        {
          v15 = (void *)MEMORY[0x227676638]();
          v16 = v1[4];
          HMFGetOSLogHandle();
          v17 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
          {
            HMFGetLogIdentifier();
            v18 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v14, "shortDescription");
            v19 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v14, "supportsTargetController");
            HMFBooleanToString();
            v20 = v7;
            v21 = p_superclass;
            v22 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = v24;
            v36 = v18;
            v37 = 2112;
            v38 = v19;
            v39 = 2112;
            v40 = v22;
            _os_log_impl(&dword_2218F0000, v17, OS_LOG_TYPE_INFO, "%{public}@Bridged accessory %@ (supportsTargetController %@) being added to home", buf, 0x20u);

            v1 = v25;
            p_superclass = v21;
            v7 = v20;

          }
          objc_autoreleasePoolPop(v15);
          v28[0] = MEMORY[0x24BDAC760];
          v28[1] = 3221225472;
          v28[2] = __56__HMDHome__processUpdatedAccessoryServer_reAddServices___block_invoke_1547;
          v28[3] = &unk_24E79BD80;
          v29 = v14;
          objc_msgSend(v29, "readInitialRequiredCharacteristicsForAccessory:", v28);

        }
        ++v9;
      }
      while (v7 != v9);
      v7 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v30, v41, 16);
    }
    while (v7);
  }

  return objc_msgSend(v1[4], "_evaluateShouldRelaunchAndSetRelaunch");
}

void __56__HMDHome__processUpdatedAccessoryServer_reAddServices___block_invoke_2_1546(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, void *);
  void *v7;
  uint64_t v8;
  id v9;

  v3 = a2;
  if (objc_msgSend(v3, "isPrimary"))
  {
    v4 = MEMORY[0x24BDAC760];
    v5 = 3221225472;
    v6 = __56__HMDHome__processUpdatedAccessoryServer_reAddServices___block_invoke_3;
    v7 = &unk_24E79BCC8;
    v8 = *(_QWORD *)(a1 + 32);
    v9 = v3;
    objc_msgSend(v9, "maybeCommissionToThreadNetworkWithCompletion:", &v4);

  }
  objc_msgSend(v3, "handleUpdatedServicesForThreadManagementWithCompletion:", 0, v4, v5, v6, v7, v8);

}

uint64_t __56__HMDHome__processUpdatedAccessoryServer_reAddServices___block_invoke_1547(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "autoConfigureTargetController");
}

void __56__HMDHome__processUpdatedAccessoryServer_reAddServices___block_invoke_3(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  NSObject *v6;
  void *v7;
  void *v8;
  int v9;
  void *v10;
  __int16 v11;
  void *v12;
  __int16 v13;
  id v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v3 = a2;
  v4 = (void *)MEMORY[0x227676638]();
  v5 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v6 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    HMFGetLogIdentifier();
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 40), "shortDescription");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = 138543874;
    v10 = v7;
    v11 = 2112;
    v12 = v8;
    v13 = 2112;
    v14 = v3;
    _os_log_impl(&dword_2218F0000, v6, OS_LOG_TYPE_DEFAULT, "%{public}@Commissioning finished for %@ with error: %@", (uint8_t *)&v9, 0x20u);

  }
  objc_autoreleasePoolPop(v4);

}

uint64_t __141__HMDHome_getUpdateTransactionForAccessory_hapAccessory_accessoryTransaction_addSvcTransactions_updateSvcTransactions_removeSvcTransactions___block_invoke(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "uuid");
}

id __88__HMDHome___updateServiceTransaction_accessoryTransaction_service_accessory_hapService___block_invoke(uint64_t a1)
{
  return *(id *)(a1 + 32);
}

void __63__HMDHome_accessoryBrowser_didFinishPairingForAccessoryServer___block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id WeakRetained;
  void *v8;
  id v9;
  NSObject *v10;
  NSObject *v11;
  void *v12;
  uint64_t v13;
  const char *v14;
  NSObject *v15;
  os_log_type_t v16;
  uint32_t v17;
  uint64_t v18;
  int v19;
  void *v20;
  __int16 v21;
  uint64_t v22;
  __int16 v23;
  id v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v5 = a2;
  v6 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    v8 = (void *)MEMORY[0x227676638]();
    v9 = WeakRetained;
    HMFGetOSLogHandle();
    v10 = objc_claimAutoreleasedReturnValue();
    v11 = v10;
    if (v5)
    {
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v12 = (void *)objc_claimAutoreleasedReturnValue();
        v13 = *(_QWORD *)(a1 + 32);
        v19 = 138543874;
        v20 = v12;
        v21 = 2112;
        v22 = v13;
        v23 = 2112;
        v24 = v5;
        v14 = "%{public}@Failed to notify pairing completion for accessory server %@ to the primary resident with error %@";
        v15 = v11;
        v16 = OS_LOG_TYPE_ERROR;
        v17 = 32;
LABEL_7:
        _os_log_impl(&dword_2218F0000, v15, v16, v14, (uint8_t *)&v19, v17);

      }
    }
    else if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      v18 = *(_QWORD *)(a1 + 32);
      v19 = 138543618;
      v20 = v12;
      v21 = 2112;
      v22 = v18;
      v14 = "%{public}@Successfully notified the primary resident of pairing completion for accessory server %@";
      v15 = v11;
      v16 = OS_LOG_TYPE_INFO;
      v17 = 22;
      goto LABEL_7;
    }

    objc_autoreleasePoolPop(v8);
  }

}

uint64_t __89__HMDHome_accessoryBrowser_didUpdateReachability_forBTLEAccessoriesWithServerIdentifier___block_invoke(uint64_t a1, void *a2)
{
  void *v3;
  uint64_t v4;

  objc_msgSend(a2, "identifier");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "isEqualToString:", *(_QWORD *)(a1 + 32));

  return v4;
}

id __89__HMDHome_accessoryBrowser_didUpdateReachability_forBTLEAccessoriesWithServerIdentifier___block_invoke_1531(uint64_t a1, void *a2)
{
  id v2;
  void *v3;

  v2 = a2;
  if (objc_msgSend(v2, "hasBTLELink"))
  {
    objc_msgSend(v2, "identifier");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v3 = 0;
  }

  return v3;
}

uint64_t __56__HMDHome_handleUpdatedCharacteristics_accessoryServer___block_invoke(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_handleUpdatedCharacteristics:accessoryServer:stateNumber:broadcast:internal:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), 0, 0, 1);
}

uint64_t __100__HMDHome_accessoryBrowser_accessoryServer_didUpdateValuesForCharacteristics_stateNumber_broadcast___block_invoke(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_handleUpdatedCharacteristics:accessoryServer:stateNumber:broadcast:internal:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(unsigned __int8 *)(a1 + 64), 0);
}

void __85__HMDHome_accessoryBrowser_accessoryServer_didDiscoverAccessories_transaction_error___block_invoke(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  _QWORD v6[4];
  id v7;
  _QWORD v8[2];

  v8[1] = *MEMORY[0x24BDAC8D0];
  v3 = a2;
  objc_msgSend(v3, "setReachability:serverIdentifier:linkType:", 0, *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 48));
  if (objc_msgSend(v3, "hasBTLELink") && *(_QWORD *)(a1 + 48) == 2)
  {
    objc_msgSend(*(id *)(a1 + 40), "accessoryBrowser");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    v8[0] = *(_QWORD *)(a1 + 32);
    objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", v8, 1);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6[0] = MEMORY[0x24BDAC760];
    v6[1] = 3221225472;
    v6[2] = __85__HMDHome_accessoryBrowser_accessoryServer_didDiscoverAccessories_transaction_error___block_invoke_2;
    v6[3] = &unk_24E776DB8;
    v7 = v3;
    objc_msgSend(v4, "probeReachabilityForBTLEAccessoryServersWithIdentifiers:forceScan:withCompletion:", v5, 1, v6);

  }
}

uint64_t __85__HMDHome_accessoryBrowser_accessoryServer_didDiscoverAccessories_transaction_error___block_invoke_2(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return objc_msgSend(*(id *)(a1 + 32), "setReachability:serverIdentifier:linkType:", a3, a2, 2);
}

uint64_t __68__HMDHome_accessoryBrowser_accessoryServer_didStopPairingWithError___block_invoke(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "didEncounterError:", *(_QWORD *)(a1 + 32));
}

void __78__HMDHome_accessoryBrowser_discoveryFailedWithError_accessoryServer_linkType___block_invoke(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  id v6;

  v3 = a2;
  if (*(_QWORD *)(a1 + 40) != 2)
  {
    v6 = v3;
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
      v4 = v6;
    else
      v4 = 0;
    v5 = v4;
    objc_msgSend(v5, "setReachability:serverIdentifier:linkType:", 0, *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));

    v3 = v6;
  }

}

void __87__HMDHome_accessoryBrowser_didFindAccessoryServer_stateChanged_stateNumber_completion___block_invoke(uint64_t a1, void *a2)
{
  void *v3;
  id v4;
  void *v5;
  id v6;

  v6 = a2;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v3 = v6;
  else
    v3 = 0;
  v4 = v3;
  objc_msgSend(*(id *)(a1 + 32), "identifier");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "setReachability:serverIdentifier:linkType:", 1, v5, objc_msgSend(*(id *)(a1 + 32), "linkType"));

}

void __38__HMDHome_handleRemovedMediaSessions___block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _BYTE v13[128];
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  objc_msgSend(*(id *)(a1 + 32), "userInfo");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "hmf_arrayForKey:", CFSTR("kRemovedMediaSessionIdentifiersKey"));
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  v11 = 0u;
  v12 = 0u;
  v9 = 0u;
  v10 = 0u;
  v4 = v3;
  v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
  if (v5)
  {
    v6 = v5;
    v7 = *(_QWORD *)v10;
    do
    {
      v8 = 0;
      do
      {
        if (*(_QWORD *)v10 != v7)
          objc_enumerationMutation(v4);
        objc_msgSend(*(id *)(a1 + 40), "_removeMediaSessionWithIdentifier:", *(_QWORD *)(*((_QWORD *)&v9 + 1) + 8 * v8++), (_QWORD)v9);
      }
      while (v6 != v8);
      v6 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
    }
    while (v6);
  }

}

uint64_t __60__HMDHome__shouldAvoidTombstoningAccessoryServer_accessory___block_invoke(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  uint64_t v5;

  objc_msgSend(a2, "accessoryUUID");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 32), "uuid");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v3, "isEqual:", v4);

  return v5;
}

void __87__HMDHome_retrieveHAPAccessoryForHMDAccessory_linkType_forceRetrieve_queue_completion___block_invoke(uint64_t a1)
{
  void *v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  _BOOL8 v6;
  _QWORD v7[4];
  id v8;
  id v9;

  v1 = *(void **)(a1 + 32);
  v2 = *(_QWORD *)(a1 + 40);
  v3 = *(unsigned __int8 *)(a1 + 72);
  v4 = *(_QWORD *)(a1 + 64);
  if (*(_QWORD *)(a1 + 56))
  {
    v6 = v3 != 0;
    v7[0] = MEMORY[0x24BDAC760];
    v7[1] = 3221225472;
    v7[2] = __87__HMDHome_retrieveHAPAccessoryForHMDAccessory_linkType_forceRetrieve_queue_completion___block_invoke_2;
    v7[3] = &unk_24E79B3A0;
    v8 = *(id *)(a1 + 48);
    v9 = *(id *)(a1 + 56);
    objc_msgSend(v1, "_retrieveHAPAccessoryForHMDHAPAccessory:linkType:forceRetrieve:completion:", v2, v4, v6, v7);

  }
  else
  {
    objc_msgSend(*(id *)(a1 + 32), "_retrieveHAPAccessoryForHMDHAPAccessory:linkType:forceRetrieve:completion:", v2, v4, v3 != 0, 0);
  }
}

void __87__HMDHome_retrieveHAPAccessoryForHMDAccessory_linkType_forceRetrieve_queue_completion___block_invoke_2(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  void *v5;
  void *v6;
  _QWORD v7[4];
  id v8;
  id v9;

  v3 = a2;
  v4 = *(NSObject **)(a1 + 32);
  if (v4)
  {
    v7[0] = MEMORY[0x24BDAC760];
    v7[1] = 3221225472;
    v7[2] = __87__HMDHome_retrieveHAPAccessoryForHMDAccessory_linkType_forceRetrieve_queue_completion___block_invoke_3;
    v7[3] = &unk_24E79C2B8;
    v9 = *(id *)(a1 + 40);
    v8 = v3;
    dispatch_async(v4, v7);

  }
  else
  {
    v5 = _Block_copy(*(const void **)(a1 + 40));
    v6 = v5;
    if (v5)
      (*((void (**)(void *, id))v5 + 2))(v5, v3);

  }
}

void __87__HMDHome_retrieveHAPAccessoryForHMDAccessory_linkType_forceRetrieve_queue_completion___block_invoke_3(uint64_t a1)
{
  void *v2;
  id v3;

  v2 = _Block_copy(*(const void **)(a1 + 40));
  if (v2)
  {
    v3 = v2;
    (*((void (**)(void *, _QWORD))v2 + 2))(v2, *(_QWORD *)(a1 + 32));
    v2 = v3;
  }

}

BOOL __28__HMDHome__encodeWithCoder___block_invoke(uint64_t a1, void *a2)
{
  void *v2;
  void *v3;
  _BOOL8 v4;

  objc_msgSend(a2, "device");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "productInfo");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "productClass") != 3;

  return v4;
}

void __28__HMDHome_setMediaPassword___block_invoke(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  void *v8;
  id v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _BYTE v14[128];
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  objc_msgSend(*(id *)(a1 + 32), "accessories", 0);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
  if (v3)
  {
    v4 = v3;
    v5 = *(_QWORD *)v11;
    do
    {
      v6 = 0;
      do
      {
        if (*(_QWORD *)v11 != v5)
          objc_enumerationMutation(v2);
        v7 = *(id *)(*((_QWORD *)&v10 + 1) + 8 * v6);
        if (objc_msgSend(v7, "conformsToProtocol:", &unk_2557F1178))
          v8 = v7;
        else
          v8 = 0;
        v9 = v8;

        if (v9 && objc_msgSend(v9, "supportsMinimumUserPrivilege"))
          objc_msgSend(v9, "handleUpdatedPassword:", *(_QWORD *)(a1 + 40));

        ++v6;
      }
      while (v4 != v6);
      v4 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
    }
    while (v4);
  }

}

void __40__HMDHome_setMinimumMediaUserPrivilege___block_invoke(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  void *v8;
  id v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _BYTE v14[128];
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  objc_msgSend(*(id *)(a1 + 32), "accessories", 0);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
  if (v3)
  {
    v4 = v3;
    v5 = *(_QWORD *)v11;
    do
    {
      v6 = 0;
      do
      {
        if (*(_QWORD *)v11 != v5)
          objc_enumerationMutation(v2);
        v7 = *(id *)(*((_QWORD *)&v10 + 1) + 8 * v6);
        if (objc_msgSend(v7, "conformsToProtocol:", &unk_2557F1178))
          v8 = v7;
        else
          v8 = 0;
        v9 = v8;

        if (v9 && objc_msgSend(v9, "supportsMinimumUserPrivilege"))
          objc_msgSend(v9, "handleUpdatedMinimumUserPrivilege:", *(_QWORD *)(a1 + 40));

        ++v6;
      }
      while (v4 != v6);
      v4 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
    }
    while (v4);
  }

}

void __69__HMDHome_queryPrimaryResidentReachabilityForAccessories_completion___block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  void *v8;
  id v9;
  NSObject *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  int v15;
  void *v16;
  __int16 v17;
  id v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v5 = a2;
  v6 = a3;
  v7 = v6;
  if (v5)
  {
    v8 = (void *)MEMORY[0x227676638]();
    v9 = *(id *)(a1 + 32);
    HMFGetOSLogHandle();
    v10 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      v15 = 138543618;
      v16 = v11;
      v17 = 2112;
      v18 = v5;
      _os_log_impl(&dword_2218F0000, v10, OS_LOG_TYPE_ERROR, "%{public}@Query reachability response error: %@", (uint8_t *)&v15, 0x16u);

    }
    v12 = 0;
LABEL_5:

    objc_autoreleasePoolPop(v8);
    goto LABEL_6;
  }
  objc_msgSend(v6, "hmf_arrayForKey:", CFSTR("kAccessoriesInfoDictionaryKey"));
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  v12 = v13;
  if (!v13 || !objc_msgSend(v13, "count"))
  {
    v8 = (void *)MEMORY[0x227676638]();
    v9 = *(id *)(a1 + 32);
    HMFGetOSLogHandle();
    v10 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      v15 = 138543618;
      v16 = v14;
      v17 = 2112;
      v18 = v7;
      _os_log_impl(&dword_2218F0000, v10, OS_LOG_TYPE_ERROR, "%{public}@No reachability setting in query reachability response: %@", (uint8_t *)&v15, 0x16u);

    }
    goto LABEL_5;
  }
LABEL_6:
  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();

}

uint64_t __29__HMDHome_updateHomeLocation__block_invoke(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_updateHomeLocation");
}

void __41__HMDHome_matterAccessoryBecameReachable__block_invoke(uint64_t a1)
{
  id v1;

  objc_msgSend(*(id *)(a1 + 32), "homeLocationHandler");
  v1 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "matterAccessoryBecameReachable");

}

void __39__HMDHome_updateHomeLocationForPairing__block_invoke(uint64_t a1)
{
  id v1;

  objc_msgSend(*(id *)(a1 + 32), "homeLocationHandler");
  v1 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "updateHomeLocationForPairing");

}

uint64_t __42__HMDHome_enabledResidentsSupportsHomeHub__block_invoke(uint64_t a1, void *a2)
{
  void *v2;
  uint64_t v3;

  objc_msgSend(a2, "capabilities");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "supportsHomeHub");

  return v3;
}

void __38__HMDHome__handleEnableNotifications___block_invoke(uint64_t a1, void *a2)
{
  objc_class *v3;
  id v4;
  id v5;
  void *v6;
  void *v7;
  id v8;
  void *v9;
  void *v10;
  HMDHomeManagerXPCMessageSendPolicy *v11;
  void *v12;
  _QWORD v13[4];
  id v14;

  v3 = (objc_class *)MEMORY[0x24BE3F1B8];
  v4 = a2;
  v5 = [v3 alloc];
  objc_msgSend(*(id *)(a1 + 32), "uuid");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = (void *)objc_msgSend(v5, "initWithTarget:", v6);

  v8 = objc_alloc(MEMORY[0x24BE3F1D0]);
  v9 = (void *)objc_msgSend(v8, "initWithName:destination:payload:", *MEMORY[0x24BDD7C38], v7, v4);

  objc_msgSend(*(id *)(a1 + 40), "identifier");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "setIdentifier:", v10);

  v11 = -[HMDHomeManagerXPCMessageSendPolicy initWithEntitlements:options:]([HMDHomeManagerXPCMessageSendPolicy alloc], "initWithEntitlements:options:", 4, 1);
  objc_msgSend(v9, "setSendPolicy:", v11);
  objc_msgSend(*(id *)(a1 + 32), "msgDispatcher");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  v13[0] = MEMORY[0x24BDAC760];
  v13[1] = 3221225472;
  v13[2] = __38__HMDHome__handleEnableNotifications___block_invoke_2;
  v13[3] = &unk_24E79BD80;
  v14 = *(id *)(a1 + 40);
  objc_msgSend(v12, "sendMessage:completionHandler:", v9, v13);

}

uint64_t __38__HMDHome__handleEnableNotifications___block_invoke_2(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "respondWithPayload:", 0);
}

uint64_t __63__HMDHome__refreshCharacteristicValuesOnHomeNotificationEnable__block_invoke(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;

  v3 = a2;
  objc_msgSend(v3, "type");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "service");
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v5, "type");
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(*(id *)(a1 + 32), "hapMetadata");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = objc_msgSend(v7, "shouldRefreshValueForCharacteristicWithType:serviceType:", v4, v6);

  return v8;
}

void __63__HMDHome__refreshCharacteristicValuesOnHomeNotificationEnable__block_invoke_1453(uint64_t a1, void *a2, void *a3)
{
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t i;
  void *v11;
  void *v12;
  void *v13;
  id v14;
  void *v15;
  id v16;
  NSObject *v17;
  NSObject *v18;
  void *v19;
  NSObject *v20;
  os_log_type_t v21;
  const char *v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t j;
  void *v29;
  NSObject *v30;
  id v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  id obj;
  id v36;
  id v37;
  _QWORD block[5];
  id v39;
  uint64_t v40;
  id v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  id v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  uint8_t v51[128];
  uint8_t buf[4];
  void *v53;
  __int16 v54;
  void *v55;
  __int16 v56;
  id v57;
  _BYTE v58[128];
  uint64_t v59;

  v59 = *MEMORY[0x24BDAC8D0];
  v36 = a2;
  v37 = a3;
  v47 = 0u;
  v48 = 0u;
  v49 = 0u;
  v50 = 0u;
  v5 = a1;
  obj = *(id *)(a1 + 32);
  v6 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v47, v58, 16);
  if (v6)
  {
    v8 = v6;
    v9 = *(_QWORD *)v48;
    *(_QWORD *)&v7 = 138543874;
    v33 = v7;
    v34 = *(_QWORD *)v48;
    do
    {
      for (i = 0; i != v8; ++i)
      {
        if (*(_QWORD *)v48 != v9)
          objc_enumerationMutation(obj);
        v11 = *(void **)(*((_QWORD *)&v47 + 1) + 8 * i);
        objc_msgSend(v11, "characteristic", v33);
        v12 = (void *)objc_claimAutoreleasedReturnValue();
        v46 = 0;
        objc_msgSend(v37, "hmd_valueOfCharacteristic:error:", v12, &v46);
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        v14 = v46;

        v15 = (void *)MEMORY[0x227676638]();
        v16 = *(id *)(v5 + 40);
        HMFGetOSLogHandle();
        v17 = objc_claimAutoreleasedReturnValue();
        v18 = v17;
        if (v13)
        {
          if (!os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
            goto LABEL_12;
          HMFGetLogIdentifier();
          v19 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = v33;
          v53 = v19;
          v54 = 2112;
          v55 = v11;
          v56 = 2112;
          v57 = v13;
          v20 = v18;
          v21 = OS_LOG_TYPE_INFO;
          v22 = "%{public}@Characteristic read request succeeded when Home app enabled notifications %@:%@";
        }
        else
        {
          if (!os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
            goto LABEL_12;
          HMFGetLogIdentifier();
          v19 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = v33;
          v53 = v19;
          v54 = 2112;
          v55 = v11;
          v56 = 2112;
          v57 = v14;
          v20 = v18;
          v21 = OS_LOG_TYPE_ERROR;
          v22 = "%{public}@Characteristic read request when Home app enabled notification failed %@:%@";
        }
        _os_log_impl(&dword_2218F0000, v20, v21, v22, buf, 0x20u);

        v9 = v34;
LABEL_12:

        objc_autoreleasePoolPop(v15);
      }
      v8 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v47, v58, 16);
    }
    while (v8);
  }

  v44 = 0u;
  v45 = 0u;
  v42 = 0u;
  v43 = 0u;
  v23 = *(id *)(v5 + 48);
  v24 = objc_msgSend(v23, "countByEnumeratingWithState:objects:count:", &v42, v51, 16);
  if (v24)
  {
    v25 = v24;
    v26 = *(_QWORD *)v43;
    v27 = MEMORY[0x24BDAC760];
    do
    {
      for (j = 0; j != v25; ++j)
      {
        if (*(_QWORD *)v43 != v26)
          objc_enumerationMutation(v23);
        v29 = *(void **)(*((_QWORD *)&v42 + 1) + 8 * j);
        objc_msgSend(v29, "workQueue");
        v30 = objc_claimAutoreleasedReturnValue();
        block[0] = v27;
        block[1] = 3221225472;
        block[2] = __63__HMDHome__refreshCharacteristicValuesOnHomeNotificationEnable__block_invoke_1454;
        block[3] = &unk_24E79A910;
        block[4] = v29;
        v31 = v37;
        v32 = *(_QWORD *)(v5 + 40);
        v39 = v31;
        v40 = v32;
        v41 = v36;
        dispatch_async(v30, block);

      }
      v25 = objc_msgSend(v23, "countByEnumeratingWithState:objects:count:", &v42, v51, 16);
    }
    while (v25);
  }

}

void __63__HMDHome__refreshCharacteristicValuesOnHomeNotificationEnable__block_invoke_1454(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  void *v4;
  id v5;
  void *v6;
  id v7;
  NSObject *v8;
  NSObject *v9;
  void *v10;
  uint64_t v11;
  const char *v12;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  void *v16;
  id v17;
  uint8_t buf[4];
  void *v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  void *v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v2 = *(void **)(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  v17 = 0;
  objc_msgSend(v2, "updateSettingsWithReadCharacteristicResponsePayload:error:", v3, &v17);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = v17;
  v6 = (void *)MEMORY[0x227676638]();
  v7 = *(id *)(a1 + 48);
  HMFGetOSLogHandle();
  v8 = objc_claimAutoreleasedReturnValue();
  v9 = v8;
  if (v4)
  {
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      v11 = *(_QWORD *)(a1 + 32);
      *(_DWORD *)buf = 138543874;
      v19 = v10;
      v20 = 2112;
      v21 = v11;
      v22 = 2112;
      v23 = v4;
      v12 = "%{public}@Successfully updated light profile settings %@:%@";
      v13 = v9;
      v14 = OS_LOG_TYPE_INFO;
LABEL_6:
      _os_log_impl(&dword_2218F0000, v13, v14, v12, buf, 0x20u);

    }
  }
  else if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
  {
    HMFGetLogIdentifier();
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v15 = *(_QWORD *)(a1 + 32);
    v16 = *(void **)(a1 + 56);
    *(_DWORD *)buf = 138543874;
    v19 = v10;
    v20 = 2112;
    v21 = v15;
    v22 = 2112;
    v23 = v16;
    v12 = "%{public}@Failed to update light profile settings %@:%@";
    v13 = v9;
    v14 = OS_LOG_TYPE_ERROR;
    goto LABEL_6;
  }

  objc_autoreleasePoolPop(v6);
}

void __46__HMDHome__handleResolveThreadNetworkRequest___block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id WeakRetained;
  void *v8;
  void *v9;
  id v10;
  void *v11;
  void *v12;
  void *v13;
  id v14;
  NSObject *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  id v20;
  NSObject *v21;
  void *v22;
  void *v23;
  id v24;
  uint64_t v25;
  void *v26;
  uint8_t buf[4];
  void *v28;
  __int16 v29;
  id v30;
  __int16 v31;
  id v32;
  uint64_t v33;

  v33 = *MEMORY[0x24BDAC8D0];
  v5 = a2;
  v6 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v8 = WeakRetained;
  if (v5 && WeakRetained)
  {
    v24 = 0;
    objc_msgSend(MEMORY[0x24BDD1618], "archivedDataWithRootObject:requiringSecureCoding:error:", v5, 1, &v24);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v10 = v24;
    if (v9)
    {
      v11 = *(void **)(a1 + 32);
      v25 = *MEMORY[0x24BDD6348];
      v26 = v9;
      objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", &v26, &v25, 1);
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v11, "respondWithPayload:", v12);
    }
    else
    {
      v19 = (void *)MEMORY[0x227676638]();
      v20 = v8;
      HMFGetOSLogHandle();
      v21 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v22 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        v28 = v22;
        v29 = 2112;
        v30 = v10;
        _os_log_impl(&dword_2218F0000, v21, OS_LOG_TYPE_ERROR, "%{public}@Unable to encode credentials: %@", buf, 0x16u);

      }
      objc_autoreleasePoolPop(v19);
      v23 = *(void **)(a1 + 32);
      objc_msgSend(MEMORY[0x24BDD1540], "hmfErrorWithCode:", 15);
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v23, "respondWithError:", v12);
    }

  }
  else
  {
    v13 = (void *)MEMORY[0x227676638]();
    v14 = v8;
    HMFGetOSLogHandle();
    v15 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v14, "threadNetworkID");
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543874;
      v28 = v16;
      v29 = 2112;
      v30 = v17;
      v31 = 2112;
      v32 = v6;
      _os_log_impl(&dword_2218F0000, v15, OS_LOG_TYPE_ERROR, "%{public}@Unable to retrieve metadata for thread network '%@': %@", buf, 0x20u);

    }
    objc_autoreleasePoolPop(v13);
    v18 = *(void **)(a1 + 32);
    objc_msgSend(MEMORY[0x24BDD1540], "hmfErrorWithCode:", 2);
    v10 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v18, "respondWithError:", v10);
  }

}

void __38__HMDHome__handleOwnerSettingsUpdate___block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  id v6;
  NSObject *v7;
  NSObject *v8;
  void *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  uint64_t v19;
  void *v20;
  int v21;
  void *v22;
  __int16 v23;
  void *v24;
  __int16 v25;
  void *v26;
  __int16 v27;
  uint64_t v28;
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  objc_msgSend(*(id *)(a1 + 32), "currentUser");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "uuid");
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  +[HMCContext findUserWithModelID:](HMCContext, "findUserWithModelID:", v3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = (void *)MEMORY[0x227676638]();
  v6 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v7 = objc_claimAutoreleasedReturnValue();
  v8 = v7;
  if (!v4)
  {
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      v21 = 138543618;
      v22 = v17;
      v23 = 2112;
      v24 = v3;
      _os_log_impl(&dword_2218F0000, v8, OS_LOG_TYPE_ERROR, "%{public}@Unable to fetch the user with id [%@] from working store", (uint8_t *)&v21, 0x16u);

    }
    objc_autoreleasePoolPop(v5);
    v16 = *(void **)(a1 + 40);
    v18 = (void *)MEMORY[0x24BDD1540];
    v19 = 2;
    goto LABEL_10;
  }
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v10 = *(void **)(a1 + 48);
    objc_msgSend(*(id *)(a1 + 56), "name");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v12 = *(_QWORD *)(a1 + 64);
    v21 = 138544130;
    v22 = v9;
    v23 = 2112;
    v24 = v10;
    v25 = 2112;
    v26 = v11;
    v27 = 2112;
    v28 = v12;
    _os_log_impl(&dword_2218F0000, v8, OS_LOG_TYPE_INFO, "%{public}@Updating owner setting '%@' (%@) = %@", (uint8_t *)&v21, 0x2Au);

  }
  objc_autoreleasePoolPop(v5);
  v13 = *(_QWORD *)(a1 + 64);
  objc_msgSend(*(id *)(a1 + 56), "name");
  v14 = objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "setValue:forKey:", v13, v14);

  objc_msgSend(*(id *)(a1 + 32), "_updateOwnerSettingDependents:keyPath:value:", v4, *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 64));
  +[HMCContext currentContext](HMCContext, "currentContext");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  LOBYTE(v14) = objc_msgSend(v15, "save");

  v16 = *(void **)(a1 + 40);
  if ((v14 & 1) == 0)
  {
    v18 = (void *)MEMORY[0x24BDD1540];
    v19 = -1;
LABEL_10:
    objc_msgSend(v18, "hmErrorWithCode:", v19);
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v16, "respondWithError:", v20);

    goto LABEL_11;
  }
  objc_msgSend(v16, "respondWithSuccess");
LABEL_11:

}

uint64_t __76__HMDHome__handleSetHasAnyUserAcknowledgedCameraRecordingOnboardingRequest___block_invoke(uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)(a1 + 32);
  if (a2)
    return objc_msgSend(v2, "respondWithError:", a2);
  else
    return objc_msgSend(v2, "respondWithSuccess");
}

- (void)_enableMultiUserWithMessage:(void *)a1
{
  id v3;
  void *v4;
  id v5;
  NSObject *v6;
  void *v7;
  HMDHomeModel *v8;
  void *v9;
  void *v10;
  void *v11;
  HMDHomeModel *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  int v17;
  void *v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v3 = a2;
  if (a1)
  {
    if ((objc_msgSend(a1, "isMultiUserEnabled") & 1) != 0)
    {
      objc_msgSend(v3, "respondWithSuccess");
    }
    else
    {
      v4 = (void *)MEMORY[0x227676638]();
      v5 = a1;
      HMFGetOSLogHandle();
      v6 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v7 = (void *)objc_claimAutoreleasedReturnValue();
        v17 = 138543362;
        v18 = v7;
        _os_log_impl(&dword_2218F0000, v6, OS_LOG_TYPE_INFO, "%{public}@Received enable multi-user request", (uint8_t *)&v17, 0xCu);

      }
      objc_autoreleasePoolPop(v4);
      v8 = [HMDHomeModel alloc];
      objc_msgSend(v5, "uuid");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v5, "homeManager");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v10, "uuid");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      v12 = -[HMDBackingStoreModelObject initWithObjectChangeType:uuid:parentUUID:](v8, "initWithObjectChangeType:uuid:parentUUID:", 2, v9, v11);

      -[HMDHomeModel setMultiUserEnabled:](v12, "setMultiUserEnabled:", MEMORY[0x24BDBD1C8]);
      objc_msgSend(v5, "backingStore");
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v3, "name");
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      +[HMDBackingStoreTransactionOptions defaultPreferencesOptions](HMDBackingStoreTransactionOptions, "defaultPreferencesOptions");
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v13, "transaction:options:", v14, v15);
      v16 = (void *)objc_claimAutoreleasedReturnValue();

      objc_msgSend(v16, "add:withMessage:", v12, v3);
      objc_msgSend(v16, "run");

    }
  }

}

void __41__HMDHome__handleEnableMultiUserRequest___block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id WeakRetained;
  void *v8;
  id v9;
  NSObject *v10;
  void *v11;
  void *v12;
  void (**v13)(_QWORD, _QWORD, _QWORD);
  int v14;
  void *v15;
  __int16 v16;
  id v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  v5 = a2;
  v6 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v8 = (void *)MEMORY[0x227676638]();
  v9 = WeakRetained;
  HMFGetOSLogHandle();
  v10 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v14 = 138543618;
    v15 = v11;
    v16 = 2112;
    v17 = v5;
    _os_log_impl(&dword_2218F0000, v10, OS_LOG_TYPE_INFO, "%{public}@Enabled multi-user on the home error: %@", (uint8_t *)&v14, 0x16u);

  }
  objc_autoreleasePoolPop(v8);
  objc_msgSend(*(id *)(a1 + 32), "responseHandler");
  v12 = (void *)objc_claimAutoreleasedReturnValue();

  if (v12)
  {
    objc_msgSend(*(id *)(a1 + 32), "responseHandler");
    v13 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
    ((void (**)(_QWORD, id, id))v13)[2](v13, v5, v6);

  }
}

void __43__HMDHome_handleFindResidentsNotification___block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5;
  void *v6;
  void *v7;
  id v8;
  NSObject *v9;
  void *v10;
  void *v11;
  id v12;
  NSObject *v13;
  void *v14;
  int v15;
  void *v16;
  __int16 v17;
  void *v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v5 = a3;
  v6 = v5;
  if (!a2 || v5)
  {
    if (v5)
    {
      v11 = (void *)MEMORY[0x227676638]();
      v12 = *(id *)(a1 + 32);
      HMFGetOSLogHandle();
      v13 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v14 = (void *)objc_claimAutoreleasedReturnValue();
        v15 = 138543618;
        v16 = v14;
        v17 = 2112;
        v18 = v6;
        _os_log_impl(&dword_2218F0000, v13, OS_LOG_TYPE_INFO, "%{public}@Counting residents in the cloud store failed with error: %@. Starting a full import", (uint8_t *)&v15, 0x16u);

      }
      objc_autoreleasePoolPop(v11);
    }
    objc_msgSend(*(id *)(a1 + 40), "runCompleteMergeTransformForHomeWithModelID:completion:", *(_QWORD *)(a1 + 48), 0);
  }
  else
  {
    v7 = (void *)MEMORY[0x227676638]();
    v8 = *(id *)(a1 + 32);
    HMFGetOSLogHandle();
    v9 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      v15 = 138543618;
      v16 = v10;
      v17 = 2048;
      v18 = a2;
      _os_log_impl(&dword_2218F0000, v9, OS_LOG_TYPE_INFO, "%{public}@Found %lu residents in the cloud store", (uint8_t *)&v15, 0x16u);

    }
    objc_autoreleasePoolPop(v7);
  }

}

void __58__HMDHome__addResidentWithUsername_publicKey_destination___block_invoke(id *a1, void *a2)
{
  id v3;
  id WeakRetained;
  __CFString *v5;
  __CFString *v6;
  void *v7;
  id v8;
  NSObject *v9;
  _BOOL4 v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  int v15;
  void *v16;
  __int16 v17;
  __CFString *v18;
  __int16 v19;
  id v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  v3 = a2;
  WeakRetained = objc_loadWeakRetained(a1 + 6);
  if ((shouldLogPrivateInformation() & 1) != 0)
  {
    objc_msgSend(a1[4], "userID");
    v5 = (__CFString *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v5 = CFSTR("...");
    v6 = CFSTR("...");
  }
  v7 = (void *)MEMORY[0x227676638]();
  v8 = WeakRetained;
  HMFGetOSLogHandle();
  v9 = objc_claimAutoreleasedReturnValue();
  v10 = os_log_type_enabled(v9, OS_LOG_TYPE_ERROR);
  if (v3)
  {
    if (v10)
    {
      HMFGetLogIdentifier();
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      v15 = 138543874;
      v16 = v11;
      v17 = 2112;
      v18 = v5;
      v19 = 2112;
      v20 = v3;
      _os_log_impl(&dword_2218F0000, v9, OS_LOG_TYPE_ERROR, "%{public}@Failed to add resident user '%@' invitation with error: %@", (uint8_t *)&v15, 0x20u);

    }
  }
  else if (v10)
  {
    HMFGetLogIdentifier();
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(a1[5], "identifier");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "UUIDString");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    v15 = 138543874;
    v16 = v12;
    v17 = 2112;
    v18 = v5;
    v19 = 2112;
    v20 = v14;
    _os_log_impl(&dword_2218F0000, v9, OS_LOG_TYPE_ERROR, "%{public}@Tracking adding resident user '%@' with accepted and pending invitation '%@'", (uint8_t *)&v15, 0x20u);

  }
  objc_autoreleasePoolPop(v7);

}

void __46__HMDHome__sendResidentInviteWithDestination___block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id WeakRetained;
  void *v8;
  NSObject *v9;
  void *v10;
  id v11;
  NSObject *v12;
  void *v13;
  void *v14;
  void *v15;
  _QWORD block[4];
  id v17;
  void *v18;
  id v19;
  uint8_t buf[4];
  void *v21;
  __int16 v22;
  void *v23;
  __int16 v24;
  id v25;
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  v5 = a2;
  v6 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v8 = WeakRetained;
  if (v5 || !v6)
  {
    v10 = (void *)MEMORY[0x227676638]();
    v11 = v8;
    HMFGetOSLogHandle();
    v12 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(*(id *)(a1 + 32), "device");
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v14, "remoteDestinationString");
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543874;
      v21 = v13;
      v22 = 2112;
      v23 = v15;
      v24 = 2112;
      v25 = v5;
      _os_log_impl(&dword_2218F0000, v12, OS_LOG_TYPE_ERROR, "%{public}@Failed to receive controller info to auto add user %@ due to error: %@", buf, 0x20u);

    }
    objc_autoreleasePoolPop(v10);
  }
  else if (WeakRetained)
  {
    objc_msgSend(WeakRetained, "workQueue");
    v9 = objc_claimAutoreleasedReturnValue();
    block[0] = MEMORY[0x24BDAC760];
    block[1] = 3221225472;
    block[2] = __46__HMDHome__sendResidentInviteWithDestination___block_invoke_1436;
    block[3] = &unk_24E79BBD0;
    v17 = v6;
    v18 = v8;
    v19 = *(id *)(a1 + 32);
    dispatch_async(v9, block);

  }
}

void __46__HMDHome__sendResidentInviteWithDestination___block_invoke_1436(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  id v6;

  objc_msgSend(*(id *)(a1 + 32), "hmf_stringForKey:", CFSTR("kControllerPairingNameKey"));
  v6 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 32), "hmf_dataForKey:", CFSTR("kControllerPublicKey"));
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = *(void **)(a1 + 40);
  objc_msgSend(*(id *)(a1 + 48), "device");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "remoteDestinationString");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "_addResidentWithUsername:publicKey:destination:", v6, v2, v5);

}

void __61__HMDHome__configureUnconfiguredResident_desiredConfigState___block_invoke(id *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id WeakRetained;
  void *v8;
  NSObject *v9;
  _QWORD block[5];
  id v11;
  id v12;
  id v13;
  id v14;

  v5 = a2;
  v6 = a3;
  WeakRetained = objc_loadWeakRetained(a1 + 6);
  v8 = WeakRetained;
  if (WeakRetained)
  {
    objc_msgSend(WeakRetained, "workQueue");
    v9 = objc_claimAutoreleasedReturnValue();
    block[0] = MEMORY[0x24BDAC760];
    block[1] = 3221225472;
    block[2] = __61__HMDHome__configureUnconfiguredResident_desiredConfigState___block_invoke_2;
    block[3] = &unk_24E79AD20;
    block[4] = v8;
    v11 = a1[4];
    v12 = v5;
    v13 = v6;
    v14 = a1[5];
    dispatch_async(v9, block);

  }
}

void __61__HMDHome__configureUnconfiguredResident_desiredConfigState___block_invoke_2(uint64_t a1)
{
  void *v2;
  void *v3;
  id v4;
  NSObject *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  int v10;
  uint64_t v11;
  void *v12;
  void *v13;
  id v14;
  NSObject *v15;
  void *v16;
  uint64_t v17;
  int v18;
  void *v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  uint64_t v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  objc_msgSend(*(id *)(a1 + 32), "pendingResponsesForRemoteAccessSetup");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "removeObject:", *(_QWORD *)(a1 + 40));

  if (*(_QWORD *)(a1 + 48) || (v9 = *(void **)(a1 + 56)) == 0)
  {
    v3 = (void *)MEMORY[0x227676638]();
    v4 = *(id *)(a1 + 32);
    HMFGetOSLogHandle();
    v5 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      v7 = *(_QWORD *)(a1 + 40);
      v8 = *(_QWORD *)(a1 + 48);
      v18 = 138543874;
      v19 = v6;
      v20 = 2112;
      v21 = v7;
      v22 = 2112;
      v23 = v8;
      _os_log_impl(&dword_2218F0000, v5, OS_LOG_TYPE_INFO, "%{public}@Remote peer %@ failed to look for accessories with error:%@", (uint8_t *)&v18, 0x20u);

    }
    objc_autoreleasePoolPop(v3);
  }
  else
  {
    v10 = objc_msgSend(v9, "hmf_BOOLForKey:", CFSTR("kAtHomeStateKey"));
    objc_msgSend(*(id *)(a1 + 56), "hmf_stringForKey:", CFSTR("kDeviceNameKey"));
    v11 = objc_claimAutoreleasedReturnValue();
    v12 = (void *)v11;
    if (v10 && v11)
    {
      objc_msgSend(*(id *)(a1 + 32), "_sendResidentInviteWithDestination:", *(_QWORD *)(a1 + 64));
    }
    else
    {
      v13 = (void *)MEMORY[0x227676638]();
      v14 = *(id *)(a1 + 32);
      HMFGetOSLogHandle();
      v15 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v16 = (void *)objc_claimAutoreleasedReturnValue();
        v17 = *(_QWORD *)(a1 + 40);
        v18 = 138543618;
        v19 = v16;
        v20 = 2112;
        v21 = v17;
        _os_log_impl(&dword_2218F0000, v15, OS_LOG_TYPE_INFO, "%{public}@Remote peer %@ is not at home", (uint8_t *)&v18, 0x16u);

      }
      objc_autoreleasePoolPop(v13);
    }

  }
}

void __92__HMDHome_notifyNewRemotePeersFound_remoteUsersRemoved_forceRemoteNotificationRegistration___block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t i;
  void *v10;
  __CFString *v11;
  __CFString *v12;
  void *v13;
  id v14;
  NSObject *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  int v26;
  void *v27;
  void *v28;
  int v29;
  void *v30;
  id v31;
  NSObject *v32;
  void *v33;
  void *v34;
  void *v35;
  id v36;
  NSObject *v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  id obj;
  void *v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  _QWORD v48[2];
  _QWORD v49[2];
  uint8_t buf[4];
  void *v51;
  __int16 v52;
  __CFString *v53;
  _BYTE v54[128];
  uint64_t v55;

  v55 = *MEMORY[0x24BDAC8D0];
  v2 = (void *)MEMORY[0x24BDBCEF0];
  objc_msgSend(*(id *)(a1 + 32), "users");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "setWithArray:", v3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(MEMORY[0x24BDBCEF0], "setWithArray:", *(_QWORD *)(a1 + 40));
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "intersectSet:", v5);
  if (objc_msgSend(v4, "count"))
  {
    v40 = v5;
    objc_msgSend(MEMORY[0x24BDBCEB8], "array");
    v43 = (void *)objc_claimAutoreleasedReturnValue();
    v44 = 0u;
    v45 = 0u;
    v46 = 0u;
    v47 = 0u;
    v41 = v4;
    objc_msgSend(v4, "allObjects");
    obj = (id)objc_claimAutoreleasedReturnValue();
    v6 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v44, v54, 16);
    if (v6)
    {
      v7 = v6;
      v8 = *(_QWORD *)v45;
      do
      {
        for (i = 0; i != v7; ++i)
        {
          if (*(_QWORD *)v45 != v8)
            objc_enumerationMutation(obj);
          v10 = *(void **)(*((_QWORD *)&v44 + 1) + 8 * i);
          if ((shouldLogPrivateInformation() & 1) != 0)
          {
            objc_msgSend(v10, "userID");
            v11 = (__CFString *)objc_claimAutoreleasedReturnValue();
          }
          else
          {
            v11 = CFSTR("...");
            v12 = CFSTR("...");
          }
          v13 = (void *)MEMORY[0x227676638]();
          v14 = *(id *)(a1 + 32);
          HMFGetOSLogHandle();
          v15 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
          {
            HMFGetLogIdentifier();
            v16 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 138543618;
            v51 = v16;
            v52 = 2112;
            v53 = v11;
            _os_log_impl(&dword_2218F0000, v15, OS_LOG_TYPE_INFO, "%{public}@Removing remote user %@ since it has de-registered", buf, 0x16u);

          }
          objc_autoreleasePoolPop(v13);
          objc_msgSend(v10, "userID");
          v17 = (void *)objc_claimAutoreleasedReturnValue();

          if (v17)
          {
            objc_msgSend(v10, "userID");
            v18 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v43, "addObject:", v18);

          }
          objc_msgSend(*(id *)(a1 + 32), "_removeOutgoingInvitationForUser:", v10);
          objc_msgSend(*(id *)(a1 + 32), "_removeUserFromContainer:", v10);

        }
        v7 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v44, v54, 16);
      }
      while (v7);
    }

    objc_msgSend(*(id *)(a1 + 32), "usersPendingUserManagementOperations");
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    v4 = v41;
    objc_msgSend(v41, "allObjects");
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v19, "removeObjectsInArray:", v20);

    v48[0] = CFSTR("kUserIDsKey");
    v21 = (void *)objc_msgSend(v43, "copy");
    v48[1] = CFSTR("kHomeUUID");
    v49[0] = v21;
    objc_msgSend(*(id *)(a1 + 32), "uuid");
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v22, "UUIDString");
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    v49[1] = v23;
    objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v49, v48, 2);
    v24 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(*(id *)(a1 + 32), "saveWithReason:information:postSyncNotification:", CFSTR("kRemoteUsersDeregistered"), v24, 0);
    v5 = v40;
  }
  objc_msgSend(*(id *)(a1 + 32), "localCapabilitiesDataSource");
  v25 = (void *)objc_claimAutoreleasedReturnValue();
  v26 = objc_msgSend(v25, "supportsRemoteAccess");

  if (v26)
  {
    objc_msgSend(*(id *)(a1 + 32), "homeManager");
    v27 = (void *)objc_claimAutoreleasedReturnValue();
    if (*(_BYTE *)(a1 + 48))
    {
      if (objc_msgSend(*(id *)(a1 + 32), "reachableAccessoriesCount"))
      {
        if (objc_msgSend(*(id *)(a1 + 32), "allowsRemoteAccess"))
        {
          objc_msgSend(*(id *)(a1 + 32), "currentUser");
          v28 = (void *)objc_claimAutoreleasedReturnValue();
          v29 = objc_msgSend(v28, "isRemoteAccessAllowed");

          if (v29)
          {
            v30 = (void *)MEMORY[0x227676638]();
            v31 = *(id *)(a1 + 32);
            HMFGetOSLogHandle();
            v32 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v32, OS_LOG_TYPE_INFO))
            {
              HMFGetLogIdentifier();
              v33 = (void *)objc_claimAutoreleasedReturnValue();
              *(_DWORD *)buf = 138543362;
              v51 = v33;
              _os_log_impl(&dword_2218F0000, v32, OS_LOG_TYPE_INFO, "%{public}@We have potential remote gateways that can be auto setup, triggering detection", buf, 0xCu);

            }
            objc_autoreleasePoolPop(v30);
            objc_msgSend(*(id *)(a1 + 32), "uuid");
            v34 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v27, "accessoriesAreLocallyReachableOnTransientDevice:forHome:", 1, v34);

          }
        }
      }
    }
    if ((objc_msgSend(*(id *)(a1 + 32), "remoteAccessIsEnabled") & 1) == 0
      && (objc_msgSend(*(id *)(a1 + 32), "isResidentSupported") & 1) == 0)
    {
      v35 = (void *)MEMORY[0x227676638]();
      v36 = *(id *)(a1 + 32);
      HMFGetOSLogHandle();
      v37 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v37, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v38 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543362;
        v51 = v38;
        _os_log_impl(&dword_2218F0000, v37, OS_LOG_TYPE_INFO, "%{public}@Home does not have remote access enabled, requesting electing a remote peer", buf, 0xCu);

      }
      objc_autoreleasePoolPop(v35);
      objc_msgSend(*(id *)(a1 + 32), "uuid");
      v39 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v27, "electRemoteAccessPeerForHome:", v39);

    }
    -[HMDHome _subscribeForNotificationFromRemoteGateway:](*(void **)(a1 + 32), *(_BYTE *)(a1 + 49));

  }
}

- (void)_subscribeForNotificationFromRemoteGateway:(void *)a1
{
  NSObject *v4;
  void *v5;
  id v6;
  NSObject *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  void *v11;
  id v12;
  NSObject *v13;
  void *v14;
  void *v15;
  void *v16;
  int v17;
  void *v18;
  __int16 v19;
  void *v20;
  __int16 v21;
  uint64_t v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  if (a1)
  {
    objc_msgSend(a1, "workQueue");
    v4 = objc_claimAutoreleasedReturnValue();
    dispatch_assert_queue_V2(v4);

    if ((a2 & 1) != 0 || !objc_msgSend(a1, "registeredNotificationWithRemoteGateway"))
    {
      objc_msgSend(a1, "notificationRegistrations");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      v10 = objc_msgSend(v9, "count");

      v11 = (void *)MEMORY[0x227676638]();
      v12 = a1;
      HMFGetOSLogHandle();
      v13 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v14 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v12, "notificationRegistrations");
        v15 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v15, "shortDescription");
        v16 = (void *)objc_claimAutoreleasedReturnValue();
        v17 = 138543874;
        v18 = v14;
        v19 = 2112;
        v20 = v16;
        v21 = 2048;
        v22 = v10;
        _os_log_impl(&dword_2218F0000, v13, OS_LOG_TYPE_INFO, "%{public}@Modifying notification registrations with new remote gateway: %@/%lu", (uint8_t *)&v17, 0x20u);

      }
      objc_autoreleasePoolPop(v11);
      objc_msgSend(v12, "_subscribeForHomeNotificationsFromRemoteGateway:", v10 != 0);
      objc_msgSend(v12, "setRegisteredNotificationWithRemoteGateway:", 1);
    }
    else
    {
      v5 = (void *)MEMORY[0x227676638]();
      v6 = a1;
      HMFGetOSLogHandle();
      v7 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        v17 = 138543362;
        v18 = v8;
        _os_log_impl(&dword_2218F0000, v7, OS_LOG_TYPE_INFO, "%{public}@Already registered for notification with remote gateway, skipping", (uint8_t *)&v17, 0xCu);

      }
      objc_autoreleasePoolPop(v5);
    }
  }
}

uint64_t __31__HMDHome_remoteAccessEnabled___block_invoke(uint64_t a1)
{
  void *v2;
  id v3;
  NSObject *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  id v10;
  NSObject *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  id v20;
  NSObject *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t i;
  void *v31;
  id v32;
  NSObject *v33;
  void *v34;
  void *v35;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  uint8_t v41[128];
  uint8_t buf[4];
  void *v43;
  __int16 v44;
  void *v45;
  uint64_t v46;

  v46 = *MEMORY[0x24BDAC8D0];
  if (*(unsigned __int8 *)(a1 + 40) == objc_msgSend(*(id *)(a1 + 32), "remoteAccessIsEnabled"))
    goto LABEL_25;
  v2 = (void *)MEMORY[0x227676638]();
  v3 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    HMFBooleanToString();
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543618;
    v43 = v5;
    v44 = 2112;
    v45 = v6;
    _os_log_impl(&dword_2218F0000, v4, OS_LOG_TYPE_INFO, "%{public}@Setting remote access enabled to %@", buf, 0x16u);

  }
  objc_autoreleasePoolPop(v2);
  objc_msgSend(*(id *)(a1 + 32), "setRemoteAccessIsEnabled:", *(unsigned __int8 *)(a1 + 40));
  if (!*(_BYTE *)(a1 + 40))
  {
    objc_msgSend(*(id *)(a1 + 32), "WiFiAssertion");
    v18 = (void *)objc_claimAutoreleasedReturnValue();

    if (v18)
    {
      v19 = (void *)MEMORY[0x227676638]();
      v20 = *(id *)(a1 + 32);
      HMFGetOSLogHandle();
      v21 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
      {
        HMFGetLogIdentifier();
        v22 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543362;
        v43 = v22;
        _os_log_impl(&dword_2218F0000, v21, OS_LOG_TYPE_DEFAULT, "%{public}@Releasing WiFi assertion", buf, 0xCu);

      }
      objc_autoreleasePoolPop(v19);
      objc_msgSend(*(id *)(a1 + 32), "wifiManager");
      v23 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(*(id *)(a1 + 32), "WiFiAssertion");
      v24 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v23, "endActiveAssertion:", v24);

      objc_msgSend(*(id *)(a1 + 32), "wifiManager");
      v25 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v25, "releaseWoWAssertion");

      objc_msgSend(*(id *)(a1 + 32), "setWiFiAssertion:", 0);
    }
    goto LABEL_16;
  }
  if (isWatch())
  {
    objc_msgSend(*(id *)(a1 + 32), "homeManager");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    if ((objc_msgSend(v7, "isActive") & 1) != 0)
    {
      objc_msgSend(*(id *)(a1 + 32), "WiFiAssertion");
      v8 = (void *)objc_claimAutoreleasedReturnValue();

      if (v8)
        goto LABEL_16;
      v9 = (void *)MEMORY[0x227676638]();
      v10 = *(id *)(a1 + 32);
      HMFGetOSLogHandle();
      v11 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
      {
        HMFGetLogIdentifier();
        v12 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543362;
        v43 = v12;
        _os_log_impl(&dword_2218F0000, v11, OS_LOG_TYPE_DEFAULT, "%{public}@Taking WiFi assertion", buf, 0xCu);

      }
      objc_autoreleasePoolPop(v9);
      objc_msgSend(*(id *)(a1 + 32), "wifiManager");
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      v14 = (void *)MEMORY[0x24BDD17C8];
      objc_msgSend(*(id *)(a1 + 32), "shortDescription");
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v14, "stringWithFormat:", CFSTR("Remote Access for %@"), v15);
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v13, "beginActiveAssertionWithOptions:reason:", 0, v16);
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(*(id *)(a1 + 32), "setWiFiAssertion:", v17);

      objc_msgSend(*(id *)(a1 + 32), "wifiManager");
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v7, "takeWoWAssertion");
    }

  }
LABEL_16:
  if ((objc_msgSend(*(id *)(a1 + 32), "isResidentSupported") & 1) == 0)
  {
    v39 = 0u;
    v40 = 0u;
    v37 = 0u;
    v38 = 0u;
    objc_msgSend(*(id *)(a1 + 32), "_residentUsers");
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    v27 = objc_msgSend(v26, "countByEnumeratingWithState:objects:count:", &v37, v41, 16);
    if (v27)
    {
      v28 = v27;
      v29 = *(_QWORD *)v38;
      do
      {
        for (i = 0; i != v28; ++i)
        {
          if (*(_QWORD *)v38 != v29)
            objc_enumerationMutation(v26);
          objc_msgSend(*(id *)(a1 + 32), "_notifyClientsOfUpdatedResidentUser:", *(_QWORD *)(*((_QWORD *)&v37 + 1) + 8 * i));
        }
        v28 = objc_msgSend(v26, "countByEnumeratingWithState:objects:count:", &v37, v41, 16);
      }
      while (v28);
    }

  }
LABEL_25:
  v31 = (void *)MEMORY[0x227676638]();
  v32 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v33 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v33, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v34 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543362;
    v43 = v34;
    _os_log_impl(&dword_2218F0000, v33, OS_LOG_TYPE_INFO, "%{public}@Clearing history of all heartbeat queued messages to server", buf, 0xCu);

  }
  objc_autoreleasePoolPop(v31);
  objc_msgSend(*(id *)(a1 + 32), "heartbeatPingMessagesQueuedWithServer");
  v35 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v35, "removeAllObjects");

  return objc_msgSend(*(id *)(a1 + 32), "_remoteAccessEnabled:", *(unsigned __int8 *)(a1 + 40));
}

uint64_t __56__HMDHome_updateNetworkConnectivity_companionReachable___block_invoke(uint64_t a1)
{
  int v2;
  int v3;
  void *v4;
  uint64_t result;
  void *v6;
  id v7;
  NSObject *v8;
  void *v9;
  int v10;
  void *v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v2 = objc_msgSend(*(id *)(a1 + 32), "isNetworkAvailable");
  v3 = *(unsigned __int8 *)(a1 + 40);
  if (v3 != v2)
    objc_msgSend(*(id *)(a1 + 32), "setIsNetworkAvailable:", v3 != 0);
  objc_msgSend(*(id *)(a1 + 32), "remoteEventRouterClientController");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "networkAvailabilityDidChange:", *(unsigned __int8 *)(a1 + 40));

  isWatch();
  result = objc_msgSend(*(id *)(a1 + 32), "remoteAccessIsEnabled");
  if ((_DWORD)result)
  {
    v6 = (void *)MEMORY[0x227676638]();
    v7 = *(id *)(a1 + 32);
    HMFGetOSLogHandle();
    v8 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      v10 = 138543362;
      v11 = v9;
      _os_log_impl(&dword_2218F0000, v8, OS_LOG_TYPE_INFO, "%{public}@We have no network connectivity, setting reachability state for all accessories to reflect their state", (uint8_t *)&v10, 0xCu);

    }
    objc_autoreleasePoolPop(v6);
    return objc_msgSend(*(id *)(a1 + 32), "_remoteAccessEnabled:", *(unsigned __int8 *)(a1 + 40));
  }
  return result;
}

void __51__HMDHome_handlePrimaryResidentChangeNotification___block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  int v5;
  void *v6;
  id v7;
  NSObject *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  int v15;
  void *v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  objc_msgSend(*(id *)(a1 + 32), "userInfo");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "hmf_UUIDForKey:", CFSTR("HMDResidentDeviceHomeUUIDNotificationKey"));
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(*(id *)(a1 + 40), "uuid");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v4, "hmf_isEqualToUUID:", v3);

  if (v5)
  {
    if (objc_msgSend(*(id *)(a1 + 40), "isCurrentDeviceConfirmedPrimaryResident"))
    {
      v6 = (void *)MEMORY[0x227676638]();
      v7 = *(id *)(a1 + 40);
      HMFGetOSLogHandle();
      v8 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        v15 = 138543362;
        v16 = v9;
        _os_log_impl(&dword_2218F0000, v8, OS_LOG_TYPE_INFO, "%{public}@Resetting accessory browsers", (uint8_t *)&v15, 0xCu);

      }
      objc_autoreleasePoolPop(v6);
      objc_msgSend(*(id *)(a1 + 40), "accessoryBrowser");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v10, "restartBrowsers");

      objc_msgSend(*(id *)(a1 + 40), "_evaluateShouldRelaunchAndSetRelaunch");
      objc_msgSend(*(id *)(a1 + 40), "_processUnsentOutgoingInvitations");
      objc_msgSend(*(id *)(a1 + 40), "_processUnacceptReverseShareAccessForUsers");
      objc_msgSend(*(id *)(a1 + 40), "_fixupUsersWithoutMergeID");
      objc_msgSend(*(id *)(a1 + 40), "_fixupHindsightOnboarding");
      if (objc_msgSend(*(id *)(a1 + 40), "isOwnerUser"))
      {
        objc_msgSend(*(id *)(a1 + 40), "homeManager");
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v11, "homeOwnerCloudShareManager");
        v12 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v12, "updateSharedOwnerAccountHandleForHome:", *(_QWORD *)(a1 + 40));

      }
      objc_msgSend(*(id *)(a1 + 40), "updateCATIDForUsersIfNeeded:", 0);
      objc_msgSend(*(id *)(a1 + 40), "updateMatterFabricIDIfNeeded");
      objc_msgSend(*(id *)(a1 + 40), "currentUser");
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v13, "scheduleRestrictedGuestAccessTimersWithReason:", CFSTR("Primary changed on controller"));

      objc_msgSend(*(id *)(a1 + 40), "notificationRegistry");
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v14, "reprocessEnabledCharacteristicRegistrations");
    }
    else
    {
      objc_msgSend(*(id *)(a1 + 40), "notificationRegistry");
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v14, "disableAllRegistrations");
    }

    if (objc_msgSend(*(id *)(a1 + 40), "isCurrentDeviceAvailableResident"))
      objc_msgSend(*(id *)(a1 + 40), "updateAccessoryBrowsing");
    objc_msgSend(*(id *)(a1 + 40), "_notifyThreadLayerOfResidentChange");
  }

}

void __32__HMDHome__handleResidentChange__block_invoke(uint64_t a1, void *a2)
{
  id v3;
  id WeakRetained;
  void *v5;
  id v6;
  NSObject *v7;
  void *v8;
  int v9;
  void *v10;
  __int16 v11;
  id v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v3 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v5 = (void *)MEMORY[0x227676638]();
    v6 = WeakRetained;
    HMFGetOSLogHandle();
    v7 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
    {
      HMFGetLogIdentifier();
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      v9 = 138543618;
      v10 = v8;
      v11 = 2112;
      v12 = v3;
      _os_log_impl(&dword_2218F0000, v7, OS_LOG_TYPE_DEBUG, "%{public}@Activating trigger after resident change finished with error (%@)", (uint8_t *)&v9, 0x16u);

    }
    objc_autoreleasePoolPop(v5);
  }

}

void __37__HMDHome_migrateAfterResidentChange__block_invoke(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "_handleResidentChange");

}

void __51__HMDHome__handleCharacteristicEnableNotification___block_invoke(uint64_t a1, void *a2)
{
  uint64_t v4;
  id *v5;
  uint64_t v6;
  id v7;

  v7 = a2;
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v6 = *(_QWORD *)(v4 + 40);
  v5 = (id *)(v4 + 40);
  if (!v6)
    objc_storeStrong(v5, a2);
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));

}

void __51__HMDHome__handleCharacteristicEnableNotification___block_invoke_2(uint64_t a1)
{
  void *v2;
  id v3;

  objc_msgSend(*(id *)(a1 + 32), "responseHandler");
  v2 = (void *)objc_claimAutoreleasedReturnValue();

  if (v2)
  {
    objc_msgSend(*(id *)(a1 + 32), "responseHandler");
    v3 = (id)objc_claimAutoreleasedReturnValue();
    (*((void (**)(id, _QWORD, _QWORD))v3 + 2))(v3, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), 0);

  }
}

HMDCharacteristicUpdateTuple *__45__HMDHome__handlePendingResponsesTimerFired___block_invoke(uint64_t a1, void *a2)
{
  id v2;
  void *v3;
  HMDCharacteristicUpdateTuple *v4;
  HMDCharacteristicUpdateTuple *v5;
  void *v6;
  void *v7;
  void *v8;

  v2 = a2;
  objc_msgSend(v2, "error");
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  if (v3)
  {
    v4 = 0;
  }
  else
  {
    v5 = [HMDCharacteristicUpdateTuple alloc];
    objc_msgSend(v2, "request");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "characteristic");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "value");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v4 = -[HMDCharacteristicUpdateTuple initWithCharacteristic:updatedValue:isBroadcast:](v5, "initWithCharacteristic:updatedValue:isBroadcast:", v7, v8, 0);

  }
  return v4;
}

- (id)_stringToUnsignedLongLongNumber:(uint64_t)a1
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  uint64_t v8;

  v3 = a2;
  v4 = v3;
  if (a1 && objc_msgSend(v3, "hmf_isInteger"))
  {
    objc_msgSend(MEMORY[0x24BDD17A8], "scannerWithString:", v4);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = 0;
    v6 = 0;
    if (objc_msgSend(v5, "scanUnsignedLongLong:", &v8))
    {
      objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedLongLong:", v8);
      v6 = (void *)objc_claimAutoreleasedReturnValue();
    }

  }
  else
  {
    v6 = 0;
  }

  return v6;
}

HMDCharacteristicRequest *__62__HMDHome__readRequestTuplesFromMessage_outUnhandledRequests___block_invoke(uint64_t a1, uint64_t a2)
{
  return +[HMDCharacteristicRequest requestWithCharacteristic:](HMDCharacteristicRequest, "requestWithCharacteristic:", a2);
}

void __99__HMDHome_readCharacteristicValues_source_sourceForLogging_qualityOfService_withCompletionHandler___block_invoke(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  id v8;
  NSObject *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  int v13;
  void *v14;
  __int16 v15;
  void *v16;
  __int16 v17;
  uint64_t v18;
  const __CFString *v19;
  _QWORD v20[2];

  v20[1] = *MEMORY[0x24BDAC8D0];
  v2 = (void *)MEMORY[0x24BE3F1B0];
  v3 = *(_QWORD *)(a1 + 72);
  objc_msgSend(MEMORY[0x24BE3F1B8], "allMessageDestinations");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v19 = CFSTR("kMultiPartResponseKey");
  v20[0] = MEMORY[0x24BDBD1C0];
  objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v20, &v19, 1);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "messageWithName:qualityOfService:destination:payload:", CFSTR("kMultipleCharacteristicReadRequestKey"), v3, v4, v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  v7 = (void *)MEMORY[0x227676638]();
  v8 = *(id *)(a1 + 40);
  HMFGetOSLogHandle();
  v9 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "identifier");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v12 = *(_QWORD *)(a1 + 48);
    v13 = 138543874;
    v14 = v10;
    v15 = 2114;
    v16 = v11;
    v17 = 2114;
    v18 = v12;
    _os_log_impl(&dword_2218F0000, v9, OS_LOG_TYPE_INFO, "%{public}@Issuing read requests with identifier %{public}@, Source: %{public}@", (uint8_t *)&v13, 0x20u);

  }
  objc_autoreleasePoolPop(v7);
  objc_msgSend(*(id *)(a1 + 40), "_readCharacteristicValues:requestMessage:source:withCompletionHandler:", *(_QWORD *)(a1 + 56), v6, *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 64));

}

void __93__HMDHome_readCharacteristicValues_identifier_source_qualityOfService_withCompletionHandler___block_invoke(uint64_t a1)
{
  void (**v2)(_QWORD);
  uint64_t v3;
  void *v4;
  void *v5;
  void *v6;
  id v7;
  NSObject *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  _QWORD aBlock[4];
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  __int128 v18;
  id location[4];

  location[3] = *(id *)MEMORY[0x24BDAC8D0];
  if (objc_msgSend(*(id *)(a1 + 40), "count"))
  {
    objc_initWeak(location, *(id *)(a1 + 48));
    aBlock[0] = MEMORY[0x24BDAC760];
    aBlock[1] = 3221225472;
    aBlock[2] = __93__HMDHome_readCharacteristicValues_identifier_source_qualityOfService_withCompletionHandler___block_invoke_1408;
    aBlock[3] = &unk_24E776B80;
    objc_copyWeak(&v17, location);
    v16 = *(id *)(a1 + 64);
    v13 = *(id *)(a1 + 32);
    v18 = *(_OWORD *)(a1 + 72);
    v14 = *(id *)(a1 + 56);
    v15 = *(id *)(a1 + 40);
    v2 = (void (**)(_QWORD))_Block_copy(aBlock);
    if (objc_msgSend(*(id *)(a1 + 48), "_shouldWaitForAccessoriesToBeReachable"))
    {
      v3 = *(_QWORD *)(a1 + 40);
      objc_msgSend(*(id *)(a1 + 48), "workQueue");
      v4 = (void *)objc_claimAutoreleasedReturnValue();
      +[HMDHomeAssistantOperation homeAssistantOperationWithReadRequests:queue:](HMDHomeAssistantOperation, "homeAssistantOperationWithReadRequests:queue:", v3, v4);
      v5 = (void *)objc_claimAutoreleasedReturnValue();

      objc_msgSend(*(id *)(a1 + 48), "_performOperation:completion:", v5, v2);
    }
    else
    {
      v2[2](v2);
    }

    objc_destroyWeak(&v17);
    objc_destroyWeak(location);
    v10 = 0;
  }
  else
  {
    v6 = (void *)MEMORY[0x227676638]();
    v7 = *(id *)(a1 + 48);
    HMFGetOSLogHandle();
    v8 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      LODWORD(location[0]) = 138543362;
      *(id *)((char *)location + 4) = v9;
      _os_log_impl(&dword_2218F0000, v8, OS_LOG_TYPE_ERROR, "%{public}@Empty characteristics array was given", (uint8_t *)location, 0xCu);

    }
    objc_autoreleasePoolPop(v6);
    objc_msgSend(MEMORY[0x24BDD1540], "errorWithDomain:code:userInfo:", *MEMORY[0x24BDD5BD8], 3, 0);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v11 = *(_QWORD *)(a1 + 64);
    if (v11)
      (*(void (**)(uint64_t, void *, _QWORD))(v11 + 16))(v11, v10, 0);
  }

}

void __93__HMDHome_readCharacteristicValues_identifier_source_qualityOfService_withCompletionHandler___block_invoke_1408(uint64_t a1)
{
  id WeakRetained;
  void *v3;
  void *v4;
  id v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  id v10;
  NSObject *v11;
  void *v12;
  void *v13;
  unint64_t v14;
  __CFString *v15;
  uint64_t v16;
  void *v17;
  void *v18;
  NSObject *v19;
  void *v20;
  __CFString *v21;
  int v22;
  void *v23;
  __int16 v24;
  void *v25;
  __int16 v26;
  __CFString *v27;
  _QWORD v28[2];
  _QWORD v29[3];

  v29[2] = *MEMORY[0x24BDAC8D0];
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 64));
  if (WeakRetained)
  {
    objc_msgSend(*(id *)(a1 + 32), "begin");
    v28[0] = CFSTR("sourceType");
    objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedInteger:", *(_QWORD *)(a1 + 72));
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    v28[1] = CFSTR("kMultiPartResponseKey");
    v29[0] = v3;
    v29[1] = MEMORY[0x24BDBD1C8];
    objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v29, v28, 2);
    v4 = (void *)objc_claimAutoreleasedReturnValue();

    v5 = objc_alloc(MEMORY[0x24BE3F1D0]);
    v6 = *(_QWORD *)(a1 + 80);
    objc_msgSend(MEMORY[0x24BE3F1B8], "allMessageDestinations");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = (void *)objc_msgSend(v5, "initWithName:qualityOfService:destination:payload:", CFSTR("kMultipleCharacteristicReadRequestKey"), v6, v7, v4);

    v9 = (void *)MEMORY[0x227676638](objc_msgSend(v8, "setIdentifier:", *(_QWORD *)(a1 + 40)));
    v10 = WeakRetained;
    HMFGetOSLogHandle();
    v11 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v8, "identifier");
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      v14 = *(_QWORD *)(a1 + 72);
      if (v14 > 9)
        v15 = CFSTR("Unknown");
      else
        v15 = off_24E780100[v14];
      v21 = v15;
      v22 = 138543874;
      v23 = v12;
      v24 = 2114;
      v25 = v13;
      v26 = 2114;
      v27 = v21;
      _os_log_impl(&dword_2218F0000, v11, OS_LOG_TYPE_INFO, "%{public}@Issuing read requests with identifier %{public}@, Source: %{public}@", (uint8_t *)&v22, 0x20u);

    }
    objc_autoreleasePoolPop(v9);
    objc_msgSend(v10, "_readCharacteristicValues:requestMessage:source:withCompletionHandler:", *(_QWORD *)(a1 + 48), v8, *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 56));
    objc_msgSend(*(id *)(a1 + 32), "end");

  }
  else
  {
    v16 = *(_QWORD *)(a1 + 56);
    if (v16)
    {
      objc_msgSend(MEMORY[0x24BDD1540], "errorWithDomain:code:userInfo:", *MEMORY[0x24BDD5BD8], 3, 0);
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      (*(void (**)(uint64_t, void *, _QWORD))(v16 + 16))(v16, v17, 0);

    }
    v18 = (void *)MEMORY[0x227676638]();
    HMFGetOSLogHandle();
    v19 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      v22 = 138543362;
      v23 = v20;
      _os_log_impl(&dword_2218F0000, v19, OS_LOG_TYPE_INFO, "%{public}@Home does not exist anymore, cannot perform read request", (uint8_t *)&v22, 0xCu);

    }
    objc_autoreleasePoolPop(v18);
  }

}

void __40__HMDHome__performOperation_completion___block_invoke(uint64_t a1)
{
  id v2;
  void *v3;
  id WeakRetained;

  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    v2 = objc_loadWeakRetained((id *)(a1 + 48));
    objc_msgSend(v2, "assistantOperations");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "removeObject:", WeakRetained);

  }
}

+ (unint64_t)sanitizedOriginalSourceForMessage:(uint64_t)a1
{
  id v2;
  void *v3;
  void *v4;
  void *v5;
  unint64_t v6;
  void *v7;
  id v8;
  NSObject *v9;
  void *v10;
  int v12;
  void *v13;
  __int16 v14;
  const __CFString *v15;
  __int16 v16;
  void *v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  v2 = a2;
  v3 = (void *)objc_opt_self();
  objc_msgSend(v2, "messagePayload");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "hmf_numberForKey:", CFSTR("kMessageOriginalSourceKey"));
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  if (v5)
  {
    v6 = objc_msgSend(v5, "unsignedIntegerValue");
    if (v6 >= 0xA)
    {
      v7 = (void *)MEMORY[0x227676638]();
      v8 = v3;
      HMFGetOSLogHandle();
      v9 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        v12 = 138543874;
        v13 = v10;
        v14 = 2114;
        v15 = CFSTR("kMessageOriginalSourceKey");
        v16 = 2114;
        v17 = v5;
        _os_log_impl(&dword_2218F0000, v9, OS_LOG_TYPE_ERROR, "%{public}@Unknown value for '%{public}@': %{public}@", (uint8_t *)&v12, 0x20u);

      }
      objc_autoreleasePoolPop(v7);
      v6 = 0;
    }
  }
  else
  {
    v6 = parseMessageSource(v2);
  }

  return v6;
}

- (void)_applyDeviceLockCheck:(unint64_t)a3 forSource:(void *)a4 message:(void *)a5 completion:
{
  int v8;
  void *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  __CFString *v13;
  __CFString *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  int v19;
  void *v20;
  void *v21;
  void *v22;
  unsigned __int8 v23;
  int v24;
  void *v25;
  id v26;
  NSObject *v27;
  void *v28;
  __CFString *v29;
  __CFString *v30;
  void *v31;
  id v32;
  NSObject *v33;
  void *v34;
  void *v35;
  id v36;
  void *v37;
  id v38;
  NSObject *v39;
  void *v40;
  const __CFString *v41;
  __CFString *v42;
  void *v43;
  id v44;
  NSObject *v45;
  void *v46;
  __CFString *v47;
  __CFString *v48;
  id v49;
  id v50;
  int v51;
  id v52;
  __CFString *obj;
  uint64_t v55;
  void *v56;
  void *v57;
  _QWORD v58[4];
  __CFString *v59;
  id v60;
  id v61;
  id v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  uint8_t buf[4];
  void *v68;
  __int16 v69;
  const __CFString *v70;
  __int16 v71;
  const __CFString *v72;
  __int16 v73;
  __CFString *v74;
  _BYTE v75[128];
  uint64_t v76;

  v76 = *MEMORY[0x24BDAC8D0];
  v50 = a2;
  v52 = a4;
  v49 = a5;
  if (a1)
  {
    v8 = objc_msgSend(a1, "synchronouslyFetchIsCarPlayConnectedStatus");
    v57 = a1;
    objc_msgSend(a1, "deviceLockStateDataSource");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v10 = objc_msgSend(v9, "isPasscodeEnabled");

    v65 = 0u;
    v66 = 0u;
    v63 = 0u;
    v64 = 0u;
    obj = (__CFString *)v50;
    v11 = -[__CFString countByEnumeratingWithState:objects:count:](obj, "countByEnumeratingWithState:objects:count:", &v63, v75, 16);
    if (v11)
    {
      v55 = *(_QWORD *)v64;
      v51 = v10 & v8;
LABEL_4:
      v12 = 0;
      while (1)
      {
        if (*(_QWORD *)v64 != v55)
          objc_enumerationMutation(obj);
        v13 = *(__CFString **)(*((_QWORD *)&v63 + 1) + 8 * v12);
        -[__CFString characteristic](v13, "characteristic", v49);
        v14 = (__CFString *)objc_claimAutoreleasedReturnValue();
        -[__CFString service](v14, "service");
        v15 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v57, "hapMetadata");
        v16 = (void *)objc_claimAutoreleasedReturnValue();
        -[__CFString type](v14, "type");
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v15, "type");
        v18 = (void *)objc_claimAutoreleasedReturnValue();
        v19 = objc_msgSend(v16, "requiresDeviceUnlock:forService:", v17, v18);

        if (v19)
        {
          objc_msgSend(v57, "hapMetadata");
          v20 = (void *)objc_claimAutoreleasedReturnValue();
          -[__CFString type](v14, "type");
          v21 = (void *)objc_claimAutoreleasedReturnValue();
          -[__CFString value](v13, "value");
          v22 = (void *)objc_claimAutoreleasedReturnValue();
          v23 = objc_msgSend(v20, "allowsSecuringWriteFor:withValue:", v21, v22);

          if (((a3 == 1) & v23) == 0)
          {
            v24 = v51
                ? objc_msgSend(v57, "isCarPlayAccessAllowedForCharacteristic:withMessage:fromSource:", v14, v52, a3)
                : 0;
            if (((objc_msgSend(v57, "isAccessAllowedForCharacteristicsWithMessage:", v52) | v24) & 1) == 0)
              break;
          }
        }

        if (v11 == ++v12)
        {
          v11 = -[__CFString countByEnumeratingWithState:objects:count:](obj, "countByEnumeratingWithState:objects:count:", &v63, v75, 16);
          if (v11)
            goto LABEL_4;
          goto LABEL_19;
        }
      }
      HMDSecureAccessErrorCodeForMessage(v52, a3);
      v56 = (void *)objc_claimAutoreleasedReturnValue();
      v25 = (void *)MEMORY[0x227676638]();
      v26 = v57;
      HMFGetOSLogHandle();
      v27 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v27, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v28 = (void *)objc_claimAutoreleasedReturnValue();
        if (a3 > 9)
          v29 = CFSTR("Unknown");
        else
          v29 = off_24E780100[a3];
        v30 = v29;
        *(_DWORD *)buf = 138544130;
        v68 = v28;
        v69 = 2112;
        v70 = v13;
        v71 = 2112;
        v72 = v14;
        v73 = 2112;
        v74 = v30;
        _os_log_impl(&dword_2218F0000, v27, OS_LOG_TYPE_INFO, "%{public}@Write request (%@) for characteristic: %@ from source: %@ is attempting to perform a securing write", buf, 0x2Au);

      }
      objc_autoreleasePoolPop(v25);

      if (a3 != 1)
        goto LABEL_28;
      if (!v56)
        goto LABEL_34;
      v31 = (void *)MEMORY[0x227676638]();
      v32 = v26;
      HMFGetOSLogHandle();
      v33 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v33, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v34 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543362;
        v68 = v34;
        _os_log_impl(&dword_2218F0000, v33, OS_LOG_TYPE_INFO, "%{public}@Checking siri unlock access for siri triggered write request", buf, 0xCu);

      }
      objc_autoreleasePoolPop(v31);
      objc_initWeak((id *)buf, v32);
      objc_msgSend(v32, "siriSecureAccessoryAccessController");
      v35 = (void *)objc_claimAutoreleasedReturnValue();
      v58[0] = MEMORY[0x24BDAC760];
      v58[1] = 3221225472;
      v58[2] = __62__HMDHome__applyDeviceLockCheck_forSource_message_completion___block_invoke;
      v58[3] = &unk_24E776BD0;
      objc_copyWeak(&v62, (id *)buf);
      v61 = v49;
      v59 = obj;
      v36 = v56;
      v60 = v36;
      objc_msgSend(v35, "isUnsecuringSiriActionAllowedWithCompletion:", v58);

      objc_destroyWeak(&v62);
      objc_destroyWeak((id *)buf);

    }
    else
    {
LABEL_19:

      if (a3 == 1)
      {
LABEL_34:
        v43 = (void *)MEMORY[0x227676638]();
        v44 = v57;
        HMFGetOSLogHandle();
        v45 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v45, OS_LOG_TYPE_INFO))
        {
          HMFGetLogIdentifier();
          v46 = (void *)objc_claimAutoreleasedReturnValue();
          v47 = CFSTR("Siri");
          *(_DWORD *)buf = 138543874;
          v68 = v46;
          v69 = 2112;
          v70 = obj;
          v71 = 2112;
          v72 = CFSTR("Siri");
          _os_log_impl(&dword_2218F0000, v45, OS_LOG_TYPE_INFO, "%{public}@Access is allowed for write requests (%@) from source: %@", buf, 0x20u);

        }
        objc_autoreleasePoolPop(v43);
        (*((void (**)(id, uint64_t, _QWORD))v49 + 2))(v49, 1, 0);
      }
      else
      {
        v56 = 0;
LABEL_28:
        v37 = (void *)MEMORY[0x227676638]();
        v38 = v57;
        HMFGetOSLogHandle();
        v39 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v39, OS_LOG_TYPE_INFO))
        {
          HMFGetLogIdentifier();
          v40 = (void *)objc_claimAutoreleasedReturnValue();
          if (v56)
            v41 = CFSTR("denied");
          else
            v41 = CFSTR("allowed");
          if (a3 > 9)
            v42 = CFSTR("Unknown");
          else
            v42 = off_24E780100[a3];
          v48 = v42;
          *(_DWORD *)buf = 138544130;
          v68 = v40;
          v69 = 2112;
          v70 = v41;
          v71 = 2112;
          v72 = obj;
          v73 = 2112;
          v74 = v48;
          _os_log_impl(&dword_2218F0000, v39, OS_LOG_TYPE_INFO, "%{public}@Access is %@ for write requests (%@) from source: %@", buf, 0x2Au);

        }
        objc_autoreleasePoolPop(v37);
        (*((void (**)(id, BOOL, void *))v49 + 2))(v49, v56 == 0, v56);

      }
    }
  }

}

void __62__HMDHome__applyDeviceLockCheck_forSource_message_completion___block_invoke(uint64_t a1, int a2)
{
  id WeakRetained;
  void *v5;
  id v6;
  NSObject *v7;
  void *v8;
  const __CFString *v9;
  uint64_t v10;
  NSObject *v11;
  uint64_t v12;
  void *v13;
  _QWORD block[4];
  id v15;
  id v16;
  char v17;
  uint8_t buf[4];
  void *v19;
  __int16 v20;
  const __CFString *v21;
  __int16 v22;
  uint64_t v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  if (WeakRetained)
  {
    v5 = (void *)MEMORY[0x227676638]();
    v6 = WeakRetained;
    HMFGetOSLogHandle();
    v7 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      v9 = CFSTR("denied");
      v10 = *(_QWORD *)(a1 + 32);
      *(_DWORD *)buf = 138543874;
      v19 = v8;
      if (a2)
        v9 = CFSTR("allowed");
      v20 = 2112;
      v21 = v9;
      v22 = 2112;
      v23 = v10;
      _os_log_impl(&dword_2218F0000, v7, OS_LOG_TYPE_INFO, "%{public}@Access is %@ for write requests (%@) by siri watch authentication", buf, 0x20u);

    }
    objc_autoreleasePoolPop(v5);
    objc_msgSend(v6, "workQueue");
    v11 = objc_claimAutoreleasedReturnValue();
    block[0] = MEMORY[0x24BDAC760];
    block[1] = 3221225472;
    block[2] = __62__HMDHome__applyDeviceLockCheck_forSource_message_completion___block_invoke_1396;
    block[3] = &unk_24E78D3F8;
    v16 = *(id *)(a1 + 48);
    v17 = a2;
    v15 = *(id *)(a1 + 40);
    dispatch_async(v11, block);

  }
  else
  {
    v12 = *(_QWORD *)(a1 + 48);
    objc_msgSend(MEMORY[0x24BDD1540], "hmErrorWithCode:", 20);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    (*(void (**)(uint64_t, _QWORD, void *))(v12 + 16))(v12, 0, v13);

  }
}

uint64_t __62__HMDHome__applyDeviceLockCheck_forSource_message_completion___block_invoke_1396(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 40);
  if (*(_BYTE *)(a1 + 48))
    v3 = 0;
  else
    v3 = *(_QWORD *)(a1 + 32);
  return (*(uint64_t (**)(uint64_t, BOOL, uint64_t))(v2 + 16))(v2, *(_BYTE *)(a1 + 48) != 0, v3);
}

void __46__HMDHome__handleMultipleCharacteristicWrite___block_invoke(uint64_t a1, char a2, void *a3)
{
  id v5;
  id WeakRetained;
  void *v7;
  void *v8;
  void *v9;
  id v10;
  NSObject *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  unint64_t v16;
  __CFString *v17;
  __CFString *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  _BYTE buf[18];
  __int16 v24;
  __int128 *v25;
  __int16 v26;
  __CFString *v27;
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  v5 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  v7 = WeakRetained;
  if ((a2 & 1) != 0)
  {
    v8 = *(void **)(a1 + 32);
    if (WeakRetained)
    {
      v9 = (void *)MEMORY[0x227676638](objc_msgSend(WeakRetained, "startReportingSessionForMessage:", *(_QWORD *)(a1 + 32)));
      v10 = v7;
      HMFGetOSLogHandle();
      v11 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v12 = (void *)objc_claimAutoreleasedReturnValue();
        *(_QWORD *)buf = 0;
        *(_QWORD *)&buf[8] = 0;
        objc_msgSend(*(id *)(a1 + 32), "identifier");
        v13 = (void *)objc_claimAutoreleasedReturnValue();

        if (v13)
        {
          objc_msgSend(*(id *)(a1 + 32), "identifier");
          v14 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v14, "getUUIDBytes:", buf);

        }
        else
        {
          *(_OWORD *)buf = *MEMORY[0x24BE3F2C8];
        }
        v22 = *(_OWORD *)buf;
        v16 = *(_QWORD *)(a1 + 64);
        if (v16 > 9)
          v17 = CFSTR("Unknown");
        else
          v17 = off_24E780100[v16];
        v18 = v17;
        *(_DWORD *)buf = 138544130;
        *(_QWORD *)&buf[4] = v12;
        *(_WORD *)&buf[12] = 1042;
        *(_DWORD *)&buf[14] = 16;
        v24 = 2098;
        v25 = &v22;
        v26 = 2114;
        v27 = v18;
        _os_log_impl(&dword_2218F0000, v11, OS_LOG_TYPE_INFO, "%{public}@Handling multiple characteristics write requests with identifier: %{public,uuid_t}.16P, source: %{public}@", buf, 0x26u);

      }
      objc_autoreleasePoolPop(v9);
      v20 = *(_QWORD *)(a1 + 32);
      v19 = *(_QWORD *)(a1 + 40);
      v21 = *(_QWORD *)(a1 + 64);
      objc_msgSend(v10, "__readWriteResponseHandler:unhandledRequests:", v20, *(_QWORD *)(a1 + 48));
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v10, "_writeCharacteristicValues:requestMessage:source:withCompletionHandler:", v19, v20, v21, v15);
    }
    else
    {
      objc_msgSend(MEMORY[0x24BDD1540], "hmErrorWithCode:", 20);
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v8, "respondWithError:", v15);
    }

  }
  else
  {
    objc_msgSend(*(id *)(a1 + 32), "respondWithError:", v5);
  }

}

void __38__HMDHome__handleCharacteristicWrite___block_invoke(uint64_t a1, char a2, void *a3)
{
  id v5;
  id WeakRetained;
  void *v7;
  void *v8;
  id v9;
  NSObject *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  void *v18;
  id v19;
  NSObject *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  __CFString *v26;
  __CFString *v27;
  void *v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  __int128 v32;
  _BYTE buf[42];
  __int16 v34;
  uint64_t v35;
  __int16 v36;
  uint64_t v37;
  uint64_t v38;

  v38 = *MEMORY[0x24BDAC8D0];
  v5 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 80));
  v7 = WeakRetained;
  if ((a2 & 1) != 0)
  {
    if (WeakRetained)
    {
      v8 = (void *)MEMORY[0x227676638]();
      v9 = v7;
      HMFGetOSLogHandle();
      v10 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(*(id *)(a1 + 32), "shortDescription");
        v12 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(*(id *)(a1 + 40), "UUIDString");
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(*(id *)(a1 + 48), "uniqueIdentifier");
        v14 = (void *)objc_claimAutoreleasedReturnValue();
        v15 = *(_QWORD *)(a1 + 56);
        v16 = *(_QWORD *)(a1 + 64);
        *(_DWORD *)buf = 138544642;
        *(_QWORD *)&buf[4] = v11;
        *(_WORD *)&buf[12] = 2112;
        *(_QWORD *)&buf[14] = v12;
        *(_WORD *)&buf[22] = 2112;
        *(_QWORD *)&buf[24] = v13;
        *(_WORD *)&buf[32] = 2112;
        *(_QWORD *)&buf[34] = v14;
        v34 = 2112;
        v35 = v15;
        v36 = 2112;
        v37 = v16;
        _os_log_impl(&dword_2218F0000, v10, OS_LOG_TYPE_INFO, "%{public}@Processing single characteristic write request: %@ (%@/%@/%@/%@) as a special case of multiple characteristic write requests", buf, 0x3Eu);

      }
      objc_autoreleasePoolPop(v8);
      v17 = parseMessageSource(*(void **)(a1 + 32));
      v18 = (void *)MEMORY[0x227676638]();
      v19 = v9;
      HMFGetOSLogHandle();
      v20 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v20, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v21 = (void *)objc_claimAutoreleasedReturnValue();
        *(_QWORD *)buf = 0;
        *(_QWORD *)&buf[8] = 0;
        objc_msgSend(*(id *)(a1 + 32), "identifier");
        v22 = (void *)objc_claimAutoreleasedReturnValue();

        if (v22)
        {
          objc_msgSend(*(id *)(a1 + 32), "identifier");
          v23 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v23, "getUUIDBytes:", buf);

        }
        else
        {
          *(_OWORD *)buf = *MEMORY[0x24BE3F2C8];
        }
        v32 = *(_OWORD *)buf;
        if (v17 > 9)
          v26 = CFSTR("Unknown");
        else
          v26 = off_24E780100[v17];
        v27 = v26;
        *(_DWORD *)buf = 138544130;
        *(_QWORD *)&buf[4] = v21;
        *(_WORD *)&buf[12] = 1042;
        *(_DWORD *)&buf[14] = 16;
        *(_WORD *)&buf[18] = 2098;
        *(_QWORD *)&buf[20] = &v32;
        *(_WORD *)&buf[28] = 2114;
        *(_QWORD *)&buf[30] = v27;
        _os_log_impl(&dword_2218F0000, v20, OS_LOG_TYPE_INFO, "%{public}@Handling single characteristic write request with identifier: %{public,uuid_t}.16P, source: %{public}@", buf, 0x26u);

      }
      objc_autoreleasePoolPop(v18);
      v31 = *(_QWORD *)(a1 + 72);
      objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", &v31, 1);
      v28 = (void *)objc_claimAutoreleasedReturnValue();
      v29 = *(_QWORD *)(a1 + 32);
      objc_msgSend(v19, "__readWriteResponseHandler:unhandledRequests:", v29, 0);
      v30 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v19, "_writeCharacteristicValues:requestMessage:source:withCompletionHandler:", v28, v29, v17, v30);

    }
    else
    {
      v24 = *(void **)(a1 + 32);
      objc_msgSend(MEMORY[0x24BDD1540], "hmErrorWithCode:", 20);
      v25 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v24, "respondWithError:", v25);

    }
  }
  else
  {
    objc_msgSend(*(id *)(a1 + 32), "respondWithError:", v5);
  }

}

void __56__HMDHome___readWriteResponseHandler_unhandledRequests___block_invoke(id *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id WeakRetained;
  uint64_t v8;
  void *v9;
  id v10;
  NSObject *v11;
  void *v12;
  void *v13;
  int v14;
  void *v15;
  __int16 v16;
  void *v17;
  __int16 v18;
  id v19;
  __int16 v20;
  id v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  v5 = a2;
  v6 = a3;
  WeakRetained = objc_loadWeakRetained(a1 + 6);
  if (objc_msgSend(a1[4], "count"))
  {
    +[HMDCharacteristicResponseNotificationContext updateMultipleCharacteristicReadWriteResponsePayload:withUnhandledRequests:](HMDCharacteristicResponseNotificationContext, "updateMultipleCharacteristicReadWriteResponsePayload:withUnhandledRequests:", v6, a1[4]);
    v8 = objc_claimAutoreleasedReturnValue();

    v6 = (id)v8;
  }
  v9 = (void *)MEMORY[0x227676638]();
  v10 = WeakRetained;
  HMFGetOSLogHandle();
  v11 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(a1[5], "shortDescription");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    v14 = 138544130;
    v15 = v12;
    v16 = 2112;
    v17 = v13;
    v18 = 2112;
    v19 = v6;
    v20 = 2112;
    v21 = v5;
    _os_log_impl(&dword_2218F0000, v11, OS_LOG_TYPE_INFO, "%{public}@Responding to the client: %@ with payload : %@, error: %@", (uint8_t *)&v14, 0x2Au);

  }
  objc_autoreleasePoolPop(v9);
  objc_msgSend(a1[5], "respondWithPayload:error:", v6, v5);
  objc_msgSend(a1[5], "setResponseHandler:", 0);
  objc_msgSend(v10, "endReportingSessionForMessage:", a1[5]);

}

void __109__HMDHome__addResponseTuplesFromDictionary_accessoryRequestMapTable_responseTuples_completedGroup_logEvents___block_invoke(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;
  uint64_t i;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  id v22;
  void *v23;
  id v24;
  void *v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  _BYTE v33[128];
  uint64_t v34;

  v34 = *MEMORY[0x24BDAC8D0];
  v3 = a2;
  v29 = 0u;
  v30 = 0u;
  v31 = 0u;
  v32 = 0u;
  v4 = *(id *)(a1 + 32);
  v28 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v29, v33, 16);
  if (v28)
  {
    v5 = *(_QWORD *)v30;
    v26 = *(_QWORD *)v30;
    v24 = v3;
    do
    {
      for (i = 0; i != v28; ++i)
      {
        if (*(_QWORD *)v30 != v5)
          objc_enumerationMutation(v4);
        v7 = *(void **)(*((_QWORD *)&v29 + 1) + 8 * i);
        objc_msgSend(v7, "characteristic");
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v8, "accessory");
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        v10 = *(void **)(a1 + 40);

        if (v9 == v10)
        {
          objc_msgSend(*(id *)(a1 + 48), "objectForKeyedSubscript:", *(_QWORD *)(a1 + 56));
          v11 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(*(id *)(a1 + 64), "objectForKeyedSubscript:", CFSTR("kRemoteMessageTransportAttributionKey"));
          v12 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v11, "setTransportType:", objc_msgSend(v12, "intValue"));

          objc_msgSend(v7, "characteristic");
          v13 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v3, "objectForKey:", v13);
          v14 = (void *)objc_claimAutoreleasedReturnValue();

          if ((objc_msgSend(v11, "isSubmitted") & 1) == 0)
          {
            objc_msgSend(*(id *)(a1 + 72), "logEventSubmitter");
            v15 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v14, "error");
            v16 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v15, "submitLogEvent:error:", v11, v16);

            v5 = v26;
          }
          if (v14 && *(_QWORD *)(a1 + 80))
          {
            objc_msgSend(v14, "error");
            v17 = (void *)objc_claimAutoreleasedReturnValue();
            +[HMDCharacteristicResponse responseWithRequest:error:](HMDCharacteristicResponse, "responseWithRequest:error:", v7, v17);
            v27 = (void *)objc_claimAutoreleasedReturnValue();

            objc_msgSend(v7, "characteristic");
            v25 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v25, "value");
            v18 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v14, "valueUpdatedTime");
            v19 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v14, "valueUpdatedStateNumber");
            v20 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v7, "characteristic");
            v21 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v21, "notificationContext");
            v22 = v4;
            v23 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v27, "setValue:updatedTime:stateNumber:notificationContext:", v18, v19, v20, v23);

            v4 = v22;
            v3 = v24;

            v5 = v26;
            objc_msgSend(*(id *)(a1 + 80), "addObject:", v27);

          }
        }
      }
      v28 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v29, v33, 16);
    }
    while (v28);
  }

  dispatch_group_leave(*(dispatch_group_t *)(a1 + 88));
}

void __74__HMDHome__createMessageForReadWriteRequest_source_withCompletionHandler___block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id WeakRetained;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  id v12;
  NSObject *v13;
  void *v14;
  void *v15;
  int v16;
  void *v17;
  __int16 v18;
  void *v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  v5 = a2;
  v6 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  v8 = _Block_copy(*(const void **)(a1 + 48));
  v9 = v8;
  if (v8)
    (*((void (**)(void *, id, id))v8 + 2))(v8, v5, v6);

  objc_msgSend(*(id *)(a1 + 32), "responseHandler");
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v10)
  {
    v11 = (void *)MEMORY[0x227676638]();
    v12 = *(id *)(a1 + 40);
    HMFGetOSLogHandle();
    v13 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
    {
      HMFGetLogIdentifier();
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(*(id *)(a1 + 32), "shortDescription");
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      v16 = 138543618;
      v17 = v14;
      v18 = 2112;
      v19 = v15;
      _os_log_impl(&dword_2218F0000, v13, OS_LOG_TYPE_DEBUG, "%{public}@The response handler became nil for read/write request message: %@", (uint8_t *)&v16, 0x16u);

    }
    objc_autoreleasePoolPop(v11);
    objc_msgSend(WeakRetained, "setResponseHandler:", 0);
  }

}

uint64_t __61__HMDHome_requiresUnlockToAccessCharacteristics_withMessage___block_invoke(uint64_t a1, void *a2)
{
  void *v2;
  id v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;

  v2 = *(void **)(a1 + 32);
  v3 = a2;
  objc_msgSend(v2, "hapMetadata");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "type");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "service");
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v6, "type");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = objc_msgSend(v4, "requiresDeviceUnlock:forService:", v5, v7);

  return v8;
}

void __94__HMDHome_writeCharacteristicValues_source_identifier_qualityOfService_withCompletionHandler___block_invoke(id *a1)
{
  id *v2;
  id WeakRetained;
  void *v4;
  id v5;
  void *v6;
  void *v7;
  id v8;
  id v9;
  id v10;
  id v11;
  void *v12;
  void *v13;
  NSObject *v14;
  void *v15;
  _QWORD v16[4];
  id v17;
  id v18;
  id v19;
  id v20;
  id v21[3];
  uint8_t buf[4];
  void *v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v2 = a1 + 8;
  WeakRetained = objc_loadWeakRetained(a1 + 8);
  v4 = WeakRetained;
  if (WeakRetained)
  {
    if (objc_msgSend(WeakRetained, "_shouldWaitForAccessoriesToBeReachable"))
    {
      v5 = a1[4];
      objc_msgSend(v4, "workQueue");
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      +[HMDHomeAssistantOperation homeAssistantOperationWithWriteRequests:queue:](HMDHomeAssistantOperation, "homeAssistantOperationWithWriteRequests:queue:", v5, v6);
      v7 = (void *)objc_claimAutoreleasedReturnValue();

      v16[0] = MEMORY[0x24BDAC760];
      v16[1] = 3221225472;
      v16[2] = __94__HMDHome_writeCharacteristicValues_source_identifier_qualityOfService_withCompletionHandler___block_invoke_1385;
      v16[3] = &unk_24E776B80;
      objc_copyWeak(v21, v2);
      v20 = a1[7];
      v17 = a1[5];
      v8 = a1[4];
      v9 = a1[9];
      v18 = v8;
      v21[1] = v9;
      v10 = a1[6];
      v11 = a1[10];
      v19 = v10;
      v21[2] = v11;
      objc_msgSend(v4, "_performOperation:completion:", v7, v16);

      objc_destroyWeak(v21);
    }
    else
    {
      objc_msgSend(a1[5], "begin");
      -[HMDHome _writeCharacteristicValues:source:identifier:qualityOfService:withCompletionHandler:activity:](v4, a1[4], a1[9], a1[6], a1[10], a1[7], a1[5]);
    }
  }
  else
  {
    if (a1[7])
    {
      objc_msgSend(MEMORY[0x24BDD1540], "errorWithDomain:code:userInfo:", *MEMORY[0x24BDD5BD8], 20, 0);
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      (*((void (**)(void))a1[7] + 2))();

    }
    v13 = (void *)MEMORY[0x227676638]();
    HMFGetOSLogHandle();
    v14 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v23 = v15;
      _os_log_impl(&dword_2218F0000, v14, OS_LOG_TYPE_INFO, "%{public}@Home does not exist anymore, cannot perform write request", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v13);
  }

}

void __94__HMDHome_writeCharacteristicValues_source_identifier_qualityOfService_withCompletionHandler___block_invoke_1385(id *a1)
{
  id WeakRetained;
  void *v3;
  void *v4;
  NSObject *v5;
  void *v6;
  int v7;
  void *v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  WeakRetained = objc_loadWeakRetained(a1 + 8);
  if (WeakRetained)
  {
    objc_msgSend(a1[4], "begin");
    -[HMDHome _writeCharacteristicValues:source:identifier:qualityOfService:withCompletionHandler:activity:](WeakRetained, a1[5], a1[9], a1[6], a1[10], a1[7], a1[4]);
  }
  else
  {
    if (a1[7])
    {
      objc_msgSend(MEMORY[0x24BDD1540], "errorWithDomain:code:userInfo:", *MEMORY[0x24BDD5BD8], 20, 0);
      v3 = (void *)objc_claimAutoreleasedReturnValue();
      (*((void (**)(void))a1[7] + 2))();

    }
    v4 = (void *)MEMORY[0x227676638]();
    HMFGetOSLogHandle();
    v5 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      v7 = 138543362;
      v8 = v6;
      _os_log_impl(&dword_2218F0000, v5, OS_LOG_TYPE_INFO, "%{public}@Home does not exist anymore, cannot perform write request", (uint8_t *)&v7, 0xCu);

    }
    objc_autoreleasePoolPop(v4);
  }

}

- (void)_writeCharacteristicValues:(void *)a3 source:(void *)a4 identifier:(void *)a5 qualityOfService:(void *)a6 withCompletionHandler:(void *)a7 activity:
{
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t i;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  int v25;
  void *v26;
  id v27;
  NSObject *v28;
  void *v29;
  id v30;
  id v33;
  id v34;
  id v35;
  id obj;
  void *v37;
  _QWORD v39[4];
  id v40;
  id v41;
  id v42;
  id v43;
  id v44[3];
  char v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  uint8_t buf[4];
  void *v51;
  _BYTE v52[128];
  uint64_t v53;

  v53 = *MEMORY[0x24BDAC8D0];
  v10 = a2;
  v33 = a4;
  v34 = a6;
  v35 = a7;
  objc_msgSend(MEMORY[0x24BDBCEB8], "arrayWithCapacity:", objc_msgSend(v10, "count"));
  v37 = (void *)objc_claimAutoreleasedReturnValue();
  v48 = 0u;
  v49 = 0u;
  v46 = 0u;
  v47 = 0u;
  obj = v10;
  v11 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v46, v52, 16);
  if (v11)
  {
    v12 = *(_QWORD *)v47;
    do
    {
      for (i = 0; i != v11; ++i)
      {
        if (*(_QWORD *)v47 != v12)
          objc_enumerationMutation(obj);
        v14 = *(void **)(*((_QWORD *)&v46 + 1) + 8 * i);
        objc_msgSend(v14, "characteristic");
        v15 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v15, "authorizationData");
        v16 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "home");
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v17, "currentUser");
        v18 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v18, "notificationContextHAPIdentifier");
        v19 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v15, "contextDataForWriteRequestWithIdentifier:", v19);
        v20 = (void *)objc_claimAutoreleasedReturnValue();

        objc_msgSend(v14, "value");
        v21 = (void *)objc_claimAutoreleasedReturnValue();
        +[HMDCharacteristicWriteRequest writeRequestWithCharacteristic:value:authorizationData:identifier:type:includeResponseValue:contextData:](HMDCharacteristicWriteRequest, "writeRequestWithCharacteristic:value:authorizationData:identifier:type:includeResponseValue:contextData:", v15, v21, v16, 0, objc_msgSend(v14, "requestType"), objc_msgSend(v14, "includeResponseValue"), v20);
        v22 = (void *)objc_claimAutoreleasedReturnValue();

        objc_msgSend(v37, "addObject:", v22);
      }
      v11 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v46, v52, 16);
    }
    while (v11);
  }

  objc_msgSend(a1, "deviceLockStateDataSource");
  v23 = (void *)objc_claimAutoreleasedReturnValue();
  if ((objc_msgSend(v23, "isPasscodeEnabled") & 1) == 0)
  {

    goto LABEL_14;
  }
  objc_msgSend(a1, "deviceLockStateDataSource");
  v24 = (void *)objc_claimAutoreleasedReturnValue();
  v25 = objc_msgSend(v24, "isLocked");

  if (v25)
  {
LABEL_14:
    objc_initWeak((id *)buf, a1);
    v39[0] = MEMORY[0x24BDAC760];
    v39[1] = 3221225472;
    v39[2] = __104__HMDHome__writeCharacteristicValues_source_identifier_qualityOfService_withCompletionHandler_activity___block_invoke;
    v39[3] = &unk_24E776BA8;
    objc_copyWeak(v44, (id *)buf);
    v30 = v34;
    v45 = 1;
    v43 = v30;
    v44[1] = a3;
    v40 = v35;
    v41 = v37;
    v42 = v33;
    v44[2] = a5;
    -[HMDHome _applyDeviceLockCheck:forSource:message:completion:](a1, v41, (unint64_t)a3, 0, v39);

    objc_destroyWeak(v44);
    objc_destroyWeak((id *)buf);
    goto LABEL_15;
  }
  v26 = (void *)MEMORY[0x227676638]();
  v27 = a1;
  HMFGetOSLogHandle();
  v28 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v28, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v29 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543362;
    v51 = v29;
    _os_log_impl(&dword_2218F0000, v28, OS_LOG_TYPE_INFO, "%{public}@Allowing characteristic write because device lock check is not required", buf, 0xCu);

  }
  objc_autoreleasePoolPop(v26);
  -[HMDHome _performAllowedWriteCharacteristicValues:source:identifier:qualityOfService:withCompletionHandler:activity:](v27, v37, (unint64_t)a3, v33, (uint64_t)a5, v34, v35);
LABEL_15:

}

void __104__HMDHome__writeCharacteristicValues_source_identifier_qualityOfService_withCompletionHandler_activity___block_invoke(uint64_t a1, int a2, void *a3)
{
  id v5;
  id WeakRetained;
  void *v7;
  id v8;
  NSObject *v9;
  void *v10;
  const __CFString *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  void *v16;
  NSObject *v17;
  void *v18;
  uint64_t v19;
  int v20;
  void *v21;
  __int16 v22;
  const __CFString *v23;
  __int16 v24;
  void *v25;
  __int16 v26;
  uint64_t v27;
  __int16 v28;
  id v29;
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  v5 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 64));
  if (WeakRetained)
  {
    v7 = (void *)MEMORY[0x227676638]();
    v8 = WeakRetained;
    HMFGetOSLogHandle();
    v9 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      if (a2)
        v11 = CFSTR("Allowing");
      else
        v11 = CFSTR("Denying");
      NSStringFromBOOL();
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      v13 = *(_QWORD *)(a1 + 72);
      v20 = 138544386;
      v21 = v10;
      v22 = 2112;
      v23 = v11;
      v24 = 2112;
      v25 = v12;
      v26 = 2048;
      v27 = v13;
      v28 = 2112;
      v29 = v5;
      _os_log_impl(&dword_2218F0000, v9, OS_LOG_TYPE_INFO, "%{public}@%@ characteristic write passcode=%@, source=%lu : %@", (uint8_t *)&v20, 0x34u);

    }
    objc_autoreleasePoolPop(v7);
    if ((a2 & 1) != 0)
    {
      -[HMDHome _performAllowedWriteCharacteristicValues:source:identifier:qualityOfService:withCompletionHandler:activity:](v8, *(void **)(a1 + 40), *(_QWORD *)(a1 + 72), *(void **)(a1 + 48), *(_QWORD *)(a1 + 80), *(void **)(a1 + 56), *(void **)(a1 + 32));
    }
    else
    {
      v19 = *(_QWORD *)(a1 + 56);
      if (v19)
        (*(void (**)(uint64_t, id, _QWORD))(v19 + 16))(v19, v5, 0);
      objc_msgSend(*(id *)(a1 + 32), "end");
    }
  }
  else
  {
    v14 = *(_QWORD *)(a1 + 56);
    if (v14)
    {
      objc_msgSend(MEMORY[0x24BDD1540], "errorWithDomain:code:userInfo:", *MEMORY[0x24BDD5BD8], 20, 0);
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      (*(void (**)(uint64_t, void *, _QWORD))(v14 + 16))(v14, v15, 0);

    }
    v16 = (void *)MEMORY[0x227676638]();
    HMFGetOSLogHandle();
    v17 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      v20 = 138543362;
      v21 = v18;
      _os_log_impl(&dword_2218F0000, v17, OS_LOG_TYPE_INFO, "%{public}@Home does not exist anymore, cannot perform write request", (uint8_t *)&v20, 0xCu);

    }
    objc_autoreleasePoolPop(v16);
  }

}

- (void)_performAllowedWriteCharacteristicValues:(unint64_t)a3 source:(void *)a4 identifier:(uint64_t)a5 qualityOfService:(void *)a6 withCompletionHandler:(void *)a7 activity:
{
  id v13;
  id v14;
  id v15;
  void *v16;
  void *v17;
  id v18;
  void *v19;
  void *v20;
  void *v21;
  id v22;
  NSObject *v23;
  void *v24;
  void *v25;
  void *v26;
  __CFString *v27;
  __CFString *v28;
  id v29;
  id v30;
  __int128 v31;
  _BYTE buf[18];
  __int16 v33;
  __int128 *v34;
  __int16 v35;
  __CFString *v36;
  _QWORD v37[2];
  _QWORD v38[3];

  v38[2] = *MEMORY[0x24BDAC8D0];
  v30 = a2;
  v13 = a4;
  v14 = a6;
  v15 = a7;
  v37[0] = CFSTR("sourceType");
  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedInteger:", a3);
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  v37[1] = CFSTR("kMultiPartResponseKey");
  v38[0] = v16;
  v38[1] = MEMORY[0x24BDBD1C8];
  objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v38, v37, 2);
  v17 = (void *)objc_claimAutoreleasedReturnValue();

  v18 = objc_alloc(MEMORY[0x24BE3F1D0]);
  objc_msgSend(MEMORY[0x24BE3F1B8], "allMessageDestinations");
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  v20 = (void *)objc_msgSend(v18, "initWithName:qualityOfService:destination:payload:", CFSTR("kMultipleCharacteristicWriteRequestKey"), a5, v19, v17);

  v21 = (void *)MEMORY[0x227676638](objc_msgSend(v20, "setIdentifier:", v13));
  v22 = a1;
  HMFGetOSLogHandle();
  v23 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v23, OS_LOG_TYPE_INFO))
  {
    v29 = v13;
    HMFGetLogIdentifier();
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = 0;
    objc_msgSend(v20, "identifier");
    v25 = (void *)objc_claimAutoreleasedReturnValue();

    if (v25)
    {
      objc_msgSend(v20, "identifier");
      v26 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v26, "getUUIDBytes:", buf);

    }
    else
    {
      *(_OWORD *)buf = *MEMORY[0x24BE3F2C8];
    }
    v31 = *(_OWORD *)buf;
    if (a3 > 9)
      v27 = CFSTR("Unknown");
    else
      v27 = off_24E780100[a3];
    v28 = v27;
    *(_DWORD *)buf = 138544130;
    *(_QWORD *)&buf[4] = v24;
    *(_WORD *)&buf[12] = 1042;
    *(_DWORD *)&buf[14] = 16;
    v33 = 2098;
    v34 = &v31;
    v35 = 2114;
    v36 = v28;
    _os_log_impl(&dword_2218F0000, v23, OS_LOG_TYPE_INFO, "%{public}@Performing allowed write requests with identifier: %{public,uuid_t}.16P, source: %{public}@", buf, 0x26u);

    v13 = v29;
  }

  objc_autoreleasePoolPop(v21);
  objc_msgSend(v22, "_writeCharacteristicValues:requestMessage:source:withCompletionHandler:", v30, v20, a3, v14);
  objc_msgSend(v15, "end");

}

void __73__HMDHome__handleMatterLockChangedCharacteristics_message_remoteRequest___block_invoke(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  id v8;
  NSObject *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  void *v13;
  void *v14;
  int v15;
  const __CFString *v16;
  void *v17;
  void *v18;
  id v19;
  uint64_t v20;
  void *v21;
  void *v22;
  id v23;
  NSObject *v24;
  void *v25;
  void *v26;
  void *v27;
  const char *v28;
  NSObject *v29;
  uint32_t v30;
  void *v31;
  void *v32;
  uint64_t v33;
  void *v34;
  id v35;
  NSObject *v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  id v42;
  NSObject *v43;
  void *v44;
  void *v45;
  void *v46;
  id v47;
  NSObject *v48;
  void *v49;
  void *v50;
  void *v51;
  void *v52;
  void *v53;
  void *v54;
  id v55;
  NSObject *v56;
  void *v57;
  void *v58;
  void *v59;
  void *v60;
  void *v61;
  void *v62;
  void *v63;
  void *v64;
  void *v65;
  void *v66;
  void *v67;
  void *v68;
  id v69;
  void *v70;
  uint8_t buf[4];
  void *v72;
  __int16 v73;
  void *v74;
  __int16 v75;
  uint64_t v76;
  __int16 v77;
  id v78;
  __int16 v79;
  void *v80;
  __int16 v81;
  const __CFString *v82;
  uint64_t v83;

  v83 = *MEMORY[0x24BDAC8D0];
  v3 = a2;
  objc_msgSend(v3, "accessory");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v4, "supportsCHIP"))
  {
    objc_msgSend(v4, "findServiceWithServiceType:", *MEMORY[0x24BDD6C08]);
    v5 = (void *)objc_claimAutoreleasedReturnValue();

    if (v5)
    {
      objc_msgSend(MEMORY[0x24BE3F178], "internalOnlyInitializer");
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      v7 = (void *)MEMORY[0x227676638]();
      v8 = *(id *)(a1 + 32);
      HMFGetOSLogHandle();
      v9 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v6, "UUID");
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v4, "uuid");
        v12 = objc_claimAutoreleasedReturnValue();
        v13 = (void *)v12;
        v14 = *(void **)(a1 + 40);
        v15 = *(unsigned __int8 *)(a1 + 48);
        *(_DWORD *)buf = 138544642;
        if (v15)
          v16 = CFSTR("YES");
        else
          v16 = CFSTR("NO");
        v72 = v10;
        v73 = 2112;
        v74 = v11;
        v75 = 2112;
        v76 = v12;
        v77 = 2112;
        v78 = v3;
        v79 = 2112;
        v80 = v14;
        v81 = 2112;
        v82 = v16;
        _os_log_impl(&dword_2218F0000, v9, OS_LOG_TYPE_INFO, "%{public}@[NewFlow: %@] _handleMatterLockChangedCharacteristics: Matter lock characteristic changed, preparing to populate bulletin for accessory=%@ characteristic=%@ message=%@ remoteRequest=%@", buf, 0x3Eu);

      }
      objc_autoreleasePoolPop(v7);
      objc_msgSend(v3, "value");
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0)
        v18 = v17;
      else
        v18 = 0;
      v19 = v18;

      if (v19)
      {
        v20 = objc_msgSend(v19, "integerValue");
        if (!v20)
        {
          v21 = &unk_24E96A5C8;
LABEL_18:
          v70 = v21;
          if (!*(_BYTE *)(a1 + 48))
          {
            v40 = 0;
LABEL_36:
            v69 = v19;
            v53 = v6;
            v54 = (void *)MEMORY[0x227676638]();
            v55 = *(id *)(a1 + 32);
            HMFGetOSLogHandle();
            v56 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v56, OS_LOG_TYPE_INFO))
            {
              HMFGetLogIdentifier();
              v57 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v53, "UUID");
              v65 = v54;
              v58 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v4, "uuid");
              v59 = (void *)objc_claimAutoreleasedReturnValue();
              *(_DWORD *)buf = 138544386;
              v72 = v57;
              v73 = 2112;
              v74 = v58;
              v75 = 2112;
              v76 = (uint64_t)v40;
              v77 = 2112;
              v78 = v70;
              v79 = 2112;
              v80 = v59;
              _os_log_impl(&dword_2218F0000, v56, OS_LOG_TYPE_INFO, "%{public}@[Flow: %@] Handling changed matter lock characteristic (For notifications- HMDHome path) with userUUID=%@ operationType=%@ accessory=%@", buf, 0x34u);

              v54 = v65;
            }

            objc_autoreleasePoolPop(v54);
            objc_msgSend(*(id *)(a1 + 32), "lockNotificationManager");
            v60 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(MEMORY[0x24BDBCE60], "now");
            v61 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v60, "sendLockOperationEventNotification:lockOperationType:lockOperationSource:fabricIndex:accessory:timestamp:flow:", v40, v70, &unk_24E96A5F8, 0, v4, v61, v53);

            v6 = v53;
            v19 = v69;
            goto LABEL_39;
          }
          objc_msgSend(*(id *)(a1 + 40), "remoteSourceDevice");
          v31 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v31, "productInfo");
          v32 = (void *)objc_claimAutoreleasedReturnValue();
          v33 = objc_msgSend(v32, "productClass");

          if (v33)
          {
            if ((v33 & 0xFFFFFFFFFFFFFFFDLL) == 4)
            {
              v34 = (void *)MEMORY[0x227676638]();
              v35 = *(id *)(a1 + 32);
              HMFGetOSLogHandle();
              v36 = objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v36, OS_LOG_TYPE_INFO))
              {
                HMFGetLogIdentifier();
                v62 = v34;
                v37 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v6, "UUID");
                v66 = v31;
                v38 = (void *)objc_claimAutoreleasedReturnValue();
                HMFProductClassToString();
                v39 = (void *)objc_claimAutoreleasedReturnValue();
                *(_DWORD *)buf = 138543874;
                v72 = v37;
                v73 = 2112;
                v74 = v38;
                v75 = 2112;
                v76 = (uint64_t)v39;
                _os_log_impl(&dword_2218F0000, v36, OS_LOG_TYPE_INFO, "%{public}@[Flow: %@] Product class for this request is %@, which is either a HomePod or ATV, so we should not try to attribute a user to this request.", buf, 0x20u);

                v31 = v66;
                v34 = v62;
              }

              objc_autoreleasePoolPop(v34);
              v40 = 0;
LABEL_35:

              goto LABEL_36;
            }
          }
          else
          {
            v41 = (void *)MEMORY[0x227676638]();
            v42 = *(id *)(a1 + 32);
            HMFGetOSLogHandle();
            v43 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v43, OS_LOG_TYPE_INFO))
            {
              HMFGetLogIdentifier();
              v63 = v41;
              v44 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v6, "UUID");
              v67 = v31;
              v45 = (void *)objc_claimAutoreleasedReturnValue();
              *(_DWORD *)buf = 138543618;
              v72 = v44;
              v73 = 2112;
              v74 = v45;
              _os_log_impl(&dword_2218F0000, v43, OS_LOG_TYPE_INFO, "%{public}@[Flow: %@] Cannot determine product class for this request.", buf, 0x16u);

              v31 = v67;
              v41 = v63;
            }

            objc_autoreleasePoolPop(v41);
          }
          v46 = (void *)MEMORY[0x227676638]();
          v47 = *(id *)(a1 + 32);
          HMFGetOSLogHandle();
          v48 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v48, OS_LOG_TYPE_INFO))
          {
            HMFGetLogIdentifier();
            v68 = v31;
            v49 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v6, "UUID");
            v64 = v46;
            v50 = (void *)objc_claimAutoreleasedReturnValue();
            HMFProductClassToString();
            v51 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 138543874;
            v72 = v49;
            v73 = 2112;
            v74 = v50;
            v75 = 2112;
            v76 = (uint64_t)v51;
            _os_log_impl(&dword_2218F0000, v48, OS_LOG_TYPE_INFO, "%{public}@[Flow: %@] Product class for this request is %@, which is not a HomePod or ATV, so we can try to attribute a user to this request.", buf, 0x20u);

            v46 = v64;
            v31 = v68;
          }

          objc_autoreleasePoolPop(v46);
          objc_msgSend(*(id *)(a1 + 40), "userForHome:", *(_QWORD *)(a1 + 32));
          v52 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v52, "uuid");
          v40 = (void *)objc_claimAutoreleasedReturnValue();

          goto LABEL_35;
        }
        if (v20 == 1)
        {
          v21 = &unk_24E96A5E0;
          goto LABEL_18;
        }
        v22 = (void *)MEMORY[0x227676638]();
        v23 = *(id *)(a1 + 32);
        HMFGetOSLogHandle();
        v24 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
        {
          HMFGetLogIdentifier();
          v25 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v6, "UUID");
          v26 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v4, "uuid");
          v27 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138544130;
          v72 = v25;
          v73 = 2112;
          v74 = v26;
          v75 = 2112;
          v76 = (uint64_t)v19;
          v77 = 2112;
          v78 = v27;
          v28 = "%{public}@[Flow: %@] Error retrieving characteristic value from characteristic. Value should be either 0"
                " or 1, value=%@. accessoryUUID=%@";
          v29 = v24;
          v30 = 42;
          goto LABEL_26;
        }
      }
      else
      {
        v22 = (void *)MEMORY[0x227676638]();
        v23 = *(id *)(a1 + 32);
        HMFGetOSLogHandle();
        v24 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
        {
          HMFGetLogIdentifier();
          v25 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v6, "UUID");
          v26 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v4, "uuid");
          v27 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543874;
          v72 = v25;
          v73 = 2112;
          v74 = v26;
          v75 = 2112;
          v76 = (uint64_t)v27;
          v28 = "%{public}@[Flow: %@] Error retrieving characteristic value from characteristic. Value is not an NSNumber"
                ". accessoryUUID=%@";
          v29 = v24;
          v30 = 32;
LABEL_26:
          _os_log_impl(&dword_2218F0000, v29, OS_LOG_TYPE_ERROR, v28, buf, v30);

        }
      }

      objc_autoreleasePoolPop(v22);
LABEL_39:

    }
  }

}

void __131__HMDHome__notifyChangedCharacteristics_identifier_multiPartResponse_moreMessagesInMultipart_requestMessage_withCompletionHandler___block_invoke(uint64_t a1)
{
  void *v2;
  id v3;

  v2 = _Block_copy(*(const void **)(a1 + 40));
  if (v2)
  {
    v3 = v2;
    (*((void (**)(void *, _QWORD, _QWORD))v2 + 2))(v2, 0, *(_QWORD *)(a1 + 32));
    v2 = v3;
  }

}

void __168__HMDHome__sendClientCharacteristicsChangedNotificationWithIdentifier_requestMessage_multiPartResponse_moreInMultiPartResponse_characteristicChanges_completionHandler___block_invoke(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  HMDHomeManagerXPCMessageSendPolicy *v8;
  void *v9;
  id v10;
  _QWORD v11[4];
  id v12;
  id v13;
  id v14;
  id v15;

  v3 = a2;
  v4 = v3;
  v5 = (_QWORD *)(a1 + 32);
  if (*(_QWORD *)(a1 + 32) && (objc_msgSend(v3, "isEntitledForSPIAccess") & 1) != 0)
  {
    v6 = 1;
    v7 = 5;
  }
  else
  {
    v6 = 0;
    v5 = (_QWORD *)(a1 + 48);
    v7 = 1;
  }
  objc_msgSend(*(id *)(a1 + 40), "setMessagePayload:", *v5);
  objc_msgSend(*(id *)(a1 + 40), "setRequiresSPIEntitlement:", v6);
  if (*(void **)(a1 + 56) == v4)
  {
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 8) + 24) = 0;
  }
  else
  {
    objc_msgSend(*(id *)(a1 + 40), "setQualityOfService:", 17);
    v8 = -[HMDHomeManagerXPCMessageSendPolicy initWithEntitlements:options:active:]([HMDHomeManagerXPCMessageSendPolicy alloc], "initWithEntitlements:options:active:", v7, *(_QWORD *)(a1 + 88), 1);
    objc_msgSend(*(id *)(a1 + 40), "setSendPolicy:", v8);

  }
  dispatch_group_enter(*(dispatch_group_t *)(a1 + 64));
  v9 = (void *)objc_msgSend(*(id *)(a1 + 40), "copy");
  v11[0] = MEMORY[0x24BDAC760];
  v11[1] = 3221225472;
  v11[2] = __168__HMDHome__sendClientCharacteristicsChangedNotificationWithIdentifier_requestMessage_multiPartResponse_moreInMultiPartResponse_characteristicChanges_completionHandler___block_invoke_2;
  v11[3] = &unk_24E79C0D0;
  v12 = v4;
  v13 = *(id *)(a1 + 56);
  v15 = *(id *)(a1 + 72);
  v14 = *(id *)(a1 + 64);
  v10 = v4;
  objc_msgSend(v10, "sendMessage:completionHandler:", v9, v11);

}

uint64_t __168__HMDHome__sendClientCharacteristicsChangedNotificationWithIdentifier_requestMessage_multiPartResponse_moreInMultiPartResponse_characteristicChanges_completionHandler___block_invoke_3(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void __168__HMDHome__sendClientCharacteristicsChangedNotificationWithIdentifier_requestMessage_multiPartResponse_moreInMultiPartResponse_characteristicChanges_completionHandler___block_invoke_2(uint64_t a1, void *a2)
{
  uint64_t v3;
  id v4;

  v4 = a2;
  if (*(_QWORD *)(a1 + 32) == *(_QWORD *)(a1 + 40))
  {
    v3 = *(_QWORD *)(a1 + 56);
    if (v3)
      (*(void (**)(void))(v3 + 16))();
  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 48));

}

uint64_t __71__HMDHome_notifyRemoteUsersOfChangedCharacteristics_message_broadcast___block_invoke(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_notifyRemoteUsersOfChangedCharacteristics:message:broadcast:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(unsigned __int8 *)(a1 + 56));
}

void __95__HMDHome_notifyOfChangedCharacteristic_changedByThisDevice_residentShouldNotifyPeers_message___block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;
  uint64_t v4;
  _QWORD v5[2];

  v5[1] = *MEMORY[0x24BDAC8D0];
  v2 = *(void **)(a1 + 32);
  v5[0] = *(_QWORD *)(a1 + 40);
  objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", v5, 1);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  LOBYTE(v4) = 0;
  objc_msgSend(v2, "_postInternalNotificationForChangedCharacteristics:previouslyNilChangedCharacteristics:modifiedCharacteristics:changedByThisDevice:residentShouldNotifyPeers:message:broadcast:", v3, MEMORY[0x24BDBD1A8], 0, *(unsigned __int8 *)(a1 + 56), *(unsigned __int8 *)(a1 + 57), *(_QWORD *)(a1 + 48), v4);

}

uint64_t __186__HMDHome__postInternalNotificationForChangedCharacteristics_previouslyNilChangedCharacteristics_modifiedCharacteristics_changedByThisDevice_residentShouldNotifyPeers_message_broadcast___block_invoke(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(a1 + 32), "_shouldUseAttributeReportForBulletin:", a2);
}

uint64_t __186__HMDHome__postInternalNotificationForChangedCharacteristics_previouslyNilChangedCharacteristics_modifiedCharacteristics_changedByThisDevice_residentShouldNotifyPeers_message_broadcast___block_invoke_2(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return objc_msgSend(*(id *)(a1 + 32), "_updateBulletinBoardOfChangedCharacteristics:modifiedCharacteristics:changedByThisDevice:changeNotificationFromPrimary:", a3, *(_QWORD *)(a1 + 40), *(unsigned __int8 *)(a1 + 48), *(unsigned __int8 *)(a1 + 49));
}

void __53__HMDHome__handleCharacteristicsChangedNotification___block_invoke(uint64_t a1, void *a2)
{
  id WeakRetained;
  void *v4;
  id v5;

  v5 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (objc_msgSend(v5, "count"))
  {
    objc_msgSend(v5, "hm_allKeys");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(WeakRetained, "_notifyChangedCharacteristics:message:modifiedCharacteristics:broadcast:", v4, *(_QWORD *)(a1 + 32), v5, 0);

  }
}

- (void)updateMediaStateWithResponses:(void *)a3 requestMessageInformation:
{
  id v5;
  id v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t i;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t j;
  void *v26;
  void *v27;
  id v28;
  id v29;
  id obj;
  void *v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  _BYTE v40[128];
  _BYTE v41[128];
  uint64_t v42;

  v42 = *MEMORY[0x24BDAC8D0];
  v5 = a2;
  v6 = a3;
  v7 = v6;
  if (a1)
  {
    v29 = v6;
    objc_msgSend(MEMORY[0x24BDD1650], "strongToStrongObjectsMapTable");
    v31 = (void *)objc_claimAutoreleasedReturnValue();
    v36 = 0u;
    v37 = 0u;
    v38 = 0u;
    v39 = 0u;
    v28 = v5;
    obj = v5;
    v8 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v36, v41, 16);
    if (v8)
    {
      v9 = v8;
      v10 = *(_QWORD *)v37;
      do
      {
        for (i = 0; i != v9; ++i)
        {
          if (*(_QWORD *)v37 != v10)
            objc_enumerationMutation(obj);
          v12 = *(void **)(*((_QWORD *)&v36 + 1) + 8 * i);
          objc_msgSend(v12, "firstObject", v28);
          v13 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v13, "request");
          v14 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v14, "mediaProfile");
          v15 = (void *)objc_claimAutoreleasedReturnValue();
          v16 = v15;
          if (v15)
          {
            objc_msgSend(v15, "mediaSession");
            v17 = (void *)objc_claimAutoreleasedReturnValue();
            if (v17)
            {
              objc_msgSend(v31, "objectForKey:", v17);
              v18 = (void *)objc_claimAutoreleasedReturnValue();
              v19 = (void *)objc_msgSend(v18, "mutableCopy");

              if (v19)
                objc_msgSend(v19, "addObjectsFromArray:", v12);
              else
                v19 = (void *)objc_msgSend(v12, "mutableCopy");
              v20 = (void *)objc_msgSend(v19, "copy");
              objc_msgSend(v31, "setObject:forKey:", v20, v17);

            }
            else
            {
              objc_msgSend(v16, "updateWithResponses:requestMessageInformation:", v12, v29);
            }

          }
        }
        v9 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v36, v41, 16);
      }
      while (v9);
    }

    v34 = 0u;
    v35 = 0u;
    v32 = 0u;
    v33 = 0u;
    objc_msgSend(v31, "hm_allKeys");
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    v22 = objc_msgSend(v21, "countByEnumeratingWithState:objects:count:", &v32, v40, 16);
    v7 = v29;
    if (v22)
    {
      v23 = v22;
      v24 = *(_QWORD *)v33;
      do
      {
        for (j = 0; j != v23; ++j)
        {
          if (*(_QWORD *)v33 != v24)
            objc_enumerationMutation(v21);
          v26 = *(void **)(*((_QWORD *)&v32 + 1) + 8 * j);
          objc_msgSend(v31, "objectForKey:", v26, v28);
          v27 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v26, "updateWithResponses:requestMessageInformation:", v27, v29);

        }
        v23 = objc_msgSend(v21, "countByEnumeratingWithState:objects:count:", &v32, v40, 16);
      }
      while (v23);
    }

    v5 = v28;
  }

}

uint64_t __74__HMDHome_notifyRemoteUsersOfChangedProperties_requestMessageInformation___block_invoke(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_notifyRemoteUsersOfChangedProperties:requestMessageInformation:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
}

uint64_t __26__HMDHome__userForDevice___block_invoke(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  uint64_t v5;

  objc_msgSend(a2, "account");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 32), "account");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v3, "isEqual:", v4);

  return v5;
}

HMDCharacteristicUpdateTuple *__93__HMDHome__characteristicUpdatesForChangedCharacteristics_bulletinCharacteristics_broadcast___block_invoke(uint64_t a1, void *a2)
{
  id v3;
  int v4;
  int v5;
  BOOL v6;
  uint64_t v7;
  void *v8;
  char v9;
  void *v10;
  HMDCharacteristicUpdateTuple *v11;
  void *v12;
  HMDCharacteristicUpdateTuple *v13;
  void *v15;
  id v16;
  NSObject *v17;
  void *v18;
  void *v19;
  int v20;
  void *v21;
  __int16 v22;
  void *v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v3 = a2;
  v4 = objc_msgSend(*(id *)(a1 + 32), "containsObject:", v3);
  v5 = objc_msgSend(*(id *)(a1 + 40), "_shouldUseAttributeReportForBulletin:", v3);
  if (v4)
    v6 = v5 == 0;
  else
    v6 = 1;
  if (!v6)
  {
    objc_msgSend(v3, "type");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = objc_msgSend(v8, "isEqualToString:", *MEMORY[0x24BDD58F0]);

    if ((v9 & 1) != 0
      || (objc_msgSend(v3, "previousValue"), v10 = (void *)objc_claimAutoreleasedReturnValue(), v10, v10))
    {
      v7 = 1;
      goto LABEL_10;
    }
    v15 = (void *)MEMORY[0x227676638]();
    v16 = *(id *)(a1 + 40);
    HMFGetOSLogHandle();
    v17 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v3, "shortDescription");
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      v20 = 138543618;
      v21 = v18;
      v22 = 2112;
      v23 = v19;
      _os_log_impl(&dword_2218F0000, v17, OS_LOG_TYPE_INFO, "%{public}@Initial update for characteristic: %@, receiver should not display bulletin", (uint8_t *)&v20, 0x16u);

    }
    objc_autoreleasePoolPop(v15);
  }
  v7 = 0;
LABEL_10:
  v11 = [HMDCharacteristicUpdateTuple alloc];
  objc_msgSend(v3, "value");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  v13 = -[HMDCharacteristicUpdateTuple initWithCharacteristic:updatedValue:isBroadcast:reasons:](v11, "initWithCharacteristic:updatedValue:isBroadcast:reasons:", v3, v12, *(unsigned __int8 *)(a1 + 48), v7);

  return v13;
}

void __57__HMDHome__pushTokenToDestinationMappingForDestinations___block_invoke(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  id v7;
  NSObject *v8;
  void *v9;
  int v10;
  void *v11;
  __int16 v12;
  id v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  v3 = a2;
  +[HMDDeviceHandle deviceHandleForDestination:](HMDDeviceHandle, "deviceHandleForDestination:", v3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "pushToken");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  if (v5)
  {
    objc_msgSend(*(id *)(a1 + 40), "setObject:forKeyedSubscript:", v3, v5);
  }
  else
  {
    v6 = (void *)MEMORY[0x227676638]();
    v7 = *(id *)(a1 + 32);
    HMFGetOSLogHandle();
    v8 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      v10 = 138543618;
      v11 = v9;
      v12 = 2112;
      v13 = v3;
      _os_log_impl(&dword_2218F0000, v8, OS_LOG_TYPE_ERROR, "%{public}@Unable to parse push token for destination: %@", (uint8_t *)&v10, 0x16u);

    }
    objc_autoreleasePoolPop(v6);
  }

}

void __113__HMDHome__characteristicUpdatesByDestinationForNotificationRegistryDestinations_bulletinDestinations_broadcast___block_invoke(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  id v14;
  NSObject *v15;
  void *v16;
  int v17;
  void *v18;
  __int16 v19;
  void *v20;
  __int16 v21;
  void *v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  v3 = a2;
  objc_msgSend(MEMORY[0x24BDBCEF0], "set");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", v3);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 40), "objectForKeyedSubscript:", v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "allObjects");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "addObjectsFromArray:", v7);

  objc_msgSend(*(id *)(a1 + 48), "objectForKeyedSubscript:", v3);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 56), "objectForKeyedSubscript:", v8);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "allObjects");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "addObjectsFromArray:", v10);

  if (objc_msgSend(v4, "count"))
  {
    objc_msgSend(*(id *)(a1 + 64), "_characteristicUpdatesForChangedCharacteristics:bulletinCharacteristics:broadcast:", v4, v6, *(unsigned __int8 *)(a1 + 80));
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    if (v8)
      v12 = v8;
    else
      v12 = v5;
    objc_msgSend(*(id *)(a1 + 72), "setObject:forKeyedSubscript:", v11, v12);

  }
  else
  {
    v13 = (void *)MEMORY[0x227676638]();
    v14 = *(id *)(a1 + 64);
    HMFGetOSLogHandle();
    v15 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      v17 = 138543874;
      v18 = v16;
      v19 = 2112;
      v20 = v5;
      v21 = 2112;
      v22 = v8;
      _os_log_impl(&dword_2218F0000, v15, OS_LOG_TYPE_INFO, "%{public}@No changed characteristics found for destination: %@ / %@", (uint8_t *)&v17, 0x20u);

    }
    objc_autoreleasePoolPop(v13);
  }

}

void __72__HMDHome__notifyRemoteUsersOfChangedCharacteristics_message_broadcast___block_invoke(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 40))
    dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

void __72__HMDHome__notifyRemoteUsersOfChangedCharacteristics_message_broadcast___block_invoke_2(uint64_t a1)
{
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t i;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  id v13;
  void *v14;
  void *v15;
  _QWORD v16[4];
  id v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _BYTE v22[128];
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  v18 = 0u;
  v19 = 0u;
  v20 = 0u;
  v21 = 0u;
  v2 = *(id *)(a1 + 32);
  v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v18, v22, 16);
  if (v3)
  {
    v4 = v3;
    v5 = *(_QWORD *)v19;
    do
    {
      for (i = 0; i != v4; ++i)
      {
        if (*(_QWORD *)v19 != v5)
          objc_enumerationMutation(v2);
        v7 = *(void **)(*((_QWORD *)&v18 + 1) + 8 * i);
        objc_msgSend(v7, "service");
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        if (+[HMDBulletinUserAttributionManager currentStateCharacteristicSupportsUserAttribution:](HMDBulletinUserAttributionManager, "currentStateCharacteristicSupportsUserAttribution:", v7))
        {
          objc_msgSend((id)objc_opt_class(), "currentTargetStateCharacteristicTypeMap");
          v9 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v7, "type");
          v10 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v9, "hmf_stringForKey:", v10);
          v11 = (void *)objc_claimAutoreleasedReturnValue();

          objc_msgSend(v8, "characteristics");
          v12 = (void *)objc_claimAutoreleasedReturnValue();
          v16[0] = MEMORY[0x24BDAC760];
          v16[1] = 3221225472;
          v16[2] = __72__HMDHome__notifyRemoteUsersOfChangedCharacteristics_message_broadcast___block_invoke_3;
          v16[3] = &unk_24E798C68;
          v17 = v11;
          v13 = v11;
          objc_msgSend(v12, "na_firstObjectPassingTest:", v16);
          v14 = (void *)objc_claimAutoreleasedReturnValue();

          objc_msgSend(*(id *)(a1 + 40), "bulletinUserAttributionManager");
          v15 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v15, "removeAttributedUserUUIDForTargetStateCharacteristic:", v14);

        }
      }
      v4 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v18, v22, 16);
    }
    while (v4);
  }

}

uint64_t __72__HMDHome__notifyRemoteUsersOfChangedCharacteristics_message_broadcast___block_invoke_3(uint64_t a1, void *a2)
{
  void *v3;
  uint64_t v4;

  objc_msgSend(a2, "type");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "isEqual:", *(_QWORD *)(a1 + 32));

  return v4;
}

void __54__HMDHome__sendInvitationCancelationRequestToInvitee___block_invoke(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  void *v10;
  id v11;
  NSObject *v12;
  NSObject *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  uint8_t buf[4];
  void *v23;
  __int16 v24;
  void *v25;
  __int16 v26;
  id v27;
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  v7 = a2;
  v8 = a3;
  v9 = a4;
  v10 = (void *)MEMORY[0x227676638]();
  v11 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v12 = objc_claimAutoreleasedReturnValue();
  v13 = v12;
  if (v9)
  {
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(*(id *)(a1 + 40), "idsInvitationUUID");
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v15, "UUIDString");
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543874;
      v23 = v14;
      v24 = 2112;
      v25 = v16;
      v26 = 2112;
      v27 = v9;
      _os_log_impl(&dword_2218F0000, v13, OS_LOG_TYPE_ERROR, "%{public}@Failed to cancel invitation state for invitee with ids identifier %@ due to error %@", buf, 0x20u);

    }
  }
  else if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 40), "idsInvitationUUID");
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v21, "UUIDString");
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 40), "identifier");
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v19, "UUIDString");
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543874;
    v23 = v17;
    v24 = 2112;
    v25 = v18;
    v26 = 2112;
    v27 = v20;
    _os_log_impl(&dword_2218F0000, v13, OS_LOG_TYPE_INFO, "%{public}@Canceled invitation state for invitee with ids identifier %@, home identifier %@", buf, 0x20u);

  }
  objc_autoreleasePoolPop(v10);

}

void __58__HMDHome_pendingUserPrivilegeFromOutgoingInvitationUUID___block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  id v6;
  NSObject *v7;
  void *v8;
  uint64_t v9;
  int v10;
  void *v11;
  __int16 v12;
  uint64_t v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  +[HMCContext findOutgoingInvitationWithModelID:](HMCContext, "findOutgoingInvitationWithModelID:", *(_QWORD *)(a1 + 32));
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = v2;
  if (v2)
  {
    objc_msgSend(v2, "privilege");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = (int)objc_msgSend(v4, "intValue");

  }
  else
  {
    v5 = (void *)MEMORY[0x227676638]();
    v6 = *(id *)(a1 + 40);
    HMFGetOSLogHandle();
    v7 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      v9 = *(_QWORD *)(a1 + 32);
      v10 = 138543618;
      v11 = v8;
      v12 = 2112;
      v13 = v9;
      _os_log_impl(&dword_2218F0000, v7, OS_LOG_TYPE_ERROR, "%{public}@Unable to find the outgoing invitation with UUID in database: %@", (uint8_t *)&v10, 0x16u);

    }
    objc_autoreleasePoolPop(v5);
  }

}

void __178__HMDHome___handleAcceptedOutgoingInvitationResponse_destinationAddress_publicKey_username_reverseShare_reverseShareToken_issuerPublicKeyER_presenceAuthStatus_completionHandler___block_invoke(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  NSObject *v6;
  void *v7;
  int v8;
  void *v9;
  __int16 v10;
  id v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v3 = a2;
  v4 = (void *)MEMORY[0x227676638]();
  v5 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v6 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = 138543618;
    v9 = v7;
    v10 = 2112;
    v11 = v3;
    _os_log_impl(&dword_2218F0000, v6, OS_LOG_TYPE_INFO, "%{public}@Finished deleting the outgoing invitation with error: %@", (uint8_t *)&v8, 0x16u);

  }
  objc_autoreleasePoolPop(v4);

}

void __178__HMDHome___handleAcceptedOutgoingInvitationResponse_destinationAddress_publicKey_username_reverseShare_reverseShareToken_issuerPublicKeyER_presenceAuthStatus_completionHandler___block_invoke_1352(uint64_t a1, void *a2)
{
  id v3;
  int v4;
  void *v5;
  id v6;
  NSObject *v7;
  _BOOL4 v8;
  void *v9;
  __CFString *v10;
  __CFString *v11;
  void *v12;
  id v13;
  NSObject *v14;
  void *v15;
  void *v16;
  void *v17;
  __CFString *v18;
  void *v19;
  void *v20;
  __CFString *v21;
  void *v22;
  void *v23;
  void *v24;
  NSObject *v25;
  NSObject *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  id v32;
  _QWORD block[4];
  id v34;
  uint8_t buf[4];
  void *v36;
  __int16 v37;
  const __CFString *v38;
  __int16 v39;
  const __CFString *v40;
  __int16 v41;
  id v42;
  uint64_t v43;

  v43 = *MEMORY[0x24BDAC8D0];
  v3 = a2;
  v4 = shouldLogPrivateInformation();
  v5 = (void *)MEMORY[0x227676638]();
  v6 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v7 = objc_claimAutoreleasedReturnValue();
  v8 = os_log_type_enabled(v7, OS_LOG_TYPE_INFO);
  if (v4)
  {
    if (!v8)
      goto LABEL_7;
    HMFGetLogIdentifier();
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 40), "userID");
    v10 = (__CFString *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 40), "displayName");
    v11 = (__CFString *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138544130;
    v36 = v9;
    v37 = 2112;
    v38 = v10;
    v39 = 2112;
    v40 = v11;
    v41 = 2112;
    v42 = v3;
    _os_log_impl(&dword_2218F0000, v7, OS_LOG_TYPE_INFO, "%{public}@Added user with userID: %@ and displayName: %@ with error: %@", buf, 0x2Au);

  }
  else
  {
    if (!v8)
      goto LABEL_7;
    HMFGetLogIdentifier();
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138544130;
    v36 = v9;
    v37 = 2112;
    v38 = CFSTR("...");
    v39 = 2112;
    v40 = CFSTR("...");
    v41 = 2112;
    v42 = v3;
    _os_log_impl(&dword_2218F0000, v7, OS_LOG_TYPE_INFO, "%{public}@Added user with userID: %@ and displayName: %@ with error: %@", buf, 0x2Au);
  }

LABEL_7:
  objc_autoreleasePoolPop(v5);
  v12 = (void *)MEMORY[0x227676638]();
  v13 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v14 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    v31 = v12;
    v16 = (void *)MEMORY[0x24BDD16E0];
    objc_msgSend(*(id *)(a1 + 32), "users");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v16, "numberWithUnsignedInteger:", objc_msgSend(v17, "count"));
    v18 = (__CFString *)objc_claimAutoreleasedReturnValue();
    v19 = (void *)MEMORY[0x24BDD16E0];
    objc_msgSend(*(id *)(a1 + 32), "pendingUsers");
    v32 = v3;
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v19, "numberWithUnsignedInteger:", objc_msgSend(v20, "count"));
    v21 = (__CFString *)objc_claimAutoreleasedReturnValue();
    v22 = (void *)MEMORY[0x24BDD16E0];
    objc_msgSend(*(id *)(a1 + 32), "usersIncludingPendingUsers:", 1);
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v22, "numberWithUnsignedInteger:", objc_msgSend(v23, "count"));
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138544130;
    v36 = v15;
    v37 = 2112;
    v38 = v18;
    v39 = 2112;
    v40 = v21;
    v41 = 2112;
    v42 = v24;
    _os_log_impl(&dword_2218F0000, v14, OS_LOG_TYPE_INFO, "%{public}@Users: %@, PendingUsers: %@, All Users: %@", buf, 0x2Au);

    v12 = v31;
    v3 = v32;

  }
  objc_autoreleasePoolPop(v12);
  v25 = *(NSObject **)(a1 + 48);
  objc_msgSend(*(id *)(a1 + 32), "workQueue");
  v26 = objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x24BDAC760];
  block[1] = 3221225472;
  block[2] = __178__HMDHome___handleAcceptedOutgoingInvitationResponse_destinationAddress_publicKey_username_reverseShare_reverseShareToken_issuerPublicKeyER_presenceAuthStatus_completionHandler___block_invoke_1353;
  block[3] = &unk_24E79C240;
  v34 = *(id *)(a1 + 56);
  dispatch_group_notify(v25, v26, block);

  if (!v3)
  {
    v27 = *(void **)(a1 + 32);
    objc_msgSend(*(id *)(a1 + 40), "uuid");
    v28 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v27, "_loadRestrictedGuestConfigurationOnLocksAfterInviteAcceptance:", v28);

  }
  v29 = _Block_copy(*(const void **)(a1 + 72));
  v30 = v29;
  if (v29)
    (*((void (**)(void *, _QWORD))v29 + 2))(v29, *(_QWORD *)(a1 + 64));

}

uint64_t __178__HMDHome___handleAcceptedOutgoingInvitationResponse_destinationAddress_publicKey_username_reverseShare_reverseShareToken_issuerPublicKeyER_presenceAuthStatus_completionHandler___block_invoke_3(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return objc_msgSend(*(id *)(a1 + 32), "_saveRestrictedGuestSettingsFromOutgoingInvitation:managedObjectContext:error:", *(_QWORD *)(a1 + 40), a2, a4);
}

uint64_t __178__HMDHome___handleAcceptedOutgoingInvitationResponse_destinationAddress_publicKey_username_reverseShare_reverseShareToken_issuerPublicKeyER_presenceAuthStatus_completionHandler___block_invoke_1353(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "run:", &__block_literal_global_1354);
}

void __257__HMDHome__handleUpdateRequestForHomeInvitation_controllerPublicKey_controllerUsername_invitationState_presenceAuthStatus_preferredUserID_fromHandle_fromAddress_fromMergeID_reverseShareURL_reverseShareToken_issuerPublicKeyER_message_messageResponseHandler___block_invoke(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  id v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  HMDCoreDataCloudShareInvitation *v20;
  void *v21;
  id v22;
  void *v23;
  void *v24;
  void *v25;
  uint64_t v26;
  id v27;
  void *v28;
  _QWORD v29[5];
  id v30;
  id v31;
  id v32;
  id v33;
  id v34;
  id v35;
  id v36;
  id v37;
  id v38;
  _QWORD v39[5];
  id v40;
  id v41;
  id v42;
  id v43;
  id v44;
  id v45;
  id v46;
  id v47;

  v3 = a2;
  if (!v3)
  {
    if (*(_QWORD *)(a1 + 32))
    {
      objc_msgSend(*(id *)(a1 + 40), "user");
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      +[HMDUser userIDForAccountHandle:](HMDUser, "userIDForAccountHandle:", *(_QWORD *)(a1 + 32));
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v5, "setUserID:", v6);

    }
    v7 = (void *)objc_msgSend(objc_alloc(MEMORY[0x24BE3F230]), "initWithPairingKeyData:", *(_QWORD *)(a1 + 48));
    v8 = objc_msgSend(objc_alloc(MEMORY[0x24BE1BBB0]), "initWithIdentifier:publicKey:privateKey:permissions:", *(_QWORD *)(a1 + 56), v7, 0, 0);
    objc_msgSend(*(id *)(a1 + 64), "homeManager");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 40), "user");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
      v11 = v10;
    else
      v11 = 0;
    v12 = v11;

    v28 = (void *)v8;
    if (v12)
    {
      objc_msgSend(v12, "device");
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      if (v13)
      {
        objc_msgSend(v9, "identityRegistry");
        v14 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(*(id *)(a1 + 40), "user");
        v15 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v14, "registerIdentity:device:object:", v8, v13, v15);

LABEL_14:
      }
    }
    else
    {
      objc_msgSend(*(id *)(a1 + 40), "user");
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v16, "account");
      v13 = (void *)objc_claimAutoreleasedReturnValue();

      if (v13)
      {
        objc_msgSend(v9, "identityRegistry");
        v14 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v14, "registerIdentity:account:object:", v8, v13, *(_QWORD *)(a1 + 40));
        goto LABEL_14;
      }
    }

    objc_msgSend(*(id *)(a1 + 40), "user");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    +[HMDAccountIdentifier accountIdentifierForSenderCorrelationIdentifier:](HMDAccountIdentifier, "accountIdentifierForSenderCorrelationIdentifier:", *(_QWORD *)(a1 + 72));
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v17, "setAccountIdentifier:", v18);

    objc_msgSend(*(id *)(a1 + 40), "user");
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v19, "setMergeIdentifier:", *(_QWORD *)(a1 + 72));

    v20 = -[HMDCoreDataCloudShareInvitation initWithURL:token:]([HMDCoreDataCloudShareInvitation alloc], "initWithURL:token:", *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88));
    objc_msgSend(v9, "homeOwnerCloudShareManager");
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    v22 = objc_alloc(MEMORY[0x24BE3F168]);
    objc_msgSend(*(id *)(a1 + 64), "workQueue");
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    v24 = (void *)objc_msgSend(v22, "initWithQueue:", v23);

    objc_msgSend(v21, "acceptShareInvitation:", v20);
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    v26 = MEMORY[0x24BDAC760];
    v39[0] = MEMORY[0x24BDAC760];
    v39[1] = 3221225472;
    v39[2] = __257__HMDHome__handleUpdateRequestForHomeInvitation_controllerPublicKey_controllerUsername_invitationState_presenceAuthStatus_preferredUserID_fromHandle_fromAddress_fromMergeID_reverseShareURL_reverseShareToken_issuerPublicKeyER_message_messageResponseHandler___block_invoke_2;
    v39[3] = &unk_24E7769D0;
    v39[4] = *(_QWORD *)(a1 + 64);
    v40 = *(id *)(a1 + 96);
    v41 = *(id *)(a1 + 40);
    v42 = *(id *)(a1 + 104);
    v43 = *(id *)(a1 + 48);
    v44 = *(id *)(a1 + 56);
    v45 = *(id *)(a1 + 112);
    v46 = *(id *)(a1 + 120);
    v47 = *(id *)(a1 + 128);
    v29[0] = v26;
    v29[1] = 3221225472;
    v29[2] = __257__HMDHome__handleUpdateRequestForHomeInvitation_controllerPublicKey_controllerUsername_invitationState_presenceAuthStatus_preferredUserID_fromHandle_fromAddress_fromMergeID_reverseShareURL_reverseShareToken_issuerPublicKeyER_message_messageResponseHandler___block_invoke_2_1334;
    v29[3] = &unk_24E7769F8;
    v29[4] = *(_QWORD *)(a1 + 64);
    v30 = *(id *)(a1 + 96);
    v31 = *(id *)(a1 + 40);
    v32 = *(id *)(a1 + 104);
    v33 = *(id *)(a1 + 48);
    v34 = *(id *)(a1 + 56);
    v35 = *(id *)(a1 + 88);
    v36 = *(id *)(a1 + 112);
    v37 = *(id *)(a1 + 120);
    v38 = *(id *)(a1 + 128);
    v27 = (id)objc_msgSend(v25, "inContext:then:orRecover:", v24, v39, v29);

    goto LABEL_16;
  }
  v4 = *(_QWORD *)(a1 + 128);
  if (v4)
    (*(void (**)(uint64_t, id, _QWORD))(v4 + 16))(v4, v3, 0);
LABEL_16:

}

uint64_t __257__HMDHome__handleUpdateRequestForHomeInvitation_controllerPublicKey_controllerUsername_invitationState_presenceAuthStatus_preferredUserID_fromHandle_fromAddress_fromMergeID_reverseShareURL_reverseShareToken_issuerPublicKeyER_message_messageResponseHandler___block_invoke_1337(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  NSObject *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  int v13;
  void *v14;
  __int16 v15;
  void *v16;
  __int16 v17;
  void *v18;
  __int16 v19;
  void *v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  v3 = a2;
  v4 = (void *)MEMORY[0x227676638]();
  v5 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v6 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 40), "user");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "uuid");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 32), "name");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 32), "uuid");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v13 = 138544130;
    v14 = v7;
    v15 = 2112;
    v16 = v9;
    v17 = 2112;
    v18 = v10;
    v19 = 2112;
    v20 = v11;
    _os_log_impl(&dword_2218F0000, v6, OS_LOG_TYPE_INFO, "%{public}@Successfully revoked cloud share for declined invite %@ for home %@/%@", (uint8_t *)&v13, 0x2Au);

  }
  objc_autoreleasePoolPop(v4);

  return 1;
}

uint64_t __257__HMDHome__handleUpdateRequestForHomeInvitation_controllerPublicKey_controllerUsername_invitationState_presenceAuthStatus_preferredUserID_fromHandle_fromAddress_fromMergeID_reverseShareURL_reverseShareToken_issuerPublicKeyER_message_messageResponseHandler___block_invoke_1338(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  NSObject *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  int v13;
  void *v14;
  __int16 v15;
  void *v16;
  __int16 v17;
  void *v18;
  __int16 v19;
  void *v20;
  __int16 v21;
  id v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  v3 = a2;
  v4 = (void *)MEMORY[0x227676638]();
  v5 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v6 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
  {
    HMFGetLogIdentifier();
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 40), "user");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "uuid");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 32), "name");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 32), "uuid");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v13 = 138544386;
    v14 = v7;
    v15 = 2112;
    v16 = v9;
    v17 = 2112;
    v18 = v10;
    v19 = 2112;
    v20 = v11;
    v21 = 2112;
    v22 = v3;
    _os_log_impl(&dword_2218F0000, v6, OS_LOG_TYPE_ERROR, "%{public}@Failed to revoke cloud share for declined invite %@ for home %@/%@ due to %@", (uint8_t *)&v13, 0x34u);

  }
  objc_autoreleasePoolPop(v4);

  return 1;
}

uint64_t __257__HMDHome__handleUpdateRequestForHomeInvitation_controllerPublicKey_controllerUsername_invitationState_presenceAuthStatus_preferredUserID_fromHandle_fromAddress_fromMergeID_reverseShareURL_reverseShareToken_issuerPublicKeyER_message_messageResponseHandler___block_invoke_2(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  NSObject *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  unint64_t v11;
  __CFString *v12;
  __CFString *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  _QWORD v23[4];
  id v24;
  uint8_t buf[4];
  void *v26;
  __int16 v27;
  id v28;
  __int16 v29;
  uint64_t v30;
  __int16 v31;
  void *v32;
  __int16 v33;
  void *v34;
  __int16 v35;
  __CFString *v36;
  uint64_t v37;

  v37 = *MEMORY[0x24BDAC8D0];
  v3 = a2;
  v4 = (void *)MEMORY[0x227676638]();
  v5 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v6 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v22 = *(_QWORD *)(a1 + 40);
    objc_msgSend(*(id *)(a1 + 32), "name");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 32), "uuid");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 48), "user");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v11 = objc_msgSend(v10, "privilege");
    if (v11 > 5)
      v12 = CFSTR("None");
    else
      v12 = off_24E793D90[v11];
    v13 = v12;
    *(_DWORD *)buf = 138544642;
    v26 = v7;
    v27 = 2112;
    v28 = v3;
    v29 = 2112;
    v30 = v22;
    v31 = 2112;
    v32 = v8;
    v33 = 2112;
    v34 = v9;
    v35 = 2112;
    v36 = v13;
    _os_log_impl(&dword_2218F0000, v6, OS_LOG_TYPE_INFO, "%{public}@Joined cloud share %@ from shared user %@ for home %@ /%@ / %@", buf, 0x3Eu);

  }
  objc_autoreleasePoolPop(v4);
  v14 = *(void **)(a1 + 32);
  v15 = *(_QWORD *)(a1 + 48);
  v16 = *(_QWORD *)(a1 + 56);
  v17 = *(_QWORD *)(a1 + 64);
  v18 = *(_QWORD *)(a1 + 72);
  v19 = *(_QWORD *)(a1 + 80);
  v20 = *(_QWORD *)(a1 + 88);
  v23[0] = MEMORY[0x24BDAC760];
  v23[1] = 3221225472;
  v23[2] = __257__HMDHome__handleUpdateRequestForHomeInvitation_controllerPublicKey_controllerUsername_invitationState_presenceAuthStatus_preferredUserID_fromHandle_fromAddress_fromMergeID_reverseShareURL_reverseShareToken_issuerPublicKeyER_message_messageResponseHandler___block_invoke_1333;
  v23[3] = &unk_24E79A050;
  v24 = *(id *)(a1 + 96);
  objc_msgSend(v14, "__handleAcceptedOutgoingInvitationResponse:destinationAddress:publicKey:username:reverseShare:reverseShareToken:issuerPublicKeyER:presenceAuthStatus:completionHandler:", v15, v16, v17, v18, v3, 0, v19, v20, v23);

  return 1;
}

uint64_t __257__HMDHome__handleUpdateRequestForHomeInvitation_controllerPublicKey_controllerUsername_invitationState_presenceAuthStatus_preferredUserID_fromHandle_fromAddress_fromMergeID_reverseShareURL_reverseShareToken_issuerPublicKeyER_message_messageResponseHandler___block_invoke_2_1334(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  NSObject *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  dispatch_time_t v19;
  NSObject *v20;
  _QWORD block[5];
  _QWORD v23[4];
  id v24;
  uint8_t buf[4];
  void *v26;
  __int16 v27;
  uint64_t v28;
  __int16 v29;
  void *v30;
  __int16 v31;
  void *v32;
  __int16 v33;
  id v34;
  uint64_t v35;

  v35 = *MEMORY[0x24BDAC8D0];
  v3 = a2;
  v4 = (void *)MEMORY[0x227676638]();
  v5 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v6 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = *(_QWORD *)(a1 + 40);
    objc_msgSend(*(id *)(a1 + 32), "name");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 32), "uuid");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138544386;
    v26 = v7;
    v27 = 2112;
    v28 = v8;
    v29 = 2112;
    v30 = v9;
    v31 = 2112;
    v32 = v10;
    v33 = 2112;
    v34 = v3;
    _os_log_impl(&dword_2218F0000, v6, OS_LOG_TYPE_INFO, "%{public}@Failed to accept cloud share from shared user %@ for home %@/%@ due to %@, will try later", buf, 0x34u);

  }
  objc_autoreleasePoolPop(v4);
  v11 = *(void **)(a1 + 32);
  v12 = *(_QWORD *)(a1 + 48);
  v13 = *(_QWORD *)(a1 + 56);
  v14 = *(_QWORD *)(a1 + 64);
  v15 = *(_QWORD *)(a1 + 72);
  v16 = *(_QWORD *)(a1 + 80);
  v17 = *(_QWORD *)(a1 + 88);
  v23[0] = MEMORY[0x24BDAC760];
  v23[1] = 3221225472;
  v23[2] = __257__HMDHome__handleUpdateRequestForHomeInvitation_controllerPublicKey_controllerUsername_invitationState_presenceAuthStatus_preferredUserID_fromHandle_fromAddress_fromMergeID_reverseShareURL_reverseShareToken_issuerPublicKeyER_message_messageResponseHandler___block_invoke_1335;
  v23[3] = &unk_24E79A050;
  v18 = *(_QWORD *)(a1 + 96);
  v24 = *(id *)(a1 + 104);
  objc_msgSend(v11, "__handleAcceptedOutgoingInvitationResponse:destinationAddress:publicKey:username:reverseShare:reverseShareToken:issuerPublicKeyER:presenceAuthStatus:completionHandler:", v12, v13, v14, v15, 0, v16, v17, v18, v23);
  v19 = dispatch_time(0, 300000000000);
  objc_msgSend(*(id *)(a1 + 32), "workQueue");
  v20 = objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x24BDAC760];
  block[1] = 3221225472;
  block[2] = __257__HMDHome__handleUpdateRequestForHomeInvitation_controllerPublicKey_controllerUsername_invitationState_presenceAuthStatus_preferredUserID_fromHandle_fromAddress_fromMergeID_reverseShareURL_reverseShareToken_issuerPublicKeyER_message_messageResponseHandler___block_invoke_2_1336;
  block[3] = &unk_24E79C240;
  block[4] = *(_QWORD *)(a1 + 32);
  dispatch_after(v19, v20, block);

  return 1;
}

uint64_t __257__HMDHome__handleUpdateRequestForHomeInvitation_controllerPublicKey_controllerUsername_invitationState_presenceAuthStatus_preferredUserID_fromHandle_fromAddress_fromMergeID_reverseShareURL_reverseShareToken_issuerPublicKeyER_message_messageResponseHandler___block_invoke_1335(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(result + 16))(result, a2, 0);
  return result;
}

uint64_t __257__HMDHome__handleUpdateRequestForHomeInvitation_controllerPublicKey_controllerUsername_invitationState_presenceAuthStatus_preferredUserID_fromHandle_fromAddress_fromMergeID_reverseShareURL_reverseShareToken_issuerPublicKeyER_message_messageResponseHandler___block_invoke_2_1336(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_processUnacceptReverseShareAccessForUsers");
}

uint64_t __257__HMDHome__handleUpdateRequestForHomeInvitation_controllerPublicKey_controllerUsername_invitationState_presenceAuthStatus_preferredUserID_fromHandle_fromAddress_fromMergeID_reverseShareURL_reverseShareToken_issuerPublicKeyER_message_messageResponseHandler___block_invoke_1333(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(result + 16))(result, a2, 0);
  return result;
}

void __53__HMDHome__processUnacceptReverseShareAccessForUsers__block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  id v9;
  NSObject *v10;
  void *v11;
  void *v12;
  int v13;
  void *v14;
  __int16 v15;
  void *v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  objc_msgSend(*(id *)(a1 + 32), "uuid");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 40), "managedObjectContext");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  +[_MKFHome findHomeMemberWithUUID:context:](_MKFHome, "findHomeMemberWithUUID:context:", v2, v3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  if (v4)
  {
    objc_msgSend(v4, "reverseShareToken");
    v5 = objc_claimAutoreleasedReturnValue();
    v6 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    v7 = *(void **)(v6 + 40);
    *(_QWORD *)(v6 + 40) = v5;

  }
  else
  {
    v8 = (void *)MEMORY[0x227676638]();
    v9 = *(id *)(a1 + 48);
    HMFGetOSLogHandle();
    v10 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(*(id *)(a1 + 32), "uuid");
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      v13 = 138543618;
      v14 = v11;
      v15 = 2112;
      v16 = v12;
      _os_log_impl(&dword_2218F0000, v10, OS_LOG_TYPE_ERROR, "%{public}@Unable to find home member with UUID %@", (uint8_t *)&v13, 0x16u);

    }
    objc_autoreleasePoolPop(v8);
  }

}

uint64_t __53__HMDHome__processUnacceptReverseShareAccessForUsers__block_invoke_1319(uint64_t a1, void *a2)
{
  id v3;
  id WeakRetained;
  HMDCoreDataCloudShareInvitation *v5;
  void *v6;
  HMDCoreDataCloudShareInvitation *v7;
  void *v8;
  void *v9;
  id v10;
  void *v11;
  void *v12;
  void *v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  id v17;
  void *v18;
  uint64_t result;
  _QWORD v20[6];
  id v21;
  _QWORD v22[5];
  id v23;
  id v24;

  v3 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 64));
  v5 = [HMDCoreDataCloudShareInvitation alloc];
  objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), "shareURL");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = -[HMDCoreDataCloudShareInvitation initWithURL:token:](v5, "initWithURL:token:", v6, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40));

  objc_msgSend(WeakRetained, "homeManager");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "homeOwnerCloudShareManager");
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  v10 = objc_alloc(MEMORY[0x24BE3F168]);
  objc_msgSend(WeakRetained, "workQueue");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v12 = (void *)objc_msgSend(v10, "initWithQueue:", v11);

  objc_msgSend(v9, "acceptShareInvitation:", v7);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  v14 = MEMORY[0x24BDAC760];
  v22[0] = MEMORY[0x24BDAC760];
  v22[1] = 3221225472;
  v22[2] = __53__HMDHome__processUnacceptReverseShareAccessForUsers__block_invoke_2;
  v22[3] = &unk_24E776930;
  objc_copyWeak(&v24, (id *)(a1 + 64));
  v15 = *(void **)(a1 + 40);
  v22[4] = *(_QWORD *)(a1 + 32);
  v23 = v15;
  v20[0] = v14;
  v20[1] = 3221225472;
  v20[2] = __53__HMDHome__processUnacceptReverseShareAccessForUsers__block_invoke_1323;
  v20[3] = &unk_24E776958;
  objc_copyWeak(&v21, (id *)(a1 + 64));
  v16 = *(_QWORD *)(a1 + 56);
  v20[4] = *(_QWORD *)(a1 + 32);
  v20[5] = v16;
  objc_msgSend(v13, "inContext:then:orRecover:", v12, v22, v20);
  v17 = (id)objc_claimAutoreleasedReturnValue();
  if (v17)
  {
    v18 = v17;

    objc_destroyWeak(&v21);
    objc_destroyWeak(&v24);

    return 3;
  }
  else
  {
    result = _HMFPreconditionFailure();
    __break(1u);
  }
  return result;
}

uint64_t __53__HMDHome__processUnacceptReverseShareAccessForUsers__block_invoke_1324(uint64_t a1, void *a2)
{
  id v3;
  id *v4;
  id WeakRetained;
  void *v6;
  id v7;
  NSObject *v8;
  void *v9;
  dispatch_time_t v10;
  NSObject *v11;
  _QWORD block[4];
  id v14;
  uint8_t buf[4];
  void *v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  v3 = a2;
  v4 = (id *)(a1 + 40);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained && *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    v6 = (void *)MEMORY[0x227676638]();
    v7 = WeakRetained;
    HMFGetOSLogHandle();
    v8 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v16 = v9;
      _os_log_impl(&dword_2218F0000, v8, OS_LOG_TYPE_INFO, "%{public}@At least one shared user reverse share not accepted, scheduling retry", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v6);
    v10 = dispatch_time(0, 300000000000);
    objc_msgSend(v7, "workQueue");
    v11 = objc_claimAutoreleasedReturnValue();
    block[0] = MEMORY[0x24BDAC760];
    block[1] = 3221225472;
    block[2] = __53__HMDHome__processUnacceptReverseShareAccessForUsers__block_invoke_1325;
    block[3] = &unk_24E797318;
    objc_copyWeak(&v14, v4);
    dispatch_after(v10, v11, block);

    objc_destroyWeak(&v14);
  }

  return 1;
}

void __53__HMDHome__processUnacceptReverseShareAccessForUsers__block_invoke_1325(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "_processUnacceptReverseShareAccessForUsers");

}

uint64_t __53__HMDHome__processUnacceptReverseShareAccessForUsers__block_invoke_2(uint64_t a1, void *a2)
{
  id v3;
  id WeakRetained;
  void *v5;
  id v6;
  NSObject *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  _QWORD v16[5];
  id v17;
  id v18;
  uint8_t buf[4];
  void *v20;
  __int16 v21;
  id v22;
  __int16 v23;
  void *v24;
  __int16 v25;
  void *v26;
  __int16 v27;
  void *v28;
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  v3 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  if (WeakRetained)
  {
    v5 = (void *)MEMORY[0x227676638]();
    v6 = WeakRetained;
    HMFGetOSLogHandle();
    v7 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(*(id *)(a1 + 32), "accountHandle");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v6, "name");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v6, "uuid");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138544386;
      v20 = v8;
      v21 = 2112;
      v22 = v3;
      v23 = 2112;
      v24 = v9;
      v25 = 2112;
      v26 = v10;
      v27 = 2112;
      v28 = v11;
      _os_log_impl(&dword_2218F0000, v7, OS_LOG_TYPE_INFO, "%{public}@Joined cloud share %@ from shared user %@ for home %@/%@", buf, 0x34u);

    }
    objc_autoreleasePoolPop(v5);
    objc_msgSend(v6, "backingStore");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "context");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    v16[0] = MEMORY[0x24BDAC760];
    v16[1] = 3221225472;
    v16[2] = __53__HMDHome__processUnacceptReverseShareAccessForUsers__block_invoke_1321;
    v16[3] = &unk_24E79BBD0;
    v14 = *(void **)(a1 + 40);
    v16[4] = *(_QWORD *)(a1 + 32);
    v17 = v14;
    v18 = v6;
    objc_msgSend(v13, "unsafeSynchronousBlock:", v16);

  }
  return 1;
}

uint64_t __53__HMDHome__processUnacceptReverseShareAccessForUsers__block_invoke_1323(uint64_t a1, void *a2)
{
  id v3;
  id WeakRetained;
  void *v5;
  id v6;
  NSObject *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  int v13;
  void *v14;
  __int16 v15;
  void *v16;
  __int16 v17;
  void *v18;
  __int16 v19;
  void *v20;
  __int16 v21;
  id v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  v3 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  v5 = (void *)MEMORY[0x227676638]();
  v6 = WeakRetained;
  HMFGetOSLogHandle();
  v7 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
  {
    HMFGetLogIdentifier();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 32), "accountHandle");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "name");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "uuid");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v13 = 138544386;
    v14 = v8;
    v15 = 2112;
    v16 = v9;
    v17 = 2112;
    v18 = v10;
    v19 = 2112;
    v20 = v11;
    v21 = 2112;
    v22 = v3;
    _os_log_impl(&dword_2218F0000, v7, OS_LOG_TYPE_ERROR, "%{public}@Failed to accept cloud share from shared user %@ for home %@/%@ due to %@", (uint8_t *)&v13, 0x34u);

  }
  objc_autoreleasePoolPop(v5);
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 1;

  return 1;
}

void __53__HMDHome__processUnacceptReverseShareAccessForUsers__block_invoke_1321(id *a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  id v7;
  NSObject *v8;
  void *v9;
  void *v10;
  int v11;
  void *v12;
  __int16 v13;
  void *v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  objc_msgSend(a1[4], "uuid");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(a1[5], "managedObjectContext");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  +[_MKFHome findHomeMemberWithUUID:context:](_MKFHome, "findHomeMemberWithUUID:context:", v2, v3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  if (v4)
  {
    objc_msgSend(v4, "setReverseShareToken:", 0);
    +[HMCContext currentContext](HMCContext, "currentContext");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "save");

  }
  else
  {
    v6 = (void *)MEMORY[0x227676638]();
    v7 = a1[6];
    HMFGetOSLogHandle();
    v8 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(a1[4], "uuid");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      v11 = 138543618;
      v12 = v9;
      v13 = 2112;
      v14 = v10;
      _os_log_impl(&dword_2218F0000, v8, OS_LOG_TYPE_ERROR, "%{public}@After accepting share, unable to find home member with UUID %@", (uint8_t *)&v11, 0x16u);

    }
    objc_autoreleasePoolPop(v6);
  }

}

uint64_t __48__HMDHome__handleUpdateOutgoingInvitationState___block_invoke(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  NSObject *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  int v13;
  void *v14;
  __int16 v15;
  void *v16;
  __int16 v17;
  void *v18;
  __int16 v19;
  void *v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  v3 = a2;
  v4 = (void *)MEMORY[0x227676638]();
  v5 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v6 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 40), "user");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "uuid");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 32), "name");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 32), "uuid");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v13 = 138544130;
    v14 = v7;
    v15 = 2112;
    v16 = v9;
    v17 = 2112;
    v18 = v10;
    v19 = 2112;
    v20 = v11;
    _os_log_impl(&dword_2218F0000, v6, OS_LOG_TYPE_INFO, "%{public}@Successfully revoked cloud share for canceled invite %@ for home %@/%@", (uint8_t *)&v13, 0x2Au);

  }
  objc_autoreleasePoolPop(v4);

  return 1;
}

uint64_t __48__HMDHome__handleUpdateOutgoingInvitationState___block_invoke_1311(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  NSObject *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  int v13;
  void *v14;
  __int16 v15;
  void *v16;
  __int16 v17;
  void *v18;
  __int16 v19;
  void *v20;
  __int16 v21;
  id v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  v3 = a2;
  v4 = (void *)MEMORY[0x227676638]();
  v5 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v6 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
  {
    HMFGetLogIdentifier();
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 40), "user");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "uuid");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 32), "name");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 32), "uuid");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v13 = 138544386;
    v14 = v7;
    v15 = 2112;
    v16 = v9;
    v17 = 2112;
    v18 = v10;
    v19 = 2112;
    v20 = v11;
    v21 = 2112;
    v22 = v3;
    _os_log_impl(&dword_2218F0000, v6, OS_LOG_TYPE_ERROR, "%{public}@Failed to revoke cloud share for canceled invite %@ for home %@/%@ due to %@", (uint8_t *)&v13, 0x34u);

  }
  objc_autoreleasePoolPop(v4);

  return 1;
}

uint64_t __34__HMDHome_doesThisHomeHaveCameras__block_invoke(uint64_t a1, void *a2)
{
  id v2;
  void *v3;
  id v4;
  void *v5;
  uint64_t v6;

  v2 = a2;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v3 = v2;
  else
    v3 = 0;
  v4 = v3;
  v5 = v4;
  if (v4)
    v6 = objc_msgSend(v4, "hasCameraStreamService");
  else
    v6 = 0;

  return v6;
}

void __86__HMDHome__sendInvitation_message_shareURL_shareToken_suppressHomeInviteNotification___block_invoke(id *a1)
{
  id WeakRetained;
  id v3;
  void *v4;
  id v5;
  NSObject *v6;
  void *v7;
  void *v8;
  void *v9;
  int v10;
  void *v11;
  __int16 v12;
  void *v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  WeakRetained = objc_loadWeakRetained(a1 + 5);
  v3 = objc_loadWeakRetained(a1 + 6);
  if (WeakRetained)
  {
    v4 = (void *)MEMORY[0x227676638]();
    v5 = WeakRetained;
    HMFGetOSLogHandle();
    v6 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v3, "identifier");
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      v10 = 138543618;
      v11 = v7;
      v12 = 2112;
      v13 = v8;
      _os_log_impl(&dword_2218F0000, v6, OS_LOG_TYPE_INFO, "%{public}@Expiring invitation %@", (uint8_t *)&v10, 0x16u);

    }
    objc_autoreleasePoolPop(v4);
    objc_msgSend(v3, "updateInvitationState:", objc_msgSend(v3, "invitationState"));
    objc_msgSend(a1[4], "name");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "saveWithReason:postSyncNotification:", v9, 0);

  }
}

void __86__HMDHome__sendInvitation_message_shareURL_shareToken_suppressHomeInviteNotification___block_invoke_1301(uint64_t a1, void *a2)
{
  id v3;
  id WeakRetained;
  void *v5;
  id v6;
  NSObject *v7;
  NSObject *v8;
  void *v9;
  uint64_t v10;
  const char *v11;
  NSObject *v12;
  os_log_type_t v13;
  uint32_t v14;
  uint64_t v15;
  void *v16;
  void (**v17)(_QWORD, _QWORD, _QWORD);
  int v18;
  void *v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  id v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v3 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  v5 = (void *)MEMORY[0x227676638]();
  v6 = WeakRetained;
  HMFGetOSLogHandle();
  v7 = objc_claimAutoreleasedReturnValue();
  v8 = v7;
  if (v3)
  {
    if (!os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      goto LABEL_7;
    HMFGetLogIdentifier();
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v10 = *(_QWORD *)(a1 + 32);
    v18 = 138543874;
    v19 = v9;
    v20 = 2112;
    v21 = v10;
    v22 = 2112;
    v23 = v3;
    v11 = "%{public}@Failed to send invite to user, %@, with error: %@";
    v12 = v8;
    v13 = OS_LOG_TYPE_ERROR;
    v14 = 32;
  }
  else
  {
    if (!os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
      goto LABEL_7;
    HMFGetLogIdentifier();
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v15 = *(_QWORD *)(a1 + 32);
    v18 = 138543618;
    v19 = v9;
    v20 = 2112;
    v21 = v15;
    v11 = "%{public}@Successfully sent invite to user: %@";
    v12 = v8;
    v13 = OS_LOG_TYPE_INFO;
    v14 = 22;
  }
  _os_log_impl(&dword_2218F0000, v12, v13, v11, (uint8_t *)&v18, v14);

LABEL_7:
  objc_autoreleasePoolPop(v5);
  objc_msgSend(*(id *)(a1 + 40), "responseHandler");
  v16 = (void *)objc_claimAutoreleasedReturnValue();

  if (v16)
  {
    objc_msgSend(*(id *)(a1 + 40), "responseHandler");
    v17 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
    ((void (**)(_QWORD, id, _QWORD))v17)[2](v17, v3, 0);

  }
}

void __148__HMDHome__sendInviteToUserWithHandle_inviteIdentifier_expiryDate_shareURL_shareToken_suppressHomeInviteNotification_invitedUser_completionHandler___block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id WeakRetained;
  void *v8;
  id v9;
  NSObject *v10;
  void *v11;
  uint64_t v12;
  const char *v13;
  NSObject *v14;
  os_log_type_t v15;
  uint32_t v16;
  id v17;
  uint64_t v18;
  int v19;
  void *v20;
  __int16 v21;
  uint64_t v22;
  __int16 v23;
  id v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v5 = a2;
  v6 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (v5 && objc_msgSend(v5, "code") != 8)
  {
    v8 = (void *)MEMORY[0x227676638]();
    v17 = WeakRetained;
    HMFGetOSLogHandle();
    v10 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      HMFGetLogIdentifier();
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      v18 = *(_QWORD *)(a1 + 32);
      v19 = 138543874;
      v20 = v11;
      v21 = 2112;
      v22 = v18;
      v23 = 2112;
      v24 = v5;
      v13 = "%{public}@Failed to send invitation request to user, %@, due to error: %@";
      v14 = v10;
      v15 = OS_LOG_TYPE_DEFAULT;
      v16 = 32;
      goto LABEL_7;
    }
  }
  else
  {
    v8 = (void *)MEMORY[0x227676638]();
    v9 = WeakRetained;
    HMFGetOSLogHandle();
    v10 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      v12 = *(_QWORD *)(a1 + 32);
      v19 = 138543618;
      v20 = v11;
      v21 = 2112;
      v22 = v12;
      v13 = "%{public}@Successfully sent invitation to: %@";
      v14 = v10;
      v15 = OS_LOG_TYPE_INFO;
      v16 = 22;
LABEL_7:
      _os_log_impl(&dword_2218F0000, v14, v15, v13, (uint8_t *)&v19, v16);

    }
  }

  objc_autoreleasePoolPop(v8);
}

void __148__HMDHome__sendInviteToUserWithHandle_inviteIdentifier_expiryDate_shareURL_shareToken_suppressHomeInviteNotification_invitedUser_completionHandler___block_invoke_1307(id *a1, void *a2, uint64_t a3, void *a4)
{
  id v6;
  id v7;
  id WeakRetained;
  void *v9;
  NSObject *v10;
  _QWORD v11[5];
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;

  v6 = a2;
  v7 = a4;
  WeakRetained = objc_loadWeakRetained(a1 + 7);
  v9 = WeakRetained;
  if (WeakRetained)
  {
    objc_msgSend(WeakRetained, "workQueue");
    v10 = objc_claimAutoreleasedReturnValue();
    v11[0] = MEMORY[0x24BDAC760];
    v11[1] = 3221225472;
    v11[2] = __148__HMDHome__sendInviteToUserWithHandle_inviteIdentifier_expiryDate_shareURL_shareToken_suppressHomeInviteNotification_invitedUser_completionHandler___block_invoke_2;
    v11[3] = &unk_24E799C60;
    v11[4] = v9;
    v12 = a1[4];
    v13 = v7;
    v14 = a1[5];
    v15 = v6;
    v16 = a1[6];
    dispatch_async(v10, v11);

  }
}

void __148__HMDHome__sendInviteToUserWithHandle_inviteIdentifier_expiryDate_shareURL_shareToken_suppressHomeInviteNotification_invitedUser_completionHandler___block_invoke_2(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  id v5;
  NSObject *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  NSObject *v11;
  os_log_type_t v12;
  _BOOL4 v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  void *v18;
  void *v19;
  HMDOutgoingHomeInvitationModel *v20;
  void *v21;
  void *v22;
  HMDOutgoingHomeInvitationModel *v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  void *v29;
  __int16 v30;
  uint64_t v31;
  __int16 v32;
  uint64_t v33;
  uint64_t v34;

  v34 = *MEMORY[0x24BDAC8D0];
  objc_msgSend(*(id *)(a1 + 32), "outgoingInvitations");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "hmf_firstObjectWithValue:forKeyPath:", *(_QWORD *)(a1 + 40), CFSTR("identifier"));
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  if (*(_QWORD *)(a1 + 48))
  {
    v4 = (void *)MEMORY[0x227676638]();
    v5 = *(id *)(a1 + 32);
    HMFGetOSLogHandle();
    v6 = objc_claimAutoreleasedReturnValue();
    if (!os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
LABEL_5:

      objc_autoreleasePoolPop(v4);
      goto LABEL_10;
    }
    HMFGetLogIdentifier();
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = *(_QWORD *)(a1 + 48);
    v8 = *(_QWORD *)(a1 + 56);
    v28 = 138543874;
    v29 = v7;
    v30 = 2112;
    v31 = v8;
    v32 = 2112;
    v33 = v9;
    v10 = "%{public}@Failed to send ids invitation request to user, %@, due to error: %@";
    v11 = v6;
    v12 = OS_LOG_TYPE_ERROR;
LABEL_4:
    _os_log_impl(&dword_2218F0000, v11, v12, v10, (uint8_t *)&v28, 0x20u);

    goto LABEL_5;
  }
  v4 = (void *)MEMORY[0x227676638]();
  v5 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v6 = objc_claimAutoreleasedReturnValue();
  v13 = os_log_type_enabled(v6, OS_LOG_TYPE_INFO);
  if (!v3)
  {
    if (!v13)
      goto LABEL_5;
    HMFGetLogIdentifier();
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v26 = *(_QWORD *)(a1 + 40);
    v27 = *(_QWORD *)(a1 + 56);
    v28 = 138543874;
    v29 = v7;
    v30 = 2112;
    v31 = v26;
    v32 = 2112;
    v33 = v27;
    v10 = "%{public}@Outgoing invite %@ has been removed while sending it %@";
    v11 = v6;
    v12 = OS_LOG_TYPE_INFO;
    goto LABEL_4;
  }
  if (v13)
  {
    HMFGetLogIdentifier();
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    v15 = *(_QWORD *)(a1 + 56);
    v16 = *(_QWORD *)(a1 + 64);
    v28 = 138543874;
    v29 = v14;
    v30 = 2112;
    v31 = v15;
    v32 = 2112;
    v33 = v16;
    _os_log_impl(&dword_2218F0000, v6, OS_LOG_TYPE_INFO, "%{public}@Successfully sent invitation to: %@, updating home invitation with IDS invite uuid %@", (uint8_t *)&v28, 0x20u);

  }
  objc_autoreleasePoolPop(v4);
  objc_msgSend(*(id *)(a1 + 32), "backingStore");
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  +[HMDBackingStoreTransactionOptions defaultXPCOptions](HMDBackingStoreTransactionOptions, "defaultXPCOptions");
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v17, "transaction:options:", CFSTR("kUpdateInvitationStateRequestKey"), v18);
  v19 = (void *)objc_claimAutoreleasedReturnValue();

  v20 = [HMDOutgoingHomeInvitationModel alloc];
  objc_msgSend(v3, "identifier");
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 32), "uuid");
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  v23 = -[HMDBackingStoreModelObject initWithObjectChangeType:uuid:parentUUID:](v20, "initWithObjectChangeType:uuid:parentUUID:", 2, v21, v22);

  -[HMDOutgoingHomeInvitationModel setIdsInvitationUUID:](v23, "setIdsInvitationUUID:", *(_QWORD *)(a1 + 64));
  objc_msgSend(MEMORY[0x24BDBCE60], "now");
  v24 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDOutgoingHomeInvitationModel setDateSent:](v23, "setDateSent:", v24);

  objc_msgSend(v19, "add:", v23);
  objc_msgSend(v19, "run");

LABEL_10:
  v25 = *(_QWORD *)(a1 + 72);
  if (v25)
    (*(void (**)(uint64_t, _QWORD))(v25 + 16))(v25, *(_QWORD *)(a1 + 48));

}

void __64__HMDHome__addOutgoingInvitations_message_transactionCompleted___block_invoke(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  id v5;

  v5 = a2;
  v3 = _Block_copy(*(const void **)(a1 + 40));
  v4 = v3;
  if (v3)
    (*((void (**)(void *, id))v3 + 2))(v3, v5);

  objc_msgSend(*(id *)(a1 + 32), "respondWithPayload:", 0);
}

void __46__HMDHome__processOutgoingInvitationsRequest___block_invoke(uint64_t a1)
{
  id WeakRetained;
  NSObject *v3;
  _QWORD block[5];
  id v5;
  char v6;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend(WeakRetained, "workQueue");
  v3 = objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x24BDAC760];
  block[1] = 3221225472;
  block[2] = __46__HMDHome__processOutgoingInvitationsRequest___block_invoke_2;
  block[3] = &unk_24E799CF0;
  block[4] = WeakRetained;
  v5 = *(id *)(a1 + 32);
  v6 = *(_BYTE *)(a1 + 48);
  dispatch_async(v3, block);

}

uint64_t __46__HMDHome__processOutgoingInvitationsRequest___block_invoke_2(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_grantAccessAndSendOutgoingInvitation:suppressHomeInviteNotification:", *(_QWORD *)(a1 + 40), *(unsigned __int8 *)(a1 + 48));
}

uint64_t __38__HMDHome__handleOutgoingInvitations___block_invoke(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(a1 + 32), "_processOutgoingInvitationsRequest:", a2);
}

uint64_t __45__HMDHome_handleCurrentUserPrivilegeChanged___block_invoke(uint64_t a1)
{
  void *v2;
  id v3;
  NSObject *v4;
  void *v5;
  void *v6;
  unint64_t v7;
  __CFString *v8;
  __CFString *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  unint64_t v14;
  void *v15;
  void *v16;
  void *v17;
  id v18;
  NSObject *v19;
  void *v20;
  int v22;
  void *v23;
  __int16 v24;
  __CFString *v25;
  __int16 v26;
  void *v27;
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  if (isFeatureMatteriPhoneOnlyPairingControlEnabled())
  {
    v2 = (void *)MEMORY[0x227676638]();
    v3 = *(id *)(a1 + 32);
    HMFGetOSLogHandle();
    v4 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(*(id *)(a1 + 32), "currentUser");
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      v7 = objc_msgSend(v6, "privilege");
      if (v7 > 5)
        v8 = CFSTR("None");
      else
        v8 = off_24E793D90[v7];
      v9 = v8;
      objc_msgSend(*(id *)(a1 + 32), "fabric");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v10, "accessControl");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v11, "currentUserPrivilege");
      HMMTRUserPrivilegeAsString();
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      v22 = 138543874;
      v23 = v5;
      v24 = 2112;
      v25 = v9;
      v26 = 2112;
      v27 = v12;
      _os_log_impl(&dword_2218F0000, v4, OS_LOG_TYPE_INFO, "%{public}@Updating Fabric user privilege to %@ from priv %@", (uint8_t *)&v22, 0x20u);

    }
    objc_autoreleasePoolPop(v2);
    objc_msgSend(*(id *)(a1 + 32), "currentUser");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    v14 = +[HMDUser hmmtrUserPrivilegeFromHMDUserPrivilege:](HMDUser, "hmmtrUserPrivilegeFromHMDUserPrivilege:", objc_msgSend(v13, "privilege"));
    objc_msgSend(*(id *)(a1 + 32), "fabric");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v15, "accessControl");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v16, "setCurrentUserPrivilege:", v14);

  }
  v17 = (void *)MEMORY[0x227676638](objc_msgSend(*(id *)(a1 + 32), "_evaluateNetworkProtectionAndRouterManagement"));
  v18 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v19 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    v22 = 138543362;
    v23 = v20;
    _os_log_impl(&dword_2218F0000, v19, OS_LOG_TYPE_INFO, "%{public}@Configuring HMDUserActivityStateDetectorManager - handleCurrentUserPrivilegeChanged", (uint8_t *)&v22, 0xCu);

  }
  objc_autoreleasePoolPop(v17);
  return objc_msgSend(*(id *)(a1 + 32), "configureUserActivityStateDetectorManager");
}

uint64_t __34__HMDHome_refreshUserDisplayNames__block_invoke(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_refreshUserDisplayNames");
}

void __38__HMDHome_findAdditionalUUIDsForUser___block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  id v12;
  NSObject *v13;
  void *v14;
  void *v15;
  void *v16;
  id v17;
  NSObject *v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  _QWORD v23[4];
  id v24;
  uint8_t buf[4];
  void *v26;
  __int16 v27;
  void *v28;
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  objc_msgSend(*(id *)(a1 + 32), "uuid");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  +[HMCContext findUserWithModelID:](HMCContext, "findUserWithModelID:", v2);
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  if (v3)
  {
    objc_msgSend(v3, "additionalModelsForSameUser");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    v5 = v4;
    if (v4)
    {
      if (objc_msgSend(v4, "count"))
      {
        objc_msgSend(MEMORY[0x24BDBCEF0], "setWithCapacity:", objc_msgSend(v5, "count"));
        v6 = (void *)objc_claimAutoreleasedReturnValue();
        v23[0] = MEMORY[0x24BDAC760];
        v23[1] = 3221225472;
        v23[2] = __38__HMDHome_findAdditionalUUIDsForUser___block_invoke_1289;
        v23[3] = &unk_24E776880;
        v24 = v6;
        v7 = v6;
        objc_msgSend(v5, "hmf_enumerateWithAutoreleasePoolUsingBlock:", v23);
        v8 = objc_msgSend(v7, "copy");
        v9 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
        v10 = *(void **)(v9 + 40);
        *(_QWORD *)(v9 + 40) = v8;

      }
      else
      {
        objc_msgSend(MEMORY[0x24BDBCF20], "set");
        v20 = objc_claimAutoreleasedReturnValue();
        v21 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
        v22 = *(void **)(v21 + 40);
        *(_QWORD *)(v21 + 40) = v20;

      }
    }
    else
    {
      v16 = (void *)MEMORY[0x227676638]();
      v17 = *(id *)(a1 + 40);
      HMFGetOSLogHandle();
      v18 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v19 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        v26 = v19;
        v27 = 2112;
        v28 = v3;
        _os_log_impl(&dword_2218F0000, v18, OS_LOG_TYPE_ERROR, "%{public}@Failed to find potential additional users with model: %@", buf, 0x16u);

      }
      objc_autoreleasePoolPop(v16);
    }

  }
  else
  {
    v11 = (void *)MEMORY[0x227676638]();
    v12 = *(id *)(a1 + 40);
    HMFGetOSLogHandle();
    v13 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(*(id *)(a1 + 32), "uuid");
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v26 = v14;
      v27 = 2112;
      v28 = v15;
      _os_log_impl(&dword_2218F0000, v13, OS_LOG_TYPE_ERROR, "%{public}@Failed to find user model with modelID %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v11);
  }

}

void __38__HMDHome_findAdditionalUUIDsForUser___block_invoke_1289(uint64_t a1, void *a2)
{
  void *v2;
  id v3;

  v2 = *(void **)(a1 + 32);
  objc_msgSend(a2, "modelID");
  v3 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "addObject:", v3);

}

uint64_t __31__HMDHome__removeUser_message___block_invoke(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(a1 + 32), "updateUserCATWithOperatePrivilege:administerPrivilege:", a2, 0);
}

void __31__HMDHome__removeUser_message___block_invoke_2(uint64_t a1)
{
  void *v2;
  _QWORD v3[4];
  id v4;
  id v5;
  id v6;
  id location;

  objc_initWeak(&location, *(id *)(a1 + 32));
  v2 = *(void **)(a1 + 40);
  v3[0] = MEMORY[0x24BDAC760];
  v3[1] = 3221225472;
  v3[2] = __31__HMDHome__removeUser_message___block_invoke_3;
  v3[3] = &unk_24E796418;
  objc_copyWeak(&v6, &location);
  v4 = *(id *)(a1 + 48);
  v5 = *(id *)(a1 + 56);
  objc_msgSend(v2, "run:", v3);

  objc_destroyWeak(&v6);
  objc_destroyWeak(&location);
}

void __31__HMDHome__removeUser_message___block_invoke_3(id *a1, void *a2)
{
  id v3;
  id WeakRetained;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t i;
  id v15;
  void *v16;
  id v17;
  id v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  uint64_t v24;
  id v25;
  id v26;
  void *v27;
  NSObject *v28;
  void *v29;
  id v30;
  id v31;
  _QWORD v32[5];
  id v33;
  id v34;
  _QWORD v35[5];
  id v36;
  id v37;
  id v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  uint8_t v43[128];
  uint8_t buf[4];
  void *v45;
  __int16 v46;
  id v47;
  uint64_t v48;

  v48 = *MEMORY[0x24BDAC8D0];
  v3 = a2;
  WeakRetained = objc_loadWeakRetained(a1 + 6);
  v5 = WeakRetained;
  if (WeakRetained)
  {
    v31 = v3;
    objc_msgSend(WeakRetained, "backingStore");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    +[HMDBackingStoreTransactionOptions defaultXPCOptions](HMDBackingStoreTransactionOptions, "defaultXPCOptions");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "transaction:options:", CFSTR("kRemoveUserRequestKey"), v7);
    v8 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v5, "__modelObjectsForRemovingOutgoingInvitationForUser:", a1[4]);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "addObjects:", v9);

    v41 = 0u;
    v42 = 0u;
    v40 = 0u;
    v39 = 0u;
    objc_msgSend(v5, "triggers");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v11 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v39, v43, 16);
    if (v11)
    {
      v12 = v11;
      v13 = *(_QWORD *)v40;
      do
      {
        for (i = 0; i != v12; ++i)
        {
          if (*(_QWORD *)v40 != v13)
            objc_enumerationMutation(v10);
          v15 = *(id *)(*((_QWORD *)&v39 + 1) + 8 * i);
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) != 0)
            v16 = v15;
          else
            v16 = 0;
          v17 = v16;

          objc_msgSend(v17, "handleRemovalOfUser:transaction:", a1[4], v8);
        }
        v12 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v39, v43, 16);
      }
      while (v12);
    }

    v18 = objc_alloc(MEMORY[0x24BE3F168]);
    objc_msgSend(v5, "workQueue");
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    v20 = (void *)objc_msgSend(v18, "initWithQueue:", v19);

    objc_msgSend(v5, "homeManager");
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v21, "homeOwnerCloudShareManager");
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v22, "revokeAccessForUser:home:", a1[4], v5);
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    v24 = MEMORY[0x24BDAC760];
    v35[0] = MEMORY[0x24BDAC760];
    v35[1] = 3221225472;
    v35[2] = __31__HMDHome__removeUser_message___block_invoke_1284;
    v35[3] = &unk_24E776310;
    v35[4] = v5;
    v36 = a1[4];
    v37 = v8;
    v38 = a1[5];
    v32[0] = v24;
    v32[1] = 3221225472;
    v32[2] = __31__HMDHome__removeUser_message___block_invoke_1288;
    v32[3] = &unk_24E796B70;
    v32[4] = v5;
    v33 = a1[4];
    v34 = a1[5];
    v25 = v8;
    v26 = (id)objc_msgSend(v23, "inContext:then:orRecover:", v20, v35, v32);

    v3 = v31;
  }
  else
  {
    v27 = (void *)MEMORY[0x227676638]();
    HMFGetOSLogHandle();
    v28 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v29 = (void *)objc_claimAutoreleasedReturnValue();
      v30 = a1[4];
      *(_DWORD *)buf = 138543618;
      v45 = v29;
      v46 = 2112;
      v47 = v30;
      _os_log_impl(&dword_2218F0000, v28, OS_LOG_TYPE_ERROR, "%{public}@Home disappeared, cannot remove user %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v27);
  }

}

uint64_t __31__HMDHome__removeUser_message___block_invoke_1284(id *a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  NSObject *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  HMDUserModel *v11;
  void *v12;
  void *v13;
  HMDUserModel *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  id v19;
  NSObject *v20;
  void *v21;
  id v22;
  void *v23;
  id v24;
  _QWORD v26[5];
  id v27;
  _QWORD v28[5];
  id v29;
  uint8_t buf[4];
  void *v31;
  __int16 v32;
  void *v33;
  __int16 v34;
  void *v35;
  __int16 v36;
  void *v37;
  uint64_t v38;

  v38 = *MEMORY[0x24BDAC8D0];
  v3 = a2;
  v4 = (void *)MEMORY[0x227676638]();
  v5 = a1[4];
  HMFGetOSLogHandle();
  v6 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(a1[5], "uuid");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(a1[4], "name");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(a1[4], "uuid");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138544130;
    v31 = v7;
    v32 = 2112;
    v33 = v8;
    v34 = 2112;
    v35 = v9;
    v36 = 2112;
    v37 = v10;
    _os_log_impl(&dword_2218F0000, v6, OS_LOG_TYPE_INFO, "%{public}@Successfully revoked cloud share for shared user %@ for home %@/%@", buf, 0x2Au);

  }
  objc_autoreleasePoolPop(v4);
  v11 = [HMDUserModel alloc];
  objc_msgSend(a1[5], "uuid");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(a1[4], "uuid");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  v14 = -[HMDBackingStoreModelObject initWithObjectChangeType:uuid:parentUUID:](v11, "initWithObjectChangeType:uuid:parentUUID:", 3, v12, v13);

  objc_msgSend(a1[6], "add:", v14);
  objc_msgSend(a1[4], "findAdditionalUUIDsForUser:", a1[5]);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  v16 = objc_msgSend(v15, "count");
  v17 = MEMORY[0x24BDAC760];
  if (v16)
  {
    v28[0] = MEMORY[0x24BDAC760];
    v28[1] = 3221225472;
    v28[2] = __31__HMDHome__removeUser_message___block_invoke_1285;
    v28[3] = &unk_24E77FFA0;
    v28[4] = a1[4];
    v29 = a1[6];
    objc_msgSend(v15, "hmf_enumerateWithAutoreleasePoolUsingBlock:", v28);

  }
  v18 = (void *)MEMORY[0x227676638]();
  v19 = a1[4];
  HMFGetOSLogHandle();
  v20 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v20, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    v22 = a1[5];
    objc_msgSend(a1[6], "objects");
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543874;
    v31 = v21;
    v32 = 2112;
    v33 = v22;
    v34 = 2112;
    v35 = v23;
    _os_log_impl(&dword_2218F0000, v20, OS_LOG_TYPE_INFO, "%{public}@Going to run V4 transaction to remove user: %@ / %@", buf, 0x20u);

    v17 = MEMORY[0x24BDAC760];
  }

  objc_autoreleasePoolPop(v18);
  v26[0] = v17;
  v26[1] = 3221225472;
  v26[2] = __31__HMDHome__removeUser_message___block_invoke_1287;
  v26[3] = &unk_24E79BCC8;
  v26[4] = a1[4];
  v24 = a1[6];
  v27 = a1[7];
  objc_msgSend(v24, "run:", v26);

  return 1;
}

uint64_t __31__HMDHome__removeUser_message___block_invoke_1288(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  NSObject *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  int v14;
  void *v15;
  __int16 v16;
  void *v17;
  __int16 v18;
  void *v19;
  __int16 v20;
  void *v21;
  __int16 v22;
  id v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v3 = a2;
  v4 = (void *)MEMORY[0x227676638]();
  v5 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v6 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
  {
    HMFGetLogIdentifier();
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 40), "uuid");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 32), "name");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 32), "uuid");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v14 = 138544386;
    v15 = v7;
    v16 = 2112;
    v17 = v8;
    v18 = 2112;
    v19 = v9;
    v20 = 2112;
    v21 = v10;
    v22 = 2112;
    v23 = v3;
    _os_log_impl(&dword_2218F0000, v6, OS_LOG_TYPE_ERROR, "%{public}@Failed to revoke cloud share for shared user %@ for home %@/%@ due to %@", (uint8_t *)&v14, 0x34u);

  }
  objc_autoreleasePoolPop(v4);
  v11 = *(void **)(a1 + 48);
  objc_msgSend(MEMORY[0x24BDD1540], "errorWithDomain:code:userInfo:", *MEMORY[0x24BDD5BD8], 52, 0);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "respondWithError:", v12);

  return 1;
}

void __31__HMDHome__removeUser_message___block_invoke_1285(uint64_t a1, void *a2)
{
  id v3;
  HMDUserModel *v4;
  void *v5;
  HMDUserModel *v6;
  void *v7;
  id v8;
  NSObject *v9;
  void *v10;
  int v11;
  void *v12;
  __int16 v13;
  id v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v3 = a2;
  v4 = [HMDUserModel alloc];
  objc_msgSend(*(id *)(a1 + 32), "uuid");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = -[HMDBackingStoreModelObject initWithObjectChangeType:uuid:parentUUID:](v4, "initWithObjectChangeType:uuid:parentUUID:", 3, v3, v5);

  v7 = (void *)MEMORY[0x227676638](objc_msgSend(*(id *)(a1 + 40), "add:", v6));
  v8 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v9 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v11 = 138543618;
    v12 = v10;
    v13 = 2112;
    v14 = v3;
    _os_log_impl(&dword_2218F0000, v9, OS_LOG_TYPE_INFO, "%{public}@Created transaction to remove duplicate user with UUID %@", (uint8_t *)&v11, 0x16u);

  }
  objc_autoreleasePoolPop(v7);

}

void __31__HMDHome__removeUser_message___block_invoke_1287(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  NSObject *v6;
  void *v7;
  int v8;
  void *v9;
  __int16 v10;
  id v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v3 = a2;
  if (v3)
  {
    v4 = (void *)MEMORY[0x227676638]();
    v5 = *(id *)(a1 + 32);
    HMFGetOSLogHandle();
    v6 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      v8 = 138543618;
      v9 = v7;
      v10 = 2112;
      v11 = v3;
      _os_log_impl(&dword_2218F0000, v6, OS_LOG_TYPE_INFO, "%{public}@Failed to commit removeUser transaction with error: %@", (uint8_t *)&v8, 0x16u);

    }
    objc_autoreleasePoolPop(v4);
  }
  objc_msgSend(*(id *)(a1 + 40), "respondWithPayload:error:", 0, v3);

}

uint64_t __62__HMDHome___modelObjectsForRemovingOutgoingInvitationForUser___block_invoke(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  NSObject *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  int v12;
  void *v13;
  __int16 v14;
  void *v15;
  __int16 v16;
  void *v17;
  __int16 v18;
  void *v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  v3 = a2;
  v4 = (void *)MEMORY[0x227676638]();
  v5 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v6 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 40), "uuid");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 32), "name");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 32), "uuid");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v12 = 138544130;
    v13 = v7;
    v14 = 2112;
    v15 = v8;
    v16 = 2112;
    v17 = v9;
    v18 = 2112;
    v19 = v10;
    _os_log_impl(&dword_2218F0000, v6, OS_LOG_TYPE_INFO, "%{public}@Successfully revoked cloud share for pending user %@ for home %@/%@", (uint8_t *)&v12, 0x2Au);

  }
  objc_autoreleasePoolPop(v4);

  return 1;
}

uint64_t __62__HMDHome___modelObjectsForRemovingOutgoingInvitationForUser___block_invoke_1277(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  NSObject *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  int v12;
  void *v13;
  __int16 v14;
  void *v15;
  __int16 v16;
  void *v17;
  __int16 v18;
  void *v19;
  __int16 v20;
  id v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  v3 = a2;
  v4 = (void *)MEMORY[0x227676638]();
  v5 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v6 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
  {
    HMFGetLogIdentifier();
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 40), "uuid");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 32), "name");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 32), "uuid");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v12 = 138544386;
    v13 = v7;
    v14 = 2112;
    v15 = v8;
    v16 = 2112;
    v17 = v9;
    v18 = 2112;
    v19 = v10;
    v20 = 2112;
    v21 = v3;
    _os_log_impl(&dword_2218F0000, v6, OS_LOG_TYPE_ERROR, "%{public}@Failed to revoke cloud share for pending user %@ for home %@/%@ due to %@", (uint8_t *)&v12, 0x34u);

  }
  objc_autoreleasePoolPop(v4);

  return 1;
}

void __44__HMDHome__removeOutgoingInvitationForUser___block_invoke(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  NSObject *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  void *v11;
  __int16 v12;
  uint64_t v13;
  __int16 v14;
  uint64_t v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  v3 = a2;
  v4 = (void *)MEMORY[0x227676638]();
  v5 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v6 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = *(_QWORD *)(a1 + 40);
    v9 = *(_QWORD *)(a1 + 48);
    v10 = 138543874;
    v11 = v7;
    v12 = 2112;
    v13 = v8;
    v14 = 2112;
    v15 = v9;
    _os_log_impl(&dword_2218F0000, v6, OS_LOG_TYPE_INFO, "%{public}@Error occurred while removing the invitation for the user : %@ / %@", (uint8_t *)&v10, 0x20u);

  }
  objc_autoreleasePoolPop(v4);

}

void __22__HMDHome_removeUser___block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  id v8;
  NSObject *v9;
  void *v10;
  int v11;
  void *v12;
  __int16 v13;
  id v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v5 = a2;
  v6 = a3;
  if (v5)
  {
    v7 = (void *)MEMORY[0x227676638]();
    v8 = *(id *)(a1 + 32);
    HMFGetOSLogHandle();
    v9 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      v11 = 138543618;
      v12 = v10;
      v13 = 2112;
      v14 = v5;
      _os_log_impl(&dword_2218F0000, v9, OS_LOG_TYPE_INFO, "%{public}@Failed to remove user due to %@", (uint8_t *)&v11, 0x16u);

    }
    objc_autoreleasePoolPop(v7);
  }

}

void __32__HMDHome_removeUserWithUserID___block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;
  id v4;

  objc_msgSend(*(id *)(a1 + 32), "users");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "hmf_firstObjectWithValue:forKeyPath:", *(_QWORD *)(a1 + 40), CFSTR("userID"));
  v4 = (id)objc_claimAutoreleasedReturnValue();

  v3 = v4;
  if (v4)
  {
    objc_msgSend(*(id *)(a1 + 32), "removeUser:", v4);
    v3 = v4;
  }

}

void __35__HMDHome__findMergeIDForUserUUID___block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  id v12;
  NSObject *v13;
  void *v14;
  uint64_t v15;
  int v16;
  void *v17;
  __int16 v18;
  uint64_t v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  +[_MKFHome findHomeMemberWithUUID:context:](_MKFHome, "findHomeMemberWithUUID:context:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = v2;
  if (!v2)
    goto LABEL_4;
  objc_msgSend(v2, "home");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "modelID");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 48), "uuid");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = objc_msgSend(v5, "isEqual:", v6);

  if ((v7 & 1) != 0)
  {
    objc_msgSend(v3, "idsMergeIdentifier");
    v8 = objc_claimAutoreleasedReturnValue();
    v9 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    v10 = *(void **)(v9 + 40);
    *(_QWORD *)(v9 + 40) = v8;

  }
  else
  {
LABEL_4:
    v11 = (void *)MEMORY[0x227676638]();
    v12 = *(id *)(a1 + 48);
    HMFGetOSLogHandle();
    v13 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      v15 = *(_QWORD *)(a1 + 32);
      v16 = 138543618;
      v17 = v14;
      v18 = 2112;
      v19 = v15;
      _os_log_impl(&dword_2218F0000, v13, OS_LOG_TYPE_ERROR, "%{public}@Failed to find home member model with modelID %@", (uint8_t *)&v16, 0x16u);

    }
    objc_autoreleasePoolPop(v11);
  }

}

void __40__HMDHome__handleUpdatePresenceConsent___block_invoke(uint64_t a1, uint64_t a2)
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  id v7;

  if (a2)
  {
    objc_msgSend(*(id *)(a1 + 32), "respondWithError:", a2);
  }
  else
  {
    objc_msgSend(MEMORY[0x24BDBCED8], "dictionary");
    v7 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 40), "currentUser");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "presenceAuthStatus");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "addToPayload:", v7);

    v5 = *(void **)(a1 + 32);
    v6 = (void *)objc_msgSend(v7, "copy");
    objc_msgSend(v5, "respondWithPayload:", v6);

  }
}

void __36__HMDHome__readLocalHomeKeyMiscInfo__block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;
  id v4;
  NSObject *v5;
  _BOOL4 v6;
  void *v7;
  void *v8;
  void *v9;
  id v10;
  NSObject *v11;
  void *v12;
  int v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  int v18;
  void *v19;
  __int16 v20;
  void *v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  +[MKFLocalHomeKeyMiscInfo fetchLocalHomeKeyMiscInfoWithHomeUUID:managedObjectContext:](MKFLocalHomeKeyMiscInfo, "fetchLocalHomeKeyMiscInfoWithHomeUUID:managedObjectContext:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = (void *)MEMORY[0x227676638]();
  v4 = *(id *)(a1 + 48);
  HMFGetOSLogHandle();
  v5 = objc_claimAutoreleasedReturnValue();
  v6 = os_log_type_enabled(v5, OS_LOG_TYPE_INFO);
  if (v2)
  {
    if (v6)
    {
      HMFGetLogIdentifier();
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      v18 = 138543362;
      v19 = v7;
      _os_log_impl(&dword_2218F0000, v5, OS_LOG_TYPE_INFO, "%{public}@Reading local home key miscellaneous info.", (uint8_t *)&v18, 0xCu);

    }
    objc_autoreleasePoolPop(v3);
    objc_msgSend(v2, "dismissedWalletKeyUWBUnlockOnboarding");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 48), "setDismissedWalletKeyUWBUnlockOnboarding:", objc_msgSend(v8, "BOOLValue"));

    v9 = (void *)MEMORY[0x227676638]();
    v10 = *(id *)(a1 + 48);
    HMFGetOSLogHandle();
    v11 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      v13 = objc_msgSend(*(id *)(a1 + 48), "dismissedWalletKeyUWBUnlockOnboarding");
      v18 = 138543618;
      v19 = v12;
      v20 = 1024;
      LODWORD(v21) = v13;
      _os_log_impl(&dword_2218F0000, v11, OS_LOG_TYPE_INFO, "%{public}@Dismissed Wallet Key UWB Unlock Onboarding settings read from local store as : %d", (uint8_t *)&v18, 0x12u);

    }
    objc_autoreleasePoolPop(v9);
    objc_msgSend(v2, "clientWalletKeyUUID");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 48), "setClientWalletKeyUUID:", v14);

    v3 = (void *)MEMORY[0x227676638]();
    v4 = *(id *)(a1 + 48);
    HMFGetOSLogHandle();
    v5 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(*(id *)(a1 + 48), "clientWalletKeyUUID");
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      v18 = 138543618;
      v19 = v15;
      v20 = 2112;
      v21 = v16;
      _os_log_impl(&dword_2218F0000, v5, OS_LOG_TYPE_INFO, "%{public}@Client Wallet Key UUID read from local store as : %@", (uint8_t *)&v18, 0x16u);

    }
  }
  else if (v6)
  {
    HMFGetLogIdentifier();
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    v18 = 138543362;
    v19 = v17;
    _os_log_impl(&dword_2218F0000, v5, OS_LOG_TYPE_INFO, "%{public}@Did not find home key misc info in local store.", (uint8_t *)&v18, 0xCu);

  }
  objc_autoreleasePoolPop(v3);

}

void __31__HMDHome_resetHomeKeyMiscInfo__block_invoke(uint64_t a1)
{
  void *v2;
  id v3;
  NSObject *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;
  void *v10;
  id v11;
  NSObject *v12;
  void *v13;
  void *v14;
  void *v15;
  id v16;
  NSObject *v17;
  void *v18;
  id v19;
  uint8_t buf[4];
  void *v21;
  __int16 v22;
  id v23;
  __int16 v24;
  void *v25;
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  v2 = (void *)MEMORY[0x227676638]();
  v3 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543362;
    v21 = v5;
    _os_log_impl(&dword_2218F0000, v4, OS_LOG_TYPE_INFO, "%{public}@Going to reset HomeKeyMiscInfo Attributes", buf, 0xCu);

  }
  objc_autoreleasePoolPop(v2);
  +[MKFLocalHomeKeyMiscInfo fetchLocalHomeKeyMiscInfoWithHomeUUID:managedObjectContext:](MKFLocalHomeKeyMiscInfo, "fetchLocalHomeKeyMiscInfoWithHomeUUID:managedObjectContext:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = v6;
  if (v6)
  {
    objc_msgSend(v6, "setDismissedWalletKeyUWBUnlockOnboarding:", MEMORY[0x24BDBD1C0]);
    objc_msgSend(v7, "setClientWalletKeyUUID:", 0);
    v8 = *(void **)(a1 + 48);
    v19 = 0;
    objc_msgSend(v8, "save:", &v19);
    v9 = v19;
    v10 = (void *)MEMORY[0x227676638]();
    v11 = *(id *)(a1 + 32);
    HMFGetOSLogHandle();
    v12 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      HMFBooleanToString();
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543874;
      v21 = v13;
      v22 = 2112;
      v23 = v9;
      v24 = 2112;
      v25 = v14;
      _os_log_impl(&dword_2218F0000, v12, OS_LOG_TYPE_INFO, "%{public}@Resetting HomeKeyMiscInfo to local store with error :%@, Success : %@", buf, 0x20u);

    }
    objc_autoreleasePoolPop(v10);

  }
  else
  {
    v15 = (void *)MEMORY[0x227676638]();
    v16 = *(id *)(a1 + 32);
    HMFGetOSLogHandle();
    v17 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v21 = v18;
      _os_log_impl(&dword_2218F0000, v17, OS_LOG_TYPE_ERROR, "%{public}@Expected to find HomeKeyMiscInfo since cached home properties were not nil when attempting to reset HomeKeyMiscInfo", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v15);
  }

}

void __47__HMDHome_saveClientWalletKeyUUIDToLocalStore___block_invoke(uint64_t a1)
{
  void *v2;
  id v3;
  NSObject *v4;
  void *v5;
  void *v6;
  MKFLocalHomeKeyMiscInfo *v7;
  void *v8;
  id v9;
  void *v10;
  id v11;
  NSObject *v12;
  void *v13;
  void *v14;
  id v15;
  uint8_t buf[4];
  void *v17;
  __int16 v18;
  id v19;
  __int16 v20;
  void *v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  v2 = (void *)MEMORY[0x227676638]();
  v3 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = *(void **)(a1 + 40);
    *(_DWORD *)buf = 138543618;
    v17 = v5;
    v18 = 2112;
    v19 = v6;
    _os_log_impl(&dword_2218F0000, v4, OS_LOG_TYPE_INFO, "%{public}@Going to store client Wallet Key UUID : %@ to local store", buf, 0x16u);

  }
  objc_autoreleasePoolPop(v2);
  +[MKFLocalHomeKeyMiscInfo fetchLocalHomeKeyMiscInfoWithHomeUUID:managedObjectContext:](MKFLocalHomeKeyMiscInfo, "fetchLocalHomeKeyMiscInfoWithHomeUUID:managedObjectContext:", *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56));
  v7 = (MKFLocalHomeKeyMiscInfo *)objc_claimAutoreleasedReturnValue();
  if (!v7)
  {
    v7 = -[MKFLocalHomeKeyMiscInfo initWithContext:]([MKFLocalHomeKeyMiscInfo alloc], "initWithContext:", *(_QWORD *)(a1 + 56));
    -[MKFLocalHomeKeyMiscInfo setHomeUUID:](v7, "setHomeUUID:", *(_QWORD *)(a1 + 48));
  }
  -[MKFLocalHomeKeyMiscInfo setClientWalletKeyUUID:](v7, "setClientWalletKeyUUID:", *(_QWORD *)(a1 + 40));
  v8 = *(void **)(a1 + 56);
  v15 = 0;
  objc_msgSend(v8, "save:", &v15);
  v9 = v15;
  v10 = (void *)MEMORY[0x227676638]();
  v11 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v12 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    HMFBooleanToString();
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543874;
    v17 = v13;
    v18 = 2112;
    v19 = v9;
    v20 = 2112;
    v21 = v14;
    _os_log_impl(&dword_2218F0000, v12, OS_LOG_TYPE_INFO, "%{public}@Storing client Wallet Key UUID to local store with error :%@, Success : %@", buf, 0x20u);

  }
  objc_autoreleasePoolPop(v10);

}

void __49__HMDHome__setDismissedUWBOnboardingInLocalStore__block_invoke(uint64_t a1)
{
  void *v2;
  id v3;
  NSObject *v4;
  void *v5;
  MKFLocalHomeKeyMiscInfo *v6;
  void *v7;
  id v8;
  void *v9;
  id v10;
  NSObject *v11;
  void *v12;
  void *v13;
  id v14;
  uint8_t buf[4];
  void *v16;
  __int16 v17;
  id v18;
  __int16 v19;
  void *v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  v2 = (void *)MEMORY[0x227676638]();
  v3 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543362;
    v16 = v5;
    _os_log_impl(&dword_2218F0000, v4, OS_LOG_TYPE_INFO, "%{public}@Going to store dismissedWalletKeyUWBUnlockOnboarding to TRUE in local store", buf, 0xCu);

  }
  objc_autoreleasePoolPop(v2);
  +[MKFLocalHomeKeyMiscInfo fetchLocalHomeKeyMiscInfoWithHomeUUID:managedObjectContext:](MKFLocalHomeKeyMiscInfo, "fetchLocalHomeKeyMiscInfoWithHomeUUID:managedObjectContext:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
  v6 = (MKFLocalHomeKeyMiscInfo *)objc_claimAutoreleasedReturnValue();
  if (!v6)
  {
    v6 = -[MKFLocalHomeKeyMiscInfo initWithContext:]([MKFLocalHomeKeyMiscInfo alloc], "initWithContext:", *(_QWORD *)(a1 + 48));
    -[MKFLocalHomeKeyMiscInfo setHomeUUID:](v6, "setHomeUUID:", *(_QWORD *)(a1 + 40));
  }
  -[MKFLocalHomeKeyMiscInfo setDismissedWalletKeyUWBUnlockOnboarding:](v6, "setDismissedWalletKeyUWBUnlockOnboarding:", MEMORY[0x24BDBD1C8]);
  v7 = *(void **)(a1 + 48);
  v14 = 0;
  objc_msgSend(v7, "save:", &v14);
  v8 = v14;
  v9 = (void *)MEMORY[0x227676638]();
  v10 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v11 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    HMFBooleanToString();
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543874;
    v16 = v12;
    v17 = 2112;
    v18 = v8;
    v19 = 2112;
    v20 = v13;
    _os_log_impl(&dword_2218F0000, v11, OS_LOG_TYPE_INFO, "%{public}@Storing dismissedWalletKeyUWBUnlockOnboarding to local store with error :%@, Success : %@", buf, 0x20u);

  }
  objc_autoreleasePoolPop(v9);

}

void __44__HMDHome__handleUpdateAudioAnalysisAccess___block_invoke(uint64_t a1, uint64_t a2)
{
  void *v3;
  void *v4;
  uint64_t v5;
  _QWORD v6[2];

  v6[1] = *MEMORY[0x24BDAC8D0];
  if (a2)
  {
    objc_msgSend(*(id *)(a1 + 32), "respondWithError:", a2);
  }
  else
  {
    v5 = *MEMORY[0x24BDD5C88];
    objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedInteger:", *(_QWORD *)(a1 + 40));
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    v6[0] = v3;
    objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v6, &v5, 1);
    v4 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(*(id *)(a1 + 32), "respondWithPayload:", v4);
  }
}

void __35__HMDHome__handleUpdateUserAccess___block_invoke(uint64_t a1, uint64_t a2)
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  _QWORD v9[5];
  _QWORD v10[6];

  v10[5] = *MEMORY[0x24BDAC8D0];
  if (a2)
  {
    objc_msgSend(*(id *)(a1 + 32), "respondWithError:", a2);
  }
  else
  {
    v9[0] = CFSTR("kUserAdministratorInformationKey");
    objc_msgSend(MEMORY[0x24BDD16E0], "numberWithBool:", objc_msgSend(*(id *)(a1 + 40), "isAdministrator"));
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    v10[0] = v3;
    v9[1] = CFSTR("kUserRemoteAccessInformationKey");
    objc_msgSend(MEMORY[0x24BDD16E0], "numberWithBool:", objc_msgSend(*(id *)(a1 + 40), "isRemoteAccessAllowed"));
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    v10[1] = v4;
    v9[2] = CFSTR("kUserCamerasAccessLevelInformationKey");
    objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedInteger:", objc_msgSend(*(id *)(a1 + 40), "camerasAccessLevel"));
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v10[2] = v5;
    v9[3] = *MEMORY[0x24BDD63C0];
    objc_msgSend(MEMORY[0x24BDD16E0], "numberWithBool:", objc_msgSend(*(id *)(a1 + 40), "isAnnounceAccessAllowed"));
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v10[3] = v6;
    v9[4] = *MEMORY[0x24BDD5C88];
    objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedInteger:", objc_msgSend(*(id *)(a1 + 40), "audioAnalysisUserDropInAccessLevel"));
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v10[4] = v7;
    objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v10, v9, 5);
    v8 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(*(id *)(a1 + 32), "respondWithPayload:", v8);
  }
}

void __47__HMDHome__handleUpdateUserCamerasAccessLevel___block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  void *v4;
  const __CFString *v5;
  _QWORD v6[2];

  v6[1] = *MEMORY[0x24BDAC8D0];
  if (a2)
  {
    objc_msgSend(*(id *)(a1 + 32), "respondWithError:", a2);
  }
  else
  {
    v3 = *(_QWORD *)(a1 + 40);
    v5 = CFSTR("kUserCamerasAccessLevelInformationKey");
    v6[0] = v3;
    objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v6, &v5, 1);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 32), "respondWithPayload:", v4);

  }
}

void __51__HMDHome__addUsersWithInviteInformations_message___block_invoke(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend(WeakRetained, "__sendOutgoingInvitations:suppressHomeInviteNotification:", *(_QWORD *)(a1 + 32), *(unsigned __int8 *)(a1 + 48));

}

void __51__HMDHome__addUsersWithInviteInformations_message___block_invoke_2(id *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id WeakRetained;
  void *v8;
  id v9;
  NSObject *v10;
  void *v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  void *v18;
  void *v19;
  id v20;
  id v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint8_t v26[128];
  uint8_t buf[4];
  void *v28;
  __int16 v29;
  const __CFString *v30;
  __int16 v31;
  id v32;
  uint64_t v33;

  v33 = *MEMORY[0x24BDAC8D0];
  v5 = a2;
  v6 = a3;
  WeakRetained = objc_loadWeakRetained(a1 + 6);
  if (WeakRetained)
  {
    v20 = v6;
    v8 = (void *)MEMORY[0x227676638]();
    v9 = WeakRetained;
    HMFGetOSLogHandle();
    v10 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543874;
      v28 = v11;
      v29 = 2112;
      v30 = CFSTR("kAddHomeInvitesInternalRequestKey");
      v31 = 2112;
      v32 = v5;
      _os_log_impl(&dword_2218F0000, v10, OS_LOG_TYPE_INFO, "%{public}@Relayed message %@ with error %@", buf, 0x20u);

    }
    v21 = v5;

    objc_autoreleasePoolPop(v8);
    v24 = 0u;
    v25 = 0u;
    v22 = 0u;
    v23 = 0u;
    v12 = a1[4];
    v13 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v22, v26, 16);
    if (v13)
    {
      v14 = v13;
      v15 = *(_QWORD *)v23;
      do
      {
        v16 = 0;
        do
        {
          if (*(_QWORD *)v23 != v15)
            objc_enumerationMutation(v12);
          objc_msgSend(*(id *)(*((_QWORD *)&v22 + 1) + 8 * v16), "user");
          v17 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v17, "accountHandle");
          v18 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v9, "_outgoingInvitationForUserWithHandle:", v18);
          v19 = (void *)objc_claimAutoreleasedReturnValue();

          objc_msgSend(v19, "notifyStateChangedForMessage:", a1[5]);
          ++v16;
        }
        while (v14 != v16);
        v14 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v22, v26, 16);
      }
      while (v14);
    }

    v5 = v21;
    objc_msgSend(a1[5], "respondWithPayload:error:", 0, v21);
    v6 = v20;
  }

}

uint64_t __51__HMDHome__addUsersWithInviteInformations_message___block_invoke_1268(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

- (void)__sendOutgoingInvitation:(void *)a3 shareURL:(void *)a4 shareToken:(uint64_t)a5 suppressHomeInviteNotification:
{
  id v9;
  id v10;
  void *v11;
  id v12;

  if (a1)
  {
    v9 = a4;
    v10 = a3;
    v12 = a2;
    objc_msgSend(v12, "user");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(a1, "_cleanRemovedUsers:", v11);

    objc_msgSend(a1, "_sendInvitation:message:shareURL:shareToken:suppressHomeInviteNotification:", v12, 0, v10, v9, a5);
  }
}

void __36__HMDHome__fixupUsersWithoutMergeID__block_invoke(uint64_t a1)
{
  void *v1;
  uint64_t v2;
  __int128 v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  id v17;
  NSObject *v18;
  void *v19;
  void *v20;
  uint64_t v21;
  void *v22;
  id v23;
  NSObject *v24;
  void *v25;
  void *v26;
  void *v27;
  char v28;
  id v29;
  void *v30;
  id v31;
  NSObject *v32;
  void *v33;
  __int128 v34;
  uint64_t v35;
  id v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  uint8_t buf[4];
  void *v43;
  __int16 v44;
  id v45;
  __int16 v46;
  void *v47;
  _BYTE v48[128];
  uint64_t v49;

  v49 = *MEMORY[0x24BDAC8D0];
  v38 = 0u;
  v39 = 0u;
  v40 = 0u;
  v41 = 0u;
  objc_msgSend(*(id *)(a1 + 32), "users");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v2 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v38, v48, 16);
  if (v2)
  {
    v4 = v2;
    v5 = 0;
    v6 = *(_QWORD *)v39;
    *(_QWORD *)&v3 = 138543874;
    v34 = v3;
    do
    {
      for (i = 0; i != v4; ++i)
      {
        if (*(_QWORD *)v39 != v6)
          objc_enumerationMutation(v1);
        v8 = *(void **)(*((_QWORD *)&v38 + 1) + 8 * i);
        objc_msgSend(v8, "mergeIdentifier", v34);
        v9 = (void *)objc_claimAutoreleasedReturnValue();

        if (!v9)
        {
          objc_msgSend(v8, "account");
          v10 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v10, "senderCorrelationIdentifier");
          v11 = (void *)objc_claimAutoreleasedReturnValue();

          if (v11)
          {
            objc_msgSend(v8, "uuid");
            v12 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(*(id *)(a1 + 40), "managedObjectContext");
            v13 = (void *)objc_claimAutoreleasedReturnValue();
            +[_MKFHome findHomeMemberWithUUID:context:](_MKFHome, "findHomeMemberWithUUID:context:", v12, v13);
            v14 = (void *)objc_claimAutoreleasedReturnValue();

            objc_msgSend(v10, "senderCorrelationIdentifier");
            v15 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v14, "setIdsMergeIdentifier:", v15);

            ++v5;
          }
          else
          {
            v16 = (void *)MEMORY[0x227676638]();
            v17 = *(id *)(a1 + 32);
            HMFGetOSLogHandle();
            v18 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
            {
              HMFGetLogIdentifier();
              v35 = v5;
              v19 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v8, "shortDescription");
              v20 = (void *)objc_claimAutoreleasedReturnValue();
              *(_DWORD *)buf = v34;
              v43 = v19;
              v44 = 2112;
              v45 = v20;
              v46 = 2112;
              v47 = v10;
              _os_log_impl(&dword_2218F0000, v18, OS_LOG_TYPE_ERROR, "%{public}@Unable to fix up mergeID for user %@ with account %@", buf, 0x20u);

              v5 = v35;
            }

            objc_autoreleasePoolPop(v16);
          }

        }
      }
      v4 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v38, v48, 16);
    }
    while (v4);
  }
  else
  {
    v5 = 0;
  }
  v21 = v5;

  v22 = (void *)MEMORY[0x227676638]();
  v23 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v24 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v24, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD16E0], "numberWithInteger:", v21);
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543618;
    v43 = v25;
    v44 = 2112;
    v45 = v26;
    _os_log_impl(&dword_2218F0000, v24, OS_LOG_TYPE_INFO, "%{public}@Fixing up mergeIdentifier for %@ users", buf, 0x16u);

  }
  objc_autoreleasePoolPop(v22);
  if (v21 >= 1)
  {
    v27 = *(void **)(a1 + 40);
    v37 = 0;
    v28 = objc_msgSend(v27, "save:", &v37);
    v29 = v37;
    if ((v28 & 1) == 0)
    {
      v30 = (void *)MEMORY[0x227676638]();
      v31 = *(id *)(a1 + 32);
      HMFGetOSLogHandle();
      v32 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v33 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        v43 = v33;
        v44 = 2112;
        v45 = v29;
        _os_log_impl(&dword_2218F0000, v32, OS_LOG_TYPE_ERROR, "%{public}@Failed to save fixup mergeID for users: %@", buf, 0x16u);

      }
      objc_autoreleasePoolPop(v30);
    }

  }
}

uint64_t __31__HMDHome__auditAccessForUsers__block_invoke(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  NSObject *v6;
  void *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  _QWORD v17[6];
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint8_t v22[128];
  uint8_t buf[4];
  void *v24;
  __int16 v25;
  id v26;
  uint64_t v27;

  v27 = *MEMORY[0x24BDAC8D0];
  v3 = a2;
  v4 = (void *)MEMORY[0x227676638]();
  v5 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v6 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543618;
    v24 = v7;
    v25 = 2112;
    v26 = v3;
    _os_log_impl(&dword_2218F0000, v6, OS_LOG_TYPE_INFO, "%{public}@Removing users that are no longer a participant in the share: %@", buf, 0x16u);

  }
  objc_autoreleasePoolPop(v4);
  v20 = 0u;
  v21 = 0u;
  v18 = 0u;
  v19 = 0u;
  v8 = v3;
  v9 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v18, v22, 16);
  if (v9)
  {
    v10 = v9;
    v11 = *(_QWORD *)v19;
    v12 = MEMORY[0x24BDAC760];
    do
    {
      v13 = 0;
      do
      {
        if (*(_QWORD *)v19 != v11)
          objc_enumerationMutation(v8);
        v14 = *(_QWORD *)(*((_QWORD *)&v18 + 1) + 8 * v13);
        objc_msgSend(*(id *)(a1 + 32), "workQueue");
        v15 = objc_claimAutoreleasedReturnValue();
        v17[0] = v12;
        v17[1] = 3221225472;
        v17[2] = __31__HMDHome__auditAccessForUsers__block_invoke_1263;
        v17[3] = &unk_24E79C268;
        v17[4] = *(_QWORD *)(a1 + 32);
        v17[5] = v14;
        dispatch_async(v15, v17);

        ++v13;
      }
      while (v10 != v13);
      v10 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v18, v22, 16);
    }
    while (v10);
  }

  return 1;
}

uint64_t __31__HMDHome__auditAccessForUsers__block_invoke_1263(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "removeUser:", *(_QWORD *)(a1 + 40));
}

uint64_t __30__HMDHome_auditAccessForUsers__block_invoke(uint64_t a1)
{
  void *v2;
  id v3;
  NSObject *v4;
  void *v5;
  int v7;
  void *v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v2 = (void *)MEMORY[0x227676638]();
  v3 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v7 = 138543362;
    v8 = v5;
    _os_log_impl(&dword_2218F0000, v4, OS_LOG_TYPE_INFO, "%{public}@Auditing shared users for home", (uint8_t *)&v7, 0xCu);

  }
  objc_autoreleasePoolPop(v2);
  return objc_msgSend(*(id *)(a1 + 32), "_auditAccessForUsers");
}

void __42__HMDHome_resendOutgoingInvitationToUser___block_invoke(uint64_t a1)
{
  char v2;
  void *v3;
  id v4;
  NSObject *v5;
  _BOOL4 v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  uint64_t v14;
  uint8_t buf[4];
  void *v16;
  __int16 v17;
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v2 = objc_msgSend(*(id *)(a1 + 32), "isCurrentDeviceConfirmedPrimaryResident");
  v3 = (void *)MEMORY[0x227676638]();
  v4 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v5 = objc_claimAutoreleasedReturnValue();
  v6 = os_log_type_enabled(v5, OS_LOG_TYPE_INFO);
  if ((v2 & 1) != 0)
  {
    if (v6)
    {
      HMFGetLogIdentifier();
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      v8 = *(_QWORD *)(a1 + 40);
      *(_DWORD *)buf = 138543618;
      v16 = v7;
      v17 = 2112;
      v18 = v8;
      _os_log_impl(&dword_2218F0000, v5, OS_LOG_TYPE_INFO, "%{public}@Resending outgoing invitation (if any) to %@ as prompted by shared user's HH2 upgrade", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v3);
    objc_msgSend(*(id *)(a1 + 32), "outgoingInvitationToResendForUser:", *(_QWORD *)(a1 + 40));
    v9 = objc_claimAutoreleasedReturnValue();
    v10 = (void *)v9;
    if (v9)
    {
      v11 = *(void **)(a1 + 32);
      v14 = v9;
      objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", &v14, 1);
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v11, "_grantAccessAndSendOutgoingInvitation:suppressHomeInviteNotification:", v12, 1);

    }
  }
  else
  {
    if (v6)
    {
      HMFGetLogIdentifier();
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v16 = v13;
      _os_log_impl(&dword_2218F0000, v5, OS_LOG_TYPE_INFO, "%{public}@Not resending outgoing invitations as this is not the primary resident.", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v3);
  }
}

uint64_t __80__HMDHome__grantAccessAndSendOutgoingInvitation_suppressHomeInviteNotification___block_invoke(uint64_t a1, void *a2)
{
  id *v3;
  id WeakRetained;
  void *v5;
  void *v6;
  uint64_t v7;
  void *v8;
  void *v9;
  id v10;
  NSObject *v11;
  id v12;
  void *v13;
  void *v14;
  void *v15;
  uint64_t v16;
  void *v17;
  void *v18;
  _BOOL4 v19;
  void *v20;
  id v21;
  NSObject *v22;
  id v23;
  void *v24;
  void *v25;
  id v26;
  NSObject *v27;
  id v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  id v35;
  void *v36;
  id v38;
  _QWORD v39[5];
  id v40;
  _QWORD v41[5];
  id v42;
  char v43;
  _QWORD v44[7];
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t (*v48)(uint64_t, uint64_t);
  void (*v49)(uint64_t);
  id v50;
  uint8_t buf[4];
  id v52;
  __int16 v53;
  void *v54;
  uint64_t v55;

  v55 = *MEMORY[0x24BDAC8D0];
  v38 = a2;
  v3 = (id *)(a1 + 40);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v45 = 0;
  v46 = &v45;
  v47 = 0x3032000000;
  v48 = __Block_byref_object_copy__14094;
  v49 = __Block_byref_object_dispose__14095;
  v50 = 0;
  objc_msgSend(WeakRetained, "backingStore");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "context");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = MEMORY[0x24BDAC760];
  v44[0] = MEMORY[0x24BDAC760];
  v44[1] = 3221225472;
  v44[2] = __80__HMDHome__grantAccessAndSendOutgoingInvitation_suppressHomeInviteNotification___block_invoke_2;
  v44[3] = &unk_24E79C0A8;
  v44[4] = *(_QWORD *)(a1 + 32);
  v44[5] = WeakRetained;
  v44[6] = &v45;
  objc_msgSend(v6, "unsafeSynchronousBlock:", v44);

  objc_msgSend((id)v46[5], "shareURL");
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  if (v8)
  {
    v9 = (void *)MEMORY[0x227676638]();
    v10 = WeakRetained;
    HMFGetOSLogHandle();
    v11 = (id)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v12 = (id)objc_claimAutoreleasedReturnValue();
      objc_msgSend(*(id *)(a1 + 32), "user");
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v52 = v12;
      v53 = 2112;
      v54 = v13;
      _os_log_impl(&dword_2218F0000, v11, OS_LOG_TYPE_INFO, "%{public}@Resending invite, user already granted access %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v9);
    v14 = *(void **)(a1 + 32);
    objc_msgSend((id)v46[5], "shareURL");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHome __sendOutgoingInvitation:shareURL:shareToken:suppressHomeInviteNotification:](v10, v14, v15, (void *)v46[5], *(unsigned __int8 *)(a1 + 48));
    v16 = 1;
  }
  else
  {
    v17 = (void *)v46[5];
    if (v17)
    {
      objc_msgSend(v17, "shareURL");
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      v19 = v18 == 0;

      if (v19)
      {
        v20 = (void *)MEMORY[0x227676638]();
        v21 = WeakRetained;
        HMFGetOSLogHandle();
        v22 = (id)objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
        {
          HMFGetLogIdentifier();
          v23 = (id)objc_claimAutoreleasedReturnValue();
          objc_msgSend(*(id *)(a1 + 32), "user");
          v24 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543618;
          v52 = v23;
          v53 = 2112;
          v54 = v24;
          _os_log_impl(&dword_2218F0000, v22, OS_LOG_TYPE_ERROR, "%{public}@nil shareURL on share token, will attempt to re-grant access for user: %@", buf, 0x16u);

        }
        objc_autoreleasePoolPop(v20);
      }
    }
    v25 = (void *)MEMORY[0x227676638]();
    v26 = WeakRetained;
    HMFGetOSLogHandle();
    v27 = (id)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v27, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v28 = (id)objc_claimAutoreleasedReturnValue();
      objc_msgSend(*(id *)(a1 + 32), "user");
      v29 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v52 = v28;
      v53 = 2112;
      v54 = v29;
      _os_log_impl(&dword_2218F0000, v27, OS_LOG_TYPE_INFO, "%{public}@Granting share access for user %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v25);
    objc_msgSend(v26, "homeManager");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v15, "homeOwnerCloudShareManager");
    v30 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 32), "user");
    v31 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v30, "grantAccessForUser:home:", v31, v26);
    v32 = (void *)objc_claimAutoreleasedReturnValue();
    v41[0] = v7;
    v41[1] = 3221225472;
    v41[2] = __80__HMDHome__grantAccessAndSendOutgoingInvitation_suppressHomeInviteNotification___block_invoke_1257;
    v41[3] = &unk_24E7767E0;
    objc_copyWeak(&v42, (id *)(a1 + 40));
    v34 = *(_QWORD *)(a1 + 32);
    v33 = a1 + 32;
    v41[4] = v34;
    v43 = *(_BYTE *)(v33 + 16);
    v39[0] = v7;
    v39[1] = 3221225472;
    v39[2] = __80__HMDHome__grantAccessAndSendOutgoingInvitation_suppressHomeInviteNotification___block_invoke_1260;
    v39[3] = &unk_24E776808;
    objc_copyWeak(&v40, v3);
    v39[4] = *(_QWORD *)v33;
    objc_msgSend(v32, "then:orRecover:", v41, v39);
    v35 = (id)objc_claimAutoreleasedReturnValue();
    if (!v35)
    {
      _HMFPreconditionFailure();
      __break(1u);
    }
    v36 = v35;

    objc_destroyWeak(&v40);
    objc_destroyWeak(&v42);

    v16 = 3;
  }

  _Block_object_dispose(&v45, 8);
  return v16;
}

uint64_t __80__HMDHome__grantAccessAndSendOutgoingInvitation_suppressHomeInviteNotification___block_invoke_1261(uint64_t a1, void *a2)
{
  id v3;
  id *v4;
  id WeakRetained;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t i;
  void *v11;
  void *v12;
  id v13;
  NSObject *v14;
  void *v15;
  dispatch_time_t v16;
  NSObject *v17;
  _QWORD block[4];
  id v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint8_t buf[4];
  void *v26;
  _BYTE v27[128];
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  v3 = a2;
  v4 = (id *)(a1 + 40);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    v23 = 0u;
    v24 = 0u;
    v21 = 0u;
    v22 = 0u;
    v6 = *(id *)(a1 + 32);
    v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v21, v27, 16);
    if (v7)
    {
      v8 = v7;
      v9 = *(_QWORD *)v22;
      while (2)
      {
        for (i = 0; i != v8; ++i)
        {
          if (*(_QWORD *)v22 != v9)
            objc_enumerationMutation(v6);
          objc_msgSend(*(id *)(*((_QWORD *)&v21 + 1) + 8 * i), "dateSent");
          v11 = (void *)objc_claimAutoreleasedReturnValue();

          if (!v11)
          {
            v12 = (void *)MEMORY[0x227676638]();
            v13 = WeakRetained;
            HMFGetOSLogHandle();
            v14 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
            {
              HMFGetLogIdentifier();
              v15 = (void *)objc_claimAutoreleasedReturnValue();
              *(_DWORD *)buf = 138543362;
              v26 = v15;
              _os_log_impl(&dword_2218F0000, v14, OS_LOG_TYPE_INFO, "%{public}@At least one invite appears to have not been sent, scheduling resend", buf, 0xCu);

            }
            objc_autoreleasePoolPop(v12);
            v16 = dispatch_time(0, 300000000000);
            objc_msgSend(v13, "workQueue");
            v17 = objc_claimAutoreleasedReturnValue();
            block[0] = MEMORY[0x24BDAC760];
            block[1] = 3221225472;
            block[2] = __80__HMDHome__grantAccessAndSendOutgoingInvitation_suppressHomeInviteNotification___block_invoke_1262;
            block[3] = &unk_24E797318;
            objc_copyWeak(&v20, v4);
            dispatch_after(v16, v17, block);

            objc_destroyWeak(&v20);
            goto LABEL_14;
          }
        }
        v8 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v21, v27, 16);
        if (v8)
          continue;
        break;
      }
    }
LABEL_14:

  }
  return 1;
}

void __80__HMDHome__grantAccessAndSendOutgoingInvitation_suppressHomeInviteNotification___block_invoke_1262(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "_processUnsentOutgoingInvitations");

}

void __80__HMDHome__grantAccessAndSendOutgoingInvitation_suppressHomeInviteNotification___block_invoke_2(uint64_t a1)
{
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;
  id v8;
  NSObject *v9;
  void *v10;
  void *v11;
  int v12;
  void *v13;
  __int16 v14;
  void *v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  objc_msgSend(*(id *)(a1 + 32), "identifier");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  +[HMCContext findOutgoingInvitationWithModelID:](HMCContext, "findOutgoingInvitationWithModelID:", v2);
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  if (v3)
  {
    objc_msgSend(v3, "shareToken");
    v4 = objc_claimAutoreleasedReturnValue();
    v5 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
    v6 = *(void **)(v5 + 40);
    *(_QWORD *)(v5 + 40) = v4;

  }
  else
  {
    v7 = (void *)MEMORY[0x227676638]();
    v8 = *(id *)(a1 + 40);
    HMFGetOSLogHandle();
    v9 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(*(id *)(a1 + 32), "identifier");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      v12 = 138543618;
      v13 = v10;
      v14 = 2112;
      v15 = v11;
      _os_log_impl(&dword_2218F0000, v9, OS_LOG_TYPE_ERROR, "%{public}@Unable to find outgoing invitation with UUID %@", (uint8_t *)&v12, 0x16u);

    }
    objc_autoreleasePoolPop(v7);
  }

}

uint64_t __80__HMDHome__grantAccessAndSendOutgoingInvitation_suppressHomeInviteNotification___block_invoke_1257(uint64_t a1, void *a2)
{
  id v3;
  id WeakRetained;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  char v10;
  void *v11;
  id v12;
  NSObject *v13;
  NSObject *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  id v21;
  NSObject *v22;
  void *v23;
  void *v24;
  void *v25;
  _QWORD v27[6];
  id v28;
  uint8_t buf[4];
  void *v30;
  __int16 v31;
  void *v32;
  __int16 v33;
  void *v34;
  uint64_t v35;

  v35 = *MEMORY[0x24BDAC8D0];
  v3 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    objc_msgSend(v3, "token");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = v5;
    if (v5 && (objc_msgSend(v5, "shareURL"), v7 = (void *)objc_claimAutoreleasedReturnValue(), v7, v7))
    {
      objc_msgSend(WeakRetained, "backingStore");
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v8, "context");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      v27[0] = MEMORY[0x24BDAC760];
      v27[1] = 3221225472;
      v27[2] = __80__HMDHome__grantAccessAndSendOutgoingInvitation_suppressHomeInviteNotification___block_invoke_1258;
      v27[3] = &unk_24E79BBD0;
      v27[4] = *(_QWORD *)(a1 + 32);
      v27[5] = WeakRetained;
      v28 = v6;
      objc_msgSend(v9, "unsafeSynchronousBlock:", v27);

      v10 = objc_msgSend(WeakRetained, "isCurrentDevicePrimaryResident");
      v11 = (void *)MEMORY[0x227676638]();
      v12 = WeakRetained;
      HMFGetOSLogHandle();
      v13 = objc_claimAutoreleasedReturnValue();
      v14 = v13;
      if ((v10 & 1) != 0)
      {
        if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
        {
          HMFGetLogIdentifier();
          v15 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(*(id *)(a1 + 32), "user");
          v16 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543618;
          v30 = v15;
          v31 = 2112;
          v32 = v16;
          _os_log_impl(&dword_2218F0000, v14, OS_LOG_TYPE_INFO, "%{public}@Sending outgoing invite for user %@", buf, 0x16u);

        }
        objc_autoreleasePoolPop(v11);
        v17 = *(void **)(a1 + 32);
        objc_msgSend(v3, "url");
        v18 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v3, "token");
        v19 = (void *)objc_claimAutoreleasedReturnValue();
        -[HMDHome __sendOutgoingInvitation:shareURL:shareToken:suppressHomeInviteNotification:](v12, v17, v18, v19, *(unsigned __int8 *)(a1 + 48));

      }
      else
      {
        if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
        {
          HMFGetLogIdentifier();
          v25 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543362;
          v30 = v25;
          _os_log_impl(&dword_2218F0000, v14, OS_LOG_TYPE_ERROR, "%{public}@Current device is no longer primary after granting share access, do not send outgoing invitation from here.", buf, 0xCu);

        }
        objc_autoreleasePoolPop(v11);
      }

    }
    else
    {
      v20 = (void *)MEMORY[0x227676638]();
      v21 = WeakRetained;
      HMFGetOSLogHandle();
      v22 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v23 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v6, "shareURL");
        v24 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543874;
        v30 = v23;
        v31 = 2112;
        v32 = v6;
        v33 = 2112;
        v34 = v24;
        _os_log_impl(&dword_2218F0000, v22, OS_LOG_TYPE_ERROR, "%{public}@Nil token (%@) and/or shareURL (%@) on share invitation, not saving token, not sending outgoing invitation", buf, 0x20u);

      }
      objc_autoreleasePoolPop(v20);
    }

  }
  return 1;
}

uint64_t __80__HMDHome__grantAccessAndSendOutgoingInvitation_suppressHomeInviteNotification___block_invoke_1260(uint64_t a1, void *a2)
{
  id v3;
  id WeakRetained;
  void *v5;
  id v6;
  NSObject *v7;
  void *v8;
  void *v9;
  int v11;
  void *v12;
  __int16 v13;
  void *v14;
  __int16 v15;
  id v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  v3 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v5 = (void *)MEMORY[0x227676638](objc_msgSend(*(id *)(a1 + 32), "setDateSent:", 0));
  v6 = WeakRetained;
  HMFGetOSLogHandle();
  v7 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
  {
    HMFGetLogIdentifier();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 32), "user");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v11 = 138543874;
    v12 = v8;
    v13 = 2112;
    v14 = v9;
    v15 = 2112;
    v16 = v3;
    _os_log_impl(&dword_2218F0000, v7, OS_LOG_TYPE_ERROR, "%{public}@Failed to add user %@ to share with error %@", (uint8_t *)&v11, 0x20u);

  }
  objc_autoreleasePoolPop(v5);

  return 1;
}

void __80__HMDHome__grantAccessAndSendOutgoingInvitation_suppressHomeInviteNotification___block_invoke_1258(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  id v6;
  NSObject *v7;
  void *v8;
  void *v9;
  int v10;
  void *v11;
  __int16 v12;
  void *v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  objc_msgSend(*(id *)(a1 + 32), "identifier");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  +[HMCContext findOutgoingInvitationWithModelID:](HMCContext, "findOutgoingInvitationWithModelID:", v2);
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  if (v3)
  {
    objc_msgSend(v3, "setShareToken:", *(_QWORD *)(a1 + 48));
    +[HMCContext currentContext](HMCContext, "currentContext");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "save");

  }
  else
  {
    v5 = (void *)MEMORY[0x227676638]();
    v6 = *(id *)(a1 + 40);
    HMFGetOSLogHandle();
    v7 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(*(id *)(a1 + 32), "identifier");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      v10 = 138543618;
      v11 = v8;
      v12 = 2112;
      v13 = v9;
      _os_log_impl(&dword_2218F0000, v7, OS_LOG_TYPE_ERROR, "%{public}@After granting share, unable to find outgoing invitation with UUID %@", (uint8_t *)&v10, 0x16u);

    }
    objc_autoreleasePoolPop(v5);
  }

}

void __57__HMDHome__handleAddOutgoingHomeInvitationModel_message___block_invoke(id *a1)
{
  id WeakRetained;
  id v3;
  void *v4;
  id v5;
  NSObject *v6;
  void *v7;
  void *v8;
  void *v9;
  int v10;
  void *v11;
  __int16 v12;
  void *v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  WeakRetained = objc_loadWeakRetained(a1 + 5);
  v3 = objc_loadWeakRetained(a1 + 6);
  if (WeakRetained)
  {
    v4 = (void *)MEMORY[0x227676638]();
    v5 = WeakRetained;
    HMFGetOSLogHandle();
    v6 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v3, "identifier");
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      v10 = 138543618;
      v11 = v7;
      v12 = 2112;
      v13 = v8;
      _os_log_impl(&dword_2218F0000, v6, OS_LOG_TYPE_INFO, "%{public}@Expiring invitation %@", (uint8_t *)&v10, 0x16u);

    }
    objc_autoreleasePoolPop(v4);
    objc_msgSend(v5, "removeOutgoingInvitation:", v3);
    objc_msgSend(v5, "__handleCancelledOutgoingInvitation:", v3);
    objc_msgSend(v3, "updateInvitationState:", objc_msgSend(v3, "invitationState"));
    objc_msgSend(a1[4], "name");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "saveWithReason:postSyncNotification:", v9, 0);

  }
}

BOOL __34__HMDHome__handleUserInvitations___block_invoke(uint64_t a1, uint64_t a2)
{
  void *v2;
  _BOOL8 v3;

  objc_msgSend(*(id *)(a1 + 32), "accessoryWithUUID:", a2);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = v2 != 0;

  return v3;
}

uint64_t __38__HMDHome_usersIncludingPendingUsers___block_invoke(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "isPending") ^ 1;
}

uint64_t __23__HMDHome_pendingUsers__block_invoke(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "isPending");
}

BOOL __27__HMDHome_restrictedGuests__block_invoke(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "privilege") == 5;
}

id __22__HMDHome_sharedUsers__block_invoke(uint64_t a1, void *a2)
{
  id v2;
  id v3;

  v2 = a2;
  if (objc_msgSend(v2, "privilege") == 3)
    v3 = 0;
  else
    v3 = v2;

  return v3;
}

void __47__HMDHome__handleExecuteConfirmationOfTrigger___block_invoke(uint64_t a1, void *a2)
{
  uint64_t v3;
  void *v4;
  id v5;

  v5 = a2;
  objc_msgSend(*(id *)(a1 + 32), "responseHandler");
  v3 = objc_claimAutoreleasedReturnValue();
  v4 = (void *)v3;
  if (v3)
    (*(void (**)(uint64_t, id, _QWORD))(v3 + 16))(v3, v5, 0);

}

void __47__HMDHome__handleExecuteConfirmationOfTrigger___block_invoke_1229(uint64_t a1, void *a2)
{
  uint64_t v3;
  void *v4;
  id v5;

  v5 = a2;
  if (v5 && isiOSDevice())
    +[HMDBulletinUIManager presentExecutionErrorDialogForTrigger:partialSuccess:](HMDBulletinUIManager, "presentExecutionErrorDialogForTrigger:partialSuccess:", *(_QWORD *)(a1 + 32), objc_msgSend(v5, "code") == 64);
  objc_msgSend(*(id *)(a1 + 40), "responseHandler");
  v3 = objc_claimAutoreleasedReturnValue();
  v4 = (void *)v3;
  if (v3)
    (*(void (**)(uint64_t, id, _QWORD))(v3 + 16))(v3, v5, 0);

}

void __25__HMDHome_removeTrigger___block_invoke(uint64_t a1)
{
  void *v2;
  id v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  const __CFString *v10;
  _QWORD v11[2];

  v11[1] = *MEMORY[0x24BDAC8D0];
  v2 = (void *)MEMORY[0x24BE3F1B0];
  v3 = objc_alloc(MEMORY[0x24BE3F1B8]);
  objc_msgSend(*(id *)(a1 + 32), "uuid");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = (void *)objc_msgSend(v3, "initWithTarget:", v4);
  v10 = CFSTR("kTriggerUUID");
  objc_msgSend(*(id *)(a1 + 40), "uuid");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "UUIDString");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v11[0] = v7;
  objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v11, &v10, 1);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "messageWithName:destination:payload:", CFSTR("kRemoveTriggerRequestKey"), v5, v8);
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(*(id *)(a1 + 32), "_handleRemoveTrigger:", v9);
}

void __34__HMDHome__handleAddTimerTrigger___block_invoke(id *a1, uint64_t a2)
{
  id v3;
  void *v4;
  id v5;
  id v6;

  if (a2)
  {
    objc_msgSend(a1[4], "respondWithError:", a2);
  }
  else
  {
    v3 = a1[5];
    objc_msgSend(a1[6], "createPayload");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "addEntriesFromDictionary:", v4);

    v5 = a1[4];
    v6 = (id)objc_msgSend(a1[5], "copy");
    objc_msgSend(v5, "respondWithPayload:", v6);

  }
}

void __38__HMDHome__relayAddTriggerToResident___block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id WeakRetained;
  void *v8;
  id v9;
  NSObject *v10;
  void *v11;
  NSObject *v12;
  _QWORD v13[5];
  id v14;
  uint8_t buf[4];
  void *v16;
  __int16 v17;
  const __CFString *v18;
  __int16 v19;
  id v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  v5 = a2;
  v6 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    v8 = (void *)MEMORY[0x227676638]();
    v9 = WeakRetained;
    HMFGetOSLogHandle();
    v10 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543874;
      v16 = v11;
      v17 = 2112;
      v18 = CFSTR("kAddTriggersInternalRequestKey");
      v19 = 2112;
      v20 = v5;
      _os_log_impl(&dword_2218F0000, v10, OS_LOG_TYPE_INFO, "%{public}@Relayed message %@ with error %@", buf, 0x20u);

    }
    objc_autoreleasePoolPop(v8);
    if (v5)
    {
      objc_msgSend(v9, "workQueue");
      v12 = objc_claimAutoreleasedReturnValue();
      v13[0] = MEMORY[0x24BDAC760];
      v13[1] = 3221225472;
      v13[2] = __38__HMDHome__relayAddTriggerToResident___block_invoke_1220;
      v13[3] = &unk_24E79C268;
      v13[4] = v9;
      v14 = *(id *)(a1 + 32);
      dispatch_async(v12, v13);

    }
  }

}

void __38__HMDHome__relayAddTriggerToResident___block_invoke_1220(uint64_t a1)
{
  void *v2;
  id v3;
  NSObject *v4;
  void *v5;
  uint64_t v6;
  HMDTriggerModel *v7;
  void *v8;
  void *v9;
  HMDTriggerModel *v10;
  void *v11;
  void *v12;
  void *v13;
  int v14;
  void *v15;
  __int16 v16;
  uint64_t v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  v2 = (void *)MEMORY[0x227676638]();
  v3 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = *(_QWORD *)(a1 + 40);
    v14 = 138543618;
    v15 = v5;
    v16 = 2112;
    v17 = v6;
    _os_log_impl(&dword_2218F0000, v4, OS_LOG_TYPE_INFO, "%{public}@Removing trigger that was not added to resident: %@", (uint8_t *)&v14, 0x16u);

  }
  objc_autoreleasePoolPop(v2);
  v7 = [HMDTriggerModel alloc];
  objc_msgSend(*(id *)(a1 + 40), "uuid");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 32), "uuid");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = -[HMDBackingStoreModelObject initWithObjectChangeType:uuid:parentUUID:](v7, "initWithObjectChangeType:uuid:parentUUID:", 3, v8, v9);

  objc_msgSend(*(id *)(a1 + 32), "backingStore");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  +[HMDBackingStoreTransactionOptions defaultXPCOptions](HMDBackingStoreTransactionOptions, "defaultXPCOptions");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "transaction:options:", CFSTR("relayAddTrigger"), v12);
  v13 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v13, "add:withMessage:", v10, 0);
  objc_msgSend(v13, "run");

}

- (HMDActionSet)_createActionSetWithUUID:(void *)a3 name:(void *)a4 type:(void *)a5 fromDictionary:(void *)a6 transaction:(_QWORD *)a7 response:(_QWORD *)a8 error:
{
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  HMDActionSet *v18;
  void *v19;
  void *v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  id v27;
  id v28;
  uint64_t v29;
  void *v30;
  void *v31;
  void *v32;
  HMDApplicationData *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  HMDActionSet *v38;
  void *v39;
  id v40;
  NSObject *v41;
  void *v42;
  void *v43;
  id v44;
  NSObject *v45;
  void *v46;
  void *v47;
  id v48;
  NSObject *v49;
  void *v50;
  id v53;
  id v55;
  void *v56;
  id obj;
  void *v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  uint8_t buf[4];
  void *v64;
  __int16 v65;
  id v66;
  _BYTE v67[128];
  uint64_t v68;

  v68 = *MEMORY[0x24BDAC8D0];
  v13 = a2;
  v14 = a3;
  v15 = a4;
  v16 = a5;
  v17 = a6;
  if (a1)
  {
    v55 = v15;
    v18 = -[HMDActionSet initWithName:uuid:type:home:queue:]([HMDActionSet alloc], "initWithName:uuid:type:home:queue:", v14, v13, v15, a1, 0);
    -[HMDActionSet modelObjectWithChangeType:](v18, "modelObjectWithChangeType:", 1);
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    v58 = v17;
    objc_msgSend(v17, "add:", v19);

    v56 = v16;
    objc_msgSend(v16, "hmf_arrayForKey:", CFSTR("kActionSetActions"));
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    v21 = (void *)objc_msgSend(objc_alloc(MEMORY[0x24BDBCEB8]), "initWithCapacity:", objc_msgSend(v20, "count"));
    v59 = 0u;
    v60 = 0u;
    v61 = 0u;
    v62 = 0u;
    obj = v20;
    v22 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v59, v67, 16);
    if (v22)
    {
      v23 = v22;
      v24 = *(_QWORD *)v60;
      v53 = v13;
LABEL_4:
      v25 = 0;
      while (1)
      {
        if (*(_QWORD *)v60 != v24)
          objc_enumerationMutation(obj);
        v26 = *(id *)(*((_QWORD *)&v59 + 1) + 8 * v25);
        objc_opt_class();
        v27 = (objc_opt_isKindOfClass() & 1) != 0 ? v26 : 0;
        v28 = v27;

        if (!v28)
          break;
        objc_msgSend(a1, "actionWithDictionaryRepresentation:", v28);
        v29 = objc_claimAutoreleasedReturnValue();
        if (!v29)
        {
          v43 = (void *)MEMORY[0x227676638]();
          v44 = a1;
          HMFGetOSLogHandle();
          v45 = objc_claimAutoreleasedReturnValue();
          v13 = v53;
          v15 = v55;
          if (os_log_type_enabled(v45, OS_LOG_TYPE_ERROR))
          {
            HMFGetLogIdentifier();
            v46 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 138543618;
            v64 = v46;
            v65 = 2112;
            v66 = v28;
            _os_log_impl(&dword_2218F0000, v45, OS_LOG_TYPE_ERROR, "%{public}@Failed to deserialize action: %@", buf, 0x16u);

          }
          objc_autoreleasePoolPop(v43);
          if (a8)
          {
            objc_msgSend(MEMORY[0x24BDD1540], "hmErrorWithCode:", 3);
            *a8 = (id)objc_claimAutoreleasedReturnValue();
          }

          v16 = v56;
          v35 = obj;
          v17 = v58;
LABEL_29:

          v38 = 0;
          goto LABEL_36;
        }
        v30 = (void *)v29;
        objc_msgSend(v21, "addObject:", v29);
        objc_msgSend(v30, "updateActionSetIfNil:", v18);
        objc_msgSend(v30, "modelObjectWithChangeType:", 1);
        v31 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v58, "add:", v31);

        if (v23 == ++v25)
        {
          v23 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v59, v67, 16);
          v13 = v53;
          if (v23)
            goto LABEL_4;
          goto LABEL_14;
        }
      }
      v39 = (void *)MEMORY[0x227676638]();
      v40 = a1;
      HMFGetOSLogHandle();
      v41 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v41, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v42 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        v64 = v42;
        v65 = 2112;
        v66 = v14;
        _os_log_impl(&dword_2218F0000, v41, OS_LOG_TYPE_ERROR, "%{public}@Can't add action set %@; invalid serialized action",
          buf,
          0x16u);

      }
      objc_autoreleasePoolPop(v39);
      v13 = v53;
      v15 = v55;
      v16 = v56;
      v35 = obj;
      v17 = v58;
      if (a8)
      {
        objc_msgSend(MEMORY[0x24BDD1540], "hmErrorWithCode:", 3);
        *a8 = (id)objc_claimAutoreleasedReturnValue();
      }
      goto LABEL_29;
    }
LABEL_14:

    -[HMDActionSet setActions:](v18, "setActions:", v21);
    if ((objc_msgSend(a1, "validateActionsDoNotConflict:", v21) & 1) != 0)
    {
      objc_msgSend(v56, "hmf_dictionaryForKey:", CFSTR("kAppDataInformationKey"));
      v32 = (void *)objc_claimAutoreleasedReturnValue();
      if (objc_msgSend(v32, "count"))
      {
        v33 = -[HMDApplicationData initWithParentUUID:]([HMDApplicationData alloc], "initWithParentUUID:", v13);
        -[HMDApplicationData setApplicationData:forIdentifier:](v33, "setApplicationData:forIdentifier:", v32, CFSTR("com.apple.homekit-entitledclient.identifer"));
        -[HMDApplicationData modelObjectWithChangeType:](v33, "modelObjectWithChangeType:", 1);
        v34 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v58, "add:", v34);

      }
      v35 = obj;
      if (a7)
      {
        -[HMDActionSet createPayload](v18, "createPayload");
        v36 = (void *)objc_claimAutoreleasedReturnValue();
        v37 = (void *)objc_msgSend(v36, "mutableCopy");

        objc_msgSend(v37, "setObject:forKeyedSubscript:", v32, CFSTR("kAppDataInformationKey"));
        *a7 = (id)objc_msgSend(v37, "copy");

      }
      v38 = v18;

    }
    else
    {
      v47 = (void *)MEMORY[0x227676638]();
      v48 = a1;
      HMFGetOSLogHandle();
      v49 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v49, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v50 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        v64 = v50;
        v65 = 2112;
        v66 = v14;
        _os_log_impl(&dword_2218F0000, v49, OS_LOG_TYPE_ERROR, "%{public}@Can't add action set %@; conflicting actions",
          buf,
          0x16u);

      }
      objc_autoreleasePoolPop(v47);
      v35 = obj;
      if (a8)
      {
        objc_msgSend(MEMORY[0x24BDD1540], "hmErrorWithCode:", 3);
        v38 = 0;
        *a8 = (id)objc_claimAutoreleasedReturnValue();
      }
      else
      {
        v38 = 0;
      }
    }
    v15 = v55;
    v16 = v56;
    v17 = v58;
LABEL_36:

  }
  else
  {
    v38 = 0;
  }

  return v38;
}

void __34__HMDHome__handleAddEventTrigger___block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5;
  HomeKitEventTriggerAddLogEvent *v6;
  id WeakRetained;
  void *v8;
  id v9;
  NSObject *v10;
  void *v11;
  HMDEventTrigger *v12;
  HomeKitEventTriggerAddLogEvent *v13;
  void *v14;
  HomeKitEventTriggerAddLogEvent *v15;
  uint64_t v16;
  HMDAnalyticsEventTriggerData *v17;
  void *v18;
  uint64_t v19;
  void *v20;
  void *v21;
  void *v22;
  id v23;
  NSObject *v24;
  void *v25;
  void *v26;
  int v27;
  void *v28;
  __int16 v29;
  HomeKitEventTriggerAddLogEvent *v30;
  __int16 v31;
  id v32;
  uint64_t v33;

  v33 = *MEMORY[0x24BDAC8D0];
  v5 = a2;
  v6 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  v8 = (void *)MEMORY[0x227676638]();
  v9 = WeakRetained;
  HMFGetOSLogHandle();
  v10 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v27 = 138543874;
    v28 = v11;
    v29 = 2112;
    v30 = v6;
    v31 = 2112;
    v32 = v5;
    _os_log_impl(&dword_2218F0000, v10, OS_LOG_TYPE_INFO, "%{public}@Responding to the client about add event trigger status : Payload : [%@], error : [%@]", (uint8_t *)&v27, 0x20u);

  }
  objc_autoreleasePoolPop(v8);
  objc_msgSend(*(id *)(a1 + 32), "respondWithPayload:error:", v6, v5);
  if (v9)
  {
    v12 = -[HMDEventTrigger initWithModel:home:message:]([HMDEventTrigger alloc], "initWithModel:home:message:", *(_QWORD *)(a1 + 40), v9, *(_QWORD *)(a1 + 32));
    -[HMDEventTrigger addEventsFromMessage:preserveUUIDs:transaction:error:](v12, "addEventsFromMessage:preserveUUIDs:transaction:error:", *(_QWORD *)(a1 + 32), *(_BYTE *)(a1 + 64) == 0, 0, 0);
    v13 = [HomeKitEventTriggerAddLogEvent alloc];
    objc_msgSend(v9, "uuid");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    v15 = -[HomeKitEventTriggerAddLogEvent initWithHomeUUID:](v13, "initWithHomeUUID:", v14);

    v16 = 1;
    v17 = -[HMDAnalyticsEventTriggerData initWithEventTrigger:isAdding:]([HMDAnalyticsEventTriggerData alloc], "initWithEventTrigger:isAdding:", v12, 1);
    -[HomeKitEventTriggerAddLogEvent analyticsData](v15, "analyticsData");
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v18, "setEventTrigger:", v17);

    v19 = objc_msgSend(v5, "code");
    -[HomeKitEventTriggerAddLogEvent analyticsData](v15, "analyticsData");
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v20, "setResultErrorCode:", v19);

    if ((objc_msgSend(*(id *)(a1 + 48), "isOwner") & 1) == 0)
    {
      if (objc_msgSend(*(id *)(a1 + 48), "isAdministrator"))
        v16 = 2;
      else
        v16 = 0;
    }
    -[HomeKitEventTriggerAddLogEvent analyticsData](v15, "analyticsData");
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v21, "setRequestOrigin:", v16);

    v22 = (void *)MEMORY[0x227676638]();
    v23 = v9;
    HMFGetOSLogHandle();
    v24 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v24, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v25 = (void *)objc_claimAutoreleasedReturnValue();
      v27 = 138543618;
      v28 = v25;
      v29 = 2112;
      v30 = v15;
      _os_log_impl(&dword_2218F0000, v24, OS_LOG_TYPE_INFO, "%{public}@Prepared the metric %@, submitting", (uint8_t *)&v27, 0x16u);

    }
    objc_autoreleasePoolPop(v22);
    objc_msgSend(v23, "logEventSubmitter");
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v26, "submitLogEvent:", v15);

  }
}

void __34__HMDHome__handleAddEventTrigger___block_invoke_1219(uint64_t a1, uint64_t a2)
{
  void *v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  id v12;

  if (a2)
  {
    objc_msgSend(*(id *)(a1 + 32), "respondWithError:", a2);
  }
  else
  {
    v3 = *(void **)(a1 + 40);
    objc_msgSend(*(id *)(a1 + 48), "createPayloadWithCondition:", *(_QWORD *)(a1 + 56));
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "addEntriesFromDictionary:", v4);

    v5 = *(_QWORD *)(a1 + 64);
    objc_msgSend(*(id *)(a1 + 72), "triggerEvents");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHome _createEventsPayload:](v5, v6);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 40), "setObject:forKeyedSubscript:", v7, CFSTR("kEventTriggerEventsKey"));

    v8 = *(_QWORD *)(a1 + 64);
    objc_msgSend(*(id *)(a1 + 72), "endEvents");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHome _createEventsPayload:](v8, v9);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 40), "setObject:forKeyedSubscript:", v10, CFSTR("kEventTriggerEndEventsKey"));

    v11 = *(void **)(a1 + 32);
    v12 = (id)objc_msgSend(*(id *)(a1 + 40), "copy");
    objc_msgSend(v11, "respondWithPayload:", v12);

  }
}

- (id)_createEventsPayload:(uint64_t)a1
{
  id v3;
  id v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _BYTE v17[128];
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  v3 = a2;
  if (a1)
  {
    v4 = objc_alloc_init(MEMORY[0x24BDBCEB8]);
    v13 = 0u;
    v14 = 0u;
    v15 = 0u;
    v16 = 0u;
    v5 = v3;
    v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
    if (v6)
    {
      v7 = v6;
      v8 = *(_QWORD *)v14;
      do
      {
        v9 = 0;
        do
        {
          if (*(_QWORD *)v14 != v8)
            objc_enumerationMutation(v5);
          objc_msgSend(*(id *)(*((_QWORD *)&v13 + 1) + 8 * v9), "createPayload", (_QWORD)v13);
          v10 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v4, "addObject:", v10);

          ++v9;
        }
        while (v7 != v9);
        v7 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
      }
      while (v7);
    }

    v11 = (void *)objc_msgSend(v4, "copy");
  }
  else
  {
    v11 = 0;
  }

  return v11;
}

void __28__HMDHome_executeActionSet___block_invoke(id *a1)
{
  void (**v2)(_QWORD);
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(id *);
  void *v10;
  id v11;
  id v12;
  id v13;
  id location;

  objc_initWeak(&location, a1[4]);
  v7 = MEMORY[0x24BDAC760];
  v8 = 3221225472;
  v9 = __28__HMDHome_executeActionSet___block_invoke_2;
  v10 = &unk_24E7965D0;
  objc_copyWeak(&v13, &location);
  v11 = a1[5];
  v12 = a1[6];
  v2 = (void (**)(_QWORD))_Block_copy(&v7);
  if (objc_msgSend(a1[4], "_shouldWaitForAccessoriesToBeReachable", v7, v8, v9, v10))
  {
    objc_msgSend(a1[5], "uuidForKey:", CFSTR("kActionSetUUID"));
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(a1[4], "actionSetWithUUID:", v3);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(a1[4], "workQueue");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    +[HMDHomeAssistantOperation homeAssistantOperationWithActionSet:queue:](HMDHomeAssistantOperation, "homeAssistantOperationWithActionSet:queue:", v4, v5);
    v6 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(a1[4], "_performOperation:completion:", v6, v2);
  }
  else
  {
    v2[2](v2);
  }

  objc_destroyWeak(&v13);
  objc_destroyWeak(&location);
}

void __28__HMDHome_executeActionSet___block_invoke_2(id *a1)
{
  id WeakRetained;
  void *v3;
  void *v4;
  void (**v5)(_QWORD, _QWORD, _QWORD);
  void *v6;
  NSObject *v7;
  void *v8;
  int v9;
  void *v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  WeakRetained = objc_loadWeakRetained(a1 + 6);
  if (WeakRetained)
  {
    objc_msgSend(a1[5], "begin");
    objc_msgSend(WeakRetained, "_handleExecuteActionSet:", a1[4]);
    objc_msgSend(a1[5], "end");
  }
  else
  {
    objc_msgSend(a1[4], "responseHandler");
    v3 = (void *)objc_claimAutoreleasedReturnValue();

    if (v3)
    {
      objc_msgSend(MEMORY[0x24BDD1540], "errorWithDomain:code:userInfo:", *MEMORY[0x24BDD5BD8], 3, 0);
      v4 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(a1[4], "responseHandler");
      v5 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
      ((void (**)(_QWORD, void *, _QWORD))v5)[2](v5, v4, 0);

    }
    v6 = (void *)MEMORY[0x227676638]();
    HMFGetOSLogHandle();
    v7 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      v9 = 138543362;
      v10 = v8;
      _os_log_impl(&dword_2218F0000, v7, OS_LOG_TYPE_INFO, "%{public}@Home does not exist anymore, cannot execute action set", (uint8_t *)&v9, 0xCu);

    }
    objc_autoreleasePoolPop(v6);
  }

}

void __47__HMDHome__handleRemoveActionSetModel_message___block_invoke(uint64_t a1)
{
  id v2;

  objc_msgSend(*(id *)(a1 + 32), "notificationRegistry");
  v2 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "removeRegistrationsForActionSetUUID:", *(_QWORD *)(a1 + 40));

}

void __42__HMDHome__handleAddActionSetFromBuilder___block_invoke(uint64_t a1, void *a2)
{
  id v3;
  id v4;

  v4 = a2;
  if (v4)
  {
    v3 = (id)objc_msgSend(*(id *)(a1 + 32), "removeName:", *(_QWORD *)(a1 + 40));
    objc_msgSend(*(id *)(a1 + 48), "respondWithError:", v4);
  }
  else
  {
    objc_msgSend(*(id *)(a1 + 48), "respondWithPayload:", *(_QWORD *)(a1 + 56));
  }

}

void __31__HMDHome_builtInActionSetInfo__block_invoke(uint64_t a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t i;
  void *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  char v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _QWORD v22[3];
  _QWORD v23[3];
  _BYTE v24[128];
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v18 = 0u;
  v19 = 0u;
  v20 = 0u;
  v21 = 0u;
  objc_msgSend(*(id *)(a1 + 32), "actionSets");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v2 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v18, v24, 16);
  if (v2)
  {
    v3 = v2;
    v4 = *(_QWORD *)v19;
    v5 = *MEMORY[0x24BDD5220];
    do
    {
      for (i = 0; i != v3; ++i)
      {
        if (*(_QWORD *)v19 != v4)
          objc_enumerationMutation(v1);
        v7 = *(void **)(*((_QWORD *)&v18 + 1) + 8 * i);
        objc_msgSend(v7, "type");
        v8 = objc_claimAutoreleasedReturnValue();
        if (v8)
        {
          v9 = (void *)v8;
          objc_msgSend(v7, "type");
          v10 = (void *)objc_claimAutoreleasedReturnValue();
          v11 = objc_msgSend(v10, "isEqualToString:", v5);

          if ((v11 & 1) == 0)
          {
            v22[0] = CFSTR("kActionSetName");
            objc_msgSend(v7, "name");
            v12 = (void *)objc_claimAutoreleasedReturnValue();
            v23[0] = v12;
            v22[1] = CFSTR("kActionSetType");
            objc_msgSend(v7, "type");
            v13 = (void *)objc_claimAutoreleasedReturnValue();
            v23[1] = v13;
            v22[2] = CFSTR("kActionSetUUID");
            objc_msgSend(v7, "uuid");
            v14 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v14, "UUIDString");
            v15 = (void *)objc_claimAutoreleasedReturnValue();
            v23[2] = v15;
            objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v23, v22, 3);
            v16 = (void *)objc_claimAutoreleasedReturnValue();

            objc_msgSend(*(id *)(a1 + 40), "addObject:", v16);
          }
        }
      }
      v3 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v18, v24, 16);
    }
    while (v3);
  }

}

uint64_t __37__HMDHome__handleRemoveServiceGroup___block_invoke(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(a1 + 32), "respondWithPayload:error:", 0, a2);
}

void __34__HMDHome__handleAddServiceGroup___block_invoke(uint64_t a1, uint64_t a2)
{
  void *v2;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  _QWORD v8[2];
  _QWORD v9[3];

  v9[2] = *MEMORY[0x24BDAC8D0];
  v2 = *(void **)(a1 + 32);
  if (a2)
  {
    objc_msgSend(*(id *)(a1 + 32), "respondWithError:", a2);
  }
  else
  {
    v8[0] = *MEMORY[0x24BDD7DA8];
    objc_msgSend(*(id *)(a1 + 40), "name");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    v9[0] = v4;
    v8[1] = *MEMORY[0x24BDD7DC8];
    objc_msgSend(*(id *)(a1 + 40), "uuid");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "UUIDString");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v9[1] = v6;
    objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v9, v8, 2);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "respondWithPayload:", v7);

  }
}

uint64_t __76__HMDHome__processNewlyPairedAccessoryServerInfo_message_completionHandler___block_invoke(_QWORD *a1, void *a2)
{
  void *v3;
  void *v4;
  void *v5;
  id v6;
  id v7;
  void *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  void *v12;
  void *v13;
  id v14;
  id v15;
  id v16;
  id v17;
  void *v18;
  id v19;
  void *v20;
  void *v21;
  void *v22;
  _BOOL4 v23;
  void *v24;
  uint64_t v25;
  void *v26;
  void *v27;
  void *v28;
  char v29;
  void *v30;
  NSObject *v31;
  void *v32;
  void *v33;
  id v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  NSObject *v39;
  void *v40;
  void *v41;
  id v42;
  id v43;
  id v44;
  void *v45;
  void *v46;
  void *v47;
  _BOOL4 v48;
  void *v49;
  void *v50;
  NSObject *v51;
  void *v52;
  id v53;
  id v54;
  id v55;
  void *v56;
  void *v57;
  void *v58;
  void *v59;
  void *v60;
  void *v61;
  void *v62;
  void *v63;
  NSObject *v64;
  void *v65;
  void *v66;
  void *v67;
  void *v68;
  const char *v69;
  id v70;
  id v71;
  void *v72;
  NSObject *v73;
  id v74;
  id v75;
  id v76;
  void *v77;
  void *v78;
  void *v79;
  void *v80;
  id v81;
  int v82;
  id v83;
  id v84;
  void *v85;
  void *v86;
  void *v87;
  void *v88;
  void *v89;
  uint64_t v90;
  uint64_t v91;
  void *v92;
  void *v93;
  void *v94;
  id v95;
  void *v96;
  void *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  void *v102;
  uint64_t v103;
  id v104;
  id v105;
  void *v106;
  void *v107;
  void *v108;
  void *v109;
  void *v110;
  void *v111;
  void *v112;
  void *v113;
  NSObject *v114;
  void *v115;
  void *v116;
  void *v117;
  void *v118;
  void *v119;
  void *v120;
  id v121;
  void *v122;
  void *v123;
  void *v124;
  uint64_t v125;
  id v126;
  void *v127;
  id v128;
  void *v129;
  void *v130;
  id v131;
  id v132;
  id v133;
  void *v134;
  id v136;
  void *v137;
  id v138;
  void *v139;
  void *v140;
  void *v141;
  void *v142;
  void *v143;
  uint64_t v144;
  id objb;
  id objc;
  id obj;
  id objd;
  id obja;
  __int128 v150;
  __int128 v151;
  __int128 v152;
  __int128 v153;
  _BYTE v154[24];
  void *v155;
  id v156;
  void *v157;
  _BYTE buf[24];
  void *v159;
  __int128 v160;
  id v161;
  id v162;
  uint64_t v163;

  v163 = *MEMORY[0x24BDAC8D0];
  v136 = a2;
  v4 = (void *)a1[4];
  v3 = (void *)a1[5];
  v5 = (void *)a1[6];
  v6 = v3;
  v137 = v4;
  v138 = v5;
  v139 = v6;
  if (!v4)
    goto LABEL_57;
  v7 = v6;
  objc_msgSend(v7, "server");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "primaryAccessory");
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v7, "primaryAccessoryUUID");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v11 = objc_msgSend(v7, "certificationStatus");
  objc_msgSend(v7, "networkCredential");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  v142 = v7;
  objc_msgSend(v7, "hostAccessory");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  v14 = v9;
  v15 = v10;
  v16 = v12;
  v17 = v13;
  +[MKFModelFactory createHAPAccessoryModelWithModelID:](MKFModelFactory, "createHAPAccessoryModelWithModelID:", v15);
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  HMDPopulateAccessoryModelFromHAPAccessory(v18, v14, v11, v17);
  v19 = v14;
  objc_msgSend(v19, "server");
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v20, "productData");
  v21 = (void *)objc_claimAutoreleasedReturnValue();

  v140 = v19;
  if (v21)
  {
    objc_msgSend(v20, "productData");
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    v23 = +[HMDAccessory validateProductData:](HMDAccessory, "validateProductData:", v22);

    if (v23)
    {
      v24 = v140;
      objc_msgSend(v140, "productData");
      v25 = objc_claimAutoreleasedReturnValue();
      if (v25)
      {
        v26 = (void *)v25;
        objc_msgSend(v20, "productData");
        v27 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v140, "productData");
        v28 = (void *)objc_claimAutoreleasedReturnValue();
        v29 = objc_msgSend(v27, "isEqualToString:", v28);

        v24 = v140;
        if ((v29 & 1) == 0)
        {
          v30 = (void *)MEMORY[0x227676638]();
          HMFGetOSLogHandle();
          v31 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
          {
            HMFGetLogIdentifier();
            v32 = (void *)objc_claimAutoreleasedReturnValue();
            objb = v30;
            objc_msgSend(v140, "uniqueIdentifier");
            v33 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v20, "productData");
            v34 = v16;
            v35 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v140, "productData");
            v36 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 138544130;
            *(_QWORD *)&buf[4] = v32;
            *(_WORD *)&buf[12] = 2112;
            *(_QWORD *)&buf[14] = v33;
            *(_WORD *)&buf[22] = 2112;
            v159 = v35;
            LOWORD(v160) = 2112;
            *(_QWORD *)((char *)&v160 + 2) = v36;
            _os_log_impl(&dword_2218F0000, v31, OS_LOG_TYPE_ERROR, "%{public}@Accessory with identifier %@ is using productData from pair setup that differs from productData published on AIS: %@ != %@", buf, 0x2Au);

            v30 = objb;
            v16 = v34;

          }
          objc_autoreleasePoolPop(v30);
          v24 = v140;
        }
      }
      v37 = v20;
      goto LABEL_16;
    }
    v38 = (void *)MEMORY[0x227676638]();
    HMFGetOSLogHandle();
    v39 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v39, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v40 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v140, "uniqueIdentifier");
      v41 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v20, "productData");
      objc = v18;
      v42 = v17;
      v43 = v15;
      v44 = v16;
      v45 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543874;
      *(_QWORD *)&buf[4] = v40;
      *(_WORD *)&buf[12] = 2112;
      *(_QWORD *)&buf[14] = v41;
      *(_WORD *)&buf[22] = 2112;
      v159 = v45;
      _os_log_impl(&dword_2218F0000, v39, OS_LOG_TYPE_ERROR, "%{public}@Accessory with identifier %@ has invalid productData from pair setup: %@", buf, 0x20u);

      v16 = v44;
      v15 = v43;
      v17 = v42;
      v18 = objc;

    }
    objc_autoreleasePoolPop(v38);
    v19 = v140;
  }
  objc_msgSend(v19, "productData");
  v46 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v46)
  {
LABEL_20:
    +[HMDVendorDataManager sharedVendorDataManager](HMDVendorDataManager, "sharedVendorDataManager");
    v58 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v19, "manufacturer");
    v59 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v19, "model");
    v60 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v58, "vendorModelEntryForManufacturer:model:", v59, v60);
    v61 = (void *)objc_claimAutoreleasedReturnValue();

    if (v61)
    {
      objc_msgSend(v61, "productData");
      v62 = (void *)objc_claimAutoreleasedReturnValue();

      if (v62)
      {
        objc_msgSend(v61, "productData");
        v49 = (void *)objc_claimAutoreleasedReturnValue();
LABEL_29:

        v24 = v140;
        goto LABEL_30;
      }
      v63 = (void *)MEMORY[0x227676638]();
      HMFGetOSLogHandle();
      v64 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v64, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v65 = (void *)objc_claimAutoreleasedReturnValue();
        v143 = v63;
        objc_msgSend(v140, "uniqueIdentifier");
        obj = v16;
        v66 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v140, "manufacturer");
        v67 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v140, "model");
        v68 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138544130;
        *(_QWORD *)&buf[4] = v65;
        *(_WORD *)&buf[12] = 2112;
        *(_QWORD *)&buf[14] = v66;
        *(_WORD *)&buf[22] = 2112;
        v159 = v67;
        LOWORD(v160) = 2112;
        *(_QWORD *)((char *)&v160 + 2) = v68;
        v69 = "%{public}@Accessory with identifier %@ does not have productData in the VIDB (manufacturer: '%@', model: '%@')";
        goto LABEL_27;
      }
    }
    else
    {
      v63 = (void *)MEMORY[0x227676638]();
      HMFGetOSLogHandle();
      v64 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v64, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v65 = (void *)objc_claimAutoreleasedReturnValue();
        v143 = v63;
        objc_msgSend(v140, "uniqueIdentifier");
        obj = v16;
        v66 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v140, "manufacturer");
        v67 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v140, "model");
        v68 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138544130;
        *(_QWORD *)&buf[4] = v65;
        *(_WORD *)&buf[12] = 2112;
        *(_QWORD *)&buf[14] = v66;
        *(_WORD *)&buf[22] = 2112;
        v159 = v67;
        LOWORD(v160) = 2112;
        *(_QWORD *)((char *)&v160 + 2) = v68;
        v69 = "%{public}@Accessory with identifier %@ could not be found in the VIDB (manufacturer: '%@', model: '%@')";
LABEL_27:
        _os_log_impl(&dword_2218F0000, v64, OS_LOG_TYPE_ERROR, v69, buf, 0x2Au);

        v63 = v143;
        v16 = obj;

      }
    }

    objc_autoreleasePoolPop(v63);
    v49 = 0;
    goto LABEL_29;
  }
  objc_msgSend(v19, "productData");
  v24 = v19;
  v47 = (void *)objc_claimAutoreleasedReturnValue();
  v48 = +[HMDAccessory validateProductData:](HMDAccessory, "validateProductData:", v47);

  if (!v48)
  {
    v50 = (void *)MEMORY[0x227676638]();
    HMFGetOSLogHandle();
    v51 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v51, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v52 = (void *)objc_claimAutoreleasedReturnValue();
      v53 = v17;
      v54 = v15;
      v55 = v16;
      objc_msgSend(v140, "uniqueIdentifier");
      v56 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v140, "productData");
      v57 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543874;
      *(_QWORD *)&buf[4] = v52;
      *(_WORD *)&buf[12] = 2112;
      *(_QWORD *)&buf[14] = v56;
      *(_WORD *)&buf[22] = 2112;
      v159 = v57;
      _os_log_impl(&dword_2218F0000, v51, OS_LOG_TYPE_ERROR, "%{public}@Accessory with identifier %@ has invalid productData published on AIS: %@", buf, 0x20u);

      v16 = v55;
      v15 = v54;
      v17 = v53;

    }
    objc_autoreleasePoolPop(v50);
    v19 = v140;
    goto LABEL_20;
  }
  v37 = v24;
LABEL_16:
  objc_msgSend(v37, "productData");
  v49 = (void *)objc_claimAutoreleasedReturnValue();
LABEL_30:

  if (v49)
  {
    v70 = v18;
    v71 = v49;
    v72 = (void *)MEMORY[0x227676638]();
    HMFGetOSLogHandle();
    v73 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v73, OS_LOG_TYPE_DEFAULT))
    {
      HMFGetLogIdentifier();
      objd = v18;
      v74 = v17;
      v75 = v15;
      v76 = v16;
      v77 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v70, "uniqueIdentifier");
      v78 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543874;
      *(_QWORD *)&buf[4] = v77;
      *(_WORD *)&buf[12] = 2112;
      *(_QWORD *)&buf[14] = v78;
      *(_WORD *)&buf[22] = 2112;
      v159 = v71;
      _os_log_impl(&dword_2218F0000, v73, OS_LOG_TYPE_DEFAULT, "%{public}@Accessory with identifier %@ is now bound to productData %@", buf, 0x20u);

      v16 = v76;
      v15 = v75;
      v17 = v74;
      v18 = objd;
    }

    objc_autoreleasePoolPop(v72);
    objc_msgSend(v70, "setProductData:", v71);

    v24 = v140;
  }
  objc_msgSend(v24, "server");
  v79 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v80 = v79;
  else
    v80 = 0;
  v81 = v80;

  v82 = objc_msgSend(v81, "isWacComplete");
  v83 = v18;
  v84 = v16;
  objc_msgSend(v84, "clientIdentifier");
  v85 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v83, "setNetworkClientIdentifier:", v85);

  objc_msgSend(v83, "setNetworkClientLAN:", &unk_24E96CBF0);
  objc_msgSend(v84, "networkRouterUUID");
  v86 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v86, "UUIDString");
  v87 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v83, "setNetworkRouterUUID:", v87);

  objc_msgSend(v84, "wiFiPSK");
  v88 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v83, "setWiFiUniquePreSharedKey:", v88);

  objc_msgSend(v84, "wiFiPSK");
  v89 = (void *)objc_claimAutoreleasedReturnValue();

  v90 = 2;
  if (!v82)
    v90 = 0;
  if (v89)
    v91 = 3;
  else
    v91 = v90;
  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithInteger:", v91);
  v92 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v83, "setWiFiCredentialType:", v92);

  objc_msgSend(v24, "services");
  v93 = (void *)objc_claimAutoreleasedReturnValue();
  v94 = (void *)objc_msgSend(v93, "copy");
  v141 = v83;
  v95 = HMDNewModelsFromHAPServices(v94, v83);

  v152 = 0u;
  v153 = 0u;
  v150 = 0u;
  v151 = 0u;
  objc_msgSend(v142, "server");
  v96 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v96, "accessories");
  v97 = (void *)objc_claimAutoreleasedReturnValue();

  obja = v97;
  v98 = objc_msgSend(v97, "countByEnumeratingWithState:objects:count:", &v150, buf, 16);
  if (v98)
  {
    v99 = v98;
    v100 = *(_QWORD *)v151;
    do
    {
      v101 = 0;
      v144 = v99;
      do
      {
        if (*(_QWORD *)v151 != v100)
          objc_enumerationMutation(obja);
        v102 = *(void **)(*((_QWORD *)&v150 + 1) + 8 * v101);
        if ((objc_msgSend(v102, "isPrimary") & 1) == 0)
        {
          v103 = objc_msgSend(v142, "certificationStatus");
          v104 = v141;
          v105 = v102;
          objc_msgSend(v105, "instanceID");
          v106 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v106, "stringValue");
          v107 = (void *)objc_claimAutoreleasedReturnValue();
          *(_QWORD *)v154 = v107;
          objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", v154, 1);
          v108 = (void *)objc_claimAutoreleasedReturnValue();

          v109 = (void *)MEMORY[0x24BDD1880];
          objc_msgSend(v104, "modelID");
          v110 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v109, "hm_deriveUUIDFromBaseUUID:withSalts:", v110, v108);
          v111 = (void *)objc_claimAutoreleasedReturnValue();

          +[MKFModelFactory createHAPAccessoryModelWithModelID:](MKFModelFactory, "createHAPAccessoryModelWithModelID:", v111);
          v112 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v104, "addHostedAccessoriesObject:", v112);
          HMDPopulateAccessoryModelFromHAPAccessory(v112, v105, v103, v104);

          objc_msgSend(v112, "setWiFiCredentialType:", &unk_24E96CBF0);
          v113 = (void *)MEMORY[0x227676638]();
          HMFGetOSLogHandle();
          v114 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v114, OS_LOG_TYPE_INFO))
          {
            HMFGetLogIdentifier();
            v115 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v105, "uniqueIdentifier");
            v116 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v112, "modelID");
            v117 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v117, "UUIDString");
            v118 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)v154 = 138543874;
            *(_QWORD *)&v154[4] = v115;
            *(_WORD *)&v154[12] = 2112;
            *(_QWORD *)&v154[14] = v116;
            *(_WORD *)&v154[22] = 2112;
            v155 = v118;
            _os_log_impl(&dword_2218F0000, v114, OS_LOG_TYPE_INFO, "%{public}@Created secondary accessory with identifier %@ and uuid %@", v154, 0x20u);

          }
          objc_autoreleasePoolPop(v113);
          objc_msgSend(v105, "services");
          v119 = (void *)objc_claimAutoreleasedReturnValue();
          v120 = (void *)objc_msgSend(v119, "copy");
          v121 = HMDNewModelsFromHAPServices(v120, v112);

          v99 = v144;
        }
        ++v101;
      }
      while (v99 != v101);
      v99 = objc_msgSend(obja, "countByEnumeratingWithState:objects:count:", &v150, buf, 16);
    }
    while (v99);
  }

  objc_msgSend(v142, "server");
  v122 = (void *)objc_claimAutoreleasedReturnValue();
  +[HMDHome updatedHomeModelCHIPPropertiesForAddedHAPAccessoryServer:](HMDHome, "updatedHomeModelCHIPPropertiesForAddedHAPAccessoryServer:", v122);
  v123 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v137, "_readDataNeededImmediatelyAfterPairing:intoModel:", v142, v141);
  v124 = (void *)objc_claimAutoreleasedReturnValue();
  v125 = MEMORY[0x24BDAC760];
  *(_QWORD *)v154 = MEMORY[0x24BDAC760];
  *(_QWORD *)&v154[8] = 3221225472;
  *(_QWORD *)&v154[16] = __65__HMDHome__addAccessoriesUsingPairedAccessoryServerInfo_message___block_invoke;
  v155 = &unk_24E797BE8;
  v126 = v141;
  v156 = v126;
  v157 = v137;
  objc_msgSend(v124, "then:", v154);
  v127 = (void *)objc_claimAutoreleasedReturnValue();
  *(_QWORD *)&v150 = v125;
  *((_QWORD *)&v150 + 1) = 3221225472;
  *(_QWORD *)&v151 = __65__HMDHome__addAccessoriesUsingPairedAccessoryServerInfo_message___block_invoke_1168;
  *((_QWORD *)&v151 + 1) = &unk_24E785050;
  *(_QWORD *)&v152 = v137;
  *((_QWORD *)&v152 + 1) = v142;
  v128 = v126;
  *(_QWORD *)&v153 = v128;
  objc_msgSend(v127, "then:", &v150);
  v129 = (void *)objc_claimAutoreleasedReturnValue();
  *(_QWORD *)buf = v125;
  *(_QWORD *)&buf[8] = 3221225472;
  *(_QWORD *)&buf[16] = __65__HMDHome__addAccessoriesUsingPairedAccessoryServerInfo_message___block_invoke_2;
  v159 = &unk_24E797028;
  *(_QWORD *)&v160 = v137;
  *((_QWORD *)&v160 + 1) = v128;
  v161 = v123;
  v130 = v138;
  v162 = v138;
  v131 = v123;
  v132 = v128;
  objc_msgSend(v129, "then:", buf);
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  while (1)
  {

    v133 = v4;
    if (v133)
      break;
    _HMFPreconditionFailure();
LABEL_57:
    v130 = v138;
  }
  v134 = v133;

  return 3;
}

uint64_t __76__HMDHome__processNewlyPairedAccessoryServerInfo_message_completionHandler___block_invoke_2(uint64_t a1, void *a2)
{
  void *v3;
  int v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  void *v13;
  id v14;
  id v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __objc2_class **p_superclass;
  uint64_t v21;
  id v22;
  void *v23;
  id v24;
  void *v25;
  void *v26;
  BOOL v27;
  id v28;
  __objc2_class **v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  id v34;
  void *v35;
  id v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  id obj;
  _QWORD v43[4];
  id v44;
  id v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  _BYTE v50[128];
  uint64_t v51;

  v51 = *MEMORY[0x24BDAC8D0];
  v37 = a2;
  objc_msgSend(*(id *)(a1 + 32), "administratorHandler");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "shouldRelayMessages");

  v5 = *(void **)(a1 + 32);
  if (v4)
  {
    objc_msgSend(*(id *)(a1 + 32), "retrieveNewlyAddedAccessoriesForPairedAccessoryServerInfo:", *(_QWORD *)(a1 + 40));
    v6 = objc_claimAutoreleasedReturnValue();
    v7 = *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8);
    v8 = *(void **)(v7 + 40);
    *(_QWORD *)(v7 + 40) = v6;
  }
  else
  {
    objc_msgSend(*(id *)(a1 + 48), "identifier");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "retrieveAndResetNewlyConfiguredAccessoriesForAddSessionIdentifier:", v8);
    v9 = objc_claimAutoreleasedReturnValue();
    v10 = *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8);
    v11 = *(void **)(v10 + 40);
    *(_QWORD *)(v10 + 40) = v9;

  }
  v12 = *(void **)(a1 + 32);
  v13 = *(void **)(a1 + 56);
  v14 = *(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 40);
  v15 = v13;
  v38 = v14;
  if (v12)
  {
    objc_msgSend(MEMORY[0x24BDBCEB8], "arrayWithCapacity:", objc_msgSend(v14, "count"));
    v41 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "notificationRegistrations");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    v40 = objc_msgSend(v16, "count");

    v48 = 0u;
    v49 = 0u;
    v46 = 0u;
    v47 = 0u;
    obj = v14;
    v17 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v46, v50, 16);
    if (v17)
    {
      v18 = v17;
      v19 = *(_QWORD *)v47;
      p_superclass = HMDCameraMetricsSnapshotLogEvent.superclass;
      v39 = *(_QWORD *)v47;
      do
      {
        v21 = 0;
        do
        {
          if (*(_QWORD *)v47 != v19)
            objc_enumerationMutation(obj);
          v22 = *(id *)(*((_QWORD *)&v46 + 1) + 8 * v21);
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) != 0)
            v23 = v22;
          else
            v23 = 0;
          v24 = v23;

          objc_msgSend(v24, "uniqueIdentifier");
          v25 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v15, "objectForKey:", v25);
          v26 = (void *)objc_claimAutoreleasedReturnValue();

          if (v24)
            v27 = v26 == 0;
          else
            v27 = 1;
          if (!v27)
          {
            v45 = 0;
            objc_msgSend(MEMORY[0x24BE3F180], "futureWithPromise:", &v45);
            v28 = v15;
            v29 = p_superclass;
            v30 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v12, "workQueue");
            v31 = v12;
            v32 = (void *)objc_claimAutoreleasedReturnValue();
            v43[0] = MEMORY[0x24BDAC760];
            v43[1] = 3221225472;
            v43[2] = __83__HMDHome__associateAccessoriesWithHAPAccessories_uniqueIdentifierHAPAccessoryMap___block_invoke;
            v43[3] = &unk_24E79C240;
            v44 = v45;
            objc_msgSend(v24, "configureWithAccessory:homeNotificationsEnabled:queue:completion:", v26, v40 != 0, v32, v43);

            v12 = v31;
            objc_msgSend(v41, "addObject:", v30);

            p_superclass = v29;
            v15 = v28;
            v19 = v39;

          }
          ++v21;
        }
        while (v18 != v21);
        v18 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v46, v50, 16);
      }
      while (v18);
    }

    objc_msgSend(MEMORY[0x24BE3F180], "allSettled:", v41);
    v33 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v33, "ignoreOutcome");
    v12 = (void *)objc_claimAutoreleasedReturnValue();

  }
  v34 = v12;
  if (!v34)
    _HMFPreconditionFailure();
  v35 = v34;

  return 3;
}

uint64_t __76__HMDHome__processNewlyPairedAccessoryServerInfo_message_completionHandler___block_invoke_3(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  NSObject *v7;
  void *v8;
  void *v9;
  void *v10;
  id v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  void *v21;
  id v22;
  void *v23;
  id v24;
  id v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  id v31;
  void *v32;
  id v34;
  id v35;
  id v36;
  id v37;
  id v38[5];
  id v39;
  _QWORD *v40;
  _QWORD v41[5];
  id v42;
  id v43;
  id v44;
  _QWORD *v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  _QWORD v50[5];
  id v51;
  id v52;
  uint8_t buf[4];
  void *v54;
  __int16 v55;
  void *v56;
  __int16 v57;
  void *v58;
  uint64_t v59;

  v59 = *MEMORY[0x24BDAC8D0];
  v34 = a2;
  v3 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40);
  v4 = *(void **)(a1 + 32);
  objc_msgSend(*(id *)(a1 + 40), "pairingEvent");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v36 = v3;
  v35 = v5;
  if (!v4)
    goto LABEL_20;
  v6 = (void *)MEMORY[0x227676638]();
  v37 = v4;
  HMFGetOSLogHandle();
  v7 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedInteger:", objc_msgSend(v36, "count"));
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v35, "accessoryUUID");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543874;
    v54 = v8;
    v55 = 2112;
    v56 = v9;
    v57 = 2112;
    v58 = v10;
    _os_log_impl(&dword_2218F0000, v7, OS_LOG_TYPE_INFO, "%{public}@Performing post add configuration for %@ new accessories for pairing: %@", buf, 0x20u);

  }
  objc_autoreleasePoolPop(v6);
  v11 = objc_alloc(MEMORY[0x24BE3F138]);
  v12 = (void *)MEMORY[0x24BDD17C8];
  MEMORY[0x227675180](v37, sel__configureNewlyAddedAccessories_pairingEvent_);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v12, "stringWithFormat:", CFSTR("%@, %s:%ld"), v13, "/Library/Caches/com.apple.xbs/Sources/HomeKit_executables/Sources/homed/Home/HMDHome.m", 16126);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  v52 = (id)objc_msgSend(v11, "initWithName:", v14);

  v50[0] = 0;
  v50[1] = v50;
  v50[2] = 0x3032000000;
  v50[3] = __Block_byref_object_copy__14094;
  v50[4] = __Block_byref_object_dispose__14095;
  v51 = 0;
  objc_msgSend(MEMORY[0x24BDBCEB8], "arrayWithCapacity:", objc_msgSend(v36, "count"));
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  v48 = 0u;
  v49 = 0u;
  v46 = 0u;
  v47 = 0u;
  v16 = v36;
  v17 = objc_msgSend(v16, "countByEnumeratingWithState:objects:count:", &v46, buf, 16);
  if (v17)
  {
    v18 = *(_QWORD *)v47;
    do
    {
      v19 = 0;
      do
      {
        if (*(_QWORD *)v47 != v18)
          objc_enumerationMutation(v16);
        v20 = *(id *)(*((_QWORD *)&v46 + 1) + 8 * v19);
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0)
          v21 = v20;
        else
          v21 = 0;
        v22 = v21;

        if (v22)
        {
          v38[0] = 0;
          objc_msgSend(MEMORY[0x24BE3F180], "futureWithPromise:", v38);
          v23 = (void *)objc_claimAutoreleasedReturnValue();
          v41[0] = MEMORY[0x24BDAC760];
          v41[1] = 3221225472;
          v41[2] = __56__HMDHome__configureNewlyAddedAccessories_pairingEvent___block_invoke;
          v41[3] = &unk_24E79C1D0;
          v41[4] = v37;
          v24 = v22;
          v42 = v24;
          v45 = v50;
          v43 = v52;
          v44 = v38[0];
          objc_msgSend(v24, "readInitialRequiredCharacteristicsForAccessory:", v41);
          objc_msgSend(v24, "checkHAPSessionRestore");
          objc_msgSend(v15, "addObject:", v23);

        }
        ++v19;
      }
      while (v17 != v19);
      v17 = objc_msgSend(v16, "countByEnumeratingWithState:objects:count:", &v46, buf, 16);
    }
    while (v17);
  }

  v25 = objc_alloc(MEMORY[0x24BE3F168]);
  objc_msgSend(v37, "workQueue");
  v26 = (void *)objc_claimAutoreleasedReturnValue();
  v27 = (void *)objc_msgSend(v25, "initWithQueue:", v26);

  objc_msgSend(MEMORY[0x24BE3F180], "allSettled:", v15);
  v28 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v28, "ignoreOutcome");
  v29 = (void *)objc_claimAutoreleasedReturnValue();
  v38[0] = (id)MEMORY[0x24BDAC760];
  v38[1] = (id)3221225472;
  v38[2] = __56__HMDHome__configureNewlyAddedAccessories_pairingEvent___block_invoke_3;
  v38[3] = &unk_24E7766D0;
  v38[4] = v37;
  v40 = v50;
  v39 = v35;
  objc_msgSend(v29, "inContext:then:", v27, v38);
  v30 = (void *)objc_claimAutoreleasedReturnValue();

  _Block_object_dispose(v50, 8);
  __HMFActivityScopeLeave();

  while (1)
  {

    v31 = v30;
    if (v31)
      break;
    _HMFPreconditionFailure();
LABEL_20:
    v30 = 0;
  }
  v32 = v31;

  return 3;
}

uint64_t __76__HMDHome__processNewlyPairedAccessoryServerInfo_message_completionHandler___block_invoke_4(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "finishPairingForServer:", *(_QWORD *)(a1 + 40));
  objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), "na_each:", &__block_literal_global_1165);
  return 1;
}

uint64_t __76__HMDHome__processNewlyPairedAccessoryServerInfo_message_completionHandler___block_invoke_6(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "_notifyClientOfNewlyAddedAccessories:requestMessage:", *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40), *(_QWORD *)(a1 + 40));
  (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();
  return 1;
}

uint64_t __76__HMDHome__processNewlyPairedAccessoryServerInfo_message_completionHandler___block_invoke_7(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  NSObject *v6;
  void *v7;
  uint64_t v8;
  int v10;
  void *v11;
  __int16 v12;
  uint64_t v13;
  __int16 v14;
  id v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  v3 = a2;
  v4 = (void *)MEMORY[0x227676638]();
  v5 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v6 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
  {
    HMFGetLogIdentifier();
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = *(_QWORD *)(a1 + 40);
    v10 = 138543874;
    v11 = v7;
    v12 = 2112;
    v13 = v8;
    v14 = 2112;
    v15 = v3;
    _os_log_impl(&dword_2218F0000, v6, OS_LOG_TYPE_ERROR, "%{public}@Add accessory failed for %@ with error %@", (uint8_t *)&v10, 0x20u);

  }
  objc_autoreleasePoolPop(v4);
  objc_msgSend(*(id *)(a1 + 32), "_removeFailedAddWithAccessoryServerInfo:", *(_QWORD *)(a1 + 40));
  objc_msgSend(*(id *)(a1 + 48), "respondWithError:", v3);
  (*(void (**)(void))(*(_QWORD *)(a1 + 56) + 16))();

  return 1;
}

void __76__HMDHome__processNewlyPairedAccessoryServerInfo_message_completionHandler___block_invoke_5(uint64_t a1, void *a2)
{
  logAndPostNotification(CFSTR("HMDAccessoryConnectedNotification"), a2, 0);
}

void __56__HMDHome__configureNewlyAddedAccessories_pairingEvent___block_invoke(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  char v5;
  void *v6;
  _QWORD v7[4];
  id v8;
  id v9;

  v3 = a2;
  objc_msgSend(*(id *)(a1 + 32), "administratorHandler");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v4, "shouldRelayMessages");

  if ((v5 & 1) == 0)
    objc_msgSend(*(id *)(a1 + 40), "autoConfigureTargetController");
  if (objc_msgSend(*(id *)(a1 + 40), "isPrimary"))
  {
    objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 40), *(id *)(a1 + 40));
    objc_msgSend(*(id *)(a1 + 48), "begin");
    v9 = *(id *)(a1 + 48);
    v6 = *(void **)(a1 + 40);
    v7[0] = MEMORY[0x24BDAC760];
    v7[1] = 3221225472;
    v7[2] = __56__HMDHome__configureNewlyAddedAccessories_pairingEvent___block_invoke_2;
    v7[3] = &unk_24E79C240;
    v8 = *(id *)(a1 + 56);
    objc_msgSend(v6, "handleUpdatedServicesForThreadManagementWithCompletion:", v7);

    __HMFActivityScopeLeave();
  }
  else
  {
    objc_msgSend(*(id *)(a1 + 56), "fulfillWithValue:", 0);
  }

}

uint64_t __56__HMDHome__configureNewlyAddedAccessories_pairingEvent___block_invoke_3(_QWORD *a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  id v6;
  id v7;
  void *v8;
  void *v9;
  id v10;
  id v11;
  void *v12;
  _Unwind_Exception *v14;
  _QWORD v15[4];
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;

  v3 = a2;
  v4 = (void *)a1[5];
  v5 = (void *)a1[4];
  v6 = *(id *)(*(_QWORD *)(a1[6] + 8) + 40);
  v7 = v4;
  if (v5)
  {
    objc_msgSend(MEMORY[0x24BE3F138], "currentActivity");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v22 = 0;
    objc_msgSend(MEMORY[0x24BE3F180], "futureWithPromise:", &v22);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v6, "isPrimary"))
    {
      objc_msgSend(v8, "begin");
      v21 = v8;
      objc_msgSend(MEMORY[0x24BDBCE60], "date");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      v15[0] = MEMORY[0x24BDAC760];
      v15[1] = 3221225472;
      v15[2] = __60__HMDHome__commissionAccessoryToThreadNetwork_pairingEvent___block_invoke;
      v15[3] = &unk_24E7806D8;
      v10 = v9;
      v16 = v10;
      v17 = v21;
      v18 = v6;
      v19 = v7;
      v20 = v22;
      objc_msgSend(v18, "commissionToThreadNetworkWithPairingEvent:completion:", v19, v15);

      __HMFActivityScopeLeave();
    }
    else
    {
      objc_msgSend(v22, "fulfillWithValue:", 0);
    }

  }
  v11 = v5;
  if (!v11)
  {
    v14 = (_Unwind_Exception *)_HMFPreconditionFailure();
    __HMFActivityScopeLeave();
    _Unwind_Resume(v14);
  }
  v12 = v11;

  return 3;
}

uint64_t __60__HMDHome__commissionAccessoryToThreadNetwork_pairingEvent___block_invoke(uint64_t a1, void *a2)
{
  void *v3;
  id v4;
  void *v5;
  double v6;
  double v7;
  id v8;

  v3 = (void *)MEMORY[0x24BDBCE60];
  v4 = a2;
  objc_msgSend(v3, "date");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "timeIntervalSinceDate:", *(_QWORD *)(a1 + 32));
  v7 = v6;

  objc_msgSend(*(id *)(a1 + 48), "uuid");
  v8 = (id)objc_msgSend(MEMORY[0x24BDD16E0], "numberWithDouble:", v7);
  objc_msgSend(v4, "domain");

  objc_msgSend(v4, "code");
  objc_msgSend(*(id *)(a1 + 56), "setThreadCommissioningDuration:", v7);
  objc_msgSend(*(id *)(a1 + 56), "setThreadCommissioningError:", v4);

  return objc_msgSend(*(id *)(a1 + 64), "fulfillWithValue:", 0);
}

uint64_t __56__HMDHome__configureNewlyAddedAccessories_pairingEvent___block_invoke_2(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "fulfillWithValue:", 0);
}

uint64_t __83__HMDHome__associateAccessoriesWithHAPAccessories_uniqueIdentifierHAPAccessoryMap___block_invoke(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "fulfillWithValue:", 0);
}

uint64_t __65__HMDHome__addAccessoriesUsingPairedAccessoryServerInfo_message___block_invoke(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  int v7;
  void *v8;
  id v9;
  NSObject *v10;
  void *v11;
  void *v12;
  void *v13;
  id v14;
  void *v15;
  int v17;
  void *v18;
  id v19;
  NSObject *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  id v25;
  void *v26;
  void *v27;
  _QWORD v28[5];
  id v29;
  _BYTE buf[12];
  __int16 v31;
  int v32;
  __int16 v33;
  int v34;
  uint64_t v35;

  v35 = *MEMORY[0x24BDAC8D0];
  v3 = a2;
  objc_msgSend(*(id *)(a1 + 32), "supportsMatCredACP");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  if (!objc_msgSend(v4, "BOOLValue"))
    goto LABEL_4;
  objc_msgSend(*(id *)(a1 + 32), "mfiCertifiedACWG");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v5, "BOOLValue"))
  {

LABEL_4:
LABEL_5:
    objc_msgSend(*(id *)(a1 + 32), "supportsMatCredACP");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v7 = objc_msgSend(v6, "BOOLValue");

    if (v7)
    {
      v8 = (void *)MEMORY[0x227676638]();
      v9 = *(id *)(a1 + 40);
      HMFGetOSLogHandle();
      v10 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(*(id *)(a1 + 32), "mfiCertifiedACWG");
        v12 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543874;
        *(_QWORD *)&buf[4] = v11;
        v31 = 1024;
        v32 = objc_msgSend(v12, "BOOLValue");
        v33 = 1024;
        v34 = skipAuthPromptDialog;
        _os_log_impl(&dword_2218F0000, v10, OS_LOG_TYPE_INFO, "%{public}@Not showing uncertified dialog for ECB lock. Certification status: %{BOOL}d, shouldSkipAuthPrompt: %{BOOL}d", buf, 0x18u);

      }
      objc_autoreleasePoolPop(v8);
    }
    objc_msgSend(MEMORY[0x24BE3F180], "futureWithNoValue");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    goto LABEL_10;
  }
  v17 = skipAuthPromptDialog;

  if (v17)
    goto LABEL_5;
  v18 = (void *)MEMORY[0x227676638]();
  v19 = *(id *)(a1 + 40);
  HMFGetOSLogHandle();
  v20 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v20, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543362;
    *(_QWORD *)&buf[4] = v21;
    _os_log_impl(&dword_2218F0000, v20, OS_LOG_TYPE_INFO, "%{public}@Uncertified ECB lock detected, showing the uncertified accessory dialog", buf, 0xCu);

  }
  objc_autoreleasePoolPop(v18);
  *(_QWORD *)buf = 0;
  objc_msgSend(MEMORY[0x24BE3F180], "futureWithPromise:", buf);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  +[HMDUIDialogPresenter sharedUIDialogPresenter](HMDUIDialogPresenter, "sharedUIDialogPresenter");
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 32), "configuredName");
  v23 = (void *)objc_claimAutoreleasedReturnValue();
  v24 = v23;
  if (v23)
  {
    v25 = v23;
  }
  else
  {
    objc_msgSend(*(id *)(a1 + 32), "providedName");
    v25 = (id)objc_claimAutoreleasedReturnValue();
  }
  v26 = v25;

  objc_msgSend(*(id *)(a1 + 40), "workQueue");
  v27 = (void *)objc_claimAutoreleasedReturnValue();
  v28[0] = MEMORY[0x24BDAC760];
  v28[1] = 3221225472;
  v28[2] = __65__HMDHome__addAccessoriesUsingPairedAccessoryServerInfo_message___block_invoke_1167;
  v28[3] = &unk_24E78D7E0;
  v28[4] = *(_QWORD *)(a1 + 40);
  v29 = *(id *)buf;
  objc_msgSend(v22, "requestUserPermissionForUnauthenticatedAccessory:withContext:queue:completionHandler:", v26, 0, v27, v28);

LABEL_10:
  v14 = v13;
  if (!v14)
    _HMFPreconditionFailure();
  v15 = v14;

  return 3;
}

uint64_t __65__HMDHome__addAccessoriesUsingPairedAccessoryServerInfo_message___block_invoke_1168(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  uint64_t v7;

  v3 = a2;
  objc_msgSend(*(id *)(a1 + 32), "_configureWithFeatureSpecificDataAccessory:accessoryModel:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
  v4 = (id)objc_claimAutoreleasedReturnValue();
  if (v4)
  {
    v5 = v4;

    return 3;
  }
  else
  {
    v7 = _HMFPreconditionFailure();
    return __65__HMDHome__addAccessoriesUsingPairedAccessoryServerInfo_message___block_invoke_2(v7);
  }
}

uint64_t __65__HMDHome__addAccessoriesUsingPairedAccessoryServerInfo_message___block_invoke_2(id *a1, void *a2)
{
  id v3;
  void *v4;
  int v5;
  id v6;
  id v7;
  id v8;
  id v9;
  id v10;
  void *v11;
  id v12;
  NSObject *v13;
  void *v14;
  id v15;
  id v16;
  void *v17;
  void *v18;
  void *v19;
  id v20;
  NSObject *v21;
  void *v22;
  uint64_t v23;
  void *v24;
  id v25;
  NSObject *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  id v31;
  NSObject *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  id v38;
  void *v39;
  id v40;
  void *v41;
  void *v42;
  void *v43;
  void *v44;
  id v45;
  void *v46;
  void *v47;
  id v48;
  NSObject *v49;
  void *v50;
  id v51;
  void *v52;
  id v53;
  void *v54;
  id v56;
  void *v57;
  id v58;
  id v59;
  _BYTE buf[24];
  void *v61;
  id v62;
  id v63;
  id v64;
  uint64_t v65;

  v65 = *MEMORY[0x24BDAC8D0];
  v3 = a2;
  objc_msgSend(a1[4], "administratorHandler");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v4, "shouldRelayMessages");

  if (!v5)
  {
    v47 = (void *)MEMORY[0x227676638]();
    v48 = a1[4];
    HMFGetOSLogHandle();
    v49 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v49, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v50 = (void *)objc_claimAutoreleasedReturnValue();
      v51 = a1[5];
      objc_msgSend(a1[7], "shortDescription");
      v52 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543874;
      *(_QWORD *)&buf[4] = v50;
      *(_WORD *)&buf[12] = 2112;
      *(_QWORD *)&buf[14] = v51;
      *(_WORD *)&buf[22] = 2112;
      v61 = v52;
      _os_log_impl(&dword_2218F0000, v49, OS_LOG_TYPE_INFO, "%{public}@Locally adding accessories for the home using primary accessory model: %@, message: %@", buf, 0x20u);

    }
    objc_autoreleasePoolPop(v47);
    -[HMDHome _addAccessoriesUsingPrimaryAccessoryModel:updatedHomeInfo:message:](a1[4], a1[5], a1[6], a1[7]);
    v53 = (id)objc_claimAutoreleasedReturnValue();
    if (v53)
    {
      v54 = v53;

      goto LABEL_25;
    }
    goto LABEL_26;
  }
  v7 = a1[4];
  v6 = a1[5];
  v8 = a1[6];
  v9 = v6;
  v10 = v8;
  v56 = v3;
  v57 = v9;
  if (v7)
  {
    v11 = (void *)MEMORY[0x227676638]();
    v12 = v7;
    HMFGetOSLogHandle();
    v13 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      *(_QWORD *)&buf[4] = v14;
      *(_WORD *)&buf[12] = 2112;
      *(_QWORD *)&buf[14] = v9;
      _os_log_impl(&dword_2218F0000, v13, OS_LOG_TYPE_INFO, "%{public}@Remotely adding accessories via primary resident using primary accessory model: %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v11);
    v15 = objc_alloc_init(MEMORY[0x24BDBCED8]);
    v16 = v9;
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0)
    {
LABEL_27:
      objc_opt_class();
      _HMFPreconditionFailureWithFormat();
    }
    v59 = 0;
    +[HMDStructuredWriter writerIntoObject:extendedTypeOptions:](HMDStructuredWriter, "writerIntoObject:extendedTypeOptions:", &v59, 9);
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    HMDRemoteAddCodingModel();
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v18, "encodeRootObject:withWriter:", v16, v17);

    v19 = (void *)MEMORY[0x227676638]();
    v20 = v12;
    HMFGetOSLogHandle();
    v21 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v21, OS_LOG_TYPE_DEBUG))
    {
      HMFGetLogIdentifier();
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      *(_QWORD *)&buf[4] = v22;
      *(_WORD *)&buf[12] = 2112;
      *(_QWORD *)&buf[14] = v59;
      _os_log_impl(&dword_2218F0000, v21, OS_LOG_TYPE_DEBUG, "%{public}@Including serialized accessories: %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v19);
    v23 = objc_msgSend(v15, "setObject:forKeyedSubscript:", v59, CFSTR("HMDSerializedAccessoriesMessageKey"));
    if (v10)
    {
      v24 = (void *)MEMORY[0x227676638](v23);
      v25 = v20;
      HMFGetOSLogHandle();
      v26 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v26, OS_LOG_TYPE_DEBUG))
      {
        HMFGetLogIdentifier();
        v27 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        *(_QWORD *)&buf[4] = v27;
        *(_WORD *)&buf[12] = 2112;
        *(_QWORD *)&buf[14] = v10;
        _os_log_impl(&dword_2218F0000, v26, OS_LOG_TYPE_DEBUG, "%{public}@Including updated home info: %@", buf, 0x16u);

      }
      objc_autoreleasePoolPop(v24);
      objc_msgSend(v15, "setObject:forKeyedSubscript:", v10, CFSTR("HMDUpdatedHomeInfoMessageKey"));
    }
    objc_msgSend(v16, "hostAccessory");
    v28 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v28, "modelID");
    v29 = (void *)objc_claimAutoreleasedReturnValue();

    if (v29)
    {
      v30 = (void *)MEMORY[0x227676638]();
      v31 = v20;
      HMFGetOSLogHandle();
      v32 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v32, OS_LOG_TYPE_DEBUG))
      {
        HMFGetLogIdentifier();
        v33 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        *(_QWORD *)&buf[4] = v33;
        *(_WORD *)&buf[12] = 2112;
        *(_QWORD *)&buf[14] = v29;
        _os_log_impl(&dword_2218F0000, v32, OS_LOG_TYPE_DEBUG, "%{public}@Including host accessory uuid: %@", buf, 0x16u);

      }
      objc_autoreleasePoolPop(v30);
      objc_msgSend(v29, "UUIDString");
      v34 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v15, "setObject:forKeyedSubscript:", v34, CFSTR("HMDHostAccessoryIdentifierMessageKey"));

    }
    v58 = 0;
    objc_msgSend(MEMORY[0x24BE3F180], "futureWithPromise:", &v58);
    v35 = (void *)objc_claimAutoreleasedReturnValue();
    v36 = (void *)MEMORY[0x24BE3F1D0];
    v37 = (void *)objc_msgSend(v15, "copy");
    *(_QWORD *)buf = MEMORY[0x24BDAC760];
    *(_QWORD *)&buf[8] = 3221225472;
    *(_QWORD *)&buf[16] = __76__HMDHome__remotelyAddAccessoriesFromPrimaryAccessoryModel_updatedHomeInfo___block_invoke;
    v61 = &unk_24E795C28;
    v62 = v20;
    v38 = v16;
    v63 = v38;
    v64 = v58;
    objc_msgSend(v36, "messageWithName:messagePayload:responseHandler:", CFSTR("HMDRemoteAddHAPAccessoriesMessage"), v37, buf);
    v39 = (void *)objc_claimAutoreleasedReturnValue();

    v40 = objc_alloc(MEMORY[0x24BE3F1B8]);
    objc_msgSend(v20, "uuid");
    v41 = (void *)objc_claimAutoreleasedReturnValue();
    v42 = (void *)objc_msgSend(v40, "initWithTarget:", v41);

    objc_msgSend(v39, "setDestination:", v42);
    objc_msgSend(v39, "setQualityOfService:", 33);
    objc_msgSend(v20, "administratorHandler");
    v43 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v43, "operationForMessage:error:", v39, 0);
    v44 = (void *)objc_claimAutoreleasedReturnValue();
    if (v44)
      objc_msgSend(v43, "addOperation:", v44);

  }
  else
  {
    v35 = 0;
  }

  v45 = v35;
  if (!v45)
  {
LABEL_26:
    _HMFPreconditionFailure();
    goto LABEL_27;
  }
  v46 = v45;

  v3 = v56;
LABEL_25:

  return 3;
}

- (id)_addAccessoriesUsingPrimaryAccessoryModel:(void *)a3 updatedHomeInfo:(void *)a4 message:
{
  id v7;
  id v8;
  id v9;
  dispatch_group_t v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  id v15;
  id v16;
  id v17;
  NSObject *v18;
  id v19;
  id v20;
  void *v21;
  uint64_t v22;
  void *i;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  id v28;
  NSObject *v29;
  void *v30;
  void *v31;
  id v32;
  id v33;
  id v34;
  void *v35;
  int v36;
  void *v37;
  id v39;
  id v40;
  id v41;
  _QWORD v42[4];
  NSObject *v43;
  id v44;
  id v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  _BYTE buf[12];
  __int16 v51;
  id v52;
  __int16 v53;
  id v54;
  uint64_t v55;

  v55 = *MEMORY[0x24BDAC8D0];
  v7 = a2;
  v8 = a3;
  v9 = a4;
  if (!a1)
  {
    v31 = 0;
    goto LABEL_30;
  }
  v10 = dispatch_group_create();
  objc_msgSend(a1, "backingStore");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "name");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  +[HMDBackingStoreTransactionOptions defaultXPCOptions](HMDBackingStoreTransactionOptions, "defaultXPCOptions");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "transaction:options:", v12, v13);
  v14 = (void *)objc_claimAutoreleasedReturnValue();

  v15 = v14;
  v16 = v7;
  v17 = a1;
  v18 = v10;
  v41 = v9;
  v19 = v9;
  HMDAddToTransactionBlockFromHAPAccessoryModel(v15, v16, v17, v18, v19);
  v20 = (id)objc_claimAutoreleasedReturnValue();
  if (!v20)
  {
    v48 = 0u;
    v49 = 0u;
    v46 = 0u;
    v47 = 0u;
    objc_msgSend(v16, "hostedAccessories");
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    v20 = (id)objc_msgSend(v21, "countByEnumeratingWithState:objects:count:", &v46, buf, 16);
    if (v20)
    {
      v39 = v8;
      v40 = v7;
      v22 = *(_QWORD *)v47;
      while (2)
      {
        for (i = 0; i != v20; i = (char *)i + 1)
        {
          if (*(_QWORD *)v47 != v22)
            objc_enumerationMutation(v21);
          objc_msgSend(*(id *)(*((_QWORD *)&v46 + 1) + 8 * (_QWORD)i), "castIfHAPAccessory", v39, v40);
          v24 = (void *)objc_claimAutoreleasedReturnValue();
          if (v24)
          {
            v25 = v24;
            HMDAddToTransactionBlockFromHAPAccessoryModel(v15, v24, v17, v18, v19);
            v26 = (void *)objc_claimAutoreleasedReturnValue();
            if (v26)
            {
              v20 = v26;

              v21 = v20;
              goto LABEL_15;
            }

          }
        }
        v20 = (id)objc_msgSend(v21, "countByEnumeratingWithState:objects:count:", &v46, buf, 16);
        if (v20)
          continue;
        break;
      }
LABEL_15:
      v8 = v39;
      v7 = v40;
    }

  }
  if (v20)
  {
    v27 = (void *)MEMORY[0x227676638]();
    v28 = v17;
    HMFGetOSLogHandle();
    v29 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v30 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543874;
      *(_QWORD *)&buf[4] = v30;
      v51 = 2112;
      v52 = v16;
      v53 = 2112;
      v54 = v20;
      _os_log_impl(&dword_2218F0000, v29, OS_LOG_TYPE_ERROR, "%{public}@Failed to add to transaction block from primary accessory model %@: %@", buf, 0x20u);

    }
    objc_autoreleasePoolPop(v27);
    objc_msgSend(MEMORY[0x24BE3F180], "futureWithError:", v20);
    v31 = (void *)objc_claimAutoreleasedReturnValue();

    goto LABEL_29;
  }
  v32 = v15;
  v33 = v8;
  v34 = v17;
  objc_msgSend(v34, "emptyModelObjectWithChangeType:", 2);
  v35 = (void *)objc_claimAutoreleasedReturnValue();
  if (v33)
  {
    v36 = objc_msgSend(v34, "updateCHIPPropertiesOnHomeModel:usingUpdatedHomeInfo:", v35, v33);
    if ((objc_msgSend(v34, "hasNeverAddedAnyHAPAccessory") & 1) == 0)
    {
      if (!v36)
        goto LABEL_28;
      goto LABEL_27;
    }
LABEL_26:
    objc_msgSend(MEMORY[0x24BDBCE60], "date");
    v37 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v35, "setFirstHAPAccessoryAddedDate:", v37);

LABEL_27:
    objc_msgSend(v32, "add:", v35);
    goto LABEL_28;
  }
  if (objc_msgSend(v34, "hasNeverAddedAnyHAPAccessory"))
    goto LABEL_26;
LABEL_28:

  *(_QWORD *)buf = 0;
  objc_msgSend(MEMORY[0x24BE3F180], "futureWithPromise:", buf);
  v31 = (void *)objc_claimAutoreleasedReturnValue();
  v42[0] = MEMORY[0x24BDAC760];
  v42[1] = 3221225472;
  v42[2] = __77__HMDHome__addAccessoriesUsingPrimaryAccessoryModel_updatedHomeInfo_message___block_invoke;
  v42[3] = &unk_24E799FD0;
  v43 = v18;
  v44 = v34;
  v45 = *(id *)buf;
  objc_msgSend(v32, "run:", v42);

LABEL_29:
  v9 = v41;
LABEL_30:

  return v31;
}

void __77__HMDHome__addAccessoriesUsingPrimaryAccessoryModel_updatedHomeInfo_message___block_invoke(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  NSObject *v5;
  id v6;
  _QWORD v7[4];
  id v8;
  id v9;

  v3 = a2;
  v4 = *(NSObject **)(a1 + 32);
  objc_msgSend(*(id *)(a1 + 40), "workQueue");
  v5 = objc_claimAutoreleasedReturnValue();
  v7[0] = MEMORY[0x24BDAC760];
  v7[1] = 3221225472;
  v7[2] = __77__HMDHome__addAccessoriesUsingPrimaryAccessoryModel_updatedHomeInfo_message___block_invoke_2;
  v7[3] = &unk_24E79C268;
  v8 = v3;
  v9 = *(id *)(a1 + 48);
  v6 = v3;
  dispatch_group_notify(v4, v5, v7);

}

uint64_t __77__HMDHome__addAccessoriesUsingPrimaryAccessoryModel_updatedHomeInfo_message___block_invoke_2(uint64_t a1)
{
  void *v1;
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 32);
  v1 = *(void **)(a1 + 40);
  if (v2)
    return objc_msgSend(v1, "rejectWithError:");
  else
    return objc_msgSend(v1, "fulfillWithValue:");
}

void __76__HMDHome__remotelyAddAccessoriesFromPrimaryAccessoryModel_updatedHomeInfo___block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  id v8;
  NSObject *v9;
  void *v10;
  uint64_t v11;
  int v12;
  void *v13;
  __int16 v14;
  uint64_t v15;
  __int16 v16;
  id v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  v5 = a2;
  v6 = a3;
  if (v5)
  {
    v7 = (void *)MEMORY[0x227676638]();
    v8 = *(id *)(a1 + 32);
    HMFGetOSLogHandle();
    v9 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      v11 = *(_QWORD *)(a1 + 40);
      v12 = 138543874;
      v13 = v10;
      v14 = 2112;
      v15 = v11;
      v16 = 2112;
      v17 = v5;
      _os_log_impl(&dword_2218F0000, v9, OS_LOG_TYPE_ERROR, "%{public}@Failed to remotely add accessories using primary accessory model %@: %@", (uint8_t *)&v12, 0x20u);

    }
    objc_autoreleasePoolPop(v7);
    objc_msgSend(*(id *)(a1 + 48), "rejectWithError:", v5);
  }
  else
  {
    objc_msgSend(*(id *)(a1 + 48), "fulfillWithValue:", 0);
  }

}

void __65__HMDHome__addAccessoriesUsingPairedAccessoryServerInfo_message___block_invoke_1167(uint64_t a1, int a2)
{
  void *v4;
  id v5;
  NSObject *v6;
  _BOOL4 v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  int v12;
  void *v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  v4 = (void *)MEMORY[0x227676638]();
  v5 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v6 = objc_claimAutoreleasedReturnValue();
  v7 = os_log_type_enabled(v6, OS_LOG_TYPE_INFO);
  if (a2)
  {
    if (v7)
    {
      HMFGetLogIdentifier();
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      v12 = 138543362;
      v13 = v8;
      _os_log_impl(&dword_2218F0000, v6, OS_LOG_TYPE_INFO, "%{public}@Uncertified ECB lock detected, user canceled pairing", (uint8_t *)&v12, 0xCu);

    }
    objc_autoreleasePoolPop(v4);
    v9 = *(void **)(a1 + 40);
    objc_msgSend(MEMORY[0x24BDD1540], "hmErrorWithCode:", 23);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "rejectWithError:", v10);

  }
  else
  {
    if (v7)
    {
      HMFGetLogIdentifier();
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      v12 = 138543362;
      v13 = v11;
      _os_log_impl(&dword_2218F0000, v6, OS_LOG_TYPE_INFO, "%{public}@Uncertified ECB lock detected, user continued pairing", (uint8_t *)&v12, 0xCu);

    }
    objc_autoreleasePoolPop(v4);
    objc_msgSend(*(id *)(a1 + 40), "fulfillWithNoValue");
  }
}

uint64_t __49__HMDHome__addOwnerToNewlyPairedAccessoryServer___block_invoke(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  id v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  id v14;
  void *v15;
  uint64_t v17;
  void *v18;
  id v19;

  v3 = a2;
  objc_msgSend(*(id *)(a1 + 32), "owner");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "pairingIdentity");
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  v6 = objc_alloc(MEMORY[0x24BE1BBB0]);
  objc_msgSend(v5, "identifier");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "publicKey");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = (void *)objc_msgSend(v6, "initWithIdentifier:publicKey:privateKey:permissions:", v7, v8, 0, 1);

  v19 = 0;
  objc_msgSend(MEMORY[0x24BE3F180], "futureWithPromise:", &v19);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v11 = *(void **)(a1 + 40);
  objc_msgSend(*(id *)(a1 + 32), "workQueue");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v19, "errorOnlyResolverBlock");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "addPairing:completionQueue:completionHandler:", v9, v12, v13);

  v14 = v10;
  if (v14)
  {
    v15 = v14;

    return 3;
  }
  else
  {
    v17 = _HMFPreconditionFailure();
    return __60__HMDHome__readDataNeededImmediatelyAfterPairing_intoModel___block_invoke(v17, v18);
  }
}

uint64_t __60__HMDHome__readDataNeededImmediatelyAfterPairing_intoModel___block_invoke(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  id v8;
  void *v9;
  void *v10;
  id v11;
  void *v12;
  void *v13;
  id v14;
  id v15;
  uint64_t v16;
  void *v17;
  id v18;
  void *v19;
  uint64_t v21;
  void *v22;
  _QWORD v23[4];
  id v24;
  id v25;
  uint64_t v26;
  id v27;
  _QWORD v28[4];
  id v29;
  id v30;
  _QWORD v31[4];
  id v32;
  id v33;
  _QWORD v34[4];
  id v35;

  v3 = a2;
  objc_msgSend(v3, "fetchAccessorySupportsPinCodes");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = MEMORY[0x24BDAC760];
  v34[0] = MEMORY[0x24BDAC760];
  v34[1] = 3221225472;
  v34[2] = __60__HMDHome__readDataNeededImmediatelyAfterPairing_intoModel___block_invoke_2;
  v34[3] = &unk_24E776608;
  v35 = *(id *)(a1 + 32);
  objc_msgSend(v4, "then:", v34);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "ignoreOutcome");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v31[0] = v5;
  v31[1] = 3221225472;
  v31[2] = __60__HMDHome__readDataNeededImmediatelyAfterPairing_intoModel___block_invoke_3;
  v31[3] = &unk_24E799360;
  v8 = v3;
  v32 = v8;
  v33 = *(id *)(a1 + 32);
  objc_msgSend(v7, "then:", v31);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "ignoreOutcome");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v28[0] = v5;
  v28[1] = 3221225472;
  v28[2] = __60__HMDHome__readDataNeededImmediatelyAfterPairing_intoModel___block_invoke_5;
  v28[3] = &unk_24E799360;
  v11 = v8;
  v29 = v11;
  v30 = *(id *)(a1 + 32);
  objc_msgSend(v10, "then:", v28);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v12, "ignoreOutcome");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  v23[0] = v5;
  v23[1] = 3221225472;
  v23[2] = __60__HMDHome__readDataNeededImmediatelyAfterPairing_intoModel___block_invoke_8;
  v23[3] = &unk_24E797028;
  v14 = v11;
  v24 = v14;
  v15 = *(id *)(a1 + 32);
  v16 = *(_QWORD *)(a1 + 40);
  v17 = *(void **)(a1 + 48);
  v25 = v15;
  v26 = v16;
  v27 = v17;
  objc_msgSend(v13, "then:", v23);
  v18 = (id)objc_claimAutoreleasedReturnValue();
  if (v18)
  {
    v19 = v18;

    return 3;
  }
  else
  {
    v21 = _HMFPreconditionFailure();
    return __60__HMDHome__readDataNeededImmediatelyAfterPairing_intoModel___block_invoke_2(v21, v22);
  }
}

uint64_t __60__HMDHome__readDataNeededImmediatelyAfterPairing_intoModel___block_invoke_2(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  char v5;

  v3 = a2;
  objc_msgSend(*(id *)(a1 + 32), "supportsMatterAccessCode");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = HMFEqualObjects();

  if ((v5 & 1) == 0)
    objc_msgSend(*(id *)(a1 + 32), "setSupportsMatterAccessCode:", v3);

  return 1;
}

uint64_t __60__HMDHome__readDataNeededImmediatelyAfterPairing_intoModel___block_invoke_3(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  void *v6;
  uint64_t v8;
  _QWORD v9[4];
  id v10;

  v3 = a2;
  objc_msgSend(*(id *)(a1 + 32), "fetchAccessorySupportsTapToUnlock");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v9[0] = MEMORY[0x24BDAC760];
  v9[1] = 3221225472;
  v9[2] = __60__HMDHome__readDataNeededImmediatelyAfterPairing_intoModel___block_invoke_4;
  v9[3] = &unk_24E776608;
  v10 = *(id *)(a1 + 40);
  objc_msgSend(v4, "then:", v9);
  v5 = (id)objc_claimAutoreleasedReturnValue();
  if (v5)
  {
    v6 = v5;

    return 3;
  }
  else
  {
    v8 = _HMFPreconditionFailure();
    return __60__HMDHome__readDataNeededImmediatelyAfterPairing_intoModel___block_invoke_5(v8);
  }
}

uint64_t __60__HMDHome__readDataNeededImmediatelyAfterPairing_intoModel___block_invoke_5(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  void *v6;
  uint64_t v7;
  uint64_t v9;
  _QWORD v10[4];
  id v11;
  id v12;

  v3 = a2;
  if (!_os_feature_enabled_impl())
  {
    v7 = 1;
    goto LABEL_5;
  }
  objc_msgSend(*(id *)(a1 + 32), "fetchFeatureMapForSupportingWeekAndYearDaySchedule");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v10[0] = MEMORY[0x24BDAC760];
  v10[1] = 3221225472;
  v10[2] = __60__HMDHome__readDataNeededImmediatelyAfterPairing_intoModel___block_invoke_6;
  v10[3] = &unk_24E79B1E8;
  v11 = *(id *)(a1 + 40);
  v12 = *(id *)(a1 + 32);
  objc_msgSend(v4, "then:", v10);
  v5 = (id)objc_claimAutoreleasedReturnValue();
  if (v5)
  {
    v6 = v5;
    v7 = 3;

LABEL_5:
    return v7;
  }
  v9 = _HMFPreconditionFailure();
  return __60__HMDHome__readDataNeededImmediatelyAfterPairing_intoModel___block_invoke_8(v9);
}

uint64_t __60__HMDHome__readDataNeededImmediatelyAfterPairing_intoModel___block_invoke_8(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  id v10;
  uint64_t v11;
  void *v12;
  id v13;
  void *v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  _QWORD v19[4];
  id v20;
  id v21;
  uint64_t v22;
  id v23;
  _QWORD v24[4];
  id v25;
  id v26;
  _QWORD v27[4];
  id v28;

  v3 = a2;
  if (!_os_feature_enabled_impl()
    || (isInternalBuild() & 1) == 0
    && !CFPreferencesGetAppBooleanValue(CFSTR("UWBUnlock"), CFSTR("/Library/Managed Preferences/mobile/com.apple.homed.plist"), 0))
  {
    v15 = 1;
    goto LABEL_7;
  }
  objc_msgSend(*(id *)(a1 + 32), "fetchReaderGroupSubIdentifier");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = MEMORY[0x24BDAC760];
  v27[0] = MEMORY[0x24BDAC760];
  v27[1] = 3221225472;
  v27[2] = __60__HMDHome__readDataNeededImmediatelyAfterPairing_intoModel___block_invoke_9;
  v27[3] = &unk_24E776630;
  v28 = *(id *)(a1 + 40);
  objc_msgSend(v4, "then:", v27);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "ignoreOutcome");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v24[0] = v5;
  v24[1] = 3221225472;
  v24[2] = __60__HMDHome__readDataNeededImmediatelyAfterPairing_intoModel___block_invoke_10;
  v24[3] = &unk_24E799360;
  v25 = *(id *)(a1 + 32);
  v26 = *(id *)(a1 + 40);
  objc_msgSend(v7, "then:", v24);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "ignoreOutcome");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v19[0] = v5;
  v19[1] = 3221225472;
  v19[2] = __60__HMDHome__readDataNeededImmediatelyAfterPairing_intoModel___block_invoke_12;
  v19[3] = &unk_24E776310;
  v20 = *(id *)(a1 + 32);
  v10 = *(id *)(a1 + 40);
  v11 = *(_QWORD *)(a1 + 48);
  v12 = *(void **)(a1 + 56);
  v21 = v10;
  v22 = v11;
  v23 = v12;
  objc_msgSend(v9, "then:", v19);
  v13 = (id)objc_claimAutoreleasedReturnValue();
  if (v13)
  {
    v14 = v13;
    v15 = 3;

LABEL_7:
    return v15;
  }
  v17 = _HMFPreconditionFailure();
  return __60__HMDHome__readDataNeededImmediatelyAfterPairing_intoModel___block_invoke_9(v17, v18);
}

uint64_t __60__HMDHome__readDataNeededImmediatelyAfterPairing_intoModel___block_invoke_9(uint64_t a1, uint64_t a2)
{
  objc_msgSend(*(id *)(a1 + 32), "setMatCredRGSI:", a2);
  return 1;
}

uint64_t __60__HMDHome__readDataNeededImmediatelyAfterPairing_intoModel___block_invoke_10(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  void *v6;
  uint64_t v8;
  _QWORD v9[4];
  id v10;

  v3 = a2;
  objc_msgSend(*(id *)(a1 + 32), "fetchAccessorySupportsAliroProvisioning");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v9[0] = MEMORY[0x24BDAC760];
  v9[1] = 3221225472;
  v9[2] = __60__HMDHome__readDataNeededImmediatelyAfterPairing_intoModel___block_invoke_11;
  v9[3] = &unk_24E776608;
  v10 = *(id *)(a1 + 40);
  objc_msgSend(v4, "then:", v9);
  v5 = (id)objc_claimAutoreleasedReturnValue();
  if (v5)
  {
    v6 = v5;

    return 3;
  }
  else
  {
    v8 = _HMFPreconditionFailure();
    return __60__HMDHome__readDataNeededImmediatelyAfterPairing_intoModel___block_invoke_12(v8);
  }
}

uint64_t __60__HMDHome__readDataNeededImmediatelyAfterPairing_intoModel___block_invoke_12(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  uint64_t v6;
  void *v7;
  id v8;
  void *v9;
  id *v11;
  void *v12;
  _QWORD v13[4];
  id v14;
  uint64_t v15;
  id v16;

  v3 = a2;
  objc_msgSend(*(id *)(a1 + 32), "fetchAccessorySupportsAliroBLEUWB");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v13[0] = MEMORY[0x24BDAC760];
  v13[1] = 3221225472;
  v13[2] = __60__HMDHome__readDataNeededImmediatelyAfterPairing_intoModel___block_invoke_13;
  v13[3] = &unk_24E776680;
  v5 = *(id *)(a1 + 40);
  v6 = *(_QWORD *)(a1 + 48);
  v7 = *(void **)(a1 + 56);
  v14 = v5;
  v15 = v6;
  v16 = v7;
  objc_msgSend(v4, "then:", v13);
  v8 = (id)objc_claimAutoreleasedReturnValue();
  if (v8)
  {
    v9 = v8;

    return 3;
  }
  else
  {
    v11 = (id *)_HMFPreconditionFailure();
    return __60__HMDHome__readDataNeededImmediatelyAfterPairing_intoModel___block_invoke_13(v11, v12);
  }
}

uint64_t __60__HMDHome__readDataNeededImmediatelyAfterPairing_intoModel___block_invoke_13(id *a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  NSObject *v6;
  void *v7;
  void (**v8)(_QWORD, _QWORD);
  void *v9;
  id v10;
  id v11;
  void *v12;
  int8x16_t v14;
  _QWORD v15[4];
  id v16;
  int8x16_t v17;
  uint8_t buf[4];
  void *v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  v3 = a2;
  v4 = (void *)MEMORY[0x227676638](objc_msgSend(a1[4], "setSupportsMatCredACB:", v3));
  v5 = a1[5];
  HMFGetOSLogHandle();
  v6 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543362;
    v19 = v7;
    _os_log_impl(&dword_2218F0000, v6, OS_LOG_TYPE_INFO, "%{public}@Checking if this matter lock is MFi approved", buf, 0xCu);

  }
  objc_autoreleasePoolPop(v4);
  objc_msgSend(a1[5], "matterCapabilitiesFactory");
  v8 = (void (**)(_QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
  v8[2](v8, 0);
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  v15[0] = MEMORY[0x24BDAC760];
  v15[1] = 3221225472;
  v15[2] = __60__HMDHome__readDataNeededImmediatelyAfterPairing_intoModel___block_invoke_1191;
  v15[3] = &unk_24E776658;
  v16 = a1[6];
  v14 = *((int8x16_t *)a1 + 2);
  v10 = (id)v14.i64[0];
  v17 = vextq_s8(v14, v14, 8uLL);
  objc_msgSend(v9, "then:", v15);
  v11 = (id)objc_claimAutoreleasedReturnValue();
  if (!v11)
    _HMFPreconditionFailure();
  v12 = v11;

  return 3;
}

uint64_t __60__HMDHome__readDataNeededImmediatelyAfterPairing_intoModel___block_invoke_1191(id *a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  id v9;
  NSObject *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  int v16;
  void *v17;
  __int16 v18;
  void *v19;
  __int16 v20;
  void *v21;
  __int16 v22;
  int v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v3 = a2;
  objc_msgSend(a1[4], "vendorID");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = (int)objc_msgSend(v4, "intValue");
  objc_msgSend(a1[4], "productID");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = objc_msgSend(v3, "isCapabilityAllowed:vendorID:productID:", 0, v5, (int)objc_msgSend(v6, "intValue"));

  v8 = (void *)MEMORY[0x227676638]();
  v9 = a1[5];
  HMFGetOSLogHandle();
  v10 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(a1[4], "vendorID");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(a1[4], "productID");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    v16 = 138544130;
    v17 = v11;
    v18 = 2112;
    v19 = v12;
    v20 = 2112;
    v21 = v13;
    v22 = 1024;
    v23 = v7;
    _os_log_impl(&dword_2218F0000, v10, OS_LOG_TYPE_INFO, "%{public}@ECB lock with VID %@, PID %@ is certified: %{BOOL}d", (uint8_t *)&v16, 0x26u);

  }
  objc_autoreleasePoolPop(v8);
  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithBool:", v7);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(a1[6], "setMfiCertifiedACWG:", v14);

  return 1;
}

uint64_t __60__HMDHome__readDataNeededImmediatelyAfterPairing_intoModel___block_invoke_11(uint64_t a1, uint64_t a2)
{
  objc_msgSend(*(id *)(a1 + 32), "setSupportsMatCredACP:", a2);
  return 1;
}

uint64_t __60__HMDHome__readDataNeededImmediatelyAfterPairing_intoModel___block_invoke_6(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  char v6;
  void *v7;
  void *v8;
  char v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  id v19;
  void *v20;
  _QWORD v22[4];
  id v23;
  _QWORD v24[3];

  v24[2] = *MEMORY[0x24BDAC8D0];
  v3 = a2;
  objc_msgSend(MEMORY[0x24BE4EFA0], "doorLockFeatureMapSupportsWeekDaySchedule:", v3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 32), "supportsMatterWeekDaySchedule");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = HMFEqualObjects();

  if ((v6 & 1) == 0)
    objc_msgSend(*(id *)(a1 + 32), "setSupportsMatterWeekDaySchedule:", v4);
  objc_msgSend(MEMORY[0x24BE4EFA0], "doorLockFeatureMapSupportsYearDaySchedule:", v3);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 32), "supportsMatterYearDaySchedule");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = HMFEqualObjects();

  if ((v9 & 1) == 0)
    objc_msgSend(*(id *)(a1 + 32), "setSupportsMatterYearDaySchedule:", v7);
  v10 = (void *)MEMORY[0x24BE3F180];
  v11 = *(void **)(a1 + 40);
  objc_msgSend(MEMORY[0x24BE3F178], "untrackedPlaceholderFlow");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "numberOfWeekDaySchedulesSupportedWithFlow:", v12);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  v24[0] = v13;
  v14 = *(void **)(a1 + 40);
  objc_msgSend(MEMORY[0x24BE3F178], "untrackedPlaceholderFlow");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v14, "numberOfYearDaySchedulesSupportedWithFlow:", v15);
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  v24[1] = v16;
  objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", v24, 2);
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "allSettled:", v17);
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  v22[0] = MEMORY[0x24BDAC760];
  v22[1] = 3221225472;
  v22[2] = __60__HMDHome__readDataNeededImmediatelyAfterPairing_intoModel___block_invoke_7;
  v22[3] = &unk_24E797000;
  v23 = *(id *)(a1 + 32);
  objc_msgSend(v18, "then:", v22);
  v19 = (id)objc_claimAutoreleasedReturnValue();
  if (!v19)
    _HMFPreconditionFailure();
  v20 = v19;

  return 3;
}

uint64_t __60__HMDHome__readDataNeededImmediatelyAfterPairing_intoModel___block_invoke_7(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  id v6;
  void *v7;
  void *v8;
  id v9;
  void *v10;
  char v11;
  void *v12;
  char v13;

  v3 = a2;
  objc_msgSend(v3, "objectAtIndexedSubscript:", 0);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v5 = v4;
  else
    v5 = 0;
  v6 = v5;

  objc_msgSend(v3, "objectAtIndexedSubscript:", 1);
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v8 = v7;
  else
    v8 = 0;
  v9 = v8;

  if (v6)
  {
    objc_msgSend(*(id *)(a1 + 32), "matterWeekDayScheduleCapacity");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v11 = HMFEqualObjects();

    if ((v11 & 1) == 0)
      objc_msgSend(*(id *)(a1 + 32), "setMatterWeekDayScheduleCapacity:", v6);
    objc_msgSend(*(id *)(a1 + 32), "matterYearDayScheduleCapacity");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    v13 = HMFEqualObjects();

    if ((v13 & 1) == 0)
      objc_msgSend(*(id *)(a1 + 32), "setMatterYearDayScheduleCapacity:", v9);
  }

  return 1;
}

uint64_t __60__HMDHome__readDataNeededImmediatelyAfterPairing_intoModel___block_invoke_4(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  char v5;

  v3 = a2;
  objc_msgSend(*(id *)(a1 + 32), "supportsMatterWalletKey");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = HMFEqualObjects();

  if ((v5 & 1) == 0)
    objc_msgSend(*(id *)(a1 + 32), "setSupportsMatterWalletKey:", v3);

  return 1;
}

id __57__HMDHome__configureTTUAndUWBOnAccessory_accessoryModel___block_invoke(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  void *v9;
  id v10;
  void *v11;
  void *v12;
  id v13;
  void *v14;
  _QWORD v16[5];
  id v17;
  id v18;
  _QWORD v19[4];
  id v20;
  uint64_t v21;
  id v22;
  id v23;

  v3 = a2;
  objc_msgSend(*(id *)(a1 + 32), "nfcReaderKeyManager");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "fetchOrCreateReaderKeyForPairingWithFlow:", *(_QWORD *)(a1 + 40));
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = MEMORY[0x24BDAC760];
  v19[0] = MEMORY[0x24BDAC760];
  v19[1] = 3221225472;
  v19[2] = __57__HMDHome__configureTTUAndUWBOnAccessory_accessoryModel___block_invoke_2;
  v19[3] = &unk_24E776548;
  v7 = *(id *)(a1 + 48);
  v8 = *(_QWORD *)(a1 + 32);
  v9 = *(void **)(a1 + 40);
  v20 = v7;
  v21 = v8;
  v22 = v9;
  v10 = v3;
  v23 = v10;
  objc_msgSend(v5, "flatMap:", v19);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v16[0] = v6;
  v16[1] = 3221225472;
  v16[2] = __57__HMDHome__configureTTUAndUWBOnAccessory_accessoryModel___block_invoke_1177;
  v16[3] = &unk_24E7765B8;
  v12 = *(void **)(a1 + 40);
  v16[4] = *(_QWORD *)(a1 + 32);
  v17 = v12;
  v18 = v10;
  v13 = v10;
  objc_msgSend(v11, "flatMap:", v16);
  v14 = (void *)objc_claimAutoreleasedReturnValue();

  return v14;
}

id __57__HMDHome__configureTTUAndUWBOnAccessory_accessoryModel___block_invoke_2(id *a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  void *v14;
  void *v15;
  void *v16;
  id v17;
  NSObject *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  id v26;
  id v27;
  id v28;
  void *v29;
  void *v30;
  id v31;
  NSObject *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  _QWORD v42[4];
  id v43;
  id v44;
  id v45;
  id v46;
  uint8_t buf[4];
  void *v48;
  __int16 v49;
  void *v50;
  __int16 v51;
  void *v52;
  __int16 v53;
  void *v54;
  __int16 v55;
  void *v56;
  uint64_t v57;

  v57 = *MEMORY[0x24BDAC8D0];
  v3 = a2;
  v4 = (void *)objc_opt_new();
  objc_msgSend(v3, "privateKey");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "setReaderPrivateKey:", v5);

  objc_msgSend(v3, "publicKeyExternalRepresentation");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "setReaderPublicKeyExternalRepresentation:", v6);

  objc_msgSend(v3, "publicKey");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  +[HMDNIST256Utilities identifier16BytesForKey:](HMDNIST256Utilities, "identifier16BytesForKey:", v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "setReaderGroupIdentifier:", v8);

  objc_msgSend(a1[4], "supportsMatCredACB");
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  if (v9)
  {
    objc_msgSend(a1[5], "acwgGroupResolvingKey");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "setGroupResolvingKey:", v10);

  }
  objc_msgSend(v4, "readerPrivateKey");
  v11 = objc_claimAutoreleasedReturnValue();
  if (v11)
  {
    v12 = (void *)v11;
    objc_msgSend(v4, "readerPublicKeyExternalRepresentation");
    v13 = objc_claimAutoreleasedReturnValue();
    if (v13)
    {
      v14 = (void *)v13;
      objc_msgSend(v4, "readerGroupIdentifier");
      v15 = (void *)objc_claimAutoreleasedReturnValue();

      if (v15)
      {
        v16 = (void *)MEMORY[0x227676638]();
        v17 = a1[5];
        HMFGetOSLogHandle();
        v18 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
        {
          HMFGetLogIdentifier();
          v41 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(a1[6], "UUID");
          v19 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v4, "readerPublicKeyExternalRepresentation");
          v39 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v39, "hmf_hexadecimalRepresentation");
          v20 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v4, "readerGroupIdentifier");
          v40 = v16;
          v38 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v38, "hmf_hexadecimalRepresentation");
          v21 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v4, "groupResolvingKey");
          v22 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v22, "hmf_hexadecimalRepresentation");
          v23 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138544386;
          v48 = v41;
          v49 = 2112;
          v50 = v19;
          v51 = 2112;
          v52 = v20;
          v53 = 2112;
          v54 = v21;
          v55 = 2112;
          v56 = v23;
          _os_log_impl(&dword_2218F0000, v18, OS_LOG_TYPE_INFO, "%{public}@[Flow: %@] Setting reader config on lock. RPK: %@, RGI: %@, GRK: %@", buf, 0x34u);

          v16 = v40;
        }

        objc_autoreleasePoolPop(v16);
        objc_msgSend(a1[7], "setOrReadReaderConfig:flow:", v4, a1[6]);
        v24 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v24, "naFuture");
        v25 = (void *)objc_claimAutoreleasedReturnValue();
        v42[0] = MEMORY[0x24BDAC760];
        v42[1] = 3221225472;
        v42[2] = __57__HMDHome__configureTTUAndUWBOnAccessory_accessoryModel___block_invoke_1173;
        v42[3] = &unk_24E776520;
        v26 = v4;
        v27 = a1[5];
        v28 = a1[6];
        v43 = v26;
        v44 = v27;
        v45 = v28;
        v46 = a1[4];
        objc_msgSend(v25, "flatMap:", v42);
        v29 = (void *)objc_claimAutoreleasedReturnValue();

        goto LABEL_13;
      }
    }
    else
    {

    }
  }
  v30 = (void *)MEMORY[0x227676638]();
  v31 = a1[5];
  HMFGetOSLogHandle();
  v32 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
  {
    HMFGetLogIdentifier();
    v33 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(a1[6], "UUID");
    v34 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "readerPublicKeyExternalRepresentation");
    v35 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "readerGroupIdentifier");
    v36 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138544130;
    v48 = v33;
    v49 = 2112;
    v50 = v34;
    v51 = 2112;
    v52 = v35;
    v53 = 2112;
    v54 = v36;
    _os_log_impl(&dword_2218F0000, v32, OS_LOG_TYPE_ERROR, "%{public}@[Flow: %@] User is missing either readerPrivateKey or readerPublicKey or readerGroupIdentifier. readerPublicKeyExternalRepresentation: %@, readerGroupIdentifier: %@", buf, 0x2Au);

  }
  objc_autoreleasePoolPop(v30);
  objc_msgSend(MEMORY[0x24BE6B608], "futureWithNoResult");
  v29 = (void *)objc_claimAutoreleasedReturnValue();
LABEL_13:

  return v29;
}

id __57__HMDHome__configureTTUAndUWBOnAccessory_accessoryModel___block_invoke_1177(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  _QWORD v8[5];
  id v9;
  id v10;

  objc_msgSend(*(id *)(a1 + 32), "users");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "na_filter:", &__block_literal_global_1180);
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  v8[0] = MEMORY[0x24BDAC760];
  v8[1] = 3221225472;
  v8[2] = __57__HMDHome__configureTTUAndUWBOnAccessory_accessoryModel___block_invoke_3;
  v8[3] = &unk_24E7927D8;
  v4 = *(void **)(a1 + 40);
  v8[4] = *(_QWORD *)(a1 + 32);
  v9 = v4;
  v10 = *(id *)(a1 + 48);
  objc_msgSend(v3, "na_map:", v8);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "combineAllFutures");
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  return v6;
}

id __57__HMDHome__configureTTUAndUWBOnAccessory_accessoryModel___block_invoke_3(id *a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  id v7;
  NSObject *v8;
  NSObject *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  _QWORD v19[4];
  id v20;
  id v21;
  id v22;
  uint8_t buf[4];
  void *v24;
  __int16 v25;
  void *v26;
  __int16 v27;
  id v28;
  __int16 v29;
  void *v30;
  __int16 v31;
  void *v32;
  uint64_t v33;

  v33 = *MEMORY[0x24BDAC8D0];
  v3 = a2;
  objc_msgSend(v3, "uniqueIDForAccessories");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "acwgIssuerPublicKeyExternalRepresentation");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = (void *)MEMORY[0x227676638]();
  v7 = a1[4];
  HMFGetOSLogHandle();
  v8 = objc_claimAutoreleasedReturnValue();
  v9 = v8;
  if (v4 && v5)
  {
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(a1[5], "UUID");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543874;
      v24 = v10;
      v25 = 2112;
      v26 = v11;
      v27 = 2112;
      v28 = v3;
      _os_log_impl(&dword_2218F0000, v9, OS_LOG_TYPE_INFO, "%{public}@[Flow: %@] Configuring Issuer Key for user: %@", buf, 0x20u);

    }
    objc_autoreleasePoolPop(v6);
    objc_msgSend(a1[6], "findOrAddUserWithUniqueID:flow:", v4, a1[5]);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "naFuture");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    v19[0] = MEMORY[0x24BDAC760];
    v19[1] = 3221225472;
    v19[2] = __57__HMDHome__configureTTUAndUWBOnAccessory_accessoryModel___block_invoke_1181;
    v19[3] = &unk_24E776590;
    v20 = a1[6];
    v21 = v5;
    v22 = a1[5];
    objc_msgSend(v13, "flatMap:", v19);
    v14 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(a1[5], "UUID");
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v3, "uuid");
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138544386;
      v24 = v15;
      v25 = 2112;
      v26 = v16;
      v27 = 2112;
      v28 = v17;
      v29 = 2112;
      v30 = v4;
      v31 = 2112;
      v32 = v5;
      _os_log_impl(&dword_2218F0000, v9, OS_LOG_TYPE_ERROR, "%{public}@[Flow: %@] User is missing either uniqueIDForAccessories or issuerPublicKey. User: %@, uniqueIDForAccessories: %@, issuerPublicKey: %@", buf, 0x34u);

    }
    objc_autoreleasePoolPop(v6);
    objc_msgSend(MEMORY[0x24BE6B608], "futureWithNoResult");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
  }

  return v14;
}

id __57__HMDHome__configureTTUAndUWBOnAccessory_accessoryModel___block_invoke_1181(uint64_t a1, void *a2)
{
  void *v2;
  void *v3;

  objc_msgSend(*(id *)(a1 + 32), "addIssuerKeyData:forUserIndex:isUnifiedAccess:flow:", *(_QWORD *)(a1 + 40), objc_msgSend(a2, "newUserSlot"), 0, *(_QWORD *)(a1 + 48));
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "naFuture");
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  return v3;
}

uint64_t __57__HMDHome__configureTTUAndUWBOnAccessory_accessoryModel___block_invoke_2_1178(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "isRestrictedGuest") ^ 1;
}

id __57__HMDHome__configureTTUAndUWBOnAccessory_accessoryModel___block_invoke_1173(id *a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  void *v6;
  void *v7;
  int v8;
  void *v9;
  void *v10;
  int v11;
  void *v12;
  void *v13;
  char v14;
  void *v15;
  id v16;
  NSObject *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v29;
  void *v30;
  void *v31;
  uint8_t buf[4];
  void *v33;
  __int16 v34;
  void *v35;
  __int16 v36;
  void *v37;
  __int16 v38;
  void *v39;
  __int16 v40;
  void *v41;
  uint64_t v42;

  v42 = *MEMORY[0x24BDAC8D0];
  v3 = a2;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v4 = v3;
  else
    v4 = 0;
  v5 = v4;

  if (v5)
  {
    objc_msgSend(v3, "readerPublicKeyExternalRepresentation");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(a1[4], "readerPublicKeyExternalRepresentation");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = HMFEqualObjects();

    if (v8
      && (objc_msgSend(v3, "readerGroupIdentifier"),
          v9 = (void *)objc_claimAutoreleasedReturnValue(),
          objc_msgSend(a1[4], "readerGroupIdentifier"),
          v10 = (void *)objc_claimAutoreleasedReturnValue(),
          v11 = HMFEqualObjects(),
          v10,
          v9,
          v11))
    {
      objc_msgSend(v3, "groupResolvingKey");
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(a1[4], "groupResolvingKey");
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      v14 = HMFEqualObjects();

      if ((v14 & 1) != 0)
        goto LABEL_13;
    }
    else
    {

    }
    v15 = (void *)MEMORY[0x227676638]();
    v16 = a1[5];
    HMFGetOSLogHandle();
    v17 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(a1[6], "UUID");
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v3, "readerPublicKeyExternalRepresentation");
      v30 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v30, "hmf_hexadecimalRepresentation");
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v3, "readerGroupIdentifier");
      v29 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v29, "hmf_hexadecimalRepresentation");
      v31 = v15;
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v3, "groupResolvingKey");
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v22, "hmf_hexadecimalRepresentation");
      v23 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138544386;
      v33 = v18;
      v34 = 2112;
      v35 = v19;
      v36 = 2112;
      v37 = v20;
      v38 = 2112;
      v39 = v21;
      v40 = 2112;
      v41 = v23;
      _os_log_impl(&dword_2218F0000, v17, OS_LOG_TYPE_INFO, "%{public}@[Flow: %@] Found existing reader config on lock. RPK: %@, RGI: %@, GRK: %@", buf, 0x34u);

      v15 = v31;
    }

    objc_autoreleasePoolPop(v15);
    objc_msgSend(v3, "readerPublicKeyExternalRepresentation");
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(a1[7], "setPreexistingMatCredRPK:", v24);

    objc_msgSend(v3, "readerGroupIdentifier");
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(a1[7], "setPreexistingMatCredRGI:", v25);

    objc_msgSend(v3, "groupResolvingKey");
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(a1[7], "setPreexistingMatCredGRK:", v26);

  }
LABEL_13:
  objc_msgSend(MEMORY[0x24BE6B608], "futureWithNoResult");
  v27 = (void *)objc_claimAutoreleasedReturnValue();

  return v27;
}

uint64_t __51__HMDHome__removeFailedAddWithAccessoryServerInfo___block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  id v5;
  void *v6;
  uint64_t v8;

  v2 = *(void **)(a1 + 32);
  objc_msgSend(*(id *)(a1 + 40), "server");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 32), "currentUser");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "_removeUserFromNewlyPairedAccessoryServer:user:", v3, v4);
  v5 = (id)objc_claimAutoreleasedReturnValue();
  if (v5)
  {
    v6 = v5;

    return 3;
  }
  else
  {
    v8 = _HMFPreconditionFailure();
    return __51__HMDHome__removeFailedAddWithAccessoryServerInfo___block_invoke_2(v8);
  }
}

uint64_t __51__HMDHome__removeFailedAddWithAccessoryServerInfo___block_invoke_2(uint64_t a1)
{
  void *v2;
  void *v3;

  objc_msgSend(*(id *)(a1 + 32), "networkCredential");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "clientIdentifier");
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  if (v3)
    objc_msgSend(*(id *)(a1 + 40), "_removeClientConfigurationWithIdentifier:", v3);

  return 1;
}

uint64_t __69__HMDHome__cancelPairingWithAccessoryUUID_context_completionHandler___block_invoke(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(result + 16))(result, 0, 0);
  return result;
}

uint64_t __69__HMDHome__cancelPairingWithAccessoryUUID_context_completionHandler___block_invoke_1162(uint64_t a1, void *a2)
{
  void *v2;
  void *v3;
  uint64_t v4;

  v2 = *(void **)(a1 + 32);
  objc_msgSend(a2, "accessoryUUID");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v2, "isEqual:", v3);

  return v4;
}

void __40__HMDHome__setupCodeProviderForMessage___block_invoke(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  id WeakRetained;
  void *v11;
  NSObject *v12;
  void *v13;
  _QWORD block[5];
  id v15;
  id v16;
  id v17;
  id v18;

  v7 = a2;
  v8 = a3;
  v9 = a4;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v11 = WeakRetained;
  if (WeakRetained)
  {
    objc_msgSend(WeakRetained, "workQueue");
    v12 = objc_claimAutoreleasedReturnValue();
    block[0] = MEMORY[0x24BDAC760];
    block[1] = 3221225472;
    block[2] = __40__HMDHome__setupCodeProviderForMessage___block_invoke_2;
    block[3] = &unk_24E799A68;
    block[4] = v11;
    v15 = v7;
    v16 = v8;
    v18 = v9;
    v17 = *(id *)(a1 + 32);
    dispatch_async(v12, block);

  }
  else
  {
    objc_msgSend(MEMORY[0x24BDD1540], "hmErrorWithCode:", 2);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    (*((void (**)(id, _QWORD, _QWORD, void *))v9 + 2))(v9, 0, 0, v13);

  }
}

void __40__HMDHome__setupCodeProviderForMessage___block_invoke_2(id *a1)
{
  void *v2;
  void *v3;
  uint64_t v4;
  void *v5;
  BOOL v6;
  id v7;
  void *v8;
  id v9;
  NSObject *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  id v16;
  NSObject *v17;
  void *v18;
  void *v19;
  id v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  id v28;
  NSObject *v29;
  _BOOL4 v30;
  void *v31;
  id v32;
  id v33;
  void *v34;
  id v35;
  id v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  char v42;
  void *v43;
  id v44;
  NSObject *v45;
  void *v46;
  void *v47;
  void *v48;
  id v49;
  void *v50;
  void *v51;
  id v52;
  NSObject *v53;
  void *v54;
  void *v55;
  id v56;
  NSObject *v57;
  void *v58;
  id v59;
  id v60;
  void *v61;
  void *v62;
  void *v63;
  void *context;
  _QWORD v65[5];
  id v66;
  id v67;
  const __CFString *v68;
  id v69;
  uint8_t buf[4];
  void *v71;
  __int16 v72;
  void *v73;
  __int16 v74;
  void *v75;
  __int16 v76;
  void *v77;
  uint64_t v78;

  v78 = *MEMORY[0x24BDAC8D0];
  objc_msgSend(a1[4], "homeManager");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(a1[5], "uuid");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(a1[5], "name");
  v4 = objc_claimAutoreleasedReturnValue();
  v5 = (void *)v4;
  if (v3)
    v6 = v4 == 0;
  else
    v6 = 1;
  if (v6 || (v7 = a1[6]) == 0)
  {
    v15 = (void *)MEMORY[0x227676638]();
    v16 = a1[4];
    HMFGetOSLogHandle();
    v17 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v3, "UUIDString");
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543874;
      v71 = v18;
      v72 = 2112;
      v73 = v5;
      v74 = 2112;
      v75 = v19;
      _os_log_impl(&dword_2218F0000, v17, OS_LOG_TYPE_INFO, "%{public}@Accessory %@/%@ went away while being added to home", buf, 0x20u);

    }
    objc_autoreleasePoolPop(v15);
    v20 = a1[8];
    objc_msgSend(MEMORY[0x24BDD1540], "hmErrorWithCode:", 4);
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    (*((void (**)(id, _QWORD, _QWORD, void *))v20 + 2))(v20, 0, 0, v21);
  }
  else
  {
    if (objc_msgSend(v7, "isEqualToString:", CFSTR("HMSetupCodeProviderReasonBadPassword")))
    {
      v8 = (void *)MEMORY[0x227676638]();
      v9 = a1[4];
      HMFGetOSLogHandle();
      v10 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        v71 = v11;
        v72 = 2112;
        v73 = v3;
        _os_log_impl(&dword_2218F0000, v10, OS_LOG_TYPE_INFO, "%{public}@Clearing previous password on bad-password error for accessory: %@", buf, 0x16u);

      }
      objc_autoreleasePoolPop(v8);
      objc_msgSend(a1[4], "addPendingAccessorySetupCodes");
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v12, "removeObjectForKey:", v3);

      objc_msgSend(a1[4], "addPendingAccessoryOnboardingSetupPayloadStrings");
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v13, "removeObjectForKey:", v3);

    }
    objc_msgSend(a1[7], "stringForKey:", CFSTR("kAccessoryPairingPasswordKey"));
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    if (v14 && objc_msgSend(a1[7], "isEntitledForSPIAccess"))
    {
      if ((objc_msgSend(a1[6], "isEqualToString:", CFSTR("HMSetupCodeProviderReasonBadPassword")) & 1) != 0)
      {

LABEL_27:
        v43 = (void *)MEMORY[0x227676638]();
        v44 = a1[4];
        HMFGetOSLogHandle();
        v45 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v45, OS_LOG_TYPE_INFO))
        {
          HMFGetLogIdentifier();
          v46 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(a1[7], "stringForKey:", CFSTR("kAccessoryPairingPasswordKey"));
          v47 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v3, "UUIDString");
          v48 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138544130;
          v71 = v46;
          v72 = 2112;
          v73 = v47;
          v74 = 2112;
          v75 = v5;
          v76 = 2112;
          v77 = v48;
          _os_log_impl(&dword_2218F0000, v45, OS_LOG_TYPE_INFO, "%{public}@Provided password %@ incorrect for accessory %@/%@", buf, 0x2Au);

        }
        objc_autoreleasePoolPop(v43);
        v49 = a1[8];
        objc_msgSend(MEMORY[0x24BDD1540], "hmPrivateErrorWithCode:", 2002);
        v21 = (void *)objc_claimAutoreleasedReturnValue();
        (*((void (**)(id, _QWORD, _QWORD, void *))v49 + 2))(v49, 0, 0, v21);
        goto LABEL_17;
      }
      v42 = objc_msgSend(a1[6], "isEqualToString:", CFSTR("HMSetupCodeProviderReasontTimeoutRetry"));

      if ((v42 & 1) != 0)
        goto LABEL_27;
    }
    else
    {

    }
    os_unfair_recursive_lock_lock_with_options();
    v22 = (void *)objc_msgSend(a1[8], "copy");
    v23 = _Block_copy(v22);
    objc_msgSend(*((id *)a1[4] + 102), "setObject:forKeyedSubscript:", v23, v3);

    os_unfair_recursive_lock_unlock();
    if ((objc_msgSend(a1[6], "isEqualToString:", CFSTR("HMSetupCodeProviderReasonInitial")) & 1) != 0)
    {
      objc_msgSend(a1[4], "addPendingAccessorySetupCodes");
      v24 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v24, "objectForKey:", v3);
      v21 = (void *)objc_claimAutoreleasedReturnValue();

      objc_msgSend(a1[4], "addPendingAccessoryOnboardingSetupPayloadStrings");
      v25 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v25, "objectForKeyedSubscript:", v3);
      v26 = (void *)objc_claimAutoreleasedReturnValue();

      v27 = (void *)MEMORY[0x227676638]();
      v28 = a1[4];
      HMFGetOSLogHandle();
      v29 = objc_claimAutoreleasedReturnValue();
      v30 = os_log_type_enabled(v29, OS_LOG_TYPE_INFO);
      if (v21)
      {
        if (v30)
        {
          HMFGetLogIdentifier();
          v31 = (void *)objc_claimAutoreleasedReturnValue();
          v32 = a1[5];
          *(_DWORD *)buf = 138543618;
          v71 = v31;
          v72 = 2112;
          v73 = v32;
          _os_log_impl(&dword_2218F0000, v29, OS_LOG_TYPE_INFO, "%{public}@Providing setupCode for accessory %@ and removing from tracking", buf, 0x16u);

        }
        objc_autoreleasePoolPop(v27);
        (*((void (**)(void))a1[8] + 2))();
      }
      else
      {
        if (v30)
        {
          HMFGetLogIdentifier();
          v50 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543874;
          v71 = v50;
          v72 = 2112;
          v73 = v5;
          v74 = 2112;
          v75 = v3;
          _os_log_impl(&dword_2218F0000, v29, OS_LOG_TYPE_INFO, "%{public}@Accessory %@/%@ prompted for pairing setupCode but did not receive it from HomeUIService", buf, 0x20u);

        }
        objc_autoreleasePoolPop(v27);
        if (objc_msgSend(a1[7], "BOOLForKey:", CFSTR("kAccessorySetupCodeDeferredKey")))
        {
          v51 = (void *)MEMORY[0x227676638]();
          v52 = a1[4];
          HMFGetOSLogHandle();
          v53 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v53, OS_LOG_TYPE_INFO))
          {
            HMFGetLogIdentifier();
            v54 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v3, "UUIDString");
            v55 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 138543874;
            v71 = v54;
            v72 = 2112;
            v73 = v5;
            v74 = 2112;
            v75 = v55;
            _os_log_impl(&dword_2218F0000, v53, OS_LOG_TYPE_INFO, "%{public}@addAccessory request from HomeUIService - waiting for setupCode for accessory %@/%@", buf, 0x20u);

          }
          objc_autoreleasePoolPop(v51);
        }
        else
        {
          objc_msgSend(v2, "accessorySetupManager");
          v61 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(a1[4], "uuid");
          v62 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(a1[7], "proxyConnection");
          v63 = (void *)objc_claimAutoreleasedReturnValue();
          v65[0] = MEMORY[0x24BDAC760];
          v65[1] = 3221225472;
          v65[2] = __40__HMDHome__setupCodeProviderForMessage___block_invoke_1157;
          v65[3] = &unk_24E79AB68;
          v65[4] = a1[4];
          v67 = a1[8];
          v66 = v3;
          objc_msgSend(v61, "launchAccessorySetupHostToRequestSetupCodeForAccessoryWithUUID:accessoryName:homeUUID:clientConnection:completionHandler:", v66, v5, v62, v63, v65);

        }
      }

    }
    else
    {
      v33 = objc_alloc(MEMORY[0x24BE3F1B8]);
      objc_msgSend(a1[4], "uuid");
      v34 = (void *)objc_claimAutoreleasedReturnValue();
      v21 = (void *)objc_msgSend(v33, "initWithTarget:", v34);

      v35 = objc_alloc(MEMORY[0x24BE3F1D0]);
      v36 = a1[6];
      v68 = CFSTR("kAccessorySetupCodeReasonKey");
      v69 = v36;
      objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", &v69, &v68, 1);
      v37 = (void *)objc_claimAutoreleasedReturnValue();
      v38 = (void *)objc_msgSend(v35, "initWithName:qualityOfService:destination:payload:", *MEMORY[0x24BDD5C38], 33, v21, v37);

      objc_msgSend(v2, "accessorySetupManager");
      v39 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v39, "accessorySetupHostClientConnection");
      v40 = (void *)objc_claimAutoreleasedReturnValue();

      if (v40)
      {
        objc_msgSend(v38, "setTransport:", v40);
        objc_msgSend(a1[4], "msgDispatcher");
        v41 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v41, "sendMessage:", v38);
      }
      else
      {
        context = (void *)MEMORY[0x227676638]();
        v56 = a1[4];
        HMFGetOSLogHandle();
        v57 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v57, OS_LOG_TYPE_INFO))
        {
          HMFGetLogIdentifier();
          v58 = (void *)objc_claimAutoreleasedReturnValue();
          v59 = a1[5];
          *(_DWORD *)buf = 138543618;
          v71 = v58;
          v72 = 2112;
          v73 = v59;
          _os_log_impl(&dword_2218F0000, v57, OS_LOG_TYPE_INFO, "%{public}@No HomeUIService connection for accessory %@", buf, 0x16u);

        }
        objc_autoreleasePoolPop(context);
        v60 = a1[8];
        objc_msgSend(MEMORY[0x24BDD1540], "hmPrivateErrorWithCode:", 2002);
        v41 = (void *)objc_claimAutoreleasedReturnValue();
        (*((void (**)(id, _QWORD, _QWORD, void *))v60 + 2))(v60, 0, 0, v41);
      }

    }
  }
LABEL_17:

}

void __40__HMDHome__setupCodeProviderForMessage___block_invoke_1157(id *a1, void *a2)
{
  id v3;
  NSObject *v4;
  _QWORD v5[5];
  id v6;
  id v7;
  id v8;

  v3 = a2;
  if (v3)
  {
    objc_msgSend(a1[4], "workQueue");
    v4 = objc_claimAutoreleasedReturnValue();
    v5[0] = MEMORY[0x24BDAC760];
    v5[1] = 3221225472;
    v5[2] = __40__HMDHome__setupCodeProviderForMessage___block_invoke_2_1158;
    v5[3] = &unk_24E79B3F0;
    v5[4] = a1[4];
    v6 = v3;
    v8 = a1[6];
    v7 = a1[5];
    dispatch_async(v4, v5);

  }
}

uint64_t __40__HMDHome__setupCodeProviderForMessage___block_invoke_2_1158(uint64_t a1)
{
  void *v2;
  id v3;
  NSObject *v4;
  void *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  _QWORD v10[4];
  id v11;
  uint8_t buf[4];
  void *v13;
  __int16 v14;
  uint64_t v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  v2 = (void *)MEMORY[0x227676638]();
  v3 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
  {
    HMFGetLogIdentifier();
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = *(_QWORD *)(a1 + 40);
    *(_DWORD *)buf = 138543618;
    v13 = v5;
    v14 = 2112;
    v15 = v6;
    _os_log_impl(&dword_2218F0000, v4, OS_LOG_TYPE_ERROR, "%{public}@Failed to request setup code for accessory: %@", buf, 0x16u);

  }
  objc_autoreleasePoolPop(v2);
  (*(void (**)(void))(*(_QWORD *)(a1 + 56) + 16))();
  os_unfair_recursive_lock_lock_with_options();
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 840), "hm_allKeys");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v10[0] = MEMORY[0x24BDAC760];
  v10[1] = 3221225472;
  v10[2] = __40__HMDHome__setupCodeProviderForMessage___block_invoke_1159;
  v10[3] = &unk_24E7763F0;
  v11 = *(id *)(a1 + 48);
  objc_msgSend(v7, "na_firstObjectPassingTest:", v10);
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  if (v8)
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 840), "removeObjectForKey:", v8);
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 816), "removeObjectForKey:", *(_QWORD *)(a1 + 48));
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 824), "removeObjectForKey:", *(_QWORD *)(a1 + 48));
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 832), "removeObjectForKey:", *(_QWORD *)(a1 + 48));

  return os_unfair_recursive_lock_unlock();
}

uint64_t __40__HMDHome__setupCodeProviderForMessage___block_invoke_1159(uint64_t a1, void *a2)
{
  void *v2;
  void *v3;
  uint64_t v4;

  v2 = *(void **)(a1 + 32);
  objc_msgSend(a2, "accessoryUUID");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v2, "isEqual:", v3);

  return v4;
}

void __47__HMDHome_btleAccessoryReachabilityProbeTimer___block_invoke(uint64_t a1)
{
  id v2;

  objc_msgSend(*(id *)(a1 + 32), "accessoryBrowser");
  v2 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "btleAccessoryReachabilityProbeTimer:", *(unsigned __int8 *)(a1 + 40));

}

void __76__HMDHome_dispatchRequestToEvaluateCondition_forCharacteristics_completion___block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id WeakRetained;
  void *v8;
  id v9;
  NSObject *v10;
  void *v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  int v15;
  void *v16;
  id v17;
  NSObject *v18;
  void *v19;
  uint64_t v20;
  void *v21;
  int v22;
  uint8_t buf[4];
  void *v24;
  __int16 v25;
  uint64_t v26;
  __int16 v27;
  void *v28;
  __int16 v29;
  uint64_t v30;
  __int16 v31;
  id v32;
  uint64_t v33;

  v33 = *MEMORY[0x24BDAC8D0];
  v5 = a2;
  v6 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 64));
  v8 = (void *)MEMORY[0x227676638]();
  v9 = WeakRetained;
  HMFGetOSLogHandle();
  v10 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v12 = *(_QWORD *)(a1 + 32);
    v13 = *(void **)(a1 + 40);
    v14 = *(_QWORD *)(a1 + 48);
    *(_DWORD *)buf = 138544386;
    v24 = v11;
    v25 = 2112;
    v26 = v12;
    v27 = 2112;
    v28 = v13;
    v29 = 2112;
    v30 = v14;
    v31 = 2112;
    v32 = v5;
    _os_log_impl(&dword_2218F0000, v10, OS_LOG_TYPE_INFO, "%{public}@Message with identifier %@ to evaluate condition %@ for characteristics %@ has been sent with error %@", buf, 0x34u);

  }
  objc_autoreleasePoolPop(v8);
  if (v5)
    goto LABEL_7;
  v15 = objc_msgSend(v6, "hmf_BOOLForKey:", CFSTR("kPredicateEvaluateResultKey"));
  v16 = (void *)MEMORY[0x227676638]();
  v17 = v9;
  HMFGetOSLogHandle();
  v18 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    v20 = *(_QWORD *)(a1 + 40);
    HMFBooleanToString();
    v22 = v15;
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543874;
    v24 = v19;
    v25 = 2112;
    v26 = v20;
    v27 = 2112;
    v28 = v21;
    _os_log_impl(&dword_2218F0000, v18, OS_LOG_TYPE_INFO, "%{public}@Resident evaluate predicate %@ to %@.", buf, 0x20u);

    v15 = v22;
  }

  objc_autoreleasePoolPop(v16);
  if (v15)
LABEL_7:
    (*(void (**)(void))(*(_QWORD *)(a1 + 56) + 16))();

}

uint64_t __34__HMDHome_reevaluateAccessoryInfo__block_invoke(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_reevaluateAccessoryInfoWithBadgeRefresh:", 1);
}

uint64_t __61__HMDHome_notifyClientsOfAccessoryInfoUpdatedForAccessories___block_invoke(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_notifyClientsOfAccessoryInfoUpdatedForAccessories:shouldRefreshBadge:withCompletion:", *(_QWORD *)(a1 + 40), 1, 0);
}

void __78__HMDHome__removeAllHomeContentsAndAccessoryPairings_queue_completionHandler___block_invoke(uint64_t a1)
{
  id *v2;
  id WeakRetained;
  uint64_t v4;
  void *v5;
  _QWORD v6[5];
  id v7;
  id v8;

  v2 = (id *)(a1 + 48);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  if (WeakRetained)
  {
    v4 = *(_QWORD *)(a1 + 32);
    v6[0] = MEMORY[0x24BDAC760];
    v6[1] = 3221225472;
    v6[2] = __78__HMDHome__removeAllHomeContentsAndAccessoryPairings_queue_completionHandler___block_invoke_2;
    v6[3] = &unk_24E79AD48;
    objc_copyWeak(&v8, v2);
    v5 = *(void **)(a1 + 40);
    v6[4] = *(_QWORD *)(a1 + 32);
    v7 = v5;
    objc_msgSend(WeakRetained, "_removeAccessory:completionHandler:", v4, v6);

    objc_destroyWeak(&v8);
  }
  else
  {
    dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));
  }

}

void __78__HMDHome__removeAllHomeContentsAndAccessoryPairings_queue_completionHandler___block_invoke_2(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id WeakRetained;
  void *v8;
  id v9;
  NSObject *v10;
  void *v11;
  uint64_t v12;
  NSObject *v13;
  id v14;
  uint64_t v15;
  void *v16;
  _QWORD block[4];
  id v18;
  id v19;
  id v20;
  uint64_t v21;
  id v22;
  uint8_t buf[4];
  void *v24;
  __int16 v25;
  uint64_t v26;
  __int16 v27;
  id v28;
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  v5 = a2;
  v6 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  v8 = (void *)MEMORY[0x227676638]();
  v9 = WeakRetained;
  HMFGetOSLogHandle();
  v10 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v12 = *(_QWORD *)(a1 + 32);
    *(_DWORD *)buf = 138543874;
    v24 = v11;
    v25 = 2112;
    v26 = v12;
    v27 = 2112;
    v28 = v6;
    _os_log_impl(&dword_2218F0000, v10, OS_LOG_TYPE_INFO, "%{public}@Removed primary accessory, %@, with error: %@", buf, 0x20u);

  }
  objc_autoreleasePoolPop(v8);
  if (v9)
  {
    objc_msgSend(v9, "workQueue");
    v13 = objc_claimAutoreleasedReturnValue();
    block[0] = MEMORY[0x24BDAC760];
    block[1] = 3221225472;
    block[2] = __78__HMDHome__removeAllHomeContentsAndAccessoryPairings_queue_completionHandler___block_invoke_1144;
    block[3] = &unk_24E79AD20;
    v18 = v6;
    v19 = v9;
    v14 = v5;
    v15 = *(_QWORD *)(a1 + 32);
    v16 = *(void **)(a1 + 40);
    v20 = v14;
    v21 = v15;
    v22 = v16;
    dispatch_async(v13, block);

  }
  else
  {
    dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));
  }

}

void __78__HMDHome__removeAllHomeContentsAndAccessoryPairings_queue_completionHandler___block_invoke_1144(uint64_t a1)
{
  void *v2;
  id v3;
  NSObject *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  void *v9;
  __int16 v10;
  uint64_t v11;
  __int16 v12;
  uint64_t v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  if (*(_QWORD *)(a1 + 32))
  {
    v2 = (void *)MEMORY[0x227676638]();
    v3 = *(id *)(a1 + 40);
    HMFGetOSLogHandle();
    v4 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      HMFGetLogIdentifier();
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      v6 = *(_QWORD *)(a1 + 56);
      v7 = *(_QWORD *)(a1 + 32);
      v8 = 138543874;
      v9 = v5;
      v10 = 2112;
      v11 = v6;
      v12 = 2112;
      v13 = v7;
      _os_log_impl(&dword_2218F0000, v4, OS_LOG_TYPE_DEFAULT, "%{public}@Failed to remove accessory %@ with error: %@", (uint8_t *)&v8, 0x20u);

    }
    objc_autoreleasePoolPop(v2);
  }
  else
  {
    objc_msgSend(*(id *)(a1 + 40), "_removeAccessories:message:", *(_QWORD *)(a1 + 48), 0);
  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 64));
}

void __44__HMDHome__removeAccessoriesFromContainers___block_invoke(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  NSObject *v6;
  NSObject *v7;
  void *v8;
  uint64_t v9;
  const char *v10;
  NSObject *v11;
  os_log_type_t v12;
  uint32_t v13;
  uint64_t v14;
  int v15;
  void *v16;
  __int16 v17;
  uint64_t v18;
  __int16 v19;
  id v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  v3 = a2;
  v4 = (void *)MEMORY[0x227676638]();
  v5 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v6 = objc_claimAutoreleasedReturnValue();
  v7 = v6;
  if (v3)
  {
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      v9 = *(_QWORD *)(a1 + 40);
      v15 = 138543874;
      v16 = v8;
      v17 = 2112;
      v18 = v9;
      v19 = 2112;
      v20 = v3;
      v10 = "%{public}@Failed to commit removeAccessoriesFromContainersTransaction [%@] with error: %@";
      v11 = v7;
      v12 = OS_LOG_TYPE_ERROR;
      v13 = 32;
LABEL_6:
      _os_log_impl(&dword_2218F0000, v11, v12, v10, (uint8_t *)&v15, v13);

    }
  }
  else if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v14 = *(_QWORD *)(a1 + 40);
    v15 = 138543618;
    v16 = v8;
    v17 = 2112;
    v18 = v14;
    v10 = "%{public}@Successfully finished running removeAccessoriesFromContainersTransaction : %@";
    v11 = v7;
    v12 = OS_LOG_TYPE_INFO;
    v13 = 22;
    goto LABEL_6;
  }

  objc_autoreleasePoolPop(v4);
}

void __26__HMDHome__removeService___block_invoke(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  NSObject *v6;
  void *v7;
  int v8;
  void *v9;
  __int16 v10;
  id v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v3 = a2;
  if (v3)
  {
    v4 = (void *)MEMORY[0x227676638]();
    v5 = *(id *)(a1 + 32);
    HMFGetOSLogHandle();
    v6 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      v8 = 138543618;
      v9 = v7;
      v10 = 2112;
      v11 = v3;
      _os_log_impl(&dword_2218F0000, v6, OS_LOG_TYPE_INFO, "%{public}@Failed to commit removeServiceTransaction with error: %@", (uint8_t *)&v8, 0x16u);

    }
    objc_autoreleasePoolPop(v4);
  }

}

void __26__HMDHome__removeService___block_invoke_1143(uint64_t a1)
{
  void *v2;
  id v3;

  objc_msgSend(*(id *)(a1 + 32), "notificationRegistry");
  v3 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 40), "characteristics");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "removeRegistrationsForCharacteristics:", v2);

}

void __49__HMDHome_handleMobileAssetsUpdatedNotification___block_invoke(uint64_t a1)
{
  void *v2;
  id v3;
  NSObject *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;
  NSObject *v10;
  void *v11;
  void (**v12)(_QWORD, _QWORD);
  void *v13;
  id v14;
  uint64_t v15;
  id v16;
  _QWORD v17[4];
  id v18;
  uint64_t v19;
  uint8_t buf[4];
  void *v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  v2 = (void *)MEMORY[0x227676638]();
  v3 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543362;
    v21 = v5;
    _os_log_impl(&dword_2218F0000, v4, OS_LOG_TYPE_INFO, "%{public}@Handling mobile assets updated notification", buf, 0xCu);

  }
  objc_autoreleasePoolPop(v2);
  objc_msgSend(*(id *)(a1 + 32), "accessories");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "na_map:", &__block_literal_global_1137);
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  if (objc_msgSend(v7, "hmf_isEmpty"))
  {
    v8 = (void *)MEMORY[0x227676638]();
    v9 = *(id *)(a1 + 32);
    HMFGetOSLogHandle();
    v10 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v21 = v11;
      _os_log_impl(&dword_2218F0000, v10, OS_LOG_TYPE_INFO, "%{public}@No lock accessories", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v8);
  }
  else
  {
    objc_msgSend(*(id *)(a1 + 32), "matterCapabilitiesFactory");
    v12 = (void (**)(_QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
    v12[2](v12, 0);
    v13 = (void *)objc_claimAutoreleasedReturnValue();

    v17[0] = MEMORY[0x24BDAC760];
    v17[1] = 3221225472;
    v17[2] = __49__HMDHome_handleMobileAssetsUpdatedNotification___block_invoke_1138;
    v17[3] = &unk_24E77E658;
    v14 = v7;
    v15 = *(_QWORD *)(a1 + 32);
    v18 = v14;
    v19 = v15;
    v16 = (id)objc_msgSend(v13, "then:", v17);

  }
}

uint64_t __49__HMDHome_handleMobileAssetsUpdatedNotification___block_invoke_1138(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  uint64_t v6;
  void *v7;
  void *v8;
  id v9;
  NSObject *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  uint64_t v16;
  uint64_t v17;
  id (*v18)(uint64_t, void *);
  void *v19;
  id v20;
  uint64_t v21;
  uint8_t buf[4];
  void *v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v3 = a2;
  v4 = *(void **)(a1 + 32);
  v16 = MEMORY[0x24BDAC760];
  v17 = 3221225472;
  v18 = __49__HMDHome_handleMobileAssetsUpdatedNotification___block_invoke_2;
  v19 = &unk_24E7763C8;
  v5 = v3;
  v6 = *(_QWORD *)(a1 + 40);
  v20 = v5;
  v21 = v6;
  objc_msgSend(v4, "na_map:", &v16);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v7, "hmf_isEmpty", v16, v17, v18, v19))
  {
    v8 = (void *)MEMORY[0x227676638]();
    v9 = *(id *)(a1 + 40);
    HMFGetOSLogHandle();
    v10 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v23 = v11;
      _os_log_impl(&dword_2218F0000, v10, OS_LOG_TYPE_INFO, "%{public}@No accessories needed updating", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v8);
  }
  else
  {
    objc_msgSend(*(id *)(a1 + 40), "backingStore");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    +[HMDBackingStoreTransactionOptions defaultXPCOptions](HMDBackingStoreTransactionOptions, "defaultXPCOptions");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "transaction:options:", CFSTR("UpdateACWGCertified"), v13);
    v14 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v14, "addObjects:", v7);
    objc_msgSend(v14, "run");

  }
  return 1;
}

id __49__HMDHome_handleMobileAssetsUpdatedNotification___block_invoke_2(uint64_t a1, void *a2)
{
  id v3;
  int v4;
  void *v5;
  void *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  void *v10;
  void *v11;
  id v12;
  NSObject *v13;
  void *v14;
  void *v15;
  void *v16;
  int v17;
  void *v18;
  void *v19;
  void *v21;
  uint8_t buf[4];
  void *v23;
  __int16 v24;
  void *v25;
  __int16 v26;
  int v27;
  __int16 v28;
  int v29;
  __int16 v30;
  int v31;
  __int16 v32;
  int v33;
  uint64_t v34;

  v34 = *MEMORY[0x24BDAC8D0];
  v3 = a2;
  v4 = objc_msgSend(v3, "mfiCertifiedACWG");
  v5 = *(void **)(a1 + 32);
  objc_msgSend(v3, "matterVendorID");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = (int)objc_msgSend(v6, "intValue");
  objc_msgSend(v3, "matterProductID");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = objc_msgSend(v5, "isCapabilityAllowed:vendorID:productID:", 0, v7, (int)objc_msgSend(v8, "intValue"));

  v10 = 0;
  if (v4 != (_DWORD)v9)
  {
    v11 = (void *)MEMORY[0x227676638]();
    v12 = *(id *)(a1 + 40);
    HMFGetOSLogHandle();
    v13 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v3, "shortDescription");
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v3, "matterVendorID");
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      v17 = objc_msgSend(v16, "intValue");
      objc_msgSend(v3, "matterProductID");
      v21 = v11;
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138544642;
      v23 = v14;
      v24 = 2114;
      v25 = v15;
      v26 = 1024;
      v27 = v17;
      v28 = 1024;
      v29 = objc_msgSend(v18, "intValue");
      v30 = 1024;
      v31 = v4;
      v32 = 1024;
      v33 = v9;
      _os_log_impl(&dword_2218F0000, v13, OS_LOG_TYPE_INFO, "%{public}@ECB lock %{public}@ with VID %d, PID %d certified changed, old: %{BOOL}d, new: %{BOOL}d", buf, 0x2Eu);

      v11 = v21;
    }

    objc_autoreleasePoolPop(v11);
    objc_msgSend(v3, "transactionWithObjectChangeType:", 2);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD16E0], "numberWithBool:", v9);
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "setMfiCertifiedACWG:", v19);

  }
  return v10;
}

id __49__HMDHome_handleMobileAssetsUpdatedNotification___block_invoke_1135(uint64_t a1, void *a2)
{
  id v2;
  void *v3;
  id v4;
  id v5;

  v2 = a2;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v3 = v2;
  else
    v3 = 0;
  v4 = v3;
  v5 = 0;
  if (objc_msgSend(v4, "supportsACWGProvisioning"))
    v5 = v4;

  return v5;
}

void __51__HMDHome__auditActionSetsAndTriggersForAccessory___block_invoke(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  NSObject *v6;
  void *v7;
  int v8;
  void *v9;
  __int16 v10;
  id v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v3 = a2;
  if (v3)
  {
    v4 = (void *)MEMORY[0x227676638]();
    v5 = *(id *)(a1 + 32);
    HMFGetOSLogHandle();
    v6 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      v8 = 138543618;
      v9 = v7;
      v10 = 2112;
      v11 = v3;
      _os_log_impl(&dword_2218F0000, v6, OS_LOG_TYPE_INFO, "%{public}@Failed to commit auditActionSetsAndTriggersTransaction with error: %@", (uint8_t *)&v8, 0x16u);

    }
    objc_autoreleasePoolPop(v4);
  }

}

uint64_t __31__HMDHome_checkForCATIDUpdate___block_invoke(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "updateCATIDForUsersIfNeeded:", 0);
}

uint64_t __32__HMDHome_handleHomeDataLoaded___block_invoke(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "updateCATIDForUsersIfNeeded:", 0);
}

void __44__HMDHome__removeAccessoryWithUUID_message___block_invoke(id *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id WeakRetained;
  void *v8;
  NSObject *v9;
  id v10;
  void *v11;
  _QWORD v12[5];
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;

  v5 = a2;
  v6 = a3;
  WeakRetained = objc_loadWeakRetained(a1 + 7);
  v8 = WeakRetained;
  if (WeakRetained)
  {
    objc_msgSend(WeakRetained, "workQueue");
    v9 = objc_claimAutoreleasedReturnValue();
    v12[0] = MEMORY[0x24BDAC760];
    v12[1] = 3221225472;
    v12[2] = __44__HMDHome__removeAccessoryWithUUID_message___block_invoke_2;
    v12[3] = &unk_24E792F40;
    v12[4] = v8;
    v13 = a1[5];
    v14 = v6;
    v15 = v5;
    v16 = a1[4];
    v17 = a1[6];
    dispatch_async(v9, v12);

  }
  else
  {
    v10 = a1[4];
    objc_msgSend(MEMORY[0x24BDD1540], "hmErrorWithCode:", 52);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "respondWithError:", v11);

  }
}

void __44__HMDHome__removeAccessoryWithUUID_message___block_invoke_2(uint64_t a1)
{
  void *v2;
  void *v3;
  id v4;
  NSObject *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  id v10;
  uint8_t buf[4];
  void *v12;
  __int16 v13;
  void *v14;
  __int16 v15;
  uint64_t v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  objc_msgSend(*(id *)(a1 + 32), "logEventSubmitter");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "submitLogEvent:error:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));

  if (*(_QWORD *)(a1 + 48))
  {
    v3 = (void *)MEMORY[0x227676638]();
    v4 = *(id *)(a1 + 32);
    HMFGetOSLogHandle();
    v5 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      HMFGetLogIdentifier();
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(*(id *)(a1 + 72), "name");
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      v8 = *(_QWORD *)(a1 + 48);
      *(_DWORD *)buf = 138543874;
      v12 = v6;
      v13 = 2112;
      v14 = v7;
      v15 = 2112;
      v16 = v8;
      _os_log_impl(&dword_2218F0000, v5, OS_LOG_TYPE_DEFAULT, "%{public}@Failed to remove accessory %@ with error: %@", buf, 0x20u);

    }
    objc_autoreleasePoolPop(v3);
    objc_msgSend(*(id *)(a1 + 64), "respondWithError:", *(_QWORD *)(a1 + 48));
  }
  else
  {
    objc_msgSend(*(id *)(a1 + 32), "_removeAccessories:message:", *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64));
    objc_msgSend(*(id *)(a1 + 32), "updateHomeLocation");
    v9 = *(void **)(a1 + 32);
    objc_msgSend(*(id *)(a1 + 64), "name");
    v10 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "saveWithReason:postSyncNotification:");

  }
}

uint64_t __45__HMDHome_removeAccessory_completionHandler___block_invoke(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_removeAccessory:completionHandler:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
}

void __73__HMDHome__removeAccessoriesForPrimaryAccessory_error_completionHandler___block_invoke(uint64_t a1)
{
  id v2;

  objc_msgSend(*(id *)(a1 + 32), "notificationRegistry");
  v2 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "removeRegistrationsForMediaProfile:", *(_QWORD *)(a1 + 40));

}

uint64_t __63__HMDHome__notifyClientOfNewlyAddedAccessories_requestMessage___block_invoke(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "respondWithPayload:", 0);
}

uint64_t __90__HMDHome_removeWithMergeSecondaryAccessory_removedFromBridgeAccessory_completionHandler___block_invoke(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_removeWithMergeSecondaryAccessory:removedFromBridgeAccessory:completionHandler:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56));
}

void __34__HMDHome_notifyOfAddedAccessory___block_invoke(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  void *v3;
  const __CFString *v4;
  _QWORD v5[2];

  v5[1] = *MEMORY[0x24BDAC8D0];
  v2 = *(void **)(a1 + 32);
  v1 = *(_QWORD *)(a1 + 40);
  v4 = CFSTR("HMDNotificationAddedAccessoryKey");
  v5[0] = v1;
  objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v5, &v4, 1);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  logAndPostNotification(CFSTR("HMDNotificationHomeAddedAccessory"), v2, v3);

}

void __43__HMDHome_notifyOfRemovedAccessory_source___block_invoke(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;
  _QWORD v7[2];
  _QWORD v8[3];

  v8[2] = *MEMORY[0x24BDAC8D0];
  objc_msgSend(*(id *)(a1 + 32), "notificationCenter");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = *(_QWORD *)(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  v7[1] = CFSTR("HMDNotificationSourceKey");
  v8[0] = v3;
  v7[0] = CFSTR("HMDAccessoryNotificationKey");
  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedInteger:", *(_QWORD *)(a1 + 48));
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v8[1] = v5;
  objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v8, v7, 2);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "postNotificationName:object:userInfo:", CFSTR("HMDHomeAccessoryRemovedNotification"), v4, v6);

}

void __47__HMDHome__handleRemoveAccessoryModel_message___block_invoke(uint64_t a1)
{
  NSObject *v2;
  void *v3;
  _QWORD block[5];
  id v5;
  id v6;

  objc_msgSend(*(id *)(a1 + 32), "workQueue");
  v2 = objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x24BDAC760];
  block[1] = 3221225472;
  block[2] = __47__HMDHome__handleRemoveAccessoryModel_message___block_invoke_2;
  block[3] = &unk_24E79BBD0;
  v3 = *(void **)(a1 + 40);
  block[4] = *(_QWORD *)(a1 + 32);
  v5 = v3;
  v6 = *(id *)(a1 + 48);
  dispatch_async(v2, block);

}

void __47__HMDHome__handleRemoveAccessoryModel_message___block_invoke_2(uint64_t a1)
{
  void *v2;
  id v3;

  objc_msgSend(*(id *)(a1 + 32), "setSelfRemovalWatchdog:", 0);
  v2 = *(void **)(a1 + 32);
  objc_msgSend(*(id *)(a1 + 40), "uuid");
  v3 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "_removeAccessoryWithUUID:message:", v3, *(_QWORD *)(a1 + 48));

}

- (void)__removeAccessory:(char)a3 isBeingReplaced:(int)a4 isForceUpdate:(void *)a5 message:
{
  id v8;
  id v9;
  void *v10;
  void *v11;
  uint64_t v12;
  void *v13;
  void *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t i;
  void *v20;
  NSObject *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t j;
  void *v26;
  void (*v27)(uint64_t);
  id v28;
  id v29;
  id v30;
  _QWORD *v31;
  uint64_t v32;
  void *v33;
  void *v34;
  char v35;
  NSObject *v36;
  id v37;
  void *v38;
  void *v39;
  id v40;
  uint64_t v41;
  NSObject *v42;
  id obj;
  void *v45;
  void *v46;
  _QWORD block[4];
  id v48;
  _QWORD v49[2];
  void (*v50)(uint64_t);
  void *v51;
  void *v52;
  void *v53;
  NSObject *v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  _BYTE v63[128];
  _BYTE v64[128];
  uint64_t v65;

  v65 = *MEMORY[0x24BDAC8D0];
  v8 = a2;
  v9 = a5;
  v10 = v9;
  v45 = a1;
  if (a1)
  {
    if (a4)
    {
      objc_msgSend(v9, "untrustedClientIdentifier");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      +[HMDBackingStoreTransactionOptions defaultXPCOptionsWithCDTransactionAuthor:clientIdentifier:](HMDBackingStoreTransactionOptions, "defaultXPCOptionsWithCDTransactionAuthor:clientIdentifier:", 10, v11);
      v12 = objc_claimAutoreleasedReturnValue();

    }
    else
    {
      +[HMDBackingStoreTransactionOptions defaultXPCOptions](HMDBackingStoreTransactionOptions, "defaultXPCOptions");
      v12 = objc_claimAutoreleasedReturnValue();
    }
    objc_msgSend(a1, "backingStore");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "name");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    v38 = (void *)v12;
    objc_msgSend(v13, "transaction:options:", v14, v12);
    v46 = (void *)objc_claimAutoreleasedReturnValue();

    v40 = v8;
    objc_msgSend(MEMORY[0x24BDBCEB8], "arrayWithObject:", v8);
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    v59 = 0u;
    v60 = 0u;
    v61 = 0u;
    v62 = 0u;
    v16 = objc_msgSend(v15, "countByEnumeratingWithState:objects:count:", &v59, v64, 16);
    if (v16)
    {
      v17 = v16;
      v18 = *(_QWORD *)v60;
      do
      {
        for (i = 0; i != v17; ++i)
        {
          if (*(_QWORD *)v60 != v18)
            objc_enumerationMutation(v15);
          objc_msgSend(*(id *)(*((_QWORD *)&v59 + 1) + 8 * i), "transactionWithObjectChangeType:", 3);
          v20 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v46, "add:withMessage:", v20, v10);

        }
        v17 = objc_msgSend(v15, "countByEnumeratingWithState:objects:count:", &v59, v64, 16);
      }
      while (v17);
    }
    v39 = v10;
    v21 = dispatch_group_create();
    v55 = 0u;
    v56 = 0u;
    v57 = 0u;
    v58 = 0u;
    obj = v15;
    v22 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v55, v63, 16);
    if (v22)
    {
      v23 = v22;
      v24 = *(_QWORD *)v56;
      v41 = *(_QWORD *)v56;
      v42 = v21;
      do
      {
        for (j = 0; j != v23; ++j)
        {
          if (*(_QWORD *)v56 != v24)
            objc_enumerationMutation(obj);
          v26 = *(void **)(*((_QWORD *)&v55 + 1) + 8 * j);
          dispatch_group_enter(v21);
          v49[0] = MEMORY[0x24BDAC760];
          v49[1] = 3221225472;
          v27 = __67__HMDHome___removeAccessory_isBeingReplaced_isForceUpdate_message___block_invoke;
          v50 = __67__HMDHome___removeAccessory_isBeingReplaced_isForceUpdate_message___block_invoke;
          v51 = &unk_24E79BBD0;
          v52 = v45;
          v53 = v26;
          v54 = v21;
          v28 = v45;
          v29 = v26;
          v30 = v46;
          v31 = v49;
          if ((a3 & 1) == 0)
          {
            v32 = v23;
            objc_msgSend(v29, "uuid");
            v33 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v28, "activeNetworkRouterUUID");
            v34 = (void *)objc_claimAutoreleasedReturnValue();
            v35 = objc_msgSend(v33, "isEqual:", v34);

            if ((v35 & 1) != 0)
            {
              objc_msgSend(v28, "_updateActiveNetworkRouterAccessory:isReplacement:withTransaction:", 0, 0, v30);
              objc_msgSend(v28, "_clearAccessoryNetworkProtectionStateWithTransaction:", v30);
              objc_msgSend(v28, "_reconfigureAccessoriesOnRouterRemovalWithCompletion:", v31);
              v23 = v32;
              v24 = v41;
              v21 = v42;
              goto LABEL_22;
            }
            v27 = v50;
            v23 = v32;
            v24 = v41;
            v21 = v42;
          }
          v27((uint64_t)v31);
LABEL_22:

        }
        v23 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v55, v63, 16);
      }
      while (v23);
    }

    objc_msgSend(v45, "workQueue");
    v36 = objc_claimAutoreleasedReturnValue();
    block[0] = MEMORY[0x24BDAC760];
    block[1] = 3221225472;
    block[2] = __67__HMDHome___removeAccessory_isBeingReplaced_isForceUpdate_message___block_invoke_4;
    block[3] = &unk_24E79C240;
    v48 = v46;
    v37 = v46;
    dispatch_group_notify(v21, v36, block);

    v10 = v39;
    v8 = v40;
  }

}

void __58__HMDHome__handleRemoveAccessoryAfterUserConsent_message___block_invoke(id *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  id v8;
  void *v9;
  id v10;
  void *v11;
  char v12;
  void *v13;
  id v14;
  NSObject *v15;
  void *v16;
  int v17;
  void *v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v5 = a2;
  v6 = a3;
  if (!v5)
    objc_msgSend(a1[4], "_submitRemovalLogEventForAccessory:isLocalRemoval:isLocalFallback:isDuplicate:duplicateCount:error:", a1[5], 0, 0, 0, 0, 0);
  if ((!objc_msgSend(v5, "isHMError") || objc_msgSend(v5, "code") != 8)
    && (!objc_msgSend(v5, "isHMFError") || objc_msgSend(v5, "code") != 13)
    && (!objc_msgSend(v5, "isHMError") || objc_msgSend(v5, "code") != 91))
  {
    goto LABEL_19;
  }
  objc_msgSend(a1[4], "homeManager");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  if (!objc_msgSend(v7, "isNetworkConnectionAvailable")
    || ((v8 = a1[5], objc_opt_class(), (objc_opt_isKindOfClass() & 1) == 0) ? (v9 = 0) : (v9 = v8),
        v10 = v9,
        v8,
        !v10))
  {

    goto LABEL_19;
  }
  objc_msgSend(a1[4], "owner");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v12 = objc_msgSend(v11, "isCurrentUser");

  if ((v12 & 1) == 0)
  {
LABEL_19:
    objc_msgSend(a1[6], "respondWithPayload:error:", v6, v5);
    goto LABEL_20;
  }
  v13 = (void *)MEMORY[0x227676638]();
  v14 = a1[4];
  HMFGetOSLogHandle();
  v15 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
  {
    HMFGetLogIdentifier();
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    v17 = 138543362;
    v18 = v16;
    _os_log_impl(&dword_2218F0000, v15, OS_LOG_TYPE_DEFAULT, "%{public}@Failed to remove an apple media accessory via the primary resident. Removing it locally", (uint8_t *)&v17, 0xCu);

  }
  objc_autoreleasePoolPop(v13);
  -[HMDHome __removeAccessory:isBeingReplaced:isForceUpdate:message:](a1[4], a1[5], 0, 1, a1[6]);
  objc_msgSend(a1[4], "_submitRemovalLogEventForAccessory:isLocalRemoval:isLocalFallback:isDuplicate:duplicateCount:error:", a1[5], 1, 1, 0, 0, v5);
LABEL_20:

}

void __67__HMDHome___removeAccessory_isBeingReplaced_isForceUpdate_message___block_invoke(uint64_t a1)
{
  void *v1;
  void *v2;
  id v3;
  id v4;
  _QWORD *v5;
  _QWORD v6[2];
  void (*v7)(uint64_t);
  void *v8;
  void *v9;
  void *v10;
  id v11;

  v1 = *(void **)(a1 + 32);
  v2 = *(void **)(a1 + 40);
  v6[0] = MEMORY[0x24BDAC760];
  v6[1] = 3221225472;
  v7 = __67__HMDHome___removeAccessory_isBeingReplaced_isForceUpdate_message___block_invoke_2;
  v8 = &unk_24E79BBD0;
  v9 = v1;
  v10 = v2;
  v11 = *(id *)(a1 + 48);
  v3 = v1;
  v4 = v2;
  v5 = v6;
  if ((objc_msgSend(v4, "isPrimary") & 1) != 0
    || objc_msgSend(v4, "conformsToProtocol:", &unk_2557F15E8)
    && objc_msgSend(v4, "supportsUserManagement"))
  {
    objc_msgSend(v3, "removeAllUsersAndCloudDataFromAccessory:completionHandler:", v4, v5);
  }
  else
  {
    v7((uint64_t)v5);
  }

}

uint64_t __67__HMDHome___removeAccessory_isBeingReplaced_isForceUpdate_message___block_invoke_4(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "run");
}

void __67__HMDHome___removeAccessory_isBeingReplaced_isForceUpdate_message___block_invoke_2(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  id v3;
  uint64_t *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t);
  void *v9;
  id v10;
  _QWORD v11[4];
  uint64_t *v12;

  v1 = MEMORY[0x24BDAC760];
  v6 = MEMORY[0x24BDAC760];
  v7 = 3221225472;
  v8 = __67__HMDHome___removeAccessory_isBeingReplaced_isForceUpdate_message___block_invoke_3;
  v9 = &unk_24E79C240;
  v2 = *(void **)(a1 + 40);
  v10 = *(id *)(a1 + 48);
  v3 = v2;
  v4 = &v6;
  if (objc_msgSend(v3, "conformsToProtocol:", &unk_25582FAA8, v6, v7))
    v5 = v3;
  else
    v5 = 0;
  if (objc_msgSend(v5, "supportsDisassociation"))
  {
    v11[0] = v1;
    v11[1] = 3221225472;
    v11[2] = ____disassociateAccessoryIfSupported_block_invoke;
    v11[3] = &unk_24E79A050;
    v12 = v4;
    objc_msgSend(v3, "disassociateWithCompletionHandler:", v11);

  }
  else
  {
    v8((uint64_t)v4);
  }

}

void __67__HMDHome___removeAccessory_isBeingReplaced_isForceUpdate_message___block_invoke_3(uint64_t a1)
{
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

void __41__HMDHome__handleRemoveAccessoryMessage___block_invoke(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  NSObject *v6;
  void *v7;
  HMDSelfRemovalWatchdog *v8;
  void *v9;
  void *v10;
  HMDSelfRemovalWatchdog *v11;
  void *v12;
  int v13;
  void *v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v3 = a2;
  if (objc_msgSend(*(id *)(a1 + 32), "isCurrentAccessory")
    && objc_msgSend(*(id *)(a1 + 40), "isCurrentDevicePrimaryResident"))
  {
    v4 = (void *)MEMORY[0x227676638]();
    v5 = *(id *)(a1 + 40);
    HMFGetOSLogHandle();
    v6 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      v13 = 138543362;
      v14 = v7;
      _os_log_impl(&dword_2218F0000, v6, OS_LOG_TYPE_INFO, "%{public}@Processing self removal from home", (uint8_t *)&v13, 0xCu);

    }
    objc_autoreleasePoolPop(v4);
    v8 = [HMDSelfRemovalWatchdog alloc];
    objc_msgSend(*(id *)(a1 + 32), "uuid");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 40), "workQueue");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v11 = -[HMDSelfRemovalWatchdog initWithCurrentAccessoryUUID:workQueue:](v8, "initWithCurrentAccessoryUUID:workQueue:", v9, v10);
    objc_msgSend(*(id *)(a1 + 40), "setSelfRemovalWatchdog:", v11);

    objc_msgSend(*(id *)(a1 + 40), "selfRemovalWatchdog");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "configure");

  }
  -[HMDHome __removeAccessory:isBeingReplaced:isForceUpdate:message:](*(void **)(a1 + 40), *(void **)(a1 + 32), 0, 0, v3);

}

void __41__HMDHome__handleRemoveAccessoryMessage___block_invoke_1120(uint64_t a1, int a2)
{
  void *v4;
  id v5;
  NSObject *v6;
  _BOOL4 v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  int v12;
  void *v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  v4 = (void *)MEMORY[0x227676638]();
  v5 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v6 = objc_claimAutoreleasedReturnValue();
  v7 = os_log_type_enabled(v6, OS_LOG_TYPE_INFO);
  if (a2)
  {
    if (v7)
    {
      HMFGetLogIdentifier();
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      v12 = 138543362;
      v13 = v8;
      _os_log_impl(&dword_2218F0000, v6, OS_LOG_TYPE_INFO, "%{public}@User canceled consent for removing accessory", (uint8_t *)&v12, 0xCu);

    }
    objc_autoreleasePoolPop(v4);
    v9 = *(void **)(a1 + 40);
    objc_msgSend(MEMORY[0x24BDD1540], "hmErrorWithCode:", 23);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "respondWithError:", v10);

  }
  else
  {
    if (v7)
    {
      HMFGetLogIdentifier();
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      v12 = 138543362;
      v13 = v11;
      _os_log_impl(&dword_2218F0000, v6, OS_LOG_TYPE_INFO, "%{public}@User accepted consent for removing accessory", (uint8_t *)&v12, 0xCu);

    }
    objc_autoreleasePoolPop(v4);
    objc_msgSend(*(id *)(a1 + 32), "_handleRemoveAccessoryAfterUserConsent:message:", *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 40));
  }
}

uint64_t __41__HMDHome__handleRemoveAccessoryMessage___block_invoke_1121(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "name");
}

uint64_t __40__HMDHome_handleRemoveAccessoryMessage___block_invoke(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_handleRemoveAccessoryMessage:", *(_QWORD *)(a1 + 40));
}

void __44__HMDHome_handleRemoveAccessory_completion___block_invoke(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  id v5;

  v5 = a2;
  v3 = _Block_copy(*(const void **)(a1 + 32));
  v4 = v3;
  if (v3)
    (*((void (**)(void *, id))v3 + 2))(v3, v5);

}

uint64_t __50__HMDHome___handleAddMediaAccessoryModel_message___block_invoke(uint64_t a1)
{
  void *v2;
  id v3;
  NSObject *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  int v10;
  void *v11;
  __int16 v12;
  void *v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  v2 = (void *)MEMORY[0x227676638]();
  v3 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 40), "shortDescription");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v10 = 138543618;
    v11 = v5;
    v12 = 2112;
    v13 = v6;
    _os_log_impl(&dword_2218F0000, v4, OS_LOG_TYPE_INFO, "%{public}@Going to schedule key roll operation for device if necessary for airplay accessory: %@", (uint8_t *)&v10, 0x16u);

  }
  objc_autoreleasePoolPop(v2);
  objc_msgSend(*(id *)(a1 + 32), "homeManager");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "bgOpsManager");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "scheduleHH2KeyRollForAirPlayAccessory:", *(_QWORD *)(a1 + 40));

  return +[HMDBackgroundOperationManagerHelper auditSharedUserEntriesInDatabaseForAccessory:](HMDBackgroundOperationManagerHelper, "auditSharedUserEntriesInDatabaseForAccessory:", *(_QWORD *)(a1 + 40));
}

void __50__HMDHome___handleAddMediaAccessoryModel_message___block_invoke_1113(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t i;
  void *v11;
  void *v12;
  void *v13;
  int v14;
  void *v15;
  id v16;
  NSObject *v17;
  void *v18;
  void *v19;
  void *v20;
  uint64_t v21;
  void *v22;
  id v23;
  NSObject *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  id v29;
  NSObject *v30;
  void *v31;
  void *v32;
  id v33;
  void *v34;
  void *v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  void *v43;
  void *v44;
  void *v45;
  id v46;
  void *v47;
  void *v48;
  void *v49;
  void *v50;
  void *v51;
  uint64_t v52;
  void *v53;
  void *v54;
  void *v55;
  id v56;
  NSObject *v57;
  void *v58;
  void *v59;
  void *v60;
  void *v61;
  void *v62;
  void *v63;
  void *v64;
  void *v65;
  void *v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  uint64_t v71;
  const __CFString *v72;
  uint64_t v73;
  _BYTE buf[12];
  __int16 v75;
  void *v76;
  __int16 v77;
  uint64_t v78;
  __int16 v79;
  void *v80;
  _BYTE v81[128];
  uint64_t v82;

  v82 = *MEMORY[0x24BDAC8D0];
  objc_msgSend(*(id *)(a1 + 32), "accessoryBrowser");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 40), "identifier");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "registerPairedAccessory:transports:setupHash:delegate:", v3, objc_msgSend(*(id *)(a1 + 40), "supportedTransports"), 0, *(_QWORD *)(a1 + 32));

  v69 = 0u;
  v70 = 0u;
  v67 = 0u;
  v68 = 0u;
  objc_msgSend(*(id *)(a1 + 32), "accessoryBrowser", 0);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "mediaBrowser");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "accessoryAdvertisements");
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v67, v81, 16);
  if (v7)
  {
    v8 = v7;
    v9 = *(_QWORD *)v68;
    do
    {
      for (i = 0; i != v8; ++i)
      {
        if (*(_QWORD *)v68 != v9)
          objc_enumerationMutation(v6);
        v11 = *(void **)(*((_QWORD *)&v67 + 1) + 8 * i);
        objc_msgSend(v11, "identifier");
        v12 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(*(id *)(a1 + 40), "identifier");
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        v14 = objc_msgSend(v12, "isEqualToString:", v13);

        if (v14)
          objc_msgSend(*(id *)(a1 + 40), "addAdvertisement:", v11);
      }
      v8 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v67, v81, 16);
    }
    while (v8);
  }

  objc_msgSend(*(id *)(a1 + 32), "_reachabilityChangedForAccessory:reachable:", *(_QWORD *)(a1 + 40), objc_msgSend(*(id *)(a1 + 40), "isReachable"));
  if (objc_msgSend(*(id *)(a1 + 32), "remoteAccessIsEnabled"))
  {
    v15 = (void *)MEMORY[0x227676638]();
    v16 = *(id *)(a1 + 32);
    HMFGetOSLogHandle();
    v17 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(*(id *)(a1 + 40), "name");
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      *(_QWORD *)&buf[4] = v18;
      v75 = 2112;
      v76 = v19;
      _os_log_impl(&dword_2218F0000, v17, OS_LOG_TYPE_INFO, "%{public}@Accessory %@ setting remote access enabled", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v15);
    objc_msgSend(*(id *)(a1 + 40), "remoteAccessEnabled:", 1);
  }
  objc_msgSend(*(id *)(a1 + 48), "transactionResult");
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  v21 = objc_msgSend(v20, "source");

  v22 = (void *)MEMORY[0x227676638]();
  v23 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v24 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v24, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 40), "shortDescription");
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 32), "isCurrentDeviceConfirmedPrimaryResident");
    HMFBooleanToString();
    v27 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138544130;
    *(_QWORD *)&buf[4] = v25;
    v75 = 2112;
    v76 = v26;
    v77 = 2048;
    v78 = v21;
    v79 = 2112;
    v80 = v27;
    _os_log_impl(&dword_2218F0000, v24, OS_LOG_TYPE_INFO, "%{public}@Apple media accessory %@ being added to home - source %tu. IsPrimary: %@", buf, 0x2Au);

  }
  objc_autoreleasePoolPop(v22);
  if (*(_QWORD *)(a1 + 56) && objc_msgSend(*(id *)(a1 + 40), "isCurrentAccessory"))
  {
    v28 = (void *)MEMORY[0x227676638]();
    v29 = *(id *)(a1 + 32);
    HMFGetOSLogHandle();
    v30 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v30, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v31 = (void *)objc_claimAutoreleasedReturnValue();
      v32 = *(void **)(a1 + 40);
      *(_DWORD *)buf = 138543618;
      *(_QWORD *)&buf[4] = v31;
      v75 = 2112;
      v76 = v32;
      _os_log_impl(&dword_2218F0000, v30, OS_LOG_TYPE_INFO, "%{public}@Setting up media session for current accessory during add - %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v28);
    v33 = (id)objc_msgSend(*(id *)(a1 + 32), "_addMediaSessionForCurrentAccessory:", *(_QWORD *)(a1 + 40));
  }
  v34 = *(void **)(a1 + 64);
  if (v34)
  {
    objc_msgSend(v34, "configureAudioDestinationController");
    if (objc_msgSend(*(id *)(a1 + 64), "isCurrentAccessory"))
    {
      objc_msgSend(*(id *)(a1 + 32), "accessoryBrowser");
      v35 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v35, "resetUnassociatedCurrentAccessory");

      objc_msgSend(*(id *)(a1 + 32), "createRemoteEventRouterServerIfNeeded");
      objc_msgSend(*(id *)(a1 + 32), "createCoordinationStateManagerForCurrentAccessory:", *(_QWORD *)(a1 + 64));
      objc_msgSend(*(id *)(a1 + 32), "notificationCenter");
      v36 = (void *)objc_claimAutoreleasedReturnValue();
      v37 = *(_QWORD *)(a1 + 32);
      v38 = *(_QWORD *)(a1 + 64);
      v72 = CFSTR("HMDAccessoryNotificationKey");
      v73 = v38;
      objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", &v73, &v72, 1);
      v39 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v36, "postNotificationName:object:userInfo:", CFSTR("HMDHomeManagerDidAddCurrentAccessoryNotification"), v37, v39);

      objc_msgSend(*(id *)(a1 + 72), "currentAccessorySetupMetricDispatcher");
      v40 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v40, "markSetupEndStage:error:", 7, 0);

    }
    v41 = *(void **)(a1 + 32);
    v71 = *(_QWORD *)(a1 + 64);
    objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", &v71, 1);
    v42 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v41, "configureRemoteEventRouterClientControllerForAccessories:", v42);

    objc_msgSend(*(id *)(a1 + 32), "capabilitiesAggregator");
    v43 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 64), "uuid");
    v44 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v43, "didAddAccessory:", v44);

    v45 = *(void **)(a1 + 32);
    v46 = *(id *)(a1 + 64);
    v47 = v46;
    if (v45
      && objc_msgSend(v46, "isHomePod")
      && objc_msgSend(v45, "isCurrentDevicePrimaryResident"))
    {
      objc_msgSend(v45, "fetchedAccessorySettingsSubscriber");
      v48 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v47, "uuid");
      v49 = (void *)objc_claimAutoreleasedReturnValue();
      *(_QWORD *)buf = v49;
      objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", buf, 1);
      v50 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v48, "subscribeToSettingsForAccessoryUUIDs:", v50);

    }
    objc_msgSend(*(id *)(a1 + 32), "notificationRegistrationsForAppleMediaAccessories");
    v51 = (void *)objc_claimAutoreleasedReturnValue();
    v52 = objc_msgSend(v51, "count");

    if (v52)
    {
      objc_msgSend(*(id *)(a1 + 32), "mediaStateSubscriber");
      v53 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v53, "subscribeForAppleMediaStateForAccessory:subscriptionToken:", *(_QWORD *)(a1 + 64), CFSTR("HMDHomeClientMediaStateRegistrationToken"));

    }
    objc_msgSend(*(id *)(a1 + 32), "mediaStateSubscriber");
    v54 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v54, "localSubscribeForAppleMediaStateForAccessory:", *(_QWORD *)(a1 + 64));

  }
  if (objc_msgSend(*(id *)(a1 + 40), "isCurrentAccessory"))
  {
    v55 = (void *)MEMORY[0x227676638]();
    v56 = *(id *)(a1 + 32);
    HMFGetOSLogHandle();
    v57 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v57, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v58 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      *(_QWORD *)&buf[4] = v58;
      _os_log_impl(&dword_2218F0000, v57, OS_LOG_TYPE_INFO, "%{public}@Notifying that we are a reachable accessory", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v55);
    objc_msgSend(*(id *)(a1 + 32), "notificationCenter");
    v59 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v59, "postNotificationName:object:", CFSTR("HMDHomeCurrentDeviceHasReachableAccessories"), *(_QWORD *)(a1 + 32));

    v60 = *(void **)(a1 + 64);
    if (v60)
      objc_msgSend(v60, "configureSensors");
  }
  if (*(_BYTE *)(a1 + 88))
  {
    objc_msgSend(*(id *)(a1 + 32), "residentDeviceManager");
    v61 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v61, "confirmWithCompletionHandler:", 0);

  }
  v62 = *(void **)(a1 + 32);
  objc_msgSend(*(id *)(a1 + 48), "identifier");
  v63 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v62, "retrieveAndResetNewlyConfiguredAccessoriesForAddSessionIdentifier:", v63);
  v64 = (void *)objc_claimAutoreleasedReturnValue();

  if (objc_msgSend(*(id *)(a1 + 80), "source") == 1)
  {
    objc_msgSend(*(id *)(a1 + 32), "_notifyClientOfNewlyAddedAccessories:requestMessage:", v64, *(_QWORD *)(a1 + 48));
    objc_msgSend(*(id *)(a1 + 32), "notifyOfNewlyAddedAccessoryByThisOwnerDevice:", *(_QWORD *)(a1 + 40));
  }
  else
  {
    objc_msgSend(*(id *)(a1 + 48), "respondWithPayload:", 0);
  }
  objc_msgSend(*(id *)(a1 + 32), "accessoryBrowser");
  v65 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 40), "identifier");
  v66 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v65, "removeUnassociatedAccessoryWithIdentifier:", v66);

  objc_msgSend(*(id *)(a1 + 32), "notifyOfAddedAccessory:", *(_QWORD *)(a1 + 40));
}

void __48__HMDHome___handleAddHAPAccessoryModel_message___block_invoke(uint64_t a1)
{
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

void __48__HMDHome___handleAddHAPAccessoryModel_message___block_invoke_1108(uint64_t a1)
{
  void *v2;
  id v3;
  NSObject *v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  id v10;
  NSObject *v11;
  void *v12;
  void *v13;
  uint64_t v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  uint64_t v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  char v25;
  void *v26;
  void *v27;
  id v28;
  NSObject *v29;
  void *v30;
  _QWORD block[5];
  id v32;
  uint64_t v33;
  _BYTE buf[12];
  __int16 v35;
  void *v36;
  __int16 v37;
  uint64_t v38;
  uint64_t v39;

  v39 = *MEMORY[0x24BDAC8D0];
  if (objc_msgSend(*(id *)(a1 + 32), "remoteAccessIsEnabled"))
  {
    v2 = (void *)MEMORY[0x227676638]();
    v3 = *(id *)(a1 + 32);
    HMFGetOSLogHandle();
    v4 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(*(id *)(a1 + 40), "shortDescription");
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      *(_QWORD *)&buf[4] = v5;
      v35 = 2112;
      v36 = v6;
      _os_log_impl(&dword_2218F0000, v4, OS_LOG_TYPE_INFO, "%{public}@accessory %@ setting remote access enabled", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v2);
    objc_msgSend(*(id *)(a1 + 40), "remoteAccessEnabled:", 1);
  }
  objc_msgSend(*(id *)(a1 + 32), "_reachabilityChangedForAccessory:reachable:", *(_QWORD *)(a1 + 40), objc_msgSend(*(id *)(a1 + 40), "isReachable"));
  objc_msgSend(*(id *)(a1 + 48), "transactionResult");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = objc_msgSend(v7, "source");

  if (objc_msgSend(*(id *)(a1 + 40), "isPrimary"))
  {
    v9 = (void *)MEMORY[0x227676638]();
    v10 = *(id *)(a1 + 32);
    HMFGetOSLogHandle();
    v11 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      HMFGetLogIdentifier();
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(*(id *)(a1 + 40), "shortDescription");
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      v14 = *(_QWORD *)(a1 + 56);
      *(_DWORD *)buf = 138543874;
      *(_QWORD *)&buf[4] = v12;
      v35 = 2112;
      v36 = v13;
      v37 = 2112;
      v38 = v14;
      _os_log_impl(&dword_2218F0000, v11, OS_LOG_TYPE_DEFAULT, "%{public}@accessory %@ handling added primary HAPAccessory: %@", buf, 0x20u);

    }
    objc_autoreleasePoolPop(v9);
    if (!*(_QWORD *)(a1 + 56))
    {
      objc_msgSend(*(id *)(a1 + 40), "identifier");
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      *(_QWORD *)buf = 0;
      objc_msgSend(*(id *)(a1 + 40), "matchesHAPAccessoryWithServerIdentifier:linkType:", v15, buf);
      objc_msgSend(*(id *)(a1 + 32), "accessoryBrowser");
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v16, "handleNewlyPairedAccessory:linkType:", v15, *(_QWORD *)buf);

      isWatch();
      objc_msgSend(*(id *)(a1 + 32), "__requestAccessoryBrowsing");

    }
    objc_msgSend(*(id *)(a1 + 32), "accessoryBrowser");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 40), "identifier");
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v17, "removeUnassociatedAccessoryWithIdentifier:", v18);

    objc_msgSend(*(id *)(a1 + 32), "networkProtectionGroupRegistry");
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v19, "handleAddedAccessory:", *(_QWORD *)(a1 + 40));

  }
  v20 = *(_QWORD *)(a1 + 56);
  if (v20)
  {
    objc_msgSend(*(id *)(a1 + 40), "enableNotificationsWithHAPAccessory:homeNotificationsEnabled:", v20, *(unsigned __int8 *)(a1 + 64));
  }
  else if (*(_BYTE *)(a1 + 64))
  {
    v21 = *(void **)(a1 + 32);
    v33 = *(_QWORD *)(a1 + 40);
    objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", &v33, 1);
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v21, "_subscribeForHomeNotificationsFromRemoteGateway:accessories:", 1, v22);

  }
  if (*(_QWORD *)(a1 + 56))
  {
    logAndPostNotification(CFSTR("HMDAccessoryConnectedNotification"), *(void **)(a1 + 40), 0);
    objc_msgSend(*(id *)(a1 + 40), "updateLightProfilesSettings");
  }
  objc_msgSend(*(id *)(a1 + 48), "name");
  v23 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v23, "isEqualToString:", CFSTR("kAddAccessoryRequestKey")))
  {

  }
  else
  {
    objc_msgSend(*(id *)(a1 + 48), "name");
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    v25 = objc_msgSend(v24, "isEqualToString:", CFSTR("HMDRemoteAddHAPAccessoriesMessage"));

    if ((v25 & 1) == 0)
    {
      v26 = *(void **)(a1 + 32);
      objc_msgSend(*(id *)(a1 + 48), "identifier");
      v27 = (void *)objc_claimAutoreleasedReturnValue();
      v28 = (id)objc_msgSend(v26, "retrieveAndResetNewlyConfiguredAccessoriesForAddSessionIdentifier:", v27);

      objc_msgSend(*(id *)(a1 + 48), "respondWithPayload:", 0);
    }
  }
  if (v8 == 1)
    objc_msgSend(*(id *)(a1 + 32), "notifyOfNewlyAddedAccessoryByThisOwnerDevice:", *(_QWORD *)(a1 + 40));
  objc_msgSend(*(id *)(a1 + 32), "notifyOfAddedAccessory:", *(_QWORD *)(a1 + 40));
  objc_msgSend(*(id *)(a1 + 32), "reevaluateAccessoryInfo");
  if (objc_msgSend(*(id *)(a1 + 40), "isPrimary"))
  {
    objc_msgSend(*(id *)(a1 + 32), "workQueue");
    v29 = objc_claimAutoreleasedReturnValue();
    block[0] = MEMORY[0x24BDAC760];
    block[1] = 3221225472;
    block[2] = __48__HMDHome___handleAddHAPAccessoryModel_message___block_invoke_1109;
    block[3] = &unk_24E79C268;
    v30 = *(void **)(a1 + 40);
    block[4] = *(_QWORD *)(a1 + 32);
    v32 = v30;
    dispatch_async(v29, block);

  }
}

uint64_t __48__HMDHome___handleAddHAPAccessoryModel_message___block_invoke_1109(uint64_t a1)
{
  void *v2;
  id v3;
  NSObject *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  int v10;
  void *v11;
  __int16 v12;
  void *v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  v2 = (void *)MEMORY[0x227676638]();
  v3 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 40), "shortDescription");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v10 = 138543618;
    v11 = v5;
    v12 = 2112;
    v13 = v6;
    _os_log_impl(&dword_2218F0000, v4, OS_LOG_TYPE_INFO, "%{public}@Going to schedule key roll operation for device if necessary for accessory: %@", (uint8_t *)&v10, 0x16u);

  }
  objc_autoreleasePoolPop(v2);
  objc_msgSend(*(id *)(a1 + 32), "homeManager");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "bgOpsManager");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "scheduleHH2KeyRollForAccessory:", *(_QWORD *)(a1 + 40));

  return +[HMDBackgroundOperationManagerHelper auditSharedUserEntriesInDatabaseForAccessory:](HMDBackgroundOperationManagerHelper, "auditSharedUserEntriesInDatabaseForAccessory:", *(_QWORD *)(a1 + 40));
}

uint64_t __43__HMDHome__performRemoteAddHAPAccessories___block_invoke(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  id v8;
  NSObject *v9;
  void *v10;
  void *v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  void *v18;
  id v19;
  void *v20;
  HMDRemotelyAddedAccessoryReachabilityObserver *v21;
  uint64_t v22;
  void *v23;
  HMDRemotelyAddedAccessoryReachabilityObserver *v24;
  _QWORD v26[4];
  id v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  uint8_t v32[128];
  uint8_t buf[4];
  void *v34;
  __int16 v35;
  void *v36;
  __int16 v37;
  void *v38;
  uint64_t v39;

  v39 = *MEMORY[0x24BDAC8D0];
  v3 = a2;
  v4 = *(void **)(a1 + 32);
  objc_msgSend(*(id *)(a1 + 40), "identifier");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "retrieveAndResetNewlyConfiguredAccessoriesForAddSessionIdentifier:", v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  v7 = (void *)MEMORY[0x227676638]();
  v8 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v9 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
  {
    HMFGetLogIdentifier();
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 40), "shortDescription");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543874;
    v34 = v10;
    v35 = 2112;
    v36 = v6;
    v37 = 2112;
    v38 = v11;
    _os_log_impl(&dword_2218F0000, v9, OS_LOG_TYPE_DEBUG, "%{public}@Retrieved and reset newly configured accessories: %@. Message: %@", buf, 0x20u);

  }
  objc_autoreleasePoolPop(v7);
  objc_msgSend(*(id *)(a1 + 32), "_setupActiveNetworkRouterAccessory:existingRouterAccessories:", v6, *(_QWORD *)(a1 + 48));
  v30 = 0u;
  v31 = 0u;
  v28 = 0u;
  v29 = 0u;
  v12 = v6;
  v13 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v28, v32, 16);
  if (v13)
  {
    v14 = v13;
    v15 = *(_QWORD *)v29;
    do
    {
      v16 = 0;
      do
      {
        if (*(_QWORD *)v29 != v15)
          objc_enumerationMutation(v12);
        v17 = *(id *)(*((_QWORD *)&v28 + 1) + 8 * v16);
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0)
          v18 = v17;
        else
          v18 = 0;
        v19 = v18;

        objc_msgSend(v19, "autoConfigureTargetController");
        ++v16;
      }
      while (v14 != v16);
      v14 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v28, v32, 16);
    }
    while (v14);
  }

  v26[0] = MEMORY[0x24BDAC760];
  v26[1] = 3221225472;
  v26[2] = __43__HMDHome__performRemoteAddHAPAccessories___block_invoke_1100;
  v26[3] = &unk_24E7812F8;
  v27 = *(id *)(a1 + 56);
  objc_msgSend(v12, "hmf_objectPassingTest:", v26);
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v20, "requiresWaitingToBecomeReachableAfterRemoteAdd"))
  {
    v21 = [HMDRemotelyAddedAccessoryReachabilityObserver alloc];
    v22 = *(_QWORD *)(a1 + 40);
    objc_msgSend(*(id *)(a1 + 32), "workQueue");
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    v24 = -[HMDRemotelyAddedAccessoryReachabilityObserver initWithAccessory:message:workQueue:](v21, "initWithAccessory:message:workQueue:", v20, v22, v23);

    -[HMDRemotelyAddedAccessoryReachabilityObserver start](v24, "start");
  }
  else
  {
    objc_msgSend(*(id *)(a1 + 40), "respondWithSuccess");
  }

  return 1;
}

uint64_t __43__HMDHome__performRemoteAddHAPAccessories___block_invoke_2(uint64_t a1, uint64_t a2)
{
  objc_msgSend(*(id *)(a1 + 32), "respondWithError:", a2);
  return 1;
}

uint64_t __43__HMDHome__performRemoteAddHAPAccessories___block_invoke_1100(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  uint64_t v5;

  objc_msgSend(a2, "uuid");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 32), "modelID");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v3, "isEqual:", v4);

  return v5;
}

uint64_t __42__HMDHome__handleRemoteAddHAPAccessories___block_invoke(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(a1 + 32), "_performRemoteAddHAPAccessories:", a2);
}

void __100__HMDHome__continuePairingAfterUserConsentWithAccessoryDescription_progressHandlerDelegate_message___block_invoke(id *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  NSObject *v7;
  id v8;
  id v9;
  _QWORD block[4];
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;

  v5 = a2;
  v6 = a3;
  objc_msgSend(a1[4], "workQueue");
  v7 = objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x24BDAC760];
  block[1] = 3221225472;
  block[2] = __100__HMDHome__continuePairingAfterUserConsentWithAccessoryDescription_progressHandlerDelegate_message___block_invoke_2;
  block[3] = &unk_24E790350;
  v11 = a1[5];
  v12 = a1[6];
  v13 = v6;
  v14 = a1[4];
  v15 = a1[7];
  v16 = a1[8];
  v17 = a1[9];
  v18 = v5;
  v19 = a1[10];
  v8 = v5;
  v9 = v6;
  dispatch_async(v7, block);

}

void __100__HMDHome__continuePairingAfterUserConsentWithAccessoryDescription_progressHandlerDelegate_message___block_invoke_2(uint64_t a1)
{
  void *v2;
  id v3;
  BOOL v4;
  void *v5;
  id v6;
  NSObject *v7;
  NSObject *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  _BYTE v14[12];
  __int16 v15;
  uint64_t v16;
  __int16 v17;
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v2 = *(void **)(a1 + 40);
  v3 = *(id *)(a1 + 32);
  objc_msgSend(v2, "accessoryUUID");

  objc_msgSend(*(id *)(a1 + 48), "domain");
  objc_msgSend(*(id *)(a1 + 48), "code");

  v4 = *(_QWORD *)(a1 + 48) == 0;
  v5 = (void *)MEMORY[0x227676638]();
  v6 = *(id *)(a1 + 56);
  HMFGetOSLogHandle();
  v7 = objc_claimAutoreleasedReturnValue();
  v8 = v7;
  if (v4)
  {
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)v14 = 138543362;
      *(_QWORD *)&v14[4] = v13;
      _os_log_impl(&dword_2218F0000, v8, OS_LOG_TYPE_INFO, "%{public}@Client configuration with WiFi unique PSK created successfully", v14, 0xCu);

    }
    objc_autoreleasePoolPop(v5);
    objc_msgSend(*(id *)(a1 + 80), "setNetworkCredential:", *(_QWORD *)(a1 + 88));
    objc_msgSend(*(id *)(a1 + 64), "setUsedWiFiPPSK:", 1);
    objc_msgSend(*(id *)(a1 + 32), "begin");
    *(_QWORD *)v14 = *(id *)(a1 + 32);
    objc_msgSend(*(id *)(a1 + 56), "_pairAccessoryWithAccessoryDescription:configuration:pairingEvent:progressHandler:requestMessage:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 72));
    __HMFActivityScopeLeave();

  }
  else
  {
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      v10 = *(_QWORD *)(a1 + 40);
      v11 = *(_QWORD *)(a1 + 48);
      *(_DWORD *)v14 = 138543874;
      *(_QWORD *)&v14[4] = v9;
      v15 = 2112;
      v16 = v10;
      v17 = 2112;
      v18 = v11;
      _os_log_impl(&dword_2218F0000, v8, OS_LOG_TYPE_ERROR, "%{public}@Failed to generate WiFi credential for accessory %@ with error: %@", v14, 0x20u);

    }
    objc_autoreleasePoolPop(v5);
    objc_msgSend(*(id *)(a1 + 56), "logEventSubmitter");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "submitLogEvent:error:", *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 48));

    objc_msgSend(*(id *)(a1 + 72), "respondWithError:", *(_QWORD *)(a1 + 48));
    objc_msgSend(*(id *)(a1 + 56), "_removePendingAccessoryAdd:", *(_QWORD *)(a1 + 40));
  }
}

void __74__HMDHome_createLocalAddAccessoryProgressHandler_progressHandlerDelegate___block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  id v5;
  id WeakRetained;
  void *v7;
  id v8;
  NSObject *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  int v15;
  void *v16;
  __int16 v17;
  void *v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v5 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v7 = (void *)MEMORY[0x227676638]();
  v8 = WeakRetained;
  HMFGetOSLogHandle();
  v9 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    HMSetupAccessoryProgressAsString();
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v15 = 138543618;
    v16 = v10;
    v17 = 2112;
    v18 = v11;
    _os_log_impl(&dword_2218F0000, v9, OS_LOG_TYPE_INFO, "%{public}@Local add accessory progress handler called with progress: %@", (uint8_t *)&v15, 0x16u);

  }
  objc_autoreleasePoolPop(v7);
  if (v8)
  {
    if (*(_QWORD *)(a1 + 32))
    {
      objc_msgSend(v5, "accessoryUUID");
      v12 = (void *)objc_claimAutoreleasedReturnValue();

      if (a2 == 6)
      {
        if (v12)
        {
          v13 = *(void **)(a1 + 32);
          objc_msgSend(v5, "accessoryUUID");
          v14 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v13, "localAccessoryAddRequiresConsent:", v14);

        }
      }
    }
  }

}

- (void)_handleAddAccessoryWithDescription:(void *)a3 progressHandlerDelegate:(void *)a4 message:
{
  id v7;
  id v8;
  void *v9;
  void *v10;
  unint64_t v11;
  unint64_t v12;
  id v13;
  void *v14;
  void *v15;
  _BOOL4 v16;
  uint64_t v17;
  void *v18;
  const __CFString *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void (**v27)(_QWORD, _QWORD, _QWORD);
  HMDAddAccessoryProgressState *v28;
  void *v29;
  void *v30;
  HMDAddAccessoryProgressState *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  id *v37;
  NSObject *v38;
  void *v39;
  void *v40;
  id *v41;
  NSObject *v42;
  void *v43;
  void *v44;
  BOOL v45;
  void *v46;
  id *v47;
  NSObject *v48;
  void *v49;
  void *v50;
  void *v51;
  int v52;
  id v53;
  id v54;
  uint8_t buf[4];
  void *v56;
  __int16 v57;
  void *v58;
  __int16 v59;
  void *v60;
  uint64_t v61;

  v61 = *MEMORY[0x24BDAC8D0];
  v7 = a2;
  v53 = a3;
  v8 = a4;
  v9 = v8;
  if (a1)
  {
    if ((objc_msgSend(v8, "isEntitledForSPIAccess") & 1) == 0)
    {
      v36 = (void *)MEMORY[0x227676638]();
      v37 = a1;
      HMFGetOSLogHandle();
      v38 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v38, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v39 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543362;
        v56 = v39;
        _os_log_impl(&dword_2218F0000, v38, OS_LOG_TYPE_ERROR, "%{public}@Client does not have entitlement to use SPI", buf, 0xCu);

      }
      objc_autoreleasePoolPop(v36);
      objc_msgSend(MEMORY[0x24BDD1540], "hmErrorWithCode:", 17);
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v9, "respondWithError:", v14);
      goto LABEL_31;
    }
    objc_msgSend(a1, "accessories");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v11 = objc_msgSend(v10, "count");
    v12 = maximumAccessoriesPerHome;

    if (v11 >= v12)
    {
      v40 = (void *)MEMORY[0x227676638]();
      v41 = a1;
      HMFGetOSLogHandle();
      v42 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v42, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v43 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543362;
        v56 = v43;
        _os_log_impl(&dword_2218F0000, v42, OS_LOG_TYPE_INFO, "%{public}@Can't add additional accessories; already at maximum accessories for home",
          buf,
          0xCu);

      }
      objc_autoreleasePoolPop(v40);
      objc_msgSend(MEMORY[0x24BDD1540], "hmErrorWithCode:", 49);
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v9, "respondWithError:", v14);
      goto LABEL_31;
    }
    v54 = 0;
    v52 = objc_msgSend(a1, "_shouldAllowAddingAccessoryWithDescription:requestMessage:error:", v7, v9, &v54);
    v13 = v54;
    v14 = v13;
    if ((v52 & 1) != 0)
      goto LABEL_5;
    objc_msgSend(v13, "domain");
    v44 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v44, "isEqualToString:", *MEMORY[0x24BDD5BD8]))
    {
      v45 = objc_msgSend(v14, "code") == 97;

      if (v45)
      {
LABEL_5:
        objc_msgSend(v7, "appIdentifier");
        v15 = (void *)objc_claimAutoreleasedReturnValue();
        v16 = v15 == 0;

        if (v16)
        {
          objc_msgSend(v9, "applicationBundleIdentifier");
          v17 = objc_claimAutoreleasedReturnValue();
          v18 = (void *)v17;
          if (v17)
            v19 = (const __CFString *)v17;
          else
            v19 = &stru_24E79DB48;
          objc_msgSend(v7, "updateAppIdentifier:", v19);

        }
        os_unfair_recursive_lock_lock_with_options();
        objc_msgSend(a1[105], "setObject:forKey:", v9, v7);
        os_unfair_recursive_lock_unlock();
        objc_msgSend(a1, "accessoryBrowser");
        v20 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v20, "unpairedHAPAccessoryWithAccessoryDescription:", v7);
        v21 = (void *)objc_claimAutoreleasedReturnValue();

        objc_msgSend(v21, "category");
        v22 = (void *)objc_claimAutoreleasedReturnValue();
        if (!v22)
        {
          v23 = (void *)MEMORY[0x24BDD7338];
          objc_msgSend(v7, "setupAccessoryPayload");
          v24 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v24, "categoryNumber");
          v25 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v23, "categoryWithCategoryIdentifier:", v25);
          v22 = (void *)objc_claimAutoreleasedReturnValue();

        }
        objc_msgSend(v21, "uuid");
        v26 = (void *)objc_claimAutoreleasedReturnValue();
        HMDHomeCreateAddAccessoryProgressHandler(a1, v7, v9);
        v27 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();

        v28 = [HMDAddAccessoryProgressState alloc];
        objc_msgSend(v21, "uuid");
        v29 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v21, "name");
        v30 = (void *)objc_claimAutoreleasedReturnValue();
        v31 = -[HMDAddAccessoryProgressState initWithUUID:accessoryName:manufacturerName:category:certificationStatus:productData:](v28, "initWithUUID:accessoryName:manufacturerName:category:certificationStatus:productData:", v29, v30, 0, v22, 0, 0);

        objc_msgSend(a1, "accessoryBrowser");
        v32 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v21, "uuid");
        v33 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v32, "registerProgressHandler:unpairedAccessoryUUID:", v27, v33);

        if (v52)
        {
          objc_msgSend(v7, "accessoryUUID");
          v34 = (void *)objc_claimAutoreleasedReturnValue();

          if (v34)
          {
            objc_msgSend(v7, "accessoryUUID");
            v35 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(a1, "_continuePairingAfterUserConsentWithAccessoryUUID:orUnassociatedAccessory:message:", v35, 0, v9);

          }
          else
          {
            objc_msgSend(a1, "_continuePairingAfterUserConsentWithAccessoryDescription:progressHandlerDelegate:message:", v7, v53, v9);
          }
        }
        else
        {
          ((void (**)(_QWORD, uint64_t, HMDAddAccessoryProgressState *))v27)[2](v27, 9, v31);
        }

LABEL_31:
        goto LABEL_32;
      }
    }
    else
    {

    }
    v46 = (void *)MEMORY[0x227676638]();
    v47 = a1;
    HMFGetOSLogHandle();
    v48 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v48, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v49 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v7, "category");
      v50 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v50, "localizedDescription");
      v51 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543874;
      v56 = v49;
      v57 = 2112;
      v58 = v51;
      v59 = 2112;
      v60 = v14;
      _os_log_impl(&dword_2218F0000, v48, OS_LOG_TYPE_INFO, "%{public}@Cannot add an accessory of category '%@', error %@", buf, 0x20u);

    }
    objc_autoreleasePoolPop(v46);
    objc_msgSend(v9, "respondWithError:", v14);
    goto LABEL_31;
  }
LABEL_32:

}

- (void)_addMediaAccessory:(void *)a3 message:
{
  id v5;
  id v6;
  void *v7;
  int v8;
  void *v9;
  id v10;
  NSObject *v11;
  void *v12;
  void *v13;
  void *v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  void *v18;
  int v19;
  void *v20;
  id v21;
  NSObject *v22;
  void *v23;
  _QWORD v24[5];
  id v25;
  id v26;
  _QWORD v27[4];
  id v28;
  uint64_t *v29;
  _BYTE *v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint8_t v35[4];
  void *v36;
  _BYTE buf[24];
  uint64_t (*v38)(uint64_t, uint64_t);
  void (*v39)(uint64_t);
  id v40;
  uint64_t v41;

  v41 = *MEMORY[0x24BDAC8D0];
  v5 = a2;
  v6 = a3;
  if (a1)
  {
    objc_msgSend(v5, "identifier");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = objc_msgSend(v7, "isEqualToString:", CFSTR("00000000-0000-0000-0000-C2EE6102B308"));

    if (v8)
    {
      v9 = (void *)MEMORY[0x227676638]();
      v10 = a1;
      HMFGetOSLogHandle();
      v11 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v12 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        *(_QWORD *)&buf[4] = v12;
        *(_WORD *)&buf[12] = 2112;
        *(_QWORD *)&buf[14] = v5;
        _os_log_impl(&dword_2218F0000, v11, OS_LOG_TYPE_ERROR, "%{public}@The accessory %@ has an unknown media route identifier", buf, 0x16u);

      }
      objc_autoreleasePoolPop(v9);
      objc_msgSend(MEMORY[0x24BDD1540], "hmPrivateErrorWithCode:", 9001);
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v6, "respondWithError:", v13);

    }
    else
    {
      v31 = 0;
      v32 = &v31;
      v33 = 0x2020000000;
      v34 = 0;
      *(_QWORD *)buf = 0;
      *(_QWORD *)&buf[8] = buf;
      *(_QWORD *)&buf[16] = 0x3032000000;
      v38 = __Block_byref_object_copy__14094;
      v39 = __Block_byref_object_dispose__14095;
      v40 = 0;
      objc_msgSend(a1, "appleMediaAccessories");
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      v15 = MEMORY[0x24BDAC760];
      v27[0] = MEMORY[0x24BDAC760];
      v27[1] = 3221225472;
      v27[2] = __38__HMDHome__addMediaAccessory_message___block_invoke;
      v27[3] = &unk_24E776298;
      v16 = v5;
      v28 = v16;
      v29 = &v31;
      v30 = buf;
      objc_msgSend(v14, "na_each:", v27);

      if (v32[3] >= 1)
      {
        v17 = *(_QWORD *)(*(_QWORD *)&buf[8] + 40);
        if (v17)
          objc_msgSend(a1, "_submitRemovalLogEventForAccessory:isLocalRemoval:isLocalFallback:isDuplicate:duplicateCount:error:", v17, 0, 0, 1);
      }
      objc_msgSend(a1, "administratorHandler");
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      v19 = objc_msgSend(v18, "shouldRelayMessages");

      if (v19)
      {
        v20 = (void *)MEMORY[0x227676638]();
        v21 = a1;
        HMFGetOSLogHandle();
        v22 = (id)objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v22, OS_LOG_TYPE_INFO))
        {
          HMFGetLogIdentifier();
          v23 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)v35 = 138543362;
          v36 = v23;
          _os_log_impl(&dword_2218F0000, v22, OS_LOG_TYPE_INFO, "%{public}@This is not the primary resident, so sending the add media accessory request to primary", v35, 0xCu);

        }
        objc_autoreleasePoolPop(v20);
        v24[0] = v15;
        v24[1] = 3221225472;
        v24[2] = __38__HMDHome__addMediaAccessory_message___block_invoke_1086;
        v24[3] = &unk_24E79BBD0;
        v24[4] = v21;
        v25 = v16;
        v26 = v6;
        -[HMDHome _remotelyAddMediaAccessory:usingRemoteMessageName:message:fallbackBlock:](v21, v25, CFSTR("HMDRemoteAddMediaAccessoryRequestMessage"), v26, v24);

      }
      else
      {
        -[HMDHome _locallyAddMediaAccessory:message:](a1, v16, v6);
      }

      _Block_object_dispose(buf, 8);
      _Block_object_dispose(&v31, 8);
    }
  }

}

void __38__HMDHome__addMediaAccessory_message___block_invoke(uint64_t a1, void *a2)
{
  void *v4;
  void *v5;
  int v6;
  id v7;

  v7 = a2;
  if (objc_msgSend(v7, "isHomePod"))
  {
    objc_msgSend(*(id *)(a1 + 32), "serialNumber");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "serialNumber");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = objc_msgSend(v4, "isEqualToString:", v5);

    if (v6)
    {
      ++*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24);
      objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), a2);
    }
  }

}

void __38__HMDHome__addMediaAccessory_message___block_invoke_1086(void **a1)
{
  -[HMDHome _locallyAddMediaAccessory:message:](a1[4], a1[5], a1[6]);
}

- (void)_remotelyAddMediaAccessory:(void *)a3 usingRemoteMessageName:(void *)a4 message:(void *)a5 fallbackBlock:
{
  id v9;
  id v10;
  id v11;
  void *v12;
  _QWORD *v13;
  NSObject *v14;
  void *v15;
  void *v16;
  id v17;
  void *v18;
  void *v19;
  void *v20;
  id v21;
  NSObject *v22;
  NSObject *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  _QWORD *v31;
  NSObject *v32;
  void *v33;
  void *v34;
  _QWORD *v35;
  NSObject *v36;
  void *v37;
  HMDRemoteHomeMessageDestination *v38;
  void *v39;
  void *v40;
  void *v41;
  HMDRemoteHomeMessageDestination *v42;
  void *v43;
  void *v44;
  void *v45;
  void *v46;
  void *v47;
  id v48;
  void *v49;
  id v50;
  _QWORD v51[5];
  id v52;
  id v53;
  id v54;
  unint64_t v55;
  id v56;
  id v57;
  uint64_t v58;
  void *v59;
  uint8_t buf[4];
  void *v61;
  __int16 v62;
  id v63;
  uint64_t v64;

  v64 = *MEMORY[0x24BDAC8D0];
  v9 = a2;
  v50 = a3;
  v10 = a4;
  v11 = a5;
  if (a1)
  {
    v12 = (void *)MEMORY[0x227676638]();
    v13 = a1;
    HMFGetOSLogHandle();
    v14 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      HMFGetLogIdentifier();
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v61 = v15;
      v62 = 2112;
      v63 = v9;
      _os_log_impl(&dword_2218F0000, v14, OS_LOG_TYPE_DEFAULT, "%{public}@Remotely adding unassociated media accessory: %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v12);
    v57 = 0;
    objc_msgSend(MEMORY[0x24BDD1618], "archivedDataWithRootObject:requiringSecureCoding:error:", v9, 1, &v57);
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    v17 = v57;
    if (v16)
    {
      v18 = (void *)MEMORY[0x24BDD1618];
      objc_msgSend(MEMORY[0x24BDD1880], "UUID");
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      v56 = v17;
      objc_msgSend(v18, "archivedDataWithRootObject:requiringSecureCoding:error:", v19, 1, &v56);
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      v21 = v56;

      if (v20)
      {
        v22 = v13[18];
        if (os_signpost_enabled(v22))
        {
          v23 = v22;
          objc_msgSend(v9, "uuid");
          v24 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138412290;
          v61 = v24;
          _os_signpost_emit_with_name_impl(&dword_2218F0000, v23, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "RemotelyAddAccessory", "accessoryUUID=%{signpost.description:attribute}@ ", buf, 0xCu);

        }
        v25 = (void *)objc_msgSend(v10, "mutableCopy");
        objc_msgSend(v25, "setName:", v50);
        objc_msgSend(v10, "identifier");
        v26 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v25, "setIdentifier:", v26);

        objc_msgSend(v10, "untrustedClientIdentifier");
        v27 = (void *)objc_claimAutoreleasedReturnValue();

        v48 = v21;
        v49 = v11;
        if (v27)
        {
          v58 = *MEMORY[0x24BE3EC00];
          objc_msgSend(v10, "untrustedClientIdentifier");
          v28 = (void *)objc_claimAutoreleasedReturnValue();
          v59 = v28;
          objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", &v59, &v58, 1);
          v29 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v25, "setHeaders:", v29);

        }
        else
        {
          objc_msgSend(v25, "setHeaders:", MEMORY[0x24BDBD1B8]);
        }
        v38 = [HMDRemoteHomeMessageDestination alloc];
        objc_msgSend(v10, "destination");
        v39 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v39, "target");
        v40 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v13, "uuid");
        v41 = (void *)objc_claimAutoreleasedReturnValue();
        v42 = -[HMDRemoteHomeMessageDestination initWithTarget:homeUUID:queueTimeout:](v38, "initWithTarget:homeUUID:queueTimeout:", v40, v41, &unk_24E971448);
        objc_msgSend(v25, "setDestination:", v42);

        objc_msgSend(v10, "messagePayload");
        v43 = (void *)objc_claimAutoreleasedReturnValue();
        v44 = (void *)objc_msgSend(v43, "mutableCopy");

        objc_msgSend(v44, "setObject:forKey:", v16, CFSTR("kAccessoryEncodedMediaAccessoryKey"));
        objc_msgSend(v44, "setObject:forKey:", v20, CFSTR("HMDEncodedResidentUUIDKey"));
        v45 = (void *)objc_msgSend(v44, "copy");
        objc_msgSend(v25, "setMessagePayload:", v45);

        v51[0] = MEMORY[0x24BDAC760];
        v51[1] = 3221225472;
        v51[2] = __83__HMDHome__remotelyAddMediaAccessory_usingRemoteMessageName_message_fallbackBlock___block_invoke;
        v51[3] = &unk_24E7762C0;
        v51[4] = v13;
        v52 = v9;
        v53 = v10;
        v54 = v49;
        v55 = 0xEEEEB0B5B2B2EEEELL;
        objc_msgSend(v25, "setResponseHandler:", v51);
        objc_msgSend(v13, "residentSyncManager");
        v46 = (void *)objc_claimAutoreleasedReturnValue();
        v47 = (void *)objc_msgSend(v25, "copy");
        objc_msgSend(v46, "performResidentRequest:options:", v47, 0);

        v11 = v49;
        v21 = v48;
      }
      else
      {
        v34 = (void *)MEMORY[0x227676638]();
        v35 = v13;
        HMFGetOSLogHandle();
        v36 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v36, OS_LOG_TYPE_ERROR))
        {
          HMFGetLogIdentifier();
          v37 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543618;
          v61 = v37;
          v62 = 2112;
          v63 = v21;
          _os_log_impl(&dword_2218F0000, v36, OS_LOG_TYPE_ERROR, "%{public}@Failed to encode uuid for remotely add accessory %@", buf, 0x16u);

        }
        objc_autoreleasePoolPop(v34);
        objc_msgSend(MEMORY[0x24BDD1540], "hmErrorWithCode:", 20);
        v25 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v10, "respondWithError:", v25);
      }

      v17 = v21;
    }
    else
    {
      v30 = (void *)MEMORY[0x227676638]();
      v31 = v13;
      HMFGetOSLogHandle();
      v32 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v33 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        v61 = v33;
        v62 = 2112;
        v63 = v17;
        _os_log_impl(&dword_2218F0000, v32, OS_LOG_TYPE_ERROR, "%{public}@Unable to encode media accessory %@", buf, 0x16u);

      }
      objc_autoreleasePoolPop(v30);
      objc_msgSend(MEMORY[0x24BDD1540], "hmErrorWithCode:", 3);
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v10, "respondWithError:", v20);
    }

  }
}

- (void)_locallyAddMediaAccessory:(void *)a3 message:
{
  id v5;
  void *v6;
  id v7;
  NSObject *v8;
  void *v9;
  void *v10;
  void *v11;
  NSObject *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  uint64_t v27;
  id v28;
  void *v29;
  void *v30;
  id v31;
  NSObject *v32;
  void *v33;
  id v34;
  void *v35;
  void *v36;
  void *v37;
  id v38;
  _QWORD v39[5];
  id v40;
  _QWORD v41[4];
  id v42;
  id v43;
  id v44;
  id v45;
  id location;
  uint8_t buf[4];
  void *v48;
  __int16 v49;
  id v50;
  __int16 v51;
  void *v52;
  __int16 v53;
  void *v54;
  uint64_t v55;

  v55 = *MEMORY[0x24BDAC8D0];
  v38 = a2;
  v5 = a3;
  if (a1)
  {
    v6 = (void *)MEMORY[0x227676638]();
    v7 = a1;
    HMFGetOSLogHandle();
    v8 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v5, "shortDescription");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v7, "isCurrentDevicePrimaryResident");
      HMFBooleanToString();
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138544130;
      v48 = v9;
      v49 = 2112;
      v50 = v38;
      v51 = 2112;
      v52 = v10;
      v53 = 2112;
      v54 = v11;
      _os_log_impl(&dword_2218F0000, v8, OS_LOG_TYPE_INFO, "%{public}@Performing local add of media accessory: %@. Message: %@ - isPrimaryResident: %@", buf, 0x2Au);

    }
    objc_autoreleasePoolPop(v6);
    HMFGetOSLogHandle();
    v12 = (id)objc_claimAutoreleasedReturnValue();
    if (os_signpost_enabled(v12))
    {
      objc_msgSend(v38, "uuid");
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138412290;
      v48 = v13;
      _os_signpost_emit_with_name_impl(&dword_2218F0000, v12, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "AddAccessory", "accessoryUUID=%{signpost.description:attribute}@ ", buf, 0xCu);

    }
    objc_msgSend(v38, "addTransactionForHome:", v7);
    v37 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "roomForEntireHome");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v14, "uuid");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v15, "UUIDString");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v37, "setRoomUUID:", v16);

    objc_msgSend(v5, "untrustedClientIdentifier");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    +[HMDBackingStoreTransactionOptions defaultXPCOptionsWithClientIdentifier:](HMDBackingStoreTransactionOptions, "defaultXPCOptionsWithClientIdentifier:", v17);
    v35 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v7, "backingStore");
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "name");
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v18, "transaction:options:", v19, v35);
    v36 = (void *)objc_claimAutoreleasedReturnValue();

    objc_initWeak(&location, v7);
    v20 = (void *)objc_msgSend(v5, "mutableCopy");
    v21 = (void *)MEMORY[0x24BDD1618];
    objc_msgSend(MEMORY[0x24BDD1880], "UUID");
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    v45 = 0;
    objc_msgSend(v21, "archivedDataWithRootObject:requiringSecureCoding:error:", v22, 1, &v45);
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    v34 = v45;

    if (v23)
    {
      objc_msgSend(v5, "messagePayload");
      v24 = (void *)objc_claimAutoreleasedReturnValue();
      v25 = (void *)objc_msgSend(v24, "mutableCopy");

      objc_msgSend(v25, "setObject:forKey:", v23, CFSTR("HMDEncodedResidentUUIDKey"));
      v26 = (void *)objc_msgSend(v25, "copy");
      objc_msgSend(v20, "setMessagePayload:", v26);

      v27 = MEMORY[0x24BDAC760];
      v41[0] = MEMORY[0x24BDAC760];
      v41[1] = 3221225472;
      v41[2] = __45__HMDHome__locallyAddMediaAccessory_message___block_invoke;
      v41[3] = &unk_24E79ACA8;
      v42 = v5;
      objc_copyWeak(&v44, &location);
      v28 = v38;
      v43 = v28;
      objc_msgSend(v20, "setResponseHandler:", v41);
      v29 = (void *)objc_msgSend(v20, "copy");
      objc_msgSend(v36, "add:withMessage:", v37, v29);

      v39[0] = v27;
      v39[1] = 3221225472;
      v39[2] = __45__HMDHome__locallyAddMediaAccessory_message___block_invoke_2;
      v39[3] = &unk_24E79BCC8;
      v39[4] = v7;
      v40 = v28;
      objc_msgSend(v36, "run:", v39);
      if (os_signpost_enabled(v12))
      {
        *(_WORD *)buf = 0;
        _os_signpost_emit_with_name_impl(&dword_2218F0000, v12, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "AddAccessory", ", buf, 2u);
      }

      objc_destroyWeak(&v44);
    }
    else
    {
      v30 = (void *)MEMORY[0x227676638]();
      v31 = v7;
      HMFGetOSLogHandle();
      v32 = (id)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v33 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        v48 = v33;
        v49 = 2112;
        v50 = v34;
        _os_log_impl(&dword_2218F0000, v32, OS_LOG_TYPE_ERROR, "%{public}@Failed to encode uuid for locally add accessory %@", buf, 0x16u);

      }
      objc_autoreleasePoolPop(v30);
      objc_msgSend(MEMORY[0x24BDD1540], "hmErrorWithCode:", 20);
      v25 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v5, "respondWithError:", v25);
    }

    objc_destroyWeak(&location);
  }

}

void __45__HMDHome__locallyAddMediaAccessory_message___block_invoke(id *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id WeakRetained;
  id v8;
  uint64_t v9;
  void *v10;
  void *v11;
  id v12;
  void *v13;
  id v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  void *v19;
  id v20;
  void *v21;
  void *v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  void *v29;
  id v30;
  _QWORD v31[5];
  id v32;
  id v33;
  id v34;
  id v35;
  _QWORD v36[5];
  id v37;
  id v38;

  v5 = a2;
  v6 = a3;
  if (v5)
  {
    objc_msgSend(a1[4], "respondWithError:", v5);
  }
  else
  {
    WeakRetained = objc_loadWeakRetained(a1 + 6);
    v8 = a1[4];
    if (WeakRetained)
    {
      objc_msgSend(a1[4], "dataForKey:", CFSTR("HMDEncodedResidentUUIDKey"));
      v9 = objc_claimAutoreleasedReturnValue();
      if (v9)
      {
        v30 = 0;
        objc_msgSend(MEMORY[0x24BDD1620], "unarchivedObjectOfClass:fromData:error:", objc_opt_class(), v9, &v30);
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        v5 = v30;
      }
      else
      {
        v5 = 0;
        v10 = 0;
      }
      v29 = (void *)v9;
      v12 = a1[5];
      v27 = v10;
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0)
        v13 = v12;
      else
        v13 = 0;
      v14 = v13;
      objc_msgSend(v14, "device");
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      v16 = MEMORY[0x24BDAC760];
      if (v15)
      {
        +[HMDCoreData sharedInstance](HMDCoreData, "sharedInstance", v27, v9);
        v17 = v16;
        v18 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v18, "contextWithRootPartition");
        v19 = (void *)objc_claimAutoreleasedReturnValue();

        v16 = v17;
        v36[0] = v17;
        v36[1] = 3221225472;
        v36[2] = __75__HMDHome__associateResidentAndDeviceWithAddedMediaAccessory_residentUUID___block_invoke;
        v36[3] = &unk_24E79BBD0;
        v36[4] = WeakRetained;
        v37 = v15;
        v38 = v19;
        v20 = v19;
        objc_msgSend(v20, "unsafeSynchronousBlock:", v36);

      }
      objc_msgSend(WeakRetained, "backingStore", v27);
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v21, "context");
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      v31[0] = v16;
      v31[1] = 3221225472;
      v31[2] = __75__HMDHome__associateResidentAndDeviceWithAddedMediaAccessory_residentUUID___block_invoke_2;
      v31[3] = &unk_24E79AD20;
      v31[4] = WeakRetained;
      v23 = v12;
      v32 = v23;
      v24 = v28;
      v33 = v24;
      v34 = v14;
      v35 = v15;
      v25 = v15;
      v26 = v14;
      objc_msgSend(v22, "unsafeSynchronousBlock:", v31);

      objc_msgSend(a1[4], "respondWithPayload:", v6);
    }
    else
    {
      objc_msgSend(MEMORY[0x24BDD1540], "hmPrivateErrorWithCode:", 2018);
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v8, "respondWithError:", v11);

      v5 = 0;
    }

  }
}

void __45__HMDHome__locallyAddMediaAccessory_message___block_invoke_2(uint64_t a1)
{
  void *v1;
  id v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  id v7;
  int v8;
  id v9;
  void *v10;
  id v11;
  void *v12;
  void *v13;
  void *v14;
  id v15;
  NSObject *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  int v23;
  int v24;
  void *v25;
  __int16 v26;
  void *v27;
  __int16 v28;
  void *v29;
  __int16 v30;
  void *v31;
  uint64_t v32;

  v32 = *MEMORY[0x24BDAC8D0];
  v1 = *(void **)(a1 + 32);
  v2 = *(id *)(a1 + 40);
  v3 = v2;
  if (v1)
  {
    objc_msgSend(v2, "uuid");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "accessoryWithUUID:", v4);
    v5 = (void *)objc_claimAutoreleasedReturnValue();

    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
      v6 = v5;
    else
      v6 = 0;
    v7 = v6;

    if ((objc_msgSend(v7, "supportsTargetControl") & 1) != 0)
    {
      v8 = 1;
    }
    else
    {
      v9 = v3;
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0)
        v10 = v9;
      else
        v10 = 0;
      v11 = v10;

      objc_msgSend(v11, "device");
      v12 = (void *)objc_claimAutoreleasedReturnValue();

      objc_msgSend(v12, "capabilities");
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      v8 = objc_msgSend(v13, "supportsTargetControl");

    }
    v14 = (void *)MEMORY[0x227676638]();
    v15 = v1;
    HMFGetOSLogHandle();
    v16 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v7, "shortDescription");
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v7, "supportsTargetControl");
      HMFBooleanToString();
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      HMFBooleanToString();
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      v24 = 138544130;
      v25 = v17;
      v26 = 2112;
      v27 = v18;
      v28 = 2112;
      v29 = v19;
      v30 = 2112;
      v31 = v20;
      _os_log_impl(&dword_2218F0000, v16, OS_LOG_TYPE_INFO, "%{public}@Checking for auto-Configuring current target controllers with the newly added media accessory: %@ (%@/%@)", (uint8_t *)&v24, 0x2Au);

    }
    objc_autoreleasePoolPop(v14);
    if (v8)
    {
      objc_msgSend(MEMORY[0x24BE3F248], "sharedPreferences");
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v21, "preferenceForKey:", CFSTR("autoConfigureNewTargets"));
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      v23 = objc_msgSend(v22, "BOOLValue");

      if (v23)
        objc_msgSend(v7, "autoConfigureTargetControllers");
    }

  }
}

void __75__HMDHome__associateResidentAndDeviceWithAddedMediaAccessory_residentUUID___block_invoke(uint64_t a1)
{
  void *v2;
  id v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  id v11;
  NSObject *v12;
  void *v13;
  void *v14;
  void *v15;
  id v16;
  NSObject *v17;
  void *v18;
  void *v19;
  void *v20;
  id v21;
  NSObject *v22;
  void *v23;
  id v24;
  uint8_t buf[4];
  void *v26;
  __int16 v27;
  id v28;
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  v2 = *(void **)(a1 + 32);
  v3 = *(id *)(a1 + 40);
  if (v2)
  {
    v24 = v3;
    objc_msgSend(v3, "identifier");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    +[HMCContext findDeviceWithDeviceIdentifier:](HMCContext, "findDeviceWithDeviceIdentifier:", v4);
    v5 = (void *)objc_claimAutoreleasedReturnValue();

    if (v5)
    {
LABEL_3:
      objc_msgSend(v24, "updateBackingModel:error:", v5, 0);

      objc_msgSend(*(id *)(a1 + 48), "save");
      return;
    }
    +[HMDAppleAccountManager sharedManager](HMDAppleAccountManager, "sharedManager");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "account");
    v7 = (void *)objc_claimAutoreleasedReturnValue();

    if (v7)
    {
      objc_msgSend(v7, "modelIdentifier");
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      +[HMCContext findAccountWithModelID:](HMCContext, "findAccountWithModelID:", v8);
      v9 = (void *)objc_claimAutoreleasedReturnValue();

      if (v9)
      {
        v10 = (void *)MEMORY[0x227676638](objc_msgSend(v24, "setAccount:", v7));
        v11 = v2;
        HMFGetOSLogHandle();
        v12 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
        {
          HMFGetLogIdentifier();
          v13 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543618;
          v26 = v13;
          v27 = 2112;
          v28 = v24;
          _os_log_impl(&dword_2218F0000, v12, OS_LOG_TYPE_DEFAULT, "%{public}@Creating MKFDevice for incoming accessory %@", buf, 0x16u);

        }
        objc_autoreleasePoolPop(v10);
        objc_msgSend(v24, "modelIdentifier");
        v14 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v9, "materializeOrCreateDevicesRelationWithModelID:createdNew:", v14, 0);
        v5 = (void *)objc_claimAutoreleasedReturnValue();

        goto LABEL_3;
      }
      v20 = (void *)MEMORY[0x227676638]();
      v21 = v2;
      HMFGetOSLogHandle();
      v22 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v23 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        v26 = v23;
        v27 = 2112;
        v28 = v7;
        _os_log_impl(&dword_2218F0000, v22, OS_LOG_TYPE_ERROR, "%{public}@MKFAccount not found for account %@", buf, 0x16u);

      }
      objc_autoreleasePoolPop(v20);

    }
    else
    {
      v15 = (void *)MEMORY[0x227676638]();
      v16 = v2;
      HMFGetOSLogHandle();
      v17 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v18 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v24, "identifier");
        v19 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        v26 = v18;
        v27 = 2112;
        v28 = v19;
        _os_log_impl(&dword_2218F0000, v17, OS_LOG_TYPE_ERROR, "%{public}@No MKFDevice found with identifier %@ and no HMDAccount available to create one", buf, 0x16u);

      }
      objc_autoreleasePoolPop(v15);
    }

  }
  else
  {

  }
}

void __75__HMDHome__associateResidentAndDeviceWithAddedMediaAccessory_residentUUID___block_invoke_2(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  id v7;
  NSObject *v8;
  NSObject *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  id v17;
  NSObject *v18;
  void *v19;
  void *v20;
  const __CFString *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  uint64_t v27;
  void *v28;
  void *v29;
  void *v30;
  id v31;
  NSObject *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  id v38;
  NSObject *v39;
  void *v40;
  void *v41;
  void *v42;
  void *v43;
  void *v44;
  id v45;
  NSObject *v46;
  void *v47;
  void *v48;
  void *v49;
  void *v50;
  void *v51;
  void *v52;
  void *v53;
  id v54;
  NSObject *v55;
  void *v56;
  uint64_t v57;
  void *v58;
  void *v59;
  id v60;
  NSObject *v61;
  void *v62;
  void *v63;
  void *v64;
  id v65;
  NSObject *v66;
  void *v67;
  void *v68;
  void *v69;
  void *v70;
  void *v71;
  void *v72;
  char v73;
  uint8_t buf[4];
  void *v75;
  __int16 v76;
  uint64_t v77;
  __int16 v78;
  void *v79;
  __int16 v80;
  void *v81;
  _QWORD v82[2];

  v82[1] = *MEMORY[0x24BDAC8D0];
  objc_msgSend(*(id *)(a1 + 32), "uuid");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  +[HMCContext findHomeWithModelID:](HMCContext, "findHomeWithModelID:", v2);
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(*(id *)(a1 + 40), "uuid");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  +[HMCContext findAppleMediaAccessoryWithModelID:](HMCContext, "findAppleMediaAccessoryWithModelID:", v4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = (void *)MEMORY[0x227676638]();
  v7 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v8 = objc_claimAutoreleasedReturnValue();
  v9 = v8;
  if (v5)
  {
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      HMFGetLogIdentifier();
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v75 = v10;
      v76 = 2112;
      v77 = (uint64_t)v5;
      _os_log_impl(&dword_2218F0000, v9, OS_LOG_TYPE_DEFAULT, "%{public}@Creating resident object for newly added accessory: %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v6);
    v73 = 0;
    v11 = (void *)MEMORY[0x24BDD1880];
    objc_msgSend(*(id *)(a1 + 32), "uuid");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "UUIDString");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    v82[0] = v13;
    objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", v82, 1);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "hm_deriveUUIDFromBaseUUID:withSalts:", v12, v14);
    v15 = (void *)objc_claimAutoreleasedReturnValue();

    v16 = (void *)MEMORY[0x227676638]();
    v17 = *(id *)(a1 + 32);
    HMFGetOSLogHandle();
    v18 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      v20 = *(void **)(a1 + 48);
      v21 = CFSTR("random");
      *(_DWORD *)buf = 138543874;
      v75 = v19;
      if (!v20)
        v21 = CFSTR("derived");
      v76 = 2112;
      if (!v20)
        v20 = v15;
      v77 = (uint64_t)v21;
      v78 = 2112;
      v79 = v20;
      _os_log_impl(&dword_2218F0000, v18, OS_LOG_TYPE_INFO, "%{public}@Create resident with %@ UUID: %@", buf, 0x20u);

    }
    objc_autoreleasePoolPop(v16);
    if (*(_QWORD *)(a1 + 48))
      v22 = *(void **)(a1 + 48);
    else
      v22 = v15;
    objc_msgSend(v3, "materializeOrCreateResidentsRelationWithModelID:createdNew:", v22, &v73);
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v23, "setAppleMediaAccessory:", v5);
    objc_msgSend(*(id *)(a1 + 56), "rawResidentCapabilities");
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v23, "setResidentCapabilities:", v24);

    objc_msgSend(*(id *)(a1 + 32), "accessoryWithUUID:", v4);
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v25, "name");
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v23, "setName:", v26);

    objc_msgSend(v5, "idsIdentifier");
    v27 = objc_claimAutoreleasedReturnValue();
    v72 = v3;
    if (v27)
    {
      v28 = (void *)v27;
      objc_msgSend(v23, "idsIdentifier");
      v29 = (void *)objc_claimAutoreleasedReturnValue();

      if (!v29)
      {
        v30 = (void *)MEMORY[0x227676638]();
        v31 = *(id *)(a1 + 32);
        HMFGetOSLogHandle();
        v32 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT))
        {
          HMFGetLogIdentifier();
          v33 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v5, "idsIdentifier");
          v34 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138544130;
          v75 = v33;
          v76 = 2160;
          v77 = 1752392040;
          v78 = 2112;
          v79 = v34;
          v80 = 2112;
          v81 = v5;
          _os_log_impl(&dword_2218F0000, v32, OS_LOG_TYPE_DEFAULT, "%{public}@Setting IDS identifier=%{mask.hash}@ from accessory: %@", buf, 0x2Au);

          v3 = v72;
        }

        objc_autoreleasePoolPop(v30);
        objc_msgSend(v5, "idsIdentifier");
        v35 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v23, "setIdsIdentifier:", v35);

      }
    }
    objc_msgSend(v5, "pairingIdentity");
    v36 = (void *)objc_claimAutoreleasedReturnValue();

    if (v36)
    {
      v37 = (void *)MEMORY[0x227676638]();
      v38 = *(id *)(a1 + 32);
      HMFGetOSLogHandle();
      v39 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v39, OS_LOG_TYPE_DEFAULT))
      {
        HMFGetLogIdentifier();
        v40 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v5, "pairingIdentity");
        v41 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543874;
        v75 = v40;
        v76 = 2112;
        v77 = (uint64_t)v41;
        v78 = 2112;
        v79 = v5;
        _os_log_impl(&dword_2218F0000, v39, OS_LOG_TYPE_DEFAULT, "%{public}@Setting pairingIdentity=%@ from accessory: %@", buf, 0x20u);

        v3 = v72;
      }

      objc_autoreleasePoolPop(v37);
      objc_msgSend(v5, "pairingIdentity");
      v42 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v23, "setPairingIdentity:", v42);

    }
    objc_msgSend(v5, "deviceIRKData");
    v43 = (void *)objc_claimAutoreleasedReturnValue();

    if (v43)
    {
      v44 = (void *)MEMORY[0x227676638]();
      v45 = *(id *)(a1 + 32);
      HMFGetOSLogHandle();
      v46 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v46, OS_LOG_TYPE_DEFAULT))
      {
        HMFGetLogIdentifier();
        v47 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v5, "deviceIRKData");
        v48 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543874;
        v75 = v47;
        v76 = 2112;
        v77 = (uint64_t)v48;
        v78 = 2112;
        v79 = v5;
        _os_log_impl(&dword_2218F0000, v46, OS_LOG_TYPE_DEFAULT, "%{public}@Setting deviceIRKData=%@ from accessory: %@", buf, 0x20u);

        v3 = v72;
      }

      objc_autoreleasePoolPop(v44);
      objc_msgSend(v5, "deviceIRKData");
      v49 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v23, "setDeviceIRKData:", v49);

    }
    v50 = *(void **)(a1 + 64);
    if (v50)
    {
      objc_msgSend(v50, "identifier");
      v51 = (void *)objc_claimAutoreleasedReturnValue();
      +[HMCContext findDeviceWithDeviceIdentifier:](HMCContext, "findDeviceWithDeviceIdentifier:", v51);
      v52 = (void *)objc_claimAutoreleasedReturnValue();

      if (v52)
      {
        v53 = (void *)MEMORY[0x227676638]();
        v54 = *(id *)(a1 + 32);
        HMFGetOSLogHandle();
        v55 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v55, OS_LOG_TYPE_INFO))
        {
          HMFGetLogIdentifier();
          v56 = (void *)objc_claimAutoreleasedReturnValue();
          v57 = *(_QWORD *)(a1 + 64);
          *(_DWORD *)buf = 138544130;
          v75 = v56;
          v76 = 2112;
          v77 = v57;
          v78 = 2112;
          v79 = v5;
          v80 = 2112;
          v81 = v23;
          _os_log_impl(&dword_2218F0000, v55, OS_LOG_TYPE_INFO, "%{public}@Setting device %@ on accessory model: %@, resident model: %@", buf, 0x2Au);

          v3 = v72;
        }

        objc_autoreleasePoolPop(v53);
        objc_msgSend(v5, "setDevice:", v52);
        objc_msgSend(v23, "setDevice:", v52);
      }
      objc_msgSend(*(id *)(a1 + 64), "idsIdentifier");
      v58 = (void *)objc_claimAutoreleasedReturnValue();
      if (v58)
      {
        v59 = (void *)MEMORY[0x227676638]();
        v60 = *(id *)(a1 + 32);
        HMFGetOSLogHandle();
        v61 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v61, OS_LOG_TYPE_DEFAULT))
        {
          HMFGetLogIdentifier();
          v70 = v15;
          v62 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138544130;
          v75 = v62;
          v76 = 2160;
          v77 = 1752392040;
          v78 = 2112;
          v79 = v58;
          v80 = 2112;
          v81 = v5;
          _os_log_impl(&dword_2218F0000, v61, OS_LOG_TYPE_DEFAULT, "%{public}@Setting IDS identifier=%{mask.hash}@ for newly added accessory: %@", buf, 0x2Au);

          v15 = v70;
        }

        objc_autoreleasePoolPop(v59);
        objc_msgSend(v5, "setIdsIdentifier:", v58);
        objc_msgSend(v23, "setIdsIdentifier:", v58);
        v3 = v72;
      }
      objc_msgSend(*(id *)(a1 + 64), "globalDestination");
      v63 = (void *)objc_claimAutoreleasedReturnValue();
      if (v63)
      {
        v64 = (void *)MEMORY[0x227676638]();
        v65 = *(id *)(a1 + 32);
        HMFGetOSLogHandle();
        v66 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v66, OS_LOG_TYPE_DEFAULT))
        {
          HMFGetLogIdentifier();
          v71 = v15;
          v67 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138544130;
          v75 = v67;
          v76 = 2160;
          v77 = 1752392040;
          v78 = 2112;
          v79 = v63;
          v80 = 2112;
          v81 = v5;
          _os_log_impl(&dword_2218F0000, v66, OS_LOG_TYPE_DEFAULT, "%{public}@Setting IDS destination=%{mask.hash}@ for newly added accessory: %@", buf, 0x2Au);

          v15 = v71;
        }

        objc_autoreleasePoolPop(v64);
        objc_msgSend(v5, "setIdsDestination:", v63);
        objc_msgSend(v23, "setIdsDestination:", v63);
        v3 = v72;
      }

    }
    +[HMCContext currentContext](HMCContext, "currentContext");
    v68 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v68, "save");

  }
  else
  {
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v69 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v75 = v69;
      v76 = 2112;
      v77 = (uint64_t)v4;
      _os_log_impl(&dword_2218F0000, v9, OS_LOG_TYPE_ERROR, "%{public}@Unable to find newly added accessory with UUID %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v6);
  }

}

void __83__HMDHome__remotelyAddMediaAccessory_usingRemoteMessageName_message_fallbackBlock___block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  id v8;
  NSObject *v9;
  void *v10;
  void *v11;
  id v12;
  NSObject *v13;
  void *v14;
  void *v15;
  void *v16;
  int v17;
  void *v18;
  void *v19;
  id v20;
  NSObject *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  id v27;
  uint64_t v28;
  _QWORD v29[5];
  id v30;
  id v31;
  uint64_t v32;
  uint8_t buf[4];
  void *v34;
  __int16 v35;
  id v36;
  __int16 v37;
  id v38;
  uint64_t v39;

  v39 = *MEMORY[0x24BDAC8D0];
  v5 = a2;
  v6 = a3;
  v7 = (void *)MEMORY[0x227676638]();
  v8 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v9 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543874;
    v34 = v10;
    v35 = 2112;
    v36 = v6;
    v37 = 2112;
    v38 = v5;
    _os_log_impl(&dword_2218F0000, v9, OS_LOG_TYPE_INFO, "%{public}@Resident responded with : %@, %@", buf, 0x20u);

  }
  objc_autoreleasePoolPop(v7);
  if (v5)
  {
    v11 = (void *)MEMORY[0x227676638]();
    v12 = *(id *)(a1 + 32);
    HMFGetOSLogHandle();
    v13 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      v15 = *(void **)(a1 + 40);
      *(_DWORD *)buf = 138543874;
      v34 = v14;
      v35 = 2112;
      v36 = v15;
      v37 = 2112;
      v38 = v5;
      _os_log_impl(&dword_2218F0000, v13, OS_LOG_TYPE_ERROR, "%{public}@Error occurred while adding accessory [%@] on resident : %@", buf, 0x20u);

    }
    objc_autoreleasePoolPop(v11);
    if (HMDIsAllowedFallbackRemoteError(v5)
      && (objc_msgSend(*(id *)(a1 + 32), "administratorHandler"),
          v16 = (void *)objc_claimAutoreleasedReturnValue(),
          v17 = objc_msgSend(v16, "allowLocalFallbackForMessage:", *(_QWORD *)(a1 + 48)),
          v16,
          v17))
    {
      objc_msgSend(*(id *)(a1 + 32), "deviceHomeKitSetupSession");
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v18, "markHasFailedRelayAttempt");

      v19 = (void *)MEMORY[0x227676638]();
      v20 = *(id *)(a1 + 32);
      HMFGetOSLogHandle();
      v21 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v22 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(*(id *)(a1 + 48), "shortDescription");
        v23 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543874;
        v34 = v22;
        v35 = 2114;
        v36 = v23;
        v37 = 2112;
        v38 = v5;
        _os_log_impl(&dword_2218F0000, v21, OS_LOG_TYPE_INFO, "%{public}@Allowing local fallback processing of message %{public}@ due to error: %@", buf, 0x20u);

      }
      objc_autoreleasePoolPop(v19);
      (*(void (**)(void))(*(_QWORD *)(a1 + 56) + 16))();
    }
    else
    {
      objc_msgSend(*(id *)(a1 + 48), "respondWithError:", v5);
    }
  }
  else
  {
    objc_msgSend(*(id *)(a1 + 32), "backingStore");
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v24, "context");
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    v29[0] = MEMORY[0x24BDAC760];
    v29[1] = 3221225472;
    v29[2] = __83__HMDHome__remotelyAddMediaAccessory_usingRemoteMessageName_message_fallbackBlock___block_invoke_1088;
    v29[3] = &unk_24E795658;
    v26 = *(void **)(a1 + 40);
    v29[4] = *(_QWORD *)(a1 + 32);
    v30 = v26;
    v27 = *(id *)(a1 + 48);
    v28 = *(_QWORD *)(a1 + 64);
    v31 = v27;
    v32 = v28;
    objc_msgSend(v25, "performBlock:", v29);

  }
}

void __83__HMDHome__remotelyAddMediaAccessory_usingRemoteMessageName_message_fallbackBlock___block_invoke_1088(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  id v8;
  NSObject *v9;
  void *v10;
  NSObject *v11;
  NSObject *v12;
  os_signpost_id_t v13;
  int v14;
  void *v15;
  __int16 v16;
  void *v17;
  _QWORD v18[2];

  v18[1] = *MEMORY[0x24BDAC8D0];
  v2 = *(void **)(a1 + 32);
  objc_msgSend(*(id *)(a1 + 40), "uuid");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "accessoryWithUUID:", v3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  if (v4)
  {
    v5 = *(void **)(a1 + 32);
    v18[0] = v4;
    objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", v18, 1);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "_notifyClientOfNewlyAddedAccessories:requestMessage:", v6, *(_QWORD *)(a1 + 48));

  }
  v7 = (void *)MEMORY[0x227676638]();
  v8 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v9 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v14 = 138543618;
    v15 = v10;
    v16 = 2112;
    v17 = v4;
    _os_log_impl(&dword_2218F0000, v9, OS_LOG_TYPE_INFO, "%{public}@Successfully remote added accessory : %@", (uint8_t *)&v14, 0x16u);

  }
  objc_autoreleasePoolPop(v7);
  v11 = *(id *)(*(_QWORD *)(a1 + 32) + 144);
  v12 = v11;
  v13 = *(_QWORD *)(a1 + 56);
  if (v13 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v11))
  {
    LOWORD(v14) = 0;
    _os_signpost_emit_with_name_impl(&dword_2218F0000, v12, OS_SIGNPOST_INTERVAL_END, v13, "RemotelyAddAccessory", ", (uint8_t *)&v14, 2u);
  }

  objc_msgSend(*(id *)(a1 + 48), "respondWithSuccess");
}

void __118__HMDHome__accessoryPairingDidComplete_configuration_pairingEvent_accessoryServer_certificationStatus_requestMessage___block_invoke(uint64_t a1, void *a2)
{
  id v3;
  id WeakRetained;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  id v11;
  NSObject *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  id v18;
  void *v19;
  id v20;
  id v21;
  id v22;
  id v23;
  id v24;
  id v25;
  void *v26;
  uint64_t v27;
  uint8_t buf[4];
  void *v29;
  __int16 v30;
  void *v31;
  uint64_t v32;

  v32 = *MEMORY[0x24BDAC8D0];
  v3 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 64));
  objc_msgSend(WeakRetained, "_primaryAccessoryForServer:", *(_QWORD *)(a1 + 32));
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v27 = 0;
  objc_msgSend(v5, "preferredHAPAccessoryForOperation:linkType:", 1, &v27);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 32), "pairingMetricDictionary");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = (void *)objc_msgSend(v7, "copy");
  objc_msgSend(*(id *)(a1 + 40), "setMatterMetrics:", v8);

  objc_msgSend(*(id *)(a1 + 32), "clearPairingMetrics");
  objc_msgSend(*(id *)(a1 + 40), "updateEventPropertiesWithPairedAccessory:", v5);
  if (objc_msgSend(*(id *)(a1 + 40), "isMatterAccessory")
    && objc_msgSend(*(id *)(a1 + 40), "isAddOperation"))
  {
    if (v3)
      +[HMDMatterAccessoryPairingEndContext hmdContextWithStep:error:](HMDMatterAccessoryPairingEndContext, "hmdContextWithStep:error:", 24, v3);
    else
      +[HMDMatterAccessoryPairingEndContext pairingCompletedContext](HMDMatterAccessoryPairingEndContext, "pairingCompletedContext");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    notifyMatterMetricPairingEnded(WeakRetained, v9);
  }
  else
  {
    objc_msgSend(WeakRetained, "logEventSubmitter");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "submitLogEvent:error:", *(_QWORD *)(a1 + 40), v3);
  }

  v10 = (void *)MEMORY[0x227676638]();
  v11 = WeakRetained;
  HMFGetOSLogHandle();
  v12 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 48), "accessoryName");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543618;
    v29 = v13;
    v30 = 2112;
    v31 = v14;
    _os_log_impl(&dword_2218F0000, v12, OS_LOG_TYPE_INFO, "%{public}@_handleAddAccessory: added accessories for accessory %@", buf, 0x16u);

  }
  objc_autoreleasePoolPop(v10);
  objc_msgSend(v5, "metricLoggingVendorDetails");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "server");
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v17 = v16;
  else
    v17 = 0;
  v18 = v17;

  v19 = *(void **)(a1 + 48);
  v20 = *(id *)(a1 + 56);
  objc_msgSend(v19, "accessoryUUID");

  objc_msgSend(*(id *)(a1 + 32), "category");
  objc_msgSend(v15, "model");

  objc_msgSend(v15, "manufacturer");
  objc_msgSend(v15, "firmwareVersion");

  v21 = (id)HAPLinkTypeDescription();
  objc_msgSend(v18, "isWacAccessory");

  v22 = (id)HMFBooleanToString();
  v23 = (id)objc_msgSend(MEMORY[0x24BDD16E0], "numberWithInteger:", *(_QWORD *)(a1 + 72));
  objc_msgSend(*(id *)(a1 + 40), "isThreadAccessory");
  v24 = (id)HMFBooleanToString();
  objc_msgSend(*(id *)(a1 + 40), "accessorySupportsWoL");

  v25 = (id)HMFBooleanToString();
  objc_msgSend(v11, "homeLocationHandler");
  v26 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v26, "updateHomeLocation");

  objc_msgSend(v11, "_evaluateShouldRelaunchAndSetRelaunch");
}

void __93__HMDHome__continuePairingAfterUserConsentWithAccessoryUUID_orUnassociatedAccessory_message___block_invoke(id *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  NSObject *v7;
  id v8;
  id v9;
  _QWORD block[4];
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;

  v5 = a2;
  v6 = a3;
  objc_msgSend(a1[4], "workQueue");
  v7 = objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x24BDAC760];
  block[1] = 3221225472;
  block[2] = __93__HMDHome__continuePairingAfterUserConsentWithAccessoryUUID_orUnassociatedAccessory_message___block_invoke_2;
  block[3] = &unk_24E7761F8;
  v11 = a1[5];
  v12 = a1[6];
  v13 = v6;
  v14 = a1[4];
  v15 = a1[7];
  v16 = a1[8];
  v17 = a1[9];
  v18 = v5;
  v19 = a1[10];
  v8 = v5;
  v9 = v6;
  dispatch_async(v7, block);

}

void __49__HMDHome__addAndMaybeWACMediaAccessory_message___block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id WeakRetained;
  void *v8;
  id v9;
  NSObject *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  uint64_t v15;
  id v16;
  id v17;
  void *v18;
  NSObject *v19;
  void *v20;
  id v21;
  NSObject *v22;
  void *v23;
  id v24;
  void *v25;
  void *v26;
  _QWORD block[5];
  id v28;
  id v29;
  uint8_t buf[4];
  void *v31;
  __int16 v32;
  id v33;
  uint64_t v34;

  v34 = *MEMORY[0x24BDAC8D0];
  v5 = a2;
  v6 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  if (!WeakRetained)
  {
    v13 = *(void **)(a1 + 32);
    v14 = (void *)MEMORY[0x24BDD1540];
    v15 = 2;
LABEL_7:
    objc_msgSend(v14, "hmErrorWithCode:", v15);
    v16 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "respondWithError:", v16);
    goto LABEL_8;
  }
  if (v5)
  {
    v8 = (void *)MEMORY[0x227676638]();
    v9 = WeakRetained;
    HMFGetOSLogHandle();
    v10 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      v12 = *(void **)(a1 + 40);
      *(_DWORD *)buf = 138543618;
      v31 = v11;
      v32 = 2112;
      v33 = v12;
      _os_log_impl(&dword_2218F0000, v10, OS_LOG_TYPE_ERROR, "%{public}@WAC failed for %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v8);
    v13 = *(void **)(a1 + 32);
    v14 = (void *)MEMORY[0x24BDD1540];
    v15 = 48;
    goto LABEL_7;
  }
  v17 = v6;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v18 = v17;
  else
    v18 = 0;
  v16 = v18;

  if (v16)
  {
    objc_msgSend(WeakRetained, "workQueue");
    v19 = objc_claimAutoreleasedReturnValue();
    block[0] = MEMORY[0x24BDAC760];
    block[1] = 3221225472;
    block[2] = __49__HMDHome__addAndMaybeWACMediaAccessory_message___block_invoke_1040;
    block[3] = &unk_24E79BBD0;
    block[4] = WeakRetained;
    v28 = v16;
    v29 = *(id *)(a1 + 32);
    dispatch_async(v19, block);

  }
  else
  {
    v20 = (void *)MEMORY[0x227676638]();
    v21 = WeakRetained;
    HMFGetOSLogHandle();
    v22 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v23 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v31 = v23;
      v32 = 2112;
      v33 = (id)objc_opt_class();
      v24 = v33;
      _os_log_impl(&dword_2218F0000, v22, OS_LOG_TYPE_ERROR, "%{public}@Post-WAC not supported for type %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v20);
    v25 = *(void **)(a1 + 32);
    objc_msgSend(MEMORY[0x24BDD1540], "hmErrorWithCode:", 48);
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v25, "respondWithError:", v26);

  }
LABEL_8:

}

- (void)_addAndMaybeAssociateMediaAccessory:(void *)a3 message:
{
  id v5;
  id v6;
  void *v7;
  void *v8;
  void *v9;
  id inited;
  void *v11;
  id v12;
  NSObject *v13;
  void *v14;
  void *v15;
  id v16;
  NSObject *v17;
  void *v18;
  _QWORD v19[4];
  id v20;
  id v21;
  id v22;
  id location;
  uint8_t buf[4];
  void *v25;
  __int16 v26;
  id v27;
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  v5 = a2;
  v6 = a3;
  if (a1)
  {
    if ((objc_msgSend(a1, "isOwnerUser") & 1) != 0)
    {
      objc_msgSend(a1, "homeManager");
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v5, "uuid");
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v7, "accessorySetupMetricDispatcherForAccessoryUUID:", v8);
      v9 = (void *)objc_claimAutoreleasedReturnValue();

      objc_msgSend(v9, "addHome:", a1);
      if (objc_msgSend(v5, "conformsToProtocol:", &unk_2557D9DD0)
        && objc_msgSend(v5, "supportsAssociation"))
      {
        inited = objc_initWeak(&location, a1);
        v11 = (void *)MEMORY[0x227676638](inited);
        v12 = a1;
        HMFGetOSLogHandle();
        v13 = (id)objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
        {
          HMFGetLogIdentifier();
          v14 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543618;
          v25 = v14;
          v26 = 2112;
          v27 = v5;
          _os_log_impl(&dword_2218F0000, v13, OS_LOG_TYPE_INFO, "%{public}@Starting association for media accessory: %@", buf, 0x16u);

        }
        objc_autoreleasePoolPop(v11);
        v19[0] = MEMORY[0x24BDAC760];
        v19[1] = 3221225472;
        v19[2] = __55__HMDHome__addAndMaybeAssociateMediaAccessory_message___block_invoke;
        v19[3] = &unk_24E796418;
        objc_copyWeak(&v22, &location);
        v20 = v5;
        v21 = v6;
        objc_msgSend(v20, "associateToHome:completionHandler:", v12, v19);

        objc_destroyWeak(&v22);
        objc_destroyWeak(&location);
      }
      else
      {
        -[HMDHome _addMediaAccessory:message:](a1, v5, v6);
      }
    }
    else
    {
      v15 = (void *)MEMORY[0x227676638]();
      v16 = a1;
      HMFGetOSLogHandle();
      v17 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
      {
        HMFGetLogIdentifier();
        v18 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543362;
        v25 = v18;
        _os_log_impl(&dword_2218F0000, v17, OS_LOG_TYPE_DEFAULT, "%{public}@Must be owner to add WHA accessory", buf, 0xCu);

      }
      objc_autoreleasePoolPop(v15);
      objc_msgSend(MEMORY[0x24BDD1540], "hmErrorWithCode:", 17);
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v6, "respondWithError:", v9);
    }

  }
}

void __55__HMDHome__addAndMaybeAssociateMediaAccessory_message___block_invoke(id *a1, void *a2)
{
  id v3;
  id WeakRetained;
  void *v5;
  void *v6;
  id v7;
  NSObject *v8;
  void *v9;
  id v10;
  NSObject *v11;
  id v12;
  void *v13;
  _QWORD block[4];
  id v15;
  id v16;
  id v17;
  uint8_t buf[4];
  void *v19;
  __int16 v20;
  id v21;
  __int16 v22;
  id v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v3 = a2;
  WeakRetained = objc_loadWeakRetained(a1 + 6);
  v5 = WeakRetained;
  if (v3)
  {
    v6 = (void *)MEMORY[0x227676638]();
    v7 = v5;
    HMFGetOSLogHandle();
    v8 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      HMFGetLogIdentifier();
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      v10 = a1[4];
      *(_DWORD *)buf = 138543874;
      v19 = v9;
      v20 = 2112;
      v21 = v10;
      v22 = 2112;
      v23 = v3;
      _os_log_impl(&dword_2218F0000, v8, OS_LOG_TYPE_DEFAULT, "%{public}@Failed to add accessory, %@, with error: %@", buf, 0x20u);

    }
    objc_autoreleasePoolPop(v6);
    objc_msgSend(a1[5], "respondWithError:", v3);
  }
  else if (WeakRetained)
  {
    objc_msgSend(WeakRetained, "workQueue");
    v11 = objc_claimAutoreleasedReturnValue();
    block[0] = MEMORY[0x24BDAC760];
    block[1] = 3221225472;
    block[2] = __55__HMDHome__addAndMaybeAssociateMediaAccessory_message___block_invoke_1085;
    block[3] = &unk_24E7965D0;
    objc_copyWeak(&v17, a1 + 6);
    v15 = a1[5];
    v16 = a1[4];
    dispatch_async(v11, block);

    objc_destroyWeak(&v17);
  }
  else
  {
    v12 = a1[5];
    objc_msgSend(MEMORY[0x24BDD1540], "hmErrorWithCode:", 2);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "respondWithError:", v13);

  }
}

void __55__HMDHome__addAndMaybeAssociateMediaAccessory_message___block_invoke_1085(void **a1)
{
  id WeakRetained;
  void *v3;
  void *v4;
  id v5;

  WeakRetained = objc_loadWeakRetained(a1 + 6);
  v5 = WeakRetained;
  if (WeakRetained)
  {
    -[HMDHome _addMediaAccessory:message:](WeakRetained, a1[5], a1[4]);
  }
  else
  {
    v3 = a1[4];
    objc_msgSend(MEMORY[0x24BDD1540], "hmErrorWithCode:", 2);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "respondWithError:", v4);

  }
}

void __49__HMDHome__addAndMaybeWACMediaAccessory_message___block_invoke_1040(id *a1)
{
  void *v2;
  id v3;
  NSObject *v4;
  void *v5;
  int v6;
  void *v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  v2 = (void *)MEMORY[0x227676638]();
  v3 = a1[4];
  HMFGetOSLogHandle();
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    HMFGetLogIdentifier();
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = 138543362;
    v7 = v5;
    _os_log_impl(&dword_2218F0000, v4, OS_LOG_TYPE_DEFAULT, "%{public}@Continuing to add accessory post-WAC", (uint8_t *)&v6, 0xCu);

  }
  objc_autoreleasePoolPop(v2);
  -[HMDHome _addAndMaybeAssociateMediaAccessory:message:](a1[4], a1[5], a1[6]);
}

void __93__HMDHome__continuePairingAfterUserConsentWithAccessoryUUID_orUnassociatedAccessory_message___block_invoke_2(uint64_t a1)
{
  void *v2;
  id v3;
  BOOL v4;
  void *v5;
  id v6;
  NSObject *v7;
  NSObject *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  _BYTE v14[12];
  __int16 v15;
  uint64_t v16;
  __int16 v17;
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v2 = *(void **)(a1 + 40);
  v3 = *(id *)(a1 + 32);
  objc_msgSend(v2, "accessoryUUID");

  objc_msgSend(*(id *)(a1 + 48), "domain");
  objc_msgSend(*(id *)(a1 + 48), "code");

  v4 = *(_QWORD *)(a1 + 48) == 0;
  v5 = (void *)MEMORY[0x227676638]();
  v6 = *(id *)(a1 + 56);
  HMFGetOSLogHandle();
  v7 = objc_claimAutoreleasedReturnValue();
  v8 = v7;
  if (v4)
  {
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)v14 = 138543362;
      *(_QWORD *)&v14[4] = v13;
      _os_log_impl(&dword_2218F0000, v8, OS_LOG_TYPE_INFO, "%{public}@Client configuration with WiFi unique PSK created successfully", v14, 0xCu);

    }
    objc_autoreleasePoolPop(v5);
    objc_msgSend(*(id *)(a1 + 80), "setNetworkCredential:", *(_QWORD *)(a1 + 88));
    objc_msgSend(*(id *)(a1 + 64), "setUsedWiFiPPSK:", 1);
    objc_msgSend(*(id *)(a1 + 32), "begin");
    *(_QWORD *)v14 = *(id *)(a1 + 32);
    objc_msgSend(*(id *)(a1 + 56), "_pairAccessoryWithAccessoryDescription:unpairedAccessory:configuration:pairingEvent:requestMessage:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72));
    __HMFActivityScopeLeave();

  }
  else
  {
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      v10 = *(_QWORD *)(a1 + 40);
      v11 = *(_QWORD *)(a1 + 48);
      *(_DWORD *)v14 = 138543874;
      *(_QWORD *)&v14[4] = v9;
      v15 = 2112;
      v16 = v10;
      v17 = 2112;
      v18 = v11;
      _os_log_impl(&dword_2218F0000, v8, OS_LOG_TYPE_ERROR, "%{public}@Failed to generate WiFi credential for accessory %@ with error: %@", v14, 0x20u);

    }
    objc_autoreleasePoolPop(v5);
    objc_msgSend(*(id *)(a1 + 56), "logEventSubmitter");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "submitLogEvent:error:", *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 48));

    objc_msgSend(*(id *)(a1 + 72), "respondWithError:", *(_QWORD *)(a1 + 48));
    objc_msgSend(*(id *)(a1 + 56), "_removePendingAccessoryAdd:", *(_QWORD *)(a1 + 40));
  }
}

void __49__HMDHome__handleRemoteAddMediaAccessoryRequest___block_invoke(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  id v6;
  void *v7;
  id v8;
  NSObject *v9;
  NSObject *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  id v15;
  uint8_t buf[4];
  void *v17;
  __int16 v18;
  id v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  v3 = a2;
  objc_msgSend(v3, "dataForKey:", CFSTR("kAccessoryEncodedMediaAccessoryKey"));
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  if (v4)
  {
    v15 = 0;
    objc_msgSend(MEMORY[0x24BDD1620], "unarchivedObjectOfClass:fromData:error:", objc_opt_class(), v4, &v15);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = v15;
    v7 = (void *)MEMORY[0x227676638]();
    v8 = *(id *)(a1 + 32);
    HMFGetOSLogHandle();
    v9 = objc_claimAutoreleasedReturnValue();
    v10 = v9;
    if (v5)
    {
      if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        v17 = v11;
        v18 = 2112;
        v19 = v5;
        _os_log_impl(&dword_2218F0000, v10, OS_LOG_TYPE_INFO, "%{public}@Proceeding to add media accessory: %@", buf, 0x16u);

      }
      objc_autoreleasePoolPop(v7);
      -[HMDHome _locallyAddMediaAccessory:message:](*(void **)(a1 + 32), v5, v3);
    }
    else
    {
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        v17 = v13;
        v18 = 2112;
        v19 = v6;
        _os_log_impl(&dword_2218F0000, v10, OS_LOG_TYPE_ERROR, "%{public}@Unable to decode unassociated media accessory: %@", buf, 0x16u);

      }
      objc_autoreleasePoolPop(v7);
      objc_msgSend(MEMORY[0x24BDD1540], "hmErrorWithCode:", 3);
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v3, "respondWithError:", v14);

    }
  }
  else
  {
    objc_msgSend(MEMORY[0x24BDD1540], "hmErrorWithCode:", 27);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "respondWithError:", v12);

  }
}

void __42__HMDHome__handleRemoteAddMediaAccessory___block_invoke(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  id v7;
  void *v8;
  void *v9;
  id v10;
  NSObject *v11;
  void *v12;
  void *v13;
  void *v14;
  id v15;
  NSObject *v16;
  void *v17;
  id v18;
  void *context;
  id v20;
  uint8_t buf[4];
  void *v22;
  __int16 v23;
  id v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v3 = a2;
  objc_msgSend(v3, "uuidForKey:", CFSTR("kAccessoryUUID"));
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  if (v4)
  {
    objc_msgSend(v3, "dataForKey:", CFSTR("kAccessoryEncodedMediaAccessoryKey"));
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    if (v5)
    {
      v20 = 0;
      objc_msgSend(MEMORY[0x24BDD1620], "unarchivedObjectOfClass:fromData:error:", objc_opt_class(), v5, &v20);
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      v7 = v20;
      if (v6)
      {
        objc_msgSend(v3, "stringForKey:", CFSTR("kAccessoryPairingPasswordKey"));
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v3, "applicationBundleIdentifier");
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        context = (void *)MEMORY[0x227676638]();
        v10 = *(id *)(a1 + 32);
        HMFGetOSLogHandle();
        v11 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
        {
          HMFGetLogIdentifier();
          v18 = v7;
          v12 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543618;
          v22 = v12;
          v23 = 2112;
          v24 = v6;
          _os_log_impl(&dword_2218F0000, v11, OS_LOG_TYPE_INFO, "%{public}@Proceeding to add unassociated media accessory: %@", buf, 0x16u);

          v7 = v18;
        }

        objc_autoreleasePoolPop(context);
        objc_msgSend(*(id *)(a1 + 32), "_continueLegacyAddAccessoryWithUUID:unassociatedAccessory:setupCode:appID:message:", v4, v6, v8, v9, v3);

      }
      else
      {
        v14 = (void *)MEMORY[0x227676638]();
        v15 = *(id *)(a1 + 32);
        HMFGetOSLogHandle();
        v16 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
        {
          HMFGetLogIdentifier();
          v17 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543618;
          v22 = v17;
          v23 = 2112;
          v24 = v7;
          _os_log_impl(&dword_2218F0000, v16, OS_LOG_TYPE_ERROR, "%{public}@Unable to decode unassociated media accessory: %@", buf, 0x16u);

        }
        objc_autoreleasePoolPop(v14);
        objc_msgSend(MEMORY[0x24BDD1540], "hmErrorWithCode:", 3);
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v3, "respondWithError:", v8);
      }

    }
    else
    {
      objc_msgSend(MEMORY[0x24BDD1540], "hmErrorWithCode:", 27);
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v3, "respondWithError:", v13);

    }
  }
  else
  {
    objc_msgSend(MEMORY[0x24BDD1540], "hmErrorWithCode:", 27);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "respondWithError:", v5);
  }

}

void __37__HMDHome__handleLegacyAddAccessory___block_invoke(uint64_t a1)
{
  id v2;

  objc_msgSend(*(id *)(a1 + 32), "applicationBundleIdentifier");
  v2 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 40), "_continueLegacyAddAccessoryWithUUID:unassociatedAccessory:setupCode:appID:message:", *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), v2, *(_QWORD *)(a1 + 32));

}

void __86__HMDHome_performLocalAddAccessoryWithDescription_progressHandlerDelegate_completion___block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id WeakRetained;
  void *v8;
  id v9;
  NSObject *v10;
  id v11;
  __CFString *v12;
  uint64_t v13;
  uint8_t buf[4];
  id v15;
  __int16 v16;
  __CFString *v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  v5 = a2;
  v6 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v8 = (void *)MEMORY[0x227676638]();
  v9 = WeakRetained;
  HMFGetOSLogHandle();
  v10 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v11 = (id)objc_claimAutoreleasedReturnValue();
    if (v5)
    {
      objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("failed with error: %@"), v5);
      v12 = (__CFString *)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      v12 = CFSTR("completed");
    }
    *(_DWORD *)buf = 138543618;
    v15 = v11;
    v16 = 2112;
    v17 = v12;
    _os_log_impl(&dword_2218F0000, v10, OS_LOG_TYPE_INFO, "%{public}@Perform local add accessory %@", buf, 0x16u);
    if (v5)

  }
  objc_autoreleasePoolPop(v8);
  v13 = *(_QWORD *)(a1 + 32);
  if (v13)
    (*(void (**)(uint64_t, id))(v13 + 16))(v13, v5);

}

void __27__HMDHome_removeAccessory___block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  void *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  _BYTE v19[128];
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  objc_msgSend(MEMORY[0x24BDD1540], "hmErrorWithCode:description:reason:suggestion:", 23, CFSTR("Retrieval cancelled, accessory removed"), 0, 0);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = *(void **)(a1 + 32);
  objc_msgSend(*(id *)(a1 + 40), "identifier");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "_notifyRetrievalError:accessoryServer:linkType:accessoryOperationBlock:", v2, v4, 0, 0);

  objc_msgSend(*(id *)(a1 + 32), "accessoryBulletinNotificationManager");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "handleRemovedAccessory:", *(_QWORD *)(a1 + 40));

  v17 = 0u;
  v18 = 0u;
  v15 = 0u;
  v16 = 0u;
  objc_msgSend(*(id *)(a1 + 40), "services", 0);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = (void *)objc_msgSend(v6, "copy");

  v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v15, v19, 16);
  if (v8)
  {
    v9 = v8;
    v10 = *(_QWORD *)v16;
    do
    {
      v11 = 0;
      do
      {
        if (*(_QWORD *)v16 != v10)
          objc_enumerationMutation(v7);
        objc_msgSend(*(id *)(a1 + 32), "_removeService:", *(_QWORD *)(*((_QWORD *)&v15 + 1) + 8 * v11++));
      }
      while (v9 != v11);
      v9 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v15, v19, 16);
    }
    while (v9);
  }

  objc_msgSend(*(id *)(a1 + 40), "cameraProfiles");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  v13 = objc_msgSend(v12, "count");

  if (v13)
  {
    objc_msgSend(*(id *)(a1 + 32), "cameraBulletinNotificationManager");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v14, "handleRemovedCameraAccessory:", *(_QWORD *)(a1 + 40));

  }
}

void __27__HMDHome_removeAccessory___block_invoke_2(uint64_t a1)
{
  void *v2;
  id v3;

  objc_msgSend(*(id *)(a1 + 32), "remoteEventRouterClientController");
  v3 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 40), "uuid");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "removeResidentRouterForAccessoryUUID:", v2);

}

uint64_t __27__HMDHome__addAccessories___block_invoke(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(a1 + 32), "addAccessory:", a2);
}

uint64_t __67__HMDHome_destinationControllerWithCommittedDestinationIdentifier___block_invoke(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  uint64_t v5;

  objc_msgSend(a2, "committedData");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "destinationIdentifier");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v4, "hmf_isEqualToUUID:", *(_QWORD *)(a1 + 32));

  return v5;
}

uint64_t __58__HMDHome_destinationControllerWithDestinationIdentifier___block_invoke(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  uint64_t v5;

  objc_msgSend(a2, "data");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "destinationIdentifier");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v4, "hmf_isEqualToUUID:", *(_QWORD *)(a1 + 32));

  return v5;
}

uint64_t __47__HMDHome_destinationControllerWithIdentifier___block_invoke(uint64_t a1, void *a2)
{
  void *v3;
  uint64_t v4;

  objc_msgSend(a2, "identifier");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "hmf_isEqualToUUID:", *(_QWORD *)(a1 + 32));

  return v4;
}

uint64_t __33__HMDHome_destinationControllers__block_invoke(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "audioDestinationController");
}

id __56__HMDHome_mediaDestinationManagersWithSupportedOptions___block_invoke(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  id v5;

  objc_msgSend(a2, "audioDestinationManager");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "destination");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  LODWORD(a1) = objc_msgSend(v4, "containsSupportedOptions:", *(_QWORD *)(a1 + 32));

  if ((_DWORD)a1)
    v5 = v3;
  else
    v5 = 0;

  return v5;
}

id __56__HMDHome_mediaDestinationManagersWithSupportedOptions___block_invoke_2(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  char v6;
  id v7;

  v3 = a2;
  objc_msgSend(v3, "audioDestinationManager");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "destination");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  if (!objc_msgSend(v5, "containsSupportedOptions:", *(_QWORD *)(a1 + 40)))
  {

    goto LABEL_5;
  }
  v6 = _mediaSystemsContainsAccessory(*(void **)(a1 + 32), v3);

  if ((v6 & 1) != 0)
  {
LABEL_5:
    v7 = 0;
    goto LABEL_6;
  }
  v7 = v4;
LABEL_6:

  return v7;
}

id __66__HMDHome_mediaDestinationManagersWithHomeTheaterSupportedOptions__block_invoke_2(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  char v6;
  id v7;

  v3 = a2;
  objc_msgSend(v3, "audioDestinationManager");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "destination");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  if (!objc_msgSend(v5, "containsHomeTheaterSupportedOptions"))
  {

    goto LABEL_5;
  }
  v6 = _mediaSystemsContainsAccessory(*(void **)(a1 + 32), v3);

  if ((v6 & 1) != 0)
  {
LABEL_5:
    v7 = 0;
    goto LABEL_6;
  }
  v7 = v4;
LABEL_6:

  return v7;
}

id __66__HMDHome_mediaDestinationManagersWithHomeTheaterSupportedOptions__block_invoke(uint64_t a1, void *a2)
{
  void *v2;
  void *v3;
  int v4;
  id v5;

  objc_msgSend(a2, "audioDestinationManager");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "destination");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "containsHomeTheaterSupportedOptions");

  if (v4)
    v5 = v2;
  else
    v5 = 0;

  return v5;
}

uint64_t __55__HMDHome_destinationManagerWithDestinationIdentifier___block_invoke(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  uint64_t v5;

  objc_msgSend(a2, "destination");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "uniqueIdentifier");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v4, "hmf_isEqualToUUID:", *(_QWORD *)(a1 + 32));

  return v5;
}

uint64_t __50__HMDHome_destinationManagerWithParentIdentifier___block_invoke(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  uint64_t v5;

  objc_msgSend(a2, "destination");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "parentIdentifier");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v4, "hmf_isEqualToUUID:", *(_QWORD *)(a1 + 32));

  return v5;
}

uint64_t __69__HMDHome_rootDestinationManagerWithDescendantDestinationIdentifier___block_invoke(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  uint64_t v5;
  _QWORD v7[5];
  id v8;

  objc_msgSend(a2, "components");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v7[0] = MEMORY[0x24BDAC760];
  v7[1] = 3221225472;
  v7[2] = __69__HMDHome_rootDestinationManagerWithDescendantDestinationIdentifier___block_invoke_2;
  v7[3] = &unk_24E776040;
  v4 = *(void **)(a1 + 40);
  v7[4] = *(_QWORD *)(a1 + 32);
  v8 = v4;
  v5 = objc_msgSend(v3, "na_any:", v7);

  return v5;
}

uint64_t __69__HMDHome_rootDestinationManagerWithDescendantDestinationIdentifier___block_invoke_2(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  id v7;
  void *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  void *v12;
  id v13;
  NSObject *v14;
  void *v15;
  int v17;
  void *v18;
  __int16 v19;
  id v20;
  __int16 v21;
  void *v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  v3 = a2;
  objc_msgSend(v3, "accessory");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "accessory");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v6 = v5;
  else
    v6 = 0;
  v7 = v6;

  if (v7)
  {
    v8 = *(void **)(a1 + 40);
    objc_msgSend(v7, "audioDestination");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "uniqueIdentifier");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v11 = objc_msgSend(v8, "hmf_isEqualToUUID:", v10);

  }
  else
  {
    v12 = (void *)MEMORY[0x227676638]();
    v13 = *(id *)(a1 + 32);
    HMFGetOSLogHandle();
    v14 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      v17 = 138543874;
      v18 = v15;
      v19 = 2112;
      v20 = v3;
      v21 = 2112;
      v22 = v4;
      _os_log_impl(&dword_2218F0000, v14, OS_LOG_TYPE_ERROR, "%{public}@Failed to apple media accessory from component: %@ accessory: %@", (uint8_t *)&v17, 0x20u);

    }
    objc_autoreleasePoolPop(v12);
    v11 = 0;
  }

  return v11;
}

uint64_t __74__HMDHome_destinationManagersWithDestinationIdentifiers_supportedOptions___block_invoke(uint64_t a1, void *a2)
{
  void *v2;
  void *v3;
  uint64_t v4;

  v2 = *(void **)(a1 + 32);
  objc_msgSend(a2, "identifier");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v2, "containsObject:", v3);

  return v4;
}

id __55__HMDHome_targetAccessoriesWithDestinationIdentifiers___block_invoke(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  v3 = a2;
  objc_msgSend(v3, "audioDestinationManager");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = *(void **)(a1 + 32);
  objc_msgSend(v4, "identifier");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  LODWORD(v5) = objc_msgSend(v5, "containsObject:", v6);

  if ((_DWORD)v5)
  {
    objc_msgSend(v3, "targetAccessory");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v7 = 0;
  }

  return v7;
}

id __55__HMDHome_targetAccessoriesWithDestinationIdentifiers___block_invoke_2(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  id v7;

  v3 = a2;
  objc_msgSend(v3, "audioDestinationManager");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = *(void **)(a1 + 32);
  objc_msgSend(v4, "identifier");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  LODWORD(v5) = objc_msgSend(v5, "containsObject:", v6);

  if ((_DWORD)v5)
    v7 = v3;
  else
    v7 = 0;

  return v7;
}

uint64_t __56__HMDHome_audioDestinationControllerDataForDestination___block_invoke(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  void *v5;
  uint64_t v6;

  objc_msgSend(a2, "audioDestinationControllerData");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "destinationIdentifier");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 32), "uniqueIdentifier");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend(v4, "hmf_isEqualToUUID:", v5);

  return v6;
}

id __32__HMDHome_appleMediaAccessories__block_invoke(uint64_t a1, void *a2)
{
  id v2;
  void *v3;
  id v4;

  v2 = a2;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v3 = v2;
  else
    v3 = 0;
  v4 = v3;

  return v4;
}

uint64_t __27__HMDHome__setAccessories___block_invoke(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "uuid");
}

uint64_t __27__HMDHome_currentAccessory__block_invoke(uint64_t a1, void *a2)
{
  id v2;
  void *v3;
  id v4;
  void *v5;
  uint64_t v6;

  v2 = a2;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v3 = v2;
  else
    v3 = 0;
  v4 = v3;
  v5 = v4;
  if (v4)
    v6 = objc_msgSend(v4, "isCurrentAccessory");
  else
    v6 = 0;

  return v6;
}

uint64_t __29__HMDHome__handleRemoveZone___block_invoke(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(a1 + 32), "respondWithPayload:error:", 0, a2);
}

void __26__HMDHome__handleAddZone___block_invoke(uint64_t a1, uint64_t a2)
{
  void *v2;
  void *v4;
  void *v5;
  _QWORD v6[2];
  _QWORD v7[3];

  v7[2] = *MEMORY[0x24BDAC8D0];
  v2 = *(void **)(a1 + 32);
  if (a2)
  {
    objc_msgSend(*(id *)(a1 + 32), "respondWithError:", a2);
  }
  else
  {
    v6[0] = CFSTR("kZoneUUID");
    objc_msgSend(*(id *)(a1 + 40), "UUIDString");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    v6[1] = CFSTR("kZoneName");
    v7[0] = v4;
    v7[1] = *(_QWORD *)(a1 + 48);
    objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v7, v6, 2);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "respondWithPayload:", v5);

  }
}

void __25__HMDHome__handleRename___block_invoke(uint64_t a1, uint64_t a2)
{
  void *v2;
  uint64_t v3;
  void *v4;
  const __CFString *v5;
  _QWORD v6[2];

  v6[1] = *MEMORY[0x24BDAC8D0];
  v2 = *(void **)(a1 + 32);
  if (a2)
  {
    objc_msgSend(*(id *)(a1 + 32), "respondWithError:", a2);
  }
  else
  {
    v3 = *(_QWORD *)(a1 + 40);
    v5 = CFSTR("kHomeName");
    v6[0] = v3;
    objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v6, &v5, 1);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "respondWithPayload:", v4);

  }
}

id __69__HMDHome__unexpectedCharacteristicsFromCharacteristicNotifications___block_invoke(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  char isKindOfClass;
  id v6;
  void *v7;
  void *v8;
  void *v9;

  v3 = a2;
  objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", v3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  isKindOfClass = objc_opt_isKindOfClass();

  v6 = 0;
  if ((isKindOfClass & 1) != 0 && v4)
  {
    v7 = (void *)objc_msgSend(objc_alloc(MEMORY[0x24BDD1880]), "initWithUUIDString:", v3);
    objc_msgSend(*(id *)(a1 + 40), "accessoryWithUUID:", v7);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
      v9 = v8;
    else
      v9 = 0;
    v6 = v9;

  }
  return v6;
}

- (void)_notificationPayloadsForRemoteGateway:(void *)a3 accessories:(_QWORD *)a4 enableCharacteristicNotificationPayload:(_QWORD *)a5 characteristicNotificationThresholdsPayload:(_QWORD *)a6 disableCharacteristicNotificationPayload:(_QWORD *)a7 enableMediaNotificationPayload:(_QWORD *)a8 disableMediaNotificationPayload:
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  void *v14;
  id v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t i;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  id v25;
  NSObject *v26;
  void *v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  void *v35;
  void *v36;
  id v37;
  void *v38;
  id v39;
  void *v40;
  id v41;
  NSObject *v42;
  void *v43;
  void *v44;
  void *v45;
  void *v46;
  uint64_t v47;
  void *v48;
  void *v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  void *v56;
  char v57;
  void *v58;
  void *v59;
  int v60;
  void *v61;
  void *v62;
  char v63;
  char v64;
  void *v65;
  void *v66;
  int v67;
  void *v68;
  id v69;
  NSObject *v70;
  void *v71;
  void *v72;
  void *v73;
  void *v74;
  void *v75;
  void *v76;
  void *v77;
  void *v78;
  int v79;
  void *v80;
  void *v81;
  void *v82;
  void *v83;
  id v84;
  NSObject *v85;
  void *v86;
  void *v87;
  void *v88;
  void *v89;
  void *v90;
  void *v91;
  void *v92;
  void *v93;
  void *v94;
  id v100;
  void *v101;
  void *v102;
  void *v103;
  uint64_t v104;
  id v105;
  id v106;
  uint64_t v107;
  uint64_t v108;
  void *v109;
  id v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  void *v114;
  void *v115;
  uint64_t v116;
  uint64_t v117;
  void *v118;
  uint64_t v119;
  void *v120;
  id obj;
  id obja;
  id v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  void *v128;
  void *v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  _BYTE buf[32];
  __int16 v151;
  void *v152;
  __int16 v153;
  void *v154;
  __int16 v155;
  void *v156;
  _BYTE v157[128];
  _BYTE v158[128];
  __int128 v159;
  _BYTE v160[128];
  _BYTE v161[128];
  _BYTE v162[128];
  uint64_t v163;

  v163 = *MEMORY[0x24BDAC8D0];
  v100 = a3;
  if (a1)
  {
    objc_msgSend(MEMORY[0x24BDBCEB8], "array");
    v129 = (void *)objc_claimAutoreleasedReturnValue();
    v146 = 0u;
    v147 = 0u;
    v148 = 0u;
    v149 = 0u;
    objc_msgSend(a1, "triggers");
    obj = (id)objc_claimAutoreleasedReturnValue();
    v9 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v146, v162, 16);
    v118 = a1;
    if (v9)
    {
      v10 = v9;
      v11 = *(_QWORD *)v147;
      v116 = *(_QWORD *)v147;
      do
      {
        v12 = 0;
        v119 = v10;
        do
        {
          if (*(_QWORD *)v147 != v11)
            objc_enumerationMutation(obj);
          v13 = *(id *)(*((_QWORD *)&v146 + 1) + 8 * v12);
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) != 0)
            v14 = v13;
          else
            v14 = 0;
          v15 = v14;

          if (objc_msgSend(v15, "shouldActivateOnLocalDevice"))
          {
            v124 = v15;
            v126 = v12;
            v144 = 0u;
            v145 = 0u;
            v142 = 0u;
            v143 = 0u;
            objc_msgSend(v15, "characteristicEvents");
            v16 = (void *)objc_claimAutoreleasedReturnValue();
            v17 = objc_msgSend(v16, "countByEnumeratingWithState:objects:count:", &v142, v161, 16);
            if (v17)
            {
              v18 = v17;
              v19 = *(_QWORD *)v143;
              do
              {
                for (i = 0; i != v18; ++i)
                {
                  if (*(_QWORD *)v143 != v19)
                    objc_enumerationMutation(v16);
                  v21 = *(void **)(*((_QWORD *)&v142 + 1) + 8 * i);
                  objc_msgSend(v21, "characteristic");
                  v22 = (void *)objc_claimAutoreleasedReturnValue();

                  if (v22)
                  {
                    objc_msgSend(v21, "characteristic");
                    v23 = (void *)objc_claimAutoreleasedReturnValue();
                    objc_msgSend(v129, "addObject:", v23);

                  }
                  else
                  {
                    v24 = (void *)MEMORY[0x227676638]();
                    v25 = v118;
                    HMFGetOSLogHandle();
                    v26 = objc_claimAutoreleasedReturnValue();
                    if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
                    {
                      HMFGetLogIdentifier();
                      v27 = (void *)objc_claimAutoreleasedReturnValue();
                      *(_DWORD *)buf = 138543618;
                      *(_QWORD *)&buf[4] = v27;
                      *(_WORD *)&buf[12] = 2112;
                      *(_QWORD *)&buf[14] = v21;
                      _os_log_impl(&dword_2218F0000, v26, OS_LOG_TYPE_ERROR, "%{public}@Characteristic of HMDCharacteristicEvent %@ is nil!", buf, 0x16u);

                    }
                    objc_autoreleasePoolPop(v24);
                  }
                  a1 = v118;
                }
                v18 = objc_msgSend(v16, "countByEnumeratingWithState:objects:count:", &v142, v161, 16);
              }
              while (v18);
            }

            v11 = v116;
            v10 = v119;
            v15 = v124;
            v12 = v126;
          }

          ++v12;
        }
        while (v12 != v10);
        v10 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v146, v162, 16);
      }
      while (v10);
    }

    v28 = 0x24BDBC000uLL;
    objc_msgSend(MEMORY[0x24BDBCED8], "dictionary");
    v103 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDBCED8], "dictionary");
    v101 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDBCED8], "dictionary");
    v102 = (void *)objc_claimAutoreleasedReturnValue();
    if (a7)
    {
      objc_msgSend(MEMORY[0x24BDBCED8], "dictionary");
      v29 = objc_claimAutoreleasedReturnValue();
    }
    else
    {
      v29 = 0;
    }
    v94 = (void *)v29;
    if (a8)
    {
      objc_msgSend(MEMORY[0x24BDBCED8], "dictionary");
      v93 = (void *)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      v93 = 0;
    }
    v30 = 0x24BDBC000uLL;
    v140 = 0u;
    v141 = 0u;
    v138 = 0u;
    v139 = 0u;
    v105 = v100;
    v31 = objc_msgSend(v105, "countByEnumeratingWithState:objects:count:", &v138, v160, 16);
    if (v31)
    {
      v32 = v31;
      v107 = *(_QWORD *)v139;
      v125 = *MEMORY[0x24BE1B780];
      do
      {
        v33 = 0;
        v104 = v32;
        do
        {
          if (*(_QWORD *)v139 != v107)
            objc_enumerationMutation(v105);
          v34 = *(void **)(*((_QWORD *)&v138 + 1) + 8 * v33);
          objc_msgSend(*(id *)(v30 + 3768), "array");
          v120 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(*(id *)(v30 + 3768), "array");
          v35 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(*(id *)(v28 + 3800), "dictionary");
          v36 = (void *)objc_claimAutoreleasedReturnValue();
          v37 = v34;
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) != 0)
            v38 = v37;
          else
            v38 = 0;
          v39 = v38;
          v109 = v37;

          if (v39)
          {
            v114 = v35;
            v108 = v33;
            v115 = v36;
            if (shouldSkipRemoteAccessoryNotificationRegistration(a1, v39))
            {
              v40 = (void *)MEMORY[0x227676638]();
              v41 = a1;
              HMFGetOSLogHandle();
              v42 = objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v42, OS_LOG_TYPE_INFO))
              {
                HMFGetLogIdentifier();
                v43 = (void *)objc_claimAutoreleasedReturnValue();
                *(_QWORD *)&buf[8] = 0;
                *(_QWORD *)buf = 0;
                objc_msgSend(v39, "uuid");
                v44 = (void *)objc_claimAutoreleasedReturnValue();

                if (v44)
                {
                  objc_msgSend(v39, "uuid");
                  v45 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend(v45, "getUUIDBytes:", buf);

                }
                else
                {
                  *(_OWORD *)buf = *MEMORY[0x24BE3F2C8];
                }
                v159 = *(_OWORD *)buf;
                *(_DWORD *)buf = 138543874;
                *(_QWORD *)&buf[4] = v43;
                *(_WORD *)&buf[12] = 1040;
                *(_DWORD *)&buf[14] = 16;
                *(_WORD *)&buf[18] = 2096;
                *(_QWORD *)&buf[20] = &v159;
                _os_log_impl(&dword_2218F0000, v42, OS_LOG_TYPE_INFO, "%{public}@Dropping all characteristics for %{uuid_t}.16P from remote notification as partitioned network is no longer supported by residents", buf, 0x1Cu);

                v30 = 0x24BDBC000;
                v36 = v115;
              }

              objc_autoreleasePoolPop(v40);
              v33 = v108;
              v35 = v114;
              goto LABEL_94;
            }
            v136 = 0u;
            v137 = 0u;
            v134 = 0u;
            v135 = 0u;
            v106 = v39;
            objc_msgSend(v39, "services");
            v110 = (id)objc_claimAutoreleasedReturnValue();
            v46 = v120;
            v112 = objc_msgSend(v110, "countByEnumeratingWithState:objects:count:", &v134, v158, 16);
            if (!v112)
              goto LABEL_84;
            v111 = *(_QWORD *)v135;
            while (1)
            {
              v47 = 0;
              do
              {
                if (*(_QWORD *)v135 != v111)
                  objc_enumerationMutation(v110);
                v113 = v47;
                v48 = *(void **)(*((_QWORD *)&v134 + 1) + 8 * v47);
                objc_msgSend(v48, "type");
                v49 = (void *)objc_claimAutoreleasedReturnValue();
                v130 = 0u;
                v131 = 0u;
                v132 = 0u;
                v133 = 0u;
                objc_msgSend(v48, "characteristics");
                v50 = (void *)objc_claimAutoreleasedReturnValue();
                v51 = objc_msgSend(v50, "countByEnumeratingWithState:objects:count:", &v130, v157, 16);
                if (v51)
                {
                  v52 = v51;
                  v53 = *(_QWORD *)v131;
                  v127 = *(_QWORD *)v131;
                  v128 = v50;
                  do
                  {
                    v54 = 0;
                    v117 = v52;
                    do
                    {
                      if (*(_QWORD *)v131 != v53)
                        objc_enumerationMutation(v50);
                      v55 = *(void **)(*((_QWORD *)&v130 + 1) + 8 * v54);
                      if (objc_msgSend(v55, "supportsNotification"))
                      {
                        objc_msgSend(a1, "hapMetadata");
                        v56 = (void *)objc_claimAutoreleasedReturnValue();
                        v57 = objc_msgSend(v56, "shouldFilterEnableNotificationsForCharacteristicType:serviceType:", 0, v49);

                        if ((v57 & 1) == 0)
                        {
                          v58 = v49;
                          if (objc_msgSend(v49, "isEqualToString:", v125))
                          {
                            objc_msgSend(v55, "type");
                            v59 = (void *)objc_claimAutoreleasedReturnValue();
                            v60 = objc_msgSend(v59, "isEqualToString:", CFSTR("000000A6-0000-1000-8000-0026BB765291"));

                          }
                          else
                          {
                            v60 = 0;
                          }
                          objc_msgSend(a1, "hapMetadata");
                          v61 = (void *)objc_claimAutoreleasedReturnValue();
                          objc_msgSend(v55, "type");
                          v62 = (void *)objc_claimAutoreleasedReturnValue();
                          v63 = objc_msgSend(v61, "shouldAutoEnableNotificationForCharacteristic:ofService:", v62, v58);

                          v64 = objc_msgSend(v55, "isNonHomeNotificationsEnabled");
                          if ((objc_msgSend(v129, "containsObject:", v55) & 1) != 0
                            || (v64 & 1) != 0
                            || (v63 & 1) != 0
                            || v60)
                          {
                            obja = (id)MEMORY[0x227676638]();
                            v69 = a1;
                            HMFGetOSLogHandle();
                            v70 = objc_claimAutoreleasedReturnValue();
                            if (os_log_type_enabled(v70, OS_LOG_TYPE_DEBUG))
                            {
                              HMFGetLogIdentifier();
                              v71 = (void *)objc_claimAutoreleasedReturnValue();
                              HMFBooleanToString();
                              v72 = (void *)objc_claimAutoreleasedReturnValue();
                              HMFBooleanToString();
                              v73 = (void *)objc_claimAutoreleasedReturnValue();
                              HMFBooleanToString();
                              v74 = (void *)objc_claimAutoreleasedReturnValue();
                              HMFBooleanToString();
                              v75 = (void *)objc_claimAutoreleasedReturnValue();
                              *(_DWORD *)buf = 138544642;
                              *(_QWORD *)&buf[4] = v71;
                              *(_WORD *)&buf[12] = 2112;
                              *(_QWORD *)&buf[14] = v55;
                              *(_WORD *)&buf[22] = 2112;
                              *(_QWORD *)&buf[24] = v72;
                              v151 = 2112;
                              v152 = v73;
                              v153 = 2112;
                              v154 = v74;
                              v155 = 2112;
                              v156 = v75;
                              _os_log_impl(&dword_2218F0000, v70, OS_LOG_TYPE_DEBUG, "%{public}@Enabling characteristic %@ because characteristicInEvent: %@ nonHomeNotificationsEnabled: %@ autoEnableNotification: %@ accessoryFlags: %@", buf, 0x3Eu);

                              v52 = v117;
                            }

                            objc_autoreleasePoolPop(obja);
                            objc_msgSend(v55, "changeThresholdForNonHomeClientEnabledNotifications");
                            v76 = (void *)objc_claimAutoreleasedReturnValue();
                            objc_msgSend(v69, "hapMetadata");
                            v77 = (void *)objc_claimAutoreleasedReturnValue();
                            objc_msgSend(v55, "type");
                            v78 = (void *)objc_claimAutoreleasedReturnValue();
                            v49 = v58;
                            v79 = objc_msgSend(v77, "shouldEnableHomeNotificationForCharacteristicType:serviceType:", v78, v58);

                            if (v76 && (v79 & a2 & 1) == 0)
                            {
                              objc_msgSend(v55, "instanceID");
                              v80 = (void *)objc_claimAutoreleasedReturnValue();
                              objc_msgSend(v80, "stringValue");
                              v81 = (void *)objc_claimAutoreleasedReturnValue();
                              objc_msgSend(v115, "setObject:forKeyedSubscript:", v76, v81);

                            }
                            objc_msgSend(v55, "instanceID");
                            v82 = (void *)objc_claimAutoreleasedReturnValue();
                            v46 = v120;
                            objc_msgSend(v120, "addObject:", v82);

                            a1 = v118;
                          }
                          else if (a2)
                          {
                            objc_msgSend(v55, "type");
                            v65 = (void *)objc_claimAutoreleasedReturnValue();
                            objc_msgSend(a1, "hapMetadata");
                            v66 = (void *)objc_claimAutoreleasedReturnValue();
                            v49 = v58;
                            v67 = objc_msgSend(v66, "shouldEnableHomeNotificationForCharacteristicType:serviceType:", v65, v58);

                            if (v67)
                            {
                              objc_msgSend(v55, "instanceID");
                              v68 = (void *)objc_claimAutoreleasedReturnValue();
                              objc_msgSend(v46, "addObject:", v68);

                            }
LABEL_78:

                          }
                          else
                          {
                            v49 = v58;
                            if (!objc_msgSend(v55, "isClientNotificationEnabled"))
                            {
                              objc_msgSend(v55, "instanceID");
                              v65 = (void *)objc_claimAutoreleasedReturnValue();
                              objc_msgSend(v114, "addObject:", v65);
                              goto LABEL_78;
                            }
                            v83 = (void *)MEMORY[0x227676638]();
                            v84 = a1;
                            HMFGetOSLogHandle();
                            v85 = objc_claimAutoreleasedReturnValue();
                            if (os_log_type_enabled(v85, OS_LOG_TYPE_DEFAULT))
                            {
                              HMFGetLogIdentifier();
                              v86 = (void *)objc_claimAutoreleasedReturnValue();
                              objc_msgSend(v55, "notificationRegistrations");
                              v87 = (void *)objc_claimAutoreleasedReturnValue();
                              *(_DWORD *)buf = 138543874;
                              *(_QWORD *)&buf[4] = v86;
                              *(_WORD *)&buf[12] = 2112;
                              *(_QWORD *)&buf[14] = v55;
                              *(_WORD *)&buf[22] = 2112;
                              *(_QWORD *)&buf[24] = v87;
                              _os_log_impl(&dword_2218F0000, v85, OS_LOG_TYPE_DEFAULT, "%{public}@Not disabling characteristic %@ because client(s) are registered: %@", buf, 0x20u);

                              v49 = v58;
                              v46 = v120;
                            }

                            objc_autoreleasePoolPop(v83);
                          }
                          v53 = v127;
                          v50 = v128;
                        }
                      }
                      ++v54;
                    }
                    while (v52 != v54);
                    v52 = objc_msgSend(v50, "countByEnumeratingWithState:objects:count:", &v130, v157, 16);
                  }
                  while (v52);
                }

                v47 = v113 + 1;
              }
              while (v113 + 1 != v112);
              v112 = objc_msgSend(v110, "countByEnumeratingWithState:objects:count:", &v134, v158, 16);
              if (!v112)
              {
LABEL_84:

                objc_msgSend(v109, "uuid");
                v88 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v88, "UUIDString");
                v89 = (void *)objc_claimAutoreleasedReturnValue();

                if (objc_msgSend(v46, "count"))
                {
                  v90 = (void *)objc_msgSend(v46, "copy");
                  objc_msgSend(v103, "setObject:forKeyedSubscript:", v90, v89);

                }
                v36 = v115;
                v30 = 0x24BDBC000;
                v28 = 0x24BDBC000;
                v32 = v104;
                v33 = v108;
                v35 = v114;
                if (objc_msgSend(v115, "count"))
                {
                  v91 = (void *)objc_msgSend(v115, "copy");
                  objc_msgSend(v101, "setObject:forKeyedSubscript:", v91, v89);

                  v36 = v115;
                }
                v39 = v106;
                if (objc_msgSend(v114, "count"))
                {
                  v92 = (void *)objc_msgSend(v114, "copy");
                  objc_msgSend(v102, "setObject:forKeyedSubscript:", v92, v89);

                  v36 = v115;
                }

                break;
              }
            }
          }
LABEL_94:

          ++v33;
        }
        while (v33 != v32);
        v32 = objc_msgSend(v105, "countByEnumeratingWithState:objects:count:", &v138, v160, 16);
      }
      while (v32);
    }

    *a4 = (id)objc_msgSend(v103, "copy");
    if (a5)
      *a5 = (id)objc_msgSend(v101, "copy");
    *a6 = (id)objc_msgSend(v102, "copy");
    if (a7)
      *a7 = (id)objc_msgSend(v94, "copy");
    if (a8)
      *a8 = (id)objc_msgSend(v93, "copy");

  }
}

uint64_t __46__HMDHome_handleFMFDeviceChangedNotification___block_invoke(uint64_t a1)
{
  void *v2;
  id v3;
  NSObject *v4;
  void *v5;
  int v7;
  void *v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v2 = (void *)MEMORY[0x227676638]();
  v3 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v7 = 138543362;
    v8 = v5;
    _os_log_impl(&dword_2218F0000, v4, OS_LOG_TYPE_INFO, "%{public}@Configuring HMDUserActivityStateDetectorManager - handleFMFDeviceChangedNotification", (uint8_t *)&v7, 0xCu);

  }
  objc_autoreleasePoolPop(v2);
  return objc_msgSend(*(id *)(a1 + 32), "configureUserActivityStateDetectorManager");
}

void __31__HMDHome__registerForMessages__block_invoke(uint64_t a1, void *a2)
{
  id v3;
  id WeakRetained;
  void *v5;
  id v6;
  _QWORD v7[4];
  id v8;

  v3 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "residentDeviceManager");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v7[0] = MEMORY[0x24BDAC760];
  v7[1] = 3221225472;
  v7[2] = __31__HMDHome__registerForMessages__block_invoke_2;
  v7[3] = &unk_24E79BD80;
  v8 = v3;
  v6 = v3;
  objc_msgSend(v5, "confirmWithCompletionHandler:", v7);

}

uint64_t __31__HMDHome__registerForMessages__block_invoke_2(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(a1 + 32), "respondWithPayload:error:", 0, a2);
}

void __74__HMDHome_notifyClientOfVendorInfoUpdatedForManufacturers_withCompletion___block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;
  uint64_t i;
  uint64_t v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t j;
  void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  id obj;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  _BYTE v27[128];
  _BYTE v28[128];
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  objc_msgSend(*(id *)(a1 + 32), "accessories");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v17 = (void *)objc_msgSend(v2, "copy");

  objc_msgSend(MEMORY[0x24BDBCEB8], "array");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v23 = 0u;
  v24 = 0u;
  v25 = 0u;
  v26 = 0u;
  v14 = a1;
  obj = *(id *)(a1 + 40);
  v18 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v23, v28, 16);
  if (v18)
  {
    v16 = *(_QWORD *)v24;
    do
    {
      for (i = 0; i != v18; ++i)
      {
        if (*(_QWORD *)v24 != v16)
          objc_enumerationMutation(obj);
        v5 = *(_QWORD *)(*((_QWORD *)&v23 + 1) + 8 * i);
        v19 = 0u;
        v20 = 0u;
        v21 = 0u;
        v22 = 0u;
        v6 = v17;
        v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v19, v27, 16);
        if (v7)
        {
          v8 = v7;
          v9 = *(_QWORD *)v20;
          do
          {
            for (j = 0; j != v8; ++j)
            {
              if (*(_QWORD *)v20 != v9)
                objc_enumerationMutation(v6);
              v11 = *(void **)(*((_QWORD *)&v19 + 1) + 8 * j);
              objc_msgSend(v11, "manufacturer");
              v12 = (void *)objc_claimAutoreleasedReturnValue();
              v13 = objc_msgSend(v12, "caseInsensitiveCompare:", v5);

              if (!v13)
                objc_msgSend(v3, "addObject:", v11);
            }
            v8 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v19, v27, 16);
          }
          while (v8);
        }

      }
      v18 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v23, v28, 16);
    }
    while (v18);
  }

  objc_msgSend(*(id *)(v14 + 32), "_notifyClientsOfAccessoryInfoUpdatedForAccessories:shouldRefreshBadge:withCompletion:", v3, 0, *(_QWORD *)(v14 + 48));
}

void __29__HMDHome_resetConfiguration__block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;
  id v4;
  NSObject *v5;
  void *v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t i;
  void *v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint8_t v17[128];
  uint8_t buf[4];
  void *v19;
  __int16 v20;
  void *v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  objc_msgSend(*(id *)(a1 + 32), "accessories");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = (void *)MEMORY[0x227676638]();
  v4 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v5 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543618;
    v19 = v6;
    v20 = 2112;
    v21 = v2;
    _os_log_impl(&dword_2218F0000, v5, OS_LOG_TYPE_INFO, "%{public}@resetConfiguration - removing accessories %@", buf, 0x16u);

  }
  objc_autoreleasePoolPop(v3);
  v15 = 0u;
  v16 = 0u;
  v13 = 0u;
  v14 = 0u;
  v7 = v2;
  v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
  if (v8)
  {
    v9 = v8;
    v10 = *(_QWORD *)v14;
    do
    {
      for (i = 0; i != v9; ++i)
      {
        if (*(_QWORD *)v14 != v10)
          objc_enumerationMutation(v7);
        v12 = *(void **)(*((_QWORD *)&v13 + 1) + 8 * i);
        objc_msgSend(*(id *)(a1 + 32), "removeAccessory:", v12, (_QWORD)v13);
        objc_msgSend(v12, "unconfigure");
      }
      v9 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
    }
    while (v9);
  }

}

uint64_t __47__HMDHome_evaluateShouldRelaunchAndSetRelaunch__block_invoke(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_evaluateShouldRelaunchAndSetRelaunch");
}

void __95__HMDHome_getTransactionFromHAPAccessory_hmdAccessory_uuid_hostAccessoryUUID_objectChangeType___block_invoke(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  id v5;
  void *v6;
  void *v7;
  void *v8;
  _QWORD v9[3];
  _QWORD v10[4];

  v10[3] = *MEMORY[0x24BDAC8D0];
  v9[0] = CFSTR("HM.serverIdentifier");
  v3 = *(void **)(a1 + 32);
  v4 = *(void **)(a1 + 40);
  v5 = a2;
  objc_msgSend(v4, "serverIdentifier");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v10[0] = v6;
  v9[1] = CFSTR("HM.instanceID");
  objc_msgSend(*(id *)(a1 + 40), "instanceID");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v9[2] = CFSTR("linkType");
  v10[1] = v7;
  v10[2] = v5;
  objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v10, v9, 3);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "addObject:", v8);

}

void __95__HMDHome_getTransactionFromHAPAccessory_hmdAccessory_uuid_hostAccessoryUUID_objectChangeType___block_invoke_2(uint64_t a1, void *a2)
{
  void *v2;
  id v3;

  v2 = *(void **)(a1 + 32);
  objc_msgSend(a2, "transportInfoDictionary");
  v3 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "addObject:", v3);

}

void __49__HMDHome_evaluateBulletinNotificationsSupported__block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;
  uint64_t v4;
  void *v5;
  id v6;
  NSObject *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  int v13;
  void *v14;
  __int16 v15;
  void *v16;
  __int16 v17;
  void *v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  objc_msgSend(*(id *)(a1 + 32), "residentDeviceManager");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "availableResidentDevices");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "count");

  if ((v4 != 0) != objc_msgSend(*(id *)(a1 + 32), "bulletinNotificationsSupported"))
  {
    v5 = (void *)MEMORY[0x227676638]();
    v6 = *(id *)(a1 + 32);
    HMFGetOSLogHandle();
    v7 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(*(id *)(a1 + 32), "bulletinNotificationsSupported");
      HMFBooleanToString();
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      HMFBooleanToString();
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      v13 = 138543874;
      v14 = v8;
      v15 = 2112;
      v16 = v9;
      v17 = 2112;
      v18 = v10;
      _os_log_impl(&dword_2218F0000, v7, OS_LOG_TYPE_INFO, "%{public}@Bulletin notifications supported has changed from: %@ to: %@", (uint8_t *)&v13, 0x20u);

    }
    objc_autoreleasePoolPop(v5);
    objc_msgSend(*(id *)(a1 + 32), "setBulletinNotificationsSupported:", v4 != 0);
    objc_msgSend(*(id *)(a1 + 32), "homeManager");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 32), "uuid");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "updateGenerationCounterWithReason:sourceUUID:shouldNotifyClients:", CFSTR("Bulletin Notifications Supported Updated"), v12, 1);

  }
}

uint64_t __33__HMDHome_evaluateResidentUpdate__block_invoke(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_evaluateNetworkProtectionAndRouterManagement");
}

void __33__HMDHome_reEvaluateHomeHubState__block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  uint64_t v15;
  _QWORD v16[2];

  v16[1] = *MEMORY[0x24BDAC8D0];
  objc_msgSend(*(id *)(a1 + 32), "residentDeviceManager");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "residentDevices");
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  v4 = 2 * (objc_msgSend(v3, "count") != 0);
  objc_msgSend(*(id *)(a1 + 32), "residentDeviceManager");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "primaryResidentDevice");
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  if (objc_msgSend(v6, "isEnabled") && objc_msgSend(v6, "isReachable"))
    v4 = 1;
  v7 = *(_QWORD *)(a1 + 32);
  if (*(_QWORD *)(v7 + 792) != v4)
  {
    *(_QWORD *)(v7 + 792) = v4;
    v8 = (void *)MEMORY[0x24BE3F1B0];
    v9 = *MEMORY[0x24BDD5DD0];
    v15 = *MEMORY[0x24BDD5DC8];
    objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedInteger:", objc_msgSend(*(id *)(a1 + 32), "homeHubState"));
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v16[0] = v10;
    objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v16, &v15, 1);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "messageWithName:messagePayload:", v9, v11);
    v12 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(*(id *)(a1 + 32), "msgDispatcher");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 32), "uuid");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "sendMessage:target:", v12, v14);

  }
}

unint64_t __45__HMDHome__hasPairedReachableBTLEAccessories__block_invoke(uint64_t a1, void *a2)
{
  id v2;
  unint64_t v3;

  v2 = a2;
  if (objc_msgSend(v2, "hasBTLELink"))
    v3 = ((unint64_t)objc_msgSend(v2, "reachableTransports") >> 1) & 1;
  else
    v3 = 0;

  return v3;
}

void __80__HMDHome__registerForReachabilityChangeNotificationsEnabled_completionHandler___block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id WeakRetained;
  void *v8;
  id v9;
  NSObject *v10;
  _BOOL4 v11;
  void *v12;
  int v13;
  const char *v14;
  const char *v15;
  NSObject *v16;
  uint32_t v17;
  uint64_t v18;
  const char *v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  __int16 v23;
  const char *v24;
  __int16 v25;
  id v26;
  uint64_t v27;

  v27 = *MEMORY[0x24BDAC8D0];
  v5 = a2;
  v6 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (!WeakRetained)
    goto LABEL_15;
  v8 = (void *)MEMORY[0x227676638]();
  v9 = WeakRetained;
  HMFGetOSLogHandle();
  v10 = objc_claimAutoreleasedReturnValue();
  v11 = os_log_type_enabled(v10, OS_LOG_TYPE_INFO);
  if (v5)
  {
    if (!v11)
      goto LABEL_13;
    HMFGetLogIdentifier();
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    v13 = *(unsigned __int8 *)(a1 + 48);
    v21 = 138543874;
    v22 = (uint64_t)v12;
    if (v13)
      v14 = "register";
    else
      v14 = "de-register";
    v23 = 2080;
    v24 = v14;
    v25 = 2112;
    v26 = v5;
    v15 = "%{public}@Failed to %s remote accessory reachability notification with error: %@";
    v16 = v10;
    v17 = 32;
  }
  else
  {
    if (!v11)
      goto LABEL_13;
    HMFGetLogIdentifier();
    v18 = objc_claimAutoreleasedReturnValue();
    v12 = (void *)v18;
    v19 = "registered";
    if (!*(_BYTE *)(a1 + 48))
      v19 = "de-registered";
    v21 = 138543618;
    v22 = v18;
    v23 = 2080;
    v24 = v19;
    v15 = "%{public}@Successfully %s remote accessory reachability notification";
    v16 = v10;
    v17 = 22;
  }
  _os_log_impl(&dword_2218F0000, v16, OS_LOG_TYPE_INFO, v15, (uint8_t *)&v21, v17);

LABEL_13:
  objc_autoreleasePoolPop(v8);
  v20 = *(_QWORD *)(a1 + 32);
  if (v20)
    (*(void (**)(uint64_t, BOOL))(v20 + 16))(v20, v5 == 0);
LABEL_15:

}

void __38__HMDHome_readProfileState_viaDevice___block_invoke(void **a1)
{
  -[HMDHome _readProfileState:viaDevice:](a1[4], a1[5], a1[6]);
}

- (void)_readProfileState:(void *)a3 viaDevice:
{
  void *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t i;
  uint64_t v14;
  void *v15;
  void *v16;
  id v17;
  id v18;
  _QWORD v19[4];
  id v20;
  id location;
  _QWORD v22[5];
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  _BYTE v27[128];
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  v18 = a2;
  v17 = a3;
  if (a1)
  {
    v5 = (void *)MEMORY[0x24BDBCEB8];
    v6 = objc_msgSend(v18, "count");
    +[HMDMediaSession mediaPropertyMessageKeys](HMDMediaSession, "mediaPropertyMessageKeys");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "arrayWithCapacity:", objc_msgSend(v7, "count") * v6);
    v8 = (void *)objc_claimAutoreleasedReturnValue();

    v25 = 0u;
    v26 = 0u;
    v23 = 0u;
    v24 = 0u;
    v9 = v18;
    v10 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v23, v27, 16);
    v11 = MEMORY[0x24BDAC760];
    if (v10)
    {
      v12 = *(_QWORD *)v24;
      do
      {
        for (i = 0; i != v10; ++i)
        {
          if (*(_QWORD *)v24 != v12)
            objc_enumerationMutation(v9);
          v14 = *(_QWORD *)(*((_QWORD *)&v23 + 1) + 8 * i);
          +[HMDMediaSession mediaPropertyMessageKeys](HMDMediaSession, "mediaPropertyMessageKeys", v17);
          v15 = (void *)objc_claimAutoreleasedReturnValue();
          v22[0] = v11;
          v22[1] = 3221225472;
          v22[2] = __39__HMDHome__readProfileState_viaDevice___block_invoke;
          v22[3] = &unk_24E797670;
          v22[4] = v14;
          objc_msgSend(v15, "na_map:", v22);
          v16 = (void *)objc_claimAutoreleasedReturnValue();

          objc_msgSend(v8, "addObjectsFromArray:", v16);
        }
        v10 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v23, v27, 16);
      }
      while (v10);
    }

    objc_initWeak(&location, a1);
    v19[0] = v11;
    v19[1] = 3221225472;
    v19[2] = __39__HMDHome__readProfileState_viaDevice___block_invoke_2;
    v19[3] = &unk_24E79ADC0;
    objc_copyWeak(&v20, &location);
    objc_msgSend(a1, "redispatchMediaReadRequests:viaDevice:completion:", v8, v17, v19);
    objc_destroyWeak(&v20);
    objc_destroyWeak(&location);

  }
}

HMDMediaPropertyRequest *__39__HMDHome__readProfileState_viaDevice___block_invoke(uint64_t a1, uint64_t a2)
{
  return +[HMDMediaPropertyRequest requestWithProperty:mediaProfile:](HMDMediaPropertyRequest, "requestWithProperty:mediaProfile:", a2, *(_QWORD *)(a1 + 32));
}

void __39__HMDHome__readProfileState_viaDevice___block_invoke_2(uint64_t a1, void *a2)
{
  id v3;
  id WeakRetained;
  void *v5;
  NSObject *v6;
  _QWORD v7[4];
  id v8;
  void *v9;

  v3 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v5 = WeakRetained;
  if (WeakRetained)
  {
    objc_msgSend(WeakRetained, "workQueue");
    v6 = objc_claimAutoreleasedReturnValue();
    v7[0] = MEMORY[0x24BDAC760];
    v7[1] = 3221225472;
    v7[2] = __39__HMDHome__readProfileState_viaDevice___block_invoke_3;
    v7[3] = &unk_24E79C268;
    v8 = v3;
    v9 = v5;
    dispatch_async(v6, v7);

  }
}

void __39__HMDHome__readProfileState_viaDevice___block_invoke_3(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  __int128 v3;
  uint64_t v4;
  void *v5;
  id v6;
  void *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  void *i;
  void *v12;
  void *v13;
  void *v14;
  uint64_t v15;
  void *v16;
  int v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  int v22;
  void *v23;
  int v24;
  void *v25;
  int v26;
  void *v27;
  int v28;
  void *v29;
  int v30;
  void *v31;
  int v32;
  id v33;
  void *v34;
  void *v35;
  void *v36;
  int v37;
  uint64_t v38;
  void *v39;
  HMDMediaSessionState *v40;
  void *v41;
  id v42;
  NSObject *v43;
  void *v44;
  void *v45;
  uint64_t v46;
  void *v47;
  void *v48;
  void *v49;
  void *v50;
  void *v51;
  void *v52;
  _BOOL4 v53;
  uint64_t v54;
  void *v55;
  id v56;
  NSObject *v57;
  uint64_t v58;
  HMDMediaSessionState *v59;
  void *v60;
  void *v61;
  uint64_t v62;
  HMDMediaSessionState *v63;
  void *v64;
  id v65;
  NSObject *v66;
  void *v67;
  void *v68;
  uint64_t v69;
  void *v70;
  id v71;
  NSObject *v72;
  void *v73;
  void *v74;
  void *v75;
  id v76;
  NSObject *v77;
  void *v78;
  void *v79;
  void *v80;
  id v81;
  NSObject *v82;
  void *v83;
  void *v84;
  uint64_t v85;
  void *v86;
  id v87;
  NSObject *v88;
  HMDMediaSessionState *v89;
  void *v90;
  void *v91;
  uint64_t v92;
  void *v93;
  void *v94;
  void *v95;
  void *v96;
  void *v97;
  void *v98;
  HMDHomeManagerXPCMessageSendPolicy *v99;
  void *v100;
  void *v101;
  void *v102;
  __int128 v103;
  id obj;
  uint64_t v105;
  void *v106;
  void *v107;
  uint64_t v108;
  uint64_t v109;
  void *v110;
  uint64_t v111;
  void *v112;
  void *v113;
  uint64_t v114;
  void *v115;
  uint64_t v116;
  void *v117;
  uint64_t v118;
  void *v119;
  uint64_t v120;
  void *v121;
  uint64_t v122;
  void *v123;
  uint64_t v124;
  void *v125;
  void *v126;
  uint64_t v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  const __CFString *v136;
  void *v137;
  void *v138;
  void *v139;
  uint64_t v140;
  void *v141;
  uint64_t v142;
  void *v143;
  uint64_t v144;
  void *v145;
  uint64_t v146;
  void *v147;
  uint64_t v148;
  void *v149;
  uint64_t v150;
  void *v151;
  uint8_t buf[4];
  void *v153;
  __int16 v154;
  uint64_t v155;
  __int16 v156;
  void *v157;
  __int16 v158;
  uint64_t v159;
  _BYTE v160[128];
  _BYTE v161[128];
  uint64_t v162;

  v1 = a1;
  v162 = *MEMORY[0x24BDAC8D0];
  objc_msgSend(MEMORY[0x24BDBCED8], "dictionaryWithCapacity:", objc_msgSend(*(id *)(a1 + 32), "count"));
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v132 = 0u;
  v133 = 0u;
  v134 = 0u;
  v135 = 0u;
  obj = *(id *)(v1 + 32);
  v105 = v1;
  v109 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v132, v161, 16);
  v110 = v2;
  if (v109)
  {
    v108 = *(_QWORD *)v133;
    v127 = *MEMORY[0x24BDD66B8];
    v124 = *MEMORY[0x24BDD66E0];
    v122 = *MEMORY[0x24BDD6738];
    v120 = *MEMORY[0x24BDD6708];
    v118 = *MEMORY[0x24BDD6758];
    v116 = *MEMORY[0x24BDD66C8];
    v114 = *MEMORY[0x24BDD6748];
    *(_QWORD *)&v3 = 138544130;
    v103 = v3;
    do
    {
      v4 = 0;
      do
      {
        if (*(_QWORD *)v133 != v108)
          objc_enumerationMutation(obj);
        v5 = *(void **)(*((_QWORD *)&v132 + 1) + 8 * v4);
        v128 = 0u;
        v129 = 0u;
        v130 = 0u;
        v131 = 0u;
        v6 = v5;
        v7 = (void *)objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v128, v160, 16);
        v111 = v4;
        if (!v7)
        {

          v9 = 0;
          v123 = 0;
          v121 = 0;
          v119 = 0;
          v117 = 0;
          v115 = 0;
LABEL_61:
          objc_msgSend(v9, "mediaSession", v103);
          v34 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v34, "state");
          v40 = (HMDMediaSessionState *)objc_claimAutoreleasedReturnValue();
          v8 = 0;
          goto LABEL_62;
        }
        v115 = 0;
        v117 = 0;
        v119 = 0;
        v121 = 0;
        v123 = 0;
        v125 = 0;
        v8 = 0;
        v9 = 0;
        v10 = *(_QWORD *)v129;
        do
        {
          for (i = 0; i != v7; i = (char *)i + 1)
          {
            if (*(_QWORD *)v129 != v10)
              objc_enumerationMutation(v6);
            v12 = *(void **)(*((_QWORD *)&v128 + 1) + 8 * (_QWORD)i);
            objc_msgSend(v12, "error", v103);
            v13 = (void *)objc_claimAutoreleasedReturnValue();

            if (!v13)
            {
              objc_msgSend(v12, "request");
              v14 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v14, "mediaProfile");
              v15 = objc_claimAutoreleasedReturnValue();

              objc_msgSend(v14, "property");
              v16 = (void *)objc_claimAutoreleasedReturnValue();
              v17 = objc_msgSend(v16, "isEqual:", v127);

              if (v17)
              {
                objc_msgSend(v12, "value");
                v18 = (void *)objc_claimAutoreleasedReturnValue();
                objc_opt_class();
                if ((objc_opt_isKindOfClass() & 1) != 0)
                  v19 = v18;
                else
                  v19 = 0;
                v20 = v8;
                v8 = v19;
                goto LABEL_47;
              }
              objc_msgSend(v14, "property");
              v21 = (void *)objc_claimAutoreleasedReturnValue();
              v22 = objc_msgSend(v21, "isEqual:", v124);

              if (v22)
              {
                objc_msgSend(v12, "value");
                v18 = (void *)objc_claimAutoreleasedReturnValue();
                objc_opt_class();
                if ((objc_opt_isKindOfClass() & 1) != 0)
                  v19 = v18;
                else
                  v19 = 0;
                v20 = v125;
                v125 = v19;
                goto LABEL_47;
              }
              objc_msgSend(v14, "property");
              v23 = (void *)objc_claimAutoreleasedReturnValue();
              v24 = objc_msgSend(v23, "isEqual:", v122);

              if (v24)
              {
                objc_msgSend(v12, "value");
                v18 = (void *)objc_claimAutoreleasedReturnValue();
                objc_opt_class();
                if ((objc_opt_isKindOfClass() & 1) != 0)
                  v19 = v18;
                else
                  v19 = 0;
                v20 = v123;
                v123 = v19;
                goto LABEL_47;
              }
              objc_msgSend(v14, "property");
              v25 = (void *)objc_claimAutoreleasedReturnValue();
              v26 = objc_msgSend(v25, "isEqual:", v120);

              if (v26)
              {
                objc_msgSend(v12, "value");
                v18 = (void *)objc_claimAutoreleasedReturnValue();
                objc_opt_class();
                if ((objc_opt_isKindOfClass() & 1) != 0)
                  v19 = v18;
                else
                  v19 = 0;
                v20 = v121;
                v121 = v19;
                goto LABEL_47;
              }
              objc_msgSend(v14, "property");
              v27 = (void *)objc_claimAutoreleasedReturnValue();
              v28 = objc_msgSend(v27, "isEqual:", v118);

              if (v28)
              {
                objc_msgSend(v12, "value");
                v18 = (void *)objc_claimAutoreleasedReturnValue();
                objc_opt_class();
                if ((objc_opt_isKindOfClass() & 1) != 0)
                  v19 = v18;
                else
                  v19 = 0;
                v20 = v119;
                v119 = v19;
                goto LABEL_47;
              }
              objc_msgSend(v14, "property");
              v29 = (void *)objc_claimAutoreleasedReturnValue();
              v30 = objc_msgSend(v29, "isEqual:", v116);

              if (v30)
              {
                objc_msgSend(v12, "value");
                v18 = (void *)objc_claimAutoreleasedReturnValue();
                objc_opt_class();
                if ((objc_opt_isKindOfClass() & 1) != 0)
                  v19 = v18;
                else
                  v19 = 0;
                v20 = v117;
                v117 = v19;
                goto LABEL_47;
              }
              objc_msgSend(v14, "property");
              v31 = (void *)objc_claimAutoreleasedReturnValue();
              v32 = objc_msgSend(v31, "isEqual:", v114);

              if (v32)
              {
                objc_msgSend(v12, "value");
                v18 = (void *)objc_claimAutoreleasedReturnValue();
                objc_opt_class();
                if ((objc_opt_isKindOfClass() & 1) != 0)
                  v19 = v18;
                else
                  v19 = 0;
                v20 = v115;
                v115 = v19;
LABEL_47:
                v33 = v19;

              }
              v9 = (void *)v15;
              continue;
            }
          }
          v7 = (void *)objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v128, v160, 16);
        }
        while (v7);

        v2 = v110;
        if (!v8)
        {
          v1 = v105;
          v7 = v125;
          goto LABEL_61;
        }
        objc_msgSend(v9, "accessory");
        v34 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v9, "uniqueIdentifier");
        v35 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v35, "UUIDString");
        v36 = (void *)objc_claimAutoreleasedReturnValue();
        v37 = objc_msgSend(v8, "isEqualToString:", v36);

        v1 = v105;
        v7 = v125;
        if (v37)
        {
          objc_msgSend(v34, "identifier");
          v38 = objc_claimAutoreleasedReturnValue();

          v8 = (void *)v38;
        }
        objc_msgSend(v34, "home");
        v39 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v39, "mediaSessionStateWithIdentifier:", v8);
        v40 = (HMDMediaSessionState *)objc_claimAutoreleasedReturnValue();
        if (!v40)
        {
          v41 = (void *)MEMORY[0x227676638]();
          v42 = *(id *)(v105 + 40);
          HMFGetOSLogHandle();
          v43 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v43, OS_LOG_TYPE_INFO))
          {
            HMFGetLogIdentifier();
            v112 = v41;
            v44 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v34, "identifier");
            v45 = (void *)objc_claimAutoreleasedReturnValue();
            v46 = *(_QWORD *)(v105 + 32);
            *(_DWORD *)buf = v103;
            v153 = v44;
            v154 = 2112;
            v155 = (uint64_t)v8;
            v156 = 2112;
            v157 = v45;
            v158 = 2112;
            v159 = v46;
            _os_log_impl(&dword_2218F0000, v43, OS_LOG_TYPE_INFO, "%{public}@Creating a media session state for a remote session (sessionIdentifier %@; accessoryIdentifier %"
              "@) update - responses %@",
              buf,
              0x2Au);

            v41 = v112;
          }

          objc_autoreleasePoolPop(v41);
          v40 = -[HMDMediaSessionState initWithSessionIdentifier:]([HMDMediaSessionState alloc], "initWithSessionIdentifier:", v8);
          objc_msgSend(v39, "addMediaSessionState:", v40);
          v7 = v125;
        }

LABEL_62:
        objc_msgSend(v9, "accessory");
        v47 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v47, "uuid");
        v48 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v48, "UUIDString");
        v49 = (void *)objc_claimAutoreleasedReturnValue();

        if (v49 && v40)
        {
          v106 = v47;
          v50 = (void *)MEMORY[0x24BDBCED8];
          objc_msgSend(v2, "hmf_dictionaryForKey:", v49);
          v51 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v50, "dictionaryWithDictionary:", v51);
          v52 = (void *)objc_claimAutoreleasedReturnValue();

          v53 = v7 != 0;
          v126 = v7;
          v113 = v52;
          v107 = v49;
          if (v7)
          {
            v54 = objc_msgSend(v7, "unsignedIntegerValue");
            v55 = (void *)MEMORY[0x227676638](-[HMDMediaSessionState setPlaybackState:](v40, "setPlaybackState:", v54));
            v56 = *(id *)(v1 + 40);
            HMFGetOSLogHandle();
            v57 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v57, OS_LOG_TYPE_INFO))
            {
              HMFGetLogIdentifier();
              v58 = v1;
              v59 = v40;
              v60 = (void *)objc_claimAutoreleasedReturnValue();
              *(_DWORD *)buf = 138543618;
              v153 = v60;
              v154 = 2048;
              v155 = v54;
              _os_log_impl(&dword_2218F0000, v57, OS_LOG_TYPE_INFO, "%{public}@Read the profile playback state as %tu", buf, 0x16u);

              v40 = v59;
              v1 = v58;
            }

            objc_autoreleasePoolPop(v55);
            v7 = v126;
            v150 = v124;
            v151 = v126;
            objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", &v151, &v150, 1);
            v61 = (void *)objc_claimAutoreleasedReturnValue();
            v52 = v113;
            objc_msgSend(v113, "addEntriesFromDictionary:", v61);

          }
          if (v123)
          {
            v62 = objc_msgSend(v123, "unsignedIntegerValue");
            v63 = v40;
            v64 = (void *)MEMORY[0x227676638](-[HMDMediaSessionState setShuffleState:](v40, "setShuffleState:", v62));
            v65 = *(id *)(v1 + 40);
            HMFGetOSLogHandle();
            v66 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v66, OS_LOG_TYPE_INFO))
            {
              HMFGetLogIdentifier();
              v67 = (void *)objc_claimAutoreleasedReturnValue();
              *(_DWORD *)buf = 138543618;
              v153 = v67;
              v154 = 2048;
              v155 = v62;
              _os_log_impl(&dword_2218F0000, v66, OS_LOG_TYPE_INFO, "%{public}@Read the profile shuffle state as %tu", buf, 0x16u);

            }
            objc_autoreleasePoolPop(v64);
            v148 = v122;
            v149 = v123;
            v53 = 1;
            objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", &v149, &v148, 1);
            v68 = (void *)objc_claimAutoreleasedReturnValue();
            v52 = v113;
            objc_msgSend(v113, "addEntriesFromDictionary:", v68);

            v7 = v126;
          }
          else
          {
            v63 = v40;
          }
          if (v121)
          {
            v69 = objc_msgSend(v121, "unsignedIntegerValue");
            v70 = (void *)MEMORY[0x227676638](-[HMDMediaSessionState setRepeatState:](v63, "setRepeatState:", v69));
            v71 = *(id *)(v1 + 40);
            HMFGetOSLogHandle();
            v72 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v72, OS_LOG_TYPE_INFO))
            {
              HMFGetLogIdentifier();
              v73 = (void *)objc_claimAutoreleasedReturnValue();
              *(_DWORD *)buf = 138543618;
              v153 = v73;
              v154 = 2048;
              v155 = v69;
              _os_log_impl(&dword_2218F0000, v72, OS_LOG_TYPE_INFO, "%{public}@Read the profile repeat state as %tu", buf, 0x16u);

            }
            objc_autoreleasePoolPop(v70);
            v146 = v120;
            v147 = v121;
            v53 = 1;
            objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", &v147, &v146, 1);
            v74 = (void *)objc_claimAutoreleasedReturnValue();
            v52 = v113;
            objc_msgSend(v113, "addEntriesFromDictionary:", v74);

            v7 = v126;
          }
          if (v119)
          {
            v75 = (void *)MEMORY[0x227676638](-[HMDMediaSessionState setVolume:](v63, "setVolume:", v119));
            v76 = *(id *)(v1 + 40);
            HMFGetOSLogHandle();
            v77 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v77, OS_LOG_TYPE_INFO))
            {
              HMFGetLogIdentifier();
              v78 = (void *)objc_claimAutoreleasedReturnValue();
              *(_DWORD *)buf = 138543618;
              v153 = v78;
              v154 = 2112;
              v155 = (uint64_t)v119;
              _os_log_impl(&dword_2218F0000, v77, OS_LOG_TYPE_INFO, "%{public}@Read the profile volume as %@", buf, 0x16u);

            }
            objc_autoreleasePoolPop(v75);
            v144 = v118;
            v145 = v119;
            v53 = 1;
            objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", &v145, &v144, 1);
            v79 = (void *)objc_claimAutoreleasedReturnValue();
            v52 = v113;
            objc_msgSend(v113, "addEntriesFromDictionary:", v79);

          }
          if (v117)
          {
            v80 = (void *)MEMORY[0x227676638](-[HMDMediaSessionState setMediaUniqueIdentifier:](v63, "setMediaUniqueIdentifier:", v117));
            v81 = *(id *)(v1 + 40);
            HMFGetOSLogHandle();
            v82 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v82, OS_LOG_TYPE_INFO))
            {
              HMFGetLogIdentifier();
              v83 = (void *)objc_claimAutoreleasedReturnValue();
              *(_DWORD *)buf = 138543618;
              v153 = v83;
              v154 = 2112;
              v155 = (uint64_t)v117;
              _os_log_impl(&dword_2218F0000, v82, OS_LOG_TYPE_INFO, "%{public}@Read the profile mediaUniqueIdentifier state as %@", buf, 0x16u);

            }
            objc_autoreleasePoolPop(v80);
            v142 = v116;
            v143 = v117;
            objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", &v143, &v142, 1);
            v84 = (void *)objc_claimAutoreleasedReturnValue();
            v52 = v113;
            objc_msgSend(v113, "addEntriesFromDictionary:", v84);

            v40 = v63;
            v49 = v107;
            if (!v115)
            {
LABEL_90:
              objc_msgSend(v110, "setObject:forKey:", v52, v49);
              goto LABEL_91;
            }
LABEL_87:
            v85 = objc_msgSend(v115, "unsignedIntegerValue");
            v86 = (void *)MEMORY[0x227676638](-[HMDMediaSessionState setSleepWakeState:](v40, "setSleepWakeState:", v85));
            v87 = *(id *)(v1 + 40);
            HMFGetOSLogHandle();
            v88 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v88, OS_LOG_TYPE_INFO))
            {
              HMFGetLogIdentifier();
              v89 = v40;
              v90 = (void *)objc_claimAutoreleasedReturnValue();
              *(_DWORD *)buf = 138543618;
              v153 = v90;
              v154 = 2048;
              v155 = v85;
              _os_log_impl(&dword_2218F0000, v88, OS_LOG_TYPE_INFO, "%{public}@Read the profile sleepWakeState as %tu", buf, 0x16u);

              v40 = v89;
            }

            objc_autoreleasePoolPop(v86);
            v140 = v114;
            v141 = v115;
            objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", &v141, &v140, 1);
            v91 = (void *)objc_claimAutoreleasedReturnValue();
            v52 = v113;
            objc_msgSend(v113, "addEntriesFromDictionary:", v91);

            v7 = v126;
            goto LABEL_90;
          }
          v40 = v63;
          v49 = v107;
          if (v115)
            goto LABEL_87;
          if (v53)
            goto LABEL_90;
LABEL_91:

          v2 = v110;
          v47 = v106;
        }

        v4 = v111 + 1;
      }
      while (v111 + 1 != v109);
      v92 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v132, v161, 16);
      v109 = v92;
    }
    while (v92);
  }

  if (objc_msgSend(v2, "count"))
  {
    objc_msgSend(*(id *)(v1 + 40), "uuid");
    v93 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v93, "UUIDString");
    v94 = (void *)objc_claimAutoreleasedReturnValue();
    v138 = v94;
    v136 = CFSTR("kAccessoriesListKey");
    v95 = (void *)objc_msgSend(v110, "copy");
    v137 = v95;
    objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", &v137, &v136, 1);
    v96 = (void *)objc_claimAutoreleasedReturnValue();
    v139 = v96;
    objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", &v139, &v138, 1);
    v97 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(MEMORY[0x24BE3F1D0], "entitledMessageWithName:messagePayload:", *MEMORY[0x24BDD60F8], v97);
    v98 = (void *)objc_claimAutoreleasedReturnValue();
    v99 = -[HMDHomeManagerXPCMessageSendPolicy initWithEntitlements:options:active:]([HMDHomeManagerXPCMessageSendPolicy alloc], "initWithEntitlements:options:active:", 0, -1, 1);
    objc_msgSend(v98, "setSendPolicy:", v99);

    objc_msgSend(*(id *)(v105 + 40), "msgDispatcher");
    v100 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(v105 + 40), "homeManager");
    v101 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v101, "uuid");
    v102 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v100, "sendMessage:target:", v98, v102);

    v1 = v105;
    v2 = v110;

  }
  -[HMDHome updateMediaStateWithResponses:requestMessageInformation:](*(_QWORD *)(v1 + 40), *(void **)(v1 + 32), 0);

}

uint64_t __116__HMDHome_getRunTimeStateUpdateWithOptions_includeMediaAccessorySessionState_includeResidentDeviceState_completion___block_invoke(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_getRunTimeStateUpdateWithOptions:includeMediaAccessorySessionState:includeResidentDeviceState:completion:", *(_QWORD *)(a1 + 48), *(unsigned __int8 *)(a1 + 56), *(unsigned __int8 *)(a1 + 57), *(_QWORD *)(a1 + 40));
}

id __70__HMDHome_performReadRequests_withRetries_timeInterval_loggingObject___block_invoke(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  double v6;
  void *v7;
  id v8;
  uint64_t v9;
  id v10;
  void *v11;
  _QWORD v13[4];
  id v14;
  uint64_t v15;
  id v16;

  v3 = a2;
  v4 = (void *)MEMORY[0x24BE6B608];
  v5 = *(_QWORD *)(a1 + 48);
  v6 = *(double *)(a1 + 56);
  objc_msgSend(*(id *)(a1 + 32), "workQueue");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v13[0] = MEMORY[0x24BDAC760];
  v13[1] = 3221225472;
  v13[2] = __70__HMDHome_performReadRequests_withRetries_timeInterval_loggingObject___block_invoke_2;
  v13[3] = &unk_24E775DF8;
  v8 = *(id *)(a1 + 40);
  v9 = *(_QWORD *)(a1 + 32);
  v14 = v8;
  v15 = v9;
  v16 = v3;
  v10 = v3;
  objc_msgSend(v4, "futureWithRetries:timeInterval:workQueue:block:", v5, v7, v13, v6);
  v11 = (void *)objc_claimAutoreleasedReturnValue();

  return v11;
}

id __70__HMDHome_performReadRequests_withRetries_timeInterval_loggingObject___block_invoke_697(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  id v6;
  NSObject *v7;
  void *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  void *v12;
  void *v13;
  int v15;
  void *v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  v3 = a2;
  objc_msgSend(v3, "na_map:", &__block_literal_global_699);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v4, "hmf_isEmpty"))
  {
    v5 = (void *)MEMORY[0x227676638]();
    v6 = *(id *)(a1 + 32);
    HMFGetOSLogHandle();
    v7 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      v15 = 138543362;
      v16 = v8;
      _os_log_impl(&dword_2218F0000, v7, OS_LOG_TYPE_INFO, "%{public}@All read request retries failed.", (uint8_t *)&v15, 0xCu);

    }
    objc_autoreleasePoolPop(v5);
    v9 = (void *)MEMORY[0x24BE6B608];
    objc_msgSend(MEMORY[0x24BDD1540], "hmErrorWithCode:", 2);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "futureWithError:", v10);
    v11 = objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v12 = (void *)MEMORY[0x24BE6B608];
    objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryByCombiningNonOverlappingDictionaries:", v4);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "futureWithResult:", v10);
    v11 = objc_claimAutoreleasedReturnValue();
  }
  v13 = (void *)v11;

  return v13;
}

id __70__HMDHome_performReadRequests_withRetries_timeInterval_loggingObject___block_invoke_2_698(uint64_t a1, void *a2)
{
  id v2;
  void *v3;
  id v4;

  v2 = a2;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v3 = v2;
  else
    v3 = 0;
  v4 = v3;

  return v4;
}

id __70__HMDHome_performReadRequests_withRetries_timeInterval_loggingObject___block_invoke_2(uint64_t a1, uint64_t a2)
{
  void *v4;
  id v5;
  NSObject *v6;
  void *v7;
  int v9;
  void *v10;
  __int16 v11;
  uint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v4 = (void *)MEMORY[0x227676638]();
  v5 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v6 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = 138543618;
    v10 = v7;
    v11 = 2048;
    v12 = a2;
    _os_log_impl(&dword_2218F0000, v6, OS_LOG_TYPE_INFO, "%{public}@Performing characteristic read requests with remaining retries: %ld", (uint8_t *)&v9, 0x16u);

  }
  objc_autoreleasePoolPop(v4);
  objc_msgSend(*(id *)(a1 + 40), "performReadRequests:loggingObject:", *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 32));
  return (id)objc_claimAutoreleasedReturnValue();
}

id __71__HMDHome_performWriteRequests_withRetries_timeInterval_loggingObject___block_invoke(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  double v6;
  void *v7;
  id v8;
  uint64_t v9;
  id v10;
  void *v11;
  _QWORD v13[4];
  id v14;
  uint64_t v15;
  id v16;

  v3 = a2;
  v4 = (void *)MEMORY[0x24BE6B608];
  v5 = *(_QWORD *)(a1 + 48);
  v6 = *(double *)(a1 + 56);
  objc_msgSend(*(id *)(a1 + 32), "workQueue");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v13[0] = MEMORY[0x24BDAC760];
  v13[1] = 3221225472;
  v13[2] = __71__HMDHome_performWriteRequests_withRetries_timeInterval_loggingObject___block_invoke_2;
  v13[3] = &unk_24E775DF8;
  v8 = *(id *)(a1 + 40);
  v9 = *(_QWORD *)(a1 + 32);
  v14 = v8;
  v15 = v9;
  v16 = v3;
  v10 = v3;
  objc_msgSend(v4, "futureWithRetries:timeInterval:workQueue:block:", v5, v7, v13, v6);
  v11 = (void *)objc_claimAutoreleasedReturnValue();

  return v11;
}

id __71__HMDHome_performWriteRequests_withRetries_timeInterval_loggingObject___block_invoke_692(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  id v6;
  NSObject *v7;
  void *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  void *v12;
  void *v13;
  int v15;
  void *v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  v3 = a2;
  objc_msgSend(v3, "na_map:", &__block_literal_global_695);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v4, "hmf_isEmpty"))
  {
    v5 = (void *)MEMORY[0x227676638]();
    v6 = *(id *)(a1 + 32);
    HMFGetOSLogHandle();
    v7 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      v15 = 138543362;
      v16 = v8;
      _os_log_impl(&dword_2218F0000, v7, OS_LOG_TYPE_INFO, "%{public}@All write request retries failed.", (uint8_t *)&v15, 0xCu);

    }
    objc_autoreleasePoolPop(v5);
    v9 = (void *)MEMORY[0x24BE6B608];
    objc_msgSend(MEMORY[0x24BDD1540], "hmErrorWithCode:", 2);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "futureWithError:", v10);
    v11 = objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v12 = (void *)MEMORY[0x24BE6B608];
    objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryByCombiningNonOverlappingDictionaries:", v4);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "futureWithResult:", v10);
    v11 = objc_claimAutoreleasedReturnValue();
  }
  v13 = (void *)v11;

  return v13;
}

id __71__HMDHome_performWriteRequests_withRetries_timeInterval_loggingObject___block_invoke_2_693(uint64_t a1, void *a2)
{
  id v2;
  void *v3;
  id v4;

  v2 = a2;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v3 = v2;
  else
    v3 = 0;
  v4 = v3;

  return v4;
}

id __71__HMDHome_performWriteRequests_withRetries_timeInterval_loggingObject___block_invoke_2(uint64_t a1, uint64_t a2)
{
  void *v4;
  id v5;
  NSObject *v6;
  void *v7;
  int v9;
  void *v10;
  __int16 v11;
  uint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v4 = (void *)MEMORY[0x227676638]();
  v5 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v6 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = 138543618;
    v10 = v7;
    v11 = 2048;
    v12 = a2;
    _os_log_impl(&dword_2218F0000, v6, OS_LOG_TYPE_INFO, "%{public}@Performing characteristic write requests with remaining retries: %ld", (uint8_t *)&v9, 0x16u);

  }
  objc_autoreleasePoolPop(v4);
  objc_msgSend(*(id *)(a1 + 40), "performWriteRequests:loggingObject:", *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 32));
  return (id)objc_claimAutoreleasedReturnValue();
}

void __45__HMDHome_performReadRequests_loggingObject___block_invoke(id *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  void *v8;
  void *v9;
  id v10;
  void *v11;
  id v12;
  NSObject *v13;
  void *v14;
  id v15;
  void *v16;
  id v17;
  NSObject *v18;
  void *v19;
  id v20;
  uint8_t buf[4];
  void *v22;
  __int16 v23;
  id v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v5 = a2;
  v6 = a3;
  if (v6)
  {
    objc_msgSend(a1[6], "firstObject");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "characteristic");
    v8 = (void *)objc_claimAutoreleasedReturnValue();

    v20 = 0;
    objc_msgSend(v6, "hmd_valueOfCharacteristic:error:", v8, &v20);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v10 = v20;
    if (v9)
    {
      objc_msgSend(a1[5], "finishWithResult:", v6);
    }
    else
    {
      v16 = (void *)MEMORY[0x227676638]();
      v17 = a1[4];
      HMFGetOSLogHandle();
      v18 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v19 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        v22 = v19;
        v23 = 2112;
        v24 = v10;
        _os_log_impl(&dword_2218F0000, v18, OS_LOG_TYPE_INFO, "%{public}@Failed to perform read requests with error: %@", buf, 0x16u);

      }
      objc_autoreleasePoolPop(v16);
      objc_msgSend(a1[5], "finishWithError:", v10);
    }

  }
  else
  {
    v11 = (void *)MEMORY[0x227676638]();
    v12 = a1[4];
    HMFGetOSLogHandle();
    v13 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v22 = v14;
      v23 = 2112;
      v24 = v5;
      _os_log_impl(&dword_2218F0000, v13, OS_LOG_TYPE_INFO, "%{public}@Failed to perform read requests (no response payload) with error: %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v11);
    v15 = a1[5];
    objc_msgSend(MEMORY[0x24BDBCEF8], "null");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v15, "finishWithResult:", v8);
  }

}

void __46__HMDHome_performWriteRequests_loggingObject___block_invoke(id *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  void *v8;
  void *v9;
  id v10;
  void *v11;
  id v12;
  NSObject *v13;
  void *v14;
  id v15;
  void *v16;
  id v17;
  NSObject *v18;
  void *v19;
  id v20;
  uint8_t buf[4];
  void *v22;
  __int16 v23;
  id v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v5 = a2;
  v6 = a3;
  if (v6)
  {
    objc_msgSend(a1[6], "firstObject");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "characteristic");
    v8 = (void *)objc_claimAutoreleasedReturnValue();

    v20 = 0;
    objc_msgSend(v6, "hmd_valueOfCharacteristic:error:", v8, &v20);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v10 = v20;
    if (v9)
    {
      objc_msgSend(a1[5], "finishWithResult:", v6);
    }
    else
    {
      v16 = (void *)MEMORY[0x227676638]();
      v17 = a1[4];
      HMFGetOSLogHandle();
      v18 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v19 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        v22 = v19;
        v23 = 2112;
        v24 = v10;
        _os_log_impl(&dword_2218F0000, v18, OS_LOG_TYPE_INFO, "%{public}@Failed to perform write requests with error: %@", buf, 0x16u);

      }
      objc_autoreleasePoolPop(v16);
      objc_msgSend(a1[5], "finishWithError:", v10);
    }

  }
  else
  {
    v11 = (void *)MEMORY[0x227676638]();
    v12 = a1[4];
    HMFGetOSLogHandle();
    v13 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v22 = v14;
      v23 = 2112;
      v24 = v5;
      _os_log_impl(&dword_2218F0000, v13, OS_LOG_TYPE_INFO, "%{public}@Failed to perform write requests (no response payload) with error: %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v11);
    v15 = a1[5];
    objc_msgSend(MEMORY[0x24BDBCEF8], "null");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v15, "finishWithResult:", v8);
  }

}

void __104__HMDHome_writeCharacteristicValues_source_identifier_transport_qualityOfService_withCompletionHandler___block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;
  id v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;
  NSObject *v10;
  void *v11;
  void *v12;
  void *v13;
  unint64_t v14;
  __CFString *v15;
  __CFString *v16;
  __int128 v17;
  _BYTE buf[18];
  __int16 v19;
  __int128 *v20;
  __int16 v21;
  __CFString *v22;
  _QWORD v23[2];
  _QWORD v24[3];

  v24[2] = *MEMORY[0x24BDAC8D0];
  v23[0] = CFSTR("sourceType");
  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedInteger:", *(_QWORD *)(a1 + 80));
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v23[1] = CFSTR("kMultiPartResponseKey");
  v24[0] = v2;
  v24[1] = MEMORY[0x24BDBD1C0];
  objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v24, v23, 2);
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  v4 = objc_alloc(MEMORY[0x24BE3F1D0]);
  v5 = *(_QWORD *)(a1 + 88);
  objc_msgSend(MEMORY[0x24BE3F1B8], "allMessageDestinations");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = (void *)objc_msgSend(v4, "initWithName:qualityOfService:destination:payload:", CFSTR("kMultipleCharacteristicWriteRequestKey"), v5, v6, v3);

  objc_msgSend(v7, "setIdentifier:", *(_QWORD *)(a1 + 40));
  v8 = (void *)MEMORY[0x227676638](objc_msgSend(v7, "setTransport:", *(_QWORD *)(a1 + 48)));
  v9 = *(id *)(a1 + 56);
  HMFGetOSLogHandle();
  v10 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = 0;
    objc_msgSend(v7, "identifier");
    v12 = (void *)objc_claimAutoreleasedReturnValue();

    if (v12)
    {
      objc_msgSend(v7, "identifier");
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v13, "getUUIDBytes:", buf);

    }
    else
    {
      *(_OWORD *)buf = *MEMORY[0x24BE3F2C8];
    }
    v17 = *(_OWORD *)buf;
    v14 = *(_QWORD *)(a1 + 80);
    if (v14 > 9)
      v15 = CFSTR("Unknown");
    else
      v15 = off_24E780100[v14];
    v16 = v15;
    *(_DWORD *)buf = 138544130;
    *(_QWORD *)&buf[4] = v11;
    *(_WORD *)&buf[12] = 1042;
    *(_DWORD *)&buf[14] = 16;
    v19 = 2098;
    v20 = &v17;
    v21 = 2114;
    v22 = v16;
    _os_log_impl(&dword_2218F0000, v10, OS_LOG_TYPE_INFO, "%{public}@Issuing write requests with identifier: %{public,uuid_t}.16P, source: %{public}@", buf, 0x26u);

  }
  objc_autoreleasePoolPop(v8);
  objc_msgSend(*(id *)(a1 + 56), "_writeCharacteristicValues:requestMessage:source:withCompletionHandler:", *(_QWORD *)(a1 + 64), v7, *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 72));

}

uint64_t __29__HMDHome_regionStateUpdated__block_invoke(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  void *v4;

  objc_msgSend(*(id *)(a1 + 32), "homeLocationHandler");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "regionStateAtHome");

  if (v3 == 1)
  {
    objc_msgSend(*(id *)(a1 + 32), "presenceFeeder");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "notifyDidEnterHomeRegion");
    goto LABEL_5;
  }
  if (v3 == 2)
  {
    objc_msgSend(*(id *)(a1 + 32), "presenceFeeder");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "notifyDidLeaveHomeRegion");
LABEL_5:

  }
  return objc_msgSend(*(id *)(a1 + 32), "_updateHomeLocation");
}

uint64_t __60__HMDHome_suspendedStateChangedForAccessory_suspendedState___block_invoke(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  void *v4;
  id v5;
  NSObject *v6;
  NSObject *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  void *v11;
  void *v12;
  uint64_t v13;
  int v15;
  void *v16;
  __int16 v17;
  void *v18;
  __int16 v19;
  uint64_t v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  objc_msgSend(*(id *)(a1 + 32), "reachabilityRegisteredDevices");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "count");

  v4 = (void *)MEMORY[0x227676638]();
  v5 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v6 = objc_claimAutoreleasedReturnValue();
  v7 = v6;
  if (v3)
  {
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      HAPAccessorySuspendedStateDescription();
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      v10 = *(_QWORD *)(a1 + 40);
      v15 = 138543874;
      v16 = v8;
      v17 = 2112;
      v18 = v9;
      v19 = 2112;
      v20 = v10;
      _os_log_impl(&dword_2218F0000, v7, OS_LOG_TYPE_INFO, "%{public}@Notify registered devices of suspended state change to '%@' for accessory: %@", (uint8_t *)&v15, 0x20u);

    }
    objc_autoreleasePoolPop(v4);
    objc_msgSend(*(id *)(a1 + 32), "_updateReachabilityChangeToRegisteredDevices:", *(_QWORD *)(a1 + 48));
  }
  else
  {
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
    {
      HMFGetLogIdentifier();
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      HAPAccessorySuspendedStateDescription();
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      v13 = *(_QWORD *)(a1 + 48);
      v15 = 138543874;
      v16 = v11;
      v17 = 2112;
      v18 = v12;
      v19 = 2112;
      v20 = v13;
      _os_log_impl(&dword_2218F0000, v7, OS_LOG_TYPE_DEBUG, "%{public}@No registered devices to send the suspended state change '%@' for accessory %@", (uint8_t *)&v15, 0x20u);

    }
    objc_autoreleasePoolPop(v4);
  }
  return objc_msgSend(*(id *)(a1 + 32), "notifyClientsOfReachabilityUpdateForAccessory:", *(_QWORD *)(a1 + 48));
}

void __53__HMDHome_reachabilityChangedForAccessory_reachable___block_invoke(uint64_t a1)
{
  id v2;
  void *v3;
  id v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  id v10;
  NSObject *v11;
  NSObject *v12;
  void *v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  int v17;
  void *v18;
  __int16 v19;
  uint64_t v20;
  _QWORD v21[2];

  v21[1] = *MEMORY[0x24BDAC8D0];
  v2 = *(id *)(a1 + 32);
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v3 = v2;
  else
    v3 = 0;
  v4 = v3;

  if (v4)
  {
    v5 = *(void **)(a1 + 40);
    v21[0] = v4;
    objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", v21, 1);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "_updateWoWState:", v6);

  }
  objc_msgSend(*(id *)(a1 + 40), "_reachabilityChangedForAccessory:reachable:", *(_QWORD *)(a1 + 32), *(unsigned __int8 *)(a1 + 48));
  objc_msgSend(*(id *)(a1 + 40), "reachabilityRegisteredDevices");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = objc_msgSend(v7, "count");

  v9 = (void *)MEMORY[0x227676638]();
  v10 = *(id *)(a1 + 40);
  HMFGetOSLogHandle();
  v11 = objc_claimAutoreleasedReturnValue();
  v12 = v11;
  if (v8)
  {
    if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      v14 = *(_QWORD *)(a1 + 32);
      v17 = 138543618;
      v18 = v13;
      v19 = 2112;
      v20 = v14;
      _os_log_impl(&dword_2218F0000, v12, OS_LOG_TYPE_INFO, "%{public}@Notify registered devices of reachability change for accessory: %@", (uint8_t *)&v17, 0x16u);

    }
    objc_autoreleasePoolPop(v9);
    objc_msgSend(*(id *)(a1 + 40), "_updateReachabilityChangeToRegisteredDevices:", *(_QWORD *)(a1 + 32));
  }
  else
  {
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
    {
      HMFGetLogIdentifier();
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      v16 = *(_QWORD *)(a1 + 32);
      v17 = 138543618;
      v18 = v15;
      v19 = 2112;
      v20 = v16;
      _os_log_impl(&dword_2218F0000, v12, OS_LOG_TYPE_DEBUG, "%{public}@No registered devices available to notify reachability change update for accessory: %@", (uint8_t *)&v17, 0x16u);

    }
    objc_autoreleasePoolPop(v9);
  }

}

uint64_t __77__HMDHome_removeAllHomeContentsAndAccessoryPairings_queue_completionHandler___block_invoke(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_removeAllHomeContentsAndAccessoryPairings:queue:completionHandler:", *(unsigned __int8 *)(a1 + 56), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
}

void __25__HMDHome_removeService___block_invoke(uint64_t a1)
{
  id WeakRetained;
  void *v3;
  id v4;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained && *(_QWORD *)(a1 + 32))
  {
    v4 = WeakRetained;
    objc_msgSend(WeakRetained, "_removeService:");
    NSStringFromSelector(*(SEL *)(a1 + 48));
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "saveWithReason:postSyncNotification:", v3, 1);

    WeakRetained = v4;
  }

}

uint64_t __33__HMDHome_mediaSystemsWithUUIDs___block_invoke(uint64_t a1, void *a2)
{
  void *v2;
  void *v3;
  uint64_t v4;

  v2 = *(void **)(a1 + 32);
  objc_msgSend(a2, "uuid");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v2, "containsObject:", v3);

  return v4;
}

uint64_t __44__HMDHome_accessoryWithSPIClientIdentifier___block_invoke(uint64_t a1, void *a2)
{
  void *v3;
  uint64_t v4;

  objc_msgSend(a2, "spiClientIdentifier");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "hmf_isEqualToUUID:", *(_QWORD *)(a1 + 32));

  return v4;
}

uint64_t __41__HMDHome_accessoryWithDeviceIdentifier___block_invoke(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  void *v6;
  void *v7;
  uint64_t v8;

  v3 = a2;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v4 = v3;
  else
    v4 = 0;
  v5 = v4;
  objc_msgSend(v5, "deviceForDirectMessaging");
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v6, "identifier");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = objc_msgSend(v7, "hmf_isEqualToUUID:", *(_QWORD *)(a1 + 32));

  return v8;
}

uint64_t __60__HMDHome_roomWithUniqueIdentifier_forClientIdentifierSalt___block_invoke(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  void *v5;
  uint64_t v6;

  v3 = (void *)MEMORY[0x24BDD1880];
  objc_msgSend(a2, "uuid");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "hm_deriveUUIDFromBaseUUID:identifierSalt:", v4, *(_QWORD *)(a1 + 32));
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  v6 = objc_msgSend(v5, "isEqual:", *(_QWORD *)(a1 + 40));
  return v6;
}

uint64_t __40__HMDHome_configureBulletinNotification__block_invoke(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_configureBulletinNotification");
}

uint64_t __42__HMDHome_saveToCurrentAccountWithReason___block_invoke(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "configureBulletinNotification");
}

void __52__HMDHome__handleModifyCharacteristicNotifications___block_invoke(uint64_t a1, void *a2)
{
  void *v2;
  void *v3;
  id v4;
  void *v5;
  const __CFString *v6;
  _QWORD v7[2];

  v7[1] = *MEMORY[0x24BDAC8D0];
  v2 = *(void **)(a1 + 32);
  v6 = CFSTR("HMDDeviceNotificationActionSetsKey");
  v7[0] = a2;
  v3 = (void *)MEMORY[0x24BDBCE70];
  v4 = a2;
  objc_msgSend(v3, "dictionaryWithObjects:forKeys:count:", v7, &v6, 1);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "respondWithPayload:", v5);

}

void __67__HMDHome_actionSetResponsePayloadForActionSetsPayload_completion___block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  id v3;

  v2 = *(_QWORD *)(a1 + 32);
  +[HMDActionSetResponse serializeWithResponses:](HMDActionSetResponse, "serializeWithResponses:", a2);
  v3 = (id)objc_claimAutoreleasedReturnValue();
  (*(void (**)(uint64_t, id))(v2 + 16))(v2, v3);

}

void __45__HMDHome_auditDestinationsForNotifications___block_invoke(uint64_t a1)
{
  id v2;

  objc_msgSend(*(id *)(a1 + 32), "notificationRegistry");
  v2 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "auditNotificationDestinations:home:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32));

}

void __195__HMDHome__modifyCharacteristicNotifications_characteristicChangeThresholds_mediaNotifications_actionSetNotificationPayload_matterAttributeNotifications_enableNotification_withDevice_completion___block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id WeakRetained;
  void *v8;
  void *v9;
  id v10;
  NSObject *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  NSObject *v17;
  _QWORD v18[4];
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  char v24;
  uint8_t buf[4];
  void *v26;
  __int16 v27;
  uint64_t v28;
  __int16 v29;
  id v30;
  uint64_t v31;

  v31 = *MEMORY[0x24BDAC8D0];
  v5 = a2;
  v6 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  v8 = WeakRetained;
  if (WeakRetained)
  {
    if (v5)
    {
      v9 = (void *)MEMORY[0x227676638]();
      v10 = v8;
      HMFGetOSLogHandle();
      v11 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v12 = (void *)objc_claimAutoreleasedReturnValue();
        v13 = *(_QWORD *)(a1 + 32);
        *(_DWORD *)buf = 138543874;
        v26 = v12;
        v27 = 2112;
        v28 = v13;
        v29 = 2112;
        v30 = v5;
        _os_log_impl(&dword_2218F0000, v11, OS_LOG_TYPE_INFO, "%{public}@Failed to modify notifications with remote gateway %@ due to error %@", buf, 0x20u);

      }
      objc_autoreleasePoolPop(v9);
      v14 = *(_QWORD *)(a1 + 48);
      if (v14)
        (*(void (**)(uint64_t, id))(v14 + 16))(v14, v5);
    }
    else
    {
      objc_msgSend(WeakRetained, "workQueue");
      v17 = objc_claimAutoreleasedReturnValue();
      v18[0] = MEMORY[0x24BDAC760];
      v18[1] = 3221225472;
      v18[2] = __195__HMDHome__modifyCharacteristicNotifications_characteristicChangeThresholds_mediaNotifications_actionSetNotificationPayload_matterAttributeNotifications_enableNotification_withDevice_completion___block_invoke_674;
      v18[3] = &unk_24E796178;
      objc_copyWeak(&v23, (id *)(a1 + 56));
      v19 = *(id *)(a1 + 32);
      v20 = *(id *)(a1 + 40);
      v24 = *(_BYTE *)(a1 + 64);
      v21 = v6;
      v22 = *(id *)(a1 + 48);
      dispatch_async(v17, v18);

      objc_destroyWeak(&v23);
    }
  }
  else
  {
    v15 = *(_QWORD *)(a1 + 48);
    if (v15)
    {
      objc_msgSend(MEMORY[0x24BDD1540], "hmfErrorWithCode:", 8);
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      (*(void (**)(uint64_t, void *))(v15 + 16))(v15, v16);

    }
  }

}

void __195__HMDHome__modifyCharacteristicNotifications_characteristicChangeThresholds_mediaNotifications_actionSetNotificationPayload_matterAttributeNotifications_enableNotification_withDevice_completion___block_invoke_674(uint64_t a1)
{
  id WeakRetained;
  void *v3;
  id v4;
  NSObject *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t i;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  char v17;
  void *v18;
  void *v19;
  void *v20;
  id v21;
  NSObject *v22;
  void *v23;
  void *v24;
  NSObject *v25;
  os_log_type_t v26;
  const char *v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  id obj;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  uint8_t v36[128];
  uint8_t buf[4];
  void *v38;
  __int16 v39;
  void *v40;
  uint64_t v41;

  v41 = *MEMORY[0x24BDAC8D0];
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 64));
  v3 = (void *)MEMORY[0x227676638]();
  v4 = WeakRetained;
  HMFGetOSLogHandle();
  v5 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v7 = *(void **)(a1 + 32);
    *(_DWORD *)buf = 138543618;
    v38 = v6;
    v39 = 2112;
    v40 = v7;
    _os_log_impl(&dword_2218F0000, v5, OS_LOG_TYPE_INFO, "%{public}@Modified notifications with remote gateway %@", buf, 0x16u);

  }
  objc_autoreleasePoolPop(v3);
  objc_msgSend(v4, "_handleRemoteGatewayNotificationRegistration:enable:", *(_QWORD *)(a1 + 40), *(unsigned __int8 *)(a1 + 72));
  v30 = a1;
  objc_msgSend(*(id *)(a1 + 48), "hmf_dictionaryForKey:", CFSTR("HMDDeviceNotificationActionSetsKey"));
  v29 = (void *)objc_claimAutoreleasedReturnValue();
  +[HMDActionSetResponse responsesFromSerializedResponses:](HMDActionSetResponse, "responsesFromSerializedResponses:");
  v32 = 0u;
  v33 = 0u;
  v34 = 0u;
  v35 = 0u;
  obj = (id)objc_claimAutoreleasedReturnValue();
  v8 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v32, v36, 16);
  if (v8)
  {
    v9 = v8;
    v10 = *(_QWORD *)v33;
    do
    {
      for (i = 0; i != v9; ++i)
      {
        if (*(_QWORD *)v33 != v10)
          objc_enumerationMutation(obj);
        v12 = *(void **)(*((_QWORD *)&v32 + 1) + 8 * i);
        objc_msgSend(v12, "actionSetUUID");
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v4, "actionSetWithUUID:", v13);
        v14 = (void *)objc_claimAutoreleasedReturnValue();

        if (v14)
        {
          objc_msgSend(v4, "actionSetStateSubscriptionManager");
          v15 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v14, "uuid");
          v16 = (void *)objc_claimAutoreleasedReturnValue();
          v17 = objc_msgSend(v15, "isMonitoringActionSet:", v16);

          if ((v17 & 1) != 0)
          {
            objc_msgSend(v4, "actionSetStateSubscriptionManager");
            v18 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v12, "actionSetUUID");
            v19 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v18, "actionSetStateDidChange:state:", v19, objc_msgSend(v12, "state"));

            goto LABEL_17;
          }
          v20 = (void *)MEMORY[0x227676638]();
          v21 = v4;
          HMFGetOSLogHandle();
          v22 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
          {
            HMFGetLogIdentifier();
            v23 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v12, "actionSetUUID");
            v24 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 138543618;
            v38 = v23;
            v39 = 2112;
            v40 = v24;
            v25 = v22;
            v26 = OS_LOG_TYPE_DEFAULT;
            v27 = "%{public}@Got action set enable response for unregistered action set %@";
            goto LABEL_15;
          }
        }
        else
        {
          v20 = (void *)MEMORY[0x227676638]();
          v21 = v4;
          HMFGetOSLogHandle();
          v22 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
          {
            HMFGetLogIdentifier();
            v23 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v12, "actionSetUUID");
            v24 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 138543618;
            v38 = v23;
            v39 = 2112;
            v40 = v24;
            v25 = v22;
            v26 = OS_LOG_TYPE_ERROR;
            v27 = "%{public}@Got action set enable response for unknown action set %@";
LABEL_15:
            _os_log_impl(&dword_2218F0000, v25, v26, v27, buf, 0x16u);

          }
        }

        objc_autoreleasePoolPop(v20);
LABEL_17:

      }
      v9 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v32, v36, 16);
    }
    while (v9);
  }

  v28 = *(_QWORD *)(v30 + 56);
  if (v28)
    (*(void (**)(uint64_t, _QWORD))(v28 + 16))(v28, 0);

}

uint64_t __154__HMDHome_modifyCharacteristicNotifications_characteristicChangeThresholds_mediaNotifications_actionSetNotificationPayload_enableNotification_withDevice___block_invoke(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_modifyCharacteristicNotifications:characteristicChangeThresholds:mediaNotifications:actionSetNotificationPayload:enableNotification:withDevice:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(unsigned __int8 *)(a1 + 80), *(_QWORD *)(a1 + 72));
}

uint64_t __49__HMDHome_resubscribeForNotificationsOnResident___block_invoke(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_resubscribeForNotificationsOnResident:", *(_QWORD *)(a1 + 40));
}

uint64_t __42__HMDHome_disableNotificationsForDevices___block_invoke(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_disableNotificationsForDevices:", *(_QWORD *)(a1 + 40));
}

uint64_t __41__HMDHome_enableNotificationsForDevices___block_invoke(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_enableNotificationsForDevices:", *(_QWORD *)(a1 + 40));
}

void __53__HMDHome_subscribeForNotificationsFromRemoteGateway__block_invoke(uint64_t a1)
{
  -[HMDHome _subscribeForNotificationFromRemoteGateway:](*(void **)(a1 + 32), 0);
}

void __64__HMDHome__remotelySetNotificationsEnabled_forMatterAttributes___block_invoke(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  id v18;

  v3 = a2;
  objc_msgSend(v3, "hmf_numberForKey:", CFSTR("HMDHomeCHIPNodeIDMessageKey"));
  v18 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "hmf_numberForKey:", CFSTR("HMDHomeCHIPEndpointIDMessageKey"));
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "hmf_numberForKey:", CFSTR("HMDHomeCHIPClusterIDMessageKey"));
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "hmf_numberForKey:", CFSTR("HMDHomeCHIPAttributeIDMessageKey"));
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(*(id *)(a1 + 32), "matterAttributesEnableNotificationPayload");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "objectForKeyedSubscript:", v18);
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v8)
  {
    objc_msgSend(MEMORY[0x24BDBCED8], "dictionary");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 32), "matterAttributesEnableNotificationPayload");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "setObject:forKeyedSubscript:", v8, v18);

    objc_msgSend(MEMORY[0x24BDBCED8], "dictionary");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "setObject:forKeyedSubscript:", v10, CFSTR("HMDHomeCHIPEndpointsMessageKey"));

    objc_msgSend(v8, "setObject:forKeyedSubscript:", MEMORY[0x24BDBD1C0], CFSTR("HMDHomeCHIPWildcardMessageKey"));
  }
  if ((objc_msgSend(v8, "hmf_BOOLForKey:", CFSTR("HMDHomeCHIPWildcardMessageKey")) & 1) == 0)
  {
    if (v4)
    {
      objc_msgSend(v8, "objectForKeyedSubscript:", CFSTR("HMDHomeCHIPEndpointsMessageKey"));
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v11, "objectForKeyedSubscript:", v4);
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      if (!v12)
      {
        objc_msgSend(MEMORY[0x24BDBCED8], "dictionary");
        v12 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v11, "setObject:forKeyedSubscript:", v12, v4);
        objc_msgSend(MEMORY[0x24BDBCED8], "dictionary");
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v12, "setObject:forKeyedSubscript:", v13, CFSTR("HMDHomeCHIPClustersMessageKey"));

        objc_msgSend(v12, "setObject:forKeyedSubscript:", MEMORY[0x24BDBD1C0], CFSTR("HMDHomeCHIPWildcardMessageKey"));
      }
      if ((objc_msgSend(v12, "hmf_BOOLForKey:", CFSTR("HMDHomeCHIPWildcardMessageKey")) & 1) == 0)
      {
        if (v5)
        {
          objc_msgSend(v12, "objectForKeyedSubscript:", CFSTR("HMDHomeCHIPClustersMessageKey"));
          v14 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v14, "objectForKeyedSubscript:", v5);
          v15 = (void *)objc_claimAutoreleasedReturnValue();
          if (!v15)
          {
            objc_msgSend(MEMORY[0x24BDBCED8], "dictionary");
            v15 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v14, "setObject:forKeyedSubscript:", v15, v5);
            objc_msgSend(MEMORY[0x24BDBCEB8], "array");
            v16 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v15, "setObject:forKeyedSubscript:", v16, CFSTR("HMDHomeCHIPAttributesMessageKey"));

            objc_msgSend(v15, "setObject:forKeyedSubscript:", MEMORY[0x24BDBD1C0], CFSTR("HMDHomeCHIPWildcardMessageKey"));
          }
          if ((objc_msgSend(v15, "hmf_BOOLForKey:", CFSTR("HMDHomeCHIPWildcardMessageKey")) & 1) == 0)
          {
            if (v6)
            {
              objc_msgSend(v15, "objectForKeyedSubscript:", CFSTR("HMDHomeCHIPAttributesMessageKey"));
              v17 = (void *)objc_claimAutoreleasedReturnValue();
              if ((objc_msgSend(v17, "containsObject:", v6) & 1) == 0)
                objc_msgSend(v17, "addObject:", v6);

            }
            else
            {
              objc_msgSend(v15, "setObject:forKeyedSubscript:", MEMORY[0x24BDBD1C8], CFSTR("HMDHomeCHIPWildcardMessageKey"));
              objc_msgSend(v15, "setObject:forKeyedSubscript:", MEMORY[0x24BDBD1A8], CFSTR("HMDHomeCHIPAttributesMessageKey"));
            }
          }

        }
        else
        {
          objc_msgSend(v12, "setObject:forKeyedSubscript:", MEMORY[0x24BDBD1C8], CFSTR("HMDHomeCHIPWildcardMessageKey"));
          objc_msgSend(v12, "setObject:forKeyedSubscript:", MEMORY[0x24BDBD1B8], CFSTR("HMDHomeCHIPClustersMessageKey"));
        }
      }

    }
    else
    {
      objc_msgSend(v8, "setObject:forKeyedSubscript:", MEMORY[0x24BDBD1C8], CFSTR("HMDHomeCHIPWildcardMessageKey"));
      objc_msgSend(v8, "setObject:forKeyedSubscript:", MEMORY[0x24BDBD1B8], CFSTR("HMDHomeCHIPEndpointsMessageKey"));
    }
  }

}

uint64_t __63__HMDHome_remotelySetNotificationsEnabled_forMatterAttributes___block_invoke(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_remotelySetNotificationsEnabled:forMatterAttributes:", *(unsigned __int8 *)(a1 + 48), *(_QWORD *)(a1 + 40));
}

BOOL __94__HMDHome__remotelySetNotificationsEnabled_forCharacteristics_characteristicChangeThresholds___block_invoke(uint64_t a1, void *a2)
{
  void *v3;
  _BOOL8 v4;

  objc_msgSend(a2, "characteristic");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = v3 == *(void **)(a1 + 32);

  return v4;
}

uint64_t __93__HMDHome_remotelySetNotificationsEnabled_forCharacteristics_characteristicChangeThresholds___block_invoke(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_remotelySetNotificationsEnabled:forCharacteristics:characteristicChangeThresholds:", *(unsigned __int8 *)(a1 + 56), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
}

void __70__HMDHome_redispatchToResidentMessage_target_responseQueue_viaDevice___block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  NSObject *v7;
  id v8;
  id v9;
  id v10;
  _QWORD block[4];
  id v12;
  id v13;
  id v14;

  v5 = a2;
  v6 = a3;
  block[0] = MEMORY[0x24BDAC760];
  block[1] = 3221225472;
  block[2] = __70__HMDHome_redispatchToResidentMessage_target_responseQueue_viaDevice___block_invoke_2;
  block[3] = &unk_24E79B440;
  v7 = *(NSObject **)(a1 + 32);
  v8 = *(id *)(a1 + 40);
  v13 = v6;
  v14 = v8;
  v12 = v5;
  v9 = v6;
  v10 = v5;
  dispatch_async(v7, block);

}

void __70__HMDHome_redispatchToResidentMessage_target_responseQueue_viaDevice___block_invoke_3()
{
  uint64_t v0;
  void *v1;
  _QWORD v2[9];

  v2[8] = *MEMORY[0x24BDAC8D0];
  v2[0] = CFSTR("kCharacteristicWriteRequestKey");
  v2[1] = CFSTR("kCharacteristicReadRequestKey");
  v2[2] = CFSTR("kMultipleCharacteristicWriteRequestKey");
  v2[3] = CFSTR("kMultipleCharacteristicReadRequestKey");
  v2[4] = CFSTR("kIdentifyAccessoryRequestKey");
  v2[5] = CFSTR("kMediaPropertiesWriteRequestKey");
  v2[6] = CFSTR("kMediaPropertiesReadRequestKey");
  v2[7] = CFSTR("HMDHomeSetNaturalLightingEnabledForLightProfilesMessage");
  objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", v2, 8);
  v0 = objc_claimAutoreleasedReturnValue();
  v1 = (void *)redispatchToResidentMessage_target_responseQueue_viaDevice___restrictedToLocalMessages;
  redispatchToResidentMessage_target_responseQueue_viaDevice___restrictedToLocalMessages = v0;

}

uint64_t __70__HMDHome_redispatchToResidentMessage_target_responseQueue_viaDevice___block_invoke_2(_QWORD *a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(a1[6] + 16))(a1[6], a1[4], a1[5]);
}

void __38__HMDHome_addCompanionAsResidentUser___block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  id v6;
  NSObject *v7;
  void *v8;
  int v9;
  void *v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  objc_msgSend(*(id *)(a1 + 32), "users");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 40), "userID");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "hmf_firstObjectWithValue:forKeyPath:", v3, CFSTR("userID"));
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v4)
  {
    v5 = (void *)MEMORY[0x227676638](objc_msgSend(*(id *)(a1 + 32), "_addUserToContainer:", *(_QWORD *)(a1 + 40)));
    v6 = *(id *)(a1 + 32);
    HMFGetOSLogHandle();
    v7 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      v9 = 138543362;
      v10 = v8;
      _os_log_impl(&dword_2218F0000, v7, OS_LOG_TYPE_INFO, "%{public}@Added a new resident user", (uint8_t *)&v9, 0xCu);

    }
    objc_autoreleasePoolPop(v5);
  }
  -[HMDHome _subscribeForNotificationFromRemoteGateway:](*(void **)(a1 + 32), 0);

}

uint64_t __71__HMDHome_mediaProfileForAppleMediaAccessoryUUID_mediaStateSubscriber___block_invoke(uint64_t a1, void *a2)
{
  void *v3;
  uint64_t v4;

  objc_msgSend(a2, "uuid");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "hmf_isEqualToUUID:", *(_QWORD *)(a1 + 32));

  return v4;
}

uint64_t __59__HMDHome_appleMediaAccessoryUUIDsForMediaStateSubscriber___block_invoke(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "uuid");
}

uint64_t __50__HMDHome_roomForAllDestinationParentIdentifiers___block_invoke(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  void *v5;
  uint64_t v6;

  objc_msgSend(a2, "room");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "uuid");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 32), "uuid");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend(v4, "hmf_isEqualToUUID:", v5);

  return v6;
}

uint64_t __50__HMDHome_roomForAllDestinationParentIdentifiers___block_invoke_2(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  void *v5;
  uint64_t v6;

  objc_msgSend(a2, "room");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "uuid");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 32), "uuid");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend(v4, "hmf_isEqualToUUID:", v5);

  return v6;
}

void __46__HMDHome_mergeMediaDestinationsWithConsumer___block_invoke(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  id v7;

  v3 = a2;
  v4 = *(void **)(a1 + 32);
  v7 = v3;
  objc_msgSend(v3, "uuid");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "destinationWithParentIdentifier:", v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  if (v6)
    objc_msgSend(v7, "mergeAudioDestination:", v6);

}

void __46__HMDHome_mergeMediaDestinationsWithConsumer___block_invoke_2(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  id v7;

  v3 = a2;
  v4 = *(void **)(a1 + 32);
  v7 = v3;
  objc_msgSend(v3, "uuid");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "destinationWithParentIdentifier:", v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  if (v6)
    objc_msgSend(v7, "mergeAudioDestination:", v6);

}

void __59__HMDHome_mergeMediaDestinationControllerDataWithConsumer___block_invoke(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  id v7;

  v3 = a2;
  v4 = *(void **)(a1 + 32);
  v7 = v3;
  objc_msgSend(v3, "uuid");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "destinationControllerDataWithParentIdentifier:", v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  if (v6)
    objc_msgSend(v7, "mergeAudioDestinationControllerData:", v6);

}

uint64_t __32__HMDHome_accessoriesWithUUIDs___block_invoke(uint64_t a1, void *a2)
{
  void *v2;
  void *v3;
  uint64_t v4;

  v2 = *(void **)(a1 + 32);
  objc_msgSend(a2, "uuid");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v2, "containsObject:", v3);

  return v4;
}

void __55__HMDHome_configureNaturalLightingWithDemoModeEnabled___block_invoke(uint64_t a1)
{
  void *v2;
  int v3;
  HMDHomeNaturalLightingContextUpdater *v4;
  id v5;

  objc_msgSend(*(id *)(a1 + 32), "localCapabilitiesDataSource");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  if ((objc_msgSend(v2, "isResidentCapable") & 1) != 0)
  {

  }
  else
  {
    v3 = *(unsigned __int8 *)(a1 + 40);

    if (!v3)
      return;
  }
  v4 = -[HMDHomeNaturalLightingContextUpdater initWithHome:demoModeEnabled:]([HMDHomeNaturalLightingContextUpdater alloc], "initWithHome:demoModeEnabled:", *(_QWORD *)(a1 + 32), *(unsigned __int8 *)(a1 + 40));
  objc_msgSend(*(id *)(a1 + 32), "setNaturalLightingContextUpdater:", v4);

  objc_msgSend(*(id *)(a1 + 32), "naturalLightingContextUpdater");
  v5 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "configure");

}

uint64_t __62__HMDHome_configureMediaDestinationControllersForAccessories___block_invoke_2(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "configureAudioDestinationController");
}

id __62__HMDHome_configureMediaDestinationControllersForAccessories___block_invoke(uint64_t a1, void *a2)
{
  id v2;
  void *v3;
  id v4;

  v2 = a2;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v3 = v2;
  else
    v3 = 0;
  v4 = v3;

  return v4;
}

void __89__HMDHome_handlePrimaryResidentChangeMonitorConfirmedDeviceIdentifierChangeNotification___block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  id v7;
  NSObject *v8;
  void *v9;
  void *v10;
  int v11;
  void *v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  objc_msgSend(*(id *)(a1 + 32), "homeManager");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 32), "currentDevice");
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  if (v3)
  {
    objc_msgSend(v2, "currentAccessorySetupMetricDispatcher");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "markSetupEndStage:error:", 14, 0);
    objc_msgSend(*(id *)(a1 + 32), "remoteEventRouterServer");
    v5 = (void *)objc_claimAutoreleasedReturnValue();

    if (v5)
    {
      objc_msgSend(v4, "markSetupBeginStage:error:", 15, 0);
    }
    else
    {
      v6 = (void *)MEMORY[0x227676638]();
      v7 = *(id *)(a1 + 32);
      HMFGetOSLogHandle();
      v8 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        v11 = 138543362;
        v12 = v9;
        _os_log_impl(&dword_2218F0000, v8, OS_LOG_TYPE_ERROR, "%{public}@Remote event router server does not exist.", (uint8_t *)&v11, 0xCu);

      }
      objc_autoreleasePoolPop(v6);
    }

  }
  objc_msgSend(v2, "accessorySetupMetricDispatchersForHome:", *(_QWORD *)(a1 + 32));
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "na_each:", &__block_literal_global_622);

}

uint64_t __89__HMDHome_handlePrimaryResidentChangeMonitorConfirmedDeviceIdentifierChangeNotification___block_invoke_620(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "markPrimaryResidentChanged");
}

- (void)subscribeToAccessoryLanguageSettingsIfNeeded
{
  void *v2;
  void *v3;
  id v4;

  if (a1)
  {
    if (objc_msgSend(a1, "isCurrentDevicePrimaryResident"))
    {
      objc_msgSend(a1, "fetchedAccessorySettingsSubscriber");
      v4 = (id)objc_claimAutoreleasedReturnValue();
      objc_msgSend(a1, "appleMediaAccessories");
      v2 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v2, "na_map:", &__block_literal_global_624);
      v3 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "subscribeToSettingsForAccessoryUUIDs:", v3);

    }
  }
}

id __55__HMDHome_subscribeToAccessoryLanguageSettingsIfNeeded__block_invoke(uint64_t a1, void *a2)
{
  id v2;
  void *v3;

  v2 = a2;
  if (objc_msgSend(v2, "isHomePod"))
  {
    objc_msgSend(v2, "uuid");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v3 = 0;
  }

  return v3;
}

uint64_t __66__HMDHome_handlePrimaryResidentIsCurrentDeviceChangeNotification___block_invoke(uint64_t a1)
{
  int v2;
  void *v3;

  v2 = objc_msgSend(*(id *)(a1 + 32), "isCurrentDevicePrimaryResident");
  v3 = *(void **)(a1 + 32);
  if (v2)
    return objc_msgSend(v3, "_handlePrimaryResidentDidBecomeCurrentDevice");
  else
    return objc_msgSend(v3, "_handlePrimaryResidentDidBecomeOtherDevice");
}

void __86__HMDHome_configureWithHomeManager_accessoriesPresent_uncommittedTransactions_source___block_invoke(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  objc_msgSend(WeakRetained, "configureAfterAccessoriesConfigurationTrackerNotificationsWithCurrentAccessory:accessories:uncommittedTransactions:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));

}

void __86__HMDHome_configureWithHomeManager_accessoriesPresent_uncommittedTransactions_source___block_invoke_596(uint64_t a1)
{
  void *v2;
  void *v3;
  HMDHomeHindsightCloudShareManager *v4;
  void *v5;
  void *v6;
  HMDHomeHindsightCloudShareManager *v7;
  id v8;

  objc_msgSend(*(id *)(a1 + 32), "accessCodeManager");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 32), "msgDispatcher");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "configureWithMessageDispatcher:", v3);

  v4 = [HMDHomeHindsightCloudShareManager alloc];
  v5 = *(void **)(a1 + 32);
  objc_msgSend(v5, "workQueue");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = -[HMDHomeHindsightCloudShareManager initWithHome:workQueue:](v4, "initWithHome:workQueue:", v5, v6);
  objc_msgSend(*(id *)(a1 + 32), "setHindsightCloudShareManager:", v7);

  objc_msgSend(*(id *)(a1 + 32), "hindsightCloudShareManager");
  v8 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "configure");

}

void __38__HMDHome___handleProcessStateChange___block_invoke(uint64_t a1)
{
  id v2;

  objc_msgSend(*(id *)(a1 + 32), "bundleIdentifier");
  v2 = (id)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v2, "isEqual:", *MEMORY[0x24BDD6360]))
    objc_msgSend(*(id *)(a1 + 40), "_cleanAddAccessoryOperations");
  objc_msgSend(*(id *)(a1 + 40), "_disableNotificationsForClient:", v2);

}

uint64_t __38__HMDHome___handleProcessStateChange___block_invoke_2(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "checkHAPSessionRestore");
}

void __62__HMDHome__disableDirectCharacteristicNotificationsForClient___block_invoke(uint64_t a1, int a2)
{
  if (a2)
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 1;
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

uint64_t __62__HMDHome__disableDirectCharacteristicNotificationsForClient___block_invoke_2(uint64_t result)
{
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 40) + 8) + 24))
    return objc_msgSend(*(id *)(result + 32), "saveToCurrentAccountWithReason:", CFSTR("HMDApplicationTerminatedSaveReason"));
  return result;
}

uint64_t __57__HMDHome_handleAccessoryReachabilityChangeNotification___block_invoke(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "setAnyBTLEAccessoryReachable:", objc_msgSend(*(id *)(a1 + 32), "_hasPairedReachableBTLEAccessories"));
}

uint64_t __44__HMDHome_handleAdaptiveClientDisconnected___block_invoke(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_disableNotificationsForClient:", *(_QWORD *)(a1 + 40));
}

uint64_t __71__HMDHome_registerForMatterFabricNotifications_registrationIdentifier___block_invoke(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_registerForMatterFabricNotifications:registrationIdentifier:clientBundleIdentifier:", *(unsigned __int8 *)(a1 + 48), *(_QWORD *)(a1 + 40), 0);
}

uint64_t __80__HMDHome_registerForAccessoryReachabilityNotifications_registrationIdentifier___block_invoke(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_registerForAccessoryReachabilityNotifications:registrationIdentifier:clientBundleIdentifier:", *(unsigned __int8 *)(a1 + 48), *(_QWORD *)(a1 + 40), 0);
}

void __26__HMDHome_handleInactive___block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  id v6;
  NSObject *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  int v12;
  void *v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  objc_msgSend(*(id *)(a1 + 32), "userInfo");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "hmf_stringForKey:", CFSTR("HMDXPCConnectionBundleIdentifier"));
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(*(id *)(a1 + 40), "_registerForAccessoryReachabilityNotifications:registrationIdentifier:clientBundleIdentifier:", 0, CFSTR("HMDAccessoryActiveClientRemoteRegistrationIdentifierKey"), v3);
  objc_msgSend(*(id *)(a1 + 40), "_registerForMatterFabricNotifications:registrationIdentifier:clientBundleIdentifier:", 0, CFSTR("HMDAccessoryActiveClientRemoteRegistrationIdentifierKey"), v3);
  objc_msgSend(*(id *)(a1 + 40), "WiFiAssertion");
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  if (v4)
  {
    v5 = (void *)MEMORY[0x227676638]();
    v6 = *(id *)(a1 + 40);
    HMFGetOSLogHandle();
    v7 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      HMFGetLogIdentifier();
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      v12 = 138543362;
      v13 = v8;
      _os_log_impl(&dword_2218F0000, v7, OS_LOG_TYPE_DEFAULT, "%{public}@Releasing WiFi assertion", (uint8_t *)&v12, 0xCu);

    }
    objc_autoreleasePoolPop(v5);
    objc_msgSend(*(id *)(a1 + 40), "wifiManager");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 40), "WiFiAssertion");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "endActiveAssertion:", v10);

    objc_msgSend(*(id *)(a1 + 40), "wifiManager");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "releaseWoWAssertion");

    objc_msgSend(*(id *)(a1 + 40), "setWiFiAssertion:", 0);
  }

}

void __24__HMDHome_handleActive___block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;
  id v4;
  NSObject *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  uint8_t buf[4];
  void *v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  if (isWatch())
  {
    if (objc_msgSend(*(id *)(a1 + 32), "remoteAccessIsEnabled"))
    {
      objc_msgSend(*(id *)(a1 + 32), "WiFiAssertion");
      v2 = (void *)objc_claimAutoreleasedReturnValue();

      if (!v2)
      {
        v3 = (void *)MEMORY[0x227676638]();
        v4 = *(id *)(a1 + 32);
        HMFGetOSLogHandle();
        v5 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
        {
          HMFGetLogIdentifier();
          v6 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543362;
          v16 = v6;
          _os_log_impl(&dword_2218F0000, v5, OS_LOG_TYPE_DEFAULT, "%{public}@Taking WiFi assertion", buf, 0xCu);

        }
        objc_autoreleasePoolPop(v3);
        objc_msgSend(*(id *)(a1 + 32), "wifiManager");
        v7 = (void *)objc_claimAutoreleasedReturnValue();
        v8 = (void *)MEMORY[0x24BDD17C8];
        objc_msgSend(*(id *)(a1 + 32), "shortDescription");
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v8, "stringWithFormat:", CFSTR("Remote Access for %@"), v9);
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v7, "beginActiveAssertionWithOptions:reason:", 0, v10);
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(*(id *)(a1 + 32), "setWiFiAssertion:", v11);

        objc_msgSend(*(id *)(a1 + 32), "wifiManager");
        v12 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v12, "takeWoWAssertion");

      }
    }
  }
  objc_msgSend(*(id *)(a1 + 40), "userInfo");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v13, "hmf_stringForKey:", CFSTR("HMDXPCConnectionBundleIdentifier"));
  v14 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(*(id *)(a1 + 32), "_registerForAccessoryReachabilityNotifications:registrationIdentifier:clientBundleIdentifier:", 1, CFSTR("HMDAccessoryActiveClientRemoteRegistrationIdentifierKey"), v14);
  objc_msgSend(*(id *)(a1 + 32), "_registerForMatterFabricNotifications:registrationIdentifier:clientBundleIdentifier:", 1, CFSTR("HMDAccessoryActiveClientRemoteRegistrationIdentifierKey"), v14);

}

void __521__HMDHome_initWithName_uuid_defaultRoomUUID_owner_homeManager_presenceAuth_metricsDispatcherFactory_logEventSubmitter_dailyScheduler_currentUserFactory_residentDeviceManagerFactory_locationHandlerFactory_hapMetadata_siriSecureAccessoryAccessController_carPlayDataSource_deviceLockStateDataSource_notificationRegistry_administratorHandlerFactory_netManagerFactory_wifiManagerFactory_matterCapabilitiesFactory_xpcMessageTransportFactory_localCapabilitiesDataSource_notificationCenter_keychainStore_reportingSessionManager___block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id WeakRetained;
  id v7;

  v7 = a2;
  v5 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (v7)
    objc_msgSend(WeakRetained, "_registerForReachabilityChangeNotificationsEnabled:completionHandler:", objc_msgSend(v7, "BOOLValue"), v5);

}

id __521__HMDHome_initWithName_uuid_defaultRoomUUID_owner_homeManager_presenceAuth_metricsDispatcherFactory_logEventSubmitter_dailyScheduler_currentUserFactory_residentDeviceManagerFactory_locationHandlerFactory_hapMetadata_siriSecureAccessoryAccessController_carPlayDataSource_deviceLockStateDataSource_notificationRegistry_administratorHandlerFactory_netManagerFactory_wifiManagerFactory_matterCapabilitiesFactory_xpcMessageTransportFactory_localCapabilitiesDataSource_notificationCenter_keychainStore_reportingSessionManager___block_invoke_2(uint64_t a1, uint64_t a2)
{
  id WeakRetained;
  void *v4;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "makeMatterCapabilitiesObjectForAssetFilename:", a2);
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  return v4;
}

unint64_t __521__HMDHome_initWithName_uuid_defaultRoomUUID_owner_homeManager_presenceAuth_metricsDispatcherFactory_logEventSubmitter_dailyScheduler_currentUserFactory_residentDeviceManagerFactory_locationHandlerFactory_hapMetadata_siriSecureAccessoryAccessController_carPlayDataSource_deviceLockStateDataSource_notificationRegistry_administratorHandlerFactory_netManagerFactory_wifiManagerFactory_matterCapabilitiesFactory_xpcMessageTransportFactory_localCapabilitiesDataSource_notificationCenter_keychainStore_reportingSessionManager___block_invoke_489(uint64_t a1)
{
  id WeakRetained;
  void *v2;
  void *v3;
  unint64_t v4;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v2 = WeakRetained;
  if (WeakRetained)
  {
    objc_msgSend(WeakRetained, "currentUser");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    v4 = +[HMDUser hmmtrUserPrivilegeFromHMDUserPrivilege:](HMDUser, "hmmtrUserPrivilegeFromHMDUserPrivilege:", objc_msgSend(v3, "privilege"));

  }
  else
  {
    v4 = 0;
  }

  return v4;
}

uint64_t __76__HMDHome_initWithName_uuid_defaultRoomUUID_owner_homeManager_presenceAuth___block_invoke_6()
{
  return objc_msgSend(MEMORY[0x24BE3F2B8], "sharedManager");
}

uint64_t __76__HMDHome_initWithName_uuid_defaultRoomUUID_owner_homeManager_presenceAuth___block_invoke_5()
{
  return objc_msgSend(MEMORY[0x24BE3F1E8], "sharedManager");
}

HMDHomeLocationHandler *__76__HMDHome_initWithName_uuid_defaultRoomUUID_owner_homeManager_presenceAuth___block_invoke_4()
{
  return objc_alloc_init(HMDHomeLocationHandler);
}

HMDHomeAdministratorHandler *__76__HMDHome_initWithName_uuid_defaultRoomUUID_owner_homeManager_presenceAuth___block_invoke_3(uint64_t a1, void *a2)
{
  id v2;
  HMDHomeAdministratorHandler *v3;

  v2 = a2;
  v3 = -[HMDHomeAdministratorHandler initWithHome:]([HMDHomeAdministratorHandler alloc], "initWithHome:", v2);

  return v3;
}

id __76__HMDHome_initWithName_uuid_defaultRoomUUID_owner_homeManager_presenceAuth___block_invoke_2(uint64_t a1, void *a2)
{
  void *v2;
  void *v3;

  objc_msgSend(a2, "uuid");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  +[HMDResidentDeviceManagerFactory createManagerForHomeUUID:](HMDResidentDeviceManagerFactory, "createManagerForHomeUUID:", v2);
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  return v3;
}

uint64_t __76__HMDHome_initWithName_uuid_defaultRoomUUID_owner_homeManager_presenceAuth___block_invoke()
{
  return 0;
}

+ (void)_initialize
{
  if (_initialize_onceToken != -1)
    dispatch_once(&_initialize_onceToken, &__block_literal_global_14445);
}

+ (id)getBuiltinActionSets
{
  if (getBuiltinActionSets_onceToken != -1)
    dispatch_once(&getBuiltinActionSets_onceToken, &__block_literal_global_403);
  return (id)getBuiltinActionSets_builtinActionSets;
}

+ (BOOL)isObjectContainedInHome:(id)a3
{
  id v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _BYTE v13[128];
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  v3 = a3;
  +[HMDHome _initialize](HMDHome, "_initialize");
  v11 = 0u;
  v12 = 0u;
  v9 = 0u;
  v10 = 0u;
  v4 = (id)allowedClasses;
  v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
  if (v5)
  {
    v6 = *(_QWORD *)v10;
    while (2)
    {
      for (i = 0; i != v5; ++i)
      {
        if (*(_QWORD *)v10 != v6)
          objc_enumerationMutation(v4);
        if ((objc_opt_isKindOfClass() & 1) != 0)
        {
          LOBYTE(v5) = 1;
          goto LABEL_11;
        }
      }
      v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
      if (v5)
        continue;
      break;
    }
  }
LABEL_11:

  return v5;
}

+ (id)zoneIDFromHomeUUID:(id)a3
{
  void *v3;
  void *v4;
  id v5;
  void *v6;
  void *v7;
  const __CFString *v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  v3 = (void *)MEMORY[0x24BDD1880];
  v9 = CFSTR("1CAEDC10-E3E5-41A4-BB17-A9EEBA14A938");
  v4 = (void *)MEMORY[0x24BDBCE30];
  v5 = a3;
  objc_msgSend(v4, "arrayWithObjects:count:", &v9, 1);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "hm_deriveUUIDFromBaseUUID:identifierSalt:withSalts:", v5, 0, v6, v9, v10);
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  return v7;
}

+ (id)shortDescription
{
  objc_class *v2;

  v2 = (objc_class *)objc_opt_class();
  return NSStringFromClass(v2);
}

+ (id)filterUsersSupportingPresence:(id)a3
{
  id v3;
  void *v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  _BYTE v16[128];
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  v3 = a3;
  objc_msgSend(MEMORY[0x24BDBCEB8], "arrayWithCapacity:", objc_msgSend(v3, "count"));
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  v15 = 0u;
  v5 = v3;
  v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
  if (v6)
  {
    v7 = v6;
    v8 = *(_QWORD *)v13;
    do
    {
      v9 = 0;
      do
      {
        if (*(_QWORD *)v13 != v8)
          objc_enumerationMutation(v5);
        v10 = *(_QWORD *)(*((_QWORD *)&v12 + 1) + 8 * v9);
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) == 0)
          objc_msgSend(v4, "addObject:", v10, (_QWORD)v12);
        ++v9;
      }
      while (v7 != v9);
      v7 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
    }
    while (v7);
  }

  return v4;
}

+ (unint64_t)privilegeFromUserInviteInformation:(id)a3
{
  id v3;
  unint64_t v4;

  v3 = a3;
  if ((objc_msgSend(v3, "isRestrictedGuest") & 1) != 0)
  {
    v4 = 5;
  }
  else if (objc_msgSend(v3, "isAdministrator"))
  {
    v4 = 4;
  }
  else
  {
    v4 = 0;
  }

  return v4;
}

+ (id)notificationPayloadForChangedCharacteristics:(id)a3 destinationIsXPCTransport:(BOOL)a4
{
  return (id)objc_msgSend(a1, "notificationPayloadForChangedCharacteristics:destination:destinationIsXPCTransport:", a3, 0, a4);
}

+ (id)notificationPayloadForChangedCharacteristics:(id)a3 destination:(id)a4 destinationIsXPCTransport:(BOOL)a5
{
  id v6;
  void *v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  uint64_t v17;
  void *v18;
  BOOL v19;
  void *v22;
  void *v23;
  BOOL v24;
  id v25;
  char isKindOfClass;
  void *v27;
  void *v28;
  char v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  void *v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  void *v41;
  void *v42;
  void *v43;
  id v44;
  id v45;
  id v46;
  NSObject *v47;
  void *v48;
  char v49;
  uint64_t v50;
  int v51;
  void *v52;
  void *v53;
  void *v54;
  void *v55;
  id v56;
  NSObject *v57;
  void *v58;
  void *v59;
  void *v60;
  void *v61;
  __int128 v63;
  void *context;
  void *contexta;
  id v67;
  id v68;
  void *v69;
  void *v70;
  void *v71;
  void *v72;
  void *v73;
  void *v74;
  void *v75;
  uint64_t v76;
  uint64_t v77;
  id obj;
  void *v79;
  id v80;
  _BOOL4 v81;
  id v82;
  id v83;
  id v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  uint8_t buf[4];
  void *v90;
  __int16 v91;
  id v92;
  __int16 v93;
  void *v94;
  __int16 v95;
  id v96;
  const __CFString *v97;
  void *v98;
  _BYTE v99[128];
  uint64_t v100;

  v81 = a5;
  v100 = *MEMORY[0x24BDAC8D0];
  v6 = a3;
  v68 = a4;
  objc_msgSend(MEMORY[0x24BDBCED8], "dictionary");
  v67 = (id)objc_claimAutoreleasedReturnValue();
  +[HMDHAPMetadata getSharedInstance](HMDHAPMetadata, "getSharedInstance");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v85 = 0u;
  v86 = 0u;
  v87 = 0u;
  v88 = 0u;
  obj = v6;
  v8 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v85, v99, 16);
  if (v8)
  {
    v10 = v8;
    v11 = *(_QWORD *)v86;
    *(_QWORD *)&v9 = 138544130;
    v63 = v9;
    v79 = v7;
    v76 = *(_QWORD *)v86;
    do
    {
      v12 = 0;
      v77 = v10;
      do
      {
        if (*(_QWORD *)v86 != v11)
          objc_enumerationMutation(obj);
        v13 = *(void **)(*((_QWORD *)&v85 + 1) + 8 * v12);
        objc_msgSend(v13, "characteristic", v63);
        v14 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v14, "service");
        v15 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v15, "accessory");
        v16 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v16, "home");
        v17 = objc_claimAutoreleasedReturnValue();
        v18 = (void *)v17;
        if (v14)
          v19 = v15 == 0;
        else
          v19 = 1;
        if (!v19 && v16 != 0 && v17 != 0)
        {
          objc_msgSend(v13, "updatedValue");
          v22 = (void *)objc_claimAutoreleasedReturnValue();
          v23 = v22;
          if (v22)
            v24 = !v81;
          else
            v24 = 1;
          if (v24)
          {
            if (v22)
              goto LABEL_24;
          }
          else
          {
            v25 = v22;
            objc_opt_class();
            isKindOfClass = objc_opt_isKindOfClass();

            if ((isKindOfClass & 1) == 0)
            {
LABEL_24:
              if (!v81)
                goto LABEL_27;
              objc_msgSend(v14, "type");
              v27 = (void *)objc_claimAutoreleasedReturnValue();
              if ((objc_msgSend(v79, "shouldFilterCharacteristicOfTypeFromApp:", v27) & 1) != 0)
              {
LABEL_52:

              }
              else
              {
                objc_msgSend(v15, "type");
                v28 = (void *)objc_claimAutoreleasedReturnValue();
                v29 = objc_msgSend(v79, "shouldFilterServiceOfTypeFromApp:", v28);

                if ((v29 & 1) == 0)
                {
LABEL_27:
                  objc_msgSend(v16, "uuid");
                  v30 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend(v30, "UUIDString");
                  v31 = objc_claimAutoreleasedReturnValue();

                  v32 = v31;
                  objc_msgSend(v67, "hmf_mutableDictionaryForKey:", v31);
                  v33 = objc_claimAutoreleasedReturnValue();
                  if (!v33)
                  {
                    objc_msgSend(MEMORY[0x24BDBCED8], "dictionary");
                    v33 = objc_claimAutoreleasedReturnValue();
                    objc_msgSend(v67, "setObject:forKey:", v33, v32);
                  }
                  v73 = (void *)v32;
                  objc_msgSend(v15, "instanceID");
                  v34 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend(v34, "stringValue");
                  v35 = objc_claimAutoreleasedReturnValue();
                  v36 = (void *)v33;
                  v37 = (void *)v35;
                  v75 = v36;
                  objc_msgSend(v36, "hmf_mutableDictionaryForKey:", v35);
                  v38 = objc_claimAutoreleasedReturnValue();

                  v74 = (void *)v38;
                  if (!v38)
                  {
                    objc_msgSend(MEMORY[0x24BDBCED8], "dictionary");
                    v39 = objc_claimAutoreleasedReturnValue();
                    objc_msgSend(v15, "instanceID");
                    v40 = (void *)objc_claimAutoreleasedReturnValue();
                    objc_msgSend(v40, "stringValue");
                    v41 = (void *)objc_claimAutoreleasedReturnValue();
                    v74 = (void *)v39;
                    objc_msgSend(v75, "setObject:forKey:", v39, v41);

                  }
                  v97 = CFSTR("kCharacteristicValue");
                  v98 = v23;
                  objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", &v98, &v97, 1);
                  v42 = (void *)objc_claimAutoreleasedReturnValue();
                  v43 = (void *)objc_msgSend(v42, "mutableCopy");

                  v83 = 0;
                  v84 = 0;
                  v82 = 0;
                  objc_msgSend(v14, "getLastKnownValueUpdateTime:stateNumber:notificationContext:", &v84, &v83, &v82);
                  v44 = v84;
                  v45 = v83;
                  v80 = v82;
                  if (v44)
                    objc_msgSend(v43, "setObject:forKey:", v44, CFSTR("kCharacteristicValueUpdateTime"));
                  if (v45)
                    objc_msgSend(v43, "setObject:forKey:", v45, CFSTR("kCharacteristicValueUpdateStateNumberKey"));
                  v71 = v45;
                  v72 = v44;
                  if (v80)
                  {
                    v69 = v43;
                    context = (void *)MEMORY[0x227676638]();
                    v46 = a1;
                    HMFGetOSLogHandle();
                    v47 = objc_claimAutoreleasedReturnValue();
                    if (os_log_type_enabled(v47, OS_LOG_TYPE_INFO))
                    {
                      HMFGetLogIdentifier();
                      v48 = (void *)objc_claimAutoreleasedReturnValue();
                      *(_DWORD *)buf = 138543618;
                      v90 = v48;
                      v91 = 2112;
                      v92 = v80;
                      _os_log_impl(&dword_2218F0000, v47, OS_LOG_TYPE_INFO, "%{public}@Setting notification context in notification payload to %@ ", buf, 0x16u);

                    }
                    objc_autoreleasePoolPop(context);
                    v43 = v69;
                    objc_msgSend(v69, "setObject:forKey:", v80, CFSTR("kCharacteristicNotificationContextKey"));
                  }
                  v49 = objc_msgSend(v13, "isBroadcast");
                  v50 = MEMORY[0x24BDBD1C8];
                  if ((v49 & 1) != 0
                    || (v51 = objc_msgSend(v16, "isBLELinkConnected", MEMORY[0x24BDBD1C8]),
                        v50 = MEMORY[0x24BDBD1C0],
                        v51))
                  {
                    objc_msgSend(v43, "setObject:forKey:", v50, CFSTR("kCharacteristicBroadcastValueUpdateKey"));
                  }
                  if (!v81)
                  {
                    objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedInteger:", objc_msgSend(v13, "reasons", v50));
                    v52 = (void *)objc_claimAutoreleasedReturnValue();
                    objc_msgSend(v43, "setObject:forKey:", v52, CFSTR("kCharacteristicValueUpdateReasonKey"));

                  }
                  if (v68
                    && +[HMDBulletinUserAttributionManager currentStateCharacteristicSupportsUserAttribution:](HMDBulletinUserAttributionManager, "currentStateCharacteristicSupportsUserAttribution:", v14))
                  {
                    objc_msgSend(v18, "bulletinUserAttributionManager");
                    v53 = (void *)objc_claimAutoreleasedReturnValue();
                    objc_msgSend(v53, "attributedUserUUIDForCurrentStateCharacteristic:destination:", v14, v68);
                    v54 = (void *)objc_claimAutoreleasedReturnValue();

                    if (v54)
                    {
                      v70 = v43;
                      v55 = (void *)MEMORY[0x227676638]();
                      v56 = a1;
                      HMFGetOSLogHandle();
                      v57 = objc_claimAutoreleasedReturnValue();
                      if (os_log_type_enabled(v57, OS_LOG_TYPE_INFO))
                      {
                        HMFGetLogIdentifier();
                        contexta = v55;
                        v58 = (void *)objc_claimAutoreleasedReturnValue();
                        *(_DWORD *)buf = v63;
                        v90 = v58;
                        v91 = 2112;
                        v92 = v54;
                        v93 = 2112;
                        v94 = v14;
                        v95 = 2112;
                        v96 = v68;
                        _os_log_impl(&dword_2218F0000, v57, OS_LOG_TYPE_INFO, "%{public}@Including attributedUserUUID=%@ in chracteristic=%@ update message to destination=%@", buf, 0x2Au);

                        v55 = contexta;
                      }

                      objc_autoreleasePoolPop(v55);
                      objc_msgSend(v54, "UUIDString");
                      v59 = (void *)objc_claimAutoreleasedReturnValue();
                      v43 = v70;
                      objc_msgSend(v70, "setObject:forKey:", v59, CFSTR("kCharacteristicAttributedUserUUIDKey"));

                    }
                  }
                  objc_msgSend(v14, "instanceID", v50);
                  v60 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend(v60, "stringValue");
                  v61 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend(v74, "setObject:forKey:", v43, v61);

                  v27 = v73;
                  goto LABEL_52;
                }
              }
            }
          }

          v7 = v79;
          v11 = v76;
          v10 = v77;
        }

        ++v12;
      }
      while (v10 != v12);
      v10 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v85, v99, 16);
    }
    while (v10);
  }

  return v67;
}

+ (void)appendCharacteristicsToAccessoryList:(id)a3 responseTuples:(id)a4 forMultipleCharacteristicsRemoteWrite:(id)a5 message:(id)a6
{
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  BOOL v19;
  void *v21;
  void *v22;
  void *v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  void *v29;
  void *v30;
  uint64_t v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  int v39;
  void *v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  id v44;
  id v45;
  uint64_t v46;
  id obj;
  id v48;
  void *v49;
  void *v50;
  void *v51;
  void *v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  _BYTE v58[128];
  uint64_t v59;

  v59 = *MEMORY[0x24BDAC8D0];
  v48 = a3;
  v45 = a4;
  v9 = a5;
  v44 = a6;
  v54 = 0u;
  v55 = 0u;
  v56 = 0u;
  v57 = 0u;
  obj = v9;
  v10 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v54, v58, 16);
  if (v10)
  {
    v11 = v10;
    v12 = *(_QWORD *)v55;
    v42 = *MEMORY[0x24BDD5BD8];
    v43 = *(_QWORD *)v55;
    do
    {
      v13 = 0;
      v46 = v11;
      do
      {
        if (*(_QWORD *)v55 != v12)
          objc_enumerationMutation(obj);
        v14 = *(void **)(*((_QWORD *)&v54 + 1) + 8 * v13);
        objc_msgSend(v14, "characteristic");
        v15 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v15, "service");
        v16 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v16, "accessory");
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        v18 = v17;
        if (v15)
          v19 = v16 == 0;
        else
          v19 = 1;
        if (v19 || v17 == 0)
        {
          objc_msgSend(MEMORY[0x24BDD1540], "errorWithDomain:code:userInfo:", v42, 4, 0);
          v21 = (void *)objc_claimAutoreleasedReturnValue();
          +[HMDCharacteristicResponse responseWithRequest:error:](HMDCharacteristicResponse, "responseWithRequest:error:", v14, v21);
          v22 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v45, "addObject:", v22);
        }
        else
        {
          objc_msgSend(v17, "uuid");
          v23 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v23, "UUIDString");
          v24 = objc_claimAutoreleasedReturnValue();

          objc_msgSend(v16, "instanceID");
          v25 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v25, "stringValue");
          v26 = objc_claimAutoreleasedReturnValue();

          objc_msgSend(v15, "instanceID");
          v27 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v27, "stringValue");
          v53 = (void *)objc_claimAutoreleasedReturnValue();

          objc_msgSend(v48, "hmf_mutableDictionaryForKey:", v24);
          v28 = objc_claimAutoreleasedReturnValue();
          v29 = (void *)v28;
          if (!v28)
          {
            objc_msgSend(MEMORY[0x24BDBCED8], "dictionary");
            v29 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v48, "setObject:forKeyedSubscript:", v29, v24);
          }
          v52 = (void *)v24;
          objc_msgSend(v29, "hmf_mutableDictionaryForKey:", v26);
          v30 = (void *)objc_claimAutoreleasedReturnValue();
          if (!v30)
          {
            objc_msgSend(MEMORY[0x24BDBCED8], "dictionary");
            v30 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v29, "setObject:forKeyedSubscript:", v30, v26);
          }
          v50 = v29;
          v51 = (void *)v26;
          objc_msgSend(v15, "authorizationData");
          v31 = objc_claimAutoreleasedReturnValue();
          if (v31)
          {
            objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("%@-%@"), v53, CFSTR("kAuthorizationDataKey"));
            v32 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v30, "setObject:forKeyedSubscript:", v31, v32);

          }
          v49 = (void *)v31;
          objc_msgSend(v18, "home");
          v33 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v33, "currentUser");
          v34 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v34, "notificationContextHAPIdentifier");
          v35 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v15, "contextDataForWriteRequestWithIdentifier:", v35);
          v36 = (void *)objc_claimAutoreleasedReturnValue();

          if (v36)
          {
            objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("%@-%@"), v53, CFSTR("kCharacteristicContextDataForWriteKey"));
            v37 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v30, "setObject:forKeyedSubscript:", v36, v37);

          }
          objc_msgSend(v44, "uuidForKey:", CFSTR("kActionSetUUID"));
          v38 = (void *)objc_claimAutoreleasedReturnValue();
          v39 = objc_msgSend(v44, "BOOLForKey:", CFSTR("kShortActionKey"));
          v22 = v51;
          if (v38 || v39)
            objc_msgSend(v48, "setObject:forKeyedSubscript:", MEMORY[0x24BDBD1C8], CFSTR("kShortActionKey"));
          objc_msgSend(v14, "value");
          v40 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v30, "setObject:forKeyedSubscript:", v40, v53);

          objc_msgSend(MEMORY[0x24BDD16E0], "numberWithBool:", objc_msgSend(v14, "includeResponseValue"));
          v41 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v30, "setObject:forKeyedSubscript:", v41, CFSTR("HMDCharacteristicWriteRequestIncludeResponseValueKey"));

          v12 = v43;
          v11 = v46;
          v21 = v52;
        }

        ++v13;
      }
      while (v11 != v13);
      v11 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v54, v58, 16);
    }
    while (v11);
  }

}

+ (void)appendCharacteristicsToAccessoryList:(id)a3 responseTuples:(id)a4 forMultipleCharacteristicsRemoteRead:(id)a5
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  BOOL v16;
  void *v18;
  void *v19;
  void *v20;
  uint64_t v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  uint64_t v28;
  id v29;
  uint64_t v30;
  id obj;
  id v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  _BYTE v37[128];
  uint64_t v38;

  v38 = *MEMORY[0x24BDAC8D0];
  v32 = a3;
  v29 = a4;
  v33 = 0u;
  v34 = 0u;
  v35 = 0u;
  v36 = 0u;
  obj = a5;
  v7 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v33, v37, 16);
  if (v7)
  {
    v8 = v7;
    v9 = *(_QWORD *)v34;
    v28 = *MEMORY[0x24BDD5BD8];
    do
    {
      v10 = 0;
      v30 = v8;
      do
      {
        if (*(_QWORD *)v34 != v9)
          objc_enumerationMutation(obj);
        v11 = *(void **)(*((_QWORD *)&v33 + 1) + 8 * v10);
        objc_msgSend(v11, "characteristic");
        v12 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v12, "service");
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v13, "accessory");
        v14 = (void *)objc_claimAutoreleasedReturnValue();
        v15 = v14;
        if (v12)
          v16 = v13 == 0;
        else
          v16 = 1;
        if (v16 || v14 == 0)
        {
          objc_msgSend(MEMORY[0x24BDD1540], "errorWithDomain:code:userInfo:", v28, 4, 0);
          v20 = (void *)objc_claimAutoreleasedReturnValue();
          +[HMDCharacteristicResponse responseWithRequest:error:](HMDCharacteristicResponse, "responseWithRequest:error:", v11, v20);
          v18 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v29, "addObject:", v18);
        }
        else
        {
          objc_msgSend(v14, "uuid");
          v19 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v19, "UUIDString");
          v20 = (void *)objc_claimAutoreleasedReturnValue();

          objc_msgSend(v32, "hmf_mutableDictionaryForKey:", v20);
          v21 = objc_claimAutoreleasedReturnValue();
          v18 = (void *)v21;
          if (!v21)
          {
            objc_msgSend(MEMORY[0x24BDBCED8], "dictionary");
            v18 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v32, "setObject:forKey:", v18, v20);
          }
          objc_msgSend(v13, "instanceID");
          v22 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v22, "stringValue");
          v23 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v18, "hmf_mutableArrayForKey:", v23);
          v24 = (void *)objc_claimAutoreleasedReturnValue();

          if (!v24)
          {
            objc_msgSend(MEMORY[0x24BDBCEB8], "array");
            v24 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v13, "instanceID");
            v25 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v25, "stringValue");
            v26 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v18, "setObject:forKey:", v24, v26);

          }
          objc_msgSend(v12, "instanceID");
          v27 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v24, "addObject:", v27);

          v8 = v30;
        }

        ++v10;
      }
      while (v8 != v10);
      v8 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v33, v37, 16);
    }
    while (v8);
  }

}

+ (id)supportedAccessoryClasses
{
  if (supportedAccessoryClasses_onceToken != -1)
    dispatch_once(&supportedAccessoryClasses_onceToken, &__block_literal_global_1498);
  return (id)supportedAccessoryClasses_supportedAccessoryClasses;
}

+ (BOOL)supportsSecureCoding
{
  return 1;
}

+ (BOOL)hasMessageReceiverChildren
{
  return 1;
}

+ (id)logCategory
{
  if (logCategory__hmf_once_t1449 != -1)
    dispatch_once(&logCategory__hmf_once_t1449, &__block_literal_global_1563);
  return (id)logCategory__hmf_once_v1450;
}

+ (void)dumpAccessories:(id)a3 usingTag:(id)a4 flow:(id)a5
{
  id v8;
  id v9;
  id v10;
  id v11;
  _QWORD v12[4];
  id v13;
  id v14;
  id v15;

  v8 = a4;
  v9 = a5;
  v12[0] = MEMORY[0x24BDAC760];
  v12[1] = 3221225472;
  v12[2] = __41__HMDHome_dumpAccessories_usingTag_flow___block_invoke;
  v12[3] = &unk_24E777128;
  v14 = v8;
  v15 = a1;
  v13 = v9;
  v10 = v8;
  v11 = v9;
  objc_msgSend(a3, "hmf_enumerateWithAutoreleasePoolUsingBlock:", v12);

}

+ (id)filterAllowedToPostBulletinFromCharacteristics:(id)a3
{
  return (id)objc_msgSend(a3, "na_filter:", &__block_literal_global_2043);
}

uint64_t __58__HMDHome_filterAllowedToPostBulletinFromCharacteristics___block_invoke(uint64_t a1, void *a2)
{
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;

  objc_msgSend(a2, "service");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "accessory");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "home");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v4, "shouldPostBulletin");

  return v5;
}

void __41__HMDHome_dumpAccessories_usingTag_flow___block_invoke(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  NSObject *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  void *v10;
  void *v11;
  const __CFString *v12;
  int v13;
  void *v14;
  __int16 v15;
  void *v16;
  __int16 v17;
  uint64_t v18;
  __int16 v19;
  void *v20;
  __int16 v21;
  const __CFString *v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  v3 = a2;
  v4 = (void *)MEMORY[0x227676638]();
  v5 = *(id *)(a1 + 48);
  HMFGetOSLogHandle();
  v6 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 32), "UUID");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = *(_QWORD *)(a1 + 40);
    objc_msgSend(v3, "modelID");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "castIfHAPAccessory");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v13 = 138544386;
    v12 = CFSTR("YES");
    v14 = v7;
    if (!v11)
      v12 = CFSTR("NO");
    v15 = 2112;
    v16 = v8;
    v17 = 2112;
    v18 = v9;
    v19 = 2112;
    v20 = v10;
    v21 = 2112;
    v22 = v12;
    _os_log_impl(&dword_2218F0000, v6, OS_LOG_TYPE_INFO, "%{public}@[Flow: %@] %@ : %@ (isHAPAccessory : %@)", (uint8_t *)&v13, 0x34u);

  }
  objc_autoreleasePoolPop(v4);

}

void __22__HMDHome_logCategory__block_invoke()
{
  uint64_t v0;
  void *v1;

  HMFCreateOSLogHandle();
  v0 = objc_claimAutoreleasedReturnValue();
  v1 = (void *)logCategory__hmf_once_v1450;
  logCategory__hmf_once_v1450 = v0;

}

void __36__HMDHome_supportedAccessoryClasses__block_invoke()
{
  void *v0;
  void *v1;
  uint64_t v2;
  void *v3;
  _QWORD v4[3];

  v4[2] = *MEMORY[0x24BDAC8D0];
  v0 = (void *)MEMORY[0x24BDBCF20];
  v4[0] = objc_opt_class();
  v4[1] = objc_opt_class();
  objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", v4, 2);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "setWithArray:", v1);
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = (void *)supportedAccessoryClasses_supportedAccessoryClasses;
  supportedAccessoryClasses_supportedAccessoryClasses = v2;

}

void __31__HMDHome_getBuiltinActionSets__block_invoke()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  _QWORD v7[4];
  _QWORD v8[5];

  v8[4] = *MEMORY[0x24BDAC8D0];
  v0 = *MEMORY[0x24BDD51C8];
  v1 = *MEMORY[0x24BDD5210];
  v7[0] = *MEMORY[0x24BDD5228];
  v7[1] = v1;
  v2 = *MEMORY[0x24BDD51C0];
  v8[0] = v0;
  v8[1] = v2;
  v3 = *MEMORY[0x24BDD5200];
  v7[2] = *MEMORY[0x24BDD51F8];
  v7[3] = v3;
  v4 = *MEMORY[0x24BDD51B8];
  v8[2] = *MEMORY[0x24BDD51B0];
  v8[3] = v4;
  objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v8, v7, 4);
  v5 = objc_claimAutoreleasedReturnValue();
  v6 = (void *)getBuiltinActionSets_builtinActionSets;
  getBuiltinActionSets_builtinActionSets = v5;

}

void __22__HMDHome__initialize__block_invoke()
{
  void *v0;
  void *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v0 = (void *)MEMORY[0x24BDBCF20];
  v4 = objc_opt_class();
  v5 = objc_opt_class();
  v6 = objc_opt_class();
  v7 = objc_opt_class();
  v8 = objc_opt_class();
  v9 = objc_opt_class();
  v10 = objc_opt_class();
  v11 = objc_opt_class();
  v12 = objc_opt_class();
  v13 = objc_opt_class();
  v14 = objc_opt_class();
  objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", &v4, 11);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "setWithArray:", v1, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13);
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = (void *)allowedClasses;
  allowedClasses = v2;

}

- (void)setMediaSettingsValue:(int64_t)a3 mediaPassword:(id)a4 enabled:(BOOL)a5
{
  _BOOL8 v5;
  id v8;

  v5 = a5;
  v8 = a4;
  -[HMDHome setMinimumMediaUserPrivilege:](self, "setMinimumMediaUserPrivilege:", a3);
  -[HMDHome setMediaPassword:](self, "setMediaPassword:", v8);

  -[HMDHome setMediaPeerToPeerEnabled:](self, "setMediaPeerToPeerEnabled:", v5);
}

- (BOOL)isThreadCapable
{
  void *v3;

  -[HMDHome threadNetworkID](self, "threadNetworkID");
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  if (v3)
    return 1;
  -[HMDHome _scheduleThreadNetworkUpdate](self, "_scheduleThreadNetworkUpdate");
  return -[HMDHome threadPreferredNetworkExists](self, "threadPreferredNetworkExists");
}

- (BOOL)isThreadNetworkUp
{
  -[HMDHome _scheduleThreadNetworkUpdate](self, "_scheduleThreadNetworkUpdate");
  return -[HMDHome threadNetworkIsUp](self, "threadNetworkIsUp");
}

- (void)_registerForThreadNetworkEvents
{
  NSObject *v3;
  _QWORD v4[4];
  id v5;
  id location;

  objc_initWeak(&location, self);
  -[HMDHome workQueue](self, "workQueue");
  v3 = objc_claimAutoreleasedReturnValue();
  v4[0] = MEMORY[0x24BDAC760];
  v4[1] = 3221225472;
  v4[2] = __71__HMDHome_ThreadResidentCommissioning___registerForThreadNetworkEvents__block_invoke;
  v4[3] = &unk_24E797318;
  objc_copyWeak(&v5, &location);
  dispatch_async(v3, v4);

  objc_destroyWeak(&v5);
  objc_destroyWeak(&location);
}

- (void)_unregisterForThreadNetworkEvents
{
  NSObject *v3;
  _QWORD v4[4];
  id v5;
  id location;

  objc_initWeak(&location, self);
  -[HMDHome workQueue](self, "workQueue");
  v3 = objc_claimAutoreleasedReturnValue();
  v4[0] = MEMORY[0x24BDAC760];
  v4[1] = 3221225472;
  v4[2] = __73__HMDHome_ThreadResidentCommissioning___unregisterForThreadNetworkEvents__block_invoke;
  v4[3] = &unk_24E797318;
  objc_copyWeak(&v5, &location);
  dispatch_async(v3, v4);

  objc_destroyWeak(&v5);
  objc_destroyWeak(&location);
}

- (NSString)threadNetworkID
{
  void *v2;
  id v3;

  -[HMDHome unfilteredThreadNetworkID](self, "unfilteredThreadNetworkID");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  if ((objc_msgSend(v2, "isEqualToString:", CFSTR("770E5B2E-0BAD-0BAD-0BAD-EE86505EFF8F")) & 1) != 0)
    v3 = 0;
  else
    v3 = v2;

  return (NSString *)v3;
}

- (void)setThreadNetworkID:(id)a3
{
  id v5;
  uint64_t v6;
  void *v7;
  char v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  HMDHome *v15;
  NSObject *v16;
  void *v17;
  void *v18;
  int v19;
  void *v20;
  __int16 v21;
  id v22;
  __int16 v23;
  void *v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v5 = a3;
  -[HMDHome threadNetworkID](self, "threadNetworkID");
  v6 = objc_claimAutoreleasedReturnValue();
  if (v6
    && (v7 = (void *)v6,
        v8 = objc_msgSend(v5, "isEqualToString:", CFSTR("770E5B2E-0BAD-0BAD-0BAD-EE86505EFF8F")),
        v7,
        (v8 & 1) == 0))
  {
    v14 = (void *)MEMORY[0x227676638]();
    v15 = self;
    HMFGetOSLogHandle();
    v16 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      -[HMDHome unfilteredThreadNetworkID](v15, "unfilteredThreadNetworkID");
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      v19 = 138543874;
      v20 = v17;
      v21 = 2112;
      v22 = v5;
      v23 = 2112;
      v24 = v18;
      _os_log_impl(&dword_2218F0000, v16, OS_LOG_TYPE_ERROR, "%{public}@Unable to set threadNetworkID to %@. (current value=%@)", (uint8_t *)&v19, 0x20u);

    }
    objc_autoreleasePoolPop(v14);
  }
  else if (-[HMDHome attemptToUpdateThreadNetworkID:](self, "attemptToUpdateThreadNetworkID:", v5))
  {
    +[HMDHomeThreadNetworkModel defaultModelForHome:](HMDHomeThreadNetworkModel, "defaultModelForHome:", self);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "setThreadNetworkID:", v5);
    -[HMDHome backingStore](self, "backingStore");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    NSStringFromSelector(a2);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    +[HMDBackingStoreTransactionOptions defaultXPCOptions](HMDBackingStoreTransactionOptions, "defaultXPCOptions");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "transaction:options:", v11, v12);
    v13 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v13, "add:withMessage:", v9, 0);
    objc_msgSend(v13, "run");

  }
}

- (BOOL)isCurrentDeviceThreadPreferredPrimaryResident
{
  void *v2;
  char v3;

  +[HMDDeviceCapabilities deviceCapabilities](HMDDeviceCapabilities, "deviceCapabilities");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "supportsThreadBorderRouter");

  return v3;
}

- (void)_registerThreadResidentCommissioningMessageHandlers
{
  void *v3;
  HMDHome *v4;
  NSObject *v5;
  void *v6;
  void *v7;
  int v8;
  void *v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  if (isFeatureMatteriPhoneOnlyPairingControlEnabled())
  {
    v3 = (void *)MEMORY[0x227676638]();
    v4 = self;
    HMFGetOSLogHandle();
    v5 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      v8 = 138543362;
      v9 = v6;
      _os_log_impl(&dword_2218F0000, v5, OS_LOG_TYPE_INFO, "%{public}@Registering for HMFWiFiManagerCurrentNetworkDidChangeNotification", (uint8_t *)&v8, 0xCu);

    }
    objc_autoreleasePoolPop(v3);
    objc_msgSend(MEMORY[0x24BDD16D0], "defaultCenter");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "addObserver:selector:name:object:", v4, sel_handleCurrentWiFiNetworkChangedNotification_, *MEMORY[0x24BE3F130], 0);

  }
}

- (void)handleCurrentWiFiNetworkChangedNotification:(id)a3
{
  NSObject *v4;
  _QWORD block[5];

  -[HMDHome workQueue](self, "workQueue", a3);
  v4 = objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x24BDAC760];
  block[1] = 3221225472;
  block[2] = __84__HMDHome_ThreadResidentCommissioning__handleCurrentWiFiNetworkChangedNotification___block_invoke;
  block[3] = &unk_24E79C240;
  block[4] = self;
  dispatch_async(v4, block);

}

- (void)_handleThreadNetworkCredentialsRequest:(id)a3
{
  id v4;
  void *v5;
  HMDHome *v6;
  NSObject *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  HMDHome *v14;
  NSObject *v15;
  void *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(uint64_t, void *, void *);
  void *v21;
  id v22;
  id v23;
  uint8_t buf[4];
  void *v25;
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  v4 = a3;
  v5 = (void *)MEMORY[0x227676638]();
  v6 = self;
  HMFGetOSLogHandle();
  v7 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543362;
    v25 = v8;
    _os_log_impl(&dword_2218F0000, v7, OS_LOG_TYPE_INFO, "%{public}@Attempting to resolve request for Thread Network Credentials", buf, 0xCu);

  }
  objc_autoreleasePoolPop(v5);
  +[HMDThreadNetworkMetadataStore defaultStore](HMDThreadNetworkMetadataStore, "defaultStore");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  if (v9)
  {
    objc_initWeak((id *)buf, v6);
    v18 = MEMORY[0x24BDAC760];
    v19 = 3221225472;
    v20 = __79__HMDHome_ThreadResidentCommissioning___handleThreadNetworkCredentialsRequest___block_invoke;
    v21 = &unk_24E77B2F0;
    objc_copyWeak(&v23, (id *)buf);
    v22 = v4;
    v10 = _Block_copy(&v18);
    -[HMDHome threadOperationalDataset](v6, "threadOperationalDataset", v18, v19, v20, v21);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHome home](v6, "home");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "retrieveMetadata:homeHasResident:completion:", v11, objc_msgSend(v12, "doesHomeContainResident"), v10);

    objc_destroyWeak(&v23);
    objc_destroyWeak((id *)buf);
  }
  else
  {
    v13 = (void *)MEMORY[0x227676638]();
    v14 = v6;
    HMFGetOSLogHandle();
    v15 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v25 = v16;
      _os_log_impl(&dword_2218F0000, v15, OS_LOG_TYPE_ERROR, "%{public}@No thread network metadata store", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v13);
    objc_msgSend(MEMORY[0x24BDD1540], "hmfErrorWithCode:", 2);
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "respondWithError:", v17);

  }
}

- (void)_handleJoinOrFormThreadNetworkMessage:(id)a3
{
  id v4;
  int v5;
  void *v6;
  int v7;
  void *v8;
  HMDHome *v9;
  NSObject *v10;
  void *v11;
  id v12;
  id v13;
  void *v14;
  void *v15;
  void *v16;
  NSObject *v17;
  _QWORD block[4];
  id v19;
  HMDHome *v20;
  id v21;
  uint8_t buf[4];
  void *v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v4 = a3;
  v5 = _os_feature_enabled_impl();
  if (isFeatureMatteriPhoneOnlyPairingControlForThreadEnabled())
  {
    +[HMDDeviceCapabilities deviceCapabilities](HMDDeviceCapabilities, "deviceCapabilities");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v7 = objc_msgSend(v6, "supportsThreadService");

    if (((v7 | v5) & 1) == 0)
    {
LABEL_3:
      v8 = (void *)MEMORY[0x227676638]();
      v9 = self;
      HMFGetOSLogHandle();
      v10 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543362;
        v23 = v11;
        _os_log_impl(&dword_2218F0000, v10, OS_LOG_TYPE_ERROR, "%{public}@Resident commissioning is disabled", buf, 0xCu);

      }
      objc_autoreleasePoolPop(v8);
      objc_msgSend(MEMORY[0x24BDD1540], "hmfErrorWithCode:", 5);
      v12 = (id)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "respondWithPayload:error:", 0, v12);
      goto LABEL_13;
    }
  }
  else if ((v5 & 1) == 0)
  {
    goto LABEL_3;
  }
  objc_msgSend(v4, "messagePayload");
  v13 = (id)objc_claimAutoreleasedReturnValue();

  if (v13)
  {
    objc_msgSend(v4, "messagePayload");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v14, "objectForKey:", *MEMORY[0x24BDD6350]);
    v15 = (void *)objc_claimAutoreleasedReturnValue();

    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
      v16 = v15;
    else
      v16 = 0;
    v13 = v16;

  }
  -[HMDHome workQueue](self, "workQueue");
  v17 = objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x24BDAC760];
  block[1] = 3221225472;
  block[2] = __78__HMDHome_ThreadResidentCommissioning___handleJoinOrFormThreadNetworkMessage___block_invoke;
  block[3] = &unk_24E79BBD0;
  v19 = v13;
  v20 = self;
  v21 = v4;
  v12 = v13;
  dispatch_async(v17, block);

LABEL_13:
}

- (void)_handleUnjoinThreadNetworkMessage:(id)a3
{
  id v4;
  NSObject *v5;
  id v6;
  _QWORD v7[5];
  id v8;

  v4 = a3;
  -[HMDHome workQueue](self, "workQueue");
  v5 = objc_claimAutoreleasedReturnValue();
  v7[0] = MEMORY[0x24BDAC760];
  v7[1] = 3221225472;
  v7[2] = __74__HMDHome_ThreadResidentCommissioning___handleUnjoinThreadNetworkMessage___block_invoke;
  v7[3] = &unk_24E79C268;
  v7[4] = self;
  v8 = v4;
  v6 = v4;
  dispatch_async(v5, v7);

}

- (void)startThreadNetwork:(BOOL)a3
{
  void *v5;
  char v6;
  void *v7;
  HMDHome *v8;
  NSObject *v9;
  void *v10;
  NSObject *v11;
  void *v12;
  HMDHome *v13;
  NSObject *v14;
  void *v15;
  _QWORD v16[5];
  BOOL v17;
  uint8_t buf[4];
  void *v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  if (isFeatureMatteriPhoneOnlyPairingControlForThreadEnabled()
    && (+[HMDDeviceCapabilities deviceCapabilities](HMDDeviceCapabilities, "deviceCapabilities"),
        v5 = (void *)objc_claimAutoreleasedReturnValue(),
        v6 = objc_msgSend(v5, "supportsThreadService"),
        v5,
        (v6 & 1) != 0))
  {
    v7 = (void *)MEMORY[0x227676638]();
    v8 = self;
    HMFGetOSLogHandle();
    v9 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
    {
      HMFGetLogIdentifier();
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v19 = v10;
      _os_log_impl(&dword_2218F0000, v9, OS_LOG_TYPE_DEBUG, "%{public}@Starting resident commissioning timer", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v7);
    -[HMDHome workQueue](v8, "workQueue");
    v11 = objc_claimAutoreleasedReturnValue();
    v16[0] = MEMORY[0x24BDAC760];
    v16[1] = 3221225472;
    v16[2] = __59__HMDHome_ThreadResidentCommissioning__startThreadNetwork___block_invoke;
    v16[3] = &unk_24E7968C8;
    v16[4] = v8;
    v17 = a3;
    dispatch_async(v11, v16);

  }
  else
  {
    v12 = (void *)MEMORY[0x227676638]();
    v13 = self;
    HMFGetOSLogHandle();
    v14 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
    {
      HMFGetLogIdentifier();
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v19 = v15;
      _os_log_impl(&dword_2218F0000, v14, OS_LOG_TYPE_DEBUG, "%{public}@Thread commissioning is not supported on this platform", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v12);
  }
}

- (void)_incrementCurrentSequenceNumber
{
  NSObject *v3;
  unint64_t v4;

  -[HMDHome workQueue](self, "workQueue");
  v3 = objc_claimAutoreleasedReturnValue();
  dispatch_assert_queue_V2(v3);

  v4 = -[HMDHome threadNetworkSequenceNumber](self, "threadNetworkSequenceNumber");
  -[HMDHome setThreadNetworkSequenceNumber:](self, "setThreadNetworkSequenceNumber:", v4 + 1);
  if (v4 == -1)
    -[HMDHome setThreadNetworkSequenceNumber:](self, "setThreadNetworkSequenceNumber:", -[HMDHome threadNetworkSequenceNumber](self, "threadNetworkSequenceNumber") + 1);
}

- (void)_retryStartThreadNetwork:(double)a3
{
  NSObject *v5;
  double v6;
  double v7;
  double v8;
  void *v9;
  void *v10;
  void *v11;
  void *v13;
  HMDHome *v14;
  NSObject *v15;
  void *v16;
  dispatch_time_t v17;
  NSObject *v18;
  _QWORD aBlock[4];
  id v20[4];
  id location;
  uint8_t buf[4];
  void *v23;
  __int16 v24;
  unint64_t v25;
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  -[HMDHome workQueue](self, "workQueue");
  v5 = objc_claimAutoreleasedReturnValue();
  dispatch_assert_queue_V2(v5);

  v6 = fabs(a3);
  v7 = 30.0;
  if (a3 > 0.0)
  {
    v8 = fmin(a3 + a3, 1800.0);
    if (v6 < 2.22044605e-16)
      v7 = 30.0;
    else
      v7 = v8;
  }
  v9 = -[HMDHome threadNetworkSequenceNumber](self, "threadNetworkSequenceNumber");
  objc_initWeak(&location, self);
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 3221225472;
  aBlock[2] = __65__HMDHome_ThreadResidentCommissioning___retryStartThreadNetwork___block_invoke;
  aBlock[3] = &unk_24E7781F0;
  objc_copyWeak(v20, &location);
  v20[1] = *(id *)&a3;
  v20[2] = v9;
  v20[3] = *(id *)&v7;
  v10 = _Block_copy(aBlock);
  v11 = v10;
  if (v6 < 2.22044605e-16 || a3 <= 0.0)
  {
    (*((void (**)(void *))v10 + 2))(v10);
  }
  else
  {
    v13 = (void *)MEMORY[0x227676638]();
    v14 = self;
    HMFGetOSLogHandle();
    v15 = (id)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
    {
      HMFGetLogIdentifier();
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v23 = v16;
      v24 = 2048;
      v25 = (unint64_t)a3;
      _os_log_impl(&dword_2218F0000, v15, OS_LOG_TYPE_DEBUG, "%{public}@Next resident commissioning attempt will happen in %lu seconds", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v13);
    v17 = dispatch_time(0, (uint64_t)(a3 * 1000000000.0));
    -[HMDHome workQueue](v14, "workQueue");
    v18 = objc_claimAutoreleasedReturnValue();
    dispatch_after(v17, v18, v11);

  }
  objc_destroyWeak(v20);
  objc_destroyWeak(&location);
}

- (void)_startThreadNetworkOnCommissionerWithCompletion:(id)a3
{
  id v4;
  NSObject *v5;
  void *v6;
  HMDHome *v7;
  NSObject *v8;
  void *v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  id v13;
  _QWORD v14[5];
  id v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t (*v20)(uint64_t, uint64_t);
  void (*v21)(uint64_t);
  id v22;
  uint8_t buf[4];
  void *v24;
  __int16 v25;
  uint64_t v26;
  uint64_t v27;

  v27 = *MEMORY[0x24BDAC8D0];
  v4 = a3;
  -[HMDHome workQueue](self, "workQueue");
  v5 = objc_claimAutoreleasedReturnValue();
  dispatch_assert_queue_V2(v5);

  v17 = 0;
  v18 = &v17;
  v19 = 0x3032000000;
  v20 = __Block_byref_object_copy__20751;
  v21 = __Block_byref_object_dispose__20752;
  -[HMDHome threadNetworkID](self, "threadNetworkID");
  v22 = (id)objc_claimAutoreleasedReturnValue();
  v6 = (void *)MEMORY[0x227676638]();
  v7 = self;
  HMFGetOSLogHandle();
  v8 = (id)objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    HMFGetLogIdentifier();
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v10 = v18[5];
    *(_DWORD *)buf = 138543618;
    v24 = v9;
    v25 = 2112;
    v26 = v10;
    _os_log_impl(&dword_2218F0000, v8, OS_LOG_TYPE_DEFAULT, "%{public}@Start thread network: %@", buf, 0x16u);

  }
  objc_autoreleasePoolPop(v6);
  +[HMDThreadResidentCommissioner sharedCommissioner](HMDThreadResidentCommissioner, "sharedCommissioner");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v12 = v18[5];
  v14[0] = MEMORY[0x24BDAC760];
  v14[1] = 3221225472;
  v14[2] = __88__HMDHome_ThreadResidentCommissioning___startThreadNetworkOnCommissionerWithCompletion___block_invoke;
  v14[3] = &unk_24E778218;
  v14[4] = v7;
  v13 = v4;
  v15 = v13;
  v16 = &v17;
  objc_msgSend(v11, "startThreadNetworkWithID:completion:", v12, v14);

  _Block_object_dispose(&v17, 8);
}

- (void)_startThreadNetworkOnCommissionerForIOSWithOperationalDataset:(id)a3 completion:(id)a4
{
  id v6;
  id v7;
  NSObject *v8;
  void *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  void *v13;
  HMDHome *v14;
  NSObject *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  uint64_t v21;
  id v22;
  id v23;
  _QWORD v24[5];
  id v25;
  id v26;
  uint8_t buf[4];
  void *v28;
  __int16 v29;
  void *v30;
  __int16 v31;
  id v32;
  __int16 v33;
  void *v34;
  uint64_t v35;

  v35 = *MEMORY[0x24BDAC8D0];
  v6 = a3;
  v7 = a4;
  -[HMDHome workQueue](self, "workQueue");
  v8 = objc_claimAutoreleasedReturnValue();
  dispatch_assert_queue_V2(v8);

  -[HMDHome homeManager](self, "homeManager");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "chipDataSource");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHome home](self, "home");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v12 = objc_msgSend(v10, "hasValidGeoOrPreferredNetworkForHome:", v11);

  v13 = (void *)MEMORY[0x227676638]();
  v14 = self;
  HMFGetOSLogHandle();
  v15 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHome threadNetworkID](v14, "threadNetworkID");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    HMFBooleanToString();
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138544130;
    v28 = v16;
    v29 = 2112;
    v30 = v17;
    v31 = 2112;
    v32 = v6;
    v33 = 2112;
    v34 = v18;
    _os_log_impl(&dword_2218F0000, v15, OS_LOG_TYPE_INFO, "%{public}@Start thread network with uuid: %@, credentials: %@, geoAvailable: %@", buf, 0x2Au);

  }
  objc_autoreleasePoolPop(v13);
  +[HMDThreadResidentCommissioner sharedCommissioner](HMDThreadResidentCommissioner, "sharedCommissioner");
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v19, "setGeoAvailable:", v12);
  -[HMDHome _registerForThreadNetworkEvents](v14, "_registerForThreadNetworkEvents");
  -[HMDHome threadNetworkID](v14, "threadNetworkID");
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  v21 = -[HMDHome isOwnerUser](v14, "isOwnerUser");
  v24[0] = MEMORY[0x24BDAC760];
  v24[1] = 3221225472;
  v24[2] = __113__HMDHome_ThreadResidentCommissioning___startThreadNetworkOnCommissionerForIOSWithOperationalDataset_completion___block_invoke;
  v24[3] = &unk_24E79AB68;
  v24[4] = v14;
  v25 = v6;
  v26 = v7;
  v22 = v7;
  v23 = v6;
  objc_msgSend(v19, "startThreadNetworkWithOperationalDataset:threadNetworkID:isOwnerUser:completion:", v23, v20, v21, v24);

}

- (void)_retrievePreferredNetworkWithCompletion:(id)a3
{
  id v4;
  void *v5;
  HMDHome *v6;
  NSObject *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  HMDHome *v12;
  NSObject *v13;
  void *v14;
  void *v15;
  void *v16;
  HMDHome *v17;
  NSObject *v18;
  void *v19;
  void *v20;
  void *v21;
  _QWORD v22[4];
  id v23;
  id v24;
  uint8_t buf[4];
  void *v26;
  __int16 v27;
  void *v28;
  __int16 v29;
  void *v30;
  uint64_t v31;

  v31 = *MEMORY[0x24BDAC8D0];
  v4 = a3;
  v5 = (void *)MEMORY[0x227676638]();
  v6 = self;
  HMFGetOSLogHandle();
  v7 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543362;
    v26 = v8;
    _os_log_impl(&dword_2218F0000, v7, OS_LOG_TYPE_INFO, "%{public}@Attempting to resolve request for Thread Network Credentials", buf, 0xCu);

  }
  objc_autoreleasePoolPop(v5);
  +[HMDThreadNetworkMetadataStore defaultStore](HMDThreadNetworkMetadataStore, "defaultStore");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  if (v9)
  {
    if (-[HMDHome isOwnerUser](v6, "isOwnerUser"))
    {
      objc_initWeak((id *)buf, v6);
      -[HMDHome threadOperationalDataset](v6, "threadOperationalDataset");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      v22[0] = MEMORY[0x24BDAC760];
      v22[1] = 3221225472;
      v22[2] = __80__HMDHome_ThreadResidentCommissioning___retrievePreferredNetworkWithCompletion___block_invoke;
      v22[3] = &unk_24E778240;
      objc_copyWeak(&v24, (id *)buf);
      v23 = v4;
      objc_msgSend(v9, "retrievePreferredNetwork:completion:", v10, v22);

      objc_destroyWeak(&v24);
      objc_destroyWeak((id *)buf);
    }
    else
    {
      v16 = (void *)MEMORY[0x227676638]();
      v17 = v6;
      HMFGetOSLogHandle();
      v18 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v19 = (void *)objc_claimAutoreleasedReturnValue();
        -[HMDHome threadOperationalDataset](v17, "threadOperationalDataset");
        v20 = (void *)objc_claimAutoreleasedReturnValue();
        -[HMDHome home](v17, "home");
        v21 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543874;
        v26 = v19;
        v27 = 2112;
        v28 = v20;
        v29 = 2112;
        v30 = v21;
        _os_log_impl(&dword_2218F0000, v18, OS_LOG_TYPE_INFO, "%{public}@Shared user -  always use cached threadOperationalDataset %@ for home %@", buf, 0x20u);

      }
      objc_autoreleasePoolPop(v16);
      (*((void (**)(id, _QWORD))v4 + 2))(v4, 0);
    }
  }
  else
  {
    v11 = (void *)MEMORY[0x227676638]();
    v12 = v6;
    HMFGetOSLogHandle();
    v13 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v26 = v14;
      _os_log_impl(&dword_2218F0000, v13, OS_LOG_TYPE_ERROR, "%{public}@No thread network metadata store", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v11);
    objc_msgSend(MEMORY[0x24BDD1540], "hmErrorWithCode:", 58);
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    (*((void (**)(id, void *))v4 + 2))(v4, v15);

  }
}

- (BOOL)_overrideStartThreadTimeout
{
  return 0;
}

- (void)_startThreadNetworkOnIOSWithCompletion:(id)a3
{
  id v4;
  uint64_t v5;
  id v6;
  void *v7;
  dispatch_time_t v8;
  NSObject *v9;
  id v10;
  _QWORD v11[4];
  id v12;
  id v13;
  _QWORD block[4];
  id v15;
  _QWORD aBlock[4];
  id v17;
  _QWORD *v18;
  id v19;
  id location;
  _QWORD v21[3];
  char v22;

  v4 = a3;
  v21[0] = 0;
  v21[1] = v21;
  v21[2] = 0x2020000000;
  v22 = 0;
  objc_initWeak(&location, self);
  v5 = MEMORY[0x24BDAC760];
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 3221225472;
  aBlock[2] = __79__HMDHome_ThreadResidentCommissioning___startThreadNetworkOnIOSWithCompletion___block_invoke;
  aBlock[3] = &unk_24E778268;
  objc_copyWeak(&v19, &location);
  v18 = v21;
  v6 = v4;
  v17 = v6;
  v7 = _Block_copy(aBlock);
  if (!-[HMDHome _overrideStartThreadTimeout](self, "_overrideStartThreadTimeout"))
  {
    v8 = dispatch_time(0, 20000000000);
    -[HMDHome workQueue](self, "workQueue");
    v9 = objc_claimAutoreleasedReturnValue();
    block[0] = v5;
    block[1] = 3221225472;
    block[2] = __79__HMDHome_ThreadResidentCommissioning___startThreadNetworkOnIOSWithCompletion___block_invoke_2;
    block[3] = &unk_24E799CC8;
    v15 = v7;
    dispatch_after(v8, v9, block);

  }
  v11[0] = v5;
  v11[1] = 3221225472;
  v11[2] = __79__HMDHome_ThreadResidentCommissioning___startThreadNetworkOnIOSWithCompletion___block_invoke_3;
  v11[3] = &unk_24E797698;
  objc_copyWeak(&v13, &location);
  v10 = v7;
  v12 = v10;
  -[HMDHome _retrievePreferredNetworkWithCompletion:](self, "_retrievePreferredNetworkWithCompletion:", v11);

  objc_destroyWeak(&v13);
  objc_destroyWeak(&v19);
  objc_destroyWeak(&location);
  _Block_object_dispose(v21, 8);

}

- (void)_startThreadNetworkWithCompletion:(id)a3
{
  void (**v4)(id, void *);
  NSObject *v5;
  void *v6;
  HMDHome *v7;
  NSObject *v8;
  void *v9;
  void *v10;
  int v11;
  void *v12;
  __int16 v13;
  HMDHome *v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v4 = (void (**)(id, void *))a3;
  -[HMDHome workQueue](self, "workQueue");
  v5 = objc_claimAutoreleasedReturnValue();
  dispatch_assert_queue_V2(v5);

  if ((isFeatureMatteriPhoneOnlyPairingControlForThreadEnabled() & 1) != 0)
  {
    v6 = (void *)MEMORY[0x227676638]();
    v7 = self;
    HMFGetOSLogHandle();
    v8 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      v11 = 138543618;
      v12 = v9;
      v13 = 2112;
      v14 = v7;
      _os_log_impl(&dword_2218F0000, v8, OS_LOG_TYPE_INFO, "%{public}@Thread start starting for home %@", (uint8_t *)&v11, 0x16u);

    }
    objc_autoreleasePoolPop(v6);
    -[HMDHome setStartThreadNetworkInProgress:](v7, "setStartThreadNetworkInProgress:", 1);
    -[HMDHome setThreadNetworkShouldRestartOnNetworkChange:](v7, "setThreadNetworkShouldRestartOnNetworkChange:", 1);
    -[HMDHome _startThreadNetworkOnIOSWithCompletion:](v7, "_startThreadNetworkOnIOSWithCompletion:", v4);
  }
  else
  {
    objc_msgSend(MEMORY[0x24BDD1540], "hmErrorWithCode:", 48);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v4[2](v4, v10);

  }
}

- (void)stopThreadNetwork:(BOOL)a3
{
  -[HMDHome stopThreadNetworkWithCompletion:completion:](self, "stopThreadNetworkWithCompletion:completion:", a3, 0);
}

- (void)stopThreadNetworkWithCompletion:(BOOL)a3 completion:(id)a4
{
  id v5;
  NSObject *v6;
  id v7;
  _QWORD v8[5];
  id v9;

  v5 = a4;
  -[HMDHome workQueue](self, "workQueue");
  v6 = objc_claimAutoreleasedReturnValue();
  v8[0] = MEMORY[0x24BDAC760];
  v8[1] = 3221225472;
  v8[2] = __83__HMDHome_ThreadResidentCommissioning__stopThreadNetworkWithCompletion_completion___block_invoke;
  v8[3] = &unk_24E79C2B8;
  v8[4] = self;
  v9 = v5;
  v7 = v5;
  dispatch_async(v6, v8);

}

- (void)_stopThreadNetworkWithCompletion:(id)a3
{
  id v4;
  NSObject *v5;
  void *v6;
  id v7;
  _QWORD v8[5];
  id v9;

  v4 = a3;
  -[HMDHome workQueue](self, "workQueue");
  v5 = objc_claimAutoreleasedReturnValue();
  dispatch_assert_queue_V2(v5);

  -[HMDHome setThreadNetworkShouldRestartOnNetworkChange:](self, "setThreadNetworkShouldRestartOnNetworkChange:", 0);
  -[HMDHome _incrementCurrentSequenceNumber](self, "_incrementCurrentSequenceNumber");
  +[HMDThreadResidentCommissioner sharedCommissioner](HMDThreadResidentCommissioner, "sharedCommissioner");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v8[0] = MEMORY[0x24BDAC760];
  v8[1] = 3221225472;
  v8[2] = __73__HMDHome_ThreadResidentCommissioning___stopThreadNetworkWithCompletion___block_invoke;
  v8[3] = &unk_24E79B3A0;
  v8[4] = self;
  v9 = v4;
  v7 = v4;
  objc_msgSend(v6, "stopThreadNetworkWithCompletion:", v8);

}

- (void)_unjoinThreadNetworkWithCompletion:(id)a3
{
  id v4;
  NSObject *v5;
  void *v6;
  HMDHome *v7;
  NSObject *v8;
  void *v9;
  void *v10;
  id v11;
  _QWORD v12[5];
  id v13;
  uint8_t buf[4];
  void *v15;
  __int16 v16;
  void *v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  v4 = a3;
  -[HMDHome workQueue](self, "workQueue");
  v5 = objc_claimAutoreleasedReturnValue();
  dispatch_assert_queue_V2(v5);

  v6 = (void *)MEMORY[0x227676638]();
  v7 = self;
  HMFGetOSLogHandle();
  v8 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    HMFGetLogIdentifier();
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHome threadNetworkID](v7, "threadNetworkID");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543618;
    v15 = v9;
    v16 = 2112;
    v17 = v10;
    _os_log_impl(&dword_2218F0000, v8, OS_LOG_TYPE_DEFAULT, "%{public}@Request to unjoin previous thread network: %@", buf, 0x16u);

  }
  objc_autoreleasePoolPop(v6);
  -[HMDHome setThreadNetworkID:](v7, "setThreadNetworkID:", CFSTR("770E5B2E-0BAD-0BAD-0BAD-EE86505EFF8F"));
  v12[0] = MEMORY[0x24BDAC760];
  v12[1] = 3221225472;
  v12[2] = __75__HMDHome_ThreadResidentCommissioning___unjoinThreadNetworkWithCompletion___block_invoke;
  v12[3] = &unk_24E79B3A0;
  v12[4] = v7;
  v13 = v4;
  v11 = v4;
  -[HMDHome _stopThreadNetworkWithCompletion:](v7, "_stopThreadNetworkWithCompletion:", v12);

}

- (void)connectToThreadAccessoryWithExtendedMACAddress:(id)a3 completion:(id)a4
{
  id v5;
  id v6;
  void *v7;
  char v8;
  void *v9;
  _QWORD v10[4];
  id v11;

  v5 = a3;
  v6 = a4;
  if (isFeatureMatteriPhoneOnlyPairingControlForThreadEnabled()
    && (+[HMDDeviceCapabilities deviceCapabilities](HMDDeviceCapabilities, "deviceCapabilities"),
        v7 = (void *)objc_claimAutoreleasedReturnValue(),
        v8 = objc_msgSend(v7, "supportsThreadService"),
        v7,
        (v8 & 1) != 0))
  {
    +[HMDThreadResidentCommissioner sharedCommissioner](HMDThreadResidentCommissioner, "sharedCommissioner");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v10[0] = MEMORY[0x24BDAC760];
    v10[1] = 3221225472;
    v10[2] = __98__HMDHome_ThreadResidentCommissioning__connectToThreadAccessoryWithExtendedMACAddress_completion___block_invoke;
    v10[3] = &unk_24E79A050;
    v11 = v6;
    objc_msgSend(v9, "connectToThreadAccessoryWithExtendedMACAddress:completion:", v5, v10);

  }
  else
  {
    objc_msgSend(MEMORY[0x24BDD1540], "hmErrorWithCode:", 48);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    (*((void (**)(id, void *))v6 + 2))(v6, v9);
  }

}

- (void)onThreadNetworkConnectionStateChange:(int64_t)a3
{
  void *v5;
  HMDHome *v6;
  NSObject *v7;
  void *v8;
  void *v9;
  int v10;
  void *v11;
  __int16 v12;
  int64_t v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  if (-[HMDHome threadNetworkConnectionState](self, "threadNetworkConnectionState") != a3)
  {
    v5 = (void *)MEMORY[0x227676638]();
    v6 = self;
    HMFGetOSLogHandle();
    v7 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      v10 = 138543618;
      v11 = v8;
      v12 = 2048;
      v13 = a3;
      _os_log_impl(&dword_2218F0000, v7, OS_LOG_TYPE_INFO, "%{public}@Thread network connection state changed to %ld", (uint8_t *)&v10, 0x16u);

    }
    objc_autoreleasePoolPop(v5);
    -[HMDHome setThreadNetworkConnectionState:](v6, "setThreadNetworkConnectionState:", a3);
    objc_msgSend(MEMORY[0x24BDD16D0], "defaultCenter");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "postNotificationName:object:", CFSTR("HMDHomeThreadNetworkConnectionStateChangeNotification"), v6);

  }
}

- (void)onThreadNetworkNodeTypeStateChange:(int64_t)a3
{
  void *v5;
  HMDHome *v6;
  NSObject *v7;
  void *v8;
  void *v9;
  int v10;
  void *v11;
  __int16 v12;
  int64_t v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  if (-[HMDHome threadNetworkNodeType](self, "threadNetworkNodeType") != a3)
  {
    v5 = (void *)MEMORY[0x227676638]();
    v6 = self;
    HMFGetOSLogHandle();
    v7 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      v10 = 138543618;
      v11 = v8;
      v12 = 2048;
      v13 = a3;
      _os_log_impl(&dword_2218F0000, v7, OS_LOG_TYPE_INFO, "%{public}@Thread network node type changed to %ld", (uint8_t *)&v10, 0x16u);

    }
    objc_autoreleasePoolPop(v5);
    -[HMDHome setThreadNetworkNodeType:](v6, "setThreadNetworkNodeType:", a3);
    objc_msgSend(MEMORY[0x24BDD16D0], "defaultCenter");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "postNotificationName:object:", CFSTR("HMDHomeThreadNetworkNodeTypeChangeNotification"), v6);

  }
}

- (void)onThreadNetworkWakeOnDeviceConnectionStateChange:(id)a3
{
  void *v3;
  id v4;
  id v5;

  v3 = (void *)MEMORY[0x24BDD16D0];
  v4 = a3;
  objc_msgSend(v3, "defaultCenter");
  v5 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "postNotificationName:object:", CFSTR("HMDHomeThreadNetworkWakeOnConnectionStateChangeNotification"), v4);

}

- (void)onThreadNetworkPeripheralDeviceNodeTypeChange:(id)a3
{
  void *v3;
  id v4;
  id v5;

  v3 = (void *)MEMORY[0x24BDD16D0];
  v4 = a3;
  objc_msgSend(v3, "defaultCenter");
  v5 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "postNotificationName:object:", CFSTR("HMDHomeThreadNetworkPeripheralDeviceNodeTypeChangedNotification"), v4);

}

- (void)onThreadNetworkCallStateChange:(BOOL)a3
{
  void *v4;
  HMDHome *v5;
  NSObject *v6;
  void *v7;
  int v8;
  void *v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  if (!a3 && -[HMDHome threadNetworkShouldRestartOnNetworkChange](self, "threadNetworkShouldRestartOnNetworkChange"))
  {
    v4 = (void *)MEMORY[0x227676638]();
    v5 = self;
    HMFGetOSLogHandle();
    v6 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      v8 = 138543362;
      v9 = v7;
      _os_log_impl(&dword_2218F0000, v6, OS_LOG_TYPE_INFO, "%{public}@Restarting thread network after call end", (uint8_t *)&v8, 0xCu);

    }
    objc_autoreleasePoolPop(v4);
    -[HMDHome startThreadNetwork:](v5, "startThreadNetwork:", 1);
  }
}

- (void)startThreadAccessoryPairingWithExtendedMACAddress:(id)a3 isWedDevice:(BOOL)a4 completion:(id)a5
{
  _BOOL8 v6;
  id v7;
  id v8;
  void *v9;
  char v10;
  void *v11;
  void *v12;
  _QWORD v13[4];
  id v14;

  v6 = a4;
  v7 = a3;
  v8 = a5;
  if (isFeatureMatteriPhoneOnlyPairingControlForThreadEnabled()
    && (+[HMDDeviceCapabilities deviceCapabilities](HMDDeviceCapabilities, "deviceCapabilities"),
        v9 = (void *)objc_claimAutoreleasedReturnValue(),
        v10 = objc_msgSend(v9, "supportsThreadService"),
        v9,
        (v10 & 1) != 0))
  {
    +[HMDThreadResidentCommissioner sharedCommissioner](HMDThreadResidentCommissioner, "sharedCommissioner");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v13[0] = MEMORY[0x24BDAC760];
    v13[1] = 3221225472;
    v13[2] = __113__HMDHome_ThreadResidentCommissioning__startThreadAccessoryPairingWithExtendedMACAddress_isWedDevice_completion___block_invoke;
    v13[3] = &unk_24E79A050;
    v14 = v8;
    objc_msgSend(v11, "startThreadAccessoryPairingWithExtendedMACAddress:isWedDevice:completion:", v7, v6, v13);

  }
  else
  {
    objc_msgSend(MEMORY[0x24BDD1540], "hmErrorWithCode:", 48);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    (*((void (**)(id, void *))v8 + 2))(v8, v12);

  }
}

- (void)stopThreadAccessoryPairingWithCompletion:(id)a3
{
  id v3;
  void *v4;
  char v5;
  void *v6;
  _QWORD v7[4];
  id v8;

  v3 = a3;
  if (isFeatureMatteriPhoneOnlyPairingControlForThreadEnabled()
    && (+[HMDDeviceCapabilities deviceCapabilities](HMDDeviceCapabilities, "deviceCapabilities"),
        v4 = (void *)objc_claimAutoreleasedReturnValue(),
        v5 = objc_msgSend(v4, "supportsThreadService"),
        v4,
        (v5 & 1) != 0))
  {
    +[HMDThreadResidentCommissioner sharedCommissioner](HMDThreadResidentCommissioner, "sharedCommissioner");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v7[0] = MEMORY[0x24BDAC760];
    v7[1] = 3221225472;
    v7[2] = __81__HMDHome_ThreadResidentCommissioning__stopThreadAccessoryPairingWithCompletion___block_invoke;
    v7[3] = &unk_24E79A050;
    v8 = v3;
    objc_msgSend(v6, "stopThreadAccessoryPairingWithCompletion:", v7);

  }
  else
  {
    objc_msgSend(MEMORY[0x24BDD1540], "hmErrorWithCode:", 48);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    (*((void (**)(id, void *))v3 + 2))(v3, v6);
  }

}

- (void)startThreadAccessoryFirmwareUpdateWithExtendedMACAddress:(id)a3 isWedDevice:(BOOL)a4 completion:(id)a5
{
  _BOOL8 v6;
  id v7;
  id v8;
  void *v9;
  char v10;
  void *v11;
  void *v12;
  _QWORD v13[4];
  id v14;

  v6 = a4;
  v7 = a3;
  v8 = a5;
  if (isFeatureMatteriPhoneOnlyPairingControlForThreadEnabled()
    && (+[HMDDeviceCapabilities deviceCapabilities](HMDDeviceCapabilities, "deviceCapabilities"),
        v9 = (void *)objc_claimAutoreleasedReturnValue(),
        v10 = objc_msgSend(v9, "supportsThreadService"),
        v9,
        (v10 & 1) != 0))
  {
    +[HMDThreadResidentCommissioner sharedCommissioner](HMDThreadResidentCommissioner, "sharedCommissioner");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v13[0] = MEMORY[0x24BDAC760];
    v13[1] = 3221225472;
    v13[2] = __120__HMDHome_ThreadResidentCommissioning__startThreadAccessoryFirmwareUpdateWithExtendedMACAddress_isWedDevice_completion___block_invoke;
    v13[3] = &unk_24E79A050;
    v14 = v8;
    objc_msgSend(v11, "startThreadAccessoryFirmwareUpdateWithExtendedMACAddress:isWedDevice:completion:", v7, v6, v13);

  }
  else
  {
    objc_msgSend(MEMORY[0x24BDD1540], "hmErrorWithCode:", 48);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    (*((void (**)(id, void *))v8 + 2))(v8, v12);

  }
}

- (void)stopThreadAccessoryFirmwareUpdateWithCompletion:(id)a3
{
  id v3;
  void *v4;
  char v5;
  void *v6;
  _QWORD v7[4];
  id v8;

  v3 = a3;
  if (isFeatureMatteriPhoneOnlyPairingControlForThreadEnabled()
    && (+[HMDDeviceCapabilities deviceCapabilities](HMDDeviceCapabilities, "deviceCapabilities"),
        v4 = (void *)objc_claimAutoreleasedReturnValue(),
        v5 = objc_msgSend(v4, "supportsThreadService"),
        v4,
        (v5 & 1) != 0))
  {
    +[HMDThreadResidentCommissioner sharedCommissioner](HMDThreadResidentCommissioner, "sharedCommissioner");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v7[0] = MEMORY[0x24BDAC760];
    v7[1] = 3221225472;
    v7[2] = __88__HMDHome_ThreadResidentCommissioning__stopThreadAccessoryFirmwareUpdateWithCompletion___block_invoke;
    v7[3] = &unk_24E79A050;
    v8 = v3;
    objc_msgSend(v6, "stopThreadAccessoryFirmwareUpdateWithCompletion:", v7);

  }
  else
  {
    objc_msgSend(MEMORY[0x24BDD1540], "hmErrorWithCode:", 48);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    (*((void (**)(id, void *))v3 + 2))(v3, v6);
  }

}

- (void)updateThreadOperationalDatasetWithHomeModel:(id)a3 message:(id)a4
{
  id v6;
  id v7;
  void *v8;
  void *v9;
  HMDHome *v10;
  NSObject *v11;
  void *v12;
  void *v13;
  int v14;
  void *v15;
  __int16 v16;
  uint64_t v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  v6 = a3;
  v7 = a4;
  if (isFeatureMatteriPhoneOnlyPairingControlEnabled())
  {
    objc_msgSend(v6, "threadOperationalDataset");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHome setThreadOperationalDataset:](self, "setThreadOperationalDataset:", v8);

    v9 = (void *)MEMORY[0x227676638]();
    v10 = self;
    HMFGetOSLogHandle();
    v11 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      -[HMDHome threadOperationalDataset](v10, "threadOperationalDataset");
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      v14 = 138543618;
      v15 = v12;
      v16 = 2048;
      v17 = objc_msgSend(v13, "length");
      _os_log_impl(&dword_2218F0000, v11, OS_LOG_TYPE_INFO, "%{public}@Updated thread operational dataset, Length: %lu", (uint8_t *)&v14, 0x16u);

    }
    objc_autoreleasePoolPop(v9);
  }

}

- (void)saveAndSyncWithThreadOperationalDataset:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  int v10;
  void *v11;
  HMDHome *v12;
  NSObject *v13;
  void *v14;
  const char *v15;
  NSObject *v16;
  uint32_t v17;
  void *v18;
  HMDHome *v19;
  NSObject *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  _QWORD v26[5];
  uint8_t buf[4];
  void *v28;
  __int16 v29;
  void *v30;
  uint64_t v31;

  v31 = *MEMORY[0x24BDAC8D0];
  v4 = a3;
  -[HMDHome home](self, "home");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = v5;
  if (v4)
  {
    objc_msgSend(v5, "residentDeviceManager");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "residentDevices");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v8, "count")
      && !-[HMDHome isCurrentDeviceConfirmedPrimaryResident](self, "isCurrentDeviceConfirmedPrimaryResident"))
    {
      v11 = (void *)MEMORY[0x227676638]();
      v12 = self;
      HMFGetOSLogHandle();
      v13 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v14 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        v28 = v14;
        v29 = 2112;
        v30 = v6;
        v15 = "%{public}@There are residents for home: %@, but we are not the primary. Not saving ThreadOperationalDataset.";
        v16 = v13;
        v17 = 22;
        goto LABEL_13;
      }
    }
    else
    {
      -[HMDHome threadOperationalDataset](self, "threadOperationalDataset");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      v10 = HMFEqualObjects();

      if (!v10)
      {
        -[HMDHome emptyModelObjectWithChangeType:](self, "emptyModelObjectWithChangeType:", 2);
        v22 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v22, "setThreadOperationalDataset:", v4);
        -[HMDHome setThreadOperationalDataset:](self, "setThreadOperationalDataset:", v4);
        -[HMDHome backingStore](self, "backingStore");
        v23 = (void *)objc_claimAutoreleasedReturnValue();
        +[HMDBackingStoreTransactionOptions defaultXPCOptions](HMDBackingStoreTransactionOptions, "defaultXPCOptions");
        v24 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v23, "transaction:options:", CFSTR("Update thread operational dataset"), v24);
        v25 = (void *)objc_claimAutoreleasedReturnValue();

        objc_msgSend(v25, "add:", v22);
        v26[0] = MEMORY[0x24BDAC760];
        v26[1] = 3221225472;
        v26[2] = __80__HMDHome_ThreadResidentCommissioning__saveAndSyncWithThreadOperationalDataset___block_invoke;
        v26[3] = &unk_24E79BD80;
        v26[4] = self;
        objc_msgSend(v25, "run:", v26);
        -[HMDHome setThreadOperationalDataset:](self, "setThreadOperationalDataset:", v4);

LABEL_15:
        goto LABEL_16;
      }
      v11 = (void *)MEMORY[0x227676638]();
      v12 = self;
      HMFGetOSLogHandle();
      v13 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v14 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543362;
        v28 = v14;
        v15 = "%{public}@Thread operational dataset has not changed, ignoring request to save and sync";
        v16 = v13;
        v17 = 12;
LABEL_13:
        _os_log_impl(&dword_2218F0000, v16, OS_LOG_TYPE_INFO, v15, buf, v17);

      }
    }

    objc_autoreleasePoolPop(v11);
    goto LABEL_15;
  }
  v18 = (void *)MEMORY[0x227676638]();
  v19 = self;
  HMFGetOSLogHandle();
  v20 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
  {
    HMFGetLogIdentifier();
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543618;
    v28 = v21;
    v29 = 2112;
    v30 = v6;
    _os_log_impl(&dword_2218F0000, v20, OS_LOG_TYPE_ERROR, "%{public}@threadOperationalDataset is null for home %@, not saving...", buf, 0x16u);

  }
  objc_autoreleasePoolPop(v18);
LABEL_16:

}

- (void)_updateThreadNetworkWithModel:(id)a3 message:(id)a4
{
  id v6;
  id v7;
  void *v8;
  int v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  HMDHome *v14;
  NSObject *v15;
  void *v16;
  void *v17;
  void *v18;
  uint64_t v19;
  void *v20;
  HMDHome *v21;
  NSObject *v22;
  void *v23;
  void *v24;
  int v25;
  void *v26;
  __int16 v27;
  void *v28;
  __int16 v29;
  void *v30;
  uint64_t v31;

  v31 = *MEMORY[0x24BDAC8D0];
  v6 = a3;
  v7 = a4;
  objc_msgSend(v6, "setProperties");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = objc_msgSend(v8, "containsObject:", CFSTR("threadNetworkID"));

  if (!v9)
  {
LABEL_13:
    objc_msgSend(v7, "respondWithPayload:", 0);
    goto LABEL_14;
  }
  -[HMDHome unfilteredThreadNetworkID](self, "unfilteredThreadNetworkID");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "threadNetworkID");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHome threadNetworkID](self, "threadNetworkID");
  v12 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v12)
  {
    objc_msgSend(v7, "transactionResult");
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    v19 = objc_msgSend(v18, "source");

    if (v19 == 2 && v11 && -[HMDHome attemptToUpdateThreadNetworkID:](self, "attemptToUpdateThreadNetworkID:", v11))
    {
      v20 = (void *)MEMORY[0x227676638]();
      v21 = self;
      HMFGetOSLogHandle();
      v22 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
      {
        HMFGetLogIdentifier();
        v23 = (void *)objc_claimAutoreleasedReturnValue();
        v25 = 138543874;
        v26 = v23;
        v27 = 2112;
        v28 = v10;
        v29 = 2112;
        v30 = v11;
        _os_log_impl(&dword_2218F0000, v22, OS_LOG_TYPE_DEFAULT, "%{public}@threadNetworkID updated from cloud: %@ -> %@", (uint8_t *)&v25, 0x20u);

      }
      objc_autoreleasePoolPop(v20);
      -[HMDHome startThreadNetwork:](v21, "startThreadNetwork:", 0);
    }
    objc_msgSend(v7, "transactionResult");
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v24, "markChanged");

    goto LABEL_13;
  }
  v13 = (void *)MEMORY[0x227676638]();
  v14 = self;
  HMFGetOSLogHandle();
  v15 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
  {
    HMFGetLogIdentifier();
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    v25 = 138543874;
    v26 = v16;
    v27 = 2112;
    v28 = v10;
    v29 = 2112;
    v30 = v11;
    _os_log_impl(&dword_2218F0000, v15, OS_LOG_TYPE_DEFAULT, "%{public}@Ignoring threadNetworkID update from cloud: %@ -> %@", (uint8_t *)&v25, 0x20u);

  }
  objc_autoreleasePoolPop(v13);
  objc_msgSend(v7, "transactionResult");
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v17, "markChanged");

  objc_msgSend(v7, "respondWithPayload:", 0);
LABEL_14:

}

- (void)_notifyThreadLayerOfResidentChange
{
  NSObject *v3;
  void *v4;
  void *v5;
  int v6;
  void *v7;
  void *v8;
  uint64_t v9;
  void *v10;
  void *v11;
  void *v12;

  -[HMDHome workQueue](self, "workQueue");
  v3 = objc_claimAutoreleasedReturnValue();
  dispatch_assert_queue_V2(v3);

  -[HMDHome home](self, "home");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = v4;
  if (v4)
  {
    v12 = v4;
    v6 = objc_msgSend(v4, "isCurrentDeviceAvailableResident");
    v5 = v12;
    if (v6)
    {
      +[HMDThreadResidentCommissioner sharedCommissioner](HMDThreadResidentCommissioner, "sharedCommissioner");
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v12, "primaryResident");
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      v9 = objc_msgSend(v8, "isCurrentDevice");
      objc_msgSend(v12, "primaryResident");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v10, "capabilities");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v7, "informThreadLayerOfResidentChange:primaryResidentIsThreadCapable:", v9, objc_msgSend(v11, "supportsThreadBorderRouter"));

      v5 = v12;
    }
  }

}

void __80__HMDHome_ThreadResidentCommissioning__saveAndSyncWithThreadOperationalDataset___block_invoke(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  NSObject *v6;
  NSObject *v7;
  void *v8;
  void *v9;
  void *v10;
  int v11;
  void *v12;
  __int16 v13;
  uint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v3 = a2;
  v4 = (void *)MEMORY[0x227676638]();
  v5 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v6 = objc_claimAutoreleasedReturnValue();
  v7 = v6;
  if (v3)
  {
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      v11 = 138543618;
      v12 = v8;
      v13 = 2112;
      v14 = (uint64_t)v3;
      _os_log_impl(&dword_2218F0000, v7, OS_LOG_TYPE_ERROR, "%{public}@Failed to sync thread operational dataset, error: %@", (uint8_t *)&v11, 0x16u);

    }
  }
  else if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 32), "threadOperationalDataset");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v11 = 138543618;
    v12 = v9;
    v13 = 2048;
    v14 = objc_msgSend(v10, "length");
    _os_log_impl(&dword_2218F0000, v7, OS_LOG_TYPE_INFO, "%{public}@Successfully sync'ed thread operational dataset, Length: %lu", (uint8_t *)&v11, 0x16u);

  }
  objc_autoreleasePoolPop(v4);

}

uint64_t __88__HMDHome_ThreadResidentCommissioning__stopThreadAccessoryFirmwareUpdateWithCompletion___block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t __120__HMDHome_ThreadResidentCommissioning__startThreadAccessoryFirmwareUpdateWithExtendedMACAddress_isWedDevice_completion___block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t __81__HMDHome_ThreadResidentCommissioning__stopThreadAccessoryPairingWithCompletion___block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t __113__HMDHome_ThreadResidentCommissioning__startThreadAccessoryPairingWithExtendedMACAddress_isWedDevice_completion___block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t __98__HMDHome_ThreadResidentCommissioning__connectToThreadAccessoryWithExtendedMACAddress_completion___block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void __75__HMDHome_ThreadResidentCommissioning___unjoinThreadNetworkWithCompletion___block_invoke(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  NSObject *v6;
  NSObject *v7;
  void *v8;
  const char *v9;
  NSObject *v10;
  os_log_type_t v11;
  uint32_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  void *v16;
  __int16 v17;
  id v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v3 = a2;
  v4 = (void *)MEMORY[0x227676638]();
  v5 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v6 = objc_claimAutoreleasedReturnValue();
  v7 = v6;
  if (v3)
  {
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      v15 = 138543618;
      v16 = v8;
      v17 = 2112;
      v18 = v3;
      v9 = "%{public}@Failed to leave previous thread network: %@";
      v10 = v7;
      v11 = OS_LOG_TYPE_ERROR;
      v12 = 22;
LABEL_6:
      _os_log_impl(&dword_2218F0000, v10, v11, v9, (uint8_t *)&v15, v12);

    }
  }
  else if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    HMFGetLogIdentifier();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v15 = 138543362;
    v16 = v8;
    v9 = "%{public}@Successfully left previous thread network";
    v10 = v7;
    v11 = OS_LOG_TYPE_DEFAULT;
    v12 = 12;
    goto LABEL_6;
  }

  objc_autoreleasePoolPop(v4);
  (*(void (**)(_QWORD, id, uint64_t, uint64_t))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), v3, v13, v14);

}

void __73__HMDHome_ThreadResidentCommissioning___stopThreadNetworkWithCompletion___block_invoke(uint64_t a1, void *a2)
{
  void *v3;
  id v4;

  v3 = *(void **)(a1 + 32);
  v4 = a2;
  objc_msgSend(v3, "_unregisterForThreadNetworkEvents");
  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();

}

void __83__HMDHome_ThreadResidentCommissioning__stopThreadNetworkWithCompletion_completion___block_invoke(uint64_t a1)
{
  void *v2;
  id v3;
  NSObject *v4;
  void *v5;
  void *v6;
  void *v7;
  _QWORD v8[4];
  id v9;
  id v10;
  uint8_t buf[4];
  void *v12;
  __int16 v13;
  void *v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v2 = (void *)MEMORY[0x227676638](objc_msgSend(*(id *)(a1 + 32), "setStartThreadNetworkInProgress:", 0));
  v3 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    HMFGetLogIdentifier();
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 32), "threadNetworkID");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543618;
    v12 = v5;
    v13 = 2112;
    v14 = v6;
    _os_log_impl(&dword_2218F0000, v4, OS_LOG_TYPE_DEFAULT, "%{public}@Stop thread network: %@", buf, 0x16u);

  }
  objc_autoreleasePoolPop(v2);
  v8[0] = MEMORY[0x24BDAC760];
  v8[1] = 3221225472;
  v8[2] = __83__HMDHome_ThreadResidentCommissioning__stopThreadNetworkWithCompletion_completion___block_invoke_46;
  v8[3] = &unk_24E79B3A0;
  v7 = *(void **)(a1 + 40);
  v9 = *(id *)(a1 + 32);
  v10 = v7;
  objc_msgSend(v9, "_stopThreadNetworkWithCompletion:", v8);

}

void __83__HMDHome_ThreadResidentCommissioning__stopThreadNetworkWithCompletion_completion___block_invoke_46(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  NSObject *v6;
  NSObject *v7;
  void *v8;
  const char *v9;
  NSObject *v10;
  os_log_type_t v11;
  uint32_t v12;
  void *v13;
  void *v14;
  int v15;
  void *v16;
  __int16 v17;
  id v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v3 = a2;
  v4 = (void *)MEMORY[0x227676638]();
  v5 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v6 = objc_claimAutoreleasedReturnValue();
  v7 = v6;
  if (v3)
  {
    if (!os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
      goto LABEL_7;
    HMFGetLogIdentifier();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v15 = 138543618;
    v16 = v8;
    v17 = 2112;
    v18 = v3;
    v9 = "%{public}@Failed to stop thread network: %@";
    v10 = v7;
    v11 = OS_LOG_TYPE_ERROR;
    v12 = 22;
  }
  else
  {
    if (!os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
      goto LABEL_7;
    HMFGetLogIdentifier();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v15 = 138543362;
    v16 = v8;
    v9 = "%{public}@Successfully stopped thread network";
    v10 = v7;
    v11 = OS_LOG_TYPE_DEFAULT;
    v12 = 12;
  }
  _os_log_impl(&dword_2218F0000, v10, v11, v9, (uint8_t *)&v15, v12);

LABEL_7:
  objc_autoreleasePoolPop(v4);
  v13 = _Block_copy(*(const void **)(a1 + 40));
  v14 = v13;
  if (v13)
    (*((void (**)(void *))v13 + 2))(v13);

}

void __79__HMDHome_ThreadResidentCommissioning___startThreadNetworkOnIOSWithCompletion___block_invoke(uint64_t a1, void *a2)
{
  id v3;
  id WeakRetained;
  void *v5;
  id v6;
  NSObject *v7;
  void *v8;
  void *v9;
  id v10;
  NSObject *v11;
  void *v12;
  NSObject *v13;
  void *v14;
  void *v15;
  id v16;
  NSObject *v17;
  void *v18;
  void *v19;
  void *v20;
  id v21;
  void *v22;
  id v23;
  NSObject *v24;
  void *v25;
  NSObject *v26;
  __int128 v27;
  _QWORD block[4];
  id v29;
  id v30;
  _QWORD v31[4];
  id v32;
  _QWORD v33[5];
  __int128 v34;
  uint8_t buf[4];
  void *v36;
  __int16 v37;
  id v38;
  __int16 v39;
  id v40;
  uint64_t v41;

  v41 = *MEMORY[0x24BDAC8D0];
  v3 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  if (v3)
  {
    if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24))
    {
      v5 = (void *)MEMORY[0x227676638]();
      v6 = WeakRetained;
      HMFGetOSLogHandle();
      v7 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543874;
        v36 = v8;
        v37 = 2112;
        v38 = v6;
        v39 = 2112;
        v40 = v3;
        _os_log_impl(&dword_2218F0000, v7, OS_LOG_TYPE_ERROR, "%{public}@Error starting thread for home %@, resetting state: %@", buf, 0x20u);

      }
      objc_autoreleasePoolPop(v5);
      if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24))
      {
        v9 = (void *)MEMORY[0x227676638]();
        v10 = v6;
        HMFGetOSLogHandle();
        v11 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
        {
          HMFGetLogIdentifier();
          v12 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543874;
          v36 = v12;
          v37 = 2112;
          v38 = v10;
          v39 = 2112;
          v40 = v3;
          _os_log_impl(&dword_2218F0000, v11, OS_LOG_TYPE_INFO, "%{public}@Thread start completed for home %@, error = %@", buf, 0x20u);

        }
        objc_autoreleasePoolPop(v9);
        objc_msgSend(v10, "setStartThreadNetworkInProgress:", 0);
        *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 1;
        objc_msgSend(v10, "workQueue");
        v13 = objc_claimAutoreleasedReturnValue();
        block[0] = MEMORY[0x24BDAC760];
        block[1] = 3221225472;
        block[2] = __79__HMDHome_ThreadResidentCommissioning___startThreadNetworkOnIOSWithCompletion___block_invoke_44;
        block[3] = &unk_24E79C2B8;
        v30 = *(id *)(a1 + 32);
        v29 = v3;
        dispatch_async(v13, block);

        v14 = v30;
LABEL_18:

      }
    }
  }
  else
  {
    if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24))
      goto LABEL_13;
    v15 = (void *)MEMORY[0x227676638]();
    v16 = WeakRetained;
    HMFGetOSLogHandle();
    v17 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v36 = v18;
      v37 = 2112;
      v38 = v16;
      _os_log_impl(&dword_2218F0000, v17, OS_LOG_TYPE_ERROR, "%{public}@Starting thread took longer than expected for home %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v15);
    if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24))
    {
LABEL_13:
      objc_msgSend(WeakRetained, "threadOperationalDataset");
      v19 = (void *)objc_claimAutoreleasedReturnValue();

      if (v19)
      {
        objc_msgSend(WeakRetained, "threadOperationalDataset");
        v20 = (void *)objc_claimAutoreleasedReturnValue();
        v33[0] = MEMORY[0x24BDAC760];
        v33[1] = 3221225472;
        v33[2] = __79__HMDHome_ThreadResidentCommissioning___startThreadNetworkOnIOSWithCompletion___block_invoke_41;
        v33[3] = &unk_24E78DF90;
        v33[4] = WeakRetained;
        v27 = *(_OWORD *)(a1 + 32);
        v21 = (id)v27;
        v34 = v27;
        objc_msgSend(WeakRetained, "_startThreadNetworkOnCommissionerForIOSWithOperationalDataset:completion:", v20, v33);

        v14 = (void *)v34;
      }
      else
      {
        v22 = (void *)MEMORY[0x227676638]();
        v23 = WeakRetained;
        HMFGetOSLogHandle();
        v24 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
        {
          HMFGetLogIdentifier();
          v25 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543618;
          v36 = v25;
          v37 = 2112;
          v38 = v23;
          _os_log_impl(&dword_2218F0000, v24, OS_LOG_TYPE_ERROR, "%{public}@Thread operational dataset not available. Cancelling thread start for home %@", buf, 0x16u);

        }
        objc_autoreleasePoolPop(v22);
        objc_msgSend(v23, "setStartThreadNetworkInProgress:", 0);
        *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 1;
        objc_msgSend(v23, "workQueue");
        v26 = objc_claimAutoreleasedReturnValue();
        v31[0] = MEMORY[0x24BDAC760];
        v31[1] = 3221225472;
        v31[2] = __79__HMDHome_ThreadResidentCommissioning___startThreadNetworkOnIOSWithCompletion___block_invoke_43;
        v31[3] = &unk_24E799CC8;
        v32 = *(id *)(a1 + 32);
        dispatch_async(v26, v31);

        v14 = v32;
      }
      goto LABEL_18;
    }
  }

}

void __79__HMDHome_ThreadResidentCommissioning___startThreadNetworkOnIOSWithCompletion___block_invoke_2(uint64_t a1)
{
  uint64_t v1;
  id v2;

  v1 = *(_QWORD *)(a1 + 32);
  objc_msgSend(MEMORY[0x24BDD1540], "hmErrorWithCode:", 8);
  v2 = (id)objc_claimAutoreleasedReturnValue();
  (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);

}

void __79__HMDHome_ThreadResidentCommissioning___startThreadNetworkOnIOSWithCompletion___block_invoke_3(uint64_t a1, void *a2)
{
  id v3;
  id WeakRetained;
  void *v5;
  void *v6;
  id v7;
  NSObject *v8;
  void *v9;
  void *v10;
  void *v11;
  id v12;
  NSObject *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  id v19;
  NSObject *v20;
  void *v21;
  NSObject *v22;
  uint64_t v23;
  void *v24;
  _QWORD v25[5];
  id v26;
  uint8_t buf[4];
  void *v28;
  __int16 v29;
  id v30;
  __int16 v31;
  void *v32;
  __int16 v33;
  void *v34;
  uint64_t v35;

  v35 = *MEMORY[0x24BDAC8D0];
  v3 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v5 = WeakRetained;
  if (v3 || !WeakRetained)
  {
    v6 = (void *)MEMORY[0x227676638]();
    v7 = v5;
    HMFGetOSLogHandle();
    v8 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v28 = v9;
      v29 = 2112;
      v30 = v3;
      _os_log_impl(&dword_2218F0000, v8, OS_LOG_TYPE_ERROR, "%{public}@Unable to retrieve preferred thread network: %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v6);
    objc_msgSend(v7, "threadOperationalDataset");
    v10 = (void *)objc_claimAutoreleasedReturnValue();

    if (!v10)
    {
      v23 = *(_QWORD *)(a1 + 32);
      objc_msgSend(MEMORY[0x24BDD1540], "hmErrorWithCode:", 23);
      v24 = (void *)objc_claimAutoreleasedReturnValue();
      (*(void (**)(uint64_t, void *))(v23 + 16))(v23, v24);

      goto LABEL_12;
    }
    v11 = (void *)MEMORY[0x227676638]();
    v12 = v7;
    HMFGetOSLogHandle();
    v13 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v12, "threadOperationalDataset");
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v12, "threadNetworkID");
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v12, "home");
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138544130;
      v28 = v14;
      v29 = 2112;
      v30 = v15;
      v31 = 2112;
      v32 = v16;
      v33 = 2112;
      v34 = v17;
      _os_log_impl(&dword_2218F0000, v13, OS_LOG_TYPE_INFO, "%{public}@Using cached threadOperationalDataset %@ and uuid %@ from home %@", buf, 0x2Au);

    }
    objc_autoreleasePoolPop(v11);
  }
  v18 = (void *)MEMORY[0x227676638]();
  v19 = v5;
  HMFGetOSLogHandle();
  v20 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v20, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543618;
    v28 = v21;
    v29 = 2112;
    v30 = v19;
    _os_log_impl(&dword_2218F0000, v20, OS_LOG_TYPE_INFO, "%{public}@Successfully fetched preferred network, scheduling startThread for home %@", buf, 0x16u);

  }
  objc_autoreleasePoolPop(v18);
  objc_msgSend(v19, "workQueue");
  v22 = objc_claimAutoreleasedReturnValue();
  v25[0] = MEMORY[0x24BDAC760];
  v25[1] = 3221225472;
  v25[2] = __79__HMDHome_ThreadResidentCommissioning___startThreadNetworkOnIOSWithCompletion___block_invoke_45;
  v25[3] = &unk_24E79C2B8;
  v25[4] = v19;
  v26 = *(id *)(a1 + 32);
  dispatch_async(v22, v25);

LABEL_12:
}

void __79__HMDHome_ThreadResidentCommissioning___startThreadNetworkOnIOSWithCompletion___block_invoke_45(uint64_t a1)
{
  void *v2;
  id v3;
  NSObject *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  int v9;
  void *v10;
  __int16 v11;
  uint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  if ((objc_msgSend(*(id *)(a1 + 32), "startThreadNetworkInProgress") & 1) != 0)
  {
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), 0);
  }
  else
  {
    v2 = (void *)MEMORY[0x227676638]();
    v3 = *(id *)(a1 + 32);
    HMFGetOSLogHandle();
    v4 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      v6 = *(_QWORD *)(a1 + 32);
      v9 = 138543618;
      v10 = v5;
      v11 = 2112;
      v12 = v6;
      _os_log_impl(&dword_2218F0000, v4, OS_LOG_TYPE_INFO, "%{public}@Thread network stop was requested by the time preferred network was fetched to start Thread for home %@", (uint8_t *)&v9, 0x16u);

    }
    objc_autoreleasePoolPop(v2);
    v7 = *(_QWORD *)(a1 + 40);
    objc_msgSend(MEMORY[0x24BDD1540], "hmErrorWithCode:", 23);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    (*(void (**)(uint64_t, void *))(v7 + 16))(v7, v8);

  }
}

void __79__HMDHome_ThreadResidentCommissioning___startThreadNetworkOnIOSWithCompletion___block_invoke_41(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  NSObject *v6;
  void *v7;
  void *v8;
  id v9;
  NSObject *v10;
  void *v11;
  void *v12;
  NSObject *v13;
  id v14;
  id v15;
  _QWORD v16[4];
  id v17;
  id v18;
  uint8_t buf[4];
  void *v20;
  __int16 v21;
  id v22;
  __int16 v23;
  id v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v3 = a2;
  if (v3)
  {
    v4 = (void *)MEMORY[0x227676638]();
    v5 = *(id *)(a1 + 32);
    HMFGetOSLogHandle();
    v6 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v20 = v7;
      v21 = 2112;
      v22 = v3;
      _os_log_impl(&dword_2218F0000, v6, OS_LOG_TYPE_ERROR, "%{public}@Unable to start thread with operational dataset: %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v4);
  }
  v8 = (void *)MEMORY[0x227676638]();
  v9 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v10 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v12 = *(void **)(a1 + 32);
    *(_DWORD *)buf = 138543874;
    v20 = v11;
    v21 = 2112;
    v22 = v12;
    v23 = 2112;
    v24 = v3;
    _os_log_impl(&dword_2218F0000, v10, OS_LOG_TYPE_INFO, "%{public}@Thread start completed for home %@, error = %@", buf, 0x20u);

  }
  objc_autoreleasePoolPop(v8);
  objc_msgSend(*(id *)(a1 + 32), "setStartThreadNetworkInProgress:", 0);
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = 1;
  objc_msgSend(*(id *)(a1 + 32), "workQueue");
  v13 = objc_claimAutoreleasedReturnValue();
  v16[0] = MEMORY[0x24BDAC760];
  v16[1] = 3221225472;
  v16[2] = __79__HMDHome_ThreadResidentCommissioning___startThreadNetworkOnIOSWithCompletion___block_invoke_42;
  v16[3] = &unk_24E79C2B8;
  v14 = *(id *)(a1 + 40);
  v17 = v3;
  v18 = v14;
  v15 = v3;
  dispatch_async(v13, v16);

}

void __79__HMDHome_ThreadResidentCommissioning___startThreadNetworkOnIOSWithCompletion___block_invoke_43(uint64_t a1)
{
  uint64_t v1;
  id v2;

  v1 = *(_QWORD *)(a1 + 32);
  objc_msgSend(MEMORY[0x24BDD1540], "hmErrorWithCode:", 48);
  v2 = (id)objc_claimAutoreleasedReturnValue();
  (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);

}

uint64_t __79__HMDHome_ThreadResidentCommissioning___startThreadNetworkOnIOSWithCompletion___block_invoke_44(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32));
}

uint64_t __79__HMDHome_ThreadResidentCommissioning___startThreadNetworkOnIOSWithCompletion___block_invoke_42(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32));
}

void __80__HMDHome_ThreadResidentCommissioning___retrievePreferredNetworkWithCompletion___block_invoke(uint64_t a1, void *a2, void *a3, void *a4, void *a5)
{
  id v9;
  id v10;
  id v11;
  id v12;
  id WeakRetained;
  void *v14;
  id v15;
  NSObject *v16;
  void *v17;
  void *v18;
  void *v19;
  id v20;
  NSObject *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void (*v26)(void);
  NSObject *v27;
  void *v28;
  id v29;
  id v30;
  void *v31;
  uint8_t buf[4];
  void *v33;
  __int16 v34;
  id v35;
  __int16 v36;
  id v37;
  __int16 v38;
  id v39;
  uint64_t v40;

  v40 = *MEMORY[0x24BDAC8D0];
  v9 = a2;
  v10 = a3;
  v11 = a4;
  v12 = a5;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v14 = (void *)MEMORY[0x227676638]();
  v15 = WeakRetained;
  if (!v12 && v9 && WeakRetained)
  {
    HMFGetOSLogHandle();
    v16 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138544130;
      v33 = v17;
      v34 = 2112;
      v35 = v9;
      v36 = 2112;
      v37 = v10;
      v38 = 2112;
      v39 = v11;
      _os_log_impl(&dword_2218F0000, v16, OS_LOG_TYPE_INFO, "%{public}@Successfully retrieved preferred thread credentials %@ with UUID %@ and operationalDataset %@ from network metadata store", buf, 0x2Au);

    }
    objc_autoreleasePoolPop(v14);
    if (v11)
    {
      v18 = (void *)objc_msgSend(v11, "copy");
      objc_msgSend(v15, "saveAndSyncWithThreadOperationalDataset:", v18);

      v19 = (void *)MEMORY[0x227676638]();
      v20 = v15;
      HMFGetOSLogHandle();
      v21 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v30 = v9;
        v22 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v20, "threadOperationalDataset");
        v29 = v10;
        v23 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v20, "home");
        v31 = v19;
        v24 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543874;
        v33 = v22;
        v34 = 2112;
        v35 = v23;
        v36 = 2112;
        v37 = v24;
        _os_log_impl(&dword_2218F0000, v21, OS_LOG_TYPE_INFO, "%{public}@threadOperationalDataset set to %@ for home %@", buf, 0x20u);

        v19 = v31;
        v10 = v29;

        v9 = v30;
      }

      objc_autoreleasePoolPop(v19);
    }
    if (v10)
    {
      v25 = (void *)objc_msgSend(v10, "copy");
      objc_msgSend(v15, "setThreadNetworkID:", v25);

    }
    v26 = *(void (**)(void))(*(_QWORD *)(a1 + 32) + 16);
  }
  else
  {
    HMFGetOSLogHandle();
    v27 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v28 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v33 = v28;
      v34 = 2112;
      v35 = v12;
      _os_log_impl(&dword_2218F0000, v27, OS_LOG_TYPE_ERROR, "%{public}@Unable to retrieve metadata for thread network: %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v14);
    v26 = *(void (**)(void))(*(_QWORD *)(a1 + 32) + 16);
  }
  v26();

}

void __113__HMDHome_ThreadResidentCommissioning___startThreadNetworkOnCommissionerForIOSWithOperationalDataset_completion___block_invoke(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  NSObject *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  NSObject *v10;
  id v11;
  id v12;
  _QWORD block[5];
  id v14;
  id v15;
  uint8_t buf[4];
  void *v17;
  __int16 v18;
  void *v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  id v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v3 = a2;
  if (v3)
  {
    v4 = (void *)MEMORY[0x227676638]();
    v5 = *(id *)(a1 + 32);
    HMFGetOSLogHandle();
    v6 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(*(id *)(a1 + 32), "threadNetworkID");
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      v9 = *(_QWORD *)(a1 + 40);
      *(_DWORD *)buf = 138544130;
      v17 = v7;
      v18 = 2112;
      v19 = v8;
      v20 = 2112;
      v21 = v9;
      v22 = 2112;
      v23 = v3;
      _os_log_impl(&dword_2218F0000, v6, OS_LOG_TYPE_ERROR, "%{public}@Failed to attach to thread network %@ with operational data set%@: %@", buf, 0x2Au);

    }
    objc_autoreleasePoolPop(v4);
  }
  objc_msgSend(*(id *)(a1 + 32), "workQueue");
  v10 = objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x24BDAC760];
  block[1] = 3221225472;
  block[2] = __113__HMDHome_ThreadResidentCommissioning___startThreadNetworkOnCommissionerForIOSWithOperationalDataset_completion___block_invoke_39;
  block[3] = &unk_24E79B440;
  block[4] = *(_QWORD *)(a1 + 32);
  v11 = *(id *)(a1 + 48);
  v14 = v3;
  v15 = v11;
  v12 = v3;
  dispatch_async(v10, block);

}

uint64_t __113__HMDHome_ThreadResidentCommissioning___startThreadNetworkOnCommissionerForIOSWithOperationalDataset_completion___block_invoke_39(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "setStartThreadNetworkInProgress:", 0);
  objc_msgSend(*(id *)(a1 + 32), "_scheduleThreadNetworkUpdate");
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 48) + 16))();
}

void __88__HMDHome_ThreadResidentCommissioning___startThreadNetworkOnCommissionerWithCompletion___block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  void *v8;
  id v9;
  NSObject *v10;
  void *v11;
  const char *v12;
  NSObject *v13;
  os_log_type_t v14;
  uint32_t v15;
  void *v16;
  id v17;
  NSObject *v18;
  void *v19;
  NSObject *v20;
  void *v21;
  id *v22;
  NSObject *v23;
  void *v24;
  void *v25;
  _QWORD v26[5];
  id v27;
  _QWORD block[5];
  NSObject *v29;
  id v30;
  uint8_t buf[4];
  void *v32;
  __int16 v33;
  id v34;
  __int16 v35;
  id v36;
  uint64_t v37;

  v37 = *MEMORY[0x24BDAC8D0];
  v5 = a2;
  v6 = a3;
  if (v5)
  {
    v7 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40);
    if (v7 && !objc_msgSend(v7, "isEqualToString:", v5))
    {
      v8 = (void *)MEMORY[0x227676638]();
      v9 = *(id *)(a1 + 32);
      HMFGetOSLogHandle();
      v10 = objc_claimAutoreleasedReturnValue();
      if (!os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
        goto LABEL_12;
      HMFGetLogIdentifier();
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      v24 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40);
      *(_DWORD *)buf = 138543874;
      v32 = v11;
      v33 = 2112;
      v34 = v5;
      v35 = 2112;
      v36 = v24;
      v12 = "%{public}@Attached to thread network %@, but expected to attach to %@";
      v13 = v10;
      v14 = OS_LOG_TYPE_ERROR;
      v15 = 32;
    }
    else
    {
      v8 = (void *)MEMORY[0x227676638]();
      v9 = *(id *)(a1 + 32);
      HMFGetOSLogHandle();
      v10 = objc_claimAutoreleasedReturnValue();
      if (!os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
        goto LABEL_12;
      HMFGetLogIdentifier();
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v32 = v11;
      v33 = 2112;
      v34 = v5;
      v12 = "%{public}@Attached to thread network %@";
      v13 = v10;
      v14 = OS_LOG_TYPE_DEFAULT;
      v15 = 22;
    }
    _os_log_impl(&dword_2218F0000, v13, v14, v12, buf, v15);

LABEL_12:
    objc_autoreleasePoolPop(v8);
    if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40) || (objc_msgSend(v5, "isEqualToString:") & 1) == 0)
      objc_msgSend(*(id *)(a1 + 32), "setThreadNetworkID:", v5);
    objc_msgSend(*(id *)(a1 + 32), "workQueue");
    v23 = objc_claimAutoreleasedReturnValue();
    v26[0] = MEMORY[0x24BDAC760];
    v26[1] = 3221225472;
    v26[2] = __88__HMDHome_ThreadResidentCommissioning___startThreadNetworkOnCommissionerWithCompletion___block_invoke_37;
    v26[3] = &unk_24E79C2B8;
    v25 = *(void **)(a1 + 40);
    v26[4] = *(_QWORD *)(a1 + 32);
    v22 = &v27;
    v27 = v25;
    dispatch_async(v23, v26);
    goto LABEL_16;
  }
  v16 = (void *)MEMORY[0x227676638]();
  v17 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v18 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
  {
    HMFGetLogIdentifier();
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543874;
    v32 = v19;
    v33 = 2112;
    v34 = 0;
    v35 = 2112;
    v36 = v6;
    _os_log_impl(&dword_2218F0000, v18, OS_LOG_TYPE_ERROR, "%{public}@Failed to attach to thread network %@: %@", buf, 0x20u);

  }
  objc_autoreleasePoolPop(v16);
  objc_msgSend(*(id *)(a1 + 32), "workQueue");
  v20 = objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x24BDAC760];
  block[1] = 3221225472;
  block[2] = __88__HMDHome_ThreadResidentCommissioning___startThreadNetworkOnCommissionerWithCompletion___block_invoke_36;
  block[3] = &unk_24E79B440;
  v21 = *(void **)(a1 + 40);
  block[4] = *(_QWORD *)(a1 + 32);
  v22 = &v30;
  v30 = v21;
  v29 = v6;
  dispatch_async(v20, block);

  v23 = v29;
LABEL_16:

}

uint64_t __88__HMDHome_ThreadResidentCommissioning___startThreadNetworkOnCommissionerWithCompletion___block_invoke_36(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "setStartThreadNetworkInProgress:", 0);
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 48) + 16))();
}

uint64_t __88__HMDHome_ThreadResidentCommissioning___startThreadNetworkOnCommissionerWithCompletion___block_invoke_37(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "setStartThreadNetworkInProgress:", 0);
  objc_msgSend(*(id *)(a1 + 32), "_scheduleThreadNetworkUpdate");
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
}

void __65__HMDHome_ThreadResidentCommissioning___retryStartThreadNetwork___block_invoke(uint64_t a1)
{
  id WeakRetained;
  __n128 v3;
  __n128 v4;
  double v5;
  BOOL v6;
  void *v8;
  id v9;
  NSObject *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  void *v16;
  void *v17;
  uint64_t v18;
  id v19;
  NSObject *v20;
  void *v21;
  uint64_t v22;
  _QWORD v23[7];
  uint8_t buf[4];
  void *v25;
  __int16 v26;
  uint64_t v27;
  __int16 v28;
  uint64_t v29;
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (!WeakRetained)
  {
    v14 = MEMORY[0x227676638]();
    HMFGetOSLogHandle();
    v15 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
    {
      HMFGetLogIdentifier();
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v25 = v16;
      _os_log_impl(&dword_2218F0000, v15, OS_LOG_TYPE_DEBUG, "%{public}@Home has died, resident commissioning canceled", buf, 0xCu);

    }
    v17 = (void *)v14;
    goto LABEL_17;
  }
  v5 = *(double *)(a1 + 40);
  v4.n128_f64[0] = fabs(v5);
  v6 = v5 <= 0.0;
  v3.n128_u64[0] = 0x3CB0000000000000;
  if (!v6 && v4.n128_f64[0] >= 2.22044605e-16)
  {
    v8 = (void *)MEMORY[0x227676638](v3, v4);
    v9 = WeakRetained;
    HMFGetOSLogHandle();
    v10 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v25 = v11;
      _os_log_impl(&dword_2218F0000, v10, OS_LOG_TYPE_INFO, "%{public}@Resident commissioning timer expired", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v8);
  }
  v12 = objc_msgSend(WeakRetained, "threadNetworkSequenceNumber");
  v13 = v12;
  if (v12 != *(_QWORD *)(a1 + 48))
  {
    v18 = MEMORY[0x227676638]();
    v19 = WeakRetained;
    HMFGetOSLogHandle();
    v20 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v20, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      v22 = *(_QWORD *)(a1 + 48);
      *(_DWORD *)buf = 138543874;
      v25 = v21;
      v26 = 2048;
      v27 = v22;
      v28 = 2048;
      v29 = v13;
      _os_log_impl(&dword_2218F0000, v20, OS_LOG_TYPE_INFO, "%{public}@Resident commissioning sequence number no longer matches: %lu != %lu", buf, 0x20u);

    }
    v17 = (void *)v18;
LABEL_17:
    objc_autoreleasePoolPop(v17);
    goto LABEL_18;
  }
  v23[0] = MEMORY[0x24BDAC760];
  v23[1] = 3221225472;
  v23[2] = __65__HMDHome_ThreadResidentCommissioning___retryStartThreadNetwork___block_invoke_34;
  v23[3] = &unk_24E7781C8;
  v23[4] = WeakRetained;
  v23[5] = v12;
  v23[6] = *(_QWORD *)(a1 + 56);
  objc_msgSend(WeakRetained, "_startThreadNetworkWithCompletion:", v23);
LABEL_18:

}

void __65__HMDHome_ThreadResidentCommissioning___retryStartThreadNetwork___block_invoke_34(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  id v9;
  NSObject *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  void *v15;
  __int16 v16;
  uint64_t v17;
  __int16 v18;
  uint64_t v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  v3 = a2;
  v4 = v3;
  if (v3)
  {
    objc_msgSend(v3, "domain");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v5, "isEqualToString:", *MEMORY[0x24BDD5BD8]))
    {
      if (objc_msgSend(v4, "code") == 48)
      {

        goto LABEL_12;
      }
      v13 = objc_msgSend(v4, "code");

      if (v13 == 23)
        goto LABEL_12;
    }
    else
    {

    }
    v6 = objc_msgSend(*(id *)(a1 + 32), "threadNetworkSequenceNumber");
    if (v6 == *(_QWORD *)(a1 + 40))
    {
      objc_msgSend(*(id *)(a1 + 32), "_retryStartThreadNetwork:", *(double *)(a1 + 48));
    }
    else
    {
      v7 = v6;
      v8 = (void *)MEMORY[0x227676638]();
      v9 = *(id *)(a1 + 32);
      HMFGetOSLogHandle();
      v10 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        v12 = *(_QWORD *)(a1 + 40);
        v14 = 138543874;
        v15 = v11;
        v16 = 2048;
        v17 = v12;
        v18 = 2048;
        v19 = v7;
        _os_log_impl(&dword_2218F0000, v10, OS_LOG_TYPE_INFO, "%{public}@Resident commissioning sequence number no longer matches: %lu != %lu", (uint8_t *)&v14, 0x20u);

      }
      objc_autoreleasePoolPop(v8);
    }
  }
LABEL_12:

}

void __59__HMDHome_ThreadResidentCommissioning__startThreadNetwork___block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;
  id v4;
  NSObject *v5;
  void *v6;
  const char *v7;
  void *v8;
  char v9;
  int v10;
  void *v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  objc_msgSend(*(id *)(a1 + 32), "homeManager");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v2, "isStartThreadNetworkInProgress"))
  {
    v3 = (void *)MEMORY[0x227676638]();
    v4 = *(id *)(a1 + 32);
    HMFGetOSLogHandle();
    v5 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      v10 = 138543362;
      v11 = v6;
      v7 = "%{public}@Not starting thread network, start already in progress for another network";
LABEL_4:
      _os_log_impl(&dword_2218F0000, v5, OS_LOG_TYPE_INFO, v7, (uint8_t *)&v10, 0xCu);

    }
  }
  else
  {
    if (*(_BYTE *)(a1 + 40)
      || (objc_msgSend(*(id *)(a1 + 32), "threadNetworkID"),
          v8 = (void *)objc_claimAutoreleasedReturnValue(),
          v9 = objc_msgSend(v2, "isCurrentResidentDeviceRunningThreadNetwork:", v8),
          v8,
          (v9 & 1) != 0))
    {
      objc_msgSend(*(id *)(a1 + 32), "_incrementCurrentSequenceNumber");
      objc_msgSend(*(id *)(a1 + 32), "_retryStartThreadNetwork:", 0.0);
      goto LABEL_9;
    }
    v3 = (void *)MEMORY[0x227676638]();
    v4 = *(id *)(a1 + 32);
    HMFGetOSLogHandle();
    v5 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      v10 = 138543362;
      v11 = v6;
      v7 = "%{public}@Not starting thread network, not associated with thread network homes";
      goto LABEL_4;
    }
  }

  objc_autoreleasePoolPop(v3);
LABEL_9:

}

void __74__HMDHome_ThreadResidentCommissioning___handleUnjoinThreadNetworkMessage___block_invoke(uint64_t a1)
{
  void *v1;
  _QWORD v2[4];
  id v3;

  v2[0] = MEMORY[0x24BDAC760];
  v2[1] = 3221225472;
  v2[2] = __74__HMDHome_ThreadResidentCommissioning___handleUnjoinThreadNetworkMessage___block_invoke_2;
  v2[3] = &unk_24E79BD80;
  v1 = *(void **)(a1 + 32);
  v3 = *(id *)(a1 + 40);
  objc_msgSend(v1, "_unjoinThreadNetworkWithCompletion:", v2);

}

uint64_t __74__HMDHome_ThreadResidentCommissioning___handleUnjoinThreadNetworkMessage___block_invoke_2(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(a1 + 32), "respondWithPayload:error:", 0, a2);
}

void __78__HMDHome_ThreadResidentCommissioning___handleJoinOrFormThreadNetworkMessage___block_invoke(uint64_t a1)
{
  void *v2;
  id v3;
  NSObject *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  void *v8;
  _QWORD v9[4];
  id v10;
  uint8_t buf[4];
  void *v12;
  __int16 v13;
  void *v14;
  __int16 v15;
  uint64_t v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  if (*(_QWORD *)(a1 + 32))
  {
    v2 = (void *)MEMORY[0x227676638]();
    v3 = *(id *)(a1 + 40);
    HMFGetOSLogHandle();
    v4 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      HMFGetLogIdentifier();
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(*(id *)(a1 + 40), "threadNetworkID");
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      v7 = *(_QWORD *)(a1 + 32);
      *(_DWORD *)buf = 138543874;
      v12 = v5;
      v13 = 2112;
      v14 = v6;
      v15 = 2112;
      v16 = v7;
      _os_log_impl(&dword_2218F0000, v4, OS_LOG_TYPE_DEFAULT, "%{public}@Updating thread network %@ -> %@ and starting", buf, 0x20u);

    }
    objc_autoreleasePoolPop(v2);
    objc_msgSend(*(id *)(a1 + 40), "setThreadNetworkID:", *(_QWORD *)(a1 + 32));
  }
  v9[0] = MEMORY[0x24BDAC760];
  v9[1] = 3221225472;
  v9[2] = __78__HMDHome_ThreadResidentCommissioning___handleJoinOrFormThreadNetworkMessage___block_invoke_32;
  v9[3] = &unk_24E79BD80;
  v8 = *(void **)(a1 + 40);
  v10 = *(id *)(a1 + 48);
  objc_msgSend(v8, "_startThreadNetworkWithCompletion:", v9);

}

uint64_t __78__HMDHome_ThreadResidentCommissioning___handleJoinOrFormThreadNetworkMessage___block_invoke_32(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(a1 + 32), "respondWithPayload:error:", 0, a2);
}

void __79__HMDHome_ThreadResidentCommissioning___handleThreadNetworkCredentialsRequest___block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id WeakRetained;
  void *v8;
  id v9;
  NSObject *v10;
  void *v11;
  void *v12;
  id v13;
  void *v14;
  void *v15;
  NSObject *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  id v21;
  NSObject *v22;
  void *v23;
  void *v24;
  id v25;
  uint8_t buf[4];
  void *v27;
  __int16 v28;
  id v29;
  __int16 v30;
  id v31;
  uint64_t v32;

  v32 = *MEMORY[0x24BDAC8D0];
  v5 = a2;
  v6 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v8 = (void *)MEMORY[0x227676638]();
  v9 = WeakRetained;
  if (v5 && WeakRetained)
  {
    HMFGetOSLogHandle();
    v10 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v27 = v11;
      v28 = 2112;
      v29 = v5;
      _os_log_impl(&dword_2218F0000, v10, OS_LOG_TYPE_INFO, "%{public}@Successfully retrieved thread credentials %@ from network metadata store", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v8);
    v25 = 0;
    objc_msgSend(MEMORY[0x24BDD1618], "archivedDataWithRootObject:requiringSecureCoding:error:", v5, 1, &v25);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    v13 = v25;
    if (v12)
    {
      objc_msgSend(MEMORY[0x24BDBCED8], "dictionary");
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v14, "setObject:forKeyedSubscript:", v12, *MEMORY[0x24BDD6348]);
      objc_msgSend(v5, "masterKey");
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v14, "setObject:forKeyedSubscript:", v15, CFSTR("HMHomeThreadNetworkCredentialsMasterKeyMessageKey"));

      objc_msgSend(*(id *)(a1 + 32), "respondWithPayload:", v14);
    }
    else
    {
      v20 = (void *)MEMORY[0x227676638]();
      v21 = v9;
      HMFGetOSLogHandle();
      v22 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v23 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        v27 = v23;
        v28 = 2112;
        v29 = v13;
        _os_log_impl(&dword_2218F0000, v22, OS_LOG_TYPE_ERROR, "%{public}@Unable to encode credentials: %@", buf, 0x16u);

      }
      objc_autoreleasePoolPop(v20);
      v24 = *(void **)(a1 + 32);
      objc_msgSend(MEMORY[0x24BDD1540], "hmfErrorWithCode:", 15);
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v24, "respondWithError:", v14);
    }

  }
  else
  {
    HMFGetOSLogHandle();
    v16 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v9, "threadNetworkID");
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543874;
      v27 = v17;
      v28 = 2112;
      v29 = v18;
      v30 = 2112;
      v31 = v6;
      _os_log_impl(&dword_2218F0000, v16, OS_LOG_TYPE_ERROR, "%{public}@Unable to retrieve metadata for thread network '%@': %@", buf, 0x20u);

    }
    objc_autoreleasePoolPop(v8);
    v19 = *(void **)(a1 + 32);
    objc_msgSend(MEMORY[0x24BDD1540], "hmfErrorWithCode:", 2);
    v13 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v19, "respondWithError:", v13);
  }

}

void __84__HMDHome_ThreadResidentCommissioning__handleCurrentWiFiNetworkChangedNotification___block_invoke(uint64_t a1)
{
  int v2;
  void *v3;
  id v4;
  NSObject *v5;
  _BOOL4 v6;
  void *v7;
  void *v8;
  int v9;
  void *v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  v2 = objc_msgSend(*(id *)(a1 + 32), "threadNetworkShouldRestartOnNetworkChange");
  v3 = (void *)MEMORY[0x227676638]();
  v4 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v5 = objc_claimAutoreleasedReturnValue();
  v6 = os_log_type_enabled(v5, OS_LOG_TYPE_INFO);
  if (v2)
  {
    if (v6)
    {
      HMFGetLogIdentifier();
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      v9 = 138543362;
      v10 = v7;
      _os_log_impl(&dword_2218F0000, v5, OS_LOG_TYPE_INFO, "%{public}@Restarting Thread network upon WiFi network changed notification", (uint8_t *)&v9, 0xCu);

    }
    objc_autoreleasePoolPop(v3);
    objc_msgSend(*(id *)(a1 + 32), "startThreadNetwork:", 1);
  }
  else
  {
    if (v6)
    {
      HMFGetLogIdentifier();
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      v9 = 138543362;
      v10 = v8;
      _os_log_impl(&dword_2218F0000, v5, OS_LOG_TYPE_INFO, "%{public}@Ignoring WiFi network changed notification when Thread is not up", (uint8_t *)&v9, 0xCu);

    }
    objc_autoreleasePoolPop(v3);
  }
}

void __73__HMDHome_ThreadResidentCommissioning___unregisterForThreadNetworkEvents__block_invoke(uint64_t a1)
{
  id WeakRetained;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  id v6;
  NSObject *v7;
  void *v8;
  int v9;
  void *v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v2 = WeakRetained;
  if (WeakRetained
    && (objc_msgSend(WeakRetained, "threadNetworkPeriodicStatusReporter"),
        v3 = (void *)objc_claimAutoreleasedReturnValue(),
        v3,
        v3))
  {
    objc_msgSend(v2, "threadNetworkPeriodicStatusReporter");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "unregisterForThreadNetworkEvents");

    objc_msgSend(v2, "setThreadNetworkPeriodicStatusReporter:", 0);
  }
  else
  {
    v5 = (void *)MEMORY[0x227676638]();
    v6 = v2;
    HMFGetOSLogHandle();
    v7 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      v9 = 138543362;
      v10 = v8;
      _os_log_impl(&dword_2218F0000, v7, OS_LOG_TYPE_ERROR, "%{public}@_unregisterForThreadNetworkEvents already unregistered", (uint8_t *)&v9, 0xCu);

    }
    objc_autoreleasePoolPop(v5);
  }

}

void __71__HMDHome_ThreadResidentCommissioning___registerForThreadNetworkEvents__block_invoke(uint64_t a1)
{
  id WeakRetained;
  void *v2;
  void *v3;
  HMDThreadNetworkStatusReporter *v4;
  void *v5;
  void *v6;
  NSObject *v7;
  void *v8;
  int v9;
  void *v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v2 = WeakRetained;
  if (WeakRetained)
  {
    objc_msgSend(WeakRetained, "threadNetworkPeriodicStatusReporter");
    v3 = (void *)objc_claimAutoreleasedReturnValue();

    if (!v3)
    {
      v4 = -[HMDThreadNetworkStatusReporter initWithHome:]([HMDThreadNetworkStatusReporter alloc], "initWithHome:", v2);
      objc_msgSend(v2, "setThreadNetworkPeriodicStatusReporter:", v4);

    }
    objc_msgSend(v2, "threadNetworkPeriodicStatusReporter");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "registerForThreadNetworkEvents");

  }
  else
  {
    v6 = (void *)MEMORY[0x227676638]();
    HMFGetOSLogHandle();
    v7 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      v9 = 138543362;
      v10 = v8;
      _os_log_impl(&dword_2218F0000, v7, OS_LOG_TYPE_ERROR, "%{public}@_registerForThreadNetworkEvents could not get a strong reference to self", (uint8_t *)&v9, 0xCu);

    }
    objc_autoreleasePoolPop(v6);
  }

}

- (BOOL)bulletinBoardNotificationsMigrationFileExistsOnDisk
{
  void *v3;
  void *v4;
  char v5;

  objc_msgSend(MEMORY[0x24BDD1580], "defaultManager");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHome getBulletinBoardNotificationSerializedFileName](self, "getBulletinBoardNotificationSerializedFileName");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v3, "fileExistsAtPath:", v4);

  return v5;
}

- (BOOL)cameraNotificationSettingsMigrationFileExistsOnDisk
{
  void *v3;
  void *v4;
  char v5;

  objc_msgSend(MEMORY[0x24BDD1580], "defaultManager");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHome getCameraNotificationSettingsSerializedFileName](self, "getCameraNotificationSettingsSerializedFileName");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v3, "fileExistsAtPath:", v4);

  return v5;
}

- (id)getBulletinBoardNotificationSerializedFileName
{
  void *v3;
  id v4;
  void *v5;
  void *v6;

  v3 = (void *)MEMORY[0x24BDD17C8];
  v4 = (id)hh1ToHH2PerDeviceMigrationDirectoryPath;
  -[HMDHome uuid](self, "uuid");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "stringWithFormat:", CFSTR("%@/HMDHome-Bulletin-Board-Notifications-%@.plist"), v4, v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  return v6;
}

- (id)getCameraNotificationSettingsSerializedFileName
{
  void *v3;
  id v4;
  void *v5;
  void *v6;

  v3 = (void *)MEMORY[0x24BDD17C8];
  v4 = (id)hh1ToHH2PerDeviceMigrationDirectoryPath;
  -[HMDHome uuid](self, "uuid");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "stringWithFormat:", CFSTR("%@/HMDHome-Camera-Notification-Settings-%@.plist"), v4, v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  return v6;
}

- (void)storeMigrationBulletinBoardNotificationsToDisk
{
  void *v3;
  void *v4;
  uint64_t v5;
  void *v6;
  HMDHome *v7;
  NSObject *v8;
  _BOOL4 v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  HMDHome *v16;
  NSObject *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  HMDHome *v22;
  NSObject *v23;
  void *v24;
  int v25;
  void *v26;
  __int16 v27;
  void *v28;
  __int16 v29;
  void *v30;
  uint64_t v31;

  v31 = *MEMORY[0x24BDAC8D0];
  v3 = (void *)MEMORY[0x227676638](self, a2);
  +[HMDHome migrationBulletinBoardNotificationsForHome:](HMDHome, "migrationBulletinBoardNotificationsForHome:", self);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v4, "count");
  v6 = (void *)MEMORY[0x227676638]();
  v7 = self;
  HMFGetOSLogHandle();
  v8 = objc_claimAutoreleasedReturnValue();
  v9 = os_log_type_enabled(v8, OS_LOG_TYPE_INFO);
  if (v5)
  {
    if (v9)
    {
      HMFGetLogIdentifier();
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      -[HMDHome name](v7, "name");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      v25 = 138543874;
      v26 = v10;
      v27 = 2112;
      v28 = v11;
      v29 = 2112;
      v30 = v4;
      _os_log_impl(&dword_2218F0000, v8, OS_LOG_TYPE_INFO, "%{public}@Archiving bulletin board notifications for migration for home: %@, [%@]", (uint8_t *)&v25, 0x20u);

    }
    objc_autoreleasePoolPop(v6);
    +[HMDHome encodedMigrationBulletinBoardNotifications:](HMDHome, "encodedMigrationBulletinBoardNotifications:", v4);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    if (v12)
    {
      -[HMDHome getBulletinBoardNotificationSerializedFileName](v7, "getBulletinBoardNotificationSerializedFileName");
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      +[HMDPersistentStore writeData:toStorePath:dataLabel:](HMDPersistentStore, "writeData:toStorePath:dataLabel:", v12, v13, CFSTR("BulletinBoardNotifications"));
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      v15 = (void *)MEMORY[0x227676638]();
      v16 = v7;
      HMFGetOSLogHandle();
      v17 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v18 = (void *)objc_claimAutoreleasedReturnValue();
        v25 = 138543874;
        v26 = v18;
        v27 = 2112;
        v28 = v14;
        v29 = 2112;
        v30 = v13;
        _os_log_impl(&dword_2218F0000, v17, OS_LOG_TYPE_INFO, "%{public}@Stored bulletin board notifications ([%@] bytes) to [%@]", (uint8_t *)&v25, 0x20u);

      }
      objc_autoreleasePoolPop(v15);

    }
    else
    {
      v21 = (void *)MEMORY[0x227676638]();
      v22 = v7;
      HMFGetOSLogHandle();
      v23 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v24 = (void *)objc_claimAutoreleasedReturnValue();
        v25 = 138543362;
        v26 = v24;
        _os_log_impl(&dword_2218F0000, v23, OS_LOG_TYPE_ERROR, "%{public}@Unable to store bulletin board notifications during migration, archived data is nil", (uint8_t *)&v25, 0xCu);

      }
      objc_autoreleasePoolPop(v21);
    }

  }
  else
  {
    if (v9)
    {
      HMFGetLogIdentifier();
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      -[HMDHome name](v7, "name");
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      v25 = 138543618;
      v26 = v19;
      v27 = 2112;
      v28 = v20;
      _os_log_impl(&dword_2218F0000, v8, OS_LOG_TYPE_INFO, "%{public}@No bulletin board notifications to migrate for home: %@", (uint8_t *)&v25, 0x16u);

    }
    objc_autoreleasePoolPop(v6);
  }

  objc_autoreleasePoolPop(v3);
}

- (void)storeMigrationCameraNotificationSettingsToDisk
{
  void *v3;
  void *v4;
  uint64_t v5;
  void *v6;
  HMDHome *v7;
  NSObject *v8;
  _BOOL4 v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  HMDHome *v16;
  NSObject *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  HMDHome *v22;
  NSObject *v23;
  void *v24;
  int v25;
  void *v26;
  __int16 v27;
  void *v28;
  __int16 v29;
  void *v30;
  uint64_t v31;

  v31 = *MEMORY[0x24BDAC8D0];
  v3 = (void *)MEMORY[0x227676638](self, a2);
  +[HMDHome migrationCameraNotificationSettingsForHome:](HMDHome, "migrationCameraNotificationSettingsForHome:", self);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v4, "count");
  v6 = (void *)MEMORY[0x227676638]();
  v7 = self;
  HMFGetOSLogHandle();
  v8 = objc_claimAutoreleasedReturnValue();
  v9 = os_log_type_enabled(v8, OS_LOG_TYPE_INFO);
  if (v5)
  {
    if (v9)
    {
      HMFGetLogIdentifier();
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      -[HMDHome name](v7, "name");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      v25 = 138543874;
      v26 = v10;
      v27 = 2112;
      v28 = v11;
      v29 = 2112;
      v30 = v4;
      _os_log_impl(&dword_2218F0000, v8, OS_LOG_TYPE_INFO, "%{public}@Archiving camera notification settings for migration for home: %@, [%@]", (uint8_t *)&v25, 0x20u);

    }
    objc_autoreleasePoolPop(v6);
    +[HMDHome encodedMigrationCameraNotificationSettings:](HMDHome, "encodedMigrationCameraNotificationSettings:", v4);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    if (v12)
    {
      -[HMDHome getCameraNotificationSettingsSerializedFileName](v7, "getCameraNotificationSettingsSerializedFileName");
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      +[HMDPersistentStore writeData:toStorePath:dataLabel:](HMDPersistentStore, "writeData:toStorePath:dataLabel:", v12, v13, CFSTR("CameraNotificationSettings"));
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      v15 = (void *)MEMORY[0x227676638]();
      v16 = v7;
      HMFGetOSLogHandle();
      v17 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v18 = (void *)objc_claimAutoreleasedReturnValue();
        v25 = 138543874;
        v26 = v18;
        v27 = 2112;
        v28 = v14;
        v29 = 2112;
        v30 = v13;
        _os_log_impl(&dword_2218F0000, v17, OS_LOG_TYPE_INFO, "%{public}@Stored camera notification settings ([%@] bytes) to [%@]", (uint8_t *)&v25, 0x20u);

      }
      objc_autoreleasePoolPop(v15);

    }
    else
    {
      v21 = (void *)MEMORY[0x227676638]();
      v22 = v7;
      HMFGetOSLogHandle();
      v23 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v24 = (void *)objc_claimAutoreleasedReturnValue();
        v25 = 138543362;
        v26 = v24;
        _os_log_impl(&dword_2218F0000, v23, OS_LOG_TYPE_ERROR, "%{public}@Unable to store camera notification settings during migration, archived data is nil", (uint8_t *)&v25, 0xCu);

      }
      objc_autoreleasePoolPop(v21);
    }

  }
  else
  {
    if (v9)
    {
      HMFGetLogIdentifier();
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      -[HMDHome name](v7, "name");
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      v25 = 138543618;
      v26 = v19;
      v27 = 2112;
      v28 = v20;
      _os_log_impl(&dword_2218F0000, v8, OS_LOG_TYPE_INFO, "%{public}@No camera notification settings to migrate for home: %@", (uint8_t *)&v25, 0x16u);

    }
    objc_autoreleasePoolPop(v6);
  }

  objc_autoreleasePoolPop(v3);
}

- (id)loadMigrationBulletinBoardNotificationsFromDisk
{
  void *v3;
  void *v4;
  id v5;
  void *v6;
  BOOL v7;
  void *v8;
  HMDHome *v9;
  NSObject *v10;
  void *v11;
  void *v12;
  HMDHome *v13;
  void *v14;
  id v16;
  uint8_t buf[4];
  void *v18;
  __int16 v19;
  void *v20;
  __int16 v21;
  void *v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  -[HMDHome getBulletinBoardNotificationSerializedFileName](self, "getBulletinBoardNotificationSerializedFileName");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v16 = 0;
  objc_msgSend(MEMORY[0x24BDBCE50], "dataWithContentsOfFile:options:error:", v3, 2, &v16);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = v16;
  v6 = v5;
  if (v4)
    v7 = v5 == 0;
  else
    v7 = 0;
  if (v7)
  {
    +[HMDHome decodedMigrationBulletinBoardNotifications:](HMDHome, "decodedMigrationBulletinBoardNotifications:", v4);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = (void *)MEMORY[0x227676638]();
    v13 = self;
    HMFGetOSLogHandle();
    v10 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v18 = v14;
      v19 = 2112;
      v20 = v12;
      _os_log_impl(&dword_2218F0000, v10, OS_LOG_TYPE_INFO, "%{public}@Bulletin board notifications for migration: [%@]", buf, 0x16u);

    }
  }
  else
  {
    v8 = (void *)MEMORY[0x227676638]();
    v9 = self;
    HMFGetOSLogHandle();
    v10 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543874;
      v18 = v11;
      v19 = 2112;
      v20 = v3;
      v21 = 2112;
      v22 = v6;
      _os_log_impl(&dword_2218F0000, v10, OS_LOG_TYPE_ERROR, "%{public}@Unable to read data from file : %@ / %@", buf, 0x20u);

    }
    v12 = 0;
  }

  objc_autoreleasePoolPop(v8);
  return v12;
}

- (id)loadMigrationCameraNotificationSettingsFromDisk
{
  void *v3;
  void *v4;
  id v5;
  void *v6;
  BOOL v7;
  void *v8;
  HMDHome *v9;
  NSObject *v10;
  void *v11;
  void *v12;
  HMDHome *v13;
  void *v14;
  id v16;
  uint8_t buf[4];
  void *v18;
  __int16 v19;
  void *v20;
  __int16 v21;
  void *v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  -[HMDHome getCameraNotificationSettingsSerializedFileName](self, "getCameraNotificationSettingsSerializedFileName");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v16 = 0;
  objc_msgSend(MEMORY[0x24BDBCE50], "dataWithContentsOfFile:options:error:", v3, 2, &v16);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = v16;
  v6 = v5;
  if (v4)
    v7 = v5 == 0;
  else
    v7 = 0;
  if (v7)
  {
    +[HMDHome decodedMigrationCameraNotificationSettings:](HMDHome, "decodedMigrationCameraNotificationSettings:", v4);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = (void *)MEMORY[0x227676638]();
    v13 = self;
    HMFGetOSLogHandle();
    v10 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v18 = v14;
      v19 = 2112;
      v20 = v12;
      _os_log_impl(&dword_2218F0000, v10, OS_LOG_TYPE_INFO, "%{public}@Camera notification settings for migration: [%@]", buf, 0x16u);

    }
  }
  else
  {
    v8 = (void *)MEMORY[0x227676638]();
    v9 = self;
    HMFGetOSLogHandle();
    v10 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543874;
      v18 = v11;
      v19 = 2112;
      v20 = v3;
      v21 = 2112;
      v22 = v6;
      _os_log_impl(&dword_2218F0000, v10, OS_LOG_TYPE_ERROR, "%{public}@Unable to read data from file : %@ / %@", buf, 0x20u);

    }
    v12 = 0;
  }

  objc_autoreleasePoolPop(v8);
  return v12;
}

- (void)removeBulletinBoardNotificationsMigrationFileFromDisk
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  id v7;
  void *v8;
  HMDHome *v9;
  NSObject *v10;
  void *v11;
  id v12;
  uint8_t buf[4];
  void *v14;
  __int16 v15;
  id v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  v3 = objc_alloc(MEMORY[0x24BDBCF48]);
  -[HMDHome getBulletinBoardNotificationSerializedFileName](self, "getBulletinBoardNotificationSerializedFileName");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = (void *)objc_msgSend(v3, "initFileURLWithPath:", v4);

  objc_msgSend(MEMORY[0x24BDD1580], "defaultManager");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v12 = 0;
  objc_msgSend(v6, "removeItemAtURL:error:", v5, &v12);
  v7 = v12;

  if (v7)
  {
    v8 = (void *)MEMORY[0x227676638]();
    v9 = self;
    HMFGetOSLogHandle();
    v10 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v14 = v11;
      v15 = 2112;
      v16 = v7;
      _os_log_impl(&dword_2218F0000, v10, OS_LOG_TYPE_ERROR, "%{public}@Error occurred while removing bulletin board notification migration file from disk : %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v8);
  }

}

- (void)removeCameraNotificationSettingsMigrationFileFromDisk
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  id v7;
  void *v8;
  HMDHome *v9;
  NSObject *v10;
  void *v11;
  id v12;
  uint8_t buf[4];
  void *v14;
  __int16 v15;
  id v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  v3 = objc_alloc(MEMORY[0x24BDBCF48]);
  -[HMDHome getCameraNotificationSettingsSerializedFileName](self, "getCameraNotificationSettingsSerializedFileName");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = (void *)objc_msgSend(v3, "initFileURLWithPath:", v4);

  objc_msgSend(MEMORY[0x24BDD1580], "defaultManager");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v12 = 0;
  objc_msgSend(v6, "removeItemAtURL:error:", v5, &v12);
  v7 = v12;

  if (v7)
  {
    v8 = (void *)MEMORY[0x227676638]();
    v9 = self;
    HMFGetOSLogHandle();
    v10 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v14 = v11;
      v15 = 2112;
      v16 = v7;
      _os_log_impl(&dword_2218F0000, v10, OS_LOG_TYPE_ERROR, "%{public}@Error occurred while removing camera notification settings migration file from disk : %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v8);
  }

}

- (void)updateBulletinRegistrationOnPrimaryResidentWithSource:(id)a3 enableRegistrations:(id)a4 disableRegistration:(id)a5 completionHandler:(id)a6
{
  id v10;
  id v11;
  id v12;
  id v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  HMDHome *v19;
  NSObject *v20;
  void *v21;
  void *v22;
  uint64_t v23;
  HMDRemoteDeviceMessageDestination *v24;
  void *v25;
  void *v26;
  HMDRemoteDeviceMessageDestination *v27;
  HMDRemoteMessage *v28;
  void *v29;
  HMDHome *v30;
  NSObject *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  HMDRemoteDeviceMessageDestination *v36;
  void *v37;
  void *v38;
  _QWORD v39[5];
  id v40;
  uint8_t buf[4];
  void *v42;
  __int16 v43;
  void *v44;
  __int16 v45;
  void *v46;
  uint64_t v47;

  v47 = *MEMORY[0x24BDAC8D0];
  v10 = a3;
  v11 = a4;
  v12 = a5;
  v13 = a6;
  -[HMDHome residentDeviceManager](self, "residentDeviceManager");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v14, "primaryResidentDevice");
  v15 = (void *)objc_claimAutoreleasedReturnValue();

  v16 = (void *)MEMORY[0x227676638]();
  if (v15)
  {
    if (-[HMDHome isCurrentDeviceConfirmedPrimaryResident](self, "isCurrentDeviceConfirmedPrimaryResident"))
    {
      -[HMDHome backingStore](self, "backingStore");
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v17, "context");
      v18 = (void *)objc_claimAutoreleasedReturnValue();

      -[HMDHome updateEnabledBulletinRegistrations:disabledBulletinRegistrations:source:context:completionHandler:](self, "updateEnabledBulletinRegistrations:disabledBulletinRegistrations:source:context:completionHandler:", v11, v12, v10, v18, v13);
    }
    else
    {
      v38 = v16;
      -[HMDHome payloadFromEnableRegistrations:disableRegistration:source:](self, "payloadFromEnableRegistrations:disableRegistration:source:", v11, v12, v10);
      v23 = objc_claimAutoreleasedReturnValue();
      v24 = [HMDRemoteDeviceMessageDestination alloc];
      -[HMDHome messageTargetUUID](self, "messageTargetUUID");
      v25 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v15, "device");
      v26 = (void *)objc_claimAutoreleasedReturnValue();
      v27 = -[HMDRemoteDeviceMessageDestination initWithTarget:device:](v24, "initWithTarget:device:", v25, v26);

      v37 = (void *)v23;
      v28 = -[HMDRemoteMessage initWithName:destination:payload:type:timeout:secure:]([HMDRemoteMessage alloc], "initWithName:destination:payload:type:timeout:secure:", CFSTR("HMD.UP.BU.RoR"), v27, v23, 0, 1, 0.0);
      v39[0] = MEMORY[0x24BDAC760];
      v39[1] = 3221225472;
      v39[2] = __146__HMDHome_BulletinNotifications__updateBulletinRegistrationOnPrimaryResidentWithSource_enableRegistrations_disableRegistration_completionHandler___block_invoke;
      v39[3] = &unk_24E7961A0;
      v39[4] = self;
      v40 = v13;
      v29 = (void *)MEMORY[0x227676638](-[HMDRemoteMessage setResponseHandler:](v28, "setResponseHandler:", v39));
      v30 = self;
      HMFGetOSLogHandle();
      v31 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v31, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v35 = v29;
        v32 = (void *)objc_claimAutoreleasedReturnValue();
        -[HMFObject shortDescription](v28, "shortDescription");
        v36 = v27;
        v33 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543874;
        v42 = v32;
        v43 = 2112;
        v44 = v33;
        v45 = 2112;
        v46 = v15;
        _os_log_impl(&dword_2218F0000, v31, OS_LOG_TYPE_INFO, "%{public}@Sending bulletin notification registration message %@ to primary resident: %@", buf, 0x20u);

        v27 = v36;
        v29 = v35;
      }

      objc_autoreleasePoolPop(v29);
      -[HMDHome residentSyncManager](v30, "residentSyncManager");
      v34 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v34, "performResidentRequest:options:", v28, 0);

      v16 = v38;
    }
    objc_autoreleasePoolPop(v16);
  }
  else
  {
    v19 = self;
    HMFGetOSLogHandle();
    v20 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v42 = v21;
      _os_log_impl(&dword_2218F0000, v20, OS_LOG_TYPE_ERROR, "%{public}@Could not find primary resident to send bulletin registration request", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v16);
    objc_msgSend(MEMORY[0x24BDD1540], "hmErrorWithCode:", 91);
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    if (v13)
      (*((void (**)(id, void *))v13 + 2))(v13, v22);

  }
}

- (id)payloadFromEnableRegistrations:(id)a3 disableRegistration:(id)a4 source:(id)a5
{
  id v8;
  id v9;
  id v10;
  void *v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  void *v17;
  _QWORD v19[3];
  _QWORD v20[4];

  v20[3] = *MEMORY[0x24BDAC8D0];
  v8 = a3;
  v9 = a4;
  v10 = a5;
  -[HMDHome payloadFromRegistrations:](self, "payloadFromRegistrations:", v8);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v12 = objc_msgSend(v11, "count");
  if (v12 != objc_msgSend(v8, "count"))
  {
    _HMFPreconditionFailure();
    goto LABEL_6;
  }
  -[HMDHome payloadFromRegistrations:](self, "payloadFromRegistrations:", v9);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  v14 = objc_msgSend(v13, "count");
  if (v14 != objc_msgSend(v9, "count"))
  {
LABEL_6:
    _HMFPreconditionFailure();
LABEL_7:
    _HMFPreconditionFailure();
  }
  objc_msgSend(v10, "serializedRegistrationForRemoteMessage");
  v15 = objc_claimAutoreleasedReturnValue();
  if (!v15)
    goto LABEL_7;
  v16 = (void *)v15;
  v19[0] = CFSTR("HMD.S.BU");
  v19[1] = CFSTR("HMD.EN.BU");
  v20[0] = v15;
  v20[1] = v11;
  v19[2] = CFSTR("HMD.DIS.BU");
  v20[2] = v13;
  objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v20, v19, 3);
  v17 = (void *)objc_claimAutoreleasedReturnValue();

  return v17;
}

- (id)payloadFromRegistrations:(id)a3
{
  void *v4;
  id v5;
  void *v6;
  id v7;
  void *v8;
  id v9;
  _QWORD v11[5];
  id v12;

  v4 = (void *)MEMORY[0x24BDBCEB8];
  v5 = a3;
  objc_msgSend(v4, "arrayWithCapacity:", objc_msgSend(v5, "count"));
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v11[0] = MEMORY[0x24BDAC760];
  v11[1] = 3221225472;
  v11[2] = __59__HMDHome_BulletinNotifications__payloadFromRegistrations___block_invoke;
  v11[3] = &unk_24E779388;
  v11[4] = self;
  v7 = v6;
  v12 = v7;
  objc_msgSend(v5, "hmf_enumerateWithAutoreleasePoolUsingBlock:", v11);

  v8 = v12;
  v9 = v7;

  return v9;
}

- (id)registrationsFromPayload:(id)a3 enabled:(BOOL)a4
{
  const __CFString *v6;
  void *v7;
  void *v8;
  id v9;
  void *v10;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, void *);
  void *v15;
  HMDHome *v16;
  id v17;

  if (a4)
    v6 = CFSTR("HMD.EN.BU");
  else
    v6 = CFSTR("HMD.DIS.BU");
  objc_msgSend(a3, "objectForKeyedSubscript:", v6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x24BDBCEF0], "set");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v12 = MEMORY[0x24BDAC760];
  v13 = 3221225472;
  v14 = __67__HMDHome_BulletinNotifications__registrationsFromPayload_enabled___block_invoke;
  v15 = &unk_24E79B878;
  v16 = self;
  v17 = v8;
  v9 = v8;
  objc_msgSend(v7, "hmf_enumerateWithAutoreleasePoolUsingBlock:", &v12);
  v10 = (void *)objc_msgSend(v9, "copy", v12, v13, v14, v15, v16);

  return v10;
}

- (id)registrationSourceFromPayload:(id)a3
{
  void *v3;
  HMDBulletinNotificationRegistrationSource *v4;

  objc_msgSend(a3, "objectForKeyedSubscript:", CFSTR("HMD.S.BU"));
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  if (v3)
    v4 = -[HMDBulletinNotificationRegistrationSource initWithDictionary:]([HMDBulletinNotificationRegistrationSource alloc], "initWithDictionary:", v3);
  else
    v4 = 0;

  return v4;
}

- (void)registerForBulletinNotificationRegistrationHandlersUsingPolicies:(id)a3
{
  void *v4;
  id v5;

  v5 = a3;
  if (isTVOSDevice())
  {
    -[HMDHome msgDispatcher](self, "msgDispatcher");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "registerForMessage:receiver:policies:selector:", CFSTR("HMD.UP.BU.RoR"), self, v5, sel_handleUpdateBulletinRegistrations_);

  }
}

- (void)handleUpdateBulletinRegistrations:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  _QWORD v7[5];

  v4 = a3;
  objc_msgSend(v4, "dictionaryForKey:", CFSTR("$HMDRS$"));
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  if (v5)
  {
    -[HMDHome residentSyncManager](self, "residentSyncManager");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v7[0] = MEMORY[0x24BDAC760];
    v7[1] = 3221225472;
    v7[2] = __68__HMDHome_BulletinNotifications__handleUpdateBulletinRegistrations___block_invoke;
    v7[3] = &unk_24E79BF48;
    v7[4] = self;
    objc_msgSend(v6, "interceptRemoteResidentRequest:proceed:", v4, v7);

  }
  else
  {
    -[HMDHome _performUpdateBulletinRegistrations:](self, "_performUpdateBulletinRegistrations:", v4);
  }

}

- (void)_performUpdateBulletinRegistrations:(id)a3
{
  id v4;
  void *v5;
  HMDHome *v6;
  NSObject *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  HMDHome *v18;
  NSObject *v19;
  void *v20;
  _QWORD v21[4];
  id v22;
  uint8_t buf[4];
  void *v24;
  __int16 v25;
  void *v26;
  uint64_t v27;

  v27 = *MEMORY[0x24BDAC8D0];
  v4 = a3;
  v5 = (void *)MEMORY[0x227676638]();
  v6 = self;
  HMFGetOSLogHandle();
  v7 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "messagePayload");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543618;
    v24 = v8;
    v25 = 2112;
    v26 = v9;
    _os_log_impl(&dword_2218F0000, v7, OS_LOG_TYPE_INFO, "%{public}@Received message to update bulletin notifications : [%@]", buf, 0x16u);

  }
  objc_autoreleasePoolPop(v5);
  v10 = (void *)MEMORY[0x227676638]();
  objc_msgSend(v4, "messagePayload");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHome registrationSourceFromPayload:](v6, "registrationSourceFromPayload:", v11);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  if (v12)
  {
    -[HMDHome registrationsFromPayload:enabled:](v6, "registrationsFromPayload:enabled:", v11, 1);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHome registrationsFromPayload:enabled:](v6, "registrationsFromPayload:enabled:", v11, 0);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHome backingStore](v6, "backingStore");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v15, "context");
    v16 = (void *)objc_claimAutoreleasedReturnValue();

    v21[0] = MEMORY[0x24BDAC760];
    v21[1] = 3221225472;
    v21[2] = __70__HMDHome_BulletinNotifications___performUpdateBulletinRegistrations___block_invoke;
    v21[3] = &unk_24E79BD80;
    v22 = v4;
    -[HMDHome updateEnabledBulletinRegistrations:disabledBulletinRegistrations:source:context:completionHandler:](v6, "updateEnabledBulletinRegistrations:disabledBulletinRegistrations:source:context:completionHandler:", v13, v14, v12, v16, v21);

  }
  else
  {
    v17 = (void *)MEMORY[0x227676638]();
    v18 = v6;
    HMFGetOSLogHandle();
    v19 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v24 = v20;
      v25 = 2112;
      v26 = v11;
      _os_log_impl(&dword_2218F0000, v19, OS_LOG_TYPE_ERROR, "%{public}@Unable to decode registration source from payload: %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v17);
    objc_msgSend(MEMORY[0x24BDD1540], "hmfUnspecifiedError");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "respondWithError:", v13);
  }

  objc_autoreleasePoolPop(v10);
}

- (void)updateEnabledBulletinRegistrations:(id)a3 disabledBulletinRegistrations:(id)a4 source:(id)a5 context:(id)a6 completionHandler:(id)a7
{
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  void *v17;
  HMDHome *v18;
  NSObject *v19;
  void *v20;
  void *v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  _QWORD v28[4];
  id v29;
  id v30;
  HMDHome *v31;
  id v32;
  id v33;
  id v34;
  id v35;
  uint8_t buf[4];
  void *v37;
  __int16 v38;
  id v39;
  __int16 v40;
  id v41;
  __int16 v42;
  id v43;
  uint64_t v44;

  v44 = *MEMORY[0x24BDAC8D0];
  v12 = a3;
  v13 = a4;
  v14 = a5;
  v15 = a6;
  v16 = a7;
  v17 = (void *)MEMORY[0x227676638]();
  v18 = self;
  HMFGetOSLogHandle();
  v19 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138544130;
    v37 = v20;
    v38 = 2112;
    v39 = v14;
    v40 = 2112;
    v41 = v12;
    v42 = 2112;
    v43 = v13;
    _os_log_impl(&dword_2218F0000, v19, OS_LOG_TYPE_INFO, "%{public}@Updating bulletin registrations for source: %@ enabled: %@ disabled: %@", buf, 0x2Au);

  }
  objc_autoreleasePoolPop(v17);
  objc_msgSend(v14, "userUUID");
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  v28[0] = MEMORY[0x24BDAC760];
  v28[1] = 3221225472;
  v28[2] = __132__HMDHome_BulletinNotifications__updateEnabledBulletinRegistrations_disabledBulletinRegistrations_source_context_completionHandler___block_invoke;
  v28[3] = &unk_24E798170;
  v29 = v21;
  v30 = v15;
  v34 = v12;
  v35 = v16;
  v31 = v18;
  v32 = v14;
  v33 = v13;
  v22 = v12;
  v23 = v13;
  v24 = v14;
  v25 = v16;
  v26 = v15;
  v27 = v21;
  objc_msgSend(v26, "unsafeSynchronousBlock:", v28);

}

- (BOOL)enableBulletinRegistrations:(id)a3 source:(id)a4 homeMember:(id)a5 context:(id)a6
{
  id v10;
  id v11;
  id v12;
  id v13;
  void *v14;
  id v15;
  id v16;
  id v17;
  _QWORD v19[5];
  id v20;
  id v21;
  id v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  char v27;

  v10 = a3;
  v11 = a4;
  v12 = a5;
  v13 = a6;
  objc_msgSend(v13, "managedObjectContext");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v14, "hmd_assertIsExecuting");

  v24 = 0;
  v25 = &v24;
  v26 = 0x2020000000;
  v27 = 1;
  v19[0] = MEMORY[0x24BDAC760];
  v19[1] = 3221225472;
  v19[2] = __88__HMDHome_BulletinNotifications__enableBulletinRegistrations_source_homeMember_context___block_invoke;
  v19[3] = &unk_24E7793D8;
  v19[4] = self;
  v15 = v11;
  v20 = v15;
  v16 = v12;
  v21 = v16;
  v17 = v13;
  v22 = v17;
  v23 = &v24;
  objc_msgSend(v10, "hmf_enumerateWithAutoreleasePoolUsingBlock:", v19);
  LOBYTE(self) = *((_BYTE *)v25 + 24);

  _Block_object_dispose(&v24, 8);
  return (char)self;
}

- (void)disableBulletinRegistrations:(id)a3 source:(id)a4 homeMember:(id)a5 context:(id)a6
{
  id v10;
  id v11;
  id v12;
  id v13;
  void *v14;
  id v15;
  id v16;
  id v17;
  _QWORD v18[5];
  id v19;
  id v20;
  id v21;

  v10 = a4;
  v11 = a5;
  v12 = a6;
  v13 = a3;
  objc_msgSend(v12, "managedObjectContext");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v14, "hmd_assertIsExecuting");

  v18[0] = MEMORY[0x24BDAC760];
  v18[1] = 3221225472;
  v18[2] = __89__HMDHome_BulletinNotifications__disableBulletinRegistrations_source_homeMember_context___block_invoke;
  v18[3] = &unk_24E779400;
  v18[4] = self;
  v19 = v10;
  v20 = v11;
  v21 = v12;
  v15 = v12;
  v16 = v11;
  v17 = v10;
  objc_msgSend(v13, "hmf_enumerateWithAutoreleasePoolUsingBlock:", v18);

}

- (void)maybeRemoveStaleRegistrationsFromPreviousUserForSource:(id)a3 homeMember:(id)a4 context:(id)a5
{
  id v8;
  id v9;
  id v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  int v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  id v24;
  void *v25;
  HMDHome *v26;
  NSObject *v27;
  void *v28;
  void *v29;
  HMDHome *v30;
  NSObject *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  _QWORD v36[4];
  id v37;
  id v38;
  uint8_t buf[4];
  void *v40;
  __int16 v41;
  void *v42;
  __int16 v43;
  void *v44;
  _QWORD v45[4];

  v45[2] = *MEMORY[0x24BDAC8D0];
  v8 = a3;
  v9 = a4;
  v10 = a5;
  objc_msgSend(v10, "managedObjectContext");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "hmd_assertIsExecuting");

  v35 = v8;
  objc_msgSend(v8, "deviceAddress");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v12, "idsIdentifier");
  v13 = (void *)objc_claimAutoreleasedReturnValue();

  +[_MKFBulletinRegistration fetchRequest](_MKFBulletinRegistration, "fetchRequest");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x24BDD1758], "predicateWithFormat:", CFSTR("(%K == %@) && (%K != %@)"), CFSTR("deviceIdsIdentifier"), v13, CFSTR("user"), v9);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v14, "setPredicate:", v15);
  +[HMDCoreData featuresDataSource](HMDCoreData, "featuresDataSource");
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  v17 = objc_msgSend(v16, "isRestrictedGuestEnabled");

  if (v17)
  {
    objc_msgSend(MEMORY[0x24BDD1758], "predicateWithFormat:", CFSTR("(%K == %@) && (%K != %@)"), CFSTR("deviceIdsIdentifier"), v13, CFSTR("guest"), v9);
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    v19 = (void *)MEMORY[0x24BDD14C0];
    v45[0] = v15;
    v45[1] = v18;
    objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", v45, 2);
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v19, "orPredicateWithSubpredicates:", v20);
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v14, "setPredicate:", v21);

  }
  objc_msgSend(v10, "managedObjectContext");
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  v38 = 0;
  objc_msgSend(v22, "executeFetchRequest:error:", v14, &v38);
  v23 = (void *)objc_claimAutoreleasedReturnValue();
  v24 = v38;

  if (v23)
  {
    if (objc_msgSend(v23, "count"))
    {
      v25 = (void *)MEMORY[0x227676638]();
      v26 = self;
      HMFGetOSLogHandle();
      v27 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v27, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v33 = v25;
        v28 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543874;
        v40 = v28;
        v41 = 2112;
        v42 = v23;
        v43 = 2112;
        v44 = v13;
        _os_log_impl(&dword_2218F0000, v27, OS_LOG_TYPE_INFO, "%{public}@Deleting stale registrations: %@ for idsIdentifier: %@", buf, 0x20u);

        v25 = v33;
      }

      objc_autoreleasePoolPop(v25);
      v36[0] = MEMORY[0x24BDAC760];
      v36[1] = 3221225472;
      v36[2] = __108__HMDHome_BulletinNotifications__maybeRemoveStaleRegistrationsFromPreviousUserForSource_homeMember_context___block_invoke;
      v36[3] = &unk_24E78CED8;
      v37 = v10;
      objc_msgSend(v23, "na_each:", v36);

    }
  }
  else
  {
    v29 = (void *)MEMORY[0x227676638]();
    v30 = self;
    HMFGetOSLogHandle();
    v31 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v34 = v29;
      v32 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v40 = v32;
      v41 = 2112;
      v42 = v13;
      _os_log_impl(&dword_2218F0000, v31, OS_LOG_TYPE_ERROR, "%{public}@Failed to fetch bulletin registrations for idsIdentifier: %@", buf, 0x16u);

      v29 = v34;
    }

    objc_autoreleasePoolPop(v29);
  }

}

- (id)findBulletinRegistration:(id)a3 source:(id)a4 homeMember:(id)a5 context:(id)a6
{
  id v10;
  id v11;
  id v12;
  id v13;
  void *v14;
  void *v15;
  id v16;
  void *v17;
  id v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  uint64_t v26;
  void *v27;
  void *v28;
  void *v29;
  id v30;
  id v31;
  void *v32;
  id v33;
  void *v34;
  id v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  uint64_t v42;
  void *v43;
  id v44;
  void *v45;
  void *v46;
  void *v47;
  void *v48;
  HMDHome *v49;
  NSObject *v50;
  void *v51;
  id v52;
  void *v53;
  id v54;
  void *v55;
  void *v56;
  void *v57;
  void *v58;
  HMDHome *v59;
  NSObject *v60;
  void *v61;
  const char *v62;
  id v63;
  void *v64;
  id v65;
  void *v66;
  void *v67;
  void *v68;
  id v69;
  id v70;
  void *v71;
  void *v72;
  HMDHome *v73;
  NSObject *v74;
  uint64_t v75;
  HMDHome *v76;
  void *v77;
  HMDHome *v78;
  NSObject *v79;
  void *v80;
  void *v81;
  void *v82;
  const char *v83;
  HMDHome *v85;
  id v86;
  void *v87;
  id v88;
  void *v89;
  void *v90;
  uint8_t buf[4];
  void *v92;
  __int16 v93;
  id v94;
  uint64_t v95;

  v95 = *MEMORY[0x24BDAC8D0];
  v10 = a3;
  v11 = a4;
  v12 = a5;
  v13 = a6;
  objc_msgSend(v13, "managedObjectContext");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v14, "hmd_assertIsExecuting");

  objc_msgSend(MEMORY[0x24BDBCED8], "dictionary");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  v89 = v15;
  v90 = v11;
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
    {
      v31 = v10;
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0)
        v32 = v31;
      else
        v32 = 0;
      v30 = v32;

      v33 = v12;
      if (objc_msgSend(v33, "conformsToProtocol:", &unk_2557E6C28))
        v34 = v33;
      else
        v34 = 0;
      v35 = v34;

      if (v35)
      {
        objc_msgSend(v35, "home");
        v36 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v30, "cameraIdentifier");
        v87 = v30;
        v37 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v36, "findAccessoriesRelationOfTypeHAPAccessoryWithModelID:", v37);
        v38 = (void *)objc_claimAutoreleasedReturnValue();

        if (v38)
        {
          v15 = v89;
          objc_msgSend(v89, "setObject:forKeyedSubscript:", v38, CFSTR("HMD.BU.TUP.acc"));
          objc_msgSend(v11, "deviceAddress");
          v39 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v39, "idsIdentifier");
          v40 = (void *)objc_claimAutoreleasedReturnValue();
          v88 = v13;
          objc_msgSend(v13, "managedObjectContext");
          v41 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v38, "cameraSignificantEventBulletinRegistrationWithDeviceIdsIdentifier:user:context:", v40, v35, v41);
          v42 = objc_claimAutoreleasedReturnValue();
LABEL_52:
          v69 = v10;
          v70 = v12;
          v71 = (void *)v42;

          v30 = v71;
          v12 = v70;
          v10 = v69;
          goto LABEL_53;
        }
        v30 = v87;
        v72 = (void *)MEMORY[0x227676638]();
        v73 = self;
        HMFGetOSLogHandle();
        v74 = objc_claimAutoreleasedReturnValue();
        if (!os_log_type_enabled(v74, OS_LOG_TYPE_ERROR))
          goto LABEL_74;
        goto LABEL_66;
      }
      v58 = (void *)MEMORY[0x227676638]();
      v59 = self;
      HMFGetOSLogHandle();
      v60 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v60, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v61 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        v92 = v61;
        v93 = 2112;
        v94 = v33;
        v62 = "%{public}@Camera significant event bulletin notification registrations are not supported for guests : %@";
LABEL_69:
        _os_log_impl(&dword_2218F0000, v60, OS_LOG_TYPE_ERROR, v62, buf, 0x16u);

      }
    }
    else
    {
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0)
      {
        v31 = v10;
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0)
          v43 = v31;
        else
          v43 = 0;
        v30 = v43;

        v44 = v12;
        if (objc_msgSend(v44, "conformsToProtocol:", &unk_2557E6C28))
          v45 = v44;
        else
          v45 = 0;
        v35 = v45;

        if (v35)
        {
          objc_msgSend(v35, "home");
          v46 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v30, "accessoryUUID");
          v87 = v30;
          v47 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v46, "findAccessoriesRelationOfTypeHAPAccessoryWithModelID:", v47);
          v38 = (void *)objc_claimAutoreleasedReturnValue();

          if (v38)
          {
            v15 = v89;
            objc_msgSend(v89, "setObject:forKeyedSubscript:", v38, CFSTR("HMD.BU.TUP.acc"));
            objc_msgSend(v11, "deviceAddress");
            v39 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v39, "idsIdentifier");
            v40 = (void *)objc_claimAutoreleasedReturnValue();
            v88 = v13;
            objc_msgSend(v13, "managedObjectContext");
            v41 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v38, "cameraAccessModeBulletinRegistrationWithDeviceIdsIdentifier:user:context:", v40, v35, v41);
            v42 = objc_claimAutoreleasedReturnValue();
            goto LABEL_52;
          }
          v30 = v87;
          v72 = (void *)MEMORY[0x227676638]();
          v73 = self;
          HMFGetOSLogHandle();
          v74 = objc_claimAutoreleasedReturnValue();
          if (!os_log_type_enabled(v74, OS_LOG_TYPE_ERROR))
            goto LABEL_74;
LABEL_66:
          HMFGetLogIdentifier();
          v81 = v72;
          v82 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543618;
          v92 = v82;
          v93 = 2112;
          v94 = v31;
          v83 = "%{public}@Unable to find the accessory : %@";
          goto LABEL_73;
        }
        v58 = (void *)MEMORY[0x227676638]();
        v59 = self;
        HMFGetOSLogHandle();
        v60 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v60, OS_LOG_TYPE_ERROR))
        {
          HMFGetLogIdentifier();
          v61 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543618;
          v92 = v61;
          v93 = 2112;
          v94 = v44;
          v62 = "%{public}@Camera access bulletin notification registrations are not supported for guests : %@";
          goto LABEL_69;
        }
      }
      else
      {
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0)
        {
          v31 = v10;
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) != 0)
            v53 = v31;
          else
            v53 = 0;
          v30 = v53;

          v54 = v12;
          if (objc_msgSend(v54, "conformsToProtocol:", &unk_2557E6C28))
            v55 = v54;
          else
            v55 = 0;
          v35 = v55;

          if (v35)
          {
            objc_msgSend(v35, "home");
            v56 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v30, "accessoryUUID");
            v87 = v30;
            v57 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v56, "findAccessoriesRelationOfTypeHAPAccessoryWithModelID:", v57);
            v38 = (void *)objc_claimAutoreleasedReturnValue();

            if (v38)
            {
              v15 = v89;
              objc_msgSend(v89, "setObject:forKeyedSubscript:", v38, CFSTR("HMD.BU.TUP.acc"));
              objc_msgSend(v11, "deviceAddress");
              v39 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v39, "idsIdentifier");
              v40 = (void *)objc_claimAutoreleasedReturnValue();
              v88 = v13;
              objc_msgSend(v13, "managedObjectContext");
              v41 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v38, "cameraReachabilityBulletinRegistrationWithDeviceIdsIdentifier:user:context:", v40, v35, v41);
              v42 = objc_claimAutoreleasedReturnValue();
              goto LABEL_52;
            }
            v30 = v87;
            v72 = (void *)MEMORY[0x227676638]();
            v73 = self;
            HMFGetOSLogHandle();
            v74 = objc_claimAutoreleasedReturnValue();
            if (!os_log_type_enabled(v74, OS_LOG_TYPE_ERROR))
              goto LABEL_74;
            goto LABEL_66;
          }
          v58 = (void *)MEMORY[0x227676638]();
          v59 = self;
          HMFGetOSLogHandle();
          v60 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v60, OS_LOG_TYPE_ERROR))
          {
            HMFGetLogIdentifier();
            v61 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 138543618;
            v92 = v61;
            v93 = 2112;
            v94 = v54;
            v62 = "%{public}@Camera reachability bulletin notification registrations are not supported for guests : %@";
            goto LABEL_69;
          }
        }
        else
        {
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) == 0)
          {
            v88 = v13;
            v75 = MEMORY[0x227676638]();
            v76 = self;
            v77 = (void *)v75;
            v78 = v76;
            HMFGetOSLogHandle();
            v79 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v79, OS_LOG_TYPE_INFO))
            {
              HMFGetLogIdentifier();
              v80 = (void *)objc_claimAutoreleasedReturnValue();
              *(_DWORD *)buf = 138543618;
              v92 = v80;
              v93 = 2112;
              v94 = v10;
              _os_log_impl(&dword_2218F0000, v79, OS_LOG_TYPE_INFO, "%{public}@(b) Unknown bulletin registration type found. Ignoring it : %@", buf, 0x16u);

            }
            objc_autoreleasePoolPop(v77);
            v30 = 0;
            goto LABEL_53;
          }
          v63 = v10;
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) != 0)
            v64 = v63;
          else
            v64 = 0;
          v30 = v64;

          v65 = v12;
          if (objc_msgSend(v65, "conformsToProtocol:", &unk_2557E6C28))
            v66 = v65;
          else
            v66 = 0;
          v35 = v66;

          if (v35)
          {
            objc_msgSend(v35, "home");
            v67 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v30, "accessoryUUID");
            v87 = v30;
            v68 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v67, "findAccessoriesRelationOfTypeAppleMediaAccessoryWithModelID:", v68);
            v38 = (void *)objc_claimAutoreleasedReturnValue();

            if (v38)
            {
              v15 = v89;
              objc_msgSend(v89, "setObject:forKeyedSubscript:", v38, CFSTR("HMD.BU.TUP.acc"));
              objc_msgSend(v11, "deviceAddress");
              v39 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v39, "idsIdentifier");
              v40 = (void *)objc_claimAutoreleasedReturnValue();
              v88 = v13;
              objc_msgSend(v13, "managedObjectContext");
              v41 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v38, "analysisBulletinRegistrationWithDeviceIdsIdentifier:user:context:", v40, v35, v41);
              v42 = objc_claimAutoreleasedReturnValue();
              goto LABEL_52;
            }
            v30 = v87;
            v72 = (void *)MEMORY[0x227676638]();
            v73 = self;
            HMFGetOSLogHandle();
            v74 = objc_claimAutoreleasedReturnValue();
            if (!os_log_type_enabled(v74, OS_LOG_TYPE_ERROR))
              goto LABEL_74;
            HMFGetLogIdentifier();
            v81 = v72;
            v82 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 138543618;
            v92 = v82;
            v93 = 2112;
            v94 = v63;
            v83 = "%{public}@Unable to find the accessory for audio analysis registration registration :%@";
LABEL_73:
            _os_log_impl(&dword_2218F0000, v74, OS_LOG_TYPE_ERROR, v83, buf, 0x16u);

            v72 = v81;
LABEL_74:

            objc_autoreleasePoolPop(v72);
            goto LABEL_75;
          }
          v58 = (void *)MEMORY[0x227676638]();
          v59 = self;
          HMFGetOSLogHandle();
          v60 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v60, OS_LOG_TYPE_ERROR))
          {
            HMFGetLogIdentifier();
            v61 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 138543618;
            v92 = v61;
            v93 = 2112;
            v94 = v65;
            v62 = "%{public}@Audio analysis event bulletin notification registrations are not supported for guests : %@";
            goto LABEL_69;
          }
        }
      }
    }

    objc_autoreleasePoolPop(v58);
LABEL_75:
    v52 = (id)MEMORY[0x24BDBD1B8];
    v15 = v89;
    goto LABEL_76;
  }
  v85 = self;
  v86 = v10;
  v16 = v10;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v17 = v16;
  else
    v17 = 0;
  v18 = v17;

  objc_msgSend(v18, "accessoryUUID");
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v18, "serviceInstanceID");
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v18, "characteristicInstanceID");
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "deviceAddress");
  v22 = v12;
  v23 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v23, "idsIdentifier");
  v24 = (void *)objc_claimAutoreleasedReturnValue();
  v88 = v13;
  objc_msgSend(v13, "managedObjectContext");
  v25 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v22, "characteristicBulletinRegistrationForAccessory:serviceInstanceID:characteristicInstanceID:deviceIdsIdentifier:context:", v19, v20, v21, v24, v25);
  v26 = objc_claimAutoreleasedReturnValue();

  v12 = v22;
  objc_msgSend(v22, "home");
  v27 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v18, "accessoryUUID");
  v28 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v27, "findAccessoriesRelationOfTypeHAPAccessoryWithModelID:", v28);
  v29 = (void *)objc_claimAutoreleasedReturnValue();

  if (v29)
  {
    v15 = v89;
    objc_msgSend(v89, "setObject:forKeyedSubscript:", v29, CFSTR("HMD.BU.TUP.acc"));

    v10 = v86;
    v30 = (id)v26;
LABEL_53:
    objc_msgSend(v15, "setObject:forKeyedSubscript:", v30, CFSTR("HMD.BU.TUP.bulletin"));
    v52 = v15;
    v13 = v88;
    goto LABEL_76;
  }
  v48 = (void *)MEMORY[0x227676638]();
  v49 = v85;
  HMFGetOSLogHandle();
  v50 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v50, OS_LOG_TYPE_ERROR))
  {
    HMFGetLogIdentifier();
    v51 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543618;
    v92 = v51;
    v93 = 2112;
    v94 = v16;
    _os_log_impl(&dword_2218F0000, v50, OS_LOG_TYPE_ERROR, "%{public}@Unable to find the accessory : %@", buf, 0x16u);

  }
  objc_autoreleasePoolPop(v48);

  v52 = (id)MEMORY[0x24BDBD1B8];
  v10 = v86;
  v13 = v88;
  v15 = v89;
  v30 = (id)v26;
LABEL_76:

  return v52;
}

- (BOOL)insertOrUpdateCharacteristicBulletinRegistration:(id)a3 source:(id)a4 managedBulletinRegistration:(id)a5 accessory:(id)a6 homeMember:(id)a7 context:(id)a8
{
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  id v29;
  void *v30;
  BOOL v31;
  void *v32;
  HMDHome *v33;
  NSObject *v34;
  void *v35;
  void *v36;
  void *v38;
  HMDHome *v39;
  NSObject *v40;
  void *v41;
  void *v42;
  id v43;
  char v44;
  uint8_t buf[4];
  void *v46;
  __int16 v47;
  id v48;
  __int16 v49;
  id v50;
  uint64_t v51;

  v51 = *MEMORY[0x24BDAC8D0];
  v14 = a3;
  v15 = a4;
  v16 = a5;
  v17 = a6;
  v18 = a7;
  v19 = a8;
  objc_msgSend(v19, "managedObjectContext");
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v20, "hmd_assertIsExecuting");

  if (v16
    || (v44 = 0,
        objc_msgSend(MEMORY[0x24BDD1880], "UUID"),
        v21 = (void *)objc_claimAutoreleasedReturnValue(),
        objc_msgSend(v18, "materializeOrCreateBulletinRegistrationsRelationOfTypeCharacteristicBulletinRegistrationWithModelID:createdNew:", v21, &v44), v16 = (id)objc_claimAutoreleasedReturnValue(), v21, v44))
  {
    objc_msgSend(v15, "deviceAddress");
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v22, "idsIdentifier");
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v16, "setDeviceIdsIdentifier:", v23);

    objc_msgSend(v15, "deviceAddress");
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v24, "idsDestination");
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v16, "setDeviceIdsDestination:", v25);

    objc_msgSend(v14, "characteristicInstanceID");
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v19, "managedObjectContext");
    v27 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v17, "characteristicFromInstanceID:context:", v26, v27);
    v28 = (void *)objc_claimAutoreleasedReturnValue();

    if (v28)
    {
      objc_msgSend(v16, "setCharacteristic:", v28);
      objc_msgSend(v14, "conditions");
      v29 = v18;
      v30 = (void *)objc_claimAutoreleasedReturnValue();
      v31 = -[HMDHome addBulletinConditions:on:context:](self, "addBulletinConditions:on:context:", v30, v16, v19);

      v18 = v29;
    }
    else
    {
      v32 = (void *)MEMORY[0x227676638]();
      v33 = self;
      HMFGetOSLogHandle();
      v34 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v42 = v32;
        v35 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v14, "characteristicInstanceID");
        v43 = v18;
        v36 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        v46 = v35;
        v47 = 2112;
        v48 = v36;
        _os_log_impl(&dword_2218F0000, v34, OS_LOG_TYPE_ERROR, "%{public}@Could not locate the characteristic with instance ID: %@", buf, 0x16u);

        v18 = v43;
        v32 = v42;
      }

      objc_autoreleasePoolPop(v32);
      v31 = 0;
    }

  }
  else
  {
    v38 = (void *)MEMORY[0x227676638]();
    v39 = self;
    HMFGetOSLogHandle();
    v40 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v40, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v41 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543874;
      v46 = v41;
      v47 = 2112;
      v48 = v18;
      v49 = 2112;
      v50 = v14;
      _os_log_impl(&dword_2218F0000, v40, OS_LOG_TYPE_ERROR, "%{public}@Unable to create or materialize characteristic bulletin registration on home member: %@, registration: %@", buf, 0x20u);

    }
    objc_autoreleasePoolPop(v38);
    v31 = 0;
  }

  return v31;
}

- (BOOL)addBulletinConditions:(id)a3 on:(id)a4 context:(id)a5
{
  id v8;
  id v9;
  id v10;
  void *v11;
  void *v12;
  uint64_t v13;
  id v14;
  id v15;
  id v16;
  _QWORD v18[5];
  id v19;
  id v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  char v25;
  _QWORD v26[4];
  id v27;

  v8 = a3;
  v9 = a4;
  v10 = a5;
  objc_msgSend(v10, "managedObjectContext");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "hmd_assertIsExecuting");

  objc_msgSend(v9, "conditions");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  v13 = MEMORY[0x24BDAC760];
  v26[0] = MEMORY[0x24BDAC760];
  v26[1] = 3221225472;
  v26[2] = __67__HMDHome_BulletinNotifications__addBulletinConditions_on_context___block_invoke;
  v26[3] = &unk_24E779428;
  v14 = v10;
  v27 = v14;
  objc_msgSend(v12, "hmf_enumerateWithAutoreleasePoolUsingBlock:", v26);

  v22 = 0;
  v23 = &v22;
  v24 = 0x2020000000;
  v25 = 1;
  v18[0] = v13;
  v18[1] = 3221225472;
  v18[2] = __67__HMDHome_BulletinNotifications__addBulletinConditions_on_context___block_invoke_2;
  v18[3] = &unk_24E779450;
  v21 = &v22;
  v18[4] = self;
  v15 = v9;
  v19 = v15;
  v16 = v14;
  v20 = v16;
  objc_msgSend(v8, "hmf_enumerateWithAutoreleasePoolUsingBlock:", v18);
  LOBYTE(v14) = *((_BYTE *)v23 + 24);

  _Block_object_dispose(&v22, 8);
  return (char)v14;
}

- (BOOL)addTimePeriodBulletinCondition:(id)a3 on:(id)a4
{
  id v6;
  id v7;
  void *v8;
  void *v9;
  void *v10;
  BOOL v11;
  void *v12;
  BOOL v13;
  BOOL v14;
  void *v15;
  HMDHome *v16;
  NSObject *v17;
  void *v18;
  HMDHome *v19;
  void *v20;
  const char *v21;
  HMDHome *v22;
  char v24;
  uint8_t buf[4];
  void *v26;
  __int16 v27;
  id v28;
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  v6 = a3;
  v7 = a4;
  v24 = 0;
  objc_msgSend(MEMORY[0x24BDD1880], "UUID");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "materializeOrCreateConditionsRelationOfTypeTimePeriodBulletinConditionWithModelID:createdNew:", v8, &v24);
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v24)
  {
    v15 = (void *)MEMORY[0x227676638]();
    v16 = self;
    HMFGetOSLogHandle();
    v17 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v26 = v18;
      v27 = 2112;
      v28 = v6;
      _os_log_impl(&dword_2218F0000, v17, OS_LOG_TYPE_ERROR, "%{public}@Unable to create the time period condition from %@", buf, 0x16u);
LABEL_12:

      goto LABEL_13;
    }
    goto LABEL_13;
  }
  objc_msgSend(v6, "startElement");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v11 = -[HMDHome addElement:toCondition:isStartElement:](self, "addElement:toCondition:isStartElement:", v10, v9, 1);

  if (!v11)
  {
    v15 = (void *)MEMORY[0x227676638]();
    v19 = self;
    HMFGetOSLogHandle();
    v17 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v6, "startElement");
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v26 = v18;
      v27 = 2112;
      v28 = v20;
      v21 = "%{public}@Unable to add start element to the condition: %@";
LABEL_11:
      _os_log_impl(&dword_2218F0000, v17, OS_LOG_TYPE_ERROR, v21, buf, 0x16u);

      goto LABEL_12;
    }
LABEL_13:

    objc_autoreleasePoolPop(v15);
    v14 = 0;
    goto LABEL_14;
  }
  objc_msgSend(v6, "endElement");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  v13 = -[HMDHome addElement:toCondition:isStartElement:](self, "addElement:toCondition:isStartElement:", v12, v9, 0);

  if (!v13)
  {
    v15 = (void *)MEMORY[0x227676638]();
    v22 = self;
    HMFGetOSLogHandle();
    v17 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v6, "startElement");
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v26 = v18;
      v27 = 2112;
      v28 = v20;
      v21 = "%{public}@Unable to add end element to the condition: %@";
      goto LABEL_11;
    }
    goto LABEL_13;
  }
  v14 = 1;
LABEL_14:

  return v14;
}

- (BOOL)addElement:(id)a3 toCondition:(id)a4 isStartElement:(BOOL)a5
{
  _BOOL8 v5;
  id v8;
  id v9;
  id v10;
  void *v11;
  id v12;
  BOOL v13;
  id v14;
  void *v15;
  BOOL v16;

  v5 = a5;
  v8 = a3;
  v9 = a4;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    v10 = v8;
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
      v11 = v10;
    else
      v11 = 0;
    v12 = v11;

    v13 = -[HMDHome addTimeOfDayTimePeriodElement:toCondition:isStartElement:](self, "addTimeOfDayTimePeriodElement:toCondition:isStartElement:", v12, v9, v5);
  }
  else
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0)
    {
      v16 = 0;
      goto LABEL_13;
    }
    v14 = v8;
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
      v15 = v14;
    else
      v15 = 0;
    v12 = v15;

    v13 = -[HMDHome addSunriseSunSetTimePeriodElement:toCondition:isStartElement:](self, "addSunriseSunSetTimePeriodElement:toCondition:isStartElement:", v12, v9, v5);
  }
  v16 = v13;

LABEL_13:
  return v16;
}

- (BOOL)addTimeOfDayTimePeriodElement:(id)a3 toCondition:(id)a4 isStartElement:(BOOL)a5
{
  _BOOL4 v5;
  id v8;
  id v9;
  void *v10;
  void *v11;
  int v12;
  void *v13;
  void *v14;
  void *v15;
  HMDHome *v16;
  NSObject *v17;
  void *v18;
  void *v19;
  unsigned __int8 v21;
  uint8_t buf[4];
  void *v23;
  __int16 v24;
  void *v25;
  __int16 v26;
  id v27;
  uint64_t v28;

  v5 = a5;
  v28 = *MEMORY[0x24BDAC8D0];
  v8 = a3;
  v9 = a4;
  v21 = 0;
  objc_msgSend(MEMORY[0x24BDD1880], "UUID");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  if (v5)
    objc_msgSend(v9, "materializeOrCreateStartElementRelationOfTypeTimeOfDayTimeSpecificationWithModelID:createdNew:", v10, &v21);
  else
    objc_msgSend(v9, "materializeOrCreateEndElementRelationOfTypeTimeOfDayTimeSpecificationWithModelID:createdNew:", v10, &v21);
  v11 = (void *)objc_claimAutoreleasedReturnValue();

  v12 = v21;
  if (v21)
  {
    objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedInteger:", objc_msgSend(v8, "hour"));
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "setHour:", v13);

    objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedInteger:", objc_msgSend(v8, "minute"));
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "setMinute:", v14);

  }
  else
  {
    v15 = (void *)MEMORY[0x227676638]();
    v16 = self;
    HMFGetOSLogHandle();
    v17 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      HMFBooleanToString();
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543874;
      v23 = v18;
      v24 = 2112;
      v25 = v19;
      v26 = 2112;
      v27 = v8;
      _os_log_impl(&dword_2218F0000, v17, OS_LOG_TYPE_ERROR, "%{public}@Unable to create time of day time period element: (start = %@) (element = %@)", buf, 0x20u);

    }
    objc_autoreleasePoolPop(v15);
  }

  return v12 != 0;
}

- (BOOL)addSunriseSunSetTimePeriodElement:(id)a3 toCondition:(id)a4 isStartElement:(BOOL)a5
{
  _BOOL4 v5;
  id v8;
  id v9;
  void *v10;
  void *v11;
  void *v12;
  HMDHome *v13;
  NSObject *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  char v22;
  uint8_t buf[4];
  void *v24;
  __int16 v25;
  void *v26;
  __int16 v27;
  id v28;
  uint64_t v29;

  v5 = a5;
  v29 = *MEMORY[0x24BDAC8D0];
  v8 = a3;
  v9 = a4;
  v22 = 0;
  objc_msgSend(MEMORY[0x24BDD1880], "UUID");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  if (v5)
    objc_msgSend(v9, "materializeOrCreateStartElementRelationOfTypeSunriseSunsetTimeSpecificationWithModelID:createdNew:", v10, &v22);
  else
    objc_msgSend(v9, "materializeOrCreateEndElementRelationOfTypeSunriseSunsetTimeSpecificationWithModelID:createdNew:", v10, &v22);
  v11 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v22)
  {
    v12 = (void *)MEMORY[0x227676638]();
    v13 = self;
    HMFGetOSLogHandle();
    v14 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      HMFBooleanToString();
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543874;
      v24 = v15;
      v25 = 2112;
      v26 = v16;
      v27 = 2112;
      v28 = v8;
      _os_log_impl(&dword_2218F0000, v14, OS_LOG_TYPE_ERROR, "%{public}@Unable to create sunrise sunset time period element: (start = %@) (element = %@)", buf, 0x20u);

    }
    objc_autoreleasePoolPop(v12);
  }
  objc_msgSend(v8, "significantEvent");
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "setSignificantEvent:", v17);

  v18 = (void *)MEMORY[0x24BDD16E0];
  objc_msgSend(v8, "offset");
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v18, "numberWithInteger:", HMDTimeOffsetFromDateComponents(v19, 0));
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "setOffsetSeconds:", v20);

  return 1;
}

- (BOOL)addPresenceBulletinCondition:(id)a3 on:(id)a4 context:(id)a5
{
  id v8;
  id v9;
  id v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  BOOL v16;
  void *v17;
  HMDHome *v18;
  NSObject *v19;
  void *v20;
  _QWORD v22[4];
  id v23;
  HMDHome *v24;
  id v25;
  _BYTE *v26;
  char v27;
  _BYTE buf[24];
  char v29;
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  v8 = a3;
  v9 = a4;
  v10 = a5;
  v27 = 0;
  objc_msgSend(MEMORY[0x24BDD1880], "UUID");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "materializeOrCreateConditionsRelationOfTypePresenceBulletinConditionWithModelID:createdNew:", v11, &v27);
  v12 = (void *)objc_claimAutoreleasedReturnValue();

  if (v27)
  {
    objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedInteger:", objc_msgSend(v8, "presenceEventType"));
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "setPresenceEventType:", v13);

    objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedInteger:", objc_msgSend(v8, "presenceEventUserType"));
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "setPresenceEventUserType:", v14);

    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = buf;
    *(_QWORD *)&buf[16] = 0x2020000000;
    v29 = 1;
    objc_msgSend(v8, "userUUIDs");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    v22[0] = MEMORY[0x24BDAC760];
    v22[1] = 3221225472;
    v22[2] = __74__HMDHome_BulletinNotifications__addPresenceBulletinCondition_on_context___block_invoke;
    v22[3] = &unk_24E779478;
    v23 = v10;
    v24 = self;
    v26 = buf;
    v25 = v12;
    objc_msgSend(v15, "hmf_enumerateWithAutoreleasePoolUsingBlock:", v22);

    v16 = *(_BYTE *)(*(_QWORD *)&buf[8] + 24) != 0;
    _Block_object_dispose(buf, 8);
  }
  else
  {
    v17 = (void *)MEMORY[0x227676638]();
    v18 = self;
    HMFGetOSLogHandle();
    v19 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      *(_QWORD *)&buf[4] = v20;
      *(_WORD *)&buf[12] = 2112;
      *(_QWORD *)&buf[14] = v8;
      _os_log_impl(&dword_2218F0000, v19, OS_LOG_TYPE_ERROR, "%{public}@Unable to create the presence condition from %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v17);
    v16 = 0;
  }

  return v16;
}

- (BOOL)insertOrUpdateCameraSignificantEventBulletinRegistration:(id)a3 source:(id)a4 managedBulletinRegistration:(id)a5 accessory:(id)a6 user:(id)a7 context:(id)a8
{
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  BOOL v29;
  void *v31;
  HMDHome *v32;
  NSObject *v33;
  void *v34;
  char v35;
  uint8_t buf[4];
  void *v37;
  __int16 v38;
  id v39;
  __int16 v40;
  id v41;
  uint64_t v42;

  v42 = *MEMORY[0x24BDAC8D0];
  v14 = a3;
  v15 = a4;
  v16 = a5;
  v17 = a6;
  v18 = a7;
  v19 = a8;
  if (v16
    || (v35 = 0,
        objc_msgSend(MEMORY[0x24BDD1880], "UUID"),
        v20 = (void *)objc_claimAutoreleasedReturnValue(),
        objc_msgSend(v18, "materializeOrCreateBulletinRegistrationsRelationOfTypeCameraSignificantEventBulletinRegistrationWithModelID:createdNew:", v20, &v35), v16 = (id)objc_claimAutoreleasedReturnValue(), v20, v35))
  {
    objc_msgSend(v15, "deviceAddress");
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v21, "idsIdentifier");
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v16, "setDeviceIdsIdentifier:", v22);

    objc_msgSend(v15, "deviceAddress");
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v23, "idsDestination");
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v16, "setDeviceIdsDestination:", v24);

    objc_msgSend(v16, "setAccessory:", v17);
    objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedInteger:", objc_msgSend(v14, "notificationModes"));
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v16, "setNotificationModes:", v25);

    objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedInteger:", objc_msgSend(v14, "significantEventTypes"));
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v16, "setSignificantEventTypes:", v26);

    objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedInteger:", objc_msgSend(v14, "personFamiliarityOptions"));
    v27 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v16, "setPersonFamiliarityOptions:", v27);

    objc_msgSend(v14, "conditions");
    v28 = (void *)objc_claimAutoreleasedReturnValue();
    v29 = -[HMDHome addBulletinConditions:on:context:](self, "addBulletinConditions:on:context:", v28, v16, v19);

  }
  else
  {
    v31 = (void *)MEMORY[0x227676638]();
    v32 = self;
    HMFGetOSLogHandle();
    v33 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v33, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v34 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543874;
      v37 = v34;
      v38 = 2112;
      v39 = v18;
      v40 = 2112;
      v41 = v14;
      _os_log_impl(&dword_2218F0000, v33, OS_LOG_TYPE_ERROR, "%{public}@Unable to create or materialize camera significant event bulletin registration on user: %@, registration: %@", buf, 0x20u);

    }
    objc_autoreleasePoolPop(v31);
    v29 = 0;
  }

  return v29;
}

- (BOOL)insertOrUpdateCameraReachabilityBulletinRegistration:(id)a3 source:(id)a4 managedBulletinRegistration:(id)a5 accessory:(id)a6 user:(id)a7 context:(id)a8
{
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  BOOL v26;
  void *v28;
  HMDHome *v29;
  NSObject *v30;
  void *v31;
  char v32;
  uint8_t buf[4];
  void *v34;
  __int16 v35;
  id v36;
  __int16 v37;
  id v38;
  uint64_t v39;

  v39 = *MEMORY[0x24BDAC8D0];
  v14 = a3;
  v15 = a4;
  v16 = a5;
  v17 = a6;
  v18 = a7;
  v19 = a8;
  if (v16
    || (v32 = 0,
        objc_msgSend(MEMORY[0x24BDD1880], "UUID"),
        v20 = (void *)objc_claimAutoreleasedReturnValue(),
        objc_msgSend(v18, "materializeOrCreateBulletinRegistrationsRelationOfTypeCameraReachabilityBulletinRegistrationWithModelID:createdNew:", v20, &v32), v16 = (id)objc_claimAutoreleasedReturnValue(), v20, v32))
  {
    objc_msgSend(v15, "deviceAddress");
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v21, "idsIdentifier");
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v16, "setDeviceIdsIdentifier:", v22);

    objc_msgSend(v15, "deviceAddress");
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v23, "idsDestination");
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v16, "setDeviceIdsDestination:", v24);

    objc_msgSend(v16, "setAccessory:", v17);
    objc_msgSend(v14, "conditions");
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    v26 = -[HMDHome addBulletinConditions:on:context:](self, "addBulletinConditions:on:context:", v25, v16, v19);

  }
  else
  {
    v28 = (void *)MEMORY[0x227676638]();
    v29 = self;
    HMFGetOSLogHandle();
    v30 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v31 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543874;
      v34 = v31;
      v35 = 2112;
      v36 = v18;
      v37 = 2112;
      v38 = v14;
      _os_log_impl(&dword_2218F0000, v30, OS_LOG_TYPE_ERROR, "%{public}@Unable to create or materialize camera reachability bulletin registration on user: %@, registration: %@", buf, 0x20u);

    }
    objc_autoreleasePoolPop(v28);
    v26 = 0;
  }

  return v26;
}

- (BOOL)insertOrUpdateAudioAnalysisEventBulletinRegistrations:(id)a3 source:(id)a4 managedBulletinRegistration:(id)a5 accessory:(id)a6 user:(id)a7 context:(id)a8
{
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  BOOL v27;
  void *v29;
  HMDHome *v30;
  NSObject *v31;
  void *v32;
  char v33;
  uint8_t buf[4];
  void *v35;
  __int16 v36;
  id v37;
  __int16 v38;
  id v39;
  uint64_t v40;

  v40 = *MEMORY[0x24BDAC8D0];
  v14 = a3;
  v15 = a4;
  v16 = a5;
  v17 = a6;
  v18 = a7;
  v19 = a8;
  if (v16
    || (v33 = 0,
        objc_msgSend(MEMORY[0x24BDD1880], "UUID"),
        v20 = (void *)objc_claimAutoreleasedReturnValue(),
        objc_msgSend(v18, "materializeOrCreateBulletinRegistrationsRelationOfTypeAnalysisEventBulletinRegistrationWithModelID:createdNew:", v20, &v33), v16 = (id)objc_claimAutoreleasedReturnValue(), v20, v33))
  {
    objc_msgSend(v15, "deviceAddress");
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v21, "idsIdentifier");
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v16, "setDeviceIdsIdentifier:", v22);

    objc_msgSend(v15, "deviceAddress");
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v23, "idsDestination");
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v16, "setDeviceIdsDestination:", v24);

    objc_msgSend(v16, "setAccessory:", v17);
    objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedInteger:", objc_msgSend(v14, "audioAnalysisClassifierOptions"));
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v16, "setClassifierOptions:", v25);

    objc_msgSend(v14, "conditions");
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    v27 = -[HMDHome addBulletinConditions:on:context:](self, "addBulletinConditions:on:context:", v26, v16, v19);

  }
  else
  {
    v29 = (void *)MEMORY[0x227676638]();
    v30 = self;
    HMFGetOSLogHandle();
    v31 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v32 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543874;
      v35 = v32;
      v36 = 2112;
      v37 = v18;
      v38 = 2112;
      v39 = v14;
      _os_log_impl(&dword_2218F0000, v31, OS_LOG_TYPE_ERROR, "%{public}@Unable to create or materialize audio analysis reachability bulletin registration on user: %@, registration: %@", buf, 0x20u);

    }
    objc_autoreleasePoolPop(v29);
    v27 = 0;
  }

  return v27;
}

- (BOOL)insertOrUpdateCameraAccessModeBulletinRegistration:(id)a3 source:(id)a4 managedBulletinRegistration:(id)a5 accessory:(id)a6 user:(id)a7 context:(id)a8
{
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  BOOL v26;
  void *v28;
  HMDHome *v29;
  NSObject *v30;
  void *v31;
  char v32;
  uint8_t buf[4];
  void *v34;
  __int16 v35;
  id v36;
  __int16 v37;
  id v38;
  uint64_t v39;

  v39 = *MEMORY[0x24BDAC8D0];
  v14 = a3;
  v15 = a4;
  v16 = a5;
  v17 = a6;
  v18 = a7;
  v19 = a8;
  if (v16
    || (v32 = 0,
        objc_msgSend(MEMORY[0x24BDD1880], "UUID"),
        v20 = (void *)objc_claimAutoreleasedReturnValue(),
        objc_msgSend(v18, "materializeOrCreateBulletinRegistrationsRelationOfTypeCameraAccessModeBulletinRegistrationWithModelID:createdNew:", v20, &v32), v16 = (id)objc_claimAutoreleasedReturnValue(), v20, v32))
  {
    objc_msgSend(v15, "deviceAddress");
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v21, "idsIdentifier");
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v16, "setDeviceIdsIdentifier:", v22);

    objc_msgSend(v15, "deviceAddress");
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v23, "idsDestination");
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v16, "setDeviceIdsDestination:", v24);

    objc_msgSend(v16, "setAccessory:", v17);
    objc_msgSend(v14, "conditions");
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    v26 = -[HMDHome addBulletinConditions:on:context:](self, "addBulletinConditions:on:context:", v25, v16, v19);

  }
  else
  {
    v28 = (void *)MEMORY[0x227676638]();
    v29 = self;
    HMFGetOSLogHandle();
    v30 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v31 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543874;
      v34 = v31;
      v35 = 2112;
      v36 = v18;
      v37 = 2112;
      v38 = v14;
      _os_log_impl(&dword_2218F0000, v30, OS_LOG_TYPE_ERROR, "%{public}@Unable to create or materialize camera reachability bulletin registration on user: %@, registration: %@", buf, 0x20u);

    }
    objc_autoreleasePoolPop(v28);
    v26 = 0;
  }

  return v26;
}

- (id)dumpBulletinNotificationRegistrationsState
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v37;
  void *v38;

  objc_msgSend(MEMORY[0x24BDBCED8], "dictionary");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHome accessoryBulletinNotificationManager](self, "accessoryBulletinNotificationManager");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "serviceRegistrationsForCurrentDevice");
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  if (v5)
  {
    objc_msgSend(v5, "description");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "setObject:forKeyedSubscript:", v6, CFSTR("Service Registrations (Local)"));

  }
  -[HMDHome accessoryBulletinNotificationManager](self, "accessoryBulletinNotificationManager");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "accessoryRegistrationsForCurrentDevice");
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  if (v8)
  {
    objc_msgSend(v8, "description");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "setObject:forKeyedSubscript:", v9, CFSTR("Accessory Characteristic Registrations (Local)"));

  }
  -[HMDHome accessoryBulletinNotificationManager](self, "accessoryBulletinNotificationManager");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "accessoryRegistrations");
  v11 = (void *)objc_claimAutoreleasedReturnValue();

  if (v11)
  {
    objc_msgSend(v11, "description");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "setObject:forKeyedSubscript:", v12, CFSTR("Accessory Characteristic Registrations"));

  }
  -[HMDHome cameraBulletinNotificationManager](self, "cameraBulletinNotificationManager", v11);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v13, "cameraSignificantEventRegistrationsForCurrentDevice");
  v14 = (void *)objc_claimAutoreleasedReturnValue();

  if (v14)
  {
    objc_msgSend(v14, "description");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "setObject:forKeyedSubscript:", v15, CFSTR("Camera Significant Event Registrations (Local)"));

  }
  -[HMDHome cameraBulletinNotificationManager](self, "cameraBulletinNotificationManager");
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v16, "cameraSignificantEventRegistrations");
  v17 = (void *)objc_claimAutoreleasedReturnValue();

  if (v17)
  {
    objc_msgSend(v17, "description");
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "setObject:forKeyedSubscript:", v18, CFSTR("Camera Significant Event Registrations"));

  }
  -[HMDHome cameraBulletinNotificationManager](self, "cameraBulletinNotificationManager");
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v19, "cameraReachabilityRegistrationsForCurrentDevice");
  v20 = (void *)objc_claimAutoreleasedReturnValue();

  if (v20)
  {
    objc_msgSend(v20, "description");
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "setObject:forKeyedSubscript:", v21, CFSTR("Camera Reachability Registrations (Local)"));

  }
  v38 = v8;
  -[HMDHome cameraBulletinNotificationManager](self, "cameraBulletinNotificationManager");
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v22, "cameraReachabilityRegistrations");
  v23 = (void *)objc_claimAutoreleasedReturnValue();

  if (v23)
  {
    objc_msgSend(v23, "description");
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "setObject:forKeyedSubscript:", v24, CFSTR("Camera Reachability Registrations"));

  }
  v25 = v5;
  -[HMDHome cameraBulletinNotificationManager](self, "cameraBulletinNotificationManager");
  v26 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v26, "cameraAccessModeRegistrationsForCurrentDevice");
  v27 = (void *)objc_claimAutoreleasedReturnValue();

  if (v27)
  {
    objc_msgSend(v27, "description");
    v28 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "setObject:forKeyedSubscript:", v28, CFSTR("Camera Access Mode Registrations (Local)"));

  }
  -[HMDHome cameraBulletinNotificationManager](self, "cameraBulletinNotificationManager");
  v29 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v29, "cameraAccessModeRegistrations");
  v30 = (void *)objc_claimAutoreleasedReturnValue();

  if (v30)
  {
    objc_msgSend(v30, "description");
    v31 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "setObject:forKeyedSubscript:", v31, CFSTR("Camera Access Mode Registrations"));

  }
  -[HMDHome audioAnalysisBulletinNotificationManager](self, "audioAnalysisBulletinNotificationManager");
  v32 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v32, "registrations");
  v33 = (void *)objc_claimAutoreleasedReturnValue();

  if (v33)
  {
    objc_msgSend(v33, "description");
    v34 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "setObject:forKeyedSubscript:", v34, CFSTR("Audio Analysis Registrations"));

  }
  v35 = (void *)objc_msgSend(v3, "copy");

  return v35;
}

void __74__HMDHome_BulletinNotifications__addPresenceBulletinCondition_on_context___block_invoke(uint64_t a1, void *a2, _BYTE *a3)
{
  id v5;
  void *v6;
  void *v7;
  int v8;
  void *v9;
  void *v10;
  void *v11;
  id v12;
  NSObject *v13;
  void *v14;
  int v15;
  void *v16;
  __int16 v17;
  id v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v5 = a2;
  objc_msgSend(*(id *)(a1 + 32), "managedObjectContext");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  +[_MKFHome findHomeMemberWithUUID:context:](_MKFHome, "findHomeMemberWithUUID:context:", v5, v6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  if (v7)
  {
    v8 = objc_msgSend(v7, "isRestrictedGuest");
    v9 = *(void **)(a1 + 48);
    if (v8)
    {
      objc_msgSend(v7, "castIfGuest");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v9, "addGuestsObject:", v10);
    }
    else
    {
      objc_msgSend(v7, "castIfUser");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v9, "addUsersObject:", v10);
    }

  }
  else
  {
    v11 = (void *)MEMORY[0x227676638]();
    v12 = *(id *)(a1 + 40);
    HMFGetOSLogHandle();
    v13 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      v15 = 138543618;
      v16 = v14;
      v17 = 2112;
      v18 = v5;
      _os_log_impl(&dword_2218F0000, v13, OS_LOG_TYPE_ERROR, "%{public}@Unable to find the user: %@", (uint8_t *)&v15, 0x16u);

    }
    objc_autoreleasePoolPop(v11);
    *a3 = 1;
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24) = 0;
  }

}

uint64_t __67__HMDHome_BulletinNotifications__addBulletinConditions_on_context___block_invoke(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(a1 + 32), "deleteObject:", a2);
}

void __67__HMDHome_BulletinNotifications__addBulletinConditions_on_context___block_invoke_2(uint64_t a1, void *a2, _BYTE *a3)
{
  id v5;
  id v6;
  void *v7;
  id v8;
  char v9;
  id v10;
  void *v11;
  void *v12;
  id v13;
  NSObject *v14;
  void *v15;
  int v16;
  void *v17;
  __int16 v18;
  id v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  v5 = a2;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    v6 = v5;
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
      v7 = v6;
    else
      v7 = 0;
    v8 = v7;

    v9 = objc_msgSend(*(id *)(a1 + 32), "addPresenceBulletinCondition:on:context:", v8, *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
LABEL_11:
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24) = v9;

    goto LABEL_15;
  }
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    v10 = v5;
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
      v11 = v10;
    else
      v11 = 0;
    v8 = v11;

    v9 = objc_msgSend(*(id *)(a1 + 32), "addTimePeriodBulletinCondition:on:", v8, *(_QWORD *)(a1 + 40));
    goto LABEL_11;
  }
  v12 = (void *)MEMORY[0x227676638]();
  v13 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v14 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
  {
    HMFGetLogIdentifier();
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    v16 = 138543618;
    v17 = v15;
    v18 = 2112;
    v19 = v5;
    _os_log_impl(&dword_2218F0000, v14, OS_LOG_TYPE_ERROR, "%{public}@Unknown bulletin condition found on the bulletin registration : %@", (uint8_t *)&v16, 0x16u);

  }
  objc_autoreleasePoolPop(v12);
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24) = 0;
LABEL_15:
  if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24))
    *a3 = 1;

}

uint64_t __108__HMDHome_BulletinNotifications__maybeRemoveStaleRegistrationsFromPreviousUserForSource_homeMember_context___block_invoke(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(a1 + 32), "deleteObject:", a2);
}

void __89__HMDHome_BulletinNotifications__disableBulletinRegistrations_source_homeMember_context___block_invoke(uint64_t a1, uint64_t a2)
{
  void *v3;
  id v4;

  objc_msgSend(*(id *)(a1 + 32), "findBulletinRegistration:source:homeMember:context:", a2, *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56));
  v4 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "objectForKeyedSubscript:", CFSTR("HMD.BU.TUP.bulletin"));
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  if (v3)
    objc_msgSend(*(id *)(a1 + 56), "deleteObject:", v3);

}

void __88__HMDHome_BulletinNotifications__enableBulletinRegistrations_source_homeMember_context___block_invoke(uint64_t a1, void *a2, _BYTE *a3)
{
  id v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;
  int v10;
  char v11;
  void *v12;
  id v13;
  void *v14;
  id v15;
  void *v16;
  id v17;
  void *v18;
  id v19;
  id v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  id v25;
  void *v26;
  int v27;
  void *v28;
  NSObject *v29;
  void *v30;
  void *v31;
  id v32;
  NSObject *v33;
  void *v34;
  int v35;
  void *v36;
  id v37;
  NSObject *v38;
  void *v39;
  id v40;
  void *v41;
  void *v42;
  id v43;
  NSObject *v44;
  void *v45;
  void *v46;
  id v47;
  int v48;
  char v49;
  void *v50;
  id v51;
  id v52;
  void *v53;
  id v54;
  void *v55;
  void *v56;
  void *v57;
  void *v58;
  int v59;
  void *v60;
  id v61;
  NSObject *v62;
  void *v63;
  void *v64;
  id v65;
  NSObject *v66;
  void *v67;
  id v68;
  void *v69;
  void *v70;
  void *v71;
  void *v72;
  void *v73;
  int v74;
  void *v75;
  id v76;
  NSObject *v77;
  void *v78;
  const char *v79;
  id v80;
  void *v81;
  void *v82;
  void *v83;
  int v84;
  char v85;
  id v86;
  void *v87;
  void *v88;
  void *v89;
  int v90;
  id v91;
  void *v92;
  id v93;
  void *v94;
  char v95;
  void *v96;
  id v97;
  NSObject *v98;
  void *v99;
  void *v100;
  const char *v101;
  void *v102;
  void *v103;
  id v104;
  NSObject *v105;
  void *v106;
  id v107;
  void *v108;
  void *v109;
  id v110;
  void *v111;
  char v112;
  void *v113;
  void *v114;
  id v115;
  id v116;
  id v117;
  void *v118;
  void *v119;
  id v120;
  id v121;
  id v122;
  void *v123;
  void *v124;
  _BYTE *v125;
  uint8_t buf[4];
  void *v127;
  __int16 v128;
  id v129;
  uint64_t v130;

  v130 = *MEMORY[0x24BDAC8D0];
  v5 = a2;
  objc_msgSend(*(id *)(a1 + 32), "findBulletinRegistration:source:homeMember:context:", v5, *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56));
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "objectForKeyedSubscript:", CFSTR("HMD.BU.TUP.bulletin"));
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "objectForKeyedSubscript:", CFSTR("HMD.BU.TUP.acc"));
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v8)
  {
    *a3 = 1;
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 24) = 0;
    v31 = (void *)MEMORY[0x227676638]();
    v32 = *(id *)(a1 + 32);
    HMFGetOSLogHandle();
    v33 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v33, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v34 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v127 = v34;
      v128 = 2112;
      v129 = v5;
      _os_log_impl(&dword_2218F0000, v33, OS_LOG_TYPE_ERROR, "%{public}@Did not find the accessory on which this bulletin needs to be applied upon. %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v31);
    goto LABEL_126;
  }
  v125 = a3;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    LOBYTE(v35) = 1;
    goto LABEL_39;
  }
  v9 = v8;
  v10 = objc_msgSend(v9, "conformsToProtocol:", &unk_255810480);
  v11 = v10;
  if (v10)
    v12 = v9;
  else
    v12 = 0;
  v121 = v12;

  v13 = v5;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v14 = v13;
  else
    v14 = 0;
  v15 = v14;

  v123 = v7;
  objc_msgSend(v7, "castIfAnalysisEventBulletinRegistration");
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  if ((v11 & 1) != 0)
  {
    v17 = v13;
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
      v18 = v17;
    else
      v18 = 0;
    v19 = v18;

    if (v16)
    {
      +[HMDBulletinNotificationRegistrationUtilities audioAnalysisNotificationRegistrationFromRemoteRegistration:](HMDBulletinNotificationRegistrationUtilities, "audioAnalysisNotificationRegistrationFromRemoteRegistration:", v16);
      v20 = (id)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v20, "registration");
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      v117 = v19;
      if ((objc_msgSend(v21, "isEqual:", v19) & 1) != 0)
      {
        objc_msgSend(v20, "source");
        v116 = v5;
        v22 = v16;
        v23 = v6;
        v24 = v8;
        v25 = v15;
        v26 = (void *)objc_claimAutoreleasedReturnValue();
        v27 = objc_msgSend(v26, "isEqual:", *(_QWORD *)(a1 + 40));

        v15 = v25;
        v8 = v24;
        v6 = v23;
        v16 = v22;
        v5 = v116;

        if (v27)
        {
          v28 = (void *)MEMORY[0x227676638]();
          v115 = *(id *)(a1 + 32);
          HMFGetOSLogHandle();
          v29 = objc_claimAutoreleasedReturnValue();
          v19 = v117;
          if (os_log_type_enabled(v29, OS_LOG_TYPE_INFO))
          {
            HMFGetLogIdentifier();
            v114 = v28;
            v30 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 138543618;
            v127 = v30;
            v128 = 2112;
            v129 = v117;
            _os_log_impl(&dword_2218F0000, v29, OS_LOG_TYPE_INFO, "%{public}@Audio Analysis bulletin registration: %@ matches existing registration, skipping", buf, 0x16u);

            v28 = v114;
          }

          objc_autoreleasePoolPop(v28);
          goto LABEL_36;
        }
      }
      else
      {

      }
      v19 = v117;
    }
    v40 = *(id *)(a1 + 48);
    if (objc_msgSend(v40, "conformsToProtocol:", &unk_2557E6C28))
      v41 = v40;
    else
      v41 = 0;
    v20 = v41;

    if (v20)
    {
      v35 = objc_msgSend(*(id *)(a1 + 32), "insertOrUpdateAudioAnalysisEventBulletinRegistrations:source:managedBulletinRegistration:accessory:user:context:", v19, *(_QWORD *)(a1 + 40), v16, v9, v20, *(_QWORD *)(a1 + 56));
LABEL_37:

      goto LABEL_38;
    }
    v42 = (void *)MEMORY[0x227676638]();
    v43 = *(id *)(a1 + 32);
    HMFGetOSLogHandle();
    v44 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v44, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v118 = v42;
      v45 = (void *)objc_claimAutoreleasedReturnValue();
      v46 = *(void **)(a1 + 48);
      *(_DWORD *)buf = 138543618;
      v127 = v45;
      v128 = 2112;
      v129 = v46;
      _os_log_impl(&dword_2218F0000, v44, OS_LOG_TYPE_ERROR, "%{public}@Audio analysis bulletin notification registrations are not supported for guests : %@", buf, 0x16u);

      v42 = v118;
    }

    objc_autoreleasePoolPop(v42);
    v20 = 0;
LABEL_36:
    v35 = 1;
    goto LABEL_37;
  }
  v36 = (void *)MEMORY[0x227676638]();
  v37 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v38 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v38, OS_LOG_TYPE_ERROR))
  {
    HMFGetLogIdentifier();
    v39 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543618;
    v127 = v39;
    v128 = 2112;
    v129 = v15;
    _os_log_impl(&dword_2218F0000, v38, OS_LOG_TYPE_ERROR, "%{public}@Unable to find the accessory : %@", buf, 0x16u);

  }
  objc_autoreleasePoolPop(v36);
  v35 = 1;
  *v125 = 1;
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 24) = 0;
LABEL_38:

  v7 = v123;
  if (!v35)
  {
LABEL_39:
    v47 = v8;
    v48 = objc_msgSend(v47, "conformsToProtocol:", &unk_255852958);
    v49 = v48;
    if (v48)
      v50 = v47;
    else
      v50 = 0;
    v51 = v50;

    if ((v49 & 1) == 0)
    {
      *v125 = 1;
      *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 24) = 0;
      v64 = (void *)MEMORY[0x227676638]();
      v65 = *(id *)(a1 + 32);
      HMFGetOSLogHandle();
      v66 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v66, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v67 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        v127 = v67;
        v128 = 2112;
        v129 = v5;
        _os_log_impl(&dword_2218F0000, v66, OS_LOG_TYPE_ERROR, "%{public}@Did not find the accessory on which this bulletin needs to be applied upon. %@", buf, 0x16u);

      }
      objc_autoreleasePoolPop(v64);
      goto LABEL_125;
    }
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
    {
      v52 = v5;
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0)
        v53 = v52;
      else
        v53 = 0;
      v54 = v53;

      v124 = v7;
      objc_msgSend(v7, "castIfCharacteristicBulletinRegistration");
      v55 = (void *)objc_claimAutoreleasedReturnValue();
      if (v55)
      {
        v122 = v51;
        +[HMDBulletinNotificationRegistrationUtilities accessoryRegistrationFromMKFRegistration:](HMDBulletinNotificationRegistrationUtilities, "accessoryRegistrationFromMKFRegistration:", v55);
        v56 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v56, "registration");
        v57 = (void *)objc_claimAutoreleasedReturnValue();
        if ((objc_msgSend(v57, "isEqual:", v54) & 1) != 0)
        {
          objc_msgSend(v56, "source");
          v119 = v56;
          v58 = (void *)objc_claimAutoreleasedReturnValue();
          v59 = objc_msgSend(v58, "isEqual:", *(_QWORD *)(a1 + 40));

          v56 = v119;
          if (v59)
          {
            v60 = (void *)MEMORY[0x227676638]();
            v61 = *(id *)(a1 + 32);
            HMFGetOSLogHandle();
            v62 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v62, OS_LOG_TYPE_INFO))
            {
              HMFGetLogIdentifier();
              v63 = (void *)objc_claimAutoreleasedReturnValue();
              *(_DWORD *)buf = 138543618;
              v127 = v63;
              v128 = 2112;
              v129 = v54;
              _os_log_impl(&dword_2218F0000, v62, OS_LOG_TYPE_INFO, "%{public}@Characteristic bulletin registration: %@ matches existing registration, skipping", buf, 0x16u);

              v56 = v119;
            }

            objc_autoreleasePoolPop(v60);
            goto LABEL_89;
          }
        }
        else
        {

        }
        v51 = v122;
      }
      v85 = objc_msgSend(*(id *)(a1 + 32), "insertOrUpdateCharacteristicBulletinRegistration:source:managedBulletinRegistration:accessory:homeMember:context:", v54, *(_QWORD *)(a1 + 40), v55, v47, *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56));

      v7 = v124;
      if ((v85 & 1) != 0)
        goto LABEL_125;
LABEL_120:
      *v125 = 1;
      *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 24) = 0;
      goto LABEL_125;
    }
    objc_opt_class();
    v122 = v51;
    if ((objc_opt_isKindOfClass() & 1) != 0)
    {
      v68 = v5;
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0)
        v69 = v68;
      else
        v69 = 0;
      v120 = v69;

      objc_msgSend(v7, "castIfCameraSignificantEventBulletinRegistration");
      v70 = (void *)objc_claimAutoreleasedReturnValue();
      if (v70)
      {
        v124 = v7;
        +[HMDBulletinNotificationRegistrationUtilities cameraSignificantEventRegistrationFromMKFRegistration:](HMDBulletinNotificationRegistrationUtilities, "cameraSignificantEventRegistrationFromMKFRegistration:", v70);
        v71 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v71, "registration");
        v72 = (void *)objc_claimAutoreleasedReturnValue();
        if ((objc_msgSend(v72, "isEqual:", v120) & 1) != 0)
        {
          objc_msgSend(v71, "source");
          v73 = (void *)objc_claimAutoreleasedReturnValue();
          v74 = objc_msgSend(v73, "isEqual:", *(_QWORD *)(a1 + 40));

          if (v74)
          {
            v75 = (void *)MEMORY[0x227676638]();
            v76 = *(id *)(a1 + 32);
            HMFGetOSLogHandle();
            v77 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v77, OS_LOG_TYPE_INFO))
            {
              HMFGetLogIdentifier();
              v78 = (void *)objc_claimAutoreleasedReturnValue();
              *(_DWORD *)buf = 138543618;
              v127 = v78;
              v128 = 2112;
              v129 = v120;
              v79 = "%{public}@Camera Significant Event bulletin registration: %@ matches existing registration, skipping";
LABEL_87:
              _os_log_impl(&dword_2218F0000, v77, OS_LOG_TYPE_INFO, v79, buf, 0x16u);

              goto LABEL_88;
            }
            goto LABEL_88;
          }
        }
        else
        {

        }
        v7 = v124;
      }
      v91 = *(id *)(a1 + 48);
      if (objc_msgSend(v91, "conformsToProtocol:", &unk_2557E6C28))
        v92 = v91;
      else
        v92 = 0;
      v93 = v92;

      if (v93)
      {
        v94 = v120;
        v95 = objc_msgSend(*(id *)(a1 + 32), "insertOrUpdateCameraSignificantEventBulletinRegistration:source:managedBulletinRegistration:accessory:user:context:", v120, *(_QWORD *)(a1 + 40), v70, v47, v93, *(_QWORD *)(a1 + 56));
        goto LABEL_119;
      }
      v96 = (void *)MEMORY[0x227676638]();
      v97 = *(id *)(a1 + 32);
      HMFGetOSLogHandle();
      v98 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v98, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v99 = (void *)objc_claimAutoreleasedReturnValue();
        v100 = *(void **)(a1 + 48);
        *(_DWORD *)buf = 138543618;
        v127 = v99;
        v128 = 2112;
        v129 = v100;
        v101 = "%{public}@Camera significant event bulletin notification registrations are not supported for guests : %@";
LABEL_123:
        _os_log_impl(&dword_2218F0000, v98, OS_LOG_TYPE_ERROR, v101, buf, 0x16u);

        goto LABEL_124;
      }
      goto LABEL_124;
    }
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
    {
      v80 = v5;
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0)
        v81 = v80;
      else
        v81 = 0;
      v120 = v81;

      objc_msgSend(v7, "castIfCameraAccessModeBulletinRegistration");
      v70 = (void *)objc_claimAutoreleasedReturnValue();
      if (v70)
      {
        v124 = v7;
        +[HMDBulletinNotificationRegistrationUtilities cameraAccessModeRegistrationFromMKFRegistration:](HMDBulletinNotificationRegistrationUtilities, "cameraAccessModeRegistrationFromMKFRegistration:", v70);
        v71 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v71, "registration");
        v82 = (void *)objc_claimAutoreleasedReturnValue();
        if ((objc_msgSend(v82, "isEqual:", v120) & 1) != 0)
        {
          objc_msgSend(v71, "source");
          v83 = (void *)objc_claimAutoreleasedReturnValue();
          v84 = objc_msgSend(v83, "isEqual:", *(_QWORD *)(a1 + 40));

          if (v84)
          {
            v75 = (void *)MEMORY[0x227676638]();
            v76 = *(id *)(a1 + 32);
            HMFGetOSLogHandle();
            v77 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v77, OS_LOG_TYPE_INFO))
            {
              HMFGetLogIdentifier();
              v78 = (void *)objc_claimAutoreleasedReturnValue();
              *(_DWORD *)buf = 138543618;
              v127 = v78;
              v128 = 2112;
              v129 = v120;
              v79 = "%{public}@Camera Access Mode bulletin registration: %@ matches existing registration, skipping";
              goto LABEL_87;
            }
LABEL_88:

            objc_autoreleasePoolPop(v75);
LABEL_89:
            v51 = v122;
            v7 = v124;
LABEL_125:

            goto LABEL_126;
          }
        }
        else
        {

        }
        v7 = v124;
      }
      v107 = *(id *)(a1 + 48);
      if (objc_msgSend(v107, "conformsToProtocol:", &unk_2557E6C28))
        v108 = v107;
      else
        v108 = 0;
      v93 = v108;

      if (!v93)
      {
        v96 = (void *)MEMORY[0x227676638]();
        v97 = *(id *)(a1 + 32);
        HMFGetOSLogHandle();
        v98 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v98, OS_LOG_TYPE_ERROR))
        {
          HMFGetLogIdentifier();
          v99 = (void *)objc_claimAutoreleasedReturnValue();
          v109 = *(void **)(a1 + 48);
          *(_DWORD *)buf = 138543618;
          v127 = v99;
          v128 = 2112;
          v129 = v109;
          v101 = "%{public}@Camera access mode bulletin notification registrations are not supported for guests : %@";
          goto LABEL_123;
        }
LABEL_124:

        objc_autoreleasePoolPop(v96);
        v51 = v122;
        goto LABEL_125;
      }
      v94 = v120;
      v95 = objc_msgSend(*(id *)(a1 + 32), "insertOrUpdateCameraAccessModeBulletinRegistration:source:managedBulletinRegistration:accessory:user:context:", v120, *(_QWORD *)(a1 + 40), v70, v47, v93, *(_QWORD *)(a1 + 56));
    }
    else
    {
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) == 0)
      {
        v102 = v7;
        v103 = (void *)MEMORY[0x227676638]();
        v104 = *(id *)(a1 + 32);
        HMFGetOSLogHandle();
        v105 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v105, OS_LOG_TYPE_ERROR))
        {
          HMFGetLogIdentifier();
          v106 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543618;
          v127 = v106;
          v128 = 2112;
          v129 = v5;
          _os_log_impl(&dword_2218F0000, v105, OS_LOG_TYPE_ERROR, "%{public}@(a) Unknown bulletin registration type found. Ignoring it : %@", buf, 0x16u);

        }
        objc_autoreleasePoolPop(v103);
        v7 = v102;
        v51 = v122;
        if ((v35 & 1) != 0)
          goto LABEL_125;
        goto LABEL_120;
      }
      v86 = v5;
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0)
        v87 = v86;
      else
        v87 = 0;
      v120 = v87;

      objc_msgSend(v7, "castIfCameraReachabilityBulletinRegistration");
      v70 = (void *)objc_claimAutoreleasedReturnValue();
      if (v70)
      {
        v124 = v7;
        +[HMDBulletinNotificationRegistrationUtilities cameraReachabilityRegistrationFromMKFRegistration:](HMDBulletinNotificationRegistrationUtilities, "cameraReachabilityRegistrationFromMKFRegistration:", v70);
        v71 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v71, "registration");
        v88 = (void *)objc_claimAutoreleasedReturnValue();
        if ((objc_msgSend(v88, "isEqual:", v120) & 1) != 0)
        {
          objc_msgSend(v71, "source");
          v89 = (void *)objc_claimAutoreleasedReturnValue();
          v90 = objc_msgSend(v89, "isEqual:", *(_QWORD *)(a1 + 40));

          if (v90)
          {
            v75 = (void *)MEMORY[0x227676638]();
            v76 = *(id *)(a1 + 32);
            HMFGetOSLogHandle();
            v77 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v77, OS_LOG_TYPE_INFO))
            {
              HMFGetLogIdentifier();
              v78 = (void *)objc_claimAutoreleasedReturnValue();
              *(_DWORD *)buf = 138543618;
              v127 = v78;
              v128 = 2112;
              v129 = v120;
              v79 = "%{public}@Camera Reachability bulletin registration: %@ matches existing registration, skipping";
              goto LABEL_87;
            }
            goto LABEL_88;
          }
        }
        else
        {

        }
        v7 = v124;
      }
      v110 = *(id *)(a1 + 48);
      if (objc_msgSend(v110, "conformsToProtocol:", &unk_2557E6C28))
        v111 = v110;
      else
        v111 = 0;
      v93 = v111;

      if (!v93)
      {
        v96 = (void *)MEMORY[0x227676638]();
        v97 = *(id *)(a1 + 32);
        HMFGetOSLogHandle();
        v98 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v98, OS_LOG_TYPE_ERROR))
        {
          HMFGetLogIdentifier();
          v99 = (void *)objc_claimAutoreleasedReturnValue();
          v113 = *(void **)(a1 + 48);
          *(_DWORD *)buf = 138543618;
          v127 = v99;
          v128 = 2112;
          v129 = v113;
          v101 = "%{public}@Camera reachability bulletin notification registrations are not supported for guests : %@";
          goto LABEL_123;
        }
        goto LABEL_124;
      }
      v94 = v120;
      v95 = objc_msgSend(*(id *)(a1 + 32), "insertOrUpdateCameraReachabilityBulletinRegistration:source:managedBulletinRegistration:accessory:user:context:", v120, *(_QWORD *)(a1 + 40), v70, v47, v93, *(_QWORD *)(a1 + 56));
    }
LABEL_119:
    v112 = v95;

    v51 = v122;
    if ((v112 & 1) != 0)
      goto LABEL_125;
    goto LABEL_120;
  }
LABEL_126:

}

void __132__HMDHome_BulletinNotifications__updateEnabledBulletinRegistrations_disabledBulletinRegistrations_source_context_completionHandler___block_invoke(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  char v8;
  void *v9;
  int v10;
  id v11;
  void *v12;
  uint64_t v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  uint64_t v20;
  void *v21;
  id v22;
  NSObject *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  void *v31;
  id v32;
  NSObject *v33;
  void *v34;
  void *v35;
  id v36;
  NSObject *v37;
  void *v38;
  uint64_t v39;
  _QWORD v40[4];
  id v41;
  _QWORD v42[4];
  id v43;
  id v44;
  uint8_t buf[4];
  void *v46;
  __int16 v47;
  void *v48;
  __int16 v49;
  void *v50;
  uint64_t v51;

  v51 = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(a1 + 32);
  objc_msgSend(*(id *)(a1 + 40), "managedObjectContext");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  +[_MKFHome findHomeMemberWithUUID:context:](_MKFHome, "findHomeMemberWithUUID:context:", v2, v3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v4)
  {
    v21 = (void *)MEMORY[0x227676638]();
    v22 = *(id *)(a1 + 48);
    HMFGetOSLogHandle();
    v23 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v24 = (void *)objc_claimAutoreleasedReturnValue();
      v25 = *(void **)(a1 + 32);
      *(_DWORD *)buf = 138543618;
      v46 = v24;
      v47 = 2112;
      v48 = v25;
      _os_log_impl(&dword_2218F0000, v23, OS_LOG_TYPE_ERROR, "%{public}@Unable to find the home member with UUID: %@", buf, 0x16u);
LABEL_13:

    }
LABEL_14:

    objc_autoreleasePoolPop(v21);
    v28 = *(_QWORD *)(a1 + 80);
    v29 = (void *)MEMORY[0x24BDD1540];
    v30 = 2;
    goto LABEL_15;
  }
  objc_msgSend(v4, "home");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "modelID");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 48), "uuid");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = objc_msgSend(v6, "isEqual:", v7);

  if ((v8 & 1) == 0)
  {
    v21 = (void *)MEMORY[0x227676638]();
    v22 = *(id *)(a1 + 48);
    HMFGetOSLogHandle();
    v23 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v24 = (void *)objc_claimAutoreleasedReturnValue();
      v26 = *(void **)(a1 + 32);
      objc_msgSend(*(id *)(a1 + 48), "uuid");
      v27 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543874;
      v46 = v24;
      v47 = 2112;
      v48 = v26;
      v49 = 2112;
      v50 = v27;
      _os_log_impl(&dword_2218F0000, v23, OS_LOG_TYPE_ERROR, "%{public}@Home member with UUID: %@ is not part of current home: %@", buf, 0x20u);

      goto LABEL_13;
    }
    goto LABEL_14;
  }
  objc_msgSend(*(id *)(a1 + 48), "maybeRemoveStaleRegistrationsFromPreviousUserForSource:homeMember:context:", *(_QWORD *)(a1 + 56), v4, *(_QWORD *)(a1 + 40));
  objc_msgSend(*(id *)(a1 + 48), "disableBulletinRegistrations:source:homeMember:context:", *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 56), v4, *(_QWORD *)(a1 + 40));
  if ((objc_msgSend(*(id *)(a1 + 48), "enableBulletinRegistrations:source:homeMember:context:", *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 56), v4, *(_QWORD *)(a1 + 40)) & 1) != 0)
  {
    v9 = *(void **)(a1 + 40);
    v44 = 0;
    v10 = objc_msgSend(v9, "save:", &v44);
    v11 = v44;
    v12 = v11;
    if (!v10 || v11)
    {
      v35 = (void *)MEMORY[0x227676638]();
      v36 = *(id *)(a1 + 48);
      HMFGetOSLogHandle();
      v37 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v37, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v38 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        v46 = v38;
        v47 = 2112;
        v48 = v12;
        _os_log_impl(&dword_2218F0000, v37, OS_LOG_TYPE_ERROR, "%{public}@Unable to save the bulletin registration changes requested, error: %@", buf, 0x16u);

      }
      objc_autoreleasePoolPop(v35);
      v39 = *(_QWORD *)(a1 + 80);
      if (v39)
        (*(void (**)(uint64_t, void *))(v39 + 16))(v39, v12);
    }
    else
    {
      v13 = MEMORY[0x24BDAC760];
      v42[0] = MEMORY[0x24BDAC760];
      v42[1] = 3221225472;
      v42[2] = __132__HMDHome_BulletinNotifications__updateEnabledBulletinRegistrations_disabledBulletinRegistrations_source_context_completionHandler___block_invoke_83;
      v42[3] = &unk_24E7793B0;
      v14 = *(void **)(a1 + 64);
      v43 = *(id *)(a1 + 56);
      objc_msgSend(v14, "na_map:", v42);
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      v16 = *(void **)(a1 + 72);
      v40[0] = v13;
      v40[1] = 3221225472;
      v40[2] = __132__HMDHome_BulletinNotifications__updateEnabledBulletinRegistrations_disabledBulletinRegistrations_source_context_completionHandler___block_invoke_2;
      v40[3] = &unk_24E7793B0;
      v41 = *(id *)(a1 + 56);
      objc_msgSend(v16, "na_map:", v40);
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(*(id *)(a1 + 48), "accessoryBulletinNotificationManager");
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v18, "handleDisabledRegistrations:", v15);

      objc_msgSend(*(id *)(a1 + 48), "accessoryBulletinNotificationManager");
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v19, "handleEnabledRegistrations:", v17);

      v20 = *(_QWORD *)(a1 + 80);
      if (v20)
        (*(void (**)(uint64_t, _QWORD))(v20 + 16))(v20, 0);

      v12 = 0;
    }
    goto LABEL_17;
  }
  v31 = (void *)MEMORY[0x227676638]();
  v32 = *(id *)(a1 + 48);
  HMFGetOSLogHandle();
  v33 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v33, OS_LOG_TYPE_ERROR))
  {
    HMFGetLogIdentifier();
    v34 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543362;
    v46 = v34;
    _os_log_impl(&dword_2218F0000, v33, OS_LOG_TYPE_ERROR, "%{public}@Unable to insert or update bulletin registrations", buf, 0xCu);

  }
  objc_autoreleasePoolPop(v31);
  objc_msgSend(*(id *)(a1 + 40), "reset");
  v28 = *(_QWORD *)(a1 + 80);
  v29 = (void *)MEMORY[0x24BDD1540];
  v30 = 43;
LABEL_15:
  objc_msgSend(v29, "hmErrorWithCode:", v30);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  if (v28)
    (*(void (**)(uint64_t, void *))(v28 + 16))(v28, v12);
LABEL_17:

}

HMDAccessoryBulletinNotificationRegistrationRemote *__132__HMDHome_BulletinNotifications__updateEnabledBulletinRegistrations_disabledBulletinRegistrations_source_context_completionHandler___block_invoke_83(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  HMDAccessoryBulletinNotificationRegistrationRemote *v6;

  v3 = a2;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v4 = v3;
  else
    v4 = 0;
  v5 = v4;
  if (v5)
    v6 = -[HMDAccessoryBulletinNotificationRegistrationRemote initWithAccessoryBulletinNotificationRegistration:source:]([HMDAccessoryBulletinNotificationRegistrationRemote alloc], "initWithAccessoryBulletinNotificationRegistration:source:", v5, *(_QWORD *)(a1 + 32));
  else
    v6 = 0;

  return v6;
}

HMDAccessoryBulletinNotificationRegistrationRemote *__132__HMDHome_BulletinNotifications__updateEnabledBulletinRegistrations_disabledBulletinRegistrations_source_context_completionHandler___block_invoke_2(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  HMDAccessoryBulletinNotificationRegistrationRemote *v6;

  v3 = a2;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v4 = v3;
  else
    v4 = 0;
  v5 = v4;
  if (v5)
    v6 = -[HMDAccessoryBulletinNotificationRegistrationRemote initWithAccessoryBulletinNotificationRegistration:source:]([HMDAccessoryBulletinNotificationRegistrationRemote alloc], "initWithAccessoryBulletinNotificationRegistration:source:", v5, *(_QWORD *)(a1 + 32));
  else
    v6 = 0;

  return v6;
}

uint64_t __70__HMDHome_BulletinNotifications___performUpdateBulletinRegistrations___block_invoke(uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)(a1 + 32);
  if (a2)
    return objc_msgSend(v2, "respondWithError:", a2);
  else
    return objc_msgSend(v2, "respondWithSuccess");
}

uint64_t __68__HMDHome_BulletinNotifications__handleUpdateBulletinRegistrations___block_invoke(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(a1 + 32), "_performUpdateBulletinRegistrations:", a2);
}

void __67__HMDHome_BulletinNotifications__registrationsFromPayload_enabled___block_invoke(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  __objc2_class **v5;
  void *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  void *v16;
  void *v17;
  id v18;
  NSObject *v19;
  void *v20;
  int v21;
  void *v22;
  __int16 v23;
  id v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v3 = a2;
  v4 = objc_opt_class();
  v5 = off_24E762578;
  objc_msgSend((id)objc_opt_class(), "type");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  LOBYTE(v4) = objc_msgSend((id)v4, "doesTypeMatch:against:", v3, v6);

  if ((v4 & 1) != 0)
    goto LABEL_6;
  v7 = objc_opt_class();
  v5 = off_24E7625D0;
  objc_msgSend((id)objc_opt_class(), "type");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  LOBYTE(v7) = objc_msgSend((id)v7, "doesTypeMatch:against:", v3, v8);

  if ((v7 & 1) != 0)
    goto LABEL_6;
  v9 = objc_opt_class();
  v5 = off_24E7625C0;
  objc_msgSend((id)objc_opt_class(), "type");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  LOBYTE(v9) = objc_msgSend((id)v9, "doesTypeMatch:against:", v3, v10);

  if ((v9 & 1) != 0)
    goto LABEL_6;
  v11 = objc_opt_class();
  v5 = off_24E7625C8;
  objc_msgSend((id)objc_opt_class(), "type");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  LOBYTE(v11) = objc_msgSend((id)v11, "doesTypeMatch:against:", v3, v12);

  if ((v11 & 1) != 0
    || (v13 = objc_opt_class(),
        v5 = off_24E7625A8,
        objc_msgSend((id)objc_opt_class(), "type"),
        v14 = (void *)objc_claimAutoreleasedReturnValue(),
        LOBYTE(v13) = objc_msgSend((id)v13, "doesTypeMatch:against:", v3, v14),
        v14,
        (v13 & 1) != 0))
  {
LABEL_6:
    v15 = objc_msgSend(objc_alloc(*v5), "initWithDictionary:", v3);
    if (v15)
    {
      v16 = (void *)v15;
      objc_msgSend(*(id *)(a1 + 40), "addObject:", v15);

    }
  }
  else
  {
    v17 = (void *)MEMORY[0x227676638]();
    v18 = *(id *)(a1 + 32);
    HMFGetOSLogHandle();
    v19 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      v21 = 138543618;
      v22 = v20;
      v23 = 2112;
      v24 = v3;
      _os_log_impl(&dword_2218F0000, v19, OS_LOG_TYPE_INFO, "%{public}@Unknown bulletin registration type found. Ignoring it : %@", (uint8_t *)&v21, 0x16u);

    }
    objc_autoreleasePoolPop(v17);
  }

}

void __59__HMDHome_BulletinNotifications__payloadFromRegistrations___block_invoke(uint64_t a1, void *a2, _BYTE *a3)
{
  id v5;
  void *v6;
  void *v7;
  id v8;
  NSObject *v9;
  void *v10;
  int v11;
  void *v12;
  __int16 v13;
  id v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v5 = a2;
  objc_msgSend(v5, "serializedRegistrationForRemoteMessage");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  if (v6)
  {
    objc_msgSend(*(id *)(a1 + 40), "addObject:", v6);
  }
  else
  {
    v7 = (void *)MEMORY[0x227676638]();
    v8 = *(id *)(a1 + 32);
    HMFGetOSLogHandle();
    v9 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      v11 = 138543618;
      v12 = v10;
      v13 = 2112;
      v14 = v5;
      _os_log_impl(&dword_2218F0000, v9, OS_LOG_TYPE_ERROR, "%{public}@Unable to serialize bulletin registration. %@", (uint8_t *)&v11, 0x16u);

    }
    objc_autoreleasePoolPop(v7);
    *a3 = 1;
  }

}

void __146__HMDHome_BulletinNotifications__updateBulletinRegistrationOnPrimaryResidentWithSource_enableRegistrations_disableRegistration_completionHandler___block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  id v8;
  NSObject *v9;
  void *v10;
  uint64_t v11;
  int v12;
  void *v13;
  __int16 v14;
  id v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  v5 = a2;
  v6 = a3;
  v7 = (void *)MEMORY[0x227676638]();
  v8 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v9 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v12 = 138543618;
    v13 = v10;
    v14 = 2112;
    v15 = v5;
    _os_log_impl(&dword_2218F0000, v9, OS_LOG_TYPE_INFO, "%{public}@Sending remote bulletin notification finished with error: %@", (uint8_t *)&v12, 0x16u);

  }
  objc_autoreleasePoolPop(v7);
  v11 = *(_QWORD *)(a1 + 40);
  if (v11)
    (*(void (**)(uint64_t, id))(v11 + 16))(v11, v5);

}

+ (id)migrationBulletinBoardNotificationsForHome:(id)a3
{
  void *v4;
  id v5;
  void *v6;
  void *v7;
  id v8;
  void *v9;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, void *);
  void *v14;
  id v15;
  id v16;

  v4 = (void *)MEMORY[0x24BDBCEB8];
  v5 = a3;
  objc_msgSend(v4, "array");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "hapAccessories");
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  v11 = MEMORY[0x24BDAC760];
  v12 = 3221225472;
  v13 = __77__HMDHome_BulletinNotifications__migrationBulletinBoardNotificationsForHome___block_invoke;
  v14 = &unk_24E779360;
  v15 = v6;
  v16 = a1;
  v8 = v6;
  objc_msgSend(v7, "na_each:", &v11);

  v9 = (void *)objc_msgSend(v8, "copy", v11, v12, v13, v14);
  return v9;
}

+ (id)migrationCameraNotificationSettingsForHome:(id)a3
{
  void *v4;
  id v5;
  void *v6;
  void *v7;
  id v8;
  void *v9;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, void *);
  void *v14;
  id v15;
  id v16;

  v4 = (void *)MEMORY[0x24BDBCEB8];
  v5 = a3;
  objc_msgSend(v4, "array");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "cameraAccessories");
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  v11 = MEMORY[0x24BDAC760];
  v12 = 3221225472;
  v13 = __77__HMDHome_BulletinNotifications__migrationCameraNotificationSettingsForHome___block_invoke;
  v14 = &unk_24E779360;
  v15 = v6;
  v16 = a1;
  v8 = v6;
  objc_msgSend(v7, "na_each:", &v11);

  v9 = (void *)objc_msgSend(v8, "copy", v11, v12, v13, v14);
  return v9;
}

+ (id)encodedMigrationBulletinBoardNotifications:(id)a3
{
  objc_class *v3;
  id v4;
  void *v5;
  void *v6;

  v3 = (objc_class *)MEMORY[0x24BDD1618];
  v4 = a3;
  v5 = (void *)objc_msgSend([v3 alloc], "initRequiringSecureCoding:", 1);
  objc_msgSend(v5, "encodeObject:forKey:", v4, *MEMORY[0x24BDD0E88]);

  objc_msgSend(v5, "finishEncoding");
  objc_msgSend(v5, "encodedData");
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  return v6;
}

+ (id)encodedMigrationCameraNotificationSettings:(id)a3
{
  objc_class *v3;
  id v4;
  void *v5;
  void *v6;

  v3 = (objc_class *)MEMORY[0x24BDD1618];
  v4 = a3;
  v5 = (void *)objc_msgSend([v3 alloc], "initRequiringSecureCoding:", 1);
  objc_msgSend(v5, "encodeObject:forKey:", v4, *MEMORY[0x24BDD0E88]);

  objc_msgSend(v5, "finishEncoding");
  objc_msgSend(v5, "encodedData");
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  return v6;
}

+ (id)decodedMigrationBulletinBoardNotifications:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;
  void *v10;
  id v11;
  int v12;
  void *v13;
  id v14;
  id v15;
  void *v16;
  id v17;
  NSObject *v18;
  void *v19;
  void *v20;
  id v21;
  NSObject *v22;
  void *v23;
  id v25;
  uint8_t buf[4];
  void *v27;
  __int16 v28;
  id v29;
  _QWORD v30[10];

  v30[9] = *MEMORY[0x24BDAC8D0];
  v4 = a3;
  v5 = (void *)MEMORY[0x24BDBCF20];
  v30[0] = objc_opt_class();
  v30[1] = objc_opt_class();
  v30[2] = objc_opt_class();
  v30[3] = objc_opt_class();
  v30[4] = objc_opt_class();
  v30[5] = objc_opt_class();
  v30[6] = objc_opt_class();
  v30[7] = objc_opt_class();
  v30[8] = objc_opt_class();
  objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", v30, 9);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "setWithArray:", v6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  v25 = 0;
  objc_msgSend(MEMORY[0x24BDD1620], "unarchivedObjectOfClasses:fromData:error:", v7, v4, &v25);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = v25;
  v10 = v9;
  if (!v8 || v9)
  {
    v16 = (void *)MEMORY[0x227676638]();
    v17 = a1;
    HMFGetOSLogHandle();
    v18 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v27 = v19;
      v28 = 2112;
      v29 = v10;
      _os_log_impl(&dword_2218F0000, v18, OS_LOG_TYPE_ERROR, "%{public}@Unable to unarchive bulletin board notifications: %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v16);
    v15 = 0;
  }
  else
  {
    v11 = v8;
    objc_opt_class();
    v12 = objc_opt_isKindOfClass() & 1;
    if (v12)
      v13 = v11;
    else
      v13 = 0;
    v14 = v13;

    if (v12)
    {
      v15 = v11;
    }
    else
    {
      v20 = (void *)MEMORY[0x227676638]();
      v21 = a1;
      HMFGetOSLogHandle();
      v22 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v23 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        v27 = v23;
        v28 = 2112;
        v29 = v11;
        _os_log_impl(&dword_2218F0000, v22, OS_LOG_TYPE_ERROR, "%{public}@Unarchived data is the wrong type : %@", buf, 0x16u);

      }
      objc_autoreleasePoolPop(v20);
      v15 = 0;
    }

  }
  return v15;
}

+ (id)decodedMigrationCameraNotificationSettings:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;
  void *v10;
  id v11;
  int v12;
  void *v13;
  id v14;
  id v15;
  void *v16;
  id v17;
  NSObject *v18;
  void *v19;
  void *v20;
  id v21;
  NSObject *v22;
  void *v23;
  id v25;
  uint8_t buf[4];
  void *v27;
  __int16 v28;
  id v29;
  _QWORD v30[11];

  v30[10] = *MEMORY[0x24BDAC8D0];
  v4 = a3;
  v5 = (void *)MEMORY[0x24BDBCF20];
  v30[0] = objc_opt_class();
  v30[1] = objc_opt_class();
  v30[2] = objc_opt_class();
  v30[3] = objc_opt_class();
  v30[4] = objc_opt_class();
  v30[5] = objc_opt_class();
  v30[6] = objc_opt_class();
  v30[7] = objc_opt_class();
  v30[8] = objc_opt_class();
  v30[9] = objc_opt_class();
  objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", v30, 10);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "setWithArray:", v6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  v25 = 0;
  objc_msgSend(MEMORY[0x24BDD1620], "unarchivedObjectOfClasses:fromData:error:", v7, v4, &v25);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = v25;
  v10 = v9;
  if (!v8 || v9)
  {
    v16 = (void *)MEMORY[0x227676638]();
    v17 = a1;
    HMFGetOSLogHandle();
    v18 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v27 = v19;
      v28 = 2112;
      v29 = v10;
      _os_log_impl(&dword_2218F0000, v18, OS_LOG_TYPE_ERROR, "%{public}@Unable to unarchive camera notification settings: %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v16);
    v15 = 0;
  }
  else
  {
    v11 = v8;
    objc_opt_class();
    v12 = objc_opt_isKindOfClass() & 1;
    if (v12)
      v13 = v11;
    else
      v13 = 0;
    v14 = v13;

    if (v12)
    {
      v15 = v11;
    }
    else
    {
      v20 = (void *)MEMORY[0x227676638]();
      v21 = a1;
      HMFGetOSLogHandle();
      v22 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v23 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        v27 = v23;
        v28 = 2112;
        v29 = v11;
        _os_log_impl(&dword_2218F0000, v22, OS_LOG_TYPE_ERROR, "%{public}@Unarchived data is the wrong type : %@", buf, 0x16u);

      }
      objc_autoreleasePoolPop(v20);
      v15 = 0;
    }

  }
  return v15;
}

void __77__HMDHome_BulletinNotifications__migrationCameraNotificationSettingsForHome___block_invoke(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  id v6;
  NSObject *v7;
  NSObject *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  _QWORD v15[2];
  _QWORD v16[2];
  uint8_t buf[4];
  void *v18;
  __int16 v19;
  id v20;
  __int16 v21;
  void *v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  v3 = a2;
  objc_msgSend(v3, "cameraProfileNotificationSettings");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = (void *)MEMORY[0x227676638]();
  v6 = *(id *)(a1 + 40);
  HMFGetOSLogHandle();
  v7 = objc_claimAutoreleasedReturnValue();
  v8 = v7;
  if (v4)
  {
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v3, "uuid");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543874;
      v18 = v9;
      v19 = 2112;
      v20 = v10;
      v21 = 2112;
      v22 = v4;
      _os_log_impl(&dword_2218F0000, v8, OS_LOG_TYPE_INFO, "%{public}@Adding camera notification settings entry for migration: accessoryUUID: %@ cameraProfileNotificationSettings: %@", buf, 0x20u);

    }
    objc_autoreleasePoolPop(v5);
    v11 = *(void **)(a1 + 32);
    objc_msgSend(v3, "uuid", CFSTR("HMD.CNS.A"));
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    v15[1] = CFSTR("HMD.CNS");
    v16[0] = v12;
    v16[1] = v4;
    objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v16, v15, 2);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "addObject:", v13);

  }
  else
  {
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v18 = v14;
      v19 = 2112;
      v20 = v3;
      _os_log_impl(&dword_2218F0000, v8, OS_LOG_TYPE_ERROR, "%{public}@Camera accessory: %@ missing camera profile notification settings during migration", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v5);
  }

}

void __77__HMDHome_BulletinNotifications__migrationBulletinBoardNotificationsForHome___block_invoke(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  id v6[2];
  _QWORD v7[4];
  id v8;
  __int128 v9;

  v3 = a2;
  objc_msgSend(v3, "services");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v7[0] = MEMORY[0x24BDAC760];
  v7[1] = 3221225472;
  v7[2] = __77__HMDHome_BulletinNotifications__migrationBulletinBoardNotificationsForHome___block_invoke_2;
  v7[3] = &unk_24E779338;
  v8 = v3;
  *(_OWORD *)v6 = *(_OWORD *)(a1 + 32);
  v5 = v6[0];
  v9 = *(_OWORD *)v6;
  v6[0] = v3;
  objc_msgSend(v4, "na_each:", v7);

}

void __77__HMDHome_BulletinNotifications__migrationBulletinBoardNotificationsForHome___block_invoke_2(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  void *v10;
  id v11;
  NSObject *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  _QWORD v23[4];
  _QWORD v24[4];
  uint8_t buf[4];
  void *v26;
  __int16 v27;
  void *v28;
  __int16 v29;
  void *v30;
  __int16 v31;
  void *v32;
  __int16 v33;
  void *v34;
  uint64_t v35;

  v35 = *MEMORY[0x24BDAC8D0];
  v3 = a2;
  objc_msgSend(v3, "bulletinBoardNotification");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  if (v4)
  {
    objc_msgSend(MEMORY[0x24BDBCEF8], "null");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "condition");
    v6 = (void *)objc_claimAutoreleasedReturnValue();

    if (v6)
    {
      v7 = (void *)objc_msgSend(objc_alloc(MEMORY[0x24BDD1618]), "initRequiringSecureCoding:", 1);
      objc_msgSend(v4, "condition");
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v7, "encodeObject:forKey:", v8, *MEMORY[0x24BDD0E88]);

      objc_msgSend(v7, "finishEncoding");
      objc_msgSend(v7, "encodedData");
      v9 = objc_claimAutoreleasedReturnValue();

      v5 = (void *)v9;
    }
    v10 = (void *)MEMORY[0x227676638]();
    v11 = *(id *)(a1 + 48);
    HMFGetOSLogHandle();
    v12 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(*(id *)(a1 + 32), "uuid");
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v3, "instanceID");
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "isEnabled");
      HMFBooleanToString();
      v22 = v10;
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138544386;
      v26 = v13;
      v27 = 2112;
      v28 = v14;
      v29 = 2112;
      v30 = v15;
      v31 = 2112;
      v32 = v5;
      v33 = 2112;
      v34 = v16;
      _os_log_impl(&dword_2218F0000, v12, OS_LOG_TYPE_INFO, "%{public}@Adding bulletin board notification entry for migration: accessoryUUID: %@ serviceInstanceID: %@ predicate: %@ enabled: %@", buf, 0x34u);

      v10 = v22;
    }

    objc_autoreleasePoolPop(v10);
    v23[0] = CFSTR("HMD.BBN.A");
    v17 = *(void **)(a1 + 40);
    objc_msgSend(*(id *)(a1 + 32), "uuid");
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    v24[0] = v18;
    v23[1] = CFSTR("HMD.BBN.S");
    objc_msgSend(v3, "instanceID");
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    v24[1] = v19;
    v24[2] = v5;
    v23[2] = CFSTR("HMD.BBN.P");
    v23[3] = CFSTR("HMD.BBN.E");
    objc_msgSend(MEMORY[0x24BDD16E0], "numberWithBool:", objc_msgSend(v4, "isEnabled"));
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    v24[3] = v20;
    objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v24, v23, 4);
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v17, "addObject:", v21);

  }
}

- (id)actionWithDictionaryRepresentation:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  id v8;
  void *v9;
  void *v10;
  HMDHome *v11;
  NSObject *v12;
  void *v13;
  const char *v14;
  NSObject *v15;
  uint32_t v16;
  int v18;
  void *v19;
  __int16 v20;
  void *v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  v4 = a3;
  v5 = v4;
  if (v4)
  {
    objc_msgSend(v4, "hmf_numberForKey:", CFSTR("kActionType"));
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v7 = v6;
    if (v6)
    {
      if ((unint64_t)objc_msgSend(v6, "integerValue") <= 4)
      {
        objc_opt_class();
        v8 = (id)objc_claimAutoreleasedReturnValue();
        if (v8)
        {
          objc_msgSend(v8, "actionWithDictionaryRepresentation:home:", v5, self);
          v9 = (void *)objc_claimAutoreleasedReturnValue();
LABEL_13:

          goto LABEL_14;
        }
      }
      v10 = (void *)MEMORY[0x227676638]();
      v11 = self;
      HMFGetOSLogHandle();
      v12 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        v18 = 138543618;
        v19 = v13;
        v20 = 2112;
        v21 = v7;
        v14 = "%{public}@Unknown action type: %@";
        v15 = v12;
        v16 = 22;
LABEL_11:
        _os_log_impl(&dword_2218F0000, v15, OS_LOG_TYPE_ERROR, v14, (uint8_t *)&v18, v16);

      }
    }
    else
    {
      v10 = (void *)MEMORY[0x227676638]();
      v11 = self;
      HMFGetOSLogHandle();
      v12 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        v18 = 138543362;
        v19 = v13;
        v14 = "%{public}@Unable to determine the action type";
        v15 = v12;
        v16 = 12;
        goto LABEL_11;
      }
    }

    objc_autoreleasePoolPop(v10);
    v9 = 0;
    goto LABEL_13;
  }
  v9 = 0;
LABEL_14:

  return v9;
}

- (void)_auditAndDeregisterCharacteristicsForHAPAccessory:(id)a3
{
  id v3;
  void *v4;
  void *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t i;
  void *v13;
  void *v14;
  uint64_t v15;
  void *v16;
  void *v17;
  HMDHome *v18;
  NSObject *v19;
  void *v20;
  void *v21;
  void *v22;
  HMDHome *v23;
  void *v24;
  id obj;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  _BYTE buf[18];
  __int16 v39;
  __int128 *v40;
  __int16 v41;
  void *v42;
  _BYTE v43[128];
  _BYTE v44[128];
  uint64_t v45;

  v23 = self;
  v45 = *MEMORY[0x24BDAC8D0];
  v3 = a3;
  objc_msgSend(MEMORY[0x24BDBCEB8], "array");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x24BDD16A8], "string");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v33 = 0u;
  v34 = 0u;
  v35 = 0u;
  v36 = 0u;
  v24 = v3;
  objc_msgSend(v3, "services");
  obj = (id)objc_claimAutoreleasedReturnValue();
  v27 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v33, v44, 16);
  if (v27)
  {
    v26 = *(_QWORD *)v34;
    do
    {
      v6 = 0;
      do
      {
        if (*(_QWORD *)v34 != v26)
          objc_enumerationMutation(obj);
        v28 = v6;
        v7 = *(void **)(*((_QWORD *)&v33 + 1) + 8 * v6);
        v29 = 0u;
        v30 = 0u;
        v31 = 0u;
        v32 = 0u;
        objc_msgSend(v7, "characteristics", v23);
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        v9 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v29, v43, 16);
        if (v9)
        {
          v10 = v9;
          v11 = *(_QWORD *)v30;
          do
          {
            for (i = 0; i != v10; ++i)
            {
              if (*(_QWORD *)v30 != v11)
                objc_enumerationMutation(v8);
              v13 = *(void **)(*((_QWORD *)&v29 + 1) + 8 * i);
              objc_msgSend(v13, "notificationRegistrations");
              v14 = (void *)objc_claimAutoreleasedReturnValue();
              v15 = objc_msgSend(v14, "count");

              if (!v15)
              {
                objc_msgSend(v4, "addObject:", v13);
                objc_msgSend(v13, "shortDescription");
                v16 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v5, "appendString:", v16);

                objc_msgSend(v5, "appendString:", CFSTR("\n"));
              }
            }
            v10 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v29, v43, 16);
          }
          while (v10);
        }

        v6 = v28 + 1;
      }
      while (v28 + 1 != v27);
      v27 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v33, v44, 16);
    }
    while (v27);
  }

  v17 = (void *)MEMORY[0x227676638]();
  v18 = v23;
  HMFGetOSLogHandle();
  v19 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = 0;
    objc_msgSend(v24, "uuid");
    v21 = (void *)objc_claimAutoreleasedReturnValue();

    if (v21)
    {
      objc_msgSend(v24, "uuid");
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v22, "getUUIDBytes:", buf);

    }
    else
    {
      *(_OWORD *)buf = *MEMORY[0x24BE3F2C8];
    }
    v37 = *(_OWORD *)buf;
    *(_DWORD *)buf = 138544130;
    *(_QWORD *)&buf[4] = v20;
    *(_WORD *)&buf[12] = 1040;
    *(_DWORD *)&buf[14] = 16;
    v39 = 2096;
    v40 = &v37;
    v41 = 2112;
    v42 = v5;
    _os_log_impl(&dword_2218F0000, v19, OS_LOG_TYPE_INFO, "%{public}@Audit de-registering notifications accessory %{uuid_t}.16P characteristics %@", buf, 0x26u);

  }
  objc_autoreleasePoolPop(v17);
  objc_msgSend(v24, "enableNotification:forCharacteristics:message:clientIdentifier:", 0, v4, 0, 0);

}

- (void)_auditChangedCharactersitics:(id)a3
{
  id v3;
  void *v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t i;
  void *v10;
  void *v11;
  uint64_t v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t j;
  id v23;
  void *v24;
  id v25;
  void *v26;
  int v27;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  _BYTE v37[128];
  _BYTE v38[128];
  uint64_t v39;

  v39 = *MEMORY[0x24BDAC8D0];
  v3 = a3;
  objc_msgSend(MEMORY[0x24BDBCEF0], "setWithCapacity:", objc_msgSend(v3, "count"));
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v33 = 0u;
  v34 = 0u;
  v35 = 0u;
  v36 = 0u;
  v5 = v3;
  v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v33, v38, 16);
  if (v6)
  {
    v7 = v6;
    v8 = *(_QWORD *)v34;
    do
    {
      for (i = 0; i != v7; ++i)
      {
        if (*(_QWORD *)v34 != v8)
          objc_enumerationMutation(v5);
        v10 = *(void **)(*((_QWORD *)&v33 + 1) + 8 * i);
        objc_msgSend(v10, "notificationRegistrations");
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        v12 = objc_msgSend(v11, "count");

        if (!v12)
        {
          objc_msgSend(v10, "accessory");
          v13 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v13, "uuid");
          v14 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v4, "addObject:", v14);

          if ((objc_msgSend(v13, "isPrimary") & 1) == 0)
          {
            objc_msgSend(v13, "bridge");
            v15 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v15, "identifiersForBridgedAccessories");
            v16 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v4, "unionSet:", v16);

          }
        }
      }
      v7 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v33, v38, 16);
    }
    while (v7);
  }

  if (objc_msgSend(v4, "count") == 1)
  {
    objc_msgSend(v5, "firstObject");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v17, "accessory");
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHome _auditAndDeregisterCharacteristicsForHAPAccessory:](self, "_auditAndDeregisterCharacteristicsForHAPAccessory:", v18);

  }
  else
  {
    v31 = 0u;
    v32 = 0u;
    v29 = 0u;
    v30 = 0u;
    -[HMDHome accessories](self, "accessories");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    v19 = objc_msgSend(v17, "countByEnumeratingWithState:objects:count:", &v29, v37, 16);
    if (v19)
    {
      v20 = v19;
      v21 = *(_QWORD *)v30;
      do
      {
        for (j = 0; j != v20; ++j)
        {
          if (*(_QWORD *)v30 != v21)
            objc_enumerationMutation(v17);
          v23 = *(id *)(*((_QWORD *)&v29 + 1) + 8 * j);
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) != 0)
            v24 = v23;
          else
            v24 = 0;
          v25 = v24;

          if (v25)
          {
            objc_msgSend(v25, "uuid");
            v26 = (void *)objc_claimAutoreleasedReturnValue();
            v27 = objc_msgSend(v4, "containsObject:", v26);

            if (v27)
              -[HMDHome _auditAndDeregisterCharacteristicsForHAPAccessory:](self, "_auditAndDeregisterCharacteristicsForHAPAccessory:", v25);
          }

        }
        v20 = objc_msgSend(v17, "countByEnumeratingWithState:objects:count:", &v29, v37, 16);
      }
      while (v20);
    }
  }

}

- (id)lightProfileWithUUID:(id)a3
{
  id v4;
  void *v5;
  id v6;
  void *v7;
  void *v8;
  _QWORD v10[4];
  id v11;

  v4 = a3;
  -[HMDHome accessories](self, "accessories");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v10[0] = MEMORY[0x24BDAC760];
  v10[1] = 3221225472;
  v10[2] = __39__HMDHome_Light__lightProfileWithUUID___block_invoke;
  v10[3] = &unk_24E77E530;
  v11 = v4;
  v6 = v4;
  objc_msgSend(v5, "na_map:", v10);
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v7, "firstObject");
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  return v8;
}

- (void)handleFetchLightProfileSettingsMessage:(id)a3
{
  id v4;
  NSObject *v5;
  id v6;

  v4 = a3;
  -[HMDHome workQueue](self, "workQueue");
  v5 = objc_claimAutoreleasedReturnValue();
  dispatch_assert_queue_V2(v5);

  objc_msgSend(v4, "setForKey:", *MEMORY[0x24BDD61C8]);
  v6 = (id)objc_claimAutoreleasedReturnValue();
  -[HMDHome handleFetchLightProfileSettingsMessage:withLightProfileUUIDs:](self, "handleFetchLightProfileSettingsMessage:withLightProfileUUIDs:", v4, v6);

}

- (void)handleFetchLightProfileSettingsMessage:(id)a3 withLightProfileUUIDs:(id)a4
{
  id v6;
  void *v7;
  void *v8;
  NSObject *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  HMDHome *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  NSObject *v24;
  void *v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t i;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  id v35;
  HMDHome *v36;
  uint64_t v37;
  id obj;
  void *v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  _BYTE v48[128];
  uint8_t v49[128];
  uint8_t buf[4];
  void *v51;
  __int16 v52;
  id v53;
  uint64_t v54;

  v54 = *MEMORY[0x24BDAC8D0];
  v35 = a3;
  v6 = a4;
  v7 = (void *)MEMORY[0x227676638]();
  v36 = self;
  -[HMDHome lightLogCategory](self, "lightLogCategory");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  HMFGetOSLogHandle();
  v9 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543618;
    v51 = v10;
    v52 = 2112;
    v53 = v6;
    _os_log_impl(&dword_2218F0000, v9, OS_LOG_TYPE_INFO, "%{public}@Handling fetch light profiles settings for profiles: %@", buf, 0x16u);

  }
  objc_autoreleasePoolPop(v7);
  objc_msgSend(MEMORY[0x24BDBCED8], "dictionary");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x24BDBCEF0], "set");
  v39 = (void *)objc_claimAutoreleasedReturnValue();
  v44 = 0u;
  v45 = 0u;
  v46 = 0u;
  v47 = 0u;
  obj = v6;
  v12 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v44, v49, 16);
  v13 = self;
  if (v12)
  {
    v14 = v12;
    v15 = *(_QWORD *)v45;
    do
    {
      v16 = 0;
      v37 = v14;
      do
      {
        if (*(_QWORD *)v45 != v15)
          objc_enumerationMutation(obj);
        v17 = *(void **)(*((_QWORD *)&v44 + 1) + 8 * v16);
        -[HMDHome lightProfileWithUUID:](v13, "lightProfileWithUUID:", v17);
        v18 = (void *)objc_claimAutoreleasedReturnValue();
        if (v18)
        {
          objc_msgSend(v39, "addObject:", v18);
        }
        else
        {
          objc_msgSend(MEMORY[0x24BDD1540], "hmErrorWithCode:", 3);
          v19 = (void *)objc_claimAutoreleasedReturnValue();
          v20 = (void *)objc_msgSend(objc_alloc(MEMORY[0x24BDD76C8]), "initWithError:", v19);
          v21 = v11;
          objc_msgSend(v11, "setObject:forKeyedSubscript:", v20, v17);

          v22 = (void *)MEMORY[0x227676638]();
          -[HMDHome lightLogCategory](v13, "lightLogCategory");
          v23 = (void *)objc_claimAutoreleasedReturnValue();
          HMFGetOSLogHandle();
          v24 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
          {
            HMFGetLogIdentifier();
            v25 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 138543618;
            v51 = v25;
            v52 = 2112;
            v53 = v17;
            _os_log_impl(&dword_2218F0000, v24, OS_LOG_TYPE_ERROR, "%{public}@Could not find light profile with uuid: %@", buf, 0x16u);

            v13 = v36;
          }

          objc_autoreleasePoolPop(v22);
          v11 = v21;
          v14 = v37;
        }

        ++v16;
      }
      while (v14 != v16);
      v14 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v44, v49, 16);
    }
    while (v14);
  }

  v42 = 0u;
  v43 = 0u;
  v40 = 0u;
  v41 = 0u;
  v26 = v39;
  v27 = objc_msgSend(v26, "countByEnumeratingWithState:objects:count:", &v40, v48, 16);
  if (v27)
  {
    v28 = v27;
    v29 = *(_QWORD *)v41;
    do
    {
      for (i = 0; i != v28; ++i)
      {
        if (*(_QWORD *)v41 != v29)
          objc_enumerationMutation(v26);
        v31 = *(void **)(*((_QWORD *)&v40 + 1) + 8 * i);
        objc_msgSend(v31, "settings");
        v32 = (void *)objc_claimAutoreleasedReturnValue();
        v33 = (void *)objc_msgSend(objc_alloc(MEMORY[0x24BDD76C8]), "initWithSettings:", v32);
        objc_msgSend(v31, "uniqueIdentifier");
        v34 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v11, "setObject:forKeyedSubscript:", v33, v34);

      }
      v28 = objc_msgSend(v26, "countByEnumeratingWithState:objects:count:", &v40, v48, 16);
    }
    while (v28);
  }

  -[HMDHome respondMessage:withSettingResults:](v36, "respondMessage:withSettingResults:", v35, v11);
}

- (void)respondMessage:(id)a3 withSettingResults:(id)a4
{
  id v6;
  id v7;
  void *v8;
  id v9;
  void *v10;
  void *v11;
  NSObject *v12;
  NSObject *v13;
  void *v14;
  void *v15;
  void *v16;
  id v17;
  uint64_t v18;
  void *v19;
  uint8_t buf[4];
  void *v21;
  __int16 v22;
  id v23;
  __int16 v24;
  id v25;
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  v6 = a3;
  v7 = a4;
  v17 = 0;
  objc_msgSend(MEMORY[0x24BDD1618], "archivedDataWithRootObject:requiringSecureCoding:error:", v7, 1, &v17);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = v17;
  v10 = (void *)MEMORY[0x227676638]();
  -[HMDHome lightLogCategory](self, "lightLogCategory");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  HMFGetOSLogHandle();
  v12 = objc_claimAutoreleasedReturnValue();
  v13 = v12;
  if (v8)
  {
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
    {
      HMFGetLogIdentifier();
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v21 = v14;
      v22 = 2112;
      v23 = v7;
      _os_log_impl(&dword_2218F0000, v13, OS_LOG_TYPE_DEBUG, "%{public}@Responding with light profile settings: %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v10);
    v18 = *MEMORY[0x24BDD61D0];
    v19 = v8;
    objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", &v19, &v18, 1);
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "respondWithPayload:", v15);
  }
  else
  {
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543874;
      v21 = v16;
      v22 = 2112;
      v23 = v7;
      v24 = 2112;
      v25 = v9;
      _os_log_impl(&dword_2218F0000, v13, OS_LOG_TYPE_ERROR, "%{public}@Failed to encode profile setting results: %@ with error: %@", buf, 0x20u);

    }
    objc_autoreleasePoolPop(v10);
    objc_msgSend(MEMORY[0x24BDD1540], "hmErrorWithCode:", -1);
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "respondWithError:", v15);
  }

}

- (void)updateLightProfilesSettingsWithRequiresHomeNotificationsEnabled:(BOOL)a3
{
  _BOOL4 v3;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t i;
  id v11;
  void *v12;
  id v13;
  void *v14;
  void *v15;
  uint64_t v16;
  void *v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _BYTE v22[128];
  uint64_t v23;

  v3 = a3;
  v23 = *MEMORY[0x24BDAC8D0];
  objc_msgSend(MEMORY[0x24BDBCEF0], "set");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v18 = 0u;
  v19 = 0u;
  v20 = 0u;
  v21 = 0u;
  -[HMDHome accessories](self, "accessories");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v18, v22, 16);
  if (v7)
  {
    v8 = v7;
    v9 = *(_QWORD *)v19;
    do
    {
      for (i = 0; i != v8; ++i)
      {
        if (*(_QWORD *)v19 != v9)
          objc_enumerationMutation(v6);
        v11 = *(id *)(*((_QWORD *)&v18 + 1) + 8 * i);
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0)
          v12 = v11;
        else
          v12 = 0;
        v13 = v12;

        if (v13)
        {
          objc_msgSend(v13, "lightProfiles");
          v14 = (void *)objc_claimAutoreleasedReturnValue();
          v15 = v14;
          if (v3)
          {
            objc_msgSend(v14, "na_filter:", &__block_literal_global_63577);
            v16 = objc_claimAutoreleasedReturnValue();

            v15 = (void *)v16;
          }
          objc_msgSend(v15, "allObjects");
          v17 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v5, "addObjectsFromArray:", v17);

        }
      }
      v8 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v18, v22, 16);
    }
    while (v8);
  }

  -[HMDHome updateLightProfilesSettings:](self, "updateLightProfilesSettings:", v5);
}

- (void)updateLightProfilesSettings:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t i;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  NSObject *v18;
  void *v19;
  _QWORD v20[4];
  id v21;
  id v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  id location[2];
  _BYTE v28[128];
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  v4 = a3;
  objc_msgSend(MEMORY[0x24BDBCEF0], "set");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x24BDBCEF0], "set");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v25 = 0u;
  v26 = 0u;
  v23 = 0u;
  v24 = 0u;
  v7 = v4;
  v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v23, v28, 16);
  if (v8)
  {
    v9 = *(_QWORD *)v24;
    do
    {
      for (i = 0; i != v8; ++i)
      {
        if (*(_QWORD *)v24 != v9)
          objc_enumerationMutation(v7);
        v11 = *(void **)(*((_QWORD *)&v23 + 1) + 8 * i);
        objc_msgSend(v11, "readCharacteristicRequests");
        v12 = (void *)objc_claimAutoreleasedReturnValue();
        if (objc_msgSend(v12, "count"))
        {
          objc_msgSend(v12, "allObjects");
          v13 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v5, "addObjectsFromArray:", v13);

          objc_msgSend(v6, "addObject:", v11);
        }

      }
      v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v23, v28, 16);
    }
    while (v8);
  }

  if (objc_msgSend(v5, "count"))
  {
    objc_initWeak(location, self);
    objc_msgSend(v5, "allObjects");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHome description](self, "description");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    v20[0] = MEMORY[0x24BDAC760];
    v20[1] = 3221225472;
    v20[2] = __46__HMDHome_Light__updateLightProfilesSettings___block_invoke;
    v20[3] = &unk_24E798D90;
    objc_copyWeak(&v22, location);
    v21 = v6;
    -[HMDHome readCharacteristicValues:source:sourceForLogging:qualityOfService:withCompletionHandler:](self, "readCharacteristicValues:source:sourceForLogging:qualityOfService:withCompletionHandler:", v14, 7, v15, -1, v20);

    objc_destroyWeak(&v22);
    objc_destroyWeak(location);
  }
  else
  {
    v16 = (void *)MEMORY[0x227676638]();
    -[HMDHome lightLogCategory](self, "lightLogCategory");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    HMFGetOSLogHandle();
    v18 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      LODWORD(location[0]) = 138543362;
      *(id *)((char *)location + 4) = v19;
      _os_log_impl(&dword_2218F0000, v18, OS_LOG_TYPE_INFO, "%{public}@No characteristic read requests for light profiles", (uint8_t *)location, 0xCu);

    }
    objc_autoreleasePoolPop(v16);
  }

}

- (id)handleSetNaturalLightingEnabled:(BOOL)a3 forMatterLightProfiles:(id)a4
{
  _BOOL8 v4;
  id v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  NSObject *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  id v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  _QWORD v25[4];
  id v26;
  id v27;
  id v28;
  _QWORD v29[5];
  id v30;
  id v31;
  id v32;
  _QWORD v33[2];
  _QWORD v34[2];
  uint8_t buf[4];
  void *v36;
  uint64_t v37;

  v4 = a3;
  v37 = *MEMORY[0x24BDAC8D0];
  v6 = a4;
  if (objc_msgSend(v6, "hmf_isEmpty"))
  {
    v7 = (void *)MEMORY[0x24BE3F180];
    objc_msgSend(MEMORY[0x24BDD1540], "hmErrorWithCode:", 2);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "futureWithError:", v8);
    v9 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v32 = 0;
    objc_msgSend(MEMORY[0x24BE3F180], "futureWithPromise:", &v32);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    if (-[HMDHome isCurrentDeviceConfirmedPrimaryResident](self, "isCurrentDeviceConfirmedPrimaryResident"))
    {
      v10 = (void *)MEMORY[0x227676638]();
      -[HMDHome lightLogCategory](self, "lightLogCategory");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      HMFGetOSLogHandle();
      v12 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543362;
        v36 = v13;
        _os_log_impl(&dword_2218F0000, v12, OS_LOG_TYPE_INFO, "%{public}@Setting natural lighting enabled locally for light profiles on primary resident", buf, 0xCu);

      }
      objc_autoreleasePoolPop(v10);
      -[HMDHome _handleSetNaturalLightingEnabled:forLightProfiles:](self, "_handleSetNaturalLightingEnabled:forLightProfiles:", v4, v6);
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      v29[0] = MEMORY[0x24BDAC760];
      v29[1] = 3221225472;
      v29[2] = __73__HMDHome_Light__handleSetNaturalLightingEnabled_forMatterLightProfiles___block_invoke;
      v29[3] = &unk_24E77E578;
      v29[4] = self;
      v30 = v6;
      v31 = v32;
      objc_msgSend(v14, "getResultWithCompletion:", v29);

    }
    else
    {
      objc_msgSend(v6, "na_map:", &__block_literal_global_21_63569);
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      v33[0] = *MEMORY[0x24BDD61C8];
      objc_msgSend(v14, "allObjects");
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      v34[0] = v15;
      v33[1] = CFSTR("HMDLightProfileEnableNaturalLightingCodingKey");
      objc_msgSend(MEMORY[0x24BDD16E0], "numberWithBool:", v4);
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      v34[1] = v16;
      objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v34, v33, 2);
      v17 = (void *)objc_claimAutoreleasedReturnValue();

      v18 = objc_alloc(MEMORY[0x24BE3F1B8]);
      -[HMDHome uuid](self, "uuid");
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      v20 = (void *)objc_msgSend(v18, "initWithTarget:", v19);

      objc_msgSend(MEMORY[0x24BE3F1D0], "messageWithName:destination:payload:", CFSTR("HMDHomeSetNaturalLightingEnabledForLightProfilesMessage"), v20, v17);
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      objc_initWeak((id *)buf, self);
      v25[0] = MEMORY[0x24BDAC760];
      v25[1] = 3221225472;
      v25[2] = __73__HMDHome_Light__handleSetNaturalLightingEnabled_forMatterLightProfiles___block_invoke_3;
      v25[3] = &unk_24E79ACA8;
      objc_copyWeak(&v28, (id *)buf);
      v26 = v32;
      v27 = v6;
      objc_msgSend(v21, "setResponseHandler:", v25);
      -[HMDHome uuid](self, "uuid");
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      -[HMDHome workQueue](self, "workQueue");
      v23 = (void *)objc_claimAutoreleasedReturnValue();
      -[HMDHome redispatchToResidentMessage:target:responseQueue:](self, "redispatchToResidentMessage:target:responseQueue:", v21, v22, v23);

      objc_destroyWeak(&v28);
      objc_destroyWeak((id *)buf);

    }
  }

  return v9;
}

- (void)handleSetNaturalLightingEnabledForLightProfilesMessage:(id)a3
{
  id v4;
  NSObject *v5;
  void *v6;
  void *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  NSObject *v18;
  void *v19;
  unsigned int v20;
  _QWORD v21[5];
  id v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint8_t v27[128];
  uint8_t buf[4];
  void *v29;
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  v4 = a3;
  -[HMDHome workQueue](self, "workQueue");
  v5 = objc_claimAutoreleasedReturnValue();
  dispatch_assert_queue_V2(v5);

  if (-[HMDHome isCurrentDeviceConfirmedPrimaryResident](self, "isCurrentDeviceConfirmedPrimaryResident"))
  {
    objc_msgSend(v4, "arrayForKey:", *MEMORY[0x24BDD61C8]);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v20 = objc_msgSend(v4, "BOOLForKey:", CFSTR("HMDLightProfileEnableNaturalLightingCodingKey"));
    objc_msgSend(MEMORY[0x24BDBCEF0], "setWithCapacity:", objc_msgSend(v6, "count"));
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v23 = 0u;
    v24 = 0u;
    v25 = 0u;
    v26 = 0u;
    v8 = v6;
    v9 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v23, v27, 16);
    if (v9)
    {
      v10 = v9;
      v11 = *(_QWORD *)v24;
      do
      {
        v12 = 0;
        do
        {
          if (*(_QWORD *)v24 != v11)
            objc_enumerationMutation(v8);
          v13 = (void *)objc_msgSend(objc_alloc(MEMORY[0x24BDD1880]), "initWithUUIDString:", *(_QWORD *)(*((_QWORD *)&v23 + 1) + 8 * v12));
          -[HMDHome lightProfileWithUUID:](self, "lightProfileWithUUID:", v13);
          v14 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v7, "addObject:", v14);

          ++v12;
        }
        while (v10 != v12);
        v10 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v23, v27, 16);
      }
      while (v10);
    }

    -[HMDHome _handleSetNaturalLightingEnabled:forLightProfiles:](self, "_handleSetNaturalLightingEnabled:forLightProfiles:", v20, v7);
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    v21[0] = MEMORY[0x24BDAC760];
    v21[1] = 3221225472;
    v21[2] = __73__HMDHome_Light__handleSetNaturalLightingEnabledForLightProfilesMessage___block_invoke;
    v21[3] = &unk_24E78B610;
    v21[4] = self;
    v22 = v4;
    objc_msgSend(v15, "getResultWithCompletion:", v21);

  }
  else
  {
    v16 = (void *)MEMORY[0x227676638]();
    -[HMDHome lightLogCategory](self, "lightLogCategory");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    HMFGetOSLogHandle();
    v18 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v29 = v19;
      _os_log_impl(&dword_2218F0000, v18, OS_LOG_TYPE_INFO, "%{public}@Not handling remote message to set natural lighting enabled for light profiles on non-primary resident", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v16);
    objc_msgSend(MEMORY[0x24BDD1540], "hmErrorWithCode:", 48);
    v8 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "respondWithError:", v8);
  }

}

- (id)_handleSetNaturalLightingEnabled:(BOOL)a3 forLightProfiles:(id)a4
{
  _BOOL8 v4;
  id v6;
  void *v7;
  void *v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  id v15;
  void *v16;
  void *v17;
  void *v18;
  id v19;
  void *v20;
  _QWORD v22[4];
  id v23;
  HMDHome *v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  _BYTE v29[128];
  uint64_t v30;

  v4 = a3;
  v30 = *MEMORY[0x24BDAC8D0];
  v6 = a4;
  objc_msgSend(MEMORY[0x24BDBCEB8], "arrayWithCapacity:", objc_msgSend(v6, "count"));
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x24BDBCED8], "dictionary");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v25 = 0u;
  v26 = 0u;
  v27 = 0u;
  v28 = 0u;
  v9 = v6;
  v10 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v25, v29, 16);
  if (v10)
  {
    v11 = v10;
    v12 = *(_QWORD *)v26;
    do
    {
      v13 = 0;
      do
      {
        if (*(_QWORD *)v26 != v12)
          objc_enumerationMutation(v9);
        objc_msgSend(*(id *)(*((_QWORD *)&v25 + 1) + 8 * v13), "setNaturalLightingEnabledForMatterLightProfile:", v4);
        v14 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v7, "addObject:", v14);

        ++v13;
      }
      while (v11 != v13);
      v11 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v25, v29, 16);
    }
    while (v11);
  }

  v15 = objc_alloc(MEMORY[0x24BE3F168]);
  -[HMDHome workQueue](self, "workQueue");
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  v17 = (void *)objc_msgSend(v15, "initWithQueue:", v16);

  objc_msgSend(MEMORY[0x24BE3F180], "allSettled:", v7);
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  v22[0] = MEMORY[0x24BDAC760];
  v22[1] = 3221225472;
  v22[2] = __68__HMDHome_Light___handleSetNaturalLightingEnabled_forLightProfiles___block_invoke;
  v22[3] = &unk_24E783EA0;
  v23 = v8;
  v24 = self;
  v19 = v8;
  objc_msgSend(v18, "inContext:then:", v17, v22);
  v20 = (void *)objc_claimAutoreleasedReturnValue();

  return v20;
}

- (id)executeMatterNaturalLightingActions:(id)a3
{
  id v3;
  void *v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  NSObject *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  id v24;
  void *v25;
  void *v26;
  void *v27;
  char v28;
  uint64_t v29;
  void *v30;
  id v31;
  void *v32;
  id v33;
  void *v34;
  __int128 v36;
  void *v37;
  void *v38;
  uint64_t v40;
  id obj;
  _QWORD v42[4];
  id v43;
  _QWORD v44[5];
  _QWORD v45[5];
  id v46;
  id v47;
  id v48;
  _QWORD v49[5];
  _QWORD v50[5];
  id v51;
  id v52;
  id v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  uint8_t buf[4];
  void *v59;
  __int16 v60;
  void *v61;
  _BYTE v62[128];
  uint64_t v63;

  v63 = *MEMORY[0x24BDAC8D0];
  v3 = a3;
  objc_msgSend(MEMORY[0x24BDBCED8], "dictionary");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x24BDBCEF0], "set");
  v38 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x24BDBCEF0], "set");
  v37 = (void *)objc_claimAutoreleasedReturnValue();
  v54 = 0u;
  v55 = 0u;
  v56 = 0u;
  v57 = 0u;
  obj = v3;
  v5 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v54, v62, 16);
  if (v5)
  {
    v7 = v5;
    v8 = *(_QWORD *)v55;
    *(_QWORD *)&v6 = 138543618;
    v36 = v6;
    do
    {
      v9 = 0;
      v40 = v7;
      do
      {
        if (*(_QWORD *)v55 != v8)
          objc_enumerationMutation(obj);
        v10 = *(void **)(*((_QWORD *)&v54 + 1) + 8 * v9);
        objc_msgSend(v10, "lightProfile", v36);
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v10, "uuid");
        v12 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v12, "UUIDString");
        v13 = (void *)objc_claimAutoreleasedReturnValue();

        if ((objc_msgSend(v11, "isNaturalLightingSupported") & 1) != 0)
        {
          if (objc_msgSend(v10, "isNaturalLightingEnabled"))
            v14 = v38;
          else
            v14 = v37;
          objc_msgSend(v14, "addObject:", v11);
        }
        else
        {
          v15 = v4;
          v16 = (void *)MEMORY[0x227676638]();
          -[HMDHome lightLogCategory](self, "lightLogCategory");
          v17 = (void *)objc_claimAutoreleasedReturnValue();
          HMFGetOSLogHandle();
          v18 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
          {
            HMFGetLogIdentifier();
            v19 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = v36;
            v59 = v19;
            v60 = 2112;
            v61 = v10;
            _os_log_impl(&dword_2218F0000, v18, OS_LOG_TYPE_ERROR, "%{public}@Skipping executing natural lighting action for matter, light profile doesn't support matter NL: %@", buf, 0x16u);

          }
          objc_autoreleasePoolPop(v16);
          v20 = (void *)MEMORY[0x24BDBCE70];
          objc_msgSend(MEMORY[0x24BDD1540], "hmErrorWithCode:", -1);
          v21 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v20, "hmd_dictionaryWithActionExecutionError:", v21);
          v22 = (void *)objc_claimAutoreleasedReturnValue();
          v4 = v15;
          objc_msgSend(v15, "setObject:forKeyedSubscript:", v22, v13);

          v7 = v40;
        }

        ++v9;
      }
      while (v7 != v9);
      v7 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v54, v62, 16);
    }
    while (v7);
  }

  if (objc_msgSend(v38, "hmf_isEmpty") && objc_msgSend(v37, "hmf_isEmpty"))
  {
    objc_msgSend(MEMORY[0x24BE3F180], "futureWithValue:", MEMORY[0x24BDBD1B8]);
    v23 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v24 = objc_alloc(MEMORY[0x24BE3F168]);
    -[HMDHome workQueue](self, "workQueue");
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    v26 = (void *)objc_msgSend(v24, "initWithQueue:", v25);

    objc_msgSend(MEMORY[0x24BDBCEB8], "array");
    v27 = (void *)objc_claimAutoreleasedReturnValue();
    v28 = objc_msgSend(v38, "hmf_isEmpty");
    v29 = MEMORY[0x24BDAC760];
    if ((v28 & 1) == 0)
    {
      -[HMDHome handleSetNaturalLightingEnabled:forMatterLightProfiles:](self, "handleSetNaturalLightingEnabled:forMatterLightProfiles:", 1, v38);
      v30 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v27, "addObject:", v30);
      v50[0] = v29;
      v50[1] = 3221225472;
      v50[2] = __54__HMDHome_Light__executeMatterNaturalLightingActions___block_invoke;
      v50[3] = &unk_24E77E630;
      v50[4] = self;
      v51 = v38;
      v52 = obj;
      v53 = v4;
      v49[0] = v29;
      v49[1] = 3221225472;
      v49[2] = __54__HMDHome_Light__executeMatterNaturalLightingActions___block_invoke_33;
      v49[3] = &unk_24E797A18;
      v49[4] = self;
      v31 = (id)objc_msgSend(v30, "inContext:then:orRecover:", v26, v50, v49);

    }
    if ((objc_msgSend(v37, "hmf_isEmpty") & 1) == 0)
    {
      -[HMDHome handleSetNaturalLightingEnabled:forMatterLightProfiles:](self, "handleSetNaturalLightingEnabled:forMatterLightProfiles:", 0, v37);
      v32 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v27, "addObject:", v32);
      v45[0] = v29;
      v45[1] = 3221225472;
      v45[2] = __54__HMDHome_Light__executeMatterNaturalLightingActions___block_invoke_35;
      v45[3] = &unk_24E77E630;
      v45[4] = self;
      v46 = v37;
      v47 = obj;
      v48 = v4;
      v44[0] = v29;
      v44[1] = 3221225472;
      v44[2] = __54__HMDHome_Light__executeMatterNaturalLightingActions___block_invoke_37;
      v44[3] = &unk_24E797A18;
      v44[4] = self;
      v33 = (id)objc_msgSend(v32, "inContext:then:orRecover:", v26, v45, v44);

    }
    objc_msgSend(MEMORY[0x24BE3F180], "allSettled:", v27);
    v34 = (void *)objc_claimAutoreleasedReturnValue();
    v42[0] = v29;
    v42[1] = 3221225472;
    v42[2] = __54__HMDHome_Light__executeMatterNaturalLightingActions___block_invoke_38;
    v42[3] = &unk_24E797000;
    v43 = v4;
    objc_msgSend(v34, "inContext:then:", v26, v42);
    v23 = (void *)objc_claimAutoreleasedReturnValue();

  }
  return v23;
}

- (id)isAccessoryCertifiedForNaturalLighting:(id)a3
{
  id v4;
  void *v5;
  HMDHome *v6;
  NSObject *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  HMDHome *v13;
  NSObject *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  NSObject *v20;
  void *v21;
  uint64_t v22;
  void *v23;
  HMDHome *v24;
  NSObject *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  uint64_t v33;
  id v34;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  HMDHome *v41;
  void *v42;
  void *v43;
  void *v44;
  void *v45;
  void *v46;
  void *v47;
  void *v48;
  void *v49;
  void *v50;
  _QWORD v51[5];
  id v52;
  _QWORD v53[4];
  id v54;
  id v55;
  id v56;
  uint8_t buf[4];
  void *v58;
  __int16 v59;
  void *v60;
  __int16 v61;
  void *v62;
  __int16 v63;
  void *v64;
  __int16 v65;
  void *v66;
  __int16 v67;
  void *v68;
  __int16 v69;
  void *v70;
  __int16 v71;
  void *v72;
  __int16 v73;
  void *v74;
  __int16 v75;
  void *v76;
  uint64_t v77;

  v77 = *MEMORY[0x24BDAC8D0];
  v4 = a3;
  if (CFPreferencesGetAppBooleanValue(CFSTR("MatterAdaptiveLighting"), CFSTR("/Library/Managed Preferences/mobile/com.apple.homed.plist"), 0))
  {
    v5 = (void *)MEMORY[0x227676638]();
    v6 = self;
    HMFGetOSLogHandle();
    v7 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "uuid");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v58 = v8;
      v59 = 2112;
      v60 = v9;
      _os_log_impl(&dword_2218F0000, v7, OS_LOG_TYPE_INFO, "%{public}@Natural lighting is allowed because of profile present for accessory: %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v5);
    objc_msgSend(MEMORY[0x24BE3F180], "futureWithValue:", MEMORY[0x24BDBD1C8]);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v56 = 0;
    objc_msgSend(MEMORY[0x24BE3F180], "futureWithPromise:", &v56);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "bridge");
    v11 = (void *)objc_claimAutoreleasedReturnValue();

    if (v11)
    {
      v12 = (void *)MEMORY[0x227676638]();
      v13 = self;
      HMFGetOSLogHandle();
      v14 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
      {
        HMFGetLogIdentifier();
        v48 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v4, "uuid");
        v47 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v4, "matterVendorID");
        v46 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v4, "matterProductID");
        v45 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v4, "firmwareVersion");
        v40 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v40, "rawVersionString");
        v44 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v4, "bridge");
        v39 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v39, "uuid");
        v43 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v4, "bridge");
        v38 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v38, "matterVendorID");
        v15 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v4, "bridge");
        v37 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v37, "matterProductID");
        v16 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v4, "bridge");
        v36 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v36, "firmwareVersion");
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v4, "bridge");
        v41 = v13;
        v18 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v18, "firmwareVersion");
        v42 = v12;
        v49 = v10;
        v19 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v19, "rawVersionString");
        v20 = v14;
        v21 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138545666;
        v58 = v48;
        v59 = 2112;
        v60 = v47;
        v61 = 2112;
        v62 = v46;
        v63 = 2112;
        v64 = v45;
        v65 = 2112;
        v66 = v44;
        v67 = 2112;
        v68 = v43;
        v69 = 2112;
        v70 = v15;
        v71 = 2112;
        v72 = v16;
        v73 = 2112;
        v74 = v17;
        v75 = 2112;
        v76 = v21;
        _os_log_impl(&dword_2218F0000, v20, OS_LOG_TYPE_DEBUG, "%{public}@Bridged accessory UUID: %@ identifiers: [%@ : %@ : %@] Bridge UUID: %@ identifiers: [%@ : %@ : %@: %@]", buf, 0x66u);

        v14 = v20;
        v10 = v49;
        v12 = v42;

        v13 = v41;
      }

      objc_autoreleasePoolPop(v12);
      objc_msgSend(v4, "bridge");
      v22 = objc_claimAutoreleasedReturnValue();

      v4 = (id)v22;
    }
    v23 = (void *)MEMORY[0x227676638]();
    v24 = self;
    HMFGetOSLogHandle();
    v25 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v25, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v26 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "matterVendorID");
      v27 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "matterProductID");
      v50 = v10;
      v28 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "firmwareVersion");
      v29 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v29, "rawVersionString");
      v30 = (void *)objc_claimAutoreleasedReturnValue();
      HMFBooleanToString();
      v31 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138544386;
      v58 = v26;
      v59 = 2112;
      v60 = v27;
      v61 = 2112;
      v62 = v28;
      v63 = 2112;
      v64 = v30;
      v65 = 2112;
      v66 = v31;
      _os_log_impl(&dword_2218F0000, v25, OS_LOG_TYPE_INFO, "%{public}@Checking if natural lighting is allowed based on allow list for accessory: [%@ : %@ : %@] isBridged: %@", buf, 0x34u);

      v10 = v50;
    }

    objc_autoreleasePoolPop(v23);
    -[HMDHome makeMatterCapabilitiesObjectForAssetFilename:](v24, "makeMatterCapabilitiesObjectForAssetFilename:", 1);
    v32 = (void *)objc_claimAutoreleasedReturnValue();
    v33 = MEMORY[0x24BDAC760];
    v53[0] = MEMORY[0x24BDAC760];
    v53[1] = 3221225472;
    v53[2] = __57__HMDHome_Light__isAccessoryCertifiedForNaturalLighting___block_invoke;
    v53[3] = &unk_24E77E658;
    v4 = v4;
    v54 = v4;
    v55 = v56;
    v51[0] = v33;
    v51[1] = 3221225472;
    v51[2] = __57__HMDHome_Light__isAccessoryCertifiedForNaturalLighting___block_invoke_2;
    v51[3] = &unk_24E79B210;
    v51[4] = v24;
    v52 = v55;
    v34 = (id)objc_msgSend(v32, "then:orRecover:", v53, v51);

  }
  return v10;
}

- (Class)lightLogCategory
{
  return (Class)objc_opt_class();
}

uint64_t __57__HMDHome_Light__isAccessoryCertifiedForNaturalLighting___block_invoke(uint64_t a1, void *a2)
{
  void *v3;
  id v4;
  void *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t v11;
  void *v12;
  void *v13;

  v3 = *(void **)(a1 + 32);
  v4 = a2;
  objc_msgSend(v3, "matterVendorID");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = (int)objc_msgSend(v5, "intValue");
  objc_msgSend(*(id *)(a1 + 32), "matterProductID");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = (int)objc_msgSend(v7, "intValue");
  objc_msgSend(*(id *)(a1 + 32), "firmwareVersion");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "rawVersionString");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v11 = objc_msgSend(v4, "isCapabilityAllowed:vendorID:productID:firmwareVersion:", 1, v6, v8, (int)objc_msgSend(v10, "intValue"));

  v12 = *(void **)(a1 + 40);
  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithBool:", v11);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v12, "fulfillWithValue:", v13);

  return 1;
}

uint64_t __57__HMDHome_Light__isAccessoryCertifiedForNaturalLighting___block_invoke_2(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  NSObject *v6;
  void *v7;
  int v9;
  void *v10;
  __int16 v11;
  id v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v3 = a2;
  v4 = (void *)MEMORY[0x227676638]();
  v5 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v6 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = 138543618;
    v10 = v7;
    v11 = 2112;
    v12 = v3;
    _os_log_impl(&dword_2218F0000, v6, OS_LOG_TYPE_INFO, "%{public}@Natural lighting is not allowed because allow list check failed with error: %@", (uint8_t *)&v9, 0x16u);

  }
  objc_autoreleasePoolPop(v4);
  objc_msgSend(*(id *)(a1 + 40), "fulfillWithValue:", MEMORY[0x24BDBD1C0]);

  return 1;
}

uint64_t __54__HMDHome_Light__executeMatterNaturalLightingActions___block_invoke(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  NSObject *v5;
  void *v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  char v15;
  void *v16;
  void *v17;
  NSObject *v18;
  NSObject *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  __int128 v30;
  id obj;
  uint64_t v32;
  id v33;
  _QWORD v34[5];
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  uint8_t v39[128];
  uint8_t buf[4];
  void *v41;
  __int16 v42;
  id v43;
  uint64_t v44;

  v44 = *MEMORY[0x24BDAC8D0];
  v33 = a2;
  v3 = (void *)MEMORY[0x227676638]();
  objc_msgSend(*(id *)(a1 + 32), "lightLogCategory");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  HMFGetOSLogHandle();
  v5 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
  {
    HMFGetLogIdentifier();
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543618;
    v41 = v6;
    v42 = 2112;
    v43 = v33;
    _os_log_impl(&dword_2218F0000, v5, OS_LOG_TYPE_DEBUG, "%{public}@_executeNaturalLightingActionsForMatter returned result: %@", buf, 0x16u);

  }
  objc_autoreleasePoolPop(v3);
  v37 = 0u;
  v38 = 0u;
  v35 = 0u;
  v36 = 0u;
  obj = *(id *)(a1 + 40);
  v7 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v35, v39, 16);
  if (v7)
  {
    v9 = v7;
    v32 = *(_QWORD *)v36;
    *(_QWORD *)&v8 = 138543618;
    v30 = v8;
    do
    {
      v10 = 0;
      do
      {
        if (*(_QWORD *)v36 != v32)
          objc_enumerationMutation(obj);
        v11 = *(void **)(*((_QWORD *)&v35 + 1) + 8 * v10);
        v12 = *(void **)(a1 + 48);
        v34[0] = MEMORY[0x24BDAC760];
        v34[1] = 3221225472;
        v34[2] = __54__HMDHome_Light__executeMatterNaturalLightingActions___block_invoke_30;
        v34[3] = &unk_24E77E608;
        v34[4] = v11;
        objc_msgSend(v12, "na_firstObjectPassingTest:", v34, v30);
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v33, "objectForKey:", v11);
        v14 = (void *)objc_claimAutoreleasedReturnValue();
        v15 = objc_msgSend(v14, "BOOLValue");
        v16 = (void *)MEMORY[0x227676638]();
        objc_msgSend(*(id *)(a1 + 32), "lightLogCategory");
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        HMFGetOSLogHandle();
        v18 = objc_claimAutoreleasedReturnValue();
        v19 = v18;
        if ((v15 & 1) != 0)
        {
          if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
          {
            HMFGetLogIdentifier();
            v20 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = v30;
            v41 = v20;
            v42 = 2112;
            v43 = v11;
            _os_log_impl(&dword_2218F0000, v19, OS_LOG_TYPE_INFO, "%{public}@Successfully set natural lighting for matter light profile %@", buf, 0x16u);

          }
          objc_autoreleasePoolPop(v16);
          objc_msgSend(MEMORY[0x24BDBCE70], "hmd_dictionaryWithActionExecutionError:", 0);
          v21 = (void *)objc_claimAutoreleasedReturnValue();
          v22 = *(void **)(a1 + 56);
          objc_msgSend(v13, "uuid");
          v23 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v23, "UUIDString");
          v24 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v22, "setObject:forKeyedSubscript:", v21, v24);
        }
        else
        {
          if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
          {
            HMFGetLogIdentifier();
            v25 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = v30;
            v41 = v25;
            v42 = 2112;
            v43 = v11;
            _os_log_impl(&dword_2218F0000, v19, OS_LOG_TYPE_ERROR, "%{public}@Failed to set natural lighting for matter light profile %@", buf, 0x16u);

          }
          objc_autoreleasePoolPop(v16);
          v26 = (void *)MEMORY[0x24BDBCE70];
          objc_msgSend(MEMORY[0x24BDD1540], "hmErrorWithCode:", -1);
          v21 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v26, "hmd_dictionaryWithActionExecutionError:", v21);
          v23 = (void *)objc_claimAutoreleasedReturnValue();
          v27 = *(void **)(a1 + 56);
          objc_msgSend(v13, "uuid");
          v24 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v24, "UUIDString");
          v28 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v27, "setObject:forKeyedSubscript:", v23, v28);

        }
        ++v10;
      }
      while (v9 != v10);
      v9 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v35, v39, 16);
    }
    while (v9);
  }

  return 1;
}

uint64_t __54__HMDHome_Light__executeMatterNaturalLightingActions___block_invoke_33(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  NSObject *v6;
  void *v7;
  int v9;
  void *v10;
  __int16 v11;
  id v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v3 = a2;
  v4 = (void *)MEMORY[0x227676638]();
  v5 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v6 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
  {
    HMFGetLogIdentifier();
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = 138543618;
    v10 = v7;
    v11 = 2112;
    v12 = v3;
    _os_log_impl(&dword_2218F0000, v6, OS_LOG_TYPE_ERROR, "%{public}@Failed to set natural lighting for all matter light profiles with error: %@", (uint8_t *)&v9, 0x16u);

  }
  objc_autoreleasePoolPop(v4);

  return 1;
}

uint64_t __54__HMDHome_Light__executeMatterNaturalLightingActions___block_invoke_35(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  NSObject *v5;
  void *v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  char v15;
  void *v16;
  void *v17;
  NSObject *v18;
  NSObject *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  __int128 v30;
  id obj;
  uint64_t v32;
  id v33;
  _QWORD v34[5];
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  uint8_t v39[128];
  uint8_t buf[4];
  void *v41;
  __int16 v42;
  id v43;
  uint64_t v44;

  v44 = *MEMORY[0x24BDAC8D0];
  v33 = a2;
  v3 = (void *)MEMORY[0x227676638]();
  objc_msgSend(*(id *)(a1 + 32), "lightLogCategory");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  HMFGetOSLogHandle();
  v5 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
  {
    HMFGetLogIdentifier();
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543618;
    v41 = v6;
    v42 = 2112;
    v43 = v33;
    _os_log_impl(&dword_2218F0000, v5, OS_LOG_TYPE_DEBUG, "%{public}@_executeNaturalLightingActionsForMatter returned result: %@", buf, 0x16u);

  }
  objc_autoreleasePoolPop(v3);
  v37 = 0u;
  v38 = 0u;
  v35 = 0u;
  v36 = 0u;
  obj = *(id *)(a1 + 40);
  v7 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v35, v39, 16);
  if (v7)
  {
    v9 = v7;
    v32 = *(_QWORD *)v36;
    *(_QWORD *)&v8 = 138543618;
    v30 = v8;
    do
    {
      v10 = 0;
      do
      {
        if (*(_QWORD *)v36 != v32)
          objc_enumerationMutation(obj);
        v11 = *(void **)(*((_QWORD *)&v35 + 1) + 8 * v10);
        v12 = *(void **)(a1 + 48);
        v34[0] = MEMORY[0x24BDAC760];
        v34[1] = 3221225472;
        v34[2] = __54__HMDHome_Light__executeMatterNaturalLightingActions___block_invoke_36;
        v34[3] = &unk_24E77E608;
        v34[4] = v11;
        objc_msgSend(v12, "na_firstObjectPassingTest:", v34, v30);
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v33, "objectForKey:", v11);
        v14 = (void *)objc_claimAutoreleasedReturnValue();
        v15 = objc_msgSend(v14, "BOOLValue");
        v16 = (void *)MEMORY[0x227676638]();
        objc_msgSend(*(id *)(a1 + 32), "lightLogCategory");
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        HMFGetOSLogHandle();
        v18 = objc_claimAutoreleasedReturnValue();
        v19 = v18;
        if ((v15 & 1) != 0)
        {
          if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
          {
            HMFGetLogIdentifier();
            v20 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = v30;
            v41 = v20;
            v42 = 2112;
            v43 = v11;
            _os_log_impl(&dword_2218F0000, v19, OS_LOG_TYPE_INFO, "%{public}@Successfully set natural lighting for matter light profile %@", buf, 0x16u);

          }
          objc_autoreleasePoolPop(v16);
          objc_msgSend(MEMORY[0x24BDBCE70], "hmd_dictionaryWithActionExecutionError:", 0);
          v21 = (void *)objc_claimAutoreleasedReturnValue();
          v22 = *(void **)(a1 + 56);
          objc_msgSend(v13, "uuid");
          v23 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v23, "UUIDString");
          v24 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v22, "setObject:forKeyedSubscript:", v21, v24);
        }
        else
        {
          if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
          {
            HMFGetLogIdentifier();
            v25 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = v30;
            v41 = v25;
            v42 = 2112;
            v43 = v11;
            _os_log_impl(&dword_2218F0000, v19, OS_LOG_TYPE_ERROR, "%{public}@Failed to set natural lighting for matter light profile %@", buf, 0x16u);

          }
          objc_autoreleasePoolPop(v16);
          v26 = (void *)MEMORY[0x24BDBCE70];
          objc_msgSend(MEMORY[0x24BDD1540], "hmErrorWithCode:", -1);
          v21 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v26, "hmd_dictionaryWithActionExecutionError:", v21);
          v23 = (void *)objc_claimAutoreleasedReturnValue();
          v27 = *(void **)(a1 + 56);
          objc_msgSend(v13, "uuid");
          v24 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v24, "UUIDString");
          v28 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v27, "setObject:forKeyedSubscript:", v23, v28);

        }
        ++v10;
      }
      while (v9 != v10);
      v9 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v35, v39, 16);
    }
    while (v9);
  }

  return 1;
}

uint64_t __54__HMDHome_Light__executeMatterNaturalLightingActions___block_invoke_37(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  NSObject *v6;
  void *v7;
  int v9;
  void *v10;
  __int16 v11;
  id v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v3 = a2;
  v4 = (void *)MEMORY[0x227676638]();
  objc_msgSend(*(id *)(a1 + 32), "lightLogCategory");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  HMFGetOSLogHandle();
  v6 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
  {
    HMFGetLogIdentifier();
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = 138543618;
    v10 = v7;
    v11 = 2112;
    v12 = v3;
    _os_log_impl(&dword_2218F0000, v6, OS_LOG_TYPE_ERROR, "%{public}@Failed to set natural lighting for all matter light profiles with error: %@", (uint8_t *)&v9, 0x16u);

  }
  objc_autoreleasePoolPop(v4);

  return 1;
}

uint64_t __54__HMDHome_Light__executeMatterNaturalLightingActions___block_invoke_38(uint64_t a1)
{

  return 1;
}

uint64_t __54__HMDHome_Light__executeMatterNaturalLightingActions___block_invoke_36(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  uint64_t v5;

  objc_msgSend(a2, "lightProfileUUID");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 32), "uniqueIdentifier");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v3, "hmf_isEqualToUUID:", v4);

  return v5;
}

uint64_t __54__HMDHome_Light__executeMatterNaturalLightingActions___block_invoke_30(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  uint64_t v5;

  objc_msgSend(a2, "lightProfileUUID");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 32), "uniqueIdentifier");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v3, "hmf_isEqualToUUID:", v4);

  return v5;
}

uint64_t __68__HMDHome_Light___handleSetNaturalLightingEnabled_forLightProfiles___block_invoke(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  NSObject *v6;
  void *v7;
  uint64_t v8;
  _QWORD v10[4];
  id v11;
  uint8_t buf[4];
  void *v13;
  __int16 v14;
  uint64_t v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  v3 = a2;
  v10[0] = MEMORY[0x24BDAC760];
  v10[1] = 3221225472;
  v10[2] = __68__HMDHome_Light___handleSetNaturalLightingEnabled_forLightProfiles___block_invoke_2;
  v10[3] = &unk_24E77E5E0;
  v11 = *(id *)(a1 + 32);
  v4 = (void *)MEMORY[0x227676638](objc_msgSend(v3, "hmf_enumerateWithAutoreleasePoolUsingBlock:", v10));
  objc_msgSend(*(id *)(a1 + 40), "lightLogCategory");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  HMFGetOSLogHandle();
  v6 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
  {
    HMFGetLogIdentifier();
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = *(_QWORD *)(a1 + 32);
    *(_DWORD *)buf = 138543618;
    v13 = v7;
    v14 = 2112;
    v15 = v8;
    _os_log_impl(&dword_2218F0000, v6, OS_LOG_TYPE_DEBUG, "%{public}@_handleSetNaturalLightingEnabledresponses: %@", buf, 0x16u);

  }
  objc_autoreleasePoolPop(v4);
  objc_msgSend(*(id *)(a1 + 32), "copy");

  return 1;
}

void __68__HMDHome_Light___handleSetNaturalLightingEnabled_forLightProfiles___block_invoke_2(uint64_t a1, void *a2)
{
  void *v3;
  id v4;
  id v5;

  v5 = a2;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v3 = v5;
  else
    v3 = 0;
  v4 = v3;
  if (v4)
    objc_msgSend(*(id *)(a1 + 32), "addEntriesFromDictionary:", v4);

}

void __73__HMDHome_Light__handleSetNaturalLightingEnabledForLightProfilesMessage___block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  void *v8;
  NSObject *v9;
  void *v10;
  void *v11;
  void *v12;
  const __CFString *v13;
  id v14;
  uint8_t buf[4];
  void *v16;
  __int16 v17;
  id v18;
  __int16 v19;
  id v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  v5 = a2;
  v6 = a3;
  v7 = (void *)MEMORY[0x227676638]();
  objc_msgSend(*(id *)(a1 + 32), "lightLogCategory");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  HMFGetOSLogHandle();
  v9 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543874;
    v16 = v10;
    v17 = 2112;
    v18 = v6;
    v19 = 2112;
    v20 = v5;
    _os_log_impl(&dword_2218F0000, v9, OS_LOG_TYPE_INFO, "%{public}@Responding to message with error: %@ responses: %@", buf, 0x20u);

  }
  objc_autoreleasePoolPop(v7);
  v11 = *(void **)(a1 + 40);
  v13 = CFSTR("HMDHomeSetNaturalLightingEnabledByLightProfileUUIDsCodingKey");
  v14 = v5;
  objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", &v14, &v13, 1);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "respondWithPayload:", v12);

}

void __73__HMDHome_Light__handleSetNaturalLightingEnabled_forMatterLightProfiles___block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  id v8;
  NSObject *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t i;
  uint64_t v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  _QWORD v24[5];
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint8_t v29[128];
  uint8_t buf[4];
  void *v31;
  __int16 v32;
  id v33;
  __int16 v34;
  id v35;
  uint64_t v36;

  v36 = *MEMORY[0x24BDAC8D0];
  v5 = a2;
  v6 = a3;
  v7 = (void *)MEMORY[0x227676638]();
  v8 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v9 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543874;
    v31 = v10;
    v32 = 2112;
    v33 = v6;
    v34 = 2112;
    v35 = v5;
    _os_log_impl(&dword_2218F0000, v9, OS_LOG_TYPE_INFO, "%{public}@Completed setting natural lighitng with error: %@ responses: %@", buf, 0x20u);

  }
  v21 = v6;

  objc_autoreleasePoolPop(v7);
  objc_msgSend(MEMORY[0x24BDD1650], "strongToStrongObjectsMapTable");
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  v23 = v5;
  v25 = 0u;
  v26 = 0u;
  v27 = 0u;
  v28 = 0u;
  objc_msgSend(v5, "allKeys");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v12 = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v25, v29, 16);
  if (v12)
  {
    v13 = v12;
    v14 = *(_QWORD *)v26;
    v15 = MEMORY[0x24BDAC760];
    do
    {
      for (i = 0; i != v13; ++i)
      {
        if (*(_QWORD *)v26 != v14)
          objc_enumerationMutation(v11);
        v17 = *(_QWORD *)(*((_QWORD *)&v25 + 1) + 8 * i);
        v18 = *(void **)(a1 + 40);
        v24[0] = v15;
        v24[1] = 3221225472;
        v24[2] = __73__HMDHome_Light__handleSetNaturalLightingEnabled_forMatterLightProfiles___block_invoke_18;
        v24[3] = &unk_24E782CB8;
        v24[4] = v17;
        objc_msgSend(v18, "na_firstObjectPassingTest:", v24, v21);
        v19 = (void *)objc_claimAutoreleasedReturnValue();
        if (v19)
        {
          objc_msgSend(v23, "objectForKeyedSubscript:", v17);
          v20 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v22, "setObject:forKey:", v20, v19);

        }
      }
      v13 = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v25, v29, 16);
    }
    while (v13);
  }

  objc_msgSend(*(id *)(a1 + 48), "fulfillWithValue:", v22);
}

void __73__HMDHome_Light__handleSetNaturalLightingEnabled_forMatterLightProfiles___block_invoke_3(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id WeakRetained;
  void *v8;
  void *v9;
  void *v10;
  NSObject *v11;
  void *v12;
  void *v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t i;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  id v25;
  uint64_t v26;
  id v27;
  id v28;
  id v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  uint8_t v34[128];
  uint8_t buf[4];
  void *v36;
  __int16 v37;
  id v38;
  uint64_t v39;

  v39 = *MEMORY[0x24BDAC8D0];
  v5 = a2;
  v6 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  if (!WeakRetained)
  {
    v23 = *(void **)(a1 + 32);
    objc_msgSend(MEMORY[0x24BDD1540], "hmErrorWithCode:", 20);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v24 = v23;
    v25 = v8;
LABEL_15:
    objc_msgSend(v24, "rejectWithError:", v25);
    goto LABEL_16;
  }
  objc_msgSend(MEMORY[0x24BDD1650], "strongToStrongObjectsMapTable");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v6)
  {
    v24 = *(void **)(a1 + 32);
    v25 = v5;
    goto LABEL_15;
  }
  v29 = v5;
  v9 = (void *)MEMORY[0x227676638]();
  v27 = WeakRetained;
  objc_msgSend(WeakRetained, "lightLogCategory");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  HMFGetOSLogHandle();
  v11 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543618;
    v36 = v12;
    v37 = 2112;
    v38 = v6;
    _os_log_impl(&dword_2218F0000, v11, OS_LOG_TYPE_INFO, "%{public}@setNaturalLightingEnabledForLightProfiles responsePayload: %@", buf, 0x16u);

  }
  objc_autoreleasePoolPop(v9);
  v28 = v6;
  objc_msgSend(v6, "hmf_dictionaryForKey:", CFSTR("HMDHomeSetNaturalLightingEnabledByLightProfileUUIDsCodingKey"));
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  v30 = 0u;
  v31 = 0u;
  v32 = 0u;
  v33 = 0u;
  v26 = a1;
  v14 = *(id *)(a1 + 40);
  v15 = objc_msgSend(v14, "countByEnumeratingWithState:objects:count:", &v30, v34, 16);
  if (v15)
  {
    v16 = v15;
    v17 = *(_QWORD *)v31;
    do
    {
      for (i = 0; i != v16; ++i)
      {
        if (*(_QWORD *)v31 != v17)
          objc_enumerationMutation(v14);
        v19 = *(void **)(*((_QWORD *)&v30 + 1) + 8 * i);
        objc_msgSend(v19, "uniqueIdentifier", v26);
        v20 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v20, "UUIDString");
        v21 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v13, "hmf_numberForKey:", v21);
        v22 = (void *)objc_claimAutoreleasedReturnValue();

        objc_msgSend(v8, "setObject:forKey:", v22, v19);
      }
      v16 = objc_msgSend(v14, "countByEnumeratingWithState:objects:count:", &v30, v34, 16);
    }
    while (v16);
  }

  objc_msgSend(*(id *)(v26 + 32), "fulfillWithValue:", v8);
  v6 = v28;
  v5 = v29;
  WeakRetained = v27;
LABEL_16:

}

id __73__HMDHome_Light__handleSetNaturalLightingEnabled_forMatterLightProfiles___block_invoke_2(uint64_t a1, void *a2)
{
  void *v2;
  void *v3;

  objc_msgSend(a2, "uniqueIdentifier");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "UUIDString");
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  return v3;
}

uint64_t __73__HMDHome_Light__handleSetNaturalLightingEnabled_forMatterLightProfiles___block_invoke_18(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  uint64_t v5;

  objc_msgSend(a2, "uniqueIdentifier");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "UUIDString");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v4, "isEqual:", *(_QWORD *)(a1 + 32));

  return v5;
}

void __46__HMDHome_Light__updateLightProfilesSettings___block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id WeakRetained;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t i;
  void *v13;
  NSObject *v14;
  void *v15;
  void *v16;
  NSObject *v17;
  void *v18;
  id obj;
  id v20;
  _QWORD block[5];
  id v22;
  id v23;
  id v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint8_t v29[128];
  uint8_t buf[4];
  void *v31;
  __int16 v32;
  void *v33;
  __int16 v34;
  id v35;
  uint64_t v36;

  v36 = *MEMORY[0x24BDAC8D0];
  v20 = a2;
  v5 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    v7 = v5;
    if (objc_msgSend(v5, "count"))
    {
      v27 = 0u;
      v28 = 0u;
      v25 = 0u;
      v26 = 0u;
      obj = *(id *)(a1 + 32);
      v8 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v25, v29, 16);
      if (v8)
      {
        v9 = v8;
        v10 = *(_QWORD *)v26;
        v11 = MEMORY[0x24BDAC760];
        do
        {
          for (i = 0; i != v9; ++i)
          {
            if (*(_QWORD *)v26 != v10)
              objc_enumerationMutation(obj);
            v13 = *(void **)(*((_QWORD *)&v25 + 1) + 8 * i);
            objc_msgSend(v13, "workQueue");
            v14 = objc_claimAutoreleasedReturnValue();
            block[0] = v11;
            block[1] = 3221225472;
            block[2] = __46__HMDHome_Light__updateLightProfilesSettings___block_invoke_13;
            block[3] = &unk_24E79A910;
            block[4] = v13;
            v5 = v7;
            v22 = v7;
            v23 = WeakRetained;
            v24 = v20;
            dispatch_async(v14, block);

          }
          v9 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v25, v29, 16);
        }
        while (v9);
      }

    }
    else
    {
      v15 = (void *)MEMORY[0x227676638]();
      objc_msgSend(WeakRetained, "lightLogCategory");
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      HMFGetOSLogHandle();
      v17 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v18 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543874;
        v31 = v18;
        v32 = 2112;
        v33 = v7;
        v34 = 2112;
        v35 = v20;
        _os_log_impl(&dword_2218F0000, v17, OS_LOG_TYPE_ERROR, "%{public}@Received empty response payload for light profile charactersitic read requests %@:%@", buf, 0x20u);

      }
      objc_autoreleasePoolPop(v15);
      v5 = v7;
    }
  }

}

void __46__HMDHome_Light__updateLightProfilesSettings___block_invoke_13(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  void *v4;
  id v5;
  void *v6;
  void *v7;
  NSObject *v8;
  NSObject *v9;
  void *v10;
  uint64_t v11;
  const char *v12;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  void *v16;
  id v17;
  uint8_t buf[4];
  void *v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  void *v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v2 = *(void **)(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  v17 = 0;
  objc_msgSend(v2, "updateSettingsWithReadCharacteristicResponsePayload:error:", v3, &v17);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = v17;
  v6 = (void *)MEMORY[0x227676638]();
  objc_msgSend(*(id *)(a1 + 48), "lightLogCategory");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  HMFGetOSLogHandle();
  v8 = objc_claimAutoreleasedReturnValue();
  v9 = v8;
  if (v4)
  {
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      v11 = *(_QWORD *)(a1 + 32);
      *(_DWORD *)buf = 138543874;
      v19 = v10;
      v20 = 2112;
      v21 = v11;
      v22 = 2112;
      v23 = v4;
      v12 = "%{public}@Successfully updated light profile settings %@:%@";
      v13 = v9;
      v14 = OS_LOG_TYPE_INFO;
LABEL_6:
      _os_log_impl(&dword_2218F0000, v13, v14, v12, buf, 0x20u);

    }
  }
  else if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
  {
    HMFGetLogIdentifier();
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v15 = *(_QWORD *)(a1 + 32);
    v16 = *(void **)(a1 + 56);
    *(_DWORD *)buf = 138543874;
    v19 = v10;
    v20 = 2112;
    v21 = v15;
    v22 = 2112;
    v23 = v16;
    v12 = "%{public}@Failed to update light profile settings %@:%@";
    v13 = v9;
    v14 = OS_LOG_TYPE_ERROR;
    goto LABEL_6;
  }

  objc_autoreleasePoolPop(v6);
}

BOOL __82__HMDHome_Light__updateLightProfilesSettingsWithRequiresHomeNotificationsEnabled___block_invoke(uint64_t a1, void *a2)
{
  void *v2;
  _BOOL8 v3;

  objc_msgSend(a2, "notificationEnabledCharacteristics");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "count") != 0;

  return v3;
}

id __39__HMDHome_Light__lightProfileWithUUID___block_invoke(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  void *v6;
  void *v7;
  void *v8;
  _QWORD v10[4];
  id v11;

  v3 = a2;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v4 = v3;
  else
    v4 = 0;
  v5 = v4;
  v6 = v5;
  if (v5)
  {
    objc_msgSend(v5, "lightProfiles");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v10[0] = MEMORY[0x24BDAC760];
    v10[1] = 3221225472;
    v10[2] = __39__HMDHome_Light__lightProfileWithUUID___block_invoke_2;
    v10[3] = &unk_24E782CB8;
    v11 = *(id *)(a1 + 32);
    objc_msgSend(v7, "na_firstObjectPassingTest:", v10);
    v8 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v8 = 0;
  }

  return v8;
}

uint64_t __39__HMDHome_Light__lightProfileWithUUID___block_invoke_2(uint64_t a1, void *a2)
{
  void *v3;
  uint64_t v4;

  objc_msgSend(a2, "uniqueIdentifier");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "isEqual:", *(_QWORD *)(a1 + 32));

  return v4;
}

- (void)configurePrimaryResidentMessageRouterWithFactory:(id)a3 metricsDispatcherFactory:(id)a4
{
  id v6;
  id v7;
  void *v8;
  HMDHome *v9;
  NSObject *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  int v18;
  void *v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  v6 = a3;
  v7 = a4;
  v8 = (void *)MEMORY[0x227676638]();
  v9 = self;
  HMFGetOSLogHandle();
  v10 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v18 = 138543362;
    v19 = v11;
    _os_log_impl(&dword_2218F0000, v10, OS_LOG_TYPE_INFO, "%{public}@Configuring primary resident message router", (uint8_t *)&v18, 0xCu);

  }
  objc_autoreleasePoolPop(v8);
  -[HMDHome msgDispatcher](v9, "msgDispatcher");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHome msgDispatcher](v9, "msgDispatcher");
  v13 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v13)
    _HMFPreconditionFailure();
  +[HMDMetricsManager sharedLogEventSubmitter](HMDMetricsManager, "sharedLogEventSubmitter");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "createPrimaryResidentMessageRouterMetricsDispatcherWithLogEventSubmitter:", v14);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHome uuid](v9, "uuid");
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "createPrimaryResidentMessageRouterWithHomeUUID:messageDispatcher:metricsDispatcher:", v16, v12, v15);
  v17 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v17, "setDataSource:", v9);
  -[HMDHome setPrimaryResidentMessageRouter:](v9, "setPrimaryResidentMessageRouter:", v17);

}

- (id)createPrimaryResidentMessageRouterWithHomeUUID:(id)a3 messageDispatcher:(id)a4 metricsDispatcher:(id)a5
{
  id v7;
  id v8;
  id v9;
  HMDPrimaryResidentMessageRouter *v10;

  v7 = a5;
  v8 = a4;
  v9 = a3;
  v10 = -[HMDPrimaryResidentMessageRouter initWithHomeUUID:messageDispatcher:metricsDispatcher:]([HMDPrimaryResidentMessageRouter alloc], "initWithHomeUUID:messageDispatcher:metricsDispatcher:", v9, v8, v7);

  return v10;
}

- (id)createAccessorySettingsLocalMessageHandlerWithHomeUUID:(id)a3 languageValuesDataProvider:(id)a4
{
  id v5;
  id v6;
  HMDAccessorySettingsLocalMessageHandler *v7;

  v5 = a4;
  v6 = a3;
  v7 = -[HMDAccessorySettingsLocalMessageHandler initWithHomeUUID:languageValuesDataProvider:]([HMDAccessorySettingsLocalMessageHandler alloc], "initWithHomeUUID:languageValuesDataProvider:", v6, v5);

  return v7;
}

- (id)dataProvidersForUnifiedLanguageValueListSettingDataProvider:(id)a3
{
  _QWORD v4[2];

  v4[1] = *MEMORY[0x24BDAC8D0];
  v4[0] = self;
  objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", v4, 1);
  return (id)objc_claimAutoreleasedReturnValue();
}

- (id)languageValueList
{
  void *v3;
  void *v4;
  _QWORD v6[5];

  -[HMDHome appleMediaAccessories](self, "appleMediaAccessories");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v6[0] = MEMORY[0x24BDAC760];
  v6[1] = 3221225472;
  v6[2] = __83__HMDHome_UnifiedLanguageValueListSettingDataProviderDataSource__languageValueList__block_invoke;
  v6[3] = &unk_24E780CA0;
  v6[4] = self;
  objc_msgSend(v3, "na_flatMap:", v6);
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  return v4;
}

id __83__HMDHome_UnifiedLanguageValueListSettingDataProviderDataSource__languageValueList__block_invoke(uint64_t a1, void *a2)
{
  void *v2;
  id v3;
  void *v4;
  void *v5;
  void *v6;
  id v7;
  void *v8;
  id v9;
  void *v10;

  v2 = *(void **)(a1 + 32);
  v3 = a2;
  objc_msgSend(v2, "fetchedAccessorySettingsSubscriber");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "uuid");
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v4, "cachedSettingForAccessory:keyPath:", v5, CFSTR("root.siri.availableLanguages"));
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  v7 = v6;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v8 = v7;
  else
    v8 = 0;
  v9 = v8;

  objc_msgSend(v9, "languageValues");
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  return v10;
}

- (id)accessCodeForMatterUserWithUserUniqueID:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  NSObject *v7;
  void *v8;
  void *v9;
  __CFString *v10;
  void *v11;
  uint64_t v12;
  id v13;
  void *v14;
  void *v15;
  __CFString *v16;
  __CFString *v17;
  _QWORD v19[4];
  id v20;
  HMDHome *v21;
  _QWORD v22[4];
  id v23;
  uint8_t buf[4];
  void *v25;
  __int16 v26;
  void *v27;
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  v4 = a3;
  v5 = (void *)MEMORY[0x227676638]();
  -[HMDHome walletLogCategory](self, "walletLogCategory");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  HMFGetOSLogHandle();
  v7 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHome uniqueIDsOfAllUsers](self, "uniqueIDsOfAllUsers");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543618;
    v25 = v8;
    v26 = 2112;
    v27 = v9;
    _os_log_impl(&dword_2218F0000, v7, OS_LOG_TYPE_INFO, "%{public}@uniqueIDsOfAllUsers: %@", buf, 0x16u);

  }
  objc_autoreleasePoolPop(v5);
  v10 = &stru_24E79DB48;
  if (v4)
  {
    -[HMDHome users](self, "users");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v12 = MEMORY[0x24BDAC760];
    v22[0] = MEMORY[0x24BDAC760];
    v22[1] = 3221225472;
    v22[2] = __76__HMDHome_AccessoryUserIdentifier__accessCodeForMatterUserWithUserUniqueID___block_invoke;
    v22[3] = &unk_24E799728;
    v13 = v4;
    v23 = v13;
    objc_msgSend(v11, "na_firstObjectPassingTest:", v22);
    v14 = (void *)objc_claimAutoreleasedReturnValue();

    if (v14)
    {
      objc_msgSend(v14, "accessCode");
      v10 = (__CFString *)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      -[HMDHome labelsByAccessCode](self, "labelsByAccessCode");
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      v19[0] = v12;
      v19[1] = 3221225472;
      v19[2] = __76__HMDHome_AccessoryUserIdentifier__accessCodeForMatterUserWithUserUniqueID___block_invoke_2;
      v19[3] = &unk_24E781488;
      v20 = v13;
      v21 = self;
      objc_msgSend(v15, "na_firstKeyPassingTest:", v19);
      v16 = (__CFString *)objc_claimAutoreleasedReturnValue();

      if (v16)
        v17 = v16;
      else
        v17 = &stru_24E79DB48;
      v10 = v17;

    }
  }

  return v10;
}

- (id)findUserIndexForUserUUID:(id)a3 guestName:(id)a4 accessory:(id)a5
{
  id v8;
  id v9;
  id v10;
  void *v11;
  void *v12;
  NSObject *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  NSObject *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  int v28;
  void *v29;
  __int16 v30;
  id v31;
  __int16 v32;
  id v33;
  __int16 v34;
  void *v35;
  uint64_t v36;

  v36 = *MEMORY[0x24BDAC8D0];
  v8 = a3;
  v9 = a4;
  v10 = a5;
  v11 = (void *)MEMORY[0x227676638]();
  -[HMDHome walletLogCategory](self, "walletLogCategory");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  HMFGetOSLogHandle();
  v13 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "uuid");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    v28 = 138544130;
    v29 = v14;
    v30 = 2112;
    v31 = v8;
    v32 = 2112;
    v33 = v9;
    v34 = 2112;
    v35 = v15;
    _os_log_impl(&dword_2218F0000, v13, OS_LOG_TYPE_INFO, "%{public}@findUserIndexForUserUUID: %@ guestName: %@, accessory: %@", (uint8_t *)&v28, 0x2Au);

  }
  objc_autoreleasePoolPop(v11);
  if (v9)
  {
    -[HMDHome labelsByAccessCode](self, "labelsByAccessCode");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v16, "firstKeyWithValue:", v9);
    v17 = (void *)objc_claimAutoreleasedReturnValue();

    -[HMDHome userUniqueIDForGuestAccessCode:](self, "userUniqueIDForGuestAccessCode:", v17);
  }
  else
  {
    -[HMDHome userWithUUID:](self, "userWithUUID:", v8);
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v17, "uniqueIDForAccessories");
  }
  v18 = (void *)objc_claimAutoreleasedReturnValue();

  if (v18)
  {
    -[HMDHome findUserSlotForUserUniqueIdentifier:onAccessory:](self, "findUserSlotForUserUniqueIdentifier:onAccessory:", v18, v10);
    v19 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v20 = (void *)MEMORY[0x227676638]();
    -[HMDHome walletLogCategory](self, "walletLogCategory");
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    HMFGetOSLogHandle();
    v22 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v23 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v10, "uuid");
      v24 = (void *)objc_claimAutoreleasedReturnValue();
      v28 = 138544130;
      v29 = v23;
      v30 = 2112;
      v31 = v8;
      v32 = 2112;
      v33 = v9;
      v34 = 2112;
      v35 = v24;
      _os_log_impl(&dword_2218F0000, v22, OS_LOG_TYPE_ERROR, "%{public}@Failed to find userUniqueID for user: %@, guest: %@, accessory: %@", (uint8_t *)&v28, 0x2Au);

    }
    objc_autoreleasePoolPop(v20);
    v25 = (void *)MEMORY[0x24BE6B608];
    objc_msgSend(MEMORY[0x24BDD1540], "hmErrorWithCode:", 2);
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v25, "futureWithError:", v26);
    v19 = (void *)objc_claimAutoreleasedReturnValue();

  }
  return v19;
}

- (id)findOrAddUserIndexForUserUUID:(id)a3 guestName:(id)a4 accessory:(id)a5 flow:(id)a6
{
  unint64_t v10;
  unint64_t v11;
  id v12;
  id v13;
  void *v14;
  HMDHome *v15;
  NSObject *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  id v22;
  void *v23;
  void *v24;
  void *v25;
  HMDHome *v26;
  NSObject *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  HMDHome *v34;
  NSObject *v35;
  void *v36;
  void *v37;
  _QWORD v39[5];
  id v40;
  id v41;
  id v42;
  _QWORD v43[5];
  id v44;
  id v45;
  id v46;
  uint8_t buf[4];
  void *v48;
  __int16 v49;
  unint64_t v50;
  __int16 v51;
  unint64_t v52;
  __int16 v53;
  unint64_t v54;
  __int16 v55;
  void *v56;
  uint64_t v57;

  v57 = *MEMORY[0x24BDAC8D0];
  v10 = (unint64_t)a3;
  v11 = (unint64_t)a4;
  v12 = a5;
  v13 = a6;
  v14 = (void *)MEMORY[0x227676638]();
  v15 = self;
  HMFGetOSLogHandle();
  v16 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "UUID");
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "uuid");
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138544386;
    v48 = v17;
    v49 = 2112;
    v50 = (unint64_t)v18;
    v51 = 2112;
    v52 = v10;
    v53 = 2112;
    v54 = v11;
    v55 = 2112;
    v56 = v19;
    _os_log_impl(&dword_2218F0000, v16, OS_LOG_TYPE_INFO, "%{public}@[Flow: %@] findOrAddUserIndexForUserUUID: %@ guestName: %@, accessory: %@", buf, 0x34u);

  }
  objc_autoreleasePoolPop(v14);
  if (v10 | v11)
  {
    if (v10)
    {
      -[HMDHome userWithUUID:](v15, "userWithUUID:", v10);
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      if (!v20)
      {
        v33 = (void *)MEMORY[0x227676638]();
        v34 = v15;
        HMFGetOSLogHandle();
        v35 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v35, OS_LOG_TYPE_ERROR))
        {
          HMFGetLogIdentifier();
          v36 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543618;
          v48 = v36;
          v49 = 2112;
          v50 = v10;
          _os_log_impl(&dword_2218F0000, v35, OS_LOG_TYPE_ERROR, "%{public}@Failed to findOrAddUserIndexForUserUUID because could not find user in home with UUID: %@", buf, 0x16u);

        }
        objc_autoreleasePoolPop(v33);
        v37 = (void *)MEMORY[0x24BE6B608];
        objc_msgSend(MEMORY[0x24BDD1540], "hmfErrorWithCode:", 2);
        v21 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v37, "futureWithError:", v21);
        v23 = (void *)objc_claimAutoreleasedReturnValue();
        goto LABEL_15;
      }
      -[HMDHome findOrAddUser:onAccessory:flow:](v15, "findOrAddUser:onAccessory:flow:", v20, v12, v13);
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v21, "naFuture");
      v22 = (id)objc_claimAutoreleasedReturnValue();
      v43[0] = MEMORY[0x24BDAC760];
      v43[1] = 3221225472;
      v43[2] = __91__HMDHome_AccessoryUserIdentifier__findOrAddUserIndexForUserUUID_guestName_accessory_flow___block_invoke;
      v43[3] = &unk_24E792CD8;
      v43[4] = v15;
      v44 = v13;
      v45 = v20;
      v46 = v12;
      objc_msgSend(v22, "addFailureBlock:", v43);
      v23 = (void *)objc_claimAutoreleasedReturnValue();

      v24 = v44;
    }
    else
    {
      -[HMDHome labelsByAccessCode](v15, "labelsByAccessCode");
      v31 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v31, "firstKeyWithValue:", v11);
      v32 = (void *)objc_claimAutoreleasedReturnValue();

      -[HMDHome findOrAddUserUniqueIDForGuestAccessCode:onAccessory:](v15, "findOrAddUserUniqueIDForGuestAccessCode:onAccessory:", v32, v12);
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v20, "naFuture");
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      v39[0] = MEMORY[0x24BDAC760];
      v39[1] = 3221225472;
      v39[2] = __91__HMDHome_AccessoryUserIdentifier__findOrAddUserIndexForUserUUID_guestName_accessory_flow___block_invoke_84;
      v39[3] = &unk_24E792CD8;
      v39[4] = v15;
      v40 = v13;
      v41 = v32;
      v42 = v12;
      v22 = v32;
      objc_msgSend(v21, "addFailureBlock:", v39);
      v23 = (void *)objc_claimAutoreleasedReturnValue();

      v24 = v40;
    }

LABEL_15:
    goto LABEL_16;
  }
  v25 = (void *)MEMORY[0x227676638]();
  v26 = v15;
  HMFGetOSLogHandle();
  v27 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
  {
    HMFGetLogIdentifier();
    v28 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "UUID");
    v29 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543618;
    v48 = v28;
    v49 = 2112;
    v50 = (unint64_t)v29;
    _os_log_impl(&dword_2218F0000, v27, OS_LOG_TYPE_ERROR, "%{public}@[Flow: %@] Both userUUID and guestName are nil, this is a bug", buf, 0x16u);

  }
  objc_autoreleasePoolPop(v25);
  v30 = (void *)MEMORY[0x24BE6B608];
  objc_msgSend(MEMORY[0x24BDD1540], "hmErrorWithCode:", -1);
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v30, "futureWithError:", v20);
  v23 = (void *)objc_claimAutoreleasedReturnValue();
LABEL_16:

  return v23;
}

- (id)findOrAddUser:(id)a3 onAccessory:(id)a4 flow:(id)a5
{
  return -[HMDHome findOrAddUser:onAccessory:didRedispatch:flow:](self, "findOrAddUser:onAccessory:didRedispatch:flow:", a3, a4, 0, a5);
}

- (id)findOrAddUser:(id)a3 onAccessory:(id)a4 didRedispatch:(BOOL)a5 flow:(id)a6
{
  id v9;
  id v10;
  id v11;
  void *v12;
  HMDHome *v13;
  NSObject *v14;
  void *v15;
  void *v16;
  id v17;
  void *v18;
  void *v19;
  void *v20;
  id v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  HMDHome *v27;
  NSObject *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  id v35;
  _QWORD v36[4];
  id v37;
  HMDHome *v38;
  id v39;
  id v40;
  uint8_t buf[4];
  void *v42;
  __int16 v43;
  void *v44;
  __int16 v45;
  void *v46;
  __int16 v47;
  void *v48;
  __int16 v49;
  void *v50;
  uint64_t v51;

  v51 = *MEMORY[0x24BDAC8D0];
  v9 = a3;
  v10 = a4;
  v11 = a6;
  v12 = (void *)MEMORY[0x227676638]();
  v13 = self;
  HMFGetOSLogHandle();
  v14 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "UUID");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "uuid");
    v35 = v11;
    v17 = v9;
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "uuid");
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    HMFBooleanToString();
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138544386;
    v42 = v15;
    v43 = 2112;
    v44 = v16;
    v45 = 2112;
    v46 = v18;
    v47 = 2112;
    v48 = v19;
    v49 = 2112;
    v50 = v20;
    _os_log_impl(&dword_2218F0000, v14, OS_LOG_TYPE_INFO, "%{public}@[Flow: %@] findOrAddUser: %@ onAccessory: %@, didRedispatch: %@", buf, 0x34u);

    v9 = v17;
    v11 = v35;

  }
  objc_autoreleasePoolPop(v12);
  if ((objc_msgSend(v10, "supportsCHIP") & 1) != 0)
  {
    v21 = objc_alloc(MEMORY[0x24BE3F168]);
    -[HMDHome workQueue](v13, "workQueue");
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    v23 = (void *)objc_msgSend(v21, "initWithQueue:", v22);

    -[HMDHome getOrCreateUniqueIDForAccessoriesForUser:flow:](v13, "getOrCreateUniqueIDForAccessoriesForUser:flow:", v9, v11);
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    v36[0] = MEMORY[0x24BDAC760];
    v36[1] = 3221225472;
    v36[2] = __81__HMDHome_AccessoryUserIdentifier__findOrAddUser_onAccessory_didRedispatch_flow___block_invoke;
    v36[3] = &unk_24E7891B0;
    v37 = v9;
    v38 = v13;
    v39 = v10;
    v40 = v11;
    objc_msgSend(v24, "inContext:then:orRecover:", v23, v36, &__block_literal_global_91_84442);
    v25 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v26 = (void *)MEMORY[0x227676638]();
    v27 = v13;
    HMFGetOSLogHandle();
    v28 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v29 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v11, "UUID");
      v30 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v10, "uuid");
      v31 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v10, "supportsCHIP");
      HMFBooleanToString();
      v32 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138544130;
      v42 = v29;
      v43 = 2112;
      v44 = v30;
      v45 = 2112;
      v46 = v31;
      v47 = 2112;
      v48 = v32;
      _os_log_impl(&dword_2218F0000, v28, OS_LOG_TYPE_ERROR, "%{public}@[Flow: %@] Not a matter accessory, cannot find or add user on accessory: %@, supportsCHIP: %@", buf, 0x2Au);

    }
    objc_autoreleasePoolPop(v26);
    v33 = (void *)MEMORY[0x24BE3F180];
    objc_msgSend(MEMORY[0x24BDD1540], "hmfErrorWithCode:", 5);
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v33, "futureWithError:", v23);
    v25 = (void *)objc_claimAutoreleasedReturnValue();
  }

  return v25;
}

- (id)removeUsersFromAccessory:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  id v7;
  void *v8;
  void *v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(uint64_t, uint64_t);
  void *v14;
  HMDHome *v15;
  id v16;

  v4 = a3;
  v5 = (void *)MEMORY[0x24BE3F180];
  -[HMDHome users](self, "users");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v11 = MEMORY[0x24BDAC760];
  v12 = 3221225472;
  v13 = __61__HMDHome_AccessoryUserIdentifier__removeUsersFromAccessory___block_invoke;
  v14 = &unk_24E7814D0;
  v15 = self;
  v16 = v4;
  v7 = v4;
  objc_msgSend(v6, "na_map:", &v11);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "allSettled:", v8, v11, v12, v13, v14, v15);
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  return v9;
}

- (id)removeUserFromMatterAccessories:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  id v7;
  void *v8;
  void *v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(uint64_t, uint64_t);
  void *v14;
  HMDHome *v15;
  id v16;

  v4 = a3;
  v5 = (void *)MEMORY[0x24BE3F180];
  -[HMDHome matterAccessories](self, "matterAccessories");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v11 = MEMORY[0x24BDAC760];
  v12 = 3221225472;
  v13 = __68__HMDHome_AccessoryUserIdentifier__removeUserFromMatterAccessories___block_invoke;
  v14 = &unk_24E792BB8;
  v15 = self;
  v16 = v4;
  v7 = v4;
  objc_msgSend(v6, "na_map:", &v11);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "allSettled:", v8, v11, v12, v13, v14, v15);
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  return v9;
}

- (id)removeUser:(id)a3 fromAccessory:(id)a4
{
  id v6;
  id v7;
  void *v8;
  void *v9;
  NSObject *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  uint64_t v15;
  void *v16;
  void *v17;
  NSObject *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  NSObject *v24;
  void *v25;
  int v27;
  void *v28;
  __int16 v29;
  void *v30;
  __int16 v31;
  void *v32;
  uint64_t v33;

  v33 = *MEMORY[0x24BDAC8D0];
  v6 = a3;
  v7 = a4;
  v8 = (void *)MEMORY[0x227676638]();
  -[HMDHome walletLogCategory](self, "walletLogCategory");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  HMFGetOSLogHandle();
  v10 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "uuid");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "uuid");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    v27 = 138543874;
    v28 = v11;
    v29 = 2112;
    v30 = v12;
    v31 = 2112;
    v32 = v13;
    _os_log_impl(&dword_2218F0000, v10, OS_LOG_TYPE_INFO, "%{public}@Removing user from matter accessory. user: %@, accessory: %@", (uint8_t *)&v27, 0x20u);

  }
  objc_autoreleasePoolPop(v8);
  if ((objc_msgSend(v7, "supportsCHIP") & 1) != 0)
  {
    objc_msgSend(v6, "uniqueIDForAccessories");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    if (v14)
    {
      -[HMDHome handleRemoveUserUniqueIdentifier:fromAccessory:](self, "handleRemoveUserUniqueIdentifier:fromAccessory:", v14, v7);
      v15 = objc_claimAutoreleasedReturnValue();
    }
    else
    {
      v22 = (void *)MEMORY[0x227676638]();
      -[HMDHome walletLogCategory](self, "walletLogCategory");
      v23 = (void *)objc_claimAutoreleasedReturnValue();
      HMFGetOSLogHandle();
      v24 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v24, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v25 = (void *)objc_claimAutoreleasedReturnValue();
        v27 = 138543362;
        v28 = v25;
        _os_log_impl(&dword_2218F0000, v24, OS_LOG_TYPE_INFO, "%{public}@User does not have uniqueIDForAccessories, so nothing to do", (uint8_t *)&v27, 0xCu);

      }
      objc_autoreleasePoolPop(v22);
      objc_msgSend(MEMORY[0x24BE3F180], "futureWithNoValue");
      v15 = objc_claimAutoreleasedReturnValue();
    }
    v21 = (void *)v15;

  }
  else
  {
    v16 = (void *)MEMORY[0x227676638]();
    -[HMDHome walletLogCategory](self, "walletLogCategory");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    HMFGetOSLogHandle();
    v18 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v7, "uuid");
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      v27 = 138543618;
      v28 = v19;
      v29 = 2112;
      v30 = v20;
      _os_log_impl(&dword_2218F0000, v18, OS_LOG_TYPE_ERROR, "%{public}@Not a matter accessory, cannot remove user from accessory: %@", (uint8_t *)&v27, 0x16u);

    }
    objc_autoreleasePoolPop(v16);
    objc_msgSend(MEMORY[0x24BE3F180], "futureWithNoValue");
    v21 = (void *)objc_claimAutoreleasedReturnValue();
  }

  return v21;
}

- (id)findOrAddUserUniqueIDForGuestAccessCode:(id)a3 onAccessory:(id)a4
{
  id v6;
  id v7;
  void *v8;
  void *v9;
  NSObject *v10;
  void *v11;
  void *v12;
  uint64_t v13;
  id v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  NSObject *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  uint64_t v24;
  void *v25;
  void *v26;
  void *v27;
  NSObject *v28;
  NSObject *v29;
  void *v30;
  id v31;
  void *v32;
  void *v33;
  void *v35;
  _QWORD v36[5];
  id v37;
  id v38;
  uint8_t buf[4];
  void *v40;
  __int16 v41;
  id v42;
  __int16 v43;
  id v44;
  uint64_t v45;

  v45 = *MEMORY[0x24BDAC8D0];
  v6 = a3;
  v7 = a4;
  v8 = (void *)MEMORY[0x227676638]();
  -[HMDHome walletLogCategory](self, "walletLogCategory");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  HMFGetOSLogHandle();
  v10 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "uuid");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543874;
    v40 = v11;
    v41 = 2112;
    v42 = v6;
    v43 = 2112;
    v44 = v12;
    _os_log_impl(&dword_2218F0000, v10, OS_LOG_TYPE_INFO, "%{public}@findOrAddUserUniqueIDForGuestAccessCode: %@ onAccessory: %@", buf, 0x20u);

  }
  objc_autoreleasePoolPop(v8);
  if ((objc_msgSend(v7, "supportsCHIP") & 1) != 0)
  {
    -[HMDHome userUniqueIDForGuestAccessCode:](self, "userUniqueIDForGuestAccessCode:", v6);
    v13 = objc_claimAutoreleasedReturnValue();
    if (v13)
    {
      v14 = (id)v13;
      objc_msgSend(MEMORY[0x24BE3F178], "untrackedPlaceholderFlow");
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      -[HMDHome handleFindOrAddUserUniqueIdentifier:onAccessory:flow:](self, "handleFindOrAddUserUniqueIdentifier:onAccessory:flow:", v14, v7, v15);
      v16 = (void *)objc_claimAutoreleasedReturnValue();
LABEL_14:

      goto LABEL_15;
    }
    -[HMDHome createUserUniqueIDForAccessories](self, "createUserUniqueIDForAccessories");
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    v26 = (void *)MEMORY[0x227676638]();
    -[HMDHome walletLogCategory](self, "walletLogCategory");
    v27 = (void *)objc_claimAutoreleasedReturnValue();
    HMFGetOSLogHandle();
    v28 = objc_claimAutoreleasedReturnValue();
    v29 = v28;
    if (v25)
    {
      if (os_log_type_enabled(v28, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v30 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543874;
        v40 = v30;
        v41 = 2112;
        v42 = v25;
        v43 = 2112;
        v44 = v6;
        _os_log_impl(&dword_2218F0000, v29, OS_LOG_TYPE_INFO, "%{public}@Created uniqueIDForAccessories:%@ for guest access code: %@", buf, 0x20u);

      }
      objc_autoreleasePoolPop(v26);
      v31 = objc_alloc(MEMORY[0x24BE3F168]);
      -[HMDHome workQueue](self, "workQueue");
      v32 = (void *)objc_claimAutoreleasedReturnValue();
      v15 = (void *)objc_msgSend(v31, "initWithQueue:", v32);

      -[HMDHome saveUserUniqueID:ForGuestAccessCode:](self, "saveUserUniqueID:ForGuestAccessCode:", v25, v6);
      v33 = (void *)objc_claimAutoreleasedReturnValue();
      v36[0] = MEMORY[0x24BDAC760];
      v36[1] = 3221225472;
      v36[2] = __88__HMDHome_AccessoryUserIdentifier__findOrAddUserUniqueIDForGuestAccessCode_onAccessory___block_invoke;
      v36[3] = &unk_24E795290;
      v36[4] = self;
      v37 = v25;
      v38 = v7;
      v14 = v25;
      objc_msgSend(v33, "inContext:then:orRecover:", v15, v36, &__block_literal_global_96_84432);
      v16 = (void *)objc_claimAutoreleasedReturnValue();

      goto LABEL_14;
    }
    if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v35 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v40 = v35;
      v41 = 2112;
      v42 = v6;
      _os_log_impl(&dword_2218F0000, v29, OS_LOG_TYPE_ERROR, "%{public}@Failed to create uniqueID for guest access code: %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v26);
    v22 = (void *)MEMORY[0x24BE3F180];
    v23 = (void *)MEMORY[0x24BDD1540];
    v24 = 15;
  }
  else
  {
    v17 = (void *)MEMORY[0x227676638]();
    -[HMDHome walletLogCategory](self, "walletLogCategory");
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    HMFGetOSLogHandle();
    v19 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v7, "uuid");
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v40 = v20;
      v41 = 2112;
      v42 = v21;
      _os_log_impl(&dword_2218F0000, v19, OS_LOG_TYPE_ERROR, "%{public}@Not a matter accessory, cannot find or add homeAccessCode on accessory: %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v17);
    v22 = (void *)MEMORY[0x24BE3F180];
    v23 = (void *)MEMORY[0x24BDD1540];
    v24 = 5;
  }
  objc_msgSend(v23, "hmfErrorWithCode:", v24);
  v14 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v22, "futureWithError:", v14);
  v16 = (void *)objc_claimAutoreleasedReturnValue();
LABEL_15:

  return v16;
}

- (id)userUniqueIDForGuestAccessCode:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  id v7;
  id v8;
  _QWORD v10[5];
  id v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t (*v16)(uint64_t, uint64_t);
  void (*v17)(uint64_t);
  id v18;

  v4 = a3;
  v13 = 0;
  v14 = &v13;
  v15 = 0x3032000000;
  v16 = __Block_byref_object_copy__84425;
  v17 = __Block_byref_object_dispose__84426;
  v18 = 0;
  -[HMDHome backingStore](self, "backingStore");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "context");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v10[0] = MEMORY[0x24BDAC760];
  v10[1] = 3221225472;
  v10[2] = __67__HMDHome_AccessoryUserIdentifier__userUniqueIDForGuestAccessCode___block_invoke;
  v10[3] = &unk_24E79C0A8;
  v10[4] = self;
  v7 = v4;
  v11 = v7;
  v12 = &v13;
  objc_msgSend(v6, "unsafeSynchronousBlock:", v10);

  v8 = (id)v14[5];
  _Block_object_dispose(&v13, 8);

  return v8;
}

- (id)removeGuestAccessCode:(id)a3 fromAccessory:(id)a4
{
  id v6;
  id v7;
  void *v8;
  void *v9;
  NSObject *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  int v16;
  void *v17;
  __int16 v18;
  void *v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  v6 = a3;
  v7 = a4;
  if (objc_msgSend(v7, "supportsCHIP"))
  {
    v8 = (void *)MEMORY[0x227676638]();
    -[HMDHome walletLogCategory](self, "walletLogCategory");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    HMFGetOSLogHandle();
    v10 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v7, "uuid");
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      v16 = 138543618;
      v17 = v11;
      v18 = 2112;
      v19 = v12;
      _os_log_impl(&dword_2218F0000, v10, OS_LOG_TYPE_ERROR, "%{public}@Not a matter accessory, cannot remove user from accessory: %@", (uint8_t *)&v16, 0x16u);

    }
    objc_autoreleasePoolPop(v8);
    objc_msgSend(MEMORY[0x24BE3F180], "futureWithNoValue");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    -[HMDHome userUniqueIDForGuestAccessCode:](self, "userUniqueIDForGuestAccessCode:", v6);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    if (v14)
      -[HMDHome handleRemoveUserUniqueIdentifier:fromAccessory:](self, "handleRemoveUserUniqueIdentifier:fromAccessory:", v14, v7);
    else
      objc_msgSend(MEMORY[0x24BE3F180], "futureWithNoValue");
    v13 = (void *)objc_claimAutoreleasedReturnValue();

  }
  return v13;
}

- (id)uniqueIDsOfAllUsers
{
  void *v3;
  void *v4;
  void *v5;
  id v6;
  void *v7;
  id v8;
  _QWORD v10[5];
  id v11;

  objc_msgSend(MEMORY[0x24BDBCEB8], "array");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHome backingStore](self, "backingStore");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "context");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v10[0] = MEMORY[0x24BDAC760];
  v10[1] = 3221225472;
  v10[2] = __55__HMDHome_AccessoryUserIdentifier__uniqueIDsOfAllUsers__block_invoke;
  v10[3] = &unk_24E79C268;
  v10[4] = self;
  v6 = v3;
  v11 = v6;
  objc_msgSend(v5, "unsafeSynchronousBlock:", v10);

  v7 = v11;
  v8 = v6;

  return v8;
}

- (id)getOrCreateUniqueIDForAccessoriesForUser:(id)a3 flow:(id)a4
{
  id v6;
  id v7;
  void *v8;
  void *v9;
  void *v10;
  id v11;
  id v12;
  id v13;
  _QWORD v15[4];
  id v16;
  id v17;
  HMDHome *v18;
  id v19;
  id v20;
  id v21;

  v6 = a3;
  v7 = a4;
  v21 = 0;
  objc_msgSend(MEMORY[0x24BE3F180], "futureWithPromise:", &v21);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHome backingStore](self, "backingStore");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "context");
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  v15[0] = MEMORY[0x24BDAC760];
  v15[1] = 3221225472;
  v15[2] = __82__HMDHome_AccessoryUserIdentifier__getOrCreateUniqueIDForAccessoriesForUser_flow___block_invoke;
  v15[3] = &unk_24E79AD20;
  v16 = v6;
  v17 = v10;
  v18 = self;
  v19 = v7;
  v20 = v21;
  v11 = v7;
  v12 = v10;
  v13 = v6;
  objc_msgSend(v12, "performBlock:", v15);

  return v8;
}

- (void)getOrCreateUniqueIDForAccessoriesForUser:(id)a3 flow:(id)a4 completionHandler:(id)a5
{
  id v8;
  id v9;

  v8 = a5;
  -[HMDHome getOrCreateUniqueIDForAccessoriesForUser:flow:](self, "getOrCreateUniqueIDForAccessoriesForUser:flow:", a3, a4);
  v9 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "getResultWithCompletion:", v8);

}

- (id)saveUserUniqueID:(id)a3 ForGuestAccessCode:(id)a4
{
  id v6;
  id v7;
  void *v8;
  void *v9;
  void *v10;
  HMDHomeAccessCodeModel *v11;
  void *v12;
  HMDHomeAccessCodeModel *v13;
  id v14;
  id v15;
  id v16;
  HMDHomeAccessCodeModel *v17;
  _QWORD v19[4];
  HMDHomeAccessCodeModel *v20;
  HMDHome *v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;

  v6 = a3;
  v7 = a4;
  v26 = 0;
  objc_msgSend(MEMORY[0x24BE3F180], "futureWithPromise:", &v26);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHome backingStore](self, "backingStore");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "context");
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  v11 = [HMDHomeAccessCodeModel alloc];
  -[HMDHome uuid](self, "uuid");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  v13 = -[HMDHomeAccessCodeModel initWithHomeUUID:value:label:](v11, "initWithHomeUUID:value:label:", v12, v7, &stru_24E79DB48);

  v19[0] = MEMORY[0x24BDAC760];
  v19[1] = 3221225472;
  v19[2] = __72__HMDHome_AccessoryUserIdentifier__saveUserUniqueID_ForGuestAccessCode___block_invoke;
  v19[3] = &unk_24E792F40;
  v20 = v13;
  v21 = self;
  v22 = v7;
  v23 = v26;
  v24 = v6;
  v25 = v10;
  v14 = v10;
  v15 = v6;
  v16 = v7;
  v17 = v13;
  objc_msgSend(v14, "performBlock:", v19);

  return v8;
}

- (id)createUserUniqueIDForAccessories
{
  void *v2;
  void *v3;

  -[HMDHome uniqueIDsOfAllUsers](self, "uniqueIDsOfAllUsers");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend((id)objc_opt_class(), "createUserUniqueIDForAccessoriesWithoutDuplicatingExistingIDs:", v2);
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  return v3;
}

- (id)findUserSlotForUserUniqueIdentifier:(id)a3 onAccessory:(id)a4
{
  id v5;
  void *v6;
  id v7;
  void *v8;
  void *v9;
  void *v10;
  id v11;
  void *v12;
  _QWORD v14[4];
  id v15;

  v5 = a3;
  v6 = (void *)MEMORY[0x24BE3F178];
  v7 = a4;
  objc_msgSend(v6, "untrackedPlaceholderFlow");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "waitForDoorLockClusterObjectWithFlow:", v8);
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v9, "naFuture");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v14[0] = MEMORY[0x24BDAC760];
  v14[1] = 3221225472;
  v14[2] = __84__HMDHome_AccessoryUserIdentifier__findUserSlotForUserUniqueIdentifier_onAccessory___block_invoke;
  v14[3] = &unk_24E7994F8;
  v15 = v5;
  v11 = v5;
  objc_msgSend(v10, "flatMap:", v14);
  v12 = (void *)objc_claimAutoreleasedReturnValue();

  return v12;
}

- (id)handleFindOrAddUserUniqueIdentifier:(id)a3 onAccessory:(id)a4 flow:(id)a5
{
  id v8;
  id v9;
  id v10;
  void *v11;
  HMDHome *v12;
  NSObject *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  uint64_t v18;
  id v19;
  id v20;
  void *v21;
  id v22;
  id v23;
  void *v24;
  _QWORD v26[5];
  id v27;
  id v28;
  _QWORD v29[4];
  id v30;
  id v31;
  uint8_t buf[4];
  void *v33;
  __int16 v34;
  void *v35;
  __int16 v36;
  id v37;
  __int16 v38;
  void *v39;
  uint64_t v40;

  v40 = *MEMORY[0x24BDAC8D0];
  v8 = a3;
  v9 = a4;
  v10 = a5;
  v11 = (void *)MEMORY[0x227676638]();
  v12 = self;
  HMFGetOSLogHandle();
  v13 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "UUID");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "uuid");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138544130;
    v33 = v14;
    v34 = 2112;
    v35 = v15;
    v36 = 2112;
    v37 = v8;
    v38 = 2112;
    v39 = v16;
    _os_log_impl(&dword_2218F0000, v13, OS_LOG_TYPE_INFO, "%{public}@[Flow: %@] handleFindOrAddUserUniqueIdentifier: %@ onAccessory: %@", buf, 0x2Au);

  }
  objc_autoreleasePoolPop(v11);
  objc_msgSend(v9, "waitForDoorLockClusterObjectWithFlow:", v10);
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  v18 = MEMORY[0x24BDAC760];
  v29[0] = MEMORY[0x24BDAC760];
  v29[1] = 3221225472;
  v29[2] = __89__HMDHome_AccessoryUserIdentifier__handleFindOrAddUserUniqueIdentifier_onAccessory_flow___block_invoke;
  v29[3] = &unk_24E792EC8;
  v19 = v8;
  v30 = v19;
  v20 = v10;
  v31 = v20;
  objc_msgSend(v17, "then:", v29);
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  v26[0] = v18;
  v26[1] = 3221225472;
  v26[2] = __89__HMDHome_AccessoryUserIdentifier__handleFindOrAddUserUniqueIdentifier_onAccessory_flow___block_invoke_2;
  v26[3] = &unk_24E7815C8;
  v26[4] = v12;
  v27 = v20;
  v28 = v19;
  v22 = v19;
  v23 = v20;
  objc_msgSend(v21, "then:", v26);
  v24 = (void *)objc_claimAutoreleasedReturnValue();

  return v24;
}

- (id)findOrAddRestrictedGuestUserUniqueIdentifier:(id)a3 onAccessory:(id)a4 user:(id)a5 flow:(id)a6
{
  id v10;
  id v11;
  id v12;
  id v13;
  void *v14;
  HMDHome *v15;
  NSObject *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  char v22;
  void *v23;
  void *v24;
  char v25;
  void *v26;
  void *v27;
  void *v28;
  _QWORD v30[5];
  id v31;
  id v32;
  id v33;
  id v34;
  char v35;
  uint8_t buf[4];
  void *v37;
  __int16 v38;
  void *v39;
  __int16 v40;
  id v41;
  __int16 v42;
  void *v43;
  uint64_t v44;

  v44 = *MEMORY[0x24BDAC8D0];
  v10 = a3;
  v11 = a4;
  v12 = a5;
  v13 = a6;
  v14 = (void *)MEMORY[0x227676638]();
  v15 = self;
  HMFGetOSLogHandle();
  v16 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "UUID");
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "uuid");
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138544130;
    v37 = v17;
    v38 = 2112;
    v39 = v18;
    v40 = 2112;
    v41 = v10;
    v42 = 2112;
    v43 = v19;
    _os_log_impl(&dword_2218F0000, v16, OS_LOG_TYPE_INFO, "%{public}@[Flow: %@] findOrAddRestrictedGuestUserUniqueIdentifier: %@ onAccessory: %@", buf, 0x2Au);

  }
  objc_autoreleasePoolPop(v14);
  objc_msgSend(v11, "weekDayScheduleCapacity");
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v20, "BOOLValue"))
  {
    objc_msgSend(v11, "yearDayScheduleCapacity");
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    v22 = objc_msgSend(v21, "BOOLValue");

  }
  else
  {
    v22 = 0;
  }

  objc_msgSend(v12, "restrictedGuestAccessSettings");
  v23 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v23, "schedule");
  v24 = (void *)objc_claimAutoreleasedReturnValue();
  v25 = objc_msgSend(v11, "supportsConfiguredSchedule:", v24);

  if ((v25 & 1) != 0)
  {
    objc_msgSend(v11, "waitForDoorLockClusterObjectWithFlow:", v13);
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    v30[0] = MEMORY[0x24BDAC760];
    v30[1] = 3221225472;
    v30[2] = __103__HMDHome_AccessoryUserIdentifier__findOrAddRestrictedGuestUserUniqueIdentifier_onAccessory_user_flow___block_invoke;
    v30[3] = &unk_24E7815F0;
    v35 = v22;
    v30[4] = v15;
    v31 = v13;
    v32 = v11;
    v33 = v10;
    v34 = v12;
    objc_msgSend(v26, "then:", v30);
    v27 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v28 = (void *)MEMORY[0x24BE3F180];
    objc_msgSend(MEMORY[0x24BDD1540], "hmfErrorWithCode:", 5);
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v28, "futureWithError:", v26);
    v27 = (void *)objc_claimAutoreleasedReturnValue();
  }

  return v27;
}

- (id)handleRemoveUserUniqueIdentifier:(id)a3 fromAccessory:(id)a4
{
  id v6;
  id v7;
  void *v8;
  void *v9;
  NSObject *v10;
  void *v11;
  void *v12;
  id v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  uint64_t v18;
  id v19;
  void *v20;
  id v21;
  id v22;
  void *v23;
  _QWORD v25[5];
  id v26;
  id v27;
  _QWORD v28[5];
  id v29;
  id v30;
  _QWORD v31[4];
  id v32;
  uint8_t buf[4];
  void *v34;
  __int16 v35;
  id v36;
  __int16 v37;
  void *v38;
  uint64_t v39;

  v39 = *MEMORY[0x24BDAC8D0];
  v6 = a3;
  v7 = a4;
  v8 = (void *)MEMORY[0x227676638]();
  -[HMDHome walletLogCategory](self, "walletLogCategory");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  HMFGetOSLogHandle();
  v10 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "uuid");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543874;
    v34 = v11;
    v35 = 2112;
    v36 = v6;
    v37 = 2112;
    v38 = v12;
    _os_log_impl(&dword_2218F0000, v10, OS_LOG_TYPE_INFO, "%{public}@handleRemoveUserUniqueIdentifier: %@, fromAccessory: %@", buf, 0x20u);

  }
  objc_autoreleasePoolPop(v8);
  v13 = objc_alloc(MEMORY[0x24BE3F168]);
  -[HMDHome workQueue](self, "workQueue");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  v15 = (void *)objc_msgSend(v13, "initWithQueue:", v14);

  objc_msgSend(MEMORY[0x24BE3F178], "untrackedPlaceholderFlow");
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "waitForDoorLockClusterObjectWithFlow:", v16);
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  v18 = MEMORY[0x24BDAC760];
  v31[0] = MEMORY[0x24BDAC760];
  v31[1] = 3221225472;
  v31[2] = __83__HMDHome_AccessoryUserIdentifier__handleRemoveUserUniqueIdentifier_fromAccessory___block_invoke;
  v31[3] = &unk_24E793238;
  v19 = v6;
  v32 = v19;
  objc_msgSend(v17, "inContext:then:", v15, v31);
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  v28[0] = v18;
  v28[1] = 3221225472;
  v28[2] = __83__HMDHome_AccessoryUserIdentifier__handleRemoveUserUniqueIdentifier_fromAccessory___block_invoke_2;
  v28[3] = &unk_24E785050;
  v28[4] = self;
  v29 = v19;
  v30 = v7;
  v25[0] = v18;
  v25[1] = 3221225472;
  v25[2] = __83__HMDHome_AccessoryUserIdentifier__handleRemoveUserUniqueIdentifier_fromAccessory___block_invoke_116;
  v25[3] = &unk_24E796B70;
  v25[4] = self;
  v26 = v29;
  v27 = v30;
  v21 = v29;
  v22 = v30;
  objc_msgSend(v20, "inContext:then:orRecover:", v15, v28, v25);
  v23 = (void *)objc_claimAutoreleasedReturnValue();

  return v23;
}

- (Class)walletLogCategory
{
  return (Class)objc_opt_class();
}

uint64_t __83__HMDHome_AccessoryUserIdentifier__handleRemoveUserUniqueIdentifier_fromAccessory___block_invoke(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  uint64_t v7;

  v3 = a2;
  objc_msgSend(v3, "removeUserWithUniqueID:", *(_QWORD *)(a1 + 32));
  v4 = (id)objc_claimAutoreleasedReturnValue();
  if (v4)
  {
    v5 = v4;

    return 3;
  }
  else
  {
    v7 = _HMFPreconditionFailure();
    return __83__HMDHome_AccessoryUserIdentifier__handleRemoveUserUniqueIdentifier_fromAccessory___block_invoke_2(v7);
  }
}

uint64_t __83__HMDHome_AccessoryUserIdentifier__handleRemoveUserUniqueIdentifier_fromAccessory___block_invoke_2(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  NSObject *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  int v11;
  void *v12;
  __int16 v13;
  uint64_t v14;
  __int16 v15;
  void *v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  v3 = a2;
  v4 = (void *)MEMORY[0x227676638]();
  objc_msgSend(*(id *)(a1 + 32), "walletLogCategory");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  HMFGetOSLogHandle();
  v6 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = *(_QWORD *)(a1 + 40);
    objc_msgSend(*(id *)(a1 + 48), "uuid");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v11 = 138543874;
    v12 = v7;
    v13 = 2112;
    v14 = v8;
    v15 = 2112;
    v16 = v9;
    _os_log_impl(&dword_2218F0000, v6, OS_LOG_TYPE_INFO, "%{public}@Successfully removed user with userUniqueID: %@, fromAccessory: %@", (uint8_t *)&v11, 0x20u);

  }
  objc_autoreleasePoolPop(v4);

  return 1;
}

uint64_t __83__HMDHome_AccessoryUserIdentifier__handleRemoveUserUniqueIdentifier_fromAccessory___block_invoke_116(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  NSObject *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  id v10;
  void *v11;
  id v12;
  int v14;
  void *v15;
  __int16 v16;
  uint64_t v17;
  __int16 v18;
  void *v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  v3 = a2;
  v4 = (void *)MEMORY[0x227676638]();
  objc_msgSend(*(id *)(a1 + 32), "walletLogCategory");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  HMFGetOSLogHandle();
  v6 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = *(_QWORD *)(a1 + 40);
    objc_msgSend(*(id *)(a1 + 48), "uuid");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v14 = 138543874;
    v15 = v7;
    v16 = 2112;
    v17 = v8;
    v18 = 2112;
    v19 = v9;
    _os_log_impl(&dword_2218F0000, v6, OS_LOG_TYPE_INFO, "%{public}@Failed to remove user with userUniqueID: %@, fromAccessory: %@", (uint8_t *)&v14, 0x20u);

  }
  objc_autoreleasePoolPop(v4);
  v10 = v3;
  v11 = v10;
  if (v10)
  {
    v12 = v10;
  }
  else
  {
    objc_msgSend(MEMORY[0x24BDD1540], "hmfUnspecifiedError");
    objc_claimAutoreleasedReturnValue();
  }

  return 2;
}

uint64_t __103__HMDHome_AccessoryUserIdentifier__findOrAddRestrictedGuestUserUniqueIdentifier_onAccessory_user_flow___block_invoke(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  id v6;
  NSObject *v7;
  void *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  id v19;
  void *v20;
  _QWORD v22[5];
  id v23;
  id v24;
  uint8_t buf[4];
  void *v26;
  __int16 v27;
  void *v28;
  __int16 v29;
  void *v30;
  __int16 v31;
  uint64_t v32;
  uint64_t v33;

  v33 = *MEMORY[0x24BDAC8D0];
  v3 = a2;
  v4 = v3;
  if (*(_BYTE *)(a1 + 72))
  {
    v5 = (void *)MEMORY[0x227676638]();
    v6 = *(id *)(a1 + 32);
    HMFGetOSLogHandle();
    v7 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(*(id *)(a1 + 40), "UUID");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(*(id *)(a1 + 48), "uuid");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      v11 = *(_QWORD *)(a1 + 56);
      *(_DWORD *)buf = 138544130;
      v26 = v8;
      v27 = 2112;
      v28 = v9;
      v29 = 2112;
      v30 = v10;
      v31 = 2112;
      v32 = v11;
      _os_log_impl(&dword_2218F0000, v7, OS_LOG_TYPE_INFO, "%{public}@[Flow: %@] Accessory[%@] supports schedules, auditing schedules for userUniqueID[%@]", buf, 0x2Au);

    }
    objc_autoreleasePoolPop(v5);
    v12 = *(_QWORD *)(a1 + 56);
    objc_msgSend(*(id *)(a1 + 64), "restrictedGuestAccessSettings");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "matterWeekDaySchedules");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 64), "restrictedGuestAccessSettings");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v15, "matterYearDaySchedules");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "findOrAddUserWithUniqueID:withWeekDaySchedules:andYearDaySchedules:flow:", v12, v14, v16, *(_QWORD *)(a1 + 40));
    v17 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    objc_msgSend(v3, "findOrAddUserWithUniqueID:flow:", *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 40));
    v17 = (void *)objc_claimAutoreleasedReturnValue();
  }
  v22[0] = MEMORY[0x24BDAC760];
  v22[1] = 3221225472;
  v22[2] = __103__HMDHome_AccessoryUserIdentifier__findOrAddRestrictedGuestUserUniqueIdentifier_onAccessory_user_flow___block_invoke_114;
  v22[3] = &unk_24E7815C8;
  v18 = *(void **)(a1 + 40);
  v22[4] = *(_QWORD *)(a1 + 32);
  v23 = v18;
  v24 = *(id *)(a1 + 56);
  objc_msgSend(v17, "then:", v22);
  v19 = (id)objc_claimAutoreleasedReturnValue();
  if (!v19)
    _HMFPreconditionFailure();
  v20 = v19;

  return 3;
}

uint64_t __103__HMDHome_AccessoryUserIdentifier__findOrAddRestrictedGuestUserUniqueIdentifier_onAccessory_user_flow___block_invoke_114(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  id v6;
  NSObject *v7;
  _BOOL4 v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  uint64_t v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  uint64_t v18;
  int v20;
  void *v21;
  __int16 v22;
  void *v23;
  __int16 v24;
  void *v25;
  __int16 v26;
  uint64_t v27;
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  v3 = a2;
  objc_msgSend(v3, "existingUser");
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  v5 = (void *)MEMORY[0x227676638]();
  v6 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v7 = objc_claimAutoreleasedReturnValue();
  v8 = os_log_type_enabled(v7, OS_LOG_TYPE_INFO);
  if (v4)
  {
    if (v8)
    {
      HMFGetLogIdentifier();
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(*(id *)(a1 + 40), "UUID");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v3, "existingUser");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v11, "userIndex");
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      v13 = *(_QWORD *)(a1 + 48);
      v20 = 138544130;
      v21 = v9;
      v22 = 2112;
      v23 = v10;
      v24 = 2112;
      v25 = v12;
      v26 = 2112;
      v27 = v13;
      _os_log_impl(&dword_2218F0000, v7, OS_LOG_TYPE_INFO, "%{public}@[Flow: %@] Found userIndex: %@ for userUniqueID: %@", (uint8_t *)&v20, 0x2Au);

    }
    objc_autoreleasePoolPop(v5);
    objc_msgSend(v3, "existingUser");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v14, "userIndex");
    objc_claimAutoreleasedReturnValue();

  }
  else
  {
    if (v8)
    {
      HMFGetLogIdentifier();
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(*(id *)(a1 + 40), "UUID");
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x24BDD16E0], "numberWithInteger:", objc_msgSend(v3, "newUserSlot"));
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      v18 = *(_QWORD *)(a1 + 48);
      v20 = 138544130;
      v21 = v15;
      v22 = 2112;
      v23 = v16;
      v24 = 2112;
      v25 = v17;
      v26 = 2112;
      v27 = v18;
      _os_log_impl(&dword_2218F0000, v7, OS_LOG_TYPE_INFO, "%{public}@[Flow: %@] Created new user with userIndex: %@ for userUniqueID: %@", (uint8_t *)&v20, 0x2Au);

    }
    objc_autoreleasePoolPop(v5);
    objc_msgSend(MEMORY[0x24BDD16E0], "numberWithInteger:", objc_msgSend(v3, "newUserSlot"));
    objc_claimAutoreleasedReturnValue();
  }

  return 1;
}

uint64_t __89__HMDHome_AccessoryUserIdentifier__handleFindOrAddUserUniqueIdentifier_onAccessory_flow___block_invoke(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  uint64_t v7;

  v3 = a2;
  objc_msgSend(v3, "findOrAddUserWithUniqueID:flow:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));
  v4 = (id)objc_claimAutoreleasedReturnValue();
  if (v4)
  {
    v5 = v4;

    return 3;
  }
  else
  {
    v7 = _HMFPreconditionFailure();
    return __89__HMDHome_AccessoryUserIdentifier__handleFindOrAddUserUniqueIdentifier_onAccessory_flow___block_invoke_2(v7);
  }
}

uint64_t __89__HMDHome_AccessoryUserIdentifier__handleFindOrAddUserUniqueIdentifier_onAccessory_flow___block_invoke_2(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  id v6;
  NSObject *v7;
  _BOOL4 v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  uint64_t v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  uint64_t v18;
  int v20;
  void *v21;
  __int16 v22;
  void *v23;
  __int16 v24;
  void *v25;
  __int16 v26;
  uint64_t v27;
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  v3 = a2;
  objc_msgSend(v3, "existingUser");
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  v5 = (void *)MEMORY[0x227676638]();
  v6 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v7 = objc_claimAutoreleasedReturnValue();
  v8 = os_log_type_enabled(v7, OS_LOG_TYPE_INFO);
  if (v4)
  {
    if (v8)
    {
      HMFGetLogIdentifier();
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(*(id *)(a1 + 40), "UUID");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v3, "existingUser");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v11, "userIndex");
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      v13 = *(_QWORD *)(a1 + 48);
      v20 = 138544130;
      v21 = v9;
      v22 = 2112;
      v23 = v10;
      v24 = 2112;
      v25 = v12;
      v26 = 2112;
      v27 = v13;
      _os_log_impl(&dword_2218F0000, v7, OS_LOG_TYPE_INFO, "%{public}@[Flow: %@] Found userIndex: %@ for userUniqueID: %@", (uint8_t *)&v20, 0x2Au);

    }
    objc_autoreleasePoolPop(v5);
    objc_msgSend(v3, "existingUser");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v14, "userIndex");
    objc_claimAutoreleasedReturnValue();

  }
  else
  {
    if (v8)
    {
      HMFGetLogIdentifier();
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(*(id *)(a1 + 40), "UUID");
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x24BDD16E0], "numberWithInteger:", objc_msgSend(v3, "newUserSlot"));
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      v18 = *(_QWORD *)(a1 + 48);
      v20 = 138544130;
      v21 = v15;
      v22 = 2112;
      v23 = v16;
      v24 = 2112;
      v25 = v17;
      v26 = 2112;
      v27 = v18;
      _os_log_impl(&dword_2218F0000, v7, OS_LOG_TYPE_INFO, "%{public}@[Flow: %@] Found userIndex: %@ for userUniqueID: %@", (uint8_t *)&v20, 0x2Au);

    }
    objc_autoreleasePoolPop(v5);
    objc_msgSend(MEMORY[0x24BDD16E0], "numberWithInteger:", objc_msgSend(v3, "newUserSlot"));
    objc_claimAutoreleasedReturnValue();
  }

  return 1;
}

id __84__HMDHome_AccessoryUserIdentifier__findUserSlotForUserUniqueIdentifier_onAccessory___block_invoke(uint64_t a1, void *a2)
{
  uint64_t v2;
  void *v3;
  id v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = (void *)MEMORY[0x24BE3F178];
  v4 = a2;
  objc_msgSend(v3, "untrackedPlaceholderFlow");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "findUserOrAvailableSlotWithUserUniqueID:flow:", v2, v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v6, "naFuture");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "flatMap:", &__block_literal_global_110_84403);
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  return v8;
}

id __84__HMDHome_AccessoryUserIdentifier__findUserSlotForUserUniqueIdentifier_onAccessory___block_invoke_2(uint64_t a1, void *a2)
{
  id v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  v2 = a2;
  objc_msgSend(v2, "user");
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  v4 = (void *)MEMORY[0x24BE6B608];
  if (v3)
  {
    objc_msgSend(v2, "user");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "userIndex");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "futureWithResult:", v6);
    v7 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    objc_msgSend(MEMORY[0x24BDD1540], "hmErrorWithCode:", 2);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "futureWithError:", v5);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
  }

  return v7;
}

void __72__HMDHome_AccessoryUserIdentifier__saveUserUniqueID_ForGuestAccessCode___block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  NSObject *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  char v11;
  id v12;
  void *v13;
  void *v14;
  NSObject *v15;
  _BOOL4 v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  NSObject *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  id v29;
  uint8_t buf[4];
  void *v31;
  __int16 v32;
  void *v33;
  __int16 v34;
  id v35;
  uint64_t v36;

  v36 = *MEMORY[0x24BDAC8D0];
  objc_msgSend(*(id *)(a1 + 32), "uuid");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  +[HMCContext findGuestAccessCodeWithModelID:](HMCContext, "findGuestAccessCodeWithModelID:", v2);
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v3)
  {
    v20 = (void *)MEMORY[0x227676638]();
    objc_msgSend(*(id *)(a1 + 40), "walletLogCategory");
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    HMFGetOSLogHandle();
    v22 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v23 = (void *)objc_claimAutoreleasedReturnValue();
      v24 = *(void **)(a1 + 48);
      *(_DWORD *)buf = 138543618;
      v31 = v23;
      v32 = 2112;
      v33 = v24;
      _os_log_impl(&dword_2218F0000, v22, OS_LOG_TYPE_ERROR, "%{public}@MKFGuestAccessCode model not found, failed to save unique ID for accessCode: %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v20);
    v25 = *(void **)(a1 + 56);
    objc_msgSend(MEMORY[0x24BDD1540], "hmfErrorWithCode:", 15);
    v12 = (id)objc_claimAutoreleasedReturnValue();
    v26 = v25;
    goto LABEL_14;
  }
  v4 = (void *)MEMORY[0x227676638](objc_msgSend(v3, "setUserUniqueIDForAccessories:", *(_QWORD *)(a1 + 64)));
  objc_msgSend(*(id *)(a1 + 40), "walletLogCategory");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  HMFGetOSLogHandle();
  v6 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 72), "managedObjectContext");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "hasChanges");
    HMFBooleanToString();
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543618;
    v31 = v7;
    v32 = 2112;
    v33 = v9;
    _os_log_impl(&dword_2218F0000, v6, OS_LOG_TYPE_INFO, "%{public}@moc has changes %@", buf, 0x16u);

  }
  objc_autoreleasePoolPop(v4);
  v10 = *(void **)(a1 + 72);
  v29 = 0;
  v11 = objc_msgSend(v10, "save:", &v29);
  v12 = v29;
  v13 = (void *)MEMORY[0x227676638]();
  objc_msgSend(*(id *)(a1 + 40), "walletLogCategory");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  HMFGetOSLogHandle();
  v15 = objc_claimAutoreleasedReturnValue();
  v16 = os_log_type_enabled(v15, OS_LOG_TYPE_INFO);
  if ((v11 & 1) == 0)
  {
    if (v16)
    {
      HMFGetLogIdentifier();
      v27 = (void *)objc_claimAutoreleasedReturnValue();
      v28 = *(void **)(a1 + 48);
      *(_DWORD *)buf = 138543874;
      v31 = v27;
      v32 = 2112;
      v33 = v28;
      v34 = 2112;
      v35 = v12;
      _os_log_impl(&dword_2218F0000, v15, OS_LOG_TYPE_INFO, "%{public}@Failed to save userUniqueID for guest access code: %@ with error: %@", buf, 0x20u);

    }
    objc_autoreleasePoolPop(v13);
    v26 = *(void **)(a1 + 56);
LABEL_14:
    objc_msgSend(v26, "rejectWithError:", v12);
    goto LABEL_15;
  }
  if (v16)
  {
    HMFGetLogIdentifier();
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    v18 = *(void **)(a1 + 48);
    v19 = *(void **)(a1 + 64);
    *(_DWORD *)buf = 138543874;
    v31 = v17;
    v32 = 2112;
    v33 = v18;
    v34 = 2112;
    v35 = v19;
    _os_log_impl(&dword_2218F0000, v15, OS_LOG_TYPE_INFO, "%{public}@Successfully saved userUniqueID for guest access code: %@ userUniqueID: %@", buf, 0x20u);

  }
  objc_autoreleasePoolPop(v13);
  objc_msgSend(*(id *)(a1 + 56), "fulfillWithNoValue");
LABEL_15:

}

void __82__HMDHome_AccessoryUserIdentifier__getOrCreateUniqueIDForAccessoriesForUser_flow___block_invoke(id *a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  void *v8;
  id v9;
  NSObject *v10;
  NSObject *v11;
  void *v12;
  void *v13;
  void *v14;
  id v15;
  id v16;
  void *v17;
  id v18;
  NSObject *v19;
  NSObject *v20;
  void *v21;
  void *v22;
  void *v23;
  uint64_t v24;
  id v25;
  NSObject *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  id v32;
  NSObject *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  id v39;
  void *v40;
  void *v41;
  void *v42;
  id v43;
  uint8_t buf[4];
  void *v45;
  __int16 v46;
  void *v47;
  __int16 v48;
  uint64_t v49;
  __int16 v50;
  uint64_t v51;
  uint64_t v52;

  v52 = *MEMORY[0x24BDAC8D0];
  objc_msgSend(a1[4], "uuid");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(a1[5], "managedObjectContext");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  +[_MKFHome findHomeMemberWithUUID:context:](_MKFHome, "findHomeMemberWithUUID:context:", v2, v3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v4)
  {
    v24 = MEMORY[0x227676638]();
    v25 = a1[6];
    HMFGetOSLogHandle();
    v26 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v27 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(a1[7], "UUID");
      v28 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(a1[4], "uuid");
      v29 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543874;
      v45 = v27;
      v46 = 2112;
      v47 = v28;
      v48 = 2112;
      v49 = (uint64_t)v29;
      _os_log_impl(&dword_2218F0000, v26, OS_LOG_TYPE_ERROR, "%{public}@[Flow: %@] Failed to find home member with UUID: %@", buf, 0x20u);

    }
    v30 = (void *)v24;
    goto LABEL_20;
  }
  objc_msgSend(v4, "uniqueIDForAccessories");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = v5;
  if (!v5 || (objc_msgSend(v5, "isEqualToNumber:", &unk_24E96B180) & 1) != 0)
  {
    objc_msgSend(a1[6], "createUserUniqueIDForAccessories");
    v7 = objc_claimAutoreleasedReturnValue();

    v8 = (void *)MEMORY[0x227676638]();
    v9 = a1[6];
    HMFGetOSLogHandle();
    v10 = objc_claimAutoreleasedReturnValue();
    v11 = v10;
    if (v7)
    {
      if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v12 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1[7], "UUID");
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1[4], "uuid");
        v14 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138544130;
        v45 = v12;
        v46 = 2112;
        v47 = v13;
        v48 = 2112;
        v49 = v7;
        v50 = 2112;
        v51 = (uint64_t)v14;
        _os_log_impl(&dword_2218F0000, v11, OS_LOG_TYPE_INFO, "%{public}@[Flow: %@] Created uniqueIDForAccessories:%@ for user:%@", buf, 0x2Au);

      }
      objc_autoreleasePoolPop(v8);
      objc_msgSend(v4, "setUniqueIDForAccessories:", v7);
      v15 = a1[5];
      v43 = 0;
      objc_msgSend(v15, "save:", &v43);
      v16 = v43;
      v17 = (void *)MEMORY[0x227676638]();
      v18 = a1[6];
      HMFGetOSLogHandle();
      v19 = objc_claimAutoreleasedReturnValue();
      v20 = v19;
      if (v16)
      {
        if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
        {
          HMFGetLogIdentifier();
          v21 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(a1[7], "UUID");
          v22 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(a1[4], "uuid");
          v23 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138544130;
          v45 = v21;
          v46 = 2112;
          v47 = v22;
          v48 = 2112;
          v49 = (uint64_t)v23;
          v50 = 2112;
          v51 = (uint64_t)v16;
          _os_log_impl(&dword_2218F0000, v20, OS_LOG_TYPE_ERROR, "%{public}@[Flow: %@] Failed to save userUniqueID for user: %@ with error: %@", buf, 0x2Au);

        }
        objc_autoreleasePoolPop(v17);
        objc_msgSend(a1[8], "rejectWithError:", v16);
      }
      else
      {
        if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
        {
          HMFGetLogIdentifier();
          v40 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(a1[7], "UUID");
          v41 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(a1[4], "uuid");
          v42 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138544130;
          v45 = v40;
          v46 = 2112;
          v47 = v41;
          v48 = 2112;
          v49 = (uint64_t)v42;
          v50 = 2112;
          v51 = v7;
          _os_log_impl(&dword_2218F0000, v20, OS_LOG_TYPE_INFO, "%{public}@[Flow: %@] Successfully saved userUniqueID for user: %@ userUniqueID: %@", buf, 0x2Au);

        }
        objc_autoreleasePoolPop(v17);
        objc_msgSend(a1[8], "fulfillWithValue:", v7);
      }

      v6 = (void *)v7;
      goto LABEL_25;
    }
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v36 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(a1[7], "UUID");
      v37 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(a1[4], "uuid");
      v38 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543874;
      v45 = v36;
      v46 = 2112;
      v47 = v37;
      v48 = 2112;
      v49 = (uint64_t)v38;
      _os_log_impl(&dword_2218F0000, v11, OS_LOG_TYPE_ERROR, "%{public}@[Flow: %@] Failed to create uniqueID for user: %@", buf, 0x20u);

    }
    v30 = v8;
LABEL_20:
    objc_autoreleasePoolPop(v30);
    v39 = a1[8];
    objc_msgSend(MEMORY[0x24BDD1540], "hmfErrorWithCode:", 15);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v39, "rejectWithError:", v6);
    goto LABEL_25;
  }
  v31 = (void *)MEMORY[0x227676638]();
  v32 = a1[6];
  HMFGetOSLogHandle();
  v33 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v33, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v34 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(a1[7], "UUID");
    v35 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543874;
    v45 = v34;
    v46 = 2112;
    v47 = v35;
    v48 = 2112;
    v49 = (uint64_t)v6;
    _os_log_impl(&dword_2218F0000, v33, OS_LOG_TYPE_INFO, "%{public}@[Flow: %@] Found existing userUniqueID: %@", buf, 0x20u);

  }
  objc_autoreleasePoolPop(v31);
  objc_msgSend(a1[8], "fulfillWithValue:", v6);
LABEL_25:

}

void __55__HMDHome_AccessoryUserIdentifier__uniqueIDsOfAllUsers__block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  NSObject *v11;
  void *v12;
  void *v13;
  _QWORD v14[5];
  id v15;
  _QWORD v16[5];
  id v17;
  uint8_t buf[4];
  void *v19;
  __int16 v20;
  void *v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  objc_msgSend(*(id *)(a1 + 32), "uuid");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  +[HMCContext findHomeWithModelID:](HMCContext, "findHomeWithModelID:", v2);
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  if (v3)
  {
    objc_msgSend(v3, "homeMembers");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    v5 = MEMORY[0x24BDAC760];
    v16[0] = MEMORY[0x24BDAC760];
    v16[1] = 3221225472;
    v16[2] = __55__HMDHome_AccessoryUserIdentifier__uniqueIDsOfAllUsers__block_invoke_100;
    v16[3] = &unk_24E781518;
    v6 = *(void **)(a1 + 40);
    v16[4] = *(_QWORD *)(a1 + 32);
    v17 = v6;
    objc_msgSend(v4, "hmf_enumerateWithAutoreleasePoolUsingBlock:", v16);

    objc_msgSend(v3, "guestAccessCodes");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v14[0] = v5;
    v14[1] = 3221225472;
    v14[2] = __55__HMDHome_AccessoryUserIdentifier__uniqueIDsOfAllUsers__block_invoke_102;
    v14[3] = &unk_24E781540;
    v8 = *(void **)(a1 + 40);
    v14[4] = *(_QWORD *)(a1 + 32);
    v15 = v8;
    objc_msgSend(v7, "hmf_enumerateWithAutoreleasePoolUsingBlock:", v14);

  }
  else
  {
    v9 = (void *)MEMORY[0x227676638]();
    objc_msgSend(*(id *)(a1 + 32), "walletLogCategory");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    HMFGetOSLogHandle();
    v11 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(*(id *)(a1 + 32), "uuid");
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v19 = v12;
      v20 = 2112;
      v21 = v13;
      _os_log_impl(&dword_2218F0000, v11, OS_LOG_TYPE_ERROR, "%{public}@Unable to find the mkfHome with UUID: %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v9);
  }

}

void __55__HMDHome_AccessoryUserIdentifier__uniqueIDsOfAllUsers__block_invoke_100(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  NSObject *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  int v13;
  void *v14;
  __int16 v15;
  void *v16;
  __int16 v17;
  void *v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v3 = a2;
  v4 = (void *)MEMORY[0x227676638]();
  objc_msgSend(*(id *)(a1 + 32), "walletLogCategory");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  HMFGetOSLogHandle();
  v6 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "modelID");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "uniqueIDForAccessories");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v13 = 138543874;
    v14 = v7;
    v15 = 2112;
    v16 = v8;
    v17 = 2112;
    v18 = v9;
    _os_log_impl(&dword_2218F0000, v6, OS_LOG_TYPE_INFO, "%{public}@HomeMember: %@, uniqueID: %@", (uint8_t *)&v13, 0x20u);

  }
  objc_autoreleasePoolPop(v4);
  objc_msgSend(v3, "uniqueIDForAccessories");
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  if (v10)
  {
    v11 = *(void **)(a1 + 40);
    objc_msgSend(v3, "uniqueIDForAccessories");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "addObject:", v12);

  }
}

void __55__HMDHome_AccessoryUserIdentifier__uniqueIDsOfAllUsers__block_invoke_102(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  NSObject *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  int v14;
  void *v15;
  __int16 v16;
  void *v17;
  __int16 v18;
  void *v19;
  __int16 v20;
  void *v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  v3 = a2;
  v4 = (void *)MEMORY[0x227676638]();
  objc_msgSend(*(id *)(a1 + 32), "walletLogCategory");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  HMFGetOSLogHandle();
  v6 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "label");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "accessCode");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "userUniqueIDForAccessories");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v14 = 138544130;
    v15 = v7;
    v16 = 2112;
    v17 = v8;
    v18 = 2112;
    v19 = v9;
    v20 = 2112;
    v21 = v10;
    _os_log_impl(&dword_2218F0000, v6, OS_LOG_TYPE_INFO, "%{public}@Guest: %@: %@, uniqueID: %@", (uint8_t *)&v14, 0x2Au);

  }
  objc_autoreleasePoolPop(v4);
  objc_msgSend(v3, "userUniqueIDForAccessories");
  v11 = (void *)objc_claimAutoreleasedReturnValue();

  if (v11)
  {
    v12 = *(void **)(a1 + 40);
    objc_msgSend(v3, "userUniqueIDForAccessories");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "addObject:", v13);

  }
}

void __67__HMDHome_AccessoryUserIdentifier__userUniqueIDForGuestAccessCode___block_invoke(uint64_t a1)
{
  HMDHomeAccessCodeModel *v2;
  void *v3;
  HMDHomeAccessCodeModel *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  NSObject *v12;
  void *v13;
  uint64_t v14;
  int v15;
  void *v16;
  __int16 v17;
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v2 = [HMDHomeAccessCodeModel alloc];
  objc_msgSend(*(id *)(a1 + 32), "uuid");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = -[HMDHomeAccessCodeModel initWithHomeUUID:value:label:](v2, "initWithHomeUUID:value:label:", v3, *(_QWORD *)(a1 + 40), &stru_24E79DB48);

  -[HMDBackingStoreModelObject uuid](v4, "uuid");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  +[HMCContext findGuestAccessCodeWithModelID:](HMCContext, "findGuestAccessCodeWithModelID:", v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  if (v6)
  {
    objc_msgSend(v6, "userUniqueIDForAccessories");
    v7 = objc_claimAutoreleasedReturnValue();
    v8 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
    v9 = *(void **)(v8 + 40);
    *(_QWORD *)(v8 + 40) = v7;

  }
  else
  {
    v10 = (void *)MEMORY[0x227676638]();
    objc_msgSend(*(id *)(a1 + 32), "walletLogCategory");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    HMFGetOSLogHandle();
    v12 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      v14 = *(_QWORD *)(a1 + 40);
      v15 = 138543618;
      v16 = v13;
      v17 = 2112;
      v18 = v14;
      _os_log_impl(&dword_2218F0000, v12, OS_LOG_TYPE_ERROR, "%{public}@MKFGuestAccessCode model not found, returning nil unique ID for accessCode: %@", (uint8_t *)&v15, 0x16u);

    }
    objc_autoreleasePoolPop(v10);
  }

}

uint64_t __88__HMDHome_AccessoryUserIdentifier__findOrAddUserUniqueIDForGuestAccessCode_onAccessory___block_invoke(_QWORD *a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  id v8;
  void *v9;
  uint64_t v11;

  v3 = a2;
  v4 = (void *)a1[4];
  v5 = a1[5];
  v6 = a1[6];
  objc_msgSend(MEMORY[0x24BE3F178], "untrackedPlaceholderFlow");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "handleFindOrAddUserUniqueIdentifier:onAccessory:flow:", v5, v6, v7);
  v8 = (id)objc_claimAutoreleasedReturnValue();
  if (v8)
  {
    v9 = v8;

    return 3;
  }
  else
  {
    v11 = _HMFPreconditionFailure();
    return __88__HMDHome_AccessoryUserIdentifier__findOrAddUserUniqueIDForGuestAccessCode_onAccessory___block_invoke_2(v11);
  }
}

uint64_t __88__HMDHome_AccessoryUserIdentifier__findOrAddUserUniqueIDForGuestAccessCode_onAccessory___block_invoke_2(uint64_t a1, void *a2)
{
  id v2;
  id v3;
  void *v4;
  uint64_t v6;
  uint64_t v7;

  v2 = a2;
  objc_msgSend(MEMORY[0x24BE3F180], "futureWithError:", v2);
  v3 = (id)objc_claimAutoreleasedReturnValue();
  if (v3)
  {
    v4 = v3;

    return 3;
  }
  else
  {
    v6 = _HMFPreconditionFailure();
    return __68__HMDHome_AccessoryUserIdentifier__removeUserFromMatterAccessories___block_invoke(v6, v7);
  }
}

uint64_t __68__HMDHome_AccessoryUserIdentifier__removeUserFromMatterAccessories___block_invoke(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(a1 + 32), "removeUser:fromAccessory:", *(_QWORD *)(a1 + 40), a2);
}

uint64_t __61__HMDHome_AccessoryUserIdentifier__removeUsersFromAccessory___block_invoke(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(a1 + 32), "removeUser:fromAccessory:", a2, *(_QWORD *)(a1 + 40));
}

uint64_t __81__HMDHome_AccessoryUserIdentifier__findOrAddUser_onAccessory_didRedispatch_flow___block_invoke(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  void *v6;
  uint64_t v8;

  v3 = a2;
  if (_os_feature_enabled_impl() && objc_msgSend(*(id *)(a1 + 32), "isRestrictedGuest"))
  {
    objc_msgSend(*(id *)(a1 + 40), "findOrAddRestrictedGuestUserUniqueIdentifier:onAccessory:user:flow:", v3, *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 56));
    v4 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    objc_msgSend(*(id *)(a1 + 40), "handleFindOrAddUserUniqueIdentifier:onAccessory:flow:", v3, *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56));
    v4 = (void *)objc_claimAutoreleasedReturnValue();
  }
  v5 = v4;
  v6 = v5;
  if (v5)
  {

    return 3;
  }
  else
  {
    v8 = _HMFPreconditionFailure();
    return __81__HMDHome_AccessoryUserIdentifier__findOrAddUser_onAccessory_didRedispatch_flow___block_invoke_2(v8);
  }
}

void __81__HMDHome_AccessoryUserIdentifier__findOrAddUser_onAccessory_didRedispatch_flow___block_invoke_2(uint64_t a1, void *a2)
{
  id v2;
  id v3;
  void *v4;
  uint64_t v5;
  void *v6;

  v2 = a2;
  objc_msgSend(MEMORY[0x24BE3F180], "futureWithError:", v2);
  v3 = (id)objc_claimAutoreleasedReturnValue();
  if (v3)
  {
    v4 = v3;

  }
  else
  {
    v5 = _HMFPreconditionFailure();
    __91__HMDHome_AccessoryUserIdentifier__findOrAddUserIndexForUserUUID_guestName_accessory_flow___block_invoke(v5, v6);
  }
}

void __91__HMDHome_AccessoryUserIdentifier__findOrAddUserIndexForUserUUID_guestName_accessory_flow___block_invoke(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  NSObject *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  void *v12;
  __int16 v13;
  void *v14;
  __int16 v15;
  uint64_t v16;
  __int16 v17;
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v3 = a2;
  v4 = (void *)MEMORY[0x227676638]();
  v5 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v6 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
  {
    HMFGetLogIdentifier();
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 40), "UUID");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = *(_QWORD *)(a1 + 48);
    v10 = *(_QWORD *)(a1 + 56);
    v11 = 138544130;
    v12 = v7;
    v13 = 2112;
    v14 = v8;
    v15 = 2112;
    v16 = v9;
    v17 = 2112;
    v18 = v10;
    _os_log_impl(&dword_2218F0000, v6, OS_LOG_TYPE_ERROR, "%{public}@[Flow: %@] Failed to find or add userIndex for user: %@, on accessory: %@", (uint8_t *)&v11, 0x2Au);

  }
  objc_autoreleasePoolPop(v4);

}

void __91__HMDHome_AccessoryUserIdentifier__findOrAddUserIndexForUserUUID_guestName_accessory_flow___block_invoke_84(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  NSObject *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  void *v12;
  __int16 v13;
  void *v14;
  __int16 v15;
  uint64_t v16;
  __int16 v17;
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v3 = a2;
  v4 = (void *)MEMORY[0x227676638]();
  v5 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v6 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
  {
    HMFGetLogIdentifier();
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 40), "UUID");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = *(_QWORD *)(a1 + 48);
    v10 = *(_QWORD *)(a1 + 56);
    v11 = 138544130;
    v12 = v7;
    v13 = 2112;
    v14 = v8;
    v15 = 2112;
    v16 = v9;
    v17 = 2112;
    v18 = v10;
    _os_log_impl(&dword_2218F0000, v6, OS_LOG_TYPE_ERROR, "%{public}@[Flow: %@] Failed to find or add userIndex for guest access code: %@, on accessory: %@", (uint8_t *)&v11, 0x2Au);

  }
  objc_autoreleasePoolPop(v4);

}

uint64_t __76__HMDHome_AccessoryUserIdentifier__accessCodeForMatterUserWithUserUniqueID___block_invoke(uint64_t a1, void *a2)
{
  void *v3;
  uint64_t v4;

  objc_msgSend(a2, "uniqueIDForAccessories");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "isEqualToNumber:", *(_QWORD *)(a1 + 32));

  return v4;
}

uint64_t __76__HMDHome_AccessoryUserIdentifier__accessCodeForMatterUserWithUserUniqueID___block_invoke_2(uint64_t a1, uint64_t a2)
{
  void *v2;
  uint64_t v3;

  objc_msgSend(*(id *)(a1 + 40), "userUniqueIDForGuestAccessCode:", a2);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = HMFEqualObjects();

  return v3;
}

+ (id)createUserUniqueIDForAccessoriesWithoutDuplicatingExistingIDs:(id)a3
{
  id v3;
  unint64_t v4;
  uint64_t v5;
  uint32_t v6;
  int v7;
  int v8;
  void *v10;
  _QWORD v12[4];
  uint32_t v13;

  v3 = a3;
  v4 = 0;
  v5 = MEMORY[0x24BDAC760];
  do
  {
    v6 = arc4random_uniform(0xFFFFFFFF);
    v12[0] = v5;
    v12[1] = 3221225472;
    v12[2] = __98__HMDHome_AccessoryUserIdentifier__createUserUniqueIDForAccessoriesWithoutDuplicatingExistingIDs___block_invoke;
    v12[3] = &__block_descriptor_36_e18_B16__0__NSNumber_8l;
    v13 = v6;
    v7 = objc_msgSend(v3, "na_any:", v12);
    if (v6)
      v8 = v7;
    else
      v8 = 1;
  }
  while (v8 == 1 && v4++ < 9);
  if ((v8 & 1) != 0)
  {
    v10 = 0;
  }
  else
  {
    objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedLong:", v6);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
  }

  return v10;
}

BOOL __98__HMDHome_AccessoryUserIdentifier__createUserUniqueIDForAccessoriesWithoutDuplicatingExistingIDs___block_invoke(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "unsignedLongValue") == *(unsigned int *)(a1 + 32);
}

- (HMDAccessoryCount)accessoryCount
{
  return -[HMDAccessoryCount initWithHome:]([HMDAccessoryCount alloc], "initWithHome:", self);
}

- (id)createSiriEndpointProfileMessageHandlerWithHomeUUID:(id)a3
{
  id v3;
  HMDSiriEndpointProfileMessageHandler *v4;

  v3 = a3;
  v4 = -[HMDSiriEndpointProfileMessageHandler initWithHomeUUID:]([HMDSiriEndpointProfileMessageHandler alloc], "initWithHomeUUID:", v3);

  return v4;
}

- (id)createPrimaryResidentMessageRouterMetricsDispatcherWithLogEventSubmitter:(id)a3
{
  id v3;
  HMDPrimaryResidentMessageRouterMetricsDispatcher *v4;

  v3 = a3;
  v4 = -[HMDPrimaryResidentMessageRouterMetricsDispatcher initWithLogEventSubmitter:]([HMDPrimaryResidentMessageRouterMetricsDispatcher alloc], "initWithLogEventSubmitter:", v3);

  return v4;
}

- (NSArray)accessoriesRequiringManualReconfigurationOnRouterRemoval
{
  void *v2;
  void *v3;

  -[HMDHome accessories](self, "accessories");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "hmf_objectsPassingTest:", &__block_literal_global_104347);
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  return (NSArray *)v3;
}

- (void)_reconfigureAccessoriesOnRouterRemovalWithCompletion:(id)a3
{
  void (**v4)(_QWORD);
  NSObject *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  HMDHome *v14;
  NSObject *v15;
  void *v16;
  NSObject *v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t i;
  id v23;
  void *v24;
  id v25;
  void *v26;
  HMDWiFiReconfigurationLogEvent *v27;
  NSObject *v28;
  HMDHome *v29;
  void (**block)(_QWORD);
  void *v31;
  _QWORD v32[5];
  NSObject *v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  uint8_t v38[128];
  uint8_t buf[4];
  void *v40;
  __int16 v41;
  uint64_t v42;
  __int16 v43;
  void *v44;
  uint64_t v45;

  v45 = *MEMORY[0x24BDAC8D0];
  v4 = (void (**)(_QWORD))a3;
  -[HMDHome workQueue](self, "workQueue");
  v5 = objc_claimAutoreleasedReturnValue();
  dispatch_assert_queue_V2(v5);

  -[HMDHome accessories](self, "accessories");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "hmf_objectsPassingTest:", &__block_literal_global_1);
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  if (objc_msgSend(v7, "count"))
  {
    -[HMDHome activeNetworkRouterAccessory](self, "activeNetworkRouterAccessory");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "networkRouterController");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "wiFiSSID");
    v10 = objc_claimAutoreleasedReturnValue();

    +[HMDWiFiManagementController sharedPSKForNetworkWithSSID:](HMDWiFiManagementController, "sharedPSKForNetworkWithSSID:", v10);
    v11 = objc_claimAutoreleasedReturnValue();
    v12 = (void *)v11;
    v31 = (void *)v10;
    if (v10 && v11)
    {
      block = v4;
      v13 = (void *)MEMORY[0x227676638]();
      v14 = self;
      HMFGetOSLogHandle();
      v15 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v16 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543874;
        v40 = v16;
        v41 = 2048;
        v42 = objc_msgSend(v7, "count");
        v43 = 2112;
        v44 = v31;
        _os_log_impl(&dword_2218F0000, v15, OS_LOG_TYPE_INFO, "%{public}@Reconfiguring %ld accessories on '%@' due to router removal", buf, 0x20u);

      }
      v29 = v14;

      objc_autoreleasePoolPop(v13);
      v17 = dispatch_group_create();
      v34 = 0u;
      v35 = 0u;
      v36 = 0u;
      v37 = 0u;
      v18 = v7;
      v19 = objc_msgSend(v18, "countByEnumeratingWithState:objects:count:", &v34, v38, 16);
      if (v19)
      {
        v20 = v19;
        v21 = *(_QWORD *)v35;
        do
        {
          for (i = 0; i != v20; ++i)
          {
            if (*(_QWORD *)v35 != v21)
              objc_enumerationMutation(v18);
            v23 = *(id *)(*((_QWORD *)&v34 + 1) + 8 * i);
            objc_opt_class();
            if ((objc_opt_isKindOfClass() & 1) != 0)
              v24 = v23;
            else
              v24 = 0;
            v25 = v24;

            objc_msgSend(v25, "wiFiManagementController");
            v26 = (void *)objc_claimAutoreleasedReturnValue();

            if (v26)
            {
              dispatch_group_enter(v17);
              v27 = objc_alloc_init(HMDWiFiReconfigurationLogEvent);
              -[HMDWiFiReconfigurationLogEvent setCredentialType:](v27, "setCredentialType:", 2);
              v32[0] = MEMORY[0x24BDAC760];
              v32[1] = 3221225472;
              v32[2] = __80__HMDHome_WiFiManagement___reconfigureAccessoriesOnRouterRemovalWithCompletion___block_invoke_4;
              v32[3] = &unk_24E79BCC8;
              v32[4] = v23;
              v33 = v17;
              objc_msgSend(v26, "reconfigureWithSSID:PSK:logEvent:completion:", v31, v12, v27, v32);

            }
          }
          v20 = objc_msgSend(v18, "countByEnumeratingWithState:objects:count:", &v34, v38, 16);
        }
        while (v20);
      }

      -[HMDHome workQueue](v29, "workQueue");
      v28 = objc_claimAutoreleasedReturnValue();
      v4 = block;
      dispatch_group_notify(v17, v28, block);

    }
    else
    {
      v4[2](v4);
    }

  }
  else
  {
    v4[2](v4);
  }

}

void __80__HMDHome_WiFiManagement___reconfigureAccessoriesOnRouterRemovalWithCompletion___block_invoke_4(uint64_t a1, uint64_t a2)
{
  objc_msgSend(*(id *)(a1 + 32), "saveWiFiUniquePreSharedKey:credentialType:", 0, 2 * (a2 == 0));
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));
}

uint64_t __80__HMDHome_WiFiManagement___reconfigureAccessoriesOnRouterRemovalWithCompletion___block_invoke(uint64_t a1, void *a2)
{
  id v2;
  uint64_t v3;

  v2 = a2;
  if (objc_msgSend(v2, "wiFiCredentialType") == 3)
    v3 = isReconfigurationPossible(v2);
  else
    v3 = 0;

  return v3;
}

uint64_t __83__HMDHome_WiFiManagement__accessoriesRequiringManualReconfigurationOnRouterRemoval__block_invoke(uint64_t a1, void *a2)
{
  id v2;
  uint64_t v3;

  v2 = a2;
  if (objc_msgSend(v2, "wiFiCredentialType") == 3)
    v3 = isReconfigurationPossible(v2) ^ 1;
  else
    v3 = 0;

  return v3;
}

- (id)playbackArchiveWithSessionIdentifier:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t i;
  id v17;
  void *v18;
  id v19;
  void *v20;
  void *v21;
  char v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  _BYTE v36[128];
  _BYTE v37[128];
  uint64_t v38;

  v38 = *MEMORY[0x24BDAC8D0];
  v4 = a3;
  -[HMDHome actionSets](self, "actionSets");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHome triggerOwnedActionSets](self, "triggerOwnedActionSets");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "arrayByAddingObjectsFromArray:", v6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  v34 = 0u;
  v35 = 0u;
  v32 = 0u;
  v33 = 0u;
  v8 = v7;
  v25 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v32, v37, 16);
  if (v25)
  {
    v9 = *(_QWORD *)v33;
    v27 = v8;
    v24 = *(_QWORD *)v33;
    do
    {
      v10 = 0;
      do
      {
        if (*(_QWORD *)v33 != v9)
          objc_enumerationMutation(v8);
        v26 = v10;
        v11 = *(void **)(*((_QWORD *)&v32 + 1) + 8 * v10);
        v28 = 0u;
        v29 = 0u;
        v30 = 0u;
        v31 = 0u;
        objc_msgSend(v11, "actions", v24);
        v12 = (void *)objc_claimAutoreleasedReturnValue();
        v13 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v28, v36, 16);
        if (v13)
        {
          v14 = v13;
          v15 = *(_QWORD *)v29;
          while (2)
          {
            for (i = 0; i != v14; ++i)
            {
              if (*(_QWORD *)v29 != v15)
                objc_enumerationMutation(v12);
              v17 = *(id *)(*((_QWORD *)&v28 + 1) + 8 * i);
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0)
                v18 = v17;
              else
                v18 = 0;
              v19 = v18;

              objc_msgSend(v19, "playbackArchive");
              v20 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v20, "playbackSessionIdentifier");
              v21 = (void *)objc_claimAutoreleasedReturnValue();
              v22 = objc_msgSend(v21, "isEqualToString:", v4);

              if ((v22 & 1) != 0)
              {

                v8 = v27;
                goto LABEL_22;
              }

            }
            v14 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v28, v36, 16);
            if (v14)
              continue;
            break;
          }
        }

        v10 = v26 + 1;
        v8 = v27;
        v9 = v24;
      }
      while (v26 + 1 != v25);
      v20 = 0;
      v25 = objc_msgSend(v27, "countByEnumeratingWithState:objects:count:", &v32, v37, 16);
    }
    while (v25);
  }
  else
  {
    v20 = 0;
  }
LABEL_22:

  return v20;
}

- (id)accessorySettingsMessengerMessageTargetUUID
{
  void *v2;
  void *v3;
  void *v4;

  v2 = (void *)MEMORY[0x24BDD7438];
  -[HMDHome uuid](self, "uuid");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "messageTargetUUIDWithHomeUUID:", v3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  return v4;
}

- (void)configureAccessorySettingsMessengerWithMessengerFactory:(id)a3 messageHandlerFactory:(id)a4
{
  id v6;
  id v7;
  void *v8;
  HMDHome *v9;
  NSObject *v10;
  void *v11;
  void *v12;
  void *v13;
  uint64_t v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  int v23;
  void *v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v6 = a3;
  v7 = a4;
  v8 = (void *)MEMORY[0x227676638]();
  v9 = self;
  HMFGetOSLogHandle();
  v10 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v23 = 138543362;
    v24 = v11;
    _os_log_impl(&dword_2218F0000, v10, OS_LOG_TYPE_INFO, "%{public}@Configuring accessory settings messenger", (uint8_t *)&v23, 0xCu);

  }
  objc_autoreleasePoolPop(v8);
  -[HMDHome msgDispatcher](v9, "msgDispatcher");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHome accessoryMessageRouterViaPrimary](v9, "accessoryMessageRouterViaPrimary");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHome unifiedLanguageValueListSettingDataProvider](v9, "unifiedLanguageValueListSettingDataProvider");
  v14 = objc_claimAutoreleasedReturnValue();
  if (!v12)
  {
    _HMFPreconditionFailure();
    goto LABEL_8;
  }
  if (!v13)
  {
LABEL_8:
    _HMFPreconditionFailure();
LABEL_9:
    _HMFPreconditionFailure();
  }
  v15 = (void *)v14;
  if (!v14)
    goto LABEL_9;
  -[HMDHome uuid](v9, "uuid");
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "createAccessorySettingsLocalMessageHandlerWithHomeUUID:languageValuesDataProvider:", v16, v15);
  v17 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v17, "setDataSource:", v9);
  -[HMDHome homeManager](v9, "homeManager");
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v18, "compositeSettingsControllerManager");
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v17, "setDelegate:", v19);

  -[HMDHome accessorySettingsMessengerMessageTargetUUID](v9, "accessorySettingsMessengerMessageTargetUUID");
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHome logEventSubmitter](v9, "logEventSubmitter");
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "createAccessorySettingsMessengerWithMessageTargetUUID:messageDispatcher:messageRouter:messageHandler:logEventSubmitter:", v20, v12, v13, v17, v21);
  v22 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v22, "registerForMessagesWithHome:", v9);
  -[HMDHome setAccessorySettingsMessenger:](v9, "setAccessorySettingsMessenger:", v22);

}

- (id)createAccessorySettingsMessengerWithMessageTargetUUID:(id)a3 messageDispatcher:(id)a4 messageRouter:(id)a5 messageHandler:(id)a6 logEventSubmitter:(id)a7
{
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  void *v17;
  HMDHome *v18;
  NSObject *v19;
  void *v20;
  HMDAccessorySettingsMessenger *v21;
  int v23;
  void *v24;
  __int16 v25;
  id v26;
  __int16 v27;
  id v28;
  __int16 v29;
  id v30;
  __int16 v31;
  id v32;
  uint64_t v33;

  v33 = *MEMORY[0x24BDAC8D0];
  v12 = a3;
  v13 = a4;
  v14 = a5;
  v15 = a6;
  v16 = a7;
  v17 = (void *)MEMORY[0x227676638]();
  v18 = self;
  HMFGetOSLogHandle();
  v19 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    v23 = 138544386;
    v24 = v20;
    v25 = 2112;
    v26 = v12;
    v27 = 2112;
    v28 = v13;
    v29 = 2112;
    v30 = v14;
    v31 = 2112;
    v32 = v15;
    _os_log_impl(&dword_2218F0000, v19, OS_LOG_TYPE_INFO, "%{public}@Creating accessory settings messenger with message target UUID: %@ message dispatcher: %@ message router: %@ message handler: %@", (uint8_t *)&v23, 0x34u);

  }
  objc_autoreleasePoolPop(v17);
  v21 = -[HMDAccessorySettingsMessenger initWithMessageTargetUUID:messageDispatcher:messageRouter:messageHandler:logEventSubmitter:]([HMDAccessorySettingsMessenger alloc], "initWithMessageTargetUUID:messageDispatcher:messageRouter:messageHandler:logEventSubmitter:", v12, v13, v14, v15, v16);

  return v21;
}

- (id)hubAccessories
{
  void *v2;
  void *v3;

  -[HMDHome appleMediaAccessories](self, "appleMediaAccessories");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "na_filter:", &__block_literal_global_141681);
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  return v3;
}

uint64_t __51__HMDHome_SiriEndpointHubProviding__hubAccessories__block_invoke(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "supportsHomeHub");
}

- (id)createAppleMediaAccessoriesStateMessengerWithIdentifier:(id)a3 messageDispatcher:(id)a4
{
  id v5;
  id v6;
  HMDAppleMediaAccessoriesStateMessenger *v7;

  v5 = a4;
  v6 = a3;
  v7 = -[HMDAppleMediaAccessoriesStateMessenger initWithIdentifier:messageDispatcher:]([HMDAppleMediaAccessoriesStateMessenger alloc], "initWithIdentifier:messageDispatcher:", v6, v5);

  return v7;
}

- (BOOL)synchronouslyFetchIsCarPlayConnectedStatus
{
  void *v2;
  char v3;

  -[HMDHome carPlayDataSource](self, "carPlayDataSource");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "synchronouslyFetchIsCarPlayConnectedStatus");

  return v3;
}

- (BOOL)synchronouslyFetchIsConnectedToCarPlayNetwork
{
  void *v2;
  char v3;

  -[HMDHome carPlayDataSource](self, "carPlayDataSource");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "synchronouslyFetchIsConnectedToCarPlayNetwork");

  return v3;
}

- (BOOL)isCarPlayAccessAllowedForCharacteristic:(id)a3 withMessage:(id)a4 fromSource:(unint64_t)a5
{
  id v8;
  id v9;
  char v10;
  void *v11;
  HMDHome *v12;
  NSObject *v13;
  void *v14;
  int v16;
  void *v17;
  __int16 v18;
  id v19;
  __int16 v20;
  unint64_t v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  v8 = a3;
  v9 = a4;
  if ((-[HMDHome isMessageEntitledForCarPlayAccess:source:]((uint64_t)self, v9, a5) & 1) == 0)
  {
    v11 = (void *)MEMORY[0x227676638]();
    v12 = self;
    HMFGetOSLogHandle();
    v13 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      v16 = 138543874;
      v17 = v14;
      v18 = 2112;
      v19 = v8;
      v20 = 2048;
      v21 = a5;
      _os_log_impl(&dword_2218F0000, v13, OS_LOG_TYPE_INFO, "%{public}@CarPlay access is not allowed for characteristic: %@ because message from source: %lu does not have sufficient entitlements", (uint8_t *)&v16, 0x20u);

    }
    objc_autoreleasePoolPop(v11);
    goto LABEL_9;
  }
  if (!self || -[HMDHome homeLocation](self, "homeLocation") != 1 && -[HMDHome homeLocation](self, "homeLocation") != 3)
  {
LABEL_9:
    v10 = 0;
    goto LABEL_10;
  }
  v10 = -[HMDHome isCharacteristicAllowedForCarPlayAccess:](v8);
LABEL_10:

  return v10;
}

- (BOOL)isCarPlayAccessAllowedForActionSet:(id)a3 withMessage:(id)a4 fromSource:(unint64_t)a5
{
  id v8;
  id v9;
  void *v10;
  void *v11;
  void *v12;
  HMDHome *v13;
  NSObject *v14;
  void *v15;
  _BYTE v17[24];
  void *v18;
  HMDHome *v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  v8 = a3;
  v9 = a4;
  if ((-[HMDHome isMessageEntitledForCarPlayAccess:source:]((uint64_t)self, v9, a5) & 1) == 0)
  {
    v12 = (void *)MEMORY[0x227676638]();
    v13 = self;
    HMFGetOSLogHandle();
    v14 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)v17 = 138543874;
      *(_QWORD *)&v17[4] = v15;
      *(_WORD *)&v17[12] = 2112;
      *(_QWORD *)&v17[14] = v8;
      *(_WORD *)&v17[22] = 2048;
      v18 = (void *)a5;
      _os_log_impl(&dword_2218F0000, v14, OS_LOG_TYPE_INFO, "%{public}@CarPlay access is not allowed for action set: %@ because message from source: %lu does not have sufficient entitlements", v17, 0x20u);

    }
    objc_autoreleasePoolPop(v12);
    goto LABEL_9;
  }
  if (self)
  {
    if (-[HMDHome homeLocation](self, "homeLocation") == 1 || -[HMDHome homeLocation](self, "homeLocation") == 3)
    {
      objc_msgSend(v8, "actions");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v10, "na_filter:", &__block_literal_global_144454);
      v11 = (void *)objc_claimAutoreleasedReturnValue();

      *(_QWORD *)v17 = MEMORY[0x24BDAC760];
      *(_QWORD *)&v17[8] = 3221225472;
      *(_QWORD *)&v17[16] = __55__HMDHome_CarPlay__isActionSetAllowedForCarPlayAccess___block_invoke_2;
      v18 = &unk_24E788D10;
      v19 = self;
      LOBYTE(self) = objc_msgSend(v11, "na_all:", v17);

      goto LABEL_10;
    }
LABEL_9:
    LOBYTE(self) = 0;
  }
LABEL_10:

  return (char)self;
}

- (uint64_t)isMessageEntitledForCarPlayAccess:(uint64_t)a3 source:
{
  id v5;
  void *v6;

  v5 = a2;
  v6 = v5;
  if (!a1)
    goto LABEL_5;
  if (a3 != 1)
  {
    if (objc_msgSend(v5, "isEntitledForSecureAccess"))
    {
      a3 = objc_msgSend(v6, "isEntitledForSPIAccess");
      goto LABEL_6;
    }
LABEL_5:
    a3 = 0;
  }
LABEL_6:

  return a3;
}

uint64_t __55__HMDHome_CarPlay__isActionSetAllowedForCarPlayAccess___block_invoke_2(uint64_t a1, void *a2)
{
  uint64_t v2;
  id v3;
  void *v4;
  uint64_t v5;
  id v6;
  void *v7;
  id v8;
  void *v9;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = a2;
  v4 = v3;
  if (v2 && !objc_msgSend(v3, "type"))
  {
    v6 = v4;
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
      v7 = v6;
    else
      v7 = 0;
    v8 = v7;

    if (v8)
    {
      objc_msgSend(v8, "characteristic");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      v5 = -[HMDHome isCharacteristicAllowedForCarPlayAccess:](v9);

    }
    else
    {
      v5 = 0;
    }

  }
  else
  {
    v5 = 0;
  }

  return v5;
}

- (uint64_t)isCharacteristicAllowedForCarPlayAccess:(void *)a1
{
  void *v1;
  void *v2;
  uint64_t v3;

  objc_msgSend(a1, "service");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "serviceType");
  v2 = (void *)objc_claimAutoreleasedReturnValue();

  if ((objc_msgSend(v2, "isEqualToString:", *MEMORY[0x24BDD6BC0]) & 1) != 0)
    v3 = 1;
  else
    v3 = objc_msgSend(v2, "isEqualToString:", *MEMORY[0x24BDD6C08]);

  return v3;
}

uint64_t __55__HMDHome_CarPlay__isActionSetAllowedForCarPlayAccess___block_invoke(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "isUnsecuringAction");
}

- (BOOL)isEventLogEnabled
{
  _BOOL4 v3;

  v3 = -[HMDHome isEventLogHomeSettingEnabled](self, "isEventLogHomeSettingEnabled");
  if (v3)
    LOBYTE(v3) = -[HMDHome didOnboardEventLog](self, "didOnboardEventLog");
  return v3;
}

- (void)_handleEventLogSetDidOnboard:(id)a3
{
  id v4;
  void *v5;
  uint64_t v6;
  void *v7;
  id v8;
  int v9;
  void *v10;
  id v11;
  uint64_t v12;
  void *v13;
  HMDHome *v14;
  NSObject *v15;
  void *v16;
  void *v17;
  void *v18;
  HMDHome *v19;
  NSObject *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  HMDHome *v25;
  NSObject *v26;
  void *v27;
  void *v28;
  int v29;
  void *v30;
  __int16 v31;
  void *v32;
  __int16 v33;
  uint64_t v34;
  __int16 v35;
  id v36;
  uint64_t v37;

  v37 = *MEMORY[0x24BDAC8D0];
  v4 = a3;
  objc_msgSend(v4, "messagePayload");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = *MEMORY[0x24BDD5D20];
  objc_msgSend(v5, "objectForKeyedSubscript:", *MEMORY[0x24BDD5D20]);
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  if (v7)
  {
    v8 = v7;
    objc_opt_class();
    v9 = objc_opt_isKindOfClass() & 1;
    if (v9)
      v10 = v8;
    else
      v10 = 0;
    v11 = v10;

    if (v9)
    {
      v12 = objc_msgSend(v8, "BOOLValue");
      if ((v12 & 1) != 0 || (isInternalBuild() & 1) != 0)
      {
        if ((_DWORD)v12 == -[HMDHome didOnboardEventLog](self, "didOnboardEventLog"))
        {
          v24 = (void *)MEMORY[0x227676638]();
          v25 = self;
          HMFGetOSLogHandle();
          v26 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v26, OS_LOG_TYPE_INFO))
          {
            HMFGetLogIdentifier();
            v27 = (void *)objc_claimAutoreleasedReturnValue();
            HMFBooleanToString();
            v28 = (void *)objc_claimAutoreleasedReturnValue();
            v29 = 138543618;
            v30 = v27;
            v31 = 2114;
            v32 = v28;
            _os_log_impl(&dword_2218F0000, v26, OS_LOG_TYPE_INFO, "%{public}@[Hindsight] Activity history onboarding is already %{public}@", (uint8_t *)&v29, 0x16u);

          }
          objc_autoreleasePoolPop(v24);
          objc_msgSend(v4, "respondWithSuccess");
        }
        else
        {
          -[HMDHome _setDidOnboardEventLog:message:](self, v12, v4);
        }
        goto LABEL_19;
      }
      v18 = (void *)MEMORY[0x227676638]();
      v19 = self;
      HMFGetOSLogHandle();
      v20 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
        goto LABEL_14;
    }
    else
    {
      v18 = (void *)MEMORY[0x227676638]();
      v19 = self;
      HMFGetOSLogHandle();
      v20 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
      {
LABEL_14:
        HMFGetLogIdentifier();
        v21 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v4, "name");
        v22 = (void *)objc_claimAutoreleasedReturnValue();
        v29 = 138544130;
        v30 = v21;
        v31 = 2114;
        v32 = v22;
        v33 = 2114;
        v34 = v6;
        v35 = 2112;
        v36 = v8;
        _os_log_impl(&dword_2218F0000, v20, OS_LOG_TYPE_ERROR, "%{public}@[Hindsight] '%{public}@.%{public}@' is invalid: %@", (uint8_t *)&v29, 0x2Au);

      }
    }

    objc_autoreleasePoolPop(v18);
    objc_msgSend(MEMORY[0x24BDD1540], "hmErrorWithCode:", 3);
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "respondWithError:", v23);

    goto LABEL_19;
  }
  v13 = (void *)MEMORY[0x227676638]();
  v14 = self;
  HMFGetOSLogHandle();
  v15 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
  {
    HMFGetLogIdentifier();
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "name");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    v29 = 138543874;
    v30 = v16;
    v31 = 2114;
    v32 = v17;
    v33 = 2114;
    v34 = v6;
    _os_log_impl(&dword_2218F0000, v15, OS_LOG_TYPE_ERROR, "%{public}@[Hindsight] '%{public}@.%{public}@' is a required parameter", (uint8_t *)&v29, 0x20u);

  }
  objc_autoreleasePoolPop(v13);
  objc_msgSend(MEMORY[0x24BDD1540], "hmErrorWithCode:", 20);
  v11 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "respondWithError:", v11);
LABEL_19:

}

- (void)_handleEventLogSetEnabledMessage:(id)a3
{
  id v4;
  _BOOL4 v5;
  _BOOL4 v6;
  void *v7;
  uint64_t v8;
  void *v9;
  id v10;
  int v11;
  void *v12;
  id v13;
  unsigned int v14;
  int v15;
  int v16;
  HMDHomeModel *v18;
  void *v19;
  void *v20;
  void *v21;
  HMDHomeModel *v22;
  void *v23;
  HMDHome *v24;
  NSObject *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  HMDHome *v30;
  NSObject *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  HMDHome *v38;
  NSObject *v39;
  void *v40;
  void *v41;
  void *v42;
  HMDHome *v43;
  NSObject *v44;
  void *v45;
  void *v46;
  void *v47;
  void *v48;
  HMDHome *v49;
  NSObject *v50;
  void *v52;
  void *v53;
  void *v54;
  unsigned int v55;
  _QWORD v56[5];
  id v57;
  char v58;
  uint8_t buf[4];
  void *v60;
  __int16 v61;
  void *v62;
  __int16 v63;
  uint64_t v64;
  __int16 v65;
  id v66;
  uint64_t v67;

  v67 = *MEMORY[0x24BDAC8D0];
  v4 = a3;
  v5 = -[HMDHome isEventLogHomeSettingEnabled](self, "isEventLogHomeSettingEnabled");
  v6 = -[HMDHome didOnboardEventLog](self, "didOnboardEventLog");
  objc_msgSend(v4, "messagePayload");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = *MEMORY[0x24BDD5D18];
  objc_msgSend(v7, "objectForKeyedSubscript:", *MEMORY[0x24BDD5D18]);
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  if (v9)
  {
    v10 = v9;
    objc_opt_class();
    v11 = objc_opt_isKindOfClass() & 1;
    if (v11)
      v12 = v10;
    else
      v12 = 0;
    v13 = v12;

    if (v11)
    {
      v14 = objc_msgSend(v10, "BOOLValue");
      v15 = v5 ^ v14;
      v16 = v14 ^ 1 | v6;
      if ((v5 ^ v14) == 1 || v16 == 0)
      {
        v55 = v14;
        v18 = [HMDHomeModel alloc];
        -[HMDHome uuid](self, "uuid");
        v19 = (void *)objc_claimAutoreleasedReturnValue();
        -[HMDHome homeManager](self, "homeManager");
        v20 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v20, "uuid");
        v21 = (void *)objc_claimAutoreleasedReturnValue();
        v22 = -[HMDBackingStoreModelObject initWithObjectChangeType:uuid:parentUUID:](v18, "initWithObjectChangeType:uuid:parentUUID:", 2, v19, v21);

        if (v15)
        {
          v23 = (void *)MEMORY[0x227676638]();
          v24 = self;
          HMFGetOSLogHandle();
          v25 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
          {
            HMFGetLogIdentifier();
            v54 = v23;
            v26 = (void *)objc_claimAutoreleasedReturnValue();
            HMFEnabledStatusToString();
            v27 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 138543618;
            v60 = v26;
            v61 = 2114;
            v62 = v27;
            _os_log_impl(&dword_2218F0000, v25, OS_LOG_TYPE_DEFAULT, "%{public}@[Hindsight] Setting activity history enabled to %{public}@", buf, 0x16u);

            v23 = v54;
          }

          objc_autoreleasePoolPop(v23);
          objc_msgSend(MEMORY[0x24BDD16E0], "numberWithBool:", v55);
          v28 = (void *)objc_claimAutoreleasedReturnValue();
          -[HMDHomeModel setEventLogHomeSettingEnabled:](v22, "setEventLogHomeSettingEnabled:", v28);

        }
        if ((v16 & 1) == 0)
        {
          v29 = (void *)MEMORY[0x227676638]();
          v30 = self;
          HMFGetOSLogHandle();
          v31 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v31, OS_LOG_TYPE_INFO))
          {
            HMFGetLogIdentifier();
            v32 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 138543362;
            v60 = v32;
            _os_log_impl(&dword_2218F0000, v31, OS_LOG_TYPE_INFO, "%{public}@[Hindsight] Finished running transaction to set activity history did onboard to YES", buf, 0xCu);

          }
          objc_autoreleasePoolPop(v29);
          -[HMDHomeModel setDidOnboardEventLog:](v22, "setDidOnboardEventLog:", MEMORY[0x24BDBD1C8]);
        }
        -[HMDHome backingStore](self, "backingStore");
        v33 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v4, "name");
        v34 = (void *)objc_claimAutoreleasedReturnValue();
        +[HMDBackingStoreTransactionOptions defaultXPCOptions](HMDBackingStoreTransactionOptions, "defaultXPCOptions");
        v35 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v33, "transaction:options:", v34, v35);
        v36 = (void *)objc_claimAutoreleasedReturnValue();

        objc_msgSend(v36, "add:", v22);
        v56[0] = MEMORY[0x24BDAC760];
        v56[1] = 3221225472;
        v56[2] = __55__HMDHome_Hindsight___handleEventLogSetEnabledMessage___block_invoke;
        v56[3] = &unk_24E789500;
        v58 = v55;
        v56[4] = self;
        v57 = v4;
        objc_msgSend(v36, "run:", v56);

      }
      else
      {
        v48 = (void *)MEMORY[0x227676638]();
        v49 = self;
        HMFGetOSLogHandle();
        v50 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v50, OS_LOG_TYPE_INFO))
        {
          HMFGetLogIdentifier();
          v52 = (void *)objc_claimAutoreleasedReturnValue();
          HMFEnabledStatusToString();
          v53 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543618;
          v60 = v52;
          v61 = 2114;
          v62 = v53;
          _os_log_impl(&dword_2218F0000, v50, OS_LOG_TYPE_INFO, "%{public}@[Hindsight] Activity history is already %{public}@", buf, 0x16u);

        }
        objc_autoreleasePoolPop(v48);
        objc_msgSend(v4, "respondWithSuccess");
      }
    }
    else
    {
      v42 = (void *)MEMORY[0x227676638]();
      v43 = self;
      HMFGetOSLogHandle();
      v44 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v44, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v45 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v4, "name");
        v46 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138544130;
        v60 = v45;
        v61 = 2114;
        v62 = v46;
        v63 = 2114;
        v64 = v8;
        v65 = 2112;
        v66 = v10;
        _os_log_impl(&dword_2218F0000, v44, OS_LOG_TYPE_ERROR, "%{public}@[Hindsight] '%{public}@.%{public}@' is invalid: %@", buf, 0x2Au);

      }
      objc_autoreleasePoolPop(v42);
      objc_msgSend(MEMORY[0x24BDD1540], "hmErrorWithCode:", 3);
      v47 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "respondWithError:", v47);

    }
  }
  else
  {
    v37 = (void *)MEMORY[0x227676638]();
    v38 = self;
    HMFGetOSLogHandle();
    v39 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v39, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v40 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "name");
      v41 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543874;
      v60 = v40;
      v61 = 2114;
      v62 = v41;
      v63 = 2114;
      v64 = v8;
      _os_log_impl(&dword_2218F0000, v39, OS_LOG_TYPE_ERROR, "%{public}@[Hindsight] '%{public}@.%{public}@' is a required parameter", buf, 0x20u);

    }
    objc_autoreleasePoolPop(v37);
    objc_msgSend(MEMORY[0x24BDD1540], "hmErrorWithCode:", 20);
    v13 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "respondWithError:", v13);
  }

}

- (void)_handleEventLogSetDurationMessage:(id)a3
{
  id v4;
  void *v5;
  uint64_t v6;
  void *v7;
  id v8;
  int v9;
  void *v10;
  id v11;
  uint64_t v12;
  void *v13;
  HMDHome *v14;
  NSObject *v15;
  void *v16;
  void *v17;
  HMDHome *v18;
  NSObject *v19;
  void *v20;
  void *v21;
  void *v22;
  HMDHome *v23;
  NSObject *v24;
  void *v25;
  void *v26;
  void *v27;
  HMDHomeModel *v28;
  void *v29;
  void *v30;
  void *v31;
  HMDHomeModel *v32;
  void *v33;
  void *v34;
  HMDHome *v35;
  NSObject *v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  _QWORD v42[5];
  id v43;
  uint64_t v44;
  uint8_t buf[4];
  void *v46;
  __int16 v47;
  uint64_t v48;
  __int16 v49;
  uint64_t v50;
  __int16 v51;
  id v52;
  uint64_t v53;

  v53 = *MEMORY[0x24BDAC8D0];
  v4 = a3;
  objc_msgSend(v4, "messagePayload");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = *MEMORY[0x24BDD5D10];
  objc_msgSend(v5, "objectForKeyedSubscript:", *MEMORY[0x24BDD5D10]);
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  if (v7)
  {
    v8 = v7;
    objc_opt_class();
    v9 = objc_opt_isKindOfClass() & 1;
    if (v9)
      v10 = v8;
    else
      v10 = 0;
    v11 = v10;

    if (v9)
    {
      v12 = objc_msgSend(v8, "unsignedIntegerValue");
      if (v12 == -[HMDHome eventLogDuration](self, "eventLogDuration"))
      {
        v13 = (void *)MEMORY[0x227676638]();
        v14 = self;
        HMFGetOSLogHandle();
        v15 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
        {
          HMFGetLogIdentifier();
          v16 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543618;
          v46 = v16;
          v47 = 2048;
          v48 = v12;
          _os_log_impl(&dword_2218F0000, v15, OS_LOG_TYPE_INFO, "%{public}@[Hindsight] Activity history duration is already %lu", buf, 0x16u);

        }
        objc_autoreleasePoolPop(v13);
        objc_msgSend(v4, "respondWithSuccess");
      }
      else
      {
        v28 = [HMDHomeModel alloc];
        -[HMDHome uuid](self, "uuid");
        v29 = (void *)objc_claimAutoreleasedReturnValue();
        -[HMDHome homeManager](self, "homeManager");
        v30 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v30, "uuid");
        v31 = (void *)objc_claimAutoreleasedReturnValue();
        v32 = -[HMDBackingStoreModelObject initWithObjectChangeType:uuid:parentUUID:](v28, "initWithObjectChangeType:uuid:parentUUID:", 2, v29, v31);

        objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedInteger:", v12);
        v33 = (void *)objc_claimAutoreleasedReturnValue();
        -[HMDHomeModel setEventLogDuration:](v32, "setEventLogDuration:", v33);

        v34 = (void *)MEMORY[0x227676638]();
        v35 = self;
        HMFGetOSLogHandle();
        v36 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v36, OS_LOG_TYPE_DEFAULT))
        {
          HMFGetLogIdentifier();
          v37 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543618;
          v46 = v37;
          v47 = 2048;
          v48 = v12;
          _os_log_impl(&dword_2218F0000, v36, OS_LOG_TYPE_DEFAULT, "%{public}@[Hindsight] Setting activity history duration to %lu", buf, 0x16u);

        }
        objc_autoreleasePoolPop(v34);
        -[HMDHome backingStore](v35, "backingStore");
        v38 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v4, "name");
        v39 = (void *)objc_claimAutoreleasedReturnValue();
        +[HMDBackingStoreTransactionOptions defaultXPCOptions](HMDBackingStoreTransactionOptions, "defaultXPCOptions");
        v40 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v38, "transaction:options:", v39, v40);
        v41 = (void *)objc_claimAutoreleasedReturnValue();

        objc_msgSend(v41, "add:", v32);
        v42[0] = MEMORY[0x24BDAC760];
        v42[1] = 3221225472;
        v42[2] = __56__HMDHome_Hindsight___handleEventLogSetDurationMessage___block_invoke;
        v42[3] = &unk_24E7917A8;
        v44 = v12;
        v42[4] = v35;
        v43 = v4;
        objc_msgSend(v41, "run:", v42);

      }
    }
    else
    {
      v22 = (void *)MEMORY[0x227676638]();
      v23 = self;
      HMFGetOSLogHandle();
      v24 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v25 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v4, "name");
        v26 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138544130;
        v46 = v25;
        v47 = 2114;
        v48 = (uint64_t)v26;
        v49 = 2114;
        v50 = v6;
        v51 = 2112;
        v52 = v8;
        _os_log_impl(&dword_2218F0000, v24, OS_LOG_TYPE_ERROR, "%{public}@[Hindsight] '%{public}@.%{public}@' is invalid: %@", buf, 0x2Au);

      }
      objc_autoreleasePoolPop(v22);
      objc_msgSend(MEMORY[0x24BDD1540], "hmErrorWithCode:", 3);
      v27 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "respondWithError:", v27);

    }
  }
  else
  {
    v17 = (void *)MEMORY[0x227676638]();
    v18 = self;
    HMFGetOSLogHandle();
    v19 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "name");
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543874;
      v46 = v20;
      v47 = 2114;
      v48 = (uint64_t)v21;
      v49 = 2114;
      v50 = v6;
      _os_log_impl(&dword_2218F0000, v19, OS_LOG_TYPE_ERROR, "%{public}@[Hindsight] '%{public}@.%{public}@' is a required parameter", buf, 0x20u);

    }
    objc_autoreleasePoolPop(v17);
    objc_msgSend(MEMORY[0x24BDD1540], "hmErrorWithCode:", 20);
    v11 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "respondWithError:", v11);
  }

}

- (void)_handleEventLogClearMessage:(id)a3
{
  id v4;
  void *v5;
  HMDHome *v6;
  NSObject *v7;
  void *v8;
  id v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, void *);
  void *v14;
  HMDHome *v15;
  id v16;
  uint8_t buf[4];
  void *v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v4 = a3;
  v5 = (void *)MEMORY[0x227676638]();
  v6 = self;
  HMFGetOSLogHandle();
  v7 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    HMFGetLogIdentifier();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543362;
    v18 = v8;
    _os_log_impl(&dword_2218F0000, v7, OS_LOG_TYPE_DEFAULT, "%{public}@[Hindsight] Clearing activity history", buf, 0xCu);

  }
  objc_autoreleasePoolPop(v5);
  v11 = MEMORY[0x24BDAC760];
  v12 = 3221225472;
  v13 = __50__HMDHome_Hindsight___handleEventLogClearMessage___block_invoke;
  v14 = &unk_24E79BCC8;
  v15 = v6;
  v16 = v4;
  v9 = v4;
  v10 = _Block_copy(&v11);
  -[HMDHome clearEventsWithCompletion:](v6, "clearEventsWithCompletion:", v10, v11, v12, v13, v14, v15);

}

- (void)_homeManagerAppDataChanged:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  id v7;
  NSObject *v8;
  HMDHome *v9;
  SEL v10;
  _QWORD v11[6];

  v4 = a3;
  objc_msgSend(v4, "object");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v6 = v5;
  else
    v6 = 0;
  v7 = v6;

  if (v7)
  {
    -[HMDHome workQueue](self, "workQueue");
    v8 = objc_claimAutoreleasedReturnValue();
    v11[0] = MEMORY[0x24BDAC760];
    v11[1] = 3221225472;
    v11[2] = __49__HMDHome_Hindsight___homeManagerAppDataChanged___block_invoke;
    v11[3] = &unk_24E79C268;
    v11[4] = self;
    v11[5] = v7;
    dispatch_async(v8, v11);

  }
  else
  {
    v9 = (HMDHome *)_HMFPreconditionFailure();
    -[HMDHome _fixupHindsightOnboarding](v9, v10);
  }
}

- (void)_fixupHindsightOnboarding
{
  void *v3;
  HMDHome *v4;
  NSObject *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  HMDHome *v10;
  NSObject *v11;
  void *v12;
  int v13;
  void *v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  if (-[HMDHome didOnboardEventLog](self, "didOnboardEventLog"))
  {
    v3 = (void *)MEMORY[0x227676638]();
    v4 = self;
    HMFGetOSLogHandle();
    v5 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
    {
      HMFGetLogIdentifier();
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      v13 = 138543362;
      v14 = v6;
      _os_log_impl(&dword_2218F0000, v5, OS_LOG_TYPE_DEBUG, "%{public}@[Hindsight] Skipping hindsight fixup, we're already onboarded", (uint8_t *)&v13, 0xCu);

    }
    objc_autoreleasePoolPop(v3);
  }
  else
  {
    -[HMDHome homeManager](self, "homeManager");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    if (v7)
    {
      -[HMDHome notificationCenter](self, "notificationCenter");
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v8, "addObserver:selector:name:object:", self, sel__homeManagerAppDataChanged_, CFSTR("HMDHomeManagerDidUpdateApplicationData"), 0);

      -[HMDHome _checkHomeManagerAppData:](self, v7);
    }
    else
    {
      v9 = (void *)MEMORY[0x227676638]();
      v10 = self;
      HMFGetOSLogHandle();
      v11 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v12 = (void *)objc_claimAutoreleasedReturnValue();
        v13 = 138543362;
        v14 = v12;
        _os_log_impl(&dword_2218F0000, v11, OS_LOG_TYPE_ERROR, "%{public}@[Hindsight] No home manager?", (uint8_t *)&v13, 0xCu);

      }
      objc_autoreleasePoolPop(v9);
    }

  }
}

- (void)_didOnboardHindsightChanged
{
  void *v3;
  HMDHome *v4;
  NSObject *v5;
  void *v6;
  void *v7;
  int v8;
  void *v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  if (-[HMDHome didOnboardEventLog](self, "didOnboardEventLog"))
  {
    v3 = (void *)MEMORY[0x227676638]();
    v4 = self;
    HMFGetOSLogHandle();
    v5 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      v8 = 138543362;
      v9 = v6;
      _os_log_impl(&dword_2218F0000, v5, OS_LOG_TYPE_INFO, "%{public}@[Hindsight] Clearing notification observer because we onboarded", (uint8_t *)&v8, 0xCu);

    }
    objc_autoreleasePoolPop(v3);
    -[HMDHome notificationCenter](v4, "notificationCenter");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "removeObserver:name:object:", v4, CFSTR("HMDHomeManagerDidUpdateApplicationData"), 0);

  }
}

- (void)_checkHomeManagerAppData:(void *)a1
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  int v8;
  void *v9;
  id v10;
  NSObject *v11;
  NSObject *v12;
  void *v13;
  void *v14;
  int v15;
  void *v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  v3 = a2;
  v4 = v3;
  if (a1)
  {
    objc_msgSend(v3, "appData");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = (void *)objc_opt_class();
    objc_msgSend(v5, "applicationDataForIdentifier:", CFSTR("com.apple.homekit-entitledclient.identifer"));
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = objc_msgSend(v6, "didHomeAppOnboardHindsightWithAppData:", v7);

    v9 = (void *)MEMORY[0x227676638]();
    v10 = a1;
    HMFGetOSLogHandle();
    v11 = objc_claimAutoreleasedReturnValue();
    v12 = v11;
    if (v8)
    {
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
      {
        HMFGetLogIdentifier();
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        v15 = 138543362;
        v16 = v13;
        _os_log_impl(&dword_2218F0000, v12, OS_LOG_TYPE_DEFAULT, "%{public}@[Hindsight] Home app showed Hindsight onboarded, updating didOnboard", (uint8_t *)&v15, 0xCu);

      }
      objc_autoreleasePoolPop(v9);
      -[HMDHome _setDidOnboardEventLog:message:](v10, 1, 0);
    }
    else
    {
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
      {
        HMFGetLogIdentifier();
        v14 = (void *)objc_claimAutoreleasedReturnValue();
        v15 = 138543362;
        v16 = v14;
        _os_log_impl(&dword_2218F0000, v12, OS_LOG_TYPE_DEBUG, "%{public}@[Hindsight] We haven't yet onboarded", (uint8_t *)&v15, 0xCu);

      }
      objc_autoreleasePoolPop(v9);
    }

  }
}

- (void)_setDidOnboardEventLog:(void *)a3 message:
{
  id v5;
  void *v6;
  uint64_t v7;
  void *v8;
  __CFString *v9;
  __CFString *v10;
  HMDHomeModel *v11;
  void *v12;
  void *v13;
  void *v14;
  HMDHomeModel *v15;
  void *v16;
  void *v17;
  id v18;
  NSObject *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  _QWORD v25[5];
  id v26;
  char v27;
  uint8_t buf[4];
  void *v29;
  __int16 v30;
  void *v31;
  uint64_t v32;

  v32 = *MEMORY[0x24BDAC8D0];
  v5 = a3;
  v6 = v5;
  if (a1)
  {
    objc_msgSend(v5, "name");
    v7 = objc_claimAutoreleasedReturnValue();
    v8 = (void *)v7;
    v9 = CFSTR("Hindsight.didOnboardFixup");
    if (v7)
      v9 = (__CFString *)v7;
    v10 = v9;

    v11 = [HMDHomeModel alloc];
    objc_msgSend(a1, "uuid");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(a1, "homeManager");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "uuid");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    v15 = -[HMDBackingStoreModelObject initWithObjectChangeType:uuid:parentUUID:](v11, "initWithObjectChangeType:uuid:parentUUID:", 2, v12, v14);

    objc_msgSend(MEMORY[0x24BDD16E0], "numberWithBool:", a2);
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHomeModel setDidOnboardEventLog:](v15, "setDidOnboardEventLog:", v16);

    v17 = (void *)MEMORY[0x227676638]();
    v18 = a1;
    HMFGetOSLogHandle();
    v19 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      HMFBooleanToString();
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v29 = v20;
      v30 = 2114;
      v31 = v21;
      _os_log_impl(&dword_2218F0000, v19, OS_LOG_TYPE_INFO, "%{public}@[Hindsight] Setting activity history did onboard to %{public}@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v17);
    objc_msgSend(v18, "backingStore");
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    +[HMDBackingStoreTransactionOptions defaultXPCOptions](HMDBackingStoreTransactionOptions, "defaultXPCOptions");
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v22, "transaction:options:", v10, v23);
    v24 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v24, "add:", v15);
    v25[0] = MEMORY[0x24BDAC760];
    v25[1] = 3221225472;
    v25[2] = __53__HMDHome_Hindsight___setDidOnboardEventLog_message___block_invoke;
    v25[3] = &unk_24E789500;
    v25[4] = v18;
    v27 = a2;
    v26 = v6;
    objc_msgSend(v24, "run:", v25);

  }
}

void __53__HMDHome_Hindsight___setDidOnboardEventLog_message___block_invoke(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  NSObject *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  uint64_t v13;
  void *v14;
  id v15;
  NSObject *v16;
  void *v17;
  __CFString *v18;
  void *v19;
  void *v20;
  uint64_t v21;
  void *v22;
  uint8_t buf[4];
  void *v24;
  __int16 v25;
  const __CFString *v26;
  __int16 v27;
  void *v28;
  __int16 v29;
  id v30;
  uint64_t v31;

  v31 = *MEMORY[0x24BDAC8D0];
  v3 = a2;
  if (v3)
  {
    v4 = (void *)MEMORY[0x227676638]();
    v5 = *(id *)(a1 + 32);
    HMFGetOSLogHandle();
    v6 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      HMFBooleanToString();
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138544130;
      v24 = v7;
      v25 = 2114;
      v26 = CFSTR("Failed to set activity history did onboard");
      v27 = 2114;
      v28 = v8;
      v29 = 2114;
      v30 = v3;
      _os_log_impl(&dword_2218F0000, v6, OS_LOG_TYPE_ERROR, "%{public}@[Hindsight] %{public}@ to %{public}@: %{public}@", buf, 0x2Au);

    }
    objc_autoreleasePoolPop(v4);
    v9 = *(void **)(a1 + 40);
    v10 = (void *)MEMORY[0x24BDD1540];
    objc_msgSend(v3, "localizedFailureReason");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "hmErrorWithCode:description:reason:suggestion:underlyingError:", -1, CFSTR("Failed to set activity history did onboard"), v11, 0, v3);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "respondWithError:", v12);
  }
  else
  {
    v13 = objc_msgSend(*(id *)(a1 + 32), "isEventLogEnabled");
    v14 = (void *)MEMORY[0x227676638]();
    v15 = *(id *)(a1 + 32);
    HMFGetOSLogHandle();
    v16 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      HMFBooleanToString();
      v18 = (__CFString *)objc_claimAutoreleasedReturnValue();
      HMFBooleanToString();
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543874;
      v24 = v17;
      v25 = 2114;
      v26 = v18;
      v27 = 2114;
      v28 = v19;
      _os_log_impl(&dword_2218F0000, v16, OS_LOG_TYPE_INFO, "%{public}@[Hindsight] Finished running transaction to set activity history did onboard to %{public}@, isEventLogEnabled is now %{public}@", buf, 0x20u);

    }
    objc_autoreleasePoolPop(v14);
    v20 = *(void **)(a1 + 40);
    objc_msgSend(MEMORY[0x24BDD16E0], "numberWithBool:", v13, *MEMORY[0x24BDD5D18]);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v22 = v11;
    objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", &v22, &v21, 1);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v20, "respondWithPayload:", v12);
  }

}

void __49__HMDHome_Hindsight___homeManagerAppDataChanged___block_invoke(uint64_t a1)
{
  void *v2;
  id v3;
  NSObject *v4;
  void *v5;
  int v6;
  void *v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  v2 = (void *)MEMORY[0x227676638]();
  v3 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = 138543362;
    v7 = v5;
    _os_log_impl(&dword_2218F0000, v4, OS_LOG_TYPE_INFO, "%{public}@[Hindsight]Checking if new HomeManager appData onboarded Hindsight", (uint8_t *)&v6, 0xCu);

  }
  objc_autoreleasePoolPop(v2);
  -[HMDHome _checkHomeManagerAppData:](*(void **)(a1 + 32), *(void **)(a1 + 40));
}

void __50__HMDHome_Hindsight___handleEventLogClearMessage___block_invoke(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  NSObject *v6;
  NSObject *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  int v15;
  void *v16;
  __int16 v17;
  const __CFString *v18;
  __int16 v19;
  id v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  v3 = a2;
  v4 = (void *)MEMORY[0x227676638]();
  v5 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v6 = objc_claimAutoreleasedReturnValue();
  v7 = v6;
  if (v3)
  {
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      v15 = 138543874;
      v16 = v8;
      v17 = 2114;
      v18 = CFSTR("Failed to clear events");
      v19 = 2114;
      v20 = v3;
      _os_log_impl(&dword_2218F0000, v7, OS_LOG_TYPE_ERROR, "%{public}@[Hindsight] %{public}@: %{public}@", (uint8_t *)&v15, 0x20u);

    }
    objc_autoreleasePoolPop(v4);
    v9 = *(void **)(a1 + 40);
    v10 = (void *)MEMORY[0x24BDD1540];
    objc_msgSend(v3, "localizedFailureReason");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "hmErrorWithCode:description:reason:suggestion:underlyingError:", -1, CFSTR("Failed to clear events"), v11, 0, v3);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "respondWithError:", v12);

  }
  else
  {
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      HMFGetLogIdentifier();
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      v15 = 138543362;
      v16 = v13;
      _os_log_impl(&dword_2218F0000, v7, OS_LOG_TYPE_DEFAULT, "%{public}@[Hindsight] Activity history cleared", (uint8_t *)&v15, 0xCu);

    }
    objc_autoreleasePoolPop(v4);
    objc_msgSend(*(id *)(a1 + 32), "hindsightCloudShareManager");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v14, "synchronize");

    objc_msgSend(*(id *)(a1 + 40), "respondWithSuccess");
  }

}

void __56__HMDHome_Hindsight___handleEventLogSetDurationMessage___block_invoke(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  id v6;
  NSObject *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  id v14;
  NSObject *v15;
  void *v16;
  void *v17;
  uint8_t buf[4];
  void *v19;
  __int16 v20;
  void *v21;
  __int16 v22;
  id v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v3 = a2;
  if (v3)
  {
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("Failed to set activity history to %lu"), *(_QWORD *)(a1 + 48));
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    v5 = (void *)MEMORY[0x227676638]();
    v6 = *(id *)(a1 + 32);
    HMFGetOSLogHandle();
    v7 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543874;
      v19 = v8;
      v20 = 2114;
      v21 = v4;
      v22 = 2114;
      v23 = v3;
      _os_log_impl(&dword_2218F0000, v7, OS_LOG_TYPE_ERROR, "%{public}@[Hindsight] %{public}@: %{public}@", buf, 0x20u);

    }
    objc_autoreleasePoolPop(v5);
    v9 = *(void **)(a1 + 40);
    v10 = (void *)MEMORY[0x24BDD1540];
    objc_msgSend(v3, "localizedFailureReason");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "hmErrorWithCode:description:reason:suggestion:underlyingError:", -1, v4, v11, 0, v3);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "respondWithError:", v12);

  }
  else
  {
    v13 = (void *)MEMORY[0x227676638]();
    v14 = *(id *)(a1 + 32);
    HMFGetOSLogHandle();
    v15 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      v17 = *(void **)(a1 + 48);
      *(_DWORD *)buf = 138543618;
      v19 = v16;
      v20 = 2048;
      v21 = v17;
      _os_log_impl(&dword_2218F0000, v15, OS_LOG_TYPE_INFO, "%{public}@[Hindsight] Finished running transaction to set activity history duration to %lu", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v13);
    objc_msgSend(*(id *)(a1 + 40), "respondWithSuccess");
  }

}

void __55__HMDHome_Hindsight___handleEventLogSetEnabledMessage___block_invoke(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  id v8;
  NSObject *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  id v16;
  NSObject *v17;
  void *v18;
  void *v19;
  uint8_t buf[4];
  void *v21;
  __int16 v22;
  void *v23;
  __int16 v24;
  id v25;
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  v3 = a2;
  if (v3)
  {
    v4 = (void *)MEMORY[0x24BDD17C8];
    HMFEnabledStatusToString();
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "stringWithFormat:", CFSTR("Failed to run transaction to set activity history to %@"), v5);
    v6 = (void *)objc_claimAutoreleasedReturnValue();

    v7 = (void *)MEMORY[0x227676638]();
    v8 = *(id *)(a1 + 32);
    HMFGetOSLogHandle();
    v9 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543874;
      v21 = v10;
      v22 = 2114;
      v23 = v6;
      v24 = 2114;
      v25 = v3;
      _os_log_impl(&dword_2218F0000, v9, OS_LOG_TYPE_ERROR, "%{public}@[Hindsight] %{public}@: %{public}@", buf, 0x20u);

    }
    objc_autoreleasePoolPop(v7);
    v11 = *(void **)(a1 + 40);
    v12 = (void *)MEMORY[0x24BDD1540];
    objc_msgSend(v3, "localizedFailureReason");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "hmErrorWithCode:description:reason:suggestion:underlyingError:", -1, v6, v13, 0, v3);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "respondWithError:", v14);

  }
  else
  {
    v15 = (void *)MEMORY[0x227676638]();
    v16 = *(id *)(a1 + 32);
    HMFGetOSLogHandle();
    v17 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      HMFEnabledStatusToString();
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v21 = v18;
      v22 = 2114;
      v23 = v19;
      _os_log_impl(&dword_2218F0000, v17, OS_LOG_TYPE_INFO, "%{public}@[Hindsight] Finished running transaction to set activity history to %{public}@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v15);
    objc_msgSend(*(id *)(a1 + 40), "respondWithSuccess");
  }

}

+ (BOOL)didHomeAppOnboardHindsightWithAppData:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  id v7;
  int v8;
  void *v9;
  id v10;
  void *v11;
  id v12;
  NSObject *v13;
  NSObject *v14;
  void *v15;
  BOOL v16;
  void *v17;
  id v18;
  NSObject *v19;
  void *v20;
  void *v21;
  int v23;
  void *v24;
  __int16 v25;
  const __CFString *v26;
  __int16 v27;
  id v28;
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  v4 = a3;
  objc_msgSend(v4, "objectForKeyedSubscript:", CFSTR("lastOnboardingNewFeaturesVersionSeen"));
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = v5;
  if (v5)
  {
    v7 = v5;
    objc_opt_class();
    v8 = objc_opt_isKindOfClass() & 1;
    if (v8)
      v9 = v7;
    else
      v9 = 0;
    v10 = v9;

    v11 = (void *)MEMORY[0x227676638]();
    v12 = a1;
    HMFGetOSLogHandle();
    v13 = objc_claimAutoreleasedReturnValue();
    v14 = v13;
    if (v8)
    {
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
      {
        HMFGetLogIdentifier();
        v15 = (void *)objc_claimAutoreleasedReturnValue();
        v23 = 138543874;
        v24 = v15;
        v25 = 2112;
        v26 = CFSTR("lastOnboardingNewFeaturesVersionSeen");
        v27 = 2112;
        v28 = v7;
        _os_log_impl(&dword_2218F0000, v14, OS_LOG_TYPE_DEBUG, "%{public}@[Hindsight] Home manager has application data '%@' = %@", (uint8_t *)&v23, 0x20u);

      }
      objc_autoreleasePoolPop(v11);
      v16 = objc_msgSend(v7, "integerValue") > 3;
    }
    else
    {
      if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v21 = (void *)objc_claimAutoreleasedReturnValue();
        v23 = 138543874;
        v24 = v21;
        v25 = 2112;
        v26 = CFSTR("lastOnboardingNewFeaturesVersionSeen");
        v27 = 2112;
        v28 = v4;
        _os_log_impl(&dword_2218F0000, v14, OS_LOG_TYPE_ERROR, "%{public}@[Hindsight] Application data dictionary exists but has invalid value for '%@': %@", (uint8_t *)&v23, 0x20u);

      }
      objc_autoreleasePoolPop(v11);
      v16 = 0;
    }

  }
  else
  {
    v17 = (void *)MEMORY[0x227676638]();
    v18 = a1;
    HMFGetOSLogHandle();
    v19 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v19, OS_LOG_TYPE_DEBUG))
    {
      HMFGetLogIdentifier();
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      v23 = 138543874;
      v24 = v20;
      v25 = 2112;
      v26 = CFSTR("lastOnboardingNewFeaturesVersionSeen");
      v27 = 2112;
      v28 = v4;
      _os_log_impl(&dword_2218F0000, v19, OS_LOG_TYPE_DEBUG, "%{public}@[Hindsight] Application data dictionary exists but has no value for '%@': %@", (uint8_t *)&v23, 0x20u);

    }
    objc_autoreleasePoolPop(v17);
    v16 = 0;
  }

  return v16;
}

- (NSString)urlString
{
  void *v2;
  void *v3;

  -[HMDHome uuid](self, "uuid");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  hm_assistantIdentifier();
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  return (NSString *)v3;
}

- (NSDictionary)assistantObject
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v9;
  NSObject *v10;
  void *v11;
  void *v12;
  void *v13;
  _QWORD v14[5];
  _QWORD v15[5];
  uint8_t buf[4];
  void *v17;
  __int16 v18;
  void *v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  -[HMDHome name](self, "name");
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  if (v3)
  {
    v15[0] = *MEMORY[0x24BE81F38];
    -[HMDHome name](self, "name", CFSTR("objectType"), CFSTR("objectName"));
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    v15[1] = v4;
    v14[2] = CFSTR("objectIdentifier");
    -[HMDHome urlString](self, "urlString");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v15[2] = v5;
    v14[3] = CFSTR("objectHomeIdentifier");
    -[HMDHome urlString](self, "urlString");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v14[4] = CFSTR("objectReference");
    v15[3] = v6;
    v15[4] = self;
    objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v15, v14, 5);
    v7 = (void *)objc_claimAutoreleasedReturnValue();

    return (NSDictionary *)v7;
  }
  else
  {
    v9 = (void *)MEMORY[0x227676638]();
    HMFGetOSLogHandle();
    v10 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      HMFGetLogIdentifier();
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      -[HMDHome uuid](self, "uuid");
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v12, "UUIDString");
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v17 = v11;
      v18 = 2112;
      v19 = v13;
      _os_log_impl(&dword_2218F0000, v10, OS_LOG_TYPE_DEFAULT, "%{public}@Skipping because home.name is nil for %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v9);
    return (NSDictionary *)0;
  }
}

- (id)multiUserSettings
{
  void *v2;
  uint64_t v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  int v14;
  uint64_t v15;
  id v16;
  void *v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD v25[6];
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  _BYTE v38[128];
  uint64_t v39;

  v39 = *MEMORY[0x24BDAC8D0];
  v34 = 0;
  v35 = &v34;
  v36 = 0x2020000000;
  v37 = 0;
  v30 = 0;
  v31 = &v30;
  v32 = 0x2020000000;
  v33 = 0;
  -[HMDHome users](self, "users");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "count");
  v28 = 0u;
  v29 = 0u;
  v26 = 0u;
  v27 = 0u;
  v4 = v2;
  v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v26, v38, 16);
  v19 = v3;
  if (v5)
  {
    v22 = 0;
    v23 = 0;
    v20 = 0;
    v21 = 0;
    v24 = 0;
    v6 = 0;
    v7 = 0;
    v8 = *(_QWORD *)v27;
    do
    {
      v9 = 0;
      do
      {
        if (*(_QWORD *)v27 != v8)
          objc_enumerationMutation(v4);
        v10 = *(void **)(*((_QWORD *)&v26 + 1) + 8 * v9);
        if ((objc_msgSend(v10, "isOwner") & 1) == 0)
        {
          objc_msgSend(v10, "sharedSettingValuesByKeyPath");
          v11 = (void *)objc_claimAutoreleasedReturnValue();
          v12 = (void *)objc_msgSend(v11, "mutableCopy");

          if (objc_msgSend(v12, "count"))
          {
            v25[0] = MEMORY[0x24BDAC760];
            v25[1] = 3221225472;
            v25[2] = __54__HMDHome_MultiUserSettingsMetrics__multiUserSettings__block_invoke;
            v25[3] = &unk_24E78A838;
            v25[4] = &v34;
            v25[5] = &v30;
            objc_msgSend(v12, "enumerateKeysAndObjectsUsingBlock:", v25);
            ++v7;
          }
          else
          {
            objc_msgSend(v10, "cloudShareTrustManager");
            v13 = (void *)objc_claimAutoreleasedReturnValue();
            v14 = objc_msgSend(v13, "isTrustConfigured");

            v6 += v14 ^ 1u;
            switch(objc_msgSend(v10, "sharedUserSettingsLogEventBackingStoreControllerRunState"))
            {
              case 0:
              case 1:
                ++v24;
                break;
              case 2:
                ++v21;
                break;
              case 3:
                ++v23;
                break;
              case 4:
                ++v22;
                break;
              case 5:
                ++v20;
                break;
              default:
                break;
            }
          }

        }
        ++v9;
      }
      while (v5 != v9);
      v15 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v26, v38, 16);
      v5 = v15;
    }
    while (v15);
  }
  else
  {
    v22 = 0;
    v23 = 0;
    v20 = 0;
    v21 = 0;
    v24 = 0;
    v6 = 0;
    v7 = 0;
  }

  v16 = objc_alloc(MEMORY[0x24BDD7800]);
  v17 = (void *)objc_msgSend(v16, "initWithNumSharedUsers:numUsersWithSettings:numUsersWithIdentifyVoiceOff:numUsersWithPlayBackInfluencesForYouOff:numUsersCloudShareTrustNotConfigured:numUsersSharedBackingStoreNotStarted:numUsersSharedBackingStoreRunning:numUsersSharedBackingStoreNotRunningDueToError:numUsersSharedBackingStoreNotRunningDueToStopped:numUsersSharedBackingStoreSharedZoneWaitingForShareInvitation:", (v19 - 1) & ~((v19 - 1) >> 63), v7, v35[3], v31[3], v6, v24, v21, v23, v22, v20);

  _Block_object_dispose(&v30, 8);
  _Block_object_dispose(&v34, 8);
  return v17;
}

void __54__HMDHome_MultiUserSettingsMetrics__multiUserSettings__block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  id v8;
  int v9;
  id v10;
  void *v11;
  id v12;
  int v13;
  id v14;

  v14 = a2;
  v5 = a3;
  if (objc_msgSend(v14, "isEqualToString:", CFSTR("shared.root.siri.identifyVoice")))
  {
    v6 = v5;
    objc_opt_class();
    v7 = (objc_opt_isKindOfClass() & 1) != 0 ? v6 : 0;
    v8 = v7;

    v9 = objc_msgSend(v8, "intValue");
    if (!v9)
      ++*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  if (objc_msgSend(v14, "isEqualToString:", CFSTR("shared.root.music.playbackInfluencesForYou")))
  {
    v10 = v5;
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
      v11 = v10;
    else
      v11 = 0;
    v12 = v11;

    v13 = objc_msgSend(v12, "intValue");
    if (!v13)
      ++*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24);
  }

}

+ (id)createNewHomeModelsWithModelID:(id)a3 parentModelID:(id)a4 name:(id)a5 acwgGroupResolvingKey:(id)a6 acwgIssuerPublicKeyExternalRepresentation:(id)a7 userUniqueIDForAccessories:(id)a8 ownedBy:(id)a9
{
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  void *v21;
  void *v22;
  HMDHomeModel *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  uint64_t v33;
  id v34;
  id v35;
  id v36;
  id v37;
  void *v38;
  id v39;
  id v40;
  void *v41;
  void *v42;
  void *v43;
  void *v44;
  id v45;
  void *v47;
  SEL v48;
  id v49;
  id v50;
  id v51;
  id *v52;
  void *v53;
  void *v54;
  _QWORD v55[4];
  id v56;
  id v57;
  _QWORD v58[4];
  id v59;
  id v60;
  id v61;
  id v62;

  v14 = a3;
  v15 = a4;
  v16 = a5;
  v17 = a6;
  v18 = a7;
  v19 = a8;
  v20 = a9;
  if (!v14)
  {
    _HMFPreconditionFailure();
    goto LABEL_7;
  }
  if (!v15)
  {
LABEL_7:
    _HMFPreconditionFailure();
    goto LABEL_8;
  }
  if (!v16)
  {
LABEL_8:
    _HMFPreconditionFailure();
    goto LABEL_9;
  }
  v21 = v20;
  if (v20)
  {
    objc_msgSend(MEMORY[0x24BDBCEB8], "array");
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    v23 = -[HMDBackingStoreModelObject initWithUUID:parentUUID:]([HMDHomeModel alloc], "initWithUUID:parentUUID:", v14, v15);
    -[HMDHomeModel setName:](v23, "setName:", v16);
    objc_msgSend(v21, "pairingUsername");
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHomeModel setOwnerName:](v23, "setOwnerName:", v24);

    objc_msgSend(v21, "uuid");
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v25, "UUIDString");
    v54 = v16;
    v26 = v17;
    v27 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHomeModel setOwnerUUID:](v23, "setOwnerUUID:", v27);

    objc_msgSend(v21, "userID");
    v28 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHomeModel setOwnerUserID:](v23, "setOwnerUserID:", v28);

    objc_msgSend(v21, "publicKey");
    v29 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHomeModel setOwnerPublicKey:](v23, "setOwnerPublicKey:", v29);

    objc_msgSend(MEMORY[0x24BDD1880], "UUID");
    v30 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v30, "UUIDString");
    v31 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHomeModel setDefaultRoomUUID:](v23, "setDefaultRoomUUID:", v31);

    -[HMDHomeModel setMatCredGRK:](v23, "setMatCredGRK:", v26);
    -[HMDHomeModel setOwned:](v23, "setOwned:", MEMORY[0x24BDBD1C8]);
    objc_msgSend(v22, "addObject:", v23);
    objc_msgSend(v21, "backingStoreObjects:", 4);
    v32 = (void *)objc_claimAutoreleasedReturnValue();
    v53 = v15;
    v33 = MEMORY[0x24BDAC760];
    v58[0] = MEMORY[0x24BDAC760];
    v58[1] = 3221225472;
    v58[2] = __171__HMDHome_DataModel__createNewHomeModelsWithModelID_parentModelID_name_acwgGroupResolvingKey_acwgIssuerPublicKeyExternalRepresentation_userUniqueIDForAccessories_ownedBy___block_invoke;
    v58[3] = &unk_24E78ABD8;
    v34 = v14;
    v59 = v34;
    v60 = v18;
    v61 = v19;
    v35 = v22;
    v62 = v35;
    v36 = v19;
    v37 = v18;
    objc_msgSend(v32, "hmf_enumerateWithAutoreleasePoolUsingBlock:", v58);

    +[HMDHome getBuiltinActionSets](HMDHome, "getBuiltinActionSets");
    v38 = (void *)objc_claimAutoreleasedReturnValue();
    v55[0] = v33;
    v55[1] = 3221225472;
    v55[2] = __171__HMDHome_DataModel__createNewHomeModelsWithModelID_parentModelID_name_acwgGroupResolvingKey_acwgIssuerPublicKeyExternalRepresentation_userUniqueIDForAccessories_ownedBy___block_invoke_2;
    v55[3] = &unk_24E791238;
    v56 = v34;
    v39 = v35;
    v57 = v39;
    v40 = v34;
    objc_msgSend(v38, "enumerateKeysAndObjectsUsingBlock:", v55);

    +[HMDHomeMediaSettingsModel defaultModelForHomeUUID:](HMDHomeMediaSettingsModel, "defaultModelForHomeUUID:", v40);
    v41 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v39, "addObject:", v41);

    +[HMDHomePersonManagerSettingsModel defaultModelForHomeUUID:](HMDHomePersonManagerSettingsModel, "defaultModelForHomeUUID:", v40);
    v42 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v39, "addObject:", v42);

    +[HMDHomeThreadNetworkModel defaultModelForHomeUUID:](HMDHomeThreadNetworkModel, "defaultModelForHomeUUID:", v40);
    v43 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v39, "addObject:", v43);

    v44 = v57;
    v45 = v39;

    return v45;
  }
LABEL_9:
  v47 = (void *)_HMFPreconditionFailure();
  return +[HMDHome homeWithHomeManager:backingStore:model:error:](v47, v48, v49, v50, v51, v52);
}

+ (HMDHome)homeWithHomeManager:(id)a3 backingStore:(id)a4 model:(id)a5 error:(id *)a6
{
  id v10;
  id v11;
  id v12;
  id *v13;
  unint64_t v14;
  id v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  uint64_t v21;
  id v22;
  NSObject *v23;
  void *v24;
  void *v25;
  id v26;
  void *v27;
  void *v28;
  id v29;
  void *v30;
  HMDHome *v31;
  HMDUser *v32;
  void *v33;
  void *v34;
  unint64_t v35;
  void *v36;
  id v37;
  void *v38;
  id v39;
  void *v40;
  void *v41;
  void *v42;
  void *v43;
  void *v44;
  void *v45;
  HMDHomeObjectLookup *v46;
  void *v47;
  id v48;
  NSObject *v49;
  void *v50;
  void *v52;
  void *v53;
  void *v54;
  void *v55;
  id v56;
  uint64_t v57;
  id v58;
  NSObject *v59;
  void *v60;
  void *v61;
  id v62;
  NSObject *v63;
  void *v64;
  HMDHome *v65;
  void *v66;
  void *v67;
  void *v68;
  _QWORD v69[4];
  id v70;
  id v71;
  id v72;
  uint64_t v73;
  uint8_t buf[4];
  void *v75;
  __int16 v76;
  void *v77;
  __int16 v78;
  id v79;
  uint64_t v80;

  v80 = *MEMORY[0x24BDAC8D0];
  v10 = a3;
  v11 = a4;
  v12 = a5;
  v73 = 0;
  if (a6)
    v13 = a6;
  else
    v13 = (id *)&v73;
  v14 = 0x24BDD1000uLL;
  v15 = objc_alloc(MEMORY[0x24BDD1880]);
  v68 = v12;
  objc_msgSend(v12, "ownerUUID");
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  v17 = (void *)objc_msgSend(v15, "initWithUUIDString:", v16);

  objc_msgSend(v11, "cdlsFetchObjectWithUUID:ofModelType:error:", v17, objc_opt_class(), v13);
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  v19 = v18;
  if (!v18)
  {
    if (!*v13)
    {
      objc_msgSend(MEMORY[0x24BDD1540], "hmfErrorWithCode:", 2);
      *v13 = (id)objc_claimAutoreleasedReturnValue();
    }
    v21 = MEMORY[0x227676638]();
    v22 = a1;
    HMFGetOSLogHandle();
    v23 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v24 = v17;
      v25 = v11;
      v26 = v10;
      v27 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v25, "uuid");
      v28 = (void *)objc_claimAutoreleasedReturnValue();
      v29 = *v13;
      *(_DWORD *)buf = 138543874;
      v75 = v27;
      v76 = 2112;
      v77 = v28;
      v78 = 2112;
      v79 = v29;
      _os_log_impl(&dword_2218F0000, v23, OS_LOG_TYPE_ERROR, "%{public}@Unable to fetch owner model from backing store %@: %@", buf, 0x20u);

      v10 = v26;
      v11 = v25;
      v17 = v24;
      v19 = 0;
    }

    v30 = (void *)v21;
    goto LABEL_12;
  }
  objc_msgSend(v18, "accountHandle");
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v20)
  {
    if (+[HMDHomeManager areWeAllowingHomeKitToRunWithoutCloudKitForHH2](HMDHomeManager, "areWeAllowingHomeKitToRunWithoutCloudKitForHH2"))
    {
      goto LABEL_15;
    }
    +[HMDAppleAccountManager sharedManager](HMDAppleAccountManager, "sharedManager");
    v52 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v52, "account");
    v20 = (void *)objc_claimAutoreleasedReturnValue();

    if (v20)
    {
      objc_msgSend(v20, "handles");
      v53 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v53, "firstObject");
      v54 = (void *)objc_claimAutoreleasedReturnValue();

      if (v54)
      {
        objc_msgSend(v11, "context");
        v55 = (void *)objc_claimAutoreleasedReturnValue();
        v69[0] = MEMORY[0x24BDAC760];
        v69[1] = 3221225472;
        v69[2] = __67__HMDHome_DataModel__homeWithHomeManager_backingStore_model_error___block_invoke;
        v69[3] = &unk_24E79BBD0;
        v70 = v17;
        v71 = v54;
        v72 = v11;
        v56 = v54;
        objc_msgSend(v55, "performBlock:", v69);

        objc_msgSend(v19, "setAccountHandle:", v56);
        v14 = 0x24BDD1000;
        goto LABEL_6;
      }
      if (!*v13)
      {
        objc_msgSend(MEMORY[0x24BDD1540], "hmfErrorWithCode:", 2);
        *v13 = (id)objc_claimAutoreleasedReturnValue();
      }
      v61 = (void *)MEMORY[0x227676638]();
      v62 = a1;
      HMFGetOSLogHandle();
      v63 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v63, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v64 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543362;
        v75 = v64;
        _os_log_impl(&dword_2218F0000, v63, OS_LOG_TYPE_ERROR, "%{public}@Unable to load home (user has no account handle and we do not appear to be logged in (no handles).", buf, 0xCu);

      }
      objc_autoreleasePoolPop(v61);

LABEL_13:
      v31 = 0;
      goto LABEL_21;
    }
    if (!*v13)
    {
      objc_msgSend(MEMORY[0x24BDD1540], "hmfErrorWithCode:", 2);
      *v13 = (id)objc_claimAutoreleasedReturnValue();
    }
    v57 = MEMORY[0x227676638]();
    v58 = a1;
    HMFGetOSLogHandle();
    v59 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v59, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v60 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v75 = v60;
      _os_log_impl(&dword_2218F0000, v59, OS_LOG_TYPE_ERROR, "%{public}@Unable to load home (user has no account handle and we do not appear to be logged in (no account).", buf, 0xCu);

    }
    v30 = (void *)v57;
LABEL_12:
    objc_autoreleasePoolPop(v30);
    goto LABEL_13;
  }
LABEL_6:

LABEL_15:
  v32 = -[HMDUser initWithModelObject:]([HMDUser alloc], "initWithModelObject:", v19);
  if (v32)
  {
    v33 = (void *)MEMORY[0x24BDD7A90];
    objc_msgSend(v68, "presenceComputeStatus");
    v34 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v33, "authWithNumber:", v34);
    v66 = (void *)objc_claimAutoreleasedReturnValue();

    v65 = [HMDHome alloc];
    objc_msgSend(v68, "name");
    v35 = v14;
    v36 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v68, "uuid");
    v67 = v11;
    v37 = v10;
    v38 = (void *)objc_claimAutoreleasedReturnValue();
    v39 = objc_alloc(*(Class *)(v35 + 2176));
    objc_msgSend(v68, "defaultRoomUUID");
    v40 = v17;
    v41 = (void *)objc_claimAutoreleasedReturnValue();
    v42 = v19;
    v43 = (void *)objc_msgSend(v39, "initWithUUIDString:", v41);
    v31 = -[HMDHome initWithName:uuid:defaultRoomUUID:owner:homeManager:presenceAuth:](v65, "initWithName:uuid:defaultRoomUUID:owner:homeManager:presenceAuth:", v36, v38, v43, v32, v37, v66);

    v19 = v42;
    v17 = v40;

    v10 = v37;
    v11 = v67;

    objc_msgSend(v68, "owned");
    v44 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHome setOwnerUser:](v31, "setOwnerUser:", objc_msgSend(v44, "BOOLValue"));

    objc_msgSend(v68, "residentSelectionVersion");
    v45 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHome setResidentSelectionVersion:](v31, "setResidentSelectionVersion:", v45);

    -[HMDHome setBackingStore:](v31, "setBackingStore:", v67);
    objc_msgSend(v67, "setDelegate:", v31);
    v46 = -[HMDHomeObjectLookup initWithHome:]([HMDHomeObjectLookup alloc], "initWithHome:", v31);
    objc_msgSend(v67, "setLookup:", v46);

    objc_msgSend(v67, "setHome:", v31);
  }
  else
  {
    v47 = (void *)MEMORY[0x227676638]();
    v48 = a1;
    HMFGetOSLogHandle();
    v49 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v49, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v50 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v75 = v50;
      _os_log_impl(&dword_2218F0000, v49, OS_LOG_TYPE_ERROR, "%{public}@Unable to create owner from model.", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v47);
    v31 = 0;
  }

LABEL_21:
  return v31;
}

void __67__HMDHome_DataModel__homeWithHomeManager_backingStore_model_error___block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;
  id v4;

  +[HMCContext findUserWithModelID:](HMCContext, "findUserWithModelID:", *(_QWORD *)(a1 + 32));
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  if (v2)
  {
    v4 = v2;
    objc_msgSend(v2, "setAccountHandle:", *(_QWORD *)(a1 + 40));
    objc_msgSend(*(id *)(a1 + 48), "context");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "save");

    v2 = v4;
  }

}

void __171__HMDHome_DataModel__createNewHomeModelsWithModelID_parentModelID_name_acwgGroupResolvingKey_acwgIssuerPublicKeyExternalRepresentation_userUniqueIDForAccessories_ownedBy___block_invoke(uint64_t a1, void *a2)
{
  void *v3;
  id v4;
  void *v5;
  id v6;

  v6 = a2;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v3 = v6;
  else
    v3 = 0;
  v4 = v3;
  v5 = v4;
  if (v4)
  {
    objc_msgSend(v4, "setParentUUID:", *(_QWORD *)(a1 + 32));
    objc_msgSend(v5, "setMatCredIPKExternalRepresentation:", *(_QWORD *)(a1 + 40));
    objc_msgSend(v5, "setUniqueIDForAccessories:", *(_QWORD *)(a1 + 48));
  }
  objc_msgSend(*(id *)(a1 + 56), "addObject:", v6);

}

void __171__HMDHome_DataModel__createNewHomeModelsWithModelID_parentModelID_name_acwgGroupResolvingKey_acwgIssuerPublicKeyExternalRepresentation_userUniqueIDForAccessories_ownedBy___block_invoke_2(uint64_t a1, void *a2, void *a3)
{
  void *v5;
  uint64_t v6;
  void *v7;
  id v8;
  id v9;
  void *v10;
  void *v11;
  HMDActionSetModel *v12;
  void *v13;
  void *v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v5 = (void *)MEMORY[0x24BDD1880];
  v6 = *(_QWORD *)(a1 + 32);
  v14 = a2;
  v7 = (void *)MEMORY[0x24BDBCE30];
  v8 = a3;
  v9 = a2;
  objc_msgSend(v7, "arrayWithObjects:count:", &v14, 1);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "hm_deriveUUIDFromBaseUUID:identifierSalt:withSalts:", v6, 0, v10, v14, v15);
  v11 = (void *)objc_claimAutoreleasedReturnValue();

  v12 = -[HMDBackingStoreModelObject initWithUUID:parentUUID:]([HMDActionSetModel alloc], "initWithUUID:parentUUID:", v11, *(_QWORD *)(a1 + 32));
  HMDLocalizedStringForKey(v8);
  v13 = (void *)objc_claimAutoreleasedReturnValue();

  -[HMDActionSetModel setName:](v12, "setName:", v13);
  -[HMDActionSetModel setType:](v12, "setType:", v9);
  objc_msgSend(*(id *)(a1 + 40), "addObject:", v12);

}

- (unint64_t)deriveNetworkRouterSupport:(unint64_t)a3
{
  char v3;
  unint64_t v4;
  unint64_t v5;

  v3 = a3;
  v4 = 4;
  if ((a3 & 8) == 0)
    v4 = 15;
  if ((a3 & 1) != 0)
  {
    v5 = v4 & 8;
    if (-[HMDHome isOwnerUser](self, "isOwnerUser"))
      v4 = v5;
    else
      v4 = 0;
  }
  if ((v3 & 2) != 0)
    v4 = 0;
  if ((v3 & 4) != 0)
    v4 &= 9u;
  if ((v3 & 0x10) != 0)
    return v4 & 0xFFFFFFFFFFFFFFFDLL;
  else
    return v4;
}

- (void)_addTransactionWithProtectionMode:(id)a3 message:(id)a4
{
  id v6;
  id v7;
  HMDHomeModel *v8;
  void *v9;
  void *v10;
  void *v11;
  HMDHomeModel *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  id v17;
  _QWORD v18[4];
  id v19;
  HMDHome *v20;

  v6 = a4;
  v7 = a3;
  v8 = [HMDHomeModel alloc];
  -[HMDHome uuid](self, "uuid");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHome homeManager](self, "homeManager");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "uuid");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v12 = -[HMDBackingStoreModelObject initWithObjectChangeType:uuid:parentUUID:](v8, "initWithObjectChangeType:uuid:parentUUID:", 2, v9, v11);

  -[HMDHomeModel setNetworkProtectionMode:](v12, "setNetworkProtectionMode:", v7);
  -[HMDHome backingStore](self, "backingStore");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "name");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  +[HMDBackingStoreTransactionOptions defaultXPCOptions](HMDBackingStoreTransactionOptions, "defaultXPCOptions");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v13, "transaction:options:", v14, v15);
  v16 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v16, "add:withMessage:", v12, v6);
  v18[0] = MEMORY[0x24BDAC760];
  v18[1] = 3221225472;
  v18[2] = __76__HMDHome_NetworkRouterInternal___addTransactionWithProtectionMode_message___block_invoke;
  v18[3] = &unk_24E79BCC8;
  v19 = v6;
  v20 = self;
  v17 = v6;
  objc_msgSend(v16, "run:", v18);

}

- (void)_addTransactionForActiveNetworkRouterAccessory:(id)a3 isReplacement:(BOOL)a4
{
  _BOOL8 v4;
  id v6;
  void *v7;
  void *v8;
  id v9;

  v4 = a4;
  v6 = a3;
  -[HMDHome backingStore](self, "backingStore");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  +[HMDBackingStoreTransactionOptions defaultXPCOptions](HMDBackingStoreTransactionOptions, "defaultXPCOptions");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "transaction:options:", CFSTR("Update Active Network Router Accessory"), v8);
  v9 = (id)objc_claimAutoreleasedReturnValue();

  -[HMDHome _updateActiveNetworkRouterAccessory:isReplacement:withTransaction:](self, "_updateActiveNetworkRouterAccessory:isReplacement:withTransaction:", v6, v4, v9);
  objc_msgSend(v9, "run");

}

- (void)_updateActiveNetworkRouterAccessory:(id)a3 isReplacement:(BOOL)a4 withTransaction:(id)a5
{
  _BOOL4 v5;
  id v8;
  HMDHomeNetworkRouterSettingsModel *v9;
  void *v10;
  void *v11;
  void *v12;
  HMDHomeNetworkRouterSettingsModel *v13;
  void *v14;
  void *v15;
  void *v16;
  HMDHomeModel *v17;
  void *v18;
  void *v19;
  void *v20;
  HMDHomeModel *v21;
  id v22;

  v5 = a4;
  v22 = a5;
  v8 = a3;
  v9 = [HMDHomeNetworkRouterSettingsModel alloc];
  -[HMDHome uuid](self, "uuid");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  +[HMDHomeNetworkRouterSettingsModel modelIDForHomeUUID:](HMDHomeNetworkRouterSettingsModel, "modelIDForHomeUUID:", v10);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHome uuid](self, "uuid");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  v13 = -[HMDBackingStoreModelObject initWithObjectChangeType:uuid:parentUUID:](v9, "initWithObjectChangeType:uuid:parentUUID:", 2, v11, v12);

  objc_msgSend(v8, "uuid");
  v14 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v14, "UUIDString");
  v15 = (void *)objc_claimAutoreleasedReturnValue();

  -[HMDHomeNetworkRouterSettingsModel setActiveNetworkRouterAccessoryUUID:](v13, "setActiveNetworkRouterAccessoryUUID:", v15);
  if (v5)
    v16 = 0;
  else
    v16 = v15;
  -[HMDHomeNetworkRouterSettingsModel setActiveNetworkRouterInitialSetupNeededUUID:](v13, "setActiveNetworkRouterInitialSetupNeededUUID:", v16);
  objc_msgSend(v22, "add:", v13);
  if (!v5)
  {
    v17 = [HMDHomeModel alloc];
    -[HMDHome uuid](self, "uuid");
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHome homeManager](self, "homeManager");
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v19, "uuid");
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    v21 = -[HMDBackingStoreModelObject initWithObjectChangeType:uuid:parentUUID:](v17, "initWithObjectChangeType:uuid:parentUUID:", 2, v18, v20);

    -[HMDHomeModel setNetworkProtectionMode:](v21, "setNetworkProtectionMode:", &unk_24E96C0F8);
    objc_msgSend(v22, "add:", v21);

  }
}

- (void)_clearAccessoryNetworkProtectionStateWithTransaction:(id)a3
{
  id v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t i;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  _BYTE v18[128];
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v4 = a3;
  v14 = 0u;
  v15 = 0u;
  v16 = 0u;
  v17 = 0u;
  -[HMDHome accessories](self, "accessories", 0);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
  if (v6)
  {
    v7 = v6;
    v8 = *(_QWORD *)v15;
    do
    {
      for (i = 0; i != v7; ++i)
      {
        if (*(_QWORD *)v15 != v8)
          objc_enumerationMutation(v5);
        v10 = *(void **)(*((_QWORD *)&v14 + 1) + 8 * i);
        objc_msgSend(v10, "networkRouterUUID");
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        if (v11)
        {

        }
        else
        {
          objc_msgSend(v10, "networkClientIdentifier");
          v12 = (void *)objc_claimAutoreleasedReturnValue();

          if (!v12)
            continue;
        }
        objc_msgSend(v10, "transactionWithObjectChangeType:", 2);
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v13, "setNetworkRouterUUID:", 0);
        objc_msgSend(v13, "setNetworkClientIdentifier:", 0);
        objc_msgSend(v13, "setNetworkClientProfileFingerprint:", 0);
        objc_msgSend(v13, "setAppliedFirewallWANRules:", 0);
        objc_msgSend(v13, "setNetworkClientLAN:", &unk_24E96C110);
        objc_msgSend(v13, "setCurrentNetworkProtectionMode:", &unk_24E96C128);
        objc_msgSend(v4, "add:", v13);

      }
      v7 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
    }
    while (v7);
  }

}

- (void)_addTransactionForMinimumNetworkRouterHomeKitVersion:(id)a3 message:(id)a4
{
  id v6;
  id v7;
  HMDHomeNetworkRouterSettingsModel *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  HMDHomeNetworkRouterSettingsModel *v16;

  v6 = a4;
  v7 = a3;
  v8 = [HMDHomeNetworkRouterSettingsModel alloc];
  -[HMDHome uuid](self, "uuid");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  +[HMDHomeNetworkRouterSettingsModel modelIDForHomeUUID:](HMDHomeNetworkRouterSettingsModel, "modelIDForHomeUUID:", v9);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHome uuid](self, "uuid");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v16 = -[HMDBackingStoreModelObject initWithObjectChangeType:uuid:parentUUID:](v8, "initWithObjectChangeType:uuid:parentUUID:", 2, v10, v11);

  objc_msgSend(v7, "versionString");
  v12 = (void *)objc_claimAutoreleasedReturnValue();

  -[HMDHomeNetworkRouterSettingsModel setMinimumNetworkRouterSupportHomeKitVersion:](v16, "setMinimumNetworkRouterSupportHomeKitVersion:", v12);
  -[HMDHome backingStore](self, "backingStore");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  +[HMDBackingStoreTransactionOptions defaultXPCOptions](HMDBackingStoreTransactionOptions, "defaultXPCOptions");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v13, "transaction:options:", CFSTR("Update Minimum Network Router Support HomeKit Version"), v14);
  v15 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v15, "add:withMessage:", v16, v6);
  objc_msgSend(v15, "run");

}

- (void)_addTransactionForMinimumHomeKitVersionForAccessoryNetworkProtectionChange:(id)a3 message:(id)a4
{
  id v6;
  id v7;
  HMDHomeNetworkRouterSettingsModel *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  HMDHomeNetworkRouterSettingsModel *v16;

  v6 = a4;
  v7 = a3;
  v8 = [HMDHomeNetworkRouterSettingsModel alloc];
  -[HMDHome uuid](self, "uuid");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  +[HMDHomeNetworkRouterSettingsModel modelIDForHomeUUID:](HMDHomeNetworkRouterSettingsModel, "modelIDForHomeUUID:", v9);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHome uuid](self, "uuid");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v16 = -[HMDBackingStoreModelObject initWithObjectChangeType:uuid:parentUUID:](v8, "initWithObjectChangeType:uuid:parentUUID:", 2, v10, v11);

  objc_msgSend(v7, "versionString");
  v12 = (void *)objc_claimAutoreleasedReturnValue();

  -[HMDHomeNetworkRouterSettingsModel setMinHomeKitVersionForAccessoryNetworkProtectionChange:](v16, "setMinHomeKitVersionForAccessoryNetworkProtectionChange:", v12);
  -[HMDHome backingStore](self, "backingStore");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  +[HMDBackingStoreTransactionOptions defaultXPCOptions](HMDBackingStoreTransactionOptions, "defaultXPCOptions");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v13, "transaction:options:", CFSTR("Update Minimum HomeKit Version For Accessory Network Protection Change"), v14);
  v15 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v15, "add:withMessage:", v16, v6);
  objc_msgSend(v15, "run");

}

- (void)_handleUpdateNetworkProtection:(id)a3
{
  id v4;
  void *v5;
  BOOL v6;
  id v7;
  void *v8;
  HMDHome *v9;
  NSObject *v10;
  void *v11;
  void *v12;
  void *v13;
  id v14;
  uint8_t buf[4];
  void *v16;
  __int16 v17;
  void *v18;
  __int16 v19;
  id v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  v4 = a3;
  objc_msgSend(v4, "numberForKey:", *MEMORY[0x24BDD7CA0]);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v5)
  {
    objc_msgSend(MEMORY[0x24BDD1540], "hmErrorWithCode:", 3);
    v7 = (id)objc_claimAutoreleasedReturnValue();
LABEL_9:
    objc_msgSend(v4, "respondWithError:", v7);
    goto LABEL_10;
  }
  v14 = 0;
  v6 = -[HMDHome checkForNetworkRouterSupport:error:](self, "checkForNetworkRouterSupport:error:", 1, &v14);
  v7 = v14;
  if (!v6)
  {
    v8 = (void *)MEMORY[0x227676638]();
    v9 = self;
    HMFGetOSLogHandle();
    v10 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      HMDNetworkRouterSupportAsString(-[HMDHome networkRouterSupport](v9, "networkRouterSupport"));
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543874;
      v16 = v11;
      v17 = 2112;
      v18 = v12;
      v19 = 2112;
      v20 = v7;
      _os_log_impl(&dword_2218F0000, v10, OS_LOG_TYPE_INFO, "%{public}@Cannot update home network protection mode - networkRouterSupport %@ error %@", buf, 0x20u);

    }
    objc_autoreleasePoolPop(v8);
    goto LABEL_9;
  }
  if ((unint64_t)objc_msgSend(v5, "integerValue") > 1)
  {
    objc_msgSend(MEMORY[0x24BDD1540], "hmErrorWithCode:", 3);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "respondWithError:", v13);

  }
  else
  {
    -[HMDHome _addTransactionWithProtectionMode:message:](self, "_addTransactionWithProtectionMode:message:", v5, v4);
  }
LABEL_10:

}

- (void)_handleSetMinimumNetworkRouterHomeKitVersion:(id)a3
{
  id v4;
  void *v5;
  HMDHomeKitVersion *v6;
  void *v7;
  void *v8;
  HMDHome *v9;
  NSObject *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  uint8_t buf[4];
  void *v17;
  __int16 v18;
  void *v19;
  __int16 v20;
  void *v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  v4 = a3;
  objc_msgSend(v4, "stringForKey:", CFSTR("kHomedVersionKey"));
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = -[HMDHomeKitVersion initWithVersionString:]([HMDHomeKitVersion alloc], "initWithVersionString:", v5);
  if (v6)
  {
    +[HMDHomeKitVersion currentVersion](HMDHomeKitVersion, "currentVersion");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v7, "isGreaterThanVersion:", v6))
    {
      v8 = (void *)MEMORY[0x227676638]();
      v9 = self;
      HMFGetOSLogHandle();
      v10 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        -[HMDHomeKitVersion versionString](v6, "versionString");
        v12 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v7, "versionString");
        v15 = v8;
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543874;
        v17 = v11;
        v18 = 2112;
        v19 = v12;
        v20 = 2112;
        v21 = v13;
        _os_log_impl(&dword_2218F0000, v10, OS_LOG_TYPE_INFO, "%{public}@Attempting to set the network router support HomeKit version to %@ - lower than version of HomeKit on this device - %@", buf, 0x20u);

        v8 = v15;
      }

      objc_autoreleasePoolPop(v8);
    }
    -[HMDHome _addTransactionForMinimumNetworkRouterHomeKitVersion:message:](self, "_addTransactionForMinimumNetworkRouterHomeKitVersion:message:", v6, v4);

  }
  else
  {
    objc_msgSend(MEMORY[0x24BDD1540], "hmErrorWithCode:", 3);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "respondWithError:", v14);

  }
}

- (void)_handleSetMinHomeKitVersionForAccessoryNetworkProtectionChange:(id)a3
{
  void *v4;
  HMDHomeKitVersion *v5;
  void *v6;
  id v7;

  v7 = a3;
  objc_msgSend(v7, "stringForKey:", CFSTR("kHomedVersionKey"));
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  if (v4)
  {
    v5 = -[HMDHomeKitVersion initWithVersionString:]([HMDHomeKitVersion alloc], "initWithVersionString:", v4);
    if (v5)
    {
      -[HMDHome _addTransactionForMinimumHomeKitVersionForAccessoryNetworkProtectionChange:message:](self, "_addTransactionForMinimumHomeKitVersionForAccessoryNetworkProtectionChange:message:", v5, v7);
    }
    else
    {
      objc_msgSend(MEMORY[0x24BDD1540], "hmErrorWithCode:", 3);
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v7, "respondWithError:", v6);

    }
  }
  else
  {
    objc_msgSend(MEMORY[0x24BDD1540], "hmErrorWithCode:", 3);
    v5 = (HMDHomeKitVersion *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "respondWithError:", v5);
  }

}

- (void)_handleCreateUniquePSKClientConfiguration:(id)a3
{
  id v4;
  void *v5;
  HMDHome *v6;
  NSObject *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  id v11;
  id v12;
  uint64_t *v13;
  void *v14;
  void *v15;
  uint64_t v16;
  void *v17;
  void *v18;
  HMDNetworkRouterCredential *v19;
  void *v20;
  id v21;
  id v22;
  void *v23;
  NSObject *v24;
  uint64_t v25;
  void *v26;
  const __CFString *v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(uint64_t, void *, void *);
  void *v31;
  HMDHome *v32;
  id v33;
  _BYTE buf[24];
  void *v35;
  id v36;
  id v37;
  id v38;
  id v39;
  uint64_t *v40;
  uint64_t v41;

  v41 = *MEMORY[0x24BDAC8D0];
  v4 = a3;
  v5 = (void *)MEMORY[0x227676638]();
  v6 = self;
  HMFGetOSLogHandle();
  v7 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
  {
    HMFGetLogIdentifier();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543362;
    *(_QWORD *)&buf[4] = v8;
    _os_log_impl(&dword_2218F0000, v7, OS_LOG_TYPE_DEBUG, "%{public}@Received request to create a unique PSK client configuration", buf, 0xCu);

  }
  objc_autoreleasePoolPop(v5);
  -[HMDHome activeNetworkRouterAccessory](v6, "activeNetworkRouterAccessory");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = MEMORY[0x24BDAC760];
  v28 = MEMORY[0x24BDAC760];
  v29 = 3221225472;
  v30 = __76__HMDHome_NetworkRouterInternal___handleCreateUniquePSKClientConfiguration___block_invoke;
  v31 = &unk_24E78C3A8;
  v32 = v6;
  v33 = v4;
  v11 = v4;
  v12 = v9;
  v13 = &v28;
  generateWiFiUniquePreSharedKey();
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v14, "dataUsingEncoding:", 1, v28, v29);
  v15 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v12, "networkRouterController");
  v16 = objc_claimAutoreleasedReturnValue();
  v17 = (void *)v16;
  if (v15 && v16)
  {
    +[HMDNetworkRouterClientConfiguration configurationForOpenProtectionWithClientIdentifier:](HMDNetworkRouterClientConfiguration, "configurationForOpenProtectionWithClientIdentifier:", 0);
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    v19 = objc_alloc_init(HMDNetworkRouterCredential);
    objc_msgSend(v18, "setCredential:", v19);

    objc_msgSend(v18, "credential");
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v20, "setPsk:", v15);

    *(_QWORD *)buf = v10;
    *(_QWORD *)&buf[8] = 3221225472;
    *(_QWORD *)&buf[16] = __HMDCreateUniquePSKClientConfiguration_block_invoke;
    v35 = &unk_24E7969B8;
    v40 = v13;
    v21 = v17;
    v36 = v21;
    v37 = v18;
    v38 = v12;
    v39 = v15;
    v22 = v18;
    objc_msgSend(v21, "writeManagedNetworkEnable:completion:", 1, buf);

  }
  else
  {
    v23 = (void *)MEMORY[0x227676638]();
    HMFGetOSLogHandle();
    v24 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v25 = objc_claimAutoreleasedReturnValue();
      v26 = (void *)v25;
      v27 = CFSTR("no router controller found");
      if (v17)
        v27 = CFSTR("PSK generation");
      *(_DWORD *)buf = 138543618;
      *(_QWORD *)&buf[4] = v25;
      *(_WORD *)&buf[12] = 2112;
      *(_QWORD *)&buf[14] = v27;
      _os_log_impl(&dword_2218F0000, v24, OS_LOG_TYPE_ERROR, "%{public}@Failed to create unique PSK client configuration due to %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v23);
    objc_msgSend(MEMORY[0x24BDD1540], "hmErrorWithCode:", -1);
    v22 = (id)objc_claimAutoreleasedReturnValue();
    v30((uint64_t)v13, 0, v22);
  }

}

- (void)_handleRemoveClientConfiguration:(id)a3
{
  id v4;
  void *v5;
  HMDHome *v6;
  NSObject *v7;
  void *v8;
  void *v9;
  void *v10;
  _QWORD v11[4];
  id v12;
  uint8_t buf[4];
  void *v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v4 = a3;
  v5 = (void *)MEMORY[0x227676638]();
  v6 = self;
  HMFGetOSLogHandle();
  v7 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
  {
    HMFGetLogIdentifier();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543362;
    v14 = v8;
    _os_log_impl(&dword_2218F0000, v7, OS_LOG_TYPE_DEBUG, "%{public}@Received request to remove a client configuration", buf, 0xCu);

  }
  objc_autoreleasePoolPop(v5);
  objc_msgSend(v4, "numberForKey:", CFSTR("HMDH.NetworkClientIdentifierMessageKey"));
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  if (v9)
  {
    v11[0] = MEMORY[0x24BDAC760];
    v11[1] = 3221225472;
    v11[2] = __67__HMDHome_NetworkRouterInternal___handleRemoveClientConfiguration___block_invoke;
    v11[3] = &unk_24E79BD80;
    v12 = v4;
    -[HMDHome _removeClientConfigurationWithIdentifier:completion:](v6, "_removeClientConfigurationWithIdentifier:completion:", v9, v11);
    v10 = v12;
  }
  else
  {
    objc_msgSend(MEMORY[0x24BDD1540], "hmErrorWithCode:", 27);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "respondWithError:", v10);
  }

}

- (void)_configureNetworkRouterClientManager:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  HMDHome *v8;
  NSObject *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  HMDNetworkRouterClientManager *v15;
  void *v16;
  void *v17;
  HMDNetworkRouterClientManager *v18;
  void *v19;
  uint64_t v20;
  void *v21;
  void *v22;
  void *v23;
  _QWORD v24[5];
  _QWORD v25[5];
  uint8_t buf[4];
  void *v27;
  __int16 v28;
  void *v29;
  __int16 v30;
  void *v31;
  uint64_t v32;

  v32 = *MEMORY[0x24BDAC8D0];
  v4 = a3;
  if (-[HMDHome supportsRouterManagement](self, "supportsRouterManagement"))
  {
    -[HMDHome routerClientManager](self, "routerClientManager");
    v5 = (void *)objc_claimAutoreleasedReturnValue();

    if (v5)
    {
      -[HMDHome routerClientManager](self, "routerClientManager");
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v6, "replaceActiveNetworkRouterAccessory:", v4);

    }
    else
    {
      v7 = (void *)MEMORY[0x227676638]();
      v8 = self;
      HMFGetOSLogHandle();
      v9 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v4, "name");
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v4, "uuid");
        v12 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v12, "UUIDString");
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543874;
        v27 = v10;
        v28 = 2112;
        v29 = v11;
        v30 = 2112;
        v31 = v13;
        _os_log_impl(&dword_2218F0000, v9, OS_LOG_TYPE_INFO, "%{public}@Creating network router client manager with accessory %@/%@", buf, 0x20u);

      }
      objc_autoreleasePoolPop(v7);
      +[HMDNetworkRouterFirewallRuleManager sharedInstance](HMDNetworkRouterFirewallRuleManager, "sharedInstance");
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      v15 = [HMDNetworkRouterClientManager alloc];
      -[HMDHome workQueue](v8, "workQueue");
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x24BDD16D0], "defaultCenter");
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      v18 = -[HMDNetworkRouterClientManager initWithNetworkRouterAccessory:workQueue:firewallRuleManager:notificationCenter:](v15, "initWithNetworkRouterAccessory:workQueue:firewallRuleManager:notificationCenter:", v4, v16, v14, v17);
      -[HMDHome setRouterClientManager:](v8, "setRouterClientManager:", v18);

      -[HMDHome routerClientManager](v8, "routerClientManager");
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      v20 = MEMORY[0x24BDAC760];
      v25[0] = MEMORY[0x24BDAC760];
      v25[1] = 3221225472;
      v25[2] = __71__HMDHome_NetworkRouterInternal___configureNetworkRouterClientManager___block_invoke;
      v25[3] = &unk_24E79BD80;
      v25[4] = v8;
      objc_msgSend(v14, "startupForClient:completion:", v19, v25);

      -[HMDHome residentDeviceManager](v8, "residentDeviceManager");
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      -[HMDHome routerClientManager](v8, "routerClientManager");
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v21, "addDataSource:", v22);

      -[HMDHome residentDeviceManager](v8, "residentDeviceManager");
      v23 = (void *)objc_claimAutoreleasedReturnValue();
      v24[0] = v20;
      v24[1] = 3221225472;
      v24[2] = __71__HMDHome_NetworkRouterInternal___configureNetworkRouterClientManager___block_invoke_67;
      v24[3] = &unk_24E79BD80;
      v24[4] = v8;
      objc_msgSend(v23, "confirmWithCompletionHandler:", v24);

    }
  }

}

- (void)_unconfigureNetworkRouterClientManager
{
  void *v3;
  void *v4;
  HMDHome *v5;
  NSObject *v6;
  void *v7;
  void *v8;
  int v9;
  void *v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  -[HMDHome routerClientManager](self, "routerClientManager");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  if (v3)
  {
    v4 = (void *)MEMORY[0x227676638]();
    v5 = self;
    HMFGetOSLogHandle();
    v6 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      v9 = 138543362;
      v10 = v7;
      _os_log_impl(&dword_2218F0000, v6, OS_LOG_TYPE_INFO, "%{public}@Shutting down firewall rule manager and network router client manager", (uint8_t *)&v9, 0xCu);

    }
    objc_autoreleasePoolPop(v4);
    objc_msgSend(v3, "stop");
    -[HMDHome setRouterClientManager:](v5, "setRouterClientManager:", 0);
    +[HMDNetworkRouterFirewallRuleManager sharedInstance](HMDNetworkRouterFirewallRuleManager, "sharedInstance");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "shutdownForClient:", v3);

  }
}

- (void)handleAccessoryDidAddNetworkRouterControllerNotification:(id)a3
{
  id v4;
  NSObject *v5;
  id v6;
  _QWORD v7[4];
  id v8;
  HMDHome *v9;

  v4 = a3;
  -[HMDHome workQueue](self, "workQueue");
  v5 = objc_claimAutoreleasedReturnValue();
  v7[0] = MEMORY[0x24BDAC760];
  v7[1] = 3221225472;
  v7[2] = __91__HMDHome_NetworkRouterInternal__handleAccessoryDidAddNetworkRouterControllerNotification___block_invoke;
  v7[3] = &unk_24E79C268;
  v8 = v4;
  v9 = self;
  v6 = v4;
  dispatch_async(v5, v7);

}

- (void)handleAccessoryDidRemoveNetworkRouterControllerNotification:(id)a3
{
  id v4;
  NSObject *v5;
  id v6;
  _QWORD v7[4];
  id v8;
  HMDHome *v9;

  v4 = a3;
  -[HMDHome workQueue](self, "workQueue");
  v5 = objc_claimAutoreleasedReturnValue();
  v7[0] = MEMORY[0x24BDAC760];
  v7[1] = 3221225472;
  v7[2] = __94__HMDHome_NetworkRouterInternal__handleAccessoryDidRemoveNetworkRouterControllerNotification___block_invoke;
  v7[3] = &unk_24E79C268;
  v8 = v4;
  v9 = self;
  v6 = v4;
  dispatch_async(v5, v7);

}

- (void)_scheduleApplyNetworkRouterSettingsAction:(id)a3
{
  _QWORD v3[5];

  v3[0] = MEMORY[0x24BDAC760];
  v3[1] = 3221225472;
  v3[2] = __76__HMDHome_NetworkRouterInternal___scheduleApplyNetworkRouterSettingsAction___block_invoke;
  v3[3] = &unk_24E78C3D0;
  v3[4] = self;
  objc_msgSend(a3, "addPostApplyActionIfNotPresent:usingBlock:", CFSTR("HMDNetworkRouterApplySettingsAction"), v3);
}

- (void)_evaluateNetworkRouterManagementForTransaction:(id)a3
{
  void *v4;
  id v5;

  v5 = a3;
  objc_msgSend(v5, "userInfo");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "setObject:forKeyedSubscript:", MEMORY[0x24BDBD1C8], CFSTR("EvaluateRouterManagement"));

  -[HMDHome _scheduleApplyNetworkRouterSettingsAction:](self, "_scheduleApplyNetworkRouterSettingsAction:", v5);
}

- (void)_handleNetworkProtectionModeChangeForTransaction:(id)a3
{
  void *v4;
  id v5;

  v5 = a3;
  objc_msgSend(v5, "userInfo");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "setObject:forKeyedSubscript:", MEMORY[0x24BDBD1C8], CFSTR("NetworkProtectionModeChanged"));

  -[HMDHome _scheduleApplyNetworkRouterSettingsAction:](self, "_scheduleApplyNetworkRouterSettingsAction:", v5);
}

- (void)_evaluateNetworkProtectionAndRouterManagement
{
  void *v3;
  void *v4;
  void *v5;
  HMDHome *v6;
  NSObject *v7;
  _BOOL4 v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  int v16;
  void *v17;
  __int16 v18;
  void *v19;
  __int16 v20;
  void *v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  -[HMDHome _evaluateNetworkProtectionSupport](self, "_evaluateNetworkProtectionSupport");
  -[HMDHome activeNetworkRouterAccessory](self, "activeNetworkRouterAccessory");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "networkRouterController");
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  v5 = (void *)MEMORY[0x227676638]();
  v6 = self;
  HMFGetOSLogHandle();
  v7 = objc_claimAutoreleasedReturnValue();
  v8 = os_log_type_enabled(v7, OS_LOG_TYPE_INFO);
  if (v4)
  {
    if (v8)
    {
      HMFGetLogIdentifier();
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v3, "uuid");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v10, "UUIDString");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v3, "name");
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      v16 = 138543874;
      v17 = v9;
      v18 = 2112;
      v19 = v11;
      v20 = 2112;
      v21 = v12;
      _os_log_impl(&dword_2218F0000, v7, OS_LOG_TYPE_INFO, "%{public}@Found active network router accessory %@/%@", (uint8_t *)&v16, 0x20u);

    }
    objc_autoreleasePoolPop(v5);
    -[HMDHome _configureNetworkRouterClientManager:](v6, "_configureNetworkRouterClientManager:", v3);
  }
  else
  {
    if (v8)
    {
      HMFGetLogIdentifier();
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      -[HMDHome activeNetworkRouterUUID](v6, "activeNetworkRouterUUID");
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v3, "name");
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      v16 = 138543874;
      v17 = v13;
      v18 = 2112;
      v19 = v14;
      v20 = 2112;
      v21 = v15;
      _os_log_impl(&dword_2218F0000, v7, OS_LOG_TYPE_INFO, "%{public}@No active network router accessory with router info %@/%@", (uint8_t *)&v16, 0x20u);

    }
    objc_autoreleasePoolPop(v5);
    -[HMDHome _unconfigureNetworkRouterClientManager](v6, "_unconfigureNetworkRouterClientManager");
  }

}

- (void)_createUniquePSKClientConfigurationWithRequestMessage:(id)a3 pairingEvent:(id)a4 completion:(id)a5
{
  id v8;
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;
  void *v14;
  _QWORD aBlock[4];
  id v16;
  id v17;
  id v18;
  id v19;
  id location;

  v8 = a3;
  v9 = a4;
  v10 = a5;
  objc_initWeak(&location, self);
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 3221225472;
  aBlock[2] = __112__HMDHome_NetworkRouterInternal___createUniquePSKClientConfigurationWithRequestMessage_pairingEvent_completion___block_invoke;
  aBlock[3] = &unk_24E78C3F8;
  objc_copyWeak(&v19, &location);
  v11 = v9;
  v16 = v11;
  v12 = v8;
  v17 = v12;
  v13 = v10;
  v18 = v13;
  v14 = _Block_copy(aBlock);
  -[HMDHome _requestUniquePSKClientConfigurationWithCompletion:](self, "_requestUniquePSKClientConfigurationWithCompletion:", v14);

  objc_destroyWeak(&v19);
  objc_destroyWeak(&location);

}

- (void)_requestUniquePSKClientConfigurationWithCompletion:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  HMDRemoteDeviceMessageDestination *v8;
  void *v9;
  HMDRemoteDeviceMessageDestination *v10;
  void *v11;
  void *v12;
  void *v13;
  HMDHome *v14;
  NSObject *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(uint64_t, void *, void *);
  void *v20;
  id v21;
  id v22;
  id location[4];

  location[3] = *(id *)MEMORY[0x24BDAC8D0];
  v4 = a3;
  -[HMDHome residentDeviceManager](self, "residentDeviceManager");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "primaryResidentDevice");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "device");
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  if (v7)
  {
    v8 = [HMDRemoteDeviceMessageDestination alloc];
    -[HMDHome uuid](self, "uuid");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v10 = -[HMDRemoteDeviceMessageDestination initWithTarget:device:](v8, "initWithTarget:device:", v9, v7);

    v11 = (void *)objc_msgSend(objc_alloc(MEMORY[0x24BE3F1D0]), "initWithName:destination:payload:", CFSTR("HMDHomeCreateUniquePSKClientConfigurationRequestKey"), v10, 0);
    objc_msgSend(v11, "setSecureRemote:", 1);
    objc_initWeak(location, self);
    v17 = MEMORY[0x24BDAC760];
    v18 = 3221225472;
    v19 = __85__HMDHome_NetworkRouterInternal___requestUniquePSKClientConfigurationWithCompletion___block_invoke;
    v20 = &unk_24E79AFA0;
    objc_copyWeak(&v22, location);
    v21 = v4;
    objc_msgSend(v11, "setResponseHandler:", &v17);
    -[HMDHome msgDispatcher](self, "msgDispatcher", v17, v18, v19, v20);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "sendMessage:completionHandler:", v11, 0);

    objc_destroyWeak(&v22);
    objc_destroyWeak(location);

  }
  else
  {
    v13 = (void *)MEMORY[0x227676638]();
    v14 = self;
    HMFGetOSLogHandle();
    v15 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      LODWORD(location[0]) = 138543362;
      *(id *)((char *)location + 4) = v16;
      _os_log_impl(&dword_2218F0000, v15, OS_LOG_TYPE_ERROR, "%{public}@No primary resident device to request unique PSK from", (uint8_t *)location, 0xCu);

    }
    objc_autoreleasePoolPop(v13);
    objc_msgSend(MEMORY[0x24BDD1540], "hmErrorWithCode:", 91);
    v10 = (HMDRemoteDeviceMessageDestination *)objc_claimAutoreleasedReturnValue();
    (*((void (**)(id, _QWORD, HMDRemoteDeviceMessageDestination *))v4 + 2))(v4, 0, v10);
  }

}

- (void)_removeClientConfigurationWithIdentifier:(id)a3
{
  id v4;

  v4 = a3;
  if (-[HMDHome isOwnerUser](self, "isOwnerUser"))
    -[HMDHome _removeClientConfigurationWithIdentifier:completion:](self, "_removeClientConfigurationWithIdentifier:completion:", v4, 0);
  else
    -[HMDHome _requestRemoveClientConfigurationWithIdentifier:](self, "_requestRemoveClientConfigurationWithIdentifier:", v4);

}

- (void)_removeClientConfigurationWithIdentifier:(id)a3 completion:(id)a4
{
  id v6;
  id v7;
  void *v8;
  void *v9;
  void *v10;
  HMDHome *v11;
  NSObject *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  _QWORD v18[5];
  id v19;
  id v20;
  uint8_t buf[4];
  void *v22;
  __int16 v23;
  id v24;
  __int16 v25;
  void *v26;
  uint64_t v27;

  v27 = *MEMORY[0x24BDAC8D0];
  v6 = a3;
  v7 = a4;
  -[HMDHome activeNetworkRouterAccessory](self, "activeNetworkRouterAccessory");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "networkRouterController");
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  if (v9)
  {
    v18[0] = MEMORY[0x24BDAC760];
    v18[1] = 3221225472;
    v18[2] = __86__HMDHome_NetworkRouterInternal___removeClientConfigurationWithIdentifier_completion___block_invoke;
    v18[3] = &unk_24E79AB68;
    v18[4] = self;
    v19 = v6;
    v20 = v7;
    objc_msgSend(v9, "removeClientConfigurationWithClientIdentifier:completion:", v19, v18);

  }
  else
  {
    v10 = (void *)MEMORY[0x227676638]();
    v11 = self;
    HMFGetOSLogHandle();
    v12 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      -[HMDHome activeNetworkRouterAccessory](v11, "activeNetworkRouterAccessory");
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v14, "uuid");
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v15, "UUIDString");
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543874;
      v22 = v13;
      v23 = 2112;
      v24 = v6;
      v25 = 2112;
      v26 = v16;
      _os_log_impl(&dword_2218F0000, v12, OS_LOG_TYPE_ERROR, "%{public}@Failed to remove client configuration %@ due to no router controller found on the active network router %@", buf, 0x20u);

    }
    objc_autoreleasePoolPop(v10);
    if (v7)
    {
      objc_msgSend(MEMORY[0x24BDD1540], "hmErrorWithCode:", 2);
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      (*((void (**)(id, void *))v7 + 2))(v7, v17);

    }
  }

}

- (void)_requestRemoveClientConfigurationWithIdentifier:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  HMDRemoteDeviceMessageDestination *v8;
  void *v9;
  HMDRemoteDeviceMessageDestination *v10;
  id v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  HMDHome *v16;
  NSObject *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(uint64_t, void *, void *);
  void *v22;
  id v23;
  id v24;
  const __CFString *v25;
  id v26;
  id location[4];

  location[3] = *(id *)MEMORY[0x24BDAC8D0];
  v4 = a3;
  -[HMDHome residentDeviceManager](self, "residentDeviceManager");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "primaryResidentDevice");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "device");
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  if (v7)
  {
    v8 = [HMDRemoteDeviceMessageDestination alloc];
    -[HMDHome uuid](self, "uuid");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v10 = -[HMDRemoteDeviceMessageDestination initWithTarget:device:](v8, "initWithTarget:device:", v9, v7);

    v11 = objc_alloc(MEMORY[0x24BE3F1D0]);
    v25 = CFSTR("HMDH.NetworkClientIdentifierMessageKey");
    v26 = v4;
    objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", &v26, &v25, 1);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    v13 = (void *)objc_msgSend(v11, "initWithName:destination:payload:", CFSTR("HMDHomeRemoveClientConfigurationRequestKey"), v10, v12);

    objc_msgSend(v13, "setSecureRemote:", 1);
    objc_initWeak(location, self);
    v19 = MEMORY[0x24BDAC760];
    v20 = 3221225472;
    v21 = __82__HMDHome_NetworkRouterInternal___requestRemoveClientConfigurationWithIdentifier___block_invoke;
    v22 = &unk_24E798D90;
    objc_copyWeak(&v24, location);
    v23 = v4;
    objc_msgSend(v13, "setResponseHandler:", &v19);
    -[HMDHome msgDispatcher](self, "msgDispatcher", v19, v20, v21, v22);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v14, "sendMessage:completionHandler:", v13, 0);

    objc_destroyWeak(&v24);
    objc_destroyWeak(location);

  }
  else
  {
    v15 = (void *)MEMORY[0x227676638]();
    v16 = self;
    HMFGetOSLogHandle();
    v17 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      LODWORD(location[0]) = 138543362;
      *(id *)((char *)location + 4) = v18;
      _os_log_impl(&dword_2218F0000, v17, OS_LOG_TYPE_ERROR, "%{public}@No primary resident device to request to remove client configuration", (uint8_t *)location, 0xCu);

    }
    objc_autoreleasePoolPop(v15);
  }

}

- (void)_evaluateNetworkProtectionSupport
{
  HMDHome *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t i;
  void *v9;
  void *v10;
  void *v11;
  int v12;
  uint64_t v13;
  void *v14;
  void *v15;
  uint64_t v16;
  void *v17;
  HMDHome *v18;
  void *v19;
  int v20;
  void *v21;
  HMDHome *v22;
  NSObject *v23;
  HMDHome *v24;
  void *v25;
  void *v26;
  _BOOL4 v27;
  void *v28;
  HMDHome *v29;
  NSObject *v30;
  _BOOL4 v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  int v40;
  _BOOL4 v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  void *v46;
  uint64_t v47;
  void *v48;
  void *v49;
  uint64_t v50;
  void *v51;
  void *v52;
  void *v53;
  void *v54;
  void *v55;
  void *v56;
  void *v57;
  void *v58;
  void *v59;
  void *v60;
  int v61;
  void *v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  uint64_t v67;
  void *v68;
  uint64_t v69;
  uint64_t v70;
  _QWORD v71[2];
  uint8_t buf[4];
  void *v73;
  __int16 v74;
  void *v75;
  __int16 v76;
  void *v77;
  __int16 v78;
  void *v79;
  __int16 v80;
  void *v81;
  _BYTE v82[128];
  uint64_t v83;

  v2 = self;
  v83 = *MEMORY[0x24BDAC8D0];
  v63 = 0u;
  v64 = 0u;
  v65 = 0u;
  v66 = 0u;
  -[HMDHome residentDeviceManager](self, "residentDeviceManager");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "residentDevices");
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v63, v82, 16);
  if (v5)
  {
    v6 = v5;
    v7 = *(_QWORD *)v64;
    while (2)
    {
      for (i = 0; i != v6; ++i)
      {
        if (*(_QWORD *)v64 != v7)
          objc_enumerationMutation(v4);
        v9 = *(void **)(*((_QWORD *)&v63 + 1) + 8 * i);
        objc_msgSend(v9, "device");
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        if (objc_msgSend(v9, "isEnabled"))
        {
          objc_msgSend(v9, "capabilities");
          v11 = (void *)objc_claimAutoreleasedReturnValue();
          v12 = objc_msgSend(v11, "supportsRouterManagement");

          if (v12)
          {
            -[HMDHome minimumNetworkRouterSupportHomeKitVersion](v2, "minimumNetworkRouterSupportHomeKitVersion");
            v13 = objc_claimAutoreleasedReturnValue();
            if (!v13)
              goto LABEL_13;
            v14 = (void *)v13;
            objc_msgSend(v10, "version");
            v15 = (void *)objc_claimAutoreleasedReturnValue();
            -[HMDHome minimumNetworkRouterSupportHomeKitVersion](v2, "minimumNetworkRouterSupportHomeKitVersion");
            v16 = v7;
            v17 = v4;
            v18 = v2;
            v19 = (void *)objc_claimAutoreleasedReturnValue();
            v61 = objc_msgSend(v15, "isAtLeastVersion:", v19);

            v2 = v18;
            v4 = v17;
            v7 = v16;

            if (v61)
            {
LABEL_13:
              v21 = (void *)MEMORY[0x227676638]();
              v22 = v2;
              HMFGetOSLogHandle();
              v23 = objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v23, OS_LOG_TYPE_INFO))
              {
                HMFGetLogIdentifier();
                v24 = v2;
                v25 = (void *)objc_claimAutoreleasedReturnValue();
                *(_DWORD *)buf = 138543618;
                v73 = v25;
                v74 = 2112;
                v75 = v9;
                _os_log_impl(&dword_2218F0000, v23, OS_LOG_TYPE_INFO, "%{public}@Found resident with router management support: %@", buf, 0x16u);

                v2 = v24;
              }

              objc_autoreleasePoolPop(v21);
              v20 = 1;
              goto LABEL_16;
            }
          }
        }

      }
      v6 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v63, v82, 16);
      if (v6)
        continue;
      break;
    }
  }
  v20 = 0;
LABEL_16:

  -[HMDHome activeNetworkRouterAccessory](v2, "activeNetworkRouterAccessory");
  v26 = (void *)objc_claimAutoreleasedReturnValue();

  v27 = -[HMDHome _isNetworkRouterSupportEnabledForCurrentDevice](v2, "_isNetworkRouterSupportEnabledForCurrentDevice");
  v28 = (void *)MEMORY[0x227676638]();
  v29 = v2;
  HMFGetOSLogHandle();
  v30 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v30, OS_LOG_TYPE_INFO))
  {
    v31 = v27;
    HMFGetLogIdentifier();
    v32 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHome name](v29, "name");
    v33 = (void *)objc_claimAutoreleasedReturnValue();
    HMFBooleanToString();
    v34 = (void *)objc_claimAutoreleasedReturnValue();
    HMFBooleanToString();
    v35 = (void *)objc_claimAutoreleasedReturnValue();
    HMFBooleanToString();
    v62 = v28;
    v36 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138544386;
    v73 = v32;
    v74 = 2112;
    v75 = v33;
    v76 = 2112;
    v77 = v34;
    v78 = 2112;
    v79 = v35;
    v80 = 2112;
    v81 = v36;
    _os_log_impl(&dword_2218F0000, v30, OS_LOG_TYPE_INFO, "%{public}@Evaluating network protection support for home %@, Router Managing Device: %@, Active Network Router Accessory: %@, Router support enabled: %@", buf, 0x34u);

    v28 = v62;
    v27 = v31;

  }
  objc_autoreleasePoolPop(v28);
  -[HMDHome minHomeKitVersionForAccessoryNetworkProtectionChange](v29, "minHomeKitVersionForAccessoryNetworkProtectionChange");
  v37 = (void *)objc_claimAutoreleasedReturnValue();
  if (v37)
  {
    -[HMDHome minHomeKitVersionForAccessoryNetworkProtectionChange](v29, "minHomeKitVersionForAccessoryNetworkProtectionChange");
    v38 = (void *)objc_claimAutoreleasedReturnValue();
    +[HMDHomeKitVersion currentVersion](HMDHomeKitVersion, "currentVersion");
    v39 = (void *)objc_claimAutoreleasedReturnValue();
    v40 = objc_msgSend(v38, "isGreaterThanVersion:", v39);

  }
  else
  {
    v40 = 0;
  }

  v41 = -[HMDHome isAdminUser](v29, "isAdminUser");
  v42 = 4;
  if (v41)
    v42 = 0;
  if (!v26)
    v42 |= 8uLL;
  v43 = v42 | v20 ^ 1u;
  if (!v27)
    v43 |= 2uLL;
  if (v40)
    v44 = v43 | 0x10;
  else
    v44 = v43;
  if (-[HMDHome networkRouterSupportDisableReason](v29, "networkRouterSupportDisableReason") != v44)
  {
    -[HMDHome setNetworkRouterSupportDisableReason:](v29, "setNetworkRouterSupportDisableReason:", v44);
    -[HMDHome setNetworkRouterSupport:](v29, "setNetworkRouterSupport:", -[HMDHome deriveNetworkRouterSupport:](v29, "deriveNetworkRouterSupport:", v44));
    v45 = (-[HMDHome networkRouterSupport](v29, "networkRouterSupport") >> 2) & 1;
    v46 = (void *)MEMORY[0x24BE3F1D0];
    v47 = *MEMORY[0x24BDD6208];
    -[HMDHome messageDestination](v29, "messageDestination");
    v48 = (void *)objc_claimAutoreleasedReturnValue();
    v69 = *MEMORY[0x24BDD6200];
    objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedInteger:", v44);
    v49 = (void *)objc_claimAutoreleasedReturnValue();
    v71[0] = v49;
    v70 = *MEMORY[0x24BDD5C48];
    v50 = v70;
    objc_msgSend(MEMORY[0x24BDD16E0], "numberWithBool:", v45);
    v51 = (void *)objc_claimAutoreleasedReturnValue();
    v71[1] = v51;
    objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v71, &v69, 2);
    v52 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v46, "messageWithName:destination:payload:", v47, v48, v52);
    v53 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v53, "setRequiresSPIEntitlement");
    -[HMDHome msgDispatcher](v29, "msgDispatcher");
    v54 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v54, "sendMessage:completionHandler:", v53, 0);

    v55 = (void *)MEMORY[0x24BE3F1D0];
    -[HMDHome messageDestination](v29, "messageDestination");
    v56 = (void *)objc_claimAutoreleasedReturnValue();
    v67 = v50;
    objc_msgSend(MEMORY[0x24BDD16E0], "numberWithBool:", v45);
    v57 = (void *)objc_claimAutoreleasedReturnValue();
    v68 = v57;
    objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", &v68, &v67, 1);
    v58 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v55, "messageWithName:destination:payload:", v47, v56, v58);
    v59 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v59, "setRequiresNoSPIEntitlement");
    -[HMDHome msgDispatcher](v29, "msgDispatcher");
    v60 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v60, "sendMessage:completionHandler:", v59, 0);

  }
}

void __82__HMDHome_NetworkRouterInternal___requestRemoveClientConfigurationWithIdentifier___block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id WeakRetained;
  void *v8;
  id v9;
  NSObject *v10;
  NSObject *v11;
  void *v12;
  uint64_t v13;
  const char *v14;
  NSObject *v15;
  os_log_type_t v16;
  uint32_t v17;
  uint64_t v18;
  int v19;
  void *v20;
  __int16 v21;
  uint64_t v22;
  __int16 v23;
  id v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v5 = a2;
  v6 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    v8 = (void *)MEMORY[0x227676638]();
    v9 = WeakRetained;
    HMFGetOSLogHandle();
    v10 = objc_claimAutoreleasedReturnValue();
    v11 = v10;
    if (v5)
    {
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v12 = (void *)objc_claimAutoreleasedReturnValue();
        v13 = *(_QWORD *)(a1 + 32);
        v19 = 138543874;
        v20 = v12;
        v21 = 2112;
        v22 = v13;
        v23 = 2112;
        v24 = v5;
        v14 = "%{public}@Request to remove client configuration %@ failed with error: %@";
        v15 = v11;
        v16 = OS_LOG_TYPE_ERROR;
        v17 = 32;
LABEL_7:
        _os_log_impl(&dword_2218F0000, v15, v16, v14, (uint8_t *)&v19, v17);

      }
    }
    else if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      v18 = *(_QWORD *)(a1 + 32);
      v19 = 138543618;
      v20 = v12;
      v21 = 2112;
      v22 = v18;
      v14 = "%{public}@Request remove client configuration %@ successful";
      v15 = v11;
      v16 = OS_LOG_TYPE_INFO;
      v17 = 22;
      goto LABEL_7;
    }

    objc_autoreleasePoolPop(v8);
  }

}

void __86__HMDHome_NetworkRouterInternal___removeClientConfigurationWithIdentifier_completion___block_invoke(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  NSObject *v6;
  NSObject *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(void);
  void *v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  void *v16;
  __int16 v17;
  uint64_t v18;
  __int16 v19;
  id v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  v3 = a2;
  v4 = (void *)MEMORY[0x227676638]();
  v5 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v6 = objc_claimAutoreleasedReturnValue();
  v7 = v6;
  if (v3)
  {
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      v9 = *(_QWORD *)(a1 + 40);
      v15 = 138543874;
      v16 = v8;
      v17 = 2112;
      v18 = v9;
      v19 = 2112;
      v20 = v3;
      _os_log_impl(&dword_2218F0000, v7, OS_LOG_TYPE_ERROR, "%{public}@Failed to remove client configuration %@ due to error %@", (uint8_t *)&v15, 0x20u);

    }
    objc_autoreleasePoolPop(v4);
    v10 = *(_QWORD *)(a1 + 48);
    if (v10)
    {
      v11 = *(void (**)(void))(v10 + 16);
LABEL_10:
      v11();
    }
  }
  else
  {
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      v13 = *(_QWORD *)(a1 + 40);
      v15 = 138543618;
      v16 = v12;
      v17 = 2112;
      v18 = v13;
      _os_log_impl(&dword_2218F0000, v7, OS_LOG_TYPE_INFO, "%{public}@Removed client configuration %@ successfully", (uint8_t *)&v15, 0x16u);

    }
    objc_autoreleasePoolPop(v4);
    v14 = *(_QWORD *)(a1 + 48);
    if (v14)
    {
      v11 = *(void (**)(void))(v14 + 16);
      goto LABEL_10;
    }
  }

}

void __85__HMDHome_NetworkRouterInternal___requestUniquePSKClientConfigurationWithCompletion___block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id WeakRetained;
  void *v8;
  id v9;
  NSObject *v10;
  void *v11;
  void *v12;
  void *v13;
  id v14;
  void *v15;
  void *v16;
  void *v17;
  id v18;
  NSObject *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  HMDAccessoryNetworkCredential *v24;
  void *v25;
  id v26;
  NSObject *v27;
  void *v28;
  void *v29;
  uint64_t v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  uint8_t buf[4];
  void *v36;
  __int16 v37;
  id v38;
  __int16 v39;
  void *v40;
  __int16 v41;
  void *v42;
  uint64_t v43;

  v43 = *MEMORY[0x24BDAC8D0];
  v5 = a2;
  v6 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    if (v5)
    {
      v8 = (void *)MEMORY[0x227676638]();
      v9 = WeakRetained;
      HMFGetOSLogHandle();
      v10 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        v36 = v11;
        v37 = 2112;
        v38 = v5;
        _os_log_impl(&dword_2218F0000, v10, OS_LOG_TYPE_ERROR, "%{public}@Request for unique PSK failed with error: %@", buf, 0x16u);

      }
      objc_autoreleasePoolPop(v8);
      (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
    }
    else
    {
      objc_msgSend(v6, "hmf_dataForKey:", CFSTR("HMDH.UniquePSKMessageKey"));
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v6, "hmf_numberForKey:", CFSTR("HMDH.NetworkClientIdentifierMessageKey"));
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      v14 = objc_alloc(MEMORY[0x24BDD1880]);
      objc_msgSend(v6, "hmf_stringForKey:", CFSTR("HMDH.NetworkRouterUUIDMessageKey"));
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      v16 = (void *)objc_msgSend(v14, "initWithUUIDString:", v15);

      v17 = (void *)MEMORY[0x227676638]();
      v18 = WeakRetained;
      HMFGetOSLogHandle();
      v19 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v19, OS_LOG_TYPE_DEBUG))
      {
        HMFGetLogIdentifier();
        v31 = v17;
        v20 = v13;
        v21 = (void *)objc_claimAutoreleasedReturnValue();
        HMFBooleanToString();
        v32 = v12;
        v22 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v16, "UUIDString");
        v33 = v16;
        v23 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138544130;
        v36 = v21;
        v37 = 2112;
        v38 = v22;
        v39 = 2112;
        v40 = v20;
        v41 = 2112;
        v42 = v23;
        _os_log_impl(&dword_2218F0000, v19, OS_LOG_TYPE_DEBUG, "%{public}@Request for unique PSK results successful. PSK: %@, Client Identifier: %@, Network Router UUID: %@", buf, 0x2Au);

        v16 = v33;
        v12 = v32;

        v13 = v20;
        v17 = v31;
      }

      objc_autoreleasePoolPop(v17);
      if (v12 && v13 && v16)
      {
        v24 = -[HMDAccessoryNetworkCredential initWithNetworkRouterUUID:clientIdentifier:wiFiPSK:]([HMDAccessoryNetworkCredential alloc], "initWithNetworkRouterUUID:clientIdentifier:wiFiPSK:", v16, v13, v12);
        (*(void (**)(_QWORD, HMDAccessoryNetworkCredential *, _QWORD))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), v24, 0);
      }
      else
      {
        v25 = (void *)MEMORY[0x227676638]();
        v26 = v18;
        HMFGetOSLogHandle();
        v27 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
        {
          HMFGetLogIdentifier();
          v34 = v16;
          v28 = v13;
          v29 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543362;
          v36 = v29;
          _os_log_impl(&dword_2218F0000, v27, OS_LOG_TYPE_ERROR, "%{public}@Missing info in response", buf, 0xCu);

          v13 = v28;
          v16 = v34;
        }

        objc_autoreleasePoolPop(v25);
        v30 = *(_QWORD *)(a1 + 32);
        objc_msgSend(MEMORY[0x24BDD1540], "hmErrorWithCode:", -1);
        v24 = (HMDAccessoryNetworkCredential *)objc_claimAutoreleasedReturnValue();
        (*(void (**)(uint64_t, _QWORD, HMDAccessoryNetworkCredential *))(v30 + 16))(v30, 0, v24);
      }

    }
  }

}

void __112__HMDHome_NetworkRouterInternal___createUniquePSKClientConfigurationWithRequestMessage_pairingEvent_completion___block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id WeakRetained;
  uint64_t v7;
  void *v8;
  void *v9;
  void *v10;
  id v11;

  v11 = a2;
  v5 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  if (WeakRetained)
  {
    v7 = *(_QWORD *)(a1 + 48);
    if (v5)
    {
      objc_msgSend(MEMORY[0x24BDD1540], "hmErrorWithCode:description:reason:suggestion:underlyingError:", 98, 0, 0, 0, v5);
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      (*(void (**)(uint64_t, id, void *))(v7 + 16))(v7, v11, v8);

    }
    else
    {
      (*(void (**)(uint64_t, id, _QWORD))(v7 + 16))(v7, v11, 0);
    }
  }
  else
  {
    objc_msgSend(MEMORY[0x24BDD1540], "hmErrorWithCode:", 2);
    v9 = (void *)objc_claimAutoreleasedReturnValue();

    if (*(_QWORD *)(a1 + 32))
    {
      +[HMDMetricsManager sharedLogEventSubmitter](HMDMetricsManager, "sharedLogEventSubmitter");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v10, "submitLogEvent:error:", *(_QWORD *)(a1 + 32), v9);

    }
    objc_msgSend(*(id *)(a1 + 40), "respondWithError:", v9);

  }
}

void __76__HMDHome_NetworkRouterInternal___scheduleApplyNetworkRouterSettingsAction___block_invoke(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  uint64_t v5;
  id v6;
  _QWORD v7[4];
  id v8;
  uint64_t v9;

  v3 = a2;
  objc_msgSend(*(id *)(a1 + 32), "workQueue");
  v4 = objc_claimAutoreleasedReturnValue();
  v7[0] = MEMORY[0x24BDAC760];
  v7[1] = 3221225472;
  v7[2] = __76__HMDHome_NetworkRouterInternal___scheduleApplyNetworkRouterSettingsAction___block_invoke_2;
  v7[3] = &unk_24E79C268;
  v5 = *(_QWORD *)(a1 + 32);
  v8 = v3;
  v9 = v5;
  v6 = v3;
  dispatch_async(v4, v7);

}

void __76__HMDHome_NetworkRouterInternal___scheduleApplyNetworkRouterSettingsAction___block_invoke_2(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  id v6;

  objc_msgSend(*(id *)(a1 + 32), "userInfo");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "objectForKeyedSubscript:", CFSTR("EvaluateRouterManagement"));
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  if (v3)
    objc_msgSend(*(id *)(a1 + 40), "_evaluateNetworkProtectionAndRouterManagement");
  objc_msgSend(*(id *)(a1 + 32), "userInfo");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "objectForKeyedSubscript:", CFSTR("NetworkProtectionModeChanged"));
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  if (v5)
  {
    objc_msgSend(MEMORY[0x24BDD16D0], "defaultCenter");
    v6 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "postNotificationName:object:", CFSTR("HMDHomeNetworkProtectionUpdatedNotificationKey"), *(_QWORD *)(a1 + 40));

  }
}

void __94__HMDHome_NetworkRouterInternal__handleAccessoryDidRemoveNetworkRouterControllerNotification___block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  id v5;
  void *v6;
  char v7;
  void *v8;
  id v9;
  NSObject *v10;
  _BOOL4 v11;
  void *v12;
  void *v13;
  int v14;
  void *v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  objc_msgSend(*(id *)(a1 + 32), "userInfo");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "objectForKeyedSubscript:", CFSTR("HMDNetworkRouterAccessoryNotificationKey"));
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v4 = v3;
  else
    v4 = 0;
  v5 = v4;

  if (!v5)
    _HMFPreconditionFailure();
  objc_msgSend(*(id *)(a1 + 40), "activeNetworkRouterAccessory");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = objc_msgSend(v6, "isEqual:", v5);
  v8 = (void *)MEMORY[0x227676638]();
  v9 = *(id *)(a1 + 40);
  HMFGetOSLogHandle();
  v10 = objc_claimAutoreleasedReturnValue();
  v11 = os_log_type_enabled(v10, OS_LOG_TYPE_INFO);
  if ((v7 & 1) != 0)
  {
    if (v11)
    {
      HMFGetLogIdentifier();
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      v14 = 138543362;
      v15 = v12;
      _os_log_impl(&dword_2218F0000, v10, OS_LOG_TYPE_INFO, "%{public}@Removed network router profile for active network router accessory", (uint8_t *)&v14, 0xCu);

    }
    objc_autoreleasePoolPop(v8);
    objc_msgSend(*(id *)(a1 + 40), "_addTransactionForActiveNetworkRouterAccessory:isReplacement:", 0, 0);
  }
  else
  {
    if (v11)
    {
      HMFGetLogIdentifier();
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      v14 = 138543362;
      v15 = v13;
      _os_log_impl(&dword_2218F0000, v10, OS_LOG_TYPE_INFO, "%{public}@Removed network router profile for non-active network router accessory", (uint8_t *)&v14, 0xCu);

    }
    objc_autoreleasePoolPop(v8);
  }

}

void __91__HMDHome_NetworkRouterInternal__handleAccessoryDidAddNetworkRouterControllerNotification___block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  id v5;
  void *v6;
  void *v7;
  char v8;
  void *v9;
  id v10;
  NSObject *v11;
  _BOOL4 v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  int v18;
  void *v19;
  __int16 v20;
  void *v21;
  __int16 v22;
  void *v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  objc_msgSend(*(id *)(a1 + 32), "userInfo");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "objectForKeyedSubscript:", CFSTR("HMDNetworkRouterAccessoryNotificationKey"));
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v4 = v3;
  else
    v4 = 0;
  v5 = v4;

  if (!v5)
    _HMFPreconditionFailure();
  objc_msgSend(v5, "uuid");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 40), "activeNetworkRouterUUID");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = objc_msgSend(v6, "isEqual:", v7);

  v9 = (void *)MEMORY[0x227676638]();
  v10 = *(id *)(a1 + 40);
  HMFGetOSLogHandle();
  v11 = objc_claimAutoreleasedReturnValue();
  v12 = os_log_type_enabled(v11, OS_LOG_TYPE_INFO);
  if ((v8 & 1) != 0)
  {
    if (v12)
    {
      HMFGetLogIdentifier();
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v5, "uuid");
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      v18 = 138543618;
      v19 = v13;
      v20 = 2112;
      v21 = v14;
      _os_log_impl(&dword_2218F0000, v11, OS_LOG_TYPE_INFO, "%{public}@Added network router controller is for active network router accessory %@", (uint8_t *)&v18, 0x16u);

    }
    objc_autoreleasePoolPop(v9);
    objc_msgSend(*(id *)(a1 + 40), "_evaluateNetworkProtectionAndRouterManagement");
  }
  else
  {
    if (v12)
    {
      HMFGetLogIdentifier();
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v5, "uuid");
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(*(id *)(a1 + 40), "activeNetworkRouterUUID");
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      v18 = 138543874;
      v19 = v15;
      v20 = 2112;
      v21 = v16;
      v22 = 2112;
      v23 = v17;
      _os_log_impl(&dword_2218F0000, v11, OS_LOG_TYPE_INFO, "%{public}@Ignoring added network router controller for accessory %@ since it is not for the active network router accessory %@", (uint8_t *)&v18, 0x20u);

    }
    objc_autoreleasePoolPop(v9);
  }

}

void __71__HMDHome_NetworkRouterInternal___configureNetworkRouterClientManager___block_invoke(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  NSObject *v6;
  void *v7;
  void *v8;
  int v9;
  void *v10;
  __int16 v11;
  id v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v3 = a2;
  if (v3)
  {
    v4 = (void *)MEMORY[0x227676638]();
    v5 = *(id *)(a1 + 32);
    HMFGetOSLogHandle();
    v6 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      v9 = 138543618;
      v10 = v7;
      v11 = 2112;
      v12 = v3;
      _os_log_impl(&dword_2218F0000, v6, OS_LOG_TYPE_ERROR, "%{public}@Firewall rule manager failed to start with error %@", (uint8_t *)&v9, 0x16u);

    }
    objc_autoreleasePoolPop(v4);
  }
  else
  {
    objc_msgSend(*(id *)(a1 + 32), "routerClientManager");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "evaluateManagement");

  }
}

void __71__HMDHome_NetworkRouterInternal___configureNetworkRouterClientManager___block_invoke_67(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  NSObject *v6;
  void *v7;
  int v8;
  void *v9;
  __int16 v10;
  id v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v3 = a2;
  v4 = (void *)MEMORY[0x227676638]();
  v5 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v6 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = 138543618;
    v9 = v7;
    v10 = 2112;
    v11 = v3;
    _os_log_impl(&dword_2218F0000, v6, OS_LOG_TYPE_INFO, "%{public}@Confirming primary resident with active network router in the home completed with %@", (uint8_t *)&v8, 0x16u);

  }
  objc_autoreleasePoolPop(v4);

}

uint64_t __67__HMDHome_NetworkRouterInternal___handleRemoveClientConfiguration___block_invoke(uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)(a1 + 32);
  if (a2)
    return objc_msgSend(v2, "respondWithError:", a2);
  else
    return objc_msgSend(v2, "respondWithPayload:", 0);
}

void __76__HMDHome_NetworkRouterInternal___handleCreateUniquePSKClientConfiguration___block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  id v8;
  NSObject *v9;
  NSObject *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  _QWORD v22[3];
  _QWORD v23[3];
  uint8_t buf[4];
  void *v25;
  __int16 v26;
  id v27;
  __int16 v28;
  void *v29;
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  v5 = a2;
  v6 = a3;
  v7 = (void *)MEMORY[0x227676638]();
  v8 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v9 = objc_claimAutoreleasedReturnValue();
  v10 = v9;
  if (v6)
  {
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v25 = v11;
      v26 = 2112;
      v27 = v6;
      _os_log_impl(&dword_2218F0000, v10, OS_LOG_TYPE_ERROR, "%{public}@Failed to create a unique PSK client configuration with error: %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v7);
    objc_msgSend(*(id *)(a1 + 40), "respondWithError:", v6);
  }
  else
  {
    if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v5, "clientIdentifier");
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v5, "networkRouterUUID");
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v14, "UUIDString");
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543874;
      v25 = v12;
      v26 = 2112;
      v27 = v13;
      v28 = 2112;
      v29 = v15;
      _os_log_impl(&dword_2218F0000, v10, OS_LOG_TYPE_INFO, "%{public}@Created unique PSK client configuration with client identifier %@ on network router %@ for remote request", buf, 0x20u);

    }
    objc_autoreleasePoolPop(v7);
    v16 = *(void **)(a1 + 40);
    objc_msgSend(v5, "clientIdentifier", CFSTR("HMDH.NetworkClientIdentifierMessageKey"));
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    v23[0] = v17;
    v22[1] = CFSTR("HMDH.UniquePSKMessageKey");
    objc_msgSend(v5, "wiFiPSK");
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    v23[1] = v18;
    v22[2] = CFSTR("HMDH.NetworkRouterUUIDMessageKey");
    objc_msgSend(v5, "networkRouterUUID");
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v19, "UUIDString");
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    v23[2] = v20;
    objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v23, v22, 3);
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v16, "respondWithPayload:", v21);

  }
}

void __76__HMDHome_NetworkRouterInternal___addTransactionWithProtectionMode_message___block_invoke(uint64_t a1, uint64_t a2)
{
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  _QWORD v6[2];

  v6[1] = *MEMORY[0x24BDAC8D0];
  v2 = *(void **)(a1 + 32);
  if (a2)
  {
    objc_msgSend(*(id *)(a1 + 32), "respondWithError:", a2);
  }
  else
  {
    v5 = *MEMORY[0x24BDD7CA0];
    objc_msgSend(MEMORY[0x24BDD16E0], "numberWithInteger:", objc_msgSend(*(id *)(a1 + 40), "protectionMode"));
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    v6[0] = v3;
    objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v6, &v5, 1);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "respondWithPayload:", v4);

  }
}

- (id)_currentDeviceCapabilities
{
  return +[HMDDeviceCapabilities deviceCapabilities](HMDDeviceCapabilities, "deviceCapabilities");
}

- (BOOL)_isNetworkRouterSupportEnabledForCurrentDevice
{
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  int v7;
  void *v8;
  HMDHome *v9;
  NSObject *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  uint64_t v16;
  void *v17;
  void *v18;
  void *v19;
  unint64_t v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  BOOL v25;
  void *v26;
  void *v27;
  int v29;
  void *v30;
  __int16 v31;
  void *v32;
  __int16 v33;
  void *v34;
  uint64_t v35;

  v35 = *MEMORY[0x24BDAC8D0];
  +[HMDHomeKitVersion currentVersion](HMDHomeKitVersion, "currentVersion");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHome minimumNetworkRouterSupportHomeKitVersion](self, "minimumNetworkRouterSupportHomeKitVersion");
  v4 = objc_claimAutoreleasedReturnValue();
  if (v4)
  {
    v5 = (void *)v4;
    -[HMDHome minimumNetworkRouterSupportHomeKitVersion](self, "minimumNetworkRouterSupportHomeKitVersion");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v7 = objc_msgSend(v6, "isGreaterThanVersion:", v3);

    if (v7)
    {
      v8 = (void *)MEMORY[0x227676638]();
      v9 = self;
      HMFGetOSLogHandle();
      v10 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        -[HMDHome minimumNetworkRouterSupportHomeKitVersion](v9, "minimumNetworkRouterSupportHomeKitVersion");
        v12 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v12, "versionString");
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v3, "versionString");
        v14 = (void *)objc_claimAutoreleasedReturnValue();
        v29 = 138543874;
        v30 = v11;
        v31 = 2112;
        v32 = v13;
        v33 = 2112;
        v34 = v14;
        _os_log_impl(&dword_2218F0000, v10, OS_LOG_TYPE_INFO, "%{public}@Network router support requires minimum HomeKit version of %@ - current %@; disabling",
          (uint8_t *)&v29,
          0x20u);

LABEL_9:
        goto LABEL_10;
      }
      goto LABEL_10;
    }
  }
  -[HMDHome activeNetworkRouterAccessory](self, "activeNetworkRouterAccessory");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v15, "primaryProfileVersion");
  v16 = objc_claimAutoreleasedReturnValue();
  if (v16)
  {
    v17 = (void *)v16;
    -[HMDHome activeNetworkRouterAccessory](self, "activeNetworkRouterAccessory");
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v18, "primaryProfileVersion");
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    v20 = objc_msgSend(v19, "majorVersion");

    if (v20 >= 2)
    {
      v8 = (void *)MEMORY[0x227676638]();
      v9 = self;
      HMFGetOSLogHandle();
      v10 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        v21 = (void *)MEMORY[0x24BDD16E0];
        -[HMDHome activeNetworkRouterAccessory](v9, "activeNetworkRouterAccessory");
        v22 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v22, "primaryProfileVersion");
        v23 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v21, "numberWithUnsignedInteger:", objc_msgSend(v23, "majorVersion"));
        v24 = (void *)objc_claimAutoreleasedReturnValue();
        v29 = 138543874;
        v30 = v11;
        v31 = 2112;
        v32 = v24;
        v33 = 2112;
        v34 = &unk_24E96C0E0;
        _os_log_impl(&dword_2218F0000, v10, OS_LOG_TYPE_INFO, "%{public}@Network router major version %@ not supported on this device - only supports up to major version %@; disabling",
          (uint8_t *)&v29,
          0x20u);

        goto LABEL_9;
      }
LABEL_10:

      objc_autoreleasePoolPop(v8);
      v25 = 0;
      goto LABEL_17;
    }
  }
  else
  {

  }
  objc_msgSend(MEMORY[0x24BE3F248], "sharedPreferences");
  v26 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v26, "preferenceForKey:", CFSTR("enableNetworkRouterSupport"));
  v27 = (void *)objc_claimAutoreleasedReturnValue();

  v25 = !v27 || objc_msgSend(v27, "BOOLValue");
LABEL_17:

  return v25;
}

- (BOOL)supportsRouterManagement
{
  void *v3;
  char v4;

  if (!-[HMDHome _isNetworkRouterSupportEnabledForCurrentDevice](self, "_isNetworkRouterSupportEnabledForCurrentDevice")|| !-[HMDHome isOwnerUser](self, "isOwnerUser"))
  {
    return 0;
  }
  -[HMDHome _currentDeviceCapabilities](self, "_currentDeviceCapabilities");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "supportsRouterManagement");

  return v4;
}

- (NSArray)wiFiRouterAccessories
{
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  void *v10;
  id v11;
  void *v12;
  void *v13;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  _BYTE v19[128];
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  objc_msgSend(MEMORY[0x24BDBCEB8], "arrayWithCapacity:", 1);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v15 = 0u;
  v16 = 0u;
  v17 = 0u;
  v18 = 0u;
  -[HMDHome accessories](self, "accessories", 0);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v15, v19, 16);
  if (v5)
  {
    v6 = v5;
    v7 = *(_QWORD *)v16;
    do
    {
      v8 = 0;
      do
      {
        if (*(_QWORD *)v16 != v7)
          objc_enumerationMutation(v4);
        v9 = *(id *)(*((_QWORD *)&v15 + 1) + 8 * v8);
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0)
          v10 = v9;
        else
          v10 = 0;
        v11 = v10;

        objc_msgSend(v11, "networkRouterController");
        v12 = (void *)objc_claimAutoreleasedReturnValue();

        if (v12)
          objc_msgSend(v3, "addObject:", v11);

        ++v8;
      }
      while (v6 != v8);
      v6 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v15, v19, 16);
    }
    while (v6);
  }

  v13 = (void *)objc_msgSend(v3, "copy");
  return (NSArray *)v13;
}

- (HMDHAPAccessory)activeNetworkRouterAccessory
{
  void *v3;
  void *v4;
  id v5;
  void *v6;
  HMDHAPAccessory *v7;

  -[HMDHome activeNetworkRouterUUID](self, "activeNetworkRouterUUID");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHome accessoryWithUUID:](self, "accessoryWithUUID:", v3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  v5 = v4;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v6 = v5;
  else
    v6 = 0;
  v7 = v6;

  return v7;
}

- (BOOL)checkForNetworkRouterSupport:(unint64_t)a3 error:(id *)a4
{
  char v5;
  char v6;
  BOOL result;
  uint64_t v8;
  id v9;

  v5 = a3;
  v6 = -[HMDHome networkRouterSupportDisableReason](self, "networkRouterSupportDisableReason");
  if ((v5 & 4) != 0)
  {
    if ((v6 & 4) != 0)
      goto LABEL_16;
    if ((v6 & 2) != 0)
      goto LABEL_22;
    if ((v6 & 1) != 0)
      goto LABEL_14;
  }
  if ((v5 & 3) == 0)
    goto LABEL_7;
  if ((v6 & 4) == 0)
  {
    if ((v6 & 8) != 0 || (v6 & 2) != 0)
      goto LABEL_22;
    if ((v6 & 1) != 0)
      goto LABEL_14;
LABEL_7:
    if ((v5 & 2) == 0 || (v6 & 0x10) == 0)
    {
      if ((v5 & 8) == 0)
        return 1;
      if ((v6 & 8) == 0 && (v6 & 2) == 0)
      {
        if ((v6 & 1) == 0)
          return 1;
LABEL_14:
        if (a4)
        {
          v8 = 92;
LABEL_24:
          objc_msgSend(MEMORY[0x24BDD1540], "hmErrorWithCode:", v8);
          v9 = (id)objc_claimAutoreleasedReturnValue();
          result = 0;
          *a4 = v9;
          return result;
        }
        return 0;
      }
    }
LABEL_22:
    if (a4)
    {
      v8 = 48;
      goto LABEL_24;
    }
    return 0;
  }
LABEL_16:
  if (a4)
  {
    v8 = 17;
    goto LABEL_24;
  }
  return 0;
}

- (void)_notifyRemoteUsersOfChangedActionSetResponses:(id)a3
{
  id v4;
  NSObject *v5;
  void *v6;
  HMDHome *v7;
  NSObject *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  id v14;
  HMDHome *v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t i;
  uint64_t v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  HMDHome *v26;
  NSObject *v27;
  void *v28;
  __int128 v29;
  id v30;
  void *v31;
  HMDHome *v32;
  void *v33;
  uint64_t v34;
  id obj;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  uint8_t buf[4];
  void *v41;
  __int16 v42;
  uint64_t v43;
  __int16 v44;
  void *v45;
  _BYTE v46[128];
  uint64_t v47;

  v47 = *MEMORY[0x24BDAC8D0];
  v4 = a3;
  if (_os_feature_enabled_impl())
  {
    -[HMDHome workQueue](self, "workQueue");
    v5 = objc_claimAutoreleasedReturnValue();
    dispatch_assert_queue_V2(v5);

    v6 = (void *)MEMORY[0x227676638]();
    v7 = self;
    HMFGetOSLogHandle();
    v8 = objc_claimAutoreleasedReturnValue();
    v32 = v7;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v41 = v9;
      _os_log_impl(&dword_2218F0000, v8, OS_LOG_TYPE_INFO, "%{public}@Notifying users registered with resident of changes in action sets", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v6);
    -[HMDHome notificationRegistry](v7, "notificationRegistry");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "destinationsRegisteredForNotificationsForActionSetResponses:", v4);
    v11 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(MEMORY[0x24BDBCEF0], "set");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD1880], "UUID");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "UUIDString");
    v33 = (void *)objc_claimAutoreleasedReturnValue();

    v38 = 0u;
    v39 = 0u;
    v36 = 0u;
    v37 = 0u;
    v14 = v11;
    v15 = v7;
    obj = v14;
    v16 = objc_msgSend(v14, "countByEnumeratingWithState:objects:count:", &v36, v46, 16);
    if (v16)
    {
      v18 = v16;
      v19 = *(_QWORD *)v37;
      *(_QWORD *)&v17 = 138543874;
      v29 = v17;
      v30 = v4;
      v31 = v12;
      v34 = *(_QWORD *)v37;
      do
      {
        for (i = 0; i != v18; ++i)
        {
          if (*(_QWORD *)v37 != v19)
            objc_enumerationMutation(obj);
          v21 = *(_QWORD *)(*((_QWORD *)&v36 + 1) + 8 * i);
          +[HMDDevice deviceWithDestination:](HMDDevice, "deviceWithDestination:", v21, v29);
          v22 = (void *)objc_claimAutoreleasedReturnValue();
          if (v22)
          {
            objc_msgSend(v12, "addObject:", v22);
            if (-[HMDHome _shouldSendToDestination:device:remoteSourceDevice:](v15, "_shouldSendToDestination:device:remoteSourceDevice:", v21, v22, 0))
            {
              -[HMDHome notificationRegistry](v15, "notificationRegistry");
              v23 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v23, "filterActionSetResponses:deviceIdsDestination:", v4, v21);
              v24 = (void *)objc_claimAutoreleasedReturnValue();

              if (objc_msgSend(v24, "count"))
              {
                v25 = (void *)MEMORY[0x227676638]();
                v26 = v15;
                HMFGetOSLogHandle();
                v27 = objc_claimAutoreleasedReturnValue();
                if (os_log_type_enabled(v27, OS_LOG_TYPE_INFO))
                {
                  HMFGetLogIdentifier();
                  v28 = (void *)objc_claimAutoreleasedReturnValue();
                  *(_DWORD *)buf = v29;
                  v41 = v28;
                  v42 = 2112;
                  v43 = v21;
                  v44 = 2112;
                  v45 = v33;
                  _os_log_impl(&dword_2218F0000, v27, OS_LOG_TYPE_INFO, "%{public}@Fanning out to device %@ with the action sets that changed with notificationUpdateIdentifier: %@", buf, 0x20u);

                  v4 = v30;
                }

                objc_autoreleasePoolPop(v25);
                -[HMDHome _notifyChangedActionSetResponses:notificationUpdateIdentifier:toUserDeviceAddress:](v26, "_notifyChangedActionSetResponses:notificationUpdateIdentifier:toUserDeviceAddress:", v24, v33, v21);
                v12 = v31;
                v15 = v32;
              }

              v19 = v34;
            }
          }

        }
        v18 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v36, v46, 16);
      }
      while (v18);
    }

  }
}

- (void)_notifyChangedActionSetResponses:(id)a3 notificationUpdateIdentifier:(id)a4 toUserDeviceAddress:(id)a5
{
  id v8;
  id v9;
  id v10;
  NSObject *v11;
  void *v12;
  HMDDeviceNotificationHandler *v13;
  void *v14;
  void *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t i;
  void *v20;
  char v21;
  HMDDeviceNotificationHandler *v22;
  void *v23;
  void *v24;
  void *v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  _BYTE v30[128];
  uint64_t v31;

  v31 = *MEMORY[0x24BDAC8D0];
  v8 = a3;
  v9 = a4;
  v10 = a5;
  if (_os_feature_enabled_impl())
  {
    -[HMDHome workQueue](self, "workQueue");
    v11 = objc_claimAutoreleasedReturnValue();
    dispatch_assert_queue_V2(v11);

    if (v10)
    {
      -[HMDHome notificationHandlerMap](self, "notificationHandlerMap");
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v12, "objectForKey:", v10);
      v13 = (HMDDeviceNotificationHandler *)objc_claimAutoreleasedReturnValue();

      if (!v13)
      {
        -[HMDHome homeManager](self, "homeManager");
        v14 = (void *)objc_claimAutoreleasedReturnValue();
        v26 = 0u;
        v27 = 0u;
        v28 = 0u;
        v29 = 0u;
        objc_msgSend(v14, "watchManager");
        v15 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v15, "connectedWatches");
        v16 = (void *)objc_claimAutoreleasedReturnValue();

        v17 = objc_msgSend(v16, "countByEnumeratingWithState:objects:count:", &v26, v30, 16);
        if (v17)
        {
          v25 = v14;
          v18 = *(_QWORD *)v27;
          while (2)
          {
            for (i = 0; i != v17; ++i)
            {
              if (*(_QWORD *)v27 != v18)
                objc_enumerationMutation(v16);
              objc_msgSend(*(id *)(*((_QWORD *)&v26 + 1) + 8 * i), "remoteDestinationString");
              v20 = (void *)objc_claimAutoreleasedReturnValue();
              v21 = objc_msgSend(v20, "isEqual:", v10);

              if ((v21 & 1) != 0)
              {
                v17 = 1;
                goto LABEL_14;
              }
            }
            v17 = objc_msgSend(v16, "countByEnumeratingWithState:objects:count:", &v26, v30, 16);
            if (v17)
              continue;
            break;
          }
LABEL_14:
          v14 = v25;
        }

        v22 = [HMDDeviceNotificationHandler alloc];
        -[HMDHome msgDispatcher](self, "msgDispatcher");
        v23 = (void *)objc_claimAutoreleasedReturnValue();
        v13 = -[HMDDeviceNotificationHandler initWithDestination:watchDevice:withRequestIdentifier:messageDispatcher:home:](v22, "initWithDestination:watchDevice:withRequestIdentifier:messageDispatcher:home:", v10, v17, 0, v23, self);

        -[HMDHome notificationHandlerMap](self, "notificationHandlerMap");
        v24 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v24, "setObject:forKey:", v13, v10);

      }
      -[HMDDeviceNotificationHandler sendNotificationForActionSetResponses:notificationUpdateIdentifier:](v13, "sendNotificationForActionSetResponses:notificationUpdateIdentifier:", v8, v9);

    }
  }

}

- (void)actionSetStateDidChangeForActionSet:(id)a3 currentActiveState:(BOOL)a4 stateObserver:(id)a5
{
  id v8;
  id v9;
  void *v10;
  HMDHome *v11;
  NSObject *v12;
  void *v13;
  NSObject *v14;
  id v15;
  _QWORD block[5];
  id v17;
  BOOL v18;
  uint8_t buf[4];
  void *v20;
  __int16 v21;
  id v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  v8 = a3;
  v9 = a5;
  v10 = (void *)MEMORY[0x227676638]();
  v11 = self;
  HMFGetOSLogHandle();
  v12 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543618;
    v20 = v13;
    v21 = 2112;
    v22 = v8;
    _os_log_impl(&dword_2218F0000, v12, OS_LOG_TYPE_INFO, "%{public}@Detected Action Set State Change %@", buf, 0x16u);

  }
  objc_autoreleasePoolPop(v10);
  -[HMDHome workQueue](v11, "workQueue");
  v14 = objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x24BDAC760];
  block[1] = 3221225472;
  block[2] = __117__HMDHome_HMDActionSetStateObserverDataSource__actionSetStateDidChangeForActionSet_currentActiveState_stateObserver___block_invoke;
  block[3] = &unk_24E799CF0;
  block[4] = v11;
  v17 = v8;
  v18 = a4;
  v15 = v8;
  dispatch_async(v14, block);

}

- (id)mediaProfileForAccessoryUUID:(id)a3 stateObserver:(id)a4
{
  void *v4;
  void *v5;
  id v6;
  void *v7;

  -[HMDHome accessoryWithUUID:](self, "accessoryWithUUID:", a3, a4);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v5 = v4;
  else
    v5 = 0;
  v6 = v5;
  objc_msgSend(v6, "mediaProfile");
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  return v7;
}

- (id)actionSetsUUIDsForStateObserver:(id)a3
{
  void *v3;
  void *v4;

  -[HMDHome actionSets](self, "actionSets", a3);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "na_map:", &__block_literal_global_181078);
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  return v4;
}

- (void)startMonitoringMediaStateForAppleMediaAccessoryUUID:(id)a3 stateObserver:(id)a4
{
  int v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;
  void *v10;
  id v11;

  v11 = a3;
  v5 = _os_feature_enabled_impl();
  v6 = v11;
  if (v5)
  {
    -[HMDHome accessoryWithUUID:](self, "accessoryWithUUID:", v11);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
      v8 = v7;
    else
      v8 = 0;
    v9 = v8;

    if (v9)
    {
      -[HMDHome mediaStateSubscriber](self, "mediaStateSubscriber");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v10, "subscribeForAppleMediaStateForAccessory:subscriptionToken:", v9, CFSTR("com.apple.HomeKitDaemon.ActionSetStateObserver"));

    }
    v6 = v11;
  }

}

- (void)stopMonitoringMediaStateForAppleMediaAccessoryUUID:(id)a3 stateObserver:(id)a4
{
  int v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;
  void *v10;
  id v11;

  v11 = a3;
  v5 = _os_feature_enabled_impl();
  v6 = v11;
  if (v5)
  {
    -[HMDHome accessoryWithUUID:](self, "accessoryWithUUID:", v11);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
      v8 = v7;
    else
      v8 = 0;
    v9 = v8;

    if (v9)
    {
      -[HMDHome mediaStateSubscriber](self, "mediaStateSubscriber");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v10, "unsubscribeForAppleMediaStateForAccessory:subscriptionToken:", v9, CFSTR("com.apple.HomeKitDaemon.ActionSetStateObserver"));

    }
    v6 = v11;
  }

}

- (void)startMonitoringWithCharacteristics:(id)a3 stateObserver:(id)a4 completionHandler:(id)a5
{
  id v8;
  id v9;
  id v10;
  void *v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t i;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t j;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  HMDHome *v37;
  NSObject *v38;
  void *v39;
  uint64_t v40;
  void *v41;
  id v42;
  HMDHome *v43;
  void *v44;
  id v45;
  id v46;
  void *v47;
  _QWORD v48[4];
  id v49;
  HMDHome *v50;
  id v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  uint8_t buf[4];
  void *v61;
  __int16 v62;
  uint64_t v63;
  _BYTE v64[128];
  _BYTE v65[128];
  uint64_t v66;

  v66 = *MEMORY[0x24BDAC8D0];
  v8 = a3;
  v9 = a4;
  v10 = a5;
  if (_os_feature_enabled_impl())
  {
    v43 = self;
    v44 = v10;
    v45 = v9;
    objc_msgSend(MEMORY[0x24BDBCED8], "dictionary");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDBCEB8], "array");
    v46 = v8;
    v47 = (void *)objc_claimAutoreleasedReturnValue();
    v56 = 0u;
    v57 = 0u;
    v58 = 0u;
    v59 = 0u;
    v12 = v8;
    v13 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v56, v65, 16);
    if (v13)
    {
      v14 = v13;
      v15 = *(_QWORD *)v57;
      do
      {
        for (i = 0; i != v14; ++i)
        {
          if (*(_QWORD *)v57 != v15)
            objc_enumerationMutation(v12);
          v17 = *(void **)(*((_QWORD *)&v56 + 1) + 8 * i);
          objc_msgSend(v17, "accessory");
          v18 = (void *)objc_claimAutoreleasedReturnValue();
          v19 = v18;
          if (v18)
          {
            objc_msgSend(v18, "uuid");
            v20 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v11, "objectForKeyedSubscript:", v20);
            v21 = (void *)objc_claimAutoreleasedReturnValue();

            if (!v21)
            {
              objc_msgSend(MEMORY[0x24BDBCEF0], "set");
              v22 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v19, "uuid");
              v23 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v11, "setObject:forKeyedSubscript:", v22, v23);

            }
            objc_msgSend(v19, "uuid");
            v24 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v11, "objectForKeyedSubscript:", v24);
            v25 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v25, "addObject:", v17);

            +[HMDCharacteristicRequest requestWithCharacteristic:](HMDCharacteristicRequest, "requestWithCharacteristic:", v17);
            v26 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v47, "addObject:", v26);

          }
        }
        v14 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v56, v65, 16);
      }
      while (v14);
    }

    v54 = 0u;
    v55 = 0u;
    v52 = 0u;
    v53 = 0u;
    v27 = v11;
    v28 = objc_msgSend(v27, "countByEnumeratingWithState:objects:count:", &v52, v64, 16);
    if (v28)
    {
      v29 = v28;
      v30 = *(_QWORD *)v53;
      do
      {
        for (j = 0; j != v29; ++j)
        {
          if (*(_QWORD *)v53 != v30)
            objc_enumerationMutation(v27);
          objc_msgSend(v27, "objectForKeyedSubscript:", *(_QWORD *)(*((_QWORD *)&v52 + 1) + 8 * j));
          v32 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v32, "anyObject");
          v33 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v33, "accessory");
          v34 = (void *)objc_claimAutoreleasedReturnValue();

          if (v34)
          {
            objc_msgSend(v32, "allObjects");
            v35 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v34, "setNotificationsEnabled:forCharacteristics:clientIdentifier:", 1, v35, CFSTR("com.apple.HomeKitDaemon.ActionSetStateObserver"));

          }
        }
        v29 = objc_msgSend(v27, "countByEnumeratingWithState:objects:count:", &v52, v64, 16);
      }
      while (v29);
    }

    v36 = (void *)MEMORY[0x227676638]();
    v37 = v43;
    HMFGetOSLogHandle();
    v38 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v38, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v39 = (void *)objc_claimAutoreleasedReturnValue();
      v40 = objc_msgSend(v47, "count");
      *(_DWORD *)buf = 138543618;
      v61 = v39;
      v62 = 2048;
      v63 = v40;
      _os_log_impl(&dword_2218F0000, v38, OS_LOG_TYPE_INFO, "%{public}@Issuing %ld read requests for ActionSetStateObserver", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v36);
    v41 = (void *)objc_msgSend(v47, "copy");
    v48[0] = MEMORY[0x24BDAC760];
    v48[1] = 3221225472;
    v48[2] = __115__HMDHome_HMDActionSetStateObserverDataSource__startMonitoringWithCharacteristics_stateObserver_completionHandler___block_invoke;
    v48[3] = &unk_24E796990;
    v49 = v47;
    v50 = v37;
    v10 = v44;
    v51 = v44;
    v42 = v47;
    -[HMDHome readCharacteristicValues:source:qualityOfService:withCompletionHandler:](v37, "readCharacteristicValues:source:qualityOfService:withCompletionHandler:", v41, 7, -1, v48);

    v9 = v45;
    v8 = v46;
  }

}

- (void)stopMonitoringWithCharacteristics:(id)a3 stateObserver:(id)a4
{
  id v4;
  void *v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t i;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t j;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  id v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  _BYTE v38[128];
  _BYTE v39[128];
  uint64_t v40;

  v40 = *MEMORY[0x24BDAC8D0];
  v4 = a3;
  if (_os_feature_enabled_impl())
  {
    objc_msgSend(MEMORY[0x24BDBCED8], "dictionary");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v34 = 0u;
    v35 = 0u;
    v36 = 0u;
    v37 = 0u;
    v29 = v4;
    v6 = v4;
    v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v34, v39, 16);
    if (v7)
    {
      v8 = v7;
      v9 = *(_QWORD *)v35;
      do
      {
        for (i = 0; i != v8; ++i)
        {
          if (*(_QWORD *)v35 != v9)
            objc_enumerationMutation(v6);
          v11 = *(void **)(*((_QWORD *)&v34 + 1) + 8 * i);
          objc_msgSend(v11, "accessory");
          v12 = (void *)objc_claimAutoreleasedReturnValue();
          v13 = v12;
          if (v12)
          {
            objc_msgSend(v12, "uuid");
            v14 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v5, "objectForKeyedSubscript:", v14);
            v15 = (void *)objc_claimAutoreleasedReturnValue();

            if (!v15)
            {
              objc_msgSend(MEMORY[0x24BDBCEF0], "set");
              v16 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v13, "uuid");
              v17 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v5, "setObject:forKeyedSubscript:", v16, v17);

            }
            objc_msgSend(v13, "uuid");
            v18 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v5, "objectForKeyedSubscript:", v18);
            v19 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v19, "addObject:", v11);

          }
        }
        v8 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v34, v39, 16);
      }
      while (v8);
    }

    v32 = 0u;
    v33 = 0u;
    v30 = 0u;
    v31 = 0u;
    v20 = v5;
    v21 = objc_msgSend(v20, "countByEnumeratingWithState:objects:count:", &v30, v38, 16);
    if (v21)
    {
      v22 = v21;
      v23 = *(_QWORD *)v31;
      do
      {
        for (j = 0; j != v22; ++j)
        {
          if (*(_QWORD *)v31 != v23)
            objc_enumerationMutation(v20);
          objc_msgSend(v20, "objectForKeyedSubscript:", *(_QWORD *)(*((_QWORD *)&v30 + 1) + 8 * j));
          v25 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v25, "anyObject");
          v26 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v26, "accessory");
          v27 = (void *)objc_claimAutoreleasedReturnValue();

          if (v27)
          {
            objc_msgSend(v25, "allObjects");
            v28 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v27, "setNotificationsEnabled:forCharacteristics:clientIdentifier:", 0, v28, CFSTR("com.apple.HomeKitDaemon.ActionSetStateObserver"));

          }
        }
        v22 = objc_msgSend(v20, "countByEnumeratingWithState:objects:count:", &v30, v38, 16);
      }
      while (v22);
    }

    v4 = v29;
  }

}

void __115__HMDHome_HMDActionSetStateObserverDataSource__startMonitoringWithCharacteristics_stateObserver_completionHandler___block_invoke(uint64_t a1, void *a2, void *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t i;
  void *v9;
  void *v10;
  void *v11;
  id v12;
  void *v13;
  id v14;
  NSObject *v15;
  NSObject *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  uint64_t v21;
  void *v22;
  id v23;
  id obj;
  void *v25;
  uint64_t v26;
  id v27;
  id v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint8_t buf[4];
  void *v34;
  __int16 v35;
  void *v36;
  __int16 v37;
  id v38;
  _BYTE v39[128];
  uint64_t v40;

  v40 = *MEMORY[0x24BDAC8D0];
  v23 = a2;
  v27 = a3;
  objc_msgSend(MEMORY[0x24BDBCEB8], "array");
  v25 = (void *)objc_claimAutoreleasedReturnValue();
  v26 = a1;
  v29 = 0u;
  v30 = 0u;
  v31 = 0u;
  v32 = 0u;
  obj = *(id *)(a1 + 32);
  v5 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v29, v39, 16);
  if (v5)
  {
    v6 = v5;
    v7 = *(_QWORD *)v30;
    do
    {
      for (i = 0; i != v6; ++i)
      {
        if (*(_QWORD *)v30 != v7)
          objc_enumerationMutation(obj);
        v9 = *(void **)(*((_QWORD *)&v29 + 1) + 8 * i);
        objc_msgSend(v9, "characteristic");
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        v28 = 0;
        objc_msgSend(v27, "hmd_valueOfCharacteristic:error:", v10, &v28);
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        v12 = v28;

        v13 = (void *)MEMORY[0x227676638]();
        v14 = *(id *)(v26 + 40);
        HMFGetOSLogHandle();
        v15 = objc_claimAutoreleasedReturnValue();
        v16 = v15;
        if (v11)
        {
          if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
          {
            HMFGetLogIdentifier();
            v17 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 138543874;
            v34 = v17;
            v35 = 2112;
            v36 = v9;
            v37 = 2112;
            v38 = v11;
            _os_log_impl(&dword_2218F0000, v16, OS_LOG_TYPE_INFO, "%{public}@Characteristic read request succeeded when ActionSetStateObserver enabled notifications %@:%@", buf, 0x20u);

          }
          objc_autoreleasePoolPop(v13);
          +[HMDCharacteristicResponse responseWithRequest:error:](HMDCharacteristicResponse, "responseWithRequest:error:", v9, 0);
          v18 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v18, "setValue:", v11);
        }
        else
        {
          if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
          {
            HMFGetLogIdentifier();
            v19 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 138543874;
            v34 = v19;
            v35 = 2112;
            v36 = v9;
            v37 = 2112;
            v38 = v12;
            _os_log_impl(&dword_2218F0000, v16, OS_LOG_TYPE_ERROR, "%{public}@Characteristic read request when ActionSetStateObserver enabled notification failed %@:%@", buf, 0x20u);

          }
          objc_autoreleasePoolPop(v13);
          if (v23)
          {
            +[HMDCharacteristicResponse responseWithRequest:error:](HMDCharacteristicResponse, "responseWithRequest:error:", v9);
            v18 = (void *)objc_claimAutoreleasedReturnValue();
          }
          else
          {
            objc_msgSend(MEMORY[0x24BDD1540], "hmErrorWithCode:", 74);
            v20 = (void *)objc_claimAutoreleasedReturnValue();
            +[HMDCharacteristicResponse responseWithRequest:error:](HMDCharacteristicResponse, "responseWithRequest:error:", v9, v20);
            v18 = (void *)objc_claimAutoreleasedReturnValue();

          }
        }
        objc_msgSend(v25, "addObject:", v18);

      }
      v6 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v29, v39, 16);
    }
    while (v6);
  }

  v21 = *(_QWORD *)(v26 + 48);
  v22 = (void *)objc_msgSend(v25, "copy");
  (*(void (**)(uint64_t, void *))(v21 + 16))(v21, v22);

}

uint64_t __80__HMDHome_HMDActionSetStateObserverDataSource__actionSetsUUIDsForStateObserver___block_invoke(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "uuid");
}

void __117__HMDHome_HMDActionSetStateObserverDataSource__actionSetStateDidChangeForActionSet_currentActiveState_stateObserver___block_invoke(uint64_t a1)
{
  void *v2;
  HMDActionSetResponse *v3;
  void *v4;
  HMDActionSetResponse *v5;
  void *v6;
  _QWORD v7[2];

  v7[1] = *MEMORY[0x24BDAC8D0];
  v2 = *(void **)(a1 + 32);
  v3 = [HMDActionSetResponse alloc];
  objc_msgSend(*(id *)(a1 + 40), "uuid");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = -[HMDActionSetResponse initWithActionSetUUID:state:](v3, "initWithActionSetUUID:state:", v4, *(unsigned __int8 *)(a1 + 48));
  v7[0] = v5;
  objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", v7, 1);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "_notifyRemoteUsersOfChangedActionSetResponses:", v6);

}

- (id)createActionSetStateObserver
{
  HMDActionSetStateObserver *v3;
  void *v4;
  HMDActionSetStateObserver *v5;

  v3 = [HMDActionSetStateObserver alloc];
  -[HMDHome notificationRegistry](self, "notificationRegistry");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = -[HMDActionSetStateObserver initWithDataSource:notificationRegistry:](v3, "initWithDataSource:notificationRegistry:", self, v4);

  return v5;
}

- (id)createActionSetStateManager
{
  return -[HMDActionSetStateSubscriptionManager initWithDelegate:]([HMDActionSetStateSubscriptionManager alloc], "initWithDelegate:", self);
}

- (void)_remotelySetNotificationsEnabled:(BOOL)a3 forActionSetUUIDs:(id)a4
{
  id v4;
  void *v5;
  void *v6;
  int v7;
  NSObject *v8;
  void *v9;
  void *v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t i;
  void *v16;
  void *v17;
  HMDHome *v18;
  NSObject *v19;
  void *v20;
  uint64_t v21;
  id v22;
  void *v23;
  id v24;
  void *v25;
  void *v26;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint8_t buf[4];
  void *v34;
  __int16 v35;
  void *v36;
  __int16 v37;
  void *v38;
  _BYTE v39[128];
  uint64_t v40;

  v40 = *MEMORY[0x24BDAC8D0];
  v4 = a4;
  if (_os_feature_enabled_impl())
  {
    -[HMDHome primaryResident](self, "primaryResident");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "capabilities");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v7 = objc_msgSend(v6, "supportsResidentActionSetStateEvaluation");

    if (v7)
    {
      -[HMDHome workQueue](self, "workQueue");
      v8 = objc_claimAutoreleasedReturnValue();
      dispatch_assert_queue_V2(v8);

      if (a3)
      {
        -[HMDHome actionSetsEnableNotificationPayload](self, "actionSetsEnableNotificationPayload");
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        -[HMDHome actionSetsDisableNotificationPayload](self, "actionSetsDisableNotificationPayload");
      }
      else
      {
        -[HMDHome actionSetsDisableNotificationPayload](self, "actionSetsDisableNotificationPayload");
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        -[HMDHome actionSetsEnableNotificationPayload](self, "actionSetsEnableNotificationPayload");
      }
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      v31 = 0u;
      v32 = 0u;
      v29 = 0u;
      v30 = 0u;
      v24 = v4;
      v11 = v4;
      v12 = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v29, v39, 16);
      if (v12)
      {
        v13 = v12;
        v14 = *(_QWORD *)v30;
        v25 = v9;
        v26 = v10;
        do
        {
          for (i = 0; i != v13; ++i)
          {
            if (*(_QWORD *)v30 != v14)
              objc_enumerationMutation(v11);
            objc_msgSend(*(id *)(*((_QWORD *)&v29 + 1) + 8 * i), "UUIDString");
            v16 = (void *)objc_claimAutoreleasedReturnValue();
            if ((objc_msgSend(v9, "containsObject:", v16) & 1) == 0)
              objc_msgSend(v9, "addObject:", v16);
            if (objc_msgSend(v10, "containsObject:", v16))
            {
              v17 = (void *)MEMORY[0x227676638](objc_msgSend(v10, "removeObject:", v16));
              v18 = self;
              HMFGetOSLogHandle();
              v19 = objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
              {
                HMFGetLogIdentifier();
                v20 = (void *)objc_claimAutoreleasedReturnValue();
                HMFBooleanToString();
                v21 = v14;
                v22 = v11;
                v23 = (void *)objc_claimAutoreleasedReturnValue();
                *(_DWORD *)buf = 138543874;
                v34 = v20;
                v35 = 2112;
                v36 = v23;
                v37 = 2112;
                v38 = v16;
                _os_log_impl(&dword_2218F0000, v19, OS_LOG_TYPE_INFO, "%{public}@Function call to set notification to %@, removing the entry %@ from the other action set payload", buf, 0x20u);

                v11 = v22;
                v14 = v21;

                v9 = v25;
                v10 = v26;
              }

              objc_autoreleasePoolPop(v17);
            }

          }
          v13 = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v29, v39, 16);
        }
        while (v13);
      }

      if (objc_msgSend(v9, "count") || objc_msgSend(v10, "count"))
        -[HMDHome _createModifyNotificationsCoalesceTimerIfNeeded](self, "_createModifyNotificationsCoalesceTimerIfNeeded");

      v4 = v24;
    }
  }

}

- (void)didUpdateSubscriptionForActionSetStateWithActionSetUUID:(id)a3 isSubscribed:(BOOL)a4
{
  id v6;
  NSObject *v7;
  id v8;
  _QWORD block[5];
  id v10;
  BOOL v11;

  v6 = a3;
  -[HMDHome workQueue](self, "workQueue");
  v7 = objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x24BDAC760];
  block[1] = 3221225472;
  block[2] = __99__HMDHome_HMDActionSetState__didUpdateSubscriptionForActionSetStateWithActionSetUUID_isSubscribed___block_invoke;
  block[3] = &unk_24E799CF0;
  v11 = a4;
  block[4] = self;
  v10 = v6;
  v8 = v6;
  dispatch_sync(v7, block);

}

void __99__HMDHome_HMDActionSetState__didUpdateSubscriptionForActionSetStateWithActionSetUUID_isSubscribed___block_invoke(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  void *v3;
  _QWORD v4[2];

  v4[1] = *MEMORY[0x24BDAC8D0];
  v1 = *(unsigned __int8 *)(a1 + 48);
  v2 = *(void **)(a1 + 32);
  v4[0] = *(_QWORD *)(a1 + 40);
  objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", v4, 1);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "_remotelySetNotificationsEnabled:forActionSetUUIDs:", v1, v3);

}

- (void)configureMultiuserSettingsMessengerWithMessengerFactory:(id)a3
{
  id v4;
  void *v5;
  HMDHome *v6;
  NSObject *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  int v13;
  void *v14;
  __int16 v15;
  void *v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  v4 = a3;
  v5 = (void *)MEMORY[0x227676638]();
  v6 = self;
  HMFGetOSLogHandle();
  v7 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHome home](v6, "home");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v13 = 138543618;
    v14 = v8;
    v15 = 2112;
    v16 = v9;
    _os_log_impl(&dword_2218F0000, v7, OS_LOG_TYPE_INFO, "%{public}@Configuring Multiuser settings messenger %@", (uint8_t *)&v13, 0x16u);

  }
  objc_autoreleasePoolPop(v5);
  -[HMDHome home](v6, "home");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHome msgDispatcher](v6, "msgDispatcher");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "createMultiuserSettingsMessenger:messageDispatcher:", v10, v11);
  v12 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v12, "registerForMessages");
  -[HMDHome setMultiuserSettingsMessenger:](v6, "setMultiuserSettingsMessenger:", v12);

}

- (id)createMultiuserSettingsMessenger:(id)a3 messageDispatcher:(id)a4
{
  id v6;
  id v7;
  void *v8;
  HMDHome *v9;
  NSObject *v10;
  void *v11;
  void *v12;
  HMDMultiuserSettingsMessenger *v13;
  int v15;
  void *v16;
  __int16 v17;
  void *v18;
  __int16 v19;
  id v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  v6 = a3;
  v7 = a4;
  v8 = (void *)MEMORY[0x227676638]();
  v9 = self;
  HMFGetOSLogHandle();
  v10 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "uuid");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    v15 = 138543874;
    v16 = v11;
    v17 = 2112;
    v18 = v12;
    v19 = 2112;
    v20 = v7;
    _os_log_impl(&dword_2218F0000, v10, OS_LOG_TYPE_INFO, "%{public}@Creating Multiuser settings messenger with current home UUID: %@ message dispatcher: %@", (uint8_t *)&v15, 0x20u);

  }
  objc_autoreleasePoolPop(v8);
  v13 = -[HMDMultiuserSettingsMessenger initWithHome:messageDispatcher:]([HMDMultiuserSettingsMessenger alloc], "initWithHome:messageDispatcher:", v6, v7);

  return v13;
}

- (unint64_t)accessNotAllowedReasonCode
{
  void *v3;
  HMDHome *v4;
  NSObject *v5;
  void *v6;
  int v8;
  void *v9;
  __int16 v10;
  uint64_t v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v3 = (void *)MEMORY[0x227676638](self, a2);
  v4 = self;
  HMFGetOSLogHandle();
  v5 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
  {
    HMFGetLogIdentifier();
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = 138543618;
    v9 = v6;
    v10 = 2048;
    v11 = 1;
    _os_log_impl(&dword_2218F0000, v5, OS_LOG_TYPE_DEBUG, "%{public}@Home access is not allowed with reason code : %lu", (uint8_t *)&v8, 0x16u);

  }
  objc_autoreleasePoolPop(v3);
  return 1;
}

- (BOOL)isThisHomeMigratedToHH2
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  int v7;
  void *v8;
  char v9;
  void *v10;
  HMDHome *v11;
  NSObject *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  NSObject *v18;
  void *v19;
  HMDHome *v20;
  void *v21;
  void *v23;
  HMDHome *v24;
  void *v25;
  void *v26;
  int v27;
  uint8_t buf[4];
  void *v29;
  __int16 v30;
  void *v31;
  __int16 v32;
  void *v33;
  __int16 v34;
  void *v35;
  __int16 v36;
  void *v37;
  uint64_t v38;

  v38 = *MEMORY[0x24BDAC8D0];
  -[HMDHome homeManager](self, "homeManager");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = v3;
  if (v3
    && (objc_msgSend(v3, "hh2FrameworkSwitch"), v5 = (void *)objc_claimAutoreleasedReturnValue(), v5, v5))
  {
    -[HMDHome owner](self, "owner");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v7 = objc_msgSend(v6, "isCurrentUser");

    objc_msgSend(v4, "hh2FrameworkSwitch");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = objc_msgSend(v8, "checkExistenceOfHH2SentinelZone");

    v10 = (void *)MEMORY[0x227676638]();
    v11 = self;
    HMFGetOSLogHandle();
    v12 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
    {
      HMFGetLogIdentifier();
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      HMFBooleanToString();
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      HMFBooleanToString();
      v27 = v7;
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      -[HMDHome isUpdatedToHH2](v11, "isUpdatedToHH2");
      HMFBooleanToString();
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      HMFBooleanToString();
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138544386;
      v29 = v13;
      v30 = 2112;
      v31 = v14;
      v32 = 2112;
      v33 = v15;
      v34 = 2112;
      v35 = v16;
      v36 = 2112;
      v37 = v17;
      _os_log_impl(&dword_2218F0000, v12, OS_LOG_TYPE_DEBUG, "%{public}@[HH2 Sentinel zone exist : %@], [isOwner: %@], [Is Shared Home Updated to HH2: %@], [Running in HH2 daemon: %@]", buf, 0x34u);

      v7 = v27;
    }

    objc_autoreleasePoolPop(v10);
    if ((v9 & 1) != 0)
    {
      LOBYTE(v18) = 1;
    }
    else
    {
      v23 = (void *)MEMORY[0x227676638]();
      v24 = v11;
      HMFGetOSLogHandle();
      v18 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v25 = (void *)objc_claimAutoreleasedReturnValue();
        -[HMDHome overrideSentinelZoneForConvergencePeriod](v24, "overrideSentinelZoneForConvergencePeriod");
        HMFBooleanToString();
        v26 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        v29 = v25;
        v30 = 2112;
        v31 = v26;
        _os_log_impl(&dword_2218F0000, v18, OS_LOG_TYPE_INFO, "%{public}@This is an invalid configuration but allowed during development & convergence period. If that is the case please ignore this message.[Override = %@]", buf, 0x16u);

      }
      objc_autoreleasePoolPop(v23);
      LODWORD(v18) = -[HMDHome overrideSentinelZoneForConvergencePeriod](v24, "overrideSentinelZoneForConvergencePeriod");
      if (((v18 ^ 1 | v7) & 1) == 0)
        LOBYTE(v18) = -[HMDHome isUpdatedToHH2](v24, "isUpdatedToHH2");
    }
  }
  else
  {
    v19 = (void *)MEMORY[0x227676638]();
    v20 = self;
    HMFGetOSLogHandle();
    v18 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG))
    {
      HMFGetLogIdentifier();
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v29 = v21;
      _os_log_impl(&dword_2218F0000, v18, OS_LOG_TYPE_DEBUG, "%{public}@Unable to find a valid instance of homeManager or this OS is not capable of running ROAR. Marking this home as not migrated to ROAR", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v19);
    LOBYTE(v18) = 0;
  }

  return (char)v18;
}

- (id)_processTestModeSkipHH2MigrationOverride:(id)a3
{
  id v4;
  void *v5;
  HMDHome *v6;
  NSObject *v7;
  void *v8;
  void *v9;
  int v11;
  void *v12;
  __int16 v13;
  void *v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v4 = a3;
  v5 = (void *)MEMORY[0x227676638](-[HMDHome setOverrideSentinelZoneForConvergencePeriod:](self, "setOverrideSentinelZoneForConvergencePeriod:", objc_msgSend(v4, "hmf_BOOLForKey:", CFSTR("kConfigTestingSkipMigrationCheckOverrideKey"))));
  v6 = self;
  HMFGetOSLogHandle();
  v7 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHome overrideSentinelZoneForConvergencePeriod](v6, "overrideSentinelZoneForConvergencePeriod");
    HMFBooleanToString();
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v11 = 138543618;
    v12 = v8;
    v13 = 2112;
    v14 = v9;
    _os_log_impl(&dword_2218F0000, v7, OS_LOG_TYPE_INFO, "%{public}@Override for HH2 Migration Skip is set to : %@", (uint8_t *)&v11, 0x16u);

  }
  objc_autoreleasePoolPop(v5);

  return 0;
}

- (void)storeMigrationCharacteristicsAuthorizationData
{
  void *v3;
  void *v4;
  int v5;
  void *v6;
  HMDHome *v7;
  NSObject *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  id v13;
  uint64_t v14;
  void *v15;
  HMDHome *v16;
  NSObject *v17;
  NSObject *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  HMDHome *v27;
  NSObject *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  HMDHome *v33;
  NSObject *v34;
  void *v35;
  _QWORD v36[4];
  id v37;
  uint8_t buf[4];
  void *v39;
  __int16 v40;
  void *v41;
  __int16 v42;
  id v43;
  uint64_t v44;

  v44 = *MEMORY[0x24BDAC8D0];
  v3 = (void *)MEMORY[0x227676638](self, a2);
  -[HMDHome currentUser](self, "currentUser");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v4, "isOwner");

  if (v5)
  {
    v6 = (void *)MEMORY[0x227676638]();
    v7 = self;
    HMFGetOSLogHandle();
    v8 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      -[HMDHome name](v7, "name");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v39 = v9;
      v40 = 2112;
      v41 = v10;
      _os_log_impl(&dword_2218F0000, v8, OS_LOG_TYPE_INFO, "%{public}@Skipping characteristic authorization archiving for home: %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v6);
  }
  else
  {
    objc_msgSend(MEMORY[0x24BDBCED8], "dictionary");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHome hapAccessories](self, "hapAccessories");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    v36[0] = MEMORY[0x24BDAC760];
    v36[1] = 3221225472;
    v36[2] = __90__HMDHome_CharacteristicAuthorizationData__storeMigrationCharacteristicsAuthorizationData__block_invoke;
    v36[3] = &unk_24E791F98;
    v13 = v11;
    v37 = v13;
    objc_msgSend(v12, "na_each:", v36);

    v14 = objc_msgSend(v13, "count");
    v15 = (void *)MEMORY[0x227676638]();
    v16 = self;
    HMFGetOSLogHandle();
    v17 = objc_claimAutoreleasedReturnValue();
    v18 = v17;
    if (v14)
    {
      if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v19 = (void *)objc_claimAutoreleasedReturnValue();
        -[HMDHome name](v16, "name");
        v20 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543874;
        v39 = v19;
        v40 = 2112;
        v41 = v20;
        v42 = 2112;
        v43 = v13;
        _os_log_impl(&dword_2218F0000, v18, OS_LOG_TYPE_INFO, "%{public}@Archiving characteristic authorization data for migration for home: %@, [%@]", buf, 0x20u);

      }
      objc_autoreleasePoolPop(v15);
      v21 = (void *)objc_msgSend(objc_alloc(MEMORY[0x24BDD1618]), "initRequiringSecureCoding:", 1);
      objc_msgSend(v21, "encodeObject:forKey:", v13, *MEMORY[0x24BDD0E88]);
      objc_msgSend(v21, "finishEncoding");
      objc_msgSend(v21, "encodedData");
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      if (v22)
      {
        -[HMDHome uuid](v16, "uuid");
        v23 = (void *)objc_claimAutoreleasedReturnValue();
        getAccessoryAuthorizationsSettingsSerializedFilePath(v23);
        v24 = (void *)objc_claimAutoreleasedReturnValue();

        +[HMDPersistentStore writeData:toStorePath:dataLabel:](HMDPersistentStore, "writeData:toStorePath:dataLabel:", v22, v24, CFSTR("CharacteristicAuthorizationData"));
        v25 = (void *)objc_claimAutoreleasedReturnValue();
        v26 = (void *)MEMORY[0x227676638]();
        v27 = v16;
        HMFGetOSLogHandle();
        v28 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v28, OS_LOG_TYPE_DEBUG))
        {
          HMFGetLogIdentifier();
          v29 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543874;
          v39 = v29;
          v40 = 2112;
          v41 = v25;
          v42 = 2112;
          v43 = v24;
          _os_log_impl(&dword_2218F0000, v28, OS_LOG_TYPE_DEBUG, "%{public}@Stored characteristic authorization data ([%@] bytes) to [%@]", buf, 0x20u);

        }
        objc_autoreleasePoolPop(v26);

      }
      else
      {
        v32 = (void *)MEMORY[0x227676638]();
        v33 = v16;
        HMFGetOSLogHandle();
        v34 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR))
        {
          HMFGetLogIdentifier();
          v35 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543362;
          v39 = v35;
          _os_log_impl(&dword_2218F0000, v34, OS_LOG_TYPE_ERROR, "%{public}@Unable to store characteristic authorization data during migration, archived data is nil", buf, 0xCu);

        }
        objc_autoreleasePoolPop(v32);
      }

    }
    else
    {
      if (os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG))
      {
        HMFGetLogIdentifier();
        v30 = (void *)objc_claimAutoreleasedReturnValue();
        -[HMDHome name](v16, "name");
        v31 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        v39 = v30;
        v40 = 2112;
        v41 = v31;
        _os_log_impl(&dword_2218F0000, v18, OS_LOG_TYPE_DEBUG, "%{public}@No characteristic authorization data to migrate for home: %@", buf, 0x16u);

      }
      objc_autoreleasePoolPop(v15);
    }

  }
  objc_autoreleasePoolPop(v3);
}

void __90__HMDHome_CharacteristicAuthorizationData__storeMigrationCharacteristicsAuthorizationData__block_invoke(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  _QWORD v6[4];
  id v7;
  id v8;

  v3 = a2;
  objc_msgSend(v3, "services");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v6[0] = MEMORY[0x24BDAC760];
  v6[1] = 3221225472;
  v6[2] = __90__HMDHome_CharacteristicAuthorizationData__storeMigrationCharacteristicsAuthorizationData__block_invoke_2;
  v6[3] = &unk_24E791F70;
  v7 = *(id *)(a1 + 32);
  v8 = v3;
  v5 = v3;
  objc_msgSend(v4, "na_each:", v6);

}

void __90__HMDHome_CharacteristicAuthorizationData__storeMigrationCharacteristicsAuthorizationData__block_invoke_2(uint64_t a1, void *a2)
{
  void *v3;
  _QWORD v4[4];
  id v5;
  id v6;

  objc_msgSend(a2, "characteristics");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4[0] = MEMORY[0x24BDAC760];
  v4[1] = 3221225472;
  v4[2] = __90__HMDHome_CharacteristicAuthorizationData__storeMigrationCharacteristicsAuthorizationData__block_invoke_3;
  v4[3] = &unk_24E791F48;
  v5 = *(id *)(a1 + 32);
  v6 = *(id *)(a1 + 40);
  objc_msgSend(v3, "na_each:", v4);

}

void __90__HMDHome_CharacteristicAuthorizationData__storeMigrationCharacteristicsAuthorizationData__block_invoke_3(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  id v15;

  v15 = a2;
  objc_msgSend(v15, "getCharacteristicDictionary");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "objectForKeyedSubscript:", CFSTR("kCharacteristicAuthorizationDataCodingKey"));
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  if (v4)
  {
    v5 = *(void **)(a1 + 32);
    objc_msgSend(*(id *)(a1 + 40), "uuid");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "objectForKeyedSubscript:", v6);
    v7 = (void *)objc_claimAutoreleasedReturnValue();

    if (!v7)
    {
      objc_msgSend(MEMORY[0x24BDBCED8], "dictionary");
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      v9 = *(void **)(a1 + 32);
      objc_msgSend(*(id *)(a1 + 40), "uuid");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v9, "setObject:forKeyedSubscript:", v8, v10);

    }
    v11 = *(void **)(a1 + 32);
    objc_msgSend(*(id *)(a1 + 40), "uuid");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "objectForKeyedSubscript:", v12);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v15, "instanceID");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "setObject:forKeyedSubscript:", v4, v14);

  }
}

+ (void)removeCharacteristicAuthorizationDataMigrationFileFromDiskWithhHomeUUID:(id)a3
{
  id v4;
  id v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;
  void *v10;
  id v11;
  NSObject *v12;
  void *v13;
  id v14;
  uint8_t buf[4];
  void *v16;
  __int16 v17;
  id v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v4 = a3;
  v5 = objc_alloc(MEMORY[0x24BDBCF48]);
  getAccessoryAuthorizationsSettingsSerializedFilePath(v4);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = (void *)objc_msgSend(v5, "initFileURLWithPath:", v6);

  objc_msgSend(MEMORY[0x24BDD1580], "defaultManager");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v14 = 0;
  objc_msgSend(v8, "removeItemAtURL:error:", v7, &v14);
  v9 = v14;

  if (v9)
  {
    v10 = (void *)MEMORY[0x227676638]();
    v11 = a1;
    HMFGetOSLogHandle();
    v12 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v16 = v13;
      v17 = 2112;
      v18 = v9;
      _os_log_impl(&dword_2218F0000, v12, OS_LOG_TYPE_ERROR, "%{public}@Error occurred while removing accessory authorization migration file from disk : %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v10);
  }

}

+ (id)loadMigrationCharacteristicsAuthorizationDataFromDiskWithHomeUUID:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  char v7;
  void *v8;
  id v9;
  void *v10;
  void *v11;
  id v12;
  id v13;
  void *v14;
  id v15;
  void *v16;
  id v17;
  NSObject *v18;
  void *v19;
  void *v20;
  id v21;
  NSObject *v22;
  void *v23;
  void *v24;
  id v25;
  NSObject *v26;
  void *v27;
  id v28;
  void *v29;
  id v31;
  id v32;
  uint8_t buf[4];
  void *v34;
  __int16 v35;
  id v36;
  __int16 v37;
  id v38;
  uint64_t v39;

  v39 = *MEMORY[0x24BDAC8D0];
  v4 = a3;
  if (loadMigrationCharacteristicsAuthorizationDataFromDiskWithHomeUUID__onceToken != -1)
    dispatch_once(&loadMigrationCharacteristicsAuthorizationDataFromDiskWithHomeUUID__onceToken, &__block_literal_global_197309);
  getAccessoryAuthorizationsSettingsSerializedFilePath(v4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x24BDD1580], "defaultManager");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = objc_msgSend(v6, "fileExistsAtPath:", v5);

  if ((v7 & 1) != 0)
  {
    v32 = 0;
    objc_msgSend(MEMORY[0x24BDBCE50], "dataWithContentsOfFile:options:error:", v5, 2, &v32);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = v32;
    v10 = v9;
    if (!v8 || v9)
    {
      v24 = (void *)MEMORY[0x227676638]();
      v25 = a1;
      HMFGetOSLogHandle();
      v26 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v27 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543874;
        v34 = v27;
        v35 = 2112;
        v36 = v5;
        v37 = 2112;
        v38 = v10;
        _os_log_impl(&dword_2218F0000, v26, OS_LOG_TYPE_ERROR, "%{public}@Unable to read data from file : %@ / %@", buf, 0x20u);

      }
      objc_autoreleasePoolPop(v24);
      v15 = 0;
    }
    else
    {
      v31 = 0;
      objc_msgSend(MEMORY[0x24BDD1620], "unarchivedObjectOfClasses:fromData:error:", loadMigrationCharacteristicsAuthorizationDataFromDiskWithHomeUUID__allowedClasses, v8, &v31);
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      v12 = v31;
      v10 = v12;
      if (!v11 || v12)
      {
        v16 = (void *)MEMORY[0x227676638]();
        v28 = a1;
        HMFGetOSLogHandle();
        v18 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
        {
          HMFGetLogIdentifier();
          v29 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543618;
          v34 = v29;
          v35 = 2112;
          v36 = v10;
          _os_log_impl(&dword_2218F0000, v18, OS_LOG_TYPE_ERROR, "%{public}@Unable to unarchive characteristic authorization data: %@", buf, 0x16u);

        }
        v15 = 0;
      }
      else
      {
        v13 = v11;
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0)
          v14 = v13;
        else
          v14 = 0;
        v15 = v14;

        v16 = (void *)MEMORY[0x227676638]();
        v17 = a1;
        HMFGetOSLogHandle();
        v18 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG))
        {
          HMFGetLogIdentifier();
          v19 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543874;
          v34 = v19;
          v35 = 2112;
          v36 = v4;
          v37 = 2112;
          v38 = v15;
          _os_log_impl(&dword_2218F0000, v18, OS_LOG_TYPE_DEBUG, "%{public}@Found characteristic authorization data for migration of home: %@: [%@]", buf, 0x20u);

        }
      }

      objc_autoreleasePoolPop(v16);
    }

  }
  else
  {
    v20 = (void *)MEMORY[0x227676638]();
    v21 = a1;
    HMFGetOSLogHandle();
    v22 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v22, OS_LOG_TYPE_DEBUG))
    {
      HMFGetLogIdentifier();
      v23 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v34 = v23;
      v35 = 2112;
      v36 = v5;
      _os_log_impl(&dword_2218F0000, v22, OS_LOG_TYPE_DEBUG, "%{public}@No characteristic authorization file found at %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v20);
    v15 = 0;
  }

  return v15;
}

void __110__HMDHome_CharacteristicAuthorizationData__loadMigrationCharacteristicsAuthorizationDataFromDiskWithHomeUUID___block_invoke()
{
  void *v0;
  void *v1;
  uint64_t v2;
  void *v3;
  _QWORD v4[7];

  v4[6] = *MEMORY[0x24BDAC8D0];
  v0 = (void *)MEMORY[0x24BDBCF20];
  v4[0] = objc_opt_class();
  v4[1] = objc_opt_class();
  v4[2] = objc_opt_class();
  v4[3] = objc_opt_class();
  v4[4] = objc_opt_class();
  v4[5] = objc_opt_class();
  objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", v4, 6);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "setWithArray:", v1);
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = (void *)loadMigrationCharacteristicsAuthorizationDataFromDiskWithHomeUUID__allowedClasses;
  loadMigrationCharacteristicsAuthorizationDataFromDiskWithHomeUUID__allowedClasses = v2;

}

- (id)_retrieveTupleForPrimaryAccessory:(id)a3 linkType:(int64_t)a4
{
  id v6;
  uint64_t v7;
  void *v8;
  void *v9;
  id v10;
  void *v11;
  id v12;
  void *v13;
  _QWORD v15[4];
  id v16;
  int64_t v17;

  v6 = a3;
  objc_msgSend(v6, "bridge");
  v7 = objc_claimAutoreleasedReturnValue();
  v8 = (void *)v7;
  if (v7)
    v9 = (void *)v7;
  else
    v9 = v6;
  v10 = v9;

  os_unfair_recursive_lock_lock_with_options();
  -[HMDHome retrievalAccessoryCompletionTuples](self, "retrievalAccessoryCompletionTuples");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v15[0] = MEMORY[0x24BDAC760];
  v15[1] = 3221225472;
  v15[2] = __74__HMDHome_AccessoryRetrieval___retrieveTupleForPrimaryAccessory_linkType___block_invoke;
  v15[3] = &unk_24E790DF8;
  v12 = v10;
  v16 = v12;
  v17 = a4;
  objc_msgSend(v11, "na_firstObjectPassingTest:", v15);
  v13 = (void *)objc_claimAutoreleasedReturnValue();

  os_unfair_recursive_lock_unlock();
  return v13;
}

- (void)_addRetrievalCompletionTuple:(id)a3
{
  void *v4;
  id v5;

  v5 = a3;
  os_unfair_recursive_lock_lock_with_options();
  -[HMDHome retrievalAccessoryCompletionTuples](self, "retrievalAccessoryCompletionTuples");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "addObject:", v5);

  os_unfair_recursive_lock_unlock();
}

- (void)_removeRetrievalCompletionTuple:(id)a3
{
  void *v4;
  id v5;

  v5 = a3;
  os_unfair_recursive_lock_lock_with_options();
  -[HMDHome retrievalAccessoryCompletionTuples](self, "retrievalAccessoryCompletionTuples");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "removeObject:", v5);

  os_unfair_recursive_lock_unlock();
}

- (BOOL)_isRetrievalInProgressForPrimaryAccessory:(id)a3 linkType:(int64_t)a4
{
  void *v4;
  BOOL v5;

  -[HMDHome _retrieveTupleForPrimaryAccessory:linkType:](self, "_retrieveTupleForPrimaryAccessory:linkType:", a3, a4);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = v4 != 0;

  return v5;
}

- (id)_enqueueRetrievalTupleForAccessory:(id)a3 linkType:(int64_t)a4 inProgress:(BOOL *)a5 completion:(id)a6
{
  id v10;
  id v11;
  uint64_t v12;
  void *v13;
  void *v14;
  id v15;
  void *v16;
  HMDHome *v17;
  NSObject *v18;
  void *v19;
  const __CFString *v20;
  void *v21;
  __CFString *v22;
  __CFString *v23;
  uint64_t v24;
  HMDAccessoryRetrievalCompletionTuple *v25;
  void *v27;
  void *v28;
  BOOL *v29;
  uint8_t buf[4];
  void *v31;
  __int16 v32;
  const __CFString *v33;
  __int16 v34;
  void *v35;
  __int16 v36;
  __CFString *v37;
  uint64_t v38;

  v38 = *MEMORY[0x24BDAC8D0];
  v10 = a3;
  v11 = a6;
  objc_msgSend(v10, "bridge");
  v12 = objc_claimAutoreleasedReturnValue();
  v13 = (void *)v12;
  if (v12)
    v14 = (void *)v12;
  else
    v14 = v10;
  v15 = v14;

  v16 = (void *)MEMORY[0x227676638]();
  v17 = self;
  HMFGetOSLogHandle();
  v18 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
  {
    v27 = v16;
    HMFGetLogIdentifier();
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    if (v11)
      v20 = CFSTR(" with completion");
    else
      v20 = &stru_24E79DB48;
    objc_msgSend(v15, "shortDescription", v27);
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    v29 = a5;
    if ((unint64_t)a4 > 2)
      v22 = CFSTR("Undefined");
    else
      v22 = off_24E780090[a4];
    v23 = v22;
    *(_DWORD *)buf = 138544130;
    v31 = v19;
    v32 = 2112;
    v33 = v20;
    v34 = 2112;
    v35 = v21;
    v36 = 2112;
    v37 = v23;
    _os_log_impl(&dword_2218F0000, v18, OS_LOG_TYPE_INFO, "%{public}@Enqueueing retrieval tuple%@ for %@/%@.", buf, 0x2Au);

    v16 = v28;
    a5 = v29;
  }

  objc_autoreleasePoolPop(v16);
  -[HMDHome _retrieveTupleForPrimaryAccessory:linkType:](v17, "_retrieveTupleForPrimaryAccessory:linkType:", v15, a4);
  v24 = objc_claimAutoreleasedReturnValue();
  if (!v24)
  {
    v25 = -[HMDAccessoryRetrievalCompletionTuple initWithHome:accessory:linkType:]([HMDAccessoryRetrievalCompletionTuple alloc], "initWithHome:accessory:linkType:", v17, v15, a4);
    -[HMDHome _addRetrievalCompletionTuple:](v17, "_addRetrievalCompletionTuple:", v25);
    if (!v11)
      goto LABEL_17;
    goto LABEL_16;
  }
  v25 = (HMDAccessoryRetrievalCompletionTuple *)v24;
  if (a5)
    *a5 = 1;
  if (v11)
LABEL_16:
    -[HMDAccessoryRetrievalCompletionTuple addCompletion:](v25, "addCompletion:", v11);
LABEL_17:

  return v25;
}

- (void)_dequeueRetrievalForAccessory:(id)a3 linkType:(int64_t)a4 error:(id)a5
{
  id v8;
  id v9;
  NSObject *v10;
  uint64_t v11;
  void *v12;
  void *v13;
  id v14;
  void *v15;
  uint64_t v16;
  void *v17;
  HMDHome *v18;
  NSObject *v19;
  __CFString *v20;
  __CFString *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  _QWORD v31[4];
  id v32;
  uint8_t buf[4];
  void *v34;
  __int16 v35;
  void *v36;
  __int16 v37;
  __CFString *v38;
  __int16 v39;
  void *v40;
  __int16 v41;
  void *v42;
  uint64_t v43;

  v43 = *MEMORY[0x24BDAC8D0];
  v8 = a3;
  v9 = a5;
  -[HMDHome workQueue](self, "workQueue");
  v10 = objc_claimAutoreleasedReturnValue();
  dispatch_assert_queue_V2(v10);

  objc_msgSend(v8, "bridge");
  v11 = objc_claimAutoreleasedReturnValue();
  v12 = (void *)v11;
  if (v11)
    v13 = (void *)v11;
  else
    v13 = v8;
  v14 = v13;

  -[HMDHome _retrieveTupleForPrimaryAccessory:linkType:](self, "_retrieveTupleForPrimaryAccessory:linkType:", v14, a4);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  if (v15)
  {
    -[HMDHome _removeRetrievalCompletionTuple:](self, "_removeRetrievalCompletionTuple:", v15);
    v16 = objc_msgSend(v15, "stop");
    if (v9)
    {
      v17 = (void *)MEMORY[0x227676638](v16);
      v18 = self;
      HMFGetOSLogHandle();
      v19 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v30 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v14, "shortDescription");
        v28 = (void *)objc_claimAutoreleasedReturnValue();
        v29 = v17;
        if ((unint64_t)a4 > 2)
          v20 = CFSTR("Undefined");
        else
          v20 = off_24E780090[a4];
        v21 = v20;
        objc_msgSend(MEMORY[0x24BDD1540], "hmStringFromErrorCode:", objc_msgSend(v9, "code"));
        v22 = (void *)objc_claimAutoreleasedReturnValue();
        v23 = (void *)MEMORY[0x24BDD16E0];
        objc_msgSend(v15, "completions");
        v27 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v23, "numberWithUnsignedInteger:", objc_msgSend(v27, "count"));
        v24 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138544386;
        v34 = v30;
        v35 = 2112;
        v36 = v28;
        v37 = 2112;
        v38 = v21;
        v39 = 2112;
        v40 = v22;
        v41 = 2112;
        v42 = v24;
        _os_log_impl(&dword_2218F0000, v19, OS_LOG_TYPE_INFO, "%{public}@Calling accessory retrieval for %@/%@ with error: %@ and %@ completions.", buf, 0x34u);

        v17 = v29;
      }

      objc_autoreleasePoolPop(v17);
    }
    objc_msgSend(v15, "completions");
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    v31[0] = MEMORY[0x24BDAC760];
    v31[1] = 3221225472;
    v31[2] = __76__HMDHome_AccessoryRetrieval___dequeueRetrievalForAccessory_linkType_error___block_invoke;
    v31[3] = &unk_24E790E20;
    v32 = v9;
    objc_msgSend(v25, "na_each:", v31);

    objc_msgSend(v15, "completions");
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v26, "removeAllObjects");

  }
}

- (void)_retrieveHAPAccessoryForHMDHAPAccessory:(id)a3 linkType:(int64_t)a4 forceRetrieve:(BOOL)a5 completion:(id)a6
{
  _BOOL4 v7;
  id v10;
  id v11;
  NSObject *v12;
  uint64_t v13;
  void *v14;
  void *v15;
  id v16;
  void *v17;
  char v18;
  void *v19;
  char v20;
  void (**v21)(_QWORD, _QWORD);
  void *v22;
  HMDHome *v23;
  NSObject *v24;
  __CFString *v25;
  void *v26;
  HMDHome *v27;
  NSObject *v28;
  void *v29;
  void *v30;
  void *v31;
  uint64_t v32;
  void *v33;
  HMDHome *v34;
  NSObject *v35;
  void *v36;
  void *v37;
  void *v38;
  __CFString *v39;
  void *v40;
  void *v41;
  void *v42;
  void *v43;
  void *v44;
  HMDHome *v45;
  NSObject *v46;
  __CFString *v47;
  __CFString *v48;
  void *v49;
  void *v50;
  void *v51;
  void *v52;
  void *v53;
  void *v54;
  void *v55;
  void *v56;
  void *v57;
  id v58;
  _QWORD v59[5];
  id v60;
  int64_t v61;
  char v62;
  uint8_t buf[4];
  void *v64;
  __int16 v65;
  void *v66;
  __int16 v67;
  void (**v68)(_QWORD, _QWORD);
  __int16 v69;
  __CFString *v70;
  __int16 v71;
  void *v72;
  uint64_t v73;

  v7 = a5;
  v73 = *MEMORY[0x24BDAC8D0];
  v10 = a3;
  v11 = a6;
  -[HMDHome workQueue](self, "workQueue");
  v12 = objc_claimAutoreleasedReturnValue();
  dispatch_assert_queue_V2(v12);

  objc_msgSend(v10, "bridge");
  v13 = objc_claimAutoreleasedReturnValue();
  v14 = (void *)v13;
  if (v13)
    v15 = (void *)v13;
  else
    v15 = v10;
  v16 = v15;

  -[HMDHome accessoryBrowser](self, "accessoryBrowser");
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  v18 = objc_msgSend(v17, "isBrowsingAllowed");

  if ((v18 & 1) != 0)
  {
    -[HMDHome accessories](self, "accessories");
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    v20 = objc_msgSend(v19, "containsObject:", v10);

    if ((v20 & 1) != 0)
    {
      objc_msgSend(v16, "matchingHAPAccessoryServerIdentifierWithLinkType:", a4);
      v21 = (void (**)(_QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
      v22 = (void *)MEMORY[0x227676638]();
      v23 = self;
      HMFGetOSLogHandle();
      v24 = objc_claimAutoreleasedReturnValue();
      v58 = v11;
      if (os_log_type_enabled(v24, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v54 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v16, "shortDescription");
        v52 = (void *)objc_claimAutoreleasedReturnValue();
        v56 = v22;
        if ((unint64_t)a4 > 2)
          v25 = CFSTR("Undefined");
        else
          v25 = off_24E780090[a4];
        v39 = v25;
        HMFBooleanToString();
        v40 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138544386;
        v64 = v54;
        v65 = 2112;
        v66 = v52;
        v67 = 2112;
        v68 = v21;
        v69 = 2112;
        v70 = v39;
        v71 = 2112;
        v72 = v40;
        _os_log_impl(&dword_2218F0000, v24, OS_LOG_TYPE_INFO, "%{public}@Retrieving accessory (%@) with server %@/%@. Force retrieve: %@", buf, 0x34u);

        v22 = v56;
        v11 = v58;
      }

      objc_autoreleasePoolPop(v22);
      v62 = 0;
      -[HMDHome _enqueueRetrievalTupleForAccessory:linkType:inProgress:completion:](v23, "_enqueueRetrievalTupleForAccessory:linkType:inProgress:completion:", v16, a4, &v62, v11);
      v41 = (void *)objc_claimAutoreleasedReturnValue();
      v42 = v41;
      if (v62 && !v7)
        goto LABEL_23;
      objc_msgSend(v41, "start");
      -[HMDHome accessoryBrowser](v23, "accessoryBrowser");
      v43 = (void *)objc_claimAutoreleasedReturnValue();
      v59[0] = MEMORY[0x24BDAC760];
      v59[1] = 3221225472;
      v59[2] = __105__HMDHome_AccessoryRetrieval___retrieveHAPAccessoryForHMDHAPAccessory_linkType_forceRetrieve_completion___block_invoke;
      v59[3] = &unk_24E7917A8;
      v59[4] = v23;
      v60 = v16;
      v61 = a4;
      objc_msgSend(v43, "discoverAccessoryServer:linkType:errorHandler:", v21, a4, v59);

      if (v62)
      {
LABEL_23:
        v44 = (void *)MEMORY[0x227676638]();
        v45 = v23;
        HMFGetOSLogHandle();
        v46 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v46, OS_LOG_TYPE_INFO))
        {
          HMFGetLogIdentifier();
          v55 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v16, "shortDescription");
          v57 = v44;
          v53 = (void *)objc_claimAutoreleasedReturnValue();
          if ((unint64_t)a4 > 2)
            v47 = CFSTR("Undefined");
          else
            v47 = off_24E780090[a4];
          v48 = v47;
          v49 = (void *)MEMORY[0x24BDD16E0];
          objc_msgSend(v42, "completions");
          v50 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v49, "numberWithUnsignedInteger:", objc_msgSend(v50, "count"));
          v51 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138544386;
          v64 = v55;
          v65 = 2112;
          v66 = v53;
          v67 = 2112;
          v68 = v21;
          v69 = 2112;
          v70 = v48;
          v71 = 2112;
          v72 = v51;
          _os_log_impl(&dword_2218F0000, v46, OS_LOG_TYPE_INFO, "%{public}@Retrieval already in progress for accessory (%@) with server %@/%@ and %@ completions.", buf, 0x34u);

          v44 = v57;
          v11 = v58;
        }

        objc_autoreleasePoolPop(v44);
      }

      goto LABEL_30;
    }
    v33 = (void *)MEMORY[0x227676638]();
    v34 = self;
    HMFGetOSLogHandle();
    v35 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v35, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v36 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v10, "shortDescription");
      v37 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v64 = v36;
      v65 = 2112;
      v66 = v37;
      _os_log_impl(&dword_2218F0000, v35, OS_LOG_TYPE_ERROR, "%{public}@Cannot retrieve HAP accessory: %@. Requested accessory not part of this home", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v33);
    v21 = (void (**)(_QWORD, _QWORD))_Block_copy(v11);
    if (v21)
    {
      v31 = (void *)MEMORY[0x24BDD1540];
      v32 = 3;
      goto LABEL_17;
    }
  }
  else
  {
    v26 = (void *)MEMORY[0x227676638]();
    v27 = self;
    HMFGetOSLogHandle();
    v28 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v29 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v16, "shortDescription");
      v30 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v64 = v29;
      v65 = 2112;
      v66 = v30;
      _os_log_impl(&dword_2218F0000, v28, OS_LOG_TYPE_ERROR, "%{public}@Ignoring request to retrieve HAP accessory: %@. Browsing not allowed (companion is connected or no app)", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v26);
    v21 = (void (**)(_QWORD, _QWORD))_Block_copy(v11);
    if (v21)
    {
      v31 = (void *)MEMORY[0x24BDD1540];
      v32 = 48;
LABEL_17:
      objc_msgSend(v31, "hmErrorWithCode:", v32);
      v38 = (void *)objc_claimAutoreleasedReturnValue();
      ((void (**)(_QWORD, void *))v21)[2](v21, v38);

    }
  }
LABEL_30:

}

- (void)_notifyRetrievalError:(id)a3 accessoryServer:(id)a4 linkType:(int64_t)a5 accessoryOperationBlock:(id)a6
{
  id v10;
  id v11;
  id v12;
  void *v13;
  id v14;
  id v15;
  id v16;
  _QWORD v17[4];
  id v18;
  HMDHome *v19;
  id v20;
  id v21;
  int64_t v22;

  v10 = a3;
  v11 = a4;
  v12 = a6;
  -[HMDHome hapAccessories](self, "hapAccessories");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  v17[0] = MEMORY[0x24BDAC760];
  v17[1] = 3221225472;
  v17[2] = __102__HMDHome_AccessoryRetrieval___notifyRetrievalError_accessoryServer_linkType_accessoryOperationBlock___block_invoke;
  v17[3] = &unk_24E790E48;
  v18 = v11;
  v19 = self;
  v21 = v12;
  v22 = a5;
  v20 = v10;
  v14 = v10;
  v15 = v12;
  v16 = v11;
  objc_msgSend(v13, "na_each:", v17);

}

- (void)_unitTest_setRetrievalCompletionsTimeout:(double)a3
{
  void *v5;
  _QWORD v6[6];

  -[HMDHome retrievalAccessoryCompletionTuples](self, "retrievalAccessoryCompletionTuples");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6[0] = MEMORY[0x24BDAC760];
  v6[1] = 3221225472;
  v6[2] = __72__HMDHome_AccessoryRetrieval___unitTest_setRetrievalCompletionsTimeout___block_invoke;
  v6[3] = &unk_24E790E70;
  v6[4] = self;
  *(double *)&v6[5] = a3;
  objc_msgSend(v5, "na_each:", v6);

}

void __72__HMDHome_AccessoryRetrieval___unitTest_setRetrievalCompletionsTimeout___block_invoke(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  id v5;
  _QWORD v6[4];
  id v7;
  uint64_t v8;

  v3 = a2;
  objc_msgSend(*(id *)(a1 + 32), "workQueue");
  v4 = objc_claimAutoreleasedReturnValue();
  v6[0] = MEMORY[0x24BDAC760];
  v6[1] = 3221225472;
  v6[2] = __72__HMDHome_AccessoryRetrieval___unitTest_setRetrievalCompletionsTimeout___block_invoke_2;
  v6[3] = &unk_24E797C10;
  v7 = v3;
  v8 = *(_QWORD *)(a1 + 40);
  v5 = v3;
  dispatch_async(v4, v6);

}

uint64_t __72__HMDHome_AccessoryRetrieval___unitTest_setRetrievalCompletionsTimeout___block_invoke_2(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "stop");
  objc_msgSend(*(id *)(a1 + 32), "setRetrievalTimeout:", *(double *)(a1 + 40));
  return objc_msgSend(*(id *)(a1 + 32), "start");
}

void __102__HMDHome_AccessoryRetrieval___notifyRetrievalError_accessoryServer_linkType_accessoryOperationBlock___block_invoke(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  NSObject *v6;
  id v7;
  uint64_t v8;
  _QWORD v9[5];
  id v10;
  id v11;
  uint64_t v12;

  v3 = a2;
  if (objc_msgSend(v3, "matchesHAPAccessoryWithServerIdentifier:linkType:", *(_QWORD *)(a1 + 32), 0))
  {
    v4 = _Block_copy(*(const void **)(a1 + 56));
    v5 = v4;
    if (v4)
      (*((void (**)(void *, id))v4 + 2))(v4, v3);

    objc_msgSend(*(id *)(a1 + 40), "workQueue");
    v6 = objc_claimAutoreleasedReturnValue();
    v9[0] = MEMORY[0x24BDAC760];
    v9[1] = 3221225472;
    v9[2] = __102__HMDHome_AccessoryRetrieval___notifyRetrievalError_accessoryServer_linkType_accessoryOperationBlock___block_invoke_2;
    v9[3] = &unk_24E795658;
    v9[4] = *(_QWORD *)(a1 + 40);
    v7 = v3;
    v8 = *(_QWORD *)(a1 + 64);
    v10 = v7;
    v12 = v8;
    v11 = *(id *)(a1 + 48);
    dispatch_async(v6, v9);

  }
}

uint64_t __102__HMDHome_AccessoryRetrieval___notifyRetrievalError_accessoryServer_linkType_accessoryOperationBlock___block_invoke_2(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_dequeueRetrievalForAccessory:linkType:error:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 48));
}

void __105__HMDHome_AccessoryRetrieval___retrieveHAPAccessoryForHMDHAPAccessory_linkType_forceRetrieve_completion___block_invoke(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  void *v5;
  id v6;
  uint64_t v7;
  _QWORD v8[5];
  id v9;
  id v10;
  uint64_t v11;

  v3 = a2;
  if (v3)
  {
    objc_msgSend(*(id *)(a1 + 32), "workQueue");
    v4 = objc_claimAutoreleasedReturnValue();
    v8[0] = MEMORY[0x24BDAC760];
    v8[1] = 3221225472;
    v8[2] = __105__HMDHome_AccessoryRetrieval___retrieveHAPAccessoryForHMDHAPAccessory_linkType_forceRetrieve_completion___block_invoke_2;
    v8[3] = &unk_24E795658;
    v5 = *(void **)(a1 + 40);
    v8[4] = *(_QWORD *)(a1 + 32);
    v6 = v5;
    v7 = *(_QWORD *)(a1 + 48);
    v9 = v6;
    v11 = v7;
    v10 = v3;
    dispatch_async(v4, v8);

  }
}

uint64_t __105__HMDHome_AccessoryRetrieval___retrieveHAPAccessoryForHMDHAPAccessory_linkType_forceRetrieve_completion___block_invoke_2(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_dequeueRetrievalForAccessory:linkType:error:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 48));
}

uint64_t __76__HMDHome_AccessoryRetrieval___dequeueRetrievalForAccessory_linkType_error___block_invoke(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, _QWORD))(a2 + 16))(a2, *(_QWORD *)(a1 + 32));
}

BOOL __74__HMDHome_AccessoryRetrieval___retrieveTupleForPrimaryAccessory_linkType___block_invoke(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  _BOOL8 v7;

  v3 = a2;
  objc_msgSend(v3, "accessory");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "uuid");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 32), "uuid");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v5, "isEqual:", v6))
    v7 = objc_msgSend(v3, "linkType") == *(_QWORD *)(a1 + 40);
  else
    v7 = 0;

  return v7;
}

- (void)configureSiriEndpointProfilesMessengerWithMessengerFactory:(id)a3 messageHandlerFactory:(id)a4
{
  id v6;
  id v7;
  void *v8;
  HMDHome *v9;
  NSObject *v10;
  void *v11;
  void *v12;
  uint64_t v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  int v22;
  void *v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v6 = a3;
  v7 = a4;
  v8 = (void *)MEMORY[0x227676638]();
  v9 = self;
  HMFGetOSLogHandle();
  v10 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v22 = 138543362;
    v23 = v11;
    _os_log_impl(&dword_2218F0000, v10, OS_LOG_TYPE_INFO, "%{public}@Configuring siri endpoint profiles messenger", (uint8_t *)&v22, 0xCu);

  }
  objc_autoreleasePoolPop(v8);
  -[HMDHome msgDispatcher](v9, "msgDispatcher");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHome primaryResidentMessageRouter](v9, "primaryResidentMessageRouter");
  v13 = objc_claimAutoreleasedReturnValue();
  if (!v12)
  {
    _HMFPreconditionFailure();
LABEL_7:
    _HMFPreconditionFailure();
  }
  v14 = (void *)v13;
  if (!v13)
    goto LABEL_7;
  v15 = (void *)MEMORY[0x24BDD79D8];
  -[HMDHome uuid](v9, "uuid");
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v15, "messageTargetUUIDWithHomeUUID:", v16);
  v17 = (void *)objc_claimAutoreleasedReturnValue();

  -[HMDHome uuid](v9, "uuid");
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "createSiriEndpointProfileMessageHandlerWithHomeUUID:", v18);
  v19 = (void *)objc_claimAutoreleasedReturnValue();

  -[HMDHome homeManager](v9, "homeManager");
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v19, "setDataSource:", v20);

  objc_msgSend(v6, "createSiriEndpointProfilesMessengerWithMessageTargetUUID:messageDispatcher:messageRouter:messageHandler:", v17, v12, v14, v19);
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v21, "registerForMessagesWithHome:", v9);
  -[HMDHome setSiriEndpointProfilesMessenger:](v9, "setSiriEndpointProfilesMessenger:", v21);

}

- (id)createSiriEndpointProfilesMessengerWithMessageTargetUUID:(id)a3 messageDispatcher:(id)a4 messageRouter:(id)a5 messageHandler:(id)a6
{
  id v9;
  id v10;
  id v11;
  id v12;
  HMDSiriEndpointProfilesMessenger *v13;

  v9 = a6;
  v10 = a5;
  v11 = a4;
  v12 = a3;
  v13 = -[HMDSiriEndpointProfilesMessenger initWithMessageTargetUUID:messageDispatcher:messageRouter:messageHandler:]([HMDSiriEndpointProfilesMessenger alloc], "initWithMessageTargetUUID:messageDispatcher:messageRouter:messageHandler:", v12, v11, v10, v9);

  return v13;
}

- (unint64_t)accessorySettingsLocalMessageHandler:(id)a3 callerPrivilegeWithMessage:(id)a4
{
  id v6;
  id v7;
  void *v8;
  void *v9;
  unint64_t v10;
  void *v11;
  HMDHome *v12;
  NSObject *v13;
  void *v14;
  int v16;
  void *v17;
  __int16 v18;
  id v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  v6 = a3;
  v7 = a4;
  objc_msgSend(v7, "userForHome:", self);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = v8;
  if (v8)
  {
    v10 = objc_msgSend(v8, "privilege");
  }
  else
  {
    v11 = (void *)MEMORY[0x227676638]();
    v12 = self;
    HMFGetOSLogHandle();
    v13 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      v16 = 138543618;
      v17 = v14;
      v18 = 2112;
      v19 = v7;
      _os_log_impl(&dword_2218F0000, v13, OS_LOG_TYPE_ERROR, "%{public}@Failed to get accessory settings local message handler caller privilege from message: %@", (uint8_t *)&v16, 0x16u);

    }
    objc_autoreleasePoolPop(v11);
    v10 = 2;
  }

  return v10;
}

- (void)configureUnifiedLanguageValueListSettingDataProviderWithFactory:(id)a3
{
  id v4;
  void *v5;
  HMDHome *v6;
  NSObject *v7;
  void *v8;
  void *v9;
  int v10;
  void *v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v4 = a3;
  v5 = (void *)MEMORY[0x227676638]();
  v6 = self;
  HMFGetOSLogHandle();
  v7 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v10 = 138543362;
    v11 = v8;
    _os_log_impl(&dword_2218F0000, v7, OS_LOG_TYPE_INFO, "%{public}@Configuring unified language value list setting data provider", (uint8_t *)&v10, 0xCu);

  }
  objc_autoreleasePoolPop(v5);
  objc_msgSend(v4, "createUnifiedLanguageValueListSettingDataProvider");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "setDataSource:", v6);
  -[HMDHome setUnifiedLanguageValueListSettingDataProvider:](v6, "setUnifiedLanguageValueListSettingDataProvider:", v9);

}

- (id)createUnifiedLanguageValueListSettingDataProvider
{
  return objc_alloc_init(HMDUnifiedLanguageValueListSettingDataProvider);
}

- (void)executeActionsFromMessage:(id)a3
{
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  uint64_t v8;
  void *v9;
  id v10;
  char isKindOfClass;
  void *v12;
  id v13;
  void *v14;
  char v15;
  BOOL v16;
  void *v17;
  NSObject *v18;
  NSObject *v19;
  void *v20;
  dispatch_group_t v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  void *v25;
  id v26;
  void *v27;
  id v28;
  id v29;
  void *v30;
  void *v31;
  void *v32;
  id v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  HMDHome *v38;
  NSObject *v39;
  void *v40;
  uint64_t v41;
  void *v42;
  HMDHome *v43;
  NSObject *v44;
  void *v45;
  id v46;
  void *v47;
  id v48;
  void *v49;
  void *v50;
  void *v51;
  HMDHome *v52;
  NSObject *v53;
  id v54;
  void *v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  void *v59;
  uint64_t v60;
  id v61;
  uint64_t v62;
  void *v63;
  __CFString *v64;
  __CFString *v65;
  NSObject *v66;
  void *v67;
  HMDHome *v68;
  NSObject *v69;
  id v70;
  void *v71;
  void *v72;
  void *v73;
  HMDHome *v74;
  NSObject *v75;
  void *v76;
  void *v77;
  HMDHome *v78;
  NSObject *v79;
  void *v80;
  void *v81;
  HMDHome *v82;
  NSObject *v83;
  void *v84;
  void *v85;
  void *v86;
  void *v87;
  HMDHome *v88;
  NSObject *v89;
  void *v90;
  void *v91;
  uint64_t v92;
  void *v93;
  uint64_t v94;
  void *v95;
  HMDHome *v96;
  NSObject *v97;
  void *v98;
  void *v99;
  NSObject *v100;
  __int128 v101;
  void *v102;
  uint64_t v103;
  void *v104;
  void *v105;
  void *v106;
  void *v107;
  void *v108;
  void *v109;
  NSObject *group;
  void *v111;
  void *v112;
  void *v113;
  id v114;
  id obj;
  void *v116;
  uint64_t v117;
  uint64_t v118;
  HMDHome *val;
  _QWORD block[4];
  id v121;
  id v122;
  _BYTE *v123;
  _QWORD v124[5];
  NSObject *v125;
  _BYTE *v126;
  _QWORD v127[4];
  id v128;
  id v129;
  id v130;
  id v131;
  NSObject *v132;
  _BYTE *v133;
  id v134;
  _QWORD v135[4];
  id v136;
  NSObject *v137;
  _BYTE *v138;
  id v139;
  _QWORD v140[4];
  id v141;
  id v142;
  NSObject *v143;
  _BYTE *v144;
  id v145;
  id location;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  __int128 v150;
  __int128 v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  uint8_t v158[4];
  id v159;
  __int16 v160;
  _BYTE v161[14];
  __int16 v162;
  HMDHome *v163;
  __int16 v164;
  uint64_t v165;
  uint8_t v166[128];
  _BYTE buf[24];
  uint64_t (*v168)(uint64_t, uint64_t);
  void (*v169)(uint64_t);
  id v170;
  _BYTE v171[128];
  uint64_t v172;

  v172 = *MEMORY[0x24BDAC8D0];
  v114 = a3;
  objc_msgSend(v114, "arrayForKey:", *MEMORY[0x24BDD5D48]);
  v104 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v104, "count"))
  {
    if ((objc_msgSend(v104, "hmf_objectsAreKindOfClass:", objc_opt_class()) & 1) != 0)
    {
      objc_msgSend(MEMORY[0x24BDBCE60], "date");
      v112 = (void *)objc_claimAutoreleasedReturnValue();
      v103 = parseMessageSource(v114);
      objc_msgSend(v114, "transport");
      v102 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x24BDBCEB8], "arrayWithCapacity:", objc_msgSend(v104, "count"));
      v106 = (void *)objc_claimAutoreleasedReturnValue();
      v153 = 0u;
      v154 = 0u;
      v151 = 0u;
      v152 = 0u;
      v4 = v104;
      v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v151, v171, 16);
      if (!v5)
        goto LABEL_17;
      v6 = *(_QWORD *)v152;
      while (2)
      {
        for (i = 0; i != v5; ++i)
        {
          if (*(_QWORD *)v152 != v6)
            objc_enumerationMutation(v4);
          v8 = *(_QWORD *)(*((_QWORD *)&v151 + 1) + 8 * i);
          -[HMDHome actionWithDictionaryRepresentation:](self, "actionWithDictionaryRepresentation:", v8);
          v9 = (void *)objc_claimAutoreleasedReturnValue();
          if (!v9)
          {
            v81 = (void *)MEMORY[0x227676638]();
            v82 = self;
            HMFGetOSLogHandle();
            v83 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v83, OS_LOG_TYPE_ERROR))
            {
              HMFGetLogIdentifier();
              v84 = (void *)objc_claimAutoreleasedReturnValue();
              *(_DWORD *)buf = 138543618;
              *(_QWORD *)&buf[4] = v84;
              *(_WORD *)&buf[12] = 2112;
              *(_QWORD *)&buf[14] = v8;
              _os_log_impl(&dword_2218F0000, v83, OS_LOG_TYPE_ERROR, "%{public}@Failed to deserialize action: %@", buf, 0x16u);

            }
            objc_autoreleasePoolPop(v81);
            objc_msgSend(MEMORY[0x24BDD1540], "hmErrorWithCode:", 3);
            v10 = (id)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v114, "respondWithError:", v10);
LABEL_91:

            goto LABEL_100;
          }
          v10 = v9;
          objc_opt_class();
          isKindOfClass = objc_opt_isKindOfClass();
          if ((isKindOfClass & 1) != 0)
            v12 = v10;
          else
            v12 = 0;
          v13 = v12;

          if ((isKindOfClass & 1) != 0)
          {
            objc_msgSend(v114, "proxyConnection");
            v14 = (void *)objc_claimAutoreleasedReturnValue();
            if (v14)
            {
              v15 = objc_msgSend(v114, "isEntitledForShortcutsAutomationAccess");

              if ((v15 & 1) == 0)
              {
                v87 = (void *)MEMORY[0x227676638]();
                v88 = self;
                HMFGetOSLogHandle();
                v89 = objc_claimAutoreleasedReturnValue();
                if (os_log_type_enabled(v89, OS_LOG_TYPE_ERROR))
                {
                  HMFGetLogIdentifier();
                  v90 = (void *)objc_claimAutoreleasedReturnValue();
                  *(_DWORD *)buf = 138543362;
                  *(_QWORD *)&buf[4] = v90;
                  _os_log_impl(&dword_2218F0000, v89, OS_LOG_TYPE_ERROR, "%{public}@Missing ShortcutsAutomationAccess Entitlement for Execute", buf, 0xCu);

                }
                objc_autoreleasePoolPop(v87);
                objc_msgSend(MEMORY[0x24BDD1540], "hmErrorWithCode:description:reason:suggestion:", 80, CFSTR("Missing Entitlement"), 0, 0);
                v91 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v114, "respondWithError:", v91);

                goto LABEL_91;
              }
            }
          }
          objc_msgSend(v106, "addObject:", v10);

        }
        v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v151, v171, 16);
        if (v5)
          continue;
        break;
      }
LABEL_17:

      v16 = -[HMDHome validateActionsDoNotConflict:](self, "validateActionsDoNotConflict:", v106);
      v17 = (void *)MEMORY[0x227676638]();
      val = self;
      HMFGetOSLogHandle();
      v18 = objc_claimAutoreleasedReturnValue();
      v19 = v18;
      if (v16)
      {
        if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
        {
          HMFGetLogIdentifier();
          v20 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543618;
          *(_QWORD *)&buf[4] = v20;
          *(_WORD *)&buf[12] = 2112;
          *(_QWORD *)&buf[14] = v106;
          _os_log_impl(&dword_2218F0000, v19, OS_LOG_TYPE_DEFAULT, "%{public}@Executing actions: %@", buf, 0x16u);

        }
        objc_autoreleasePoolPop(v17);
        *(_QWORD *)buf = 0;
        *(_QWORD *)&buf[8] = buf;
        *(_QWORD *)&buf[16] = 0x3032000000;
        v168 = __Block_byref_object_copy__254878;
        v169 = __Block_byref_object_dispose__254879;
        v170 = 0;
        -[HMDHome workQueue](val, "workQueue");
        v107 = (void *)objc_claimAutoreleasedReturnValue();
        v21 = dispatch_group_create();
        objc_msgSend(MEMORY[0x24BDBCEB8], "arrayWithCapacity:", objc_msgSend(v106, "count"));
        v116 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(MEMORY[0x24BDD1650], "strongToStrongObjectsMapTable");
        v113 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(MEMORY[0x24BDD1650], "strongToStrongObjectsMapTable");
        v108 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(MEMORY[0x24BDBCEB8], "array");
        v105 = (void *)objc_claimAutoreleasedReturnValue();
        v149 = 0u;
        v150 = 0u;
        v147 = 0u;
        v148 = 0u;
        obj = v106;
        v22 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v147, v166, 16);
        group = v21;
        if (!v22)
        {
LABEL_72:

          v66 = group;
          if (objc_msgSend(v116, "count"))
          {
            objc_initWeak(&location, val);
            dispatch_group_enter(group);
            v67 = (void *)MEMORY[0x227676638]();
            v68 = val;
            HMFGetOSLogHandle();
            v69 = (id)objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v69, OS_LOG_TYPE_INFO))
            {
              HMFGetLogIdentifier();
              v70 = (id)objc_claimAutoreleasedReturnValue();
              v156 = 0uLL;
              objc_msgSend(v114, "identifier");
              v71 = (void *)objc_claimAutoreleasedReturnValue();

              if (v71)
              {
                objc_msgSend(v114, "identifier");
                v72 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v72, "getUUIDBytes:", &v156);

              }
              else
              {
                v156 = *MEMORY[0x24BE3F2C8];
              }
              v155 = v156;
              v92 = objc_msgSend(v116, "count");
              *(_DWORD *)v158 = 138544386;
              v159 = v70;
              v160 = 1042;
              *(_DWORD *)v161 = 16;
              *(_WORD *)&v161[4] = 2098;
              *(_QWORD *)&v161[6] = &v155;
              v162 = 2114;
              v163 = v68;
              v164 = 2048;
              v165 = v92;
              _os_log_impl(&dword_2218F0000, v69, OS_LOG_TYPE_INFO, "%{public}@Executing write requests for request identifier %{public,uuid_t}.16P from home: %{public}@ count: %lu for characteristic write actions", v158, 0x30u);

            }
            objc_autoreleasePoolPop(v67);
            objc_msgSend(v114, "identifier");
            v93 = (void *)objc_claimAutoreleasedReturnValue();
            v94 = objc_msgSend(v114, "qualityOfService");
            v127[0] = MEMORY[0x24BDAC760];
            v127[1] = 3221225472;
            v127[2] = __56__HMDHome_HMActionExecution__executeActionsFromMessage___block_invoke_24;
            v127[3] = &unk_24E79C058;
            v128 = v107;
            objc_copyWeak(&v134, &location);
            v129 = v116;
            v130 = v108;
            v131 = v113;
            v133 = buf;
            v132 = group;
            -[HMDHome writeCharacteristicValues:source:identifier:transport:qualityOfService:withCompletionHandler:](v68, "writeCharacteristicValues:source:identifier:transport:qualityOfService:withCompletionHandler:", v129, v103, v93, v102, v94, v127);

            objc_destroyWeak(&v134);
            objc_destroyWeak(&location);
            v66 = group;
          }
          if ((objc_msgSend(v105, "hmf_isEmpty") & 1) == 0)
          {
            v95 = (void *)MEMORY[0x227676638]();
            v96 = val;
            HMFGetOSLogHandle();
            v97 = (id)objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v97, OS_LOG_TYPE_DEBUG))
            {
              HMFGetLogIdentifier();
              v98 = (void *)objc_claimAutoreleasedReturnValue();
              *(_DWORD *)v158 = 138543618;
              v159 = v98;
              v160 = 2112;
              *(_QWORD *)v161 = v105;
              _os_log_impl(&dword_2218F0000, v97, OS_LOG_TYPE_DEBUG, "%{public}@Executing matter natural lighting actions: %@", v158, 0x16u);

            }
            objc_autoreleasePoolPop(v95);
            dispatch_group_enter(group);
            -[HMDHome executeMatterNaturalLightingActions:](v96, "executeMatterNaturalLightingActions:", v105);
            v99 = (void *)objc_claimAutoreleasedReturnValue();
            v124[0] = MEMORY[0x24BDAC760];
            v124[1] = 3221225472;
            v124[2] = __56__HMDHome_HMActionExecution__executeActionsFromMessage___block_invoke_26;
            v124[3] = &unk_24E79C080;
            v124[4] = v96;
            v126 = buf;
            v125 = group;
            objc_msgSend(v99, "getResultWithCompletion:", v124);

            v66 = group;
          }
          -[HMDHome workQueue](val, "workQueue");
          v100 = objc_claimAutoreleasedReturnValue();
          block[0] = MEMORY[0x24BDAC760];
          block[1] = 3221225472;
          block[2] = __56__HMDHome_HMActionExecution__executeActionsFromMessage___block_invoke_28;
          block[3] = &unk_24E79C0A8;
          v121 = v114;
          v123 = buf;
          v122 = obj;
          dispatch_group_notify(v66, v100, block);

          _Block_object_dispose(buf, 8);
          goto LABEL_100;
        }
        v117 = *(_QWORD *)v148;
        *(_QWORD *)&v23 = 138544386;
        v101 = v23;
        while (2)
        {
          v118 = v22;
          v24 = 0;
LABEL_23:
          if (*(_QWORD *)v148 != v117)
            objc_enumerationMutation(obj);
          v25 = *(void **)(*((_QWORD *)&v147 + 1) + 8 * v24);
          objc_msgSend(v25, "configureWithHome:", val, v101);
          v26 = v25;
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) != 0)
            v27 = v26;
          else
            v27 = 0;
          v28 = v27;

          if (v28)
          {
            objc_msgSend(v28, "characteristic");
            v29 = (id)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v28, "targetValue");
            v30 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v29, "authorizationData");
            v31 = (void *)objc_claimAutoreleasedReturnValue();
            +[HMDCharacteristicWriteRequest writeRequestWithCharacteristic:value:authorizationData:type:](HMDCharacteristicWriteRequest, "writeRequestWithCharacteristic:value:authorizationData:type:", v29, v30, v31, 1);
            v32 = (void *)objc_claimAutoreleasedReturnValue();

            if (v32)
            {
              objc_msgSend(v116, "addObject:", v32);
              objc_msgSend(v113, "setObject:forKey:", v28, v32);
              goto LABEL_70;
            }

          }
          v33 = v26;
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) != 0)
            v34 = v33;
          else
            v34 = 0;
          v29 = v34;

          objc_msgSend(v29, "lightProfile");
          v35 = (void *)objc_claimAutoreleasedReturnValue();
          v32 = v35;
          if (v35)
          {
            if (objc_msgSend(v35, "supportsCHIP")
              && objc_msgSend(v32, "isNaturalLightingSupported"))
            {
              objc_msgSend(v105, "addObject:", v29);
              goto LABEL_70;
            }
            objc_msgSend(v29, "writeRequestForTransitionStartWithLightProfile:startDate:type:", v32, v112, 1);
            v36 = (void *)objc_claimAutoreleasedReturnValue();
            if (v36)
            {
              objc_msgSend(v108, "setObject:forKey:", v29, v36);
              objc_msgSend(v116, "addObject:", v36);
            }
            else
            {
              v42 = (void *)MEMORY[0x227676638]();
              v43 = val;
              HMFGetOSLogHandle();
              v44 = (id)objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v44, OS_LOG_TYPE_ERROR))
              {
                HMFGetLogIdentifier();
                v45 = (void *)objc_claimAutoreleasedReturnValue();
                *(_DWORD *)v158 = 138543618;
                v159 = v45;
                v160 = 2112;
                *(_QWORD *)v161 = v29;
                _os_log_impl(&dword_2218F0000, v44, OS_LOG_TYPE_ERROR, "%{public}@Failed to create characteristic write request for natural lighting action: %@", v158, 0x16u);

              }
              objc_autoreleasePoolPop(v42);
              v36 = 0;
            }
LABEL_69:

LABEL_70:
            if (v118 == ++v24)
            {
              v22 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v147, v166, 16);
              if (!v22)
                goto LABEL_72;
              continue;
            }
            goto LABEL_23;
          }
          break;
        }
        if (v29)
        {
          v37 = (void *)MEMORY[0x227676638]();
          v38 = val;
          HMFGetOSLogHandle();
          v39 = (id)objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v39, OS_LOG_TYPE_ERROR))
          {
            HMFGetLogIdentifier();
            v40 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)v158 = 138543618;
            v159 = v40;
            v160 = 2112;
            *(_QWORD *)v161 = v29;
            _os_log_impl(&dword_2218F0000, v39, OS_LOG_TYPE_ERROR, "%{public}@Skipping executing natural lighting action, missing light profile: %@", v158, 0x16u);

          }
          objc_autoreleasePoolPop(v37);
          objc_msgSend(MEMORY[0x24BDD1540], "hmErrorWithCode:", -1);
          v41 = objc_claimAutoreleasedReturnValue();
          v36 = *(void **)(*(_QWORD *)&buf[8] + 40);
          *(_QWORD *)(*(_QWORD *)&buf[8] + 40) = v41;
          goto LABEL_69;
        }
        v46 = v33;
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0)
          v47 = v46;
        else
          v47 = 0;
        v48 = v47;
        v109 = v46;

        if (v48)
        {
          objc_msgSend(v48, "convertedCharacteristicWriteRequests");
          v49 = (void *)objc_claimAutoreleasedReturnValue();
          v50 = v49;
          if (v49)
          {
            objc_msgSend(v49, "residualAction");
            v36 = (void *)objc_claimAutoreleasedReturnValue();

            objc_msgSend(v50, "characteristicWriteRequests");
            v111 = (void *)objc_claimAutoreleasedReturnValue();
            if (!v36)
            {
LABEL_58:

              goto LABEL_59;
            }
          }
          else
          {
            v111 = 0;
            v36 = v46;
          }
          objc_msgSend(v36, "setEncodePlaybackArchiveForExecution:", 1);
          goto LABEL_58;
        }
        v111 = 0;
        v36 = 0;
LABEL_59:
        objc_initWeak(&location, val);
        if (objc_msgSend(v111, "count"))
        {
          dispatch_group_enter(group);
          v51 = (void *)MEMORY[0x227676638]();
          v52 = val;
          HMFGetOSLogHandle();
          v53 = (id)objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v53, OS_LOG_TYPE_INFO))
          {
            HMFGetLogIdentifier();
            v54 = (id)objc_claimAutoreleasedReturnValue();
            v156 = 0uLL;
            objc_msgSend(v114, "identifier");
            v55 = (void *)objc_claimAutoreleasedReturnValue();

            if (v55)
            {
              objc_msgSend(v114, "identifier");
              v56 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v56, "getUUIDBytes:", &v156);

            }
            else
            {
              v156 = *MEMORY[0x24BE3F2C8];
            }
            v157 = v156;
            v57 = objc_msgSend(v111, "count");
            *(_DWORD *)v158 = v101;
            v159 = v54;
            v160 = 1042;
            *(_DWORD *)v161 = 16;
            *(_WORD *)&v161[4] = 2098;
            *(_QWORD *)&v161[6] = &v157;
            v162 = 2114;
            v163 = val;
            v164 = 2048;
            v165 = v57;
            _os_log_impl(&dword_2218F0000, v53, OS_LOG_TYPE_INFO, "%{public}@Executing write requests for request identifier %{public,uuid_t}.16P from home: %{public}@ count: %lu for media actions", v158, 0x30u);

          }
          objc_autoreleasePoolPop(v51);
          v58 = parseMessageSource(v114);
          objc_msgSend(v114, "identifier");
          v59 = (void *)objc_claimAutoreleasedReturnValue();
          v60 = objc_msgSend(v114, "qualityOfService");
          v140[0] = MEMORY[0x24BDAC760];
          v140[1] = 3221225472;
          v140[2] = __56__HMDHome_HMActionExecution__executeActionsFromMessage___block_invoke;
          v140[3] = &unk_24E79BFB8;
          v141 = v107;
          objc_copyWeak(&v145, &location);
          v61 = v111;
          v142 = v61;
          v144 = buf;
          v143 = group;
          -[HMDHome writeCharacteristicValues:source:identifier:transport:qualityOfService:withCompletionHandler:](v52, "writeCharacteristicValues:source:identifier:transport:qualityOfService:withCompletionHandler:", v61, v58, v59, v102, v60, v140);

          objc_destroyWeak(&v145);
        }
        objc_msgSend(v114, "clientName");
        v62 = objc_claimAutoreleasedReturnValue();
        v63 = (void *)v62;
        v64 = CFSTR("Unknown");
        if (v62)
          v64 = (__CFString *)v62;
        v65 = v64;

        dispatch_group_enter(group);
        v135[0] = MEMORY[0x24BDAC760];
        v135[1] = 3221225472;
        v135[2] = __56__HMDHome_HMActionExecution__executeActionsFromMessage___block_invoke_21;
        v135[3] = &unk_24E79C008;
        v136 = v107;
        objc_copyWeak(&v139, &location);
        v138 = buf;
        v137 = group;
        objc_msgSend(v109, "executeWithSource:clientName:completionHandler:", v103, v65, v135);

        objc_destroyWeak(&v139);
        objc_destroyWeak(&location);

        goto LABEL_69;
      }
      if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v85 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543362;
        *(_QWORD *)&buf[4] = v85;
        _os_log_impl(&dword_2218F0000, v19, OS_LOG_TYPE_ERROR, "%{public}@Failed to validate actions", buf, 0xCu);

      }
      objc_autoreleasePoolPop(v17);
      objc_msgSend(MEMORY[0x24BDD1540], "hmErrorWithCode:", 3);
      v86 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v114, "respondWithError:", v86);

LABEL_100:
    }
    else
    {
      v77 = (void *)MEMORY[0x227676638]();
      v78 = self;
      HMFGetOSLogHandle();
      v79 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v79, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v80 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        *(_QWORD *)&buf[4] = v80;
        *(_WORD *)&buf[12] = 2112;
        *(_QWORD *)&buf[14] = v114;
        _os_log_impl(&dword_2218F0000, v79, OS_LOG_TYPE_ERROR, "%{public}@Invalid actions payload: %@", buf, 0x16u);

      }
      objc_autoreleasePoolPop(v77);
      objc_msgSend(MEMORY[0x24BDD1540], "hmErrorWithCode:", 22);
      v112 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v114, "respondWithError:", v112);
    }
  }
  else
  {
    v73 = (void *)MEMORY[0x227676638]();
    v74 = self;
    HMFGetOSLogHandle();
    v75 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v75, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v76 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      *(_QWORD *)&buf[4] = v76;
      *(_WORD *)&buf[12] = 2112;
      *(_QWORD *)&buf[14] = v114;
      _os_log_impl(&dword_2218F0000, v75, OS_LOG_TYPE_ERROR, "%{public}@No Actions in message:(%@)", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v73);
    objc_msgSend(MEMORY[0x24BDD1540], "hmErrorWithCode:", 3);
    v112 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v114, "respondWithError:", v112);
  }

}

- (BOOL)validateActionsDoNotConflict:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t i;
  id v11;
  void *v12;
  id v13;
  id v14;
  id v15;
  void *v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t j;
  uint64_t v22;
  id v23;
  void *v24;
  void *v25;
  BOOL v26;
  void *v27;
  HMDHome *v28;
  NSObject *v29;
  void *v30;
  void *v32;
  HMDHome *v33;
  NSObject *v34;
  void *v35;
  void *v36;
  HMDHome *v37;
  NSObject *v38;
  void *v39;
  void *v40;
  void *v41;
  id v42;
  HMDHome *v43;
  void *v44;
  id obj;
  uint64_t v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  uint8_t v55[128];
  uint8_t buf[4];
  void *v57;
  __int16 v58;
  id v59;
  _BYTE v60[128];
  uint64_t v61;

  v61 = *MEMORY[0x24BDAC8D0];
  v4 = a3;
  if (!objc_msgSend(v4, "count"))
  {
    v26 = 1;
    goto LABEL_44;
  }
  objc_msgSend(MEMORY[0x24BDBCEF0], "set");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x24BDBCEF0], "set");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x24BDBCEF0], "set");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v51 = 0u;
  v52 = 0u;
  v53 = 0u;
  v54 = 0u;
  obj = v4;
  v8 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v51, v60, 16);
  if (!v8)
  {
    v26 = 1;
    goto LABEL_43;
  }
  v9 = v8;
  v43 = self;
  v44 = v7;
  v46 = *(_QWORD *)v52;
  while (2)
  {
    for (i = 0; i != v9; ++i)
    {
      if (*(_QWORD *)v52 != v46)
        objc_enumerationMutation(obj);
      v11 = *(id *)(*((_QWORD *)&v51 + 1) + 8 * i);
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0)
        v12 = v11;
      else
        v12 = 0;
      v13 = v12;

      if (v13)
      {
        objc_msgSend(v13, "characteristic");
        v14 = (id)objc_claimAutoreleasedReturnValue();
        if (!objc_msgSend(v5, "containsObject:", v14))
        {
          objc_msgSend(v5, "addObject:", v14);
          goto LABEL_34;
        }
        v32 = (void *)MEMORY[0x227676638]();
        v33 = v43;
        HMFGetOSLogHandle();
        v34 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR))
        {
          HMFGetLogIdentifier();
          v35 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543618;
          v57 = v35;
          v58 = 2112;
          v59 = v11;
          _os_log_impl(&dword_2218F0000, v34, OS_LOG_TYPE_ERROR, "%{public}@Conflicting action detected: %@", buf, 0x16u);

        }
        objc_autoreleasePoolPop(v32);
LABEL_41:

        v26 = 0;
        v7 = v44;
        goto LABEL_43;
      }
      v15 = v11;
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0)
        v16 = v15;
      else
        v16 = 0;
      v14 = v16;

      if (v14)
      {
        v49 = 0u;
        v50 = 0u;
        v47 = 0u;
        v48 = 0u;
        objc_msgSend(v14, "mediaProfiles");
        v17 = (id)objc_claimAutoreleasedReturnValue();
        v18 = objc_msgSend(v17, "countByEnumeratingWithState:objects:count:", &v47, v55, 16);
        if (v18)
        {
          v19 = v18;
          v41 = v5;
          v42 = v4;
          v20 = *(_QWORD *)v48;
          while (2)
          {
            for (j = 0; j != v19; ++j)
            {
              if (*(_QWORD *)v48 != v20)
                objc_enumerationMutation(v17);
              v22 = *(_QWORD *)(*((_QWORD *)&v47 + 1) + 8 * j);
              if (objc_msgSend(v6, "containsObject:", v22, v41, v42))
              {
                v27 = (void *)MEMORY[0x227676638]();
                v28 = v43;
                HMFGetOSLogHandle();
                v29 = objc_claimAutoreleasedReturnValue();
                if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
                {
                  HMFGetLogIdentifier();
                  v30 = (void *)objc_claimAutoreleasedReturnValue();
                  *(_DWORD *)buf = 138543618;
                  v57 = v30;
                  v58 = 2112;
                  v59 = v15;
                  _os_log_impl(&dword_2218F0000, v29, OS_LOG_TYPE_ERROR, "%{public}@Conflicting action detected: %@", buf, 0x16u);

                }
                objc_autoreleasePoolPop(v27);

                v13 = 0;
                v5 = v41;
                v4 = v42;
                goto LABEL_41;
              }
              objc_msgSend(v6, "addObject:", v22);
            }
            v19 = objc_msgSend(v17, "countByEnumeratingWithState:objects:count:", &v47, v55, 16);
            if (v19)
              continue;
            break;
          }
          v5 = v41;
          v4 = v42;
          v7 = v44;
        }
LABEL_32:

        goto LABEL_33;
      }
      v23 = v15;
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0)
        v24 = v23;
      else
        v24 = 0;
      v17 = v24;

      if (!v17)
        goto LABEL_32;
      objc_msgSend(v17, "accessory");
      v25 = (void *)objc_claimAutoreleasedReturnValue();
      if (objc_msgSend(v7, "containsObject:", v25))
      {
        v36 = (void *)MEMORY[0x227676638]();
        v37 = v43;
        HMFGetOSLogHandle();
        v38 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v38, OS_LOG_TYPE_ERROR))
        {
          HMFGetLogIdentifier();
          v39 = v5;
          v40 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543618;
          v57 = v40;
          v58 = 2112;
          v59 = v23;
          _os_log_impl(&dword_2218F0000, v38, OS_LOG_TYPE_ERROR, "%{public}@Conflicting action detected: %@", buf, 0x16u);

          v5 = v39;
        }

        objc_autoreleasePoolPop(v36);
        v14 = 0;
        v13 = 0;
        goto LABEL_41;
      }
      objc_msgSend(v7, "addObject:", v25);

      v14 = 0;
LABEL_33:
      v13 = 0;
LABEL_34:

    }
    v9 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v51, v60, 16);
    v26 = 1;
    if (v9)
      continue;
    break;
  }
LABEL_43:

LABEL_44:
  return v26;
}

void __56__HMDHome_HMActionExecution__executeActionsFromMessage___block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  NSObject *v7;
  id v8;
  id v9;
  id v10;
  __int128 v11;
  _QWORD block[4];
  id v13;
  id v14;
  id v15;
  __int128 v16;
  id v17;

  v5 = a2;
  v6 = a3;
  v7 = *(NSObject **)(a1 + 32);
  block[0] = MEMORY[0x24BDAC760];
  block[1] = 3221225472;
  block[2] = __56__HMDHome_HMActionExecution__executeActionsFromMessage___block_invoke_2;
  block[3] = &unk_24E79BF90;
  objc_copyWeak(&v17, (id *)(a1 + 64));
  v13 = v5;
  v14 = *(id *)(a1 + 40);
  v15 = v6;
  v11 = *(_OWORD *)(a1 + 48);
  v8 = (id)v11;
  v16 = v11;
  v9 = v6;
  v10 = v5;
  dispatch_async(v7, block);

  objc_destroyWeak(&v17);
}

void __56__HMDHome_HMActionExecution__executeActionsFromMessage___block_invoke_21(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  id v5;
  id v6;
  __int128 v7;
  _QWORD block[4];
  id v9;
  __int128 v10;
  id v11;

  v3 = a2;
  v4 = *(NSObject **)(a1 + 32);
  block[0] = MEMORY[0x24BDAC760];
  block[1] = 3221225472;
  block[2] = __56__HMDHome_HMActionExecution__executeActionsFromMessage___block_invoke_2_22;
  block[3] = &unk_24E79BFE0;
  objc_copyWeak(&v11, (id *)(a1 + 56));
  v9 = v3;
  v7 = *(_OWORD *)(a1 + 40);
  v5 = (id)v7;
  v10 = v7;
  v6 = v3;
  dispatch_async(v4, block);

  objc_destroyWeak(&v11);
}

void __56__HMDHome_HMActionExecution__executeActionsFromMessage___block_invoke_24(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  NSObject *v7;
  id v8;
  id v9;
  id v10;
  __int128 v11;
  _QWORD block[4];
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  __int128 v18;
  id v19;

  v5 = a2;
  v6 = a3;
  v7 = *(NSObject **)(a1 + 32);
  block[0] = MEMORY[0x24BDAC760];
  block[1] = 3221225472;
  block[2] = __56__HMDHome_HMActionExecution__executeActionsFromMessage___block_invoke_2_25;
  block[3] = &unk_24E79C030;
  objc_copyWeak(&v19, (id *)(a1 + 80));
  v13 = v5;
  v14 = *(id *)(a1 + 40);
  v15 = *(id *)(a1 + 48);
  v16 = v6;
  v17 = *(id *)(a1 + 56);
  v11 = *(_OWORD *)(a1 + 64);
  v8 = (id)v11;
  v18 = v11;
  v9 = v6;
  v10 = v5;
  dispatch_async(v7, block);

  objc_destroyWeak(&v19);
}

void __56__HMDHome_HMActionExecution__executeActionsFromMessage___block_invoke_26(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  id v8;
  NSObject *v9;
  void *v10;
  uint64_t v11;
  id *v12;
  uint64_t v13;
  int v14;
  void *v15;
  __int16 v16;
  id v17;
  __int16 v18;
  id v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  v5 = a2;
  v6 = a3;
  v7 = (void *)MEMORY[0x227676638]();
  v8 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v9 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
  {
    HMFGetLogIdentifier();
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v14 = 138543874;
    v15 = v10;
    v16 = 2112;
    v17 = v5;
    v18 = 2112;
    v19 = v6;
    _os_log_impl(&dword_2218F0000, v9, OS_LOG_TYPE_DEBUG, "%{public}@Finished execution of all matter natural lighting actions with response: %@ error: %@", (uint8_t *)&v14, 0x20u);

  }
  objc_autoreleasePoolPop(v7);
  if (v6)
  {
    v11 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
    v13 = *(_QWORD *)(v11 + 40);
    v12 = (id *)(v11 + 40);
    if (!v13)
      objc_storeStrong(v12, a3);
  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));

}

void __56__HMDHome_HMActionExecution__executeActionsFromMessage___block_invoke_28(uint64_t a1)
{
  void *v2;
  id v3;

  objc_msgSend(*(id *)(a1 + 32), "responseHandler");
  v2 = (void *)objc_claimAutoreleasedReturnValue();

  if (v2)
  {
    objc_msgSend(*(id *)(a1 + 32), "responseHandler");
    v3 = (id)objc_claimAutoreleasedReturnValue();
    (*((void (**)(id, _QWORD, _QWORD))v3 + 2))(v3, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), 0);

  }
}

void __56__HMDHome_HMActionExecution__executeActionsFromMessage___block_invoke_2_25(uint64_t a1)
{
  id WeakRetained;
  id v3;
  uint64_t i;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  char v10;
  id v11;
  void *v12;
  id v13;
  NSObject *v14;
  NSObject *v15;
  void *v16;
  NSObject *v17;
  os_log_type_t v18;
  const char *v19;
  uint32_t v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  id v26;
  NSObject *v27;
  NSObject *v28;
  void *v29;
  NSObject *v30;
  os_log_type_t v31;
  const char *v32;
  uint32_t v33;
  uint64_t v34;
  id *v35;
  uint64_t v36;
  id v37;
  id obj;
  id v39;
  uint64_t v40;
  uint64_t v41;
  id v42;
  id v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  uint8_t buf[4];
  void *v49;
  __int16 v50;
  void *v51;
  __int16 v52;
  id v53;
  _BYTE v54[128];
  uint64_t v55;

  v55 = *MEMORY[0x24BDAC8D0];
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 88));
  v3 = *(id *)(a1 + 32);
  v44 = 0u;
  v45 = 0u;
  v46 = 0u;
  v47 = 0u;
  obj = *(id *)(a1 + 40);
  v41 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v44, v54, 16);
  if (v41)
  {
    v40 = *(_QWORD *)v45;
    v37 = WeakRetained;
    do
    {
      for (i = 0; i != v41; ++i)
      {
        if (*(_QWORD *)v45 != v40)
          objc_enumerationMutation(obj);
        v5 = *(void **)(*((_QWORD *)&v44 + 1) + 8 * i);
        objc_msgSend(*(id *)(a1 + 48), "objectForKey:", v5);
        v6 = (void *)objc_claimAutoreleasedReturnValue();
        v7 = v6;
        if (v6)
        {
          v8 = *(void **)(a1 + 56);
          v9 = objc_msgSend(v6, "isNaturalLightingEnabled");
          v43 = 0;
          v10 = objc_msgSend(v8, "hmd_isValidResponseForWriteRequest:naturalLightingEnabled:error:", v5, v9, &v43);
          v11 = v43;
          v12 = (void *)MEMORY[0x227676638]();
          v13 = WeakRetained;
          HMFGetOSLogHandle();
          v14 = objc_claimAutoreleasedReturnValue();
          v15 = v14;
          if ((v10 & 1) != 0)
          {
            if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
            {
              HMFGetLogIdentifier();
              v16 = (void *)objc_claimAutoreleasedReturnValue();
              *(_DWORD *)buf = 138543618;
              v49 = v16;
              v50 = 2112;
              v51 = v7;
              v17 = v15;
              v18 = OS_LOG_TYPE_INFO;
              v19 = "%{public}@Successfully executed natural lighting action: %@";
              v20 = 22;
              goto LABEL_15;
            }
          }
          else if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
          {
            HMFGetLogIdentifier();
            v16 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 138543874;
            v49 = v16;
            v50 = 2112;
            v51 = v7;
            v52 = 2112;
            v53 = v11;
            v17 = v15;
            v18 = OS_LOG_TYPE_ERROR;
            v19 = "%{public}@Failed to execute natural lighting action %@:%@";
            v20 = 32;
LABEL_15:
            _os_log_impl(&dword_2218F0000, v17, v18, v19, buf, v20);

          }
          objc_autoreleasePoolPop(v12);
          if (v3)
            goto LABEL_24;
          goto LABEL_22;
        }
        v39 = v3;
        objc_msgSend(*(id *)(a1 + 64), "objectForKey:", v5);
        v21 = (void *)objc_claimAutoreleasedReturnValue();
        v22 = *(void **)(a1 + 56);
        objc_msgSend(v5, "characteristic");
        v23 = (void *)objc_claimAutoreleasedReturnValue();
        v42 = 0;
        objc_msgSend(v22, "hmd_valueOfCharacteristic:error:", v23, &v42);
        v24 = (void *)objc_claimAutoreleasedReturnValue();
        v11 = v42;

        v25 = (void *)MEMORY[0x227676638]();
        v26 = WeakRetained;
        HMFGetOSLogHandle();
        v27 = objc_claimAutoreleasedReturnValue();
        v28 = v27;
        if (v24)
        {
          if (!os_log_type_enabled(v27, OS_LOG_TYPE_INFO))
            goto LABEL_21;
          HMFGetLogIdentifier();
          v29 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543618;
          v49 = v29;
          v50 = 2112;
          v51 = v21;
          v30 = v28;
          v31 = OS_LOG_TYPE_INFO;
          v32 = "%{public}@Successfully executed characteristic write action: %@";
          v33 = 22;
        }
        else
        {
          if (!os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
            goto LABEL_21;
          HMFGetLogIdentifier();
          v29 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543874;
          v49 = v29;
          v50 = 2112;
          v51 = v21;
          v52 = 2112;
          v53 = v11;
          v30 = v28;
          v31 = OS_LOG_TYPE_ERROR;
          v32 = "%{public}@Failed to execute characteristic write action %@:%@";
          v33 = 32;
        }
        _os_log_impl(&dword_2218F0000, v30, v31, v32, buf, v33);

        WeakRetained = v37;
LABEL_21:

        objc_autoreleasePoolPop(v25);
        v3 = v39;
        if (v39)
          goto LABEL_24;
LABEL_22:
        if (v11)
          v3 = v11;
LABEL_24:

      }
      v41 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v44, v54, 16);
    }
    while (v41);
  }

  if (v3)
  {
    v34 = *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8);
    v36 = *(_QWORD *)(v34 + 40);
    v35 = (id *)(v34 + 40);
    if (!v36)
      objc_storeStrong(v35, v3);
  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 72));

}

void __56__HMDHome_HMActionExecution__executeActionsFromMessage___block_invoke_2_22(uint64_t a1)
{
  id WeakRetained;
  void *v3;
  id v4;
  NSObject *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  id *v9;
  uint64_t v10;
  int v11;
  void *v12;
  __int16 v13;
  uint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  if (*(_QWORD *)(a1 + 32))
  {
    v3 = (void *)MEMORY[0x227676638]();
    v4 = WeakRetained;
    HMFGetOSLogHandle();
    v5 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      v7 = *(_QWORD *)(a1 + 32);
      v11 = 138543618;
      v12 = v6;
      v13 = 2112;
      v14 = v7;
      _os_log_impl(&dword_2218F0000, v5, OS_LOG_TYPE_ERROR, "%{public}@Failed to execute action with error: %@", (uint8_t *)&v11, 0x16u);

    }
    objc_autoreleasePoolPop(v3);
    v8 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
    v10 = *(_QWORD *)(v8 + 40);
    v9 = (id *)(v8 + 40);
    if (!v10)
      objc_storeStrong(v9, *(id *)(a1 + 32));
  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));

}

void __56__HMDHome_HMActionExecution__executeActionsFromMessage___block_invoke_2(uint64_t a1)
{
  uint64_t v1;
  id WeakRetained;
  id v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  id v8;
  NSObject *v9;
  void *v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  void *v16;
  id v17;
  uint64_t i;
  uint64_t v19;
  void *v20;
  void *v21;
  uint64_t v22;
  void *v23;
  id v24;
  NSObject *v25;
  void *v26;
  id v27;
  uint64_t v28;
  id obj;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  id v36;
  uint64_t v37;
  id v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  uint8_t buf[4];
  void *v57;
  __int16 v58;
  void *v59;
  __int16 v60;
  uint64_t v61;
  __int16 v62;
  uint64_t v63;
  __int16 v64;
  uint64_t v65;
  _BYTE v66[128];
  _BYTE v67[128];
  _BYTE v68[128];
  uint64_t v69;

  v1 = a1;
  v69 = *MEMORY[0x24BDAC8D0];
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 72));
  v3 = *(id *)(v1 + 32);
  v38 = WeakRetained;
  if (v3)
  {
    v4 = v3;
    v5 = MEMORY[0x227676638]();
    v6 = WeakRetained;
    v7 = (void *)v5;
    v8 = v6;
    HMFGetOSLogHandle();
    v9 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v57 = v10;
      v58 = 2112;
      v59 = v4;
      _os_log_impl(&dword_2218F0000, v9, OS_LOG_TYPE_ERROR, "%{public}@Failed to execute write requests for converted media action with error: %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v7);
  }
  else
  {
    v28 = objc_msgSend(*(id *)(v1 + 40), "count");
    v52 = 0u;
    v53 = 0u;
    v54 = 0u;
    v55 = 0u;
    v12 = *(id *)(v1 + 48);
    v32 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v52, v68, 16);
    if (!v32)
    {

      v4 = 0;
      v27 = 0;
      goto LABEL_38;
    }
    v43 = 0;
    v4 = 0;
    obj = v12;
    v30 = *(_QWORD *)v53;
    v31 = v1;
    do
    {
      v13 = 0;
      do
      {
        if (*(_QWORD *)v53 != v30)
          objc_enumerationMutation(obj);
        v33 = v13;
        v39 = *(void **)(*((_QWORD *)&v52 + 1) + 8 * v13);
        objc_msgSend(*(id *)(v1 + 48), "hmf_dictionaryForKey:", v28);
        v14 = (void *)objc_claimAutoreleasedReturnValue();
        v48 = 0u;
        v49 = 0u;
        v50 = 0u;
        v51 = 0u;
        v36 = v14;
        v35 = objc_msgSend(v36, "countByEnumeratingWithState:objects:count:", &v48, v67, 16);
        if (v35)
        {
          v34 = *(_QWORD *)v49;
          do
          {
            v15 = 0;
            do
            {
              if (*(_QWORD *)v49 != v34)
                objc_enumerationMutation(v36);
              v37 = v15;
              v40 = *(_QWORD *)(*((_QWORD *)&v48 + 1) + 8 * v15);
              objc_msgSend(v36, "hmf_dictionaryForKey:");
              v16 = (void *)objc_claimAutoreleasedReturnValue();
              v44 = 0u;
              v45 = 0u;
              v46 = 0u;
              v47 = 0u;
              v17 = v16;
              v42 = objc_msgSend(v17, "countByEnumeratingWithState:objects:count:", &v44, v66, 16);
              if (v42)
              {
                v41 = *(_QWORD *)v45;
                do
                {
                  for (i = 0; i != v42; ++i)
                  {
                    if (*(_QWORD *)v45 != v41)
                      objc_enumerationMutation(v17);
                    v19 = *(_QWORD *)(*((_QWORD *)&v44 + 1) + 8 * i);
                    objc_msgSend(v17, "hmf_dictionaryForKey:", v19);
                    v20 = (void *)objc_claimAutoreleasedReturnValue();
                    objc_msgSend(v20, "hmf_dataForKey:", CFSTR("kCharacteristicErrorDataKey"));
                    v21 = (void *)objc_claimAutoreleasedReturnValue();
                    if (v21)
                    {
                      objc_msgSend(MEMORY[0x24BDD1620], "unarchivedObjectOfClass:fromData:error:", objc_opt_class(), v21, 0);
                      v22 = objc_claimAutoreleasedReturnValue();

                      v23 = (void *)MEMORY[0x227676638]();
                      v24 = WeakRetained;
                      HMFGetOSLogHandle();
                      v25 = objc_claimAutoreleasedReturnValue();
                      if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
                      {
                        HMFGetLogIdentifier();
                        v26 = (void *)objc_claimAutoreleasedReturnValue();
                        *(_DWORD *)buf = 138544386;
                        v57 = v26;
                        v58 = 2112;
                        v59 = v39;
                        v60 = 2112;
                        v61 = v40;
                        v62 = 2112;
                        v63 = v19;
                        v64 = 2112;
                        v65 = v22;
                        _os_log_impl(&dword_2218F0000, v25, OS_LOG_TYPE_ERROR, "%{public}@Failed to execute write requests for %@/%@/%@ with error: %@", buf, 0x34u);

                        WeakRetained = v38;
                      }
                      ++v43;

                      objc_autoreleasePoolPop(v23);
                      v4 = (void *)v22;
                    }

                  }
                  v42 = objc_msgSend(v17, "countByEnumeratingWithState:objects:count:", &v44, v66, 16);
                }
                while (v42);
              }

              v15 = v37 + 1;
            }
            while (v37 + 1 != v35);
            v35 = objc_msgSend(v36, "countByEnumeratingWithState:objects:count:", &v48, v67, 16);
          }
          while (v35);
        }

        v13 = v33 + 1;
        v1 = v31;
      }
      while (v33 + 1 != v32);
      v32 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v52, v68, 16);
    }
    while (v32);

    v27 = 0;
    if (!v28 || v28 != v43)
      goto LABEL_38;
    if (!v4)
      goto LABEL_6;
  }
  v11 = *(_QWORD *)(*(_QWORD *)(v1 + 64) + 8);
  if (!*(_QWORD *)(v11 + 40))
  {
    v27 = v4;
    v4 = *(void **)(v11 + 40);
    *(_QWORD *)(v11 + 40) = v27;
    WeakRetained = v38;
LABEL_38:

    v4 = v27;
    goto LABEL_39;
  }
LABEL_6:
  WeakRetained = v38;
LABEL_39:
  dispatch_group_leave(*(dispatch_group_t *)(v1 + 56));

}

@end
