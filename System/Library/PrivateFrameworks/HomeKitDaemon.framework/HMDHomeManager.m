@implementation HMDHomeManager

- (HMFTimer)remoteAccessHealthMonitorTimer
{
  return self->_remoteAccessHealthMonitorTimer;
}

- (void)timerDidFire:(id)a3
{
  id v4;
  NSObject *v5;
  id v6;
  id v7;
  id v8;
  id v9;
  id v10;
  void *v11;
  HMDHomeManager *v12;
  NSObject *v13;
  void *v14;
  void *v15;
  HMDHomeManager *v16;
  NSObject *v17;
  void *v18;
  void *v19;
  HMDHomeManager *v20;
  NSObject *v21;
  void *v22;
  void *v23;
  HMDHomeManager *v24;
  NSObject *v25;
  void *v26;
  int v27;
  void *v28;
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  v4 = a3;
  -[HMDHomeManager workQueue](self, "workQueue");
  v5 = objc_claimAutoreleasedReturnValue();
  dispatch_assert_queue_V2(v5);

  -[HMDHomeManager remoteAccessHealthMonitorTimer](self, "remoteAccessHealthMonitorTimer");
  v6 = (id)objc_claimAutoreleasedReturnValue();

  if (v6 == v4)
  {
    -[HMDHomeManager _remoteAccessHealthMonitorTimerDidFire:](self, "_remoteAccessHealthMonitorTimerDidFire:", v4);
  }
  else
  {
    -[HMDHomeManager watchPushDelayTimer](self, "watchPushDelayTimer");
    v7 = (id)objc_claimAutoreleasedReturnValue();

    if (v7 == v4)
    {
      v15 = (void *)MEMORY[0x227676638]();
      v16 = self;
      HMFGetOSLogHandle();
      v17 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
      {
        HMFGetLogIdentifier();
        v18 = (void *)objc_claimAutoreleasedReturnValue();
        v27 = 138543362;
        v28 = v18;
        _os_log_impl(&dword_2218F0000, v17, OS_LOG_TYPE_DEFAULT, "%{public}@Watch push delay timer fired, pushing to watches", (uint8_t *)&v27, 0xCu);

      }
      objc_autoreleasePoolPop(v15);
      -[HMDHomeManager _sendHomeDataToAllWatchesWithCompletion:](v16, "_sendHomeDataToAllWatchesWithCompletion:", 0);
    }
    else
    {
      -[HMDHomeManager debounceHomesUpdateTimer](self, "debounceHomesUpdateTimer");
      v8 = (id)objc_claimAutoreleasedReturnValue();

      if (v8 == v4)
      {
        v19 = (void *)MEMORY[0x227676638]();
        v20 = self;
        HMFGetOSLogHandle();
        v21 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
        {
          HMFGetLogIdentifier();
          v22 = (void *)objc_claimAutoreleasedReturnValue();
          v27 = 138543362;
          v28 = v22;
          _os_log_impl(&dword_2218F0000, v21, OS_LOG_TYPE_DEFAULT, "%{public}@Debounce homes update timer has fired, posting homed did update notification", (uint8_t *)&v27, 0xCu);

        }
        objc_autoreleasePoolPop(v19);
        -[HMDHomeManager _notifyXPCClientsOfHomeConfigurationChange](v20, "_notifyXPCClientsOfHomeConfigurationChange");
      }
      else
      {
        -[HMDHomeManager memoryMonitorLogEventTimer](self, "memoryMonitorLogEventTimer");
        v9 = (id)objc_claimAutoreleasedReturnValue();

        if (v9 == v4)
        {
          v23 = (void *)MEMORY[0x227676638]();
          v24 = self;
          HMFGetOSLogHandle();
          v25 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
          {
            HMFGetLogIdentifier();
            v26 = (void *)objc_claimAutoreleasedReturnValue();
            v27 = 138543362;
            v28 = v26;
            _os_log_impl(&dword_2218F0000, v25, OS_LOG_TYPE_DEFAULT, "%{public}@Memory monitor log event timer has fired", (uint8_t *)&v27, 0xCu);

          }
          objc_autoreleasePoolPop(v23);
          -[HMDHomeManager _monitorMemoryUsage](v24, "_monitorMemoryUsage");
          -[HMDHomeManager _updateHomesDiscoveredBonjourServicesMetrics](v24, "_updateHomesDiscoveredBonjourServicesMetrics");
        }
        else
        {
          -[HMDHomeManager debounceRegenerateAssistantSyncDataTimer](self, "debounceRegenerateAssistantSyncDataTimer");
          v10 = (id)objc_claimAutoreleasedReturnValue();

          if (v10 == v4)
          {
            v11 = (void *)MEMORY[0x227676638]();
            v12 = self;
            HMFGetOSLogHandle();
            v13 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
            {
              HMFGetLogIdentifier();
              v14 = (void *)objc_claimAutoreleasedReturnValue();
              v27 = 138543362;
              v28 = v14;
              _os_log_impl(&dword_2218F0000, v13, OS_LOG_TYPE_DEFAULT, "%{public}@Debounce Siri sync timer has fired, re-generating Siri sync data", (uint8_t *)&v27, 0xCu);

            }
            objc_autoreleasePoolPop(v11);
            -[HMDHomeManager _generateAssistantSyncDataAndIncrementVersion:requestSync:urgent:completion:](v12, "_generateAssistantSyncDataAndIncrementVersion:requestSync:urgent:completion:", 1, 1, 0, 0);
          }
        }
      }
    }
  }

}

- (OS_dispatch_queue)workQueue
{
  return self->_workQueue;
}

- (HMFTimer)debounceHomesUpdateTimer
{
  return self->_debounceHomesUpdateTimer;
}

- (HMFTimer)watchPushDelayTimer
{
  return self->_watchPushDelayTimer;
}

- (void)setBrowseAssertion:(id)a3
{
  objc_setProperty_atomic(self, a2, a3, 488);
}

- (HMFTimer)memoryMonitorLogEventTimer
{
  return self->_memoryMonitorLogEventTimer;
}

- (void)_remoteAccessHealthMonitorTimerDidFire:(id)a3
{
  id v4;
  void *v5;
  NSObject *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint8_t v17[128];
  uint8_t buf[4];
  void *v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  v4 = a3;
  v5 = (void *)MEMORY[0x227676638]();
  HMFGetOSLogHandle();
  v6 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    HMFGetLogIdentifier();
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543362;
    v19 = v7;
    _os_log_impl(&dword_2218F0000, v6, OS_LOG_TYPE_DEFAULT, "%{public}@Remote access health monitor timer fired, checking state for all homes", buf, 0xCu);

  }
  objc_autoreleasePoolPop(v5);
  v15 = 0u;
  v16 = 0u;
  v13 = 0u;
  v14 = 0u;
  -[HMDHomeManager homes](self, "homes", 0);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
  if (v9)
  {
    v10 = v9;
    v11 = *(_QWORD *)v14;
    do
    {
      v12 = 0;
      do
      {
        if (*(_QWORD *)v14 != v11)
          objc_enumerationMutation(v8);
        objc_msgSend(*(id *)(*((_QWORD *)&v13 + 1) + 8 * v12++), "remoteAccessHealthMonitorTimerDidFire");
      }
      while (v10 != v12);
      v10 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
    }
    while (v10);
  }

}

- (NSArray)homes
{
  os_unfair_lock_s *p_lock;
  void *v4;

  p_lock = &self->_lock;
  os_unfair_lock_lock_with_options();
  v4 = (void *)-[NSMutableArray copy](self->_homes, "copy");
  os_unfair_lock_unlock(p_lock);
  return (NSArray *)v4;
}

- (HMDMemoryUtilizationTracker)memoryTracker
{
  return self->_memoryTracker;
}

- (void)_monitorMemoryUsage
{
  id v2;

  -[HMDHomeManager memoryTracker](self, "memoryTracker");
  v2 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "trackMemoryUsageWithReason:", 1);

}

void __43__HMDHomeManager___removeActiveConnection___block_invoke(uint64_t a1)
{
  void *v2;
  id v3;
  NSObject *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  void *v13;
  uint8_t buf[4];
  void *v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  v2 = (void *)MEMORY[0x227676638]();
  v3 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    HMFGetLogIdentifier();
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543362;
    v15 = v5;
    _os_log_impl(&dword_2218F0000, v4, OS_LOG_TYPE_DEFAULT, "%{public}@Unregistering as home manager active because last active connection was removed", buf, 0xCu);

  }
  objc_autoreleasePoolPop(v2);
  objc_msgSend(*(id *)(a1 + 32), "browseAssertion");
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  if (v6)
  {
    objc_msgSend(*(id *)(a1 + 32), "accessoryBrowser");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 32), "browseAssertion");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "endActiveAssertion:", v8);

    objc_msgSend(*(id *)(a1 + 32), "setBrowseAssertion:", 0);
  }
  objc_msgSend(*(id *)(a1 + 40), "applicationBundleIdentifier");
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  if (v9)
  {
    objc_msgSend(*(id *)(a1 + 40), "applicationBundleIdentifier", CFSTR("HMDXPCConnectionBundleIdentifier"));
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v13 = v10;
    objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", &v13, &v12, 1);
    v9 = (void *)objc_claimAutoreleasedReturnValue();

  }
  objc_msgSend(*(id *)(a1 + 32), "notificationCenter");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "postNotificationName:object:userInfo:", CFSTR("HMDHomeManagerInactiveNotification"), *(_QWORD *)(a1 + 32), v9);

}

- (void)accountAvailabilityChanged:(id)a3
{
  id v4;
  void *v5;
  HMDHomeManager *v6;
  NSObject *v7;
  void *v8;
  void *v9;
  int v10;
  void *v11;
  __int16 v12;
  void *v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  v4 = a3;
  v5 = (void *)MEMORY[0x227676638]();
  v6 = self;
  HMFGetOSLogHandle();
  v7 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "name");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v10 = 138543618;
    v11 = v8;
    v12 = 2114;
    v13 = v9;
    _os_log_impl(&dword_2218F0000, v7, OS_LOG_TYPE_INFO, "%{public}@Received account availability changed notification: %{public}@", (uint8_t *)&v10, 0x16u);

  }
  objc_autoreleasePoolPop(v5);
  -[HMDHomeManager fetchAndUpdatePCSStatus](v6, "fetchAndUpdatePCSStatus");

}

- (HMDCloudAccount)cloudAccount
{
  return self->_cloudAccount;
}

- (HMDAccessoryBrowser)accessoryBrowserInternal
{
  return self->_accessoryBrowserInternal;
}

+ (id)logCategory
{
  if (logCategory__hmf_once_t13_228240 != -1)
    dispatch_once(&logCategory__hmf_once_t13_228240, &__block_literal_global_302_228241);
  return (id)logCategory__hmf_once_v14_228242;
}

- (void)__addActiveConnection:(id)a3
{
  id v4;
  char v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  NSObject *v11;
  _QWORD v12[5];
  id v13;

  v4 = a3;
  os_unfair_lock_lock_with_options();
  v5 = -[NSMutableSet hmf_isEmpty](self->_activeConnections, "hmf_isEmpty");
  if ((-[NSMutableSet containsObject:](self->_activeConnections, "containsObject:", v4) & 1) == 0)
  {
    -[NSMutableSet addObject:](self->_activeConnections, "addObject:", v4);
    objc_msgSend(v4, "sendPolicyParameters");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v7 = (void *)objc_msgSend(v6, "mutableCopy");

    objc_msgSend(v7, "setActive:", 1);
    objc_msgSend(v4, "updateSendPolicyParameters:", v7);
    +[HMDActiveXPCConnectionLogEvent initWithNewXPCConnectionAdded:](HMDActiveXPCConnectionLogEvent, "initWithNewXPCConnectionAdded:", v4);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHomeManager logEventSubmitter](self, "logEventSubmitter");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "submitLogEvent:", v8);

    -[HMDHomeManager notificationCenter](self, "notificationCenter");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "postNotificationName:object:", CFSTR("HMDHomeManagerConnectionActiveStateUpdatedNotification"), v4);

  }
  os_unfair_lock_unlock(&self->_lock);
  if ((v5 & 1) != 0)
  {
    -[HMDHomeManager workQueue](self, "workQueue");
    v11 = objc_claimAutoreleasedReturnValue();
    v12[0] = MEMORY[0x24BDAC760];
    v12[1] = 3221225472;
    v12[2] = __40__HMDHomeManager___addActiveConnection___block_invoke;
    v12[3] = &unk_24E79C268;
    v12[4] = self;
    v13 = v4;
    dispatch_async(v11, v12);

  }
}

- (BOOL)demoFinalized
{
  return self->_demoFinalized;
}

- (HMDMetricsManager)metricsManager
{
  return self->_metricsManager;
}

- (HMDCloudDataSyncStateFilter)cloudDataSyncStateFilter
{
  return self->_cloudDataSyncStateFilter;
}

- (id)browseAssertion
{
  return objc_getProperty(self, a2, 488, 1);
}

- (id)_statusPayloadForMessage:(id)a3
{
  id v4;
  void *v5;
  HMDHomeManager *v6;
  NSObject *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  int v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  char v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD v40[4];
  _QWORD v41[4];
  uint8_t buf[4];
  void *v43;
  __int16 v44;
  void *v45;
  __int16 v46;
  void *v47;
  __int16 v48;
  void *v49;
  uint64_t v50;

  v50 = *MEMORY[0x24BDAC8D0];
  v4 = a3;
  v39 = 0;
  v38 = -[HMDHomeManager statusForMessage:](self, "statusForMessage:", v4);
  v37 = 0;
  v5 = (void *)MEMORY[0x227676638](-[HMDHomeManager determineDataSyncSateForHH2:homeManagerDataSyncState:homeManagerStatus:](self, "determineDataSyncSateForHH2:homeManagerDataSyncState:homeManagerStatus:", &v37, &v39, &v38));
  v6 = self;
  HMFGetOSLogHandle();
  v7 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    HMFBooleanToString();
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    HMHomeManagerDataSyncStateToString();
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    HMHomeManagerStatusToString();
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138544130;
    v43 = v8;
    v44 = 2112;
    v45 = v9;
    v46 = 2112;
    v47 = v10;
    v48 = 2112;
    v49 = v11;
    _os_log_impl(&dword_2218F0000, v7, OS_LOG_TYPE_INFO, "%{public}@[CloudProgress: %@] [dataSyncState: %@] [HomeManager status : %@]", buf, 0x2Au);

  }
  objc_autoreleasePoolPop(v5);
  -[HMDHomeManager multiUserStatusController](v6, "multiUserStatusController");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v12, "didUpdateDataSyncState:", v39);

  if (enableRetailDemoSetup || -[HMDHomeManager demoFinalized](v6, "demoFinalized"))
  {
    v38 = 0;
    v39 = 1;
  }
  if (isInternalBuild())
  {
    objc_msgSend(MEMORY[0x24BE3F248], "sharedPreferences");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "preferenceForKey:", CFSTR("HMDHomeManagerForceOverrideDataSyncStateAndStatus"));
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    v15 = objc_msgSend(v14, "BOOLValue");

    if (v15)
    {
      objc_msgSend(MEMORY[0x24BE3F248], "sharedPreferences");
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v16, "preferenceForKey:", CFSTR("HMDHomeManagerDataSyncStateOverride"));
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v17, "numberValue");
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      v39 = objc_msgSend(v18, "unsignedIntegerValue");

      objc_msgSend(MEMORY[0x24BE3F248], "sharedPreferences");
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v19, "preferenceForKey:", CFSTR("HMDHomeManagerStatusOverride"));
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v20, "numberValue");
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      v38 = objc_msgSend(v21, "unsignedIntegerValue");

    }
  }
  -[HMDHomeManager metricsManager](v6, "metricsManager");
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v22, "deviceStateManager");
  v23 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v23, "updateWithDataSyncState:", v39);

  -[HMDHomeManager metricsManager](v6, "metricsManager");
  v24 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v24, "deviceStateManager");
  v25 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v25, "updateWithHomeManagerStatus:", v38);

  -[HMDHomeManager metricsManager](v6, "metricsManager");
  v26 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v26, "deviceStateManager");
  v27 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHomeManager hh2FrameworkSwitch](v6, "hh2FrameworkSwitch");
  v28 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v27, "updateHH2SentinelZoneExists:", objc_msgSend(v28, "checkExistenceOfHH2SentinelZone"));

  v40[0] = *MEMORY[0x24BDD5EA8];
  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedInteger:", v39);
  v29 = (void *)objc_claimAutoreleasedReturnValue();
  v41[0] = v29;
  v40[1] = *MEMORY[0x24BDD6140];
  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedInteger:", v38);
  v30 = (void *)objc_claimAutoreleasedReturnValue();
  v41[1] = v30;
  v40[2] = CFSTR("kConfigGenerationCounterKey");
  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedInteger:", -[HMDHomeManager generationCounter](v6, "generationCounter"));
  v31 = (void *)objc_claimAutoreleasedReturnValue();
  v41[2] = v31;
  v40[3] = *MEMORY[0x24BDD6058];
  v32 = (void *)MEMORY[0x24BDD16E0];
  -[HMDHomeManager multiUserStatusController](v6, "multiUserStatusController");
  v33 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v32, "numberWithInteger:", objc_msgSend(v33, "multiUserState"));
  v34 = (void *)objc_claimAutoreleasedReturnValue();
  v41[3] = v34;
  objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v41, v40, 4);
  v35 = (void *)objc_claimAutoreleasedReturnValue();

  return v35;
}

void __69__HMDHomeManager_SignificantTimeChange___handleSignificantTimeChange__block_invoke(uint64_t a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t i;
  void *v7;
  NSObject *v8;
  _QWORD block[5];
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _BYTE v14[128];
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  objc_msgSend(*(id *)(a1 + 32), "homes");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v2 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
  if (v2)
  {
    v3 = v2;
    v4 = *(_QWORD *)v11;
    v5 = MEMORY[0x24BDAC760];
    do
    {
      for (i = 0; i != v3; ++i)
      {
        if (*(_QWORD *)v11 != v4)
          objc_enumerationMutation(v1);
        v7 = *(void **)(*((_QWORD *)&v10 + 1) + 8 * i);
        objc_msgSend(v7, "workQueue");
        v8 = objc_claimAutoreleasedReturnValue();
        block[0] = v5;
        block[1] = 3221225472;
        block[2] = __69__HMDHomeManager_SignificantTimeChange___handleSignificantTimeChange__block_invoke_2;
        block[3] = &unk_24E79C240;
        block[4] = v7;
        dispatch_async(v8, block);

      }
      v3 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
    }
    while (v3);
  }

}

- (BOOL)cloudkitAccountStatusDetermined
{
  return self->_cloudkitAccountStatusDetermined;
}

- (BOOL)cacheUseAllowed
{
  return self->_cacheUseAllowed;
}

- (void)_handleSignificantTimeChange
{
  NSObject *v3;
  _QWORD block[5];

  -[HMDHomeManager workQueue](self, "workQueue");
  v3 = objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x24BDAC760];
  block[1] = 3221225472;
  block[2] = __69__HMDHomeManager_SignificantTimeChange___handleSignificantTimeChange__block_invoke;
  block[3] = &unk_24E79C240;
  block[4] = self;
  dispatch_async(v3, block);

}

- (void)setCacheUseAllowed:(BOOL)a3
{
  self->_cacheUseAllowed = a3;
}

- (void)__removeActiveConnection:(id)a3
{
  id v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  NSObject *v10;
  _QWORD v11[5];
  id v12;

  v4 = a3;
  os_unfair_lock_lock_with_options();
  if (-[NSMutableSet containsObject:](self->_activeConnections, "containsObject:", v4))
  {
    -[NSMutableSet removeObject:](self->_activeConnections, "removeObject:", v4);
    objc_msgSend(v4, "sendPolicyParameters");
    v5 = objc_claimAutoreleasedReturnValue();
    v6 = (void *)objc_msgSend((id)v5, "mutableCopy");

    objc_msgSend(v6, "setActive:", 0);
    objc_msgSend(v4, "updateSendPolicyParameters:", v6);
    LOBYTE(v5) = -[NSMutableSet hmf_isEmpty](self->_activeConnections, "hmf_isEmpty");
    +[HMDActiveXPCConnectionLogEvent initWithXPCConnectionRemoved:](HMDActiveXPCConnectionLogEvent, "initWithXPCConnectionRemoved:", v4);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHomeManager logEventSubmitter](self, "logEventSubmitter");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "submitLogEvent:", v7);

    -[HMDHomeManager notificationCenter](self, "notificationCenter");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "postNotificationName:object:", CFSTR("HMDHomeManagerConnectionActiveStateUpdatedNotification"), v4);

    os_unfair_lock_unlock(&self->_lock);
    if ((v5 & 1) != 0)
    {
      -[HMDHomeManager workQueue](self, "workQueue");
      v10 = objc_claimAutoreleasedReturnValue();
      v11[0] = MEMORY[0x24BDAC760];
      v11[1] = 3221225472;
      v11[2] = __43__HMDHomeManager___removeActiveConnection___block_invoke;
      v11[3] = &unk_24E79C268;
      v11[4] = self;
      v12 = v4;
      dispatch_async(v10, v11);

    }
  }
  else
  {
    os_unfair_lock_unlock(&self->_lock);
  }

}

- (id)makeMobileAssetManager
{
  HMDHomeManager *v2;
  id v3;

  v2 = self;
  v3 = sub_2219709DC();

  return v3;
}

- (void)networkDetectQueryWithCompletionHandler:(id)a3
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  HMDHomeManager *v13;
  uint64_t v14;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_25573FD20);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = _Block_copy(a3);
  v9 = swift_allocObject();
  *(_QWORD *)(v9 + 16) = v8;
  *(_QWORD *)(v9 + 24) = self;
  v10 = sub_222596EF4();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v7, 1, 1, v10);
  v11 = (_QWORD *)swift_allocObject();
  v11[2] = 0;
  v11[3] = 0;
  v11[4] = &unk_25573E848;
  v11[5] = v9;
  v12 = (_QWORD *)swift_allocObject();
  v12[2] = 0;
  v12[3] = 0;
  v12[4] = &unk_25573E850;
  v12[5] = v11;
  v13 = self;
  sub_2219F6010((uint64_t)v7, (uint64_t)&unk_25573E858, (uint64_t)v12);
  swift_release();
}

- (void)findAccessoriesNotOnWiFiWithCurrentWiFi:(HMFWiFiNetworkInfo *)a3 completionHandler:(id)a4
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  void *v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  HMFWiFiNetworkInfo *v15;
  HMDHomeManager *v16;
  uint64_t v17;

  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_25573FD20);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = _Block_copy(a4);
  v11 = (_QWORD *)swift_allocObject();
  v11[2] = a3;
  v11[3] = v10;
  v11[4] = self;
  v12 = sub_222596EF4();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v9, 1, 1, v12);
  v13 = (_QWORD *)swift_allocObject();
  v13[2] = 0;
  v13[3] = 0;
  v13[4] = &unk_25573E838;
  v13[5] = v11;
  v14 = (_QWORD *)swift_allocObject();
  v14[2] = 0;
  v14[3] = 0;
  v14[4] = &unk_25573E9C0;
  v14[5] = v13;
  v15 = a3;
  v16 = self;
  sub_2219F6010((uint64_t)v9, (uint64_t)&unk_25573FFC0, (uint64_t)v14);
  swift_release();
}

- (void)registerForSignificantTimeChangeNotification
{
  void *v3;
  HMDHomeManager *v4;
  NSObject *v5;
  void *v6;
  __CFNotificationCenter *DarwinNotifyCenter;
  int v8;
  void *v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  v3 = (void *)MEMORY[0x227676638](self, a2);
  v4 = self;
  HMFGetOSLogHandle();
  v5 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
  {
    HMFGetLogIdentifier();
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = 138543362;
    v9 = v6;
    _os_log_impl(&dword_2218F0000, v5, OS_LOG_TYPE_DEBUG, "%{public}@Registering for Significant time change event.", (uint8_t *)&v8, 0xCu);

  }
  objc_autoreleasePoolPop(v3);
  DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterAddObserver(DarwinNotifyCenter, v4, (CFNotificationCallback)significantTimeDidChangeNotification, CFSTR("SignificantTimeChangeNotification"), 0, CFNotificationSuspensionBehaviorDeliverImmediately);
}

- (void)deregisterForSignificantTimeChangeNotification
{
  void *v3;
  HMDHomeManager *v4;
  NSObject *v5;
  void *v6;
  __CFNotificationCenter *DarwinNotifyCenter;
  int v8;
  void *v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  v3 = (void *)MEMORY[0x227676638](self, a2);
  v4 = self;
  HMFGetOSLogHandle();
  v5 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
  {
    HMFGetLogIdentifier();
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = 138543362;
    v9 = v6;
    _os_log_impl(&dword_2218F0000, v5, OS_LOG_TYPE_DEBUG, "%{public}@De-Registering for Significant time change event.", (uint8_t *)&v8, 0xCu);

  }
  objc_autoreleasePoolPop(v3);
  DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterRemoveObserver(DarwinNotifyCenter, v4, CFSTR("SignificantTimeChangeNotification"), 0);
}

uint64_t __69__HMDHomeManager_SignificantTimeChange___handleSignificantTimeChange__block_invoke_2(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "handleSignificantTimeChange");
}

- (void)_registerForAppleMediaMessages
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  _QWORD v8[2];

  v8[1] = *MEMORY[0x24BDAC8D0];
  +[HMDRemoteMessagePolicy defaultSecurePolicy](HMDMutableRemoteMessagePolicy, "defaultSecurePolicy");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "setRequiresAccountMessage:", 1);
  v4 = (void *)objc_msgSend(v3, "copy");
  -[HMDHomeManager messageDispatcher](self, "messageDispatcher");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v8[0] = v4;
  objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", v8, 1);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "registerForMessage:receiver:policies:selector:", CFSTR("HMDAM.g"), self, v6, sel__handleAppleMediaAccessoryDeviceInfoRequestMessage_);

  objc_msgSend(MEMORY[0x24BDD16D0], "defaultCenter");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "addObserver:selector:name:object:", self, sel__handleDeviceNotification_, CFSTR("HMDAppleAccountManagerResolved"), 0);
  objc_msgSend(v7, "addObserver:selector:name:object:", self, sel__handleAddedAccessory_, CFSTR("HMDNotificationHomeAddedAccessory"), 0);
  objc_msgSend(v7, "addObserver:selector:name:object:", self, sel__handleAppleMediaResidentCoreDataChanges_, *MEMORY[0x24BDBB458], 0);

}

- (void)_handleAppleMediaAccessoryDeviceInfoRequestMessage:(id)a3
{
  id v4;
  HMDAppleMediaDeviceInfo *v5;
  void *v6;
  HMDHomeManager *v7;
  NSObject *v8;
  void *v9;
  void *v10;
  void *v11;
  int v12;
  void *v13;
  HMDHomeManager *v14;
  NSObject *v15;
  void *v16;
  void *v17;
  void *v18;
  int v19;
  void *v20;
  __int16 v21;
  void *v22;
  __int16 v23;
  HMDAppleMediaDeviceInfo *v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v4 = a3;
  v5 = objc_alloc_init(HMDAppleMediaDeviceInfo);
  v6 = (void *)MEMORY[0x227676638]();
  v7 = self;
  HMFGetOSLogHandle();
  v8 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "shortDescription");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v19 = 138543874;
    v20 = v9;
    v21 = 2114;
    v22 = v10;
    v23 = 2112;
    v24 = v5;
    _os_log_impl(&dword_2218F0000, v8, OS_LOG_TYPE_INFO, "%{public}@Handling apple media accessory device info request message: %{public}@ with device info: %@", (uint8_t *)&v19, 0x20u);

  }
  objc_autoreleasePoolPop(v6);
  -[HMDAppleMediaDeviceInfo mediaRouteUUID](v5, "mediaRouteUUID");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v12 = objc_msgSend(v11, "hmf_isEqualToUUIDString:", CFSTR("00000000-0000-0000-0000-C2EE6102B308"));

  if (v12)
  {
    v13 = (void *)MEMORY[0x227676638]();
    v14 = v7;
    HMFGetOSLogHandle();
    v15 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "shortDescription");
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      v19 = 138543618;
      v20 = v16;
      v21 = 2114;
      v22 = v17;
      _os_log_impl(&dword_2218F0000, v15, OS_LOG_TYPE_ERROR, "%{public}@Failed to handle apple media accessory device info request message: %{public}@ due to invalid media remote identifier", (uint8_t *)&v19, 0x16u);

    }
    objc_autoreleasePoolPop(v13);
    objc_msgSend(MEMORY[0x24BDD1540], "hmfErrorWithCode:", 15);
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "respondWithError:", v18);
  }
  else
  {
    -[HMDAppleMediaDeviceInfo asPayload](v5, "asPayload");
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "respondWithPayload:", v18);
  }

}

- (void)_handleDeviceNotification:(id)a3
{
  id v4;
  void *v5;
  _QWORD v6[4];
  id v7;
  id location;

  v4 = a3;
  objc_initWeak(&location, self);
  -[HMDHomeManager workContext](self, "workContext");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6[0] = MEMORY[0x24BDAC760];
  v6[1] = 3221225472;
  v6[2] = __56__HMDHomeManager_AppleMedia___handleDeviceNotification___block_invoke;
  v6[3] = &unk_24E797318;
  objc_copyWeak(&v7, &location);
  objc_msgSend(v5, "performBlock:", v6);

  objc_destroyWeak(&v7);
  objc_destroyWeak(&location);

}

- (void)_handleAddedAccessory:(id)a3
{
  void *v4;
  void *v5;
  void *v6;
  id v7;
  void *v8;
  _QWORD v9[5];
  id v10;

  objc_msgSend(a3, "userInfo");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "objectForKeyedSubscript:", CFSTR("HMDNotificationAddedAccessoryKey"));
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v6 = v5;
  else
    v6 = 0;
  v7 = v6;

  if (v7)
  {
    -[HMDHomeManager workContext](self, "workContext");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v9[0] = MEMORY[0x24BDAC760];
    v9[1] = 3221225472;
    v9[2] = __52__HMDHomeManager_AppleMedia___handleAddedAccessory___block_invoke;
    v9[3] = &unk_24E79C268;
    v9[4] = self;
    v10 = v7;
    objc_msgSend(v8, "performBlock:", v9);

  }
}

- (id)queryDeviceCapabilities:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  int v7;
  HMDAppleMediaDeviceInfo *v8;
  void *v9;
  void *v10;
  HMDHomeManager *v11;
  NSObject *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  _QWORD v18[5];
  id v19;
  id v20;
  uint8_t buf[4];
  void *v22;
  __int16 v23;
  HMDAppleMediaDeviceInfo *v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v4 = a3;
  +[HMDAppleAccountManager sharedManager](HMDAppleAccountManager, "sharedManager");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "device");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = objc_msgSend(v4, "isEqual:", v6);

  if (v7)
  {
    v8 = objc_alloc_init(HMDAppleMediaDeviceInfo);
    objc_msgSend(v4, "modelIdentifier");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDAppleMediaDeviceInfo setModelID:](v8, "setModelID:", v9);

    v10 = (void *)MEMORY[0x227676638]();
    v11 = self;
    HMFGetOSLogHandle();
    v12 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      HMFGetLogIdentifier();
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v22 = v13;
      v23 = 2112;
      v24 = v8;
      _os_log_impl(&dword_2218F0000, v12, OS_LOG_TYPE_DEFAULT, "%{public}@Generating HMDAppleMediaDeviceInfo locally: %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v10);
    objc_msgSend(MEMORY[0x24BE3F180], "futureWithValue:", v8);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    -[HMDHomeManager workContext](self, "workContext");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    v16 = (void *)MEMORY[0x24BE3F180];
    v18[0] = MEMORY[0x24BDAC760];
    v18[1] = 3221225472;
    v18[2] = __54__HMDHomeManager_AppleMedia__queryDeviceCapabilities___block_invoke;
    v18[3] = &unk_24E796FD8;
    v18[4] = self;
    v19 = v4;
    v20 = v15;
    v8 = v15;
    objc_msgSend(v16, "inContext:perform:", v8, v18);
    v14 = (void *)objc_claimAutoreleasedReturnValue();

  }
  return v14;
}

- (id)updateMediaRouteIDOfDeviceWithIdentifier:(id)a3
{
  id v4;
  void *v5;
  HMDHomeManager *v6;
  NSObject *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  id v13;
  void *v14;
  void *v15;
  HMDHomeManager *v16;
  NSObject *v17;
  void *v18;
  uint64_t v19;
  _QWORD v21[4];
  id v22;
  id v23;
  id v24;
  uint8_t buf[4];
  void *v26;
  __int16 v27;
  id v28;
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  v4 = a3;
  v5 = (void *)MEMORY[0x227676638]();
  v6 = self;
  HMFGetOSLogHandle();
  v7 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543618;
    v26 = v8;
    v27 = 2112;
    v28 = v4;
    _os_log_impl(&dword_2218F0000, v7, OS_LOG_TYPE_INFO, "%{public}@Updating capabilities for device with identifier: %@", buf, 0x16u);

  }
  objc_autoreleasePoolPop(v5);
  +[HMDAccountRegistry sharedRegistry](HMDAccountRegistry, "sharedRegistry");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "deviceForIdentifier:", v4);
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v10)
  {
    v15 = (void *)MEMORY[0x227676638]();
    v16 = v6;
    HMFGetOSLogHandle();
    v17 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v26 = v18;
      v27 = 2112;
      v28 = v4;
      _os_log_impl(&dword_2218F0000, v17, OS_LOG_TYPE_ERROR, "%{public}@Unable to find device: %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v15);
    objc_msgSend(MEMORY[0x24BE3F180], "futureWithNoValue");
    v19 = objc_claimAutoreleasedReturnValue();
    goto LABEL_10;
  }
  if ((-[HMDHomeManager __shouldScanAndUpdateDeviceInfoForDevice:](v6, v10) & 1) == 0)
  {
    objc_msgSend(MEMORY[0x24BE3F180], "futureWithNoValue");
    v19 = objc_claimAutoreleasedReturnValue();
LABEL_10:
    v14 = (void *)v19;
    goto LABEL_11;
  }
  -[HMDHomeManager queryDeviceCapabilities:](v6, "queryDeviceCapabilities:", v10);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  +[HMCContext currentContext](HMCContext, "currentContext");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_initWeak((id *)buf, v6);
  v21[0] = MEMORY[0x24BDAC760];
  v21[1] = 3221225472;
  v21[2] = __71__HMDHomeManager_AppleMedia__updateMediaRouteIDOfDeviceWithIdentifier___block_invoke;
  v21[3] = &unk_24E778360;
  objc_copyWeak(&v24, (id *)buf);
  v22 = v4;
  v13 = v12;
  v23 = v13;
  objc_msgSend(v11, "inContext:then:", v13, v21);
  v14 = (void *)objc_claimAutoreleasedReturnValue();

  objc_destroyWeak(&v24);
  objc_destroyWeak((id *)buf);

LABEL_11:
  return v14;
}

- (void)updateAccessoryModelsFromContext:(id)a3
{
  id v4;
  void *v5;
  id v6;
  _QWORD v7[4];
  id v8;
  id location;

  v4 = a3;
  objc_msgSend(v4, "assertIsExecuting");
  if (!-[HMDHomeManager haveQueuedUpdateAccessories](self, "haveQueuedUpdateAccessories"))
  {
    -[HMDHomeManager setHaveQueuedUpdateAccessories:](self, "setHaveQueuedUpdateAccessories:", 1);
    objc_initWeak(&location, self);
    -[HMDHomeManager startupCompleted](self, "startupCompleted");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v7[0] = MEMORY[0x24BDAC760];
    v7[1] = 3221225472;
    v7[2] = __63__HMDHomeManager_AppleMedia__updateAccessoryModelsFromContext___block_invoke;
    v7[3] = &unk_24E796128;
    objc_copyWeak(&v8, &location);
    v6 = (id)objc_msgSend(v5, "inContext:then:", v4, v7);

    objc_destroyWeak(&v8);
    objc_destroyWeak(&location);
  }

}

- (void)_handleAppleMediaResidentCoreDataChanges:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  id v7;
  void *v8;
  int v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  id v14;
  void *v15;
  void *v16;
  void *v17;
  id v18;
  void *v19;
  uint64_t v20;
  void *v21;
  _QWORD v22[5];
  _QWORD v23[6];
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  char v27;

  v4 = a3;
  objc_msgSend(v4, "object");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v6 = v5;
  else
    v6 = 0;
  v7 = v6;

  +[HMDCoreData sharedInstance](HMDCoreData, "sharedInstance");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = objc_msgSend(v8, "isRelatedContext:", v7);

  if (v9)
  {
    v10 = (void *)MEMORY[0x227676638]();
    objc_msgSend(v4, "userInfo");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "objectForKeyedSubscript:", *MEMORY[0x24BDBB430]);
    v12 = (void *)objc_claimAutoreleasedReturnValue();

    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
      v13 = v12;
    else
      v13 = 0;
    v14 = v13;

    objc_msgSend(v4, "userInfo");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v15, "objectForKeyedSubscript:", *MEMORY[0x24BDBB598]);
    v16 = (void *)objc_claimAutoreleasedReturnValue();

    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
      v17 = v16;
    else
      v17 = 0;
    v18 = v17;

    v24 = 0;
    v25 = &v24;
    v26 = 0x2020000000;
    v27 = 0;
    objc_msgSend(v18, "setByAddingObjectsFromSet:", v14);
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    v20 = MEMORY[0x24BDAC760];
    v23[0] = MEMORY[0x24BDAC760];
    v23[1] = 3221225472;
    v23[2] = __71__HMDHomeManager_AppleMedia___handleAppleMediaResidentCoreDataChanges___block_invoke;
    v23[3] = &unk_24E778388;
    v23[4] = self;
    v23[5] = &v24;
    objc_msgSend(v19, "hmf_enumerateWithAutoreleasePoolUsingBlock:", v23);

    if (*((_BYTE *)v25 + 24))
    {
      -[HMDHomeManager workContext](self, "workContext");
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      v22[0] = v20;
      v22[1] = 3221225472;
      v22[2] = __71__HMDHomeManager_AppleMedia___handleAppleMediaResidentCoreDataChanges___block_invoke_87;
      v22[3] = &unk_24E79C240;
      v22[4] = self;
      objc_msgSend(v21, "performBlock:", v22);

    }
    _Block_object_dispose(&v24, 8);

    objc_autoreleasePoolPop(v10);
  }

}

void __71__HMDHomeManager_AppleMedia___handleAppleMediaResidentCoreDataChanges___block_invoke(uint64_t a1, void *a2, _BYTE *a3)
{
  id v5;
  void *v6;
  id v7;
  void *v8;
  void *v9;
  id v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  id v16;
  NSObject *v17;
  void *v18;
  int v19;
  void *v20;
  __int16 v21;
  void *v22;
  __int16 v23;
  void *v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v5 = a2;
  v6 = *(void **)(a1 + 32);
  v7 = v5;
  v8 = v7;
  if (v6)
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
      v9 = v8;
    else
      v9 = 0;
    v10 = v9;
    v11 = v10;
    if (v10)
    {
      objc_msgSend(v10, "castIfResident");
      v6 = (void *)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      v6 = 0;
    }

    if (v6)
    {
      objc_msgSend(v6, "device");
      v12 = (void *)objc_claimAutoreleasedReturnValue();

      if (!v12)
      {
        objc_msgSend(v6, "appleMediaAccessory");
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v13, "device");
        v14 = (void *)objc_claimAutoreleasedReturnValue();

        if (v14)
        {
          *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 1;
          *a3 = 1;
          v15 = (void *)MEMORY[0x227676638]();
          v16 = *(id *)(a1 + 32);
          HMFGetOSLogHandle();
          v17 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
          {
            HMFGetLogIdentifier();
            v18 = (void *)objc_claimAutoreleasedReturnValue();
            v19 = 138543874;
            v20 = v18;
            v21 = 2112;
            v22 = v6;
            v23 = 2112;
            v24 = v13;
            _os_log_impl(&dword_2218F0000, v17, OS_LOG_TYPE_INFO, "%{public}@Scheduling scan due to found resident with no device (%@) belonging to an apple media accessory with a device: %@", (uint8_t *)&v19, 0x20u);

          }
          objc_autoreleasePoolPop(v15);
        }

      }
    }
  }
  else
  {

  }
}

void __71__HMDHomeManager_AppleMedia___handleAppleMediaResidentCoreDataChanges___block_invoke_87(uint64_t a1)
{
  void *v1;
  id v2;

  v1 = *(void **)(a1 + 32);
  objc_msgSend(v1, "workContext");
  v2 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "updateAccessoryModelsFromContext:", v2);

}

uint64_t __63__HMDHomeManager_AppleMedia__updateAccessoryModelsFromContext___block_invoke(uint64_t a1, void *a2)
{
  id v3;
  id WeakRetained;
  void *v5;
  id v6;
  NSObject *v7;
  void *v8;
  void *v9;
  __int128 v11;
  void (*v12)(uint64_t);
  void *v13;
  id v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v3 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v5 = (void *)MEMORY[0x227676638]();
  v6 = WeakRetained;
  HMFGetOSLogHandle();
  v7 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
  {
    HMFGetLogIdentifier();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    LODWORD(v11) = 138543362;
    *(_QWORD *)((char *)&v11 + 4) = v8;
    _os_log_impl(&dword_2218F0000, v7, OS_LOG_TYPE_DEBUG, "%{public}@Scanning for accessories to update", (uint8_t *)&v11, 0xCu);

  }
  objc_autoreleasePoolPop(v5);
  if (v6)
  {
    objc_msgSend(v6, "workContext");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    *(_QWORD *)&v11 = MEMORY[0x24BDAC760];
    *((_QWORD *)&v11 + 1) = 3221225472;
    v12 = __58__HMDHomeManager_AppleMedia____scanForAccessoriesToUpdate__block_invoke;
    v13 = &unk_24E79C240;
    v14 = v6;
    objc_msgSend(v9, "performBlock:", &v11);

  }
  objc_msgSend(v6, "setHaveQueuedUpdateAccessories:", 0);

  return 1;
}

void __58__HMDHomeManager_AppleMedia____scanForAccessoriesToUpdate__block_invoke(uint64_t a1)
{
  void *v2;
  _QWORD v3[5];

  objc_msgSend(*(id *)(a1 + 32), "homes");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3[0] = MEMORY[0x24BDAC760];
  v3[1] = 3221225472;
  v3[2] = __58__HMDHomeManager_AppleMedia____scanForAccessoriesToUpdate__block_invoke_2;
  v3[3] = &unk_24E796220;
  v3[4] = *(_QWORD *)(a1 + 32);
  objc_msgSend(v2, "hmf_enumerateWithAutoreleasePoolUsingBlock:", v3);

}

void __58__HMDHomeManager_AppleMedia____scanForAccessoriesToUpdate__block_invoke_2(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;
  NSObject *v10;
  void *v11;
  void *v12;
  _QWORD v13[5];
  id v14;
  id v15;
  uint8_t buf[4];
  void *v17;
  __int16 v18;
  void *v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  v3 = a2;
  objc_msgSend(v3, "owner");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "account");
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v5, "modelIdentifier");
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  if (v6)
  {
    objc_msgSend(v3, "accessories");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v13[0] = MEMORY[0x24BDAC760];
    v13[1] = 3221225472;
    v13[2] = __58__HMDHomeManager_AppleMedia____scanForAccessoriesToUpdate__block_invoke_69;
    v13[3] = &unk_24E778338;
    v13[4] = *(_QWORD *)(a1 + 32);
    v14 = v3;
    v15 = v5;
    objc_msgSend(v7, "hmf_enumerateWithAutoreleasePoolUsingBlock:", v13);

  }
  else
  {
    v8 = (void *)MEMORY[0x227676638]();
    v9 = *(id *)(a1 + 32);
    HMFGetOSLogHandle();
    v10 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v3, "shortDescription");
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v17 = v11;
      v18 = 2112;
      v19 = v12;
      _os_log_impl(&dword_2218F0000, v10, OS_LOG_TYPE_ERROR, "%{public}@Not updating accessories for home %@ – ownerAccount.modelIdentifier is nil", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v8);
  }

}

void __58__HMDHomeManager_AppleMedia____scanForAccessoriesToUpdate__block_invoke_69(uint64_t a1, void *a2)
{
  void *v3;
  id v4;
  uint64_t v5;
  void *v6;
  id v7;
  id v8;
  id v9;
  void *v10;
  void *v11;
  void *v12;
  id v13;
  _QWORD v14[4];
  id v15;
  id v16;
  id v17;
  uint64_t v18;

  v13 = a2;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v3 = v13;
  else
    v3 = 0;
  v4 = v3;
  if (v4)
  {
    v5 = *(_QWORD *)(a1 + 32);
    v6 = *(void **)(a1 + 48);
    v7 = *(id *)(a1 + 40);
    v8 = v6;
    v9 = v4;
    if (v5)
    {
      objc_msgSend(v7, "homeManager");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v10, "backingStore");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v11, "context");
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      v14[0] = MEMORY[0x24BDAC760];
      v14[1] = 3221225472;
      v14[2] = __84__HMDHomeManager_AppleMedia____updateAccessoryDeviceForHome_ownerAccount_accessory___block_invoke;
      v14[3] = &unk_24E79A910;
      v15 = v8;
      v16 = v9;
      v17 = v7;
      v18 = v5;
      objc_msgSend(v12, "performBlock:", v14);

    }
  }

}

void __84__HMDHomeManager_AppleMedia____updateAccessoryDeviceForHome_ownerAccount_accessory___block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  id v13;
  NSObject *v14;
  void *v15;
  uint64_t v16;
  _QWORD v17[4];
  id v18;
  id v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  char v25;
  uint8_t buf[4];
  void *v27;
  __int16 v28;
  uint64_t v29;
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  objc_msgSend(*(id *)(a1 + 32), "modelIdentifier");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  +[HMCContext findAccountWithModelID:](HMCContext, "findAccountWithModelID:", v2);
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  if (v3)
  {
    v22 = 0;
    v23 = &v22;
    v24 = 0x2020000000;
    v25 = 0;
    objc_msgSend(v3, "devices");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    v17[0] = MEMORY[0x24BDAC760];
    v17[1] = 3221225472;
    v17[2] = __84__HMDHomeManager_AppleMedia____updateAccessoryDeviceForHome_ownerAccount_accessory___block_invoke_2;
    v17[3] = &unk_24E778310;
    v18 = *(id *)(a1 + 40);
    v21 = &v22;
    v5 = *(id *)(a1 + 48);
    v6 = *(_QWORD *)(a1 + 56);
    v19 = v5;
    v20 = v6;
    objc_msgSend(v4, "hmf_enumerateWithAutoreleasePoolUsingBlock:", v17);

    if (!*((_BYTE *)v23 + 24))
    {
      v12 = (void *)MEMORY[0x227676638](v7, v8, v9, v10, v11);
      v13 = *(id *)(a1 + 48);
      HMFGetOSLogHandle();
      v14 = (id)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v15 = (void *)objc_claimAutoreleasedReturnValue();
        v16 = *(_QWORD *)(a1 + 40);
        *(_DWORD *)buf = 138543618;
        v27 = v15;
        v28 = 2112;
        v29 = v16;
        _os_log_impl(&dword_2218F0000, v14, OS_LOG_TYPE_INFO, "%{public}@Unable to find MKFDevice for accessory %@", buf, 0x16u);

      }
      objc_autoreleasePoolPop(v12);
    }

    _Block_object_dispose(&v22, 8);
  }

}

void __84__HMDHomeManager_AppleMedia____updateAccessoryDeviceForHome_ownerAccount_accessory___block_invoke_2(uint64_t a1, void *a2, uint64_t a3, _BYTE *a4)
{
  id v6;
  void *v7;
  void *v8;
  void *v9;
  int v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  id v15;
  id v16;
  id v17;
  _QWORD v18[4];
  id v19;
  id v20;
  id v21;
  id v22;
  uint64_t v23;
  id v24;

  v6 = a2;
  objc_msgSend(v6, "mediaRouteID");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "UUIDString");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 32), "identifier");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = objc_msgSend(v8, "isEqual:", v9);

  if (v10)
  {
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24) = 1;
    *a4 = 1;
    objc_msgSend(v6, "databaseID");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "identifier");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 40), "backingStore");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "context");
    v14 = (void *)objc_claimAutoreleasedReturnValue();

    v18[0] = MEMORY[0x24BDAC760];
    v18[1] = 3221225472;
    v18[2] = __84__HMDHomeManager_AppleMedia____updateAccessoryDeviceForHome_ownerAccount_accessory___block_invoke_3;
    v18[3] = &unk_24E792F40;
    v19 = *(id *)(a1 + 32);
    v20 = v12;
    v21 = *(id *)(a1 + 40);
    v22 = v11;
    v23 = *(_QWORD *)(a1 + 48);
    v24 = v14;
    v15 = v14;
    v16 = v11;
    v17 = v12;
    objc_msgSend(v15, "performBlock:", v18);

  }
}

void __84__HMDHomeManager_AppleMedia____updateAccessoryDeviceForHome_ownerAccount_accessory___block_invoke_3(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  _BOOL4 v9;
  void *v10;
  _BOOL4 v11;
  void *v12;
  uint64_t v13;
  void *v14;
  void *v15;
  uint64_t v16;
  void *v17;
  int v18;
  void *v19;
  int v20;
  uint64_t v21;
  void *v22;
  id v23;
  NSObject *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  char v31;
  void *v32;
  id v33;
  NSObject *v34;
  NSObject *v35;
  void *v36;
  uint64_t v37;
  void *v38;
  void *v39;
  void *v40;
  id v41;
  NSObject *v42;
  void *v43;
  void *v44;
  void *v45;
  void *v46;
  id v47;
  NSObject *v48;
  void *v49;
  void *v50;
  void *v51;
  id v52;
  NSObject *v53;
  void *v54;
  void *v55;
  void *v56;
  id v57;
  NSObject *v58;
  void *v59;
  uint64_t v60;
  void *v61;
  void *v62;
  id v63;
  NSObject *v64;
  void *v65;
  void *v66;
  void *v67;
  void *v68;
  void *v69;
  uint8_t buf[4];
  void *v71;
  __int16 v72;
  uint64_t v73;
  __int16 v74;
  void *v75;
  __int16 v76;
  void *v77;
  uint64_t v78;

  v78 = *MEMORY[0x24BDAC8D0];
  objc_msgSend(*(id *)(a1 + 32), "uuid");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  +[HMCContext findAppleMediaAccessoryWithModelID:](HMCContext, "findAppleMediaAccessoryWithModelID:", v2);
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v3, "device");
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v3, "idsIdentifier");
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v3, "resident");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = v6;
  if (v6)
  {
    objc_msgSend(v6, "device");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = v8 != 0;

    objc_msgSend(v7, "idsIdentifier");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v11 = v10 != 0;

  }
  else
  {
    v11 = 1;
    v9 = 1;
  }
  +[HMDAccountRegistry sharedRegistry](HMDAccountRegistry, "sharedRegistry");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  v13 = a1;
  objc_msgSend(v12, "deviceForIdentifier:", *(_QWORD *)(a1 + 40));
  v14 = (void *)objc_claimAutoreleasedReturnValue();

  v15 = v14;
  objc_msgSend(v14, "globalDestination");
  v16 = objc_claimAutoreleasedReturnValue();
  v69 = v3;
  objc_msgSend(v3, "idsDestination");
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  v18 = HMFEqualObjects();

  v67 = (void *)v16;
  v68 = v7;
  if (v7)
  {
    objc_msgSend(v7, "idsDestination");
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    v20 = HMFEqualObjects();

  }
  else
  {
    v20 = 1;
  }
  v21 = v13;
  if (!v4 || !v5 || ((v18 ^ 1) & 1) != 0 || !v9 || !v11 || !v20)
  {
    +[HMCContext findDeviceWithDatabaseID:](HMCContext, "findDeviceWithDatabaseID:", *(_QWORD *)(v13 + 56));
    v30 = (void *)objc_claimAutoreleasedReturnValue();
    if (v30)
    {
      v28 = v15;
      v31 = -[HMDHomeManager __shouldScanAndUpdateDeviceInfoForDevice:](*(void **)(v13 + 64), v15);
      v32 = (void *)MEMORY[0x227676638]();
      v33 = *(id *)(v13 + 48);
      HMFGetOSLogHandle();
      v34 = objc_claimAutoreleasedReturnValue();
      v35 = v34;
      if ((v31 & 1) != 0)
      {
        v29 = v67;
        if (os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT))
        {
          HMFGetLogIdentifier();
          v36 = (void *)objc_claimAutoreleasedReturnValue();
          v37 = *(_QWORD *)(v13 + 32);
          *(_DWORD *)buf = 138543874;
          v71 = v36;
          v72 = 2112;
          v73 = v37;
          v74 = 2112;
          v75 = v30;
          _os_log_impl(&dword_2218F0000, v35, OS_LOG_TYPE_DEFAULT, "%{public}@Updating accessory %@ with device %@", buf, 0x20u);

        }
        objc_autoreleasePoolPop(v32);
        v25 = v69;
        objc_msgSend(v69, "setDevice:", v30);
        objc_msgSend(v69, "resident");
        v38 = (void *)objc_claimAutoreleasedReturnValue();

        if (v38)
        {
          objc_msgSend(v69, "resident");
          v39 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v39, "setDevice:", v30);

          v40 = (void *)MEMORY[0x227676638]();
          v41 = *(id *)(v21 + 48);
          HMFGetOSLogHandle();
          v42 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v42, OS_LOG_TYPE_DEFAULT))
          {
            HMFGetLogIdentifier();
            v43 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v69, "resident");
            v44 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 138543874;
            v71 = v43;
            v72 = 2112;
            v73 = (uint64_t)v44;
            v74 = 2112;
            v75 = v30;
            _os_log_impl(&dword_2218F0000, v42, OS_LOG_TYPE_DEFAULT, "%{public}@Updating accessory's resident %@ with device %@", buf, 0x20u);

          }
          objc_autoreleasePoolPop(v40);
          v25 = v69;
        }
        v26 = v68;
        if (v28)
        {
          objc_msgSend(v28, "idsIdentifier");
          v45 = (void *)objc_claimAutoreleasedReturnValue();
          if (v45)
          {
            v46 = (void *)MEMORY[0x227676638]();
            v47 = *(id *)(v21 + 48);
            HMFGetOSLogHandle();
            v48 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v48, OS_LOG_TYPE_DEFAULT))
            {
              HMFGetLogIdentifier();
              v49 = (void *)objc_claimAutoreleasedReturnValue();
              *(_DWORD *)buf = 138544130;
              v71 = v49;
              v72 = 2160;
              v73 = 1752392040;
              v74 = 2112;
              v75 = v45;
              v76 = 2112;
              v77 = v69;
              _os_log_impl(&dword_2218F0000, v48, OS_LOG_TYPE_DEFAULT, "%{public}@Setting IDS identifier=%{mask.hash}@ from apple media scan for accessory: %@", buf, 0x2Au);

            }
            objc_autoreleasePoolPop(v46);
            v25 = v69;
            objc_msgSend(v69, "setIdsIdentifier:", v45);
            objc_msgSend(v69, "resident");
            v50 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v50, "setIdsIdentifier:", v45);

          }
          if (v67)
          {
            v51 = (void *)MEMORY[0x227676638]();
            v52 = *(id *)(v21 + 48);
            HMFGetOSLogHandle();
            v53 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v53, OS_LOG_TYPE_DEFAULT))
            {
              HMFGetLogIdentifier();
              v54 = (void *)objc_claimAutoreleasedReturnValue();
              *(_DWORD *)buf = 138544130;
              v71 = v54;
              v72 = 2160;
              v73 = 1752392040;
              v74 = 2112;
              v75 = v67;
              v76 = 2112;
              v77 = v69;
              _os_log_impl(&dword_2218F0000, v53, OS_LOG_TYPE_DEFAULT, "%{public}@Setting IDS destination=%{mask.hash}@ from apple media scan for accessory: %@", buf, 0x2Au);

            }
            objc_autoreleasePoolPop(v51);
            v25 = v69;
            objc_msgSend(v69, "setIdsDestination:", v67);
            objc_msgSend(v69, "resident");
            v55 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v55, "setIdsDestination:", v67);

          }
        }
        else
        {
          v62 = (void *)MEMORY[0x227676638]();
          v63 = *(id *)(v21 + 48);
          HMFGetOSLogHandle();
          v64 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v64, OS_LOG_TYPE_ERROR))
          {
            HMFGetLogIdentifier();
            v65 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v30, "identifier");
            v66 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 138543618;
            v71 = v65;
            v72 = 2112;
            v73 = (uint64_t)v66;
            _os_log_impl(&dword_2218F0000, v64, OS_LOG_TYPE_ERROR, "%{public}@Unable to find device to set IDS identifiers: %@", buf, 0x16u);

          }
          objc_autoreleasePoolPop(v62);
          v25 = v69;
        }
        objc_msgSend(*(id *)(v21 + 72), "save");
      }
      else
      {
        v29 = v67;
        if (os_log_type_enabled(v34, OS_LOG_TYPE_INFO))
        {
          HMFGetLogIdentifier();
          v61 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543618;
          v71 = v61;
          v72 = 2112;
          v73 = (uint64_t)v28;
          _os_log_impl(&dword_2218F0000, v35, OS_LOG_TYPE_INFO, "%{public}@Do not update IDS tokens for MKF models for device: %@", buf, 0x16u);

        }
        objc_autoreleasePoolPop(v32);
        v26 = v68;
        v25 = v69;
      }
    }
    else
    {
      v56 = (void *)MEMORY[0x227676638]();
      v57 = *(id *)(v13 + 48);
      HMFGetOSLogHandle();
      v58 = objc_claimAutoreleasedReturnValue();
      v28 = v15;
      if (os_log_type_enabled(v58, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v59 = (void *)objc_claimAutoreleasedReturnValue();
        v60 = *(_QWORD *)(v13 + 56);
        *(_DWORD *)buf = 138543618;
        v71 = v59;
        v72 = 2112;
        v73 = v60;
        _os_log_impl(&dword_2218F0000, v58, OS_LOG_TYPE_ERROR, "%{public}@Lost the device that was here a second ago: %@", buf, 0x16u);

      }
      objc_autoreleasePoolPop(v56);
      v29 = v67;
      v26 = v68;
      v25 = v69;
    }

  }
  else
  {
    v22 = (void *)MEMORY[0x227676638]();
    v23 = *(id *)(v13 + 48);
    HMFGetOSLogHandle();
    v24 = objc_claimAutoreleasedReturnValue();
    v26 = v68;
    v25 = v69;
    if (os_log_type_enabled(v24, OS_LOG_TYPE_DEBUG))
    {
      HMFGetLogIdentifier();
      v27 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v71 = v27;
      v72 = 2112;
      v73 = (uint64_t)v69;
      _os_log_impl(&dword_2218F0000, v24, OS_LOG_TYPE_DEBUG, "%{public}@Not updating accessory because it and its resident already has a device and ids information set: %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v22);
    v28 = v15;
    v29 = v67;
  }

}

- (uint64_t)__shouldScanAndUpdateDeviceInfoForDevice:(void *)a1
{
  id v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  id v12;
  NSObject *v13;
  void *v14;
  void *v15;
  id v16;
  NSObject *v17;
  void *v18;
  _BYTE v20[24];
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  v3 = a2;
  v4 = v3;
  v5 = 0;
  if (a1 && v3)
  {
    objc_msgSend(v3, "productInfo");
    v6 = (void *)objc_claimAutoreleasedReturnValue();

    if (!v6)
    {
      v15 = (void *)MEMORY[0x227676638]();
      v16 = a1;
      HMFGetOSLogHandle();
      v17 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v18 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)v20 = 138543618;
        *(_QWORD *)&v20[4] = v18;
        *(_WORD *)&v20[12] = 2112;
        *(_QWORD *)&v20[14] = v4;
        _os_log_impl(&dword_2218F0000, v17, OS_LOG_TYPE_INFO, "%{public}@ProductInfo is not available for device: %@", v20, 0x16u);

      }
      objc_autoreleasePoolPop(v15);
      goto LABEL_13;
    }
    *(_OWORD *)v20 = *MEMORY[0x24BE3EF20];
    *(_QWORD *)&v20[16] = *(_QWORD *)(MEMORY[0x24BE3EF20] + 16);
    objc_msgSend(MEMORY[0x24BE3F270], "versionFromOperatingSystemVersion:", v20);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    *(_OWORD *)v20 = *MEMORY[0x24BE3EEE8];
    *(_QWORD *)&v20[16] = *(_QWORD *)(MEMORY[0x24BE3EEE8] + 16);
    objc_msgSend(MEMORY[0x24BE3F270], "versionFromOperatingSystemVersion:", v20);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "productInfo");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "softwareVersion");
    v10 = (void *)objc_claimAutoreleasedReturnValue();

    if (objc_msgSend(v10, "isAtLeastVersion:", v7)
      && objc_msgSend(v8, "isGreaterThanVersion:", v10))
    {
      v11 = (void *)MEMORY[0x227676638]();
      v12 = a1;
      HMFGetOSLogHandle();
      v13 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v14 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)v20 = 138543618;
        *(_QWORD *)&v20[4] = v14;
        *(_WORD *)&v20[12] = 2112;
        *(_QWORD *)&v20[14] = v10;
        _os_log_impl(&dword_2218F0000, v13, OS_LOG_TYPE_INFO, "%{public}@Scan and update device address for software version: %@", v20, 0x16u);

      }
      objc_autoreleasePoolPop(v11);

LABEL_13:
      v5 = 1;
      goto LABEL_14;
    }

    v5 = 0;
  }
LABEL_14:

  return v5;
}

uint64_t __71__HMDHomeManager_AppleMedia__updateMediaRouteIDOfDeviceWithIdentifier___block_invoke(uint64_t a1, void *a2)
{
  id v3;
  id WeakRetained;
  void *v5;
  id v6;
  NSObject *v7;
  void *v8;
  uint64_t v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  id v15;
  NSObject *v16;
  void *v17;
  uint64_t v18;
  void *v19;
  int v21;
  void *v22;
  __int16 v23;
  uint64_t v24;
  __int16 v25;
  id v26;
  uint64_t v27;

  v27 = *MEMORY[0x24BDAC8D0];
  v3 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  v5 = (void *)MEMORY[0x227676638]();
  v6 = WeakRetained;
  HMFGetOSLogHandle();
  v7 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
  {
    HMFGetLogIdentifier();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = *(_QWORD *)(a1 + 32);
    v21 = 138543874;
    v22 = v8;
    v23 = 2112;
    v24 = v9;
    v25 = 2112;
    v26 = v3;
    _os_log_impl(&dword_2218F0000, v7, OS_LOG_TYPE_DEBUG, "%{public}@Resolved capabilities for device %@: %@", (uint8_t *)&v21, 0x20u);

  }
  objc_autoreleasePoolPop(v5);
  objc_msgSend(v3, "modelID");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  +[HMCContext findDeviceWithModelID:](HMCContext, "findDeviceWithModelID:", v10);
  v11 = (void *)objc_claimAutoreleasedReturnValue();

  if (v11)
  {
    objc_msgSend(v11, "mediaRouteID");
    v12 = (void *)objc_claimAutoreleasedReturnValue();

    if (!v12)
    {
      objc_msgSend(v3, "mediaRouteUUID");
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v11, "setMediaRouteID:", v13);

    }
    objc_msgSend(*(id *)(a1 + 40), "save");
    objc_msgSend(v6, "updateAccessoryModelsFromContext:", *(_QWORD *)(a1 + 40));
  }
  else
  {
    v14 = (void *)MEMORY[0x227676638]();
    v15 = v6;
    HMFGetOSLogHandle();
    v16 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      v18 = *(_QWORD *)(a1 + 32);
      objc_msgSend(v3, "modelID");
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      v21 = 138543874;
      v22 = v17;
      v23 = 2112;
      v24 = v18;
      v25 = 2112;
      v26 = v19;
      _os_log_impl(&dword_2218F0000, v16, OS_LOG_TYPE_ERROR, "%{public}@Unable to find MKFDevice for device identifier: %@ -- modelID: %@", (uint8_t *)&v21, 0x20u);

    }
    objc_autoreleasePoolPop(v14);
  }

  return 1;
}

uint64_t __54__HMDHomeManager_AppleMedia__queryDeviceCapabilities___block_invoke(uint64_t a1)
{
  void *v2;
  id v3;
  NSObject *v4;
  void *v5;
  uint64_t v6;
  HMDRemoteDeviceMessageDestination *v7;
  void *v8;
  HMDRemoteDeviceMessageDestination *v9;
  void *v10;
  void *v11;
  id v12;
  uint64_t v13;
  void *v14;
  void *v15;
  id v16;
  void *v17;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(uint64_t, void *, void *);
  void *v22;
  id v23;
  uint64_t v24;
  id v25;
  id v26;
  _BYTE buf[12];
  __int16 v28;
  uint64_t v29;
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  v2 = (void *)MEMORY[0x227676638]();
  v3 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    HMFGetLogIdentifier();
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = *(_QWORD *)(a1 + 40);
    *(_DWORD *)buf = 138543618;
    *(_QWORD *)&buf[4] = v5;
    v28 = 2112;
    v29 = v6;
    _os_log_impl(&dword_2218F0000, v4, OS_LOG_TYPE_DEFAULT, "%{public}@Querying HMDAppleMediaDeviceInfo remotely to: %@", buf, 0x16u);

  }
  objc_autoreleasePoolPop(v2);
  v7 = [HMDRemoteDeviceMessageDestination alloc];
  objc_msgSend(*(id *)(a1 + 32), "uuid");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = -[HMDRemoteDeviceMessageDestination initWithTarget:device:](v7, "initWithTarget:device:", v8, *(_QWORD *)(a1 + 40));

  +[HMDRemoteMessage secureMessageWithName:qualityOfService:destination:messagePayload:restriction:](HMDRemoteMessage, "secureMessageWithName:qualityOfService:destination:messagePayload:restriction:", CFSTR("HMDAM.g"), -1, v9, MEMORY[0x24BDBD1B8], 9);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  *(_QWORD *)buf = 0;
  objc_msgSend(MEMORY[0x24BE3F180], "futureWithPromise:", buf);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v19 = MEMORY[0x24BDAC760];
  v20 = 3221225472;
  v21 = __54__HMDHomeManager_AppleMedia__queryDeviceCapabilities___block_invoke_76;
  v22 = &unk_24E78C6D8;
  v12 = *(id *)(a1 + 48);
  v13 = *(_QWORD *)(a1 + 32);
  v14 = *(void **)(a1 + 40);
  v23 = v12;
  v24 = v13;
  v25 = v14;
  v26 = *(id *)buf;
  objc_msgSend(v10, "setResponseHandler:", &v19);
  objc_msgSend(*(id *)(a1 + 32), "messageDispatcher", v19, v20, v21, v22);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v15, "sendMessage:", v10);

  v16 = v11;
  if (!v16)
    _HMFPreconditionFailure();
  v17 = v16;

  return 3;
}

void __54__HMDHomeManager_AppleMedia__queryDeviceCapabilities___block_invoke_76(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  uint64_t v7;
  void *v8;
  id v9;
  id v10;
  _QWORD v11[4];
  id v12;
  uint64_t v13;
  id v14;
  id v15;
  id v16;

  v5 = a2;
  v6 = a3;
  v11[0] = MEMORY[0x24BDAC760];
  v11[1] = 3221225472;
  v11[2] = __54__HMDHomeManager_AppleMedia__queryDeviceCapabilities___block_invoke_2;
  v11[3] = &unk_24E79AD20;
  v8 = *(void **)(a1 + 32);
  v7 = *(_QWORD *)(a1 + 40);
  v12 = v5;
  v13 = v7;
  v14 = *(id *)(a1 + 48);
  v15 = *(id *)(a1 + 56);
  v16 = v6;
  v9 = v6;
  v10 = v5;
  objc_msgSend(v8, "performBlock:", v11);

}

void __54__HMDHomeManager_AppleMedia__queryDeviceCapabilities___block_invoke_2(uint64_t a1)
{
  void *v2;
  id v3;
  NSObject *v4;
  void *v5;
  void *v6;
  HMDAppleMediaDeviceInfo *v7;
  HMDAppleMediaDeviceInfo *v8;
  void *v9;
  void *v10;
  id v11;
  NSObject *v12;
  void *v13;
  void *v14;
  int v15;
  void *v16;
  __int16 v17;
  void *v18;
  __int16 v19;
  HMDAppleMediaDeviceInfo *v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  if (*(_QWORD *)(a1 + 32))
  {
    v2 = (void *)MEMORY[0x227676638]();
    v3 = *(id *)(a1 + 40);
    HMFGetOSLogHandle();
    v4 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(*(id *)(a1 + 48), "identifier");
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      v7 = *(HMDAppleMediaDeviceInfo **)(a1 + 32);
      v15 = 138543874;
      v16 = v5;
      v17 = 2112;
      v18 = v6;
      v19 = 2112;
      v20 = v7;
      _os_log_impl(&dword_2218F0000, v4, OS_LOG_TYPE_ERROR, "%{public}@Query of HMDAppleDeviceInfo to %@ failed: %@", (uint8_t *)&v15, 0x20u);

    }
    objc_autoreleasePoolPop(v2);
    objc_msgSend(*(id *)(a1 + 56), "rejectWithError:", *(_QWORD *)(a1 + 32));
  }
  else
  {
    v8 = -[HMDAppleMediaDeviceInfo initWithPayload:]([HMDAppleMediaDeviceInfo alloc], "initWithPayload:", *(_QWORD *)(a1 + 64));
    objc_msgSend(*(id *)(a1 + 48), "modelIdentifier");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDAppleMediaDeviceInfo setModelID:](v8, "setModelID:", v9);

    v10 = (void *)MEMORY[0x227676638]();
    v11 = *(id *)(a1 + 40);
    HMFGetOSLogHandle();
    v12 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      HMFGetLogIdentifier();
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(*(id *)(a1 + 48), "identifier");
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      v15 = 138543874;
      v16 = v13;
      v17 = 2112;
      v18 = v14;
      v19 = 2112;
      v20 = v8;
      _os_log_impl(&dword_2218F0000, v12, OS_LOG_TYPE_DEFAULT, "%{public}@Query of HMDAppleDeviceInfo to %@ succeeded: %@", (uint8_t *)&v15, 0x20u);

    }
    objc_autoreleasePoolPop(v10);
    objc_msgSend(*(id *)(a1 + 56), "fulfillWithValue:", v8);

  }
}

void __52__HMDHomeManager_AppleMedia___handleAddedAccessory___block_invoke(uint64_t a1)
{
  void *v2;
  id v3;
  NSObject *v4;
  void *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  int v9;
  void *v10;
  __int16 v11;
  uint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v2 = (void *)MEMORY[0x227676638]();
  v3 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
  {
    HMFGetLogIdentifier();
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = *(_QWORD *)(a1 + 40);
    v9 = 138543618;
    v10 = v5;
    v11 = 2112;
    v12 = v6;
    _os_log_impl(&dword_2218F0000, v4, OS_LOG_TYPE_DEBUG, "%{public}@Scheduling scan due to accessory add: %@", (uint8_t *)&v9, 0x16u);

  }
  objc_autoreleasePoolPop(v2);
  v7 = *(void **)(a1 + 32);
  objc_msgSend(v7, "workContext");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "updateAccessoryModelsFromContext:", v8);

}

void __56__HMDHomeManager_AppleMedia___handleDeviceNotification___block_invoke(uint64_t a1)
{
  id *v1;
  id WeakRetained;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  _QWORD v8[4];
  id v9;
  id v10;

  v1 = (id *)(a1 + 32);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  +[HMDAppleAccountManager sharedManager](HMDAppleAccountManager, "sharedManager");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "account");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "modelIdentifier");
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  if (v5)
  {
    objc_msgSend(WeakRetained, "backingStore");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "context");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8[0] = MEMORY[0x24BDAC760];
    v8[1] = 3221225472;
    v8[2] = __56__HMDHomeManager_AppleMedia___handleDeviceNotification___block_invoke_2;
    v8[3] = &unk_24E7972B0;
    objc_copyWeak(&v10, v1);
    v9 = v5;
    objc_msgSend(v7, "performBlock:", v8);

    objc_destroyWeak(&v10);
  }

}

void __56__HMDHomeManager_AppleMedia___handleDeviceNotification___block_invoke_2(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  id WeakRetained;
  _QWORD v6[5];

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  +[HMCContext findAccountWithModelID:](HMCContext, "findAccountWithModelID:", *(_QWORD *)(a1 + 32));
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = v2;
  if (v2)
  {
    objc_msgSend(v2, "devices");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    v6[0] = MEMORY[0x24BDAC760];
    v6[1] = 3221225472;
    v6[2] = __56__HMDHomeManager_AppleMedia___handleDeviceNotification___block_invoke_3;
    v6[3] = &unk_24E781348;
    v6[4] = WeakRetained;
    objc_msgSend(v4, "hmf_enumerateWithAutoreleasePoolUsingBlock:", v6);

  }
}

void __56__HMDHomeManager_AppleMedia___handleDeviceNotification___block_invoke_3(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;
  id v10;

  v10 = a2;
  objc_msgSend(v10, "mediaRouteID");
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v3)
  {
    v8 = *(void **)(a1 + 32);
    objc_msgSend(v10, "identifier");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = (id)objc_msgSend(v8, "updateMediaRouteIDOfDeviceWithIdentifier:", v4);
    goto LABEL_8;
  }
  objc_msgSend(v10, "mediaRouteID");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  if ((objc_msgSend(v4, "hmf_isEqualToUUIDString:", CFSTR("20BC605A-C33B-4D36-B885-C2EE6102B308")) & 1) != 0)
  {
LABEL_8:

    goto LABEL_9;
  }
  objc_msgSend(v10, "mediaRouteID");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v5, "hmf_isEqualToUUIDString:", CFSTR("00000000-0000-0000-0000-C2EE6102B308")))
  {
LABEL_6:

    goto LABEL_8;
  }
  objc_msgSend(v10, "accessoryAppleMedia");
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v6)
  {
    v7 = *(void **)(a1 + 32);
    objc_msgSend(v7, "backingStore");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "context");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "updateAccessoryModelsFromContext:", v5);
    goto LABEL_6;
  }
LABEL_9:

}

- (void)dmHandleRequestAddHome:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  id v10;
  void *v11;
  uint64_t v12;
  void *v13;
  HMDHomeManager *v14;
  NSObject *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  char v20;
  id v21;
  void *v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  HMDHomeManagerHomeModel *v26;
  void *v27;
  HMDHomeManagerHomeModel *v28;
  HMDHomeManagerHomeHandle *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  uint64_t v34;
  void *v35;
  void *v36;
  void *v37;
  int v38;
  void *v39;
  char v40;
  uint64_t v41;
  void *v42;
  HMDHomeManager *v43;
  NSObject *v44;
  void *v45;
  void *v46;
  void *v47;
  HMDHomeManager *v48;
  NSObject *v49;
  void *v50;
  void *v51;
  HMDHomeManagerHomeModel *v52;
  uint64_t v53;
  HMDUser *v54;
  void *v55;
  HMDHomeManager *v56;
  NSObject *v57;
  void *v58;
  void *v59;
  uint64_t v60;
  void *v61;
  void *v62;
  id v63;
  void *v64;
  void *v65;
  void *v66;
  uint64_t v67;
  HMDHomeManager *v68;
  void *v69;
  void *v70;
  void *v71;
  HMDHomeManager *v72;
  NSObject *v73;
  void *v74;
  void *v75;
  void *v76;
  HMDHomeManager *v77;
  NSObject *v78;
  void *v79;
  void *v80;
  void *v81;
  HMDHomeManager *v82;
  NSObject *v83;
  void *v84;
  void *v85;
  void *v86;
  uint64_t v87;
  void *v88;
  void *v89;
  void *v90;
  HMDUser *v91;
  void *v92;
  char v93;
  void *v94;
  HMDHomeManagerHomeModel *v95;
  void *v96;
  void *v97;
  void *v98;
  void *v99;
  void *v100;
  _QWORD v101[5];
  id v102;
  id v103;
  id v104;
  id v105;
  id v106;
  id v107;
  HMDUser *v108;
  id v109;
  HMDHomeManagerHomeModel *v110;
  id v111;
  char v112;
  id v113;
  uint8_t buf[4];
  void *v115;
  __int16 v116;
  void *v117;
  __int16 v118;
  void *v119;
  uint64_t v120;

  v120 = *MEMORY[0x24BDAC8D0];
  v4 = a3;
  objc_msgSend(v4, "stringForKey:", CFSTR("kHomeName"));
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  if (v5)
  {
    -[HMDHomeManager homes](self, "homes");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v7 = objc_msgSend(v6, "count");
    v8 = maximumHomes;

    if (v7 < v8)
    {
      -[HMDHomeManager validateHomeName:](self, "validateHomeName:", v5);
      v9 = objc_claimAutoreleasedReturnValue();
      if (v9)
      {
        v10 = (id)v9;
        objc_msgSend(v4, "respondWithError:", v9);
LABEL_54:

        goto LABEL_55;
      }
      objc_msgSend(v4, "uuidForKey:", CFSTR("kNewObjectUUIDKey"));
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      if (v18)
      {
        +[HMDAppleAccountSettings sharedSettings](HMDAppleAccountSettings, "sharedSettings");
        v19 = (void *)objc_claimAutoreleasedReturnValue();
        v20 = objc_msgSend(v19, "isHomeEnabled");

        if ((v20 & 1) != 0)
        {
          v21 = objc_alloc(MEMORY[0x24BE3F138]);
          objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("add home %@"), v18);
          v22 = (void *)objc_claimAutoreleasedReturnValue();
          v23 = (void *)objc_msgSend(v21, "initWithName:", v22);

          -[HMDHomeManager hh2ControllerKey](self, "hh2ControllerKey");
          v100 = (void *)objc_claimAutoreleasedReturnValue();
          if (!v100)
          {
            v47 = (void *)MEMORY[0x227676638]();
            v48 = self;
            HMFGetOSLogHandle();
            v49 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v49, OS_LOG_TYPE_ERROR))
            {
              HMFGetLogIdentifier();
              v50 = (void *)objc_claimAutoreleasedReturnValue();
              *(_DWORD *)buf = 138543362;
              v115 = v50;
              _os_log_impl(&dword_2218F0000, v49, OS_LOG_TYPE_ERROR, "%{public}@Unable to get or create HH2 key.", buf, 0xCu);

            }
            objc_autoreleasePoolPop(v47);
            objc_msgSend(MEMORY[0x24BDD1540], "hmErrorWithCode:", 53);
            v51 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v4, "respondWithError:", v51);
            v10 = 0;
            goto LABEL_52;
          }
          v98 = v23;
          +[HMDHomeManagerHomeModel deriveUUIDFromHomeUUID:](HMDHomeManagerHomeModel, "deriveUUIDFromHomeUUID:", v18);
          v24 = objc_claimAutoreleasedReturnValue();
          objc_msgSend(MEMORY[0x24BDD1880], "UUID");
          v25 = objc_claimAutoreleasedReturnValue();
          v26 = [HMDHomeManagerHomeModel alloc];
          -[HMDHomeManager uuid](self, "uuid");
          v27 = (void *)objc_claimAutoreleasedReturnValue();
          v97 = (void *)v24;
          v28 = -[HMDBackingStoreModelObject initWithObjectChangeType:uuid:parentUUID:](v26, "initWithObjectChangeType:uuid:parentUUID:", 1, v24, v27);

          v96 = (void *)v25;
          v29 = -[HMDHomeManagerHomeHandle initWithBackingStoreUUID:homeUUID:]([HMDHomeManagerHomeHandle alloc], "initWithBackingStoreUUID:homeUUID:", v25, v18);
          -[HMDHomeManagerHomeModel setHandle:](v28, "setHandle:", v29);

          v95 = v28;
          -[HMDHomeManagerHomeModel handle](v28, "handle");
          v30 = (void *)objc_claimAutoreleasedReturnValue();
          v113 = 0;
          +[HMDBackingStore cdlsBackingStoreWithHandle:error:](HMDBackingStore, "cdlsBackingStoreWithHandle:error:", v30, &v113);
          v31 = (void *)objc_claimAutoreleasedReturnValue();
          v10 = v113;

          v99 = v31;
          if (!v31)
          {
            objc_msgSend(v4, "respondWithError:", v10);
            v51 = v97;
            v52 = v95;
LABEL_51:

            v23 = v98;
LABEL_52:

            goto LABEL_53;
          }
          objc_msgSend(v31, "homeManager");
          v32 = (void *)objc_claimAutoreleasedReturnValue();

          if (!v32)
            objc_msgSend(v31, "setHomeManager:", self);
          -[HMDHomeManager modelObjectWithChangeType:](self, "modelObjectWithChangeType:", 2);
          v33 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v33, "primaryHomeUUID");
          v34 = objc_claimAutoreleasedReturnValue();
          if (!v34)
            goto LABEL_18;
          v35 = (void *)v34;
          -[HMDHomeManager homes](self, "homes");
          v36 = v33;
          v37 = (void *)objc_claimAutoreleasedReturnValue();
          v38 = objc_msgSend(v37, "hmf_isEmpty");

          v33 = v36;
          if (!v38)
          {
            v40 = 0;
            v39 = v33;
            v33 = 0;
          }
          else
          {
LABEL_18:
            objc_msgSend(v18, "UUIDString");
            v39 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v33, "setPrimaryHomeUUID:", v39);
            v40 = 1;
          }

          objc_msgSend((id)objc_opt_class(), "accountHandleForOwner");
          v53 = objc_claimAutoreleasedReturnValue();
          v94 = (void *)v53;
          if (!v53
            && !+[HMDHomeManager areWeAllowingHomeKitToRunWithoutCloudKitForHH2](HMDHomeManager, "areWeAllowingHomeKitToRunWithoutCloudKitForHH2"))
          {
            v71 = (void *)MEMORY[0x227676638]();
            v72 = self;
            HMFGetOSLogHandle();
            v73 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v73, OS_LOG_TYPE_ERROR))
            {
              HMFGetLogIdentifier();
              v74 = v33;
              v75 = (void *)objc_claimAutoreleasedReturnValue();
              *(_DWORD *)buf = 138543362;
              v115 = v75;
              _os_log_impl(&dword_2218F0000, v73, OS_LOG_TYPE_ERROR, "%{public}@Unable to create home (cannot determine account handle for the owner).", buf, 0xCu);

              v33 = v74;
            }

            objc_autoreleasePoolPop(v71);
            objc_msgSend(MEMORY[0x24BDD1540], "hmErrorWithCode:", 75);
            v64 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v4, "respondWithError:", v64);
            v51 = v97;
            v52 = v95;
            goto LABEL_50;
          }
          v93 = v40;
          v54 = -[HMDUser initWithAccountHandle:homeUUID:pairingIdentity:privilege:]([HMDUser alloc], "initWithAccountHandle:homeUUID:pairingIdentity:privilege:", v53, v18, v100, 3);
          if (!_os_feature_enabled_impl())
          {
            -[HMDHomeManager uuid](self, "uuid");
            v65 = v33;
            v66 = (void *)objc_claimAutoreleasedReturnValue();
            +[HMDHome createNewHomeModelsWithModelID:parentModelID:name:acwgGroupResolvingKey:acwgIssuerPublicKeyExternalRepresentation:userUniqueIDForAccessories:ownedBy:](HMDHome, "createNewHomeModelsWithModelID:parentModelID:name:acwgGroupResolvingKey:acwgIssuerPublicKeyExternalRepresentation:userUniqueIDForAccessories:ownedBy:", v18, v66, v5, 0, 0, 0, v54);
            v67 = objc_claimAutoreleasedReturnValue();

            v33 = v65;
            LOBYTE(v87) = v93;
            v68 = self;
            v69 = (void *)v67;
            v70 = v65;
            v52 = v95;
            -[HMDHomeManager runTransactionForAddHomeMessage:withInitialHomeObjects:homeManagerModel:homeManagerHomeModel:homeBackingStore:homeUUID:makeNewHomePrimaryHome:](v68, "runTransactionForAddHomeMessage:withInitialHomeObjects:homeManagerModel:homeManagerHomeModel:homeBackingStore:homeUUID:makeNewHomePrimaryHome:", v4, v67, v70, v95, v99, v18, v87);
            v51 = v97;
            v64 = v54;
LABEL_49:

LABEL_50:
            goto LABEL_51;
          }
          v91 = v54;
          objc_msgSend(MEMORY[0x24BE3F178], "internalOnlyInitializer");
          v92 = (void *)objc_claimAutoreleasedReturnValue();
          v55 = (void *)MEMORY[0x227676638]();
          v56 = self;
          HMFGetOSLogHandle();
          v57 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v57, OS_LOG_TYPE_INFO))
          {
            HMFGetLogIdentifier();
            v89 = v33;
            v58 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v92, "UUID");
            v59 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 138543874;
            v115 = v58;
            v116 = 2112;
            v117 = v59;
            v118 = 2112;
            v119 = v18;
            _os_log_impl(&dword_2218F0000, v57, OS_LOG_TYPE_INFO, "%{public}@[NewFlow: %@] Creating ACWG keys for newly created home: %@", buf, 0x20u);

            v33 = v89;
          }

          objc_autoreleasePoolPop(v55);
          +[HMDACWGUtilities createGroupResolvingKey](HMDACWGUtilities, "createGroupResolvingKey");
          v90 = (void *)objc_claimAutoreleasedReturnValue();
          if (v90)
          {
            +[HMDHome createUserUniqueIDForAccessoriesWithoutDuplicatingExistingIDs:](HMDHome, "createUserUniqueIDForAccessoriesWithoutDuplicatingExistingIDs:", MEMORY[0x24BDBD1A8]);
            v60 = objc_claimAutoreleasedReturnValue();
            if (v60)
            {
              v61 = (void *)v60;
              +[HMDACWGKeyManager shared](HMDACWGKeyManager, "shared");
              v88 = (void *)objc_claimAutoreleasedReturnValue();
              v101[0] = MEMORY[0x24BDAC760];
              v101[1] = 3221225472;
              v101[2] = __51__HMDHomeManager_CoreData__dmHandleRequestAddHome___block_invoke;
              v101[3] = &unk_24E77CA98;
              v101[4] = v56;
              v102 = v10;
              v103 = v4;
              v104 = v18;
              v105 = v5;
              v62 = v90;
              v106 = v90;
              v63 = v61;
              v107 = v63;
              v64 = v91;
              v108 = v91;
              v109 = v33;
              v52 = v95;
              v110 = v95;
              v111 = v99;
              v112 = v93;
              objc_msgSend(v88, "getOrCreateIssuerKeyPairExternalRepresentationWithFlow:completionHandler:", v92, v101);

LABEL_48:
              v51 = v97;
              v69 = v92;
              goto LABEL_49;
            }
            v81 = (void *)MEMORY[0x227676638]();
            v82 = v56;
            HMFGetOSLogHandle();
            v83 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v83, OS_LOG_TYPE_ERROR))
            {
              HMFGetLogIdentifier();
              v84 = v33;
              v85 = (void *)objc_claimAutoreleasedReturnValue();
              *(_DWORD *)buf = 138543362;
              v115 = v85;
              _os_log_impl(&dword_2218F0000, v83, OS_LOG_TYPE_ERROR, "%{public}@Failed to create userUniqueIDForAccessories", buf, 0xCu);

              v33 = v84;
            }

            objc_autoreleasePoolPop(v81);
            objc_msgSend(MEMORY[0x24BDD1540], "hmPrivateErrorWithCode:description:underlyingError:", 9010, CFSTR("Failed to create userUniqueIDForAccessories. Try again."), 0);
            v86 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v4, "respondWithError:", v86);

            v63 = 0;
          }
          else
          {
            v76 = (void *)MEMORY[0x227676638]();
            v77 = v56;
            HMFGetOSLogHandle();
            v78 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v78, OS_LOG_TYPE_ERROR))
            {
              HMFGetLogIdentifier();
              v79 = v33;
              v80 = (void *)objc_claimAutoreleasedReturnValue();
              *(_DWORD *)buf = 138543362;
              v115 = v80;
              _os_log_impl(&dword_2218F0000, v78, OS_LOG_TYPE_ERROR, "%{public}@Failed to create ACWG group resolving key", buf, 0xCu);

              v33 = v79;
            }

            objc_autoreleasePoolPop(v76);
            objc_msgSend(MEMORY[0x24BDD1540], "hmPrivateErrorWithCode:description:underlyingError:", 9010, CFSTR("Failed to create ACWG group resolving key - Security framework probably failed to find sufficient random data. Try again."), 0);
            v63 = (id)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v4, "respondWithError:", v63);
          }
          v52 = v95;
          v62 = v90;
          v64 = v91;
          goto LABEL_48;
        }
        v42 = (void *)MEMORY[0x227676638]();
        v43 = self;
        HMFGetOSLogHandle();
        v44 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v44, OS_LOG_TYPE_ERROR))
        {
          HMFGetLogIdentifier();
          v45 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543362;
          v115 = v45;
          _os_log_impl(&dword_2218F0000, v44, OS_LOG_TYPE_ERROR, "%{public}@iCloud switch is not enabled. Not allowing to create a new home", buf, 0xCu);

        }
        objc_autoreleasePoolPop(v42);
        objc_msgSend(MEMORY[0x24BDD1540], "hmPrivateErrorWithCode:", 2013);
        v41 = objc_claimAutoreleasedReturnValue();
      }
      else
      {
        objc_msgSend(MEMORY[0x24BDD1540], "hmErrorWithCode:", 20);
        v41 = objc_claimAutoreleasedReturnValue();
      }
      v46 = (void *)v41;
      objc_msgSend(v4, "respondWithError:", v41);

      v10 = 0;
LABEL_53:

      goto LABEL_54;
    }
    v13 = (void *)MEMORY[0x227676638]();
    v14 = self;
    HMFGetOSLogHandle();
    v15 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v115 = v16;
      v116 = 2112;
      v117 = v5;
      _os_log_impl(&dword_2218F0000, v15, OS_LOG_TYPE_INFO, "%{public}@Can't add home %@; already at maximum homes",
        buf,
        0x16u);

    }
    objc_autoreleasePoolPop(v13);
    v11 = (void *)MEMORY[0x24BDD1540];
    v12 = 49;
  }
  else
  {
    v11 = (void *)MEMORY[0x24BDD1540];
    v12 = 20;
  }
  objc_msgSend(v11, "hmErrorWithCode:", v12);
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "respondWithError:", v17);

LABEL_55:
}

- (void)runTransactionForAddHomeMessage:(id)a3 withInitialHomeObjects:(id)a4 homeManagerModel:(id)a5 homeManagerHomeModel:(id)a6 homeBackingStore:(id)a7 homeUUID:(id)a8 makeNewHomePrimaryHome:(BOOL)a9
{
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  void *v21;
  void *v22;
  void *v23;
  uint64_t v24;
  id v25;
  id v26;
  id v27;
  id v28;
  _QWORD v29[4];
  id v30;
  HMDHomeManager *v31;
  id v32;
  id v33;
  BOOL v34;
  _QWORD v35[4];
  id v36;

  v15 = a3;
  v16 = a5;
  v17 = a7;
  v18 = a8;
  v19 = a6;
  v20 = a4;
  -[HMDHomeManager backingStore](self, "backingStore");
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  +[HMDBackingStoreTransactionOptions defaultXPCOptions](HMDBackingStoreTransactionOptions, "defaultXPCOptions");
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v21, "transaction:options:", CFSTR("HomeModelAddition"), v22);
  v23 = (void *)objc_claimAutoreleasedReturnValue();

  v24 = MEMORY[0x24BDAC760];
  v35[0] = MEMORY[0x24BDAC760];
  v35[1] = 3221225472;
  v35[2] = __170__HMDHomeManager_CoreData__runTransactionForAddHomeMessage_withInitialHomeObjects_homeManagerModel_homeManagerHomeModel_homeBackingStore_homeUUID_makeNewHomePrimaryHome___block_invoke;
  v35[3] = &unk_24E77CAC0;
  v25 = v23;
  v36 = v25;
  objc_msgSend(v20, "hmf_enumerateWithAutoreleasePoolUsingBlock:", v35);

  objc_msgSend(v25, "add:withMessage:", v19, v15);
  if (v16)
    objc_msgSend(v25, "add:", v16);
  v29[0] = v24;
  v29[1] = 3221225472;
  v29[2] = __170__HMDHomeManager_CoreData__runTransactionForAddHomeMessage_withInitialHomeObjects_homeManagerModel_homeManagerHomeModel_homeBackingStore_homeUUID_makeNewHomePrimaryHome___block_invoke_2;
  v29[3] = &unk_24E77CAE8;
  v30 = v17;
  v31 = self;
  v32 = v15;
  v33 = v18;
  v34 = a9;
  v26 = v18;
  v27 = v15;
  v28 = v17;
  objc_msgSend(v25, "run:", v29);

}

- (id)hh2ControllerKey
{
  void *v3;
  char v4;
  id v5;
  id v6;
  void *v7;
  HMDHomeManager *v8;
  NSObject *v9;
  NSObject *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  id v16;
  id v17;
  uint8_t buf[4];
  void *v19;
  __int16 v20;
  id v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  objc_msgSend(MEMORY[0x24BE1BC08], "systemStore");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v16 = 0;
  v17 = 0;
  v4 = objc_msgSend(v3, "getOrCreateHH2ControllerKey:secretKey:keyPair:username:", &v17, 0, 0, &v16);
  v5 = v17;
  v6 = v16;

  v7 = (void *)MEMORY[0x227676638]();
  v8 = self;
  HMFGetOSLogHandle();
  v9 = objc_claimAutoreleasedReturnValue();
  v10 = v9;
  if ((v4 & 1) != 0)
  {
    if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v19 = v11;
      v20 = 2112;
      v21 = v6;
      _os_log_impl(&dword_2218F0000, v10, OS_LOG_TYPE_INFO, "%{public}@Going to use HH2 controller key : %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v7);
    v12 = (void *)objc_msgSend(objc_alloc(MEMORY[0x24BE3F230]), "initWithPairingKeyData:", v5);
    v13 = (void *)objc_msgSend(objc_alloc(MEMORY[0x24BE3F228]), "initWithIdentifier:publicKey:privateKey:", v6, v12, 0);

  }
  else
  {
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v19 = v14;
      _os_log_impl(&dword_2218F0000, v10, OS_LOG_TYPE_ERROR, "%{public}@FATAL Error : Unable to get or create HH2 Controller key", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v7);
    v13 = 0;
  }

  return v13;
}

- (void)dmHandleRequestRemoveHome:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  id v15;
  _QWORD v16[5];

  v4 = a3;
  objc_msgSend(v4, "uuidForKey:", CFSTR("kHomeUUID"));
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHomeManager _homeWithUUID:](self, "_homeWithUUID:", v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "deletedBackingStoreObject");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "untrustedClientIdentifier");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  +[HMDBackingStoreTransactionOptions defaultXPCOptionsWithCDTransactionAuthor:clientIdentifier:](HMDBackingStoreTransactionOptions, "defaultXPCOptionsWithCDTransactionAuthor:clientIdentifier:", 10, v8);
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  -[HMDHomeManager backingStore](self, "backingStore");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "name");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "transaction:options:", v11, v9);
  v12 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v12, "add:", v7);
  +[HMDHomeManagerHomeModel modelForHomeUUID:](HMDHomeManagerHomeModel, "modelForHomeUUID:", v5);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v13, "setObjectChangeType:", 3);
  objc_msgSend(v12, "add:withMessage:", v13, v4);

  v16[0] = MEMORY[0x24BDAC760];
  v16[1] = 3221225472;
  v16[2] = __54__HMDHomeManager_CoreData__dmHandleRequestRemoveHome___block_invoke;
  v16[3] = &unk_24E79BD80;
  v16[4] = self;
  objc_msgSend(v12, "run:", v16);
  if (objc_msgSend(v6, "isOwnerUser"))
  {
    -[HMDHomeManager homeOwnerCloudShareManager](self, "homeOwnerCloudShareManager");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    v15 = (id)objc_msgSend(v14, "removeSharesForHome:", v6);

  }
}

- (void)dmKickClients
{
  id v3;

  -[HMDHomeManager uuid](self, "uuid");
  v3 = (id)objc_claimAutoreleasedReturnValue();
  -[HMDHomeManager updateGenerationCounterWithReason:sourceUUID:shouldNotifyClients:](self, "updateGenerationCounterWithReason:sourceUUID:shouldNotifyClients:", CFSTR("CoreData data changed"), v3, 1);

}

- (void)dm_transactionObjectUpdated:(id)a3 newValues:(id)a4 message:(id)a5
{
  id v7;
  void *v8;
  id v9;
  id v10;

  v10 = a4;
  v7 = a5;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v8 = v10;
  else
    v8 = 0;
  v9 = v8;
  -[HMDHomeManager homeModelHomeUpdate:message:](self, "homeModelHomeUpdate:message:", v9, v7);

}

- (void)dm_transactionObjectRemoved:(id)a3 message:(id)a4
{
  id v6;
  void *v7;
  id v8;
  id v9;

  v9 = a3;
  v6 = a4;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v7 = v9;
  else
    v7 = 0;
  v8 = v7;
  -[HMDHomeManager homeModelHomeDelete:message:](self, "homeModelHomeDelete:message:", v8, v6);

}

- (BOOL)isInitialReplay:(id)a3
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  v3 = a3;
  v4 = v3;
  if (v3)
  {
    objc_msgSend(v3, "transactionResult");
    v5 = (void *)objc_claimAutoreleasedReturnValue();

    if (v5)
    {
      objc_msgSend(v4, "transactionResult");
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v6, "label");
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      LOBYTE(v5) = HMFEqualObjects();

    }
  }
  else
  {
    LOBYTE(v5) = 0;
  }

  return (char)v5;
}

- (void)homeModelHomeUpdate:(id)a3 message:(id)a4
{
  id v6;
  id v7;
  void *v8;
  void *v9;
  uint64_t v10;
  double v11;
  double v12;
  void *v13;
  HMDHomeManager *v14;
  NSObject *v15;
  void *v16;
  void *v17;
  id v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  BOOL v23;
  void *v24;
  HMDHomeManager *v25;
  NSObject *v26;
  void *v27;
  void *v28;
  HMDHomeManager *v29;
  NSObject *v30;
  void *v31;
  void *v32;
  void *v33;
  HMDHomeManager *v34;
  NSObject *v35;
  void *v36;
  void *v37;
  double v38;
  void *v39;
  void *v40;
  void *v41;
  id v42;
  void *v43;
  double v44;
  void *v45;
  void *v46;
  void *v47;
  void *v48;
  void *v49;
  void *v50;
  _BOOL4 v51;
  HMDHomeManager *v52;
  id v53;
  id v54;
  void *v55;
  void *v56;
  HMDHomeManager *v57;
  id v58;
  id v59;
  uint64_t v60;
  double v61;
  double v62;
  void *v63;
  HMDHomeManager *v64;
  NSObject *v65;
  void *v66;
  void *v67;
  id v68;
  void *v69;
  void *v70;
  void *v71;
  void *v72;
  HMDHomeManager *v73;
  NSObject *v74;
  void *v75;
  void *v76;
  double v77;
  void *v78;
  void *v79;
  id v80;
  void *v81;
  double v82;
  void *v83;
  void *v84;
  void *v85;
  void *v86;
  id v87;
  void *v88;
  void *v89;
  id v90;
  void *v91;
  void *v92;
  char v93;
  void *v94;
  void *v95;
  HMDHomeManager *v96;
  NSObject *v97;
  void *v98;
  void *v99;
  _BOOL4 v100;
  void *v101;
  void *v102;
  _BOOL4 v103;
  void *v104;
  void *v105;
  HMDHomeManager *v106;
  NSObject *v107;
  void *v108;
  id v109;
  __CFString *v110;
  void *v111;
  id v112;
  void *v113;
  _QWORD v114[5];
  id v115;
  id v116;
  uint64_t v117;
  uint64_t *v118;
  uint64_t v119;
  uint64_t (*v120)(uint64_t, uint64_t);
  void (*v121)(uint64_t);
  id v122;
  _BYTE buf[24];
  const __CFString *v124;
  _BYTE v125[32];
  id v126;
  __int16 v127;
  const __CFString *v128;
  __int16 v129;
  id v130;
  __int16 v131;
  const __CFString *v132;
  __int16 v133;
  void *v134;
  uint64_t v135;

  v135 = *MEMORY[0x24BDAC8D0];
  v6 = a3;
  v7 = a4;
  v113 = v6;
  if (v6)
  {
    v112 = v7;
    objc_msgSend(v6, "handle");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "homeUUID");
    v9 = (void *)objc_claimAutoreleasedReturnValue();

    v10 = HMFUptime();
    v12 = v11;
    v13 = (void *)MEMORY[0x227676638](v10);
    v14 = self;
    HMFGetOSLogHandle();
    v15 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138544898;
      *(_QWORD *)&buf[4] = v16;
      *(_WORD *)&buf[12] = 2114;
      *(_QWORD *)&buf[14] = CFSTR("homeManagerInitStart");
      *(_WORD *)&buf[22] = 2112;
      v124 = CFSTR("Loading home model from backing store");
      *(_WORD *)v125 = 2114;
      *(_QWORD *)&v125[2] = CFSTR("state");
      *(_WORD *)&v125[10] = 2112;
      *(_QWORD *)&v125[12] = CFSTR("homeManagerLoadingHomeModel");
      *(_WORD *)&v125[20] = 2114;
      *(_QWORD *)&v125[22] = CFSTR("homeUUID");
      *(_WORD *)&v125[30] = 2112;
      v126 = v9;
      _os_log_impl(&dword_2218F0000, v15, OS_LOG_TYPE_INFO, "%{public}@tag=\"%{public}@\" desc=\"%@\" %{public}@=\"%@\" %{public}@=\"%@\", buf, 0x48u);

    }
    objc_autoreleasePoolPop(v13);
    objc_msgSend(MEMORY[0x24BE4F1C0], "sharedInstance");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    v18 = objc_alloc(MEMORY[0x24BE4F1D0]);
    HMDTaggedLoggingCreateDictionary();
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    v20 = (void *)objc_msgSend(v18, "initWithTag:data:", CFSTR("homeManagerInitStart"), v19, CFSTR("state"), CFSTR("homeManagerLoadingHomeModel"), CFSTR("homeUUID"), v9);
    objc_msgSend(MEMORY[0x24BE3F138], "currentTagProcessorList");
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v17, "submitTaggedEvent:processorList:", v20, v21);

    if (v9)
    {
      -[HMDHomeManager _homeWithUUID:](v14, "_homeWithUUID:", v9);
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      v23 = v22 == 0;

      if (!v23)
      {
        v24 = (void *)MEMORY[0x227676638]();
        v25 = v14;
        HMFGetOSLogHandle();
        v26 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
        {
          HMFGetLogIdentifier();
          v27 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543618;
          *(_QWORD *)&buf[4] = v27;
          *(_WORD *)&buf[12] = 2112;
          *(_QWORD *)&buf[14] = v9;
          _os_log_impl(&dword_2218F0000, v26, OS_LOG_TYPE_ERROR, "%{public}@Not re-adding a home that already exists (%@)", buf, 0x16u);

        }
        objc_autoreleasePoolPop(v24);
LABEL_39:

        v7 = v112;
        goto LABEL_40;
      }
    }
    else
    {
      v28 = (void *)MEMORY[0x227676638]();
      v29 = v14;
      HMFGetOSLogHandle();
      v30 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
      {
        HMFGetLogIdentifier();
        v31 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543362;
        *(_QWORD *)&buf[4] = v31;
        _os_log_impl(&dword_2218F0000, v30, OS_LOG_TYPE_DEFAULT, "%{public}@model.homeUUID is nil for HMDCloudZoneInformationModel. This may cause extra work.", buf, 0xCu);

      }
      objc_autoreleasePoolPop(v28);
    }
    objc_msgSend(v113, "handle");
    v32 = (void *)objc_claimAutoreleasedReturnValue();
    v116 = 0;
    +[HMDBackingStore cdlsBackingStoreWithHandle:error:](HMDBackingStore, "cdlsBackingStoreWithHandle:error:", v32, &v116);
    v111 = (void *)objc_claimAutoreleasedReturnValue();
    v110 = (__CFString *)v116;

    v33 = (void *)MEMORY[0x227676638]();
    v34 = v14;
    HMFGetOSLogHandle();
    v35 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v35, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v36 = (void *)objc_claimAutoreleasedReturnValue();
      v37 = (void *)MEMORY[0x24BDD17C8];
      HMFUptime();
      objc_msgSend(v37, "stringWithFormat:", CFSTR("%.3f"), v38 - v12);
      v39 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x24BDD16E0], "numberWithInteger:", -[__CFString code](v110, "code"));
      v40 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138545922;
      *(_QWORD *)&buf[4] = v36;
      *(_WORD *)&buf[12] = 2114;
      *(_QWORD *)&buf[14] = CFSTR("homeManagerInitStart");
      *(_WORD *)&buf[22] = 2112;
      v124 = CFSTR("Loaded home model from backing store");
      *(_WORD *)v125 = 2114;
      *(_QWORD *)&v125[2] = CFSTR("state");
      *(_WORD *)&v125[10] = 2112;
      *(_QWORD *)&v125[12] = CFSTR("homeManagerLoadedHomeModel");
      *(_WORD *)&v125[20] = 2114;
      *(_QWORD *)&v125[22] = CFSTR("duration");
      *(_WORD *)&v125[30] = 2112;
      v126 = v39;
      v127 = 2114;
      v128 = CFSTR("homeUUID");
      v129 = 2112;
      v130 = v9;
      v131 = 2114;
      v132 = CFSTR("error");
      v133 = 2112;
      v134 = v40;
      _os_log_impl(&dword_2218F0000, v35, OS_LOG_TYPE_INFO, "%{public}@tag=\"%{public}@\" desc=\"%@\" %{public}@=\"%@\" %{public}@=\"%@\" %{public}@=\"%@\" %{public}@=\"%@\", buf, 0x70u);

    }
    objc_autoreleasePoolPop(v33);
    objc_msgSend(MEMORY[0x24BE4F1C0], "sharedInstance");
    v41 = (void *)objc_claimAutoreleasedReturnValue();
    v42 = objc_alloc(MEMORY[0x24BE4F1D0]);
    v43 = (void *)MEMORY[0x24BDD17C8];
    HMFUptime();
    objc_msgSend(v43, "stringWithFormat:", CFSTR("%.3f"), v44 - v12);
    v45 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD16E0], "numberWithInteger:", -[__CFString code](v110, "code"));
    v46 = (void *)objc_claimAutoreleasedReturnValue();
    HMDTaggedLoggingCreateDictionary();
    v47 = (void *)objc_claimAutoreleasedReturnValue();
    v48 = (void *)objc_msgSend(v42, "initWithTag:data:", CFSTR("homeManagerInitStart"), v47, CFSTR("state"), CFSTR("homeManagerLoadedHomeModel"), CFSTR("duration"), v45, CFSTR("homeUUID"), v9, CFSTR("error"), v46);
    objc_msgSend(MEMORY[0x24BE3F138], "currentTagProcessorList");
    v49 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v41, "submitTaggedEvent:processorList:", v48, v49);

    if (v111)
    {
      objc_msgSend(v111, "homeManager");
      v50 = (void *)objc_claimAutoreleasedReturnValue();
      v51 = v50 == 0;

      if (v51)
        objc_msgSend(v111, "setHomeManager:", v34);
      v52 = v34;
      v53 = v111;
      v54 = v9;
      v117 = 0;
      v118 = &v117;
      v119 = 0x3032000000;
      v120 = __Block_byref_object_copy__51944;
      v121 = __Block_byref_object_dispose__51945;
      v122 = 0;
      objc_msgSend(v53, "context");
      v55 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v55, "managedObjectContext");
      v56 = (void *)objc_claimAutoreleasedReturnValue();
      *(_QWORD *)buf = MEMORY[0x24BDAC760];
      *(_QWORD *)&buf[8] = 3221225472;
      *(_QWORD *)&buf[16] = ____homeWithHomeManager_block_invoke;
      v124 = (const __CFString *)&unk_24E79B5F8;
      v57 = v52;
      *(_QWORD *)v125 = v57;
      v58 = v54;
      *(_QWORD *)&v125[8] = v58;
      *(_QWORD *)&v125[24] = &v117;
      v59 = v53;
      *(_QWORD *)&v125[16] = v59;
      objc_msgSend(v56, "performBlockAndWait:", buf);

      v109 = (id)v118[5];
      _Block_object_dispose(&v117, 8);

      if (v109)
      {
        v60 = HMFUptime();
        v62 = v61;
        v63 = (void *)MEMORY[0x227676638](v60);
        v64 = v57;
        HMFGetOSLogHandle();
        v65 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v65, OS_LOG_TYPE_DEBUG))
        {
          HMFGetLogIdentifier();
          v66 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138544898;
          *(_QWORD *)&buf[4] = v66;
          *(_WORD *)&buf[12] = 2114;
          *(_QWORD *)&buf[14] = CFSTR("homeManagerInitStart");
          *(_WORD *)&buf[22] = 2112;
          v124 = CFSTR("Replaying all models for home");
          *(_WORD *)v125 = 2114;
          *(_QWORD *)&v125[2] = CFSTR("state");
          *(_WORD *)&v125[10] = 2112;
          *(_QWORD *)&v125[12] = CFSTR("homeManagerReplayHome");
          *(_WORD *)&v125[20] = 2114;
          *(_QWORD *)&v125[22] = CFSTR("homeUUID");
          *(_WORD *)&v125[30] = 2112;
          v126 = v58;
          _os_log_impl(&dword_2218F0000, v65, OS_LOG_TYPE_DEBUG, "%{public}@tag=\"%{public}@\" desc=\"%@\" %{public}@=\"%@\" %{public}@=\"%@\", buf, 0x48u);

        }
        objc_autoreleasePoolPop(v63);
        objc_msgSend(MEMORY[0x24BE4F1C0], "sharedInstance");
        v67 = (void *)objc_claimAutoreleasedReturnValue();
        v68 = objc_alloc(MEMORY[0x24BE4F1D0]);
        HMDTaggedLoggingCreateDictionary();
        v69 = (void *)objc_claimAutoreleasedReturnValue();
        v70 = (void *)objc_msgSend(v68, "initWithTag:data:", CFSTR("homeManagerInitStart"), v69, CFSTR("state"), CFSTR("homeManagerReplayHome"), CFSTR("homeUUID"), v58);
        objc_msgSend(MEMORY[0x24BE3F138], "currentTagProcessorList");
        v71 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v67, "submitTaggedEvent:processorList:", v70, v71);

        objc_msgSend(v59, "cdlsReplayAllModelsStartingAt:isInitialGraphLoad:", v109, -[HMDHomeManager isInitialReplay:](v64, "isInitialReplay:", v112));
        v72 = (void *)MEMORY[0x227676638](-[HMDHomeManager updateHomeKitInUsePreferences](v64, "updateHomeKitInUsePreferences"));
        v73 = v64;
        HMFGetOSLogHandle();
        v74 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v74, OS_LOG_TYPE_INFO))
        {
          HMFGetLogIdentifier();
          v75 = (void *)objc_claimAutoreleasedReturnValue();
          v76 = (void *)MEMORY[0x24BDD17C8];
          HMFUptime();
          objc_msgSend(v76, "stringWithFormat:", CFSTR("%.3f"), v77 - v62);
          v78 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138545410;
          *(_QWORD *)&buf[4] = v75;
          *(_WORD *)&buf[12] = 2114;
          *(_QWORD *)&buf[14] = CFSTR("homeManagerInitStart");
          *(_WORD *)&buf[22] = 2112;
          v124 = CFSTR("Replayed all models for home");
          *(_WORD *)v125 = 2114;
          *(_QWORD *)&v125[2] = CFSTR("state");
          *(_WORD *)&v125[10] = 2112;
          *(_QWORD *)&v125[12] = CFSTR("homeManagerReplayedHome");
          *(_WORD *)&v125[20] = 2114;
          *(_QWORD *)&v125[22] = CFSTR("duration");
          *(_WORD *)&v125[30] = 2112;
          v126 = v78;
          v127 = 2114;
          v128 = CFSTR("homeUUID");
          v129 = 2112;
          v130 = v58;
          _os_log_impl(&dword_2218F0000, v74, OS_LOG_TYPE_INFO, "%{public}@tag=\"%{public}@\" desc=\"%@\" %{public}@=\"%@\" %{public}@=\"%@\" %{public}@=\"%@\", buf, 0x5Cu);

        }
        objc_autoreleasePoolPop(v72);
        objc_msgSend(MEMORY[0x24BE4F1C0], "sharedInstance");
        v79 = (void *)objc_claimAutoreleasedReturnValue();
        v80 = objc_alloc(MEMORY[0x24BE4F1D0]);
        v81 = (void *)MEMORY[0x24BDD17C8];
        HMFUptime();
        objc_msgSend(v81, "stringWithFormat:", CFSTR("%.3f"), v82 - v62);
        v83 = (void *)objc_claimAutoreleasedReturnValue();
        HMDTaggedLoggingCreateDictionary();
        v84 = (void *)objc_claimAutoreleasedReturnValue();
        v85 = (void *)objc_msgSend(v80, "initWithTag:data:", CFSTR("homeManagerInitStart"), v84, CFSTR("state"), CFSTR("homeManagerReplayedHome"), CFSTR("duration"), v83, CFSTR("homeUUID"), v58);
        objc_msgSend(MEMORY[0x24BE3F138], "currentTagProcessorList");
        v86 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v79, "submitTaggedEvent:processorList:", v85, v86);

        v87 = objc_alloc(MEMORY[0x24BE3F168]);
        -[HMDHomeManager workQueue](v73, "workQueue");
        v88 = (void *)objc_claimAutoreleasedReturnValue();
        v89 = (void *)objc_msgSend(v87, "initWithQueue:", v88);

        v114[0] = MEMORY[0x24BDAC760];
        v114[1] = 3221225472;
        v114[2] = __56__HMDHomeManager_CoreData__homeModelHomeUpdate_message___block_invoke;
        v114[3] = &unk_24E79C268;
        v114[4] = v73;
        v90 = v89;
        v115 = v90;
        objc_msgSend(v90, "performBlock:", v114);
        logAndPostNotification(CFSTR("HMDHomeAddedNotification"), v73, 0);
        -[HMDHomeManager primaryHomeUUID](v73, "primaryHomeUUID");
        v91 = (void *)objc_claimAutoreleasedReturnValue();
        if (!v91
          || (-[HMDHomeManager primaryHomeUUID](v73, "primaryHomeUUID"),
              v92 = (void *)objc_claimAutoreleasedReturnValue(),
              v93 = objc_msgSend(v92, "isEqual:", v58),
              v92,
              v91,
              (v93 & 1) == 0))
        {
          -[HMDHomeManager primaryHomeUUID](v73, "primaryHomeUUID");
          v94 = (void *)objc_claimAutoreleasedReturnValue();
          if (v94)
          {

          }
          else
          {
            -[HMDHomeManager homes](v73, "homes");
            v99 = (void *)objc_claimAutoreleasedReturnValue();
            v100 = objc_msgSend(v99, "count") == 1;

            if (v100)
              -[HMDHomeManager _changePrimaryHome:](v73, "_changePrimaryHome:", v58);
          }
        }
        -[HMDHomeManager _homeWithUUID:](v73, "_homeWithUUID:", v58);
        v101 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v101, "currentUser");
        v102 = (void *)objc_claimAutoreleasedReturnValue();
        v103 = v102 == 0;

        if (v103)
        {
          v105 = (void *)MEMORY[0x227676638]();
          v106 = v73;
          HMFGetOSLogHandle();
          v107 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v107, OS_LOG_TYPE_INFO))
          {
            HMFGetLogIdentifier();
            v108 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 138543618;
            *(_QWORD *)&buf[4] = v108;
            *(_WORD *)&buf[12] = 2112;
            *(_QWORD *)&buf[14] = v101;
            _os_log_impl(&dword_2218F0000, v107, OS_LOG_TYPE_INFO, "%{public}@Not sending home added notification to clients as this home does not have current user: %@", buf, 0x16u);

          }
          objc_autoreleasePoolPop(v105);
          objc_msgSend(MEMORY[0x24BDD1540], "hmPrivateErrorWithCode:", 2011);
          v104 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v112, "respondWithError:", v104);
        }
        else
        {
          objc_msgSend(v112, "transactionResult");
          v104 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v104, "markSaveToAssistant");
        }

      }
    }
    else
    {
      v95 = (void *)MEMORY[0x227676638]();
      v96 = v34;
      HMFGetOSLogHandle();
      v97 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v97, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v98 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543874;
        *(_QWORD *)&buf[4] = v98;
        *(_WORD *)&buf[12] = 2112;
        *(_QWORD *)&buf[14] = v9;
        *(_WORD *)&buf[22] = 2112;
        v124 = v110;
        _os_log_impl(&dword_2218F0000, v97, OS_LOG_TYPE_ERROR, "%{public}@Unable to open backing store %@: %@", buf, 0x20u);

      }
      objc_autoreleasePoolPop(v95);
    }

    goto LABEL_39;
  }
LABEL_40:

}

- (void)homeModelHomeDelete:(id)a3 message:(id)a4
{
  id v6;
  id v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  _BOOL8 v12;
  void *v13;
  HMDHomeManager *v14;
  NSObject *v15;
  void *v16;
  int v17;
  void *v18;
  __int16 v19;
  void *v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  v6 = a3;
  v7 = a4;
  objc_msgSend(v6, "handle");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "homeUUID");
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v9)
    _HMFPreconditionFailure();
  -[HMDHomeManager _homeWithUUID:](self, "_homeWithUUID:", v9);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  if (v10)
  {
    objc_msgSend(v7, "transactionResult");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v12 = objc_msgSend(v11, "source") == 1;

    -[HMDHomeManager _removeHome:withMessage:saveToStore:notifyUsers:shouldRemovePairings:](self, "_removeHome:withMessage:saveToStore:notifyUsers:shouldRemovePairings:", v10, v7, 1, 1, v12);
    -[HMDHomeManager updateHomeKitInUsePreferences](self, "updateHomeKitInUsePreferences");
  }
  else
  {
    v13 = (void *)MEMORY[0x227676638]();
    v14 = self;
    HMFGetOSLogHandle();
    v15 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      v17 = 138543618;
      v18 = v16;
      v19 = 2112;
      v20 = v9;
      _os_log_impl(&dword_2218F0000, v15, OS_LOG_TYPE_ERROR, "%{public}@Home with UUID not found: %@", (uint8_t *)&v17, 0x16u);

    }
    objc_autoreleasePoolPop(v13);
  }

}

- (void)handleDumpDatabaseMessage:(id)a3
{
  id v3;
  void *v4;
  void *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  void *v13;
  void *v14;
  void *v15;
  id v16;
  void *v17;
  void *v18;
  void *v19;
  id v20;
  uint64_t v21;
  _QWORD v22[2];

  v22[1] = *MEMORY[0x24BDAC8D0];
  v3 = a3;
  v4 = (void *)MEMORY[0x227676638]();
  objc_msgSend(v3, "numberForKey:", *MEMORY[0x24BDD5F08]);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend(v5, "BOOLValue");

  objc_msgSend(v3, "numberForKey:", *MEMORY[0x24BDD5F18]);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = objc_msgSend(v7, "BOOLValue");

  objc_msgSend(v3, "numberForKey:", *MEMORY[0x24BDD5F20]);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = objc_msgSend(v9, "BOOLValue");

  objc_msgSend(v3, "numberForKey:", *MEMORY[0x24BDD5F30]);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v12 = objc_msgSend(v11, "BOOLValue");

  if ((v6 & 1) != 0 || (v10 & 1) != 0 || (v12 & 1) != 0 || (v8 & 1) != 0)
  {
    +[HMDCoreData sharedInstance](HMDCoreData, "sharedInstance");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    v14 = (void *)objc_msgSend(v13, "newManagedObjectContext");
    v20 = 0;
    objc_msgSend(v13, "dumpCloudKitConfiguration:localConfiguration:workingConfiguration:includeFakeModels:context:error:", v6, v10, v12, v8, v14, &v20);
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    v16 = v20;
    if (v15)
    {
      objc_msgSend(v15, "dataUsingEncoding:", 4);
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v17, "hmd_compressedData");
      v18 = (void *)objc_claimAutoreleasedReturnValue();

      if (v18)
      {
        v21 = *MEMORY[0x24BDD5F10];
        v22[0] = v18;
        objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v22, &v21, 1);
        v19 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v3, "respondWithPayload:", v19);
      }
      else
      {
        objc_msgSend(MEMORY[0x24BDD1540], "hmErrorWithCode:", -1);
        v19 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v3, "respondWithError:", v19);
      }

    }
    else
    {
      objc_msgSend(v3, "respondWithError:", v16);
    }

  }
  else
  {
    objc_msgSend(MEMORY[0x24BDD1540], "hmErrorWithCode:", 3);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "respondWithError:", v13);
  }

  objc_autoreleasePoolPop(v4);
}

uint64_t __56__HMDHomeManager_CoreData__homeModelHomeUpdate_message___block_invoke(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "updateAccessoryModelsFromContext:", *(_QWORD *)(a1 + 40));
}

void __54__HMDHomeManager_CoreData__dmHandleRequestRemoveHome___block_invoke(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  NSObject *v6;
  void *v7;
  int v8;
  void *v9;
  __int16 v10;
  id v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v3 = a2;
  v4 = (void *)MEMORY[0x227676638]();
  v5 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v6 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = 138543618;
    v9 = v7;
    v10 = 2112;
    v11 = v3;
    _os_log_impl(&dword_2218F0000, v6, OS_LOG_TYPE_INFO, "%{public}@Transaction to remove the home finished with error: %@", (uint8_t *)&v8, 0x16u);

  }
  objc_autoreleasePoolPop(v4);

}

void __170__HMDHomeManager_CoreData__runTransactionForAddHomeMessage_withInitialHomeObjects_homeManagerModel_homeManagerHomeModel_homeBackingStore_homeUUID_makeNewHomePrimaryHome___block_invoke(uint64_t a1, void *a2)
{
  id v3;

  v3 = a2;
  objc_msgSend(v3, "setObjectChangeType:", 1);
  objc_msgSend(*(id *)(a1 + 32), "add:", v3);

}

void __170__HMDHomeManager_CoreData__runTransactionForAddHomeMessage_withInitialHomeObjects_homeManagerModel_homeManagerHomeModel_homeBackingStore_homeUUID_makeNewHomePrimaryHome___block_invoke_2(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  NSObject *v6;
  void *v7;
  void *v8;
  void *v9;
  id v10;
  NSObject *v11;
  NSObject *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  _QWORD v21[2];
  _QWORD v22[2];
  uint8_t buf[4];
  void *v24;
  __int16 v25;
  id v26;
  uint64_t v27;

  v27 = *MEMORY[0x24BDAC8D0];
  v3 = a2;
  if (v3)
  {
    v4 = (void *)MEMORY[0x227676638]();
    v5 = *(id *)(a1 + 40);
    HMFGetOSLogHandle();
    v6 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v24 = v7;
      v25 = 2112;
      v26 = v3;
      _os_log_impl(&dword_2218F0000, v6, OS_LOG_TYPE_ERROR, "%{public}@Failed to run transaction for adding home: %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v4);
    objc_msgSend(*(id *)(a1 + 48), "respondWithError:", v3);
  }
  else
  {
    objc_msgSend(*(id *)(a1 + 40), "_homeWithUUID:", *(_QWORD *)(a1 + 56));
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = (void *)MEMORY[0x227676638]();
    v10 = *(id *)(a1 + 40);
    HMFGetOSLogHandle();
    v11 = objc_claimAutoreleasedReturnValue();
    v12 = v11;
    if (v8)
    {
      if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(*(id *)(a1 + 48), "shortDescription");
        v14 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        v24 = v13;
        v25 = 2112;
        v26 = v14;
        _os_log_impl(&dword_2218F0000, v12, OS_LOG_TYPE_INFO, "%{public}@Replying to message %@ for client which asked to add home", buf, 0x16u);

      }
      objc_autoreleasePoolPop(v9);
      v15 = *(void **)(a1 + 48);
      if (objc_msgSend(v15, "isEntitledForSPIAccess", CFSTR("kHomeDataKey")))
        encodeRootObjectForSPIClients(v8);
      else
        encodeRootObjectForIncomingXPCMessage(v8, 0);
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      v21[1] = *MEMORY[0x24BDD6008];
      v22[0] = v18;
      objc_msgSend(MEMORY[0x24BDD16E0], "numberWithBool:", *(unsigned __int8 *)(a1 + 64));
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      v22[1] = v19;
      objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v22, v21, 2);
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v15, "respondWithPayload:", v20);

    }
    else
    {
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v16 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543362;
        v24 = v16;
        _os_log_impl(&dword_2218F0000, v12, OS_LOG_TYPE_ERROR, "%{public}@Unable to find added home after running transaction to add home", buf, 0xCu);

      }
      objc_autoreleasePoolPop(v9);
      v17 = *(void **)(a1 + 48);
      objc_msgSend(MEMORY[0x24BDD1540], "hmErrorWithCode:", -1);
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v17, "respondWithError:", v18);
    }

  }
}

void __51__HMDHomeManager_CoreData__dmHandleRequestAddHome___block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  id v12;
  NSObject *v13;
  void *v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint8_t buf[4];
  void *v19;
  __int16 v20;
  uint64_t v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  v5 = a2;
  v6 = a3;
  if (v5)
  {
    +[HMDNIST256Utilities publicKeyExternalRepresentationFromKeyPairExternalRepresentation:](HMDNIST256Utilities, "publicKeyExternalRepresentationFromKeyPairExternalRepresentation:", v5);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = *(_QWORD *)(a1 + 56);
    objc_msgSend(*(id *)(a1 + 32), "uuid");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    +[HMDHome createNewHomeModelsWithModelID:parentModelID:name:acwgGroupResolvingKey:acwgIssuerPublicKeyExternalRepresentation:userUniqueIDForAccessories:ownedBy:](HMDHome, "createNewHomeModelsWithModelID:parentModelID:name:acwgGroupResolvingKey:acwgIssuerPublicKeyExternalRepresentation:userUniqueIDForAccessories:ownedBy:", v8, v9, *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), v7, *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88));
    v10 = (void *)objc_claimAutoreleasedReturnValue();

    LOBYTE(v17) = *(_BYTE *)(a1 + 120);
    objc_msgSend(*(id *)(a1 + 32), "runTransactionForAddHomeMessage:withInitialHomeObjects:homeManagerModel:homeManagerHomeModel:homeBackingStore:homeUUID:makeNewHomePrimaryHome:", *(_QWORD *)(a1 + 48), v10, *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 56), v17);

  }
  else
  {
    v11 = (void *)MEMORY[0x227676638]();
    v12 = *(id *)(a1 + 32);
    HMFGetOSLogHandle();
    v13 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      v15 = *(_QWORD *)(a1 + 40);
      *(_DWORD *)buf = 138543618;
      v19 = v14;
      v20 = 2112;
      v21 = v15;
      _os_log_impl(&dword_2218F0000, v13, OS_LOG_TYPE_ERROR, "%{public}@Failed to create ACWG issuer key with error: %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v11);
    v16 = *(void **)(a1 + 48);
    objc_msgSend(MEMORY[0x24BDD1540], "hmPrivateErrorWithCode:underlyingError:", 9010, v6);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v16, "respondWithError:", v7);
  }

}

+ (id)setupCoreDataUsingBackingStore:(id)a3
{
  id v3;
  void *v4;
  void *v5;
  id v6;
  void *v7;
  HMDHomeManagerModel *v8;
  HMDHomeManagerModel *v9;
  void *v10;
  void *v11;
  id result;
  void *v13;
  SEL v14;
  id v15;
  id v16;

  v3 = a3;
  v4 = (void *)objc_msgSend(objc_alloc(MEMORY[0x24BDD1880]), "initWithUUIDString:", CFSTR("1CAEDC10-E3E5-41A4-BB17-A9EEBA14A938"));
  v16 = 0;
  objc_msgSend(v3, "cdlsFetchObjectWithUUID:ofModelType:error:", v4, objc_opt_class(), &v16);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = v16;
  v7 = v6;
  if (v5)
  {
    v8 = v5;
LABEL_6:

    return v8;
  }
  if (!v6 || objc_msgSend(v6, "code"))
  {
    v9 = -[HMDBackingStoreModelObject initWithUUID:]([HMDHomeManagerModel alloc], "initWithUUID:", v4);
    -[HMDBackingStoreModelObject setObjectChangeType:](v9, "setObjectChangeType:", 1);
    +[HMDBackingStoreTransactionOptions defaultXPCOptions](HMDBackingStoreTransactionOptions, "defaultXPCOptions");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "transaction:options:", CFSTR("Initial Home Manager Setup"), v10);
    v11 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v11, "add:", v9);
    objc_msgSend(v11, "run");
    v8 = v9;

    goto LABEL_6;
  }
  v13 = (void *)_HMFPreconditionFailure();
  +[HMDHomeManager makeSureHomeManagerExistInWorkingStore:](v13, v14, v15);
  return result;
}

+ (void)makeSureHomeManagerExistInWorkingStore:(id)a3
{
  void *v4;
  id v5;
  _QWORD v6[4];
  id v7;
  id v8;

  v4 = (void *)objc_msgSend(a3, "newManagedObjectContext");
  v6[0] = MEMORY[0x24BDAC760];
  v6[1] = 3221225472;
  v6[2] = __67__HMDHomeManager_CoreData__makeSureHomeManagerExistInWorkingStore___block_invoke;
  v6[3] = &unk_24E797C10;
  v7 = v4;
  v8 = a1;
  v5 = v4;
  objc_msgSend(v5, "performBlockAndWait:", v6);

}

+ (id)accountHandleForOwner
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  id v7;
  NSObject *v8;
  void *v9;
  id v10;
  void *v11;
  void *v12;
  HMDAccountHandle *v13;
  void *v14;
  uint8_t buf[4];
  void *v17;
  __int16 v18;
  void *v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  if (+[HMDHomeManager areWeAllowingHomeKitToRunWithoutCloudKitForHH2](HMDHomeManager, "areWeAllowingHomeKitToRunWithoutCloudKitForHH2"))
  {
    v3 = (void *)MEMORY[0x24BDD17C8];
    objc_msgSend(MEMORY[0x24BDD1880], "UUID");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "stringWithFormat:", CFSTR("mailto:hh2_qa_%@_@apple.com"), v4);
    v5 = (void *)objc_claimAutoreleasedReturnValue();

    v6 = (void *)MEMORY[0x227676638]();
    v7 = a1;
    HMFGetOSLogHandle();
    v8 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v17 = v9;
      v18 = 2112;
      v19 = v5;
      _os_log_impl(&dword_2218F0000, v8, OS_LOG_TYPE_INFO, "%{public}@Using : %@ for new home creation", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v6);
    v10 = objc_alloc(MEMORY[0x24BE4FCE0]);
    v11 = (void *)MEMORY[0x227675558](v5);
    v12 = (void *)objc_msgSend(v10, "initWithPrefixedURI:", v11);

    v13 = -[HMDAccountHandle initWithURI:]([HMDAccountHandle alloc], "initWithURI:", v12);
  }
  else
  {
    +[HMDAppleAccountManager sharedManager](HMDAppleAccountManager, "sharedManager");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "account");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v14, "primaryHandle");
    v13 = (HMDAccountHandle *)objc_claimAutoreleasedReturnValue();

  }
  return v13;
}

void __67__HMDHomeManager_CoreData__makeSureHomeManagerExistInWorkingStore___block_invoke(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  id v4;
  void *v5;
  id v6;
  _MKFHomeManager *v7;
  void *v8;
  void *v9;
  char v10;
  uint64_t v11;
  void *v12;
  id v13;
  NSObject *v14;
  void *v15;
  id v16;
  id v17;
  uint8_t buf[4];
  void *v19;
  __int16 v20;
  id v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(a1 + 32);
  v17 = 0;
  +[_MKFHomeManager fetchWithContext:error:](_MKFHomeManager, "fetchWithContext:error:", v2, &v17);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = v17;
  v5 = v4;
  if (v3)
  {
    v6 = v4;
  }
  else
  {
    v7 = -[_MKFHomeManager initWithContext:]([_MKFHomeManager alloc], "initWithContext:", *(_QWORD *)(a1 + 32));
    +[_MKFHomeManager defaultModelID](_MKFHomeManager, "defaultModelID");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    -[_MKFHomeManager setModelID:](v7, "setModelID:", v8);

    v9 = *(void **)(a1 + 32);
    v16 = v5;
    v10 = objc_msgSend(v9, "save:", &v16);
    v6 = v16;

    v11 = objc_msgSend(*(id *)(a1 + 32), "reset");
    if ((v10 & 1) == 0)
    {
      v12 = (void *)MEMORY[0x227676638](v11);
      v13 = *(id *)(a1 + 40);
      HMFGetOSLogHandle();
      v14 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v15 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        v19 = v15;
        v20 = 2112;
        v21 = v6;
        _os_log_impl(&dword_2218F0000, v14, OS_LOG_TYPE_ERROR, "%{public}@Unable to insert MKFHomeManager to working store: %@", buf, 0x16u);

      }
      objc_autoreleasePoolPop(v12);
    }

  }
}

- (id)needsOnboardingForHomeUUID:(id)a3 accessoryUUID:(id)a4
{
  id v6;
  id v7;
  void *v8;
  uint64_t v9;
  id v10;
  void *v11;
  void *v12;
  void *v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  void *v19;
  id v20;
  void *v21;
  _BOOL8 v22;
  void *v23;
  HMDHomeManager *v24;
  NSObject *v25;
  void *v26;
  void *v27;
  void *v28;
  HMDHomeManager *v29;
  NSObject *v30;
  void *v31;
  uint64_t v33;
  uint64_t v34;
  uint64_t (*v35)(uint64_t, void *);
  void *v36;
  id v37;
  _QWORD v38[4];
  id v39;
  uint8_t buf[4];
  void *v41;
  __int16 v42;
  id v43;
  uint64_t v44;

  v44 = *MEMORY[0x24BDAC8D0];
  v6 = a3;
  v7 = a4;
  -[HMDHomeManager homes](self, "homes");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = MEMORY[0x24BDAC760];
  v38[0] = MEMORY[0x24BDAC760];
  v38[1] = 3221225472;
  v38[2] = __83__HMDHomeManager_SiriEndpointOnboarding__needsOnboardingForHomeUUID_accessoryUUID___block_invoke;
  v38[3] = &unk_24E796248;
  v10 = v6;
  v39 = v10;
  objc_msgSend(v8, "na_firstObjectPassingTest:", v38);
  v11 = (void *)objc_claimAutoreleasedReturnValue();

  if (v11)
  {
    objc_msgSend(v11, "accessories");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    v13 = (void *)objc_msgSend(v12, "copy");

    v33 = v9;
    v34 = 3221225472;
    v35 = __83__HMDHomeManager_SiriEndpointOnboarding__needsOnboardingForHomeUUID_accessoryUUID___block_invoke_1;
    v36 = &unk_24E790530;
    v14 = v7;
    v37 = v14;
    objc_msgSend(v13, "na_firstObjectPassingTest:", &v33);
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    if (v18)
    {
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0)
        v19 = v18;
      else
        v19 = 0;
      v20 = v19;
      objc_msgSend(v20, "needsOnboarding", v33, v34, v35, v36);
      v21 = (void *)objc_claimAutoreleasedReturnValue();

      if (v21)
        v22 = objc_msgSend(v21, "integerValue") == 0;
      else
        v22 = 1;
      objc_msgSend(MEMORY[0x24BDD16E0], "numberWithBool:", v22);
      v27 = (void *)objc_claimAutoreleasedReturnValue();

    }
    else
    {
      v28 = (void *)MEMORY[0x227676638](0, v15, v16, v17);
      v29 = self;
      HMFGetOSLogHandle();
      v30 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v30, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v31 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        v41 = v31;
        v42 = 2112;
        v43 = v14;
        _os_log_impl(&dword_2218F0000, v30, OS_LOG_TYPE_INFO, "%{public}@Accessory is not found. accessoryUUID: %@", buf, 0x16u);

      }
      objc_autoreleasePoolPop(v28);
      v27 = (void *)MEMORY[0x24BDBD1C8];
    }

  }
  else
  {
    v23 = (void *)MEMORY[0x227676638]();
    v24 = self;
    HMFGetOSLogHandle();
    v25 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v26 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v41 = v26;
      v42 = 2112;
      v43 = v10;
      _os_log_impl(&dword_2218F0000, v25, OS_LOG_TYPE_ERROR, "%{public}@Home is not found. homeUUID: %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v23);
    v27 = 0;
  }

  return v27;
}

- (void)setNeedsOnboardingCompleteWitHomeUUID:(id)a3 accessoryUUID:(id)a4 completion:(id)a5
{
  id v8;
  id v9;
  void (**v10)(id, _QWORD);
  void *v11;
  uint64_t v12;
  id v13;
  void *v14;
  void *v15;
  void *v16;
  id v17;
  void *v18;
  void *v19;
  id v20;
  void *v21;
  id v22;
  uint64_t v23;
  void *v24;
  void *v25;
  uint64_t v26;
  void *v27;
  HMDHomeManager *v28;
  NSObject *v29;
  void *v30;
  void *v31;
  HMDHomeManager *v32;
  NSObject *v33;
  void *v34;
  void *v35;
  HMDHomeManager *v36;
  NSObject *v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  void *v43;
  HMDHomeManager *v44;
  NSObject *v45;
  void *v46;
  id v47;
  id v48;
  _QWORD v49[5];
  void (**v50)(id, _QWORD);
  _QWORD v51[4];
  id v52;
  _QWORD v53[4];
  id v54;
  uint8_t buf[4];
  void *v56;
  __int16 v57;
  id v58;
  uint64_t v59;

  v59 = *MEMORY[0x24BDAC8D0];
  v8 = a3;
  v9 = a4;
  v10 = (void (**)(id, _QWORD))a5;
  -[HMDHomeManager homes](self, "homes");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v12 = MEMORY[0x24BDAC760];
  v53[0] = MEMORY[0x24BDAC760];
  v53[1] = 3221225472;
  v53[2] = __105__HMDHomeManager_SiriEndpointOnboarding__setNeedsOnboardingCompleteWitHomeUUID_accessoryUUID_completion___block_invoke;
  v53[3] = &unk_24E796248;
  v13 = v8;
  v54 = v13;
  objc_msgSend(v11, "na_firstObjectPassingTest:", v53);
  v14 = (void *)objc_claimAutoreleasedReturnValue();

  if (v14)
  {
    objc_msgSend(v14, "accessories");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    v16 = (void *)objc_msgSend(v15, "copy");

    v51[0] = v12;
    v51[1] = 3221225472;
    v51[2] = __105__HMDHomeManager_SiriEndpointOnboarding__setNeedsOnboardingCompleteWitHomeUUID_accessoryUUID_completion___block_invoke_5;
    v51[3] = &unk_24E790530;
    v17 = v9;
    v52 = v17;
    objc_msgSend(v16, "na_firstObjectPassingTest:", v51);
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    v19 = v18;
    if (v18)
    {
      v47 = v9;
      v20 = v18;
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0)
        v21 = v20;
      else
        v21 = 0;
      v22 = v21;

      objc_msgSend(v22, "needsOnboarding");
      v23 = objc_claimAutoreleasedReturnValue();
      if (v23
        && (v24 = (void *)v23,
            objc_msgSend(v22, "needsOnboarding"),
            v25 = (void *)objc_claimAutoreleasedReturnValue(),
            v26 = objc_msgSend(v25, "integerValue"),
            v25,
            v24,
            v26 == 2))
      {
        v27 = (void *)MEMORY[0x227676638]();
        v28 = self;
        HMFGetOSLogHandle();
        v29 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v29, OS_LOG_TYPE_INFO))
        {
          HMFGetLogIdentifier();
          v30 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543362;
          v56 = v30;
          _os_log_impl(&dword_2218F0000, v29, OS_LOG_TYPE_INFO, "%{public}@Skipping needsOnboarding transaction since there's no change.", buf, 0xCu);

        }
        objc_autoreleasePoolPop(v27);
        v10[2](v10, 0);
      }
      else
      {
        v35 = (void *)MEMORY[0x227676638]();
        v36 = self;
        HMFGetOSLogHandle();
        v37 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v37, OS_LOG_TYPE_INFO))
        {
          HMFGetLogIdentifier();
          v38 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543362;
          v56 = v38;
          _os_log_impl(&dword_2218F0000, v37, OS_LOG_TYPE_INFO, "%{public}@Starting Updating needsOnboarding", buf, 0xCu);

        }
        objc_autoreleasePoolPop(v35);
        objc_msgSend(v14, "backingStore");
        v39 = (void *)objc_claimAutoreleasedReturnValue();
        +[HMDBackingStoreTransactionOptions defaultXPCOptions](HMDBackingStoreTransactionOptions, "defaultXPCOptions");
        v40 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v39, "transaction:options:", CFSTR("Updating needsOnboarding"), v40);
        v41 = (void *)objc_claimAutoreleasedReturnValue();

        objc_msgSend(v22, "transactionWithObjectChangeType:", 2);
        v42 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v42, "setNeedsOnboarding:", &unk_24E96AD00);
        objc_msgSend(v41, "add:", v42);
        v49[0] = MEMORY[0x24BDAC760];
        v49[1] = 3221225472;
        v49[2] = __105__HMDHomeManager_SiriEndpointOnboarding__setNeedsOnboardingCompleteWitHomeUUID_accessoryUUID_completion___block_invoke_9;
        v49[3] = &unk_24E79B3A0;
        v49[4] = v36;
        v50 = v10;
        objc_msgSend(v41, "run:", v49);

      }
      v9 = v47;
    }
    else
    {
      v43 = (void *)MEMORY[0x227676638]();
      v44 = self;
      HMFGetOSLogHandle();
      v45 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v45, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v48 = v9;
        v46 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        v56 = v46;
        v57 = 2112;
        v58 = v17;
        _os_log_impl(&dword_2218F0000, v45, OS_LOG_TYPE_ERROR, "%{public}@Accessory is not found. accessoryUUID: %@", buf, 0x16u);

        v9 = v48;
      }

      objc_autoreleasePoolPop(v43);
      objc_msgSend(MEMORY[0x24BDD1540], "hmfErrorWithCode:", 2);
      v22 = (id)objc_claimAutoreleasedReturnValue();
      ((void (**)(id, id))v10)[2](v10, v22);
    }

  }
  else
  {
    v31 = (void *)MEMORY[0x227676638]();
    v32 = self;
    HMFGetOSLogHandle();
    v33 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v33, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v34 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v56 = v34;
      v57 = 2112;
      v58 = v13;
      _os_log_impl(&dword_2218F0000, v33, OS_LOG_TYPE_ERROR, "%{public}@Home is not found. homeUUID: %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v31);
    objc_msgSend(MEMORY[0x24BDD1540], "hmfErrorWithCode:", 2);
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    ((void (**)(id, void *))v10)[2](v10, v16);
  }

}

- (void)applyOnboardingSelections:(id)a3 accessoryUUID:(id)a4 homeUUID:(id)a5 completion:(id)a6
{
  id v10;
  id v11;
  id v12;
  id v13;
  void *v14;
  HMDHomeManager *v15;
  NSObject *v16;
  void *v17;
  void *v18;
  int v19;
  void *v20;
  __int16 v21;
  id v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  v10 = a3;
  v11 = a4;
  v12 = a5;
  v13 = a6;
  v14 = (void *)MEMORY[0x227676638]();
  v15 = self;
  HMFGetOSLogHandle();
  v16 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    v19 = 138543618;
    v20 = v17;
    v21 = 2112;
    v22 = v10;
    _os_log_impl(&dword_2218F0000, v16, OS_LOG_TYPE_INFO, "%{public}@Apply onboarding selections to the controller manager: %@", (uint8_t *)&v19, 0x16u);

  }
  objc_autoreleasePoolPop(v14);
  -[HMDHomeManager compositeSettingsControllerManager](v15, "compositeSettingsControllerManager");
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v18, "applyOnboardingSelections:accessoryUUID:homeUUID:completion:", v10, v11, v12, v13);

}

- (id)accessoryWithHomeUUID:(id)a3 accessoryUUID:(id)a4
{
  id v6;
  id v7;
  void *v8;
  uint64_t v9;
  id v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  HMDHomeManager *v16;
  NSObject *v17;
  void *v18;
  _QWORD v20[4];
  id v21;
  _QWORD v22[4];
  id v23;
  uint8_t buf[4];
  void *v25;
  __int16 v26;
  id v27;
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  v6 = a3;
  v7 = a4;
  -[HMDHomeManager homes](self, "homes");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = MEMORY[0x24BDAC760];
  v22[0] = MEMORY[0x24BDAC760];
  v22[1] = 3221225472;
  v22[2] = __78__HMDHomeManager_SiriEndpointOnboarding__accessoryWithHomeUUID_accessoryUUID___block_invoke;
  v22[3] = &unk_24E796248;
  v10 = v6;
  v23 = v10;
  objc_msgSend(v8, "na_firstObjectPassingTest:", v22);
  v11 = (void *)objc_claimAutoreleasedReturnValue();

  if (v11)
  {
    objc_msgSend(v11, "accessories");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    v13 = (void *)objc_msgSend(v12, "copy");

    v20[0] = v9;
    v20[1] = 3221225472;
    v20[2] = __78__HMDHomeManager_SiriEndpointOnboarding__accessoryWithHomeUUID_accessoryUUID___block_invoke_11;
    v20[3] = &unk_24E790530;
    v21 = v7;
    objc_msgSend(v13, "na_firstObjectPassingTest:", v20);
    v14 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v15 = (void *)MEMORY[0x227676638]();
    v16 = self;
    HMFGetOSLogHandle();
    v17 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v25 = v18;
      v26 = 2112;
      v27 = v10;
      _os_log_impl(&dword_2218F0000, v17, OS_LOG_TYPE_ERROR, "%{public}@Home is not found. homeUUID: %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v15);
    v14 = 0;
  }

  return v14;
}

- (id)hubAccessoriesWithHomeUUID:(id)a3 forSiriEndpointProfileMessageHandler:(id)a4
{
  id v6;
  id v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  HMDHomeManager *v12;
  NSObject *v13;
  void *v14;
  int v16;
  void *v17;
  __int16 v18;
  id v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  v6 = a3;
  v7 = a4;
  -[HMDHomeManager _homeWithUUID:](self, "_homeWithUUID:", v6);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = v8;
  if (v8)
  {
    objc_msgSend(v8, "hubAccessories");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v11 = (void *)MEMORY[0x227676638]();
    v12 = self;
    HMFGetOSLogHandle();
    v13 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      v16 = 138543618;
      v17 = v14;
      v18 = 2112;
      v19 = v6;
      _os_log_impl(&dword_2218F0000, v13, OS_LOG_TYPE_ERROR, "%{public}@Failed to get hub accessories due to no home with uuid: %@", (uint8_t *)&v16, 0x16u);

    }
    objc_autoreleasePoolPop(v11);
    v10 = 0;
  }

  return v10;
}

- (void)enableUserListeningHistoryForHomeUUID:(id)a3 accessoryUUID:(id)a4 userUUID:(id)a5
{
  id v8;
  id v9;
  id v10;
  void *v11;
  void *v12;
  void *v13;
  HMDHomeManager *v14;
  NSObject *v15;
  void *v16;
  int v17;
  void *v18;
  __int16 v19;
  id v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  v8 = a3;
  v9 = a4;
  v10 = a5;
  -[HMDHomeManager _homeWithUUID:](self, "_homeWithUUID:", v8);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v12 = v11;
  if (v11)
  {
    objc_msgSend(v11, "enableUserListeningHistoryForAccessoryUUID:userUUID:", v9, v10);
  }
  else
  {
    v13 = (void *)MEMORY[0x227676638]();
    v14 = self;
    HMFGetOSLogHandle();
    v15 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      v17 = 138543618;
      v18 = v16;
      v19 = 2112;
      v20 = v8;
      _os_log_impl(&dword_2218F0000, v15, OS_LOG_TYPE_ERROR, "%{public}@Failed to enable ULH due to no home with uuid: %@", (uint8_t *)&v17, 0x16u);

    }
    objc_autoreleasePoolPop(v13);
  }

}

- (id)userUUIDForMessage:(id)a3 homeUUID:(id)a4
{
  id v6;
  id v7;
  void *v8;
  void *v9;
  void *v10;
  HMDHomeManager *v11;
  NSObject *v12;
  void *v13;
  void *v14;
  void *v15;
  HMDHomeManager *v16;
  NSObject *v17;
  void *v18;
  int v20;
  void *v21;
  __int16 v22;
  id v23;
  __int16 v24;
  id v25;
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  v6 = a3;
  v7 = a4;
  -[HMDHomeManager _homeWithUUID:](self, "_homeWithUUID:", v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  if (v8)
  {
    objc_msgSend(v6, "userForHome:", v8);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    if (v9)
    {
      v10 = (void *)MEMORY[0x227676638]();
      v11 = self;
      HMFGetOSLogHandle();
      v12 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        v20 = 138543874;
        v21 = v13;
        v22 = 2112;
        v23 = v9;
        v24 = 2112;
        v25 = v6;
        _os_log_impl(&dword_2218F0000, v12, OS_LOG_TYPE_INFO, "%{public}@Getting user %@ from message %@", (uint8_t *)&v20, 0x20u);

      }
      objc_autoreleasePoolPop(v10);
      objc_msgSend(v9, "uuid");
      v14 = (void *)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      v14 = 0;
    }

  }
  else
  {
    v15 = (void *)MEMORY[0x227676638]();
    v16 = self;
    HMFGetOSLogHandle();
    v17 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      v20 = 138543618;
      v21 = v18;
      v22 = 2112;
      v23 = v7;
      _os_log_impl(&dword_2218F0000, v17, OS_LOG_TYPE_ERROR, "%{public}@Failed to get user from message due to no home with uuid: %@", (uint8_t *)&v20, 0x16u);

    }
    objc_autoreleasePoolPop(v15);
    v14 = 0;
  }

  return v14;
}

uint64_t __78__HMDHomeManager_SiriEndpointOnboarding__accessoryWithHomeUUID_accessoryUUID___block_invoke(uint64_t a1, void *a2)
{
  void *v3;
  uint64_t v4;

  objc_msgSend(a2, "uuid");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "hmf_isEqualToUUID:", *(_QWORD *)(a1 + 32));

  return v4;
}

uint64_t __78__HMDHomeManager_SiriEndpointOnboarding__accessoryWithHomeUUID_accessoryUUID___block_invoke_11(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  void *v6;
  uint64_t v7;

  v3 = a2;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v4 = v3;
  else
    v4 = 0;
  v5 = v4;
  if (v5)
  {
    objc_msgSend(v3, "uuid");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v7 = objc_msgSend(v6, "hmf_isEqualToUUID:", *(_QWORD *)(a1 + 32));

  }
  else
  {
    v7 = 0;
  }

  return v7;
}

uint64_t __105__HMDHomeManager_SiriEndpointOnboarding__setNeedsOnboardingCompleteWitHomeUUID_accessoryUUID_completion___block_invoke(uint64_t a1, void *a2)
{
  void *v3;
  uint64_t v4;

  objc_msgSend(a2, "uuid");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "hmf_isEqualToUUID:", *(_QWORD *)(a1 + 32));

  return v4;
}

uint64_t __105__HMDHomeManager_SiriEndpointOnboarding__setNeedsOnboardingCompleteWitHomeUUID_accessoryUUID_completion___block_invoke_5(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  void *v6;
  uint64_t v7;

  v3 = a2;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v4 = v3;
  else
    v4 = 0;
  v5 = v4;
  if (v5)
  {
    objc_msgSend(v3, "uuid");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v7 = objc_msgSend(v6, "hmf_isEqualToUUID:", *(_QWORD *)(a1 + 32));

  }
  else
  {
    v7 = 0;
  }

  return v7;
}

void __105__HMDHomeManager_SiriEndpointOnboarding__setNeedsOnboardingCompleteWitHomeUUID_accessoryUUID_completion___block_invoke_9(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  NSObject *v6;
  NSObject *v7;
  void *v8;
  void *v9;
  int v10;
  void *v11;
  __int16 v12;
  id v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  v3 = a2;
  v4 = (void *)MEMORY[0x227676638]();
  v5 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v6 = objc_claimAutoreleasedReturnValue();
  v7 = v6;
  if (v3)
  {
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      v10 = 138543618;
      v11 = v8;
      v12 = 2112;
      v13 = v3;
      _os_log_impl(&dword_2218F0000, v7, OS_LOG_TYPE_ERROR, "%{public}@Updating needsOnboarding reported error: %@", (uint8_t *)&v10, 0x16u);

    }
  }
  else if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v10 = 138543362;
    v11 = v9;
    _os_log_impl(&dword_2218F0000, v7, OS_LOG_TYPE_INFO, "%{public}@Updating needsOnboarding success", (uint8_t *)&v10, 0xCu);

  }
  objc_autoreleasePoolPop(v4);
  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();

}

uint64_t __83__HMDHomeManager_SiriEndpointOnboarding__needsOnboardingForHomeUUID_accessoryUUID___block_invoke(uint64_t a1, void *a2)
{
  void *v3;
  uint64_t v4;

  objc_msgSend(a2, "uuid");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "hmf_isEqualToUUID:", *(_QWORD *)(a1 + 32));

  return v4;
}

uint64_t __83__HMDHomeManager_SiriEndpointOnboarding__needsOnboardingForHomeUUID_accessoryUUID___block_invoke_1(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  void *v6;
  uint64_t v7;

  v3 = a2;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v4 = v3;
  else
    v4 = 0;
  v5 = v4;
  if (v5)
  {
    objc_msgSend(v3, "uuid");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v7 = objc_msgSend(v6, "hmf_isEqualToUUID:", *(_QWORD *)(a1 + 32));

  }
  else
  {
    v7 = 0;
  }

  return v7;
}

- (void)prepareForDiagnosticExtension:(id)a3
{
  id v4;
  void *v5;
  HMDHomeManager *v6;
  NSObject *v7;
  void *v8;
  task_read_t v9;
  void *v10;
  NSObject *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  id v16;
  void *v17;
  id v18;
  mach_port_t corpse_task_port;
  uint8_t buf[4];
  void *v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  v4 = a3;
  v5 = (void *)MEMORY[0x227676638]();
  v6 = self;
  HMFGetOSLogHandle();
  v7 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543362;
    v21 = v8;
    _os_log_impl(&dword_2218F0000, v7, OS_LOG_TYPE_INFO, "%{public}@Triggering memory exception.", buf, 0xCu);

  }
  objc_autoreleasePoolPop(v5);
  v9 = *MEMORY[0x24BDAEC58];
  corpse_task_port = 0;
  if (task_generate_corpse(v9, &corpse_task_port))
  {
    v10 = (void *)MEMORY[0x227676638]();
    HMFGetOSLogHandle();
    v11 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v21 = v12;
      _os_log_impl(&dword_2218F0000, v11, OS_LOG_TYPE_INFO, "%{public}@Failed to generate a corpse task for memory exception reporting.", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v10);
    objc_msgSend(MEMORY[0x24BDD1540], "hmErrorWithCode:", -1);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "respondWithError:", v13);
  }
  else
  {
    objc_msgSend(MEMORY[0x24BE3F258], "processInfo");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v14, "executableURL");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v15, "path");
    v16 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
    objc_msgSend(v16, "UTF8String");
    dispatch_get_global_queue(-32768, 0);
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    v18 = v4;
    ReportMemoryExceptionFromTask();

    v13 = v18;
  }

}

void __69__HMDHomeManager_DiagnosticExtension__prepareForDiagnosticExtension___block_invoke(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  NSObject *v5;
  void *v6;
  int v7;
  void *v8;
  __int16 v9;
  id v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  v3 = a2;
  v4 = (void *)MEMORY[0x227676638](objc_msgSend(*(id *)(a1 + 32), "respondWithPayload:error:", 0, v3));
  HMFGetOSLogHandle();
  v5 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v7 = 138543618;
    v8 = v6;
    v9 = 2112;
    v10 = v3;
    _os_log_impl(&dword_2218F0000, v5, OS_LOG_TYPE_INFO, "%{public}@Memory exception reporting completed with error: %@", (uint8_t *)&v7, 0x16u);

  }
  objc_autoreleasePoolPop(v4);
  mach_port_deallocate(*MEMORY[0x24BDAEC58], *(_DWORD *)(a1 + 40));

}

- (void)handleReceivedIDSInviteFromAccount:(id)a3 mergeID:(id)a4 idsInvitationIdentifier:(id)a5 payload:(id)a6
{
  id v10;
  id v11;
  _QWORD v12[4];
  id v13;

  v10 = a5;
  v12[0] = MEMORY[0x24BDAC760];
  v12[1] = 3221225472;
  v12[2] = __109__HMDHomeManager_IDSInvitations__handleReceivedIDSInviteFromAccount_mergeID_idsInvitationIdentifier_payload___block_invoke;
  v12[3] = &unk_24E79B7E0;
  v13 = v10;
  v11 = v10;
  -[HMDHomeManager _handleAccessHomeInviteFromAccount:mergeID:idsInvitationIdentifier:payload:messageResponseHandler:](self, "_handleAccessHomeInviteFromAccount:mergeID:idsInvitationIdentifier:payload:messageResponseHandler:", a3, a4, v11, a6, v12);

}

- (void)handleAcceptRequestForIDSInvitationWithIdentifier:(id)a3 homeUUID:(id)a4 payload:(id)a5 fromAddress:(id)a6 fromMergeID:(id)a7
{
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  NSObject *v17;
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  _QWORD v23[4];
  id v24;
  HMDHomeManager *v25;
  id v26;
  id v27;
  id v28;
  id v29;

  v12 = a3;
  v13 = a4;
  v14 = a5;
  v15 = a6;
  v16 = a7;
  -[HMDHomeManager workQueue](self, "workQueue");
  v17 = objc_claimAutoreleasedReturnValue();
  v23[0] = MEMORY[0x24BDAC760];
  v23[1] = 3221225472;
  v23[2] = __125__HMDHomeManager_IDSInvitations__handleAcceptRequestForIDSInvitationWithIdentifier_homeUUID_payload_fromAddress_fromMergeID___block_invoke;
  v23[3] = &unk_24E792F40;
  v24 = v14;
  v25 = self;
  v26 = v12;
  v27 = v13;
  v28 = v15;
  v29 = v16;
  v18 = v16;
  v19 = v15;
  v20 = v13;
  v21 = v12;
  v22 = v14;
  dispatch_async(v17, v23);

}

- (void)handleDeclineRequestForIDSInvitationWithIdentifier:(id)a3 fromAddress:(id)a4 homeUUID:(id)a5
{
  id v8;
  id v9;
  id v10;
  void *v11;
  void *v12;
  void *v13;
  NSObject *v14;
  void *v15;
  void *v16;
  int v17;
  void *v18;
  __int16 v19;
  void *v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  v8 = a3;
  v9 = a4;
  v10 = a5;
  -[HMDHomeManager _homeFromIncomingInvitationWithIdentifier:homeUUID:](self, "_homeFromIncomingInvitationWithIdentifier:homeUUID:", v8, v10);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v12 = v11;
  if (v11)
  {
    objc_msgSend(v11, "handleDeclineRequestForIDSInvitationWithIdentifier:fromAddress:", v8, v9);
  }
  else
  {
    v13 = (void *)MEMORY[0x227676638]();
    HMFGetOSLogHandle();
    v14 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v8, "UUIDString");
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      v17 = 138543618;
      v18 = v15;
      v19 = 2112;
      v20 = v16;
      _os_log_impl(&dword_2218F0000, v14, OS_LOG_TYPE_ERROR, "%{public}@Did not find invitation %@ in any homes, cannot handle decline request.", (uint8_t *)&v17, 0x16u);

    }
    objc_autoreleasePoolPop(v13);
  }

}

- (void)handleCancelRequestForIDSInvitationWithIdentifier:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  NSObject *v8;
  void *v9;
  void *v10;
  NSObject *v11;
  void *v12;
  void *v13;
  int v14;
  void *v15;
  __int16 v16;
  void *v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  v4 = a3;
  if (v4)
  {
    -[HMDHomeManager incomingInvitations](self, "incomingInvitations");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "hmf_firstObjectWithValue:forKeyPath:", v4, CFSTR("idsInvitationUUID"));
    v6 = (void *)objc_claimAutoreleasedReturnValue();

    if (v6)
    {
      -[HMDHomeManager _handleRequestToCancelHomeInvitation:saveReason:](self, "_handleRequestToCancelHomeInvitation:saveReason:", v6, CFSTR("cancelIDSReceivedInvite"));
    }
    else
    {
      v10 = (void *)MEMORY[0x227676638]();
      HMFGetOSLogHandle();
      v11 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v12 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v4, "UUIDString");
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        v14 = 138543618;
        v15 = v12;
        v16 = 2112;
        v17 = v13;
        _os_log_impl(&dword_2218F0000, v11, OS_LOG_TYPE_INFO, "%{public}@Invalid invite IDS identifier specified %@", (uint8_t *)&v14, 0x16u);

      }
      objc_autoreleasePoolPop(v10);
    }

  }
  else
  {
    v7 = (void *)MEMORY[0x227676638]();
    HMFGetOSLogHandle();
    v8 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      v14 = 138543362;
      v15 = v9;
      _os_log_impl(&dword_2218F0000, v8, OS_LOG_TYPE_ERROR, "%{public}@Cannot cancel invite, not IDS invite identifier specified.", (uint8_t *)&v14, 0xCu);

    }
    objc_autoreleasePoolPop(v7);
  }

}

- (id)__homeContainingInviteWithIDSInvitationIdentifier:(id)a3
{
  id v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t i;
  void *v10;
  uint64_t v11;
  id v12;
  void *v13;
  void *v14;
  NSObject *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v22;
  void *v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint8_t buf[4];
  void *v29;
  __int16 v30;
  void *v31;
  __int16 v32;
  void *v33;
  __int16 v34;
  void *v35;
  _BYTE v36[128];
  uint64_t v37;

  v37 = *MEMORY[0x24BDAC8D0];
  v4 = a3;
  v24 = 0u;
  v25 = 0u;
  v26 = 0u;
  v27 = 0u;
  -[HMDHomeManager homes](self, "homes");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v24, v36, 16);
  if (v6)
  {
    v7 = v6;
    v8 = *(_QWORD *)v25;
    while (2)
    {
      for (i = 0; i != v7; ++i)
      {
        if (*(_QWORD *)v25 != v8)
          objc_enumerationMutation(v5);
        v10 = *(void **)(*((_QWORD *)&v24 + 1) + 8 * i);
        objc_msgSend(v10, "invitationWithIDSInvitationIdentifier:", v4);
        v11 = objc_claimAutoreleasedReturnValue();
        if (v11)
        {
          v13 = (void *)v11;
          v14 = (void *)MEMORY[0x227676638]();
          HMFGetOSLogHandle();
          v15 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
          {
            HMFGetLogIdentifier();
            v16 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v4, "UUIDString");
            v17 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v13, "identifier");
            v22 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v22, "UUIDString");
            v18 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v10, "uuid");
            v19 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v19, "UUIDString");
            v23 = v14;
            v20 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 138544130;
            v29 = v16;
            v30 = 2112;
            v31 = v17;
            v32 = 2112;
            v33 = v18;
            v34 = 2112;
            v35 = v20;
            _os_log_impl(&dword_2218F0000, v15, OS_LOG_TYPE_INFO, "%{public}@Found matching invitatation with idsInviteID %@ homeInviteID %@ in home %@", buf, 0x2Au);

            v14 = v23;
          }

          objc_autoreleasePoolPop(v14);
          v12 = v10;

          goto LABEL_13;
        }
      }
      v7 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v24, v36, 16);
      if (v7)
        continue;
      break;
    }
  }
  v12 = 0;
LABEL_13:

  return v12;
}

- (id)__homeContainingInviteWithInvitationIdentifier:(id)a3
{
  id v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t i;
  void *v10;
  uint64_t v11;
  id v12;
  void *v13;
  void *v14;
  NSObject *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v22;
  void *v23;
  void *v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint8_t buf[4];
  void *v30;
  __int16 v31;
  void *v32;
  __int16 v33;
  void *v34;
  __int16 v35;
  void *v36;
  _BYTE v37[128];
  uint64_t v38;

  v38 = *MEMORY[0x24BDAC8D0];
  v4 = a3;
  v25 = 0u;
  v26 = 0u;
  v27 = 0u;
  v28 = 0u;
  -[HMDHomeManager homes](self, "homes");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v25, v37, 16);
  if (v6)
  {
    v7 = v6;
    v8 = *(_QWORD *)v26;
    while (2)
    {
      for (i = 0; i != v7; ++i)
      {
        if (*(_QWORD *)v26 != v8)
          objc_enumerationMutation(v5);
        v10 = *(void **)(*((_QWORD *)&v25 + 1) + 8 * i);
        objc_msgSend(v10, "invitationWithInvitationIdentifier:", v4);
        v11 = objc_claimAutoreleasedReturnValue();
        if (v11)
        {
          v13 = (void *)v11;
          v14 = (void *)MEMORY[0x227676638]();
          HMFGetOSLogHandle();
          v15 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
          {
            HMFGetLogIdentifier();
            v16 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v13, "idsInvitationUUID");
            v23 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v23, "UUIDString");
            v17 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v13, "identifier");
            v22 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v22, "UUIDString");
            v18 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v10, "uuid");
            v24 = v14;
            v19 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v19, "UUIDString");
            v20 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 138544130;
            v30 = v16;
            v31 = 2112;
            v32 = v17;
            v33 = 2112;
            v34 = v18;
            v35 = 2112;
            v36 = v20;
            _os_log_impl(&dword_2218F0000, v15, OS_LOG_TYPE_INFO, "%{public}@Found matching invitatation with idsInviteID %@ homeInviteID %@ in home %@", buf, 0x2Au);

            v14 = v24;
          }

          objc_autoreleasePoolPop(v14);
          v12 = v10;

          goto LABEL_13;
        }
      }
      v7 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v25, v37, 16);
      if (v7)
        continue;
      break;
    }
  }
  v12 = 0;
LABEL_13:

  return v12;
}

- (id)_homeFromIncomingInvitationWithIdentifier:(id)a3 homeUUID:(id)a4
{
  return -[HMDHomeManager _homeFromIncomingInvitationWithIdentifier:invitationIdentifier:homeUUID:](self, "_homeFromIncomingInvitationWithIdentifier:invitationIdentifier:homeUUID:", a3, 0, a4);
}

- (id)_homeFromIncomingInvitationWithIdentifier:(id)a3 invitationIdentifier:(id)a4 homeUUID:(id)a5
{
  id v8;
  id v9;
  id v10;
  uint64_t v11;
  void *v12;
  void *v13;
  char v14;
  void *v15;
  NSObject *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  _BOOL4 v23;
  void *v24;
  const char *v25;
  void *v27;
  uint8_t buf[4];
  void *v29;
  __int16 v30;
  void *v31;
  __int16 v32;
  void *v33;
  __int16 v34;
  void *v35;
  uint64_t v36;

  v36 = *MEMORY[0x24BDAC8D0];
  v8 = a3;
  v9 = a4;
  v10 = a5;
  -[HMDHomeManager __homeContainingInviteWithIDSInvitationIdentifier:](self, "__homeContainingInviteWithIDSInvitationIdentifier:", v8);
  v11 = objc_claimAutoreleasedReturnValue();
  v12 = (void *)v11;
  if (v9 && !v11)
  {
    -[HMDHomeManager __homeContainingInviteWithInvitationIdentifier:](self, "__homeContainingInviteWithInvitationIdentifier:", v9);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
  }
  if (!v12)
  {
    -[HMDHomeManager homes](self, "homes");
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v22, "hmf_firstObjectWithUUID:", v10);
    v12 = (void *)objc_claimAutoreleasedReturnValue();

    v15 = (void *)MEMORY[0x227676638]();
    HMFGetOSLogHandle();
    v16 = objc_claimAutoreleasedReturnValue();
    v23 = os_log_type_enabled(v16, OS_LOG_TYPE_ERROR);
    if (v12)
    {
      if (!v23)
        goto LABEL_15;
      HMFGetLogIdentifier();
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v8, "UUIDString");
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v10, "UUIDString");
      v24 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543874;
      v29 = v17;
      v30 = 2112;
      v31 = v18;
      v32 = 2112;
      v33 = v24;
      v25 = "%{public}@Did not find invitation %@ in any homes, cannot handle request. But did find home with corresponding homeUUID %@";
    }
    else
    {
      if (!v23)
        goto LABEL_15;
      HMFGetLogIdentifier();
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v8, "UUIDString");
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v10, "UUIDString");
      v24 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543874;
      v29 = v17;
      v30 = 2112;
      v31 = v18;
      v32 = 2112;
      v33 = v24;
      v25 = "%{public}@Did not find invitation %@ in any homes (requested: %@), cannot handle request.";
    }
    _os_log_impl(&dword_2218F0000, v16, OS_LOG_TYPE_ERROR, v25, buf, 0x20u);

    goto LABEL_14;
  }
  objc_msgSend(v12, "uuid");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  v14 = objc_msgSend(v13, "hmf_isEqualToUUID:", v10);

  if ((v14 & 1) == 0)
  {
    v15 = (void *)MEMORY[0x227676638]();
    HMFGetOSLogHandle();
    v16 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v8, "UUIDString");
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v12, "uuid");
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v19, "UUIDString");
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v10, "UUIDString");
      v27 = v15;
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138544130;
      v29 = v17;
      v30 = 2112;
      v31 = v18;
      v32 = 2112;
      v33 = v20;
      v34 = 2112;
      v35 = v21;
      _os_log_impl(&dword_2218F0000, v16, OS_LOG_TYPE_ERROR, "%{public}@Found invitation %@ in home %@ but was supposed to find it in %@. Dropping request.", buf, 0x2Au);

      v15 = v27;
LABEL_14:

    }
LABEL_15:

    objc_autoreleasePoolPop(v15);
    v12 = 0;
  }

  return v12;
}

void __125__HMDHomeManager_IDSInvitations__handleAcceptRequestForIDSInvitationWithIdentifier_homeUUID_payload_fromAddress_fromMergeID___block_invoke(uint64_t a1)
{
  id v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  NSObject *v10;
  void *v11;
  void *v12;
  _QWORD v13[5];
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  uint8_t buf[4];
  void *v20;
  __int16 v21;
  void *v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  v2 = objc_alloc(MEMORY[0x24BDD1880]);
  objc_msgSend(*(id *)(a1 + 32), "hmf_stringForKey:", CFSTR("kInvitationIdentifierKey"));
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = (void *)objc_msgSend(v2, "initWithUUIDString:", v3);

  objc_msgSend(*(id *)(a1 + 40), "_homeFromIncomingInvitationWithIdentifier:invitationIdentifier:homeUUID:", *(_QWORD *)(a1 + 48), v4, *(_QWORD *)(a1 + 56));
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  if (v5)
  {
    +[HMDAccountHandle accountHandleForDestination:](HMDAccountHandle, "accountHandleForDestination:", *(_QWORD *)(a1 + 64));
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    +[HMDUser userIDForAccountHandle:](HMDUser, "userIDForAccountHandle:", v6);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 40), "idsFirewallManager");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v13[0] = MEMORY[0x24BDAC760];
    v13[1] = 3221225472;
    v13[2] = __125__HMDHomeManager_IDSInvitations__handleAcceptRequestForIDSInvitationWithIdentifier_homeUUID_payload_fromAddress_fromMergeID___block_invoke_3;
    v13[3] = &unk_24E77EE60;
    v13[4] = *(_QWORD *)(a1 + 40);
    v14 = *(id *)(a1 + 64);
    v15 = v5;
    v16 = *(id *)(a1 + 48);
    v17 = *(id *)(a1 + 32);
    v18 = *(id *)(a1 + 72);
    objc_msgSend(v8, "handleDidAddUserWithUserID:completion:", v7, v13);

  }
  else
  {
    v9 = (void *)MEMORY[0x227676638]();
    HMFGetOSLogHandle();
    v10 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(*(id *)(a1 + 48), "UUIDString");
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v20 = v11;
      v21 = 2112;
      v22 = v12;
      _os_log_impl(&dword_2218F0000, v10, OS_LOG_TYPE_ERROR, "%{public}@Did not find invitation %@ in any homes, cannot handle accept request.", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v9);
  }

}

void __125__HMDHomeManager_IDSInvitations__handleAcceptRequestForIDSInvitationWithIdentifier_homeUUID_payload_fromAddress_fromMergeID___block_invoke_3(id *a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  NSObject *v6;
  void *v7;
  id v8;
  NSObject *v9;
  _QWORD block[4];
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;
  uint8_t buf[4];
  void *v17;
  __int16 v18;
  id v19;
  __int16 v20;
  id v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  v3 = a2;
  v4 = (void *)MEMORY[0x227676638]();
  v5 = a1[4];
  HMFGetOSLogHandle();
  v6 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = a1[5];
    *(_DWORD *)buf = 138543874;
    v17 = v7;
    v18 = 2114;
    v19 = v8;
    v20 = 2114;
    v21 = v3;
    _os_log_impl(&dword_2218F0000, v6, OS_LOG_TYPE_INFO, "%{public}@IDS firewall user donation completed for userID %{public}@ with error %{public}@", buf, 0x20u);

  }
  objc_autoreleasePoolPop(v4);
  objc_msgSend(a1[6], "workQueue");
  v9 = objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x24BDAC760];
  block[1] = 3221225472;
  block[2] = __125__HMDHomeManager_IDSInvitations__handleAcceptRequestForIDSInvitationWithIdentifier_homeUUID_payload_fromAddress_fromMergeID___block_invoke_4;
  block[3] = &unk_24E79AD20;
  v11 = a1[6];
  v12 = a1[7];
  v13 = a1[8];
  v14 = a1[5];
  v15 = a1[9];
  dispatch_async(v9, block);

}

uint64_t __125__HMDHomeManager_IDSInvitations__handleAcceptRequestForIDSInvitationWithIdentifier_homeUUID_payload_fromAddress_fromMergeID___block_invoke_4(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "handleAcceptRequestForIDSInvitationWithIdentifier:payload:fromAddress:fromMergeID:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64));
}

void __109__HMDHomeManager_IDSInvitations__handleReceivedIDSInviteFromAccount_mergeID_idsInvitationIdentifier_payload___block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  NSObject *v8;
  _BOOL4 v9;
  void *v10;
  uint64_t v11;
  const char *v12;
  NSObject *v13;
  uint32_t v14;
  uint64_t v15;
  int v16;
  void *v17;
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  id v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  v5 = a2;
  v6 = a3;
  v7 = (void *)MEMORY[0x227676638]();
  HMFGetOSLogHandle();
  v8 = objc_claimAutoreleasedReturnValue();
  v9 = os_log_type_enabled(v8, OS_LOG_TYPE_ERROR);
  if (v5)
  {
    if (v9)
    {
      HMFGetLogIdentifier();
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      v11 = *(_QWORD *)(a1 + 32);
      v16 = 138543874;
      v17 = v10;
      v18 = 2112;
      v19 = v11;
      v20 = 2112;
      v21 = v5;
      v12 = "%{public}@Could not process received ids invitation %@ due to error %@";
      v13 = v8;
      v14 = 32;
LABEL_6:
      _os_log_impl(&dword_2218F0000, v13, OS_LOG_TYPE_ERROR, v12, (uint8_t *)&v16, v14);

    }
  }
  else if (v9)
  {
    HMFGetLogIdentifier();
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v15 = *(_QWORD *)(a1 + 32);
    v16 = 138543618;
    v17 = v10;
    v18 = 2112;
    v19 = v15;
    v12 = "%{public}@Successfully processed received ids invitation %@.";
    v13 = v8;
    v14 = 22;
    goto LABEL_6;
  }

  objc_autoreleasePoolPop(v7);
}

- (void)configureForWalletKey
{
  void *v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  _QWORD v11[2];

  v11[1] = *MEMORY[0x24BDAC8D0];
  +[HMDXPCMessagePolicy policyWithEntitlements:](HMDXPCMessagePolicy, "policyWithEntitlements:", 131077);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHomeManager messageDispatcher](self, "messageDispatcher");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = *MEMORY[0x24BDD5E78];
  v11[0] = v3;
  objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", v11, 1);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "registerForMessage:receiver:policies:selector:", v5, self, v6, sel_handleAutoAddWalletKeySupressionAssertionAcquireMessage_);

  -[HMDHomeManager messageDispatcher](self, "messageDispatcher");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = *MEMORY[0x24BDD5E80];
  v10 = v3;
  objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", &v10, 1);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "registerForMessage:receiver:policies:selector:", v8, self, v9, sel_handleAutoAddWalletKeySupressionAssertionReleaseMessage_);

}

- (void)handleAutoAddWalletKeySupressionAssertionAcquireMessage:(id)a3
{
  id v4;
  NSObject *v5;
  void *v6;
  HMDHomeManager *v7;
  NSObject *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  id v13;
  void *v14;
  os_unfair_lock_s *p_lock;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  HMDHomeManager *v20;
  NSObject *v21;
  void *v22;
  void *v23;
  void *v24;
  HMDHomeManager *v25;
  NSObject *v26;
  void *v27;
  void *v28;
  void *v29;
  int v30;
  void *v31;
  __int16 v32;
  id v33;
  __int16 v34;
  void *v35;
  uint64_t v36;

  v36 = *MEMORY[0x24BDAC8D0];
  v4 = a3;
  -[HMDHomeManager workQueue](self, "workQueue");
  v5 = objc_claimAutoreleasedReturnValue();
  dispatch_assert_queue_V2(v5);

  v6 = (void *)MEMORY[0x227676638]();
  v7 = self;
  HMFGetOSLogHandle();
  v8 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "messagePayload");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v30 = 138543874;
    v31 = v9;
    v32 = 2112;
    v33 = v4;
    v34 = 2112;
    v35 = v10;
    _os_log_impl(&dword_2218F0000, v8, OS_LOG_TYPE_INFO, "%{public}@Handling auto add wallet key suppression assertion acquire message: %@, payload: %@", (uint8_t *)&v30, 0x20u);

  }
  objc_autoreleasePoolPop(v6);
  objc_msgSend(v4, "transport");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v12 = v11;
  else
    v12 = 0;
  v13 = v12;

  if (v13)
  {
    objc_msgSend(v4, "uuidForKey:", *MEMORY[0x24BDD6040]);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    if (v14)
    {
      p_lock = &v7->_lock;
      os_unfair_lock_lock_with_options();
      -[HMDHomeManager homeUUIDsByWalletKeyAssertionXPCConnection](v7, "homeUUIDsByWalletKeyAssertionXPCConnection");
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v16, "objectForKey:", v13);
      v17 = (void *)objc_claimAutoreleasedReturnValue();

      if (!v17)
      {
        objc_msgSend(MEMORY[0x24BDBCEF0], "set");
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        -[HMDHomeManager homeUUIDsByWalletKeyAssertionXPCConnection](v7, "homeUUIDsByWalletKeyAssertionXPCConnection");
        v18 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v18, "setObject:forKey:", v17, v13);

      }
      objc_msgSend(v17, "addObject:", v14);

      os_unfair_lock_unlock(p_lock);
      objc_msgSend(v4, "respondWithSuccess");
    }
    else
    {
      v24 = (void *)MEMORY[0x227676638]();
      v25 = v7;
      HMFGetOSLogHandle();
      v26 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v27 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v4, "messagePayload");
        v28 = (void *)objc_claimAutoreleasedReturnValue();
        v30 = 138543618;
        v31 = v27;
        v32 = 2112;
        v33 = v28;
        _os_log_impl(&dword_2218F0000, v26, OS_LOG_TYPE_ERROR, "%{public}@Missing home uuid parameter in message payload: %@", (uint8_t *)&v30, 0x16u);

      }
      objc_autoreleasePoolPop(v24);
      objc_msgSend(MEMORY[0x24BDD1540], "hmErrorWithCode:", 3);
      v29 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "respondWithError:", v29);

      v14 = 0;
    }
  }
  else
  {
    v19 = (void *)MEMORY[0x227676638]();
    v20 = v7;
    HMFGetOSLogHandle();
    v21 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "transport");
      v23 = (void *)objc_claimAutoreleasedReturnValue();
      v30 = 138543618;
      v31 = v22;
      v32 = 2112;
      v33 = v23;
      _os_log_impl(&dword_2218F0000, v21, OS_LOG_TYPE_ERROR, "%{public}@Received auto add wallet key suppression assertion acquire message from unknown transport: %@", (uint8_t *)&v30, 0x16u);

    }
    objc_autoreleasePoolPop(v19);
    objc_msgSend(MEMORY[0x24BDD1540], "hmErrorWithCode:", -1);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "respondWithError:", v14);
  }

}

- (void)handleAutoAddWalletKeySupressionAssertionReleaseMessage:(id)a3
{
  id v4;
  NSObject *v5;
  void *v6;
  HMDHomeManager *v7;
  NSObject *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  id v13;
  void *v14;
  void *v15;
  void *v16;
  int v17;
  char v18;
  void *v19;
  int v20;
  uint64_t v21;
  void *v22;
  HMDHomeManager *v23;
  NSObject *v24;
  void *v25;
  void *v26;
  HMDHomeManager *v27;
  NSObject *v28;
  void *v29;
  void *v30;
  void *v31;
  HMDHomeManager *v32;
  NSObject *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  HMDHomeManager *v38;
  NSObject *v39;
  void *v40;
  void *v41;
  int v42;
  void *v43;
  __int16 v44;
  id v45;
  __int16 v46;
  id v47;
  uint64_t v48;

  v48 = *MEMORY[0x24BDAC8D0];
  v4 = a3;
  -[HMDHomeManager workQueue](self, "workQueue");
  v5 = objc_claimAutoreleasedReturnValue();
  dispatch_assert_queue_V2(v5);

  v6 = (void *)MEMORY[0x227676638]();
  v7 = self;
  HMFGetOSLogHandle();
  v8 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "messagePayload");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v42 = 138543874;
    v43 = v9;
    v44 = 2112;
    v45 = v4;
    v46 = 2112;
    v47 = v10;
    _os_log_impl(&dword_2218F0000, v8, OS_LOG_TYPE_INFO, "%{public}@Handling auto add wallet key suppression assertion release message: %@, payload: %@", (uint8_t *)&v42, 0x20u);

  }
  objc_autoreleasePoolPop(v6);
  objc_msgSend(v4, "transport");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v12 = v11;
  else
    v12 = 0;
  v13 = v12;

  if (v13)
  {
    objc_msgSend(v4, "uuidForKey:", *MEMORY[0x24BDD6040]);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    if (v14)
    {
      os_unfair_lock_lock_with_options();
      -[HMDHomeManager homeUUIDsByWalletKeyAssertionXPCConnection](v7, "homeUUIDsByWalletKeyAssertionXPCConnection");
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v15, "objectForKey:", v13);
      v16 = (void *)objc_claimAutoreleasedReturnValue();

      v17 = objc_msgSend(v16, "containsObject:", v14);
      v18 = v17;
      if (v17)
        objc_msgSend(v16, "removeObject:", v14);
      -[HMDHomeManager homeUUIDsWithAutoAddWalletKeySuppressedSync](v7, "homeUUIDsWithAutoAddWalletKeySuppressedSync");
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      v20 = objc_msgSend(v19, "containsObject:", v14);

      os_unfair_lock_unlock(&v7->_lock);
      if ((v18 & 1) != 0)
      {
        v21 = objc_msgSend(v4, "respondWithSuccess");
        if (v20)
        {
          v22 = (void *)MEMORY[0x227676638](v21);
          v23 = v7;
          HMFGetOSLogHandle();
          v24 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v24, OS_LOG_TYPE_INFO))
          {
            HMFGetLogIdentifier();
            v25 = (void *)objc_claimAutoreleasedReturnValue();
            v42 = 138543618;
            v43 = v25;
            v44 = 2112;
            v45 = v14;
            _os_log_impl(&dword_2218F0000, v24, OS_LOG_TYPE_INFO, "%{public}@Not auto adding wallet key for home with uuid: %@ after assertion was released because of some other pending assertion", (uint8_t *)&v42, 0x16u);

          }
          objc_autoreleasePoolPop(v22);
        }
        else
        {
          -[HMDHomeManager addWalletKeyWithHomeUUID:reason:](v7, "addWalletKeyWithHomeUUID:reason:", v14, CFSTR("assertion released"));
        }
      }
      else
      {
        v37 = (void *)MEMORY[0x227676638]();
        v38 = v7;
        HMFGetOSLogHandle();
        v39 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v39, OS_LOG_TYPE_INFO))
        {
          HMFGetLogIdentifier();
          v40 = (void *)objc_claimAutoreleasedReturnValue();
          v42 = 138543874;
          v43 = v40;
          v44 = 2112;
          v45 = v14;
          v46 = 2112;
          v47 = v13;
          _os_log_impl(&dword_2218F0000, v39, OS_LOG_TYPE_INFO, "%{public}@Could not find any any assertion for home with uuid: %@ for connection: %@", (uint8_t *)&v42, 0x20u);

        }
        objc_autoreleasePoolPop(v37);
        objc_msgSend(MEMORY[0x24BDD1540], "hmErrorWithCode:", 2);
        v41 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v4, "respondWithError:", v41);

      }
    }
    else
    {
      v31 = (void *)MEMORY[0x227676638]();
      v32 = v7;
      HMFGetOSLogHandle();
      v33 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v33, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v34 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v4, "messagePayload");
        v35 = (void *)objc_claimAutoreleasedReturnValue();
        v42 = 138543618;
        v43 = v34;
        v44 = 2112;
        v45 = v35;
        _os_log_impl(&dword_2218F0000, v33, OS_LOG_TYPE_ERROR, "%{public}@Missing home uuid parameter in message payload: %@", (uint8_t *)&v42, 0x16u);

      }
      objc_autoreleasePoolPop(v31);
      objc_msgSend(MEMORY[0x24BDD1540], "hmErrorWithCode:", 3);
      v36 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "respondWithError:", v36);

      v14 = 0;
    }
  }
  else
  {
    v26 = (void *)MEMORY[0x227676638]();
    v27 = v7;
    HMFGetOSLogHandle();
    v28 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v29 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "transport");
      v30 = (void *)objc_claimAutoreleasedReturnValue();
      v42 = 138543618;
      v43 = v29;
      v44 = 2112;
      v45 = v30;
      _os_log_impl(&dword_2218F0000, v28, OS_LOG_TYPE_ERROR, "%{public}@Received auto add wallet key suppression assertion release message from unknown transport: %@", (uint8_t *)&v42, 0x16u);

    }
    objc_autoreleasePoolPop(v26);
    objc_msgSend(MEMORY[0x24BDD1540], "hmErrorWithCode:", -1);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "respondWithError:", v14);
  }

}

- (void)addWalletKeyWithHomeUUID:(id)a3 reason:(id)a4
{
  id v6;
  id v7;
  void *v8;
  void *v9;
  void *v10;
  HMDHomeManager *v11;
  NSObject *v12;
  void *v13;
  void *v14;
  NSObject *v15;
  id v16;
  void *v17;
  HMDHomeManager *v18;
  NSObject *v19;
  void *v20;
  _QWORD v21[4];
  id v22;
  id v23;
  uint8_t buf[4];
  void *v25;
  __int16 v26;
  id v27;
  __int16 v28;
  id v29;
  __int16 v30;
  id v31;
  uint64_t v32;

  v32 = *MEMORY[0x24BDAC8D0];
  v6 = a3;
  v7 = a4;
  -[HMDHomeManager _homeWithUUID:](self, "_homeWithUUID:", v6);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  if (v8)
  {
    objc_msgSend(MEMORY[0x24BE3F178], "internalOnlyInitializer");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v10 = (void *)MEMORY[0x227676638]();
    v11 = self;
    HMFGetOSLogHandle();
    v12 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v9, "UUID");
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138544130;
      v25 = v13;
      v26 = 2112;
      v27 = v14;
      v28 = 2112;
      v29 = v6;
      v30 = 2112;
      v31 = v7;
      _os_log_impl(&dword_2218F0000, v12, OS_LOG_TYPE_INFO, "%{public}@[NewFlow: %@] Auto adding for wallet key for home with uuid: %@ reason: %@", buf, 0x2Au);

    }
    objc_autoreleasePoolPop(v10);
    objc_msgSend(v8, "workQueue");
    v15 = objc_claimAutoreleasedReturnValue();
    v21[0] = MEMORY[0x24BDAC760];
    v21[1] = 3221225472;
    v21[2] = __58__HMDHomeManager_Wallet__addWalletKeyWithHomeUUID_reason___block_invoke;
    v21[3] = &unk_24E79C268;
    v22 = v8;
    v23 = v9;
    v16 = v9;
    dispatch_async(v15, v21);

  }
  else
  {
    v17 = (void *)MEMORY[0x227676638]();
    v18 = self;
    HMFGetOSLogHandle();
    v19 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543874;
      v25 = v20;
      v26 = 2112;
      v27 = v6;
      v28 = 2112;
      v29 = v7;
      _os_log_impl(&dword_2218F0000, v19, OS_LOG_TYPE_INFO, "%{public}@Not auto adding wallet key for home with uuid: %@ reason: %@", buf, 0x20u);

    }
    objc_autoreleasePoolPop(v17);
  }

}

- (id)homeUUIDsWithAutoAddWalletKeySuppressedSync
{
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  _BYTE v19[128];
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  os_unfair_lock_assert_owner(&self->_lock);
  objc_msgSend(MEMORY[0x24BDBCEF0], "set");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v15 = 0u;
  v16 = 0u;
  v17 = 0u;
  v18 = 0u;
  -[HMDHomeManager homeUUIDsByWalletKeyAssertionXPCConnection](self, "homeUUIDsByWalletKeyAssertionXPCConnection", 0);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v15, v19, 16);
  if (v5)
  {
    v6 = v5;
    v7 = *(_QWORD *)v16;
    do
    {
      v8 = 0;
      do
      {
        if (*(_QWORD *)v16 != v7)
          objc_enumerationMutation(v4);
        v9 = *(_QWORD *)(*((_QWORD *)&v15 + 1) + 8 * v8);
        -[HMDHomeManager homeUUIDsByWalletKeyAssertionXPCConnection](self, "homeUUIDsByWalletKeyAssertionXPCConnection");
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v10, "objectForKey:", v9);
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v11, "allObjects");
        v12 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v3, "addObjectsFromArray:", v12);

        ++v8;
      }
      while (v6 != v8);
      v6 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v15, v19, 16);
    }
    while (v6);
  }

  v13 = (void *)objc_msgSend(v3, "copy");
  return v13;
}

- (void)handleWalletKeyAssertionsXPCConnectionRemoved:(id)a3
{
  id v4;
  void *v5;
  HMDHomeManager *v6;
  NSObject *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  HMDHomeManager *v14;
  NSObject *v15;
  void *v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint8_t v25[128];
  uint8_t buf[4];
  void *v27;
  __int16 v28;
  id v29;
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  v4 = a3;
  v5 = (void *)MEMORY[0x227676638]();
  v6 = self;
  HMFGetOSLogHandle();
  v7 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543618;
    v27 = v8;
    v28 = 2112;
    v29 = v4;
    _os_log_impl(&dword_2218F0000, v7, OS_LOG_TYPE_INFO, "%{public}@Handling wallet key assertion when xpc connection was removed: %@", buf, 0x16u);

  }
  objc_autoreleasePoolPop(v5);
  os_unfair_lock_lock_with_options();
  -[HMDHomeManager homeUUIDsWithAutoAddWalletKeySuppressedSync](v6, "homeUUIDsWithAutoAddWalletKeySuppressedSync");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = (void *)objc_msgSend(v9, "mutableCopy");

  -[HMDHomeManager homeUUIDsByWalletKeyAssertionXPCConnection](v6, "homeUUIDsByWalletKeyAssertionXPCConnection");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "removeObjectForKey:", v4);

  -[HMDHomeManager homeUUIDsWithAutoAddWalletKeySuppressedSync](v6, "homeUUIDsWithAutoAddWalletKeySuppressedSync");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "minusSet:", v12);

  os_unfair_lock_unlock(&v6->_lock);
  v13 = (void *)MEMORY[0x227676638]();
  v14 = v6;
  HMFGetOSLogHandle();
  v15 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543618;
    v27 = v16;
    v28 = 2112;
    v29 = v10;
    _os_log_impl(&dword_2218F0000, v15, OS_LOG_TYPE_INFO, "%{public}@Auto adding wallet key for homes with uuids: %@, when xpc connection was removed", buf, 0x16u);

  }
  objc_autoreleasePoolPop(v13);
  v23 = 0u;
  v24 = 0u;
  v21 = 0u;
  v22 = 0u;
  v17 = v10;
  v18 = objc_msgSend(v17, "countByEnumeratingWithState:objects:count:", &v21, v25, 16);
  if (v18)
  {
    v19 = *(_QWORD *)v22;
    do
    {
      v20 = 0;
      do
      {
        if (*(_QWORD *)v22 != v19)
          objc_enumerationMutation(v17);
        -[HMDHomeManager addWalletKeyWithHomeUUID:reason:](v14, "addWalletKeyWithHomeUUID:reason:", *(_QWORD *)(*((_QWORD *)&v21 + 1) + 8 * v20++), CFSTR("connection removed"), (_QWORD)v21);
      }
      while (v18 != v20);
      v18 = objc_msgSend(v17, "countByEnumeratingWithState:objects:count:", &v21, v25, 16);
    }
    while (v18);
  }

}

- (NSSet)homeUUIDsWithAutoAddWalletKeySuppressed
{
  os_unfair_lock_s *p_lock;
  void *v4;

  p_lock = &self->_lock;
  os_unfair_lock_lock_with_options();
  -[HMDHomeManager homeUUIDsWithAutoAddWalletKeySuppressedSync](self, "homeUUIDsWithAutoAddWalletKeySuppressedSync");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  os_unfair_lock_unlock(p_lock);
  return (NSSet *)v4;
}

- (void)removeHomeWalletKeysExcludingSerialNumbers:(id)a3 flow:(id)a4
{
  void *v6;
  HMDHomeManager *v7;
  NSObject *v8;
  void *v9;
  void *v10;
  HMDWalletPassLibrary *v11;
  void *v12;
  HMDWalletPassLibrary *v13;
  void *v14;
  void *v15;
  HMDHomeManager *v16;
  NSObject *v17;
  void *v18;
  void *v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t i;
  void *v25;
  void *v26;
  char v27;
  void *v28;
  HMDHomeManager *v29;
  HMDHomeManager *v30;
  NSObject *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  __int128 v36;
  HMDWalletPassLibrary *v37;
  id obj;
  id v39;
  id v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  uint8_t v45[128];
  uint8_t buf[4];
  void *v47;
  __int16 v48;
  void *v49;
  __int16 v50;
  id v51;
  uint64_t v52;

  v52 = *MEMORY[0x24BDAC8D0];
  v40 = a3;
  v39 = a4;
  v6 = (void *)MEMORY[0x227676638]();
  v7 = self;
  HMFGetOSLogHandle();
  v8 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v39, "UUID");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543874;
    v47 = v9;
    v48 = 2112;
    v49 = v10;
    v50 = 2112;
    v51 = v40;
    _os_log_impl(&dword_2218F0000, v8, OS_LOG_TYPE_INFO, "%{public}@[Flow: %@] Removing home wallet keys with serial number not in: %@", buf, 0x20u);

  }
  objc_autoreleasePoolPop(v6);
  v11 = [HMDWalletPassLibrary alloc];
  -[HMDHomeManager workQueue](v7, "workQueue");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  v13 = -[HMDWalletPassLibrary initWithWorkQueue:](v11, "initWithWorkQueue:", v12);

  v37 = v13;
  -[HMDWalletPassLibrary walletKeys](v13, "walletKeys");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  v15 = (void *)MEMORY[0x227676638]();
  v16 = v7;
  HMFGetOSLogHandle();
  v17 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v39, "UUID");
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543874;
    v47 = v18;
    v48 = 2112;
    v49 = v19;
    v50 = 2112;
    v51 = v14;
    _os_log_impl(&dword_2218F0000, v17, OS_LOG_TYPE_INFO, "%{public}@[Flow: %@] Existing home keys in wallet: %@", buf, 0x20u);

  }
  objc_autoreleasePoolPop(v15);
  v43 = 0u;
  v44 = 0u;
  v41 = 0u;
  v42 = 0u;
  obj = v14;
  v20 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v41, v45, 16);
  if (v20)
  {
    v22 = v20;
    v23 = *(_QWORD *)v42;
    *(_QWORD *)&v21 = 138543874;
    v36 = v21;
    do
    {
      for (i = 0; i != v22; ++i)
      {
        if (*(_QWORD *)v42 != v23)
          objc_enumerationMutation(obj);
        v25 = *(void **)(*((_QWORD *)&v41 + 1) + 8 * i);
        objc_msgSend(v25, "serialNumber", v36);
        v26 = (void *)objc_claimAutoreleasedReturnValue();
        v27 = objc_msgSend(v40, "containsObject:", v26);

        if ((v27 & 1) == 0)
        {
          v28 = (void *)MEMORY[0x227676638]();
          v29 = v16;
          v30 = v16;
          HMFGetOSLogHandle();
          v31 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v31, OS_LOG_TYPE_INFO))
          {
            HMFGetLogIdentifier();
            v32 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v39, "UUID");
            v33 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = v36;
            v47 = v32;
            v48 = 2112;
            v49 = v33;
            v50 = 2112;
            v51 = v25;
            _os_log_impl(&dword_2218F0000, v31, OS_LOG_TYPE_INFO, "%{public}@[Flow: %@] Removing wallet key that doesn't belong to any home: %@", buf, 0x20u);

          }
          objc_autoreleasePoolPop(v28);
          objc_msgSend(v25, "typeIdentifier");
          v34 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v25, "serialNumber");
          v35 = (void *)objc_claimAutoreleasedReturnValue();
          -[HMDWalletPassLibrary removePassWithTypeIdentifier:serialNumber:flow:](v37, "removePassWithTypeIdentifier:serialNumber:flow:", v34, v35, v39);

          v16 = v29;
        }
      }
      v22 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v41, v45, 16);
    }
    while (v22);
  }

}

- (void)autoAddWalletKeysOncePerDeviceSetup
{
  HMDWalletPassLibrary *v3;
  void *v4;
  HMDWalletPassLibrary *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  HMDHomeManager *v11;
  NSObject *v12;
  void *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t i;
  void *v20;
  NSObject *v21;
  void *v22;
  id obj;
  HMDHomeWalletDataSource *v24;
  _QWORD block[5];
  HMDHomeWalletDataSource *v26;
  HMDHomeManager *v27;
  id v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint8_t v33[128];
  uint8_t buf[4];
  void *v35;
  __int16 v36;
  void *v37;
  uint64_t v38;

  v38 = *MEMORY[0x24BDAC8D0];
  v24 = objc_alloc_init(HMDHomeWalletDataSource);
  -[HMDHomeWalletDataSource numberValueFromNoBackupStoreWithKey:](v24, "numberValueFromNoBackupStoreWithKey:", CFSTR("HMDHomeManagerRecordInitialWalletKeysOncePerDevice"));
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  if ((objc_msgSend(v22, "BOOLValue") & 1) == 0)
  {
    v3 = [HMDWalletPassLibrary alloc];
    -[HMDHomeManager workQueue](self, "workQueue");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    v5 = -[HMDWalletPassLibrary initWithWorkQueue:](v3, "initWithWorkQueue:", v4);

    +[HMDHomeKeyDataRecorder sharedRecorder](HMDHomeKeyDataRecorder, "sharedRecorder");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDWalletPassLibrary walletKeys](v5, "walletKeys");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "allObjects");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "recordInitialWalletKeys:", v8);

    -[HMDHomeWalletDataSource persistNumberValueToNoBackupStore:withKey:](v24, "persistNumberValueToNoBackupStore:withKey:", MEMORY[0x24BDBD1C8], CFSTR("HMDHomeManagerRecordInitialWalletKeysOncePerDevice"));
  }
  objc_msgSend(MEMORY[0x24BE3F178], "internalOnlyInitializer");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = (void *)MEMORY[0x227676638]();
  v11 = self;
  HMFGetOSLogHandle();
  v12 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "UUID");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543618;
    v35 = v13;
    v36 = 2112;
    v37 = v14;
    _os_log_impl(&dword_2218F0000, v12, OS_LOG_TYPE_INFO, "%{public}@[NewFlow: %@] Auto add wallet keys once per device setup", buf, 0x16u);

  }
  objc_autoreleasePoolPop(v10);
  v31 = 0u;
  v32 = 0u;
  v29 = 0u;
  v30 = 0u;
  -[HMDHomeManager homes](v11, "homes");
  obj = (id)objc_claimAutoreleasedReturnValue();
  v15 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v29, v33, 16);
  if (v15)
  {
    v16 = v15;
    v17 = *(_QWORD *)v30;
    v18 = MEMORY[0x24BDAC760];
    do
    {
      for (i = 0; i != v16; ++i)
      {
        if (*(_QWORD *)v30 != v17)
          objc_enumerationMutation(obj);
        v20 = *(void **)(*((_QWORD *)&v29 + 1) + 8 * i);
        objc_msgSend(v20, "workQueue");
        v21 = objc_claimAutoreleasedReturnValue();
        block[0] = v18;
        block[1] = 3221225472;
        block[2] = __61__HMDHomeManager_Wallet__autoAddWalletKeysOncePerDeviceSetup__block_invoke;
        block[3] = &unk_24E79A910;
        block[4] = v20;
        v26 = v24;
        v27 = v11;
        v28 = v9;
        dispatch_async(v21, block);

      }
      v16 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v29, v33, 16);
    }
    while (v16);
  }

}

void __61__HMDHomeManager_Wallet__autoAddWalletKeysOncePerDeviceSetup__block_invoke(id *a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;
  NSObject *v10;
  void *v11;
  void *v12;
  id v13;
  int v14;
  void *v15;
  id v16;
  NSObject *v17;
  _BOOL4 v18;
  void *v19;
  void *v20;
  id v21;
  void *v22;
  void *v23;
  id v24;
  void *v25;
  int v26;
  void *v27;
  __int16 v28;
  void *v29;
  __int16 v30;
  id v31;
  __int16 v32;
  void *v33;
  uint64_t v34;

  v34 = *MEMORY[0x24BDAC8D0];
  v2 = (void *)MEMORY[0x24BDD1880];
  objc_msgSend(a1[4], "uuid");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(CFSTR("D4F5EA54-226C-44B6-B7CD-45DA59BE5B1F"), "dataUsingEncoding:", 4);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "hmf_UUIDWithNamespace:data:", v3, v4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "UUIDString");
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(a1[5], "numberValueFromNoBackupStoreWithKey:", v6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = (void *)MEMORY[0x227676638]();
  v9 = a1[6];
  HMFGetOSLogHandle();
  v10 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(a1[7], "UUID");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    v13 = a1[4];
    v26 = 138544130;
    v27 = v11;
    v28 = 2112;
    v29 = v12;
    v30 = 2112;
    v31 = v13;
    v32 = 2112;
    v33 = v6;
    _os_log_impl(&dword_2218F0000, v10, OS_LOG_TYPE_INFO, "%{public}@[Flow: %@] Auto add wallet key preference key for home %@:%@", (uint8_t *)&v26, 0x2Au);

  }
  objc_autoreleasePoolPop(v8);
  v14 = objc_msgSend(v7, "BOOLValue");
  v15 = (void *)MEMORY[0x227676638]();
  v16 = a1[6];
  HMFGetOSLogHandle();
  v17 = objc_claimAutoreleasedReturnValue();
  v18 = os_log_type_enabled(v17, OS_LOG_TYPE_INFO);
  if (v14)
  {
    if (v18)
    {
      HMFGetLogIdentifier();
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(a1[7], "UUID");
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      v21 = a1[4];
      v26 = 138543874;
      v27 = v19;
      v28 = 2112;
      v29 = v20;
      v30 = 2112;
      v31 = v21;
      _os_log_impl(&dword_2218F0000, v17, OS_LOG_TYPE_INFO, "%{public}@[Flow: %@] Already auto added wallet key once per device setup for home: %@", (uint8_t *)&v26, 0x20u);

    }
    objc_autoreleasePoolPop(v15);
  }
  else
  {
    if (v18)
    {
      HMFGetLogIdentifier();
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(a1[7], "UUID");
      v23 = (void *)objc_claimAutoreleasedReturnValue();
      v24 = a1[4];
      v26 = 138543874;
      v27 = v22;
      v28 = 2112;
      v29 = v23;
      v30 = 2112;
      v31 = v24;
      _os_log_impl(&dword_2218F0000, v17, OS_LOG_TYPE_INFO, "%{public}@[Flow: %@] Auto adding wallet key once per device setup for home: %@", (uint8_t *)&v26, 0x20u);

    }
    objc_autoreleasePoolPop(v15);
    objc_msgSend(a1[4], "walletKeyManager");
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v25, "autoAddWalletKeyWithFlow:", a1[7]);

    objc_msgSend(a1[5], "persistNumberValueToNoBackupStore:withKey:", MEMORY[0x24BDBD1C8], v6);
  }

}

void __58__HMDHomeManager_Wallet__addWalletKeyWithHomeUUID_reason___block_invoke(uint64_t a1)
{
  id v2;

  objc_msgSend(*(id *)(a1 + 32), "walletKeyManager");
  v2 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "autoAddWalletKeyWithFlow:", *(_QWORD *)(a1 + 40));

}

- (id)_legacyContainer
{
  id v2;
  void *v3;
  void *v4;

  v2 = objc_alloc(MEMORY[0x24BDB9038]);
  v3 = (void *)objc_msgSend(v2, "initWithContainerIdentifier:environment:", CFSTR("com.apple.willow.config"), cloudKitContainerEnvironment);
  v4 = (void *)objc_msgSend(objc_alloc(MEMORY[0x24BDB9030]), "initWithContainerID:", v3);

  return v4;
}

- (id)_legacyHomeZoneIDFromHomeUUID:(id)a3
{
  id v3;
  void *v4;
  void *v5;
  id v6;
  void *v7;
  void *v8;
  HMDHomeManager *v10;
  SEL v11;
  id v12;

  v3 = a3;
  if (v3)
  {
    v4 = v3;
    +[HMDHome zoneIDFromHomeUUID:](HMDHome, "zoneIDFromHomeUUID:", v3);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = objc_alloc(MEMORY[0x24BDB91F8]);
    objc_msgSend(v5, "UUIDString");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = (void *)objc_msgSend(v6, "initWithZoneName:ownerName:", v7, *MEMORY[0x24BDB8E88]);

    return v8;
  }
  else
  {
    v10 = (HMDHomeManager *)_HMFPreconditionFailure();
    return -[HMDHomeManager _legacyHomeAcceptedZoneIDFromHomeUUID:](v10, v11, v12);
  }
}

- (id)_legacyHomeAcceptedZoneIDFromHomeUUID:(id)a3
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;
  void *v10;
  id result;
  HMDHomeManager *v12;
  SEL v13;
  id v14;
  id v15;

  v3 = a3;
  if (v3)
  {
    v4 = v3;
    +[HMDHome zoneIDFromHomeUUID:](HMDHome, "zoneIDFromHomeUUID:", v3);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = (void *)MEMORY[0x24BDD17C8];
    objc_msgSend(v5, "UUIDString");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "stringWithFormat:", CFSTR("%@_accepted"), v7);
    v8 = (void *)objc_claimAutoreleasedReturnValue();

    v9 = objc_alloc(MEMORY[0x24BDB91F8]);
    v10 = (void *)objc_msgSend(v9, "initWithZoneName:ownerName:", v8, *MEMORY[0x24BDB8E88]);

    return v10;
  }
  else
  {
    v12 = (HMDHomeManager *)_HMFPreconditionFailure();
    -[HMDHomeManager _queryLegacyHomeAndAcceptedZoneExists:completion:](v12, v13, v14, v15);
  }
  return result;
}

- (void)_queryLegacyHomeAndAcceptedZoneExists:(id)a3 completion:(id)a4
{
  id v6;
  id v7;
  void (**v8)(_QWORD, _QWORD, _QWORD);
  void *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  void *v13;
  id v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  HMDHomeManager *v19;
  NSObject *v20;
  void *v21;
  void *v22;
  id v23;
  void *v24;
  void *v25;
  HMDHomeManager *v26;
  NSObject *v27;
  void *v28;
  void (**v29)(_QWORD, _QWORD, _QWORD);
  void *v30;
  void *v31;
  _QWORD v32[5];
  id v33;
  id v34;
  id v35;
  void (**v36)(_QWORD, _QWORD, _QWORD);
  uint8_t buf[4];
  void *v38;
  __int16 v39;
  id v40;
  __int16 v41;
  void *v42;
  __int16 v43;
  void *v44;
  _QWORD v45[4];

  v45[2] = *MEMORY[0x24BDAC8D0];
  v6 = a3;
  v7 = a4;
  if (!v6)
    _HMFPreconditionFailure();
  v8 = (void (**)(_QWORD, _QWORD, _QWORD))v7;
  -[HMDHomeManager _legacyContainer](self, "_legacyContainer");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "privateCloudDatabase");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHomeManager _legacyHomeZoneIDFromHomeUUID:](self, "_legacyHomeZoneIDFromHomeUUID:", v6);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHomeManager _legacyHomeAcceptedZoneIDFromHomeUUID:](self, "_legacyHomeAcceptedZoneIDFromHomeUUID:", v6);
  v12 = objc_claimAutoreleasedReturnValue();
  v13 = (void *)v12;
  if (v11 && v12)
  {
    v31 = v9;
    v14 = objc_alloc(MEMORY[0x24BDB90E0]);
    v45[0] = v11;
    v45[1] = v13;
    objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", v45, 2);
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    v16 = (void *)objc_msgSend(v14, "initWithRecordZoneIDs:", v15);

    v30 = v10;
    objc_msgSend(v16, "setDatabase:", v10);
    objc_msgSend(v16, "operationID");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    v18 = (void *)MEMORY[0x227676638]();
    v19 = self;
    HMFGetOSLogHandle();
    v20 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v20, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v29 = v8;
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v11, "zoneName");
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138544130;
      v38 = v21;
      v39 = 2112;
      v40 = v6;
      v41 = 2112;
      v42 = v22;
      v43 = 2112;
      v44 = v17;
      _os_log_impl(&dword_2218F0000, v20, OS_LOG_TYPE_INFO, "%{public}@Querying the legacy container for existing home/zone (%@/%@) with operation ID %@", buf, 0x2Au);

      v8 = v29;
    }

    objc_autoreleasePoolPop(v18);
    v32[0] = MEMORY[0x24BDAC760];
    v32[1] = 3221225472;
    v32[2] = __83__HMDHomeManager_LegacyHomeZone___queryLegacyHomeAndAcceptedZoneExists_completion___block_invoke;
    v32[3] = &unk_24E781C48;
    v32[4] = v19;
    v33 = v17;
    v34 = v11;
    v35 = v13;
    v36 = v8;
    v23 = v17;
    objc_msgSend(v16, "setFetchRecordZonesCompletionBlock:", v32);
    v10 = v30;
    objc_msgSend(v30, "operationQueue");
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v24, "addOperation:", v16);

    v9 = v31;
  }
  else
  {
    v25 = (void *)MEMORY[0x227676638]();
    v26 = self;
    HMFGetOSLogHandle();
    v27 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v27, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v28 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v38 = v28;
      v39 = 2112;
      v40 = v6;
      _os_log_impl(&dword_2218F0000, v27, OS_LOG_TYPE_INFO, "%{public}@Failed to determine legacy zoneID for home %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v25);
    v8[2](v8, 0, 0);
  }

}

- (void)_maybeCreateLegacyHomeAcceptedZone:(id)a3
{
  id v4;
  id v5;
  uint64_t v6;
  char v7;
  int v8;
  _QWORD v9[5];
  id v10;

  v4 = a3;
  if (v4)
  {
    v9[0] = MEMORY[0x24BDAC760];
    v9[1] = 3221225472;
    v9[2] = __69__HMDHomeManager_LegacyHomeZone___maybeCreateLegacyHomeAcceptedZone___block_invoke;
    v9[3] = &unk_24E781C98;
    v9[4] = self;
    v10 = v4;
    v5 = v4;
    -[HMDHomeManager _queryLegacyHomeAndAcceptedZoneExists:completion:](self, "_queryLegacyHomeAndAcceptedZoneExists:completion:", v5, v9);

  }
  else
  {
    v6 = _HMFPreconditionFailure();
    __69__HMDHomeManager_LegacyHomeZone___maybeCreateLegacyHomeAcceptedZone___block_invoke(v6, v7, v8);
  }
}

void __69__HMDHomeManager_LegacyHomeZone___maybeCreateLegacyHomeAcceptedZone___block_invoke(uint64_t a1, char a2, int a3)
{
  void *v4;
  id v5;
  NSObject *v6;
  void *v7;
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  void *v11;
  void *v12;
  id v13;
  void *v14;
  void *v15;
  id v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  id v21;
  NSObject *v22;
  void *v23;
  uint64_t v24;
  void *v25;
  void *v26;
  id v27;
  void *v28;
  void *v29;
  id v30;
  NSObject *v31;
  void *v32;
  uint64_t v33;
  void *v34;
  void *v35;
  void *v36;
  _QWORD v37[5];
  id v38;
  uint8_t buf[4];
  void *v40;
  __int16 v41;
  uint64_t v42;
  __int16 v43;
  void *v44;
  __int16 v45;
  void *v46;
  _QWORD v47[2];

  v47[1] = *MEMORY[0x24BDAC8D0];
  if ((a2 & 1) == 0)
  {
    v4 = (void *)MEMORY[0x227676638]();
    v5 = *(id *)(a1 + 32);
    HMFGetOSLogHandle();
    v6 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      v10 = *(_QWORD *)(a1 + 40);
      *(_DWORD *)buf = 138543618;
      v40 = v7;
      v41 = 2112;
      v42 = v10;
      v9 = "%{public}@Skip creating home accepted zone since no legacy home %@ was found";
      goto LABEL_7;
    }
LABEL_8:

    objc_autoreleasePoolPop(v4);
    return;
  }
  if (a3)
  {
    v4 = (void *)MEMORY[0x227676638]();
    v5 = *(id *)(a1 + 32);
    HMFGetOSLogHandle();
    v6 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      v8 = *(_QWORD *)(a1 + 40);
      *(_DWORD *)buf = 138543618;
      v40 = v7;
      v41 = 2112;
      v42 = v8;
      v9 = "%{public}@Skip creating home accepted zone for home %@ since it already exists";
LABEL_7:
      _os_log_impl(&dword_2218F0000, v6, OS_LOG_TYPE_INFO, v9, buf, 0x16u);

      goto LABEL_8;
    }
    goto LABEL_8;
  }
  objc_msgSend(*(id *)(a1 + 32), "_legacyContainer");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "privateCloudDatabase");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  v13 = objc_alloc(MEMORY[0x24BDB91F0]);
  objc_msgSend(*(id *)(a1 + 32), "_legacyHomeAcceptedZoneIDFromHomeUUID:", *(_QWORD *)(a1 + 40));
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  v15 = (void *)objc_msgSend(v13, "initWithZoneID:", v14);

  if (v15)
  {
    v16 = objc_alloc(MEMORY[0x24BDB9150]);
    v47[0] = v15;
    objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", v47, 1);
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    v18 = (void *)objc_msgSend(v16, "initWithRecordZonesToSave:recordZoneIDsToDelete:", v17, 0);

    v36 = v12;
    objc_msgSend(v18, "setDatabase:", v12);
    objc_msgSend(v18, "operationID");
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    v20 = (void *)MEMORY[0x227676638]();
    v21 = *(id *)(a1 + 32);
    HMFGetOSLogHandle();
    v22 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v22, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v35 = v11;
      v23 = (void *)objc_claimAutoreleasedReturnValue();
      v24 = *(_QWORD *)(a1 + 40);
      objc_msgSend(v15, "zoneID");
      v34 = v20;
      v25 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v25, "zoneName");
      v26 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138544130;
      v40 = v23;
      v41 = 2112;
      v42 = v24;
      v43 = 2112;
      v44 = v26;
      v45 = 2112;
      v46 = v19;
      _os_log_impl(&dword_2218F0000, v22, OS_LOG_TYPE_INFO, "%{public}@Saving legacy home accepted zone for home/zoneAccepted (%@/%@) with operation ID %@", buf, 0x2Au);

      v20 = v34;
      v11 = v35;
    }

    objc_autoreleasePoolPop(v20);
    v37[0] = MEMORY[0x24BDAC760];
    v37[1] = 3221225472;
    v37[2] = __69__HMDHomeManager_LegacyHomeZone___maybeCreateLegacyHomeAcceptedZone___block_invoke_12;
    v37[3] = &unk_24E781C70;
    v37[4] = *(_QWORD *)(a1 + 32);
    v38 = v19;
    v27 = v19;
    objc_msgSend(v18, "setModifyRecordZonesCompletionBlock:", v37);
    v12 = v36;
    objc_msgSend(v36, "operationQueue");
    v28 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v28, "addOperation:", v18);

  }
  else
  {
    v29 = (void *)MEMORY[0x227676638]();
    v30 = *(id *)(a1 + 32);
    HMFGetOSLogHandle();
    v31 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v31, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v32 = (void *)objc_claimAutoreleasedReturnValue();
      v33 = *(_QWORD *)(a1 + 40);
      *(_DWORD *)buf = 138543618;
      v40 = v32;
      v41 = 2112;
      v42 = v33;
      _os_log_impl(&dword_2218F0000, v31, OS_LOG_TYPE_INFO, "%{public}@Failed to determine legacy accepted zoneID for home %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v29);
  }

}

void __69__HMDHomeManager_LegacyHomeZone___maybeCreateLegacyHomeAcceptedZone___block_invoke_12(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  void *v10;
  id v11;
  NSObject *v12;
  void *v13;
  uint64_t v14;
  int v15;
  void *v16;
  __int16 v17;
  uint64_t v18;
  __int16 v19;
  id v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  v7 = a2;
  v8 = a3;
  v9 = a4;
  v10 = (void *)MEMORY[0x227676638]();
  v11 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v12 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    v14 = *(_QWORD *)(a1 + 40);
    v15 = 138543874;
    v16 = v13;
    v17 = 2112;
    v18 = v14;
    v19 = 2112;
    v20 = v9;
    _os_log_impl(&dword_2218F0000, v12, OS_LOG_TYPE_INFO, "%{public}@Completed saving legacy home accepted zone with operation ID %@ and error %@", (uint8_t *)&v15, 0x20u);

  }
  objc_autoreleasePoolPop(v10);

}

void __83__HMDHomeManager_LegacyHomeZone___queryLegacyHomeAndAcceptedZoneExists_completion___block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  id v8;
  NSObject *v9;
  void *v10;
  void *v11;
  void *v12;
  id v13;
  NSObject *v14;
  void *v15;
  void *v16;
  void *v17;
  void (*v18)(void);
  void *v19;
  id v20;
  NSObject *v21;
  void *v22;
  id v23;
  uint8_t buf[4];
  void *v25;
  __int16 v26;
  void *v27;
  __int16 v28;
  id v29;
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  v5 = a2;
  v6 = a3;
  v7 = (void *)MEMORY[0x227676638]();
  v8 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v9 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v11 = *(void **)(a1 + 40);
    *(_DWORD *)buf = 138543874;
    v25 = v10;
    v26 = 2112;
    v27 = v11;
    v28 = 2112;
    v29 = v6;
    _os_log_impl(&dword_2218F0000, v9, OS_LOG_TYPE_INFO, "%{public}@Completed fetching record zone with operation ID %@ and error %@", buf, 0x20u);

  }
  objc_autoreleasePoolPop(v7);
  if (v5)
  {
    objc_msgSend(v5, "objectForKeyedSubscript:", *(_QWORD *)(a1 + 48));

    objc_msgSend(v5, "objectForKeyedSubscript:", *(_QWORD *)(a1 + 56));
    v12 = (void *)MEMORY[0x227676638]();
    v13 = *(id *)(a1 + 32);
    HMFGetOSLogHandle();
    v14 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
    {
      v23 = v6;
      HMFGetLogIdentifier();
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      HMFBooleanToString();
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      HMFBooleanToString();
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543874;
      v25 = v15;
      v26 = 2112;
      v27 = v16;
      v28 = 2112;
      v29 = v17;
      _os_log_impl(&dword_2218F0000, v14, OS_LOG_TYPE_INFO, "%{public}@Legacy home zone exists = %@ and legacy home accepted zone = %@", buf, 0x20u);

      v6 = v23;
    }

    objc_autoreleasePoolPop(v12);
    v18 = *(void (**)(void))(*(_QWORD *)(a1 + 64) + 16);
  }
  else
  {
    v19 = (void *)MEMORY[0x227676638]();
    v20 = *(id *)(a1 + 32);
    HMFGetOSLogHandle();
    v21 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v25 = v22;
      _os_log_impl(&dword_2218F0000, v21, OS_LOG_TYPE_ERROR, "%{public}@Failed to determine legacy zones returning that neither home zone or home accepted zone exist", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v19);
    v18 = *(void (**)(void))(*(_QWORD *)(a1 + 64) + 16);
  }
  v18();

}

- (void)registerNotificationsForPowerManagement
{
  void *v3;
  void *v4;
  void *v5;
  id v6;

  -[HMDHomeManager notificationCenter](self, "notificationCenter");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "addObserver:selector:name:object:", self, sel__updatePowerAssertion_, CFSTR("HMDHomeAddedNotification"), 0);

  -[HMDHomeManager notificationCenter](self, "notificationCenter");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "addObserver:selector:name:object:", self, sel__updatePowerAssertion_, CFSTR("HMDHomeRemovedNotification"), 0);

  -[HMDHomeManager notificationCenter](self, "notificationCenter");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "addObserver:selector:name:object:", self, sel__updatePowerAssertion_, CFSTR("HMDResidentDeviceManagerAddResidentNotification"), 0);

  -[HMDHomeManager notificationCenter](self, "notificationCenter");
  v6 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "addObserver:selector:name:object:", self, sel__updatePowerAssertion_, CFSTR("HMDResidentDeviceManagerRemoveResidentNotification"), 0);

}

- (void)updatePowerAssertion
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  HMDHomeManager *v8;
  NSObject *v9;
  void *v10;
  void *v11;
  void *v12;
  int v13;
  void *v14;
  __int16 v15;
  void *v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  -[HMDHomeManager homes](self, "homes");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "count");
  v5 = objc_msgSend(v3, "na_any:", &__block_literal_global_120815);
  if (v4)
    v6 = v5;
  else
    v6 = 0;
  v7 = (void *)MEMORY[0x227676638](v5);
  v8 = self;
  HMFGetOSLogHandle();
  v9 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
  {
    HMFGetLogIdentifier();
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    HMFBooleanToString();
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v13 = 138543618;
    v14 = v10;
    v15 = 2112;
    v16 = v11;
    _os_log_impl(&dword_2218F0000, v9, OS_LOG_TYPE_DEBUG, "%{public}@Setting network access required (power assertion) to %@", (uint8_t *)&v13, 0x16u);

  }
  objc_autoreleasePoolPop(v7);
  -[HMDHomeManager powerManager](v8, "powerManager");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v12, "setNetworkAccessRequired:", v6);

}

uint64_t __55__HMDHomeManager_PowerManagement__updatePowerAssertion__block_invoke(uint64_t a1, void *a2)
{
  void *v2;
  void *v3;
  uint64_t v4;

  objc_msgSend(a2, "residentDeviceManager");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "residentDevices");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "na_any:", &__block_literal_global_2_120818);

  return v4;
}

uint64_t __55__HMDHomeManager_PowerManagement__updatePowerAssertion__block_invoke_2(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "isCurrentDevice");
}

- (void)_maybeMessageOwnersOfFrameworkSwitch
{
  void *v3;
  HMDHomeManager *v4;
  NSObject *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  id v10;
  void *v11;
  void *v12;
  void *v13;
  double v14;
  double v15;
  void *v16;
  HMDHomeManager *v17;
  NSObject *v18;
  void *v19;
  void *v20;
  dispatch_time_t v21;
  NSObject *v22;
  void *v23;
  HMDHomeManager *v24;
  NSObject *v25;
  void *v26;
  _QWORD v27[4];
  id v28;
  HMDHomeManager *v29;
  uint8_t buf[4];
  void *v31;
  __int16 v32;
  void *v33;
  uint64_t v34;

  v34 = *MEMORY[0x24BDAC8D0];
  if (-[HMDHomeManager isOwnerPingPending](self, "isOwnerPingPending"))
  {
    v3 = (void *)MEMORY[0x227676638]();
    v4 = self;
    HMFGetOSLogHandle();
    v5 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v31 = v6;
      _os_log_impl(&dword_2218F0000, v5, OS_LOG_TYPE_INFO, "%{public}@Shared user account upgrade ping is already scheduled - not scheduling again.", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v3);
  }
  else
  {
    -[HMDHomeManager userDefaults](self, "userDefaults");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "objectForKey:", CFSTR("HMDHomeManagerHomesAwaitingHH2AutoAcceptKey"));
    v8 = (void *)objc_claimAutoreleasedReturnValue();

    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
      v9 = v8;
    else
      v9 = 0;
    v10 = v9;

    if (v10)
    {
      -[HMDHomeManager setIsOwnerPingPending:](self, "setIsOwnerPingPending:", 1);
      objc_msgSend(MEMORY[0x24BE3F248], "sharedPreferences");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v11, "preferenceForKey:", CFSTR("NotifyOwnersOfFrameworkSwitchDelayInterval"));
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v12, "numberValue");
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v13, "doubleValue");
      v15 = v14;

      v16 = (void *)MEMORY[0x227676638]();
      v17 = self;
      HMFGetOSLogHandle();
      v18 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v19 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(MEMORY[0x24BDD16E0], "numberWithDouble:", v15);
        v20 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        v31 = v19;
        v32 = 2112;
        v33 = v20;
        _os_log_impl(&dword_2218F0000, v18, OS_LOG_TYPE_INFO, "%{public}@Will ping owners in %@ seconds to indicate current account has migrated to HH2", buf, 0x16u);

      }
      objc_autoreleasePoolPop(v16);
      v21 = dispatch_time(0xFFFFFFFFFFFFFFFELL, (uint64_t)(v15 * 1000000000.0));
      -[HMDHomeManager workQueue](v17, "workQueue");
      v22 = objc_claimAutoreleasedReturnValue();
      v27[0] = MEMORY[0x24BDAC760];
      v27[1] = 3221225472;
      v27[2] = __66__HMDHomeManager_SharedUser___maybeMessageOwnersOfFrameworkSwitch__block_invoke;
      v27[3] = &unk_24E79C268;
      v28 = v10;
      v29 = v17;
      dispatch_after(v21, v22, v27);

    }
    else
    {
      v23 = (void *)MEMORY[0x227676638]();
      v24 = self;
      HMFGetOSLogHandle();
      v25 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v25, OS_LOG_TYPE_DEBUG))
      {
        HMFGetLogIdentifier();
        v26 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543362;
        v31 = v26;
        _os_log_impl(&dword_2218F0000, v25, OS_LOG_TYPE_DEBUG, "%{public}@No owners to ping about upgrade to HH2.", buf, 0xCu);

      }
      objc_autoreleasePoolPop(v23);
    }

  }
}

- (void)_sendOwnerPingMessageToAccountHandle:(id)a3
{
  id v4;
  HMDRemoteAccountMessageDestination *v5;
  void *v6;
  HMDRemoteAccountMessageDestination *v7;
  void *v8;
  void *v9;
  HMDRemoteAccountMessageDestination *v10;
  _QWORD v11[5];
  HMDRemoteAccountMessageDestination *v12;

  v4 = a3;
  v5 = [HMDRemoteAccountMessageDestination alloc];
  -[HMDHomeManager uuid](self, "uuid");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = -[HMDRemoteAccountMessageDestination initWithTarget:handle:multicast:](v5, "initWithTarget:handle:multicast:", v6, v4, 1);

  -[HMDRemoteAccountMessageDestination setRestrictToResidentCapable:](v7, "setRestrictToResidentCapable:", 1);
  +[HMDRemoteMessage secureMessageWithName:destination:messagePayload:](HMDRemoteMessage, "secureMessageWithName:destination:messagePayload:", CFSTR("HMDHomeManagerSharedUserMigratedToHH2MessageKey"), v7, MEMORY[0x24BDBD1B8]);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHomeManager messageDispatcher](self, "messageDispatcher");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v11[0] = MEMORY[0x24BDAC760];
  v11[1] = 3221225472;
  v11[2] = __67__HMDHomeManager_SharedUser___sendOwnerPingMessageToAccountHandle___block_invoke;
  v11[3] = &unk_24E79BCC8;
  v11[4] = self;
  v12 = v7;
  v10 = v7;
  objc_msgSend(v9, "sendMessage:completionHandler:", v8, v11);

}

- (void)_pruneExpiredHomesAwaitingAutoAccept
{
  void *v3;
  void *v4;
  void *v5;
  id v6;
  void *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t i;
  uint64_t v13;
  void *v14;
  void *v15;
  id v16;
  void *v17;
  HMDHomeManager *v18;
  NSObject *v19;
  void *v20;
  NSObject *v21;
  const char *v22;
  HMDHomeManager *v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  HMDHomeManager *v27;
  NSObject *v28;
  _BOOL4 v29;
  void *v30;
  void *v31;
  HMDHomeManager *v32;
  NSObject *v33;
  void *v34;
  void *v35;
  HMDHomeManager *v36;
  NSObject *v37;
  void *v38;
  void *v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  id v44;
  void *v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  uint8_t buf[4];
  void *v51;
  __int16 v52;
  uint64_t v53;
  _BYTE v54[128];
  uint64_t v55;

  v55 = *MEMORY[0x24BDAC8D0];
  -[HMDHomeManager userDefaults](self, "userDefaults");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "objectForKey:", CFSTR("HMDHomeManagerHomesAwaitingHH2AutoAcceptKey"));
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v5 = v4;
  else
    v5 = 0;
  v6 = v5;

  if (!v6)
  {
    v31 = (void *)MEMORY[0x227676638]();
    v32 = self;
    HMFGetOSLogHandle();
    v33 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v33, OS_LOG_TYPE_DEBUG))
    {
      HMFGetLogIdentifier();
      v34 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v51 = v34;
      _os_log_impl(&dword_2218F0000, v33, OS_LOG_TYPE_DEBUG, "%{public}@No homes awaiting hh2 auto accept.", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v31);
    goto LABEL_39;
  }
  v7 = (void *)objc_msgSend(v6, "mutableCopy");
  v46 = 0u;
  v47 = 0u;
  v48 = 0u;
  v49 = 0u;
  v44 = v6;
  v8 = v6;
  v9 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v46, v54, 16);
  if (!v9)
    goto LABEL_23;
  v10 = v9;
  v11 = *(_QWORD *)v47;
  v45 = v7;
  do
  {
    for (i = 0; i != v10; ++i)
    {
      if (*(_QWORD *)v47 != v11)
        objc_enumerationMutation(v8);
      v13 = *(_QWORD *)(*((_QWORD *)&v46 + 1) + 8 * i);
      objc_msgSend(v8, "objectForKeyedSubscript:", v13);
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0)
        v15 = v14;
      else
        v15 = 0;
      v16 = v15;

      if (v16)
      {
        if (!-[HMDHomeManager _isMetadataExpiredForHomeAwaitingAutoAccept:](self, "_isMetadataExpiredForHomeAwaitingAutoAccept:", v16))goto LABEL_21;
        v17 = (void *)MEMORY[0x227676638]();
        v18 = self;
        HMFGetOSLogHandle();
        v19 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
        {
          HMFGetLogIdentifier();
          v20 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543618;
          v51 = v20;
          v52 = 2112;
          v53 = v13;
          v21 = v19;
          v22 = "%{public}@Removing %@ from list of homes to ping about account upgrade.";
LABEL_19:
          _os_log_impl(&dword_2218F0000, v21, OS_LOG_TYPE_INFO, v22, buf, 0x16u);

        }
      }
      else
      {
        v17 = (void *)MEMORY[0x227676638]();
        v23 = self;
        HMFGetOSLogHandle();
        v19 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
        {
          HMFGetLogIdentifier();
          v20 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543618;
          v51 = v20;
          v52 = 2112;
          v53 = v13;
          v21 = v19;
          v22 = "%{public}@Failed to parse stashed metadata for %@, removing it.";
          goto LABEL_19;
        }
      }

      objc_autoreleasePoolPop(v17);
      v7 = v45;
      objc_msgSend(v45, "removeObjectForKey:", v13);
LABEL_21:

    }
    v10 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v46, v54, 16);
  }
  while (v10);
LABEL_23:

  if (!objc_msgSend(v7, "count"))
  {
    v35 = (void *)MEMORY[0x227676638]();
    v36 = self;
    HMFGetOSLogHandle();
    v37 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v37, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v38 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v51 = v38;
      _os_log_impl(&dword_2218F0000, v37, OS_LOG_TYPE_INFO, "%{public}@All stashed metadata for homes awaiting auto accept is expired - purging.", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v35);
    -[HMDHomeManager userDefaults](v36, "userDefaults");
    v39 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v39, "removeObjectForKey:", CFSTR("HMDHomeManagerHomesAwaitingHH2AutoAcceptKey"));
    goto LABEL_37;
  }
  v24 = objc_msgSend(v7, "count");
  v25 = objc_msgSend(v8, "count");
  v26 = (void *)MEMORY[0x227676638]();
  v27 = self;
  HMFGetOSLogHandle();
  v28 = objc_claimAutoreleasedReturnValue();
  v29 = os_log_type_enabled(v28, OS_LOG_TYPE_INFO);
  if (v24 != v25)
  {
    if (v29)
    {
      HMFGetLogIdentifier();
      v40 = (void *)objc_claimAutoreleasedReturnValue();
      v41 = objc_msgSend(v8, "count");
      v42 = objc_msgSend(v7, "count");
      *(_DWORD *)buf = 138543618;
      v51 = v40;
      v52 = 2048;
      v53 = v41 - v42;
      _os_log_impl(&dword_2218F0000, v28, OS_LOG_TYPE_INFO, "%{public}@Purging %lu expired metadata records for homes awaiting auto accept.", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v26);
    -[HMDHomeManager userDefaults](v27, "userDefaults");
    v39 = (void *)objc_claimAutoreleasedReturnValue();
    v43 = (void *)objc_msgSend(v7, "copy");
    objc_msgSend(v39, "setObject:forKey:", v43, CFSTR("HMDHomeManagerHomesAwaitingHH2AutoAcceptKey"));

LABEL_37:
    goto LABEL_38;
  }
  if (v29)
  {
    HMFGetLogIdentifier();
    v30 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543362;
    v51 = v30;
    _os_log_impl(&dword_2218F0000, v28, OS_LOG_TYPE_INFO, "%{public}@No homes pending auto accept were expired, doing nothing.", buf, 0xCu);

  }
  objc_autoreleasePoolPop(v26);
LABEL_38:

  v6 = v44;
LABEL_39:

}

- (id)_accountHandleFromMetadataForHomeAwaitingAutoAccept:(id)a3
{
  void *v3;
  void *v4;

  objc_msgSend(a3, "hmf_stringForKey:", CFSTR("HMDHomeManagerAutoAcceptOwnerHandleKey"));
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  if (v3)
  {
    +[HMDAccountHandle accountHandleForDestination:](HMDAccountHandle, "accountHandleForDestination:", v3);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v4 = 0;
  }

  return v4;
}

- (BOOL)_isMetadataExpiredForHomeAwaitingAutoAccept:(id)a3
{
  void *v3;
  void *v4;
  double v5;
  BOOL v6;

  objc_msgSend(a3, "hmf_dateForKey:", CFSTR("HMDHomeManagerAutoAcceptMigrationDateKey"));
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = v3;
  if (v3)
  {
    objc_msgSend(v3, "timeIntervalSinceNow");
    v6 = fabs(v5) > 5184000.0;
  }
  else
  {
    v6 = 1;
  }

  return v6;
}

- (void)removeHomeFromAwaitingAutoAcceptHomes:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  id v8;
  void *v9;
  HMDHomeManager *v10;
  NSObject *v11;
  NSObject *v12;
  void *v13;
  void *v14;
  void *v15;
  uint64_t v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  int v21;
  void *v22;
  __int16 v23;
  id v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v4 = a3;
  -[HMDHomeManager userDefaults](self, "userDefaults");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "objectForKey:", CFSTR("HMDHomeManagerHomesAwaitingHH2AutoAcceptKey"));
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v7 = v6;
  else
    v7 = 0;
  v8 = v7;

  v9 = (void *)MEMORY[0x227676638]();
  v10 = self;
  HMFGetOSLogHandle();
  v11 = objc_claimAutoreleasedReturnValue();
  v12 = v11;
  if (v8)
  {
    if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      v21 = 138543618;
      v22 = v13;
      v23 = 2112;
      v24 = v4;
      _os_log_impl(&dword_2218F0000, v12, OS_LOG_TYPE_INFO, "%{public}@Removing %@ from list of homes to ping about account upgrade.", (uint8_t *)&v21, 0x16u);

    }
    objc_autoreleasePoolPop(v9);
    v14 = (void *)objc_msgSend(v8, "mutableCopy");
    objc_msgSend(v4, "UUIDString");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v14, "removeObjectForKey:", v15);

    v16 = objc_msgSend(v14, "count");
    -[HMDHomeManager userDefaults](v10, "userDefaults");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    v18 = v17;
    if (v16)
    {
      v19 = (void *)objc_msgSend(v14, "copy");
      objc_msgSend(v18, "setObject:forKey:", v19, CFSTR("HMDHomeManagerHomesAwaitingHH2AutoAcceptKey"));

    }
    else
    {
      objc_msgSend(v17, "removeObjectForKey:", CFSTR("HMDHomeManagerHomesAwaitingHH2AutoAcceptKey"));
    }

  }
  else
  {
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
    {
      HMFGetLogIdentifier();
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      v21 = 138543362;
      v22 = v20;
      _os_log_impl(&dword_2218F0000, v12, OS_LOG_TYPE_DEBUG, "%{public}@No home owners to ping about upgrade to HH2, so no need to delete anything.", (uint8_t *)&v21, 0xCu);

    }
    objc_autoreleasePoolPop(v9);
  }

}

- (BOOL)_isAutoAcceptMetadataPresentForHome:(id)a3 owner:(id)a4
{
  id v6;
  id v7;
  void *v8;
  void *v9;
  void *v10;
  id v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  HMDHomeManager *v16;
  NSObject *v17;
  void *v18;
  void *v19;
  char v20;
  void *v21;
  HMDHomeManager *v22;
  NSObject *v23;
  void *v24;
  int v26;
  void *v27;
  __int16 v28;
  id v29;
  __int16 v30;
  id v31;
  __int16 v32;
  void *v33;
  uint64_t v34;

  v34 = *MEMORY[0x24BDAC8D0];
  v6 = a3;
  v7 = a4;
  -[HMDHomeManager userDefaults](self, "userDefaults");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "objectForKey:", CFSTR("HMDHomeManagerHomesAwaitingHH2AutoAcceptKey"));
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v10 = v9;
  else
    v10 = 0;
  v11 = v10;

  objc_msgSend(v6, "UUIDString");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "hmf_dictionaryForKey:", v12);
  v13 = (void *)objc_claimAutoreleasedReturnValue();

  if (v13)
  {
    objc_msgSend(v13, "hmf_stringForKey:", CFSTR("HMDHomeManagerAutoAcceptOwnerMergeIDKey"));
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    v15 = (void *)MEMORY[0x227676638]();
    v16 = self;
    HMFGetOSLogHandle();
    v17 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      v26 = 138544130;
      v27 = v18;
      v28 = 2112;
      v29 = v14;
      v30 = 2112;
      v31 = v7;
      v32 = 2112;
      v33 = v13;
      _os_log_impl(&dword_2218F0000, v17, OS_LOG_TYPE_INFO, "%{public}@Looking for home metadata for merge id %@ in owner %@: %@", (uint8_t *)&v26, 0x2Au);

    }
    objc_autoreleasePoolPop(v15);
    objc_msgSend(v7, "senderCorrelationIdentifier");
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    v20 = objc_msgSend(v14, "isEqual:", v19);

  }
  else
  {
    v21 = (void *)MEMORY[0x227676638]();
    v22 = self;
    HMFGetOSLogHandle();
    v23 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v23, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v24 = (void *)objc_claimAutoreleasedReturnValue();
      v26 = 138543618;
      v27 = v24;
      v28 = 2112;
      v29 = v6;
      _os_log_impl(&dword_2218F0000, v23, OS_LOG_TYPE_INFO, "%{public}@No stashed home metadata so can't auto accept for home %@", (uint8_t *)&v26, 0x16u);

    }
    objc_autoreleasePoolPop(v21);
    v20 = 0;
  }

  return v20;
}

- (void)_autoAcceptInviteIfReinvitation:(id)a3
{
  id v4;
  void *v5;
  _QWORD v6[4];
  id v7;
  id v8;
  id location;

  v4 = a3;
  if (!isWatch())
  {
    objc_initWeak(&location, self);
    objc_msgSend(v4, "homeUUID");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6[0] = MEMORY[0x24BDAC760];
    v6[1] = 3221225472;
    v6[2] = __62__HMDHomeManager_SharedUser___autoAcceptInviteIfReinvitation___block_invoke;
    v6[3] = &unk_24E788AE8;
    objc_copyWeak(&v8, &location);
    v7 = v4;
    -[HMDHomeManager _queryLegacyHomeAndAcceptedZoneExists:completion:](self, "_queryLegacyHomeAndAcceptedZoneExists:completion:", v5, v6);

    objc_destroyWeak(&v8);
    objc_destroyWeak(&location);
  }

}

- (void)removeHomeFromSharedHomesNotYetMigrated:(id)a3
{
  id v4;
  NSObject *v5;
  id v6;
  _QWORD v7[5];
  id v8;

  v4 = a3;
  -[HMDHomeManager workQueue](self, "workQueue");
  v5 = objc_claimAutoreleasedReturnValue();
  v7[0] = MEMORY[0x24BDAC760];
  v7[1] = 3221225472;
  v7[2] = __70__HMDHomeManager_SharedUser__removeHomeFromSharedHomesNotYetMigrated___block_invoke;
  v7[3] = &unk_24E79C268;
  v7[4] = self;
  v8 = v4;
  v6 = v4;
  dispatch_async(v5, v7);

}

- (void)_pruneExpiredHomesNotYetMigrated
{
  void *v3;
  void *v4;
  void *v5;
  id v6;
  void *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t i;
  uint64_t v13;
  void *v14;
  void *v15;
  id v16;
  void *v17;
  HMDHomeManager *v18;
  NSObject *v19;
  void *v20;
  NSObject *v21;
  const char *v22;
  HMDHomeManager *v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  HMDHomeManager *v27;
  NSObject *v28;
  _BOOL4 v29;
  void *v30;
  void *v31;
  HMDHomeManager *v32;
  NSObject *v33;
  void *v34;
  void *v35;
  HMDHomeManager *v36;
  NSObject *v37;
  void *v38;
  void *v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  id v44;
  void *v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  uint8_t buf[4];
  void *v51;
  __int16 v52;
  uint64_t v53;
  _BYTE v54[128];
  uint64_t v55;

  v55 = *MEMORY[0x24BDAC8D0];
  -[HMDHomeManager userDefaults](self, "userDefaults");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "objectForKey:", CFSTR("HMDHomeManagerSharedHomesNotYetMigratedKey"));
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v5 = v4;
  else
    v5 = 0;
  v6 = v5;

  if (!v6)
  {
    v31 = (void *)MEMORY[0x227676638]();
    v32 = self;
    HMFGetOSLogHandle();
    v33 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v33, OS_LOG_TYPE_DEBUG))
    {
      HMFGetLogIdentifier();
      v34 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v51 = v34;
      _os_log_impl(&dword_2218F0000, v33, OS_LOG_TYPE_DEBUG, "%{public}@List of not yet migrated homes is empty.", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v31);
    goto LABEL_39;
  }
  v7 = (void *)objc_msgSend(v6, "mutableCopy");
  v46 = 0u;
  v47 = 0u;
  v48 = 0u;
  v49 = 0u;
  v44 = v6;
  v8 = v6;
  v9 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v46, v54, 16);
  if (!v9)
    goto LABEL_23;
  v10 = v9;
  v11 = *(_QWORD *)v47;
  v45 = v7;
  do
  {
    for (i = 0; i != v10; ++i)
    {
      if (*(_QWORD *)v47 != v11)
        objc_enumerationMutation(v8);
      v13 = *(_QWORD *)(*((_QWORD *)&v46 + 1) + 8 * i);
      objc_msgSend(v8, "objectForKeyedSubscript:", v13);
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0)
        v15 = v14;
      else
        v15 = 0;
      v16 = v15;

      if (v16)
      {
        if (!-[HMDHomeManager _isMetadataExpiredForHomeAwaitingAutoAccept:](self, "_isMetadataExpiredForHomeAwaitingAutoAccept:", v16))goto LABEL_21;
        v17 = (void *)MEMORY[0x227676638]();
        v18 = self;
        HMFGetOSLogHandle();
        v19 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
        {
          HMFGetLogIdentifier();
          v20 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543618;
          v51 = v20;
          v52 = 2112;
          v53 = v13;
          v21 = v19;
          v22 = "%{public}@Removing %@ from list of not yet migrated homes.";
LABEL_19:
          _os_log_impl(&dword_2218F0000, v21, OS_LOG_TYPE_INFO, v22, buf, 0x16u);

        }
      }
      else
      {
        v17 = (void *)MEMORY[0x227676638]();
        v23 = self;
        HMFGetOSLogHandle();
        v19 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
        {
          HMFGetLogIdentifier();
          v20 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543618;
          v51 = v20;
          v52 = 2112;
          v53 = v13;
          v21 = v19;
          v22 = "%{public}@Failed to parse stashed metadata for not yet migrated home %@, removing it.";
          goto LABEL_19;
        }
      }

      objc_autoreleasePoolPop(v17);
      v7 = v45;
      objc_msgSend(v45, "removeObjectForKey:", v13);
LABEL_21:

    }
    v10 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v46, v54, 16);
  }
  while (v10);
LABEL_23:

  if (!objc_msgSend(v7, "count"))
  {
    v35 = (void *)MEMORY[0x227676638]();
    v36 = self;
    HMFGetOSLogHandle();
    v37 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v37, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v38 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v51 = v38;
      _os_log_impl(&dword_2218F0000, v37, OS_LOG_TYPE_INFO, "%{public}@All stashed metadata for homes not yet migrated is expired - purging.", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v35);
    -[HMDHomeManager userDefaults](v36, "userDefaults");
    v39 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v39, "removeObjectForKey:", CFSTR("HMDHomeManagerSharedHomesNotYetMigratedKey"));
    goto LABEL_37;
  }
  v24 = objc_msgSend(v7, "count");
  v25 = objc_msgSend(v8, "count");
  v26 = (void *)MEMORY[0x227676638]();
  v27 = self;
  HMFGetOSLogHandle();
  v28 = objc_claimAutoreleasedReturnValue();
  v29 = os_log_type_enabled(v28, OS_LOG_TYPE_INFO);
  if (v24 != v25)
  {
    if (v29)
    {
      HMFGetLogIdentifier();
      v40 = (void *)objc_claimAutoreleasedReturnValue();
      v41 = objc_msgSend(v8, "count");
      v42 = objc_msgSend(v7, "count");
      *(_DWORD *)buf = 138543618;
      v51 = v40;
      v52 = 2048;
      v53 = v41 - v42;
      _os_log_impl(&dword_2218F0000, v28, OS_LOG_TYPE_INFO, "%{public}@Purging %lu expired metadata records for homes not yet migrated.", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v26);
    -[HMDHomeManager userDefaults](v27, "userDefaults");
    v39 = (void *)objc_claimAutoreleasedReturnValue();
    v43 = (void *)objc_msgSend(v7, "copy");
    objc_msgSend(v39, "setObject:forKey:", v43, CFSTR("HMDHomeManagerSharedHomesNotYetMigratedKey"));

LABEL_37:
    goto LABEL_38;
  }
  if (v29)
  {
    HMFGetLogIdentifier();
    v30 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543362;
    v51 = v30;
    _os_log_impl(&dword_2218F0000, v28, OS_LOG_TYPE_INFO, "%{public}@No homes pending migration were expired, doing nothing.", buf, 0xCu);

  }
  objc_autoreleasePoolPop(v26);
LABEL_38:

  v6 = v44;
LABEL_39:

}

void __70__HMDHomeManager_SharedUser__removeHomeFromSharedHomesNotYetMigrated___block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  id v5;
  void *v6;
  id v7;
  NSObject *v8;
  NSObject *v9;
  void *v10;
  uint64_t v11;
  void *v12;
  void *v13;
  void *v14;
  uint64_t v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  int v20;
  void *v21;
  __int16 v22;
  uint64_t v23;
  __int16 v24;
  void *v25;
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  objc_msgSend(*(id *)(a1 + 32), "userDefaults");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "objectForKey:", CFSTR("HMDHomeManagerSharedHomesNotYetMigratedKey"));
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v4 = v3;
  else
    v4 = 0;
  v5 = v4;

  v6 = (void *)MEMORY[0x227676638]();
  v7 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v8 = objc_claimAutoreleasedReturnValue();
  v9 = v8;
  if (v5)
  {
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      v11 = *(_QWORD *)(a1 + 40);
      objc_msgSend(v5, "allKeys");
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      v20 = 138543874;
      v21 = v10;
      v22 = 2112;
      v23 = v11;
      v24 = 2112;
      v25 = v12;
      _os_log_impl(&dword_2218F0000, v9, OS_LOG_TYPE_INFO, "%{public}@Removing %@ from list of homes not yet migrated: %@", (uint8_t *)&v20, 0x20u);

    }
    objc_autoreleasePoolPop(v6);
    v13 = (void *)objc_msgSend(v5, "mutableCopy");
    objc_msgSend(*(id *)(a1 + 40), "UUIDString");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "removeObjectForKey:", v14);

    v15 = objc_msgSend(v13, "count");
    objc_msgSend(*(id *)(a1 + 32), "userDefaults");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    v17 = v16;
    if (v15)
    {
      v18 = (void *)objc_msgSend(v13, "copy");
      objc_msgSend(v17, "setObject:forKey:", v18, CFSTR("HMDHomeManagerSharedHomesNotYetMigratedKey"));

    }
    else
    {
      objc_msgSend(v16, "removeObjectForKey:", CFSTR("HMDHomeManagerSharedHomesNotYetMigratedKey"));
    }

  }
  else
  {
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
    {
      HMFGetLogIdentifier();
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      v20 = 138543362;
      v21 = v19;
      _os_log_impl(&dword_2218F0000, v9, OS_LOG_TYPE_DEBUG, "%{public}@No home to remove from list of homes not yet migrated.", (uint8_t *)&v20, 0xCu);

    }
    objc_autoreleasePoolPop(v6);
  }

}

void __62__HMDHomeManager_SharedUser___autoAcceptInviteIfReinvitation___block_invoke(uint64_t a1, int a2, int a3)
{
  id WeakRetained;
  void *v7;
  void *v8;
  int v9;
  void *v10;
  id v11;
  NSObject *v12;
  _BOOL4 v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  int v22;
  void *v23;
  __int16 v24;
  void *v25;
  __int16 v26;
  int v27;
  __int16 v28;
  int v29;
  __int16 v30;
  int v31;
  uint64_t v32;

  v32 = *MEMORY[0x24BDAC8D0];
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    objc_msgSend(*(id *)(a1 + 32), "homeUUID");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 32), "inviterAccount");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = objc_msgSend(WeakRetained, "_isAutoAcceptMetadataPresentForHome:owner:", v7, v8);

    v10 = (void *)MEMORY[0x227676638]();
    v11 = WeakRetained;
    HMFGetOSLogHandle();
    v12 = objc_claimAutoreleasedReturnValue();
    v13 = os_log_type_enabled(v12, OS_LOG_TYPE_INFO);
    if (a2 && (a3 & 1) == 0 && v9)
    {
      if (v13)
      {
        HMFGetLogIdentifier();
        v14 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(*(id *)(a1 + 32), "homeUUID");
        v15 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v15, "UUIDString");
        v16 = (void *)objc_claimAutoreleasedReturnValue();
        v22 = 138543618;
        v23 = v14;
        v24 = 2112;
        v25 = v16;
        _os_log_impl(&dword_2218F0000, v12, OS_LOG_TYPE_INFO, "%{public}@Auto accept because legacy home zone exists for: %@", (uint8_t *)&v22, 0x16u);

      }
      objc_autoreleasePoolPop(v10);
      objc_msgSend(*(id *)(a1 + 32), "identifier");
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(*(id *)(a1 + 32), "homeUUID");
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x24BDD7A90], "authWithValue:", 1);
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v11, "processRequestToUpdateHomeInvitation:invitationState:homeUUID:authStatus:messageName:message:", v17, 3, v18, v19, CFSTR("kUpdateInvitationStateRequestKey"), 0);

    }
    else
    {
      if (v13)
      {
        HMFGetLogIdentifier();
        v20 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(*(id *)(a1 + 32), "homeUUID");
        v21 = (void *)objc_claimAutoreleasedReturnValue();
        v22 = 138544386;
        v23 = v20;
        v24 = 2112;
        v25 = v21;
        v26 = 1024;
        v27 = a2;
        v28 = 1024;
        v29 = a3;
        v30 = 1024;
        v31 = v9;
        _os_log_impl(&dword_2218F0000, v12, OS_LOG_TYPE_INFO, "%{public}@Not auto accepting invitation for home %@ (home zone exists: %d auto accept zone exists: %d local marker present: %d", (uint8_t *)&v22, 0x28u);

      }
      objc_autoreleasePoolPop(v10);
    }
  }

}

void __67__HMDHomeManager_SharedUser___sendOwnerPingMessageToAccountHandle___block_invoke(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  uint64_t v5;
  void *v6;
  id v7;
  _QWORD block[4];
  id v9;
  uint64_t v10;
  id v11;

  v3 = a2;
  objc_msgSend(*(id *)(a1 + 32), "workQueue");
  v4 = objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x24BDAC760];
  block[1] = 3221225472;
  block[2] = __67__HMDHomeManager_SharedUser___sendOwnerPingMessageToAccountHandle___block_invoke_2;
  block[3] = &unk_24E79BBD0;
  v5 = *(_QWORD *)(a1 + 32);
  v6 = *(void **)(a1 + 40);
  v9 = v3;
  v10 = v5;
  v11 = v6;
  v7 = v3;
  dispatch_async(v4, block);

}

void __67__HMDHomeManager_SharedUser___sendOwnerPingMessageToAccountHandle___block_invoke_2(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  id v4;
  NSObject *v5;
  NSObject *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  NSObject *v11;
  os_log_type_t v12;
  uint32_t v13;
  uint64_t v14;
  int v15;
  void *v16;
  __int16 v17;
  uint64_t v18;
  __int16 v19;
  uint64_t v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(a1 + 32);
  v3 = (void *)MEMORY[0x227676638]();
  v4 = *(id *)(a1 + 40);
  HMFGetOSLogHandle();
  v5 = objc_claimAutoreleasedReturnValue();
  v6 = v5;
  if (v2)
  {
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      v8 = *(_QWORD *)(a1 + 48);
      v9 = *(_QWORD *)(a1 + 32);
      v15 = 138543874;
      v16 = v7;
      v17 = 2112;
      v18 = v8;
      v19 = 2112;
      v20 = v9;
      v10 = "%{public}@Failed to send account upgrade message to owner account %@ with error %@";
      v11 = v6;
      v12 = OS_LOG_TYPE_ERROR;
      v13 = 32;
LABEL_6:
      _os_log_impl(&dword_2218F0000, v11, v12, v10, (uint8_t *)&v15, v13);

    }
  }
  else if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v14 = *(_QWORD *)(a1 + 48);
    v15 = 138543618;
    v16 = v7;
    v17 = 2112;
    v18 = v14;
    v10 = "%{public}@Sent account upgrade message to owner account %@";
    v11 = v6;
    v12 = OS_LOG_TYPE_INFO;
    v13 = 22;
    goto LABEL_6;
  }

  objc_autoreleasePoolPop(v3);
}

uint64_t __66__HMDHomeManager_SharedUser___maybeMessageOwnersOfFrameworkSwitch__block_invoke(uint64_t a1)
{
  uint64_t v2;
  __int128 v3;
  uint64_t v4;
  uint64_t i;
  void *v6;
  void *v7;
  void *v8;
  id v9;
  void *v10;
  int v11;
  void *v12;
  id v13;
  NSObject *v14;
  _BOOL4 v15;
  void *v16;
  void *v17;
  uint64_t v18;
  id v19;
  NSObject *v20;
  void *v21;
  void *v22;
  __int128 v24;
  id obj;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint8_t buf[4];
  void *v32;
  __int16 v33;
  void *v34;
  _BYTE v35[128];
  uint64_t v36;

  v36 = *MEMORY[0x24BDAC8D0];
  v27 = 0u;
  v28 = 0u;
  v29 = 0u;
  v30 = 0u;
  obj = *(id *)(a1 + 32);
  v2 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v27, v35, 16);
  if (v2)
  {
    v4 = v2;
    v26 = *(_QWORD *)v28;
    *(_QWORD *)&v3 = 138543618;
    v24 = v3;
    do
    {
      for (i = 0; i != v4; ++i)
      {
        if (*(_QWORD *)v28 != v26)
          objc_enumerationMutation(obj);
        v6 = *(void **)(*((_QWORD *)&v27 + 1) + 8 * i);
        objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", v6, v24);
        v7 = (void *)objc_claimAutoreleasedReturnValue();
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0)
          v8 = v7;
        else
          v8 = 0;
        v9 = v8;

        objc_msgSend(*(id *)(a1 + 40), "_accountHandleFromMetadataForHomeAwaitingAutoAccept:", v9);
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        if (!v10)
        {
          v18 = MEMORY[0x227676638]();
          v19 = *(id *)(a1 + 40);
          HMFGetOSLogHandle();
          v20 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
          {
            HMFGetLogIdentifier();
            v21 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = v24;
            v32 = v21;
            v33 = 2112;
            v34 = v6;
            _os_log_impl(&dword_2218F0000, v20, OS_LOG_TYPE_ERROR, "%{public}@Invalid owner destination specified for home %@ awaiting auto accept", buf, 0x16u);

          }
          v17 = (void *)v18;
          goto LABEL_17;
        }
        v11 = objc_msgSend(*(id *)(a1 + 40), "_isMetadataExpiredForHomeAwaitingAutoAccept:", v9);
        v12 = (void *)MEMORY[0x227676638]();
        v13 = *(id *)(a1 + 40);
        HMFGetOSLogHandle();
        v14 = objc_claimAutoreleasedReturnValue();
        v15 = os_log_type_enabled(v14, OS_LOG_TYPE_INFO);
        if (v11)
        {
          if (v15)
          {
            HMFGetLogIdentifier();
            v16 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = v24;
            v32 = v16;
            v33 = 2112;
            v34 = v6;
            _os_log_impl(&dword_2218F0000, v14, OS_LOG_TYPE_INFO, "%{public}@Metadata is expired for home %@ awaiting auto accept.", buf, 0x16u);

          }
          v17 = v12;
LABEL_17:
          objc_autoreleasePoolPop(v17);
          goto LABEL_21;
        }
        if (v15)
        {
          HMFGetLogIdentifier();
          v22 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = v24;
          v32 = v22;
          v33 = 2112;
          v34 = v10;
          _os_log_impl(&dword_2218F0000, v14, OS_LOG_TYPE_INFO, "%{public}@Pinging owner %@ that the current account has migrated to HH2", buf, 0x16u);

        }
        objc_autoreleasePoolPop(v12);
        objc_msgSend(*(id *)(a1 + 40), "_sendOwnerPingMessageToAccountHandle:", v10);
LABEL_21:

      }
      v4 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v27, v35, 16);
    }
    while (v4);
  }

  return objc_msgSend(*(id *)(a1 + 40), "setIsOwnerPingPending:", 0);
}

- (void)initHomeManagerFrameworkNotify
{
  void *v3;
  void *v4;
  uint64_t v5;
  id v6;
  void *v7;
  void *v8;
  void *v9;
  id v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  id v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  id v21;
  _QWORD v22[4];
  id v23;
  _QWORD v24[4];
  id v25;
  _QWORD v26[4];
  id v27;
  _QWORD v28[4];
  id v29;
  id location;
  _QWORD v31[4];

  v31[2] = *MEMORY[0x24BDAC8D0];
  -[HMDHomeManager setStartupHasCompleted:](self, "setStartupHasCompleted:", 0);
  -[HMDHomeManager setDeviceAccountHasSettled:](self, "setDeviceAccountHasSettled:", 0);
  objc_initWeak(&location, self);
  -[HMDHomeManager startupCompleted](self, "startupCompleted");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHomeManager workContext](self, "workContext");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = MEMORY[0x24BDAC760];
  v28[0] = MEMORY[0x24BDAC760];
  v28[1] = 3221225472;
  v28[2] = __65__HMDHomeManager_FrameworkNotify__initHomeManagerFrameworkNotify__block_invoke;
  v28[3] = &unk_24E796128;
  objc_copyWeak(&v29, &location);
  v6 = (id)objc_msgSend(v3, "inContext:then:", v4, v28);

  -[HMDHomeManager appleAccountManager](self, "appleAccountManager");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "deviceAccountSettled");
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  -[HMDHomeManager workContext](self, "workContext");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v26[0] = v5;
  v26[1] = 3221225472;
  v26[2] = __65__HMDHomeManager_FrameworkNotify__initHomeManagerFrameworkNotify__block_invoke_2;
  v26[3] = &unk_24E796128;
  objc_copyWeak(&v27, &location);
  v10 = (id)objc_msgSend(v8, "inContext:then:", v9, v26);

  v11 = (void *)MEMORY[0x24BE3F180];
  -[HMDHomeManager startupCompleted](self, "startupCompleted");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  v31[0] = v12;
  v31[1] = v8;
  objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", v31, 2);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "allSettled:", v13);
  v14 = (void *)objc_claimAutoreleasedReturnValue();

  -[HMDHomeManager workContext](self, "workContext");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  v24[0] = v5;
  v24[1] = 3221225472;
  v24[2] = __65__HMDHomeManager_FrameworkNotify__initHomeManagerFrameworkNotify__block_invoke_3;
  v24[3] = &unk_24E796128;
  objc_copyWeak(&v25, &location);
  v16 = (id)objc_msgSend(v14, "inContext:then:", v15, v24);

  +[HMDMainDriver driver](HMDMainDriver, "driver");
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v17, "coreData");
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v18, "firstCloudKitImportFuture");
  v19 = (void *)objc_claimAutoreleasedReturnValue();

  -[HMDHomeManager workContext](self, "workContext");
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  v22[0] = v5;
  v22[1] = 3221225472;
  v22[2] = __65__HMDHomeManager_FrameworkNotify__initHomeManagerFrameworkNotify__block_invoke_9;
  v22[3] = &unk_24E796128;
  objc_copyWeak(&v23, &location);
  v21 = (id)objc_msgSend(v19, "inContext:then:", v20, v22);

  objc_destroyWeak(&v23);
  objc_destroyWeak(&v25);

  objc_destroyWeak(&v27);
  objc_destroyWeak(&v29);
  objc_destroyWeak(&location);
}

- (BOOL)daemonHasLoadedSceneGraph
{
  return -[HMDHomeManager startupHasCompleted](self, "startupHasCompleted")
      && -[HMDHomeManager deviceAccountHasSettled](self, "deviceAccountHasSettled")
      && -[HMDHomeManager firstCloudKitImportComplete](self, "firstCloudKitImportComplete");
}

- (void)determineDataSyncSateForHH2:(BOOL *)a3 homeManagerDataSyncState:(unint64_t *)a4 homeManagerStatus:(unint64_t *)a5
{
  void *v9;
  HMDHomeManager *v10;
  NSObject *v11;
  void *v12;
  unint64_t v13;
  void *v14;
  void *v15;
  char v16;
  int v17;
  void *v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  if (!a3)
    _HMFPreconditionFailure();
  if (objc_msgSend((id)objc_opt_class(), "areWeAllowingHomeKitToRunWithoutCloudKitForHH2"))
  {
    v9 = (void *)MEMORY[0x227676638]();
    v10 = self;
    HMFGetOSLogHandle();
    v11 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      v17 = 138543362;
      v18 = v12;
      _os_log_impl(&dword_2218F0000, v11, OS_LOG_TYPE_INFO, "%{public}@Allowing HomeKit to run without CloudKit for HH2", (uint8_t *)&v17, 0xCu);

    }
    objc_autoreleasePoolPop(v9);
LABEL_6:
    *a3 = 0;
    if (!a4)
      return;
    v13 = 1;
    goto LABEL_17;
  }
  -[HMDHomeManager appleAccountManager](self, "appleAccountManager");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  if ((objc_msgSend(v14, "isLoggedInToPrimaryAccount") & 1) == 0)
  {

    goto LABEL_15;
  }
  +[HMDAppleAccountSettings sharedSettings](HMDAppleAccountSettings, "sharedSettings");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  v16 = objc_msgSend(v15, "isHomeEnabled");

  if ((v16 & 1) == 0)
  {
LABEL_15:
    *a3 = 0;
    if (!a4)
      return;
    v13 = 3;
    goto LABEL_17;
  }
  if (-[HMDHomeManager pcsEnabled](self, "pcsEnabled"))
  {
    if (!-[HMDHomeManager daemonHasLoadedSceneGraph](self, "daemonHasLoadedSceneGraph"))
    {
      *a3 = 1;
      if (!a4)
        return;
      v13 = 4;
      goto LABEL_17;
    }
    goto LABEL_6;
  }
  if (a5)
    *a5 = 32;
  *a3 = 1;
  if (a4)
  {
    v13 = 6;
LABEL_17:
    *a4 = v13;
  }
}

uint64_t __65__HMDHomeManager_FrameworkNotify__initHomeManagerFrameworkNotify__block_invoke(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "setStartupHasCompleted:", 1);

  return 1;
}

uint64_t __65__HMDHomeManager_FrameworkNotify__initHomeManagerFrameworkNotify__block_invoke_2(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "setDeviceAccountHasSettled:", 1);

  return 1;
}

uint64_t __65__HMDHomeManager_FrameworkNotify__initHomeManagerFrameworkNotify__block_invoke_3(uint64_t a1, void *a2)
{
  id v3;
  id WeakRetained;
  void *v5;
  id v6;
  NSObject *v7;
  void *v8;
  void *v9;
  void *v10;
  int v12;
  void *v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  v3 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v5 = (void *)MEMORY[0x227676638]();
  v6 = WeakRetained;
  HMFGetOSLogHandle();
  v7 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v12 = 138543362;
    v13 = v8;
    _os_log_impl(&dword_2218F0000, v7, OS_LOG_TYPE_INFO, "%{public}@Initial scene graph has loaded, allows kFetchConfiguration.", (uint8_t *)&v12, 0xCu);

  }
  objc_autoreleasePoolPop(v5);
  objc_msgSend(MEMORY[0x24BDD16D0], "defaultCenter");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "postNotificationName:object:", CFSTR("kCloudDataSyncInProgressUpdatedNotification"), 0);

  objc_msgSend(v6, "uuid");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "updateGenerationCounterWithReason:sourceUUID:shouldNotifyClients:", CFSTR("Initial Framework Notify Startup"), v10, 0);

  return 1;
}

uint64_t __65__HMDHomeManager_FrameworkNotify__initHomeManagerFrameworkNotify__block_invoke_9(uint64_t a1, void *a2)
{
  id v3;
  id WeakRetained;
  void *v5;
  id v6;
  NSObject *v7;
  void *v8;
  void *v9;
  void *v10;
  const __CFString *v12;
  uint64_t v13;
  uint8_t buf[4];
  void *v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  v3 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v5 = (void *)MEMORY[0x227676638](objc_msgSend(WeakRetained, "setFirstCloudKitImportComplete:", 1));
  v6 = WeakRetained;
  HMFGetOSLogHandle();
  v7 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543362;
    v15 = v8;
    _os_log_impl(&dword_2218F0000, v7, OS_LOG_TYPE_INFO, "%{public}@First CloudKit import complete, update status.", buf, 0xCu);

  }
  objc_autoreleasePoolPop(v5);
  objc_msgSend(MEMORY[0x24BDD16D0], "defaultCenter");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v12 = CFSTR("HMDHH2FirstCKImportFinished");
  v13 = MEMORY[0x24BDBD1C8];
  objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", &v13, &v12, 1);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "postNotificationName:object:userInfo:", CFSTR("kCloudDataSyncInProgressUpdatedNotification"), v6, v10);

  return 1;
}

+ (BOOL)areWeAllowingHomeKitToRunWithoutCloudKitForHH2
{
  int v2;

  v2 = isInternalBuild();
  if (v2)
  {
    if (areWeAllowingHomeKitToRunWithoutCloudKitForHH2__hmf_once_t2 != -1)
      dispatch_once(&areWeAllowingHomeKitToRunWithoutCloudKitForHH2__hmf_once_t2, &__block_literal_global_154826);
    LOBYTE(v2) = areWeAllowingHomeKitToRunWithoutCloudKitForHH2__hmf_once_v3 != 0;
  }
  return v2;
}

void __81__HMDHomeManager_FrameworkNotify__areWeAllowingHomeKitToRunWithoutCloudKitForHH2__block_invoke()
{
  void *v0;
  id v1;

  objc_msgSend(MEMORY[0x24BE3F248], "sharedPreferences");
  v1 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "preferenceForKey:", CFSTR("allowAccessWithoutCloudKit"));
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  areWeAllowingHomeKitToRunWithoutCloudKitForHH2__hmf_once_v3 = objc_msgSend(v0, "BOOLValue");

}

- (void)fetchSetupDiagnosticStateForAccessoryUUID:(id)a3 completion:(id)a4
{
  -[HMDHomeManager fetchSetupDiagnosticStateWithOptions:accessoryUUID:remoteMessageTimeout:remoteMessageRestriction:completion:](self, "fetchSetupDiagnosticStateWithOptions:accessoryUUID:remoteMessageTimeout:remoteMessageRestriction:completion:", 3, a3, 9, a4, 10.0);
}

- (void)fetchSetupDiagnosticStateWithOptions:(unint64_t)a3 accessoryUUID:(id)a4 remoteMessageTimeout:(double)a5 remoteMessageRestriction:(unint64_t)a6 completion:(id)a7
{
  id v12;
  id v13;
  uint64_t v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  id v19;
  void *v20;
  void *v21;
  HMDHomeManager *v22;
  NSObject *v23;
  void *v24;
  void *v25;
  HMDHomeManager *v26;
  NSObject *v27;
  void *v28;
  void *v29;
  void *v30;
  HMDHomeManager *v31;
  NSObject *v32;
  void *v33;
  void *v34;
  _QWORD v35[5];
  id v36;
  uint64_t v37;
  uint8_t buf[4];
  void *v39;
  uint64_t v40;

  v40 = *MEMORY[0x24BDAC8D0];
  v12 = a4;
  v13 = a7;
  if (v12)
  {
    -[HMDHomeManager _mediaRouteIdentifierForAccessory:](self, "_mediaRouteIdentifierForAccessory:", v12);
    v14 = objc_claimAutoreleasedReturnValue();
    if (v14)
    {
      v15 = (void *)v14;
      -[HMDHomeManager configuringStateController](self, "configuringStateController");
      v16 = (void *)objc_claimAutoreleasedReturnValue();

      if (v16)
      {
        -[HMDHomeManager accessoryWithUUID:](self, "accessoryWithUUID:", v12);
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0)
          v18 = v17;
        else
          v18 = 0;
        v19 = v18;

        v37 = *MEMORY[0x24BDD5EF0];
        objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", &v37, 1);
        v20 = (void *)objc_claimAutoreleasedReturnValue();
        v35[0] = MEMORY[0x24BDAC760];
        v35[1] = 3221225472;
        v35[2] = __144__HMDHomeManager_ConfiguringState__fetchSetupDiagnosticStateWithOptions_accessoryUUID_remoteMessageTimeout_remoteMessageRestriction_completion___block_invoke;
        v35[3] = &unk_24E78A4D8;
        v35[4] = self;
        v36 = v13;
        -[HMDHomeManager _handleAccessoryDiagnosticQueryWithOptions:accessory:accessoryUUID:mediaRouteID:additionalFetchKeys:remoteMessageTimeout:remoteMessageRestriction:completion:](self, "_handleAccessoryDiagnosticQueryWithOptions:accessory:accessoryUUID:mediaRouteID:additionalFetchKeys:remoteMessageTimeout:remoteMessageRestriction:completion:", a3, v19, v12, v15, v20, a6, a5, v35);

      }
      else
      {
        v30 = (void *)MEMORY[0x227676638]();
        v31 = self;
        HMFGetOSLogHandle();
        v32 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v32, OS_LOG_TYPE_INFO))
        {
          HMFGetLogIdentifier();
          v33 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543362;
          v39 = v33;
          _os_log_impl(&dword_2218F0000, v32, OS_LOG_TYPE_INFO, "%{public}@Cannot query configuring state as the controller is nil", buf, 0xCu);

        }
        objc_autoreleasePoolPop(v30);
        objc_msgSend(MEMORY[0x24BDD1540], "hmErrorWithCode:", 2);
        v34 = (void *)objc_claimAutoreleasedReturnValue();
        (*((void (**)(id, _QWORD, void *))v13 + 2))(v13, 0, v34);

      }
    }
    else
    {
      v25 = (void *)MEMORY[0x227676638]();
      v26 = self;
      HMFGetOSLogHandle();
      v27 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v27, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v28 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543362;
        v39 = v28;
        _os_log_impl(&dword_2218F0000, v27, OS_LOG_TYPE_INFO, "%{public}@Cannot query configuring state as peer identifier is nil", buf, 0xCu);

      }
      objc_autoreleasePoolPop(v25);
      objc_msgSend(MEMORY[0x24BDD1540], "hmErrorWithCode:", 2);
      v29 = (void *)objc_claimAutoreleasedReturnValue();
      (*((void (**)(id, _QWORD, void *))v13 + 2))(v13, 0, v29);

      v15 = 0;
    }
  }
  else
  {
    v21 = (void *)MEMORY[0x227676638]();
    v22 = self;
    HMFGetOSLogHandle();
    v23 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v23, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v24 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v39 = v24;
      _os_log_impl(&dword_2218F0000, v23, OS_LOG_TYPE_INFO, "%{public}@Cannot query configuring state as accessory UUID is nil", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v21);
    objc_msgSend(MEMORY[0x24BDD1540], "hmErrorWithCode:", 2);
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    (*((void (**)(id, _QWORD, void *))v13 + 2))(v13, 0, v15);
  }

}

- (void)_registerForConfiguringStateMessages
{
  void *v3;
  HMDHomeManager *v4;
  NSObject *v5;
  void *v6;
  uint64_t v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  uint8_t buf[4];
  void *v18;
  __int16 v19;
  uint64_t v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  v3 = (void *)MEMORY[0x227676638](self, a2);
  v4 = self;
  HMFGetOSLogHandle();
  v5 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v7 = *MEMORY[0x24BDD5EC8];
    *(_DWORD *)buf = 138543618;
    v18 = v6;
    v19 = 2112;
    v20 = v7;
    _os_log_impl(&dword_2218F0000, v5, OS_LOG_TYPE_INFO, "%{public}@Registering for %@ message for device setup configuring state query", buf, 0x16u);

  }
  else
  {
    v7 = *MEMORY[0x24BDD5EC8];
  }

  objc_autoreleasePoolPop(v3);
  -[HMDHomeManager messageDispatcher](v4, "messageDispatcher");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  +[HMDXPCMessagePolicy policyWithEntitlements:](HMDXPCMessagePolicy, "policyWithEntitlements:", 5);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v16 = v9;
  objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", &v16, 1);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "registerForMessage:receiver:policies:selector:", v7, v4, v10, sel__handleDeviceSetupConfiguringStateQuery_);

  -[HMDHomeManager messageDispatcher](v4, "messageDispatcher");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v12 = *MEMORY[0x24BDD5F88];
  +[HMDXPCMessagePolicy policyWithEntitlements:](HMDXPCMessagePolicy, "policyWithEntitlements:", 5);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  v15 = v13;
  objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", &v15, 1);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "registerForMessage:receiver:policies:selector:", v12, v4, v14, sel__handleAccessoryDiagnosticStateQuery_);

}

- (void)_handleDeviceSetupConfiguringStateQuery:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  HMDHomeManager *v7;
  NSObject *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  HMDHomeManager *v14;
  NSObject *v15;
  void *v16;
  const char *v17;
  void *v18;
  _QWORD v19[5];
  id v20;
  uint8_t buf[4];
  void *v22;
  __int16 v23;
  id v24;
  __int16 v25;
  void *v26;
  uint64_t v27;

  v27 = *MEMORY[0x24BDAC8D0];
  v4 = a3;
  objc_msgSend(v4, "uuidForKey:", CFSTR("kAccessoryPeerIdentifierKey"));
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = (void *)MEMORY[0x227676638]();
  v7 = self;
  HMFGetOSLogHandle();
  v8 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543874;
    v22 = v9;
    v23 = 2112;
    v24 = v4;
    v25 = 2112;
    v26 = v5;
    _os_log_impl(&dword_2218F0000, v8, OS_LOG_TYPE_INFO, "%{public}@Handle query message %@ with mediaRouteID %@", buf, 0x20u);

  }
  objc_autoreleasePoolPop(v6);
  if (!v5)
  {
    v13 = (void *)MEMORY[0x227676638]();
    v14 = v7;
    HMFGetOSLogHandle();
    v15 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v22 = v16;
      v17 = "%{public}@mediaRouteIdentifier is nil";
LABEL_10:
      _os_log_impl(&dword_2218F0000, v15, OS_LOG_TYPE_ERROR, v17, buf, 0xCu);

    }
LABEL_11:

    objc_autoreleasePoolPop(v13);
    objc_msgSend(MEMORY[0x24BDD1540], "hmfErrorWithCode:", 2);
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "respondWithError:", v18);

    goto LABEL_12;
  }
  -[HMDHomeManager configuringStateController](v7, "configuringStateController");
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v10)
  {
    v13 = (void *)MEMORY[0x227676638]();
    v14 = v7;
    HMFGetOSLogHandle();
    v15 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v22 = v16;
      v17 = "%{public}@Configuring controller is nil";
      goto LABEL_10;
    }
    goto LABEL_11;
  }
  -[HMDHomeManager configuringStateController](v7, "configuringStateController");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "UUIDString");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  v19[0] = MEMORY[0x24BDAC760];
  v19[1] = 3221225472;
  v19[2] = __76__HMDHomeManager_ConfiguringState___handleDeviceSetupConfiguringStateQuery___block_invoke;
  v19[3] = &unk_24E78B610;
  v19[4] = v7;
  v20 = v4;
  objc_msgSend(v11, "queryConfiguringState:additionalKeys:withCompletion:", v12, MEMORY[0x24BDBD1A8], v19);

LABEL_12:
}

- (BOOL)_handleAccessoryDiagnosticStateQueryWithResponse:(id)a3 hasAdditionalRequest:(BOOL)a4 error:(id)a5 completion:(id)a6
{
  id v10;
  id v11;
  void (**v12)(id, void *, _QWORD);
  void *v13;
  HMDHomeManager *v14;
  NSObject *v15;
  void *v16;
  BOOL v17;
  void *v18;
  void *v19;
  HMDHomeManager *v20;
  NSObject *v21;
  NSObject *v22;
  void *v23;
  void *v24;
  void *v25;
  uint64_t v27;
  void *v28;
  uint8_t buf[4];
  void *v30;
  __int16 v31;
  id v32;
  uint64_t v33;

  v33 = *MEMORY[0x24BDAC8D0];
  v10 = a3;
  v11 = a5;
  v12 = (void (**)(id, void *, _QWORD))a6;
  if (!v11)
  {
    -[HMDHomeManager _diagnosticInfoFromRemoteResponse:](self, "_diagnosticInfoFromRemoteResponse:", v10);
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    v17 = v18 != 0;
    v19 = (void *)MEMORY[0x227676638]();
    v20 = self;
    HMFGetOSLogHandle();
    v21 = objc_claimAutoreleasedReturnValue();
    v22 = v21;
    if (v18)
    {
      if (os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v23 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543362;
        v30 = v23;
        _os_log_impl(&dword_2218F0000, v22, OS_LOG_TYPE_INFO, "%{public}@Responding with diagnostic Info", buf, 0xCu);

      }
      objc_autoreleasePoolPop(v19);
      v27 = *MEMORY[0x24BDD5EF8];
      v28 = v18;
      objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", &v28, &v27, 1);
      v24 = (void *)objc_claimAutoreleasedReturnValue();
      v12[2](v12, v24, 0);
    }
    else
    {
      if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v25 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543362;
        v30 = v25;
        _os_log_impl(&dword_2218F0000, v22, OS_LOG_TYPE_ERROR, "%{public}@Failed to decode the response", buf, 0xCu);

      }
      objc_autoreleasePoolPop(v19);
      if (a4)
        goto LABEL_16;
      objc_msgSend(MEMORY[0x24BDD1540], "hmfErrorWithCode:", 2);
      v24 = (void *)objc_claimAutoreleasedReturnValue();
      ((void (**)(id, void *, void *))v12)[2](v12, 0, v24);
    }

LABEL_16:
    goto LABEL_17;
  }
  v13 = (void *)MEMORY[0x227676638]();
  v14 = self;
  HMFGetOSLogHandle();
  v15 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
  {
    HMFGetLogIdentifier();
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543618;
    v30 = v16;
    v31 = 2112;
    v32 = v11;
    _os_log_impl(&dword_2218F0000, v15, OS_LOG_TYPE_ERROR, "%{public}@Query message failed, error: (%@): ", buf, 0x16u);

  }
  objc_autoreleasePoolPop(v13);
  if (!a4)
    ((void (**)(id, void *, id))v12)[2](v12, 0, v11);
  v17 = 0;
LABEL_17:

  return v17;
}

- (void)_handleAccessoryDiagnosticStateQuery:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  uint64_t v7;
  void *v8;
  void *v9;
  void *v10;
  id v11;
  void *v12;
  void *v13;
  void *v14;
  HMDHomeManager *v15;
  NSObject *v16;
  void *v17;
  void *v18;
  HMDHomeManager *v19;
  NSObject *v20;
  void *v21;
  void *v22;
  HMDHomeManager *v23;
  NSObject *v24;
  void *v25;
  _QWORD v26[4];
  id v27;
  uint8_t buf[4];
  void *v29;
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  v4 = a3;
  objc_msgSend(v4, "messagePayload");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "hmf_numberForKey:", *MEMORY[0x24BDD5F00]);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = objc_msgSend(v6, "integerValue");

  if (v7)
  {
    objc_msgSend(v4, "uuidForKey:", *MEMORY[0x24BDD5EE0]);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    if (v8)
    {
      -[HMDHomeManager accessoryWithUUID:](self, "accessoryWithUUID:", v8);
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0)
        v10 = v9;
      else
        v10 = 0;
      v11 = v10;

      objc_msgSend(v11, "identifier");
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      if (v12)
      {
        v26[0] = MEMORY[0x24BDAC760];
        v26[1] = 3221225472;
        v26[2] = __73__HMDHomeManager_ConfiguringState___handleAccessoryDiagnosticStateQuery___block_invoke;
        v26[3] = &unk_24E79A980;
        v27 = v4;
        -[HMDHomeManager _handleAccessoryDiagnosticQueryWithOptions:accessory:accessoryUUID:mediaRouteID:additionalFetchKeys:remoteMessageTimeout:remoteMessageRestriction:completion:](self, "_handleAccessoryDiagnosticQueryWithOptions:accessory:accessoryUUID:mediaRouteID:additionalFetchKeys:remoteMessageTimeout:remoteMessageRestriction:completion:", v7, v11, v8, v12, MEMORY[0x24BDBD1A8], 9, 10.0, v26);
        v13 = v27;
      }
      else
      {
        v22 = (void *)MEMORY[0x227676638]();
        v23 = self;
        HMFGetOSLogHandle();
        v24 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
        {
          HMFGetLogIdentifier();
          v25 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543362;
          v29 = v25;
          _os_log_impl(&dword_2218F0000, v24, OS_LOG_TYPE_ERROR, "%{public}@mediaRouteIdentifier is nil", buf, 0xCu);

        }
        objc_autoreleasePoolPop(v22);
        objc_msgSend(MEMORY[0x24BDD1540], "hmfErrorWithCode:", 2);
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v4, "respondWithError:", v13);
      }

    }
    else
    {
      v18 = (void *)MEMORY[0x227676638]();
      v19 = self;
      HMFGetOSLogHandle();
      v20 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v21 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543362;
        v29 = v21;
        _os_log_impl(&dword_2218F0000, v20, OS_LOG_TYPE_ERROR, "%{public}@Could not determine accessory UUID", buf, 0xCu);

      }
      objc_autoreleasePoolPop(v18);
      objc_msgSend(MEMORY[0x24BDD1540], "hmErrorWithCode:", 2);
      v11 = (id)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "respondWithError:", v11);
    }

  }
  else
  {
    v14 = (void *)MEMORY[0x227676638]();
    v15 = self;
    HMFGetOSLogHandle();
    v16 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v29 = v17;
      _os_log_impl(&dword_2218F0000, v16, OS_LOG_TYPE_ERROR, "%{public}@Invalid fetch options", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v14);
    objc_msgSend(MEMORY[0x24BDD1540], "hmErrorWithCode:", 3);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "respondWithError:", v8);
  }

}

- (void)_handleAccessoryDiagnosticQueryWithOptions:(unint64_t)a3 accessory:(id)a4 accessoryUUID:(id)a5 mediaRouteID:(id)a6 additionalFetchKeys:(id)a7 remoteMessageTimeout:(double)a8 remoteMessageRestriction:(unint64_t)a9 completion:(id)a10
{
  char v14;
  id v16;
  id v17;
  id v18;
  void *v19;
  void *v20;
  void *v21;
  const __CFString *v22;
  NSObject *v23;
  NSObject *v24;
  unint64_t v25;
  NSObject *v26;
  void *v27;
  NSObject *v28;
  id v30;
  id v31;
  _QWORD v32[5];
  id v33;
  id v34;
  id v35;
  _QWORD *v36;
  _QWORD block[5];
  id v38;
  __CFString *v39;
  id v40;
  id v41;
  id v42;
  NSObject *v43;
  id v44;
  _QWORD *v45;
  unint64_t v46;
  double v47;
  char v48;
  _QWORD v49[3];
  char v50;

  v14 = a3;
  v16 = a4;
  v17 = a5;
  v31 = a6;
  v30 = a7;
  v18 = a10;
  objc_msgSend(v16, "deviceForDirectMessaging");
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v16, "home");
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v20, "currentUser");
  v21 = (void *)objc_claimAutoreleasedReturnValue();

  v22 = CFSTR("HMD.accessoryDiagnosticInfo.o");
  if (v21 && !objc_msgSend(v21, "isOwner"))
    v22 = CFSTR("HMD.accessoryDiagnosticInfo");
  v23 = dispatch_group_create();
  v24 = v23;
  v49[0] = 0;
  v49[1] = v49;
  v49[2] = 0x2020000000;
  v50 = 0;
  v25 = v14 & 2;
  if ((v14 & 1) != 0 && v19)
  {
    dispatch_group_enter(v23);
    -[HMDHomeManager workQueue](self, "workQueue");
    v26 = objc_claimAutoreleasedReturnValue();
    block[0] = MEMORY[0x24BDAC760];
    block[1] = 3221225472;
    block[2] = __193__HMDHomeManager_ConfiguringState___handleAccessoryDiagnosticQueryWithOptions_accessory_accessoryUUID_mediaRouteID_additionalFetchKeys_remoteMessageTimeout_remoteMessageRestriction_completion___block_invoke;
    block[3] = &unk_24E78A528;
    block[4] = self;
    v38 = v19;
    v39 = (__CFString *)v22;
    v40 = v17;
    v41 = v31;
    v47 = a8;
    v42 = v30;
    v45 = v49;
    v46 = a9;
    v48 = v25 >> 1;
    v44 = v18;
    v43 = v24;
    dispatch_async(v26, block);

    if (!v25)
      goto LABEL_11;
    goto LABEL_10;
  }
  if ((v14 & 2) != 0)
  {
LABEL_10:
    -[HMDHomeManager workQueue](self, "workQueue", a9);
    v28 = objc_claimAutoreleasedReturnValue();
    v32[0] = MEMORY[0x24BDAC760];
    v32[1] = 3221225472;
    v32[2] = __193__HMDHomeManager_ConfiguringState___handleAccessoryDiagnosticQueryWithOptions_accessory_accessoryUUID_mediaRouteID_additionalFetchKeys_remoteMessageTimeout_remoteMessageRestriction_completion___block_invoke_2;
    v32[3] = &unk_24E78DA08;
    v36 = v49;
    v32[4] = self;
    v33 = v17;
    v34 = v31;
    v35 = v18;
    dispatch_group_notify(v24, v28, v32);

    goto LABEL_11;
  }
  objc_msgSend(MEMORY[0x24BDD1540], "hmfErrorWithCode:", 2);
  v27 = (void *)objc_claimAutoreleasedReturnValue();
  (*((void (**)(id, _QWORD, void *))v18 + 2))(v18, 0, v27);

LABEL_11:
  _Block_object_dispose(v49, 8);

}

- (id)_diagnosticInfoFromRemoteResponse:(id)a3
{
  id v4;
  uint64_t v5;
  void *v6;
  void *v7;
  id v8;
  void *v9;
  HMDHomeManager *v10;
  NSObject *v11;
  void *v12;
  int v14;
  void *v15;
  __int16 v16;
  uint64_t v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  v4 = a3;
  v5 = *MEMORY[0x24BDD5B40];
  objc_msgSend(v4, "hmf_dataForKey:", *MEMORY[0x24BDD5B40]);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = v6;
  if (v6)
  {
    v8 = v6;
  }
  else
  {
    v9 = (void *)MEMORY[0x227676638]();
    v10 = self;
    HMFGetOSLogHandle();
    v11 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      v14 = 138543618;
      v15 = v12;
      v16 = 2112;
      v17 = v5;
      _os_log_impl(&dword_2218F0000, v11, OS_LOG_TYPE_ERROR, "%{public}@Response does not contain key %@", (uint8_t *)&v14, 0x16u);

    }
    objc_autoreleasePoolPop(v9);
  }

  return v7;
}

- (id)_decodeDiagnosticInfoFromLocalResponse:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  HMDHomeManager *v8;
  NSObject *v9;
  void *v10;
  uint64_t v11;
  int v13;
  void *v14;
  __int16 v15;
  uint64_t v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  v4 = a3;
  objc_msgSend(v4, "hmf_dataForKey:", *MEMORY[0x24BDD5EF8]);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  if (v5)
  {
    v6 = (void *)objc_msgSend(objc_alloc(MEMORY[0x24BDD7368]), "initWithData:", v5);
  }
  else
  {
    v7 = (void *)MEMORY[0x227676638]();
    v8 = self;
    HMFGetOSLogHandle();
    v9 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      v11 = *MEMORY[0x24BDD5B40];
      v13 = 138543618;
      v14 = v10;
      v15 = 2112;
      v16 = v11;
      _os_log_impl(&dword_2218F0000, v9, OS_LOG_TYPE_ERROR, "%{public}@Response does not contain key %@", (uint8_t *)&v13, 0x16u);

    }
    objc_autoreleasePoolPop(v7);
    v6 = 0;
  }

  return v6;
}

- (id)_mediaRouteIdentifierForAccessory:(id)a3
{
  void *v3;
  void *v4;
  void *v5;

  -[HMDHomeManager accessoryWithUUID:](self, "accessoryWithUUID:", a3);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = v3;
  if (v3)
  {
    objc_msgSend(v3, "identifier");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v5 = 0;
  }

  return v5;
}

void __193__HMDHomeManager_ConfiguringState___handleAccessoryDiagnosticQueryWithOptions_accessory_accessoryUUID_mediaRouteID_additionalFetchKeys_remoteMessageTimeout_remoteMessageRestriction_completion___block_invoke(uint64_t a1)
{
  HMDRemoteDeviceMessageDestination *v2;
  void *v3;
  HMDRemoteDeviceMessageDestination *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  id v14;
  NSObject *v15;
  void *v16;
  uint64_t v17;
  id v18;
  void *v19;
  __int128 v20;
  _QWORD v21[5];
  id v22;
  __int128 v23;
  char v24;
  uint8_t buf[4];
  void *v26;
  __int16 v27;
  uint64_t v28;
  _QWORD v29[3];
  _QWORD v30[4];

  v30[3] = *MEMORY[0x24BDAC8D0];
  v2 = [HMDRemoteDeviceMessageDestination alloc];
  objc_msgSend(*(id *)(a1 + 32), "uuid");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = -[HMDRemoteDeviceMessageDestination initWithTarget:device:](v2, "initWithTarget:device:", v3, *(_QWORD *)(a1 + 40));

  v29[0] = CFSTR("uuid");
  v5 = *(_QWORD *)(a1 + 48);
  objc_msgSend(*(id *)(a1 + 56), "UUIDString");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = *(_QWORD *)(a1 + 64);
  v8 = *(_QWORD *)(a1 + 72);
  v30[0] = v6;
  v30[1] = v7;
  v9 = *MEMORY[0x24BDD5EE8];
  v29[1] = CFSTR("identifier");
  v29[2] = v9;
  v30[2] = v8;
  objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v30, v29, 3);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  +[HMDRemoteMessage secureMessageWithName:qualityOfService:destination:messagePayload:restriction:](HMDRemoteMessage, "secureMessageWithName:qualityOfService:destination:messagePayload:restriction:", v5, -1, v4, v10, *(_QWORD *)(a1 + 104));
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v12 = (void *)objc_msgSend(v11, "mutableCopy");

  v13 = (void *)MEMORY[0x227676638](objc_msgSend(v12, "setTimeout:", *(double *)(a1 + 112)));
  v14 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v15 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    v17 = *(_QWORD *)(a1 + 56);
    *(_DWORD *)buf = 138543618;
    v26 = v16;
    v27 = 2112;
    v28 = v17;
    _os_log_impl(&dword_2218F0000, v15, OS_LOG_TYPE_INFO, "%{public}@Performing accessory diagnostic fetch for accessory %@", buf, 0x16u);

  }
  objc_autoreleasePoolPop(v13);
  v21[0] = MEMORY[0x24BDAC760];
  v21[1] = 3221225472;
  v21[2] = __193__HMDHomeManager_ConfiguringState___handleAccessoryDiagnosticQueryWithOptions_accessory_accessoryUUID_mediaRouteID_additionalFetchKeys_remoteMessageTimeout_remoteMessageRestriction_completion___block_invoke_18;
  v21[3] = &unk_24E78A500;
  v21[4] = *(_QWORD *)(a1 + 32);
  v24 = *(_BYTE *)(a1 + 120);
  v20 = *(_OWORD *)(a1 + 88);
  v18 = (id)v20;
  v23 = v20;
  v22 = *(id *)(a1 + 80);
  objc_msgSend(v12, "setResponseHandler:", v21);
  objc_msgSend(*(id *)(a1 + 32), "messageDispatcher");
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v19, "sendMessage:", v12);

}

void __193__HMDHomeManager_ConfiguringState___handleAccessoryDiagnosticQueryWithOptions_accessory_accessoryUUID_mediaRouteID_additionalFetchKeys_remoteMessageTimeout_remoteMessageRestriction_completion___block_invoke_2(uint64_t a1)
{
  void *v2;
  id v3;
  NSObject *v4;
  void *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  _QWORD v9[5];
  id v10;
  uint8_t buf[4];
  void *v12;
  __int16 v13;
  uint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 24))
  {
    v2 = (void *)MEMORY[0x227676638]();
    v3 = *(id *)(a1 + 32);
    HMFGetOSLogHandle();
    v4 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      v6 = *(_QWORD *)(a1 + 40);
      *(_DWORD *)buf = 138543618;
      v12 = v5;
      v13 = 2112;
      v14 = v6;
      _os_log_impl(&dword_2218F0000, v4, OS_LOG_TYPE_INFO, "%{public}@Performing accessory diagnostic fetch using rapport %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v2);
    objc_msgSend(*(id *)(a1 + 32), "configuringStateController");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v9[0] = MEMORY[0x24BDAC760];
    v9[1] = 3221225472;
    v9[2] = __193__HMDHomeManager_ConfiguringState___handleAccessoryDiagnosticQueryWithOptions_accessory_accessoryUUID_mediaRouteID_additionalFetchKeys_remoteMessageTimeout_remoteMessageRestriction_completion___block_invoke_20;
    v9[3] = &unk_24E78A4D8;
    v9[4] = *(_QWORD *)(a1 + 32);
    v8 = *(_QWORD *)(a1 + 48);
    v10 = *(id *)(a1 + 56);
    objc_msgSend(v7, "queryConfiguringState:additionalKeys:withCompletion:", v8, MEMORY[0x24BDBD1A8], v9);

  }
}

uint64_t __193__HMDHomeManager_ConfiguringState___handleAccessoryDiagnosticQueryWithOptions_accessory_accessoryUUID_mediaRouteID_additionalFetchKeys_remoteMessageTimeout_remoteMessageRestriction_completion___block_invoke_20(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return objc_msgSend(*(id *)(a1 + 32), "_handleAccessoryDiagnosticStateQueryWithResponse:hasAdditionalRequest:error:completion:", a2, 0, a3, *(_QWORD *)(a1 + 40));
}

void __193__HMDHomeManager_ConfiguringState___handleAccessoryDiagnosticQueryWithOptions_accessory_accessoryUUID_mediaRouteID_additionalFetchKeys_remoteMessageTimeout_remoteMessageRestriction_completion___block_invoke_18(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24) = objc_msgSend(*(id *)(a1 + 32), "_handleAccessoryDiagnosticStateQueryWithResponse:hasAdditionalRequest:error:completion:", a3, *(unsigned __int8 *)(a1 + 64), a2, *(_QWORD *)(a1 + 48));
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));
}

uint64_t __73__HMDHomeManager_ConfiguringState___handleAccessoryDiagnosticStateQuery___block_invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v3;

  v3 = *(void **)(a1 + 32);
  if (a3)
    return objc_msgSend(v3, "respondWithError:");
  else
    return objc_msgSend(v3, "respondWithPayload:", a2);
}

void __76__HMDHomeManager_ConfiguringState___handleDeviceSetupConfiguringStateQuery___block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  NSObject *v7;
  uint64_t v8;
  void *v9;
  id v10;
  id v11;
  _QWORD v12[4];
  id v13;
  uint64_t v14;
  id v15;
  id v16;

  v5 = a2;
  v6 = a3;
  objc_msgSend(*(id *)(a1 + 32), "workQueue");
  v7 = objc_claimAutoreleasedReturnValue();
  v12[0] = MEMORY[0x24BDAC760];
  v12[1] = 3221225472;
  v12[2] = __76__HMDHomeManager_ConfiguringState___handleDeviceSetupConfiguringStateQuery___block_invoke_2;
  v12[3] = &unk_24E79A910;
  v8 = *(_QWORD *)(a1 + 32);
  v9 = *(void **)(a1 + 40);
  v13 = v6;
  v14 = v8;
  v15 = v9;
  v16 = v5;
  v10 = v5;
  v11 = v6;
  dispatch_async(v7, v12);

}

void __76__HMDHomeManager_ConfiguringState___handleDeviceSetupConfiguringStateQuery___block_invoke_2(uint64_t a1)
{
  void *v2;
  id v3;
  NSObject *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  id v10;
  NSObject *v11;
  NSObject *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  int v17;
  void *v18;
  __int16 v19;
  void *v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  if (*(_QWORD *)(a1 + 32))
  {
    v2 = (void *)MEMORY[0x227676638]();
    v3 = *(id *)(a1 + 40);
    HMFGetOSLogHandle();
    v4 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      v6 = *(void **)(a1 + 32);
      v17 = 138543618;
      v18 = v5;
      v19 = 2112;
      v20 = v6;
      _os_log_impl(&dword_2218F0000, v4, OS_LOG_TYPE_ERROR, "%{public}@Query message failed, error: (%@): ", (uint8_t *)&v17, 0x16u);

    }
    objc_autoreleasePoolPop(v2);
    objc_msgSend(*(id *)(a1 + 48), "respondWithError:", *(_QWORD *)(a1 + 32));
  }
  else
  {
    objc_msgSend(*(id *)(a1 + 40), "_diagnosticInfoFromRemoteResponse:", *(_QWORD *)(a1 + 56));
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    +[HMDAppleMediaAccessoryDiagnosticInfoController diagnosticInfoDescriptionWithData:](HMDAppleMediaAccessoryDiagnosticInfoController, "diagnosticInfoDescriptionWithData:", v7);
    v8 = (void *)objc_claimAutoreleasedReturnValue();

    v9 = (void *)MEMORY[0x227676638]();
    v10 = *(id *)(a1 + 40);
    HMFGetOSLogHandle();
    v11 = objc_claimAutoreleasedReturnValue();
    v12 = v11;
    if (v8)
    {
      if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        v17 = 138543618;
        v18 = v13;
        v19 = 2112;
        v20 = v8;
        _os_log_impl(&dword_2218F0000, v12, OS_LOG_TYPE_INFO, "%{public}@Query message sent, response: %@", (uint8_t *)&v17, 0x16u);

      }
      objc_autoreleasePoolPop(v9);
      objc_msgSend(*(id *)(a1 + 48), "respondWithPayload:", v8);
    }
    else
    {
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v14 = (void *)objc_claimAutoreleasedReturnValue();
        v17 = 138543362;
        v18 = v14;
        _os_log_impl(&dword_2218F0000, v12, OS_LOG_TYPE_ERROR, "%{public}@Failed to decode the response", (uint8_t *)&v17, 0xCu);

      }
      objc_autoreleasePoolPop(v9);
      v15 = *(void **)(a1 + 48);
      objc_msgSend(MEMORY[0x24BDD1540], "hmfErrorWithCode:", 2);
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v15, "respondWithError:", v16);

    }
  }
}

void __144__HMDHomeManager_ConfiguringState__fetchSetupDiagnosticStateWithOptions_accessoryUUID_remoteMessageTimeout_remoteMessageRestriction_completion___block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  id v8;
  NSObject *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  void *v13;
  id v14;
  NSObject *v15;
  void *v16;
  int v17;
  void *v18;
  __int16 v19;
  id v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  v5 = a2;
  v6 = a3;
  if (v6)
  {
    v7 = (void *)MEMORY[0x227676638]();
    v8 = *(id *)(a1 + 32);
    HMFGetOSLogHandle();
    v9 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      v17 = 138543618;
      v18 = v10;
      v19 = 2112;
      v20 = v6;
      _os_log_impl(&dword_2218F0000, v9, OS_LOG_TYPE_ERROR, "%{public}@Query configuring state failed with error: (%@): ", (uint8_t *)&v17, 0x16u);

    }
    objc_autoreleasePoolPop(v7);
    (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  }
  else
  {
    objc_msgSend(*(id *)(a1 + 32), "_decodeDiagnosticInfoFromLocalResponse:", v5);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v12 = (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
    v13 = (void *)MEMORY[0x227676638](v12);
    v14 = *(id *)(a1 + 32);
    HMFGetOSLogHandle();
    v15 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      v17 = 138543618;
      v18 = v16;
      v19 = 2112;
      v20 = v11;
      _os_log_impl(&dword_2218F0000, v15, OS_LOG_TYPE_INFO, "%{public}@Query message sent, response: %@", (uint8_t *)&v17, 0x16u);

    }
    objc_autoreleasePoolPop(v13);

  }
}

- (id)__generateAssistantTeamIdentifier
{
  void *v3;
  void *v4;

  objc_msgSend(MEMORY[0x24BDD1880], "UUID");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "hm_convertToData");
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  -[HMDHomeManager _saveAssistantHashingData:](self, "_saveAssistantHashingData:", v4);
  -[HMDHomeManager setAssistantIdentifierChanged:](self, "setAssistantIdentifierChanged:", 1);
  return v4;
}

- (id)_getAssistantHashingData
{
  void *v3;
  void *v4;
  id v5;
  id v6;
  void *v7;

  v3 = (id)CFPreferencesCopyAppValue(CFSTR("kAssistantTeamIdentifier"), CFSTR("com.apple.homed.notbackedup"));
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v4 = v3;
  else
    v4 = 0;
  v5 = v4;

  if (v5)
  {
    v6 = v5;
    v7 = v3;
  }
  else
  {
    -[HMDHomeManager __generateAssistantTeamIdentifier](self, "__generateAssistantTeamIdentifier");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
  }

  return v7;
}

- (void)_saveAssistantHashingData:(id)a3
{
  id v4;

  v4 = a3;
  -[HMDHomeManager _setHomeConfigurationKey:value:applicationIdentifier:](self, "_setHomeConfigurationKey:value:applicationIdentifier:", CFSTR("kAssistantTeamIdentifier"), v4, CFSTR("com.apple.homed.notbackedup"));
  -[HMDHomeManager _setAssistantHashingData:](self, "_setAssistantHashingData:", v4);

}

- (void)_setAssistantHashingData:(id)a3
{
  objc_msgSend(MEMORY[0x24BDD1880], "hm_setAssistantIdentifierSalt:", a3);
}

- (void)_setHomekitAssistantConfigurationVersion:(unint64_t)a3
{
  id v4;

  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedLong:", a3);
  v4 = (id)objc_claimAutoreleasedReturnValue();
  -[HMDHomeManager _setHomeConfigurationKey:value:](self, "_setHomeConfigurationKey:value:", CFSTR("kAssistantConfigurationVersionKey"), v4);

}

- (void)_setHomekitAssistantNumEntities:(unint64_t)a3
{
  -[HMDHomeManager _setHomeConfigurationKey:value:](self, "_setHomeConfigurationKey:value:", CFSTR("kAssistantConfigurationNumberOfEntitiesKey"), objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedInteger:", a3));
}

- (void)__setLastSyncedAssistantConfigurationVersion:(unint64_t)a3
{
  id v4;

  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedLong:", a3);
  v4 = (id)objc_claimAutoreleasedReturnValue();
  -[HMDHomeManager _setHomeConfigurationKey:value:](self, "_setHomeConfigurationKey:value:", CFSTR("kLastSyncedAssistantConfigurationVersionKey"), v4);

}

- (void)_incrementAssistantGenerationCounter
{
  NSObject *v3;

  -[HMDHomeManager workQueue](self, "workQueue");
  v3 = objc_claimAutoreleasedReturnValue();
  dispatch_assert_queue_V2(v3);

  -[HMDHomeManager setAssistantGenerationCounter:](self, "setAssistantGenerationCounter:", -[HMDHomeManager assistantGenerationCounter](self, "assistantGenerationCounter") + 1);
  -[HMDHomeManager _setHomekitAssistantConfigurationVersion:](self, "_setHomekitAssistantConfigurationVersion:", -[HMDHomeManager assistantGenerationCounter](self, "assistantGenerationCounter"));
}

- (void)_generateAssistantSyncDataAndIncrementVersion:(BOOL)a3 requestSync:(BOOL)a4 urgent:(BOOL)a5 completion:(id)a6
{
  _BOOL4 v8;
  id v10;
  void *v11;
  void *v12;
  NSObject *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  id v19;
  id v20;
  _QWORD v21[4];
  id v22;
  id v23;
  id v24;
  id v25;
  BOOL v26;
  BOOL v27;
  id location;

  v8 = a3;
  v10 = a6;
  if (a5 || !-[HMDHomeManager shouldDropNotification](self, "shouldDropNotification"))
  {
    -[HMDHomeManager workQueue](self, "workQueue");
    v13 = objc_claimAutoreleasedReturnValue();
    dispatch_assert_queue_V2(v13);

    if (v8)
      -[HMDHomeManager _incrementAssistantGenerationCounter](self, "_incrementAssistantGenerationCounter");
    -[HMDHomeManager currentHomeUUID](self, "currentHomeUUID");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHomeManager _homeWithUUID:](self, "_homeWithUUID:", v14);
    v15 = (void *)objc_claimAutoreleasedReturnValue();

    -[HMDHomeManager siriSyncNotificationReasons](self, "siriSyncNotificationReasons");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v16, "componentsJoinedByString:", CFSTR(","));
    v17 = (void *)objc_claimAutoreleasedReturnValue();

    objc_initWeak(&location, self);
    -[HMDHomeManager gatherer](self, "gatherer");
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    v21[0] = MEMORY[0x24BDAC760];
    v21[1] = 3221225472;
    v21[2] = __105__HMDHomeManager_Assistant___generateAssistantSyncDataAndIncrementVersion_requestSync_urgent_completion___block_invoke;
    v21[3] = &unk_24E78B598;
    objc_copyWeak(&v25, &location);
    v19 = v15;
    v22 = v19;
    v26 = a4;
    v20 = v17;
    v23 = v20;
    v27 = a5;
    v24 = v10;
    objc_msgSend(v18, "gatherHomeKitObjectsWithCompletion:", v21);

    objc_destroyWeak(&v25);
    objc_destroyWeak(&location);

  }
  else
  {
    v11 = _Block_copy(v10);
    v12 = v11;
    if (v11)
      (*((void (**)(void *))v11 + 2))(v11);

  }
}

- (void)_assistantSyncDataChanged:(id)a3
{
  id v4;
  uint64_t v5;
  void *v6;
  id v7;

  v4 = a3;
  -[HMDHomeManager workQueue](self, "workQueue");
  v5 = objc_claimAutoreleasedReturnValue();
  dispatch_assert_queue_V2((dispatch_queue_t)v5);

  -[HMDHomeManager _setAssistantSyncRequest:](self, "_setAssistantSyncRequest:", v4);
  -[HMDHomeManager debounceRegenerateAssistantSyncDataTimer](self, "debounceRegenerateAssistantSyncDataTimer");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  LOBYTE(v5) = objc_msgSend(v6, "isRunning");

  if ((v5 & 1) == 0)
  {
    -[HMDHomeManager debounceRegenerateAssistantSyncDataTimer](self, "debounceRegenerateAssistantSyncDataTimer");
    v7 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "resume");

  }
}

- (void)_setAssistantSyncRequest:(id)a3
{
  id v4;
  NSObject *v5;
  void *v6;
  HMDHomeManager *v7;
  NSObject *v8;
  void *v9;
  void *v10;
  void *v11;
  HMDHomeManager *v12;
  NSObject *v13;
  void *v14;
  uint64_t v15;
  int v16;
  void *v17;
  __int16 v18;
  id v19;
  __int16 v20;
  uint64_t v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  v4 = a3;
  -[HMDHomeManager workQueue](self, "workQueue");
  v5 = objc_claimAutoreleasedReturnValue();
  dispatch_assert_queue_V2(v5);

  v6 = (void *)MEMORY[0x227676638]();
  v7 = self;
  HMFGetOSLogHandle();
  v8 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v16 = 138543618;
    v17 = v9;
    v18 = 2112;
    v19 = v4;
    _os_log_impl(&dword_2218F0000, v8, OS_LOG_TYPE_INFO, "%{public}@Assistant sync data re-generation requested due to reason: %@", (uint8_t *)&v16, 0x16u);

  }
  objc_autoreleasePoolPop(v6);
  if (!-[HMDHomeManager siriSyncNotificationTime](v7, "siriSyncNotificationTime"))
  {
    mach_absolute_time();
    -[HMDHomeManager setSiriSyncNotificationTime:](v7, "setSiriSyncNotificationTime:", UpTicksToMilliseconds());
  }
  if (v4)
  {
    -[HMDHomeManager siriSyncNotificationReasons](v7, "siriSyncNotificationReasons");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "addObject:", v4);

    if (objc_msgSend(v4, "isEqual:", CFSTR("SyncStateCompleted")))
    {
      v11 = (void *)MEMORY[0x227676638]();
      v12 = v7;
      HMFGetOSLogHandle();
      v13 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v14 = (void *)objc_claimAutoreleasedReturnValue();
        v15 = -[HMDHomeManager assistantGenerationCounter](v12, "assistantGenerationCounter");
        v16 = 138543874;
        v17 = v14;
        v18 = 2112;
        v19 = v4;
        v20 = 2048;
        v21 = v15;
        _os_log_impl(&dword_2218F0000, v13, OS_LOG_TYPE_INFO, "%{public}@Posting an urgent sync notification after %@: %tu", (uint8_t *)&v16, 0x20u);

      }
      objc_autoreleasePoolPop(v11);
      -[HMDHomeManager _generateAssistantSyncDataAndIncrementVersion:requestSync:urgent:completion:](v12, "_generateAssistantSyncDataAndIncrementVersion:requestSync:urgent:completion:", 1, 1, 1, 0);
    }
  }

}

- (void)hh2FirstCKImportFinished
{
  void *v3;
  HMDHomeManager *v4;
  NSObject *v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;
  _QWORD v10[4];
  id v11;
  HMDHomeManager *v12;
  uint8_t buf[4];
  void *v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v3 = (void *)MEMORY[0x227676638](self, a2);
  v4 = self;
  HMFGetOSLogHandle();
  v5 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543362;
    v14 = v6;
    _os_log_impl(&dword_2218F0000, v5, OS_LOG_TYPE_INFO, "%{public}@HH2 : First CK import finished", buf, 0xCu);

  }
  objc_autoreleasePoolPop(v3);
  +[HMDCoreData sharedInstance](HMDCoreData, "sharedInstance");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "contextWithRootPartition");
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  v10[0] = MEMORY[0x24BDAC760];
  v10[1] = 3221225472;
  v10[2] = __53__HMDHomeManager_Assistant__hh2FirstCKImportFinished__block_invoke;
  v10[3] = &unk_24E79C268;
  v11 = v8;
  v12 = v4;
  v9 = v8;
  objc_msgSend(v9, "performBlock:", v10);

}

- (void)saveAssistantSyncDataPostedToWorkingStore
{
  void *v3;
  void *v4;
  id v5;
  _QWORD v6[5];
  id v7;

  +[HMDCoreData sharedInstance](HMDCoreData, "sharedInstance");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "contextWithRootPartition");
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  v6[0] = MEMORY[0x24BDAC760];
  v6[1] = 3221225472;
  v6[2] = __70__HMDHomeManager_Assistant__saveAssistantSyncDataPostedToWorkingStore__block_invoke;
  v6[3] = &unk_24E79C268;
  v6[4] = self;
  v7 = v4;
  v5 = v4;
  objc_msgSend(v5, "performBlock:", v6);

}

- (BOOL)shouldDropNotification
{
  void *v3;
  void *v4;
  id v5;
  _QWORD v7[5];
  id v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  char v13;

  v10 = 0;
  v11 = &v10;
  v12 = 0x2020000000;
  v13 = 0;
  +[HMDCoreData sharedInstance](HMDCoreData, "sharedInstance");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "contextWithRootPartition");
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  v7[0] = MEMORY[0x24BDAC760];
  v7[1] = 3221225472;
  v7[2] = __51__HMDHomeManager_Assistant__shouldDropNotification__block_invoke;
  v7[3] = &unk_24E79C0A8;
  v7[4] = self;
  v5 = v4;
  v8 = v5;
  v9 = &v10;
  objc_msgSend(v5, "unsafeSynchronousBlock:", v7);
  LOBYTE(v4) = *((_BYTE *)v11 + 24) == 0;

  _Block_object_dispose(&v10, 8);
  return (char)v4;
}

- (void)_resetSiriSyncNotification
{
  NSObject *v3;
  id v4;

  -[HMDHomeManager workQueue](self, "workQueue");
  v3 = objc_claimAutoreleasedReturnValue();
  dispatch_assert_queue_V2(v3);

  -[HMDHomeManager setSiriSyncNotificationTime:](self, "setSiriSyncNotificationTime:", 0);
  -[HMDHomeManager siriSyncNotificationReasons](self, "siriSyncNotificationReasons");
  v4 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "removeAllObjects");

}

- (void)writeAssistantCurrentHome:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  HMDHomeManager *v9;
  NSObject *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  int v15;
  void *v16;
  __int16 v17;
  void *v18;
  __int16 v19;
  void *v20;
  __int16 v21;
  void *v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  v4 = a3;
  v5 = (void *)MEMORY[0x24BDBCF48];
  objc_msgSend(v4, "urlString");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "URLWithString:", v6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  v8 = (void *)MEMORY[0x227676638]();
  v9 = self;
  HMFGetOSLogHandle();
  v10 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "name");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHomeManager currentHomeUUID](v9, "currentHomeUUID");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "UUIDString");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    v15 = 138544130;
    v16 = v11;
    v17 = 2112;
    v18 = v7;
    v19 = 2112;
    v20 = v12;
    v21 = 2112;
    v22 = v14;
    _os_log_impl(&dword_2218F0000, v10, OS_LOG_TYPE_INFO, "%{public}@Notifying assistant that current home updated to: %@ (%@/%@)", (uint8_t *)&v15, 0x2Au);

  }
  objc_autoreleasePoolPop(v8);
  -[HMDHomeManager _setHomeConfigurationKey:value:applicationIdentifier:](v9, "_setHomeConfigurationKey:value:applicationIdentifier:", *MEMORY[0x24BDD7C00], objc_msgSend(v7, "absoluteString"), CFSTR("com.apple.homed.notbackedup"));
  -[HMDHomeManager _setHomeConfigurationKey:value:applicationIdentifier:](v9, "_setHomeConfigurationKey:value:applicationIdentifier:", *MEMORY[0x24BDD7C08], objc_msgSend(v4, "name"), CFSTR("com.apple.homed.notbackedup"));
  notify_post("com.apple.homed.current-home.changed");

}

- (void)_handleAssistantSyncDataRequest:(id)a3
{
  id v4;
  NSObject *v5;
  void *v6;
  HMDHomeManager *v7;
  NSObject *v8;
  void *v9;
  uint64_t v10;
  __CFString *v11;
  void *v12;
  id v13;
  void *v14;
  void *v15;
  id v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  _QWORD aBlock[5];
  id v26;
  id v27;
  id v28;
  uint8_t v29[128];
  uint8_t buf[4];
  void *v31;
  uint64_t v32;

  v32 = *MEMORY[0x24BDAC8D0];
  v4 = a3;
  -[HMDHomeManager workQueue](self, "workQueue");
  v5 = objc_claimAutoreleasedReturnValue();
  dispatch_assert_queue_V2(v5);

  if (-[HMDHomeManager isDataSyncInProgressWithMessage:](self, "isDataSyncInProgressWithMessage:", v4))
  {
    v6 = (void *)MEMORY[0x227676638]();
    v7 = self;
    HMFGetOSLogHandle();
    v8 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v31 = v9;
      _os_log_impl(&dword_2218F0000, v8, OS_LOG_TYPE_INFO, "%{public}@Data sync in progress - do not sync data to Siri servers", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v6);
    objc_msgSend(v4, "respondWithPayload:", 0);
  }
  else
  {
    objc_msgSend(v4, "applicationBundleIdentifier");
    v10 = objc_claimAutoreleasedReturnValue();
    if (v10)
      v11 = (__CFString *)v10;
    else
      v11 = CFSTR("com.apple.homeutil");
    if ((hasAssistantHashingKeyChanged() & 1) != 0)
    {
      v12 = 0;
    }
    else
    {
      objc_msgSend(v4, "stringForKey:", *MEMORY[0x24BDD7E18]);
      v12 = (void *)objc_claimAutoreleasedReturnValue();
    }
    objc_initWeak((id *)buf, self);
    aBlock[0] = MEMORY[0x24BDAC760];
    aBlock[1] = 3221225472;
    aBlock[2] = __61__HMDHomeManager_Assistant___handleAssistantSyncDataRequest___block_invoke;
    aBlock[3] = &unk_24E798328;
    aBlock[4] = self;
    objc_copyWeak(&v28, (id *)buf);
    v13 = v12;
    v26 = v13;
    v27 = v4;
    v14 = _Block_copy(aBlock);
    v15 = v14;
    if (v13)
    {
      (*((void (**)(void *))v14 + 2))(v14);
    }
    else
    {
      isWatch();
      v16 = -[HMDHomeManager __generateAssistantTeamIdentifier](self, "__generateAssistantTeamIdentifier");
      -[HMDHomeManager _setAssistantSyncRequest:](self, "_setAssistantSyncRequest:", v11);
      v23 = 0u;
      v24 = 0u;
      v21 = 0u;
      v22 = 0u;
      -[HMDHomeManager homes](self, "homes", 0);
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      v18 = objc_msgSend(v17, "countByEnumeratingWithState:objects:count:", &v21, v29, 16);
      if (v18)
      {
        v19 = *(_QWORD *)v22;
        do
        {
          v20 = 0;
          do
          {
            if (*(_QWORD *)v22 != v19)
              objc_enumerationMutation(v17);
            objc_msgSend(*(id *)(*((_QWORD *)&v21 + 1) + 8 * v20++), "resetAccessoryHashedRouteIdentifiers");
          }
          while (v18 != v20);
          v18 = objc_msgSend(v17, "countByEnumeratingWithState:objects:count:", &v21, v29, 16);
        }
        while (v18);
      }

      -[HMDHomeManager _generateAssistantSyncDataAndIncrementVersion:requestSync:urgent:completion:](self, "_generateAssistantSyncDataAndIncrementVersion:requestSync:urgent:completion:", 1, 0, 0, v15);
    }

    objc_destroyWeak(&v28);
    objc_destroyWeak((id *)buf);

  }
}

void __61__HMDHomeManager_Assistant___handleAssistantSyncDataRequest___block_invoke(id *a1)
{
  void *v2;
  _QWORD v3[4];
  id v4;
  id v5;
  id v6;

  objc_msgSend(a1[4], "gatherer");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3[0] = MEMORY[0x24BDAC760];
  v3[1] = 3221225472;
  v3[2] = __61__HMDHomeManager_Assistant___handleAssistantSyncDataRequest___block_invoke_2;
  v3[3] = &unk_24E7945F0;
  objc_copyWeak(&v6, a1 + 7);
  v4 = a1[5];
  v5 = a1[6];
  objc_msgSend(v2, "getSyncEntityObjectsWithCompletionHandler:", v3);

  objc_destroyWeak(&v6);
}

void __61__HMDHomeManager_Assistant___handleAssistantSyncDataRequest___block_invoke_2(id *a1, void *a2)
{
  id v3;
  id WeakRetained;
  void *v5;
  NSObject *v6;
  _QWORD v7[5];
  id v8;
  id v9;
  id v10;

  v3 = a2;
  WeakRetained = objc_loadWeakRetained(a1 + 6);
  v5 = WeakRetained;
  if (WeakRetained)
  {
    objc_msgSend(WeakRetained, "workQueue");
    v6 = objc_claimAutoreleasedReturnValue();
    v7[0] = MEMORY[0x24BDAC760];
    v7[1] = 3221225472;
    v7[2] = __61__HMDHomeManager_Assistant___handleAssistantSyncDataRequest___block_invoke_3;
    v7[3] = &unk_24E79A910;
    v7[4] = v5;
    v8 = a1[4];
    v9 = v3;
    v10 = a1[5];
    dispatch_async(v6, v7);

  }
}

void __61__HMDHomeManager_Assistant___handleAssistantSyncDataRequest___block_invoke_3(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  id v6;
  NSObject *v7;
  void *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  uint64_t v17;
  void *v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  const __CFString *v29;
  uint64_t v30;
  uint8_t buf[4];
  void *v32;
  __int16 v33;
  uint64_t v34;
  __int16 v35;
  uint64_t v36;
  __int16 v37;
  void *v38;
  uint64_t v39;

  v39 = *MEMORY[0x24BDAC8D0];
  getLastSyncedAssistantConfigurationVersion();
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "unsignedIntegerValue");

  v4 = objc_msgSend(*(id *)(a1 + 32), "assistantGenerationCounter");
  v5 = (void *)MEMORY[0x227676638](objc_msgSend(*(id *)(a1 + 32), "__setLastSyncedAssistantConfigurationVersion:", v4));
  v6 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v7 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = *(_QWORD *)(a1 + 40);
    objc_msgSend(*(id *)(a1 + 32), "_getAssistantHashingData");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138544130;
    v32 = v8;
    v33 = 2112;
    v34 = v9;
    v35 = 2048;
    v36 = v4;
    v37 = 2112;
    v38 = v10;
    _os_log_impl(&dword_2218F0000, v7, OS_LOG_TYPE_INFO, "%{public}@Siri sync validity %@, assistantConfigurationVersion %tu - assistant identifier %@", buf, 0x2Au);

  }
  objc_autoreleasePoolPop(v5);
  v11 = *(_QWORD *)(a1 + 48);
  v29 = CFSTR("kSiriSyncDataEntitiesKey");
  v30 = v11;
  objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", &v30, &v29, 1);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 56), "respondWithPayload:", v12);
  v13 = *(void **)(a1 + 40);
  if (v13)
  {
    objc_msgSend(v13, "componentsSeparatedByString:", CFSTR(":"));
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v14, "firstObject");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    v16 = v15;
    if (v15)
      v17 = atoll((const char *)objc_msgSend(objc_retainAutorelease(v15), "cStringUsingEncoding:", 4));
    else
      v17 = 0;

  }
  else
  {
    v17 = 0;
  }
  objc_msgSend(*(id *)(a1 + 32), "siriSyncNotificationReasons");
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  v19 = (void *)objc_msgSend(v18, "copy");

  if (objc_msgSend(*(id *)(a1 + 32), "siriSyncNotificationTime"))
  {
    mach_absolute_time();
    v20 = UpTicksToMilliseconds();
    v21 = v20 - objc_msgSend(*(id *)(a1 + 32), "siriSyncNotificationTime");
  }
  else
  {
    v21 = 0;
  }
  +[HMDSiriSyncEvent syncRequestWithDuration:serverConfigurationVersion:configurationVersion:lastSyncedConfigurationVersion:notificationReasons:](HMDSiriSyncEvent, "syncRequestWithDuration:serverConfigurationVersion:configurationVersion:lastSyncedConfigurationVersion:notificationReasons:", v21, v17, v4, v3, v19);
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 32), "_resetSiriSyncNotification");
  if (objc_msgSend(*(id *)(a1 + 32), "assistantIdentifierChanged"))
  {
    objc_msgSend(*(id *)(a1 + 32), "setAssistantIdentifierChanged:", 0);
    v23 = *(void **)(a1 + 32);
    objc_msgSend(v23, "uuid");
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v23, "updateGenerationCounterWithReason:sourceUUID:shouldNotifyClients:", CFSTR("AssistantIdentifierChanged"), v24, 1);

  }
  objc_msgSend(*(id *)(a1 + 32), "logEventSubmitter");
  v25 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v25, "submitLogEvent:", v22);

  objc_msgSend(*(id *)(a1 + 32), "_signpostAssistantSyncDataRequestHandled");
  objc_msgSend(*(id *)(a1 + 32), "currentAccessorySetupMetricDispatcher");
  v26 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v26, "markSetupEndStage:error:", 8, 0);

  +[HMDHelper sharedHelper](HMDHelper, "sharedHelper");
  v27 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v27, "hashedRouteIDForIdentifier:", CFSTR("A77C551E-C3FA-414E-ACD8-A7DF3D64E9D6"));
  v28 = (void *)objc_claimAutoreleasedReturnValue();

  CFPreferencesSetAppValue(CFSTR("HMDAssistantLastHashingKey"), v28, CFSTR("com.apple.homed"));
  CFPreferencesAppSynchronize(CFSTR("com.apple.homed"));

}

void __51__HMDHomeManager_Assistant__shouldDropNotification__block_invoke(uint64_t a1)
{
  void *v2;
  id v3;
  NSObject *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  id v10;
  NSObject *v11;
  void *v12;
  int v13;
  void *v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v2 = (void *)MEMORY[0x227676638]();
  v3 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v13 = 138543362;
    v14 = v5;
    _os_log_impl(&dword_2218F0000, v4, OS_LOG_TYPE_INFO, "%{public}@Going to save first CK import finished to working store.", (uint8_t *)&v13, 0xCu);

  }
  objc_autoreleasePoolPop(v2);
  objc_msgSend(*(id *)(a1 + 40), "findHomeManagerWithError:", 0);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = v6;
  if (v6)
  {
    objc_msgSend(v6, "assistantSyncDataPosted");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = objc_msgSend(v8, "BOOLValue");

  }
  else
  {
    v9 = (void *)MEMORY[0x227676638]();
    v10 = *(id *)(a1 + 32);
    HMFGetOSLogHandle();
    v11 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      v13 = 138543362;
      v14 = v12;
      _os_log_impl(&dword_2218F0000, v11, OS_LOG_TYPE_ERROR, "%{public}@Missing mkfHomeManager", (uint8_t *)&v13, 0xCu);

    }
    objc_autoreleasePoolPop(v9);
  }

}

void __70__HMDHomeManager_Assistant__saveAssistantSyncDataPostedToWorkingStore__block_invoke(uint64_t a1)
{
  void *v2;
  id v3;
  NSObject *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  char v9;
  id v10;
  void *v11;
  id v12;
  NSObject *v13;
  NSObject *v14;
  void *v15;
  const char *v16;
  NSObject *v17;
  os_log_type_t v18;
  uint32_t v19;
  void *v20;
  id v21;
  NSObject *v22;
  void *v23;
  id v24;
  uint8_t buf[4];
  void *v26;
  __int16 v27;
  id v28;
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  v2 = (void *)MEMORY[0x227676638]();
  v3 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543362;
    v26 = v5;
    _os_log_impl(&dword_2218F0000, v4, OS_LOG_TYPE_INFO, "%{public}@Going to save first CK import finished to working store.", buf, 0xCu);

  }
  objc_autoreleasePoolPop(v2);
  objc_msgSend(*(id *)(a1 + 40), "findHomeManagerWithError:", 0);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = v6;
  if (v6)
  {
    objc_msgSend(v6, "setAssistantSyncDataPosted:", MEMORY[0x24BDBD1C8]);
    v8 = *(void **)(a1 + 40);
    v24 = 0;
    v9 = objc_msgSend(v8, "save:", &v24);
    v10 = v24;
    v11 = (void *)MEMORY[0x227676638]();
    v12 = *(id *)(a1 + 32);
    HMFGetOSLogHandle();
    v13 = objc_claimAutoreleasedReturnValue();
    v14 = v13;
    if ((v9 & 1) != 0)
    {
      if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v15 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543362;
        v26 = v15;
        v16 = "%{public}@Successfully saved the assistant sync data posted flag.";
        v17 = v14;
        v18 = OS_LOG_TYPE_INFO;
        v19 = 12;
LABEL_12:
        _os_log_impl(&dword_2218F0000, v17, v18, v16, buf, v19);

      }
    }
    else if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v26 = v15;
      v27 = 2112;
      v28 = v10;
      v16 = "%{public}@Unable to store the assistant sync data posted flag : %@";
      v17 = v14;
      v18 = OS_LOG_TYPE_ERROR;
      v19 = 22;
      goto LABEL_12;
    }

    objc_autoreleasePoolPop(v11);
    goto LABEL_14;
  }
  v20 = (void *)MEMORY[0x227676638]();
  v21 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v22 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
  {
    HMFGetLogIdentifier();
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543362;
    v26 = v23;
    _os_log_impl(&dword_2218F0000, v22, OS_LOG_TYPE_ERROR, "%{public}@Missing mkfHomeManager", buf, 0xCu);

  }
  objc_autoreleasePoolPop(v20);
LABEL_14:

}

void __53__HMDHomeManager_Assistant__hh2FirstCKImportFinished__block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  NSObject *v5;
  uint64_t v6;
  _QWORD block[5];

  objc_msgSend(*(id *)(a1 + 32), "findHomeManagerWithError:", 0);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  if (v2)
  {
    v3 = v2;
    objc_msgSend(v2, "assistantSyncDataPosted");
    v4 = (void *)objc_claimAutoreleasedReturnValue();

    if (!v4)
    {
      if (!objc_msgSend(*(id *)(a1 + 40), "siriSyncNotificationTime"))
      {
        mach_absolute_time();
        objc_msgSend(*(id *)(a1 + 40), "setSiriSyncNotificationTime:", UpTicksToMilliseconds());
      }
      objc_msgSend(*(id *)(a1 + 40), "workQueue");
      v5 = objc_claimAutoreleasedReturnValue();
      block[0] = MEMORY[0x24BDAC760];
      block[1] = 3221225472;
      block[2] = __53__HMDHomeManager_Assistant__hh2FirstCKImportFinished__block_invoke_2;
      block[3] = &unk_24E79C240;
      block[4] = *(_QWORD *)(a1 + 40);
      dispatch_async(v5, block);

    }
  }
  else
  {
    v6 = _HMFPreconditionFailure();
    __53__HMDHomeManager_Assistant__hh2FirstCKImportFinished__block_invoke_2(v6);
  }
}

uint64_t __53__HMDHomeManager_Assistant__hh2FirstCKImportFinished__block_invoke_2(uint64_t a1)
{
  void *v2;
  id v3;
  NSObject *v4;
  void *v5;
  void *v6;
  _QWORD v8[5];
  uint8_t buf[4];
  void *v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  v2 = (void *)MEMORY[0x227676638]();
  v3 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543362;
    v10 = v5;
    _os_log_impl(&dword_2218F0000, v4, OS_LOG_TYPE_INFO, "%{public}@Posting an urgent sync notification after first HH2 cloudkit import", buf, 0xCu);

  }
  objc_autoreleasePoolPop(v2);
  v6 = *(void **)(a1 + 32);
  v8[0] = MEMORY[0x24BDAC760];
  v8[1] = 3221225472;
  v8[2] = __53__HMDHomeManager_Assistant__hh2FirstCKImportFinished__block_invoke_19;
  v8[3] = &unk_24E79C240;
  v8[4] = v6;
  return objc_msgSend(v6, "_generateAssistantSyncDataAndIncrementVersion:requestSync:urgent:completion:", 1, 1, 1, v8);
}

uint64_t __53__HMDHomeManager_Assistant__hh2FirstCKImportFinished__block_invoke_19(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "saveAssistantSyncDataPostedToWorkingStore");
}

void __105__HMDHomeManager_Assistant___generateAssistantSyncDataAndIncrementVersion_requestSync_urgent_completion___block_invoke(uint64_t a1, uint64_t a2)
{
  id WeakRetained;
  uint64_t v5;
  void *v6;
  void *v7;
  id v8;
  NSObject *v9;
  void *v10;
  uint64_t v11;
  const char *v12;
  void *v13;
  id v14;
  NSObject *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  void *v20;
  __int16 v21;
  uint64_t v22;
  __int16 v23;
  uint64_t v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  objc_msgSend(WeakRetained, "writeAssistantCurrentHome:", *(_QWORD *)(a1 + 32));
  v5 = objc_msgSend(WeakRetained, "_setHomekitAssistantNumEntities:", a2);
  if (*(_BYTE *)(a1 + 64))
  {
    objc_msgSend(WeakRetained, "currentAccessorySetupMetricDispatcher");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "markSetupBeginStage:error:", 8, 0);

    v7 = (void *)MEMORY[0x227676638]();
    v8 = WeakRetained;
    HMFGetOSLogHandle();
    v9 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      v11 = *(_QWORD *)(a1 + 40);
      v19 = 138543874;
      v20 = v10;
      v21 = 2112;
      v22 = v11;
      v23 = 2048;
      v24 = objc_msgSend(v8, "assistantGenerationCounter");
      _os_log_impl(&dword_2218F0000, v9, OS_LOG_TYPE_INFO, "%{public}@Generated sync data and posted sync data changed notification due to reason %@: %tu", (uint8_t *)&v19, 0x20u);

    }
    objc_autoreleasePoolPop(v7);
    if (*(_BYTE *)(a1 + 65))
      v12 = "com.apple.assistant.sync_homekit_urgent";
    else
      v12 = "com.apple.assistant.sync_homekit_now";
    notify_post(v12);
    objc_msgSend(v8, "_signpostAssistantSyncDataNotification");
  }
  else
  {
    v13 = (void *)MEMORY[0x227676638](v5);
    v14 = WeakRetained;
    HMFGetOSLogHandle();
    v15 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      v17 = *(_QWORD *)(a1 + 40);
      v19 = 138543874;
      v20 = v16;
      v21 = 2112;
      v22 = v17;
      v23 = 2048;
      v24 = objc_msgSend(v14, "assistantGenerationCounter");
      _os_log_impl(&dword_2218F0000, v15, OS_LOG_TYPE_INFO, "%{public}@Generated sync data due to reason(s) %@: %tu", (uint8_t *)&v19, 0x20u);

    }
    objc_autoreleasePoolPop(v13);
  }
  v18 = *(_QWORD *)(a1 + 48);
  if (v18)
    (*(void (**)(void))(v18 + 16))();
  objc_msgSend(WeakRetained, "setPostSyncDataUpdatedNotification:", 1);

}

- (void)initHomeManagerStartup
{
  void *v3;
  id v4;

  v4 = 0;
  objc_msgSend(MEMORY[0x24BE3F180], "futureWithPromise:", &v4);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHomeManager setStartupCompleted:](self, "setStartupCompleted:", v3);

  -[HMDHomeManager setStartupPromise:](self, "setStartupPromise:", v4);
}

- (void)performInitialGraphLoad:(id)a3
{
  id v4;
  uint64_t v5;
  double v6;
  double v7;
  void *v8;
  HMDHomeManager *v9;
  NSObject *v10;
  void *v11;
  void *v12;
  id v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  HMDHomeManager *v19;
  NSObject *v20;
  void *v21;
  void *v22;
  HMDHomeManager *v23;
  NSObject *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  id v29;
  void *v30;
  HMDHomeManager *v31;
  NSObject *v32;
  void *v33;
  void *v34;
  void *v35;
  id v36;
  void *v37;
  void *v38;
  void *v39;
  HMDHomeManager *v40;
  NSObject *v41;
  void *v42;
  void *v43;
  double v44;
  void *v45;
  void *v46;
  id v47;
  void *v48;
  double v49;
  void *v50;
  void *v51;
  void *v52;
  void *v53;
  void *v54;
  _BYTE buf[24];
  const __CFString *v56;
  _BYTE v57[20];
  __int16 v58;
  const __CFString *v59;
  __int16 v60;
  void *v61;
  const __CFString *v62;
  const __CFString *v63;
  uint8_t v64[4];
  void *v65;
  __int16 v66;
  void *v67;
  uint64_t v68;

  v68 = *MEMORY[0x24BDAC8D0];
  v4 = a3;
  v5 = HMFUptime();
  v7 = v6;
  v8 = (void *)MEMORY[0x227676638](v5);
  v9 = self;
  HMFGetOSLogHandle();
  v10 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138544386;
    *(_QWORD *)&buf[4] = v11;
    *(_WORD *)&buf[12] = 2114;
    *(_QWORD *)&buf[14] = CFSTR("homeManagerInitStart");
    *(_WORD *)&buf[22] = 2112;
    v56 = CFSTR("Starting replay of all models in the home graph");
    *(_WORD *)v57 = 2114;
    *(_QWORD *)&v57[2] = CFSTR("state");
    *(_WORD *)&v57[10] = 2112;
    *(_QWORD *)&v57[12] = CFSTR("homeManagerLoadingInitialGraph");
    _os_log_impl(&dword_2218F0000, v10, OS_LOG_TYPE_INFO, "%{public}@tag=\"%{public}@\" desc=\"%@\" %{public}@=\"%@\", buf, 0x34u);

  }
  objc_autoreleasePoolPop(v8);
  objc_msgSend(MEMORY[0x24BE4F1C0], "sharedInstance");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  v13 = objc_alloc(MEMORY[0x24BE4F1D0]);
  v62 = CFSTR("state");
  v63 = CFSTR("homeManagerLoadingInitialGraph");
  objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", &v63, &v62, 1);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  v15 = (void *)objc_msgSend(v13, "initWithTag:data:", CFSTR("homeManagerInitStart"), v14);
  objc_msgSend(MEMORY[0x24BE3F138], "currentTagProcessorList");
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v12, "submitTaggedEvent:processorList:", v15, v16);

  -[HMDHomeManager backingStore](v9, "backingStore");
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v17, "cdlsReplayAllModelsStartingAt:isInitialGraphLoad:", v4, 1);

  v18 = (void *)MEMORY[0x227676638]();
  v19 = v9;
  HMFGetOSLogHandle();
  v20 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG))
  {
    HMFGetLogIdentifier();
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543362;
    *(_QWORD *)&buf[4] = v21;
    _os_log_impl(&dword_2218F0000, v20, OS_LOG_TYPE_DEBUG, "%{public}@Replay of all models in the home graph, resolving startup future.", buf, 0xCu);

  }
  objc_autoreleasePoolPop(v18);
  v54 = v4;
  if (v19)
  {
    v22 = (void *)MEMORY[0x227676638]();
    v23 = v19;
    HMFGetOSLogHandle();
    v24 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v24, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v25 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      *(_QWORD *)&buf[4] = v25;
      _os_log_impl(&dword_2218F0000, v24, OS_LOG_TYPE_INFO, "%{public}@Loading locally persisted incoming invitations", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v22);
    objc_msgSend(MEMORY[0x24BDBCEB8], "array");
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHomeManager backingStore](v23, "backingStore");
    v27 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v27, "context");
    v28 = (void *)objc_claimAutoreleasedReturnValue();
    *(_QWORD *)buf = MEMORY[0x24BDAC760];
    *(_QWORD *)&buf[8] = 3221225472;
    *(_QWORD *)&buf[16] = __50__HMDHomeManager_Startup__loadIncomingInvitations__block_invoke;
    v56 = (const __CFString *)&unk_24E79C268;
    *(_QWORD *)v57 = v23;
    v29 = v26;
    *(_QWORD *)&v57[8] = v29;
    objc_msgSend(v28, "unsafeSynchronousBlock:", buf);

    v30 = (void *)MEMORY[0x227676638]();
    v31 = v23;
    HMFGetOSLogHandle();
    v32 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v32, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v33 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedInteger:", objc_msgSend(v29, "count"));
      v34 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)v64 = 138543618;
      v65 = v33;
      v66 = 2112;
      v67 = v34;
      _os_log_impl(&dword_2218F0000, v32, OS_LOG_TYPE_INFO, "%{public}@Loaded %@ incoming invitations", v64, 0x16u);

    }
    objc_autoreleasePoolPop(v30);
    v35 = *(void **)&v57[8];
    v36 = v29;

  }
  else
  {
    v36 = 0;
  }
  -[HMDHomeManager setIncomingInvitations:](v19, "setIncomingInvitations:", v36);

  -[HMDHomeManager startupPromise](v19, "startupPromise");
  v37 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x24BE3F180], "futureWithNoValue");
  v38 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v37, "resolveWithFuture:", v38);

  v39 = (void *)MEMORY[0x227676638]();
  v40 = v19;
  HMFGetOSLogHandle();
  v41 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v41, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v42 = (void *)objc_claimAutoreleasedReturnValue();
    v43 = (void *)MEMORY[0x24BDD17C8];
    HMFUptime();
    objc_msgSend(v43, "stringWithFormat:", CFSTR("%.3f"), v44 - v7);
    v45 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138544898;
    *(_QWORD *)&buf[4] = v42;
    *(_WORD *)&buf[12] = 2114;
    *(_QWORD *)&buf[14] = CFSTR("homeManagerInitStart");
    *(_WORD *)&buf[22] = 2112;
    v56 = CFSTR("Loaded initial home graph.");
    *(_WORD *)v57 = 2114;
    *(_QWORD *)&v57[2] = CFSTR("state");
    *(_WORD *)&v57[10] = 2112;
    *(_QWORD *)&v57[12] = CFSTR("homeManagerLoadedInitialGraph");
    v58 = 2114;
    v59 = CFSTR("duration");
    v60 = 2112;
    v61 = v45;
    _os_log_impl(&dword_2218F0000, v41, OS_LOG_TYPE_INFO, "%{public}@tag=\"%{public}@\" desc=\"%@\" %{public}@=\"%@\" %{public}@=\"%@\", buf, 0x48u);

  }
  objc_autoreleasePoolPop(v39);
  objc_msgSend(MEMORY[0x24BE4F1C0], "sharedInstance");
  v46 = (void *)objc_claimAutoreleasedReturnValue();
  v47 = objc_alloc(MEMORY[0x24BE4F1D0]);
  v48 = (void *)MEMORY[0x24BDD17C8];
  HMFUptime();
  objc_msgSend(v48, "stringWithFormat:", CFSTR("%.3f"), v49 - v7);
  v50 = (void *)objc_claimAutoreleasedReturnValue();
  HMDTaggedLoggingCreateDictionary();
  v51 = (void *)objc_claimAutoreleasedReturnValue();
  v52 = (void *)objc_msgSend(v47, "initWithTag:data:", CFSTR("homeManagerInitStart"), v51, CFSTR("state"), CFSTR("homeManagerLoadedInitialGraph"), CFSTR("duration"), v50);
  objc_msgSend(MEMORY[0x24BE3F138], "currentTagProcessorList");
  v53 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v46, "submitTaggedEvent:processorList:", v52, v53);

}

void __50__HMDHomeManager_Startup__loadIncomingInvitations__block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  void *v7;
  id v8;
  _QWORD v9[5];
  id v10;

  +[HMCContext currentContext](HMCContext, "currentContext");
  v8 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "findHomeManagerWithError:", 0);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  if (v2)
  {
    v3 = v2;
    objc_msgSend(v2, "incomingInvitations");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    v9[0] = MEMORY[0x24BDAC760];
    v9[1] = 3221225472;
    v9[2] = __50__HMDHomeManager_Startup__loadIncomingInvitations__block_invoke_2;
    v9[3] = &unk_24E78C420;
    v5 = *(void **)(a1 + 40);
    v9[4] = *(_QWORD *)(a1 + 32);
    v10 = v5;
    objc_msgSend(v4, "hmf_enumerateWithAutoreleasePoolUsingBlock:", v9);

    objc_msgSend(v8, "rollback");
  }
  else
  {
    v6 = _HMFPreconditionFailure();
    __50__HMDHomeManager_Startup__loadIncomingInvitations__block_invoke_2(v6, v7);
  }
}

void __50__HMDHomeManager_Startup__loadIncomingInvitations__block_invoke_2(uint64_t a1, void *a2)
{
  id v2;
  id v3;
  void *v4;
  uint64_t v5;
  id v6;
  void *v7;
  void *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  HMDAccount *v12;
  void *v13;
  uint64_t v14;
  HMDIncomingHomeInvitation *v15;
  void *v16;
  void *v17;
  uint64_t v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  HMDIncomingHomeInvitation *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  id v34;
  void *v35;
  id v36;
  NSObject *v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  void *v43;
  void *v44;
  id v45;
  uint8_t buf[4];
  void *v47;
  __int16 v48;
  id v49;
  _QWORD v50[2];

  v50[1] = *MEMORY[0x24BDAC8D0];
  v2 = a2;
  v3 = objc_alloc(MEMORY[0x24BE3F230]);
  objc_msgSend(v2, "inviterPairingPublicKey");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v3, "initWithPairingKeyData:", v4);

  v6 = objc_alloc(MEMORY[0x24BE3F228]);
  objc_msgSend(v2, "inviterPairingIdentifier");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v43 = (void *)v5;
  v44 = (void *)objc_msgSend(v6, "initWithIdentifier:publicKey:privateKey:", v7, v5, 0);

  objc_msgSend(v2, "inviterUserID");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  +[HMDAccountHandle accountHandleForDestination:](HMDAccountHandle, "accountHandleForDestination:", v8);
  v9 = objc_claimAutoreleasedReturnValue();

  objc_msgSend(v2, "inviterMergeID");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  +[HMDAccountIdentifier accountIdentifierForSenderCorrelationIdentifier:](HMDAccountIdentifier, "accountIdentifierForSenderCorrelationIdentifier:", v10);
  v11 = objc_claimAutoreleasedReturnValue();

  v12 = [HMDAccount alloc];
  v41 = (void *)v9;
  v50[0] = v9;
  objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", v50, 1);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  v40 = (void *)v11;
  v14 = -[HMDAccount initWithIdentifier:handles:devices:](v12, "initWithIdentifier:handles:devices:", v11, v13, MEMORY[0x24BDBD1A8]);

  v15 = [HMDIncomingHomeInvitation alloc];
  objc_msgSend(v2, "modelID");
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "invitationState");
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  v18 = objc_msgSend(v17, "integerValue");
  objc_msgSend(v2, "homeName");
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "homeModelID");
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "inviterMergeID");
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "expiryDate");
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  v39 = (void *)v14;
  v23 = -[HMDIncomingHomeInvitation initWithInviterAccount:invitationIdentifier:invitationState:homeName:homeUUID:inviterIdentity:inviterMergeID:expiryDate:](v15, "initWithInviterAccount:invitationIdentifier:invitationState:homeName:homeUUID:inviterIdentity:inviterMergeID:expiryDate:", v14, v16, v18, v19, v20, v44, v21, v22);

  objc_msgSend(v2, "idsIdentifier");
  v24 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHomeInvitation setIdsInvitationUUID:](v23, "setIdsInvitationUUID:", v24);

  objc_msgSend(v2, "shareURL");
  v25 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHomeInvitation setShareURL:](v23, "setShareURL:", v25);

  +[HMDCoreData featuresDataSource](HMDCoreData, "featuresDataSource");
  v26 = (void *)objc_claimAutoreleasedReturnValue();
  LODWORD(v17) = objc_msgSend(v26, "isRestrictedGuestEnabled");

  if ((_DWORD)v17)
  {
    objc_msgSend(v2, "homeHasCameras");
    v27 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDIncomingHomeInvitation setHomeHasCameras:](v23, "setHomeHasCameras:", objc_msgSend(v27, "BOOLValue"));

    objc_msgSend(v2, "inviteePrivilege");
    v28 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDIncomingHomeInvitation setInviteePrivilege:](v23, "setInviteePrivilege:", objc_msgSend(v28, "integerValue"));

    objc_msgSend(v2, "restrictedGuestSchedule");
    v29 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDIncomingHomeInvitation setRestrictedGuestSchedule:](v23, "setRestrictedGuestSchedule:", v29);

  }
  v30 = (void *)MEMORY[0x24BDD1620];
  objc_msgSend(MEMORY[0x24BDBCF20], "setWithObject:", objc_opt_class());
  v31 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "shareToken");
  v32 = (void *)objc_claimAutoreleasedReturnValue();
  v45 = 0;
  objc_msgSend(v30, "_strictlyUnarchivedObjectOfClasses:fromData:error:", v31, v32, &v45);
  v33 = (void *)objc_claimAutoreleasedReturnValue();
  v34 = v45;

  if (v34)
  {
    v35 = (void *)MEMORY[0x227676638]();
    v36 = *(id *)(a1 + 32);
    HMFGetOSLogHandle();
    v37 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v37, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v38 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v47 = v38;
      v48 = 2112;
      v49 = v34;
      _os_log_impl(&dword_2218F0000, v37, OS_LOG_TYPE_ERROR, "%{public}@Unarchive share token from store failed with error %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v35);
  }
  -[HMDHomeInvitation setShareToken:](v23, "setShareToken:", v33);
  objc_msgSend(*(id *)(a1 + 40), "addObject:", v23);

}

- (BOOL)isCurrentDeviceResident
{
  void *v2;
  BOOL v3;

  -[HMDHomeManager _accessoryOfCurrentDevice](self, "_accessoryOfCurrentDevice");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = v2 != 0;

  return v3;
}

- (BOOL)deviceAddressBelongsToResidentOfCurrentHome:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t i;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  char v21;
  BOOL v22;
  void *v24;
  void *v25;
  id obj;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  _BYTE v32[128];
  uint64_t v33;

  v33 = *MEMORY[0x24BDAC8D0];
  v4 = a3;
  -[HMDHomeManager _accessoryOfCurrentDevice](self, "_accessoryOfCurrentDevice");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = v5;
  if (v5)
  {
    objc_msgSend(v5, "home");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = v7;
    if (v7)
    {
      v30 = 0u;
      v31 = 0u;
      v28 = 0u;
      v29 = 0u;
      objc_msgSend(v7, "residentDeviceManager");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v9, "residentDevices");
      v10 = (void *)objc_claimAutoreleasedReturnValue();

      obj = v10;
      v11 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v28, v32, 16);
      if (v11)
      {
        v12 = v11;
        v27 = *(_QWORD *)v29;
        v24 = v8;
        v25 = v6;
        while (2)
        {
          for (i = 0; i != v12; ++i)
          {
            if (*(_QWORD *)v29 != v27)
              objc_enumerationMutation(obj);
            v14 = *(void **)(*((_QWORD *)&v28 + 1) + 8 * i);
            objc_msgSend(v4, "idsIdentifier", v24, v25);
            v15 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v14, "messageAddress");
            v16 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v16, "idsIdentifier");
            v17 = (void *)objc_claimAutoreleasedReturnValue();
            if (objc_msgSend(v15, "isEqual:", v17))
            {

LABEL_17:
              v22 = 1;
              v8 = v24;
              v6 = v25;
              goto LABEL_18;
            }
            objc_msgSend(v4, "idsDestination");
            v18 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v14, "messageAddress");
            v19 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v19, "idsDestination");
            v20 = (void *)objc_claimAutoreleasedReturnValue();
            v21 = objc_msgSend(v18, "isEqualToString:", v20);

            if ((v21 & 1) != 0)
              goto LABEL_17;
          }
          v12 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v28, v32, 16);
          v22 = 0;
          v8 = v24;
          v6 = v25;
          if (v12)
            continue;
          break;
        }
      }
      else
      {
        v22 = 0;
      }
LABEL_18:

    }
    else
    {
      v22 = 0;
    }

  }
  else
  {
    v22 = 0;
  }

  return v22;
}

- (id)multiUserSettingsForMultiUserSettingsMetricsEventDispatcherDataSource
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t i;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  id obj;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  _BYTE v33[128];
  uint64_t v34;

  v34 = *MEMORY[0x24BDAC8D0];
  -[HMDHomeManager homes](self, "homes");
  v29 = 0u;
  v30 = 0u;
  v31 = 0u;
  v32 = 0u;
  obj = (id)objc_claimAutoreleasedReturnValue();
  v25 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v29, v33, 16);
  if (v25)
  {
    v27 = 0;
    v28 = 0;
    v26 = 0;
    v2 = 0;
    v3 = 0;
    v4 = 0;
    v5 = 0;
    v6 = 0;
    v7 = 0;
    v8 = 0;
    v24 = *(_QWORD *)v30;
    do
    {
      for (i = 0; i != v25; ++i)
      {
        if (*(_QWORD *)v30 != v24)
          objc_enumerationMutation(obj);
        objc_msgSend(*(id *)(*((_QWORD *)&v29 + 1) + 8 * i), "multiUserSettings");
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v10, "numSharedUsers");
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        v8 += objc_msgSend(v11, "unsignedIntValue");

        objc_msgSend(v10, "numUsersWithSettings");
        v12 = (void *)objc_claimAutoreleasedReturnValue();
        v7 += objc_msgSend(v12, "unsignedIntValue");

        objc_msgSend(v10, "numUsersWithIdentifyVoiceOff");
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        v6 += objc_msgSend(v13, "unsignedIntValue");

        objc_msgSend(v10, "numUsersWithPlayBackInfluencesForYouOff");
        v14 = (void *)objc_claimAutoreleasedReturnValue();
        v5 += objc_msgSend(v14, "unsignedIntValue");

        objc_msgSend(v10, "numUsersCloudShareTrustNotConfigured");
        v15 = (void *)objc_claimAutoreleasedReturnValue();
        v28 += objc_msgSend(v15, "unsignedIntValue");

        objc_msgSend(v10, "numUsersSharedBackingStoreNotStarted");
        v16 = (void *)objc_claimAutoreleasedReturnValue();
        v27 += objc_msgSend(v16, "unsignedIntValue");

        objc_msgSend(v10, "numUsersSharedBackingStoreRunning");
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        v26 += objc_msgSend(v17, "unsignedIntValue");

        objc_msgSend(v10, "numUsersSharedBackingStoreNotRunningDueToError");
        v18 = (void *)objc_claimAutoreleasedReturnValue();
        v2 += objc_msgSend(v18, "unsignedIntValue");

        objc_msgSend(v10, "numUsersSharedBackingStoreNotRunningDueToStopped");
        v19 = (void *)objc_claimAutoreleasedReturnValue();
        v3 += objc_msgSend(v19, "unsignedIntValue");

        objc_msgSend(v10, "numUsersSharedBackingStoreSharedZoneWaitingForShareInvitation");
        v20 = (void *)objc_claimAutoreleasedReturnValue();
        v4 += objc_msgSend(v20, "unsignedIntValue");

      }
      v25 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v29, v33, 16);
    }
    while (v25);
  }
  else
  {
    v27 = 0;
    v28 = 0;
    v26 = 0;
    v2 = 0;
    v3 = 0;
    v4 = 0;
    v5 = 0;
    v6 = 0;
    v7 = 0;
    v8 = 0;
  }
  v21 = (void *)objc_msgSend(objc_alloc(MEMORY[0x24BDD7800]), "initWithNumSharedUsers:numUsersWithSettings:numUsersWithIdentifyVoiceOff:numUsersWithPlayBackInfluencesForYouOff:numUsersCloudShareTrustNotConfigured:numUsersSharedBackingStoreNotStarted:numUsersSharedBackingStoreRunning:numUsersSharedBackingStoreNotRunningDueToError:numUsersSharedBackingStoreNotRunningDueToStopped:numUsersSharedBackingStoreSharedZoneWaitingForShareInvitation:", v8, v7, v6, v5, v28, v27, v26, v2, v3, v4);

  return v21;
}

- (void)_handleResetConfiguration:(id)a3
{
  id v4;
  uint64_t v5;
  void *v6;
  id v7;

  v4 = a3;
  +[HMDResetConfigPostCleanup writePostCleanupRecordWithReason:steps:](HMDResetConfigPostCleanup, "writePostCleanupRecordWithReason:steps:", 1, -1);
  +[HMDHH2FrameworkSwitch setHH2EnablementPreferenceKey:](HMDHH2FrameworkSwitch, "setHH2EnablementPreferenceKey:", 0);
  v5 = objc_msgSend(v4, "BOOLForKey:", CFSTR("kResetConfigMetadataKey"));
  v6 = (void *)objc_msgSend(objc_alloc(MEMORY[0x24BE3F138]), "initWithName:parent:options:", CFSTR("Reset Config"), 0, 1);
  objc_msgSend(v6, "begin");
  v7 = v6;
  -[HMDHomeManager resetHomeConfigForHH2:message:](self, "resetHomeConfigForHH2:message:", v5, v4);
  __HMFActivityScopeLeave();

}

- (void)_eraseConfiguration:(BOOL)a3 completionHandler:(id)a4
{
  _BOOL8 v4;
  id v6;
  void *v7;
  NSObject *v8;
  void *v9;
  void *v10;
  id v11;
  _QWORD v12[4];
  id v13;
  uint8_t buf[4];
  void *v15;
  uint64_t v16;

  v4 = a3;
  v16 = *MEMORY[0x24BDAC8D0];
  v6 = a4;
  v7 = (void *)MEMORY[0x227676638]();
  HMFGetOSLogHandle();
  v8 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543362;
    v15 = v9;
    _os_log_impl(&dword_2218F0000, v8, OS_LOG_TYPE_INFO, "%{public}@[Reset Config] : Resetting local configuration for all homes and all devices", buf, 0xCu);

  }
  objc_autoreleasePoolPop(v7);
  -[HMDHomeManager workQueue](self, "workQueue");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v12[0] = MEMORY[0x24BDAC760];
  v12[1] = 3221225472;
  v12[2] = __69__HMDHomeManager_ResetConfig___eraseConfiguration_completionHandler___block_invoke;
  v12[3] = &unk_24E7935F0;
  v13 = v6;
  v11 = v6;
  -[HMDHomeManager _eraseLocalHomeConfigurationAndDeleteMetadata:completionQueue:completion:](self, "_eraseLocalHomeConfigurationAndDeleteMetadata:completionQueue:completion:", v4, v10, v12);

}

- (void)_eraseLocalHomeConfigurationWithReason:(unint64_t)a3
{
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t i;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  HMDHomeManager *v20;
  NSObject *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  HMDHomeManager *v36;
  NSObject *v37;
  void *v38;
  void *v39;
  char v40;
  void *v41;
  HMDHomeManager *v42;
  NSObject *v43;
  NSObject *v44;
  void *v45;
  const char *v46;
  NSObject *v47;
  os_log_type_t v48;
  HMDHomeManager *v49;
  id v51;
  void *v52;
  id v53;
  id v54;
  _QWORD v55[4];
  id v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  id v61;
  _BYTE buf[12];
  __int16 v63;
  unint64_t v64;
  _BYTE v65[128];
  uint64_t v66;

  v66 = *MEMORY[0x24BDAC8D0];
  +[HMDHomeManager _eraseAllAccessoryKeysAndIdentifiers](HMDHomeManager, "_eraseAllAccessoryKeysAndIdentifiers");
  -[HMDHomeManager messageDispatcher](self, "messageDispatcher");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "reset");

  -[HMDHomeManager identityRegistry](self, "identityRegistry");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "reset");

  -[HMDHomeManager accountRegistry](self, "accountRegistry");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "reset");

  objc_msgSend(MEMORY[0x24BE1BC08], "systemStore");
  v61 = 0;
  v52 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v52, "updateCurrentiCloudIdentifier:controllerPairingIdentifier:error:", 0, 0, &v61);
  v51 = v61;
  v7 = (void *)MEMORY[0x24BDBCEB8];
  -[HMDHomeManager homes](self, "homes");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "arrayWithCapacity:", objc_msgSend(v8, "count"));
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  v59 = 0u;
  v60 = 0u;
  v57 = 0u;
  v58 = 0u;
  v49 = self;
  -[HMDHomeManager homes](self, "homes");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v11 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v57, v65, 16);
  if (v11)
  {
    v12 = v11;
    v13 = *(_QWORD *)v58;
    v14 = MEMORY[0x24BDAC760];
    do
    {
      for (i = 0; i != v12; ++i)
      {
        if (*(_QWORD *)v58 != v13)
          objc_enumerationMutation(v10);
        v16 = *(void **)(*((_QWORD *)&v57 + 1) + 8 * i);
        *(_QWORD *)buf = 0;
        objc_msgSend(MEMORY[0x24BE3F180], "futureWithPromise:", buf);
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        v55[0] = v14;
        v55[1] = 3221225472;
        v55[2] = __70__HMDHomeManager_ResetConfig___eraseLocalHomeConfigurationWithReason___block_invoke;
        v55[3] = &unk_24E79C240;
        v56 = *(id *)buf;
        objc_msgSend(v16, "stopThreadNetworkWithCompletion:completion:", 1, v55);
        objc_msgSend(v9, "addObject:", v17);
        objc_msgSend(v16, "resetConfiguration");

      }
      v12 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v57, v65, 16);
    }
    while (v12);
  }

  -[HMDHomeManager setHomes:](v49, "setHomes:", MEMORY[0x24BDBD1A8]);
  -[HMDHomeManager accessoryBrowserInternal](v49, "accessoryBrowserInternal");
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v18, "resetConfiguration");

  v19 = (void *)MEMORY[0x227676638]();
  v20 = v49;
  HMFGetOSLogHandle();
  v21 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
  {
    HMFGetLogIdentifier();
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543618;
    *(_QWORD *)&buf[4] = v22;
    v63 = 2048;
    v64 = a3;
    _os_log_impl(&dword_2218F0000, v21, OS_LOG_TYPE_DEFAULT, "%{public}@_eraseLocalHomeConfigurationWithReason: ==== reason is... %lu", buf, 0x16u);

  }
  objc_autoreleasePoolPop(v19);
  +[HMDPersistentStore resetConfiguration:](HMDPersistentStore, "resetConfiguration:", a3);
  -[HMDHomeManager lastEventStore](v20, "lastEventStore");
  v23 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v23, "resetEventStore");

  -[HMDHomeManager cloudZones](v20, "cloudZones");
  v24 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v24, "removeAllObjects");

  -[HMDHomeManager setAppData:](v20, "setAppData:", 0);
  -[HMDHomeManager pendingResponsesForAccessoryFinder](v20, "pendingResponsesForAccessoryFinder");
  v25 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v25, "removeAllObjects");

  -[HMDHomeManager associatedRemotePeers](v20, "associatedRemotePeers");
  v26 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v26, "removeAllObjects");

  -[HMDHomeManager unassociatedRemotePeers](v20, "unassociatedRemotePeers");
  v27 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v27, "removeAllObjects");

  -[HMDHomeManager pendingRemoteSessions](v20, "pendingRemoteSessions");
  v28 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v28, "removeAllObjects");

  -[HMDHomeManager pendingResidentSetupSessions](v20, "pendingResidentSetupSessions");
  v29 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v29, "removeAllObjects");

  -[HMDHomeManager uuidsOfRemovedHomes](v20, "uuidsOfRemovedHomes");
  v30 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v30, "removeAllObjects");

  -[HMDHomeManager incomingInvitations](v20, "incomingInvitations");
  v31 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v31, "removeAllObjects");

  -[HMDHomeManager updateHomeKitInUsePreferences](v20, "updateHomeKitInUsePreferences");
  +[HMDBulletinBoard sharedBulletinBoard](HMDBulletinBoard, "sharedBulletinBoard");
  v32 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v32, "removeAllBulletins");
  objc_msgSend(v32, "refreshHomeBadgeNumber");
  -[HMDHomeManager _eraseLocalMetadata](v20, "_eraseLocalMetadata");
  -[HMDHomeManager _checkForRemotePeers](v20, "_checkForRemotePeers");
  -[HMDHomeManager assistantSyncDataChanged:](v20, "assistantSyncDataChanged:", CFSTR("kResetConfigRequestKey"));
  CFPreferencesSetAppValue(CFSTR("HMDAssistantLastHashingKey"), 0, CFSTR("com.apple.homed"));
  CFPreferencesAppSynchronize(CFSTR("com.apple.homed"));
  -[HMDHomeManager uuid](v20, "uuid");
  v33 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHomeManager updateGenerationCounterWithReason:sourceUUID:shouldNotifyClients:](v20, "updateGenerationCounterWithReason:sourceUUID:shouldNotifyClients:", CFSTR("Erase local home configuration"), v33, 1);

  objc_msgSend(MEMORY[0x24BDD16D0], "defaultCenter");
  v34 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v34, "postNotificationName:object:", CFSTR("HMDHomeManagerLocalHomeDataRemovedNotification"), 0);

  v53 = 0;
  v54 = 0;
  v35 = (void *)MEMORY[0x227676638]();
  v36 = v20;
  HMFGetOSLogHandle();
  v37 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v37, OS_LOG_TYPE_DEFAULT))
  {
    HMFGetLogIdentifier();
    v38 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543362;
    *(_QWORD *)&buf[4] = v38;
    _os_log_impl(&dword_2218F0000, v37, OS_LOG_TYPE_DEFAULT, "%{public}@Waiting for thread network shutdown to complete", buf, 0xCu);

  }
  objc_autoreleasePoolPop(v35);
  objc_msgSend(MEMORY[0x24BE3F180], "allSettled:", v9);
  v39 = (void *)objc_claimAutoreleasedReturnValue();
  v40 = objc_msgSend(v39, "waitForResult:orError:withTimeout:", &v54, &v53, 4.0);

  v41 = (void *)MEMORY[0x227676638]();
  v42 = v36;
  HMFGetOSLogHandle();
  v43 = objc_claimAutoreleasedReturnValue();
  v44 = v43;
  if ((v40 & 1) != 0)
  {
    if (os_log_type_enabled(v43, OS_LOG_TYPE_DEFAULT))
    {
      HMFGetLogIdentifier();
      v45 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      *(_QWORD *)&buf[4] = v45;
      v46 = "%{public}@Thread network shutdown completed - continuing with reset config";
      v47 = v44;
      v48 = OS_LOG_TYPE_DEFAULT;
LABEL_17:
      _os_log_impl(&dword_2218F0000, v47, v48, v46, buf, 0xCu);

    }
  }
  else if (os_log_type_enabled(v43, OS_LOG_TYPE_ERROR))
  {
    HMFGetLogIdentifier();
    v45 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543362;
    *(_QWORD *)&buf[4] = v45;
    v46 = "%{public}@Gave up waiting for thread network shutdown";
    v47 = v44;
    v48 = OS_LOG_TYPE_ERROR;
    goto LABEL_17;
  }

  objc_autoreleasePoolPop(v41);
}

- (void)_eraseLocalHomeConfiguration
{
  void *v3;
  NSObject *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t i;
  void *v11;
  void *v12;
  void *v13;
  id v14;
  void *v15;
  void *v16;
  id v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  NSObject *v22;
  void *v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint8_t v28[128];
  uint8_t buf[4];
  void *v30;
  uint64_t v31;

  v31 = *MEMORY[0x24BDAC8D0];
  v3 = (void *)MEMORY[0x227676638](self, a2);
  HMFGetOSLogHandle();
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543362;
    v30 = v5;
    _os_log_impl(&dword_2218F0000, v4, OS_LOG_TYPE_INFO, "%{public}@[Reset Config] : Resetting local configuration and accessory keys for all homes", buf, 0xCu);

  }
  objc_autoreleasePoolPop(v3);
  v26 = 0u;
  v27 = 0u;
  v24 = 0u;
  v25 = 0u;
  -[HMDHomeManager homes](self, "homes", 0);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v24, v28, 16);
  if (v7)
  {
    v8 = v7;
    v9 = *(_QWORD *)v25;
    do
    {
      for (i = 0; i != v8; ++i)
      {
        if (*(_QWORD *)v25 != v9)
          objc_enumerationMutation(v6);
        v11 = *(void **)(*((_QWORD *)&v24 + 1) + 8 * i);
        objc_msgSend(v11, "name");
        v12 = (void *)objc_claimAutoreleasedReturnValue();
        -[HMDHomeManager uuid](self, "uuid");
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        v14 = -[HMDHomeManager removeName:namespace:](self, "removeName:namespace:", v12, v13);

        -[HMDHomeManager nameValidator](self, "nameValidator");
        v15 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v11, "uuid");
        v16 = (void *)objc_claimAutoreleasedReturnValue();
        v17 = (id)objc_msgSend(v15, "removeNamespace:", v16);

        objc_msgSend(v11, "uuid");
        v18 = (void *)objc_claimAutoreleasedReturnValue();
        -[HMDHomeManager _removeConfigurationVersionForHome:](self, "_removeConfigurationVersionForHome:", v18);

      }
      v8 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v24, v28, 16);
    }
    while (v8);
  }

  -[HMDHomeManager setPrimaryHomeUUID:](self, "setPrimaryHomeUUID:", 0);
  -[HMDHomeManager setRecoveryVersion:](self, "setRecoveryVersion:", 0);
  -[HMDHomeManager _updateCurrentHomeIfNecessary](self, "_updateCurrentHomeIfNecessary");
  -[HMDHomeManager backingStore](self, "backingStore");
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v19, "lookup");
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v20, "resetObjects");

  v21 = (void *)MEMORY[0x227676638](-[HMDHomeManager _eraseLocalHomeConfigurationWithReason:](self, "_eraseLocalHomeConfigurationWithReason:", 1));
  HMFGetOSLogHandle();
  v22 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v22, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543362;
    v30 = v23;
    _os_log_impl(&dword_2218F0000, v22, OS_LOG_TYPE_INFO, "%{public}@[Reset Config] : Completed erasing local home configuration", buf, 0xCu);

  }
  objc_autoreleasePoolPop(v21);
}

- (void)_eraseLocalHomeConfigurationAfterSignOut
{
  void *v3;
  HMDHomeManager *v4;
  NSObject *v5;
  void *v6;
  int v7;
  void *v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v3 = (void *)MEMORY[0x227676638](self, a2);
  v4 = self;
  HMFGetOSLogHandle();
  v5 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v7 = 138543362;
    v8 = v6;
    _os_log_impl(&dword_2218F0000, v5, OS_LOG_TYPE_INFO, "%{public}@[Reset Config] : Erase local data on this device since we signed out of iCloud", (uint8_t *)&v7, 0xCu);

  }
  objc_autoreleasePoolPop(v3);
  +[HMDPersistentStore resetConfiguration:](HMDPersistentStore, "resetConfiguration:", 2);
  -[HMDHomeManager resetTTSUHH2SettingsMigrationKey](v4, "resetTTSUHH2SettingsMigrationKey");
  +[HMDAuditHH2KeysForBackupOperation resetHH2KeyBackupOperationFromUserDefault](HMDAuditHH2KeysForBackupOperation, "resetHH2KeyBackupOperationFromUserDefault");
  -[HMDHomeManager removeAllHomeKitPairingIdentitiesAfterSignOut](v4, "removeAllHomeKitPairingIdentitiesAfterSignOut");
  -[HMDHomeManager _eraseLocalHomeConfiguration](v4, "_eraseLocalHomeConfiguration");
  -[HMDHomeManager _eraseLocalMetadata](v4, "_eraseLocalMetadata");
  objc_msgSend((id)objc_opt_class(), "relaunchHomedDueToResetConfigurationWithDelay:", 2.0);
}

- (void)_eraseLocalHomeConfigurationAndDeleteMetadata:(BOOL)a3 completionQueue:(id)a4 completion:(id)a5
{
  -[HMDHomeManager _eraseLocalHomeConfigurationAndDeleteMetadata:reason:completionQueue:completion:](self, "_eraseLocalHomeConfigurationAndDeleteMetadata:reason:completionQueue:completion:", a3, 1, a4, a5);
}

- (void)_eraseLocalHomeConfigurationAndDeleteMetadata:(BOOL)a3 reason:(unint64_t)a4 completionQueue:(id)a5 completion:(id)a6
{
  id v9;
  id v10;
  void *v11;
  NSObject *v12;
  void *v13;
  NSObject *v14;
  void *v15;
  uint64_t v16;
  NSObject *v17;
  NSObject *v18;
  id v19;
  id v20;
  _QWORD v21[4];
  id v22;
  id v23;
  id v24[2];
  _QWORD v25[4];
  NSObject *v26;
  id v27;
  uint8_t buf[4];
  void *v29;
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  v9 = a5;
  v10 = a6;
  v11 = (void *)MEMORY[0x227676638]();
  HMFGetOSLogHandle();
  v12 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543362;
    v29 = v13;
    _os_log_impl(&dword_2218F0000, v12, OS_LOG_TYPE_INFO, "%{public}@[Reset Config] : Resetting local configuration, users and keys for all homes", buf, 0xCu);

  }
  objc_autoreleasePoolPop(v11);
  v14 = dispatch_group_create();
  dispatch_group_enter(v14);
  objc_initWeak((id *)buf, self);
  -[HMDHomeManager syncManager](self, "syncManager");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  v16 = MEMORY[0x24BDAC760];
  v25[0] = MEMORY[0x24BDAC760];
  v25[1] = 3221225472;
  v25[2] = __111__HMDHomeManager_ResetConfig___eraseLocalHomeConfigurationAndDeleteMetadata_reason_completionQueue_completion___block_invoke;
  v25[3] = &unk_24E7972B0;
  objc_copyWeak(&v27, (id *)buf);
  v17 = v14;
  v26 = v17;
  objc_msgSend(v15, "pauseAndWaitForCurrentOperationCompletion:", v25);

  -[HMDHomeManager workQueue](self, "workQueue");
  v18 = objc_claimAutoreleasedReturnValue();
  v21[0] = v16;
  v21[1] = 3221225472;
  v21[2] = __111__HMDHomeManager_ResetConfig___eraseLocalHomeConfigurationAndDeleteMetadata_reason_completionQueue_completion___block_invoke_89;
  v21[3] = &unk_24E793618;
  objc_copyWeak(v24, (id *)buf);
  v24[1] = (id)a4;
  v22 = v9;
  v23 = v10;
  v19 = v9;
  v20 = v10;
  dispatch_group_notify(v17, v18, v21);

  objc_destroyWeak(v24);
  objc_destroyWeak(&v27);
  objc_destroyWeak((id *)buf);

}

- (void)_eraseLocalMetadata
{
  void *v3;
  _QWORD v4[5];

  -[HMDHomeManager mobileAssetManager](self, "mobileAssetManager");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4[0] = MEMORY[0x24BDAC760];
  v4[1] = 3221225472;
  v4[2] = __50__HMDHomeManager_ResetConfig___eraseLocalMetadata__block_invoke;
  v4[3] = &unk_24E79C240;
  v4[4] = self;
  objc_msgSend(v3, "purgeAllInstalledAssetsWithCompletion:", v4);

  +[HMDHAPMetadata updateLocalMetadataWithBuiltinMetadata](HMDHAPMetadata, "updateLocalMetadataWithBuiltinMetadata");
}

- (void)deleteZonesFromLegacyAndCameraContainers
{
  void *v3;
  HMDHomeManager *v4;
  NSObject *v5;
  void *v6;
  void *v7;
  _QWORD v8[5];
  uint8_t buf[4];
  void *v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  v3 = (void *)MEMORY[0x227676638](self, a2);
  v4 = self;
  HMFGetOSLogHandle();
  v5 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    HMFGetLogIdentifier();
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543362;
    v10 = v6;
    _os_log_impl(&dword_2218F0000, v5, OS_LOG_TYPE_DEFAULT, "%{public}@[Reset Config] : Asked to delete all zones from legacy & camera containers", buf, 0xCu);

  }
  objc_autoreleasePoolPop(v3);
  objc_msgSend((id)objc_opt_class(), "getContainersToCleanUp");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8[0] = MEMORY[0x24BDAC760];
  v8[1] = 3221225472;
  v8[2] = __71__HMDHomeManager_ResetConfig__deleteZonesFromLegacyAndCameraContainers__block_invoke;
  v8[3] = &unk_24E793640;
  v8[4] = v4;
  objc_msgSend(v7, "hmf_enumerateWithAutoreleasePoolUsingBlock:", v8);

}

- (void)deleteAllZonesFromContainer:(id)a3
{
  id v4;
  void *v5;
  HMDHomeManager *v6;
  NSObject *v7;
  void *v8;
  void *v9;
  void *v10;
  HMDHomeManager *v11;
  NSObject *v12;
  NSObject *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  uint64_t v20;
  id v21;
  id v22;
  void *v23;
  void *v24;
  NSObject *v25;
  id v26;
  id v27;
  void *v28;
  void *v29;
  void *v30;
  NSObject *v31;
  id v32;
  void *v33;
  HMDHomeManager *v34;
  NSObject *v35;
  void *v36;
  void *v37;
  void *v38;
  HMDHomeManager *v39;
  NSObject *v40;
  void *v41;
  void *v42;
  id v43;
  _QWORD v44[5];
  NSObject *v45;
  _QWORD v46[5];
  id v47;
  id v48;
  id v49;
  _QWORD v50[5];
  id v51;
  id v52;
  uint8_t buf[4];
  void *v54;
  __int16 v55;
  id v56;
  __int16 v57;
  void *v58;
  uint64_t v59;

  v59 = *MEMORY[0x24BDAC8D0];
  v4 = a3;
  v5 = (void *)MEMORY[0x227676638]();
  v6 = self;
  HMFGetOSLogHandle();
  v7 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    HMFGetLogIdentifier();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543618;
    v54 = v8;
    v55 = 2112;
    v56 = v4;
    _os_log_impl(&dword_2218F0000, v7, OS_LOG_TYPE_DEFAULT, "%{public}@[Reset Config] : Asked to delete all the zones from container : [%@]", buf, 0x16u);

  }
  objc_autoreleasePoolPop(v5);
  -[HMDHomeManager createCloudDatabaseAndPerformInitialSync:](v6, "createCloudDatabaseAndPerformInitialSync:", v4);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = (void *)MEMORY[0x227676638]();
  v11 = v6;
  HMFGetOSLogHandle();
  v12 = objc_claimAutoreleasedReturnValue();
  v13 = v12;
  if (v9)
  {
    if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      v15 = (void *)MEMORY[0x24BDD16E0];
      objc_msgSend(v9, "privateZoneIDs");
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v15, "numberWithUnsignedInteger:", objc_msgSend(v16, "count"));
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543874;
      v54 = v14;
      v55 = 2112;
      v56 = v4;
      v57 = 2112;
      v58 = v17;
      _os_log_impl(&dword_2218F0000, v13, OS_LOG_TYPE_INFO, "%{public}@[Reset Config] : [%@] There are %@ zones", buf, 0x20u);

    }
    objc_autoreleasePoolPop(v10);
    objc_msgSend(MEMORY[0x24BDBCEB8], "array");
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "privateZoneIDs");
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    v20 = MEMORY[0x24BDAC760];
    v50[0] = MEMORY[0x24BDAC760];
    v50[1] = 3221225472;
    v50[2] = __59__HMDHomeManager_ResetConfig__deleteAllZonesFromContainer___block_invoke;
    v50[3] = &unk_24E793668;
    v50[4] = v11;
    v21 = v9;
    v51 = v21;
    v22 = v18;
    v52 = v22;
    objc_msgSend(v19, "hmf_enumerateWithAutoreleasePoolUsingBlock:", v50);

    objc_msgSend(v21, "localDatabase");
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v23, "fetchZonesWithError:", 0);
    v24 = (void *)objc_claimAutoreleasedReturnValue();

    if (objc_msgSend(v24, "count"))
    {
      v25 = dispatch_group_create();
      dispatch_group_enter(v25);
      v46[0] = v20;
      v46[1] = 3221225472;
      v46[2] = __59__HMDHomeManager_ResetConfig__deleteAllZonesFromContainer___block_invoke_97;
      v46[3] = &unk_24E793690;
      v46[4] = v11;
      v47 = v21;
      v43 = v4;
      v26 = v4;
      v48 = v26;
      v27 = v22;
      v49 = v27;
      objc_msgSend(v24, "hmf_enumerateWithAutoreleasePoolUsingBlock:", v46);
      v28 = (void *)MEMORY[0x24BE6B608];
      objc_msgSend(MEMORY[0x24BE6B628], "immediateScheduler");
      v29 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v28, "combineAllFutures:ignoringErrors:scheduler:", v27, 1, v29);
      v30 = (void *)objc_claimAutoreleasedReturnValue();
      v44[0] = v20;
      v44[1] = 3221225472;
      v44[2] = __59__HMDHomeManager_ResetConfig__deleteAllZonesFromContainer___block_invoke_2;
      v44[3] = &unk_24E799F40;
      v44[4] = v11;
      v31 = v25;
      v45 = v31;
      v32 = (id)objc_msgSend(v30, "addCompletionBlock:", v44);

      v33 = (void *)MEMORY[0x227676638]();
      v34 = v11;
      HMFGetOSLogHandle();
      v35 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT))
      {
        HMFGetLogIdentifier();
        v36 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        v54 = v36;
        v55 = 2112;
        v56 = v26;
        _os_log_impl(&dword_2218F0000, v35, OS_LOG_TYPE_DEFAULT, "%{public}@[Reset Config] : Finished deleting zones for container : %@", buf, 0x16u);

      }
      objc_autoreleasePoolPop(v33);
      dispatch_group_wait(v31, 0xFFFFFFFFFFFFFFFFLL);

      v4 = v43;
    }
    else
    {
      v38 = (void *)MEMORY[0x227676638]();
      v39 = v11;
      HMFGetOSLogHandle();
      v40 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v40, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v41 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v21, "containerID");
        v42 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        v54 = v41;
        v55 = 2112;
        v56 = v42;
        _os_log_impl(&dword_2218F0000, v40, OS_LOG_TYPE_INFO, "%{public}@[Reset Config] : [%@] No local zones to delete", buf, 0x16u);

      }
      objc_autoreleasePoolPop(v38);
    }

  }
  else
  {
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v37 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v54 = v37;
      v55 = 2112;
      v56 = v4;
      _os_log_impl(&dword_2218F0000, v13, OS_LOG_TYPE_ERROR, "%{public}@[Reset Config] : Unable to create cloud database for container : %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v10);
  }

}

- (id)deleteLocalZone:(id)a3 localDatabase:(id)a4 containerID:(id)a5
{
  id v8;
  id v9;
  id v10;
  void *v11;
  HMDHomeManager *v12;
  NSObject *v13;
  void *v14;
  id v15;
  void *v16;
  id v17;
  void *v18;
  void *v19;
  HMDHomeManager *v20;
  NSObject *v21;
  void *v22;
  id v24;
  uint8_t buf[4];
  void *v26;
  __int16 v27;
  id v28;
  __int16 v29;
  id v30;
  uint64_t v31;

  v31 = *MEMORY[0x24BDAC8D0];
  v8 = a3;
  v9 = a4;
  v10 = a5;
  v11 = (void *)MEMORY[0x227676638]();
  v12 = self;
  HMFGetOSLogHandle();
  v13 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543618;
    v26 = v14;
    v27 = 2112;
    v28 = v8;
    _os_log_impl(&dword_2218F0000, v13, OS_LOG_TYPE_INFO, "%{public}@[Reset Config] : Going to open local zone [%@] and delete it", buf, 0x16u);

  }
  objc_autoreleasePoolPop(v11);
  v15 = objc_alloc_init(MEMORY[0x24BE4ED00]);
  objc_msgSend(v15, "setCreateIfNeeded:", 0);
  v24 = 0;
  objc_msgSend(v9, "openZoneWithZoneID:configuration:error:", v8, v15, &v24);
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  v17 = v24;
  if (v16)
  {
    objc_msgSend(v9, "removeZone:", v16);
    v18 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v19 = (void *)MEMORY[0x227676638]();
    v20 = v12;
    HMFGetOSLogHandle();
    v21 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543874;
      v26 = v22;
      v27 = 2112;
      v28 = v8;
      v29 = 2112;
      v30 = v17;
      _os_log_impl(&dword_2218F0000, v21, OS_LOG_TYPE_ERROR, "%{public}@[Reset Config] : Failed to open local zone with zoneID %@: %@", buf, 0x20u);

    }
    objc_autoreleasePoolPop(v19);
    v18 = 0;
  }

  return v18;
}

- (id)createCloudDatabaseAndPerformInitialSync:(id)a3
{
  id v4;
  void *v5;
  HMDHomeManager *v6;
  NSObject *v7;
  void *v8;
  id v9;
  void *v10;
  void *v11;
  id v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  HMDHomeManager *v17;
  NSObject *v18;
  NSObject *v19;
  void *v20;
  NSObject *v21;
  void *v22;
  id v23;
  NSObject *v24;
  id v25;
  dispatch_time_t v26;
  void *v27;
  HMDHomeManager *v28;
  NSObject *v29;
  void *v30;
  id v31;
  void *v32;
  id v34;
  _QWORD v35[5];
  id v36;
  NSObject *v37;
  uint8_t buf[4];
  void *v39;
  __int16 v40;
  id v41;
  uint64_t v42;

  v42 = *MEMORY[0x24BDAC8D0];
  v4 = a3;
  v5 = (void *)MEMORY[0x227676638]();
  v6 = self;
  HMFGetOSLogHandle();
  v7 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    HMFGetLogIdentifier();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543618;
    v39 = v8;
    v40 = 2112;
    v41 = v4;
    _os_log_impl(&dword_2218F0000, v7, OS_LOG_TYPE_DEFAULT, "%{public}@[Reset Config] : Creating cloud database from container : [%@]", buf, 0x16u);

  }
  objc_autoreleasePoolPop(v5);
  v9 = objc_alloc(MEMORY[0x24BDB9038]);
  v10 = (void *)objc_msgSend(v9, "initWithContainerIdentifier:environment:", CFSTR("com.apple.willow.config"), cloudKitContainerEnvironment);
  v11 = (void *)objc_msgSend(objc_alloc(MEMORY[0x24BE4EC58]), "initWithContainerID:", v10);
  v12 = objc_alloc(MEMORY[0x24BE4EC50]);
  +[HMDDatabase defaultDatabase](HMDDatabase, "defaultDatabase");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v13, "localDatabase");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  v15 = (void *)objc_msgSend(v12, "initWithLocalDatabase:configuration:", v14, v11);

  v16 = (void *)MEMORY[0x227676638]();
  v17 = v6;
  HMFGetOSLogHandle();
  v18 = objc_claimAutoreleasedReturnValue();
  v19 = v18;
  if (v15)
  {
    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
    {
      HMFGetLogIdentifier();
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v39 = v20;
      v40 = 2112;
      v41 = v15;
      _os_log_impl(&dword_2218F0000, v19, OS_LOG_TYPE_DEFAULT, "%{public}@[Reset Config] : Going to performInitialCloudSync for %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v16);
    v21 = dispatch_group_create();
    dispatch_group_enter(v21);
    objc_msgSend(v15, "performInitialCloudSync");
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    v35[0] = MEMORY[0x24BDAC760];
    v35[1] = 3221225472;
    v35[2] = __72__HMDHomeManager_ResetConfig__createCloudDatabaseAndPerformInitialSync___block_invoke;
    v35[3] = &unk_24E798798;
    v35[4] = v17;
    v23 = v15;
    v36 = v23;
    v24 = v21;
    v37 = v24;
    v25 = (id)objc_msgSend(v22, "addCompletionBlock:", v35);
    v26 = dispatch_time(0, 30000000000);
    if (dispatch_group_wait(v24, v26))
    {
      v27 = (void *)MEMORY[0x227676638]();
      v28 = v17;
      HMFGetOSLogHandle();
      v29 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v34 = v4;
        v30 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        v39 = v30;
        v40 = 2112;
        v41 = v23;
        _os_log_impl(&dword_2218F0000, v29, OS_LOG_TYPE_ERROR, "%{public}@[Reset Config] : Timed out while waiting to perform initial sync on %@", buf, 0x16u);

        v4 = v34;
      }

      objc_autoreleasePoolPop(v27);
    }
    v31 = v23;

  }
  else
  {
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v32 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v39 = v32;
      v40 = 2112;
      v41 = v4;
      _os_log_impl(&dword_2218F0000, v19, OS_LOG_TYPE_ERROR, "%{public}@[Reset Config] : Failed to create cloud database with containerID %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v16);
  }

  return v15;
}

- (void)resetHomeConfigForHH2:(BOOL)a3 message:(id)a4
{
  _BOOL4 v4;
  id v6;
  void *v7;
  HMDHomeManager *v8;
  NSObject *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  _BOOL4 v18;
  HMDRemoteAccountMessageDestination *v19;
  void *v20;
  HMDRemoteAccountMessageDestination *v21;
  void *v22;
  void *v23;
  HMDHomeManager *v24;
  NSObject *v25;
  void *v26;
  void *v27;
  void *v28;
  HMDHomeManager *v29;
  NSObject *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  HMDHomeManager *v38;
  NSObject *v39;
  void *v40;
  void *v41;
  __int128 buf;
  void (*v43)(uint64_t, void *);
  void *v44;
  HMDHomeManager *v45;
  uint64_t v46;

  v4 = a3;
  v46 = *MEMORY[0x24BDAC8D0];
  v6 = a4;
  v7 = (void *)MEMORY[0x227676638]();
  v8 = self;
  HMFGetOSLogHandle();
  v9 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    HMFGetLogIdentifier();
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    LODWORD(buf) = 138543362;
    *(_QWORD *)((char *)&buf + 4) = v10;
    _os_log_impl(&dword_2218F0000, v9, OS_LOG_TYPE_DEFAULT, "%{public}@[Reset Config] : Reset config is invoked", (uint8_t *)&buf, 0xCu);

  }
  objc_autoreleasePoolPop(v7);
  v11 = (void *)MEMORY[0x227676638]();
  v12 = objc_msgSend(v6, "qualityOfService");
  if (v8)
  {
    v13 = v12;
    +[HMDAppleAccountManager sharedManager](HMDAppleAccountManager, "sharedManager");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v14, "account");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v15, "handles");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v16, "firstObject");
    v17 = (void *)objc_claimAutoreleasedReturnValue();

    if (v17)
    {
      v41 = v11;
      v18 = v4;
      v19 = [HMDRemoteAccountMessageDestination alloc];
      -[HMDHomeManager messageTargetUUID](v8, "messageTargetUUID");
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      v21 = -[HMDRemoteAccountMessageDestination initWithTarget:handle:multicast:](v19, "initWithTarget:handle:multicast:", v20, v17, 1);

      -[HMDRemoteAccountMessageDestination setRestrictToResidentCapable:](v21, "setRestrictToResidentCapable:", 1);
      +[HMDRemoteMessage secureMessageWithName:qualityOfService:destination:messagePayload:](HMDRemoteMessage, "secureMessageWithName:qualityOfService:destination:messagePayload:", CFSTR("HMD.EL.reset"), v13, v21, MEMORY[0x24BDBD1B8]);
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      v23 = (void *)MEMORY[0x227676638]();
      v24 = v8;
      HMFGetOSLogHandle();
      v25 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
      {
        HMFGetLogIdentifier();
        v26 = (void *)objc_claimAutoreleasedReturnValue();
        LODWORD(buf) = 138543362;
        *(_QWORD *)((char *)&buf + 4) = v26;
        _os_log_impl(&dword_2218F0000, v25, OS_LOG_TYPE_DEFAULT, "%{public}@Signaling all resident devices to reset hindsight configuration", (uint8_t *)&buf, 0xCu);

      }
      objc_autoreleasePoolPop(v23);
      -[HMDHomeManager messageDispatcher](v24, "messageDispatcher");
      v27 = (void *)objc_claimAutoreleasedReturnValue();
      *(_QWORD *)&buf = MEMORY[0x24BDAC760];
      *((_QWORD *)&buf + 1) = 3221225472;
      v43 = __67__HMDHomeManager_ResetConfig___resetHindsightWithQualityOfService___block_invoke;
      v44 = &unk_24E79BD80;
      v45 = v24;
      objc_msgSend(v27, "sendMessage:completionHandler:", v22, &buf);

      v4 = v18;
      v11 = v41;
    }
    else
    {
      v28 = (void *)MEMORY[0x227676638]();
      v29 = v8;
      HMFGetOSLogHandle();
      v30 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v31 = (void *)objc_claimAutoreleasedReturnValue();
        LODWORD(buf) = 138543362;
        *(_QWORD *)((char *)&buf + 4) = v31;
        _os_log_impl(&dword_2218F0000, v30, OS_LOG_TYPE_ERROR, "%{public}@Can't notify residents to reset hindsight configuration because the current account is missing or has no handles", (uint8_t *)&buf, 0xCu);

      }
      objc_autoreleasePoolPop(v28);
    }

  }
  objc_autoreleasePoolPop(v11);
  v32 = (void *)MEMORY[0x227676638](+[HMDAuditHH2KeysForBackupOperation resetHH2KeyBackupOperationFromUserDefault](HMDAuditHH2KeysForBackupOperation, "resetHH2KeyBackupOperationFromUserDefault"));
  -[HMDHomeManager performCleanupOnHH2Container](v8, "performCleanupOnHH2Container");
  objc_autoreleasePoolPop(v32);
  v33 = (void *)MEMORY[0x227676638]();
  -[HMDHomeManager cleanupLocalConfiguration](v8, "cleanupLocalConfiguration");
  objc_autoreleasePoolPop(v33);
  if (v4)
  {
    v34 = (void *)MEMORY[0x227676638]();
    -[HMDHomeManager _eraseLocalMetadata](v8, "_eraseLocalMetadata");
    objc_autoreleasePoolPop(v34);
  }
  v35 = (void *)MEMORY[0x227676638]();
  -[HMDHomeManager deleteZonesFromLegacyAndCameraContainers](v8, "deleteZonesFromLegacyAndCameraContainers");
  objc_autoreleasePoolPop(v35);
  v36 = (void *)MEMORY[0x227676638]();
  -[HMDHomeManager waitForHH2SentinelZoneToBeRemoved](v8, "waitForHH2SentinelZoneToBeRemoved");
  objc_autoreleasePoolPop(v36);
  v37 = (void *)MEMORY[0x227676638](objc_msgSend(v6, "respondWithSuccess"));
  v38 = v8;
  HMFGetOSLogHandle();
  v39 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v39, OS_LOG_TYPE_DEFAULT))
  {
    HMFGetLogIdentifier();
    v40 = (void *)objc_claimAutoreleasedReturnValue();
    LODWORD(buf) = 138543362;
    *(_QWORD *)((char *)&buf + 4) = v40;
    _os_log_impl(&dword_2218F0000, v39, OS_LOG_TYPE_DEFAULT, "%{public}@[Reset Config] : Reset config is finished", (uint8_t *)&buf, 0xCu);

  }
  objc_autoreleasePoolPop(v37);
  objc_msgSend((id)objc_opt_class(), "relaunchHomedDueToResetConfigurationWithDelay:", 2.0);

}

- (void)cleanupLocalConfiguration
{
  void *v3;
  HMDHomeManager *v4;
  NSObject *v5;
  void *v6;
  void *v7;
  void *v8;
  HMDHomeManager *v9;
  NSObject *v10;
  void *v11;
  void *v12;
  int v13;
  void *v14;
  __int16 v15;
  void *v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  v3 = (void *)MEMORY[0x227676638](self, a2);
  v4 = self;
  HMFGetOSLogHandle();
  v5 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    HMFGetLogIdentifier();
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v13 = 138543362;
    v14 = v6;
    _os_log_impl(&dword_2218F0000, v5, OS_LOG_TYPE_DEFAULT, "%{public}@[Reset Config] : cleaning up local configuration", (uint8_t *)&v13, 0xCu);

  }
  objc_autoreleasePoolPop(v3);
  -[HMDHomeManager _eraseLocalHomeConfiguration](v4, "_eraseLocalHomeConfiguration");
  objc_msgSend(MEMORY[0x24BE1BC08], "systemStore");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "removeControllerKeyPairWithError:", 0);
  v8 = (void *)MEMORY[0x227676638]();
  v9 = v4;
  HMFGetOSLogHandle();
  v10 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    HMFGetLogIdentifier();
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    HMFBooleanToString();
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    v13 = 138543618;
    v14 = v11;
    v15 = 2112;
    v16 = v12;
    _os_log_impl(&dword_2218F0000, v10, OS_LOG_TYPE_DEFAULT, "%{public}@[Reset Config] : Controller key removal status : %@", (uint8_t *)&v13, 0x16u);

  }
  objc_autoreleasePoolPop(v8);

}

- (void)performCleanupOnHH2Container
{
  void *v3;
  HMDHomeManager *v4;
  NSObject *v5;
  void *v6;
  id v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  int v13;
  void *v14;
  __int16 v15;
  const __CFString *v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  v3 = (void *)MEMORY[0x227676638](self, a2);
  v4 = self;
  HMFGetOSLogHandle();
  v5 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v13 = 138543618;
    v14 = v6;
    v15 = 2112;
    v16 = CFSTR("com.apple.homekit.config");
    _os_log_impl(&dword_2218F0000, v5, OS_LOG_TYPE_INFO, "%{public}@[Reset Config] : Perform clean up on HH2 container. : %@", (uint8_t *)&v13, 0x16u);

  }
  objc_autoreleasePoolPop(v3);
  v7 = objc_alloc(MEMORY[0x24BDB9038]);
  v8 = (void *)objc_msgSend(v7, "initWithContainerIdentifier:environment:", CFSTR("com.apple.homekit.config"), cloudKitContainerEnvironment);
  v9 = (void *)objc_opt_new();
  objc_msgSend(v9, "setUseZoneWidePCS:", 1);
  v10 = (void *)objc_msgSend(objc_alloc(MEMORY[0x24BDB9030]), "initWithContainerID:options:", v8, v9);
  objc_msgSend(v10, "privateCloudDatabase");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHomeManager fetchAndRemoveAllZonesFromDatabase:](v4, "fetchAndRemoveAllZonesFromDatabase:", v11);

  objc_msgSend(v10, "sharedCloudDatabase");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHomeManager fetchAndRemoveAllZonesFromDatabase:](v4, "fetchAndRemoveAllZonesFromDatabase:", v12);

}

- (void)fetchAndRemoveAllZonesFromDatabase:(id)a3
{
  id v4;
  void *v5;
  HMDHomeManager *v6;
  NSObject *v7;
  void *v8;
  int v9;
  void *v10;
  HMDHomeManager *v11;
  NSObject *v12;
  NSObject *v13;
  void *v14;
  void *v15;
  uint8_t buf[4];
  void *v17;
  __int16 v18;
  id v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  v4 = a3;
  v5 = (void *)MEMORY[0x227676638]();
  v6 = self;
  HMFGetOSLogHandle();
  v7 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543618;
    v17 = v8;
    v18 = 2112;
    v19 = v4;
    _os_log_impl(&dword_2218F0000, v7, OS_LOG_TYPE_INFO, "%{public}@[Reset Config] Fetching and removing all zones from database %@", buf, 0x16u);

  }
  objc_autoreleasePoolPop(v5);
  if (-[HMDHomeManager fetchAndRemoveNextBatchOfZonesFromDatabase:](v6, "fetchAndRemoveNextBatchOfZonesFromDatabase:", v4))
  {
    v9 = 1;
    while (1)
    {
      v10 = (void *)MEMORY[0x227676638]();
      v11 = v6;
      HMFGetOSLogHandle();
      v12 = objc_claimAutoreleasedReturnValue();
      v13 = v12;
      if (v9 == 101)
        break;
      if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v14 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        v17 = v14;
        v18 = 1024;
        LODWORD(v19) = v9;
        _os_log_impl(&dword_2218F0000, v13, OS_LOG_TYPE_INFO, "%{public}@[Reset Config] Found something in batch %d. Trying again in case there is more", buf, 0x12u);

      }
      objc_autoreleasePoolPop(v10);
      ++v9;
      if (!-[HMDHomeManager fetchAndRemoveNextBatchOfZonesFromDatabase:](v11, "fetchAndRemoveNextBatchOfZonesFromDatabase:", v4))goto LABEL_13;
    }
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v17 = v15;
      v18 = 1024;
      LODWORD(v19) = 101;
      _os_log_impl(&dword_2218F0000, v13, OS_LOG_TYPE_ERROR, "%{public}@[Reset Config] Went through too many batches [%d]. Giving up.", buf, 0x12u);

    }
    objc_autoreleasePoolPop(v10);
  }
LABEL_13:

}

- (BOOL)fetchAndRemoveNextBatchOfZonesFromDatabase:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  NSObject *v10;
  id v11;
  NSObject *v12;
  void *v13;
  dispatch_time_t v14;
  void *v15;
  HMDHomeManager *v16;
  NSObject *v17;
  void *v18;
  BOOL v19;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(uint64_t, void *, void *);
  void *v24;
  HMDHomeManager *v25;
  id v26;
  NSObject *v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  char v32;
  uint8_t buf[4];
  void *v34;
  uint64_t v35;

  v35 = *MEMORY[0x24BDAC8D0];
  v4 = a3;
  v5 = (void *)MEMORY[0x227676638]();
  objc_msgSend(MEMORY[0x24BDB90E0], "fetchAllRecordZonesOperation");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "setDatabase:", v4);
  objc_msgSend(MEMORY[0x24BDD17F0], "currentThread");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = objc_msgSend(v7, "qualityOfService");
  objc_msgSend(v6, "configuration");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "setQualityOfService:", v8);

  v10 = dispatch_group_create();
  dispatch_group_enter(v10);
  v29 = 0;
  v30 = &v29;
  v31 = 0x2020000000;
  v32 = 0;
  v21 = MEMORY[0x24BDAC760];
  v22 = 3221225472;
  v23 = __74__HMDHomeManager_ResetConfig__fetchAndRemoveNextBatchOfZonesFromDatabase___block_invoke;
  v24 = &unk_24E7936B8;
  v25 = self;
  v11 = v4;
  v26 = v11;
  v28 = &v29;
  v12 = v10;
  v27 = v12;
  objc_msgSend(v6, "setFetchRecordZonesCompletionBlock:", &v21);
  objc_msgSend(v11, "operationQueue", v21, v22, v23, v24, v25);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v13, "addOperation:", v6);

  v14 = dispatch_time(0, 30000000000);
  if (dispatch_group_wait(v12, v14))
  {
    v15 = (void *)MEMORY[0x227676638]();
    v16 = self;
    HMFGetOSLogHandle();
    v17 = (id)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v34 = v18;
      _os_log_impl(&dword_2218F0000, v17, OS_LOG_TYPE_ERROR, "%{public}@[Reset Config] :Timed out while waiting to fetch all cloud zones from HH2 container. Give up.", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v15);
  }
  v19 = *((_BYTE *)v30 + 24) != 0;

  _Block_object_dispose(&v29, 8);
  objc_autoreleasePoolPop(v5);

  return v19;
}

- (void)purgeAllSharesFromZones:(id)a3 fromDatabase:(id)a4 dispatchGroup:(id)a5
{
  void *v8;
  NSObject *v9;
  void *v10;
  id v11;
  id v12;
  uint64_t v13;
  uint64_t i;
  void *v15;
  void *v16;
  void *v17;
  int v18;
  int v19;
  void *v20;
  HMDHomeManager *v21;
  NSObject *v22;
  id v23;
  uint64_t v24;
  id v25;
  id v26;
  id v27;
  HMDHomeManager *v28;
  uint64_t v29;
  uint64_t v30;
  NSObject *group;
  _QWORD v32[5];
  NSObject *v33;
  _BYTE *v34;
  char v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  uint8_t v40[4];
  id v41;
  __int16 v42;
  uint64_t v43;
  uint8_t v44[128];
  _BYTE buf[24];
  uint64_t (*v46)(uint64_t, uint64_t);
  void (*v47)(uint64_t);
  id v48;
  uint64_t v49;

  v49 = *MEMORY[0x24BDAC8D0];
  v26 = a3;
  v27 = a4;
  group = a5;
  v8 = (void *)MEMORY[0x227676638]();
  v28 = self;
  HMFGetOSLogHandle();
  v9 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543618;
    *(_QWORD *)&buf[4] = v10;
    *(_WORD *)&buf[12] = 2112;
    *(_QWORD *)&buf[14] = v26;
    _os_log_impl(&dword_2218F0000, v9, OS_LOG_TYPE_INFO, "%{public}@[Reset Config] Going to purge all the zones : %@", buf, 0x16u);

  }
  objc_autoreleasePoolPop(v8);
  *(_QWORD *)buf = 0;
  *(_QWORD *)&buf[8] = buf;
  *(_QWORD *)&buf[16] = 0x3032000000;
  v46 = __Block_byref_object_copy__213039;
  v47 = __Block_byref_object_dispose__213040;
  v48 = 0;
  v11 = objc_alloc_init(MEMORY[0x24BDBCEB8]);
  objc_msgSend(v26, "allKeys");
  v38 = 0u;
  v39 = 0u;
  v36 = 0u;
  v37 = 0u;
  v12 = (id)objc_claimAutoreleasedReturnValue();
  v13 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v36, v44, 16);
  if (v13)
  {
    v29 = *MEMORY[0x24BDB8F18];
    v30 = *(_QWORD *)v37;
    do
    {
      for (i = 0; i != v13; ++i)
      {
        if (*(_QWORD *)v37 != v30)
          objc_enumerationMutation(v12);
        v15 = *(void **)(*((_QWORD *)&v36 + 1) + 8 * i);
        v16 = (void *)objc_msgSend(objc_alloc(MEMORY[0x24BDB91E8]), "initWithRecordName:zoneID:", v29, v15);
        objc_msgSend(v11, "addObject:", v16);
        objc_msgSend(v12, "lastObject");
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        v18 = objc_msgSend(v15, "isEqual:", v17);

        if ((unint64_t)objc_msgSend(v11, "count") > 0x63)
          v19 = 1;
        else
          v19 = v18;
        if (v19 == 1)
        {
          dispatch_group_enter(group);
          v20 = (void *)MEMORY[0x227676638]();
          v21 = v28;
          HMFGetOSLogHandle();
          v22 = (id)objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v22, OS_LOG_TYPE_INFO))
          {
            HMFGetLogIdentifier();
            v23 = (id)objc_claimAutoreleasedReturnValue();
            v24 = objc_msgSend(v11, "count");
            *(_DWORD *)v40 = 138543618;
            v41 = v23;
            v42 = 2048;
            v43 = v24;
            _os_log_impl(&dword_2218F0000, v22, OS_LOG_TYPE_INFO, "%{public}@[Reset Config] purging batch of shares [%lu]", v40, 0x16u);

          }
          objc_autoreleasePoolPop(v20);
          v32[0] = MEMORY[0x24BDAC760];
          v32[1] = 3221225472;
          v32[2] = __82__HMDHomeManager_ResetConfig__purgeAllSharesFromZones_fromDatabase_dispatchGroup___block_invoke;
          v32[3] = &unk_24E7936E0;
          v34 = buf;
          v32[4] = v21;
          v35 = v18;
          v33 = group;
          -[HMDHomeManager purgeShares:fromDatabase:completionHandler:](v21, "purgeShares:fromDatabase:completionHandler:", v11, v27, v32);
          v25 = objc_alloc_init(MEMORY[0x24BDBCEB8]);

          v11 = v25;
        }

      }
      v13 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v36, v44, 16);
    }
    while (v13);
  }

  _Block_object_dispose(buf, 8);
}

- (void)purgeShares:(id)a3 fromDatabase:(id)a4 completionHandler:(id)a5
{
  id v8;
  id v9;
  id v10;
  void *v11;
  HMDHomeManager *v12;
  NSObject *v13;
  void *v14;
  void *v15;
  uint64_t v16;
  id v17;
  _QWORD v18[5];
  id v19;
  _BYTE *v20;
  _QWORD v21[6];
  _BYTE buf[24];
  uint64_t (*v23)(uint64_t, uint64_t);
  void (*v24)(uint64_t);
  id v25;
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  v8 = a3;
  v9 = a4;
  v10 = a5;
  v11 = (void *)MEMORY[0x227676638]();
  v12 = self;
  HMFGetOSLogHandle();
  v13 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543618;
    *(_QWORD *)&buf[4] = v14;
    *(_WORD *)&buf[12] = 2048;
    *(_QWORD *)&buf[14] = objc_msgSend(v8, "count");
    _os_log_impl(&dword_2218F0000, v13, OS_LOG_TYPE_INFO, "%{public}@[Reset Config] : purgeShares %ld", buf, 0x16u);

  }
  objc_autoreleasePoolPop(v11);
  v15 = (void *)objc_msgSend(objc_alloc(MEMORY[0x24BDB9158]), "initWithRecordsToSave:recordIDsToDelete:", 0, v8);
  *(_QWORD *)buf = 0;
  *(_QWORD *)&buf[8] = buf;
  *(_QWORD *)&buf[16] = 0x3032000000;
  v23 = __Block_byref_object_copy__213039;
  v24 = __Block_byref_object_dispose__213040;
  v25 = 0;
  v16 = MEMORY[0x24BDAC760];
  v21[0] = MEMORY[0x24BDAC760];
  v21[1] = 3221225472;
  v21[2] = __74__HMDHomeManager_ResetConfig__purgeShares_fromDatabase_completionHandler___block_invoke;
  v21[3] = &unk_24E793708;
  v21[4] = v12;
  v21[5] = buf;
  objc_msgSend(v15, "setPerRecordDeleteBlock:", v21);
  v18[0] = v16;
  v18[1] = 3221225472;
  v18[2] = __74__HMDHomeManager_ResetConfig__purgeShares_fromDatabase_completionHandler___block_invoke_118;
  v18[3] = &unk_24E793730;
  v18[4] = v12;
  v20 = buf;
  v17 = v10;
  v19 = v17;
  objc_msgSend(v15, "setModifyRecordsCompletionBlock:", v18);
  objc_msgSend(v9, "addOperation:", v15);

  _Block_object_dispose(buf, 8);
}

- (void)purgeAllRecordZones:(id)a3 fromDatabase:(id)a4 completionHandler:(id)a5
{
  id v8;
  id v9;
  id v10;
  void *v11;
  HMDHomeManager *v12;
  NSObject *v13;
  void *v14;
  id v15;
  void *v16;
  void *v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(uint64_t, void *, void *, void *);
  void *v22;
  HMDHomeManager *v23;
  id v24;
  uint8_t buf[4];
  void *v26;
  __int16 v27;
  uint64_t v28;
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  v8 = a3;
  v9 = a4;
  v10 = a5;
  v11 = (void *)MEMORY[0x227676638]();
  v12 = self;
  HMFGetOSLogHandle();
  v13 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543618;
    v26 = v14;
    v27 = 2048;
    v28 = objc_msgSend(v8, "count");
    _os_log_impl(&dword_2218F0000, v13, OS_LOG_TYPE_INFO, "%{public}@[Reset Config] : Going to purge all the zones : %lu", buf, 0x16u);

  }
  objc_autoreleasePoolPop(v11);
  v15 = objc_alloc(MEMORY[0x24BDB9150]);
  objc_msgSend(v8, "allKeys");
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  v17 = (void *)objc_msgSend(v15, "initWithRecordZonesToSave:recordZoneIDsToDelete:", 0, v16);

  objc_msgSend(v17, "setMarkZonesAsUserPurged:", 1);
  v19 = MEMORY[0x24BDAC760];
  v20 = 3221225472;
  v21 = __82__HMDHomeManager_ResetConfig__purgeAllRecordZones_fromDatabase_completionHandler___block_invoke;
  v22 = &unk_24E793758;
  v23 = v12;
  v24 = v10;
  v18 = v10;
  objc_msgSend(v17, "setModifyRecordZonesCompletionBlock:", &v19);
  objc_msgSend(v9, "addOperation:", v17, v19, v20, v21, v22, v23);

}

- (void)resetTTSUHH2SettingsMigrationKey
{
  void *v3;
  HMDHomeManager *v4;
  NSObject *v5;
  void *v6;
  void *v7;
  int v8;
  void *v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  v3 = (void *)MEMORY[0x227676638](self, a2);
  v4 = self;
  HMFGetOSLogHandle();
  v5 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = 138543362;
    v9 = v6;
    _os_log_impl(&dword_2218F0000, v5, OS_LOG_TYPE_INFO, "%{public}@Going to delete the TTSU HH2 settings migration key", (uint8_t *)&v8, 0xCu);

  }
  objc_autoreleasePoolPop(v3);
  -[HMDHomeManager userDefaults](v4, "userDefaults");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "removeObjectForKey:", CFSTR("mi.hh2"));

}

void __82__HMDHomeManager_ResetConfig__purgeAllRecordZones_fromDatabase_completionHandler___block_invoke(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  void *v10;
  id v11;
  NSObject *v12;
  void *v13;
  void *v14;
  void *v15;
  int v16;
  void *v17;
  __int16 v18;
  id v19;
  __int16 v20;
  id v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  v7 = a2;
  v8 = a3;
  v9 = a4;
  v10 = (void *)MEMORY[0x227676638]();
  v11 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v12 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    v16 = 138543874;
    v17 = v13;
    v18 = 2112;
    v19 = v8;
    v20 = 2112;
    v21 = v9;
    _os_log_impl(&dword_2218F0000, v12, OS_LOG_TYPE_INFO, "%{public}@[Reset Config] :Purging for zones:%@ finished with error: %@", (uint8_t *)&v16, 0x20u);

  }
  objc_autoreleasePoolPop(v10);
  v14 = _Block_copy(*(const void **)(a1 + 40));
  v15 = v14;
  if (v14)
    (*((void (**)(void *, id))v14 + 2))(v14, v9);

}

void __74__HMDHomeManager_ResetConfig__purgeShares_fromDatabase_completionHandler___block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  id v8;
  NSObject *v9;
  NSObject *v10;
  void *v11;
  void *v12;
  void *v13;
  int v14;
  void *v15;
  __int16 v16;
  id v17;
  __int16 v18;
  id v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  v5 = a2;
  v6 = a3;
  v7 = (void *)MEMORY[0x227676638]();
  v8 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v9 = objc_claimAutoreleasedReturnValue();
  v10 = v9;
  if (v6)
  {
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v5, "hmbDescription");
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      v14 = 138543874;
      v15 = v11;
      v16 = 2112;
      v17 = v12;
      v18 = 2114;
      v19 = v6;
      _os_log_impl(&dword_2218F0000, v10, OS_LOG_TYPE_ERROR, "%{public}@[Reset Config] Failed to delete record with ID %@: %{public}@", (uint8_t *)&v14, 0x20u);

    }
    objc_autoreleasePoolPop(v7);
    objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), a3);
  }
  else
  {
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
    {
      HMFGetLogIdentifier();
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      v14 = 138543618;
      v15 = v13;
      v16 = 2112;
      v17 = v5;
      _os_log_impl(&dword_2218F0000, v10, OS_LOG_TYPE_DEBUG, "%{public}@[Reset Config] Successfully deleted record with ID: %@", (uint8_t *)&v14, 0x16u);

    }
    objc_autoreleasePoolPop(v7);
  }

}

void __74__HMDHomeManager_ResetConfig__purgeShares_fromDatabase_completionHandler___block_invoke_118(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  void *v10;
  id v11;
  NSObject *v12;
  NSObject *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  int v18;
  void *v19;
  __int16 v20;
  id v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  v7 = a2;
  v8 = a3;
  v9 = a4;
  v10 = (void *)MEMORY[0x227676638]();
  v11 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v12 = objc_claimAutoreleasedReturnValue();
  v13 = v12;
  if (v9)
  {
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      v18 = 138543618;
      v19 = v14;
      v20 = 2114;
      v21 = v9;
      _os_log_impl(&dword_2218F0000, v13, OS_LOG_TYPE_ERROR, "%{public}@[Reset Config] purgeShares CKModifyRecordsOperation failed: %{public}@", (uint8_t *)&v18, 0x16u);

    }
    objc_autoreleasePoolPop(v10);
    objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), a4);
  }
  else
  {
    if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      v18 = 138543362;
      v19 = v15;
      _os_log_impl(&dword_2218F0000, v13, OS_LOG_TYPE_INFO, "%{public}@[Reset Config] purgeShares CKModifyRecordsOperation succeeded", (uint8_t *)&v18, 0xCu);

    }
    objc_autoreleasePoolPop(v10);
  }
  v16 = _Block_copy(*(const void **)(a1 + 40));
  v17 = v16;
  if (v16)
    (*((void (**)(void *, _QWORD))v16 + 2))(v16, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40));

}

void __82__HMDHomeManager_ResetConfig__purgeAllSharesFromZones_fromDatabase_dispatchGroup___block_invoke(uint64_t a1, void *a2)
{
  id v4;
  void *v5;
  id v6;
  NSObject *v7;
  void *v8;
  uint64_t v9;
  void *v10;
  id v11;
  NSObject *v12;
  NSObject *v13;
  void *v14;
  void *v15;
  const char *v16;
  NSObject *v17;
  os_log_type_t v18;
  uint32_t v19;
  int v20;
  void *v21;
  __int16 v22;
  id v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v4 = a2;
  if (v4)
  {
    objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), a2);
    v5 = (void *)MEMORY[0x227676638]();
    v6 = *(id *)(a1 + 32);
    HMFGetOSLogHandle();
    v7 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      v20 = 138543618;
      v21 = v8;
      v22 = 2112;
      v23 = v4;
      _os_log_impl(&dword_2218F0000, v7, OS_LOG_TYPE_ERROR, "%{public}@[Reset Config] purgeShares returned error %@. Will try to continue.", (uint8_t *)&v20, 0x16u);

    }
    objc_autoreleasePoolPop(v5);
  }
  if (*(_BYTE *)(a1 + 56))
  {
    v9 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40);
    v10 = (void *)MEMORY[0x227676638]();
    v11 = *(id *)(a1 + 32);
    HMFGetOSLogHandle();
    v12 = objc_claimAutoreleasedReturnValue();
    v13 = v12;
    if (v9)
    {
      if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v14 = (void *)objc_claimAutoreleasedReturnValue();
        v15 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40);
        v20 = 138543618;
        v21 = v14;
        v22 = 2112;
        v23 = v15;
        v16 = "%{public}@[Reset Config] :Purging shares of zones on HH2 failed with error: %@";
        v17 = v13;
        v18 = OS_LOG_TYPE_ERROR;
        v19 = 22;
LABEL_11:
        _os_log_impl(&dword_2218F0000, v17, v18, v16, (uint8_t *)&v20, v19);

      }
    }
    else if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      v20 = 138543362;
      v21 = v14;
      v16 = "%{public}@[Reset Config] :Purging shares of zones on HH2 succeeded";
      v17 = v13;
      v18 = OS_LOG_TYPE_INFO;
      v19 = 12;
      goto LABEL_11;
    }

    objc_autoreleasePoolPop(v10);
  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));

}

void __74__HMDHomeManager_ResetConfig__fetchAndRemoveNextBatchOfZonesFromDatabase___block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  id v8;
  NSObject *v9;
  void *v10;
  void *v11;
  void *v12;
  uint64_t v13;
  void *v14;
  id v15;
  NSObject *v16;
  void *v17;
  void *v18;
  _QWORD v19[5];
  id v20;
  uint8_t buf[4];
  void *v22;
  __int16 v23;
  void *v24;
  __int16 v25;
  id v26;
  uint64_t v27;

  v27 = *MEMORY[0x24BDAC8D0];
  v5 = a2;
  v6 = a3;
  v7 = (void *)MEMORY[0x227676638]();
  v8 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v9 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "allKeys");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543874;
    v22 = v10;
    v23 = 2112;
    v24 = v11;
    v25 = 2112;
    v26 = v6;
    _os_log_impl(&dword_2218F0000, v9, OS_LOG_TYPE_INFO, "%{public}@[Reset Config] :All fetched keys for removal %@, error: %@", buf, 0x20u);

  }
  objc_autoreleasePoolPop(v7);
  if (objc_msgSend(*(id *)(a1 + 40), "databaseScope") == 3 && objc_msgSend(v5, "count"))
  {
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24) = 1;
    objc_msgSend(*(id *)(a1 + 32), "purgeAllSharesFromZones:fromDatabase:dispatchGroup:", v5, *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
LABEL_11:
    dispatch_group_leave(*(dispatch_group_t *)(a1 + 48));
    goto LABEL_12;
  }
  if ((unint64_t)objc_msgSend(v5, "count") < 2)
  {
    v14 = (void *)MEMORY[0x227676638]();
    v15 = *(id *)(a1 + 32);
    HMFGetOSLogHandle();
    v16 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      v18 = *(void **)(a1 + 40);
      *(_DWORD *)buf = 138543618;
      v22 = v17;
      v23 = 2112;
      v24 = v18;
      _os_log_impl(&dword_2218F0000, v16, OS_LOG_TYPE_INFO, "%{public}@[Reset Config] No more zones found for removal in database %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v14);
    goto LABEL_11;
  }
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24) = 1;
  v12 = *(void **)(a1 + 32);
  v13 = *(_QWORD *)(a1 + 40);
  v19[0] = MEMORY[0x24BDAC760];
  v19[1] = 3221225472;
  v19[2] = __74__HMDHomeManager_ResetConfig__fetchAndRemoveNextBatchOfZonesFromDatabase___block_invoke_112;
  v19[3] = &unk_24E79BCC8;
  v19[4] = v12;
  v20 = *(id *)(a1 + 48);
  objc_msgSend(v12, "purgeAllRecordZones:fromDatabase:completionHandler:", v5, v13, v19);

LABEL_12:
}

void __74__HMDHomeManager_ResetConfig__fetchAndRemoveNextBatchOfZonesFromDatabase___block_invoke_112(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  NSObject *v6;
  void *v7;
  int v8;
  void *v9;
  __int16 v10;
  id v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v3 = a2;
  v4 = (void *)MEMORY[0x227676638]();
  v5 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v6 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = 138543618;
    v9 = v7;
    v10 = 2112;
    v11 = v3;
    _os_log_impl(&dword_2218F0000, v6, OS_LOG_TYPE_INFO, "%{public}@[Reset Config] :Purging of zones on HH2 finished with error: %@", (uint8_t *)&v8, 0x16u);

  }
  objc_autoreleasePoolPop(v4);
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));

}

void __67__HMDHomeManager_ResetConfig___resetHindsightWithQualityOfService___block_invoke(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  NSObject *v6;
  NSObject *v7;
  void *v8;
  const char *v9;
  NSObject *v10;
  os_log_type_t v11;
  uint32_t v12;
  int v13;
  void *v14;
  __int16 v15;
  id v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  v3 = a2;
  v4 = (void *)MEMORY[0x227676638]();
  v5 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v6 = objc_claimAutoreleasedReturnValue();
  v7 = v6;
  if (v3)
  {
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      v13 = 138543618;
      v14 = v8;
      v15 = 2114;
      v16 = v3;
      v9 = "%{public}@Failed to signal resident devices to reset hindsight configuration: %{public}@";
      v10 = v7;
      v11 = OS_LOG_TYPE_ERROR;
      v12 = 22;
LABEL_6:
      _os_log_impl(&dword_2218F0000, v10, v11, v9, (uint8_t *)&v13, v12);

    }
  }
  else if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v13 = 138543362;
    v14 = v8;
    v9 = "%{public}@Sent reset hindsight configuration message successfully";
    v10 = v7;
    v11 = OS_LOG_TYPE_INFO;
    v12 = 12;
    goto LABEL_6;
  }

  objc_autoreleasePoolPop(v4);
}

void __72__HMDHomeManager_ResetConfig__createCloudDatabaseAndPerformInitialSync___block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  id v8;
  NSObject *v9;
  void *v10;
  uint64_t v11;
  int v12;
  void *v13;
  __int16 v14;
  uint64_t v15;
  __int16 v16;
  id v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  v5 = a2;
  v6 = a3;
  v7 = (void *)MEMORY[0x227676638]();
  v8 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v9 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v11 = *(_QWORD *)(a1 + 40);
    v12 = 138543874;
    v13 = v10;
    v14 = 2112;
    v15 = v11;
    v16 = 2112;
    v17 = v6;
    _os_log_impl(&dword_2218F0000, v9, OS_LOG_TYPE_INFO, "%{public}@[Reset Config] : Initial cloud sync finished on %@ with error: %@", (uint8_t *)&v12, 0x20u);

  }
  objc_autoreleasePoolPop(v7);
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 48));

}

void __59__HMDHomeManager_ResetConfig__deleteAllZonesFromContainer___block_invoke(id *a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  NSObject *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  int v11;
  void *v12;
  __int16 v13;
  void *v14;
  __int16 v15;
  void *v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  v3 = a2;
  v4 = (void *)MEMORY[0x227676638]();
  v5 = a1[4];
  HMFGetOSLogHandle();
  v6 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(a1[5], "containerID");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "name");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v11 = 138543874;
    v12 = v7;
    v13 = 2112;
    v14 = v8;
    v15 = 2112;
    v16 = v9;
    _os_log_impl(&dword_2218F0000, v6, OS_LOG_TYPE_INFO, "%{public}@[Reset Config] : [%@] Going to delete [%@]", (uint8_t *)&v11, 0x20u);

  }
  objc_autoreleasePoolPop(v4);
  objc_msgSend(a1[5], "removePrivateZoneWithID:", v3);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(a1[6], "addObject:", v10);

}

void __59__HMDHomeManager_ResetConfig__deleteAllZonesFromContainer___block_invoke_97(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  id v5;
  void *v6;
  void *v7;
  id v8;

  v3 = *(void **)(a1 + 32);
  v4 = *(void **)(a1 + 40);
  v5 = a2;
  objc_msgSend(v4, "localDatabase");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "deleteLocalZone:localDatabase:containerID:", v5, v6, *(_QWORD *)(a1 + 48));
  v8 = (id)objc_claimAutoreleasedReturnValue();

  v7 = v8;
  if (v8)
  {
    objc_msgSend(*(id *)(a1 + 56), "addObject:", v8);
    v7 = v8;
  }

}

void __59__HMDHomeManager_ResetConfig__deleteAllZonesFromContainer___block_invoke_2(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  id v8;
  NSObject *v9;
  void *v10;
  int v11;
  void *v12;
  __int16 v13;
  id v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v5 = a2;
  v6 = a3;
  v7 = (void *)MEMORY[0x227676638]();
  v8 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v9 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v11 = 138543618;
    v12 = v10;
    v13 = 2112;
    v14 = v6;
    _os_log_impl(&dword_2218F0000, v9, OS_LOG_TYPE_INFO, "%{public}@[Reset Config] : >> Deleting cloud & local zones finished with error: %@", (uint8_t *)&v11, 0x16u);

  }
  objc_autoreleasePoolPop(v7);
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));

}

uint64_t __71__HMDHomeManager_ResetConfig__deleteZonesFromLegacyAndCameraContainers__block_invoke(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(a1 + 32), "deleteAllZonesFromContainer:", a2);
}

void __50__HMDHomeManager_ResetConfig___eraseLocalMetadata__block_invoke(uint64_t a1)
{
  void *v2;
  id v3;
  NSObject *v4;
  void *v5;
  int v6;
  void *v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  v2 = (void *)MEMORY[0x227676638]();
  v3 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = 138543362;
    v7 = v5;
    _os_log_impl(&dword_2218F0000, v4, OS_LOG_TYPE_INFO, "%{public}@[Reset Config] : Finished purging mobile assets]", (uint8_t *)&v6, 0xCu);

  }
  objc_autoreleasePoolPop(v2);
}

void __111__HMDHomeManager_ResetConfig___eraseLocalHomeConfigurationAndDeleteMetadata_reason_completionQueue_completion___block_invoke(uint64_t a1)
{
  id WeakRetained;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  void *v10;
  id v11;
  void *v12;
  id obj;
  _QWORD v14[5];
  id v15;
  id v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  _BYTE v21[128];
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v3 = WeakRetained;
  if (WeakRetained)
  {
    v19 = 0u;
    v20 = 0u;
    v17 = 0u;
    v18 = 0u;
    objc_msgSend(WeakRetained, "homes");
    obj = (id)objc_claimAutoreleasedReturnValue();
    v4 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v17, v21, 16);
    if (v4)
    {
      v5 = v4;
      v6 = *(_QWORD *)v18;
      do
      {
        v7 = 0;
        do
        {
          if (*(_QWORD *)v18 != v6)
            objc_enumerationMutation(obj);
          v8 = *(void **)(*((_QWORD *)&v17 + 1) + 8 * v7);
          dispatch_group_enter(*(dispatch_group_t *)(a1 + 32));
          objc_msgSend(v8, "name");
          v9 = (void *)objc_claimAutoreleasedReturnValue();
          v10 = (void *)MEMORY[0x24BE3F1B0];
          v14[0] = MEMORY[0x24BDAC760];
          v14[1] = 3221225472;
          v14[2] = __111__HMDHomeManager_ResetConfig___eraseLocalHomeConfigurationAndDeleteMetadata_reason_completionQueue_completion___block_invoke_2;
          v14[3] = &unk_24E795C28;
          v14[4] = v3;
          v15 = v9;
          v16 = *(id *)(a1 + 32);
          v11 = v9;
          objc_msgSend(v10, "messageWithName:messagePayload:responseHandler:", CFSTR("kResetConfigRequestKey"), 0, v14);
          v12 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v3, "_removeHome:withMessage:saveToStore:notifyUsers:shouldRemovePairings:", v8, v12, 0, 0, 1);

          ++v7;
        }
        while (v5 != v7);
        v5 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v17, v21, 16);
      }
      while (v5);
    }

    objc_msgSend(v3, "setHomeManagerZoneFirstFetch:", 1);
    dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
  }

}

void __111__HMDHomeManager_ResetConfig___eraseLocalHomeConfigurationAndDeleteMetadata_reason_completionQueue_completion___block_invoke_89(uint64_t a1)
{
  id WeakRetained;
  void *v3;
  void *v4;
  int v5;
  void *v6;
  NSObject *v7;
  NSObject *v8;
  void *v9;
  const char *v10;
  NSObject *v11;
  os_log_type_t v12;
  void *v13;
  NSObject *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  NSObject *v19;
  _QWORD block[4];
  id v21;
  uint8_t buf[4];
  void *v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  v3 = WeakRetained;
  if (!WeakRetained)
    goto LABEL_14;
  objc_msgSend(WeakRetained, "setPrimaryHomeUUID:", 0);
  objc_msgSend(v3, "_updateCurrentHomeIfNecessary");
  objc_msgSend(MEMORY[0x24BE1BC08], "systemStore");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v4, "removeControllerKeyPairWithError:", 0);
  v6 = (void *)MEMORY[0x227676638]();
  HMFGetOSLogHandle();
  v7 = objc_claimAutoreleasedReturnValue();
  v8 = v7;
  if (v5)
  {
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v23 = v9;
      v10 = "%{public}@[Reset Config] : Removed controller key";
      v11 = v8;
      v12 = OS_LOG_TYPE_INFO;
LABEL_7:
      _os_log_impl(&dword_2218F0000, v11, v12, v10, buf, 0xCu);

    }
  }
  else if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
  {
    HMFGetLogIdentifier();
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543362;
    v23 = v9;
    v10 = "%{public}@[Reset Config] : Failed removing controller key";
    v11 = v8;
    v12 = OS_LOG_TYPE_ERROR;
    goto LABEL_7;
  }

  objc_autoreleasePoolPop(v6);
  v13 = (void *)MEMORY[0x227676638](objc_msgSend(v3, "_eraseLocalHomeConfigurationWithReason:", *(_QWORD *)(a1 + 56)));
  HMFGetOSLogHandle();
  v14 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543362;
    v23 = v15;
    _os_log_impl(&dword_2218F0000, v14, OS_LOG_TYPE_INFO, "%{public}@[Reset Config] : Completed configuration reset", buf, 0xCu);

  }
  objc_autoreleasePoolPop(v13);
  objc_msgSend(v3, "syncManager");
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v16, "cancelOperations");

  objc_msgSend(v3, "syncManager");
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v17, "resume");

  v18 = *(void **)(a1 + 40);
  if (v18)
  {
    v19 = *(NSObject **)(a1 + 32);
    if (v19)
    {
      block[0] = MEMORY[0x24BDAC760];
      block[1] = 3221225472;
      block[2] = __111__HMDHomeManager_ResetConfig___eraseLocalHomeConfigurationAndDeleteMetadata_reason_completionQueue_completion___block_invoke_90;
      block[3] = &unk_24E799CC8;
      v21 = v18;
      dispatch_async(v19, block);

    }
  }

LABEL_14:
}

uint64_t __111__HMDHomeManager_ResetConfig___eraseLocalHomeConfigurationAndDeleteMetadata_reason_completionQueue_completion___block_invoke_90(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void __111__HMDHomeManager_ResetConfig___eraseLocalHomeConfigurationAndDeleteMetadata_reason_completionQueue_completion___block_invoke_2(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  id v8;
  NSObject *v9;
  void *v10;
  uint64_t v11;
  int v12;
  void *v13;
  __int16 v14;
  uint64_t v15;
  __int16 v16;
  id v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  v5 = a2;
  v6 = a3;
  v7 = (void *)MEMORY[0x227676638]();
  v8 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v9 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v11 = *(_QWORD *)(a1 + 40);
    v12 = 138543874;
    v13 = v10;
    v14 = 2112;
    v15 = v11;
    v16 = 2112;
    v17 = v5;
    _os_log_impl(&dword_2218F0000, v9, OS_LOG_TYPE_INFO, "%{public}@[Reset Config] : Removed home %@ - error %@", (uint8_t *)&v12, 0x20u);

  }
  objc_autoreleasePoolPop(v7);
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 48));

}

uint64_t __70__HMDHomeManager_ResetConfig___eraseLocalHomeConfigurationWithReason___block_invoke(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "fulfillWithValue:", 0);
}

uint64_t __69__HMDHomeManager_ResetConfig___eraseConfiguration_completionHandler___block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

+ (void)_eraseAllAccessoryKeysAndIdentifiers
{
  void *v3;
  int v4;
  id v5;
  void *v6;
  id v7;
  NSObject *v8;
  NSObject *v9;
  void *v10;
  const char *v11;
  NSObject *v12;
  os_log_type_t v13;
  uint32_t v14;
  int v15;
  id v16;
  void *v17;
  id v18;
  NSObject *v19;
  _BOOL4 v20;
  void *v21;
  const char *v22;
  NSObject *v23;
  uint32_t v24;
  id v25;
  id v26;
  uint8_t buf[4];
  void *v28;
  __int16 v29;
  id v30;
  uint64_t v31;

  v31 = *MEMORY[0x24BDAC8D0];
  objc_msgSend(MEMORY[0x24BE1BC08], "systemStore");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v26 = 0;
  v4 = objc_msgSend(v3, "removeAllAccessoryKeys:", &v26);
  v5 = v26;
  v6 = (void *)MEMORY[0x227676638]();
  v7 = a1;
  HMFGetOSLogHandle();
  v8 = objc_claimAutoreleasedReturnValue();
  v9 = v8;
  if (v4)
  {
    if (!os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
      goto LABEL_7;
    HMFGetLogIdentifier();
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543362;
    v28 = v10;
    v11 = "%{public}@[Reset Config] : Removed all accessory keys from controller";
    v12 = v9;
    v13 = OS_LOG_TYPE_INFO;
    v14 = 12;
  }
  else
  {
    if (!os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      goto LABEL_7;
    HMFGetLogIdentifier();
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543618;
    v28 = v10;
    v29 = 2112;
    v30 = v5;
    v11 = "%{public}@[Reset Config] : Could not remove all accessory keys from controller (%@)";
    v12 = v9;
    v13 = OS_LOG_TYPE_ERROR;
    v14 = 22;
  }
  _os_log_impl(&dword_2218F0000, v12, v13, v11, buf, v14);

LABEL_7:
  objc_autoreleasePoolPop(v6);
  v25 = v5;
  v15 = objc_msgSend(v3, "deleteAllPeripheralIdentifiers:", &v25);
  v16 = v25;

  v17 = (void *)MEMORY[0x227676638]();
  v18 = v7;
  HMFGetOSLogHandle();
  v19 = objc_claimAutoreleasedReturnValue();
  v20 = os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT);
  if (v15)
  {
    if (v20)
    {
      HMFGetLogIdentifier();
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v28 = v21;
      v22 = "%{public}@[Reset Config] : Removed all Bluetooth peripheral identifiers.";
      v23 = v19;
      v24 = 12;
LABEL_12:
      _os_log_impl(&dword_2218F0000, v23, OS_LOG_TYPE_DEFAULT, v22, buf, v24);

    }
  }
  else if (v20)
  {
    HMFGetLogIdentifier();
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543618;
    v28 = v21;
    v29 = 2112;
    v30 = v16;
    v22 = "%{public}@[Reset Config] : Could not remove all Bluetooth peripheral identifiers (%@).";
    v23 = v19;
    v24 = 22;
    goto LABEL_12;
  }

  objc_autoreleasePoolPop(v17);
}

+ (void)relaunchHomedDueToResetConfigurationWithDelay:(double)a3
{
  void *v5;
  id v6;
  NSObject *v7;
  void *v8;
  dispatch_time_t v9;
  _QWORD block[5];
  uint8_t buf[4];
  void *v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v5 = (void *)MEMORY[0x227676638](a1, a2);
  v6 = a1;
  HMFGetOSLogHandle();
  v7 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543362;
    v12 = v8;
    _os_log_impl(&dword_2218F0000, v7, OS_LOG_TYPE_INFO, "%{public}@Scheduling homed relaunch due to reset configuration. (Either user logged out or user issued reset-config SPI", buf, 0xCu);

  }
  objc_autoreleasePoolPop(v5);
  v9 = dispatch_time(0, (uint64_t)a3);
  block[0] = MEMORY[0x24BDAC760];
  block[1] = 3221225472;
  block[2] = __77__HMDHomeManager_ResetConfig__relaunchHomedDueToResetConfigurationWithDelay___block_invoke;
  block[3] = &__block_descriptor_40_e5_v8__0l;
  block[4] = v6;
  dispatch_after(v9, MEMORY[0x24BDAC9B8], block);
}

+ (id)getContainersToCleanUp
{
  void *v2;
  void *v3;
  void *v4;
  _QWORD v6[4];

  v6[3] = *MEMORY[0x24BDAC8D0];
  v2 = (void *)MEMORY[0x24BDBCF20];
  v6[0] = CFSTR("com.apple.homekit");
  v6[1] = CFSTR("com.apple.homekit.camera.clips");
  v6[2] = CFSTR("com.apple.willow.config");
  objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", v6, 3);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "setWithArray:", v3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  return v4;
}

void __77__HMDHomeManager_ResetConfig__relaunchHomedDueToResetConfigurationWithDelay___block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  id v5;
  NSObject *v6;
  void *v7;
  int v8;
  void *v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  +[HMDLaunchHandler sharedHandler](HMDLaunchHandler, "sharedHandler");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = (void *)objc_msgSend(objc_alloc(MEMORY[0x24BDD1880]), "initWithUUIDString:", CFSTR("1CAEDC10-E3E5-41A4-BB17-A9EEBA14A938"));
  objc_msgSend(v2, "registerRelaunchClientWithUUID:", v3);

  v4 = (void *)MEMORY[0x227676638]();
  v5 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v6 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    HMFGetLogIdentifier();
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = 138543362;
    v9 = v7;
    _os_log_impl(&dword_2218F0000, v6, OS_LOG_TYPE_DEFAULT, "%{public}@Going to relaunch homed due to resetConfiguration", (uint8_t *)&v8, 0xCu);

  }
  objc_autoreleasePoolPop(v4);
  _Exit(0);
}

- (void)sendFragmentedMessageForData:(id)a3 objectUUID:(id)a4 withMessageName:(id)a5 toUser:(id)a6 destination:(id)a7 completionHandler:(id)a8
{
  id v14;
  id v15;
  id v16;
  void (**v17)(id, void *, _QWORD);
  void *v18;
  void *v19;
  void *v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t i;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  NSObject *v34;
  void *v35;
  HMDHomeManager *v36;
  void *v37;
  void (**v38)(id, void *, _QWORD);
  id v39;
  id v40;
  id v41;
  uint64_t v42;
  id v43;
  id v44;
  void *v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  _QWORD v50[6];
  _QWORD v51[6];
  uint8_t v52[128];
  uint8_t buf[4];
  void *v54;
  uint64_t v55;

  v55 = *MEMORY[0x24BDAC8D0];
  v14 = a3;
  v44 = a4;
  v43 = a5;
  v15 = a6;
  v16 = a7;
  v17 = (void (**)(id, void *, _QWORD))a8;
  objc_msgSend(MEMORY[0x24BDD1880], "UUID");
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v18, "UUIDString");
  v45 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(MEMORY[0x24BE1BAF0], "fragmentationPacketsForData:maxLength:transactionIdentifier:", v14, maximumDataSyncFragmentSize, -[HMDHomeManager _nextTransactionIdentifier](self, "_nextTransactionIdentifier"));
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  if (v19)
  {
    v36 = self;
    v38 = v17;
    v39 = v16;
    v40 = v15;
    v41 = v14;
    objc_msgSend(MEMORY[0x24BDBCEB8], "array");
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    v46 = 0u;
    v47 = 0u;
    v48 = 0u;
    v49 = 0u;
    v37 = v19;
    v21 = v19;
    v22 = objc_msgSend(v21, "countByEnumeratingWithState:objects:count:", &v46, v52, 16);
    if (v22)
    {
      v23 = v22;
      v42 = *(_QWORD *)v47;
      v24 = 1;
      do
      {
        for (i = 0; i != v23; ++i)
        {
          v26 = v20;
          if (*(_QWORD *)v47 != v42)
            objc_enumerationMutation(v21);
          v27 = *(void **)(*((_QWORD *)&v46 + 1) + 8 * i);
          v50[0] = CFSTR("kHomeUUID");
          v50[1] = CFSTR("kHomeDataFragmentIdentityKey");
          v51[0] = v44;
          v51[1] = v45;
          v50[2] = CFSTR("kHomeDataFragmentKey");
          objc_msgSend(v27, "serialize");
          v28 = (void *)objc_claimAutoreleasedReturnValue();
          v51[2] = v28;
          v50[3] = CFSTR("kHomeDataFragmentNumberKey");
          objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedInteger:", v24 + i);
          v29 = (void *)objc_claimAutoreleasedReturnValue();
          v51[3] = v29;
          v50[4] = CFSTR("kHomeDataFragmentTotalCountKey");
          objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedInteger:", objc_msgSend(v21, "count"));
          v30 = (void *)objc_claimAutoreleasedReturnValue();
          v50[5] = CFSTR("kDataFragmentMessageNameKey");
          v51[4] = v30;
          v51[5] = v43;
          objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v51, v50, 6);
          v31 = (void *)objc_claimAutoreleasedReturnValue();

          objc_msgSend(MEMORY[0x24BE3F1D0], "messageWithName:messagePayload:", CFSTR("kHomeDataFragmentedSyncRequestKey"), v31);
          v32 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v32, "setRemoteRestriction:", 17);
          v20 = v26;
          objc_msgSend(v26, "addObject:", v32);

        }
        v24 += i;
        v23 = objc_msgSend(v21, "countByEnumeratingWithState:objects:count:", &v46, v52, 16);
      }
      while (v23);
    }

    v16 = v39;
    v15 = v40;
    v17 = v38;
    -[HMDHomeManager _sendFragmentedMessage:messageIndex:messageIdentity:userID:destination:completionHandler:](v36, "_sendFragmentedMessage:messageIndex:messageIdentity:userID:destination:completionHandler:", v20, 0, v45, v40, v39, v38);
    v14 = v41;
    v19 = v37;
    goto LABEL_14;
  }
  v33 = (void *)MEMORY[0x227676638]();
  HMFGetOSLogHandle();
  v34 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR))
  {
    HMFGetLogIdentifier();
    v35 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543362;
    v54 = v35;
    _os_log_impl(&dword_2218F0000, v34, OS_LOG_TYPE_ERROR, "%{public}@Failed to fragment data sync, aborting", buf, 0xCu);

  }
  objc_autoreleasePoolPop(v33);
  if (v17)
  {
    objc_msgSend(MEMORY[0x24BDD1540], "hmErrorWithCode:", 3);
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    v17[2](v17, v20, 0);
LABEL_14:

  }
}

- (void)_fragmentationStream:(id)a3 didCloseWithError:(id)a4
{
  id v5;
  void *v6;
  void *v7;
  id v8;
  void *v9;
  uint64_t v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  id v15;
  BOOL v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  _BYTE v21[128];
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  v5 = a3;
  v17 = 0u;
  v18 = 0u;
  v19 = 0u;
  v20 = 0u;
  -[HMDHomeManager pendingFragmentationStream](self, "pendingFragmentationStream", 0);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "allKeys");
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  v8 = (id)objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v17, v21, 16);
  v9 = 0;
  if (v8)
  {
    v10 = *(_QWORD *)v18;
LABEL_3:
    v11 = 0;
    v12 = v9;
    while (1)
    {
      if (*(_QWORD *)v18 != v10)
        objc_enumerationMutation(v7);
      v13 = *(void **)(*((_QWORD *)&v17 + 1) + 8 * (_QWORD)v11);
      -[HMDHomeManager pendingFragmentationStream](self, "pendingFragmentationStream");
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v14, "objectForKeyedSubscript:", v13);
      v9 = (void *)objc_claimAutoreleasedReturnValue();

      objc_msgSend(v9, "fragmentationStream");
      v15 = (id)objc_claimAutoreleasedReturnValue();

      if (v15 == v5)
        break;
      v11 = (char *)v11 + 1;
      v12 = v9;
      if (v8 == v11)
      {
        v8 = (id)objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v17, v21, 16);
        if (v8)
          goto LABEL_3;
        goto LABEL_15;
      }
    }
    v8 = v13;

    if (v8)
      v16 = v9 == 0;
    else
      v16 = 1;
    if (!v16)
    {
      objc_msgSend(v9, "close");
      -[HMDHomeManager pendingFragmentationStream](self, "pendingFragmentationStream");
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v7, "removeObjectForKey:", v8);
      goto LABEL_15;
    }
  }
  else
  {
LABEL_15:

  }
}

- (void)_fragmentationStream:(id)a3 didReceiveData:(id)a4 transactionIdentifier:(unsigned __int16)a5 error:(id)a6
{
  id v9;
  id v10;
  id v11;
  void *v12;
  void *v13;
  id v14;
  void *v15;
  uint64_t v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  id v21;
  BOOL v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  NSObject *v34;
  void *v36;
  void *v37;
  void *v38;
  id v39;
  id v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  const __CFString *v45;
  id v46;
  const __CFString *v47;
  id v48;
  uint8_t buf[4];
  void *v50;
  __int16 v51;
  void *v52;
  _BYTE v53[128];
  uint64_t v54;

  v54 = *MEMORY[0x24BDAC8D0];
  v9 = a3;
  v10 = a4;
  v11 = a6;
  if (v10)
  {
    v43 = 0u;
    v44 = 0u;
    v41 = 0u;
    v42 = 0u;
    -[HMDHomeManager pendingFragmentationStream](self, "pendingFragmentationStream");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "allKeys");
    v13 = (void *)objc_claimAutoreleasedReturnValue();

    v14 = (id)objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v41, v53, 16);
    if (v14)
    {
      v39 = v11;
      v40 = v10;
      v15 = 0;
      v16 = *(_QWORD *)v42;
LABEL_4:
      v17 = 0;
      v18 = v15;
      while (1)
      {
        if (*(_QWORD *)v42 != v16)
          objc_enumerationMutation(v13);
        v19 = *(void **)(*((_QWORD *)&v41 + 1) + 8 * (_QWORD)v17);
        -[HMDHomeManager pendingFragmentationStream](self, "pendingFragmentationStream", v39);
        v20 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v20, "objectForKeyedSubscript:", v19);
        v15 = (void *)objc_claimAutoreleasedReturnValue();

        objc_msgSend(v15, "fragmentationStream");
        v21 = (id)objc_claimAutoreleasedReturnValue();

        if (v21 == v9)
          break;
        v17 = (char *)v17 + 1;
        v18 = v15;
        if (v14 == v17)
        {
          v14 = (id)objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v41, v53, 16);
          if (v14)
            goto LABEL_4;
          v11 = v39;
          v10 = v40;
          goto LABEL_24;
        }
      }
      v14 = v19;

      if (v14)
        v22 = v15 == 0;
      else
        v22 = 1;
      if (v22)
      {
        v11 = v39;
        v10 = v40;
        goto LABEL_25;
      }
      v23 = (void *)MEMORY[0x24BE3F1B0];
      objc_msgSend(v15, "lastMessage");
      v24 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v23, "messageWithMessage:messagePayload:", v24, 0);
      v25 = (void *)objc_claimAutoreleasedReturnValue();
      v13 = (void *)objc_msgSend(v25, "mutableCopy");

      objc_msgSend(v15, "lastMessage");
      v26 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v26, "destination");
      v27 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v13, "setDestination:", v27);

      objc_msgSend(v15, "lastMessage");
      v28 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v28, "remoteSenderContext");
      v29 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v13, "setRemoteSenderContext:", v29);

      objc_msgSend(v15, "close");
      -[HMDHomeManager pendingFragmentationStream](self, "pendingFragmentationStream");
      v30 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v30, "removeObjectForKey:", v14);

      objc_msgSend(v15, "lastMessage");
      v31 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v31, "stringForKey:", CFSTR("kDataFragmentMessageNameKey"));
      v32 = (void *)objc_claimAutoreleasedReturnValue();

      v33 = (void *)MEMORY[0x227676638]();
      HMFGetOSLogHandle();
      v34 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v34, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v36 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        v50 = v36;
        v51 = 2112;
        v52 = v32;
        _os_log_impl(&dword_2218F0000, v34, OS_LOG_TYPE_INFO, "%{public}@Full message received with name %@, calling the handle method.", buf, 0x16u);

      }
      objc_autoreleasePoolPop(v33);
      v10 = v40;
      if (objc_msgSend(v32, "isEqualToString:", CFSTR("kMetadataDataSyncRequestKey")))
      {
        v47 = CFSTR("kHAPMetadataDataKey");
        v48 = v40;
        objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", &v48, &v47, 1);
        v37 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v13, "setMessagePayload:", v37);

        -[HMDHomeManager _handleMetadataSync:](self, "_handleMetadataSync:", v13);
      }
      else
      {
        v45 = CFSTR("kHomeDataKey");
        v46 = v40;
        objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", &v46, &v45, 1);
        v38 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v13, "setMessagePayload:", v38);

        -[HMDHomeManager _handleHomeDataSync:](self, "_handleHomeDataSync:", v13);
      }
      v11 = v39;

    }
    else
    {
      v15 = 0;
    }
LABEL_24:

LABEL_25:
  }

}

- (void)_sendFragmentedMessage:(id)a3 messageIndex:(unint64_t)a4 messageIdentity:(id)a5 userID:(id)a6 destination:(id)a7 completionHandler:(id)a8
{
  id v14;
  id v15;
  id v16;
  id v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  _QWORD v28[4];
  id v29;
  id v30;
  id v31;
  id v32;
  id v33;
  id v34[2];
  id location;

  v14 = a3;
  v15 = a5;
  v16 = a6;
  v27 = a7;
  v17 = a8;
  objc_initWeak(&location, self);
  -[HMDHomeManager messageDispatcher](self, "messageDispatcher");
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v14, "objectAtIndexedSubscript:", a4);
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHomeManager uuid](self, "uuid");
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHomeManager workQueue](self, "workQueue");
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  v28[0] = MEMORY[0x24BDAC760];
  v28[1] = 3221225472;
  v28[2] = __124__HMDHomeManager_FragmentMessage___sendFragmentedMessage_messageIndex_messageIdentity_userID_destination_completionHandler___block_invoke;
  v28[3] = &unk_24E7938C8;
  objc_copyWeak(v34, &location);
  v34[1] = (id)a4;
  v22 = v14;
  v29 = v22;
  v23 = v15;
  v30 = v23;
  v24 = v17;
  v33 = v24;
  v25 = v16;
  v31 = v25;
  v26 = v27;
  v32 = v26;
  objc_msgSend(v18, "sendSecureMessage:target:userID:destination:responseQueue:responseHandler:", v19, v20, v25, v26, v21, v28);

  objc_destroyWeak(v34);
  objc_destroyWeak(&location);

}

void __124__HMDHomeManager_FragmentMessage___sendFragmentedMessage_messageIndex_messageIdentity_userID_destination_completionHandler___block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id WeakRetained;
  uint64_t v8;
  void *v9;
  NSObject *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  NSObject *v15;
  void *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  id v30;
  _QWORD v31[2];
  _QWORD v32[2];
  uint8_t buf[4];
  void *v34;
  __int16 v35;
  void *v36;
  __int16 v37;
  uint64_t v38;
  __int16 v39;
  uint64_t v40;
  uint64_t v41;

  v41 = *MEMORY[0x24BDAC8D0];
  v5 = a2;
  v6 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 72));
  if (WeakRetained)
  {
    v8 = *(_QWORD *)(a1 + 80);
    v9 = (void *)MEMORY[0x227676638]();
    HMFGetOSLogHandle();
    v10 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      v12 = objc_msgSend(*(id *)(a1 + 32), "count");
      v13 = *(_QWORD *)(a1 + 40);
      *(_DWORD *)buf = 138544130;
      v34 = v11;
      v35 = 2048;
      v36 = (void *)(v8 + 1);
      v37 = 2048;
      v38 = v12;
      v39 = 2112;
      v40 = v13;
      _os_log_impl(&dword_2218F0000, v10, OS_LOG_TYPE_INFO, "%{public}@Sent packet %tu/%tu with identity %@", buf, 0x2Au);

    }
    objc_autoreleasePoolPop(v9);
    if (v5)
    {
      v30 = v6;
      v14 = (void *)MEMORY[0x227676638]();
      HMFGetOSLogHandle();
      v15 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v16 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v5, "localizedDescription");
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        v18 = *(_QWORD *)(a1 + 48);
        *(_DWORD *)buf = 138543874;
        v34 = v16;
        v35 = 2112;
        v36 = v17;
        v37 = 2112;
        v38 = v18;
        _os_log_impl(&dword_2218F0000, v15, OS_LOG_TYPE_INFO, "%{public}@Received %@ from user %@, cancel message", buf, 0x20u);

      }
      objc_autoreleasePoolPop(v14);
      v19 = *(_QWORD *)(a1 + 40);
      v31[0] = CFSTR("kHomeDataFragmentIdentityKey");
      v31[1] = CFSTR("kHomeDataFragmentNumberKey");
      v32[0] = v19;
      v32[1] = &unk_24E96D070;
      objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v32, v31, 2);
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x24BE3F1B0], "messageWithName:messagePayload:", CFSTR("kHomeDataFragmentedSyncRequestKey"), v20);
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(WeakRetained, "messageDispatcher");
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(WeakRetained, "uuid");
      v23 = (void *)objc_claimAutoreleasedReturnValue();
      v24 = *(_QWORD *)(a1 + 48);
      v25 = *(_QWORD *)(a1 + 56);
      objc_msgSend(WeakRetained, "workQueue");
      v26 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v22, "sendSecureMessage:target:userID:destination:responseQueue:responseHandler:", v21, v23, v24, v25, v26, &__block_literal_global_214059);

      v27 = *(_QWORD *)(a1 + 64);
      v6 = v30;
      if (v27)
        (*(void (**)(uint64_t, id, id))(v27 + 16))(v27, v5, v30);

    }
    else
    {
      v28 = *(_QWORD *)(a1 + 80);
      if (v28 == objc_msgSend(*(id *)(a1 + 32), "count") - 1
        || objc_msgSend(v6, "hmf_BOOLForKey:", CFSTR("kDataSyncResponseCancelKey")))
      {
        v29 = *(_QWORD *)(a1 + 64);
        if (v29)
          (*(void (**)(uint64_t, _QWORD, id))(v29 + 16))(v29, 0, v6);
      }
      else
      {
        objc_msgSend(WeakRetained, "_sendFragmentedMessage:messageIndex:messageIdentity:userID:destination:completionHandler:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 80) + 1, *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64));
      }
    }
  }

}

- (void)_maybeConfigureDuplicateUserModelChecker
{
  NSObject *v3;
  _QWORD block[5];

  -[HMDHomeManager workQueue](self, "workQueue");
  v3 = objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x24BDAC760];
  block[1] = 3221225472;
  block[2] = __85__HMDHomeManager_HH2DuplicateUserModelsFix___maybeConfigureDuplicateUserModelChecker__block_invoke;
  block[3] = &unk_24E79C240;
  block[4] = self;
  dispatch_async(v3, block);

}

void __85__HMDHomeManager_HH2DuplicateUserModelsFix___maybeConfigureDuplicateUserModelChecker__block_invoke(uint64_t a1)
{
  -[HMDHomeManager _scheduleNextCheck](*(void **)(a1 + 32));
}

- (void)_scheduleNextCheck
{
  NSObject *v2;
  void *v3;
  int v4;
  void *v5;
  id v6;
  NSObject *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  void *v18;
  void *v19;
  uint64_t v20;
  double v21;
  double v22;
  void *v23;
  id v24;
  NSObject *v25;
  void *v26;
  void *v27;
  dispatch_time_t v28;
  NSObject *v29;
  _QWORD block[4];
  id v31;
  uint8_t buf[4];
  void *v33;
  __int16 v34;
  void *v35;
  __int16 v36;
  unint64_t v37;
  uint64_t v38;

  v38 = *MEMORY[0x24BDAC8D0];
  if (a1)
  {
    objc_msgSend(a1, "workQueue");
    v2 = objc_claimAutoreleasedReturnValue();
    dispatch_assert_queue_V2(v2);

    objc_msgSend(a1, "idsServerBag");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    v4 = objc_msgSend(v3, "hh2SuppressDuplicateUserModelBulletins");

    if (v4)
    {
      v5 = (void *)MEMORY[0x227676638]();
      v6 = a1;
      HMFGetOSLogHandle();
      v7 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543362;
        v33 = v8;
        _os_log_impl(&dword_2218F0000, v7, OS_LOG_TYPE_INFO, "%{public}@Duplicate user model checker is disabled via server flags", buf, 0xCu);

      }
      objc_autoreleasePoolPop(v5);
    }
    else
    {
      objc_msgSend(MEMORY[0x24BDBCE60], "now");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x24BDBCE48], "currentCalendar");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v10, "components:fromDate:", 0x200000, v9);
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      if (isInternalBuild())
      {
        objc_msgSend(MEMORY[0x24BE3F248], "sharedPreferences");
        v12 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v12, "preferenceForKey:", CFSTR("hh2DuplicateUserModelsFixHour"));
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v13, "numberValue");
        v14 = (void *)objc_claimAutoreleasedReturnValue();

        if (v14)
          v15 = objc_msgSend(v14, "integerValue");
        else
          v15 = 14;
        objc_msgSend(v12, "preferenceForKey:", CFSTR("hh2DuplicateUserModelsFixMinute"));
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v17, "numberValue");
        v18 = (void *)objc_claimAutoreleasedReturnValue();

        if (v18)
          v16 = objc_msgSend(v18, "integerValue");
        else
          v16 = 0;

      }
      else
      {
        v16 = 0;
        v15 = 14;
      }
      objc_msgSend(v11, "setHour:", v15);
      objc_msgSend(v11, "setMinute:", v16);
      objc_msgSend(v10, "nextDateAfterDate:matchingComponents:options:", v9, v11, 1024);
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      v20 = objc_msgSend(v19, "timeIntervalSinceDate:", v9);
      v22 = v21;
      v23 = (void *)MEMORY[0x227676638](v20);
      v24 = a1;
      HMFGetOSLogHandle();
      v25 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v25, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v26 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v19, "hmf_localTimeDescription");
        v27 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543874;
        v33 = v26;
        v34 = 2112;
        v35 = v27;
        v36 = 2048;
        v37 = (unint64_t)v22;
        _os_log_impl(&dword_2218F0000, v25, OS_LOG_TYPE_INFO, "%{public}@Setting duplicate user model checker timer for %@ (%llu seconds from now)", buf, 0x20u);

      }
      objc_autoreleasePoolPop(v23);
      objc_initWeak((id *)buf, v24);
      v28 = dispatch_time(0, (uint64_t)(v22 * 1000000000.0));
      objc_msgSend(v24, "workQueue");
      v29 = objc_claimAutoreleasedReturnValue();
      block[0] = MEMORY[0x24BDAC760];
      block[1] = 3221225472;
      block[2] = __63__HMDHomeManager_HH2DuplicateUserModelsFix___scheduleNextCheck__block_invoke;
      block[3] = &unk_24E797318;
      objc_copyWeak(&v31, (id *)buf);
      dispatch_after(v28, v29, block);

      objc_destroyWeak(&v31);
      objc_destroyWeak((id *)buf);

    }
  }
}

void __63__HMDHomeManager_HH2DuplicateUserModelsFix___scheduleNextCheck__block_invoke(uint64_t a1)
{
  id WeakRetained;
  NSObject *v2;
  void *v3;
  int v4;
  void *v5;
  id v6;
  NSObject *v7;
  void *v8;
  const char *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  id v14;
  NSObject *v15;
  void *v16;
  void *v17;
  uint64_t v18;
  void *v19;
  id v20;
  NSObject *v21;
  NSObject *v22;
  void *v23;
  void *v24;
  HMDHomeKitVersion *v25;
  id v26;
  HMDHomeKitVersion *v27;
  id v28;
  void *v29;
  id v30;
  _QWORD v31[5];
  HMDHomeKitVersion *v32;
  id v33;
  uint8_t buf[4];
  void *v35;
  __int16 v36;
  void *v37;
  uint64_t v38;

  v38 = *MEMORY[0x24BDAC8D0];
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v30 = WeakRetained;
    objc_msgSend(WeakRetained, "workQueue");
    v2 = objc_claimAutoreleasedReturnValue();
    dispatch_assert_queue_V2(v2);

    objc_msgSend(v30, "idsServerBag");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    v4 = objc_msgSend(v3, "hh2SuppressDuplicateUserModelBulletins");

    if (v4)
    {
      v5 = (void *)MEMORY[0x227676638]();
      v6 = v30;
      HMFGetOSLogHandle();
      v7 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543362;
        v35 = v8;
        v9 = "%{public}@Duplicate user model checker is disabled via server flags";
LABEL_14:
        _os_log_impl(&dword_2218F0000, v7, OS_LOG_TYPE_INFO, v9, buf, 0xCu);

      }
    }
    else
    {
      if ((isThisDeviceDesignatedFMFDevice() & 1) != 0)
      {
        objc_msgSend(v30, "backingStore");
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v10, "context");
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v11, "managedObjectContext");
        v12 = (void *)objc_claimAutoreleasedReturnValue();

        v13 = (void *)MEMORY[0x227676638]();
        v14 = v30;
        HMFGetOSLogHandle();
        v15 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
        {
          HMFGetLogIdentifier();
          v16 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543362;
          v35 = v16;
          _os_log_impl(&dword_2218F0000, v15, OS_LOG_TYPE_INFO, "%{public}@Running duplicate user model checker", buf, 0xCu);

        }
        objc_autoreleasePoolPop(v13);
        objc_msgSend((id)objc_opt_class(), "_findDuplicateUserModelsWithContext:", v12);
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        v18 = objc_msgSend(v17, "count");
        v19 = (void *)MEMORY[0x227676638]();
        v20 = v14;
        HMFGetOSLogHandle();
        v21 = objc_claimAutoreleasedReturnValue();
        v22 = v21;
        if (v18)
        {
          if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
          {
            HMFGetLogIdentifier();
            v23 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 138543618;
            v35 = v23;
            v36 = 2112;
            v37 = v17;
            _os_log_impl(&dword_2218F0000, v22, OS_LOG_TYPE_ERROR, "%{public}@Duplicate user models found: %@", buf, 0x16u);

          }
          objc_autoreleasePoolPop(v19);
          +[HMDBulletinBoard sharedBulletinBoard](HMDBulletinBoard, "sharedBulletinBoard");
          v24 = (void *)objc_claimAutoreleasedReturnValue();
          v25 = -[HMDHomeKitVersion initWithVersionString:]([HMDHomeKitVersion alloc], "initWithVersionString:", CFSTR("10.3.1"));
          v31[0] = MEMORY[0x24BDAC760];
          v31[1] = 3221225472;
          v31[2] = __58__HMDHomeManager_HH2DuplicateUserModelsFix___performCheck__block_invoke;
          v31[3] = &unk_24E795AE8;
          v31[4] = v20;
          v32 = v25;
          v33 = v24;
          v26 = v24;
          v27 = v25;
          objc_msgSend(v17, "hmf_enumerateWithAutoreleasePoolUsingBlock:", v31);

          -[HMDHomeManager _scheduleNextCheck](v20);
        }
        else
        {
          if (os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
          {
            HMFGetLogIdentifier();
            v29 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 138543362;
            v35 = v29;
            _os_log_impl(&dword_2218F0000, v22, OS_LOG_TYPE_INFO, "%{public}@No duplicate user models found", buf, 0xCu);

          }
          objc_autoreleasePoolPop(v19);

        }
        goto LABEL_16;
      }
      v5 = (void *)MEMORY[0x227676638]();
      v28 = v30;
      HMFGetOSLogHandle();
      v7 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543362;
        v35 = v8;
        v9 = "%{public}@Skipping duplicate user model checker as this device is not currently the FMF device";
        goto LABEL_14;
      }
    }

    objc_autoreleasePoolPop(v5);
LABEL_16:
    WeakRetained = v30;
  }

}

void __58__HMDHomeManager_HH2DuplicateUserModelsFix___performCheck__block_invoke(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  char v13;
  void *v14;
  id v15;
  NSObject *v16;
  void *v17;
  void *v18;
  void *v19;
  id v20;
  NSObject *v21;
  void *v22;
  void *v23;
  void *v24;
  id v25;
  NSObject *v26;
  void *v27;
  id v28;
  NSObject *v29;
  void *v30;
  void *v31;
  void *v32;
  uint64_t v33;
  void *v34;
  uint8_t buf[4];
  void *v36;
  __int16 v37;
  void *v38;
  __int16 v39;
  void *v40;
  __int16 v41;
  uint64_t v42;
  uint64_t v43;

  v43 = *MEMORY[0x24BDAC8D0];
  v3 = a2;
  v4 = *(void **)(a1 + 32);
  objc_msgSend(v3, "homeModelID");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "_homeWithUUID:", v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  if (v6)
  {
    objc_msgSend(v3, "userMergeID");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "userWithMergeID:", v7);
    v8 = (void *)objc_claimAutoreleasedReturnValue();

    if (!v8)
    {
      v19 = (void *)MEMORY[0x227676638]();
      v20 = *(id *)(a1 + 32);
      HMFGetOSLogHandle();
      v21 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v22 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v3, "userMergeID");
        v23 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        v36 = v22;
        v37 = 2112;
        v38 = v23;
        _os_log_impl(&dword_2218F0000, v21, OS_LOG_TYPE_ERROR, "%{public}@Couldn't find user with mergeID %@", buf, 0x16u);

      }
      objc_autoreleasePoolPop(v19);
      goto LABEL_20;
    }
    objc_msgSend(v6, "residentDeviceManager");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "primaryResidentDevice");
    v10 = (void *)objc_claimAutoreleasedReturnValue();

    if (v10)
    {
      objc_msgSend(v10, "device");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v11, "version");
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      v13 = objc_msgSend(v12, "isAtLeastVersion:", *(_QWORD *)(a1 + 40));

      if ((v13 & 1) != 0)
      {
        objc_msgSend(*(id *)(a1 + 48), "insertHH2DuplicateUserModelBulletinForHome:user:", v6, v8);
LABEL_19:

LABEL_20:
        goto LABEL_21;
      }
      v24 = (void *)MEMORY[0x227676638]();
      v28 = *(id *)(a1 + 32);
      HMFGetOSLogHandle();
      v29 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v30 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v10, "device");
        v31 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v31, "version");
        v34 = v24;
        v32 = (void *)objc_claimAutoreleasedReturnValue();
        v33 = *(_QWORD *)(a1 + 40);
        *(_DWORD *)buf = 138544130;
        v36 = v30;
        v37 = 2112;
        v38 = v6;
        v39 = 2112;
        v40 = v32;
        v41 = 2112;
        v42 = v33;
        _os_log_impl(&dword_2218F0000, v29, OS_LOG_TYPE_ERROR, "%{public}@Primary resident for home %@ is too old to fix duplicate user models: %@ < %@", buf, 0x2Au);

        v24 = v34;
      }

    }
    else
    {
      v24 = (void *)MEMORY[0x227676638]();
      v25 = *(id *)(a1 + 32);
      HMFGetOSLogHandle();
      v26 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v27 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        v36 = v27;
        v37 = 2112;
        v38 = v6;
        _os_log_impl(&dword_2218F0000, v26, OS_LOG_TYPE_ERROR, "%{public}@Couldn't find primary resident for home %@", buf, 0x16u);

      }
    }
    objc_autoreleasePoolPop(v24);
    goto LABEL_19;
  }
  v14 = (void *)MEMORY[0x227676638]();
  v15 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v16 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
  {
    HMFGetLogIdentifier();
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "homeModelID");
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543618;
    v36 = v17;
    v37 = 2112;
    v38 = v18;
    _os_log_impl(&dword_2218F0000, v16, OS_LOG_TYPE_ERROR, "%{public}@Couldn't find home with uuid %@", buf, 0x16u);

  }
  objc_autoreleasePoolPop(v14);
LABEL_21:

}

+ (id)_findDuplicateUserModelsWithContext:(id)a3
{
  id v4;
  void *v5;
  id v6;
  id v7;
  void *v8;
  _QWORD v10[4];
  id v11;
  id v12;
  id v13;

  v4 = a3;
  objc_msgSend(MEMORY[0x24BDBCEB8], "array");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v10[0] = MEMORY[0x24BDAC760];
  v10[1] = 3221225472;
  v10[2] = __81__HMDHomeManager_HH2DuplicateUserModelsFix___findDuplicateUserModelsWithContext___block_invoke;
  v10[3] = &unk_24E796490;
  v12 = v5;
  v13 = a1;
  v11 = v4;
  v6 = v5;
  v7 = v4;
  objc_msgSend(v7, "performBlockAndWait:", v10);
  v8 = (void *)objc_msgSend(v6, "copy");

  return v8;
}

void __81__HMDHomeManager_HH2DuplicateUserModelsFix___findDuplicateUserModelsWithContext___block_invoke(uint64_t a1)
{
  id v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;
  void *v10;
  void *v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  uint64_t v23;
  id v24;
  id v25;
  void *v26;
  id v27;
  NSObject *v28;
  void *v29;
  void *v30;
  id obj;
  void *v32;
  _QWORD v33[5];
  id v34;
  _QWORD v35[4];
  id v36;
  id v37;
  uint64_t v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  _QWORD v43[4];
  id v44;
  id v45;
  uint8_t v46[128];
  uint8_t buf[4];
  void *v48;
  __int16 v49;
  void *v50;
  const __CFString *v51;
  _QWORD v52[6];

  v52[3] = *MEMORY[0x24BDAC8D0];
  v2 = *(id *)(a1 + 32);
  v3 = (void *)objc_opt_self();
  +[_MKFUser fetchRequest](_MKFUser, "fetchRequest");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x24BDD1758], "predicateWithFormat:", CFSTR("(%K.%K == YES) AND (%K != %@)"), CFSTR("home"), CFSTR("owned"), CFSTR("privilege"), &unk_24E96D220);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "setPredicate:", v5);

  v52[0] = CFSTR("accountIdentifier");
  v52[1] = CFSTR("idsMergeIdentifier");
  v52[2] = CFSTR("privilege");
  objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", v52, 3);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "setPropertiesToFetch:", v6);

  v51 = CFSTR("home");
  objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", &v51, 1);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "setRelationshipKeyPathsForPrefetching:", v7);

  objc_msgSend(v4, "setFetchBatchSize:", 10);
  v45 = 0;
  objc_msgSend(v2, "executeFetchRequest:error:", v4, &v45);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = v45;
  v10 = v9;
  if (v8)
  {

    objc_msgSend(MEMORY[0x24BDD1650], "strongToStrongObjectsMapTable");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v43[0] = MEMORY[0x24BDAC760];
    v43[1] = 3221225472;
    v43[2] = __81__HMDHomeManager_HH2DuplicateUserModelsFix___findDuplicateUserModelsWithContext___block_invoke_2;
    v43[3] = &unk_24E795B10;
    v12 = v11;
    v44 = v12;
    v30 = v8;
    objc_msgSend(v8, "hmf_enumerateWithAutoreleasePoolUsingBlock:", v43);
    v41 = 0u;
    v42 = 0u;
    v39 = 0u;
    v40 = 0u;
    v32 = v12;
    objc_msgSend(v12, "keyEnumerator");
    obj = (id)objc_claimAutoreleasedReturnValue();
    v13 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v39, v46, 16);
    if (v13)
    {
      v14 = v13;
      v15 = *(_QWORD *)v40;
      v16 = MEMORY[0x24BDAC760];
      do
      {
        v17 = 0;
        do
        {
          if (*(_QWORD *)v40 != v15)
            objc_enumerationMutation(obj);
          v18 = *(_QWORD *)(*((_QWORD *)&v39 + 1) + 8 * v17);
          v19 = (void *)MEMORY[0x227676638]();
          objc_msgSend(v32, "objectForKey:", v18);
          v20 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(MEMORY[0x24BDBCEF0], "setWithCapacity:", objc_msgSend(v20, "count"));
          v21 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(MEMORY[0x24BDBCED8], "dictionary");
          v22 = (void *)objc_claimAutoreleasedReturnValue();
          v35[0] = v16;
          v35[1] = 3221225472;
          v35[2] = __81__HMDHomeManager_HH2DuplicateUserModelsFix___findDuplicateUserModelsWithContext___block_invoke_3;
          v35[3] = &unk_24E795B38;
          v23 = *(_QWORD *)(a1 + 48);
          v37 = v21;
          v38 = v23;
          v36 = v22;
          v24 = v21;
          v25 = v22;
          objc_msgSend(v20, "hmf_enumerateWithAutoreleasePoolUsingBlock:", v35);
          v33[0] = v16;
          v33[1] = 3221225472;
          v33[2] = __81__HMDHomeManager_HH2DuplicateUserModelsFix___findDuplicateUserModelsWithContext___block_invoke_48;
          v33[3] = &unk_24E795B60;
          v33[4] = v18;
          v34 = *(id *)(a1 + 40);
          objc_msgSend(v25, "enumerateKeysAndObjectsUsingBlock:", v33);

          objc_autoreleasePoolPop(v19);
          ++v17;
        }
        while (v14 != v17);
        v14 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v39, v46, 16);
      }
      while (v14);
    }

    v8 = v30;
  }
  else
  {
    v26 = (void *)MEMORY[0x227676638]();
    v27 = v3;
    HMFGetOSLogHandle();
    v28 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v29 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v48 = v29;
      v49 = 2112;
      v50 = v10;
      _os_log_impl(&dword_2218F0000, v28, OS_LOG_TYPE_ERROR, "%{public}@Failed to fetch shared users: %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v26);

  }
}

void __81__HMDHomeManager_HH2DuplicateUserModelsFix___findDuplicateUserModelsWithContext___block_invoke_2(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  id v6;

  v3 = a2;
  objc_msgSend(v3, "home");
  v6 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 32), "objectForKey:");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  if (v4)
  {
    v5 = v4;
    objc_msgSend(v4, "addObject:", v3);

  }
  else
  {
    objc_msgSend(MEMORY[0x24BDBCEB8], "arrayWithObject:", v3);
    v5 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(*(id *)(a1 + 32), "setObject:forKey:", v5, v6);
  }

}

void __81__HMDHomeManager_HH2DuplicateUserModelsFix___findDuplicateUserModelsWithContext___block_invoke_3(id *a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  id v6;
  void *v7;
  id v8;
  NSObject *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  id v15;
  NSObject *v16;
  NSObject *v17;
  void *v18;
  void *v19;
  const char *v20;
  void *v21;
  void *v22;
  id v23;
  NSObject *v24;
  void *v25;
  void *v26;
  int v27;
  void *v28;
  __int16 v29;
  id v30;
  uint64_t v31;

  v31 = *MEMORY[0x24BDAC8D0];
  v3 = a2;
  v4 = (void *)objc_opt_self();
  objc_msgSend(v3, "idsMergeIdentifier");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  if (v5)
  {
    v6 = v5;
    goto LABEL_17;
  }
  v7 = (void *)MEMORY[0x227676638]();
  v8 = v4;
  HMFGetOSLogHandle();
  v9 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
  {
    HMFGetLogIdentifier();
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v27 = 138543618;
    v28 = v10;
    v29 = 2112;
    v30 = v3;
    _os_log_impl(&dword_2218F0000, v9, OS_LOG_TYPE_ERROR, "%{public}@User has no idsMergeIdentifier: %@", (uint8_t *)&v27, 0x16u);

  }
  objc_autoreleasePoolPop(v7);
  objc_msgSend(v3, "accountIdentifier");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v12 = v11;
  if (v11)
  {
    objc_msgSend(v11, "senderCorrelationIdentifier");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    v14 = (void *)MEMORY[0x227676638]();
    v15 = v8;
    HMFGetOSLogHandle();
    v16 = objc_claimAutoreleasedReturnValue();
    v17 = v16;
    if (v13)
    {
      if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v18 = (void *)objc_claimAutoreleasedReturnValue();
        v27 = 138543618;
        v28 = v18;
        v29 = 2112;
        v30 = v3;
        _os_log_impl(&dword_2218F0000, v17, OS_LOG_TYPE_INFO, "%{public}@Using accountIdentifier as idsMergeIdentifier for user: %@", (uint8_t *)&v27, 0x16u);

      }
      objc_autoreleasePoolPop(v14);
      v6 = v13;
      goto LABEL_16;
    }
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      v27 = 138543618;
      v28 = v19;
      v29 = 2112;
      v30 = v3;
      v20 = "%{public}@User accountIdentifier doesn't contain a mergeID: %@";
      goto LABEL_14;
    }
  }
  else
  {
    v14 = (void *)MEMORY[0x227676638]();
    v15 = v8;
    HMFGetOSLogHandle();
    v17 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      v27 = 138543618;
      v28 = v19;
      v29 = 2112;
      v30 = v3;
      v20 = "%{public}@User has no accountIdentifier: %@";
LABEL_14:
      _os_log_impl(&dword_2218F0000, v17, OS_LOG_TYPE_ERROR, v20, (uint8_t *)&v27, 0x16u);

    }
  }

  objc_autoreleasePoolPop(v14);
  v6 = 0;
LABEL_16:

LABEL_17:
  if (v6)
  {
    objc_msgSend(a1[4], "objectForKeyedSubscript:", v6);
    v21 = (void *)objc_claimAutoreleasedReturnValue();

    if (!v21)
    {
      if ((objc_msgSend(a1[5], "containsObject:", v6) & 1) != 0)
        objc_msgSend(a1[4], "setObject:forKeyedSubscript:", v3, v6);
      else
        objc_msgSend(a1[5], "addObject:", v6);
    }
  }
  else
  {
    v22 = (void *)MEMORY[0x227676638]();
    v23 = a1[6];
    HMFGetOSLogHandle();
    v24 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v24, OS_LOG_TYPE_DEBUG))
    {
      HMFGetLogIdentifier();
      v25 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v3, "debugDescription");
      v26 = (void *)objc_claimAutoreleasedReturnValue();
      v27 = 138543618;
      v28 = v25;
      v29 = 2112;
      v30 = v26;
      _os_log_impl(&dword_2218F0000, v24, OS_LOG_TYPE_DEBUG, "%{public}@%@", (uint8_t *)&v27, 0x16u);

    }
    objc_autoreleasePoolPop(v22);
  }

}

void __81__HMDHomeManager_HH2DuplicateUserModelsFix___findDuplicateUserModelsWithContext___block_invoke_48(uint64_t a1, void *a2)
{
  id v3;
  HMDHH2DuplicateUserModelTuple *v4;
  void *v5;
  HMDHH2DuplicateUserModelTuple *v6;

  v3 = a2;
  v4 = [HMDHH2DuplicateUserModelTuple alloc];
  objc_msgSend(*(id *)(a1 + 32), "modelID");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = -[HMDHH2DuplicateUserModelTuple initWithHomeModelID:userMergeID:](v4, "initWithHomeModelID:userMergeID:", v5, v3);

  objc_msgSend(*(id *)(a1 + 40), "addObject:", v6);
}

- (HMDHomeManager)init
{
  HMDHomeManager *v2;
  NSObject *v3;
  dispatch_queue_t v4;
  OS_dispatch_queue *workQueue;
  uint64_t v6;
  HMFAsyncContext *workContext;
  uint64_t v8;
  NSMutableSet *activeConnections;
  uint64_t v10;
  NSUUID *uuid;
  uint64_t v12;
  NSMapTable *homeUUIDsByWalletKeyAssertionXPCConnection;
  uint64_t v14;
  NSMutableDictionary *currentHomeConfigurations;
  uint64_t v16;
  NSUserDefaults *userDefaults;
  HMDCHIPXPCListener *v18;
  HMDCHIPXPCListener *chipXPCListener;
  HMDBackgroundOperationManager *v20;
  HMDBackgroundOperationManager *bgOpsManager;
  objc_super v23;

  v23.receiver = self;
  v23.super_class = (Class)HMDHomeManager;
  v2 = -[HMDHomeManager init](&v23, sel_init);
  if (v2)
  {
    dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
    v3 = objc_claimAutoreleasedReturnValue();
    v4 = dispatch_queue_create("com.apple.hmd.hmgr", v3);
    workQueue = v2->_workQueue;
    v2->_workQueue = (OS_dispatch_queue *)v4;

    v6 = objc_msgSend(objc_alloc(MEMORY[0x24BE3F168]), "initWithQueue:alwaysDispatch:", v2->_workQueue, 1);
    workContext = v2->_workContext;
    v2->_workContext = (HMFAsyncContext *)v6;

    objc_msgSend(MEMORY[0x24BDBCEF0], "set");
    v8 = objc_claimAutoreleasedReturnValue();
    activeConnections = v2->_activeConnections;
    v2->_activeConnections = (NSMutableSet *)v8;

    v2->_lock._os_unfair_lock_opaque = 0;
    v10 = objc_msgSend(objc_alloc(MEMORY[0x24BDD1880]), "initWithUUIDString:", CFSTR("1CAEDC10-E3E5-41A4-BB17-A9EEBA14A938"));
    uuid = v2->_uuid;
    v2->_uuid = (NSUUID *)v10;

    objc_msgSend(MEMORY[0x24BDD1650], "strongToStrongObjectsMapTable");
    v12 = objc_claimAutoreleasedReturnValue();
    homeUUIDsByWalletKeyAssertionXPCConnection = v2->_homeUUIDsByWalletKeyAssertionXPCConnection;
    v2->_homeUUIDsByWalletKeyAssertionXPCConnection = (NSMapTable *)v12;

    objc_msgSend(MEMORY[0x24BDBCED8], "dictionary");
    v14 = objc_claimAutoreleasedReturnValue();
    currentHomeConfigurations = v2->_currentHomeConfigurations;
    v2->_currentHomeConfigurations = (NSMutableDictionary *)v14;

    objc_msgSend(MEMORY[0x24BDBCF50], "standardUserDefaults");
    v16 = objc_claimAutoreleasedReturnValue();
    userDefaults = v2->_userDefaults;
    v2->_userDefaults = (NSUserDefaults *)v16;

    v18 = -[HMDCHIPXPCListener initWithHomeManager:]([HMDCHIPXPCListener alloc], "initWithHomeManager:", v2);
    chipXPCListener = v2->_chipXPCListener;
    v2->_chipXPCListener = v18;

    v20 = -[HMDBackgroundOperationManager initWithHomeManager:]([HMDBackgroundOperationManager alloc], "initWithHomeManager:", v2);
    bgOpsManager = v2->_bgOpsManager;
    v2->_bgOpsManager = v20;

    v2->_hasAccessoryBrowsingBeenRequested = 0;
  }
  return v2;
}

- (HMDHomeManager)initWithMessageDispatcher:(id)a3 accessoryBrowser:(id)a4 messageFilterChain:(id)a5 homeData:(id)a6 localDataDecryptionFailed:(BOOL)a7 identityRegistry:(id)a8 accountRegistry:(id)a9 metricsManager:(id)a10 configuringStateController:(id)a11 diagnosticInfoController:(id)a12 currentAccessorySetupMetricDispatcher:(id)a13 uncommittedTransactions:(id)a14
{
  objc_class *v18;
  id v19;
  void *v20;
  HMDWidgetConfigurationReader *v22;
  HMDBiomeEventManager *v23;
  void *v24;
  void *v25;
  void *v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;
  id v33;
  id v34;
  _BOOL4 v36;
  HMDHomeManager *v37;
  void *v38;
  id v39;
  id v41;
  id v42;

  v36 = a7;
  v18 = (objc_class *)MEMORY[0x24BDD7608];
  v34 = a14;
  v33 = a13;
  v32 = a12;
  v29 = a11;
  v19 = a10;
  v30 = a9;
  v31 = a8;
  v28 = a6;
  v27 = a5;
  v42 = a4;
  v41 = a3;
  v39 = objc_alloc_init(v18);
  objc_msgSend(MEMORY[0x24BDD16D0], "defaultCenter");
  v38 = (void *)objc_claimAutoreleasedReturnValue();
  +[HMDAppleAccountManager sharedManager](HMDAppleAccountManager, "sharedManager");
  v26 = (void *)objc_claimAutoreleasedReturnValue();
  +[HMDRemoteAccountManager sharedManager](HMDRemoteAccountManager, "sharedManager");
  v25 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x24BDBCF50], "standardUserDefaults");
  v24 = (void *)objc_claimAutoreleasedReturnValue();
  v23 = objc_alloc_init(HMDBiomeEventManager);
  objc_msgSend(v19, "logEventSubmitter");
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  v22 = objc_alloc_init(HMDWidgetConfigurationReader);
  v37 = -[HMDHomeManager initWithMessageDispatcher:accessoryBrowser:messageFilterChain:homeData:localDataDecryptionFailed:identityRegistry:accountRegistry:metricsManager:darwinNotificationProvider:notificationCenter:backingStoreFactory:appleAccountManager:remoteAccountManager:userDefaults:biomeEventManager:logEventSubmitter:widgetConfigurationReader:configuringStateController:diagnosticInfoController:currentAccessorySetupMetricDispatcher:uncommittedTransactions:](self, "initWithMessageDispatcher:accessoryBrowser:messageFilterChain:homeData:localDataDecryptionFailed:identityRegistry:accountRegistry:metricsManager:darwinNotificationProvider:notificationCenter:backingStoreFactory:appleAccountManager:remoteAccountManager:userDefaults:biomeEventManager:logEventSubmitter:widgetConfigurationReader:configuringStateController:diagnosticInfoController:currentAccessorySetupMetricDispatcher:uncommittedTransactions:", v41, v42, v27, v28, v36, v31, v30, v19, v39, v38, &__block_literal_global_228191, v26, v25, v24,
          v23,
          v20,
          v22,
          v29,
          v32,
          v33,
          v34);

  return v37;
}

- (HMDHomeManager)initWithMessageDispatcher:(id)a3 accessoryBrowser:(id)a4 messageFilterChain:(id)a5 homeData:(id)a6 localDataDecryptionFailed:(BOOL)a7 identityRegistry:(id)a8 accountRegistry:(id)a9 metricsManager:(id)a10 darwinNotificationProvider:(id)a11 notificationCenter:(id)a12 backingStoreFactory:(id)a13 appleAccountManager:(id)a14 remoteAccountManager:(id)a15 userDefaults:(id)a16 biomeEventManager:(id)a17 logEventSubmitter:(id)a18 widgetConfigurationReader:(id)a19 configuringStateController:(id)a20 diagnosticInfoController:(id)a21 currentAccessorySetupMetricDispatcher:(id)a22 uncommittedTransactions:(id)a23
{
  id v26;
  double v27;
  double v28;
  HMDHomeManager *v29;
  void *v30;
  HMDHomeManager *v31;
  NSObject *v32;
  void *v33;
  void *v34;
  id v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  uint64_t v40;
  OS_os_log *logger;
  uint64_t v42;
  NSMutableArray *deviceSetupSessions;
  void *v44;
  void *v45;
  id v46;
  double v47;
  double v48;
  double v49;
  void *v50;
  os_unfair_lock_s *v51;
  NSObject *v52;
  _BOOL4 v53;
  void *v54;
  void *v55;
  void *v56;
  void *v57;
  id v58;
  double v59;
  double v60;
  double v61;
  void *v62;
  os_unfair_lock_s *v63;
  NSObject *v64;
  _BOOL4 v65;
  void *v66;
  void *v67;
  void *v68;
  HMDUserCloudShareManager *v69;
  HMDUserCloudShareManager *userCloudShareManager;
  HMDMultiUserStatusController *v71;
  HMDMultiUserStatusController *multiUserStatusController;
  HMDIDSServerBag *v73;
  HMDIDSServerBag *idsServerBag;
  HMDCapabilitiesController *v75;
  HMDCapabilitiesController *capabilitiesController;
  HMDMemoryUtilizationTracker *v77;
  HMDMemoryUtilizationTracker *memoryTracker;
  void *v79;
  uint64_t v80;
  uint64_t v81;
  NSUUID *lastRemovedCurrentAccessoryUUID;
  HMDCameraRecordingLoadBalancer *v83;
  id v84;
  HMDCameraRecordingLoadBalancer *v85;
  void *v86;
  uint64_t v87;
  HMFTimer *debounceHomesUpdateTimer;
  HMFTimer *v89;
  void *v90;
  void *v91;
  void *v92;
  void *v93;
  double v94;
  uint64_t v95;
  HMFTimer *debounceRegenerateAssistantSyncDataTimer;
  HMFTimer *v97;
  void *v98;
  uint64_t v99;
  double v100;
  double v101;
  void *v102;
  HMDHomeManager *v103;
  NSObject *v104;
  void *v105;
  void *v106;
  id v107;
  void *v108;
  void *v109;
  void *v110;
  void *v111;
  void *v112;
  void *v113;
  void *v114;
  void *v115;
  HMDHomeManager *v116;
  NSObject *v117;
  void *v118;
  void *v119;
  double v120;
  void *v121;
  void *v122;
  id v123;
  void *v124;
  double v125;
  void *v126;
  void *v127;
  void *v128;
  void *v129;
  uint64_t v130;
  double v131;
  double v132;
  void *v133;
  HMDHomeManager *v134;
  NSObject *v135;
  void *v136;
  void *v137;
  id v138;
  void *v139;
  void *v140;
  void *v141;
  void *v142;
  void *v143;
  HMDHomeManager *v144;
  NSObject *v145;
  void *v146;
  void *v147;
  double v148;
  void *v149;
  void *v150;
  void *v151;
  void *v152;
  void *v153;
  id v154;
  void *v155;
  double v156;
  void *v157;
  void *v158;
  void *v159;
  void *v160;
  void *v161;
  void *v162;
  void *v163;
  void *v164;
  void *v165;
  void *v166;
  void *v167;
  void *v168;
  void *v169;
  void *v170;
  void *v171;
  void *v172;
  void *v173;
  HMDHomeManager *v174;
  NSObject *v175;
  void *v176;
  void *v177;
  id v178;
  void *v179;
  void *v180;
  void *v181;
  void *v182;
  HMDHomeManager *v183;
  NSObject *v184;
  void *v185;
  void *v186;
  id v187;
  void *v188;
  void *v189;
  void *v190;
  void *v191;
  HMDHomeManager *v192;
  NSObject *v193;
  void *v194;
  void *v195;
  double v196;
  void *v197;
  void *v198;
  void *v199;
  void *v200;
  void *v201;
  id v202;
  void *v203;
  double v204;
  void *v205;
  void *v206;
  void *v207;
  void *v208;
  void *v209;
  void *v210;
  void *v211;
  uint64_t v213;
  HMDHomeManager *v214;
  _BOOL4 v215;
  id v217;
  id v218;
  id v219;
  id v220;
  id v221;
  id v222;
  id v223;
  id v224;
  id v225;
  id v226;
  id v227;
  id v228;
  id v229;
  id v230;
  id v231;
  id v232;
  id v233;
  id v234;
  id v236;
  id v237;
  id v238;
  id v239;
  const __CFString *v240;
  const __CFString *v241;
  const __CFString *v242;
  const __CFString *v243;
  uint8_t buf[4];
  void *v245;
  __int16 v246;
  const __CFString *v247;
  __int16 v248;
  const __CFString *v249;
  __int16 v250;
  const __CFString *v251;
  __int16 v252;
  const __CFString *v253;
  __int16 v254;
  const __CFString *v255;
  __int16 v256;
  void *v257;
  __int16 v258;
  const __CFString *v259;
  __int16 v260;
  void *v261;
  const __CFString *v262;
  const __CFString *v263;
  const __CFString *v264;
  const __CFString *v265;
  const __CFString *v266;
  _QWORD v267[3];

  v215 = a7;
  v267[1] = *MEMORY[0x24BDAC8D0];
  v239 = a3;
  v26 = a4;
  v238 = a5;
  v237 = a6;
  v236 = a8;
  v234 = a9;
  v233 = a10;
  v228 = a11;
  v227 = a12;
  v232 = a13;
  v226 = a14;
  v225 = a15;
  v224 = a16;
  v223 = a17;
  v222 = a18;
  v221 = a19;
  v220 = a20;
  v219 = a21;
  v218 = a22;
  v231 = a23;
  HMFUptime();
  v28 = v27;
  v29 = -[HMDHomeManager init](self, "init");
  if (v29)
  {
    v217 = v26;
    v30 = (void *)MEMORY[0x227676638]();
    v214 = v29;
    v31 = v29;
    HMFGetOSLogHandle();
    v32 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v32, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v33 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138544386;
      v245 = v33;
      v246 = 2114;
      v247 = CFSTR("homeManagerInitStart");
      v248 = 2112;
      v249 = CFSTR("Initializing HomeManager");
      v250 = 2114;
      v251 = CFSTR("state");
      v252 = 2112;
      v253 = CFSTR("start");
      _os_log_impl(&dword_2218F0000, v32, OS_LOG_TYPE_INFO, "%{public}@tag=\"%{public}@\" desc=\"%@\" %{public}@=\"%@\", buf, 0x34u);

    }
    objc_autoreleasePoolPop(v30);
    objc_msgSend(MEMORY[0x24BE4F1C0], "sharedInstance");
    v34 = (void *)objc_claimAutoreleasedReturnValue();
    v35 = objc_alloc(MEMORY[0x24BE4F1D0]);
    v266 = CFSTR("state");
    v267[0] = CFSTR("start");
    objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v267, &v266, 1);
    v36 = (void *)objc_claimAutoreleasedReturnValue();
    v37 = (void *)objc_msgSend(v35, "initWithTag:data:", CFSTR("homeManagerInitStart"), v36);
    objc_msgSend(MEMORY[0x24BE3F138], "currentTagProcessorList");
    v38 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v34, "submitTaggedEvent:processorList:", v37, v38);

    objc_msgSend(v233, "setHomeManager:", v31);
    objc_storeStrong((id *)&v31->_metricsManager, a10);
    objc_storeStrong((id *)&v31->_darwinNotificationProvider, a11);
    objc_storeStrong((id *)&v31->_notificationCenter, a12);
    objc_storeStrong((id *)&v31->_appleAccountManager, a14);
    objc_storeStrong((id *)&v31->_remoteAccountManager, a15);
    objc_storeStrong((id *)&v31->_userDefaults, a16);
    objc_storeStrong((id *)&v31->_biomeEventManager, a17);
    objc_storeStrong((id *)&v31->_logEventSubmitter, a18);
    objc_storeStrong((id *)&v31->_widgetConfigurationReader, a19);
    objc_storeStrong((id *)&v31->_configuringStateController, a20);
    objc_storeStrong((id *)&v31->_appleMediaAccessoryDiagnosticInfoController, a21);
    objc_storeStrong((id *)&v31->_currentAccessorySetupMetricDispatcher, a22);
    v31->_hh2MigrationInProgress = 0;
    +[HMDBackingStoreSingleton sharedInstance](HMDBackingStoreSingleton, "sharedInstance");
    v39 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v39, "setHomeManager:", v31);

    HMFGetOSLogHandle();
    v40 = objc_claimAutoreleasedReturnValue();
    logger = v31->_logger;
    v31->_logger = (OS_os_log *)v40;

    objc_msgSend(MEMORY[0x24BDBCEB8], "array");
    v42 = objc_claimAutoreleasedReturnValue();
    deviceSetupSessions = v31->_deviceSetupSessions;
    v31->_deviceSetupSessions = (NSMutableArray *)v42;

    dispatch_suspend((dispatch_object_t)v31->_workQueue);
    -[HMDHomeManager initHomeManagerStartup](v31, "initHomeManagerStartup");
    v31->_generationCounterToken = -1;
    -[NSUserDefaults objectForKey:](v31->_userDefaults, "objectForKey:", CFSTR("HMDCurrentAccessorySetupStartUptimeKey"));
    v44 = (void *)objc_claimAutoreleasedReturnValue();
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
      v45 = v44;
    else
      v45 = 0;
    v46 = v45;

    if (v46)
    {
      objc_msgSend(v46, "doubleValue");
      v48 = v47;
      if (fabs(v47) >= 2.22044605e-16)
      {
        v49 = (double)(clock_gettime_nsec_np(_CLOCK_MONOTONIC_RAW) / 0x3B9ACA00);
        v50 = (void *)MEMORY[0x227676638]();
        v51 = v31;
        HMFGetOSLogHandle();
        v52 = objc_claimAutoreleasedReturnValue();
        v53 = os_log_type_enabled(v52, OS_LOG_TYPE_INFO);
        if (v48 <= v49)
        {
          if (v53)
          {
            HMFGetLogIdentifier();
            v55 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 138543618;
            v245 = v55;
            v246 = 2048;
            v247 = *(const __CFString **)&v48;
            _os_log_impl(&dword_2218F0000, v52, OS_LOG_TYPE_INFO, "%{public}@Loaded stored current accessory setup timestamp: %f", buf, 0x16u);

          }
          objc_autoreleasePoolPop(v50);
          os_unfair_lock_lock_with_options();
          *(double *)&v51[36]._os_unfair_lock_opaque = v48;
          os_unfair_lock_unlock(v51 + 12);
        }
        else
        {
          if (v53)
          {
            HMFGetLogIdentifier();
            v54 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 138543362;
            v245 = v54;
            _os_log_impl(&dword_2218F0000, v52, OS_LOG_TYPE_INFO, "%{public}@Resetting current accessory setup timestamp to 0 as a reboot was detected", buf, 0xCu);

          }
          objc_autoreleasePoolPop(v50);
          -[os_unfair_lock_s setSetupStartTimestamp:](v51, "setSetupStartTimestamp:", 0.0);
        }
      }
    }

    -[NSUserDefaults objectForKey:](v31->_userDefaults, "objectForKey:", CFSTR("HMDCurrentAccessorySetupEndUptimeKey"));
    v56 = (void *)objc_claimAutoreleasedReturnValue();
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
      v57 = v56;
    else
      v57 = 0;
    v58 = v57;

    if (v58)
    {
      objc_msgSend(v58, "doubleValue");
      v60 = v59;
      if (fabs(v59) >= 2.22044605e-16)
      {
        v61 = (double)(clock_gettime_nsec_np(_CLOCK_MONOTONIC_RAW) / 0x3B9ACA00);
        v62 = (void *)MEMORY[0x227676638]();
        v63 = v31;
        HMFGetOSLogHandle();
        v64 = objc_claimAutoreleasedReturnValue();
        v65 = os_log_type_enabled(v64, OS_LOG_TYPE_INFO);
        if (v60 <= v61)
        {
          if (v65)
          {
            HMFGetLogIdentifier();
            v67 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 138543618;
            v245 = v67;
            v246 = 2048;
            v247 = *(const __CFString **)&v60;
            _os_log_impl(&dword_2218F0000, v64, OS_LOG_TYPE_INFO, "%{public}@Loaded stored current accessory setup end timestamp: %f", buf, 0x16u);

          }
          objc_autoreleasePoolPop(v62);
          os_unfair_lock_lock_with_options();
          *(double *)&v63[38]._os_unfair_lock_opaque = v60;
          os_unfair_lock_unlock(v63 + 12);
        }
        else
        {
          if (v65)
          {
            HMFGetLogIdentifier();
            v66 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 138543362;
            v245 = v66;
            _os_log_impl(&dword_2218F0000, v64, OS_LOG_TYPE_INFO, "%{public}@Resetting current accessory setup end timestamp to 0 as a reboot was detected", buf, 0xCu);

          }
          objc_autoreleasePoolPop(v62);
          -[os_unfair_lock_s setSetupEndTimestamp:](v63, "setSetupEndTimestamp:", 0.0);
        }
      }
    }

    if (-[HMDHomeManager firstCloudKitImportComplete](v31, "firstCloudKitImportComplete"))
    {
      -[HMDHomeManager currentAccessorySetupMetricDispatcher](v31, "currentAccessorySetupMetricDispatcher");
      v68 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v68, "markSetupEndStage:error:", 13, 0);

    }
    v69 = -[HMDUserCloudShareManager initWithHomeManager:]([HMDUserCloudShareManager alloc], "initWithHomeManager:", v31);
    userCloudShareManager = v31->_userCloudShareManager;
    v31->_userCloudShareManager = v69;

    v71 = -[HMDMultiUserStatusController initWithQueue:delegate:]([HMDMultiUserStatusController alloc], "initWithQueue:delegate:", v31->_workQueue, v31);
    multiUserStatusController = v31->_multiUserStatusController;
    v31->_multiUserStatusController = v71;

    v73 = objc_alloc_init(HMDIDSServerBag);
    idsServerBag = v31->_idsServerBag;
    v31->_idsServerBag = v73;

    -[HMDIDSServerBag setDelegate:](v31->_idsServerBag, "setDelegate:", v31);
    v75 = -[HMDCapabilitiesController initWithQueue:dataSource:]([HMDCapabilitiesController alloc], "initWithQueue:dataSource:", v31->_workQueue, v31);
    capabilitiesController = v31->_capabilitiesController;
    v31->_capabilitiesController = v75;

    v77 = objc_alloc_init(HMDMemoryUtilizationTracker);
    memoryTracker = v31->_memoryTracker;
    v31->_memoryTracker = v77;

    -[HMDHomeManager userDefaults](v31, "userDefaults");
    v79 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v79, "stringForKey:", CFSTR("HMDLastRemovedCurrentAccessoryUUIDKey"));
    v80 = objc_claimAutoreleasedReturnValue();

    if (v80)
    {
      v81 = objc_msgSend(objc_alloc(MEMORY[0x24BDD1880]), "initWithUUIDString:", v80);
      lastRemovedCurrentAccessoryUUID = v31->_lastRemovedCurrentAccessoryUUID;
      v31->_lastRemovedCurrentAccessoryUUID = (NSUUID *)v81;

    }
    v230 = (id)v80;
    v83 = [HMDCameraRecordingLoadBalancer alloc];
    v84 = objc_alloc_init(MEMORY[0x24BE4D218]);
    v85 = -[HMDCameraRecordingLoadBalancer initWithHomeManager:resourceUsageMonitor:](v83, "initWithHomeManager:resourceUsageMonitor:", v31, v84);
    -[HMDHomeManager setCameraLoadBalancer:](v31, "setCameraLoadBalancer:", v85);

    -[HMDHomeManager cameraLoadBalancer](v31, "cameraLoadBalancer");
    v86 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v86, "start");

    v87 = objc_msgSend(objc_alloc(MEMORY[0x24BE3F298]), "initWithTimeInterval:options:", 0, 5.0);
    debounceHomesUpdateTimer = v31->_debounceHomesUpdateTimer;
    v31->_debounceHomesUpdateTimer = (HMFTimer *)v87;

    -[HMFTimer setDelegate:](v31->_debounceHomesUpdateTimer, "setDelegate:", v31);
    v89 = v31->_debounceHomesUpdateTimer;
    -[HMDHomeManager workQueue](v31, "workQueue");
    v90 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMFTimer setDelegateQueue:](v89, "setDelegateQueue:", v90);

    objc_msgSend(MEMORY[0x24BE3F248], "sharedPreferences");
    v91 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v91, "preferenceForKey:", CFSTR("assistantSyncDataCoalescePeriodMilliseconds"));
    v92 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v92, "numberValue");
    v93 = (void *)objc_claimAutoreleasedReturnValue();

    v229 = v93;
    objc_msgSend(v93, "doubleValue");
    v95 = objc_msgSend(objc_alloc(MEMORY[0x24BE3F298]), "initWithTimeInterval:options:", 0, v94 / 1000.0);
    debounceRegenerateAssistantSyncDataTimer = v31->_debounceRegenerateAssistantSyncDataTimer;
    v31->_debounceRegenerateAssistantSyncDataTimer = (HMFTimer *)v95;

    -[HMFTimer setDelegate:](v31->_debounceRegenerateAssistantSyncDataTimer, "setDelegate:", v31);
    v97 = v31->_debounceRegenerateAssistantSyncDataTimer;
    -[HMDHomeManager workQueue](v31, "workQueue");
    v98 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMFTimer setDelegateQueue:](v97, "setDelegateQueue:", v98);

    v99 = HMFUptime();
    v101 = v100;
    v102 = (void *)MEMORY[0x227676638](v99);
    v103 = v31;
    HMFGetOSLogHandle();
    v104 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v104, OS_LOG_TYPE_DEBUG))
    {
      HMFGetLogIdentifier();
      v105 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138544386;
      v245 = v105;
      v246 = 2114;
      v247 = CFSTR("homeManagerInitStart");
      v248 = 2112;
      v249 = CFSTR("Initialize HH2 FW switch");
      v250 = 2114;
      v251 = CFSTR("state");
      v252 = 2112;
      v253 = CFSTR("homeManagerHH2FWSwitch");
      _os_log_impl(&dword_2218F0000, v104, OS_LOG_TYPE_DEBUG, "%{public}@tag=\"%{public}@\" desc=\"%@\" %{public}@=\"%@\", buf, 0x34u);

    }
    objc_autoreleasePoolPop(v102);
    objc_msgSend(MEMORY[0x24BE4F1C0], "sharedInstance");
    v106 = (void *)objc_claimAutoreleasedReturnValue();
    v107 = objc_alloc(MEMORY[0x24BE4F1D0]);
    v264 = CFSTR("state");
    v265 = CFSTR("homeManagerHH2FWSwitch");
    objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", &v265, &v264, 1);
    v108 = (void *)objc_claimAutoreleasedReturnValue();
    v109 = (void *)objc_msgSend(v107, "initWithTag:data:", CFSTR("homeManagerInitStart"), v108);
    objc_msgSend(MEMORY[0x24BE3F138], "currentTagProcessorList");
    v110 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v106, "submitTaggedEvent:processorList:", v109, v110);

    v111 = (void *)MEMORY[0x227676638]();
    -[HMDHomeManager initializeHH2FrameworkSwitch](v103, "initializeHH2FrameworkSwitch");
    +[HMDDeviceSetupManager sharedManager](HMDDeviceSetupManager, "sharedManager");
    v112 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v112, "followUpManager");
    v113 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v113, "stopAdvertising:", 2);

    -[HMDHomeManager notificationCenter](v103, "notificationCenter");
    v114 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v114, "addObserver:selector:name:object:", v103, sel__handleHH2SentinelZonePresent_, CFSTR("HMDHomeManagerHH2SentinelZonePresent"), 0);

    v115 = (void *)MEMORY[0x227676638]();
    v116 = v103;
    HMFGetOSLogHandle();
    v117 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v117, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v118 = (void *)objc_claimAutoreleasedReturnValue();
      v119 = (void *)MEMORY[0x24BDD17C8];
      HMFUptime();
      objc_msgSend(v119, "stringWithFormat:", CFSTR("%.3f"), v120 - v101);
      v121 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138544898;
      v245 = v118;
      v246 = 2114;
      v247 = CFSTR("homeManagerInitStart");
      v248 = 2112;
      v249 = CFSTR("Initialized HH2 FW switch");
      v250 = 2114;
      v251 = CFSTR("state");
      v252 = 2112;
      v253 = CFSTR("homeManagerHH2FWSwitchDone");
      v254 = 2114;
      v255 = CFSTR("duration");
      v256 = 2112;
      v257 = v121;
      _os_log_impl(&dword_2218F0000, v117, OS_LOG_TYPE_INFO, "%{public}@tag=\"%{public}@\" desc=\"%@\" %{public}@=\"%@\" %{public}@=\"%@\", buf, 0x48u);

    }
    objc_autoreleasePoolPop(v115);
    objc_msgSend(MEMORY[0x24BE4F1C0], "sharedInstance");
    v122 = (void *)objc_claimAutoreleasedReturnValue();
    v123 = objc_alloc(MEMORY[0x24BE4F1D0]);
    v124 = (void *)MEMORY[0x24BDD17C8];
    HMFUptime();
    objc_msgSend(v124, "stringWithFormat:", CFSTR("%.3f"), v125 - v101);
    v126 = (void *)objc_claimAutoreleasedReturnValue();
    HMDTaggedLoggingCreateDictionary();
    v127 = (void *)objc_claimAutoreleasedReturnValue();
    v128 = (void *)objc_msgSend(v123, "initWithTag:data:", CFSTR("homeManagerInitStart"), v127, CFSTR("state"), CFSTR("homeManagerHH2FWSwitchDone"), CFSTR("duration"), v126);
    objc_msgSend(MEMORY[0x24BE3F138], "currentTagProcessorList");
    v129 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v122, "submitTaggedEvent:processorList:", v128, v129);

    objc_autoreleasePoolPop(v111);
    v130 = HMFUptime();
    v132 = v131;
    v133 = (void *)MEMORY[0x227676638](v130);
    v134 = v116;
    HMFGetOSLogHandle();
    v135 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v135, OS_LOG_TYPE_DEBUG))
    {
      HMFGetLogIdentifier();
      v136 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138544386;
      v245 = v136;
      v246 = 2114;
      v247 = CFSTR("homeManagerInitStart");
      v248 = 2112;
      v249 = CFSTR("Loading Home Manager");
      v250 = 2114;
      v251 = CFSTR("state");
      v252 = 2112;
      v253 = CFSTR("homeManagerLoading");
      _os_log_impl(&dword_2218F0000, v135, OS_LOG_TYPE_DEBUG, "%{public}@tag=\"%{public}@\" desc=\"%@\" %{public}@=\"%@\", buf, 0x34u);

    }
    objc_autoreleasePoolPop(v133);
    objc_msgSend(MEMORY[0x24BE4F1C0], "sharedInstance");
    v137 = (void *)objc_claimAutoreleasedReturnValue();
    v138 = objc_alloc(MEMORY[0x24BE4F1D0]);
    v262 = CFSTR("state");
    v263 = CFSTR("homeManagerLoading");
    objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", &v263, &v262, 1);
    v139 = (void *)objc_claimAutoreleasedReturnValue();
    v140 = (void *)objc_msgSend(v138, "initWithTag:data:", CFSTR("homeManagerInitStart"), v139);
    objc_msgSend(MEMORY[0x24BE3F138], "currentTagProcessorList");
    v141 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v137, "submitTaggedEvent:processorList:", v140, v141);

    v142 = (void *)MEMORY[0x227676638]();
    LOBYTE(v213) = 0;
    -[HMDHomeManager _loadMessageDispatcher:accessoryBrowser:messageFilterChain:homeData:localDataDecryptionFailed:identityRegistry:accountRegistry:uncommittedTransactions:backingStoreFactory:reloadData:](v134, "_loadMessageDispatcher:accessoryBrowser:messageFilterChain:homeData:localDataDecryptionFailed:identityRegistry:accountRegistry:uncommittedTransactions:backingStoreFactory:reloadData:", v239, v217, v238, v237, v215, v236, v234, v231, v232, v213);
    objc_autoreleasePoolPop(v142);
    v143 = (void *)MEMORY[0x227676638]();
    v144 = v134;
    HMFGetOSLogHandle();
    v145 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v145, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v146 = (void *)objc_claimAutoreleasedReturnValue();
      v147 = (void *)MEMORY[0x24BDD17C8];
      HMFUptime();
      objc_msgSend(v147, "stringWithFormat:", CFSTR("%.3f"), v148 - v132);
      v149 = (void *)objc_claimAutoreleasedReturnValue();
      v150 = (void *)MEMORY[0x24BDD16E0];
      -[HMDHomeManager homes](v144, "homes");
      v151 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v150, "numberWithUnsignedInteger:", objc_msgSend(v151, "count"));
      v152 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138545410;
      v245 = v146;
      v246 = 2114;
      v247 = CFSTR("homeManagerInitStart");
      v248 = 2112;
      v249 = CFSTR("Loaded Home Manager, resuming work queue");
      v250 = 2114;
      v251 = CFSTR("state");
      v252 = 2112;
      v253 = CFSTR("homeManagerLoaded");
      v254 = 2114;
      v255 = CFSTR("duration");
      v256 = 2112;
      v257 = v149;
      v258 = 2114;
      v259 = CFSTR("homesCount");
      v260 = 2112;
      v261 = v152;
      _os_log_impl(&dword_2218F0000, v145, OS_LOG_TYPE_INFO, "%{public}@tag=\"%{public}@\" desc=\"%@\" %{public}@=\"%@\" %{public}@=\"%@\" %{public}@=\"%@\", buf, 0x5Cu);

    }
    objc_autoreleasePoolPop(v143);
    objc_msgSend(MEMORY[0x24BE4F1C0], "sharedInstance");
    v153 = (void *)objc_claimAutoreleasedReturnValue();
    v154 = objc_alloc(MEMORY[0x24BE4F1D0]);
    v155 = (void *)MEMORY[0x24BDD17C8];
    HMFUptime();
    objc_msgSend(v155, "stringWithFormat:", CFSTR("%.3f"), v156 - v132);
    v157 = (void *)objc_claimAutoreleasedReturnValue();
    v158 = (void *)MEMORY[0x24BDD16E0];
    -[HMDHomeManager homes](v144, "homes");
    v159 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v158, "numberWithUnsignedInteger:", objc_msgSend(v159, "count"));
    v160 = (void *)objc_claimAutoreleasedReturnValue();
    HMDTaggedLoggingCreateDictionary();
    v161 = (void *)objc_claimAutoreleasedReturnValue();
    v162 = (void *)objc_msgSend(v154, "initWithTag:data:", CFSTR("homeManagerInitStart"), v161, CFSTR("state"), CFSTR("homeManagerLoaded"), CFSTR("duration"), v157, CFSTR("homesCount"), v160);
    objc_msgSend(MEMORY[0x24BE3F138], "currentTagProcessorList");
    v163 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v153, "submitTaggedEvent:processorList:", v162, v163);

    dispatch_resume((dispatch_object_t)v31->_workQueue);
    -[HMDHomeManager notificationCenter](v144, "notificationCenter");
    v164 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v164, "addObserver:selector:name:object:", v144, sel_cloudHomeSettingsUpdated_, CFSTR("HMDAppleAccountSettingsHomeStateUpdatedNotification"), 0);

    -[HMDHomeManager notificationCenter](v144, "notificationCenter");
    v165 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v165, "addObserver:selector:name:object:", v144, sel___handleDeviceCapabilitiesUpdated_, CFSTR("HMDDeviceCapabilitiiesUpdatedNotification"), 0);

    -[HMDHomeManager notificationCenter](v144, "notificationCenter");
    v166 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHomeManager appleAccountManager](v144, "appleAccountManager");
    v167 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v166, "addObserver:selector:name:object:", v144, sel___handleUpdatedCurrentDevice_, CFSTR("HMDAppleAccountManagerDeviceUpdatedNotification"), v167);

    -[HMDHomeManager notificationCenter](v144, "notificationCenter");
    v168 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v168, "addObserver:selector:name:object:", v144, sel__handleCurrentAccessoryRemovedNotification_, CFSTR("HMDHomeManagerDidRemoveCurrentAccessoryNotification"), 0);

    -[HMDHomeManager notificationCenter](v144, "notificationCenter");
    v169 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v169, "addObserver:selector:name:object:", v144, sel__handleCurrentAccessoryAddedNotification_, CFSTR("HMDHomeManagerDidAddCurrentAccessoryNotification"), 0);

    -[HMDHomeManager registerForNPSPreferenceChanges](v144, "registerForNPSPreferenceChanges");
    -[HMDHomeManager checkForRemotePeers](v144, "checkForRemotePeers");
    -[HMDHomeManager registerForSignificantTimeChangeNotification](v144, "registerForSignificantTimeChangeNotification");
    +[HMDAppleAccountManager sharedManager](HMDAppleAccountManager, "sharedManager");
    v170 = (void *)objc_claimAutoreleasedReturnValue();
    LODWORD(v163) = objc_msgSend(v170, "isLoggedInToPrimaryAccount");

    if ((_DWORD)v163)
    {
      -[HMDHomeManager bgOpsManager](v144, "bgOpsManager");
      v171 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v171, "scheduleHH2KeyRollIfNecessary");

      -[HMDHomeManager bgOpsManager](v144, "bgOpsManager");
      v172 = (void *)objc_claimAutoreleasedReturnValue();
      +[HMDBackgroundOperationManagerHelper makeSureToCreateBackUpOfHH2KeysIfNecessary:](HMDBackgroundOperationManagerHelper, "makeSureToCreateBackUpOfHH2KeysIfNecessary:", v172);

    }
    v173 = (void *)MEMORY[0x227676638]();
    v174 = v144;
    HMFGetOSLogHandle();
    v175 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v175, OS_LOG_TYPE_DEBUG))
    {
      HMFGetLogIdentifier();
      v176 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138544386;
      v245 = v176;
      v246 = 2114;
      v247 = CFSTR("homeManagerInitStart");
      v248 = 2112;
      v249 = CFSTR("Fetch and update PCS status");
      v250 = 2114;
      v251 = CFSTR("state");
      v252 = 2112;
      v253 = CFSTR("homeManagerFetchPCS");
      _os_log_impl(&dword_2218F0000, v175, OS_LOG_TYPE_DEBUG, "%{public}@tag=\"%{public}@\" desc=\"%@\" %{public}@=\"%@\", buf, 0x34u);

    }
    objc_autoreleasePoolPop(v173);
    objc_msgSend(MEMORY[0x24BE4F1C0], "sharedInstance");
    v177 = (void *)objc_claimAutoreleasedReturnValue();
    v178 = objc_alloc(MEMORY[0x24BE4F1D0]);
    v242 = CFSTR("state");
    v243 = CFSTR("homeManagerFetchPCS");
    objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", &v243, &v242, 1);
    v179 = (void *)objc_claimAutoreleasedReturnValue();
    v180 = (void *)objc_msgSend(v178, "initWithTag:data:", CFSTR("homeManagerInitStart"), v179);
    objc_msgSend(MEMORY[0x24BE3F138], "currentTagProcessorList");
    v181 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v177, "submitTaggedEvent:processorList:", v180, v181);

    v182 = (void *)MEMORY[0x227676638](-[HMDHomeManager fetchAndUpdatePCSStatus](v174, "fetchAndUpdatePCSStatus"));
    v183 = v174;
    HMFGetOSLogHandle();
    v184 = objc_claimAutoreleasedReturnValue();
    v26 = v217;
    if (os_log_type_enabled(v184, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v185 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138544386;
      v245 = v185;
      v246 = 2114;
      v247 = CFSTR("homeManagerInitStart");
      v248 = 2112;
      v249 = CFSTR("Fetched and updated PCS status");
      v250 = 2114;
      v251 = CFSTR("state");
      v252 = 2112;
      v253 = CFSTR("homeManagerFetchedPCS");
      _os_log_impl(&dword_2218F0000, v184, OS_LOG_TYPE_INFO, "%{public}@tag=\"%{public}@\" desc=\"%@\" %{public}@=\"%@\", buf, 0x34u);

    }
    objc_autoreleasePoolPop(v182);
    objc_msgSend(MEMORY[0x24BE4F1C0], "sharedInstance");
    v186 = (void *)objc_claimAutoreleasedReturnValue();
    v187 = objc_alloc(MEMORY[0x24BE4F1D0]);
    v240 = CFSTR("state");
    v241 = CFSTR("homeManagerFetchedPCS");
    objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", &v241, &v240, 1);
    v188 = (void *)objc_claimAutoreleasedReturnValue();
    v189 = (void *)objc_msgSend(v187, "initWithTag:data:", CFSTR("homeManagerInitStart"), v188);
    objc_msgSend(MEMORY[0x24BE3F138], "currentTagProcessorList");
    v190 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v186, "submitTaggedEvent:processorList:", v189, v190);

    v29 = v214;
  }
  v191 = (void *)MEMORY[0x227676638]();
  v192 = v29;
  HMFGetOSLogHandle();
  v193 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v193, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v194 = (void *)objc_claimAutoreleasedReturnValue();
    v195 = (void *)MEMORY[0x24BDD17C8];
    HMFUptime();
    objc_msgSend(v195, "stringWithFormat:", CFSTR("%.3f"), v196 - v28);
    v197 = (void *)objc_claimAutoreleasedReturnValue();
    v198 = (void *)MEMORY[0x24BDD16E0];
    -[HMDHomeManager homes](v192, "homes");
    v199 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v198, "numberWithUnsignedInteger:", objc_msgSend(v199, "count"));
    v200 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138545410;
    v245 = v194;
    v246 = 2114;
    v247 = CFSTR("homeManagerInitDone");
    v248 = 2112;
    v249 = CFSTR("Initialized HomeManager");
    v250 = 2114;
    v251 = CFSTR("state");
    v252 = 2112;
    v253 = CFSTR("end");
    v254 = 2114;
    v255 = CFSTR("duration");
    v256 = 2112;
    v257 = v197;
    v258 = 2114;
    v259 = CFSTR("homesCount");
    v260 = 2112;
    v261 = v200;
    _os_log_impl(&dword_2218F0000, v193, OS_LOG_TYPE_INFO, "%{public}@tag=\"%{public}@\" desc=\"%@\" %{public}@=\"%@\" %{public}@=\"%@\" %{public}@=\"%@\", buf, 0x5Cu);

  }
  objc_autoreleasePoolPop(v191);
  objc_msgSend(MEMORY[0x24BE4F1C0], "sharedInstance");
  v201 = (void *)objc_claimAutoreleasedReturnValue();
  v202 = objc_alloc(MEMORY[0x24BE4F1D0]);
  v203 = (void *)MEMORY[0x24BDD17C8];
  HMFUptime();
  objc_msgSend(v203, "stringWithFormat:", CFSTR("%.3f"), v204 - v28);
  v205 = (void *)objc_claimAutoreleasedReturnValue();
  v206 = (void *)MEMORY[0x24BDD16E0];
  -[HMDHomeManager homes](v192, "homes");
  v207 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v206, "numberWithUnsignedInteger:", objc_msgSend(v207, "count"));
  v208 = (void *)objc_claimAutoreleasedReturnValue();
  HMDTaggedLoggingCreateDictionary();
  v209 = (void *)objc_claimAutoreleasedReturnValue();
  v210 = (void *)objc_msgSend(v202, "initWithTag:data:", CFSTR("homeManagerInitDone"), v209, CFSTR("state"), CFSTR("end"), CFSTR("duration"), v205, CFSTR("homesCount"), v208);
  objc_msgSend(MEMORY[0x24BE3F138], "currentTagProcessorList");
  v211 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v201, "submitTaggedEvent:processorList:", v210, v211);

  return v192;
}

- (void)dealloc
{
  objc_super v3;

  -[HMDHomeManager invalidate](self, "invalidate");
  v3.receiver = self;
  v3.super_class = (Class)HMDHomeManager;
  -[HMDHomeManager dealloc](&v3, sel_dealloc);
}

- (void)invalidate
{
  void *v3;
  void *v4;
  void *v5;

  -[HMDHomeManager notificationCenter](self, "notificationCenter");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "removeObserver:", self);

  -[HMDHomeManager messageDispatcher](self, "messageDispatcher");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "deregisterReceiver:", self);

  if (self->_generationCounterToken != -1)
  {
    -[HMDHomeManager darwinNotificationProvider](self, "darwinNotificationProvider");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "notifyCancel:", self->_generationCounterToken);

  }
  -[HMDHomeManager deregisterForSignificantTimeChangeNotification](self, "deregisterForSignificantTimeChangeNotification");
}

- (NSString)currentEventSource
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  -[HMDHomeManager appleAccountManager](self, "appleAccountManager");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "device");
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  if (v3)
  {
    objc_msgSend(v3, "identifier");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "UUIDString");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    objc_msgSend(MEMORY[0x24BDD1880], "UUID");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "UUIDString");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(CFSTR("DeviceNotDetermined."), "stringByAppendingString:", v6);
    v5 = (void *)objc_claimAutoreleasedReturnValue();

  }
  return (NSString *)v5;
}

- (id)languageListProviderForHomeUUID:(id)a3
{
  void *v3;
  void *v4;

  -[HMDHomeManager _homeWithUUID:](self, "_homeWithUUID:", a3);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "unifiedLanguageValueListSettingDataProvider");
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  return v4;
}

- (id)settingsControllerForAccessoryUUID:(id)a3 homeUUID:(id)a4
{
  id v6;
  id v7;
  void *v8;
  void *v9;
  id v10;
  void *v11;
  char v12;
  void *v13;
  void *v14;
  int v15;
  void *v16;

  v6 = a4;
  v7 = a3;
  -[HMDHomeManager _accessoryOfCurrentDevice](self, "_accessoryOfCurrentDevice");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v9 = v8;
  else
    v9 = 0;
  v10 = v9;

  objc_msgSend(v10, "uuid");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v12 = objc_msgSend(v11, "hmf_isEqualToUUID:", v7);

  if ((v12 & 1) == 0)
  {

    goto LABEL_8;
  }
  objc_msgSend(v10, "home");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v13, "uuid");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  v15 = objc_msgSend(v14, "hmf_isEqualToUUID:", v6);

  if (!v15)
  {
LABEL_8:
    v16 = 0;
    goto LABEL_9;
  }
  objc_msgSend(v10, "currentAccessorySettingsController");
  v16 = (void *)objc_claimAutoreleasedReturnValue();
LABEL_9:

  return v16;
}

- (void)_migrateUniqueIdentifierPrefsIfNeeded
{
  uint64_t v2;
  const __CFArray *v3;
  const __CFString *v4;
  const __CFString *v5;
  const __CFDictionary *v6;
  _QWORD v7[5];

  v7[4] = *MEMORY[0x24BDAC8D0];
  v2 = *MEMORY[0x24BDD7C00];
  v7[0] = CFSTR("kAssistantTeamIdentifier");
  v7[1] = v2;
  v7[2] = *MEMORY[0x24BDD7C08];
  v7[3] = CFSTR("kUniqueDeviceIdentifierSaltkey");
  objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", v7, 4);
  v3 = (const __CFArray *)objc_claimAutoreleasedReturnValue();
  v4 = (const __CFString *)*MEMORY[0x24BDBD590];
  v5 = (const __CFString *)*MEMORY[0x24BDBD570];
  v6 = CFPreferencesCopyMultiple(v3, CFSTR("com.apple.homed"), (CFStringRef)*MEMORY[0x24BDBD590], (CFStringRef)*MEMORY[0x24BDBD570]);
  if (-[__CFDictionary count](v6, "count"))
  {
    CFPreferencesSetMultiple(0, v3, CFSTR("com.apple.homed"), v4, v5);
    CFPreferencesAppSynchronize(CFSTR("com.apple.homed"));
    CFPreferencesSetMultiple(v6, 0, CFSTR("com.apple.homed.notbackedup"), v4, v5);
    CFPreferencesAppSynchronize(CFSTR("com.apple.homed.notbackedup"));
  }

}

- (void)setAccessoryBrowsingRequested
{
  -[HMDHomeManager setHasAccessoryBrowsingBeenRequested:](self, "setHasAccessoryBrowsingBeenRequested:", 1);
}

- (void)requestAccessoryBrowsing
{
  void *v3;
  HMDHomeManager *v4;
  NSObject *v5;
  void *v6;
  void *v7;
  void *v8;
  HMDHomeManager *v9;
  NSObject *v10;
  void *v11;
  int v12;
  void *v13;
  __int16 v14;
  _BOOL4 v15;
  __int16 v16;
  _BOOL4 v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  if (-[HMDHomeManager hasLoadedData](self, "hasLoadedData")
    && -[HMDHomeManager hasAccessoryBrowsingBeenRequested](self, "hasAccessoryBrowsingBeenRequested"))
  {
    v3 = (void *)MEMORY[0x227676638]();
    v4 = self;
    HMFGetOSLogHandle();
    v5 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      v12 = 138543362;
      v13 = v6;
      _os_log_impl(&dword_2218F0000, v5, OS_LOG_TYPE_INFO, "%{public}@Start discovering paired accessories", (uint8_t *)&v12, 0xCu);

    }
    objc_autoreleasePoolPop(v3);
    -[HMDHomeManager accessoryBrowser](v4, "accessoryBrowser");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "startDiscoveringPairedAccessories");

  }
  else
  {
    v8 = (void *)MEMORY[0x227676638]();
    v9 = self;
    HMFGetOSLogHandle();
    v10 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      v12 = 138543874;
      v13 = v11;
      v14 = 1024;
      v15 = -[HMDHomeManager hasLoadedData](v9, "hasLoadedData");
      v16 = 1024;
      v17 = -[HMDHomeManager hasAccessoryBrowsingBeenRequested](v9, "hasAccessoryBrowsingBeenRequested");
      _os_log_impl(&dword_2218F0000, v10, OS_LOG_TYPE_INFO, "%{public}@Deferring discovery of paired accessories: hasLoadedData %d browsing requested %d", (uint8_t *)&v12, 0x18u);

    }
    objc_autoreleasePoolPop(v8);
  }
}

- (void)_loadMessageDispatcher:(id)a3 accessoryBrowser:(id)a4 messageFilterChain:(id)a5 homeData:(id)a6 localDataDecryptionFailed:(BOOL)a7 identityRegistry:(id)a8 accountRegistry:(id)a9 uncommittedTransactions:(id)a10 backingStoreFactory:(id)a11 reloadData:(BOOL)a12
{
  _BOOL4 v18;
  id v19;
  int *v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  HMDSyncOperationManager *v24;
  HMDSyncOperationManager *syncManager;
  HMDCloudAccount *v26;
  HMDCloudAccount *cloudAccount;
  NSMutableDictionary *v28;
  NSMutableDictionary *userPushCacheMap;
  HMFTimer *v30;
  HMFTimer *watchPushDelayTimer;
  HMFTimer *v32;
  void *v33;
  HMDBiomeLogEventObserver *v34;
  HMDBiomeLogEventObserver *biomeLogEventObserver;
  HMDCompositeSettingsControllerManager *v36;
  HMDCompositeSettingsControllerManager *compositeSettingsControllerManager;
  HMDSiriEndpointOnboardingManager *v38;
  HMDSiriEndpointOnboardingManager *siriEndpointOnboardingManager;
  void *v40;
  HMDHomeManager *v41;
  NSObject *v42;
  id v43;
  id v44;
  id v45;
  uint64_t v46;
  HMELastEventStore *lastEventStore;
  HMDLastEventStoreController *v48;
  HMDLastEventStoreController *lastEventStoreController;
  void *v50;
  HMDHomeManager *v51;
  NSObject *v52;
  id v53;
  id v54;
  void *v55;
  uint64_t v56;
  HMEDelegatingEventRouter *registrationForwardingEventRouter;
  id v58;
  void *v59;
  uint64_t v60;
  HMEMemoryEventBus *memoryEventRouter;
  HMEDelegatingEventRouter *v62;
  void *v63;
  HMDLoggingEventForwarder *v64;
  HMEMemoryEventBus *v65;
  void *v66;
  uint64_t v67;
  HMDLoggingEventForwarder *loggingMemoryEventForwarder;
  HMDRemoteEventRouterAssertionController *v69;
  void *v70;
  void *v71;
  HMDRemoteEventRouterAssertionController *v72;
  void *v73;
  uint64_t v74;
  NSMutableArray *homes;
  uint64_t v76;
  NSMutableSet *pendingHomesBeingRemoved;
  HMDPowerManager *v78;
  HMDPowerManager *powerManager;
  OS_dispatch_source *cloudOperationRetryTimer;
  void *v81;
  id v82;
  HMDPairedSync *v83;
  void *v84;
  uint64_t v85;
  HMDPairedSync *pairedSync;
  uint64_t v87;
  void *watchManager;
  int *v89;
  void *v90;
  uint64_t v91;
  uint64_t v92;
  HMDSoftwareUpdateManager *v93;
  HMDSoftwareUpdateManager *softwareUpdateManager;
  void *v95;
  int v96;
  void *v97;
  void *v98;
  HMDHomeManager *v99;
  NSObject *v100;
  id v101;
  void *v102;
  void *v103;
  HMDHomeManager *v104;
  NSObject *v105;
  id v106;
  void *v107;
  HMDHomeManager *v108;
  NSObject *v109;
  id v110;
  uint64_t v111;
  NSMutableSet *unassociatedRemotePeers;
  uint64_t v113;
  NSMutableDictionary *associatedRemotePeers;
  uint64_t v115;
  NSMutableDictionary *associatedWatchPeers;
  uint64_t v117;
  NSMutableDictionary *watchSyncStateMap;
  uint64_t v119;
  NSMutableSet *fullSyncedWatchPeers;
  uint64_t v121;
  NSMutableDictionary *watchSyncRetryContextBySyncIdentifier;
  uint64_t v123;
  NSMapTable *watchSyncRetryContextByRetryTimer;
  uint64_t v125;
  NSMutableArray *pendingResponsesForAccessoryFinder;
  uint64_t v127;
  NSMutableDictionary *pendingRemoteSessions;
  uint64_t v129;
  NSMutableSet *pendingResidentSetupSessions;
  id v131;
  const char *v132;
  NSObject *v133;
  dispatch_queue_t v134;
  uint64_t v135;
  void *v136;
  HMDClientConnection *v137;
  HMDClientConnection *clientConnection;
  HMDAssistantGather *v139;
  HMDAssistantGather *gatherer;
  void *v141;
  void *v142;
  uint64_t v143;
  NSMutableDictionary *pendingFragmentationStream;
  uint64_t v145;
  NSMutableDictionary *pendingDataSyncAcks;
  uint64_t v147;
  NSMutableSet *dialogCancelationContexts;
  uint64_t v149;
  HMDLocation *locationHandler;
  uint64_t v151;
  HMDFMFHandler *fmfHandler;
  HMDFMFHandler *v153;
  uint64_t v154;
  NSMutableArray *siriSyncNotificationReasons;
  HMDCHIPDataSource *v156;
  HMDCHIPDataSource *chipDataSource;
  HMDAccessorySetupManager *v158;
  HMDAccessorySetupManager *accessorySetupManager;
  HMDAccessorySetupCoordinator *v160;
  OS_dispatch_queue *workQueue;
  void *v162;
  void *v163;
  uint64_t v164;
  HMDAccessorySetupCoordinator *accessorySetupCoordinator;
  HMDMTSPairingServer *v166;
  HMDMTSDeviceSetupServer *v167;
  HMDMTSAuthorizationServer *v168;
  HMDMTSXPCServer *v169;
  HMDMTSXPCServer *mtsXPCServer;
  HMDMicroLocationManager *v171;
  HMDMicroLocationManager *microLocationManager;
  HMDMicroLocationLogEventObserver *v173;
  HMDMicroLocationLogEventObserver *microLocationLogEventObserver;
  HMDIDSInvitationManager *v175;
  HMDIDSInvitationManager *idsInvitationManager;
  HMDUserDeviceCapabilitiesRequestManager *v177;
  HMDUserDeviceCapabilitiesRequestManager *userDeviceCapabilitiesRequestManager;
  NSMutableSet *v179;
  NSMutableSet *mergeIDsOfUsersOfRemovedSharedHomes;
  NSMutableSet *v181;
  NSMutableSet *unprocessedOperationModelIdentifiers;
  NSUUID *primaryHomeUUID;
  NSMutableArray *v184;
  NSMutableArray *cloudZones;
  NSUUID *lastCurrentHomeUUID;
  NSUUID *dataTag;
  NSMutableArray *v188;
  NSMutableArray *uuidsOfRemovedHomes;
  void *v190;
  uint64_t v191;
  void *v192;
  void *v193;
  void *v194;
  NSMutableArray *v195;
  NSMutableArray *v196;
  NSMutableArray *v197;
  void *v198;
  int v199;
  void *v200;
  HMDHomeManager *v201;
  NSObject *v202;
  _BOOL4 v203;
  id v204;
  HMDAccessoryFirmwareUpdateManager *v205;
  HMDAccessoryFirmwareUpdateManager *accessoryFirmwareUpdateManager;
  HMDMatterSoftwareUpdateProviderDelegate *v207;
  HMDMatterSoftwareUpdateProviderDelegate *matterSoftwareUpdateProviderDelegate;
  void *v209;
  uint64_t v210;
  void *v211;
  HMDHomeManager *v212;
  NSObject *v213;
  _BOOL4 v214;
  id v215;
  id v216;
  uint64_t v217;
  double v218;
  double v219;
  void *v220;
  HMDHomeManager *v221;
  NSObject *v222;
  id v223;
  void *v224;
  id v225;
  void *v226;
  void *v227;
  void *v228;
  uint64_t v229;
  HMDBackingStore *backingStore;
  void *v231;
  HMDHomeManagerObjectLookup *v232;
  void *v233;
  void *v234;
  void *v235;
  void *v236;
  HMDHomeManager *v237;
  NSObject *v238;
  id v239;
  void *v240;
  double v241;
  id v242;
  void *v243;
  id v244;
  void *v245;
  double v246;
  void *v247;
  void *v248;
  void *v249;
  void *v250;
  HMDIDSServerBag *v251;
  void *v252;
  HMDApplicationData *v253;
  void *v254;
  void *v255;
  HMDApplicationData *v256;
  HMDApplicationData *appData;
  void *v258;
  uint64_t v259;
  void *v260;
  void *v261;
  HMDHomeManager *v262;
  NSObject *v263;
  id v264;
  uint64_t v265;
  HMDMobileAssetManager *mobileAssetManager;
  void *v267;
  void *v268;
  void *v269;
  _BOOL8 v270;
  id v271;
  uint64_t v272;
  HMFTimer *remoteAccessHealthMonitorTimer;
  HMFTimer *v274;
  void *v275;
  HMDResidentMesh *residentMesh;
  void *v277;
  int v278;
  void *v279;
  HMDHomeManager *v280;
  NSObject *v281;
  id v282;
  id v283;
  HMDResidentMesh *v284;
  HMDResidentMesh *v285;
  void *v286;
  HMDHomeManager *v287;
  NSObject *v288;
  id v289;
  void *v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t i;
  NSObject *v295;
  void *v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t j;
  void *v301;
  void *v302;
  void *v303;
  id v304;
  void *v305;
  void *v306;
  void *v307;
  void *v308;
  void *v309;
  HMDDuetPredictionSubscriber *v310;
  void *v311;
  void *v312;
  HMDDuetPredictionSubscriber *v313;
  void *v314;
  void *v315;
  void *v316;
  void *v317;
  void *v318;
  void *v319;
  void *v320;
  void *v321;
  void *v322;
  void *v323;
  void *v324;
  id *v325;
  NSObject *v326;
  id v327;
  HMDMultiUserSettingsMetricsEventDispatcher *v328;
  NSUUID *uuid;
  void *v330;
  void *v331;
  void *v332;
  void *v333;
  uint64_t v334;
  id v335;
  void *v336;
  HMDAppleAccessoryPairingController *v337;
  HMDAppleAccessoryPairingControllerDataSource *v338;
  void *v339;
  void *v340;
  HMDAppleAccessoryPairingControllerDataSource *v341;
  uint64_t v342;
  HMDAppleAccessoryPairingController *legacyAccessoryPairingController;
  void *v344;
  uint64_t v345;
  double v346;
  double v347;
  void *v348;
  HMDHomeManager *v349;
  NSObject *v350;
  id v351;
  void *v352;
  id v353;
  void *v354;
  void *v355;
  void *v356;
  void *v357;
  id *v358;
  NSObject *v359;
  id v360;
  void *v361;
  double v362;
  id v363;
  void *v364;
  id v365;
  void *v366;
  double v367;
  void *v368;
  void *v369;
  void *v370;
  void *v371;
  uint64_t v372;
  uint64_t v373;
  void *v374;
  void *v375;
  void *v376;
  void *v377;
  void *v378;
  void *v379;
  HMDXPCEventRouterServer *v380;
  void *v381;
  void *v382;
  void *v383;
  id *v384;
  NSObject *v385;
  id v386;
  HMDSiriEndpointSettingsSyncManager *v387;
  void *v388;
  void *v389;
  void *v390;
  HMDSiriEndpointSettingsSyncManager *v391;
  void *v392;
  void *v393;
  void *v394;
  uint64_t v395;
  void *v396;
  HMDWidgetTimelineRefresher *v397;
  id v398;
  NSObject *v399;
  void *v400;
  _QWORD *v401;
  void *v402;
  HMDHomeManager *v403;
  NSObject *v404;
  void *v405;
  void *v406;
  id obj;
  HMDXPCEventRouterServer *obja;
  id v409;
  id v410;
  void *v411;
  void (**v412)(id, HMDHomeManager *, id *);
  id v413;
  id v414;
  id v415;
  void *v416;
  id v417;
  id v418;
  _QWORD v419[5];
  _QWORD v420[5];
  __int128 v421;
  __int128 v422;
  __int128 v423;
  __int128 v424;
  _QWORD block[5];
  __int128 v426;
  __int128 v427;
  __int128 v428;
  __int128 v429;
  _QWORD v430[5];
  id v431;
  _QWORD v432[5];
  uint64_t v433;
  const __CFString *v434;
  const __CFString *v435;
  _BYTE v436[128];
  uint8_t v437[128];
  _BYTE buf[24];
  const __CFString *v439;
  __int16 v440;
  const __CFString *v441;
  __int16 v442;
  const __CFString *v443;
  __int16 v444;
  const __CFString *v445;
  __int16 v446;
  id v447;
  const __CFString *v448;
  _QWORD v449[4];

  v18 = a12;
  v449[1] = *MEMORY[0x24BDAC8D0];
  v418 = a3;
  v413 = a4;
  obj = a5;
  v410 = a5;
  v19 = a6;
  v409 = a8;
  v417 = a9;
  v415 = a10;
  v412 = (void (**)(id, HMDHomeManager *, id *))a11;
  v20 = &OBJC_IVAR___HMDHH2DuplicateUserModelTuple__userMergeID;
  v21 = 0x25571F000;
  v22 = 0x24BDBC000;
  v23 = 0x24BDBC000;
  v416 = v19;
  if (a12)
    goto LABEL_35;
  v24 = -[HMDSyncOperationManager initWithClientQueue:dataSource:]([HMDSyncOperationManager alloc], "initWithClientQueue:dataSource:", self->_workQueue, self);
  syncManager = self->_syncManager;
  self->_syncManager = v24;

  v26 = -[HMDCloudAccount initWithClientQueue:]([HMDCloudAccount alloc], "initWithClientQueue:", self->_workQueue);
  cloudAccount = self->_cloudAccount;
  self->_cloudAccount = v26;

  objc_msgSend(MEMORY[0x24BDBCED8], "dictionary");
  v28 = (NSMutableDictionary *)objc_claimAutoreleasedReturnValue();
  userPushCacheMap = self->_userPushCacheMap;
  self->_userPushCacheMap = v28;

  v30 = (HMFTimer *)objc_msgSend(objc_alloc(MEMORY[0x24BE3F298]), "initWithTimeInterval:options:", 0, 10.0);
  watchPushDelayTimer = self->_watchPushDelayTimer;
  self->_watchPushDelayTimer = v30;

  -[HMFTimer setDelegate:](self->_watchPushDelayTimer, "setDelegate:", self);
  v32 = self->_watchPushDelayTimer;
  -[HMDHomeManager workQueue](self, "workQueue");
  v33 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMFTimer setDelegateQueue:](v32, "setDelegateQueue:", v33);

  objc_storeStrong((id *)&self->_messageDispatcher, a3);
  v34 = -[HMDBiomeLogEventObserver initWithBiomeEventManager:dataSource:]([HMDBiomeLogEventObserver alloc], "initWithBiomeEventManager:dataSource:", self->_biomeEventManager, self);
  biomeLogEventObserver = self->_biomeLogEventObserver;
  self->_biomeLogEventObserver = v34;

  v36 = -[HMDCompositeSettingsControllerManager initWithDataSource:]([HMDCompositeSettingsControllerManager alloc], "initWithDataSource:", self);
  compositeSettingsControllerManager = self->_compositeSettingsControllerManager;
  self->_compositeSettingsControllerManager = v36;

  v38 = -[HMDSiriEndpointOnboardingManager initWithDataSource:]([HMDSiriEndpointOnboardingManager alloc], "initWithDataSource:", self);
  siriEndpointOnboardingManager = self->_siriEndpointOnboardingManager;
  self->_siriEndpointOnboardingManager = v38;

  v40 = (void *)MEMORY[0x227676638]();
  v41 = self;
  HMFGetOSLogHandle();
  v42 = (id)objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v42, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v43 = (id)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543362;
    *(_QWORD *)&buf[4] = v43;
    _os_log_impl(&dword_2218F0000, v42, OS_LOG_TYPE_INFO, "%{public}@Creating event router broker", buf, 0xCu);

  }
  objc_autoreleasePoolPop(v40);
  v44 = objc_alloc(MEMORY[0x24BE4ED98]);
  v45 = (id)eventStorePath;
  v46 = objc_msgSend(v44, "initWithFileName:", v45);
  lastEventStore = v41->_lastEventStore;
  v41->_lastEventStore = (HMELastEventStore *)v46;

  if ((-[HMELastEventStore startup](v41->_lastEventStore, "startup") & 1) != 0)
  {
    v48 = -[HMDLastEventStoreController initWithWithEventStore:]([HMDLastEventStoreController alloc], "initWithWithEventStore:", v41->_lastEventStore);
    lastEventStoreController = v41->_lastEventStoreController;
    v41->_lastEventStoreController = v48;

  }
  else
  {
    v50 = (void *)MEMORY[0x227676638]();
    v51 = v41;
    HMFGetOSLogHandle();
    v52 = (id)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v52, OS_LOG_TYPE_FAULT))
    {
      HMFGetLogIdentifier();
      v53 = (id)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      *(_QWORD *)&buf[4] = v53;
      _os_log_impl(&dword_2218F0000, v52, OS_LOG_TYPE_FAULT, "%{public}@Unable to start event store", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v50);
  }
  v54 = objc_alloc(MEMORY[0x24BE4ED78]);
  -[HMDHomeManager workQueue](v41, "workQueue");
  v55 = (void *)objc_claimAutoreleasedReturnValue();
  v56 = objc_msgSend(v54, "initWithQueue:dataSource:storeReadHandle:logCategory:identifier:", v55, v41, v41->_lastEventStore, "Router.RegistrationForwarding", 0);
  registrationForwardingEventRouter = v41->_registrationForwardingEventRouter;
  v41->_registrationForwardingEventRouter = (HMEDelegatingEventRouter *)v56;

  v58 = objc_alloc(MEMORY[0x24BE4EDA0]);
  -[HMDHomeManager workQueue](v41, "workQueue");
  v59 = (void *)objc_claimAutoreleasedReturnValue();
  v60 = objc_msgSend(v58, "initWithQueue:storeReadHandle:storeWriteHandle:logCategory:", v59, v41->_lastEventStore, v41->_lastEventStore, "Router.LocalMemory");
  memoryEventRouter = v41->_memoryEventRouter;
  v41->_memoryEventRouter = (HMEMemoryEventBus *)v60;

  -[HMEMemoryEventBus setDataSource:](v41->_memoryEventRouter, "setDataSource:", v41);
  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    v62 = v41->_registrationForwardingEventRouter;
    -[HMEMemoryEventBus synchronousSubscriptionProvider](v41->_memoryEventRouter, "synchronousSubscriptionProvider");
    v63 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMEDelegatingEventRouter registerSubRouter:](v62, "registerSubRouter:", v63);

  }
  v64 = [HMDLoggingEventForwarder alloc];
  v65 = v41->_memoryEventRouter;
  -[HMDHomeManager logEventSubmitter](v41, "logEventSubmitter");
  v66 = (void *)objc_claimAutoreleasedReturnValue();
  v67 = -[HMDLoggingEventForwarder initWithEventForwarder:logEventSubmitter:](v64, "initWithEventForwarder:logEventSubmitter:", v65, v66);
  loggingMemoryEventForwarder = v41->_loggingMemoryEventForwarder;
  v41->_loggingMemoryEventForwarder = (HMDLoggingEventForwarder *)v67;

  -[HMDHomeManager initalizeMediaGroupParticipantDataLocalStorage](v41, "initalizeMediaGroupParticipantDataLocalStorage");
  if (isiOSDevice() || isWatch() || isMac())
  {
    v69 = [HMDRemoteEventRouterAssertionController alloc];
    -[HMDHomeManager workQueue](v41, "workQueue");
    v70 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHomeManager notificationCenter](v41, "notificationCenter");
    v71 = (void *)objc_claimAutoreleasedReturnValue();
    v72 = -[HMDRemoteEventRouterAssertionController initWithQueue:notificationCenter:](v69, "initWithQueue:notificationCenter:", v70, v71);
    -[HMDHomeManager setEventRouterAssertionController:](v41, "setEventRouterAssertionController:", v72);

    -[HMDHomeManager eventRouterAssertionController](v41, "eventRouterAssertionController");
    v73 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v73, "configure");

  }
  objc_storeStrong((id *)&v41->_accessoryBrowserInternal, a4);
  -[HMDAccessoryBrowser setUnpairedAccessoryManagerDelegate:](v41->_accessoryBrowserInternal, "setUnpairedAccessoryManagerDelegate:", v41);
  objc_msgSend(MEMORY[0x24BDBCEB8], "array");
  v74 = objc_claimAutoreleasedReturnValue();
  homes = v41->_homes;
  v41->_homes = (NSMutableArray *)v74;

  objc_msgSend(MEMORY[0x24BDBCEF0], "set");
  v76 = objc_claimAutoreleasedReturnValue();
  pendingHomesBeingRemoved = v41->_pendingHomesBeingRemoved;
  v41->_pendingHomesBeingRemoved = (NSMutableSet *)v76;

  v78 = objc_alloc_init(HMDPowerManager);
  powerManager = v41->_powerManager;
  v41->_powerManager = v78;

  v41->_accountActive = 0;
  v41->_accountStatusFailedDueToNetworkFailure = 0;
  v41->_uploadToCloudIsPending = 0;
  v41->_uploadHomeDataToCloud = 0;
  objc_storeStrong((id *)&v41->_identityRegistry, a8);
  cloudOperationRetryTimer = v41->_cloudOperationRetryTimer;
  v41->_cloudOperationRetryTimer = 0;

  v41->_lastAnswerForShouldCloudSyncData = 0;
  objc_storeStrong((id *)&v41->_msgFilterChain, obj);
  v41->_cloudOperationRetryCount = 0;
  v41->_backOffOperationInProgress = 0;
  objc_storeStrong((id *)&v41->_accountRegistry, a9);
  -[HMDHomeManager _migrateUniqueIdentifierPrefsIfNeeded](v41, "_migrateUniqueIdentifierPrefsIfNeeded");
  +[HMDAppleAccountSettings sharedSettings](HMDAppleAccountSettings, "sharedSettings");
  v81 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v81, "synchronize");

  v41->_companionReachable = 0;
  v82 = +[HMDWatchSystemState sharedState](HMDWatchSystemState, "sharedState");
  if (+[HMDDeviceCapabilities isCompanionCapable](HMDDeviceCapabilities, "isCompanionCapable"))
  {
    v83 = [HMDPairedSync alloc];
    -[HMDHomeManager workQueue](v41, "workQueue");
    v84 = (void *)objc_claimAutoreleasedReturnValue();
    v85 = -[HMDPairedSync initWithQueue:](v83, "initWithQueue:", v84);
    pairedSync = v41->_pairedSync;
    v41->_pairedSync = (HMDPairedSync *)v85;

    +[HMDWatchManager sharedManager](HMDWatchManager, "sharedManager");
    v87 = objc_claimAutoreleasedReturnValue();
    watchManager = v41->_watchManager;
    v41->_watchManager = (HMDWatchManager *)v87;
    v89 = &OBJC_IVAR___HMDHH2DuplicateUserModelTuple__userMergeID;
LABEL_19:

    goto LABEL_20;
  }
  objc_msgSend(MEMORY[0x24BE3F260], "productInfo");
  v90 = (void *)objc_claimAutoreleasedReturnValue();
  v91 = objc_msgSend(v90, "productPlatform");

  v89 = &OBJC_IVAR___HMDHH2DuplicateUserModelTuple__userMergeID;
  if (v91 == 3)
  {
    +[HMDCompanionManager sharedManager](HMDCompanionManager, "sharedManager");
    v92 = objc_claimAutoreleasedReturnValue();
    watchManager = v41->_companionManager;
    v41->_companionManager = (HMDCompanionManager *)v92;
    goto LABEL_19;
  }
LABEL_20:
  if (+[HMDSoftwareUpdateManager isSupported](HMDSoftwareUpdateManager, "isSupported"))
  {
    v93 = objc_alloc_init(HMDSoftwareUpdateManager);
    softwareUpdateManager = v41->_softwareUpdateManager;
    v41->_softwareUpdateManager = v93;

  }
  v41->_uploadMetadataToCloud = 0;
  v41->_cloudkitAccountStatusDetermined = 0;
  v41->_generationCounter = 0;
  if (v41->_generationCounterToken == -1)
  {
    -[HMDHomeManager darwinNotificationProvider](v41, "darwinNotificationProvider");
    v95 = (void *)objc_claimAutoreleasedReturnValue();
    v96 = objc_msgSend(v95, "notifyRegisterCheck:outToken:", *MEMORY[0x24BDD5FC0], &v41->_generationCounterToken);

    if (!v96)
    {
      v433 = 0;
      -[HMDHomeManager darwinNotificationProvider](v41, "darwinNotificationProvider");
      v97 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v97, "notifyGetState:state:", v41->_generationCounterToken, &v433);

      if (!v433)
      {
        v98 = (void *)MEMORY[0x227676638]();
        v99 = v41;
        HMFGetOSLogHandle();
        v100 = (id)objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v100, OS_LOG_TYPE_DEFAULT))
        {
          HMFGetLogIdentifier();
          v101 = (id)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543362;
          *(_QWORD *)&buf[4] = v101;
          _os_log_impl(&dword_2218F0000, v100, OS_LOG_TYPE_DEFAULT, "%{public}@Generation counter for notification token is zero - refreshing from persisted configuration", buf, 0xCu);

        }
        objc_autoreleasePoolPop(v98);
        -[HMDHomeManager userDefaults](v99, "userDefaults");
        v102 = (void *)objc_claimAutoreleasedReturnValue();
        v433 = objc_msgSend(v102, "integerForKey:", CFSTR("HMDHomeManagerGenerationCounter"));

        if (!v433)
        {
          v103 = (void *)MEMORY[0x227676638]();
          v104 = v99;
          HMFGetOSLogHandle();
          v105 = (id)objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v105, OS_LOG_TYPE_DEFAULT))
          {
            HMFGetLogIdentifier();
            v106 = (id)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 138543362;
            *(_QWORD *)&buf[4] = v106;
            _os_log_impl(&dword_2218F0000, v105, OS_LOG_TYPE_DEFAULT, "%{public}@Persisted generation counter is zero - need to invalidate client caches", buf, 0xCu);

          }
          objc_autoreleasePoolPop(v103);
        }
      }
      v107 = (void *)MEMORY[0x227676638]();
      v108 = v41;
      HMFGetOSLogHandle();
      v109 = (id)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v109, OS_LOG_TYPE_DEFAULT))
      {
        HMFGetLogIdentifier();
        v110 = (id)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        *(_QWORD *)&buf[4] = v110;
        *(_WORD *)&buf[12] = 2048;
        *(_QWORD *)&buf[14] = v433;
        _os_log_impl(&dword_2218F0000, v109, OS_LOG_TYPE_DEFAULT, "%{public}@Initializing with generation counter %llu", buf, 0x16u);

      }
      objc_autoreleasePoolPop(v107);
      v41->_generationCounter = v433;
    }
  }
  objc_msgSend(MEMORY[0x24BDBCEF0], "set");
  v111 = objc_claimAutoreleasedReturnValue();
  unassociatedRemotePeers = v41->_unassociatedRemotePeers;
  v41->_unassociatedRemotePeers = (NSMutableSet *)v111;

  objc_msgSend(MEMORY[0x24BDBCED8], "dictionary");
  v113 = objc_claimAutoreleasedReturnValue();
  associatedRemotePeers = v41->_associatedRemotePeers;
  v41->_associatedRemotePeers = (NSMutableDictionary *)v113;

  objc_msgSend(MEMORY[0x24BDBCED8], "dictionary");
  v115 = objc_claimAutoreleasedReturnValue();
  associatedWatchPeers = v41->_associatedWatchPeers;
  v41->_associatedWatchPeers = (NSMutableDictionary *)v115;

  objc_msgSend(MEMORY[0x24BDBCED8], "dictionary");
  v117 = objc_claimAutoreleasedReturnValue();
  watchSyncStateMap = v41->_watchSyncStateMap;
  v41->_watchSyncStateMap = (NSMutableDictionary *)v117;

  objc_msgSend(MEMORY[0x24BDBCEF0], "set");
  v119 = objc_claimAutoreleasedReturnValue();
  fullSyncedWatchPeers = v41->_fullSyncedWatchPeers;
  v41->_fullSyncedWatchPeers = (NSMutableSet *)v119;

  objc_msgSend(MEMORY[0x24BDBCED8], "dictionary");
  v121 = objc_claimAutoreleasedReturnValue();
  watchSyncRetryContextBySyncIdentifier = v41->_watchSyncRetryContextBySyncIdentifier;
  v41->_watchSyncRetryContextBySyncIdentifier = (NSMutableDictionary *)v121;

  objc_msgSend(MEMORY[0x24BDD1650], "strongToStrongObjectsMapTable");
  v123 = objc_claimAutoreleasedReturnValue();
  watchSyncRetryContextByRetryTimer = v41->_watchSyncRetryContextByRetryTimer;
  v41->_watchSyncRetryContextByRetryTimer = (NSMapTable *)v123;

  objc_msgSend(MEMORY[0x24BDBCEB8], "array");
  v125 = objc_claimAutoreleasedReturnValue();
  pendingResponsesForAccessoryFinder = v41->_pendingResponsesForAccessoryFinder;
  v41->_pendingResponsesForAccessoryFinder = (NSMutableArray *)v125;

  objc_msgSend(MEMORY[0x24BDBCED8], "dictionary");
  v127 = objc_claimAutoreleasedReturnValue();
  pendingRemoteSessions = v41->_pendingRemoteSessions;
  v41->_pendingRemoteSessions = (NSMutableDictionary *)v127;

  objc_msgSend(MEMORY[0x24BDBCEF0], "set");
  v129 = objc_claimAutoreleasedReturnValue();
  pendingResidentSetupSessions = v41->_pendingResidentSetupSessions;
  v41->_pendingResidentSetupSessions = (NSMutableSet *)v129;

  HMDispatchQueueNameString();
  v131 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
  v132 = (const char *)objc_msgSend(v131, "UTF8String");
  dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  v133 = objc_claimAutoreleasedReturnValue();
  v134 = dispatch_queue_create(v132, v133);
  v135 = v89[120];
  v136 = *(Class *)((char *)&v41->super.super.isa + v135);
  *(Class *)((char *)&v41->super.super.isa + v135) = (Class)v134;

  v137 = -[HMDClientConnection initWithHomeManager:queue:messageDispatcher:]([HMDClientConnection alloc], "initWithHomeManager:queue:messageDispatcher:", v41, *(Class *)((char *)&v41->super.super.isa + v135), self->_messageDispatcher);
  clientConnection = v41->_clientConnection;
  v41->_clientConnection = v137;

  v139 = -[HMDAssistantGather initWithHomeManager:queue:]([HMDAssistantGather alloc], "initWithHomeManager:queue:", v41, *(Class *)((char *)&v41->super.super.isa + v135));
  gatherer = v41->_gatherer;
  v41->_gatherer = v139;

  -[HMDHomeManager _getAssistantHashingData](v41, "_getAssistantHashingData");
  v141 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHomeManager _setAssistantHashingData:](v41, "_setAssistantHashingData:", v141);

  +[HMDLaunchHandler sharedHandler](HMDLaunchHandler, "sharedHandler");
  v142 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v142, "removePersistentRelaunchRegistrationsIfNecessary");

  objc_msgSend(MEMORY[0x24BDBCED8], "dictionary");
  v143 = objc_claimAutoreleasedReturnValue();
  pendingFragmentationStream = v41->_pendingFragmentationStream;
  v41->_pendingFragmentationStream = (NSMutableDictionary *)v143;

  +[HMDPersistentStore unarchiveIDSDataSyncJournal](HMDPersistentStore, "unarchiveIDSDataSyncJournal");
  v145 = objc_claimAutoreleasedReturnValue();
  pendingDataSyncAcks = v41->_pendingDataSyncAcks;
  v41->_pendingDataSyncAcks = (NSMutableDictionary *)v145;

  v41->_ignoreFirstTimeReachabilityChanged = 1;
  objc_msgSend(MEMORY[0x24BDBCEF0], "set");
  v147 = objc_claimAutoreleasedReturnValue();
  dialogCancelationContexts = v41->_dialogCancelationContexts;
  v41->_dialogCancelationContexts = (NSMutableSet *)v147;

  +[HMDLocation sharedManager](HMDLocation, "sharedManager");
  v149 = objc_claimAutoreleasedReturnValue();
  locationHandler = v41->_locationHandler;
  v41->_locationHandler = (HMDLocation *)v149;

  +[HMDFMFHandler sharedHandler](HMDFMFHandler, "sharedHandler");
  v151 = objc_claimAutoreleasedReturnValue();
  fmfHandler = v41->_fmfHandler;
  v41->_fmfHandler = (HMDFMFHandler *)v151;

  v153 = v41->_fmfHandler;
  v432[0] = MEMORY[0x24BDAC760];
  v432[1] = 3221225472;
  v432[2] = __200__HMDHomeManager__loadMessageDispatcher_accessoryBrowser_messageFilterChain_homeData_localDataDecryptionFailed_identityRegistry_accountRegistry_uncommittedTransactions_backingStoreFactory_reloadData___block_invoke;
  v432[3] = &unk_24E79C240;
  v432[4] = v41;
  -[HMDFMFHandler startWithCompletionHandler:](v153, "startWithCompletionHandler:", v432);
  v41->_needToCleanUpKeys = 0;
  objc_msgSend(MEMORY[0x24BDBCEB8], "array");
  v154 = objc_claimAutoreleasedReturnValue();
  siriSyncNotificationReasons = v41->_siriSyncNotificationReasons;
  v41->_siriSyncNotificationReasons = (NSMutableArray *)v154;

  v156 = -[HMDCHIPDataSource initWithHomeManager:]([HMDCHIPDataSource alloc], "initWithHomeManager:", v41);
  v21 = (uint64_t)v89;
  chipDataSource = v41->_chipDataSource;
  v41->_chipDataSource = v156;

  v158 = -[HMDAccessorySetupManager initWithWorkQueue:homeManager:]([HMDAccessorySetupManager alloc], "initWithWorkQueue:homeManager:", self->_workQueue, v41);
  accessorySetupManager = v41->_accessorySetupManager;
  v41->_accessorySetupManager = v158;

  -[HMDAccessorySetupManager configure](v41->_accessorySetupManager, "configure");
  v160 = [HMDAccessorySetupCoordinator alloc];
  workQueue = self->_workQueue;
  -[HMDAccessorySetupManager messageDispatcher](v41->_accessorySetupManager, "messageDispatcher");
  v162 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDAccessoryBrowser chipAccessoryServerBrowser](v41->_accessoryBrowserInternal, "chipAccessoryServerBrowser");
  v163 = (void *)objc_claimAutoreleasedReturnValue();
  v164 = -[HMDAccessorySetupCoordinator initWithWorkQueue:messageDispatcher:chipAccessoryServerBrowser:chipDataSource:](v160, "initWithWorkQueue:messageDispatcher:chipAccessoryServerBrowser:chipDataSource:", workQueue, v162, v163, v41->_chipDataSource);
  accessorySetupCoordinator = v41->_accessorySetupCoordinator;
  v41->_accessorySetupCoordinator = (HMDAccessorySetupCoordinator *)v164;

  -[HMDAccessorySetupCoordinator configure](v41->_accessorySetupCoordinator, "configure");
  -[HMDAccessorySetupManager setAccessorySetupCoordinator:](v41->_accessorySetupManager, "setAccessorySetupCoordinator:", v41->_accessorySetupCoordinator);
  v166 = -[HMDMTSPairingServer initWithAccessoryBrowser:]([HMDMTSPairingServer alloc], "initWithAccessoryBrowser:", v413);
  v167 = -[HMDMTSDeviceSetupServer initWithAccessorySetupManager:]([HMDMTSDeviceSetupServer alloc], "initWithAccessorySetupManager:", v41->_accessorySetupManager);
  v168 = -[HMDMTSAuthorizationServer initWithAccountManager:]([HMDMTSAuthorizationServer alloc], "initWithAccountManager:", v41->_appleAccountManager);
  v169 = -[HMDMTSXPCServer initWithPairingServer:deviceSetupServer:authorizationServer:]([HMDMTSXPCServer alloc], "initWithPairingServer:deviceSetupServer:authorizationServer:", v166, v167, v168);
  mtsXPCServer = v41->_mtsXPCServer;
  v41->_mtsXPCServer = v169;

  -[HMDMTSXPCServer start](v41->_mtsXPCServer, "start");
  v22 = 0x24BDBC000uLL;

  v20 = &OBJC_IVAR___HMDHH2DuplicateUserModelTuple__userMergeID;
  v19 = v416;
  v18 = a12;
  v23 = 0x24BDBC000uLL;
LABEL_35:
  v171 = -[HMDMicroLocationManager initWithLocationManager:]([HMDMicroLocationManager alloc], "initWithLocationManager:", *(Class *)((char *)&self->super.super.isa + v20[127]));
  microLocationManager = self->_microLocationManager;
  self->_microLocationManager = v171;

  v173 = -[HMDMicroLocationLogEventObserver initWithDataSource:microLocationManager:]([HMDMicroLocationLogEventObserver alloc], "initWithDataSource:microLocationManager:", self, self->_microLocationManager);
  microLocationLogEventObserver = self->_microLocationLogEventObserver;
  self->_microLocationLogEventObserver = v173;

  self->_siriSyncNotificationTime = 0;
  v175 = -[HMDIDSInvitationManager initWithHomeManager:messageDispatcher:queue:remoteAccountManager:]([HMDIDSInvitationManager alloc], "initWithHomeManager:messageDispatcher:queue:remoteAccountManager:", self, v418, *(Class *)((char *)&self->super.super.isa + *(int *)(v21 + 480)), self->_remoteAccountManager);
  idsInvitationManager = self->_idsInvitationManager;
  self->_idsInvitationManager = v175;

  v177 = -[HMDUserDeviceCapabilitiesRequestManager initWithHomeManager:accountRegistry:messageDispatcher:]([HMDUserDeviceCapabilitiesRequestManager alloc], "initWithHomeManager:accountRegistry:messageDispatcher:", self, v417, v418);
  userDeviceCapabilitiesRequestManager = self->_userDeviceCapabilitiesRequestManager;
  self->_userDeviceCapabilitiesRequestManager = v177;

  objc_msgSend(*(id *)(v22 + 3824), "set");
  v179 = (NSMutableSet *)objc_claimAutoreleasedReturnValue();
  mergeIDsOfUsersOfRemovedSharedHomes = self->_mergeIDsOfUsersOfRemovedSharedHomes;
  self->_mergeIDsOfUsersOfRemovedSharedHomes = v179;

  self->_homeDataLoadedFromArchive = 0;
  self->_accessAllowedWhenLocked = isiOSDevice();
  objc_msgSend(*(id *)(v22 + 3824), "set");
  v181 = (NSMutableSet *)objc_claimAutoreleasedReturnValue();
  unprocessedOperationModelIdentifiers = self->_unprocessedOperationModelIdentifiers;
  self->_unprocessedOperationModelIdentifiers = v181;

  primaryHomeUUID = self->_primaryHomeUUID;
  self->_primaryHomeUUID = 0;

  self->_homeManagerZoneFirstFetch = 1;
  objc_msgSend(*(id *)(v23 + 3768), "array");
  v184 = (NSMutableArray *)objc_claimAutoreleasedReturnValue();
  cloudZones = self->_cloudZones;
  self->_cloudZones = v184;

  lastCurrentHomeUUID = self->_lastCurrentHomeUUID;
  self->_lastCurrentHomeUUID = 0;

  dataTag = self->_dataTag;
  self->_dataTag = 0;

  objc_msgSend(*(id *)(v23 + 3768), "array");
  v188 = (NSMutableArray *)objc_claimAutoreleasedReturnValue();
  uuidsOfRemovedHomes = self->_uuidsOfRemovedHomes;
  self->_uuidsOfRemovedHomes = v188;

  self->_residentEnabledState = 0;
  getAssistantConfigurationVersion();
  v190 = (void *)objc_claimAutoreleasedReturnValue();
  self->_assistantGenerationCounter = objc_msgSend(v190, "unsignedIntegerValue");

  self->_homeDatabaseSize = 0;
  objc_msgSend(v19, "UUIDsOfRemovedHomes");
  v191 = objc_claimAutoreleasedReturnValue();
  if (v191)
  {
    v192 = (void *)v191;
    isWatch();

    v193 = *(void **)(v23 + 3768);
    objc_msgSend(v19, "UUIDsOfRemovedHomes");
    v194 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v193, "arrayWithArray:", v194);
    v195 = (NSMutableArray *)objc_claimAutoreleasedReturnValue();
    v196 = self->_uuidsOfRemovedHomes;
    self->_uuidsOfRemovedHomes = v195;

  }
  else
  {
    objc_msgSend(*(id *)(v23 + 3768), "array");
    v197 = (NSMutableArray *)objc_claimAutoreleasedReturnValue();
    v194 = self->_uuidsOfRemovedHomes;
    self->_uuidsOfRemovedHomes = v197;
  }

  +[HMDDeviceCapabilities deviceCapabilities](HMDDeviceCapabilities, "deviceCapabilities");
  v198 = (void *)objc_claimAutoreleasedReturnValue();
  v199 = objc_msgSend(v198, "supportsFirmwareUpdate");

  if (v199)
  {
    v200 = (void *)MEMORY[0x227676638]();
    v201 = self;
    HMFGetOSLogHandle();
    v202 = (id)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v202, OS_LOG_TYPE_DEBUG))
    {
      HMFGetLogIdentifier();
      v203 = v18;
      v204 = (id)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      *(_QWORD *)&buf[4] = v204;
      _os_log_impl(&dword_2218F0000, v202, OS_LOG_TYPE_DEBUG, "%{public}@Starting AccessoryFirmwareUpdateManager", buf, 0xCu);

      v18 = v203;
    }

    objc_autoreleasePoolPop(v200);
    v205 = -[HMDAccessoryFirmwareUpdateManager initWithHomeManager:]([HMDAccessoryFirmwareUpdateManager alloc], "initWithHomeManager:", v201);
    accessoryFirmwareUpdateManager = v201->_accessoryFirmwareUpdateManager;
    v201->_accessoryFirmwareUpdateManager = v205;

  }
  if ((_os_feature_enabled_impl() & 1) != 0
    || CFPreferencesGetAppBooleanValue(CFSTR("MatterOTA"), CFSTR("/Library/Managed Preferences/mobile/com.apple.homed.plist"), 0))
  {
    v207 = -[HMDMatterSoftwareUpdateProviderDelegate initWithHomeManager:accessoryFirmwareUpdateManager:]([HMDMatterSoftwareUpdateProviderDelegate alloc], "initWithHomeManager:accessoryFirmwareUpdateManager:", self, self->_accessoryFirmwareUpdateManager);
    matterSoftwareUpdateProviderDelegate = self->_matterSoftwareUpdateProviderDelegate;
    self->_matterSoftwareUpdateProviderDelegate = v207;

  }
  if (self->_residentEnabledState == 1)
  {
    objc_msgSend(MEMORY[0x24BE3F260], "productInfo");
    v209 = (void *)objc_claimAutoreleasedReturnValue();
    v210 = objc_msgSend(v209, "productClass");

    if (v210 == 4)
    {
      v211 = (void *)MEMORY[0x227676638]();
      v212 = self;
      HMFGetOSLogHandle();
      v213 = (id)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v213, OS_LOG_TYPE_DEFAULT))
      {
        HMFGetLogIdentifier();
        v214 = v18;
        v215 = (id)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543362;
        *(_QWORD *)&buf[4] = v215;
        _os_log_impl(&dword_2218F0000, v213, OS_LOG_TYPE_DEFAULT, "%{public}@Force enabling as a resident", buf, 0xCu);

        v18 = v214;
      }

      objc_autoreleasePoolPop(v211);
      self->_residentEnabledState = 2;
    }
  }
  if (v18)
  {
    -[HMDHomeManager uuid](self, "uuid");
    v216 = (id)objc_claimAutoreleasedReturnValue();
    -[HMDHomeManager updateGenerationCounterWithReason:sourceUUID:shouldNotifyClients:](self, "updateGenerationCounterWithReason:sourceUUID:shouldNotifyClients:", CFSTR("ReloadHomeData"), v216, 0);
    v414 = 0;
  }
  else
  {
    v217 = HMFUptime();
    v219 = v218;
    v220 = (void *)MEMORY[0x227676638](v217);
    v221 = self;
    HMFGetOSLogHandle();
    v222 = (id)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v222, OS_LOG_TYPE_DEBUG))
    {
      HMFGetLogIdentifier();
      v223 = (id)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138544386;
      *(_QWORD *)&buf[4] = v223;
      *(_WORD *)&buf[12] = 2114;
      *(_QWORD *)&buf[14] = CFSTR("homeManagerInitStart");
      *(_WORD *)&buf[22] = 2112;
      v439 = CFSTR("Start backing store setup");
      v440 = 2114;
      v441 = CFSTR("state");
      v442 = 2112;
      v443 = CFSTR("homeManagerLoadingBackingStore");
      _os_log_impl(&dword_2218F0000, v222, OS_LOG_TYPE_DEBUG, "%{public}@tag=\"%{public}@\" desc=\"%@\" %{public}@=\"%@\", buf, 0x34u);

    }
    objc_autoreleasePoolPop(v220);
    objc_msgSend(MEMORY[0x24BE4F1C0], "sharedInstance");
    v224 = (void *)objc_claimAutoreleasedReturnValue();
    v225 = objc_alloc(MEMORY[0x24BE4F1D0]);
    v448 = CFSTR("state");
    v449[0] = CFSTR("homeManagerLoadingBackingStore");
    objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v449, &v448, 1);
    v226 = (void *)objc_claimAutoreleasedReturnValue();
    v227 = (void *)objc_msgSend(v225, "initWithTag:data:", CFSTR("homeManagerInitStart"), v226);
    objc_msgSend(MEMORY[0x24BE3F138], "currentTagProcessorList");
    v228 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v224, "submitTaggedEvent:processorList:", v227, v228);

    v431 = 0;
    v412[2](v412, v221, &v431);
    v229 = objc_claimAutoreleasedReturnValue();
    v216 = v431;
    backingStore = v221->_backingStore;
    v221->_backingStore = (HMDBackingStore *)v229;

    if (!v221->_backingStore)
    {
      v402 = (void *)MEMORY[0x227676638]();
      v403 = v221;
      HMFGetOSLogHandle();
      v404 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v404, OS_LOG_TYPE_FAULT))
      {
        HMFGetLogIdentifier();
        v405 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        *(_QWORD *)&buf[4] = v405;
        *(_WORD *)&buf[12] = 2112;
        *(_QWORD *)&buf[14] = v216;
        _os_log_impl(&dword_2218F0000, v404, OS_LOG_TYPE_FAULT, "%{public}@Unable to open Home Manager BackingStore zone. Unsurvivable: %@", buf, 0x16u);

      }
      objc_autoreleasePoolPop(v402);
      _Exit(1);
    }
    -[HMDHomeManager backingStore](v221, "backingStore");
    v231 = (void *)objc_claimAutoreleasedReturnValue();
    +[HMDHomeManager setupCoreDataUsingBackingStore:](HMDHomeManager, "setupCoreDataUsingBackingStore:", v231);
    v414 = (id)objc_claimAutoreleasedReturnValue();

    v232 = -[HMDHomeManagerObjectLookup initWithHomeManager:]([HMDHomeManagerObjectLookup alloc], "initWithHomeManager:", v221);
    -[HMDHomeManager backingStore](v221, "backingStore");
    v233 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v233, "setLookup:", v232);

    -[HMDHomeManager backingStore](v221, "backingStore");
    v234 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v234, "setHomeManager:", v221);

    -[HMDHomeManager remoteAccountManager](v221, "remoteAccountManager");
    v235 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v235, "setBackingStore:", v221->_backingStore);

    v236 = (void *)MEMORY[0x227676638]();
    v237 = v221;
    HMFGetOSLogHandle();
    v238 = (id)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v238, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v239 = (id)objc_claimAutoreleasedReturnValue();
      v240 = (void *)MEMORY[0x24BDD17C8];
      HMFUptime();
      objc_msgSend(v240, "stringWithFormat:", CFSTR("%.3f"), v241 - v219);
      v242 = (id)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138544898;
      *(_QWORD *)&buf[4] = v239;
      *(_WORD *)&buf[12] = 2114;
      *(_QWORD *)&buf[14] = CFSTR("homeManagerInitStart");
      *(_WORD *)&buf[22] = 2112;
      v439 = CFSTR("Backing store setup done");
      v440 = 2114;
      v441 = CFSTR("state");
      v442 = 2112;
      v443 = CFSTR("homeManagerLoadedBackingStore");
      v444 = 2114;
      v445 = CFSTR("duration");
      v446 = 2112;
      v447 = v242;
      _os_log_impl(&dword_2218F0000, v238, OS_LOG_TYPE_INFO, "%{public}@tag=\"%{public}@\" desc=\"%@\" %{public}@=\"%@\" %{public}@=\"%@\", buf, 0x48u);

    }
    objc_autoreleasePoolPop(v236);
    objc_msgSend(MEMORY[0x24BE4F1C0], "sharedInstance");
    v243 = (void *)objc_claimAutoreleasedReturnValue();
    v244 = objc_alloc(MEMORY[0x24BE4F1D0]);
    v245 = (void *)MEMORY[0x24BDD17C8];
    HMFUptime();
    objc_msgSend(v245, "stringWithFormat:", CFSTR("%.3f"), v246 - v219);
    v247 = (void *)objc_claimAutoreleasedReturnValue();
    HMDTaggedLoggingCreateDictionary();
    v248 = (void *)objc_claimAutoreleasedReturnValue();
    v249 = (void *)objc_msgSend(v244, "initWithTag:data:", CFSTR("homeManagerInitStart"), v248, CFSTR("state"), CFSTR("homeManagerLoadedBackingStore"), CFSTR("duration"), v247);
    objc_msgSend(MEMORY[0x24BE3F138], "currentTagProcessorList");
    v250 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v243, "submitTaggedEvent:processorList:", v249, v250);

    v237->_accountActive = 1;
    -[HMDHomeManager _registerForMessages](v237, "_registerForMessages");
    -[HMDHomeManager __checkForBootTimeLogout](v237, "__checkForBootTimeLogout");
    v19 = v416;
    v18 = a12;
  }

  v251 = objc_alloc_init(HMDIDSServerBag);
  -[HMDHomeManager setIdsServerBag:](self, "setIdsServerBag:", v251);

  -[HMDHomeManager idsServerBag](self, "idsServerBag");
  v252 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v252, "setDelegate:", self);

  if (-[HMDHomeManager _configureHomes:uncommittedTransactions:](self, "_configureHomes:uncommittedTransactions:", MEMORY[0x24BDBD1A8], v415))
  {
    _HMFPreconditionFailure();
  }
  v253 = [HMDApplicationData alloc];
  objc_msgSend(v19, "applicationData");
  v254 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v254, "dictionary");
  v255 = (void *)objc_claimAutoreleasedReturnValue();
  v256 = -[HMDApplicationData initWithDictionary:parentUUID:](v253, "initWithDictionary:parentUUID:", v255, self->_uuid);
  appData = self->_appData;
  self->_appData = v256;

  if (v18)
  {
    -[HMDHomeManager updatePowerAssertion](self, "updatePowerAssertion");
    objc_msgSend(v19, "accessories");
    v258 = (void *)objc_claimAutoreleasedReturnValue();
    v259 = objc_msgSend(v258, "count");

    if (v259)
    {
      -[HMDHomeManager accessoryBrowserInternal](self, "accessoryBrowserInternal");
      v260 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v260, "startDiscoveringPairedAccessories");

    }
  }
  else
  {
    -[HMDPowerManager start](self->_powerManager, "start");
    -[HMDHomeManager updatePowerAssertion](self, "updatePowerAssertion");
    v261 = (void *)MEMORY[0x227676638](-[HMDHomeManager _monitorReachability](self, "_monitorReachability"));
    v262 = self;
    HMFGetOSLogHandle();
    v263 = (id)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v263, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v264 = (id)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      *(_QWORD *)&buf[4] = v264;
      _os_log_impl(&dword_2218F0000, v263, OS_LOG_TYPE_INFO, "%{public}@Starting the mobile asset manager", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v261);
    -[HMDHomeManager makeMobileAssetManager](v262, "makeMobileAssetManager");
    v265 = objc_claimAutoreleasedReturnValue();
    mobileAssetManager = v262->_mobileAssetManager;
    v262->_mobileAssetManager = (HMDMobileAssetManager *)v265;

    -[HMDHomeManager mobileAssetManager](v262, "mobileAssetManager");
    v267 = (void *)objc_claimAutoreleasedReturnValue();
    v430[0] = MEMORY[0x24BDAC760];
    v430[1] = 3221225472;
    v430[2] = __200__HMDHomeManager__loadMessageDispatcher_accessoryBrowser_messageFilterChain_homeData_localDataDecryptionFailed_identityRegistry_accountRegistry_uncommittedTransactions_backingStoreFactory_reloadData___block_invoke_370;
    v430[3] = &unk_24E79C240;
    v430[4] = v262;
    objc_msgSend(v267, "startWithCompletion:", v430);

    -[HMDHomeManager notificationCenter](v262, "notificationCenter");
    v268 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v268, "addObserver:selector:name:object:", v262, sel_accountAvailabilityChanged_, *MEMORY[0x24BDB8E60], 0);

    -[HMDHomeManager _registerForXPCConnectionNotifications](v262, "_registerForXPCConnectionNotifications");
    objc_msgSend(v19, "accessories");
    v269 = (void *)objc_claimAutoreleasedReturnValue();
    v270 = objc_msgSend(v269, "count") != 0;

    -[HMDAccessoryBrowser activate:](v262->_accessoryBrowserInternal, "activate:", v270);
    if (isiOSDevice())
    {
      v271 = objc_alloc(MEMORY[0x24BE3F298]);
      v272 = objc_msgSend(v271, "initWithTimeInterval:options:", 4, (double)(unint64_t)checkRemoteAccessTimeout);
      remoteAccessHealthMonitorTimer = v262->_remoteAccessHealthMonitorTimer;
      v262->_remoteAccessHealthMonitorTimer = (HMFTimer *)v272;

      -[HMFTimer setDelegate:](v262->_remoteAccessHealthMonitorTimer, "setDelegate:", v262);
      v274 = v262->_remoteAccessHealthMonitorTimer;
      -[HMDHomeManager workQueue](v262, "workQueue");
      v275 = (void *)objc_claimAutoreleasedReturnValue();
      -[HMFTimer setDelegateQueue:](v274, "setDelegateQueue:", v275);

      -[HMFTimer resume](v262->_remoteAccessHealthMonitorTimer, "resume");
    }
  }
  residentMesh = self->_residentMesh;
  self->_residentMesh = 0;

  +[HMDDeviceCapabilities deviceCapabilities](HMDDeviceCapabilities, "deviceCapabilities");
  v277 = (void *)objc_claimAutoreleasedReturnValue();
  v278 = objc_msgSend(v277, "isResidentCapable");

  if (v278)
  {
    v279 = (void *)MEMORY[0x227676638]();
    v280 = self;
    HMFGetOSLogHandle();
    v281 = (id)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v281, OS_LOG_TYPE_DEFAULT))
    {
      HMFGetLogIdentifier();
      v282 = (id)objc_claimAutoreleasedReturnValue();
      -[HMDHomeManager isResidentEnabled](v280, "isResidentEnabled");
      HMFBooleanToString();
      v283 = (id)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      *(_QWORD *)&buf[4] = v282;
      *(_WORD *)&buf[12] = 2112;
      *(_QWORD *)&buf[14] = v283;
      _os_log_impl(&dword_2218F0000, v281, OS_LOG_TYPE_DEFAULT, "%{public}@Initialize resident mesh: %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v279);
    v284 = -[HMDResidentMesh initWithHomeManager:residentEnabled:]([HMDResidentMesh alloc], "initWithHomeManager:residentEnabled:", v280, -[HMDHomeManager isResidentEnabled](v280, "isResidentEnabled"));
    v285 = self->_residentMesh;
    self->_residentMesh = v284;

  }
  v286 = (void *)MEMORY[0x227676638]();
  v287 = self;
  HMFGetOSLogHandle();
  v288 = (id)objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v288, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v289 = (id)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543362;
    *(_QWORD *)&buf[4] = v289;
    _os_log_impl(&dword_2218F0000, v288, OS_LOG_TYPE_INFO, "%{public}@Refreshing display names of the users and invites", buf, 0xCu);

  }
  objc_autoreleasePoolPop(v286);
  -[HMDHomeManager _handleContactStoreChanged](v287, "_handleContactStoreChanged");
  if (hasAssistantHashingKeyChanged())
  {
    v428 = 0u;
    v429 = 0u;
    v426 = 0u;
    v427 = 0u;
    -[HMDHomeManager homes](v287, "homes");
    v290 = (void *)objc_claimAutoreleasedReturnValue();
    v291 = objc_msgSend(v290, "countByEnumeratingWithState:objects:count:", &v426, v437, 16);
    if (v291)
    {
      v292 = v291;
      v293 = *(_QWORD *)v427;
      do
      {
        for (i = 0; i != v292; ++i)
        {
          if (*(_QWORD *)v427 != v293)
            objc_enumerationMutation(v290);
          objc_msgSend(*(id *)(*((_QWORD *)&v426 + 1) + 8 * i), "resetAccessoryHashedRouteIdentifiers");
        }
        v292 = objc_msgSend(v290, "countByEnumeratingWithState:objects:count:", &v426, v437, 16);
      }
      while (v292);
    }

    -[HMDHomeManager assistantSyncDataChanged:](v287, "assistantSyncDataChanged:", CFSTR("HMDAssistantEncryptionKeyChanged"));
  }
  else
  {
    -[HMDHomeManager workQueue](v287, "workQueue");
    v295 = objc_claimAutoreleasedReturnValue();
    block[0] = MEMORY[0x24BDAC760];
    block[1] = 3221225472;
    block[2] = __200__HMDHomeManager__loadMessageDispatcher_accessoryBrowser_messageFilterChain_homeData_localDataDecryptionFailed_identityRegistry_accountRegistry_uncommittedTransactions_backingStoreFactory_reloadData___block_invoke_376;
    block[3] = &unk_24E79C240;
    block[4] = v287;
    dispatch_async(v295, block);

  }
  v423 = 0u;
  v424 = 0u;
  v421 = 0u;
  v422 = 0u;
  -[HMDHomeManager homes](v287, "homes");
  v296 = (void *)objc_claimAutoreleasedReturnValue();
  v297 = objc_msgSend(v296, "countByEnumeratingWithState:objects:count:", &v421, v436, 16);
  if (v297)
  {
    v298 = v297;
    v299 = *(_QWORD *)v422;
    do
    {
      for (j = 0; j != v298; ++j)
      {
        if (*(_QWORD *)v422 != v299)
          objc_enumerationMutation(v296);
        objc_msgSend(*(id *)(*((_QWORD *)&v421 + 1) + 8 * j), "updateLightProfilesSettingsWithRequiresHomeNotificationsEnabled:", 1);
      }
      v298 = objc_msgSend(v296, "countByEnumeratingWithState:objects:count:", &v421, v436, 16);
    }
    while (v298);
  }

  objc_msgSend(MEMORY[0x24BE3F248], "sharedPreferences");
  v301 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v301, "preferenceForKey:", CFSTR("memoryMonitorPeriod"));
  v302 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v302, "numberValue");
  v303 = (void *)objc_claimAutoreleasedReturnValue();

  v304 = objc_alloc(MEMORY[0x24BE3F298]);
  v411 = v303;
  objc_msgSend(v303, "doubleValue");
  v305 = (void *)objc_msgSend(v304, "initWithTimeInterval:options:", 12);
  -[HMDHomeManager setMemoryMonitorLogEventTimer:](v287, "setMemoryMonitorLogEventTimer:", v305);

  -[HMDHomeManager memoryMonitorLogEventTimer](v287, "memoryMonitorLogEventTimer");
  v306 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v306, "setDelegate:", v287);

  -[HMDHomeManager memoryMonitorLogEventTimer](v287, "memoryMonitorLogEventTimer");
  v307 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHomeManager workQueue](v287, "workQueue");
  v308 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v307, "setDelegateQueue:", v308);

  -[HMDHomeManager memoryMonitorLogEventTimer](v287, "memoryMonitorLogEventTimer");
  v309 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v309, "resume");

  v310 = [HMDDuetPredictionSubscriber alloc];
  -[HMDHomeManager workQueue](v287, "workQueue");
  v311 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHomeManager messageDispatcher](v287, "messageDispatcher");
  v312 = (void *)objc_claimAutoreleasedReturnValue();
  v313 = -[HMDDuetPredictionSubscriber initWithWorkQueue:messageDispatcher:](v310, "initWithWorkQueue:messageDispatcher:", v311, v312);
  -[HMDHomeManager setDuetSubscriber:](v287, "setDuetSubscriber:", v313);

  -[HMDHomeManager duetSubscriber](v287, "duetSubscriber");
  v314 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v314, "setDataSource:", v287);

  -[HMDHomeManager duetSubscriber](v287, "duetSubscriber");
  v315 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v315, "configure");

  if (v287)
  {
    -[HMDHomeManager metricsManager](v287, "metricsManager");
    v316 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v316, "logEventDispatcher");
    v317 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHomeManager biomeLogEventObserver](v287, "biomeLogEventObserver");
    v318 = (void *)objc_claimAutoreleasedReturnValue();
    *(_QWORD *)buf = objc_opt_class();
    *(_QWORD *)&buf[8] = objc_opt_class();
    *(_QWORD *)&buf[16] = objc_opt_class();
    objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", buf, 3);
    v319 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v317, "addObserver:forEventClasses:", v318, v319);

    -[HMDHomeManager metricsManager](v287, "metricsManager");
    v320 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v320, "logEventDispatcher");
    v321 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHomeManager microLocationLogEventObserver](v287, "microLocationLogEventObserver");
    v322 = (void *)objc_claimAutoreleasedReturnValue();
    *(_QWORD *)buf = objc_opt_class();
    *(_QWORD *)&buf[8] = objc_opt_class();
    *(_QWORD *)&buf[16] = objc_opt_class();
    objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", buf, 3);
    v323 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v321, "addObserver:forEventClasses:", v322, v323);

  }
  -[HMDHomeManager _notifyMetricsManagerOfConfigurationChange](v287, "_notifyMetricsManagerOfConfigurationChange");
  if (-[HMDHomeManager isResidentEnabled](v287, "isResidentEnabled"))
  {
    v324 = (void *)MEMORY[0x227676638]();
    v325 = v287;
    HMFGetOSLogHandle();
    v326 = (id)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v326, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v327 = (id)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      *(_QWORD *)&buf[4] = v327;
      _os_log_impl(&dword_2218F0000, v326, OS_LOG_TYPE_INFO, "%{public}@Resident is enabled. Create multi user settings metric event dispatcher, and register for daily event.", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v324);
    v328 = [HMDMultiUserSettingsMetricsEventDispatcher alloc];
    uuid = self->_uuid;
    objc_msgSend(v325, "metricsManager");
    v330 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v330, "logEventSubmitter");
    v331 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v325, "metricsManager");
    v332 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v332, "dailyScheduler");
    v333 = (void *)objc_claimAutoreleasedReturnValue();
    v334 = -[HMDMultiUserSettingsMetricsEventDispatcher initWithIdentifier:logEventSubmitter:dailyScheduler:](v328, "initWithIdentifier:logEventSubmitter:dailyScheduler:", uuid, v331, v333);
    v335 = v325[69];
    v325[69] = (id)v334;

    objc_msgSend(v325[69], "setDataSource:", v325);
    objc_msgSend(v325[69], "registerForDailyMultiUserSettingsEvents");
  }
  v336 = (void *)MEMORY[0x227676638]();
  v337 = [HMDAppleAccessoryPairingController alloc];
  v338 = [HMDAppleAccessoryPairingControllerDataSource alloc];
  -[HMDHomeManager backingStore](v287, "backingStore");
  v339 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v339, "context");
  v340 = (void *)objc_claimAutoreleasedReturnValue();
  v341 = -[HMDAppleAccessoryPairingControllerDataSource initWithContext:](v338, "initWithContext:", v340);
  v342 = -[HMDAppleAccessoryPairingController initWithHomeManager:dataSource:](v337, "initWithHomeManager:dataSource:", v287, v341);
  legacyAccessoryPairingController = v287->_legacyAccessoryPairingController;
  v287->_legacyAccessoryPairingController = (HMDAppleAccessoryPairingController *)v342;

  -[HMDHomeManager legacyAccessoryPairingController](v287, "legacyAccessoryPairingController");
  v344 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v344, "start");

  objc_autoreleasePoolPop(v336);
  -[HMDHomeManager performInitialGraphLoad:](v287, "performInitialGraphLoad:", v414);
  v345 = HMFUptime();
  v347 = v346;
  v348 = (void *)MEMORY[0x227676638](v345);
  v349 = v287;
  HMFGetOSLogHandle();
  v350 = (id)objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v350, OS_LOG_TYPE_DEBUG))
  {
    HMFGetLogIdentifier();
    v351 = (id)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138544386;
    *(_QWORD *)&buf[4] = v351;
    *(_WORD *)&buf[12] = 2114;
    *(_QWORD *)&buf[14] = CFSTR("homeManagerInitStart");
    *(_WORD *)&buf[22] = 2112;
    v439 = CFSTR("Handling Home invitations");
    v440 = 2114;
    v441 = CFSTR("state");
    v442 = 2112;
    v443 = CFSTR("homeManagerHandledlingInvites");
    _os_log_impl(&dword_2218F0000, v350, OS_LOG_TYPE_DEBUG, "%{public}@tag=\"%{public}@\" desc=\"%@\" %{public}@=\"%@\", buf, 0x34u);

  }
  objc_autoreleasePoolPop(v348);
  objc_msgSend(MEMORY[0x24BE4F1C0], "sharedInstance");
  v352 = (void *)objc_claimAutoreleasedReturnValue();
  v353 = objc_alloc(MEMORY[0x24BE4F1D0]);
  v434 = CFSTR("state");
  v435 = CFSTR("homeManagerHandledlingInvites");
  objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", &v435, &v434, 1);
  v354 = (void *)objc_claimAutoreleasedReturnValue();
  v355 = (void *)objc_msgSend(v353, "initWithTag:data:", CFSTR("homeManagerInitStart"), v354);
  objc_msgSend(MEMORY[0x24BE3F138], "currentTagProcessorList");
  v356 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v352, "submitTaggedEvent:processorList:", v355, v356);

  -[HMDHomeManager _pruneExpiredIncomingInvitations](v349, "_pruneExpiredIncomingInvitations");
  -[HMDHomeManager _pruneExpiredHomesAwaitingAutoAccept](v349, "_pruneExpiredHomesAwaitingAutoAccept");
  v357 = (void *)MEMORY[0x227676638](-[HMDHomeManager _pruneExpiredHomesNotYetMigrated](v349, "_pruneExpiredHomesNotYetMigrated"));
  v358 = v349;
  HMFGetOSLogHandle();
  v359 = (id)objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v359, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v360 = (id)objc_claimAutoreleasedReturnValue();
    v361 = (void *)MEMORY[0x24BDD17C8];
    HMFUptime();
    objc_msgSend(v361, "stringWithFormat:", CFSTR("%.3f"), v362 - v347);
    v363 = (id)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138544898;
    *(_QWORD *)&buf[4] = v360;
    *(_WORD *)&buf[12] = 2114;
    *(_QWORD *)&buf[14] = CFSTR("homeManagerInitStart");
    *(_WORD *)&buf[22] = 2112;
    v439 = CFSTR("Handled Home invitations");
    v440 = 2114;
    v441 = CFSTR("state");
    v442 = 2112;
    v443 = CFSTR("homeManagerHandledInvites");
    v444 = 2114;
    v445 = CFSTR("duration");
    v446 = 2112;
    v447 = v363;
    _os_log_impl(&dword_2218F0000, v359, OS_LOG_TYPE_INFO, "%{public}@tag=\"%{public}@\" desc=\"%@\" %{public}@=\"%@\" %{public}@=\"%@\", buf, 0x48u);

  }
  objc_autoreleasePoolPop(v357);
  objc_msgSend(MEMORY[0x24BE4F1C0], "sharedInstance");
  v364 = (void *)objc_claimAutoreleasedReturnValue();
  v365 = objc_alloc(MEMORY[0x24BE4F1D0]);
  v366 = (void *)MEMORY[0x24BDD17C8];
  HMFUptime();
  objc_msgSend(v366, "stringWithFormat:", CFSTR("%.3f"), v367 - v347);
  v368 = (void *)objc_claimAutoreleasedReturnValue();
  HMDTaggedLoggingCreateDictionary();
  v369 = (void *)objc_claimAutoreleasedReturnValue();
  v370 = (void *)objc_msgSend(v365, "initWithTag:data:", CFSTR("homeManagerInitStart"), v369, CFSTR("state"), CFSTR("homeManagerHandledInvites"), CFSTR("duration"), v368);
  objc_msgSend(MEMORY[0x24BE3F138], "currentTagProcessorList");
  v371 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v364, "submitTaggedEvent:processorList:", v370, v371);

  objc_msgSend(v358, "_auditIDSSentInvitations");
  obja = [HMDXPCEventRouterServer alloc];
  objc_msgSend(v358, "messageTargetUUID");
  v406 = (void *)objc_claimAutoreleasedReturnValue();
  v372 = *MEMORY[0x24BDD5F78];
  v373 = *MEMORY[0x24BDD5F80];
  objc_msgSend(v358, "messageDispatcher");
  v374 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v358, "workQueue");
  v375 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v358, "notificationCenter");
  v376 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v358, "registrationForwardingEventRouter");
  v377 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v358, "memoryEventRouter");
  v378 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v358, "lastEventStore");
  v379 = (void *)objc_claimAutoreleasedReturnValue();
  v380 = -[HMDXPCEventRouterServer initWithMessageUUID:dataSource:changeRegistrationsMessageName:updateEventsMessageName:messageDispatcher:queue:notificationCenter:subscriptionProvider:registrationEventRouter:storeReadHandle:](obja, "initWithMessageUUID:dataSource:changeRegistrationsMessageName:updateEventsMessageName:messageDispatcher:queue:notificationCenter:subscriptionProvider:registrationEventRouter:storeReadHandle:", v406, v358, v372, v373, v374, v375, v376, v377, v378, v379);
  objc_msgSend(v358, "setEventRouterXPCServer:", v380);

  objc_msgSend(v358, "eventRouterXPCServer");
  v381 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v381, "configure");

  +[HMDDeviceCapabilities deviceCapabilities](HMDDeviceCapabilities, "deviceCapabilities");
  v382 = (void *)objc_claimAutoreleasedReturnValue();
  LODWORD(v378) = objc_msgSend(v382, "isResidentCapable");

  if ((_DWORD)v378)
  {
    v383 = (void *)MEMORY[0x227676638]();
    v384 = v358;
    HMFGetOSLogHandle();
    v385 = (id)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v385, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v386 = (id)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      *(_QWORD *)&buf[4] = v386;
      _os_log_impl(&dword_2218F0000, v385, OS_LOG_TYPE_INFO, "%{public}@Creating siriEndPointSettingsSyncManager", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v383);
    v387 = [HMDSiriEndpointSettingsSyncManager alloc];
    objc_msgSend(v384, "memoryEventRouter");
    v388 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v384, "notificationCenter");
    v389 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v384, "workQueue");
    v390 = (void *)objc_claimAutoreleasedReturnValue();
    v391 = -[HMDSiriEndpointSettingsSyncManager initWithDataSource:subscriptionProvider:notificationCenter:workQueue:](v387, "initWithDataSource:subscriptionProvider:notificationCenter:workQueue:", v384, v388, v389, v390);
    objc_msgSend(v384, "setSiriEndPointSettingsSyncManager:", v391);

    objc_msgSend(v384, "siriEndPointSettingsSyncManager");
    v392 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v392, "configure");

  }
  +[HMDIDSServiceManager sharedManager](HMDIDSServiceManager, "sharedManager");
  v393 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v358, "workQueue");
  v394 = (void *)objc_claimAutoreleasedReturnValue();
  v395 = MEMORY[0x24BDAC760];
  v420[0] = MEMORY[0x24BDAC760];
  v420[1] = 3221225472;
  v420[2] = __200__HMDHomeManager__loadMessageDispatcher_accessoryBrowser_messageFilterChain_homeData_localDataDecryptionFailed_identityRegistry_accountRegistry_uncommittedTransactions_backingStoreFactory_reloadData___block_invoke_388;
  v420[3] = &unk_24E795EE8;
  v420[4] = v358;
  objc_msgSend(v393, "retrieveFirewallWithQueue:completion:", v394, v420);

  objc_msgSend(v358, "setHasLoadedData:", 1);
  logAndPostNotification(CFSTR("HMDHomeManagerHomeDataLoadedNotification"), v358, 0);
  objc_msgSend(v358, "autoAddWalletKeysOncePerDeviceSetup");
  objc_msgSend(v358, "scheduleAddACWGKeysOperationIfAllowed");
  objc_msgSend(v358, "updateHomeKitInUsePreferences");
  objc_msgSend(v358, "capabilitiesController");
  v396 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v396, "didFinishConfiguringHomes");

  v397 = -[HMDWidgetTimelineRefresher initWithHomeManager:]([HMDWidgetTimelineRefresher alloc], "initWithHomeManager:", v358);
  v398 = v358[73];
  v358[73] = v397;

  objc_msgSend(v358[73], "configure");
  objc_msgSend(v358, "_maybeMessageOwnersOfFrameworkSwitch");
  objc_msgSend(v358, "requestAccessoryBrowsing");
  objc_msgSend(v358, "workQueue");
  v399 = objc_claimAutoreleasedReturnValue();
  v419[0] = v395;
  v419[1] = 3221225472;
  v419[2] = __200__HMDHomeManager__loadMessageDispatcher_accessoryBrowser_messageFilterChain_homeData_localDataDecryptionFailed_identityRegistry_accountRegistry_uncommittedTransactions_backingStoreFactory_reloadData___block_invoke_393;
  v419[3] = &unk_24E79C240;
  v419[4] = v358;
  dispatch_async(v399, v419);

  objc_msgSend(v358, "pairedAccessories");
  v400 = (void *)objc_claimAutoreleasedReturnValue();
  +[HMDCameraSnapshotManager cleanStaleSnapshotDirectoriesUsingCurrentAccessories:](HMDCameraSnapshotManager, "cleanStaleSnapshotDirectoriesUsingCurrentAccessories:", v400);

  objc_msgSend(v358, "_maybeConfigureDuplicateUserModelChecker");
  v401 = (_QWORD *)MEMORY[0x24BDBD268];
  if (*((_BYTE *)v358 + 55))
    v401 = (_QWORD *)MEMORY[0x24BDBD270];
  objc_msgSend(v358, "_setHomeConfigurationKey:value:", *MEMORY[0x24BDD7C48], *v401);

}

- (void)scheduleAddACWGKeysOperationIfAllowed
{
  int v3;
  void *v4;
  void *v5;
  HMDHomeManager *v6;
  NSObject *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  HMDHomeManager *v16;
  NSObject *v17;
  void *v18;
  void *v19;
  _TtC13HomeKitDaemon35AddACWGKeysToExistingHomesOperation *v20;
  _TtC13HomeKitDaemon35AddACWGKeysToExistingHomesOperation *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  uint8_t buf[4];
  void *v27;
  __int16 v28;
  void *v29;
  __int16 v30;
  void *v31;
  __int16 v32;
  void *v33;
  __int16 v34;
  void *v35;
  __int16 v36;
  void *v37;
  __int16 v38;
  void *v39;
  uint64_t v40;

  v40 = *MEMORY[0x24BDAC8D0];
  v3 = isThisDeviceDesignatedFMFDevice();
  objc_msgSend(MEMORY[0x24BE3F178], "internalOnlyInitializer");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = (void *)MEMORY[0x227676638]();
  v6 = self;
  HMFGetOSLogHandle();
  v7 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v24 = v5;
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "UUID");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    _os_feature_enabled_impl();
    HMFBooleanToString();
    v25 = v4;
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHomeManager isFirstCloudImportComplete](v6, "isFirstCloudImportComplete");
    HMFBooleanToString();
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHomeManager hasLoadedData](v6, "hasLoadedData");
    HMFBooleanToString();
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    HMFBooleanToString();
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHomeManager didCreateAddACWGKeysOperation](v6, "didCreateAddACWGKeysOperation");
    HMFBooleanToString();
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138544898;
    v27 = v8;
    v28 = 2112;
    v29 = v9;
    v30 = 2112;
    v31 = v10;
    v32 = 2112;
    v33 = v11;
    v34 = 2112;
    v35 = v12;
    v36 = 2112;
    v37 = v13;
    v38 = 2112;
    v39 = v14;
    _os_log_impl(&dword_2218F0000, v7, OS_LOG_TYPE_INFO, "%{public}@[NewFlow: %@] scheduleAddACWGKeysOperationIfAllowed with HM_FEATURE_UWB_ENABLED: %@, isFirstCloudImportComplete: %@, hasLoadedData: %@, isFMFDevice: %@, didCreateAddACWGKeysOperation: %@", buf, 0x48u);

    v4 = v25;
    v5 = v24;
  }

  objc_autoreleasePoolPop(v5);
  if (_os_feature_enabled_impl()
    && -[HMDHomeManager isFirstCloudImportComplete](v6, "isFirstCloudImportComplete")
    && (-[HMDHomeManager hasLoadedData](v6, "hasLoadedData") & v3) == 1
    && !-[HMDHomeManager didCreateAddACWGKeysOperation](v6, "didCreateAddACWGKeysOperation"))
  {
    v15 = (void *)MEMORY[0x227676638]();
    v16 = v6;
    HMFGetOSLogHandle();
    v17 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "UUID");
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v27 = v18;
      v28 = 2112;
      v29 = v19;
      _os_log_impl(&dword_2218F0000, v17, OS_LOG_TYPE_INFO, "%{public}@[Flow: %@] Creating addACWGKeysOperation", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v15);
    v20 = [_TtC13HomeKitDaemon35AddACWGKeysToExistingHomesOperation alloc];
    v21 = -[HMDBackgroundOperation initWithUserData:](v20, "initWithUserData:", MEMORY[0x24BDBD1B8]);
    -[AddACWGKeysToExistingHomesOperation setFlow:](v21, "setFlow:", v4);
    -[HMDHomeManager bgOpsManager](v16, "bgOpsManager");
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v22, "addOperation:", v21);

    -[HMDHomeManager bgOpsManager](v16, "bgOpsManager");
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v23, "evaluateOperations");

    -[HMDHomeManager setDidCreateAddACWGKeysOperation:](v16, "setDidCreateAddACWGKeysOperation:", 1);
  }

}

- (void)_auditIDSSentInvitations
{
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  void *v16;
  void *v17;
  HMDHomeManager *v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  _BYTE v27[128];
  _BYTE v28[128];
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  objc_msgSend(MEMORY[0x24BDBCEF0], "set");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v23 = 0u;
  v24 = 0u;
  v25 = 0u;
  v26 = 0u;
  v18 = self;
  -[HMDHomeManager homes](self, "homes");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v23, v28, 16);
  if (v5)
  {
    v6 = v5;
    v7 = *(_QWORD *)v24;
    do
    {
      v8 = 0;
      do
      {
        if (*(_QWORD *)v24 != v7)
          objc_enumerationMutation(v4);
        v9 = *(void **)(*((_QWORD *)&v23 + 1) + 8 * v8);
        v19 = 0u;
        v20 = 0u;
        v21 = 0u;
        v22 = 0u;
        objc_msgSend(v9, "outgoingInvitations");
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        v11 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v19, v27, 16);
        if (v11)
        {
          v12 = v11;
          v13 = *(_QWORD *)v20;
          do
          {
            v14 = 0;
            do
            {
              if (*(_QWORD *)v20 != v13)
                objc_enumerationMutation(v10);
              objc_msgSend(*(id *)(*((_QWORD *)&v19 + 1) + 8 * v14), "idsInvitationUUID");
              v15 = (void *)objc_claimAutoreleasedReturnValue();
              if (v15)
                objc_msgSend(v3, "addObject:", v15);

              ++v14;
            }
            while (v12 != v14);
            v12 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v19, v27, 16);
          }
          while (v12);
        }

        ++v8;
      }
      while (v8 != v6);
      v6 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v23, v28, 16);
    }
    while (v6);
  }

  -[HMDHomeManager idsInvitationManager](v18, "idsInvitationManager");
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  v17 = (void *)objc_msgSend(v3, "copy");
  objc_msgSend(v16, "auditIDSSentInvitationsUsingCurrentInvitationUUIDs:", v17);

}

- (void)_updateHomesDiscoveredBonjourServicesMetrics
{
  void *v3;
  HMDBonjourBrowserHelper *v4;
  void *v5;
  void *v6;
  HMDBonjourBrowserHelper *v7;
  void *v8;
  void *v9;
  void *v10;
  char v11;
  void *v12;
  void *v13;
  void *v14;
  double v15;
  double v16;
  void *v17;
  void *v18;
  void *v19;
  double v20;
  double v21;
  void *v22;
  void *v23;
  _QWORD v24[4];
  id v25;
  id location;
  _QWORD v27[3];

  v27[2] = *MEMORY[0x24BDAC8D0];
  if (!isWatch())
  {
    -[HMDHomeManager bonjourBrowser](self, "bonjourBrowser");
    v3 = (void *)objc_claimAutoreleasedReturnValue();

    if (!v3)
    {
      v4 = [HMDBonjourBrowserHelper alloc];
      v27[0] = CFSTR("_sleep-proxy._udp.");
      v27[1] = CFSTR("_meshcop._udp.");
      objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", v27, 2);
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      -[HMDHomeManager workQueue](self, "workQueue");
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      v7 = -[HMDBonjourBrowserHelper initWithServicesOfTypes:browsingTimeInterval:browsingPeriodicity:workQueue:](v4, "initWithServicesOfTypes:browsingTimeInterval:browsingPeriodicity:workQueue:", v5, v6, 20.0, 0.0);
      -[HMDHomeManager setBonjourBrowser:](self, "setBonjourBrowser:", v7);

    }
  }
  -[HMDHomeManager bonjourBrowser](self, "bonjourBrowser");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  if (v8)
  {
    -[HMDHomeManager homes](self, "homes");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v9, "count"))
    {
      -[HMDHomeManager bonjourBrowser](self, "bonjourBrowser");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      v11 = objc_msgSend(v10, "isStarted");

      if ((v11 & 1) == 0)
      {
        -[HMDHomeManager bonjourBrowserHelperLastCompletionDate](self, "bonjourBrowserHelperLastCompletionDate");
        v12 = (void *)objc_claimAutoreleasedReturnValue();

        if (!v12)
          goto LABEL_9;
        objc_msgSend(MEMORY[0x24BDBCE60], "date");
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        -[HMDHomeManager bonjourBrowserHelperLastCompletionDate](self, "bonjourBrowserHelperLastCompletionDate");
        v14 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v13, "timeIntervalSinceDate:", v14);
        v16 = v15;

        objc_msgSend(MEMORY[0x24BE3F248], "sharedPreferences");
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v17, "preferenceForKey:", CFSTR("hapBonjourBrowserHelperPeriod"));
        v18 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v18, "numberValue");
        v19 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v19, "doubleValue");
        v21 = v20;

        if (v16 >= v21)
        {
LABEL_9:
          objc_initWeak(&location, self);
          -[HMDHomeManager bonjourBrowser](self, "bonjourBrowser");
          v22 = (void *)objc_claimAutoreleasedReturnValue();
          v24[0] = MEMORY[0x24BDAC760];
          v24[1] = 3221225472;
          v24[2] = __62__HMDHomeManager__updateHomesDiscoveredBonjourServicesMetrics__block_invoke;
          v24[3] = &unk_24E799B48;
          objc_copyWeak(&v25, &location);
          objc_msgSend(v22, "startWithBrowsingCompletion:", v24);

          objc_msgSend(MEMORY[0x24BDBCE60], "date");
          v23 = (void *)objc_claimAutoreleasedReturnValue();
          -[HMDHomeManager setBonjourBrowserHelperLastCompletionDate:](self, "setBonjourBrowserHelperLastCompletionDate:", v23);

          objc_destroyWeak(&v25);
          objc_destroyWeak(&location);
        }
      }
    }
    else
    {

    }
  }
}

- (id)accessoryWithUUID:(id)a3
{
  id v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _BYTE v17[128];
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  v4 = a3;
  v13 = 0u;
  v14 = 0u;
  v15 = 0u;
  v16 = 0u;
  -[HMDHomeManager homes](self, "homes", 0);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
  if (v6)
  {
    v7 = v6;
    v8 = *(_QWORD *)v14;
    while (2)
    {
      v9 = 0;
      do
      {
        if (*(_QWORD *)v14 != v8)
          objc_enumerationMutation(v5);
        objc_msgSend(*(id *)(*((_QWORD *)&v13 + 1) + 8 * v9), "accessoryWithUUID:", v4);
        v10 = objc_claimAutoreleasedReturnValue();
        if (v10)
        {
          v11 = (void *)v10;
          goto LABEL_11;
        }
        ++v9;
      }
      while (v7 != v9);
      v7 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
      if (v7)
        continue;
      break;
    }
  }
  v11 = 0;
LABEL_11:

  return v11;
}

- (id)accessoryWithIDSIdentifier:(id)a3
{
  id v4;
  void *v5;
  uint64_t v6;
  uint64_t i;
  void *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t j;
  void *v14;
  void *v15;
  char v16;
  id v17;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  _BYTE v29[128];
  _BYTE v30[128];
  uint64_t v31;

  v31 = *MEMORY[0x24BDAC8D0];
  v4 = a3;
  v25 = 0u;
  v26 = 0u;
  v27 = 0u;
  v28 = 0u;
  -[HMDHomeManager homes](self, "homes");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v20 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v25, v30, 16);
  if (v20)
  {
    v6 = *(_QWORD *)v26;
    v19 = *(_QWORD *)v26;
    do
    {
      for (i = 0; i != v20; ++i)
      {
        if (*(_QWORD *)v26 != v6)
          objc_enumerationMutation(v5);
        v8 = *(void **)(*((_QWORD *)&v25 + 1) + 8 * i);
        v21 = 0u;
        v22 = 0u;
        v23 = 0u;
        v24 = 0u;
        objc_msgSend(v8, "appleMediaAccessories", v19);
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        v10 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v21, v29, 16);
        if (v10)
        {
          v11 = v10;
          v12 = *(_QWORD *)v22;
          while (2)
          {
            for (j = 0; j != v11; ++j)
            {
              if (*(_QWORD *)v22 != v12)
                objc_enumerationMutation(v9);
              v14 = *(void **)(*((_QWORD *)&v21 + 1) + 8 * j);
              objc_msgSend(v14, "idsIdentifier");
              v15 = (void *)objc_claimAutoreleasedReturnValue();
              v16 = objc_msgSend(v15, "hmf_isEqualToUUID:", v4);

              if ((v16 & 1) != 0)
              {
                v17 = v14;

                goto LABEL_19;
              }
            }
            v11 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v21, v29, 16);
            if (v11)
              continue;
            break;
          }
        }

        v6 = v19;
      }
      v17 = 0;
      v20 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v25, v30, 16);
    }
    while (v20);
  }
  else
  {
    v17 = 0;
  }
LABEL_19:

  return v17;
}

- (void)startWithCompletionHandler:(id)a3
{
  id v4;
  NSObject *v5;
  id v6;
  _QWORD v7[5];
  id v8;

  v4 = a3;
  -[HMDHomeManager workQueue](self, "workQueue");
  v5 = objc_claimAutoreleasedReturnValue();
  v7[0] = MEMORY[0x24BDAC760];
  v7[1] = 3221225472;
  v7[2] = __45__HMDHomeManager_startWithCompletionHandler___block_invoke;
  v7[3] = &unk_24E79C2B8;
  v7[4] = self;
  v8 = v4;
  v6 = v4;
  dispatch_async(v5, v7);

}

- (void)fetchAndUpdatePCSStatus
{
  void *v3;
  _QWORD v4[5];

  getCKContainer();
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4[0] = MEMORY[0x24BDAC760];
  v4[1] = 3221225472;
  v4[2] = __41__HMDHomeManager_fetchAndUpdatePCSStatus__block_invoke;
  v4[3] = &unk_24E795F10;
  v4[4] = self;
  objc_msgSend(v3, "accountInfoWithCompletionHandler:", v4);

}

- (BOOL)badCDPState
{
  void *v2;
  char v3;

  +[HMDCoreDataCloudTransform sharedInstance](HMDCoreDataCloudTransform, "sharedInstance");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "badCDPState");

  return v3;
}

- (BOOL)isActive
{
  HMDHomeManager *v2;
  os_unfair_lock_s *p_lock;

  v2 = self;
  p_lock = &self->_lock;
  os_unfair_lock_lock_with_options();
  LOBYTE(v2) = -[NSMutableSet count](v2->_activeConnections, "count") != 0;
  os_unfair_lock_unlock(p_lock);
  return (char)v2;
}

- (void)__handleActiveAssertion:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  int v7;
  void *v8;
  HMDHomeManager *v9;
  NSObject *v10;
  _BOOL4 v11;
  void *v12;
  void *v13;
  void *v14;
  HMDHomeManager *v15;
  NSObject *v16;
  void *v17;
  void *v18;
  const __CFString *v19;
  uint64_t v20;
  const __CFString *v21;
  void *v22;
  HMDHomeManager *v23;
  NSObject *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  int v29;
  void *v30;
  __int16 v31;
  id v32;
  uint64_t v33;

  v33 = *MEMORY[0x24BDAC8D0];
  v4 = a3;
  objc_msgSend(v4, "proxyConnection");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = v5;
  if (!v5)
  {
    v14 = (void *)MEMORY[0x227676638]();
    v15 = self;
    HMFGetOSLogHandle();
    v16 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      v29 = 138543618;
      v30 = v17;
      v31 = 2112;
      v32 = v4;
      _os_log_impl(&dword_2218F0000, v16, OS_LOG_TYPE_ERROR, "%{public}@Could not find connection for active assertion message: %@", (uint8_t *)&v29, 0x16u);

    }
    objc_autoreleasePoolPop(v14);
    v18 = (void *)MEMORY[0x24BDD1540];
    v19 = CFSTR("Could not find connection");
    v20 = 2;
    v21 = 0;
    goto LABEL_13;
  }
  if ((objc_msgSend(v5, "isAdaptive") & 1) == 0)
  {
    v22 = (void *)MEMORY[0x227676638]();
    v23 = self;
    HMFGetOSLogHandle();
    v24 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v25 = (void *)objc_claimAutoreleasedReturnValue();
      v29 = 138543362;
      v30 = v25;
      _os_log_impl(&dword_2218F0000, v24, OS_LOG_TYPE_ERROR, "%{public}@Cannot handle active assertion message: Client must be adaptive", (uint8_t *)&v29, 0xCu);

    }
    objc_autoreleasePoolPop(v22);
    v18 = (void *)MEMORY[0x24BDD1540];
    v19 = CFSTR("Client must be adaptive to begin active assertions");
    v21 = CFSTR("Set adaptive to YES in HMHomeManagerConfiguration");
    v20 = 48;
LABEL_13:
    objc_msgSend(v18, "hmErrorWithCode:description:reason:suggestion:", v20, 0, v19, v21);
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "respondWithError:", v26);

    goto LABEL_18;
  }
  v7 = objc_msgSend(v4, "BOOLForKey:", *MEMORY[0x24BDD5240]);
  v8 = (void *)MEMORY[0x227676638]();
  v9 = self;
  HMFGetOSLogHandle();
  v10 = objc_claimAutoreleasedReturnValue();
  v11 = os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT);
  if (v7)
  {
    if (v11)
    {
      HMFGetLogIdentifier();
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v6, "shortDescription");
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      v29 = 138543618;
      v30 = v12;
      v31 = 2112;
      v32 = v13;
      _os_log_impl(&dword_2218F0000, v10, OS_LOG_TYPE_DEFAULT, "%{public}@Marking connection as active: %@", (uint8_t *)&v29, 0x16u);

    }
    objc_autoreleasePoolPop(v8);
    -[HMDHomeManager __addActiveConnection:](v9, "__addActiveConnection:", v6);
  }
  else
  {
    if (v11)
    {
      HMFGetLogIdentifier();
      v27 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v6, "shortDescription");
      v28 = (void *)objc_claimAutoreleasedReturnValue();
      v29 = 138543618;
      v30 = v27;
      v31 = 2112;
      v32 = v28;
      _os_log_impl(&dword_2218F0000, v10, OS_LOG_TYPE_DEFAULT, "%{public}@Marking connection as inactive: %@", (uint8_t *)&v29, 0x16u);

    }
    objc_autoreleasePoolPop(v8);
    -[HMDHomeManager __removeActiveConnection:](v9, "__removeActiveConnection:", v6);
  }
  objc_msgSend(v4, "respondWithSuccess");
LABEL_18:

}

- (void)_registerForXPCConnectionNotifications
{
  void *v3;
  id v4;

  -[HMDHomeManager notificationCenter](self, "notificationCenter");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "addObserver:selector:name:object:", self, sel__handleXPCConnectionActivatedNotification_, CFSTR("HMDXPCClientConnectionDidActivateNotification"), 0);

  -[HMDHomeManager notificationCenter](self, "notificationCenter");
  v4 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "addObserver:selector:name:object:", self, sel__handleXPCConnectionDeactivatedNotification_, CFSTR("HMDXPCClientConnectionDidDeactivateNotification"), 0);

}

- (void)_handleXPCConnectionActivatedNotification:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  id v7;
  uint64_t v8;
  HMDHomeManagerXPCMessageSendPolicyParameters *v9;
  HMDHomeManagerXPCMessageSendPolicyParameters *v10;
  HMDHomeManagerXPCMessageSendPolicyParameters *v11;
  void *v12;
  HMDHomeManager *v13;
  NSObject *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  int v19;
  void *v20;
  __int16 v21;
  id v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  v4 = a3;
  objc_msgSend(v4, "object");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v6 = v5;
  else
    v6 = 0;
  v7 = v6;

  if (!v7)
    _HMFPreconditionFailure();
  v8 = objc_msgSend(v7, "principalClass");
  if (v8 == objc_opt_class())
  {
    objc_msgSend(v7, "sendPolicyParameters");
    v9 = (HMDHomeManagerXPCMessageSendPolicyParameters *)objc_claimAutoreleasedReturnValue();
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
      v10 = v9;
    else
      v10 = 0;
    v11 = v10;

    if (!v11)
    {
      v12 = (void *)MEMORY[0x227676638]();
      v13 = self;
      HMFGetOSLogHandle();
      v14 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v15 = (void *)objc_claimAutoreleasedReturnValue();
        v19 = 138543618;
        v20 = v15;
        v21 = 2112;
        v22 = v7;
        _os_log_impl(&dword_2218F0000, v14, OS_LOG_TYPE_INFO, "%{public}@Setting initial home manager policy parameters on connection: %@", (uint8_t *)&v19, 0x16u);

      }
      objc_autoreleasePoolPop(v12);
      v9 = -[HMDHomeManagerXPCMessageSendPolicyParameters initWithEntitlements:options:]([HMDHomeManagerXPCMessageSendPolicyParameters alloc], "initWithEntitlements:options:", objc_msgSend(v7, "entitlements"), objc_msgSend(v7, "homeManagerOptions"));
      objc_msgSend(v7, "updateSendPolicyParameters:", v9);
    }
    if ((objc_msgSend(v7, "isAdaptive") & 1) == 0)
    {
      objc_msgSend(v7, "processInfo");
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      -[HMDHomeManager notificationCenter](self, "notificationCenter");
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v17, "removeObserver:name:object:", self, CFSTR("HMDProcessInfoStateDidChangeNotification"), v16);

      -[HMDHomeManager notificationCenter](self, "notificationCenter");
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v18, "addObserver:selector:name:object:", self, sel___handleProcessInfoStateChangedNotification_, CFSTR("HMDProcessInfoStateDidChangeNotification"), v16);

      if (objc_msgSend(v16, "isForegrounded"))
        -[HMDHomeManager __addActiveConnection:](self, "__addActiveConnection:", v7);

    }
  }

}

- (void)_handleXPCConnectionDeactivatedNotification:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  id v7;
  uint64_t v8;
  void *v9;
  HMDHomeManager *v10;
  NSObject *v11;
  void *v12;
  void *v13;
  void *v14;
  char v15;
  void *v16;
  void *v17;
  int v18;
  void *v19;
  __int16 v20;
  id v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  v4 = a3;
  objc_msgSend(v4, "object");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v6 = v5;
  else
    v6 = 0;
  v7 = v6;

  if (!v7)
    _HMFPreconditionFailure();
  v8 = objc_msgSend(v7, "principalClass");
  if (v8 == objc_opt_class())
  {
    v9 = (void *)MEMORY[0x227676638]();
    v10 = self;
    HMFGetOSLogHandle();
    v11 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      v18 = 138543618;
      v19 = v12;
      v20 = 2112;
      v21 = v7;
      _os_log_impl(&dword_2218F0000, v11, OS_LOG_TYPE_INFO, "%{public}@Connection removed: %@", (uint8_t *)&v18, 0x16u);

    }
    objc_autoreleasePoolPop(v9);
    -[HMDHomeManager __removeActiveConnection:](v10, "__removeActiveConnection:", v7);
    objc_msgSend(v7, "processInfo");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "connections");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    v15 = objc_msgSend(v14, "na_any:", &__block_literal_global_427);

    if ((v15 & 1) == 0)
    {
      -[HMDHomeManager notificationCenter](v10, "notificationCenter");
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v16, "removeObserver:name:object:", v10, CFSTR("HMDProcessInfoStateDidChangeNotification"), v13);

      if (objc_msgSend(v7, "isAdaptive"))
      {
        -[HMDHomeManager notificationCenter](v10, "notificationCenter");
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v17, "postNotificationName:object:", CFSTR("HMDHomeManagerAdaptiveClientDisconnectedNotification"), v13);

      }
    }
    -[HMDHomeManager handleWalletKeyAssertionsXPCConnectionRemoved:](v10, "handleWalletKeyAssertionsXPCConnectionRemoved:", v7);
    -[HMDHomeManager _handleHMMMXPCConnectionRemoved:](v10, "_handleHMMMXPCConnectionRemoved:", v7);

  }
}

- (void)__handleProcessInfoStateChangedNotification:(id)a3
{
  void *v4;
  void *v5;
  id v6;
  int v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t i;
  void *v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  _BYTE v19[128];
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  objc_msgSend(a3, "object");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v5 = v4;
  else
    v5 = 0;
  v6 = v5;

  if (v6)
  {
    v7 = objc_msgSend(v6, "isForegrounded");
    v15 = 0u;
    v16 = 0u;
    v17 = 0u;
    v18 = 0u;
    objc_msgSend(v6, "connections", 0);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v15, v19, 16);
    if (v9)
    {
      v10 = v9;
      v11 = *(_QWORD *)v16;
      do
      {
        for (i = 0; i != v10; ++i)
        {
          if (*(_QWORD *)v16 != v11)
            objc_enumerationMutation(v8);
          v13 = *(void **)(*((_QWORD *)&v15 + 1) + 8 * i);
          v14 = objc_msgSend(v13, "principalClass");
          if (v14 == objc_opt_class() && (objc_msgSend(v13, "isAdaptive") & 1) == 0)
          {
            if (v7)
              -[HMDHomeManager __addActiveConnection:](self, "__addActiveConnection:", v13);
            else
              -[HMDHomeManager __removeActiveConnection:](self, "__removeActiveConnection:", v13);
          }
        }
        v10 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v15, v19, 16);
      }
      while (v10);
    }

  }
}

- (id)accessoriesMatchingIdentifier:(id)a3
{
  id v4;
  void *v5;
  uint64_t i;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t j;
  void *v13;
  void *v14;
  int v15;
  id obj;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  _BYTE v28[128];
  _BYTE v29[128];
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  v4 = a3;
  if (v4)
  {
    objc_msgSend(MEMORY[0x24BDBCEB8], "array");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v24 = 0u;
    v25 = 0u;
    v26 = 0u;
    v27 = 0u;
    -[HMDHomeManager homes](self, "homes");
    obj = (id)objc_claimAutoreleasedReturnValue();
    v19 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v24, v29, 16);
    if (v19)
    {
      v18 = *(_QWORD *)v25;
      do
      {
        for (i = 0; i != v19; ++i)
        {
          if (*(_QWORD *)v25 != v18)
            objc_enumerationMutation(obj);
          v7 = *(void **)(*((_QWORD *)&v24 + 1) + 8 * i);
          v20 = 0u;
          v21 = 0u;
          v22 = 0u;
          v23 = 0u;
          objc_msgSend(v7, "accessories");
          v8 = (void *)objc_claimAutoreleasedReturnValue();
          v9 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v20, v28, 16);
          if (v9)
          {
            v10 = v9;
            v11 = *(_QWORD *)v21;
            do
            {
              for (j = 0; j != v10; ++j)
              {
                if (*(_QWORD *)v21 != v11)
                  objc_enumerationMutation(v8);
                v13 = *(void **)(*((_QWORD *)&v20 + 1) + 8 * j);
                objc_msgSend(v13, "identifier");
                v14 = (void *)objc_claimAutoreleasedReturnValue();
                v15 = objc_msgSend(v4, "isEqual:", v14);

                if (v15)
                  objc_msgSend(v5, "addObject:", v13);
              }
              v10 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v20, v28, 16);
            }
            while (v10);
          }

        }
        v19 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v24, v29, 16);
      }
      while (v19);
    }

  }
  else
  {
    v5 = (void *)MEMORY[0x24BDBD1A8];
  }

  return v5;
}

- (id)pairedAccessories
{
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  objc_msgSend(MEMORY[0x24BDBCEB8], "array");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  -[HMDHomeManager homes](self, "homes", 0);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
  if (v5)
  {
    v6 = v5;
    v7 = *(_QWORD *)v12;
    do
    {
      v8 = 0;
      do
      {
        if (*(_QWORD *)v12 != v7)
          objc_enumerationMutation(v4);
        objc_msgSend(*(id *)(*((_QWORD *)&v11 + 1) + 8 * v8), "accessories");
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v3, "addObjectsFromArray:", v9);

        ++v8;
      }
      while (v6 != v8);
      v6 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    }
    while (v6);
  }

  return v3;
}

- (BOOL)hasHAPAccessoryInAnyHome
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t i;
  void *v6;
  uint64_t v7;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _BYTE v13[128];
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  v9 = 0u;
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  -[HMDHomeManager homes](self, "homes", 0);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
  if (v3)
  {
    v4 = *(_QWORD *)v10;
    while (2)
    {
      for (i = 0; i != v3; ++i)
      {
        if (*(_QWORD *)v10 != v4)
          objc_enumerationMutation(v2);
        objc_msgSend(*(id *)(*((_QWORD *)&v9 + 1) + 8 * i), "hapAccessories");
        v6 = (void *)objc_claimAutoreleasedReturnValue();
        v7 = objc_msgSend(v6, "count");

        if (v7)
        {
          LOBYTE(v3) = 1;
          goto LABEL_11;
        }
      }
      v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
      if (v3)
        continue;
      break;
    }
  }
LABEL_11:

  return v3;
}

- (BOOL)_removeLegacyHomeArchive:(id *)a3
{
  return +[HMDPersistentStore removeLegacyHomeArchive:](HMDPersistentStore, "removeLegacyHomeArchive:", a3);
}

- (id)_dataForPersistentStoreIncrementingGeneration:(BOOL)a3 reason:(id)a4
{
  return 0;
}

- (int64_t)numberOfAccessoryWithNewFirmwareAvailable
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t i;
  void *v8;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _BYTE v14[128];
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  -[HMDHomeManager homes](self, "homes", 0);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
  if (v3)
  {
    v4 = v3;
    v5 = 0;
    v6 = *(_QWORD *)v11;
    do
    {
      for (i = 0; i != v4; ++i)
      {
        if (*(_QWORD *)v11 != v6)
          objc_enumerationMutation(v2);
        objc_msgSend(*(id *)(*((_QWORD *)&v10 + 1) + 8 * i), "namesOfServicesWithNewFirmwareAvailableInHome");
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        v5 += objc_msgSend(v8, "count");

      }
      v4 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
    }
    while (v4);
  }
  else
  {
    v5 = 0;
  }

  return v5;
}

- (void)updateUserPushCachedForUser:(id)a3 device:(id)a4
{
  id v6;
  id v7;
  NSObject *v8;
  id v9;
  id v10;
  _QWORD block[5];
  id v12;
  id v13;

  v6 = a3;
  v7 = a4;
  -[HMDHomeManager workQueue](self, "workQueue");
  v8 = objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x24BDAC760];
  block[1] = 3221225472;
  block[2] = __53__HMDHomeManager_updateUserPushCachedForUser_device___block_invoke;
  block[3] = &unk_24E79BBD0;
  block[4] = self;
  v12 = v6;
  v13 = v7;
  v9 = v7;
  v10 = v6;
  dispatch_async(v8, block);

}

- (void)_updateUserPushCachedForUser:(id)a3 device:(id)a4
{
  id v6;
  id v7;
  void *v8;
  void *v9;
  NSObject *v10;
  void *v11;
  void *v12;
  HMDUserPushCache *v13;
  void *v14;
  void *v15;
  int v16;
  void *v17;
  __int16 v18;
  void *v19;
  __int16 v20;
  id v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  v6 = a3;
  v7 = a4;
  objc_msgSend(v6, "uuid");
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  if (v7 && v8)
  {
    v9 = (void *)MEMORY[0x227676638]();
    HMFGetOSLogHandle();
    v10 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      HMFGetLogIdentifier();
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v6, "userID");
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      v16 = 138543874;
      v17 = v11;
      v18 = 2112;
      v19 = v12;
      v20 = 2112;
      v21 = v7;
      _os_log_impl(&dword_2218F0000, v10, OS_LOG_TYPE_DEFAULT, "%{public}@Caching destination device for %@ to %@", (uint8_t *)&v16, 0x20u);

    }
    objc_autoreleasePoolPop(v9);
    v13 = -[HMDUserPushCache initWithDevice:]([HMDUserPushCache alloc], "initWithDevice:", v7);
    -[HMDHomeManager userPushCacheMap](self, "userPushCacheMap");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "uuid");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v14, "setObject:forKeyedSubscript:", v13, v15);

  }
}

- (id)_userPushCachedGetDeviceForUser:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;

  v4 = a3;
  objc_msgSend(v4, "uuid");
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  if (v5)
  {
    -[HMDHomeManager userPushCacheMap](self, "userPushCacheMap");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "uuid");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "objectForKeyedSubscript:", v7);
    v8 = (void *)objc_claimAutoreleasedReturnValue();

    if (v8)
    {
      if (!objc_msgSend(v8, "isExpired"))
      {
        objc_msgSend(v8, "device");
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        goto LABEL_8;
      }
      -[HMDHomeManager userPushCacheMap](self, "userPushCacheMap");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "uuid");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v9, "setObject:forKeyedSubscript:", 0, v10);

    }
    v11 = 0;
LABEL_8:

    goto LABEL_9;
  }
  v11 = 0;
LABEL_9:

  return v11;
}

- (void)_pushUserRemovedForHome:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  HMDHomeManager *v8;
  NSObject *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t i;
  void *v14;
  void *v15;
  NSObject *v16;
  void *v17;
  void *v18;
  void *v19;
  HMDHomeManager *v20;
  NSObject *v21;
  void *v22;
  void *v23;
  NSObject *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  id obj;
  _QWORD v30[6];
  id v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  uint8_t v36[128];
  uint8_t buf[4];
  void *v38;
  __int16 v39;
  void *v40;
  uint64_t v41;

  v41 = *MEMORY[0x24BDAC8D0];
  v4 = a3;
  objc_msgSend(v4, "removedUsers");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = (void *)objc_msgSend(v5, "copy");

  v7 = (void *)MEMORY[0x227676638]();
  v8 = self;
  HMFGetOSLogHandle();
  v9 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543618;
    v38 = v10;
    v39 = 2112;
    v40 = v6;
    _os_log_impl(&dword_2218F0000, v9, OS_LOG_TYPE_INFO, "%{public}@Attempting to resend remove message to removed users: %@", buf, 0x16u);

  }
  objc_autoreleasePoolPop(v7);
  v34 = 0u;
  v35 = 0u;
  v32 = 0u;
  v33 = 0u;
  obj = v6;
  v11 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v32, v36, 16);
  if (v11)
  {
    v12 = *(_QWORD *)v33;
    do
    {
      for (i = 0; i != v11; ++i)
      {
        if (*(_QWORD *)v33 != v12)
          objc_enumerationMutation(obj);
        v14 = *(void **)(*((_QWORD *)&v32 + 1) + 8 * i);
        if (objc_msgSend(v14, "isExpired"))
        {
          v15 = (void *)MEMORY[0x227676638]();
          HMFGetOSLogHandle();
          v16 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
          {
            HMFGetLogIdentifier();
            v17 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 138543618;
            v38 = v17;
            v39 = 2112;
            v40 = v14;
            _os_log_impl(&dword_2218F0000, v16, OS_LOG_TYPE_INFO, "%{public}@Removed user has expired: %@", buf, 0x16u);

          }
          objc_autoreleasePoolPop(v15);
          objc_msgSend(v4, "removedUsers");
          v18 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v18, "removeObject:", v14);

        }
        else if (objc_msgSend(v14, "isRemovalInProgress"))
        {
          v19 = (void *)MEMORY[0x227676638]();
          v20 = v8;
          HMFGetOSLogHandle();
          v21 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
          {
            HMFGetLogIdentifier();
            v22 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 138543618;
            v38 = v22;
            v39 = 2112;
            v40 = v14;
            _os_log_impl(&dword_2218F0000, v21, OS_LOG_TYPE_INFO, "%{public}@Skipping resending message to user whose removal is already in progress: %@", buf, 0x16u);

          }
          objc_autoreleasePoolPop(v19);
        }
        else
        {
          v23 = (void *)MEMORY[0x227676638](objc_msgSend(v14, "setRemovalInProgress:", 1));
          HMFGetOSLogHandle();
          v24 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v24, OS_LOG_TYPE_INFO))
          {
            HMFGetLogIdentifier();
            v25 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 138543618;
            v38 = v25;
            v39 = 2112;
            v40 = v14;
            _os_log_impl(&dword_2218F0000, v24, OS_LOG_TYPE_INFO, "%{public}@Resending message to removed user: %@", buf, 0x16u);

          }
          objc_autoreleasePoolPop(v23);
          objc_initWeak((id *)buf, v4);
          objc_msgSend(v14, "user");
          v26 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v14, "user");
          v27 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v27, "pairingUsername");
          v28 = (void *)objc_claimAutoreleasedReturnValue();
          v30[0] = MEMORY[0x24BDAC760];
          v30[1] = 3221225472;
          v30[2] = __42__HMDHomeManager__pushUserRemovedForHome___block_invoke;
          v30[3] = &unk_24E79ACA8;
          v30[4] = v14;
          objc_copyWeak(&v31, (id *)buf);
          v30[5] = v8;
          -[HMDHomeManager sendUserRemoved:fromHome:pairingUsername:pushToCloud:completionHandler:](v8, "sendUserRemoved:fromHome:pairingUsername:pushToCloud:completionHandler:", v26, v4, v28, 0, v30);

          objc_destroyWeak(&v31);
          objc_destroyWeak((id *)buf);
        }
      }
      v11 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v32, v36, 16);
    }
    while (v11);
  }

}

- (unsigned)_nextTransactionIdentifier
{
  unsigned __int16 nextRequestTransactionIdentifier;

  nextRequestTransactionIdentifier = self->_nextRequestTransactionIdentifier;
  self->_nextRequestTransactionIdentifier = nextRequestTransactionIdentifier + 1;
  return nextRequestTransactionIdentifier;
}

- (id)_prepareDataForDevicesOnSameAccountForHome:(id)a3 remoteGateway:(BOOL)a4 isAtLeastV4:(BOOL)a5
{
  return -[HMDHomeManager _prepareDataForDevicesOnSameAccountForHome:remoteGateway:isAtLeastV4:migrateToHH2:](self, "_prepareDataForDevicesOnSameAccountForHome:remoteGateway:isAtLeastV4:migrateToHH2:", a3, a4, a5, 0);
}

- (id)_prepareDataForDevicesOnSameAccountForHome:(id)a3 remoteGateway:(BOOL)a4 isAtLeastV4:(BOOL)a5 migrateToHH2:(BOOL)a6
{
  _BOOL4 v6;
  _BOOL4 v7;
  _BOOL4 v8;
  void *v10;
  id v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  id v18;
  void *v19;
  id v20;
  void *v21;
  void *v22;
  const __CFString *v24;
  _QWORD v25[2];

  v6 = a6;
  v7 = a5;
  v8 = a4;
  v25[1] = *MEMORY[0x24BDAC8D0];
  v10 = (void *)MEMORY[0x24BDBCED8];
  v11 = a3;
  objc_msgSend(v10, "dictionary");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "hapAccessoriesForLegacyDataBlobEncoding");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v12, "setObject:forKeyedSubscript:", v13, CFSTR("kAccessoriesDataBlobKey"));

  objc_msgSend(v12, "setObject:forKeyedSubscript:", v11, CFSTR("kHomeDataBlobKey"));
  objc_msgSend(v12, "setObject:forKeyedSubscript:", &unk_24E96D268, CFSTR("kHomeDataVersionKey"));
  -[HMDHomeManager primaryHomeUUID](self, "primaryHomeUUID");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v14, "UUIDString");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v12, "setObject:forKeyedSubscript:", v15, CFSTR("kPrimaryHomeUUIDKey"));

  v16 = (void *)objc_msgSend(v12, "copy");
  v17 = v16;
  if (v8)
  {
    v18 = v16;
    v19 = (void *)MEMORY[0x227676638]();
    v20 = -[HMDRemoteKeyedArchiver initForWritingWithRemoteDeviceIsOnSameAccount:remoteGateway:remoteUserIsAdministrator:user:supportedFeatures:]([HMDRemoteKeyedArchiver alloc], "initForWritingWithRemoteDeviceIsOnSameAccount:remoteGateway:remoteUserIsAdministrator:user:supportedFeatures:", 1, 1, 0, 0, 0);
    objc_msgSend(v20, "encodeObject:forKey:", v18, *MEMORY[0x24BDD0E88]);
    objc_msgSend(v20, "finishEncoding");
    objc_msgSend(v20, "encodedData");
    v21 = (void *)objc_claimAutoreleasedReturnValue();

    objc_autoreleasePoolPop(v19);
  }
  else
  {
    encodeRootObjectForRemoteDeviceOnSameAccountMigrateToHH2(v16, v7, v6);
    v21 = (void *)objc_claimAutoreleasedReturnValue();
  }

  v24 = CFSTR("kHomeDataKey");
  v25[0] = v21;
  objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v25, &v24, 1);
  v22 = (void *)objc_claimAutoreleasedReturnValue();

  return v22;
}

- (id)generateDataForSharedHomeModel:(id)a3
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  _QWORD v8[3];
  _QWORD v9[4];

  v9[3] = *MEMORY[0x24BDAC8D0];
  v8[0] = CFSTR("kAccessoriesDataBlobKey");
  v3 = a3;
  objc_msgSend(v3, "hapAccessoriesForLegacyDataBlobEncoding");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v9[0] = v4;
  v9[1] = v3;
  v8[1] = CFSTR("kHomeDataBlobKey");
  v8[2] = CFSTR("kHomeDataVersionKey");
  v9[2] = &unk_24E96D268;
  objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v9, v8, 3);
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  encodeRootObjectForRemoteDeviceOnSameAccountMigrateToHH2(v5, 1, 0);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  return v6;
}

- (id)generatePayloadFromHome:(id)a3 forAdmin:(BOOL)a4 user:(id)a5 supportedFeatures:(id)a6
{
  _BOOL4 v8;
  id v10;
  id v11;
  id v12;
  void *v13;
  unint64_t v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  NSObject *v20;
  void *v21;
  id v22;
  id v23;
  id v24;
  uint64_t v25;
  id v26;
  void *v27;
  void *v28;
  void *v29;
  const __CFString *v31;
  void *v32;
  uint8_t buf[4];
  void *v34;
  __int16 v35;
  id v36;
  _QWORD v37[3];
  _QWORD v38[3];
  _QWORD v39[4];
  _QWORD v40[6];

  v8 = a4;
  v40[4] = *MEMORY[0x24BDAC8D0];
  v10 = a3;
  v11 = a5;
  v12 = a6;
  -[HMDHomeManager primaryHomeUUID](self, "primaryHomeUUID");
  v13 = (void *)objc_claimAutoreleasedReturnValue();

  v14 = 0x24BDBC000uLL;
  if (v13)
  {
    v39[0] = CFSTR("kAccessoriesDataBlobKey");
    objc_msgSend(v10, "hapAccessoriesForLegacyDataBlobEncoding");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    v40[0] = v15;
    v39[1] = CFSTR("kPrimaryHomeUUIDKey");
    -[HMDHomeManager primaryHomeUUID](self, "primaryHomeUUID");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v16, "UUIDString");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    v40[1] = v17;
    v40[2] = v10;
    v39[2] = CFSTR("kHomeDataBlobKey");
    v39[3] = CFSTR("kHomeDataVersionKey");
    v40[3] = &unk_24E96D268;
    objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v40, v39, 4);
    v18 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v37[0] = CFSTR("kAccessoriesDataBlobKey");
    objc_msgSend(v10, "hapAccessoriesForLegacyDataBlobEncoding");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    v38[0] = v15;
    v38[1] = v10;
    v37[1] = CFSTR("kHomeDataBlobKey");
    v37[2] = CFSTR("kHomeDataVersionKey");
    v38[2] = &unk_24E96D268;
    objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v38, v37, 3);
    v18 = (void *)objc_claimAutoreleasedReturnValue();
  }

  v19 = (void *)MEMORY[0x227676638]();
  HMFGetOSLogHandle();
  v20 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v20, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543618;
    v34 = v21;
    v35 = 2112;
    v36 = v11;
    _os_log_impl(&dword_2218F0000, v20, OS_LOG_TYPE_INFO, "%{public}@generatePayloadFromHome: %@", buf, 0x16u);

  }
  objc_autoreleasePoolPop(v19);
  if (v8)
  {
    v22 = v18;
    v23 = v11;
    v24 = v12;
    v25 = MEMORY[0x227676638]();
    v26 = -[HMDRemoteKeyedArchiver initForWritingWithRemoteDeviceIsOnSameAccount:remoteGateway:remoteUserIsAdministrator:user:supportedFeatures:]([HMDRemoteKeyedArchiver alloc], "initForWritingWithRemoteDeviceIsOnSameAccount:remoteGateway:remoteUserIsAdministrator:user:supportedFeatures:", 0, 0, 1, v23, v24);
    objc_msgSend(v26, "encodeObject:forKey:", v22, *MEMORY[0x24BDD0E88]);
    objc_msgSend(v26, "finishEncoding");
    objc_msgSend(v26, "encodedData");
    v27 = (void *)objc_claimAutoreleasedReturnValue();

    v28 = (void *)v25;
    v14 = 0x24BDBC000;
    objc_autoreleasePoolPop(v28);

  }
  else
  {
    encodeRootObjectForRemote(v18, v11, v12);
    v27 = (void *)objc_claimAutoreleasedReturnValue();
  }
  v31 = CFSTR("kHomeDataKey");
  v32 = v27;
  objc_msgSend(*(id *)(v14 + 3696), "dictionaryWithObjects:forKeys:count:", &v32, &v31, 1);
  v29 = (void *)objc_claimAutoreleasedReturnValue();

  return v29;
}

- (id)_compressHomeData:(id)a3
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  const __CFString *v8;
  _QWORD v9[2];

  v9[1] = *MEMORY[0x24BDAC8D0];
  objc_msgSend(a3, "objectForKey:", CFSTR("kHomeDataKey"));
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = v3;
  if (v3)
  {
    v8 = CFSTR("kHomeDataKey");
    objc_msgSend(v3, "hmd_compressedData");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v9[0] = v5;
    objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v9, &v8, 1);
    v6 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v6 = 0;
  }

  return v6;
}

- (void)pushChangesForHH2SharedUserLastSync:(id)a3 completion:(id)a4
{
  id v6;
  id v7;
  NSObject *v8;
  id v9;
  id v10;
  _QWORD block[5];
  id v12;
  id v13;

  v6 = a3;
  v7 = a4;
  -[HMDHomeManager workQueue](self, "workQueue");
  v8 = objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x24BDAC760];
  block[1] = 3221225472;
  block[2] = __65__HMDHomeManager_pushChangesForHH2SharedUserLastSync_completion___block_invoke;
  block[3] = &unk_24E79B440;
  block[4] = self;
  v12 = v6;
  v13 = v7;
  v9 = v7;
  v10 = v6;
  dispatch_async(v8, block);

}

- (void)_pushChangesForHH2SharedUserLastSync:(id)a3 completion:(id)a4
{
  id v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  char v16;
  void *v17;
  HMDHomeManager *v18;
  NSObject *v19;
  void *v20;
  void *v21;
  uint64_t (*v22)(uint64_t, uint64_t);
  id v23;
  void *v24;
  HMDHomeManager *v25;
  NSObject *v26;
  void *v27;
  void *v28;
  uint64_t (*v29)(uint64_t, uint64_t);
  void *v30;
  HMDHomeManager *v31;
  NSObject *v32;
  id v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  id v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  void *v43;
  void *v44;
  void *v45;
  void *v46;
  void *v47;
  void *v48;
  void *v49;
  void *v50;
  void *v51;
  void *v52;
  void *v53;
  void *v54;
  HMDHomeManager *v55;
  NSObject *v56;
  void *v57;
  void *v58;
  void *context;
  void (**v60)(id, uint64_t);
  void *v62;
  void *v63;
  id obj;
  HMDHomeManager *obja;
  uint64_t v66;
  void *v67;
  void *v68;
  _QWORD v69[4];
  id v70;
  id v71;
  void (**v72)(id, uint64_t);
  _BYTE *v73;
  id v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  _QWORD v79[7];
  _QWORD v80[7];
  _QWORD v81[2];
  _QWORD v82[2];
  _QWORD v83[2];
  _QWORD v84[2];
  uint8_t v85[4];
  id v86;
  __int16 v87;
  void *v88;
  __int16 v89;
  void *v90;
  _BYTE buf[24];
  uint64_t (*v92)(uint64_t, uint64_t);
  void (*v93)(uint64_t);
  id v94;
  _BYTE v95[128];
  uint64_t v96;

  v96 = *MEMORY[0x24BDAC8D0];
  v5 = a3;
  v60 = (void (**)(id, uint64_t))a4;
  v68 = v5;
  objc_msgSend(v5, "homeUUID");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHomeManager _homeWithUUID:](self, "_homeWithUUID:", v6);
  v63 = (void *)objc_claimAutoreleasedReturnValue();

  if (v63)
  {
    v77 = 0u;
    v78 = 0u;
    v75 = 0u;
    v76 = 0u;
    objc_msgSend(v63, "users");
    obj = (id)objc_claimAutoreleasedReturnValue();
    v7 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v75, v95, 16);
    if (v7)
    {
      v66 = *(_QWORD *)v76;
LABEL_4:
      v8 = 0;
      while (1)
      {
        if (*(_QWORD *)v76 != v66)
          objc_enumerationMutation(obj);
        v9 = *(void **)(*((_QWORD *)&v75 + 1) + 8 * v8);
        objc_msgSend(v9, "uuid");
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v68, "user");
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v11, "uuid");
        v12 = (void *)objc_claimAutoreleasedReturnValue();
        if (objc_msgSend(v10, "isEqual:", v12))
          break;
        objc_msgSend(v68, "user");
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v13, "userID");
        v14 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v9, "userID");
        v15 = (void *)objc_claimAutoreleasedReturnValue();
        v16 = objc_msgSend(v14, "isEqual:", v15);

        if ((v16 & 1) != 0)
          goto LABEL_16;
        if (v7 == ++v8)
        {
          v7 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v75, v95, 16);
          if (v7)
            goto LABEL_4;
          goto LABEL_11;
        }
      }

LABEL_16:
      v23 = v9;

      if (!v23)
        goto LABEL_20;
      v24 = (void *)MEMORY[0x227676638]();
      v25 = self;
      HMFGetOSLogHandle();
      v26 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v26, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v27 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v68, "homeUUID");
        v28 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v68, "user");
        v29 = (uint64_t (*)(uint64_t, uint64_t))objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543874;
        *(_QWORD *)&buf[4] = v27;
        *(_WORD *)&buf[12] = 2112;
        *(_QWORD *)&buf[14] = v28;
        *(_WORD *)&buf[22] = 2112;
        v92 = v29;
        _os_log_impl(&dword_2218F0000, v26, OS_LOG_TYPE_INFO, "%{public}@Do not send because user completed invite for home %@ for hh2 last user data sync %@", buf, 0x20u);

      }
      objc_autoreleasePoolPop(v24);
      v60[2](v60, 1);

    }
    else
    {
LABEL_11:

LABEL_20:
      context = (void *)MEMORY[0x227676638]();
      *(_QWORD *)buf = 0;
      *(_QWORD *)&buf[8] = buf;
      *(_QWORD *)&buf[16] = 0x3032000000;
      v92 = __Block_byref_object_copy__227383;
      v93 = __Block_byref_object_dispose__227384;
      v94 = (id)objc_msgSend(objc_alloc(MEMORY[0x24BE3F200]), "initWithName:", CFSTR("com.apple.homed.push-home-to-hh2-last-user-sync"));
      +[HMDHAPMetadata getSharedInstance](HMDHAPMetadata, "getSharedInstance");
      v67 = (void *)objc_claimAutoreleasedReturnValue();
      v30 = (void *)MEMORY[0x227676638]();
      v31 = self;
      if (v67)
      {
        HMFGetOSLogHandle();
        obja = v31;
        v32 = (id)objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v32, OS_LOG_TYPE_INFO))
        {
          HMFGetLogIdentifier();
          v33 = (id)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v68, "homeUUID");
          v34 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v68, "user");
          v35 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)v85 = 138543874;
          v86 = v33;
          v87 = 2112;
          v88 = v34;
          v89 = 2112;
          v90 = v35;
          _os_log_impl(&dword_2218F0000, v32, OS_LOG_TYPE_INFO, "%{public}@Pushing last sync home data changes to home: %@ and users: %@", v85, 0x20u);

        }
        objc_autoreleasePoolPop(v30);
        v83[0] = CFSTR("kRequiredCapabilitiesKey");
        v81[0] = CFSTR("kDeviceClassTypeKey");
        v81[1] = CFSTR("kHomedVersionKey");
        v82[0] = CFSTR("kDeviceClassTypeTransient");
        v36 = (void *)MEMORY[0x24BDD16E0];
        objc_msgSend(CFSTR("10.0"), "doubleValue");
        objc_msgSend(v36, "numberWithDouble:");
        v62 = (void *)objc_claimAutoreleasedReturnValue();
        v82[1] = v62;
        objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v82, v81, 2);
        v37 = (void *)objc_claimAutoreleasedReturnValue();
        v83[1] = CFSTR("kRequestedCapabilitiesKey");
        v84[0] = v37;
        v79[0] = CFSTR("kHomedVersionKey");
        v38 = (id)homedVersion;
        v80[0] = v38;
        v80[1] = &unk_24E971270;
        v79[1] = CFSTR("kHomedSupportedFeaturesKey");
        v79[2] = CFSTR("kHomeUUID");
        objc_msgSend(v63, "uuid");
        v39 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v39, "UUIDString");
        v40 = (void *)objc_claimAutoreleasedReturnValue();
        v80[2] = v40;
        v79[3] = CFSTR("kHomeConfigurationVersionKey");
        objc_msgSend(MEMORY[0x24BDD16E0], "numberWithInteger:", objc_msgSend(v63, "configurationVersion"));
        v41 = (void *)objc_claimAutoreleasedReturnValue();
        v80[3] = v41;
        v79[4] = CFSTR("kMetadataInfoVersionKey");
        objc_msgSend(v67, "version");
        v42 = (void *)objc_claimAutoreleasedReturnValue();
        v80[4] = v42;
        v79[5] = CFSTR("kMetadataInfoSchemaVersionKey");
        objc_msgSend(v67, "schemaVersion");
        v43 = (void *)objc_claimAutoreleasedReturnValue();
        v80[5] = v43;
        v79[6] = CFSTR("kMetadataInfoCompletenessKey");
        objc_msgSend(MEMORY[0x24BDD16E0], "numberWithInt:", objc_msgSend(v67, "incomplete") ^ 1);
        v44 = (void *)objc_claimAutoreleasedReturnValue();
        v80[6] = v44;
        objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v80, v79, 7);
        v45 = (void *)objc_claimAutoreleasedReturnValue();
        v84[1] = v45;
        objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v84, v83, 2);
        v58 = (void *)objc_claimAutoreleasedReturnValue();

        objc_msgSend(v68, "user");
        v46 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v46, "account");
        v47 = (void *)objc_claimAutoreleasedReturnValue();

        if (v47)
        {
          +[HMDIdentityRegistry sharedRegistry](HMDIdentityRegistry, "sharedRegistry");
          v48 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v68, "user");
          v49 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v49, "pairingIdentity");
          v50 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v68, "user");
          v51 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v48, "registerIdentity:account:object:", v50, v47, v51);

        }
        objc_initWeak((id *)v85, obja);
        objc_msgSend(v68, "user");
        v52 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v52, "userID");
        v53 = (void *)objc_claimAutoreleasedReturnValue();
        -[HMDHomeManager workQueue](obja, "workQueue");
        v54 = (void *)objc_claimAutoreleasedReturnValue();
        v69[0] = MEMORY[0x24BDAC760];
        v69[1] = 3221225472;
        v69[2] = __66__HMDHomeManager__pushChangesForHH2SharedUserLastSync_completion___block_invoke;
        v69[3] = &unk_24E796088;
        objc_copyWeak(&v74, (id *)v85);
        v70 = v68;
        v72 = v60;
        v73 = buf;
        v71 = v63;
        -[HMDHomeManager electDeviceForHH1User:destination:deviceCapabilities:queue:completionHandler:](obja, "electDeviceForHH1User:destination:deviceCapabilities:queue:completionHandler:", v53, 0, v58, v54, v69);

        objc_destroyWeak(&v74);
        objc_destroyWeak((id *)v85);

      }
      else
      {
        HMFGetOSLogHandle();
        v55 = v31;
        v56 = (id)objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v56, OS_LOG_TYPE_ERROR))
        {
          HMFGetLogIdentifier();
          v57 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)v85 = 138543362;
          v86 = v57;
          _os_log_impl(&dword_2218F0000, v56, OS_LOG_TYPE_ERROR, "%{public}@No metadata to push changes for home", v85, 0xCu);

        }
        objc_autoreleasePoolPop(v30);
        v60[2](v60, 0);
      }

      _Block_object_dispose(buf, 8);
      objc_autoreleasePoolPop(context);
    }
  }
  else
  {
    v17 = (void *)MEMORY[0x227676638]();
    v18 = self;
    HMFGetOSLogHandle();
    v19 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v68, "homeUUID");
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v68, "user");
      v22 = (uint64_t (*)(uint64_t, uint64_t))objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543874;
      *(_QWORD *)&buf[4] = v20;
      *(_WORD *)&buf[12] = 2112;
      *(_QWORD *)&buf[14] = v21;
      *(_WORD *)&buf[22] = 2112;
      v92 = v22;
      _os_log_impl(&dword_2218F0000, v19, OS_LOG_TYPE_INFO, "%{public}@Do not send because home no longer exists %@ for hh2 last user data sync %@", buf, 0x20u);

    }
    objc_autoreleasePoolPop(v17);
    v60[2](v60, 1);
  }

}

- (void)checkAndPushMetadataToUser:(id)a3 destination:(id)a4 userInfo:(id)a5
{
  id v8;
  void *v9;
  uint64_t v10;
  void *v11;
  void *v12;
  void *v13;
  unint64_t v14;
  _BOOL4 v15;
  void *v16;
  void *v17;
  char v18;
  void *v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  NSObject *v24;
  void *v25;
  void *v26;
  HMDHomeManager *v27;
  NSObject *v28;
  void *v29;
  void *v30;
  _BOOL4 v31;
  void *v32;
  NSObject *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  NSObject *v41;
  void *v42;
  void *v43;
  void *v44;
  void *v45;
  void *v46;
  void *v47;
  void *v48;
  NSObject *v49;
  id v50;
  uint64_t v51;
  void *v52;
  void *v53;
  uint64_t v54;
  void *context;
  void *contexta;
  void *v57;
  id v58;
  id v59;
  void *v60;
  _QWORD v61[4];
  id v62;
  uint64_t *v63;
  id v64;
  _QWORD v65[4];
  id v66;
  uint64_t *v67;
  uint64_t v68;
  uint64_t *v69;
  uint64_t v70;
  uint64_t (*v71)(uint64_t, uint64_t);
  void (*v72)(uint64_t);
  id v73;
  uint8_t buf[4];
  id v75;
  __int16 v76;
  uint64_t v77;
  __int16 v78;
  id v79;
  __int16 v80;
  id v81;
  __int16 v82;
  void *v83;
  __int16 v84;
  void *v85;
  __int16 v86;
  void *v87;
  __int16 v88;
  void *v89;
  __int16 v90;
  uint64_t v91;
  const __CFString *v92;
  _QWORD v93[4];

  v93[1] = *MEMORY[0x24BDAC8D0];
  v59 = a3;
  v58 = a4;
  v8 = a5;
  isWatch();
  +[HMDHAPMetadata getSharedInstance](HMDHAPMetadata, "getSharedInstance");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "hmf_numberForKey:", CFSTR("kMetadataInfoVersionKey"));
  v60 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "hmf_numberForKey:", CFSTR("kMetadataInfoSchemaVersionKey"));
  v10 = objc_claimAutoreleasedReturnValue();
  v11 = (void *)v10;
  if (!v9 || !v10 || !v60)
    goto LABEL_30;
  objc_msgSend(v9, "schemaVersion");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v12, "isEqualToNumber:", v11))
  {
    objc_msgSend(v9, "version");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    v14 = objc_msgSend(v13, "unsignedIntegerValue");
    v15 = v14 > objc_msgSend(v60, "unsignedIntegerValue");

  }
  else
  {
    v15 = 0;
  }

  objc_msgSend(v8, "hmf_numberForKey:", CFSTR("kMetadataInfoCompletenessKey"));
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  v17 = v16;
  if (!v16)
  {
    objc_msgSend(v9, "incomplete");
    goto LABEL_17;
  }
  v18 = objc_msgSend(v16, "BOOLValue");
  if ((objc_msgSend(v9, "incomplete") & 1) != 0 || (v18 & 1) != 0)
  {
LABEL_17:

    if (!v15)
      goto LABEL_30;
    goto LABEL_18;
  }
  objc_msgSend(v9, "schemaVersion");
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  if ((objc_msgSend(v19, "isEqualToNumber:", v11) & 1) == 0)
  {

    goto LABEL_17;
  }
  objc_msgSend(v9, "version");
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  v21 = objc_msgSend(v20, "unsignedIntegerValue");
  v22 = objc_msgSend(v60, "unsignedIntegerValue");

  if (v21 != v22)
    goto LABEL_17;
  v23 = (void *)MEMORY[0x227676638]();
  HMFGetOSLogHandle();
  v24 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v24, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543362;
    v75 = v25;
    _os_log_impl(&dword_2218F0000, v24, OS_LOG_TYPE_INFO, "%{public}@Remote metadata is incomplete, local metadata is complete - sending...", buf, 0xCu);

  }
  objc_autoreleasePoolPop(v23);

LABEL_18:
  v26 = (void *)MEMORY[0x227676638]();
  v27 = self;
  HMFGetOSLogHandle();
  v28 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
  {
    HMFGetLogIdentifier();
    v29 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543362;
    v75 = v29;
    _os_log_impl(&dword_2218F0000, v28, OS_LOG_TYPE_DEFAULT, "%{public}@Push metadata changes to the user", buf, 0xCu);

  }
  objc_autoreleasePoolPop(v26);
  context = (void *)MEMORY[0x227676638]();
  v68 = 0;
  v69 = &v68;
  v70 = 0x3032000000;
  v71 = __Block_byref_object_copy__227383;
  v72 = __Block_byref_object_dispose__227384;
  v73 = (id)objc_msgSend(objc_alloc(MEMORY[0x24BE3F200]), "initWithName:", CFSTR("com.apple.homed.push-metadata"));
  objc_msgSend(v8, "hmf_numberForKey:", CFSTR("kHomedVersionKey"));
  v30 = (void *)objc_claimAutoreleasedReturnValue();
  v31 = +[HMDHAPMetadata isHomedVersionSupported:](HMDHAPMetadata, "isHomedVersionSupported:");
  v32 = (void *)MEMORY[0x227676638]();
  if (v31)
  {
    HMFGetOSLogHandle();
    v33 = (id)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v33, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v34 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543874;
      v75 = v34;
      v76 = 2112;
      v77 = (uint64_t)v59;
      v78 = 2112;
      v79 = v30;
      _os_log_impl(&dword_2218F0000, v33, OS_LOG_TYPE_INFO, "%{public}@Push metadata dictionary to user %@ as its version %@ is supported.", buf, 0x20u);

    }
    objc_autoreleasePoolPop(v32);
    v35 = (void *)MEMORY[0x24BDD1618];
    +[HMDPersistentStore loadPlainMetadataDictionary](HMDPersistentStore, "loadPlainMetadataDictionary", context);
    v36 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v35, "archivedDataWithRootObject:requiringSecureCoding:error:", v36, 1, 0);
    v37 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v37, "hmd_compressedData");
    v57 = (void *)objc_claimAutoreleasedReturnValue();

    +[HMDHAPMetadataModel metadataModelObjectUUID](HMDHAPMetadataModel, "metadataModelObjectUUID");
    v38 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v38, "UUIDString");
    v39 = (void *)objc_claimAutoreleasedReturnValue();
    v65[0] = MEMORY[0x24BDAC760];
    v65[1] = 3221225472;
    v65[2] = __66__HMDHomeManager_checkAndPushMetadataToUser_destination_userInfo___block_invoke;
    v65[3] = &unk_24E7960B0;
    v66 = v59;
    v67 = &v68;
    -[HMDHomeManager sendFragmentedMessageForData:objectUUID:withMessageName:toUser:destination:completionHandler:](v27, "sendFragmentedMessageForData:objectUUID:withMessageName:toUser:destination:completionHandler:", v57, v39, CFSTR("kMetadataDataSyncRequestKey"), v66, v58, v65);

    v40 = v66;
  }
  else
  {
    HMFGetOSLogHandle();
    v41 = (id)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v41, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v42 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543874;
      v75 = v42;
      v76 = 2112;
      v77 = (uint64_t)v59;
      v78 = 2112;
      v79 = v30;
      _os_log_impl(&dword_2218F0000, v41, OS_LOG_TYPE_INFO, "%{public}@Sending old metadata data to %@ as it is a legacy device %@.", buf, 0x20u);

    }
    objc_autoreleasePoolPop(v32);
    +[HMDHAPMetadata legacyV3DataForIDS](HMDHAPMetadata, "legacyV3DataForIDS", context);
    v57 = (void *)objc_claimAutoreleasedReturnValue();
    v43 = (void *)MEMORY[0x24BE3F1B0];
    v92 = CFSTR("kHAPMetadataDataKey");
    v93[0] = v57;
    objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v93, &v92, 1);
    v44 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v43, "internalMessageWithName:messagePayload:", CFSTR("kMetadataDataSyncRequestKey"), v44);
    v40 = (void *)objc_claimAutoreleasedReturnValue();

    objc_initWeak((id *)buf, v27);
    -[HMDHomeManager messageDispatcher](v27, "messageDispatcher");
    v45 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHomeManager uuid](v27, "uuid");
    v46 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHomeManager workQueue](v27, "workQueue");
    v47 = (void *)objc_claimAutoreleasedReturnValue();
    v61[0] = MEMORY[0x24BDAC760];
    v61[1] = 3221225472;
    v61[2] = __66__HMDHomeManager_checkAndPushMetadataToUser_destination_userInfo___block_invoke_477;
    v61[3] = &unk_24E7960D8;
    objc_copyWeak(&v64, (id *)buf);
    v62 = v59;
    v63 = &v68;
    objc_msgSend(v45, "sendSecureMessage:target:userID:destination:responseQueue:responseHandler:", v40, v46, v62, v58, v47, v61);

    objc_destroyWeak(&v64);
    objc_destroyWeak((id *)buf);
  }

  v48 = (void *)MEMORY[0x227676638]();
  HMFGetOSLogHandle();
  v49 = (id)objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v49, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v50 = (id)objc_claimAutoreleasedReturnValue();
    v51 = objc_msgSend(v57, "length");
    objc_msgSend(v9, "schemaVersion");
    v52 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "version");
    v53 = (void *)objc_claimAutoreleasedReturnValue();
    v54 = v69[5];
    *(_DWORD *)buf = 138545410;
    v75 = v50;
    v76 = 2048;
    v77 = v51;
    v78 = 2112;
    v79 = v59;
    v80 = 2112;
    v81 = v58;
    v82 = 2112;
    v83 = v52;
    v84 = 2112;
    v85 = v53;
    v86 = 2112;
    v87 = v11;
    v88 = 2112;
    v89 = v60;
    v90 = 2112;
    v91 = v54;
    _os_log_impl(&dword_2218F0000, v49, OS_LOG_TYPE_INFO, "%{public}@Pushing metadata(%lu bytes) change to user %@ (%@) - local %@/%@  remote %@/%@ - creating transaction %@", buf, 0x5Cu);

  }
  objc_autoreleasePoolPop(v48);

  _Block_object_dispose(&v68, 8);
  objc_autoreleasePoolPop(contexta);
LABEL_30:

}

- (id)_getListOfUsersToPushMetadataChangesTo
{
  void *v3;
  id v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  int v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t i;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  uint64_t v23;
  void *v24;
  char v25;
  id v27;
  uint64_t v28;
  id v29;
  uint64_t v30;
  id obj;
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  id v41;
  id v42;
  _BYTE v43[128];
  _BYTE v44[128];
  uint64_t v45;

  v45 = *MEMORY[0x24BDAC8D0];
  objc_msgSend(MEMORY[0x24BE1BC08], "systemStore");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v41 = 0;
  v42 = 0;
  objc_msgSend(v3, "getControllerPublicKey:secretKey:username:allowCreation:error:", 0, 0, &v42, 0, &v41);
  v4 = v42;
  v27 = v41;

  objc_msgSend(MEMORY[0x24BDBCED8], "dictionary");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v37 = 0u;
  v38 = 0u;
  v39 = 0u;
  v40 = 0u;
  -[HMDHomeManager homes](self, "homes");
  obj = (id)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v37, v44, 16);
  if (v6)
  {
    v7 = v6;
    v8 = *(_QWORD *)v38;
    v9 = MEMORY[0x24BDBD1C8];
    v28 = *(_QWORD *)v38;
    v29 = v4;
    do
    {
      v10 = 0;
      v30 = v7;
      do
      {
        if (*(_QWORD *)v38 != v8)
          objc_enumerationMutation(obj);
        v11 = *(void **)(*((_QWORD *)&v37 + 1) + 8 * v10);
        objc_msgSend(v11, "ownerName", v27);
        v12 = (void *)objc_claimAutoreleasedReturnValue();
        v13 = objc_msgSend(v12, "isEqualToString:", v4);

        if (v13)
        {
          v32 = v10;
          v35 = 0u;
          v36 = 0u;
          v33 = 0u;
          v34 = 0u;
          objc_msgSend(v11, "users");
          v14 = (void *)objc_claimAutoreleasedReturnValue();
          v15 = objc_msgSend(v14, "countByEnumeratingWithState:objects:count:", &v33, v43, 16);
          if (!v15)
            goto LABEL_20;
          v16 = v15;
          v17 = *(_QWORD *)v34;
          while (1)
          {
            for (i = 0; i != v16; ++i)
            {
              if (*(_QWORD *)v34 != v17)
                objc_enumerationMutation(v14);
              v19 = *(void **)(*((_QWORD *)&v33 + 1) + 8 * i);
              objc_msgSend(v19, "userID");
              v20 = (void *)objc_claimAutoreleasedReturnValue();

              if (v20)
              {
                if (objc_msgSend(v19, "isRemoteGateway"))
                {
                  objc_msgSend(v19, "userID");
                  v21 = (void *)objc_claimAutoreleasedReturnValue();
                  v22 = v5;
                  v23 = v9;
                }
                else
                {
                  objc_msgSend(v11, "currentUser");
                  v24 = (void *)objc_claimAutoreleasedReturnValue();
                  v25 = objc_msgSend(v19, "isEqual:", v24);

                  if ((v25 & 1) != 0)
                    continue;
                  objc_msgSend(v19, "userID");
                  v21 = (void *)objc_claimAutoreleasedReturnValue();
                  v22 = v5;
                  v23 = MEMORY[0x24BDBD1C0];
                }
                objc_msgSend(v22, "setObject:forKeyedSubscript:", v23, v21);

              }
            }
            v16 = objc_msgSend(v14, "countByEnumeratingWithState:objects:count:", &v33, v43, 16);
            if (!v16)
            {
LABEL_20:

              v8 = v28;
              v4 = v29;
              v7 = v30;
              v10 = v32;
              break;
            }
          }
        }
        ++v10;
      }
      while (v10 != v7);
      v7 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v37, v44, 16);
    }
    while (v7);
  }

  return v5;
}

- (void)_pushMetadataChangesToUsers
{
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  void *v7;
  id v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  id v14;
  void *v15;
  id v16;
  uint64_t v17;
  uint64_t i;
  void *v19;
  id v20;
  void *v21;
  id v22;
  void *v23;
  NSObject *v24;
  void *v25;
  void *v26;
  id v27;
  void *v28;
  NSObject *v29;
  void *v30;
  void *v31;
  HMDHomeManager *v32;
  NSObject *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD v41[4];
  id v42;
  void *v43;
  HMDHomeManager *v44;
  id v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  id location;
  uint8_t buf[4];
  void *v52;
  __int16 v53;
  void *v54;
  __int16 v55;
  id v56;
  _BYTE v57[128];
  _QWORD v58[4];
  _QWORD v59[4];
  const __CFString *v60;
  const __CFString *v61;
  _QWORD v62[2];
  _QWORD v63[2];
  _QWORD v64[4];
  _QWORD v65[4];
  const __CFString *v66;
  _QWORD v67[4];

  v67[1] = *MEMORY[0x24BDAC8D0];
  isWatch();
  +[HMDHAPMetadata getSharedInstance](HMDHAPMetadata, "getSharedInstance");
  v36 = (void *)objc_claimAutoreleasedReturnValue();
  if (v36)
  {
    -[HMDHomeManager _getListOfUsersToPushMetadataChangesTo](self, "_getListOfUsersToPushMetadataChangesTo");
    v35 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v35, "count")
      || (-[HMDHomeManager associatedWatchPeers](self, "associatedWatchPeers"),
          v3 = (void *)objc_claimAutoreleasedReturnValue(),
          v4 = objc_msgSend(v3, "count"),
          v3,
          v4))
    {
      v66 = CFSTR("kRequestedCapabilitiesKey");
      v64[0] = CFSTR("kMetadataInfoVersionKey");
      objc_msgSend(v36, "version");
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      v65[0] = v5;
      v64[1] = CFSTR("kMetadataInfoSchemaVersionKey");
      objc_msgSend(v36, "schemaVersion");
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      v65[1] = v6;
      v64[2] = CFSTR("kMetadataInfoCompletenessKey");
      objc_msgSend(MEMORY[0x24BDD16E0], "numberWithInt:", objc_msgSend(v36, "incomplete") ^ 1);
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      v65[2] = v7;
      v64[3] = CFSTR("kHomedVersionKey");
      v8 = (id)homedVersion;
      v65[3] = v8;
      objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v65, v64, 4);
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      v67[0] = v9;
      objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v67, &v66, 1);
      v38 = (void *)objc_claimAutoreleasedReturnValue();

      v60 = CFSTR("kDeviceClassTypeKey");
      v61 = CFSTR("kDeviceClassTypeTransient");
      v62[0] = CFSTR("kRequiredCapabilitiesKey");
      objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", &v61, &v60, 1);
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      v62[1] = CFSTR("kRequestedCapabilitiesKey");
      v63[0] = v10;
      v58[0] = CFSTR("kMetadataInfoVersionKey");
      objc_msgSend(v36, "version");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      v59[0] = v11;
      v58[1] = CFSTR("kMetadataInfoSchemaVersionKey");
      objc_msgSend(v36, "schemaVersion");
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      v59[1] = v12;
      v58[2] = CFSTR("kMetadataInfoCompletenessKey");
      objc_msgSend(MEMORY[0x24BDD16E0], "numberWithInt:", objc_msgSend(v36, "incomplete") ^ 1);
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      v59[2] = v13;
      v58[3] = CFSTR("kHomedVersionKey");
      v14 = (id)homedVersion;
      v59[3] = v14;
      objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v59, v58, 4);
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      v63[1] = v15;
      objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v63, v62, 2);
      v37 = (void *)objc_claimAutoreleasedReturnValue();

      objc_initWeak(&location, self);
      v48 = 0u;
      v49 = 0u;
      v46 = 0u;
      v47 = 0u;
      v16 = v35;
      v17 = objc_msgSend(v16, "countByEnumeratingWithState:objects:count:", &v46, v57, 16);
      if (v17)
      {
        v39 = *(_QWORD *)v47;
        do
        {
          v40 = v17;
          for (i = 0; i != v40; ++i)
          {
            if (*(_QWORD *)v47 != v39)
              objc_enumerationMutation(v16);
            v19 = *(void **)(*((_QWORD *)&v46 + 1) + 8 * i);
            if (objc_msgSend(v16, "hmf_BOOLForKey:", v19))
            {
              v20 = v19;
              v21 = v38;
            }
            else
            {
              v20 = 0;
              v21 = v37;
            }
            v22 = v21;
            v23 = (void *)MEMORY[0x227676638]();
            HMFGetOSLogHandle();
            v24 = (id)objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v24, OS_LOG_TYPE_INFO))
            {
              HMFGetLogIdentifier();
              v25 = (void *)objc_claimAutoreleasedReturnValue();
              *(_DWORD *)buf = 138543874;
              v52 = v25;
              v53 = 2112;
              v54 = v19;
              v55 = 2112;
              v56 = v20;
              _os_log_impl(&dword_2218F0000, v24, OS_LOG_TYPE_INFO, "%{public}@Preparing for metadata push to user: %@ with destination: %@", buf, 0x20u);

            }
            objc_autoreleasePoolPop(v23);
            -[HMDHomeManager workQueue](self, "workQueue");
            v26 = (void *)objc_claimAutoreleasedReturnValue();
            v41[0] = MEMORY[0x24BDAC760];
            v41[1] = 3221225472;
            v41[2] = __45__HMDHomeManager__pushMetadataChangesToUsers__block_invoke;
            v41[3] = &unk_24E796100;
            objc_copyWeak(&v45, &location);
            v27 = v16;
            v42 = v27;
            v43 = v19;
            v44 = self;
            -[HMDHomeManager electDeviceForUser:destination:deviceCapabilities:queue:completionHandler:](self, "electDeviceForUser:destination:deviceCapabilities:queue:completionHandler:", v19, v20, v22, v26, v41);

            objc_destroyWeak(&v45);
          }
          v17 = objc_msgSend(v27, "countByEnumeratingWithState:objects:count:", &v46, v57, 16);
        }
        while (v17);
      }

      objc_destroyWeak(&location);
    }
    else
    {
      v31 = (void *)MEMORY[0x227676638]();
      v32 = self;
      HMFGetOSLogHandle();
      v33 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v33, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v34 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543362;
        v52 = v34;
        _os_log_impl(&dword_2218F0000, v33, OS_LOG_TYPE_INFO, "%{public}@Not pushing metadata changes to anybody as either there are no users or there are no associated watches with this account.", buf, 0xCu);

      }
      objc_autoreleasePoolPop(v31);
    }

  }
  else
  {
    v28 = (void *)MEMORY[0x227676638]();
    HMFGetOSLogHandle();
    v29 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v30 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v52 = v30;
      _os_log_impl(&dword_2218F0000, v29, OS_LOG_TYPE_ERROR, "%{public}@No metadata to push changes to shared users.", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v28);
  }

}

- (void)pushMetadataToAllWatches
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  _BYTE v16[128];
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  v15 = 0u;
  -[HMDHomeManager associatedWatchPeers](self, "associatedWatchPeers", 0);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v13;
    do
    {
      v7 = 0;
      do
      {
        if (*(_QWORD *)v13 != v6)
          objc_enumerationMutation(v3);
        v8 = *(_QWORD *)(*((_QWORD *)&v12 + 1) + 8 * v7);
        -[HMDHomeManager associatedWatchPeers](self, "associatedWatchPeers");
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v9, "objectForKey:", v8);
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v10, "metadataConfig");
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        -[HMDHomeManager checkAndPushMetadataToUser:destination:userInfo:](self, "checkAndPushMetadataToUser:destination:userInfo:", v8, v8, v11);

        ++v7;
      }
      while (v5 != v7);
      v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
    }
    while (v5);
  }

}

- (void)_addPendingDataSyncAcksForUser:(id)a3 forHome:(id)a4
{
  __CFString *v6;
  id v7;
  int v8;
  __CFString *v9;
  __CFString *v10;
  void *v11;
  NSObject *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  id v20;
  int v21;
  void *v22;
  __int16 v23;
  __CFString *v24;
  __int16 v25;
  void *v26;
  uint64_t v27;

  v27 = *MEMORY[0x24BDAC8D0];
  v6 = (__CFString *)a3;
  v7 = a4;
  v8 = shouldLogPrivateInformation();
  v9 = CFSTR("...");
  if (v8)
    v9 = v6;
  v10 = v9;
  v11 = (void *)MEMORY[0x227676638]();
  HMFGetOSLogHandle();
  v12 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "UUIDString");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    v21 = 138543874;
    v22 = v13;
    v23 = 2112;
    v24 = v10;
    v25 = 2112;
    v26 = v14;
    _os_log_impl(&dword_2218F0000, v12, OS_LOG_TYPE_INFO, "%{public}@Adding pending data sync ack for user %@ for data corresponding to home %@", (uint8_t *)&v21, 0x20u);

  }
  objc_autoreleasePoolPop(v11);
  objc_msgSend(v7, "UUIDString");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHomeManager pendingDataSyncAcks](self, "pendingDataSyncAcks");
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v16, "objectForKeyedSubscript:", v15);
  v17 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v17)
  {
    objc_msgSend(MEMORY[0x24BDBCEF0], "set");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHomeManager pendingDataSyncAcks](self, "pendingDataSyncAcks");
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v18, "setObject:forKeyedSubscript:", v17, v15);

  }
  objc_msgSend(v17, "addObject:", v6);
  -[HMDHomeManager pendingDataSyncAcks](self, "pendingDataSyncAcks");
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  v20 = +[HMDPersistentStore archiveIDSDataSyncJournal:](HMDPersistentStore, "archiveIDSDataSyncJournal:", v19);

}

- (void)_removePendingDataSyncAcksForUser:(id)a3 forHome:(id)a4
{
  __CFString *v6;
  id v7;
  void *v8;
  void *v9;
  void *v10;
  int v11;
  __CFString *v12;
  __CFString *v13;
  void *v14;
  NSObject *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  NSObject *v20;
  void *v21;
  __CFString *v22;
  void *v23;
  id v24;
  int v25;
  void *v26;
  __int16 v27;
  __CFString *v28;
  __int16 v29;
  void *v30;
  uint64_t v31;

  v31 = *MEMORY[0x24BDAC8D0];
  v6 = (__CFString *)a3;
  v7 = a4;
  objc_msgSend(v7, "UUIDString");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHomeManager pendingDataSyncAcks](self, "pendingDataSyncAcks");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "objectForKeyedSubscript:", v8);
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  if (v10)
  {
    objc_msgSend(v10, "removeObject:", v6);
    if (!objc_msgSend(v10, "count"))
    {
      v11 = shouldLogPrivateInformation();
      v12 = CFSTR("...");
      if (v11)
        v12 = v6;
      v13 = v12;
      v14 = (void *)MEMORY[0x227676638]();
      HMFGetOSLogHandle();
      v15 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v16 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v7, "UUIDString");
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        v25 = 138543874;
        v26 = v16;
        v27 = 2112;
        v28 = v13;
        v29 = 2112;
        v30 = v17;
        _os_log_impl(&dword_2218F0000, v15, OS_LOG_TYPE_INFO, "%{public}@Removing pending data sync ack for user %@ for data corresponding to home %@", (uint8_t *)&v25, 0x20u);

      }
      objc_autoreleasePoolPop(v14);
      -[HMDHomeManager pendingDataSyncAcks](self, "pendingDataSyncAcks");
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v18, "removeObjectForKey:", v8);

    }
  }
  v19 = (void *)MEMORY[0x227676638]();
  HMFGetOSLogHandle();
  v20 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v20, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHomeManager pendingDataSyncAcks](self, "pendingDataSyncAcks");
    v22 = (__CFString *)objc_claimAutoreleasedReturnValue();
    v25 = 138543618;
    v26 = v21;
    v27 = 2112;
    v28 = v22;
    _os_log_impl(&dword_2218F0000, v20, OS_LOG_TYPE_INFO, "%{public}@Remaining pending data sync acks %@", (uint8_t *)&v25, 0x16u);

  }
  objc_autoreleasePoolPop(v19);
  -[HMDHomeManager pendingDataSyncAcks](self, "pendingDataSyncAcks");
  v23 = (void *)objc_claimAutoreleasedReturnValue();
  v24 = +[HMDPersistentStore archiveIDSDataSyncJournal:](HMDPersistentStore, "archiveIDSDataSyncJournal:", v23);

}

- (void)dataSyncInProgressUpdatedNotification:(id)a3
{
  id v4;
  NSObject *v5;
  id v6;
  _QWORD v7[4];
  id v8;
  HMDHomeManager *v9;

  v4 = a3;
  -[HMDHomeManager workQueue](self, "workQueue");
  v5 = objc_claimAutoreleasedReturnValue();
  v7[0] = MEMORY[0x24BDAC760];
  v7[1] = 3221225472;
  v7[2] = __56__HMDHomeManager_dataSyncInProgressUpdatedNotification___block_invoke;
  v7[3] = &unk_24E79C268;
  v8 = v4;
  v9 = self;
  v6 = v4;
  dispatch_async(v5, v7);

}

- (void)postFinishSetupForCurrentAccessoryFollowUpIfNeeded
{
  NSObject *v3;
  void *v4;
  void *v5;
  id v6;
  void *v7;
  id v8;
  _QWORD v9[4];
  id v10;
  id location;

  -[HMDHomeManager workQueue](self, "workQueue");
  v3 = objc_claimAutoreleasedReturnValue();
  dispatch_assert_queue_V2(v3);

  if (isAppleTV())
  {
    if (-[HMDHomeManager startupHasCompleted](self, "startupHasCompleted"))
    {
      if (-[HMDHomeManager initialPCSStatusFetchCompleted](self, "initialPCSStatusFetchCompleted"))
      {
        if (-[HMDHomeManager shouldClearDeviceSetupFollowUp](self, "shouldClearDeviceSetupFollowUp"))
        {
          +[HMDDeviceSetupManager sharedManager](HMDDeviceSetupManager, "sharedManager");
          v8 = (id)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v8, "followUpManager");
          v4 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v4, "stopAdvertising:", 1);
LABEL_10:

          return;
        }
        -[HMDHomeManager lastRemovedCurrentAccessoryUUID](self, "lastRemovedCurrentAccessoryUUID");
        v7 = (void *)objc_claimAutoreleasedReturnValue();

        if (!v7)
        {
          +[HMDDeviceSetupManager sharedManager](HMDDeviceSetupManager, "sharedManager");
          v8 = (id)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v8, "followUpManager");
          v4 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v4, "startAdvertising:", 1);
          goto LABEL_10;
        }
      }
    }
    else
    {
      objc_initWeak(&location, self);
      -[HMDHomeManager startupCompleted](self, "startupCompleted");
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      v9[0] = MEMORY[0x24BDAC760];
      v9[1] = 3221225472;
      v9[2] = __68__HMDHomeManager_postFinishSetupForCurrentAccessoryFollowUpIfNeeded__block_invoke;
      v9[3] = &unk_24E796128;
      objc_copyWeak(&v10, &location);
      v6 = (id)objc_msgSend(v5, "then:", v9);

      objc_destroyWeak(&v10);
      objc_destroyWeak(&location);
    }
  }
}

- (BOOL)shouldClearDeviceSetupFollowUp
{
  void *v3;
  BOOL v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;

  -[HMDHomeManager currentAccessoryUUID](self, "currentAccessoryUUID");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  if (v3)
  {
    v4 = 1;
  }
  else
  {
    -[HMDHomeManager lastRemovedCurrentAccessoryUUID](self, "lastRemovedCurrentAccessoryUUID");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    if (v5)
    {
      v4 = 1;
    }
    else
    {
      -[HMDHomeManager appleAccountManager](self, "appleAccountManager");
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v6, "device");
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      if (v7
        && -[HMDHomeManager deviceAccountHasSettled](self, "deviceAccountHasSettled")
        && -[HMDHomeManager firstCloudKitImportComplete](self, "firstCloudKitImportComplete")
        && -[HMDHomeManager hasManatee](self, "hasManatee"))
      {
        -[HMDHomeManager appleAccountManager](self, "appleAccountManager");
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v8, "accountContext");
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        v4 = v9 == 0;

      }
      else
      {
        v4 = 1;
      }

    }
  }

  return v4;
}

- (BOOL)isDataSyncInProgress
{
  return -[HMDHomeManager isDataSyncInProgressWithMessage:](self, "isDataSyncInProgressWithMessage:", 0);
}

- (BOOL)isDataSyncInProgressWithMessage:(id)a3
{
  return -[HMDHomeManager dataSyncInProgressWithState:withMessage:](self, "dataSyncInProgressWithState:withMessage:", 0, a3);
}

- (BOOL)isAccessAllowedWhenLocked
{
  HMDHomeManager *v2;
  os_unfair_lock_s *p_lock;

  v2 = self;
  p_lock = &self->_lock;
  os_unfair_lock_lock_with_options();
  LOBYTE(v2) = v2->_accessAllowedWhenLocked;
  os_unfair_lock_unlock(p_lock);
  return (char)v2;
}

- (void)setAccessAllowedWhenLocked:(BOOL)a3
{
  os_unfair_lock_s *p_lock;

  p_lock = &self->_lock;
  os_unfair_lock_lock_with_options();
  self->_accessAllowedWhenLocked = a3;
  os_unfair_lock_unlock(p_lock);
}

- (unint64_t)generationCounter
{
  os_unfair_lock_s *p_lock;
  unint64_t generationCounter;

  p_lock = &self->_lock;
  os_unfair_lock_lock_with_options();
  generationCounter = self->_generationCounter;
  os_unfair_lock_unlock(p_lock);
  return generationCounter;
}

- (void)setGenerationCounter:(unint64_t)a3
{
  os_unfair_lock_s *p_lock;

  p_lock = &self->_lock;
  os_unfair_lock_lock_with_options();
  self->_generationCounter = a3;
  os_unfair_lock_unlock(p_lock);
}

- (BOOL)_shouldNotifyClientsAboutGenerationCounterUpdate
{
  return 1;
}

- (void)updateGenerationCounterWithReason:(id)a3 sourceUUID:(id)a4 shouldNotifyClients:(BOOL)a5
{
  id v8;
  id v9;
  NSObject *v10;
  id v11;
  id v12;
  _QWORD v13[5];
  id v14;
  id v15;
  BOOL v16;

  v8 = a3;
  v9 = a4;
  -[HMDHomeManager workQueue](self, "workQueue");
  v10 = objc_claimAutoreleasedReturnValue();
  v13[0] = MEMORY[0x24BDAC760];
  v13[1] = 3221225472;
  v13[2] = __83__HMDHomeManager_updateGenerationCounterWithReason_sourceUUID_shouldNotifyClients___block_invoke;
  v13[3] = &unk_24E796150;
  v13[4] = self;
  v14 = v8;
  v15 = v9;
  v16 = a5;
  v11 = v9;
  v12 = v8;
  dispatch_async(v10, v13);

}

- (void)_updateGenerationCounterWithReason:(id)a3 sourceUUID:(id)a4 shouldNotifyClients:(BOOL)a5
{
  _BOOL4 v5;
  id v8;
  id v9;
  NSObject *v10;
  void *v11;
  HMDHomeManager *v12;
  NSObject *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  HMDHomeManager *v19;
  NSObject *v20;
  void *v21;
  void *v22;
  HMDIncrementGenerationCounterLogEvent *v23;
  void *v24;
  int v25;
  void *v26;
  __int16 v27;
  uint64_t v28;
  __int16 v29;
  _BOOL4 v30;
  __int16 v31;
  id v32;
  __int16 v33;
  id v34;
  uint64_t v35;

  v5 = a5;
  v35 = *MEMORY[0x24BDAC8D0];
  v8 = a3;
  v9 = a4;
  -[HMDHomeManager workQueue](self, "workQueue");
  v10 = objc_claimAutoreleasedReturnValue();
  dispatch_assert_queue_V2(v10);

  v11 = (void *)MEMORY[0x227676638]();
  v12 = self;
  HMFGetOSLogHandle();
  v13 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    v25 = 138544386;
    v26 = v14;
    v27 = 2048;
    v28 = -[HMDHomeManager generationCounter](v12, "generationCounter") + 1;
    v29 = 1024;
    v30 = v5;
    v31 = 2114;
    v32 = v8;
    v33 = 2114;
    v34 = v9;
    _os_log_impl(&dword_2218F0000, v13, OS_LOG_TYPE_INFO, "%{public}@Updating generation counter to %llu (shouldNotifyClients is %d): %{public}@-%{public}@", (uint8_t *)&v25, 0x30u);

  }
  objc_autoreleasePoolPop(v11);
  -[HMDHomeManager setGenerationCounter:](v12, "setGenerationCounter:", -[HMDHomeManager generationCounter](v12, "generationCounter") + 1);
  -[HMDHomeManager userDefaults](v12, "userDefaults");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v15, "setInteger:forKey:", -[HMDHomeManager generationCounter](v12, "generationCounter"), CFSTR("HMDHomeManagerGenerationCounter"));

  if (-[HMDHomeManager generationCounterToken](v12, "generationCounterToken") != -1
    && -[HMDHomeManager _shouldNotifyClientsAboutGenerationCounterUpdate](v12, "_shouldNotifyClientsAboutGenerationCounterUpdate"))
  {
    -[HMDHomeManager darwinNotificationProvider](v12, "darwinNotificationProvider");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v16, "notifySetState:state:", -[HMDHomeManager generationCounterToken](v12, "generationCounterToken"), -[HMDHomeManager generationCounter](v12, "generationCounter"));

    -[HMDHomeManager darwinNotificationProvider](v12, "darwinNotificationProvider");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v17, "notifyPost:", *MEMORY[0x24BDD5FC0]);

  }
  if (-[HMDHomeManager postSyncDataUpdatedNotification](v12, "postSyncDataUpdatedNotification"))
  {
    v18 = (void *)MEMORY[0x227676638](-[HMDHomeManager setPostSyncDataUpdatedNotification:](v12, "setPostSyncDataUpdatedNotification:", 0));
    v19 = v12;
    HMFGetOSLogHandle();
    v20 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v20, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      v25 = 138543362;
      v26 = v21;
      _os_log_impl(&dword_2218F0000, v20, OS_LOG_TYPE_INFO, "%{public}@Posting sync data updated notification after updating generation counter", (uint8_t *)&v25, 0xCu);

    }
    objc_autoreleasePoolPop(v18);
    notify_post((const char *)*MEMORY[0x24BDD5330]);
  }
  -[HMDHomeManager logEventSubmitter](v12, "logEventSubmitter");
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  v23 = objc_alloc_init(HMDIncrementGenerationCounterLogEvent);
  objc_msgSend(v22, "submitLogEvent:", v23);

  if (v5)
  {
    -[HMDHomeManager debounceHomesUpdateTimer](v12, "debounceHomesUpdateTimer");
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v24, "resume");

  }
}

- (void)_notifyXPCClientsOfHomeConfigurationChange
{
  NSObject *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  HMDNotifyXPCClientsOfHomeConfigurationChangeLogEvent *v8;
  id v9;

  -[HMDHomeManager workQueue](self, "workQueue");
  v3 = objc_claimAutoreleasedReturnValue();
  dispatch_assert_queue_V2(v3);

  -[HMDHomeManager _updatePreferencesAndPostNotificationIfNecessary](self, "_updatePreferencesAndPostNotificationIfNecessary");
  if (-[HMDHomeManager _shouldNotifyClientsAboutGenerationCounterUpdate](self, "_shouldNotifyClientsAboutGenerationCounterUpdate"))
  {
    v4 = (void *)MEMORY[0x24BE3F1B0];
    -[HMDHomeManager messageDestination](self, "messageDestination");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "messageWithName:qualityOfService:destination:payload:", CFSTR("kHomesDidUpdateNotificationKey"), 9, v5, 0);
    v9 = (id)objc_claimAutoreleasedReturnValue();

    -[HMDHomeManager messageDispatcher](self, "messageDispatcher");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "sendMessage:", v9);

    -[HMDHomeManager logEventSubmitter](self, "logEventSubmitter");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = objc_alloc_init(HMDNotifyXPCClientsOfHomeConfigurationChangeLogEvent);
    objc_msgSend(v7, "submitLogEvent:", v8);

    -[HMDHomeManager _notifyMetricsManagerOfConfigurationChange](self, "_notifyMetricsManagerOfConfigurationChange");
    logAndPostNotification(CFSTR("HMDHomeManagerNotifiedXPCClientsOfHomeConfigurationChangeNotification"), self, 0);

  }
}

- (void)notifyClientsOfUserSettingsChangeWithReason:(id)a3 sourceUUID:(id)a4
{
  void *v6;
  id v7;
  void *v8;
  id v9;

  v6 = (void *)MEMORY[0x24BDD16D0];
  v7 = a4;
  v9 = a3;
  objc_msgSend(v6, "defaultCenter");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "postNotificationName:object:", CFSTR("HMDUserSettingsUpdatedNotificationKey"), 0);

  -[HMDHomeManager updateGenerationCounterWithReason:sourceUUID:shouldNotifyClients:](self, "updateGenerationCounterWithReason:sourceUUID:shouldNotifyClients:", v9, v7, 1);
}

- (void)sendUserAdded:(id)a3 destination:(id)a4 toHome:(id)a5
{
  id v8;
  id v9;
  id v10;
  NSObject *v11;
  id v12;
  id v13;
  id v14;
  _QWORD block[4];
  id v16;
  id v17;
  id v18;
  id v19;
  id location;

  v8 = a3;
  v9 = a4;
  v10 = a5;
  objc_initWeak(&location, self);
  -[HMDHomeManager workQueue](self, "workQueue");
  v11 = objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x24BDAC760];
  block[1] = 3221225472;
  block[2] = __51__HMDHomeManager_sendUserAdded_destination_toHome___block_invoke;
  block[3] = &unk_24E798328;
  objc_copyWeak(&v19, &location);
  v16 = v8;
  v17 = v9;
  v18 = v10;
  v12 = v10;
  v13 = v9;
  v14 = v8;
  dispatch_async(v11, block);

  objc_destroyWeak(&v19);
  objc_destroyWeak(&location);
}

- (void)sendUserRemoved:(id)a3 fromHome:(id)a4 pairingUsername:(id)a5 pushToCloud:(BOOL)a6 completionHandler:(id)a7
{
  id v12;
  id v13;
  id v14;
  id v15;
  NSObject *v16;
  id v17;
  id v18;
  id v19;
  id v20;
  _QWORD block[4];
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  BOOL v27;
  id location;

  v12 = a3;
  v13 = a4;
  v14 = a5;
  v15 = a7;
  objc_initWeak(&location, self);
  -[HMDHomeManager workQueue](self, "workQueue");
  v16 = objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x24BDAC760];
  block[1] = 3221225472;
  block[2] = __89__HMDHomeManager_sendUserRemoved_fromHome_pairingUsername_pushToCloud_completionHandler___block_invoke;
  block[3] = &unk_24E796178;
  objc_copyWeak(&v26, &location);
  v22 = v12;
  v23 = v13;
  v27 = a6;
  v24 = v14;
  v25 = v15;
  v17 = v15;
  v18 = v14;
  v19 = v13;
  v20 = v12;
  dispatch_async(v16, block);

  objc_destroyWeak(&v26);
  objc_destroyWeak(&location);
}

- (void)electDeviceForUser:(id)a3 destination:(id)a4 deviceCapabilities:(id)a5 queue:(id)a6 completionHandler:(id)a7
{
  -[HMDHomeManager electDeviceForUser:destination:deviceCapabilities:responseTimeout:queue:completionHandler:](self, "electDeviceForUser:destination:deviceCapabilities:responseTimeout:queue:completionHandler:", a3, a4, a5, a6, a7, 0.0);
}

- (void)electDeviceForHH1User:(id)a3 destination:(id)a4 deviceCapabilities:(id)a5 queue:(id)a6 completionHandler:(id)a7
{
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;

  v12 = a7;
  v13 = a6;
  v14 = a5;
  v15 = a4;
  v16 = a3;
  -[HMDHomeManager messageDispatcher](self, "messageDispatcher");
  v17 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v17, "electDeviceForHH1User:destination:deviceCapabilities:responseTimeout:responseQueue:responseHandler:", v16, v15, v14, v13, v12, 0.0);

}

- (void)electDeviceForUser:(id)a3 destination:(id)a4 deviceCapabilities:(id)a5 responseTimeout:(double)a6 queue:(id)a7 completionHandler:(id)a8
{
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;

  v14 = a8;
  v15 = a7;
  v16 = a5;
  v17 = a4;
  v18 = a3;
  -[HMDHomeManager userDeviceCapabilitiesRequestManager](self, "userDeviceCapabilitiesRequestManager");
  v19 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v19, "electDeviceForUserID:destination:deviceCapabilities:responseTimeout:responseQueue:completionHandler:", v18, v17, v16, v15, v14, a6);

}

- (void)sendSecureMessage:(id)a3 target:(id)a4 userID:(id)a5 destination:(id)a6 responseQueue:(id)a7 responseHandler:(id)a8
{
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;

  v14 = a8;
  v15 = a7;
  v16 = a6;
  v17 = a5;
  v18 = a4;
  v19 = a3;
  -[HMDHomeManager messageDispatcher](self, "messageDispatcher");
  v20 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v20, "sendSecureMessage:target:userID:destination:responseQueue:responseHandler:", v19, v18, v17, v16, v15, v14);

}

- (void)sendUnsecureMessage:(id)a3 target:(id)a4 userID:(id)a5 responseQueue:(id)a6 responseHandler:(id)a7
{
  id v12;
  id v13;
  id v14;
  void *v15;
  void *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(uint64_t, void *, void *);
  void *v21;
  id v22;
  id v23;

  v12 = a3;
  v13 = a6;
  v14 = a7;
  +[HMDMessageDispatcher destinationWithTarget:userID:destination:multicast:](HMDMessageDispatcher, "destinationWithTarget:userID:destination:multicast:", a4, a5, 0, 1);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v12, "setDestination:", v15);
  objc_msgSend(v12, "responseHandler");
  v16 = (void *)objc_claimAutoreleasedReturnValue();

  if (v14 && !v16)
  {
    v18 = MEMORY[0x24BDAC760];
    v19 = 3221225472;
    v20 = __82__HMDHomeManager_sendUnsecureMessage_target_userID_responseQueue_responseHandler___block_invoke;
    v21 = &unk_24E7961A0;
    v22 = v13;
    v23 = v14;
    objc_msgSend(v12, "setResponseHandler:", &v18);

  }
  -[HMDHomeManager messageDispatcher](self, "messageDispatcher", v18, v19, v20, v21);
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v17, "sendMessage:completionHandler:", v12, 0);

}

- (NSUUID)currentHomeUUIDOverride
{
  os_unfair_lock_s *p_lock;
  NSUUID *v4;

  p_lock = &self->_lock;
  os_unfair_lock_lock_with_options();
  v4 = self->_currentHomeUUIDOverride;
  os_unfair_lock_unlock(p_lock);
  return v4;
}

- (void)setCurrentHomeUUIDOverride:(id)a3
{
  NSUUID *v4;
  NSUUID *currentHomeUUIDOverride;

  v4 = (NSUUID *)a3;
  os_unfair_lock_lock_with_options();
  currentHomeUUIDOverride = self->_currentHomeUUIDOverride;
  self->_currentHomeUUIDOverride = v4;

  os_unfair_lock_unlock(&self->_lock);
}

- (HMFBoolean)overrideCurrentHomeUUIDToNil
{
  os_unfair_lock_s *p_lock;
  HMFBoolean *v4;

  p_lock = &self->_lock;
  os_unfair_lock_lock_with_options();
  v4 = self->_overrideCurrentHomeUUIDToNil;
  os_unfair_lock_unlock(p_lock);
  return v4;
}

- (void)setOverrideCurrentHomeUUIDToNil:(id)a3
{
  HMFBoolean *v4;
  HMFBoolean *overrideCurrentHomeUUIDToNil;

  v4 = (HMFBoolean *)a3;
  os_unfair_lock_lock_with_options();
  overrideCurrentHomeUUIDToNil = self->_overrideCurrentHomeUUIDToNil;
  self->_overrideCurrentHomeUUIDToNil = v4;

  os_unfair_lock_unlock(&self->_lock);
}

- (NSUUID)currentHomeUUID
{
  os_unfair_lock_s *p_lock;
  NSUUID *v4;

  p_lock = &self->_lock;
  os_unfair_lock_lock_with_options();
  v4 = self->_currentHomeUUID;
  os_unfair_lock_unlock(p_lock);
  return v4;
}

- (void)setCurrentHomeUUID:(id)a3
{
  HMFBoolean *overrideCurrentHomeUUIDToNil;
  NSUUID *currentHomeUUIDOverride;
  NSUUID *v6;
  NSUUID *currentHomeUUID;
  NSUUID *v8;

  v8 = (NSUUID *)a3;
  os_unfair_lock_lock_with_options();
  overrideCurrentHomeUUIDToNil = self->_overrideCurrentHomeUUIDToNil;
  currentHomeUUIDOverride = v8;
  if (overrideCurrentHomeUUIDToNil)
  {
    if ((-[HMFBoolean BOOLValue](overrideCurrentHomeUUIDToNil, "BOOLValue") & 1) != 0)
      currentHomeUUIDOverride = 0;
    else
      currentHomeUUIDOverride = self->_currentHomeUUIDOverride;
  }
  v6 = currentHomeUUIDOverride;
  currentHomeUUID = self->_currentHomeUUID;
  self->_currentHomeUUID = v6;

  os_unfair_lock_unlock(&self->_lock);
}

- (void)setHomes:(id)a3
{
  NSMutableArray *v4;
  NSMutableArray *homes;
  id v6;

  v6 = a3;
  os_unfair_lock_lock_with_options();
  v4 = (NSMutableArray *)objc_msgSend(v6, "mutableCopy");
  homes = self->_homes;
  self->_homes = v4;

  os_unfair_lock_unlock(&self->_lock);
}

- (void)addHome:(id)a3
{
  id v4;

  v4 = a3;
  os_unfair_lock_lock_with_options();
  -[NSMutableArray addObject:](self->_homes, "addObject:", v4);
  os_unfair_lock_unlock(&self->_lock);

}

- (void)removeHome:(id)a3
{
  id v4;

  v4 = a3;
  os_unfair_lock_lock_with_options();
  -[NSMutableArray removeObject:](self->_homes, "removeObject:", v4);
  os_unfair_lock_unlock(&self->_lock);

}

- (void)_trackRemovedHomeUserMergeId:(id)a3
{
  id v4;
  os_unfair_lock_s *p_lock;
  void *v6;
  HMDHomeManager *v7;
  NSObject *v8;
  void *v9;
  int v10;
  void *v11;
  __int16 v12;
  id v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  v4 = a3;
  p_lock = &self->_lock;
  os_unfair_lock_lock_with_options();
  if (v4
    && (-[NSMutableSet containsObject:](self->_mergeIDsOfUsersOfRemovedSharedHomes, "containsObject:", v4) & 1) == 0)
  {
    v6 = (void *)MEMORY[0x227676638](-[NSMutableSet addObject:](self->_mergeIDsOfUsersOfRemovedSharedHomes, "addObject:", v4));
    v7 = self;
    HMFGetOSLogHandle();
    v8 = (id)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      v10 = 138543618;
      v11 = v9;
      v12 = 2112;
      v13 = v4;
      _os_log_impl(&dword_2218F0000, v8, OS_LOG_TYPE_INFO, "%{public}@Adding user with mergeID %@ to mergeID of homes removed locally", (uint8_t *)&v10, 0x16u);

    }
    objc_autoreleasePoolPop(v6);
  }
  os_unfair_lock_unlock(p_lock);

}

- (void)_stopTrackingRemovedHomeUserMergeId:(id)a3
{
  id v4;
  os_unfair_lock_s *p_lock;
  void *v6;
  HMDHomeManager *v7;
  NSObject *v8;
  void *v9;
  int v10;
  void *v11;
  __int16 v12;
  id v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  v4 = a3;
  p_lock = &self->_lock;
  os_unfair_lock_lock_with_options();
  if (v4
    && -[NSMutableSet containsObject:](self->_mergeIDsOfUsersOfRemovedSharedHomes, "containsObject:", v4))
  {
    v6 = (void *)MEMORY[0x227676638](-[NSMutableSet removeObject:](self->_mergeIDsOfUsersOfRemovedSharedHomes, "removeObject:", v4));
    v7 = self;
    HMFGetOSLogHandle();
    v8 = (id)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      v10 = 138543618;
      v11 = v9;
      v12 = 2112;
      v13 = v4;
      _os_log_impl(&dword_2218F0000, v8, OS_LOG_TYPE_INFO, "%{public}@Removing user with mergeID %@ from list of mergeIDs of homes removed locally", (uint8_t *)&v10, 0x16u);

    }
    objc_autoreleasePoolPop(v6);
  }
  os_unfair_lock_unlock(p_lock);

}

- (void)_handleQueryHomeNamespace:(id)a3
{
  id v4;
  void *v5;
  unint64_t v6;
  void *v7;
  HMDHomeManager *v8;
  NSObject *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  void *v13;
  HMDHomeManager *v14;
  NSObject *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  uint64_t v20;
  void *v21;
  HMDHomeManager *v22;
  NSObject *v23;
  void *v24;
  void *v25;
  BOOL v26;
  id v27;
  void *v28;
  HMDHomeManager *v29;
  NSObject *v30;
  void *v31;
  id v32;
  uint8_t buf[4];
  void *v34;
  __int16 v35;
  id v36;
  __int16 v37;
  void *v38;
  uint64_t v39;

  v39 = *MEMORY[0x24BDAC8D0];
  v4 = a3;
  objc_msgSend(v4, "stringForKey:", *MEMORY[0x24BDD60C8]);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v5)
  {
    v13 = (void *)MEMORY[0x227676638]();
    v14 = self;
    HMFGetOSLogHandle();
    v15 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "messagePayload");
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v34 = v16;
      v35 = 2112;
      v36 = v17;
      _os_log_impl(&dword_2218F0000, v15, OS_LOG_TYPE_ERROR, "%{public}@No name found in query home namespace message payload: %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v13);
    v11 = (void *)MEMORY[0x24BDD1540];
    v12 = 20;
    goto LABEL_9;
  }
  v6 = HMMaxLengthForNaming();
  if (objc_msgSend(v5, "length") > v6)
  {
    v7 = (void *)MEMORY[0x227676638]();
    v8 = self;
    HMFGetOSLogHandle();
    v9 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v34 = v10;
      _os_log_impl(&dword_2218F0000, v9, OS_LOG_TYPE_ERROR, "%{public}@New name is longer than the pre-defined max length", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v7);
    v11 = (void *)MEMORY[0x24BDD1540];
    v12 = 46;
LABEL_9:
    objc_msgSend(v11, "hmErrorWithCode:", v12);
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "respondWithError:", v18);
    goto LABEL_18;
  }
  objc_msgSend(v4, "numberForKey:", *MEMORY[0x24BDD6060]);
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  v20 = objc_msgSend(v19, "unsignedIntegerValue");

  objc_msgSend(v4, "uuidForKey:", CFSTR("kHomeUUID"));
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  v21 = (void *)MEMORY[0x227676638]();
  v22 = self;
  HMFGetOSLogHandle();
  v23 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v23, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    HMHomeManagerNameValidationOptionsToString();
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543874;
    v34 = v24;
    v35 = 2112;
    v36 = v18;
    v37 = 2112;
    v38 = v25;
    _os_log_impl(&dword_2218F0000, v23, OS_LOG_TYPE_INFO, "%{public}@Validating name for home UUID %@ with options: %@", buf, 0x20u);

  }
  objc_autoreleasePoolPop(v21);
  v32 = 0;
  v26 = -[HMDHomeManager checkConflictInHomeNamespaceWithName:options:namespaceUUID:error:](v22, "checkConflictInHomeNamespaceWithName:options:namespaceUUID:error:", v5, v20, v18, &v32);
  v27 = v32;
  if (v26)
  {
    objc_msgSend(v4, "respondWithSuccess");
  }
  else
  {
    v28 = (void *)MEMORY[0x227676638]();
    v29 = v22;
    HMFGetOSLogHandle();
    v30 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v31 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v34 = v31;
      v35 = 2112;
      v36 = v27;
      _os_log_impl(&dword_2218F0000, v30, OS_LOG_TYPE_ERROR, "%{public}@Name validation failed: %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v28);
    objc_msgSend(v4, "respondWithError:", v27);
  }

LABEL_18:
}

- (BOOL)checkConflictInHomeNamespaceWithName:(id)a3 options:(unint64_t)a4 namespaceUUID:(id)a5 error:(id *)a6
{
  char v8;
  id v10;
  id v11;
  id v12;
  void *v13;
  void *v14;
  BOOL v15;
  void *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t i;
  void *v22;
  void *v23;
  uint64_t v24;
  void *v25;
  void *v26;
  id v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  _BYTE v33[128];
  uint64_t v34;

  v8 = a4;
  v34 = *MEMORY[0x24BDAC8D0];
  v10 = a3;
  v11 = a5;
  v12 = objc_alloc_init(MEMORY[0x24BDBCEB8]);
  if ((v8 & 0xD) != 0)
  {
    if ((v8 & 1) == 0
      || (-[HMDHomeManager nameValidator](self, "nameValidator"),
          v13 = (void *)objc_claimAutoreleasedReturnValue(),
          objc_msgSend(v13, "validateName:", v10),
          v14 = (void *)objc_claimAutoreleasedReturnValue(),
          v13,
          !v14))
    {
      if (v11)
      {
        objc_msgSend(v12, "addObject:", v11);
        if ((v8 & 4) == 0)
          goto LABEL_26;
      }
      else if ((v8 & 2) != 0)
      {
        v28 = v10;
        v31 = 0u;
        v32 = 0u;
        v29 = 0u;
        v30 = 0u;
        -[HMDHomeManager homes](self, "homes");
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        v18 = objc_msgSend(v17, "countByEnumeratingWithState:objects:count:", &v29, v33, 16);
        if (v18)
        {
          v19 = v18;
          v20 = *(_QWORD *)v30;
          do
          {
            for (i = 0; i != v19; ++i)
            {
              if (*(_QWORD *)v30 != v20)
                objc_enumerationMutation(v17);
              objc_msgSend(*(id *)(*((_QWORD *)&v29 + 1) + 8 * i), "uuid");
              v22 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v12, "addObject:", v22);

            }
            v19 = objc_msgSend(v17, "countByEnumeratingWithState:objects:count:", &v29, v33, 16);
          }
          while (v19);
        }

        v10 = v28;
        if ((v8 & 4) == 0)
          goto LABEL_26;
        -[HMDHomeManager uuid](self, "uuid");
        v23 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v12, "addObject:", v23);

      }
      else
      {
        -[HMDHomeManager uuid](self, "uuid");
        v16 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v12, "addObject:", v16);

        if ((v8 & 4) == 0)
        {
LABEL_26:
          if ((v8 & 8) == 0
            || (-[HMDHomeManager _checkActionSetNameConflict:withNamespaceUUIDs:](self, "_checkActionSetNameConflict:withNamespaceUUIDs:", v10, v12), (v25 = (void *)objc_claimAutoreleasedReturnValue()) == 0))
          {
            v15 = 1;
            goto LABEL_33;
          }
          v26 = v25;
          if (a6)
            *a6 = objc_retainAutorelease(v25);

          goto LABEL_31;
        }
      }
      -[HMDHomeManager _checkNameConflict:withNamespaceUUIDs:](self, "_checkNameConflict:withNamespaceUUIDs:", v10, v12);
      v24 = objc_claimAutoreleasedReturnValue();
      if (!v24)
        goto LABEL_26;
      v14 = (void *)v24;
    }
    if (a6)
      *a6 = objc_retainAutorelease(v14);

LABEL_31:
    v15 = 0;
    goto LABEL_33;
  }
  if (!a6)
    goto LABEL_31;
  objc_msgSend(MEMORY[0x24BDD1540], "hmErrorWithCode:", 3);
  v15 = 0;
  *a6 = (id)objc_claimAutoreleasedReturnValue();
LABEL_33:

  return v15;
}

- (id)_homeWithName:(id)a3
{
  id v4;
  void *v5;
  id v6;
  void *v7;
  _QWORD v9[4];
  id v10;

  v4 = a3;
  -[HMDHomeManager homes](self, "homes");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v9[0] = MEMORY[0x24BDAC760];
  v9[1] = 3221225472;
  v9[2] = __32__HMDHomeManager__homeWithName___block_invoke;
  v9[3] = &unk_24E7961C8;
  v10 = v4;
  v6 = v4;
  objc_msgSend(v5, "hmf_objectPassingTest:", v9);
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  return v7;
}

- (id)_homesWithName:(id)a3
{
  id v4;
  void *v5;
  id v6;
  void *v7;
  _QWORD v9[4];
  id v10;

  v4 = a3;
  -[HMDHomeManager homes](self, "homes");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v9[0] = MEMORY[0x24BDAC760];
  v9[1] = 3221225472;
  v9[2] = __33__HMDHomeManager__homesWithName___block_invoke;
  v9[3] = &unk_24E7961C8;
  v10 = v4;
  v6 = v4;
  objc_msgSend(v5, "hmf_objectsPassingTest:", v9);
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  return v7;
}

- (id)_homeWithUUID:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  _QWORD v8[4];
  id v9;

  v4 = a3;
  if (v4)
  {
    -[HMDHomeManager homes](self, "homes");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v8[0] = MEMORY[0x24BDAC760];
    v8[1] = 3221225472;
    v8[2] = __32__HMDHomeManager__homeWithUUID___block_invoke;
    v8[3] = &unk_24E7961C8;
    v9 = v4;
    objc_msgSend(v5, "hmf_objectPassingTest:", v8);
    v6 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v6 = 0;
  }

  return v6;
}

- (id)_homeWithUniqueIdentifier:(id)a3 forClientIdentifierSalt:(id)a4
{
  id v6;
  id v7;
  void *v8;
  id v9;
  id v10;
  void *v11;
  _QWORD v13[4];
  id v14;
  id v15;

  v6 = a3;
  v7 = a4;
  -[HMDHomeManager homes](self, "homes");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v13[0] = MEMORY[0x24BDAC760];
  v13[1] = 3221225472;
  v13[2] = __68__HMDHomeManager__homeWithUniqueIdentifier_forClientIdentifierSalt___block_invoke;
  v13[3] = &unk_24E7961F0;
  v14 = v7;
  v15 = v6;
  v9 = v6;
  v10 = v7;
  objc_msgSend(v8, "na_firstObjectPassingTest:", v13);
  v11 = (void *)objc_claimAutoreleasedReturnValue();

  return v11;
}

- (id)_homeWithAssistantIdentifier:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  _QWORD v8[4];
  id v9;

  v4 = a3;
  if (v4)
  {
    -[HMDHomeManager homes](self, "homes");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v8[0] = MEMORY[0x24BDAC760];
    v8[1] = 3221225472;
    v8[2] = __47__HMDHomeManager__homeWithAssistantIdentifier___block_invoke;
    v8[3] = &unk_24E7961C8;
    v9 = v4;
    objc_msgSend(v5, "hmf_objectPassingTest:", v8);
    v6 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v6 = 0;
  }

  return v6;
}

- (id)_homeWithZoneID:(id)a3
{
  id v4;
  void *v5;
  void *v6;

  v4 = a3;
  -[HMDHomeManager homes](self, "homes");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "hmf_firstObjectWithZoneID:", v4);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  return v6;
}

- (id)_zoneInformationWithUUID:(id)a3
{
  id v4;
  void *v5;
  void *v6;

  v4 = a3;
  -[HMDHomeManager cloudZones](self, "cloudZones");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "hmf_firstObjectWithUUID:", v4);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  return v6;
}

- (id)_homeFromEventIdentifier:(id)a3
{
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  objc_msgSend(a3, "componentsSeparatedByString:", CFSTR("/"));
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "firstObject");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = (void *)objc_msgSend(objc_alloc(MEMORY[0x24BDD1880]), "initWithUUIDString:", v5);
  -[HMDHomeManager _homeWithUUID:](self, "_homeWithUUID:", v6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  return v7;
}

- (id)addName:(id)a3 namespace:(id)a4
{
  id v6;
  id v7;
  void *v8;
  void *v9;

  v6 = a4;
  v7 = a3;
  -[HMDHomeManager nameValidator](self, "nameValidator");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "addName:namespace:", v7, v6);
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  return v9;
}

- (id)removeName:(id)a3 namespace:(id)a4
{
  id v6;
  id v7;
  void *v8;
  void *v9;

  v6 = a4;
  v7 = a3;
  -[HMDHomeManager nameValidator](self, "nameValidator");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "removeName:namespace:", v7, v6);
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  return v9;
}

- (id)replaceName:(id)a3 withNewName:(id)a4 inNamespaces:(id)a5
{
  id v8;
  id v9;
  id v10;
  void *v11;
  void *v12;

  v8 = a5;
  v9 = a4;
  v10 = a3;
  -[HMDHomeManager nameValidator](self, "nameValidator");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "replaceName:withNewName:inNamespaces:", v10, v9, v8);
  v12 = (void *)objc_claimAutoreleasedReturnValue();

  return v12;
}

- (void)_setHomeConfigurationKey:(id)a3 value:(void *)a4 applicationIdentifier:(__CFString *)a5
{
  CFPreferencesSetAppValue((CFStringRef)a3, a4, a5);
  CFPreferencesAppSynchronize(a5);
}

- (void)_setHomeConfigurationKey:(id)a3 value:(void *)a4
{
  -[HMDHomeManager _setHomeConfigurationKey:value:applicationIdentifier:](self, "_setHomeConfigurationKey:value:applicationIdentifier:", a3, a4, CFSTR("com.apple.homed"));
}

- (BOOL)_updateHomesConfigured
{
  id v4;
  void *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  int v11;
  _QWORD *v12;
  void *v14;

  if (-[HMDHomeManager hasLoadedData](self, "hasLoadedData"))
  {
    v4 = objc_alloc(MEMORY[0x24BE3F138]);
    v5 = (void *)MEMORY[0x24BDD17C8];
    MEMORY[0x227675180](self, a2);
    v6 = objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "stringWithFormat:", CFSTR("%@, %s:%ld"), v6, "/Library/Caches/com.apple.xbs/Sources/HomeKit_executables/Sources/homed/HomeManager/HMDHomeManager.m", 8389);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BE3F138], "currentActivity");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v14 = (void *)objc_msgSend(v4, "initWithName:parent:", v7, v8);

    LODWORD(v6) = areHomesConfigured();
    -[HMDHomeManager homes](self, "homes");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v10 = objc_msgSend(v9, "count");

    v11 = v6 ^ (v10 != 0);
    if (v11 == 1)
    {
      v12 = (_QWORD *)MEMORY[0x24BDBD268];
      if (v10)
        v12 = (_QWORD *)MEMORY[0x24BDBD270];
      -[HMDHomeManager _setHomeConfigurationKey:value:](self, "_setHomeConfigurationKey:value:", *MEMORY[0x24BDD7CA8], *v12);
    }
    __HMFActivityScopeLeave();

  }
  else
  {
    LOBYTE(v11) = 0;
  }
  return v11;
}

- (BOOL)_updateIncomingInvitesPresent
{
  _BOOL4 v3;
  int v4;
  void *v5;
  uint64_t v6;
  void *v7;
  _QWORD *v8;

  v3 = -[HMDHomeManager hasLoadedData](self, "hasLoadedData");
  if (v3)
  {
    v4 = areIncomingInvitesPresent();
    -[HMDHomeManager incomingInvitations](self, "incomingInvitations");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = objc_msgSend(v5, "count");

    +[HMDBulletinBoard sharedBulletinBoard](HMDBulletinBoard, "sharedBulletinBoard");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "refreshHomeBadgeNumber");

    if (v4 == (v6 != 0))
    {
      LOBYTE(v3) = 0;
    }
    else
    {
      v8 = (_QWORD *)MEMORY[0x24BDBD268];
      if (v6)
        v8 = (_QWORD *)MEMORY[0x24BDBD270];
      -[HMDHomeManager _setHomeConfigurationKey:value:](self, "_setHomeConfigurationKey:value:", *MEMORY[0x24BDD7CB0], *v8);
      LOBYTE(v3) = 1;
    }
  }
  return v3;
}

- (void)updateHomeKitInUsePreferences
{
  BOOL v3;
  _BOOL4 v4;
  void *v5;
  HMDHomeManager *v6;
  NSObject *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  int v12;
  void *v13;
  __int16 v14;
  void *v15;
  __int16 v16;
  void *v17;
  __int16 v18;
  void *v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  if (-[HMDHomeManager hasLoadedData](self, "hasLoadedData"))
  {
    v3 = -[HMDHomeManager _updateIncomingInvitesPresent](self, "_updateIncomingInvitesPresent");
    v4 = -[HMDHomeManager _updateHomesConfigured](self, "_updateHomesConfigured");
    if (-[HMDHomeManager _updateAccessoriesConfigured](self, "_updateAccessoriesConfigured") || v3 || v4)
    {
      v5 = (void *)MEMORY[0x227676638]();
      v6 = self;
      HMFGetOSLogHandle();
      v7 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        HMFBooleanToString();
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        HMFBooleanToString();
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        HMFBooleanToString();
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        v12 = 138544130;
        v13 = v8;
        v14 = 2112;
        v15 = v9;
        v16 = 2112;
        v17 = v10;
        v18 = 2112;
        v19 = v11;
        _os_log_impl(&dword_2218F0000, v7, OS_LOG_TYPE_INFO, "%{public}@Posting preferences changed notification due to change in incomingInvites: %@  accessoriesConfigured: %@  homesConfigured: %@", (uint8_t *)&v12, 0x2Au);

      }
      objc_autoreleasePoolPop(v5);
      -[HMDHomeManager _postPreferencesChangedNotification](v6);
    }
  }
}

- (void)setHomePodsPresent:(BOOL)a3 inOwnedHomes:(BOOL)a4
{
  _BOOL8 v4;
  _BOOL8 v5;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  HMDHomeManager *v10;
  NSObject *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  uint64_t v16;
  _QWORD v17[6];
  uint8_t buf[4];
  void *v19;
  __int16 v20;
  void *v21;
  __int16 v22;
  void *v23;
  __int16 v24;
  void *v25;
  uint64_t v26;

  v4 = a4;
  v5 = a3;
  v26 = *MEMORY[0x24BDAC8D0];
  if (-[HMDHomeManager speakersAreConfigured](self, "speakersAreConfigured") != a3)
    -[HMDHomeManager setSpeakersAreConfigured:](self, "setSpeakersAreConfigured:", v5);
  if (+[HMDDeviceCapabilities supportsHomeApp](HMDDeviceCapabilities, "supportsHomeApp")
    && -[HMDHomeManager speakersAreConfiguredInOwnedHomes](self, "speakersAreConfiguredInOwnedHomes") != v4)
  {
    v7 = -[HMDHomeManager setSpeakersAreConfiguredInOwnedHomes:](self, "setSpeakersAreConfiguredInOwnedHomes:", v4);
    if (v4)
      v8 = 2;
    else
      v8 = 1;
    v9 = (void *)MEMORY[0x227676638](v7);
    v10 = self;
    HMFGetOSLogHandle();
    v11 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      IXStringForAppRemovability();
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      -[HMDHomeManager speakersAreConfiguredInOwnedHomes](v10, "speakersAreConfiguredInOwnedHomes");
      HMFBooleanToString();
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      HMFBooleanToString();
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138544130;
      v19 = v12;
      v20 = 2112;
      v21 = v13;
      v22 = 2112;
      v23 = v14;
      v24 = 2112;
      v25 = v15;
      _os_log_impl(&dword_2218F0000, v11, OS_LOG_TYPE_INFO, "%{public}@Setting Home app removability to %@ because HomePods present in owned homes changed from %@ -> %@", buf, 0x2Au);

    }
    objc_autoreleasePoolPop(v9);
    v16 = *MEMORY[0x24BDD5C70];
    v17[0] = MEMORY[0x24BDAC760];
    v17[1] = 3221225472;
    v17[2] = __50__HMDHomeManager_setHomePodsPresent_inOwnedHomes___block_invoke;
    v17[3] = &unk_24E79BC78;
    v17[4] = v10;
    v17[5] = v8;
    objc_msgSend(MEMORY[0x24BE51F70], "setRemovability:forAppWithBundleID:completion:", v8, v16, v17);
  }
}

- (void)_updatePreferencesAndPostNotificationIfNecessary
{
  if (-[HMDHomeManager _updateAccessoriesConfigured](self, "_updateAccessoriesConfigured"))
    -[HMDHomeManager _postPreferencesChangedNotification](self);
}

- (BOOL)_updateAccessoriesConfigured
{
  int v3;
  char v4;
  __objc2_class **p_superclass;
  __objc2_class **v6;
  __objc2_class_ro **p_info;
  uint64_t i;
  void *v9;
  uint64_t j;
  id v11;
  void *v12;
  id v13;
  id v14;
  void *v15;
  id v16;
  void *v17;
  void *v18;
  int v19;
  __objc2_class_ro **v20;
  __objc2_class **v21;
  __objc2_class **v22;
  int v23;
  int v24;
  id v25;
  void *v26;
  id v27;
  int v28;
  char v29;
  _QWORD *v30;
  _QWORD *v31;
  void *v32;
  HMDHomeManager *v33;
  NSObject *v34;
  void *v35;
  void *v36;
  _QWORD *v37;
  void *v38;
  HMDHomeManager *v39;
  NSObject *v40;
  void *v41;
  void *v42;
  void *v43;
  HMDHomeManager *v44;
  NSObject *v45;
  void *v46;
  void *v47;
  _QWORD *v48;
  void *v49;
  HMDHomeManager *v50;
  NSObject *v51;
  void *v52;
  void *v53;
  void *v54;
  HMDHomeManager *v55;
  NSObject *v56;
  void *v57;
  void *v58;
  _QWORD *v59;
  void *v60;
  HMDHomeManager *v61;
  NSObject *v62;
  void *v63;
  void *v64;
  void *v65;
  HMDHomeManager *v66;
  NSObject *v67;
  void *v68;
  void *v69;
  _QWORD *v70;
  void *v71;
  HMDHomeManager *v72;
  NSObject *v73;
  void *v74;
  void *v75;
  void *v76;
  HMDHomeManager *v77;
  NSObject *v78;
  void *v79;
  void *v80;
  _QWORD *v81;
  uint64_t v82;
  void *v83;
  HMDHomeManager *v84;
  NSObject *v85;
  void *v86;
  void *v87;
  void *v88;
  HMDHomeManager *v89;
  NSObject *v90;
  void *v91;
  void *v92;
  _QWORD *v93;
  uint64_t v94;
  void *v95;
  HMDHomeManager *v96;
  NSObject *v97;
  void *v98;
  void *v99;
  void *v100;
  HMDHomeManager *v101;
  NSObject *v102;
  void *v103;
  void *v104;
  _QWORD *v105;
  HMDHomeManager *v107;
  id obj;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  char v112;
  uint64_t v113;
  void *v114;
  uint64_t v115;
  uint64_t v116;
  id v117;
  id v118;
  int v119;
  uint64_t v120;
  uint64_t v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  uint8_t buf[4];
  void *v131;
  __int16 v132;
  void *v133;
  _BYTE v134[128];
  _BYTE v135[128];
  uint64_t v136;

  v136 = *MEMORY[0x24BDAC8D0];
  if (-[HMDHomeManager hasLoadedData](self, "hasLoadedData"))
  {
    v128 = 0u;
    v129 = 0u;
    v126 = 0u;
    v127 = 0u;
    v107 = self;
    -[HMDHomeManager homes](self, "homes");
    obj = (id)objc_claimAutoreleasedReturnValue();
    v110 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v126, v135, 16);
    if (v110)
    {
      v119 = 0;
      v3 = 0;
      v116 = 0;
      v113 = 0;
      v112 = 0;
      v4 = 0;
      v109 = *(_QWORD *)v127;
      v115 = *MEMORY[0x24BDD49A0];
      p_superclass = HMDLightProfileDataSource.superclass;
      v6 = HMDCameraMetricsSnapshotLogEvent.superclass;
      p_info = &OBJC_METACLASS___HMDHAPMetricsStateNumberChangeEvent.info;
      do
      {
        for (i = 0; i != v110; ++i)
        {
          if (*(_QWORD *)v127 != v109)
            objc_enumerationMutation(obj);
          v9 = *(void **)(*((_QWORD *)&v126 + 1) + 8 * i);
          v122 = 0u;
          v123 = 0u;
          v124 = 0u;
          v125 = 0u;
          v114 = v9;
          objc_msgSend(v9, "accessories");
          v117 = (id)objc_claimAutoreleasedReturnValue();
          v121 = objc_msgSend(v117, "countByEnumeratingWithState:objects:count:", &v122, v134, 16);
          if (v121)
          {
            v111 = i;
            v120 = *(_QWORD *)v123;
            do
            {
              for (j = 0; j != v121; ++j)
              {
                if (*(_QWORD *)v123 != v120)
                  objc_enumerationMutation(v117);
                v11 = *(id *)(*((_QWORD *)&v122 + 1) + 8 * j);
                objc_opt_class();
                if ((objc_opt_isKindOfClass() & 1) != 0)
                  v12 = v11;
                else
                  v12 = 0;
                v13 = v12;

                if (v13)
                {
                  v14 = v11;
                  objc_opt_class();
                  if ((objc_opt_isKindOfClass() & 1) != 0)
                    v15 = v14;
                  else
                    v15 = 0;
                  v16 = v15;

                  if (objc_msgSend(v16, "isHomePod"))
                  {
                    switch(objc_msgSend(v16, "homePodVariant"))
                    {
                      case 0:
                      case 3:
                        BYTE4(v113) = 1;
                        break;
                      case 1:
                        LOBYTE(v113) = 1;
                        break;
                      case 2:
                        v112 = 1;
                        break;
                      default:
                        break;
                    }
                    if (objc_msgSend(v16, "requiresHomeAppForManagement"))
                      LODWORD(v116) = objc_msgSend(v114, "isOwnerUser") | v116;
                    BYTE4(v116) = 1;
                  }
                  else
                  {
                    objc_msgSend(v16, "category");
                    v17 = (void *)objc_claimAutoreleasedReturnValue();
                    objc_msgSend(v17, "categoryType");
                    v18 = (void *)objc_claimAutoreleasedReturnValue();
                    v118 = v13;
                    v19 = v3;
                    v20 = p_info;
                    v21 = v6;
                    v22 = p_superclass;
                    v23 = objc_msgSend(v18, "isEqual:", v115);

                    v24 = v23 | v119;
                    p_superclass = v22;
                    v6 = v21;
                    p_info = v20;
                    v3 = v19;
                    v13 = v118;
                    v119 = v24;
                  }

                }
                v25 = v11;
                objc_opt_class();
                if ((objc_opt_isKindOfClass() & 1) != 0)
                  v26 = v25;
                else
                  v26 = 0;
                v27 = v26;

                v28 = objc_msgSend(v27, "hasTelevisionService");
                v3 |= v28;

              }
              v121 = objc_msgSend(v117, "countByEnumeratingWithState:objects:count:", &v122, v134, 16);
            }
            while (v121);
            v4 = 1;
            i = v111;
          }

        }
        v110 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v126, v135, 16);
      }
      while (v110);
    }
    else
    {
      LOBYTE(v119) = 0;
      LOBYTE(v3) = 0;
      v116 = 0;
      v113 = 0;
      v112 = 0;
      v4 = 0;
    }

    v29 = BYTE4(v116) ^ HMHomeManagerAreAnySpeakersConfigured();
    v30 = (_QWORD *)MEMORY[0x24BDBD270];
    v31 = (_QWORD *)MEMORY[0x24BDBD268];
    if ((v29 & 1) != 0)
    {
      v32 = (void *)MEMORY[0x227676638]();
      v33 = v107;
      HMFGetOSLogHandle();
      v34 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v34, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v35 = (void *)objc_claimAutoreleasedReturnValue();
        HMFBooleanToString();
        v36 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        v131 = v35;
        v132 = 2112;
        v133 = v36;
        _os_log_impl(&dword_2218F0000, v34, OS_LOG_TYPE_INFO, "%{public}@Saving and sending the preference for speakers configured: %@", buf, 0x16u);

        v30 = (_QWORD *)MEMORY[0x24BDBD270];
      }

      objc_autoreleasePoolPop(v32);
      if ((v116 & 0x100000000) != 0)
        v37 = v30;
      else
        v37 = v31;
      v38 = (void *)MEMORY[0x227676638](-[HMDHomeManager _setHomeConfigurationKey:value:](v33, "_setHomeConfigurationKey:value:", *MEMORY[0x24BDD7E30], *v37));
      v39 = v33;
      HMFGetOSLogHandle();
      v40 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v40, OS_LOG_TYPE_DEFAULT))
      {
        HMFGetLogIdentifier();
        v41 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543362;
        v131 = v41;
        _os_log_impl(&dword_2218F0000, v40, OS_LOG_TYPE_DEFAULT, "%{public}@Posting speakers configured changed notification", buf, 0xCu);

      }
      objc_autoreleasePoolPop(v38);
      -[HMDHomeManager darwinNotificationProvider](v39, "darwinNotificationProvider");
      v42 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v42, "notifyPost:", *MEMORY[0x24BDD6138]);

    }
    if ((v112 & 1) != areAnyHomePodMiniConfigured())
    {
      v43 = (void *)MEMORY[0x227676638]();
      v44 = v107;
      HMFGetOSLogHandle();
      v45 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v45, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v46 = (void *)objc_claimAutoreleasedReturnValue();
        HMFBooleanToString();
        v47 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        v131 = v46;
        v132 = 2112;
        v133 = v47;
        _os_log_impl(&dword_2218F0000, v45, OS_LOG_TYPE_INFO, "%{public}@Saving and sending the preference for HomePod Mini configured: %@", buf, 0x16u);

        v30 = (_QWORD *)MEMORY[0x24BDBD270];
      }

      objc_autoreleasePoolPop(v43);
      if ((v112 & 1) != 0)
        v48 = v30;
      else
        v48 = v31;
      v49 = (void *)MEMORY[0x227676638](-[HMDHomeManager _setHomeConfigurationKey:value:](v44, "_setHomeConfigurationKey:value:", *MEMORY[0x24BDD6228], *v48));
      v50 = v44;
      HMFGetOSLogHandle();
      v51 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v51, OS_LOG_TYPE_DEFAULT))
      {
        HMFGetLogIdentifier();
        v52 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543362;
        v131 = v52;
        _os_log_impl(&dword_2218F0000, v51, OS_LOG_TYPE_DEFAULT, "%{public}@Posting HomePod Mini configured changed notification", buf, 0xCu);

      }
      objc_autoreleasePoolPop(v49);
      -[HMDHomeManager darwinNotificationProvider](v50, "darwinNotificationProvider");
      v53 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v53, "notifyPost:", *MEMORY[0x24BDD5FE8]);

      v29 = 1;
    }
    if ((BYTE4(v113) & 1) != areAnyLargeHomePodConfigured())
    {
      v54 = (void *)MEMORY[0x227676638]();
      v55 = v107;
      HMFGetOSLogHandle();
      v56 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v56, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v57 = (void *)objc_claimAutoreleasedReturnValue();
        HMFBooleanToString();
        v58 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        v131 = v57;
        v132 = 2112;
        v133 = v58;
        _os_log_impl(&dword_2218F0000, v56, OS_LOG_TYPE_INFO, "%{public}@Saving and sending the preference for 2nd Gen HomePods configured: %@", buf, 0x16u);

        v30 = (_QWORD *)MEMORY[0x24BDBD270];
      }

      objc_autoreleasePoolPop(v54);
      if ((v113 & 0x100000000) != 0)
        v59 = v30;
      else
        v59 = v31;
      v60 = (void *)MEMORY[0x227676638](-[HMDHomeManager _setHomeConfigurationKey:value:](v55, "_setHomeConfigurationKey:value:", *MEMORY[0x24BDD64D0], *v59));
      v61 = v55;
      HMFGetOSLogHandle();
      v62 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v62, OS_LOG_TYPE_DEFAULT))
      {
        HMFGetLogIdentifier();
        v63 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543362;
        v131 = v63;
        _os_log_impl(&dword_2218F0000, v62, OS_LOG_TYPE_DEFAULT, "%{public}@Posting 2nd Gen HomePods configured changed notification", buf, 0xCu);

      }
      objc_autoreleasePoolPop(v60);
      -[HMDHomeManager darwinNotificationProvider](v61, "darwinNotificationProvider");
      v64 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v64, "notifyPost:", *MEMORY[0x24BDD6028]);

      v29 = 1;
    }
    if ((v113 & 1) != areAnyHomePodsConfigured())
    {
      v65 = (void *)MEMORY[0x227676638]();
      v66 = v107;
      HMFGetOSLogHandle();
      v67 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v67, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v68 = (void *)objc_claimAutoreleasedReturnValue();
        HMFBooleanToString();
        v69 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        v131 = v68;
        v132 = 2112;
        v133 = v69;
        _os_log_impl(&dword_2218F0000, v67, OS_LOG_TYPE_INFO, "%{public}@Saving and sending the preference for HomePods configured: %@", buf, 0x16u);

        v30 = (_QWORD *)MEMORY[0x24BDBD270];
      }

      objc_autoreleasePoolPop(v65);
      if ((v113 & 1) != 0)
        v70 = v30;
      else
        v70 = v31;
      v71 = (void *)MEMORY[0x227676638](-[HMDHomeManager _setHomeConfigurationKey:value:](v66, "_setHomeConfigurationKey:value:", *MEMORY[0x24BDD6238], *v70));
      v72 = v66;
      HMFGetOSLogHandle();
      v73 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v73, OS_LOG_TYPE_DEFAULT))
      {
        HMFGetLogIdentifier();
        v74 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543362;
        v131 = v74;
        _os_log_impl(&dword_2218F0000, v73, OS_LOG_TYPE_DEFAULT, "%{public}@Posting HomePods present configured changed notification", buf, 0xCu);

      }
      objc_autoreleasePoolPop(v71);
      -[HMDHomeManager darwinNotificationProvider](v72, "darwinNotificationProvider");
      v75 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v75, "notifyPost:", *MEMORY[0x24BDD5FF0]);

      v29 = 1;
    }
    -[HMDHomeManager setHomePodsPresent:inOwnedHomes:](v107, "setHomePodsPresent:inOwnedHomes:", BYTE4(v116) & 1, v116 & 1);
    if ((v3 & 1) != HMHomeManagerAreAnyTelevisionAccessoriesConfigured())
    {
      v76 = (void *)MEMORY[0x227676638]();
      v77 = v107;
      HMFGetOSLogHandle();
      v78 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v78, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v79 = (void *)objc_claimAutoreleasedReturnValue();
        HMFBooleanToString();
        v80 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        v131 = v79;
        v132 = 2112;
        v133 = v80;
        _os_log_impl(&dword_2218F0000, v78, OS_LOG_TYPE_INFO, "%{public}@Saving and sending the preference for televisions configured: %@", buf, 0x16u);

        v30 = (_QWORD *)MEMORY[0x24BDBD270];
      }

      objc_autoreleasePoolPop(v76);
      if ((v3 & 1) != 0)
        v81 = v30;
      else
        v81 = v31;
      v82 = -[HMDHomeManager _setHomeConfigurationKey:value:](v77, "_setHomeConfigurationKey:value:", *MEMORY[0x24BDD6F88], *v81);
      if ((v3 & 1) != 0)
      {
        v83 = (void *)MEMORY[0x227676638](v82);
        v84 = v77;
        HMFGetOSLogHandle();
        v85 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v85, OS_LOG_TYPE_DEFAULT))
        {
          HMFGetLogIdentifier();
          v86 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543362;
          v131 = v86;
          _os_log_impl(&dword_2218F0000, v85, OS_LOG_TYPE_DEFAULT, "%{public}@Posting Television accessories added notification", buf, 0xCu);

        }
        objc_autoreleasePoolPop(v83);
        -[HMDHomeManager darwinNotificationProvider](v84, "darwinNotificationProvider");
        v87 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v87, "notifyPost:", *MEMORY[0x24BDD6158]);

      }
      v29 = 1;
    }
    if ((v119 & 1) != HMHomeManagerAreAnyAppleTVAccessoriesConfigured())
    {
      v88 = (void *)MEMORY[0x227676638]();
      v89 = v107;
      HMFGetOSLogHandle();
      v90 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v90, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v91 = (void *)objc_claimAutoreleasedReturnValue();
        HMFBooleanToString();
        v92 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        v131 = v91;
        v132 = 2112;
        v133 = v92;
        _os_log_impl(&dword_2218F0000, v90, OS_LOG_TYPE_INFO, "%{public}@Saving and sending the preference for Apple TV accessories configured: %@", buf, 0x16u);

        v30 = (_QWORD *)MEMORY[0x24BDBD270];
      }

      objc_autoreleasePoolPop(v88);
      if ((v119 & 1) != 0)
        v93 = v30;
      else
        v93 = v31;
      v94 = -[HMDHomeManager _setHomeConfigurationKey:value:](v89, "_setHomeConfigurationKey:value:", *MEMORY[0x24BDD52A8], *v93);
      if ((v119 & 1) != 0)
      {
        v95 = (void *)MEMORY[0x227676638](v94);
        v96 = v89;
        HMFGetOSLogHandle();
        v97 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v97, OS_LOG_TYPE_DEFAULT))
        {
          HMFGetLogIdentifier();
          v98 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543362;
          v131 = v98;
          _os_log_impl(&dword_2218F0000, v97, OS_LOG_TYPE_DEFAULT, "%{public}@Posting Apple TV accessories added notification", buf, 0xCu);

        }
        objc_autoreleasePoolPop(v95);
        -[HMDHomeManager darwinNotificationProvider](v96, "darwinNotificationProvider");
        v99 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v99, "notifyPost:", *MEMORY[0x24BDD5E48]);

      }
      v29 = 1;
    }
    if ((v4 & 1) != HMHomeManagerAreAnyAccessoriesConfigured())
    {
      v100 = (void *)MEMORY[0x227676638]();
      v101 = v107;
      HMFGetOSLogHandle();
      v102 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v102, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v103 = (void *)objc_claimAutoreleasedReturnValue();
        HMFBooleanToString();
        v104 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        v131 = v103;
        v132 = 2112;
        v133 = v104;
        _os_log_impl(&dword_2218F0000, v102, OS_LOG_TYPE_INFO, "%{public}@Saving and sending the preference for accessories configured: %@", buf, 0x16u);

        v30 = (_QWORD *)MEMORY[0x24BDBD270];
      }

      objc_autoreleasePoolPop(v100);
      if ((v4 & 1) != 0)
        v105 = v30;
      else
        v105 = v31;
      -[HMDHomeManager _setHomeConfigurationKey:value:](v101, "_setHomeConfigurationKey:value:", *MEMORY[0x24BDD7BA8], *v105);
      v29 = 1;
    }
  }
  else
  {
    v29 = 0;
  }
  return v29 & 1;
}

- (void)_setUniqueDeviceIdSalt:(id)a3
{
  id v4;
  void *v5;
  NSObject *v6;
  void *v7;
  int v8;
  void *v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  v4 = a3;
  v5 = (void *)MEMORY[0x227676638]();
  HMFGetOSLogHandle();
  v6 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = 138543362;
    v9 = v7;
    _os_log_impl(&dword_2218F0000, v6, OS_LOG_TYPE_INFO, "%{public}@Saving the device identifier salt", (uint8_t *)&v8, 0xCu);

  }
  objc_autoreleasePoolPop(v5);
  -[HMDHomeManager _setHomeConfigurationKey:value:applicationIdentifier:](self, "_setHomeConfigurationKey:value:applicationIdentifier:", CFSTR("kUniqueDeviceIdentifierSaltkey"), v4, CFSTR("com.apple.homed.notbackedup"));

}

- (void)accessoriesAreLocallyReachableOnTransientDevice:(BOOL)a3 forHome:(id)a4
{
  id v6;
  NSObject *v7;
  id v8;
  _QWORD block[5];
  id v10;
  BOOL v11;

  v6 = a4;
  -[HMDHomeManager workQueue](self, "workQueue");
  v7 = objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x24BDAC760];
  block[1] = 3221225472;
  block[2] = __74__HMDHomeManager_accessoriesAreLocallyReachableOnTransientDevice_forHome___block_invoke;
  block[3] = &unk_24E799CF0;
  v11 = a3;
  block[4] = self;
  v10 = v6;
  v8 = v6;
  dispatch_async(v7, block);

}

- (id)messageDestination
{
  id v3;
  void *v4;
  void *v5;

  v3 = objc_alloc(MEMORY[0x24BE3F1B8]);
  -[HMDHomeManager messageTargetUUID](self, "messageTargetUUID");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = (void *)objc_msgSend(v3, "initWithTarget:", v4);

  return v5;
}

- (id)_checkNameConflict:(id)a3 withNamespaceUUIDs:(id)a4
{
  id v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  _BYTE v20[128];
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  v6 = a3;
  v16 = 0u;
  v17 = 0u;
  v18 = 0u;
  v19 = 0u;
  v7 = a4;
  v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v16, v20, 16);
  if (v8)
  {
    v9 = v8;
    v10 = *(_QWORD *)v17;
LABEL_3:
    v11 = 0;
    while (1)
    {
      if (*(_QWORD *)v17 != v10)
        objc_enumerationMutation(v7);
      v12 = *(_QWORD *)(*((_QWORD *)&v16 + 1) + 8 * v11);
      -[HMDHomeManager nameValidator](self, "nameValidator", (_QWORD)v16);
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v13, "checkForConflict:namespace:", v6, v12);
      v14 = (void *)objc_claimAutoreleasedReturnValue();

      if (v14)
        break;
      if (v9 == ++v11)
      {
        v9 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v16, v20, 16);
        if (v9)
          goto LABEL_3;
        goto LABEL_9;
      }
    }
  }
  else
  {
LABEL_9:
    v14 = 0;
  }

  return v14;
}

- (id)_checkActionSetNameConflict:(id)a3 withNamespaceUUIDs:(id)a4
{
  id v6;
  id v7;
  void *v8;
  void *v9;
  uint64_t i;
  void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v24;
  id obj;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  _BYTE v37[128];
  _BYTE v38[128];
  uint64_t v39;

  v39 = *MEMORY[0x24BDAC8D0];
  v6 = a3;
  v7 = a4;
  -[HMDHomeManager nameValidator](self, "nameValidator");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v24 = v6;
  objc_msgSend(v8, "despaceName:", v6);
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  v35 = 0u;
  v36 = 0u;
  v33 = 0u;
  v34 = 0u;
  obj = v7;
  v27 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v33, v38, 16);
  if (!v27)
  {
    v21 = 0;
    goto LABEL_24;
  }
  v26 = *(_QWORD *)v34;
  while (2)
  {
    for (i = 0; i != v27; ++i)
    {
      if (*(_QWORD *)v34 != v26)
        objc_enumerationMutation(obj);
      -[HMDHomeManager _homeWithUUID:](self, "_homeWithUUID:", *(_QWORD *)(*((_QWORD *)&v33 + 1) + 8 * i));
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      if (!v11)
      {
        objc_msgSend(MEMORY[0x24BDD1540], "hmErrorWithCode:", 2);
        v21 = (void *)objc_claimAutoreleasedReturnValue();
        v22 = 0;
LABEL_23:

        goto LABEL_24;
      }
      v31 = 0u;
      v32 = 0u;
      v29 = 0u;
      v30 = 0u;
      v28 = v11;
      objc_msgSend(v11, "actionSets");
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      v13 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v29, v37, 16);
      if (v13)
      {
        v14 = v13;
        v15 = *(_QWORD *)v30;
LABEL_9:
        v16 = 0;
        while (1)
        {
          if (*(_QWORD *)v30 != v15)
            objc_enumerationMutation(v12);
          v17 = *(void **)(*((_QWORD *)&v29 + 1) + 8 * v16);
          -[HMDHomeManager nameValidator](self, "nameValidator");
          v18 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v17, "name");
          v19 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v18, "despaceName:", v19);
          v20 = (void *)objc_claimAutoreleasedReturnValue();

          if ((objc_msgSend(v9, "isEqualToString:", v20) & 1) != 0)
            break;

          if (v14 == ++v16)
          {
            v14 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v29, v37, 16);
            if (v14)
              goto LABEL_9;
            goto LABEL_15;
          }
        }
        objc_msgSend(MEMORY[0x24BDD1540], "hmErrorWithCode:", 31);
        v21 = (void *)objc_claimAutoreleasedReturnValue();

        if (!v21)
          goto LABEL_17;
        v22 = v28;
        goto LABEL_23;
      }
LABEL_15:

LABEL_17:
    }
    v21 = 0;
    v27 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v33, v38, 16);
    if (v27)
      continue;
    break;
  }
LABEL_24:

  return v21;
}

- (BOOL)_configureHomes:(id)a3 uncommittedTransactions:(id)a4
{
  id v6;
  id v7;
  NSObject *v8;
  void *v9;
  NSObject *v10;
  BOOL v11;
  void *v12;
  NSObject *v13;
  void *v14;
  void *v15;
  void *v16;
  _QWORD v18[4];
  NSObject *v19;
  uint8_t buf[4];
  void *v21;
  __int16 v22;
  void *v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v6 = a3;
  v7 = a4;
  -[HMDHomeManager startLocalTransport](self, "startLocalTransport");
  v8 = dispatch_group_create();
  dispatch_group_enter(v8);
  +[HMDLocation sharedManager](HMDLocation, "sharedManager");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v18[0] = MEMORY[0x24BDAC760];
  v18[1] = 3221225472;
  v18[2] = __58__HMDHomeManager__configureHomes_uncommittedTransactions___block_invoke;
  v18[3] = &unk_24E79C240;
  v10 = v8;
  v19 = v10;
  objc_msgSend(v9, "beingConfigured:completionHandler:", 1, v18);

  dispatch_group_wait(v10, 0xFFFFFFFFFFFFFFFFLL);
  v11 = -[HMDHomeManager _configureHomesImpl:uncommittedTransactions:](self, "_configureHomesImpl:uncommittedTransactions:", v6, v7);
  v12 = (void *)MEMORY[0x227676638]();
  HMFGetOSLogHandle();
  v13 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    HMFBooleanToString();
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543618;
    v21 = v14;
    v22 = 2112;
    v23 = v15;
    _os_log_impl(&dword_2218F0000, v13, OS_LOG_TYPE_INFO, "%{public}@Configured homes with result: %@", buf, 0x16u);

  }
  objc_autoreleasePoolPop(v12);
  +[HMDLocation sharedManager](HMDLocation, "sharedManager");
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v16, "beingConfigured:completionHandler:", 0, 0);

  return v11;
}

- (BOOL)_configureHomesImpl:(id)a3 uncommittedTransactions:(id)a4
{
  id v6;
  HMDNameValidator *v7;
  void *v8;
  HMDNameValidator *v9;
  void *v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  void *v18;
  id v19;
  void *v20;
  NSObject *v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  id v30;
  void *v31;
  void *v32;
  id v33;
  void *v34;
  void *v35;
  int v36;
  void *v37;
  void *v38;
  uint64_t v39;
  void *v40;
  void *v41;
  int v42;
  void *v43;
  void *v44;
  char v45;
  HMDHomeManager *v46;
  void *v47;
  void *v48;
  void *v49;
  void *v50;
  int v51;
  NSObject *v52;
  void *v53;
  uint64_t v54;
  _BOOL4 v55;
  _BOOL8 v56;
  void *v57;
  __int128 v59;
  BOOL v60;
  void *context;
  HMDHomeManager *v62;
  int v63;
  void *v64;
  id v65;
  id obj;
  void *v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  uint8_t buf[4];
  void *v73;
  __int16 v74;
  id v75;
  __int16 v76;
  void *v77;
  _BYTE v78[128];
  uint64_t v79;

  v79 = *MEMORY[0x24BDAC8D0];
  v6 = a3;
  v65 = a4;
  -[HMDHomeManager setHomes:](self, "setHomes:", v6);
  v7 = [HMDNameValidator alloc];
  -[HMDHomeManager uuid](self, "uuid");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = -[HMDNameValidator initWithUUID:](v7, "initWithUUID:", v8);
  -[HMDHomeManager setNameValidator:](self, "setNameValidator:", v9);

  -[HMDHomeManager notificationCenter](self, "notificationCenter");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "removeObserver:name:object:", self, CFSTR("HMDHomeCurrentDeviceHasReachableAccessories"), 0);

  objc_msgSend(MEMORY[0x24BDBCEB8], "array");
  v64 = (void *)objc_claimAutoreleasedReturnValue();
  v60 = -[HMDHomeManager isResidentEnabled](self, "isResidentEnabled");
  v68 = 0u;
  v69 = 0u;
  v70 = 0u;
  v71 = 0u;
  obj = v6;
  v11 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v68, v78, 16);
  if (!v11)
  {
    LOBYTE(v14) = 0;
    goto LABEL_35;
  }
  v13 = v11;
  v14 = 0;
  v15 = *(_QWORD *)v69;
  *(_QWORD *)&v12 = 138543618;
  v59 = v12;
  v62 = self;
  do
  {
    v16 = 0;
    do
    {
      if (*(_QWORD *)v69 != v15)
        objc_enumerationMutation(obj);
      v17 = *(void **)(*((_QWORD *)&v68 + 1) + 8 * v16);
      v18 = (void *)MEMORY[0x227676638]();
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0)
      {
        v67 = v18;
        v19 = v17;
        v20 = (void *)MEMORY[0x227676638]();
        HMFGetOSLogHandle();
        v21 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
        {
          HMFGetLogIdentifier();
          v22 = v13;
          v23 = v15;
          v24 = v14;
          v25 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v19, "name");
          v26 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v19, "ownerName");
          v27 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543874;
          v73 = v25;
          v74 = 2112;
          v75 = v26;
          v76 = 2112;
          v77 = v27;
          _os_log_impl(&dword_2218F0000, v21, OS_LOG_TYPE_INFO, "%{public}@Found home %@ with administrator %@", buf, 0x20u);

          v14 = v24;
          v15 = v23;
          v13 = v22;
          self = v62;
        }

        objc_autoreleasePoolPop(v20);
        -[HMDHomeManager nameValidator](self, "nameValidator");
        v28 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v19, "uuid");
        v29 = (void *)objc_claimAutoreleasedReturnValue();
        v30 = (id)objc_msgSend(v28, "addNamespace:", v29);

        v14 |= objc_msgSend(v19, "configureWithHomeManager:accessoriesPresent:uncommittedTransactions:source:", self, v64, v65, 0);
        objc_msgSend(v19, "name");
        v31 = (void *)objc_claimAutoreleasedReturnValue();
        -[HMDHomeManager uuid](self, "uuid");
        v32 = (void *)objc_claimAutoreleasedReturnValue();
        v33 = -[HMDHomeManager addName:namespace:](self, "addName:namespace:", v31, v32);

        objc_msgSend(v19, "uuid");
        v34 = (void *)objc_claimAutoreleasedReturnValue();
        -[HMDHomeManager _updateHome:configurationVersion:](self, "_updateHome:configurationVersion:", v34, objc_msgSend(v19, "configurationVersion"));

        if (objc_msgSend(v19, "isOwnerUser")
          && (+[HMDDeviceCapabilities deviceCapabilities](HMDDeviceCapabilities, "deviceCapabilities"),
              v35 = (void *)objc_claimAutoreleasedReturnValue(),
              v36 = objc_msgSend(v35, "isResidentCapable"),
              v35,
              v36))
        {
          v63 = v14;
          -[HMDHomeManager notificationCenter](self, "notificationCenter");
          v37 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v37, "addObserver:selector:name:object:", self, sel_handleHomeCurrentDeviceResidentEligibleNotification_, CFSTR("HMDHomeCurrentDeviceHasReachableAccessories"), v19);

          -[HMDHomeManager appleAccountManager](self, "appleAccountManager");
          v38 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v38, "device");
          v39 = objc_claimAutoreleasedReturnValue();

          -[HMDHomeManager capabilitiesController](self, "capabilitiesController");
          v40 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v40, "currentResidentCapabilities");
          v41 = (void *)objc_claimAutoreleasedReturnValue();
          if (v41 && -[HMDHomeManager isResidentEnabled](self, "isResidentEnabled"))
          {
            v42 = objc_msgSend(v19, "hasReachableAccessories");

            if (v42)
            {
              objc_msgSend(v19, "residentCapableDevices");
              v43 = (void *)objc_claimAutoreleasedReturnValue();
              v44 = (void *)v39;
              v45 = objc_msgSend(v43, "containsObject:", v39);

              v14 = v63;
              if ((v45 & 1) == 0)
              {
                context = (void *)MEMORY[0x227676638](objc_msgSend(v19, "addResidentCapableDevice:", v44));
                HMFGetOSLogHandle();
                v46 = (HMDHomeManager *)objc_claimAutoreleasedReturnValue();
                v63 = 1;
                if (os_log_type_enabled(&v46->super.super, OS_LOG_TYPE_INFO))
                {
                  HMFGetLogIdentifier();
                  v47 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend(v44, "name");
                  v48 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend(v19, "name");
                  v49 = (void *)objc_claimAutoreleasedReturnValue();
                  *(_DWORD *)buf = 138543874;
                  v73 = v47;
                  v74 = 2112;
                  v75 = v48;
                  v76 = 2112;
                  v77 = v49;
                  v63 = 1;
                  _os_log_impl(&dword_2218F0000, &v46->super.super, OS_LOG_TYPE_INFO, "%{public}@Configuration changed: add resident capable device %@ to %@", buf, 0x20u);

                }
                goto LABEL_25;
              }
              goto LABEL_26;
            }
          }
          else
          {

          }
          v14 = v63;
          if (-[HMDHomeManager isResidentEnabled](self, "isResidentEnabled", v59))
          {
            v44 = (void *)v39;
            goto LABEL_26;
          }
          objc_msgSend(v19, "residentCapableDevices");
          v50 = (void *)objc_claimAutoreleasedReturnValue();
          v44 = (void *)v39;
          v51 = objc_msgSend(v50, "containsObject:", v39);

          if (v51)
          {
            context = (void *)MEMORY[0x227676638]();
            v46 = self;
            HMFGetOSLogHandle();
            v52 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v52, OS_LOG_TYPE_INFO))
            {
              HMFGetLogIdentifier();
              v53 = (void *)objc_claimAutoreleasedReturnValue();
              *(_DWORD *)buf = v59;
              v73 = v53;
              v74 = 2112;
              v75 = v19;
              _os_log_impl(&dword_2218F0000, v52, OS_LOG_TYPE_INFO, "%{public}@Found ourselves as a resident in home, %@, enabling ourselves as a resident device", buf, 0x16u);

            }
            v60 = 1;
LABEL_25:
            v18 = v67;

            objc_autoreleasePoolPop(context);
            v14 = v63;
          }
          else
          {
LABEL_26:
            v18 = v67;
          }

        }
        else
        {
          v18 = v67;
        }

      }
      objc_autoreleasePoolPop(v18);
      ++v16;
    }
    while (v13 != v16);
    v54 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v68, v78, 16);
    v13 = v54;
  }
  while (v54);
LABEL_35:

  v55 = -[HMDHomeManager isResidentEnabled](self, "isResidentEnabled");
  v56 = v60;
  if (v56 != v55)
    -[HMDHomeManager _updateResidentEnabledOnThisDevice:forceNotify:message:](self, "_updateResidentEnabledOnThisDevice:forceNotify:message:", v56, 0, 0);
  -[HMDHomeManager idsServerBag](self, "idsServerBag", v59);
  v57 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v57, "configure");

  -[HMDHomeManager _readAccessAllowedWhenLockedSettingFromLocalStore](self, "_readAccessAllowedWhenLockedSettingFromLocalStore");
  -[HMDHomeManager _checkForSelfRemoval](self, "_checkForSelfRemoval");

  return v14 & 1;
}

- (void)initalizeMediaGroupParticipantDataLocalStorage
{
  void *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  void *v7;
  HMDMediaGroupsAggregatorBackupReceiver *v8;
  HMDMediaGroupParticipantLocalDataStorage *v9;
  HMDMediaGroupParticipantLocalDataStorage *mediaGroupParticipantDataLocalStorage;
  void *v11;
  HMDHomeManager *v12;
  NSObject *v13;
  void *v14;
  int v15;
  void *v16;
  __int16 v17;
  void *v18;
  __int16 v19;
  void *v20;
  __int16 v21;
  void *v22;
  __int16 v23;
  void *v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  -[HMDHomeManager uuid](self, "uuid");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHomeManager userDefaults](self, "userDefaults");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHomeManager eventForwarder](self, "eventForwarder");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHomeManager eventStoreReadHandle](self, "eventStoreReadHandle");
  v6 = objc_claimAutoreleasedReturnValue();
  v7 = (void *)v6;
  if (v3 && v4 && v5 && v6)
  {
    v8 = objc_alloc_init(HMDMediaGroupsAggregatorBackupReceiver);
    v9 = -[HMDMediaGroupParticipantLocalDataStorage initWithIdentifier:backUpReciever:userDefaults:eventForwarder:eventStoreReadHandle:]([HMDMediaGroupParticipantLocalDataStorage alloc], "initWithIdentifier:backUpReciever:userDefaults:eventForwarder:eventStoreReadHandle:", v3, v8, v4, v5, v7);
    -[HMDMediaGroupsAggregatorBackupReceiver setDelegate:](v8, "setDelegate:", v9);
    -[HMDMediaGroupParticipantLocalDataStorage setDataSource:](v9, "setDataSource:", self);
    -[HMDMediaGroupParticipantLocalDataStorage setDelegate:](v9, "setDelegate:", self);
    mediaGroupParticipantDataLocalStorage = self->_mediaGroupParticipantDataLocalStorage;
    self->_mediaGroupParticipantDataLocalStorage = v9;

  }
  else
  {
    v11 = (void *)MEMORY[0x227676638]();
    v12 = self;
    HMFGetOSLogHandle();
    v13 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      v15 = 138544386;
      v16 = v14;
      v17 = 2112;
      v18 = v3;
      v19 = 2112;
      v20 = v4;
      v21 = 2112;
      v22 = v5;
      v23 = 2112;
      v24 = v7;
      _os_log_impl(&dword_2218F0000, v13, OS_LOG_TYPE_ERROR, "%{public}@Failed to configure media group participant data local storage with dependencies homeManagerUUID: %@ userDefaults: %@ eventForwarder: %@ eventStoreReadHandle: %@", (uint8_t *)&v15, 0x34u);

    }
    objc_autoreleasePoolPop(v11);
  }

}

- (void)migrateLocalMediaGroupParticipantData
{
  void *v3;
  void *v4;
  void *v5;
  HMDHomeManager *v6;
  NSObject *v7;
  void *v8;
  int v9;
  void *v10;
  __int16 v11;
  void *v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  -[HMDHomeManager _appleMediaAccessoryOfCurrentDevice](self, "_appleMediaAccessoryOfCurrentDevice");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  if (v3)
  {
    -[HMDHomeManager mediaSystemForAppleMediaAccessory:](self, "mediaSystemForAppleMediaAccessory:", v3);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    v5 = (void *)MEMORY[0x227676638]();
    v6 = self;
    HMFGetOSLogHandle();
    v7 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      v9 = 138543618;
      v10 = v8;
      v11 = 2112;
      v12 = v3;
      _os_log_impl(&dword_2218F0000, v7, OS_LOG_TYPE_INFO, "%{public}@Migrating local media group participant data for current accessory: %@", (uint8_t *)&v9, 0x16u);

    }
    objc_autoreleasePoolPop(v5);
    -[HMDHomeManager migrateLocalHomeTheaterDataForCurrentAccessory:currentMediaSystem:](v6, "migrateLocalHomeTheaterDataForCurrentAccessory:currentMediaSystem:", v3, v4);
    if (v4)
      -[HMDHomeManager migrateLocalStereoPairDataForCurrentMediaSystem:](v6, "migrateLocalStereoPairDataForCurrentMediaSystem:", v4);
    -[HMDHomeManager saveAssociatedGroupDataForPostMigrationStagingWithCurrentAccessory:](v6, "saveAssociatedGroupDataForPostMigrationStagingWithCurrentAccessory:", v3);

  }
}

- (void)migrateLocalHomeTheaterDataForCurrentAccessory:(id)a3 currentMediaSystem:(id)a4
{
  id v6;
  id v7;
  void *v8;
  void *v9;
  HMDHomeManager *v10;
  NSObject *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  HMDHomeManager *v19;
  NSObject *v20;
  void *v21;
  void *v22;
  int v23;
  void *v24;
  __int16 v25;
  void *v26;
  uint64_t v27;

  v27 = *MEMORY[0x24BDAC8D0];
  v6 = a3;
  v7 = a4;
  objc_msgSend(v6, "audioDestinationControllerData");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  if (v8)
  {
    v9 = (void *)MEMORY[0x227676638]();
    v10 = self;
    HMFGetOSLogHandle();
    v11 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      v23 = 138543618;
      v24 = v12;
      v25 = 2112;
      v26 = v8;
      _os_log_impl(&dword_2218F0000, v11, OS_LOG_TYPE_INFO, "%{public}@Migrating current destination controller data: %@", (uint8_t *)&v23, 0x16u);

    }
    objc_autoreleasePoolPop(v9);
    -[HMDHomeManager mediaGroupParticipantDataLocalStorage](v10, "mediaGroupParticipantDataLocalStorage");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "updateDestinationControllerData:", v8);

  }
  objc_msgSend(v6, "audioDestination");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  v15 = (void *)objc_msgSend(v14, "mutableCopy");

  if (v15)
  {
    objc_msgSend(v7, "uuid");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    if (v16)
    {
      objc_msgSend(v15, "setAudioGroupIdentifier:", v16);
    }
    else
    {
      objc_msgSend(v15, "audioGroupIdentifier");
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v15, "setAudioGroupIdentifier:", v17);

    }
    v18 = (void *)MEMORY[0x227676638]();
    v19 = self;
    HMFGetOSLogHandle();
    v20 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v20, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      v23 = 138543618;
      v24 = v21;
      v25 = 2112;
      v26 = v15;
      _os_log_impl(&dword_2218F0000, v20, OS_LOG_TYPE_INFO, "%{public}@Migrating current destination: %@", (uint8_t *)&v23, 0x16u);

    }
    objc_autoreleasePoolPop(v18);
    -[HMDHomeManager mediaGroupParticipantDataLocalStorage](v19, "mediaGroupParticipantDataLocalStorage");
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v22, "updateMediaDestination:", v15);

  }
}

- (void)migrateLocalStereoPairDataForCurrentMediaSystem:(id)a3
{
  id v4;
  void *v5;
  HMDHomeManager *v6;
  NSObject *v7;
  void *v8;
  void *v9;
  void *v10;
  id v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  id v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  HMDHomeManager *v29;
  NSObject *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  uint8_t buf[4];
  void *v37;
  __int16 v38;
  id v39;
  __int16 v40;
  void *v41;
  __int16 v42;
  void *v43;
  uint64_t v44;

  v44 = *MEMORY[0x24BDAC8D0];
  v4 = a3;
  v5 = (void *)MEMORY[0x227676638]();
  v6 = self;
  HMFGetOSLogHandle();
  v7 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543618;
    v37 = v8;
    v38 = 2112;
    v39 = v4;
    _os_log_impl(&dword_2218F0000, v7, OS_LOG_TYPE_INFO, "%{public}@Migrating current media system: %@", buf, 0x16u);

  }
  objc_autoreleasePoolPop(v5);
  objc_msgSend(v4, "configuredName");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = v9;
  if (v9)
  {
    v11 = v9;
  }
  else
  {
    objc_msgSend(MEMORY[0x24BDD77E8], "roomNameSentinel");
    v11 = (id)objc_claimAutoreleasedReturnValue();
  }
  v12 = v11;
  objc_msgSend(v4, "audioDestination");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v13, "audioGroupIdentifier");
  v14 = (void *)objc_claimAutoreleasedReturnValue();

  -[HMDHomeManager destinationIdentifierForMediaSystem:role:](v6, "destinationIdentifierForMediaSystem:role:", v4, 1);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHomeManager destinationIdentifierForMediaSystem:role:](v6, "destinationIdentifierForMediaSystem:role:", v4, 2);
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "home");
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v17, "uuid");
  v18 = (void *)objc_claimAutoreleasedReturnValue();

  if (v15 && v16 && v18)
  {
    v33 = v14;
    v19 = v12;
    v20 = objc_alloc(MEMORY[0x24BDD77E8]);
    objc_msgSend(v4, "uuid");
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    v22 = (void *)objc_msgSend(v20, "initWithIdentifier:parentIdentifier:name:defaultName:associatedGroupIdentifier:leftDestinationIdentifier:rightDestinationIdentifier:", v21, v18, v12, v10 == 0, v33, v15, v16);

    -[HMDHomeManager mediaGroupParticipantDataLocalStorage](v6, "mediaGroupParticipantDataLocalStorage");
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "uuid");
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v23, "updateAudioGroupIdentifier:", v24);

    -[HMDHomeManager mediaGroupParticipantDataLocalStorage](v6, "mediaGroupParticipantDataLocalStorage");
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v22, "encodeToProtoBufferData");
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    v35 = v26;
    objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", &v35, 1);
    v27 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v25, "updateBackupGroupData:", v27);

    v12 = v19;
    v14 = v33;

  }
  else
  {
    v28 = (void *)MEMORY[0x227676638]();
    v29 = v6;
    HMFGetOSLogHandle();
    v30 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v34 = v14;
      v31 = v12;
      v32 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138544130;
      v37 = v32;
      v38 = 2112;
      v39 = v15;
      v40 = 2112;
      v41 = v16;
      v42 = 2112;
      v43 = v18;
      _os_log_impl(&dword_2218F0000, v30, OS_LOG_TYPE_ERROR, "%{public}@Failed to migrate current media system due to missing group data dependencies leftDestinationIdentifier: %@ rightDestinationIdentifier: %@ homeIdentifier: %@", buf, 0x2Au);

      v12 = v31;
      v14 = v34;
    }

    objc_autoreleasePoolPop(v28);
  }

}

- (void)saveAssociatedGroupDataForPostMigrationStagingWithCurrentAccessory:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  uint64_t v7;
  void *v8;
  HMDMediaGroupsStageManager *v9;
  void *v10;
  HMDMediaGroupsStageManager *v11;
  void *v12;
  HMDHomeManager *v13;
  NSObject *v14;
  void *v15;
  int v16;
  void *v17;
  __int16 v18;
  void *v19;
  __int16 v20;
  void *v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  v4 = a3;
  objc_msgSend(v4, "home");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "uuid");
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  -[HMDHomeManager userDefaults](self, "userDefaults");
  v7 = objc_claimAutoreleasedReturnValue();
  v8 = (void *)v7;
  if (v6 && v7)
  {
    v9 = [HMDMediaGroupsStageManager alloc];
    -[HMDHomeManager userDefaults](self, "userDefaults");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v11 = -[HMDMediaGroupsStageManager initWithIdentifier:userDefaults:](v9, "initWithIdentifier:userDefaults:", v6, v10);

    -[HMDMediaGroupsStageManager saveAssociatedGroupDataForLegacyCurrentAccessory:](v11, "saveAssociatedGroupDataForLegacyCurrentAccessory:", v4);
  }
  else
  {
    v12 = (void *)MEMORY[0x227676638]();
    v13 = self;
    HMFGetOSLogHandle();
    v14 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      v16 = 138543874;
      v17 = v15;
      v18 = 2112;
      v19 = v6;
      v20 = 2112;
      v21 = v8;
      _os_log_impl(&dword_2218F0000, v14, OS_LOG_TYPE_ERROR, "%{public}@Failed to save associated group data due to missing homeUUID: %@ userDefaults: %@", (uint8_t *)&v16, 0x20u);

    }
    objc_autoreleasePoolPop(v12);
  }

}

- (id)destinationIdentifierForMediaSystem:(id)a3 role:(unint64_t)a4
{
  id v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  uint64_t v14;
  id v15;
  void *v16;
  void *v17;
  id v18;
  void *v19;
  void *v20;
  id v21;
  void *v22;
  HMDHomeManager *v23;
  NSObject *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  HMDHomeManager *v29;
  NSObject *v30;
  void *v31;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  uint8_t buf[4];
  void *v38;
  __int16 v39;
  id v40;
  __int16 v41;
  id v42;
  _BYTE v43[128];
  uint64_t v44;

  v44 = *MEMORY[0x24BDAC8D0];
  v6 = a3;
  v33 = 0u;
  v34 = 0u;
  v35 = 0u;
  v36 = 0u;
  objc_msgSend(v6, "components", 0);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v33, v43, 16);
  if (v8)
  {
    v9 = v8;
    v10 = *(_QWORD *)v34;
LABEL_3:
    v11 = 0;
    while (1)
    {
      if (*(_QWORD *)v34 != v10)
        objc_enumerationMutation(v7);
      v12 = *(void **)(*((_QWORD *)&v33 + 1) + 8 * v11);
      objc_msgSend(v12, "role");
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      v14 = objc_msgSend(v13, "type");

      if (v14 == a4)
        break;
      if (v9 == ++v11)
      {
        v9 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v33, v43, 16);
        if (v9)
          goto LABEL_3;
        goto LABEL_9;
      }
    }
    v15 = v12;

    if (!v15)
      goto LABEL_16;
    objc_msgSend(v15, "accessory");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
      v17 = v16;
    else
      v17 = 0;
    v18 = v17;

    objc_msgSend(v18, "audioDestination");
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v19, "uniqueIdentifier");
    v20 = (void *)objc_claimAutoreleasedReturnValue();

    if (v20)
    {
      v21 = v20;
    }
    else
    {
      v28 = (void *)MEMORY[0x227676638]();
      v29 = self;
      HMFGetOSLogHandle();
      v30 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v31 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543874;
        v38 = v31;
        v39 = 2112;
        v40 = v15;
        v41 = 2112;
        v42 = v18;
        _os_log_impl(&dword_2218F0000, v30, OS_LOG_TYPE_ERROR, "%{public}@Failed to get destination identifier on component: %@ accessory: %@", buf, 0x20u);

      }
      objc_autoreleasePoolPop(v28);
    }

  }
  else
  {
LABEL_9:

LABEL_16:
    v22 = (void *)MEMORY[0x227676638]();
    v23 = self;
    HMFGetOSLogHandle();
    v24 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v25 = (void *)objc_claimAutoreleasedReturnValue();
      HMMediaSystemRoleTypeAsString();
      v26 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v6, "components");
      v27 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543874;
      v38 = v25;
      v39 = 2112;
      v40 = v26;
      v41 = 2112;
      v42 = v27;
      _os_log_impl(&dword_2218F0000, v24, OS_LOG_TYPE_ERROR, "%{public}@Failed to get destination identifier due to no component with role: %@ components: %@", buf, 0x20u);

    }
    objc_autoreleasePoolPop(v22);
    v20 = 0;
  }

  return v20;
}

- (id)mediaSystemForAppleMediaAccessory:(id)a3
{
  id v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _BYTE v17[128];
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  v4 = a3;
  v13 = 0u;
  v14 = 0u;
  v15 = 0u;
  v16 = 0u;
  -[HMDHomeManager homes](self, "homes", 0);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
  if (v6)
  {
    v7 = v6;
    v8 = *(_QWORD *)v14;
    while (2)
    {
      v9 = 0;
      do
      {
        if (*(_QWORD *)v14 != v8)
          objc_enumerationMutation(v5);
        objc_msgSend(*(id *)(*((_QWORD *)&v13 + 1) + 8 * v9), "mediaSystemForAppleMediaAccessory:", v4);
        v10 = objc_claimAutoreleasedReturnValue();
        if (v10)
        {
          v11 = (void *)v10;
          goto LABEL_11;
        }
        ++v9;
      }
      while (v7 != v9);
      v7 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
      if (v7)
        continue;
      break;
    }
  }
  v11 = 0;
LABEL_11:

  return v11;
}

- (id)identifiersOfAccessoriesForHome:(id)a3
{
  void *v4;
  void *v5;

  objc_msgSend(a3, "accessories");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHomeManager identifiersOfAccessories:](self, "identifiersOfAccessories:", v4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  return v5;
}

- (id)identifiersOfAccessories:(id)a3
{
  id v3;
  void *v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  void *v11;
  id v12;
  void *v13;
  void *v14;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  _BYTE v20[128];
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  v3 = a3;
  objc_msgSend(MEMORY[0x24BDBCEF0], "set");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v16 = 0u;
  v17 = 0u;
  v18 = 0u;
  v19 = 0u;
  v5 = v3;
  v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v16, v20, 16);
  if (v6)
  {
    v7 = v6;
    v8 = *(_QWORD *)v17;
    do
    {
      v9 = 0;
      do
      {
        if (*(_QWORD *)v17 != v8)
          objc_enumerationMutation(v5);
        v10 = *(id *)(*((_QWORD *)&v16 + 1) + 8 * v9);
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0)
          v11 = v10;
        else
          v11 = 0;
        v12 = v11;

        if (v12)
        {
          objc_msgSend(v12, "uniqueIdentifier", (_QWORD)v16);
          v13 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v4, "addObject:", v13);

        }
        ++v9;
      }
      while (v7 != v9);
      v7 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v16, v20, 16);
    }
    while (v7);
  }

  v14 = (void *)objc_msgSend(v4, "copy");
  return v14;
}

- (id)_filterAccessories:(id)a3 withIdentifiers:(id)a4
{
  id v5;
  id v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  void *v13;
  id v14;
  void *v15;
  int v16;
  void *v17;
  void *v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  _BYTE v24[128];
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v5 = a3;
  v6 = a4;
  objc_msgSend(MEMORY[0x24BDBCEB8], "arrayWithCapacity:", objc_msgSend(v5, "count"));
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  v20 = 0u;
  v21 = 0u;
  v22 = 0u;
  v23 = 0u;
  v7 = v5;
  v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v20, v24, 16);
  if (v8)
  {
    v9 = v8;
    v10 = *(_QWORD *)v21;
    do
    {
      v11 = 0;
      do
      {
        if (*(_QWORD *)v21 != v10)
          objc_enumerationMutation(v7);
        v12 = *(id *)(*((_QWORD *)&v20 + 1) + 8 * v11);
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0)
          v13 = v12;
        else
          v13 = 0;
        v14 = v13;

        if (v14)
        {
          objc_msgSend(v14, "uniqueIdentifier");
          v15 = (void *)objc_claimAutoreleasedReturnValue();
          v16 = objc_msgSend(v6, "containsObject:", v15);

          if (v16)
            objc_msgSend(v19, "addObject:", v12);
        }

        ++v11;
      }
      while (v9 != v11);
      v9 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v20, v24, 16);
    }
    while (v9);
  }

  v17 = (void *)objc_msgSend(v19, "copy");
  return v17;
}

- (id)_filterAccessories:(id)a3 inHome:(id)a4
{
  id v5;
  id v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t i;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  int v16;
  id v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  _BYTE v23[128];
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v5 = a3;
  v6 = a4;
  objc_msgSend(MEMORY[0x24BDBCEB8], "array");
  v18 = (id)objc_claimAutoreleasedReturnValue();
  v19 = 0u;
  v20 = 0u;
  v21 = 0u;
  v22 = 0u;
  v7 = v5;
  v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v19, v23, 16);
  if (v8)
  {
    v9 = v8;
    v10 = *(_QWORD *)v20;
    do
    {
      for (i = 0; i != v9; ++i)
      {
        if (*(_QWORD *)v20 != v10)
          objc_enumerationMutation(v7);
        v12 = *(void **)(*((_QWORD *)&v19 + 1) + 8 * i);
        objc_msgSend(v12, "home");
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v13, "uuid");
        v14 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v6, "uuid");
        v15 = (void *)objc_claimAutoreleasedReturnValue();
        v16 = objc_msgSend(v14, "isEqual:", v15);

        if (v16)
          objc_msgSend(v18, "addObject:", v12);
      }
      v9 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v19, v23, 16);
    }
    while (v9);
  }

  return v18;
}

- (void)_suspendXPCWithCompletionHanlder:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  id v7;
  void *v8;
  void *v9;
  _QWORD v10[4];
  id v11;
  id v12;
  id location;

  v4 = a3;
  v5 = (void *)objc_msgSend(objc_alloc(MEMORY[0x24BDD1880]), "initWithUUIDString:", CFSTR("AE859292-8964-4709-9224-FD5860339189"));
  objc_initWeak(&location, self);
  v6 = (void *)MEMORY[0x24BE3F1B0];
  v10[0] = MEMORY[0x24BDAC760];
  v10[1] = 3221225472;
  v10[2] = __51__HMDHomeManager__suspendXPCWithCompletionHanlder___block_invoke;
  v10[3] = &unk_24E79AFA0;
  objc_copyWeak(&v12, &location);
  v7 = v4;
  v11 = v7;
  objc_msgSend(v6, "internalMessageWithName:messagePayload:responseHandler:", CFSTR("kSuspendXPCConnectionRequestKey"), 0, v10);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHomeManager messageDispatcher](self, "messageDispatcher");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "dispatchMessage:target:", v8, v5);

  objc_destroyWeak(&v12);
  objc_destroyWeak(&location);

}

- (void)_resumeXPCWithCompletionHanlder:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  id v7;
  void *v8;
  void *v9;
  _QWORD v10[4];
  id v11;
  id v12;
  id location;

  v4 = a3;
  v5 = (void *)objc_msgSend(objc_alloc(MEMORY[0x24BDD1880]), "initWithUUIDString:", CFSTR("AE859292-8964-4709-9224-FD5860339189"));
  objc_initWeak(&location, self);
  v6 = (void *)MEMORY[0x24BE3F1B0];
  v10[0] = MEMORY[0x24BDAC760];
  v10[1] = 3221225472;
  v10[2] = __50__HMDHomeManager__resumeXPCWithCompletionHanlder___block_invoke;
  v10[3] = &unk_24E79AFA0;
  objc_copyWeak(&v12, &location);
  v7 = v4;
  v11 = v7;
  objc_msgSend(v6, "internalMessageWithName:messagePayload:responseHandler:", CFSTR("kResumeXPCConnectionRequestKey"), 0, v10);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHomeManager messageDispatcher](self, "messageDispatcher");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "dispatchMessage:target:", v8, v5);

  objc_destroyWeak(&v12);
  objc_destroyWeak(&location);

}

- (id)_deviceForIdentifier:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;
  uint64_t v10;
  void *i;
  void *v12;
  void *v13;
  int v14;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  _BYTE v20[128];
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  v4 = a3;
  v5 = (void *)objc_msgSend(objc_alloc(MEMORY[0x24BDD1880]), "initWithUUIDString:", v4);
  if (v5)
  {
    v18 = 0u;
    v19 = 0u;
    v16 = 0u;
    v17 = 0u;
    -[HMDHomeManager appleAccountManager](self, "appleAccountManager", 0);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "account");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "devices");
    v8 = (void *)objc_claimAutoreleasedReturnValue();

    v9 = (id)objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v16, v20, 16);
    if (v9)
    {
      v10 = *(_QWORD *)v17;
      while (2)
      {
        for (i = 0; i != v9; i = (char *)i + 1)
        {
          if (*(_QWORD *)v17 != v10)
            objc_enumerationMutation(v8);
          v12 = *(void **)(*((_QWORD *)&v16 + 1) + 8 * (_QWORD)i);
          objc_msgSend(v12, "identifier");
          v13 = (void *)objc_claimAutoreleasedReturnValue();
          v14 = objc_msgSend(v5, "isEqual:", v13);

          if (v14)
          {
            v9 = v12;
            goto LABEL_12;
          }
        }
        v9 = (id)objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v16, v20, 16);
        if (v9)
          continue;
        break;
      }
    }
LABEL_12:

  }
  else
  {
    v9 = 0;
  }

  return v9;
}

- (void)_auditKeychainEntries
{
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t i;
  id v9;
  void *v10;
  id v11;
  id v12;
  void *v13;
  void *v14;
  id v15;
  void *v16;
  void *v17;
  void *v18;
  HMDHomeManager *v19;
  NSObject *v20;
  void *v21;
  void *v22;
  HMDHomeManager *v23;
  NSObject *v24;
  void *v25;
  void *v26;
  void *v27;
  HMDHomeManager *v28;
  NSObject *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  id v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t j;
  void *v40;
  void *v41;
  HMDHomeManager *v42;
  NSObject *v43;
  void *v44;
  void *v45;
  void *v46;
  HMDHomeManager *v47;
  NSObject *v48;
  void *v49;
  id obj;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  void *v55;
  void *v56;
  HMDHomeManager *v57;
  void *v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  uint8_t v71[128];
  uint8_t buf[4];
  void *v73;
  __int16 v74;
  id v75;
  _BYTE v76[128];
  _BYTE v77[128];
  uint64_t v78;

  v78 = *MEMORY[0x24BDAC8D0];
  objc_msgSend(MEMORY[0x24BDBCED8], "dictionary");
  v56 = (void *)objc_claimAutoreleasedReturnValue();
  v57 = self;
  v67 = 0u;
  v68 = 0u;
  v69 = 0u;
  v70 = 0u;
  -[HMDHomeManager homes](self, "homes");
  obj = (id)objc_claimAutoreleasedReturnValue();
  v52 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v67, v77, 16);
  if (v52)
  {
    v51 = *(_QWORD *)v68;
    do
    {
      v3 = 0;
      do
      {
        if (*(_QWORD *)v68 != v51)
          objc_enumerationMutation(obj);
        v53 = v3;
        v4 = *(void **)(*((_QWORD *)&v67 + 1) + 8 * v3);
        v63 = 0u;
        v64 = 0u;
        v65 = 0u;
        v66 = 0u;
        objc_msgSend(v4, "accessories");
        v58 = (void *)objc_claimAutoreleasedReturnValue();
        v5 = objc_msgSend(v58, "countByEnumeratingWithState:objects:count:", &v63, v76, 16);
        if (v5)
        {
          v6 = v5;
          v7 = *(_QWORD *)v64;
          do
          {
            for (i = 0; i != v6; ++i)
            {
              if (*(_QWORD *)v64 != v7)
                objc_enumerationMutation(v58);
              v9 = *(id *)(*((_QWORD *)&v63 + 1) + 8 * i);
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0)
                v10 = v9;
              else
                v10 = 0;
              v11 = v10;

              if (!v11)
              {
                v15 = v9;
                objc_opt_class();
                if ((objc_opt_isKindOfClass() & 1) != 0)
                  v16 = v15;
                else
                  v16 = 0;
                v12 = v16;

                if (v12)
                {
                  objc_msgSend(v12, "identifier");
                  v17 = (void *)objc_claimAutoreleasedReturnValue();

                  if (!v17)
                  {
                    v18 = (void *)MEMORY[0x227676638]();
                    v19 = v57;
                    HMFGetOSLogHandle();
                    v20 = objc_claimAutoreleasedReturnValue();
                    if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
                    {
                      HMFGetLogIdentifier();
                      v21 = (void *)objc_claimAutoreleasedReturnValue();
                      *(_DWORD *)buf = 138543618;
                      v73 = v21;
                      v74 = 2112;
                      v75 = v12;
                      _os_log_impl(&dword_2218F0000, v20, OS_LOG_TYPE_ERROR, "%{public}@Failed to add accessory %@ to the audit accessory list since identifier is nil", buf, 0x16u);

                    }
                    objc_autoreleasePoolPop(v18);
                  }
                }
                goto LABEL_27;
              }
              objc_msgSend(v11, "pairingUsername");
              v12 = (id)objc_claimAutoreleasedReturnValue();
              if (v12 || (objc_msgSend(v11, "identifier"), (v12 = (id)objc_claimAutoreleasedReturnValue()) != 0))
              {
                objc_msgSend(v11, "publicKey");
                v13 = (void *)objc_claimAutoreleasedReturnValue();

                if (v13)
                {
                  objc_msgSend(v11, "publicKey");
                  v14 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend(v56, "setObject:forKey:", v14, v12);

LABEL_27:
                  goto LABEL_34;
                }
                v22 = (void *)MEMORY[0x227676638]();
                v23 = v57;
                HMFGetOSLogHandle();
                v24 = objc_claimAutoreleasedReturnValue();
                if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
                {
                  HMFGetLogIdentifier();
                  v25 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend(v11, "name");
                  v26 = (void *)objc_claimAutoreleasedReturnValue();
                  *(_DWORD *)buf = 138543618;
                  v73 = v25;
                  v74 = 2112;
                  v75 = v26;
                  _os_log_impl(&dword_2218F0000, v24, OS_LOG_TYPE_ERROR, "%{public}@A HAP accessory '%@' with a public key - removing from list of of keychain entries", buf, 0x16u);

                }
                objc_autoreleasePoolPop(v22);

              }
              else
              {
                v27 = (void *)MEMORY[0x227676638]();
                v28 = v57;
                HMFGetOSLogHandle();
                v29 = objc_claimAutoreleasedReturnValue();
                if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
                {
                  HMFGetLogIdentifier();
                  v30 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend(v11, "name");
                  v31 = (void *)objc_claimAutoreleasedReturnValue();
                  *(_DWORD *)buf = 138543618;
                  v73 = v30;
                  v74 = 2112;
                  v75 = v31;
                  _os_log_impl(&dword_2218F0000, v29, OS_LOG_TYPE_ERROR, "%{public}@Failed to add accessory %@ to the audit accessory list for keychain cleanup", buf, 0x16u);

                }
                objc_autoreleasePoolPop(v27);
              }
LABEL_34:

            }
            v6 = objc_msgSend(v58, "countByEnumeratingWithState:objects:count:", &v63, v76, 16);
          }
          while (v6);
        }

        v3 = v53 + 1;
      }
      while (v53 + 1 != v52);
      v52 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v67, v77, 16);
    }
    while (v52);
  }

  objc_msgSend(MEMORY[0x24BE1BC08], "systemStore");
  v32 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v32, "auditKeysOfManagedAccessories:", v56);
  v33 = (void *)objc_claimAutoreleasedReturnValue();
  v34 = v33;
  if (v33)
  {
    v54 = v33;
    v55 = v32;
    v61 = 0u;
    v62 = 0u;
    v59 = 0u;
    v60 = 0u;
    v35 = v33;
    v36 = objc_msgSend(v35, "countByEnumeratingWithState:objects:count:", &v59, v71, 16);
    if (v36)
    {
      v37 = v36;
      v38 = *(_QWORD *)v60;
      do
      {
        for (j = 0; j != v37; ++j)
        {
          if (*(_QWORD *)v60 != v38)
            objc_enumerationMutation(v35);
          v40 = *(void **)(*((_QWORD *)&v59 + 1) + 8 * j);
          v41 = (void *)MEMORY[0x227676638]();
          v42 = v57;
          HMFGetOSLogHandle();
          v43 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v43, OS_LOG_TYPE_DEFAULT))
          {
            HMFGetLogIdentifier();
            v44 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v40, "description");
            v45 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 138543618;
            v73 = v44;
            v74 = 2112;
            v75 = v45;
            _os_log_impl(&dword_2218F0000, v43, OS_LOG_TYPE_DEFAULT, "%{public}@Removed spurious keychain entry: %@", buf, 0x16u);

          }
          objc_autoreleasePoolPop(v41);
        }
        v37 = objc_msgSend(v35, "countByEnumeratingWithState:objects:count:", &v59, v71, 16);
      }
      while (v37);
    }

    v34 = v54;
    v32 = v55;
  }
  else
  {
    v46 = (void *)MEMORY[0x227676638]();
    v47 = v57;
    HMFGetOSLogHandle();
    v48 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v48, OS_LOG_TYPE_DEFAULT))
    {
      HMFGetLogIdentifier();
      v49 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v73 = v49;
      _os_log_impl(&dword_2218F0000, v48, OS_LOG_TYPE_DEFAULT, "%{public}@Audit keychain entries failed", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v46);
  }

}

- (BOOL)_associateAccessories:(id)a3 withHomes:(id)a4
{
  id v5;
  void *v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t i;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  NSObject *v18;
  void *v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t j;
  void *v25;
  void *v26;
  uint64_t v27;
  void *v28;
  void *v29;
  void *v30;
  id v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  uint8_t v41[128];
  uint8_t buf[4];
  void *v43;
  __int16 v44;
  void *v45;
  _BYTE v46[128];
  uint64_t v47;

  v47 = *MEMORY[0x24BDAC8D0];
  v5 = a3;
  v32 = a4;
  objc_msgSend(MEMORY[0x24BDBCED8], "dictionary");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v37 = 0u;
  v38 = 0u;
  v39 = 0u;
  v40 = 0u;
  v7 = v5;
  v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v37, v46, 16);
  if (v8)
  {
    v9 = v8;
    v10 = 0;
    v11 = *(_QWORD *)v38;
    do
    {
      for (i = 0; i != v9; ++i)
      {
        if (*(_QWORD *)v38 != v11)
          objc_enumerationMutation(v7);
        v13 = *(void **)(*((_QWORD *)&v37 + 1) + 8 * i);
        objc_msgSend(v13, "home");
        v14 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v14, "uuid");
        v15 = (void *)objc_claimAutoreleasedReturnValue();

        if (v15)
        {
          objc_msgSend(v6, "hmf_mutableArrayForKey:", v15);
          v16 = (void *)objc_claimAutoreleasedReturnValue();
          if (!v16)
          {
            objc_msgSend(MEMORY[0x24BDBCEB8], "array");
            v16 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v6, "setObject:forKey:", v16, v15);
          }
          objc_msgSend(v16, "addObject:", v13);

        }
        else
        {
          v17 = (void *)MEMORY[0x227676638]();
          HMFGetOSLogHandle();
          v18 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
          {
            HMFGetLogIdentifier();
            v19 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 138543618;
            v43 = v19;
            v44 = 2112;
            v45 = v13;
            _os_log_impl(&dword_2218F0000, v18, OS_LOG_TYPE_DEFAULT, "%{public}@###### Unassociated accessory %@ - dropping", buf, 0x16u);

          }
          objc_autoreleasePoolPop(v17);
          v10 = 1;
        }

      }
      v9 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v37, v46, 16);
    }
    while (v9);
  }
  else
  {
    v10 = 0;
  }

  v35 = 0u;
  v36 = 0u;
  v33 = 0u;
  v34 = 0u;
  v20 = v32;
  v21 = objc_msgSend(v20, "countByEnumeratingWithState:objects:count:", &v33, v41, 16);
  if (v21)
  {
    v22 = v21;
    v23 = *(_QWORD *)v34;
    do
    {
      for (j = 0; j != v22; ++j)
      {
        if (*(_QWORD *)v34 != v23)
          objc_enumerationMutation(v20);
        v25 = *(void **)(*((_QWORD *)&v33 + 1) + 8 * j);
        objc_msgSend(v25, "accessories");
        v26 = (void *)objc_claimAutoreleasedReturnValue();
        v27 = objc_msgSend(v26, "count");

        if (!v27)
        {
          objc_msgSend(v25, "uuid");
          v28 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v6, "hmf_mutableArrayForKey:", v28);
          v29 = (void *)objc_claimAutoreleasedReturnValue();

          objc_msgSend(v25, "setAccessories:", v29);
          objc_msgSend(v25, "uuid");
          v30 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v6, "removeObjectForKey:", v30);

        }
      }
      v22 = objc_msgSend(v20, "countByEnumeratingWithState:objects:count:", &v33, v41, 16);
    }
    while (v22);
  }

  return v10 & 1;
}

- (BOOL)_setPrimaryHome:(id)a3 idsDataSync:(BOOL)a4
{
  _BOOL4 v4;
  id v6;
  void *v7;
  id v8;
  void *v9;
  uint64_t v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  char v16;
  BOOL v17;
  void *v18;
  NSObject *v19;
  void *v20;
  void *v21;
  void *v22;
  id v23;
  int v25;
  void *v26;
  __int16 v27;
  void *v28;
  __int16 v29;
  void *v30;
  uint64_t v31;

  v4 = a4;
  v31 = *MEMORY[0x24BDAC8D0];
  v6 = a3;
  -[HMDHomeManager primaryHomeUUID](self, "primaryHomeUUID");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = v6;
  -[HMDHomeManager homes](self, "homes");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = objc_msgSend(v9, "count");

  if (v10)
  {
    if (!v8)
      goto LABEL_5;
    if (v4)
    {
      isWatch();
LABEL_5:
      -[HMDHomeManager homes](self, "homes");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v11, "hmf_firstObjectWithUUID:", v7);
      v12 = (void *)objc_claimAutoreleasedReturnValue();

      if (!v12)
      {
        -[HMDHomeManager homes](self, "homes");
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v13, "firstObject");
        v14 = (void *)objc_claimAutoreleasedReturnValue();

        objc_msgSend(v14, "uuid");
        v15 = (void *)objc_claimAutoreleasedReturnValue();

        v16 = HMFEqualObjects();
        if ((v16 & 1) == 0)
          goto LABEL_12;
LABEL_9:
        v17 = 0;
        goto LABEL_15;
      }
LABEL_11:
      v17 = 0;
      v15 = v8;
      goto LABEL_15;
    }
    v15 = v8;
    if ((HMFEqualObjects() & 1) != 0)
      goto LABEL_11;
  }
  else
  {

    v15 = 0;
    if ((HMFEqualObjects() & 1) != 0)
      goto LABEL_9;
  }
LABEL_12:
  v18 = (void *)MEMORY[0x227676638]();
  HMFGetOSLogHandle();
  v19 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "UUIDString");
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v15, "UUIDString");
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    v25 = 138543874;
    v26 = v20;
    v27 = 2112;
    v28 = v21;
    v29 = 2112;
    v30 = v22;
    _os_log_impl(&dword_2218F0000, v19, OS_LOG_TYPE_INFO, "%{public}@Updating the primary home from %@ to %@", (uint8_t *)&v25, 0x20u);

  }
  objc_autoreleasePoolPop(v18);
  -[HMDHomeManager setPrimaryHomeUUID:](self, "setPrimaryHomeUUID:", v15);
  v23 = -[HMDHomeManager _nominateCurrentHomeUUID](self, "_nominateCurrentHomeUUID");
  v17 = 1;
LABEL_15:

  return v17;
}

- (void)_registerForMessages
{
  void *v3;
  HMDHomeManager *v4;
  NSObject *v5;
  void *v6;
  void *v7;
  void *v8;
  HMDHomeManager *v9;
  NSObject *v10;
  void *v11;
  HMDRemoteAccountMessageFilter *v12;
  void *v13;
  void *v14;
  uint64_t v15;
  void *v16;
  void *v17;
  void *v18;
  uint64_t v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  uint64_t v24;
  void *v25;
  void *v26;
  uint64_t v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  uint64_t v36;
  void *v37;
  void *v38;
  void *v39;
  HMDPendingInvitedUserMessagePolicy *v40;
  void *v41;
  void **p_vtable;
  void *v43;
  void *v44;
  void *v45;
  void *v46;
  void *v47;
  void *v48;
  void *v49;
  void *v50;
  void *v51;
  void *v52;
  void *v53;
  void *v54;
  void *v55;
  uint64_t v56;
  void *v57;
  void *v58;
  void *v59;
  void *v60;
  void *v61;
  void *v62;
  void *v63;
  void *v64;
  void *v65;
  void *v66;
  void *v67;
  void *v68;
  void *v69;
  void *v70;
  void *v71;
  void *v72;
  int v73;
  void *v74;
  void *v75;
  void *v76;
  void *v77;
  void *v78;
  void *v79;
  void *v80;
  void *v81;
  void *v82;
  void *v83;
  void *v84;
  void *v85;
  void *v86;
  void *v87;
  void *v88;
  void *v89;
  void *v90;
  void *v91;
  void *v92;
  void *v93;
  void *v94;
  void *v95;
  void *v96;
  void *v97;
  uint64_t v98;
  void *v99;
  void *v100;
  void *v101;
  uint64_t v102;
  void *v103;
  void *v104;
  void *v105;
  uint64_t v106;
  void *v107;
  void *v108;
  void *v109;
  uint64_t v110;
  void *v111;
  void *v112;
  void *v113;
  uint64_t v114;
  void *v115;
  void *v116;
  void *v117;
  void *v118;
  void *v119;
  uint64_t v120;
  void *v121;
  void *v122;
  void *v123;
  void *v124;
  void *v125;
  uint64_t v126;
  void *v127;
  void *v128;
  void *v129;
  void *v130;
  void *v131;
  void *v132;
  void *v133;
  uint64_t v134;
  void *v135;
  void *v136;
  void *v137;
  uint64_t v138;
  void *v139;
  void *v140;
  void *v141;
  uint64_t v142;
  void *v143;
  void *v144;
  void *v145;
  uint64_t v146;
  void *v147;
  void *v148;
  void *v149;
  uint64_t v150;
  void *v151;
  void *v152;
  void *v153;
  void *v154;
  void *v155;
  void *v156;
  void *v157;
  void *v158;
  void *v159;
  void *v160;
  uint64_t v161;
  void *v162;
  void *v163;
  void *v164;
  void *v165;
  void *v166;
  void *v167;
  void *v168;
  uint64_t v169;
  void *v170;
  void *v171;
  void *v172;
  uint64_t v173;
  void *v174;
  void *v175;
  void *v176;
  uint64_t v177;
  void *v178;
  void *v179;
  void *v180;
  uint64_t v181;
  void *v182;
  void *v183;
  void *v184;
  void *v185;
  void *v186;
  void *v187;
  void *v188;
  void *v189;
  void *v190;
  void *v191;
  void *v192;
  void *v193;
  uint64_t v194;
  void *v195;
  void *v196;
  void *v197;
  uint64_t v198;
  void *v199;
  void *v200;
  void *v201;
  uint64_t v202;
  void *v203;
  void *v204;
  void *v205;
  uint64_t v206;
  void *v207;
  void *v208;
  void *v209;
  uint64_t v210;
  void *v211;
  void *v212;
  void *v213;
  uint64_t v214;
  void *v215;
  void *v216;
  void *v217;
  uint64_t v218;
  void *v219;
  void *v220;
  void *v221;
  uint64_t v222;
  void *v223;
  void *v224;
  void *v225;
  void *v226;
  uint64_t v227;
  void *v228;
  void *v229;
  void *v230;
  void *v231;
  uint64_t v232;
  void *v233;
  void *v234;
  void *v235;
  uint64_t v236;
  void *v237;
  void *v238;
  void *v239;
  uint64_t v240;
  void *v241;
  void *v242;
  void *v243;
  void *v244;
  uint64_t v245;
  void *v246;
  void *v247;
  void *v248;
  uint64_t v249;
  void *v250;
  void *v251;
  void *v252;
  uint64_t v253;
  void *v254;
  void *v255;
  void *v256;
  uint64_t v257;
  void *v258;
  void *v259;
  void *v260;
  uint64_t v261;
  void *v262;
  void *v263;
  void *v264;
  void *v265;
  void *v266;
  uint64_t v267;
  void *v268;
  void *v269;
  void *v270;
  void *v271;
  void *v272;
  void *v273;
  void *v274;
  void *v275;
  void *v276;
  void *v277;
  void *v278;
  void *v279;
  void *v280;
  void *v281;
  void *v282;
  void *v283;
  void *v284;
  void *v285;
  void *v286;
  void *v287;
  void *v288;
  void *v289;
  void *v290;
  uint64_t v291;
  uint64_t v292;
  void *v293;
  void *v294;
  HMDPendingInvitedUserMessagePolicy *v295;
  void *v296;
  void *v297;
  void *v298;
  void *v299;
  void *v300;
  void *v301;
  void *v302;
  void *v303;
  void *v304;
  void *v305;
  void *v306;
  void *v307;
  void *v308;
  _QWORD v309[2];
  void *v310;
  void *v311;
  _QWORD v312[2];
  _QWORD v313[2];
  void *v314;
  void *v315;
  void *v316;
  void *v317;
  void *v318;
  void *v319;
  void *v320;
  void *v321;
  void *v322;
  void *v323;
  void *v324;
  void *v325;
  void *v326;
  void *v327;
  void *v328;
  _QWORD v329[2];
  void *v330;
  void *v331;
  void *v332;
  void *v333;
  void *v334;
  void *v335;
  void *v336;
  void *v337;
  void *v338;
  _QWORD v339[2];
  _QWORD v340[2];
  _QWORD v341[2];
  _QWORD v342[2];
  void *v343;
  void *v344;
  void *v345;
  void *v346;
  void *v347;
  void *v348;
  void *v349;
  void *v350;
  void *v351;
  void *v352;
  _QWORD v353[2];
  void *v354;
  void *v355;
  void *v356;
  void *v357;
  uint64_t v358;
  void *v359;
  _QWORD v360[2];
  _QWORD v361[2];
  _QWORD v362[2];
  _QWORD v363[2];
  _QWORD v364[2];
  _QWORD v365[2];
  _QWORD v366[3];
  _QWORD v367[2];
  _QWORD v368[8];
  uint8_t buf[4];
  void *v370;
  uint64_t v371;

  v371 = *MEMORY[0x24BDAC8D0];
  v3 = (void *)MEMORY[0x227676638](self, a2);
  v4 = self;
  HMFGetOSLogHandle();
  v5 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
  {
    HMFGetLogIdentifier();
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543362;
    v370 = v6;
    _os_log_impl(&dword_2218F0000, v5, OS_LOG_TYPE_DEBUG, "%{public}@Registering for contact store change notifications", buf, 0xCu);

  }
  objc_autoreleasePoolPop(v3);
  -[HMDHomeManager notificationCenter](v4, "notificationCenter");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "addObserver:selector:name:object:", v4, sel_handleContactStoreChanged_, *MEMORY[0x24BDBA3D0], 0);

  v8 = (void *)MEMORY[0x227676638]();
  v9 = v4;
  HMFGetOSLogHandle();
  v10 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
  {
    HMFGetLogIdentifier();
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543362;
    v370 = v11;
    _os_log_impl(&dword_2218F0000, v10, OS_LOG_TYPE_DEBUG, "%{public}@Registering remote account message filter", buf, 0xCu);

  }
  objc_autoreleasePoolPop(v8);
  v12 = [HMDRemoteAccountMessageFilter alloc];
  -[HMDHomeManager messageDestination](v9, "messageDestination");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  v368[0] = CFSTR("kAccessHomeInviteRequestKey");
  v368[1] = CFSTR("kHomeDataSyncRequestKey");
  v368[2] = CFSTR("kHomeDataFragmentedSyncRequestKey");
  v368[3] = CFSTR("kUpdateHomeInvitationStateInternalRequestKey");
  v368[4] = CFSTR("kUserRemovedRequestKey");
  v368[5] = CFSTR("kUserResetHomeConfigRequestKey");
  v368[6] = CFSTR("kElectDeviceForIDSSessionKey");
  v368[7] = CFSTR("HMDHomeManagerSharedUserMigratedToHH2MessageKey");
  objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", v368, 8);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  v15 = -[HMDRemoteAccountMessageFilter initWithTarget:allowedMessages:](v12, "initWithTarget:allowedMessages:", v13, v14);

  -[HMDHomeManager msgFilterChain](v9, "msgFilterChain");
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  v299 = (void *)v15;
  objc_msgSend(v16, "addMessageFilter:", v15);

  +[HMDRemoteMessagePolicy defaultPolicy](HMDMutableRemoteMessagePolicy, "defaultPolicy");
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v17, "setRequiresSecureMessage:", 0);
  objc_msgSend(v17, "setRequiresAccountMessage:", 0);
  objc_msgSend(v17, "setTransportRestriction:", -1);
  v298 = v17;
  v300 = (void *)objc_msgSend(v17, "copy");
  -[HMDHomeManager messageDispatcher](v9, "messageDispatcher");
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  v19 = *MEMORY[0x24BDD5238];
  +[HMDXPCMessagePolicy policyWithEntitlements:](HMDXPCMessagePolicy, "policyWithEntitlements:", 5);
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  v367[0] = v20;
  +[HMDXPCBackgroundMessagePolicy policyWithEntitlementRequirement:](HMDXPCBackgroundMessagePolicy, "policyWithEntitlementRequirement:", 0);
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  v367[1] = v21;
  objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", v367, 2);
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v18, "registerForMessage:receiver:policies:selector:", v19, v9, v22, sel___handleActiveAssertion_);

  -[HMDHomeManager initHomeManagerFrameworkNotify](v9, "initHomeManagerFrameworkNotify");
  -[HMDHomeManager messageDispatcher](v9, "messageDispatcher");
  v23 = (void *)objc_claimAutoreleasedReturnValue();
  v24 = *MEMORY[0x24BDD5FA8];
  +[HMDXPCMessagePolicy policyWithEntitlements:](HMDXPCMessagePolicy, "policyWithEntitlements:", 1);
  v25 = (void *)objc_claimAutoreleasedReturnValue();
  v366[0] = v25;
  +[HMDXPCBackgroundMessagePolicy policyWithEntitlementRequirement:](HMDXPCBackgroundMessagePolicy, "policyWithEntitlementRequirement:", 0);
  v26 = (void *)objc_claimAutoreleasedReturnValue();
  v366[1] = v26;
  v291 = *MEMORY[0x24BDD63E8];
  v27 = *MEMORY[0x24BDD63E8];
  v292 = *MEMORY[0x24BDD5C70];
  v365[0] = *MEMORY[0x24BDD5C70];
  v365[1] = v27;
  objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", v365, 2);
  v28 = (void *)objc_claimAutoreleasedReturnValue();
  +[HMDXPCiCloudSwitchMessagePolicy policyWithBundleIdentifiers:](HMDXPCiCloudSwitchMessagePolicy, "policyWithBundleIdentifiers:", v28);
  v29 = (void *)objc_claimAutoreleasedReturnValue();
  v366[2] = v29;
  objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", v366, 3);
  v30 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v23, "registerForMessage:receiver:policies:selector:", v24, v9, v30, sel__handleRequestFetchHomeConfiguration_);

  -[HMDHomeManager messageDispatcher](v9, "messageDispatcher");
  v31 = (void *)objc_claimAutoreleasedReturnValue();
  +[HMDConfigurationMessagePolicy policyWithOperationTypes:](HMDConfigurationMessagePolicy, "policyWithOperationTypes:", 4);
  v32 = (void *)objc_claimAutoreleasedReturnValue();
  v364[0] = v32;
  +[HMDXPCMessagePolicy policyWithEntitlements:](HMDXPCMessagePolicy, "policyWithEntitlements:", 1);
  v33 = (void *)objc_claimAutoreleasedReturnValue();
  v364[1] = v33;
  objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", v364, 2);
  v34 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v31, "registerForMessage:receiver:policies:selector:", CFSTR("kRemoveHomeRequestKey"), v9, v34, sel__handleRequestRemoveHome_);

  +[HMDRemoteMessagePolicy defaultPolicy](HMDMutableRemoteMessagePolicy, "defaultPolicy");
  v35 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v35, "setRequiresAccountMessage:", 1);
  v297 = v35;
  v36 = objc_msgSend(v35, "copy");
  -[HMDHomeManager messageDispatcher](v9, "messageDispatcher");
  v37 = (void *)objc_claimAutoreleasedReturnValue();
  +[HMDConfigurationMessagePolicy policyWithOperationTypes:](HMDConfigurationMessagePolicy, "policyWithOperationTypes:", 4);
  v38 = (void *)objc_claimAutoreleasedReturnValue();
  v363[0] = v38;
  v296 = (void *)v36;
  v363[1] = v36;
  objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", v363, 2);
  v39 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v37, "registerForMessage:receiver:policies:selector:", CFSTR("kRemoveAllUsersFromAccessoriesRequestKey"), v9, v39, sel__handleRemoveAllUsersFromAccessories_);

  v40 = -[HMDPendingInvitedUserMessagePolicy initWithHomeManager:]([HMDPendingInvitedUserMessagePolicy alloc], "initWithHomeManager:", v9);
  -[HMDHomeManager messageDispatcher](v9, "messageDispatcher");
  v41 = (void *)objc_claimAutoreleasedReturnValue();
  v295 = v40;
  v362[0] = v40;
  v362[1] = v300;
  p_vtable = HMDTrigger.vtable;
  objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", v362, 2);
  v43 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v41, "registerForMessage:receiver:policies:selector:", CFSTR("HMDHomeManagerSharedUserMigratedToHH2MessageKey"), v9, v43, sel__handleSharedUserMovedToHH2_);

  -[HMDHomeManager messageDispatcher](v9, "messageDispatcher");
  v44 = (void *)objc_claimAutoreleasedReturnValue();
  +[HMDConfigurationMessagePolicy policyWithOperationTypes:](HMDConfigurationMessagePolicy, "policyWithOperationTypes:", 1);
  v45 = (void *)objc_claimAutoreleasedReturnValue();
  v361[0] = v45;
  +[HMDXPCMessagePolicy policyWithEntitlements:](HMDXPCMessagePolicy, "policyWithEntitlements:", 1);
  v46 = (void *)objc_claimAutoreleasedReturnValue();
  v361[1] = v46;
  objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", v361, 2);
  v47 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v44, "registerForMessage:receiver:policies:selector:", CFSTR("kAddHomeRequestKey"), v9, v47, sel__handleRequestAddHome_);

  -[HMDHomeManager messageDispatcher](v9, "messageDispatcher");
  v48 = (void *)objc_claimAutoreleasedReturnValue();
  +[HMDConfigurationMessagePolicy policyWithOperationTypes:](HMDConfigurationMessagePolicy, "policyWithOperationTypes:", 2);
  v49 = (void *)objc_claimAutoreleasedReturnValue();
  v360[0] = v49;
  +[HMDXPCMessagePolicy policyWithEntitlements:](HMDXPCMessagePolicy, "policyWithEntitlements:", 1);
  v50 = (void *)objc_claimAutoreleasedReturnValue();
  v360[1] = v50;
  objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", v360, 2);
  v51 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v48, "registerForMessage:receiver:policies:selector:", CFSTR("kSetPrimaryHomeRequestKey"), v9, v51, sel__handleRequestSetPrimaryHome_);

  -[HMDHomeManager messageDispatcher](v9, "messageDispatcher");
  v52 = (void *)objc_claimAutoreleasedReturnValue();
  +[HMDXPCMessagePolicy policyWithEntitlements:](HMDXPCMessagePolicy, "policyWithEntitlements:", 5);
  v53 = (void *)objc_claimAutoreleasedReturnValue();
  v359 = v53;
  objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", &v359, 1);
  v54 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v52, "registerForMessage:receiver:policies:selector:", CFSTR("kQueryHomeKitUsageStateRequestKey"), v9, v54, sel__handleRequestIsUserUsingHomeKit_);

  +[HMDRemoteMessagePolicy defaultPolicy](HMDMutableRemoteMessagePolicy, "defaultPolicy");
  v55 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v55, "setRequiresSecureMessage:", 0);
  objc_msgSend(v55, "setAllowsAnonymousMessage:", 1);
  v293 = v55;
  v56 = objc_msgSend(v55, "copy");
  -[HMDHomeManager messageDispatcher](v9, "messageDispatcher");
  v57 = (void *)objc_claimAutoreleasedReturnValue();
  v294 = (void *)v56;
  v358 = v56;
  objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", &v358, 1);
  v58 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v57, "registerForMessage:receiver:policies:selector:", CFSTR("kElectDeviceForIDSSessionKey"), v9, v58, sel__handleElectDeviceForIDSSession_);

  +[HMDDeviceCapabilities deviceCapabilities](HMDDeviceCapabilities, "deviceCapabilities");
  v59 = (void *)objc_claimAutoreleasedReturnValue();
  LODWORD(v58) = objc_msgSend(v59, "supportsHomeInvitation");

  if ((_DWORD)v58)
  {
    -[HMDHomeManager messageDispatcher](v9, "messageDispatcher");
    v60 = (void *)objc_claimAutoreleasedReturnValue();
    v357 = v300;
    objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", &v357, 1);
    v61 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v60, "registerForMessage:receiver:policies:selector:", CFSTR("kAccessHomeInviteRequestKey"), v9, v61, sel__handleAccessHomeInvite_);

  }
  if (isAppleTV())
  {
    +[HMDRemoteMessagePolicy defaultPolicy](HMDMutableRemoteMessagePolicy, "defaultPolicy");
    v62 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v62, "setRequiresSecureMessage:", 0);
    objc_msgSend(v62, "setRequiresAccountMessage:", 1);
    objc_msgSend(v62, "setTransportRestriction:", -1);
    v63 = (void *)objc_msgSend(v62, "copy");
    -[HMDHomeManager messageDispatcher](v9, "messageDispatcher");
    v64 = (void *)objc_claimAutoreleasedReturnValue();
    v356 = v63;
    objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", &v356, 1);
    v65 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v64, "registerForMessage:receiver:policies:selector:", CFSTR("kAddRemoteAccessRequestKey"), v9, v65, sel__handleAddRemoteAccessRequest_);

    -[HMDHomeManager messageDispatcher](v9, "messageDispatcher");
    v66 = (void *)objc_claimAutoreleasedReturnValue();
    v355 = v63;
    objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", &v355, 1);
    v67 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v66, "registerForMessage:receiver:policies:selector:", CFSTR("kDoYouSeeUnpairedAccessoriesKey"), v9, v67, sel__handleDoYouSeeUnpairedAccessories_);

    +[HMDRemoteMessagePolicy defaultPolicy](HMDMutableRemoteMessagePolicy, "defaultPolicy");
    v68 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v68, "setAllowsAnonymousMessage:", 1);
    v69 = (void *)objc_msgSend(v68, "copy");
    -[HMDHomeManager messageDispatcher](v9, "messageDispatcher");
    v70 = (void *)objc_claimAutoreleasedReturnValue();
    v354 = v69;
    objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", &v354, 1);
    v71 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v70, "registerForMessage:receiver:policies:selector:", CFSTR("kAreYouAtHomeRequestKey"), v9, v71, sel__handleAreYouAtHome_);

    p_vtable = HMDTrigger.vtable;
  }
  +[HMDDeviceCapabilities deviceCapabilities](HMDDeviceCapabilities, "deviceCapabilities");
  v72 = (void *)objc_claimAutoreleasedReturnValue();
  v73 = objc_msgSend(v72, "isResidentCapable");

  if (v73)
  {
    -[HMDHomeManager messageDispatcher](v9, "messageDispatcher");
    v74 = (void *)objc_claimAutoreleasedReturnValue();
    +[HMDConfigurationMessagePolicy policyWithOperationTypes:](HMDConfigurationMessagePolicy, "policyWithOperationTypes:", 7);
    v75 = (void *)objc_claimAutoreleasedReturnValue();
    v353[0] = v75;
    +[HMDXPCMessagePolicy policyWithEntitlements:](HMDXPCMessagePolicy, "policyWithEntitlements:", 5);
    v76 = (void *)objc_claimAutoreleasedReturnValue();
    v353[1] = v76;
    objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", v353, 2);
    v77 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v74, "registerForMessage:receiver:policies:selector:", CFSTR("kUpdateResidentEnabledOnThisDeviceRequestKey"), v9, v77, sel__handleEnableResidentForThisDeviceRequest_);

    p_vtable = (void **)(HMDTrigger + 24);
  }
  if (+[HMDDeviceCapabilities supportsDismissUserNotificationAndDialog](HMDDeviceCapabilities, "supportsDismissUserNotificationAndDialog"))
  {
    +[HMDRemoteMessagePolicy defaultPolicy](HMDMutableRemoteMessagePolicy, "defaultPolicy");
    v78 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v78, "setRequiresSecureMessage:", 0);
    objc_msgSend(v78, "setRequiresAccountMessage:", 1);
    objc_msgSend(v78, "setTransportRestriction:", -1);
    v79 = (void *)objc_msgSend(v78, "copy");
    -[HMDHomeManager messageDispatcher](v9, "messageDispatcher");
    v80 = (void *)objc_claimAutoreleasedReturnValue();
    v352 = v79;
    objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", &v352, 1);
    v81 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v80, "registerForMessage:receiver:policies:selector:", CFSTR("kDismissBulletinInternalRequestKey"), v9, v81, sel__handleDismissBulletinRequest_);

    -[HMDHomeManager messageDispatcher](v9, "messageDispatcher");
    v82 = (void *)objc_claimAutoreleasedReturnValue();
    v351 = v79;
    objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", &v351, 1);
    v83 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v82, "registerForMessage:receiver:policies:selector:", CFSTR("kDismissDialogInternalRequestKey"), v9, v83, sel__handleDismissDialogRequest_);

    p_vtable = HMDTrigger.vtable;
  }
  if (isiOSDevice() || isWatch())
  {
    -[HMDHomeManager messageDispatcher](v9, "messageDispatcher");
    v84 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(p_vtable + 182, "policyWithEntitlements:", 5);
    v85 = (void *)objc_claimAutoreleasedReturnValue();
    v350 = v85;
    objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", &v350, 1);
    v86 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v84, "registerForMessage:receiver:policies:selector:", CFSTR("kUpdateAccessAllowedWhenLockedRequestKey"), v9, v86, sel__handleAccessAllowedWhenLockedRequest_);

  }
  +[HMDRemoteMessagePolicy defaultSecurePolicy](HMDMutableRemoteMessagePolicy, "defaultSecurePolicy");
  v87 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v87, "setAllowsAnonymousMessage:", 1);
  v88 = (void *)objc_msgSend(v87, "copy");
  -[HMDHomeManager messageDispatcher](v9, "messageDispatcher");
  v89 = (void *)objc_claimAutoreleasedReturnValue();
  v349 = v88;
  objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", &v349, 1);
  v90 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v89, "registerForMessage:receiver:policies:selector:", CFSTR("kUserRemovedRequestKey"), v9, v90, sel__handleUserRemoved_);

  -[HMDHomeManager messageDispatcher](v9, "messageDispatcher");
  v91 = (void *)objc_claimAutoreleasedReturnValue();
  v348 = v88;
  objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", &v348, 1);
  v92 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v91, "registerForMessage:receiver:policies:selector:", CFSTR("kUserResetHomeConfigRequestKey"), v9, v92, sel__handleResetHome_);

  isWatch();
  -[HMDHomeManager _registerForAppleMediaMessages](v9, "_registerForAppleMediaMessages");
  if (isiOSDevice())
  {
    +[HMDRemoteMessagePolicy defaultPolicy](HMDMutableRemoteMessagePolicy, "defaultPolicy");
    v93 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v93, "setRequiresSecureMessage:", 1);
    objc_msgSend(v93, "setRoles:", 2);
    v94 = (void *)objc_msgSend(v93, "copy");
    -[HMDHomeManager messageDispatcher](v9, "messageDispatcher");
    v95 = (void *)objc_claimAutoreleasedReturnValue();
    v347 = v94;
    objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", &v347, 1);
    v96 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v95, "registerForMessage:receiver:policies:selector:", CFSTR("kRetrieveVendorIdentifierInternalKey"), v9, v96, sel__handleRetrieveVendorIdentifier_);

    if (isInternalBuild())
    {
      -[HMDHomeManager messageDispatcher](v9, "messageDispatcher");
      v97 = (void *)objc_claimAutoreleasedReturnValue();
      v98 = *MEMORY[0x24BDD6168];
      +[HMDXPCMessagePolicy policyWithEntitlements:](HMDXPCMessagePolicy, "policyWithEntitlements:", 5);
      v99 = (void *)objc_claimAutoreleasedReturnValue();
      v346 = v99;
      objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", &v346, 1);
      v100 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v97, "registerForMessage:receiver:policies:selector:", v98, v9, v100, sel__handleKeyRoll_);

      -[HMDHomeManager messageDispatcher](v9, "messageDispatcher");
      v101 = (void *)objc_claimAutoreleasedReturnValue();
      v102 = *MEMORY[0x24BDD60F0];
      +[HMDXPCMessagePolicy policyWithEntitlements:](HMDXPCMessagePolicy, "policyWithEntitlements:", 5);
      v103 = (void *)objc_claimAutoreleasedReturnValue();
      v345 = v103;
      objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", &v345, 1);
      v104 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v101, "registerForMessage:receiver:policies:selector:", v102, v9, v104, sel_handleRollPreferredHH2ControllerKeyMessage_);

    }
  }
  if (isInternalBuild())
  {
    -[HMDHomeManager messageDispatcher](v9, "messageDispatcher");
    v105 = (void *)objc_claimAutoreleasedReturnValue();
    v106 = *MEMORY[0x24BDD5EB8];
    +[HMDXPCMessagePolicy policyWithEntitlements:](HMDXPCMessagePolicy, "policyWithEntitlements:", 5);
    v107 = (void *)objc_claimAutoreleasedReturnValue();
    v344 = v107;
    objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", &v344, 1);
    v108 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v105, "registerForMessage:receiver:policies:selector:", v106, v9, v108, sel_handleDeleteModelMessage_);

    -[HMDHomeManager messageDispatcher](v9, "messageDispatcher");
    v109 = (void *)objc_claimAutoreleasedReturnValue();
    v110 = *MEMORY[0x24BDD5E88];
    +[HMDXPCMessagePolicy policyWithEntitlements:](HMDXPCMessagePolicy, "policyWithEntitlements:", 5);
    v111 = (void *)objc_claimAutoreleasedReturnValue();
    v343 = v111;
    objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", &v343, 1);
    v112 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v109, "registerForMessage:receiver:policies:selector:", v110, v9, v112, sel_handleCheckIsUsingProductionObjectModelMessage_);

  }
  -[HMDHomeManager _registerForFrameworkSwitch](v9, "_registerForFrameworkSwitch");
  if (+[HMDAppleAccountSettings supportsCloudSettings](HMDAppleAccountSettings, "supportsCloudSettings"))
  {
    -[HMDHomeManager messageDispatcher](v9, "messageDispatcher");
    v113 = (void *)objc_claimAutoreleasedReturnValue();
    v114 = *MEMORY[0x24BDD60D8];
    +[HMDXPCMessagePolicy policyWithEntitlements:](HMDXPCMessagePolicy, "policyWithEntitlements:", 5);
    v115 = (void *)objc_claimAutoreleasedReturnValue();
    v341[0] = v292;
    v341[1] = v291;
    v342[0] = v115;
    objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", v341, 2);
    v116 = (void *)objc_claimAutoreleasedReturnValue();
    +[HMDXPCiCloudSwitchMessagePolicy policyWithBundleIdentifiers:](HMDXPCiCloudSwitchMessagePolicy, "policyWithBundleIdentifiers:", v116);
    v117 = (void *)objc_claimAutoreleasedReturnValue();
    v342[1] = v117;
    objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", v342, 2);
    v118 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v113, "registerForMessage:receiver:policies:selector:", v114, v9, v118, sel__handleQueryiCloudSwitchState_);

    -[HMDHomeManager messageDispatcher](v9, "messageDispatcher");
    v119 = (void *)objc_claimAutoreleasedReturnValue();
    v120 = *MEMORY[0x24BDD6178];
    +[HMDXPCMessagePolicy policyWithEntitlements:](HMDXPCMessagePolicy, "policyWithEntitlements:", 5);
    v121 = (void *)objc_claimAutoreleasedReturnValue();
    v339[1] = v291;
    v340[0] = v121;
    v339[0] = v292;
    objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", v339, 2);
    v122 = (void *)objc_claimAutoreleasedReturnValue();
    +[HMDXPCiCloudSwitchMessagePolicy policyWithBundleIdentifiers:](HMDXPCiCloudSwitchMessagePolicy, "policyWithBundleIdentifiers:", v122);
    v123 = (void *)objc_claimAutoreleasedReturnValue();
    v340[1] = v123;
    objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", v340, 2);
    v124 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v119, "registerForMessage:receiver:policies:selector:", v120, v9, v124, sel__handleUpdateiCloudSwitchState_);

  }
  -[HMDHomeManager messageDispatcher](v9, "messageDispatcher");
  v125 = (void *)objc_claimAutoreleasedReturnValue();
  v126 = *MEMORY[0x24BDD60B8];
  +[HMDXPCMessagePolicy policyWithEntitlements:](HMDXPCMessagePolicy, "policyWithEntitlements:", 1);
  v127 = (void *)objc_claimAutoreleasedReturnValue();
  v338 = v127;
  objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", &v338, 1);
  v128 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v125, "registerForMessage:receiver:policies:selector:", v126, v9, v128, sel__handleQueryHomeNamespace_);

  -[HMDHomeManager messageDispatcher](v9, "messageDispatcher");
  v129 = (void *)objc_claimAutoreleasedReturnValue();
  +[HMDXPCMessagePolicy policyWithEntitlements:](HMDXPCMessagePolicy, "policyWithEntitlements:", 5);
  v130 = (void *)objc_claimAutoreleasedReturnValue();
  v337 = v130;
  objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", &v337, 1);
  v131 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v129, "registerForMessage:receiver:policies:selector:", CFSTR("kResetConfigRequestKey"), v9, v131, sel__handleResetConfiguration_);

  -[HMDHomeManager messageDispatcher](v9, "messageDispatcher");
  v132 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v132, "registerForMessage:receiver:policies:selector:", CFSTR("kRemoteSessionTornDownNotificationKey"), v9, MEMORY[0x24BDBD1A8], sel__handleRemoteSessionTornDown_);

  objc_msgSend(MEMORY[0x24BE3F260], "productInfo");
  v133 = (void *)objc_claimAutoreleasedReturnValue();
  v134 = objc_msgSend(v133, "productVariant");

  if (v134 == 3)
  {
    +[HMDXPCMessagePolicy policyWithEntitlements:](HMDXPCMessagePolicy, "policyWithEntitlements:", 5);
    v135 = (void *)objc_claimAutoreleasedReturnValue();
    v336 = v135;
    objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", &v336, 1);
    v136 = (void *)objc_claimAutoreleasedReturnValue();

    -[HMDHomeManager messageDispatcher](v9, "messageDispatcher");
    v137 = (void *)objc_claimAutoreleasedReturnValue();
    v138 = *MEMORY[0x24BDD60C0];
    +[HMDXPCMessagePolicy policyWithEntitlements:](HMDXPCMessagePolicy, "policyWithEntitlements:", 5);
    v139 = (void *)objc_claimAutoreleasedReturnValue();
    v335 = v139;
    objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", &v335, 1);
    v140 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v137, "registerForMessage:receiver:policies:selector:", v138, v9, v140, sel__handleQueryMetadata_);

    -[HMDHomeManager messageDispatcher](v9, "messageDispatcher");
    v141 = (void *)objc_claimAutoreleasedReturnValue();
    v142 = *MEMORY[0x24BDD6120];
    +[HMDXPCMessagePolicy policyWithEntitlements:](HMDXPCMessagePolicy, "policyWithEntitlements:", 5);
    v143 = (void *)objc_claimAutoreleasedReturnValue();
    v334 = v143;
    objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", &v334, 1);
    v144 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v141, "registerForMessage:receiver:policies:selector:", v142, v9, v144, sel__handleSetMetadata_);

    -[HMDHomeManager messageDispatcher](v9, "messageDispatcher");
    v145 = (void *)objc_claimAutoreleasedReturnValue();
    v146 = *MEMORY[0x24BDD60D0];
    +[HMDXPCMessagePolicy policyWithEntitlements:](HMDXPCMessagePolicy, "policyWithEntitlements:", 5);
    v147 = (void *)objc_claimAutoreleasedReturnValue();
    v333 = v147;
    objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", &v333, 1);
    v148 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v145, "registerForMessage:receiver:policies:selector:", v146, v9, v148, sel__handleQueryVersionInformation_);

    -[HMDHomeManager messageDispatcher](v9, "messageDispatcher");
    v149 = (void *)objc_claimAutoreleasedReturnValue();
    v150 = *MEMORY[0x24BDD5F50];
    +[HMDXPCMessagePolicy policyWithEntitlements:](HMDXPCMessagePolicy, "policyWithEntitlements:", 5);
    v151 = (void *)objc_claimAutoreleasedReturnValue();
    v332 = v151;
    objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", &v332, 1);
    v152 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v149, "registerForMessage:receiver:policies:selector:", v150, v9, v152, sel__handleDumpState_);

    -[HMDHomeManager messageDispatcher](v9, "messageDispatcher");
    v153 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v153, "registerForMessage:receiver:policies:selector:", *MEMORY[0x24BDD5F90], v9, v136, sel__handleDiagnosticInfo_);

    -[HMDHomeManager messageDispatcher](v9, "messageDispatcher");
    v154 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v154, "registerForMessage:receiver:policies:selector:", *MEMORY[0x24BDD6070], v9, v136, sel__handleNetworkMismatchInfo_);

  }
  -[HMDHomeManager messageDispatcher](v9, "messageDispatcher");
  v155 = (void *)objc_claimAutoreleasedReturnValue();
  +[HMDXPCMessagePolicy policyWithEntitlements:](HMDXPCMessagePolicy, "policyWithEntitlements:", 5);
  v156 = (void *)objc_claimAutoreleasedReturnValue();
  v331 = v156;
  objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", &v331, 1);
  v157 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v155, "registerForMessage:receiver:policies:selector:", CFSTR("kUpdateInvitationStateRequestKey"), v9, v157, sel__handleRequestToUpdateHomeInvitationFromLocalUser_);

  -[HMDHomeManager messageDispatcher](v9, "messageDispatcher");
  v158 = (void *)objc_claimAutoreleasedReturnValue();
  v330 = v300;
  objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", &v330, 1);
  v159 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v158, "registerForMessage:receiver:policies:selector:", CFSTR("kUpdateHomeInvitationStateInternalRequestKey"), v9, v159, sel__handleRequestToUpdateHomeInvitationFromInviter_);

  -[HMDHomeManager messageDispatcher](v9, "messageDispatcher");
  v160 = (void *)objc_claimAutoreleasedReturnValue();
  v161 = *MEMORY[0x24BDD6118];
  +[HMDConfigurationMessagePolicy policyWithOperationTypes:](HMDConfigurationMessagePolicy, "policyWithOperationTypes:", 7);
  v162 = (void *)objc_claimAutoreleasedReturnValue();
  v329[0] = v162;
  +[HMDXPCMessagePolicy policyWithEntitlements:](HMDXPCMessagePolicy, "policyWithEntitlements:", 5);
  v163 = (void *)objc_claimAutoreleasedReturnValue();
  v329[1] = v163;
  objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", v329, 2);
  v164 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v160, "registerForMessage:receiver:policies:selector:", v161, v9, v164, sel__handleSetAppData_);

  -[HMDHomeManager messageDispatcher](v9, "messageDispatcher");
  v165 = (void *)objc_claimAutoreleasedReturnValue();
  +[HMDRemoteMessagePolicy defaultSecurePolicy](HMDRemoteMessagePolicy, "defaultSecurePolicy");
  v166 = (void *)objc_claimAutoreleasedReturnValue();
  v328 = v166;
  objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", &v328, 1);
  v167 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v165, "registerForMessage:receiver:policies:selector:", CFSTR("kSystemLogCaptureRequestKey"), v9, v167, sel__handleSysdiagnoseRequest_);

  if (!isWatch())
  {
    -[HMDHomeManager messageDispatcher](v9, "messageDispatcher");
    v168 = (void *)objc_claimAutoreleasedReturnValue();
    v169 = *MEMORY[0x24BDD5B80];
    +[HMDXPCMessagePolicy policyWithEntitlements:](HMDXPCMessagePolicy, "policyWithEntitlements:", 5);
    v170 = (void *)objc_claimAutoreleasedReturnValue();
    v327 = v170;
    objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", &v327, 1);
    v171 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v168, "registerForMessage:receiver:policies:selector:", v169, v9, v171, sel__handleDeviceSetupSessionOpen_);

    -[HMDHomeManager messageDispatcher](v9, "messageDispatcher");
    v172 = (void *)objc_claimAutoreleasedReturnValue();
    v173 = *MEMORY[0x24BDD5B58];
    +[HMDXPCMessagePolicy policyWithEntitlements:](HMDXPCMessagePolicy, "policyWithEntitlements:", 5);
    v174 = (void *)objc_claimAutoreleasedReturnValue();
    v326 = v174;
    objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", &v326, 1);
    v175 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v172, "registerForMessage:receiver:policies:selector:", v173, v9, v175, sel__handleDeviceSetupSessionClose_);

  }
  -[HMDHomeManager _registerForConfiguringStateMessages](v9, "_registerForConfiguringStateMessages");
  if (isInternalBuild())
  {
    -[HMDHomeManager messageDispatcher](v9, "messageDispatcher");
    v176 = (void *)objc_claimAutoreleasedReturnValue();
    v177 = *MEMORY[0x24BDD60E8];
    +[HMDXPCMessagePolicy policyWithEntitlements:](HMDXPCMessagePolicy, "policyWithEntitlements:", 5);
    v178 = (void *)objc_claimAutoreleasedReturnValue();
    v325 = v178;
    objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", &v325, 1);
    v179 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v176, "registerForMessage:receiver:policies:selector:", v177, v9, v179, sel__handleResolveAccount_);

    -[HMDHomeManager messageDispatcher](v9, "messageDispatcher");
    v180 = (void *)objc_claimAutoreleasedReturnValue();
    v181 = *MEMORY[0x24BDD60E0];
    +[HMDXPCMessagePolicy policyWithEntitlements:](HMDXPCMessagePolicy, "policyWithEntitlements:", 5);
    v182 = (void *)objc_claimAutoreleasedReturnValue();
    v324 = v182;
    objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", &v324, 1);
    v183 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v180, "registerForMessage:receiver:policies:selector:", v181, v9, v183, sel__handleRemoveAccount_);

    -[HMDHomeManager messageDispatcher](v9, "messageDispatcher");
    v184 = (void *)objc_claimAutoreleasedReturnValue();
    +[HMDXPCMessagePolicy policyWithEntitlements:](HMDXPCMessagePolicy, "policyWithEntitlements:", 5);
    v185 = (void *)objc_claimAutoreleasedReturnValue();
    v323 = v185;
    objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", &v323, 1);
    v186 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v184, "registerForMessage:receiver:policies:selector:", CFSTR("kPingInternalRequestKey"), v9, v186, sel__handlePing_);

    -[HMDHomeManager messageDispatcher](v9, "messageDispatcher");
    v187 = (void *)objc_claimAutoreleasedReturnValue();
    +[HMDXPCMessagePolicy policyWithEntitlements:](HMDXPCMessagePolicy, "policyWithEntitlements:", 5);
    v188 = (void *)objc_claimAutoreleasedReturnValue();
    v322 = v188;
    objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", &v322, 1);
    v189 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v187, "registerForMessage:receiver:policies:selector:", CFSTR("kConfigTestingMode"), v9, v189, sel__handleTestModeConfigRequest_);

    -[HMDHomeManager messageDispatcher](v9, "messageDispatcher");
    v190 = (void *)objc_claimAutoreleasedReturnValue();
    +[HMDXPCMessagePolicy policyWithEntitlements:](HMDXPCMessagePolicy, "policyWithEntitlements:", 5);
    v191 = (void *)objc_claimAutoreleasedReturnValue();
    v321 = v191;
    objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", &v321, 1);
    v192 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v190, "registerForMessage:receiver:policies:selector:", CFSTR("HomeUtilRemoteMessageRequestMessage"), v9, v192, sel__handleHomeUtilRemoteMessageRequest_);

    -[HMDHomeManager messageDispatcher](v9, "messageDispatcher");
    v193 = (void *)objc_claimAutoreleasedReturnValue();
    v194 = *MEMORY[0x24BDD6170];
    +[HMDXPCMessagePolicy policyWithEntitlements:](HMDXPCMessagePolicy, "policyWithEntitlements:", 5);
    v195 = (void *)objc_claimAutoreleasedReturnValue();
    v320 = v195;
    objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", &v320, 1);
    v196 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v193, "registerForMessage:receiver:policies:selector:", v194, v9, v196, sel__handleUpdateMobileAssetsRequest_);

    -[HMDHomeManager messageDispatcher](v9, "messageDispatcher");
    v197 = (void *)objc_claimAutoreleasedReturnValue();
    v198 = *MEMORY[0x24BDD5E90];
    +[HMDXPCMessagePolicy policyWithEntitlements:](HMDXPCMessagePolicy, "policyWithEntitlements:", 5);
    v199 = (void *)objc_claimAutoreleasedReturnValue();
    v319 = v199;
    objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", &v319, 1);
    v200 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v197, "registerForMessage:receiver:policies:selector:", v198, v9, v200, sel__handleClearMobileAssetsInfoRequest_);

  }
  -[HMDHomeManager messageDispatcher](v9, "messageDispatcher");
  v201 = (void *)objc_claimAutoreleasedReturnValue();
  v202 = *MEMORY[0x24BDD6100];
  +[HMDXPCMessagePolicy policyWithEntitlements:](HMDXPCMessagePolicy, "policyWithEntitlements:", 1);
  v203 = (void *)objc_claimAutoreleasedReturnValue();
  v318 = v203;
  objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", &v318, 1);
  v204 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v201, "registerForMessage:receiver:policies:selector:", v202, v9, v204, sel__handleRequestRuntimeStateUpdate_);

  -[HMDHomeManager messageDispatcher](v9, "messageDispatcher");
  v205 = (void *)objc_claimAutoreleasedReturnValue();
  v206 = *MEMORY[0x24BDD60A0];
  +[HMDXPCMessagePolicy policyWithEntitlements:](HMDXPCMessagePolicy, "policyWithEntitlements:", 13);
  v207 = (void *)objc_claimAutoreleasedReturnValue();
  v317 = v207;
  objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", &v317, 1);
  v208 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v205, "registerForMessage:receiver:policies:selector:", v206, v9, v208, sel__handlePairingIdentityRequest_);

  -[HMDHomeManager messageDispatcher](v9, "messageDispatcher");
  v209 = (void *)objc_claimAutoreleasedReturnValue();
  v210 = *MEMORY[0x24BDD5F98];
  +[HMDXPCMessagePolicy policyWithEntitlements:](HMDXPCMessagePolicy, "policyWithEntitlements:", 13);
  v211 = (void *)objc_claimAutoreleasedReturnValue();
  v316 = v211;
  objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", &v316, 1);
  v212 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v209, "registerForMessage:receiver:policies:selector:", v210, v9, v212, sel__handleFetchCurrentUserPairingIdentityForHomeContainingAccessoryRequest_);

  -[HMDHomeManager messageDispatcher](v9, "messageDispatcher");
  v213 = (void *)objc_claimAutoreleasedReturnValue();
  v214 = *MEMORY[0x24BDD5FA0];
  +[HMDXPCMessagePolicy policyWithEntitlements:](HMDXPCMessagePolicy, "policyWithEntitlements:", 5);
  v215 = (void *)objc_claimAutoreleasedReturnValue();
  v315 = v215;
  objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", &v315, 1);
  v216 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v213, "registerForMessage:receiver:policies:selector:", v214, v9, v216, sel__handleFetchDevicesMessage_);

  if (isInternalBuild())
  {
    -[HMDHomeManager messageDispatcher](v9, "messageDispatcher");
    v217 = (void *)objc_claimAutoreleasedReturnValue();
    v218 = *MEMORY[0x24BDD67F8];
    +[HMDXPCMessagePolicy policyWithEntitlements:](HMDXPCMessagePolicy, "policyWithEntitlements:", 5);
    v219 = (void *)objc_claimAutoreleasedReturnValue();
    v314 = v219;
    objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", &v314, 1);
    v220 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v217, "registerForMessage:receiver:policies:selector:", v218, v9, v220, sel__handleNetworkFirewallDumpCloudRecordsRequest_);

    -[HMDHomeManager messageDispatcher](v9, "messageDispatcher");
    v221 = (void *)objc_claimAutoreleasedReturnValue();
    v222 = *MEMORY[0x24BDD67E0];
    +[HMDXPCMessagePolicy policyWithEntitlements:](HMDXPCMessagePolicy, "policyWithEntitlements:", 5);
    v223 = (void *)objc_claimAutoreleasedReturnValue();
    v313[0] = v223;
    +[HMDConfigurationMessagePolicy policyWithOperationTypes:](HMDConfigurationMessagePolicy, "policyWithOperationTypes:", 3);
    v224 = (void *)objc_claimAutoreleasedReturnValue();
    v313[1] = v224;
    objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", v313, 2);
    v225 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v221, "registerForMessage:receiver:policies:selector:", v222, v9, v225, sel__handleNetworkFirewallAddOverridesRequest_);

    -[HMDHomeManager messageDispatcher](v9, "messageDispatcher");
    v226 = (void *)objc_claimAutoreleasedReturnValue();
    v227 = *MEMORY[0x24BDD68B0];
    +[HMDXPCMessagePolicy policyWithEntitlements:](HMDXPCMessagePolicy, "policyWithEntitlements:", 5);
    v228 = (void *)objc_claimAutoreleasedReturnValue();
    v312[0] = v228;
    +[HMDConfigurationMessagePolicy policyWithOperationTypes:](HMDConfigurationMessagePolicy, "policyWithOperationTypes:", 4);
    v229 = (void *)objc_claimAutoreleasedReturnValue();
    v312[1] = v229;
    objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", v312, 2);
    v230 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v226, "registerForMessage:receiver:policies:selector:", v227, v9, v230, sel__handleNetworkFirewallRemoveOverridesRequest_);

    -[HMDHomeManager messageDispatcher](v9, "messageDispatcher");
    v231 = (void *)objc_claimAutoreleasedReturnValue();
    v232 = *MEMORY[0x24BDD6838];
    +[HMDXPCMessagePolicy policyWithEntitlements:](HMDXPCMessagePolicy, "policyWithEntitlements:", 5);
    v233 = (void *)objc_claimAutoreleasedReturnValue();
    v311 = v233;
    objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", &v311, 1);
    v234 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v231, "registerForMessage:receiver:policies:selector:", v232, v9, v234, sel__handleNetworkFirewallDumpLocalRulesRequest_);

    -[HMDHomeManager messageDispatcher](v9, "messageDispatcher");
    v235 = (void *)objc_claimAutoreleasedReturnValue();
    v236 = *MEMORY[0x24BDD6870];
    +[HMDXPCMessagePolicy policyWithEntitlements:](HMDXPCMessagePolicy, "policyWithEntitlements:", 5);
    v237 = (void *)objc_claimAutoreleasedReturnValue();
    v310 = v237;
    objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", &v310, 1);
    v238 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v235, "registerForMessage:receiver:policies:selector:", v236, v9, v238, sel__handleNetworkFirewallDumpPairedMetadataRequest_);

    -[HMDHomeManager messageDispatcher](v9, "messageDispatcher");
    v239 = (void *)objc_claimAutoreleasedReturnValue();
    v240 = *MEMORY[0x24BDD68A8];
    +[HMDXPCMessagePolicy policyWithEntitlements:](HMDXPCMessagePolicy, "policyWithEntitlements:", 5);
    v241 = (void *)objc_claimAutoreleasedReturnValue();
    v309[0] = v241;
    +[HMDConfigurationMessagePolicy policyWithOperationTypes:](HMDConfigurationMessagePolicy, "policyWithOperationTypes:", 4);
    v242 = (void *)objc_claimAutoreleasedReturnValue();
    v309[1] = v242;
    objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", v309, 2);
    v243 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v239, "registerForMessage:receiver:policies:selector:", v240, v9, v243, sel__handleNetworkFirewallRemoveLocalRulesRequest_);

    -[HMDHomeManager messageDispatcher](v9, "messageDispatcher");
    v244 = (void *)objc_claimAutoreleasedReturnValue();
    v245 = *MEMORY[0x24BDD68A0];
    +[HMDXPCMessagePolicy policyWithEntitlements:](HMDXPCMessagePolicy, "policyWithEntitlements:", 5);
    v246 = (void *)objc_claimAutoreleasedReturnValue();
    v308 = v246;
    objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", &v308, 1);
    v247 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v244, "registerForMessage:receiver:policies:selector:", v245, v9, v247, sel__handleNetworkFirewallFetchCloudChangesRequest_);

    -[HMDHomeManager messageDispatcher](v9, "messageDispatcher");
    v248 = (void *)objc_claimAutoreleasedReturnValue();
    v249 = *MEMORY[0x24BDD5EA0];
    +[HMDXPCMessagePolicy policyWithEntitlements:](HMDXPCMessagePolicy, "policyWithEntitlements:", 5);
    v250 = (void *)objc_claimAutoreleasedReturnValue();
    v307 = v250;
    objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", &v307, 1);
    v251 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v248, "registerForMessage:receiver:policies:selector:", v249, v9, v251, sel__handleGetTLVForJSON_);

  }
  -[HMDHomeManager messageDispatcher](v9, "messageDispatcher");
  v252 = (void *)objc_claimAutoreleasedReturnValue();
  v253 = *MEMORY[0x24BDD5F68];
  +[HMDXPCMessagePolicy policyWithEntitlements:](HMDXPCMessagePolicy, "policyWithEntitlements:", 5);
  v254 = (void *)objc_claimAutoreleasedReturnValue();
  v306 = v254;
  objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", &v306, 1);
  v255 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v252, "registerForMessage:receiver:policies:selector:", v253, v9, v255, sel__handleEnableUARPPacketCaptureRequest_);

  if (isInternalBuild())
  {
    -[HMDHomeManager messageDispatcher](v9, "messageDispatcher");
    v256 = (void *)objc_claimAutoreleasedReturnValue();
    v257 = *MEMORY[0x24BDD5F28];
    +[HMDXPCMessagePolicy policyWithEntitlements:](HMDXPCMessagePolicy, "policyWithEntitlements:", 5);
    v258 = (void *)objc_claimAutoreleasedReturnValue();
    v305 = v258;
    objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", &v305, 1);
    v259 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v256, "registerForMessage:receiver:policies:selector:", v257, v9, v259, sel__handleDumpDatabase_);

  }
  if (isInternalBuild())
  {
    -[HMDHomeManager messageDispatcher](v9, "messageDispatcher");
    v260 = (void *)objc_claimAutoreleasedReturnValue();
    v261 = *MEMORY[0x24BDD60B0];
    +[HMDXPCMessagePolicy policyWithEntitlements:](HMDXPCMessagePolicy, "policyWithEntitlements:", 5);
    v262 = (void *)objc_claimAutoreleasedReturnValue();
    v304 = v262;
    objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", &v304, 1);
    v263 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v260, "registerForMessage:receiver:policies:selector:", v261, v9, v263, sel__handlePrepareForDiagnosticExtension_);

  }
  -[HMDHomeManager userCloudShareManager](v9, "userCloudShareManager");
  v264 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHomeManager messageDispatcher](v9, "messageDispatcher");
  v265 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v264, "configureWithMessageDispatcher:", v265);

  -[HMDHomeManager messageDispatcher](v9, "messageDispatcher");
  v266 = (void *)objc_claimAutoreleasedReturnValue();
  v267 = *MEMORY[0x24BDD5E98];
  +[HMDXPCMessagePolicy policyWithEntitlements:](HMDXPCMessagePolicy, "policyWithEntitlements:", 261);
  v268 = (void *)objc_claimAutoreleasedReturnValue();
  v303 = v268;
  objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", &v303, 1);
  v269 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v266, "registerForMessage:receiver:policies:selector:", v267, v9, v269, sel__handleConnectivityInfoRequest_);

  if (!-[HMDHomeManager stateHandle](v9, "stateHandle"))
    -[HMDHomeManager registerStateHandler](v9, "registerStateHandler");
  -[HMDHomeManager userDeviceCapabilitiesRequestManager](v9, "userDeviceCapabilitiesRequestManager");
  v270 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v270, "registerForMessages");

  +[HMDRemoteMessagePolicy defaultPolicy](HMDMutableRemoteMessagePolicy, "defaultPolicy");
  v271 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v271, "setRequiresSecureMessage:", 0);
  objc_msgSend(v271, "setRequiresAccountMessage:", 1);
  objc_msgSend(v271, "setTransportRestriction:", 1);
  -[HMDHomeManager messageDispatcher](v9, "messageDispatcher");
  v272 = (void *)objc_claimAutoreleasedReturnValue();
  v273 = (void *)objc_msgSend(v271, "copy");
  v302 = v273;
  objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", &v302, 1);
  v274 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v272, "registerForMessage:receiver:policies:selector:", CFSTR("HMDInvitationForwardMessage"), v9, v274, sel__handleForwardedSharedUserInvitationAcceptance_);

  if (isInternalBuild())
  {
    -[HMDHomeManager messageDispatcher](v9, "messageDispatcher");
    v275 = (void *)objc_claimAutoreleasedReturnValue();
    +[HMDXPCMessagePolicy policyWithEntitlements:](HMDXPCMessagePolicy, "policyWithEntitlements:", 5);
    v276 = (void *)objc_claimAutoreleasedReturnValue();
    v301 = v276;
    objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", &v301, 1);
    v277 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v275, "registerForMessage:receiver:policies:selector:", CFSTR("HomeUtil.Command.Wallet"), v9, v277, sel__handleHomeUtilCommandWalletMessage_);

  }
  -[HMDHomeManager notificationCenter](v9, "notificationCenter");
  v278 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v278, "addObserver:selector:name:object:", v9, sel_dataSyncInProgressUpdatedNotification_, CFSTR("kCloudDataSyncInProgressUpdatedNotification"), 0);

  -[HMDHomeManager notificationCenter](v9, "notificationCenter");
  v279 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v279, "addObserver:selector:name:object:", v9, sel_handleVendorInfoUpdated_, CFSTR("kHMDVendorInfoUpdatedNotification"), 0);

  -[HMDHomeManager notificationCenter](v9, "notificationCenter");
  v280 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v280, "addObserver:selector:name:object:", v9, sel_auditDuplicatePreviouslyAddedAccessory_, CFSTR("HMDHomeThisOwnerDeviceAddedAccessoryNotification"), 0);

  -[HMDHomeManager notificationCenter](v9, "notificationCenter");
  v281 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v281, "addObserver:selector:name:object:", v9, sel___handleAppleAccountUpdated_, CFSTR("HMDAppleAccountManagerAccountUpdatedNotification"), 0);

  -[HMDHomeManager notificationCenter](v9, "notificationCenter");
  v282 = (void *)objc_claimAutoreleasedReturnValue();
  +[HMDAccountRegistry sharedRegistry](HMDAccountRegistry, "sharedRegistry");
  v283 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v282, "addObserver:selector:name:object:", v9, sel___accountRegistryAddedAccount_, CFSTR("HMDAccountRegistryAddedAccountNotification"), v283);

  -[HMDHomeManager notificationCenter](v9, "notificationCenter");
  v284 = (void *)objc_claimAutoreleasedReturnValue();
  +[HMDAccountRegistry sharedRegistry](HMDAccountRegistry, "sharedRegistry");
  v285 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v284, "addObserver:selector:name:object:", v9, sel___accountRegistryRemovedAccount_, CFSTR("HMDAccountRegistryRemovedAccountNotification"), v285);

  -[HMDHomeManager notificationCenter](v9, "notificationCenter");
  v286 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v286, "addObserver:selector:name:object:", v9, sel___accountAddedDevice_, CFSTR("HMDAccountAddedDeviceNotification"), 0);

  -[HMDHomeManager notificationCenter](v9, "notificationCenter");
  v287 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v287, "addObserver:selector:name:object:", v9, sel___handleDeviceUpdatedNotification_, CFSTR("HMDDeviceUpdatedNotification"), 0);

  -[HMDHomeManager notificationCenter](v9, "notificationCenter");
  v288 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v288, "addObserver:selector:name:object:", v9, sel___accountRemovedDevice_, CFSTR("HMDAccountRemovedDeviceNotification"), 0);

  -[HMDHomeManager notificationCenter](v9, "notificationCenter");
  v289 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v289, "addObserver:selector:name:object:", v9, sel___handleProcessMemoryPressureEvent_, *MEMORY[0x24BE3EBF0], 0);

  -[HMDHomeManager notificationCenter](v9, "notificationCenter");
  v290 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v290, "addObserver:selector:name:object:", v9, sel___handleHMDFMFStatusUpdateNotification_, CFSTR("HMDFMFStatusUpdateNotification"), 0);

  -[HMDHomeManager registerNotificationsForPowerManagement](v9, "registerNotificationsForPowerManagement");
  -[HMDHomeManager configureForWalletKey](v9, "configureForWalletKey");

}

- (void)_notifyMetricsManagerOfConfigurationChange
{
  void *v3;
  HMDHomeManager *v4;
  NSObject *v5;
  id v6;
  void *v7;
  void *v8;
  void *v9;
  id v10;
  _QWORD v11[4];
  id v12;
  id v13;
  id v14;
  uint8_t buf[4];
  id v16;
  __int16 v17;
  void *v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v14 = (id)objc_msgSend(objc_alloc(MEMORY[0x24BE3F138]), "initWithName:", CFSTR("Generate Home Configuration Log Event"));
  v3 = (void *)MEMORY[0x227676638]();
  v4 = self;
  HMFGetOSLogHandle();
  v5 = (id)objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v6 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v14, "identifier");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "shortDescription");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543618;
    v16 = v6;
    v17 = 2114;
    v18 = v8;
    _os_log_impl(&dword_2218F0000, v5, OS_LOG_TYPE_INFO, "%{public}@[%{public}@] Home Configuration got updated. Scheduling of new log event generation.", buf, 0x16u);

  }
  objc_autoreleasePoolPop(v3);
  objc_initWeak((id *)buf, v4);
  objc_msgSend(MEMORY[0x24BE3F268], "defaultScheduler");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v11[0] = MEMORY[0x24BDAC760];
  v11[1] = 3221225472;
  v11[2] = __60__HMDHomeManager__notifyMetricsManagerOfConfigurationChange__block_invoke;
  v11[3] = &unk_24E7972B0;
  objc_copyWeak(&v13, (id *)buf);
  v12 = v14;
  v10 = (id)objc_msgSend(v9, "performWithQualityOfService:block:", 9, v11);

  objc_destroyWeak(&v13);
  objc_destroyWeak((id *)buf);
  __HMFActivityScopeLeave();

}

- (id)homesToSendForNonSPIClients
{
  void *v3;
  void *v4;
  id v5;
  void *v6;
  _QWORD v8[4];
  id v9;

  objc_msgSend(MEMORY[0x24BDBCEB8], "array");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHomeManager homes](self, "homes");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v8[0] = MEMORY[0x24BDAC760];
  v8[1] = 3221225472;
  v8[2] = __45__HMDHomeManager_homesToSendForNonSPIClients__block_invoke;
  v8[3] = &unk_24E796220;
  v9 = v3;
  v5 = v3;
  objc_msgSend(v4, "hmf_enumerateWithAutoreleasePoolUsingBlock:", v8);

  v6 = (void *)objc_msgSend(v5, "copy");
  return v6;
}

- (id)filterHomes:(id)a3 isSPIEntitled:(BOOL)a4
{
  _BOOL4 v4;
  id v6;
  void *v7;
  void *v8;
  id v9;
  void *v10;
  char v11;
  void *v12;
  void *v13;
  HMDHomeManager *v14;
  NSObject *v15;
  void *v16;
  _QWORD v18[5];
  uint8_t buf[4];
  void *v20;
  uint64_t v21;

  v4 = a4;
  v21 = *MEMORY[0x24BDAC8D0];
  v6 = a3;
  v18[0] = MEMORY[0x24BDAC760];
  v18[1] = 3221225472;
  v18[2] = __44__HMDHomeManager_filterHomes_isSPIEntitled___block_invoke;
  v18[3] = &unk_24E796248;
  v18[4] = self;
  objc_msgSend(v6, "na_filter:", v18);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = v7;
  if (v4)
  {
    v9 = v7;
LABEL_5:
    v12 = v9;
    goto LABEL_9;
  }
  +[HMDAppleAccountSettings sharedSettings](HMDAppleAccountSettings, "sharedSettings");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v11 = objc_msgSend(v10, "isHomeEnabled");

  if ((v11 & 1) != 0)
  {
    objc_msgSend(v8, "na_filter:", &__block_literal_global_705);
    v9 = (id)objc_claimAutoreleasedReturnValue();
    goto LABEL_5;
  }
  v13 = (void *)MEMORY[0x227676638]();
  v14 = self;
  HMFGetOSLogHandle();
  v15 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543362;
    v20 = v16;
    _os_log_impl(&dword_2218F0000, v15, OS_LOG_TYPE_INFO, "%{public}@iCloud switch is disabled", buf, 0xCu);

  }
  objc_autoreleasePoolPop(v13);
  v12 = (void *)MEMORY[0x24BDBD1A8];
LABEL_9:

  return v12;
}

- (id)_accessoryOfCurrentDevice
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t i;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t j;
  void *v13;
  id v14;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  _BYTE v24[128];
  _BYTE v25[128];
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  v20 = 0u;
  v21 = 0u;
  v22 = 0u;
  v23 = 0u;
  -[HMDHomeManager homes](self, "homes");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v20, v25, 16);
  if (v3)
  {
    v4 = v3;
    v5 = *(_QWORD *)v21;
    do
    {
      for (i = 0; i != v4; ++i)
      {
        if (*(_QWORD *)v21 != v5)
          objc_enumerationMutation(v2);
        v7 = *(void **)(*((_QWORD *)&v20 + 1) + 8 * i);
        v16 = 0u;
        v17 = 0u;
        v18 = 0u;
        v19 = 0u;
        objc_msgSend(v7, "accessories", 0);
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        v9 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v16, v24, 16);
        if (v9)
        {
          v10 = v9;
          v11 = *(_QWORD *)v17;
          while (2)
          {
            for (j = 0; j != v10; ++j)
            {
              if (*(_QWORD *)v17 != v11)
                objc_enumerationMutation(v8);
              v13 = *(void **)(*((_QWORD *)&v16 + 1) + 8 * j);
              if ((objc_msgSend(v13, "isCurrentAccessory") & 1) != 0)
              {
                v14 = v13;

                goto LABEL_19;
              }
            }
            v10 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v16, v24, 16);
            if (v10)
              continue;
            break;
          }
        }

      }
      v4 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v20, v25, 16);
      v14 = 0;
    }
    while (v4);
  }
  else
  {
    v14 = 0;
  }
LABEL_19:

  return v14;
}

- (id)_appleMediaAccessoryOfCurrentDevice
{
  void *v3;
  void *v4;
  id v5;
  int v6;
  void *v7;
  id v8;
  id v9;
  void *v10;
  HMDHomeManager *v11;
  NSObject *v12;
  void *v13;
  int v15;
  void *v16;
  __int16 v17;
  id v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  -[HMDHomeManager _accessoryOfCurrentDevice](self, "_accessoryOfCurrentDevice");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = v3;
  if (v3)
  {
    v5 = v3;
    objc_opt_class();
    v6 = objc_opt_isKindOfClass() & 1;
    if (v6)
      v7 = v5;
    else
      v7 = 0;
    v8 = v7;

    if (v6)
    {
      v9 = v5;
    }
    else
    {
      v10 = (void *)MEMORY[0x227676638]();
      v11 = self;
      HMFGetOSLogHandle();
      v12 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        v15 = 138543618;
        v16 = v13;
        v17 = 2112;
        v18 = v5;
        _os_log_impl(&dword_2218F0000, v12, OS_LOG_TYPE_ERROR, "%{public}@Failed to get apple media accessory for current accessory: %@", (uint8_t *)&v15, 0x16u);

      }
      objc_autoreleasePoolPop(v10);
      v9 = 0;
    }

  }
  else
  {
    v9 = 0;
  }

  return v9;
}

- (void)_handleRequestFetchHomeConfiguration:(id)a3
{
  void *v4;
  void *v5;
  id v6;

  v6 = a3;
  v4 = (void *)MEMORY[0x227676638]();
  v5 = (void *)objc_msgSend(objc_alloc(MEMORY[0x24BE3F200]), "initWithName:", CFSTR("homed.xpc.fetch.homeConfiguration."));
  -[HMDHomeManager __handleRequestFetchHomeConfiguration:](self, "__handleRequestFetchHomeConfiguration:", v6);

  objc_autoreleasePoolPop(v4);
}

- (void)__handleRequestFetchHomeConfiguration:(id)a3
{
  id v4;
  uint64_t v5;
  unsigned int v6;
  void *v7;
  HMDHomeManager *v8;
  NSObject *v9;
  void *v10;
  double v11;
  id v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  uint64_t v18;
  void *v19;
  int v20;
  void *v21;
  HMDHomeManager *v22;
  NSObject *v23;
  void *v24;
  id v25;
  double v26;
  uint64_t v27;
  void *v28;
  HMDHomeManager *v29;
  NSObject *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  uint64_t v35;
  void *v36;
  void *v37;
  double v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  void *v43;
  void *v44;
  void *v45;
  void *v46;
  void *v47;
  void *v48;
  uint64_t v49;
  HMDHomeManager *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  uint64_t v55;
  int v56;
  void *v57;
  HMDHomeManager *v58;
  NSObject *v59;
  void *v60;
  int v61;
  void *v62;
  NSObject *v63;
  void *v64;
  double v65;
  void *v66;
  _BOOL4 v67;
  HMDHomeManager *v68;
  unsigned int v69;
  void *v70;
  HMDHomeManager *v71;
  NSObject *v72;
  void *v73;
  double v74;
  void *v75;
  double v76;
  const char *v77;
  void *v78;
  void *v79;
  void *v80;
  void *v81;
  HMDHomeManager *v82;
  NSObject *v83;
  void *v84;
  double v85;
  void *v86;
  void *v87;
  double v88;
  BOOL v89;
  void *v90;
  HMDHomeManager *v91;
  NSObject *v92;
  _BOOL4 v93;
  void *v94;
  double v95;
  void *v96;
  double v97;
  void *v98;
  HMDHomeManager *v99;
  NSObject *v100;
  void *v101;
  void *v102;
  void *v103;
  void *v104;
  void *v105;
  int v106;
  void *v107;
  void *v108;
  HMDHomeManager *v109;
  void *v110;
  void *v111;
  void *v112;
  void *v113;
  id v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  void *v119;
  void *v120;
  char v121;
  uint64_t v122;
  void *v123;
  double v124;
  double v125;
  void *v126;
  void *v127;
  void *v128;
  uint64_t v129;
  double v130;
  double v131;
  void *v132;
  HMDHomeManager *v133;
  NSObject *v134;
  double v135;
  void *v136;
  void *v137;
  char *v138;
  void *v139;
  void *v140;
  void *v141;
  void *v142;
  void *v143;
  void *v144;
  void *v145;
  id v146;
  void *v147;
  void *v148;
  void *v149;
  void *v150;
  void *v151;
  void *v152;
  void *v153;
  void *v154;
  void *v155;
  void *v156;
  void *v157;
  void *v158;
  int v159;
  void *v160;
  HMDHomeManager *v161;
  NSObject *v162;
  _BOOL4 v163;
  void *v164;
  double v165;
  double v166;
  double v167;
  void *v168;
  void *v169;
  uint64_t v170;
  double v171;
  double v172;
  void *v173;
  HMDHomeManager *v174;
  NSObject *v175;
  void *v176;
  void *v177;
  double v178;
  void *v179;
  __CFString *v180;
  void *v181;
  void *v182;
  __CFString *v183;
  void *v184;
  void *v185;
  void *v186;
  void *v187;
  void *v188;
  void *v189;
  void *v190;
  void *v191;
  void *v192;
  void *v193;
  void *v194;
  uint64_t v195;
  void *v196;
  void *v197;
  void *v198;
  id v199;
  void *v200;
  void *v201;
  void *v202;
  void *v203;
  uint64_t v204;
  void *v205;
  void *v206;
  void *v207;
  void *v208;
  void *v209;
  void *v210;
  int v211;
  int v212;
  void *v213;
  _BOOL4 v214;
  void *v215;
  int v216;
  HMDHomeManager *v217;
  void *v218;
  double v219;
  void *v220;
  void *v221;
  void *v222;
  HMDHomeManager *v223;
  unsigned int v224;
  void *v225;
  uint64_t v226;
  _QWORD block[5];
  id v228;
  __int128 v229;
  __int128 v230;
  __int128 v231;
  __int128 v232;
  id v233;
  char v234;
  double v235;
  uint8_t buf[4];
  void *v237;
  __int16 v238;
  double v239;
  __int16 v240;
  void *v241;
  __int16 v242;
  double v243;
  __int16 v244;
  const char *v245;
  __int16 v246;
  void *v247;
  _BYTE v248[128];
  uint64_t v249;
  _QWORD v250[4];

  v250[1] = *MEMORY[0x24BDAC8D0];
  v4 = a3;
  v5 = objc_msgSend(v4, "homeManagerOptions");
  v6 = objc_msgSend(v4, "isEntitledForSPIAccess");
  v7 = (void *)MEMORY[0x227676638]();
  v8 = self;
  HMFGetOSLogHandle();
  v9 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "clientName");
    v11 = COERCE_DOUBLE(objc_claimAutoreleasedReturnValue());
    HMHomeManagerOptionsShortDescription();
    v12 = v4;
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543874;
    v237 = v10;
    v238 = 2112;
    v239 = v11;
    v240 = 2112;
    v241 = v13;
    _os_log_impl(&dword_2218F0000, v9, OS_LOG_TYPE_INFO, "%{public}@Received fetch from client, %@, with options: %@", buf, 0x20u);

    v4 = v12;
  }

  objc_autoreleasePoolPop(v7);
  v14 = (void *)MEMORY[0x24BDBCED8];
  v249 = *MEMORY[0x24BDD6088];
  v226 = v5;
  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedInteger:", v5);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  v250[0] = v15;
  objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v250, &v249, 1);
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v14, "dictionaryWithDictionary:", v16);
  v17 = (void *)objc_claimAutoreleasedReturnValue();

  v234 = 0;
  v18 = -[HMDHomeManager determineDataSyncSateForHH2:homeManagerDataSyncState:homeManagerStatus:](v8, "determineDataSyncSateForHH2:homeManagerDataSyncState:homeManagerStatus:", &v234, 0, 0);
  if (!v234)
  {
    objc_msgSend(v4, "applicationBundleIdentifier");
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    v20 = objc_msgSend(v19, "isEqual:", *MEMORY[0x24BDD5C70]);

    if (v20)
      v18 = -[HMDHomeManager _autoAcceptAllPendingReinvitations](v8, "_autoAcceptAllPendingReinvitations");
  }
  v21 = (void *)MEMORY[0x227676638](v18);
  v22 = v8;
  HMFGetOSLogHandle();
  v23 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v23, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    HMFBooleanToString();
    v25 = v4;
    v26 = COERCE_DOUBLE(objc_claimAutoreleasedReturnValue());
    *(_DWORD *)buf = 138543618;
    v237 = v24;
    v238 = 2112;
    v239 = v26;
    _os_log_impl(&dword_2218F0000, v23, OS_LOG_TYPE_INFO, "%{public}@Handling fetch home configuration request, data sync in progress : %@", buf, 0x16u);

    v4 = v25;
  }

  objc_autoreleasePoolPop(v21);
  if (!objc_msgSend(v4, "BOOLForKey:", CFSTR("kCanUseCachedHomeConfigurationKey")))
  {
    objc_msgSend(v4, "numberForKey:", CFSTR("kConfigGenerationCounterKey"));
    v34 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "numberForKey:", CFSTR("kHAPMetadataVersionKey"));
    v35 = objc_claimAutoreleasedReturnValue();
    v36 = (void *)v35;
    if (!v34 || !v35)
    {
      objc_msgSend(MEMORY[0x24BDD1540], "hmErrorWithCode:", 20);
      v38 = COERCE_DOUBLE(objc_claimAutoreleasedReturnValue());
      objc_msgSend(v4, "respondWithError:", *(_QWORD *)&v38);
      v33 = v17;
      goto LABEL_131;
    }
    v33 = v17;
    if (isAppleTV() && v234)
    {
      v37 = (void *)MEMORY[0x24BDD1540];
      -[HMDHomeManager _statusPayloadForMessage:](v22, "_statusPayloadForMessage:", v4);
      v38 = COERCE_DOUBLE(objc_claimAutoreleasedReturnValue());
      objc_msgSend(v37, "hmErrorWithCode:userInfo:", 77, *(_QWORD *)&v38);
      v39 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "respondWithError:", v39);

LABEL_131:
      goto LABEL_132;
    }
    v224 = v6;
    objc_msgSend(v4, "proxyConnection");
    v40 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v40, "processInfo");
    v41 = (void *)objc_claimAutoreleasedReturnValue();
    v233 = 0;
    objc_msgSend(v41, "clientIdentifierSalt:", &v233);
    v42 = (void *)objc_claimAutoreleasedReturnValue();
    v38 = COERCE_DOUBLE(v233);

    v225 = v4;
    if (!v42)
    {
      v57 = (void *)MEMORY[0x227676638]();
      v58 = v22;
      HMFGetOSLogHandle();
      v59 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v59, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v60 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        v237 = v60;
        v238 = 2112;
        v239 = v38;
        _os_log_impl(&dword_2218F0000, v59, OS_LOG_TYPE_ERROR, "%{public}@Cannot send out home data because client identifier salt could not be determined: %@", buf, 0x16u);

      }
      objc_autoreleasePoolPop(v57);
      objc_msgSend(v225, "respondWithError:", *(_QWORD *)&v38);
      goto LABEL_130;
    }
    objc_msgSend(v33, "setObject:forKeyedSubscript:", v42, CFSTR("kIdentifierSaltKey"));
    if (objc_msgSend(v4, "isEntitledForAssistantIdentifiers"))
    {
      -[HMDHomeManager _getAssistantHashingData](v22, "_getAssistantHashingData");
      v43 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v33, "setObject:forKeyedSubscript:", v43, *MEMORY[0x24BDD5E70]);

    }
    v218 = v42;
    v219 = v38;
    objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedInteger:", -[HMDHomeManager generationCounter](v22, "generationCounter"));
    v44 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v33, "setObject:forKeyedSubscript:", v44, CFSTR("kConfigGenerationCounterKey"));

    +[HMDHAPMetadata getSharedInstance](HMDHAPMetadata, "getSharedInstance");
    v45 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v45, "version");
    v46 = (void *)objc_claimAutoreleasedReturnValue();

    if (v46)
    {
      objc_msgSend(v45, "version");
      v47 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v33, "setObject:forKeyedSubscript:", v47, CFSTR("kHAPMetadataVersionKey"));

    }
    -[HMDHomeManager _statusPayloadForMessage:](v22, "_statusPayloadForMessage:", v4);
    v48 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v33, "addEntriesFromDictionary:", v48);

    v222 = v34;
    v49 = objc_msgSend(v34, "unsignedIntegerValue");
    v50 = v22;
    v51 = v49;
    v52 = -[HMDHomeManager generationCounter](v50, "generationCounter");
    v220 = v36;
    v53 = objc_msgSend(v36, "unsignedIntegerValue");
    v221 = v45;
    objc_msgSend(v45, "version");
    v54 = (void *)objc_claimAutoreleasedReturnValue();
    v55 = objc_msgSend(v54, "unsignedIntegerValue");

    if (v224)
      v56 = !-[HMDHomeManager cacheUseAllowed](v50, "cacheUseAllowed");
    else
      v56 = 0;
    v223 = v50;
    v61 = -[HMDHomeManager hasClientRequestedMediaAccessoryControl:](v50, "hasClientRequestedMediaAccessoryControl:", v225) & v226;
    if (v234)
      v61 = 0;
    if (v56)
    {
      v216 = v61;
      v62 = (void *)MEMORY[0x227676638]();
      HMFGetOSLogHandle();
      v63 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v63, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v64 = (void *)objc_claimAutoreleasedReturnValue();
        HMFBooleanToString();
        v65 = COERCE_DOUBLE(objc_claimAutoreleasedReturnValue());
        HMFBooleanToString();
        v66 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543874;
        v237 = v64;
        v238 = 2112;
        v239 = v65;
        v240 = 2112;
        v241 = v66;
        _os_log_impl(&dword_2218F0000, v63, OS_LOG_TYPE_INFO, "%{public}@Forcing SPI entitled client to not use cached home configuration homeCounterMatch %@  metadataVersionMatch %@", buf, 0x20u);

      }
      v67 = v53 != v55;

      objc_autoreleasePoolPop(v62);
      v68 = v223;
      v69 = v224;
    }
    else
    {
      if (v51 == v52 && v53 == v55)
      {
        v81 = (void *)MEMORY[0x227676638]();
        v68 = v50;
        v82 = v50;
        HMFGetOSLogHandle();
        v83 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v83, OS_LOG_TYPE_DEFAULT))
        {
          HMFGetLogIdentifier();
          v84 = (void *)objc_claimAutoreleasedReturnValue();
          v85 = COERCE_DOUBLE(-[HMDHomeManager generationCounter](v82, "generationCounter"));
          objc_msgSend(v221, "version");
          v86 = v33;
          v87 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v225, "applicationBundleIdentifier");
          v88 = COERCE_DOUBLE(objc_claimAutoreleasedReturnValue());
          *(_DWORD *)buf = 138544130;
          v237 = v84;
          v238 = 2048;
          v239 = v85;
          v68 = v223;
          v240 = 2112;
          v241 = v87;
          v242 = 2112;
          v243 = v88;
          _os_log_impl(&dword_2218F0000, v83, OS_LOG_TYPE_DEFAULT, "%{public}@Home manager generation counter %lu/metadata version %@ matches the client(%@)", buf, 0x2Au);

          v33 = v86;
        }

        objc_autoreleasePoolPop(v81);
        v216 = 1;
        goto LABEL_110;
      }
      v216 = v61;
      v67 = v53 != v55;
      v89 = v51 == v52;
      v68 = v223;
      v69 = v224;
      if (v89)
      {
LABEL_100:
        if ((v67 | v56) != 1)
        {
LABEL_111:
          if (v69)
          {
            v180 = CFSTR("com.apple.homekit-entitledclient.identifer");
            -[HMDHomeManager _runtimeState](v68, "_runtimeState");
            v181 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v33, "addEntriesFromDictionary:", v181);

            objc_msgSend(v33, "setObject:forKeyedSubscript:", MEMORY[0x24BDBD1C8], CFSTR("kCanCacheHomeConfigurationKey"));
            objc_msgSend(MEMORY[0x24BDD16E0], "numberWithBool:", -[HMDHomeManager cacheUseAllowed](v68, "cacheUseAllowed"));
            v182 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v33, "setObject:forKeyedSubscript:", v182, CFSTR("kCanUseCachedHomeConfigurationKey"));

            if (!-[HMDHomeManager cacheUseAllowed](v68, "cacheUseAllowed"))
              -[HMDHomeManager setCacheUseAllowed:](v68, "setCacheUseAllowed:", 1);
            if (v216)
              objc_msgSend(v33, "setObject:forKey:", MEMORY[0x24BDBD1C8], *MEMORY[0x24BDD6108]);
            v183 = CFSTR("com.apple.homekit-entitledclient.identifer");
          }
          else
          {
            objc_msgSend(v225, "applicationBundleIdentifier");
            v183 = (__CFString *)objc_claimAutoreleasedReturnValue();
          }
          -[HMDHomeManager appData](v68, "appData");
          v184 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v184, "applicationDataForIdentifier:", v183);
          v185 = (void *)objc_claimAutoreleasedReturnValue();

          if (v185)
          {
            v186 = (void *)objc_msgSend(v185, "copy");
            objc_msgSend(v33, "setObject:forKeyedSubscript:", v186, CFSTR("kAppDataInformationKey"));

          }
          objc_msgSend(MEMORY[0x24BDD16E0], "numberWithBool:", 1);
          v187 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v33, "setObject:forKeyedSubscript:", v187, *MEMORY[0x24BDD6000]);

          -[HMDHomeManager hh2FrameworkSwitch](v68, "hh2FrameworkSwitch");
          v188 = (void *)objc_claimAutoreleasedReturnValue();

          if (v188)
          {
            v189 = (void *)MEMORY[0x24BDD16E0];
            -[HMDHomeManager hh2FrameworkSwitch](v68, "hh2FrameworkSwitch");
            v190 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v189, "numberWithBool:", objc_msgSend(v190, "checkExistenceOfHH2SentinelZone"));
            v191 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v33, "setObject:forKeyedSubscript:", v191, *MEMORY[0x24BDD6180]);

          }
          objc_msgSend(MEMORY[0x24BDD16E0], "numberWithBool:", -[HMDHomeManager isHH2MigrationInProgress](v68, "isHH2MigrationInProgress"));
          v192 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v33, "setObject:forKeyedSubscript:", v192, *MEMORY[0x24BDD5FE0]);

          +[HMDHH2MigratorRecord lastMigrationFailure](HMDHH2MigratorRecord, "lastMigrationFailure");
          v193 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v33, "setObject:forKeyedSubscript:", v193, *MEMORY[0x24BDD5FD8]);

          if (_os_feature_enabled_impl())
          {
            -[HMDHomeManager idsServerBag](v68, "idsServerBag");
            v194 = (void *)objc_claimAutoreleasedReturnValue();
            v195 = objc_msgSend(v194, "isHH2ManualMigrationEnabled");

          }
          else
          {
            v195 = 0;
          }
          objc_msgSend(MEMORY[0x24BE3F248], "sharedPreferences");
          v196 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v196, "preferenceForKey:", CFSTR("hh2ManualMigrationAvailableOverride"));
          v197 = (void *)objc_claimAutoreleasedReturnValue();

          objc_msgSend(v197, "value");
          v198 = (void *)objc_claimAutoreleasedReturnValue();

          if (v198)
          {
            block[0] = MEMORY[0x24BDAC760];
            block[1] = 3221225472;
            block[2] = __56__HMDHomeManager___handleRequestFetchHomeConfiguration___block_invoke;
            block[3] = &unk_24E79C268;
            block[4] = v223;
            v199 = v197;
            v200 = v199;
            v228 = v199;
            if (__handleRequestFetchHomeConfiguration__onceToken == -1)
            {
              v201 = v199;
            }
            else
            {
              dispatch_once(&__handleRequestFetchHomeConfiguration__onceToken, block);
              v201 = v228;
            }
            v195 = objc_msgSend(v200, "BOOLValue");

          }
          objc_msgSend(MEMORY[0x24BDD16E0], "numberWithBool:", v195);
          v202 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v33, "setObject:forKeyedSubscript:", v202, *MEMORY[0x24BDD5FC8]);

          -[HMDHomeManager idsServerBag](v223, "idsServerBag");
          v203 = (void *)objc_claimAutoreleasedReturnValue();
          v204 = objc_msgSend(v203, "homeSafetySecurityEnabled");

          objc_msgSend(MEMORY[0x24BDD16E0], "numberWithBool:", v204);
          v205 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v33, "setObject:forKeyedSubscript:", v205, *MEMORY[0x24BDD5FF8]);

          v206 = (void *)objc_msgSend(v33, "copy");
          objc_msgSend(v225, "respondWithPayload:", v206);

          v34 = v222;
          v38 = v219;
          v36 = v220;
          v42 = v218;
LABEL_130:

          v4 = v225;
          goto LABEL_131;
        }
        v159 = HMIsHAPMetadataNeededForHMHomeManagerOptions();
        v160 = (void *)MEMORY[0x227676638]();
        v161 = v68;
        HMFGetOSLogHandle();
        v162 = objc_claimAutoreleasedReturnValue();
        v163 = os_log_type_enabled(v162, OS_LOG_TYPE_DEFAULT);
        if (v159)
        {
          if (v163)
          {
            HMFGetLogIdentifier();
            v164 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v221, "version");
            v165 = COERCE_DOUBLE(objc_claimAutoreleasedReturnValue());
            *(_DWORD *)buf = 138543874;
            v237 = v164;
            v238 = 2112;
            v239 = v165;
            v240 = 2112;
            v241 = v220;
            _os_log_impl(&dword_2218F0000, v162, OS_LOG_TYPE_DEFAULT, "%{public}@Home manager HAP metadata version %@ does not match client's value of %@", buf, 0x20u);

          }
          objc_autoreleasePoolPop(v160);
          objc_msgSend(MEMORY[0x24BDBCE60], "timeIntervalSinceReferenceDate");
          v167 = v166;
          +[HMDHAPMetadata getSharedInstance](HMDHAPMetadata, "getSharedInstance");
          v168 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v168, "xpcData:", objc_msgSend(v225, "isEntitledForSPIAccess"));
          v169 = (void *)objc_claimAutoreleasedReturnValue();
          v170 = objc_msgSend(MEMORY[0x24BDBCE60], "timeIntervalSinceReferenceDate");
          v172 = v171;
          v173 = (void *)MEMORY[0x227676638](v170);
          v174 = v161;
          HMFGetOSLogHandle();
          v175 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v175, OS_LOG_TYPE_DEFAULT))
          {
            HMFGetLogIdentifier();
            v176 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 138543618;
            v237 = v176;
            v238 = 2048;
            v239 = v172 - v167;
            _os_log_impl(&dword_2218F0000, v175, OS_LOG_TYPE_DEFAULT, "%{public}@Time to encode metadata: %.4f s", buf, 0x16u);

          }
          objc_autoreleasePoolPop(v173);
          objc_msgSend(v33, "setObject:forKeyedSubscript:", v169, CFSTR("kHAPMetadataDataKey"));
          -[HMDHomeManager setCacheUseAllowed:](v174, "setCacheUseAllowed:", 0);

          v68 = v223;
        }
        else
        {
          if (v163)
          {
            HMFGetLogIdentifier();
            v177 = (void *)objc_claimAutoreleasedReturnValue();
            HMHomeManagerOptionsToString();
            v178 = COERCE_DOUBLE(objc_claimAutoreleasedReturnValue());
            objc_msgSend(v225, "clientName");
            v179 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 138543874;
            v237 = v177;
            v238 = 2112;
            v239 = v178;
            v240 = 2112;
            v241 = v179;
            _os_log_impl(&dword_2218F0000, v162, OS_LOG_TYPE_DEFAULT, "%{public}@Client has not requested access to HAP accessories (options %@) - not sending metadata to [%@]", buf, 0x20u);

          }
          objc_autoreleasePoolPop(v160);
        }
LABEL_110:
        v69 = v224;
        goto LABEL_111;
      }
    }
    v70 = (void *)MEMORY[0x227676638]();
    v71 = v68;
    HMFGetOSLogHandle();
    v72 = objc_claimAutoreleasedReturnValue();
    v217 = v71;
    if (os_log_type_enabled(v72, OS_LOG_TYPE_DEFAULT))
    {
      HMFGetLogIdentifier();
      v73 = (void *)objc_claimAutoreleasedReturnValue();
      v74 = COERCE_DOUBLE(-[HMDHomeManager generationCounter](v217, "generationCounter"));
      objc_msgSend(v225, "applicationBundleIdentifier");
      v75 = (void *)objc_claimAutoreleasedReturnValue();
      v76 = COERCE_DOUBLE(objc_msgSend(v222, "unsignedIntegerValue"));
      *(_DWORD *)buf = 138544386;
      v77 = "";
      v237 = v73;
      if (v56)
        v77 = " (forced to update anyways)";
      v238 = 2048;
      v239 = v74;
      v69 = v224;
      v240 = 2112;
      v241 = v75;
      v242 = 2048;
      v243 = v76;
      v244 = 2080;
      v245 = v77;
      _os_log_impl(&dword_2218F0000, v72, OS_LOG_TYPE_DEFAULT, "%{public}@Home manager generation counter %lu does not match client's (%@) value of %lu%s.", buf, 0x34u);

      v68 = v223;
      v71 = v217;
    }

    objc_autoreleasePoolPop(v70);
    if ((v226 & 0x9FCD) == 0)
    {
      if ((v226 & 0x10) == 0)
      {
        v90 = (void *)MEMORY[0x227676638]();
        v91 = v71;
        HMFGetOSLogHandle();
        v92 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v92, OS_LOG_TYPE_DEFAULT))
        {
          HMFGetLogIdentifier();
          v212 = v56;
          v93 = v67;
          v94 = (void *)objc_claimAutoreleasedReturnValue();
          HMHomeManagerOptionsToString();
          v95 = COERCE_DOUBLE(objc_claimAutoreleasedReturnValue());
          *(_DWORD *)buf = 138543618;
          v237 = v94;
          v238 = 2112;
          v239 = v95;
          _os_log_impl(&dword_2218F0000, v92, OS_LOG_TYPE_DEFAULT, "%{public}@Not sending home data as the client has not requested it in their options: %@", buf, 0x16u);

          v67 = v93;
          v56 = v212;
        }

        objc_autoreleasePoolPop(v90);
        v71 = v217;
        goto LABEL_99;
      }
      v214 = v67;
      -[HMDHomeManager _accessoryOfCurrentDevice](v71, "_accessoryOfCurrentDevice");
      v96 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v96, "home");
      v97 = COERCE_DOUBLE(objc_claimAutoreleasedReturnValue());

      if (v97 != 0.0)
      {
        v98 = (void *)MEMORY[0x227676638]();
        v99 = v71;
        HMFGetOSLogHandle();
        v100 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v100, OS_LOG_TYPE_INFO))
        {
          HMFGetLogIdentifier();
          v101 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543618;
          v237 = v101;
          v238 = 2112;
          v239 = v97;
          _os_log_impl(&dword_2218F0000, v100, OS_LOG_TYPE_INFO, "%{public}@Encoding home containing current device's accessory: %@", buf, 0x16u);

        }
        objc_autoreleasePoolPop(v98);
        v235 = v97;
        objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", &v235, 1);
        v102 = (void *)objc_claimAutoreleasedReturnValue();
        encodeRootObjectForIncomingXPCMessage(v102, v225);
        v103 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v33, "setObject:forKeyedSubscript:", v103, CFSTR("kHomeDataKey"));

        v71 = v217;
        if (v224)
        {
          -[HMDHomeManager currentHomeUUID](v99, "currentHomeUUID");
          v104 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(*(id *)&v97, "uuid");
          v105 = (void *)objc_claimAutoreleasedReturnValue();
          v106 = objc_msgSend(v104, "isEqual:", v105);

          if (v106)
          {
            -[HMDHomeManager currentHomeUUID](v99, "currentHomeUUID");
            v107 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v107, "UUIDString");
            v108 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v33, "setObject:forKeyedSubscript:", v108, CFSTR("kCurrentHomeUUIDKey"));

          }
        }
      }

      v69 = v224;
LABEL_98:
      v67 = v214;
LABEL_99:
      -[HMDHomeManager setCacheUseAllowed:](v71, "setCacheUseAllowed:", 0);
      goto LABEL_100;
    }
    v214 = v67;
    v211 = v56;
    -[HMDHomeManager homes](v71, "homes");
    v78 = (void *)objc_claimAutoreleasedReturnValue();
    v79 = v225;
    if (!isAppleTV() || (objc_msgSend(v225, "isEntitledForSPIAccess") & 1) != 0)
    {
      v80 = v78;
      goto LABEL_82;
    }
    -[HMDHomeManager currentHomeUUID](v71, "currentHomeUUID");
    v109 = v71;
    v110 = (void *)objc_claimAutoreleasedReturnValue();
    v207 = v33;
    if (v110)
      -[HMDHomeManager currentHomeUUID](v109, "currentHomeUUID");
    else
      -[HMDHomeManager lastCurrentHomeUUID](v109, "lastCurrentHomeUUID");
    v111 = (void *)objc_claimAutoreleasedReturnValue();

    v112 = (void *)MEMORY[0x24BDBCEB8];
    -[HMDHomeManager homes](v109, "homes");
    v113 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v112, "arrayWithCapacity:", objc_msgSend(v113, "count"));
    v80 = (void *)objc_claimAutoreleasedReturnValue();

    v231 = 0u;
    v232 = 0u;
    v229 = 0u;
    v230 = 0u;
    v114 = v78;
    v115 = objc_msgSend(v114, "countByEnumeratingWithState:objects:count:", &v229, v248, 16);
    if (!v115)
    {
LABEL_81:

      v33 = v207;
      v68 = v223;
      v79 = v225;
      v71 = v217;
LABEL_82:
      -[HMDHomeManager filterHomes:isSPIEntitled:](v71, "filterHomes:isSPIEntitled:", v80, v224);
      v123 = (void *)objc_claimAutoreleasedReturnValue();

      objc_msgSend(MEMORY[0x24BDBCE60], "timeIntervalSinceReferenceDate");
      v125 = v124;
      v215 = v123;
      encodeRootObjectForIncomingXPCMessage(v123, v79);
      v213 = (void *)objc_claimAutoreleasedReturnValue();
      -[HMDHomeManager incomingInvitations](v71, "incomingInvitations");
      v126 = (void *)objc_claimAutoreleasedReturnValue();
      v127 = (void *)objc_msgSend(v126, "copy");
      encodeRootObjectForIncomingXPCMessage(v127, 0);
      v128 = (void *)objc_claimAutoreleasedReturnValue();

      v129 = objc_msgSend(MEMORY[0x24BDBCE60], "timeIntervalSinceReferenceDate");
      v131 = v130;
      v132 = (void *)MEMORY[0x227676638](v129);
      v133 = v71;
      HMFGetOSLogHandle();
      v134 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v134, OS_LOG_TYPE_DEFAULT))
      {
        HMFGetLogIdentifier();
        v208 = (void *)objc_claimAutoreleasedReturnValue();
        v210 = v132;
        objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedInteger:", objc_msgSend(v215, "count"));
        v135 = COERCE_DOUBLE(objc_claimAutoreleasedReturnValue());
        v136 = (void *)MEMORY[0x24BDD16E0];
        -[HMDHomeManager homes](v133, "homes");
        v209 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v136, "numberWithUnsignedInteger:", objc_msgSend(v209, "count"));
        v137 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedInteger:", objc_msgSend(v128, "length") + objc_msgSend(v213, "length"));
        v138 = (char *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v225, "applicationBundleIdentifier");
        v139 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138544642;
        v237 = v208;
        v238 = 2112;
        v239 = v135;
        v240 = 2112;
        v241 = v137;
        v242 = 2048;
        v243 = v131 - v125;
        v244 = 2112;
        v245 = v138;
        v246 = 2112;
        v247 = v139;
        _os_log_impl(&dword_2218F0000, v134, OS_LOG_TYPE_DEFAULT, "%{public}@Number of homes - %@ / %@, Time to encode homes: %.4f s, Size: %@ bytes, client: %@", buf, 0x3Eu);

        v132 = v210;
        v71 = v217;

        v68 = v223;
      }

      objc_autoreleasePoolPop(v132);
      v140 = v213;
      objc_msgSend(v33, "setObject:forKeyedSubscript:", v213, CFSTR("kHomeDataKey"));
      objc_msgSend(v33, "setObject:forKeyedSubscript:", v128, CFSTR("kIncomingHomeInvitationsKey"));
      -[HMDHomeManager lastRemovedCurrentAccessoryUUID](v133, "lastRemovedCurrentAccessoryUUID");
      v141 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v141, "UUIDString");
      v142 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v33, "setObject:forKeyedSubscript:", v142, *MEMORY[0x24BDD6030]);

      -[HMDHomeManager userDefaults](v133, "userDefaults");
      v143 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v143, "objectForKey:", CFSTR("HMDHomeManagerSharedHomesNotYetMigratedKey"));
      v144 = (void *)objc_claimAutoreleasedReturnValue();

      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0)
        v145 = v144;
      else
        v145 = 0;
      v146 = v145;

      objc_msgSend(v146, "allKeys");
      v147 = (void *)objc_claimAutoreleasedReturnValue();

      objc_msgSend(v33, "setObject:forKeyedSubscript:", v147, *MEMORY[0x24BDD6130]);
      -[HMDHomeManager primaryHomeUUID](v133, "primaryHomeUUID");
      v148 = (void *)objc_claimAutoreleasedReturnValue();

      v69 = v224;
      v149 = v215;
      if (!v148)
        goto LABEL_93;
      -[HMDHomeManager primaryHomeUUID](v133, "primaryHomeUUID");
      v150 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v215, "hmf_firstObjectWithUUID:", v150);
      v151 = (void *)objc_claimAutoreleasedReturnValue();

      if (v151)
      {
        -[HMDHomeManager primaryHomeUUID](v133, "primaryHomeUUID");
        v152 = (void *)objc_claimAutoreleasedReturnValue();
      }
      else
      {
        v140 = v213;
        if (!objc_msgSend(v215, "count"))
        {
LABEL_93:
          if (v224)
          {
            -[HMDHomeManager currentHomeUUID](v133, "currentHomeUUID");
            v155 = (void *)objc_claimAutoreleasedReturnValue();

            if (v155)
            {
              -[HMDHomeManager currentHomeUUID](v133, "currentHomeUUID");
              v156 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v156, "UUIDString");
              v157 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v33, "setObject:forKeyedSubscript:", v157, CFSTR("kCurrentHomeUUIDKey"));

              v149 = v215;
            }
            objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedInteger:", objc_msgSend(v149, "count"));
            v158 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v33, "setObject:forKeyedSubscript:", v158, CFSTR("kHomeCountKey"));

          }
          v56 = v211;
          goto LABEL_98;
        }
        objc_msgSend(v215, "firstObject");
        v151 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v151, "uuid");
        v152 = (void *)objc_claimAutoreleasedReturnValue();
      }
      v153 = v152;
      objc_msgSend(v152, "UUIDString");
      v154 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v33, "setObject:forKeyedSubscript:", v154, CFSTR("kPrimaryHomeUUIDKey"));

      v71 = v217;
      v140 = v213;
      goto LABEL_93;
    }
    v116 = v115;
    v117 = *(_QWORD *)v230;
LABEL_70:
    v118 = 0;
    while (1)
    {
      if (*(_QWORD *)v230 != v117)
        objc_enumerationMutation(v114);
      v119 = *(void **)(*((_QWORD *)&v229 + 1) + 8 * v118);
      if (!v111)
        break;
      objc_msgSend(v119, "uuid");
      v120 = (void *)objc_claimAutoreleasedReturnValue();
      v121 = objc_msgSend(v120, "isEqual:", v111);

      if ((v121 & 1) != 0)
        goto LABEL_75;
LABEL_76:
      if (v116 == ++v118)
      {
        v122 = objc_msgSend(v114, "countByEnumeratingWithState:objects:count:", &v229, v248, 16);
        v116 = v122;
        if (!v122)
          goto LABEL_81;
        goto LABEL_70;
      }
    }
    if (!objc_msgSend(v119, "isOwnerUser"))
      goto LABEL_76;
LABEL_75:
    objc_msgSend(v80, "addObject:", v119);
    goto LABEL_76;
  }
  v27 = objc_msgSend(v4, "isEntitledForSPIAccess");
  if ((_DWORD)v27 && v226 != -1)
  {
    v28 = (void *)MEMORY[0x227676638]();
    v29 = v22;
    HMFGetOSLogHandle();
    v30 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v30, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v31 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v237 = v31;
      _os_log_impl(&dword_2218F0000, v30, OS_LOG_TYPE_INFO, "%{public}@Client has specified partial options, not using cache", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v28);
    v27 = 0;
  }
  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithBool:", v27);
  v32 = (void *)objc_claimAutoreleasedReturnValue();
  v33 = v17;
  objc_msgSend(v17, "setObject:forKeyedSubscript:", v32, CFSTR("kCanUseCachedHomeConfigurationKey"));

  v34 = (void *)objc_msgSend(v17, "copy");
  objc_msgSend(v4, "respondWithPayload:", v34);
LABEL_132:

}

- (id)_runtimeState
{
  void *v3;
  __CFString *v4;
  __CFString *v5;
  void *v6;
  void *v7;
  __CFString *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  _QWORD v14[4];
  _QWORD v15[5];

  v15[4] = *MEMORY[0x24BDAC8D0];
  -[HMDHomeManager currentHomeUUID](self, "currentHomeUUID");
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  if (v3)
  {
    v4 = CFSTR("kCurrentHomeUUIDKey");
    v5 = CFSTR("kCurrentHomeUUIDKey");
    -[HMDHomeManager currentHomeUUID](self, "currentHomeUUID");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "UUIDString");
    v7 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v4 = CFSTR("kNoCurrentHomeKey");
    v8 = CFSTR("kNoCurrentHomeKey");
    v7 = (void *)MEMORY[0x24BDBD1C8];
  }
  v14[0] = CFSTR("kResidentCapableDeviceKey");
  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithBool:", -[HMDHomeManager isResidentCapable](self, "isResidentCapable"));
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v15[0] = v9;
  v14[1] = CFSTR("kResidentEnabledKey");
  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithBool:", -[HMDHomeManager isResidentEnabled](self, "isResidentEnabled"));
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v15[1] = v10;
  v14[2] = CFSTR("kAccessAllowedWhenLockedKey");
  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithBool:", -[HMDHomeManager isAccessAllowedWhenLocked](self, "isAccessAllowedWhenLocked"));
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v14[3] = v4;
  v15[2] = v11;
  v15[3] = v7;
  objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v15, v14, 4);
  v12 = (void *)objc_claimAutoreleasedReturnValue();

  return v12;
}

- (void)_getRuntimeStateUpdateForHomeManager:(BOOL)a3 includeMediaAccessorySessionState:(BOOL)a4 options:(unint64_t)a5 includeResidentDeviceState:(BOOL)a6 completion:(id)a7
{
  _BOOL8 v7;
  id v10;
  NSObject *v11;
  void *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  void *v18;
  void *v19;
  id v20;
  NSObject *v21;
  id v22;
  BOOL v23;
  id v24;
  id obj;
  _BOOL4 v27;
  HMDHomeManager *val;
  _QWORD block[4];
  id v30;
  HMDHomeManager *v31;
  id v32;
  BOOL v33;
  _QWORD v34[4];
  id v35;
  id v36;
  NSObject *v37;
  id v38;
  id location;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  _BYTE v44[128];
  uint64_t v45;

  v27 = a6;
  v7 = a4;
  v45 = *MEMORY[0x24BDAC8D0];
  v10 = a7;
  if (v10)
  {
    v23 = a3;
    v24 = v10;
    v11 = dispatch_group_create();
    val = self;
    -[HMDHomeManager homes](self, "homes");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDBCED8], "dictionaryWithCapacity:", objc_msgSend(v12, "count"));
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    v42 = 0u;
    v43 = 0u;
    v40 = 0u;
    v41 = 0u;
    obj = v12;
    v14 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v40, v44, 16);
    if (v14)
    {
      v15 = *(_QWORD *)v41;
      do
      {
        v16 = 0;
        do
        {
          if (*(_QWORD *)v41 != v15)
            objc_enumerationMutation(obj);
          v17 = *(void **)(*((_QWORD *)&v40 + 1) + 8 * v16);
          dispatch_group_enter(v11);
          objc_msgSend(v17, "uuid");
          v18 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v18, "UUIDString");
          v19 = (void *)objc_claimAutoreleasedReturnValue();

          objc_initWeak(&location, val);
          v34[0] = MEMORY[0x24BDAC760];
          v34[1] = 3221225472;
          v34[2] = __135__HMDHomeManager__getRuntimeStateUpdateForHomeManager_includeMediaAccessorySessionState_options_includeResidentDeviceState_completion___block_invoke;
          v34[3] = &unk_24E7962B0;
          objc_copyWeak(&v38, &location);
          v35 = v13;
          v20 = v19;
          v36 = v20;
          v37 = v11;
          objc_msgSend(v17, "getRunTimeStateUpdateWithOptions:includeMediaAccessorySessionState:includeResidentDeviceState:completion:", a5, v7, v27, v34);

          objc_destroyWeak(&v38);
          objc_destroyWeak(&location);

          ++v16;
        }
        while (v14 != v16);
        v14 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v40, v44, 16);
      }
      while (v14);
    }

    -[HMDHomeManager workQueue](val, "workQueue");
    v21 = objc_claimAutoreleasedReturnValue();
    block[0] = MEMORY[0x24BDAC760];
    block[1] = 3221225472;
    block[2] = __135__HMDHomeManager__getRuntimeStateUpdateForHomeManager_includeMediaAccessorySessionState_options_includeResidentDeviceState_completion___block_invoke_3;
    block[3] = &unk_24E7962D8;
    v33 = v23;
    v30 = v13;
    v31 = val;
    v32 = v24;
    v22 = v13;
    dispatch_group_notify(v11, v21, block);

    v10 = v24;
  }

}

- (void)_handleRequestRuntimeStateUpdate:(id)a3
{
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BOOL8 v8;
  _QWORD v9[4];
  id v10;

  v4 = a3;
  v5 = objc_msgSend(v4, "homeManagerOptions");
  v6 = objc_msgSend(v4, "isEntitledForSPIAccess");
  if ((v5 & 0x8741) != 0)
  {
    v7 = v6;
    v8 = -[HMDHomeManager hasClientRequestedMediaAccessoryControl:](self, "hasClientRequestedMediaAccessoryControl:", v4);
    v9[0] = MEMORY[0x24BDAC760];
    v9[1] = 3221225472;
    v9[2] = __51__HMDHomeManager__handleRequestRuntimeStateUpdate___block_invoke;
    v9[3] = &unk_24E796300;
    v10 = v4;
    -[HMDHomeManager _getRuntimeStateUpdateForHomeManager:includeMediaAccessorySessionState:options:includeResidentDeviceState:completion:](self, "_getRuntimeStateUpdateForHomeManager:includeMediaAccessorySessionState:options:includeResidentDeviceState:completion:", v7, v8, v5, v7, v9);

  }
  else
  {
    objc_msgSend(v4, "respondWithPayload:", 0);
  }

}

- (BOOL)hasClientRequestedMediaAccessoryControl:(id)a3
{
  void *v4;
  void *v5;
  char v6;
  _QWORD v8[4];
  id v9;

  objc_msgSend(a3, "applicationBundleIdentifier");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  if (v4)
  {
    -[HMDHomeManager homes](self, "homes");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v8[0] = MEMORY[0x24BDAC760];
    v8[1] = 3221225472;
    v8[2] = __58__HMDHomeManager_hasClientRequestedMediaAccessoryControl___block_invoke;
    v8[3] = &unk_24E796248;
    v9 = v4;
    v6 = objc_msgSend(v5, "na_any:", v8);

  }
  else
  {
    v6 = 0;
  }

  return v6;
}

- (void)sendPairingIdentity:(id)a3 includePrivateKey:(BOOL)a4 requestMessage:(id)a5
{
  id v8;
  id v9;
  id v10;
  void *v11;
  id v12;
  id v13;
  void *v14;
  void *v15;
  void *v16;
  id v17;
  void *v18;
  HMDHomeManager *v19;
  NSObject *v20;
  _BOOL4 v21;
  void *v22;
  uint64_t v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  HMDHomeManager *v28;
  NSObject *v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint8_t buf[4];
  void *v34;
  __int16 v35;
  id v36;
  uint64_t v37;

  v37 = *MEMORY[0x24BDAC8D0];
  v8 = a3;
  v9 = a5;
  if (a4)
  {
    v10 = v8;
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
      v11 = v10;
    else
      v11 = 0;
    v12 = v11;

    if (v12)
    {
      v13 = objc_alloc(MEMORY[0x24BE3F228]);
      objc_msgSend(v12, "identifier");
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v12, "publicKey");
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v12, "privateKey");
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      v17 = (id)objc_msgSend(v13, "initWithIdentifier:publicKey:privateKey:", v14, v15, v16);

    }
    else
    {
      v17 = v10;
    }

  }
  else
  {
    objc_msgSend(v8, "publicPairingIdentity");
    v17 = (id)objc_claimAutoreleasedReturnValue();
  }
  v18 = (void *)MEMORY[0x227676638]();
  v19 = self;
  HMFGetOSLogHandle();
  v20 = objc_claimAutoreleasedReturnValue();
  v21 = os_log_type_enabled(v20, OS_LOG_TYPE_INFO);
  if (v17)
  {
    if (v21)
    {
      HMFGetLogIdentifier();
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v34 = v22;
      v35 = 2112;
      v36 = v8;
      _os_log_impl(&dword_2218F0000, v20, OS_LOG_TYPE_INFO, "%{public}@Sending the pairing identity %@ to client", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v18);
    encodeRootObject();
    v23 = objc_claimAutoreleasedReturnValue();
    v24 = (void *)v23;
    if (v23)
    {
      v31 = *MEMORY[0x24BDD4D00];
      v32 = v23;
      objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", &v32, &v31, 1);
      v25 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v9, "respondWithPayload:", v25);
    }
    else
    {
      v27 = (void *)MEMORY[0x227676638]();
      v28 = v19;
      HMFGetOSLogHandle();
      v29 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v30 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        v34 = v30;
        v35 = 2112;
        v36 = v8;
        _os_log_impl(&dword_2218F0000, v29, OS_LOG_TYPE_ERROR, "%{public}@Unable to encode the pairing identity : %@", buf, 0x16u);

      }
      objc_autoreleasePoolPop(v27);
      objc_msgSend(MEMORY[0x24BDD1540], "hmErrorWithCode:", 52);
      v25 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v9, "respondWithError:", v25);
    }

  }
  else
  {
    if (v21)
    {
      HMFGetLogIdentifier();
      v26 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v34 = v26;
      _os_log_impl(&dword_2218F0000, v20, OS_LOG_TYPE_INFO, "%{public}@Unable to retrieve pairing identity", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v18);
    objc_msgSend(MEMORY[0x24BDD1540], "hmErrorWithCode:", 2);
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "respondWithError:", v24);
  }

}

- (void)_handlePairingIdentityRequest:(id)a3
{
  void *v4;
  void *v5;
  void *v6;
  NSObject *v7;
  void *v8;
  uint64_t v9;
  uint64_t i;
  void *v11;
  void *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t j;
  id v17;
  void *v18;
  void *v19;
  void *v20;
  int v21;
  void *v22;
  void *v23;
  uint64_t v24;
  void *v25;
  HMDHomeManager *v26;
  NSObject *v27;
  void *v28;
  void *v29;
  void *v30;
  HMDHomeManager *v31;
  NSObject *v32;
  void *v33;
  void *v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  id obj;
  HMDHomeManager *v39;
  id v40;
  _QWORD v41[5];
  id v42;
  _BYTE *v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  _BYTE buf[24];
  uint64_t (*v53)(uint64_t, uint64_t);
  void (*v54)(uint64_t);
  id v55;
  _BYTE v56[128];
  _BYTE v57[128];
  uint64_t v58;

  v58 = *MEMORY[0x24BDAC8D0];
  v40 = a3;
  objc_msgSend(v40, "proxyConnection");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v36 = objc_msgSend(v4, "entitlements");

  objc_msgSend(v40, "stringForKey:", CFSTR("kIdentifierKey"));
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  if (v5)
  {
    v6 = (void *)MEMORY[0x227676638]();
    v39 = self;
    HMFGetOSLogHandle();
    v7 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      *(_QWORD *)&buf[4] = v8;
      *(_WORD *)&buf[12] = 2112;
      *(_QWORD *)&buf[14] = v5;
      _os_log_impl(&dword_2218F0000, v7, OS_LOG_TYPE_INFO, "%{public}@Received request to retrieve pairing identity for identifier : %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v6);
    v50 = 0u;
    v51 = 0u;
    v49 = 0u;
    v48 = 0u;
    -[HMDHomeManager homes](v39, "homes");
    obj = (id)objc_claimAutoreleasedReturnValue();
    v37 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v48, v57, 16);
    if (v37)
    {
      v9 = *(_QWORD *)v49;
      v35 = *(_QWORD *)v49;
      do
      {
        for (i = 0; i != v37; ++i)
        {
          if (*(_QWORD *)v49 != v9)
            objc_enumerationMutation(obj);
          v11 = *(void **)(*((_QWORD *)&v48 + 1) + 8 * i);
          v44 = 0u;
          v45 = 0u;
          v46 = 0u;
          v47 = 0u;
          objc_msgSend(v11, "accessories");
          v12 = (void *)objc_claimAutoreleasedReturnValue();
          v13 = (void *)objc_msgSend(v12, "copy");

          v14 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v44, v56, 16);
          if (v14)
          {
            v15 = *(_QWORD *)v45;
            while (2)
            {
              for (j = 0; j != v14; ++j)
              {
                if (*(_QWORD *)v45 != v15)
                  objc_enumerationMutation(v13);
                v17 = *(id *)(*((_QWORD *)&v44 + 1) + 8 * j);
                if (objc_msgSend(v17, "conformsToProtocol:", &unk_2557F15E8))
                  v18 = v17;
                else
                  v18 = 0;
                objc_msgSend(v18, "pairingIdentity");
                v19 = (void *)objc_claimAutoreleasedReturnValue();

                objc_msgSend(v19, "identifier");
                v20 = (void *)objc_claimAutoreleasedReturnValue();
                v21 = HMFAreStringsEqualIgnoringCase();

                if (v21)
                {
                  -[HMDHomeManager sendPairingIdentity:includePrivateKey:requestMessage:](v39, "sendPairingIdentity:includePrivateKey:requestMessage:", v19, (v36 >> 4) & 1, v40);

                  goto LABEL_33;
                }

              }
              v14 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v44, v56, 16);
              if (v14)
                continue;
              break;
            }
          }

          v9 = v35;
        }
        v37 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v48, v57, 16);
        v9 = v35;
      }
      while (v37);
    }

    if (_os_feature_enabled_impl())
    {
      *(_QWORD *)buf = 0;
      *(_QWORD *)&buf[8] = buf;
      *(_QWORD *)&buf[16] = 0x3032000000;
      v53 = __Block_byref_object_copy__227383;
      v54 = __Block_byref_object_dispose__227384;
      v55 = 0;
      -[HMDHomeManager backingStore](v39, "backingStore");
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v22, "context");
      v23 = (void *)objc_claimAutoreleasedReturnValue();
      v41[0] = MEMORY[0x24BDAC760];
      v41[1] = 3221225472;
      v41[2] = __48__HMDHomeManager__handlePairingIdentityRequest___block_invoke;
      v41[3] = &unk_24E79C0A8;
      v41[4] = v39;
      v43 = buf;
      v42 = v5;
      objc_msgSend(v23, "unsafeSynchronousBlock:", v41);

      v24 = *(_QWORD *)(*(_QWORD *)&buf[8] + 40);
      if (v24)
      {
        -[HMDHomeManager sendPairingIdentity:includePrivateKey:requestMessage:](v39, "sendPairingIdentity:includePrivateKey:requestMessage:", v24, (v36 >> 4) & 1, v40);

        _Block_object_dispose(buf, 8);
        goto LABEL_33;
      }

      _Block_object_dispose(buf, 8);
    }
    v30 = (void *)MEMORY[0x227676638]();
    v31 = v39;
    HMFGetOSLogHandle();
    v32 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v32, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v33 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      *(_QWORD *)&buf[4] = v33;
      *(_WORD *)&buf[12] = 2112;
      *(_QWORD *)&buf[14] = v5;
      _os_log_impl(&dword_2218F0000, v32, OS_LOG_TYPE_INFO, "%{public}@Unable to retrieve pairing identity for accessory: %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v30);
    objc_msgSend(MEMORY[0x24BDD1540], "hmErrorWithCode:", 2);
    v34 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v40, "respondWithError:", v34);

  }
  else
  {
    v25 = (void *)MEMORY[0x227676638]();
    v26 = self;
    HMFGetOSLogHandle();
    v27 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v27, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v28 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      *(_QWORD *)&buf[4] = v28;
      *(_WORD *)&buf[12] = 2112;
      *(_QWORD *)&buf[14] = v40;
      _os_log_impl(&dword_2218F0000, v27, OS_LOG_TYPE_INFO, "%{public}@Unable to retrieve identifier from message: %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v25);
    objc_msgSend(MEMORY[0x24BDD1540], "hmErrorWithCode:", 3);
    v29 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v40, "respondWithError:", v29);

  }
LABEL_33:

}

- (void)_handleFetchCurrentUserPairingIdentityForHomeContainingAccessoryRequest:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  id v7;
  void *v8;
  void *v9;
  void *v10;
  HMDHomeManager *v11;
  NSObject *v12;
  _BOOL4 v13;
  void *v14;
  void *v15;
  HMDHomeManager *v16;
  NSObject *v17;
  void *v18;
  void *v19;
  void *v20;
  HMDHomeManager *v21;
  NSObject *v22;
  void *v23;
  void *v24;
  _QWORD v25[4];
  id v26;
  uint8_t buf[4];
  void *v28;
  __int16 v29;
  id v30;
  __int16 v31;
  void *v32;
  __int16 v33;
  id v34;
  uint64_t v35;

  v35 = *MEMORY[0x24BDAC8D0];
  v4 = a3;
  objc_msgSend(v4, "uuidForKey:", CFSTR("kIdentifierKey"));
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  if (v5)
  {
    -[HMDHomeManager homes](self, "homes");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v25[0] = MEMORY[0x24BDAC760];
    v25[1] = 3221225472;
    v25[2] = __90__HMDHomeManager__handleFetchCurrentUserPairingIdentityForHomeContainingAccessoryRequest___block_invoke;
    v25[3] = &unk_24E796248;
    v7 = v5;
    v26 = v7;
    objc_msgSend(v6, "na_firstObjectPassingTest:", v25);
    v8 = (void *)objc_claimAutoreleasedReturnValue();

    if (v8)
    {
      objc_msgSend(v8, "currentUser");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      v10 = (void *)MEMORY[0x227676638]();
      v11 = self;
      HMFGetOSLogHandle();
      v12 = objc_claimAutoreleasedReturnValue();
      v13 = os_log_type_enabled(v12, OS_LOG_TYPE_INFO);
      if (v9)
      {
        if (v13)
        {
          HMFGetLogIdentifier();
          v14 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138544130;
          v28 = v14;
          v29 = 2112;
          v30 = v9;
          v31 = 2112;
          v32 = v8;
          v33 = 2112;
          v34 = v7;
          _os_log_impl(&dword_2218F0000, v12, OS_LOG_TYPE_INFO, "%{public}@Received request to retrieve pairing identity for current user (%@) in home (%@) with accessory identifier : %@", buf, 0x2Au);

        }
        objc_autoreleasePoolPop(v10);
        objc_msgSend(v9, "fetchPairingIdentityForClientWithMessage:", v4);
      }
      else
      {
        if (v13)
        {
          HMFGetLogIdentifier();
          v24 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543618;
          v28 = v24;
          v29 = 2112;
          v30 = v8;
          _os_log_impl(&dword_2218F0000, v12, OS_LOG_TYPE_INFO, "%{public}@No current user in home: %@", buf, 0x16u);

        }
        objc_autoreleasePoolPop(v10);
        v9 = 0;
      }
    }
    else
    {
      v20 = (void *)MEMORY[0x227676638]();
      v21 = self;
      HMFGetOSLogHandle();
      v22 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v22, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v23 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        v28 = v23;
        v29 = 2112;
        v30 = v7;
        _os_log_impl(&dword_2218F0000, v22, OS_LOG_TYPE_INFO, "%{public}@Unable to find accessory (%@) in any home", buf, 0x16u);

      }
      objc_autoreleasePoolPop(v20);
      objc_msgSend(MEMORY[0x24BDD1540], "hmErrorWithCode:", 2);
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "respondWithError:", v9);
    }

    v19 = v26;
  }
  else
  {
    v15 = (void *)MEMORY[0x227676638]();
    v16 = self;
    HMFGetOSLogHandle();
    v17 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v28 = v18;
      v29 = 2112;
      v30 = v4;
      _os_log_impl(&dword_2218F0000, v17, OS_LOG_TYPE_INFO, "%{public}@Unable to retrieve accessory unique identifier from message: %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v15);
    objc_msgSend(MEMORY[0x24BDD1540], "hmErrorWithCode:", 3);
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "respondWithError:", v19);
  }

}

- (void)_handleForwardedSharedUserInvitationAcceptance:(id)a3
{
  id v4;
  id v5;

  v4 = a3;
  -[HMDHomeManager idsInvitationManager](self, "idsInvitationManager");
  v5 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "handleForwardedAcceptance:", v4);

}

- (void)_handleConnectivityInfoRequest:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  HMDHomeManager *v7;
  NSObject *v8;
  void *v9;
  const char *v10;
  NSObject *v11;
  os_log_type_t v12;
  void *v13;
  HMDHomeManager *v14;
  NSObject *v15;
  void *v16;
  void (**v17)(_QWORD, _QWORD, _QWORD);
  void (**v18)(_QWORD, _QWORD, _QWORD);
  void *v19;
  __int16 v20;
  void *v21;
  HMDHomeManager *v22;
  NSObject *v23;
  _BOOL4 v24;
  void *v25;
  uint64_t i;
  void *v27;
  void *v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  id v34;
  id v35;
  id v36;
  void *v37;
  int v38;
  void *v39;
  uint64_t v40;
  void *v41;
  HMDHomeManager *v42;
  NSObject *v43;
  void *v44;
  void *v45;
  uint64_t v46;
  void *v47;
  void *v48;
  void (**v49)(_QWORD, _QWORD, _QWORD);
  void *v50;
  HMDHomeManager *v51;
  void *v52;
  id obj;
  uint64_t v54;
  uint64_t v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  uint64_t v64;
  void *v65;
  _BYTE v66[128];
  uint8_t v67[128];
  uint8_t buf[4];
  void *v69;
  __int16 v70;
  id v71;
  uint64_t v72;

  v72 = *MEMORY[0x24BDAC8D0];
  v4 = a3;
  objc_msgSend(v4, "responseHandler");
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  if (v5)
  {
    if ((objc_msgSend(v4, "isEntitledForSPIAccess") & 1) != 0)
    {
      if (objc_msgSend(v4, "isRemote"))
      {
        v6 = (void *)MEMORY[0x227676638]();
        v7 = self;
        HMFGetOSLogHandle();
        v8 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
        {
          HMFGetLogIdentifier();
          v9 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543618;
          v69 = v9;
          v70 = 2112;
          v71 = v4;
          v10 = "%{public}@This message should only be passed over XPC: %@";
          v11 = v8;
          v12 = OS_LOG_TYPE_DEFAULT;
LABEL_12:
          _os_log_impl(&dword_2218F0000, v11, v12, v10, buf, 0x16u);

        }
LABEL_13:

        objc_autoreleasePoolPop(v6);
        objc_msgSend(v4, "responseHandler");
        v17 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
        objc_msgSend(MEMORY[0x24BDD1540], "hmErrorWithCode:", 17);
        v18 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
        v17[2](v17, v18, 0);
LABEL_14:

        goto LABEL_15;
      }
      objc_msgSend(v4, "proxyConnection");
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      v20 = objc_msgSend(v19, "entitlements");

      if ((v20 & 0x100) != 0)
      {
        objc_msgSend(v4, "stringForKey:", CFSTR("kIdentifierKey"));
        v17 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
        v21 = (void *)MEMORY[0x227676638]();
        v22 = self;
        HMFGetOSLogHandle();
        v23 = objc_claimAutoreleasedReturnValue();
        v24 = os_log_type_enabled(v23, OS_LOG_TYPE_INFO);
        if (v17)
        {
          v52 = v4;
          if (v24)
          {
            HMFGetLogIdentifier();
            v25 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 138543618;
            v69 = v25;
            v70 = 2112;
            v71 = v17;
            _os_log_impl(&dword_2218F0000, v23, OS_LOG_TYPE_INFO, "%{public}@Received request to retrieve connectivity info for identifier : %@", buf, 0x16u);

          }
          objc_autoreleasePoolPop(v21);
          v62 = 0u;
          v63 = 0u;
          v60 = 0u;
          v61 = 0u;
          v51 = v22;
          -[HMDHomeManager homes](v22, "homes");
          obj = (id)objc_claimAutoreleasedReturnValue();
          v55 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v60, v67, 16);
          if (v55)
          {
            v54 = *(_QWORD *)v61;
            while (2)
            {
              for (i = 0; i != v55; ++i)
              {
                if (*(_QWORD *)v61 != v54)
                  objc_enumerationMutation(obj);
                v27 = *(void **)(*((_QWORD *)&v60 + 1) + 8 * i);
                v56 = 0u;
                v57 = 0u;
                v58 = 0u;
                v59 = 0u;
                objc_msgSend(v27, "accessories");
                v28 = (void *)objc_claimAutoreleasedReturnValue();
                v29 = (void *)objc_msgSend(v28, "copy");

                v30 = objc_msgSend(v29, "countByEnumeratingWithState:objects:count:", &v56, v66, 16);
                if (v30)
                {
                  v31 = v30;
                  v32 = *(_QWORD *)v57;
LABEL_29:
                  v33 = 0;
                  while (1)
                  {
                    if (*(_QWORD *)v57 != v32)
                      objc_enumerationMutation(v29);
                    v34 = *(id *)(*((_QWORD *)&v56 + 1) + 8 * v33);
                    objc_opt_class();
                    v35 = (objc_opt_isKindOfClass() & 1) != 0 ? v34 : 0;
                    v36 = v35;

                    objc_msgSend(v36, "identifier");
                    v37 = (void *)objc_claimAutoreleasedReturnValue();
                    v38 = HMFAreStringsEqualIgnoringCase();

                    if (v38)
                      break;

                    if (v31 == ++v33)
                    {
                      v31 = objc_msgSend(v29, "countByEnumeratingWithState:objects:count:", &v56, v66, 16);
                      if (v31)
                        goto LABEL_29;
                      goto LABEL_41;
                    }
                  }
                  objc_msgSend(v36, "connectivityInfo");
                  v39 = (void *)objc_claimAutoreleasedReturnValue();
                  encodeRootObject();
                  v40 = objc_claimAutoreleasedReturnValue();
                  if (!v40)
                  {

                    goto LABEL_41;
                  }
                  v48 = (void *)v40;
                  v4 = v52;
                  objc_msgSend(v52, "responseHandler");
                  v49 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
                  v64 = *MEMORY[0x24BDD4AF8];
                  v65 = v48;
                  objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", &v65, &v64, 1);
                  v50 = (void *)objc_claimAutoreleasedReturnValue();
                  ((void (**)(_QWORD, _QWORD, void *))v49)[2](v49, 0, v50);

                  v18 = (void (**)(_QWORD, _QWORD, _QWORD))obj;
                  goto LABEL_51;
                }
LABEL_41:

              }
              v55 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v60, v67, 16);
              if (v55)
                continue;
              break;
            }
          }

          v41 = (void *)MEMORY[0x227676638]();
          v42 = v51;
          HMFGetOSLogHandle();
          v43 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v43, OS_LOG_TYPE_INFO))
          {
            HMFGetLogIdentifier();
            v44 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 138543618;
            v69 = v44;
            v70 = 2112;
            v71 = v17;
            _os_log_impl(&dword_2218F0000, v43, OS_LOG_TYPE_INFO, "%{public}@Unable to get connectivity info accessory identifier: %@", buf, 0x16u);

          }
          objc_autoreleasePoolPop(v41);
          v4 = v52;
          objc_msgSend(v52, "responseHandler");
          v18 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
          v45 = (void *)MEMORY[0x24BDD1540];
          v46 = 2;
        }
        else
        {
          if (v24)
          {
            HMFGetLogIdentifier();
            v47 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 138543618;
            v69 = v47;
            v70 = 2112;
            v71 = v4;
            _os_log_impl(&dword_2218F0000, v23, OS_LOG_TYPE_INFO, "%{public}@Unable to retrieve identifier from message: %@", buf, 0x16u);

          }
          objc_autoreleasePoolPop(v21);
          objc_msgSend(v4, "responseHandler");
          v18 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
          v45 = (void *)MEMORY[0x24BDD1540];
          v46 = 3;
        }
        objc_msgSend(v45, "hmErrorWithCode:", v46);
        v29 = (void *)objc_claimAutoreleasedReturnValue();
        ((void (**)(_QWORD, void *, _QWORD))v18)[2](v18, v29, 0);
LABEL_51:

        goto LABEL_14;
      }
      v6 = (void *)MEMORY[0x227676638]();
      v7 = self;
      HMFGetOSLogHandle();
      v8 = objc_claimAutoreleasedReturnValue();
      if (!os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
        goto LABEL_13;
      HMFGetLogIdentifier();
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v69 = v9;
      v70 = 2112;
      v71 = v4;
      v10 = "%{public}@Unable to retrieve connectivity info due to insufficient privileges for message: %@";
    }
    else
    {
      v6 = (void *)MEMORY[0x227676638]();
      v7 = self;
      HMFGetOSLogHandle();
      v8 = objc_claimAutoreleasedReturnValue();
      if (!os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
        goto LABEL_13;
      HMFGetLogIdentifier();
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v69 = v9;
      v70 = 2112;
      v71 = v4;
      v10 = "%{public}@Unable to retrieve connectivity info due to insufficient internal privileges for message: %@";
    }
    v11 = v8;
    v12 = OS_LOG_TYPE_INFO;
    goto LABEL_12;
  }
  v13 = (void *)MEMORY[0x227676638]();
  v14 = self;
  HMFGetOSLogHandle();
  v15 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
  {
    HMFGetLogIdentifier();
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543618;
    v69 = v16;
    v70 = 2112;
    v71 = v4;
    _os_log_impl(&dword_2218F0000, v15, OS_LOG_TYPE_ERROR, "%{public}@No response handler in _handleConnectivityInfoRequest: %@", buf, 0x16u);

  }
  objc_autoreleasePoolPop(v13);
LABEL_15:

}

- (id)__nominateCurrentHomeUUID
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  HMDHomeManager *v9;
  NSObject *v10;
  void *v11;
  id v12;
  void *v13;
  void *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t i;
  void *v20;
  void *v21;
  void *v22;
  int v23;
  void *v24;
  HMDHomeManager *v25;
  NSObject *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  HMDHomeManager *v31;
  NSObject *v32;
  void *v33;
  void *v35;
  HMDHomeManager *v36;
  NSObject *v37;
  void *v38;
  void *v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  uint8_t v44[128];
  uint8_t buf[4];
  void *v46;
  __int16 v47;
  void *v48;
  uint64_t v49;

  v49 = *MEMORY[0x24BDAC8D0];
  -[HMDHomeManager overrideCurrentHomeUUIDToNil](self, "overrideCurrentHomeUUIDToNil");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = v3;
  if (v3)
  {
    if ((objc_msgSend(v3, "BOOLValue") & 1) != 0)
    {
      v5 = 0;
    }
    else
    {
      -[HMDHomeManager currentHomeUUIDOverride](self, "currentHomeUUIDOverride");
      v5 = (void *)objc_claimAutoreleasedReturnValue();
    }
  }
  else
  {
    -[HMDHomeManager _appleMediaAccessoryOfCurrentDevice](self, "_appleMediaAccessoryOfCurrentDevice");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "home");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    if (v7)
    {
      v8 = (void *)MEMORY[0x227676638]();
      v9 = self;
      HMFGetOSLogHandle();
      v10 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        v46 = v11;
        v47 = 2112;
        v48 = v7;
        _os_log_impl(&dword_2218F0000, v10, OS_LOG_TYPE_INFO, "%{public}@Returning current accessory home %@ as current home", buf, 0x16u);

      }
      objc_autoreleasePoolPop(v8);
      objc_msgSend(v7, "uuid");
      v5 = (void *)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      v39 = v6;
      v12 = objc_alloc(MEMORY[0x24BDBCEB8]);
      -[HMDHomeManager homes](self, "homes");
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      v14 = (void *)objc_msgSend(v12, "initWithCapacity:", objc_msgSend(v13, "count"));

      v42 = 0u;
      v43 = 0u;
      v40 = 0u;
      v41 = 0u;
      -[HMDHomeManager homes](self, "homes");
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      v16 = objc_msgSend(v15, "countByEnumeratingWithState:objects:count:", &v40, v44, 16);
      if (v16)
      {
        v17 = v16;
        v18 = *(_QWORD *)v41;
        while (2)
        {
          for (i = 0; i != v17; ++i)
          {
            if (*(_QWORD *)v41 != v18)
              objc_enumerationMutation(v15);
            v20 = *(void **)(*((_QWORD *)&v40 + 1) + 8 * i);
            if (objc_msgSend(v20, "homeLocation") == 3 || objc_msgSend(v20, "homeLocation") == 1)
            {
              objc_msgSend(v20, "uuid");
              v21 = (void *)objc_claimAutoreleasedReturnValue();
              -[HMDHomeManager primaryHomeUUID](self, "primaryHomeUUID");
              v22 = (void *)objc_claimAutoreleasedReturnValue();
              v23 = objc_msgSend(v21, "isEqual:", v22);

              if (v23)
              {
                v30 = (void *)MEMORY[0x227676638]();
                v31 = self;
                HMFGetOSLogHandle();
                v32 = objc_claimAutoreleasedReturnValue();
                if (os_log_type_enabled(v32, OS_LOG_TYPE_INFO))
                {
                  HMFGetLogIdentifier();
                  v33 = (void *)objc_claimAutoreleasedReturnValue();
                  *(_DWORD *)buf = 138543618;
                  v46 = v33;
                  v47 = 2112;
                  v48 = v20;
                  _os_log_impl(&dword_2218F0000, v32, OS_LOG_TYPE_INFO, "%{public}@New nominated current home is primary home : %@", buf, 0x16u);

                }
                objc_autoreleasePoolPop(v30);
                objc_msgSend(v20, "uuid");
                v5 = (void *)objc_claimAutoreleasedReturnValue();

                goto LABEL_27;
              }
              objc_msgSend(v14, "addObject:", v20);
            }
          }
          v17 = objc_msgSend(v15, "countByEnumeratingWithState:objects:count:", &v40, v44, 16);
          if (v17)
            continue;
          break;
        }
      }

      if (objc_msgSend(v14, "count"))
      {
        v24 = (void *)MEMORY[0x227676638](objc_msgSend(v14, "sortUsingComparator:", &__block_literal_global_723));
        v25 = self;
        HMFGetOSLogHandle();
        v26 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v26, OS_LOG_TYPE_INFO))
        {
          HMFGetLogIdentifier();
          v27 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v14, "firstObject");
          v28 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543618;
          v46 = v27;
          v47 = 2112;
          v48 = v28;
          _os_log_impl(&dword_2218F0000, v26, OS_LOG_TYPE_INFO, "%{public}@New nominated current home is %@", buf, 0x16u);

        }
        objc_autoreleasePoolPop(v24);
        objc_msgSend(v14, "firstObject");
        v29 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v29, "uuid");
        v5 = (void *)objc_claimAutoreleasedReturnValue();

      }
      else
      {
        v35 = (void *)MEMORY[0x227676638]();
        v36 = self;
        HMFGetOSLogHandle();
        v37 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v37, OS_LOG_TYPE_INFO))
        {
          HMFGetLogIdentifier();
          v38 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543362;
          v46 = v38;
          _os_log_impl(&dword_2218F0000, v37, OS_LOG_TYPE_INFO, "%{public}@There is no current home", buf, 0xCu);

        }
        objc_autoreleasePoolPop(v35);
        v5 = 0;
      }
LABEL_27:
      v6 = v39;
      v4 = 0;
      v7 = 0;

    }
  }

  return v5;
}

- (id)_nominateCurrentHomeUUID
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  int v10;
  void *v11;
  HMDHomeManager *v12;
  NSObject *v13;
  void *v14;
  void *v15;
  void *v16;
  HMDHomeManager *v17;
  NSObject *v18;
  void *v19;
  int v21;
  void *v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  -[HMDHomeManager currentHomeUUID](self, "currentHomeUUID");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHomeManager _homeWithUUID:](self, "_homeWithUUID:", v3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  if (objc_msgSend(v4, "homeLocation") != 1)
  {
LABEL_10:
    -[HMDHomeManager __nominateCurrentHomeUUID](self, "__nominateCurrentHomeUUID");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    goto LABEL_11;
  }
  -[HMDHomeManager _appleMediaAccessoryOfCurrentDevice](self, "_appleMediaAccessoryOfCurrentDevice");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "home");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = v6;
  if (v6)
  {
    objc_msgSend(v6, "uuid");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "uuid");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v10 = objc_msgSend(v8, "hmf_isEqualToUUID:", v9);

    if (!v10)
    {
      v16 = (void *)MEMORY[0x227676638]();
      v17 = self;
      HMFGetOSLogHandle();
      v18 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v19 = (void *)objc_claimAutoreleasedReturnValue();
        v21 = 138543362;
        v22 = v19;
        _os_log_impl(&dword_2218F0000, v18, OS_LOG_TYPE_INFO, "%{public}@Current home does not match current accessory home, recalculating...", (uint8_t *)&v21, 0xCu);

      }
      objc_autoreleasePoolPop(v16);

      goto LABEL_10;
    }
  }
  v11 = (void *)MEMORY[0x227676638]();
  v12 = self;
  HMFGetOSLogHandle();
  v13 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    v21 = 138543362;
    v22 = v14;
    _os_log_impl(&dword_2218F0000, v13, OS_LOG_TYPE_INFO, "%{public}@Last current home still has AtHome status, stay as current home", (uint8_t *)&v21, 0xCu);

  }
  objc_autoreleasePoolPop(v11);
  objc_msgSend(v4, "uuid");
  v15 = (void *)objc_claimAutoreleasedReturnValue();

LABEL_11:
  return v15;
}

- (void)_updateCurrentHomeIfNecessary
{
  id v3;

  -[HMDHomeManager _nominateCurrentHomeUUID](self, "_nominateCurrentHomeUUID");
  v3 = (id)objc_claimAutoreleasedReturnValue();
  -[HMDHomeManager _notifyCurrentHomeUpdated:isLocalUpdate:](self, "_notifyCurrentHomeUpdated:isLocalUpdate:", v3, 1);

}

- (void)_notifyCurrentHomeUpdated:(id)a3 isLocalUpdate:(BOOL)a4
{
  id v5;
  void *v6;
  void *v7;
  NSObject *v8;
  void *v9;
  void *v10;
  void *v11;
  NSObject *v12;
  void *v13;
  void *v14;
  _BOOL8 v15;
  void *v16;
  NSObject *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  void *v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  _BYTE v36[128];
  const __CFString *v37;
  uint64_t v38;
  const __CFString *v39;
  void *v40;
  uint8_t buf[4];
  void *v42;
  __int16 v43;
  id v44;
  __int16 v45;
  id v46;
  uint64_t v47;

  v47 = *MEMORY[0x24BDAC8D0];
  v5 = a3;
  -[HMDHomeManager currentHomeUUID](self, "currentHomeUUID");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  if (!HMFEqualObjects())
  {
    if (v5)
    {
      -[HMDHomeManager _homeWithUUID:](self, "_homeWithUUID:", v5);
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      if (isAppleTV() && v10 && (objc_msgSend(v10, "isOwnerUser") & 1) == 0)
      {
        v11 = (void *)MEMORY[0x227676638]();
        HMFGetOSLogHandle();
        v12 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
        {
          HMFGetLogIdentifier();
          v13 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v5, "UUIDString");
          v14 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543618;
          v42 = v13;
          v43 = 2112;
          v44 = v14;
          _os_log_impl(&dword_2218F0000, v12, OS_LOG_TYPE_INFO, "%{public}@Not updating current home since user is not owner of home %@", buf, 0x16u);

        }
        objc_autoreleasePoolPop(v11);
LABEL_26:

        goto LABEL_27;
      }
    }
    else
    {
      v10 = 0;
    }
    v15 = isWatch();
    v16 = (void *)MEMORY[0x227676638](v15);
    HMFGetOSLogHandle();
    v17 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543874;
      v42 = v18;
      v43 = 2112;
      v44 = v6;
      v45 = 2112;
      v46 = v5;
      _os_log_impl(&dword_2218F0000, v17, OS_LOG_TYPE_INFO, "%{public}@Updating the current home from %@ to %@", buf, 0x20u);

    }
    objc_autoreleasePoolPop(v16);
    -[HMDHomeManager setCurrentHomeUUID:](self, "setCurrentHomeUUID:", v5);
    if (v5)
    {
      -[HMDHomeManager setLastCurrentHomeUUID:](self, "setLastCurrentHomeUUID:", v5);
      v39 = CFSTR("kCurrentHomeUUIDKey");
      objc_msgSend(v5, "UUIDString");
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      v40 = v19;
      objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", &v40, &v39, 1);
      v20 = (void *)objc_claimAutoreleasedReturnValue();

    }
    else
    {
      v37 = CFSTR("kNoCurrentHomeKey");
      v38 = MEMORY[0x24BDBD1C8];
      objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", &v38, &v37, 1);
      v20 = (void *)objc_claimAutoreleasedReturnValue();
    }
    objc_msgSend(MEMORY[0x24BE3F1B0], "entitledMessageWithName:messagePayload:", CFSTR("kCurrentHomeChangedNotificationKey"), v20);
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHomeManager messageDispatcher](self, "messageDispatcher");
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHomeManager uuid](self, "uuid");
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v22, "sendMessage:target:", v21, v23);

    v34 = 0u;
    v35 = 0u;
    v32 = 0u;
    v33 = 0u;
    -[HMDHomeManager watchManager](self, "watchManager", 0);
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v24, "watches");
    v25 = (void *)objc_claimAutoreleasedReturnValue();

    v26 = objc_msgSend(v25, "countByEnumeratingWithState:objects:count:", &v32, v36, 16);
    if (v26)
    {
      v27 = v26;
      v28 = *(_QWORD *)v33;
      do
      {
        v29 = 0;
        do
        {
          if (*(_QWORD *)v33 != v28)
            objc_enumerationMutation(v25);
          -[HMDHomeManager _sendCurrentHomeToWatch:](self, "_sendCurrentHomeToWatch:", *(_QWORD *)(*((_QWORD *)&v32 + 1) + 8 * v29++));
        }
        while (v27 != v29);
        v27 = objc_msgSend(v25, "countByEnumeratingWithState:objects:count:", &v32, v36, 16);
      }
      while (v27);
    }

    -[HMDHomeManager writeAssistantCurrentHome:](self, "writeAssistantCurrentHome:", v10);
    v30 = (void *)objc_opt_new();
    objc_msgSend(v30, "setObject:forKeyedSubscript:", v5, CFSTR("HMDCurrentHomeUUIDKey"));
    objc_msgSend(v30, "setObject:forKeyedSubscript:", v6, CFSTR("HMDPreviousHomeUUIDKey"));
    objc_msgSend(MEMORY[0x24BDD16D0], "defaultCenter");
    v31 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v31, "postNotificationName:object:userInfo:", CFSTR("HMDNotificationCurrentHomeDidChange"), self, v30);

    goto LABEL_26;
  }
  v7 = (void *)MEMORY[0x227676638]();
  HMFGetOSLogHandle();
  v8 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543618;
    v42 = v9;
    v43 = 2112;
    v44 = v5;
    _os_log_impl(&dword_2218F0000, v8, OS_LOG_TYPE_INFO, "%{public}@Current home is already %@, not notifying", buf, 0x16u);

  }
  objc_autoreleasePoolPop(v7);
LABEL_27:

}

- (void)_sendCurrentHomeToWatch:(id)a3
{
  id v4;
  void *v5;
  HMDHomeKitVersion *v6;
  char v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  NSObject *v13;
  void *v14;
  HMDRemoteDeviceMessageDestination *v15;
  void *v16;
  HMDRemoteDeviceMessageDestination *v17;
  void *v18;
  void *v19;
  const __CFString *v20;
  uint64_t v21;
  const __CFString *v22;
  void *v23;
  uint8_t buf[4];
  void *v25;
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  v4 = a3;
  objc_msgSend(v4, "version");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = -[HMDHomeKitVersion initWithVersionString:]([HMDHomeKitVersion alloc], "initWithVersionString:", CFSTR("3.0"));
  v7 = objc_msgSend(v5, "isAtLeastVersion:", v6);

  if ((v7 & 1) != 0)
  {
    -[HMDHomeManager currentHomeUUID](self, "currentHomeUUID");
    v8 = (void *)objc_claimAutoreleasedReturnValue();

    if (v8)
    {
      v22 = CFSTR("kCurrentHomeUUIDKey");
      -[HMDHomeManager currentHomeUUID](self, "currentHomeUUID");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v9, "UUIDString");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      v23 = v10;
      objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", &v23, &v22, 1);
      v11 = (void *)objc_claimAutoreleasedReturnValue();

    }
    else
    {
      v20 = CFSTR("kNoCurrentHomeKey");
      v21 = MEMORY[0x24BDBD1C8];
      objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", &v21, &v20, 1);
      v11 = (void *)objc_claimAutoreleasedReturnValue();
    }
    v15 = [HMDRemoteDeviceMessageDestination alloc];
    -[HMDHomeManager uuid](self, "uuid");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    v17 = -[HMDRemoteDeviceMessageDestination initWithTarget:device:](v15, "initWithTarget:device:", v16, v4);

    objc_msgSend(MEMORY[0x24BE3F1B0], "messageWithName:qualityOfService:destination:payload:", CFSTR("kCurrentHomeChangedNotificationKey"), 9, v17, v11);
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHomeManager messageDispatcher](self, "messageDispatcher");
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v19, "sendMessage:completionHandler:", v18, 0);

  }
  else
  {
    v12 = (void *)MEMORY[0x227676638]();
    HMFGetOSLogHandle();
    v13 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v25 = v14;
      _os_log_impl(&dword_2218F0000, v13, OS_LOG_TYPE_INFO, "%{public}@Not sending current home update to legacy watch", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v12);
  }

}

- (void)_handleCurrentHomeChanged:(id)a3
{
  void *v4;
  void *v5;
  void *v6;
  void (**v7)(_QWORD, _QWORD, _QWORD);
  id v8;

  v8 = a3;
  objc_msgSend(v8, "messagePayload");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "hmf_UUIDForKey:", CFSTR("kCurrentHomeUUIDKey"));
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  -[HMDHomeManager _notifyCurrentHomeUpdated:isLocalUpdate:](self, "_notifyCurrentHomeUpdated:isLocalUpdate:", v5, 0);
  objc_msgSend(v8, "responseHandler");
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  if (v6)
  {
    objc_msgSend(v8, "responseHandler");
    v7 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
    v7[2](v7, 0, 0);

  }
}

- (id)_findHomeModel:(id)a3
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  id v8;
  void *v9;
  id v10;
  uint64_t isKindOfClass;
  id v12;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  _BYTE v18[128];
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v14 = 0u;
  v15 = 0u;
  v16 = 0u;
  v17 = 0u;
  v3 = a3;
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v15;
    while (2)
    {
      for (i = 0; i != v5; ++i)
      {
        if (*(_QWORD *)v15 != v6)
          objc_enumerationMutation(v3);
        v8 = *(id *)(*((_QWORD *)&v14 + 1) + 8 * i);
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0)
          v9 = v8;
        else
          v9 = 0;
        v10 = v9;

        if (v10)
        {

LABEL_17:
          v12 = v8;
          goto LABEL_18;
        }
        v8 = v8;
        objc_opt_class();
        isKindOfClass = objc_opt_isKindOfClass();

        if ((isKindOfClass & 1) != 0 && v8)
          goto LABEL_17;
      }
      v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
      v12 = 0;
      if (v5)
        continue;
      break;
    }
  }
  else
  {
    v12 = 0;
  }
LABEL_18:

  return v12;
}

- (void)_handleRequestAddHome:(id)a3
{
  void *v4;
  id v5;

  v5 = a3;
  -[HMDHomeManager hh2FrameworkSwitch](self, "hh2FrameworkSwitch");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "checkExistenceOfHH2SentinelZone");

  -[HMDHomeManager dmHandleRequestAddHome:](self, "dmHandleRequestAddHome:", v5);
}

- (id)validateHomeName:(id)a3
{
  id v4;
  unint64_t v5;
  void *v6;
  HMDHomeManager *v7;
  NSObject *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  void *v12;
  void *v13;
  void *v15;
  uint64_t v16;
  int v17;
  void *v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v4 = a3;
  v5 = HMMaxLengthForNaming();
  if (objc_msgSend(v4, "length") > v5)
  {
    v6 = (void *)MEMORY[0x227676638]();
    v7 = self;
    HMFGetOSLogHandle();
    v8 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      v17 = 138543362;
      v18 = v9;
      _os_log_impl(&dword_2218F0000, v8, OS_LOG_TYPE_ERROR, "%{public}@New name is longer than the pre-defined max length", (uint8_t *)&v17, 0xCu);

    }
    objc_autoreleasePoolPop(v6);
    v10 = (void *)MEMORY[0x24BDD1540];
    v11 = 46;
    goto LABEL_7;
  }
  -[HMDHomeManager _homeWithName:](self, "_homeWithName:", v4);
  v12 = (void *)objc_claimAutoreleasedReturnValue();

  if (v12)
  {
    v10 = (void *)MEMORY[0x24BDD1540];
    v11 = 32;
LABEL_7:
    objc_msgSend(v10, "hmErrorWithCode:", v11);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    goto LABEL_8;
  }
  -[HMDHomeManager uuid](self, "uuid");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHomeManager addName:namespace:](self, "addName:namespace:", v4, v15);
  v13 = (void *)objc_claimAutoreleasedReturnValue();

  if (v13 && objc_msgSend(v13, "code") == 31)
  {
    objc_msgSend(MEMORY[0x24BDD1540], "hmErrorWithCode:", 32);
    v16 = objc_claimAutoreleasedReturnValue();

    v13 = (void *)v16;
  }
LABEL_8:

  return v13;
}

- (void)processHomeModelAdd:(id)a3 message:(id)a4
{
  id v7;
  id v8;
  NSObject *logger;
  NSObject *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  uint64_t v17;
  void *v18;
  const __CFString *v19;
  id v20;
  void *v21;
  uint64_t v22;
  void *v23;
  id v24;
  void *v25;
  uint64_t v26;
  id v27;
  void *v28;
  void *v29;
  uint64_t v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  HMDHomeManager *v38;
  HMDHomeManager *v39;
  NSObject *v40;
  void *v41;
  void *v42;
  void *v43;
  void *v44;
  void *v45;
  void *v46;
  __CFString *v47;
  unint64_t v48;
  int v49;
  id v50;
  void *v51;
  HMDHomeManager *v52;
  NSObject *v53;
  id v54;
  void *v55;
  void *v56;
  void *v57;
  void (**v58)(_QWORD, _QWORD, _QWORD);
  void *v59;
  void *v60;
  uint64_t v61;
  void *v62;
  const __CFString *v63;
  void *v64;
  void *v65;
  void *v66;
  uint64_t v67;
  id v68;
  void *v69;
  const __CFString *v70;
  id v71;
  void *v72;
  NSObject *v73;
  NSObject *v74;
  void *v75;
  NSObject *v76;
  void *v77;
  HMDHomeManager *v78;
  NSObject *v79;
  void *v80;
  void *v81;
  void *v82;
  void *v83;
  void (**v84)(_QWORD, _QWORD, _QWORD);
  void *v85;
  void *v86;
  void *v87;
  id v88;
  void *v89;
  uint64_t v90;
  void *v91;
  void *v92;
  const __CFString *v93;
  id v94;
  void *v95;
  NSObject *v96;
  NSObject *v97;
  void *v98;
  NSObject *v99;
  void *v100;
  HMDHomeManager *v101;
  NSObject *v102;
  void *v103;
  objc_class *v104;
  void *v105;
  HMDHomeManager *v106;
  void *v107;
  void *v108;
  void *v109;
  id v110;
  void *v111;
  uint64_t v112;
  void *v113;
  void *v114;
  uint64_t v115;
  HMDHome *v116;
  void *v117;
  HMDHome *v118;
  void *v119;
  void *v120;
  void *v121;
  id v122;
  void *v123;
  void *v124;
  id v125;
  void *v126;
  void *v127;
  void *v128;
  id v129;
  void *v130;
  HMDHomeManager *v131;
  NSObject *v132;
  void *v133;
  void *v134;
  void *v135;
  void *v136;
  HMDHomeManager *v137;
  NSObject *v138;
  void *v139;
  void *v140;
  void *v141;
  void *v142;
  void *v143;
  void *v144;
  void *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t i;
  id v150;
  char isKindOfClass;
  uint64_t v152;
  void *v153;
  int v154;
  void *v155;
  void *v156;
  void *v157;
  void *v158;
  void *v159;
  void *v160;
  uint64_t v161;
  void *v162;
  _BOOL4 v163;
  void *v164;
  char v165;
  void *v166;
  void *v167;
  id v168;
  void *v169;
  void *v170;
  void *v171;
  HMDHomeManager *v172;
  NSObject *v173;
  void *v174;
  void *v175;
  HMDHomeManager *v176;
  void *v177;
  void *v178;
  void *v179;
  HMDHomeManager *v180;
  int v181;
  void *v182;
  void *v183;
  void *v184;
  HMDHomeManager *v185;
  NSObject *v186;
  void *v187;
  void *v188;
  void *v189;
  id v190;
  void *v191;
  void *v192;
  void *v193;
  void *v194;
  void *v195;
  void *v196;
  void *v197;
  void *v198;
  void *v199;
  void *v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t j;
  void *v205;
  HMDActionSetModel *v206;
  void *v207;
  void *v208;
  HMDActionSetModel *v209;
  void *v210;
  void *v211;
  void *v212;
  NSObject *v213;
  HMDHome *v214;
  void *v215;
  id v216;
  void *v217;
  void *v218;
  void *v219;
  _BOOL4 v220;
  void *v221;
  HMDHomeManager *v222;
  HMDHomeManager *v223;
  void *v224;
  void *v225;
  void *v226;
  id obj;
  id obja;
  void *v229;
  void *v230;
  HMDHome *v231;
  __int128 v232;
  __int128 v233;
  __int128 v234;
  __int128 v235;
  __int128 v236;
  __int128 v237;
  __int128 v238;
  __int128 v239;
  id v240;
  id v241;
  _BYTE v242[128];
  _QWORD v243[2];
  _QWORD v244[2];
  uint8_t v245[128];
  uint8_t buf[4];
  void *v247;
  __int16 v248;
  void *v249;
  __int16 v250;
  void *v251;
  _QWORD v252[2];
  _QWORD v253[2];
  _QWORD v254[3];
  _QWORD v255[3];
  const __CFString *v256;
  _QWORD v257[4];

  v257[1] = *MEMORY[0x24BDAC8D0];
  v7 = a3;
  v8 = a4;
  logger = self->_logger;
  if (os_signpost_enabled(logger))
  {
    v10 = logger;
    objc_msgSend(v7, "uuid");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "parentUUID");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138412546;
    v247 = v11;
    v248 = 2112;
    v249 = v12;
    _os_signpost_emit_with_name_impl(&dword_2218F0000, v10, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "HomeModelAdd", "identifier=%{signpost.description:attribute}@ parentIdentifier=%{signpost.description:attribute}@ ", buf, 0x16u);

  }
  -[HMDHomeManager setupActivity](self, "setupActivity");
  v13 = (void *)objc_claimAutoreleasedReturnValue();

  if (v13)
  {
    -[HMDHomeManager setupActivity](self, "setupActivity");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    v256 = CFSTR("HMDHomeModelUUID");
    objc_msgSend(v7, "uuid");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    HMDailyRotatedUUID();
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v16, "UUIDString");
    v17 = objc_claimAutoreleasedReturnValue();
    v18 = (void *)v17;
    v19 = CFSTR("no uuid");
    if (v17)
      v19 = (const __CFString *)v17;
    v257[0] = v19;
    v20 = (id)objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v257, &v256, 1);

    -[HMDHomeManager setupActivity](self, "setupActivity");
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v21, "markWithReason:", CFSTR("HMDHomeManager.processHomeModelAdd.processHomeModelAdd"));

  }
  objc_msgSend(v7, "name");
  v22 = objc_claimAutoreleasedReturnValue();
  v23 = (void *)v22;
  if (v22)
  {
    v226 = (void *)v22;
    v24 = objc_alloc(MEMORY[0x24BE3F230]);
    objc_msgSend(v7, "ownerPublicKey");
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    v26 = objc_msgSend(v24, "initWithPairingKeyData:", v25);

    v27 = objc_alloc(MEMORY[0x24BE3F228]);
    objc_msgSend(v7, "ownerName");
    v28 = (void *)objc_claimAutoreleasedReturnValue();
    v29 = (void *)v26;
    v30 = objc_msgSend(v27, "initWithIdentifier:publicKey:privateKey:", v28, v26, 0);

    objc_msgSend(v7, "ownerUserID");
    v31 = (void *)objc_claimAutoreleasedReturnValue();
    v32 = (void *)v30;
    +[HMDUser ownerWithUserID:home:pairingIdentity:homeManager:](HMDUser, "ownerWithUserID:home:pairingIdentity:homeManager:", v31, 0, v30, self);
    v33 = (void *)objc_claimAutoreleasedReturnValue();

    v225 = v33;
    v222 = self;
    if (v33)
    {
      objc_msgSend(v7, "ownerUUID");
      v34 = (void *)objc_claimAutoreleasedReturnValue();
      if (v34)
      {
        v35 = (void *)objc_msgSend(objc_alloc(MEMORY[0x24BDD1880]), "initWithUUIDString:", v34);
        objc_msgSend(v33, "setUUID:", v35);

      }
      v224 = v8;
      objc_msgSend(v8, "transactionResult");
      v36 = (void *)objc_claimAutoreleasedReturnValue();
      v37 = (void *)MEMORY[0x227676638]();
      v38 = self;
      v39 = self;
      HMFGetOSLogHandle();
      v40 = objc_claimAutoreleasedReturnValue();
      v23 = v226;
      v41 = v36;
      if (os_log_type_enabled(v40, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v42 = (void *)objc_claimAutoreleasedReturnValue();
        +[HMDBackingStoreTransactionOptions stringForHMDBackingStoreTransactionSource:](HMDBackingStoreTransactionOptions, "stringForHMDBackingStoreTransactionSource:", objc_msgSend(v36, "source"));
        v43 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        v247 = v42;
        v248 = 2112;
        v249 = v43;
        _os_log_impl(&dword_2218F0000, v40, OS_LOG_TYPE_INFO, "%{public}@Process Home Model Add source: %@", buf, 0x16u);

        v23 = v226;
        v33 = v225;
      }

      objc_autoreleasePoolPop(v37);
      v221 = v36;
      if (objc_msgSend(v36, "source") == 1)
      {
        objc_msgSend(MEMORY[0x24BE1BC08], "systemStore");
        v44 = (void *)objc_claimAutoreleasedReturnValue();
        -[HMDHomeManager appleAccountManager](v39, "appleAccountManager");
        v45 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v45, "accountContext");
        v46 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v46, "identifier");
        v47 = (__CFString *)objc_claimAutoreleasedReturnValue();

        v48 = 0x24BDD1000;
        if (!v47)
        {
          v240 = 0;
          v241 = 0;
          v49 = objc_msgSend(v44, "getCurrentiCloudIdentifier:controllerPairingIdentifier:error:", &v241, &v240, 0);
          v47 = (__CFString *)v241;
          v50 = v240;
          if (!v49 || !-[__CFString length](v47, "length") || !objc_msgSend(v50, "length"))
          {
            v51 = (void *)MEMORY[0x227676638]();
            v52 = v39;
            HMFGetOSLogHandle();
            v53 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v53, OS_LOG_TYPE_INFO))
            {
              HMFGetLogIdentifier();
              v54 = v7;
              v55 = (void *)objc_claimAutoreleasedReturnValue();
              *(_DWORD *)buf = 138543362;
              v247 = v55;
              _os_log_impl(&dword_2218F0000, v53, OS_LOG_TYPE_INFO, "%{public}@We don't have an active iCloud account, using the sentinel account identifier to remember the controller key", buf, 0xCu);

              v7 = v54;
              v48 = 0x24BDD1000;
            }

            objc_autoreleasePoolPop(v51);
            v47 = CFSTR("__HomeKit_NoAccount_Identifier__");
            v38 = v222;
            v23 = v226;
          }

        }
        v33 = v225;
        objc_msgSend(v225, "pairingUsername");
        v56 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v44, "updateCurrentiCloudIdentifier:controllerPairingIdentifier:error:", v47, v56, 0);

      }
      else
      {
        v48 = 0x24BDD1000;
        if (objc_msgSend(v41, "source") == 1)
        {
          v100 = (void *)MEMORY[0x227676638]();
          v101 = v39;
          HMFGetOSLogHandle();
          v102 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v102, OS_LOG_TYPE_INFO))
          {
            HMFGetLogIdentifier();
            v103 = (void *)objc_claimAutoreleasedReturnValue();
            v104 = (objc_class *)objc_opt_class();
            NSStringFromClass(v104);
            v105 = v41;
            v106 = v38;
            v107 = (void *)objc_claimAutoreleasedReturnValue();
            NSStringFromSelector(a2);
            v108 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 138543874;
            v247 = v103;
            v248 = 2112;
            v249 = v107;
            v250 = 2112;
            v251 = v108;
            _os_log_impl(&dword_2218F0000, v102, OS_LOG_TYPE_INFO, "%{public}@-[%@ %@] Suppressing iCloud identifier update because CoreData storage is enabled", buf, 0x20u);

            v38 = v106;
            v41 = v105;
            v48 = 0x24BDD1000uLL;

            v23 = v226;
          }

          objc_autoreleasePoolPop(v100);
          v33 = v225;
        }
      }
      objc_msgSend(v7, "defaultRoomUUID");
      v109 = (void *)objc_claimAutoreleasedReturnValue();

      if (v109)
      {
        v110 = objc_alloc(*(Class *)(v48 + 2176));
        objc_msgSend(v7, "defaultRoomUUID");
        v111 = (void *)objc_claimAutoreleasedReturnValue();
        v112 = objc_msgSend(v110, "initWithUUIDString:", v111);

      }
      else
      {
        v112 = 0;
      }
      v113 = (void *)MEMORY[0x24BDD7A90];
      objc_msgSend(v7, "presenceAuthorizationStatus");
      v114 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v113, "authWithNumber:", v114);
      v115 = objc_claimAutoreleasedReturnValue();

      v116 = [HMDHome alloc];
      objc_msgSend(v7, "uuid");
      v117 = (void *)objc_claimAutoreleasedReturnValue();
      v218 = (void *)v115;
      v219 = (void *)v112;
      v118 = -[HMDHome initWithName:uuid:defaultRoomUUID:owner:homeManager:presenceAuth:](v116, "initWithName:uuid:defaultRoomUUID:owner:homeManager:presenceAuth:", v23, v117, v112, v33, v39, v115);

      objc_msgSend(v7, "owned");
      v119 = (void *)objc_claimAutoreleasedReturnValue();
      -[HMDHome setOwnerUser:](v118, "setOwnerUser:", objc_msgSend(v119, "BOOLValue"));

      -[HMDHomeManager nameValidator](v39, "nameValidator");
      v120 = (void *)objc_claimAutoreleasedReturnValue();
      -[HMDHome uuid](v118, "uuid");
      v121 = (void *)objc_claimAutoreleasedReturnValue();
      v122 = (id)objc_msgSend(v120, "addNamespace:", v121);

      -[HMDHome name](v118, "name");
      v123 = (void *)objc_claimAutoreleasedReturnValue();
      -[HMDHomeManager uuid](v39, "uuid");
      v124 = (void *)objc_claimAutoreleasedReturnValue();
      v125 = -[HMDHomeManager addName:namespace:](v39, "addName:namespace:", v123, v124);

      -[HMDHome roomForEntireHome](v118, "roomForEntireHome");
      v126 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v126, "name");
      v127 = (void *)objc_claimAutoreleasedReturnValue();
      -[HMDHome uuid](v118, "uuid");
      v128 = (void *)objc_claimAutoreleasedReturnValue();
      v129 = -[HMDHomeManager addName:namespace:](v39, "addName:namespace:", v127, v128);

      v130 = (void *)MEMORY[0x227676638]();
      v131 = v39;
      HMFGetOSLogHandle();
      v132 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v132, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v133 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v33, "pairingUsername");
        v134 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543874;
        v247 = v133;
        v248 = 2112;
        v249 = v23;
        v250 = 2112;
        v251 = v134;
        _os_log_impl(&dword_2218F0000, v132, OS_LOG_TYPE_INFO, "%{public}@Created home %@ with administrator %@", buf, 0x20u);

        v33 = v225;
      }

      objc_autoreleasePoolPop(v130);
      -[HMDHome uuid](v118, "uuid");
      v135 = (void *)objc_claimAutoreleasedReturnValue();
      -[HMDHomeManager _updateHome:configurationVersion:](v131, "_updateHome:configurationVersion:", v135, -[HMDHome configurationVersion](v118, "configurationVersion"));

      -[HMDHomeManager addHome:](v131, "addHome:", v118);
      -[HMDHome refreshUserDisplayNames](v118, "refreshUserDisplayNames");
      if (objc_msgSend(v41, "source") == 1)
      {
        v216 = v7;
        v136 = (void *)MEMORY[0x227676638]();
        v137 = v131;
        HMFGetOSLogHandle();
        v138 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v138, OS_LOG_TYPE_INFO))
        {
          HMFGetLogIdentifier();
          v139 = (void *)objc_claimAutoreleasedReturnValue();
          -[HMDHome name](v118, "name");
          v140 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543618;
          v247 = v139;
          v248 = 2112;
          v249 = v140;
          _os_log_impl(&dword_2218F0000, v138, OS_LOG_TYPE_INFO, "%{public}@Saving addition objects created during creation of home %@", buf, 0x16u);

        }
        objc_autoreleasePoolPop(v136);
        -[HMDHome backingStore](v118, "backingStore");
        v141 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v224, "name");
        v142 = (void *)objc_claimAutoreleasedReturnValue();
        +[HMDBackingStoreTransactionOptions defaultXPCOptions](HMDBackingStoreTransactionOptions, "defaultXPCOptions");
        v143 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v141, "transaction:options:", v142, v143);
        v144 = (void *)objc_claimAutoreleasedReturnValue();

        -[HMDHome backingStoreObjects:](v118, "backingStoreObjects:", 4);
        v145 = (void *)objc_claimAutoreleasedReturnValue();
        v236 = 0u;
        v237 = 0u;
        v238 = 0u;
        v239 = 0u;
        v146 = objc_msgSend(v145, "countByEnumeratingWithState:objects:count:", &v236, v245, 16);
        if (v146)
        {
          v147 = v146;
          v148 = *(_QWORD *)v237;
          do
          {
            for (i = 0; i != v147; ++i)
            {
              if (*(_QWORD *)v237 != v148)
                objc_enumerationMutation(v145);
              v150 = *(id *)(*((_QWORD *)&v236 + 1) + 8 * i);
              objc_opt_class();
              isKindOfClass = objc_opt_isKindOfClass();

              if ((isKindOfClass & 1) == 0 || !v150)
                objc_msgSend(v144, "add:withMessage:", v150, 0);
            }
            v147 = objc_msgSend(v145, "countByEnumeratingWithState:objects:count:", &v236, v245, 16);
          }
          while (v147);
        }
        objc_msgSend(v144, "save");

        v7 = v216;
        v41 = v221;
        v38 = v222;
        v33 = v225;
        v23 = v226;
      }
      v152 = objc_msgSend(v41, "source");
      -[HMDHome configureWithHomeManager:accessoriesPresent:uncommittedTransactions:source:](v118, "configureWithHomeManager:accessoriesPresent:uncommittedTransactions:source:", v131, 0, MEMORY[0x24BDBD1A8], v152);
      v231 = v118;
      if (-[HMDHome isOwnerUser](v118, "isOwnerUser"))
      {
        +[HMDDeviceCapabilities deviceCapabilities](HMDDeviceCapabilities, "deviceCapabilities");
        v153 = (void *)objc_claimAutoreleasedReturnValue();
        v154 = objc_msgSend(v153, "isResidentCapable");

        if (v154)
        {
          -[HMDHomeManager notificationCenter](v131, "notificationCenter");
          v155 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v155, "addObserver:selector:name:object:", v131, sel_handleHomeCurrentDeviceResidentEligibleNotification_, CFSTR("HMDHomeCurrentDeviceHasReachableAccessories"), v118);

          -[HMDHomeManager appleAccountManager](v131, "appleAccountManager");
          v156 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v156, "device");
          v157 = (void *)objc_claimAutoreleasedReturnValue();

          objc_msgSend(v224, "name");
          v158 = (void *)objc_claimAutoreleasedReturnValue();
          v159 = v23;
          if ((objc_msgSend(v158, "isEqualToString:", CFSTR("kAddHomeRequestKey")) & 1) != 0)
          {
            -[HMDHomeManager capabilitiesController](v131, "capabilitiesController");
            v160 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v160, "currentResidentCapabilities");
            v161 = objc_claimAutoreleasedReturnValue();
            if (v161)
            {
              v162 = (void *)v161;
              v163 = -[HMDHomeManager isResidentEnabled](v131, "isResidentEnabled");

              v33 = v225;
              if (v163)
              {
                -[HMDHome residentCapableDevices](v231, "residentCapableDevices");
                v164 = (void *)objc_claimAutoreleasedReturnValue();
                v165 = objc_msgSend(v164, "containsObject:", v157);

                if ((v165 & 1) == 0)
                  -[HMDHome addResidentCapableDevice:](v231, "addResidentCapableDevice:", v157);
              }
            }
            else
            {

              v33 = v225;
            }
          }
          else
          {

          }
          v23 = v159;
          v118 = v231;
        }
      }
      -[HMDHomeManager updateHomeKitInUsePreferences](v131, "updateHomeKitInUsePreferences");
      v166 = (void *)objc_msgSend(v224, "mutableCopy");
      objc_msgSend(v166, "setResponseHandler:", 0);
      v217 = v166;
      v167 = (void *)objc_msgSend(v166, "copy");
      v168 = -[HMDHome updateHomeWithModel:message:](v118, "updateHomeWithModel:message:", v7, v167);

      -[HMDHome zoneID](v118, "zoneID");
      v169 = (void *)objc_claimAutoreleasedReturnValue();
      -[HMDHome ownerName](v118, "ownerName");
      v170 = (void *)objc_claimAutoreleasedReturnValue();
      -[HMDHomeManager _addCloudZone:ownerName:](v131, "_addCloudZone:ownerName:", v169, v170);

      v171 = (void *)MEMORY[0x227676638]();
      v172 = v131;
      HMFGetOSLogHandle();
      v173 = objc_claimAutoreleasedReturnValue();
      v223 = v172;
      if (os_log_type_enabled(v173, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v174 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        v247 = v174;
        v248 = 2112;
        v249 = v23;
        _os_log_impl(&dword_2218F0000, v173, OS_LOG_TYPE_INFO, "%{public}@Add home: %@", buf, 0x16u);

        v172 = v223;
      }

      objc_autoreleasePoolPop(v171);
      -[HMDHomeManager homes](v172, "homes");
      v175 = (void *)objc_claimAutoreleasedReturnValue();
      if (objc_msgSend(v175, "count") == 1)
      {
        v176 = v38;
        v220 = 1;
        v8 = v224;
      }
      else
      {
        -[HMDHomeManager primaryHomeUUID](v172, "primaryHomeUUID");
        v177 = (void *)objc_claimAutoreleasedReturnValue();
        if (v177)
          v220 = 0;
        else
          v220 = objc_msgSend(v41, "source") != 1;
        v8 = v224;
        v176 = v38;

      }
      -[HMDHomeManager uuidsOfRemovedHomes](v172, "uuidsOfRemovedHomes");
      v178 = (void *)objc_claimAutoreleasedReturnValue();
      -[HMDHome uuid](v118, "uuid");
      v179 = (void *)objc_claimAutoreleasedReturnValue();
      v180 = v172;
      v181 = objc_msgSend(v178, "containsObject:", v179);

      if (v181)
      {
        -[HMDHomeManager uuidsOfRemovedHomes](v180, "uuidsOfRemovedHomes");
        v182 = (void *)objc_claimAutoreleasedReturnValue();
        -[HMDHome uuid](v118, "uuid");
        v183 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v182, "removeObject:", v183);

        v184 = (void *)MEMORY[0x227676638]();
        v185 = v180;
        HMFGetOSLogHandle();
        v186 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v186, OS_LOG_TYPE_INFO))
        {
          HMFGetLogIdentifier();
          v187 = (void *)objc_claimAutoreleasedReturnValue();
          -[HMDHome uuid](v118, "uuid");
          v188 = v23;
          v189 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v189, "UUIDString");
          v190 = v7;
          v191 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543618;
          v247 = v187;
          v248 = 2112;
          v249 = v191;
          _os_log_impl(&dword_2218F0000, v186, OS_LOG_TYPE_INFO, "%{public}@Removing home with UUID %@ from uuids of guest homes removed locally since invite was accepted", buf, 0x16u);

          v23 = v188;
          v8 = v224;

          v7 = v190;
          v118 = v231;

          v33 = v225;
        }

        objc_autoreleasePoolPop(v184);
        v180 = v223;
      }
      -[HMDHome owner](v118, "owner");
      v192 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v192, "account");
      v193 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v193, "senderCorrelationIdentifier");
      v194 = (void *)objc_claimAutoreleasedReturnValue();
      -[HMDHomeManager _stopTrackingRemovedHomeUserMergeId:](v180, "_stopTrackingRemovedHomeUserMergeId:", v194);

      v243[0] = CFSTR("kHomeDataKey");
      if (objc_msgSend(v8, "isEntitledForSPIAccess"))
        encodeRootObjectForSPIClients(v118);
      else
        encodeRootObjectForIncomingXPCMessage(v118, 0);
      v195 = (void *)objc_claimAutoreleasedReturnValue();
      v244[0] = v195;
      v243[1] = *MEMORY[0x24BDD6008];
      objc_msgSend(MEMORY[0x24BDD16E0], "numberWithBool:", v220);
      v196 = (void *)objc_claimAutoreleasedReturnValue();
      v244[1] = v196;
      objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v244, v243, 2);
      v197 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v8, "respondWithPayload:", v197);

      if (-[HMDHome isOwnerUser](v118, "isOwnerUser") && objc_msgSend(v221, "source") == 1)
      {
        -[HMDHome backingStore](v231, "backingStore");
        v198 = (void *)objc_claimAutoreleasedReturnValue();
        +[HMDBackingStoreTransactionOptions defaultXPCOptions](HMDBackingStoreTransactionOptions, "defaultXPCOptions");
        v199 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v198, "transaction:options:", CFSTR("kBuiltinActionSetsKey"), v199);
        v200 = (void *)objc_claimAutoreleasedReturnValue();

        v234 = 0u;
        v235 = 0u;
        v232 = 0u;
        v233 = 0u;
        -[HMDHome builtInActionSetInfo](v231, "builtInActionSetInfo");
        obja = (id)objc_claimAutoreleasedReturnValue();
        v201 = objc_msgSend(obja, "countByEnumeratingWithState:objects:count:", &v232, v242, 16);
        if (v201)
        {
          v202 = v201;
          v203 = *(_QWORD *)v233;
          do
          {
            for (j = 0; j != v202; ++j)
            {
              if (*(_QWORD *)v233 != v203)
                objc_enumerationMutation(obja);
              v205 = *(void **)(*((_QWORD *)&v232 + 1) + 8 * j);
              v206 = [HMDActionSetModel alloc];
              objc_msgSend(v205, "hmf_UUIDForKey:", CFSTR("kActionSetUUID"));
              v207 = (void *)objc_claimAutoreleasedReturnValue();
              -[HMDHome uuid](v231, "uuid");
              v208 = (void *)objc_claimAutoreleasedReturnValue();
              v209 = -[HMDBackingStoreModelObject initWithObjectChangeType:uuid:parentUUID:](v206, "initWithObjectChangeType:uuid:parentUUID:", 1, v207, v208);

              objc_msgSend(v205, "hmf_stringForKey:", CFSTR("kActionSetName"));
              v210 = (void *)objc_claimAutoreleasedReturnValue();
              -[HMDActionSetModel setName:](v209, "setName:", v210);

              objc_msgSend(v205, "hmf_stringForKey:", CFSTR("kActionSetType"));
              v211 = (void *)objc_claimAutoreleasedReturnValue();
              -[HMDActionSetModel setType:](v209, "setType:", v211);

              objc_msgSend(v200, "add:withMessage:", v209, 0);
            }
            v202 = objc_msgSend(obja, "countByEnumeratingWithState:objects:count:", &v232, v242, 16);
          }
          while (v202);
        }

        objc_msgSend(v200, "save");
        v8 = v224;
        v33 = v225;
        v176 = v222;
        v23 = v226;
      }
      -[HMDHomeManager notificationCenter](v223, "notificationCenter");
      v212 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v212, "postNotificationName:object:userInfo:", CFSTR("HMDHomeAddedNotification"), v223, 0);

      v213 = v176->_logger;
      if (os_signpost_enabled(v213))
      {
        *(_WORD *)buf = 0;
        _os_signpost_emit_with_name_impl(&dword_2218F0000, v213, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "HomeModelAdd", ", buf, 2u);
      }
      v82 = v219;
      v214 = v231;
      v29 = v221;
      if (v220)
      {
        -[HMDHome uuid](v231, "uuid");
        v215 = (void *)objc_claimAutoreleasedReturnValue();
        -[HMDHomeManager _changePrimaryHome:](v223, "_changePrimaryHome:", v215);

        v214 = v231;
        -[HMDHomeManager _updateCurrentHomeIfNecessary](v223, "_updateCurrentHomeIfNecessary");
      }

    }
    else
    {
      v77 = (void *)MEMORY[0x227676638]();
      v78 = self;
      HMFGetOSLogHandle();
      v79 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v79, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v80 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        v247 = v80;
        v248 = 2112;
        v249 = v226;
        _os_log_impl(&dword_2218F0000, v79, OS_LOG_TYPE_ERROR, "%{public}@Failed to create owner user while trying to create home with name %@", buf, 0x16u);

        v33 = 0;
      }

      objc_autoreleasePoolPop(v77);
      objc_msgSend(v8, "responseHandler");
      v81 = (void *)objc_claimAutoreleasedReturnValue();

      v82 = v32;
      if (v81)
      {
        objc_msgSend(MEMORY[0x24BDD1540], "hmErrorWithCode:", 2);
        v83 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v8, "responseHandler");
        v84 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
        ((void (**)(_QWORD, void *, _QWORD))v84)[2](v84, v83, 0);

        -[HMDHomeManager setupActivity](v78, "setupActivity");
        v85 = (void *)objc_claimAutoreleasedReturnValue();

        if (v85)
        {
          -[HMDHomeManager setupActivity](v78, "setupActivity");
          obj = (id)objc_claimAutoreleasedReturnValue();
          v252[0] = CFSTR("errorCode");
          objc_msgSend(MEMORY[0x24BDD16E0], "numberWithInteger:", objc_msgSend(v83, "code"));
          v86 = (void *)objc_claimAutoreleasedReturnValue();
          v252[1] = CFSTR("HMDHomeModelUUID");
          v253[0] = v86;
          objc_msgSend(v7, "uuid");
          v230 = v83;
          v87 = (void *)objc_claimAutoreleasedReturnValue();
          HMDailyRotatedUUID();
          v88 = v8;
          v89 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v89, "UUIDString");
          v90 = objc_claimAutoreleasedReturnValue();
          v91 = v29;
          v92 = (void *)v90;
          v93 = CFSTR("no uuid");
          if (v90)
            v93 = (const __CFString *)v90;
          v253[1] = v93;
          v94 = (id)objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v253, v252, 2);

          v29 = v91;
          v82 = v32;

          v8 = v88;
          v83 = v230;

          v33 = 0;
          -[HMDHomeManager setupActivity](v78, "setupActivity");
          v95 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v95, "markWithReason:", CFSTR("HMDHomeManager.processHomeModelAdd.processHomeModelAdd"));

          v96 = v222->_logger;
          if (os_signpost_enabled(v96))
          {
            v97 = v96;
            objc_msgSend(v230, "stringValueSafe");
            v98 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 138412290;
            v247 = v98;
            _os_signpost_emit_with_name_impl(&dword_2218F0000, v97, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "HomeModelAdd", "Error=%{signpost.description:attribute}@ ", buf, 0xCu);

          }
        }

      }
      v99 = v222->_logger;
      if (os_signpost_enabled(v99))
      {
        *(_WORD *)buf = 0;
        _os_signpost_emit_with_name_impl(&dword_2218F0000, v99, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "HomeModelAdd", ", buf, 2u);
      }
      v23 = v226;
    }

LABEL_110:
    goto LABEL_111;
  }
  objc_msgSend(v8, "responseHandler");
  v57 = (void *)objc_claimAutoreleasedReturnValue();

  if (v57)
  {
    objc_msgSend(MEMORY[0x24BDD1540], "hmErrorWithCode:", 20);
    v33 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "responseHandler");
    v58 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
    ((void (**)(_QWORD, void *, _QWORD))v58)[2](v58, v33, 0);

    -[HMDHomeManager setupActivity](self, "setupActivity");
    v59 = (void *)objc_claimAutoreleasedReturnValue();

    if (v59)
    {
      -[HMDHomeManager setupActivity](self, "setupActivity");
      v229 = (void *)objc_claimAutoreleasedReturnValue();
      v254[0] = CFSTR("errorCode");
      objc_msgSend(MEMORY[0x24BDD16E0], "numberWithInteger:", objc_msgSend(v33, "code"));
      v60 = (void *)objc_claimAutoreleasedReturnValue();
      v255[0] = v60;
      v254[1] = CFSTR("domain");
      objc_msgSend(v33, "domain");
      v61 = objc_claimAutoreleasedReturnValue();
      v62 = (void *)v61;
      v63 = &stru_24E79DB48;
      if (v61)
        v63 = (const __CFString *)v61;
      v255[1] = v63;
      v254[2] = CFSTR("HMDHomeModelUUID");
      objc_msgSend(v7, "uuid");
      v64 = v33;
      v65 = (void *)objc_claimAutoreleasedReturnValue();
      HMDailyRotatedUUID();
      v66 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v66, "UUIDString");
      v67 = objc_claimAutoreleasedReturnValue();
      v68 = v8;
      v69 = (void *)v67;
      v70 = CFSTR("no uuid");
      if (v67)
        v70 = (const __CFString *)v67;
      v255[2] = v70;
      v71 = (id)objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v255, v254, 3);

      v8 = v68;
      v33 = v64;

      -[HMDHomeManager setupActivity](self, "setupActivity");
      v72 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v72, "markWithReason:", CFSTR("HMDHomeManager.processHomeModelAdd.processHomeModelAdd"));

      v73 = self->_logger;
      if (os_signpost_enabled(v73))
      {
        v74 = v73;
        objc_msgSend(v64, "stringValueSafe");
        v75 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138412290;
        v247 = v75;
        _os_signpost_emit_with_name_impl(&dword_2218F0000, v74, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "HomeModelAdd", "Error=%{signpost.description:attribute}@ ", buf, 0xCu);

      }
    }
    v76 = self->_logger;
    if (os_signpost_enabled(v76))
    {
      *(_WORD *)buf = 0;
      _os_signpost_emit_with_name_impl(&dword_2218F0000, v76, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "HomeModelAdd", ", buf, 2u);
    }
    v23 = 0;
    goto LABEL_110;
  }
LABEL_111:

}

- (void)_removeHome:(id)a3 withMessage:(id)a4 saveToStore:(BOOL)a5 notifyUsers:(BOOL)a6 shouldRemovePairings:(BOOL)a7
{
  id v11;
  id v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  HMDHomeManager *v20;
  NSObject *v21;
  void *v22;
  BOOL v23;
  void *v24;
  void *v25;
  id v26;
  id v27;
  id v28;
  id v29;
  BOOL v30;
  void *v31;
  _BOOL4 v32;
  _QWORD v33[5];
  id v34;
  id v35;
  id v36;
  id v37;
  BOOL v38;
  BOOL v39;
  uint8_t buf[4];
  void *v41;
  __int16 v42;
  void *v43;
  uint64_t v44;

  v32 = a7;
  v44 = *MEMORY[0x24BDAC8D0];
  v11 = a3;
  v12 = a4;
  objc_msgSend(v11, "uuid");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "owner");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v14, "account");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v15, "senderCorrelationIdentifier");
  v16 = (void *)objc_claimAutoreleasedReturnValue();

  -[HMDHomeManager pendingHomesBeingRemoved](self, "pendingHomesBeingRemoved");
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v17, "addObject:", v13);

  objc_msgSend(v12, "transactionResult");
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  v19 = (void *)MEMORY[0x227676638](objc_msgSend(v18, "markChanged"));
  v20 = self;
  HMFGetOSLogHandle();
  v21 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v31 = v18;
    v30 = a5;
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "name");
    v23 = a6;
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543618;
    v41 = v22;
    v42 = 2112;
    v43 = v24;
    _os_log_impl(&dword_2218F0000, v21, OS_LOG_TYPE_INFO, "%{public}@Removing all accessories for home %@", buf, 0x16u);

    a6 = v23;
    a5 = v30;
    v18 = v31;
  }

  objc_autoreleasePoolPop(v19);
  -[HMDHomeManager workQueue](v20, "workQueue");
  v25 = (void *)objc_claimAutoreleasedReturnValue();
  v33[0] = MEMORY[0x24BDAC760];
  v33[1] = 3221225472;
  v33[2] = __87__HMDHomeManager__removeHome_withMessage_saveToStore_notifyUsers_shouldRemovePairings___block_invoke;
  v33[3] = &unk_24E7963F0;
  v33[4] = v20;
  v34 = v11;
  v38 = a6;
  v35 = v13;
  v36 = v16;
  v39 = a5;
  v37 = v12;
  v26 = v12;
  v27 = v16;
  v28 = v13;
  v29 = v11;
  objc_msgSend(v29, "removeAllHomeContentsAndAccessoryPairings:queue:completionHandler:", v32, v25, v33);

}

- (void)scheduleRemovalForHome:(id)a3 message:(id)a4 options:(id)a5
{
  id v8;
  id v9;
  id v10;
  id v11;
  void *v12;
  uint64_t v13;
  void *v14;
  __CFString *v15;
  __CFString *v16;
  void *v17;
  id v18;
  __CFString *v19;
  id v20;
  id v21;
  void *v22;
  HMDHomeManager *v23;
  NSObject *v24;
  void *v25;
  void *v26;
  _QWORD v27[4];
  id v28;
  __CFString *v29;
  id v30;
  id v31;
  id v32;
  id v33;
  id v34;
  id location[4];

  location[3] = *(id *)MEMORY[0x24BDAC8D0];
  v8 = a3;
  v9 = a4;
  v10 = a5;
  if (v8)
  {
    v11 = v8;
    objc_msgSend(v11, "name");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "name");
    v13 = objc_claimAutoreleasedReturnValue();
    v14 = (void *)v13;
    v15 = CFSTR("kHomeManagerUpdatedKey");
    if (v13)
      v15 = (__CFString *)v13;
    v16 = v15;

    -[HMDHomeManager syncManager](self, "syncManager");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    objc_initWeak(location, self);
    v27[0] = MEMORY[0x24BDAC760];
    v27[1] = 3221225472;
    v27[2] = __57__HMDHomeManager_scheduleRemovalForHome_message_options___block_invoke;
    v27[3] = &unk_24E796440;
    objc_copyWeak(&v34, location);
    v18 = v11;
    v28 = v18;
    v19 = v16;
    v29 = v19;
    v30 = v10;
    v31 = v9;
    v20 = v12;
    v32 = v20;
    v21 = v17;
    v33 = v21;
    objc_msgSend(v21, "pauseAndWaitForCurrentOperationCompletion:", v27);

    objc_destroyWeak(&v34);
    objc_destroyWeak(location);

    goto LABEL_9;
  }
  v22 = (void *)MEMORY[0x227676638]();
  v23 = self;
  HMFGetOSLogHandle();
  v24 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
  {
    HMFGetLogIdentifier();
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    LODWORD(location[0]) = 138543362;
    *(id *)((char *)location + 4) = v25;
    _os_log_impl(&dword_2218F0000, v24, OS_LOG_TYPE_ERROR, "%{public}@Cannot schedule removal of home because the home was not specified", (uint8_t *)location, 0xCu);

  }
  objc_autoreleasePoolPop(v22);
  objc_msgSend(v9, "responseHandler");
  v26 = (void *)objc_claimAutoreleasedReturnValue();

  if (v26)
  {
    objc_msgSend(v9, "responseHandler");
    v18 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD1540], "hmErrorWithCode:", 2);
    v20 = (id)objc_claimAutoreleasedReturnValue();
    (*((void (**)(id, id, _QWORD))v18 + 2))(v18, v20, 0);
LABEL_9:

  }
}

- (void)_handleRemoveHomeOperation:(id)a3 message:(id)a4
{
  id v6;
  id v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  id v14;
  void *v15;
  HMDHomeManager *v16;
  NSObject *v17;
  NSObject *v18;
  void *v19;
  void *v20;
  HMDHomeManager *v21;
  NSObject *v22;
  void *v23;
  void *v24;
  id v25;
  _QWORD v26[5];
  id v27;
  uint8_t buf[4];
  void *v29;
  __int16 v30;
  id v31;
  __int16 v32;
  id v33;
  uint64_t v34;

  v34 = *MEMORY[0x24BDAC8D0];
  v6 = a3;
  v7 = a4;
  objc_msgSend(v6, "administratorHandler");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v6, "isOwnerUser") && objc_msgSend(v8, "shouldRelayMessages"))
  {
    v9 = (void *)MEMORY[0x24BE3F1D0];
    objc_msgSend(v7, "messagePayload");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v11 = (void *)objc_msgSend(v10, "copy");
    v26[0] = MEMORY[0x24BDAC760];
    v26[1] = 3221225472;
    v26[2] = __53__HMDHomeManager__handleRemoveHomeOperation_message___block_invoke;
    v26[3] = &unk_24E799400;
    v26[4] = self;
    v27 = v7;
    objc_msgSend(v9, "messageWithName:messagePayload:responseHandler:", CFSTR("kRemoveAllUsersFromAccessoriesRequestKey"), v11, v26);
    v12 = (void *)objc_claimAutoreleasedReturnValue();

    v25 = 0;
    objc_msgSend(v8, "operationForMessage:error:", v12, &v25);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    v14 = v25;
    v15 = (void *)MEMORY[0x227676638]();
    v16 = self;
    HMFGetOSLogHandle();
    v17 = objc_claimAutoreleasedReturnValue();
    v18 = v17;
    if (v13)
    {
      if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v19 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        v29 = v19;
        v30 = 2112;
        v31 = v6;
        _os_log_impl(&dword_2218F0000, v18, OS_LOG_TYPE_INFO, "%{public}@Adding HMDHomeAdministratorConfigurationOperation to remove home: %@", buf, 0x16u);

      }
      objc_autoreleasePoolPop(v15);
      objc_msgSend(v8, "addOperation:", v13);
    }
    else
    {
      if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v24 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543874;
        v29 = v24;
        v30 = 2112;
        v31 = v6;
        v32 = 2112;
        v33 = v14;
        _os_log_impl(&dword_2218F0000, v18, OS_LOG_TYPE_ERROR, "%{public}@Failed to create operation to remove home: %@ with error: %@", buf, 0x20u);

      }
      objc_autoreleasePoolPop(v15);
    }

  }
  else
  {
    v20 = (void *)MEMORY[0x227676638]();
    v21 = self;
    HMFGetOSLogHandle();
    v22 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v22, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v23 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v29 = v23;
      v30 = 2112;
      v31 = v6;
      _os_log_impl(&dword_2218F0000, v22, OS_LOG_TYPE_INFO, "%{public}@Removing Home locally : %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v20);
    -[HMDHomeManager dmHandleRequestRemoveHome:](v21, "dmHandleRequestRemoveHome:", v7);
  }

}

- (void)_handleRemoveAllUsersFromAccessories:(id)a3
{
  id v4;
  void *v5;
  HMDHomeManager *v6;
  NSObject *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  dispatch_group_t v12;
  void *v13;
  uint64_t v14;
  NSObject *v15;
  NSObject *v16;
  NSObject *v17;
  _QWORD block[4];
  NSObject *v19;
  HMDHomeManager *v20;
  id v21;
  _QWORD v22[4];
  NSObject *v23;
  id v24;
  HMDHomeManager *v25;
  id v26;
  uint8_t buf[4];
  void *v28;
  __int16 v29;
  id v30;
  uint64_t v31;

  v31 = *MEMORY[0x24BDAC8D0];
  v4 = a3;
  v5 = (void *)MEMORY[0x227676638]();
  v6 = self;
  HMFGetOSLogHandle();
  v7 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543618;
    v28 = v8;
    v29 = 2112;
    v30 = v4;
    _os_log_impl(&dword_2218F0000, v7, OS_LOG_TYPE_INFO, "%{public}@Received request to remove pairings from all the accessories: %@", buf, 0x16u);

  }
  objc_autoreleasePoolPop(v5);
  objc_msgSend(v4, "uuidForKey:", CFSTR("kHomeUUID"));
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHomeManager _homeWithUUID:](v6, "_homeWithUUID:", v9);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  if (v10)
  {
    dispatch_get_global_queue(25, 0);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v12 = dispatch_group_create();
    objc_msgSend(v10, "accessories");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    v14 = MEMORY[0x24BDAC760];
    v22[0] = MEMORY[0x24BDAC760];
    v22[1] = 3221225472;
    v22[2] = __55__HMDHomeManager__handleRemoveAllUsersFromAccessories___block_invoke;
    v22[3] = &unk_24E796468;
    v15 = v12;
    v23 = v15;
    v24 = v11;
    v25 = v6;
    v26 = v10;
    v16 = v11;
    objc_msgSend(v13, "hmf_enumerateWithAutoreleasePoolUsingBlock:", v22);

    block[0] = v14;
    block[1] = 3221225472;
    block[2] = __55__HMDHomeManager__handleRemoveAllUsersFromAccessories___block_invoke_749;
    block[3] = &unk_24E79BBD0;
    v19 = v15;
    v20 = v6;
    v21 = v4;
    v17 = v15;
    dispatch_async(v16, block);

  }
  else
  {
    objc_msgSend(MEMORY[0x24BDD1540], "hmErrorWithCode:", 2);
    v16 = objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "respondWithError:", v16);
  }

}

- (BOOL)pendingInviteExistsForSenderOfMessage:(id)a3
{
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t i;
  void *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  -[HMDHomeManager _remoteUserForMessage:](self, "_remoteUserForMessage:", a3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  if (v4)
  {
    v13 = 0u;
    v14 = 0u;
    v11 = 0u;
    v12 = 0u;
    -[HMDHomeManager homes](self, "homes", 0);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    if (v6)
    {
      v7 = *(_QWORD *)v12;
      while (2)
      {
        for (i = 0; i != v6; ++i)
        {
          if (*(_QWORD *)v12 != v7)
            objc_enumerationMutation(v5);
          objc_msgSend(*(id *)(*((_QWORD *)&v11 + 1) + 8 * i), "outgoingInvitationToResendForUser:", v4);
          v9 = (void *)objc_claimAutoreleasedReturnValue();

          if (v9)
          {
            LOBYTE(v6) = 1;
            goto LABEL_12;
          }
        }
        v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
        if (v6)
          continue;
        break;
      }
    }
LABEL_12:

  }
  else
  {
    LOBYTE(v6) = 0;
  }

  return v6;
}

- (void)_handleSharedUserMovedToHH2:(id)a3
{
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _BYTE v14[128];
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  -[HMDHomeManager _remoteUserForMessage:](self, "_remoteUserForMessage:", a3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  if (v4)
  {
    v12 = 0u;
    v13 = 0u;
    v10 = 0u;
    v11 = 0u;
    -[HMDHomeManager homes](self, "homes", 0);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
    if (v6)
    {
      v7 = v6;
      v8 = *(_QWORD *)v11;
      do
      {
        v9 = 0;
        do
        {
          if (*(_QWORD *)v11 != v8)
            objc_enumerationMutation(v5);
          objc_msgSend(*(id *)(*((_QWORD *)&v10 + 1) + 8 * v9++), "resendOutgoingInvitationToUser:", v4);
        }
        while (v7 != v9);
        v7 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
      }
      while (v7);
    }

  }
}

- (id)_remoteUserForMessage:(id)a3
{
  id v4;
  void *v5;
  id v6;
  void *v7;
  void *v8;
  HMDUser *v9;
  void *v10;
  void *v11;
  HMDUser *v12;
  void *v13;
  HMDHomeManager *v14;
  NSObject *v15;
  void *v16;
  int v18;
  void *v19;
  __int16 v20;
  id v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  v4 = a3;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v5 = v4;
  else
    v5 = 0;
  v6 = v5;

  objc_msgSend(v6, "senderContext");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "accountHandle");
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  if (v8)
  {
    v9 = [HMDUser alloc];
    objc_msgSend(v6, "senderContext");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "accountHandle");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v12 = -[HMDUser initWithAccountHandle:home:pairingIdentity:privilege:](v9, "initWithAccountHandle:home:pairingIdentity:privilege:", v11, 0, 0, 2);

  }
  else
  {
    v13 = (void *)MEMORY[0x227676638]();
    v14 = self;
    HMFGetOSLogHandle();
    v15 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      v18 = 138543618;
      v19 = v16;
      v20 = 2112;
      v21 = v6;
      _os_log_impl(&dword_2218F0000, v15, OS_LOG_TYPE_ERROR, "%{public}@Received message that a shared user migrated to HH2, but there's insufficient info about the sender: %@", (uint8_t *)&v18, 0x16u);

    }
    objc_autoreleasePoolPop(v13);
    v12 = 0;
  }

  return v12;
}

- (void)_handleRequestRemoveHome:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  void (**v8)(_QWORD, _QWORD, _QWORD);
  void *v9;
  void *v10;
  HMDHomeManager *v11;
  NSObject *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  _QWORD v17[5];
  id v18;
  id v19;
  id v20;
  uint8_t buf[4];
  void *v22;
  __int16 v23;
  void *v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v4 = a3;
  objc_msgSend(v4, "uuidForKey:", CFSTR("kHomeUUID"));
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHomeManager _homeWithUUID:](self, "_homeWithUUID:", v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  if (v6)
  {
    if (objc_msgSend(v4, "isEntitledForSPIAccess"))
    {
      -[HMDHomeManager _handleRemoveHomeOperation:message:](self, "_handleRemoveHomeOperation:message:", v6, v4);
    }
    else
    {
      v10 = (void *)MEMORY[0x227676638]();
      v11 = self;
      HMFGetOSLogHandle();
      v12 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        v22 = v13;
        v23 = 2112;
        v24 = v6;
        _os_log_impl(&dword_2218F0000, v12, OS_LOG_TYPE_INFO, "%{public}@Presenting delete home confirmation dialog to user for %@", buf, 0x16u);

      }
      objc_autoreleasePoolPop(v10);
      +[HMDUIDialogPresenter sharedUIDialogPresenter](HMDUIDialogPresenter, "sharedUIDialogPresenter");
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v6, "name");
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      -[HMDHomeManager workQueue](v11, "workQueue");
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      v17[0] = MEMORY[0x24BDAC760];
      v17[1] = 3221225472;
      v17[2] = __43__HMDHomeManager__handleRequestRemoveHome___block_invoke;
      v17[3] = &unk_24E797498;
      v17[4] = v11;
      v18 = v5;
      v19 = v6;
      v20 = v4;
      objc_msgSend(v14, "requestUserPermissionForDeletionOfHomeWithName:withContext:queue:completionHandler:", v15, v18, v16, v17);

    }
  }
  else
  {
    objc_msgSend(v4, "responseHandler");
    v7 = (void *)objc_claimAutoreleasedReturnValue();

    if (v7)
    {
      objc_msgSend(v4, "responseHandler");
      v8 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x24BDD1540], "hmErrorWithCode:", 2);
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      ((void (**)(_QWORD, void *, _QWORD))v8)[2](v8, v9, 0);

    }
  }

}

- (void)processHomeModelRemoved:(id)a3 message:(id)a4
{
  id v6;
  id v7;
  void *v8;
  HMDHomeManager *v9;
  NSObject *v10;
  void *v11;
  void *v12;
  uint64_t v13;
  void *v14;
  void *v15;
  _BOOL8 v16;
  void *v17;
  void (**v18)(_QWORD, _QWORD, _QWORD);
  void *v19;
  void *v20;
  void (**v21)(_QWORD, _QWORD, _QWORD);
  int v22;
  void *v23;
  __int16 v24;
  id v25;
  __int16 v26;
  id v27;
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  v6 = a3;
  v7 = a4;
  v8 = (void *)MEMORY[0x227676638]();
  v9 = self;
  HMFGetOSLogHandle();
  v10 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v22 = 138543874;
    v23 = v11;
    v24 = 2112;
    v25 = v6;
    v26 = 2112;
    v27 = v7;
    _os_log_impl(&dword_2218F0000, v10, OS_LOG_TYPE_INFO, "%{public}@Removing home model : %@ due to message: %@", (uint8_t *)&v22, 0x20u);

  }
  objc_autoreleasePoolPop(v8);
  objc_msgSend(v6, "uuid");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  if (v12)
  {
    -[HMDHomeManager _homeWithUUID:](v9, "_homeWithUUID:", v12);
    v13 = objc_claimAutoreleasedReturnValue();
    if (v13)
    {
      v14 = (void *)v13;
      objc_msgSend(v7, "transactionResult");
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      v16 = objc_msgSend(v15, "source") == 1;

      -[HMDHomeManager _removeHome:withMessage:saveToStore:notifyUsers:shouldRemovePairings:](v9, "_removeHome:withMessage:saveToStore:notifyUsers:shouldRemovePairings:", v14, v7, 1, 1, v16);
    }
    else
    {
      objc_msgSend(v7, "responseHandler");
      v19 = (void *)objc_claimAutoreleasedReturnValue();

      if (v19)
      {
        objc_msgSend(MEMORY[0x24BDD1540], "errorWithDomain:code:userInfo:", *MEMORY[0x24BDD5BD8], 2, 0);
        v20 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v7, "responseHandler");
        v21 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
        ((void (**)(_QWORD, void *, _QWORD))v21)[2](v21, v20, 0);

      }
      v14 = 0;
    }
    goto LABEL_11;
  }
  objc_msgSend(v7, "responseHandler");
  v17 = (void *)objc_claimAutoreleasedReturnValue();

  if (v17)
  {
    objc_msgSend(MEMORY[0x24BDD1540], "errorWithDomain:code:userInfo:", *MEMORY[0x24BDD5BD8], 20, 0);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "responseHandler");
    v18 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
    ((void (**)(_QWORD, void *, _QWORD))v18)[2](v18, v14, 0);

LABEL_11:
  }

}

- (void)_handleRequestSetPrimaryHome:(id)a3
{
  void *v4;
  void *v5;
  HMDHomeManagerModel *v6;
  void *v7;
  HMDHomeManagerModel *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void (**v13)(_QWORD, _QWORD, _QWORD);
  void *v14;
  void *v15;
  id v16;

  v16 = a3;
  objc_msgSend(v16, "uuidForKey:", CFSTR("kHomeUUID"));
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  if (v4)
  {
    -[HMDHomeManager _homeWithUUID:](self, "_homeWithUUID:", v4);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    if (v5)
    {
      v6 = [HMDHomeManagerModel alloc];
      -[HMDHomeManager uuid](self, "uuid");
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      v8 = -[HMDBackingStoreModelObject initWithObjectChangeType:uuid:parentUUID:](v6, "initWithObjectChangeType:uuid:parentUUID:", 1, v7, 0);

      objc_msgSend(v4, "UUIDString");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      -[HMDHomeManagerModel setPrimaryHomeUUID:](v8, "setPrimaryHomeUUID:", v9);

      -[HMDHomeManager backingStore](self, "backingStore");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v16, "name");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      +[HMDBackingStoreTransactionOptions defaultXPCOptions](HMDBackingStoreTransactionOptions, "defaultXPCOptions");
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v10, "transaction:options:", v11, v12);
      v13 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();

      objc_msgSend(v13, "add:withMessage:", v8, v16);
      objc_msgSend(v13, "run");
    }
    else
    {
      objc_msgSend(v16, "responseHandler");
      v15 = (void *)objc_claimAutoreleasedReturnValue();

      if (!v15)
      {
        v5 = 0;
        goto LABEL_10;
      }
      objc_msgSend(MEMORY[0x24BDD1540], "hmErrorWithCode:", 2);
      v8 = (HMDHomeManagerModel *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v16, "responseHandler");
      v13 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
      ((void (**)(_QWORD, HMDHomeManagerModel *, _QWORD))v13)[2](v13, v8, 0);
    }

LABEL_9:
LABEL_10:

    goto LABEL_11;
  }
  objc_msgSend(v16, "responseHandler");
  v14 = (void *)objc_claimAutoreleasedReturnValue();

  if (v14)
  {
    objc_msgSend(MEMORY[0x24BDD1540], "hmErrorWithCode:", 20);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v16, "responseHandler");
    v8 = (HMDHomeManagerModel *)objc_claimAutoreleasedReturnValue();
    (*(void (**)(HMDHomeManagerModel *, void *, _QWORD))&v8->super._bsoDataVersionOverride)(v8, v5, 0);
    goto LABEL_9;
  }
LABEL_11:

}

- (void)_changePrimaryHome:(id)a3
{
  id v4;
  void *v5;
  char v6;
  void *v7;
  HMDHomeManager *v8;
  NSObject *v9;
  void *v10;
  void *v11;
  HMDHomeManagerModel *v12;
  void *v13;
  HMDHomeManagerModel *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  int v19;
  void *v20;
  __int16 v21;
  void *v22;
  __int16 v23;
  id v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v4 = a3;
  if (v4)
  {
    -[HMDHomeManager primaryHomeUUID](self, "primaryHomeUUID");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = HMFEqualObjects();

    if ((v6 & 1) == 0)
    {
      v7 = (void *)MEMORY[0x227676638]();
      v8 = self;
      HMFGetOSLogHandle();
      v9 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        -[HMDHomeManager primaryHomeUUID](v8, "primaryHomeUUID");
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        v19 = 138543874;
        v20 = v10;
        v21 = 2112;
        v22 = v11;
        v23 = 2112;
        v24 = v4;
        _os_log_impl(&dword_2218F0000, v9, OS_LOG_TYPE_INFO, "%{public}@Updating the primary home from %@ to %@", (uint8_t *)&v19, 0x20u);

      }
      objc_autoreleasePoolPop(v7);
      v12 = [HMDHomeManagerModel alloc];
      -[HMDHomeManager uuid](v8, "uuid");
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      v14 = -[HMDBackingStoreModelObject initWithObjectChangeType:uuid:parentUUID:](v12, "initWithObjectChangeType:uuid:parentUUID:", 1, v13, 0);

      objc_msgSend(v4, "UUIDString");
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      -[HMDHomeManagerModel setPrimaryHomeUUID:](v14, "setPrimaryHomeUUID:", v15);

      -[HMDHomeManager backingStore](v8, "backingStore");
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      +[HMDBackingStoreTransactionOptions defaultXPCOptions](HMDBackingStoreTransactionOptions, "defaultXPCOptions");
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v16, "transaction:options:", CFSTR("HMD.hm"), v17);
      v18 = (void *)objc_claimAutoreleasedReturnValue();

      objc_msgSend(v18, "add:withMessage:", v14, 0);
      objc_msgSend(v18, "run");

    }
  }

}

- (void)processHomeManagerModelUpdate:(id)a3 message:(id)a4
{
  id v6;
  id v7;
  void *v8;
  id v9;
  void *v10;
  void *v11;
  void *v12;
  char v13;
  void *v14;
  HMDHomeManager *v15;
  NSObject *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  int v22;
  void *v23;
  __int16 v24;
  void *v25;
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  v6 = a3;
  v7 = a4;
  if (objc_msgSend(v6, "propertyWasSet:", CFSTR("primaryHomeUUID")))
  {
    objc_msgSend(v6, "primaryHomeUUID");
    v8 = (void *)objc_claimAutoreleasedReturnValue();

    if (v8)
    {
      v9 = objc_alloc(MEMORY[0x24BDD1880]);
      objc_msgSend(v6, "primaryHomeUUID");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      v11 = (void *)objc_msgSend(v9, "initWithUUIDString:", v10);

      -[HMDHomeManager primaryHomeUUID](self, "primaryHomeUUID");
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      v13 = HMFEqualObjects();

      if ((v13 & 1) == 0)
      {
        v14 = (void *)MEMORY[0x227676638]();
        v15 = self;
        HMFGetOSLogHandle();
        v16 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
        {
          HMFGetLogIdentifier();
          v17 = (void *)objc_claimAutoreleasedReturnValue();
          v22 = 138543618;
          v23 = v17;
          v24 = 2112;
          v25 = v11;
          _os_log_impl(&dword_2218F0000, v16, OS_LOG_TYPE_INFO, "%{public}@Applying primary home UUID: %@", (uint8_t *)&v22, 0x16u);

        }
        objc_autoreleasePoolPop(v14);
        -[HMDHomeManager setPrimaryHomeUUID:](v15, "setPrimaryHomeUUID:", v11);
        v18 = (void *)objc_opt_new();
        -[HMDHomeManager primaryHomeUUID](v15, "primaryHomeUUID");
        v19 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v18, "setObject:forKeyedSubscript:", v19, CFSTR("HMDPrimaryHomeUUIDKey"));

        objc_msgSend(MEMORY[0x24BDD16D0], "defaultCenter");
        v20 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v20, "postNotificationName:object:userInfo:", CFSTR("HMDNotificationPrimaryHomeDidChange"), v15, v18);

      }
    }
  }
  objc_msgSend(v7, "transactionResult");
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v21, "markChanged");
  objc_msgSend(v7, "respondWithSuccess");

}

- (BOOL)_zonesFetched
{
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  BOOL v8;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _BYTE v14[128];
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  -[HMDHomeManager cloudZones](self, "cloudZones", 0);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = (void *)objc_msgSend(v2, "copy");

  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v11;
    while (2)
    {
      for (i = 0; i != v5; ++i)
      {
        if (*(_QWORD *)v11 != v6)
          objc_enumerationMutation(v3);
        if ((objc_msgSend(*(id *)(*((_QWORD *)&v10 + 1) + 8 * i), "isFirstFetch") & 1) != 0)
        {
          v8 = 0;
          goto LABEL_11;
        }
      }
      v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
      if (v5)
        continue;
      break;
    }
  }
  v8 = 1;
LABEL_11:

  return v8;
}

- (BOOL)zoneFetchFailed
{
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t i;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  _BYTE v12[128];
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v8 = 0u;
  v9 = 0u;
  v10 = 0u;
  v11 = 0u;
  -[HMDHomeManager cloudZones](self, "cloudZones", 0);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = (void *)objc_msgSend(v2, "copy");

  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
  if (v4)
  {
    v5 = *(_QWORD *)v9;
    while (2)
    {
      for (i = 0; i != v4; ++i)
      {
        if (*(_QWORD *)v9 != v5)
          objc_enumerationMutation(v3);
        if ((objc_msgSend(*(id *)(*((_QWORD *)&v8 + 1) + 8 * i), "didFetchFailed") & 1) != 0)
        {
          LOBYTE(v4) = 1;
          goto LABEL_11;
        }
      }
      v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
      if (v4)
        continue;
      break;
    }
  }
LABEL_11:

  return v4;
}

- (void)_addCloudZone:(id)a3 ownerName:(id)a4
{
  id v6;
  id v7;
  void *v8;
  HMDCloudZoneInformation *v9;
  void *v10;
  void *v11;
  HMDHomeManager *v12;
  NSObject *v13;
  void *v14;
  void *v15;
  int v16;
  void *v17;
  __int16 v18;
  void *v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  v6 = a3;
  v7 = a4;
  v8 = v7;
  if (v6)
  {
    if (v7)
    {
      -[HMDHomeManager _zoneInformationWithUUID:](self, "_zoneInformationWithUUID:", v6);
      v9 = (HMDCloudZoneInformation *)objc_claimAutoreleasedReturnValue();
      if (!v9)
      {
        v9 = -[HMDCloudZoneInformation initWithOwnerName:uuid:]([HMDCloudZoneInformation alloc], "initWithOwnerName:uuid:", v8, v6);
        -[HMDHomeManager cloudZones](self, "cloudZones");
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v10, "addObject:", v9);

      }
    }
    else
    {
      v11 = (void *)MEMORY[0x227676638]();
      v12 = self;
      HMFGetOSLogHandle();
      v13 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v14 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v6, "UUIDString");
        v15 = (void *)objc_claimAutoreleasedReturnValue();
        v16 = 138543618;
        v17 = v14;
        v18 = 2112;
        v19 = v15;
        _os_log_impl(&dword_2218F0000, v13, OS_LOG_TYPE_ERROR, "%{public}@Cannot add zone because the ownerName was not specified, %@", (uint8_t *)&v16, 0x16u);

      }
      objc_autoreleasePoolPop(v11);
    }
  }

}

- (void)addTransactionAfterPush:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  HMDCloudZoneInformationModel *v7;
  void *v8;
  void *v9;
  HMDCloudZoneInformationModel *v10;
  void *v11;
  id v12;

  if (a3)
  {
    v4 = a3;
    -[HMDHomeManager backingStore](self, "backingStore");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    +[HMDBackingStoreTransactionOptions defaultXPCOptions](HMDBackingStoreTransactionOptions, "defaultXPCOptions");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "transaction:options:", CFSTR("kHomeManagerCloudZoneAddedKey"), v6);
    v12 = (id)objc_claimAutoreleasedReturnValue();

    v7 = [HMDCloudZoneInformationModel alloc];
    objc_msgSend(v4, "uuid");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHomeManager uuid](self, "uuid");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v10 = -[HMDBackingStoreModelObject initWithObjectChangeType:uuid:parentUUID:](v7, "initWithObjectChangeType:uuid:parentUUID:", 1, v8, v9);

    objc_msgSend(v4, "ownerName");
    v11 = (void *)objc_claimAutoreleasedReturnValue();

    -[HMDCloudZoneInformationModel setOwnerName:](v10, "setOwnerName:", v11);
    -[HMDCloudZoneInformationModel setRequiresHomeManagerUpdate:](v10, "setRequiresHomeManagerUpdate:", 1);
    objc_msgSend(v12, "add:withMessage:", v10, 0);
    objc_msgSend(v12, "run");

  }
}

- (void)_removeCloudZone:(id)a3 updateHomeManager:(BOOL)a4
{
  _BOOL8 v4;
  id v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  HMDCloudZoneInformationModel *v11;
  void *v12;
  HMDCloudZoneInformationModel *v13;
  id v14;

  v4 = a4;
  v6 = a3;
  if (v6)
  {
    v14 = v6;
    -[HMDHomeManager _zoneInformationWithUUID:](self, "_zoneInformationWithUUID:", v6);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    if (v7)
    {
      -[HMDHomeManager backingStore](self, "backingStore");
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      +[HMDBackingStoreTransactionOptions defaultXPCOptions](HMDBackingStoreTransactionOptions, "defaultXPCOptions");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v8, "transaction:options:", CFSTR("kHomeManagerCloudZoneRemovedKey"), v9);
      v10 = (void *)objc_claimAutoreleasedReturnValue();

      v11 = [HMDCloudZoneInformationModel alloc];
      -[HMDHomeManager uuid](self, "uuid");
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      v13 = -[HMDBackingStoreModelObject initWithObjectChangeType:uuid:parentUUID:](v11, "initWithObjectChangeType:uuid:parentUUID:", 3, v14, v12);

      -[HMDCloudZoneInformationModel setRequiresHomeManagerUpdate:](v13, "setRequiresHomeManagerUpdate:", v4);
      objc_msgSend(v10, "add:withMessage:", v13, 0);
      objc_msgSend(v10, "run");

    }
    v6 = v14;
  }

}

- (void)processCloudZoneModelAdd:(id)a3 message:(id)a4
{
  id v6;
  id v7;
  void *v8;
  HMDCloudZoneInformation *v9;
  void *v10;
  HMDHomeManager *v11;
  NSObject *v12;
  _BOOL4 v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  HMDCloudZoneInformation *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  HMDHomeManagerModel *v26;
  void *v27;
  HMDHomeManagerModel *v28;
  void *v29;
  void *v30;
  _QWORD v31[4];
  id v32;
  uint8_t buf[4];
  void *v34;
  __int16 v35;
  void *v36;
  uint64_t v37;

  v37 = *MEMORY[0x24BDAC8D0];
  v6 = a3;
  v7 = a4;
  objc_msgSend(v6, "uuid");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHomeManager _zoneInformationWithUUID:](self, "_zoneInformationWithUUID:", v8);
  v9 = (HMDCloudZoneInformation *)objc_claimAutoreleasedReturnValue();

  v10 = (void *)MEMORY[0x227676638]();
  v11 = self;
  HMFGetOSLogHandle();
  v12 = objc_claimAutoreleasedReturnValue();
  v13 = os_log_type_enabled(v12, OS_LOG_TYPE_INFO);
  if (v9)
  {
    if (v13)
    {
      HMFGetLogIdentifier();
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v6, "ownerName");
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v34 = v14;
      v35 = 2112;
      v36 = v15;
      _os_log_impl(&dword_2218F0000, v12, OS_LOG_TYPE_INFO, "%{public}@Processing zone model update %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v10);
    -[HMDCloudZoneInformation updateCloudZoneInformationWithModel:message:](v9, "updateCloudZoneInformationWithModel:message:", v6, v7);
  }
  else
  {
    if (v13)
    {
      HMFGetLogIdentifier();
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v6, "ownerName");
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v34 = v16;
      v35 = 2112;
      v36 = v17;
      _os_log_impl(&dword_2218F0000, v12, OS_LOG_TYPE_INFO, "%{public}@Processing zone model add %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v10);
    v18 = [HMDCloudZoneInformation alloc];
    objc_msgSend(v6, "ownerName");
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "uuid");
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = -[HMDCloudZoneInformation initWithOwnerName:uuid:](v18, "initWithOwnerName:uuid:", v19, v20);

    -[HMDCloudZoneInformation updateCloudZoneInformationWithModel:message:](v9, "updateCloudZoneInformationWithModel:message:", v6, v7);
    -[HMDHomeManager cloudZones](v11, "cloudZones");
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v21, "addObject:", v9);

  }
  objc_msgSend(v7, "transactionResult");
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v22, "markChanged");
  if (objc_msgSend(v6, "requiresHomeManagerUpdate"))
  {
    -[HMDHomeManager backingStore](v11, "backingStore");
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    +[HMDBackingStoreTransactionOptions defaultXPCOptions](HMDBackingStoreTransactionOptions, "defaultXPCOptions");
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v23, "transaction:options:", CFSTR("kHomeManagerUpdatedKey"), v24);
    v25 = (void *)objc_claimAutoreleasedReturnValue();

    v26 = [HMDHomeManagerModel alloc];
    -[HMDHomeManager uuid](v11, "uuid");
    v27 = (void *)objc_claimAutoreleasedReturnValue();
    v28 = -[HMDBackingStoreModelObject initWithObjectChangeType:uuid:parentUUID:](v26, "initWithObjectChangeType:uuid:parentUUID:", 1, v27, 0);

    -[HMDHomeManager cloudZones](v11, "cloudZones");
    v29 = (void *)objc_claimAutoreleasedReturnValue();
    +[HMDCloudZoneInformation cloudZoneInformationWithCloudZones:](HMDCloudZoneInformation, "cloudZoneInformationWithCloudZones:", v29);
    v30 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHomeManagerModel setCloudZoneInformation:](v28, "setCloudZoneInformation:", v30);

    objc_msgSend(v25, "add:withMessage:", v28, 0);
    objc_initWeak((id *)buf, v11);
    v31[0] = MEMORY[0x24BDAC760];
    v31[1] = 3221225472;
    v31[2] = __51__HMDHomeManager_processCloudZoneModelAdd_message___block_invoke;
    v31[3] = &unk_24E799B48;
    objc_copyWeak(&v32, (id *)buf);
    objc_msgSend(v25, "save:", v31);
    objc_destroyWeak(&v32);
    objc_destroyWeak((id *)buf);

  }
  objc_msgSend(v7, "respondWithPayload:", 0);

}

- (void)processCloudZoneModelRemoved:(id)a3 message:(id)a4
{
  id v6;
  id v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  HMDHomeManagerModel *v18;
  void *v19;
  HMDHomeManagerModel *v20;
  void *v21;
  void *v22;
  void *v23;
  void (**v24)(_QWORD, _QWORD, _QWORD);
  uint64_t v25;
  uint64_t v26;
  void (*v27)(uint64_t, void *);
  void *v28;
  id v29;
  id location;

  v6 = a3;
  v7 = a4;
  objc_msgSend(v6, "uuid");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHomeManager _zoneInformationWithUUID:](self, "_zoneInformationWithUUID:", v8);
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  if (v9)
  {
    -[HMDHomeManager cloudZones](self, "cloudZones");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "removeObject:", v9);

    objc_msgSend(v7, "transactionResult");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "markChanged");
    objc_msgSend(v9, "uuid");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHomeManager _homeWithZoneID:](self, "_homeWithZoneID:", v12);
    v13 = (void *)objc_claimAutoreleasedReturnValue();

    if (v13)
    {
      +[HMDBackingStoreTransactionOptions defaultCloudOptions](HMDBackingStoreTransactionOptions, "defaultCloudOptions");
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      -[HMDHomeManager scheduleRemovalForHome:message:options:](self, "scheduleRemovalForHome:message:options:", v13, 0, v14);

    }
    if (objc_msgSend(v6, "requiresHomeManagerUpdate"))
    {
      -[HMDHomeManager backingStore](self, "backingStore");
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      +[HMDBackingStoreTransactionOptions defaultXPCOptions](HMDBackingStoreTransactionOptions, "defaultXPCOptions");
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v15, "transaction:options:", CFSTR("kHomeManagerUpdatedKey"), v16);
      v17 = (void *)objc_claimAutoreleasedReturnValue();

      v18 = [HMDHomeManagerModel alloc];
      -[HMDHomeManager uuid](self, "uuid");
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      v20 = -[HMDBackingStoreModelObject initWithObjectChangeType:uuid:parentUUID:](v18, "initWithObjectChangeType:uuid:parentUUID:", 1, v19, 0);

      -[HMDHomeManager cloudZones](self, "cloudZones");
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      +[HMDCloudZoneInformation cloudZoneInformationWithCloudZones:](HMDCloudZoneInformation, "cloudZoneInformationWithCloudZones:", v21);
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      -[HMDHomeManagerModel setCloudZoneInformation:](v20, "setCloudZoneInformation:", v22);

      objc_msgSend(v17, "add:withMessage:", v20, 0);
      objc_initWeak(&location, self);
      v25 = MEMORY[0x24BDAC760];
      v26 = 3221225472;
      v27 = __55__HMDHomeManager_processCloudZoneModelRemoved_message___block_invoke;
      v28 = &unk_24E799B48;
      objc_copyWeak(&v29, &location);
      objc_msgSend(v17, "save:", &v25);
      objc_destroyWeak(&v29);
      objc_destroyWeak(&location);

    }
    objc_msgSend(v7, "respondWithPayload:", 0, v25, v26, v27, v28);

    goto LABEL_9;
  }
  objc_msgSend(v7, "responseHandler");
  v23 = (void *)objc_claimAutoreleasedReturnValue();

  if (v23)
  {
    objc_msgSend(MEMORY[0x24BDD1540], "hmErrorWithCode:", 2);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "responseHandler");
    v24 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
    ((void (**)(_QWORD, void *, _QWORD))v24)[2](v24, v11, 0);

LABEL_9:
  }

}

- (void)_handleRequestIsUserUsingHomeKit:(id)a3
{
  id v4;
  void *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void (**v9)(_QWORD, _QWORD, _QWORD);
  _QWORD v10[2];
  _QWORD v11[2];
  _QWORD v12[2];
  _QWORD v13[3];

  v13[2] = *MEMORY[0x24BDAC8D0];
  v4 = a3;
  -[HMDHomeManager homes](self, "homes");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend(v5, "count");

  if (v6)
  {
    v12[0] = CFSTR("kHomeKitInUseKey");
    v12[1] = CFSTR("kHomeKitUsingCloudKey");
    v13[0] = MEMORY[0x24BDBD1C8];
    objc_msgSend(MEMORY[0x24BDD16E0], "numberWithBool:", -[HMDHomeManager accountActive](self, "accountActive"));
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v13[1] = v7;
    objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v13, v12, 2);
    v8 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v10[0] = CFSTR("kHomeKitInUseKey");
    v10[1] = CFSTR("kHomeKitUsingCloudKey");
    v11[0] = MEMORY[0x24BDBD1C0];
    v11[1] = MEMORY[0x24BDBD1C0];
    objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v11, v10, 2);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
  }
  objc_msgSend(v4, "responseHandler");
  v9 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();

  ((void (**)(_QWORD, _QWORD, void *))v9)[2](v9, 0, v8);
}

- (void)_updateHome:(id)a3 configurationVersion:(int64_t)a4
{
  id v6;
  NSObject *v7;
  id v8;
  _QWORD block[5];
  id v10;
  int64_t v11;

  v6 = a3;
  -[HMDHomeManager workQueue](self, "workQueue");
  v7 = objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x24BDAC760];
  block[1] = 3221225472;
  block[2] = __51__HMDHomeManager__updateHome_configurationVersion___block_invoke;
  block[3] = &unk_24E796490;
  block[4] = self;
  v10 = v6;
  v11 = a4;
  v8 = v6;
  dispatch_async(v7, block);

}

- (void)_removeConfigurationVersionForHome:(id)a3
{
  id v4;
  NSObject *v5;
  id v6;
  _QWORD v7[5];
  id v8;

  v4 = a3;
  -[HMDHomeManager workQueue](self, "workQueue");
  v5 = objc_claimAutoreleasedReturnValue();
  v7[0] = MEMORY[0x24BDAC760];
  v7[1] = 3221225472;
  v7[2] = __53__HMDHomeManager__removeConfigurationVersionForHome___block_invoke;
  v7[3] = &unk_24E79C268;
  v7[4] = self;
  v8 = v4;
  v6 = v4;
  dispatch_async(v5, v7);

}

- (BOOL)_capabilitiesAreSupported:(id)a3
{
  id v4;
  void *v5;
  HMDHomeManager *v6;
  NSObject *v7;
  void *v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t i;
  void *v14;
  void *v15;
  void *v16;
  char v17;
  void *v18;
  id v19;
  uint64_t v20;
  id v21;
  void *v22;
  id v23;
  void *v24;
  void *v25;
  HMDHomeManager *v26;
  NSObject *v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t j;
  void *v33;
  BOOL v34;
  void *v35;
  HMDHomeManager *v36;
  NSObject *v37;
  void *v38;
  void *v40;
  HMDHomeManager *v41;
  NSObject *v42;
  void *v43;
  uint64_t v44;
  HMDHomeManager *v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  uint8_t v54[128];
  uint8_t buf[4];
  void *v56;
  __int16 v57;
  id v58;
  __int16 v59;
  id v60;
  _BYTE v61[128];
  uint64_t v62;

  v62 = *MEMORY[0x24BDAC8D0];
  v4 = a3;
  v5 = (void *)MEMORY[0x227676638]();
  v6 = self;
  HMFGetOSLogHandle();
  v7 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
  {
    HMFGetLogIdentifier();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543618;
    v56 = v8;
    v57 = 2114;
    v58 = v4;
    _os_log_impl(&dword_2218F0000, v7, OS_LOG_TYPE_DEBUG, "%{public}@Checking for capabilities %{public}@", buf, 0x16u);

  }
  objc_autoreleasePoolPop(v5);
  v52 = 0u;
  v53 = 0u;
  v50 = 0u;
  v51 = 0u;
  v9 = v4;
  v10 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v50, v61, 16);
  if (v10)
  {
    v11 = v10;
    v12 = *(_QWORD *)v51;
    v44 = *(_QWORD *)v51;
    v45 = v6;
    while (2)
    {
      for (i = 0; i != v11; ++i)
      {
        if (*(_QWORD *)v51 != v12)
          objc_enumerationMutation(v9);
        v14 = *(void **)(*((_QWORD *)&v50 + 1) + 8 * i);
        if (objc_msgSend(v14, "isEqualToString:", CFSTR("kDeviceClassTypeKey"), v44, v45))
        {
          objc_msgSend(v9, "hmf_stringForKey:", CFSTR("kDeviceClassTypeKey"));
          v15 = (void *)objc_claimAutoreleasedReturnValue();
          getDeviceClass();
          v16 = (void *)objc_claimAutoreleasedReturnValue();
          v17 = objc_msgSend(v15, "isEqualToString:", v16);

          if ((v17 & 1) == 0)
            goto LABEL_38;
        }
        else if (objc_msgSend(v14, "isEqualToString:", CFSTR("kHomedVersionKey")))
        {
          objc_msgSend(v9, "hmf_numberForKey:", CFSTR("kHomedVersionKey"));
          v18 = (void *)objc_claimAutoreleasedReturnValue();
          v19 = (id)homedVersion;
          v20 = objc_msgSend(v18, "compare:", v19);

          if (v20 == 1)
            goto LABEL_38;
        }
        else
        {
          if (objc_msgSend(v14, "isEqualToString:", CFSTR("kHomeUUID")))
          {
            objc_msgSend(v9, "hmf_UUIDForKey:", CFSTR("kHomeUUID"));
            v21 = (id)objc_claimAutoreleasedReturnValue();
            -[HMDHomeManager currentHomeConfigurations](v6, "currentHomeConfigurations");
            v22 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v22, "objectForKeyedSubscript:", v21);
            v23 = (id)objc_claimAutoreleasedReturnValue();

            if (!v21 || !v23)
            {
              v40 = (void *)MEMORY[0x227676638]();
              v41 = v6;
              HMFGetOSLogHandle();
              v42 = objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v42, OS_LOG_TYPE_INFO))
              {
                HMFGetLogIdentifier();
                v43 = (void *)objc_claimAutoreleasedReturnValue();
                *(_DWORD *)buf = 138543874;
                v56 = v43;
                v57 = 2114;
                v58 = v21;
                v59 = 2114;
                v60 = v23;
                _os_log_impl(&dword_2218F0000, v42, OS_LOG_TYPE_INFO, "%{public}@Home UUID %{public}@ or Configuration Version %{public}@ is nil", buf, 0x20u);

              }
              objc_autoreleasePoolPop(v40);
LABEL_37:

LABEL_38:
              v34 = 0;
              goto LABEL_40;
            }
          }
          else
          {
            if (!objc_msgSend(v14, "isEqualToString:", CFSTR("kHomedSupportedFeaturesKey")))
              goto LABEL_38;
            objc_msgSend(v9, "hmf_arrayForKey:", CFSTR("kHomedSupportedFeaturesKey"));
            v24 = (void *)objc_claimAutoreleasedReturnValue();
            v23 = (id)homedSupportedFeatures;
            v25 = (void *)MEMORY[0x227676638]();
            v26 = v6;
            HMFGetOSLogHandle();
            v27 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v27, OS_LOG_TYPE_DEBUG))
            {
              HMFGetLogIdentifier();
              v28 = (void *)objc_claimAutoreleasedReturnValue();
              *(_DWORD *)buf = 138543874;
              v56 = v28;
              v57 = 2114;
              v58 = v24;
              v59 = 2114;
              v60 = v23;
              _os_log_impl(&dword_2218F0000, v27, OS_LOG_TYPE_DEBUG, "%{public}@Checking for required features: %{public}@, ours: %{public}@", buf, 0x20u);

            }
            objc_autoreleasePoolPop(v25);
            v48 = 0u;
            v49 = 0u;
            v46 = 0u;
            v47 = 0u;
            v21 = v24;
            v29 = objc_msgSend(v21, "countByEnumeratingWithState:objects:count:", &v46, v54, 16);
            if (v29)
            {
              v30 = v29;
              v31 = *(_QWORD *)v47;
              while (2)
              {
                for (j = 0; j != v30; ++j)
                {
                  if (*(_QWORD *)v47 != v31)
                    objc_enumerationMutation(v21);
                  v33 = *(void **)(*((_QWORD *)&v46 + 1) + 8 * j);
                  if ((objc_msgSend(v23, "containsObject:", v33) & 1) == 0)
                  {
                    v35 = (void *)MEMORY[0x227676638]();
                    v36 = v26;
                    HMFGetOSLogHandle();
                    v37 = objc_claimAutoreleasedReturnValue();
                    if (os_log_type_enabled(v37, OS_LOG_TYPE_INFO))
                    {
                      HMFGetLogIdentifier();
                      v38 = (void *)objc_claimAutoreleasedReturnValue();
                      *(_DWORD *)buf = 138543618;
                      v56 = v38;
                      v57 = 2114;
                      v58 = v33;
                      _os_log_impl(&dword_2218F0000, v37, OS_LOG_TYPE_INFO, "%{public}@### Feature: %{public}@ not supported", buf, 0x16u);

                    }
                    objc_autoreleasePoolPop(v35);

                    goto LABEL_37;
                  }
                }
                v30 = objc_msgSend(v21, "countByEnumeratingWithState:objects:count:", &v46, v54, 16);
                if (v30)
                  continue;
                break;
              }
            }

            v12 = v44;
            v6 = v45;
          }

        }
      }
      v11 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v50, v61, 16);
      v34 = 1;
      if (v11)
        continue;
      break;
    }
  }
  else
  {
    v34 = 1;
  }
LABEL_40:

  return v34;
}

- (id)_prepareAnswerForRequestedCapabilities:(id)a3
{
  id v4;
  id v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  id v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  HMDHomeManager *v17;
  NSObject *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  id v24;
  void *v25;
  int v27;
  void *v28;
  __int16 v29;
  void *v30;
  __int16 v31;
  void *v32;
  uint64_t v33;

  v33 = *MEMORY[0x24BDAC8D0];
  v4 = a3;
  v5 = objc_alloc_init(MEMORY[0x24BDBCED8]);
  +[HMDHAPMetadata getSharedInstance](HMDHAPMetadata, "getSharedInstance");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "objectForKeyedSubscript:", CFSTR("kDeviceClassTypeKey"));
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  if (v7)
  {
    getDeviceClass();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "setObject:forKeyedSubscript:", v8, CFSTR("kDeviceClassTypeKey"));

  }
  objc_msgSend(v4, "objectForKeyedSubscript:", CFSTR("kHomedVersionKey"));
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  if (v9)
  {
    v10 = (id)homedVersion;
    objc_msgSend(v5, "setObject:forKeyedSubscript:", v10, CFSTR("kHomedVersionKey"));

  }
  objc_msgSend(v4, "objectForKeyedSubscript:", CFSTR("kHomeConfigurationVersionKey"));
  v11 = (void *)objc_claimAutoreleasedReturnValue();

  if (v11)
  {
    objc_msgSend(v4, "hmf_UUIDForKey:", CFSTR("kHomeUUID"));
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHomeManager currentHomeConfigurations](self, "currentHomeConfigurations");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "objectForKeyedSubscript:", v12);
    v14 = (void *)objc_claimAutoreleasedReturnValue();

    if (v12 && v14)
    {
      objc_msgSend(v12, "UUIDString");
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v5, "setObject:forKeyedSubscript:", v15, CFSTR("kHomeUUID"));

      objc_msgSend(v5, "setObject:forKeyedSubscript:", v14, CFSTR("kHomeConfigurationVersionKey"));
    }
    else
    {
      v16 = (void *)MEMORY[0x227676638]();
      v17 = self;
      HMFGetOSLogHandle();
      v18 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v19 = (void *)objc_claimAutoreleasedReturnValue();
        v27 = 138543874;
        v28 = v19;
        v29 = 2114;
        v30 = v12;
        v31 = 2114;
        v32 = v14;
        _os_log_impl(&dword_2218F0000, v18, OS_LOG_TYPE_INFO, "%{public}@Home UUID %{public}@ or Configuration Version %{public}@ is nil", (uint8_t *)&v27, 0x20u);

      }
      objc_autoreleasePoolPop(v16);
    }

  }
  if (v6)
  {
    objc_msgSend(v6, "version");
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "setObject:forKeyedSubscript:", v20, CFSTR("kMetadataInfoVersionKey"));

    objc_msgSend(v6, "schemaVersion");
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "setObject:forKeyedSubscript:", v21, CFSTR("kMetadataInfoSchemaVersionKey"));

    objc_msgSend(MEMORY[0x24BDD16E0], "numberWithInt:", objc_msgSend(v6, "incomplete") ^ 1);
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "setObject:forKeyedSubscript:", v22, CFSTR("kMetadataInfoCompletenessKey"));

  }
  objc_msgSend(v4, "objectForKeyedSubscript:", CFSTR("kHomedSupportedFeaturesKey"));
  v23 = (void *)objc_claimAutoreleasedReturnValue();

  if (v23)
  {
    v24 = (id)homedSupportedFeatures;
    objc_msgSend(v5, "setObject:forKeyedSubscript:", v24, CFSTR("kHomedSupportedFeaturesKey"));

  }
  v25 = (void *)objc_msgSend(v5, "copy");

  return v25;
}

- (id)_scrubRequestedCapabilities:(id)a3 fromMessage:(id)a4
{
  id v6;
  id v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  HMDHomeManager *v14;
  NSObject *v15;
  void *v16;
  void *v17;
  int v19;
  void *v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  v6 = a3;
  v7 = a4;
  v8 = (void *)objc_msgSend(v6, "mutableCopy");
  objc_msgSend(v6, "objectForKeyedSubscript:", CFSTR("kHomeConfigurationVersionKey"));
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  if (v9)
  {
    objc_msgSend(v6, "hmf_UUIDForKey:", CFSTR("kHomeUUID"));
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHomeManager _homeWithUUID:](self, "_homeWithUUID:", v10);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    if (v11)
    {
      objc_msgSend(v7, "userForHome:", v11);
      v12 = (void *)objc_claimAutoreleasedReturnValue();

      if (!v12)
      {
        v13 = (void *)MEMORY[0x227676638]();
        v14 = self;
        HMFGetOSLogHandle();
        v15 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
        {
          HMFGetLogIdentifier();
          v16 = (void *)objc_claimAutoreleasedReturnValue();
          v19 = 138543362;
          v20 = v16;
          _os_log_impl(&dword_2218F0000, v15, OS_LOG_TYPE_INFO, "%{public}@Purging home info request for capabilities from user that is not a part of the home", (uint8_t *)&v19, 0xCu);

        }
        objc_autoreleasePoolPop(v13);
        objc_msgSend(v8, "removeObjectForKey:", CFSTR("kHomeUUID"));
        objc_msgSend(v8, "removeObjectForKey:", CFSTR("kHomeConfigurationVersionKey"));
      }
    }

  }
  v17 = (void *)objc_msgSend(v8, "copy");

  return v17;
}

- (void)_handleElectDeviceForIDSSession:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  HMDHomeManager *v10;
  NSObject *v11;
  void *v12;
  const char *v13;
  NSObject *v14;
  os_log_type_t v15;
  void *v16;
  id v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  HMDHomeManager *v22;
  NSObject *v23;
  void *v24;
  void *v25;
  void *v26;
  HMDHomeManager *v27;
  NSObject *v28;
  void *v29;
  void *v30;
  _QWORD v31[4];
  id v32;
  uint8_t buf[4];
  void *v34;
  __int16 v35;
  void *v36;
  __int16 v37;
  void *v38;
  uint64_t v39;

  v39 = *MEMORY[0x24BDAC8D0];
  v4 = a3;
  objc_msgSend(v4, "messagePayload");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "hmf_dictionaryForKey:", CFSTR("kRequiredCapabilitiesKey"));
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v4, "messagePayload");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "hmf_dictionaryForKey:", CFSTR("kRequestedCapabilitiesKey"));
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  if (isWatch())
  {
    v9 = (void *)MEMORY[0x227676638]();
    v10 = self;
    HMFGetOSLogHandle();
    v11 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
    {
      HMFGetLogIdentifier();
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v34 = v12;
      v13 = "%{public}@### Watch is current device so ignoring IDS Elect";
      v14 = v11;
      v15 = OS_LOG_TYPE_DEBUG;
LABEL_11:
      _os_log_impl(&dword_2218F0000, v14, v15, v13, buf, 0xCu);

      goto LABEL_12;
    }
    goto LABEL_12;
  }
  if (!-[HMDHomeManager _capabilitiesAreSupported:](self, "_capabilitiesAreSupported:", v6))
  {
    v9 = (void *)MEMORY[0x227676638]();
    v10 = self;
    HMFGetOSLogHandle();
    v11 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v34 = v12;
      v13 = "%{public}@### All capabilities are not met so ignoring IDS Elect";
      v14 = v11;
      v15 = OS_LOG_TYPE_INFO;
      goto LABEL_11;
    }
LABEL_12:

    objc_autoreleasePoolPop(v9);
    goto LABEL_17;
  }
  -[HMDHomeManager homes](self, "homes");
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  v31[0] = MEMORY[0x24BDAC760];
  v31[1] = 3221225472;
  v31[2] = __50__HMDHomeManager__handleElectDeviceForIDSSession___block_invoke;
  v31[3] = &unk_24E7961C8;
  v17 = v4;
  v32 = v17;
  objc_msgSend(v16, "hmf_objectPassingTest:", v31);
  v18 = (void *)objc_claimAutoreleasedReturnValue();

  if (v18)
  {
    -[HMDHomeManager _scrubRequestedCapabilities:fromMessage:](self, "_scrubRequestedCapabilities:fromMessage:", v8, v17);
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHomeManager _prepareAnswerForRequestedCapabilities:](self, "_prepareAnswerForRequestedCapabilities:", v19);
    v20 = (void *)objc_claimAutoreleasedReturnValue();

    v21 = (void *)MEMORY[0x227676638]();
    v22 = self;
    HMFGetOSLogHandle();
    v23 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v23, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v24 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v17, "shortDescription");
      v30 = v21;
      v25 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543874;
      v34 = v24;
      v35 = 2114;
      v36 = v25;
      v37 = 2112;
      v38 = v20;
      _os_log_impl(&dword_2218F0000, v23, OS_LOG_TYPE_INFO, "%{public}@Answering %{public}@ request with response: %@", buf, 0x20u);

      v21 = v30;
    }

    objc_autoreleasePoolPop(v21);
    objc_msgSend(v17, "respondWithPayload:", v20);
  }
  else
  {
    v26 = (void *)MEMORY[0x227676638]();
    v27 = self;
    HMFGetOSLogHandle();
    v28 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v29 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v34 = v29;
      _os_log_impl(&dword_2218F0000, v28, OS_LOG_TYPE_ERROR, "%{public}@### Message user not allowed to perform this request", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v26);
    v20 = 0;
  }

LABEL_17:
}

- (void)handleVendorInfoUpdated:(id)a3
{
  id v4;
  NSObject *v5;
  id v6;
  _QWORD v7[4];
  id v8;
  HMDHomeManager *v9;

  v4 = a3;
  -[HMDHomeManager workQueue](self, "workQueue");
  v5 = objc_claimAutoreleasedReturnValue();
  v7[0] = MEMORY[0x24BDAC760];
  v7[1] = 3221225472;
  v7[2] = __42__HMDHomeManager_handleVendorInfoUpdated___block_invoke;
  v7[3] = &unk_24E79C268;
  v8 = v4;
  v9 = self;
  v6 = v4;
  dispatch_async(v5, v7);

}

- (id)currentAccessory
{
  void *v2;
  void *v3;
  id v4;

  -[HMDHomeManager _accessoryOfCurrentDevice](self, "_accessoryOfCurrentDevice");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v3 = v2;
  else
    v3 = 0;
  v4 = v3;

  return v4;
}

- (id)eventRouterServerDiagnosticInfo
{
  void *v2;
  void *v3;
  void *v4;

  -[HMDHomeManager currentAccessory](self, "currentAccessory");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "home");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "eventRouterServerDiagnosticInfo");
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  return v4;
}

- (void)_monitorReachability
{
  void *v3;
  void *v4;
  HMDHomeManager *v5;
  NSObject *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  int v11;
  void *v12;
  void *v13;
  void *v14;
  uint64_t v15;
  __CFString *v16;
  void *v17;
  HMDHomeManager *v18;
  NSObject *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  int v24;
  void *v25;
  __int16 v26;
  __CFString *v27;
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  -[HMDHomeManager reachabilityMonitor](self, "reachabilityMonitor");
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v3)
  {
    v4 = (void *)MEMORY[0x227676638]();
    v5 = self;
    HMFGetOSLogHandle();
    v6 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      v24 = 138543362;
      v25 = v7;
      _os_log_impl(&dword_2218F0000, v6, OS_LOG_TYPE_INFO, "%{public}@Creating network reachability monitor", (uint8_t *)&v24, 0xCu);

    }
    objc_autoreleasePoolPop(v4);
    v8 = (void *)objc_msgSend(objc_alloc(MEMORY[0x24BE3F1F0]), "initWithNetAddress:", 0);
    -[HMDHomeManager setReachabilityMonitor:](v5, "setReachabilityMonitor:", v8);

    -[HMDHomeManager reachabilityMonitor](v5, "reachabilityMonitor");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "setDelegate:", v5);

    -[HMDHomeManager reachabilityMonitor](v5, "reachabilityMonitor");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v11 = objc_msgSend(v10, "isReachable");

    if (v11)
      -[HMDHomeManager _reachabilityMonitorChanged:](v5, "_reachabilityMonitorChanged:", 1);
  }
  -[HMDHomeManager cloudReachabilityMonitor](self, "cloudReachabilityMonitor");
  v12 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v12)
  {
    objc_msgSend(MEMORY[0x24BE3F248], "sharedPreferences");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "preferenceForKey:", CFSTR("cloudReachabilityMonitorHostname"));
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v14, "stringValue");
    v15 = objc_claimAutoreleasedReturnValue();

    if (v15)
      v16 = (__CFString *)v15;
    else
      v16 = CFSTR("gateway.icloud.com");
    v17 = (void *)MEMORY[0x227676638]();
    v18 = self;
    HMFGetOSLogHandle();
    v19 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      v24 = 138543618;
      v25 = v20;
      v26 = 2112;
      v27 = v16;
      _os_log_impl(&dword_2218F0000, v19, OS_LOG_TYPE_INFO, "%{public}@Creating cloud network reachability monitor for host: %@", (uint8_t *)&v24, 0x16u);

    }
    objc_autoreleasePoolPop(v17);
    v21 = (void *)objc_msgSend(objc_alloc(MEMORY[0x24BE3F1E0]), "initWithHostname:", v16);
    v22 = (void *)objc_msgSend(objc_alloc(MEMORY[0x24BE3F1F0]), "initWithNetAddress:", v21);
    -[HMDHomeManager setCloudReachabilityMonitor:](v18, "setCloudReachabilityMonitor:", v22);

    -[HMDHomeManager cloudReachabilityMonitor](v18, "cloudReachabilityMonitor");
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v23, "setDelegate:", v18);

  }
}

- (void)_reachabilityMonitorChanged:(BOOL)a3
{
  _BOOL8 v3;
  void *v5;
  HMDHomeManager *v6;
  NSObject *v7;
  void *v8;
  void *v9;
  int v10;
  void *v11;
  __int16 v12;
  void *v13;
  uint64_t v14;

  v3 = a3;
  v14 = *MEMORY[0x24BDAC8D0];
  v5 = (void *)MEMORY[0x227676638](self, a2);
  v6 = self;
  HMFGetOSLogHandle();
  v7 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    HMFBooleanToString();
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v10 = 138543618;
    v11 = v8;
    v12 = 2112;
    v13 = v9;
    _os_log_impl(&dword_2218F0000, v7, OS_LOG_TYPE_INFO, "%{public}@Received network reachability change from system configuration, notifying homes, reachable: %@", (uint8_t *)&v10, 0x16u);

  }
  objc_autoreleasePoolPop(v5);
  if (v3 && !-[HMDHomeManager ignoreFirstTimeReachabilityChanged](v6, "ignoreFirstTimeReachabilityChanged"))
    -[HMDHomeManager _electRemoteGatewayForHomesAfterReachabilityChanges](v6, "_electRemoteGatewayForHomesAfterReachabilityChanges");
  -[HMDHomeManager _updateHomesAboutNetworkConnectivity:](v6, "_updateHomesAboutNetworkConnectivity:", v3);
  -[HMDHomeManager setIgnoreFirstTimeReachabilityChanged:](v6, "setIgnoreFirstTimeReachabilityChanged:", 0);
}

- (void)networkMonitorIsReachable:(id)a3
{
  id v4;
  NSObject *v5;
  id v6;
  _QWORD v7[5];
  id v8;

  v4 = a3;
  -[HMDHomeManager workQueue](self, "workQueue");
  v5 = objc_claimAutoreleasedReturnValue();
  v7[0] = MEMORY[0x24BDAC760];
  v7[1] = 3221225472;
  v7[2] = __44__HMDHomeManager_networkMonitorIsReachable___block_invoke;
  v7[3] = &unk_24E79C268;
  v7[4] = self;
  v8 = v4;
  v6 = v4;
  dispatch_async(v5, v7);

}

- (void)networkMonitorIsUnreachable:(id)a3
{
  id v4;
  NSObject *v5;
  id v6;
  _QWORD v7[5];
  id v8;

  v4 = a3;
  -[HMDHomeManager workQueue](self, "workQueue");
  v5 = objc_claimAutoreleasedReturnValue();
  v7[0] = MEMORY[0x24BDAC760];
  v7[1] = 3221225472;
  v7[2] = __46__HMDHomeManager_networkMonitorIsUnreachable___block_invoke;
  v7[3] = &unk_24E79C268;
  v7[4] = self;
  v8 = v4;
  v6 = v4;
  dispatch_async(v5, v7);

}

- (void)_startAccessoryFinderTimer
{
  NSObject *v3;
  dispatch_source_t v4;
  NSObject *v5;
  dispatch_time_t v6;
  NSObject *v7;
  NSObject *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t);
  void *v13;
  id v14;
  id location;

  -[HMDHomeManager workQueue](self, "workQueue");
  v3 = objc_claimAutoreleasedReturnValue();
  v4 = dispatch_source_create(MEMORY[0x24BDACA18], 0, 0, v3);
  -[HMDHomeManager setAccessoryFinderTimer:](self, "setAccessoryFinderTimer:", v4);

  -[HMDHomeManager accessoryFinderTimer](self, "accessoryFinderTimer");
  v5 = objc_claimAutoreleasedReturnValue();
  v6 = dispatch_time(0, 10000000000);
  dispatch_source_set_timer(v5, v6, 0xFFFFFFFFFFFFFFFFLL, 0x2FAF080uLL);

  objc_initWeak(&location, self);
  -[HMDHomeManager accessoryFinderTimer](self, "accessoryFinderTimer");
  v7 = objc_claimAutoreleasedReturnValue();
  v10 = MEMORY[0x24BDAC760];
  v11 = 3221225472;
  v12 = __44__HMDHomeManager__startAccessoryFinderTimer__block_invoke;
  v13 = &unk_24E797318;
  objc_copyWeak(&v14, &location);
  dispatch_source_set_event_handler(v7, &v10);

  -[HMDHomeManager accessoryFinderTimer](self, "accessoryFinderTimer", v10, v11, v12, v13);
  v8 = objc_claimAutoreleasedReturnValue();
  dispatch_resume(v8);

  -[HMDHomeManager accessoryBrowserInternal](self, "accessoryBrowserInternal");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "setManagerDelegate:", self);

  objc_destroyWeak(&v14);
  objc_destroyWeak(&location);
}

- (void)_startAccessoryFinderTimerExpired
{
  void *v3;
  NSObject *v4;
  void *v5;
  void *v6;
  void *v7;
  int v8;
  void *v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  v3 = (void *)MEMORY[0x227676638](self, a2);
  HMFGetOSLogHandle();
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    HMFGetLogIdentifier();
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = 138543362;
    v9 = v5;
    _os_log_impl(&dword_2218F0000, v4, OS_LOG_TYPE_DEFAULT, "%{public}@Timer expired, and stopping request to discover accessories", (uint8_t *)&v8, 0xCu);

  }
  objc_autoreleasePoolPop(v3);
  -[HMDHomeManager _processAnyPendingRequestsForRemoteAccess:](self, "_processAnyPendingRequestsForRemoteAccess:", 1);
  -[HMDHomeManager accessoryBrowserInternal](self, "accessoryBrowserInternal");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "stopDiscoveringAccessories");

  -[HMDHomeManager accessoryBrowserInternal](self, "accessoryBrowserInternal");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "setManagerDelegate:", 0);

}

- (void)_cancelAccessoryFinderTimer
{
  void *v3;
  void *v4;
  NSObject *v5;
  void *v6;
  NSObject *v7;
  void *v8;
  void *v9;
  int v10;
  void *v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  -[HMDHomeManager accessoryFinderTimer](self, "accessoryFinderTimer");
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  if (v3)
  {
    v4 = (void *)MEMORY[0x227676638]();
    HMFGetOSLogHandle();
    v5 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      HMFGetLogIdentifier();
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      v10 = 138543362;
      v11 = v6;
      _os_log_impl(&dword_2218F0000, v5, OS_LOG_TYPE_DEFAULT, "%{public}@Cancelling accessory finder timer", (uint8_t *)&v10, 0xCu);

    }
    objc_autoreleasePoolPop(v4);
    -[HMDHomeManager accessoryFinderTimer](self, "accessoryFinderTimer");
    v7 = objc_claimAutoreleasedReturnValue();
    dispatch_source_cancel(v7);

    -[HMDHomeManager setAccessoryFinderTimer:](self, "setAccessoryFinderTimer:", 0);
    -[HMDHomeManager accessoryBrowserInternal](self, "accessoryBrowserInternal");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "stopDiscoveringAccessories");

    -[HMDHomeManager accessoryBrowserInternal](self, "accessoryBrowserInternal");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "setManagerDelegate:", 0);

  }
}

- (void)processAnyPendingRequestsForRemoteAccess
{
  NSObject *v3;
  _QWORD block[5];

  -[HMDHomeManager workQueue](self, "workQueue");
  v3 = objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x24BDAC760];
  block[1] = 3221225472;
  block[2] = __58__HMDHomeManager_processAnyPendingRequestsForRemoteAccess__block_invoke;
  block[3] = &unk_24E79C240;
  block[4] = self;
  dispatch_async(v3, block);

}

- (void)_processAnyPendingRequestsForRemoteAccess:(BOOL)a3
{
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t i;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  uint64_t j;
  void *v15;
  void *v16;
  char v17;
  void *v18;
  void *v19;
  char v20;
  id v21;
  void (**v22)(_QWORD, _QWORD, _QWORD);
  _BOOL8 v23;
  void *v24;
  NSObject *v25;
  void *v26;
  void *v27;
  void *v28;
  id v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  NSObject *v35;
  void *v36;
  void (**v37)(_QWORD, _QWORD, _QWORD);
  void *v38;
  NSObject *v39;
  void *v40;
  void *v41;
  void *v42;
  void *v43;
  void *v44;
  uint64_t v45;
  void *v46;
  NSObject *v47;
  void *v48;
  uint64_t v49;
  HMDHomeManager *v50;
  void *v51;
  id obj;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  uint8_t buf[4];
  void *v66;
  __int16 v67;
  id v68;
  __int16 v69;
  void *v70;
  _QWORD v71[3];
  _QWORD v72[3];
  _BYTE v73[128];
  _BYTE v74[128];
  uint64_t v75;

  v75 = *MEMORY[0x24BDAC8D0];
  objc_msgSend(MEMORY[0x24BDBCEF0], "set");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v61 = 0u;
  v62 = 0u;
  v63 = 0u;
  v64 = 0u;
  -[HMDHomeManager homes](self, "homes");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v61, v74, 16);
  if (v6)
  {
    v7 = v6;
    v8 = *(_QWORD *)v62;
    do
    {
      for (i = 0; i != v7; ++i)
      {
        if (*(_QWORD *)v62 != v8)
          objc_enumerationMutation(v5);
        objc_msgSend(*(id *)(*((_QWORD *)&v61 + 1) + 8 * i), "hapAccessoryServerIdentifiers");
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v4, "unionSet:", v10);

      }
      v7 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v61, v74, 16);
    }
    while (v7);
  }

  v11 = (void *)objc_msgSend(v4, "mutableCopy");
  -[HMDHomeManager accessoryBrowserInternal](self, "accessoryBrowserInternal");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v12, "discoveredAccessoryServers");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "unionSet:", v13);

  objc_msgSend(MEMORY[0x24BDBCEB8], "array");
  v54 = (void *)objc_claimAutoreleasedReturnValue();
  v57 = 0u;
  v58 = 0u;
  v59 = 0u;
  v60 = 0u;
  -[HMDHomeManager pendingResponsesForAccessoryFinder](self, "pendingResponsesForAccessoryFinder");
  obj = (id)objc_claimAutoreleasedReturnValue();
  v51 = v11;
  v56 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v57, v73, 16);
  if (v56)
  {
    v55 = *(_QWORD *)v58;
    v49 = *MEMORY[0x24BDD5BD8];
    v50 = self;
    do
    {
      for (j = 0; j != v56; ++j)
      {
        if (*(_QWORD *)v58 != v55)
          objc_enumerationMutation(obj);
        v15 = *(void **)(*((_QWORD *)&v57 + 1) + 8 * j);
        objc_msgSend(v15, "name");
        v16 = (void *)objc_claimAutoreleasedReturnValue();
        v17 = objc_msgSend(v16, "isEqualToString:", CFSTR("kDoYouSeeUnpairedAccessoriesKey"));

        v18 = v11;
        if ((v17 & 1) != 0
          || (objc_msgSend(v15, "name"),
              v19 = (void *)objc_claimAutoreleasedReturnValue(),
              v20 = objc_msgSend(v19, "isEqualToString:", CFSTR("kAreYouAtHomeRequestKey")),
              v19,
              v18 = v4,
              (v20 & 1) != 0))
        {
          v21 = v18;
          objc_msgSend(v15, "arrayForKey:", CFSTR("kAccessoryIdentitiesKey"));
          v22 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
          v23 = -[HMDHomeManager _findAnyAccessoryWithIdentities:inAccessoryServers:](self, "_findAnyAccessoryWithIdentities:inAccessoryServers:", v22, v21);
          if (v23 || a3)
          {
            v27 = v4;
            v71[0] = CFSTR("kAtHomeStateKey");
            objc_msgSend(MEMORY[0x24BDD16E0], "numberWithBool:", v23);
            v28 = (void *)objc_claimAutoreleasedReturnValue();
            v72[0] = v28;
            v71[1] = CFSTR("kHomedVersionKey");
            v29 = (id)homedVersion;
            v72[1] = v29;
            v71[2] = CFSTR("kDeviceNameKey");
            objc_msgSend(MEMORY[0x24BE3F288], "systemInfo");
            v30 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v30, "name");
            v31 = (void *)objc_claimAutoreleasedReturnValue();

            v72[2] = v31;
            objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v72, v71, 3);
            v32 = (void *)objc_claimAutoreleasedReturnValue();

            objc_msgSend(v15, "stringForKey:", CFSTR("kHomeUUID"));
            v33 = (void *)objc_claimAutoreleasedReturnValue();
            v34 = (void *)MEMORY[0x227676638]();
            HMFGetOSLogHandle();
            v35 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT))
            {
              HMFGetLogIdentifier();
              v36 = (void *)objc_claimAutoreleasedReturnValue();
              *(_DWORD *)buf = 138543874;
              v66 = v36;
              v67 = 2112;
              v68 = v32;
              v69 = 2112;
              v70 = v33;
              _os_log_impl(&dword_2218F0000, v35, OS_LOG_TYPE_DEFAULT, "%{public}@Sending response %@ for home %@", buf, 0x20u);

            }
            objc_autoreleasePoolPop(v34);
            objc_msgSend(v15, "responseHandler");
            v37 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
            ((void (**)(_QWORD, _QWORD, void *))v37)[2](v37, 0, v32);

            objc_msgSend(v54, "addObject:", v15);
            v4 = v27;
            self = v50;
            v11 = v51;
          }
          else
          {
            v24 = (void *)MEMORY[0x227676638]();
            HMFGetOSLogHandle();
            v25 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
            {
              HMFGetLogIdentifier();
              v26 = (void *)objc_claimAutoreleasedReturnValue();
              *(_DWORD *)buf = 138543618;
              v66 = v26;
              v67 = 2112;
              v68 = v21;
              _os_log_impl(&dword_2218F0000, v25, OS_LOG_TYPE_DEFAULT, "%{public}@Did not find any of the accessories in the list %@ but there is a timer pending, continuing to scan", buf, 0x16u);

            }
            objc_autoreleasePoolPop(v24);
          }
          goto LABEL_27;
        }
        v38 = (void *)MEMORY[0x227676638](objc_msgSend(v54, "addObject:", v15));
        HMFGetOSLogHandle();
        v39 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v39, OS_LOG_TYPE_DEFAULT))
        {
          HMFGetLogIdentifier();
          v40 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v15, "name");
          v41 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543618;
          v66 = v40;
          v67 = 2112;
          v68 = v41;
          _os_log_impl(&dword_2218F0000, v39, OS_LOG_TYPE_DEFAULT, "%{public}@There is an invalid message in the pending responses for accessory finder %@", buf, 0x16u);

        }
        objc_autoreleasePoolPop(v38);
        objc_msgSend(v15, "responseHandler");
        v42 = (void *)objc_claimAutoreleasedReturnValue();

        if (v42)
        {
          objc_msgSend(MEMORY[0x24BDD1540], "errorWithDomain:code:userInfo:", v49, 3, 0);
          v21 = (id)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v15, "responseHandler");
          v22 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
          ((void (**)(_QWORD, id, _QWORD))v22)[2](v22, v21, 0);
LABEL_27:

          continue;
        }
      }
      v56 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v57, v73, 16);
    }
    while (v56);
  }

  -[HMDHomeManager pendingResponsesForAccessoryFinder](self, "pendingResponsesForAccessoryFinder");
  v43 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v43, "removeObjectsInArray:", v54);

  -[HMDHomeManager pendingResponsesForAccessoryFinder](self, "pendingResponsesForAccessoryFinder");
  v44 = (void *)objc_claimAutoreleasedReturnValue();
  v45 = objc_msgSend(v44, "count");

  if (!v45)
  {
    v46 = (void *)MEMORY[0x227676638]();
    HMFGetOSLogHandle();
    v47 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v47, OS_LOG_TYPE_DEFAULT))
    {
      HMFGetLogIdentifier();
      v48 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v66 = v48;
      _os_log_impl(&dword_2218F0000, v47, OS_LOG_TYPE_DEFAULT, "%{public}@Processed all requests for accessory scan for remote access, stopping scan timer", buf, 0xCu);

      v11 = v51;
    }

    objc_autoreleasePoolPop(v46);
    -[HMDHomeManager _cancelAccessoryFinderTimer](self, "_cancelAccessoryFinderTimer");
  }

}

- (void)_startScanningForAccessories:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  NSObject *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  NSObject *v14;
  void *v15;
  void *v16;
  int v17;
  void *v18;
  __int16 v19;
  void *v20;
  __int16 v21;
  void *v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  v4 = a3;
  objc_msgSend(v4, "stringForKey:", CFSTR("kHomeUUID"));
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = (void *)MEMORY[0x227676638]();
  HMFGetOSLogHandle();
  v7 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    HMFGetLogIdentifier();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "name");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v17 = 138543874;
    v18 = v8;
    v19 = 2112;
    v20 = v5;
    v21 = 2112;
    v22 = v9;
    _os_log_impl(&dword_2218F0000, v7, OS_LOG_TYPE_DEFAULT, "%{public}@Received request to determine if we are at home %@ for message %@", (uint8_t *)&v17, 0x20u);

  }
  objc_autoreleasePoolPop(v6);
  -[HMDHomeManager accessoryFinderTimer](self, "accessoryFinderTimer");
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v10)
  {
    -[HMDHomeManager _startAccessoryFinderTimer](self, "_startAccessoryFinderTimer");
    -[HMDHomeManager accessoryBrowserInternal](self, "accessoryBrowserInternal");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "stopDiscoveringAccessories");

    -[HMDHomeManager accessoryBrowserInternal](self, "accessoryBrowserInternal");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "startDiscoveringAccessories");

    v13 = (void *)MEMORY[0x227676638]();
    HMFGetOSLogHandle();
    v14 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      HMFGetLogIdentifier();
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      v17 = 138543362;
      v18 = v15;
      _os_log_impl(&dword_2218F0000, v14, OS_LOG_TYPE_DEFAULT, "%{public}@Starting timer to discover all accessories", (uint8_t *)&v17, 0xCu);

    }
    objc_autoreleasePoolPop(v13);
  }
  -[HMDHomeManager pendingResponsesForAccessoryFinder](self, "pendingResponsesForAccessoryFinder");
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v16, "addObject:", v4);

}

- (BOOL)_findAnyAccessoryWithIdentities:(id)a3 inAccessoryServers:(id)a4
{
  id v5;
  id v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t i;
  void *v11;
  char v12;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  _BYTE v18[128];
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v5 = a3;
  v6 = a4;
  if (objc_msgSend(v5, "count") && objc_msgSend(v6, "count"))
  {
    v16 = 0u;
    v17 = 0u;
    v14 = 0u;
    v15 = 0u;
    v7 = v5;
    v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
    if (v8)
    {
      v9 = *(_QWORD *)v15;
      while (2)
      {
        for (i = 0; i != v8; ++i)
        {
          if (*(_QWORD *)v15 != v9)
            objc_enumerationMutation(v7);
          objc_msgSend(MEMORY[0x24BE1B998], "serverIdentifierWithUniqueIdentifier:", *(_QWORD *)(*((_QWORD *)&v14 + 1) + 8 * i), (_QWORD)v14);
          v11 = (void *)objc_claimAutoreleasedReturnValue();
          v12 = objc_msgSend(v6, "containsObject:", v11);

          if ((v12 & 1) != 0)
          {
            LOBYTE(v8) = 1;
            goto LABEL_14;
          }
        }
        v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
        if (v8)
          continue;
        break;
      }
    }
LABEL_14:

  }
  else
  {
    LOBYTE(v8) = 0;
  }

  return v8;
}

- (void)_handleDoYouSeeUnpairedAccessories:(id)a3
{
  void *v3;
  id v4;
  id v5;

  v3 = (void *)MEMORY[0x24BDD1540];
  v4 = a3;
  objc_msgSend(v3, "hmErrorWithCode:", 48);
  v5 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "respondWithError:", v5);

}

- (void)_handleAddRemoteAccessRequest:(id)a3
{
  void *v3;
  id v4;
  id v5;

  v3 = (void *)MEMORY[0x24BDD1540];
  v4 = a3;
  objc_msgSend(v3, "hmErrorWithCode:", 48);
  v5 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "respondWithError:", v5);

}

- (void)_handleAccessHomeInvite:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  HMDHomeManager *v11;
  NSObject *v12;
  void *v13;
  void *v14;
  HMDHomeManager *v15;
  NSObject *v16;
  void *v17;
  void *v18;
  HMDHomeManager *v19;
  NSObject *v20;
  void *v21;
  void *v22;
  _QWORD v23[5];
  id v24;
  id v25;
  uint8_t buf[4];
  void *v27;
  __int16 v28;
  uint64_t v29;
  __int16 v30;
  void *v31;
  uint64_t v32;

  v32 = *MEMORY[0x24BDAC8D0];
  v4 = a3;
  objc_msgSend(v4, "remoteSourceID");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  if (v5)
  {
    objc_msgSend(v4, "remoteSourceDevice");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "account");
    v7 = (void *)objc_claimAutoreleasedReturnValue();

    if (v7)
    {
      objc_msgSend(v4, "messagePayload");
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v8, "hmf_stringForKey:", CFSTR("kHomeName"));
      v9 = (void *)objc_claimAutoreleasedReturnValue();

      if (v9)
      {
        v23[0] = MEMORY[0x24BDAC760];
        v23[1] = 3221225472;
        v23[2] = __42__HMDHomeManager__handleAccessHomeInvite___block_invoke;
        v23[3] = &unk_24E7964E0;
        v23[4] = self;
        v24 = v7;
        v25 = v9;
        objc_msgSend(v24, "isOfKnownPersonWithCompletion:", v23);

      }
      else
      {
        v18 = (void *)MEMORY[0x227676638]();
        v19 = self;
        HMFGetOSLogHandle();
        v20 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
        {
          HMFGetLogIdentifier();
          v21 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v7, "name");
          v22 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543874;
          v27 = v21;
          v28 = 2160;
          v29 = 1752392040;
          v30 = 2112;
          v31 = v22;
          _os_log_impl(&dword_2218F0000, v20, OS_LOG_TYPE_ERROR, "%{public}@Dropping incompatible HH1 invitation from %{mask.hash}@ due to missing home name", buf, 0x20u);

        }
        objc_autoreleasePoolPop(v18);
      }

    }
    else
    {
      v14 = (void *)MEMORY[0x227676638]();
      v15 = self;
      HMFGetOSLogHandle();
      v16 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543362;
        v27 = v17;
        _os_log_impl(&dword_2218F0000, v16, OS_LOG_TYPE_ERROR, "%{public}@Dropping incompatible HH1 invitation due account resolve failure", buf, 0xCu);

      }
      objc_autoreleasePoolPop(v14);
    }

  }
  else
  {
    v10 = (void *)MEMORY[0x227676638]();
    v11 = self;
    HMFGetOSLogHandle();
    v12 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v27 = v13;
      _os_log_impl(&dword_2218F0000, v12, OS_LOG_TYPE_ERROR, "%{public}@Dropping incompatible HH1 invitation due missing fromID", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v10);
  }

}

- (BOOL)shouldAcceptInvitationPayload:(id)a3 error:(id *)a4
{
  id v6;
  void *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  HMDHomeManager *v12;
  NSObject *v13;
  void *v14;
  uint64_t v15;
  void *v16;
  HMDHomeManager *v17;
  NSObject *v18;
  void *v19;
  BOOL v20;
  void *v21;
  char v22;
  void *v23;
  unint64_t v24;
  unint64_t v25;
  void *v26;
  HMDHomeManager *v27;
  NSObject *v28;
  void *v29;
  void *v30;
  HMDHomeManager *v31;
  NSObject *v32;
  void *v33;
  int v35;
  void *v36;
  __int16 v37;
  void *v38;
  __int16 v39;
  void *v40;
  uint64_t v41;

  v41 = *MEMORY[0x24BDAC8D0];
  v6 = a3;
  objc_msgSend(v6, "hmf_stringForKey:", CFSTR("kHomeName"));
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "hmf_UUIDForKey:", CFSTR("kHomeUUID"));
  v8 = objc_claimAutoreleasedReturnValue();
  v9 = (void *)v8;
  if (v7 && v8)
  {
    -[HMDHomeManager _homeWithUUID:](self, "_homeWithUUID:", v8);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    if (v10)
    {
      v11 = (void *)MEMORY[0x227676638]();
      v12 = self;
      HMFGetOSLogHandle();
      v13 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v14 = (void *)objc_claimAutoreleasedReturnValue();
        v35 = 138543618;
        v36 = v14;
        v37 = 2112;
        v38 = v9;
        _os_log_impl(&dword_2218F0000, v13, OS_LOG_TYPE_ERROR, "%{public}@Cannot accept invitation payload because home already exists for homeUUID: %@", (uint8_t *)&v35, 0x16u);

      }
      objc_autoreleasePoolPop(v11);
      if (a4)
      {
        v15 = 1;
LABEL_24:
        objc_msgSend(MEMORY[0x24BDD1540], "errorWithDomain:code:userInfo:", *MEMORY[0x24BDD5BD8], v15, 0);
        v20 = 0;
        *a4 = (id)objc_claimAutoreleasedReturnValue();
        goto LABEL_26;
      }
    }
    else
    {
      +[HMDDeviceCapabilities deviceCapabilities](HMDDeviceCapabilities, "deviceCapabilities");
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      v22 = objc_msgSend(v21, "supportsHomeInvitation");

      if ((v22 & 1) != 0)
      {
        -[HMDHomeManager homes](self, "homes");
        v23 = (void *)objc_claimAutoreleasedReturnValue();
        v24 = objc_msgSend(v23, "count");
        v25 = maximumHomes;

        if (v24 < v25)
        {
          v20 = 1;
LABEL_26:

          goto LABEL_27;
        }
        v30 = (void *)MEMORY[0x227676638]();
        v31 = self;
        HMFGetOSLogHandle();
        v32 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
        {
          HMFGetLogIdentifier();
          v33 = (void *)objc_claimAutoreleasedReturnValue();
          v35 = 138543362;
          v36 = v33;
          _os_log_impl(&dword_2218F0000, v32, OS_LOG_TYPE_ERROR, "%{public}@Cannot accept invitation payload because invitee has already maximum allowed homes", (uint8_t *)&v35, 0xCu);

        }
        objc_autoreleasePoolPop(v30);
        if (a4)
        {
          v15 = 49;
          goto LABEL_24;
        }
      }
      else
      {
        v26 = (void *)MEMORY[0x227676638]();
        v27 = self;
        HMFGetOSLogHandle();
        v28 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
        {
          HMFGetLogIdentifier();
          v29 = (void *)objc_claimAutoreleasedReturnValue();
          v35 = 138543362;
          v36 = v29;
          _os_log_impl(&dword_2218F0000, v28, OS_LOG_TYPE_ERROR, "%{public}@Cannot accept invitation payload because device does not support invitations", (uint8_t *)&v35, 0xCu);

        }
        objc_autoreleasePoolPop(v26);
        if (a4)
        {
          v15 = 10;
          goto LABEL_24;
        }
      }
    }
    v20 = 0;
    goto LABEL_26;
  }
  v16 = (void *)MEMORY[0x227676638]();
  v17 = self;
  HMFGetOSLogHandle();
  v18 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
  {
    HMFGetLogIdentifier();
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    v35 = 138543874;
    v36 = v19;
    v37 = 2112;
    v38 = v7;
    v39 = 2112;
    v40 = v9;
    _os_log_impl(&dword_2218F0000, v18, OS_LOG_TYPE_ERROR, "%{public}@Cannot accept invitation payload because homeName: %@ or homeUUID: %@ is missing", (uint8_t *)&v35, 0x20u);

  }
  objc_autoreleasePoolPop(v16);
  if (a4)
  {
    objc_msgSend(MEMORY[0x24BDD1540], "errorWithDomain:code:userInfo:", *MEMORY[0x24BDD5BD8], 20, 0);
    v20 = 0;
    *a4 = (id)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v20 = 0;
  }
LABEL_27:

  return v20;
}

- (BOOL)shouldAcceptInvitationWithHomeName:(id)a3
{
  return objc_msgSend(a3, "hm_containsAnyTextCheckingTypeInTypes:", 2080) ^ 1;
}

- (void)_handleAccessHomeInviteFromAccount:(id)a3 mergeID:(id)a4 idsInvitationIdentifier:(id)a5 payload:(id)a6 messageResponseHandler:(id)a7
{
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  uint64_t v17;
  void *v18;
  void *v19;
  BOOL v20;
  id v21;
  id v22;
  void *v23;
  void *v24;
  HMDHomeManager *v25;
  NSObject *v26;
  void *v27;
  _QWORD aBlock[5];
  id v29;
  id v30;
  id v31;
  id v32;
  id v33;
  id v34;
  uint8_t buf[4];
  void *v36;
  __int16 v37;
  uint64_t v38;
  uint64_t v39;

  v39 = *MEMORY[0x24BDAC8D0];
  v12 = a3;
  v13 = a4;
  v14 = a5;
  v15 = a6;
  v16 = a7;
  v17 = objc_msgSend(v13, "length");
  if (v12 && v17)
  {
    +[HMDHomeInviteLogEvent updateWithState:isFMFDevice:](HMDHomeInviteLogEvent, "updateWithState:isFMFDevice:", 1, isThisDeviceDesignatedFMFDevice());
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    if (v18)
    {
      -[HMDHomeManager logEventSubmitter](self, "logEventSubmitter");
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v19, "submitLogEvent:", v18);

    }
    v34 = 0;
    v20 = -[HMDHomeManager shouldAcceptInvitationPayload:error:](self, "shouldAcceptInvitationPayload:error:", v15, &v34);
    v21 = v34;
    if (v20)
    {
      aBlock[0] = MEMORY[0x24BDAC760];
      aBlock[1] = 3221225472;
      aBlock[2] = __116__HMDHomeManager__handleAccessHomeInviteFromAccount_mergeID_idsInvitationIdentifier_payload_messageResponseHandler___block_invoke;
      aBlock[3] = &unk_24E796530;
      aBlock[4] = self;
      v29 = v15;
      v33 = v16;
      v22 = v12;
      v30 = v22;
      v31 = v13;
      v32 = v14;
      v23 = _Block_copy(aBlock);
      objc_msgSend(v22, "isOfKnownPersonWithCompletion:", v23);

    }
    else if (v16)
    {
      (*((void (**)(id, id, _QWORD))v16 + 2))(v16, v21, 0);
    }

  }
  else
  {
    v24 = (void *)MEMORY[0x227676638](v17);
    v25 = self;
    HMFGetOSLogHandle();
    v26 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v27 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v36 = v27;
      v37 = 2048;
      v38 = objc_msgSend(v13, "length");
      _os_log_impl(&dword_2218F0000, v26, OS_LOG_TYPE_ERROR, "%{public}@Cannot accept invitation because of invalid mergeID: %lu or nil account", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v24);
    objc_msgSend(MEMORY[0x24BDD1540], "errorWithDomain:code:userInfo:", *MEMORY[0x24BDD5BD8], 20, 0);
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    if (v16)
      (*((void (**)(id, void *, _QWORD))v16 + 2))(v16, v18, 0);
  }

}

- (void)dismissBulletinOnAllMyTransientDevicesWithContext:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  HMDRemoteAccountMessageDestination *v9;
  void *v10;
  HMDRemoteAccountMessageDestination *v11;
  void *v12;
  void *v13;
  void *v14;
  HMDHomeManager *v15;
  NSObject *v16;
  void *v17;
  int v18;
  void *v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  v4 = a3;
  -[HMDHomeManager appleAccountManager](self, "appleAccountManager");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "account");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "handles");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "firstObject");
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  if (v8)
  {
    v9 = [HMDRemoteAccountMessageDestination alloc];
    -[HMDHomeManager uuid](self, "uuid");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v11 = -[HMDRemoteAccountMessageDestination initWithTarget:handle:multicast:](v9, "initWithTarget:handle:multicast:", v10, v8, 1);

    objc_msgSend(MEMORY[0x24BE3F1B0], "internalMessageWithName:destination:messagePayload:", CFSTR("kDismissBulletinInternalRequestKey"), v11, v4);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHomeManager messageDispatcher](self, "messageDispatcher");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "sendMessage:", v12);

  }
  else
  {
    v14 = (void *)MEMORY[0x227676638]();
    v15 = self;
    HMFGetOSLogHandle();
    v16 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
    {
      HMFGetLogIdentifier();
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      v18 = 138543362;
      v19 = v17;
      _os_log_impl(&dword_2218F0000, v16, OS_LOG_TYPE_DEFAULT, "%{public}@Cannot find own account handle to send message to dismiss bulletin on all devices", (uint8_t *)&v18, 0xCu);

    }
    objc_autoreleasePoolPop(v14);
  }

}

- (void)_handleDismissBulletinRequest:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  NSObject *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  void *v13;
  void *v14;
  void *v15;
  id v16;
  void *v17;
  void *v18;
  void *v19;
  int v20;
  void *v21;
  void *v22;
  NSObject *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  NSObject *v31;
  void *v32;
  void *v33;
  void *v34;
  uint8_t buf[4];
  void *v36;
  __int16 v37;
  void *v38;
  uint64_t v39;

  v39 = *MEMORY[0x24BDAC8D0];
  v4 = a3;
  objc_msgSend(v4, "stringForKey:", CFSTR("kBulletinRecordIDKey"));
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  if (v5)
  {
    v6 = (void *)MEMORY[0x227676638]();
    HMFGetOSLogHandle();
    v7 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      HMFGetLogIdentifier();
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v36 = v8;
      v37 = 2112;
      v38 = v5;
      _os_log_impl(&dword_2218F0000, v7, OS_LOG_TYPE_DEFAULT, "%{public}@Received message from peer device to dismiss bulletin with record ID %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v6);
    +[HMDBulletinBoard sharedBulletinBoard](HMDBulletinBoard, "sharedBulletinBoard");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "removeBulletinWithRecordID:", v5);

    objc_msgSend(v4, "numberForKey:", CFSTR("kInvitationStateKey"));
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v11 = v10;
    if (!v10)
      goto LABEL_19;
    v12 = objc_msgSend(v10, "unsignedIntegerValue");
    v13 = (void *)objc_msgSend(objc_alloc(MEMORY[0x24BDD1880]), "initWithUUIDString:", v5);
    -[HMDHomeManager incomingInvitations](self, "incomingInvitations");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v14, "hmf_firstObjectWithValue:forKeyPath:", v13, CFSTR("identifier"));
    v15 = (void *)objc_claimAutoreleasedReturnValue();

    if (v15)
    {
      if ((unint64_t)(v12 - 6) < 2 || v12 == 4)
      {
        -[HMDHomeManager _postIncomingInvitationStateChangedNotification:newInvitationState:](self, "_postIncomingInvitationStateChangedNotification:newInvitationState:", v15, v12);
        -[HMDHomeManager _removeIncomingInvitation:](self, "_removeIncomingInvitation:", v15);
LABEL_18:
        -[HMDHomeManager _updateIncomingInvitesPresent](self, "_updateIncomingInvitesPresent");

LABEL_19:
        goto LABEL_20;
      }
      if (v12 == 3)
      {
        v16 = objc_alloc(MEMORY[0x24BDD1880]);
        objc_msgSend(v4, "stringForKey:", CFSTR("kHomeUUID"));
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        v18 = (void *)objc_msgSend(v16, "initWithUUIDString:", v17);

        -[HMDHomeManager _postIncomingInvitationStateChangedNotification:newInvitationState:](self, "_postIncomingInvitationStateChangedNotification:newInvitationState:", v15, 5);
        -[HMDHomeManager uuidsOfRemovedHomes](self, "uuidsOfRemovedHomes");
        v19 = (void *)objc_claimAutoreleasedReturnValue();
        v20 = objc_msgSend(v19, "containsObject:", v18);

        if (v20)
        {
          -[HMDHomeManager uuidsOfRemovedHomes](self, "uuidsOfRemovedHomes");
          v21 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v21, "removeObject:", v18);

          v22 = (void *)MEMORY[0x227676638]();
          HMFGetOSLogHandle();
          v23 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v23, OS_LOG_TYPE_INFO))
          {
            HMFGetLogIdentifier();
            v24 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v18, "UUIDString");
            v33 = v22;
            v25 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 138543618;
            v36 = v24;
            v37 = 2112;
            v38 = v25;
            _os_log_impl(&dword_2218F0000, v23, OS_LOG_TYPE_INFO, "%{public}@Removing home with UUID %@ from uuids of guest homes removed locally since invite was accepted", buf, 0x16u);

            v22 = v33;
          }

          objc_autoreleasePoolPop(v22);
        }
        -[HMDHomeManager _homeWithUUID:](self, "_homeWithUUID:", v18);
        v26 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v26, "owner");
        v27 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v27, "account");
        v28 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v28, "senderCorrelationIdentifier");
        v34 = v18;
        v29 = (void *)objc_claimAutoreleasedReturnValue();

        -[HMDHomeManager _stopTrackingRemovedHomeUserMergeId:](self, "_stopTrackingRemovedHomeUserMergeId:", v29);
        goto LABEL_18;
      }
    }
    v30 = (void *)MEMORY[0x227676638]();
    HMFGetOSLogHandle();
    v31 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT))
    {
      HMFGetLogIdentifier();
      v32 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v36 = v32;
      v37 = 2112;
      v38 = v5;
      _os_log_impl(&dword_2218F0000, v31, OS_LOG_TYPE_DEFAULT, "%{public}@Dismiss bulletin request received with no matching invitation: %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v30);
    goto LABEL_18;
  }
LABEL_20:

}

- (void)dismissDialogOnAllMyTransientDevicesWithContext:(id)a3 selection:(BOOL)a4
{
  _BOOL8 v4;
  id v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  HMDRemoteAccountMessageDestination *v11;
  void *v12;
  HMDRemoteAccountMessageDestination *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  HMDHomeManager *v20;
  NSObject *v21;
  void *v22;
  uint64_t v23;
  _QWORD v24[2];
  uint8_t buf[4];
  void *v26;
  uint64_t v27;

  v4 = a4;
  v27 = *MEMORY[0x24BDAC8D0];
  v6 = a3;
  -[HMDHomeManager appleAccountManager](self, "appleAccountManager");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "account");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "handles");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "firstObject");
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  if (v10)
  {
    v11 = [HMDRemoteAccountMessageDestination alloc];
    -[HMDHomeManager uuid](self, "uuid");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    v13 = -[HMDRemoteAccountMessageDestination initWithTarget:handle:multicast:](v11, "initWithTarget:handle:multicast:", v12, v10, 1);

    v14 = (void *)MEMORY[0x24BE3F1B0];
    objc_msgSend(MEMORY[0x24BDD16E0], "numberWithBool:", v4, CFSTR("kDialogContextKey"), CFSTR("kDialogSelectionKey"), v6);
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    v24[1] = v15;
    objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v24, &v23, 2);
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v14, "internalMessageWithName:destination:messagePayload:", CFSTR("kDismissDialogInternalRequestKey"), v13, v16);
    v17 = (void *)objc_claimAutoreleasedReturnValue();

    -[HMDHomeManager messageDispatcher](self, "messageDispatcher");
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v18, "sendMessage:", v17);

  }
  else
  {
    v19 = (void *)MEMORY[0x227676638]();
    v20 = self;
    HMFGetOSLogHandle();
    v21 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
    {
      HMFGetLogIdentifier();
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v26 = v22;
      _os_log_impl(&dword_2218F0000, v21, OS_LOG_TYPE_DEFAULT, "%{public}@Cannot find own account handle to send message to dismiss dialog on all devices", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v19);
  }

}

- (void)_handleDismissDialogRequest:(id)a3
{
  id v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  NSObject *v9;
  void *v10;
  const char *v11;
  void *v12;
  void *v13;
  _QWORD v14[4];
  id v15;
  char v16;
  uint8_t buf[4];
  void *v18;
  __int16 v19;
  void *v20;
  __int16 v21;
  const char *v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  v4 = a3;
  objc_msgSend(v4, "stringForKey:", CFSTR("kDialogContextKey"));
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v16 = 0;
  v6 = objc_msgSend(v4, "BOOLForKey:keyPresent:", CFSTR("kDialogSelectionKey"), &v16);
  if (v5 && v16)
  {
    v7 = v6;
    v8 = (void *)MEMORY[0x227676638]();
    HMFGetOSLogHandle();
    v9 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      HMFGetLogIdentifier();
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      v11 = "canceled";
      *(_DWORD *)buf = 138543874;
      v18 = v10;
      if ((_DWORD)v7)
        v11 = "accepted";
      v19 = 2112;
      v20 = v5;
      v21 = 2080;
      v22 = v11;
      _os_log_impl(&dword_2218F0000, v9, OS_LOG_TYPE_DEFAULT, "%{public}@Received message from peer device to dismiss dialog with context %@, selection: %s", buf, 0x20u);

    }
    objc_autoreleasePoolPop(v8);
    +[HMDUIDialogPresenter sharedUIDialogPresenter](HMDUIDialogPresenter, "sharedUIDialogPresenter");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHomeManager workQueue](self, "workQueue");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    v14[0] = MEMORY[0x24BDAC760];
    v14[1] = 3221225472;
    v14[2] = __46__HMDHomeManager__handleDismissDialogRequest___block_invoke;
    v14[3] = &unk_24E79C240;
    v15 = v5;
    objc_msgSend(v12, "dismissPendingDialogDueToPeerDeviceSelection:context:queue:completionHandler:", v7, v15, v13, v14);

  }
}

- (id)_trackIncomingInvitationFromAccount:(id)a3 mergeID:(id)a4 idsInvitationIdentifier:(id)a5 payload:(id)a6 invitationState:(int64_t)a7 error:(id *)a8
{
  __CFString *v12;
  void *v13;
  NSObject *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  void *v23;
  void *v24;
  char v25;
  id v26;
  void *v27;
  HMDHomeManager *v28;
  NSObject *v29;
  void *v30;
  __CFString *v31;
  HMDIncomingHomeInvitation *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  HMDHomeManager *v37;
  NSObject *v38;
  void *v39;
  __CFString *v40;
  HMDIncomingHomeInvitation *v41;
  HMDIncomingHomeInvitation *v42;
  void *v43;
  void *v44;
  void *v45;
  void *v46;
  void *v47;
  __CFString *v48;
  void *v49;
  NSObject *v50;
  void *v51;
  void *v52;
  HMDHomeManager *v53;
  NSObject *v54;
  void *v55;
  void *v56;
  NSObject *v57;
  void *v58;
  void *v60;
  int v61;
  void *v62;
  void *v63;
  void *v64;
  HMDHomeManager *v65;
  NSObject *v66;
  void *v67;
  unint64_t v68;
  __CFString *v69;
  __CFString *v70;
  HMDIncomingHomeInvitation *v71;
  void *v72;
  void *v73;
  HMDHomeManager *v74;
  NSObject *v75;
  void *v76;
  unint64_t v77;
  __CFString *v78;
  __CFString *v79;
  HMDIncomingHomeInvitation *v80;
  void *v81;
  HMDHomeManager *v82;
  NSObject *v83;
  void *v84;
  void *v85;
  HMDHomeManager *v86;
  NSObject *v87;
  id v88;
  void *v89;
  __CFString *v90;
  HMDIncomingHomeInvitation *v91;
  id v92;
  void *v93;
  void *v94;
  int v95;
  void *v96;
  void *v97;
  NSObject *v98;
  void *v99;
  __CFString *v100;
  void *context;
  void *contexta;
  void *v103;
  void *v104;
  void *v107;
  id v108;
  void *v109;
  __CFString *v110;
  __CFString *v111;
  void *v112;
  void *v113;
  HMDIncomingHomeInvitation *val;
  HMDHomeManager *v115;
  HMDIncomingHomeInvitation *v116;
  _QWORD v117[5];
  id v118;
  id v119;
  id from;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  id location;
  uint8_t buf[4];
  id v127;
  __int16 v128;
  __CFString *v129;
  __int16 v130;
  HMDIncomingHomeInvitation *v131;
  __int16 v132;
  id v133;
  __int16 v134;
  void *v135;
  __int16 v136;
  void *v137;
  _BYTE v138[128];
  uint64_t v139;

  v139 = *MEMORY[0x24BDAC8D0];
  v12 = (__CFString *)a3;
  v110 = (__CFString *)a4;
  v108 = a5;
  v116 = (HMDIncomingHomeInvitation *)a6;
  v13 = (void *)MEMORY[0x227676638]();
  v115 = self;
  HMFGetOSLogHandle();
  v14 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
  {
    HMFGetLogIdentifier();
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543874;
    v127 = v15;
    v128 = 2112;
    v129 = v12;
    v130 = 2112;
    v131 = v116;
    _os_log_impl(&dword_2218F0000, v14, OS_LOG_TYPE_DEFAULT, "%{public}@Incoming invitation from account %@ with payload: %@", buf, 0x20u);

  }
  objc_autoreleasePoolPop(v13);
  -[HMDIncomingHomeInvitation hmf_stringForKey:](v116, "hmf_stringForKey:", CFSTR("kHomeName"));
  v109 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDIncomingHomeInvitation hmf_UUIDForKey:](v116, "hmf_UUIDForKey:", CFSTR("kHomeUUID"));
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDIncomingHomeInvitation hmf_UUIDForKey:](v116, "hmf_UUIDForKey:", CFSTR("kInvitationIdentifierKey"));
  v111 = (__CFString *)objc_claimAutoreleasedReturnValue();
  -[HMDIncomingHomeInvitation hmf_dateForKey:](v116, "hmf_dateForKey:", CFSTR("kInvitationExpiryDateKey"));
  v107 = (void *)objc_claimAutoreleasedReturnValue();
  v123 = 0u;
  v124 = 0u;
  v121 = 0u;
  v122 = 0u;
  -[HMDHomeManager incomingInvitations](v115, "incomingInvitations");
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  v18 = (void *)objc_msgSend(v17, "copy");

  v19 = objc_msgSend(v18, "countByEnumeratingWithState:objects:count:", &v121, v138, 16);
  if (!v19)
  {
LABEL_14:
    v26 = v18;
    goto LABEL_19;
  }
  v20 = *(_QWORD *)v122;
LABEL_5:
  v21 = 0;
  while (1)
  {
    if (*(_QWORD *)v122 != v20)
      objc_enumerationMutation(v18);
    v22 = *(void **)(*((_QWORD *)&v121 + 1) + 8 * v21);
    objc_msgSend(v22, "homeUUID");
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    if ((objc_msgSend(v23, "isEqual:", v16) & 1) == 0)
    {

      goto LABEL_12;
    }
    objc_msgSend(v22, "inviterAccount");
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    v25 = objc_msgSend(v24, "isRelatedToAccount:", v12);

    if ((v25 & 1) != 0)
      break;
LABEL_12:
    if (v19 == ++v21)
    {
      v19 = objc_msgSend(v18, "countByEnumeratingWithState:objects:count:", &v121, v138, 16);
      if (v19)
        goto LABEL_5;
      goto LABEL_14;
    }
  }
  v26 = v22;

  if (!v26)
    goto LABEL_20;
  v27 = (void *)MEMORY[0x227676638]();
  v28 = v115;
  HMFGetOSLogHandle();
  v29 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v29, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v30 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v26, "describeWithFormat");
    v31 = (__CFString *)objc_claimAutoreleasedReturnValue();
    -[__CFString shortDescription](v12, "shortDescription");
    v32 = (HMDIncomingHomeInvitation *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138544130;
    v127 = v30;
    v128 = 2112;
    v129 = v31;
    v130 = 2112;
    v131 = v32;
    v132 = 2112;
    v133 = v16;
    _os_log_impl(&dword_2218F0000, v29, OS_LOG_TYPE_INFO, "%{public}@Replacing existing invitation %@ with the new incoming from account %@ for home %@", buf, 0x2Au);

  }
  objc_autoreleasePoolPop(v27);
  +[HMDBulletinBoard sharedBulletinBoard](HMDBulletinBoard, "sharedBulletinBoard");
  v33 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v26, "identifier");
  v34 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v34, "UUIDString");
  v35 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v33, "removeBulletinWithRecordID:", v35);

  -[HMDHomeManager _postIncomingInvitationStateChangedNotification:newInvitationState:](v28, "_postIncomingInvitationStateChangedNotification:newInvitationState:", v26, 1);
  -[HMDHomeManager _removeIncomingInvitation:](v28, "_removeIncomingInvitation:", v26);
LABEL_19:

LABEL_20:
  -[HMDIncomingHomeInvitation hmf_dataForKey:](v116, "hmf_dataForKey:", CFSTR("kControllerPublicKey"));
  v113 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDIncomingHomeInvitation hmf_stringForKey:](v116, "hmf_stringForKey:", CFSTR("kControllerPairingNameKey"));
  v112 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v113 || !v112)
  {
    v52 = (void *)MEMORY[0x227676638]();
    v53 = v115;
    HMFGetOSLogHandle();
    v54 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v54, OS_LOG_TYPE_DEFAULT))
    {
      HMFGetLogIdentifier();
      v55 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v127 = v55;
      v128 = 2112;
      v129 = v111;
      _os_log_impl(&dword_2218F0000, v54, OS_LOG_TYPE_DEFAULT, "%{public}@Bad request for invitation with ID %@, missing controller or public key", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v52);
    if (a8)
    {
      objc_msgSend(MEMORY[0x24BDD1540], "errorWithDomain:code:userInfo:", *MEMORY[0x24BDD5BD8], 3, 0);
      *a8 = (id)objc_claimAutoreleasedReturnValue();
    }

LABEL_45:
    val = 0;
    goto LABEL_46;
  }
  v104 = (void *)objc_msgSend(objc_alloc(MEMORY[0x24BE3F230]), "initWithPairingKeyData:", v113);
  v103 = (void *)objc_msgSend(objc_alloc(MEMORY[0x24BE3F228]), "initWithIdentifier:publicKey:privateKey:", v112, v104, 0);
  if (objc_msgSend(0, "isExpired"))
  {
    v36 = (void *)MEMORY[0x227676638]();
    v37 = v115;
    HMFGetOSLogHandle();
    v38 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v38, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v39 = (void *)objc_claimAutoreleasedReturnValue();
      -[__CFString shortDescription](v12, "shortDescription");
      v40 = (__CFString *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v127 = v39;
      v128 = 2112;
      v129 = v40;
      _os_log_impl(&dword_2218F0000, v38, OS_LOG_TYPE_INFO, "%{public}@Existing invitation from user (%@) was expired, recreating a new invitation", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v36);
    -[HMDHomeManager _postIncomingInvitationStateChangedNotification:newInvitationState:](v37, "_postIncomingInvitationStateChangedNotification:newInvitationState:", 0, 6);
    -[HMDHomeManager _removeIncomingInvitation:](v37, "_removeIncomingInvitation:", 0);
  }
  v41 = -[HMDIncomingHomeInvitation initWithInviterAccount:invitationIdentifier:invitationState:homeName:homeUUID:inviterIdentity:inviterMergeID:expiryDate:]([HMDIncomingHomeInvitation alloc], "initWithInviterAccount:invitationIdentifier:invitationState:homeName:homeUUID:inviterIdentity:inviterMergeID:expiryDate:", v12, v111, a7, v109, v16, v103, v110, v107);
  -[HMDHomeInvitation setIdsInvitationUUID:](v41, "setIdsInvitationUUID:", v108);
  val = v41;
  v42 = v116;
  -[HMDIncomingHomeInvitation hmf_stringForKey:](v42, "hmf_stringForKey:", CFSTR("HMDHomeInvitationShareURLKey"));
  v43 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v43)
  {
    v56 = (void *)MEMORY[0x227676638]();
    HMFGetOSLogHandle();
    v57 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v57, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v58 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v127 = v58;
      v128 = 2112;
      v129 = (__CFString *)val;
      _os_log_impl(&dword_2218F0000, v57, OS_LOG_TYPE_ERROR, "%{public}@Share URL is missing from invitation %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v56);
    if (a8)
    {
      objc_msgSend(MEMORY[0x24BDD1540], "hmErrorWithCode:", 27);
      *a8 = (id)objc_claimAutoreleasedReturnValue();
    }

LABEL_44:
    goto LABEL_45;
  }
  objc_msgSend(MEMORY[0x24BDBCF48], "URLWithString:", v43);
  context = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDIncomingHomeInvitation hmf_dataForKey:](v42, "hmf_dataForKey:", CFSTR("HMDHomeInvitationShareTokenKey"));
  v44 = (void *)objc_claimAutoreleasedReturnValue();
  v45 = (void *)MEMORY[0x24BDD1620];
  objc_msgSend(MEMORY[0x24BDBCF20], "setWithObject:", objc_opt_class());
  v46 = (void *)objc_claimAutoreleasedReturnValue();
  location = 0;
  objc_msgSend(v45, "_strictlyUnarchivedObjectOfClasses:fromData:error:", v46, v44, &location);
  v47 = (void *)objc_claimAutoreleasedReturnValue();
  v48 = (__CFString *)location;

  if (v48)
  {
    v49 = (void *)MEMORY[0x227676638]();
    HMFGetOSLogHandle();
    v50 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v50, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v51 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543874;
      v127 = v51;
      v128 = 2112;
      v129 = v48;
      v130 = 2112;
      v131 = val;
      _os_log_impl(&dword_2218F0000, v50, OS_LOG_TYPE_ERROR, "%{public}@Unarchive share token due to error %@ for invitation %@", buf, 0x20u);

    }
    objc_autoreleasePoolPop(v49);
    if (a8)
    {
      objc_msgSend(MEMORY[0x24BDD1540], "hmErrorWithCode:", 27);
      *a8 = (id)objc_claimAutoreleasedReturnValue();
    }
  }
  else
  {
    -[HMDHomeInvitation setShareURL:](val, "setShareURL:", context);
    -[HMDHomeInvitation setShareToken:](val, "setShareToken:", v47);
  }

  if (v48)
    goto LABEL_44;
  +[HMDCoreData featuresDataSource](HMDCoreData, "featuresDataSource");
  v60 = (void *)objc_claimAutoreleasedReturnValue();
  v61 = objc_msgSend(v60, "isRestrictedGuestEnabled");

  if (v61)
  {
    -[HMDIncomingHomeInvitation setHomeHasCameras:](val, "setHomeHasCameras:", -[HMDIncomingHomeInvitation hmf_BOOLForKey:](v42, "hmf_BOOLForKey:", *MEMORY[0x24BDD6488]));
    -[HMDIncomingHomeInvitation hmf_numberForKey:](v42, "hmf_numberForKey:", *MEMORY[0x24BDD5DE8]);
    v62 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDIncomingHomeInvitation setInviteePrivilege:](val, "setInviteePrivilege:", objc_msgSend(v62, "integerValue"));

    -[HMDIncomingHomeInvitation hmf_dictionaryForKey:](v42, "hmf_dictionaryForKey:", *MEMORY[0x24BDD6AB0]);
    v63 = (void *)objc_claimAutoreleasedReturnValue();
    v64 = (void *)MEMORY[0x227676638]();
    v65 = v115;
    HMFGetOSLogHandle();
    v66 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v66, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v67 = (void *)objc_claimAutoreleasedReturnValue();
      v68 = -[HMDIncomingHomeInvitation inviteePrivilege](val, "inviteePrivilege");
      if (v68 > 5)
        v69 = CFSTR("None");
      else
        v69 = off_24E793D90[v68];
      v70 = v69;
      -[HMDIncomingHomeInvitation homeHasCameras](val, "homeHasCameras");
      HMFBooleanToString();
      v71 = (HMDIncomingHomeInvitation *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138544130;
      v127 = v67;
      v128 = 2112;
      v129 = v70;
      v130 = 2112;
      v131 = v71;
      v132 = 2112;
      v133 = v63;
      _os_log_impl(&dword_2218F0000, v66, OS_LOG_TYPE_INFO, "%{public}@Incoming invitation: [Privilege : %@], [HomeHasCameras: %@], [rgSchedule: %@]", buf, 0x2Au);

    }
    objc_autoreleasePoolPop(v64);
    if (v63)
    {
      v72 = (void *)objc_msgSend(objc_alloc(MEMORY[0x24BDD7938]), "initWithDictionary:", v63);
      -[HMDIncomingHomeInvitation setRestrictedGuestSchedule:](val, "setRestrictedGuestSchedule:", v72);

      v73 = (void *)MEMORY[0x227676638]();
      v74 = v65;
      HMFGetOSLogHandle();
      v75 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v75, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v76 = (void *)objc_claimAutoreleasedReturnValue();
        v77 = -[HMDIncomingHomeInvitation inviteePrivilege](val, "inviteePrivilege");
        if (v77 > 5)
          v78 = CFSTR("None");
        else
          v78 = off_24E793D90[v77];
        v79 = v78;
        -[HMDIncomingHomeInvitation restrictedGuestSchedule](val, "restrictedGuestSchedule");
        v80 = (HMDIncomingHomeInvitation *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543874;
        v127 = v76;
        v128 = 2112;
        v129 = v79;
        v130 = 2112;
        v131 = v80;
        _os_log_impl(&dword_2218F0000, v75, OS_LOG_TYPE_INFO, "%{public}@Unable to parse the RG schedule payload from invitation OR it does not exist. %@ / %@", buf, 0x20u);

      }
      objc_autoreleasePoolPop(v73);
    }

  }
  v81 = (void *)MEMORY[0x227676638]();
  v82 = v115;
  HMFGetOSLogHandle();
  v83 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v83, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v84 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543874;
    v127 = v84;
    v128 = 2112;
    v129 = v110;
    v130 = 2112;
    v131 = (HMDIncomingHomeInvitation *)v111;
    _os_log_impl(&dword_2218F0000, v83, OS_LOG_TYPE_INFO, "%{public}@Received incoming invitation from mergeID %@ for invite %@", buf, 0x20u);

  }
  objc_autoreleasePoolPop(v81);
  -[HMDHomeManager workQueue](v82, "workQueue");
  v85 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHomeInvitation setClientQueue:](val, "setClientQueue:", v85);

  objc_initWeak(&location, v82);
  objc_initWeak(&from, val);
  v117[0] = MEMORY[0x24BDAC760];
  v117[1] = 3221225472;
  v117[2] = __116__HMDHomeManager__trackIncomingInvitationFromAccount_mergeID_idsInvitationIdentifier_payload_invitationState_error___block_invoke;
  v117[3] = &unk_24E798350;
  objc_copyWeak(&v118, &location);
  objc_copyWeak(&v119, &from);
  v117[4] = v82;
  -[HMDHomeInvitation setExpirationHandler:](val, "setExpirationHandler:", v117);
  -[HMDHomeManager _addIncomingInvitation:](v82, "_addIncomingInvitation:", val);
  contexta = (void *)MEMORY[0x227676638](-[HMDHomeManager _postIncomingInvitationStateChangedNotification:newInvitationState:](v82, "_postIncomingInvitationStateChangedNotification:newInvitationState:", val, a7));
  v86 = v82;
  HMFGetOSLogHandle();
  v87 = (id)objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v87, OS_LOG_TYPE_DEFAULT))
  {
    HMFGetLogIdentifier();
    v88 = (id)objc_claimAutoreleasedReturnValue();
    -[HMDHomeInvitation identifier](val, "identifier");
    v89 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v89, "UUIDString");
    v90 = (__CFString *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD76D0], "homeInvitationStateDescription:", a7);
    v91 = (HMDIncomingHomeInvitation *)(id)objc_claimAutoreleasedReturnValue();
    -[__CFString shortDescription](v12, "shortDescription");
    v92 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v16, "UUIDString");
    v93 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138544642;
    v127 = v88;
    v128 = 2112;
    v129 = v90;
    v130 = 2112;
    v131 = v91;
    v132 = 2112;
    v133 = v92;
    v134 = 2112;
    v135 = v109;
    v136 = 2112;
    v137 = v93;
    _os_log_impl(&dword_2218F0000, v87, OS_LOG_TYPE_DEFAULT, "%{public}@Tracking incoming invite %@ with state %@ from account %@ for home %@(%@)", buf, 0x3Eu);

  }
  objc_autoreleasePoolPop(contexta);
  if (isThisDeviceDesignatedFMFDevice())
    -[HMDHomeManager _autoAcceptInviteIfReinvitation:](v86, "_autoAcceptInviteIfReinvitation:", val);
  objc_destroyWeak(&v119);
  objc_destroyWeak(&v118);
  objc_destroyWeak(&from);
  objc_destroyWeak(&location);

  if (a7 == 5)
  {
    -[HMDHomeManager uuidsOfRemovedHomes](v86, "uuidsOfRemovedHomes");
    v94 = (void *)objc_claimAutoreleasedReturnValue();
    v95 = objc_msgSend(v94, "containsObject:", v16);

    if (v95)
    {
      -[HMDHomeManager uuidsOfRemovedHomes](v86, "uuidsOfRemovedHomes");
      v96 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v96, "removeObject:", v16);

      v97 = (void *)MEMORY[0x227676638]();
      HMFGetOSLogHandle();
      v98 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v98, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v99 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v16, "UUIDString");
        v100 = (__CFString *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        v127 = v99;
        v128 = 2112;
        v129 = v100;
        _os_log_impl(&dword_2218F0000, v98, OS_LOG_TYPE_INFO, "%{public}@Removing home with UUID %@ from uuids of guest homes removed locally since invite was accepted", buf, 0x16u);

      }
      objc_autoreleasePoolPop(v97);
    }
    -[HMDHomeManager _stopTrackingRemovedHomeUserMergeId:](v86, "_stopTrackingRemovedHomeUserMergeId:", v110);
  }
LABEL_46:

  return val;
}

- (void)_postIncomingInvitationStateChangedNotification:(id)a3 newInvitationState:(int64_t)a4
{
  id v6;
  void *v7;
  void *v8;
  id v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  HMDHomeManager *v14;
  NSObject *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(uint64_t);
  void *v25;
  id v26;
  int64_t v27;
  uint8_t buf[4];
  void *v29;
  __int16 v30;
  void *v31;
  __int16 v32;
  void *v33;
  const __CFString *v34;
  void *v35;
  _QWORD v36[2];

  v36[1] = *MEMORY[0x24BDAC8D0];
  v6 = a3;
  -[HMDHomeManager backingStore](self, "backingStore");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "context");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v22 = MEMORY[0x24BDAC760];
  v23 = 3221225472;
  v24 = __85__HMDHomeManager__postIncomingInvitationStateChangedNotification_newInvitationState___block_invoke;
  v25 = &unk_24E797C10;
  v9 = v6;
  v26 = v9;
  v27 = a4;
  objc_msgSend(v8, "performBlock:", &v22);

  objc_msgSend(v9, "updateInvitationState:", a4, v22, v23, v24, v25);
  v36[0] = v9;
  objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", v36, 1);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  encodeRootObjectForIncomingXPCMessage(v10, 0);
  v11 = (void *)objc_claimAutoreleasedReturnValue();

  v34 = CFSTR("kInvitationsDataKey");
  v35 = v11;
  objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", &v35, &v34, 1);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  v13 = (void *)MEMORY[0x227676638]();
  v14 = self;
  HMFGetOSLogHandle();
  v15 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD16E0], "numberWithInteger:", a4);
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "describeWithFormat");
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543874;
    v29 = v16;
    v30 = 2112;
    v31 = v17;
    v32 = 2112;
    v33 = v18;
    _os_log_impl(&dword_2218F0000, v15, OS_LOG_TYPE_INFO, "%{public}@Posting incoming state update to clients: %@ / %@", buf, 0x20u);

  }
  objc_autoreleasePoolPop(v13);
  objc_msgSend(MEMORY[0x24BE3F1B0], "entitledMessageWithName:messagePayload:", CFSTR("kUserInvitationsUpdatedNotificationKey"), v12);
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHomeManager messageDispatcher](v14, "messageDispatcher");
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHomeManager uuid](v14, "uuid");
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v20, "sendMessage:target:", v19, v21);

}

- (void)_autoAcceptAllPendingReinvitations
{
  NSObject *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t i;
  void *v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  -[HMDHomeManager workQueue](self, "workQueue");
  v3 = objc_claimAutoreleasedReturnValue();
  dispatch_assert_queue_V2(v3);

  v13 = 0u;
  v14 = 0u;
  v11 = 0u;
  v12 = 0u;
  -[HMDHomeManager incomingInvitations](self, "incomingInvitations", 0);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = (void *)objc_msgSend(v4, "copy");

  v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
  if (v6)
  {
    v7 = v6;
    v8 = *(_QWORD *)v12;
    do
    {
      for (i = 0; i != v7; ++i)
      {
        if (*(_QWORD *)v12 != v8)
          objc_enumerationMutation(v5);
        v10 = *(void **)(*((_QWORD *)&v11 + 1) + 8 * i);
        if (objc_msgSend(v10, "invitationState") == 2)
          -[HMDHomeManager _autoAcceptInviteIfReinvitation:](self, "_autoAcceptInviteIfReinvitation:", v10);
      }
      v7 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    }
    while (v7);
  }

}

- (void)_acceptHomeInviteFromAccount:(id)a3 message:(id)a4 trackInvite:(BOOL)a5
{
  _BOOL4 v5;
  id v8;
  id v9;
  void *v10;
  void *v11;
  void *v12;
  HMDHomeManager *v13;
  NSObject *v14;
  void *v15;
  void *v16;
  uint64_t v17;
  void (**v18)(_QWORD, _QWORD, _QWORD);
  void *v19;
  void *v20;
  void (**v21)(_QWORD, _QWORD, _QWORD);
  uint64_t v22;
  id v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  id v28;
  void *v29;
  NSObject *v30;
  void *v31;
  void (**v32)(_QWORD, _QWORD, _QWORD);
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  void (**v41)(_QWORD, _QWORD, _QWORD);
  void *v42;
  HMDHomeManager *v43;
  NSObject *v44;
  void *v45;
  void *v46;
  void *v47;
  NSObject *v48;
  void *v49;
  void *v50;
  id v51;
  void *v52;
  id v53;
  void *v54;
  void *v55;
  id v56;
  id v57;
  id v58;
  id v59;
  id v60;
  _QWORD v61[3];
  _QWORD v62[3];
  uint8_t buf[4];
  void *v64;
  __int16 v65;
  id v66;
  uint64_t v67;

  v5 = a5;
  v67 = *MEMORY[0x24BDAC8D0];
  v8 = a3;
  v9 = a4;
  objc_msgSend(v9, "messagePayload");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "objectForKeyedSubscript:", CFSTR("kRequestedCapabilitiesKey"));
  v11 = (void *)objc_claimAutoreleasedReturnValue();

  v12 = (void *)MEMORY[0x227676638]();
  v13 = self;
  HMFGetOSLogHandle();
  v14 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543362;
    v64 = v15;
    _os_log_impl(&dword_2218F0000, v14, OS_LOG_TYPE_INFO, "%{public}@Handling request for getting controller identity for home invite request", buf, 0xCu);

  }
  objc_autoreleasePoolPop(v12);
  if (v8)
  {
    objc_msgSend(v9, "dataForKey:", CFSTR("kControllerPublicKey"));
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "stringForKey:", CFSTR("kControllerPairingNameKey"));
    v17 = objc_claimAutoreleasedReturnValue();
    v18 = (void (**)(_QWORD, _QWORD, _QWORD))v17;
    if (v16 && v17)
    {
      v19 = v11;
      v55 = v16;
      v20 = (void *)objc_msgSend(objc_alloc(MEMORY[0x24BE3F230]), "initWithPairingKeyData:", v16);
      v21 = (void (**)(_QWORD, _QWORD, _QWORD))objc_msgSend(objc_alloc(MEMORY[0x24BE1BBB0]), "initWithIdentifier:publicKey:privateKey:permissions:", v18, v20, 0, 0);
      +[HMDIdentityRegistry sharedRegistry](HMDIdentityRegistry, "sharedRegistry");
      v22 = objc_claimAutoreleasedReturnValue();
      objc_msgSend((id)v22, "registerIdentity:account:object:", v21, v8, v13);

      v59 = 0;
      v60 = 0;
      v58 = 0;
      LOBYTE(v22) = -[HMDHomeManager getOrCreateControllerPublicKey:controllerUsername:error:](v13, "getOrCreateControllerPublicKey:controllerUsername:error:", &v60, &v59, &v58);
      v57 = v60;
      v56 = v59;
      v23 = v58;
      v24 = v23;
      if ((v22 & 1) != 0)
      {
        v51 = v23;
        if (v5)
        {
          objc_msgSend(v9, "remoteSenderContext");
          v25 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v25, "mergeID");
          v26 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v9, "messagePayload");
          v27 = (void *)objc_claimAutoreleasedReturnValue();
          v28 = -[HMDHomeManager _trackIncomingInvitationFromAccount:mergeID:idsInvitationIdentifier:payload:invitationState:error:](v13, "_trackIncomingInvitationFromAccount:mergeID:idsInvitationIdentifier:payload:invitationState:error:", v8, v26, 0, v27, 5, 0);

        }
        v53 = v8;
        v29 = (void *)MEMORY[0x227676638]();
        HMFGetOSLogHandle();
        v30 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v30, OS_LOG_TYPE_INFO))
        {
          HMFGetLogIdentifier();
          v31 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543618;
          v64 = v31;
          v65 = 2112;
          v66 = v57;
          _os_log_impl(&dword_2218F0000, v30, OS_LOG_TYPE_INFO, "%{public}@Preparing response for request for controller info: %@", buf, 0x16u);

        }
        objc_autoreleasePoolPop(v29);
        objc_msgSend(MEMORY[0x24BDBCED8], "dictionary");
        v32 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
        v61[0] = CFSTR("kControllerPublicKey");
        v33 = v57;
        if (!v57)
        {
          objc_msgSend(MEMORY[0x24BDBCEF8], "null");
          v33 = (void *)objc_claimAutoreleasedReturnValue();
        }
        v54 = v20;
        v62[0] = v33;
        v62[1] = v56;
        v61[1] = CFSTR("kControllerPairingNameKey");
        v61[2] = CFSTR("kInviteAcceptedKey");
        v62[2] = MEMORY[0x24BDBD1C8];
        objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v62, v61, 3, v51);
        v34 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v32, "addEntriesFromDictionary:", v34);

        if (!v57)
        -[HMDHomeManager appleAccountManager](v13, "appleAccountManager");
        v35 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v35, "account");
        v36 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v36, "primaryHandle");
        v37 = (void *)objc_claimAutoreleasedReturnValue();

        v8 = v53;
        if (v37)
        {
          +[HMDAccountHandleFormatter defaultFormatter](HMDAccountHandleFormatter, "defaultFormatter");
          v38 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v38, "stringForObjectValue:", v37);
          v39 = (void *)objc_claimAutoreleasedReturnValue();

          if (v39)
            objc_msgSend(v32, "setObject:forKeyedSubscript:", v39, CFSTR("kUserIDKey"));

        }
        -[HMDHomeManager _prepareAnswerForRequestedCapabilities:](v13, "_prepareAnswerForRequestedCapabilities:", v19);
        v40 = (void *)objc_claimAutoreleasedReturnValue();
        if (v40)
          objc_msgSend(v32, "addEntriesFromDictionary:", v40);
        -[HMDHomeManager _updateIncomingInvitesPresent](v13, "_updateIncomingInvitesPresent");
        objc_msgSend(v9, "responseHandler");
        v41 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
        v41[2](v41, 0, v32);

        v20 = v54;
        v11 = v19;
        v24 = v52;
      }
      else
      {
        objc_msgSend(v9, "responseHandler");
        v32 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
        ((void (**)(_QWORD, void *, _QWORD))v32)[2](v32, v24, 0);
        v11 = v19;
      }

      v16 = v55;
    }
    else
    {
      v47 = (void *)MEMORY[0x227676638]();
      HMFGetOSLogHandle();
      v48 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v48, OS_LOG_TYPE_DEFAULT))
      {
        HMFGetLogIdentifier();
        v49 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v9, "name");
        v50 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        v64 = v49;
        v65 = 2112;
        v66 = v50;
        _os_log_impl(&dword_2218F0000, v48, OS_LOG_TYPE_DEFAULT, "%{public}@Bad request for message %@, missing controller or public key", buf, 0x16u);

      }
      objc_autoreleasePoolPop(v47);
      objc_msgSend(MEMORY[0x24BDD1540], "errorWithDomain:code:userInfo:", *MEMORY[0x24BDD5BD8], 3, 0);
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v9, "responseHandler");
      v21 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
      ((void (**)(_QWORD, void *, _QWORD))v21)[2](v21, v20, 0);
    }

    goto LABEL_32;
  }
  v42 = (void *)MEMORY[0x227676638]();
  v43 = v13;
  HMFGetOSLogHandle();
  v44 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v44, OS_LOG_TYPE_ERROR))
  {
    HMFGetLogIdentifier();
    v45 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543618;
    v64 = v45;
    v65 = 2112;
    v66 = v9;
    _os_log_impl(&dword_2218F0000, v44, OS_LOG_TYPE_ERROR, "%{public}@Failed to resolve inviter account for message: %@", buf, 0x16u);

  }
  objc_autoreleasePoolPop(v42);
  objc_msgSend(v9, "responseHandler");
  v46 = (void *)objc_claimAutoreleasedReturnValue();

  if (v46)
  {
    objc_msgSend(MEMORY[0x24BDD1540], "hmErrorWithCode:", 3);
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "responseHandler");
    v18 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
    ((void (**)(_QWORD, void *, _QWORD))v18)[2](v18, v16, 0);
LABEL_32:

  }
}

- (void)_sendUserAdded:(id)a3 destination:(id)a4 toHome:(id)a5
{
  id v8;
  id v9;
  const __CFString *v10;
  __CFString *v11;
  int v12;
  __CFString *v13;
  __CFString *v14;
  void *v15;
  NSObject *v16;
  void *v17;
  void *v18;
  NSObject *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t i;
  void *v29;
  int v30;
  HMDHomeDataPushDestination *v31;
  void *v32;
  void *v33;
  int v34;
  __CFString *v35;
  __CFString *v36;
  HMDHomeManager *v37;
  void *v38;
  void *v39;
  void *v40;
  __CFString *v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  uint8_t v46[128];
  uint8_t buf[4];
  void *v48;
  __int16 v49;
  const __CFString *v50;
  __int16 v51;
  __CFString *v52;
  uint64_t v53;

  v53 = *MEMORY[0x24BDAC8D0];
  v8 = a3;
  v41 = (__CFString *)a4;
  v9 = a5;
  if ((shouldLogPrivateInformation() & 1) != 0)
  {
    objc_msgSend(v8, "userID");
    v10 = (const __CFString *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v10 = CFSTR("...");
    v11 = CFSTR("...");
  }
  v12 = shouldLogPrivateInformation();
  v13 = v41;
  if (!v12)
    v13 = CFSTR("...");
  v14 = v13;
  v15 = (void *)MEMORY[0x227676638]();
  HMFGetOSLogHandle();
  v16 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543874;
    v48 = v17;
    v49 = 2112;
    v50 = v10;
    v51 = 2112;
    v52 = v14;
    _os_log_impl(&dword_2218F0000, v16, OS_LOG_TYPE_INFO, "%{public}@Going to send home configuration to added user %@ at %@ and all resident devices", buf, 0x20u);

  }
  v35 = v14;

  objc_autoreleasePoolPop(v15);
  if (objc_msgSend(v8, "isRemoteGateway"))
  {
    v18 = (void *)MEMORY[0x227676638]();
    HMFGetOSLogHandle();
    v19 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v48 = v20;
      v49 = 2112;
      v50 = v10;
      _os_log_impl(&dword_2218F0000, v19, OS_LOG_TYPE_INFO, "%{public}@Removing resident user %@ from unassociated list", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v18);
    objc_msgSend(v8, "userID");
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHomeManager _removeFromUnassociatedPeers:home:](self, "_removeFromUnassociatedPeers:home:", v21, v9);

  }
  v36 = (__CFString *)v10;
  v37 = self;
  v22 = v8;
  objc_msgSend(MEMORY[0x24BDBCEB8], "array");
  v23 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x24BDBCEB8], "array");
  v40 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x24BDBCEB8], "array");
  v38 = v9;
  v39 = (void *)objc_claimAutoreleasedReturnValue();
  v42 = 0u;
  v43 = 0u;
  v44 = 0u;
  v45 = 0u;
  objc_msgSend(v9, "users");
  v24 = (void *)objc_claimAutoreleasedReturnValue();
  v25 = objc_msgSend(v24, "countByEnumeratingWithState:objects:count:", &v42, v46, 16);
  if (v25)
  {
    v26 = v25;
    v27 = *(_QWORD *)v43;
    do
    {
      for (i = 0; i != v26; ++i)
      {
        if (*(_QWORD *)v43 != v27)
          objc_enumerationMutation(v24);
        v29 = *(void **)(*((_QWORD *)&v42 + 1) + 8 * i);
        v30 = objc_msgSend(v29, "isRemoteGateway");
        objc_msgSend(v29, "userID");
        v31 = (HMDHomeDataPushDestination *)objc_claimAutoreleasedReturnValue();
        if (v30)
        {
          v32 = v23;
LABEL_24:
          objc_msgSend(v32, "addObject:", v31);

          continue;
        }
        objc_msgSend(v22, "userID");
        v33 = (void *)objc_claimAutoreleasedReturnValue();
        v34 = -[HMDHomeDataPushDestination isEqualToString:](v31, "isEqualToString:", v33);

        if (v41 && v34)
        {
          v31 = -[HMDHomeDataPushDestination initWithUser:destination:]([HMDHomeDataPushDestination alloc], "initWithUser:destination:", v29, v41);
          -[HMDHomeDataPushDestination setIgnoreConfigCompare:](v31, "setIgnoreConfigCompare:", 1);
          if (objc_msgSend(v29, "isAdministrator"))
            v32 = v39;
          else
            v32 = v40;
          goto LABEL_24;
        }
      }
      v26 = objc_msgSend(v24, "countByEnumeratingWithState:objects:count:", &v42, v46, 16);
    }
    while (v26);
  }

  -[HMDHomeManager _pushChangesForHome:toRemoteDevicesOnSameAccount:addedUser:](v37, "_pushChangesForHome:toRemoteDevicesOnSameAccount:addedUser:", v38, v23, v22);
  -[HMDHomeManager _pushChangesForHome:toRegularUsersOfHome:adminUsersOfHome:](v37, "_pushChangesForHome:toRegularUsersOfHome:adminUsersOfHome:", v38, v40, v39);

}

- (void)_sendUserRemoved:(id)a3 fromHome:(id)a4 pairingUsername:(id)a5 pushToCloud:(BOOL)a6 completionHandler:(id)a7
{
  id v11;
  id v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  __CFString *v19;
  void *v20;
  id v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;
  void *v33;
  id v34;
  _QWORD v35[4];
  id v36;
  id v37;
  id v38;
  id v39;
  id v40;
  const __CFString *v41;
  void *v42;
  _QWORD v43[2];
  _QWORD v44[2];
  const __CFString *v45;
  const __CFString *v46;
  _QWORD v47[2];
  id location[4];

  location[2] = *(id *)MEMORY[0x24BDAC8D0];
  v11 = a3;
  v12 = a4;
  v32 = a5;
  v34 = a7;
  v13 = (void *)MEMORY[0x24BE3F1B0];
  v41 = CFSTR("kHomeUUID");
  objc_msgSend(v12, "uuid");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v14, "UUIDString");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  v42 = v15;
  objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", &v42, &v41, 1);
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v13, "internalMessageWithName:messagePayload:", CFSTR("kUserRemovedRequestKey"), v16);
  v33 = (void *)objc_claimAutoreleasedReturnValue();

  if (objc_msgSend(v11, "isRemoteGateway"))
  {
    objc_msgSend(v11, "userID", v32, v33);
    v17 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v17 = 0;
  }
  v45 = CFSTR("kDeviceClassTypeKey");
  v46 = CFSTR("kDeviceClassTypeTransient");
  v47[0] = CFSTR("kRequiredCapabilitiesKey");
  v18 = (void *)MEMORY[0x24BDBCE70];
  v19 = CFSTR("kDeviceClassTypeTransient");
  objc_msgSend(v18, "dictionaryWithObjects:forKeys:count:", &v46, &v45, 1);
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  v47[1] = CFSTR("kRequestedCapabilitiesKey");
  location[0] = v20;
  v43[0] = CFSTR("kHomedVersionKey");
  v43[1] = CFSTR("kHomeKitVersionStringKey");
  v44[0] = homedVersion;
  v21 = (id)homedVersion;
  +[HMDHomeKitVersion currentVersion](HMDHomeKitVersion, "currentVersion");
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v22, "versionString");
  v23 = (void *)objc_claimAutoreleasedReturnValue();
  v44[1] = v23;
  objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v44, v43, 2);
  v24 = (void *)objc_claimAutoreleasedReturnValue();
  location[1] = v24;
  objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", location, v47, 2);
  v25 = (void *)objc_claimAutoreleasedReturnValue();

  objc_initWeak(location, self);
  objc_msgSend(v11, "userID");
  v26 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHomeManager workQueue](self, "workQueue");
  v27 = (void *)objc_claimAutoreleasedReturnValue();
  v35[0] = MEMORY[0x24BDAC760];
  v35[1] = 3221225472;
  v35[2] = __90__HMDHomeManager__sendUserRemoved_fromHome_pairingUsername_pushToCloud_completionHandler___block_invoke;
  v35[3] = &unk_24E796580;
  objc_copyWeak(&v40, location);
  v28 = v34;
  v39 = v28;
  v29 = v12;
  v36 = v29;
  v30 = v11;
  v37 = v30;
  v31 = v33;
  v38 = v31;
  -[HMDHomeManager electDeviceForUser:destination:deviceCapabilities:queue:completionHandler:](self, "electDeviceForUser:destination:deviceCapabilities:queue:completionHandler:", v26, v17, v25, v27, v35);

  objc_destroyWeak(&v40);
  objc_destroyWeak(location);

}

- (void)_removeAllUsersOfHome:(id)a3
{
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t i;
  uint64_t v9;
  void *v10;
  NSObject *v11;
  void *v12;
  void *v13;
  void *v14;
  HMDRemoteDeviceMessageDestination *v15;
  void *v16;
  HMDRemoteDeviceMessageDestination *v17;
  void *v18;
  void *v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t j;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t k;
  void *v31;
  void *v32;
  char v33;
  char isKindOfClass;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  uint64_t v41;
  id v42;
  id obj;
  id v44;
  void *v45;
  _QWORD v46[5];
  id v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  _BYTE v60[128];
  uint8_t v61[128];
  uint8_t buf[4];
  void *v63;
  __int16 v64;
  void *v65;
  __int16 v66;
  uint64_t v67;
  _BYTE v68[128];
  const __CFString *v69;
  _QWORD v70[4];

  v70[1] = *MEMORY[0x24BDAC8D0];
  v69 = CFSTR("kHomeUUID");
  v44 = a3;
  objc_msgSend(v44, "uuid");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "UUIDString");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v70[0] = v5;
  objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v70, &v69, 1);
  v45 = (void *)objc_claimAutoreleasedReturnValue();

  v58 = 0u;
  v59 = 0u;
  v56 = 0u;
  v57 = 0u;
  -[HMDHomeManager associatedWatchPeers](self, "associatedWatchPeers");
  obj = (id)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v56, v68, 16);
  if (v6)
  {
    v7 = *(_QWORD *)v57;
    v41 = 138543874;
    do
    {
      for (i = 0; i != v6; ++i)
      {
        if (*(_QWORD *)v57 != v7)
          objc_enumerationMutation(obj);
        v9 = *(_QWORD *)(*((_QWORD *)&v56 + 1) + 8 * i);
        v10 = (void *)MEMORY[0x227676638]();
        HMFGetOSLogHandle();
        v11 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
        {
          HMFGetLogIdentifier();
          v12 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v44, "name");
          v13 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543874;
          v63 = v12;
          v64 = 2112;
          v65 = v13;
          v66 = 2112;
          v67 = v9;
          _os_log_impl(&dword_2218F0000, v11, OS_LOG_TYPE_INFO, "%{public}@Sending the remove home for %@ to watch %@", buf, 0x20u);

        }
        objc_autoreleasePoolPop(v10);
        +[HMDDevice deviceWithDestination:](HMDDevice, "deviceWithDestination:", v9);
        v14 = (void *)objc_claimAutoreleasedReturnValue();
        v15 = [HMDRemoteDeviceMessageDestination alloc];
        -[HMDHomeManager uuid](self, "uuid");
        v16 = (void *)objc_claimAutoreleasedReturnValue();
        v17 = -[HMDRemoteDeviceMessageDestination initWithTarget:device:](v15, "initWithTarget:device:", v16, v14);

        objc_msgSend(MEMORY[0x24BE3F1B0], "internalMessageWithName:destination:messagePayload:", CFSTR("kUserResetHomeConfigRequestKey"), v17, v45);
        v18 = (void *)objc_claimAutoreleasedReturnValue();
        -[HMDHomeManager messageDispatcher](self, "messageDispatcher");
        v19 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v19, "sendMessage:completionHandler:", v18, 0);

      }
      v6 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v56, v68, 16);
    }
    while (v6);
  }

  v54 = 0u;
  v55 = 0u;
  v52 = 0u;
  v53 = 0u;
  objc_msgSend(v44, "users");
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  v21 = objc_msgSend(v20, "countByEnumeratingWithState:objects:count:", &v52, v61, 16);
  if (v21)
  {
    v22 = *(_QWORD *)v53;
    do
    {
      for (j = 0; j != v21; ++j)
      {
        if (*(_QWORD *)v53 != v22)
          objc_enumerationMutation(v20);
        objc_msgSend(*(id *)(*((_QWORD *)&v52 + 1) + 8 * j), "account", v41);
        v24 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v24, "senderCorrelationIdentifier");
        v25 = (void *)objc_claimAutoreleasedReturnValue();
        -[HMDHomeManager _trackRemovedHomeUserMergeId:](self, "_trackRemovedHomeUserMergeId:", v25);

      }
      v21 = objc_msgSend(v20, "countByEnumeratingWithState:objects:count:", &v52, v61, 16);
    }
    while (v21);
  }

  if (objc_msgSend(v44, "isOwnerUser"))
  {
    objc_msgSend(v44, "users");
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    v27 = (void *)objc_msgSend(v26, "copy");

    v50 = 0u;
    v51 = 0u;
    v48 = 0u;
    v49 = 0u;
    v42 = v27;
    v28 = objc_msgSend(v42, "countByEnumeratingWithState:objects:count:", &v48, v60, 16);
    if (v28)
    {
      v29 = *(_QWORD *)v49;
      do
      {
        for (k = 0; k != v28; ++k)
        {
          if (*(_QWORD *)v49 != v29)
            objc_enumerationMutation(v42);
          v31 = *(void **)(*((_QWORD *)&v48 + 1) + 8 * k);
          objc_msgSend(v44, "currentUser");
          v32 = (void *)objc_claimAutoreleasedReturnValue();
          v33 = objc_msgSend(v31, "isEqual:", v32);

          if ((v33 & 1) == 0)
          {
            objc_opt_class();
            isKindOfClass = objc_opt_isKindOfClass();
            -[HMDHomeManager uuid](self, "uuid");
            v35 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v31, "userID");
            v36 = (void *)objc_claimAutoreleasedReturnValue();
            if ((isKindOfClass & 1) != 0)
            {
              objc_msgSend(v31, "userID");
              v37 = (void *)objc_claimAutoreleasedReturnValue();
              +[HMDMessageDispatcher destinationWithTarget:userID:destination:multicast:](HMDMessageDispatcher, "destinationWithTarget:userID:destination:multicast:", v35, v36, v37, 0);
              v38 = (void *)objc_claimAutoreleasedReturnValue();

            }
            else
            {
              +[HMDMessageDispatcher destinationWithTarget:userID:destination:multicast:](HMDMessageDispatcher, "destinationWithTarget:userID:destination:multicast:", v35, v36, 0, 0);
              v38 = (void *)objc_claimAutoreleasedReturnValue();
            }

            +[HMDRemoteMessage secureMessageWithName:destination:messagePayload:](HMDRemoteMessage, "secureMessageWithName:destination:messagePayload:", CFSTR("kUserResetHomeConfigRequestKey"), v38, v45);
            v39 = (void *)objc_claimAutoreleasedReturnValue();
            objc_initWeak((id *)buf, self);
            v46[0] = MEMORY[0x24BDAC760];
            v46[1] = 3221225472;
            v46[2] = __40__HMDHomeManager__removeAllUsersOfHome___block_invoke;
            v46[3] = &unk_24E798D90;
            v46[4] = v31;
            objc_copyWeak(&v47, (id *)buf);
            objc_msgSend(v39, "setResponseHandler:", v46);
            -[HMDHomeManager messageDispatcher](self, "messageDispatcher");
            v40 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v40, "sendMessage:completionHandler:", v39, 0);

            objc_destroyWeak(&v47);
            objc_destroyWeak((id *)buf);

          }
        }
        v28 = objc_msgSend(v42, "countByEnumeratingWithState:objects:count:", &v48, v60, 16);
      }
      while (v28);
    }

  }
}

- (id)homeUserFromMessage:(id)a3 home:(id)a4
{
  return __isUserInMessagePartOfHome(self, a4, a3);
}

- (void)_handleResetHome:(id)a3
{
  id v4;
  void *v5;
  uint64_t v6;
  void *v7;
  id v8;
  void *v9;
  id v10;
  void *v11;
  void *v12;
  HMDHomeManager *v13;
  NSObject *v14;
  void *v15;
  void *v16;
  HMDHomeManager *v17;
  NSObject *v18;
  void *v19;
  void *v20;
  NSObject *v21;
  void *v22;
  void *v23;
  void *v24;
  NSObject *v25;
  void *v26;
  void *v27;
  void (**v28)(_QWORD, _QWORD, _QWORD);
  void *v29;
  HMDHomeManager *v30;
  NSObject *v31;
  void *v32;
  void *v33;
  void (**v34)(_QWORD, _QWORD, _QWORD);
  void *v35;
  int v36;
  void *v37;
  __int16 v38;
  id v39;
  uint64_t v40;

  v40 = *MEMORY[0x24BDAC8D0];
  v4 = a3;
  objc_msgSend(v4, "uuidForKey:", CFSTR("kHomeUUID"));
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  if (v5)
  {
    -[HMDHomeManager _homeWithUUID:](self, "_homeWithUUID:", v5);
    v6 = objc_claimAutoreleasedReturnValue();
    if (v6)
    {
      v7 = (void *)v6;
      v8 = v4;
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0)
        v9 = v8;
      else
        v9 = 0;
      v10 = v9;

      if (!objc_msgSend(v8, "isRemote") || objc_msgSend(v10, "restriction") == 4)
        goto LABEL_10;
      __isUserInMessagePartOfHome(self, v7, v8);
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      if ((objc_msgSend(v11, "isOwner") & 1) != 0)
      {

LABEL_10:
        v12 = (void *)MEMORY[0x227676638]();
        v13 = self;
        HMFGetOSLogHandle();
        v14 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
        {
          HMFGetLogIdentifier();
          v15 = (void *)objc_claimAutoreleasedReturnValue();
          v36 = 138543618;
          v37 = v15;
          v38 = 2112;
          v39 = v7;
          _os_log_impl(&dword_2218F0000, v14, OS_LOG_TYPE_INFO, "%{public}@Received request to reset configuration for home %@", (uint8_t *)&v36, 0x16u);

        }
        objc_autoreleasePoolPop(v12);
        v16 = (void *)MEMORY[0x227676638]();
        v17 = v13;
        HMFGetOSLogHandle();
        v18 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
        {
          HMFGetLogIdentifier();
          v19 = (void *)objc_claimAutoreleasedReturnValue();
          v36 = 138543618;
          v37 = v19;
          v38 = 2112;
          v39 = v7;
          _os_log_impl(&dword_2218F0000, v18, OS_LOG_TYPE_INFO, "%{public}@Attempting to reset home %@ by removing it", (uint8_t *)&v36, 0x16u);

        }
        objc_autoreleasePoolPop(v16);
        -[HMDHomeManager _removeHome:withMessage:saveToStore:notifyUsers:shouldRemovePairings:](v17, "_removeHome:withMessage:saveToStore:notifyUsers:shouldRemovePairings:", v7, v8, 1, 1, 0);
        goto LABEL_21;
      }
      v29 = (void *)MEMORY[0x227676638]();
      v30 = self;
      HMFGetOSLogHandle();
      v31 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v32 = (void *)objc_claimAutoreleasedReturnValue();
        v36 = 138543618;
        v37 = v32;
        v38 = 2112;
        v39 = v8;
        _os_log_impl(&dword_2218F0000, v31, OS_LOG_TYPE_ERROR, "%{public}@Only owner can remove homes: %@", (uint8_t *)&v36, 0x16u);

      }
      objc_autoreleasePoolPop(v29);
      objc_msgSend(v8, "responseHandler");
      v33 = (void *)objc_claimAutoreleasedReturnValue();

      if (v33)
      {
        objc_msgSend(v8, "responseHandler");
        v34 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
        objc_msgSend(MEMORY[0x24BDD1540], "hmErrorWithCode:", 17);
        v35 = (void *)objc_claimAutoreleasedReturnValue();
        ((void (**)(_QWORD, void *, _QWORD))v34)[2](v34, v35, 0);

      }
    }
    else
    {
      v24 = (void *)MEMORY[0x227676638]();
      HMFGetOSLogHandle();
      v25 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v25, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v26 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v5, "UUIDString");
        v27 = (void *)objc_claimAutoreleasedReturnValue();
        v36 = 138543618;
        v37 = v26;
        v38 = 2112;
        v39 = v27;
        _os_log_impl(&dword_2218F0000, v25, OS_LOG_TYPE_INFO, "%{public}@Cannot reset home %@ since it could not be found", (uint8_t *)&v36, 0x16u);

      }
      objc_autoreleasePoolPop(v24);
      objc_msgSend(MEMORY[0x24BDD1540], "errorWithDomain:code:userInfo:", *MEMORY[0x24BDD5BD8], 2, 0);
      v10 = (id)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "responseHandler");
      v28 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
      ((void (**)(_QWORD, id, _QWORD))v28)[2](v28, v10, 0);

      v7 = 0;
    }
  }
  else
  {
    v20 = (void *)MEMORY[0x227676638]();
    HMFGetOSLogHandle();
    v21 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
    {
      HMFGetLogIdentifier();
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "name");
      v23 = (void *)objc_claimAutoreleasedReturnValue();
      v36 = 138543618;
      v37 = v22;
      v38 = 2112;
      v39 = v23;
      _os_log_impl(&dword_2218F0000, v21, OS_LOG_TYPE_DEFAULT, "%{public}@Bad request for message %@", (uint8_t *)&v36, 0x16u);

    }
    objc_autoreleasePoolPop(v20);
    objc_msgSend(MEMORY[0x24BDD1540], "errorWithDomain:code:userInfo:", *MEMORY[0x24BDD5BD8], 3, 0);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "responseHandler");
    v10 = (id)objc_claimAutoreleasedReturnValue();
    (*((void (**)(id, void *, _QWORD))v10 + 2))(v10, v7, 0);
  }
LABEL_21:

}

- (void)_handleUserRemoved:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  id v7;
  void *v8;
  id v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  HMDHomeManager *v14;
  NSObject *v15;
  void *v16;
  void *v17;
  void (**v18)(_QWORD, _QWORD, _QWORD);
  void *v19;
  int v20;
  void *v21;
  __int16 v22;
  id v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v4 = a3;
  objc_msgSend(v4, "uuidForKey:", CFSTR("kHomeUUID"));
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHomeManager _homeWithUUID:](self, "_homeWithUUID:", v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  if (v6)
  {
    v7 = v4;
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
      v8 = v7;
    else
      v8 = 0;
    v9 = v8;

    if (objc_msgSend(v7, "isRemote") && objc_msgSend(v9, "restriction") != 4)
    {
      __isUserInMessagePartOfHome(self, v6, v7);
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      if ((objc_msgSend(v10, "isOwner") & 1) == 0)
      {
        v13 = (void *)MEMORY[0x227676638]();
        v14 = self;
        HMFGetOSLogHandle();
        v15 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
        {
          HMFGetLogIdentifier();
          v16 = (void *)objc_claimAutoreleasedReturnValue();
          v20 = 138543618;
          v21 = v16;
          v22 = 2112;
          v23 = v7;
          _os_log_impl(&dword_2218F0000, v15, OS_LOG_TYPE_ERROR, "%{public}@Only owner can remove homes: %@", (uint8_t *)&v20, 0x16u);

        }
        objc_autoreleasePoolPop(v13);
        objc_msgSend(v7, "responseHandler");
        v17 = (void *)objc_claimAutoreleasedReturnValue();

        if (v17)
        {
          objc_msgSend(v7, "responseHandler");
          v18 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
          objc_msgSend(MEMORY[0x24BDD1540], "hmErrorWithCode:", 17);
          v19 = (void *)objc_claimAutoreleasedReturnValue();
          ((void (**)(_QWORD, void *, _QWORD))v18)[2](v18, v19, 0);

        }
        goto LABEL_17;
      }

    }
    -[HMDHomeManager dmHandleRequestRemoveHome:](self, "dmHandleRequestRemoveHome:", v7);
LABEL_17:

    goto LABEL_18;
  }
  objc_msgSend(v4, "responseHandler");
  v11 = (void *)objc_claimAutoreleasedReturnValue();

  if (v11)
  {
    objc_msgSend(v4, "responseHandler");
    v9 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD1540], "hmErrorWithCode:", 2);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    (*((void (**)(id, void *, _QWORD))v9 + 2))(v9, v12, 0);

    goto LABEL_17;
  }
LABEL_18:

}

- (void)processSharedHomeModelRemoved:(id)a3 message:(id)a4
{
  id v6;
  id v7;
  void *v8;
  void *v9;
  void *v10;
  NSObject *v11;
  NSObject *v12;
  void *v13;
  void *v14;
  void (**v15)(_QWORD, _QWORD, _QWORD);
  void *v16;
  void *v17;
  void *v18;
  void (**v19)(_QWORD, _QWORD, _QWORD);
  int v20;
  void *v21;
  __int16 v22;
  void *v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v6 = a3;
  v7 = a4;
  objc_msgSend(v6, "uuid");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  if (v8)
  {
    -[HMDHomeManager _homeWithUUID:](self, "_homeWithUUID:", v8);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v10 = (void *)MEMORY[0x227676638]();
    HMFGetOSLogHandle();
    v11 = objc_claimAutoreleasedReturnValue();
    v12 = v11;
    if (v9)
    {
      if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        v20 = 138543618;
        v21 = v13;
        v22 = 2112;
        v23 = v9;
        _os_log_impl(&dword_2218F0000, v12, OS_LOG_TYPE_INFO, "%{public}@Attempting to remove home %@ since we are no longer part of the home", (uint8_t *)&v20, 0x16u);

      }
      objc_autoreleasePoolPop(v10);
      -[HMDHomeManager _removeHome:withMessage:saveToStore:notifyUsers:shouldRemovePairings:](self, "_removeHome:withMessage:saveToStore:notifyUsers:shouldRemovePairings:", v9, v7, 1, 0, 0);
      goto LABEL_13;
    }
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      HMFGetLogIdentifier();
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v8, "UUIDString");
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      v20 = 138543618;
      v21 = v16;
      v22 = 2112;
      v23 = v17;
      _os_log_impl(&dword_2218F0000, v12, OS_LOG_TYPE_DEFAULT, "%{public}@Home %@ not found for user", (uint8_t *)&v20, 0x16u);

    }
    objc_autoreleasePoolPop(v10);
    objc_msgSend(v7, "responseHandler");
    v18 = (void *)objc_claimAutoreleasedReturnValue();

    if (!v18)
      goto LABEL_13;
    objc_msgSend(MEMORY[0x24BDD1540], "errorWithDomain:code:userInfo:", *MEMORY[0x24BDD5BD8], 2, 0);
    v15 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "responseHandler");
    v19 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
    v19[2](v19, v15, 0);

LABEL_12:
LABEL_13:

    goto LABEL_14;
  }
  objc_msgSend(v7, "responseHandler");
  v14 = (void *)objc_claimAutoreleasedReturnValue();

  if (v14)
  {
    objc_msgSend(MEMORY[0x24BDD1540], "errorWithDomain:code:userInfo:", *MEMORY[0x24BDD5BD8], 20, 0);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "responseHandler");
    v15 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
    ((void (**)(_QWORD, void *, _QWORD))v15)[2](v15, v9, 0);
    goto LABEL_12;
  }
LABEL_14:

}

- (void)fragmentationStream:(id)a3 didCloseWithError:(id)a4
{
  id v6;
  id v7;
  NSObject *v8;
  id v9;
  id v10;
  _QWORD block[5];
  id v12;
  id v13;

  v6 = a3;
  v7 = a4;
  -[HMDHomeManager workQueue](self, "workQueue");
  v8 = objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x24BDAC760];
  block[1] = 3221225472;
  block[2] = __56__HMDHomeManager_fragmentationStream_didCloseWithError___block_invoke;
  block[3] = &unk_24E79BBD0;
  block[4] = self;
  v12 = v6;
  v13 = v7;
  v9 = v7;
  v10 = v6;
  dispatch_async(v8, block);

}

- (void)fragmentationStream:(id)a3 didReceiveData:(id)a4 transactionIdentifier:(unsigned __int16)a5 error:(id)a6
{
  id v10;
  id v11;
  id v12;
  NSObject *v13;
  _QWORD block[5];
  id v15;
  id v16;
  id v17;
  unsigned __int16 v18;

  v10 = a3;
  v11 = a4;
  v12 = a6;
  if (v11)
  {
    -[HMDHomeManager workQueue](self, "workQueue");
    v13 = objc_claimAutoreleasedReturnValue();
    block[0] = MEMORY[0x24BDAC760];
    block[1] = 3221225472;
    block[2] = __81__HMDHomeManager_fragmentationStream_didReceiveData_transactionIdentifier_error___block_invoke;
    block[3] = &unk_24E7965A8;
    block[4] = self;
    v15 = v10;
    v16 = v11;
    v18 = a5;
    v17 = v12;
    dispatch_async(v13, block);

  }
}

- (BOOL)_shouldHandleHomeDataSync:(id)a3 remoteHome:(id)a4 sourceDeviceVersion:(id)a5
{
  id v7;
  id v8;
  id v9;
  void *v10;
  NSObject *v11;
  BOOL v12;
  void *v13;
  const char *v14;
  void *v15;
  void *v16;
  int v17;
  uint64_t v18;
  void *v19;
  const char *v20;
  NSObject *v21;
  uint32_t v22;
  uint64_t v23;
  HMDHomeKitVersion *v24;
  uint64_t v25;
  uint64_t v26;
  NSObject *v27;
  uint32_t v28;
  int v30;
  void *v31;
  __int16 v32;
  uint64_t v33;
  __int16 v34;
  uint64_t v35;
  __int16 v36;
  uint64_t v37;
  uint64_t v38;

  v38 = *MEMORY[0x24BDAC8D0];
  v7 = a3;
  v8 = a4;
  v9 = a5;
  if (isWatch())
  {
    v10 = (void *)MEMORY[0x227676638]();
    HMFGetOSLogHandle();
    v11 = objc_claimAutoreleasedReturnValue();
    v12 = 1;
    if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      v30 = 138543362;
      v31 = v13;
      v14 = "%{public}@Adding or updating home on the watch";
LABEL_12:
      v21 = v11;
      v22 = 12;
LABEL_13:
      _os_log_impl(&dword_2218F0000, v21, OS_LOG_TYPE_INFO, v14, (uint8_t *)&v30, v22);

      goto LABEL_30;
    }
    goto LABEL_30;
  }
  if (v7)
  {
    objc_msgSend(v7, "sharedHomeUpdateHandler");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    if ((objc_msgSend(v15, "pendingRequestDataFromResident") & 1) != 0)
    {
      objc_msgSend(v7, "sharedHomeSourceVersion");
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      v17 = objc_msgSend(v9, "isGreaterThanVersion:", v16);

      if (v17)
      {
        v18 = objc_msgSend(v8, "configurationVersion");
        if (v18 < objc_msgSend(v7, "configurationVersion"))
        {
          v10 = (void *)MEMORY[0x227676638]();
          HMFGetOSLogHandle();
          v11 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
          {
            HMFGetLogIdentifier();
            v19 = (void *)objc_claimAutoreleasedReturnValue();
            v30 = 138543874;
            v31 = v19;
            v32 = 2048;
            v33 = objc_msgSend(v7, "configurationVersion");
            v34 = 2048;
            v35 = objc_msgSend(v8, "configurationVersion");
            v20 = "%{public}@Pending request data from resident is active, Local home is at version %ld and incoming home"
                  " version is at %ld, discarding changes and sending ack";
LABEL_24:
            v27 = v11;
            v28 = 32;
            goto LABEL_25;
          }
          goto LABEL_26;
        }
        goto LABEL_16;
      }
    }
    else
    {

    }
    v23 = objc_msgSend(v8, "configurationVersion");
    if (v23 <= objc_msgSend(v7, "configurationVersion"))
    {
      v10 = (void *)MEMORY[0x227676638]();
      HMFGetOSLogHandle();
      v11 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v19 = (void *)objc_claimAutoreleasedReturnValue();
        v30 = 138543874;
        v31 = v19;
        v32 = 2048;
        v33 = objc_msgSend(v7, "configurationVersion");
        v34 = 2048;
        v35 = objc_msgSend(v8, "configurationVersion");
        v20 = "%{public}@Local home is at version %ld and incoming home version is at %ld, discarding changes and sending ack";
        goto LABEL_24;
      }
LABEL_26:
      v12 = 0;
      goto LABEL_30;
    }
LABEL_16:
    if (v9)
    {
      v24 = -[HMDHomeKitVersion initWithVersionString:]([HMDHomeKitVersion alloc], "initWithVersionString:", CFSTR("3.1"));
      if (objc_msgSend(v9, "isAtLeastVersion:", v24) && objc_msgSend(v7, "expectedConfigurationVersion"))
      {
        v25 = objc_msgSend(v7, "expectedConfigurationVersion");
        v26 = objc_msgSend(v8, "configurationVersion");

        if (v25 > v26)
        {
          v10 = (void *)MEMORY[0x227676638]();
          HMFGetOSLogHandle();
          v11 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
          {
            HMFGetLogIdentifier();
            v19 = (void *)objc_claimAutoreleasedReturnValue();
            v30 = 138544130;
            v31 = v19;
            v32 = 2048;
            v33 = objc_msgSend(v7, "configurationVersion");
            v34 = 2048;
            v35 = objc_msgSend(v7, "expectedConfigurationVersion");
            v36 = 2048;
            v37 = objc_msgSend(v8, "configurationVersion");
            v20 = "%{public}@Local is config version is at %ld and expected config version %ld and incoming home config v"
                  "ersion is at %ld, discarding changes and sending ack";
            v27 = v11;
            v28 = 42;
LABEL_25:
            _os_log_impl(&dword_2218F0000, v27, OS_LOG_TYPE_INFO, v20, (uint8_t *)&v30, v28);

            goto LABEL_26;
          }
          goto LABEL_26;
        }
      }
      else
      {

      }
    }
    v10 = (void *)MEMORY[0x227676638]();
    HMFGetOSLogHandle();
    v11 = objc_claimAutoreleasedReturnValue();
    v12 = 1;
    if (!os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
      goto LABEL_30;
    HMFGetLogIdentifier();
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    v30 = 138544130;
    v31 = v13;
    v32 = 2048;
    v33 = objc_msgSend(v7, "configurationVersion");
    v34 = 2048;
    v35 = objc_msgSend(v7, "expectedConfigurationVersion");
    v36 = 2048;
    v37 = objc_msgSend(v8, "configurationVersion");
    v14 = "%{public}@Local is config version is at %ld and expected config version %ld and incoming home config version i"
          "s at %ld, accepting new changes";
    v12 = 1;
    v21 = v11;
    v22 = 42;
    goto LABEL_13;
  }
  v10 = (void *)MEMORY[0x227676638]();
  HMFGetOSLogHandle();
  v11 = objc_claimAutoreleasedReturnValue();
  v12 = 1;
  if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    v30 = 138543362;
    v31 = v13;
    v14 = "%{public}@Receiving a new shared home";
    goto LABEL_12;
  }
LABEL_30:

  objc_autoreleasePoolPop(v10);
  return v12;
}

- (void)_handleHomeDataSync:(id)a3
{
  id v4;
  void *v5;
  BOOL v6;
  id v7;
  void *v8;
  id v9;
  void *v10;
  void *v11;
  uint64_t v12;
  void *v13;
  void *v14;
  void *v15;
  HMDHomeManager *v16;
  NSObject *v17;
  void *v18;
  void *v19;
  id v20;
  void *v21;
  id v22;
  void *v23;
  HMDHomeManager *v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t i;
  void *v30;
  void *v31;
  HMDHomeManager *v32;
  NSObject *v33;
  void *v34;
  void *v35;
  uint64_t v36;
  void *v37;
  void *v38;
  void *v39;
  int v40;
  void *v41;
  void *v42;
  id v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  uint64_t v47;
  void *v48;
  void *v49;
  void *v50;
  int v51;
  id v52;
  void *v53;
  HMDHomeManager *v54;
  NSObject *v55;
  void *v56;
  void *v57;
  void *v58;
  NSObject *v59;
  void *v60;
  void *v61;
  void *v62;
  void (**v63)(_QWORD, _QWORD, _QWORD);
  void *v64;
  void *v65;
  void *v66;
  void *v67;
  HMDHomeManager *v68;
  NSObject *v69;
  void *v70;
  void *v71;
  id v72;
  char v73;
  int v74;
  void *v75;
  HMDHomeManager *v76;
  NSObject *v77;
  _BOOL4 v78;
  void *v79;
  void *v80;
  id v81;
  id v82;
  id v83;
  void *v84;
  HMDHomeManager *v85;
  NSObject *v86;
  NSObject *v87;
  void *v88;
  void *v89;
  void *v90;
  int v91;
  void *v92;
  void *v93;
  void *v94;
  int v95;
  void *v96;
  void *v97;
  int v98;
  void *v99;
  HMDHomeManager *v100;
  NSObject *v101;
  void *v102;
  void *v103;
  void *v104;
  void *v105;
  id v106;
  char v107;
  void *v108;
  void *v109;
  HMDHomeManager *v110;
  NSObject *v111;
  void *v112;
  HMDSharedHomeModel *v113;
  void *v114;
  HMDHomeManager *v115;
  NSObject *v116;
  void *v117;
  void *v118;
  void *v119;
  void (**v120)(_QWORD, _QWORD, _QWORD);
  void *v121;
  void *v122;
  int v123;
  void *v124;
  HMDHomeManager *v125;
  NSObject *v126;
  void *v127;
  void *v128;
  void *v129;
  void *v130;
  void *v131;
  void *v132;
  void *v133;
  id v134;
  void *v135;
  void *v136;
  void *v137;
  HMDHomeManager *v138;
  NSObject *v139;
  void *v140;
  void *v141;
  void *v142;
  HMDSharedHomeModel *v143;
  void *v144;
  void *v145;
  void *v146;
  void *v147;
  uint64_t v148;
  void *v149;
  void *v150;
  id v151;
  id v152;
  void *v153;
  id v154;
  uint64_t v155;
  void *v156;
  void *v157;
  void *v158;
  uint64_t v159;
  void *v160;
  id v161;
  id v162;
  id v163;
  void *v164;
  id obj;
  id obja;
  HMDHomeManager *v167;
  void *v168;
  id v169;
  id v170;
  id v171;
  __int128 v172;
  __int128 v173;
  __int128 v174;
  __int128 v175;
  __int128 v176;
  __int128 v177;
  __int128 v178;
  __int128 v179;
  const __CFString *v180;
  uint64_t v181;
  const __CFString *v182;
  uint64_t v183;
  _QWORD v184[7];
  uint8_t v185[4];
  void *v186;
  __int16 v187;
  void *v188;
  uint8_t v189[4];
  void *v190;
  __int16 v191;
  id v192;
  __int16 v193;
  void *v194;
  uint8_t buf[4];
  void *v196;
  __int16 v197;
  id v198;
  __int16 v199;
  id v200;
  __int16 v201;
  id v202;
  __int16 v203;
  void *v204;
  __int16 v205;
  void *v206;
  __int16 v207;
  void *v208;
  uint64_t v209;

  v209 = *MEMORY[0x24BDAC8D0];
  v4 = a3;
  v5 = (void *)MEMORY[0x227676638]();
  v171 = 0;
  v6 = -[HMDHomeManager _shouldDecodeMessage:error:](self, "_shouldDecodeMessage:error:", v4, &v171);
  v7 = v171;
  if (v6)
  {
    objc_msgSend(v4, "dataForKey:", CFSTR("kHomeDataKey"));
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    if (!v8)
    {
      v58 = (void *)MEMORY[0x227676638]();
      HMFGetOSLogHandle();
      v59 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v59, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v60 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543362;
        v196 = v60;
        _os_log_impl(&dword_2218F0000, v59, OS_LOG_TYPE_ERROR, "%{public}@Failed to receive home data", buf, 0xCu);

      }
      objc_autoreleasePoolPop(v58);
      objc_msgSend(v4, "responseHandler");
      v61 = (void *)objc_claimAutoreleasedReturnValue();

      if (!v61)
        goto LABEL_96;
      objc_msgSend(MEMORY[0x24BDD1540], "hmErrorWithCode:", 2);
      v62 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "responseHandler");
      v63 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
      ((void (**)(_QWORD, void *, _QWORD))v63)[2](v63, v62, 0);
LABEL_95:

LABEL_96:
      goto LABEL_97;
    }
    v160 = v5;
    v159 = objc_msgSend(objc_alloc(MEMORY[0x24BE3F200]), "initWithName:", CFSTR("com.apple.homed.handle-home-sync"));
    objc_msgSend(v8, "hmd_uncompressedData");
    v9 = (id)objc_claimAutoreleasedReturnValue();
    if (!v9)
      v9 = v8;
    v10 = (void *)MEMORY[0x24BDBCF20];
    v184[0] = objc_opt_class();
    v184[1] = objc_opt_class();
    v184[2] = objc_opt_class();
    v184[3] = objc_opt_class();
    v184[4] = objc_opt_class();
    v184[5] = objc_opt_class();
    v184[6] = objc_opt_class();
    objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", v184, 7);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "setWithArray:", v11);
    v12 = objc_claimAutoreleasedReturnValue();

    v170 = 0;
    v13 = (void *)objc_msgSend(objc_alloc(MEMORY[0x24BDD1620]), "initForReadingFromData:error:", v9, &v170);
    v162 = v170;
    objc_msgSend(v13, "_allowDecodingCyclesInSecureMode");
    v157 = v13;
    v158 = (void *)v12;
    objc_msgSend(v13, "decodeObjectOfClasses:forKey:", v12, *MEMORY[0x24BDD0E88]);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    if (!v14)
    {
      v15 = (void *)MEMORY[0x227676638]();
      v16 = self;
      HMFGetOSLogHandle();
      v17 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v18 = v8;
        v19 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        v196 = v19;
        v197 = 2112;
        v198 = v162;
        _os_log_impl(&dword_2218F0000, v17, OS_LOG_TYPE_ERROR, "%{public}@Failed to unarchive home from uncompressed data: %@", buf, 0x16u);

        v8 = v18;
      }

      objc_autoreleasePoolPop(v15);
    }
    v161 = v9;
    v20 = v14;
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
      v21 = v20;
    else
      v21 = 0;
    v22 = v21;

    v156 = v22;
    objc_msgSend(v22, "objectForKeyedSubscript:", CFSTR("kHomeDataBlobKey"));
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v23, "_removeCorruptAccessories");
    v182 = CFSTR("kDataSyncResponseAckKey");
    v183 = MEMORY[0x24BDBD1C8];
    objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", &v183, &v182, 1);
    v155 = objc_claimAutoreleasedReturnValue();
    if (!v23)
      goto LABEL_87;
    v154 = v20;
    v150 = v8;
    v151 = v7;
    v24 = self;
    v153 = v23;
    v25 = v23;
    v152 = v4;
    v163 = v4;
    v167 = v24;
    v169 = v25;
    v176 = 0u;
    v177 = 0u;
    v178 = 0u;
    v179 = 0u;
    -[HMDHomeManager homes](v167, "homes");
    obj = (id)objc_claimAutoreleasedReturnValue();
    v26 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v176, buf, 16);
    if (v26)
    {
      v27 = v26;
      v28 = *(_QWORD *)v177;
      while (2)
      {
        for (i = 0; i != v27; ++i)
        {
          if (*(_QWORD *)v177 != v28)
            objc_enumerationMutation(obj);
          v30 = *(void **)(*((_QWORD *)&v176 + 1) + 8 * i);
          v31 = (void *)MEMORY[0x227676638]();
          v32 = v167;
          HMFGetOSLogHandle();
          v33 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v33, OS_LOG_TYPE_DEBUG))
          {
            HMFGetLogIdentifier();
            v34 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v169, "uuid");
            v35 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)v189 = 138543874;
            v190 = v34;
            v191 = 2112;
            v192 = v35;
            v193 = 2112;
            v194 = v30;
            _os_log_impl(&dword_2218F0000, v33, OS_LOG_TYPE_DEBUG, "%{public}@Looking for home uuid %@, currentHome:  %@", v189, 0x20u);

          }
          objc_autoreleasePoolPop(v31);
          objc_msgSend(v30, "uuid");
          v36 = objc_claimAutoreleasedReturnValue();
          if (v36)
          {
            v37 = (void *)v36;
            objc_msgSend(v30, "uuid");
            v38 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v169, "uuid");
            v39 = (void *)objc_claimAutoreleasedReturnValue();
            v40 = objc_msgSend(v38, "hmf_isEqualToUUID:", v39);

            if (v40)
            {
              objc_msgSend(v30, "owner");
              v64 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v64, "pairingIdentity");
              v52 = (id)objc_claimAutoreleasedReturnValue();

              objc_msgSend(v30, "owner");
              v65 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v65, "account");
              v66 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v66, "senderCorrelationIdentifier");
              v43 = (id)objc_claimAutoreleasedReturnValue();

              v67 = (void *)MEMORY[0x227676638]();
              v68 = v32;
              HMFGetOSLogHandle();
              v69 = objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v69, OS_LOG_TYPE_DEBUG))
              {
                HMFGetLogIdentifier();
                v70 = (void *)objc_claimAutoreleasedReturnValue();
                *(_DWORD *)v189 = 138543618;
                v190 = v70;
                v191 = 2112;
                v192 = v43;
                _os_log_impl(&dword_2218F0000, v69, OS_LOG_TYPE_DEBUG, "%{public}@Found current home account mergeID %@", v189, 0x16u);

              }
              objc_autoreleasePoolPop(v67);
              objc_msgSend(v30, "owner");
              v71 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v71, "account");
              v72 = (id)objc_claimAutoreleasedReturnValue();

LABEL_44:
              v73 = 1;
              goto LABEL_53;
            }
          }
        }
        v27 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v176, buf, 16);
        if (v27)
          continue;
        break;
      }
    }

    v174 = 0u;
    v175 = 0u;
    v172 = 0u;
    v173 = 0u;
    -[HMDHomeManager incomingInvitations](v167, "incomingInvitations");
    v41 = (void *)objc_claimAutoreleasedReturnValue();
    v42 = (void *)objc_msgSend(v41, "copy");

    obj = v42;
    v43 = (id)objc_msgSend(v42, "countByEnumeratingWithState:objects:count:", &v172, v189, 16);
    if (v43)
    {
      v44 = *(_QWORD *)v173;
LABEL_26:
      v45 = 0;
      while (1)
      {
        if (*(_QWORD *)v173 != v44)
          objc_enumerationMutation(obj);
        v46 = *(void **)(*((_QWORD *)&v172 + 1) + 8 * v45);
        objc_msgSend(v46, "homeUUID", v150);
        v47 = objc_claimAutoreleasedReturnValue();
        if (v47)
        {
          v48 = (void *)v47;
          objc_msgSend(v46, "homeUUID");
          v49 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v169, "uuid");
          v50 = (void *)objc_claimAutoreleasedReturnValue();
          v51 = objc_msgSend(v49, "hmf_isEqualToUUID:", v50);

          if (v51)
            break;
        }
        if (v43 == (id)++v45)
        {
          v43 = (id)objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v172, v189, 16);
          if (v43)
            goto LABEL_26;
          goto LABEL_33;
        }
      }
      v74 = objc_msgSend(v46, "isAccepted");
      v75 = (void *)MEMORY[0x227676638]();
      v76 = v167;
      HMFGetOSLogHandle();
      v77 = objc_claimAutoreleasedReturnValue();
      v78 = os_log_type_enabled(v77, OS_LOG_TYPE_INFO);
      if (v74)
      {
        if (v78)
        {
          HMFGetLogIdentifier();
          v79 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)v185 = 138543618;
          v186 = v79;
          v187 = 2112;
          v188 = v46;
          _os_log_impl(&dword_2218F0000, v77, OS_LOG_TYPE_INFO, "%{public}@Received home sync for invitation: %@", v185, 0x16u);

        }
        objc_autoreleasePoolPop(v75);
        objc_msgSend(v46, "inviterIdentity");
        v52 = (id)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v46, "inviterAccount");
        v72 = (id)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v46, "inviterMergeID");
        v43 = (id)objc_claimAutoreleasedReturnValue();
        goto LABEL_44;
      }
      if (v78)
      {
        HMFGetLogIdentifier();
        v80 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)v185 = 138543618;
        v186 = v80;
        v187 = 2112;
        v188 = v46;
        _os_log_impl(&dword_2218F0000, v77, OS_LOG_TYPE_INFO, "%{public}@Received home sync for unaccepted invitation: %@", v185, 0x16u);

      }
      objc_autoreleasePoolPop(v75);
      v52 = 0;
      v43 = 0;
    }
    else
    {
LABEL_33:
      v52 = 0;
    }
    v72 = 0;
    v73 = 0;
LABEL_53:

    v81 = v52;
    v82 = v43;
    v83 = v72;
    v84 = (void *)MEMORY[0x227676638]();
    v85 = v167;
    HMFGetOSLogHandle();
    v86 = objc_claimAutoreleasedReturnValue();
    v87 = v86;
    if ((v73 & 1) != 0)
    {
      if (os_log_type_enabled(v86, OS_LOG_TYPE_DEBUG))
      {
        HMFGetLogIdentifier();
        v88 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138544130;
        v196 = v88;
        v197 = 2112;
        v198 = v163;
        v199 = 2112;
        v200 = v81;
        v201 = 2112;
        v202 = v82;
        _os_log_impl(&dword_2218F0000, v87, OS_LOG_TYPE_DEBUG, "%{public}@Found owner identity, checking message: %@, against pairing identity: %@, mergeID: %@", buf, 0x2Au);

      }
      objc_autoreleasePoolPop(v84);
      objc_msgSend(v163, "remoteSenderContext");
      v89 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v89, "mergeID");
      v90 = (void *)objc_claimAutoreleasedReturnValue();
      v91 = objc_msgSend(v82, "isEqualToString:", v90);

      objc_msgSend(v81, "identifier");
      v92 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v163, "remoteSenderContext");
      v93 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v93, "pairingIdentityIdentifier");
      v94 = (void *)objc_claimAutoreleasedReturnValue();
      v95 = v91 | objc_msgSend(v92, "isEqualToString:", v94);

      if (objc_msgSend(v83, "isAuthenticated"))
      {
        objc_msgSend(v163, "remoteSourceDevice");
        v96 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v96, "account");
        v97 = (void *)objc_claimAutoreleasedReturnValue();
        v98 = objc_msgSend(v83, "isEqual:", v97);

        if ((v98 & v95 & 1) == 0)
        {
LABEL_58:
          v99 = (void *)MEMORY[0x227676638]();
          v100 = v85;
          HMFGetOSLogHandle();
          v101 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v101, OS_LOG_TYPE_ERROR))
          {
            HMFGetLogIdentifier();
            obja = v81;
            v102 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v83, "isAuthenticated");
            HMFBooleanToString();
            v164 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v163, "remoteSourceDevice");
            v168 = v99;
            v103 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v103, "account");
            v104 = (void *)objc_claimAutoreleasedReturnValue();
            HMFBooleanToString();
            v105 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 138544898;
            v196 = v102;
            v197 = 2112;
            v198 = v169;
            v199 = 2112;
            v200 = v163;
            v201 = 2112;
            v202 = v83;
            v203 = 2112;
            v204 = v164;
            v205 = 2112;
            v206 = v104;
            v207 = 2112;
            v208 = v105;
            _os_log_impl(&dword_2218F0000, v101, OS_LOG_TYPE_ERROR, "%{public}@Received unexpected home data sync for home: %@, message: %@, ownerAccount: %@, ownerAccount.isAuthenticated: %@, sourceDevice.account: %@, isValidOwnerAccountIdentity: %@", buf, 0x48u);

            v99 = v168;
            v81 = obja;
          }

          objc_autoreleasePoolPop(v99);
          objc_msgSend(MEMORY[0x24BDD1540], "hmErrorWithCode:", 17);
          v106 = (id)objc_claimAutoreleasedReturnValue();
          v107 = 0;
          v8 = v150;
          goto LABEL_68;
        }
      }
      else if ((v95 & 1) == 0)
      {
        goto LABEL_58;
      }
      v109 = (void *)MEMORY[0x227676638]();
      v110 = v85;
      HMFGetOSLogHandle();
      v111 = objc_claimAutoreleasedReturnValue();
      v8 = v150;
      if (os_log_type_enabled(v111, OS_LOG_TYPE_DEBUG))
      {
        HMFGetLogIdentifier();
        v112 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        v196 = v112;
        v197 = 2112;
        v198 = v163;
        _os_log_impl(&dword_2218F0000, v111, OS_LOG_TYPE_DEBUG, "%{public}@Accepting home data sync: %@", buf, 0x16u);

      }
      objc_autoreleasePoolPop(v109);
      v106 = 0;
      v107 = 1;
    }
    else
    {
      v8 = v150;
      if (os_log_type_enabled(v86, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v108 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        v196 = v108;
        v197 = 2112;
        v198 = v169;
        _os_log_impl(&dword_2218F0000, v87, OS_LOG_TYPE_ERROR, "%{public}@Unable to determine current owner of home: %@", buf, 0x16u);

      }
      objc_autoreleasePoolPop(v84);
      objc_msgSend(MEMORY[0x24BDD1540], "hmErrorWithCode:", 2);
      v106 = (id)objc_claimAutoreleasedReturnValue();
      v107 = 0;
    }
LABEL_68:

    v113 = (HMDSharedHomeModel *)v106;
    if ((v107 & 1) != 0)
    {
      v7 = v151;
      v4 = v152;
      if (objc_msgSend(v169, "isOwnerUser"))
      {
        v114 = (void *)MEMORY[0x227676638]();
        v115 = v85;
        HMFGetOSLogHandle();
        v116 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v116, OS_LOG_TYPE_INFO))
        {
          HMFGetLogIdentifier();
          v117 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543618;
          v196 = v117;
          v197 = 2112;
          v198 = v169;
          _os_log_impl(&dword_2218F0000, v116, OS_LOG_TYPE_INFO, "%{public}@Dropping remote home sync to owner: %@", buf, 0x16u);

        }
        objc_autoreleasePoolPop(v114);
        objc_msgSend(v163, "responseHandler");
        v118 = (void *)objc_claimAutoreleasedReturnValue();

        v5 = v160;
        v63 = (void (**)(_QWORD, _QWORD, _QWORD))v161;
        v23 = v153;
        v119 = (void *)v155;
        if (!v118)
          goto LABEL_92;
        objc_msgSend(v163, "responseHandler");
        v120 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
        v120[2](v120, 0, v155);
LABEL_91:

LABEL_92:
        v20 = v154;
        goto LABEL_93;
      }
      objc_msgSend(v169, "uuid");
      v130 = (void *)objc_claimAutoreleasedReturnValue();
      -[HMDHomeManager _homeWithUUID:](v85, "_homeWithUUID:", v130);
      v131 = (void *)objc_claimAutoreleasedReturnValue();

      objc_msgSend(v163, "destination");
      v132 = (void *)objc_claimAutoreleasedReturnValue();
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0)
        v133 = v132;
      else
        v133 = 0;
      v134 = v133;

      objc_msgSend(v134, "device");
      v135 = (void *)objc_claimAutoreleasedReturnValue();

      objc_msgSend(v135, "version");
      v136 = (void *)objc_claimAutoreleasedReturnValue();

      LODWORD(v135) = -[HMDHomeManager _shouldHandleHomeDataSync:remoteHome:sourceDeviceVersion:](v85, "_shouldHandleHomeDataSync:remoteHome:sourceDeviceVersion:", v131, v169, v136);
      v23 = v153;
      v20 = v154;
      if (!(_DWORD)v135)
      {
LABEL_87:
        objc_msgSend(v4, "responseHandler", v150);
        v141 = (void *)objc_claimAutoreleasedReturnValue();

        v5 = v160;
        v63 = (void (**)(_QWORD, _QWORD, _QWORD))v161;
        v119 = (void *)v155;
        if (!v141)
        {
LABEL_94:

          v62 = (void *)v159;
          goto LABEL_95;
        }
        objc_msgSend(v4, "responseHandler");
        v113 = (HMDSharedHomeModel *)objc_claimAutoreleasedReturnValue();
        (*(void (**)(HMDSharedHomeModel *, _QWORD, uint64_t))&v113->super._bsoDataVersionOverride)(v113, 0, v155);
LABEL_93:

        goto LABEL_94;
      }
      if ((objc_msgSend(v169, "isOwnerUser") & 1) != 0)
      {
        v137 = (void *)MEMORY[0x227676638]();
        v138 = v85;
        HMFGetOSLogHandle();
        v139 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v139, OS_LOG_TYPE_ERROR))
        {
          HMFGetLogIdentifier();
          v140 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543618;
          v196 = v140;
          v197 = 2112;
          v198 = v169;
          _os_log_impl(&dword_2218F0000, v139, OS_LOG_TYPE_ERROR, "%{public}@Received unexpected home data sync for owned home %@", buf, 0x16u);

        }
        objc_autoreleasePoolPop(v137);
        v23 = v153;
        v20 = v154;
        goto LABEL_87;
      }
      v143 = [HMDSharedHomeModel alloc];
      objc_msgSend(v169, "uuid");
      v144 = (void *)objc_claimAutoreleasedReturnValue();
      -[HMDHomeManager uuid](v85, "uuid");
      v145 = (void *)objc_claimAutoreleasedReturnValue();
      v113 = -[HMDBackingStoreModelObject initWithObjectChangeType:uuid:parentUUID:](v143, "initWithObjectChangeType:uuid:parentUUID:", 1, v144, v145);

      -[HMDSharedHomeModel setHomeData:](v113, "setHomeData:", v161);
      objc_msgSend(MEMORY[0x24BDD16E0], "numberWithInteger:", objc_msgSend(v169, "configurationVersion"));
      v146 = (void *)objc_claimAutoreleasedReturnValue();
      -[HMDSharedHomeModel setConfigurationVersion:](v113, "setConfigurationVersion:", v146);

      -[HMDHomeManager homes](v85, "homes");
      v147 = (void *)objc_claimAutoreleasedReturnValue();
      v148 = objc_msgSend(v147, "count");

      if (!v148)
      {
        objc_msgSend(v169, "uuid");
        v149 = (void *)objc_claimAutoreleasedReturnValue();
        -[HMDHomeManager setPrimaryHomeUUID:](v85, "setPrimaryHomeUUID:", v149);

      }
      -[HMDHomeManager transactionObjectUpdated:newValues:message:](v85, "transactionObjectUpdated:newValues:message:", 0, v113, v163, v150);
      v5 = v160;
      v63 = (void (**)(_QWORD, _QWORD, _QWORD))v161;
    }
    else
    {
      -[HMDHomeManager uuidsOfRemovedHomes](v85, "uuidsOfRemovedHomes");
      v121 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v169, "uuid");
      v122 = (void *)objc_claimAutoreleasedReturnValue();
      v123 = objc_msgSend(v121, "containsObject:", v122);

      v7 = v151;
      v4 = v152;
      v5 = v160;
      if (v123)
      {
        v124 = (void *)MEMORY[0x227676638]();
        v125 = v85;
        HMFGetOSLogHandle();
        v126 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v126, OS_LOG_TYPE_INFO))
        {
          HMFGetLogIdentifier();
          v127 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543618;
          v196 = v127;
          v197 = 2112;
          v198 = v169;
          _os_log_impl(&dword_2218F0000, v126, OS_LOG_TYPE_INFO, "%{public}@Rejecting home data sync, home was removed: %@", buf, 0x16u);

        }
        objc_autoreleasePoolPop(v124);
        objc_msgSend(v163, "responseHandler");
        v128 = (void *)objc_claimAutoreleasedReturnValue();

        v63 = (void (**)(_QWORD, _QWORD, _QWORD))v161;
        v23 = v153;
        v119 = (void *)v155;
        if (!v128)
          goto LABEL_92;
        objc_msgSend(v163, "responseHandler");
        v120 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
        v180 = CFSTR("kDataSyncResponseNAckKey");
        v181 = MEMORY[0x24BDBD1C8];
        objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", &v181, &v180, 1);
        v129 = (void *)objc_claimAutoreleasedReturnValue();
        ((void (**)(_QWORD, _QWORD, void *))v120)[2](v120, 0, v129);

        goto LABEL_91;
      }
      objc_msgSend(v163, "responseHandler");
      v142 = (void *)objc_claimAutoreleasedReturnValue();

      if (v142)
      {
        objc_msgSend(v163, "responseHandler");
        v120 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
        ((void (**)(_QWORD, HMDSharedHomeModel *, _QWORD))v120)[2](v120, v113, 0);
        v63 = (void (**)(_QWORD, _QWORD, _QWORD))v161;
        v23 = v153;
        v119 = (void *)v155;
        goto LABEL_91;
      }
      v63 = (void (**)(_QWORD, _QWORD, _QWORD))v161;
    }
    v23 = v153;
    v20 = v154;
    v119 = (void *)v155;
    goto LABEL_93;
  }
  v53 = (void *)MEMORY[0x227676638]();
  v54 = self;
  HMFGetOSLogHandle();
  v55 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v55, OS_LOG_TYPE_ERROR))
  {
    HMFGetLogIdentifier();
    v56 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "remoteUserPairingIdentity");
    v57 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543618;
    v196 = v56;
    v197 = 2112;
    v198 = v57;
    _os_log_impl(&dword_2218F0000, v55, OS_LOG_TYPE_ERROR, "%{public}@Rejecting home data sync - Sync not from trusted account %@", buf, 0x16u);

  }
  objc_autoreleasePoolPop(v53);
  objc_msgSend(v4, "respondWithError:", v7);
LABEL_97:

  objc_autoreleasePoolPop(v5);
}

- (BOOL)_shouldDecodeMessage:(id)a3 error:(id *)a4
{
  id v6;
  void *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t i;
  void *v14;
  void *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  void *v22;
  int v23;
  void *v24;
  int v25;
  BOOL v27;
  void *v28;
  void *v29;
  void *v30;
  HMDHomeManager *v31;
  NSObject *v32;
  id *v35;
  HMDHomeManager *v36;
  void *v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  uint8_t v46[128];
  uint8_t buf[4];
  void *v48;
  __int16 v49;
  void *v50;
  _BYTE v51[128];
  uint64_t v52;

  v52 = *MEMORY[0x24BDAC8D0];
  v6 = a3;
  objc_msgSend(v6, "remoteUserPairingIdentity");
  v37 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "remoteSenderContext");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "mergeID");
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  v44 = 0u;
  v45 = 0u;
  v42 = 0u;
  v43 = 0u;
  v36 = self;
  -[HMDHomeManager homes](self, "homes");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v42, v51, 16);
  if (v10)
  {
    v11 = v10;
    v12 = *(_QWORD *)v43;
    while (2)
    {
      for (i = 0; i != v11; ++i)
      {
        if (*(_QWORD *)v43 != v12)
          objc_enumerationMutation(v9);
        v14 = *(void **)(*((_QWORD *)&v42 + 1) + 8 * i);
        objc_msgSend(v6, "matchingRemoteIdentityUserForHome:", v14);
        v15 = (void *)objc_claimAutoreleasedReturnValue();

        if (v15)
        {
          v30 = (void *)MEMORY[0x227676638]();
          v31 = v36;
          HMFGetOSLogHandle();
          v32 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v32, OS_LOG_TYPE_DEBUG))
          {
            HMFGetLogIdentifier();
            v28 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v14, "name");
            v29 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 138543618;
            v48 = v28;
            v49 = 2112;
            v50 = v29;
            _os_log_impl(&dword_2218F0000, v32, OS_LOG_TYPE_DEBUG, "%{public}@Received home sync from owner of known home %@", buf, 0x16u);

LABEL_27:
          }
          goto LABEL_28;
        }
      }
      v11 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v42, v51, 16);
      if (v11)
        continue;
      break;
    }
  }
  v35 = a4;

  v40 = 0u;
  v41 = 0u;
  v38 = 0u;
  v39 = 0u;
  -[HMDHomeManager incomingInvitations](v36, "incomingInvitations");
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = (void *)objc_msgSend(v16, "copy");

  v17 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v38, v46, 16);
  if (v17)
  {
    v18 = v17;
    v19 = *(_QWORD *)v39;
LABEL_11:
    v20 = 0;
    while (1)
    {
      if (*(_QWORD *)v39 != v19)
        objc_enumerationMutation(v9);
      v21 = *(void **)(*((_QWORD *)&v38 + 1) + 8 * v20);
      objc_msgSend(v21, "inviterIdentity");
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      v23 = objc_msgSend(v22, "isEqual:", v37);

      objc_msgSend(v21, "inviterMergeID");
      v24 = (void *)objc_claimAutoreleasedReturnValue();
      v25 = objc_msgSend(v24, "isEqual:", v8);

      if (objc_msgSend(v21, "isAccepted") && (v23 | v25) != 0)
        break;
      if (v18 == ++v20)
      {
        v18 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v38, v46, 16);
        if (v18)
          goto LABEL_11;
        goto LABEL_21;
      }
    }
    v30 = (void *)MEMORY[0x227676638]();
    v31 = v36;
    HMFGetOSLogHandle();
    v32 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v32, OS_LOG_TYPE_DEBUG))
    {
      HMFGetLogIdentifier();
      v28 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v48 = v28;
      v49 = 2112;
      v50 = v21;
      _os_log_impl(&dword_2218F0000, v32, OS_LOG_TYPE_DEBUG, "%{public}@Received home sync from accepted invitation %@", buf, 0x16u);
      goto LABEL_27;
    }
LABEL_28:

    objc_autoreleasePoolPop(v30);
    v27 = 1;
  }
  else
  {
LABEL_21:

    if (v35)
    {
      objc_msgSend(MEMORY[0x24BDD1540], "hmErrorWithCode:", 17);
      v27 = 0;
      *v35 = (id)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      v27 = 0;
    }
  }

  return v27;
}

- (id)_loadCloudTransactionForRemoteHome:(id)a3 localHome:(id)a4 cachedHome:(id)a5 version:(int64_t)a6
{
  id v9;
  id v10;
  id v11;
  void *v12;
  void *v13;
  NSObject *v14;
  void *v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  void *v19;
  id v20;
  void *v21;
  id v22;
  void *v23;
  void *v24;
  HMDUserModel *v25;
  HMDUserModel *v26;
  HMDUserModel *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t j;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  uint64_t v36;
  void *v37;
  HMDUserModel *v38;
  void *v39;
  int v40;
  void *v41;
  void *v42;
  NSObject *v43;
  void *v44;
  objc_class *v45;
  void *v46;
  HMDUserModel *v47;
  void *v48;
  void *v49;
  HMDUserModel *v50;
  HMDUserModel *v51;
  HMDUserModel *v52;
  void *v53;
  uint64_t v54;
  HMDUserModel *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t i;
  void *v59;
  void *v60;
  void *v61;
  void *v62;
  int v63;
  HMDUserModel *v64;
  void *v65;
  uint64_t v66;
  void *v67;
  void *v68;
  id v69;
  void *v70;
  void *v71;
  NSObject *v72;
  void *v73;
  objc_class *v74;
  void *v75;
  HMDUserModel *v76;
  void *v77;
  NSObject *v78;
  void *v79;
  HMDUserModel *v80;
  void *v81;
  uint64_t v82;
  void *v83;
  void *v84;
  HMDUserModel *v85;
  id v86;
  HMDUserModel *v87;
  void *v88;
  objc_class *v89;
  void *v90;
  HMDUserModel *v91;
  uint64_t v92;
  uint64_t k;
  void *v94;
  id v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  void *v100;
  void *v101;
  void *v102;
  char v103;
  id v104;
  id v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  void *v110;
  void *v111;
  void *v112;
  char v113;
  void *v114;
  HMDHomeManager *v115;
  NSObject *v116;
  void *v117;
  HMDUserModel *v118;
  void *v119;
  HMDUserModel *v120;
  void *v121;
  HMDHomeManager *v122;
  NSObject *v123;
  void *v124;
  void *v125;
  HMDHomeManager *v126;
  NSObject *v127;
  void *v128;
  id v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t m;
  void *v134;
  void *v135;
  HMDHomeManager *v136;
  NSObject *v137;
  void *v138;
  void *v140;
  void *v141;
  void *v142;
  HMDUserModel *v143;
  void *v144;
  void *v145;
  void *v146;
  int64_t v147;
  void *v148;
  uint64_t v149;
  id v150;
  id v151;
  id obj;
  id obja;
  id v154;
  id v155;
  uint64_t v156;
  void *v157;
  void *v159;
  uint64_t v160;
  id v161;
  HMDUserModel *v162;
  id v163;
  __int128 v164;
  __int128 v165;
  __int128 v166;
  __int128 v167;
  id v168;
  id v169;
  __int128 v170;
  __int128 v171;
  __int128 v172;
  __int128 v173;
  __int128 v174;
  __int128 v175;
  __int128 v176;
  __int128 v177;
  __int128 v178;
  __int128 v179;
  __int128 v180;
  __int128 v181;
  __int128 v182;
  __int128 v183;
  __int128 v184;
  __int128 v185;
  __int128 v186;
  __int128 v187;
  __int128 v188;
  __int128 v189;
  __int128 v190;
  __int128 v191;
  __int128 v192;
  __int128 v193;
  _BYTE v194[128];
  _BYTE v195[128];
  _BYTE v196[128];
  _BYTE v197[128];
  _BYTE v198[128];
  uint8_t v199[128];
  uint8_t buf[4];
  void *v201;
  __int16 v202;
  int64_t v203;
  __int16 v204;
  HMDUserModel *v205;
  __int16 v206;
  void *v207;
  _BYTE v208[128];
  uint64_t v209;

  v209 = *MEMORY[0x24BDAC8D0];
  v9 = a3;
  v10 = a4;
  v11 = a5;
  v144 = v10;
  objc_msgSend(v10, "backingStoreObjects:", a6);
  v140 = (void *)objc_claimAutoreleasedReturnValue();
  v142 = v9;
  objc_msgSend(v9, "backingStoreObjects:", a6);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  v157 = (void *)objc_msgSend(v12, "mutableCopy");

  v141 = v11;
  v147 = a6;
  objc_msgSend(v11, "backingStoreObjects:", a6);
  v148 = (void *)objc_claimAutoreleasedReturnValue();
  v13 = (void *)MEMORY[0x227676638]();
  HMFGetOSLogHandle();
  v14 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543618;
    v201 = v15;
    v202 = 2048;
    v203 = a6;
    _os_log_impl(&dword_2218F0000, v14, OS_LOG_TYPE_INFO, "%{public}@Received data with home-data-version %tu", buf, 0x16u);

  }
  objc_autoreleasePoolPop(v13);
  v192 = 0u;
  v193 = 0u;
  v190 = 0u;
  v191 = 0u;
  obj = (id)objc_msgSend(v157, "copy");
  v16 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v190, v208, 16);
  if (v16)
  {
    v17 = (id)v16;
    v18 = *(_QWORD *)v191;
    v149 = *(_QWORD *)v191;
    do
    {
      v19 = 0;
      v150 = v17;
      do
      {
        if (*(_QWORD *)v191 != v18)
          objc_enumerationMutation(obj);
        v20 = *(id *)(*((_QWORD *)&v190 + 1) + 8 * (_QWORD)v19);
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0)
          v21 = v20;
        else
          v21 = 0;
        v22 = v21;

        if (v22)
        {
          if (!objc_msgSend(v22, "propertyWasSet:", CFSTR("uniqueIdentifier"))
            || (objc_msgSend(v22, "uniqueIdentifier"),
                v23 = (void *)objc_claimAutoreleasedReturnValue(),
                v23,
                !v23))
          {
            v155 = v22;
            v41 = v19;
            v42 = (void *)MEMORY[0x227676638]();
            HMFGetOSLogHandle();
            v43 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v43, OS_LOG_TYPE_INFO))
            {
              HMFGetLogIdentifier();
              v44 = (void *)objc_claimAutoreleasedReturnValue();
              v45 = (objc_class *)objc_opt_class();
              NSStringFromClass(v45);
              v46 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v20, "bsoType");
              v47 = (HMDUserModel *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v20, "uuid");
              v48 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v48, "UUIDString");
              v49 = (void *)objc_claimAutoreleasedReturnValue();
              *(_DWORD *)buf = 138544130;
              v201 = v44;
              v202 = 2112;
              v203 = (int64_t)v46;
              v204 = 2112;
              v205 = v47;
              v206 = 2112;
              v207 = v49;
              _os_log_impl(&dword_2218F0000, v43, OS_LOG_TYPE_INFO, "%{public}@[Legacy Merge] Got %@/%@ object (uuid: %@) from remote that has a null / unset uniqueIdentifier (no way to recover).", buf, 0x2Au);

              v17 = v150;
              v18 = v149;

            }
            objc_autoreleasePoolPop(v42);
            objc_msgSend(v157, "removeObject:", v20);
            v19 = v41;
            goto LABEL_62;
          }
        }
        objc_msgSend(v20, "uuid");
        v24 = (void *)objc_claimAutoreleasedReturnValue();

        if (!v24)
        {
          v155 = v22;
          v50 = (HMDUserModel *)v20;
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) != 0)
            v51 = v50;
          else
            v51 = 0;
          v52 = v51;

          if (v52)
          {
            v184 = 0u;
            v185 = 0u;
            v182 = 0u;
            v183 = 0u;
            objc_msgSend(v144, "users");
            v53 = (void *)objc_claimAutoreleasedReturnValue();
            v54 = objc_msgSend(v53, "countByEnumeratingWithState:objects:count:", &v182, v198, 16);
            v55 = v50;
            if (v54)
            {
              v56 = v54;
              v162 = v50;
              v146 = v19;
              v57 = *(_QWORD *)v183;
              while (2)
              {
                for (i = 0; i != v56; ++i)
                {
                  if (*(_QWORD *)v183 != v57)
                    objc_enumerationMutation(v53);
                  v59 = *(void **)(*((_QWORD *)&v182 + 1) + 8 * i);
                  objc_msgSend(v59, "pairingUsername");
                  v60 = (void *)objc_claimAutoreleasedReturnValue();
                  -[HMDUserModel pairingIdentity](v52, "pairingIdentity");
                  v61 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend(v61, "objectForKey:", CFSTR("HAP.identifier"));
                  v62 = (void *)objc_claimAutoreleasedReturnValue();
                  v63 = objc_msgSend(v60, "isEqual:", v62);

                  if (v63)
                  {
                    v64 = [HMDUserModel alloc];
                    -[HMDBackingStoreModelObject bsoDataVersion](v52, "bsoDataVersion");
                    v65 = (void *)objc_claimAutoreleasedReturnValue();
                    v66 = -[HMDBackingStoreModelObject objectChangeType](v52, "objectChangeType");
                    objc_msgSend(v59, "uuid");
                    v67 = (void *)objc_claimAutoreleasedReturnValue();
                    -[HMDBackingStoreModelObject parentUUID](v52, "parentUUID");
                    v68 = (void *)objc_claimAutoreleasedReturnValue();
                    v55 = -[HMDBackingStoreModelObject initWithVersion:changeType:uuid:parentUUID:](v64, "initWithVersion:changeType:uuid:parentUUID:", v65, v66, v67, v68);

                    v69 = -[HMDBackingStoreModelObject merge:](v55, "merge:", v52);
                    goto LABEL_48;
                  }
                }
                v56 = objc_msgSend(v53, "countByEnumeratingWithState:objects:count:", &v182, v198, 16);
                if (v56)
                  continue;
                break;
              }
              v55 = v52;
LABEL_48:
              v18 = v149;
              v19 = v146;
              v50 = v162;
            }

            -[HMDBackingStoreModelObject uuid](v55, "uuid");
            v70 = (void *)objc_claimAutoreleasedReturnValue();

            v17 = v150;
            if (v70)
              goto LABEL_61;
            v71 = (void *)MEMORY[0x227676638]();
            HMFGetOSLogHandle();
            v72 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v72, OS_LOG_TYPE_INFO))
            {
              HMFGetLogIdentifier();
              v88 = (void *)objc_claimAutoreleasedReturnValue();
              v89 = (objc_class *)objc_opt_class();
              NSStringFromClass(v89);
              v90 = (void *)objc_claimAutoreleasedReturnValue();
              -[HMDBackingStoreModelObject bsoType](v50, "bsoType");
              v91 = (HMDUserModel *)objc_claimAutoreleasedReturnValue();
              *(_DWORD *)buf = 138543874;
              v201 = v88;
              v202 = 2112;
              v203 = (int64_t)v90;
              v204 = 2112;
              v205 = v91;
              _os_log_impl(&dword_2218F0000, v72, OS_LOG_TYPE_INFO, "%{public}@[Legacy Merge] Got %@/%@ object from remote that has a null UUID (tried to match via pairing ID and failed).", buf, 0x20u);

              v18 = v149;
            }
          }
          else
          {
            v71 = (void *)MEMORY[0x227676638]();
            HMFGetOSLogHandle();
            v72 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v72, OS_LOG_TYPE_INFO))
            {
              HMFGetLogIdentifier();
              v73 = (void *)objc_claimAutoreleasedReturnValue();
              v74 = (objc_class *)objc_opt_class();
              NSStringFromClass(v74);
              v75 = (void *)objc_claimAutoreleasedReturnValue();
              -[HMDBackingStoreModelObject bsoType](v50, "bsoType");
              v76 = (HMDUserModel *)objc_claimAutoreleasedReturnValue();
              *(_DWORD *)buf = 138543874;
              v201 = v73;
              v202 = 2112;
              v203 = (int64_t)v75;
              v204 = 2112;
              v205 = v76;
              _os_log_impl(&dword_2218F0000, v72, OS_LOG_TYPE_INFO, "%{public}@[Legacy Merge] Got %@/%@ object from remote that has a null UUID (and no way to recover).", buf, 0x20u);

            }
            v55 = 0;
          }

          objc_autoreleasePoolPop(v71);
          objc_msgSend(v157, "removeObject:", v50);
LABEL_61:

LABEL_62:
          v22 = v155;
          goto LABEL_63;
        }
        if (v147 <= 3)
        {
          v25 = (HMDUserModel *)v20;
          objc_opt_class();
          v26 = (objc_opt_isKindOfClass() & 1) != 0 ? v25 : 0;
          v27 = v26;

          if (v27)
          {
            v188 = 0u;
            v189 = 0u;
            v186 = 0u;
            v187 = 0u;
            objc_msgSend(v144, "users");
            v161 = (id)objc_claimAutoreleasedReturnValue();
            v28 = objc_msgSend(v161, "countByEnumeratingWithState:objects:count:", &v186, v199, 16);
            if (v28)
            {
              v29 = v28;
              v143 = v25;
              v154 = v22;
              v145 = v19;
              v30 = *(_QWORD *)v187;
              while (2)
              {
                for (j = 0; j != v29; ++j)
                {
                  if (*(_QWORD *)v187 != v30)
                    objc_enumerationMutation(v161);
                  v32 = *(void **)(*((_QWORD *)&v186 + 1) + 8 * j);
                  objc_msgSend(v32, "uuid");
                  v33 = (void *)objc_claimAutoreleasedReturnValue();
                  -[HMDBackingStoreModelObject uuid](v27, "uuid");
                  v34 = (void *)objc_claimAutoreleasedReturnValue();
                  if (objc_msgSend(v33, "isEqual:", v34))
                  {

                  }
                  else
                  {
                    objc_msgSend(v32, "pairingUsername");
                    v35 = (void *)objc_claimAutoreleasedReturnValue();
                    -[HMDUserModel pairingIdentity](v27, "pairingIdentity");
                    v159 = v32;
                    v36 = v29;
                    v37 = (void *)objc_claimAutoreleasedReturnValue();
                    objc_msgSend(v37, "objectForKey:", CFSTR("HAP.identifier"));
                    v38 = v27;
                    v39 = (void *)objc_claimAutoreleasedReturnValue();
                    v40 = objc_msgSend(v35, "isEqual:", v39);

                    v27 = v38;
                    v29 = v36;

                    if (v40)
                    {
                      v77 = (void *)MEMORY[0x227676638]();
                      HMFGetOSLogHandle();
                      v78 = objc_claimAutoreleasedReturnValue();
                      if (os_log_type_enabled(v78, OS_LOG_TYPE_INFO))
                      {
                        HMFGetLogIdentifier();
                        v79 = (void *)objc_claimAutoreleasedReturnValue();
                        *(_DWORD *)buf = 138543874;
                        v201 = v79;
                        v202 = 2112;
                        v203 = (int64_t)v159;
                        v204 = 2112;
                        v205 = v38;
                        _os_log_impl(&dword_2218F0000, v78, OS_LOG_TYPE_INFO, "%{public}@Found an existing user %@, MERGING properties from %@", buf, 0x20u);

                      }
                      objc_autoreleasePoolPop(v77);
                      v80 = [HMDUserModel alloc];
                      -[HMDBackingStoreModelObject bsoDataVersion](v38, "bsoDataVersion");
                      v81 = (void *)objc_claimAutoreleasedReturnValue();
                      v82 = -[HMDBackingStoreModelObject objectChangeType](v38, "objectChangeType");
                      objc_msgSend(v159, "uuid");
                      v83 = (void *)objc_claimAutoreleasedReturnValue();
                      -[HMDBackingStoreModelObject parentUUID](v38, "parentUUID");
                      v84 = (void *)objc_claimAutoreleasedReturnValue();
                      v85 = -[HMDBackingStoreModelObject initWithVersion:changeType:uuid:parentUUID:](v80, "initWithVersion:changeType:uuid:parentUUID:", v81, v82, v83, v84);

                      v86 = -[HMDBackingStoreModelObject merge:](v85, "merge:", v38);
                      v87 = v85;

                      objc_msgSend(v157, "removeObject:", v143);
                      objc_msgSend(v157, "addObject:", v87);

                      v25 = v87;
                      goto LABEL_57;
                    }
                  }
                }
                v29 = objc_msgSend(v161, "countByEnumeratingWithState:objects:count:", &v186, v199, 16);
                if (v29)
                  continue;
                break;
              }
              v25 = v27;
LABEL_57:
              v18 = v149;
              v17 = v150;
              v19 = v145;
              v22 = v154;
            }
            else
            {
              v17 = v150;
            }

          }
        }
LABEL_63:

        v19 = (char *)v19 + 1;
      }
      while (v19 != v17);
      v92 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v190, v208, 16);
      v17 = (id)v92;
    }
    while (v92);
  }

  objc_msgSend(MEMORY[0x24BDBCEB8], "arrayWithCapacity:", objc_msgSend(v157, "count") + objc_msgSend(v140, "count"));
  v163 = (id)objc_claimAutoreleasedReturnValue();
  v178 = 0u;
  v179 = 0u;
  v180 = 0u;
  v181 = 0u;
  v151 = v140;
  v160 = objc_msgSend(v151, "countByEnumeratingWithState:objects:count:", &v178, v197, 16);
  if (v160)
  {
    v156 = *(_QWORD *)v179;
    do
    {
      for (k = 0; k != v160; ++k)
      {
        if (*(_QWORD *)v179 != v156)
          objc_enumerationMutation(v151);
        v94 = *(void **)(*((_QWORD *)&v178 + 1) + 8 * k);
        v174 = 0u;
        v175 = 0u;
        v176 = 0u;
        v177 = 0u;
        v95 = v157;
        v96 = objc_msgSend(v95, "countByEnumeratingWithState:objects:count:", &v174, v196, 16);
        if (v96)
        {
          v97 = v96;
          v98 = *(_QWORD *)v175;
LABEL_75:
          v99 = 0;
          while (1)
          {
            if (*(_QWORD *)v175 != v98)
              objc_enumerationMutation(v95);
            v100 = *(void **)(*((_QWORD *)&v174 + 1) + 8 * v99);
            objc_msgSend(v94, "uuid");
            v101 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v100, "uuid");
            v102 = (void *)objc_claimAutoreleasedReturnValue();
            v103 = objc_msgSend(v101, "isEqual:", v102);

            if ((v103 & 1) != 0)
              break;
            if (v97 == ++v99)
            {
              v97 = objc_msgSend(v95, "countByEnumeratingWithState:objects:count:", &v174, v196, 16);
              if (v97)
                goto LABEL_75;
              goto LABEL_81;
            }
          }
          v104 = v100;

          if (!v104)
            goto LABEL_92;
          objc_msgSend(v95, "removeObject:", v104);
          obja = v104;
          objc_msgSend(v104, "setObjectChangeType:", 2);
          v172 = 0u;
          v173 = 0u;
          v170 = 0u;
          v171 = 0u;
          v105 = v148;
          v106 = objc_msgSend(v105, "countByEnumeratingWithState:objects:count:", &v170, v195, 16);
          if (v106)
          {
            v107 = v106;
            v108 = *(_QWORD *)v171;
LABEL_85:
            v109 = 0;
            while (1)
            {
              if (*(_QWORD *)v171 != v108)
                objc_enumerationMutation(v105);
              v110 = *(void **)(*((_QWORD *)&v170 + 1) + 8 * v109);
              objc_msgSend(v94, "uuid");
              v111 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v110, "uuid");
              v112 = (void *)objc_claimAutoreleasedReturnValue();
              v113 = objc_msgSend(v111, "isEqual:", v112);

              if ((v113 & 1) != 0)
                break;
              if (v107 == ++v109)
              {
                v107 = objc_msgSend(v105, "countByEnumeratingWithState:objects:count:", &v170, v195, 16);
                if (v107)
                  goto LABEL_85;
                goto LABEL_91;
              }
            }
            v118 = v110;

            if (!v118)
              goto LABEL_101;
            v169 = 0;
            v119 = obja;
            -[HMDBackingStoreModelObject diff:differingFields:](v118, "diff:differingFields:", obja, &v169);
            v120 = (HMDUserModel *)v169;
            if (-[HMDUserModel count](v120, "count"))
            {
              v121 = (void *)MEMORY[0x227676638]();
              v122 = self;
              HMFGetOSLogHandle();
              v123 = objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v123, OS_LOG_TYPE_INFO))
              {
                HMFGetLogIdentifier();
                v124 = (void *)objc_claimAutoreleasedReturnValue();
                *(_DWORD *)buf = 138543874;
                v201 = v124;
                v202 = 2112;
                v203 = (int64_t)obja;
                v204 = 2112;
                v205 = v120;
                _os_log_impl(&dword_2218F0000, v123, OS_LOG_TYPE_INFO, "%{public}@[Legacy Merge] Object was changed since last push or fetch: object %@ has diff %@", buf, 0x20u);

              }
              objc_autoreleasePoolPop(v121);
              objc_msgSend(v163, "addObject:", obja);
              -[HMDBackingStoreModelObject dumpDebug:](v118, "dumpDebug:", CFSTR("CACHED: "));
              objc_msgSend(obja, "dumpDebug:", CFSTR("REMOTE: "));
            }

          }
          else
          {
LABEL_91:

LABEL_101:
            v168 = 0;
            v119 = obja;
            objc_msgSend(v94, "diff:differingFields:", obja, &v168);
            v118 = (HMDUserModel *)v168;
            if (-[HMDUserModel count](v118, "count"))
            {
              v125 = (void *)MEMORY[0x227676638]();
              v126 = self;
              HMFGetOSLogHandle();
              v127 = objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v127, OS_LOG_TYPE_INFO))
              {
                HMFGetLogIdentifier();
                v128 = (void *)objc_claimAutoreleasedReturnValue();
                *(_DWORD *)buf = 138543874;
                v201 = v128;
                v202 = 2112;
                v203 = (int64_t)obja;
                v204 = 2112;
                v205 = v118;
                _os_log_impl(&dword_2218F0000, v127, OS_LOG_TYPE_INFO, "%{public}@[Legacy Merge] Change from cloud: object %@ has diff %@", buf, 0x20u);

              }
              objc_autoreleasePoolPop(v125);
              objc_msgSend(v163, "addObject:", obja);
              objc_msgSend(v94, "dumpDebug:", CFSTR("LOCAL: "));
              objc_msgSend(obja, "dumpDebug:", CFSTR("REMOTE: "));
            }
          }

        }
        else
        {
LABEL_81:

LABEL_92:
          v114 = (void *)MEMORY[0x227676638]();
          v115 = self;
          HMFGetOSLogHandle();
          v116 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v116, OS_LOG_TYPE_INFO))
          {
            HMFGetLogIdentifier();
            v117 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 138543618;
            v201 = v117;
            v202 = 2112;
            v203 = (int64_t)v94;
            _os_log_impl(&dword_2218F0000, v116, OS_LOG_TYPE_INFO, "%{public}@[Legacy Merge] Change from cloud: local object %@ deleted", buf, 0x16u);

          }
          objc_autoreleasePoolPop(v114);
          objc_msgSend(v94, "setObjectChangeType:", 3);
          objc_msgSend(v163, "addObject:", v94);
          objc_msgSend(v94, "dumpDebug:", CFSTR("LOCAL:"));
        }
      }
      v160 = objc_msgSend(v151, "countByEnumeratingWithState:objects:count:", &v178, v197, 16);
    }
    while (v160);
  }

  v166 = 0u;
  v167 = 0u;
  v164 = 0u;
  v165 = 0u;
  v129 = v157;
  v130 = objc_msgSend(v129, "countByEnumeratingWithState:objects:count:", &v164, v194, 16);
  if (v130)
  {
    v131 = v130;
    v132 = *(_QWORD *)v165;
    do
    {
      for (m = 0; m != v131; ++m)
      {
        if (*(_QWORD *)v165 != v132)
          objc_enumerationMutation(v129);
        v134 = *(void **)(*((_QWORD *)&v164 + 1) + 8 * m);
        v135 = (void *)MEMORY[0x227676638]();
        v136 = self;
        HMFGetOSLogHandle();
        v137 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v137, OS_LOG_TYPE_INFO))
        {
          HMFGetLogIdentifier();
          v138 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543618;
          v201 = v138;
          v202 = 2112;
          v203 = (int64_t)v134;
          _os_log_impl(&dword_2218F0000, v137, OS_LOG_TYPE_INFO, "%{public}@[Legacy Merge] Change from cloud: remote object %@ added", buf, 0x16u);

        }
        objc_autoreleasePoolPop(v135);
        objc_msgSend(v134, "setObjectChangeType:", 1);
        objc_msgSend(v163, "addObject:", v134);
        objc_msgSend(v134, "dumpDebug:", CFSTR("REMOTE: "));
      }
      v131 = objc_msgSend(v129, "countByEnumeratingWithState:objects:count:", &v164, v194, 16);
    }
    while (v131);
  }

  return v163;
}

- (void)processSharedHomeModelUpdate:(id)a3 message:(id)a4
{
  id v6;
  id v7;
  NSObject *v8;
  id v9;
  id v10;
  _QWORD v11[4];
  id v12;
  id v13;
  id v14;
  id location;

  v6 = a3;
  v7 = a4;
  objc_initWeak(&location, self);
  -[HMDHomeManager workQueue](self, "workQueue");
  v8 = objc_claimAutoreleasedReturnValue();
  v11[0] = MEMORY[0x24BDAC760];
  v11[1] = 3221225472;
  v11[2] = __55__HMDHomeManager_processSharedHomeModelUpdate_message___block_invoke;
  v11[3] = &unk_24E7965D0;
  objc_copyWeak(&v14, &location);
  v12 = v6;
  v13 = v7;
  v9 = v7;
  v10 = v6;
  dispatch_async(v8, v11);

  objc_destroyWeak(&v14);
  objc_destroyWeak(&location);
}

- (void)_processSharedHomeModel:(id)a3 message:(id)a4
{
  void *v6;
  void *v7;
  id v8;
  void *v9;
  void *v10;
  id v11;
  uint64_t v12;
  void *v13;
  void *v14;
  HMDHomeManager *v15;
  NSObject *v16;
  void *v17;
  id v18;
  void *v19;
  id v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  uint64_t v25;
  void *v26;
  void *v27;
  id v28;
  id v29;
  void *v30;
  id v31;
  _QWORD v32[4];
  id v33;
  id v34;
  _QWORD *v35;
  id v36;
  id v37;
  id v38;
  _QWORD v39[5];
  id v40;
  uint8_t buf[4];
  void *v42;
  __int16 v43;
  id v44;
  _QWORD v45[10];

  v45[7] = *MEMORY[0x24BDAC8D0];
  v31 = a3;
  v29 = a4;
  v39[0] = 0;
  v39[1] = v39;
  v39[2] = 0x3032000000;
  v39[3] = __Block_byref_object_copy__227383;
  v39[4] = __Block_byref_object_dispose__227384;
  v40 = (id)objc_msgSend(objc_alloc(MEMORY[0x24BE3F200]), "initWithName:", CFSTR("com.apple.homed.handle-home-sync"));
  v6 = (void *)MEMORY[0x24BDBCF20];
  v45[0] = objc_opt_class();
  v45[1] = objc_opt_class();
  v45[2] = objc_opt_class();
  v45[3] = objc_opt_class();
  v45[4] = objc_opt_class();
  v45[5] = objc_opt_class();
  v45[6] = objc_opt_class();
  objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", v45, 7);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "setWithArray:", v7);
  v30 = (void *)objc_claimAutoreleasedReturnValue();

  v8 = objc_alloc(MEMORY[0x24BDD1620]);
  objc_msgSend(v31, "homeData");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v38 = 0;
  v10 = (void *)objc_msgSend(v8, "initForReadingFromData:error:", v9, &v38);
  v11 = v38;

  objc_msgSend(v10, "_allowDecodingCyclesInSecureMode");
  v12 = *MEMORY[0x24BDD0E88];
  v37 = v11;
  objc_msgSend(v10, "decodeTopLevelObjectOfClasses:forKey:error:", v30, v12, &v37);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  v28 = v37;

  if (!v13)
  {
    v14 = (void *)MEMORY[0x227676638]();
    v15 = self;
    HMFGetOSLogHandle();
    v16 = (id)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v42 = v17;
      v43 = 2112;
      v44 = v28;
      _os_log_impl(&dword_2218F0000, v16, OS_LOG_TYPE_ERROR, "%{public}@Failed to unarchive home from shared home model's home data: %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v14);
  }
  v18 = v13;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v19 = v18;
  else
    v19 = 0;
  v20 = v19;

  objc_msgSend(v20, "objectForKeyedSubscript:", CFSTR("kHomeDataBlobKey"));
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v20, "objectForKeyedSubscript:", CFSTR("kAccessoriesDataBlobKey"));
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v20, "hmf_numberForKey:", CFSTR("kHomeDataVersionKey"));
  v23 = (void *)objc_claimAutoreleasedReturnValue();
  v24 = v23;
  if (v23)
  {
    v25 = objc_msgSend(v23, "integerValue");
    if (!v21)
      goto LABEL_13;
    goto LABEL_12;
  }
  v25 = 0;
  if (v21)
  {
LABEL_12:
    -[HMDHomeManager setHomeDataLoadedFromArchive:](self, "setHomeDataLoadedFromArchive:", 1, v28);
    objc_msgSend(v21, "zoneID");
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v21, "ownerName");
    v27 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHomeManager _addCloudZone:ownerName:](self, "_addCloudZone:ownerName:", v26, v27);

    objc_initWeak((id *)buf, self);
    v32[0] = MEMORY[0x24BDAC760];
    v32[1] = 3221225472;
    v32[2] = __50__HMDHomeManager__processSharedHomeModel_message___block_invoke;
    v32[3] = &unk_24E796640;
    objc_copyWeak(&v36, (id *)buf);
    v33 = v21;
    v34 = v29;
    v35 = v39;
    -[HMDHomeManager processTransactionsFromHomeDataSync:accessories:version:completion:](self, "processTransactionsFromHomeDataSync:accessories:version:completion:", v33, v22, v25, v32);

    objc_destroyWeak(&v36);
    objc_destroyWeak((id *)buf);
  }
LABEL_13:

  _Block_object_dispose(v39, 8);
}

- (void)processTransactionsFromHomeDataSync:(id)a3 accessories:(id)a4 version:(int64_t)a5 completion:(id)a6
{
  id v10;
  void *v11;
  void *v12;
  void *v13;
  id v14;
  void *v15;
  void *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  void (**v21)(void);
  id v22;
  void *v23;
  void (**v24)(void);
  id v25;
  id v26;
  void *v27;
  uint64_t v28;
  void *v29;
  void *v30;
  HMDHomeManager *v31;
  NSObject *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  HMDHomeManager *v38;
  NSObject *v39;
  void *v40;
  id *v41;
  id *v42;
  id v43;
  void *v44;
  void (**v45)(void);
  id v46;
  void *v47;
  _QWORD v48[4];
  id v49;
  id v50;
  void (**v51)(void);
  id v52;
  id v53;
  id v54;
  _QWORD v55[4];
  id v56;
  id v57;
  id v58;
  void (**v59)(void);
  id v60;
  id v61;
  _QWORD aBlock[4];
  id v63;
  id v64;
  void (**v65)(void);
  id v66;
  id location;
  uint8_t buf[4];
  void *v69;
  _QWORD v70[4];

  v70[1] = *MEMORY[0x24BDAC8D0];
  v10 = a3;
  v46 = a4;
  v45 = (void (**)(void))a6;
  v70[0] = v10;
  objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", v70, 1);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHomeManager _associateAccessories:withHomes:](self, "_associateAccessories:withHomes:", v46, v11);

  objc_msgSend(v10, "fixupHomeAfterDecoding");
  objc_msgSend(v10, "uuid");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHomeManager _homeWithUUID:](self, "_homeWithUUID:", v12);
  v47 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v10, "sharedHomeSourceVersion");
  v44 = (void *)objc_claimAutoreleasedReturnValue();
  v13 = (void *)MEMORY[0x227676638]();
  -[HMDHomeManager _loadCloudTransactionForRemoteHome:localHome:cachedHome:version:](self, "_loadCloudTransactionForRemoteHome:localHome:cachedHome:version:", v10, v47, 0, a5);
  v14 = (id)objc_claimAutoreleasedReturnValue();
  objc_autoreleasePoolPop(v13);
  if (objc_msgSend(v14, "count"))
  {
    -[HMDHomeManager _findHomeModel:](self, "_findHomeModel:", v14);
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
      v16 = v15;
    else
      v16 = 0;
    v43 = v16;

    if (!v47 && v43)
    {
      v17 = (void *)objc_msgSend(v14, "mutableCopy");
      objc_msgSend(v17, "removeObject:", v43);
      v18 = objc_msgSend(v17, "copy");

      v14 = (id)v18;
    }
    objc_initWeak(&location, self);
    v19 = MEMORY[0x24BDAC760];
    aBlock[0] = MEMORY[0x24BDAC760];
    aBlock[1] = 3221225472;
    aBlock[2] = __85__HMDHomeManager_processTransactionsFromHomeDataSync_accessories_version_completion___block_invoke;
    aBlock[3] = &unk_24E796668;
    v41 = &v66;
    objc_copyWeak(&v66, &location);
    v20 = v10;
    v63 = v20;
    v21 = v45;
    v65 = v21;
    v22 = v44;
    v64 = v22;
    v23 = _Block_copy(aBlock);
    v55[0] = v19;
    v55[1] = 3221225472;
    v55[2] = __85__HMDHomeManager_processTransactionsFromHomeDataSync_accessories_version_completion___block_invoke_810;
    v55[3] = &unk_24E796690;
    v42 = &v61;
    objc_copyWeak(&v61, &location);
    v24 = v21;
    v59 = v24;
    v25 = v22;
    v56 = v25;
    v57 = v20;
    v14 = v14;
    v58 = v14;
    v26 = v23;
    v60 = v26;
    v27 = _Block_copy(v55);
    v29 = v27;
    if (v47)
    {
      (*((void (**)(void *, _QWORD))v27 + 2))(v27, 0);
    }
    else
    {
      if (v43)
      {
        -[HMDHomeManager backingStore](self, "backingStore", &v66, &v61);
        v34 = (void *)objc_claimAutoreleasedReturnValue();
        +[HMDBackingStoreTransactionOptions defaultIDSOptions](HMDBackingStoreTransactionOptions, "defaultIDSOptions");
        v35 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v34, "transaction:options:", CFSTR("kTransactionUpdate"), v35);
        v36 = (void *)objc_claimAutoreleasedReturnValue();

        objc_msgSend(v36, "add:withMessage:", v43, 0);
        v48[0] = v19;
        v48[1] = 3221225472;
        v48[2] = __85__HMDHomeManager_processTransactionsFromHomeDataSync_accessories_version_completion___block_invoke_811;
        v48[3] = &unk_24E7966B8;
        objc_copyWeak(&v54, &location);
        v51 = v24;
        v49 = v25;
        v50 = v14;
        v52 = v26;
        v53 = v29;
        objc_msgSend(v36, "run:", v48);

        objc_destroyWeak(&v54);
      }
      else
      {
        v37 = (void *)MEMORY[0x227676638](v27, v28);
        v38 = self;
        HMFGetOSLogHandle();
        v39 = (id)objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v39, OS_LOG_TYPE_ERROR))
        {
          HMFGetLogIdentifier();
          v40 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543362;
          v69 = v40;
          _os_log_impl(&dword_2218F0000, v39, OS_LOG_TYPE_ERROR, "%{public}@Must have home model to create home because it does not already exist", buf, 0xCu);

        }
        objc_autoreleasePoolPop(v37);
        if (!v24)
          goto LABEL_21;
        objc_msgSend(MEMORY[0x24BDD1540], "hmErrorWithCode:", 52, &v66, &v61);
        v36 = (void *)objc_claimAutoreleasedReturnValue();
        ((void (*)(void (**)(void), _QWORD, _QWORD, void *))v24[2])(v24, 0, 0, v36);
      }

    }
LABEL_21:

    objc_destroyWeak(v42);
    objc_destroyWeak(v41);
    objc_destroyWeak(&location);

    goto LABEL_22;
  }
  v30 = (void *)MEMORY[0x227676638]();
  v31 = self;
  HMFGetOSLogHandle();
  v32 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v32, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v33 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543362;
    v69 = v33;
    _os_log_impl(&dword_2218F0000, v32, OS_LOG_TYPE_INFO, "%{public}@No changes to home", buf, 0xCu);

  }
  objc_autoreleasePoolPop(v30);
  if (v45)
    v45[2]();
LABEL_22:

}

- (id)_prepareHomesVersionDict
{
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t i;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  _BYTE v19[128];
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  objc_msgSend(MEMORY[0x24BDBCED8], "dictionary");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v15 = 0u;
  v16 = 0u;
  v17 = 0u;
  v18 = 0u;
  -[HMDHomeManager homes](self, "homes", 0);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v15, v19, 16);
  if (v5)
  {
    v6 = v5;
    v7 = *(_QWORD *)v16;
    do
    {
      for (i = 0; i != v6; ++i)
      {
        if (*(_QWORD *)v16 != v7)
          objc_enumerationMutation(v4);
        v9 = *(void **)(*((_QWORD *)&v15 + 1) + 8 * i);
        objc_msgSend(MEMORY[0x24BDD16E0], "numberWithInteger:", objc_msgSend(v9, "configurationVersion"));
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v9, "uuid");
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v11, "UUIDString");
        v12 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v3, "setObject:forKeyedSubscript:", v10, v12);

      }
      v6 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v15, v19, 16);
    }
    while (v6);
  }

  if (objc_msgSend(v3, "count"))
    v13 = (void *)objc_msgSend(v3, "copy");
  else
    v13 = 0;

  return v13;
}

- (void)_handleHomesConfigSync:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  id v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  HMDHomeKitVersion *v18;
  int v19;
  void *v20;
  id v21;
  id v22;
  id v23;
  void *v24;
  void *v25;
  HMDHomeManager *v26;
  NSObject *v27;
  void *v28;
  void *v29;
  void *v30;
  void (**v31)(_QWORD, _QWORD, _QWORD);
  void *v32;
  HMDHomeManager *v33;
  NSObject *v34;
  void *v35;
  id v36;
  id v37;
  id v38;
  id v39;
  uint8_t buf[4];
  void *v41;
  __int16 v42;
  id v43;
  uint64_t v44;

  v44 = *MEMORY[0x24BDAC8D0];
  v4 = a3;
  +[HMDHAPMetadata getSharedInstance](HMDHAPMetadata, "getSharedInstance");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x24BDBCED8], "dictionary");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = (id)homedVersion;
  objc_msgSend(v6, "setObject:forKeyedSubscript:", v7, CFSTR("kHomedVersionKey"));

  objc_msgSend(v5, "version");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "setObject:forKeyedSubscript:", v8, CFSTR("kMetadataInfoVersionKey"));

  objc_msgSend(v5, "schemaVersion");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "setObject:forKeyedSubscript:", v9, CFSTR("kMetadataInfoSchemaVersionKey"));

  -[HMDHomeManager primaryHomeUUID](self, "primaryHomeUUID");
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  if (v10)
  {
    -[HMDHomeManager primaryHomeUUID](self, "primaryHomeUUID");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "UUIDString");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "setObject:forKeyedSubscript:", v12, CFSTR("kPrimaryHomeUUIDKey"));

  }
  objc_msgSend(v4, "messagePayload");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v13, "hmf_UUIDForKey:", CFSTR("kCurrentHomeUUIDKey"));
  v14 = (void *)objc_claimAutoreleasedReturnValue();

  if (v14)
    -[HMDHomeManager _notifyCurrentHomeUpdated:isLocalUpdate:](self, "_notifyCurrentHomeUpdated:isLocalUpdate:", v14, 0);
  -[HMDHomeManager _prepareHomesVersionDict](self, "_prepareHomesVersionDict");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  if (v15)
    objc_msgSend(v6, "setObject:forKeyedSubscript:", v15, CFSTR("kHomeConfigHomesKey"));
  objc_msgSend(v4, "remoteSourceDevice");
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v16, "version");
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  v18 = -[HMDHomeKitVersion initWithVersionString:]([HMDHomeKitVersion alloc], "initWithVersionString:", CFSTR("4.1.1"));
  v19 = objc_msgSend(v17, "isAtLeastVersion:", v18);

  if (!v19)
  {
    v25 = (void *)MEMORY[0x227676638]();
    v26 = self;
    HMFGetOSLogHandle();
    v27 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v27, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v28 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v41 = v28;
      _os_log_impl(&dword_2218F0000, v27, OS_LOG_TYPE_INFO, "%{public}@Responding with legacy pairing identity", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v25);
    objc_msgSend(MEMORY[0x24BE1BC08], "systemStore");
    v29 = (void *)objc_claimAutoreleasedReturnValue();
    v37 = 0;
    v38 = 0;
    v36 = 0;
    objc_msgSend(v29, "getControllerPublicKey:secretKey:keyPair:username:allowCreation:error:", 0, 0, &v38, &v37, 0, &v36);
    v22 = v38;
    v23 = v37;
    v21 = v36;

    if (v22)
      objc_msgSend(v6, "setObject:forKeyedSubscript:", v22, CFSTR("kControllerKeyPairKey"));
    if (v23)
      objc_msgSend(v6, "setObject:forKeyedSubscript:", v23, CFSTR("kControllerPairingNameKey"));
    goto LABEL_16;
  }
  objc_msgSend(MEMORY[0x24BE1BC08], "systemStore");
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  v39 = 0;
  objc_msgSend(v20, "getLocalPairingIdentity:", &v39);
  v21 = (id)objc_claimAutoreleasedReturnValue();
  v22 = v39;

  if (v21)
  {
    objc_msgSend(v21, "publicPairingIdentity");
    v23 = (id)objc_claimAutoreleasedReturnValue();
    encodeRootObject();
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "setObject:forKeyedSubscript:", v24, CFSTR("pairingIdentity"));

LABEL_16:
    goto LABEL_17;
  }
  v32 = (void *)MEMORY[0x227676638]();
  v33 = self;
  HMFGetOSLogHandle();
  v34 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT))
  {
    HMFGetLogIdentifier();
    v35 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543618;
    v41 = v35;
    v42 = 2112;
    v43 = v22;
    _os_log_impl(&dword_2218F0000, v34, OS_LOG_TYPE_DEFAULT, "%{public}@Failed to get local pairing identity with error: %@", buf, 0x16u);

  }
  objc_autoreleasePoolPop(v32);
  v21 = 0;
LABEL_17:

  +[HMDHomeManager getUniqueDeviceIdSalt](HMDHomeManager, "getUniqueDeviceIdSalt");
  v30 = (void *)objc_claimAutoreleasedReturnValue();
  if (v30)
    objc_msgSend(v6, "setObject:forKeyedSubscript:", v30, CFSTR("kControllerUniqueDeviceIdSaltKey"));
  objc_msgSend(v4, "responseHandler");
  v31 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
  ((void (**)(_QWORD, _QWORD, void *))v31)[2](v31, 0, v6);

}

- (void)_handleCompanionKeysSync:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  id v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  NSObject *v16;
  void *v17;
  void *v18;
  NSObject *v19;
  void *v20;
  void (**v21)(_QWORD, _QWORD, _QWORD);
  void *v22;
  void *v23;
  NSObject *v24;
  void *v25;
  void *v26;
  NSObject *v27;
  void *v28;
  void (**v29)(_QWORD, _QWORD, _QWORD);
  void *v30;
  _QWORD v31[3];
  _QWORD v32[3];
  uint8_t buf[4];
  void *v34;
  uint64_t v35;

  v35 = *MEMORY[0x24BDAC8D0];
  v4 = a3;
  objc_msgSend(v4, "dataForKey:", CFSTR("kControllerKeyPairKey"));
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "stringForKey:", CFSTR("kControllerPairingNameKey"));
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "dataForKey:", CFSTR("kControllerUniqueDeviceIdSaltKey"));
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "dataForKey:", CFSTR("kControllerAssistantTeamIdentifierKey"));
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "responseHandler");
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  if (v9)
  {
    if (v5 && v7 && v8)
    {
      v30 = v6;
      if (-[HMDHomeManager _removeAndAddKeyPair:userName:eraseReason:](self, "_removeAndAddKeyPair:userName:eraseReason:", v5, v6, 1))
      {
        +[HMDHAPMetadata getSharedInstance](HMDHAPMetadata, "getSharedInstance");
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        v31[0] = CFSTR("kHomedVersionKey");
        v11 = (id)homedVersion;
        v32[0] = v11;
        v31[1] = CFSTR("kMetadataInfoVersionKey");
        objc_msgSend(v10, "version");
        v12 = (void *)objc_claimAutoreleasedReturnValue();
        v32[1] = v12;
        v31[2] = CFSTR("kMetadataInfoSchemaVersionKey");
        objc_msgSend(v10, "schemaVersion");
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        v32[2] = v13;
        objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v32, v31, 3);
        v14 = (void *)objc_claimAutoreleasedReturnValue();

        -[HMDHomeManager _setUniqueDeviceIdSalt:](self, "_setUniqueDeviceIdSalt:", v7);
        -[HMDHomeManager _saveAssistantHashingData:](self, "_saveAssistantHashingData:", v8);

      }
      else
      {
        v23 = (void *)MEMORY[0x227676638]();
        HMFGetOSLogHandle();
        v24 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v24, OS_LOG_TYPE_INFO))
        {
          HMFGetLogIdentifier();
          v25 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543362;
          v34 = v25;
          _os_log_impl(&dword_2218F0000, v24, OS_LOG_TYPE_INFO, "%{public}@Failed to save the key pair to keychain", buf, 0xCu);

        }
        objc_autoreleasePoolPop(v23);
        v14 = 0;
      }
      v26 = (void *)MEMORY[0x227676638]();
      HMFGetOSLogHandle();
      v27 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v27, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v28 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543362;
        v34 = v28;
        _os_log_impl(&dword_2218F0000, v27, OS_LOG_TYPE_INFO, "%{public}@Answering Companion Sync request", buf, 0xCu);

      }
      objc_autoreleasePoolPop(v26);
      objc_msgSend(v4, "responseHandler");
      v29 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
      ((void (**)(_QWORD, _QWORD, void *))v29)[2](v29, 0, v14);

      v6 = v30;
    }
    else
    {
      v18 = (void *)MEMORY[0x227676638]();
      HMFGetOSLogHandle();
      v19 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v20 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543362;
        v34 = v20;
        _os_log_impl(&dword_2218F0000, v19, OS_LOG_TYPE_ERROR, "%{public}@Key pair/salts are missing the companion key sync message", buf, 0xCu);

      }
      objc_autoreleasePoolPop(v18);
      objc_msgSend(v4, "responseHandler");
      v21 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x24BDD1540], "hmErrorWithCode:", 2);
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      ((void (**)(_QWORD, void *, _QWORD))v21)[2](v21, v22, 0);

    }
  }
  else
  {
    v15 = (void *)MEMORY[0x227676638]();
    HMFGetOSLogHandle();
    v16 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v34 = v17;
      _os_log_impl(&dword_2218F0000, v16, OS_LOG_TYPE_ERROR, "%{public}@No response handler", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v15);
  }

}

- (BOOL)setLocalPairingIdentity:(id)a3 error:(id *)a4
{
  id v6;
  void *v7;
  void *v8;
  void *v9;
  HMDHomeManager *v10;
  NSObject *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  BOOL v16;
  void *v17;
  HMDHomeManager *v18;
  NSObject *v19;
  void *v20;
  int v22;
  void *v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v6 = a3;
  objc_msgSend(MEMORY[0x24BE1BC08], "systemStore");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "getLocalPairingIdentity:", 0);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v8, "isEqual:", v6))
  {
    v9 = (void *)MEMORY[0x227676638]();
    v10 = self;
    HMFGetOSLogHandle();
    v11 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      v22 = 138543362;
      v23 = v12;
      _os_log_impl(&dword_2218F0000, v11, OS_LOG_TYPE_INFO, "%{public}@Skipping updating pairing identity, it matches current identity", (uint8_t *)&v22, 0xCu);

    }
    objc_autoreleasePoolPop(v9);
LABEL_9:
    v16 = 1;
    goto LABEL_13;
  }
  if ((objc_msgSend(v7, "saveLocalPairingIdentity:syncable:error:", v6, 0, a4) & 1) != 0)
  {
    -[HMDHomeManager appleAccountManager](self, "appleAccountManager");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "account");
    v14 = (void *)objc_claimAutoreleasedReturnValue();

    if (v14)
    {
      +[HMDIdentityRegistry sharedRegistry](HMDIdentityRegistry, "sharedRegistry");
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v15, "registerIdentity:account:object:", v6, v14, v14);

    }
    goto LABEL_9;
  }
  v17 = (void *)MEMORY[0x227676638]();
  v18 = self;
  HMFGetOSLogHandle();
  v19 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
  {
    HMFGetLogIdentifier();
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    v22 = 138543362;
    v23 = v20;
    _os_log_impl(&dword_2218F0000, v19, OS_LOG_TYPE_DEFAULT, "%{public}@Failed to save local pairing identity", (uint8_t *)&v22, 0xCu);

  }
  objc_autoreleasePoolPop(v17);
  v16 = 0;
LABEL_13:

  return v16;
}

- (void)__checkForBootTimeLogout
{
  void *v3;
  int v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  HMDHomeManager *v10;
  NSObject *v11;
  void *v12;
  void *v13;
  void *v14;
  HMDHomeManager *v15;
  NSObject *v16;
  _BOOL4 v17;
  void *v18;
  void *v19;
  int v20;
  void *v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  -[HMDHomeManager appleAccountManager](self, "appleAccountManager");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "didProcessAccountSignOut");

  if (v4)
  {
    -[HMDHomeManager appleAccountManager](self, "appleAccountManager");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "lastSignedOutAccount");
    v6 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(MEMORY[0x24BDB4398], "defaultStore");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "aa_primaryAppleAccount");
    v8 = (void *)objc_claimAutoreleasedReturnValue();

    if (v8)
    {
      v9 = (void *)MEMORY[0x227676638]();
      v10 = self;
      HMFGetOSLogHandle();
      v11 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
      {
        HMFGetLogIdentifier();
        v12 = (void *)objc_claimAutoreleasedReturnValue();
        v20 = 138543362;
        v21 = v12;
        _os_log_impl(&dword_2218F0000, v11, OS_LOG_TYPE_DEFAULT, "%{public}@Relaunching due to account sign out and sign in that occurred during boot", (uint8_t *)&v20, 0xCu);

      }
      objc_autoreleasePoolPop(v9);
      +[HMDMainDriver driver](HMDMainDriver, "driver");
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v13, "relaunch");

    }
    else
    {
      v14 = (void *)MEMORY[0x227676638]();
      v15 = self;
      HMFGetOSLogHandle();
      v16 = objc_claimAutoreleasedReturnValue();
      v17 = os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT);
      if (v6)
      {
        if (v17)
        {
          HMFGetLogIdentifier();
          v18 = (void *)objc_claimAutoreleasedReturnValue();
          v20 = 138543362;
          v21 = v18;
          _os_log_impl(&dword_2218F0000, v16, OS_LOG_TYPE_DEFAULT, "%{public}@Handling account sign out that occurred during boot", (uint8_t *)&v20, 0xCu);

        }
        objc_autoreleasePoolPop(v14);
        -[HMDHomeManager __handleAppleAccountUpdated:previousAccount:](v15, "__handleAppleAccountUpdated:previousAccount:", 0, v6);
      }
      else
      {
        if (v17)
        {
          HMFGetLogIdentifier();
          v19 = (void *)objc_claimAutoreleasedReturnValue();
          v20 = 138543362;
          v21 = v19;
          _os_log_impl(&dword_2218F0000, v16, OS_LOG_TYPE_DEFAULT, "%{public}@Handling account sign out that occurred before boot", (uint8_t *)&v20, 0xCu);

        }
        objc_autoreleasePoolPop(v14);
        -[HMDHomeManager _eraseLocalHomeConfigurationAfterSignOut](v15, "_eraseLocalHomeConfigurationAfterSignOut");
      }
    }

  }
}

- (void)__handleAppleAccountUpdated:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  id v11;
  id v12;

  v4 = a3;
  objc_msgSend(v4, "userInfo");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "objectForKeyedSubscript:", CFSTR("HMDAccountNotificationKey"));
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v7 = v6;
  else
    v7 = 0;
  v12 = v7;

  objc_msgSend(v4, "userInfo");
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v8, "objectForKeyedSubscript:", CFSTR("HMDPreviousAccountNotificationKey"));
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v10 = v9;
  else
    v10 = 0;
  v11 = v10;

  -[HMDHomeManager __handleAppleAccountUpdated:previousAccount:](self, "__handleAppleAccountUpdated:previousAccount:", v12, v11);
}

- (void)__handleAppleAccountUpdated:(id)a3 previousAccount:(id)a4
{
  id v6;
  id v7;
  NSObject *v8;
  id v9;
  id v10;
  _QWORD block[4];
  id v12;
  id v13;
  HMDHomeManager *v14;

  v6 = a3;
  v7 = a4;
  -[HMDHomeManager workQueue](self, "workQueue");
  v8 = objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x24BDAC760];
  block[1] = 3221225472;
  block[2] = __62__HMDHomeManager___handleAppleAccountUpdated_previousAccount___block_invoke;
  block[3] = &unk_24E79BBD0;
  v12 = v7;
  v13 = v6;
  v14 = self;
  v9 = v6;
  v10 = v7;
  dispatch_async(v8, block);

}

- (BOOL)_removeAndAddKeyPair:(id)a3 userName:(id)a4 eraseReason:(unint64_t)a5
{
  id v8;
  id v9;
  void *v10;
  int v11;
  void *v12;
  NSObject *v13;
  NSObject *v14;
  void *v15;
  const char *v16;
  NSObject *v17;
  os_log_type_t v18;
  int v19;
  id v20;
  void *v21;
  void *v22;
  id v23;
  id v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  NSObject *v30;
  void *v31;
  void *v32;
  NSObject *v33;
  void *v34;
  id v36;
  id v37;
  id v38;
  uint8_t buf[4];
  void *v40;
  uint64_t v41;

  v41 = *MEMORY[0x24BDAC8D0];
  v8 = a3;
  v9 = a4;
  -[HMDHomeManager _eraseLocalHomeConfigurationWithReason:](self, "_eraseLocalHomeConfigurationWithReason:", a5);
  objc_msgSend(MEMORY[0x24BE1BC08], "systemStore");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v11 = objc_msgSend(v10, "removeControllerKeyPairWithError:", 0);
  v12 = (void *)MEMORY[0x227676638]();
  HMFGetOSLogHandle();
  v13 = objc_claimAutoreleasedReturnValue();
  v14 = v13;
  if (v11)
  {
    if (!os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
      goto LABEL_7;
    HMFGetLogIdentifier();
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543362;
    v40 = v15;
    v16 = "%{public}@Removed controller key from store";
    v17 = v14;
    v18 = OS_LOG_TYPE_INFO;
  }
  else
  {
    if (!os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
      goto LABEL_7;
    HMFGetLogIdentifier();
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543362;
    v40 = v15;
    v16 = "%{public}@Failed removing controller key from store";
    v17 = v14;
    v18 = OS_LOG_TYPE_ERROR;
  }
  _os_log_impl(&dword_2218F0000, v17, v18, v16, buf, 0xCu);

LABEL_7:
  objc_autoreleasePoolPop(v12);
  v38 = 0;
  v19 = objc_msgSend(v10, "saveKeyPair:username:syncable:error:", v8, v9, 0, &v38);
  v20 = v38;
  v21 = v20;
  if (v19)
  {
    v36 = v20;
    v37 = 0;
    LODWORD(v22) = objc_msgSend(v10, "deserializeKeyPair:publicKey:secretKey:error:", v8, &v37, 0, &v36);
    v23 = v37;
    v24 = v36;

    if ((_DWORD)v22)
    {
      -[HMDHomeManager appleAccountManager](self, "appleAccountManager");
      v25 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v25, "account");
      v26 = (void *)objc_claimAutoreleasedReturnValue();

      if (v26)
      {
        v27 = (void *)objc_msgSend(objc_alloc(MEMORY[0x24BE3F230]), "initWithPairingKeyData:", v23);
        v28 = (void *)objc_msgSend(objc_alloc(MEMORY[0x24BE1BBB0]), "initWithIdentifier:publicKey:privateKey:permissions:", v9, v27, 0, 0);
        +[HMDIdentityRegistry sharedRegistry](HMDIdentityRegistry, "sharedRegistry");
        v29 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v29, "registerIdentity:account:object:", v28, v26, v26);

      }
    }
    else
    {
      v32 = (void *)MEMORY[0x227676638]();
      HMFGetOSLogHandle();
      v33 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v33, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v34 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543362;
        v40 = v34;
        _os_log_impl(&dword_2218F0000, v33, OS_LOG_TYPE_INFO, "%{public}@Deserialize of key pair failed", buf, 0xCu);

      }
      objc_autoreleasePoolPop(v32);
    }

    v21 = v24;
  }
  else
  {
    v22 = (void *)MEMORY[0x227676638]();
    HMFGetOSLogHandle();
    v30 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v30, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v31 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v40 = v31;
      _os_log_impl(&dword_2218F0000, v30, OS_LOG_TYPE_INFO, "%{public}@Failed to save key pair", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v22);
    LOBYTE(v22) = 0;
  }

  return (char)v22;
}

- (void)_handleRetrieveVendorIdentifier:(id)a3
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  NSObject *v9;
  void *v10;
  void *v11;
  void *v12;
  void (**v13)(_QWORD, _QWORD, _QWORD);
  void *v14;
  NSObject *v15;
  void *v16;
  const __CFString *v17;
  void *v18;
  uint8_t buf[4];
  void *v20;
  __int16 v21;
  void *v22;
  __int16 v23;
  void *v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v3 = a3;
  objc_msgSend(v3, "responseHandler");
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  if (v4)
  {
    objc_msgSend(v3, "stringForKey:", CFSTR("kCompanionApplicationIdentifierKey"));
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    if (!v5)
      goto LABEL_8;
    +[HMDApplicationVendorIDStore sharedStore](HMDApplicationVendorIDStore, "sharedStore");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "vendorIDForApplication:", v5);
    v7 = (void *)objc_claimAutoreleasedReturnValue();

    v8 = (void *)MEMORY[0x227676638]();
    HMFGetOSLogHandle();
    v9 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543874;
      v20 = v10;
      v21 = 2112;
      v22 = v7;
      v23 = 2112;
      v24 = v5;
      _os_log_impl(&dword_2218F0000, v9, OS_LOG_TYPE_INFO, "%{public}@Retrieved vendor ID %@ for application bundle ID: %@", buf, 0x20u);

    }
    objc_autoreleasePoolPop(v8);
    if (v7
      && (v17 = CFSTR("kCompanionApplicationVendorIdentifierKey"),
          v18 = v7,
          objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", &v18, &v17, 1),
          v11 = (void *)objc_claimAutoreleasedReturnValue(),
          v7,
          v11))
    {
      v12 = 0;
    }
    else
    {
LABEL_8:
      objc_msgSend(MEMORY[0x24BDD1540], "errorWithDomain:code:userInfo:", *MEMORY[0x24BDD5BD8], 2, 0);
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      v11 = 0;
    }
    objc_msgSend(v3, "responseHandler");
    v13 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
    ((void (**)(_QWORD, void *, void *))v13)[2](v13, v12, v11);

  }
  else
  {
    v14 = (void *)MEMORY[0x227676638]();
    HMFGetOSLogHandle();
    v15 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v20 = v16;
      _os_log_impl(&dword_2218F0000, v15, OS_LOG_TYPE_ERROR, "%{public}@No response handler set for the retrieve vendor identifier message", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v14);
  }

}

- (void)auditDuplicatePreviouslyAddedAccessory:(id)a3
{
  void *v4;
  void *v5;
  void *v6;
  id v7;

  objc_msgSend(a3, "userInfo");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "objectForKeyedSubscript:", CFSTR("HMDAccessoryNotificationKey"));
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v6 = v5;
  else
    v6 = 0;
  v7 = v6;

  -[HMDHomeManager _auditDuplicatePreviouslyAddedAccessory:](self, "_auditDuplicatePreviouslyAddedAccessory:", v7);
}

- (void)_auditDuplicatePreviouslyAddedAccessory:(id)a3
{
  id v4;
  void *v5;
  unint64_t v6;
  id v7;
  void *v8;
  unint64_t v9;
  dispatch_time_t v10;
  NSObject *v11;
  _QWORD v12[5];
  id v13;
  id v14;
  id v15;

  v4 = a3;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v5 = v4;
  else
    v5 = 0;
  v6 = v5;
  v7 = v4;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v8 = v7;
  else
    v8 = 0;
  v9 = v8;

  if (v6 | v9)
  {
    v10 = dispatch_time(0, 60000000000);
    -[HMDHomeManager workQueue](self, "workQueue");
    v11 = objc_claimAutoreleasedReturnValue();
    v12[0] = MEMORY[0x24BDAC760];
    v12[1] = 3221225472;
    v12[2] = __58__HMDHomeManager__auditDuplicatePreviouslyAddedAccessory___block_invoke;
    v12[3] = &unk_24E79A910;
    v12[4] = self;
    v13 = v7;
    v14 = (id)v6;
    v15 = (id)v9;
    dispatch_after(v10, v11, v12);

  }
}

- (void)_handleQueryiCloudSwitchState:(id)a3
{
  id v3;
  void *v4;
  uint64_t v5;
  void (**v6)(_QWORD, _QWORD, _QWORD);
  void *v7;
  void *v8;
  const __CFString *v9;
  _QWORD v10[2];

  v10[1] = *MEMORY[0x24BDAC8D0];
  v3 = a3;
  +[HMDAppleAccountSettings sharedSettings](HMDAppleAccountSettings, "sharedSettings");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v4, "isHomeEnabled");

  objc_msgSend(v3, "responseHandler");
  v6 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();

  v9 = CFSTR("kiCloudSwitchStateKey");
  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithBool:", v5);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v10[0] = v7;
  objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v10, &v9, 1);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  ((void (**)(_QWORD, _QWORD, void *))v6)[2](v6, 0, v8);

}

- (void)_handleUpdateiCloudSwitchState:(id)a3
{
  id v4;
  id v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  char v10;
  _QWORD aBlock[4];
  id v12;
  id v13;
  id location;

  v4 = a3;
  objc_initWeak(&location, self);
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 3221225472;
  aBlock[2] = __49__HMDHomeManager__handleUpdateiCloudSwitchState___block_invoke;
  aBlock[3] = &unk_24E798300;
  objc_copyWeak(&v13, &location);
  v5 = v4;
  v12 = v5;
  v6 = _Block_copy(aBlock);
  v10 = 0;
  v7 = objc_msgSend(v5, "BOOLForKey:keyPresent:", CFSTR("kiCloudSwitchStateKey"), &v10);
  if (v10 && (v8 = v7, -[HMDHomeManager accountActive](self, "accountActive")))
  {
    +[HMDAppleAccountSettings sharedSettings](HMDAppleAccountSettings, "sharedSettings");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "updateHomeEnabled:completionHandler:", v8, v6);
  }
  else
  {
    +[HMDAppleAccountSettings sharedSettings](HMDAppleAccountSettings, "sharedSettings");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "updateHomeEnabled:completionHandler:", 0, v6);
  }

  objc_destroyWeak(&v13);
  objc_destroyWeak(&location);

}

- (void)cloudHomeSettingsUpdated:(id)a3
{
  id v4;

  -[HMDHomeManager uuid](self, "uuid", a3);
  v4 = (id)objc_claimAutoreleasedReturnValue();
  -[HMDHomeManager updateGenerationCounterWithReason:sourceUUID:shouldNotifyClients:](self, "updateGenerationCounterWithReason:sourceUUID:shouldNotifyClients:", CFSTR("iCloud Switch Toggle"), v4, 1);

}

- (void)_handleAreYouAtHome:(id)a3
{
  void *v3;
  id v4;
  id v5;

  v3 = (void *)MEMORY[0x24BDD1540];
  v4 = a3;
  objc_msgSend(v3, "hmErrorWithCode:description:reason:suggestion:", 52, CFSTR("This device does not support legacy remote sessions"), 0, 0);
  v5 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "respondWithError:", v5);

}

- (void)_scheduleSendHomeDataToAllWatches
{
  void *v3;
  void *v4;
  NSObject *v5;
  void *v6;
  int v7;
  void *v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  if (isiOSDevice())
  {
    -[HMDHomeManager watchPushDelayTimer](self, "watchPushDelayTimer");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "resume");

    v4 = (void *)MEMORY[0x227676638]();
    HMFGetOSLogHandle();
    v5 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      v7 = 138543362;
      v8 = v6;
      _os_log_impl(&dword_2218F0000, v5, OS_LOG_TYPE_INFO, "%{public}@Kicking watch push delay", (uint8_t *)&v7, 0xCu);

    }
    objc_autoreleasePoolPop(v4);
  }
}

- (void)sendHomeDataToAllWatchesWithCompletion:(id)a3
{
  id v4;
  NSObject *v5;
  id v6;
  _QWORD v7[5];
  id v8;

  v4 = a3;
  -[HMDHomeManager workQueue](self, "workQueue");
  v5 = objc_claimAutoreleasedReturnValue();
  v7[0] = MEMORY[0x24BDAC760];
  v7[1] = 3221225472;
  v7[2] = __57__HMDHomeManager_sendHomeDataToAllWatchesWithCompletion___block_invoke;
  v7[3] = &unk_24E79C2B8;
  v7[4] = self;
  v8 = v4;
  v6 = v4;
  dispatch_async(v5, v7);

}

- (void)_sendHomeDataToAllWatchesWithCompletion:(id)a3
{
  -[HMDHomeManager _sendHomeDataToAllWatchesMigrateToHH2:completionHandler:](self, "_sendHomeDataToAllWatchesMigrateToHH2:completionHandler:", 0, a3);
}

- (void)_sendHomeDataToAllWatchesMigrateToHH2:(BOOL)a3 completionHandler:(id)a4
{
  _BOOL8 v4;
  void (**v6)(_QWORD);
  NSObject *v7;
  void *v8;
  void *v9;
  HMDHomeManager *v10;
  NSObject *v11;
  void *v12;
  void *v13;
  NSObject *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  void (**v27)(_QWORD);
  id obj;
  _QWORD block[4];
  void (**v30)(_QWORD);
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  _QWORD v35[4];
  NSObject *v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  _BYTE v41[128];
  uint8_t v42[128];
  uint8_t buf[4];
  void *v44;
  __int16 v45;
  void *v46;
  uint64_t v47;

  v4 = a3;
  v47 = *MEMORY[0x24BDAC8D0];
  v6 = (void (**)(_QWORD))a4;
  -[HMDHomeManager workQueue](self, "workQueue");
  v7 = objc_claimAutoreleasedReturnValue();
  dispatch_assert_queue_V2(v7);

  if (isiOSDevice())
  {
    v27 = v6;
    -[HMDHomeManager associatedWatchPeers](self, "associatedWatchPeers");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = (void *)MEMORY[0x227676638]();
    v10 = self;
    HMFGetOSLogHandle();
    v11 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v8, "allKeys");
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v44 = v12;
      v45 = 2112;
      v46 = v13;
      _os_log_impl(&dword_2218F0000, v11, OS_LOG_TYPE_INFO, "%{public}@Syncing home data to watches: %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v9);
    v14 = dispatch_group_create();
    v37 = 0u;
    v38 = 0u;
    v39 = 0u;
    v40 = 0u;
    obj = v8;
    v15 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v37, v42, 16);
    v16 = MEMORY[0x24BDAC760];
    if (v15)
    {
      v17 = v15;
      v18 = *(_QWORD *)v38;
      do
      {
        v19 = 0;
        do
        {
          if (*(_QWORD *)v38 != v18)
            objc_enumerationMutation(obj);
          v20 = *(_QWORD *)(*((_QWORD *)&v37 + 1) + 8 * v19);
          dispatch_group_enter(v14);
          v35[0] = v16;
          v35[1] = 3221225472;
          v35[2] = __74__HMDHomeManager__sendHomeDataToAllWatchesMigrateToHH2_completionHandler___block_invoke;
          v35[3] = &unk_24E79B328;
          v36 = v14;
          -[HMDHomeManager _sendHomeDataToWatch:migrateToHH2:completionHandler:](v10, "_sendHomeDataToWatch:migrateToHH2:completionHandler:", v20, v4, v35);

          ++v19;
        }
        while (v17 != v19);
        v17 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v37, v42, 16);
      }
      while (v17);
    }

    v33 = 0u;
    v34 = 0u;
    v31 = 0u;
    v32 = 0u;
    -[HMDHomeManager homes](v10, "homes");
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    v22 = objc_msgSend(v21, "countByEnumeratingWithState:objects:count:", &v31, v41, 16);
    if (v22)
    {
      v23 = v22;
      v24 = *(_QWORD *)v32;
      do
      {
        v25 = 0;
        do
        {
          if (*(_QWORD *)v32 != v24)
            objc_enumerationMutation(v21);
          objc_msgSend(*(id *)(*((_QWORD *)&v31 + 1) + 8 * v25++), "setWatchSkipVersionCheck:", 0);
        }
        while (v23 != v25);
        v23 = objc_msgSend(v21, "countByEnumeratingWithState:objects:count:", &v31, v41, 16);
      }
      while (v23);
    }

    -[HMDHomeManager workQueue](v10, "workQueue");
    v26 = objc_claimAutoreleasedReturnValue();
    block[0] = v16;
    block[1] = 3221225472;
    block[2] = __74__HMDHomeManager__sendHomeDataToAllWatchesMigrateToHH2_completionHandler___block_invoke_2;
    block[3] = &unk_24E799CC8;
    v6 = v27;
    v30 = v27;
    dispatch_group_notify(v14, v26, block);

  }
  else if (v6)
  {
    v6[2](v6);
  }

}

- (void)_sendHomeDataToWatch:(id)a3 completionHandler:(id)a4
{
  -[HMDHomeManager _sendHomeDataToWatch:migrateToHH2:completionHandler:](self, "_sendHomeDataToWatch:migrateToHH2:completionHandler:", a3, 0, a4);
}

- (void)_sendHomeDataToWatch:(id)a3 migrateToHH2:(BOOL)a4 completionHandler:(id)a5
{
  void *v7;
  void *v8;
  int v9;
  void *v10;
  HMDHomeManager *v11;
  NSObject *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  uint64_t v18;
  char v19;
  uint64_t i;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  char v26;
  char v27;
  void *v28;
  HMDHomeManager *v29;
  NSObject *v30;
  id v31;
  void *v32;
  void *v33;
  HMDHomeManager *v34;
  NSObject *v35;
  id v36;
  void *v37;
  void *v38;
  char v39;
  void *v40;
  void *v41;
  void *v42;
  char v43;
  void *v44;
  NSObject *v45;
  id v46;
  void *v47;
  void *v48;
  void *v49;
  HMDHomeManager *v50;
  NSObject *v51;
  id v52;
  void *v53;
  void *v54;
  void *v55;
  void *v56;
  void *v57;
  void *v58;
  void *v59;
  void *v60;
  void *v61;
  void *v62;
  HMDHomeManager *v63;
  NSObject *v64;
  id v65;
  void *v66;
  id v67;
  NSObject *v68;
  void *context;
  id v70;
  void *v71;
  id obj;
  unsigned int v73;
  _BOOL4 v74;
  NSObject *group;
  uint64_t v76;
  void *v77;
  HMDHomeManager *val;
  uint64_t v79;
  id v80;
  _QWORD block[5];
  id v82;
  id v83;
  id v84;
  _BYTE *v85;
  char v86;
  _QWORD v87[4];
  id v88;
  id v89;
  HMDHomeManager *v90;
  id v91;
  _QWORD v92[4];
  id v93;
  void *v94;
  HMDHomeManager *v95;
  id v96[2];
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  id location;
  const __CFString *v102;
  void *v103;
  const __CFString *v104;
  void *v105;
  uint8_t v106[4];
  id v107;
  __int16 v108;
  void *v109;
  __int16 v110;
  id v111;
  __int16 v112;
  void *v113;
  uint8_t v114[128];
  _BYTE buf[24];
  uint64_t (*v116)(uint64_t, uint64_t);
  void (*v117)(uint64_t);
  id v118;
  uint64_t v119;

  v74 = a4;
  v119 = *MEMORY[0x24BDAC8D0];
  v80 = a3;
  v70 = a5;
  val = self;
  -[HMDHomeManager watchManager](self, "watchManager");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "connectedWatchFromDeviceID:", v80);
  v71 = (void *)objc_claimAutoreleasedReturnValue();

  if (!-[HMDHomeManager accountActive](self, "accountActive")
    || (objc_msgSend(v71, "capabilities"),
        v8 = (void *)objc_claimAutoreleasedReturnValue(),
        v9 = objc_msgSend(v8, "supportsCloudDataSync"),
        v8,
        !v9))
  {
    context = (void *)MEMORY[0x227676638]();
    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = buf;
    *(_QWORD *)&buf[16] = 0x3032000000;
    v116 = __Block_byref_object_copy__227383;
    v117 = __Block_byref_object_dispose__227384;
    v118 = (id)objc_msgSend(objc_alloc(MEMORY[0x24BE3F200]), "initWithName:", CFSTR("com.apple.homed.push-home-to-watch"));
    group = dispatch_group_create();
    objc_msgSend(v71, "version");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    v16 = (void *)objc_msgSend(objc_alloc(MEMORY[0x24BE3F2A8]), "initWithVersionString:", CFSTR("4.0"));
    v73 = objc_msgSend(v15, "isAtLeastVersion:", v16);

    -[HMDHomeManager associatedWatchPeers](val, "associatedWatchPeers");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v17, "objectForKeyedSubscript:", v80);
    v77 = (void *)objc_claimAutoreleasedReturnValue();

    objc_initWeak(&location, val);
    -[HMDHomeManager homes](val, "homes");
    v99 = 0u;
    v100 = 0u;
    v97 = 0u;
    v98 = 0u;
    obj = (id)objc_claimAutoreleasedReturnValue();
    v18 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v97, v114, 16);
    if (v18)
    {
      v19 = 0;
      v76 = *(_QWORD *)v98;
      do
      {
        v79 = v18;
        for (i = 0; i != v79; ++i)
        {
          if (*(_QWORD *)v98 != v76)
            objc_enumerationMutation(obj);
          v21 = *(void **)(*((_QWORD *)&v97 + 1) + 8 * i);
          v22 = (void *)objc_msgSend(v21, "configurationVersion");
          objc_msgSend(v77, "homeConfig");
          v23 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v21, "uuid");
          v24 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v23, "objectForKeyedSubscript:", v24);
          v25 = (void *)objc_claimAutoreleasedReturnValue();

          v26 = objc_msgSend(v21, "watchSkipVersionCheck");
          if (v25)
            v27 = v26;
          else
            v27 = 1;
          if ((v27 & 1) != 0 || (void *)objc_msgSend(v25, "integerValue") != v22)
          {
            v33 = (void *)MEMORY[0x227676638]();
            v34 = val;
            HMFGetOSLogHandle();
            v35 = (id)objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v35, OS_LOG_TYPE_INFO))
            {
              HMFGetLogIdentifier();
              v36 = (id)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v21, "name");
              v37 = (void *)objc_claimAutoreleasedReturnValue();
              *(_DWORD *)v106 = 138543874;
              v107 = v36;
              v108 = 2112;
              v109 = v37;
              v110 = 2112;
              v111 = v80;
              _os_log_impl(&dword_2218F0000, v35, OS_LOG_TYPE_INFO, "%{public}@Sending over the data for home %@ to watch %@", v106, 0x20u);

            }
            objc_autoreleasePoolPop(v33);
            -[HMDHomeManager _prepareDataForDevicesOnSameAccountForHome:remoteGateway:isAtLeastV4:migrateToHH2:](v34, "_prepareDataForDevicesOnSameAccountForHome:remoteGateway:isAtLeastV4:migrateToHH2:", v21, 0, v73, v74);
            v38 = (void *)objc_claimAutoreleasedReturnValue();
            v92[0] = MEMORY[0x24BDAC760];
            v92[1] = 3221225472;
            v92[2] = __70__HMDHomeManager__sendHomeDataToWatch_migrateToHH2_completionHandler___block_invoke;
            v92[3] = &unk_24E7966E0;
            objc_copyWeak(v96, &location);
            v93 = v80;
            v94 = v21;
            v96[1] = v22;
            v95 = v34;
            -[HMDHomeManager _pushChangesToWatch:payload:group:completionHandler:](v34, "_pushChangesToWatch:payload:group:completionHandler:", v93, v38, group, v92);

            objc_destroyWeak(v96);
            v19 = 1;
          }
          else
          {
            v28 = (void *)MEMORY[0x227676638]();
            v29 = val;
            HMFGetOSLogHandle();
            v30 = (id)objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v30, OS_LOG_TYPE_INFO))
            {
              HMFGetLogIdentifier();
              v31 = (id)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v21, "name");
              v32 = (void *)objc_claimAutoreleasedReturnValue();
              *(_DWORD *)v106 = 138544130;
              v107 = v31;
              v108 = 2112;
              v109 = v32;
              v110 = 2112;
              v111 = v25;
              v112 = 2048;
              v113 = v22;
              _os_log_impl(&dword_2218F0000, v30, OS_LOG_TYPE_INFO, "%{public}@Not sending home data for %@ as the config versions match (W: %@, C: %ld)", v106, 0x2Au);

            }
            objc_autoreleasePoolPop(v28);
          }

        }
        v18 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v97, v114, 16);
      }
      while (v18);

      if ((v19 & 1) != 0)
      {
        v39 = 1;
LABEL_39:
        -[HMDHomeManager workQueue](val, "workQueue");
        v68 = objc_claimAutoreleasedReturnValue();
        block[0] = MEMORY[0x24BDAC760];
        block[1] = 3221225472;
        block[2] = __70__HMDHomeManager__sendHomeDataToWatch_migrateToHH2_completionHandler___block_invoke_826;
        block[3] = &unk_24E796730;
        block[4] = val;
        v82 = v80;
        v85 = buf;
        v84 = v70;
        v86 = v39;
        v83 = v71;
        dispatch_group_notify(group, v68, block);

        objc_destroyWeak(&location);
        _Block_object_dispose(buf, 8);

        objc_autoreleasePoolPop(context);
        goto LABEL_40;
      }
    }
    else
    {

    }
    -[HMDHomeManager primaryHomeUUID](val, "primaryHomeUUID");
    v40 = (void *)objc_claimAutoreleasedReturnValue();
    if (!v40)
      goto LABEL_30;
    objc_msgSend(v77, "primaryHome");
    v41 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHomeManager primaryHomeUUID](val, "primaryHomeUUID");
    v42 = (void *)objc_claimAutoreleasedReturnValue();
    v43 = HMFEqualObjects();

    if ((v43 & 1) == 0)
    {
      v49 = (void *)MEMORY[0x227676638]();
      v50 = val;
      HMFGetOSLogHandle();
      v51 = (id)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v51, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v52 = (id)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v77, "primaryHome");
        v53 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v53, "UUIDString");
        v54 = (void *)objc_claimAutoreleasedReturnValue();
        -[HMDHomeManager primaryHomeUUID](v50, "primaryHomeUUID");
        v55 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v55, "UUIDString");
        v56 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)v106 = 138543874;
        v107 = v52;
        v108 = 2112;
        v109 = v54;
        v110 = 2112;
        v111 = v56;
        _os_log_impl(&dword_2218F0000, v51, OS_LOG_TYPE_INFO, "%{public}@Primary home has been updated from %@ to %@, sending primary home update", v106, 0x20u);

      }
      objc_autoreleasePoolPop(v49);
      -[HMDHomeManager primaryHomeUUID](v50, "primaryHomeUUID");
      v57 = (void *)objc_claimAutoreleasedReturnValue();
      v104 = CFSTR("kPrimaryHomeUUIDKey");
      objc_msgSend(v57, "UUIDString");
      v58 = (void *)objc_claimAutoreleasedReturnValue();
      v105 = v58;
      objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", &v105, &v104, 1);
      v59 = (void *)objc_claimAutoreleasedReturnValue();

      v102 = CFSTR("kHomeDataKey");
      encodeRootObjectForRemoteDeviceOnSameAccountMigrateToHH2(v59, v73, 0);
      v60 = (void *)objc_claimAutoreleasedReturnValue();
      v103 = v60;
      objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", &v103, &v102, 1);
      v61 = (void *)objc_claimAutoreleasedReturnValue();

      v62 = (void *)MEMORY[0x227676638]();
      v63 = v50;
      HMFGetOSLogHandle();
      v64 = (id)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v64, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v65 = (id)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v57, "UUIDString");
        v66 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)v106 = 138543874;
        v107 = v65;
        v108 = 2112;
        v109 = v66;
        v110 = 2112;
        v111 = v80;
        _os_log_impl(&dword_2218F0000, v64, OS_LOG_TYPE_INFO, "%{public}@Sending over the data for primary home update to %@ to watch %@", v106, 0x20u);

      }
      objc_autoreleasePoolPop(v62);
      v87[0] = MEMORY[0x24BDAC760];
      v87[1] = 3221225472;
      v87[2] = __70__HMDHomeManager__sendHomeDataToWatch_migrateToHH2_completionHandler___block_invoke_825;
      v87[3] = &unk_24E796708;
      objc_copyWeak(&v91, &location);
      v88 = v80;
      v67 = v57;
      v89 = v67;
      v90 = v63;
      -[HMDHomeManager _pushChangesToWatch:payload:group:completionHandler:](v63, "_pushChangesToWatch:payload:group:completionHandler:", v88, v61, group, v87);

      objc_destroyWeak(&v91);
    }
    else
    {
LABEL_30:
      v44 = (void *)MEMORY[0x227676638]();
      HMFGetOSLogHandle();
      v45 = (id)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v45, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v46 = (id)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v77, "primaryHome");
        v47 = (void *)objc_claimAutoreleasedReturnValue();
        -[HMDHomeManager primaryHomeUUID](val, "primaryHomeUUID");
        v48 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)v106 = 138543874;
        v107 = v46;
        v108 = 2112;
        v109 = v47;
        v110 = 2112;
        v111 = v48;
        _os_log_impl(&dword_2218F0000, v45, OS_LOG_TYPE_INFO, "%{public}@Not sending primary home update as they match: (W: %@, C: %@)", v106, 0x20u);

      }
      objc_autoreleasePoolPop(v44);
    }
    v39 = 0;
    goto LABEL_39;
  }
  v10 = (void *)MEMORY[0x227676638]();
  v11 = val;
  HMFGetOSLogHandle();
  v12 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543618;
    *(_QWORD *)&buf[4] = v13;
    *(_WORD *)&buf[12] = 2112;
    *(_QWORD *)&buf[14] = v71;
    _os_log_impl(&dword_2218F0000, v12, OS_LOG_TYPE_INFO, "%{public}@Paired watch %@ supports cloud data sync - skipping sending home data", buf, 0x16u);

  }
  objc_autoreleasePoolPop(v10);
  if (v70)
  {
    objc_msgSend(MEMORY[0x24BDD1540], "hmErrorWithCode:", 48);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    (*((void (**)(id, _QWORD, void *))v70 + 2))(v70, 0, v14);

  }
LABEL_40:

}

- (void)syncWalletKeyPassSerialNumbersToWatch:(id)a3 withCompletion:(id)a4
{
  id v6;
  void (**v7)(_QWORD);
  void *v8;
  void *v9;
  char v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  HMDHomeManager *v15;
  NSObject *v16;
  _BOOL4 v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  id v24;
  void *v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(uint64_t, void *, void *);
  void *v30;
  id v31;
  id v32;
  void (**v33)(_QWORD);
  id v34;
  const __CFString *v35;
  void *v36;
  uint8_t buf[4];
  void *v38;
  __int16 v39;
  void *v40;
  __int16 v41;
  void *v42;
  uint64_t v43;

  v43 = *MEMORY[0x24BDAC8D0];
  v6 = a3;
  v7 = (void (**)(_QWORD))a4;
  objc_msgSend(v6, "version");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = (void *)objc_msgSend(objc_alloc(MEMORY[0x24BE3F2A8]), "initWithVersionString:", CFSTR("8.0"));
  v10 = objc_msgSend(v8, "isAtLeastVersion:", v9);

  if ((v10 & 1) != 0)
  {
    objc_msgSend(v6, "remoteDestinationString");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHomeManager homes](self, "homes");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "na_map:", &__block_literal_global_828);
    v13 = (void *)objc_claimAutoreleasedReturnValue();

    v14 = (void *)MEMORY[0x227676638]();
    v15 = self;
    HMFGetOSLogHandle();
    v16 = objc_claimAutoreleasedReturnValue();
    v17 = os_log_type_enabled(v16, OS_LOG_TYPE_INFO);
    if (v13)
    {
      if (v17)
      {
        HMFGetLogIdentifier();
        v18 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543874;
        v38 = v18;
        v39 = 2112;
        v40 = v13;
        v41 = 2112;
        v42 = v11;
        _os_log_impl(&dword_2218F0000, v16, OS_LOG_TYPE_INFO, "%{public}@Syncing wallet key pass serial numbers: %@ to watch: %@", buf, 0x20u);

      }
      objc_autoreleasePoolPop(v14);
      -[HMDHomeManager uuid](v15, "uuid");
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      +[HMDMessageDispatcher destinationWithTarget:userID:destination:multicast:](HMDMessageDispatcher, "destinationWithTarget:userID:destination:multicast:", v19, 0, v11, 0);
      v20 = (void *)objc_claimAutoreleasedReturnValue();

      v35 = CFSTR("HMDHomeMangerMessageKeyHomeWalletKeysPassSerialNumbers");
      v36 = v13;
      objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", &v36, &v35, 1);
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x24BE3F1D0], "messageWithName:qualityOfService:destination:payload:", CFSTR("HMDHomeManagerSyncWalletKeysPassSerialNumbersMessage"), 17, v20, v21);
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v22, "setSecureRemote:", 1);
      objc_msgSend(v22, "setRemoteRestriction:", 4);
      objc_initWeak((id *)buf, v15);
      -[HMDHomeManager workQueue](v15, "workQueue");
      v23 = (void *)objc_claimAutoreleasedReturnValue();
      v27 = MEMORY[0x24BDAC760];
      v28 = 3221225472;
      v29 = __71__HMDHomeManager_syncWalletKeyPassSerialNumbersToWatch_withCompletion___block_invoke_829;
      v30 = &unk_24E7967C0;
      v24 = v23;
      v31 = v24;
      objc_copyWeak(&v34, (id *)buf);
      v32 = v11;
      v33 = v7;
      objc_msgSend(v22, "setResponseHandler:", &v27);
      -[HMDHomeManager messageDispatcher](v15, "messageDispatcher", v27, v28, v29, v30);
      v25 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v25, "sendMessage:", v22);

      objc_destroyWeak(&v34);
      objc_destroyWeak((id *)buf);

    }
    else
    {
      if (v17)
      {
        HMFGetLogIdentifier();
        v26 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        v38 = v26;
        v39 = 2112;
        v40 = v11;
        _os_log_impl(&dword_2218F0000, v16, OS_LOG_TYPE_INFO, "%{public}@Did not find any wallet key pass serial numbers to sync to watch: %@", buf, 0x16u);

      }
      objc_autoreleasePoolPop(v14);
      v7[2](v7);
    }

  }
  else
  {
    v7[2](v7);
  }

}

- (void)_handleHomeUtilCommandWalletMessage:(id)a3
{
  id v4;
  void *v5;
  HMDHomeManager *v6;
  NSObject *v7;
  void *v8;
  void *v9;
  void *v10;
  _QWORD v11[4];
  id v12;
  uint8_t buf[4];
  void *v14;
  __int16 v15;
  id v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  v4 = a3;
  if (isInternalBuild())
  {
    v5 = (void *)MEMORY[0x227676638]();
    v6 = self;
    HMFGetOSLogHandle();
    v7 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v14 = v8;
      v15 = 2112;
      v16 = v4;
      _os_log_impl(&dword_2218F0000, v7, OS_LOG_TYPE_INFO, "%{public}@homeUtilCommandWallet message: %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v5);
    objc_msgSend(v4, "dataForKey:", CFSTR("HomeUtil.Command.Wallet"));
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    if (v9)
    {
      v11[0] = MEMORY[0x24BDAC760];
      v11[1] = 3221225472;
      v11[2] = __54__HMDHomeManager__handleHomeUtilCommandWalletMessage___block_invoke;
      v11[3] = &unk_24E7967E8;
      v12 = v4;
      +[HMDHomeUtilPassCommandHandler handlePassCommandForData:completionHandler:](HMDHomeUtilPassCommandHandler, "handlePassCommandForData:completionHandler:", v9, v11);
      v10 = v12;
    }
    else
    {
      objc_msgSend(MEMORY[0x24BDD1540], "hmfErrorWithCode:reason:", 3, CFSTR("Command data was nil"));
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "respondWithError:", v10);
    }

  }
}

- (HMDDevice)companionDevice
{
  void *v2;
  void *v3;

  -[HMDHomeManager companionManager](self, "companionManager");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "companion");
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  return (HMDDevice *)v3;
}

- (void)_checkAndInformCompanionDevice
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  NSObject *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint8_t v19[128];
  uint8_t buf[4];
  void *v21;
  __int16 v22;
  _BOOL4 v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  -[HMDHomeManager companionManager](self, "companionManager");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "companion");
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  if ((v4 != 0) != -[HMDHomeManager companionReachable](self, "companionReachable"))
  {
    -[HMDHomeManager setCompanionReachable:](self, "setCompanionReachable:", v4 != 0);
    +[HMDWatchSystemState sharedState](HMDWatchSystemState, "sharedState");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "setCompanionReachable:", v4 != 0);

    v6 = (void *)MEMORY[0x227676638]();
    HMFGetOSLogHandle();
    v7 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v21 = v8;
      v22 = 1024;
      v23 = -[HMDHomeManager companionReachable](self, "companionReachable");
      _os_log_impl(&dword_2218F0000, v7, OS_LOG_TYPE_INFO, "%{public}@Companion is reachable: %d", buf, 0x12u);

    }
    objc_autoreleasePoolPop(v6);
    -[HMDHomeManager _checkForRemotePeers](self, "_checkForRemotePeers");
    if (!-[HMDHomeManager companionReachable](self, "companionReachable"))
    {
      v17 = 0u;
      v18 = 0u;
      v15 = 0u;
      v16 = 0u;
      -[HMDHomeManager homes](self, "homes", 0);
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      v10 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v15, v19, 16);
      if (v10)
      {
        v11 = v10;
        v12 = *(_QWORD *)v16;
        do
        {
          v13 = 0;
          do
          {
            if (*(_QWORD *)v16 != v12)
              objc_enumerationMutation(v9);
            objc_msgSend(*(id *)(*((_QWORD *)&v15 + 1) + 8 * v13), "uuid");
            v14 = (void *)objc_claimAutoreleasedReturnValue();
            -[HMDHomeManager _teardownRemoteAccessForHomeThroughCompanion:](self, "_teardownRemoteAccessForHomeThroughCompanion:", v14);

            ++v13;
          }
          while (v11 != v13);
          v11 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v15, v19, 16);
        }
        while (v11);
      }

    }
  }

}

- (BOOL)isPairedWithWatch
{
  void *v2;
  char v3;

  -[HMDHomeManager watchManager](self, "watchManager");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "isPairedWithWatch");

  return v3;
}

- (void)checkForRemotePeers
{
  NSObject *v3;
  _QWORD block[5];

  -[HMDHomeManager workQueue](self, "workQueue");
  v3 = objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x24BDAC760];
  block[1] = 3221225472;
  block[2] = __37__HMDHomeManager_checkForRemotePeers__block_invoke;
  block[3] = &unk_24E79C240;
  block[4] = self;
  dispatch_async(v3, block);

}

- (void)_checkForRemotePeers
{
  NSObject *v3;
  _QWORD block[5];

  -[HMDHomeManager workQueue](self, "workQueue");
  v3 = objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x24BDAC760];
  block[1] = 3221225472;
  block[2] = __38__HMDHomeManager__checkForRemotePeers__block_invoke;
  block[3] = &unk_24E79C240;
  block[4] = self;
  dispatch_async(v3, block);

}

- (id)_remotePeers
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t i;
  void *v14;
  void *v15;
  char v16;
  void *v17;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  _BYTE v23[128];
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  isWatch();
  -[HMDHomeManager appleAccountManager](self, "appleAccountManager");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "account");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "devices");
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(MEMORY[0x24BDBCEB8], "arrayWithCapacity:", objc_msgSend(v5, "count"));
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v19 = 0u;
  v20 = 0u;
  v21 = 0u;
  v22 = 0u;
  -[HMDHomeManager appleAccountManager](self, "appleAccountManager", 0);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "account");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "devices");
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  v10 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v19, v23, 16);
  if (v10)
  {
    v11 = v10;
    v12 = *(_QWORD *)v20;
    do
    {
      for (i = 0; i != v11; ++i)
      {
        if (*(_QWORD *)v20 != v12)
          objc_enumerationMutation(v9);
        v14 = *(void **)(*((_QWORD *)&v19 + 1) + 8 * i);
        objc_msgSend(v14, "capabilities");
        v15 = (void *)objc_claimAutoreleasedReturnValue();
        if (objc_msgSend(v15, "isRemoteGatewayCapable"))
        {
          v16 = objc_msgSend(v14, "isCurrentDevice");

          if ((v16 & 1) == 0)
            objc_msgSend(v6, "addObject:", v14);
        }
        else
        {

        }
      }
      v11 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v19, v23, 16);
    }
    while (v11);
  }

  v17 = (void *)objc_msgSend(v6, "copy");
  return v17;
}

- (void)_checkForRemotePeersAndRegisterForRemoteNotifications:(BOOL)a3
{
  _BOOL4 v3;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t i;
  void *v15;
  HMDHomeManager *v16;
  void *v17;
  void *v18;
  uint64_t v19;
  void *v20;
  void *v21;
  void *v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t j;
  void *v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t k;
  void *v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t m;
  void *v40;
  void *v41;
  NSObject *v42;
  void *v43;
  void *v44;
  void *v45;
  NSObject *v46;
  void *v47;
  id v48;
  uint64_t n;
  void *v50;
  void *v51;
  void *v52;
  void *v53;
  NSObject *v54;
  void *v55;
  void *v56;
  void *v57;
  void *v58;
  id v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t ii;
  void *v65;
  uint64_t v66;
  void *v67;
  void *v68;
  NSObject *v69;
  void *v70;
  void *v71;
  NSObject *v72;
  void *v73;
  void *v74;
  uint64_t v75;
  void *v76;
  void *v77;
  void *v78;
  _BOOL8 v79;
  __int128 v80;
  uint64_t v81;
  uint64_t jj;
  void *v83;
  void *v84;
  void *v85;
  int v86;
  void *v87;
  HMDHomeManager *v88;
  NSObject *v89;
  void *v90;
  __CFString *v91;
  void *v92;
  void *v93;
  NSObject *v94;
  void *v95;
  void *v96;
  void *v97;
  void *v98;
  int v99;
  void *v100;
  int v101;
  int v102;
  void *v103;
  NSObject *v104;
  void *v105;
  void *v106;
  void *v107;
  NSObject *v108;
  void *v109;
  void *v110;
  void *v111;
  NSObject *v112;
  void *v113;
  void *v114;
  void *v115;
  void *v116;
  void *v117;
  void *v118;
  void *v119;
  void *v120;
  void *v121;
  void *v122;
  id v123;
  char isKindOfClass;
  void *v125;
  NSObject *v126;
  void *v127;
  void *v128;
  void *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t kk;
  void *v134;
  void *v135;
  void *v136;
  NSObject *v137;
  void *v138;
  __int128 v139;
  void *v140;
  _BOOL4 v141;
  void *v142;
  uint64_t v143;
  id v144;
  id v145;
  id obj;
  id obja;
  void *v148;
  void *v149;
  void *v150;
  uint64_t v151;
  uint64_t v152;
  __CFString *v153;
  HMDHomeManager *v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  __int128 v158;
  __int128 v159;
  __int128 v160;
  __int128 v161;
  __int128 v162;
  __int128 v163;
  __int128 v164;
  __int128 v165;
  __int128 v166;
  __int128 v167;
  __int128 v168;
  __int128 v169;
  __int128 v170;
  __int128 v171;
  __int128 v172;
  __int128 v173;
  __int128 v174;
  __int128 v175;
  __int128 v176;
  __int128 v177;
  __int128 v178;
  __int128 v179;
  __int128 v180;
  __int128 v181;
  __int128 v182;
  __int128 v183;
  __int128 v184;
  __int128 v185;
  __int128 v186;
  uint8_t v187[128];
  uint8_t buf[4];
  void *v189;
  __int16 v190;
  uint64_t v191;
  __int16 v192;
  void *v193;
  __int16 v194;
  void *v195;
  _BYTE v196[128];
  _BYTE v197[128];
  _BYTE v198[128];
  _BYTE v199[128];
  _BYTE v200[128];
  _BYTE v201[128];
  _BYTE v202[128];
  uint64_t v203;

  v3 = a3;
  v203 = *MEMORY[0x24BDAC8D0];
  -[HMDHomeManager unassociatedRemotePeers](self, "unassociatedRemotePeers");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "removeAllObjects");

  -[HMDHomeManager associatedRemotePeers](self, "associatedRemotePeers");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "removeAllObjects");

  isWatch();
  -[HMDHomeManager appleAccountManager](self, "appleAccountManager");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "account");
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  if (v8)
  {
    objc_msgSend(MEMORY[0x24BDBCEB8], "array");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v183 = 0u;
    v184 = 0u;
    v185 = 0u;
    v186 = 0u;
    v154 = self;
    -[HMDHomeManager homes](self, "homes");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v11 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v183, v202, 16);
    if (v11)
    {
      v12 = v11;
      v13 = *(_QWORD *)v184;
      do
      {
        for (i = 0; i != v12; ++i)
        {
          if (*(_QWORD *)v184 != v13)
            objc_enumerationMutation(v10);
          objc_msgSend(*(id *)(*((_QWORD *)&v183 + 1) + 8 * i), "users");
          v15 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v9, "addObjectsFromArray:", v15);

        }
        v12 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v183, v202, 16);
      }
      while (v12);
    }

    v16 = v154;
    -[HMDHomeManager _remotePeers](v154, "_remotePeers");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BE3F260], "productInfo");
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    v19 = objc_msgSend(v18, "productClass");

    v141 = v3;
    if (v19 == 1)
    {
      -[HMDHomeManager watchManager](v154, "watchManager");
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v20, "watches");
      v21 = (void *)objc_claimAutoreleasedReturnValue();

      objc_msgSend(MEMORY[0x24BDBCEF0], "setWithCapacity:", objc_msgSend(v21, "count"));
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      v179 = 0u;
      v180 = 0u;
      v181 = 0u;
      v182 = 0u;
      v23 = v21;
      v24 = objc_msgSend(v23, "countByEnumeratingWithState:objects:count:", &v179, v201, 16);
      if (v24)
      {
        v25 = v24;
        v26 = *(_QWORD *)v180;
        do
        {
          for (j = 0; j != v25; ++j)
          {
            if (*(_QWORD *)v180 != v26)
              objc_enumerationMutation(v23);
            objc_msgSend(*(id *)(*((_QWORD *)&v179 + 1) + 8 * j), "remoteDestinationString");
            v28 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v22, "addObject:", v28);

          }
          v25 = objc_msgSend(v23, "countByEnumeratingWithState:objects:count:", &v179, v201, 16);
        }
        while (v25);
      }
      v148 = v17;

      v177 = 0u;
      v178 = 0u;
      v175 = 0u;
      v176 = 0u;
      -[HMDHomeManager homes](v154, "homes");
      v29 = (void *)objc_claimAutoreleasedReturnValue();
      v30 = objc_msgSend(v29, "countByEnumeratingWithState:objects:count:", &v175, v200, 16);
      if (v30)
      {
        v31 = v30;
        v32 = *(_QWORD *)v176;
        do
        {
          for (k = 0; k != v31; ++k)
          {
            if (*(_QWORD *)v176 != v32)
              objc_enumerationMutation(v29);
            objc_msgSend(*(id *)(*((_QWORD *)&v175 + 1) + 8 * k), "auditDestinationsForNotifications:", v22);
          }
          v31 = objc_msgSend(v29, "countByEnumeratingWithState:objects:count:", &v175, v200, 16);
        }
        while (v31);
      }
      obj = v23;
      v150 = v9;

      v173 = 0u;
      v174 = 0u;
      v171 = 0u;
      v172 = 0u;
      v16 = v154;
      -[HMDHomeManager fullSyncedWatchPeers](v154, "fullSyncedWatchPeers");
      v34 = (void *)objc_claimAutoreleasedReturnValue();
      v35 = (void *)objc_msgSend(v34, "copy");

      v36 = objc_msgSend(v35, "countByEnumeratingWithState:objects:count:", &v171, v199, 16);
      if (v36)
      {
        v37 = v36;
        v38 = *(_QWORD *)v172;
        do
        {
          for (m = 0; m != v37; ++m)
          {
            if (*(_QWORD *)v172 != v38)
              objc_enumerationMutation(v35);
            v40 = *(void **)(*((_QWORD *)&v171 + 1) + 8 * m);
            if ((objc_msgSend(v22, "containsObject:", v40) & 1) == 0)
            {
              v41 = (void *)MEMORY[0x227676638]();
              HMFGetOSLogHandle();
              v42 = objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v42, OS_LOG_TYPE_INFO))
              {
                HMFGetLogIdentifier();
                v43 = (void *)objc_claimAutoreleasedReturnValue();
                *(_DWORD *)buf = 138543618;
                v189 = v43;
                v190 = 2112;
                v191 = (uint64_t)v40;
                _os_log_impl(&dword_2218F0000, v42, OS_LOG_TYPE_INFO, "%{public}@Fully synced watch %@ is no more paired", buf, 0x16u);

              }
              objc_autoreleasePoolPop(v41);
              -[HMDHomeManager fullSyncedWatchPeers](v154, "fullSyncedWatchPeers");
              v44 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v44, "removeObject:", v40);

            }
          }
          v37 = objc_msgSend(v35, "countByEnumeratingWithState:objects:count:", &v171, v199, 16);
        }
        while (v37);
      }

      v17 = v148;
      v9 = v150;
    }
    objc_msgSend(MEMORY[0x24BDBCEF0], "set");
    v149 = (void *)objc_claimAutoreleasedReturnValue();
    v45 = (void *)MEMORY[0x227676638]();
    HMFGetOSLogHandle();
    v46 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v46, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v47 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v189 = v47;
      _os_log_impl(&dword_2218F0000, v46, OS_LOG_TYPE_INFO, "%{public}@Checking for updated list of devices for remote access", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v45);
    v169 = 0u;
    v170 = 0u;
    v167 = 0u;
    v168 = 0u;
    obja = v17;
    v152 = objc_msgSend(obja, "countByEnumeratingWithState:objects:count:", &v167, v198, 16);
    if (v152)
    {
      v48 = *(id *)v168;
      v144 = *(id *)v168;
      do
      {
        for (n = 0; n != v152; ++n)
        {
          if (*(id *)v168 != v48)
            objc_enumerationMutation(obja);
          v50 = *(void **)(*((_QWORD *)&v167 + 1) + 8 * n);
          objc_msgSend(v50, "remoteDestinationString");
          v51 = (void *)objc_claimAutoreleasedReturnValue();

          if (v51)
          {
            objc_msgSend(v50, "remoteDestinationString");
            v52 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v149, "addObject:", v52);

          }
          v53 = (void *)MEMORY[0x227676638]();
          HMFGetOSLogHandle();
          v54 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v54, OS_LOG_TYPE_INFO))
          {
            HMFGetLogIdentifier();
            v55 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 138543618;
            v189 = v55;
            v190 = 2112;
            v191 = (uint64_t)v50;
            _os_log_impl(&dword_2218F0000, v54, OS_LOG_TYPE_INFO, "%{public}@Detected device: %@", buf, 0x16u);

          }
          objc_autoreleasePoolPop(v53);
          objc_msgSend(v50, "remoteDestinationString");
          v56 = (void *)objc_claimAutoreleasedReturnValue();
          v57 = v9;
          objc_msgSend(v9, "hmf_firstObjectWithValue:forKeyPath:", v56, CFSTR("userID"));
          v58 = (void *)objc_claimAutoreleasedReturnValue();

          isWatch();
          if (v58 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
          {
            v59 = v58;
            if ((objc_msgSend(v59, "updateWithDevice:", v50) & 1) != 0 || !objc_msgSend(v59, "configurationState"))
            {
              objc_msgSend(v59, "setConfigurationState:", 2);
            }
            else
            {
              v165 = 0u;
              v166 = 0u;
              v163 = 0u;
              v164 = 0u;
              -[HMDHomeManager homes](v16, "homes");
              v60 = (void *)objc_claimAutoreleasedReturnValue();
              v61 = objc_msgSend(v60, "countByEnumeratingWithState:objects:count:", &v163, v197, 16);
              if (v61)
              {
                v62 = v61;
                v63 = *(_QWORD *)v164;
                do
                {
                  for (ii = 0; ii != v62; ++ii)
                  {
                    if (*(_QWORD *)v164 != v63)
                      objc_enumerationMutation(v60);
                    objc_msgSend(*(id *)(*((_QWORD *)&v163 + 1) + 8 * ii), "usersPendingUserManagementOperations");
                    v65 = (void *)objc_claimAutoreleasedReturnValue();
                    if (objc_msgSend(v65, "containsObject:", v59))
                    {
                      v66 = objc_msgSend(v59, "configurationState");

                      if (v66 == 1)
                        objc_msgSend(v59, "setConfigurationState:", 2);
                    }
                    else
                    {

                    }
                  }
                  v62 = objc_msgSend(v60, "countByEnumeratingWithState:objects:count:", &v163, v197, 16);
                }
                while (v62);
              }

              v16 = v154;
              v48 = v144;
            }

          }
          else
          {
            -[HMDHomeManager unassociatedRemotePeers](v16, "unassociatedRemotePeers");
            v67 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v67, "addObject:", v50);

            v68 = (void *)MEMORY[0x227676638]();
            HMFGetOSLogHandle();
            v69 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v69, OS_LOG_TYPE_INFO))
            {
              HMFGetLogIdentifier();
              v70 = (void *)objc_claimAutoreleasedReturnValue();
              *(_DWORD *)buf = 138543618;
              v189 = v70;
              v190 = 2112;
              v191 = (uint64_t)v50;
              _os_log_impl(&dword_2218F0000, v69, OS_LOG_TYPE_INFO, "%{public}@Adding remote peer, %@, to unassociated list", buf, 0x16u);

            }
            objc_autoreleasePoolPop(v68);
          }

          v9 = v57;
        }
        v152 = objc_msgSend(obja, "countByEnumeratingWithState:objects:count:", &v167, v198, 16);
      }
      while (v152);
    }

    v71 = (void *)MEMORY[0x227676638]();
    HMFGetOSLogHandle();
    v72 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v72, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v73 = (void *)objc_claimAutoreleasedReturnValue();
      -[HMDHomeManager unassociatedRemotePeers](v16, "unassociatedRemotePeers");
      v74 = (void *)objc_claimAutoreleasedReturnValue();
      v75 = objc_msgSend(v74, "count");
      *(_DWORD *)buf = 138543618;
      v189 = v73;
      v190 = 2048;
      v191 = v75;
      _os_log_impl(&dword_2218F0000, v72, OS_LOG_TYPE_INFO, "%{public}@Total unassociated peers %ld", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v71);
    -[HMDHomeManager appleAccountManager](v16, "appleAccountManager");
    v76 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v76, "device");
    v77 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v77, "identifier");
    v78 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(MEMORY[0x24BDBCEB8], "array");
    v140 = (void *)objc_claimAutoreleasedReturnValue();
    v159 = 0u;
    v160 = 0u;
    v161 = 0u;
    v162 = 0u;
    v145 = v9;
    v79 = v141;
    v151 = objc_msgSend(v145, "countByEnumeratingWithState:objects:count:", &v159, v196, 16);
    if (v151)
    {
      v81 = *(_QWORD *)v160;
      *(_QWORD *)&v80 = 138543362;
      v139 = v80;
      v142 = v78;
      v143 = *(_QWORD *)v160;
      do
      {
        for (jj = 0; jj != v151; ++jj)
        {
          if (*(_QWORD *)v160 != v81)
            objc_enumerationMutation(v145);
          v83 = *(void **)(*((_QWORD *)&v159 + 1) + 8 * jj);
          objc_msgSend(v78, "UUIDString", v139);
          v84 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v83, "pairingUsername");
          v85 = (void *)objc_claimAutoreleasedReturnValue();
          v86 = objc_msgSend(v84, "isEqualToString:", v85);

          if (!v86)
          {
            if ((shouldLogPrivateInformation() & 1) != 0)
            {
              objc_msgSend(v83, "userID");
              v153 = (__CFString *)objc_claimAutoreleasedReturnValue();
            }
            else
            {
              v91 = CFSTR("...");
              v153 = CFSTR("...");
            }
            objc_msgSend(v83, "home");
            v92 = (void *)objc_claimAutoreleasedReturnValue();
            v93 = (void *)MEMORY[0x227676638]();
            HMFGetOSLogHandle();
            v94 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v94, OS_LOG_TYPE_INFO))
            {
              HMFGetLogIdentifier();
              v95 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v83, "home");
              v96 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v96, "name");
              v97 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v83, "isRemoteGateway");
              HMFBooleanToString();
              v98 = (void *)objc_claimAutoreleasedReturnValue();
              *(_DWORD *)buf = 138544130;
              v189 = v95;
              v190 = 2112;
              v191 = (uint64_t)v153;
              v192 = 2112;
              v193 = v97;
              v194 = 2112;
              v195 = v98;
              _os_log_impl(&dword_2218F0000, v94, OS_LOG_TYPE_INFO, "%{public}@Existing user: %@, for home: %@, isRemoteGateway: %@", buf, 0x2Au);

              v78 = v142;
              v81 = v143;

              v16 = v154;
            }

            objc_autoreleasePoolPop(v93);
            if (!objc_msgSend(v83, "isRemoteGateway"))
              goto LABEL_110;
            v99 = objc_msgSend(v92, "isOwnerUser");
            if ((v99 & 1) == 0)
              isWatch();
            objc_msgSend(v83, "userID");
            v100 = (void *)objc_claimAutoreleasedReturnValue();
            v101 = objc_msgSend(v149, "containsObject:", v100);
            if (((v101 | v99) & 1) != 0)
            {
              v102 = v101;

              if (!v102)
              {
LABEL_91:
                v16 = v154;
                if (v99)
                {
                  v103 = (void *)MEMORY[0x227676638]();
                  HMFGetOSLogHandle();
                  v104 = objc_claimAutoreleasedReturnValue();
                  if (os_log_type_enabled(v104, OS_LOG_TYPE_INFO))
                  {
                    HMFGetLogIdentifier();
                    v105 = (void *)objc_claimAutoreleasedReturnValue();
                    objc_msgSend(v83, "userID");
                    v106 = (void *)objc_claimAutoreleasedReturnValue();
                    *(_DWORD *)buf = 138543618;
                    v189 = v105;
                    v190 = 2112;
                    v191 = (uint64_t)v106;
                    _os_log_impl(&dword_2218F0000, v104, OS_LOG_TYPE_INFO, "%{public}@Previous associated remote peer %@ has been removed", buf, 0x16u);

                    v16 = v154;
                  }

                  objc_autoreleasePoolPop(v103);
                  v107 = (void *)MEMORY[0x227676638](objc_msgSend(v140, "addObject:", v83));
                  HMFGetOSLogHandle();
                  v108 = objc_claimAutoreleasedReturnValue();
                  if (os_log_type_enabled(v108, OS_LOG_TYPE_DEBUG))
                  {
                    HMFGetLogIdentifier();
                    v109 = (void *)objc_claimAutoreleasedReturnValue();
                    *(_DWORD *)buf = v139;
                    v189 = v109;
                    _os_log_impl(&dword_2218F0000, v108, OS_LOG_TYPE_DEBUG, "%{public}@Remove resident device", buf, 0xCu);

                  }
                  objc_autoreleasePoolPop(v107);
                }
                goto LABEL_110;
              }
            }
            else
            {
              objc_msgSend(v83, "userID");
              v110 = (void *)objc_claimAutoreleasedReturnValue();

              if (!v110)
                goto LABEL_91;
            }
            v111 = (void *)MEMORY[0x227676638]();
            HMFGetOSLogHandle();
            v112 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v112, OS_LOG_TYPE_INFO))
            {
              HMFGetLogIdentifier();
              v113 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v83, "userID");
              v114 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v83, "home");
              v115 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v115, "name");
              v116 = (void *)objc_claimAutoreleasedReturnValue();
              *(_DWORD *)buf = 138543874;
              v189 = v113;
              v190 = 2112;
              v191 = (uint64_t)v114;
              v192 = 2112;
              v193 = v116;
              _os_log_impl(&dword_2218F0000, v112, OS_LOG_TYPE_INFO, "%{public}@Adding remote peer %@ for home %@", buf, 0x20u);

              v79 = v141;
              v78 = v142;

              v81 = v143;
            }

            objc_autoreleasePoolPop(v111);
            -[HMDHomeManager associatedRemotePeers](v154, "associatedRemotePeers");
            v117 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v92, "uuid");
            v118 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v117, "objectForKeyedSubscript:", v118);
            v119 = (void *)objc_claimAutoreleasedReturnValue();

            if (!v119)
            {
              objc_msgSend(MEMORY[0x24BDBCEF0], "set");
              v119 = (void *)objc_claimAutoreleasedReturnValue();
              -[HMDHomeManager associatedRemotePeers](v154, "associatedRemotePeers");
              v120 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v92, "uuid");
              v121 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v120, "setObject:forKeyedSubscript:", v119, v121);

            }
            objc_msgSend(v83, "userID");
            v122 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v119, "addObject:", v122);

            objc_msgSend(v83, "userID");
            v123 = (id)objc_claimAutoreleasedReturnValue();
            if (((objc_msgSend(v149, "containsObject:", v123) | v99) & 1) != 0)
            {
LABEL_108:

            }
            else
            {
              objc_opt_class();
              isKindOfClass = objc_opt_isKindOfClass();

              if ((isKindOfClass & 1) != 0)
              {
                v123 = v83;
                if (!objc_msgSend(v123, "configurationState"))
                {
                  v125 = (void *)MEMORY[0x227676638]();
                  HMFGetOSLogHandle();
                  v126 = objc_claimAutoreleasedReturnValue();
                  if (os_log_type_enabled(v126, OS_LOG_TYPE_INFO))
                  {
                    HMFGetLogIdentifier();
                    v127 = (void *)objc_claimAutoreleasedReturnValue();
                    objc_msgSend(v123, "userID");
                    v128 = (void *)objc_claimAutoreleasedReturnValue();
                    *(_DWORD *)buf = 138543618;
                    v189 = v127;
                    v190 = 2112;
                    v191 = (uint64_t)v128;
                    _os_log_impl(&dword_2218F0000, v126, OS_LOG_TYPE_INFO, "%{public}@[HMDHomeManager] Unknown configuration state, enabling '%@'", buf, 0x16u);

                    v81 = v143;
                  }

                  objc_autoreleasePoolPop(v125);
                  objc_msgSend(v123, "setConfigurationState:", 2);
                }
                goto LABEL_108;
              }
            }

            v16 = v154;
LABEL_110:

            continue;
          }
          v87 = (void *)MEMORY[0x227676638]();
          v88 = v16;
          HMFGetOSLogHandle();
          v89 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v89, OS_LOG_TYPE_INFO))
          {
            HMFGetLogIdentifier();
            v90 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 138543618;
            v189 = v90;
            v190 = 2112;
            v191 = (uint64_t)v83;
            _os_log_impl(&dword_2218F0000, v89, OS_LOG_TYPE_INFO, "%{public}@Skipping resident user representing ourselves: %@", buf, 0x16u);

            v16 = v154;
          }

          objc_autoreleasePoolPop(v87);
        }
        v151 = objc_msgSend(v145, "countByEnumeratingWithState:objects:count:", &v159, v196, 16);
      }
      while (v151);
    }

    v157 = 0u;
    v158 = 0u;
    v155 = 0u;
    v156 = 0u;
    -[HMDHomeManager homes](v16, "homes");
    v129 = (void *)objc_claimAutoreleasedReturnValue();
    v130 = objc_msgSend(v129, "countByEnumeratingWithState:objects:count:", &v155, v187, 16);
    if (v130)
    {
      v131 = v130;
      v132 = *(_QWORD *)v156;
      do
      {
        for (kk = 0; kk != v131; ++kk)
        {
          if (*(_QWORD *)v156 != v132)
            objc_enumerationMutation(v129);
          v134 = *(void **)(*((_QWORD *)&v155 + 1) + 8 * kk);
          -[HMDHomeManager unassociatedRemotePeers](v154, "unassociatedRemotePeers");
          v135 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v134, "notifyNewRemotePeersFound:remoteUsersRemoved:forceRemoteNotificationRegistration:", objc_msgSend(v135, "count") != 0, v140, v79);

        }
        v131 = objc_msgSend(v129, "countByEnumeratingWithState:objects:count:", &v155, v187, 16);
      }
      while (v131);
    }

  }
  else
  {
    v136 = (void *)MEMORY[0x227676638]();
    HMFGetOSLogHandle();
    v137 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v137, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v138 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v189 = v138;
      _os_log_impl(&dword_2218F0000, v137, OS_LOG_TYPE_INFO, "%{public}@No active IDS account, cannot check for remote peers.", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v136);
  }
}

- (void)removeFromUnassociatedPeers:(id)a3 home:(id)a4
{
  id v6;
  id v7;
  NSObject *v8;
  id v9;
  id v10;
  _QWORD block[5];
  id v12;
  id v13;

  v6 = a3;
  v7 = a4;
  -[HMDHomeManager workQueue](self, "workQueue");
  v8 = objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x24BDAC760];
  block[1] = 3221225472;
  block[2] = __51__HMDHomeManager_removeFromUnassociatedPeers_home___block_invoke;
  block[3] = &unk_24E79BBD0;
  block[4] = self;
  v12 = v6;
  v13 = v7;
  v9 = v7;
  v10 = v6;
  dispatch_async(v8, block);

}

- (void)_removeFromUnassociatedPeers:(id)a3 home:(id)a4
{
  id v6;
  id v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t i;
  void *v13;
  void *v14;
  int v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  _BYTE v27[128];
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  v6 = a3;
  v7 = a4;
  -[HMDHomeManager _remotePeers](self, "_remotePeers");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v23 = 0u;
  v24 = 0u;
  v25 = 0u;
  v26 = 0u;
  v9 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v23, v27, 16);
  if (v9)
  {
    v10 = v9;
    v11 = *(_QWORD *)v24;
    do
    {
      for (i = 0; i != v10; ++i)
      {
        if (*(_QWORD *)v24 != v11)
          objc_enumerationMutation(v8);
        v13 = *(void **)(*((_QWORD *)&v23 + 1) + 8 * i);
        objc_msgSend(v13, "remoteDestinationString");
        v14 = (void *)objc_claimAutoreleasedReturnValue();
        v15 = objc_msgSend(v14, "isEqualToString:", v6);

        if (v15)
        {
          -[HMDHomeManager unassociatedRemotePeers](self, "unassociatedRemotePeers");
          v16 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v16, "removeObject:", v13);

          objc_msgSend(v13, "remoteDestinationString");
          v17 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v7, "removeUnconfiguredResidentDeviceWithUserID:", v17);

          if (v7)
          {
            -[HMDHomeManager associatedRemotePeers](self, "associatedRemotePeers");
            v18 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v7, "uuid");
            v19 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v18, "objectForKeyedSubscript:", v19);
            v20 = (void *)objc_claimAutoreleasedReturnValue();

            if (!v20)
            {
              objc_msgSend(MEMORY[0x24BDBCEF0], "set");
              v20 = (void *)objc_claimAutoreleasedReturnValue();
              -[HMDHomeManager associatedRemotePeers](self, "associatedRemotePeers");
              v21 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v7, "uuid");
              v22 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v21, "setObject:forKeyedSubscript:", v20, v22);

            }
            objc_msgSend(v20, "addObject:", v6);

          }
        }
      }
      v10 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v23, v27, 16);
    }
    while (v10);
  }

}

- (void)_removeFromAssociatedPeers:(id)a3 home:(id)a4
{
  id v6;
  id v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t i;
  void *v13;
  void *v14;
  int v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  _BYTE v24[128];
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v6 = a3;
  v7 = a4;
  -[HMDHomeManager _remotePeers](self, "_remotePeers");
  v20 = 0u;
  v21 = 0u;
  v22 = 0u;
  v23 = 0u;
  v8 = (id)objc_claimAutoreleasedReturnValue();
  v9 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v20, v24, 16);
  if (v9)
  {
    v10 = v9;
    v11 = *(_QWORD *)v21;
    while (2)
    {
      for (i = 0; i != v10; ++i)
      {
        if (*(_QWORD *)v21 != v11)
          objc_enumerationMutation(v8);
        v13 = *(void **)(*((_QWORD *)&v20 + 1) + 8 * i);
        objc_msgSend(v13, "remoteDestinationString", (_QWORD)v20);
        v14 = (void *)objc_claimAutoreleasedReturnValue();
        v15 = objc_msgSend(v14, "isEqualToString:", v6);

        if (v15)
        {
          -[HMDHomeManager unassociatedRemotePeers](self, "unassociatedRemotePeers");
          v16 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v16, "addObject:", v13);

          if (v7)
          {
            -[HMDHomeManager associatedRemotePeers](self, "associatedRemotePeers");
            v17 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v7, "uuid");
            v18 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v17, "objectForKeyedSubscript:", v18);
            v19 = (void *)objc_claimAutoreleasedReturnValue();

            if (v19)
              objc_msgSend(v19, "removeObject:", v6);

          }
          goto LABEL_14;
        }
      }
      v10 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v20, v24, 16);
      if (v10)
        continue;
      break;
    }
  }
LABEL_14:

}

- (void)_accessoriesAreLocallyReachableOnTransientDevice:(BOOL)a3 forHome:(id)a4
{
  _BOOL4 v4;
  id v6;
  void *v7;
  NSObject *v8;
  void *v9;
  const char *v10;
  void *v11;
  void *v12;
  void *v13;
  int v14;
  int v15;
  void *v16;
  int v17;
  void *v18;
  int v19;
  void *v20;
  int v21;
  void *v22;
  __int16 v23;
  const char *v24;
  __int16 v25;
  void *v26;
  __int16 v27;
  uint64_t v28;
  uint64_t v29;

  v4 = a3;
  v29 = *MEMORY[0x24BDAC8D0];
  v6 = a4;
  v7 = (void *)MEMORY[0x227676638]();
  HMFGetOSLogHandle();
  v8 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    if (v4)
      v10 = "";
    else
      v10 = "not ";
    objc_msgSend(v6, "UUIDString");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHomeManager unassociatedRemotePeers](self, "unassociatedRemotePeers");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    v21 = 138544130;
    v22 = v9;
    v23 = 2080;
    v24 = v10;
    v25 = 2112;
    v26 = v11;
    v27 = 2048;
    v28 = objc_msgSend(v12, "count");
    _os_log_impl(&dword_2218F0000, v8, OS_LOG_TYPE_INFO, "%{public}@Accessories are %slocally reachable for home %@, peers %lu", (uint8_t *)&v21, 0x2Au);

  }
  objc_autoreleasePoolPop(v7);
  if (v4)
  {
    isWatch();
    -[HMDHomeManager _homeWithUUID:](self, "_homeWithUUID:", v6);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    v14 = objc_msgSend(v13, "isOwnerUser");
    if (v13)
    {
      v15 = v14;
      -[HMDHomeManager unassociatedRemotePeers](self, "unassociatedRemotePeers");
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      if (objc_msgSend(v16, "count"))
        v17 = v15;
      else
        v17 = 0;
      if (v17 != 1 || !objc_msgSend(v13, "allowsRemoteAccess"))
        goto LABEL_16;
      objc_msgSend(v13, "currentUser");
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      v19 = objc_msgSend(v18, "isRemoteAccessAllowed");

      if (v19)
      {
        -[HMDHomeManager identifiersOfAccessoriesForHome:](self, "identifiersOfAccessoriesForHome:", v13);
        v20 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v20, "allObjects");
        v16 = (void *)objc_claimAutoreleasedReturnValue();

        if (objc_msgSend(v16, "count"))
          -[HMDHomeManager _findRemotePeerContainingAccessories:forHome:](self, "_findRemotePeerContainingAccessories:forHome:", v16, v13);
LABEL_16:

      }
    }

  }
}

- (void)atHomeLevelChanged:(int64_t)a3 formerLevel:(int64_t)a4 home:(id)a5
{
  NSObject *v6;
  _QWORD block[5];

  -[HMDHomeManager workQueue](self, "workQueue", a3, a4, a5);
  v6 = objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x24BDAC760];
  block[1] = 3221225472;
  block[2] = __54__HMDHomeManager_atHomeLevelChanged_formerLevel_home___block_invoke;
  block[3] = &unk_24E79C240;
  block[4] = self;
  dispatch_async(v6, block);

}

- (void)_findRemotePeerContainingAccessories:(id)a3 forHome:(id)a4
{
  id v6;
  uint64_t v7;
  __int128 v8;
  uint64_t i;
  void *v10;
  void *v11;
  char v12;
  void *v13;
  void *v14;
  int v15;
  void *v16;
  NSObject *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  HMDRemoteDeviceMessageDestination *v26;
  void *v27;
  HMDRemoteDeviceMessageDestination *v28;
  void *v29;
  NSObject *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  __int128 v35;
  id v36;
  id obj;
  void *v38;
  uint64_t v39;
  _QWORD v40[4];
  id v41;
  void *v42;
  id v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  _QWORD v48[2];
  _QWORD v49[2];
  uint8_t buf[4];
  void *v51;
  __int16 v52;
  void *v53;
  __int16 v54;
  void *v55;
  _BYTE v56[128];
  uint64_t v57;

  v57 = *MEMORY[0x24BDAC8D0];
  v36 = a3;
  v6 = a4;
  if (!isAppleTV())
  {
    v38 = v6;
    v46 = 0u;
    v47 = 0u;
    v44 = 0u;
    v45 = 0u;
    -[HMDHomeManager unassociatedRemotePeers](self, "unassociatedRemotePeers");
    obj = (id)objc_claimAutoreleasedReturnValue();
    v7 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v44, v56, 16);
    if (v7)
    {
      v39 = *(_QWORD *)v45;
      *(_QWORD *)&v8 = 138543874;
      v35 = v8;
      do
      {
        for (i = 0; i != v7; ++i)
        {
          if (*(_QWORD *)v45 != v39)
            objc_enumerationMutation(obj);
          v10 = *(void **)(*((_QWORD *)&v44 + 1) + 8 * i);
          objc_msgSend(v10, "capabilities", v35);
          v11 = (void *)objc_claimAutoreleasedReturnValue();
          v12 = objc_msgSend(v11, "isResidentCapable");

          if ((v12 & 1) == 0)
          {
            -[HMDHomeManager pendingResidentSetupSessions](self, "pendingResidentSetupSessions");
            v13 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v10, "remoteDestinationString");
            v14 = (void *)objc_claimAutoreleasedReturnValue();
            v15 = objc_msgSend(v13, "containsObject:", v14);

            if (v15)
            {
              v16 = (void *)MEMORY[0x227676638]();
              HMFGetOSLogHandle();
              v17 = objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
              {
                HMFGetLogIdentifier();
                v18 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v38, "uuid");
                v19 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v19, "UUIDString");
                v20 = (void *)objc_claimAutoreleasedReturnValue();
                *(_DWORD *)buf = v35;
                v51 = v18;
                v52 = 2112;
                v53 = v10;
                v54 = 2112;
                v55 = v20;
                _os_log_impl(&dword_2218F0000, v17, OS_LOG_TYPE_INFO, "%{public}@We have a pending request to look for unpaired accessories to device, %@, for home: %@, dropping this request", buf, 0x20u);

              }
              objc_autoreleasePoolPop(v16);
            }
            else
            {
              -[HMDHomeManager pendingResidentSetupSessions](self, "pendingResidentSetupSessions");
              v21 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v10, "remoteDestinationString");
              v22 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v21, "addObject:", v22);

              v48[0] = CFSTR("kAccessoryIdentitiesKey");
              v48[1] = CFSTR("kHomeUUID");
              v49[0] = v36;
              objc_msgSend(v38, "uuid");
              v23 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v23, "UUIDString");
              v24 = (void *)objc_claimAutoreleasedReturnValue();
              v49[1] = v24;
              objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v49, v48, 2);
              v25 = (void *)objc_claimAutoreleasedReturnValue();

              v26 = [HMDRemoteDeviceMessageDestination alloc];
              -[HMDHomeManager uuid](self, "uuid");
              v27 = (void *)objc_claimAutoreleasedReturnValue();
              v28 = -[HMDRemoteDeviceMessageDestination initWithTarget:device:](v26, "initWithTarget:device:", v27, v10);

              v29 = (void *)MEMORY[0x227676638]();
              HMFGetOSLogHandle();
              v30 = objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v30, OS_LOG_TYPE_INFO))
              {
                HMFGetLogIdentifier();
                v31 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v38, "uuid");
                v32 = (void *)objc_claimAutoreleasedReturnValue();
                *(_DWORD *)buf = v35;
                v51 = v31;
                v52 = 2112;
                v53 = v10;
                v54 = 2112;
                v55 = v32;
                _os_log_impl(&dword_2218F0000, v30, OS_LOG_TYPE_INFO, "%{public}@Requesting remote gateway, %@, to look for accessories in home %@", buf, 0x20u);

              }
              objc_autoreleasePoolPop(v29);
              objc_msgSend(MEMORY[0x24BE3F1B0], "internalMessageWithName:destination:messagePayload:", CFSTR("kDoYouSeeUnpairedAccessoriesKey"), v28, v25);
              v33 = (void *)objc_claimAutoreleasedReturnValue();
              objc_initWeak((id *)buf, self);
              v40[0] = MEMORY[0x24BDAC760];
              v40[1] = 3221225472;
              v40[2] = __63__HMDHomeManager__findRemotePeerContainingAccessories_forHome___block_invoke;
              v40[3] = &unk_24E79ACA8;
              objc_copyWeak(&v43, (id *)buf);
              v41 = v38;
              v42 = v10;
              objc_msgSend(v33, "setResponseHandler:", v40);
              -[HMDHomeManager messageDispatcher](self, "messageDispatcher");
              v34 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v34, "sendMessage:completionHandler:", v33, 0);

              objc_destroyWeak(&v43);
              objc_destroyWeak((id *)buf);

            }
          }
        }
        v7 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v44, v56, 16);
      }
      while (v7);
    }

    v6 = v38;
  }

}

- (void)_updateHomesAboutNetworkConnectivity:(BOOL)a3
{
  _BOOL8 v3;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _BYTE v14[128];
  uint64_t v15;

  v3 = a3;
  v15 = *MEMORY[0x24BDAC8D0];
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  -[HMDHomeManager homes](self, "homes", 0);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
  if (v6)
  {
    v7 = v6;
    v8 = *(_QWORD *)v11;
    do
    {
      v9 = 0;
      do
      {
        if (*(_QWORD *)v11 != v8)
          objc_enumerationMutation(v5);
        objc_msgSend(*(id *)(*((_QWORD *)&v10 + 1) + 8 * v9++), "updateNetworkConnectivity:companionReachable:", v3, -[HMDHomeManager companionReachable](self, "companionReachable"));
      }
      while (v7 != v9);
      v7 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
    }
    while (v7);
  }

}

- (void)_electRemoteGatewayForHomesAfterReachabilityChanges
{
  HMDHomeManager *v2;
  void *v3;
  NSObject *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t i;
  void *v10;
  void *v11;
  NSObject *v12;
  void *v13;
  void *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  void *v19;
  void *v20;
  HMDHomeManager *v21;
  id obj;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint8_t buf[4];
  void *v28;
  __int16 v29;
  void *v30;
  __int16 v31;
  void *v32;
  _BYTE v33[128];
  uint64_t v34;

  v2 = self;
  v34 = *MEMORY[0x24BDAC8D0];
  v3 = (void *)MEMORY[0x227676638](self, a2);
  HMFGetOSLogHandle();
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    HMFGetLogIdentifier();
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543362;
    v28 = v5;
    _os_log_impl(&dword_2218F0000, v4, OS_LOG_TYPE_DEFAULT, "%{public}@Reachability changed from not reachable to reachable, checking remote access setup for all homes", buf, 0xCu);

  }
  objc_autoreleasePoolPop(v3);
  v25 = 0u;
  v26 = 0u;
  v23 = 0u;
  v24 = 0u;
  -[HMDHomeManager homes](v2, "homes");
  obj = (id)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v23, v33, 16);
  if (v6)
  {
    v7 = v6;
    v8 = *(_QWORD *)v24;
    v21 = v2;
    do
    {
      for (i = 0; i != v7; ++i)
      {
        if (*(_QWORD *)v24 != v8)
          objc_enumerationMutation(obj);
        v10 = *(void **)(*((_QWORD *)&v23 + 1) + 8 * i);
        v11 = (void *)MEMORY[0x227676638]();
        HMFGetOSLogHandle();
        v12 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
        {
          HMFGetLogIdentifier();
          v13 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v10, "name");
          v14 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v10, "uuid");
          v15 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v15, "UUIDString");
          v16 = v7;
          v17 = v8;
          v18 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543874;
          v28 = v13;
          v29 = 2112;
          v30 = v14;
          v31 = 2112;
          v32 = v18;
          _os_log_impl(&dword_2218F0000, v12, OS_LOG_TYPE_INFO, "%{public}@Triggering election of resident device for remote access for home %@ (%@)", buf, 0x20u);

          v8 = v17;
          v7 = v16;
          v2 = v21;

        }
        objc_autoreleasePoolPop(v11);
        objc_msgSend(v10, "uuid");
        v19 = (void *)objc_claimAutoreleasedReturnValue();
        -[HMDHomeManager _teardownRemoteAccessForHome:](v2, "_teardownRemoteAccessForHome:", v19);

        objc_msgSend(v10, "uuid");
        v20 = (void *)objc_claimAutoreleasedReturnValue();
        -[HMDHomeManager _electRemoteAccessPeerForHome:](v2, "_electRemoteAccessPeerForHome:", v20);

      }
      v7 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v23, v33, 16);
    }
    while (v7);
  }

}

- (void)_electRemoteAccessPeerForHome:(id)a3
{
  -[HMDHomeManager _electRemoteAccessPeerForHome:retryCount:](self, "_electRemoteAccessPeerForHome:retryCount:", a3, 0);
}

- (void)_electRemoteAccessDeviceForHome:(id)a3 retryCount:(unint64_t)a4
{
  void *v4;
  void *v5;
  NSObject *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  NSObject *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  NSObject *v17;
  void *v18;
  uint64_t (*v19)(uint64_t, uint64_t);
  uint64_t v20;
  uint64_t i;
  uint64_t v22;
  void *v23;
  void *v24;
  id v25;
  id v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  id v35;
  id v36;
  void *v37;
  NSObject *v38;
  void *v39;
  void *v40;
  NSObject *v41;
  id v42;
  void *v43;
  NSObject *v44;
  id v45;
  void *v46;
  void *v47;
  id v48;
  void *v49;
  int v51;
  NSObject *group;
  void *v53;
  id obj;
  uint64_t v56;
  id v57;
  _QWORD block[4];
  id v59;
  HMDHomeManager *v60;
  id v61;
  id v62;
  id v63;
  _BYTE *v64;
  _QWORD *v65;
  unint64_t v66;
  int v67;
  _QWORD v68[5];
  id v69;
  uint64_t v70;
  id v71;
  id v72;
  NSObject *v73;
  _BYTE *v74;
  _QWORD *v75;
  _QWORD *v76;
  id v77[2];
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  _QWORD v82[5];
  id v83;
  _QWORD v84[3];
  char v85;
  _QWORD v86[3];
  _QWORD v87[3];
  const __CFString *v88;
  id v89;
  const __CFString *v90;
  void *v91;
  _BYTE location[12];
  __int16 v93;
  void *v94;
  __int16 v95;
  uint64_t v96;
  uint8_t v97[128];
  _BYTE buf[24];
  uint64_t (*v99)(uint64_t, uint64_t);
  __int128 v100;
  uint64_t v101;

  v101 = *MEMORY[0x24BDAC8D0];
  v48 = a3;
  -[HMDHomeManager _homeWithUUID:](self, "_homeWithUUID:");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v57 = v4;
  if (v4)
  {
    if (objc_msgSend(v4, "isResidentSupported"))
    {
      v5 = (void *)MEMORY[0x227676638]();
      HMFGetOSLogHandle();
      v6 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v7 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        *(_QWORD *)&buf[4] = v7;
        *(_WORD *)&buf[12] = 2112;
        *(_QWORD *)&buf[14] = v48;
        _os_log_impl(&dword_2218F0000, v6, OS_LOG_TYPE_INFO, "%{public}@Skipping electing remote access for home, %@, with a resident device", buf, 0x16u);

      }
      objc_autoreleasePoolPop(v5);
    }
    else
    {
      -[HMDHomeManager associatedRemotePeers](self, "associatedRemotePeers");
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v8, "objectForKeyedSubscript:", v48);
      v47 = (void *)objc_claimAutoreleasedReturnValue();

      if (objc_msgSend(v47, "count"))
      {
        -[HMDHomeManager pendingRemoteSessions](self, "pendingRemoteSessions");
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v9, "allValues");
        v46 = (void *)objc_claimAutoreleasedReturnValue();

        if (objc_msgSend(v46, "containsObject:", v48))
        {
          v10 = (void *)MEMORY[0x227676638]();
          HMFGetOSLogHandle();
          v11 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
          {
            HMFGetLogIdentifier();
            v12 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v48, "UUIDString");
            v13 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 138543618;
            *(_QWORD *)&buf[4] = v12;
            *(_WORD *)&buf[12] = 2112;
            *(_QWORD *)&buf[14] = v13;
            _os_log_impl(&dword_2218F0000, v11, OS_LOG_TYPE_INFO, "%{public}@We have a pending election for home: %@, dropping this request", buf, 0x16u);

          }
          objc_autoreleasePoolPop(v10);
        }
        else
        {
          -[HMDHomeManager identifiersOfAccessoriesForHome:](self, "identifiersOfAccessoriesForHome:", v57);
          v14 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v14, "allObjects");
          v49 = (void *)objc_claimAutoreleasedReturnValue();

          objc_msgSend(MEMORY[0x24BDD1880], "UUID");
          v53 = (void *)objc_claimAutoreleasedReturnValue();
          -[HMDHomeManager pendingRemoteSessions](self, "pendingRemoteSessions");
          v15 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v15, "setObject:forKeyedSubscript:", v48, v53);

          v16 = (void *)MEMORY[0x227676638]();
          HMFGetOSLogHandle();
          v17 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
          {
            HMFGetLogIdentifier();
            v18 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v53, "UUIDString");
            v19 = (uint64_t (*)(uint64_t, uint64_t))objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 138544130;
            *(_QWORD *)&buf[4] = v18;
            *(_WORD *)&buf[12] = 2112;
            *(_QWORD *)&buf[14] = v57;
            *(_WORD *)&buf[22] = 2112;
            v99 = v19;
            LOWORD(v100) = 2048;
            *(_QWORD *)((char *)&v100 + 2) = objc_msgSend(v47, "count");
            _os_log_impl(&dword_2218F0000, v17, OS_LOG_TYPE_INFO, "%{public}@Spinning up remote access for home, %@, for session %@, pinging total of %lu peers", buf, 0x2Au);

          }
          objc_autoreleasePoolPop(v16);
          v84[0] = 0;
          v84[1] = v84;
          v84[2] = 0x2020000000;
          v85 = 0;
          *(_QWORD *)buf = 0;
          *(_QWORD *)&buf[8] = buf;
          *(_QWORD *)&buf[16] = 0x3032000000;
          v99 = __Block_byref_object_copy__227383;
          *(_QWORD *)&v100 = __Block_byref_object_dispose__227384;
          *((_QWORD *)&v100 + 1) = 0;
          v82[0] = 0;
          v82[1] = v82;
          v82[2] = 0x3032000000;
          v82[3] = __Block_byref_object_copy__227383;
          v82[4] = __Block_byref_object_dispose__227384;
          v83 = 0;
          group = dispatch_group_create();
          v78 = 0u;
          v79 = 0u;
          v80 = 0u;
          v81 = 0u;
          obj = v47;
          v20 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v78, v97, 16);
          if (v20)
          {
            v51 = 0;
            v56 = *(_QWORD *)v79;
            do
            {
              for (i = 0; i != v20; ++i)
              {
                if (*(_QWORD *)v79 != v56)
                  objc_enumerationMutation(obj);
                v22 = *(_QWORD *)(*((_QWORD *)&v78 + 1) + 8 * i);
                objc_msgSend(v57, "users");
                v23 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v23, "hmf_firstObjectWithValue:forKeyPath:", v22, CFSTR("userID"));
                v24 = (void *)objc_claimAutoreleasedReturnValue();

                objc_opt_class();
                if ((objc_opt_isKindOfClass() & 1) != 0)
                {
                  v25 = v24;
                  if (objc_msgSend(v25, "configurationState") == 2)
                  {
                    v90 = CFSTR("kRequestedCapabilitiesKey");
                    v88 = CFSTR("kHomedVersionKey");
                    v26 = (id)homedVersion;
                    v89 = v26;
                    objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", &v89, &v88, 1);
                    v27 = (void *)objc_claimAutoreleasedReturnValue();
                    v91 = v27;
                    objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", &v91, &v90, 1);
                    v28 = (void *)objc_claimAutoreleasedReturnValue();

                    v86[0] = CFSTR("kHomeUUID");
                    objc_msgSend(v57, "uuid");
                    v29 = (void *)objc_claimAutoreleasedReturnValue();
                    objc_msgSend(v29, "UUIDString");
                    v30 = (void *)objc_claimAutoreleasedReturnValue();
                    v87[0] = v30;
                    v87[1] = v49;
                    v86[1] = CFSTR("kAccessoryIdentitiesKey");
                    v86[2] = CFSTR("kRemoteSessionIdentifierKey");
                    objc_msgSend(v53, "UUIDString");
                    v31 = (void *)objc_claimAutoreleasedReturnValue();
                    v87[2] = v31;
                    objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v87, v86, 3);
                    v32 = (void *)objc_claimAutoreleasedReturnValue();

                    objc_msgSend(MEMORY[0x24BE3F1B0], "internalMessageWithName:messagePayload:", CFSTR("kAreYouAtHomeRequestKey"), v32);
                    v33 = (void *)objc_claimAutoreleasedReturnValue();
                    dispatch_group_enter(group);
                    objc_initWeak((id *)location, self);
                    -[HMDHomeManager workQueue](self, "workQueue");
                    v34 = (void *)objc_claimAutoreleasedReturnValue();
                    v68[0] = MEMORY[0x24BDAC760];
                    v68[1] = 3221225472;
                    v68[2] = __61__HMDHomeManager__electRemoteAccessDeviceForHome_retryCount___block_invoke;
                    v68[3] = &unk_24E796838;
                    v68[4] = self;
                    v35 = v33;
                    v69 = v35;
                    v70 = v22;
                    objc_copyWeak(v77, (id *)location);
                    v71 = v57;
                    v74 = buf;
                    v75 = v82;
                    v36 = v53;
                    v77[1] = (id)a4;
                    v72 = v36;
                    v76 = v84;
                    v73 = group;
                    -[HMDHomeManager electDeviceForUser:destination:deviceCapabilities:queue:completionHandler:](self, "electDeviceForUser:destination:deviceCapabilities:queue:completionHandler:", v22, v22, v28, v34, v68);

                    objc_destroyWeak(v77);
                    objc_destroyWeak((id *)location);

                  }
                  else
                  {
                    v40 = (void *)MEMORY[0x227676638]();
                    HMFGetOSLogHandle();
                    v41 = (id)objc_claimAutoreleasedReturnValue();
                    if (os_log_type_enabled(v41, OS_LOG_TYPE_INFO))
                    {
                      HMFGetLogIdentifier();
                      v42 = (id)objc_claimAutoreleasedReturnValue();
                      objc_msgSend(v25, "displayName");
                      v43 = (void *)objc_claimAutoreleasedReturnValue();
                      *(_DWORD *)location = 138543618;
                      *(_QWORD *)&location[4] = v42;
                      v93 = 2112;
                      v94 = v43;
                      _os_log_impl(&dword_2218F0000, v41, OS_LOG_TYPE_INFO, "%{public}@Skipping resident %@ since it is disabled", location, 0x16u);

                    }
                    objc_autoreleasePoolPop(v40);
                    ++v51;
                  }

                }
                else
                {
                  v37 = (void *)MEMORY[0x227676638]();
                  HMFGetOSLogHandle();
                  v38 = (id)objc_claimAutoreleasedReturnValue();
                  if (os_log_type_enabled(v38, OS_LOG_TYPE_ERROR))
                  {
                    HMFGetLogIdentifier();
                    v39 = (void *)objc_claimAutoreleasedReturnValue();
                    *(_DWORD *)location = 138543874;
                    *(_QWORD *)&location[4] = v39;
                    v93 = 2112;
                    v94 = v24;
                    v95 = 2112;
                    v96 = v22;
                    _os_log_impl(&dword_2218F0000, v38, OS_LOG_TYPE_ERROR, "%{public}@Found user %@ when looking for a resident user if userID %@", location, 0x20u);

                  }
                  objc_autoreleasePoolPop(v37);
                }

              }
              v20 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v78, v97, 16);
            }
            while (v20);
          }
          else
          {
            v51 = 0;
          }

          -[HMDHomeManager workQueue](self, "workQueue");
          v44 = objc_claimAutoreleasedReturnValue();
          block[0] = MEMORY[0x24BDAC760];
          block[1] = 3221225472;
          block[2] = __61__HMDHomeManager__electRemoteAccessDeviceForHome_retryCount___block_invoke_846;
          block[3] = &unk_24E796860;
          v59 = v53;
          v60 = self;
          v67 = v51;
          v61 = obj;
          v62 = v48;
          v64 = buf;
          v63 = v57;
          v65 = v84;
          v66 = a4;
          v45 = v53;
          dispatch_group_notify(group, v44, block);

          _Block_object_dispose(v82, 8);
          _Block_object_dispose(buf, 8);

          _Block_object_dispose(v84, 8);
        }

      }
    }
    v4 = v57;
  }

}

- (void)_electCompanionForRemoteAccess:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  NSObject *v12;
  void *v13;
  void *v14;
  NSObject *v15;
  void *v16;
  int v17;
  void *v18;
  __int16 v19;
  id v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  v4 = a3;
  -[HMDHomeManager _homeWithUUID:](self, "_homeWithUUID:", v4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  if (v5)
  {
    -[HMDHomeManager associatedRemotePeers](self, "associatedRemotePeers");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "objectForKeyedSubscript:", v4);
    v7 = (void *)objc_claimAutoreleasedReturnValue();

    if (objc_msgSend(v7, "count"))
    {
      objc_msgSend(v7, "anyObject");
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      +[HMDDevice deviceWithDestination:](HMDDevice, "deviceWithDestination:", v8);
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      -[HMDHomeManager messageDispatcher](self, "messageDispatcher");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v10, "setCompanionDevice:forHome:", v9, v5);

    }
    else
    {
      v14 = (void *)MEMORY[0x227676638]();
      HMFGetOSLogHandle();
      v15 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v16 = (void *)objc_claimAutoreleasedReturnValue();
        v17 = 138543618;
        v18 = v16;
        v19 = 2112;
        v20 = v4;
        _os_log_impl(&dword_2218F0000, v15, OS_LOG_TYPE_INFO, "%{public}@There are no remote peers for this home: %@", (uint8_t *)&v17, 0x16u);

      }
      objc_autoreleasePoolPop(v14);
      -[HMDHomeManager _teardownRemoteAccessForHomeThroughCompanion:](self, "_teardownRemoteAccessForHomeThroughCompanion:", v4);
    }

  }
  else
  {
    v11 = (void *)MEMORY[0x227676638]();
    HMFGetOSLogHandle();
    v12 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      v17 = 138543618;
      v18 = v13;
      v19 = 2112;
      v20 = v4;
      _os_log_impl(&dword_2218F0000, v12, OS_LOG_TYPE_INFO, "%{public}@Home with UUID not found: %@", (uint8_t *)&v17, 0x16u);

    }
    objc_autoreleasePoolPop(v11);
  }

}

- (void)_handleRemoteSessionTornDown:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  char v8;
  void *v9;
  NSObject *v10;
  void *v11;
  void *v12;
  NSObject *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  NSObject *v21;
  void *v22;
  int v23;
  void *v24;
  __int16 v25;
  void *v26;
  __int16 v27;
  void *v28;
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  v4 = a3;
  objc_msgSend(v4, "uuidForKey:", CFSTR("kHomeUUID"));
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  if (v5)
  {
    -[HMDHomeManager _homeWithUUID:](self, "_homeWithUUID:", v5);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "residentDeviceManager");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = objc_msgSend(v7, "isResidentAvailable");

    if ((v8 & 1) == 0)
    {
      v9 = (void *)MEMORY[0x227676638]();
      HMFGetOSLogHandle();
      v10 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        v23 = 138543618;
        v24 = v11;
        v25 = 2112;
        v26 = v6;
        _os_log_impl(&dword_2218F0000, v10, OS_LOG_TYPE_INFO, "%{public}@Receive notification that remote access was torn down for home %@", (uint8_t *)&v23, 0x16u);

      }
      objc_autoreleasePoolPop(v9);
      if (v6)
      {
        v12 = (void *)MEMORY[0x227676638]();
        HMFGetOSLogHandle();
        v13 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
        {
          HMFGetLogIdentifier();
          v14 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v6, "name");
          v15 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v6, "uuid");
          v16 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v16, "UUIDString");
          v17 = (void *)objc_claimAutoreleasedReturnValue();
          v23 = 138543874;
          v24 = v14;
          v25 = 2112;
          v26 = v15;
          v27 = 2112;
          v28 = v17;
          _os_log_impl(&dword_2218F0000, v13, OS_LOG_TYPE_INFO, "%{public}@Re-electing new resident device for home: %@ (%@)", (uint8_t *)&v23, 0x20u);

        }
        objc_autoreleasePoolPop(v12);
        objc_msgSend(v6, "uuid");
        v18 = (void *)objc_claimAutoreleasedReturnValue();
        -[HMDHomeManager _teardownRemoteAccessForHome:](self, "_teardownRemoteAccessForHome:", v18);

        objc_msgSend(v6, "uuid");
        v19 = (void *)objc_claimAutoreleasedReturnValue();
        -[HMDHomeManager _electRemoteAccessPeerForHome:](self, "_electRemoteAccessPeerForHome:", v19);

      }
    }

  }
  else
  {
    v20 = (void *)MEMORY[0x227676638]();
    HMFGetOSLogHandle();
    v21 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      v23 = 138543362;
      v24 = v22;
      _os_log_impl(&dword_2218F0000, v21, OS_LOG_TYPE_INFO, "%{public}@Receive notification that remote access was torn down for an unknown home, re-checking if we need to spin up remote access for any of our homes", (uint8_t *)&v23, 0xCu);

    }
    objc_autoreleasePoolPop(v20);
    -[HMDHomeManager _checkForRemotePeers](self, "_checkForRemotePeers");
  }

}

- (void)idsServerBagDidUpdate:(id)a3
{
  id v4;
  void *v5;
  HMDHomeManager *v6;
  NSObject *v7;
  void *v8;
  void *v9;
  NSObject *v10;
  void *v11;
  _QWORD block[5];
  uint8_t buf[4];
  void *v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v4 = a3;
  v5 = (void *)MEMORY[0x227676638]();
  v6 = self;
  HMFGetOSLogHandle();
  v7 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543362;
    v14 = v8;
    _os_log_impl(&dword_2218F0000, v7, OS_LOG_TYPE_INFO, "%{public}@idsServerBagDidUpdate delegate called", buf, 0xCu);

  }
  objc_autoreleasePoolPop(v5);
  -[HMDHomeManager capabilitiesController](v6, "capabilitiesController");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "updateCurrentAccessoryCapabilities");

  -[HMDHomeManager workQueue](v6, "workQueue");
  v10 = objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x24BDAC760];
  block[1] = 3221225472;
  block[2] = __40__HMDHomeManager_idsServerBagDidUpdate___block_invoke;
  block[3] = &unk_24E79C240;
  block[4] = v6;
  dispatch_async(v10, block);

  -[HMDHomeManager uuid](v6, "uuid");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHomeManager updateGenerationCounterWithReason:sourceUUID:shouldNotifyClients:](v6, "updateGenerationCounterWithReason:sourceUUID:shouldNotifyClients:", CFSTR("IDS server bag updated"), v11, 1);

}

- (void)_handleQueryMetadata:(id)a3
{
  id v3;
  void *v4;
  void *v5;
  id v6;
  void *v7;
  void *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  id v14;
  const __CFString *v15;
  _QWORD v16[2];

  v16[1] = *MEMORY[0x24BDAC8D0];
  v3 = a3;
  objc_msgSend(v3, "stringForKey:", CFSTR("kMetadataPlistPathKey"));
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v4)
  {
    objc_msgSend(v3, "numberForKey:", CFSTR("kMetadataDictionaryTypeKey"));
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = objc_msgSend(v8, "unsignedIntegerValue");
    if (v9 == 1)
    {
      +[HMDHAPMetadata getSharedInstance](HMDHAPMetadata, "getSharedInstance");
      v10 = objc_claimAutoreleasedReturnValue();
    }
    else
    {
      if (v9)
      {
        v5 = 0;
        goto LABEL_10;
      }
      +[HMDHAPMetadata getBuiltinInstance](HMDHAPMetadata, "getBuiltinInstance");
      v10 = objc_claimAutoreleasedReturnValue();
    }
    v5 = (void *)v10;
LABEL_10:

    goto LABEL_11;
  }
  v14 = 0;
  +[HMDHAPMetadata metadataWithPath:error:](HMDHAPMetadata, "metadataWithPath:error:", v4, &v14);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = v14;
  if (v6)
  {
    v7 = v6;
    objc_msgSend(v3, "respondWithError:", v6);
    goto LABEL_15;
  }
LABEL_11:
  objc_msgSend(v5, "rawPlist");
  v11 = objc_claimAutoreleasedReturnValue();
  v12 = (void *)v11;
  if (v11)
  {
    v15 = CFSTR("kMetadataDictionaryKey");
    v16[0] = v11;
    objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v16, &v15, 1);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "respondWithPayload:", v13);

    v7 = 0;
  }
  else
  {
    objc_msgSend(MEMORY[0x24BDD1540], "errorWithDomain:code:userInfo:", *MEMORY[0x24BDD5BD8], 1001, 0);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "respondWithError:", v7);
  }

LABEL_15:
}

- (void)_handleSetMetadata:(id)a3
{
  id v4;
  uint64_t v5;
  void *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  id v10;

  v4 = a3;
  objc_msgSend(v4, "stringForKey:", CFSTR("kMetadataPlistPathKey"));
  v5 = objc_claimAutoreleasedReturnValue();
  v10 = (id)v5;
  if (v5)
  {
    v6 = (void *)MEMORY[0x24BDBCF48];
    objc_msgSend(CFSTR("file://"), "stringByAppendingString:", v5);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "URLWithString:", v7);
    v8 = objc_claimAutoreleasedReturnValue();

    objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithContentsOfURL:", v8);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHomeManager handleMetadataDictionary:message:](self, "handleMetadataDictionary:message:", v9, v4);

    v4 = (id)v8;
  }
  else
  {
    +[HMDHAPMetadata updateLocalMetadataWithBuiltinMetadata](HMDHAPMetadata, "updateLocalMetadataWithBuiltinMetadata");
    objc_msgSend(v4, "respondWithPayload:", 0);
  }

}

- (void)_handleMetadataSync:(id)a3
{
  id v4;
  void *v5;
  void (**v6)(_QWORD, _QWORD, _QWORD);
  void *v7;
  void *v8;
  void *v9;
  id v10;
  void *v11;
  void (**v12)(_QWORD, _QWORD, _QWORD);
  void (**v13)(_QWORD, _QWORD, _QWORD);
  void *v14;
  HMDHomeManager *v15;
  NSObject *v16;
  void *v17;
  void *v18;
  void *v19;
  HMDHomeManager *v20;
  NSObject *v21;
  void *v22;
  void *v23;
  HMDHomeManager *v24;
  NSObject *v25;
  void *v26;
  void *v27;
  id v28;
  const __CFString *v29;
  uint64_t v30;
  const __CFString *v31;
  uint64_t v32;
  uint8_t buf[4];
  void *v34;
  __int16 v35;
  id v36;
  uint64_t v37;

  v37 = *MEMORY[0x24BDAC8D0];
  v4 = a3;
  if (objc_msgSend(v4, "remoteRestriction") == 4)
  {
    objc_msgSend(v4, "dataForKey:", CFSTR("kHAPMetadataDataKey"));
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "hmd_uncompressedData");
    v6 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();

    v7 = (void *)MEMORY[0x24BDD1620];
    +[HMDHAPMetadataModel allowedTypes](HMDHAPMetadataModel, "allowedTypes");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v28 = 0;
    objc_msgSend(v7, "unarchivedObjectOfClasses:fromData:error:", v8, v6, &v28);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v10 = v28;

    if (v6 && v9)
    {
      -[HMDHomeManager handleMetadataDictionary:message:](self, "handleMetadataDictionary:message:", v9, 0);
      objc_msgSend(v4, "responseHandler");
      v11 = (void *)objc_claimAutoreleasedReturnValue();

      if (!v11)
      {
LABEL_19:

        goto LABEL_20;
      }
      objc_msgSend(v4, "responseHandler");
      v12 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
      v29 = CFSTR("kDataSyncResponseAckKey");
      v30 = MEMORY[0x24BDBD1C8];
      objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", &v30, &v29, 1);
      v13 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
      v12[2](v12, 0, v13);
    }
    else
    {
      v19 = (void *)MEMORY[0x227676638]();
      v20 = self;
      HMFGetOSLogHandle();
      v21 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v22 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543362;
        v34 = v22;
        _os_log_impl(&dword_2218F0000, v21, OS_LOG_TYPE_ERROR, "%{public}@Failed to receive metadata update", buf, 0xCu);

      }
      objc_autoreleasePoolPop(v19);
      if (v6)
      {
        v23 = (void *)MEMORY[0x227676638]();
        v24 = v20;
        HMFGetOSLogHandle();
        v25 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
        {
          HMFGetLogIdentifier();
          v26 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543618;
          v34 = v26;
          v35 = 2112;
          v36 = v10;
          _os_log_impl(&dword_2218F0000, v25, OS_LOG_TYPE_ERROR, "%{public}@Failed to unarchive hap metadata model from metadata data: %@", buf, 0x16u);

        }
        objc_autoreleasePoolPop(v23);
      }
      objc_msgSend(v4, "responseHandler");
      v27 = (void *)objc_claimAutoreleasedReturnValue();

      if (!v27)
        goto LABEL_19;
      objc_msgSend(MEMORY[0x24BDD1540], "hmErrorWithCode:", 3);
      v12 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "responseHandler");
      v13 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
      v13[2](v13, v12, 0);
    }

    goto LABEL_19;
  }
  v14 = (void *)MEMORY[0x227676638]();
  v15 = self;
  HMFGetOSLogHandle();
  v16 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543618;
    v34 = v17;
    v35 = 2112;
    v36 = v4;
    _os_log_impl(&dword_2218F0000, v16, OS_LOG_TYPE_INFO, "%{public}@Dropping metadata sync: %@", buf, 0x16u);

  }
  objc_autoreleasePoolPop(v14);
  objc_msgSend(v4, "responseHandler");
  v18 = (void *)objc_claimAutoreleasedReturnValue();

  if (v18)
  {
    objc_msgSend(v4, "responseHandler");
    v6 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
    v31 = CFSTR("kDataSyncResponseAckKey");
    v32 = MEMORY[0x24BDBD1C8];
    objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", &v32, &v31, 1);
    v10 = (id)objc_claimAutoreleasedReturnValue();
    ((void (**)(_QWORD, _QWORD, id))v6)[2](v6, 0, v10);
LABEL_20:

  }
}

- (void)_handleHomeManagerSyncWalletKeysPassSerialNumbersMessage:(id)a3
{
  __CFString *v4;
  NSObject *v5;
  void *v6;
  void *v7;
  HMDHomeManager *v8;
  NSObject *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  HMDHomeManager *v17;
  NSObject *v18;
  void *v19;
  void *v20;
  void *v21;
  const __CFString *v22;
  uint64_t v23;
  uint8_t buf[4];
  void *v25;
  __int16 v26;
  void *v27;
  __int16 v28;
  const __CFString *v29;
  __int16 v30;
  void *v31;
  uint64_t v32;

  v32 = *MEMORY[0x24BDAC8D0];
  v4 = (__CFString *)a3;
  -[HMDHomeManager workQueue](self, "workQueue");
  v5 = objc_claimAutoreleasedReturnValue();
  dispatch_assert_queue_V2(v5);

  objc_msgSend(MEMORY[0x24BE3F178], "internalOnlyInitializer");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = (void *)MEMORY[0x227676638]();
  v8 = self;
  HMFGetOSLogHandle();
  v9 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "UUID");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543874;
    v25 = v10;
    v26 = 2112;
    v27 = v11;
    v28 = 2112;
    v29 = v4;
    _os_log_impl(&dword_2218F0000, v9, OS_LOG_TYPE_INFO, "%{public}@[NewFlow: %@] Handling message to sync wallet keys pass serial numbers: %@", buf, 0x20u);

  }
  objc_autoreleasePoolPop(v7);
  -[__CFString arrayForKey:](v4, "arrayForKey:", CFSTR("HMDHomeMangerMessageKeyHomeWalletKeysPassSerialNumbers"));
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v12, "na_map:", &__block_literal_global_853);
  v13 = (void *)objc_claimAutoreleasedReturnValue();

  if (v13)
  {
    objc_msgSend(MEMORY[0x24BDBCF20], "setWithArray:", v13);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHomeManager removeHomeWalletKeysExcludingSerialNumbers:flow:](v8, "removeHomeWalletKeysExcludingSerialNumbers:flow:", v14, v6);
    v22 = CFSTR("kDataSyncResponseAckKey");
    v23 = MEMORY[0x24BDBD1C8];
    objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", &v23, &v22, 1);
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    -[__CFString respondWithPayload:](v4, "respondWithPayload:", v15);

  }
  else
  {
    v16 = (void *)MEMORY[0x227676638]();
    v17 = v8;
    HMFGetOSLogHandle();
    v18 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v6, "UUID");
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      -[__CFString messagePayload](v4, "messagePayload");
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138544130;
      v25 = v19;
      v26 = 2112;
      v27 = v20;
      v28 = 2112;
      v29 = CFSTR("HMDHomeMangerMessageKeyHomeWalletKeysPassSerialNumbers");
      v30 = 2112;
      v31 = v21;
      _os_log_impl(&dword_2218F0000, v18, OS_LOG_TYPE_ERROR, "%{public}@[Flow: %@] Payload of message to sync wallet keys pass serial numbers is missing key %@: %@", buf, 0x2Au);

    }
    objc_autoreleasePoolPop(v16);
    objc_msgSend(MEMORY[0x24BDD1540], "hmErrorWithCode:", 3);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    -[__CFString respondWithError:](v4, "respondWithError:", v14);
  }

}

- (void)handleMetadataDictionary:(id)a3 message:(id)a4
{
  id v6;
  id v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  NSObject *v13;
  void *v14;
  void *v15;
  void (**v16)(_QWORD, _QWORD, _QWORD);
  void *v17;
  int v18;
  void *v19;
  __int16 v20;
  id v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  v6 = a3;
  v7 = a4;
  +[HMDHAPMetadataModel modelWithDictionary:](HMDHAPMetadataModel, "modelWithDictionary:", v6);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  if (v8)
  {
    -[HMDHomeManager backingStore](self, "backingStore");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    +[HMDBackingStoreTransactionOptions defaultMetadataCloudOptions](HMDBackingStoreTransactionOptions, "defaultMetadataCloudOptions");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "transaction:options:", CFSTR("MetadataUpdate"), v10);
    v11 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v11, "add:withMessage:", v8, v7);
    objc_msgSend(v11, "run");

  }
  else
  {
    v12 = (void *)MEMORY[0x227676638]();
    HMFGetOSLogHandle();
    v13 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      v18 = 138543618;
      v19 = v14;
      v20 = 2112;
      v21 = v6;
      _os_log_impl(&dword_2218F0000, v13, OS_LOG_TYPE_ERROR, "%{public}@Failed to generate metadata model object from dictionary %@", (uint8_t *)&v18, 0x16u);

    }
    objc_autoreleasePoolPop(v12);
    objc_msgSend(v7, "responseHandler");
    v15 = (void *)objc_claimAutoreleasedReturnValue();

    if (v15)
    {
      objc_msgSend(v7, "responseHandler");
      v16 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x24BDD1540], "hmErrorWithCode:", 3);
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      ((void (**)(_QWORD, void *, _QWORD))v16)[2](v16, v17, 0);

    }
  }

}

- (void)_notifyMetadata:(id)a3 limitToSPIClients:(BOOL)a4 message:(id)a5 invokeResponseHandler:(BOOL)a6
{
  _BOOL8 v7;
  id v10;
  id v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  id v24;
  _QWORD v25[4];
  id v26;
  BOOL v27;
  _QWORD v28[3];
  _QWORD v29[4];

  v7 = a4;
  v29[3] = *MEMORY[0x24BDAC8D0];
  v10 = a5;
  v28[0] = CFSTR("kMetadataInfoVersionKey");
  v11 = a3;
  objc_msgSend(v11, "version");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  v29[0] = v12;
  v28[1] = CFSTR("kMetadataInfoSchemaVersionKey");
  objc_msgSend(v11, "schemaVersion");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  v29[1] = v13;
  v28[2] = CFSTR("kHAPMetadataDataKey");
  objc_msgSend(v11, "xpcData:", v7);
  v14 = (void *)objc_claimAutoreleasedReturnValue();

  v29[2] = v14;
  objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v29, v28, 3);
  v15 = (void *)objc_claimAutoreleasedReturnValue();

  if (v7)
  {
    v16 = (void *)MEMORY[0x24BE3F1B0];
    objc_msgSend(v10, "identifier");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v16, "entitledMessageWithName:identifier:messagePayload:", CFSTR("kMetadataChangedNotificationKey"), v17, v15);
    v18 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v19 = (void *)MEMORY[0x24BE3F1D0];
    -[HMDHomeManager messageDestination](self, "messageDestination");
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v19, "messageWithName:destination:payload:", CFSTR("kMetadataChangedNotificationKey"), v20, v15);
    v18 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v10, "identifier");
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v18, "setIdentifier:", v21);

    objc_msgSend(v18, "setRemote:", objc_msgSend(v10, "isRemote"));
  }
  -[HMDHomeManager messageDispatcher](self, "messageDispatcher");
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHomeManager uuid](self, "uuid");
  v23 = (void *)objc_claimAutoreleasedReturnValue();
  v25[0] = MEMORY[0x24BDAC760];
  v25[1] = 3221225472;
  v25[2] = __82__HMDHomeManager__notifyMetadata_limitToSPIClients_message_invokeResponseHandler___block_invoke;
  v25[3] = &unk_24E7968C8;
  v27 = a6;
  v26 = v10;
  v24 = v10;
  objc_msgSend(v22, "sendMessage:target:andInvokeCompletionHandler:", v18, v23, v25);

}

- (void)processMetadataModel:(id)a3 message:(id)a4
{
  id v5;
  void *v6;
  void *v7;
  NSObject *v8;
  void *v9;
  void *v10;
  void *v11;
  unint64_t v12;
  void *v13;
  uint64_t v14;
  void *v15;
  void *v16;
  unint64_t v17;
  void *v18;
  void *v19;
  uint64_t v20;
  void *v21;
  NSObject *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  id v27;
  void *v28;
  NSObject *v29;
  NSObject *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void (**v36)(_QWORD, _QWORD, _QWORD);
  void *v37;
  NSObject *v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  void (**v43)(_QWORD, _QWORD, _QWORD);
  void *v44;
  void *v45;
  void *v46;
  void *v47;
  NSObject *v48;
  void *v49;
  _BOOL4 v50;
  const char *v51;
  id v53;
  id v54;
  uint8_t buf[4];
  void *v56;
  __int16 v57;
  unint64_t v58;
  __int16 v59;
  uint64_t v60;
  __int16 v61;
  unint64_t v62;
  __int16 v63;
  uint64_t v64;
  uint64_t v65;

  v65 = *MEMORY[0x24BDAC8D0];
  v5 = a3;
  v53 = a4;
  objc_msgSend(v53, "transactionResult");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = (void *)MEMORY[0x227676638]();
  HMFGetOSLogHandle();
  v8 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    +[HMDBackingStoreTransactionOptions stringForHMDBackingStoreTransactionSource:](HMDBackingStoreTransactionActions, "stringForHMDBackingStoreTransactionSource:", objc_msgSend(v6, "source"));
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543618;
    v56 = v9;
    v57 = 2112;
    v58 = (unint64_t)v10;
    _os_log_impl(&dword_2218F0000, v8, OS_LOG_TYPE_INFO, "%{public}@Receiving metadata model from %@", buf, 0x16u);

  }
  objc_autoreleasePoolPop(v7);
  objc_msgSend(v5, "metadataVersion");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v12 = objc_msgSend(v11, "unsignedIntegerValue");

  objc_msgSend(v5, "schemaVersion");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  v14 = objc_msgSend(v13, "unsignedIntegerValue");

  +[HMDHAPMetadata getSharedInstance](HMDHAPMetadata, "getSharedInstance");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v15, "version");
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  v17 = objc_msgSend(v16, "unsignedIntegerValue");

  +[HMDHAPMetadata getSharedInstance](HMDHAPMetadata, "getSharedInstance");
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v18, "schemaVersion");
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  v20 = objc_msgSend(v19, "unsignedIntegerValue");

  v21 = (void *)MEMORY[0x227676638]();
  HMFGetOSLogHandle();
  v22 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v22, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138544386;
    v56 = v23;
    v57 = 2048;
    v58 = v12;
    v59 = 2048;
    v60 = v14;
    v61 = 2048;
    v62 = v17;
    v63 = 2048;
    v64 = v20;
    _os_log_impl(&dword_2218F0000, v22, OS_LOG_TYPE_INFO, "%{public}@The new metadata has version %tu, schema version %tu, current version %tu, schema %tu", buf, 0x34u);

  }
  objc_autoreleasePoolPop(v21);
  if (v20 != v14)
  {
    v37 = (void *)MEMORY[0x227676638]();
    HMFGetOSLogHandle();
    v38 = objc_claimAutoreleasedReturnValue();
    v24 = v6;
    if (os_log_type_enabled(v38, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v39 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v56 = v39;
      _os_log_impl(&dword_2218F0000, v38, OS_LOG_TYPE_ERROR, "%{public}@Schema is compatible, not processing this metadata.", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v37);
    v31 = v53;
    goto LABEL_34;
  }
  v24 = v6;
  if (v12 <= v17)
  {
    if (v12 >= v17)
    {
      v31 = v53;
      if (+[HMDHAPMetadata shouldUploadToCloudAfterHomedReady](HMDHAPMetadata, "shouldUploadToCloudAfterHomedReady")|| v12 == v17)
      {
        v47 = (void *)MEMORY[0x227676638]();
        HMFGetOSLogHandle();
        v48 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v48, OS_LOG_TYPE_INFO))
        {
          HMFGetLogIdentifier();
          v49 = (void *)objc_claimAutoreleasedReturnValue();
          v50 = +[HMDHAPMetadata shouldUploadToCloudAfterHomedReady](HMDHAPMetadata, "shouldUploadToCloudAfterHomedReady");
          v51 = "NO";
          if (v50)
            v51 = "YES";
          *(_DWORD *)buf = 138543618;
          v56 = v49;
          v57 = 2080;
          v58 = (unint64_t)v51;
          _os_log_impl(&dword_2218F0000, v48, OS_LOG_TYPE_INFO, "%{public}@Metadata should be uploaded to cloud after homed is ready: %s", buf, 0x16u);

        }
        objc_autoreleasePoolPop(v47);
        objc_msgSend(v6, "markChanged");
        goto LABEL_33;
      }
      objc_msgSend(v53, "responseHandler");
      v45 = (void *)objc_claimAutoreleasedReturnValue();

      if (v45)
      {
        objc_msgSend(v53, "responseHandler");
        v36 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
        objc_msgSend(MEMORY[0x24BDD1540], "hmErrorWithCode:", 3);
        v46 = (void *)objc_claimAutoreleasedReturnValue();
        ((void (**)(_QWORD, void *, _QWORD))v36)[2](v36, v46, 0);

        goto LABEL_27;
      }
    }
    else
    {
      v31 = v53;
      if (objc_msgSend(v6, "source") == 2)
      {
        +[HMDPersistentStore loadPlainMetadataDictionary](HMDPersistentStore, "loadPlainMetadataDictionary");
        v36 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
        -[HMDHomeManager handleMetadataDictionary:message:](self, "handleMetadataDictionary:message:", v36, 0);
LABEL_27:

      }
    }
LABEL_33:
    +[HMDHAPMetadata resetShouldUploadToCloudAfterHomedReady](HMDHAPMetadata, "resetShouldUploadToCloudAfterHomedReady");
    goto LABEL_34;
  }
  objc_msgSend(v5, "rawPlist");
  v25 = (void *)objc_claimAutoreleasedReturnValue();
  v54 = 0;
  +[HMDHAPMetadata metadataWithDictionary:error:](HMDHAPMetadata, "metadataWithDictionary:error:", v25, &v54);
  v26 = (void *)objc_claimAutoreleasedReturnValue();
  v27 = v54;

  v28 = (void *)MEMORY[0x227676638]();
  HMFGetOSLogHandle();
  v29 = objc_claimAutoreleasedReturnValue();
  v30 = v29;
  if (!v27 && v26)
  {
    v31 = v53;
    if (os_log_type_enabled(v29, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v32 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v26, "version");
      v33 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v26, "schemaVersion");
      v34 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543874;
      v56 = v32;
      v57 = 2112;
      v58 = (unint64_t)v33;
      v59 = 2112;
      v60 = (uint64_t)v34;
      _os_log_impl(&dword_2218F0000, v30, OS_LOG_TYPE_INFO, "%{public}@Updating current metadata to the new metadata %@/%@.", buf, 0x20u);

    }
    objc_autoreleasePoolPop(v28);
    objc_msgSend(v5, "metadataDictionary");
    v35 = (void *)objc_claimAutoreleasedReturnValue();
    +[HMDHAPMetadata updateLocalMetadataWithMetadata:](HMDHAPMetadata, "updateLocalMetadataWithMetadata:", v35);

    +[HMDHAPMetadata getSharedInstance](HMDHAPMetadata, "getSharedInstance");
    v36 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();

    objc_msgSend(v6, "markSaveToAssistant");
    objc_msgSend(v6, "markChanged");
    -[HMDHomeManager _pushMetadataChangesToUsers](self, "_pushMetadataChangesToUsers");
    -[HMDHomeManager pushMetadataToAllWatches](self, "pushMetadataToAllWatches");
    -[HMDHomeManager _notifyMetadata:limitToSPIClients:message:invokeResponseHandler:](self, "_notifyMetadata:limitToSPIClients:message:invokeResponseHandler:", v36, 0, v53, 1);
    -[HMDHomeManager _notifyMetadata:limitToSPIClients:message:invokeResponseHandler:](self, "_notifyMetadata:limitToSPIClients:message:invokeResponseHandler:", v36, 1, v53, 0);
    goto LABEL_27;
  }
  v31 = v53;
  if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
  {
    HMFGetLogIdentifier();
    v40 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "rawPlist");
    v41 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543618;
    v56 = v40;
    v57 = 2112;
    v58 = (unint64_t)v41;
    _os_log_impl(&dword_2218F0000, v30, OS_LOG_TYPE_ERROR, "%{public}@Failed to init metadata with dictionary %@", buf, 0x16u);

  }
  objc_autoreleasePoolPop(v28);
  objc_msgSend(v53, "responseHandler");
  v42 = (void *)objc_claimAutoreleasedReturnValue();

  if (v42)
  {
    objc_msgSend(v53, "responseHandler");
    v43 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD1540], "hmErrorWithCode:", 3);
    v44 = (void *)objc_claimAutoreleasedReturnValue();
    ((void (**)(_QWORD, void *, _QWORD))v43)[2](v43, v44, 0);

  }
LABEL_34:

}

- (void)handleContactStoreChanged:(id)a3
{
  NSObject *v4;
  _QWORD block[5];

  -[HMDHomeManager workQueue](self, "workQueue", a3);
  v4 = objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x24BDAC760];
  block[1] = 3221225472;
  block[2] = __44__HMDHomeManager_handleContactStoreChanged___block_invoke;
  block[3] = &unk_24E79C240;
  block[4] = self;
  dispatch_async(v4, block);

}

- (void)_handleContactStoreChanged
{
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t i;
  int v10;
  void *v11;
  HMDHomeManager *v12;
  NSObject *v13;
  void *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t j;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint8_t v28[128];
  uint8_t buf[4];
  void *v30;
  __int16 v31;
  int v32;
  _BYTE v33[128];
  uint64_t v34;

  v34 = *MEMORY[0x24BDAC8D0];
  v24 = 0u;
  v25 = 0u;
  v26 = 0u;
  v27 = 0u;
  -[HMDHomeManager incomingInvitations](self, "incomingInvitations");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = (void *)objc_msgSend(v3, "copy");

  v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v24, v33, 16);
  if (v5)
  {
    v6 = v5;
    v7 = 0;
    v8 = *(_QWORD *)v25;
    do
    {
      for (i = 0; i != v6; ++i)
      {
        if (*(_QWORD *)v25 != v8)
          objc_enumerationMutation(v4);
        v7 |= objc_msgSend(*(id *)(*((_QWORD *)&v24 + 1) + 8 * i), "refreshDisplayName");
      }
      v6 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v24, v33, 16);
    }
    while (v6);
    v10 = v7 & 1;
  }
  else
  {
    v10 = 0;
  }

  v11 = (void *)MEMORY[0x227676638]();
  v12 = self;
  HMFGetOSLogHandle();
  v13 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543618;
    v30 = v14;
    v31 = 1024;
    v32 = v10;
    _os_log_impl(&dword_2218F0000, v13, OS_LOG_TYPE_INFO, "%{public}@Handling contact store changed with saveToStore: %{BOOL}d", buf, 0x12u);

  }
  objc_autoreleasePoolPop(v11);
  v22 = 0u;
  v23 = 0u;
  v20 = 0u;
  v21 = 0u;
  -[HMDHomeManager homes](v12, "homes", 0);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  v16 = objc_msgSend(v15, "countByEnumeratingWithState:objects:count:", &v20, v28, 16);
  if (v16)
  {
    v17 = v16;
    v18 = *(_QWORD *)v21;
    do
    {
      for (j = 0; j != v17; ++j)
      {
        if (*(_QWORD *)v21 != v18)
          objc_enumerationMutation(v15);
        objc_msgSend(*(id *)(*((_QWORD *)&v20 + 1) + 8 * j), "refreshUserDisplayNames");
      }
      v17 = objc_msgSend(v15, "countByEnumeratingWithState:objects:count:", &v20, v28, 16);
    }
    while (v17);
  }

}

- (void)_handleQueryVersionInformation:(id)a3
{
  void *v3;
  id v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void (**v16)(_QWORD, _QWORD, _QWORD);
  const __CFString *v17;
  _QWORD v18[2];

  v18[1] = *MEMORY[0x24BDAC8D0];
  v3 = (void *)MEMORY[0x24BDD16A8];
  v4 = a3;
  objc_msgSend(v3, "string");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x24BDD1488], "mainBundle");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "infoDictionary");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "objectForKey:", *MEMORY[0x24BDBD2A0]);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "appendFormat:", CFSTR("homed: %@\n"), v8);

  +[HMDHAPMetadata getSharedInstance](HMDHAPMetadata, "getSharedInstance");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  +[HMDHAPMetadata getBuiltinInstance](HMDHAPMetadata, "getBuiltinInstance");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "schemaVersion");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "version");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "schemaVersion");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "version");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "appendFormat:", CFSTR("Metadata - Current: %@/%@   Builtin: %@/%@\n"), v11, v12, v13, v14);

  v17 = CFSTR("kHomeKitVersionStringKey");
  v18[0] = v5;
  objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v18, &v17, 1);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "responseHandler");
  v16 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();

  ((void (**)(_QWORD, _QWORD, void *))v16)[2](v16, 0, v15);
}

- (id)_getRequestedState:(id)a3 activity:(id)a4
{
  id v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  void *v43;
  void *v44;
  void *v45;
  void *v46;
  void *v47;
  void *v48;
  void *v49;
  void *v50;
  void *v51;
  void *v52;
  void *v53;
  void *v54;
  void *v55;
  void *v56;
  void *v57;
  void *v58;
  void *v59;
  void *v60;
  void *v61;
  void *v62;
  void *v63;
  void *v64;
  void *v65;
  void *v66;
  void *v67;
  void *v68;
  void *v69;
  void *v70;
  void *v71;
  void *v72;
  void *v73;
  void *v74;
  void *v75;
  void *v76;
  void *v77;
  void *v78;
  void *v79;
  void *v80;
  const __CFString *v81;
  void *v82;
  const __CFString *v83;
  void *v84;
  const __CFString *v85;
  void *v86;
  const __CFString *v87;
  void *v88;
  const __CFString *v89;
  void *v90;
  void *v91;
  void *v92;
  void *v93;
  void *v94;
  void *v95;
  void *v96;
  void *v97;
  void *v98;
  void *v99;
  void *v100;
  void *v101;
  void *v102;
  void *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t i;
  void *v108;
  void *v109;
  void *v110;
  void *v111;
  void *v112;
  void *v113;
  const __CFString *v114;
  void *v115;
  void *v116;
  const __CFString *v117;
  void *v118;
  const __CFString *v119;
  void *v120;
  void *v121;
  void *v122;
  void *v123;
  const __CFString *v124;
  void *v125;
  void *v126;
  void *v127;
  void *v128;
  void *v129;
  void *v130;
  void *v131;
  char v132;
  void *v133;
  void *v134;
  void *v135;
  void *v136;
  void *v137;
  void *j;
  void *v139;
  void *v140;
  void *v141;
  void *v142;
  void *v143;
  void *v144;
  void *v145;
  void *v146;
  void *v147;
  void *v148;
  void *v149;
  void *v150;
  void *v151;
  id v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t k;
  void *v157;
  void *v158;
  uint64_t v159;
  void *v160;
  void *v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t m;
  void *v166;
  void *v167;
  void *v168;
  void *v169;
  void *v170;
  void *v171;
  void *v172;
  void *v173;
  void *v174;
  void *v175;
  void *v176;
  void *v177;
  void *v178;
  char v179;
  void *v180;
  void *v181;
  void *v182;
  void *v183;
  void *v184;
  void *v185;
  void *v186;
  void *v187;
  void *v188;
  void *v189;
  void *v190;
  void *v191;
  void *v192;
  uint64_t v193;
  uint64_t v194;
  void *v195;
  void *v196;
  void *v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t n;
  void *v202;
  void *v203;
  void *v204;
  void *v205;
  void *v206;
  uint64_t v207;
  uint64_t v208;
  void *v209;
  void *v210;
  void *v211;
  void *v212;
  void *v213;
  void *v214;
  void *v215;
  void *v216;
  void *v217;
  void *v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t ii;
  void *v223;
  void *v224;
  char v225;
  void *v226;
  void *v227;
  char v228;
  void *v229;
  void *v230;
  HMDHomeManager *v231;
  void *v232;
  void *v233;
  void *v234;
  char v235;
  void *v236;
  void *v237;
  void *v238;
  void *v239;
  void *v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t jj;
  void *v245;
  char v246;
  void *v247;
  void *v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t kk;
  void *v253;
  char v254;
  void *v255;
  void *v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t mm;
  void *v261;
  HMDHomeManager *v262;
  void *v263;
  void *v264;
  uint64_t v265;
  void *v266;
  void *v267;
  void *v268;
  void *v269;
  uint64_t v270;
  void *v271;
  void *v272;
  uint64_t v273;
  void *v274;
  void *v275;
  uint64_t v276;
  void *v277;
  void *v278;
  void *v279;
  NSMutableArray *v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t nn;
  void *v285;
  void *v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t i1;
  void *v291;
  void *v292;
  void *v293;
  id v294;
  id v295;
  void *v297;
  char v298;
  void *v299;
  id v300;
  id v302;
  uint64_t v303;
  id v304;
  void *v305;
  uint64_t v306;
  uint64_t v307;
  id v308;
  uint64_t v309;
  char v310;
  char v311;
  uint64_t v312;
  __CFString *v313;
  uint64_t v314;
  uint64_t v315;
  const __CFString *v316;
  uint64_t v317;
  void *v318;
  void *v319;
  uint64_t v320;
  uint64_t v321;
  void *v322;
  uint64_t v323;
  void *v324;
  uint64_t v325;
  char v326;
  uint64_t v327;
  uint64_t v328;
  void *v329;
  id obj;
  id obja;
  id objb;
  id objc;
  int objd;
  _QWORD v335[4];
  id v336;
  __int128 v337;
  __int128 v338;
  __int128 v339;
  __int128 v340;
  __int128 v341;
  __int128 v342;
  __int128 v343;
  __int128 v344;
  __int128 v345;
  __int128 v346;
  __int128 v347;
  __int128 v348;
  __int128 v349;
  __int128 v350;
  __int128 v351;
  __int128 v352;
  __int128 v353;
  __int128 v354;
  __int128 v355;
  __int128 v356;
  __int128 v357;
  __int128 v358;
  __int128 v359;
  __int128 v360;
  __int128 v361;
  __int128 v362;
  __int128 v363;
  __int128 v364;
  __int128 v365;
  __int128 v366;
  __int128 v367;
  __int128 v368;
  __int128 v369;
  __int128 v370;
  __int128 v371;
  __int128 v372;
  __int128 v373;
  __int128 v374;
  __int128 v375;
  __int128 v376;
  __int128 v377;
  __int128 v378;
  __int128 v379;
  __int128 v380;
  __int128 v381;
  __int128 v382;
  __int128 v383;
  __int128 v384;
  __int128 v385;
  __int128 v386;
  __int128 v387;
  __int128 v388;
  __int128 v389;
  __int128 v390;
  __int128 v391;
  __int128 v392;
  _BYTE v393[128];
  _BYTE v394[128];
  _BYTE v395[128];
  _BYTE v396[128];
  _BYTE v397[128];
  _BYTE v398[128];
  _BYTE v399[128];
  _BYTE v400[128];
  _BYTE v401[128];
  _BYTE v402[128];
  _BYTE v403[128];
  _BYTE v404[128];
  _BYTE v405[128];
  _BYTE v406[128];
  uint64_t v407;

  v407 = *MEMORY[0x24BDAC8D0];
  v5 = a3;
  v300 = a4;
  v299 = (void *)objc_msgSend(objc_alloc(MEMORY[0x24BE3F138]), "initWithName:parent:", CFSTR("getRequestedState"), v300);
  v6 = (void *)objc_opt_new();
  v304 = v5;
  v305 = v6;
  if (objc_msgSend(v5, "count") && (objc_msgSend(v5, "containsObject:", *MEMORY[0x24BDD7C28]) & 1) == 0)
  {
    if (!objc_msgSend(v5, "containsObject:", CFSTR("kDumpStateConfigDescriptionKey")))
      goto LABEL_44;
    v326 = 0;
  }
  else
  {
    v326 = 1;
  }
  objc_msgSend(MEMORY[0x24BDBCEB8], "array");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("%@: %lu"), CFSTR("maximumHomes"), maximumHomes);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "addObject:", v8);

  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("%@: %lu"), CFSTR("maximumAccessoriesPerHome"), maximumAccessoriesPerHome);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "addObject:", v9);

  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("%@: %lu"), CFSTR("maximumRoomsPerHome"), maximumRoomsPerHome);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "addObject:", v10);

  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("%@: %lu"), CFSTR("maximumZonesPerHome"), maximumZonesPerHome);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "addObject:", v11);

  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("%@: %lu"), CFSTR("maximumTriggersPerHome"), maximumTriggersPerHome);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "addObject:", v12);

  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("%@: %lu"), CFSTR("maximumActionSetsPerHome"), maximumActionSetsPerHome);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "addObject:", v13);

  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("%@: %lu"), CFSTR("maximumServiceGroupsPerHome"), maximumServiceGroupsPerHome);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "addObject:", v14);

  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("%@: %lu"), CFSTR("maximumUsersPerHome"), maximumUsersPerHome);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "addObject:", v15);

  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("%@: %lu"), CFSTR("maximumRoomsPerZone"), maximumRoomsPerZone);
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "addObject:", v16);

  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("%@: %lu"), CFSTR("maximumActionsPerActionSet"), maximumActionsPerActionSet);
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "addObject:", v17);

  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("%@: %lu"), CFSTR("maximumServicesPerServiceGroup"), maximumServicesPerServiceGroup);
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "addObject:", v18);

  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("%@: %lu"), CFSTR("maximumAccessoriesPerBridge"), maximumAccessoriesPerBridge);
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "addObject:", v19);

  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("%@: %lu"), CFSTR("maximumServicesPerAccessory"), maximumServicesPerAccessory);
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "addObject:", v20);

  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("%@: %lu"), CFSTR("maximumCharacteristicsPerService"), maximumCharacteristicsPerService);
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "addObject:", v21);

  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("%@: %lu"), CFSTR("maximumDataSyncFragmentSize"), maximumDataSyncFragmentSize);
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "addObject:", v22);

  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("%@: %f"), CFSTR("minimumTimerRecurrence"), minimumTimerRecurrence);
  v23 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "addObject:", v23);

  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("%@: %lu"), CFSTR("cloudPushBatchLimit"), cloudPushBatchLimit);
  v24 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "addObject:", v24);

  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("%@: %lu"), CFSTR("maxCloudOperationRetries"), maxCloudOperationRetries);
  v25 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "addObject:", v25);

  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("%@: %lu"), CFSTR("cloudUploadTimerInterval"), cloudUploadTimerInterval);
  v26 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "addObject:", v26);

  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("%@: %lu"), CFSTR("cloudZoneUploadTimerInitialInterval"), cloudZoneUploadTimerInitialInterval);
  v27 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "addObject:", v27);

  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("%@: %lu"), CFSTR("cloudZoneUploadTimerInterval"), cloudZoneUploadTimerInterval);
  v28 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "addObject:", v28);

  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("%@: %llu"), CFSTR("aggressiveControllerKeyPollInterval"), aggressiveControllerKeyPollInterval);
  v29 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "addObject:", v29);

  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("%@: %llu"), CFSTR("watchdogControllerKeyPollTimeout"), watchdogControllerKeyPollTimeout);
  v30 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "addObject:", v30);

  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("%@: %llu"), CFSTR("controllerKeyPollInterval"), controllerKeyPollInterval);
  v31 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "addObject:", v31);

  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("%@: %llu"), CFSTR("keychainPopupTimerInterval"), keychainPopupTimerInterval);
  v32 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "addObject:", v32);

  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("%@: %llu"), CFSTR("checkRemoteAccessTimeout"), checkRemoteAccessTimeout);
  v33 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "addObject:", v33);

  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("%@: %llu"), CFSTR("hrsCommitTimeout"), hrsCommitTimeoutNanoseconds);
  v34 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "addObject:", v34);

  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("%@: %llu"), CFSTR("hrsIdleClientTimeout"), hrsIdleClientTimeoutNanoseconds);
  v35 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "addObject:", v35);

  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("%@: %llu"), CFSTR("hrsIdleServertTimeout"), hrsIdleServertTimeoutNanoseconds);
  v36 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "addObject:", v36);

  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("%@: %llu"), CFSTR("hrsSendInternalRequestTimeout"), hrsSendInternalRequestTimeoutNanoseconds);
  v37 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "addObject:", v37);

  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("%@: %llu"), CFSTR("hrsSendInternalRequestToWatchTimeout"), hrsSendInternalRequestToWatchTimeoutNanoseconds);
  v38 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "addObject:", v38);

  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("%@: %llu"), CFSTR("hrsSendUserRequestTimeout"), hrsSendUserRequestTimeoutNanoseconds);
  v39 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "addObject:", v39);

  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("%@: %tu"), CFSTR("maximumSecureRemoteStreams"), maximumSecureRemoteStreams);
  v40 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "addObject:", v40);

  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("%@: %f"), CFSTR("secureSessionMessageTimeout"), secureSessionMessageTimeout);
  v41 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "addObject:", v41);

  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("%@: %llu"), CFSTR("DeviceConnectionKeepAliveTimerPeriod"), deviceConnectionKeepAliveTimerPeriod);
  v42 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "addObject:", v42);

  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("%@: %llu"), CFSTR("DeviceConnectionKeepAliveResponseTimeoutPeriod"), deviceConnectionKeepAliveResponseTimeoutPeriod);
  v43 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "addObject:", v43);

  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("%@: %@"), CFSTR("SupportedResolutions"), supportedResolutions);
  v44 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "addObject:", v44);

  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("%@: %@"), CFSTR("SupportedVideoCodecs"), supportedVideoCodecs);
  v45 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "addObject:", v45);

  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("%@: %@"), CFSTR("SupportedAudioCodecs"), supportedAudioCodecs);
  v46 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "addObject:", v46);

  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("%@: %@"), CFSTR("SupportedSRTPAuths"), supportedSRTPAuths);
  v47 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "addObject:", v47);

  v48 = (void *)MEMORY[0x24BDD17C8];
  HMFBooleanToString();
  v49 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v48, "stringWithFormat:", CFSTR("%@: %@"), CFSTR("CameraStreamNetworkAdaptation"), v49);
  v50 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "addObject:", v50);

  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("%@: %@"), CFSTR("RTPPtime"), rtpPtime);
  v51 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "addObject:", v51);

  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("%@: %@"), CFSTR("SnapshotResolution"), snapshotResolution);
  v52 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "addObject:", v52);

  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("%@: %tu"), CFSTR("MaximumSimultaneousRemoteStreams"), maximumSimultaneousRemoteStreams);
  v53 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "addObject:", v53);

  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("%@: %g"), CFSTR("SnapshotCacheValidPeriod"), snapshotCacheValidPeriod);
  v54 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "addObject:", v54);

  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("%@: %llu"), CFSTR("BulletinSecureTriggerTimeoutInSeconds"), bulletinSecureTriggerTimeoutInSeconds);
  v55 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "addObject:", v55);

  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("%@: %llu"), CFSTR("BroadcastKeyRefreshTimeInSeconds"), broadcastKeyRefreshTimeInSeconds);
  v56 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "addObject:", v56);

  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("%@: %tu"), CFSTR("BluetoothGSNMaxValue"), bluetoothGSNMaxValue);
  v57 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "addObject:", v57);

  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("%@: %llu"), CFSTR("btleReachabilityTimer"), btleReachabilityTimerNanoseconds);
  v58 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "addObject:", v58);

  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("%@: %llu"), CFSTR("btleReachabilityLeeway"), btleReachabilityLeewayNanoseconds);
  v59 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "addObject:", v59);

  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("%@: %lu"), CFSTR("btleReachabilityProbeReduceFactor"), btleReachabilityProbeReduceFactor);
  v60 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "addObject:", v60);

  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("%@: %llu"), CFSTR("remotePendingResponseTimer"), remotePendingResponseTimerNanoseconds);
  v61 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "addObject:", v61);

  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("%@: %llu"), CFSTR("remotePendingResponseLeeway"), remotePendingResponseLeewayNanoseconds);
  v62 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "addObject:", v62);

  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("%@: %lu"), CFSTR("remotePendingResponseDecayScale"), remotePendingResponseDecayScale);
  v63 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "addObject:", v63);

  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("%@: %lf"), CFSTR("remoteDeviceMonitorHealthTimerTimeInterval"), remoteDeviceMonitorHealthTimerTimeInterval);
  v64 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "addObject:", v64);

  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("%@: %lf"), CFSTR("remoteDeviceMonitorRetryTimerMinimumTimeInterval"), remoteDeviceMonitorRetryTimerMinimumTimeInterval);
  v65 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "addObject:", v65);

  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("%@: %lf"), CFSTR("remoteDeviceMonitorRetryTimerMaximumTimeInterval"), remoteDeviceMonitorRetryTimerMaximumTimeInterval);
  v66 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "addObject:", v66);

  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("%@: %tu"), CFSTR("remoteDeviceMonitorRetryTimerFactor"), remoteDeviceMonitorRetryTimerFactor);
  v67 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "addObject:", v67);

  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("%@: %lf"), CFSTR("accessoryConnectivityWaitPeriod"), accessoryConnectivityWaitPeriod);
  v68 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "addObject:", v68);

  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("%@: %llu"), CFSTR("cloudDataSyncInProgressWaitPeriod"), cloudDataSyncInProgressWaitPeriod);
  v69 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "addObject:", v69);

  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("%@: %llu"), CFSTR("controllerKeyNotLandingWaitPeriod"), controllerKeyNotLandingWaitPeriod);
  v70 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "addObject:", v70);

  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("%@: %llu"), CFSTR("controllerKeyNotLandingShortCircuitWaitPeriod"), controllerKeyNotLandingShortCircuitWaitPeriod);
  v71 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "addObject:", v71);

  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("%@: %lf"), CFSTR("assistantClientReadWriteTimeout"), assistantClientReadWriteTimeoutSeconds);
  v72 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "addObject:", v72);

  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("%@: %lf"), CFSTR("assistantClientActionSetTimeout"), assistantClientActionSetTimeoutSeconds);
  v73 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "addObject:", v73);

  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("%@: %lf"), CFSTR("disableNotificationsDeferPeriod"), disableNotificationsDeferPeriod);
  v74 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "addObject:", v74);

  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("%@: %lf"), CFSTR("coalesceNotificationsPeriod"), coalesceNotificationsPeriod);
  v75 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "addObject:", v75);

  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("%@: %lf"), CFSTR("delayNotificationsPeriod"), delayNotificationsPeriod);
  v76 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "addObject:", v76);

  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("%@: %lf"), CFSTR("pendingResponseTickPeriod"), pendingResponseTickPeriod);
  v77 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "addObject:", v77);

  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("%@: %lf"), CFSTR("pendingResponseMaxPeriod"), pendingResponseMaxPeriod);
  v78 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "addObject:", v78);

  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("%@: %lf"), CFSTR("kRemoteReachabilitNotificationsDeferPeriod"), remoteReachabilityNotificationsDeferPeriod);
  v79 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "addObject:", v79);

  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("%@: %lf"), CFSTR("kRemoteReachabilityDeregistrationDeferPeriod"), remoteReachabilityDeregistrationDeferPeriod);
  v80 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "addObject:", v80);

  if (skipAuthPromptDialog)
    v81 = CFSTR("YES");
  else
    v81 = CFSTR("NO");
  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("%@: %@"), CFSTR("allowSkipMFIPrompt"), v81);
  v82 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "addObject:", v82);

  if (showAuthDialog)
    v83 = CFSTR("YES");
  else
    v83 = CFSTR("NO");
  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("%@: %@"), CFSTR("showAuthDialog"), v83);
  v84 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "addObject:", v84);

  if (disableCloudDataSync)
    v85 = CFSTR("YES");
  else
    v85 = CFSTR("NO");
  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("%@: %@"), CFSTR("DisableCloudDataSync"), v85);
  v86 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "addObject:", v86);

  if (disableLegacyCloudDataSync)
    v87 = CFSTR("YES");
  else
    v87 = CFSTR("NO");
  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("%@: %@"), CFSTR("DisableLegacyCloudDataSync"), v87);
  v88 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "addObject:", v88);

  if (enableWakeNotifications)
    v89 = CFSTR("YES");
  else
    v89 = CFSTR("NO");
  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("%@: %@"), CFSTR("EnableWakeNotifications"), v89);
  v90 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "addObject:", v90);

  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("%@: %lf"), CFSTR("pairingInterruptionGracePeriod"), pairingInterruptionGracePeriod);
  v91 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "addObject:", v91);

  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("%@: %lf"), CFSTR("pairingReconfirmWaitPeriod"), pairingReconfirmWaitPeriod);
  v92 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "addObject:", v92);

  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("%@: %lf"), CFSTR("vendorInfoFetchPeriod"), vendorInfoFetchPeriod);
  v93 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "addObject:", v93);

  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("%@: %lf"), CFSTR("attestationInfoFetchPeriod"), attestationInfoFetchPeriod);
  v94 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "addObject:", v94);

  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("%@: %lf"), CFSTR("keyTransferBroadcastMaximumDelay"), keyTransferBroadcastMaximumDelay);
  v95 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "addObject:", v95);

  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("%@: %@"), CFSTR("vendorInfoDatabaseServerURLOverride"), vendorInfoDatabaseServerURLOverride);
  v96 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "addObject:", v96);

  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("%@: %@"), CFSTR("appleConfigurationServer"), appleConfigurationServer);
  v97 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "addObject:", v97);

  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("%@: %@"), CFSTR("homeKitConfigurationPath"), homeKitConfigurationPath);
  v98 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "addObject:", v98);

  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("%@: %lf"), CFSTR("mediaBrowserProcessingInterval"), mediaBrowserProcessingInterval);
  v99 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "addObject:", v99);

  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("%@: %lf"), CFSTR("disableReprivsionBrowsingPeriodInMinutes"), disableReprivsionBrowsingPeriodInMinutes);
  v100 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "addObject:", v100);

  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("%@: %lf"), CFSTR("authServerRetryTimeIntervalInSeconds"), authServerRetryTimeIntervalInSeconds);
  v101 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "addObject:", v101);

  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("%@: %tu"), CFSTR("authServerRetryCount"), authServerRetryCount);
  v102 = (void *)objc_claimAutoreleasedReturnValue();
  v103 = v7;
  objc_msgSend(v7, "addObject:", v102);

  v391 = 0u;
  v392 = 0u;
  v389 = 0u;
  v390 = 0u;
  obj = (id)preferredPrimaryForHome;
  v104 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v389, v406, 16);
  if (v104)
  {
    v105 = v104;
    v106 = *(_QWORD *)v390;
    do
    {
      for (i = 0; i != v105; ++i)
      {
        if (*(_QWORD *)v390 != v106)
          objc_enumerationMutation(obj);
        v108 = *(void **)(*((_QWORD *)&v389 + 1) + 8 * i);
        v109 = (void *)MEMORY[0x24BDD17C8];
        objc_msgSend(v108, "UUIDString");
        v110 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend((id)preferredPrimaryForHome, "objectForKey:", v108);
        v111 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v111, "UUIDString");
        v112 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v109, "stringWithFormat:", CFSTR("%@: %@: %@"), CFSTR("preferredPrimaryForHome"), v110, v112);
        v113 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v103, "addObject:", v113);

      }
      v105 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v389, v406, 16);
    }
    while (v105);
  }

  if (disableWACBrowser)
    v114 = CFSTR("YES");
  else
    v114 = CFSTR("NO");
  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("%@: %@"), CFSTR("disableWACBrowser"), v114);
  v115 = (void *)objc_claimAutoreleasedReturnValue();
  v116 = v103;
  objc_msgSend(v103, "addObject:", v115);

  if (delayBatchedReadWrite)
    v117 = CFSTR("YES");
  else
    v117 = CFSTR("NO");
  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("%@: %@"), CFSTR("delayBatchedReadWrite"), v117);
  v118 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v103, "addObject:", v118);

  if (enableNetworkLogging)
    v119 = CFSTR("YES");
  else
    v119 = CFSTR("NO");
  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("%@: %@"), CFSTR("enableNetworkLogging"), v119);
  v120 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v103, "addObject:", v120);

  v121 = (void *)MEMORY[0x24BDD17C8];
  CKContainerEnvironmentString();
  v122 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v121, "stringWithFormat:", CFSTR("%@: %@"), CFSTR("cloudKitEnvironment"), v122);
  v123 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v103, "addObject:", v123);

  if (allowAnonymousServerConnections)
    v124 = CFSTR("YES");
  else
    v124 = CFSTR("NO");
  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("%@: %@"), CFSTR("allowAnonymousServerConnections"), v124);
  v125 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v116, "addObject:", v125);

  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("%@: %tu"), CFSTR("presenceFeedRefreshInMinutes"), presenceFeedRefreshInMinutes);
  v126 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v116, "addObject:", v126);

  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("%@: %tu"), CFSTR("presenceMonitorAuditInMinutes"), presenceMonitorAuditInMinutes);
  v127 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v116, "addObject:", v127);

  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("%@: %tu"), CFSTR("presenceMonitorRefreshGracePeriodInMinutes"), presenceMonitorRefreshGracePeriodInMinutes);
  v128 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v116, "addObject:", v128);

  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("%@: %tu"), CFSTR("startCharacteristicsMonitorWaitPeriod"), startCharacteristicsMonitorWaitPeriod);
  v129 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v116, "addObject:", v129);

  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("%@: %tu"), CFSTR("requestHomeDataSyncRetryPeriodInMinutes"), requestHomeDataSyncRetryPeriodInMinutes);
  v130 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v116, "addObject:", v130);

  v131 = (void *)objc_msgSend(v116, "copy");
  v5 = v304;
  v6 = v305;
  if (objc_msgSend(v131, "count"))
    objc_msgSend(v305, "setObject:forKeyedSubscript:", v131, CFSTR("kDumpStateConfigDescriptionKey"));

  if ((v326 & 1) != 0)
  {
    v132 = 1;
    goto LABEL_46;
  }
LABEL_44:
  if (!objc_msgSend(v5, "containsObject:", CFSTR("kDumpStateUnassociatedAccyDescriptionKey")))
    goto LABEL_50;
  v132 = 0;
LABEL_46:
  -[HMDHomeManager accessoryBrowserInternal](self, "accessoryBrowserInternal");
  v133 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v133, "dumpUnassociatedAccessories");
  v134 = (void *)objc_claimAutoreleasedReturnValue();

  if (objc_msgSend(v134, "count"))
    objc_msgSend(v6, "setObject:forKeyedSubscript:", v134, CFSTR("kDumpStateUnassociatedAccyDescriptionKey"));

  if ((v132 & 1) != 0)
  {
    v310 = 1;
    goto LABEL_52;
  }
LABEL_50:
  if (!objc_msgSend(v5, "containsObject:", CFSTR("kDumpStatePairedAccyDescriptionKey")))
    goto LABEL_72;
  v310 = 0;
LABEL_52:
  v135 = (void *)MEMORY[0x24BDBCEB8];
  -[HMDHomeManager homes](self, "homes");
  v136 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v135, "arrayWithCapacity:", objc_msgSend(v136, "count"));
  v137 = (void *)objc_claimAutoreleasedReturnValue();

  v387 = 0u;
  v388 = 0u;
  v385 = 0u;
  v386 = 0u;
  -[HMDHomeManager homes](self, "homes");
  v313 = (__CFString *)objc_claimAutoreleasedReturnValue();
  obja = (id)-[__CFString countByEnumeratingWithState:objects:count:](v313, "countByEnumeratingWithState:objects:count:", &v385, v405, 16);
  if (obja)
  {
    v327 = *(_QWORD *)v386;
    v323 = *MEMORY[0x24BE3EAC0];
    v320 = *MEMORY[0x24BE3EB68];
    v317 = *MEMORY[0x24BE3EB30];
    v314 = *MEMORY[0x24BE3EA30];
    do
    {
      for (j = 0; j != obja; j = (char *)j + 1)
      {
        v139 = v137;
        if (*(_QWORD *)v386 != v327)
          objc_enumerationMutation(v313);
        v140 = *(void **)(*((_QWORD *)&v385 + 1) + 8 * (_QWORD)j);
        objc_msgSend(MEMORY[0x24BDBCED8], "dictionaryWithCapacity:", 3);
        v141 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v140, "accessories");
        v142 = (void *)objc_claimAutoreleasedReturnValue();
        v143 = (void *)MEMORY[0x24BDD17C8];
        objc_msgSend(v140, "name");
        v144 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v143, "stringWithFormat:", CFSTR("Home: %@"), v144);
        v145 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v141, "setObject:forKeyedSubscript:", v145, v323);

        objc_msgSend(v140, "primaryResident");
        v146 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v146, "dumpState");
        v147 = (void *)objc_claimAutoreleasedReturnValue();

        v148 = (void *)MEMORY[0x24BDD17C8];
        objc_msgSend(v147, "objectForKeyedSubscript:", v320);
        v149 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v148, "stringWithFormat:", CFSTR("Resident: %@"), v149);
        v150 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v141, "setObject:forKeyedSubscript:", v150, v317);

        objc_msgSend(MEMORY[0x24BDBCEB8], "arrayWithCapacity:", objc_msgSend(v142, "count"));
        v151 = (void *)objc_claimAutoreleasedReturnValue();
        v381 = 0u;
        v382 = 0u;
        v383 = 0u;
        v384 = 0u;
        v152 = v142;
        v153 = objc_msgSend(v152, "countByEnumeratingWithState:objects:count:", &v381, v404, 16);
        if (v153)
        {
          v154 = v153;
          v155 = *(_QWORD *)v382;
          do
          {
            for (k = 0; k != v154; ++k)
            {
              if (*(_QWORD *)v382 != v155)
                objc_enumerationMutation(v152);
              objc_msgSend(*(id *)(*((_QWORD *)&v381 + 1) + 8 * k), "dumpSimpleState");
              v157 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v151, "addObject:", v157);

            }
            v154 = objc_msgSend(v152, "countByEnumeratingWithState:objects:count:", &v381, v404, 16);
          }
          while (v154);
        }

        if (objc_msgSend(v151, "count"))
          objc_msgSend(v141, "setObject:forKeyedSubscript:", v151, v314);
        v137 = v139;
        objc_msgSend(v139, "addObject:", v141);

      }
      obja = (id)-[__CFString countByEnumeratingWithState:objects:count:](v313, "countByEnumeratingWithState:objects:count:", &v385, v405, 16);
    }
    while (obja);
  }

  v6 = v305;
  if (objc_msgSend(v137, "count"))
    objc_msgSend(v305, "setObject:forKeyedSubscript:", v137, CFSTR("kDumpStatePairedAccyDescriptionKey"));

  v5 = v304;
  if ((v310 & 1) != 0)
  {
    v311 = 1;
    goto LABEL_74;
  }
LABEL_72:
  if (!objc_msgSend(v5, "containsObject:", CFSTR("kDumpStateHomePodLocalSettingsKey")))
    goto LABEL_94;
  v311 = 0;
LABEL_74:
  objc_msgSend(MEMORY[0x24BDBCED8], "dictionary");
  v158 = (void *)objc_claimAutoreleasedReturnValue();
  v377 = 0u;
  v378 = 0u;
  v379 = 0u;
  v380 = 0u;
  -[HMDHomeManager homes](self, "homes");
  v313 = (__CFString *)objc_claimAutoreleasedReturnValue();
  v321 = -[__CFString countByEnumeratingWithState:objects:count:](v313, "countByEnumeratingWithState:objects:count:", &v377, v403, 16);
  if (v321)
  {
    v315 = *(_QWORD *)v378;
    v318 = v158;
    do
    {
      v159 = 0;
      do
      {
        if (*(_QWORD *)v378 != v315)
          objc_enumerationMutation(v313);
        v328 = v159;
        v160 = *(void **)(*((_QWORD *)&v377 + 1) + 8 * v159);
        objc_msgSend(MEMORY[0x24BDBCED8], "dictionary");
        objb = (id)objc_claimAutoreleasedReturnValue();
        v373 = 0u;
        v374 = 0u;
        v375 = 0u;
        v376 = 0u;
        v324 = v160;
        objc_msgSend(v160, "appleMediaAccessories");
        v161 = (void *)objc_claimAutoreleasedReturnValue();
        v162 = objc_msgSend(v161, "countByEnumeratingWithState:objects:count:", &v373, v402, 16);
        if (v162)
        {
          v163 = v162;
          v164 = *(_QWORD *)v374;
          do
          {
            for (m = 0; m != v163; ++m)
            {
              if (*(_QWORD *)v374 != v164)
                objc_enumerationMutation(v161);
              v166 = *(void **)(*((_QWORD *)&v373 + 1) + 8 * m);
              v167 = (void *)MEMORY[0x227676638]();
              if (v166)
              {
                v168 = (void *)MEMORY[0x24BDD17C8];
                objc_msgSend(v166, "name");
                v169 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v166, "uuid");
                v170 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v170, "UUIDString");
                v171 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v168, "stringWithFormat:", CFSTR("HomePod: %@ uuid: %@"), v169, v171);
                v172 = (void *)objc_claimAutoreleasedReturnValue();

                objc_msgSend(v166, "dumpStateLocalSettings");
                v173 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(objb, "setObject:forKeyedSubscript:", v173, v172);

              }
              objc_autoreleasePoolPop(v167);
            }
            v163 = objc_msgSend(v161, "countByEnumeratingWithState:objects:count:", &v373, v402, 16);
          }
          while (v163);
        }

        v174 = (void *)MEMORY[0x24BDD17C8];
        objc_msgSend(v324, "name");
        v175 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v324, "uuid");
        v176 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v176, "UUIDString");
        v177 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v174, "stringWithFormat:", CFSTR("home: %@ uuid: %@"), v175, v177);
        v178 = (void *)objc_claimAutoreleasedReturnValue();

        v158 = v318;
        objc_msgSend(v318, "setObject:forKeyedSubscript:", objb, v178);

        v159 = v328 + 1;
        v6 = v305;
      }
      while (v328 + 1 != v321);
      v321 = -[__CFString countByEnumeratingWithState:objects:count:](v313, "countByEnumeratingWithState:objects:count:", &v377, v403, 16);
    }
    while (v321);
  }

  if (objc_msgSend(v158, "count"))
    objc_msgSend(v6, "setObject:forKeyedSubscript:", v158, CFSTR("kDumpStateHomePodLocalSettingsKey"));

  v5 = v304;
  if ((v311 & 1) != 0)
  {
    v179 = 1;
    goto LABEL_96;
  }
LABEL_94:
  if (!objc_msgSend(v5, "containsObject:", CFSTR("kDumpStateResidentMeshKey")))
    goto LABEL_101;
  v179 = 0;
LABEL_96:
  objc_msgSend(MEMORY[0x24BDD16A8], "string");
  v180 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHomeManager residentMesh](self, "residentMesh");
  v181 = (void *)objc_claimAutoreleasedReturnValue();

  if (v181)
  {
    -[HMDHomeManager residentMesh](self, "residentMesh");
    v182 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v182, "stateDump");
    v183 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v180, "appendString:", v183);

  }
  else
  {
    objc_msgSend(v180, "appendString:", CFSTR("No Resident mesh (not resident capable device, or hasn't completely started up)."));
  }
  objc_msgSend(v305, "setObject:forKeyedSubscript:", v180, CFSTR("kDumpStateResidentMeshKey"));

  if ((v179 & 1) != 0)
  {
    v298 = 1;
    goto LABEL_103;
  }
LABEL_101:
  v184 = v305;
  if (!objc_msgSend(v5, "containsObject:", CFSTR("kDumpStateAccountsDescriptionKey")))
    goto LABEL_146;
  v298 = 0;
LABEL_103:
  objc_msgSend(MEMORY[0x24BDD16A8], "string");
  v185 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHomeManager appleAccountManager](self, "appleAccountManager");
  v186 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v186, "device");
  v187 = (void *)objc_claimAutoreleasedReturnValue();

  if (v187)
  {
    objc_msgSend(v187, "name");
    v188 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v187, "identifier");
    v189 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v189, "UUIDString");
    v190 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v185, "appendFormat:", CFSTR("Current Device %@(%@)\n"), v188, v190);

  }
  v297 = v187;
  v371 = 0u;
  v372 = 0u;
  v369 = 0u;
  v370 = 0u;
  -[HMDHomeManager accountRegistry](self, "accountRegistry");
  v191 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v191, "accounts");
  v192 = (void *)objc_claimAutoreleasedReturnValue();

  v302 = v192;
  v306 = objc_msgSend(v192, "countByEnumeratingWithState:objects:count:", &v369, v401, 16);
  if (v306)
  {
    v303 = *(_QWORD *)v370;
    do
    {
      v193 = 0;
      do
      {
        if (*(_QWORD *)v370 != v303)
        {
          v194 = v193;
          objc_enumerationMutation(v302);
          v193 = v194;
        }
        v307 = v193;
        v195 = *(void **)(*((_QWORD *)&v369 + 1) + 8 * v193);
        objc_msgSend(v195, "shortDescription");
        v196 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v185, "appendFormat:", CFSTR("Account %@:\n"), v196);

        v367 = 0u;
        v368 = 0u;
        v365 = 0u;
        v366 = 0u;
        objc_msgSend(v195, "handles");
        v197 = (void *)objc_claimAutoreleasedReturnValue();
        v198 = objc_msgSend(v197, "countByEnumeratingWithState:objects:count:", &v365, v400, 16);
        if (v198)
        {
          v199 = v198;
          v200 = *(_QWORD *)v366;
          do
          {
            for (n = 0; n != v199; ++n)
            {
              if (*(_QWORD *)v366 != v200)
                objc_enumerationMutation(v197);
              v202 = *(void **)(*((_QWORD *)&v365 + 1) + 8 * n);
              objc_msgSend(v202, "remoteDestinationString");
              v203 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v202, "identifier");
              v204 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v204, "UUIDString");
              v205 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v185, "appendFormat:", CFSTR("\tHandle %@(%@)\n"), v203, v205);

            }
            v199 = objc_msgSend(v197, "countByEnumeratingWithState:objects:count:", &v365, v400, 16);
          }
          while (v199);
        }

        objc_msgSend(v195, "devices");
        v206 = (void *)objc_claimAutoreleasedReturnValue();
        v207 = objc_msgSend(v206, "count");

        if (v207)
        {
          v363 = 0u;
          v364 = 0u;
          v361 = 0u;
          v362 = 0u;
          objc_msgSend(v195, "devices");
          v308 = (id)objc_claimAutoreleasedReturnValue();
          v312 = objc_msgSend(v308, "countByEnumeratingWithState:objects:count:", &v361, v399, 16);
          if (v312)
          {
            v309 = *(_QWORD *)v362;
            do
            {
              v208 = 0;
              do
              {
                if (*(_QWORD *)v362 != v309)
                  objc_enumerationMutation(v308);
                v209 = *(void **)(*((_QWORD *)&v361 + 1) + 8 * v208);
                objc_msgSend(v209, "name");
                objc = (id)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v209, "identifier");
                v210 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v210, "UUIDString");
                v329 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v209, "version");
                v322 = v210;
                v325 = v208;
                v319 = (void *)objc_claimAutoreleasedReturnValue();
                if (v319)
                {
                  objc_msgSend(v209, "version");
                  v313 = (__CFString *)objc_claimAutoreleasedReturnValue();
                  v316 = v313;
                }
                else
                {
                  v316 = CFSTR("Unknown");
                }
                objc_msgSend(v209, "productInfo");
                v211 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v211, "productPlatform");
                HMFProductPlatformToString();
                v212 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v209, "productInfo");
                v213 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v213, "productClass");
                HMFProductClassToString();
                v214 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v209, "productInfo");
                v215 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v215, "softwareVersion");
                v216 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v216, "versionString");
                v217 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v185, "appendFormat:", CFSTR("\tDevice %@(%@), Version = %@, Platform = %@, Class = %@, OS = %@\n"), objc, v329, v316, v212, v214, v217);

                if (v319)
                v359 = 0u;
                v360 = 0u;
                v357 = 0u;
                v358 = 0u;
                objc_msgSend(v209, "handles");
                v218 = (void *)objc_claimAutoreleasedReturnValue();
                v219 = objc_msgSend(v218, "countByEnumeratingWithState:objects:count:", &v357, v398, 16);
                if (v219)
                {
                  v220 = v219;
                  v221 = *(_QWORD *)v358;
                  do
                  {
                    for (ii = 0; ii != v220; ++ii)
                    {
                      if (*(_QWORD *)v358 != v221)
                        objc_enumerationMutation(v218);
                      objc_msgSend(v185, "appendFormat:", CFSTR("\t\tHandle %@\n"), *(_QWORD *)(*((_QWORD *)&v357 + 1) + 8 * ii));
                    }
                    v220 = objc_msgSend(v218, "countByEnumeratingWithState:objects:count:", &v357, v398, 16);
                  }
                  while (v220);
                }

                objc_msgSend(v209, "capabilities");
                v223 = (void *)objc_claimAutoreleasedReturnValue();

                if (v223)
                {
                  objc_msgSend(v209, "capabilities");
                  v224 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend(v185, "appendFormat:", CFSTR("\t\t%@\n"), v224);

                }
                v208 = v325 + 1;
              }
              while (v325 + 1 != v312);
              v312 = objc_msgSend(v308, "countByEnumeratingWithState:objects:count:", &v361, v399, 16);
            }
            while (v312);
          }

        }
        v193 = v307 + 1;
        v5 = v304;
      }
      while (v307 + 1 != v306);
      v306 = objc_msgSend(v302, "countByEnumeratingWithState:objects:count:", &v369, v401, 16);
    }
    while (v306);
  }

  v184 = v305;
  if (objc_msgSend(v185, "length"))
    objc_msgSend(v305, "setObject:forKeyedSubscript:", v185, CFSTR("kDumpStateAccountsDescriptionKey"));

  if ((v298 & 1) != 0)
  {
    v225 = 1;
    goto LABEL_148;
  }
LABEL_146:
  if (!objc_msgSend(v5, "containsObject:", CFSTR("kDumpStateRegisteredPairedAccyDescriptionKey")))
    goto LABEL_152;
  v225 = 0;
LABEL_148:
  -[HMDHomeManager accessoryBrowserInternal](self, "accessoryBrowserInternal");
  v226 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v226, "dumpRegisteredPairedAccessories");
  v227 = (void *)objc_claimAutoreleasedReturnValue();

  if (objc_msgSend(v227, "length"))
    objc_msgSend(v184, "setObject:forKeyedSubscript:", v227, CFSTR("kDumpStateRegisteredPairedAccyDescriptionKey"));

  if ((v225 & 1) != 0)
  {
    v228 = 1;
    goto LABEL_155;
  }
LABEL_152:
  if ((objc_msgSend(v5, "containsObject:", CFSTR("kDumpStateRegisteredPairedAccyDescriptionKey")) & 1) == 0
    && !objc_msgSend(v5, "containsObject:", CFSTR("kDumpStateUnassociatedAccyDescriptionKey")))
  {
    goto LABEL_159;
  }
  v228 = 0;
LABEL_155:
  -[HMDHomeManager accessoryBrowser](self, "accessoryBrowser");
  v229 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v229, "dumpBrowsingConnections");
  v230 = (void *)objc_claimAutoreleasedReturnValue();

  if (objc_msgSend(v230, "length"))
    objc_msgSend(v184, "setObject:forKeyedSubscript:", v230, CFSTR("kDumpStateBrowsingConnectionsDescriptionKey"));

  if ((v228 & 1) != 0)
  {
    v231 = self;
    -[HMDHomeManager messageDispatcher](self, "messageDispatcher");
    v232 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v232, "secureRemoteTransport");
    v233 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v233, "dumpState");
    v234 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v184, "setObject:forKeyedSubscript:", v234, CFSTR("RemoteMessaging"));

    v235 = 1;
    goto LABEL_163;
  }
LABEL_159:
  if ((objc_msgSend(v5, "containsObject:", CFSTR("kDumpStateRemoteMessagingKey")) & 1) != 0)
  {
    -[HMDHomeManager messageDispatcher](self, "messageDispatcher");
    v236 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v236, "secureRemoteTransport");
    v237 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v237, "dumpState");
    v238 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v184, "setObject:forKeyedSubscript:", v238, CFSTR("RemoteMessaging"));

  }
  if (!objc_msgSend(v5, "containsObject:", CFSTR("kDumpStateActionSetDescriptionKey")))
  {
    isWatch();
    goto LABEL_175;
  }
  v235 = 0;
  v231 = self;
LABEL_163:
  objc_msgSend(MEMORY[0x24BDBCEB8], "array");
  v239 = (void *)objc_claimAutoreleasedReturnValue();
  v353 = 0u;
  v354 = 0u;
  v355 = 0u;
  v356 = 0u;
  -[HMDHomeManager homes](v231, "homes");
  v240 = (void *)objc_claimAutoreleasedReturnValue();
  v241 = objc_msgSend(v240, "countByEnumeratingWithState:objects:count:", &v353, v397, 16);
  if (v241)
  {
    v242 = v241;
    v243 = *(_QWORD *)v354;
    do
    {
      for (jj = 0; jj != v242; ++jj)
      {
        if (*(_QWORD *)v354 != v243)
          objc_enumerationMutation(v240);
        objc_msgSend(*(id *)(*((_QWORD *)&v353 + 1) + 8 * jj), "dumpActionSetDescription");
        v245 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v239, "addObject:", v245);

      }
      v242 = objc_msgSend(v240, "countByEnumeratingWithState:objects:count:", &v353, v397, 16);
    }
    while (v242);
  }

  v184 = v305;
  if (objc_msgSend(v239, "count"))
    objc_msgSend(v305, "setObject:forKeyedSubscript:", v239, CFSTR("kDumpStateActionSetDescriptionKey"));

  isWatch();
  if ((v235 & 1) != 0)
  {
    v246 = 1;
    goto LABEL_177;
  }
LABEL_175:
  if (!objc_msgSend(v5, "containsObject:", CFSTR("kDumpStateCharacteristicNotificationRegistryKey")))
    goto LABEL_188;
  v246 = 0;
LABEL_177:
  objc_msgSend(MEMORY[0x24BDD16A8], "string");
  v247 = (void *)objc_claimAutoreleasedReturnValue();
  v349 = 0u;
  v350 = 0u;
  v351 = 0u;
  v352 = 0u;
  -[HMDHomeManager homes](self, "homes");
  v248 = (void *)objc_claimAutoreleasedReturnValue();
  v249 = objc_msgSend(v248, "countByEnumeratingWithState:objects:count:", &v349, v396, 16);
  if (v249)
  {
    v250 = v249;
    v251 = *(_QWORD *)v350;
    do
    {
      for (kk = 0; kk != v250; ++kk)
      {
        if (*(_QWORD *)v350 != v251)
          objc_enumerationMutation(v248);
        objc_msgSend(*(id *)(*((_QWORD *)&v349 + 1) + 8 * kk), "dumpCharacteristicNotificationRegistry");
        v253 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v247, "appendString:", v253);

      }
      v250 = objc_msgSend(v248, "countByEnumeratingWithState:objects:count:", &v349, v396, 16);
    }
    while (v250);
  }

  v184 = v305;
  if (objc_msgSend(v247, "length"))
    objc_msgSend(v305, "setObject:forKeyedSubscript:", v247, CFSTR("kDumpStateCharacteristicNotificationRegistryKey"));

  if ((v246 & 1) != 0)
  {
    v254 = 1;
    goto LABEL_190;
  }
LABEL_188:
  if (!objc_msgSend(v5, "containsObject:", CFSTR("kDumpStateMediaSessionsKey")))
    goto LABEL_201;
  v254 = 0;
LABEL_190:
  objc_msgSend(MEMORY[0x24BDBCEB8], "array");
  v255 = (void *)objc_claimAutoreleasedReturnValue();
  v345 = 0u;
  v346 = 0u;
  v347 = 0u;
  v348 = 0u;
  -[HMDHomeManager homes](self, "homes");
  v256 = (void *)objc_claimAutoreleasedReturnValue();
  v257 = objc_msgSend(v256, "countByEnumeratingWithState:objects:count:", &v345, v395, 16);
  if (v257)
  {
    v258 = v257;
    v259 = *(_QWORD *)v346;
    do
    {
      for (mm = 0; mm != v258; ++mm)
      {
        if (*(_QWORD *)v346 != v259)
          objc_enumerationMutation(v256);
        objc_msgSend(*(id *)(*((_QWORD *)&v345 + 1) + 8 * mm), "dumpMediaSessionDescription");
        v261 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v255, "addObject:", v261);

      }
      v258 = objc_msgSend(v256, "countByEnumeratingWithState:objects:count:", &v345, v395, 16);
    }
    while (v258);
  }

  v184 = v305;
  if (objc_msgSend(v255, "count"))
    objc_msgSend(v305, "setObject:forKeyedSubscript:", v255, CFSTR("kDumpStateMediaSessionsKey"));

  if ((v254 & 1) != 0)
  {
    v262 = self;
    -[HMDHomeManager syncManager](self, "syncManager");
    v263 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v263, "dumpState");
    v264 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v305, "setObject:forKeyedSubscript:", v264, *MEMORY[0x24BE3EB70]);

    v265 = *MEMORY[0x24BE3EA58];
    -[HMDHomeManager appData](self, "appData");
    v266 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v266, "dumpState");
    v267 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v305, "setObject:forKeyedSubscript:", v267, v265);

    objc_msgSend(MEMORY[0x24BE1BC08], "systemStore");
    v268 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v268, "dumpState");
    v269 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v305, "setObject:forKeyedSubscript:", v269, *MEMORY[0x24BE3EAF0]);

    objd = 1;
LABEL_209:
    objc_msgSend(MEMORY[0x24BDBCEB8], "array");
    v279 = (void *)objc_claimAutoreleasedReturnValue();
    v341 = 0u;
    v342 = 0u;
    v343 = 0u;
    v344 = 0u;
    v280 = v262->_homes;
    v281 = -[NSMutableArray countByEnumeratingWithState:objects:count:](v280, "countByEnumeratingWithState:objects:count:", &v341, v394, 16);
    if (v281)
    {
      v282 = v281;
      v283 = *(_QWORD *)v342;
      do
      {
        for (nn = 0; nn != v282; ++nn)
        {
          if (*(_QWORD *)v342 != v283)
            objc_enumerationMutation(v280);
          v285 = *(void **)(*((_QWORD *)&v341 + 1) + 8 * nn);
          v337 = 0u;
          v338 = 0u;
          v339 = 0u;
          v340 = 0u;
          objc_msgSend(v285, "accessories");
          v286 = (void *)objc_claimAutoreleasedReturnValue();
          v287 = objc_msgSend(v286, "countByEnumeratingWithState:objects:count:", &v337, v393, 16);
          if (v287)
          {
            v288 = v287;
            v289 = *(_QWORD *)v338;
            do
            {
              for (i1 = 0; i1 != v288; ++i1)
              {
                if (*(_QWORD *)v338 != v289)
                  objc_enumerationMutation(v286);
                objc_msgSend(*(id *)(*((_QWORD *)&v337 + 1) + 8 * i1), "dumpNetworkState");
                v291 = (void *)objc_claimAutoreleasedReturnValue();
                if (v291)
                  objc_msgSend(v279, "addObject:", v291);

              }
              v288 = objc_msgSend(v286, "countByEnumeratingWithState:objects:count:", &v337, v393, 16);
            }
            while (v288);
          }

        }
        v282 = -[NSMutableArray countByEnumeratingWithState:objects:count:](v280, "countByEnumeratingWithState:objects:count:", &v341, v394, 16);
      }
      while (v282);
    }

    v184 = v305;
    objc_msgSend(v305, "setObject:forKeyedSubscript:", v279, CFSTR("kDumpStateNetworkKey"));

    v5 = v304;
    if (objd)
    {
      objc_msgSend(MEMORY[0x24BDBCED8], "dictionary");
      v292 = (void *)objc_claimAutoreleasedReturnValue();
      -[HMDHomeManager homes](self, "homes");
      v293 = (void *)objc_claimAutoreleasedReturnValue();
      v335[0] = MEMORY[0x24BDAC760];
      v335[1] = 3221225472;
      v335[2] = __46__HMDHomeManager__getRequestedState_activity___block_invoke;
      v335[3] = &unk_24E7968F0;
      v294 = v292;
      v336 = v294;
      objc_msgSend(v293, "na_each:", v335);

      objc_msgSend(v305, "setObject:forKeyedSubscript:", v294, CFSTR("kDumpStateBulletinNotificationRegistrationsKey"));
    }
    goto LABEL_227;
  }
LABEL_201:
  v270 = *MEMORY[0x24BE3EB70];
  if (objc_msgSend(v5, "containsObject:", *MEMORY[0x24BE3EB70]))
  {
    -[HMDHomeManager syncManager](self, "syncManager");
    v271 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v271, "dumpState");
    v272 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v184, "setObject:forKeyedSubscript:", v272, v270);

  }
  v273 = *MEMORY[0x24BE3EA58];
  if ((objc_msgSend(v5, "containsObject:", *MEMORY[0x24BE3EA58]) & 1) != 0)
  {
    -[HMDHomeManager appData](self, "appData");
    v274 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v274, "dumpState");
    v275 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v184, "setObject:forKeyedSubscript:", v275, v273);

  }
  v276 = *MEMORY[0x24BE3EAF0];
  if (objc_msgSend(v5, "containsObject:", *MEMORY[0x24BE3EAF0]))
  {
    objc_msgSend(MEMORY[0x24BE1BC08], "systemStore");
    v277 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v277, "dumpState");
    v278 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v184, "setObject:forKeyedSubscript:", v278, v276);

  }
  if (objc_msgSend(v5, "containsObject:", CFSTR("kDumpStateNetworkKey")))
  {
    objd = 0;
    v262 = self;
    goto LABEL_209;
  }
LABEL_227:
  objc_msgSend(v299, "invalidate");
  v295 = v184;

  return v295;
}

- (void)_handleDumpState:(id)a3
{
  id v4;
  void *v5;
  char v6;
  void *v7;
  void *v8;
  _QWORD *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  uint64_t v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  _BYTE v43[128];
  uint64_t v44;

  v44 = *MEMORY[0x24BDAC8D0];
  v4 = a3;
  objc_msgSend(v4, "arrayForKey:", CFSTR("kDumpStateRequestedConfigurationKey"));
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v5, "count"))
    v6 = objc_msgSend(v5, "containsObject:", *MEMORY[0x24BDD7C28]);
  else
    v6 = 1;
  objc_msgSend(v4, "activity");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHomeManager _getRequestedState:activity:](self, "_getRequestedState:activity:", v5, v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  v9 = (_QWORD *)MEMORY[0x24BDD5F48];
  if ((v6 & 1) != 0 || objc_msgSend(v5, "containsObject:", *MEMORY[0x24BDD5F58]))
  {
    +[HMDXPCMessageCountTracker sharedTracker](HMDXPCMessageCountTracker, "sharedTracker");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "stateDump");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "setObject:forKeyedSubscript:", v11, CFSTR("XPC Message Count Tracker"));

    +[HMDXPCMessageTransport defaultTransport](HMDXPCMessageTransport, "defaultTransport");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "stateDump");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "setObject:forKeyedSubscript:", v13, CFSTR("Default XPC Transport"));

    +[HMDXPCMessageTransport accessorySetupTransport](HMDXPCMessageTransport, "accessorySetupTransport");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v14, "stateDump");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "setObject:forKeyedSubscript:", v15, CFSTR("Accessory Setup XPC Transport"));

    if ((v6 & 1) != 0)
    {
      -[HMDHomeManager compositeSettingsControllerManager](self, "compositeSettingsControllerManager");
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v16, "dumpStateInfo");
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v8, "setObject:forKeyedSubscript:", v17, *MEMORY[0x24BDD5F38]);

LABEL_11:
      objc_msgSend(MEMORY[0x24BDBCED8], "dictionary");
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      -[HMDHomeManager eventRouterXPCServer](self, "eventRouterXPCServer");
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v22, "dumpStateDescription");
      v23 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v21, "setObject:forKeyedSubscript:", v23, CFSTR("XPCServer"));

      v41 = 0u;
      v42 = 0u;
      v39 = 0u;
      v40 = 0u;
      -[HMDHomeManager homes](self, "homes", 0);
      v24 = (void *)objc_claimAutoreleasedReturnValue();
      v25 = (void *)objc_msgSend(v24, "copy");

      v26 = objc_msgSend(v25, "countByEnumeratingWithState:objects:count:", &v39, v43, 16);
      if (v26)
      {
        v27 = v26;
        v28 = *(_QWORD *)v40;
        do
        {
          v29 = 0;
          do
          {
            if (*(_QWORD *)v40 != v28)
              objc_enumerationMutation(v25);
            objc_msgSend(*(id *)(*((_QWORD *)&v39 + 1) + 8 * v29), "eventRouterDumpStateInfo");
            v30 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v21, "addEntriesFromDictionary:", v30);

            ++v29;
          }
          while (v27 != v29);
          v27 = objc_msgSend(v25, "countByEnumeratingWithState:objects:count:", &v39, v43, 16);
        }
        while (v27);
      }

      v31 = (void *)objc_msgSend(v21, "copy");
      objc_msgSend(v8, "setObject:forKeyedSubscript:", v31, *MEMORY[0x24BDD5F48]);

      goto LABEL_19;
    }
  }
  v18 = *MEMORY[0x24BDD5F38];
  if (objc_msgSend(v5, "containsObject:", *MEMORY[0x24BDD5F38]))
  {
    -[HMDHomeManager compositeSettingsControllerManager](self, "compositeSettingsControllerManager");
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v19, "dumpStateInfo");
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "setObject:forKeyedSubscript:", v20, v18);

  }
  if ((objc_msgSend(v5, "containsObject:", *v9) & 1) != 0)
    goto LABEL_11;
LABEL_19:
  -[HMDHomeManager _dumpHomeManagerData](self, "_dumpHomeManagerData");
  v32 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v5, "containsObject:", *MEMORY[0x24BDD5F40])
    && objc_msgSend(v4, "isEntitledForStateDump"))
  {
    objc_msgSend(MEMORY[0x24BDD1618], "archivedDataWithRootObject:requiringSecureCoding:error:", v32, 1, 0);
    v33 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "setObject:forKeyedSubscript:", v33, *MEMORY[0x24BDD7C30]);

  }
  else
  {
    -[HMDHomeManager _dumpToLog:withState:](self, "_dumpToLog:withState:", v32, v8);
  }
  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithBool:", 1);
  v34 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "setObject:forKeyedSubscript:", v34, *MEMORY[0x24BDD6000]);

  v35 = (void *)MEMORY[0x24BDD16E0];
  -[HMDHomeManager fmfHandler](self, "fmfHandler");
  v36 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v35, "numberWithBool:", objc_msgSend(v36, "isThisDesignatedFMFDevice"));
  v37 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "setObject:forKeyedSubscript:", v37, *MEMORY[0x24BDD6010]);

  v38 = (void *)objc_msgSend(v8, "copy");
  objc_msgSend(v4, "respondWithPayload:", v38);

}

- (void)_handleDiagnosticInfo:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  HMDHomeManager *v10;
  NSObject *v11;
  void *v12;
  void *v13;
  HMDHomeManager *v14;
  NSObject *v15;
  void *v16;
  int v17;
  void *v18;
  __int16 v19;
  void *v20;
  _QWORD v21[2];

  v21[1] = *MEMORY[0x24BDAC8D0];
  v4 = a3;
  if ((isInternalBuild() & 1) != 0)
  {
    -[HMDHomeManager appleMediaAccessoryDiagnosticInfoController](self, "appleMediaAccessoryDiagnosticInfoController");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v21[0] = *MEMORY[0x24BDD5EF0];
    objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", v21, 1);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "diagnosticInfoDataWithAdditionalKeys:", v6);
    v7 = (void *)objc_claimAutoreleasedReturnValue();

    +[HMDAppleMediaAccessoryDiagnosticInfoController diagnosticInfoDescriptionWithData:](HMDAppleMediaAccessoryDiagnosticInfoController, "diagnosticInfoDescriptionWithData:", v7);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = (void *)MEMORY[0x227676638]();
    v10 = self;
    HMFGetOSLogHandle();
    v11 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      HMFGetLogIdentifier();
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      v17 = 138543618;
      v18 = v12;
      v19 = 2112;
      v20 = v8;
      _os_log_impl(&dword_2218F0000, v11, OS_LOG_TYPE_DEFAULT, "%{public}@Obtained diagnostic Info %@", (uint8_t *)&v17, 0x16u);

    }
    objc_autoreleasePoolPop(v9);
    objc_msgSend(v4, "respondWithPayload:", v8);

  }
  else
  {
    v13 = (void *)MEMORY[0x227676638]();
    v14 = self;
    HMFGetOSLogHandle();
    v15 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      v17 = 138543362;
      v18 = v16;
      _os_log_impl(&dword_2218F0000, v15, OS_LOG_TYPE_ERROR, "%{public}@Not internal build DiagnosticInfo message not allowed", (uint8_t *)&v17, 0xCu);

    }
    objc_autoreleasePoolPop(v13);
    objc_msgSend(MEMORY[0x24BDD1540], "hmErrorWithCode:", 10);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "respondWithError:", v7);
  }

}

- (void)_handleNetworkMismatchInfo:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  HMDHomeManager *v8;
  NSObject *v9;
  void *v10;
  void *v11;
  _QWORD v12[5];
  id v13;
  uint8_t buf[4];
  void *v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  v4 = a3;
  if ((isInternalBuild() & 1) != 0)
  {
    +[HMDMainDriver driver](HMDMainDriver, "driver");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "currentWiFiNetworkInfo");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v12[0] = MEMORY[0x24BDAC760];
    v12[1] = 3221225472;
    v12[2] = __45__HMDHomeManager__handleNetworkMismatchInfo___block_invoke;
    v12[3] = &unk_24E798770;
    v12[4] = self;
    v13 = v4;
    -[HMDHomeManager findAccessoriesNotOnWiFiWithCurrentWiFi:completionHandler:](self, "findAccessoriesNotOnWiFiWithCurrentWiFi:completionHandler:", v6, v12);

  }
  else
  {
    v7 = (void *)MEMORY[0x227676638]();
    v8 = self;
    HMFGetOSLogHandle();
    v9 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v15 = v10;
      _os_log_impl(&dword_2218F0000, v9, OS_LOG_TYPE_ERROR, "%{public}@Not internal build NetworkMismatchInfo message not allowed", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v7);
    objc_msgSend(MEMORY[0x24BDD1540], "hmErrorWithCode:", 10);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "respondWithError:", v11);

  }
}

- (id)_dumpHomeManagerData
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  uint64_t v20;
  HMDHomeManager *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  uint64_t v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t i;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t j;
  void *v47;
  void *v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t k;
  void *v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t m;
  void *v60;
  void *v61;
  _BOOL8 v62;
  void *v63;
  void *v64;
  _BOOL8 v65;
  void *v66;
  void *v67;
  void *v68;
  void *v69;
  void *v70;
  void *v71;
  void *v72;
  void *v73;
  id v74;
  void *v75;
  void *v77;
  void *v78;
  void *v79;
  HMDHomeManager *v80;
  void *v81;
  void *v82;
  void *v83;
  void *v84;
  void *v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  _BYTE v102[128];
  _BYTE v103[128];
  _BYTE v104[128];
  _BYTE v105[128];
  uint64_t v106;

  v106 = *MEMORY[0x24BDAC8D0];
  objc_msgSend(MEMORY[0x24BDBCED8], "dictionaryWithCapacity:", 7);
  v85 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x24BDD16A8], "string");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x24BDD1488], "mainBundle");
  v83 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v83, "infoDictionary");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "objectForKey:", *MEMORY[0x24BDBD2A0]);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "appendFormat:", CFSTR("homed: %@  "), v5);

  +[HMDHAPMetadata getSharedInstance](HMDHAPMetadata, "getSharedInstance");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  +[HMDHAPMetadata getBuiltinInstance](HMDHAPMetadata, "getBuiltinInstance");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "schemaVersion");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v82 = v6;
  objc_msgSend(v6, "version");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "schemaVersion");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v81 = v7;
  objc_msgSend(v7, "version");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "appendFormat:", CFSTR("Metadata - Current: %@/%@   Builtin: %@/%@\n"), v8, v9, v10, v11);

  v84 = v3;
  objc_msgSend(v85, "setObject:forKeyedSubscript:", v3, *MEMORY[0x24BE3EAB8]);
  v12 = (void *)MEMORY[0x24BDD17C8];
  -[HMDHomeManager primaryHomeUUID](self, "primaryHomeUUID");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v13, "UUIDString");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHomeManager currentHomeUUID](self, "currentHomeUUID");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v15, "UUIDString");
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHomeManager isAccessAllowedWhenLocked](self, "isAccessAllowedWhenLocked");
  HMFBooleanToString();
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  getLastSyncedAssistantConfigurationVersion();
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  getAssistantConfigurationSnapshot();
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v12, "stringWithFormat:", CFSTR("Primary Home: %@, Current Home: %@, Allow locked access: %@, Siri lastSyncedVersion: %@  currentSyncSnapshot: %@"), v14, v16, v17, v18, v19);
  v20 = objc_claimAutoreleasedReturnValue();

  v21 = self;
  v79 = (void *)v20;
  objc_msgSend(v85, "setObject:forKeyedSubscript:", v20, *MEMORY[0x24BE3EAC8]);
  -[HMDHomeManager syncManager](self, "syncManager");
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v22, "dumpState");
  v23 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v85, "setObject:forKeyedSubscript:", v23, *MEMORY[0x24BE3EB70]);

  -[HMDHomeManager appData](self, "appData");
  v24 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v24, "dumpState");
  v25 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v85, "setObject:forKeyedSubscript:", v25, *MEMORY[0x24BE3EA58]);

  -[HMDHomeManager homes](self, "homes");
  v26 = (void *)objc_claimAutoreleasedReturnValue();
  v27 = objc_msgSend(v26, "count");

  if (v27)
  {
    v28 = (void *)MEMORY[0x24BDBCEB8];
    -[HMDHomeManager homes](self, "homes");
    v29 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v28, "arrayWithCapacity:", objc_msgSend(v29, "count"));
    v30 = (void *)objc_claimAutoreleasedReturnValue();

    v100 = 0u;
    v101 = 0u;
    v98 = 0u;
    v99 = 0u;
    -[HMDHomeManager homes](self, "homes");
    v31 = (void *)objc_claimAutoreleasedReturnValue();
    v32 = objc_msgSend(v31, "countByEnumeratingWithState:objects:count:", &v98, v105, 16);
    if (v32)
    {
      v33 = v32;
      v34 = *(_QWORD *)v99;
      do
      {
        for (i = 0; i != v33; ++i)
        {
          if (*(_QWORD *)v99 != v34)
            objc_enumerationMutation(v31);
          objc_msgSend(*(id *)(*((_QWORD *)&v98 + 1) + 8 * i), "dumpState");
          v36 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v30, "addObject:", v36);

        }
        v33 = objc_msgSend(v31, "countByEnumeratingWithState:objects:count:", &v98, v105, 16);
      }
      while (v33);
    }

    objc_msgSend(v85, "setObject:forKey:", v30, *MEMORY[0x24BE3EAC0]);
  }
  objc_msgSend(MEMORY[0x24BE1BC08], "systemStore");
  v37 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v37, "dumpState");
  v38 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v85, "setObject:forKey:", v38, *MEMORY[0x24BE3EAF0]);

  objc_msgSend(MEMORY[0x24BDBCED8], "dictionaryWithCapacity:", 2);
  v39 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x24BDBCEB8], "array");
  v40 = (void *)objc_claimAutoreleasedReturnValue();
  v94 = 0u;
  v95 = 0u;
  v96 = 0u;
  v97 = 0u;
  -[HMDHomeManager incomingInvitations](v21, "incomingInvitations");
  v41 = (void *)objc_claimAutoreleasedReturnValue();
  v42 = (void *)objc_msgSend(v41, "copy");

  v43 = objc_msgSend(v42, "countByEnumeratingWithState:objects:count:", &v94, v104, 16);
  if (v43)
  {
    v44 = v43;
    v45 = *(_QWORD *)v95;
    do
    {
      for (j = 0; j != v44; ++j)
      {
        if (*(_QWORD *)v95 != v45)
          objc_enumerationMutation(v42);
        objc_msgSend(*(id *)(*((_QWORD *)&v94 + 1) + 8 * j), "describeWithFormat");
        v47 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v40, "addObject:", v47);

      }
      v44 = objc_msgSend(v42, "countByEnumeratingWithState:objects:count:", &v94, v104, 16);
    }
    while (v44);
  }

  v77 = v40;
  v78 = v39;
  objc_msgSend(v39, "setObject:forKeyedSubscript:", v40, *MEMORY[0x24BE3EAE0]);
  objc_msgSend(MEMORY[0x24BDBCEB8], "array");
  v48 = (void *)objc_claimAutoreleasedReturnValue();
  v90 = 0u;
  v91 = 0u;
  v92 = 0u;
  v93 = 0u;
  v80 = v21;
  -[HMDHomeManager homes](v21, "homes");
  v49 = (void *)objc_claimAutoreleasedReturnValue();
  v50 = objc_msgSend(v49, "countByEnumeratingWithState:objects:count:", &v90, v103, 16);
  if (v50)
  {
    v51 = v50;
    v52 = *(_QWORD *)v91;
    do
    {
      for (k = 0; k != v51; ++k)
      {
        if (*(_QWORD *)v91 != v52)
          objc_enumerationMutation(v49);
        v54 = *(void **)(*((_QWORD *)&v90 + 1) + 8 * k);
        v86 = 0u;
        v87 = 0u;
        v88 = 0u;
        v89 = 0u;
        objc_msgSend(v54, "outgoingInvitations");
        v55 = (void *)objc_claimAutoreleasedReturnValue();
        v56 = objc_msgSend(v55, "countByEnumeratingWithState:objects:count:", &v86, v102, 16);
        if (v56)
        {
          v57 = v56;
          v58 = *(_QWORD *)v87;
          do
          {
            for (m = 0; m != v57; ++m)
            {
              if (*(_QWORD *)v87 != v58)
                objc_enumerationMutation(v55);
              objc_msgSend(*(id *)(*((_QWORD *)&v86 + 1) + 8 * m), "describeWithFormat");
              v60 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v48, "addObject:", v60);

            }
            v57 = objc_msgSend(v55, "countByEnumeratingWithState:objects:count:", &v86, v102, 16);
          }
          while (v57);
        }

      }
      v51 = objc_msgSend(v49, "countByEnumeratingWithState:objects:count:", &v90, v103, 16);
    }
    while (v51);
  }

  objc_msgSend(v78, "setObject:forKeyedSubscript:", v48, *MEMORY[0x24BE3EB08]);
  objc_msgSend(v85, "setObject:forKeyedSubscript:", v78, *MEMORY[0x24BE3EAE8]);
  v61 = (void *)MEMORY[0x24BDD17C8];
  v62 = (_os_feature_enabled_impl() & 1) != 0
     || CFPreferencesGetAppBooleanValue(CFSTR("MatterTTU"), CFSTR("/Library/Managed Preferences/mobile/com.apple.homed.plist"), 0) != 0;
  objc_msgSend(v61, "stringWithFormat:", CFSTR("%d"), v62);
  v63 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v85, "setObject:forKeyedSubscript:", v63, CFSTR("HM_FEATURE_MATTER_TTU_ENABLED_FEATURE_OR_PROFILE"));

  v64 = (void *)MEMORY[0x24BDD17C8];
  if (_os_feature_enabled_impl())
    v65 = (isInternalBuild() & 1) != 0
       || CFPreferencesGetAppBooleanValue(CFSTR("UWBUnlock"), CFSTR("/Library/Managed Preferences/mobile/com.apple.homed.plist"), 0) != 0;
  else
    v65 = 0;
  objc_msgSend(v64, "stringWithFormat:", CFSTR("%d"), v65);
  v66 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v85, "setObject:forKeyedSubscript:", v66, CFSTR("HM_FEATURE_UWB_ENABLED_FEATURE_AND_PROFILE"));

  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("%d"), isFeatureMatteriPhoneOnlyPairingControlEnabled());
  v67 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v85, "setObject:forKeyedSubscript:", v67, CFSTR("iPhoneOnlyPairingAndControl (iPOP)"));

  +[HMDHomeKeyDataRecorder sharedRecorder](HMDHomeKeyDataRecorder, "sharedRecorder");
  v68 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v68, "records");
  v69 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v85, "setObject:forKeyedSubscript:", v69, CFSTR("Home Key Change Records"));

  -[HMDHomeManager bgOpsManager](v80, "bgOpsManager");
  v70 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v70, "dumpState");
  v71 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v85, "setObject:forKeyedSubscript:", v71, CFSTR("Background operations"));

  -[HMDHomeManager mobileAssetManager](v80, "mobileAssetManager");
  v72 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v72, "dumpState");
  v73 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v85, "setObject:forKeyedSubscript:", v73, CFSTR("MobileAssetManager"));

  v74 = objc_alloc_init(MEMORY[0x24BDDB880]);
  objc_msgSend(v74, "storedValuesByKey");
  v75 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v85, "setObject:forKeyedSubscript:", v75, CFSTR("System Commissioner Key-Value Store"));

  return v85;
}

- (void)_handleSysdiagnoseRequest:(id)a3
{
  objc_msgSend(a3, "respondWithPayload:", 0);
}

- (void)configureRetailDemoModeWithKeyPair:(id)a3 controllerName:(id)a4 demoAccessories:(id)a5 completionHandler:(id)a6
{
  id v10;
  id v11;
  id v12;
  void (**v13)(id, void *);
  void *v14;
  HMDHomeManager *v15;
  NSObject *v16;
  void *v17;
  void *v18;
  int v19;
  void *v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  v10 = a3;
  v11 = a4;
  v12 = a5;
  v13 = (void (**)(id, void *))a6;
  v14 = (void *)MEMORY[0x227676638]();
  v15 = self;
  HMFGetOSLogHandle();
  v16 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
  {
    HMFGetLogIdentifier();
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    v19 = 138543362;
    v20 = v17;
    _os_log_impl(&dword_2218F0000, v16, OS_LOG_TYPE_ERROR, "%{public}@Demo mode is not supported in HH2", (uint8_t *)&v19, 0xCu);

  }
  objc_autoreleasePoolPop(v14);
  objc_msgSend(MEMORY[0x24BDD1540], "hmErrorWithCode:", 48);
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  v13[2](v13, v18);

}

- (void)finalizeRetailDemoModeWithAllowEditing:(BOOL)a3 completionHandler:(id)a4
{
  void (**v5)(id, _QWORD, void *);
  void *v6;
  HMDHomeManager *v7;
  NSObject *v8;
  void *v9;
  void *v10;
  int v11;
  void *v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v5 = (void (**)(id, _QWORD, void *))a4;
  v6 = (void *)MEMORY[0x227676638]();
  v7 = self;
  HMFGetOSLogHandle();
  v8 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
  {
    HMFGetLogIdentifier();
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v11 = 138543362;
    v12 = v9;
    _os_log_impl(&dword_2218F0000, v8, OS_LOG_TYPE_ERROR, "%{public}@Demo mode is not supported in HH2", (uint8_t *)&v11, 0xCu);

  }
  objc_autoreleasePoolPop(v6);
  objc_msgSend(MEMORY[0x24BDD1540], "hmErrorWithCode:", 48);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v5[2](v5, 0, v10);

}

- (id)_processTestModeCurrentHomeOverride:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  void *v10;

  v4 = a3;
  v5 = v4;
  if (v4)
  {
    if (objc_msgSend(v4, "hmf_BOOLForKey:", CFSTR("kConfigTestingResetOverrideKey")))
    {
      -[HMDHomeManager setOverrideCurrentHomeUUIDToNil:](self, "setOverrideCurrentHomeUUIDToNil:", 0);
    }
    else
    {
      if (objc_msgSend(v5, "hmf_BOOLForKey:", CFSTR("kConfigTestingOverrideToNilKey")))
      {
        objc_msgSend(MEMORY[0x24BE3F150], "BOOLeanWithBool:", 1);
        v7 = (void *)objc_claimAutoreleasedReturnValue();
        -[HMDHomeManager setOverrideCurrentHomeUUIDToNil:](self, "setOverrideCurrentHomeUUIDToNil:", v7);
      }
      else
      {
        objc_msgSend(v5, "hmf_UUIDForKey:", CFSTR("kHomeUUID"));
        v7 = (void *)objc_claimAutoreleasedReturnValue();
        -[HMDHomeManager _homeWithUUID:](self, "_homeWithUUID:", v7);
        v8 = objc_claimAutoreleasedReturnValue();
        if (!v8)
        {
          objc_msgSend(MEMORY[0x24BDD1540], "hmErrorWithCode:", 3);
          v6 = (void *)objc_claimAutoreleasedReturnValue();
          goto LABEL_11;
        }
        v9 = (void *)v8;
        -[HMDHomeManager setCurrentHomeUUIDOverride:](self, "setCurrentHomeUUIDOverride:", v7);
        objc_msgSend(MEMORY[0x24BE3F150], "BOOLeanWithBool:", 0);
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        -[HMDHomeManager setOverrideCurrentHomeUUIDToNil:](self, "setOverrideCurrentHomeUUIDToNil:", v10);

      }
    }
    -[HMDHomeManager __nominateCurrentHomeUUID](self, "__nominateCurrentHomeUUID");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHomeManager _notifyCurrentHomeUpdated:isLocalUpdate:](self, "_notifyCurrentHomeUpdated:isLocalUpdate:", v7, 1);
    v6 = 0;
LABEL_11:

    goto LABEL_12;
  }
  v6 = 0;
LABEL_12:

  return v6;
}

- (id)_processTestModeHomeLocationStatusOverride:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;

  v4 = a3;
  v5 = v4;
  if (v4)
  {
    objc_msgSend(v4, "hmf_UUIDForKey:", CFSTR("kHomeUUID"));
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHomeManager _homeWithUUID:](self, "_homeWithUUID:", v6);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = v7;
    if (v7)
      objc_msgSend(v7, "_processTestModeHomeLocationStatusOverride:", v5);
    else
      objc_msgSend(MEMORY[0x24BDD1540], "hmErrorWithCode:", 2);
    v9 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v9 = 0;
  }

  return v9;
}

- (id)_processTestModeHomeAccessControlOverride:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;

  v4 = a3;
  v5 = v4;
  if (v4)
  {
    objc_msgSend(v4, "hmf_UUIDForKey:", CFSTR("kHomeUUID"));
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHomeManager _homeWithUUID:](self, "_homeWithUUID:", v6);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = v7;
    if (v7)
    {
      objc_msgSend(v7, "_processTestModeHomeAccessControlOverride:", v5);
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      if (!v9)
      {
        -[HMDHomeManager uuid](self, "uuid");
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        -[HMDHomeManager updateGenerationCounterWithReason:sourceUUID:shouldNotifyClients:](self, "updateGenerationCounterWithReason:sourceUUID:shouldNotifyClients:", CFSTR("kTestModeHomeAccessControlOverride"), v10, 1);

        v9 = 0;
      }
    }
    else
    {
      objc_msgSend(MEMORY[0x24BDD1540], "hmErrorWithCode:", 2);
      v9 = (void *)objc_claimAutoreleasedReturnValue();
    }

  }
  else
  {
    v9 = 0;
  }

  return v9;
}

- (id)_processTestModeSkipHH2MigrationOverride:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;

  v4 = a3;
  v5 = v4;
  if (v4)
  {
    objc_msgSend(v4, "hmf_UUIDForKey:", CFSTR("kHomeUUID"));
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHomeManager _homeWithUUID:](self, "_homeWithUUID:", v6);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = v7;
    if (v7)
      objc_msgSend(v7, "_processTestModeSkipHH2MigrationOverride:", v5);
    else
      objc_msgSend(MEMORY[0x24BDD1540], "hmErrorWithCode:", 2);
    v9 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v9 = 0;
  }

  return v9;
}

- (id)_processTestModeConfiguration:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;

  v4 = a3;
  v5 = v4;
  if (v4)
  {
    objc_msgSend(v4, "hmf_dictionaryForKey:", CFSTR("kConfigTestingOverrideCurrentHomeKey"));
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHomeManager _processTestModeCurrentHomeOverride:](self, "_processTestModeCurrentHomeOverride:", v6);
    v7 = (void *)objc_claimAutoreleasedReturnValue();

    if (!v7)
    {
      objc_msgSend(v5, "hmf_dictionaryForKey:", CFSTR("kConfigTestingOverrideHomeLocationStatusKey"));
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      -[HMDHomeManager _processTestModeHomeLocationStatusOverride:](self, "_processTestModeHomeLocationStatusOverride:", v8);
      v7 = (void *)objc_claimAutoreleasedReturnValue();

      if (!v7)
      {
        objc_msgSend(v5, "hmf_dictionaryForKey:", CFSTR("kConfigTestingOverrideHomeAccessControlKey"));
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        -[HMDHomeManager _processTestModeHomeAccessControlOverride:](self, "_processTestModeHomeAccessControlOverride:", v9);
        v7 = (void *)objc_claimAutoreleasedReturnValue();

        if (!v7)
        {
          objc_msgSend(v5, "hmf_dictionaryForKey:", CFSTR("kConfigTestingOverrideSkipHH2MigrationCheckDictionaryKey"));
          v10 = (void *)objc_claimAutoreleasedReturnValue();
          -[HMDHomeManager _processTestModeSkipHH2MigrationOverride:](self, "_processTestModeSkipHH2MigrationOverride:", v10);
          v7 = (void *)objc_claimAutoreleasedReturnValue();

        }
      }
    }
  }
  else
  {
    v7 = 0;
  }

  return v7;
}

- (void)_handleTestModeConfigRequest:(id)a3
{
  void *v4;
  void *v5;
  void *v6;
  id v7;

  v7 = a3;
  objc_msgSend(v7, "dictionaryForKey:", CFSTR("kConfigTestingOverrideKey"));
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHomeManager _processTestModeConfiguration:](self, "_processTestModeConfiguration:", v4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  if (v5)
  {
    objc_msgSend(v7, "respondWithError:", v5);
  }
  else
  {
    -[HMDHomeManager accessoryBrowserInternal](self, "accessoryBrowserInternal");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "_handleTestModeConfigRequest:", v7);

  }
}

- (void)_handleHomeUtilRemoteMessageRequest:(id)a3
{
  id v4;
  uint64_t v5;
  id v6;
  void (**v7)(void *, const __CFString *);
  void *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  char v14;
  uint64_t v15;
  HMDRemoteMessage *v16;
  void *v17;
  void *v18;
  HMDHomeManager *v19;
  NSObject *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  _QWORD v26[4];
  id v27;
  uint64_t v28;
  _QWORD aBlock[5];
  id v30;
  uint8_t buf[4];
  void *v32;
  __int16 v33;
  HMDRemoteMessage *v34;
  uint64_t v35;

  v35 = *MEMORY[0x24BDAC8D0];
  v4 = a3;
  v5 = MEMORY[0x24BDAC760];
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 3221225472;
  aBlock[2] = __54__HMDHomeManager__handleHomeUtilRemoteMessageRequest___block_invoke;
  aBlock[3] = &unk_24E796918;
  aBlock[4] = self;
  v6 = v4;
  v30 = v6;
  v7 = (void (**)(void *, const __CFString *))_Block_copy(aBlock);
  objc_msgSend(v6, "stringForKey:", CFSTR("HomeUtilRemoteMessageMessageNameKey"));
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  if (v8)
  {
    -[HMDHomeManager _destinationFromMessage:](self, "_destinationFromMessage:", v6);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    if (v9)
    {
      objc_msgSend(v6, "dictionaryForKey:", CFSTR("HomeUtilRemoteMessagePayloadKey"));
      v25 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v6, "numberForKey:", CFSTR("HomeUtilRemoteMessageRestrictionKey"));
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      v23 = v10;
      if (v10)
        v11 = objc_msgSend(v10, "unsignedIntegerValue", v10);
      else
        v11 = -1;
      v12 = objc_msgSend(v6, "BOOLForKey:", CFSTR("HomeUtilRemoteMessageIsSecureKey"), v23);
      v13 = objc_msgSend(v6, "BOOLForKey:", CFSTR("HomeUtilRemoteMessageIsOnewayKey"));
      v14 = v13;
      if (v13)
        v15 = 3;
      else
        v15 = 0;
      v16 = -[HMDRemoteMessage initWithName:destination:payload:type:timeout:secure:restriction:]([HMDRemoteMessage alloc], "initWithName:destination:payload:type:timeout:secure:restriction:", v8, v9, v25, v15, v12, v11, 0.0);
      if ((v14 & 1) == 0)
      {
        objc_msgSend(v6, "responseHandler");
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        -[HMDRemoteMessage setResponseHandler:](v16, "setResponseHandler:", v17);

      }
      v18 = (void *)MEMORY[0x227676638]();
      v19 = self;
      HMFGetOSLogHandle();
      v20 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
      {
        HMFGetLogIdentifier();
        v21 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        v32 = v21;
        v33 = 2112;
        v34 = v16;
        _os_log_impl(&dword_2218F0000, v20, OS_LOG_TYPE_DEFAULT, "%{public}@HomeUtilRemoteMessageRequest: Sending message: %@", buf, 0x16u);

        v5 = MEMORY[0x24BDAC760];
      }

      objc_autoreleasePoolPop(v18);
      -[HMDHomeManager messageDispatcher](v19, "messageDispatcher");
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      v26[0] = v5;
      v26[1] = 3221225472;
      v26[2] = __54__HMDHomeManager__handleHomeUtilRemoteMessageRequest___block_invoke_934;
      v26[3] = &unk_24E79BC78;
      v28 = v15;
      v27 = v6;
      objc_msgSend(v22, "sendMessage:completionHandler:", v16, v26);

    }
  }
  else
  {
    v7[2](v7, CFSTR("Message name is missing"));
  }

}

- (void)_handleUpdateMobileAssetsRequest:(id)a3
{
  id v4;
  void *v5;
  HMDHomeManager *v6;
  NSObject *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  void *v11;
  void *v12;
  HMDHomeManager *v13;
  NSObject *v14;
  void *v15;
  void *v16;
  _QWORD v17[5];
  id v18;
  uint8_t buf[4];
  void *v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  v4 = a3;
  v5 = (void *)MEMORY[0x227676638]();
  v6 = self;
  HMFGetOSLogHandle();
  v7 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543362;
    v20 = v8;
    _os_log_impl(&dword_2218F0000, v7, OS_LOG_TYPE_INFO, "%{public}@Received request to update mobile assets", buf, 0xCu);

  }
  objc_autoreleasePoolPop(v5);
  -[HMDHomeManager mobileAssetManager](v6, "mobileAssetManager");
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  if (v9)
  {
    v10 = objc_msgSend(v4, "BOOLForKey:", *MEMORY[0x24BDD5FB8]);
    -[HMDHomeManager mobileAssetManager](v6, "mobileAssetManager");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v17[0] = MEMORY[0x24BDAC760];
    v17[1] = 3221225472;
    v17[2] = __51__HMDHomeManager__handleUpdateMobileAssetsRequest___block_invoke;
    v17[3] = &unk_24E796940;
    v17[4] = v6;
    v18 = v4;
    objc_msgSend(v11, "updateAssetsWithForce:completion:", v10, v17);

  }
  else
  {
    v12 = (void *)MEMORY[0x227676638]();
    v13 = v6;
    HMFGetOSLogHandle();
    v14 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v20 = v15;
      _os_log_impl(&dword_2218F0000, v14, OS_LOG_TYPE_ERROR, "%{public}@No mobile asset manager, bailing", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v12);
    objc_msgSend(MEMORY[0x24BDD1540], "hmErrorWithCode:", 2);
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "respondWithError:", v16);

  }
}

- (void)_handleClearMobileAssetsInfoRequest:(id)a3
{
  id v4;
  void *v5;
  HMDHomeManager *v6;
  NSObject *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  HMDHomeManager *v13;
  NSObject *v14;
  void *v15;
  _QWORD v16[4];
  id v17;
  uint8_t buf[4];
  void *v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  v4 = a3;
  v5 = (void *)MEMORY[0x227676638]();
  v6 = self;
  HMFGetOSLogHandle();
  v7 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543362;
    v19 = v8;
    _os_log_impl(&dword_2218F0000, v7, OS_LOG_TYPE_INFO, "%{public}@Received request to clear mobile assets info", buf, 0xCu);

  }
  objc_autoreleasePoolPop(v5);
  -[HMDHomeManager mobileAssetManager](v6, "mobileAssetManager");
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  if (v9)
  {
    -[HMDHomeManager mobileAssetManager](v6, "mobileAssetManager");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v16[0] = MEMORY[0x24BDAC760];
    v16[1] = 3221225472;
    v16[2] = __54__HMDHomeManager__handleClearMobileAssetsInfoRequest___block_invoke;
    v16[3] = &unk_24E79BD80;
    v17 = v4;
    objc_msgSend(v10, "clearLocalInfoWithCompletion:", v16);

    v11 = v17;
  }
  else
  {
    v12 = (void *)MEMORY[0x227676638]();
    v13 = v6;
    HMFGetOSLogHandle();
    v14 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v19 = v15;
      _os_log_impl(&dword_2218F0000, v14, OS_LOG_TYPE_ERROR, "%{public}@No mobile asset manager, bailing", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v12);
    objc_msgSend(MEMORY[0x24BDD1540], "hmErrorWithCode:", 2);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "respondWithError:", v11);
  }

}

- (id)_destinationFromMessage:(id)a3
{
  id v4;
  id v5;
  void (**v6)(void *, const __CFString *);
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  HMDRemoteDeviceMessageDestination *v12;
  void *v13;
  void *v14;
  int v15;
  id v16;
  void *v17;
  void *v18;
  id v19;
  void *v20;
  void *v21;
  void *v23;
  _QWORD aBlock[5];
  id v25;

  v4 = a3;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 3221225472;
  aBlock[2] = __42__HMDHomeManager__destinationFromMessage___block_invoke;
  aBlock[3] = &unk_24E796918;
  aBlock[4] = self;
  v5 = v4;
  v25 = v5;
  v6 = (void (**)(void *, const __CFString *))_Block_copy(aBlock);
  objc_msgSend(v5, "uuidForKey:", CFSTR("HomeUtilRemoteMessageTargetKey"));
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  if (v7)
  {
    objc_msgSend(v5, "stringForKey:", CFSTR("HomeUtilRemoteMessageDestinationKey"));
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    if (v8)
    {
      +[HMDDeviceHandle deviceHandleForDestination:](HMDDeviceHandle, "deviceHandleForDestination:", v8);
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      if (v9)
      {
        -[HMDHomeManager accountRegistry](self, "accountRegistry");
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v10, "deviceForHandle:", v9);
        v11 = (void *)objc_claimAutoreleasedReturnValue();

        v12 = -[HMDRemoteDeviceMessageDestination initWithTarget:device:]([HMDRemoteDeviceMessageDestination alloc], "initWithTarget:device:", v7, v11);
      }
      else
      {
        +[HMDAccountHandle accountHandleForDestination:](HMDAccountHandle, "accountHandleForDestination:", v8);
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        if (v11)
        {
          objc_msgSend(v5, "dictionaryForKey:", CFSTR("HomeUtilRemoteMessageDeviceCapabilitiesKey"));
          v13 = (void *)objc_claimAutoreleasedReturnValue();
          v12 = -[HMDRemoteAccountMessageDestination initWithTarget:handle:multicast:deviceCapabilities:]([HMDRemoteAccountMessageDestination alloc], "initWithTarget:handle:multicast:deviceCapabilities:", v7, v11, v13 == 0, v13);
        }
        else
        {
          objc_msgSend(v8, "componentsSeparatedByString:", CFSTR(":"));
          v13 = (void *)objc_claimAutoreleasedReturnValue();
          if ((unint64_t)objc_msgSend(v13, "count") >= 2
            && (objc_msgSend(v13, "objectAtIndexedSubscript:", 0),
                v14 = (void *)objc_claimAutoreleasedReturnValue(),
                v15 = objc_msgSend(v14, "isEqualToString:", CFSTR("home")),
                v14,
                v15))
          {
            v16 = objc_alloc(MEMORY[0x24BDD1880]);
            objc_msgSend(v13, "objectAtIndexedSubscript:", 1);
            v17 = (void *)objc_claimAutoreleasedReturnValue();
            v18 = (void *)objc_msgSend(v16, "initWithUUIDString:", v17);

            if (v18)
            {
              if ((unint64_t)objc_msgSend(v13, "count") < 3)
              {
                v12 = -[HMDRemoteHomeMessageDestination initWithTarget:homeUUID:]([HMDRemoteHomeMessageDestination alloc], "initWithTarget:homeUUID:", v7, v18);
              }
              else
              {
                v19 = objc_alloc_init(MEMORY[0x24BDD16F0]);
                objc_msgSend(v19, "setNumberStyle:", 1);
                objc_msgSend(v13, "objectAtIndexedSubscript:", 2);
                v20 = (void *)objc_claimAutoreleasedReturnValue();
                v23 = v19;
                objc_msgSend(v19, "numberFromString:", v20);
                v21 = (void *)objc_claimAutoreleasedReturnValue();

                if (v21)
                {
                  v12 = -[HMDRemoteHomeMessageDestination initWithTarget:homeUUID:queueTimeout:]([HMDRemoteHomeMessageDestination alloc], "initWithTarget:homeUUID:queueTimeout:", v7, v18, v21);
                }
                else
                {
                  v6[2](v6, CFSTR("Home destination queueTimeout is not a valid number"));
                  v12 = 0;
                }

              }
            }
            else
            {
              v6[2](v6, CFSTR("Home destination has an invalid homeUUID"));
              v12 = 0;
            }

          }
          else
          {
            v6[2](v6, CFSTR("Unknown device, account or home destination"));
            v12 = 0;
          }
        }

      }
    }
    else
    {
      v6[2](v6, CFSTR("Remote destination string is missing"));
      v12 = 0;
    }

  }
  else
  {
    v6[2](v6, CFSTR("Target UUID is missing"));
    v12 = 0;
  }

  return v12;
}

- (void)registerStateHandler
{
  void *v3;
  uint64_t v4;
  id v5;
  id location;

  objc_initWeak(&location, self);
  -[HMDHomeManager workQueue](self, "workQueue");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = MEMORY[0x24BDAC760];
  objc_copyWeak(&v5, &location);
  -[HMDHomeManager setStateHandle:](self, "setStateHandle:", os_state_add_handler(), v4, 3221225472, __38__HMDHomeManager_registerStateHandler__block_invoke, &unk_24E796968);

  objc_destroyWeak(&v5);
  objc_destroyWeak(&location);
}

- (void)_dumpToLog:(id)a3 withState:(id)a4
{
  id v6;

  v6 = a4;
  -[HMDHomeManager _logState:key:indent:](self, "_logState:key:indent:", a3, 0, 0);
  -[HMDHomeManager _logState:key:indent:](self, "_logState:key:indent:", v6, 0, 0);

}

- (void)_logState:(id)a3 key:(id)a4 indent:(id)a5
{
  id v8;
  id v9;
  id v10;
  void *v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t i;
  void *v17;
  void *v18;
  void *v19;
  HMDHomeManager *v20;
  NSObject *v21;
  void *v22;
  uint64_t v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t j;
  void *v29;
  id v30;
  id v31;
  void *v32;
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  uint8_t v42[128];
  uint8_t buf[4];
  void *v44;
  __int16 v45;
  uint64_t v46;
  __int16 v47;
  void *v48;
  __int16 v49;
  id v50;
  _BYTE v51[128];
  uint64_t v52;

  v52 = *MEMORY[0x24BDAC8D0];
  v8 = a3;
  v9 = a4;
  v10 = a5;
  v11 = v10;
  if (v10)
    objc_msgSend(v10, "indentationByLevels:", 1);
  else
    objc_msgSend(MEMORY[0x24BE3F280], "indentation");
  v32 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    v29 = v11;
    v30 = v9;
    v31 = v8;
    v38 = 0u;
    v39 = 0u;
    v40 = 0u;
    v41 = 0u;
    v12 = v8;
    v13 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v38, v51, 16);
    if (v13)
    {
      v14 = v13;
      v15 = *(_QWORD *)v39;
      v33 = *MEMORY[0x24BE3EB68];
      do
      {
        for (i = 0; i != v14; ++i)
        {
          if (*(_QWORD *)v39 != v15)
            objc_enumerationMutation(v12);
          v17 = *(void **)(*((_QWORD *)&v38 + 1) + 8 * i);
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) != 0)
          {
            if ((objc_msgSend(v17, "isEqualToString:", v33) & 1) == 0)
            {
              objc_msgSend(v12, "objectForKey:", v17);
              v18 = (void *)objc_claimAutoreleasedReturnValue();
              -[HMDHomeManager _logState:key:indent:](self, "_logState:key:indent:", v18, v17, v32);

            }
          }
          else
          {
            v19 = (void *)MEMORY[0x227676638]();
            v20 = self;
            HMFGetOSLogHandle();
            v21 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
            {
              HMFGetLogIdentifier();
              v22 = (void *)objc_claimAutoreleasedReturnValue();
              v23 = objc_opt_class();
              *(_DWORD *)buf = 138544130;
              v44 = v22;
              v45 = 2112;
              v46 = v23;
              v47 = 2112;
              v48 = v17;
              v49 = 2112;
              v50 = v12;
              _os_log_impl(&dword_2218F0000, v21, OS_LOG_TYPE_ERROR, "%{public}@Cannot include key of non-NSString class %@: %@ in %@", buf, 0x2Au);

            }
            objc_autoreleasePoolPop(v19);
          }
        }
        v14 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v38, v51, 16);
      }
      while (v14);
    }

    v9 = v30;
    v8 = v31;
    v11 = v29;
LABEL_27:

    goto LABEL_28;
  }
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    v36 = 0u;
    v37 = 0u;
    v34 = 0u;
    v35 = 0u;
    v24 = v8;
    v25 = objc_msgSend(v24, "countByEnumeratingWithState:objects:count:", &v34, v42, 16);
    if (v25)
    {
      v26 = v25;
      v27 = *(_QWORD *)v35;
      do
      {
        for (j = 0; j != v26; ++j)
        {
          if (*(_QWORD *)v35 != v27)
            objc_enumerationMutation(v24);
          -[HMDHomeManager _logState:key:indent:](self, "_logState:key:indent:", *(_QWORD *)(*((_QWORD *)&v34 + 1) + 8 * j), v9, v11);
        }
        v26 = objc_msgSend(v24, "countByEnumeratingWithState:objects:count:", &v34, v42, 16);
      }
      while (v26);
    }
    goto LABEL_27;
  }
LABEL_28:

}

- (void)__startupFirewallRuleManagerForMessage:(id)a3 completion:(id)a4
{
  id v6;
  id v7;
  HMDTransientRuleManagerClient *v8;
  void *v9;
  void *v10;
  HMDTransientRuleManagerClient *v11;
  void *v12;
  id v13;
  HMDTransientRuleManagerClient *v14;
  id v15;
  id v16;
  _QWORD v17[5];
  id v18;
  id v19;
  HMDTransientRuleManagerClient *v20;
  id v21;

  v6 = a3;
  v7 = a4;
  v8 = [HMDTransientRuleManagerClient alloc];
  objc_msgSend(v6, "identifier");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "UUIDString");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v11 = -[HMDTransientRuleManagerClient initWithDescription:](v8, "initWithDescription:", v10);

  +[HMDNetworkRouterFirewallRuleManager sharedInstance](HMDNetworkRouterFirewallRuleManager, "sharedInstance");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  v17[0] = MEMORY[0x24BDAC760];
  v17[1] = 3221225472;
  v17[2] = __68__HMDHomeManager___startupFirewallRuleManagerForMessage_completion___block_invoke;
  v17[3] = &unk_24E7969B8;
  v17[4] = self;
  v18 = v6;
  v19 = v12;
  v20 = v11;
  v21 = v7;
  v13 = v7;
  v14 = v11;
  v15 = v12;
  v16 = v6;
  objc_msgSend(v15, "startupForClient:completion:", v14, v17);

}

- (void)_handleNetworkFirewallDumpCloudRecordsRequest:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  char v7;
  char v8;
  char v9;
  uint64_t v10;
  char v11;
  BOOL v12;
  void *v13;
  _QWORD v14[4];
  id v15;
  id v16;
  id v17;
  char v18;
  char v19;
  char v20;

  v4 = a3;
  objc_msgSend(v4, "stringForKey:", *MEMORY[0x24BDD6800]);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "stringForKey:", *MEMORY[0x24BDD6808]);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = objc_msgSend(v4, "BOOLForKey:", *MEMORY[0x24BDD6810]);
  v8 = objc_msgSend(v4, "BOOLForKey:", *MEMORY[0x24BDD67F0]);
  v9 = objc_msgSend(v4, "BOOLForKey:", *MEMORY[0x24BDD6820]);
  if (!v5 || objc_msgSend(v5, "length"))
  {
    if (v6)
    {
      v10 = objc_msgSend(v6, "length");
      if (v5)
        v11 = 1;
      else
        v11 = v8;
      if (v5)
        v12 = v10 == 0;
      else
        v12 = 1;
      if (v12 || (v11 & 1) == 0)
        goto LABEL_15;
LABEL_16:
      v14[0] = MEMORY[0x24BDAC760];
      v14[1] = 3221225472;
      v14[2] = __64__HMDHomeManager__handleNetworkFirewallDumpCloudRecordsRequest___block_invoke;
      v14[3] = &unk_24E796A08;
      v15 = v4;
      v18 = v8;
      v16 = v5;
      v19 = v7;
      v17 = v6;
      v20 = v9;
      -[HMDHomeManager __startupFirewallRuleManagerForMessage:completion:](self, "__startupFirewallRuleManagerForMessage:completion:", v15, v14);

      goto LABEL_17;
    }
    if (v5 || (v8 & 1) != 0)
      goto LABEL_16;
  }
LABEL_15:
  objc_msgSend(MEMORY[0x24BDD1540], "hmErrorWithCode:", 3);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "respondWithError:", v13);

LABEL_17:
}

- (void)_handleNetworkFirewallAddOverridesRequest:(id)a3
{
  id v4;
  void *v5;
  char v6;
  void *v7;
  _QWORD v8[4];
  id v9;
  id v10;
  char v11;

  v4 = a3;
  objc_msgSend(v4, "dataForKey:", *MEMORY[0x24BDD67D8]);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  if (v5)
  {
    v6 = objc_msgSend(v4, "BOOLForKey:", *MEMORY[0x24BDD67E8]);
    v8[0] = MEMORY[0x24BDAC760];
    v8[1] = 3221225472;
    v8[2] = __60__HMDHomeManager__handleNetworkFirewallAddOverridesRequest___block_invoke;
    v8[3] = &unk_24E796A30;
    v9 = v4;
    v11 = v6;
    v10 = v5;
    -[HMDHomeManager __startupFirewallRuleManagerForMessage:completion:](self, "__startupFirewallRuleManagerForMessage:completion:", v9, v8);

  }
  else
  {
    objc_msgSend(MEMORY[0x24BDD1540], "hmErrorWithCode:", 3);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "respondWithError:", v7);

  }
}

- (void)_handleNetworkFirewallRemoveOverridesRequest:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  BOOL v7;
  void *v8;
  _QWORD v9[4];
  id v10;
  id v11;
  id v12;

  v4 = a3;
  objc_msgSend(v4, "stringForKey:", *MEMORY[0x24BDD68B8]);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "stringForKey:", *MEMORY[0x24BDD68C0]);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  if (v6)
    v7 = v5 == 0;
  else
    v7 = 0;
  if (v7)
  {
    objc_msgSend(MEMORY[0x24BDD1540], "hmErrorWithCode:", 3);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "respondWithError:", v8);

  }
  else
  {
    v9[0] = MEMORY[0x24BDAC760];
    v9[1] = 3221225472;
    v9[2] = __63__HMDHomeManager__handleNetworkFirewallRemoveOverridesRequest___block_invoke;
    v9[3] = &unk_24E796A58;
    v10 = v4;
    v11 = v5;
    v12 = v6;
    -[HMDHomeManager __startupFirewallRuleManagerForMessage:completion:](self, "__startupFirewallRuleManagerForMessage:completion:", v10, v9);

  }
}

- (void)_handleNetworkFirewallDumpLocalRulesRequest:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  char v8;
  char v9;
  BOOL v10;
  char v12;
  void *v13;
  void *v14;
  id v15;
  _QWORD v16[4];
  id v17;
  id v18;
  id v19;
  id v20;
  char v21;
  char v22;

  v4 = a3;
  objc_msgSend(v4, "stringForKey:", *MEMORY[0x24BDD6840]);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "stringForKey:", *MEMORY[0x24BDD6848]);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "stringForKey:", *MEMORY[0x24BDD6828]);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = objc_msgSend(v4, "BOOLForKey:", *MEMORY[0x24BDD6830]);
  v9 = objc_msgSend(v4, "BOOLForKey:", *MEMORY[0x24BDD6850]);
  if (v6)
    v10 = v5 == 0;
  else
    v10 = 0;
  if (v10)
    goto LABEL_11;
  if (v7 && v6 == 0)
    goto LABEL_11;
  v12 = v9;
  if (!v7)
  {
    v13 = 0;
    goto LABEL_14;
  }
  v13 = (void *)objc_msgSend(objc_alloc(MEMORY[0x24BE3F2A8]), "initWithVersionString:", v7);
  if (v13)
  {
LABEL_14:
    v16[0] = MEMORY[0x24BDAC760];
    v16[1] = 3221225472;
    v16[2] = __62__HMDHomeManager__handleNetworkFirewallDumpLocalRulesRequest___block_invoke;
    v16[3] = &unk_24E796A80;
    v17 = v4;
    v18 = v6;
    v19 = v5;
    v20 = v13;
    v21 = v8;
    v22 = v12;
    v15 = v13;
    -[HMDHomeManager __startupFirewallRuleManagerForMessage:completion:](self, "__startupFirewallRuleManagerForMessage:completion:", v17, v16);

    goto LABEL_12;
  }
LABEL_11:
  objc_msgSend(MEMORY[0x24BDD1540], "hmErrorWithCode:", 3);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "respondWithError:", v14);

LABEL_12:
}

- (void)_handleNetworkFirewallDumpPairedMetadataRequest:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  char v8;
  char v9;
  char v11;
  void *v12;
  void *v13;
  id v14;
  _QWORD v15[4];
  id v16;
  id v17;
  id v18;
  id v19;
  char v20;
  char v21;

  v4 = a3;
  objc_msgSend(v4, "stringForKey:", *MEMORY[0x24BDD6878]);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "stringForKey:", *MEMORY[0x24BDD6880]);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "stringForKey:", *MEMORY[0x24BDD6860]);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = objc_msgSend(v4, "BOOLForKey:", *MEMORY[0x24BDD6868]);
  v9 = objc_msgSend(v4, "BOOLForKey:", *MEMORY[0x24BDD6888]);
  if ((v5 != 0) != (v6 != 0))
    goto LABEL_8;
  if (v7 && v6 == 0)
    goto LABEL_8;
  v11 = v9;
  if (!v7)
  {
    v12 = 0;
    goto LABEL_11;
  }
  v12 = (void *)objc_msgSend(objc_alloc(MEMORY[0x24BE3F2A8]), "initWithVersionString:", v7);
  if (v12)
  {
LABEL_11:
    v15[0] = MEMORY[0x24BDAC760];
    v15[1] = 3221225472;
    v15[2] = __66__HMDHomeManager__handleNetworkFirewallDumpPairedMetadataRequest___block_invoke;
    v15[3] = &unk_24E796A80;
    v16 = v4;
    v17 = v5;
    v18 = v6;
    v19 = v12;
    v20 = v8;
    v21 = v11;
    v14 = v12;
    -[HMDHomeManager __startupFirewallRuleManagerForMessage:completion:](self, "__startupFirewallRuleManagerForMessage:completion:", v16, v15);

    goto LABEL_9;
  }
LABEL_8:
  objc_msgSend(MEMORY[0x24BDD1540], "hmErrorWithCode:", 3);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "respondWithError:", v13);

LABEL_9:
}

- (void)_handleNetworkFirewallRemoveLocalRulesRequest:(id)a3
{
  id v4;
  id v5;
  _QWORD v6[4];
  id v7;

  v4 = a3;
  v6[0] = MEMORY[0x24BDAC760];
  v6[1] = 3221225472;
  v6[2] = __64__HMDHomeManager__handleNetworkFirewallRemoveLocalRulesRequest___block_invoke;
  v6[3] = &unk_24E796AA8;
  v7 = v4;
  v5 = v4;
  -[HMDHomeManager __startupFirewallRuleManagerForMessage:completion:](self, "__startupFirewallRuleManagerForMessage:completion:", v5, v6);

}

- (void)_handleNetworkFirewallFetchCloudChangesRequest:(id)a3
{
  id v4;
  char v5;
  id v6;
  _QWORD v7[4];
  id v8;
  char v9;

  v4 = a3;
  v5 = objc_msgSend(v4, "BOOLForKey:", *MEMORY[0x24BDD6898]);
  v7[0] = MEMORY[0x24BDAC760];
  v7[1] = 3221225472;
  v7[2] = __65__HMDHomeManager__handleNetworkFirewallFetchCloudChangesRequest___block_invoke;
  v7[3] = &unk_24E796AF8;
  v9 = v5;
  v8 = v4;
  v6 = v4;
  -[HMDHomeManager __startupFirewallRuleManagerForMessage:completion:](self, "__startupFirewallRuleManagerForMessage:completion:", v6, v7);

}

- (void)_handleGetTLVForJSON:(id)a3
{
  id v3;
  void *v4;
  void *v5;
  id v6;
  void *v7;
  void *v8;
  void *v9;
  id v10;
  uint64_t v11;
  _QWORD v12[2];

  v12[1] = *MEMORY[0x24BDAC8D0];
  v3 = a3;
  objc_msgSend(v3, "dataForKey:", *MEMORY[0x24BDD6018]);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  if (v4)
  {
    v10 = 0;
    +[HMDNetworkRouterFirewallRuleManagerUtils dumpTLVsFromJSONData:error:](HMDNetworkRouterFirewallRuleManagerUtils, "dumpTLVsFromJSONData:error:", v4, &v10);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = v10;
    v7 = v6;
    if (v5)
    {
      v11 = *MEMORY[0x24BDD6020];
      v12[0] = v5;
      objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v12, &v11, 1);
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v3, "respondWithPayload:", v8);

    }
    else
    {
      if (!v6)
      {
        objc_msgSend(MEMORY[0x24BDD1540], "hmErrorWithCode:", 2);
        v7 = (void *)objc_claimAutoreleasedReturnValue();
      }
      objc_msgSend(v3, "respondWithError:", v7);
    }

  }
  else
  {
    objc_msgSend(MEMORY[0x24BDD1540], "hmErrorWithCode:", 20);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "respondWithError:", v9);

  }
}

- (void)_addIncomingInvitation:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  id v7;
  os_unfair_lock_s *p_lock;
  uint64_t v9;
  void *v10;
  HMDHomeManager *v11;
  NSObject *v12;
  id v13;
  void *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(uint64_t);
  void *v19;
  id v20;
  HMDHomeManager *v21;
  uint8_t buf[4];
  id v23;
  __int16 v24;
  void *v25;
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  v4 = a3;
  -[HMDHomeManager backingStore](self, "backingStore");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "context");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v16 = MEMORY[0x24BDAC760];
  v17 = 3221225472;
  v18 = __41__HMDHomeManager__addIncomingInvitation___block_invoke;
  v19 = &unk_24E79C268;
  v7 = v4;
  v20 = v7;
  v21 = self;
  objc_msgSend(v6, "performBlock:", &v16);

  p_lock = &self->_lock;
  v9 = os_unfair_lock_lock_with_options();
  v10 = (void *)MEMORY[0x227676638](v9);
  v11 = self;
  HMFGetOSLogHandle();
  v12 = (id)objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v13 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "describeWithFormat", v16, v17, v18, v19);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543618;
    v23 = v13;
    v24 = 2112;
    v25 = v14;
    _os_log_impl(&dword_2218F0000, v12, OS_LOG_TYPE_INFO, "%{public}@Added the invitation object to the list : %@", buf, 0x16u);

  }
  objc_autoreleasePoolPop(v10);
  -[HMDHomeManager incomingInvitations](v11, "incomingInvitations");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v15, "addObject:", v7);

  os_unfair_lock_unlock(p_lock);
  -[HMDHomeManager _updateIncomingInvitesPresent](v11, "_updateIncomingInvitesPresent");

}

- (void)_removeIncomingInvitation:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  id v7;
  void *v8;
  void *v9;
  void *v10;
  HMDHomeManager *v11;
  NSObject *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  _QWORD v17[4];
  id v18;
  uint8_t buf[4];
  void *v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  v4 = a3;
  if (v4)
  {
    -[HMDHomeManager backingStore](self, "backingStore");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "context");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v17[0] = MEMORY[0x24BDAC760];
    v17[1] = 3221225472;
    v17[2] = __44__HMDHomeManager__removeIncomingInvitation___block_invoke;
    v17[3] = &unk_24E79C240;
    v7 = v4;
    v18 = v7;
    objc_msgSend(v6, "performBlock:", v17);

    os_unfair_lock_lock_with_options();
    -[HMDHomeManager incomingInvitations](self, "incomingInvitations");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "removeObject:", v7);

    os_unfair_lock_unlock(&self->_lock);
    -[HMDHomeManager _updateIncomingInvitesPresent](self, "_updateIncomingInvitesPresent");
    v9 = v18;
  }
  else
  {
    v10 = (void *)MEMORY[0x227676638]();
    v11 = self;
    HMFGetOSLogHandle();
    v12 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v20 = v13;
      _os_log_impl(&dword_2218F0000, v12, OS_LOG_TYPE_ERROR, "%{public}@Unexpected nil invitation", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v10);
    +[HMDTTRManager sharedManager](HMDTTRManager, "sharedManager");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("%@: %@ | %@"), CFSTR("Unexpected nil invitation detected"), CFSTR("HomeKit"), CFSTR("Users+Invitations"));
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD16E0], "numberWithInteger:", 938670);
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v15, "stringValue");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "requestRadarWithMessage:radarTitle:componentName:componentVersion:componentID:", v14, CFSTR("Unexpected nil invitation detected"), CFSTR("HomeKit"), CFSTR("Users+Invitations"), v16);

  }
}

- (void)auditAccessForUsersForHome:(id)a3
{
  id v4;
  NSObject *v5;
  id v6;
  _QWORD v7[5];
  id v8;

  v4 = a3;
  -[HMDHomeManager workQueue](self, "workQueue");
  v5 = objc_claimAutoreleasedReturnValue();
  v7[0] = MEMORY[0x24BDAC760];
  v7[1] = 3221225472;
  v7[2] = __45__HMDHomeManager_auditAccessForUsersForHome___block_invoke;
  v7[3] = &unk_24E79C268;
  v7[4] = self;
  v8 = v4;
  v6 = v4;
  dispatch_async(v5, v7);

}

- (HMDHomeOwnerCloudShareManager)homeOwnerCloudShareManager
{
  os_unfair_lock_s *p_lock;
  HMDHomeOwnerCloudShareManager *homeOwnerCloudShareManager;
  void *v5;
  HMDHomeOwnerCloudShareManager *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  HMDHomeOwnerCloudShareManager *v12;
  HMDHomeOwnerCloudShareManager *v13;
  HMDHomeOwnerCloudShareManager *v14;

  p_lock = &self->_lock;
  os_unfair_lock_lock_with_options();
  homeOwnerCloudShareManager = self->_homeOwnerCloudShareManager;
  if (!homeOwnerCloudShareManager)
  {
    +[HMDCoreData sharedInstance](HMDCoreData, "sharedInstance");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = [HMDHomeOwnerCloudShareManager alloc];
    objc_msgSend(v5, "container");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "cloudSharedStore");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "cloudPrivateStore");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v10 = (void *)objc_msgSend(v5, "newManagedObjectContext");
    +[HMDCoreDataCloudTransform sharedInstance](HMDCoreDataCloudTransform, "sharedInstance");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v12 = -[HMDHomeOwnerCloudShareManager initWithContainer:sharedStore:privateStore:moc:cloudTransform:homeManager:](v6, "initWithContainer:sharedStore:privateStore:moc:cloudTransform:homeManager:", v7, v8, v9, v10, v11, self);
    v13 = self->_homeOwnerCloudShareManager;
    self->_homeOwnerCloudShareManager = v12;

    homeOwnerCloudShareManager = self->_homeOwnerCloudShareManager;
  }
  v14 = homeOwnerCloudShareManager;
  os_unfair_lock_unlock(p_lock);
  return v14;
}

- (void)setHomeOwnerCloudShareManager:(id)a3
{
  HMDHomeOwnerCloudShareManager *v4;
  HMDHomeOwnerCloudShareManager *homeOwnerCloudShareManager;

  v4 = (HMDHomeOwnerCloudShareManager *)a3;
  os_unfair_lock_lock_with_options();
  homeOwnerCloudShareManager = self->_homeOwnerCloudShareManager;
  self->_homeOwnerCloudShareManager = v4;

  os_unfair_lock_unlock(&self->_lock);
}

- (HMDHomeSharedUserCloudShareManager)homeSharedUserCloudShareManager
{
  os_unfair_lock_s *p_lock;
  HMDHomeSharedUserCloudShareManager *homeSharedUserCloudShareManager;
  void *v5;
  HMDHomeSharedUserCloudShareManager *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  HMDHomeSharedUserCloudShareManager *v11;
  HMDHomeSharedUserCloudShareManager *v12;
  HMDHomeSharedUserCloudShareManager *v13;

  p_lock = &self->_lock;
  os_unfair_lock_lock_with_options();
  homeSharedUserCloudShareManager = self->_homeSharedUserCloudShareManager;
  if (!homeSharedUserCloudShareManager)
  {
    +[HMDCoreData sharedInstance](HMDCoreData, "sharedInstance");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = [HMDHomeSharedUserCloudShareManager alloc];
    objc_msgSend(v5, "container");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "cloudSharedStore");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "cloudPrivateStore");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v10 = (void *)objc_msgSend(v5, "newManagedObjectContext");
    v11 = -[HMDHomeSharedUserCloudShareManager initWithContainer:sharedStore:privateStore:moc:](v6, "initWithContainer:sharedStore:privateStore:moc:", v7, v8, v9, v10);
    v12 = self->_homeSharedUserCloudShareManager;
    self->_homeSharedUserCloudShareManager = v11;

    homeSharedUserCloudShareManager = self->_homeSharedUserCloudShareManager;
  }
  v13 = homeSharedUserCloudShareManager;
  os_unfair_lock_unlock(p_lock);
  return v13;
}

- (void)setHomeSharedUserCloudShareManager:(id)a3
{
  HMDHomeSharedUserCloudShareManager *v4;
  HMDHomeSharedUserCloudShareManager *homeSharedUserCloudShareManager;

  v4 = (HMDHomeSharedUserCloudShareManager *)a3;
  os_unfair_lock_lock_with_options();
  homeSharedUserCloudShareManager = self->_homeSharedUserCloudShareManager;
  self->_homeSharedUserCloudShareManager = v4;

  os_unfair_lock_unlock(&self->_lock);
}

- (HMDSharedUserPrivateSettingsManager)sharedUserPrivateSettingsManager
{
  os_unfair_lock_s *p_lock;
  HMDSharedUserPrivateSettingsManager *sharedUserPrivateSettingsManager;
  HMDSharedUserPrivateSettingsManager *v5;
  void *v6;
  void *v7;
  HMDSharedUserPrivateSettingsManager *v8;
  HMDSharedUserPrivateSettingsManager *v9;
  HMDSharedUserPrivateSettingsManager *v10;

  p_lock = &self->_lock;
  os_unfair_lock_lock_with_options();
  sharedUserPrivateSettingsManager = self->_sharedUserPrivateSettingsManager;
  if (!sharedUserPrivateSettingsManager)
  {
    v5 = [HMDSharedUserPrivateSettingsManager alloc];
    +[HMDCoreData sharedInstance](HMDCoreData, "sharedInstance");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    +[HMDCoreDataCloudTransform sharedInstance](HMDCoreDataCloudTransform, "sharedInstance");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = -[HMDSharedUserPrivateSettingsManager initWithCoreData:cloudTransform:homeManager:](v5, "initWithCoreData:cloudTransform:homeManager:", v6, v7, self);
    v9 = self->_sharedUserPrivateSettingsManager;
    self->_sharedUserPrivateSettingsManager = v8;

    sharedUserPrivateSettingsManager = self->_sharedUserPrivateSettingsManager;
  }
  v10 = sharedUserPrivateSettingsManager;
  os_unfair_lock_unlock(p_lock);
  return v10;
}

- (int64_t)numberOfPendingIncomingInvitation
{
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  int64_t v6;
  uint64_t v7;
  uint64_t i;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _BYTE v14[128];
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  -[HMDHomeManager incomingInvitations](self, "incomingInvitations", 0);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = (void *)objc_msgSend(v2, "copy");

  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
  if (v4)
  {
    v5 = v4;
    v6 = 0;
    v7 = *(_QWORD *)v11;
    do
    {
      for (i = 0; i != v5; ++i)
      {
        if (*(_QWORD *)v11 != v7)
          objc_enumerationMutation(v3);
        if (objc_msgSend(*(id *)(*((_QWORD *)&v10 + 1) + 8 * i), "invitationState") == 2)
          ++v6;
      }
      v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
    }
    while (v5);
  }
  else
  {
    v6 = 0;
  }

  return v6;
}

- (void)_pruneExpiredIncomingInvitations
{
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t i;
  void *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  void *v11;
  void *v12;
  HMDHomeManager *v13;
  NSObject *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  HMDHomeManager *v20;
  NSObject *v21;
  void *v22;
  void *v23;
  id obj;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint8_t buf[4];
  void *v32;
  __int16 v33;
  void *v34;
  _BYTE v35[128];
  uint64_t v36;

  v36 = *MEMORY[0x24BDAC8D0];
  v27 = 0u;
  v28 = 0u;
  v29 = 0u;
  v30 = 0u;
  -[HMDHomeManager incomingInvitations](self, "incomingInvitations");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = (void *)objc_msgSend(v2, "copy");

  obj = v3;
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v27, v35, 16);
  if (v4)
  {
    v5 = v4;
    v26 = *(_QWORD *)v28;
    do
    {
      for (i = 0; i != v5; ++i)
      {
        if (*(_QWORD *)v28 != v26)
          objc_enumerationMutation(obj);
        v7 = *(void **)(*((_QWORD *)&v27 + 1) + 8 * i);
        objc_msgSend(MEMORY[0x24BDBCE60], "date");
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v7, "endDate");
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        v10 = objc_msgSend(v8, "compare:", v9);

        if (v10 != -1)
        {
          objc_msgSend(v7, "updateInvitationState:", 6);
          objc_msgSend(v7, "identifier");
          v11 = (void *)objc_claimAutoreleasedReturnValue();
          v12 = (void *)MEMORY[0x227676638]();
          v13 = self;
          HMFGetOSLogHandle();
          v14 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
          {
            HMFGetLogIdentifier();
            v15 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v7, "describeWithFormat");
            v16 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 138543618;
            v32 = v15;
            v33 = 2112;
            v34 = v16;
            _os_log_impl(&dword_2218F0000, v14, OS_LOG_TYPE_INFO, "%{public}@Pruning invitation %@ as expired", buf, 0x16u);

          }
          objc_autoreleasePoolPop(v12);
          +[HMDBulletinBoard sharedBulletinBoard](HMDBulletinBoard, "sharedBulletinBoard");
          v17 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v11, "UUIDString");
          v18 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v17, "removeBulletinWithRecordID:", v18);

          -[HMDHomeManager _postIncomingInvitationStateChangedNotification:newInvitationState:](v13, "_postIncomingInvitationStateChangedNotification:newInvitationState:", v7, objc_msgSend(v7, "invitationState"));
          v19 = (void *)MEMORY[0x227676638](-[HMDHomeManager _removeIncomingInvitation:](v13, "_removeIncomingInvitation:", v7));
          v20 = v13;
          HMFGetOSLogHandle();
          v21 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
          {
            HMFGetLogIdentifier();
            v22 = (void *)objc_claimAutoreleasedReturnValue();
            -[HMDHomeManager incomingInvitations](v20, "incomingInvitations");
            v23 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 138543618;
            v32 = v22;
            v33 = 2112;
            v34 = v23;
            _os_log_impl(&dword_2218F0000, v21, OS_LOG_TYPE_INFO, "%{public}@Incoming invitations after pruning: %@", buf, 0x16u);

          }
          objc_autoreleasePoolPop(v19);

        }
      }
      v5 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v27, v35, 16);
    }
    while (v5);
  }

}

- (void)_handleRequestToUpdateHomeInvitationFromInviter:(id)a3
{
  id v4;
  void *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  NSObject *v12;
  void *v13;
  void *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  int v19;
  void *v20;
  __int16 v21;
  void *v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  v4 = a3;
  objc_msgSend(v4, "uuidForKey:", CFSTR("kInvitationIdentifierKey"));
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "numberForKey:", CFSTR("kInvitationStateKey"));
  v6 = objc_claimAutoreleasedReturnValue();
  v7 = (void *)v6;
  if (!v5 || !v6)
  {
    objc_msgSend(MEMORY[0x24BDD1540], "errorWithDomain:code:userInfo:", *MEMORY[0x24BDD5BD8], 3, 0);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "respondWithError:", v9);
    goto LABEL_12;
  }
  -[HMDHomeManager incomingInvitations](self, "incomingInvitations");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "hmf_firstObjectWithValue:forKeyPath:", v5, CFSTR("identifier"));
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v9)
  {
    v11 = (void *)MEMORY[0x227676638]();
    HMFGetOSLogHandle();
    v12 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v5, "UUIDString");
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      v19 = 138543618;
      v20 = v13;
      v21 = 2112;
      v22 = v14;
      _os_log_impl(&dword_2218F0000, v12, OS_LOG_TYPE_INFO, "%{public}@Invalid invite identifier specified %@", (uint8_t *)&v19, 0x16u);

    }
    objc_autoreleasePoolPop(v11);
    v15 = (void *)MEMORY[0x24BDD1540];
    v16 = *MEMORY[0x24BDD5BD8];
    v17 = 2;
    goto LABEL_11;
  }
  if (objc_msgSend(v7, "integerValue") != 1)
  {
    v15 = (void *)MEMORY[0x24BDD1540];
    v16 = *MEMORY[0x24BDD5BD8];
    v17 = 43;
LABEL_11:
    objc_msgSend(v15, "errorWithDomain:code:userInfo:", v16, v17, 0);
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "respondWithError:", v18);

    goto LABEL_12;
  }
  objc_msgSend(v4, "name");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHomeManager _handleRequestToCancelHomeInvitation:saveReason:](self, "_handleRequestToCancelHomeInvitation:saveReason:", v9, v10);

LABEL_12:
}

- (void)_handleRequestToCancelHomeInvitation:(id)a3 saveReason:(id)a4
{
  id v6;
  id v7;
  void *v8;
  void *v9;
  void *v10;
  HMDHomeManager *v11;
  NSObject *v12;
  void *v13;
  void *v14;
  void *v15;
  int v16;
  void *v17;
  __int16 v18;
  void *v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  v6 = a3;
  v7 = a4;
  objc_msgSend(v6, "identifier");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "UUIDString");
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  v10 = (void *)MEMORY[0x227676638]();
  v11 = self;
  HMFGetOSLogHandle();
  v12 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "describeWithFormat");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    v16 = 138543618;
    v17 = v13;
    v18 = 2112;
    v19 = v14;
    _os_log_impl(&dword_2218F0000, v12, OS_LOG_TYPE_INFO, "%{public}@Updating invitation %@ to canceled due to request from inviter", (uint8_t *)&v16, 0x16u);

  }
  objc_autoreleasePoolPop(v10);
  +[HMDBulletinBoard sharedBulletinBoard](HMDBulletinBoard, "sharedBulletinBoard");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v15, "removeBulletinWithRecordID:", v9);

  -[HMDHomeManager _postIncomingInvitationStateChangedNotification:newInvitationState:](v11, "_postIncomingInvitationStateChangedNotification:newInvitationState:", v6, 1);
  -[HMDHomeManager _removeIncomingInvitation:](v11, "_removeIncomingInvitation:", v6);

}

- (void)_handleRequestToUpdateHomeInvitationFromLocalUser:(id)a3
{
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  void (**v10)(_QWORD, _QWORD, _QWORD);
  id v11;

  v11 = a3;
  objc_msgSend(v11, "uuidForKey:", CFSTR("kInvitationIdentifierKey"));
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "numberForKey:", CFSTR("kInvitationStateKey"));
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "uuidForKey:", CFSTR("kHomeUUID"));
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x24BDD7A90], "authWithMessage:", v11);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  if (v4 && v5 && v6)
  {
    v8 = objc_msgSend(v5, "integerValue");
    objc_msgSend(v11, "name");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHomeManager _processRequestToUpdateHomeInvitation:invitationState:homeUUID:authStatus:messageName:message:](self, "_processRequestToUpdateHomeInvitation:invitationState:homeUUID:authStatus:messageName:message:", v4, v8, v6, v7, v9, v11);
  }
  else
  {
    objc_msgSend(MEMORY[0x24BDD1540], "errorWithDomain:code:userInfo:", *MEMORY[0x24BDD5BD8], 3, 0);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "responseHandler");
    v10 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
    ((void (**)(_QWORD, void *, _QWORD))v10)[2](v10, v9, 0);

  }
}

- (void)processRequestToUpdateHomeInvitation:(id)a3 invitationState:(int64_t)a4 homeUUID:(id)a5 authStatus:(id)a6 messageName:(id)a7 message:(id)a8
{
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  NSObject *v19;
  id v20;
  id v21;
  id v22;
  id v23;
  id v24;
  _QWORD block[5];
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  int64_t v31;

  v14 = a3;
  v15 = a5;
  v16 = a6;
  v17 = a7;
  v18 = a8;
  -[HMDHomeManager workQueue](self, "workQueue");
  v19 = objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x24BDAC760];
  block[1] = 3221225472;
  block[2] = __111__HMDHomeManager_processRequestToUpdateHomeInvitation_invitationState_homeUUID_authStatus_messageName_message___block_invoke;
  block[3] = &unk_24E796B20;
  block[4] = self;
  v26 = v14;
  v30 = v18;
  v31 = a4;
  v27 = v15;
  v28 = v16;
  v29 = v17;
  v20 = v18;
  v21 = v17;
  v22 = v16;
  v23 = v15;
  v24 = v14;
  dispatch_async(v19, block);

}

- (void)_processRequestToUpdateHomeInvitation:(id)a3 invitationState:(int64_t)a4 homeUUID:(id)a5 authStatus:(id)a6 messageName:(id)a7 message:(id)a8
{
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  int v24;
  void *v25;
  HMDHomeManager *v26;
  NSObject *v27;
  void *v28;
  void *v29;
  char v30;
  HMDCoreDataCloudShareInvitation *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  id v36;
  void *v37;
  void *v38;
  NSObject *v39;
  id v40;
  void *v41;
  void *v42;
  void *v43;
  char v44;
  void *v45;
  HMDHomeManager *v46;
  NSObject *v47;
  void *v48;
  void *v49;
  void *v50;
  void *v51;
  void *v52;
  void *v53;
  void *v54;
  void *v55;
  void *v56;
  uint64_t v57;
  void *v58;
  void *v59;
  void *v60;
  HMDHomeManager *v61;
  NSObject *v62;
  void *v63;
  void *v64;
  void *v65;
  void *v66;
  id v67;
  id v68;
  HMDCoreDataCloudShareInvitation *v69;
  id v70;
  void *v71;
  void *v72;
  id v73;
  id v74;
  void *v75;
  id v76;
  void *v77;
  _QWORD v78[5];
  id v79;
  id v80;
  _QWORD v81[5];
  id v82;
  id v83;
  id v84;
  uint64_t v85;
  _QWORD v86[5];
  _QWORD v87[5];
  uint8_t buf[4];
  void *v89;
  __int16 v90;
  void *v91;
  __int16 v92;
  void *v93;
  __int16 v94;
  void *v95;
  uint64_t v96;

  v96 = *MEMORY[0x24BDAC8D0];
  v14 = a3;
  v15 = a5;
  v16 = a6;
  v17 = a7;
  v18 = a8;
  -[HMDHomeManager incomingInvitations](self, "incomingInvitations");
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v19, "hmf_firstObjectWithValue:forKeyPath:", v14, CFSTR("identifier"));
  v20 = (void *)objc_claimAutoreleasedReturnValue();

  if (v20)
  {
    +[HMDHomeInviteLogEvent updateWithInvitationState:isFMFDevice:](HMDHomeInviteLogEvent, "updateWithInvitationState:isFMFDevice:", a4, isThisDeviceDesignatedFMFDevice());
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    if (v21)
    {
      -[HMDHomeManager logEventSubmitter](self, "logEventSubmitter");
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v22, "submitLogEvent:", v21);

    }
    if ((unint64_t)a4 <= 7 && ((1 << a4) & 0xD8) != 0)
    {
      objc_msgSend(v20, "identifier");
      v23 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v23, "UUIDString");
      v77 = (void *)objc_claimAutoreleasedReturnValue();

      v24 = objc_msgSend(v20, "isExpired");
      if (a4 == 7 || v24)
      {
        v74 = v17;
        v76 = v16;
        v70 = v15;
        v72 = v18;
        objc_msgSend(v18, "numberForKey:", CFSTR("kInvitationResponseOptionsKey"));
        v43 = (void *)objc_claimAutoreleasedReturnValue();
        v44 = objc_msgSend(v43, "integerValue");

        v45 = (void *)MEMORY[0x227676638]();
        v46 = self;
        HMFGetOSLogHandle();
        v47 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v47, OS_LOG_TYPE_INFO))
        {
          v66 = v45;
          HMFGetLogIdentifier();
          v48 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v20, "isExpired");
          HMFBooleanToString();
          v68 = v14;
          v49 = (void *)objc_claimAutoreleasedReturnValue();
          HMFBooleanToString();
          v50 = (void *)objc_claimAutoreleasedReturnValue();
          HMFBooleanToString();
          v51 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138544130;
          v89 = v48;
          v90 = 2112;
          v91 = v49;
          v92 = 2112;
          v93 = v50;
          v94 = 2112;
          v95 = v51;
          _os_log_impl(&dword_2218F0000, v47, OS_LOG_TYPE_INFO, "%{public}@Invitation has expired (%@) or was ignored (%@) / reported as spam (%@), removing and notifying clients.", buf, 0x2Au);

          v45 = v66;
          v14 = v68;

        }
        objc_autoreleasePoolPop(v45);
        if ((v44 & 1) != 0)
          -[HMDHomeManager _submitSpamReportToIDS:](v46, "_submitSpamReportToIDS:", v20);
        v86[0] = CFSTR("kBulletinRecordIDKey");
        v86[1] = CFSTR("kInvitationIdentifierKey");
        v87[0] = v77;
        v87[1] = v77;
        v86[2] = CFSTR("kInvitationStateKey");
        objc_msgSend(MEMORY[0x24BDD16E0], "numberWithInteger:", objc_msgSend(v20, "invitationState"));
        v52 = (void *)objc_claimAutoreleasedReturnValue();
        v87[2] = v52;
        v86[3] = CFSTR("kHomeName");
        objc_msgSend(v20, "homeName");
        v53 = (void *)objc_claimAutoreleasedReturnValue();
        v87[3] = v53;
        v86[4] = CFSTR("kHomeUUID");
        objc_msgSend(v20, "homeUUID");
        v54 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v54, "UUIDString");
        v55 = (void *)objc_claimAutoreleasedReturnValue();
        v87[4] = v55;
        objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v87, v86, 5);
        v56 = (void *)objc_claimAutoreleasedReturnValue();
        -[HMDHomeManager dismissBulletinOnAllMyTransientDevicesWithContext:](v46, "dismissBulletinOnAllMyTransientDevicesWithContext:", v56);

        if (objc_msgSend(v20, "isExpired"))
          v57 = 6;
        else
          v57 = 7;
        -[HMDHomeManager _postIncomingInvitationStateChangedNotification:newInvitationState:](v46, "_postIncomingInvitationStateChangedNotification:newInvitationState:", v20, v57);
        -[HMDHomeManager _removeIncomingInvitation:](v46, "_removeIncomingInvitation:", v20);
        if (a4 == 3)
        {
          objc_msgSend(MEMORY[0x24BDD1540], "errorWithDomain:code:userInfo:", *MEMORY[0x24BDD5BD8], 23, 0);
          v58 = (void *)objc_claimAutoreleasedReturnValue();
        }
        else
        {
          v58 = 0;
        }
        v15 = v70;
        v18 = v72;
        v17 = v74;
        v16 = v76;
        objc_msgSend(v72, "respondWithPayload:error:", 0, v58);

      }
      else if (a4 == 3)
      {
        v71 = v18;
        v75 = v16;
        v25 = (void *)MEMORY[0x227676638]();
        v26 = self;
        HMFGetOSLogHandle();
        v27 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v27, OS_LOG_TYPE_INFO))
        {
          HMFGetLogIdentifier();
          v28 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543362;
          v89 = v28;
          _os_log_impl(&dword_2218F0000, v27, OS_LOG_TYPE_INFO, "%{public}@Creating HH2 controller key before accepting owner's cloud share", buf, 0xCu);

        }
        v73 = v17;

        objc_autoreleasePoolPop(v25);
        objc_msgSend(MEMORY[0x24BE1BC08], "systemStore");
        v29 = (void *)objc_claimAutoreleasedReturnValue();
        v30 = objc_msgSend(v29, "getOrCreateHH2ControllerKey:secretKey:keyPair:username:", 0, 0, 0, 0);

        if ((v30 & 1) != 0)
        {
          v31 = [HMDCoreDataCloudShareInvitation alloc];
          objc_msgSend(v20, "shareURL");
          v32 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v20, "shareToken");
          v33 = (void *)objc_claimAutoreleasedReturnValue();
          v69 = -[HMDCoreDataCloudShareInvitation initWithURL:token:](v31, "initWithURL:token:", v32, v33);

          -[HMDHomeManager homeSharedUserCloudShareManager](v26, "homeSharedUserCloudShareManager");
          v65 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v65, "acceptShareInvitation:", v69);
          v34 = (void *)objc_claimAutoreleasedReturnValue();
          -[HMDHomeManager workContext](v26, "workContext");
          v67 = v14;
          v35 = (void *)objc_claimAutoreleasedReturnValue();
          v81[0] = MEMORY[0x24BDAC760];
          v81[1] = 3221225472;
          v81[2] = __112__HMDHomeManager__processRequestToUpdateHomeInvitation_invitationState_homeUUID_authStatus_messageName_message___block_invoke;
          v81[3] = &unk_24E796B48;
          v81[4] = v26;
          v82 = v20;
          v85 = 3;
          v16 = v75;
          v83 = v75;
          v84 = v71;
          v78[0] = MEMORY[0x24BDAC760];
          v78[1] = 3221225472;
          v78[2] = __112__HMDHomeManager__processRequestToUpdateHomeInvitation_invitationState_homeUUID_authStatus_messageName_message___block_invoke_978;
          v78[3] = &unk_24E796B70;
          v78[4] = v26;
          v79 = v82;
          v18 = v71;
          v80 = v84;
          v36 = (id)objc_msgSend(v34, "inContext:then:orRecover:", v35, v81, v78);

          v14 = v67;
          v17 = v73;
        }
        else
        {
          v60 = (void *)MEMORY[0x227676638]();
          v61 = v26;
          HMFGetOSLogHandle();
          v62 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v62, OS_LOG_TYPE_ERROR))
          {
            HMFGetLogIdentifier();
            v63 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 138543362;
            v89 = v63;
            _os_log_impl(&dword_2218F0000, v62, OS_LOG_TYPE_ERROR, "%{public}@Failed to create HH2 controller key before accepting invitation", buf, 0xCu);

          }
          objc_autoreleasePoolPop(v60);
          objc_msgSend(MEMORY[0x24BDD1540], "hmErrorWithCode:", 10);
          v64 = (void *)objc_claimAutoreleasedReturnValue();
          v18 = v71;
          objc_msgSend(v71, "respondWithError:", v64);

          v17 = v73;
          v16 = v75;
        }
      }
      else
      {
        -[HMDHomeManager _processLocalRequestToUpdateHomeInvitation:newState:authStatus:](self, "_processLocalRequestToUpdateHomeInvitation:newState:authStatus:", v20, a4, v16);
        objc_msgSend(v18, "respondWithPayload:", 0);
      }

    }
    else
    {
      objc_msgSend(MEMORY[0x24BDD1540], "hmErrorWithCode:", 43);
      v59 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v18, "respondWithError:", v59);

    }
  }
  else
  {
    v37 = v18;
    v38 = (void *)MEMORY[0x227676638]();
    HMFGetOSLogHandle();
    v39 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v39, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v40 = v17;
      v41 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v14, "UUIDString");
      v42 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v89 = v41;
      v90 = 2112;
      v91 = v42;
      _os_log_impl(&dword_2218F0000, v39, OS_LOG_TYPE_INFO, "%{public}@Invalid invite identifier specified %@", buf, 0x16u);

      v17 = v40;
    }

    objc_autoreleasePoolPop(v38);
    objc_msgSend(MEMORY[0x24BDD1540], "errorWithDomain:code:userInfo:", *MEMORY[0x24BDD5BD8], 2, 0);
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    v18 = v37;
    objc_msgSend(v37, "respondWithError:", v21);
  }

}

- (BOOL)addHH2KeyInResponsePayload:(id)a3 invitation:(id)a4
{
  id v6;
  id v7;
  void *v8;
  HMDHomeManager *v9;
  id v10;
  id v11;
  void *v12;
  HMDHomeManager *v13;
  NSObject *v14;
  void *v15;
  void *v16;
  void *v17;
  HMDHomeManager *v18;
  NSObject *v19;
  void *v20;
  void *v21;
  void *v22;
  char v23;
  void *v24;
  void *v25;
  void *v26;
  HMDHomeManager *v27;
  NSObject *v28;
  void *v29;
  id v30;
  void *v31;
  void *v32;
  HMDHomeManager *v33;
  NSObject *v34;
  id v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  uint64_t v41;
  id v42;
  id v43;
  void *v44;
  HMDHomeManager *v45;
  NSObject *v46;
  void *v47;
  void *v48;
  NSObject *v49;
  void *v50;
  void *v51;
  void *v52;
  void *v53;
  HMDHomeManager *v54;
  NSObject *v55;
  void *v56;
  void *v57;
  void *v58;
  id v60;
  id v61;
  id v62;
  _QWORD v63[4];
  id v64;
  id v65;
  id v66;
  uint8_t buf[4];
  void *v68;
  __int16 v69;
  id v70;
  __int16 v71;
  id v72;
  uint64_t v73;

  v73 = *MEMORY[0x24BDAC8D0];
  v6 = a3;
  v7 = a4;
  objc_msgSend(MEMORY[0x24BE1BC08], "systemStore");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v65 = 0;
  v66 = 0;
  LODWORD(v9) = objc_msgSend(v8, "getOrCreateHH2ControllerKey:secretKey:keyPair:username:", &v66, 0, 0, &v65);
  v10 = v66;
  v11 = v65;

  if ((_DWORD)v9)
  {
    v12 = (void *)MEMORY[0x227676638]();
    v13 = self;
    HMFGetOSLogHandle();
    v14 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v7, "inviterIdentity");
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v68 = v15;
      v69 = 2114;
      v70 = v16;
      _os_log_impl(&dword_2218F0000, v14, OS_LOG_TYPE_INFO, "%{public}@Owner's pairing identity: %{public}@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v12);
    v17 = (void *)MEMORY[0x227676638]();
    v18 = v13;
    HMFGetOSLogHandle();
    v19 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543874;
      v68 = v20;
      v69 = 2114;
      v70 = v10;
      v71 = 2114;
      v72 = v11;
      _os_log_impl(&dword_2218F0000, v19, OS_LOG_TYPE_INFO, "%{public}@Shared user's HH2 controller key [%{public}@] [%{public}@] before sending invite accept", buf, 0x20u);

    }
    objc_autoreleasePoolPop(v17);
    objc_msgSend(v7, "inviterIdentity");
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v21, "identifier");
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    v23 = HMFEqualObjects();

    if ((v23 & 1) != 0)
    {
      objc_msgSend(MEMORY[0x24BE1BC08], "systemStore");
      v24 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v24, "allHH2PairingKeys");
      v25 = (void *)objc_claimAutoreleasedReturnValue();

      v26 = (void *)MEMORY[0x227676638]();
      v27 = v18;
      HMFGetOSLogHandle();
      v28 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v28, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v29 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543874;
        v68 = v29;
        v69 = 2114;
        v70 = v11;
        v71 = 2114;
        v72 = v25;
        _os_log_impl(&dword_2218F0000, v28, OS_LOG_TYPE_INFO, "%{public}@Looks like Owner and shared user has the same pairing identity : %{public}@, HH2 key list: %{public}@", buf, 0x20u);

      }
      objc_autoreleasePoolPop(v26);
      v63[0] = MEMORY[0x24BDAC760];
      v63[1] = 3221225472;
      v63[2] = __56__HMDHomeManager_addHH2KeyInResponsePayload_invitation___block_invoke;
      v63[3] = &unk_24E796B98;
      v30 = v7;
      v64 = v30;
      objc_msgSend(v25, "na_filter:", v63);
      v31 = (void *)objc_claimAutoreleasedReturnValue();

      v32 = (void *)MEMORY[0x227676638]();
      v33 = v27;
      HMFGetOSLogHandle();
      v34 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v34, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v60 = v7;
        v35 = v6;
        v36 = v31;
        v37 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v30, "inviterIdentity");
        v38 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v38, "identifier");
        v39 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543874;
        v68 = v37;
        v69 = 2114;
        v70 = v39;
        v71 = 2114;
        v72 = v36;
        _os_log_impl(&dword_2218F0000, v34, OS_LOG_TYPE_INFO, "%{public}@All HH2 keys after removing %{public}@ / %{public}@", buf, 0x20u);

        v31 = v36;
        v6 = v35;
        v7 = v60;
      }

      objc_autoreleasePoolPop(v32);
      if ((objc_msgSend(v31, "hmf_isEmpty") & 1) != 0)
      {
        objc_msgSend(MEMORY[0x24BE1BC08], "systemStore");
        v40 = (void *)objc_claimAutoreleasedReturnValue();
        v61 = v11;
        v62 = v10;
        v41 = objc_msgSend(v40, "createHH2ControllerKey:secretKey:keyPair:username:", &v62, 0, 0, &v61);
        v42 = v62;

        v43 = v61;
        if ((_DWORD)v41)
        {
          v44 = (void *)MEMORY[0x227676638]();
          v45 = v33;
          HMFGetOSLogHandle();
          v46 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v46, OS_LOG_TYPE_FAULT))
          {
            HMFGetLogIdentifier();
            v47 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 138543362;
            v68 = v47;
            _os_log_impl(&dword_2218F0000, v46, OS_LOG_TYPE_FAULT, "%{public}@This makes me sad. :( I need a break. Unable to create a brand new HH2 pairing key.", buf, 0xCu);

          }
          objc_autoreleasePoolPop(v44);
          v48 = (void *)MEMORY[0x227676638]();
          v9 = v45;
          HMFGetOSLogHandle();
          v49 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v49, OS_LOG_TYPE_ERROR))
          {
            HMFGetLogIdentifier();
            v50 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(MEMORY[0x24BDD16E0], "numberWithInt:", v41);
            v51 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 138543618;
            v68 = v50;
            v69 = 2112;
            v70 = v51;
            _os_log_impl(&dword_2218F0000, v49, OS_LOG_TYPE_ERROR, "%{public}@This makes me sad. :( I need a break. Unable to create a brand new HH2 pairing key. %@", buf, 0x16u);

          }
          objc_autoreleasePoolPop(v48);
          LOBYTE(v9) = 0;
        }
        else
        {
          objc_msgSend(v6, "setObject:forKeyedSubscript:", v42, CFSTR("kControllerPublicKey"));
          objc_msgSend(v6, "setObject:forKeyedSubscript:", v43, CFSTR("kControllerPairingNameKey"));
          LOBYTE(v9) = 1;
        }
        v11 = v43;
        v10 = v42;
      }
      else
      {
        objc_msgSend(v31, "firstObject");
        v52 = (void *)objc_claimAutoreleasedReturnValue();
        v53 = (void *)MEMORY[0x227676638]();
        v54 = v33;
        HMFGetOSLogHandle();
        v55 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v55, OS_LOG_TYPE_INFO))
        {
          HMFGetLogIdentifier();
          v56 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543618;
          v68 = v56;
          v69 = 2114;
          v70 = v52;
          _os_log_impl(&dword_2218F0000, v55, OS_LOG_TYPE_INFO, "%{public}@Key chosen by the shared user: %{public}@", buf, 0x16u);

        }
        objc_autoreleasePoolPop(v53);
        objc_msgSend(v52, "publicKey");
        v57 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v57, "data");
        v9 = (HMDHomeManager *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v6, "setObject:forKeyedSubscript:", v9, CFSTR("kControllerPublicKey"));

        objc_msgSend(v52, "identifier");
        v58 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v6, "setObject:forKeyedSubscript:", v58, CFSTR("kControllerPairingNameKey"));

        LOBYTE(v9) = 1;
      }

    }
    else
    {
      objc_msgSend(v6, "setObject:forKeyedSubscript:", v10, CFSTR("kControllerPublicKey"));
      objc_msgSend(v6, "setObject:forKeyedSubscript:", v11, CFSTR("kControllerPairingNameKey"));
      LOBYTE(v9) = 1;
    }
  }

  return (char)v9;
}

- (void)_processLocalRequestToUpdateHomeInvitation:(id)a3 newState:(int64_t)a4 authStatus:(id)a5
{
  id v8;
  void *v9;
  void *v10;
  void *v11;
  HMDHomeManager *v12;
  NSObject *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  uint64_t v31;
  id v32;
  void *v33;
  id v34;
  id v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  HMDHomeManager *v41;
  NSObject *v42;
  void *v43;
  void *v44;
  void *v45;
  void *v46;
  void *v47;
  void *v48;
  void *v49;
  void *v50;
  void *v51;
  void *v52;
  HMDUser *v53;
  id v54;
  _QWORD v55[5];
  id v56;
  _QWORD v57[5];
  id v58;
  id v59;
  id v60[2];
  _QWORD v61[5];
  _QWORD v62[5];
  uint8_t buf[4];
  void *v64;
  __int16 v65;
  void *v66;
  __int16 v67;
  void *v68;
  uint64_t v69;

  v69 = *MEMORY[0x24BDAC8D0];
  v8 = a3;
  v54 = a5;
  objc_msgSend(v8, "identifier");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "UUIDString");
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  v11 = (void *)MEMORY[0x227676638]();
  v12 = self;
  HMFGetOSLogHandle();
  v13 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "identifier");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v15, "UUIDString");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD76D0], "homeInvitationStateDescription:", a4);
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543874;
    v64 = v14;
    v65 = 2112;
    v66 = v16;
    v67 = 2112;
    v68 = v17;
    _os_log_impl(&dword_2218F0000, v13, OS_LOG_TYPE_INFO, "%{public}@[HomeManager] Processing request to update invitation %@ to state %@", buf, 0x20u);

  }
  objc_autoreleasePoolPop(v11);
  +[HMDBulletinBoard sharedBulletinBoard](HMDBulletinBoard, "sharedBulletinBoard");
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v18, "removeBulletinWithRecordID:", v10);

  v61[0] = CFSTR("kBulletinRecordIDKey");
  v61[1] = CFSTR("kInvitationIdentifierKey");
  v62[0] = v10;
  v62[1] = v10;
  v61[2] = CFSTR("kInvitationStateKey");
  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithInteger:", a4);
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  v62[2] = v19;
  v61[3] = CFSTR("kHomeName");
  objc_msgSend(v8, "homeName");
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  v62[3] = v20;
  v61[4] = CFSTR("kHomeUUID");
  objc_msgSend(v8, "homeUUID");
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v21, "UUIDString");
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  v62[4] = v22;
  objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v62, v61, 5);
  v23 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHomeManager dismissBulletinOnAllMyTransientDevicesWithContext:](v12, "dismissBulletinOnAllMyTransientDevicesWithContext:", v23);

  objc_msgSend(v8, "resolutionHandler");
  v24 = (void *)objc_claimAutoreleasedReturnValue();

  if (v24)
  {
    if (a4 == 3)
      objc_msgSend(v8, "accept");
    else
      objc_msgSend(v8, "decline");
  }
  else
  {
    if (a4 == 3)
    {
      objc_msgSend(v8, "inviterUserID");
      v25 = (void *)objc_claimAutoreleasedReturnValue();
      +[HMDAccountHandle accountHandleForDestination:](HMDAccountHandle, "accountHandleForDestination:", v25);
      v52 = (void *)objc_claimAutoreleasedReturnValue();

      v53 = -[HMDUser initWithAccountHandle:home:pairingIdentity:privilege:]([HMDUser alloc], "initWithAccountHandle:home:pairingIdentity:privilege:", v52, 0, 0, 3);
      -[HMDHomeManager idsFirewallManager](v12, "idsFirewallManager");
      v26 = (void *)objc_claimAutoreleasedReturnValue();
      -[HMDUser userID](v53, "userID");
      v27 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v26, "handleDidAddUserWithUserID:", v27);

      objc_initWeak((id *)buf, v12);
      -[HMDHomeManager homeSharedUserCloudShareManager](v12, "homeSharedUserCloudShareManager");
      v28 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v8, "homeUUID");
      v29 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v28, "grantAccessForOwner:sharedUserDataWithHomeModelID:", v53, v29);
      v30 = (void *)objc_claimAutoreleasedReturnValue();
      v31 = MEMORY[0x24BDAC760];
      v57[0] = MEMORY[0x24BDAC760];
      v57[1] = 3221225472;
      v57[2] = __81__HMDHomeManager__processLocalRequestToUpdateHomeInvitation_newState_authStatus___block_invoke;
      v57[3] = &unk_24E796C10;
      v57[4] = v12;
      v32 = v8;
      v58 = v32;
      objc_copyWeak(v60, (id *)buf);
      v60[1] = (id)3;
      v59 = v54;
      objc_msgSend(v30, "then:", v57);
      v33 = (void *)objc_claimAutoreleasedReturnValue();
      v55[0] = v31;
      v55[1] = 3221225472;
      v55[2] = __81__HMDHomeManager__processLocalRequestToUpdateHomeInvitation_newState_authStatus___block_invoke_3;
      v55[3] = &unk_24E79B210;
      v55[4] = v12;
      v34 = v32;
      v56 = v34;
      v35 = (id)objc_msgSend(v33, "recover:", v55);

      objc_destroyWeak(v60);
      objc_destroyWeak((id *)buf);

      -[HMDHomeManager _postIncomingInvitationStateChangedNotification:newInvitationState:](v12, "_postIncomingInvitationStateChangedNotification:newInvitationState:", v34, 5);
      -[HMDHomeManager uuidsOfRemovedHomes](v12, "uuidsOfRemovedHomes");
      v36 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v34, "homeUUID");
      v37 = (void *)objc_claimAutoreleasedReturnValue();
      LODWORD(v30) = objc_msgSend(v36, "containsObject:", v37);

      if ((_DWORD)v30)
      {
        -[HMDHomeManager uuidsOfRemovedHomes](v12, "uuidsOfRemovedHomes");
        v38 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v34, "homeUUID");
        v39 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v38, "removeObject:", v39);

        v40 = (void *)MEMORY[0x227676638]();
        v41 = v12;
        HMFGetOSLogHandle();
        v42 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v42, OS_LOG_TYPE_INFO))
        {
          HMFGetLogIdentifier();
          v43 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v34, "homeUUID");
          v44 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v44, "UUIDString");
          v45 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543618;
          v64 = v43;
          v65 = 2112;
          v66 = v45;
          _os_log_impl(&dword_2218F0000, v42, OS_LOG_TYPE_INFO, "%{public}@Removing home with UUID %@ from uuids of guest homes removed locally since invite was accepted", buf, 0x16u);

        }
        objc_autoreleasePoolPop(v40);
      }
      objc_msgSend(v34, "homeUUID", v52);
      v46 = (void *)objc_claimAutoreleasedReturnValue();
      -[HMDHomeManager _homeWithUUID:](v12, "_homeWithUUID:", v46);
      v47 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v47, "owner");
      v48 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v48, "account");
      v49 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v49, "senderCorrelationIdentifier");
      v50 = (void *)objc_claimAutoreleasedReturnValue();

      -[HMDHomeManager _stopTrackingRemovedHomeUserMergeId:](v12, "_stopTrackingRemovedHomeUserMergeId:", v50);
    }
    else
    {
      objc_msgSend(v8, "homeUUID");
      v51 = (void *)objc_claimAutoreleasedReturnValue();
      -[HMDHomeManager __sendUpdateRequestToAdminForInvitation:homeUUID:invitationState:authStatus:reverseShareInvitation:](v12, "__sendUpdateRequestToAdminForInvitation:homeUUID:invitationState:authStatus:reverseShareInvitation:", v8, v51, a4, v54, 0);

      -[HMDHomeManager _removeIncomingInvitation:](v12, "_removeIncomingInvitation:", v8);
      -[HMDHomeManager _postIncomingInvitationStateChangedNotification:newInvitationState:](v12, "_postIncomingInvitationStateChangedNotification:newInvitationState:", v8, a4);
    }
    -[HMDHomeManager _updateIncomingInvitesPresent](v12, "_updateIncomingInvitesPresent");
  }

}

- (BOOL)_submitSpamReportToIDS:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  double v24;
  void *v25;
  void *v26;
  HMDHomeManager *v27;
  NSObject *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  char v33;
  void *v34;
  HMDHomeManager *v35;
  NSObject *v36;
  void *v37;
  void *v38;
  HMDHomeManager *v39;
  NSObject *v40;
  void *v41;
  void *v42;
  int v44;
  void *v45;
  __int16 v46;
  void *v47;
  __int16 v48;
  void *v49;
  uint64_t v50;

  v50 = *MEMORY[0x24BDAC8D0];
  v4 = a3;
  objc_msgSend(MEMORY[0x24BDBCED8], "dictionary");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  +[HMDAppleAccountManager sharedManager](HMDAppleAccountManager, "sharedManager");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "account");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "handles");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "firstObject");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "remoteDestinationString");
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v4, "inviterUserID");
  v11 = objc_claimAutoreleasedReturnValue();
  if (!v11)
    goto LABEL_15;
  v12 = (void *)v11;
  objc_msgSend(v4, "homeName");
  v13 = objc_claimAutoreleasedReturnValue();
  if (!v13)
    goto LABEL_14;
  v14 = (void *)v13;
  objc_msgSend(v4, "identifier");
  v15 = objc_claimAutoreleasedReturnValue();
  if (!v15)
  {

LABEL_14:
    goto LABEL_15;
  }
  v16 = (void *)v15;
  objc_msgSend(v4, "startDate");
  v17 = (void *)objc_claimAutoreleasedReturnValue();

  if (v17 && v10)
  {
    objc_msgSend(v4, "inviterUserID");
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "setObject:forKeyedSubscript:", v18, *MEMORY[0x24BE4FD18]);

    objc_msgSend(v4, "homeName");
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "setObject:forKeyedSubscript:", v19, CFSTR("home-name"));

    objc_msgSend(v4, "identifier");
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v20, "UUIDString");
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "setObject:forKeyedSubscript:", v21, *MEMORY[0x24BE4FD08]);

    v22 = (void *)MEMORY[0x24BDD16E0];
    objc_msgSend(v4, "startDate");
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v23, "timeIntervalSince1970");
    objc_msgSend(v22, "numberWithInteger:", (uint64_t)v24);
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "setObject:forKeyedSubscript:", v25, *MEMORY[0x24BE4FD28]);

    objc_msgSend(v5, "setObject:forKeyedSubscript:", v10, *MEMORY[0x24BE4FD10]);
    v26 = (void *)MEMORY[0x227676638](objc_msgSend(v5, "setObject:forKeyedSubscript:", CFSTR("HomeKitInviteSpam"), *MEMORY[0x24BE4FD20]));
    v27 = self;
    HMFGetOSLogHandle();
    v28 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v28, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v29 = (void *)objc_claimAutoreleasedReturnValue();
      v44 = 138543618;
      v45 = v29;
      v46 = 2112;
      v47 = v5;
      _os_log_impl(&dword_2218F0000, v28, OS_LOG_TYPE_INFO, "%{public}@Reporting invitation as spam: %@", (uint8_t *)&v44, 0x16u);

    }
    objc_autoreleasePoolPop(v26);
    +[HMDIDSServiceManager sharedManager](HMDIDSServiceManager, "sharedManager");
    v30 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v30, "service");
    v31 = (void *)objc_claimAutoreleasedReturnValue();

    v32 = (void *)objc_msgSend(v5, "copy");
    v33 = objc_msgSend(v31, "reportSpamMessage:", v32);

    if ((v33 & 1) == 0)
    {
      v34 = (void *)MEMORY[0x227676638]();
      v35 = v27;
      HMFGetOSLogHandle();
      v36 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v36, OS_LOG_TYPE_FAULT))
      {
        HMFGetLogIdentifier();
        v37 = (void *)objc_claimAutoreleasedReturnValue();
        v44 = 138543362;
        v45 = v37;
        _os_log_impl(&dword_2218F0000, v36, OS_LOG_TYPE_FAULT, "%{public}@Spam report was rejected for some reason. Please file a bug.", (uint8_t *)&v44, 0xCu);

      }
      objc_autoreleasePoolPop(v34);
    }

    goto LABEL_18;
  }
LABEL_15:
  v38 = (void *)MEMORY[0x227676638]();
  v39 = self;
  HMFGetOSLogHandle();
  v40 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v40, OS_LOG_TYPE_ERROR))
  {
    HMFGetLogIdentifier();
    v41 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "identifier");
    v42 = (void *)objc_claimAutoreleasedReturnValue();
    v44 = 138543874;
    v45 = v41;
    v46 = 2112;
    v47 = v42;
    v48 = 2112;
    v49 = v10;
    _os_log_impl(&dword_2218F0000, v40, OS_LOG_TYPE_ERROR, "%{public}@Unexpected nil value for invitation %@, reporter %@", (uint8_t *)&v44, 0x20u);

  }
  objc_autoreleasePoolPop(v38);
  v33 = 0;
LABEL_18:

  return v33;
}

- (void)migrateSharedUserFromIncomingInvitation:(id)a3
{
  id v4;
  void *v5;
  HMDHomeManager *v6;
  NSObject *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  id v13;
  void *v14;
  id v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  HMDHomeManager *v25;
  NSObject *v26;
  void *v27;
  void *v28;
  HMDHomeManager *v29;
  NSObject *v30;
  void *v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(uint64_t, void *, uint64_t, _BYTE *);
  void *v36;
  id v37;
  id v38;
  HMDHomeManager *v39;
  _BYTE *v40;
  uint8_t v41[4];
  void *v42;
  __int16 v43;
  id v44;
  _BYTE buf[24];
  uint64_t (*v46)(uint64_t, uint64_t);
  void (*v47)(uint64_t);
  id v48;
  uint64_t v49;

  v49 = *MEMORY[0x24BDAC8D0];
  v4 = a3;
  if ((objc_msgSend(v4, "isAccepted") & 1) == 0)
    _HMFPreconditionFailure();
  v5 = (void *)MEMORY[0x227676638]();
  v6 = self;
  HMFGetOSLogHandle();
  v7 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543618;
    *(_QWORD *)&buf[4] = v8;
    *(_WORD *)&buf[12] = 2112;
    *(_QWORD *)&buf[14] = v4;
    _os_log_impl(&dword_2218F0000, v7, OS_LOG_TYPE_INFO, "%{public}@Going to do shared user migration from incoming invitation : %@", buf, 0x16u);

  }
  objc_autoreleasePoolPop(v5);
  objc_msgSend(v4, "homeUUID");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHomeManager hh1UserIDsForCurrentUserForHomeUUID:](v6, "hh1UserIDsForCurrentUserForHomeUUID:", v9);
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  *(_QWORD *)buf = 0;
  *(_QWORD *)&buf[8] = buf;
  *(_QWORD *)&buf[16] = 0x3032000000;
  v46 = __Block_byref_object_copy__227383;
  v47 = __Block_byref_object_dispose__227384;
  v48 = 0;
  -[HMDHomeManager defaultDatabase](v6, "defaultDatabase");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v12 = v11;
  if (v11)
  {
    v13 = v11;
  }
  else
  {
    +[HMDDatabase defaultDatabase](HMDDatabase, "defaultDatabase");
    v13 = (id)objc_claimAutoreleasedReturnValue();
  }
  v14 = v13;

  v33 = MEMORY[0x24BDAC760];
  v34 = 3221225472;
  v35 = __58__HMDHomeManager_migrateSharedUserFromIncomingInvitation___block_invoke;
  v36 = &unk_24E796C38;
  v15 = v14;
  v37 = v15;
  v16 = v4;
  v38 = v16;
  v39 = v6;
  v40 = buf;
  v17 = objc_msgSend(v10, "hmf_enumerateWithAutoreleasePoolUsingBlock:", &v33);
  v18 = *(_QWORD *)(*(_QWORD *)&buf[8] + 40);
  if (v18)
  {
    +[HMDUser localSharedZoneForSharedUserUUID:database:](HMDUser, "localSharedZoneForSharedUserUUID:database:", v18, v15, v33, v34, v35, v36, v37);
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    if (v19)
    {
      v20 = *(_QWORD *)(*(_QWORD *)&buf[8] + 40);
      objc_msgSend(v16, "homeUUID");
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      -[HMDHomeManager backingStore](v6, "backingStore");
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v22, "context");
      v23 = (void *)objc_claimAutoreleasedReturnValue();
      +[HMDUser migrateHH1SettingsToHH2ForSharedUserWithUUID:homeUUID:sharedZone:backingStoreContext:](HMDUser, "migrateHH1SettingsToHH2ForSharedUserWithUUID:homeUUID:sharedZone:backingStoreContext:", v20, v21, v19, v23);

    }
    else
    {
      v28 = (void *)MEMORY[0x227676638]();
      v29 = v6;
      HMFGetOSLogHandle();
      v30 = (id)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v30, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v31 = (void *)objc_claimAutoreleasedReturnValue();
        v32 = *(void **)(*(_QWORD *)&buf[8] + 40);
        *(_DWORD *)v41 = 138543618;
        v42 = v31;
        v43 = 2112;
        v44 = v32;
        _os_log_impl(&dword_2218F0000, v30, OS_LOG_TYPE_INFO, "%{public}@could not open shared zone using user UUID : %@", v41, 0x16u);

      }
      objc_autoreleasePoolPop(v28);
    }

  }
  else
  {
    v24 = (void *)MEMORY[0x227676638](v17);
    v25 = v6;
    HMFGetOSLogHandle();
    v26 = (id)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v26, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v27 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)v41 = 138543618;
      v42 = v27;
      v43 = 2112;
      v44 = v16;
      _os_log_impl(&dword_2218F0000, v26, OS_LOG_TYPE_INFO, "%{public}@Unable to migrate shared user settings from incoming invitation: %@", v41, 0x16u);

    }
    objc_autoreleasePoolPop(v24);
  }

  _Block_object_dispose(buf, 8);
}

- (id)hh1UserIDsForCurrentUserForHomeUUID:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  id v8;
  void *v9;
  void *v10;
  id v11;
  id v12;
  id v13;
  void *v14;
  HMDHomeManager *v15;
  NSObject *v16;
  void *v17;
  void *v18;
  _QWORD v20[4];
  id v21;
  id v22;
  id v23;
  uint8_t buf[4];
  void *v25;
  __int16 v26;
  id v27;
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  v4 = a3;
  objc_msgSend(MEMORY[0x24BDBCEB8], "array");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHomeManager hapKeyStore](self, "hapKeyStore");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = v6;
  if (v6)
  {
    v8 = v6;
  }
  else
  {
    objc_msgSend(MEMORY[0x24BE1BC08], "systemStore");
    v8 = (id)objc_claimAutoreleasedReturnValue();
  }
  v9 = v8;

  objc_msgSend(v9, "allAccessoryPairingKeys");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v20[0] = MEMORY[0x24BDAC760];
  v20[1] = 3221225472;
  v20[2] = __54__HMDHomeManager_hh1UserIDsForCurrentUserForHomeUUID___block_invoke;
  v20[3] = &unk_24E796C60;
  v11 = v9;
  v21 = v11;
  v12 = v4;
  v22 = v12;
  v13 = v5;
  v23 = v13;
  objc_msgSend(v10, "hmf_enumerateWithAutoreleasePoolUsingBlock:", v20);

  v14 = (void *)MEMORY[0x227676638]();
  v15 = self;
  HMFGetOSLogHandle();
  v16 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543618;
    v25 = v17;
    v26 = 2112;
    v27 = v13;
    _os_log_impl(&dword_2218F0000, v16, OS_LOG_TYPE_INFO, "%{public}@Possible HH1 User UUIDs: %@", buf, 0x16u);

  }
  objc_autoreleasePoolPop(v14);
  v18 = (void *)objc_msgSend(v13, "copy");

  return v18;
}

- (id)getOrCreateLocalPairingIdentity:(id *)a3
{
  void *v4;
  int v5;
  id v6;
  id v7;
  id v8;
  HMDHomeManagerModel *v9;
  BOOL v10;
  uint64_t v13;
  id v14;
  id v15;
  id v16;
  void *v17;
  HMDHomeManager *v18;
  NSObject *v19;
  void *v20;
  const char *v21;
  void *v22;
  int v23;
  void *v24;
  HMDHomeManager *v25;
  NSObject *v26;
  void *v27;
  void *v28;
  int v29;
  HMDHomeManagerModel *v30;
  void *v31;
  HMDHomeManager *v32;
  NSObject *v33;
  void *v34;
  HMDHomeManagerModel *v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  id *v40;
  void *v41;
  void *v42;
  void *v43;
  HMDHomeManager *v44;
  void *v45;
  void *v46;
  void *v47;
  uint64_t v48;
  void *v49;
  void *v50;
  id v51;
  id v52;
  id v53;
  id v54;
  void *v55;
  id v57;
  id v58;
  void *v59;
  HMDHomeManagerModel *v61;
  id v62;
  id v63;
  id v64;
  id v65;
  id v66;
  id v67;
  id v68;
  uint64_t v69;
  void *v70;
  uint8_t buf[4];
  void *v72;
  __int16 v73;
  id v74;
  uint64_t v75;

  v75 = *MEMORY[0x24BDAC8D0];
  objc_msgSend(MEMORY[0x24BE1BC08], "systemStore");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v67 = 0;
  v68 = 0;
  v65 = 0;
  v66 = 0;
  v5 = objc_msgSend(v4, "getAllAvailableControllerPublicKeys:secretKeys:userNames:error:", &v68, &v67, &v66, &v65);
  v6 = v68;
  v7 = v67;
  v8 = v66;
  v9 = (HMDHomeManagerModel *)v65;

  if (v5)
    v10 = v9 == 0;
  else
    v10 = 0;
  if (v10 && v6 != 0 && v8 != 0)
  {
    if (objc_msgSend(v8, "count"))
    {
      v13 = objc_msgSend(v8, "count");
      if (v13 == objc_msgSend(v6, "count"))
      {
        objc_msgSend(v6, "objectAtIndexedSubscript:", 0);
        v14 = (id)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v7, "objectAtIndexedSubscript:", 0);
        v15 = (id)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v8, "objectAtIndexedSubscript:", 0);
        v16 = (id)objc_claimAutoreleasedReturnValue();
        if ((unint64_t)objc_msgSend(v8, "count") < 2)
        {
          objc_msgSend(MEMORY[0x24BE1BC08], "systemStore");
          v42 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v42, "activeControllerPairingIdentifier");
          v43 = (void *)objc_claimAutoreleasedReturnValue();

          if (v43)
          {
LABEL_34:
            v40 = a3;
LABEL_35:
            if (v14 && v15 && v16)
            {
              v46 = (void *)objc_msgSend(objc_alloc(MEMORY[0x24BE3F230]), "initWithPairingKeyData:", v14);
              v47 = (void *)objc_msgSend(objc_alloc(MEMORY[0x24BE3F230]), "initWithPairingKeyData:", v15);
              v41 = (void *)objc_msgSend(objc_alloc(MEMORY[0x24BE1BBB0]), "initWithIdentifier:publicKey:privateKey:permissions:", v16, v46, v47, 0);

              v30 = 0;
              goto LABEL_43;
            }
            if (v40)
            {
              v59 = (void *)MEMORY[0x24BDD1540];
              v48 = *MEMORY[0x24BDD5BD8];
              v69 = *MEMORY[0x24BDD0FC8];
              objc_msgSend(MEMORY[0x24BDD1488], "mainBundle");
              v49 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v49, "localizedStringForKey:value:table:", CFSTR("Unable to get local pairing identity"), &stru_24E79DB48, 0);
              v50 = (void *)objc_claimAutoreleasedReturnValue();
              v70 = v50;
              objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", &v70, &v69, 1);
              v51 = v15;
              v52 = v14;
              v53 = v6;
              v54 = v7;
              v55 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v59, "errorWithDomain:code:userInfo:", v48, 2, v55);
              *a3 = (id)objc_claimAutoreleasedReturnValue();

              v7 = v54;
              v6 = v53;
              v14 = v52;
              v15 = v51;

            }
            v30 = 0;
LABEL_42:
            v41 = 0;
            goto LABEL_43;
          }
          v57 = v7;
          v17 = (void *)MEMORY[0x227676638]();
          v44 = self;
          HMFGetOSLogHandle();
          v19 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
          {
            HMFGetLogIdentifier();
            v20 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 138543618;
            v72 = v20;
            v73 = 2112;
            v74 = v16;
            v21 = "%{public}@Setting controller key as active as none was found: %@";
            goto LABEL_32;
          }
        }
        else
        {
          v57 = v7;
          v17 = (void *)MEMORY[0x227676638]();
          v18 = self;
          HMFGetOSLogHandle();
          v19 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
          {
            HMFGetLogIdentifier();
            v20 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 138543618;
            v72 = v20;
            v73 = 2112;
            v74 = v16;
            v21 = "%{public}@Found multiple controller keys, using first entry as the controller username: %@";
LABEL_32:
            _os_log_impl(&dword_2218F0000, v19, OS_LOG_TYPE_DEFAULT, v21, buf, 0x16u);

          }
        }

        objc_autoreleasePoolPop(v17);
        objc_msgSend(MEMORY[0x24BE1BC08], "systemStore");
        v45 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v45, "updateActiveControllerPairingIdentifier:", v16);

        v7 = v57;
        goto LABEL_34;
      }
    }
  }
  +[HMDDeviceCapabilities deviceCapabilities](HMDDeviceCapabilities, "deviceCapabilities");
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  v23 = objc_msgSend(v22, "supportsKeychainSync");

  if (!v23)
  {
    objc_msgSend(MEMORY[0x24BDD1540], "errorWithDomain:code:userInfo:", *MEMORY[0x24BDD5BD8], 2, 0);
    v30 = (HMDHomeManagerModel *)objc_claimAutoreleasedReturnValue();
    v16 = 0;
    v15 = 0;
    v14 = 0;
LABEL_24:

    goto LABEL_26;
  }
  v58 = v7;
  v24 = (void *)MEMORY[0x227676638]();
  v25 = self;
  HMFGetOSLogHandle();
  v26 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
  {
    HMFGetLogIdentifier();
    v27 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543362;
    v72 = v27;
    _os_log_impl(&dword_2218F0000, v26, OS_LOG_TYPE_DEFAULT, "%{public}@Local controller key does not exist, creating one", buf, 0xCu);

  }
  objc_autoreleasePoolPop(v24);
  objc_msgSend(MEMORY[0x24BE1BC08], "systemStore");
  v28 = (void *)objc_claimAutoreleasedReturnValue();
  v63 = 0;
  v64 = 0;
  v61 = v9;
  v62 = 0;
  v29 = objc_msgSend(v28, "getControllerPublicKey:secretKey:username:allowCreation:error:", &v64, &v63, &v62, 1, &v61);
  v14 = v64;
  v15 = v63;
  v16 = v62;
  v30 = v61;

  if (v29)
  {
    v31 = (void *)MEMORY[0x227676638]();
    v32 = v25;
    HMFGetOSLogHandle();
    v33 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT))
    {
      HMFGetLogIdentifier();
      v34 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v72 = v34;
      _os_log_impl(&dword_2218F0000, v33, OS_LOG_TYPE_DEFAULT, "%{public}@Created new local controller key, forcing push to HomeManager zone to anchor key...", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v31);
    v35 = [HMDHomeManagerModel alloc];
    -[HMDHomeManager uuid](v32, "uuid");
    v36 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = -[HMDBackingStoreModelObject initWithObjectChangeType:uuid:parentUUID:](v35, "initWithObjectChangeType:uuid:parentUUID:", 1, v36, 0);

    -[HMDHomeManagerModel setControllerKeyIdentifier:](v9, "setControllerKeyIdentifier:", v16);
    -[HMDHomeManager backingStore](v32, "backingStore");
    v37 = (void *)objc_claimAutoreleasedReturnValue();
    +[HMDBackingStoreTransactionOptions defaultXPCOptions](HMDBackingStoreTransactionOptions, "defaultXPCOptions");
    v38 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v37, "transaction:options:", CFSTR("HMD.hm"), v38);
    v39 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v39, "add:withMessage:", v9, 0);
    objc_msgSend(v39, "run");

    v7 = v58;
    goto LABEL_24;
  }
  v7 = v58;
LABEL_26:
  v40 = a3;
  if (!v30)
    goto LABEL_35;
  if (!a3)
    goto LABEL_42;
  v30 = objc_retainAutorelease(v30);
  v41 = 0;
  *a3 = v30;
LABEL_43:

  return v41;
}

- (BOOL)getOrCreateControllerPublicKey:(id *)a3 controllerUsername:(id *)a4 error:(id *)a5
{
  void *v9;
  id v10;
  void *v11;
  void *v12;
  HMDHomeManager *v13;
  NSObject *v14;
  void *v15;
  const char *v16;
  NSObject *v17;
  os_log_type_t v18;
  uint32_t v19;
  BOOL v20;
  void *v21;
  id v23;
  uint8_t buf[4];
  void *v25;
  __int16 v26;
  void *v27;
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  v23 = 0;
  -[HMDHomeManager getOrCreateLocalPairingIdentity:](self, "getOrCreateLocalPairingIdentity:", &v23);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = v23;
  v11 = v10;
  if (v10)
  {
    if (a5)
      *a5 = objc_retainAutorelease(v10);
    v12 = (void *)MEMORY[0x227676638]();
    v13 = self;
    HMFGetOSLogHandle();
    v14 = objc_claimAutoreleasedReturnValue();
    if (!os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
      goto LABEL_7;
    HMFGetLogIdentifier();
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543618;
    v25 = v15;
    v26 = 2112;
    v27 = v11;
    v16 = "%{public}@Failed to get or create local pairing identity: %@";
    v17 = v14;
    v18 = OS_LOG_TYPE_INFO;
    v19 = 22;
    goto LABEL_6;
  }
  if (!v9)
  {
    v12 = (void *)MEMORY[0x227676638]();
    v13 = self;
    HMFGetOSLogHandle();
    v14 = objc_claimAutoreleasedReturnValue();
    if (!os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
      goto LABEL_7;
    HMFGetLogIdentifier();
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543362;
    v25 = v15;
    v16 = "%{public}@Unable to get identity but no error provided";
    v17 = v14;
    v18 = OS_LOG_TYPE_DEFAULT;
    v19 = 12;
LABEL_6:
    _os_log_impl(&dword_2218F0000, v17, v18, v16, buf, v19);

LABEL_7:
    objc_autoreleasePoolPop(v12);
    v20 = 0;
    goto LABEL_14;
  }
  if (a3)
  {
    objc_msgSend(v9, "publicKey");
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v21, "data");
    *a3 = (id)objc_claimAutoreleasedReturnValue();

  }
  if (a4)
  {
    objc_msgSend(v9, "identifier");
    *a4 = (id)objc_claimAutoreleasedReturnValue();
  }
  v20 = 1;
LABEL_14:

  return v20;
}

- (void)_sendAcceptOrDeclineRequestToAdminForIDSInvitationIdentifier:(id)a3 homeInviteUUID:(id)a4 payload:(id)a5 invitationState:(int64_t)a6 responseHandler:(id)a7
{
  id v12;
  id v13;
  id v14;
  id v15;
  void *v16;
  id *v17;
  _QWORD v18[4];
  id v19;
  _QWORD v20[4];
  id v21;

  v12 = a3;
  v13 = a4;
  v14 = a5;
  v15 = a7;
  if (a6 == 4)
  {
    -[HMDHomeManager idsInvitationManager](self, "idsInvitationManager");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    v18[0] = MEMORY[0x24BDAC760];
    v18[1] = 3221225472;
    v18[2] = __134__HMDHomeManager__sendAcceptOrDeclineRequestToAdminForIDSInvitationIdentifier_homeInviteUUID_payload_invitationState_responseHandler___block_invoke_2;
    v18[3] = &unk_24E796C88;
    v17 = &v19;
    v19 = v15;
    objc_msgSend(v16, "declineInvitationWithIDSIdentifier:homeInvitationID:completionBlock:", v12, v13, v18);
    goto LABEL_5;
  }
  if (a6 == 3)
  {
    -[HMDHomeManager idsInvitationManager](self, "idsInvitationManager");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    v20[0] = MEMORY[0x24BDAC760];
    v20[1] = 3221225472;
    v20[2] = __134__HMDHomeManager__sendAcceptOrDeclineRequestToAdminForIDSInvitationIdentifier_homeInviteUUID_payload_invitationState_responseHandler___block_invoke;
    v20[3] = &unk_24E796C88;
    v17 = &v21;
    v21 = v15;
    objc_msgSend(v16, "acceptInvitationWithIDSIdentifier:homeInvitationID:dictionary:completionBlock:", v12, v13, v14, v20);
LABEL_5:

  }
}

- (void)__sendUpdateRequestToAdminForInvitation:(id)a3 homeUUID:(id)a4 invitationState:(int64_t)a5 authStatus:(id)a6 reverseShareInvitation:(id)a7
{
  id v12;
  id v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  id v22;
  HMDHomeManager *v23;
  NSObject *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  HMDHomeManager *v30;
  NSObject *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  uint64_t v41;
  id v42;
  void *v43;
  void *context;
  id v45;
  id v46;
  _QWORD v47[4];
  id v48;
  id v49;
  id v50;
  id v51;
  id v52[2];
  id location;
  _QWORD aBlock[5];
  id v55;
  id v56[2];
  id v57;
  uint8_t buf[4];
  void *v59;
  __int16 v60;
  void *v61;
  _QWORD v62[2];
  _QWORD v63[5];

  v63[2] = *MEMORY[0x24BDAC8D0];
  v12 = a3;
  v46 = a4;
  v45 = a6;
  v13 = a7;
  v62[0] = CFSTR("kInvitationIdentifierKey");
  objc_msgSend(v12, "identifier");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v14, "UUIDString");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  v62[1] = CFSTR("kInvitationStateKey");
  v63[0] = v15;
  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithInteger:", a5);
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  v63[1] = v16;
  objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v63, v62, 2);
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  v18 = (void *)objc_msgSend(v17, "mutableCopy");

  if (a5 != 3)
  {
LABEL_21:
    objc_initWeak((id *)buf, self);
    v41 = MEMORY[0x24BDAC760];
    aBlock[0] = MEMORY[0x24BDAC760];
    aBlock[1] = 3221225472;
    aBlock[2] = __117__HMDHomeManager___sendUpdateRequestToAdminForInvitation_homeUUID_invitationState_authStatus_reverseShareInvitation___block_invoke;
    aBlock[3] = &unk_24E796CB0;
    objc_copyWeak(v56, (id *)buf);
    aBlock[4] = self;
    v42 = v12;
    v55 = v42;
    v56[1] = (id)a5;
    v43 = _Block_copy(aBlock);
    if (a5 == 3)
    {
      objc_initWeak(&location, self);
      v47[0] = v41;
      v47[1] = 3221225472;
      v47[2] = __117__HMDHomeManager___sendUpdateRequestToAdminForInvitation_homeUUID_invitationState_authStatus_reverseShareInvitation___block_invoke_996;
      v47[3] = &unk_24E796CD8;
      objc_copyWeak(v52, &location);
      v48 = v42;
      v49 = v46;
      v50 = v18;
      v52[1] = (id)3;
      v51 = v43;
      -[HMDHomeManager addIssuerKeyToMessagePayload:invitation:completion:](self, "addIssuerKeyToMessagePayload:invitation:completion:", v50, v48, v47);

      objc_destroyWeak(v52);
      objc_destroyWeak(&location);
    }
    else
    {
      -[HMDHomeManager sendRequestForInvitation:homeUUID:payload:invitationState:responseHandler:](self, "sendRequestForInvitation:homeUUID:payload:invitationState:responseHandler:", v42, v46, v18, a5, v43);
    }

    objc_destroyWeak(v56);
    objc_destroyWeak((id *)buf);
    goto LABEL_25;
  }
  if (!v13)
  {
LABEL_8:
    if (!-[HMDHomeManager addHH2KeyInResponsePayload:invitation:](self, "addHH2KeyInResponsePayload:invitation:", v18, v12))
    {
      v29 = (void *)MEMORY[0x227676638]();
      v30 = self;
      HMFGetOSLogHandle();
      v31 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v32 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543362;
        v59 = v32;
        _os_log_impl(&dword_2218F0000, v31, OS_LOG_TYPE_ERROR, "%{public}@Failed to get or create HH2 Controller key", buf, 0xCu);

      }
      objc_autoreleasePoolPop(v29);
    }
    -[HMDHomeManager appleAccountManager](self, "appleAccountManager");
    v33 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v33, "account");
    v34 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v34, "primaryHandle");
    v35 = (void *)objc_claimAutoreleasedReturnValue();

    if (v35)
    {
      +[HMDAccountHandleFormatter defaultFormatter](HMDAccountHandleFormatter, "defaultFormatter");
      v36 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v36, "stringForObjectValue:", v35);
      v37 = (void *)objc_claimAutoreleasedReturnValue();

      if (v37)
        objc_msgSend(v18, "setObject:forKeyedSubscript:", v37, CFSTR("kUserIDKey"));

    }
    objc_msgSend(v12, "inviterAccount");
    v38 = (void *)objc_claimAutoreleasedReturnValue();
    if (v38)
    {
      +[HMDIdentityRegistry sharedRegistry](HMDIdentityRegistry, "sharedRegistry");
      v39 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v12, "inviterIdentity");
      v40 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v39, "registerIdentity:account:object:", v40, v38, v12);

    }
    if (v45)
      objc_msgSend(v45, "addToPayload:", v18);

    goto LABEL_21;
  }
  v19 = (void *)MEMORY[0x24BDD1618];
  objc_msgSend(v13, "token");
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  v57 = 0;
  objc_msgSend(v19, "archivedDataWithRootObject:requiringSecureCoding:error:", v20, 1, &v57);
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  v22 = v57;

  if (!v22)
  {
    objc_msgSend(v13, "url");
    v27 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v27, "absoluteString");
    v28 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v18, "setObject:forKeyedSubscript:", v28, CFSTR("HMDHomeInvitationShareURLKey"));

    objc_msgSend(v18, "setObject:forKeyedSubscript:", v21, CFSTR("HMDHomeInvitationShareTokenKey"));
    goto LABEL_8;
  }
  context = (void *)MEMORY[0x227676638]();
  v23 = self;
  HMFGetOSLogHandle();
  v24 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
  {
    HMFGetLogIdentifier();
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "token");
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543618;
    v59 = v25;
    v60 = 2112;
    v61 = v26;
    _os_log_impl(&dword_2218F0000, v24, OS_LOG_TYPE_ERROR, "%{public}@Failed to encode reverse share token %@", buf, 0x16u);

  }
  objc_autoreleasePoolPop(context);

LABEL_25:
}

- (void)sendRequestForInvitation:(id)a3 homeUUID:(id)a4 payload:(id)a5 invitationState:(int64_t)a6 responseHandler:(id)a7
{
  id v12;
  id v13;
  id v14;
  id v15;
  void *v16;
  void *v17;
  NSObject *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  id v27;
  void *v28;
  HMDHomeManager *v29;
  int64_t v30;
  uint8_t buf[4];
  void *v32;
  __int16 v33;
  void *v34;
  __int16 v35;
  void *v36;
  __int16 v37;
  void *v38;
  uint64_t v39;

  v39 = *MEMORY[0x24BDAC8D0];
  v12 = a3;
  v13 = a4;
  v14 = a5;
  v15 = a7;
  objc_msgSend(v13, "UUIDString");
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v14, "setValue:forKey:", v16, CFSTR("kHomeUUID"));

  v17 = (void *)MEMORY[0x227676638]();
  HMFGetOSLogHandle();
  v18 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v27 = v15;
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "idsInvitationUUID");
    v28 = v17;
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v20, "UUIDString");
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "identifier");
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v22, "UUIDString");
    v29 = self;
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "UUIDString");
    v30 = a6;
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138544130;
    v32 = v19;
    v33 = 2112;
    v34 = v21;
    v35 = 2112;
    v36 = v23;
    v37 = 2112;
    v38 = v24;
    _os_log_impl(&dword_2218F0000, v18, OS_LOG_TYPE_INFO, "%{public}@Accept/decline request to admin for idsInviteUUID %@, homeInviteUUID %@ homeUUID %@", buf, 0x2Au);

    v17 = v28;
    a6 = v30;

    self = v29;
    v15 = v27;
  }

  objc_autoreleasePoolPop(v17);
  objc_msgSend(v12, "idsInvitationUUID");
  v25 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v12, "identifier");
  v26 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHomeManager _sendAcceptOrDeclineRequestToAdminForIDSInvitationIdentifier:homeInviteUUID:payload:invitationState:responseHandler:](self, "_sendAcceptOrDeclineRequestToAdminForIDSInvitationIdentifier:homeInviteUUID:payload:invitationState:responseHandler:", v25, v26, v14, a6, v15);

}

- (void)addIssuerKeyToMessagePayload:(id)a3 invitation:(id)a4 completion:(id)a5
{
  id v8;
  id v9;
  id v10;
  void *v11;
  void *v12;
  HMDHomeManager *v13;
  NSObject *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  id v23;
  _QWORD v24[5];
  id v25;
  id v26;
  id v27;
  id v28;
  uint8_t buf[4];
  void *v30;
  __int16 v31;
  void *v32;
  __int16 v33;
  void *v34;
  uint64_t v35;

  v35 = *MEMORY[0x24BDAC8D0];
  v8 = a3;
  v9 = a4;
  v10 = a5;
  if (_os_feature_enabled_impl())
  {
    objc_msgSend(MEMORY[0x24BE3F178], "internalOnlyInitializer");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v12 = (void *)MEMORY[0x227676638]();
    v13 = self;
    HMFGetOSLogHandle();
    v14 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v11, "UUID");
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v9, "homeUUID");
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543874;
      v30 = v15;
      v31 = 2112;
      v32 = v16;
      v33 = 2112;
      v34 = v17;
      _os_log_impl(&dword_2218F0000, v14, OS_LOG_TYPE_INFO, "%{public}@[NewFlow: %@] Creating ACWG Issuer key for newly accepted shared home: %@", buf, 0x20u);

    }
    objc_autoreleasePoolPop(v12);
    +[HMDCoreData sharedInstance](HMDCoreData, "sharedInstance");
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "homeUUID");
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v18, "contextWithHomeUUID:", v19);
    v20 = (void *)objc_claimAutoreleasedReturnValue();

    +[HMDACWGKeyManager shared](HMDACWGKeyManager, "shared");
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "homeUUID");
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    v24[0] = MEMORY[0x24BDAC760];
    v24[1] = 3221225472;
    v24[2] = __69__HMDHomeManager_addIssuerKeyToMessagePayload_invitation_completion___block_invoke;
    v24[3] = &unk_24E796D00;
    v24[4] = v13;
    v25 = v11;
    v26 = v9;
    v28 = v10;
    v27 = v8;
    v23 = v11;
    objc_msgSend(v21, "getOrCreateIssuerKeyAndSaveToSharedUserReverseShareWithHomeUUID:context:flow:completionHandler:", v22, v20, v23, v24);

  }
  else
  {
    (*((void (**)(id, _QWORD))v10 + 2))(v10, 0);
  }

}

- (void)teardownRemoteAccessForHome:(id)a3
{
  id v4;
  NSObject *v5;
  id v6;
  _QWORD v7[5];
  id v8;

  v4 = a3;
  -[HMDHomeManager workQueue](self, "workQueue");
  v5 = objc_claimAutoreleasedReturnValue();
  v7[0] = MEMORY[0x24BDAC760];
  v7[1] = 3221225472;
  v7[2] = __46__HMDHomeManager_teardownRemoteAccessForHome___block_invoke;
  v7[3] = &unk_24E79C268;
  v7[4] = self;
  v8 = v4;
  v6 = v4;
  dispatch_async(v5, v7);

}

- (void)_teardownRemoteAccessForHome:(id)a3
{
  void *v4;
  void *v5;
  char v6;
  id v7;

  v7 = a3;
  -[HMDHomeManager _homeWithUUID:](self, "_homeWithUUID:");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "residentDeviceManager");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend(v5, "isResidentAvailable");

  if ((v6 & 1) == 0)
    -[HMDHomeManager _teardownRemoteAccessForHomeCommon:isCompanion:](self, "_teardownRemoteAccessForHomeCommon:isCompanion:", v7, 0);

}

- (void)_teardownRemoteAccessForHomeThroughCompanion:(id)a3
{
  id v3;

  v3 = a3;
  isWatch();

}

- (void)_teardownRemoteAccessForHomeCommon:(id)a3 isCompanion:(BOOL)a4
{
  _BOOL4 v4;
  id v6;
  void *v7;
  void *v8;
  NSObject *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  void *v20;
  void *v21;
  id v22;
  void *v23;
  NSObject *v24;
  void *v25;
  void *v26;
  void *v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  uint8_t v32[128];
  uint8_t buf[4];
  void *v34;
  __int16 v35;
  void *v36;
  uint64_t v37;

  v4 = a4;
  v37 = *MEMORY[0x24BDAC8D0];
  v6 = a3;
  -[HMDHomeManager _homeWithUUID:](self, "_homeWithUUID:", v6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = (void *)MEMORY[0x227676638]();
  HMFGetOSLogHandle();
  v9 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "UUIDString");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543618;
    v34 = v10;
    v35 = 2112;
    v36 = v11;
    _os_log_impl(&dword_2218F0000, v9, OS_LOG_TYPE_INFO, "%{public}@Tearing down any previously setup remote access for home: %@", buf, 0x16u);

  }
  objc_autoreleasePoolPop(v8);
  -[HMDHomeManager messageDispatcher](self, "messageDispatcher");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  v13 = v12;
  if (v4)
    objc_msgSend(v12, "setCompanionDevice:forHome:", 0, v7);
  else
    objc_msgSend(v12, "setRemoteAccessDevice:forHome:", 0, v7);

  v30 = 0u;
  v31 = 0u;
  v28 = 0u;
  v29 = 0u;
  -[HMDHomeManager pendingRemoteSessions](self, "pendingRemoteSessions", 0);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  v15 = objc_msgSend(v14, "countByEnumeratingWithState:objects:count:", &v28, v32, 16);
  if (v15)
  {
    v16 = v15;
    v17 = *(_QWORD *)v29;
LABEL_8:
    v18 = 0;
    while (1)
    {
      if (*(_QWORD *)v29 != v17)
        objc_enumerationMutation(v14);
      v19 = *(void **)(*((_QWORD *)&v28 + 1) + 8 * v18);
      -[HMDHomeManager pendingRemoteSessions](self, "pendingRemoteSessions");
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v20, "objectForKeyedSubscript:", v19);
      v21 = (void *)objc_claimAutoreleasedReturnValue();

      if ((objc_msgSend(v21, "isEqual:", v6) & 1) != 0)
        break;

      if (v16 == ++v18)
      {
        v16 = objc_msgSend(v14, "countByEnumeratingWithState:objects:count:", &v28, v32, 16);
        if (v16)
          goto LABEL_8;
        goto LABEL_14;
      }
    }
    v22 = v19;

    if (!v22)
      goto LABEL_20;
    v23 = (void *)MEMORY[0x227676638]();
    HMFGetOSLogHandle();
    v24 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v24, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v25 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v22, "UUIDString");
      v26 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v34 = v25;
      v35 = 2112;
      v36 = v26;
      _os_log_impl(&dword_2218F0000, v24, OS_LOG_TYPE_INFO, "%{public}@Clearing pending remote session with identifier %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v23);
    -[HMDHomeManager pendingRemoteSessions](self, "pendingRemoteSessions");
    v27 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v27, "removeObjectForKey:", v22);

  }
  else
  {
LABEL_14:
    v22 = v14;
  }

LABEL_20:
}

- (void)_postiCloudSigninState:(BOOL)a3
{
  _BOOL8 v3;
  void *v5;
  NSObject *v6;
  uint64_t v7;
  void *v8;
  const __CFString *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  uint64_t v15;
  void *v16;
  uint8_t buf[4];
  uint64_t v18;
  __int16 v19;
  const __CFString *v20;
  uint64_t v21;

  v3 = a3;
  v21 = *MEMORY[0x24BDAC8D0];
  v5 = (void *)MEMORY[0x227676638](self, a2);
  HMFGetOSLogHandle();
  v6 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v7 = objc_claimAutoreleasedReturnValue();
    v8 = (void *)v7;
    v9 = CFSTR("not");
    if (v3)
      v9 = &stru_24E79DB48;
    *(_DWORD *)buf = 138543618;
    v18 = v7;
    v19 = 2112;
    v20 = v9;
    _os_log_impl(&dword_2218F0000, v6, OS_LOG_TYPE_INFO, "%{public}@Detected that user is %@ signed into iCloud, posting notification", buf, 0x16u);

  }
  objc_autoreleasePoolPop(v5);
  v10 = (void *)MEMORY[0x24BE3F1B0];
  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithBool:", v3, CFSTR("kAccountIsActiveKey"));
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v16 = v11;
  objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", &v16, &v15, 1);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "internalMessageWithName:messagePayload:", CFSTR("kiCloudAccountChangedNotificationKey"), v12);
  v13 = (void *)objc_claimAutoreleasedReturnValue();

  -[HMDHomeManager messageDispatcher](self, "messageDispatcher");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v14, "dispatchMessage:target:", v13, 0);

}

- (BOOL)_redirectAppDataRequestToResidentWithMessage:(id)a3
{
  id v4;
  NSObject *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  HMDRemoteHomeMessageDestination *v10;
  void *v11;
  void *v12;
  HMDRemoteHomeMessageDestination *v13;
  void *v14;
  HMDHomeManager *v15;
  NSObject *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  BOOL v21;
  void *v22;
  HMDHomeManager *v23;
  NSObject *v24;
  void *v25;
  void *v26;
  HMDHomeManager *v27;
  NSObject *v28;
  void *v29;
  const char *v30;
  NSObject *v31;
  os_log_type_t v32;
  uint64_t v34;
  uint64_t v35;
  void (*v36)(uint64_t, void *, void *);
  void *v37;
  HMDHomeManager *v38;
  id v39;
  uint8_t buf[4];
  void *v41;
  __int16 v42;
  void *v43;
  __int16 v44;
  void *v45;
  uint64_t v46;

  v46 = *MEMORY[0x24BDAC8D0];
  v4 = a3;
  -[HMDHomeManager workQueue](self, "workQueue");
  v5 = objc_claimAutoreleasedReturnValue();
  dispatch_assert_queue_V2(v5);

  -[HMDHomeManager primaryHomeUUID](self, "primaryHomeUUID");
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  if (v6)
  {
    -[HMDHomeManager primaryHomeUUID](self, "primaryHomeUUID");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHomeManager _homeWithUUID:](self, "_homeWithUUID:", v7);
    v8 = (void *)objc_claimAutoreleasedReturnValue();

    if (v8)
    {
      if ((objc_msgSend(v8, "isOwnerUser") & 1) != 0)
      {
        v9 = (void *)objc_msgSend(v4, "mutableCopy");
        objc_msgSend(v9, "setName:", CFSTR("HMDHomeSetHomeManagerAppData"));
        v34 = MEMORY[0x24BDAC760];
        v35 = 3221225472;
        v36 = __63__HMDHomeManager__redirectAppDataRequestToResidentWithMessage___block_invoke;
        v37 = &unk_24E799400;
        v38 = self;
        v39 = v4;
        objc_msgSend(v9, "setResponseHandler:", &v34);
        v10 = [HMDRemoteHomeMessageDestination alloc];
        objc_msgSend(v8, "uuid", v34, v35, v36, v37, v38);
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v8, "uuid");
        v12 = (void *)objc_claimAutoreleasedReturnValue();
        v13 = -[HMDRemoteHomeMessageDestination initWithTarget:homeUUID:](v10, "initWithTarget:homeUUID:", v11, v12);

        v14 = (void *)MEMORY[0x227676638](objc_msgSend(v9, "setDestination:", v13));
        v15 = self;
        HMFGetOSLogHandle();
        v16 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
        {
          HMFGetLogIdentifier();
          v17 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v8, "shortDescription");
          v18 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v9, "shortDescription");
          v19 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543874;
          v41 = v17;
          v42 = 2112;
          v43 = v18;
          v44 = 2112;
          v45 = v19;
          _os_log_impl(&dword_2218F0000, v16, OS_LOG_TYPE_INFO, "%{public}@Redirecting app data request to home %@ with message %@", buf, 0x20u);

        }
        objc_autoreleasePoolPop(v14);
        -[HMDHomeManager messageDispatcher](v15, "messageDispatcher");
        v20 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v20, "sendMessage:", v9);

        v21 = 1;
        goto LABEL_16;
      }
      v26 = (void *)MEMORY[0x227676638]();
      v27 = self;
      HMFGetOSLogHandle();
      v28 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v28, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v29 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543362;
        v41 = v29;
        v30 = "%{public}@Not redirecting app data request, we are not owners in the primary home";
        v31 = v28;
        v32 = OS_LOG_TYPE_INFO;
        goto LABEL_14;
      }
    }
    else
    {
      v26 = (void *)MEMORY[0x227676638]();
      v27 = self;
      HMFGetOSLogHandle();
      v28 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v29 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543362;
        v41 = v29;
        v30 = "%{public}@Not redirecting app data request, unable to find primary home";
        v31 = v28;
        v32 = OS_LOG_TYPE_ERROR;
LABEL_14:
        _os_log_impl(&dword_2218F0000, v31, v32, v30, buf, 0xCu);

      }
    }

    objc_autoreleasePoolPop(v26);
    v21 = 0;
LABEL_16:

    goto LABEL_17;
  }
  v22 = (void *)MEMORY[0x227676638]();
  v23 = self;
  HMFGetOSLogHandle();
  v24 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v24, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543362;
    v41 = v25;
    _os_log_impl(&dword_2218F0000, v24, OS_LOG_TYPE_INFO, "%{public}@Not redirecting app data request, no primary home", buf, 0xCu);

  }
  objc_autoreleasePoolPop(v22);
  v21 = 0;
LABEL_17:

  return v21;
}

- (void)_handleSetAppData:(id)a3
{
  id v4;

  v4 = a3;
  if (!-[HMDHomeManager _redirectAppDataRequestToResidentWithMessage:](self, "_redirectAppDataRequestToResidentWithMessage:"))-[HMDHomeManager _setAppDataWithMessage:](self, "_setAppDataWithMessage:", v4);

}

- (void)setAppDataWithMessage:(id)a3
{
  id v4;
  NSObject *v5;
  id v6;
  _QWORD v7[5];
  id v8;

  v4 = a3;
  -[HMDHomeManager workQueue](self, "workQueue");
  v5 = objc_claimAutoreleasedReturnValue();
  v7[0] = MEMORY[0x24BDAC760];
  v7[1] = 3221225472;
  v7[2] = __40__HMDHomeManager_setAppDataWithMessage___block_invoke;
  v7[3] = &unk_24E79C268;
  v7[4] = self;
  v8 = v4;
  v6 = v4;
  dispatch_async(v5, v7);

}

- (void)_setAppDataWithMessage:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  __CFString *v8;
  void *v9;
  void *v10;
  HMDApplicationData *v11;
  void *v12;
  HMDHomeManager *v13;
  NSObject *v14;
  void *v15;
  HMDApplicationData *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  int v24;
  void *v25;
  __int16 v26;
  void *v27;
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  v4 = a3;
  v5 = (void *)MEMORY[0x24BDBCED8];
  objc_msgSend(v4, "messagePayload");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "dictionaryWithCapacity:", objc_msgSend(v6, "count"));
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  v8 = CFSTR("com.apple.homekit-entitledclient.identifer");
  objc_msgSend(v4, "dictionaryForKey:", CFSTR("kAppDataInformationKey"));
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHomeManager appData](self, "appData");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v11 = (HMDApplicationData *)objc_msgSend(v10, "copy");
  v12 = (void *)MEMORY[0x227676638]();
  v13 = self;
  HMFGetOSLogHandle();
  v14 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    v24 = 138543618;
    v25 = v15;
    v26 = 2112;
    v27 = v9;
    _os_log_impl(&dword_2218F0000, v14, OS_LOG_TYPE_INFO, "%{public}@Client needs to set home manager appData to %@", (uint8_t *)&v24, 0x16u);

  }
  objc_autoreleasePoolPop(v12);
  if (v9)
  {
    if (!v11)
    {
      v16 = [HMDApplicationData alloc];
      -[HMDHomeManager uuid](v13, "uuid");
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      v11 = -[HMDApplicationData initWithParentUUID:](v16, "initWithParentUUID:", v17);

    }
    -[HMDApplicationData setApplicationData:forIdentifier:](v11, "setApplicationData:forIdentifier:", v9, CFSTR("com.apple.homekit-entitledclient.identifer"));
    -[HMDApplicationData modelObjectWithChangeType:](v11, "modelObjectWithChangeType:", 1);
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    v19 = v18;
    if (!v10)
      objc_msgSend(v18, "setObjectChangeType:", 1);
    objc_msgSend(v7, "setObject:forKey:", v9, CFSTR("kAppDataInformationKey"));
    if (!v19)
      goto LABEL_13;
  }
  else
  {
    -[HMDApplicationData removeApplicationDataForIdentifier:](v11, "removeApplicationDataForIdentifier:", CFSTR("com.apple.homekit-entitledclient.identifer"));
    if (!v11
      || (-[HMDApplicationData modelObjectWithChangeType:](v11, "modelObjectWithChangeType:", 1),
          (v19 = (void *)objc_claimAutoreleasedReturnValue()) == 0))
    {
LABEL_13:
      objc_msgSend(v4, "respondWithPayload:", 0);
      goto LABEL_14;
    }
  }
  -[HMDHomeManager backingStore](v13, "backingStore");
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "name");
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  +[HMDBackingStoreTransactionOptions defaultXPCOptions](HMDBackingStoreTransactionOptions, "defaultXPCOptions");
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v20, "transaction:options:", v21, v22);
  v23 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v23, "add:withMessage:", v19, v4);
  objc_msgSend(v23, "run");

LABEL_14:
}

- (void)processAppDataModelUpdate:(id)a3 message:(id)a4
{
  id v6;
  id v7;
  void *v8;
  void *v9;
  HMDApplicationData *v10;
  void *v11;
  void *v12;
  HMDApplicationData *v13;
  void *v14;
  HMDHomeManager *v15;
  NSObject *v16;
  void *v17;
  void *v18;
  void *v19;
  int v20;
  void *v21;
  __int16 v22;
  void *v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v6 = a3;
  v7 = a4;
  -[HMDHomeManager appData](self, "appData");
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  if (v8)
  {
    -[HMDHomeManager appData](self, "appData");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "updateWithModel:", v6);

  }
  else
  {
    v10 = [HMDApplicationData alloc];
    objc_msgSend(v6, "appDataDictionary");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHomeManager uuid](self, "uuid");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    v13 = -[HMDApplicationData initWithDictionary:parentUUID:](v10, "initWithDictionary:parentUUID:", v11, v12);
    -[HMDHomeManager setAppData:](self, "setAppData:", v13);

    v14 = (void *)MEMORY[0x227676638]();
    v15 = self;
    HMFGetOSLogHandle();
    v16 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
    {
      HMFGetLogIdentifier();
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v6, "appDataDictionary");
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      v20 = 138543618;
      v21 = v17;
      v22 = 2112;
      v23 = v18;
      _os_log_impl(&dword_2218F0000, v16, OS_LOG_TYPE_DEBUG, "%{public}@Updating the application data : %@", (uint8_t *)&v20, 0x16u);

    }
    objc_autoreleasePoolPop(v14);
  }
  objc_msgSend(v7, "transactionResult");
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v19, "markChanged");
  objc_msgSend(v7, "respondWithPayload:", 0);
  logAndPostNotification(CFSTR("HMDHomeManagerDidUpdateApplicationData"), self, 0);

}

- (void)processAppDataModelRemove:(id)a3 message:(id)a4
{
  id v5;

  v5 = a4;
  -[HMDHomeManager setAppData:](self, "setAppData:", 0);
  objc_msgSend(v5, "respondWithPayload:", 0);

}

- (BOOL)isResidentCapable
{
  void *v2;
  char v3;

  +[HMDDeviceCapabilities deviceCapabilities](HMDDeviceCapabilities, "deviceCapabilities");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "isResidentCapable");

  return v3;
}

- (BOOL)isResidentEnabled
{
  _BOOL4 v3;

  v3 = -[HMDHomeManager isResidentCapable](self, "isResidentCapable");
  if (v3)
    LOBYTE(v3) = -[HMDHomeManager residentEnabledState](self, "residentEnabledState") == 2;
  return v3;
}

- (void)notifyClientsResidentCapable:(BOOL)a3
{
  _BOOL4 v3;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  const __CFString *v11;
  _QWORD v12[2];

  v3 = a3;
  v12[1] = *MEMORY[0x24BDAC8D0];
  v5 = (void *)MEMORY[0x24BE3F1B0];
  v11 = CFSTR("kResidentCapableDeviceKey");
  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithBool:");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v12[0] = v6;
  objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v12, &v11, 1);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "entitledMessageWithName:messagePayload:", CFSTR("kResidentDeviceCapableUpdatedNotificationKey"), v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  -[HMDHomeManager messageDispatcher](self, "messageDispatcher");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHomeManager uuid](self, "uuid");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "sendMessage:target:andInvokeCompletionHandler:", v8, v10, 0);

  if (v3 && -[HMDHomeManager isResidentEnabled](self, "isResidentEnabled"))
    -[HMDHomeManager _updateResidentEnabledOnThisDevice:forceNotify:message:](self, "_updateResidentEnabledOnThisDevice:forceNotify:message:", 1, 1, 0);

}

- (void)_handleEnableResidentForThisDeviceRequest:(id)a3
{
  id v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void (**v8)(_QWORD, _QWORD, _QWORD);
  char v9;

  v4 = a3;
  v9 = 0;
  v5 = objc_msgSend(v4, "BOOLForKey:keyPresent:", CFSTR("kResidentEnabledKey"), &v9);
  if (v9)
  {
    -[HMDHomeManager _updateResidentEnabledOnThisDevice:forceNotify:message:](self, "_updateResidentEnabledOnThisDevice:forceNotify:message:", v5, 0, v4);
  }
  else
  {
    objc_msgSend(v4, "responseHandler");
    v6 = (void *)objc_claimAutoreleasedReturnValue();

    if (v6)
    {
      objc_msgSend(MEMORY[0x24BDD1540], "hmErrorWithCode:", 3);
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "responseHandler");
      v8 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
      ((void (**)(_QWORD, void *, _QWORD))v8)[2](v8, v7, 0);

    }
  }

}

- (void)_updateResidentEnabledOnThisDevice:(BOOL)a3 forceNotify:(BOOL)a4 message:(id)a5
{
  _BOOL4 v5;
  _BOOL4 v6;
  id v8;
  uint64_t v9;
  void *v10;
  HMDHomeManager *v11;
  NSObject *v12;
  void *v13;
  void *v14;
  void *v15;
  HMDHomeManager *v16;
  NSObject *v17;
  void *v18;
  const char *v19;
  NSObject *v20;
  os_log_type_t v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  _QWORD v30[4];
  id v31;
  const __CFString *v32;
  void *v33;
  uint8_t buf[4];
  void *v35;
  uint64_t v36;

  v5 = a4;
  v6 = a3;
  v36 = *MEMORY[0x24BDAC8D0];
  v8 = a5;
  if (!-[HMDHomeManager isResidentCapable](self, "isResidentCapable"))
  {
    v15 = (void *)MEMORY[0x227676638]();
    v16 = self;
    HMFGetOSLogHandle();
    v17 = objc_claimAutoreleasedReturnValue();
    if (!os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
    {
LABEL_15:

      objc_autoreleasePoolPop(v15);
      -[HMDHomeManager homes](v16, "homes");
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      -[HMDHomeManager _removeCurrentResidentDeviceFromHomes:](v16, "_removeCurrentResidentDeviceFromHomes:", v14);
      goto LABEL_16;
    }
    HMFGetLogIdentifier();
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543362;
    v35 = v18;
    v19 = "%{public}@Not resident capable, removing ourselves as a resident from all homes";
    v20 = v17;
    v21 = OS_LOG_TYPE_INFO;
LABEL_14:
    _os_log_impl(&dword_2218F0000, v20, v21, v19, buf, 0xCu);

    goto LABEL_15;
  }
  v9 = -[HMDHomeManager residentEnabledState](self, "residentEnabledState");
  if (!v6)
  {
    if (v9 != 1)
    {
      v5 = 1;
      v9 = -[HMDHomeManager setResidentEnabledState:](self, "setResidentEnabledState:", 1);
    }
    v15 = (void *)MEMORY[0x227676638](v9);
    v16 = self;
    HMFGetOSLogHandle();
    v17 = objc_claimAutoreleasedReturnValue();
    if (!os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
      goto LABEL_15;
    HMFGetLogIdentifier();
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543362;
    v35 = v18;
    v19 = "%{public}@Disabled as a resident device, removing ourselves as a resident from all homes";
    v20 = v17;
    v21 = OS_LOG_TYPE_DEFAULT;
    goto LABEL_14;
  }
  if (v9 != 2)
  {
    v9 = -[HMDHomeManager setResidentEnabledState:](self, "setResidentEnabledState:", 2);
    v5 = 1;
  }
  v10 = (void *)MEMORY[0x227676638](v9);
  v11 = self;
  HMFGetOSLogHandle();
  v12 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
  {
    HMFGetLogIdentifier();
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543362;
    v35 = v13;
    _os_log_impl(&dword_2218F0000, v12, OS_LOG_TYPE_DEFAULT, "%{public}@Enabled as a resident device, adding ourselves as a resident to all homes", buf, 0xCu);

  }
  objc_autoreleasePoolPop(v10);
  -[HMDHomeManager homes](v11, "homes");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHomeManager _addCurrentResidentDeviceToHomes:](v11, "_addCurrentResidentDeviceToHomes:", v14);
LABEL_16:

  if (v8 || v5)
  {
    v32 = CFSTR("kResidentEnabledKey");
    objc_msgSend(MEMORY[0x24BDD16E0], "numberWithBool:", -[HMDHomeManager isResidentEnabled](self, "isResidentEnabled"));
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    v33 = v22;
    objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", &v33, &v32, 1);
    v23 = (void *)objc_claimAutoreleasedReturnValue();

    v24 = (void *)MEMORY[0x24BE3F1B0];
    objc_msgSend(v8, "identifier");
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v24, "entitledMessageWithName:identifier:messagePayload:", CFSTR("kResidentEnabledForThisDeviceUpdatedNotificationKey"), v25, v23);
    v26 = (void *)objc_claimAutoreleasedReturnValue();

    -[HMDHomeManager messageDispatcher](self, "messageDispatcher");
    v27 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHomeManager uuid](self, "uuid");
    v28 = (void *)objc_claimAutoreleasedReturnValue();
    v30[0] = MEMORY[0x24BDAC760];
    v30[1] = 3221225472;
    v30[2] = __73__HMDHomeManager__updateResidentEnabledOnThisDevice_forceNotify_message___block_invoke;
    v30[3] = &unk_24E79C240;
    v31 = v8;
    objc_msgSend(v27, "sendMessage:target:andInvokeCompletionHandler:", v26, v28, v30);

    -[HMDHomeManager notificationCenter](self, "notificationCenter");
    v29 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v29, "postNotificationName:object:userInfo:", CFSTR("HMDHomeManagerResidentEnabledChangedNotification"), self, v23);

  }
}

- (void)handleHomeCurrentDeviceResidentEligibleNotification:(id)a3
{
  id v4;
  void *v5;
  int v6;
  void *v7;
  void *v8;
  id v9;
  NSObject *v10;
  _QWORD v11[5];
  id v12;

  v4 = a3;
  +[HMDDeviceCapabilities deviceCapabilities](HMDDeviceCapabilities, "deviceCapabilities");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend(v5, "isResidentCapable");

  if (v6)
  {
    objc_msgSend(v4, "object");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
      v8 = v7;
    else
      v8 = 0;
    v9 = v8;

    if (objc_msgSend(v9, "hasReachableAccessories"))
    {
      -[HMDHomeManager workQueue](self, "workQueue");
      v10 = objc_claimAutoreleasedReturnValue();
      v11[0] = MEMORY[0x24BDAC760];
      v11[1] = 3221225472;
      v11[2] = __70__HMDHomeManager_handleHomeCurrentDeviceResidentEligibleNotification___block_invoke;
      v11[3] = &unk_24E79C268;
      v11[4] = self;
      v12 = v9;
      dispatch_async(v10, v11);

    }
  }

}

- (void)_addCurrentResidentDeviceToHomes:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t i;
  void *v14;
  void *v15;
  NSObject *v16;
  void *v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint8_t v22[128];
  uint8_t buf[4];
  void *v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v4 = a3;
  if (-[HMDHomeManager isResidentEnabled](self, "isResidentEnabled"))
  {
    -[HMDHomeManager appleAccountManager](self, "appleAccountManager");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "device");
    v6 = (void *)objc_claimAutoreleasedReturnValue();

    -[HMDHomeManager capabilitiesController](self, "capabilitiesController");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "currentResidentCapabilities");
    v8 = (void *)objc_claimAutoreleasedReturnValue();

    if (v8)
    {
      v20 = 0u;
      v21 = 0u;
      v18 = 0u;
      v19 = 0u;
      v9 = v4;
      v10 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v18, v22, 16);
      if (v10)
      {
        v11 = v10;
        v12 = *(_QWORD *)v19;
        do
        {
          for (i = 0; i != v11; ++i)
          {
            if (*(_QWORD *)v19 != v12)
              objc_enumerationMutation(v9);
            v14 = *(void **)(*((_QWORD *)&v18 + 1) + 8 * i);
            if (objc_msgSend(v14, "isOwnerUser", (_QWORD)v18)
              && objc_msgSend(v14, "hasReachableAccessories"))
            {
              objc_msgSend(v14, "addResidentCapableDevice:", v6);
            }
          }
          v11 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v18, v22, 16);
        }
        while (v11);
      }

    }
  }
  else
  {
    v15 = (void *)MEMORY[0x227676638]();
    HMFGetOSLogHandle();
    v16 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
    {
      HMFGetLogIdentifier();
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v24 = v17;
      _os_log_impl(&dword_2218F0000, v16, OS_LOG_TYPE_DEBUG, "%{public}@Not adding ourselves as a resident as we are disabled as a resident", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v15);
  }

}

- (void)_removeCurrentResidentDeviceFromHomes:(id)a3
{
  id v4;
  void *v5;
  int v6;
  void *v7;
  id v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t i;
  void *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  id v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  _BYTE v30[128];
  _BYTE v31[128];
  uint64_t v32;

  v32 = *MEMORY[0x24BDAC8D0];
  v4 = a3;
  +[HMDDeviceCapabilities deviceCapabilities](HMDDeviceCapabilities, "deviceCapabilities");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend(v5, "isResidentCapable");

  if (v6)
  {
    -[HMDHomeManager appleAccountManager](self, "appleAccountManager");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "device");
    v8 = (id)objc_claimAutoreleasedReturnValue();

    v28 = 0u;
    v29 = 0u;
    v26 = 0u;
    v27 = 0u;
    v21 = v4;
    v9 = v4;
    v10 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v26, v31, 16);
    if (v10)
    {
      v11 = v10;
      v12 = *(_QWORD *)v27;
      do
      {
        for (i = 0; i != v11; ++i)
        {
          if (*(_QWORD *)v27 != v12)
            objc_enumerationMutation(v9);
          v14 = *(void **)(*((_QWORD *)&v26 + 1) + 8 * i);
          if (v8)
          {
LABEL_8:
            if (objc_msgSend(v14, "isOwnerUser"))
              objc_msgSend(v14, "removeResidentCapableDevice:", v8);
          }
          else
          {
            v24 = 0u;
            v25 = 0u;
            v22 = 0u;
            v23 = 0u;
            objc_msgSend(v14, "residentCapableDevices");
            v15 = (void *)objc_claimAutoreleasedReturnValue();
            v16 = objc_msgSend(v15, "countByEnumeratingWithState:objects:count:", &v22, v30, 16);
            if (v16)
            {
              v17 = v16;
              v18 = *(_QWORD *)v23;
LABEL_12:
              v19 = 0;
              while (1)
              {
                if (*(_QWORD *)v23 != v18)
                  objc_enumerationMutation(v15);
                v20 = *(void **)(*((_QWORD *)&v22 + 1) + 8 * v19);
                if ((objc_msgSend(v20, "isCurrentDevice") & 1) != 0)
                  break;
                if (v17 == ++v19)
                {
                  v17 = objc_msgSend(v15, "countByEnumeratingWithState:objects:count:", &v22, v30, 16);
                  if (v17)
                    goto LABEL_12;
                  goto LABEL_18;
                }
              }
              v8 = v20;

              if (v8)
                goto LABEL_8;
            }
            else
            {
LABEL_18:

              v8 = 0;
            }
          }
        }
        v11 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v26, v31, 16);
      }
      while (v11);
    }

    v4 = v21;
  }

}

- (void)_handleResolveAccount:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  HMDHomeManager *v9;
  NSObject *v10;
  void *v11;
  void *v12;
  void (**v13)(_QWORD, _QWORD, _QWORD);
  void *v14;
  HMDHomeManager *v15;
  NSObject *v16;
  void *v17;
  void *v18;
  void (**v19)(_QWORD, _QWORD, _QWORD);
  _QWORD v20[4];
  id v21;
  id v22;
  _BYTE location[12];
  __int16 v24;
  void *v25;
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  v4 = a3;
  objc_msgSend(v4, "stringForKey:", *MEMORY[0x24BDD5EC0]);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  if (v5)
  {
    +[HMDAccountHandle accountHandleForDestination:](HMDAccountHandle, "accountHandleForDestination:", v5);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    if (v6)
    {
      objc_initWeak((id *)location, self);
      +[HMDAccountRegistry sharedRegistry](HMDAccountRegistry, "sharedRegistry");
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      v20[0] = MEMORY[0x24BDAC760];
      v20[1] = 3221225472;
      v20[2] = __40__HMDHomeManager__handleResolveAccount___block_invoke;
      v20[3] = &unk_24E796D28;
      objc_copyWeak(&v22, (id *)location);
      v21 = v4;
      objc_msgSend(v7, "_resolveAccountForHandle:completionHandler:", v6, v20);

      objc_destroyWeak(&v22);
      objc_destroyWeak((id *)location);
    }
    else
    {
      v14 = (void *)MEMORY[0x227676638]();
      v15 = self;
      HMFGetOSLogHandle();
      v16 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)location = 138543618;
        *(_QWORD *)&location[4] = v17;
        v24 = 2112;
        v25 = v5;
        _os_log_impl(&dword_2218F0000, v16, OS_LOG_TYPE_ERROR, "%{public}@Invalid account handle: %@", location, 0x16u);

      }
      objc_autoreleasePoolPop(v14);
      objc_msgSend(v4, "responseHandler");
      v6 = (void *)objc_claimAutoreleasedReturnValue();

      if (v6)
      {
        objc_msgSend(MEMORY[0x24BDD1540], "hmErrorWithCode:", 19);
        v18 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v4, "responseHandler");
        v19 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
        ((void (**)(_QWORD, void *, _QWORD))v19)[2](v19, v18, 0);

        v6 = 0;
      }
    }
    goto LABEL_12;
  }
  v8 = (void *)MEMORY[0x227676638]();
  v9 = self;
  HMFGetOSLogHandle();
  v10 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
  {
    HMFGetLogIdentifier();
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)location = 138543362;
    *(_QWORD *)&location[4] = v11;
    _os_log_impl(&dword_2218F0000, v10, OS_LOG_TYPE_ERROR, "%{public}@Message is missing account handle", location, 0xCu);

  }
  objc_autoreleasePoolPop(v8);
  objc_msgSend(v4, "responseHandler");
  v12 = (void *)objc_claimAutoreleasedReturnValue();

  if (v12)
  {
    objc_msgSend(MEMORY[0x24BDD1540], "hmErrorWithCode:", 3);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "responseHandler");
    v13 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
    ((void (**)(_QWORD, void *, _QWORD))v13)[2](v13, v6, 0);

LABEL_12:
  }

}

- (void)_handleRemoveAccount:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  void (**v7)(_QWORD, _QWORD, _QWORD);
  void *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  void *v16;
  char v17;
  void *v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  void *v24;
  id v25;
  int v26;
  void *v27;
  HMDHomeManager *v28;
  NSObject *v29;
  NSObject *v30;
  void *v31;
  void *v32;
  void (**v33)(_QWORD, _QWORD, _QWORD);
  void *v34;
  HMDHomeManager *v35;
  NSObject *v36;
  void *v37;
  void *v38;
  uint64_t v39;
  void *v40;
  HMDHomeManager *v41;
  NSObject *v42;
  void *v43;
  void (**v44)(_QWORD, _QWORD, _QWORD);
  void (**v45)(_QWORD, _QWORD, _QWORD);
  void *v46;
  HMDHomeManager *v47;
  NSObject *v48;
  void *v49;
  const char *v50;
  void *v51;
  void *v52;
  void *v53;
  void *v54;
  void *v55;
  void *v56;
  HMDHomeManager *v57;
  NSObject *v58;
  void *v59;
  void *v60;
  HMDHomeManager *v61;
  NSObject *v62;
  void *v63;
  void *v64;
  void *v65;
  void (**v66)(_QWORD, _QWORD, _QWORD);
  void *v67;
  char v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  uint8_t buf[4];
  void *v74;
  __int16 v75;
  void *v76;
  _BYTE v77[128];
  uint64_t v78;

  v78 = *MEMORY[0x24BDAC8D0];
  v4 = a3;
  objc_msgSend(v4, "messagePayload");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "valueForKey:", CFSTR("kIdentifierKey"));
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  if (v6)
  {
    objc_msgSend(v4, "uuidForKey:", CFSTR("kIdentifierKey"));
    v7 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
    if (v7)
    {
      v67 = v4;
      v71 = 0u;
      v72 = 0u;
      v69 = 0u;
      v70 = 0u;
      -[HMDHomeManager accountRegistry](self, "accountRegistry");
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v8, "accounts");
      v9 = (void *)objc_claimAutoreleasedReturnValue();

      v10 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v69, v77, 16);
      if (v10)
      {
        v11 = v10;
        v12 = *(_QWORD *)v70;
LABEL_5:
        v13 = 0;
        while (1)
        {
          if (*(_QWORD *)v70 != v12)
            objc_enumerationMutation(v9);
          v14 = *(void **)(*((_QWORD *)&v69 + 1) + 8 * v13);
          objc_msgSend(v14, "identifier");
          v15 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v15, "identifier");
          v16 = (void *)objc_claimAutoreleasedReturnValue();
          v17 = objc_msgSend(v16, "hmf_isEqualToUUID:", v7);

          if ((v17 & 1) != 0)
            break;
          if (v11 == ++v13)
          {
            v11 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v69, v77, 16);
            if (v11)
              goto LABEL_5;
            goto LABEL_11;
          }
        }
        v25 = v14;

        if (!v25)
          goto LABEL_24;
        v4 = v67;
        goto LABEL_19;
      }
LABEL_11:

LABEL_24:
      v34 = (void *)MEMORY[0x227676638]();
      v35 = self;
      HMFGetOSLogHandle();
      v36 = objc_claimAutoreleasedReturnValue();
      v4 = v67;
      if (os_log_type_enabled(v36, OS_LOG_TYPE_DEFAULT))
      {
        HMFGetLogIdentifier();
        v37 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        v74 = v37;
        v75 = 2112;
        v76 = v7;
        _os_log_impl(&dword_2218F0000, v36, OS_LOG_TYPE_DEFAULT, "%{public}@Failed to find matching account with identifier: %@", buf, 0x16u);

      }
      objc_autoreleasePoolPop(v34);
      objc_msgSend(v67, "responseHandler");
      v25 = (id)objc_claimAutoreleasedReturnValue();

      if (!v25)
        goto LABEL_45;
      v38 = (void *)MEMORY[0x24BDD1540];
      v39 = 2;
    }
    else
    {
      v40 = (void *)MEMORY[0x227676638]();
      v41 = self;
      HMFGetOSLogHandle();
      v42 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v42, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v43 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543362;
        v74 = v43;
        _os_log_impl(&dword_2218F0000, v42, OS_LOG_TYPE_ERROR, "%{public}@Message is missing account identifier", buf, 0xCu);

      }
      objc_autoreleasePoolPop(v40);
      objc_msgSend(v4, "responseHandler");
      v25 = (id)objc_claimAutoreleasedReturnValue();

      if (!v25)
        goto LABEL_45;
      v38 = (void *)MEMORY[0x24BDD1540];
      v39 = 3;
    }
    goto LABEL_32;
  }
  objc_msgSend(v4, "messagePayload");
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  v19 = *MEMORY[0x24BDD5EC0];
  objc_msgSend(v18, "valueForKey:", *MEMORY[0x24BDD5EC0]);
  v20 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v20)
  {
    v46 = (void *)MEMORY[0x227676638]();
    v47 = self;
    HMFGetOSLogHandle();
    v48 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v48, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v49 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v74 = v49;
      v50 = "%{public}@Message is missing account identifier";
LABEL_41:
      _os_log_impl(&dword_2218F0000, v48, OS_LOG_TYPE_ERROR, v50, buf, 0xCu);

    }
LABEL_42:

    objc_autoreleasePoolPop(v46);
    objc_msgSend(v4, "responseHandler");
    v55 = (void *)objc_claimAutoreleasedReturnValue();

    if (!v55)
    {
      v25 = 0;
      goto LABEL_46;
    }
    objc_msgSend(MEMORY[0x24BDD1540], "hmErrorWithCode:", 3);
    v7 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "responseHandler");
    v44 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
    v44[2](v44, v7, 0);
    goto LABEL_44;
  }
  objc_msgSend(v4, "stringForKey:", v19);
  v21 = objc_claimAutoreleasedReturnValue();
  if (!v21)
  {
    v46 = (void *)MEMORY[0x227676638]();
    v47 = self;
    HMFGetOSLogHandle();
    v48 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v48, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v49 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v74 = v49;
      v50 = "%{public}@Message is missing account handle";
      goto LABEL_41;
    }
    goto LABEL_42;
  }
  v7 = (void (**)(_QWORD, _QWORD, _QWORD))v21;
  +[HMDAccountHandle accountHandleForDestination:](HMDAccountHandle, "accountHandleForDestination:", v21);
  v22 = objc_claimAutoreleasedReturnValue();
  if (!v22)
  {
    v56 = (void *)MEMORY[0x227676638]();
    v57 = self;
    HMFGetOSLogHandle();
    v58 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v58, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v59 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v74 = v59;
      v75 = 2112;
      v76 = v7;
      _os_log_impl(&dword_2218F0000, v58, OS_LOG_TYPE_ERROR, "%{public}@Invalid account handle: %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v56);
    objc_msgSend(v4, "responseHandler");
    v25 = (id)objc_claimAutoreleasedReturnValue();

    if (!v25)
      goto LABEL_45;
    v38 = (void *)MEMORY[0x24BDD1540];
    v39 = 19;
LABEL_32:
    objc_msgSend(v38, "hmErrorWithCode:", v39);
    v44 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "responseHandler");
    v45 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
    v45[2](v45, v44, 0);

LABEL_44:
    v25 = 0;
    goto LABEL_45;
  }
  v23 = (void *)v22;
  v68 = 0;
  +[HMDAccountRegistry sharedRegistry](HMDAccountRegistry, "sharedRegistry");
  v24 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v24, "accountForHandle:exists:", v23, &v68);
  v25 = (id)objc_claimAutoreleasedReturnValue();

  if (!v68)
  {
    v60 = (void *)MEMORY[0x227676638]();
    v61 = self;
    HMFGetOSLogHandle();
    v62 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v62, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v63 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v74 = v63;
      v75 = 2112;
      v76 = v23;
      _os_log_impl(&dword_2218F0000, v62, OS_LOG_TYPE_ERROR, "%{public}@Failed to find account with handle: %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v60);
    objc_msgSend(v4, "responseHandler");
    v64 = (void *)objc_claimAutoreleasedReturnValue();

    if (v64)
    {
      objc_msgSend(MEMORY[0x24BDD1540], "hmErrorWithCode:", 2);
      v65 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "responseHandler");
      v66 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
      ((void (**)(_QWORD, void *, _QWORD))v66)[2](v66, v65, 0);

    }
    goto LABEL_45;
  }

LABEL_19:
  v26 = objc_msgSend(v25, "isCurrentAccount");
  v27 = (void *)MEMORY[0x227676638]();
  v28 = self;
  HMFGetOSLogHandle();
  v29 = objc_claimAutoreleasedReturnValue();
  v30 = v29;
  if (v26)
  {
    if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v31 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v74 = v31;
      _os_log_impl(&dword_2218F0000, v30, OS_LOG_TYPE_ERROR, "%{public}@Cannot remove current account", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v27);
    objc_msgSend(v4, "responseHandler");
    v32 = (void *)objc_claimAutoreleasedReturnValue();

    if (v32)
    {
      objc_msgSend(MEMORY[0x24BDD1540], "hmErrorWithCode:", 48);
      v7 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "responseHandler");
      v33 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
      v33[2](v33, v7, 0);

LABEL_45:
    }
  }
  else
  {
    if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
    {
      HMFGetLogIdentifier();
      v51 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v25, "shortDescription");
      v52 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v74 = v51;
      v75 = 2112;
      v76 = v52;
      _os_log_impl(&dword_2218F0000, v30, OS_LOG_TYPE_DEFAULT, "%{public}@Removing account: %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v27);
    -[HMDHomeManager remoteAccountManager](v28, "remoteAccountManager");
    v53 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v53, "removeAccount:", v25);

    objc_msgSend(v4, "responseHandler");
    v54 = (void *)objc_claimAutoreleasedReturnValue();

    if (v54)
    {
      objc_msgSend(v4, "responseHandler");
      v7 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
      v7[2](v7, 0, 0);
      goto LABEL_45;
    }
  }
LABEL_46:

}

- (void)_handlePing:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t i;
  void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  void *v18;
  char v19;
  id v20;
  void *v21;
  HMDHomeManager *v22;
  NSObject *v23;
  void *v24;
  void *v25;
  HMDHomeManager *v26;
  NSObject *v27;
  void *v28;
  void *v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  HMDHomeManager *v34;
  id obj;
  uint64_t v36;
  _QWORD v37[4];
  id v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  uint8_t buf[4];
  void *v48;
  __int16 v49;
  void *v50;
  _BYTE v51[128];
  _BYTE v52[128];
  uint64_t v53;

  v53 = *MEMORY[0x24BDAC8D0];
  v4 = a3;
  objc_msgSend(v4, "uuidForKey:", CFSTR("kIdentifierKey"));
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  if (v5)
  {
    v33 = v4;
    v34 = self;
    v45 = 0u;
    v46 = 0u;
    v43 = 0u;
    v44 = 0u;
    -[HMDHomeManager accountRegistry](self, "accountRegistry");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "accounts");
    v7 = (void *)objc_claimAutoreleasedReturnValue();

    obj = v7;
    v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v43, v52, 16);
    if (v8)
    {
      v9 = v8;
      v36 = *(_QWORD *)v44;
      while (2)
      {
        for (i = 0; i != v9; ++i)
        {
          if (*(_QWORD *)v44 != v36)
            objc_enumerationMutation(obj);
          v11 = *(void **)(*((_QWORD *)&v43 + 1) + 8 * i);
          v39 = 0u;
          v40 = 0u;
          v41 = 0u;
          v42 = 0u;
          objc_msgSend(v11, "devices");
          v12 = (void *)objc_claimAutoreleasedReturnValue();
          v13 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v39, v51, 16);
          if (v13)
          {
            v14 = v13;
            v15 = *(_QWORD *)v40;
LABEL_9:
            v16 = 0;
            while (1)
            {
              if (*(_QWORD *)v40 != v15)
                objc_enumerationMutation(v12);
              v17 = *(void **)(*((_QWORD *)&v39 + 1) + 8 * v16);
              objc_msgSend(v17, "identifier");
              v18 = (void *)objc_claimAutoreleasedReturnValue();
              v19 = objc_msgSend(v18, "isEqual:", v5);

              if ((v19 & 1) != 0)
                break;
              if (v14 == ++v16)
              {
                v14 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v39, v51, 16);
                if (v14)
                  goto LABEL_9;
                goto LABEL_15;
              }
            }
            v20 = v17;

            if (!v20)
              continue;

            v4 = v33;
            if (objc_msgSend(v33, "BOOLForKey:", *MEMORY[0x24BDD6050]))
            {
              +[HMDSecureRemoteMessageTransport defaultTransport](HMDSecureRemoteMessageTransport, "defaultTransport");
              v29 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v29, "deviceMonitor");
              v30 = (void *)objc_claimAutoreleasedReturnValue();

              objc_msgSend(v30, "startMonitoringDevice:withInitialReachability:forClient:", v20, 0, v34);
            }
            v31 = objc_msgSend(v33, "BOOLForKey:", *MEMORY[0x24BDD6110]);
            v32 = objc_msgSend(v33, "BOOLForKey:", *MEMORY[0x24BDD6038]);
            v37[0] = MEMORY[0x24BDAC760];
            v37[1] = 3221225472;
            v37[2] = __30__HMDHomeManager__handlePing___block_invoke;
            v37[3] = &unk_24E79BD80;
            v38 = v33;
            -[HMDHomeManager pingDevice:secure:restrictToLocalNetwork:completionHandler:](v34, "pingDevice:secure:restrictToLocalNetwork:completionHandler:", v20, v31, v32, v37);

            goto LABEL_29;
          }
LABEL_15:

        }
        v9 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v43, v52, 16);
        if (v9)
          continue;
        break;
      }
    }

    v21 = (void *)MEMORY[0x227676638]();
    v22 = v34;
    HMFGetOSLogHandle();
    v23 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v24 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v48 = v24;
      v49 = 2112;
      v50 = v5;
      _os_log_impl(&dword_2218F0000, v23, OS_LOG_TYPE_ERROR, "%{public}@Failed to find device with identifier: %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v21);
    objc_msgSend(MEMORY[0x24BDD1540], "hmErrorWithCode:", 2);
    v20 = (id)objc_claimAutoreleasedReturnValue();
    v4 = v33;
  }
  else
  {
    v25 = (void *)MEMORY[0x227676638]();
    v26 = self;
    HMFGetOSLogHandle();
    v27 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v28 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v48 = v28;
      _os_log_impl(&dword_2218F0000, v27, OS_LOG_TYPE_ERROR, "%{public}@Message is missing device identifier", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v25);
    objc_msgSend(MEMORY[0x24BDD1540], "hmErrorWithCode:", 20);
    v20 = (id)objc_claimAutoreleasedReturnValue();
  }
  objc_msgSend(v4, "respondWithError:", v20);
LABEL_29:

}

- (void)pingDevice:(id)a3 secure:(BOOL)a4 restrictToLocalNetwork:(BOOL)a5 completionHandler:(id)a6
{
  _BOOL4 v7;
  id v10;
  id v11;
  HMDRemoteDeviceMessageDestination *v12;
  void *v13;
  HMDRemoteDeviceMessageDestination *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  void *v19;
  void *v20;
  uint64_t v21;
  void *v22;
  id v23;
  void *v24;
  _QWORD v25[4];
  id v26;
  id v27;
  id location;

  v7 = a5;
  v10 = a3;
  v11 = a6;
  v12 = [HMDRemoteDeviceMessageDestination alloc];
  -[HMDHomeManager uuid](self, "uuid");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  v14 = -[HMDRemoteDeviceMessageDestination initWithTarget:device:](v12, "initWithTarget:device:", v13, v10);

  if (a4)
  {
    if (v7)
      v15 = 8;
    else
      v15 = -1;
    +[HMDRemoteMessage secureMessageWithName:qualityOfService:destination:messagePayload:restriction:](HMDRemoteMessage, "secureMessageWithName:qualityOfService:destination:messagePayload:restriction:", CFSTR("kPingInternalRequestKey"), 25, v14, MEMORY[0x24BDBD1B8], v15);
    v16 = objc_claimAutoreleasedReturnValue();
  }
  else
  {
    objc_msgSend(v10, "globalHandles");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    v18 = objc_msgSend(v17, "count");

    if (v18 == 1)
    {
      objc_msgSend(v10, "globalHandles");
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v19, "firstObject");
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      -[HMDRemoteDeviceMessageDestination setPreferredHandle:](v14, "setPreferredHandle:", v20);

    }
    if (v7)
      v21 = 8;
    else
      v21 = -1;
    +[HMDRemoteMessage messageWithName:qualityOfService:destination:messagePayload:restriction:](HMDRemoteMessage, "messageWithName:qualityOfService:destination:messagePayload:restriction:", CFSTR("kPingInternalRequestKey"), 25, v14, MEMORY[0x24BDBD1B8], v21);
    v16 = objc_claimAutoreleasedReturnValue();
  }
  v22 = (void *)v16;
  objc_initWeak(&location, self);
  v25[0] = MEMORY[0x24BDAC760];
  v25[1] = 3221225472;
  v25[2] = __77__HMDHomeManager_pingDevice_secure_restrictToLocalNetwork_completionHandler___block_invoke;
  v25[3] = &unk_24E79AFA0;
  objc_copyWeak(&v27, &location);
  v23 = v11;
  v26 = v23;
  objc_msgSend(v22, "setResponseHandler:", v25);
  -[HMDHomeManager messageDispatcher](self, "messageDispatcher");
  v24 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v24, "sendMessage:completionHandler:", v22, 0);

  objc_destroyWeak(&v27);
  objc_destroyWeak(&location);

}

- (void)setSetupStartTimestamp:(double)a3
{
  void *v5;
  HMDHomeManager *v6;
  NSObject *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  int v12;
  void *v13;
  __int16 v14;
  double v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  v5 = (void *)MEMORY[0x227676638](self, a2);
  v6 = self;
  HMFGetOSLogHandle();
  v7 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v12 = 138543618;
    v13 = v8;
    v14 = 2048;
    v15 = a3;
    _os_log_impl(&dword_2218F0000, v7, OS_LOG_TYPE_INFO, "%{public}@Saving current accessory setup timestamp: %f", (uint8_t *)&v12, 0x16u);

  }
  objc_autoreleasePoolPop(v5);
  -[HMDHomeManager userDefaults](v6, "userDefaults");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = v9;
  if (fabs(a3) >= 2.22044605e-16)
  {
    objc_msgSend(MEMORY[0x24BDD16E0], "numberWithDouble:", a3);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "setObject:forKey:", v11, CFSTR("HMDCurrentAccessorySetupStartUptimeKey"));

  }
  else
  {
    objc_msgSend(v9, "removeObjectForKey:", CFSTR("HMDCurrentAccessorySetupStartUptimeKey"));

    -[HMDHomeManager setSetupEndTimestamp:](v6, "setSetupEndTimestamp:", 0.0);
  }
  os_unfair_lock_lock_with_options();
  v6->_setupStartTimestamp = a3;
  os_unfair_lock_unlock(&v6->_lock);
}

- (double)setupStartTimestamp
{
  os_unfair_lock_s *p_lock;
  double setupStartTimestamp;

  p_lock = &self->_lock;
  os_unfair_lock_lock_with_options();
  setupStartTimestamp = self->_setupStartTimestamp;
  os_unfair_lock_unlock(p_lock);
  return setupStartTimestamp;
}

- (void)setSetupEndTimestamp:(double)a3
{
  void *v5;
  HMDHomeManager *v6;
  NSObject *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  int v12;
  void *v13;
  __int16 v14;
  double v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  v5 = (void *)MEMORY[0x227676638](self, a2);
  v6 = self;
  HMFGetOSLogHandle();
  v7 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v12 = 138543618;
    v13 = v8;
    v14 = 2048;
    v15 = a3;
    _os_log_impl(&dword_2218F0000, v7, OS_LOG_TYPE_INFO, "%{public}@Saving current accessory setup end timestamp: %f", (uint8_t *)&v12, 0x16u);

  }
  objc_autoreleasePoolPop(v5);
  -[HMDHomeManager userDefaults](v6, "userDefaults");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = v9;
  if (fabs(a3) >= 2.22044605e-16)
  {
    objc_msgSend(MEMORY[0x24BDD16E0], "numberWithDouble:", a3);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "setObject:forKey:", v11, CFSTR("HMDCurrentAccessorySetupEndUptimeKey"));

  }
  else
  {
    objc_msgSend(v9, "removeObjectForKey:", CFSTR("HMDCurrentAccessorySetupEndUptimeKey"));
  }

  os_unfair_lock_lock_with_options();
  v6->_setupEndTimestamp = a3;
  os_unfair_lock_unlock(&v6->_lock);
}

- (double)setupEndTimestamp
{
  os_unfair_lock_s *p_lock;
  double setupEndTimestamp;

  p_lock = &self->_lock;
  os_unfair_lock_lock_with_options();
  setupEndTimestamp = self->_setupEndTimestamp;
  os_unfair_lock_unlock(p_lock);
  return setupEndTimestamp;
}

- (void)removeAllHomeKitPairingIdentitiesAfterSignOut
{
  id v3;

  objc_msgSend(MEMORY[0x24BE3F1B0], "messageWithName:messagePayload:", CFSTR("removeAllHomeKitPairingIdentitiesDueToSignOut"), MEMORY[0x24BDBD1B8]);
  v3 = (id)objc_claimAutoreleasedReturnValue();
  -[HMDHomeManager _handleRemoveAllHomeKitPairingIdentities:](self, "_handleRemoveAllHomeKitPairingIdentities:", v3);

}

- (void)_handleRemoveAllHomeKitPairingIdentities:(id)a3
{
  id v4;
  void *v5;
  HMDHomeManager *v6;
  NSObject *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  HMDHomeManager *v13;
  NSObject *v14;
  void *v15;
  void *v16;
  HMDHomeManager *v17;
  NSObject *v18;
  void *v19;
  void *v20;
  uint64_t v21;
  void *v22;
  HMDHomeManager *v23;
  NSObject *v24;
  void *v25;
  id v26;
  uint64_t v27;
  void *v28;
  HMDHomeManager *v29;
  NSObject *v30;
  void *v31;
  void *v32;
  id v33;
  uint8_t buf[4];
  void *v35;
  __int16 v36;
  id v37;
  uint64_t v38;

  v38 = *MEMORY[0x24BDAC8D0];
  v4 = a3;
  v5 = (void *)MEMORY[0x227676638]();
  v6 = self;
  HMFGetOSLogHandle();
  v7 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543618;
    v35 = v8;
    v36 = 2112;
    v37 = v4;
    _os_log_impl(&dword_2218F0000, v7, OS_LOG_TYPE_INFO, "%{public}@Going to delete all the HomeKit pairing identities before TTSU: %@", buf, 0x16u);

  }
  objc_autoreleasePoolPop(v5);
  objc_msgSend(MEMORY[0x24BE1BC08], "systemStore");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v9)
  {
    v22 = (void *)MEMORY[0x227676638]();
    v23 = v6;
    HMFGetOSLogHandle();
    v24 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v25 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v35 = v25;
      _os_log_impl(&dword_2218F0000, v24, OS_LOG_TYPE_ERROR, "%{public}@Could not find key chain store instance.", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v22);
    v20 = (void *)MEMORY[0x24BDD1540];
    v21 = 20;
    goto LABEL_13;
  }
  objc_msgSend(MEMORY[0x24BDB4398], "defaultStore");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "aa_primaryAppleAccount");
  v11 = (void *)objc_claimAutoreleasedReturnValue();

  if (v11)
  {
    v12 = (void *)MEMORY[0x227676638]();
    v13 = v6;
    HMFGetOSLogHandle();
    v14 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v35 = v15;
      _os_log_impl(&dword_2218F0000, v14, OS_LOG_TYPE_ERROR, "%{public}@Cannot remove all the keys as the primary account is logged in.", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v12);
    v16 = (void *)MEMORY[0x227676638]();
    v17 = v13;
    HMFGetOSLogHandle();
    v18 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v18, OS_LOG_TYPE_FAULT))
    {
      HMFGetLogIdentifier();
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v35 = v19;
      _os_log_impl(&dword_2218F0000, v18, OS_LOG_TYPE_FAULT, "%{public}@Remove All HomeKit Pairing Identity was called with a logged in Account : 🤯", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v16);
    v20 = (void *)MEMORY[0x24BDD1540];
    v21 = 10;
LABEL_13:
    objc_msgSend(v20, "hmErrorWithCode:", v21);
    v26 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "respondWithError:", v26);
    goto LABEL_14;
  }
  v33 = 0;
  v27 = objc_msgSend(v9, "removeControllerKeyPairLeaveTombstone:error:", 0, &v33);
  v26 = v33;
  if ((v27 & 1) != 0)
  {
    objc_msgSend(v4, "respondWithSuccess");
  }
  else
  {
    v28 = (void *)MEMORY[0x227676638]();
    v29 = v6;
    HMFGetOSLogHandle();
    v30 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v31 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v35 = v31;
      v36 = 2112;
      v37 = v26;
      _os_log_impl(&dword_2218F0000, v30, OS_LOG_TYPE_ERROR, "%{public}@Failed to remove all the HomeKit pairing identities : %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v28);
    objc_msgSend(MEMORY[0x24BDD1540], "hmErrorWithCode:", -1);
    v32 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "respondWithError:", v32);

  }
LABEL_14:

}

- (void)_handleDeviceSetupSessionClose:(id)a3
{
  id v4;
  void *v5;
  HMDHomeManager *v6;
  NSObject *v7;
  void *v8;
  void *v9;
  void *v10;
  HMDHomeManager *v11;
  NSObject *v12;
  id v13;
  void *v14;
  void *v15;
  id v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  HMDHomeManager *v25;
  NSObject *v26;
  id v27;
  void *v28;
  uint64_t v29;
  void *v30;
  HMDHomeManager *v31;
  NSObject *v32;
  void *v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  void (*v37)(uint64_t, void *, uint64_t, _BYTE *);
  void *v38;
  id v39;
  HMDHomeManager *v40;
  id v41;
  __int128 *p_buf;
  uint8_t v43[4];
  id v44;
  __int16 v45;
  id v46;
  __int16 v47;
  uint64_t v48;
  __int128 buf;
  uint64_t v50;
  char v51;
  uint64_t v52;

  v52 = *MEMORY[0x24BDAC8D0];
  v4 = a3;
  v5 = (void *)MEMORY[0x227676638]();
  v6 = self;
  HMFGetOSLogHandle();
  v7 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    HMFGetLogIdentifier();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    LODWORD(buf) = 138543362;
    *(_QWORD *)((char *)&buf + 4) = v8;
    _os_log_impl(&dword_2218F0000, v7, OS_LOG_TYPE_DEFAULT, "%{public}@Received HMDHomeManager close session message", (uint8_t *)&buf, 0xCu);

  }
  objc_autoreleasePoolPop(v5);
  objc_msgSend(v4, "uuidForKey:", *MEMORY[0x24BDD5B78]);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  if (v9)
  {
    *(_QWORD *)&buf = 0;
    *((_QWORD *)&buf + 1) = &buf;
    v50 = 0x2020000000;
    v51 = 0;
    v10 = (void *)MEMORY[0x227676638]();
    v11 = v6;
    HMFGetOSLogHandle();
    v12 = (id)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v13 = (id)objc_claimAutoreleasedReturnValue();
      -[HMDHomeManager deviceSetupSessions](v11, "deviceSetupSessions");
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)v43 = 138543874;
      v44 = v13;
      v45 = 2112;
      v46 = v9;
      v47 = 2048;
      v48 = objc_msgSend(v14, "count");
      _os_log_impl(&dword_2218F0000, v12, OS_LOG_TYPE_INFO, "%{public}@HMDHomeManager close session %@. Total current sessions %lu", v43, 0x20u);

    }
    objc_autoreleasePoolPop(v10);
    -[HMDHomeManager deviceSetupSessions](v11, "deviceSetupSessions");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    v35 = MEMORY[0x24BDAC760];
    v36 = 3221225472;
    v37 = __49__HMDHomeManager__handleDeviceSetupSessionClose___block_invoke;
    v38 = &unk_24E796D50;
    v16 = v9;
    v39 = v16;
    v40 = v11;
    v17 = v4;
    v41 = v17;
    p_buf = &buf;
    objc_msgSend(v15, "hmf_enumerateWithAutoreleasePoolUsingBlock:", &v35);

    if (!*(_BYTE *)(*((_QWORD *)&buf + 1) + 24))
    {
      v24 = (void *)MEMORY[0x227676638](v18, v19, v20, v21, v22, v23);
      v25 = v11;
      HMFGetOSLogHandle();
      v26 = (id)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
      {
        HMFGetLogIdentifier();
        v27 = (id)objc_claimAutoreleasedReturnValue();
        -[HMDHomeManager deviceSetupSessions](v25, "deviceSetupSessions", v35, v36, v37, v38, v39, v40);
        v28 = (void *)objc_claimAutoreleasedReturnValue();
        v29 = objc_msgSend(v28, "count");
        *(_DWORD *)v43 = 138543874;
        v44 = v27;
        v45 = 2112;
        v46 = v16;
        v47 = 2048;
        v48 = v29;
        _os_log_impl(&dword_2218F0000, v26, OS_LOG_TYPE_DEFAULT, "%{public}@Didn't close session %@ due to session not found (already closed?). Total current sessions %lu", v43, 0x20u);

      }
      objc_autoreleasePoolPop(v24);
      objc_msgSend(v17, "respondWithSuccess");
    }

    _Block_object_dispose(&buf, 8);
  }
  else
  {
    v30 = (void *)MEMORY[0x227676638]();
    v31 = v6;
    HMFGetOSLogHandle();
    v32 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v33 = (void *)objc_claimAutoreleasedReturnValue();
      LODWORD(buf) = 138543362;
      *(_QWORD *)((char *)&buf + 4) = v33;
      _os_log_impl(&dword_2218F0000, v32, OS_LOG_TYPE_ERROR, "%{public}@Received close session message without UUID. Respond with error.", (uint8_t *)&buf, 0xCu);

    }
    objc_autoreleasePoolPop(v30);
    objc_msgSend(MEMORY[0x24BDD1540], "hmErrorWithCode:", 3);
    v34 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "respondWithError:", v34);

  }
}

- (void)_handleDeviceSetupSessionOpen:(id)a3
{
  id v4;
  uint64_t v5;
  BOOL v6;
  void *v7;
  HMDHomeManager *v8;
  NSObject *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  HMDHomeManager *v14;
  NSObject *v15;
  void *v17;
  uint64_t v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  uint64_t v24;
  void *v25;
  const __CFString *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  id v31;
  void *v32;
  uint64_t v33;
  HMDDeviceSetupSession *v34;
  void *v35;
  void *v36;
  void *v37;
  HMDHomeManager *v38;
  NSObject *v39;
  void *v40;
  void *v41;
  void *v42;
  HMDHomeManager *v43;
  NSObject *v44;
  void *v45;
  void *v46;
  void *v47;
  _QWORD v48[3];
  _QWORD v49[3];
  uint8_t buf[4];
  void *v51;
  __int16 v52;
  uint64_t v53;
  uint64_t v54;

  v54 = *MEMORY[0x24BDAC8D0];
  v4 = a3;
  objc_msgSend(v4, "uuidForKey:", *MEMORY[0x24BDD5B78]);
  v46 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "numberForKey:", *MEMORY[0x24BDD5B90]);
  v5 = objc_claimAutoreleasedReturnValue();
  v47 = (void *)v5;
  if (v46)
    v6 = v5 == 0;
  else
    v6 = 1;
  if (v6)
  {
    v7 = (void *)MEMORY[0x227676638]();
    v8 = self;
    HMFGetOSLogHandle();
    v9 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      HMFGetLogIdentifier();
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v51 = v10;
      _os_log_impl(&dword_2218F0000, v9, OS_LOG_TYPE_DEFAULT, "%{public}@Invalid message parameters", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v7);
    objc_msgSend(MEMORY[0x24BDD1540], "hmErrorWithCode:", 3);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "respondWithError:", v11);
  }
  else
  {
    objc_msgSend(v4, "activity");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHomeManager setSetupActivity:](self, "setSetupActivity:", v12);

    v13 = (void *)MEMORY[0x227676638]();
    v14 = self;
    HMFGetOSLogHandle();
    v15 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      HMFGetLogIdentifier();
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      -[HMDHomeManager setupStartTimestamp](v14, "setupStartTimestamp");
      *(_DWORD *)buf = 138543618;
      v51 = v17;
      v52 = 2048;
      v53 = v18;
      _os_log_impl(&dword_2218F0000, v15, OS_LOG_TYPE_DEFAULT, "%{public}@Noting setup start system time: %f", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v13);
    -[HMDHomeManager setupActivity](v14, "setupActivity");
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v19, "begin");

    -[HMDHomeManager appleAccountManager](v14, "appleAccountManager");
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v20, "device");
    v11 = (void *)objc_claimAutoreleasedReturnValue();

    -[HMDHomeManager setupActivity](v14, "setupActivity");
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    v48[0] = CFSTR("currentHomeUUID");
    -[HMDHomeManager currentHomeUUID](v14, "currentHomeUUID");
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    HMDailyRotatedUUID();
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v23, "UUIDString");
    v24 = objc_claimAutoreleasedReturnValue();
    v25 = (void *)v24;
    v26 = CFSTR("nil current home UUID");
    if (v24)
      v26 = (const __CFString *)v24;
    v49[0] = v26;
    v48[1] = CFSTR("productClass");
    v27 = (void *)MEMORY[0x24BDD16E0];
    objc_msgSend(v11, "productInfo");
    v28 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v27, "numberWithInteger:", objc_msgSend(v28, "productClass"));
    v29 = (void *)objc_claimAutoreleasedReturnValue();
    v49[1] = v29;
    v48[2] = CFSTR("productType");
    objc_msgSend(MEMORY[0x24BDD16E0], "numberWithLong:", MGGetProductType());
    v30 = (void *)objc_claimAutoreleasedReturnValue();
    v49[2] = v30;
    v31 = (id)objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v49, v48, 3);

    -[HMDHomeManager setupActivity](v14, "setupActivity");
    v32 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v32, "markWithReason:", CFSTR("HMDHomeManager._handleDeviceSetupSessionOpen"));

    v33 = objc_msgSend(v47, "integerValue");
    if (+[HMDDeviceSetupSession isRoleSupported:](HMDDeviceSetupSession, "isRoleSupported:", v33))
    {
      v34 = -[HMDDeviceSetupSession initWithIdentifier:role:homeManager:]([HMDDeviceSetupSession alloc], "initWithIdentifier:role:homeManager:", v46, v33, v14);
      -[HMDDeviceSetupSession setupTrackingInfo](v34, "setupTrackingInfo");
      v35 = (void *)objc_claimAutoreleasedReturnValue();
      -[HMDHomeManager setSetupStartTimestamp:](v14, "setSetupStartTimestamp:", (double)(unint64_t)objc_msgSend(v35, "startTime"));

      -[HMDDeviceSetupSession setDelegate:](v34, "setDelegate:", v14);
      os_unfair_lock_lock_with_options();
      -[HMDHomeManager deviceSetupSessions](v14, "deviceSetupSessions");
      v36 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v36, "addObject:", v34);

      os_unfair_lock_unlock(&v14->_lock);
      v37 = (void *)MEMORY[0x227676638]();
      v38 = v14;
      HMFGetOSLogHandle();
      v39 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v39, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v40 = (void *)objc_claimAutoreleasedReturnValue();
        -[HMDDeviceSetupSession identifier](v34, "identifier");
        v41 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        v51 = v40;
        v52 = 2112;
        v53 = (uint64_t)v41;
        _os_log_impl(&dword_2218F0000, v39, OS_LOG_TYPE_INFO, "%{public}@New TTSU session created: [%@]", buf, 0x16u);

      }
      objc_autoreleasePoolPop(v37);
      objc_msgSend(v4, "respondWithSuccess");
    }
    else
    {
      v42 = (void *)MEMORY[0x227676638]();
      v43 = v14;
      HMFGetOSLogHandle();
      v44 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v44, OS_LOG_TYPE_DEFAULT))
      {
        HMFGetLogIdentifier();
        v45 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        v51 = v45;
        v52 = 2048;
        v53 = v33;
        _os_log_impl(&dword_2218F0000, v44, OS_LOG_TYPE_DEFAULT, "%{public}@Unsupported role: %tu", buf, 0x16u);

      }
      objc_autoreleasePoolPop(v42);
      objc_msgSend(MEMORY[0x24BDD1540], "hmErrorWithCode:", 48);
      v34 = (HMDDeviceSetupSession *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "respondWithError:", v34);
    }

  }
}

- (BOOL)areThereAnyTTSUSessionsOngoing
{
  os_unfair_lock_s *p_lock;
  uint64_t v4;
  void *v5;
  HMDHomeManager *v6;
  NSObject *v7;
  id v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  char v13;
  int v15;
  id v16;
  __int16 v17;
  void *v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  p_lock = &self->_lock;
  v4 = os_unfair_lock_lock_with_options();
  v5 = (void *)MEMORY[0x227676638](v4);
  v6 = self;
  HMFGetOSLogHandle();
  v7 = (id)objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v8 = (id)objc_claimAutoreleasedReturnValue();
    v9 = (void *)MEMORY[0x24BDD16E0];
    -[HMDHomeManager deviceSetupSessions](v6, "deviceSetupSessions");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "numberWithUnsignedInteger:", objc_msgSend(v10, "count"));
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v15 = 138543618;
    v16 = v8;
    v17 = 2112;
    v18 = v11;
    _os_log_impl(&dword_2218F0000, v7, OS_LOG_TYPE_INFO, "%{public}@Ongoing TTSU sessions : %@", (uint8_t *)&v15, 0x16u);

  }
  objc_autoreleasePoolPop(v5);
  -[HMDHomeManager deviceSetupSessions](v6, "deviceSetupSessions");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  v13 = objc_msgSend(v12, "hmf_isEmpty");

  os_unfair_lock_unlock(p_lock);
  return v13 ^ 1;
}

- (void)_notifyClientsOfUpdatedStatus
{
  NSObject *v3;
  void *v4;
  id v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  HMDHomeManager *v11;
  NSObject *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  int v17;
  void *v18;
  __int16 v19;
  void *v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  -[HMDHomeManager workQueue](self, "workQueue");
  v3 = objc_claimAutoreleasedReturnValue();
  dispatch_assert_queue_V2(v3);

  -[HMDHomeManager uuid](self, "uuid");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHomeManager _updateGenerationCounterWithReason:sourceUUID:shouldNotifyClients:](self, "_updateGenerationCounterWithReason:sourceUUID:shouldNotifyClients:", CFSTR("DataSyncStatusUpdate"), v4, 0);

  v5 = objc_alloc(MEMORY[0x24BE3F1B0]);
  v6 = *MEMORY[0x24BDD6150];
  -[HMDHomeManager messageDestination](self, "messageDestination");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHomeManager _statusPayloadForMessage:](self, "_statusPayloadForMessage:", 0);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = (void *)objc_msgSend(v5, "initWithName:destination:payload:", v6, v7, v8);

  v10 = (void *)MEMORY[0x227676638]();
  v11 = self;
  HMFGetOSLogHandle();
  v12 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
  {
    HMFGetLogIdentifier();
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "messagePayload");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    v17 = 138543618;
    v18 = v13;
    v19 = 2112;
    v20 = v14;
    _os_log_impl(&dword_2218F0000, v12, OS_LOG_TYPE_DEFAULT, "%{public}@Notifying clients of updated status message payload: %@", (uint8_t *)&v17, 0x16u);

  }
  objc_autoreleasePoolPop(v10);
  -[HMDHomeManager messageDispatcher](v11, "messageDispatcher");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v15, "sendMessage:", v9);

  -[HMDHomeManager notificationCenter](v11, "notificationCenter");
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v16, "postNotificationName:object:", CFSTR("HMDHomeManagerDataSyncInProgressChangedNotification"), v11);

}

- (unint64_t)statusForMessage:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  int v7;
  void *v8;
  void *v9;
  void *v10;
  HMDHomeManager *v11;
  NSObject *v12;
  void *v13;
  const char *v14;
  uint64_t v15;
  char v16;
  void *v17;
  HMDHomeManager *v18;
  NSObject *v19;
  _BOOL4 v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  HMDHomeManager *v25;
  NSObject *v26;
  void *v27;
  void *v28;
  HMDHomeManager *v29;
  NSObject *v30;
  void *v31;
  void *v32;
  void *v33;
  unint64_t v34;
  char v36;
  uint64_t v37;
  uint8_t buf[4];
  void *v39;
  __int16 v40;
  void *v41;
  __int16 v42;
  void *v43;
  uint64_t v44;

  v44 = *MEMORY[0x24BDAC8D0];
  v4 = a3;
  v37 = 0;
  -[HMDHomeManager appleAccountManager](self, "appleAccountManager");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  +[HMDDeviceCapabilities deviceCapabilities](HMDDeviceCapabilities, "deviceCapabilities");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = objc_msgSend(v6, "supportsDeviceSetup");

  if (v7)
  {
    objc_msgSend(v5, "accountContext");
    v8 = (void *)objc_claimAutoreleasedReturnValue();

    if (v8)
    {
      objc_msgSend(v5, "device");
      v9 = (void *)objc_claimAutoreleasedReturnValue();

      if (v9)
        goto LABEL_10;
      v10 = (void *)MEMORY[0x227676638]();
      v11 = self;
      HMFGetOSLogHandle();
      v12 = objc_claimAutoreleasedReturnValue();
      if (!os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
        goto LABEL_9;
      HMFGetLogIdentifier();
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v39 = v13;
      v14 = "%{public}@Device setup required, haven't resolved current device yet";
    }
    else
    {
      v10 = (void *)MEMORY[0x227676638]();
      v11 = self;
      HMFGetOSLogHandle();
      v12 = objc_claimAutoreleasedReturnValue();
      if (!os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
      {
LABEL_9:

        objc_autoreleasePoolPop(v10);
        v37 = 16;
        goto LABEL_10;
      }
      HMFGetLogIdentifier();
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v39 = v13;
      v14 = "%{public}@Device setup required, no active account";
    }
    _os_log_impl(&dword_2218F0000, v12, OS_LOG_TYPE_INFO, v14, buf, 0xCu);

    goto LABEL_9;
  }
LABEL_10:
  v36 = 0;
  v15 = -[HMDHomeManager determineDataSyncSateForHH2:homeManagerDataSyncState:homeManagerStatus:](self, "determineDataSyncSateForHH2:homeManagerDataSyncState:homeManagerStatus:", &v36, 0, &v37);
  if (v36)
  {
    v16 = v37;
    v17 = (void *)MEMORY[0x227676638](v15);
    v18 = self;
    HMFGetOSLogHandle();
    v19 = objc_claimAutoreleasedReturnValue();
    v20 = os_log_type_enabled(v19, OS_LOG_TYPE_INFO);
    if ((v16 & 0x10) != 0)
    {
      if (v20)
      {
        HMFGetLogIdentifier();
        v22 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543362;
        v39 = v22;
        _os_log_impl(&dword_2218F0000, v19, OS_LOG_TYPE_INFO, "%{public}@Suppressing busy status while device setup required", buf, 0xCu);

      }
      objc_autoreleasePoolPop(v17);
    }
    else
    {
      if (v20)
      {
        HMFGetLogIdentifier();
        v21 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543362;
        v39 = v21;
        _os_log_impl(&dword_2218F0000, v19, OS_LOG_TYPE_INFO, "%{public}@Busy, data sync in progress", buf, 0xCu);

      }
      objc_autoreleasePoolPop(v17);
      v37 |= 1uLL;
    }
  }
  objc_msgSend(v5, "accountContext");
  v23 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v23)
  {
    v24 = (void *)MEMORY[0x227676638]();
    v25 = self;
    HMFGetOSLogHandle();
    v26 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v26, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v27 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v39 = v27;
      _os_log_impl(&dword_2218F0000, v26, OS_LOG_TYPE_INFO, "%{public}@No account", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v24);
    v37 |= 0x20uLL;
  }
  v28 = (void *)MEMORY[0x227676638]();
  v29 = self;
  HMFGetOSLogHandle();
  v30 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v30, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v31 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedInteger:", v37);
    v32 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "isLoggedInToPrimaryAccount");
    HMFBooleanToString();
    v33 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543874;
    v39 = v31;
    v40 = 2112;
    v41 = v32;
    v42 = 2112;
    v43 = v33;
    _os_log_impl(&dword_2218F0000, v30, OS_LOG_TYPE_INFO, "%{public}@status : %@, %@", buf, 0x20u);

  }
  objc_autoreleasePoolPop(v28);
  v34 = v37;

  return v34;
}

- (BOOL)dataSyncInProgressWithState:(unint64_t *)a3 withMessage:(id)a4
{
  return 0;
}

- (void)_checkForSelfRemoval
{
  void *v3;
  HMDHomeManager *v4;
  NSObject *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  id v10;
  _QWORD v11[4];
  id v12;
  HMDHomeManager *v13;
  uint8_t buf[4];
  void *v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  if (+[HMDDeviceCapabilities isAppleMediaAccessory](HMDDeviceCapabilities, "isAppleMediaAccessory"))
  {
    v3 = (void *)MEMORY[0x227676638]();
    v4 = self;
    HMFGetOSLogHandle();
    v5 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v15 = v6;
      _os_log_impl(&dword_2218F0000, v5, OS_LOG_TYPE_INFO, "%{public}@Checking for pending self removal", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v3);
    -[HMDHomeManager backingStore](v4, "backingStore");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "context");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "managedObjectContext");
    v9 = (void *)objc_claimAutoreleasedReturnValue();

    v11[0] = MEMORY[0x24BDAC760];
    v11[1] = 3221225472;
    v11[2] = __38__HMDHomeManager__checkForSelfRemoval__block_invoke;
    v11[3] = &unk_24E79C268;
    v12 = v9;
    v13 = v4;
    v10 = v9;
    objc_msgSend(v10, "performBlock:", v11);

  }
}

- (void)_handleAccessAllowedWhenLockedRequest:(id)a3
{
  id v4;
  void *v5;
  HMDHomeManager *v6;
  NSObject *v7;
  void *v8;
  uint64_t v9;
  void *v10;
  HMDHomeManager *v11;
  NSObject *v12;
  void *v13;
  void *v14;
  char v15;
  uint8_t buf[4];
  void *v17;
  __int16 v18;
  id v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  v4 = a3;
  v5 = (void *)MEMORY[0x227676638]();
  v6 = self;
  HMFGetOSLogHandle();
  v7 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543618;
    v17 = v8;
    v18 = 2112;
    v19 = v4;
    _os_log_impl(&dword_2218F0000, v7, OS_LOG_TYPE_INFO, "%{public}@Asked to update access allowed when locked : %@", buf, 0x16u);

  }
  objc_autoreleasePoolPop(v5);
  v15 = 0;
  v9 = objc_msgSend(v4, "BOOLForKey:keyPresent:", CFSTR("kAccessAllowedWhenLockedKey"), &v15);
  if (v15)
  {
    -[HMDHomeManager _saveAccessAllowedWhenLockedToLocalStore:message:](v6, "_saveAccessAllowedWhenLockedToLocalStore:message:", v9, v4);
  }
  else
  {
    v10 = (void *)MEMORY[0x227676638](v9);
    v11 = v6;
    HMFGetOSLogHandle();
    v12 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v17 = v13;
      _os_log_impl(&dword_2218F0000, v12, OS_LOG_TYPE_ERROR, "%{public}@Unable to find the key in the message", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v10);
    objc_msgSend(MEMORY[0x24BDD1540], "hmErrorWithCode:", 3);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "respondWithError:", v14);

  }
}

- (id)accessAllowedWhenLockedSettingFileName
{
  void *v2;
  id v3;
  void *v4;

  v2 = (void *)MEMORY[0x24BDD17C8];
  v3 = (id)hh1ToHH2PerDeviceMigrationDirectoryPath;
  objc_msgSend(v2, "stringWithFormat:", CFSTR("%@/AllowedAccessWhenLockedSetting.plist"), v3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  return v4;
}

- (void)notifySPIClientsAboutAccessAllowedWhenLocked:(BOOL)a3
{
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  HMDHomeManager *v10;
  NSObject *v11;
  void *v12;
  int v13;
  void *v14;
  __int16 v15;
  void *v16;
  const __CFString *v17;
  _QWORD v18[2];

  v18[1] = *MEMORY[0x24BDAC8D0];
  v17 = CFSTR("kAccessAllowedWhenLockedKey");
  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithBool:", a3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v18[0] = v4;
  objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v18, &v17, 1);
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(MEMORY[0x24BE3F1B0], "entitledMessageWithName:messagePayload:", *MEMORY[0x24BDD5E30], v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHomeManager messageDispatcher](self, "messageDispatcher");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHomeManager uuid](self, "uuid");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "sendMessage:target:", v6, v8);

  v9 = (void *)MEMORY[0x227676638]();
  v10 = self;
  HMFGetOSLogHandle();
  v11 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    v13 = 138543618;
    v14 = v12;
    v15 = 2112;
    v16 = v5;
    _os_log_impl(&dword_2218F0000, v11, OS_LOG_TYPE_INFO, "%{public}@Sending accessAllowedWhenLocked settings to all entitled clients : [%@]", (uint8_t *)&v13, 0x16u);

  }
  objc_autoreleasePoolPop(v9);

}

- (void)_saveAccessAllowedWhenLockedToLocalStore:(BOOL)a3 message:(id)a4
{
  id v6;
  void *v7;
  void *v8;
  void *v9;
  id v10;
  id v11;
  _QWORD v12[5];
  id v13;
  id v14;
  BOOL v15;

  v6 = a4;
  -[HMDHomeManager backingStore](self, "backingStore");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "context");
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v8, "managedObjectContext");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v12[0] = MEMORY[0x24BDAC760];
  v12[1] = 3221225472;
  v12[2] = __67__HMDHomeManager__saveAccessAllowedWhenLockedToLocalStore_message___block_invoke;
  v12[3] = &unk_24E796150;
  v15 = a3;
  v12[4] = self;
  v13 = v9;
  v14 = v6;
  v10 = v6;
  v11 = v9;
  objc_msgSend(v11, "performBlock:", v12);

}

- (void)_readAccessAllowedWhenLockedSettingFromLocalStore
{
  void *v3;
  void *v4;
  void *v5;
  id v6;
  id v7;
  _QWORD v8[4];
  id v9;
  HMDHomeManager *v10;

  v3 = (void *)MEMORY[0x227676638](self, a2);
  -[HMDHomeManager _migrateAccessAllowedWhenLockedSettingIfNeeded](self, "_migrateAccessAllowedWhenLockedSettingIfNeeded");
  objc_autoreleasePoolPop(v3);
  -[HMDHomeManager backingStore](self, "backingStore");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "context");
  v7 = (id)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v7, "managedObjectContext");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v8[0] = MEMORY[0x24BDAC760];
  v8[1] = 3221225472;
  v8[2] = __67__HMDHomeManager__readAccessAllowedWhenLockedSettingFromLocalStore__block_invoke;
  v8[3] = &unk_24E79C268;
  v9 = v5;
  v10 = self;
  v6 = v5;
  objc_msgSend(v6, "performBlockAndWait:", v8);

}

- (BOOL)_updateAccessAllowedWhenLockedToLocalStore:(BOOL)a3 managedObjectContext:(id)a4
{
  _BOOL8 v4;
  id v6;
  void *v7;
  HMDHomeManager *v8;
  NSObject *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  id v14;
  MKFLocalSettings *v15;
  void *v16;
  HMDHomeManager *v17;
  NSObject *v18;
  void *v19;
  void *v20;
  int v21;
  id v22;
  void *v23;
  HMDHomeManager *v24;
  NSObject *v25;
  _BOOL8 v26;
  void *v27;
  id v28;
  void *v29;
  void *v30;
  void *v31;
  void *v33;
  id v34;
  id v35;
  id v36;
  uint8_t buf[4];
  void *v38;
  __int16 v39;
  id v40;
  __int16 v41;
  id v42;
  __int16 v43;
  void *v44;
  uint64_t v45;

  v4 = a3;
  v45 = *MEMORY[0x24BDAC8D0];
  v6 = a4;
  v7 = (void *)MEMORY[0x227676638](objc_msgSend(v6, "hmd_assertIsExecuting"));
  v8 = self;
  HMFGetOSLogHandle();
  v9 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    HMFBooleanToString();
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543618;
    v38 = v10;
    v39 = 2112;
    v40 = v11;
    _os_log_impl(&dword_2218F0000, v9, OS_LOG_TYPE_INFO, "%{public}@Going to store accessAllowedWhenLocked (%@) to local store", buf, 0x16u);

  }
  objc_autoreleasePoolPop(v7);
  +[MKFLocalSettings fetchRequest](MKFLocalSettings, "fetchRequest");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  v36 = 0;
  objc_msgSend(v6, "executeFetchRequest:error:", v12, &v36);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  v14 = v36;

  objc_msgSend(v13, "firstObject");
  v15 = (MKFLocalSettings *)objc_claimAutoreleasedReturnValue();
  if (!v15)
  {
    v16 = (void *)MEMORY[0x227676638]();
    v17 = v8;
    HMFGetOSLogHandle();
    v18 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v38 = v19;
      v39 = 2112;
      v40 = v14;
      _os_log_impl(&dword_2218F0000, v18, OS_LOG_TYPE_INFO, "%{public}@Did not find MKFLocalSettings in local store. Inserting a new one. error if any: %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v16);
    v15 = -[MKFLocalSettings initWithContext:]([MKFLocalSettings alloc], "initWithContext:", v6);
  }
  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithBool:", v4);
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  -[MKFLocalSettings setAccessAllowedWhenLocked:](v15, "setAccessAllowedWhenLocked:", v20);

  v35 = v14;
  v21 = objc_msgSend(v6, "save:", &v35);
  v22 = v35;

  v23 = (void *)MEMORY[0x227676638](objc_msgSend(v6, "reset"));
  v24 = v8;
  HMFGetOSLogHandle();
  v25 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v25, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v34 = v6;
    v26 = v4;
    v27 = (void *)objc_claimAutoreleasedReturnValue();
    HMFBooleanToString();
    v33 = v23;
    v28 = v22;
    v29 = (void *)objc_claimAutoreleasedReturnValue();
    HMFBooleanToString();
    v30 = v13;
    v31 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138544130;
    v38 = v27;
    v39 = 2112;
    v40 = v29;
    v41 = 2112;
    v42 = v28;
    v43 = 2112;
    v44 = v31;
    _os_log_impl(&dword_2218F0000, v25, OS_LOG_TYPE_INFO, "%{public}@Storing access when locked setting (%@) saved to local store with error : %@, Success : %@", buf, 0x2Au);

    v13 = v30;
    v22 = v28;
    v23 = v33;

    v4 = v26;
    v6 = v34;
  }

  objc_autoreleasePoolPop(v23);
  if (v21)
    -[HMDHomeManager setAccessAllowedWhenLocked:](v24, "setAccessAllowedWhenLocked:", v4);

  return v21;
}

- (void)_migrateAccessAllowedWhenLockedSettingIfNeeded
{
  void *v3;
  void *v4;
  char v5;
  void *v6;
  id v7;
  void *v8;
  void *v9;
  void *v10;
  id v11;
  id v12;
  int v13;
  void *v14;
  id v15;
  void *v16;
  HMDHomeManager *v17;
  NSObject *v18;
  NSObject *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  id v25;
  void *v26;
  HMDHomeManager *v27;
  NSObject *v28;
  void *v29;
  void *v30;
  HMDHomeManager *v31;
  NSObject *v32;
  void *v33;
  void *v34;
  HMDHomeManager *v35;
  NSObject *v36;
  void *v37;
  void *v38;
  void *v39;
  HMDHomeManager *v40;
  NSObject *v41;
  void *v42;
  void *v43;
  _QWORD v44[5];
  id v45;
  id v46;
  id v47;
  id v48;
  uint8_t buf[4];
  void *v50;
  __int16 v51;
  id v52;
  __int16 v53;
  id v54;
  uint64_t v55;

  v55 = *MEMORY[0x24BDAC8D0];
  -[HMDHomeManager accessAllowedWhenLockedSettingFileName](self, "accessAllowedWhenLockedSettingFileName");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x24BDD1580], "defaultManager");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v4, "fileExistsAtPath:", v3);

  if ((v5 & 1) != 0)
  {
    v48 = 0;
    objc_msgSend(MEMORY[0x24BDBCE50], "dataWithContentsOfFile:options:error:", v3, 2, &v48);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v7 = v48;
    if (v6)
    {
      v8 = (void *)MEMORY[0x24BDD1620];
      objc_msgSend((id)objc_opt_class(), "allowedClassesForAccessAllowedWhenLockedArchive");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      v47 = v7;
      objc_msgSend(v8, "unarchivedObjectOfClasses:fromData:error:", v9, v6, &v47);
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      v11 = v47;

      if (v10)
      {
        v12 = v10;
        objc_opt_class();
        v13 = objc_opt_isKindOfClass() & 1;
        if (v13)
          v14 = v12;
        else
          v14 = 0;
        v15 = v14;

        v16 = (void *)MEMORY[0x227676638]();
        v17 = self;
        HMFGetOSLogHandle();
        v18 = objc_claimAutoreleasedReturnValue();
        v19 = v18;
        if (v13)
        {
          if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
          {
            HMFGetLogIdentifier();
            v20 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 138543618;
            v50 = v20;
            v51 = 2112;
            v52 = v12;
            _os_log_impl(&dword_2218F0000, v19, OS_LOG_TYPE_INFO, "%{public}@Found HH1 accessAllowedWhenLocked setting : %@", buf, 0x16u);

          }
          objc_autoreleasePoolPop(v16);
          objc_msgSend(v12, "objectForKeyedSubscript:", CFSTR("kAccessAllowedWhenLockedKey"));
          v21 = (void *)objc_claimAutoreleasedReturnValue();
          if (v21)
          {
            -[HMDHomeManager backingStore](v17, "backingStore");
            v22 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v22, "context");
            v23 = (void *)objc_claimAutoreleasedReturnValue();

            objc_msgSend(v23, "managedObjectContext");
            v24 = (void *)objc_claimAutoreleasedReturnValue();
            v44[0] = MEMORY[0x24BDAC760];
            v44[1] = 3221225472;
            v44[2] = __64__HMDHomeManager__migrateAccessAllowedWhenLockedSettingIfNeeded__block_invoke;
            v44[3] = &unk_24E79BBD0;
            v44[4] = v17;
            v45 = v21;
            v46 = v24;
            v25 = v24;
            objc_msgSend(v25, "performBlockAndWait:", v44);
            -[HMDHomeManager _removeAccessAllowedWhenLockedFileFromDisk](v17, "_removeAccessAllowedWhenLockedFileFromDisk");

          }
          else
          {
            v39 = (void *)MEMORY[0x227676638]();
            v40 = v17;
            HMFGetOSLogHandle();
            v41 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v41, OS_LOG_TYPE_ERROR))
            {
              HMFGetLogIdentifier();
              v43 = v39;
              v42 = (void *)objc_claimAutoreleasedReturnValue();
              *(_DWORD *)buf = 138543618;
              v50 = v42;
              v51 = 2112;
              v52 = v12;
              _os_log_impl(&dword_2218F0000, v41, OS_LOG_TYPE_ERROR, "%{public}@That's weird. accessAllowedWhenLocked dictionary contain nil value kAccessAllowedWhenLockedKey : %@", buf, 0x16u);

              v39 = v43;
            }

            objc_autoreleasePoolPop(v39);
          }

        }
        else
        {
          if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
          {
            HMFGetLogIdentifier();
            v38 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 138543618;
            v50 = v38;
            v51 = 2112;
            v52 = v12;
            _os_log_impl(&dword_2218F0000, v19, OS_LOG_TYPE_ERROR, "%{public}@Unarchived data is the wrong type : %@", buf, 0x16u);

          }
          objc_autoreleasePoolPop(v16);
        }

      }
      else
      {
        v34 = (void *)MEMORY[0x227676638]();
        v35 = self;
        HMFGetOSLogHandle();
        v36 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v36, OS_LOG_TYPE_ERROR))
        {
          HMFGetLogIdentifier();
          v37 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543618;
          v50 = v37;
          v51 = 2112;
          v52 = v11;
          _os_log_impl(&dword_2218F0000, v36, OS_LOG_TYPE_ERROR, "%{public}@Unable to unarchive from disk : %@", buf, 0x16u);

        }
        objc_autoreleasePoolPop(v34);
      }

      v7 = v11;
    }
    else
    {
      v30 = (void *)MEMORY[0x227676638]();
      v31 = self;
      HMFGetOSLogHandle();
      v32 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v33 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543874;
        v50 = v33;
        v51 = 2112;
        v52 = v3;
        v53 = 2112;
        v54 = v7;
        _os_log_impl(&dword_2218F0000, v32, OS_LOG_TYPE_ERROR, "%{public}@Unable to read data from file : %@ / %@", buf, 0x20u);

      }
      objc_autoreleasePoolPop(v30);
    }

  }
  else
  {
    v26 = (void *)MEMORY[0x227676638]();
    v27 = self;
    HMFGetOSLogHandle();
    v28 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v28, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v29 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v50 = v29;
      v51 = 2112;
      v52 = v3;
      _os_log_impl(&dword_2218F0000, v28, OS_LOG_TYPE_INFO, "%{public}@HH1 accessAllowedWhenLocked setting file do not exist : %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v26);
  }

}

- (void)_removeAccessAllowedWhenLockedFileFromDisk
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  id v7;
  void *v8;
  HMDHomeManager *v9;
  NSObject *v10;
  void *v11;
  id v12;
  uint8_t buf[4];
  void *v14;
  __int16 v15;
  id v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  v3 = objc_alloc(MEMORY[0x24BDBCF48]);
  -[HMDHomeManager accessAllowedWhenLockedSettingFileName](self, "accessAllowedWhenLockedSettingFileName");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = (void *)objc_msgSend(v3, "initFileURLWithPath:", v4);

  objc_msgSend(MEMORY[0x24BDD1580], "defaultManager");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v12 = 0;
  objc_msgSend(v6, "removeItemAtURL:error:", v5, &v12);
  v7 = v12;

  if (v7)
  {
    v8 = (void *)MEMORY[0x227676638]();
    v9 = self;
    HMFGetOSLogHandle();
    v10 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v14 = v11;
      v15 = 2112;
      v16 = v7;
      _os_log_impl(&dword_2218F0000, v10, OS_LOG_TYPE_ERROR, "%{public}@Error occurred while removing access allowed when locked setting file from disk : %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v8);
  }

}

- (void)accessoryBrowserDidFindNewAccessory
{
  NSObject *v3;
  _QWORD block[5];

  -[HMDHomeManager workQueue](self, "workQueue");
  v3 = objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x24BDAC760];
  block[1] = 3221225472;
  block[2] = __53__HMDHomeManager_accessoryBrowserDidFindNewAccessory__block_invoke;
  block[3] = &unk_24E79C240;
  block[4] = self;
  dispatch_async(v3, block);

}

- (id)updatedUUIDForDiscoveredUnpairedAccessory:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  id v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  int v12;
  void *v13;
  void *v14;
  HMDHomeManager *v15;
  NSObject *v16;
  NSObject *v17;
  void *v18;
  void *v19;
  id v20;
  void *v21;
  HMDHomeManager *v22;
  NSObject *v23;
  void *v24;
  void *v25;
  int v27;
  void *v28;
  __int16 v29;
  void *v30;
  __int16 v31;
  void *v32;
  uint64_t v33;

  v33 = *MEMORY[0x24BDAC8D0];
  v4 = a3;
  -[HMDHomeManager _accessoryOfCurrentDevice](self, "_accessoryOfCurrentDevice");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v6 = v5;
  else
    v6 = 0;
  v7 = v6;

  if (v7)
  {
    objc_msgSend(v7, "sensorManager");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = v8;
    if (!v8)
    {
      v13 = 0;
LABEL_23:

      goto LABEL_24;
    }
    objc_msgSend(v8, "derivedHAPAccessoryIdentifier");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    if (v10)
    {
      objc_msgSend(v4, "identifier");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      v12 = objc_msgSend(v11, "isEqualToString:", v10);

      if (v12)
      {
        objc_msgSend(v9, "derivedSensorUUID");
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        v14 = (void *)MEMORY[0x227676638]();
        v15 = self;
        HMFGetOSLogHandle();
        v16 = objc_claimAutoreleasedReturnValue();
        v17 = v16;
        if (v13)
        {
          if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
          {
            HMFGetLogIdentifier();
            v18 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v4, "uuid");
            v19 = (void *)objc_claimAutoreleasedReturnValue();
            v27 = 138543874;
            v28 = v18;
            v29 = 2112;
            v30 = v19;
            v31 = 2112;
            v32 = v13;
            _os_log_impl(&dword_2218F0000, v17, OS_LOG_TYPE_INFO, "%{public}@Updating unpaired sensor accessory UUID from %@ to %@", (uint8_t *)&v27, 0x20u);

          }
          objc_autoreleasePoolPop(v14);
          v20 = v13;
        }
        else
        {
          if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
          {
            HMFGetLogIdentifier();
            v25 = (void *)objc_claimAutoreleasedReturnValue();
            v27 = 138543362;
            v28 = v25;
            _os_log_impl(&dword_2218F0000, v17, OS_LOG_TYPE_ERROR, "%{public}@Unexpectedly did not get a derived sensor UUID for the current accessory", (uint8_t *)&v27, 0xCu);

          }
          objc_autoreleasePoolPop(v14);
        }

        goto LABEL_22;
      }
    }
    else
    {
      v21 = (void *)MEMORY[0x227676638]();
      v22 = self;
      HMFGetOSLogHandle();
      v23 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v24 = (void *)objc_claimAutoreleasedReturnValue();
        v27 = 138543362;
        v28 = v24;
        _os_log_impl(&dword_2218F0000, v23, OS_LOG_TYPE_ERROR, "%{public}@Unexpectedly did not get a derived sensor identifier for the current accessory", (uint8_t *)&v27, 0xCu);

      }
      objc_autoreleasePoolPop(v21);
    }
    v13 = 0;
LABEL_22:

    goto LABEL_23;
  }
  v13 = 0;
LABEL_24:

  return v13;
}

- (void)__accountAddedDevice:(id)a3
{
  id v4;
  NSObject *v5;
  id v6;
  _QWORD v7[4];
  id v8;
  HMDHomeManager *v9;

  v4 = a3;
  -[HMDHomeManager workQueue](self, "workQueue");
  v5 = objc_claimAutoreleasedReturnValue();
  v7[0] = MEMORY[0x24BDAC760];
  v7[1] = 3221225472;
  v7[2] = __39__HMDHomeManager___accountAddedDevice___block_invoke;
  v7[3] = &unk_24E79C268;
  v8 = v4;
  v9 = self;
  v6 = v4;
  dispatch_async(v5, v7);

}

- (void)__handleDeviceUpdatedNotification:(id)a3
{
  id v4;
  NSObject *v5;
  id v6;
  _QWORD v7[4];
  id v8;
  HMDHomeManager *v9;

  v4 = a3;
  -[HMDHomeManager workQueue](self, "workQueue");
  v5 = objc_claimAutoreleasedReturnValue();
  v7[0] = MEMORY[0x24BDAC760];
  v7[1] = 3221225472;
  v7[2] = __52__HMDHomeManager___handleDeviceUpdatedNotification___block_invoke;
  v7[3] = &unk_24E79C268;
  v8 = v4;
  v9 = self;
  v6 = v4;
  dispatch_async(v5, v7);

}

- (void)__accountRemovedDevice:(id)a3
{
  id v4;
  NSObject *v5;
  id v6;
  _QWORD v7[4];
  id v8;
  HMDHomeManager *v9;

  v4 = a3;
  -[HMDHomeManager workQueue](self, "workQueue");
  v5 = objc_claimAutoreleasedReturnValue();
  v7[0] = MEMORY[0x24BDAC760];
  v7[1] = 3221225472;
  v7[2] = __41__HMDHomeManager___accountRemovedDevice___block_invoke;
  v7[3] = &unk_24E79C268;
  v8 = v4;
  v9 = self;
  v6 = v4;
  dispatch_async(v5, v7);

}

- (void)_notifyXPCClientsOfUpdatedDevices
{
  NSObject *v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  HMDHomeManager *v15;
  NSObject *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  int v21;
  void *v22;
  __int16 v23;
  void *v24;
  uint64_t v25;
  _QWORD v26[2];

  v26[1] = *MEMORY[0x24BDAC8D0];
  -[HMDHomeManager workQueue](self, "workQueue");
  v3 = objc_claimAutoreleasedReturnValue();
  dispatch_assert_queue_V2(v3);

  v4 = (void *)MEMORY[0x24BE3F1B0];
  v5 = *MEMORY[0x24BDD5ED8];
  v25 = *MEMORY[0x24BDD5ED0];
  v6 = (void *)MEMORY[0x24BDBCF20];
  -[HMDHomeManager appleAccountManager](self, "appleAccountManager");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "account");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "devices");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "setWithArray:", v9);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  encodeRootObjectForIncomingXPCMessage(v10, 0);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v26[0] = v11;
  objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v26, &v25, 1);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "entitledMessageWithName:messagePayload:", v5, v12);
  v13 = (void *)objc_claimAutoreleasedReturnValue();

  v14 = (void *)MEMORY[0x227676638]();
  v15 = self;
  HMFGetOSLogHandle();
  v16 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "shortDescription");
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    v21 = 138543618;
    v22 = v17;
    v23 = 2112;
    v24 = v18;
    _os_log_impl(&dword_2218F0000, v16, OS_LOG_TYPE_INFO, "%{public}@Notifying clients of updated devices with message: %@", (uint8_t *)&v21, 0x16u);

  }
  objc_autoreleasePoolPop(v14);
  -[HMDHomeManager messageDispatcher](v15, "messageDispatcher");
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHomeManager uuid](v15, "uuid");
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v19, "sendMessage:target:", v13, v20);

}

- (void)_handleFetchDevicesMessage:(id)a3
{
  id v4;
  NSObject *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  uint64_t v13;
  _QWORD v14[2];

  v14[1] = *MEMORY[0x24BDAC8D0];
  v4 = a3;
  -[HMDHomeManager workQueue](self, "workQueue");
  v5 = objc_claimAutoreleasedReturnValue();
  dispatch_assert_queue_V2(v5);

  v13 = *MEMORY[0x24BDD5ED0];
  v6 = (void *)MEMORY[0x24BDBCF20];
  -[HMDHomeManager appleAccountManager](self, "appleAccountManager");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "account");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "devices");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "setWithArray:", v9);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  encodeRootObjectForIncomingXPCMessage(v10, 0);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v14[0] = v11;
  objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v14, &v13, 1);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "respondWithPayload:", v12);

}

- (void)__accountRegistryAddedAccount:(id)a3
{
  id v4;
  NSObject *v5;
  id v6;
  _QWORD v7[4];
  id v8;
  HMDHomeManager *v9;

  v4 = a3;
  -[HMDHomeManager workQueue](self, "workQueue");
  v5 = objc_claimAutoreleasedReturnValue();
  v7[0] = MEMORY[0x24BDAC760];
  v7[1] = 3221225472;
  v7[2] = __48__HMDHomeManager___accountRegistryAddedAccount___block_invoke;
  v7[3] = &unk_24E79C268;
  v8 = v4;
  v9 = self;
  v6 = v4;
  dispatch_async(v5, v7);

}

- (void)__accountRegistryRemovedAccount:(id)a3
{
  id v4;
  NSObject *v5;
  id v6;
  _QWORD v7[4];
  id v8;
  HMDHomeManager *v9;

  v4 = a3;
  -[HMDHomeManager workQueue](self, "workQueue");
  v5 = objc_claimAutoreleasedReturnValue();
  v7[0] = MEMORY[0x24BDAC760];
  v7[1] = 3221225472;
  v7[2] = __50__HMDHomeManager___accountRegistryRemovedAccount___block_invoke;
  v7[3] = &unk_24E79C268;
  v8 = v4;
  v9 = self;
  v6 = v4;
  dispatch_async(v5, v7);

}

- (void)verifyCurrentDeviceResidentStatus
{
  NSObject *v3;
  _QWORD block[5];

  -[HMDHomeManager workQueue](self, "workQueue");
  v3 = objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x24BDAC760];
  block[1] = 3221225472;
  block[2] = __51__HMDHomeManager_verifyCurrentDeviceResidentStatus__block_invoke;
  block[3] = &unk_24E79C240;
  block[4] = self;
  dispatch_async(v3, block);

}

- (void)__handleDeviceCapabilitiesUpdated:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;
  id v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  NSObject *v16;
  _QWORD v17[5];
  id v18;
  _QWORD v19[2];

  v19[1] = *MEMORY[0x24BDAC8D0];
  v4 = a3;
  -[HMDHomeManager appleAccountManager](self, "appleAccountManager");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "device");
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  if (v6)
  {
    objc_msgSend(v4, "object");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
      v8 = v7;
    else
      v8 = 0;
    v9 = v8;

    if (v9)
    {
      objc_msgSend(v6, "capabilities");
      v10 = (id)objc_claimAutoreleasedReturnValue();

      if (v10 == v9)
      {
        objc_msgSend(v4, "userInfo");
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        v12 = (void *)MEMORY[0x24BDBCF20];
        v19[0] = objc_opt_class();
        objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", v19, 1);
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v12, "setWithArray:", v13);
        v14 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v11, "hmf_arrayForKey:ofClasses:", CFSTR("HMDDeviceCapabilitiesUpdatedDifferingFieldsNotificationKey"), v14);
        v15 = (void *)objc_claimAutoreleasedReturnValue();

        if (objc_msgSend(v15, "count"))
        {
          -[HMDHomeManager workQueue](self, "workQueue");
          v16 = objc_claimAutoreleasedReturnValue();
          v17[0] = MEMORY[0x24BDAC760];
          v17[1] = 3221225472;
          v17[2] = __52__HMDHomeManager___handleDeviceCapabilitiesUpdated___block_invoke;
          v17[3] = &unk_24E79C268;
          v17[4] = self;
          v18 = v6;
          dispatch_async(v16, v17);

        }
      }
    }

  }
}

- (void)__handleUpdatedCurrentDevice:(id)a3
{
  void *v4;
  void *v5;
  void *v6;
  id v7;
  NSObject *v8;
  _QWORD v9[5];
  id v10;

  objc_msgSend(a3, "userInfo");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "objectForKeyedSubscript:", CFSTR("HMDDeviceNotificationKey"));
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v6 = v5;
  else
    v6 = 0;
  v7 = v6;

  if (objc_msgSend(v7, "isCurrentDevice"))
  {
    -[HMDHomeManager workQueue](self, "workQueue");
    v8 = objc_claimAutoreleasedReturnValue();
    v9[0] = MEMORY[0x24BDAC760];
    v9[1] = 3221225472;
    v9[2] = __47__HMDHomeManager___handleUpdatedCurrentDevice___block_invoke;
    v9[3] = &unk_24E79C268;
    v9[4] = self;
    v10 = v7;
    dispatch_async(v8, v9);

  }
}

- (void)_handleUpdatedCurrentDevice:(id)a3
{
  id v4;
  NSObject *v5;
  void *v6;
  NSObject *v7;
  void *v8;
  void *v9;
  int v10;
  void *v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t i;
  void *v17;
  void *v18;
  int v19;
  HMDHomeManager *v20;
  uint64_t v21;
  void *v22;
  HMDHomeManager *v23;
  NSObject *v24;
  void *v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint8_t v30[128];
  uint8_t buf[4];
  void *v32;
  __int16 v33;
  id v34;
  uint64_t v35;

  v35 = *MEMORY[0x24BDAC8D0];
  v4 = a3;
  -[HMDHomeManager workQueue](self, "workQueue");
  v5 = objc_claimAutoreleasedReturnValue();
  dispatch_assert_queue_V2(v5);

  v6 = (void *)MEMORY[0x227676638]();
  HMFGetOSLogHandle();
  v7 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
  {
    HMFGetLogIdentifier();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543618;
    v32 = v8;
    v33 = 2112;
    v34 = v4;
    _os_log_impl(&dword_2218F0000, v7, OS_LOG_TYPE_DEBUG, "%{public}@Received notification that current device was updated: %@", buf, 0x16u);

  }
  objc_autoreleasePoolPop(v6);
  if (v4)
    -[HMDHomeManager startLocalTransport](self, "startLocalTransport");
  else
    -[HMDHomeManager stopLocalTransport](self, "stopLocalTransport");
  +[HMDDeviceCapabilities deviceCapabilities](HMDDeviceCapabilities, "deviceCapabilities");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = objc_msgSend(v9, "isResidentCapable");

  if (v10)
  {
    if (v4)
    {
      -[HMDHomeManager notifyClientsResidentCapable:](self, "notifyClientsResidentCapable:", 1);
      if (!-[HMDHomeManager residentEnabledState](self, "residentEnabledState"))
      {
        objc_msgSend(v4, "productInfo");
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        v12 = objc_msgSend(v11, "productClass");

        if (v12 == 3)
        {
          v28 = 0u;
          v29 = 0u;
          v26 = 0u;
          v27 = 0u;
          -[HMDHomeManager homes](self, "homes", 0);
          v13 = (void *)objc_claimAutoreleasedReturnValue();
          v14 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v26, v30, 16);
          if (v14)
          {
            v15 = *(_QWORD *)v27;
            while (2)
            {
              for (i = 0; i != v14; ++i)
              {
                if (*(_QWORD *)v27 != v15)
                  objc_enumerationMutation(v13);
                v17 = *(void **)(*((_QWORD *)&v26 + 1) + 8 * i);
                if (objc_msgSend(v17, "isOwnerUser"))
                {
                  objc_msgSend(v17, "residentCapableDevices");
                  v18 = (void *)objc_claimAutoreleasedReturnValue();
                  v19 = objc_msgSend(v18, "containsObject:", v4);

                  if (v19)
                  {
                    v22 = (void *)MEMORY[0x227676638]();
                    v23 = self;
                    HMFGetOSLogHandle();
                    v24 = objc_claimAutoreleasedReturnValue();
                    if (os_log_type_enabled(v24, OS_LOG_TYPE_INFO))
                    {
                      HMFGetLogIdentifier();
                      v25 = (void *)objc_claimAutoreleasedReturnValue();
                      *(_DWORD *)buf = 138543362;
                      v32 = v25;
                      _os_log_impl(&dword_2218F0000, v24, OS_LOG_TYPE_INFO, "%{public}@Found ourselves as a resident in one or more homes, enabling ourselves as a resident device", buf, 0xCu);

                    }
                    objc_autoreleasePoolPop(v22);
                    v14 = 1;
                    goto LABEL_25;
                  }
                }
              }
              v14 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v26, v30, 16);
              if (v14)
                continue;
              break;
            }
          }
LABEL_25:

          v20 = self;
          v21 = v14;
        }
        else
        {
          v20 = self;
          v21 = 1;
        }
        -[HMDHomeManager _updateResidentEnabledOnThisDevice:forceNotify:message:](v20, "_updateResidentEnabledOnThisDevice:forceNotify:message:", v21, 0, 0);
      }
    }
    else
    {
      -[HMDHomeManager notifyClientsResidentCapable:](self, "notifyClientsResidentCapable:", 0);
    }
  }

}

- (void)__handleCompanionUpdated:(id)a3
{
  void *v4;
  void *v5;
  NSObject *v6;
  id v7;
  _QWORD v8[4];
  id v9;
  HMDHomeManager *v10;

  +[HMDCompanionManager sharedManager](HMDCompanionManager, "sharedManager", a3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "companion");
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  -[HMDHomeManager workQueue](self, "workQueue");
  v6 = objc_claimAutoreleasedReturnValue();
  v8[0] = MEMORY[0x24BDAC760];
  v8[1] = 3221225472;
  v8[2] = __43__HMDHomeManager___handleCompanionUpdated___block_invoke;
  v8[3] = &unk_24E79C268;
  v9 = v5;
  v10 = self;
  v7 = v5;
  dispatch_async(v6, v8);

}

- (void)setupSession:(id)a3 didReceiveAccessoryWithUUID:(id)a4
{
  id v6;
  id v7;
  void *v8;
  HMDHomeManager *v9;
  NSObject *v10;
  void *v11;
  void *v12;
  HMDAccessorySetupMetricDispatcher *v13;
  void *v14;
  void *v15;
  void *v16;
  HMDAccessorySetupMetricDispatcher *v17;
  int v18;
  void *v19;
  __int16 v20;
  void *v21;
  __int16 v22;
  id v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v6 = a3;
  v7 = a4;
  v8 = (void *)MEMORY[0x227676638]();
  v9 = self;
  HMFGetOSLogHandle();
  v10 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    HMFGetLogIdentifier();
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "identifier");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    v18 = 138543874;
    v19 = v11;
    v20 = 2112;
    v21 = v12;
    v22 = 2112;
    v23 = v7;
    _os_log_impl(&dword_2218F0000, v10, OS_LOG_TYPE_DEFAULT, "%{public}@Setup Session : %@, received accessory uuid: %@", (uint8_t *)&v18, 0x20u);

  }
  objc_autoreleasePoolPop(v8);
  if (!objc_msgSend(v6, "role"))
  {
    v13 = [HMDAccessorySetupMetricDispatcher alloc];
    -[HMDHomeManager workQueue](v9, "workQueue");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "setupTrackingInfo");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "identifier");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    v17 = -[HMDAccessorySetupMetricDispatcher initWithQueue:trackingInfo:setupSessionIdentifier:homeManager:](v13, "initWithQueue:trackingInfo:setupSessionIdentifier:homeManager:", v14, v15, v16, v9);

    -[HMDAccessorySetupMetricDispatcher setDelegate:](v17, "setDelegate:", v9);
    -[HMDHomeManager addAccessorySetupMetricDispatcher:](v9, "addAccessorySetupMetricDispatcher:", v17);

  }
}

- (void)setupSession:(id)a3 didCloseWithError:(id)a4
{
  id v6;
  id v7;
  NSObject *v8;
  id v9;
  id v10;
  _QWORD block[5];
  id v12;
  id v13;

  v6 = a3;
  v7 = a4;
  -[HMDHomeManager workQueue](self, "workQueue");
  v8 = objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x24BDAC760];
  block[1] = 3221225472;
  block[2] = __49__HMDHomeManager_setupSession_didCloseWithError___block_invoke;
  block[3] = &unk_24E79BBD0;
  block[4] = self;
  v12 = v6;
  v13 = v7;
  v9 = v7;
  v10 = v6;
  dispatch_async(v8, block);

}

- (void)archiveServerToken:(id)a3
{
  id v4;
  NSObject *v5;
  id v6;
  _QWORD block[4];
  id v8;

  v4 = a3;
  -[HMDHomeManager workQueue](self, "workQueue");
  v5 = objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x24BDAC760];
  block[1] = 3221225472;
  block[2] = __37__HMDHomeManager_archiveServerToken___block_invoke;
  block[3] = &unk_24E79C240;
  v8 = v4;
  v6 = v4;
  dispatch_async(v5, block);

}

- (void)transactionObjectUpdated:(id)a3 newValues:(id)a4 message:(id)a5
{
  id v8;
  id v9;
  void *v10;
  id v11;
  void *v12;
  id v13;
  id v14;
  void *v15;
  id v16;
  id v17;
  void *v18;
  id v19;
  id v20;
  void *v21;
  id v22;
  void *v23;
  void *v24;
  id v25;
  void *v26;
  id v27;
  id v28;
  void *v29;
  id v30;
  id v31;
  void *v32;
  id v33;
  id v34;
  void *v35;
  id v36;
  void *v37;
  void *v38;
  void *v39;
  char v40;
  id v41;

  v41 = a3;
  v8 = a4;
  v9 = a5;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v10 = v8;
  else
    v10 = 0;
  if (v10)
  {
    -[HMDHomeManager dm_transactionObjectUpdated:newValues:message:](self, "dm_transactionObjectUpdated:newValues:message:", v41, v8, v9);
LABEL_40:

    goto LABEL_41;
  }
  v11 = v8;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v12 = v11;
  else
    v12 = 0;
  v13 = v12;

  v14 = v11;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v15 = v14;
  else
    v15 = 0;
  v16 = v15;

  if (v16)
  {
    -[HMDHomeManager processSharedHomeModelUpdate:message:](self, "processSharedHomeModelUpdate:message:", v16, v9);
    goto LABEL_40;
  }
  v17 = v14;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v18 = v17;
  else
    v18 = 0;
  v19 = v18;

  if (v19)
  {
    -[HMDHomeManager processHomeManagerModelUpdate:message:](self, "processHomeManagerModelUpdate:message:", v19, v9);
    goto LABEL_40;
  }
  v20 = v17;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v21 = v20;
  else
    v21 = 0;
  v22 = v21;

  if (v22)
  {
    objc_msgSend(v22, "parentUUID");
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHomeManager _homeWithUUID:](self, "_homeWithUUID:", v23);
    v24 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v24, "transactionObjectUpdated:newValues:message:", v41, v22, v9);
LABEL_24:

    goto LABEL_40;
  }
  v25 = v20;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v26 = v25;
  else
    v26 = 0;
  v27 = v26;

  if (v27)
  {
    -[HMDHomeManager processCloudZoneModelAdd:message:](self, "processCloudZoneModelAdd:message:", v27, v9);
    goto LABEL_40;
  }
  v28 = v25;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v29 = v28;
  else
    v29 = 0;
  v30 = v29;

  if (v30)
  {
    -[HMDHomeManager processAppDataModelUpdate:message:](self, "processAppDataModelUpdate:message:", v30, v9);
    goto LABEL_40;
  }
  v31 = v28;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v32 = v31;
  else
    v32 = 0;
  v33 = v32;

  if (v33)
  {
    -[HMDHomeManager processMetadataModel:message:](self, "processMetadataModel:message:", v33, v9);
    goto LABEL_40;
  }
  v34 = v31;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v35 = v34;
  else
    v35 = 0;
  v36 = v35;

  if (v36)
  {
    -[HMDHomeManager appleAccountManager](self, "appleAccountManager");
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v24, "account");
    v37 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v37, "modelIdentifier");
    v38 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v36, "uuid");
    v39 = (void *)objc_claimAutoreleasedReturnValue();
    if ((objc_msgSend(v38, "isEqual:", v39) & 1) != 0)
    {

    }
    else
    {
      v40 = objc_msgSend(v24, "isModelCurrentAccount:", v36);

      if ((v40 & 1) == 0)
        goto LABEL_24;
    }
    objc_msgSend(v24, "processAccountModel:message:", v36, v9);
    goto LABEL_24;
  }
LABEL_41:

}

- (void)transactionObjectRemoved:(id)a3 message:(id)a4
{
  id v6;
  id v7;
  void *v8;
  HMDHomeManager *v9;
  NSObject *v10;
  void *v11;
  id v12;
  void *v13;
  id v14;
  void *v15;
  HMDHomeManager *v16;
  NSObject *v17;
  void *v18;
  id v19;
  void *v20;
  id v21;
  id v22;
  void *v23;
  id v24;
  id v25;
  void *v26;
  id v27;
  id v28;
  void *v29;
  id v30;
  id v31;
  void *v32;
  id v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  char v38;
  int v39;
  void *v40;
  __int16 v41;
  id v42;
  uint64_t v43;

  v43 = *MEMORY[0x24BDAC8D0];
  v6 = a3;
  v7 = a4;
  v8 = (void *)MEMORY[0x227676638]();
  v9 = self;
  HMFGetOSLogHandle();
  v10 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v39 = 138543618;
    v40 = v11;
    v41 = 2112;
    v42 = v6;
    _os_log_impl(&dword_2218F0000, v10, OS_LOG_TYPE_INFO, "%{public}@transactionObjectRemoved: %@", (uint8_t *)&v39, 0x16u);

  }
  objc_autoreleasePoolPop(v8);
  v12 = v6;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v13 = v12;
  else
    v13 = 0;
  v14 = v13;

  if (v14)
  {
    v15 = (void *)MEMORY[0x227676638]();
    v16 = v9;
    HMFGetOSLogHandle();
    v17 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      v39 = 138543618;
      v40 = v18;
      v41 = 2112;
      v42 = v14;
      _os_log_impl(&dword_2218F0000, v17, OS_LOG_TYPE_INFO, "%{public}@transactionObjectRemoved HMDHomeManagerHomeModel: %@", (uint8_t *)&v39, 0x16u);

    }
    objc_autoreleasePoolPop(v15);
    -[HMDHomeManager dm_transactionObjectRemoved:message:](v16, "dm_transactionObjectRemoved:message:", v12, v7);
    goto LABEL_37;
  }
  v19 = v12;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v20 = v19;
  else
    v20 = 0;
  v21 = v20;

  v22 = v19;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v23 = v22;
  else
    v23 = 0;
  v24 = v23;

  if (v24)
  {
    -[HMDHomeManager processSharedHomeModelRemoved:message:](v9, "processSharedHomeModelRemoved:message:", v24, v7);
LABEL_37:

    goto LABEL_38;
  }
  v25 = v22;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v26 = v25;
  else
    v26 = 0;
  v27 = v26;

  if (v27)
  {
    -[HMDHomeManager processCloudZoneModelRemoved:message:](v9, "processCloudZoneModelRemoved:message:", v27, v7);
    goto LABEL_37;
  }
  v28 = v25;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v29 = v28;
  else
    v29 = 0;
  v30 = v29;

  if (v30)
  {
    -[HMDHomeManager processAppDataModelRemove:message:](v9, "processAppDataModelRemove:message:", v30, v7);
    goto LABEL_37;
  }
  v31 = v28;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v32 = v31;
  else
    v32 = 0;
  v33 = v32;

  if (v33)
  {
    -[HMDHomeManager appleAccountManager](v9, "appleAccountManager");
    v34 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v34, "account");
    v35 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v35, "modelIdentifier");
    v36 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v33, "uuid");
    v37 = (void *)objc_claimAutoreleasedReturnValue();
    if ((objc_msgSend(v36, "isEqual:", v37) & 1) != 0)
    {

    }
    else
    {
      v38 = objc_msgSend(v34, "isModelCurrentAccount:", v33);

      if ((v38 & 1) == 0)
      {
LABEL_36:

        goto LABEL_37;
      }
    }
    objc_msgSend(v34, "processAccountModelRemove:message:", v33, v7);
    goto LABEL_36;
  }
LABEL_38:

}

- (id)backingStoreObjects:(int64_t)a3
{
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;

  objc_msgSend(MEMORY[0x24BDBCEB8], "array");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHomeManager modelObjectWithChangeType:version:](self, "modelObjectWithChangeType:version:", 1, a3);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "addObject:", v6);

  if (a3 >= 3)
  {
    -[HMDHomeManager appData](self, "appData");
    v7 = (void *)objc_claimAutoreleasedReturnValue();

    if (v7)
    {
      -[HMDHomeManager appData](self, "appData");
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v8, "modelObjectWithChangeType:", 1);
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v5, "addObject:", v9);

    }
  }
  return v5;
}

- (id)modelObjectWithChangeType:(unint64_t)a3
{
  return -[HMDHomeManager modelObjectWithChangeType:version:](self, "modelObjectWithChangeType:version:", a3, 4);
}

- (id)modelObjectWithChangeType:(unint64_t)a3 version:(int64_t)a4
{
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  v6 = (void *)objc_opt_class();
  -[HMDHomeManager uuid](self, "uuid");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "emptyModelObjectWithChangeType:homeManagerUUID:", a3, v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  -[HMDHomeManager primaryHomeUUID](self, "primaryHomeUUID");
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  if (v9)
  {
    -[HMDHomeManager primaryHomeUUID](self, "primaryHomeUUID");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "UUIDString");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "setPrimaryHomeUUID:", v11);

  }
  -[HMDHomeManager cloudZones](self, "cloudZones");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  +[HMDCloudZoneInformation cloudZoneInformationWithCloudZones:](HMDCloudZoneInformation, "cloudZoneInformationWithCloudZones:", v12);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "setCloudZoneInformation:", v13);

  return v8;
}

- (void)handleRemoteUserClientCloudShareRequest:(id)a3
{
  id v4;
  id v5;

  v4 = a3;
  -[HMDHomeManager userCloudShareManager](self, "userCloudShareManager");
  v5 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "handleRemoteUserClientCloudShareRequest:", v4);

}

- (void)handleRemoteUserClientCloudShareRepairRequest:(id)a3
{
  id v4;
  id v5;

  v4 = a3;
  -[HMDHomeManager userCloudShareManager](self, "userCloudShareManager");
  v5 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "handleRemoteUserClientCloudShareRepairRequest:", v4);

}

- (void)multiUserStatusController:(id)a3 statusDidChange:(int64_t)a4
{
  id v5;

  -[HMDHomeManager uuid](self, "uuid", a3, a4);
  v5 = (id)objc_claimAutoreleasedReturnValue();
  -[HMDHomeManager updateGenerationCounterWithReason:sourceUUID:shouldNotifyClients:](self, "updateGenerationCounterWithReason:sourceUUID:shouldNotifyClients:", CFSTR("MultiUserStatusChanged"), v5, 1);

}

- (BOOL)legacyZoneHasRecordsAvailable
{
  return 0;
}

- (BOOL)isCloudAccountActive
{
  return 0;
}

- (BOOL)isNetworkConnectionAvailable
{
  void *v3;
  void *v4;
  char v5;

  -[HMDHomeManager reachabilityMonitor](self, "reachabilityMonitor");
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v3)
    return 0;
  -[HMDHomeManager reachabilityMonitor](self, "reachabilityMonitor");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v4, "isReachable");

  return v5;
}

- (id)_currentHome
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  void *v8;
  void *v9;
  void *v10;
  char v11;
  id v12;
  void *v13;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  _BYTE v19[128];
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  v15 = 0u;
  v16 = 0u;
  v17 = 0u;
  v18 = 0u;
  -[HMDHomeManager homes](self, "homes", 0);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v15, v19, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v16;
    while (2)
    {
      for (i = 0; i != v5; ++i)
      {
        if (*(_QWORD *)v16 != v6)
          objc_enumerationMutation(v3);
        v8 = *(void **)(*((_QWORD *)&v15 + 1) + 8 * i);
        objc_msgSend(v8, "uuid");
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        -[HMDHomeManager currentHomeUUID](self, "currentHomeUUID");
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        v11 = objc_msgSend(v9, "hmf_isEqualToUUID:", v10);

        if ((v11 & 1) != 0)
        {
          v12 = v8;
          goto LABEL_11;
        }
      }
      v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v15, v19, 16);
      if (v5)
        continue;
      break;
    }
  }

  -[HMDHomeManager homes](self, "homes");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "firstObject");
  v12 = (id)objc_claimAutoreleasedReturnValue();
LABEL_11:
  v13 = v12;

  return v13;
}

- (id)delegatingRouter:(id)a3 filteredTopics:(id)a4 forRouter:(id)a5
{
  id v8;
  id v9;
  id v10;
  void *v11;
  void *v12;
  id v13;
  id v14;
  void *v15;
  id v16;
  void *v17;
  id v18;
  void *v19;
  uint64_t v20;
  id v21;

  v8 = a3;
  v9 = a4;
  v10 = a5;
  v11 = (void *)MEMORY[0x227676638]();
  objc_msgSend(MEMORY[0x24BDBCE30], "array");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHomeManager registrationForwardingEventRouter](self, "registrationForwardingEventRouter");
  v13 = (id)objc_claimAutoreleasedReturnValue();

  if (v13 == v8)
  {
    v14 = v10;
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
      v15 = v14;
    else
      v15 = 0;
    v16 = v15;

    -[HMDHomeManager memoryEventRouter](self, "memoryEventRouter");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v17, "synchronousSubscriptionProvider");
    v18 = (id)objc_claimAutoreleasedReturnValue();

    if (v18 == v14)
    {
      v21 = v9;
    }
    else
    {
      if (!v16)
        goto LABEL_11;
      objc_msgSend(v16, "identifier");
      v19 = (void *)objc_claimAutoreleasedReturnValue();

      if (!v19)
        goto LABEL_11;
      objc_msgSend(v16, "identifier");
      v20 = objc_claimAutoreleasedReturnValue();
      +[HMDHomeEventsGenerated forwardingTopicsWithTopics:forHomeRouterWithUUID:](HMDHomeEventsGenerated, "forwardingTopicsWithTopics:forHomeRouterWithUUID:", v9, v20);
      v21 = (id)objc_claimAutoreleasedReturnValue();

      v12 = (void *)v20;
    }

    v12 = v21;
LABEL_11:

  }
  objc_autoreleasePoolPop(v11);

  return v12;
}

- (id)delegatingRouter:(id)a3 upstreamTopicsFor:(id)a4
{
  return +[HMDHomeEventsGenerated upstreamTopicsForTopic:](HMDHomeEventsGenerated, "upstreamTopicsForTopic:", a4);
}

- (id)expandedTopicsForTopics:(id)a3
{
  return +[HMDHomeEventsGenerated expandedTopicsWithTopics:homeManager:](HMDHomeEventsGenerated, "expandedTopicsWithTopics:homeManager:", a3, self);
}

- (id)upstreamTopicsForTopic:(id)a3
{
  return +[HMDHomeEventsGenerated upstreamTopicsForTopic:](HMDHomeEventsGenerated, "upstreamTopicsForTopic:", a3);
}

- (BOOL)isSignedIntoiCloud
{
  void *v2;
  char v3;

  +[HMDAppleAccountManager sharedManager](HMDAppleAccountManager, "sharedManager");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "isLoggedInToPrimaryAccount");

  return v3;
}

- (unint64_t)numHomes
{
  void *v2;
  unint64_t v3;

  -[HMDHomeManager homes](self, "homes");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "count");

  return v3;
}

- (void)_handleCurrentAccessoryRemovedNotification:(id)a3
{
  id v4;
  NSObject *v5;
  id v6;
  _QWORD v7[4];
  id v8;
  HMDHomeManager *v9;

  v4 = a3;
  -[HMDHomeManager workQueue](self, "workQueue");
  v5 = objc_claimAutoreleasedReturnValue();
  v7[0] = MEMORY[0x24BDAC760];
  v7[1] = 3221225472;
  v7[2] = __61__HMDHomeManager__handleCurrentAccessoryRemovedNotification___block_invoke;
  v7[3] = &unk_24E79C268;
  v8 = v4;
  v9 = self;
  v6 = v4;
  dispatch_async(v5, v7);

}

- (void)_handleCurrentAccessoryAddedNotification:(id)a3
{
  void *v4;
  NSObject *v5;
  _QWORD block[5];

  -[HMDHomeManager capabilitiesController](self, "capabilitiesController", a3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "currentAccessoryDidBecomeAvailable");

  -[HMDHomeManager _updateCurrentHomeIfNecessary](self, "_updateCurrentHomeIfNecessary");
  -[HMDHomeManager workQueue](self, "workQueue");
  v5 = objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x24BDAC760];
  block[1] = 3221225472;
  block[2] = __59__HMDHomeManager__handleCurrentAccessoryAddedNotification___block_invoke;
  block[3] = &unk_24E79C240;
  block[4] = self;
  dispatch_async(v5, block);

}

- (void)__handleProcessMemoryPressureEvent:(id)a3
{
  id v4;
  void *v5;
  HMDHomeManager *v6;
  NSObject *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  id v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  HMDHomeManager *v20;
  NSObject *v21;
  void *v22;
  uint8_t v23[24];
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v4 = a3;
  v5 = (void *)MEMORY[0x227676638]();
  v6 = self;
  HMFGetOSLogHandle();
  v7 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_FAULT))
  {
    HMFGetLogIdentifier();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)v23 = 138543362;
    *(_QWORD *)&v23[4] = v8;
    _os_log_impl(&dword_2218F0000, v7, OS_LOG_TYPE_FAULT, "%{public}@Received process memory pressure notification", v23, 0xCu);

  }
  objc_autoreleasePoolPop(v5);
  objc_msgSend(v4, "userInfo");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "hmf_stringForKey:", *MEMORY[0x24BE3EC50]);
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  if (v10)
  {
    *(_QWORD *)v23 = 0;
    -[HMDHomeManager dataSyncInProgressWithState:withMessage:](v6, "dataSyncInProgressWithState:withMessage:", v23, 0);
    -[HMDHomeManager logEventSubmitter](v6, "logEventSubmitter");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
      v12 = v11;
    else
      v12 = 0;
    v13 = v12;

    objc_msgSend(MEMORY[0x24BE3F1A8], "memoryMonitor");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "handleMemoryPressureState:", objc_msgSend(v14, "lastProcessMemoryState"));

    -[HMDHomeManager logEventSubmitter](v6, "logEventSubmitter");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    HMHomeManagerDataSyncStateToString();
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    +[HMDProcessMemoryPressureNotificationLogEvent createEventWithProcessMemoryState:dataSyncState:](HMDProcessMemoryPressureNotificationLogEvent, "createEventWithProcessMemoryState:dataSyncState:", v10, v16);
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v15, "submitLogEvent:", v17);

    -[HMDHomeManager memoryTracker](v6, "memoryTracker");
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v18, "trackMemoryUsageWithReason:", 2);

  }
  else
  {
    v19 = (void *)MEMORY[0x227676638]();
    v20 = v6;
    HMFGetOSLogHandle();
    v21 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)v23 = 138543362;
      *(_QWORD *)&v23[4] = v22;
      _os_log_impl(&dword_2218F0000, v21, OS_LOG_TYPE_ERROR, "%{public}@Notification does not contain process memory state", v23, 0xCu);

    }
    objc_autoreleasePoolPop(v19);
  }

}

- (BOOL)postSyncDataUpdatedNotification
{
  HMDHomeManager *v2;
  os_unfair_lock_s *p_lock;

  v2 = self;
  p_lock = &self->_lock;
  os_unfair_lock_lock_with_options();
  LOBYTE(v2) = v2->_postSyncDataUpdatedNotification;
  os_unfair_lock_unlock(p_lock);
  return (char)v2;
}

- (void)setPostSyncDataUpdatedNotification:(BOOL)a3
{
  os_unfair_lock_s *p_lock;

  p_lock = &self->_lock;
  os_unfair_lock_lock_with_options();
  self->_postSyncDataUpdatedNotification = a3;
  os_unfair_lock_unlock(p_lock);
}

- (void)assistantSyncDataChanged:(id)a3
{
  id v4;
  NSObject *v5;
  id v6;
  _QWORD v7[5];
  id v8;

  v4 = a3;
  -[HMDHomeManager workQueue](self, "workQueue");
  v5 = objc_claimAutoreleasedReturnValue();
  v7[0] = MEMORY[0x24BDAC760];
  v7[1] = 3221225472;
  v7[2] = __43__HMDHomeManager_assistantSyncDataChanged___block_invoke;
  v7[3] = &unk_24E79C268;
  v7[4] = self;
  v8 = v4;
  v6 = v4;
  dispatch_async(v5, v7);

}

- (void)handleSiriSyncDataRequest:(id)a3
{
  id v4;
  NSObject *v5;
  id v6;
  _QWORD v7[5];
  id v8;

  v4 = a3;
  -[HMDHomeManager workQueue](self, "workQueue");
  v5 = objc_claimAutoreleasedReturnValue();
  v7[0] = MEMORY[0x24BDAC760];
  v7[1] = 3221225472;
  v7[2] = __44__HMDHomeManager_handleSiriSyncDataRequest___block_invoke;
  v7[3] = &unk_24E79C268;
  v7[4] = self;
  v8 = v4;
  v6 = v4;
  dispatch_async(v5, v7);

}

- (id)hapMetadataForBiomeLogEventObserver:(id)a3
{
  return +[HMDHAPMetadata getSharedInstance](HMDHAPMetadata, "getSharedInstance", a3);
}

- (id)hapMetadataForMicroLocationLogEventObserver:(id)a3
{
  return +[HMDHAPMetadata getSharedInstance](HMDHAPMetadata, "getSharedInstance", a3);
}

- (void)_handleKeyRoll:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  HMDHH2Migrator *v9;
  void *v10;
  char v11;
  id v12;
  id v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  HMDHH2Migrator *v18;
  void *v19;
  void *v20;
  HMDHomeManager *v21;
  NSObject *v22;
  void *v23;
  void *v24;
  HMDHomeManager *v25;
  NSObject *v26;
  void *v27;
  void *v28;
  HMDHomeManager *v29;
  NSObject *v30;
  void *v31;
  id v32;
  id v33;
  id v34;
  id v35;
  id v36;
  uint8_t buf[4];
  void *v38;
  uint64_t v39;

  v39 = *MEMORY[0x24BDAC8D0];
  v4 = a3;
  objc_msgSend(v4, "messagePayload");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "hmf_stringForKey:", *MEMORY[0x24BDD5E38]);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  if (v6)
  {
    -[HMDHomeManager accessoriesMatchingIdentifier:](self, "accessoriesMatchingIdentifier:", v6);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v7, "count"))
    {
      objc_msgSend(v7, "firstObject");
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      v9 = objc_alloc_init(HMDHH2Migrator);
      objc_msgSend(MEMORY[0x24BE1BC08], "systemStore");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      v35 = 0;
      v36 = 0;
      v11 = objc_msgSend(v10, "getOrCreateHH2ControllerKey:secretKey:keyPair:username:", &v36, 0, 0, &v35);
      v12 = v36;
      v13 = v35;

      if ((v11 & 1) != 0)
      {
        v14 = (void *)objc_msgSend(objc_alloc(MEMORY[0x24BE3F230]), "initWithPairingKeyData:", v12);
        v33 = v13;
        v15 = (void *)objc_msgSend(objc_alloc(MEMORY[0x24BE1BBB0]), "initWithIdentifier:publicKey:privateKey:permissions:", v13, v14, 0, 1);
        objc_msgSend(v8, "home");
        v16 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v16, "owner");
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v17, "pairingIdentity");
        v32 = v12;
        v18 = v9;
        v19 = (void *)objc_claimAutoreleasedReturnValue();

        -[HMDHH2Migrator scheduleAccessoryKeyMigration:oldPairingIdentity:hh2PairingIdentity:](v18, "scheduleAccessoryKeyMigration:oldPairingIdentity:hh2PairingIdentity:", v8, v19, v15);
        objc_msgSend(v4, "respondWithSuccess");

        v9 = v18;
        v12 = v32;

        v13 = v33;
      }
      else
      {
        v28 = (void *)MEMORY[0x227676638]();
        v29 = self;
        HMFGetOSLogHandle();
        v30 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
        {
          HMFGetLogIdentifier();
          v34 = v13;
          v31 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543362;
          v38 = v31;
          _os_log_impl(&dword_2218F0000, v30, OS_LOG_TYPE_ERROR, "%{public}@FATAL Error : Unable to create HH2 Controller key", buf, 0xCu);

          v13 = v34;
        }

        objc_autoreleasePoolPop(v28);
        objc_msgSend(MEMORY[0x24BDD1540], "hmErrorWithCode:", 10);
        v14 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v4, "respondWithError:", v14);
      }

    }
    else
    {
      v24 = (void *)MEMORY[0x227676638]();
      v25 = self;
      HMFGetOSLogHandle();
      v26 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v27 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543362;
        v38 = v27;
        _os_log_impl(&dword_2218F0000, v26, OS_LOG_TYPE_ERROR, "%{public}@Did not find the accessory with that identifier", buf, 0xCu);

      }
      objc_autoreleasePoolPop(v24);
      objc_msgSend(MEMORY[0x24BDD1540], "hmErrorWithCode:", 2);
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "respondWithError:", v8);
    }

  }
  else
  {
    v20 = (void *)MEMORY[0x227676638]();
    v21 = self;
    HMFGetOSLogHandle();
    v22 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v23 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v38 = v23;
      _os_log_impl(&dword_2218F0000, v22, OS_LOG_TYPE_ERROR, "%{public}@accessory identifier cannot be nil", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v20);
    objc_msgSend(MEMORY[0x24BDD1540], "hmErrorWithCode:", 20);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "respondWithError:", v7);
  }

}

- (void)handleRollPreferredHH2ControllerKeyMessage:(id)a3
{
  id v4;
  void *v5;
  HMDHomeManager *v6;
  NSObject *v7;
  void *v8;
  void *v9;
  void *v10;
  int v11;
  void *v12;
  int v13;
  void *v14;
  __int16 v15;
  void *v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  v4 = a3;
  v5 = (void *)MEMORY[0x227676638]();
  v6 = self;
  HMFGetOSLogHandle();
  v7 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "shortDescription");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v13 = 138543618;
    v14 = v8;
    v15 = 2112;
    v16 = v9;
    _os_log_impl(&dword_2218F0000, v7, OS_LOG_TYPE_INFO, "%{public}@Handling roll preferred HH2 controller key message: %@", (uint8_t *)&v13, 0x16u);

  }
  objc_autoreleasePoolPop(v5);
  objc_msgSend(MEMORY[0x24BE1BC08], "systemStore");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v11 = objc_msgSend(v10, "triggerPreferredHH2ControllerKeyRoll");

  if (v11)
  {
    objc_msgSend(v4, "respondWithSuccess");
  }
  else
  {
    objc_msgSend(MEMORY[0x24BDD1540], "hmfErrorWithCode:", 15);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "respondWithError:", v12);

  }
}

- (void)handleDeleteModelMessage:(id)a3
{
  id v4;
  char v5;
  void *v6;
  HMDHomeManager *v7;
  NSObject *v8;
  NSObject *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  id v18;
  void *v19;
  void *v20;
  HMDHomeManager *v21;
  NSObject *v22;
  void *v23;
  _QWORD v24[4];
  id v25;
  id v26;
  HMDHomeManager *v27;
  id v28;
  uint8_t buf[4];
  void *v30;
  __int16 v31;
  void *v32;
  __int16 v33;
  void *v34;
  uint64_t v35;

  v35 = *MEMORY[0x24BDAC8D0];
  v4 = a3;
  v5 = isInternalBuild();
  v6 = (void *)MEMORY[0x227676638]();
  v7 = self;
  HMFGetOSLogHandle();
  v8 = objc_claimAutoreleasedReturnValue();
  v9 = v8;
  if ((v5 & 1) != 0)
  {
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "shortDescription");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "messagePayload");
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543874;
      v30 = v10;
      v31 = 2112;
      v32 = v11;
      v33 = 2112;
      v34 = v12;
      _os_log_impl(&dword_2218F0000, v9, OS_LOG_TYPE_INFO, "%{public}@Asked to delete the modelID from working store: %@ / %@", buf, 0x20u);

    }
    objc_autoreleasePoolPop(v6);
    objc_msgSend(v4, "messagePayload");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "hmf_UUIDForKey:", *MEMORY[0x24BDD6048]);
    v14 = (void *)objc_claimAutoreleasedReturnValue();

    if (v14)
    {
      -[HMDHomeManager backingStore](v7, "backingStore");
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v15, "context");
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v16, "managedObjectContext");
      v17 = (void *)objc_claimAutoreleasedReturnValue();

      v24[0] = MEMORY[0x24BDAC760];
      v24[1] = 3221225472;
      v24[2] = __43__HMDHomeManager_handleDeleteModelMessage___block_invoke;
      v24[3] = &unk_24E79A910;
      v25 = v14;
      v26 = v17;
      v27 = v7;
      v28 = v4;
      v18 = v17;
      objc_msgSend(v18, "performBlock:", v24);

    }
    else
    {
      v20 = (void *)MEMORY[0x227676638]();
      v21 = v7;
      HMFGetOSLogHandle();
      v22 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v23 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543362;
        v30 = v23;
        _os_log_impl(&dword_2218F0000, v22, OS_LOG_TYPE_ERROR, "%{public}@Model id was not missing from the message payload", buf, 0xCu);

      }
      objc_autoreleasePoolPop(v20);
      objc_msgSend(MEMORY[0x24BDD1540], "hmErrorWithCode:", 20);
      v18 = (id)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "respondWithError:", v18);
    }

  }
  else
  {
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v30 = v19;
      _os_log_impl(&dword_2218F0000, v9, OS_LOG_TYPE_ERROR, "%{public}@Not supported in non-internal builds", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v6);
    objc_msgSend(MEMORY[0x24BDD1540], "hmErrorWithCode:", 10);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "respondWithError:", v14);
  }

}

- (void)handleCheckIsUsingProductionObjectModelMessage:(id)a3
{
  id v4;
  _BOOL8 v5;
  void *v6;
  void *v7;
  void *v8;
  HMDHomeManager *v9;
  NSObject *v10;
  void *v11;
  uint64_t v12;
  void *v13;
  uint8_t buf[4];
  void *v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  v4 = a3;
  if ((isInternalBuild() & 1) != 0)
  {
    v5 = +[HMDCoreData isUsingProductionObjectModel](HMDCoreData, "isUsingProductionObjectModel");
    objc_msgSend(MEMORY[0x24BDD16E0], "numberWithBool:", v5, *MEMORY[0x24BDD6188]);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v13 = v6;
    objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", &v13, &v12, 1);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "respondWithPayload:", v7);

  }
  else
  {
    v8 = (void *)MEMORY[0x227676638]();
    v9 = self;
    HMFGetOSLogHandle();
    v10 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v15 = v11;
      _os_log_impl(&dword_2218F0000, v10, OS_LOG_TYPE_ERROR, "%{public}@Not supported in non-internal builds", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v8);
    objc_msgSend(MEMORY[0x24BDD1540], "hmErrorWithCode:", 10);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "respondWithError:", v6);
  }

}

- (void)_handleHH2SentinelZonePresent:(id)a3
{
  id v4;
  void *v5;
  HMDHomeManager *v6;
  NSObject *v7;
  void *v8;
  void *v9;
  int v10;
  void *v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v4 = a3;
  v5 = (void *)MEMORY[0x227676638]();
  v6 = self;
  HMFGetOSLogHandle();
  v7 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v10 = 138543362;
    v11 = v8;
    _os_log_impl(&dword_2218F0000, v7, OS_LOG_TYPE_INFO, "%{public}@HH2 sentinel zone detected", (uint8_t *)&v10, 0xCu);

  }
  objc_autoreleasePoolPop(v5);
  -[HMDHomeManager uuid](v6, "uuid");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHomeManager updateGenerationCounterWithReason:sourceUUID:shouldNotifyClients:](v6, "updateGenerationCounterWithReason:sourceUUID:shouldNotifyClients:", CFSTR("HH2 sentinel zone detected"), v9, 1);

}

- (void)_handleEnableUARPPacketCaptureRequest:(id)a3
{
  id v4;
  int v5;
  uint64_t v6;
  void *v7;
  BOOL v8;
  void *v9;
  void *v10;
  char v11;
  void *v12;
  HMDHomeManager *v13;
  NSObject *v14;
  void *v15;
  const char *v16;
  NSObject *v17;
  uint32_t v18;
  void *v19;
  int v20;
  void *v21;
  __int16 v22;
  const __CFString *v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v4 = a3;
  v5 = objc_msgSend(v4, "BOOLForKey:", *MEMORY[0x24BDD5F60]);
  objc_msgSend(v4, "stringForKey:", *MEMORY[0x24BDD5F70]);
  v6 = objc_claimAutoreleasedReturnValue();
  v7 = (void *)v6;
  if (v5)
    v8 = v6 == 0;
  else
    v8 = 0;
  if (!v8)
  {
    -[HMDHomeManager accessoryFirmwareUpdateManager](self, "accessoryFirmwareUpdateManager");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v10 = v9;
    if (v5)
    {
      v11 = objc_msgSend(v9, "startUARPPacketCapture:", v7);

      if ((v11 & 1) == 0)
      {
        v12 = (void *)MEMORY[0x227676638]();
        v13 = self;
        HMFGetOSLogHandle();
        v14 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
        {
          HMFGetLogIdentifier();
          v15 = (void *)objc_claimAutoreleasedReturnValue();
          v20 = 138543618;
          v21 = v15;
          v22 = 2112;
          v23 = CFSTR("Request to enable UARP packet capture failed");
          v16 = "%{public}@%@";
          v17 = v14;
          v18 = 22;
LABEL_11:
          _os_log_impl(&dword_2218F0000, v17, OS_LOG_TYPE_ERROR, v16, (uint8_t *)&v20, v18);

          goto LABEL_12;
        }
        goto LABEL_12;
      }
    }
    else
    {
      objc_msgSend(v9, "stopUARPPacketCapture");

    }
    objc_msgSend(v4, "respondWithSuccess");
    goto LABEL_15;
  }
  v12 = (void *)MEMORY[0x227676638]();
  v13 = self;
  HMFGetOSLogHandle();
  v14 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
  {
    HMFGetLogIdentifier();
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    v20 = 138543362;
    v21 = v15;
    v16 = "%{public}@Request to enable UARP packet capture is missing capture path";
    v17 = v14;
    v18 = 12;
    goto LABEL_11;
  }
LABEL_12:

  objc_autoreleasePoolPop(v12);
  objc_msgSend(MEMORY[0x24BDD1540], "hmErrorWithCode:", 3);
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "respondWithError:", v19);

LABEL_15:
}

- (id)accessorySetupMetricDispatcherForAccessoryUUID:(id)a3
{
  id v4;
  os_unfair_lock_s *p_lock;
  void *v6;
  id v7;
  void *v8;
  _QWORD v10[4];
  id v11;

  v4 = a3;
  p_lock = &self->_lock;
  os_unfair_lock_lock_with_options();
  -[HMDHomeManager accessorySetupMetricDispatchers](self, "accessorySetupMetricDispatchers");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v10[0] = MEMORY[0x24BDAC760];
  v10[1] = 3221225472;
  v10[2] = __65__HMDHomeManager_accessorySetupMetricDispatcherForAccessoryUUID___block_invoke;
  v10[3] = &unk_24E796D78;
  v7 = v4;
  v11 = v7;
  objc_msgSend(v6, "na_firstObjectPassingTest:", v10);
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  os_unfair_lock_unlock(p_lock);
  return v8;
}

- (void)addAccessorySetupMetricDispatcher:(id)a3
{
  os_unfair_lock_s *p_lock;
  NSMutableArray *v5;
  NSMutableArray *accessorySetupMetricDispatchers;
  void *v7;
  id v8;

  v8 = a3;
  p_lock = &self->_lock;
  os_unfair_lock_lock_with_options();
  if (!self->_accessorySetupMetricDispatchers)
  {
    objc_msgSend(MEMORY[0x24BDBCEB8], "array");
    v5 = (NSMutableArray *)objc_claimAutoreleasedReturnValue();
    accessorySetupMetricDispatchers = self->_accessorySetupMetricDispatchers;
    self->_accessorySetupMetricDispatchers = v5;

  }
  -[HMDHomeManager accessorySetupMetricDispatchers](self, "accessorySetupMetricDispatchers");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "addObject:", v8);

  os_unfair_lock_unlock(p_lock);
}

- (void)removeAccessorySetupMetricDispatcherForAccessoryUUID:(id)a3
{
  id v4;
  NSMutableArray *accessorySetupMetricDispatchers;
  void *v6;
  id v7;
  _QWORD v8[4];
  id v9;

  v4 = a3;
  if (v4)
  {
    v7 = v4;
    os_unfair_lock_lock_with_options();
    accessorySetupMetricDispatchers = self->_accessorySetupMetricDispatchers;
    v8[0] = MEMORY[0x24BDAC760];
    v8[1] = 3221225472;
    v8[2] = __71__HMDHomeManager_removeAccessorySetupMetricDispatcherForAccessoryUUID___block_invoke;
    v8[3] = &unk_24E796D78;
    v9 = v7;
    -[NSMutableArray na_firstObjectPassingTest:](accessorySetupMetricDispatchers, "na_firstObjectPassingTest:", v8);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    if (v6)
      -[NSMutableArray removeObject:](self->_accessorySetupMetricDispatchers, "removeObject:", v6);

    os_unfair_lock_unlock(&self->_lock);
    v4 = v7;
  }

}

- (id)firstSetupSessionIdentifierOutputStartTime:(double *)a3
{
  os_unfair_lock_s *p_lock;
  void *v6;
  void *v7;
  void *v8;
  void *v9;

  p_lock = &self->_lock;
  os_unfair_lock_lock_with_options();
  if (-[NSMutableArray count](self->_accessorySetupMetricDispatchers, "count"))
  {
    -[NSMutableArray firstObject](self->_accessorySetupMetricDispatchers, "firstObject");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v7 = v6;
    if (a3)
    {
      objc_msgSend(v6, "trackingInfo");
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      *a3 = (double)(unint64_t)objc_msgSend(v8, "startTime");

    }
    objc_msgSend(v7, "setupSessionIdentifier");
    v9 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v9 = 0;
    if (a3)
      *a3 = 0.0;
  }
  os_unfair_lock_unlock(p_lock);
  return v9;
}

- (id)accessorySetupMetricDispatchersForHome:(id)a3
{
  id v4;
  os_unfair_lock_s *p_lock;
  NSMutableArray *accessorySetupMetricDispatchers;
  id v7;
  void *v8;
  _QWORD v10[4];
  id v11;

  v4 = a3;
  p_lock = &self->_lock;
  os_unfair_lock_lock_with_options();
  accessorySetupMetricDispatchers = self->_accessorySetupMetricDispatchers;
  v10[0] = MEMORY[0x24BDAC760];
  v10[1] = 3221225472;
  v10[2] = __57__HMDHomeManager_accessorySetupMetricDispatchersForHome___block_invoke;
  v10[3] = &unk_24E796D78;
  v7 = v4;
  v11 = v7;
  -[NSMutableArray na_filter:](accessorySetupMetricDispatchers, "na_filter:", v10);
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  os_unfair_lock_unlock(p_lock);
  return v8;
}

- (BOOL)isCurrentResidentDeviceRunningThreadNetwork:(id)a3
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t i;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  _BYTE v12[128];
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  if (a3)
  {
    v10 = 0u;
    v11 = 0u;
    v8 = 0u;
    v9 = 0u;
    -[HMDHomeManager homes](self, "homes", 0);
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
    if (v4)
    {
      v5 = *(_QWORD *)v9;
      while (2)
      {
        for (i = 0; i != v4; ++i)
        {
          if (*(_QWORD *)v9 != v5)
            objc_enumerationMutation(v3);
          if ((objc_msgSend(*(id *)(*((_QWORD *)&v8 + 1) + 8 * i), "isCurrentDeviceAvailableResident") & 1) != 0)
          {
            LOBYTE(v4) = 1;
            goto LABEL_12;
          }
        }
        v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
        if (v4)
          continue;
        break;
      }
    }
LABEL_12:

  }
  else
  {
    LOBYTE(v4) = 0;
  }
  return v4;
}

- (BOOL)isStartThreadNetworkInProgress
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  void *v8;
  BOOL v9;
  void *v10;
  HMDHomeManager *v11;
  NSObject *v12;
  void *v13;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint8_t buf[4];
  void *v20;
  __int16 v21;
  void *v22;
  _BYTE v23[128];
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v15 = 0u;
  v16 = 0u;
  v17 = 0u;
  v18 = 0u;
  -[HMDHomeManager homes](self, "homes", 0);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v15, v23, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v16;
    while (2)
    {
      for (i = 0; i != v5; ++i)
      {
        if (*(_QWORD *)v16 != v6)
          objc_enumerationMutation(v3);
        v8 = *(void **)(*((_QWORD *)&v15 + 1) + 8 * i);
        if (objc_msgSend(v8, "startThreadNetworkInProgress"))
        {
          v10 = (void *)MEMORY[0x227676638]();
          v11 = self;
          HMFGetOSLogHandle();
          v12 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
          {
            HMFGetLogIdentifier();
            v13 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 138543618;
            v20 = v13;
            v21 = 2112;
            v22 = v8;
            _os_log_impl(&dword_2218F0000, v12, OS_LOG_TYPE_INFO, "%{public}@thread start in progress for %@", buf, 0x16u);

          }
          objc_autoreleasePoolPop(v10);
          v9 = 1;
          goto LABEL_13;
        }
      }
      v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v15, v23, 16);
      if (v5)
        continue;
      break;
    }
  }
  v9 = 0;
LABEL_13:

  return v9;
}

- (id)topicNameForMediaGroupParticipantDataLocalStorage:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  HMDHomeManager *v15;
  NSObject *v16;
  void *v17;
  void *v18;
  HMDHomeManager *v19;
  NSObject *v20;
  void *v21;
  int v23;
  void *v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v4 = a3;
  -[HMDHomeManager _accessoryOfCurrentDevice](self, "_accessoryOfCurrentDevice");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = v5;
  if (v5)
  {
    objc_msgSend(v5, "home");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = v7;
    if (v7)
    {
      v9 = (void *)MEMORY[0x24BDD73A0];
      v10 = *MEMORY[0x24BDD4BA8];
      objc_msgSend(v7, "uuid");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v6, "uuid");
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v9, "topicFromSuffixID:homeUUID:accessoryUUID:", v10, v11, v12);
      v13 = (void *)objc_claimAutoreleasedReturnValue();

    }
    else
    {
      v18 = (void *)MEMORY[0x227676638]();
      v19 = self;
      HMFGetOSLogHandle();
      v20 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v20, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v21 = (void *)objc_claimAutoreleasedReturnValue();
        v23 = 138543362;
        v24 = v21;
        _os_log_impl(&dword_2218F0000, v20, OS_LOG_TYPE_INFO, "%{public}@Failed to get media group participant data topic name due to no home on current accessory", (uint8_t *)&v23, 0xCu);

      }
      objc_autoreleasePoolPop(v18);
      v13 = 0;
    }

  }
  else
  {
    v14 = (void *)MEMORY[0x227676638]();
    v15 = self;
    HMFGetOSLogHandle();
    v16 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      v23 = 138543362;
      v24 = v17;
      _os_log_impl(&dword_2218F0000, v16, OS_LOG_TYPE_INFO, "%{public}@Failed to get media group participant data topic name due to no current accessory", (uint8_t *)&v23, 0xCu);

    }
    objc_autoreleasePoolPop(v14);
    v13 = 0;
  }

  return v13;
}

- (void)mediaGroupParticipantLocalDataStorage:(id)a3 didChangeDestinationIdentifier:(id)a4 forDestinationControllerIdentifier:(id)a5
{
  id v8;
  id v9;
  id v10;
  void *v11;
  void *v12;
  void *v13;
  HMDHomeManager *v14;
  NSObject *v15;
  void *v16;
  int v17;
  void *v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v8 = a3;
  v9 = a4;
  v10 = a5;
  -[HMDHomeManager currentMediaGroupsAggregateCunsumer](self, "currentMediaGroupsAggregateCunsumer");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v12 = v11;
  if (v11)
  {
    if (v9)
      objc_msgSend(v11, "unstageNullDestinationForCurrentDestinationController");
    else
      objc_msgSend(v11, "stageNullDestinationForCurrentDestinationControllerIdentifier:", v10);
  }
  else
  {
    v13 = (void *)MEMORY[0x227676638]();
    v14 = self;
    HMFGetOSLogHandle();
    v15 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      v17 = 138543362;
      v18 = v16;
      _os_log_impl(&dword_2218F0000, v15, OS_LOG_TYPE_ERROR, "%{public}@Failed to stage current destination controller change due to no current consumer", (uint8_t *)&v17, 0xCu);

    }
    objc_autoreleasePoolPop(v13);
  }

}

- (id)currentMediaGroupsAggregateCunsumer
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  HMDHomeManager *v7;
  NSObject *v8;
  void *v9;
  int v11;
  void *v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  -[HMDHomeManager currentAccessoryHome](self, "currentAccessoryHome");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = v3;
  if (v3)
  {
    objc_msgSend(v3, "mediaGroupsAggregateConsumer");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v6 = (void *)MEMORY[0x227676638]();
    v7 = self;
    HMFGetOSLogHandle();
    v8 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      v11 = 138543362;
      v12 = v9;
      _os_log_impl(&dword_2218F0000, v8, OS_LOG_TYPE_ERROR, "%{public}@Failed to get current media groups aggregate consumer due to no current accessory home", (uint8_t *)&v11, 0xCu);

    }
    objc_autoreleasePoolPop(v6);
    v5 = 0;
  }

  return v5;
}

- (id)currentAccessoryHome
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  HMDHomeManager *v7;
  NSObject *v8;
  void *v9;
  int v11;
  void *v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  -[HMDHomeManager _accessoryOfCurrentDevice](self, "_accessoryOfCurrentDevice");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  if (v3)
  {
    -[HMDHomeManager _accessoryOfCurrentDevice](self, "_accessoryOfCurrentDevice");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "home");
    v5 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v6 = (void *)MEMORY[0x227676638]();
    v7 = self;
    HMFGetOSLogHandle();
    v8 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      v11 = 138543362;
      v12 = v9;
      _os_log_impl(&dword_2218F0000, v8, OS_LOG_TYPE_ERROR, "%{public}@Failed to get current accessory home due to no current accessory", (uint8_t *)&v11, 0xCu);

    }
    objc_autoreleasePoolPop(v6);
    v5 = 0;
  }

  return v5;
}

- (id)currentAccessoryUUID
{
  void *v2;
  void *v3;
  id v4;
  void *v5;

  -[HMDHomeManager _accessoryOfCurrentDevice](self, "_accessoryOfCurrentDevice");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v3 = v2;
  else
    v3 = 0;
  v4 = v3;

  if (v4)
  {
    objc_msgSend(v4, "uuid");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v5 = 0;
  }

  return v5;
}

- (id)currentAccessoryHomeUUID
{
  void *v2;
  void *v3;
  id v4;
  void *v5;
  void *v6;

  -[HMDHomeManager _accessoryOfCurrentDevice](self, "_accessoryOfCurrentDevice");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v3 = v2;
  else
    v3 = 0;
  v4 = v3;

  if (v4)
  {
    objc_msgSend(v4, "home");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "uuid");
    v6 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v6 = 0;
  }

  return v6;
}

- (id)createCurrentAccessoryCapabilities
{
  void *v3;
  uint64_t v4;
  void *v5;
  HMDHomeManager *v6;
  NSObject *v7;
  void *v8;
  void *v9;
  void *v10;
  HMDMobileGestaltClient *v11;
  void *v12;
  id v13;
  HMDMobileGestaltClient *v14;
  id v15;
  _BOOL4 v16;
  int v17;
  int v18;
  int v19;
  id v20;
  void *v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  _BOOL4 v26;
  _BOOL4 v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  id v69;
  void *v70;
  void *v71;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  _BOOL4 v82;
  uint64_t v83;
  _BOOL4 v84;
  uint64_t v85;
  _BOOL4 v86;
  uint64_t v87;
  int v88;
  uint64_t v89;
  _BOOL4 v90;
  uint64_t v91;
  _BOOL4 v92;
  uint64_t v93;
  unint64_t v94;
  _BOOL4 v95;
  uint64_t v96;
  _BOOL4 v97;
  uint64_t v98;
  _BOOL4 v99;
  uint64_t v100;
  _BOOL4 v101;
  uint64_t v102;
  int v103;
  uint64_t v104;
  _BOOL4 v105;
  uint64_t v106;
  _BOOL4 v107;
  uint64_t v108;
  _BOOL4 v109;
  uint64_t v110;
  _BOOL4 v111;
  _BOOL4 v112;
  _BOOL4 v113;
  _BOOL4 v114;
  _BOOL4 v115;
  int v116;
  _BOOL4 v117;
  _BOOL4 v118;
  _BOOL4 v119;
  _BOOL4 v120;
  _BOOL4 v121;
  _BOOL4 v122;
  void *v123;
  HMDMobileGestaltClient *v124;
  uint8_t buf[24];
  void *v126;
  uint64_t v127;

  v127 = *MEMORY[0x24BDAC8D0];
  -[HMDHomeManager idsServerBag](self, "idsServerBag");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "homeSafetySecurityEnabled");

  v5 = (void *)MEMORY[0x227676638]();
  v6 = self;
  HMFGetOSLogHandle();
  v7 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHomeManager idsServerBag](v6, "idsServerBag");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    HMFBooleanToString();
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543874;
    *(_QWORD *)&buf[4] = v8;
    *(_WORD *)&buf[12] = 2112;
    *(_QWORD *)&buf[14] = v9;
    *(_WORD *)&buf[22] = 2112;
    v126 = v10;
    _os_log_impl(&dword_2218F0000, v7, OS_LOG_TYPE_INFO, "%{public}@self.idsServerBag: %@, homeSafetySecurityEnabled: %@", buf, 0x20u);

  }
  objc_autoreleasePoolPop(v5);
  v11 = -[HMDMobileGestaltClient initWithHomeSafetySecurityEnabled:]([HMDMobileGestaltClient alloc], "initWithHomeSafetySecurityEnabled:", v4);
  objc_msgSend(MEMORY[0x24BE3F260], "productInfo");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  +[HMDHomeKitVersion currentVersion](HMDHomeKitVersion, "currentVersion");
  v13 = (id)objc_claimAutoreleasedReturnValue();
  v14 = v11;
  v15 = v12;
  v122 = productSupportsKeychainSync(v15);
  v121 = productSupportsDeviceSetup(v15);
  v120 = productSupportsKeyTransferClient(v15, v14, v13);
  v119 = productSupportsKeyTransferServer(v15);
  v117 = productSupportsKeychainSync(v15);
  v116 = productSupportsCloudDataSync(v15);
  v118 = productSupportsWholeHouseAudio(v15);
  v115 = productSupportsAssistantAccessControl(v15);
  v114 = productSupportsHomeInvitation(v15);
  v113 = productSupportsTargetControl(v15);
  v112 = productSupportsMultiUser(v15);
  v111 = productSupportsHomeLevelLocationServiceSetting(v15);
  v109 = productSupportsCompanionInitiatedRestart(v15);
  v107 = productSupportsMusicAlarm(v15);
  v105 = productSupportsAnnounce(v15);
  v103 = productSupportsAudioAnalysis(v15, v14);
  v101 = productSupportsThirdPartyMusic(v15);
  v99 = productSupportsPreferredMediaUser(v15);
  v97 = productSupportsThirdPartyMusic(v15);
  v95 = productSupportsUserMediaSettings(v15);
  v92 = productSupportsCoordinationDoorbellChime(v15);
  v90 = productSupportsHomeHub(v15, v14);
  v88 = productSupportsAudioReturnChannel(v15, v14);
  v86 = productSupportsUserMediaSettings(v15);
  v84 = productSupportsCaptiveNetworks(v15);
  v123 = v13;
  v16 = productSupportsMessagedHomePodSettings(v15, v13);
  v82 = productSupportsMediaActions(v15);
  v124 = v14;
  v17 = productSupportsDropIn(v15, v14);
  v18 = productSupportsRMVonAppleTV(v15);
  v19 = productSupportsJustSiri(v15);
  memset(buf, 0, sizeof(buf));
  v20 = v15;
  objc_msgSend(v20, "softwareVersion");
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  v22 = v21;
  if (v21)
    objc_msgSend(v21, "operatingSystemVersion");
  else
    memset(buf, 0, sizeof(buf));

  v23 = objc_msgSend(v20, "productPlatform");
  v24 = objc_msgSend(v20, "productClass");

  v25 = 0;
  if (v24 == 6 && v23 == 4)
    v25 = (unint64_t)(HMFOperatingSystemVersionCompare() != 1) << 31;
  v94 = v25;
  v26 = productSupportsCoordinationFreeDoorbellChime(v20);
  v27 = productSupportsCompanionInitiatedObliterate(v20);
  v28 = v20;
  v29 = objc_msgSend(v28, "productPlatform");
  v30 = objc_msgSend(v28, "productClass");
  memset(buf, 0, sizeof(buf));
  objc_msgSend(v28, "softwareVersion");
  v31 = (void *)objc_claimAutoreleasedReturnValue();

  if (v31)
    objc_msgSend(v31, "operatingSystemVersion");
  else
    memset(buf, 0, sizeof(buf));

  v32 = 0;
  if (v30 == 4 && v29 == 4)
    v32 = (unint64_t)(HMFOperatingSystemVersionCompare() != 1) << 34;
  v81 = v32;
  if (v27)
    v33 = 0x200000000;
  else
    v33 = 0;
  v34 = 0x100000000;
  if (!v26)
    v34 = 0;
  v79 = v34;
  v80 = v33;
  if (v19)
    v35 = 0x40000000;
  else
    v35 = 0;
  v36 = 0x20000000;
  if (!v18)
    v36 = 0;
  v77 = v36;
  v78 = v35;
  if (v17)
    v37 = 0x10000000;
  else
    v37 = 0;
  if (v82)
    v38 = 0x8000000;
  else
    v38 = 0;
  v39 = 0x4000000;
  if (!v16)
    v39 = 0;
  v73 = v39;
  v75 = v37;
  v40 = 0x2000000;
  if (!v84)
    v40 = 0;
  v83 = v38;
  v85 = v40;
  if (v86)
    v41 = 0x1000000;
  else
    v41 = 0;
  v42 = 0x800000;
  if (!v88)
    v42 = 0;
  v87 = v41;
  v89 = v42;
  if (v90)
    v43 = 0x400000;
  else
    v43 = 0;
  v44 = 0x200000;
  if (!v92)
    v44 = 0;
  v91 = v43;
  v93 = v44;
  if (v95)
    v45 = 0x100000;
  else
    v45 = 0;
  v46 = 0x80000;
  if (!v97)
    v46 = 0;
  v96 = v45;
  v98 = v46;
  if (v99)
    v47 = 0x20000;
  else
    v47 = 0;
  v48 = 0x10000;
  if (!v101)
    v48 = 0;
  v100 = v47;
  v102 = v48;
  if (v103)
    v49 = 0x8000;
  else
    v49 = 0;
  v50 = 0x4000;
  if (!v105)
    v50 = 0;
  v104 = v49;
  v106 = v50;
  if (v107)
    v51 = 0x2000;
  else
    v51 = 0;
  v52 = 4096;
  if (!v109)
    v52 = 0;
  v108 = v51;
  v110 = v52;
  if (v111)
    v53 = 2048;
  else
    v53 = 0;
  if (v112)
    v54 = 1024;
  else
    v54 = 0;
  if (v113)
    v55 = 512;
  else
    v55 = 0;
  if (v114)
    v56 = 256;
  else
    v56 = 0;
  if (v115)
    v57 = 128;
  else
    v57 = 0;
  v58 = 2;
  if (!v121)
    v58 = 0;
  v59 = v58 | v122;
  v60 = 4;
  if (!v120)
    v60 = 0;
  v61 = v59 | v60;
  v62 = 8;
  if (!v119)
    v62 = 0;
  v63 = 16;
  if (!v117)
    v63 = 0;
  v64 = v62 | v63;
  v65 = 32;
  if (!v116)
    v65 = 0;
  v66 = v61 | v64 | v65;
  if (v118)
    v67 = 64;
  else
    v67 = 0;
  objc_msgSend(v28, "productClass", v73, v75);

  v68 = v66 | v67 | v57 | v56 | v55 | v54 | v53 | v110 | v108 | v106 | v104 | v102 | v100 | v98 | v96 | v93 | v91 | v89 | v87 | v85 | v74 | v83 | v76 | v77 | v78 | v94 | v79 | v80 | v81;
  v69 = objc_alloc(MEMORY[0x24BDD7330]);
  objc_msgSend(MEMORY[0x24BDD1880], "UUID");
  v70 = (void *)objc_claimAutoreleasedReturnValue();
  v71 = (void *)objc_msgSend(v69, "initWithTagUUID:capabilities:", v70, v68);

  return v71;
}

- (id)createCurrentResidentCapabilities
{
  void *v3;
  uint64_t v4;
  void *v5;
  HMDHomeManager *v6;
  NSObject *v7;
  void *v8;
  void *v9;
  void *v10;
  HMDMobileGestaltClient *v11;
  void *v12;
  void *v13;
  id v14;
  HMDMobileGestaltClient *v15;
  id v16;
  _BOOL4 v17;
  _BOOL4 v18;
  uint64_t v19;
  _BOOL4 v20;
  uint64_t v21;
  _BOOL4 v22;
  uint64_t v23;
  uint64_t v24;
  _BOOL4 v25;
  uint64_t v26;
  _BOOL4 v27;
  uint64_t v28;
  _BOOL4 v29;
  uint64_t v30;
  _BOOL4 v31;
  uint64_t v32;
  _BOOL4 v33;
  uint64_t v34;
  _BOOL4 v35;
  uint64_t v36;
  _BOOL4 v37;
  uint64_t v38;
  _BOOL4 v39;
  uint64_t v40;
  _BOOL4 v41;
  uint64_t v42;
  _BOOL4 v43;
  uint64_t v44;
  _BOOL4 v45;
  uint64_t v46;
  _BOOL4 v47;
  uint64_t v48;
  _BOOL4 v49;
  uint64_t v50;
  _BOOL4 v51;
  uint64_t v52;
  _BOOL4 v53;
  uint64_t v54;
  _BOOL4 v55;
  uint64_t v56;
  _BOOL4 AccessoryCommunication;
  uint64_t v58;
  _BOOL4 v59;
  uint64_t v60;
  _BOOL4 v61;
  uint64_t v62;
  id v63;
  void *v64;
  void *v65;
  void *v66;
  uint64_t v67;
  uint64_t v68;
  id v69;
  void *v70;
  void *v71;
  uint64_t v72;
  uint64_t v73;
  id v74;
  HMDMobileGestaltClient *v75;
  id v76;
  void *v77;
  void *v78;
  _BOOL4 IsResidentCapable;
  uint64_t v80;
  id v81;
  void *v82;
  void *v83;
  uint64_t v84;
  uint64_t v85;
  id v86;
  void *v87;
  void *v88;
  uint64_t v89;
  uint64_t v90;
  int v91;
  uint64_t v92;
  int v93;
  uint64_t v94;
  id v95;
  void *v96;
  void *v97;
  _BOOL8 v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  int v102;
  uint64_t v103;
  uint64_t v104;
  id v105;
  void *v106;
  void *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  id v112;
  void *v113;
  void *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  unint64_t v118;
  unint64_t v119;
  id v120;
  void *v121;
  uint64_t v123;
  unint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint8_t buf[24];
  void *v153;
  uint64_t v154;

  v154 = *MEMORY[0x24BDAC8D0];
  -[HMDHomeManager idsServerBag](self, "idsServerBag");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "homeSafetySecurityEnabled");

  v5 = (void *)MEMORY[0x227676638]();
  v6 = self;
  HMFGetOSLogHandle();
  v7 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHomeManager idsServerBag](v6, "idsServerBag");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    HMFBooleanToString();
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543874;
    *(_QWORD *)&buf[4] = v8;
    *(_WORD *)&buf[12] = 2112;
    *(_QWORD *)&buf[14] = v9;
    *(_WORD *)&buf[22] = 2112;
    v153 = v10;
    _os_log_impl(&dword_2218F0000, v7, OS_LOG_TYPE_INFO, "%{public}@self.idsServerBag: %@, homeSafetySecurityEnabled: %@", buf, 0x20u);

  }
  objc_autoreleasePoolPop(v5);
  v11 = -[HMDMobileGestaltClient initWithHomeSafetySecurityEnabled:]([HMDMobileGestaltClient alloc], "initWithHomeSafetySecurityEnabled:", v4);
  objc_msgSend(MEMORY[0x24BE3F260], "productInfo");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  +[HMDHomeKitVersion currentVersion](HMDHomeKitVersion, "currentVersion");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  v14 = v12;
  v15 = v11;
  v16 = v13;
  if (productIsResidentCapable(v14))
  {
    v17 = productSupportsCameraRecording(v14);
    v18 = productSupportsRouterManagement(v14);
    v19 = 2;
    if (!v18)
      v19 = 0;
    v148 = v19;
    v20 = productSupportsShortcutActions(v14);
    v21 = 4;
    if (!v20)
      v21 = 0;
    v150 = v21;
    v22 = productSupportsMediaActions(v14);
    v23 = 8;
    if (!v22)
      v23 = 0;
    v149 = v23;
    if (productSupportsFirmwareUpdate(v14))
      v24 = 32;
    else
      v24 = 0;
    v25 = productSupportsResidentFirmwareUpdate(v14);
    v26 = 64;
    if (!v25)
      v26 = 0;
    v147 = v26;
    v27 = productSupportsCameraActivityZones(v14);
    v28 = 128;
    if (!v27)
      v28 = 0;
    v146 = v28;
    v29 = productSupportsCameraActivityZones(v14);
    v30 = 256;
    if (!v29)
      v30 = 0;
    v145 = v30;
    v31 = productSupportsCameraActivityZones(v14);
    v32 = 512;
    if (!v31)
      v32 = 0;
    v144 = v32;
    v33 = productSupportsCameraActivityZones(v14);
    v34 = 1024;
    if (!v33)
      v34 = 0;
    v143 = v34;
    v35 = productSupportsAnnounce(v14);
    v36 = 2048;
    if (!v35)
      v36 = 0;
    v142 = v36;
    v37 = productSupportsWakeOnLAN(v14);
    v38 = 4096;
    if (!v37)
      v38 = 0;
    v141 = v38;
    v39 = productSupportsLockNotificationContext(v14);
    v40 = 0x2000;
    if (!v39)
      v40 = 0;
    v140 = v40;
    v41 = productSupportsLockNotificationContext(v14);
    v42 = 0x4000;
    if (!v41)
      v42 = 0;
    v139 = v42;
    v43 = productSupportsLockNotificationContext(v14);
    v44 = 0x8000;
    if (!v43)
      v44 = 0;
    v138 = v44;
    v45 = productSupportsLockNotificationContext(v14);
    v46 = 0x10000;
    if (!v45)
      v46 = 0;
    v137 = v46;
    v47 = productSupportsLockNotificationContext(v14);
    v48 = 0x20000;
    if (!v47)
      v48 = 0;
    v136 = v48;
    v49 = productSupportsSiriEndpointSetup(v14);
    v50 = 0x80000;
    if (!v49)
      v50 = 0;
    v135 = v50;
    v51 = productSupportsCustomMediaApplicationDestination(v14);
    v52 = 0x100000;
    if (!v51)
      v52 = 0;
    v134 = v52;
    v53 = productSupportsUnifiedMediaNotifications(v14);
    v54 = 0x200000;
    if (!v53)
      v54 = 0;
    v133 = v54;
    v55 = productSupportsHomeHub(v14, v15);
    v56 = 0x400000;
    if (!v55)
      v56 = 0;
    v132 = v56;
    AccessoryCommunication = productSupportsResidentFirstAccessoryCommunication(v14);
    v58 = 0x800000;
    if (!AccessoryCommunication)
      v58 = 0;
    v131 = v58;
    v59 = productSupportsThreadNetworkCredentialSharing(v14, v15, v16);
    v60 = 0x1000000;
    if (!v59)
      v60 = 0;
    v130 = v60;
    v61 = productSupportsMatterSharedAdminPairing(v14, v15, v16);
    v62 = 0x2000000;
    if (!v61)
      v62 = 0;
    v129 = v62;
    memset(buf, 0, sizeof(buf));
    v63 = v14;
    objc_msgSend(v63, "softwareVersion");
    v64 = (void *)objc_claimAutoreleasedReturnValue();
    v65 = v64;
    if (v64)
      objc_msgSend(v64, "operatingSystemVersion");
    else
      memset(buf, 0, sizeof(buf));

    v67 = objc_msgSend(v63, "productPlatform");
    v68 = objc_msgSend(v63, "productClass");

    if ((v68 | 2) == 6 && v67 == 4)
      v124 = (unint64_t)(HMFOperatingSystemVersionCompare() != 1) << 26;
    else
      v124 = 0;
    memset(buf, 0, sizeof(buf));
    v69 = v63;
    objc_msgSend(v69, "softwareVersion");
    v70 = (void *)objc_claimAutoreleasedReturnValue();
    v71 = v70;
    if (v70)
      objc_msgSend(v70, "operatingSystemVersion");
    else
      memset(buf, 0, sizeof(buf));

    v72 = objc_msgSend(v69, "productPlatform");
    v73 = objc_msgSend(v69, "productClass");

    v151 = v24;
    if ((v73 | 2) == 6
      && v72 == 4
      && (HMFOperatingSystemVersionCompare() != 1
       || _os_feature_enabled_impl()
       || CFPreferencesGetAppBooleanValue(CFSTR("MatterTTU"), CFSTR("/Library/Managed Preferences/mobile/com.apple.homed.plist"), 0)))
    {
      v123 = 0x8000000;
    }
    else
    {
      v123 = 0;
    }
    v74 = v69;
    v75 = v15;
    v76 = v16;
    memset(buf, 0, sizeof(buf));
    objc_msgSend(v74, "softwareVersion");
    v77 = (void *)objc_claimAutoreleasedReturnValue();
    v78 = v77;
    if (v77)
      objc_msgSend(v77, "operatingSystemVersion");
    else
      memset(buf, 0, sizeof(buf));

    if (HMFOperatingSystemVersionCompare() == 1)
    {

      v128 = 0;
    }
    else
    {
      IsResidentCapable = productIsResidentCapable(v74);

      v80 = 0x10000000;
      if (!IsResidentCapable)
        v80 = 0;
      v128 = v80;
    }
    memset(buf, 0, sizeof(buf));
    v81 = v74;
    objc_msgSend(v81, "softwareVersion");
    v82 = (void *)objc_claimAutoreleasedReturnValue();
    v83 = v82;
    if (v82)
      objc_msgSend(v82, "operatingSystemVersion");
    else
      memset(buf, 0, sizeof(buf));

    v84 = objc_msgSend(v81, "productPlatform");
    v85 = objc_msgSend(v81, "productClass");

    if ((v85 | 2) == 6 && v84 == 4 && HMFOperatingSystemVersionCompare() != 1)
    {
      v93 = _os_feature_enabled_impl();
      v94 = 0x20000000;
      if (!v93)
        v94 = 0;
      v127 = v94;
    }
    else
    {
      v127 = 0;
    }
    memset(buf, 0, sizeof(buf));
    v86 = v81;
    objc_msgSend(v86, "softwareVersion");
    v87 = (void *)objc_claimAutoreleasedReturnValue();
    v88 = v87;
    if (v87)
      objc_msgSend(v87, "operatingSystemVersion");
    else
      memset(buf, 0, sizeof(buf));

    v89 = objc_msgSend(v86, "productPlatform");
    v90 = objc_msgSend(v86, "productClass");

    if ((v90 | 2) == 6 && v89 == 4)
    {
      if (HMFOperatingSystemVersionCompare() == 1)
      {
        v91 = _os_feature_enabled_impl();
        v92 = 0x40000000;
        if (!v91)
          v92 = 0;
      }
      else
      {
        v92 = 0x40000000;
      }
      v126 = v92;
    }
    else
    {
      v126 = 0;
    }
    memset(buf, 0, sizeof(buf));
    v95 = v86;
    objc_msgSend(v95, "softwareVersion");
    v96 = (void *)objc_claimAutoreleasedReturnValue();
    v97 = v96;
    if (v96)
      objc_msgSend(v96, "operatingSystemVersion");
    else
      memset(buf, 0, sizeof(buf));
    v98 = v17;

    v99 = objc_msgSend(v95, "productPlatform");
    v100 = objc_msgSend(v95, "productClass");

    if ((v100 | 2) == 6)
    {
      v101 = v148;
      if (v99 == 4)
      {
        if (HMFOperatingSystemVersionCompare() == 1)
        {
          v102 = _os_feature_enabled_impl();
          v103 = 0x80000000;
          if (!v102)
            v103 = 0;
        }
        else
        {
          v103 = 0x80000000;
        }
        v125 = v103;
      }
      else
      {
        v125 = 0;
      }
    }
    else
    {
      v125 = 0;
      v101 = v148;
    }
    if (productSupportsMatterOwnerCertFetch(v95, v75, v76))
      v104 = 0x100000000;
    else
      v104 = 0;
    memset(buf, 0, sizeof(buf));
    v105 = v95;
    objc_msgSend(v105, "softwareVersion");
    v106 = (void *)objc_claimAutoreleasedReturnValue();
    v107 = v106;
    if (v106)
      objc_msgSend(v106, "operatingSystemVersion");
    else
      memset(buf, 0, sizeof(buf));
    v108 = v101 | v98;

    v109 = objc_msgSend(v105, "productPlatform");
    v110 = objc_msgSend(v105, "productClass");

    if ((v110 | 2) == 6 && v109 == 4)
      v111 = (unint64_t)(HMFOperatingSystemVersionCompare() != 1) << 33;
    else
      v111 = 0;
    memset(buf, 0, sizeof(buf));
    v112 = v105;
    objc_msgSend(v112, "softwareVersion");
    v113 = (void *)objc_claimAutoreleasedReturnValue();
    v114 = v113;
    if (v113)
      objc_msgSend(v113, "operatingSystemVersion");
    else
      memset(buf, 0, sizeof(buf));
    v115 = v108 | v150 | v149 | v151;

    v116 = objc_msgSend(v112, "productPlatform");
    v117 = objc_msgSend(v112, "productClass");

    if ((v117 | 2) != 6 || v116 != 4)
      goto LABEL_130;
    if (HMFOperatingSystemVersionCompare() != 1)
    {
      v118 = 0x400000000;
      goto LABEL_131;
    }
    if (isInternalBuild())
      v118 = (unint64_t)(HMFOperatingSystemVersionCompare() != 1) << 34;
    else
LABEL_130:
      v118 = 0;
LABEL_131:
    v119 = v115 | v147 | v146 | v145 | v144 | v143 | v142 | v141 | v140 | v139 | v138 | v137 | v136 | v135 | v134 | v133 | v132 | v131 | v130 | v129 | v124 | v123 | v128 | v127 | v126 | v125 | v104 | v111 | v118;
    v120 = objc_alloc(MEMORY[0x24BDD7920]);
    objc_msgSend(MEMORY[0x24BDD1880], "UUID");
    v121 = (void *)objc_claimAutoreleasedReturnValue();
    v66 = (void *)objc_msgSend(v120, "initWithTagUUID:capabilities:", v121, v119);

    goto LABEL_132;
  }
  v66 = 0;
LABEL_132:

  return v66;
}

- (void)setStartupCompleted:(id)a3
{
  objc_storeStrong((id *)&self->_startupCompleted, a3);
}

- (HMFFuture)startupCompleted
{
  return self->_startupCompleted;
}

- (void)setStartupPromise:(id)a3
{
  objc_storeStrong((id *)&self->_startupPromise, a3);
}

- (void)setStartupHasCompleted:(BOOL)a3
{
  self->_startupHasCompleted = a3;
}

- (void)setDeviceAccountHasSettled:(BOOL)a3
{
  self->_deviceAccountHasSettled = a3;
}

- (void)setFirstCloudKitImportComplete:(BOOL)a3
{
  self->_firstCloudKitImportComplete = a3;
}

- (void)receivedRemoteMessageOverTransportType:(int)a3 remoteMessageSenderContext:(id)a4
{
  id v6;
  void *v7;
  int v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  _BYTE v18[128];
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v6 = a4;
  +[HMDFeaturesDataSource defaultDataSource](HMDFeaturesDataSource, "defaultDataSource");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = objc_msgSend(v7, "isRestrictedGuestEnabled");

  if (a3 == 6 && v8)
  {
    v16 = 0u;
    v17 = 0u;
    v14 = 0u;
    v15 = 0u;
    -[HMDHomeManager homes](self, "homes", 0);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v10 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
    if (v10)
    {
      v11 = v10;
      v12 = *(_QWORD *)v15;
LABEL_5:
      v13 = 0;
      while (1)
      {
        if (*(_QWORD *)v15 != v12)
          objc_enumerationMutation(v9);
        if ((objc_msgSend(*(id *)(*((_QWORD *)&v14 + 1) + 8 * v13), "receivedRemoteMessageOverTransportType:remoteMessageSenderContext:", 6, v6) & 1) != 0)break;
        if (v11 == ++v13)
        {
          v11 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
          if (v11)
            goto LABEL_5;
          break;
        }
      }
    }

  }
}

- (BOOL)userWithMergeIdIsMemberOfAHome:(id)a3
{
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  _BOOL4 v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t i;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  char v19;
  void *v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  char v26;
  os_unfair_lock_s *p_lock;
  void *v28;
  HMDHomeManager *v29;
  NSObject *v30;
  void *v31;
  BOOL v32;
  void *v34;
  HMDHomeManager *v35;
  NSObject *v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  HMDHomeManager *v40;
  uint64_t v41;
  id obj;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  uint8_t buf[4];
  void *v56;
  __int16 v57;
  id v58;
  _BYTE v59[128];
  _BYTE v60[128];
  _BYTE v61[128];
  uint64_t v62;

  v62 = *MEMORY[0x24BDAC8D0];
  v4 = a3;
  v51 = 0u;
  v52 = 0u;
  v53 = 0u;
  v54 = 0u;
  v40 = self;
  -[HMDHomeManager homes](self, "homes");
  obj = (id)objc_claimAutoreleasedReturnValue();
  v41 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v51, v61, 16);
  if (v41)
  {
    v5 = *(_QWORD *)v52;
    v38 = *(_QWORD *)v52;
    while (2)
    {
      v6 = 0;
      do
      {
        if (*(_QWORD *)v52 != v5)
        {
          v7 = v6;
          objc_enumerationMutation(obj);
          v6 = v7;
        }
        v39 = v6;
        v8 = *(void **)(*((_QWORD *)&v51 + 1) + 8 * v6);
        objc_msgSend(v8, "userWithMergeID:", v4);
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        v10 = v9 == 0;

        if (!v10)
          goto LABEL_33;
        v49 = 0u;
        v50 = 0u;
        v47 = 0u;
        v48 = 0u;
        objc_msgSend(v8, "pendingUsers");
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        v12 = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v47, v60, 16);
        if (v12)
        {
          v13 = *(_QWORD *)v48;
          while (2)
          {
            for (i = 0; i != v12; ++i)
            {
              if (*(_QWORD *)v48 != v13)
                objc_enumerationMutation(v11);
              v15 = *(void **)(*((_QWORD *)&v47 + 1) + 8 * i);
              objc_msgSend(v15, "account");
              v16 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v16, "senderCorrelationIdentifier");
              v17 = (void *)objc_claimAutoreleasedReturnValue();
              if (objc_msgSend(v17, "isEqualToString:", v4))
              {

                goto LABEL_32;
              }
              objc_msgSend(v15, "mergeIdentifier");
              v18 = (void *)objc_claimAutoreleasedReturnValue();
              v19 = objc_msgSend(v18, "isEqualToString:", v4);

              if ((v19 & 1) != 0)
                goto LABEL_32;
            }
            v12 = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v47, v60, 16);
            if (v12)
              continue;
            break;
          }
        }

        -[HMDHomeManager sharedUserLastSyncManager](v40, "sharedUserLastSyncManager");
        v20 = (void *)objc_claimAutoreleasedReturnValue();
        v21 = objc_msgSend(v20, "isManagingUserWithMergeID:", v4);

        if ((v21 & 1) != 0)
          goto LABEL_33;
        v45 = 0u;
        v46 = 0u;
        v43 = 0u;
        v44 = 0u;
        objc_msgSend(v8, "removedUsers");
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        v22 = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v43, v59, 16);
        if (v22)
        {
          v23 = *(_QWORD *)v44;
LABEL_19:
          v24 = 0;
          while (1)
          {
            if (*(_QWORD *)v44 != v23)
              objc_enumerationMutation(v11);
            objc_msgSend(*(id *)(*((_QWORD *)&v43 + 1) + 8 * v24), "mergeID");
            v25 = (void *)objc_claimAutoreleasedReturnValue();
            v26 = objc_msgSend(v25, "isEqualToString:", v4);

            if ((v26 & 1) != 0)
              break;
            if (v22 == ++v24)
            {
              v22 = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v43, v59, 16);
              if (v22)
                goto LABEL_19;
              goto LABEL_25;
            }
          }
LABEL_32:

LABEL_33:
          goto LABEL_34;
        }
LABEL_25:

        v5 = v38;
        v6 = v39 + 1;
      }
      while (v39 + 1 != v41);
      v41 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v51, v61, 16);
      v5 = v38;
      if (v41)
        continue;
      break;
    }
  }

  p_lock = &v40->_lock;
  os_unfair_lock_lock_with_options();
  if (-[NSMutableSet containsObject:](v40->_mergeIDsOfUsersOfRemovedSharedHomes, "containsObject:", v4))
  {
    v28 = (void *)MEMORY[0x227676638]();
    v29 = v40;
    HMFGetOSLogHandle();
    v30 = (id)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v30, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v31 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v56 = v31;
      v57 = 2112;
      v58 = v4;
      _os_log_impl(&dword_2218F0000, v30, OS_LOG_TYPE_INFO, "%{public}@Merge ID %@ found in list of removed homes", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v28);
    os_unfair_lock_unlock(p_lock);
LABEL_34:
    v32 = 1;
  }
  else
  {
    os_unfair_lock_unlock(p_lock);
    v34 = (void *)MEMORY[0x227676638]();
    v35 = v40;
    HMFGetOSLogHandle();
    v36 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v36, OS_LOG_TYPE_DEFAULT))
    {
      HMFGetLogIdentifier();
      v37 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v56 = v37;
      v57 = 2112;
      v58 = v4;
      _os_log_impl(&dword_2218F0000, v36, OS_LOG_TYPE_DEFAULT, "%{public}@Home Membership Verifier unable to find user with mergeID %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v34);
    v32 = 0;
  }

  return v32;
}

- (BOOL)expectingInvitationResponseForIdentifier:(id)a3
{
  id v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t i;
  void *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t j;
  void *v16;
  char v17;
  BOOL v18;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  _BYTE v29[128];
  _BYTE v30[128];
  uint64_t v31;

  v31 = *MEMORY[0x24BDAC8D0];
  v4 = a3;
  if (v4)
  {
    v27 = 0u;
    v28 = 0u;
    v25 = 0u;
    v26 = 0u;
    -[HMDHomeManager homes](self, "homes");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v25, v30, 16);
    if (v6)
    {
      v7 = v6;
      v8 = *(_QWORD *)v26;
      v20 = *(_QWORD *)v26;
      do
      {
        for (i = 0; i != v7; ++i)
        {
          if (*(_QWORD *)v26 != v8)
            objc_enumerationMutation(v5);
          v10 = *(void **)(*((_QWORD *)&v25 + 1) + 8 * i);
          v21 = 0u;
          v22 = 0u;
          v23 = 0u;
          v24 = 0u;
          objc_msgSend(v10, "outgoingInvitations");
          v11 = (void *)objc_claimAutoreleasedReturnValue();
          v12 = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v21, v29, 16);
          if (v12)
          {
            v13 = v12;
            v14 = *(_QWORD *)v22;
            while (2)
            {
              for (j = 0; j != v13; ++j)
              {
                if (*(_QWORD *)v22 != v14)
                  objc_enumerationMutation(v11);
                objc_msgSend(*(id *)(*((_QWORD *)&v21 + 1) + 8 * j), "identifier");
                v16 = (void *)objc_claimAutoreleasedReturnValue();
                v17 = objc_msgSend(v16, "isEqual:", v4);

                if ((v17 & 1) != 0)
                {

                  v18 = 1;
                  goto LABEL_21;
                }
              }
              v13 = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v21, v29, 16);
              if (v13)
                continue;
              break;
            }
          }

          v8 = v20;
        }
        v7 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v25, v30, 16);
        v18 = 0;
      }
      while (v7);
    }
    else
    {
      v18 = 0;
    }
LABEL_21:

  }
  else
  {
    v18 = 0;
  }

  return v18;
}

- (void)_handleDumpDatabase:(id)a3
{
  id v4;
  void *v5;
  char v6;
  void *v7;
  HMDHomeManager *v8;
  NSObject *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  void *v13;
  HMDHomeManager *v14;
  NSObject *v15;
  void *v16;
  void *v17;
  int v18;
  void *v19;
  __int16 v20;
  id v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  v4 = a3;
  if ((isInternalBuild() & 1) == 0)
  {
    v7 = (void *)MEMORY[0x227676638]();
    v8 = self;
    HMFGetOSLogHandle();
    v9 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_FAULT))
    {
      HMFGetLogIdentifier();
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      v18 = 138543618;
      v19 = v10;
      v20 = 2112;
      v21 = v4;
      _os_log_impl(&dword_2218F0000, v9, OS_LOG_TYPE_FAULT, "%{public}@Should never call _handleDumpDatabase in non-internal builds: %@", (uint8_t *)&v18, 0x16u);

    }
    objc_autoreleasePoolPop(v7);
    v11 = (void *)MEMORY[0x24BDD1540];
    v12 = 52;
    goto LABEL_10;
  }
  objc_msgSend(v4, "name");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend(v5, "isEqualToString:", *MEMORY[0x24BDD5F28]);

  if ((v6 & 1) == 0)
  {
    v13 = (void *)MEMORY[0x227676638]();
    v14 = self;
    HMFGetOSLogHandle();
    v15 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      v18 = 138543618;
      v19 = v16;
      v20 = 2112;
      v21 = v4;
      _os_log_impl(&dword_2218F0000, v15, OS_LOG_TYPE_ERROR, "%{public}@Received bad message in _handleDumpDatabase: %@", (uint8_t *)&v18, 0x16u);

    }
    objc_autoreleasePoolPop(v13);
    v11 = (void *)MEMORY[0x24BDD1540];
    v12 = 3;
LABEL_10:
    objc_msgSend(v11, "hmErrorWithCode:", v12);
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "respondWithError:", v17);

    goto LABEL_11;
  }
  -[HMDHomeManager handleDumpDatabaseMessage:](self, "handleDumpDatabaseMessage:", v4);
LABEL_11:

}

- (void)_handlePrepareForDiagnosticExtension:(id)a3
{
  id v4;
  void *v5;
  char v6;
  void *v7;
  HMDHomeManager *v8;
  NSObject *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  void *v13;
  HMDHomeManager *v14;
  NSObject *v15;
  void *v16;
  void *v17;
  int v18;
  void *v19;
  __int16 v20;
  id v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  v4 = a3;
  if ((isInternalBuild() & 1) == 0)
  {
    v7 = (void *)MEMORY[0x227676638]();
    v8 = self;
    HMFGetOSLogHandle();
    v9 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_FAULT))
    {
      HMFGetLogIdentifier();
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      v18 = 138543618;
      v19 = v10;
      v20 = 2112;
      v21 = v4;
      _os_log_impl(&dword_2218F0000, v9, OS_LOG_TYPE_FAULT, "%{public}@Should never call _handlePrepareForDiagnosticExtension in non-internal builds: %@", (uint8_t *)&v18, 0x16u);

    }
    objc_autoreleasePoolPop(v7);
    v11 = (void *)MEMORY[0x24BDD1540];
    v12 = 52;
    goto LABEL_10;
  }
  objc_msgSend(v4, "name");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend(v5, "isEqualToString:", *MEMORY[0x24BDD60B0]);

  if ((v6 & 1) == 0)
  {
    v13 = (void *)MEMORY[0x227676638]();
    v14 = self;
    HMFGetOSLogHandle();
    v15 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      v18 = 138543618;
      v19 = v16;
      v20 = 2112;
      v21 = v4;
      _os_log_impl(&dword_2218F0000, v15, OS_LOG_TYPE_ERROR, "%{public}@Received bad message in _handlePrepareForDiagnosticExtension: %@", (uint8_t *)&v18, 0x16u);

    }
    objc_autoreleasePoolPop(v13);
    v11 = (void *)MEMORY[0x24BDD1540];
    v12 = 3;
LABEL_10:
    objc_msgSend(v11, "hmErrorWithCode:", v12);
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "respondWithError:", v17);

    goto LABEL_11;
  }
  -[HMDHomeManager prepareForDiagnosticExtension:](self, "prepareForDiagnosticExtension:", v4);
LABEL_11:

}

- (void)_signpostAssistantSyncDataNotification
{
  NSObject *logger;
  uint8_t v3[16];

  logger = self->_logger;
  if (os_signpost_enabled(logger))
  {
    *(_WORD *)v3 = 0;
    _os_signpost_emit_with_name_impl(&dword_2218F0000, logger, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "NotifyAssistantSyncDataReadiness", ", v3, 2u);
  }
}

- (void)_signpostAssistantSyncDataRequestHandled
{
  NSObject *logger;
  uint8_t v3[16];

  logger = self->_logger;
  if (os_signpost_enabled(logger))
  {
    *(_WORD *)v3 = 0;
    _os_signpost_emit_with_name_impl(&dword_2218F0000, logger, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "AssistantSyncDataRequestHandled", ", v3, 2u);
  }
}

- (void)_handleHMMMXPCConnectionRemoved:(id)a3
{
  id v4;
  void *v5;
  id v6;
  _QWORD v7[4];
  id v8;

  v4 = a3;
  -[HMDHomeManager homes](self, "homes");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v7[0] = MEMORY[0x24BDAC760];
  v7[1] = 3221225472;
  v7[2] = __50__HMDHomeManager__handleHMMMXPCConnectionRemoved___block_invoke;
  v7[3] = &unk_24E7968F0;
  v8 = v4;
  v6 = v4;
  objc_msgSend(v5, "na_each:", v7);

}

- (unint64_t)homeDatabaseSize
{
  return self->_homeDatabaseSize;
}

- (BOOL)pcsEnabled
{
  return self->_pcsEnabled;
}

- (void)setPcsEnabled:(BOOL)a3
{
  self->_pcsEnabled = a3;
}

- (BOOL)haveQueuedUpdateAccessories
{
  return self->_haveQueuedUpdateAccessories;
}

- (void)setHaveQueuedUpdateAccessories:(BOOL)a3
{
  self->_haveQueuedUpdateAccessories = a3;
}

- (HMDSoftwareUpdateManager)softwareUpdateManager
{
  return self->_softwareUpdateManager;
}

- (HMDWidgetConfigurationReader)widgetConfigurationReader
{
  return self->_widgetConfigurationReader;
}

- (unint64_t)status
{
  return self->_status;
}

- (HMDAssistantGather)gatherer
{
  return self->_gatherer;
}

- (void)setGatherer:(id)a3
{
  objc_storeStrong((id *)&self->_gatherer, a3);
}

- (HMDCompositeSettingsControllerManager)compositeSettingsControllerManager
{
  return (HMDCompositeSettingsControllerManager *)objc_getProperty(self, a2, 192, 1);
}

- (HMDCHIPDataSource)chipDataSource
{
  return (HMDCHIPDataSource *)objc_getProperty(self, a2, 200, 1);
}

- (HMDMTSXPCServer)mtsXPCServer
{
  return (HMDMTSXPCServer *)objc_getProperty(self, a2, 208, 1);
}

- (HMDIDSServerBag)idsServerBag
{
  return (HMDIDSServerBag *)objc_getProperty(self, a2, 216, 1);
}

- (void)setIdsServerBag:(id)a3
{
  objc_setProperty_atomic(self, a2, a3, 216);
}

- (HMDCapabilitiesController)capabilitiesController
{
  return self->_capabilitiesController;
}

- (HMDHomeManagerObjectLookup)lookup
{
  return self->_lookup;
}

- (HMDCameraRecordingLoadBalancer)cameraLoadBalancer
{
  return self->_cameraLoadBalancer;
}

- (void)setCameraLoadBalancer:(id)a3
{
  objc_storeStrong((id *)&self->_cameraLoadBalancer, a3);
}

- (BOOL)hasLoadedData
{
  return self->_hasLoadedData;
}

- (void)setHasLoadedData:(BOOL)a3
{
  self->_hasLoadedData = a3;
}

- (HMMLogEventSubmitting)logEventSubmitter
{
  return self->_logEventSubmitter;
}

- (void)setLogEventSubmitter:(id)a3
{
  objc_storeStrong((id *)&self->_logEventSubmitter, a3);
}

- (HMDAppleAccountManager)appleAccountManager
{
  return self->_appleAccountManager;
}

- (void)setAppleAccountManager:(id)a3
{
  objc_storeStrong((id *)&self->_appleAccountManager, a3);
}

- (HMDBackgroundOperationManager)bgOpsManager
{
  return (HMDBackgroundOperationManager *)objc_getProperty(self, a2, 272, 1);
}

- (void)setDebounceHomesUpdateTimer:(id)a3
{
  objc_storeStrong((id *)&self->_debounceHomesUpdateTimer, a3);
}

- (HMFTimer)periodicMobileCatalogUpdateTimer
{
  return self->_periodicMobileCatalogUpdateTimer;
}

- (void)setPeriodicMobileCatalogUpdateTimer:(id)a3
{
  objc_storeStrong((id *)&self->_periodicMobileCatalogUpdateTimer, a3);
}

- (void)setMemoryMonitorLogEventTimer:(id)a3
{
  objc_storeStrong((id *)&self->_memoryMonitorLogEventTimer, a3);
}

- (unint64_t)stateHandle
{
  return self->_stateHandle;
}

- (void)setStateHandle:(unint64_t)a3
{
  self->_stateHandle = a3;
}

- (NSMutableSet)pendingHomesBeingRemoved
{
  return self->_pendingHomesBeingRemoved;
}

- (void)setPendingHomesBeingRemoved:(id)a3
{
  objc_storeStrong((id *)&self->_pendingHomesBeingRemoved, a3);
}

- (HMDCompanionManager)companionManager
{
  return self->_companionManager;
}

- (int64_t)residentEnabledState
{
  return self->_residentEnabledState;
}

- (void)setResidentEnabledState:(int64_t)a3
{
  self->_residentEnabledState = a3;
}

- (NSMutableDictionary)userPushCacheMap
{
  return self->_userPushCacheMap;
}

- (NSMutableArray)deviceSetupSessions
{
  return self->_deviceSetupSessions;
}

- (NSMutableArray)accessorySetupMetricDispatchers
{
  return self->_accessorySetupMetricDispatchers;
}

- (NSMutableSet)mergeIDsOfUsersOfRemovedSharedHomes
{
  return self->_mergeIDsOfUsersOfRemovedSharedHomes;
}

- (NSDictionary)demoAccessories
{
  return self->_demoAccessories;
}

- (void)setDemoAccessories:(id)a3
{
  objc_setProperty_nonatomic_copy(self, a2, a3, 368);
}

- (BOOL)speakersAreConfigured
{
  return self->_speakersAreConfigured;
}

- (void)setSpeakersAreConfigured:(BOOL)a3
{
  self->_speakersAreConfigured = a3;
}

- (BOOL)speakersAreConfiguredInOwnedHomes
{
  return self->_speakersAreConfiguredInOwnedHomes;
}

- (void)setSpeakersAreConfiguredInOwnedHomes:(BOOL)a3
{
  self->_speakersAreConfiguredInOwnedHomes = a3;
}

- (HMDarwinNotificationProvider)darwinNotificationProvider
{
  return self->_darwinNotificationProvider;
}

- (HMDRemoteAccountManager)remoteAccountManager
{
  return self->_remoteAccountManager;
}

- (NSMutableSet)unprocessedOperationModelIdentifiers
{
  return self->_unprocessedOperationModelIdentifiers;
}

- (void)setUnprocessedOperationModelIdentifiers:(id)a3
{
  objc_storeStrong((id *)&self->_unprocessedOperationModelIdentifiers, a3);
}

- (HMDUserCloudShareManager)userCloudShareManager
{
  return self->_userCloudShareManager;
}

- (HMDMultiUserStatusController)multiUserStatusController
{
  return self->_multiUserStatusController;
}

- (HMDAppleMediaAccessoryDiagnosticInfoController)appleMediaAccessoryDiagnosticInfoController
{
  return self->_appleMediaAccessoryDiagnosticInfoController;
}

- (HMDAccessorySetupCoordinator)accessorySetupCoordinator
{
  return (HMDAccessorySetupCoordinator *)objc_getProperty(self, a2, 424, 1);
}

- (HMDBonjourBrowserHelper)bonjourBrowser
{
  return self->_bonjourBrowser;
}

- (void)setBonjourBrowser:(id)a3
{
  objc_storeStrong((id *)&self->_bonjourBrowser, a3);
}

- (HMDDuetPredictionSubscriber)duetSubscriber
{
  return (HMDDuetPredictionSubscriber *)objc_getProperty(self, a2, 448, 1);
}

- (void)setDuetSubscriber:(id)a3
{
  objc_setProperty_atomic(self, a2, a3, 448);
}

- (HMDBiomeLogEventObserver)biomeLogEventObserver
{
  return (HMDBiomeLogEventObserver *)objc_getProperty(self, a2, 456, 1);
}

- (void)setBiomeLogEventObserver:(id)a3
{
  objc_setProperty_atomic(self, a2, a3, 456);
}

- (HMDMicroLocationLogEventObserver)microLocationLogEventObserver
{
  return (HMDMicroLocationLogEventObserver *)objc_getProperty(self, a2, 464, 1);
}

- (void)setMicroLocationLogEventObserver:(id)a3
{
  objc_setProperty_atomic(self, a2, a3, 464);
}

- (HMDMicroLocationManager)microLocationManager
{
  return (HMDMicroLocationManager *)objc_getProperty(self, a2, 472, 1);
}

- (void)setMicroLocationManager:(id)a3
{
  objc_setProperty_atomic(self, a2, a3, 472);
}

- (NSMutableSet)activeConnections
{
  return (NSMutableSet *)objc_getProperty(self, a2, 480, 1);
}

- (NSDate)bonjourBrowserHelperLastCompletionDate
{
  return self->_bonjourBrowserHelperLastCompletionDate;
}

- (void)setBonjourBrowserHelperLastCompletionDate:(id)a3
{
  objc_storeStrong((id *)&self->_bonjourBrowserHelperLastCompletionDate, a3);
}

- (HMEDelegatingEventRouter)registrationForwardingEventRouter
{
  return self->_registrationForwardingEventRouter;
}

- (void)setRegistrationForwardingEventRouter:(id)a3
{
  objc_storeStrong((id *)&self->_registrationForwardingEventRouter, a3);
}

- (HMEMemoryEventBus)memoryEventRouter
{
  return self->_memoryEventRouter;
}

- (void)setMemoryEventRouter:(id)a3
{
  objc_storeStrong((id *)&self->_memoryEventRouter, a3);
}

- (HMDLoggingEventForwarder)loggingMemoryEventForwarder
{
  return self->_loggingMemoryEventForwarder;
}

- (void)setLoggingMemoryEventForwarder:(id)a3
{
  objc_storeStrong((id *)&self->_loggingMemoryEventForwarder, a3);
}

- (HMDXPCEventRouterServer)eventRouterXPCServer
{
  return self->_eventRouterXPCServer;
}

- (void)setEventRouterXPCServer:(id)a3
{
  objc_storeStrong((id *)&self->_eventRouterXPCServer, a3);
}

- (HMDRemoteEventRouterAssertionController)eventRouterAssertionController
{
  return self->_eventRouterAssertionController;
}

- (void)setEventRouterAssertionController:(id)a3
{
  objc_storeStrong((id *)&self->_eventRouterAssertionController, a3);
}

- (HMDSiriEndpointSettingsSyncManager)siriEndPointSettingsSyncManager
{
  return (HMDSiriEndpointSettingsSyncManager *)objc_getProperty(self, a2, 544, 1);
}

- (void)setSiriEndPointSettingsSyncManager:(id)a3
{
  objc_setProperty_atomic(self, a2, a3, 544);
}

- (HMDMultiUserSettingsMetricsEventDispatcher)multiUserSettingsMetricEventDispatcher
{
  return (HMDMultiUserSettingsMetricsEventDispatcher *)objc_getProperty(self, a2, 552, 1);
}

- (BOOL)missingHomeDataRecord
{
  return self->_missingHomeDataRecord;
}

- (void)setMissingHomeDataRecord:(BOOL)a3
{
  self->_missingHomeDataRecord = a3;
}

- (NSUUID)lastRemovedCurrentAccessoryUUID
{
  return (NSUUID *)objc_getProperty(self, a2, 560, 1);
}

- (void)setLastRemovedCurrentAccessoryUUID:(id)a3
{
  objc_setProperty_atomic_copy(self, a2, a3, 560);
}

- (HMDHomeManagerHH2SharedUserLastSyncManager)sharedUserLastSyncManager
{
  return self->_sharedUserLastSyncManager;
}

- (void)setSharedUserLastSyncManager:(id)a3
{
  objc_storeStrong((id *)&self->_sharedUserLastSyncManager, a3);
}

- (HMDSelfRemovalWatchdog)selfRemovalWatchdog
{
  return self->_selfRemovalWatchdog;
}

- (void)setSelfRemovalWatchdog:(id)a3
{
  objc_storeStrong((id *)&self->_selfRemovalWatchdog, a3);
}

- (BOOL)hasAccessoryBrowsingBeenRequested
{
  return self->_hasAccessoryBrowsingBeenRequested;
}

- (void)setHasAccessoryBrowsingBeenRequested:(BOOL)a3
{
  self->_hasAccessoryBrowsingBeenRequested = a3;
}

- (HMDWidgetTimelineRefresher)widgetTimelineRefresher
{
  return (HMDWidgetTimelineRefresher *)objc_getProperty(self, a2, 584, 1);
}

- (BOOL)didCreateAddACWGKeysOperation
{
  return self->_didCreateAddACWGKeysOperation;
}

- (void)setDidCreateAddACWGKeysOperation:(BOOL)a3
{
  self->_didCreateAddACWGKeysOperation = a3;
}

- (HAPKeyStore)hapKeyStore
{
  return self->_hapKeyStore;
}

- (void)setHapKeyStore:(id)a3
{
  objc_storeStrong((id *)&self->_hapKeyStore, a3);
}

- (HMDDatabase)defaultDatabase
{
  return self->_defaultDatabase;
}

- (void)setDefaultDatabase:(id)a3
{
  objc_storeStrong((id *)&self->_defaultDatabase, a3);
}

- (BOOL)initialPCSStatusFetchCompleted
{
  return self->_initialPCSStatusFetchCompleted;
}

- (void)setInitialPCSStatusFetchCompleted:(BOOL)a3
{
  self->_initialPCSStatusFetchCompleted = a3;
}

- (HMDHomeManagerObjectChangeHandler)homeManagerObjectChangeHandler
{
  return self->_homeManagerObjectChangeHandler;
}

- (NSUUID)uuid
{
  return self->_uuid;
}

- (BOOL)isHomeManagerZoneFirstFetch
{
  return self->_homeManagerZoneFirstFetch;
}

- (void)setHomeManagerZoneFirstFetch:(BOOL)a3
{
  self->_homeManagerZoneFirstFetch = a3;
}

- (NSMutableArray)cloudZones
{
  return self->_cloudZones;
}

- (void)setCloudZones:(id)a3
{
  objc_storeStrong((id *)&self->_cloudZones, a3);
}

- (NSMutableArray)uuidsOfRemovedHomes
{
  return self->_uuidsOfRemovedHomes;
}

- (void)setUuidsOfRemovedHomes:(id)a3
{
  objc_storeStrong((id *)&self->_uuidsOfRemovedHomes, a3);
}

- (NSUUID)primaryHomeUUID
{
  return self->_primaryHomeUUID;
}

- (void)setPrimaryHomeUUID:(id)a3
{
  objc_storeStrong((id *)&self->_primaryHomeUUID, a3);
}

- (NSUUID)lastCurrentHomeUUID
{
  return self->_lastCurrentHomeUUID;
}

- (void)setLastCurrentHomeUUID:(id)a3
{
  objc_storeStrong((id *)&self->_lastCurrentHomeUUID, a3);
}

- (void)setWorkQueue:(id)a3
{
  objc_storeStrong((id *)&self->_workQueue, a3);
}

- (HMDMessageDispatcher)messageDispatcher
{
  return self->_messageDispatcher;
}

- (void)setMessageDispatcher:(id)a3
{
  objc_storeStrong((id *)&self->_messageDispatcher, a3);
}

- (NSMutableSet)unassociatedRemotePeers
{
  return self->_unassociatedRemotePeers;
}

- (void)setUnassociatedRemotePeers:(id)a3
{
  objc_storeStrong((id *)&self->_unassociatedRemotePeers, a3);
}

- (NSMutableDictionary)associatedRemotePeers
{
  return self->_associatedRemotePeers;
}

- (void)setAssociatedRemotePeers:(id)a3
{
  objc_storeStrong((id *)&self->_associatedRemotePeers, a3);
}

- (NSMutableSet)fullSyncedWatchPeers
{
  return self->_fullSyncedWatchPeers;
}

- (void)setFullSyncedWatchPeers:(id)a3
{
  objc_storeStrong((id *)&self->_fullSyncedWatchPeers, a3);
}

- (NSMutableDictionary)associatedWatchPeers
{
  return self->_associatedWatchPeers;
}

- (NSMutableDictionary)watchSyncStateMap
{
  return self->_watchSyncStateMap;
}

- (NSMutableDictionary)watchSyncRetryContextBySyncIdentifier
{
  return (NSMutableDictionary *)objc_getProperty(self, a2, 712, 1);
}

- (NSMapTable)watchSyncRetryContextByRetryTimer
{
  return (NSMapTable *)objc_getProperty(self, a2, 720, 1);
}

- (HMDPairedSync)pairedSync
{
  return self->_pairedSync;
}

- (int)generationCounterToken
{
  return self->_generationCounterToken;
}

- (void)setGenerationCounterToken:(int)a3
{
  self->_generationCounterToken = a3;
}

- (unint64_t)assistantGenerationCounter
{
  return self->_assistantGenerationCounter;
}

- (void)setAssistantGenerationCounter:(unint64_t)a3
{
  self->_assistantGenerationCounter = a3;
}

- (HMDNameValidator)nameValidator
{
  return self->_nameValidator;
}

- (void)setNameValidator:(id)a3
{
  objc_storeStrong((id *)&self->_nameValidator, a3);
}

- (OS_dispatch_source)accessoryFinderTimer
{
  return self->_accessoryFinderTimer;
}

- (void)setAccessoryFinderTimer:(id)a3
{
  objc_storeStrong((id *)&self->_accessoryFinderTimer, a3);
}

- (NSMutableArray)pendingResponsesForAccessoryFinder
{
  return self->_pendingResponsesForAccessoryFinder;
}

- (void)setPendingResponsesForAccessoryFinder:(id)a3
{
  objc_storeStrong((id *)&self->_pendingResponsesForAccessoryFinder, a3);
}

- (HMDPowerManager)powerManager
{
  return self->_powerManager;
}

- (void)setPowerManager:(id)a3
{
  objc_storeStrong((id *)&self->_powerManager, a3);
}

- (NSNotificationCenter)notificationCenter
{
  return self->_notificationCenter;
}

- (void)setNotificationCenter:(id)a3
{
  objc_storeStrong((id *)&self->_notificationCenter, a3);
}

- (HMDIDSInvitationManager)idsInvitationManager
{
  return self->_idsInvitationManager;
}

- (void)setIdsInvitationManager:(id)a3
{
  objc_storeStrong((id *)&self->_idsInvitationManager, a3);
}

- (HMDIDSFirewallManager)idsFirewallManager
{
  return self->_idsFirewallManager;
}

- (void)setIdsFirewallManager:(id)a3
{
  objc_storeStrong((id *)&self->_idsFirewallManager, a3);
}

- (HMFActivity)setupActivity
{
  return self->_setupActivity;
}

- (void)setSetupActivity:(id)a3
{
  objc_storeStrong((id *)&self->_setupActivity, a3);
}

- (unint64_t)homepodSetupRetryCount
{
  return self->_homepodSetupRetryCount;
}

- (void)setHomepodSetupRetryCount:(unint64_t)a3
{
  self->_homepodSetupRetryCount = a3;
}

- (HMDWatchManager)watchManager
{
  return self->_watchManager;
}

- (HMDBackingStore)backingStore
{
  return self->_backingStore;
}

- (void)setBackingStore:(id)a3
{
  objc_storeStrong((id *)&self->_backingStore, a3);
}

- (NSUUID)dataTag
{
  return self->_dataTag;
}

- (void)setDataTag:(id)a3
{
  objc_storeStrong((id *)&self->_dataTag, a3);
}

- (int64_t)recoveryVersion
{
  return self->_recoveryVersion;
}

- (void)setRecoveryVersion:(int64_t)a3
{
  self->_recoveryVersion = a3;
}

- (NSMutableDictionary)pendingDataSyncAcks
{
  return self->_pendingDataSyncAcks;
}

- (void)setPendingDataSyncAcks:(id)a3
{
  objc_storeStrong((id *)&self->_pendingDataSyncAcks, a3);
}

- (NSMutableDictionary)pendingRemoteSessions
{
  return self->_pendingRemoteSessions;
}

- (void)setPendingRemoteSessions:(id)a3
{
  objc_storeStrong((id *)&self->_pendingRemoteSessions, a3);
}

- (NSMutableSet)pendingResidentSetupSessions
{
  return self->_pendingResidentSetupSessions;
}

- (void)setPendingResidentSetupSessions:(id)a3
{
  objc_storeStrong((id *)&self->_pendingResidentSetupSessions, a3);
}

- (HMDMessageFilterChain)msgFilterChain
{
  return self->_msgFilterChain;
}

- (void)setMsgFilterChain:(id)a3
{
  objc_storeStrong((id *)&self->_msgFilterChain, a3);
}

- (NSMutableSet)dialogCancelationContexts
{
  return self->_dialogCancelationContexts;
}

- (void)setDialogCancelationContexts:(id)a3
{
  objc_storeStrong((id *)&self->_dialogCancelationContexts, a3);
}

- (HMDIdentityRegistry)identityRegistry
{
  return self->_identityRegistry;
}

- (void)setIdentityRegistry:(id)a3
{
  objc_storeStrong((id *)&self->_identityRegistry, a3);
}

- (BOOL)accountActive
{
  return self->_accountActive;
}

- (void)setAccountActive:(BOOL)a3
{
  self->_accountActive = a3;
}

- (BOOL)accountStatusFailedDueToNetworkFailure
{
  return self->_accountStatusFailedDueToNetworkFailure;
}

- (void)setAccountStatusFailedDueToNetworkFailure:(BOOL)a3
{
  self->_accountStatusFailedDueToNetworkFailure = a3;
}

- (BOOL)backOffOperationInProgress
{
  return self->_backOffOperationInProgress;
}

- (void)setBackOffOperationInProgress:(BOOL)a3
{
  self->_backOffOperationInProgress = a3;
}

- (unint64_t)cloudOperationRetryCount
{
  return self->_cloudOperationRetryCount;
}

- (void)setCloudOperationRetryCount:(unint64_t)a3
{
  self->_cloudOperationRetryCount = a3;
}

- (BOOL)uploadToCloudIsPending
{
  return self->_uploadToCloudIsPending;
}

- (void)setUploadToCloudIsPending:(BOOL)a3
{
  self->_uploadToCloudIsPending = a3;
}

- (BOOL)uploadHomeDataToCloud
{
  return self->_uploadHomeDataToCloud;
}

- (void)setUploadHomeDataToCloud:(BOOL)a3
{
  self->_uploadHomeDataToCloud = a3;
}

- (BOOL)forceFetchHomeManagerZone
{
  return self->_forceFetchHomeManagerZone;
}

- (void)setForceFetchHomeManagerZone:(BOOL)a3
{
  self->_forceFetchHomeManagerZone = a3;
}

- (BOOL)lastAnswerForShouldCloudSyncData
{
  return self->_lastAnswerForShouldCloudSyncData;
}

- (void)setLastAnswerForShouldCloudSyncData:(BOOL)a3
{
  self->_lastAnswerForShouldCloudSyncData = a3;
}

- (OS_dispatch_source)cloudOperationRetryTimer
{
  return self->_cloudOperationRetryTimer;
}

- (void)setCloudOperationRetryTimer:(id)a3
{
  objc_storeStrong((id *)&self->_cloudOperationRetryTimer, a3);
}

- (void)setCloudDataSyncStateFilter:(id)a3
{
  objc_storeStrong((id *)&self->_cloudDataSyncStateFilter, a3);
}

- (BOOL)uploadMetadataToCloud
{
  return self->_uploadMetadataToCloud;
}

- (void)setUploadMetadataToCloud:(BOOL)a3
{
  self->_uploadMetadataToCloud = a3;
}

- (HMDLocation)locationHandler
{
  return self->_locationHandler;
}

- (void)setLocationHandler:(id)a3
{
  objc_storeStrong((id *)&self->_locationHandler, a3);
}

- (HMDFMFHandler)fmfHandler
{
  return self->_fmfHandler;
}

- (void)setFmfHandler:(id)a3
{
  objc_storeStrong((id *)&self->_fmfHandler, a3);
}

- (HMDAccountRegistry)accountRegistry
{
  return self->_accountRegistry;
}

- (NSMutableArray)incomingInvitations
{
  return self->_incomingInvitations;
}

- (void)setIncomingInvitations:(id)a3
{
  objc_storeStrong((id *)&self->_incomingInvitations, a3);
}

- (BOOL)ignoreFirstTimeReachabilityChanged
{
  return self->_ignoreFirstTimeReachabilityChanged;
}

- (void)setIgnoreFirstTimeReachabilityChanged:(BOOL)a3
{
  self->_ignoreFirstTimeReachabilityChanged = a3;
}

- (BOOL)companionReachable
{
  return self->_companionReachable;
}

- (void)setCompanionReachable:(BOOL)a3
{
  self->_companionReachable = a3;
}

- (HMDClientConnection)clientConnection
{
  return self->_clientConnection;
}

- (void)setClientConnection:(id)a3
{
  objc_storeStrong((id *)&self->_clientConnection, a3);
}

- (OS_dispatch_queue)clientConnectionQueue
{
  return self->_clientConnectionQueue;
}

- (void)setClientConnectionQueue:(id)a3
{
  objc_storeStrong((id *)&self->_clientConnectionQueue, a3);
}

- (BOOL)accountStatusIsAuthenticated
{
  return self->_accountStatusIsAuthenticated;
}

- (void)setAccountStatusIsAuthenticated:(BOOL)a3
{
  self->_accountStatusIsAuthenticated = a3;
}

- (void)setRemoteAccessHealthMonitorTimer:(id)a3
{
  objc_storeStrong((id *)&self->_remoteAccessHealthMonitorTimer, a3);
}

- (unsigned)nextRequestTransactionIdentifier
{
  return self->_nextRequestTransactionIdentifier;
}

- (NSMutableDictionary)pendingFragmentationStream
{
  return self->_pendingFragmentationStream;
}

- (void)setPendingFragmentationStream:(id)a3
{
  objc_storeStrong((id *)&self->_pendingFragmentationStream, a3);
}

- (BOOL)homeDataLoadedFromArchive
{
  return self->_homeDataLoadedFromArchive;
}

- (void)setHomeDataLoadedFromArchive:(BOOL)a3
{
  self->_homeDataLoadedFromArchive = a3;
}

- (void)setCloudkitAccountStatusDetermined:(BOOL)a3
{
  self->_cloudkitAccountStatusDetermined = a3;
}

- (BOOL)needToCleanUpKeys
{
  return self->_needToCleanUpKeys;
}

- (void)setNeedToCleanUpKeys:(BOOL)a3
{
  self->_needToCleanUpKeys = a3;
}

- (HMDApplicationData)appData
{
  return self->_appData;
}

- (void)setAppData:(id)a3
{
  objc_storeStrong((id *)&self->_appData, a3);
}

- (HMDResidentMesh)residentMesh
{
  return self->_residentMesh;
}

- (void)setResidentMesh:(id)a3
{
  objc_storeStrong((id *)&self->_residentMesh, a3);
}

- (NSUserDefaults)userDefaults
{
  return self->_userDefaults;
}

- (HMDCurrentAccessorySetupMetricDispatcher)currentAccessorySetupMetricDispatcher
{
  return self->_currentAccessorySetupMetricDispatcher;
}

- (void)setCurrentAccessorySetupMetricDispatcher:(id)a3
{
  objc_storeStrong((id *)&self->_currentAccessorySetupMetricDispatcher, a3);
}

- (HMDAccessorySetupManager)accessorySetupManager
{
  return self->_accessorySetupManager;
}

- (HMDHH2FrameworkSwitch)hh2FrameworkSwitch
{
  return self->_hh2FrameworkSwitch;
}

- (void)setHh2FrameworkSwitch:(id)a3
{
  objc_storeStrong((id *)&self->_hh2FrameworkSwitch, a3);
}

- (HMDSiriEndpointOnboardingManager)siriEndpointOnboardingManager
{
  return (HMDSiriEndpointOnboardingManager *)objc_getProperty(self, a2, 1040, 1);
}

- (id)mkfContext
{
  return objc_getProperty(self, a2, 1048, 1);
}

- (void)setMkfContext:(id)a3
{
  objc_setProperty_atomic(self, a2, a3, 1048);
}

- (BOOL)isHH2MigrationInProgress
{
  return self->_hh2MigrationInProgress;
}

- (void)setHh2MigrationInProgress:(BOOL)a3
{
  self->_hh2MigrationInProgress = a3;
}

- (HMDSyncOperationManager)syncManager
{
  return self->_syncManager;
}

- (HMDAppleAccessoryPairingController)legacyAccessoryPairingController
{
  return self->_legacyAccessoryPairingController;
}

- (unint64_t)siriSyncNotificationTime
{
  return self->_siriSyncNotificationTime;
}

- (void)setSiriSyncNotificationTime:(unint64_t)a3
{
  self->_siriSyncNotificationTime = a3;
}

- (NSMutableArray)siriSyncNotificationReasons
{
  return self->_siriSyncNotificationReasons;
}

- (void)setSiriSyncNotificationReasons:(id)a3
{
  objc_storeStrong((id *)&self->_siriSyncNotificationReasons, a3);
}

- (HMDAccessoryFirmwareUpdateManager)accessoryFirmwareUpdateManager
{
  return self->_accessoryFirmwareUpdateManager;
}

- (HMDMatterSoftwareUpdateProviderDelegate)matterSoftwareUpdateProviderDelegate
{
  return self->_matterSoftwareUpdateProviderDelegate;
}

- (HMFTimer)debounceRegenerateAssistantSyncDataTimer
{
  return self->_debounceRegenerateAssistantSyncDataTimer;
}

- (HMDBiomeEventManager)biomeEventManager
{
  return (HMDBiomeEventManager *)objc_getProperty(self, a2, 1120, 1);
}

- (void)setBiomeEventManager:(id)a3
{
  objc_setProperty_atomic(self, a2, a3, 1120);
}

- (void)setAccessoryBrowserInternal:(id)a3
{
  objc_storeStrong((id *)&self->_accessoryBrowserInternal, a3);
}

- (HMELastEventStore)lastEventStore
{
  return self->_lastEventStore;
}

- (void)setLastEventStore:(id)a3
{
  objc_storeStrong((id *)&self->_lastEventStore, a3);
}

- (HMDLastEventStoreController)lastEventStoreController
{
  return self->_lastEventStoreController;
}

- (void)setLastEventStoreController:(id)a3
{
  objc_storeStrong((id *)&self->_lastEventStoreController, a3);
}

- (HMDMobileAssetManager)mobileAssetManager
{
  return self->_mobileAssetManager;
}

- (void)setMobileAssetManager:(id)a3
{
  objc_storeStrong((id *)&self->_mobileAssetManager, a3);
}

- (HMDUserDeviceCapabilitiesRequestManager)userDeviceCapabilitiesRequestManager
{
  return self->_userDeviceCapabilitiesRequestManager;
}

- (HMDMediaGroupParticipantLocalDataStorage)mediaGroupParticipantDataLocalStorage
{
  return (HMDMediaGroupParticipantLocalDataStorage *)objc_getProperty(self, a2, 1168, 1);
}

- (void)setMediaGroupParticipantDataLocalStorage:(id)a3
{
  objc_setProperty_atomic(self, a2, a3, 1168);
}

- (NSMapTable)homeUUIDsByWalletKeyAssertionXPCConnection
{
  return (NSMapTable *)objc_getProperty(self, a2, 1176, 1);
}

- (HMDCHIPXPCListener)chipXPCListener
{
  return self->_chipXPCListener;
}

- (NSMutableDictionary)currentHomeConfigurations
{
  return self->_currentHomeConfigurations;
}

- (void)setCurrentHomeConfigurations:(id)a3
{
  objc_storeStrong((id *)&self->_currentHomeConfigurations, a3);
}

- (HMDDeviceSetupConfiguringController)configuringStateController
{
  return self->_configuringStateController;
}

- (void)setConfiguringStateController:(id)a3
{
  objc_storeStrong((id *)&self->_configuringStateController, a3);
}

- (BOOL)assistantIdentifierChanged
{
  return self->_assistantIdentifierChanged;
}

- (void)setAssistantIdentifierChanged:(BOOL)a3
{
  self->_assistantIdentifierChanged = a3;
}

- (HMFPromise)startupPromise
{
  return (HMFPromise *)objc_getProperty(self, a2, 1208, 1);
}

- (BOOL)startupHasCompleted
{
  return self->_startupHasCompleted;
}

- (BOOL)deviceAccountHasSettled
{
  return self->_deviceAccountHasSettled;
}

- (BOOL)firstCloudKitImportComplete
{
  return self->_firstCloudKitImportComplete;
}

- (HMFAsyncContext)workContext
{
  return (HMFAsyncContext *)objc_getProperty(self, a2, 1216, 1);
}

- (BOOL)isOwnerPingPending
{
  return self->_isOwnerPingPending;
}

- (void)setIsOwnerPingPending:(BOOL)a3
{
  self->_isOwnerPingPending = a3;
}

- (HMFNetMonitor)reachabilityMonitor
{
  return self->_reachabilityMonitor;
}

- (void)setReachabilityMonitor:(id)a3
{
  objc_storeStrong((id *)&self->_reachabilityMonitor, a3);
}

- (HMFNetMonitor)cloudReachabilityMonitor
{
  return self->_cloudReachabilityMonitor;
}

- (void)setCloudReachabilityMonitor:(id)a3
{
  objc_storeStrong((id *)&self->_cloudReachabilityMonitor, a3);
}

- (void).cxx_destruct
{
  objc_storeStrong((id *)&self->_cloudReachabilityMonitor, 0);
  objc_storeStrong((id *)&self->_reachabilityMonitor, 0);
  objc_storeStrong((id *)&self->_workContext, 0);
  objc_storeStrong((id *)&self->_startupPromise, 0);
  objc_storeStrong((id *)&self->_configuringStateController, 0);
  objc_storeStrong((id *)&self->_currentHomeConfigurations, 0);
  objc_storeStrong((id *)&self->_chipXPCListener, 0);
  objc_storeStrong((id *)&self->_homeUUIDsByWalletKeyAssertionXPCConnection, 0);
  objc_storeStrong((id *)&self->_mediaGroupParticipantDataLocalStorage, 0);
  objc_storeStrong((id *)&self->_userDeviceCapabilitiesRequestManager, 0);
  objc_storeStrong((id *)&self->_mobileAssetManager, 0);
  objc_storeStrong((id *)&self->_lastEventStoreController, 0);
  objc_storeStrong((id *)&self->_lastEventStore, 0);
  objc_storeStrong((id *)&self->_accessoryBrowserInternal, 0);
  objc_storeStrong((id *)&self->_biomeEventManager, 0);
  objc_storeStrong((id *)&self->_debounceRegenerateAssistantSyncDataTimer, 0);
  objc_storeStrong((id *)&self->_matterSoftwareUpdateProviderDelegate, 0);
  objc_storeStrong((id *)&self->_accessoryFirmwareUpdateManager, 0);
  objc_storeStrong((id *)&self->_siriSyncNotificationReasons, 0);
  objc_storeStrong((id *)&self->_legacyAccessoryPairingController, 0);
  objc_storeStrong((id *)&self->_cloudAccount, 0);
  objc_storeStrong((id *)&self->_syncManager, 0);
  objc_storeStrong(&self->_mkfContext, 0);
  objc_storeStrong((id *)&self->_siriEndpointOnboardingManager, 0);
  objc_storeStrong((id *)&self->_hh2FrameworkSwitch, 0);
  objc_storeStrong((id *)&self->_accessorySetupManager, 0);
  objc_storeStrong((id *)&self->_currentAccessorySetupMetricDispatcher, 0);
  objc_storeStrong((id *)&self->_userDefaults, 0);
  objc_storeStrong((id *)&self->_residentMesh, 0);
  objc_storeStrong((id *)&self->_appData, 0);
  objc_storeStrong((id *)&self->_watchPushDelayTimer, 0);
  objc_storeStrong((id *)&self->_pendingFragmentationStream, 0);
  objc_storeStrong((id *)&self->_remoteAccessHealthMonitorTimer, 0);
  objc_storeStrong((id *)&self->_clientConnectionQueue, 0);
  objc_storeStrong((id *)&self->_clientConnection, 0);
  objc_storeStrong((id *)&self->_incomingInvitations, 0);
  objc_storeStrong((id *)&self->_accountRegistry, 0);
  objc_storeStrong((id *)&self->_fmfHandler, 0);
  objc_storeStrong((id *)&self->_locationHandler, 0);
  objc_storeStrong((id *)&self->_cloudDataSyncStateFilter, 0);
  objc_storeStrong((id *)&self->_cloudOperationRetryTimer, 0);
  objc_storeStrong((id *)&self->_identityRegistry, 0);
  objc_storeStrong((id *)&self->_dialogCancelationContexts, 0);
  objc_storeStrong((id *)&self->_msgFilterChain, 0);
  objc_storeStrong((id *)&self->_pendingResidentSetupSessions, 0);
  objc_storeStrong((id *)&self->_pendingRemoteSessions, 0);
  objc_storeStrong((id *)&self->_pendingDataSyncAcks, 0);
  objc_storeStrong((id *)&self->_dataTag, 0);
  objc_storeStrong((id *)&self->_backingStore, 0);
  objc_storeStrong((id *)&self->_watchManager, 0);
  objc_storeStrong((id *)&self->_setupActivity, 0);
  objc_storeStrong((id *)&self->_idsFirewallManager, 0);
  objc_storeStrong((id *)&self->_idsInvitationManager, 0);
  objc_storeStrong((id *)&self->_notificationCenter, 0);
  objc_storeStrong((id *)&self->_powerManager, 0);
  objc_storeStrong((id *)&self->_pendingResponsesForAccessoryFinder, 0);
  objc_storeStrong((id *)&self->_accessoryFinderTimer, 0);
  objc_storeStrong((id *)&self->_nameValidator, 0);
  objc_storeStrong((id *)&self->_pairedSync, 0);
  objc_storeStrong((id *)&self->_watchSyncRetryContextByRetryTimer, 0);
  objc_storeStrong((id *)&self->_watchSyncRetryContextBySyncIdentifier, 0);
  objc_storeStrong((id *)&self->_watchSyncStateMap, 0);
  objc_storeStrong((id *)&self->_associatedWatchPeers, 0);
  objc_storeStrong((id *)&self->_fullSyncedWatchPeers, 0);
  objc_storeStrong((id *)&self->_associatedRemotePeers, 0);
  objc_storeStrong((id *)&self->_unassociatedRemotePeers, 0);
  objc_storeStrong((id *)&self->_messageDispatcher, 0);
  objc_storeStrong((id *)&self->_workQueue, 0);
  objc_storeStrong((id *)&self->_lastCurrentHomeUUID, 0);
  objc_storeStrong((id *)&self->_primaryHomeUUID, 0);
  objc_storeStrong((id *)&self->_uuidsOfRemovedHomes, 0);
  objc_storeStrong((id *)&self->_cloudZones, 0);
  objc_storeStrong((id *)&self->_uuid, 0);
  objc_storeStrong((id *)&self->_homeManagerObjectChangeHandler, 0);
  objc_storeStrong((id *)&self->_defaultDatabase, 0);
  objc_storeStrong((id *)&self->_hapKeyStore, 0);
  objc_storeStrong((id *)&self->_widgetTimelineRefresher, 0);
  objc_storeStrong((id *)&self->_selfRemovalWatchdog, 0);
  objc_storeStrong((id *)&self->_sharedUserLastSyncManager, 0);
  objc_storeStrong((id *)&self->_lastRemovedCurrentAccessoryUUID, 0);
  objc_storeStrong((id *)&self->_multiUserSettingsMetricEventDispatcher, 0);
  objc_storeStrong((id *)&self->_siriEndPointSettingsSyncManager, 0);
  objc_storeStrong((id *)&self->_eventRouterAssertionController, 0);
  objc_storeStrong((id *)&self->_eventRouterXPCServer, 0);
  objc_storeStrong((id *)&self->_loggingMemoryEventForwarder, 0);
  objc_storeStrong((id *)&self->_memoryEventRouter, 0);
  objc_storeStrong((id *)&self->_registrationForwardingEventRouter, 0);
  objc_storeStrong((id *)&self->_bonjourBrowserHelperLastCompletionDate, 0);
  objc_storeStrong(&self->_browseAssertion, 0);
  objc_storeStrong((id *)&self->_activeConnections, 0);
  objc_storeStrong((id *)&self->_microLocationManager, 0);
  objc_storeStrong((id *)&self->_microLocationLogEventObserver, 0);
  objc_storeStrong((id *)&self->_biomeLogEventObserver, 0);
  objc_storeStrong((id *)&self->_duetSubscriber, 0);
  objc_storeStrong((id *)&self->_bonjourBrowser, 0);
  objc_storeStrong((id *)&self->_memoryTracker, 0);
  objc_storeStrong((id *)&self->_accessorySetupCoordinator, 0);
  objc_storeStrong((id *)&self->_appleMediaAccessoryDiagnosticInfoController, 0);
  objc_storeStrong((id *)&self->_multiUserStatusController, 0);
  objc_storeStrong((id *)&self->_userCloudShareManager, 0);
  objc_storeStrong((id *)&self->_unprocessedOperationModelIdentifiers, 0);
  objc_storeStrong((id *)&self->_remoteAccountManager, 0);
  objc_storeStrong((id *)&self->_darwinNotificationProvider, 0);
  objc_storeStrong((id *)&self->_demoAccessories, 0);
  objc_storeStrong((id *)&self->_mergeIDsOfUsersOfRemovedSharedHomes, 0);
  objc_storeStrong((id *)&self->_accessorySetupMetricDispatchers, 0);
  objc_storeStrong((id *)&self->_deviceSetupSessions, 0);
  objc_storeStrong((id *)&self->_userPushCacheMap, 0);
  objc_storeStrong((id *)&self->_companionManager, 0);
  objc_storeStrong((id *)&self->_pendingHomesBeingRemoved, 0);
  objc_storeStrong((id *)&self->_memoryMonitorLogEventTimer, 0);
  objc_storeStrong((id *)&self->_periodicMobileCatalogUpdateTimer, 0);
  objc_storeStrong((id *)&self->_debounceHomesUpdateTimer, 0);
  objc_storeStrong((id *)&self->_bgOpsManager, 0);
  objc_storeStrong((id *)&self->_appleAccountManager, 0);
  objc_storeStrong((id *)&self->_logEventSubmitter, 0);
  objc_storeStrong((id *)&self->_metricsManager, 0);
  objc_storeStrong((id *)&self->_cameraLoadBalancer, 0);
  objc_storeStrong((id *)&self->_lookup, 0);
  objc_storeStrong((id *)&self->_capabilitiesController, 0);
  objc_storeStrong((id *)&self->_idsServerBag, 0);
  objc_storeStrong((id *)&self->_mtsXPCServer, 0);
  objc_storeStrong((id *)&self->_chipDataSource, 0);
  objc_storeStrong((id *)&self->_compositeSettingsControllerManager, 0);
  objc_storeStrong((id *)&self->_gatherer, 0);
  objc_storeStrong((id *)&self->_widgetConfigurationReader, 0);
  objc_storeStrong((id *)&self->_softwareUpdateManager, 0);
  objc_storeStrong((id *)&self->_startupCompleted, 0);
  objc_storeStrong((id *)&self->_overrideCurrentHomeUUIDToNil, 0);
  objc_storeStrong((id *)&self->_currentHomeUUIDOverride, 0);
  objc_storeStrong((id *)&self->_currentHomeUUID, 0);
  objc_storeStrong((id *)&self->_sharedUserPrivateSettingsManager, 0);
  objc_storeStrong((id *)&self->_homeSharedUserCloudShareManager, 0);
  objc_storeStrong((id *)&self->_homeOwnerCloudShareManager, 0);
  objc_storeStrong((id *)&self->_logger, 0);
  objc_storeStrong((id *)&self->_homes, 0);
}

uint64_t __50__HMDHomeManager__handleHMMMXPCConnectionRemoved___block_invoke(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "cleanupHMMMHandlersForClientConnection:", *(_QWORD *)(a1 + 32));
}

uint64_t __57__HMDHomeManager_accessorySetupMetricDispatchersForHome___block_invoke(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "hasHome:", *(_QWORD *)(a1 + 32));
}

uint64_t __71__HMDHomeManager_removeAccessorySetupMetricDispatcherForAccessoryUUID___block_invoke(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  uint64_t v5;

  objc_msgSend(a2, "trackingInfo");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "accessoryUUID");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v4, "hmf_isEqualToUUID:", *(_QWORD *)(a1 + 32));

  return v5;
}

uint64_t __65__HMDHomeManager_accessorySetupMetricDispatcherForAccessoryUUID___block_invoke(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  uint64_t v5;

  objc_msgSend(a2, "trackingInfo");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "accessoryUUID");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v4, "hmf_isEqualToUUID:", *(_QWORD *)(a1 + 32));

  return v5;
}

void __43__HMDHomeManager_handleDeleteModelMessage___block_invoke(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  id v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  id v15;
  void *v16;
  NSObject *v17;
  void *v18;
  void *v19;
  char isKindOfClass;
  int v21;
  void *v22;
  void *v23;
  void *v24;
  id v25;
  NSObject *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  char v31;
  id v32;
  void *v33;
  uint64_t v34;
  id v35;
  NSObject *v36;
  NSObject *v37;
  void *v38;
  void *v39;
  id v40;
  NSObject *v41;
  void *v42;
  void *v43;
  void *v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  id obj;
  id v49;
  id v50;
  uint64_t v51;
  id v52;
  id v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  const __CFString *v58;
  void *v59;
  uint8_t buf[4];
  void *v61;
  __int16 v62;
  void *v63;
  uint8_t v64[4];
  void *v65;
  __int16 v66;
  void *v67;
  uint64_t v68;

  v1 = a1;
  v68 = *MEMORY[0x24BDAC8D0];
  v2 = *(void **)(a1 + 40);
  v50 = *(id *)(a1 + 32);
  v49 = v2;
  if (isInternalBuild())
  {
    v46 = v1;
    v56 = 0u;
    v57 = 0u;
    v54 = 0u;
    v55 = 0u;
    +[HMDCoreData managedObjectModel](HMDCoreData, "managedObjectModel");
    obj = (id)objc_claimAutoreleasedReturnValue();
    v3 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v54, v64, 16);
    if (v3)
    {
      v4 = v3;
      v51 = *(_QWORD *)v55;
LABEL_4:
      v5 = 0;
      while (1)
      {
        if (*(_QWORD *)v55 != v51)
          objc_enumerationMutation(obj);
        v6 = *(void **)(*((_QWORD *)&v54 + 1) + 8 * v5);
        objc_msgSend(v6, "propertiesByName");
        v7 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v7, "objectForKeyedSubscript:", CFSTR("modelID"));
        v8 = (void *)objc_claimAutoreleasedReturnValue();

        if (v8)
        {
          v9 = (void *)MEMORY[0x227676638]();
          v10 = objc_alloc(MEMORY[0x24BDBB678]);
          objc_msgSend(v6, "name");
          v11 = (void *)objc_claimAutoreleasedReturnValue();
          v12 = (void *)objc_msgSend(v10, "initWithEntityName:", v11);

          objc_msgSend(MEMORY[0x24BDD1758], "predicateWithFormat:", CFSTR("modelID == %@"), v50);
          v13 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v12, "setPredicate:", v13);
          v53 = 0;
          objc_msgSend(v49, "executeFetchRequest:error:", v12, &v53);
          v14 = (void *)objc_claimAutoreleasedReturnValue();
          v15 = v53;
          v16 = (void *)MEMORY[0x227676638]();
          HMFGetOSLogHandle();
          v17 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
          {
            HMFGetLogIdentifier();
            v18 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 138543618;
            v61 = v18;
            v62 = 2112;
            v63 = v14;
            _os_log_impl(&dword_2218F0000, v17, OS_LOG_TYPE_INFO, "%{public}@fetchedObjects : %@", buf, 0x16u);

          }
          objc_autoreleasePoolPop(v16);
          if (objc_msgSend(v14, "count")
            && (objc_msgSend(v14, "firstObject"),
                v19 = (void *)objc_claimAutoreleasedReturnValue(),
                objc_opt_class(),
                isKindOfClass = objc_opt_isKindOfClass(),
                v19,
                (isKindOfClass & 1) != 0))
          {
            objc_msgSend(v14, "firstObject");
            v47 = objc_claimAutoreleasedReturnValue();
            v21 = 0;
          }
          else
          {
            v21 = 1;
          }

          objc_autoreleasePoolPop(v9);
          if (!v21)
            break;
        }
        if (v4 == ++v5)
        {
          v4 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v54, v64, 16);
          if (v4)
            goto LABEL_4;
          goto LABEL_17;
        }
      }
    }
    else
    {
LABEL_17:
      v47 = 0;
    }

    v1 = v46;
    v22 = (void *)v47;
  }
  else
  {
    v22 = 0;
  }

  if (v22)
  {
    objc_msgSend(v22, "debugDescription");
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    v24 = (void *)MEMORY[0x227676638]();
    v25 = *(id *)(v1 + 48);
    HMFGetOSLogHandle();
    v26 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v26, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v27 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)v64 = 138543618;
      v65 = v27;
      v66 = 2112;
      v67 = v23;
      _os_log_impl(&dword_2218F0000, v26, OS_LOG_TYPE_INFO, "%{public}@Found the entity to delete: %@", v64, 0x16u);

    }
    objc_autoreleasePoolPop(v24);
    v28 = v22;
    objc_msgSend(*(id *)(v1 + 40), "deleteObject:", v22);
    v58 = CFSTR("entity");
    v59 = v23;
    objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", &v59, &v58, 1);
    v29 = (void *)objc_claimAutoreleasedReturnValue();
    v30 = *(void **)(v1 + 40);
    v52 = 0;
    v31 = objc_msgSend(v30, "save:", &v52);
    v32 = v52;
    v33 = (void *)MEMORY[0x227676638]();
    v34 = v1;
    v35 = *(id *)(v1 + 48);
    HMFGetOSLogHandle();
    v36 = objc_claimAutoreleasedReturnValue();
    v37 = v36;
    if ((v31 & 1) != 0)
    {
      if (os_log_type_enabled(v36, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v38 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)v64 = 138543618;
        v65 = v38;
        v66 = 2112;
        v67 = v23;
        _os_log_impl(&dword_2218F0000, v37, OS_LOG_TYPE_INFO, "%{public}@Successfully deleted the entity: %@", v64, 0x16u);

      }
      objc_autoreleasePoolPop(v33);
      objc_msgSend(*(id *)(v34 + 56), "respondWithPayload:", v29);
    }
    else
    {
      if (os_log_type_enabled(v36, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v45 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)v64 = 138543618;
        v65 = v45;
        v66 = 2112;
        v67 = v23;
        _os_log_impl(&dword_2218F0000, v37, OS_LOG_TYPE_ERROR, "%{public}@Unable to delete the entity: %@", v64, 0x16u);

      }
      objc_autoreleasePoolPop(v33);
      objc_msgSend(*(id *)(v34 + 56), "respondWithPayload:error:", v29, v32);
    }

    v22 = v28;
  }
  else
  {
    v39 = (void *)MEMORY[0x227676638]();
    v40 = *(id *)(v1 + 48);
    HMFGetOSLogHandle();
    v41 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v41, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v42 = (void *)objc_claimAutoreleasedReturnValue();
      v43 = *(void **)(v1 + 32);
      *(_DWORD *)v64 = 138543618;
      v65 = v42;
      v66 = 2112;
      v67 = v43;
      _os_log_impl(&dword_2218F0000, v41, OS_LOG_TYPE_ERROR, "%{public}@Could not fetch model with modelID from working store: %@", v64, 0x16u);

    }
    objc_autoreleasePoolPop(v39);
    v44 = *(void **)(v1 + 56);
    objc_msgSend(MEMORY[0x24BDD1540], "hmErrorWithCode:", 20);
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v44, "respondWithError:", v23);
  }

}

uint64_t __44__HMDHomeManager_handleSiriSyncDataRequest___block_invoke(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_handleAssistantSyncDataRequest:", *(_QWORD *)(a1 + 40));
}

uint64_t __43__HMDHomeManager_assistantSyncDataChanged___block_invoke(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_assistantSyncDataChanged:", *(_QWORD *)(a1 + 40));
}

uint64_t __59__HMDHomeManager__handleCurrentAccessoryAddedNotification___block_invoke(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "postFinishSetupForCurrentAccessoryFollowUpIfNeeded");
}

void __61__HMDHomeManager__handleCurrentAccessoryRemovedNotification___block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;
  os_unfair_lock_s *v4;
  void *v5;
  char v6;
  void *v7;
  void *v8;
  id v9;
  NSObject *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  id v15;
  NSObject *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  int v22;
  void *v23;
  __int16 v24;
  void *v25;
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  objc_msgSend(*(id *)(a1 + 32), "userInfo");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "hmf_UUIDForKey:", CFSTR("HMDLastRemovedCurrentAccessoryUUIDKey"));
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  if (v3)
  {
    v4 = (os_unfair_lock_s *)(*(_QWORD *)(a1 + 40) + 48);
    os_unfair_lock_lock_with_options();
    objc_msgSend(*(id *)(a1 + 40), "lastRemovedCurrentAccessoryUUID");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = objc_msgSend(v3, "hmf_isEqualToUUID:", v5);

    if ((v6 & 1) != 0)
    {
      os_unfair_lock_unlock(v4);
      objc_msgSend(*(id *)(a1 + 40), "capabilitiesController");
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v7, "didRemoveCurrentAccessory:", v3);

    }
    else
    {
      objc_msgSend(*(id *)(a1 + 40), "setLastRemovedCurrentAccessoryUUID:", v3);
      os_unfair_lock_unlock(v4);
      objc_msgSend(*(id *)(a1 + 40), "capabilitiesController");
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v13, "didRemoveCurrentAccessory:", v3);

      v14 = (void *)MEMORY[0x227676638]();
      v15 = *(id *)(a1 + 40);
      HMFGetOSLogHandle();
      v16 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
      {
        HMFGetLogIdentifier();
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        v22 = 138543618;
        v23 = v17;
        v24 = 2112;
        v25 = v3;
        _os_log_impl(&dword_2218F0000, v16, OS_LOG_TYPE_DEFAULT, "%{public}@Last removed current accessory changed to %@", (uint8_t *)&v22, 0x16u);

      }
      objc_autoreleasePoolPop(v14);
      objc_msgSend(*(id *)(a1 + 40), "userDefaults");
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v3, "UUIDString");
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v18, "setObject:forKey:", v19, CFSTR("HMDLastRemovedCurrentAccessoryUUIDKey"));

      objc_msgSend(*(id *)(a1 + 40), "resetTTSUHH2SettingsMigrationKey");
      v20 = *(void **)(a1 + 40);
      objc_msgSend(v20, "uuid");
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v20, "_updateGenerationCounterWithReason:sourceUUID:shouldNotifyClients:", CFSTR("CurrentAccessoryRemoved"), v21, 1);

    }
    objc_msgSend(*(id *)(a1 + 40), "postFinishSetupForCurrentAccessoryFollowUpIfNeeded");
  }
  else
  {
    v8 = (void *)MEMORY[0x227676638]();
    v9 = *(id *)(a1 + 40);
    HMFGetOSLogHandle();
    v10 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      v12 = *(void **)(a1 + 32);
      v22 = 138543618;
      v23 = v11;
      v24 = 2112;
      v25 = v12;
      _os_log_impl(&dword_2218F0000, v10, OS_LOG_TYPE_ERROR, "%{public}@Last removed current accessory uuid missing from notification : %@", (uint8_t *)&v22, 0x16u);

    }
    objc_autoreleasePoolPop(v8);
  }

}

id __37__HMDHomeManager_archiveServerToken___block_invoke(uint64_t a1)
{
  return +[HMDPersistentStore archiveCloudServerTokenData:](HMDPersistentStore, "archiveCloudServerTokenData:", *(_QWORD *)(a1 + 32));
}

void __49__HMDHomeManager_setupSession_didCloseWithError___block_invoke(uint64_t a1)
{
  void *v2;
  id v3;
  NSObject *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  HMDAccessorySetupMetricDispatcher *v10;
  void *v11;
  id v12;
  NSObject *v13;
  void *v14;
  void *v15;
  HMDAccessorySetupMetricDispatcher *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  id v23;
  NSObject *v24;
  void *v25;
  void *v26;
  void *v27;
  id v28;
  NSObject *v29;
  void *v30;
  void *v31;
  void *v32;
  id v33;
  void *v34;
  void *v35;
  void *v36;
  id v37;
  NSObject *v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  int v43;
  void *v44;
  id v45;
  NSObject *v46;
  void *v47;
  void *v48;
  void *v49;
  void *v50;
  void *v51;
  os_unfair_lock_s *v52;
  void *v53;
  void *v54;
  void *v55;
  BOOL v56;
  void *v57;
  id v58;
  NSObject *v59;
  void *v60;
  void *v61;
  void *v62;
  void *v63;
  void *v64;
  void *v65;
  void *v66;
  void *context;
  void *contexta;
  int contextb;
  int v70;
  uint8_t buf[4];
  void *v72;
  __int16 v73;
  void *v74;
  __int16 v75;
  void *v76;
  uint64_t v77;

  v77 = *MEMORY[0x24BDAC8D0];
  v2 = (void *)MEMORY[0x227676638]();
  v3 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    HMFGetLogIdentifier();
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 40), "identifier");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v7 = *(void **)(a1 + 48);
    *(_DWORD *)buf = 138543874;
    v72 = v5;
    v73 = 2112;
    v74 = v6;
    v75 = 2112;
    v76 = v7;
    _os_log_impl(&dword_2218F0000, v4, OS_LOG_TYPE_DEFAULT, "%{public}@Setup Session : %@, closed with error: %@", buf, 0x20u);

  }
  objc_autoreleasePoolPop(v2);
  objc_msgSend(*(id *)(a1 + 40), "setupTrackingInfo");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "accessoryUUID");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  if (v9
    && (objc_msgSend(*(id *)(a1 + 32), "accessorySetupMetricDispatcherForAccessoryUUID:", v9),
        v10 = (HMDAccessorySetupMetricDispatcher *)objc_claimAutoreleasedReturnValue(),
        -[HMDAccessorySetupMetricDispatcher updateTrackingInfo:](v10, "updateTrackingInfo:", v8),
        v10))
  {
    v70 = 0;
  }
  else
  {
    v11 = (void *)MEMORY[0x227676638]();
    v12 = *(id *)(a1 + 32);
    HMFGetOSLogHandle();
    v13 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(*(id *)(a1 + 40), "identifier");
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543874;
      v72 = v14;
      v73 = 2112;
      v74 = v15;
      v75 = 2112;
      v76 = v9;
      _os_log_impl(&dword_2218F0000, v13, OS_LOG_TYPE_INFO, "%{public}@Setup Session : %@, did not find existing setup metric dispatcher for accessory uuid: %@", buf, 0x20u);

    }
    objc_autoreleasePoolPop(v11);
    v16 = [HMDAccessorySetupMetricDispatcher alloc];
    objc_msgSend(*(id *)(a1 + 32), "workQueue");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 40), "identifier");
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    v10 = -[HMDAccessorySetupMetricDispatcher initWithQueue:trackingInfo:setupSessionIdentifier:homeManager:](v16, "initWithQueue:trackingInfo:setupSessionIdentifier:homeManager:", v17, v8, v18, *(_QWORD *)(a1 + 32));

    -[HMDAccessorySetupMetricDispatcher setDelegate:](v10, "setDelegate:", *(_QWORD *)(a1 + 32));
    v70 = 1;
  }
  if (objc_msgSend(*(id *)(a1 + 40), "role") == 1)
  {
    objc_msgSend(*(id *)(a1 + 32), "currentAccessorySetupMetricDispatcher");
    v19 = (void *)objc_claimAutoreleasedReturnValue();

    if (v19)
    {
      objc_msgSend(*(id *)(a1 + 32), "currentAccessorySetupMetricDispatcher");
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v20, "markSetupBeginStage:error:", 2, *(_QWORD *)(a1 + 48));

    }
  }
  if (!*(_QWORD *)(a1 + 48))
  {
    if (v9)
    {
      objc_msgSend(*(id *)(a1 + 32), "accessoryWithUUID:", v9);
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      LODWORD(context) = v21 != 0;
      if (v21)
      {
        v22 = (void *)MEMORY[0x227676638]();
        v23 = *(id *)(a1 + 32);
        HMFGetOSLogHandle();
        v24 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v24, OS_LOG_TYPE_INFO))
        {
          HMFGetLogIdentifier();
          v25 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(*(id *)(a1 + 40), "identifier");
          v26 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543874;
          v72 = v25;
          v73 = 2112;
          v74 = v26;
          v75 = 2112;
          v76 = v21;
          _os_log_impl(&dword_2218F0000, v24, OS_LOG_TYPE_INFO, "%{public}@Submitting Repair Setup Session metric : %@ as accessory is already in the home %@", buf, 0x20u);

        }
        objc_autoreleasePoolPop(v22);
        -[HMDAccessorySetupMetricDispatcher markRepairSessionComplete](v10, "markRepairSessionComplete");
      }

    }
    else
    {
      v27 = (void *)MEMORY[0x227676638]();
      v28 = *(id *)(a1 + 32);
      HMFGetOSLogHandle();
      v29 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v29, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v30 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(*(id *)(a1 + 40), "identifier");
        v31 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        v72 = v30;
        v73 = 2112;
        v74 = v31;
        _os_log_impl(&dword_2218F0000, v29, OS_LOG_TYPE_INFO, "%{public}@Submitting Setup Session metric : %@ as accessory was not provided in setup payload", buf, 0x16u);

      }
      objc_autoreleasePoolPop(v27);
      LODWORD(context) = 1;
    }
    objc_msgSend(v8, "accessoryIDSIdentifier", context);
    v32 = (void *)objc_claimAutoreleasedReturnValue();

    if (v32)
    {
      v33 = objc_alloc(MEMORY[0x24BDD1880]);
      objc_msgSend(v8, "accessoryIDSIdentifier");
      v34 = (void *)objc_claimAutoreleasedReturnValue();
      v35 = (void *)objc_msgSend(v33, "initWithUUIDString:", v34);

      if (v35)
      {
        objc_msgSend(*(id *)(a1 + 32), "accessoryWithIDSIdentifier:", v35);
        v36 = (void *)objc_claimAutoreleasedReturnValue();
        if (v36)
        {
          contexta = (void *)MEMORY[0x227676638]();
          v37 = *(id *)(a1 + 32);
          HMFGetOSLogHandle();
          v38 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v38, OS_LOG_TYPE_INFO))
          {
            HMFGetLogIdentifier();
            v39 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(*(id *)(a1 + 40), "identifier", contexta);
            v40 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 138543874;
            v72 = v39;
            v73 = 2112;
            v74 = v40;
            v75 = 2112;
            v76 = v36;
            _os_log_impl(&dword_2218F0000, v38, OS_LOG_TYPE_INFO, "%{public}@Submitting Repair Setup Session metric : %@ as accessory with matching IDS identifier is already in the home %@", buf, 0x20u);

          }
          objc_autoreleasePoolPop(contexta);
          -[HMDAccessorySetupMetricDispatcher markRepairSessionComplete](v10, "markRepairSessionComplete");
          LODWORD(contexta) = 1;
        }

      }
    }
    objc_msgSend(v8, "accessoryCategory", contexta);
    v41 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v41, "categoryType");
    v42 = (void *)objc_claimAutoreleasedReturnValue();
    v43 = objc_msgSend(v42, "isEqualToString:", *MEMORY[0x24BDD49A0]);

    if (v43)
    {
      v44 = (void *)MEMORY[0x227676638]();
      v45 = *(id *)(a1 + 32);
      HMFGetOSLogHandle();
      v46 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v46, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v47 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(*(id *)(a1 + 40), "identifier");
        v48 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543874;
        v72 = v47;
        v73 = 2112;
        v74 = v48;
        v75 = 2112;
        v76 = v9;
        _os_log_impl(&dword_2218F0000, v46, OS_LOG_TYPE_INFO, "%{public}@Submitting Setup Session metric : %@ as accessory is an ATV %@", buf, 0x20u);

      }
      objc_autoreleasePoolPop(v44);
    }
    else if (!contextb)
    {
      objc_msgSend(*(id *)(a1 + 32), "eventRouterAssertionController");
      v49 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v49, "takeEventRouterAssertion");
      v50 = (void *)objc_claimAutoreleasedReturnValue();

      -[HMDAccessorySetupMetricDispatcher addRemoteEventRouterAssertion:](v10, "addRemoteEventRouterAssertion:", v50);
      if (v70)
        objc_msgSend(*(id *)(a1 + 32), "addAccessorySetupMetricDispatcher:", v10);

      goto LABEL_40;
    }
    -[HMDAccessorySetupMetricDispatcher submit](v10, "submit");
    objc_msgSend(*(id *)(a1 + 32), "removeAccessorySetupMetricDispatcherForAccessoryUUID:", v9);
LABEL_40:
    objc_msgSend(*(id *)(a1 + 40), "setupTrackingInfo");
    v51 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 32), "setSetupEndTimestamp:", (double)(unint64_t)objc_msgSend(v51, "endTime"));

    goto LABEL_41;
  }
  -[HMDAccessorySetupMetricDispatcher submit](v10, "submit");
  objc_msgSend(*(id *)(a1 + 32), "removeAccessorySetupMetricDispatcherForAccessoryUUID:", v9);
LABEL_41:
  v52 = (os_unfair_lock_s *)(*(_QWORD *)(a1 + 32) + 48);
  os_unfair_lock_lock_with_options();
  objc_msgSend(*(id *)(a1 + 32), "deviceSetupSessions");
  v53 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v53, "removeObject:", *(_QWORD *)(a1 + 40));

  os_unfair_lock_unlock(v52);
  if (!*(_QWORD *)(a1 + 48) && objc_msgSend(*(id *)(a1 + 40), "role") == 1)
  {
    objc_msgSend(MEMORY[0x24BE1BC08], "systemStore");
    v54 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v54, "getLocalPairingIdentity:", 0);
    v55 = (void *)objc_claimAutoreleasedReturnValue();
    v56 = v55 == 0;

    if (!v56)
    {
      v57 = (void *)MEMORY[0x227676638]();
      v58 = *(id *)(a1 + 32);
      HMFGetOSLogHandle();
      v59 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v59, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v60 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543362;
        v72 = v60;
        _os_log_impl(&dword_2218F0000, v59, OS_LOG_TYPE_INFO, "%{public}@Resetting legacy key transfer and starting cloud fetch", buf, 0xCu);

      }
      objc_autoreleasePoolPop(v57);
      objc_msgSend(MEMORY[0x24BDBCED8], "dictionary");
      v61 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v61, "setObject:forKeyedSubscript:", *(_QWORD *)(a1 + 48), CFSTR("TTSU.error"));
      v62 = *(void **)(a1 + 32);
      v63 = (void *)objc_msgSend(v61, "copy");
      logAndPostNotification(CFSTR("TTSU.Finished.NotificationKey"), v62, v63);

      objc_msgSend(*(id *)(a1 + 32), "userDefaults");
      v64 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v64, "setBool:forKey:", 1, CFSTR("TTSU.Finished"));

    }
  }
  if (objc_msgSend(*(id *)(a1 + 40), "role") == 1)
  {
    objc_msgSend(*(id *)(a1 + 32), "currentAccessorySetupMetricDispatcher");
    v65 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v65, "markSetupEndStage:error:", 2, *(_QWORD *)(a1 + 48));

    if (objc_msgSend(*(id *)(a1 + 32), "firstCloudKitImportComplete"))
    {
      objc_msgSend(*(id *)(a1 + 32), "currentAccessorySetupMetricDispatcher");
      v66 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v66, "markSetupEndStage:error:", 13, *(_QWORD *)(a1 + 48));

    }
  }

}

void __43__HMDHomeManager___handleCompanionUpdated___block_invoke(uint64_t a1)
{
  void *v2;
  NSObject *v3;
  void *v4;
  uint64_t v5;
  void *v6;
  NSObject *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t i;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint8_t v23[128];
  uint8_t buf[4];
  void *v25;
  __int16 v26;
  uint64_t v27;
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  v2 = (void *)MEMORY[0x227676638]();
  HMFGetOSLogHandle();
  v3 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
  {
    HMFGetLogIdentifier();
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    v5 = *(_QWORD *)(a1 + 32);
    *(_DWORD *)buf = 138543618;
    v25 = v4;
    v26 = 2112;
    v27 = v5;
    _os_log_impl(&dword_2218F0000, v3, OS_LOG_TYPE_DEBUG, "%{public}@Received notification that the companion changed: %@", buf, 0x16u);

  }
  objc_autoreleasePoolPop(v2);
  v6 = (void *)MEMORY[0x227676638](objc_msgSend(*(id *)(a1 + 40), "_checkAndInformCompanionDevice"));
  HMFGetOSLogHandle();
  v7 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543362;
    v25 = v8;
    _os_log_impl(&dword_2218F0000, v7, OS_LOG_TYPE_INFO, "%{public}@Electing companion based off of changed companion device", buf, 0xCu);

  }
  objc_autoreleasePoolPop(v6);
  v21 = 0u;
  v22 = 0u;
  v19 = 0u;
  v20 = 0u;
  objc_msgSend(*(id *)(a1 + 40), "homes", 0);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v19, v23, 16);
  if (v10)
  {
    v11 = v10;
    v12 = *(_QWORD *)v20;
    do
    {
      for (i = 0; i != v11; ++i)
      {
        if (*(_QWORD *)v20 != v12)
          objc_enumerationMutation(v9);
        v14 = *(void **)(*((_QWORD *)&v19 + 1) + 8 * i);
        v15 = *(void **)(a1 + 40);
        objc_msgSend(v14, "uuid");
        v16 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v15, "electRemoteAccessPeerForHome:", v16);

        if (*(_QWORD *)(a1 + 32))
        {
          objc_msgSend(v14, "primaryResident");
          v17 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v17, "device");
          v18 = (void *)objc_claimAutoreleasedReturnValue();

        }
        else
        {
          v18 = 0;
        }
        objc_msgSend(v14, "resubscribeForNotificationsOnResident:", v18);

      }
      v11 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v19, v23, 16);
    }
    while (v11);
  }

}

uint64_t __47__HMDHomeManager___handleUpdatedCurrentDevice___block_invoke(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "_handleUpdatedCurrentDevice:", *(_QWORD *)(a1 + 40));
  return objc_msgSend(*(id *)(a1 + 32), "postFinishSetupForCurrentAccessoryFollowUpIfNeeded");
}

uint64_t __52__HMDHomeManager___handleDeviceCapabilitiesUpdated___block_invoke(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_handleUpdatedCurrentDevice:", *(_QWORD *)(a1 + 40));
}

uint64_t __51__HMDHomeManager_verifyCurrentDeviceResidentStatus__block_invoke(uint64_t a1)
{
  uint64_t result;

  result = objc_msgSend(*(id *)(a1 + 32), "isResidentCapable");
  if ((_DWORD)result)
    return objc_msgSend(*(id *)(a1 + 32), "_updateResidentEnabledOnThisDevice:forceNotify:message:", objc_msgSend(*(id *)(a1 + 32), "isResidentEnabled"), 1, 0);
  return result;
}

void __50__HMDHomeManager___accountRegistryRemovedAccount___block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  id v5;
  void *v6;
  id v7;
  NSObject *v8;
  void *v9;
  void *v10;
  id v11;
  NSObject *v12;
  void *v13;
  int v14;
  void *v15;
  __int16 v16;
  id v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  objc_msgSend(*(id *)(a1 + 32), "userInfo");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "objectForKeyedSubscript:", CFSTR("HMDAccountNotificationKey"));
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v4 = v3;
  else
    v4 = 0;
  v5 = v4;

  v6 = (void *)MEMORY[0x227676638]();
  v7 = *(id *)(a1 + 40);
  HMFGetOSLogHandle();
  v8 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v14 = 138543618;
    v15 = v9;
    v16 = 2112;
    v17 = v5;
    _os_log_impl(&dword_2218F0000, v8, OS_LOG_TYPE_INFO, "%{public}@Received notification that account was removed: %@", (uint8_t *)&v14, 0x16u);

  }
  objc_autoreleasePoolPop(v6);
  if (objc_msgSend(v5, "isCurrentAccount"))
  {
    v10 = (void *)MEMORY[0x227676638]();
    v11 = *(id *)(a1 + 40);
    HMFGetOSLogHandle();
    v12 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      v14 = 138543362;
      v15 = v13;
      _os_log_impl(&dword_2218F0000, v12, OS_LOG_TYPE_INFO, "%{public}@The removed account is the current account", (uint8_t *)&v14, 0xCu);

    }
    objc_autoreleasePoolPop(v10);
    objc_msgSend(*(id *)(a1 + 40), "stopLocalTransport");
    +[HMDHH2FrameworkSwitch switchBackToHH1AndDoNotLaunchDueToPrimaryAccountRemoval](HMDHH2FrameworkSwitch, "switchBackToHH1AndDoNotLaunchDueToPrimaryAccountRemoval");
  }

}

void __48__HMDHomeManager___accountRegistryAddedAccount___block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  id v5;
  void *v6;
  id v7;
  NSObject *v8;
  void *v9;
  void *v10;
  id v11;
  NSObject *v12;
  void *v13;
  int v14;
  void *v15;
  __int16 v16;
  id v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  objc_msgSend(*(id *)(a1 + 32), "userInfo");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "objectForKeyedSubscript:", CFSTR("HMDAccountNotificationKey"));
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v4 = v3;
  else
    v4 = 0;
  v5 = v4;

  v6 = (void *)MEMORY[0x227676638]();
  v7 = *(id *)(a1 + 40);
  HMFGetOSLogHandle();
  v8 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v14 = 138543618;
    v15 = v9;
    v16 = 2112;
    v17 = v5;
    _os_log_impl(&dword_2218F0000, v8, OS_LOG_TYPE_INFO, "%{public}@Received notification that account was added: %@", (uint8_t *)&v14, 0x16u);

  }
  objc_autoreleasePoolPop(v6);
  v10 = (void *)MEMORY[0x227676638]();
  v11 = *(id *)(a1 + 40);
  HMFGetOSLogHandle();
  v12 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    v14 = 138543362;
    v15 = v13;
    _os_log_impl(&dword_2218F0000, v12, OS_LOG_TYPE_INFO, "%{public}@Not migrating triggers to owning device in HH2 mode.", (uint8_t *)&v14, 0xCu);

  }
  objc_autoreleasePoolPop(v10);

}

void __41__HMDHomeManager___accountRemovedDevice___block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;
  id v4;
  void *v5;
  void *v6;
  void *v7;
  id v8;
  void *v9;
  id v10;
  NSObject *v11;
  void *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t i;
  void *v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint8_t v23[128];
  uint8_t buf[4];
  void *v25;
  __int16 v26;
  id v27;
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  objc_msgSend(*(id *)(a1 + 32), "object");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v3 = v2;
  else
    v3 = 0;
  v4 = v3;

  objc_msgSend(*(id *)(a1 + 32), "userInfo");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "objectForKeyedSubscript:", CFSTR("HMDDeviceNotificationKey"));
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v7 = v6;
  else
    v7 = 0;
  v8 = v7;

  if (objc_msgSend(v4, "isCurrentAccount"))
  {
    v9 = (void *)MEMORY[0x227676638]();
    v10 = *(id *)(a1 + 40);
    HMFGetOSLogHandle();
    v11 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v25 = v12;
      v26 = 2112;
      v27 = v8;
      _os_log_impl(&dword_2218F0000, v11, OS_LOG_TYPE_INFO, "%{public}@Received notification that device was removed from our account: %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v9);
    v21 = 0u;
    v22 = 0u;
    v19 = 0u;
    v20 = 0u;
    objc_msgSend(*(id *)(a1 + 40), "homes", 0);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    v14 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v19, v23, 16);
    if (v14)
    {
      v15 = v14;
      v16 = *(_QWORD *)v20;
      do
      {
        for (i = 0; i != v15; ++i)
        {
          if (*(_QWORD *)v20 != v16)
            objc_enumerationMutation(v13);
          v18 = *(void **)(*((_QWORD *)&v19 + 1) + 8 * i);
          if (objc_msgSend(v18, "isOwnerUser"))
            objc_msgSend(v18, "removeResidentCapableDevice:", v8);
        }
        v15 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v19, v23, 16);
      }
      while (v15);
    }

    objc_msgSend(*(id *)(a1 + 40), "_checkForRemotePeers");
    objc_msgSend(*(id *)(a1 + 40), "_notifyXPCClientsOfUpdatedDevices");
  }

}

void __52__HMDHomeManager___handleDeviceUpdatedNotification___block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;
  id v4;
  void *v5;
  id v6;
  NSObject *v7;
  NSObject *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  id v13;
  int v14;
  void *v15;
  __int16 v16;
  id v17;
  __int16 v18;
  id v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  objc_msgSend(*(id *)(a1 + 32), "object");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v3 = v2;
  else
    v3 = 0;
  v4 = v3;

  v5 = (void *)MEMORY[0x227676638]();
  v6 = *(id *)(a1 + 40);
  HMFGetOSLogHandle();
  v7 = objc_claimAutoreleasedReturnValue();
  v8 = v7;
  if (v4)
  {
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      v14 = 138543618;
      v15 = v9;
      v16 = 2112;
      v17 = v4;
      _os_log_impl(&dword_2218F0000, v8, OS_LOG_TYPE_INFO, "%{public}@Received notification that device updated: %@", (uint8_t *)&v14, 0x16u);

    }
    objc_autoreleasePoolPop(v5);
    objc_msgSend(*(id *)(a1 + 40), "_notifyXPCClientsOfUpdatedDevices");
  }
  else
  {
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(*(id *)(a1 + 32), "object");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(*(id *)(a1 + 32), "object");
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      v14 = 138543874;
      v15 = v10;
      v16 = 2112;
      v17 = v11;
      v18 = 2112;
      v19 = (id)objc_opt_class();
      v13 = v19;
      _os_log_impl(&dword_2218F0000, v8, OS_LOG_TYPE_ERROR, "%{public}@Notification object was not an HMDDevice: %@ (%@)", (uint8_t *)&v14, 0x20u);

    }
    objc_autoreleasePoolPop(v5);
  }

}

void __39__HMDHomeManager___accountAddedDevice___block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;
  id v4;
  void *v5;
  void *v6;
  void *v7;
  id v8;
  void *v9;
  id v10;
  NSObject *v11;
  void *v12;
  int v13;
  void *v14;
  __int16 v15;
  id v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  objc_msgSend(*(id *)(a1 + 32), "object");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v3 = v2;
  else
    v3 = 0;
  v4 = v3;

  objc_msgSend(*(id *)(a1 + 32), "userInfo");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "objectForKeyedSubscript:", CFSTR("HMDDeviceNotificationKey"));
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v7 = v6;
  else
    v7 = 0;
  v8 = v7;

  if (objc_msgSend(v4, "isCurrentAccount"))
  {
    v9 = (void *)MEMORY[0x227676638]();
    v10 = *(id *)(a1 + 40);
    HMFGetOSLogHandle();
    v11 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      v13 = 138543618;
      v14 = v12;
      v15 = 2112;
      v16 = v8;
      _os_log_impl(&dword_2218F0000, v11, OS_LOG_TYPE_INFO, "%{public}@Received notification that device was added to our account: %@", (uint8_t *)&v13, 0x16u);

    }
    objc_autoreleasePoolPop(v9);
    objc_msgSend(*(id *)(a1 + 40), "_checkForRemotePeers");
    objc_msgSend(*(id *)(a1 + 40), "_notifyXPCClientsOfUpdatedDevices");
  }

}

uint64_t __53__HMDHomeManager_accessoryBrowserDidFindNewAccessory__block_invoke(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_processAnyPendingRequestsForRemoteAccess:", 0);
}

uint64_t __64__HMDHomeManager__migrateAccessAllowedWhenLockedSettingIfNeeded__block_invoke(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_updateAccessAllowedWhenLockedToLocalStore:managedObjectContext:", objc_msgSend(*(id *)(a1 + 40), "BOOLValue"), *(_QWORD *)(a1 + 48));
}

void __67__HMDHomeManager__readAccessAllowedWhenLockedSettingFromLocalStore__block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  id v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  id v11;
  NSObject *v12;
  void *v13;
  void *v14;
  void *v15;
  id v16;
  uint8_t buf[4];
  void *v18;
  __int16 v19;
  void *v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  v2 = *(void **)(a1 + 32);
  +[MKFLocalSettings fetchRequest](MKFLocalSettings, "fetchRequest");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v16 = 0;
  objc_msgSend(v2, "executeFetchRequest:error:", v3, &v16);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = v16;

  objc_msgSend(v4, "firstObject");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = v6;
  if (v6
    && (objc_msgSend(v6, "accessAllowedWhenLocked"),
        v8 = (void *)objc_claimAutoreleasedReturnValue(),
        v8,
        v8))
  {
    objc_msgSend(v7, "accessAllowedWhenLocked");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 40), "setAccessAllowedWhenLocked:", objc_msgSend(v9, "BOOLValue"));

    v10 = (void *)MEMORY[0x227676638]();
    v11 = *(id *)(a1 + 40);
    HMFGetOSLogHandle();
    v12 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(*(id *)(a1 + 40), "isAccessAllowedWhenLocked");
      HMFBooleanToString();
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v18 = v13;
      v19 = 2112;
      v20 = v14;
      _os_log_impl(&dword_2218F0000, v12, OS_LOG_TYPE_INFO, "%{public}@Access allowed when locked: %@", buf, 0x16u);

    }
  }
  else
  {
    v10 = (void *)MEMORY[0x227676638]();
    v11 = *(id *)(a1 + 40);
    HMFGetOSLogHandle();
    v12 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v18 = v15;
      _os_log_impl(&dword_2218F0000, v12, OS_LOG_TYPE_INFO, "%{public}@Did not find accessAllowedWhenLocked in local store.", buf, 0xCu);

    }
  }

  objc_autoreleasePoolPop(v10);
}

void __67__HMDHomeManager__saveAccessAllowedWhenLockedToLocalStore_message___block_invoke(uint64_t a1)
{
  void *v2;
  id v3;

  if ((objc_msgSend(*(id *)(a1 + 32), "_updateAccessAllowedWhenLockedToLocalStore:managedObjectContext:", *(unsigned __int8 *)(a1 + 56), *(_QWORD *)(a1 + 40)) & 1) != 0)
  {
    objc_msgSend(*(id *)(a1 + 32), "setAccessAllowedWhenLocked:", *(unsigned __int8 *)(a1 + 56));
    objc_msgSend(*(id *)(a1 + 48), "respondWithSuccess");
    objc_msgSend(*(id *)(a1 + 32), "notifySPIClientsAboutAccessAllowedWhenLocked:", *(unsigned __int8 *)(a1 + 56));
  }
  else
  {
    v2 = *(void **)(a1 + 48);
    objc_msgSend(MEMORY[0x24BDD1540], "hmPrivateErrorWithCode:", 2711);
    v3 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "respondWithError:", v3);

  }
}

void __38__HMDHomeManager__checkForSelfRemoval__block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  id v7;
  NSObject *v8;
  void *v9;
  NSObject *v10;
  void *v11;
  id v12;
  NSObject *v13;
  void *v14;
  _QWORD v15[5];
  id v16;
  uint8_t buf[4];
  void *v18;
  __int16 v19;
  void *v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  objc_msgSend(*(id *)(a1 + 32), "hmd_coreData");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "localStore");
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  if (v3)
  {
    objc_msgSend(v3, "metadata");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "hmf_UUIDForKey:", CFSTR("HMDLastRemovedCurrentAccessoryMetadataKey"));
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    if (v5)
    {
      v6 = (void *)MEMORY[0x227676638]();
      v7 = *(id *)(a1 + 40);
      HMFGetOSLogHandle();
      v8 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      {
        HMFGetLogIdentifier();
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        v18 = v9;
        v19 = 2112;
        v20 = v5;
        _os_log_impl(&dword_2218F0000, v8, OS_LOG_TYPE_DEFAULT, "%{public}@Found for pending self removal for: %@", buf, 0x16u);

      }
      objc_autoreleasePoolPop(v6);
      objc_msgSend(*(id *)(a1 + 40), "workQueue");
      v10 = objc_claimAutoreleasedReturnValue();
      v15[0] = MEMORY[0x24BDAC760];
      v15[1] = 3221225472;
      v15[2] = __38__HMDHomeManager__checkForSelfRemoval__block_invoke_1025;
      v15[3] = &unk_24E79C268;
      v15[4] = *(_QWORD *)(a1 + 40);
      v16 = v5;
      dispatch_async(v10, v15);

    }
  }
  else
  {
    v11 = (void *)MEMORY[0x227676638]();
    v12 = *(id *)(a1 + 40);
    HMFGetOSLogHandle();
    v13 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v18 = v14;
      _os_log_impl(&dword_2218F0000, v13, OS_LOG_TYPE_ERROR, "%{public}@Could not find local store when processing removal for AppleMediaAccessory", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v11);
  }

}

void __38__HMDHomeManager__checkForSelfRemoval__block_invoke_1025(uint64_t a1)
{
  HMDSelfRemovalWatchdog *v2;
  uint64_t v3;
  void *v4;
  HMDSelfRemovalWatchdog *v5;
  void *v6;
  void *v7;
  _QWORD v8[4];
  id v9;
  id v10;
  id location;

  v2 = [HMDSelfRemovalWatchdog alloc];
  v3 = *(_QWORD *)(a1 + 40);
  objc_msgSend(*(id *)(a1 + 32), "workQueue");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = -[HMDSelfRemovalWatchdog initWithCurrentAccessoryUUID:workQueue:](v2, "initWithCurrentAccessoryUUID:workQueue:", v3, v4);
  objc_msgSend(*(id *)(a1 + 32), "setSelfRemovalWatchdog:", v5);

  objc_msgSend(*(id *)(a1 + 32), "selfRemovalWatchdog");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "configure");

  objc_initWeak(&location, *(id *)(a1 + 32));
  objc_msgSend(*(id *)(a1 + 32), "selfRemovalWatchdog");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8[0] = MEMORY[0x24BDAC760];
  v8[1] = 3221225472;
  v8[2] = __38__HMDHomeManager__checkForSelfRemoval__block_invoke_2;
  v8[3] = &unk_24E798300;
  objc_copyWeak(&v10, &location);
  v9 = *(id *)(a1 + 40);
  objc_msgSend(v7, "startWithCompletion:", v8);

  objc_destroyWeak(&v10);
  objc_destroyWeak(&location);
}

void __38__HMDHomeManager__checkForSelfRemoval__block_invoke_2(uint64_t a1)
{
  id WeakRetained;
  NSObject *v3;
  _QWORD v4[5];
  id v5;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend(WeakRetained, "workQueue");
  v3 = objc_claimAutoreleasedReturnValue();
  v4[0] = MEMORY[0x24BDAC760];
  v4[1] = 3221225472;
  v4[2] = __38__HMDHomeManager__checkForSelfRemoval__block_invoke_3;
  v4[3] = &unk_24E79C268;
  v4[4] = WeakRetained;
  v5 = *(id *)(a1 + 32);
  dispatch_async(v3, v4);

}

void __38__HMDHomeManager__checkForSelfRemoval__block_invoke_3(uint64_t a1)
{
  void *v2;
  id v3;
  NSObject *v4;
  void *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  void *v9;
  const __CFString *v10;
  uint64_t v11;
  uint8_t buf[4];
  void *v13;
  __int16 v14;
  uint64_t v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  v2 = (void *)MEMORY[0x227676638](objc_msgSend(*(id *)(a1 + 32), "setSelfRemovalWatchdog:", 0));
  v3 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    HMFGetLogIdentifier();
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = *(_QWORD *)(a1 + 40);
    *(_DWORD *)buf = 138543618;
    v13 = v5;
    v14 = 2112;
    v15 = v6;
    _os_log_impl(&dword_2218F0000, v4, OS_LOG_TYPE_DEFAULT, "%{public}@Posting notification about current accessory removal %@", buf, 0x16u);

  }
  objc_autoreleasePoolPop(v2);
  objc_msgSend(*(id *)(a1 + 32), "notificationCenter");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = *(_QWORD *)(a1 + 40);
  v10 = CFSTR("HMDLastRemovedCurrentAccessoryUUIDKey");
  v11 = v8;
  objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", &v11, &v10, 1);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "postNotificationName:object:userInfo:", CFSTR("HMDHomeManagerDidRemoveCurrentAccessoryNotification"), 0, v9);

}

void __49__HMDHomeManager__handleDeviceSetupSessionClose___block_invoke(uint64_t a1, void *a2, uint64_t a3, _BYTE *a4)
{
  id v6;
  void *v7;
  int v8;
  void *v9;
  id v10;
  NSObject *v11;
  void *v12;
  void *v13;
  int v14;
  void *v15;
  __int16 v16;
  void *v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  v6 = a2;
  objc_msgSend(v6, "identifier");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = objc_msgSend(v7, "isEqual:", *(_QWORD *)(a1 + 32));

  if (v8)
  {
    v9 = (void *)MEMORY[0x227676638]();
    v10 = *(id *)(a1 + 40);
    HMFGetOSLogHandle();
    v11 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v6, "identifier");
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      v14 = 138543618;
      v15 = v12;
      v16 = 2112;
      v17 = v13;
      _os_log_impl(&dword_2218F0000, v11, OS_LOG_TYPE_INFO, "%{public}@Found close session: %@", (uint8_t *)&v14, 0x16u);

    }
    objc_autoreleasePoolPop(v9);
    objc_msgSend(v6, "close:", *(_QWORD *)(a1 + 48));
    *a4 = 1;
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24) = 1;
  }

}

void __77__HMDHomeManager_pingDevice_secure_restrictToLocalNetwork_completionHandler___block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id WeakRetained;
  void *v8;
  id v9;
  NSObject *v10;
  NSObject *v11;
  void *v12;
  const char *v13;
  NSObject *v14;
  os_log_type_t v15;
  uint32_t v16;
  NSObject *v17;
  _QWORD v18[4];
  id v19;
  id v20;
  uint8_t buf[4];
  void *v22;
  __int16 v23;
  id v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v5 = a2;
  v6 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v8 = (void *)MEMORY[0x227676638]();
  v9 = WeakRetained;
  HMFGetOSLogHandle();
  v10 = objc_claimAutoreleasedReturnValue();
  v11 = v10;
  if (v5)
  {
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      HMFGetLogIdentifier();
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v22 = v12;
      v23 = 2112;
      v24 = v5;
      v13 = "%{public}@Failed to respond to ping with error: %@";
      v14 = v11;
      v15 = OS_LOG_TYPE_DEFAULT;
      v16 = 22;
LABEL_6:
      _os_log_impl(&dword_2218F0000, v14, v15, v13, buf, v16);

    }
  }
  else if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543362;
    v22 = v12;
    v13 = "%{public}@Successfully responded to ping";
    v14 = v11;
    v15 = OS_LOG_TYPE_INFO;
    v16 = 12;
    goto LABEL_6;
  }

  objc_autoreleasePoolPop(v8);
  if (v9 && *(_QWORD *)(a1 + 32))
  {
    objc_msgSend(v9, "workQueue");
    v17 = objc_claimAutoreleasedReturnValue();
    v18[0] = MEMORY[0x24BDAC760];
    v18[1] = 3221225472;
    v18[2] = __77__HMDHomeManager_pingDevice_secure_restrictToLocalNetwork_completionHandler___block_invoke_1008;
    v18[3] = &unk_24E79C2B8;
    v20 = *(id *)(a1 + 32);
    v19 = v5;
    dispatch_async(v17, v18);

  }
}

uint64_t __77__HMDHomeManager_pingDevice_secure_restrictToLocalNetwork_completionHandler___block_invoke_1008(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32));
}

void __30__HMDHomeManager__handlePing___block_invoke(uint64_t a1, void *a2)
{
  void *v3;
  void (**v4)(_QWORD, _QWORD, _QWORD);
  id v5;

  v5 = a2;
  objc_msgSend(*(id *)(a1 + 32), "responseHandler");
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  if (v3)
  {
    objc_msgSend(*(id *)(a1 + 32), "responseHandler");
    v4 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
    ((void (**)(_QWORD, id, _QWORD))v4)[2](v4, v5, 0);

  }
}

void __40__HMDHomeManager__handleResolveAccount___block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id WeakRetained;
  void *v8;
  id v9;
  NSObject *v10;
  NSObject *v11;
  void *v12;
  void *v13;
  void *v14;
  void (**v15)(_QWORD, _QWORD, _QWORD);
  int v16;
  void *v17;
  __int16 v18;
  id v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  v5 = a2;
  v6 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v8 = (void *)MEMORY[0x227676638]();
  v9 = WeakRetained;
  HMFGetOSLogHandle();
  v10 = objc_claimAutoreleasedReturnValue();
  v11 = v10;
  if (v5)
  {
    if (!os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
      goto LABEL_7;
    HMFGetLogIdentifier();
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "shortDescription");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    v16 = 138543618;
    v17 = v12;
    v18 = 2112;
    v19 = v13;
    _os_log_impl(&dword_2218F0000, v11, OS_LOG_TYPE_DEFAULT, "%{public}@Resolved account: %@", (uint8_t *)&v16, 0x16u);

  }
  else
  {
    if (!os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      goto LABEL_7;
    HMFGetLogIdentifier();
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    v16 = 138543618;
    v17 = v12;
    v18 = 2112;
    v19 = v6;
    _os_log_impl(&dword_2218F0000, v11, OS_LOG_TYPE_ERROR, "%{public}@Failed to resolved account with error: %@", (uint8_t *)&v16, 0x16u);
  }

LABEL_7:
  objc_autoreleasePoolPop(v8);
  objc_msgSend(*(id *)(a1 + 32), "responseHandler");
  v14 = (void *)objc_claimAutoreleasedReturnValue();

  if (v14)
  {
    objc_msgSend(*(id *)(a1 + 32), "responseHandler");
    v15 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
    ((void (**)(_QWORD, id, _QWORD))v15)[2](v15, v6, 0);

  }
}

void __70__HMDHomeManager_handleHomeCurrentDeviceResidentEligibleNotification___block_invoke(uint64_t a1)
{
  void *v1;
  void *v2;
  _QWORD v3[2];

  v3[1] = *MEMORY[0x24BDAC8D0];
  v1 = *(void **)(a1 + 32);
  v3[0] = *(_QWORD *)(a1 + 40);
  objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", v3, 1);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "_addCurrentResidentDeviceToHomes:", v2);

}

void __73__HMDHomeManager__updateResidentEnabledOnThisDevice_forceNotify_message___block_invoke(uint64_t a1)
{
  void *v2;
  id v3;

  objc_msgSend(*(id *)(a1 + 32), "responseHandler");
  v2 = (void *)objc_claimAutoreleasedReturnValue();

  if (v2)
  {
    objc_msgSend(*(id *)(a1 + 32), "responseHandler");
    v3 = (id)objc_claimAutoreleasedReturnValue();
    (*((void (**)(id, _QWORD, _QWORD))v3 + 2))(v3, 0, 0);

  }
}

uint64_t __40__HMDHomeManager_setAppDataWithMessage___block_invoke(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_setAppDataWithMessage:", *(_QWORD *)(a1 + 40));
}

void __63__HMDHomeManager__redirectAppDataRequestToResidentWithMessage___block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  void *v8;
  void *v9;
  id v10;
  NSObject *v11;
  void *v12;
  void *v13;
  void *v14;
  id v15;
  uint64_t v16;
  id v17;
  id v18;
  void *v19;
  uint64_t v20;
  void *v21;
  id v22;
  NSObject *v23;
  void *v24;
  uint64_t v25;
  void *v26;
  id v27;
  NSObject *v28;
  void *v29;
  _QWORD v30[4];
  id v31;
  id v32;
  uint64_t v33;
  id v34;
  uint8_t buf[4];
  void *v36;
  __int16 v37;
  id v38;
  uint64_t v39;

  v39 = *MEMORY[0x24BDAC8D0];
  v5 = a2;
  v6 = a3;
  if (v5)
  {
    v7 = v5;
    objc_msgSend(v7, "domain");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    if ((objc_msgSend(v8, "isEqualToString:", *MEMORY[0x24BDD5BD8]) & 1) != 0)
    {
      if (objc_msgSend(v7, "code") == 23)
      {

LABEL_17:
        v26 = (void *)MEMORY[0x227676638]();
        v27 = *(id *)(a1 + 32);
        HMFGetOSLogHandle();
        v28 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v28, OS_LOG_TYPE_INFO))
        {
          HMFGetLogIdentifier();
          v29 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543618;
          v36 = v29;
          v37 = 2112;
          v38 = v7;
          _os_log_impl(&dword_2218F0000, v28, OS_LOG_TYPE_INFO, "%{public}@App data request redirect request failed, handling locally: %@", buf, 0x16u);

        }
        objc_autoreleasePoolPop(v26);
        objc_msgSend(*(id *)(a1 + 32), "setAppDataWithMessage:", *(_QWORD *)(a1 + 40));
        goto LABEL_20;
      }
      v25 = objc_msgSend(v7, "code");

      if (v25 == 8)
        goto LABEL_17;
    }
    else
    {

    }
    v18 = v7;
    objc_msgSend(v18, "domain");
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    if ((objc_msgSend(v19, "isEqualToString:", *MEMORY[0x24BE3EBB0]) & 1) != 0)
    {
      v20 = objc_msgSend(v18, "code");

      if (v20 == 14)
        goto LABEL_17;
    }
    else
    {

    }
    v21 = (void *)MEMORY[0x227676638]();
    v22 = *(id *)(a1 + 32);
    HMFGetOSLogHandle();
    v23 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v23, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v24 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v36 = v24;
      v37 = 2112;
      v38 = v18;
      _os_log_impl(&dword_2218F0000, v23, OS_LOG_TYPE_INFO, "%{public}@App data request redirect request failed: %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v21);
    objc_msgSend(*(id *)(a1 + 40), "respondWithError:", v18);
  }
  else
  {
    v9 = (void *)MEMORY[0x227676638]();
    v10 = *(id *)(a1 + 32);
    HMFGetOSLogHandle();
    v11 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v36 = v12;
      _os_log_impl(&dword_2218F0000, v11, OS_LOG_TYPE_INFO, "%{public}@App data redirect request succeeded", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v9);
    objc_msgSend(*(id *)(a1 + 32), "backingStore");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "context");
    v14 = (void *)objc_claimAutoreleasedReturnValue();

    v30[0] = MEMORY[0x24BDAC760];
    v30[1] = 3221225472;
    v30[2] = __63__HMDHomeManager__redirectAppDataRequestToResidentWithMessage___block_invoke_1005;
    v30[3] = &unk_24E79A910;
    v31 = v14;
    v15 = *(id *)(a1 + 40);
    v16 = *(_QWORD *)(a1 + 32);
    v32 = v15;
    v33 = v16;
    v34 = v6;
    v17 = v14;
    objc_msgSend(v17, "performBlock:", v30);

  }
LABEL_20:

}

void __63__HMDHomeManager__redirectAppDataRequestToResidentWithMessage___block_invoke_1005(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  void *v4;
  void *v5;
  char v6;
  void *v7;
  char v8;
  id v9;
  void *v10;
  id v11;
  NSObject *v12;
  void *v13;
  id v14;
  uint8_t buf[4];
  void *v16;
  __int16 v17;
  id v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  objc_msgSend(*(id *)(a1 + 32), "findHomeManagerWithError:", 0);
  v2 = objc_claimAutoreleasedReturnValue();
  if (!v2)
    _HMFPreconditionFailure();
  v3 = (void *)v2;
  objc_msgSend(*(id *)(a1 + 40), "dictionaryForKey:", CFSTR("kAppDataInformationKey"));
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "appDataDictionary");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = HMFEqualObjects();

  if ((v6 & 1) == 0)
  {
    objc_msgSend(v3, "setAppDataDictionary:", v4);
    objc_msgSend(*(id *)(a1 + 32), "managedObjectContext");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v14 = 0;
    v8 = objc_msgSend(v7, "hmd_saveWithTransactionAuthor:error:", 11, &v14);
    v9 = v14;

    if ((v8 & 1) == 0)
    {
      v10 = (void *)MEMORY[0x227676638]();
      v11 = *(id *)(a1 + 48);
      HMFGetOSLogHandle();
      v12 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        v16 = v13;
        v17 = 2112;
        v18 = v9;
        _os_log_impl(&dword_2218F0000, v12, OS_LOG_TYPE_ERROR, "%{public}@Failed to save local HMDHomeManager.appDataDictionary: %@", buf, 0x16u);

      }
      objc_autoreleasePoolPop(v10);
      objc_msgSend(*(id *)(a1 + 32), "reset");
    }

  }
  objc_msgSend(*(id *)(a1 + 40), "respondWithPayload:", *(_QWORD *)(a1 + 56));

}

uint64_t __46__HMDHomeManager_teardownRemoteAccessForHome___block_invoke(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_teardownRemoteAccessForHome:", *(_QWORD *)(a1 + 40));
}

void __69__HMDHomeManager_addIssuerKeyToMessagePayload_invitation_completion___block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  void *v8;
  id v9;
  NSObject *v10;
  void *v11;
  void *v12;
  void (*v13)(void);
  void *v14;
  id v15;
  NSObject *v16;
  void *v17;
  void *v18;
  void *v19;
  uint64_t v20;
  int v21;
  void *v22;
  __int16 v23;
  void *v24;
  __int16 v25;
  void *v26;
  __int16 v27;
  id v28;
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  v5 = a2;
  v6 = a3;
  if (v5)
  {
    +[HMDNIST256Utilities publicKeyExternalRepresentationFromKeyPairExternalRepresentation:](HMDNIST256Utilities, "publicKeyExternalRepresentationFromKeyPairExternalRepresentation:", v5);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = (void *)MEMORY[0x227676638](objc_msgSend(*(id *)(a1 + 56), "setObject:forKeyedSubscript:", v7, CFSTR("HMDIssuerPublicKeyExternalRepresentationKey")));
    v9 = *(id *)(a1 + 32);
    HMFGetOSLogHandle();
    v10 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(*(id *)(a1 + 40), "UUID");
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      v21 = 138543874;
      v22 = v11;
      v23 = 2112;
      v24 = v12;
      v25 = 2112;
      v26 = v7;
      _os_log_impl(&dword_2218F0000, v10, OS_LOG_TYPE_INFO, "%{public}@[Flow: %@] Added issuerPublicKeyER to payload. issuerPublicKeyER: %@", (uint8_t *)&v21, 0x20u);

    }
    objc_autoreleasePoolPop(v8);
    v13 = *(void (**)(void))(*(_QWORD *)(a1 + 64) + 16);
  }
  else
  {
    v14 = (void *)MEMORY[0x227676638]();
    v15 = *(id *)(a1 + 32);
    HMFGetOSLogHandle();
    v16 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(*(id *)(a1 + 40), "UUID");
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      v19 = *(void **)(a1 + 48);
      v21 = 138544130;
      v22 = v17;
      v23 = 2112;
      v24 = v18;
      v25 = 2112;
      v26 = v19;
      v27 = 2112;
      v28 = v6;
      _os_log_impl(&dword_2218F0000, v16, OS_LOG_TYPE_ERROR, "%{public}@[Flow: %@] Failed to create Issuer Key while accepting home invitation: %@, with error: %@", (uint8_t *)&v21, 0x2Au);

    }
    objc_autoreleasePoolPop(v14);
    v20 = *(_QWORD *)(a1 + 64);
    if (v6)
    {
      (*(void (**)(uint64_t, id))(v20 + 16))(v20, v6);
      goto LABEL_10;
    }
    objc_msgSend(MEMORY[0x24BDD1540], "hmErrorWithCode:", -1);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v13 = *(void (**)(void))(v20 + 16);
  }
  v13();

LABEL_10:
}

void __117__HMDHomeManager___sendUpdateRequestToAdminForInvitation_homeUUID_invitationState_authStatus_reverseShareInvitation___block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id WeakRetained;
  void *v8;
  id v9;
  NSObject *v10;
  _BOOL4 v11;
  void *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  id v19;
  NSObject *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  id v27;
  NSObject *v28;
  void *v29;
  void *v30;
  void *v31;
  id v32;
  NSObject *v33;
  void *v34;
  void *v35;
  int v36;
  void *v37;
  __int16 v38;
  void *v39;
  __int16 v40;
  id v41;
  uint64_t v42;

  v42 = *MEMORY[0x24BDAC8D0];
  v5 = a2;
  v6 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  if (WeakRetained)
  {
    v8 = (void *)MEMORY[0x227676638]();
    v9 = *(id *)(a1 + 32);
    HMFGetOSLogHandle();
    v10 = objc_claimAutoreleasedReturnValue();
    v11 = os_log_type_enabled(v10, OS_LOG_TYPE_INFO);
    if (v6)
    {
      if (v11)
      {
        HMFGetLogIdentifier();
        v12 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(*(id *)(a1 + 40), "describeWithFormat");
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        v36 = 138543874;
        v37 = v12;
        v38 = 2112;
        v39 = v13;
        v40 = 2112;
        v41 = v6;
        _os_log_impl(&dword_2218F0000, v10, OS_LOG_TYPE_INFO, "%{public}@Failed to modify invitation state for invite %@ due to error %@", (uint8_t *)&v36, 0x20u);

      }
      objc_autoreleasePoolPop(v8);
      v14 = objc_msgSend(v6, "code");
      v15 = objc_msgSend(v6, "code");
      v16 = objc_msgSend(v6, "code");
      v17 = objc_msgSend(v6, "code");
      if (v15 == 1006 || v17 == 1008)
      {
        v26 = (void *)MEMORY[0x227676638](v17);
        v27 = *(id *)(a1 + 32);
        HMFGetOSLogHandle();
        v28 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v28, OS_LOG_TYPE_INFO))
        {
          HMFGetLogIdentifier();
          v29 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(*(id *)(a1 + 40), "describeWithFormat");
          v30 = (void *)objc_claimAutoreleasedReturnValue();
          v36 = 138543618;
          v37 = v29;
          v38 = 2112;
          v39 = v30;
          _os_log_impl(&dword_2218F0000, v28, OS_LOG_TYPE_INFO, "%{public}@Updating invitation (%@) to expired since sender could not find it or it was expired", (uint8_t *)&v36, 0x16u);

        }
        objc_autoreleasePoolPop(v26);
        objc_msgSend(*(id *)(a1 + 40), "expire");
      }
      else if (v16 == 1007)
      {
        v18 = (void *)MEMORY[0x227676638]();
        v19 = *(id *)(a1 + 32);
        HMFGetOSLogHandle();
        v20 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v20, OS_LOG_TYPE_INFO))
        {
          HMFGetLogIdentifier();
          v21 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(*(id *)(a1 + 40), "describeWithFormat");
          v22 = (void *)objc_claimAutoreleasedReturnValue();
          v36 = 138543618;
          v37 = v21;
          v38 = 2112;
          v39 = v22;
          _os_log_impl(&dword_2218F0000, v20, OS_LOG_TYPE_INFO, "%{public}@Updating invitation (%@) to accepted and pending to match sender state", (uint8_t *)&v36, 0x16u);

        }
        objc_autoreleasePoolPop(v18);
        objc_msgSend(WeakRetained, "_postIncomingInvitationStateChangedNotification:newInvitationState:", *(_QWORD *)(a1 + 40), 5);
      }
      else if (v14 == 2)
      {
        v31 = (void *)MEMORY[0x227676638]();
        v32 = *(id *)(a1 + 32);
        HMFGetOSLogHandle();
        v33 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v33, OS_LOG_TYPE_INFO))
        {
          HMFGetLogIdentifier();
          v34 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(*(id *)(a1 + 40), "describeWithFormat");
          v35 = (void *)objc_claimAutoreleasedReturnValue();
          v36 = 138543618;
          v37 = v34;
          v38 = 2112;
          v39 = v35;
          _os_log_impl(&dword_2218F0000, v33, OS_LOG_TYPE_INFO, "%{public}@Inviter did not find invitation (%@), ignoring response", (uint8_t *)&v36, 0x16u);

        }
        objc_autoreleasePoolPop(v31);
      }
    }
    else
    {
      if (v11)
      {
        HMFGetLogIdentifier();
        v23 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(*(id *)(a1 + 40), "describeWithFormat");
        v24 = (void *)objc_claimAutoreleasedReturnValue();
        v36 = 138543618;
        v37 = v23;
        v38 = 2112;
        v39 = v24;
        _os_log_impl(&dword_2218F0000, v10, OS_LOG_TYPE_INFO, "%{public}@Modified invitation state for invite %@", (uint8_t *)&v36, 0x16u);

      }
      objc_autoreleasePoolPop(v8);
      if (*(_QWORD *)(a1 + 56) == 3)
      {
        objc_msgSend(WeakRetained, "_postIncomingInvitationStateChangedNotification:newInvitationState:", *(_QWORD *)(a1 + 40), 3);
        objc_msgSend(*(id *)(a1 + 40), "homeUUID");
        v25 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(WeakRetained, "_maybeCreateLegacyHomeAcceptedZone:", v25);

      }
    }
  }

}

void __117__HMDHomeManager___sendUpdateRequestToAdminForInvitation_homeUUID_invitationState_authStatus_reverseShareInvitation___block_invoke_996(uint64_t a1, uint64_t a2)
{
  id WeakRetained;
  id v5;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 64));
  if (!a2 && WeakRetained)
  {
    v5 = WeakRetained;
    objc_msgSend(WeakRetained, "sendRequestForInvitation:homeUUID:payload:invitationState:responseHandler:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 56));
    WeakRetained = v5;
  }

}

uint64_t __134__HMDHomeManager__sendAcceptOrDeclineRequestToAdminForIDSInvitationIdentifier_homeInviteUUID_payload_invitationState_responseHandler___block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(uint64_t, const __CFString *, uint64_t))(result + 16))(result, CFSTR("IncomingInvitationAccepted"), a4);
  return result;
}

uint64_t __134__HMDHomeManager__sendAcceptOrDeclineRequestToAdminForIDSInvitationIdentifier_homeInviteUUID_payload_invitationState_responseHandler___block_invoke_2(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(uint64_t, const __CFString *, _QWORD))(result + 16))(result, CFSTR("IncomingInvitationDeclined"), 0);
  return result;
}

void __54__HMDHomeManager_hh1UserIDsForCurrentUserForHomeUUID___block_invoke(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  id v7;

  v3 = a2;
  v4 = *(void **)(a1 + 32);
  v7 = v3;
  objc_msgSend(v3, "identifier");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  LOBYTE(v4) = objc_msgSend(v4, "isHH2KeyType:", v5);

  if ((v4 & 1) == 0)
  {
    +[HMDUser UUIDWithUserID:forHomeIdentifier:uuid:pairingIdentity:](HMDUser, "UUIDWithUserID:forHomeIdentifier:uuid:pairingIdentity:", 0, *(_QWORD *)(a1 + 40), 0, v7);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 48), "addObject:", v6);

  }
}

void __58__HMDHomeManager_migrateSharedUserFromIncomingInvitation___block_invoke(uint64_t a1, void *a2, uint64_t a3, _BYTE *a4)
{
  id v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  id v13;
  NSObject *v14;
  void *v15;
  int v16;
  void *v17;
  __int16 v18;
  id v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  v7 = a2;
  +[HMDUser localPrivateZoneForSharedUserUUID:database:](HMDUser, "localPrivateZoneForSharedUserUUID:database:", v7, *(_QWORD *)(a1 + 32));
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  if (v8)
  {
    objc_msgSend(*(id *)(a1 + 40), "homeUUID");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 48), "backingStore");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "context");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    +[HMDUser migrateHH1SettingsToHH2ForSharedUserWithUUID:homeUUID:privateZone:backingStoreContext:](HMDUser, "migrateHH1SettingsToHH2ForSharedUserWithUUID:homeUUID:privateZone:backingStoreContext:", v7, v9, v8, v11);

    objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40), a2);
    *a4 = 1;
  }
  else
  {
    v12 = (void *)MEMORY[0x227676638]();
    v13 = *(id *)(a1 + 48);
    HMFGetOSLogHandle();
    v14 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      v16 = 138543618;
      v17 = v15;
      v18 = 2112;
      v19 = v7;
      _os_log_impl(&dword_2218F0000, v14, OS_LOG_TYPE_INFO, "%{public}@could not open private zone using user UUID : %@", (uint8_t *)&v16, 0x16u);

    }
    objc_autoreleasePoolPop(v12);
  }

}

uint64_t __81__HMDHomeManager__processLocalRequestToUpdateHomeInvitation_newState_authStatus___block_invoke(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  NSObject *v6;
  void *v7;
  void *v8;
  void *v9;
  id v10;
  void *v11;
  id v12;
  _QWORD v14[4];
  id v15;
  id v16;
  id v17;
  id v18[2];
  uint8_t buf[4];
  void *v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  v3 = a2;
  v4 = (void *)MEMORY[0x227676638]();
  v5 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v6 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543362;
    v20 = v7;
    _os_log_impl(&dword_2218F0000, v6, OS_LOG_TYPE_INFO, "%{public}@Created reverse share successful, proceeding to send invitation acceptance", buf, 0xCu);

  }
  objc_autoreleasePoolPop(v4);
  v8 = *(void **)(a1 + 32);
  objc_msgSend(*(id *)(a1 + 40), "homeUUID");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v14[0] = MEMORY[0x24BDAC760];
  v14[1] = 3221225472;
  v14[2] = __81__HMDHomeManager__processLocalRequestToUpdateHomeInvitation_newState_authStatus___block_invoke_981;
  v14[3] = &unk_24E796BE8;
  objc_copyWeak(v18, (id *)(a1 + 56));
  v10 = *(id *)(a1 + 40);
  v11 = *(void **)(a1 + 64);
  v15 = v10;
  v18[1] = v11;
  v16 = *(id *)(a1 + 48);
  v12 = v3;
  v17 = v12;
  objc_msgSend(v8, "_queryLegacyHomeAndAcceptedZoneExists:completion:", v9, v14);

  objc_destroyWeak(v18);
  return 1;
}

uint64_t __81__HMDHomeManager__processLocalRequestToUpdateHomeInvitation_newState_authStatus___block_invoke_3(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  NSObject *v6;
  void *v7;
  void *v8;
  void *v9;
  int v11;
  void *v12;
  __int16 v13;
  void *v14;
  __int16 v15;
  id v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  v3 = a2;
  v4 = (void *)MEMORY[0x227676638]();
  v5 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v6 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
  {
    HMFGetLogIdentifier();
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 40), "identifier");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "UUIDString");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v11 = 138543874;
    v12 = v7;
    v13 = 2112;
    v14 = v9;
    v15 = 2112;
    v16 = v3;
    _os_log_impl(&dword_2218F0000, v6, OS_LOG_TYPE_ERROR, "%{public}@Failed to grant share access back to owner for invite with identifier %@ due to error %@", (uint8_t *)&v11, 0x20u);

  }
  objc_autoreleasePoolPop(v4);

  return 1;
}

void __81__HMDHomeManager__processLocalRequestToUpdateHomeInvitation_newState_authStatus___block_invoke_981(uint64_t a1, int a2, char a3)
{
  id WeakRetained;
  void *v7;
  NSObject *v8;
  id v9;
  uint64_t v10;
  _QWORD block[5];
  id v12;
  id v13;
  id v14;
  uint64_t v15;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  if (WeakRetained)
  {
    if (a2 && (a3 & 1) == 0)
    {
      v7 = (void *)MEMORY[0x227676638]();
      objc_msgSend(WeakRetained, "migrateSharedUserFromIncomingInvitation:", *(_QWORD *)(a1 + 32));
      objc_autoreleasePoolPop(v7);
    }
    objc_msgSend(WeakRetained, "workQueue");
    v8 = objc_claimAutoreleasedReturnValue();
    block[0] = MEMORY[0x24BDAC760];
    block[1] = 3221225472;
    block[2] = __81__HMDHomeManager__processLocalRequestToUpdateHomeInvitation_newState_authStatus___block_invoke_2;
    block[3] = &unk_24E796BC0;
    block[4] = WeakRetained;
    v9 = *(id *)(a1 + 32);
    v10 = *(_QWORD *)(a1 + 64);
    v12 = v9;
    v15 = v10;
    v13 = *(id *)(a1 + 40);
    v14 = *(id *)(a1 + 48);
    dispatch_async(v8, block);

  }
}

void __81__HMDHomeManager__processLocalRequestToUpdateHomeInvitation_newState_authStatus___block_invoke_2(_QWORD *a1)
{
  void *v2;
  void *v3;
  id v4;

  v2 = (void *)a1[4];
  v3 = (void *)a1[5];
  objc_msgSend(v3, "homeUUID");
  v4 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "__sendUpdateRequestToAdminForInvitation:homeUUID:invitationState:authStatus:reverseShareInvitation:", v3, v4, a1[8], a1[6], a1[7]);

}

uint64_t __56__HMDHomeManager_addHH2KeyInResponsePayload_invitation___block_invoke(uint64_t a1, void *a2)
{
  void *v2;
  id v3;
  void *v4;
  void *v5;
  void *v6;

  v2 = *(void **)(a1 + 32);
  v3 = a2;
  objc_msgSend(v2, "inviterIdentity");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "identifier");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "identifier");
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  LODWORD(v3) = HMFEqualObjects();
  return v3 ^ 1;
}

uint64_t __112__HMDHomeManager__processRequestToUpdateHomeInvitation_invitationState_homeUUID_authStatus_messageName_message___block_invoke(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  NSObject *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  int v12;
  void *v13;
  __int16 v14;
  void *v15;
  __int16 v16;
  void *v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  v3 = a2;
  v4 = (void *)MEMORY[0x227676638]();
  v5 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v6 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 40), "homeName");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 40), "homeUUID");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "UUIDString");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v12 = 138543874;
    v13 = v7;
    v14 = 2112;
    v15 = v8;
    v16 = 2112;
    v17 = v10;
    _os_log_impl(&dword_2218F0000, v6, OS_LOG_TYPE_INFO, "%{public}@Joined cloud share successfully for invitation, continue to process invitation for home %@/%@", (uint8_t *)&v12, 0x20u);

  }
  objc_autoreleasePoolPop(v4);
  objc_msgSend(*(id *)(a1 + 32), "_processLocalRequestToUpdateHomeInvitation:newState:authStatus:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 48));
  objc_msgSend(*(id *)(a1 + 32), "_removeIncomingInvitation:", *(_QWORD *)(a1 + 40));
  objc_msgSend(*(id *)(a1 + 56), "respondWithPayload:", 0);

  return 1;
}

uint64_t __112__HMDHomeManager__processRequestToUpdateHomeInvitation_invitationState_homeUUID_authStatus_messageName_message___block_invoke_978(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  NSObject *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  int v14;
  void *v15;
  __int16 v16;
  void *v17;
  __int16 v18;
  void *v19;
  __int16 v20;
  id v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  v3 = a2;
  v4 = (void *)MEMORY[0x227676638]();
  v5 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v6 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
  {
    HMFGetLogIdentifier();
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 40), "homeName");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 40), "homeUUID");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "UUIDString");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v14 = 138544130;
    v15 = v7;
    v16 = 2112;
    v17 = v8;
    v18 = 2112;
    v19 = v10;
    v20 = 2112;
    v21 = v3;
    _os_log_impl(&dword_2218F0000, v6, OS_LOG_TYPE_ERROR, "%{public}@Failed to accept cloud share for invitation home %@/%@ due to %@", (uint8_t *)&v14, 0x2Au);

  }
  objc_autoreleasePoolPop(v4);
  v11 = *(void **)(a1 + 48);
  objc_msgSend(MEMORY[0x24BDD1540], "hmErrorWithCode:", -1);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "respondWithError:", v12);

  return 1;
}

uint64_t __111__HMDHomeManager_processRequestToUpdateHomeInvitation_invitationState_homeUUID_authStatus_messageName_message___block_invoke(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_processRequestToUpdateHomeInvitation:invitationState:homeUUID:authStatus:messageName:message:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72));
}

void __45__HMDHomeManager_auditAccessForUsersForHome___block_invoke(uint64_t a1)
{
  id v1;

  objc_msgSend(*(id *)(a1 + 32), "_homeWithUUID:", *(_QWORD *)(a1 + 40));
  v1 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "auditAccessForUsers");

}

void __44__HMDHomeManager__removeIncomingInvitation___block_invoke(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  id v8;

  +[HMCContext currentContext](HMCContext, "currentContext");
  v8 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "findHomeManagerWithError:", 0);
  v2 = objc_claimAutoreleasedReturnValue();
  if (v2)
  {
    v3 = (void *)v2;
    objc_msgSend(*(id *)(a1 + 32), "identifier");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "findIncomingInvitationsRelationWithModelID:", v4);
    v5 = (void *)objc_claimAutoreleasedReturnValue();

    v6 = v8;
    if (v5)
    {
      objc_msgSend(v8, "deleteObject:", v5);
      v6 = v8;
    }
    objc_msgSend(v6, "save");

  }
  else
  {
    v7 = _HMFPreconditionFailure();
    __41__HMDHomeManager__addIncomingInvitation___block_invoke(v7);
  }
}

void __41__HMDHomeManager__addIncomingInvitation___block_invoke(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  id v25;
  NSObject *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  id v31;
  void *v32;
  id v33;
  NSObject *v34;
  void *v35;
  id v36;
  uint8_t buf[4];
  void *v38;
  __int16 v39;
  id v40;
  uint64_t v41;

  v41 = *MEMORY[0x24BDAC8D0];
  +[HMCContext currentContext](HMCContext, "currentContext");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "findHomeManagerWithError:", 0);
  v3 = objc_claimAutoreleasedReturnValue();
  if (!v3)
    _HMFPreconditionFailure();
  v4 = (void *)v3;
  objc_msgSend(*(id *)(a1 + 32), "identifier");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "materializeOrCreateIncomingInvitationsRelationWithModelID:createdNew:", v5, 0);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(*(id *)(a1 + 32), "idsInvitationUUID");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "setIdsIdentifier:", v7);

  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithInteger:", objc_msgSend(*(id *)(a1 + 32), "invitationState"));
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "setInvitationState:", v8);

  objc_msgSend(*(id *)(a1 + 32), "endDate");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "setExpiryDate:", v9);

  objc_msgSend(*(id *)(a1 + 32), "homeName");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "setHomeName:", v10);

  objc_msgSend(*(id *)(a1 + 32), "homeUUID");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "setHomeModelID:", v11);

  objc_msgSend(*(id *)(a1 + 32), "inviterMergeID");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "setInviterMergeID:", v12);

  objc_msgSend(*(id *)(a1 + 32), "inviterIdentity");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v13, "identifier");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "setInviterPairingIdentifier:", v14);

  objc_msgSend(*(id *)(a1 + 32), "inviterIdentity");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v15, "publicKey");
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v16, "data");
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "setInviterPairingPublicKey:", v17);

  objc_msgSend(*(id *)(a1 + 32), "inviterUserID");
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "setInviterUserID:", v18);

  objc_msgSend(*(id *)(a1 + 32), "shareURL");
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "setShareURL:", v19);

  +[HMDCoreData featuresDataSource](HMDCoreData, "featuresDataSource");
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  LODWORD(v16) = objc_msgSend(v20, "isRestrictedGuestEnabled");

  if ((_DWORD)v16)
  {
    objc_msgSend(MEMORY[0x24BDD16E0], "numberWithBool:", objc_msgSend(*(id *)(a1 + 32), "homeHasCameras"));
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "setHomeHasCameras:", v21);

    objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedInteger:", objc_msgSend(*(id *)(a1 + 32), "inviteePrivilege"));
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "setInviteePrivilege:", v22);

    objc_msgSend(*(id *)(a1 + 32), "restrictedGuestSchedule");
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "populateWorkingStoreFromRestrictedGuestSchedule:", v23);

    v24 = (void *)MEMORY[0x227676638]();
    v25 = *(id *)(a1 + 40);
    HMFGetOSLogHandle();
    v26 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v26, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v27 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v38 = v27;
      _os_log_impl(&dword_2218F0000, v26, OS_LOG_TYPE_INFO, "%{public}@Adding RG payload to invitation and running CD transaction", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v24);
  }
  v28 = (void *)MEMORY[0x24BDD1618];
  objc_msgSend(*(id *)(a1 + 32), "shareToken");
  v29 = (void *)objc_claimAutoreleasedReturnValue();
  v36 = 0;
  objc_msgSend(v28, "archivedDataWithRootObject:requiringSecureCoding:error:", v29, 1, &v36);
  v30 = (void *)objc_claimAutoreleasedReturnValue();
  v31 = v36;

  if (v31)
  {
    v32 = (void *)MEMORY[0x227676638]();
    v33 = *(id *)(a1 + 40);
    HMFGetOSLogHandle();
    v34 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v35 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v38 = v35;
      v39 = 2112;
      v40 = v31;
      _os_log_impl(&dword_2218F0000, v34, OS_LOG_TYPE_ERROR, "%{public}@Archiving share token on invitation failed with error %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v32);
  }
  objc_msgSend(v6, "setShareToken:", v30);
  objc_msgSend(v2, "save");

}

void __65__HMDHomeManager__handleNetworkFirewallFetchCloudChangesRequest___block_invoke(uint64_t a1, void *a2)
{
  uint64_t v3;
  _QWORD v4[4];
  id v5;

  v3 = *(unsigned __int8 *)(a1 + 40);
  v4[0] = MEMORY[0x24BDAC760];
  v4[1] = 3221225472;
  v4[2] = __65__HMDHomeManager__handleNetworkFirewallFetchCloudChangesRequest___block_invoke_2;
  v4[3] = &unk_24E796AD0;
  v5 = *(id *)(a1 + 32);
  objc_msgSend(a2, "forceFetchCloudChangesAndForceChangeNotifications:completion:", v3, v4);

}

uint64_t __65__HMDHomeManager__handleNetworkFirewallFetchCloudChangesRequest___block_invoke_2(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v3;

  v3 = *(void **)(a1 + 32);
  if (a2)
    a3 = 0;
  return objc_msgSend(v3, "respondWithPayload:error:", 0, a3);
}

void __64__HMDHomeManager__handleNetworkFirewallRemoveLocalRulesRequest___block_invoke(uint64_t a1, void *a2)
{
  _QWORD v3[4];
  id v4;

  v3[0] = MEMORY[0x24BDAC760];
  v3[1] = 3221225472;
  v3[2] = __64__HMDHomeManager__handleNetworkFirewallRemoveLocalRulesRequest___block_invoke_2;
  v3[3] = &unk_24E79BD80;
  v4 = *(id *)(a1 + 32);
  objc_msgSend(a2, "removeAllLocalRulesWithCompletion:", v3);

}

uint64_t __64__HMDHomeManager__handleNetworkFirewallRemoveLocalRulesRequest___block_invoke_2(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(a1 + 32), "respondWithPayload:error:", 0, a2);
}

void __66__HMDHomeManager__handleNetworkFirewallDumpPairedMetadataRequest___block_invoke(uint64_t a1, void *a2)
{
  id v4;
  void *v5;
  _QWORD aBlock[4];
  id v7;

  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 3221225472;
  aBlock[2] = __66__HMDHomeManager__handleNetworkFirewallDumpPairedMetadataRequest___block_invoke_2;
  aBlock[3] = &unk_24E7969E0;
  v7 = *(id *)(a1 + 32);
  v4 = a2;
  v5 = _Block_copy(aBlock);
  objc_msgSend(v4, "dumpPairedMetadataForProductGroup:productNumber:firmwareVersion:ignoreOverrides:rawOutput:completion:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(unsigned __int8 *)(a1 + 64), *(unsigned __int8 *)(a1 + 65), v5);

}

void __66__HMDHomeManager__handleNetworkFirewallDumpPairedMetadataRequest___block_invoke_2(uint64_t a1, void *a2, void *a3)
{
  id v5;
  void *v6;
  id v7;
  void *v8;
  uint64_t v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  id v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  _QWORD v19[2];

  v19[1] = *MEMORY[0x24BDAC8D0];
  v5 = a2;
  if (v5)
  {
    v6 = (void *)MEMORY[0x24BDD1540];
    v7 = a3;
    objc_msgSend(v5, "domain");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = objc_msgSend(v5, "code");
    v18 = *MEMORY[0x24BDD0FC8];
    objc_msgSend(v5, "debugDescription");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v19[0] = v10;
    objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v19, &v18, 1);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "errorWithDomain:code:userInfo:", v8, v9, v11);
    v12 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(*(id *)(a1 + 32), "respondWithError:", v12);
  }
  else
  {
    v13 = *(void **)(a1 + 32);
    v16 = *MEMORY[0x24BDD6890];
    v17 = a3;
    v14 = (void *)MEMORY[0x24BDBCE70];
    v15 = a3;
    objc_msgSend(v14, "dictionaryWithObjects:forKeys:count:", &v17, &v16, 1);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "respondWithPayload:", v12);
  }

}

void __62__HMDHomeManager__handleNetworkFirewallDumpLocalRulesRequest___block_invoke(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD aBlock[4];
  id v8;

  v3 = a2;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 3221225472;
  aBlock[2] = __62__HMDHomeManager__handleNetworkFirewallDumpLocalRulesRequest___block_invoke_2;
  aBlock[3] = &unk_24E7969E0;
  v8 = *(id *)(a1 + 32);
  v4 = _Block_copy(aBlock);
  v6 = *(_QWORD *)(a1 + 40);
  v5 = *(_QWORD *)(a1 + 48);
  if (v6)
  {
    objc_msgSend(v3, "dumpLocalRulesForProductGroup:productNumber:firmwareVersion:ignoreOverrides:rawOutput:completion:", v5, v6, *(_QWORD *)(a1 + 56), *(unsigned __int8 *)(a1 + 64), *(unsigned __int8 *)(a1 + 65), v4);
  }
  else if (v5)
  {
    objc_msgSend(v3, "dumpLocalRulesForProductGroup:ignoreOverrides:rawOutput:completion:");
  }
  else
  {
    objc_msgSend(v3, "dumpAllLocalRulesIgnoringOverrides:rawOutput:completion:", *(unsigned __int8 *)(a1 + 64) != 0, *(unsigned __int8 *)(a1 + 65) != 0, v4);
  }

}

void __62__HMDHomeManager__handleNetworkFirewallDumpLocalRulesRequest___block_invoke_2(uint64_t a1, void *a2, void *a3)
{
  id v5;
  void *v6;
  id v7;
  void *v8;
  uint64_t v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  id v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  _QWORD v19[2];

  v19[1] = *MEMORY[0x24BDAC8D0];
  v5 = a2;
  if (v5)
  {
    v6 = (void *)MEMORY[0x24BDD1540];
    v7 = a3;
    objc_msgSend(v5, "domain");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = objc_msgSend(v5, "code");
    v18 = *MEMORY[0x24BDD0FC8];
    objc_msgSend(v5, "debugDescription");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v19[0] = v10;
    objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v19, &v18, 1);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "errorWithDomain:code:userInfo:", v8, v9, v11);
    v12 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(*(id *)(a1 + 32), "respondWithError:", v12);
  }
  else
  {
    v13 = *(void **)(a1 + 32);
    v16 = *MEMORY[0x24BDD6858];
    v17 = a3;
    v14 = (void *)MEMORY[0x24BDBCE70];
    v15 = a3;
    objc_msgSend(v14, "dictionaryWithObjects:forKeys:count:", &v17, &v16, 1);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "respondWithPayload:", v12);
  }

}

void __63__HMDHomeManager__handleNetworkFirewallRemoveOverridesRequest___block_invoke(uint64_t a1, void *a2)
{
  id v4;
  void *v5;
  uint64_t v6;
  _QWORD aBlock[4];
  id v8;

  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 3221225472;
  aBlock[2] = __63__HMDHomeManager__handleNetworkFirewallRemoveOverridesRequest___block_invoke_2;
  aBlock[3] = &unk_24E79BD80;
  v8 = *(id *)(a1 + 32);
  v4 = a2;
  v5 = _Block_copy(aBlock);
  v6 = *(_QWORD *)(a1 + 40);
  if (v6)
    objc_msgSend(v4, "removeOverridesForProductGroup:productNumber:completion:", v6, *(_QWORD *)(a1 + 48), v5);
  else
    objc_msgSend(v4, "removeAllOverridesWithCompletion:", v5);

}

uint64_t __63__HMDHomeManager__handleNetworkFirewallRemoveOverridesRequest___block_invoke_2(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(a1 + 32), "respondWithPayload:error:", 0, a2);
}

void __60__HMDHomeManager__handleNetworkFirewallAddOverridesRequest___block_invoke(uint64_t a1, void *a2)
{
  id v4;
  void *v5;
  uint64_t v6;
  _QWORD aBlock[4];
  id v8;

  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 3221225472;
  aBlock[2] = __60__HMDHomeManager__handleNetworkFirewallAddOverridesRequest___block_invoke_2;
  aBlock[3] = &unk_24E79BD80;
  v8 = *(id *)(a1 + 32);
  v4 = a2;
  v5 = _Block_copy(aBlock);
  v6 = *(_QWORD *)(a1 + 40);
  if (*(_BYTE *)(a1 + 48))
    objc_msgSend(v4, "setOverrides:completion:", v6, v5);
  else
    objc_msgSend(v4, "addOverrides:completion:", v6, v5);

}

uint64_t __60__HMDHomeManager__handleNetworkFirewallAddOverridesRequest___block_invoke_2(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(a1 + 32), "respondWithPayload:error:", 0, a2);
}

void __64__HMDHomeManager__handleNetworkFirewallDumpCloudRecordsRequest___block_invoke(uint64_t a1, void *a2)
{
  id v4;
  void *v5;
  uint64_t v6;
  _QWORD aBlock[4];
  id v8;

  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 3221225472;
  aBlock[2] = __64__HMDHomeManager__handleNetworkFirewallDumpCloudRecordsRequest___block_invoke_2;
  aBlock[3] = &unk_24E7969E0;
  v8 = *(id *)(a1 + 32);
  v4 = a2;
  v5 = _Block_copy(aBlock);
  v6 = *(_QWORD *)(a1 + 40);
  if (*(_BYTE *)(a1 + 56))
    objc_msgSend(v4, "listCloudRecordsForProductGroup:rawOutput:completion:", v6, *(unsigned __int8 *)(a1 + 57), v5);
  else
    objc_msgSend(v4, "dumpCloudRecordsForProductGroup:productNumber:rawOutput:verifySignatures:completion:", v6, *(_QWORD *)(a1 + 48), *(unsigned __int8 *)(a1 + 57), *(unsigned __int8 *)(a1 + 58), v5);

}

void __64__HMDHomeManager__handleNetworkFirewallDumpCloudRecordsRequest___block_invoke_2(uint64_t a1, void *a2, void *a3)
{
  id v5;
  void *v6;
  id v7;
  void *v8;
  uint64_t v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  id v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  _QWORD v19[2];

  v19[1] = *MEMORY[0x24BDAC8D0];
  v5 = a2;
  if (v5)
  {
    v6 = (void *)MEMORY[0x24BDD1540];
    v7 = a3;
    objc_msgSend(v5, "domain");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = objc_msgSend(v5, "code");
    v18 = *MEMORY[0x24BDD0FC8];
    objc_msgSend(v5, "debugDescription");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v19[0] = v10;
    objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v19, &v18, 1);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "errorWithDomain:code:userInfo:", v8, v9, v11);
    v12 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(*(id *)(a1 + 32), "respondWithError:", v12);
  }
  else
  {
    v13 = *(void **)(a1 + 32);
    v16 = *MEMORY[0x24BDD6818];
    v17 = a3;
    v14 = (void *)MEMORY[0x24BDBCE70];
    v15 = a3;
    objc_msgSend(v14, "dictionaryWithObjects:forKeys:count:", &v17, &v16, 1);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "respondWithPayload:", v12);
  }

}

void __68__HMDHomeManager___startupFirewallRuleManagerForMessage_completion___block_invoke(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  NSObject *v6;
  void *v7;
  void *v8;
  void *v9;
  id v10;
  _QWORD v11[4];
  id v12;
  id v13;
  id v14;
  uint8_t buf[4];
  void *v16;
  __int16 v17;
  id v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v3 = a2;
  if (v3)
  {
    v4 = (void *)MEMORY[0x227676638]();
    v5 = *(id *)(a1 + 32);
    HMFGetOSLogHandle();
    v6 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v16 = v7;
      v17 = 2112;
      v18 = v3;
      _os_log_impl(&dword_2218F0000, v6, OS_LOG_TYPE_ERROR, "%{public}@Failed to start up rule manager: %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v4);
    objc_msgSend(*(id *)(a1 + 40), "respondWithError:", v3);
  }
  else
  {
    objc_msgSend(*(id *)(a1 + 40), "responseHandler");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v11[0] = MEMORY[0x24BDAC760];
    v11[1] = 3221225472;
    v11[2] = __68__HMDHomeManager___startupFirewallRuleManagerForMessage_completion___block_invoke_966;
    v11[3] = &unk_24E796990;
    v12 = *(id *)(a1 + 48);
    v13 = *(id *)(a1 + 56);
    v14 = v8;
    v9 = *(void **)(a1 + 40);
    v10 = v8;
    objc_msgSend(v9, "setResponseHandler:", v11);
    (*(void (**)(void))(*(_QWORD *)(a1 + 64) + 16))();

  }
}

void __68__HMDHomeManager___startupFirewallRuleManagerForMessage_completion___block_invoke_966(uint64_t a1, void *a2, void *a3)
{
  id v5;
  uint64_t v6;
  id v7;

  v7 = a2;
  v5 = a3;
  objc_msgSend(*(id *)(a1 + 32), "shutdownForClient:", *(_QWORD *)(a1 + 40));
  v6 = *(_QWORD *)(a1 + 48);
  if (v6)
    (*(void (**)(uint64_t, id, id))(v6 + 16))(v6, v7, v5);

}

_DWORD *__38__HMDHomeManager_registerStateHandler__block_invoke(uint64_t a1, uint64_t a2)
{
  id WeakRetained;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  _DWORD *StateData;

  if (*(_DWORD *)(a2 + 16) != 3)
    return 0;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v3 = (void *)objc_msgSend(objc_alloc(MEMORY[0x24BE3F200]), "initWithName:", CFSTR("os-state-hmgr"));
    objc_msgSend(WeakRetained, "_getRequestedState:activity:", MEMORY[0x24BDBD1A8], 0);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    v5 = (void *)MEMORY[0x24BDD17C8];
    objc_msgSend(WeakRetained, "primaryHomeUUID");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "UUIDString");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(WeakRetained, "currentHomeUUID");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "UUIDString");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "stringWithFormat:", CFSTR("Primary Home: %@, Current Home: %@"), v7, v9);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "setObject:forKeyedSubscript:", v10, CFSTR("Home Manager"));

    StateData = createStateData(CFSTR("HomeKit State"), (uint64_t)v4);
  }
  else
  {
    StateData = 0;
  }

  return StateData;
}

void __42__HMDHomeManager__destinationFromMessage___block_invoke(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  NSObject *v6;
  void *v7;
  void *v8;
  void *v9;
  int v10;
  void *v11;
  __int16 v12;
  id v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  v3 = a2;
  v4 = (void *)MEMORY[0x227676638]();
  v5 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v6 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
  {
    HMFGetLogIdentifier();
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v10 = 138543618;
    v11 = v7;
    v12 = 2112;
    v13 = v3;
    _os_log_impl(&dword_2218F0000, v6, OS_LOG_TYPE_ERROR, "%{public}@HomeUtilRemoteMessageRequest: Invalid parameter: %@", (uint8_t *)&v10, 0x16u);

  }
  objc_autoreleasePoolPop(v4);
  v8 = *(void **)(a1 + 40);
  objc_msgSend(MEMORY[0x24BDD1540], "hmErrorWithCode:description:reason:suggestion:", 3, v3, 0, 0);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "respondWithError:", v9);

}

uint64_t __54__HMDHomeManager__handleClearMobileAssetsInfoRequest___block_invoke(uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)(a1 + 32);
  if (a2)
    return objc_msgSend(v2, "respondWithError:", a2);
  else
    return objc_msgSend(v2, "respondWithSuccess");
}

void __51__HMDHomeManager__handleUpdateMobileAssetsRequest___block_invoke(uint64_t a1, unint64_t a2, uint64_t a3, void *a4)
{
  id v7;
  void *v8;
  id v9;
  NSObject *v10;
  void *v11;
  void *v12;
  id v13;
  NSObject *v14;
  _BOOL4 v15;
  void *v16;
  const char *v17;
  NSObject *v18;
  uint32_t v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  _QWORD v24[2];
  _QWORD v25[2];
  uint8_t buf[4];
  void *v27;
  __int16 v28;
  unint64_t v29;
  __int16 v30;
  uint64_t v31;
  uint64_t v32;

  v32 = *MEMORY[0x24BDAC8D0];
  v7 = a4;
  if (!v7)
  {
    v12 = (void *)MEMORY[0x227676638]();
    v13 = *(id *)(a1 + 32);
    HMFGetOSLogHandle();
    v14 = objc_claimAutoreleasedReturnValue();
    v15 = os_log_type_enabled(v14, OS_LOG_TYPE_INFO);
    if (a3 | a2)
    {
      if (v15)
      {
        HMFGetLogIdentifier();
        v16 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543874;
        v27 = v16;
        v28 = 2048;
        v29 = a2;
        v30 = 2048;
        v31 = a3;
        v17 = "%{public}@Updating mobile assets succeeded, old version %lu, new version %lu";
        v18 = v14;
        v19 = 32;
LABEL_10:
        _os_log_impl(&dword_2218F0000, v18, OS_LOG_TYPE_INFO, v17, buf, v19);

      }
    }
    else if (v15)
    {
      HMFGetLogIdentifier();
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v27 = v16;
      v17 = "%{public}@Updating mobile assets succeeded and didn't find any updates";
      v18 = v14;
      v19 = 12;
      goto LABEL_10;
    }

    objc_autoreleasePoolPop(v12);
    v20 = *(void **)(a1 + 40);
    objc_msgSend(MEMORY[0x24BDD16E0], "numberWithInteger:", a2, *MEMORY[0x24BDD6080]);
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    v25[0] = v21;
    v24[1] = *MEMORY[0x24BDD6078];
    objc_msgSend(MEMORY[0x24BDD16E0], "numberWithInteger:", a3);
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    v25[1] = v22;
    objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v25, v24, 2);
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v20, "respondWithPayload:", v23);

    goto LABEL_12;
  }
  v8 = (void *)MEMORY[0x227676638]();
  v9 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v10 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
  {
    HMFGetLogIdentifier();
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543618;
    v27 = v11;
    v28 = 2112;
    v29 = (unint64_t)v7;
    _os_log_impl(&dword_2218F0000, v10, OS_LOG_TYPE_ERROR, "%{public}@Updating mobile assets failed with error: %@", buf, 0x16u);

  }
  objc_autoreleasePoolPop(v8);
  objc_msgSend(*(id *)(a1 + 40), "respondWithError:", v7);
LABEL_12:

}

void __54__HMDHomeManager__handleHomeUtilRemoteMessageRequest___block_invoke(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  NSObject *v6;
  void *v7;
  void *v8;
  void *v9;
  int v10;
  void *v11;
  __int16 v12;
  id v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  v3 = a2;
  v4 = (void *)MEMORY[0x227676638]();
  v5 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v6 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
  {
    HMFGetLogIdentifier();
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v10 = 138543618;
    v11 = v7;
    v12 = 2112;
    v13 = v3;
    _os_log_impl(&dword_2218F0000, v6, OS_LOG_TYPE_ERROR, "%{public}@HomeUtilRemoteMessageRequest: Invalid parameter: %@", (uint8_t *)&v10, 0x16u);

  }
  objc_autoreleasePoolPop(v4);
  v8 = *(void **)(a1 + 40);
  objc_msgSend(MEMORY[0x24BDD1540], "hmErrorWithCode:description:reason:suggestion:", 3, v3, 0, 0);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "respondWithError:", v9);

}

uint64_t __54__HMDHomeManager__handleHomeUtilRemoteMessageRequest___block_invoke_934(uint64_t result, uint64_t a2)
{
  if (*(_QWORD *)(result + 40) == 3)
    return objc_msgSend(*(id *)(result + 32), "respondWithPayload:error:", 0, a2);
  return result;
}

void __45__HMDHomeManager__handleNetworkMismatchInfo___block_invoke(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  NSObject *v6;
  void *v7;
  int v8;
  void *v9;
  __int16 v10;
  id v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v3 = a2;
  v4 = (void *)MEMORY[0x227676638]();
  v5 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v6 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    HMFGetLogIdentifier();
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = 138543618;
    v9 = v7;
    v10 = 2112;
    v11 = v3;
    _os_log_impl(&dword_2218F0000, v6, OS_LOG_TYPE_DEFAULT, "%{public}@wifi mismatch accessories %@", (uint8_t *)&v8, 0x16u);

  }
  objc_autoreleasePoolPop(v4);
  objc_msgSend(*(id *)(a1 + 40), "respondWithSuccess");

}

void __46__HMDHomeManager__getRequestedState_activity___block_invoke(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  id v6;

  v3 = a2;
  objc_msgSend(v3, "dumpBulletinNotificationRegistrationsState");
  v6 = (id)objc_claimAutoreleasedReturnValue();
  v4 = *(void **)(a1 + 32);
  objc_msgSend(v3, "name");
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v4, "setObject:forKeyedSubscript:", v6, v5);
}

uint64_t __44__HMDHomeManager_handleContactStoreChanged___block_invoke(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_handleContactStoreChanged");
}

uint64_t __82__HMDHomeManager__notifyMetadata_limitToSPIClients_message_invokeResponseHandler___block_invoke(uint64_t result)
{
  if (*(_BYTE *)(result + 40))
    return objc_msgSend(*(id *)(result + 32), "respondWithPayload:", 0);
  return result;
}

id __75__HMDHomeManager__handleHomeManagerSyncWalletKeysPassSerialNumbersMessage___block_invoke(uint64_t a1, void *a2)
{
  id v2;
  void *v3;
  id v4;

  v2 = a2;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v3 = v2;
  else
    v3 = 0;
  v4 = v3;

  return v4;
}

void __40__HMDHomeManager_idsServerBagDidUpdate___block_invoke(uint64_t a1)
{
  id v2;

  objc_msgSend(*(id *)(a1 + 32), "notificationCenter");
  v2 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "postNotificationName:object:userInfo:", CFSTR("HMDHomeManagerServerBagUpdatedNotification"), *(_QWORD *)(a1 + 32), 0);

}

void __61__HMDHomeManager__electRemoteAccessDeviceForHome_retryCount___block_invoke(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  id WeakRetained;
  void *v11;
  NSObject *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  id v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD v26[4];
  id v27;
  uint64_t v28;
  id v29;
  uint64_t v30;
  id v31;
  id v32;
  id v33;
  __int128 v34;
  uint64_t v35;
  id v36[2];
  uint8_t buf[4];
  void *v38;
  uint64_t v39;

  v39 = *MEMORY[0x24BDAC8D0];
  v7 = a2;
  v8 = a3;
  v9 = a4;
  if (v7)
  {
    WeakRetained = objc_loadWeakRetained((id *)(a1 + 104));
    if (WeakRetained)
    {
      v11 = (void *)MEMORY[0x227676638]();
      HMFGetOSLogHandle();
      v12 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543362;
        v38 = v13;
        _os_log_impl(&dword_2218F0000, v12, OS_LOG_TYPE_INFO, "%{public}@Failed to elect device for remote session", buf, 0xCu);

      }
      objc_autoreleasePoolPop(v11);
    }
    dispatch_group_leave(*(dispatch_group_t *)(a1 + 72));

  }
  else
  {
    objc_msgSend(*(id *)(a1 + 32), "messageDispatcher");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    v25 = *(_QWORD *)(a1 + 40);
    objc_msgSend(*(id *)(a1 + 32), "uuid");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    v24 = *(_QWORD *)(a1 + 48);
    objc_msgSend(v8, "destination");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 32), "workQueue");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    v26[0] = MEMORY[0x24BDAC760];
    v26[1] = 3221225472;
    v26[2] = __61__HMDHomeManager__electRemoteAccessDeviceForHome_retryCount___block_invoke_2;
    v26[3] = &unk_24E796810;
    objc_copyWeak(v36, (id *)(a1 + 104));
    v18 = v8;
    v19 = *(_QWORD *)(a1 + 32);
    v27 = v18;
    v28 = v19;
    v20 = *(id *)(a1 + 56);
    v21 = *(_QWORD *)(a1 + 48);
    v29 = v20;
    v30 = v21;
    v31 = v9;
    v34 = *(_OWORD *)(a1 + 80);
    v22 = *(id *)(a1 + 64);
    v36[1] = *(id *)(a1 + 112);
    v23 = *(_QWORD *)(a1 + 96);
    v32 = v22;
    v35 = v23;
    v33 = *(id *)(a1 + 72);
    objc_msgSend(v14, "sendSecureMessage:target:userID:destination:responseQueue:responseHandler:", v25, v15, v24, v16, v17, v26);

    objc_destroyWeak(v36);
  }

}

void __61__HMDHomeManager__electRemoteAccessDeviceForHome_retryCount___block_invoke_846(uint64_t a1)
{
  void *v2;
  NSObject *v3;
  void *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  void *v8;
  NSObject *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  int v17;
  void *v18;
  NSObject *v19;
  _BOOL4 v20;
  void *v21;
  void *v22;
  uint64_t v23;
  void *v24;
  void *v25;
  int v26;
  void *v27;
  __int16 v28;
  void *v29;
  __int16 v30;
  uint64_t v31;
  uint64_t v32;

  v32 = *MEMORY[0x24BDAC8D0];
  v2 = (void *)MEMORY[0x227676638]();
  HMFGetOSLogHandle();
  v3 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 32), "UUIDString");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v26 = 138543618;
    v27 = v4;
    v28 = 2112;
    v29 = v5;
    _os_log_impl(&dword_2218F0000, v3, OS_LOG_TYPE_INFO, "%{public}@Remote access election completed for session %@", (uint8_t *)&v26, 0x16u);

  }
  objc_autoreleasePoolPop(v2);
  objc_msgSend(*(id *)(a1 + 40), "pendingRemoteSessions");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "removeObjectForKey:", *(_QWORD *)(a1 + 32));

  v7 = *(int *)(a1 + 96);
  if (objc_msgSend(*(id *)(a1 + 48), "count") == v7)
  {
    objc_msgSend(*(id *)(a1 + 40), "_teardownRemoteAccessForHome:", *(_QWORD *)(a1 + 56));
    return;
  }
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 40))
  {
    v8 = (void *)MEMORY[0x227676638]();
    HMFGetOSLogHandle();
    v9 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(*(id *)(a1 + 64), "uuid");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v11, "UUIDString");
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 40), "userID");
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      v26 = 138543874;
      v27 = v10;
      v28 = 2112;
      v29 = v12;
      v30 = 2112;
      v31 = (uint64_t)v13;
      _os_log_impl(&dword_2218F0000, v9, OS_LOG_TYPE_INFO, "%{public}@Setting up remote access for home, %@, with resident %@", (uint8_t *)&v26, 0x20u);

    }
    objc_autoreleasePoolPop(v8);
    objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 40), "userID");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    +[HMDDevice deviceWithDestination:](HMDDevice, "deviceWithDestination:", v14);
    v15 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(*(id *)(a1 + 40), "messageDispatcher");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v16, "setRemoteAccessDevice:forHome:", v15, *(_QWORD *)(a1 + 64));

LABEL_9:
    return;
  }
  v17 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 8) + 24);
  v18 = (void *)MEMORY[0x227676638]();
  HMFGetOSLogHandle();
  v19 = objc_claimAutoreleasedReturnValue();
  v20 = os_log_type_enabled(v19, OS_LOG_TYPE_INFO);
  if (!v17)
  {
    if (v20)
    {
      HMFGetLogIdentifier();
      v24 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(*(id *)(a1 + 64), "uuid");
      v25 = (void *)objc_claimAutoreleasedReturnValue();
      v26 = 138543618;
      v27 = v24;
      v28 = 2112;
      v29 = v25;
      _os_log_impl(&dword_2218F0000, v19, OS_LOG_TYPE_INFO, "%{public}@Not setting up remote access for home, %@, as no available residents were found", (uint8_t *)&v26, 0x16u);

    }
    objc_autoreleasePoolPop(v18);
    objc_msgSend(*(id *)(a1 + 40), "messageDispatcher");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v15, "setRemoteAccessDevice:forHome:", 0, *(_QWORD *)(a1 + 64));
    goto LABEL_9;
  }
  if (v20)
  {
    HMFGetLogIdentifier();
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 56), "UUIDString");
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    v23 = *(_QWORD *)(a1 + 88) + 1;
    v26 = 138543874;
    v27 = v21;
    v28 = 2112;
    v29 = v22;
    v30 = 2048;
    v31 = v23;
    _os_log_impl(&dword_2218F0000, v19, OS_LOG_TYPE_INFO, "%{public}@Failed to setup remote session for home with UUID %@, retry attempt %ld", (uint8_t *)&v26, 0x20u);

  }
  objc_autoreleasePoolPop(v18);
  objc_msgSend(*(id *)(a1 + 40), "_electRemoteAccessPeerForHome:retryCount:", *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 88) + 1);
}

void __61__HMDHomeManager__electRemoteAccessDeviceForHome_retryCount___block_invoke_2(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id WeakRetained;
  int v8;
  uint64_t v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  id v20;
  NSObject *v21;
  void *v22;
  void *v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  id *v27;
  uint64_t v28;
  void *v29;
  NSObject *v30;
  void *v31;
  void *v32;
  NSObject *v33;
  void *v34;
  unint64_t v35;
  void *v36;
  NSObject *v37;
  void *v38;
  void *v39;
  void *v40;
  NSObject *v41;
  void *v42;
  void *v43;
  void *v44;
  uint64_t v45;
  void *v46;
  void *v47;
  void *v48;
  void *v49;
  void *v50;
  void *context;
  void *contexta;
  NSObject *contextb;
  uint8_t buf[4];
  void *v55;
  __int16 v56;
  void *v57;
  __int16 v58;
  void *v59;
  __int16 v60;
  void *v61;
  __int16 v62;
  uint64_t v63;
  uint64_t v64;

  v64 = *MEMORY[0x24BDAC8D0];
  v5 = a2;
  v6 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 112));
  if (WeakRetained)
  {
    if (!v5 && v6)
    {
      v8 = objc_msgSend(v6, "hmf_BOOLForKey:", CFSTR("kAtHomeStateKey"));
      objc_msgSend(v6, "hmf_UUIDForKey:", CFSTR("kRemoteSessionIdentifierKey"));
      v9 = objc_claimAutoreleasedReturnValue();
      v10 = (void *)v9;
      if (!v8 || !v9)
      {
        v36 = (void *)MEMORY[0x227676638]();
        HMFGetOSLogHandle();
        v37 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v37, OS_LOG_TYPE_INFO))
        {
          HMFGetLogIdentifier();
          v38 = (void *)objc_claimAutoreleasedReturnValue();
          v39 = *(void **)(a1 + 72);
          *(_DWORD *)buf = 138543618;
          v55 = v38;
          v56 = 2112;
          v57 = v39;
          _os_log_impl(&dword_2218F0000, v37, OS_LOG_TYPE_INFO, "%{public}@Received response that %@ is not at home", buf, 0x16u);

        }
        objc_autoreleasePoolPop(v36);
        goto LABEL_44;
      }
      objc_msgSend(*(id *)(a1 + 32), "destination");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(WeakRetained, "pendingRemoteSessions");
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v12, "objectForKeyedSubscript:", v10);
      v13 = (void *)objc_claimAutoreleasedReturnValue();

      if (!v13)
      {
        v40 = (void *)MEMORY[0x227676638]();
        HMFGetOSLogHandle();
        v41 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v41, OS_LOG_TYPE_INFO))
        {
          HMFGetLogIdentifier();
          v42 = v11;
          v43 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543618;
          v55 = v43;
          v56 = 2112;
          v57 = v42;
          _os_log_impl(&dword_2218F0000, v41, OS_LOG_TYPE_INFO, "%{public}@Received response that %@ is at home, dropping setting up remote access since we tore the session down", buf, 0x16u);

          v11 = v42;
        }

        objc_autoreleasePoolPop(v40);
        goto LABEL_43;
      }
      v14 = *(void **)(a1 + 40);
      objc_msgSend(*(id *)(a1 + 48), "uuid");
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v14, "_homeWithUUID:", v15);
      v16 = (void *)objc_claimAutoreleasedReturnValue();

      objc_msgSend(v16, "users");
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v17, "hmf_firstObjectWithValue:forKeyPath:", *(_QWORD *)(a1 + 56), CFSTR("userID"));
      v18 = (void *)objc_claimAutoreleasedReturnValue();

      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0)
        v19 = v18;
      else
        v19 = 0;
      v20 = v19;

      if (!v20 || objc_msgSend(v20, "configurationState") != 2)
      {
LABEL_42:

LABEL_43:
LABEL_44:

        goto LABEL_45;
      }
      context = (void *)MEMORY[0x227676638]();
      HMFGetOSLogHandle();
      v21 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v48 = v16;
        v22 = v11;
        v23 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        v55 = v23;
        v56 = 2112;
        v57 = v22;
        _os_log_impl(&dword_2218F0000, v21, OS_LOG_TYPE_INFO, "%{public}@Received response that %@ is at home", buf, 0x16u);

        v11 = v22;
        v16 = v48;
      }

      objc_autoreleasePoolPop(context);
      objc_msgSend(*(id *)(a1 + 64), "objectForKeyedSubscript:", CFSTR("kHomedVersionKey"));
      v24 = objc_claimAutoreleasedReturnValue();
      if (v24)
        v25 = (void *)v24;
      else
        v25 = &unk_24E971508;
      v26 = *(_QWORD *)(*(_QWORD *)(a1 + 88) + 8);
      v28 = *(_QWORD *)(v26 + 40);
      v27 = (id *)(v26 + 40);
      if (v28)
      {
        v29 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 96) + 8) + 40);
        if (!v29 || objc_msgSend(v29, "compare:", v25) != -1)
        {
          contexta = (void *)MEMORY[0x227676638]();
          HMFGetOSLogHandle();
          v30 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v30, OS_LOG_TYPE_INFO))
          {
            HMFGetLogIdentifier();
            v49 = v11;
            v31 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 138543874;
            v55 = v31;
            v56 = 2112;
            v57 = v49;
            v58 = 2112;
            v59 = v25;
            _os_log_impl(&dword_2218F0000, v30, OS_LOG_TYPE_INFO, "%{public}@Dropping resident %@ (%@) as a resident with a higher homed version was found", buf, 0x20u);

            v11 = v49;
          }

          objc_autoreleasePoolPop(contexta);
          goto LABEL_41;
        }
        v47 = (void *)MEMORY[0x227676638]();
        HMFGetOSLogHandle();
        contextb = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(contextb, OS_LOG_TYPE_INFO))
        {
          HMFGetLogIdentifier();
          v46 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 8) + 40), "userID");
          v50 = v11;
          v44 = (void *)objc_claimAutoreleasedReturnValue();
          v45 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 96) + 8) + 40);
          *(_DWORD *)buf = 138544386;
          v55 = v46;
          v56 = 2112;
          v57 = v50;
          v58 = 2112;
          v59 = v25;
          v60 = 2112;
          v61 = v44;
          v62 = 2112;
          v63 = v45;
          _os_log_impl(&dword_2218F0000, contextb, OS_LOG_TYPE_INFO, "%{public}@Preferring %@ (%@) over %@ (%@) due to higher homed version", buf, 0x34u);

          v11 = v50;
        }

        objc_autoreleasePoolPop(v47);
        v27 = (id *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 8) + 40);
      }
      objc_storeStrong(v27, v19);
      objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 96) + 8) + 40), v25);
LABEL_41:

      goto LABEL_42;
    }
    v32 = (void *)MEMORY[0x227676638]();
    HMFGetOSLogHandle();
    v33 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v33, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v34 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v55 = v34;
      _os_log_impl(&dword_2218F0000, v33, OS_LOG_TYPE_INFO, "%{public}@Failed to send secure message to elect device for remote session", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v32);
    if (v5)
    {
      objc_msgSend(v5, "domain");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      if (!objc_msgSend(v10, "isEqualToString:", *MEMORY[0x24BDD1100])
        || objc_msgSend(v5, "code") != -6722 && objc_msgSend(v5, "code") != -6752)
      {
        goto LABEL_44;
      }
      v35 = *(_QWORD *)(a1 + 120);

      if (v35 <= 1)
        *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 104) + 8) + 24) = 1;
    }
  }
LABEL_45:
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 80));

}

void __63__HMDHomeManager__findRemotePeerContainingAccessories_forHome___block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id WeakRetained;
  void *v8;
  NSObject *v9;
  id v10;
  uint64_t v11;
  _QWORD block[4];
  id v13;
  id v14;
  id v15;
  uint64_t v16;
  id v17;

  v5 = a2;
  v6 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  v8 = WeakRetained;
  if (WeakRetained)
  {
    objc_msgSend(WeakRetained, "workQueue");
    v9 = objc_claimAutoreleasedReturnValue();
    block[0] = MEMORY[0x24BDAC760];
    block[1] = 3221225472;
    block[2] = __63__HMDHomeManager__findRemotePeerContainingAccessories_forHome___block_invoke_2;
    block[3] = &unk_24E79AD20;
    v13 = v5;
    v14 = v6;
    v10 = *(id *)(a1 + 32);
    v11 = *(_QWORD *)(a1 + 40);
    v15 = v10;
    v16 = v11;
    v17 = v8;
    dispatch_async(v9, block);

  }
}

void __63__HMDHomeManager__findRemotePeerContainingAccessories_forHome___block_invoke_2(uint64_t a1)
{
  void *v2;
  NSObject *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  int v8;
  uint64_t v9;
  void *v10;
  BOOL v11;
  void *v12;
  void *v13;
  int v14;
  void *v15;
  __int16 v16;
  uint64_t v17;
  __int16 v18;
  uint64_t v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  if (*(_QWORD *)(a1 + 32) || (v7 = *(void **)(a1 + 40)) == 0)
  {
    v2 = (void *)MEMORY[0x227676638]();
    HMFGetOSLogHandle();
    v3 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v4 = (void *)objc_claimAutoreleasedReturnValue();
      v5 = *(_QWORD *)(a1 + 56);
      v6 = *(_QWORD *)(a1 + 32);
      v14 = 138543874;
      v15 = v4;
      v16 = 2112;
      v17 = v5;
      v18 = 2112;
      v19 = v6;
      _os_log_impl(&dword_2218F0000, v3, OS_LOG_TYPE_INFO, "%{public}@Remote peer, %@, failed to look for accessories with error:%@", (uint8_t *)&v14, 0x20u);

    }
    objc_autoreleasePoolPop(v2);
  }
  else
  {
    v8 = objc_msgSend(v7, "hmf_BOOLForKey:", CFSTR("kAtHomeStateKey"));
    objc_msgSend(*(id *)(a1 + 40), "hmf_stringForKey:", CFSTR("kDeviceNameKey"));
    v9 = objc_claimAutoreleasedReturnValue();
    v10 = (void *)v9;
    if (v8)
      v11 = v9 == 0;
    else
      v11 = 1;
    if (!v11)
      objc_msgSend(*(id *)(a1 + 48), "addUnconfiguredResidentDevice:", *(_QWORD *)(a1 + 56));

  }
  objc_msgSend(*(id *)(a1 + 64), "pendingResidentSetupSessions");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 56), "remoteDestinationString");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v12, "removeObject:", v13);

}

uint64_t __54__HMDHomeManager_atHomeLevelChanged_formerLevel_home___block_invoke(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_updateCurrentHomeIfNecessary");
}

uint64_t __51__HMDHomeManager_removeFromUnassociatedPeers_home___block_invoke(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_removeFromUnassociatedPeers:home:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
}

uint64_t __38__HMDHomeManager__checkForRemotePeers__block_invoke(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_checkForRemotePeersAndRegisterForRemoteNotifications:", 0);
}

uint64_t __37__HMDHomeManager_checkForRemotePeers__block_invoke(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_checkForRemotePeers");
}

void __54__HMDHomeManager__handleHomeUtilCommandWalletMessage___block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  void *v8;
  const __CFString *v9;
  _QWORD v10[2];

  v10[1] = *MEMORY[0x24BDAC8D0];
  v5 = a2;
  v6 = a3;
  if (v6)
  {
    objc_msgSend(*(id *)(a1 + 32), "respondWithError:", v6);
  }
  else
  {
    v7 = *(void **)(a1 + 32);
    if (v5)
    {
      v9 = CFSTR("result");
      v10[0] = v5;
      objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v10, &v9, 1);
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v7, "respondWithPayload:", v8);

    }
    else
    {
      objc_msgSend(v7, "respondWithSuccess");
    }
  }

}

void __71__HMDHomeManager_syncWalletKeyPassSerialNumbersToWatch_withCompletion___block_invoke_829(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  NSObject *v7;
  id v8;
  id v9;
  id v10;
  _QWORD block[4];
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;

  v5 = a2;
  v6 = a3;
  v7 = *(NSObject **)(a1 + 32);
  block[0] = MEMORY[0x24BDAC760];
  block[1] = 3221225472;
  block[2] = __71__HMDHomeManager_syncWalletKeyPassSerialNumbersToWatch_withCompletion___block_invoke_2;
  block[3] = &unk_24E796798;
  objc_copyWeak(&v16, (id *)(a1 + 56));
  v12 = *(id *)(a1 + 40);
  v8 = *(id *)(a1 + 48);
  v14 = v5;
  v15 = v8;
  v13 = v6;
  v9 = v5;
  v10 = v6;
  dispatch_async(v7, block);

  objc_destroyWeak(&v16);
}

void __71__HMDHomeManager_syncWalletKeyPassSerialNumbersToWatch_withCompletion___block_invoke_2(uint64_t a1)
{
  id WeakRetained;
  int v3;
  void *v4;
  NSObject *v5;
  NSObject *v6;
  NSObject *v7;
  NSObject *v8;
  uint64_t v9;
  const char *v10;
  NSObject *v11;
  os_log_type_t v12;
  uint32_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  NSObject *v18;
  __int16 v19;
  uint64_t v20;
  __int16 v21;
  uint64_t v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 64));
  if (WeakRetained)
  {
    v3 = objc_msgSend(*(id *)(a1 + 40), "hmf_BOOLForKey:", CFSTR("kDataSyncResponseAckKey"));
    v4 = (void *)MEMORY[0x227676638]();
    v5 = WeakRetained;
    HMFGetOSLogHandle();
    v6 = objc_claimAutoreleasedReturnValue();
    v7 = v6;
    if (v3)
    {
      if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v8 = objc_claimAutoreleasedReturnValue();
        v9 = *(_QWORD *)(a1 + 32);
        v17 = 138543618;
        v18 = v8;
        v19 = 2112;
        v20 = v9;
        v10 = "%{public}@Successfully synced wallet key pass serial numbers to watch: %@";
        v11 = v7;
        v12 = OS_LOG_TYPE_INFO;
        v13 = 22;
LABEL_9:
        _os_log_impl(&dword_2218F0000, v11, v12, v10, (uint8_t *)&v17, v13);

      }
    }
    else if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v8 = objc_claimAutoreleasedReturnValue();
      v15 = *(_QWORD *)(a1 + 32);
      v16 = *(_QWORD *)(a1 + 48);
      v17 = 138543874;
      v18 = v8;
      v19 = 2112;
      v20 = v15;
      v21 = 2112;
      v22 = v16;
      v10 = "%{public}@Failed to sync wallet key pass serials numbers to watch %@:%@";
      v11 = v7;
      v12 = OS_LOG_TYPE_ERROR;
      v13 = 32;
      goto LABEL_9;
    }
LABEL_10:

    goto LABEL_11;
  }
  v4 = (void *)MEMORY[0x227676638]();
  HMFGetOSLogHandle();
  v5 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v7 = objc_claimAutoreleasedReturnValue();
    v14 = *(_QWORD *)(a1 + 32);
    v17 = 138543618;
    v18 = v7;
    v19 = 2112;
    v20 = v14;
    _os_log_impl(&dword_2218F0000, v5, OS_LOG_TYPE_INFO, "%{public}@HomeManager became nil while syncing wallet key pass serial numbers to watch: %@", (uint8_t *)&v17, 0x16u);
    goto LABEL_10;
  }
LABEL_11:

  objc_autoreleasePoolPop(v4);
  (*(void (**)(void))(*(_QWORD *)(a1 + 56) + 16))();

}

id __71__HMDHomeManager_syncWalletKeyPassSerialNumbersToWatch_withCompletion___block_invoke(uint64_t a1, void *a2)
{
  void *v2;
  void *v3;

  objc_msgSend(a2, "walletKeyManager");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "passSerialNumber");
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  return v3;
}

void __70__HMDHomeManager__sendHomeDataToWatch_migrateToHH2_completionHandler___block_invoke(uint64_t a1, int a2)
{
  id WeakRetained;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  id v11;
  NSObject *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  id v17;
  NSObject *v18;
  void *v19;
  void *v20;
  void *v21;
  int v22;
  void *v23;
  __int16 v24;
  void *v25;
  __int16 v26;
  void *v27;
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  v5 = WeakRetained;
  if (WeakRetained)
  {
    if (a2)
    {
      objc_msgSend(WeakRetained, "associatedWatchPeers");
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v6, "objectForKeyedSubscript:", *(_QWORD *)(a1 + 32));
      v7 = (void *)objc_claimAutoreleasedReturnValue();

      objc_msgSend(MEMORY[0x24BDD16E0], "numberWithInteger:", *(_QWORD *)(a1 + 64));
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(*(id *)(a1 + 40), "uuid");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v7, "setConfigVersion:forHome:", v8, v9);

      v10 = (void *)MEMORY[0x227676638]();
      v11 = *(id *)(a1 + 48);
      HMFGetOSLogHandle();
      v12 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        v14 = *(void **)(a1 + 32);
        objc_msgSend(*(id *)(a1 + 40), "name");
        v15 = (void *)objc_claimAutoreleasedReturnValue();
        v22 = 138543874;
        v23 = v13;
        v24 = 2112;
        v25 = v14;
        v26 = 2112;
        v27 = v15;
        _os_log_impl(&dword_2218F0000, v12, OS_LOG_TYPE_INFO, "%{public}@Received ACK from watch %@ for data corresponding to home %@", (uint8_t *)&v22, 0x20u);

      }
      objc_autoreleasePoolPop(v10);

    }
    else
    {
      v16 = (void *)MEMORY[0x227676638]();
      v17 = *(id *)(a1 + 48);
      HMFGetOSLogHandle();
      v18 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v19 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(*(id *)(a1 + 40), "name");
        v20 = (void *)objc_claimAutoreleasedReturnValue();
        v21 = *(void **)(a1 + 32);
        v22 = 138543874;
        v23 = v19;
        v24 = 2112;
        v25 = v20;
        v26 = 2112;
        v27 = v21;
        _os_log_impl(&dword_2218F0000, v18, OS_LOG_TYPE_ERROR, "%{public}@Failed to send data for home %@ to watch %@", (uint8_t *)&v22, 0x20u);

      }
      objc_autoreleasePoolPop(v16);
    }
  }

}

void __70__HMDHomeManager__sendHomeDataToWatch_migrateToHH2_completionHandler___block_invoke_825(uint64_t a1, int a2)
{
  id WeakRetained;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;
  NSObject *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  id v15;
  NSObject *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  void *v21;
  __int16 v22;
  uint64_t v23;
  __int16 v24;
  uint64_t v25;
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  v5 = WeakRetained;
  if (WeakRetained)
  {
    if (a2)
    {
      objc_msgSend(WeakRetained, "associatedWatchPeers");
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v6, "objectForKeyedSubscript:", *(_QWORD *)(a1 + 32));
      v7 = (void *)objc_claimAutoreleasedReturnValue();

      v8 = (void *)MEMORY[0x227676638](objc_msgSend(v7, "setPrimaryHome:", *(_QWORD *)(a1 + 40)));
      v9 = *(id *)(a1 + 48);
      HMFGetOSLogHandle();
      v10 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        v12 = *(_QWORD *)(a1 + 32);
        v13 = *(_QWORD *)(a1 + 40);
        v20 = 138543874;
        v21 = v11;
        v22 = 2112;
        v23 = v12;
        v24 = 2112;
        v25 = v13;
        _os_log_impl(&dword_2218F0000, v10, OS_LOG_TYPE_INFO, "%{public}@Received ACK from watch %@ for primary home update to %@", (uint8_t *)&v20, 0x20u);

      }
      objc_autoreleasePoolPop(v8);

    }
    else
    {
      v14 = (void *)MEMORY[0x227676638]();
      v15 = *(id *)(a1 + 48);
      HMFGetOSLogHandle();
      v16 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        v19 = *(_QWORD *)(a1 + 32);
        v18 = *(_QWORD *)(a1 + 40);
        v20 = 138543874;
        v21 = v17;
        v22 = 2112;
        v23 = v18;
        v24 = 2112;
        v25 = v19;
        _os_log_impl(&dword_2218F0000, v16, OS_LOG_TYPE_ERROR, "%{public}@Failed to primary home update %@ to watch %@", (uint8_t *)&v20, 0x20u);

      }
      objc_autoreleasePoolPop(v14);
    }
  }

}

void __70__HMDHomeManager__sendHomeDataToWatch_migrateToHH2_completionHandler___block_invoke_826(uint64_t a1)
{
  void *v2;
  id v3;
  void *v4;
  void *v5;
  __int128 v6;
  _QWORD aBlock[5];
  id v8;
  __int128 v9;

  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 3221225472;
  aBlock[2] = __70__HMDHomeManager__sendHomeDataToWatch_migrateToHH2_completionHandler___block_invoke_2;
  aBlock[3] = &unk_24E797938;
  v2 = *(void **)(a1 + 40);
  aBlock[4] = *(_QWORD *)(a1 + 32);
  v8 = v2;
  v6 = *(_OWORD *)(a1 + 56);
  v3 = (id)v6;
  v9 = v6;
  v4 = _Block_copy(aBlock);
  v5 = v4;
  if (*(_BYTE *)(a1 + 72))
    objc_msgSend(*(id *)(a1 + 32), "syncWalletKeyPassSerialNumbersToWatch:withCompletion:", *(_QWORD *)(a1 + 48), v4);
  else
    (*((void (**)(void *))v4 + 2))(v4);

}

uint64_t __70__HMDHomeManager__sendHomeDataToWatch_migrateToHH2_completionHandler___block_invoke_2(uint64_t a1)
{
  void *v2;
  id v3;
  NSObject *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t result;
  int v10;
  void *v11;
  __int16 v12;
  uint64_t v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  v2 = (void *)MEMORY[0x227676638]();
  v3 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = *(_QWORD *)(a1 + 40);
    v10 = 138543618;
    v11 = v5;
    v12 = 2112;
    v13 = v6;
    _os_log_impl(&dword_2218F0000, v4, OS_LOG_TYPE_INFO, "%{public}@Finished pushing home data changes to watch: %@", (uint8_t *)&v10, 0x16u);

  }
  objc_autoreleasePoolPop(v2);
  v7 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
  v8 = *(void **)(v7 + 40);
  *(_QWORD *)(v7 + 40) = 0;

  result = *(_QWORD *)(a1 + 48);
  if (result)
    return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(result + 16))(result, 1, 0);
  return result;
}

void __74__HMDHomeManager__sendHomeDataToAllWatchesMigrateToHH2_completionHandler___block_invoke(uint64_t a1)
{
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

uint64_t __74__HMDHomeManager__sendHomeDataToAllWatchesMigrateToHH2_completionHandler___block_invoke_2(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

uint64_t __57__HMDHomeManager_sendHomeDataToAllWatchesWithCompletion___block_invoke(uint64_t a1)
{
  void *v2;
  id v3;
  NSObject *v4;
  void *v5;
  void *v6;
  int v8;
  void *v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  v2 = (void *)MEMORY[0x227676638]();
  v3 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = 138543362;
    v9 = v5;
    _os_log_impl(&dword_2218F0000, v4, OS_LOG_TYPE_INFO, "%{public}@Syncing home data to all watches", (uint8_t *)&v8, 0xCu);

  }
  objc_autoreleasePoolPop(v2);
  objc_msgSend(*(id *)(a1 + 32), "watchPushDelayTimer");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "suspend");

  return objc_msgSend(*(id *)(a1 + 32), "_sendHomeDataToAllWatchesWithCompletion:", *(_QWORD *)(a1 + 40));
}

void __49__HMDHomeManager__handleUpdateiCloudSwitchState___block_invoke(uint64_t a1, void *a2)
{
  id v3;
  id WeakRetained;
  void *v5;
  id v6;
  NSObject *v7;
  void *v8;
  void *v9;
  void (**v10)(_QWORD, _QWORD, _QWORD);
  int v11;
  void *v12;
  __int16 v13;
  id v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v3 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (v3)
  {
    v5 = (void *)MEMORY[0x227676638]();
    v6 = WeakRetained;
    HMFGetOSLogHandle();
    v7 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      HMFGetLogIdentifier();
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      v11 = 138543618;
      v12 = v8;
      v13 = 2112;
      v14 = v3;
      _os_log_impl(&dword_2218F0000, v7, OS_LOG_TYPE_DEFAULT, "%{public}@Failed to update iCloud state with error: %@", (uint8_t *)&v11, 0x16u);

    }
    objc_autoreleasePoolPop(v5);
  }
  objc_msgSend(*(id *)(a1 + 32), "responseHandler");
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  if (v9)
  {
    objc_msgSend(*(id *)(a1 + 32), "responseHandler");
    v10 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
    ((void (**)(_QWORD, id, _QWORD))v10)[2](v10, v3, 0);

  }
}

void __58__HMDHomeManager__auditDuplicatePreviouslyAddedAccessory___block_invoke(uint64_t a1)
{
  void *v2;
  id v3;
  NSObject *v4;
  void *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  void *v20;
  uint64_t v21;
  void *v22;
  void *v23;
  uint64_t v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  int v29;
  void *v30;
  BOOL v31;
  id v32;
  void *v33;
  id v34;
  void *v35;
  void *v36;
  int v37;
  void *v38;
  NSObject *v39;
  void *v40;
  void *v41;
  void *v42;
  void *v43;
  NSObject *v44;
  void *v45;
  void *v46;
  void *v47;
  void *v48;
  id v49;
  NSObject *v50;
  void *v51;
  void *v52;
  __int128 v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  id obj;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  uint8_t buf[4];
  void *v70;
  __int16 v71;
  id v72;
  __int16 v73;
  void *v74;
  __int16 v75;
  void *v76;
  _BYTE v77[128];
  _BYTE v78[128];
  uint64_t v79;

  v79 = *MEMORY[0x24BDAC8D0];
  v2 = (void *)MEMORY[0x227676638]();
  v56 = a1;
  v3 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543362;
    v70 = v5;
    _os_log_impl(&dword_2218F0000, v4, OS_LOG_TYPE_INFO, "%{public}@Auditing accessories", buf, 0xCu);

  }
  objc_autoreleasePoolPop(v2);
  v6 = a1;
  objc_msgSend(*(id *)(a1 + 40), "home");
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  if (v7)
  {
    v67 = 0u;
    v68 = 0u;
    v65 = 0u;
    v66 = 0u;
    objc_msgSend(*(id *)(a1 + 32), "homes");
    obj = (id)objc_claimAutoreleasedReturnValue();
    v8 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v65, v78, 16);
    if (!v8)
      goto LABEL_43;
    v10 = v8;
    v11 = *(_QWORD *)v66;
    *(_QWORD *)&v9 = 138544130;
    v53 = v9;
    v54 = *(_QWORD *)v66;
    while (1)
    {
      v12 = 0;
      v55 = v10;
      do
      {
        if (*(_QWORD *)v66 != v11)
          objc_enumerationMutation(obj);
        v13 = *(void **)(*((_QWORD *)&v65 + 1) + 8 * v12);
        if (!objc_msgSend(v13, "isOwnerUser", v53))
          goto LABEL_41;
        v63 = 0u;
        v64 = 0u;
        v61 = 0u;
        v62 = 0u;
        objc_msgSend(v13, "accessories");
        v14 = (void *)objc_claimAutoreleasedReturnValue();
        v15 = objc_msgSend(v14, "countByEnumeratingWithState:objects:count:", &v61, v77, 16);
        if (!v15)
        {
LABEL_40:

          goto LABEL_41;
        }
        v16 = v15;
        v17 = *(_QWORD *)v62;
        v58 = v12;
        v59 = *(_QWORD *)v62;
LABEL_12:
        v18 = 0;
        v60 = v16;
        while (1)
        {
          if (*(_QWORD *)v62 != v17)
            objc_enumerationMutation(v14);
          v19 = *(void **)(*((_QWORD *)&v61 + 1) + 8 * v18);
          v20 = *(void **)(v6 + 48);
          if (!v20)
            goto LABEL_20;
          objc_msgSend(v20, "serialNumber");
          v21 = objc_claimAutoreleasedReturnValue();
          if (!v21)
            goto LABEL_20;
          v22 = (void *)v21;
          v23 = v14;
          objc_msgSend(*(id *)(v6 + 48), "uuid");
          v24 = v6;
          v25 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v19, "uuid");
          v26 = (void *)objc_claimAutoreleasedReturnValue();
          if (!objc_msgSend(v25, "hmf_isEqualToUUID:", v26))
            break;

          v14 = v23;
          v6 = v24;
          v17 = v59;
          v16 = v60;
LABEL_20:
          v30 = *(void **)(v6 + 56);
          if (v30)
            v31 = v19 == v30;
          else
            v31 = 1;
          if (!v31)
          {
            v32 = v19;
            objc_opt_class();
            if ((objc_opt_isKindOfClass() & 1) != 0)
              v33 = v32;
            else
              v33 = 0;
            v34 = v33;

            if (v34)
            {
              objc_msgSend(*(id *)(v6 + 56), "identifier");
              v35 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v34, "identifier");
              v36 = (void *)objc_claimAutoreleasedReturnValue();
              v37 = objc_msgSend(v35, "isEqual:", v36);

              if (v37)
              {
                v38 = (void *)MEMORY[0x227676638]();
                HMFGetOSLogHandle();
                v39 = objc_claimAutoreleasedReturnValue();
                if (os_log_type_enabled(v39, OS_LOG_TYPE_INFO))
                {
                  HMFGetLogIdentifier();
                  v40 = (void *)objc_claimAutoreleasedReturnValue();
                  v41 = *(void **)(v56 + 56);
                  objc_msgSend(v41, "identifier");
                  v42 = (void *)objc_claimAutoreleasedReturnValue();
                  *(_DWORD *)buf = v53;
                  v70 = v40;
                  v71 = 2112;
                  v72 = v34;
                  v73 = 2112;
                  v74 = v41;
                  v75 = 2112;
                  v76 = v42;
                  _os_log_impl(&dword_2218F0000, v39, OS_LOG_TYPE_INFO, "%{public}@Found an existing media accessory (%@) match the newly added hap accessory (%@) with device identifier %@, trying to remove it.", buf, 0x2Au);

                }
                objc_autoreleasePoolPop(v38);

                v11 = v54;
                v10 = v55;
                v12 = v58;
                v6 = v56;
LABEL_39:
                objc_msgSend(v32, "sendRemovalRequest");
                v14 = v32;
                goto LABEL_40;
              }
            }

          }
          if (v16 == ++v18)
          {
            v16 = objc_msgSend(v14, "countByEnumeratingWithState:objects:count:", &v61, v77, 16);
            if (v16)
              goto LABEL_12;
            v11 = v54;
            v10 = v55;
            v12 = v58;
            goto LABEL_40;
          }
        }
        objc_msgSend(*(id *)(v24 + 48), "serialNumber");
        v27 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v19, "serialNumber");
        v28 = (void *)objc_claimAutoreleasedReturnValue();
        v29 = objc_msgSend(v27, "isEqual:", v28);

        v14 = v23;
        v6 = v24;
        v17 = v59;
        v16 = v60;
        if (!v29)
          goto LABEL_20;
        v43 = (void *)MEMORY[0x227676638]();
        HMFGetOSLogHandle();
        v44 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v44, OS_LOG_TYPE_INFO))
        {
          HMFGetLogIdentifier();
          v45 = (void *)objc_claimAutoreleasedReturnValue();
          v46 = *(void **)(v56 + 48);
          objc_msgSend(v46, "serialNumber");
          v47 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = v53;
          v70 = v45;
          v71 = 2112;
          v72 = v19;
          v73 = 2112;
          v74 = v46;
          v75 = 2112;
          v76 = v47;
          _os_log_impl(&dword_2218F0000, v44, OS_LOG_TYPE_INFO, "%{public}@Found an existing accessory (%@) match the newly added accessory (%@) with serialNumber %@, trying to remove it.", buf, 0x2Au);

        }
        objc_autoreleasePoolPop(v43);
        v32 = v19;

        v11 = v54;
        v10 = v55;
        v12 = v58;
        v6 = v56;
        if (v32)
          goto LABEL_39;
LABEL_41:
        ++v12;
      }
      while (v12 != v10);
      v10 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v65, v78, 16);
      if (!v10)
      {
LABEL_43:

        return;
      }
    }
  }
  v48 = (void *)MEMORY[0x227676638]();
  v49 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v50 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v50, OS_LOG_TYPE_ERROR))
  {
    HMFGetLogIdentifier();
    v51 = (void *)objc_claimAutoreleasedReturnValue();
    v52 = *(void **)(a1 + 40);
    *(_DWORD *)buf = 138543618;
    v70 = v51;
    v71 = 2112;
    v72 = v52;
    _os_log_impl(&dword_2218F0000, v50, OS_LOG_TYPE_ERROR, "%{public}@Skipping audit as accessory (%@) or home has been removed", buf, 0x16u);

  }
  objc_autoreleasePoolPop(v48);
}

void __62__HMDHomeManager___handleAppleAccountUpdated_previousAccount___block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;
  BOOL v4;
  void *v5;
  void *v6;
  uint64_t v7;
  void *v8;
  id v9;
  NSObject *v10;
  void *v11;
  _BOOL8 v12;
  void *v13;
  id v14;
  NSObject *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  id v20;
  NSObject *v21;
  void *v22;
  void *v23;
  id v24;
  int v25;
  void *v26;
  uint64_t v27;

  v27 = *MEMORY[0x24BDAC8D0];
  objc_msgSend(MEMORY[0x24BE1BC08], "systemStore");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "getLocalPairingIdentity:", 0);
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  if (*(_QWORD *)(a1 + 32))
    v4 = v3 == 0;
  else
    v4 = 1;
  if (!v4)
  {
    +[HMDIdentityRegistry sharedRegistry](HMDIdentityRegistry, "sharedRegistry");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "deregisterIdentity:object:", v3, *(_QWORD *)(a1 + 32));

  }
  if (*(_QWORD *)(a1 + 40) && v3)
  {
    +[HMDIdentityRegistry sharedRegistry](HMDIdentityRegistry, "sharedRegistry");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "registerIdentity:account:object:", v3, *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 40));

  }
  objc_msgSend(*(id *)(a1 + 48), "_notifyClientsOfUpdatedStatus");
  v7 = objc_msgSend(*(id *)(a1 + 48), "postFinishSetupForCurrentAccessoryFollowUpIfNeeded");
  if (*(_QWORD *)(a1 + 40))
  {
    v8 = (void *)MEMORY[0x227676638](v7);
    v9 = *(id *)(a1 + 48);
    HMFGetOSLogHandle();
    v10 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      HMFGetLogIdentifier();
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      v25 = 138543362;
      v26 = v11;
      _os_log_impl(&dword_2218F0000, v10, OS_LOG_TYPE_DEFAULT, "%{public}@Handling account sign in", (uint8_t *)&v25, 0xCu);

    }
    objc_autoreleasePoolPop(v8);
    objc_msgSend(*(id *)(a1 + 48), "_postiCloudSigninState:", 1);
    v12 = isWatch();
    v13 = (void *)MEMORY[0x227676638](v12);
    v14 = *(id *)(a1 + 48);
    HMFGetOSLogHandle();
    v15 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      v25 = 138543362;
      v26 = v16;
      _os_log_impl(&dword_2218F0000, v15, OS_LOG_TYPE_INFO, "%{public}@Clearing CloudKit account status", (uint8_t *)&v25, 0xCu);

    }
    objc_autoreleasePoolPop(v13);
    objc_msgSend(*(id *)(a1 + 48), "setCloudkitAccountStatusDetermined:", 0);
    objc_msgSend(*(id *)(a1 + 48), "setBackOffOperationInProgress:", 0);
    objc_msgSend(*(id *)(a1 + 48), "multiUserStatusController");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v17, "didChangeHasActiveAccountState:", 0);

    objc_msgSend(*(id *)(a1 + 48), "notificationCenter");
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v18, "postNotificationName:object:userInfo:", CFSTR("HMDHomeManagerKeyTransferResetTimerNotification"), *(_QWORD *)(a1 + 48), 0);

  }
  else if (*(_QWORD *)(a1 + 32))
  {
    v19 = (void *)MEMORY[0x227676638](v7);
    v20 = *(id *)(a1 + 48);
    HMFGetOSLogHandle();
    v21 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
    {
      HMFGetLogIdentifier();
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      v25 = 138543362;
      v26 = v22;
      _os_log_impl(&dword_2218F0000, v21, OS_LOG_TYPE_DEFAULT, "%{public}@Handling account sign out", (uint8_t *)&v25, 0xCu);

    }
    objc_autoreleasePoolPop(v19);
    objc_msgSend(*(id *)(a1 + 48), "multiUserStatusController");
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v23, "didChangeHasActiveAccountState:", 0);

    objc_msgSend(*(id *)(a1 + 48), "_eraseLocalHomeConfigurationAfterSignOut");
    objc_msgSend(*(id *)(a1 + 48), "_postiCloudSigninState:", 0);
    objc_msgSend(*(id *)(a1 + 48), "setBackOffOperationInProgress:", 0);
    objc_msgSend(*(id *)(a1 + 48), "setCloudkitAccountStatusDetermined:", 0);
    v24 = +[HMDPersistentStore archiveCloudServerTokenData:](HMDPersistentStore, "archiveCloudServerTokenData:", 0);
    objc_msgSend(*(id *)(a1 + 48), "updatePowerAssertion");
  }
}

void __85__HMDHomeManager_processTransactionsFromHomeDataSync_accessories_version_completion___block_invoke(uint64_t a1, void *a2)
{
  id v3;
  id WeakRetained;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  id v11;
  NSObject *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  uint64_t v17;
  id v18;
  void *v19;
  uint8_t buf[4];
  void *v21;
  __int16 v22;
  void *v23;
  __int16 v24;
  void *v25;
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  v3 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  if (WeakRetained)
  {
    objc_msgSend(*(id *)(a1 + 32), "uuid");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(WeakRetained, "_homeWithUUID:", v5);
    v6 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(WeakRetained, "incomingInvitations");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "uuid");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "hmf_firstObjectWithValue:forKeyPath:", v8, CFSTR("homeUUID"));
    v9 = (void *)objc_claimAutoreleasedReturnValue();

    if (v9)
    {
      v10 = (void *)MEMORY[0x227676638]();
      v11 = WeakRetained;
      HMFGetOSLogHandle();
      v12 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v18 = v3;
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v6, "uuid");
        v14 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v14, "UUIDString");
        v19 = v10;
        v15 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v9, "describeWithFormat");
        v16 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543874;
        v21 = v13;
        v22 = 2112;
        v23 = v15;
        v24 = 2112;
        v25 = v16;
        _os_log_impl(&dword_2218F0000, v12, OS_LOG_TYPE_INFO, "%{public}@Found home with UUID %@ in invite %@, removing it since it was accepted", buf, 0x20u);

        v10 = v19;
        v3 = v18;
      }

      objc_autoreleasePoolPop(v10);
      objc_msgSend(v11, "_postIncomingInvitationStateChangedNotification:newInvitationState:", v9, 3);
      objc_msgSend(v11, "_removeIncomingInvitation:", v9);
    }

  }
  v17 = *(_QWORD *)(a1 + 48);
  if (v17)
    (*(void (**)(uint64_t, uint64_t, _QWORD, _QWORD))(v17 + 16))(v17, 1, *(_QWORD *)(a1 + 40), 0);

}

void __85__HMDHomeManager_processTransactionsFromHomeDataSync_accessories_version_completion___block_invoke_810(uint64_t a1, void *a2)
{
  id v3;
  id WeakRetained;
  void *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  _BYTE v24[128];
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v3 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 72));
  v5 = WeakRetained;
  if (v3)
  {
    v6 = *(_QWORD *)(a1 + 56);
    if (v6)
      (*(void (**)(uint64_t, _QWORD, _QWORD, id))(v6 + 16))(v6, 0, *(_QWORD *)(a1 + 32), v3);
  }
  else if (WeakRetained)
  {
    objc_msgSend(*(id *)(a1 + 40), "uuid");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "_homeWithUUID:", v7);
    v8 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v8, "sharedHomeUpdateHandler");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "pause");

    v19 = v8;
    objc_msgSend(v8, "backingStore");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    +[HMDBackingStoreTransactionOptions defaultIDSOptions](HMDBackingStoreTransactionOptions, "defaultIDSOptions");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "transaction:options:", CFSTR("kTransactionUpdate"), v11);
    v12 = (void *)objc_claimAutoreleasedReturnValue();

    v22 = 0u;
    v23 = 0u;
    v20 = 0u;
    v21 = 0u;
    v13 = *(id *)(a1 + 48);
    v14 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v20, v24, 16);
    if (v14)
    {
      v15 = v14;
      v16 = *(_QWORD *)v21;
      do
      {
        v17 = 0;
        do
        {
          if (*(_QWORD *)v21 != v16)
            objc_enumerationMutation(v13);
          v18 = *(_QWORD *)(*((_QWORD *)&v20 + 1) + 8 * v17);
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) == 0)
            objc_msgSend(v12, "add:withMessage:", v18, 0);
          ++v17;
        }
        while (v15 != v17);
        v15 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v20, v24, 16);
      }
      while (v15);
    }

    objc_msgSend(v12, "run:", *(_QWORD *)(a1 + 64));
  }

}

void __85__HMDHomeManager_processTransactionsFromHomeDataSync_accessories_version_completion___block_invoke_811(uint64_t a1, void *a2)
{
  id WeakRetained;
  uint64_t v4;
  uint64_t v5;
  id v6;

  v6 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 72));
  if (v6)
  {
    v4 = *(_QWORD *)(a1 + 48);
    if (v4)
      (*(void (**)(uint64_t, _QWORD, _QWORD, id))(v4 + 16))(v4, 0, *(_QWORD *)(a1 + 32), v6);
  }
  else if (WeakRetained)
  {
    if (objc_msgSend(*(id *)(a1 + 40), "count"))
      v5 = *(_QWORD *)(a1 + 64);
    else
      v5 = *(_QWORD *)(a1 + 56);
    (*(void (**)(uint64_t, _QWORD))(v5 + 16))(v5, 0);
  }

}

void __50__HMDHomeManager__processSharedHomeModel_message___block_invoke(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id WeakRetained;
  void *v10;
  void *v11;
  void *v12;
  id v13;
  void *v14;
  char v15;
  void *v16;
  void *v17;
  id v18;
  void *v19;
  uint64_t v20;
  void *v21;
  id v22;
  void *v23;
  void *v24;
  void (**v25)(_QWORD, _QWORD, _QWORD);
  void *v26;
  void *v27;
  void (**v28)(_QWORD, _QWORD, _QWORD);
  uint64_t v29;
  void *v30;
  _QWORD v31[4];
  id v32;
  id v33;
  id v34;
  char v35;
  const __CFString *v36;
  _QWORD v37[2];

  v37[1] = *MEMORY[0x24BDAC8D0];
  v7 = a3;
  v8 = a4;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  v10 = WeakRetained;
  if (!v8 && WeakRetained)
  {
    objc_msgSend(*(id *)(a1 + 32), "uuid");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "_homeWithUUID:", v11);
    v12 = (void *)objc_claimAutoreleasedReturnValue();

    if (v12)
    {
      v13 = v7;
      objc_msgSend(*(id *)(a1 + 40), "name");
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      v15 = objc_msgSend(v14, "isEqualToString:", CFSTR("kTransactionUpdate"));

      if ((v15 & 1) == 0)
      {
        objc_msgSend(*(id *)(a1 + 40), "destination");
        v16 = (void *)objc_claimAutoreleasedReturnValue();
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0)
          v17 = v16;
        else
          v17 = 0;
        v18 = v17;

        objc_msgSend(v18, "device");
        v19 = (void *)objc_claimAutoreleasedReturnValue();

        objc_msgSend(v19, "version");
        v20 = objc_claimAutoreleasedReturnValue();

        v13 = (id)v20;
      }
      objc_msgSend(v12, "sharedHomeUpdateHandler");
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      v31[0] = MEMORY[0x24BDAC760];
      v31[1] = 3221225472;
      v31[2] = __50__HMDHomeManager__processSharedHomeModel_message___block_invoke_2;
      v31[3] = &unk_24E796618;
      objc_copyWeak(&v34, (id *)(a1 + 56));
      v32 = *(id *)(a1 + 40);
      v35 = a2;
      v22 = v12;
      v33 = v22;
      objc_msgSend(v21, "receivedHomeDataFromSourceVersion:forceUpdateVersion:completion:", v13, a2, v31);

      objc_msgSend(v22, "presenceFeeder");
      v23 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v23, "homeDataProcessed");

      objc_destroyWeak(&v34);
    }

    goto LABEL_14;
  }
  if (!v8)
  {
LABEL_14:
    objc_msgSend(*(id *)(a1 + 40), "responseHandler");
    v26 = (void *)objc_claimAutoreleasedReturnValue();

    if (v26)
    {
      v36 = CFSTR("kDataSyncResponseAckKey");
      v37[0] = MEMORY[0x24BDBD1C8];
      objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v37, &v36, 1);
      v27 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(*(id *)(a1 + 40), "responseHandler");
      v28 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
      ((void (**)(_QWORD, _QWORD, void *))v28)[2](v28, 0, v27);

    }
    goto LABEL_16;
  }
  objc_msgSend(*(id *)(a1 + 40), "responseHandler");
  v24 = (void *)objc_claimAutoreleasedReturnValue();

  if (v24)
  {
    objc_msgSend(*(id *)(a1 + 40), "responseHandler");
    v25 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
    ((void (**)(_QWORD, id, _QWORD))v25)[2](v25, v8, 0);

  }
LABEL_16:
  v29 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
  v30 = *(void **)(v29 + 40);
  *(_QWORD *)(v29 + 40) = 0;

}

void __50__HMDHomeManager__processSharedHomeModel_message___block_invoke_2(uint64_t a1, int a2)
{
  id WeakRetained;
  void *v5;
  int v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  id v11;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  if (WeakRetained)
  {
    v11 = WeakRetained;
    objc_msgSend(*(id *)(a1 + 32), "name");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    if ((objc_msgSend(v5, "isEqualToString:", CFSTR("kTransactionUpdate")) & 1) == 0)
    {
      v6 = *(unsigned __int8 *)(a1 + 56);

      if (!v6 && !a2)
        goto LABEL_7;
      objc_msgSend(*(id *)(a1 + 40), "sharedHomeModel");
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v11, "backingStore");
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      +[HMDBackingStoreTransactionOptions defaultXPCOptions](HMDBackingStoreTransactionOptions, "defaultXPCOptions");
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v7, "transaction:options:", CFSTR("kTransactionIDSUpdate"), v8);
      v9 = (void *)objc_claimAutoreleasedReturnValue();

      objc_msgSend(v9, "add:withMessage:", v5, 0);
      objc_msgSend(v9, "save:", &__block_literal_global_805);

    }
LABEL_7:
    objc_msgSend(*(id *)(a1 + 40), "sharedHomeUpdateHandler");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "resume");

    WeakRetained = v11;
  }

}

void __55__HMDHomeManager_processSharedHomeModelUpdate_message___block_invoke(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  objc_msgSend(WeakRetained, "_processSharedHomeModel:message:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));

}

uint64_t __81__HMDHomeManager_fragmentationStream_didReceiveData_transactionIdentifier_error___block_invoke(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_fragmentationStream:didReceiveData:transactionIdentifier:error:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(unsigned __int16 *)(a1 + 64), *(_QWORD *)(a1 + 56));
}

uint64_t __56__HMDHomeManager_fragmentationStream_didCloseWithError___block_invoke(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_fragmentationStream:didCloseWithError:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
}

void __40__HMDHomeManager__removeAllUsersOfHome___block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  NSObject *v8;
  void *v9;
  void *v10;
  id WeakRetained;
  NSObject *v12;
  id v13;
  uint64_t v14;
  _QWORD v15[4];
  id v16;
  uint64_t v17;
  uint8_t buf[4];
  void *v19;
  __int16 v20;
  void *v21;
  __int16 v22;
  id v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v5 = a2;
  v6 = a3;
  v7 = (void *)MEMORY[0x227676638]();
  HMFGetOSLogHandle();
  v8 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 32), "home");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543874;
    v19 = v9;
    v20 = 2112;
    v21 = v10;
    v22 = 2112;
    v23 = v5;
    _os_log_impl(&dword_2218F0000, v8, OS_LOG_TYPE_INFO, "%{public}@Reset home for user %@ with error: %@", buf, 0x20u);

  }
  objc_autoreleasePoolPop(v7);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained && objc_msgSend(*(id *)(a1 + 32), "isRemoteGateway"))
  {
    objc_msgSend(WeakRetained, "workQueue");
    v12 = objc_claimAutoreleasedReturnValue();
    v15[0] = MEMORY[0x24BDAC760];
    v15[1] = 3221225472;
    v15[2] = __40__HMDHomeManager__removeAllUsersOfHome___block_invoke_789;
    v15[3] = &unk_24E79C268;
    v13 = WeakRetained;
    v14 = *(_QWORD *)(a1 + 32);
    v16 = v13;
    v17 = v14;
    dispatch_async(v12, v15);

  }
}

void __40__HMDHomeManager__removeAllUsersOfHome___block_invoke_789(uint64_t a1)
{
  void *v2;
  void *v3;
  id v4;

  v2 = *(void **)(a1 + 32);
  objc_msgSend(*(id *)(a1 + 40), "userID");
  v4 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 40), "home");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "_removeFromAssociatedPeers:home:", v4, v3);

}

void __90__HMDHomeManager__sendUserRemoved_fromHome_pairingUsername_pushToCloud_completionHandler___block_invoke(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  id WeakRetained;
  void *v11;
  id v12;
  NSObject *v13;
  void *v14;
  uint64_t v15;
  void *v16;
  NSObject *v17;
  void *v18;
  uint64_t v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  uint64_t v25;
  void *v26;
  void *v27;
  _QWORD v28[4];
  id v29;
  id v30;
  id v31;
  uint8_t buf[4];
  void *v33;
  __int16 v34;
  uint64_t v35;
  uint64_t v36;

  v36 = *MEMORY[0x24BDAC8D0];
  v7 = a2;
  v8 = a3;
  v9 = a4;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 64));
  if (WeakRetained)
  {
    if (v7)
    {
      v11 = (void *)MEMORY[0x227676638]();
      v12 = WeakRetained;
      HMFGetOSLogHandle();
      v13 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v14 = (void *)objc_claimAutoreleasedReturnValue();
        v15 = *(_QWORD *)(a1 + 32);
        *(_DWORD *)buf = 138543618;
        v33 = v14;
        v34 = 2112;
        v35 = v15;
        _os_log_impl(&dword_2218F0000, v13, OS_LOG_TYPE_INFO, "%{public}@Failed to elect device to send request to remove user from home: %@", buf, 0x16u);

      }
LABEL_14:

      objc_autoreleasePoolPop(v11);
      (*(void (**)(void))(*(_QWORD *)(a1 + 56) + 16))();
      goto LABEL_15;
    }
    if ((objc_msgSend(*(id *)(a1 + 32), "containsRemovedUser:", *(_QWORD *)(a1 + 40)) & 1) == 0)
    {
      v11 = (void *)MEMORY[0x227676638]();
      v12 = WeakRetained;
      HMFGetOSLogHandle();
      v13 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v24 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543362;
        v33 = v24;
        _os_log_impl(&dword_2218F0000, v13, OS_LOG_TYPE_INFO, "%{public}@Skipping send remove user message due to the user being removed from removed user list", buf, 0xCu);

      }
      goto LABEL_14;
    }
    objc_msgSend(WeakRetained, "messageDispatcher");
    v27 = (void *)objc_claimAutoreleasedReturnValue();
    v25 = *(_QWORD *)(a1 + 48);
    objc_msgSend(WeakRetained, "uuid");
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 40), "userID");
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "destination");
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(WeakRetained, "workQueue");
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    v28[0] = MEMORY[0x24BDAC760];
    v28[1] = 3221225472;
    v28[2] = __90__HMDHomeManager__sendUserRemoved_fromHome_pairingUsername_pushToCloud_completionHandler___block_invoke_786;
    v28[3] = &unk_24E796558;
    objc_copyWeak(&v31, (id *)(a1 + 64));
    v29 = *(id *)(a1 + 40);
    v30 = *(id *)(a1 + 56);
    objc_msgSend(v27, "sendSecureMessage:target:userID:destination:responseQueue:responseHandler:", v25, v26, v21, v22, v23, v28);

    objc_destroyWeak(&v31);
  }
  else
  {
    v16 = (void *)MEMORY[0x227676638]();
    HMFGetOSLogHandle();
    v17 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v33 = v18;
      _os_log_impl(&dword_2218F0000, v17, OS_LOG_TYPE_ERROR, "%{public}@Lost reference to home manager while electing a device to remove user", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v16);
    v19 = *(_QWORD *)(a1 + 56);
    if (v19)
    {
      objc_msgSend(MEMORY[0x24BDD1540], "hmfErrorWithCode:", 8);
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      (*(void (**)(uint64_t, void *, id))(v19 + 16))(v19, v20, v9);

    }
  }
LABEL_15:

}

void __90__HMDHomeManager__sendUserRemoved_fromHome_pairingUsername_pushToCloud_completionHandler___block_invoke_786(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id WeakRetained;
  void *v8;
  id v9;
  NSObject *v10;
  NSObject *v11;
  void *v12;
  const char *v13;
  NSObject *v14;
  os_log_type_t v15;
  void *v16;
  NSObject *v17;
  void *v18;
  void *v19;
  uint64_t v20;
  int v21;
  void *v22;
  __int16 v23;
  id v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v5 = a2;
  v6 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  if (WeakRetained)
  {
    v8 = (void *)MEMORY[0x227676638]();
    v9 = WeakRetained;
    HMFGetOSLogHandle();
    v10 = objc_claimAutoreleasedReturnValue();
    v11 = v10;
    if (v5)
    {
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v12 = (void *)objc_claimAutoreleasedReturnValue();
        v21 = 138543618;
        v22 = v12;
        v23 = 2112;
        v24 = v5;
        v13 = "%{public}@User removed message responded with error: %@";
        v14 = v11;
        v15 = OS_LOG_TYPE_ERROR;
LABEL_10:
        _os_log_impl(&dword_2218F0000, v14, v15, v13, (uint8_t *)&v21, 0x16u);

      }
    }
    else if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      v19 = *(void **)(a1 + 32);
      v21 = 138543618;
      v22 = v12;
      v23 = 2112;
      v24 = v19;
      v13 = "%{public}@Successfully removed user: %@";
      v14 = v11;
      v15 = OS_LOG_TYPE_INFO;
      goto LABEL_10;
    }

    objc_autoreleasePoolPop(v8);
    (*(void (**)(_QWORD, id, id, uint64_t))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), v5, v6, v20);
    goto LABEL_12;
  }
  v16 = (void *)MEMORY[0x227676638]();
  HMFGetOSLogHandle();
  v17 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
  {
    HMFGetLogIdentifier();
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    v21 = 138543362;
    v22 = v18;
    _os_log_impl(&dword_2218F0000, v17, OS_LOG_TYPE_ERROR, "%{public}@Lost reference to home manager while sending remove user message", (uint8_t *)&v21, 0xCu);

  }
  objc_autoreleasePoolPop(v16);
LABEL_12:

}

void __85__HMDHomeManager__postIncomingInvitationStateChangedNotification_newInvitationState___block_invoke(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  id *v7;
  id v8;

  +[HMCContext currentContext](HMCContext, "currentContext");
  v8 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "findHomeManagerWithError:", 0);
  v2 = objc_claimAutoreleasedReturnValue();
  if (v2)
  {
    v3 = (void *)v2;
    objc_msgSend(*(id *)(a1 + 32), "identifier");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "findIncomingInvitationsRelationWithModelID:", v4);
    v5 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(MEMORY[0x24BDD16E0], "numberWithInteger:", *(_QWORD *)(a1 + 40));
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "setInvitationState:", v6);

    objc_msgSend(v8, "save");
  }
  else
  {
    v7 = (id *)_HMFPreconditionFailure();
    __116__HMDHomeManager__trackIncomingInvitationFromAccount_mergeID_idsInvitationIdentifier_payload_invitationState_error___block_invoke(v7);
  }
}

void __116__HMDHomeManager__trackIncomingInvitationFromAccount_mergeID_idsInvitationIdentifier_payload_invitationState_error___block_invoke(id *a1)
{
  id WeakRetained;
  id v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  id v8;
  NSObject *v9;
  void *v10;
  void *v11;
  int v12;
  void *v13;
  __int16 v14;
  void *v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  WeakRetained = objc_loadWeakRetained(a1 + 5);
  if (WeakRetained)
  {
    v3 = objc_loadWeakRetained(a1 + 6);
    +[HMDBulletinBoard sharedBulletinBoard](HMDBulletinBoard, "sharedBulletinBoard");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "identifier");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "UUIDString");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "removeBulletinWithRecordID:", v6);

    objc_msgSend(WeakRetained, "_postIncomingInvitationStateChangedNotification:newInvitationState:", v3, objc_msgSend(v3, "invitationState"));
    v7 = (void *)MEMORY[0x227676638](objc_msgSend(a1[4], "_removeIncomingInvitation:", v3));
    v8 = a1[4];
    HMFGetOSLogHandle();
    v9 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(a1[4], "incomingInvitations");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      v12 = 138543618;
      v13 = v10;
      v14 = 2112;
      v15 = v11;
      _os_log_impl(&dword_2218F0000, v9, OS_LOG_TYPE_INFO, "%{public}@New incomingInvitations after expiration: %@", (uint8_t *)&v12, 0x16u);

    }
    objc_autoreleasePoolPop(v7);

  }
}

void __46__HMDHomeManager__handleDismissDialogRequest___block_invoke(uint64_t a1)
{
  void *v2;
  NSObject *v3;
  void *v4;
  uint64_t v5;
  int v6;
  void *v7;
  __int16 v8;
  uint64_t v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  v2 = (void *)MEMORY[0x227676638]();
  HMFGetOSLogHandle();
  v3 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    HMFGetLogIdentifier();
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    v5 = *(_QWORD *)(a1 + 32);
    v6 = 138543618;
    v7 = v4;
    v8 = 2112;
    v9 = v5;
    _os_log_impl(&dword_2218F0000, v3, OS_LOG_TYPE_DEFAULT, "%{public}@Dismissed dialog with context %@", (uint8_t *)&v6, 0x16u);

  }
  objc_autoreleasePoolPop(v2);
}

void __116__HMDHomeManager__handleAccessHomeInviteFromAccount_mergeID_idsInvitationIdentifier_payload_messageResponseHandler___block_invoke(id *a1, char a2)
{
  NSObject *v4;
  id v5;
  id v6;
  _QWORD block[4];
  id v8;
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;
  char v14;

  objc_msgSend(a1[4], "workQueue");
  v4 = objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x24BDAC760];
  block[1] = 3221225472;
  block[2] = __116__HMDHomeManager__handleAccessHomeInviteFromAccount_mergeID_idsInvitationIdentifier_payload_messageResponseHandler___block_invoke_2;
  block[3] = &unk_24E796508;
  v5 = a1[5];
  v14 = a2;
  v6 = a1[4];
  v8 = v5;
  v9 = v6;
  v13 = a1[9];
  v10 = a1[6];
  v11 = a1[7];
  v12 = a1[8];
  dispatch_async(v4, block);

}

void __116__HMDHomeManager__handleAccessHomeInviteFromAccount_mergeID_idsInvitationIdentifier_payload_messageResponseHandler___block_invoke_2(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  id v9;
  int v10;
  uint64_t v11;
  void *v12;
  id v13;
  NSObject *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  id v19;
  NSObject *v20;
  void *v21;
  void *v22;
  uint64_t v23;
  void *v24;
  id v25;
  void *v26;
  id v27;
  NSObject *v28;
  void *v29;
  id v30;
  uint8_t buf[4];
  void *v32;
  __int16 v33;
  void *v34;
  uint64_t v35;

  v35 = *MEMORY[0x24BDAC8D0];
  objc_msgSend(*(id *)(a1 + 32), "hmf_stringForKey:", CFSTR("kHomeName"));
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  if (*(_BYTE *)(a1 + 80) || (objc_msgSend(*(id *)(a1 + 40), "shouldAcceptInvitationWithHomeName:", v2) & 1) != 0)
  {
    v3 = *(_QWORD *)(a1 + 48);
    v4 = *(_QWORD *)(a1 + 56);
    v5 = *(_QWORD *)(a1 + 64);
    v7 = *(_QWORD *)(a1 + 32);
    v6 = *(void **)(a1 + 40);
    v30 = 0;
    objc_msgSend(v6, "_trackIncomingInvitationFromAccount:mergeID:idsInvitationIdentifier:payload:invitationState:error:", v3, v4, v5, v7, 2, &v30);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = v30;
    v10 = objc_msgSend(*(id *)(a1 + 32), "hmf_BOOLForKey:", CFSTR("HMDHomeSuppressInviteNotificationKey"));
    if (v9 && (v11 = *(_QWORD *)(a1 + 72)) != 0)
    {
      (*(void (**)(_QWORD, id, _QWORD))(v11 + 16))(*(_QWORD *)(a1 + 72), v9, 0);
    }
    else if (v8)
    {
      if (v10)
      {
        v12 = (void *)MEMORY[0x227676638]();
        v13 = *(id *)(a1 + 40);
        HMFGetOSLogHandle();
        v14 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
        {
          HMFGetLogIdentifier();
          v15 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543362;
          v32 = v15;
          _os_log_impl(&dword_2218F0000, v14, OS_LOG_TYPE_INFO, "%{public}@Suppressing home invite notification", buf, 0xCu);

        }
        objc_autoreleasePoolPop(v12);
        +[HMDHomeInviteLogEvent updateWithState:isFMFDevice:](HMDHomeInviteLogEvent, "updateWithState:isFMFDevice:", 3, isThisDeviceDesignatedFMFDevice());
        v16 = (void *)objc_claimAutoreleasedReturnValue();
        if (v16)
        {
          objc_msgSend(*(id *)(a1 + 40), "logEventSubmitter");
          v17 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v17, "submitLogEvent:", v16);

        }
      }
      else
      {
        +[HMDBulletinBoard sharedBulletinBoard](HMDBulletinBoard, "sharedBulletinBoard");
        v24 = (void *)objc_claimAutoreleasedReturnValue();
        v16 = v24;
        if (*(_BYTE *)(a1 + 80))
        {
          v25 = (id)objc_msgSend(v24, "insertBulletinForIncomingInvitation:", v8);
        }
        else
        {
          v26 = (void *)MEMORY[0x227676638]();
          v27 = *(id *)(a1 + 40);
          HMFGetOSLogHandle();
          v28 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v28, OS_LOG_TYPE_INFO))
          {
            HMFGetLogIdentifier();
            v29 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 138543362;
            v32 = v29;
            _os_log_impl(&dword_2218F0000, v28, OS_LOG_TYPE_INFO, "%{public}@Suppressing home invite notification because inviter is not a known person.", buf, 0xCu);

          }
          objc_autoreleasePoolPop(v26);
        }
        objc_msgSend(v16, "refreshHomeBadgeNumber");
      }

    }
    goto LABEL_25;
  }
  v18 = (void *)MEMORY[0x227676638]();
  v19 = *(id *)(a1 + 40);
  HMFGetOSLogHandle();
  v20 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
  {
    HMFGetLogIdentifier();
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543618;
    v32 = v21;
    v33 = 2112;
    v34 = v2;
    _os_log_impl(&dword_2218F0000, v20, OS_LOG_TYPE_ERROR, "%{public}@Cannot accept invitation payload due to invalid home name: %@", buf, 0x16u);

  }
  objc_autoreleasePoolPop(v18);
  +[HMDHomeInviteLogEvent updateWithState:isFMFDevice:](HMDHomeInviteLogEvent, "updateWithState:isFMFDevice:", 2, isThisDeviceDesignatedFMFDevice());
  v9 = (id)objc_claimAutoreleasedReturnValue();
  if (v9)
  {
    objc_msgSend(*(id *)(a1 + 40), "logEventSubmitter");
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v22, "submitLogEvent:", v9);

  }
  v23 = *(_QWORD *)(a1 + 72);
  if (v23)
  {
    objc_msgSend(MEMORY[0x24BDD1540], "hmErrorWithCode:", 3);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    (*(void (**)(uint64_t, void *, _QWORD))(v23 + 16))(v23, v8, 0);
LABEL_25:

  }
}

void __42__HMDHomeManager__handleAccessHomeInvite___block_invoke(uint64_t a1, int a2)
{
  void *v4;
  id v5;
  NSObject *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  int v12;
  void *v13;
  __int16 v14;
  uint64_t v15;
  __int16 v16;
  void *v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  v4 = (void *)MEMORY[0x227676638]();
  v5 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v6 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 40), "name");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v12 = 138543874;
    v13 = v7;
    v14 = 2160;
    v15 = 1752392040;
    v16 = 2112;
    v17 = v8;
    _os_log_impl(&dword_2218F0000, v6, OS_LOG_TYPE_INFO, "%{public}@Posting bulletin for incompatible HH1 invitation from %{mask.hash}@", (uint8_t *)&v12, 0x20u);

  }
  objc_autoreleasePoolPop(v4);
  +[HMDBulletinBoard sharedBulletinBoard](HMDBulletinBoard, "sharedBulletinBoard");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 40), "name");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  if (a2)
    v11 = *(_QWORD *)(a1 + 48);
  else
    v11 = 0;
  objc_msgSend(v9, "insertBulletinForIncompatibleInvitationFromInviterName:homeName:", v10, v11);

}

uint64_t __58__HMDHomeManager_processAnyPendingRequestsForRemoteAccess__block_invoke(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_processAnyPendingRequestsForRemoteAccess:", 0);
}

void __44__HMDHomeManager__startAccessoryFinderTimer__block_invoke(uint64_t a1)
{
  id WeakRetained;
  id v2;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v2 = WeakRetained;
    objc_msgSend(WeakRetained, "_startAccessoryFinderTimerExpired");
    WeakRetained = v2;
  }

}

void __46__HMDHomeManager_networkMonitorIsUnreachable___block_invoke(uint64_t a1)
{
  void *v2;
  int v3;

  objc_msgSend(*(id *)(a1 + 32), "reachabilityMonitor");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "isEqual:", *(_QWORD *)(a1 + 40));

  if (v3)
    objc_msgSend(*(id *)(a1 + 32), "_reachabilityMonitorChanged:", 0);
}

void __44__HMDHomeManager_networkMonitorIsReachable___block_invoke(uint64_t a1)
{
  void *v2;
  int v3;

  objc_msgSend(*(id *)(a1 + 32), "reachabilityMonitor");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "isEqual:", *(_QWORD *)(a1 + 40));

  if (v3)
    objc_msgSend(*(id *)(a1 + 32), "_reachabilityMonitorChanged:", 1);
}

void __42__HMDHomeManager_handleVendorInfoUpdated___block_invoke(uint64_t a1)
{
  void *v1;
  NSObject *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  NSObject *v8;
  void *v10;
  _QWORD block[6];
  _QWORD v12[4];
  NSObject *v13;
  _QWORD *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  _QWORD v19[3];
  char v20;
  _BYTE v21[128];
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  objc_msgSend(*(id *)(a1 + 32), "userInfo");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "hmf_arrayForKey:", CFSTR("ChangedManufacturer"));
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  if (v1)
  {
    v2 = dispatch_group_create();
    v19[0] = 0;
    v19[1] = v19;
    v19[2] = 0x2020000000;
    v20 = 0;
    v15 = 0u;
    v16 = 0u;
    v17 = 0u;
    v18 = 0u;
    objc_msgSend(*(id *)(a1 + 40), "homes");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v15, v21, 16);
    if (v4)
    {
      v5 = *(_QWORD *)v16;
      do
      {
        v6 = 0;
        do
        {
          if (*(_QWORD *)v16 != v5)
            objc_enumerationMutation(v3);
          v7 = *(void **)(*((_QWORD *)&v15 + 1) + 8 * v6);
          dispatch_group_enter(v2);
          v12[0] = MEMORY[0x24BDAC760];
          v12[1] = 3221225472;
          v12[2] = __42__HMDHomeManager_handleVendorInfoUpdated___block_invoke_2;
          v12[3] = &unk_24E7964B8;
          v14 = v19;
          v13 = v2;
          objc_msgSend(v7, "notifyClientOfVendorInfoUpdatedForManufacturers:withCompletion:", v1, v12);

          ++v6;
        }
        while (v4 != v6);
        v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v15, v21, 16);
      }
      while (v4);
    }

    objc_msgSend(*(id *)(a1 + 40), "workQueue");
    v8 = objc_claimAutoreleasedReturnValue();
    block[0] = MEMORY[0x24BDAC760];
    block[1] = 3221225472;
    block[2] = __42__HMDHomeManager_handleVendorInfoUpdated___block_invoke_3;
    block[3] = &unk_24E79B698;
    block[4] = *(_QWORD *)(a1 + 40);
    block[5] = v19;
    dispatch_group_notify(v2, v8, block);

    _Block_object_dispose(v19, 8);
  }

}

void __42__HMDHomeManager_handleVendorInfoUpdated___block_invoke_2(uint64_t a1, int a2)
{
  if (a2)
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 1;
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

void __42__HMDHomeManager_handleVendorInfoUpdated___block_invoke_3(uint64_t a1)
{
  void *v1;
  void *v2;
  id v3;

  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24))
  {
    v1 = *(void **)(a1 + 32);
    objc_msgSend(v1, "uuid");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "_updateGenerationCounterWithReason:sourceUUID:shouldNotifyClients:", CFSTR("VendorInfoUpdated"), v2, 0);

  }
  +[HMDBulletinBoard sharedBulletinBoard](HMDBulletinBoard, "sharedBulletinBoard");
  v3 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "refreshHomeBadgeNumber");

}

BOOL __50__HMDHomeManager__handleElectDeviceForIDSSession___block_invoke(uint64_t a1, uint64_t a2)
{
  void *v2;
  _BOOL8 v3;

  objc_msgSend(*(id *)(a1 + 32), "userForHome:", a2);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = v2 != 0;

  return v3;
}

void __53__HMDHomeManager__removeConfigurationVersionForHome___block_invoke(uint64_t a1)
{
  id v2;

  objc_msgSend(*(id *)(a1 + 32), "currentHomeConfigurations");
  v2 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "removeObjectForKey:", *(_QWORD *)(a1 + 40));

}

void __51__HMDHomeManager__updateHome_configurationVersion___block_invoke(uint64_t a1)
{
  void *v2;
  id v3;

  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithInteger:", *(_QWORD *)(a1 + 48));
  v3 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 32), "currentHomeConfigurations");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "setObject:forKeyedSubscript:", v3, *(_QWORD *)(a1 + 40));

}

void __55__HMDHomeManager_processCloudZoneModelRemoved_message___block_invoke(uint64_t a1, void *a2)
{
  id v3;
  id WeakRetained;
  void *v5;
  id v6;
  NSObject *v7;
  void *v8;
  int v9;
  void *v10;
  __int16 v11;
  id v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v3 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v5 = (void *)MEMORY[0x227676638]();
    v6 = WeakRetained;
    HMFGetOSLogHandle();
    v7 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      v9 = 138543618;
      v10 = v8;
      v11 = 2112;
      v12 = v3;
      _os_log_impl(&dword_2218F0000, v7, OS_LOG_TYPE_INFO, "%{public}@Update zone information in home manager with error %@", (uint8_t *)&v9, 0x16u);

    }
    objc_autoreleasePoolPop(v5);
  }

}

void __51__HMDHomeManager_processCloudZoneModelAdd_message___block_invoke(uint64_t a1, void *a2)
{
  id v3;
  id WeakRetained;
  void *v5;
  id v6;
  NSObject *v7;
  void *v8;
  int v9;
  void *v10;
  __int16 v11;
  id v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v3 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v5 = (void *)MEMORY[0x227676638]();
    v6 = WeakRetained;
    HMFGetOSLogHandle();
    v7 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      v9 = 138543618;
      v10 = v8;
      v11 = 2112;
      v12 = v3;
      _os_log_impl(&dword_2218F0000, v7, OS_LOG_TYPE_INFO, "%{public}@Update zone information in home manager with error %@", (uint8_t *)&v9, 0x16u);

    }
    objc_autoreleasePoolPop(v5);
  }

}

void __43__HMDHomeManager__handleRequestRemoveHome___block_invoke(uint64_t a1, int a2)
{
  void *v4;
  id v5;
  NSObject *v6;
  uint64_t v7;
  void *v8;
  const __CFString *v9;
  void *v10;
  void (**v11)(_QWORD, _QWORD, _QWORD);
  void *v12;
  uint64_t v13;
  void *v14;
  id v15;
  NSObject *v16;
  void *v17;
  const __CFString *v18;
  void (**v19)(_QWORD, _QWORD, _QWORD);
  void *v20;
  int v21;
  uint64_t v22;
  __int16 v23;
  const __CFString *v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v4 = (void *)MEMORY[0x227676638]();
  v5 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v6 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v7 = objc_claimAutoreleasedReturnValue();
    v8 = (void *)v7;
    v9 = CFSTR("delete home");
    if (a2)
      v9 = CFSTR("cancel");
    v21 = 138543618;
    v22 = v7;
    v23 = 2112;
    v24 = v9;
    _os_log_impl(&dword_2218F0000, v6, OS_LOG_TYPE_INFO, "%{public}@User selected %@", (uint8_t *)&v21, 0x16u);

  }
  objc_autoreleasePoolPop(v4);
  if ((a2 & 1) != 0)
  {
    objc_msgSend(*(id *)(a1 + 56), "responseHandler");
    v10 = (void *)objc_claimAutoreleasedReturnValue();

    if (!v10)
      return;
    objc_msgSend(*(id *)(a1 + 56), "responseHandler");
    v11 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD1540], "hmErrorWithCode:", 23);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    ((void (**)(_QWORD, void *, _QWORD))v11)[2](v11, v12, 0);

  }
  else
  {
    objc_msgSend(*(id *)(a1 + 32), "_homeWithUUID:", *(_QWORD *)(a1 + 40));
    v13 = objc_claimAutoreleasedReturnValue();
    if (v13)
    {
      v11 = (void (**)(_QWORD, _QWORD, _QWORD))v13;
      objc_msgSend(*(id *)(a1 + 32), "_handleRemoveHomeOperation:message:", *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56));
    }
    else
    {
      v14 = (void *)MEMORY[0x227676638]();
      v15 = *(id *)(a1 + 32);
      HMFGetOSLogHandle();
      v16 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        v18 = *(const __CFString **)(a1 + 40);
        v21 = 138543618;
        v22 = (uint64_t)v17;
        v23 = 2112;
        v24 = v18;
        _os_log_impl(&dword_2218F0000, v16, OS_LOG_TYPE_ERROR, "%{public}@Home Removal failed because no home found for %@", (uint8_t *)&v21, 0x16u);

      }
      objc_autoreleasePoolPop(v14);
      objc_msgSend(*(id *)(a1 + 56), "responseHandler");
      v11 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();

      if (v11)
      {
        objc_msgSend(*(id *)(a1 + 56), "responseHandler");
        v19 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
        objc_msgSend(MEMORY[0x24BDD1540], "hmErrorWithCode:", 2);
        v20 = (void *)objc_claimAutoreleasedReturnValue();
        ((void (**)(_QWORD, void *, _QWORD))v19)[2](v19, v20, 0);

        v11 = 0;
      }
    }
  }

}

void __55__HMDHomeManager__handleRemoveAllUsersFromAccessories___block_invoke(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  id v5;
  _QWORD v6[5];
  id v7;
  id v8;
  id v9;

  v3 = a2;
  dispatch_group_enter(*(dispatch_group_t *)(a1 + 32));
  v6[0] = MEMORY[0x24BDAC760];
  v6[1] = 3221225472;
  v6[2] = __55__HMDHomeManager__handleRemoveAllUsersFromAccessories___block_invoke_2;
  v6[3] = &unk_24E79A910;
  v4 = *(NSObject **)(a1 + 40);
  v6[4] = *(_QWORD *)(a1 + 48);
  v7 = v3;
  v8 = *(id *)(a1 + 56);
  v9 = *(id *)(a1 + 32);
  v5 = v3;
  dispatch_async(v4, v6);

}

uint64_t __55__HMDHomeManager__handleRemoveAllUsersFromAccessories___block_invoke_749(uint64_t a1)
{
  NSObject *v2;
  dispatch_time_t v3;
  void *v4;
  id v5;
  NSObject *v6;
  void *v7;
  int v9;
  void *v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  v2 = *(NSObject **)(a1 + 32);
  v3 = dispatch_time(0, 5000000000);
  if (dispatch_group_wait(v2, v3))
  {
    v4 = (void *)MEMORY[0x227676638]();
    v5 = *(id *)(a1 + 40);
    HMFGetOSLogHandle();
    v6 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      v9 = 138543362;
      v10 = v7;
      _os_log_impl(&dword_2218F0000, v6, OS_LOG_TYPE_ERROR, "%{public}@Timed out while waiting to remove the pairing from the accessories.", (uint8_t *)&v9, 0xCu);

    }
    objc_autoreleasePoolPop(v4);
  }
  return objc_msgSend(*(id *)(a1 + 48), "respondWithSuccess");
}

void __55__HMDHomeManager__handleRemoveAllUsersFromAccessories___block_invoke_2(uint64_t a1)
{
  void *v2;
  id v3;
  NSObject *v4;
  void *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  void *v12;
  _QWORD v13[4];
  id v14;
  uint64_t v15;
  id v16;
  uint8_t buf[4];
  void *v18;
  __int16 v19;
  uint64_t v20;
  __int16 v21;
  void *v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  v2 = (void *)MEMORY[0x227676638]();
  v3 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = *(_QWORD *)(a1 + 40);
    objc_msgSend(*(id *)(a1 + 48), "name");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543874;
    v18 = v5;
    v19 = 2112;
    v20 = v6;
    v21 = 2112;
    v22 = v7;
    _os_log_impl(&dword_2218F0000, v4, OS_LOG_TYPE_INFO, "%{public}@Going to remove all users and cloud data from accessory: %@ for home: %@", buf, 0x20u);

  }
  objc_autoreleasePoolPop(v2);
  v9 = *(_QWORD *)(a1 + 40);
  v8 = *(void **)(a1 + 48);
  v13[0] = MEMORY[0x24BDAC760];
  v13[1] = 3221225472;
  v13[2] = __55__HMDHomeManager__handleRemoveAllUsersFromAccessories___block_invoke_747;
  v13[3] = &unk_24E79BBD0;
  v10 = *(id *)(a1 + 56);
  v11 = *(_QWORD *)(a1 + 32);
  v12 = *(void **)(a1 + 40);
  v14 = v10;
  v15 = v11;
  v16 = v12;
  objc_msgSend(v8, "removeAllUsersAndCloudDataFromAccessory:completionHandler:", v9, v13);

}

void __55__HMDHomeManager__handleRemoveAllUsersFromAccessories___block_invoke_747(uint64_t a1)
{
  void *v2;
  id v3;
  NSObject *v4;
  void *v5;
  uint64_t v6;
  int v7;
  void *v8;
  __int16 v9;
  uint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
  v2 = (void *)MEMORY[0x227676638]();
  v3 = *(id *)(a1 + 40);
  HMFGetOSLogHandle();
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = *(_QWORD *)(a1 + 48);
    v7 = 138543618;
    v8 = v5;
    v9 = 2112;
    v10 = v6;
    _os_log_impl(&dword_2218F0000, v4, OS_LOG_TYPE_INFO, "%{public}@Finished removing all users from accessory: %@", (uint8_t *)&v7, 0x16u);

  }
  objc_autoreleasePoolPop(v2);
}

void __53__HMDHomeManager__handleRemoveHomeOperation_message___block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  id v8;
  NSObject *v9;
  void *v10;
  int v11;
  void *v12;
  __int16 v13;
  id v14;
  __int16 v15;
  id v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  v5 = a2;
  v6 = a3;
  v7 = (void *)MEMORY[0x227676638]();
  v8 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v9 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v11 = 138543874;
    v12 = v10;
    v13 = 2112;
    v14 = v6;
    v15 = 2112;
    v16 = v5;
    _os_log_impl(&dword_2218F0000, v9, OS_LOG_TYPE_INFO, "%{public}@Accessory pairing removal finished with : %@, error: %@", (uint8_t *)&v11, 0x20u);

  }
  objc_autoreleasePoolPop(v7);
  objc_msgSend(*(id *)(a1 + 32), "dmHandleRequestRemoveHome:", *(_QWORD *)(a1 + 40));

}

void __57__HMDHomeManager_scheduleRemovalForHome_message_options___block_invoke(uint64_t a1)
{
  id *v2;
  id WeakRetained;
  void *v4;
  void *v5;
  void *v6;
  _QWORD v7[4];
  id v8;
  id v9;
  id v10;

  v2 = (id *)(a1 + 80);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 80));
  if (WeakRetained)
  {
    objc_msgSend(*(id *)(a1 + 32), "deletedBackingStoreObject");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(WeakRetained, "backingStore");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "transaction:options:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
    v6 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v6, "add:withMessage:", v4, *(_QWORD *)(a1 + 56));
    v7[0] = MEMORY[0x24BDAC760];
    v7[1] = 3221225472;
    v7[2] = __57__HMDHomeManager_scheduleRemovalForHome_message_options___block_invoke_2;
    v7[3] = &unk_24E796418;
    objc_copyWeak(&v10, v2);
    v8 = *(id *)(a1 + 64);
    v9 = *(id *)(a1 + 72);
    objc_msgSend(v6, "run:", v7);

    objc_destroyWeak(&v10);
  }
  else
  {
    objc_msgSend(*(id *)(a1 + 72), "resume");
  }

}

void __57__HMDHomeManager_scheduleRemovalForHome_message_options___block_invoke_2(uint64_t a1, void *a2)
{
  id v3;
  id WeakRetained;
  void *v5;
  id v6;
  NSObject *v7;
  void *v8;
  uint64_t v9;
  int v10;
  void *v11;
  __int16 v12;
  uint64_t v13;
  __int16 v14;
  id v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  v3 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  v5 = (void *)MEMORY[0x227676638]();
  v6 = WeakRetained;
  HMFGetOSLogHandle();
  v7 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = *(_QWORD *)(a1 + 32);
    v10 = 138543874;
    v11 = v8;
    v12 = 2112;
    v13 = v9;
    v14 = 2112;
    v15 = v3;
    _os_log_impl(&dword_2218F0000, v7, OS_LOG_TYPE_INFO, "%{public}@Resume sync manager after finishing removing home %@ - error %@", (uint8_t *)&v10, 0x20u);

  }
  objc_autoreleasePoolPop(v5);
  objc_msgSend(*(id *)(a1 + 40), "resume");

}

void __87__HMDHomeManager__removeHome_withMessage_saveToStore_notifyUsers_shouldRemovePairings___block_invoke(uint64_t a1)
{
  void *v2;
  id v3;
  NSObject *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  char v10;
  NSObject *v11;
  void *v12;
  void *v13;
  uint64_t v14;
  void *v15;
  id v16;
  NSObject *v17;
  void *v18;
  void *v19;
  void *v20;
  int v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  int v28;
  void *v29;
  void *v30;
  id v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  id v39;
  NSObject *v40;
  void *v41;
  void *v42;
  void *v43;
  char v44;
  void *v45;
  void *v46;
  id v47;
  NSObject *v48;
  void *v49;
  void *v50;
  void *v51;
  void *v52;
  void *v53;
  _BOOL8 v54;
  void *v55;
  void *v56;
  void *v57;
  void *v58;
  void *v59;
  id v60;
  NSObject *v61;
  void *v62;
  void *v63;
  uint64_t v64;
  void *v65;
  void *v66;
  void *v67;
  void *v68;
  void *v69;
  void *v70;
  void *v71;
  void *v72;
  id v73;
  NSObject *v74;
  void *v75;
  void *v76;
  uint64_t v77;
  uint64_t v78;
  void (*v79)(uint64_t);
  void *v80;
  uint64_t v81;
  id v82;
  const __CFString *v83;
  uint64_t v84;
  uint8_t buf[4];
  void *v86;
  __int16 v87;
  void *v88;
  uint64_t v89;

  v89 = *MEMORY[0x24BDAC8D0];
  v2 = (void *)MEMORY[0x227676638]();
  v3 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 40), "name");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543618;
    v86 = v5;
    v87 = 2112;
    v88 = v6;
    _os_log_impl(&dword_2218F0000, v4, OS_LOG_TYPE_INFO, "%{public}@Removing home %@", buf, 0x16u);

  }
  objc_autoreleasePoolPop(v2);
  +[HMDBulletinBoard sharedBulletinBoard](HMDBulletinBoard, "sharedBulletinBoard");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "removeBulletinsForHome:", *(_QWORD *)(a1 + 40));
  if (*(_BYTE *)(a1 + 72))
    objc_msgSend(*(id *)(a1 + 32), "_removeAllUsersOfHome:", *(_QWORD *)(a1 + 40));
  objc_msgSend(*(id *)(a1 + 40), "unconfigure");
  objc_msgSend(*(id *)(a1 + 32), "removeHome:", *(_QWORD *)(a1 + 40));
  objc_msgSend(*(id *)(a1 + 32), "pendingHomesBeingRemoved");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "removeObject:", *(_QWORD *)(a1 + 48));

  objc_msgSend(*(id *)(a1 + 40), "stopThreadNetwork:", 0);
  if (objc_msgSend(*(id *)(a1 + 40), "isOwnerUser"))
  {
    objc_msgSend(*(id *)(a1 + 32), "homes");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v10 = objc_msgSend(v9, "na_any:", &__block_literal_global_745);

    if ((v10 & 1) == 0)
    {
      objc_msgSend(*(id *)(a1 + 32), "workQueue");
      v11 = objc_claimAutoreleasedReturnValue();
      v77 = MEMORY[0x24BDAC760];
      v78 = 3221225472;
      v79 = __87__HMDHomeManager__removeHome_withMessage_saveToStore_notifyUsers_shouldRemovePairings___block_invoke_2;
      v80 = &unk_24E79C268;
      v12 = *(void **)(a1 + 40);
      v81 = *(_QWORD *)(a1 + 32);
      v82 = v12;
      dispatch_async(v11, &v77);

    }
  }
  objc_msgSend(*(id *)(a1 + 32), "homes", v77, v78, v79, v80, v81);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  v14 = objc_msgSend(v13, "count");

  if (!v14)
  {
    v15 = (void *)MEMORY[0x227676638]();
    v16 = *(id *)(a1 + 32);
    HMFGetOSLogHandle();
    v17 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v86 = v18;
      _os_log_impl(&dword_2218F0000, v17, OS_LOG_TYPE_INFO, "%{public}@setting home configuration to NO", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v15);
    objc_msgSend(*(id *)(a1 + 32), "updateHomeKitInUsePreferences");
  }
  objc_msgSend(*(id *)(a1 + 40), "uuid");
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 32), "primaryHomeUUID");
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  v21 = objc_msgSend(v19, "isEqual:", v20);

  if (v21)
  {
    objc_msgSend(*(id *)(a1 + 32), "homes");
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v22, "firstObject");
    v23 = (void *)objc_claimAutoreleasedReturnValue();

    v24 = *(void **)(a1 + 32);
    objc_msgSend(v23, "uuid");
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v24, "_changePrimaryHome:", v25);

  }
  objc_msgSend(*(id *)(a1 + 40), "uuid");
  v26 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 32), "currentHomeUUID");
  v27 = (void *)objc_claimAutoreleasedReturnValue();
  v28 = objc_msgSend(v26, "isEqual:", v27);

  if (v28)
  {
    objc_msgSend(*(id *)(a1 + 32), "setLastCurrentHomeUUID:", 0);
    objc_msgSend(*(id *)(a1 + 32), "_updateCurrentHomeIfNecessary");
  }
  objc_msgSend(*(id *)(a1 + 32), "nameValidator");
  v29 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 40), "uuid");
  v30 = (void *)objc_claimAutoreleasedReturnValue();
  v31 = (id)objc_msgSend(v29, "removeNamespace:", v30);

  v32 = *(void **)(a1 + 32);
  objc_msgSend(*(id *)(a1 + 40), "uuid");
  v33 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v32, "_removeConfigurationVersionForHome:", v33);

  v34 = *(void **)(a1 + 32);
  objc_msgSend(*(id *)(a1 + 40), "name");
  v35 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 32), "uuid");
  v36 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v34, "removeName:namespace:", v35, v36);
  v37 = (void *)objc_claimAutoreleasedReturnValue();

  if (v37)
  {
    v38 = (void *)MEMORY[0x227676638]();
    v39 = *(id *)(a1 + 32);
    HMFGetOSLogHandle();
    v40 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v40, OS_LOG_TYPE_DEFAULT))
    {
      HMFGetLogIdentifier();
      v41 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(*(id *)(a1 + 40), "name");
      v42 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v86 = v41;
      v87 = 2112;
      v88 = v42;
      _os_log_impl(&dword_2218F0000, v40, OS_LOG_TYPE_DEFAULT, "%{public}@Failed to remove home name '%@' from homeManager namespace", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v38);
  }
  if ((objc_msgSend(*(id *)(a1 + 40), "isOwnerUser") & 1) == 0)
  {
    isWatch();
    objc_msgSend(*(id *)(a1 + 32), "uuidsOfRemovedHomes");
    v43 = (void *)objc_claimAutoreleasedReturnValue();
    v44 = objc_msgSend(v43, "containsObject:", *(_QWORD *)(a1 + 48));

    if ((v44 & 1) == 0)
    {
      objc_msgSend(*(id *)(a1 + 32), "uuidsOfRemovedHomes");
      v45 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v45, "addObject:", *(_QWORD *)(a1 + 48));

      v46 = (void *)MEMORY[0x227676638]();
      v47 = *(id *)(a1 + 32);
      HMFGetOSLogHandle();
      v48 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v48, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v49 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(*(id *)(a1 + 48), "UUIDString");
        v50 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        v86 = v49;
        v87 = 2112;
        v88 = v50;
        _os_log_impl(&dword_2218F0000, v48, OS_LOG_TYPE_INFO, "%{public}@Adding home with UUID %@ to the uuids of guest homes removed locally", buf, 0x16u);

      }
      objc_autoreleasePoolPop(v46);
    }
    objc_msgSend(*(id *)(a1 + 32), "_trackRemovedHomeUserMergeId:", *(_QWORD *)(a1 + 56));
  }
  if (*(_BYTE *)(a1 + 73))
  {
    v51 = *(void **)(a1 + 32);
    objc_msgSend(*(id *)(a1 + 64), "name");
    v52 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v51, "assistantSyncDataChanged:", v52);

  }
  objc_msgSend(*(id *)(a1 + 64), "transactionResult");
  v53 = (void *)objc_claimAutoreleasedReturnValue();
  v54 = objc_msgSend(v53, "source") == 1;
  v55 = *(void **)(a1 + 32);
  objc_msgSend(*(id *)(a1 + 40), "zoneID");
  v56 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v55, "_removeCloudZone:updateHomeManager:", v56, v54);

  objc_msgSend(*(id *)(a1 + 32), "compositeSettingsControllerManager");
  v57 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 40), "uuid");
  v58 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v57, "removeHomeZone:", v58);

  v59 = (void *)MEMORY[0x227676638]();
  v60 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v61 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v61, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v62 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 40), "name");
    v63 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543618;
    v86 = v62;
    v87 = 2112;
    v88 = v63;
    _os_log_impl(&dword_2218F0000, v61, OS_LOG_TYPE_INFO, "%{public}@Removed home: %@", buf, 0x16u);

  }
  objc_autoreleasePoolPop(v59);
  objc_msgSend(*(id *)(a1 + 64), "respondWithSuccess");
  v64 = *(_QWORD *)(a1 + 40);
  v83 = CFSTR("HMDHomeNotificationKey");
  v84 = v64;
  objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", &v84, &v83, 1);
  v65 = (void *)objc_claimAutoreleasedReturnValue();
  logAndPostNotification(CFSTR("HMDHomeRemovedNotification"), *(void **)(a1 + 32), v65);
  objc_msgSend(*(id *)(a1 + 40), "handleHomeWasRemoved");
  objc_msgSend(*(id *)(a1 + 32), "lastEventStoreController");
  v66 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 40), "uuid");
  v67 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v66, "didRemoveHome:", v67);

  if ((objc_msgSend(*(id *)(a1 + 40), "isOwnerUser") & 1) == 0)
  {
    objc_msgSend(*(id *)(a1 + 32), "homeSharedUserCloudShareManager");
    v68 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 40), "uuid");
    v69 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v68, "removeShareForSharedUserDataWithHomeModelID:", v69);

    objc_msgSend(*(id *)(a1 + 32), "homeSharedUserCloudShareManager");
    v70 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 40), "uuid");
    v71 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v70, "leaveShareWithSharedHomeModelID:", v71);

  }
  v72 = (void *)MEMORY[0x227676638]();
  v73 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v74 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v74, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v75 = (void *)objc_claimAutoreleasedReturnValue();
    v76 = *(void **)(a1 + 40);
    *(_DWORD *)buf = 138543618;
    v86 = v75;
    v87 = 2112;
    v88 = v76;
    _os_log_impl(&dword_2218F0000, v74, OS_LOG_TYPE_INFO, "%{public}@The home should be gone : %@", buf, 0x16u);

  }
  objc_autoreleasePoolPop(v72);

}

void __87__HMDHomeManager__removeHome_withMessage_saveToStore_notifyUsers_shouldRemovePairings___block_invoke_2(uint64_t a1)
{
  void *v2;
  _QWORD aBlock[5];

  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 3221225472;
  aBlock[2] = __87__HMDHomeManager__removeHome_withMessage_saveToStore_notifyUsers_shouldRemovePairings___block_invoke_3;
  aBlock[3] = &unk_24E79BD80;
  aBlock[4] = *(_QWORD *)(a1 + 32);
  v2 = _Block_copy(aBlock);
  objc_msgSend(*(id *)(a1 + 40), "removeThreadNetworkPreferredNetworkWithCompletion:", v2);

}

void __87__HMDHomeManager__removeHome_withMessage_saveToStore_notifyUsers_shouldRemovePairings___block_invoke_3(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  NSObject *v6;
  void *v7;
  int v8;
  void *v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  v3 = a2;
  if (v3)
  {
    v4 = (void *)MEMORY[0x227676638]();
    v5 = *(id *)(a1 + 32);
    HMFGetOSLogHandle();
    v6 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      v8 = 138543362;
      v9 = v7;
      _os_log_impl(&dword_2218F0000, v6, OS_LOG_TYPE_ERROR, "%{public}@Failed to delete preferred Thread network credentials - continuing anyways", (uint8_t *)&v8, 0xCu);

    }
    objc_autoreleasePoolPop(v4);
  }

}

uint64_t __87__HMDHomeManager__removeHome_withMessage_saveToStore_notifyUsers_shouldRemovePairings___block_invoke_744(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "isOwnerUser");
}

uint64_t __43__HMDHomeManager___nominateCurrentHomeUUID__block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  uint64_t v9;

  v4 = a3;
  objc_msgSend(a2, "uuid");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "UUIDString");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "uuid");
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v7, "UUIDString");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = objc_msgSend(v6, "compare:", v8);

  return v9;
}

BOOL __90__HMDHomeManager__handleFetchCurrentUserPairingIdentityForHomeContainingAccessoryRequest___block_invoke(uint64_t a1, void *a2)
{
  void *v2;
  _BOOL8 v3;

  objc_msgSend(a2, "accessoryWithSPIClientIdentifier:", *(_QWORD *)(a1 + 32));
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = v2 != 0;

  return v3;
}

void __48__HMDHomeManager__handlePairingIdentityRequest___block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  id v7;
  _QWORD v8[4];
  id v9;

  objc_msgSend(*(id *)(a1 + 32), "homes");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "na_flatMap:", &__block_literal_global_719);
  v7 = (id)objc_claimAutoreleasedReturnValue();

  v8[0] = MEMORY[0x24BDAC760];
  v8[1] = 3221225472;
  v8[2] = __48__HMDHomeManager__handlePairingIdentityRequest___block_invoke_3;
  v8[3] = &unk_24E796368;
  v9 = *(id *)(a1 + 40);
  objc_msgSend(v7, "na_firstObjectPassingTest:", v8);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "pairingIdentity");
  v4 = objc_claimAutoreleasedReturnValue();
  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
  v6 = *(void **)(v5 + 40);
  *(_QWORD *)(v5 + 40) = v4;

}

uint64_t __48__HMDHomeManager__handlePairingIdentityRequest___block_invoke_3(uint64_t a1, void *a2)
{
  void *v2;
  void *v3;
  uint64_t v4;

  objc_msgSend(a2, "pairingIdentity");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "identifier");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = HMFAreStringsEqualIgnoringCase();

  return v4;
}

id __48__HMDHomeManager__handlePairingIdentityRequest___block_invoke_2(uint64_t a1, void *a2)
{
  void *v2;
  void *v3;
  void *v4;

  objc_msgSend(a2, "uuid");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  +[HMCContext findHomeWithModelID:](HMCContext, "findHomeWithModelID:", v2);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "residents");
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  return v4;
}

uint64_t __58__HMDHomeManager_hasClientRequestedMediaAccessoryControl___block_invoke(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "isApplicationBundleIDSubscribedToAppleMediaAccessoryState:", *(_QWORD *)(a1 + 32));
}

void __51__HMDHomeManager__handleRequestRuntimeStateUpdate___block_invoke(uint64_t a1, void *a2)
{
  void *v3;
  void (**v4)(_QWORD, _QWORD, _QWORD);
  id v5;

  v5 = a2;
  objc_msgSend(*(id *)(a1 + 32), "responseHandler");
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  if (v3)
  {
    objc_msgSend(*(id *)(a1 + 32), "responseHandler");
    v4 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
    ((void (**)(_QWORD, _QWORD, id))v4)[2](v4, 0, v5);

  }
}

void __135__HMDHomeManager__getRuntimeStateUpdateForHomeManager_includeMediaAccessorySessionState_options_includeResidentDeviceState_completion___block_invoke(id *a1, void *a2)
{
  id v3;
  id WeakRetained;
  void *v5;
  NSObject *v6;
  _QWORD v7[4];
  id v8;
  id v9;
  id v10;
  id v11;

  v3 = a2;
  WeakRetained = objc_loadWeakRetained(a1 + 7);
  v5 = WeakRetained;
  if (WeakRetained)
  {
    objc_msgSend(WeakRetained, "workQueue");
    v6 = objc_claimAutoreleasedReturnValue();
    v7[0] = MEMORY[0x24BDAC760];
    v7[1] = 3221225472;
    v7[2] = __135__HMDHomeManager__getRuntimeStateUpdateForHomeManager_includeMediaAccessorySessionState_options_includeResidentDeviceState_completion___block_invoke_2;
    v7[3] = &unk_24E79A910;
    v8 = v3;
    v9 = a1[4];
    v10 = a1[5];
    v11 = a1[6];
    dispatch_async(v6, v7);

  }
}

void __135__HMDHomeManager__getRuntimeStateUpdateForHomeManager_includeMediaAccessorySessionState_options_includeResidentDeviceState_completion___block_invoke_3(uint64_t a1)
{
  void *v2;
  void *v3;
  uint64_t v4;
  id v5;

  if (*(_BYTE *)(a1 + 56))
  {
    v2 = *(void **)(a1 + 32);
    objc_msgSend(*(id *)(a1 + 40), "_runtimeState");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "addEntriesFromDictionary:", v3);

  }
  v4 = *(_QWORD *)(a1 + 48);
  v5 = (id)objc_msgSend(*(id *)(a1 + 32), "copy");
  (*(void (**)(uint64_t, id))(v4 + 16))(v4, v5);

}

void __135__HMDHomeManager__getRuntimeStateUpdateForHomeManager_includeMediaAccessorySessionState_options_includeResidentDeviceState_completion___block_invoke_2(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 32);
  if (v2)
    objc_msgSend(*(id *)(a1 + 40), "setObject:forKey:", v2, *(_QWORD *)(a1 + 48));
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 56));
}

void __56__HMDHomeManager___handleRequestFetchHomeConfiguration___block_invoke(uint64_t a1)
{
  void *v2;
  id v3;
  NSObject *v4;
  void *v5;
  int v6;
  int v7;
  void *v8;
  __int16 v9;
  int v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  v2 = (void *)MEMORY[0x227676638]();
  v3 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = objc_msgSend(*(id *)(a1 + 40), "BOOLValue");
    v7 = 138543618;
    v8 = v5;
    v9 = 1024;
    v10 = v6;
    _os_log_impl(&dword_2218F0000, v4, OS_LOG_TYPE_INFO, "%{public}@hh2ManualMigrationAvailableOverride detected. Setting to %d", (uint8_t *)&v7, 0x12u);

  }
  objc_autoreleasePoolPop(v2);
}

BOOL __44__HMDHomeManager_filterHomes_isSPIEntitled___block_invoke(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  id v6;
  NSObject *v7;
  void *v8;
  int v10;
  void *v11;
  __int16 v12;
  id v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  v3 = a2;
  objc_msgSend(v3, "currentUser");
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v4)
  {
    v5 = (void *)MEMORY[0x227676638]();
    v6 = *(id *)(a1 + 32);
    HMFGetOSLogHandle();
    v7 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      v10 = 138543618;
      v11 = v8;
      v12 = 2112;
      v13 = v3;
      _os_log_impl(&dword_2218F0000, v7, OS_LOG_TYPE_INFO, "%{public}@There is no current user for : %@", (uint8_t *)&v10, 0x16u);

    }
    objc_autoreleasePoolPop(v5);
  }

  return v4 != 0;
}

uint64_t __44__HMDHomeManager_filterHomes_isSPIEntitled___block_invoke_704(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "isAccessToHomeAllowed");
}

void __45__HMDHomeManager_homesToSendForNonSPIClients__block_invoke(uint64_t a1, void *a2)
{
  id v3;

  v3 = a2;
  if (objc_msgSend(v3, "isAccessToHomeAllowed"))
    objc_msgSend(*(id *)(a1 + 32), "addObject:", v3);

}

void __60__HMDHomeManager__notifyMetricsManagerOfConfigurationChange__block_invoke(uint64_t a1)
{
  id WeakRetained;
  void *v3;
  id v4;
  NSObject *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  id v11;
  NSObject *v12;
  void *v13;
  void *v14;
  void *v15;
  int v16;
  void *v17;
  __int16 v18;
  void *v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v3 = (void *)MEMORY[0x227676638]();
  v4 = WeakRetained;
  HMFGetOSLogHandle();
  v5 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 32), "identifier");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "shortDescription");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v16 = 138543618;
    v17 = v6;
    v18 = 2114;
    v19 = v8;
    _os_log_impl(&dword_2218F0000, v5, OS_LOG_TYPE_INFO, "%{public}@[%{public}@] Starting generation of home configuration log event for analytics", (uint8_t *)&v16, 0x16u);

  }
  objc_autoreleasePoolPop(v3);
  objc_msgSend(v4, "metricsManager");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "homeKitConfigurationChanged");

  v10 = (void *)MEMORY[0x227676638]();
  v11 = v4;
  HMFGetOSLogHandle();
  v12 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 32), "identifier");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v14, "shortDescription");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    v16 = 138543618;
    v17 = v13;
    v18 = 2114;
    v19 = v15;
    _os_log_impl(&dword_2218F0000, v12, OS_LOG_TYPE_INFO, "%{public}@[%{public}@] Finished generation of home configuration log event for analytics", (uint8_t *)&v16, 0x16u);

  }
  objc_autoreleasePoolPop(v10);

}

void __50__HMDHomeManager__resumeXPCWithCompletionHanlder___block_invoke(uint64_t a1, void *a2)
{
  id v3;
  id WeakRetained;
  void *v5;
  NSObject *v6;
  _QWORD v7[4];
  id v8;
  id v9;

  v3 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v5 = WeakRetained;
  if (WeakRetained && *(_QWORD *)(a1 + 32))
  {
    objc_msgSend(WeakRetained, "workQueue");
    v6 = objc_claimAutoreleasedReturnValue();
    v7[0] = MEMORY[0x24BDAC760];
    v7[1] = 3221225472;
    v7[2] = __50__HMDHomeManager__resumeXPCWithCompletionHanlder___block_invoke_2;
    v7[3] = &unk_24E79C2B8;
    v9 = *(id *)(a1 + 32);
    v8 = v3;
    dispatch_async(v6, v7);

  }
}

uint64_t __50__HMDHomeManager__resumeXPCWithCompletionHanlder___block_invoke_2(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32));
}

void __51__HMDHomeManager__suspendXPCWithCompletionHanlder___block_invoke(uint64_t a1, void *a2)
{
  id v3;
  id WeakRetained;
  void *v5;
  NSObject *v6;
  _QWORD v7[4];
  id v8;
  id v9;

  v3 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v5 = WeakRetained;
  if (WeakRetained && *(_QWORD *)(a1 + 32))
  {
    objc_msgSend(WeakRetained, "workQueue");
    v6 = objc_claimAutoreleasedReturnValue();
    v7[0] = MEMORY[0x24BDAC760];
    v7[1] = 3221225472;
    v7[2] = __51__HMDHomeManager__suspendXPCWithCompletionHanlder___block_invoke_2;
    v7[3] = &unk_24E79C2B8;
    v9 = *(id *)(a1 + 32);
    v8 = v3;
    dispatch_async(v6, v7);

  }
}

uint64_t __51__HMDHomeManager__suspendXPCWithCompletionHanlder___block_invoke_2(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32));
}

void __58__HMDHomeManager__configureHomes_uncommittedTransactions___block_invoke(uint64_t a1)
{
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

uint64_t __74__HMDHomeManager_accessoriesAreLocallyReachableOnTransientDevice_forHome___block_invoke(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_accessoriesAreLocallyReachableOnTransientDevice:forHome:", *(unsigned __int8 *)(a1 + 48), *(_QWORD *)(a1 + 40));
}

- (void)_postPreferencesChangedNotification
{
  void *v2;
  id v3;
  NSObject *v4;
  void *v5;
  void *v6;
  int v7;
  void *v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  if (a1)
  {
    v2 = (void *)MEMORY[0x227676638]();
    v3 = a1;
    HMFGetOSLogHandle();
    v4 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      HMFGetLogIdentifier();
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      v7 = 138543362;
      v8 = v5;
      _os_log_impl(&dword_2218F0000, v4, OS_LOG_TYPE_DEFAULT, "%{public}@Posting preferences changed notification", (uint8_t *)&v7, 0xCu);

    }
    objc_autoreleasePoolPop(v2);
    objc_msgSend(v3, "darwinNotificationProvider");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "notifyPost:", *MEMORY[0x24BDD60A8]);

  }
}

void __50__HMDHomeManager_setHomePodsPresent_inOwnedHomes___block_invoke(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  NSObject *v6;
  NSObject *v7;
  void *v8;
  void *v9;
  const char *v10;
  NSObject *v11;
  os_log_type_t v12;
  uint32_t v13;
  int v14;
  void *v15;
  __int16 v16;
  void *v17;
  __int16 v18;
  id v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  v3 = a2;
  v4 = (void *)MEMORY[0x227676638]();
  v5 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v6 = objc_claimAutoreleasedReturnValue();
  v7 = v6;
  if (v3)
  {
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      IXStringForAppRemovability();
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      v14 = 138543874;
      v15 = v8;
      v16 = 2112;
      v17 = v9;
      v18 = 2112;
      v19 = v3;
      v10 = "%{public}@Failed to set Home app removability to %@: %@";
      v11 = v7;
      v12 = OS_LOG_TYPE_ERROR;
      v13 = 32;
LABEL_6:
      _os_log_impl(&dword_2218F0000, v11, v12, v10, (uint8_t *)&v14, v13);

    }
  }
  else if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    IXStringForAppRemovability();
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v14 = 138543618;
    v15 = v8;
    v16 = 2112;
    v17 = v9;
    v10 = "%{public}@Successfully set Home app removability to %@";
    v11 = v7;
    v12 = OS_LOG_TYPE_INFO;
    v13 = 22;
    goto LABEL_6;
  }

  objc_autoreleasePoolPop(v4);
}

uint64_t __47__HMDHomeManager__homeWithAssistantIdentifier___block_invoke(uint64_t a1, void *a2)
{
  void *v3;
  uint64_t v4;

  objc_msgSend(a2, "urlString");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "isEqual:", *(_QWORD *)(a1 + 32));

  return v4;
}

uint64_t __68__HMDHomeManager__homeWithUniqueIdentifier_forClientIdentifierSalt___block_invoke(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  void *v5;
  uint64_t v6;

  v3 = (void *)MEMORY[0x24BDD1880];
  objc_msgSend(a2, "uuid");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "hm_deriveUUIDFromBaseUUID:identifierSalt:", v4, *(_QWORD *)(a1 + 32));
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  v6 = objc_msgSend(v5, "isEqual:", *(_QWORD *)(a1 + 40));
  return v6;
}

uint64_t __32__HMDHomeManager__homeWithUUID___block_invoke(uint64_t a1, void *a2)
{
  void *v3;
  uint64_t v4;

  objc_msgSend(a2, "uuid");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "isEqual:", *(_QWORD *)(a1 + 32));

  return v4;
}

uint64_t __33__HMDHomeManager__homesWithName___block_invoke(uint64_t a1, void *a2)
{
  void *v3;
  uint64_t v4;

  objc_msgSend(a2, "name");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "isEqual:", *(_QWORD *)(a1 + 32));

  return v4;
}

uint64_t __32__HMDHomeManager__homeWithName___block_invoke(uint64_t a1, void *a2)
{
  void *v3;
  uint64_t v4;

  objc_msgSend(a2, "name");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "isEqual:", *(_QWORD *)(a1 + 32));

  return v4;
}

void __82__HMDHomeManager_sendUnsecureMessage_target_userID_responseQueue_responseHandler___block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  NSObject *v7;
  void *v8;
  _QWORD block[4];
  id v10;
  id v11;
  id v12;

  v5 = a2;
  v6 = a3;
  v7 = *(NSObject **)(a1 + 32);
  if (v7)
  {
    v8 = *(void **)(a1 + 40);
    if (v8)
    {
      block[0] = MEMORY[0x24BDAC760];
      block[1] = 3221225472;
      block[2] = __82__HMDHomeManager_sendUnsecureMessage_target_userID_responseQueue_responseHandler___block_invoke_2;
      block[3] = &unk_24E79B440;
      v12 = v8;
      v10 = v5;
      v11 = v6;
      dispatch_async(v7, block);

    }
  }

}

uint64_t __82__HMDHomeManager_sendUnsecureMessage_target_userID_responseQueue_responseHandler___block_invoke_2(_QWORD *a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(a1[6] + 16))(a1[6], a1[4], a1[5]);
}

void __89__HMDHomeManager_sendUserRemoved_fromHome_pairingUsername_pushToCloud_completionHandler___block_invoke(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 64));
  objc_msgSend(WeakRetained, "_sendUserRemoved:fromHome:pairingUsername:pushToCloud:completionHandler:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(unsigned __int8 *)(a1 + 72), *(_QWORD *)(a1 + 56));

}

void __51__HMDHomeManager_sendUserAdded_destination_toHome___block_invoke(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  objc_msgSend(WeakRetained, "_sendUserAdded:destination:toHome:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));

}

uint64_t __83__HMDHomeManager_updateGenerationCounterWithReason_sourceUUID_shouldNotifyClients___block_invoke(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_updateGenerationCounterWithReason:sourceUUID:shouldNotifyClients:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(unsigned __int8 *)(a1 + 56));
}

uint64_t __68__HMDHomeManager_postFinishSetupForCurrentAccessoryFollowUpIfNeeded__block_invoke(uint64_t a1)
{
  id WeakRetained;
  void *v2;
  NSObject *v3;
  _QWORD block[5];

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v2 = WeakRetained;
  if (WeakRetained)
  {
    objc_msgSend(WeakRetained, "workQueue");
    v3 = objc_claimAutoreleasedReturnValue();
    block[0] = MEMORY[0x24BDAC760];
    block[1] = 3221225472;
    block[2] = __68__HMDHomeManager_postFinishSetupForCurrentAccessoryFollowUpIfNeeded__block_invoke_2;
    block[3] = &unk_24E79C240;
    block[4] = v2;
    dispatch_async(v3, block);

  }
  return 1;
}

uint64_t __68__HMDHomeManager_postFinishSetupForCurrentAccessoryFollowUpIfNeeded__block_invoke_2(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "postFinishSetupForCurrentAccessoryFollowUpIfNeeded");
}

uint64_t __56__HMDHomeManager_dataSyncInProgressUpdatedNotification___block_invoke(uint64_t a1)
{
  void *v2;
  int v3;
  void *v4;
  void *v5;
  HMDHomeManagerHH2SharedUserLastSyncManager *v6;
  void *v7;

  objc_msgSend(*(id *)(a1 + 32), "userInfo");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "hmf_BOOLForKey:", CFSTR("HMDHH2FirstCKImportFinished"));

  if (v3)
  {
    objc_msgSend(*(id *)(a1 + 40), "hh2FirstCKImportFinished");
    objc_msgSend(*(id *)(a1 + 40), "currentAccessorySetupMetricDispatcher");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "markSetupEndStage:error:", 13, 0);

    +[HMDUser allLastUserSyncDataArchives](HMDUser, "allLastUserSyncDataArchives");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v5, "count"))
    {
      v6 = -[HMDHomeManagerHH2SharedUserLastSyncManager initWithHomeManager:archivePaths:]([HMDHomeManagerHH2SharedUserLastSyncManager alloc], "initWithHomeManager:archivePaths:", *(_QWORD *)(a1 + 40), v5);
      objc_msgSend(*(id *)(a1 + 40), "setSharedUserLastSyncManager:", v6);

      objc_msgSend(*(id *)(a1 + 40), "sharedUserLastSyncManager");
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v7, "configure");

    }
    objc_msgSend(*(id *)(a1 + 40), "postFinishSetupForCurrentAccessoryFollowUpIfNeeded");
    objc_msgSend(*(id *)(a1 + 40), "scheduleAddACWGKeysOperationIfAllowed");

  }
  return objc_msgSend(*(id *)(a1 + 40), "_notifyClientsOfUpdatedStatus");
}

void __45__HMDHomeManager__pushMetadataChangesToUsers__block_invoke(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  id WeakRetained;
  void *v11;
  void *v12;
  id v13;
  NSObject *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  void *v20;
  int v21;
  void *v22;
  __int16 v23;
  uint64_t v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v7 = a2;
  v8 = a3;
  v9 = a4;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  v11 = WeakRetained;
  if (!v7 && WeakRetained && objc_msgSend(*(id *)(a1 + 32), "hmf_BOOLForKey:", *(_QWORD *)(a1 + 40)))
  {
    v12 = (void *)MEMORY[0x227676638]();
    v13 = *(id *)(a1 + 48);
    HMFGetOSLogHandle();
    v14 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      v16 = *(_QWORD *)(a1 + 40);
      v21 = 138543618;
      v22 = v15;
      v23 = 2112;
      v24 = v16;
      _os_log_impl(&dword_2218F0000, v14, OS_LOG_TYPE_INFO, "%{public}@Pushing metadata changes to shared user: %@", (uint8_t *)&v21, 0x16u);

    }
    objc_autoreleasePoolPop(v12);
    v19 = a1 + 40;
    v17 = *(_QWORD *)(a1 + 40);
    v18 = *(void **)(v19 + 8);
    objc_msgSend(v8, "destination");
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v18, "checkAndPushMetadataToUser:destination:userInfo:", v17, v20, v9);

  }
}

void __66__HMDHomeManager_checkAndPushMetadataToUser_destination_userInfo___block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  NSObject *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  int v13;
  void *v14;
  __int16 v15;
  uint64_t v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  v5 = a2;
  v6 = a3;
  if (objc_msgSend(v6, "hmf_BOOLForKey:", CFSTR("kDataSyncResponseAckKey")))
  {
    v7 = (void *)MEMORY[0x227676638]();
    HMFGetOSLogHandle();
    v8 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      v10 = *(_QWORD *)(a1 + 32);
      v13 = 138543618;
      v14 = v9;
      v15 = 2112;
      v16 = v10;
      _os_log_impl(&dword_2218F0000, v8, OS_LOG_TYPE_INFO, "%{public}@Received sync from user %@ for metadata update", (uint8_t *)&v13, 0x16u);

    }
    objc_autoreleasePoolPop(v7);
  }
  v11 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v12 = *(void **)(v11 + 40);
  *(_QWORD *)(v11 + 40) = 0;

}

void __66__HMDHomeManager_checkAndPushMetadataToUser_destination_userInfo___block_invoke_477(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id WeakRetained;
  void *v8;
  NSObject *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  int v14;
  void *v15;
  __int16 v16;
  uint64_t v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  v5 = a2;
  v6 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  if (WeakRetained && objc_msgSend(v6, "hmf_BOOLForKey:", CFSTR("kDataSyncResponseAckKey")))
  {
    v8 = (void *)MEMORY[0x227676638]();
    HMFGetOSLogHandle();
    v9 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      v11 = *(_QWORD *)(a1 + 32);
      v14 = 138543618;
      v15 = v10;
      v16 = 2112;
      v17 = v11;
      _os_log_impl(&dword_2218F0000, v9, OS_LOG_TYPE_INFO, "%{public}@Received sync from user %@ for metadata update", (uint8_t *)&v14, 0x16u);

    }
    objc_autoreleasePoolPop(v8);
  }
  v12 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v13 = *(void **)(v12 + 40);
  *(_QWORD *)(v12 + 40) = 0;

}

void __66__HMDHomeManager__pushChangesForHH2SharedUserLastSync_completion___block_invoke(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  id WeakRetained;
  void *v9;
  uint64_t v10;
  void *v11;
  void *v12;
  NSObject *v13;
  void *v14;
  void *v15;
  uint64_t v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  id v23;
  uint64_t v24;
  void *v25;
  id v26;
  NSObject *v27;
  void *v28;
  void *v29;
  void *v30;
  uint64_t v31;
  void *v32;
  id v33;
  NSObject *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  id v41;
  void *v42;
  void *v43;
  id v44;
  id v45;
  void *v46;
  _QWORD v47[4];
  id v48;
  id v49;
  uint64_t v50;
  id v51;
  const __CFString *v52;
  uint64_t v53;
  uint8_t buf[4];
  void *v55;
  __int16 v56;
  uint64_t v57;
  __int16 v58;
  void *v59;
  uint64_t v60;

  v60 = *MEMORY[0x24BDAC8D0];
  v7 = a2;
  v45 = a3;
  v44 = a4;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 64));
  v9 = WeakRetained;
  v43 = v7;
  v46 = WeakRetained;
  if (v7 || !WeakRetained)
  {
    v25 = (void *)MEMORY[0x227676638]();
    v26 = v9;
    HMFGetOSLogHandle();
    v27 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v28 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(*(id *)(a1 + 32), "homeUUID");
      v29 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(*(id *)(a1 + 32), "user");
      v30 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543874;
      v55 = v28;
      v56 = 2112;
      v57 = (uint64_t)v29;
      v58 = 2112;
      v59 = v30;
      _os_log_impl(&dword_2218F0000, v27, OS_LOG_TYPE_ERROR, "%{public}@Failed to elect a device for last sync to home: %@ and users: %@", buf, 0x20u);

    }
    objc_autoreleasePoolPop(v25);
    (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();
    v31 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    v11 = *(void **)(v31 + 40);
    *(_QWORD *)(v31 + 40) = 0;
  }
  else
  {
    objc_msgSend(*(id *)(a1 + 32), "archive");
    v10 = objc_claimAutoreleasedReturnValue();
    v11 = (void *)v10;
    if (v10)
    {
      v52 = CFSTR("kHomeDataKey");
      v53 = v10;
      objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", &v53, &v52, 1);
      v40 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x24BE3F1B0], "internalMessageWithName:messagePayload:", CFSTR("kHomeDataSyncRequestKey"), v40);
      v42 = (void *)objc_claimAutoreleasedReturnValue();
      v12 = (void *)MEMORY[0x227676638]();
      v41 = v46;
      HMFGetOSLogHandle();
      v13 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v14 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v42, "dataForKey:", CFSTR("kHomeDataKey"));
        v15 = (void *)objc_claimAutoreleasedReturnValue();
        v16 = objc_msgSend(v15, "length");
        objc_msgSend(*(id *)(a1 + 32), "user");
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543874;
        v55 = v14;
        v56 = 2048;
        v57 = v16;
        v58 = 2112;
        v59 = v17;
        _os_log_impl(&dword_2218F0000, v13, OS_LOG_TYPE_INFO, "%{public}@Pushing last sync home data changes (%ld bytes) to user: %@", buf, 0x20u);

      }
      objc_autoreleasePoolPop(v12);
      objc_msgSend(v42, "dataForKey:", CFSTR("kHomeDataKey"));
      v38 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(*(id *)(a1 + 40), "uuid");
      v39 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v39, "UUIDString");
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v42, "name");
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(*(id *)(a1 + 32), "user");
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v20, "userID");
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v45, "destination");
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      v47[0] = MEMORY[0x24BDAC760];
      v47[1] = 3221225472;
      v47[2] = __66__HMDHomeManager__pushChangesForHH2SharedUserLastSync_completion___block_invoke_472;
      v47[3] = &unk_24E796060;
      objc_copyWeak(&v51, (id *)(a1 + 64));
      v48 = *(id *)(a1 + 32);
      v23 = *(id *)(a1 + 48);
      v24 = *(_QWORD *)(a1 + 56);
      v49 = v23;
      v50 = v24;
      objc_msgSend(v41, "sendFragmentedMessageForData:objectUUID:withMessageName:toUser:destination:completionHandler:", v38, v18, v19, v21, v22, v47);

      objc_destroyWeak(&v51);
    }
    else
    {
      v32 = (void *)MEMORY[0x227676638]();
      v33 = v46;
      HMFGetOSLogHandle();
      v34 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v35 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(*(id *)(a1 + 32), "homeUUID");
        v36 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(*(id *)(a1 + 32), "user");
        v37 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543874;
        v55 = v35;
        v56 = 2112;
        v57 = (uint64_t)v36;
        v58 = 2112;
        v59 = v37;
        _os_log_impl(&dword_2218F0000, v34, OS_LOG_TYPE_ERROR, "%{public}@Failed to get archive for home %@, user: %@", buf, 0x20u);

      }
      objc_autoreleasePoolPop(v32);
      (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();
      v11 = 0;
    }
  }

}

void __66__HMDHomeManager__pushChangesForHH2SharedUserLastSync_completion___block_invoke_472(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id WeakRetained;
  void *v8;
  id v9;
  NSObject *v10;
  _BOOL4 v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  uint64_t v18;
  void *v19;
  int v20;
  void *v21;
  __int16 v22;
  void *v23;
  __int16 v24;
  void *v25;
  __int16 v26;
  id v27;
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  v5 = a2;
  v6 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  if (WeakRetained)
  {
    v8 = (void *)MEMORY[0x227676638]();
    v9 = WeakRetained;
    HMFGetOSLogHandle();
    v10 = objc_claimAutoreleasedReturnValue();
    v11 = os_log_type_enabled(v10, OS_LOG_TYPE_INFO);
    if (v5)
    {
      if (v11)
      {
        HMFGetLogIdentifier();
        v12 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(*(id *)(a1 + 32), "homeUUID");
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(*(id *)(a1 + 32), "user");
        v14 = (void *)objc_claimAutoreleasedReturnValue();
        v20 = 138544130;
        v21 = v12;
        v22 = 2112;
        v23 = v13;
        v24 = 2112;
        v25 = v14;
        v26 = 2112;
        v27 = v5;
        _os_log_impl(&dword_2218F0000, v10, OS_LOG_TYPE_INFO, "%{public}@Failed to push last sync home data changes to home: %@ and users: %@ with error %@", (uint8_t *)&v20, 0x2Au);

      }
    }
    else if (v11)
    {
      HMFGetLogIdentifier();
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(*(id *)(a1 + 32), "homeUUID");
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(*(id *)(a1 + 32), "user");
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      v20 = 138543874;
      v21 = v15;
      v22 = 2112;
      v23 = v16;
      v24 = 2112;
      v25 = v17;
      _os_log_impl(&dword_2218F0000, v10, OS_LOG_TYPE_INFO, "%{public}@Pushed last sync home data changes to home: %@ and users: %@", (uint8_t *)&v20, 0x20u);

    }
    objc_autoreleasePoolPop(v8);
    (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  }
  v18 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
  v19 = *(void **)(v18 + 40);
  *(_QWORD *)(v18 + 40) = 0;

}

uint64_t __65__HMDHomeManager_pushChangesForHH2SharedUserLastSync_completion___block_invoke(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_pushChangesForHH2SharedUserLastSync:completion:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
}

void __42__HMDHomeManager__pushUserRemovedForHome___block_invoke(id *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id WeakRetained;
  void *v8;
  id v9;
  NSObject *v10;
  void *v11;
  void *v12;
  id v13;
  NSObject *v14;
  void *v15;
  id v16;
  void *v17;
  void *v18;
  id v19;
  NSObject *v20;
  void *v21;
  const char *v22;
  NSObject *v23;
  uint32_t v24;
  int v25;
  void *v26;
  __int16 v27;
  id v28;
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  v5 = a2;
  v6 = a3;
  objc_msgSend(a1[4], "setRemovalInProgress:", 0);
  WeakRetained = objc_loadWeakRetained(a1 + 6);
  if (!WeakRetained)
  {
    v18 = (void *)MEMORY[0x227676638]();
    v19 = a1[5];
    HMFGetOSLogHandle();
    v20 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      v25 = 138543362;
      v26 = v21;
      v22 = "%{public}@Lost reference to home during removed user removal message";
      v23 = v20;
      v24 = 12;
LABEL_15:
      _os_log_impl(&dword_2218F0000, v23, OS_LOG_TYPE_ERROR, v22, (uint8_t *)&v25, v24);

    }
LABEL_16:

    objc_autoreleasePoolPop(v18);
    goto LABEL_17;
  }
  if (v5 && objc_msgSend(v5, "code") != 2)
  {
    v18 = (void *)MEMORY[0x227676638]();
    v19 = a1[5];
    HMFGetOSLogHandle();
    v20 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      v25 = 138543618;
      v26 = v21;
      v27 = 2112;
      v28 = v5;
      v22 = "%{public}@Unable to remove the removed user: %@";
      v23 = v20;
      v24 = 22;
      goto LABEL_15;
    }
    goto LABEL_16;
  }
  if (objc_msgSend(v5, "code") == 2)
  {
    v8 = (void *)MEMORY[0x227676638]();
    v9 = a1[5];
    HMFGetOSLogHandle();
    v10 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      v25 = 138543618;
      v26 = v11;
      v27 = 2112;
      v28 = v5;
      _os_log_impl(&dword_2218F0000, v10, OS_LOG_TYPE_INFO, "%{public}@Treating user removed message error as success: %@", (uint8_t *)&v25, 0x16u);

    }
    objc_autoreleasePoolPop(v8);
  }
  v12 = (void *)MEMORY[0x227676638]();
  v13 = a1[5];
  HMFGetOSLogHandle();
  v14 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    v16 = a1[4];
    v25 = 138543618;
    v26 = v15;
    v27 = 2112;
    v28 = v16;
    _os_log_impl(&dword_2218F0000, v14, OS_LOG_TYPE_INFO, "%{public}@Successfully removed the removed user: %@", (uint8_t *)&v25, 0x16u);

  }
  objc_autoreleasePoolPop(v12);
  objc_msgSend(WeakRetained, "removedUsers");
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v17, "removeObject:", a1[4]);

LABEL_17:
}

uint64_t __53__HMDHomeManager_updateUserPushCachedForUser_device___block_invoke(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_updateUserPushCachedForUser:device:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
}

void __40__HMDHomeManager___addActiveConnection___block_invoke(uint64_t a1)
{
  void *v2;
  id v3;
  NSObject *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  void *v13;
  uint8_t buf[4];
  void *v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  v2 = (void *)MEMORY[0x227676638]();
  v3 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    HMFGetLogIdentifier();
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543362;
    v15 = v5;
    _os_log_impl(&dword_2218F0000, v4, OS_LOG_TYPE_DEFAULT, "%{public}@Registering as home manager active because first active connection was added", buf, 0xCu);

  }
  objc_autoreleasePoolPop(v2);
  objc_msgSend(*(id *)(a1 + 32), "browseAssertion");
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v6)
  {
    objc_msgSend(*(id *)(a1 + 32), "accessoryBrowser");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "beginActiveAssertionWithReason:", CFSTR("Home Manager Active"));
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 32), "setBrowseAssertion:", v8);

  }
  objc_msgSend(*(id *)(a1 + 40), "applicationBundleIdentifier");
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  if (v9)
  {
    objc_msgSend(*(id *)(a1 + 40), "applicationBundleIdentifier", CFSTR("HMDXPCConnectionBundleIdentifier"));
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v13 = v10;
    objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", &v13, &v12, 1);
    v9 = (void *)objc_claimAutoreleasedReturnValue();

  }
  objc_msgSend(*(id *)(a1 + 32), "notificationCenter");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "postNotificationName:object:userInfo:", CFSTR("HMDHomeManagerActiveNotification"), *(_QWORD *)(a1 + 32), v9);

}

BOOL __62__HMDHomeManager__handleXPCConnectionDeactivatedNotification___block_invoke(uint64_t a1, void *a2)
{
  uint64_t v2;

  v2 = objc_msgSend(a2, "principalClass");
  return v2 == objc_opt_class();
}

void __41__HMDHomeManager_fetchAndUpdatePCSStatus__block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  NSObject *v7;
  id v8;
  id v9;
  _QWORD block[5];
  id v11;
  id v12;

  v5 = a2;
  v6 = a3;
  objc_msgSend(*(id *)(a1 + 32), "workQueue");
  v7 = objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x24BDAC760];
  block[1] = 3221225472;
  block[2] = __41__HMDHomeManager_fetchAndUpdatePCSStatus__block_invoke_2;
  block[3] = &unk_24E79BBD0;
  block[4] = *(_QWORD *)(a1 + 32);
  v11 = v5;
  v12 = v6;
  v8 = v6;
  v9 = v5;
  dispatch_async(v7, block);

}

void __41__HMDHomeManager_fetchAndUpdatePCSStatus__block_invoke_2(uint64_t a1)
{
  uint64_t v2;
  int v3;
  NSObject *v4;
  void *v5;
  id v6;
  NSObject *v7;
  void *v8;
  int v9;
  const __CFString *v10;
  const __CFString *v11;
  void *v12;
  id v13;
  NSObject *v14;
  void *v15;
  const __CFString *v16;
  int v17;
  void *v18;
  __int16 v19;
  const __CFString *v20;
  __int16 v21;
  const __CFString *v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  v2 = objc_msgSend(*(id *)(a1 + 32), "initialPCSStatusFetchCompleted");
  if ((v2 & 1) == 0)
    v2 = objc_msgSend(*(id *)(a1 + 32), "setInitialPCSStatusFetchCompleted:", 1);
  if (*(_QWORD *)(a1 + 40))
  {
    v3 = objc_msgSend(*(id *)(a1 + 32), "pcsEnabled");
    objc_msgSend(*(id *)(a1 + 32), "setPcsEnabled:", ((unint64_t)objc_msgSend(*(id *)(a1 + 40), "deviceToDeviceEncryptionAvailability") >> 1) & 1);
    if (objc_msgSend(*(id *)(a1 + 32), "pcsEnabled"))
    {
      v4 = *(NSObject **)(*(_QWORD *)(a1 + 32) + 16);
      if (os_signpost_enabled(v4))
      {
        LOWORD(v17) = 0;
        _os_signpost_emit_with_name_impl(&dword_2218F0000, v4, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "ManateeAvailable", ", (uint8_t *)&v17, 2u);
      }
    }
    v5 = (void *)MEMORY[0x227676638]();
    v6 = *(id *)(a1 + 32);
    HMFGetOSLogHandle();
    v7 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      v9 = objc_msgSend(*(id *)(a1 + 32), "pcsEnabled");
      v10 = CFSTR("Disabled");
      if (v9)
        v11 = CFSTR("Enabled");
      else
        v11 = CFSTR("Disabled");
      v17 = 138543874;
      v18 = v8;
      v20 = v11;
      v19 = 2112;
      if (v3)
        v10 = CFSTR("Enabled");
      v21 = 2112;
      v22 = v10;
      _os_log_impl(&dword_2218F0000, v7, OS_LOG_TYPE_INFO, "%{public}@Current PCS status: %@, Old PCS Status: %@", (uint8_t *)&v17, 0x20u);

    }
    objc_autoreleasePoolPop(v5);
    if (v3 != objc_msgSend(*(id *)(a1 + 32), "pcsEnabled"))
    {
      logAndPostNotification(CFSTR("HMDHomeManagerPCSStatusChangedNotification"), *(void **)(a1 + 32), 0);
      objc_msgSend(*(id *)(a1 + 32), "pcsEnabledDidChange");
      objc_msgSend(*(id *)(a1 + 32), "postFinishSetupForCurrentAccessoryFollowUpIfNeeded");
    }
  }
  else
  {
    v12 = (void *)MEMORY[0x227676638](v2);
    v13 = *(id *)(a1 + 32);
    HMFGetOSLogHandle();
    v14 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      v16 = *(const __CFString **)(a1 + 48);
      v17 = 138543618;
      v18 = v15;
      v19 = 2112;
      v20 = v16;
      _os_log_impl(&dword_2218F0000, v14, OS_LOG_TYPE_ERROR, "%{public}@Failed to fetch account info: %@", (uint8_t *)&v17, 0x16u);

    }
    objc_autoreleasePoolPop(v12);
  }
}

void __45__HMDHomeManager_startWithCompletionHandler___block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t i;
  void *v14;
  void *v15;
  int v16;
  void *v17;
  id v18;
  NSObject *v19;
  void *v20;
  _QWORD *v21;
  void *v22;
  void *v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint8_t buf[4];
  void *v30;
  _BYTE v31[128];
  uint64_t v32;

  v32 = *MEMORY[0x24BDAC8D0];
  objc_msgSend(*(id *)(a1 + 32), "appleAccountManager");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "device");
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  if (v3)
  {
    objc_msgSend(*(id *)(a1 + 32), "capabilitiesController");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "currentResidentCapabilities");
    v5 = objc_claimAutoreleasedReturnValue();
    if (v5)
    {
      v6 = (void *)v5;
      v7 = objc_msgSend(*(id *)(a1 + 32), "residentEnabledState");

      if (!v7)
      {
        objc_msgSend(v3, "productInfo");
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        v9 = objc_msgSend(v8, "productClass");

        if (v9 == 3)
        {
          v27 = 0u;
          v28 = 0u;
          v25 = 0u;
          v26 = 0u;
          objc_msgSend(*(id *)(a1 + 32), "homes", 0);
          v10 = (void *)objc_claimAutoreleasedReturnValue();
          v11 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v25, v31, 16);
          if (v11)
          {
            v12 = *(_QWORD *)v26;
            while (2)
            {
              for (i = 0; i != v11; ++i)
              {
                if (*(_QWORD *)v26 != v12)
                  objc_enumerationMutation(v10);
                v14 = *(void **)(*((_QWORD *)&v25 + 1) + 8 * i);
                if (objc_msgSend(v14, "isOwnerUser"))
                {
                  objc_msgSend(v14, "residentCapableDevices");
                  v15 = (void *)objc_claimAutoreleasedReturnValue();
                  v16 = objc_msgSend(v15, "containsObject:", v3);

                  if (v16)
                  {
                    v17 = (void *)MEMORY[0x227676638]();
                    v18 = *(id *)(a1 + 32);
                    HMFGetOSLogHandle();
                    v19 = objc_claimAutoreleasedReturnValue();
                    if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
                    {
                      HMFGetLogIdentifier();
                      v20 = (void *)objc_claimAutoreleasedReturnValue();
                      *(_DWORD *)buf = 138543362;
                      v30 = v20;
                      _os_log_impl(&dword_2218F0000, v19, OS_LOG_TYPE_INFO, "%{public}@Found ourselves as a resident in one or more homes, enabling ourselves as a resident device", buf, 0xCu);

                    }
                    objc_autoreleasePoolPop(v17);
                    v11 = 1;
                    goto LABEL_20;
                  }
                }
              }
              v11 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v25, v31, 16);
              if (v11)
                continue;
              break;
            }
          }
LABEL_20:

        }
        else
        {
          v11 = 1;
        }
        objc_msgSend(*(id *)(a1 + 32), "_updateResidentEnabledOnThisDevice:forceNotify:message:", v11, 0, 0);
      }
    }
    else
    {

    }
  }
  v21 = *(_QWORD **)(a1 + 32);
  if (v21[40])
  {
    objc_msgSend(v21, "notificationCenter");
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v22, "addObserver:selector:name:object:", *(_QWORD *)(a1 + 32), sel___handleCompanionUpdated_, CFSTR("HMDCompanionManagerUpdatedCompanionNotification"), *(_QWORD *)(*(_QWORD *)(a1 + 32) + 320));

    objc_msgSend(*(id *)(a1 + 32), "_checkAndInformCompanionDevice");
    v21 = *(_QWORD **)(a1 + 32);
  }
  objc_msgSend(v21, "chipXPCListener");
  v23 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v23, "start");

  v24 = *(_QWORD *)(a1 + 40);
  if (v24)
    (*(void (**)(void))(v24 + 16))();

}

void __62__HMDHomeManager__updateHomesDiscoveredBonjourServicesMetrics__block_invoke(uint64_t a1, uint64_t a2)
{
  id WeakRetained;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t i;
  void *v16;
  void *v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _BYTE v22[128];
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v4 = WeakRetained;
  if (!a2)
  {
    v5 = (void *)MEMORY[0x24BDD16E0];
    objc_msgSend(WeakRetained, "bonjourBrowser");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "numberWithUnsignedInteger:", objc_msgSend(v6, "discoveredServicesCountForServiceType:", CFSTR("_meshcop._udp.")));
    v7 = (void *)objc_claimAutoreleasedReturnValue();

    v8 = (void *)MEMORY[0x24BDD16E0];
    objc_msgSend(v4, "bonjourBrowser");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "numberWithUnsignedInteger:", objc_msgSend(v9, "discoveredServicesCountForServiceType:", CFSTR("_sleep-proxy._udp.")));
    v10 = (void *)objc_claimAutoreleasedReturnValue();

    v20 = 0u;
    v21 = 0u;
    v18 = 0u;
    v19 = 0u;
    objc_msgSend(v4, "homes", 0);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v12 = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v18, v22, 16);
    if (v12)
    {
      v13 = v12;
      v14 = *(_QWORD *)v19;
      do
      {
        for (i = 0; i != v13; ++i)
        {
          if (*(_QWORD *)v19 != v14)
            objc_enumerationMutation(v11);
          v16 = *(void **)(*((_QWORD *)&v18 + 1) + 8 * i);
          if (objc_msgSend(v16, "homeLocation") == 1)
          {
            objc_msgSend(v16, "setAvailableBorderRouters:", v7);
            objc_msgSend(v16, "setAvailableBSPsCount:", v10);
          }
        }
        v13 = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v18, v22, 16);
      }
      while (v13);
    }

  }
  objc_msgSend(v4, "bonjourBrowser");
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v17, "stop");

}

void __200__HMDHomeManager__loadMessageDispatcher_accessoryBrowser_messageFilterChain_homeData_localDataDecryptionFailed_identityRegistry_accountRegistry_uncommittedTransactions_backingStoreFactory_reloadData___block_invoke(uint64_t a1)
{
  void *v2;
  id v3;
  NSObject *v4;
  void *v5;
  int v6;
  void *v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  v2 = (void *)MEMORY[0x227676638]();
  v3 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    HMFGetLogIdentifier();
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = 138543362;
    v7 = v5;
    _os_log_impl(&dword_2218F0000, v4, OS_LOG_TYPE_DEFAULT, "%{public}@FMF handler is successfully started", (uint8_t *)&v6, 0xCu);

  }
  objc_autoreleasePoolPop(v2);
}

void __200__HMDHomeManager__loadMessageDispatcher_accessoryBrowser_messageFilterChain_homeData_localDataDecryptionFailed_identityRegistry_accountRegistry_uncommittedTransactions_backingStoreFactory_reloadData___block_invoke_370(uint64_t a1)
{
  void *v2;
  id v3;
  NSObject *v4;
  void *v5;
  int v6;
  void *v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  v2 = (void *)MEMORY[0x227676638]();
  v3 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = 138543362;
    v7 = v5;
    _os_log_impl(&dword_2218F0000, v4, OS_LOG_TYPE_INFO, "%{public}@Finished starting the mobile asset manager", (uint8_t *)&v6, 0xCu);

  }
  objc_autoreleasePoolPop(v2);
}

uint64_t __200__HMDHomeManager__loadMessageDispatcher_accessoryBrowser_messageFilterChain_homeData_localDataDecryptionFailed_identityRegistry_accountRegistry_uncommittedTransactions_backingStoreFactory_reloadData___block_invoke_376(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_generateAssistantSyncDataAndIncrementVersion:requestSync:urgent:completion:", 0, 0, 0, 0);
}

void __200__HMDHomeManager__loadMessageDispatcher_accessoryBrowser_messageFilterChain_homeData_localDataDecryptionFailed_identityRegistry_accountRegistry_uncommittedTransactions_backingStoreFactory_reloadData___block_invoke_388(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  HMDIDSFirewallManagerContext *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  HMDIDSFirewallManagerContext *v11;
  HMDIDSFirewallManager *v12;
  void *v13;
  void *v14;
  id v15;
  NSObject *v16;
  void *v17;
  int v18;
  void *v19;
  __int16 v20;
  id v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  v5 = a2;
  v6 = a3;
  if (v5)
  {
    v7 = [HMDIDSFirewallManagerContext alloc];
    v8 = *(_QWORD *)(a1 + 32);
    objc_msgSend(MEMORY[0x24BDD16D0], "defaultCenter");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 32), "workQueue");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v11 = -[HMDIDSFirewallManagerContext initWithHomeManager:IDSFirewall:notificationCenter:workQueue:](v7, "initWithHomeManager:IDSFirewall:notificationCenter:workQueue:", v8, v5, v9, v10);

    v12 = -[HMDIDSFirewallManager initWithContext:]([HMDIDSFirewallManager alloc], "initWithContext:", v11);
    objc_msgSend(*(id *)(a1 + 32), "setIdsFirewallManager:", v12);

    objc_msgSend(*(id *)(a1 + 32), "idsFirewallManager");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "start");

  }
  else
  {
    v14 = (void *)MEMORY[0x227676638]();
    v15 = *(id *)(a1 + 32);
    HMFGetOSLogHandle();
    v16 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      v18 = 138543618;
      v19 = v17;
      v20 = 2112;
      v21 = v6;
      _os_log_impl(&dword_2218F0000, v16, OS_LOG_TYPE_ERROR, "%{public}@Failed to retrieve IDSFirewall with error: %@", (uint8_t *)&v18, 0x16u);

    }
    objc_autoreleasePoolPop(v14);
  }

}

uint64_t __200__HMDHomeManager__loadMessageDispatcher_accessoryBrowser_messageFilterChain_homeData_localDataDecryptionFailed_identityRegistry_accountRegistry_uncommittedTransactions_backingStoreFactory_reloadData___block_invoke_393(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "postFinishSetupForCurrentAccessoryFollowUpIfNeeded");
}

id __277__HMDHomeManager_initWithMessageDispatcher_accessoryBrowser_messageFilterChain_homeData_localDataDecryptionFailed_identityRegistry_accountRegistry_metricsManager_configuringStateController_diagnosticInfoController_currentAccessorySetupMetricDispatcher_uncommittedTransactions___block_invoke()
{
  return +[HMDBackingStore cdlsBackingStoreForHomeManagerWithError:](HMDBackingStore, "cdlsBackingStoreForHomeManagerWithError:");
}

+ (void)saveAccessoryCache:(id)a3 forIdentifier:(id)a4
{
  id v5;
  id v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  NSObject *v14;
  void *v15;
  uint8_t buf[4];
  void *v17;
  __int16 v18;
  void *v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  v5 = a3;
  v6 = a4;
  v7 = (void *)MEMORY[0x227676638]();
  v8 = (void *)objc_msgSend(objc_alloc(MEMORY[0x24BE3F200]), "initWithName:", CFSTR("com.apple.homed.btle-cache-save."));
  getBLEAccessoryCachePath();
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "stringByAppendingFormat:", CFSTR("/%@"), v6);
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(MEMORY[0x24BDD1618], "archivedDataWithRootObject:requiringSecureCoding:error:", v5, 1, 0);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v12 = v11;
  if (!v11 || (objc_msgSend(v11, "writeToFile:atomically:", v10, 1) & 1) == 0)
  {
    v13 = (void *)MEMORY[0x227676638]();
    HMFGetOSLogHandle();
    v14 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v17 = v15;
      v18 = 2112;
      v19 = v10;
      _os_log_impl(&dword_2218F0000, v14, OS_LOG_TYPE_ERROR, "%{public}@Failed caching to file: %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v13);
  }

  objc_autoreleasePoolPop(v7);
}

+ (id)getAccessoryCacheForIdentifier:(id)a3
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  id v7;
  id v8;
  void *v9;
  void *v10;
  NSObject *v11;
  void *v12;
  const char *v13;
  NSObject *v14;
  uint32_t v15;
  void *v16;
  uint64_t v17;
  id v19;
  id v20;
  uint8_t buf[4];
  void *v22;
  __int16 v23;
  id v24;
  __int16 v25;
  id v26;
  uint64_t v27;

  v27 = *MEMORY[0x24BDAC8D0];
  v3 = a3;
  getBLEAccessoryCachePath();
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "stringByAppendingFormat:", CFSTR("/%@"), v3);
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  v20 = 0;
  objc_msgSend(MEMORY[0x24BDBCE50], "dataWithContentsOfFile:options:error:", v5, 2, &v20);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = v20;
  v8 = v7;
  if (!v6)
  {
    objc_msgSend(v7, "domain");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    if (!objc_msgSend(v16, "isEqualToString:", *MEMORY[0x24BDD0B88]))
    {

      goto LABEL_12;
    }
    v17 = objc_msgSend(v8, "code");

    if (v17 == 260)
    {
LABEL_12:
      v9 = 0;
      goto LABEL_13;
    }
    v10 = (void *)MEMORY[0x227676638]();
    HMFGetOSLogHandle();
    v11 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543874;
      v22 = v12;
      v23 = 2112;
      v24 = v5;
      v25 = 2112;
      v26 = v8;
      v13 = "%{public}@Unable to load contents of cache file %@ - error %@";
      v14 = v11;
      v15 = 32;
      goto LABEL_9;
    }
LABEL_10:

    objc_autoreleasePoolPop(v10);
    goto LABEL_12;
  }

  v19 = 0;
  objc_msgSend(MEMORY[0x24BDD1620], "unarchivedObjectOfClass:fromData:error:", objc_opt_class(), v6, &v19);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = v19;
  if (!v9)
  {
    v10 = (void *)MEMORY[0x227676638]();
    HMFGetOSLogHandle();
    v11 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v22 = v12;
      v23 = 2112;
      v24 = v8;
      v13 = "%{public}@Failed to unarchive accessory cache from data: %@";
      v14 = v11;
      v15 = 22;
LABEL_9:
      _os_log_impl(&dword_2218F0000, v14, OS_LOG_TYPE_ERROR, v13, buf, v15);

      goto LABEL_10;
    }
    goto LABEL_10;
  }
LABEL_13:

  return v9;
}

+ (void)removeAccessoryCacheForIdentifier:(id)a3
{
  void *v3;
  id v4;
  void *v5;
  void *v6;
  id v7;

  v3 = (void *)MEMORY[0x24BDD1580];
  v4 = a3;
  objc_msgSend(v3, "defaultManager");
  v7 = (id)objc_claimAutoreleasedReturnValue();
  getBLEAccessoryCachePath();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "stringByAppendingFormat:", CFSTR("/%@"), v4);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v7, "removeItemAtPath:error:", v6, 0);
}

+ (id)convertSaveReasonToTransationReason:(id)a3
{
  id v3;
  uint64_t v4;
  void *v5;
  void *v6;
  __CFString *v7;

  v3 = a3;
  if (v3)
  {
    if (convertSaveReasonToTransationReason__pred != -1)
      dispatch_once(&convertSaveReasonToTransationReason__pred, &__block_literal_global_453);
    objc_msgSend((id)convertSaveReasonToTransationReason___reasonMap, "objectForKey:", v3);
    v4 = objc_claimAutoreleasedReturnValue();
    v5 = (void *)v4;
    if (v4)
      v6 = (void *)v4;
    else
      v6 = v3;
    v7 = v6;

  }
  else
  {
    v7 = CFSTR("kUnknownSaveReason");
  }

  return v7;
}

+ (BOOL)doesSaveReasonAffectHomeManager:(id)a3
{
  uint64_t v3;
  id v4;
  char v5;

  v3 = doesSaveReasonAffectHomeManager__pred;
  v4 = a3;
  if (v3 != -1)
    dispatch_once(&doesSaveReasonAffectHomeManager__pred, &__block_literal_global_454_228226);
  v5 = objc_msgSend((id)doesSaveReasonAffectHomeManager___homeManagerReason, "containsObject:", v4);

  return v5;
}

+ (BOOL)doesSaveReasonAffectOnlyLocalData:(id)a3
{
  uint64_t v3;
  id v4;
  char v5;

  v3 = doesSaveReasonAffectOnlyLocalData__pred;
  v4 = a3;
  if (v3 != -1)
    dispatch_once(&doesSaveReasonAffectOnlyLocalData__pred, &__block_literal_global_456);
  v5 = objc_msgSend((id)doesSaveReasonAffectOnlyLocalData___localReason, "containsObject:", v4);

  return v5;
}

+ (BOOL)doesSaveReasonRequireForceSyncToWatch:(id)a3
{
  uint64_t v3;
  id v4;
  char v5;

  v3 = doesSaveReasonRequireForceSyncToWatch__pred;
  v4 = a3;
  if (v3 != -1)
    dispatch_once(&doesSaveReasonRequireForceSyncToWatch__pred, &__block_literal_global_457);
  v5 = objc_msgSend((id)doesSaveReasonRequireForceSyncToWatch___watchForceSyncReasons, "containsObject:", v4);

  return v5;
}

+ (BOOL)shouldIncrementGenerationCounterForReason:(id)a3
{
  uint64_t v3;
  id v4;
  char v5;

  v3 = shouldIncrementGenerationCounterForReason__onceToken;
  v4 = a3;
  if (v3 != -1)
    dispatch_once(&shouldIncrementGenerationCounterForReason__onceToken, &__block_literal_global_458);
  v5 = objc_msgSend((id)shouldIncrementGenerationCounterForReason__noIncreaseGenerationCounterReasons, "containsObject:", v4);

  return v5 ^ 1;
}

+ (BOOL)shouldIgnoreExpectedConfigurationVersionUpdateForReason:(id)a3
{
  uint64_t v3;
  id v4;
  char v5;

  v3 = shouldIgnoreExpectedConfigurationVersionUpdateForReason__pred;
  v4 = a3;
  if (v3 != -1)
    dispatch_once(&shouldIgnoreExpectedConfigurationVersionUpdateForReason__pred, &__block_literal_global_459);
  v5 = objc_msgSend((id)shouldIgnoreExpectedConfigurationVersionUpdateForReason___ignoredReasons, "containsObject:", v4);

  return v5;
}

+ (BOOL)doesSaveReasonNotAffectLocalData:(id)a3
{
  uint64_t v3;
  id v4;
  char v5;

  v3 = doesSaveReasonNotAffectLocalData__onceToken;
  v4 = a3;
  if (v3 != -1)
    dispatch_once(&doesSaveReasonNotAffectLocalData__onceToken, &__block_literal_global_460);
  v5 = objc_msgSend((id)doesSaveReasonNotAffectLocalData___noLocalReason, "containsObject:", v4);

  return v5;
}

+ (id)getUniqueDeviceIdSalt
{
  void *v2;
  id v3;

  v2 = (void *)CFPreferencesCopyAppValue(CFSTR("kUniqueDeviceIdentifierSaltkey"), CFSTR("com.apple.homed.notbackedup"));
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v3 = v2;
  else
    v3 = 0;

  return v3;
}

+ (id)deriveIntentGroupIdentifierFromBaseUUID:(id)a3
{
  void *v3;
  id v4;
  void *v5;
  void *v6;

  v3 = (void *)MEMORY[0x24BDD1880];
  v4 = a3;
  +[HMDHomeManager _getIntentGroupClientIdentifierSalt](HMDHomeManager, "_getIntentGroupClientIdentifierSalt");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "hm_deriveUUIDFromBaseUUID:identifierSalt:", v4, v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  return v6;
}

+ (id)_getIntentGroupClientIdentifierSalt
{
  void *v2;
  void *v3;

  v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x24BDD1880]), "initWithUUIDString:", CFSTR("F28CD9BC-565D-4CA8-980A-6B1680D76593"));
  objc_msgSend(v2, "hm_convertToData");
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  return v3;
}

+ (id)createIdentifierSalt:(id)a3 deviceSpecific:(BOOL)a4
{
  id v4;
  void *v5;
  void *v6;
  void *v7;

  v4 = a3;
  isWatch();
  +[HMDHomeManager saltForDeviceSpecificIdentifier](HMDHomeManager, "saltForDeviceSpecificIdentifier");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  if (v5)
  {
    v6 = (void *)objc_msgSend(v4, "mutableCopy");
    objc_msgSend(v6, "appendData:", v5);
    objc_msgSend(v6, "hm_generateSHA1");
    v7 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v7 = 0;
  }

  return v7;
}

+ (id)saltForDeviceSpecificIdentifier
{
  id v2;
  void *v3;

  v2 = (id)uniqueDeviceId;
  objc_msgSend(v2, "hm_generateSHA1");
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  return v3;
}

+ (id)remotePeerDeviceAddress:(id)a3
{
  void *v3;
  void *v4;

  v3 = (void *)IDSCopyIDForDevice();
  if (v3)
  {
    v4 = (void *)objc_msgSend(objc_alloc(MEMORY[0x24BDD16A8]), "initWithString:", v3);
    objc_msgSend(v4, "replaceOccurrencesOfString:withString:options:range:", CFSTR("self-token"), CFSTR("token"), 1, 0, objc_msgSend(v4, "length"));
  }
  else
  {
    v4 = 0;
  }

  return v4;
}

+ (id)allowedClassesForAccessAllowedWhenLockedArchive
{
  void *v2;
  void *v3;
  void *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v2 = (void *)MEMORY[0x24BDBCF20];
  v6 = objc_opt_class();
  v7 = objc_opt_class();
  v8 = objc_opt_class();
  objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", &v6, 3);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "setWithArray:", v3, v6, v7);
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  return v4;
}

+ (id)getAllBackingStoreObjects:(int64_t)a3 primaryHomeUUID:(id)a4 cloudZone:(id)a5 appData:(id)a6
{
  id v9;
  id v10;
  id v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;

  v9 = a4;
  v10 = a5;
  v11 = a6;
  objc_msgSend(MEMORY[0x24BDBCEB8], "array");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  v13 = (void *)objc_msgSend(objc_alloc(MEMORY[0x24BDD1880]), "initWithUUIDString:", CFSTR("1CAEDC10-E3E5-41A4-BB17-A9EEBA14A938"));
  objc_msgSend((id)objc_opt_class(), "emptyModelObjectWithChangeType:homeManagerUUID:", 1, v13);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  if (v9)
  {
    objc_msgSend(v9, "UUIDString");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v14, "setPrimaryHomeUUID:", v15);

  }
  +[HMDCloudZoneInformation cloudZoneInformationWithCloudZones:](HMDCloudZoneInformation, "cloudZoneInformationWithCloudZones:", v10);
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v14, "setCloudZoneInformation:", v16);

  objc_msgSend(v12, "addObject:", v14);
  if (a3 >= 3 && v11)
  {
    objc_msgSend(v11, "modelObjectWithChangeType:", 1);
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "addObject:", v17);

  }
  return v12;
}

+ (id)emptyModelObjectWithChangeType:(unint64_t)a3 homeManagerUUID:(id)a4
{
  id v5;
  HMDHomeManagerModel *v6;

  v5 = a4;
  v6 = -[HMDBackingStoreModelObject initWithObjectChangeType:uuid:parentUUID:]([HMDHomeManagerModel alloc], "initWithObjectChangeType:uuid:parentUUID:", a3, v5, 0);

  return v6;
}

void __51__HMDHomeManager_doesSaveReasonNotAffectLocalData___block_invoke()
{
  void *v0;
  void *v1;
  uint64_t v2;
  void *v3;
  _QWORD v4[2];

  v4[1] = *MEMORY[0x24BDAC8D0];
  v0 = (void *)MEMORY[0x24BDBCF20];
  v4[0] = CFSTR("MetadataUpdate");
  objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", v4, 1);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "setWithArray:", v1);
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = (void *)doesSaveReasonNotAffectLocalData___noLocalReason;
  doesSaveReasonNotAffectLocalData___noLocalReason = v2;

}

void __74__HMDHomeManager_shouldIgnoreExpectedConfigurationVersionUpdateForReason___block_invoke()
{
  void *v0;
  void *v1;
  uint64_t v2;
  void *v3;
  _QWORD v4[3];

  v4[2] = *MEMORY[0x24BDAC8D0];
  v0 = (void *)MEMORY[0x24BDBCF20];
  v4[0] = CFSTR("userUserIDUpdated");
  v4[1] = CFSTR("userUpdateAccountIdentifier");
  objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", v4, 2);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "setWithArray:", v1);
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = (void *)shouldIgnoreExpectedConfigurationVersionUpdateForReason___ignoredReasons;
  shouldIgnoreExpectedConfigurationVersionUpdateForReason___ignoredReasons = v2;

}

void __60__HMDHomeManager_shouldIncrementGenerationCounterForReason___block_invoke()
{
  void *v0;
  void *v1;
  uint64_t v2;
  void *v3;
  _QWORD v4[6];

  v4[5] = *MEMORY[0x24BDAC8D0];
  v0 = (void *)MEMORY[0x24BDBCF20];
  v4[0] = CFSTR("HMDApplicationTerminatedSaveReason");
  v4[1] = CFSTR("kModifyCharacterisiticNotificationsRequestKey");
  v4[2] = CFSTR("lastSyncedHomeConfigVersion");
  v4[3] = CFSTR("kCharacteristicPreviousValue");
  v4[4] = CFSTR("kCharacteristicValueUpdateStateNumberKey");
  objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", v4, 5);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "setWithArray:", v1);
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = (void *)shouldIncrementGenerationCounterForReason__noIncreaseGenerationCounterReasons;
  shouldIncrementGenerationCounterForReason__noIncreaseGenerationCounterReasons = v2;

}

void __56__HMDHomeManager_doesSaveReasonRequireForceSyncToWatch___block_invoke()
{
  void *v0;
  void *v1;
  uint64_t v2;
  void *v3;
  _QWORD v4[2];

  v4[1] = *MEMORY[0x24BDAC8D0];
  v0 = (void *)MEMORY[0x24BDBCF20];
  v4[0] = *MEMORY[0x24BDD7018];
  objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", v4, 1);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "setWithArray:", v1);
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = (void *)doesSaveReasonRequireForceSyncToWatch___watchForceSyncReasons;
  doesSaveReasonRequireForceSyncToWatch___watchForceSyncReasons = v2;

}

void __52__HMDHomeManager_doesSaveReasonAffectOnlyLocalData___block_invoke()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  _QWORD v6[39];

  v6[38] = *MEMORY[0x24BDAC8D0];
  v0 = (void *)MEMORY[0x24BDBCF20];
  v6[0] = CFSTR("kTriggerFiredNotificationKey");
  v6[1] = CFSTR("triggerSourceInternalMessage");
  v6[2] = CFSTR("kResetConfigRequestKey");
  v6[3] = CFSTR("kModifyCharacterisiticNotificationsRequestKey");
  v6[4] = CFSTR("kCharacteristicEnableNotificationRequestKey");
  v6[5] = CFSTR("Incoming invitations updated");
  v6[6] = CFSTR("kAccessHomeInviteRequestKey");
  v6[7] = CFSTR("kDismissBulletinInternalRequestKey");
  v6[8] = CFSTR("kDismissDialogInternalRequestKey");
  v6[9] = CFSTR("kApplicationVendorIDStoreUpdate");
  v1 = *MEMORY[0x24BDD7C40];
  v6[10] = *MEMORY[0x24BDD7C10];
  v6[11] = v1;
  v6[12] = CFSTR("kExecuteActionSetRequestKey");
  v6[13] = CFSTR("HMDApplicationTerminatedSaveReason");
  v6[14] = CFSTR("kSearchForNewAccessoriesRequestKey");
  v6[15] = CFSTR("kUpdateAccessAllowedWhenLockedRequestKey");
  v6[16] = CFSTR("kBulletinBoardNotificationUpdateNotificationKey");
  v6[17] = CFSTR("HMDBulletinBoardNotificationServiceGroupUpdatedSaveReason");
  v6[18] = CFSTR("kCharacteristicPreviousValue");
  v6[19] = CFSTR("kCharacteristicValueUpdateStateNumberKey");
  v6[20] = CFSTR("kTransactionUpdate");
  v6[21] = CFSTR("HMDHomePresenceMonitorUpdatedReason");
  v6[22] = CFSTR("userDisplayNameUpdated");
  v6[23] = CFSTR("lastSyncedHomeConfigVersion");
  v6[24] = CFSTR("AccessoryHasSymptomsHandlerUpdated");
  v6[25] = CFSTR("HMDUserCloudShareIDCodingKey");
  v6[26] = CFSTR("Update Shared Home Source Version");
  v6[27] = CFSTR("HMDHAPAccessoryUpdateCameraProfileNotificationSettingsReason");
  v6[28] = CFSTR("HMDHAPAccessorySaveAuthMethodReason");
  v6[29] = CFSTR("Upgraded To HH2");
  v2 = *MEMORY[0x24BDD4B18];
  v6[30] = CFSTR("HMDAccessorySoftwareUpdate");
  v6[31] = v2;
  v6[32] = *MEMORY[0x24BDD7018];
  v6[33] = CFSTR("HMDHAPAccessoryWoLUpdateLocallyLabel");
  v6[34] = CFSTR("HMDHAPAccessoryUpdateHasPostedBulletinForWalletKeyOnboardingReason");
  v6[35] = CFSTR("HMDAppleMediaAccessoryWiFiMACLocalOnlyUpdateLabel");
  v6[36] = CFSTR("Add Accessory Locally");
  v6[37] = CFSTR("kAccessoryLastSeenKey");
  objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", v6, 38);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "setWithArray:", v3);
  v4 = objc_claimAutoreleasedReturnValue();
  v5 = (void *)doesSaveReasonAffectOnlyLocalData___localReason;
  doesSaveReasonAffectOnlyLocalData___localReason = v4;

}

void __50__HMDHomeManager_doesSaveReasonAffectHomeManager___block_invoke()
{
  void *v0;
  void *v1;
  uint64_t v2;
  void *v3;
  _QWORD v4[24];

  v4[23] = *MEMORY[0x24BDAC8D0];
  v0 = (void *)MEMORY[0x24BDBCF20];
  v4[0] = CFSTR("kAddHomeRequestKey");
  v4[1] = CFSTR("kRemoveHomeRequestKey");
  v4[2] = CFSTR("kRemoveAllUsersFromAccessoriesRequestKey");
  v4[3] = CFSTR("kHomeManagerUpdatedKey");
  v4[4] = CFSTR("kHomeManagerCloudZoneAddedKey");
  v4[5] = CFSTR("kHomeManagerCloudZoneRemovedKey");
  v4[6] = CFSTR("kSetPrimaryHomeRequestKey");
  v4[7] = CFSTR("kUserRemovedRequestKey");
  v4[8] = CFSTR("kUserManagementOperationAddedKey");
  v4[9] = CFSTR("kUserManagementOperationRemovedKey");
  v4[10] = CFSTR("kHomeDataSyncRequestKey");
  v4[11] = CFSTR("kHomeDataFragmentedSyncRequestKey");
  v4[12] = *MEMORY[0x24BDD6118];
  v4[13] = CFSTR("MetadataUpdate");
  v4[14] = CFSTR("Object registration");
  v4[15] = CFSTR("Add Account");
  v4[16] = CFSTR("Update Devices");
  v4[17] = CFSTR("Update Handles");
  v4[18] = CFSTR("Remove Account");
  v4[19] = CFSTR("Update Device Name");
  v4[20] = CFSTR("Update Device");
  v4[21] = CFSTR("device pushback");
  v4[22] = CFSTR("accountHandle pushback");
  objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", v4, 23);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "setWithArray:", v1);
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = (void *)doesSaveReasonAffectHomeManager___homeManagerReason;
  doesSaveReasonAffectHomeManager___homeManagerReason = v2;

}

void __54__HMDHomeManager_convertSaveReasonToTransationReason___block_invoke()
{
  uint64_t v0;
  void *v1;
  _QWORD v2[3];
  _QWORD v3[4];

  v3[3] = *MEMORY[0x24BDAC8D0];
  v2[0] = CFSTR("kRemoteUsersDeregistered");
  v2[1] = CFSTR("kAddEventTriggerRequestKey");
  v3[0] = CFSTR("kRemoveUserRequestKey");
  v3[1] = CFSTR("kAddTriggerRequestKey");
  v2[2] = CFSTR("kAddTimerTriggerRequestKey");
  v3[2] = CFSTR("kAddTriggerRequestKey");
  objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v3, v2, 3);
  v0 = objc_claimAutoreleasedReturnValue();
  v1 = (void *)convertSaveReasonToTransationReason___reasonMap;
  convertSaveReasonToTransationReason___reasonMap = v0;

}

void __29__HMDHomeManager_logCategory__block_invoke()
{
  uint64_t v0;
  void *v1;

  HMFCreateOSLogHandle();
  v0 = objc_claimAutoreleasedReturnValue();
  v1 = (void *)logCategory__hmf_once_v14_228242;
  logCategory__hmf_once_v14_228242 = v0;

}

- (void)initializeHH2FrameworkSwitch
{
  void *v3;
  HMDHomeManager *v4;
  NSObject *v5;
  void *v6;
  HMDHH2FrameworkSwitch *v7;
  HMDHH2FrameworkSwitch *v8;
  _QWORD v9[4];
  id v10;
  uint8_t buf[4];
  void *v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v3 = (void *)MEMORY[0x227676638](self, a2);
  v4 = self;
  HMFGetOSLogHandle();
  v5 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543362;
    v12 = v6;
    _os_log_impl(&dword_2218F0000, v5, OS_LOG_TYPE_INFO, "%{public}@Initializing framework switch with auto switch enabled", buf, 0xCu);

  }
  objc_autoreleasePoolPop(v3);
  objc_initWeak((id *)buf, v4);
  v7 = [HMDHH2FrameworkSwitch alloc];
  v9[0] = MEMORY[0x24BDAC760];
  v9[1] = 3221225472;
  v9[2] = __66__HMDHomeManager_HH2FrameworkSwitch__initializeHH2FrameworkSwitch__block_invoke;
  v9[3] = &unk_24E7998B0;
  objc_copyWeak(&v10, (id *)buf);
  v8 = -[HMDHH2FrameworkSwitch initWithAutoSwitchEnabledWithHomeManager:callBeforeFrameworkSwitchCompletionHandler:](v7, "initWithAutoSwitchEnabledWithHomeManager:callBeforeFrameworkSwitchCompletionHandler:", v4, v9);
  -[HMDHomeManager setHh2FrameworkSwitch:](v4, "setHh2FrameworkSwitch:", v8);

  objc_destroyWeak(&v10);
  objc_destroyWeak((id *)buf);
}

- (void)_registerForFrameworkSwitch
{
  void *v3;
  HMDHomeManager *v4;
  NSObject *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  uint8_t buf[4];
  void *v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  if (isInternalBuild())
  {
    v3 = (void *)MEMORY[0x227676638]();
    v4 = self;
    HMFGetOSLogHandle();
    v5 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v18 = v6;
      _os_log_impl(&dword_2218F0000, v5, OS_LOG_TYPE_INFO, "%{public}@Registering for test HH2 migration request message", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v3);
    -[HMDHomeManager messageDispatcher](v4, "messageDispatcher");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = *MEMORY[0x24BDD6160];
    +[HMDXPCMessagePolicy policyWithEntitlements:](HMDXPCMessagePolicy, "policyWithEntitlements:", 5);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v16 = v9;
    objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", &v16, 1);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "registerForMessage:receiver:policies:selector:", v8, v4, v10, sel__handleTestHH2Migration_);

  }
  -[HMDHomeManager messageDispatcher](self, "messageDispatcher");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v12 = *MEMORY[0x24BDD5FB0];
  +[HMDXPCMessagePolicy policyWithEntitlements:](HMDXPCMessagePolicy, "policyWithEntitlements:", 5);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  v15 = v13;
  objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", &v15, 1);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "registerForMessage:receiver:policies:selector:", v12, self, v14, sel__handleFetchSetupMode_);

}

- (void)_handleFetchSetupMode:(id)a3
{
  void *v3;
  id v4;
  void *v5;
  void *v6;
  uint64_t v7;
  _QWORD v8[2];

  v8[1] = *MEMORY[0x24BDAC8D0];
  v7 = *MEMORY[0x24BDD6128];
  v3 = (void *)MEMORY[0x24BDD16E0];
  v4 = a3;
  objc_msgSend(v3, "numberWithBool:", 1);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v8[0] = v5;
  objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v8, &v7, 1);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "respondWithPayload:", v6);

}

- (void)_handleSwitchSetupMode:(id)a3
{
  id v4;
  uint64_t v5;
  void *v6;
  void *v7;
  uint64_t v8;
  CFIndex AppIntegerValue;
  CFIndex v10;
  void *v11;
  int v12;
  void *v13;
  HMDHomeManager *v14;
  NSObject *v15;
  void *v16;
  void *v17;
  HMDHomeManager *v18;
  NSObject *v19;
  void *v20;
  void *v21;
  void *v22;
  HMDHomeManager *v23;
  NSObject *v24;
  void *v25;
  void *v26;
  void *v27;
  uint64_t v28;
  void *v29;
  Boolean keyExistsAndHasValidFormat[4];
  void *v31;
  uint64_t v32;

  v32 = *MEMORY[0x24BDAC8D0];
  v4 = a3;
  if ((_os_feature_enabled_impl() & 1) != 0)
  {
    v5 = *MEMORY[0x24BDD6128];
    objc_msgSend(v4, "numberForKey:", *MEMORY[0x24BDD6128]);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    if (v6)
    {
      v7 = v6;
      v8 = objc_msgSend(v6, "integerValue");
      keyExistsAndHasValidFormat[0] = 0;
      AppIntegerValue = CFPreferencesGetAppIntegerValue(CFSTR("HHTTSUMode"), CFSTR("com.apple.homed"), keyExistsAndHasValidFormat);
      if (keyExistsAndHasValidFormat[0])
        v10 = AppIntegerValue;
      else
        v10 = 0;
      -[HMDHomeManager hh2FrameworkSwitch](self, "hh2FrameworkSwitch");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      v12 = objc_msgSend(v11, "switchToSetupMode:", v8);

      if (v12)
      {
        objc_msgSend(v4, "respondWithSuccess");
      }
      else
      {
        v22 = (void *)MEMORY[0x227676638]();
        v23 = self;
        HMFGetOSLogHandle();
        v24 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
        {
          HMFGetLogIdentifier();
          v25 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)keyExistsAndHasValidFormat = 138543362;
          v31 = v25;
          _os_log_impl(&dword_2218F0000, v24, OS_LOG_TYPE_DEFAULT, "%{public}@Mode switch will result in a change do not callback message.", keyExistsAndHasValidFormat, 0xCu);

        }
        objc_autoreleasePoolPop(v22);
        objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedInteger:", v10, v5);
        v26 = (void *)objc_claimAutoreleasedReturnValue();
        v29 = v26;
        objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", &v29, &v28, 1);
        v27 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v4, "respondWithPayload:", v27);

      }
    }
    else
    {
      v17 = (void *)MEMORY[0x227676638]();
      v18 = self;
      HMFGetOSLogHandle();
      v19 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v20 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)keyExistsAndHasValidFormat = 138543362;
        v31 = v20;
        _os_log_impl(&dword_2218F0000, v19, OS_LOG_TYPE_ERROR, "%{public}@No setup mode in request", keyExistsAndHasValidFormat, 0xCu);

      }
      objc_autoreleasePoolPop(v17);
      objc_msgSend(MEMORY[0x24BDD1540], "hmErrorWithCode:", 3);
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "respondWithError:", v21);

      v7 = 0;
    }
  }
  else
  {
    v13 = (void *)MEMORY[0x227676638]();
    v14 = self;
    HMFGetOSLogHandle();
    v15 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)keyExistsAndHasValidFormat = 138543362;
      v31 = v16;
      _os_log_impl(&dword_2218F0000, v15, OS_LOG_TYPE_ERROR, "%{public}@Setup mode is not enabled Failing", keyExistsAndHasValidFormat, 0xCu);

    }
    objc_autoreleasePoolPop(v13);
    objc_msgSend(MEMORY[0x24BDD1540], "hmErrorWithCode:", 48);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "respondWithError:", v7);
  }

}

- (void)waitForHH2SentinelZoneToBeRemoved
{
  id v2;

  -[HMDHomeManager hh2FrameworkSwitch](self, "hh2FrameworkSwitch");
  v2 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "waitForHH2SentinelZoneToBeRemoved");

}

- (void)_handleTestHH2Migration:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  HMDHomeManager *v8;
  NSObject *v9;
  void *v10;
  int v11;
  void *v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v4 = a3;
  if ((isInternalBuild() & 1) == 0)
  {
    v7 = (void *)MEMORY[0x227676638]();
    v8 = self;
    HMFGetOSLogHandle();
    v9 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_FAULT))
    {
      HMFGetLogIdentifier();
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      v11 = 138543362;
      v12 = v10;
      _os_log_impl(&dword_2218F0000, v9, OS_LOG_TYPE_FAULT, "%{public}@Not sure how this message made it through isInternalBuild checks. DEBUG THIS!!!", (uint8_t *)&v11, 0xCu);

    }
    objc_autoreleasePoolPop(v7);
    objc_msgSend(MEMORY[0x24BDD1540], "hmErrorWithCode:", 10);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    goto LABEL_7;
  }
  -[HMDHomeManager writeMigrationRecordWithShouldSkipKeyRollOperations:forceMigrationFailureForTesting:migrateFromTestDirectory:dryRun:](self, "writeMigrationRecordWithShouldSkipKeyRollOperations:forceMigrationFailureForTesting:migrateFromTestDirectory:dryRun:", 1, 0, 1, objc_msgSend(v4, "BOOLForKey:", *MEMORY[0x24BDD5FD0]));
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  if (v5)
  {
LABEL_7:
    objc_msgSend(v4, "respondWithError:", v5);
    goto LABEL_8;
  }
  +[HMDResetConfigPostCleanup writePostCleanupRecordToRemoveAllCoreDataFilesWithReason:](HMDResetConfigPostCleanup, "writePostCleanupRecordToRemoveAllCoreDataFilesWithReason:", 5);
  -[HMDHomeManager hh2FrameworkSwitch](self, "hh2FrameworkSwitch");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend((id)objc_opt_class(), "switchToHH2AndRelaunchHomed");

  objc_msgSend(v4, "respondWithSuccess");
LABEL_8:

}

- (id)writeMigrationRecordWithShouldSkipKeyRollOperations:(BOOL)a3 forceMigrationFailureForTesting:(BOOL)a4 migrateFromTestDirectory:(BOOL)a5 dryRun:(BOOL)a6
{
  _BOOL8 v6;
  uint64_t v7;
  _BOOL8 v8;
  uint64_t v9;
  void *v11;
  HMDHomeManager *v12;
  NSObject *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  _BOOL8 v18;
  void *v19;
  _BOOL8 v20;
  void *v21;
  void *v22;
  char v23;
  void *v24;
  HMDHomeManager *v25;
  NSObject *v26;
  NSObject *v27;
  void *v28;
  void *v29;
  void *v30;
  HMDHomeManager *v31;
  NSObject *v32;
  void *v33;
  uint64_t v34;
  void *v35;
  unsigned int v37;
  unsigned int v38;
  uint8_t buf[4];
  void *v40;
  __int16 v41;
  void *v42;
  __int16 v43;
  void *v44;
  __int16 v45;
  void *v46;
  __int16 v47;
  void *v48;
  uint64_t v49;

  v6 = a6;
  v7 = a5;
  v8 = a4;
  v9 = a3;
  v49 = *MEMORY[0x24BDAC8D0];
  v11 = (void *)MEMORY[0x227676638](self, a2);
  v12 = self;
  HMFGetOSLogHandle();
  v13 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    HMFGetLogIdentifier();
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    HMFBooleanToString();
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    HMFBooleanToString();
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    HMFBooleanToString();
    v38 = v7;
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    HMFBooleanToString();
    v37 = v9;
    v18 = v8;
    v19 = v11;
    v20 = v6;
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138544386;
    v40 = v14;
    v41 = 2112;
    v42 = v15;
    v43 = 2112;
    v44 = v16;
    v45 = 2112;
    v46 = v17;
    v47 = 2112;
    v48 = v21;
    _os_log_impl(&dword_2218F0000, v13, OS_LOG_TYPE_DEFAULT, "%{public}@Going to write migration record to disk with shouldSkipKeyRollOperations: %@ forceMigrationFailureForTesting: %@, migrateFromTestDirectory: %@, dryRun: %@", buf, 0x34u);

    v6 = v20;
    v11 = v19;
    v8 = v18;
    v9 = v37;

    v7 = v38;
  }

  objc_autoreleasePoolPop(v11);
  +[HMDHH2MigratorRecord singleRecord](HMDHH2MigratorRecord, "singleRecord");
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v22, "setShouldSkipKeyRollOperations:", v9);
  objc_msgSend(v22, "setForceMigrationFailureForTesting:", v8);
  objc_msgSend(v22, "setMigrateFromTestDirectory:", v7);
  objc_msgSend(v22, "setDryRun:", v6);
  if ((objc_msgSend(v22, "writeNewMigrationRecord") & 1) == 0)
  {
    v30 = (void *)MEMORY[0x227676638]();
    v31 = v12;
    HMFGetOSLogHandle();
    v32 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v33 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v40 = v33;
      _os_log_impl(&dword_2218F0000, v32, OS_LOG_TYPE_ERROR, "%{public}@Unable to write migration record locally. Cannot start the migration work.", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v30);
    objc_msgSend(MEMORY[0x24BDD1540], "hmPrivateErrorWithCode:", 2702);
    v34 = objc_claimAutoreleasedReturnValue();
    goto LABEL_14;
  }
  v23 = objc_msgSend(v22, "isMigrationInProgress");
  v24 = (void *)MEMORY[0x227676638]();
  v25 = v12;
  HMFGetOSLogHandle();
  v26 = objc_claimAutoreleasedReturnValue();
  v27 = v26;
  if ((v23 & 1) == 0)
  {
    if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v35 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v40 = v35;
      _os_log_impl(&dword_2218F0000, v27, OS_LOG_TYPE_ERROR, "%{public}@Not sure what happened here. We tried taking the ownership of the migration but could not. Failing the request...", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v24);
    objc_msgSend(MEMORY[0x24BDD1540], "hmErrorWithCode:description:reason:suggestion:", -1, CFSTR("Error occurred while trying to take ownership of the migration work"), CFSTR("Taking the ownership writes the record to disk"), CFSTR("Check why the disk operation failed on HMDHH2MigratorRecord"));
    v34 = objc_claimAutoreleasedReturnValue();
LABEL_14:
    v29 = (void *)v34;
    goto LABEL_15;
  }
  if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
  {
    HMFGetLogIdentifier();
    v28 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543618;
    v40 = v28;
    v41 = 2112;
    v42 = v22;
    _os_log_impl(&dword_2218F0000, v27, OS_LOG_TYPE_DEFAULT, "%{public}@Successfully wrote migration record : %@", buf, 0x16u);

  }
  objc_autoreleasePoolPop(v24);
  v29 = 0;
LABEL_15:

  return v29;
}

id __66__HMDHomeManager_HH2FrameworkSwitch__initializeHH2FrameworkSwitch__block_invoke(uint64_t a1)
{
  id WeakRetained;
  void *v2;
  void *v3;
  NSObject *v4;
  void *v5;
  id v6;
  void *v7;
  int v9;
  void *v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (!WeakRetained)
  {
    v2 = (void *)MEMORY[0x227676638]();
    objc_opt_class();
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    HMFGetOSLogHandle();
    v4 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      v9 = 138543362;
      v10 = v5;
      _os_log_impl(&dword_2218F0000, v4, OS_LOG_TYPE_ERROR, "%{public}@Home manager died before framework switch completed", (uint8_t *)&v9, 0xCu);

    }
    objc_autoreleasePoolPop(v2);
    v6 = (id)objc_msgSend(MEMORY[0x24BE3F180], "futureWithNoValue");
  }
  objc_msgSend(MEMORY[0x24BE3F180], "futureWithNoValue");
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  return v7;
}

@end
