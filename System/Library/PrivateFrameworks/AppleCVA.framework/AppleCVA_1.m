void sub_1C98DEE6C(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  size_t v7;
  size_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  size_t v16;
  size_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  void *v32;
  size_t v33;
  size_t v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  size_t v42;
  size_t v43;
  void *v44;
  uint64_t v45;
  void *v46;
  size_t v47;
  void *v48;
  uint64_t v49;
  void *v50;
  uint64_t v51;
  void *v52;
  size_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  void *v63;
  uint64_t v64;
  void *v65;
  size_t v66;
  size_t v67;
  void *v68;
  uint64_t v69;
  uint64_t v70;
  void *v71;
  uint64_t v72;
  uint64_t v73;
  void *v74;
  size_t v75;
  size_t v76;
  _QWORD *v77;
  void *v78;
  uint64_t v79;
  void *v80;
  size_t v81;
  size_t v82;
  void *v83;
  uint64_t v84;
  uint64_t v85;
  void *v86;
  uint64_t v87;
  uint64_t v88;
  void *v89;
  size_t v90;
  size_t v91;
  void *v92;
  uint64_t v93;
  int *v94;
  int *v95;
  int v96;
  int v97;
  uint64_t v98;
  uint64_t v99;
  int *v100;
  uint64_t v101;
  int v102;
  int v103;
  uint64_t v104;
  uint64_t v105;
  int *v106;
  uint64_t v107;
  int v108;
  int v109;
  uint64_t v110;
  uint64_t v111;
  int *v112;
  uint64_t v113;
  int v114;
  int v115;
  uint64_t v116;
  uint64_t v117;
  int *v118;
  uint64_t v119;
  int v120;
  int v121;
  uint64_t v122;
  uint64_t v123;
  int *v124;
  uint64_t v125;
  int v126;
  int v127;
  uint64_t v128;
  uint64_t v129;
  int *v130;
  uint64_t v131;
  int v132;
  int v133;
  uint64_t v134;
  _DWORD *v135;
  int *v136;
  _DWORD *v137;
  int v138;
  int v139;
  uint64_t v140;
  uint64_t v141;
  int *v142;
  uint64_t v143;
  int v144;
  int v145;
  uint64_t v146;
  uint64_t v147;
  int *v148;
  uint64_t v149;
  int v150;
  int v151;
  uint64_t v152;
  uint64_t v153;
  int *v154;
  uint64_t v155;
  int v156;
  int v157;
  uint64_t v158;
  uint64_t v159;
  int *v160;
  uint64_t v161;
  int v162;
  int v163;
  uint64_t v164;
  uint64_t v165;
  int *v166;
  uint64_t v167;
  int v168;
  int v169;
  uint64_t v170;
  uint64_t v171;
  int *v172;
  uint64_t v173;
  int v174;
  int v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  int *v179;
  uint64_t v180;
  int v181;
  int v182;
  uint64_t v183;
  _DWORD *v184;
  int *v185;
  _DWORD *v186;
  int v187;
  int v188;
  uint64_t v189;
  uint64_t v190;
  int *v191;
  uint64_t v192;
  int v193;
  int v194;
  uint64_t v195;
  uint64_t v196;
  int *v197;
  uint64_t v198;
  int v199;
  int v200;
  uint64_t v201;
  uint64_t v202;
  int *v203;
  uint64_t v204;
  int v205;
  int v206;
  uint64_t v207;
  uint64_t v208;
  int *v209;
  uint64_t v210;
  int v211;
  int v212;
  uint64_t v213;
  uint64_t v214;
  int *v215;
  uint64_t v216;
  int v217;
  int v218;
  uint64_t v219;
  _DWORD *v220;
  int *v221;
  _DWORD *v222;
  int v223;
  int v224;
  uint64_t v225;
  uint64_t v226;
  int *v227;
  uint64_t v228;
  int v229;
  int v230;
  uint64_t v231;
  uint64_t v232;
  int *v233;
  uint64_t v234;
  int v235;
  int v236;
  uint64_t v237;
  uint64_t v238;
  int *v239;
  uint64_t v240;
  int v241;
  int v242;
  uint64_t v243;
  uint64_t v244;
  int *v245;
  uint64_t v246;
  int v247;
  int v248;
  uint64_t v249;
  uint64_t v250;
  _DWORD *v251;
  int *v252;
  _DWORD *v253;
  int v254;
  int v255;
  uint64_t v256;
  uint64_t v257;
  int *v258;
  uint64_t v259;
  int v260;
  int v261;
  uint64_t v262;
  uint64_t v263;
  int *v264;
  uint64_t v265;
  int v266;
  int v267;
  uint64_t v268;
  uint64_t v269;
  int *v270;
  uint64_t v271;
  int v272;
  int v273;
  uint64_t v274;
  uint64_t v275;
  int *v276;
  uint64_t v277;
  int v278;
  int v279;
  uint64_t v280;
  uint64_t v281;
  int *v282;
  uint64_t v283;
  int v284;
  int v285;
  uint64_t v286;
  uint64_t v287;
  int *v288;
  uint64_t v289;
  int v290;
  int v291;
  uint64_t v292;
  uint64_t v293;
  int *v294;
  uint64_t v295;
  int v296;
  int v297;
  uint64_t v298;
  uint64_t v299;
  int *v300;
  uint64_t v301;
  int v302;
  int v303;
  uint64_t v304;
  uint64_t v305;
  int *v306;
  uint64_t v307;
  int v308;
  int v309;
  uint64_t v310;
  uint64_t v311;
  int *v312;
  uint64_t v313;
  int v314;
  int v315;
  uint64_t v316;
  uint64_t v317;
  int *v318;
  uint64_t v319;
  int v320;
  int v321;
  uint64_t v322;
  uint64_t v323;
  int *v324;
  uint64_t v325;
  int v326;
  int v327;
  uint64_t v328;
  uint64_t v329;
  int *v330;
  uint64_t v331;
  int v332;
  int v333;
  uint64_t v334;
  uint64_t v335;
  int *v336;
  uint64_t v337;
  int v338;
  int v339;
  uint64_t v340;
  uint64_t v341;
  int *v342;
  uint64_t v343;
  int v344;
  int v345;
  uint64_t v346;
  uint64_t v347;
  int *v348;
  uint64_t v349;
  int v350;
  int v351;
  uint64_t v352;
  uint64_t v353;
  int *v354;
  uint64_t v355;
  int v356;
  int v357;
  uint64_t v358;
  uint64_t v359;
  int *v360;
  uint64_t v361;
  int v362;
  int v363;
  uint64_t v364;
  uint64_t v365;
  int *v366;
  uint64_t v367;
  int v368;
  int v369;
  uint64_t v370;
  uint64_t v371;
  _DWORD *v372;
  int *v373;
  _DWORD *v374;
  int v375;
  int v376;
  uint64_t v377;
  uint64_t v378;
  int *v379;
  uint64_t v380;
  int v381;
  int v382;
  uint64_t v383;
  uint64_t v384;
  int *v385;
  uint64_t v386;
  int v387;
  int v388;
  uint64_t v389;
  uint64_t v390;
  int *v391;
  uint64_t v392;
  int v393;
  int v394;
  uint64_t v395;
  uint64_t v396;
  int *v397;
  uint64_t v398;
  int v399;
  int v400;
  uint64_t v401;
  uint64_t v402;
  int *v403;
  uint64_t v404;
  int v405;
  int v406;
  uint64_t v407;
  uint64_t v408;
  int *v409;
  uint64_t v410;
  int v411;
  int v412;
  uint64_t v413;
  uint64_t v414;
  int *v415;
  uint64_t v416;
  int v417;
  int v418;
  uint64_t v419;
  uint64_t v420;
  int *v421;
  uint64_t v422;
  int v423;
  int v424;
  uint64_t v425;
  uint64_t v426;
  int *v427;
  uint64_t v428;
  int v429;
  int v430;
  uint64_t v431;
  uint64_t v432;
  int *v433;
  uint64_t v434;
  int v435;
  int v436;
  uint64_t v437;
  uint64_t v438;
  int *v439;
  uint64_t v440;
  int v441;
  int v442;
  uint64_t v443;
  uint64_t v444;
  int *v445;
  uint64_t v446;
  int v447;
  int v448;
  _DWORD *v449;
  char *v450;
  uint64_t v451;
  int v452;
  float *v453;
  unsigned int v454;
  unsigned int v455;
  unsigned int v456;
  unsigned int v457;
  unsigned int v458;
  char *v459;
  _OWORD *v460;
  float v461;
  uint64_t i;
  int32x4_t v463;
  float32x4_t v464;
  float32x4_t v465;
  uint64_t v466;
  int *v467;
  uint64_t v468;
  int v469;
  float32x2_t v470;
  int v471;
  float v472;
  float32x2_t v473;
  float32x2_t v474;
  float32x2_t v475;
  float32x2_t v476;
  float32x4_t v477;
  float32x4_t v478;
  float32x4_t v479;
  int32x4_t v480;
  int v481;
  int v482;
  float32x2_t v483;
  float32x2_t v484;
  float32x2_t v485;
  float32x2_t v486;
  char *v487;
  int v488;
  char *v489;
  char *v490;
  int v491;
  void *v492;
  void *v493;
  uint64_t v494;
  uint64_t v495;
  _QWORD *v496;
  uint64_t v497;
  uint64_t v498;
  int v499;
  uint64_t v500;
  _QWORD *v501;
  uint64_t v502;
  _DWORD *v503;
  int v504;
  uint64_t v505;
  uint64_t *v506;
  size_t v507;
  char *v508;
  void **v509;
  _DWORD *v510;
  size_t v511;
  float *v512;
  void **v513;
  void **v514;
  _QWORD **v515;
  _QWORD *v516;
  void **v517;
  int *v518;
  float *v519;
  float *v520;
  float32x4_t v521;
  float v522;
  float v523;
  float *v524;
  uint64_t v525;
  float *v526;
  uint64_t v527;
  float v528;
  float *v529;
  float *v530;
  float v531;
  uint64_t v532;
  unsigned int v533;
  float v534;
  float32x4_t v535;
  uint64_t v536;
  uint64_t v537;
  _DWORD *v538;
  unint64_t v539;
  float *v540;
  unint64_t v541;
  float *v542;
  float *v543;
  float v544;
  float v545;
  float v546;
  float v547;
  float v548;
  float v549;
  int v550;
  float v551;
  float *v552;
  uint64_t v553;
  float *v554;
  uint64_t v555;
  float v556;
  uint64_t v557;
  uint64_t v558;
  float v559;
  float v560;
  float v561;
  uint64_t *v563;
  float v564;
  float v565;
  int v566;
  uint64_t *v567;
  uint64_t *v568;
  uint64_t *v569;
  unsigned __int8 v570;
  uint64_t v571;
  unint64_t v572;
  void *v573;
  size_t v574;
  size_t v575;
  uint64_t *v576;
  unsigned __int8 v577;
  uint64_t v578;
  unsigned __int8 v579;
  void *v580;
  void *__p;
  uint64_t *v582;
  void *v583;
  uint64_t v584;
  unsigned int v585;
  void *memptr;
  size_t v587;
  int v588;
  void *v589;
  uint64_t v590;
  int v591;
  void *v592;
  uint64_t v593;
  unsigned int v594;
  void *v595;
  size_t v596;
  int v597;
  __int128 v598;
  uint64_t v599;
  uint64_t v600;
  uint64_t v601;
  int v602;
  uint64_t v603;
  uint64_t v604;
  int v605;
  __int128 v606;
  __int128 v607;
  uint64_t v608;
  int v609;
  __int128 v610;
  uint64_t v611;
  uint64_t v612;
  float *v613;
  void *v614;
  void **v615;
  uint64_t v616;
  __int128 v617;
  void *v618[2];

  v4 = *a2;
  v5 = *a2 + 408;
  sub_1C9909AD8((uint64_t)&memptr);
  v6 = *(void **)(v4 + 240);
  v7 = *(_QWORD *)(v4 + 248);
  v8 = v587;
  *(_QWORD *)(v4 + 240) = memptr;
  *(_QWORD *)(v4 + 248) = v8;
  memptr = v6;
  v587 = v7;
  *(_DWORD *)(v4 + 256) = v588;
  v9 = *(void **)(v4 + 264);
  v10 = *(_QWORD *)(v4 + 272);
  v11 = v590;
  *(_QWORD *)(v4 + 264) = v589;
  *(_QWORD *)(v4 + 272) = v11;
  v589 = v9;
  v590 = v10;
  *(_DWORD *)(v4 + 280) = v591;
  v12 = *(void **)(v4 + 288);
  v13 = *(_QWORD *)(v4 + 296);
  v14 = v593;
  *(_QWORD *)(v4 + 288) = v592;
  *(_QWORD *)(v4 + 296) = v14;
  v592 = v12;
  v593 = v13;
  *(_DWORD *)(v4 + 304) = v594;
  v15 = *(void **)(v4 + 312);
  v16 = *(_QWORD *)(v4 + 320);
  v17 = v596;
  *(_QWORD *)(v4 + 312) = v595;
  *(_QWORD *)(v4 + 320) = v17;
  v595 = v15;
  v596 = v16;
  *(_DWORD *)(v4 + 328) = v597;
  v18 = *(_QWORD *)(v4 + 336);
  v19 = *(_QWORD *)(v4 + 344);
  v20 = *((_QWORD *)&v598 + 1);
  *(_QWORD *)(v4 + 336) = v598;
  *(_QWORD *)(v4 + 344) = v20;
  *(_QWORD *)&v598 = v18;
  *((_QWORD *)&v598 + 1) = v19;
  *(_DWORD *)(v4 + 352) = v599;
  v21 = *(_QWORD *)(v4 + 360);
  v22 = *(_QWORD *)(v4 + 368);
  v23 = v601;
  *(_QWORD *)(v4 + 360) = v600;
  *(_QWORD *)(v4 + 368) = v23;
  v600 = v21;
  v601 = v22;
  *(_DWORD *)(v4 + 376) = v602;
  v24 = *(_QWORD *)(v4 + 384);
  v25 = *(_QWORD *)(v4 + 392);
  v26 = v604;
  *(_QWORD *)(v4 + 384) = v603;
  *(_QWORD *)(v4 + 392) = v26;
  v588 = 0;
  v591 = 0;
  v594 = 0;
  v597 = 0;
  LODWORD(v599) = 0;
  v602 = 0;
  v603 = v24;
  v604 = v25;
  *(_DWORD *)(v4 + 400) = v605;
  v605 = 0;
  v27 = *(void **)(v4 + 408);
  if (v27)
  {
    *(_QWORD *)(v4 + 416) = v27;
    operator delete(v27);
    *(_QWORD *)v5 = 0;
    *(_QWORD *)(v5 + 8) = 0;
    *(_QWORD *)(v5 + 16) = 0;
  }
  *(_OWORD *)v5 = v606;
  v28 = *(_QWORD *)(v4 + 432);
  v29 = *(_QWORD *)(v4 + 440);
  *(_OWORD *)(v4 + 424) = v607;
  v606 = 0uLL;
  *(_QWORD *)&v607 = 0;
  *((_QWORD *)&v607 + 1) = v28;
  *(_QWORD *)(v4 + 440) = v608;
  v608 = v29;
  *(_DWORD *)(v4 + 448) = v609;
  v609 = 0;
  v30 = *(void **)(v4 + 456);
  if (v30)
  {
    *(_QWORD *)(v4 + 464) = v30;
    operator delete(v30);
  }
  *(_OWORD *)(v5 + 48) = v610;
  *(_QWORD *)(v4 + 472) = v611;
  v610 = 0uLL;
  v611 = 0;
  sub_1C9909A58((uint64_t)&memptr);
  v31 = *a2;
  sub_1C9909E50((uint64_t)&memptr);
  v32 = *(void **)(v31 + 480);
  v33 = *(_QWORD *)(v31 + 488);
  v34 = v587;
  *(_QWORD *)(v31 + 480) = memptr;
  *(_QWORD *)(v31 + 488) = v34;
  memptr = v32;
  v587 = v33;
  *(_DWORD *)(v31 + 496) = v588;
  v588 = 0;
  v35 = *(void **)(v31 + 504);
  v36 = *(_QWORD *)(v31 + 512);
  v37 = v590;
  *(_QWORD *)(v31 + 504) = v589;
  *(_QWORD *)(v31 + 512) = v37;
  v589 = v35;
  v590 = v36;
  *(_DWORD *)(v31 + 520) = v591;
  v591 = 0;
  v38 = *(void **)(v31 + 528);
  v39 = v593;
  *(_QWORD *)(v31 + 528) = v592;
  v40 = *(_QWORD *)(v31 + 536);
  *(_QWORD *)(v31 + 536) = v39;
  v592 = v38;
  v593 = v40;
  *(_DWORD *)(v31 + 544) = v594;
  v594 = 0;
  v41 = *(void **)(v31 + 552);
  v42 = v596;
  *(_QWORD *)(v31 + 552) = v595;
  v43 = *(_QWORD *)(v31 + 560);
  *(_QWORD *)(v31 + 560) = v42;
  v595 = v41;
  v596 = v43;
  *(_DWORD *)(v31 + 568) = v597;
  v597 = 0;
  v44 = *(void **)(v31 + 576);
  if (v44)
  {
    *(_QWORD *)(v31 + 584) = v44;
    operator delete(v44);
    *(_QWORD *)(v31 + 576) = 0;
    *(_QWORD *)(v31 + 584) = 0;
    *(_QWORD *)(v31 + 592) = 0;
    v41 = v595;
  }
  *(_OWORD *)(v31 + 576) = v598;
  *(_QWORD *)(v31 + 592) = v599;
  v599 = 0;
  v598 = 0uLL;
  free(v41);
  free(v592);
  free(v589);
  free(memptr);
  v45 = *a2;
  sub_1C99096E0((uint64_t)&memptr);
  v46 = *(void **)v45;
  v47 = *(_QWORD *)(v45 + 8);
  *(_QWORD *)v45 = memptr;
  *(_QWORD *)(v45 + 8) = v587;
  memptr = v46;
  v587 = v47;
  *(_DWORD *)(v45 + 16) = v588;
  v48 = *(void **)(v45 + 24);
  v49 = *(_QWORD *)(v45 + 32);
  *(_QWORD *)(v45 + 24) = v589;
  *(_QWORD *)(v45 + 32) = v590;
  v589 = v48;
  v590 = v49;
  *(_DWORD *)(v45 + 40) = v591;
  v50 = *(void **)(v45 + 48);
  v51 = *(_QWORD *)(v45 + 56);
  *(_QWORD *)(v45 + 48) = v592;
  *(_QWORD *)(v45 + 56) = v593;
  v592 = v50;
  v593 = v51;
  *(_DWORD *)(v45 + 64) = v594;
  v52 = *(void **)(v45 + 72);
  v53 = *(_QWORD *)(v45 + 80);
  *(_QWORD *)(v45 + 72) = v595;
  *(_QWORD *)(v45 + 80) = v596;
  v595 = v52;
  v596 = v53;
  *(_DWORD *)(v45 + 88) = v597;
  v54 = *(_QWORD *)(v45 + 96);
  v55 = *(_QWORD *)(v45 + 104);
  *(_OWORD *)(v45 + 96) = v598;
  *(_QWORD *)&v598 = v54;
  *((_QWORD *)&v598 + 1) = v55;
  *(_DWORD *)(v45 + 112) = v599;
  v56 = *(_QWORD *)(v45 + 120);
  v57 = *(_QWORD *)(v45 + 128);
  *(_QWORD *)(v45 + 120) = v600;
  *(_QWORD *)(v45 + 128) = v601;
  v600 = v56;
  v601 = v57;
  *(_DWORD *)(v45 + 136) = v602;
  v58 = *(_QWORD *)(v45 + 144);
  v59 = *(_QWORD *)(v45 + 152);
  *(_QWORD *)(v45 + 144) = v603;
  *(_QWORD *)(v45 + 152) = v604;
  v588 = 0;
  v591 = 0;
  v594 = 0;
  v597 = 0;
  LODWORD(v599) = 0;
  v602 = 0;
  v603 = v58;
  v604 = v59;
  *(_DWORD *)(v45 + 160) = v605;
  v605 = 0;
  v60 = *(void **)(v45 + 168);
  if (v60)
  {
    *(_QWORD *)(v45 + 176) = v60;
    operator delete(v60);
    *(_QWORD *)(v45 + 168) = 0;
    *(_QWORD *)(v45 + 176) = 0;
    *(_QWORD *)(v45 + 184) = 0;
  }
  *(_OWORD *)(v45 + 168) = v606;
  *(_QWORD *)(v45 + 184) = v607;
  v61 = *(_QWORD *)(v45 + 192);
  v62 = *(_QWORD *)(v45 + 200);
  *(_QWORD *)(v45 + 192) = *((_QWORD *)&v607 + 1);
  v606 = 0uLL;
  *(_QWORD *)&v607 = 0;
  *((_QWORD *)&v607 + 1) = v61;
  *(_QWORD *)(v45 + 200) = v608;
  v608 = v62;
  *(_DWORD *)(v45 + 208) = v609;
  v609 = 0;
  v63 = *(void **)(v45 + 216);
  if (v63)
  {
    *(_QWORD *)(v45 + 224) = v63;
    operator delete(v63);
  }
  *(_OWORD *)(v45 + 216) = v610;
  *(_QWORD *)(v45 + 232) = v611;
  v610 = 0uLL;
  v611 = 0;
  sub_1C9909A58((uint64_t)&memptr);
  v64 = *a2;
  sub_1C990A010((uint64_t)&memptr);
  v65 = *(void **)(v64 + 600);
  v66 = v587;
  *(_QWORD *)(v64 + 600) = memptr;
  v67 = *(_QWORD *)(v64 + 608);
  *(_QWORD *)(v64 + 608) = v66;
  memptr = v65;
  v587 = v67;
  *(_DWORD *)(v64 + 616) = v588;
  v588 = 0;
  v68 = *(void **)(v64 + 624);
  v69 = v590;
  *(_QWORD *)(v64 + 624) = v589;
  v70 = *(_QWORD *)(v64 + 632);
  *(_QWORD *)(v64 + 632) = v69;
  v589 = v68;
  v590 = v70;
  *(_DWORD *)(v64 + 640) = v591;
  v591 = 0;
  v71 = *(void **)(v64 + 648);
  v72 = v593;
  *(_QWORD *)(v64 + 648) = v592;
  v73 = *(_QWORD *)(v64 + 656);
  *(_QWORD *)(v64 + 656) = v72;
  v592 = v71;
  v593 = v73;
  *(_DWORD *)(v64 + 664) = v594;
  v594 = 0;
  v74 = *(void **)(v64 + 672);
  v75 = v596;
  *(_QWORD *)(v64 + 672) = v595;
  v76 = *(_QWORD *)(v64 + 680);
  *(_QWORD *)(v64 + 680) = v75;
  v595 = v74;
  v596 = v76;
  *(_DWORD *)(v64 + 688) = v597;
  v597 = 0;
  v77 = (_QWORD *)(v64 + 696);
  v78 = *(void **)(v64 + 696);
  if (v78)
  {
    *(_QWORD *)(v64 + 704) = v78;
    operator delete(v78);
    *v77 = 0;
    *(_QWORD *)(v64 + 704) = 0;
    *(_QWORD *)(v64 + 712) = 0;
    v74 = v595;
  }
  *(_OWORD *)v77 = v598;
  *(_QWORD *)(v64 + 712) = v599;
  v599 = 0;
  v598 = 0uLL;
  free(v74);
  free(v592);
  free(v589);
  free(memptr);
  v79 = *a2;
  sub_1C990A1D0((uint64_t)&memptr);
  v80 = *(void **)(v79 + 720);
  v81 = v587;
  *(_QWORD *)(v79 + 720) = memptr;
  v82 = *(_QWORD *)(v79 + 728);
  *(_QWORD *)(v79 + 728) = v81;
  memptr = v80;
  v587 = v82;
  *(_DWORD *)(v79 + 736) = v588;
  v588 = 0;
  v83 = *(void **)(v79 + 744);
  v84 = v590;
  *(_QWORD *)(v79 + 744) = v589;
  v85 = *(_QWORD *)(v79 + 752);
  *(_QWORD *)(v79 + 752) = v84;
  v589 = v83;
  v590 = v85;
  *(_DWORD *)(v79 + 760) = v591;
  v591 = 0;
  v86 = *(void **)(v79 + 768);
  v87 = v593;
  *(_QWORD *)(v79 + 768) = v592;
  v88 = *(_QWORD *)(v79 + 776);
  *(_QWORD *)(v79 + 776) = v87;
  v592 = v86;
  v593 = v88;
  *(_DWORD *)(v79 + 784) = v594;
  v594 = 0;
  v89 = *(void **)(v79 + 792);
  v90 = v596;
  *(_QWORD *)(v79 + 792) = v595;
  v91 = *(_QWORD *)(v79 + 800);
  *(_QWORD *)(v79 + 800) = v90;
  v595 = v89;
  v596 = v91;
  *(_DWORD *)(v79 + 808) = v597;
  v597 = 0;
  v92 = *(void **)(v79 + 816);
  if (v92)
  {
    *(_QWORD *)(v79 + 824) = v92;
    operator delete(v92);
    *(_QWORD *)(v79 + 816) = 0;
    *(_QWORD *)(v79 + 824) = 0;
    *(_QWORD *)(v79 + 832) = 0;
    v89 = v595;
  }
  *(_OWORD *)(v79 + 816) = v598;
  *(_QWORD *)(v79 + 832) = v599;
  v599 = 0;
  v598 = 0uLL;
  free(v89);
  free(v592);
  free(v589);
  free(memptr);
  v93 = *a2;
  v94 = *(int **)(a1 + 8);
  v95 = *(int **)(*a2 + 120);
  v96 = *v94;
  if (&v94[-*(unsigned int *)(a1 + 20)] == v95)
  {
    v97 = v94[1];
    *v95 = v96;
  }
  else
  {
    *v95 = v96;
    v97 = v94[1];
  }
  v95[1] = v97;
  v98 = *(unsigned int *)(a1 + 20);
  v99 = *(_QWORD *)(a1 + 8) - 4 * v98;
  v100 = (int *)(v99 + 4 * (*(_DWORD *)(a1 + 16) + v98));
  v101 = *(_QWORD *)(v93 + 120);
  v102 = *v100;
  if (v99 == v101)
  {
    v103 = v100[1];
    *(_DWORD *)(v101 + 8) = v102;
  }
  else
  {
    *(_DWORD *)(v101 + 8) = v102;
    v103 = v100[1];
  }
  *(_DWORD *)(v101 + 12) = v103;
  v104 = *(unsigned int *)(a1 + 20);
  v105 = *(_QWORD *)(a1 + 8) - 4 * v104;
  v106 = (int *)(v105 + 4 * (v104 + 2 * *(_DWORD *)(a1 + 16)));
  v107 = *(_QWORD *)(v93 + 120);
  v108 = *v106;
  if (v105 == v107)
  {
    v109 = v106[1];
    *(_DWORD *)(v107 + 16) = v108;
  }
  else
  {
    *(_DWORD *)(v107 + 16) = v108;
    v109 = v106[1];
  }
  *(_DWORD *)(v107 + 20) = v109;
  v110 = *(unsigned int *)(a1 + 20);
  v111 = *(_QWORD *)(a1 + 8) - 4 * v110;
  v112 = (int *)(v111 + 4 * (3 * *(_DWORD *)(a1 + 16) + v110));
  v113 = *(_QWORD *)(v93 + 120);
  v114 = *v112;
  if (v111 == v113)
  {
    v115 = v112[1];
    *(_DWORD *)(v113 + 24) = v114;
  }
  else
  {
    *(_DWORD *)(v113 + 24) = v114;
    v115 = v112[1];
  }
  *(_DWORD *)(v113 + 28) = v115;
  v116 = *(unsigned int *)(a1 + 20);
  v117 = *(_QWORD *)(a1 + 8) - 4 * v116;
  v118 = (int *)(v117 + 4 * (v116 + 4 * *(_DWORD *)(a1 + 16)));
  v119 = *(_QWORD *)(v93 + 120);
  v120 = *v118;
  if (v117 == v119)
  {
    v121 = v118[1];
    *(_DWORD *)(v119 + 32) = v120;
  }
  else
  {
    *(_DWORD *)(v119 + 32) = v120;
    v121 = v118[1];
  }
  *(_DWORD *)(v119 + 36) = v121;
  v122 = *(unsigned int *)(a1 + 20);
  v123 = *(_QWORD *)(a1 + 8) - 4 * v122;
  v124 = (int *)(v123 + 4 * (5 * *(_DWORD *)(a1 + 16) + v122));
  v125 = *(_QWORD *)(v93 + 120);
  v126 = *v124;
  if (v123 == v125)
  {
    v127 = v124[1];
    *(_DWORD *)(v125 + 40) = v126;
  }
  else
  {
    *(_DWORD *)(v125 + 40) = v126;
    v127 = v124[1];
  }
  *(_DWORD *)(v125 + 44) = v127;
  v128 = *(unsigned int *)(a1 + 20);
  v129 = *(_QWORD *)(a1 + 8) - 4 * v128;
  v130 = (int *)(v129 + 4 * (v128 + 6 * *(_DWORD *)(a1 + 16)));
  v131 = *(_QWORD *)(v93 + 120);
  v132 = *v130;
  if (v129 == v131)
  {
    v133 = v130[1];
    *(_DWORD *)(v131 + 48) = v132;
  }
  else
  {
    *(_DWORD *)(v131 + 48) = v132;
    v133 = v130[1];
  }
  *(_DWORD *)(v131 + 52) = v133;
  v134 = *(unsigned int *)(a1 + 20);
  v135 = (_DWORD *)(*(_QWORD *)(a1 + 8) - 4 * v134);
  v136 = &v135[(v134 - *(_DWORD *)(a1 + 16) + 8 * *(_DWORD *)(a1 + 16))];
  v137 = *(_DWORD **)(v93 + 96);
  v138 = *v136;
  if (v135 == v137)
  {
    v139 = v136[1];
    *v135 = v138;
  }
  else
  {
    *v137 = v138;
    v139 = v136[1];
  }
  v137[1] = v139;
  v140 = *(unsigned int *)(a1 + 20);
  v141 = *(_QWORD *)(a1 + 8) - 4 * v140;
  v142 = (int *)(v141 + 4 * (v140 + 8 * *(_DWORD *)(a1 + 16)));
  v143 = *(_QWORD *)(v93 + 96);
  v144 = *v142;
  if (v141 == v143)
  {
    v145 = v142[1];
    *(_DWORD *)(v143 + 8) = v144;
  }
  else
  {
    *(_DWORD *)(v143 + 8) = v144;
    v145 = v142[1];
  }
  *(_DWORD *)(v143 + 12) = v145;
  v146 = *(unsigned int *)(a1 + 20);
  v147 = *(_QWORD *)(a1 + 8) - 4 * v146;
  v148 = (int *)(v147 + 4 * (9 * *(_DWORD *)(a1 + 16) + v146));
  v149 = *(_QWORD *)(v93 + 96);
  v150 = *v148;
  if (v147 == v149)
  {
    v151 = v148[1];
    *(_DWORD *)(v149 + 16) = v150;
  }
  else
  {
    *(_DWORD *)(v149 + 16) = v150;
    v151 = v148[1];
  }
  *(_DWORD *)(v149 + 20) = v151;
  v152 = *(unsigned int *)(a1 + 20);
  v153 = *(_QWORD *)(a1 + 8) - 4 * v152;
  v154 = (int *)(v153 + 4 * (v152 + 10 * *(_DWORD *)(a1 + 16)));
  v155 = *(_QWORD *)(v93 + 96);
  v156 = *v154;
  if (v153 == v155)
  {
    v157 = v154[1];
    *(_DWORD *)(v155 + 24) = v156;
  }
  else
  {
    *(_DWORD *)(v155 + 24) = v156;
    v157 = v154[1];
  }
  *(_DWORD *)(v155 + 28) = v157;
  v158 = *(unsigned int *)(a1 + 20);
  v159 = *(_QWORD *)(a1 + 8) - 4 * v158;
  v160 = (int *)(v159 + 4 * (v158 + 11 * *(_DWORD *)(a1 + 16)));
  v161 = *(_QWORD *)(v93 + 96);
  v162 = *v160;
  if (v159 == v161)
  {
    v163 = v160[1];
    *(_DWORD *)(v161 + 32) = v162;
  }
  else
  {
    *(_DWORD *)(v161 + 32) = v162;
    v163 = v160[1];
  }
  *(_DWORD *)(v161 + 36) = v163;
  v164 = *(unsigned int *)(a1 + 20);
  v165 = *(_QWORD *)(a1 + 8) - 4 * v164;
  v166 = (int *)(v165 + 4 * (v164 + 12 * *(_DWORD *)(a1 + 16)));
  v167 = *(_QWORD *)(v93 + 96);
  v168 = *v166;
  if (v165 == v167)
  {
    v169 = v166[1];
    *(_DWORD *)(v167 + 40) = v168;
  }
  else
  {
    *(_DWORD *)(v167 + 40) = v168;
    v169 = v166[1];
  }
  *(_DWORD *)(v167 + 44) = v169;
  v170 = *(unsigned int *)(a1 + 20);
  v171 = *(_QWORD *)(a1 + 8) - 4 * v170;
  v172 = (int *)(v171 + 4 * (v170 + 13 * *(_DWORD *)(a1 + 16)));
  v173 = *(_QWORD *)(v93 + 96);
  v174 = *v172;
  if (v171 == v173)
  {
    v175 = v172[1];
    *(_DWORD *)(v173 + 48) = v174;
  }
  else
  {
    *(_DWORD *)(v173 + 48) = v174;
    v175 = v172[1];
  }
  *(_DWORD *)(v173 + 52) = v175;
  v176 = *a2;
  v177 = *(unsigned int *)(a1 + 20);
  v178 = *(_QWORD *)(a1 + 8) - 4 * v177;
  v179 = (int *)(v178 + 4 * (v177 + 14 * *(_DWORD *)(a1 + 16)));
  v180 = *(_QWORD *)(*a2 + 360);
  v181 = *v179;
  if (v178 == v180)
  {
    v182 = v179[1];
    *(_DWORD *)(v180 + 40) = v181;
  }
  else
  {
    *(_DWORD *)(v180 + 40) = v181;
    v182 = v179[1];
  }
  *(_DWORD *)(v180 + 44) = v182;
  v183 = *(unsigned int *)(a1 + 20);
  v184 = (_DWORD *)(*(_QWORD *)(a1 + 8) - 4 * v183);
  v185 = &v184[(v183 + 14 * *(_DWORD *)(a1 + 16))];
  v186 = *(_DWORD **)(v176 + 360);
  v187 = *v185;
  if (v184 == v186)
  {
    v188 = v185[1];
    *v184 = v187;
  }
  else
  {
    *v186 = v187;
    v188 = v185[1];
  }
  v186[1] = v188;
  v189 = *(unsigned int *)(a1 + 20);
  v190 = *(_QWORD *)(a1 + 8) - 4 * v189;
  v191 = (int *)(v190 + 4 * (v189 - *(_DWORD *)(a1 + 16) + 16 * *(_DWORD *)(a1 + 16)));
  v192 = *(_QWORD *)(v176 + 360);
  v193 = *v191;
  if (v190 == v192)
  {
    v194 = v191[1];
    *(_DWORD *)(v192 + 32) = v193;
  }
  else
  {
    *(_DWORD *)(v192 + 32) = v193;
    v194 = v191[1];
  }
  *(_DWORD *)(v192 + 36) = v194;
  v195 = *(unsigned int *)(a1 + 20);
  v196 = *(_QWORD *)(a1 + 8) - 4 * v195;
  v197 = (int *)(v196 + 4 * (v195 - *(_DWORD *)(a1 + 16) + 16 * *(_DWORD *)(a1 + 16)));
  v198 = *(_QWORD *)(v176 + 360);
  v199 = *v197;
  if (v196 == v198)
  {
    v200 = v197[1];
    *(_DWORD *)(v198 + 8) = v199;
  }
  else
  {
    *(_DWORD *)(v198 + 8) = v199;
    v200 = v197[1];
  }
  *(_DWORD *)(v198 + 12) = v200;
  v201 = *(unsigned int *)(a1 + 20);
  v202 = *(_QWORD *)(a1 + 8) - 4 * v201;
  v203 = (int *)(v202 + 4 * (v201 + 16 * *(_DWORD *)(a1 + 16)));
  v204 = *(_QWORD *)(v176 + 360);
  v205 = *v203;
  if (v202 == v204)
  {
    v206 = v203[1];
    *(_DWORD *)(v204 + 24) = v205;
  }
  else
  {
    *(_DWORD *)(v204 + 24) = v205;
    v206 = v203[1];
  }
  *(_DWORD *)(v204 + 28) = v206;
  v207 = *(unsigned int *)(a1 + 20);
  v208 = *(_QWORD *)(a1 + 8) - 4 * v207;
  v209 = (int *)(v208 + 4 * (v207 + 16 * *(_DWORD *)(a1 + 16)));
  v210 = *(_QWORD *)(v176 + 360);
  v211 = *v209;
  if (v208 == v210)
  {
    v212 = v209[1];
    *(_DWORD *)(v210 + 16) = v211;
  }
  else
  {
    *(_DWORD *)(v210 + 16) = v211;
    v212 = v209[1];
  }
  *(_DWORD *)(v210 + 20) = v212;
  v213 = *(unsigned int *)(a1 + 20);
  v214 = *(_QWORD *)(a1 + 8) - 4 * v213;
  v215 = (int *)(v214 + 4 * (17 * *(_DWORD *)(a1 + 16) + v213));
  v216 = *(_QWORD *)(v176 + 336);
  v217 = *v215;
  if (v214 == v216)
  {
    v218 = v215[1];
    *(_DWORD *)(v216 + 40) = v217;
  }
  else
  {
    *(_DWORD *)(v216 + 40) = v217;
    v218 = v215[1];
  }
  *(_DWORD *)(v216 + 44) = v218;
  v219 = *(unsigned int *)(a1 + 20);
  v220 = (_DWORD *)(*(_QWORD *)(a1 + 8) - 4 * v219);
  v221 = &v220[(17 * *(_DWORD *)(a1 + 16) + v219)];
  v222 = *(_DWORD **)(v176 + 336);
  v223 = *v221;
  if (v220 == v222)
  {
    v224 = v221[1];
    *v220 = v223;
  }
  else
  {
    *v222 = v223;
    v224 = v221[1];
  }
  v222[1] = v224;
  v225 = *(unsigned int *)(a1 + 20);
  v226 = *(_QWORD *)(a1 + 8) - 4 * v225;
  v227 = (int *)(v226 + 4 * (v225 + 18 * *(_DWORD *)(a1 + 16)));
  v228 = *(_QWORD *)(v176 + 336);
  v229 = *v227;
  if (v226 == v228)
  {
    v230 = v227[1];
    *(_DWORD *)(v228 + 32) = v229;
  }
  else
  {
    *(_DWORD *)(v228 + 32) = v229;
    v230 = v227[1];
  }
  *(_DWORD *)(v228 + 36) = v230;
  v231 = *(unsigned int *)(a1 + 20);
  v232 = *(_QWORD *)(a1 + 8) - 4 * v231;
  v233 = (int *)(v232 + 4 * (v231 + 18 * *(_DWORD *)(a1 + 16)));
  v234 = *(_QWORD *)(v176 + 336);
  v235 = *v233;
  if (v232 == v234)
  {
    v236 = v233[1];
    *(_DWORD *)(v234 + 8) = v235;
  }
  else
  {
    *(_DWORD *)(v234 + 8) = v235;
    v236 = v233[1];
  }
  *(_DWORD *)(v234 + 12) = v236;
  v237 = *(unsigned int *)(a1 + 20);
  v238 = *(_QWORD *)(a1 + 8) - 4 * v237;
  v239 = (int *)(v238 + 4 * (v237 + 19 * *(_DWORD *)(a1 + 16)));
  v240 = *(_QWORD *)(v176 + 336);
  v241 = *v239;
  if (v238 == v240)
  {
    v242 = v239[1];
    *(_DWORD *)(v240 + 24) = v241;
  }
  else
  {
    *(_DWORD *)(v240 + 24) = v241;
    v242 = v239[1];
  }
  *(_DWORD *)(v240 + 28) = v242;
  v243 = *(unsigned int *)(a1 + 20);
  v244 = *(_QWORD *)(a1 + 8) - 4 * v243;
  v245 = (int *)(v244 + 4 * (v243 + 19 * *(_DWORD *)(a1 + 16)));
  v246 = *(_QWORD *)(v176 + 336);
  v247 = *v245;
  if (v244 == v246)
  {
    v248 = v245[1];
    *(_DWORD *)(v246 + 16) = v247;
  }
  else
  {
    *(_DWORD *)(v246 + 16) = v247;
    v248 = v245[1];
  }
  *(_DWORD *)(v246 + 20) = v248;
  v249 = *a2;
  v250 = *(unsigned int *)(a1 + 20);
  v251 = (_DWORD *)(*(_QWORD *)(a1 + 8) - 4 * v250);
  v252 = &v251[(v250 + 20 * *(_DWORD *)(a1 + 16))];
  v253 = *(_DWORD **)(*a2 + 528);
  v254 = *v252;
  if (v251 == v253)
  {
    v255 = v252[1];
    *v251 = v254;
  }
  else
  {
    *v253 = v254;
    v255 = v252[1];
  }
  v253[1] = v255;
  v256 = *(unsigned int *)(a1 + 20);
  v257 = *(_QWORD *)(a1 + 8) - 4 * v256;
  v258 = (int *)(v257 + 4 * (v256 + 21 * *(_DWORD *)(a1 + 16)));
  v259 = *(_QWORD *)(v249 + 528);
  v260 = *v258;
  if (v257 == v259)
  {
    v261 = v258[1];
    *(_DWORD *)(v259 + 8) = v260;
  }
  else
  {
    *(_DWORD *)(v259 + 8) = v260;
    v261 = v258[1];
  }
  *(_DWORD *)(v259 + 12) = v261;
  v262 = *(unsigned int *)(a1 + 20);
  v263 = *(_QWORD *)(a1 + 8) - 4 * v262;
  v264 = (int *)(v263 + 4 * (v262 + 22 * *(_DWORD *)(a1 + 16)));
  v265 = *(_QWORD *)(v249 + 528);
  v266 = *v264;
  if (v263 == v265)
  {
    v267 = v264[1];
    *(_DWORD *)(v265 + 16) = v266;
  }
  else
  {
    *(_DWORD *)(v265 + 16) = v266;
    v267 = v264[1];
  }
  *(_DWORD *)(v265 + 20) = v267;
  v268 = *(unsigned int *)(a1 + 20);
  v269 = *(_QWORD *)(a1 + 8) - 4 * v268;
  v270 = (int *)(v269 + 4 * (v268 + 23 * *(_DWORD *)(a1 + 16)));
  v271 = *(_QWORD *)(v249 + 528);
  v272 = *v270;
  if (v269 == v271)
  {
    v273 = v270[1];
    *(_DWORD *)(v271 + 24) = v272;
  }
  else
  {
    *(_DWORD *)(v271 + 24) = v272;
    v273 = v270[1];
  }
  *(_DWORD *)(v271 + 28) = v273;
  v274 = *(unsigned int *)(a1 + 20);
  v275 = *(_QWORD *)(a1 + 8) - 4 * v274;
  v276 = (int *)(v275 + 4 * (v274 + 24 * *(_DWORD *)(a1 + 16)));
  v277 = *(_QWORD *)(v249 + 528);
  v278 = *v276;
  if (v275 == v277)
  {
    v279 = v276[1];
    *(_DWORD *)(v277 + 32) = v278;
  }
  else
  {
    *(_DWORD *)(v277 + 32) = v278;
    v279 = v276[1];
  }
  *(_DWORD *)(v277 + 36) = v279;
  v280 = *(unsigned int *)(a1 + 20);
  v281 = *(_QWORD *)(a1 + 8) - 4 * v280;
  v282 = (int *)(v281 + 4 * (v280 + 25 * *(_DWORD *)(a1 + 16)));
  v283 = *(_QWORD *)(v249 + 528);
  v284 = *v282;
  if (v281 == v283)
  {
    v285 = v282[1];
    *(_DWORD *)(v283 + 40) = v284;
  }
  else
  {
    *(_DWORD *)(v283 + 40) = v284;
    v285 = v282[1];
  }
  *(_DWORD *)(v283 + 44) = v285;
  v286 = *(unsigned int *)(a1 + 20);
  v287 = *(_QWORD *)(a1 + 8) - 4 * v286;
  v288 = (int *)(v287 + 4 * (v286 + 26 * *(_DWORD *)(a1 + 16)));
  v289 = *(_QWORD *)(v249 + 528);
  v290 = *v288;
  if (v287 == v289)
  {
    v291 = v288[1];
    *(_DWORD *)(v289 + 48) = v290;
  }
  else
  {
    *(_DWORD *)(v289 + 48) = v290;
    v291 = v288[1];
  }
  *(_DWORD *)(v289 + 52) = v291;
  v292 = *(unsigned int *)(a1 + 20);
  v293 = *(_QWORD *)(a1 + 8) - 4 * v292;
  v294 = (int *)(v293 + 4 * (v292 + 27 * *(_DWORD *)(a1 + 16)));
  v295 = *(_QWORD *)(v249 + 528);
  v296 = *v294;
  if (v293 == v295)
  {
    v297 = v294[1];
    *(_DWORD *)(v295 + 56) = v296;
  }
  else
  {
    *(_DWORD *)(v295 + 56) = v296;
    v297 = v294[1];
  }
  *(_DWORD *)(v295 + 60) = v297;
  v298 = *(unsigned int *)(a1 + 20);
  v299 = *(_QWORD *)(a1 + 8) - 4 * v298;
  v300 = (int *)(v299 + 4 * (v298 + 28 * *(_DWORD *)(a1 + 16)));
  v301 = *(_QWORD *)(v249 + 528);
  v302 = *v300;
  if (v299 == v301)
  {
    v303 = v300[1];
    *(_DWORD *)(v301 + 64) = v302;
  }
  else
  {
    *(_DWORD *)(v301 + 64) = v302;
    v303 = v300[1];
  }
  *(_DWORD *)(v301 + 68) = v303;
  v304 = *(unsigned int *)(a1 + 20);
  v305 = *(_QWORD *)(a1 + 8) - 4 * v304;
  v306 = (int *)(v305 + 4 * (v304 + 29 * *(_DWORD *)(a1 + 16)));
  v307 = *(_QWORD *)(v249 + 528);
  v308 = *v306;
  if (v305 == v307)
  {
    v309 = v306[1];
    *(_DWORD *)(v307 + 72) = v308;
  }
  else
  {
    *(_DWORD *)(v307 + 72) = v308;
    v309 = v306[1];
  }
  *(_DWORD *)(v307 + 76) = v309;
  v310 = *(unsigned int *)(a1 + 20);
  v311 = *(_QWORD *)(a1 + 8) - 4 * v310;
  v312 = (int *)(v311 + 4 * (v310 + 30 * *(_DWORD *)(a1 + 16)));
  v313 = *(_QWORD *)(v249 + 528);
  v314 = *v312;
  if (v311 == v313)
  {
    v315 = v312[1];
    *(_DWORD *)(v313 + 80) = v314;
  }
  else
  {
    *(_DWORD *)(v313 + 80) = v314;
    v315 = v312[1];
  }
  *(_DWORD *)(v313 + 84) = v315;
  v316 = *(unsigned int *)(a1 + 20);
  v317 = *(_QWORD *)(a1 + 8) - 4 * v316;
  v318 = (int *)(v317 + 4 * (v316 - *(_DWORD *)(a1 + 16) + 32 * *(_DWORD *)(a1 + 16)));
  v319 = *(_QWORD *)(v249 + 528);
  v320 = *v318;
  if (v317 == v319)
  {
    v321 = v318[1];
    *(_DWORD *)(v319 + 88) = v320;
  }
  else
  {
    *(_DWORD *)(v319 + 88) = v320;
    v321 = v318[1];
  }
  *(_DWORD *)(v319 + 92) = v321;
  v322 = *(unsigned int *)(a1 + 20);
  v323 = *(_QWORD *)(a1 + 8) - 4 * v322;
  v324 = (int *)(v323 + 4 * (v322 + 32 * *(_DWORD *)(a1 + 16)));
  v325 = *(_QWORD *)(v249 + 528);
  v326 = *v324;
  if (v323 == v325)
  {
    v327 = v324[1];
    *(_DWORD *)(v325 + 96) = v326;
  }
  else
  {
    *(_DWORD *)(v325 + 96) = v326;
    v327 = v324[1];
  }
  *(_DWORD *)(v325 + 100) = v327;
  v328 = *(unsigned int *)(a1 + 20);
  v329 = *(_QWORD *)(a1 + 8) - 4 * v328;
  v330 = (int *)(v329 + 4 * (33 * *(_DWORD *)(a1 + 16) + v328));
  v331 = *(_QWORD *)(v249 + 528);
  v332 = *v330;
  if (v329 == v331)
  {
    v333 = v330[1];
    *(_DWORD *)(v331 + 104) = v332;
  }
  else
  {
    *(_DWORD *)(v331 + 104) = v332;
    v333 = v330[1];
  }
  *(_DWORD *)(v331 + 108) = v333;
  v334 = *(unsigned int *)(a1 + 20);
  v335 = *(_QWORD *)(a1 + 8) - 4 * v334;
  v336 = (int *)(v335 + 4 * (v334 + 34 * *(_DWORD *)(a1 + 16)));
  v337 = *(_QWORD *)(v249 + 528);
  v338 = *v336;
  if (v335 == v337)
  {
    v339 = v336[1];
    *(_DWORD *)(v337 + 112) = v338;
  }
  else
  {
    *(_DWORD *)(v337 + 112) = v338;
    v339 = v336[1];
  }
  *(_DWORD *)(v337 + 116) = v339;
  v340 = *(unsigned int *)(a1 + 20);
  v341 = *(_QWORD *)(a1 + 8) - 4 * v340;
  v342 = (int *)(v341 + 4 * (v340 + 35 * *(_DWORD *)(a1 + 16)));
  v343 = *(_QWORD *)(v249 + 528);
  v344 = *v342;
  if (v341 == v343)
  {
    v345 = v342[1];
    *(_DWORD *)(v343 + 120) = v344;
  }
  else
  {
    *(_DWORD *)(v343 + 120) = v344;
    v345 = v342[1];
  }
  *(_DWORD *)(v343 + 124) = v345;
  v346 = *(unsigned int *)(a1 + 20);
  v347 = *(_QWORD *)(a1 + 8) - 4 * v346;
  v348 = (int *)(v347 + 4 * (v346 + 36 * *(_DWORD *)(a1 + 16)));
  v349 = *(_QWORD *)(v249 + 528);
  v350 = *v348;
  if (v347 == v349)
  {
    v351 = v348[1];
    *(_DWORD *)(v349 + 128) = v350;
  }
  else
  {
    *(_DWORD *)(v349 + 128) = v350;
    v351 = v348[1];
  }
  *(_DWORD *)(v349 + 132) = v351;
  v352 = *(unsigned int *)(a1 + 20);
  v353 = *(_QWORD *)(a1 + 8) - 4 * v352;
  v354 = (int *)(v353 + 4 * (v352 + 37 * *(_DWORD *)(a1 + 16)));
  v355 = *(_QWORD *)(v249 + 528);
  v356 = *v354;
  if (v353 == v355)
  {
    v357 = v354[1];
    *(_DWORD *)(v355 + 136) = v356;
  }
  else
  {
    *(_DWORD *)(v355 + 136) = v356;
    v357 = v354[1];
  }
  *(_DWORD *)(v355 + 140) = v357;
  v358 = *(unsigned int *)(a1 + 20);
  v359 = *(_QWORD *)(a1 + 8) - 4 * v358;
  v360 = (int *)(v359 + 4 * (v358 + 38 * *(_DWORD *)(a1 + 16)));
  v361 = *(_QWORD *)(v249 + 528);
  v362 = *v360;
  if (v359 == v361)
  {
    v363 = v360[1];
    *(_DWORD *)(v361 + 144) = v362;
  }
  else
  {
    *(_DWORD *)(v361 + 144) = v362;
    v363 = v360[1];
  }
  *(_DWORD *)(v361 + 148) = v363;
  v364 = *(unsigned int *)(a1 + 20);
  v365 = *(_QWORD *)(a1 + 8) - 4 * v364;
  v366 = (int *)(v365 + 4 * (v364 + 39 * *(_DWORD *)(a1 + 16)));
  v367 = *(_QWORD *)(v249 + 528);
  v368 = *v366;
  if (v365 == v367)
  {
    v369 = v366[1];
    *(_DWORD *)(v367 + 152) = v368;
  }
  else
  {
    *(_DWORD *)(v367 + 152) = v368;
    v369 = v366[1];
  }
  *(_DWORD *)(v367 + 156) = v369;
  v370 = *a2;
  v371 = *(unsigned int *)(a1 + 20);
  v372 = (_DWORD *)(*(_QWORD *)(a1 + 8) - 4 * v371);
  v373 = &v372[(v371 + 40 * *(_DWORD *)(a1 + 16))];
  v374 = *(_DWORD **)(*a2 + 648);
  v375 = *v373;
  if (v372 == v374)
  {
    v376 = v373[1];
    *v372 = v375;
  }
  else
  {
    *v374 = v375;
    v376 = v373[1];
  }
  v374[1] = v376;
  v377 = *(unsigned int *)(a1 + 20);
  v378 = *(_QWORD *)(a1 + 8) - 4 * v377;
  v379 = (int *)(v378 + 4 * (v377 + 41 * *(_DWORD *)(a1 + 16)));
  v380 = *(_QWORD *)(v370 + 648);
  v381 = *v379;
  if (v378 == v380)
  {
    v382 = v379[1];
    *(_DWORD *)(v380 + 8) = v381;
  }
  else
  {
    *(_DWORD *)(v380 + 8) = v381;
    v382 = v379[1];
  }
  *(_DWORD *)(v380 + 12) = v382;
  v383 = *(unsigned int *)(a1 + 20);
  v384 = *(_QWORD *)(a1 + 8) - 4 * v383;
  v385 = (int *)(v384 + 4 * (v383 + 42 * *(_DWORD *)(a1 + 16)));
  v386 = *(_QWORD *)(v370 + 648);
  v387 = *v385;
  if (v384 == v386)
  {
    v388 = v385[1];
    *(_DWORD *)(v386 + 16) = v387;
  }
  else
  {
    *(_DWORD *)(v386 + 16) = v387;
    v388 = v385[1];
  }
  *(_DWORD *)(v386 + 20) = v388;
  v389 = *(unsigned int *)(a1 + 20);
  v390 = *(_QWORD *)(a1 + 8) - 4 * v389;
  v391 = (int *)(v390 + 4 * (v389 + 43 * *(_DWORD *)(a1 + 16)));
  v392 = *(_QWORD *)(v370 + 648);
  v393 = *v391;
  if (v390 == v392)
  {
    v394 = v391[1];
    *(_DWORD *)(v392 + 24) = v393;
  }
  else
  {
    *(_DWORD *)(v392 + 24) = v393;
    v394 = v391[1];
  }
  *(_DWORD *)(v392 + 28) = v394;
  v395 = *(unsigned int *)(a1 + 20);
  v396 = *(_QWORD *)(a1 + 8) - 4 * v395;
  v397 = (int *)(v396 + 4 * (v395 + 44 * *(_DWORD *)(a1 + 16)));
  v398 = *(_QWORD *)(v370 + 648);
  v399 = *v397;
  if (v396 == v398)
  {
    v400 = v397[1];
    *(_DWORD *)(v398 + 32) = v399;
  }
  else
  {
    *(_DWORD *)(v398 + 32) = v399;
    v400 = v397[1];
  }
  *(_DWORD *)(v398 + 36) = v400;
  v401 = *(unsigned int *)(a1 + 20);
  v402 = *(_QWORD *)(a1 + 8) - 4 * v401;
  v403 = (int *)(v402 + 4 * (v401 + 45 * *(_DWORD *)(a1 + 16)));
  v404 = *(_QWORD *)(v370 + 648);
  v405 = *v403;
  if (v402 == v404)
  {
    v406 = v403[1];
    *(_DWORD *)(v404 + 40) = v405;
  }
  else
  {
    *(_DWORD *)(v404 + 40) = v405;
    v406 = v403[1];
  }
  *(_DWORD *)(v404 + 44) = v406;
  v407 = *(unsigned int *)(a1 + 20);
  v408 = *(_QWORD *)(a1 + 8) - 4 * v407;
  v409 = (int *)(v408 + 4 * (v407 + 46 * *(_DWORD *)(a1 + 16)));
  v410 = *(_QWORD *)(v370 + 648);
  v411 = *v409;
  if (v408 == v410)
  {
    v412 = v409[1];
    *(_DWORD *)(v410 + 48) = v411;
  }
  else
  {
    *(_DWORD *)(v410 + 48) = v411;
    v412 = v409[1];
  }
  *(_DWORD *)(v410 + 52) = v412;
  v413 = *(unsigned int *)(a1 + 20);
  v414 = *(_QWORD *)(a1 + 8) - 4 * v413;
  v415 = (int *)(v414 + 4 * (v413 + 47 * *(_DWORD *)(a1 + 16)));
  v416 = *(_QWORD *)(v370 + 648);
  v417 = *v415;
  if (v414 == v416)
  {
    v418 = v415[1];
    *(_DWORD *)(v416 + 56) = v417;
  }
  else
  {
    *(_DWORD *)(v416 + 56) = v417;
    v418 = v415[1];
  }
  *(_DWORD *)(v416 + 60) = v418;
  v419 = *(unsigned int *)(a1 + 20);
  v420 = *(_QWORD *)(a1 + 8) - 4 * v419;
  v421 = (int *)(v420 + 4 * (v419 + 48 * *(_DWORD *)(a1 + 16)));
  v422 = *(_QWORD *)(v370 + 648);
  v423 = *v421;
  if (v420 == v422)
  {
    v424 = v421[1];
    *(_DWORD *)(v422 + 64) = v423;
  }
  else
  {
    *(_DWORD *)(v422 + 64) = v423;
    v424 = v421[1];
  }
  *(_DWORD *)(v422 + 68) = v424;
  v425 = *(unsigned int *)(a1 + 20);
  v426 = *(_QWORD *)(a1 + 8) - 4 * v425;
  v427 = (int *)(v426 + 4 * (v425 + 49 * *(_DWORD *)(a1 + 16)));
  v428 = *(_QWORD *)(v370 + 648);
  v429 = *v427;
  if (v426 == v428)
  {
    v430 = v427[1];
    *(_DWORD *)(v428 + 72) = v429;
  }
  else
  {
    *(_DWORD *)(v428 + 72) = v429;
    v430 = v427[1];
  }
  *(_DWORD *)(v428 + 76) = v430;
  v431 = *(unsigned int *)(a1 + 20);
  v432 = *(_QWORD *)(a1 + 8) - 4 * v431;
  v433 = (int *)(v432 + 4 * (v431 + 50 * *(_DWORD *)(a1 + 16)));
  v434 = *(_QWORD *)(v370 + 648);
  v435 = *v433;
  if (v432 == v434)
  {
    v436 = v433[1];
    *(_DWORD *)(v434 + 80) = v435;
  }
  else
  {
    *(_DWORD *)(v434 + 80) = v435;
    v436 = v433[1];
  }
  *(_DWORD *)(v434 + 84) = v436;
  v437 = *(unsigned int *)(a1 + 20);
  v438 = *(_QWORD *)(a1 + 8) - 4 * v437;
  v439 = (int *)(v438 + 4 * (v437 + 51 * *(_DWORD *)(a1 + 16)));
  v440 = *(_QWORD *)(v370 + 648);
  v441 = *v439;
  if (v438 == v440)
  {
    v442 = v439[1];
    *(_DWORD *)(v440 + 88) = v441;
  }
  else
  {
    *(_DWORD *)(v440 + 88) = v441;
    v442 = v439[1];
  }
  *(_DWORD *)(v440 + 92) = v442;
  v443 = *(unsigned int *)(a1 + 20);
  v444 = *(_QWORD *)(a1 + 8) - 4 * v443;
  v445 = (int *)(v444 + 4 * (v443 + 52 * *(_DWORD *)(a1 + 16)));
  v446 = *(_QWORD *)(v370 + 648);
  v447 = *v445;
  if (v444 == v446)
  {
    v448 = v445[1];
    *(_DWORD *)(v446 + 96) = v447;
  }
  else
  {
    *(_DWORD *)(v446 + 96) = v447;
    v448 = v445[1];
  }
  *(_DWORD *)(v446 + 100) = v448;
  v449 = operator new(0x34uLL);
  v449[12] = 53;
  *(_OWORD *)v449 = xmmword_1C99279E4;
  *((_OWORD *)v449 + 1) = unk_1C99279F4;
  *((_OWORD *)v449 + 2) = xmmword_1C9927A04;
  memptr = 0;
  malloc_type_posix_memalign(&memptr, 0x20uLL, 0x80uLL, 0x49090899uLL);
  v450 = (char *)memptr;
  v451 = *(_QWORD *)(a1 + 8);
  v452 = *(_DWORD *)(a1 + 16);
  *(_DWORD *)memptr = *(_DWORD *)(v451 + 4 * (60 * v452));
  *((_DWORD *)v450 + 1) = *(_DWORD *)(v451 + 4 * ((60 * v452) | 1u));
  *((_DWORD *)v450 + 2) = *(_DWORD *)(v451 + 4 * (61 * v452));
  v453 = (float *)(v450 + 8);
  *((_DWORD *)v450 + 3) = *(_DWORD *)(v451 + 4 * (61 * v452 + 1));
  *((_DWORD *)v450 + 4) = *(_DWORD *)(v451 + 4 * (62 * v452));
  *((_DWORD *)v450 + 5) = *(_DWORD *)(v451 + 4 * ((62 * v452) | 1u));
  *((_DWORD *)v450 + 6) = *(_DWORD *)(v451 + 4 * (63 * v452));
  *((_DWORD *)v450 + 7) = *(_DWORD *)(v451 + 4 * (63 * v452 + 1));
  *((_DWORD *)v450 + 8) = *(_DWORD *)(v451 + 4 * (v452 << 6));
  *((_DWORD *)v450 + 9) = *(_DWORD *)(v451 + 4 * ((v452 << 6) | 1u));
  *((_DWORD *)v450 + 10) = *(_DWORD *)(v451 + 4 * (65 * v452));
  *((_DWORD *)v450 + 11) = *(_DWORD *)(v451 + 4 * (65 * v452 + 1));
  *((_DWORD *)v450 + 12) = *(_DWORD *)(v451 + 4 * (59 * v452));
  *((_DWORD *)v450 + 13) = *(_DWORD *)(v451 + 4 * (59 * v452 + 1));
  *((_DWORD *)v450 + 14) = *(_DWORD *)(v451 + 4 * (58 * v452));
  *((_DWORD *)v450 + 15) = *(_DWORD *)(v451 + 4 * ((58 * v452) | 1u));
  v454 = v449[8] * v452;
  *((_DWORD *)v450 + 16) = *(_DWORD *)(v451 + 4 * v454);
  *((_DWORD *)v450 + 17) = *(_DWORD *)(v451 + 4 * (v454 + 1));
  v455 = v449[9] * v452;
  *((_DWORD *)v450 + 18) = *(_DWORD *)(v451 + 4 * v455);
  *((_DWORD *)v450 + 19) = *(_DWORD *)(v451 + 4 * (v455 + 1));
  v456 = v449[10] * v452;
  *((_DWORD *)v450 + 20) = *(_DWORD *)(v451 + 4 * v456);
  *((_DWORD *)v450 + 21) = *(_DWORD *)(v451 + 4 * (v456 + 1));
  v457 = v449[11] * v452;
  *((_DWORD *)v450 + 22) = *(_DWORD *)(v451 + 4 * v457);
  *((_DWORD *)v450 + 23) = *(_DWORD *)(v451 + 4 * (v457 + 1));
  __p = v449;
  v458 = v449[12] * v452;
  *((_DWORD *)v450 + 24) = *(_DWORD *)(v451 + 4 * v458);
  *((_DWORD *)v450 + 25) = *(_DWORD *)(v451 + 4 * (v458 + 1));
  v584 = 12;
  memptr = 0;
  malloc_type_posix_memalign(&memptr, 0x20uLL, 0x180uLL, 0x49090899uLL);
  v459 = (char *)memptr;
  v583 = memptr;
  v585 = 12;
  v460 = operator new(0x34uLL);
  *v460 = 0u;
  v460[1] = 0u;
  v460[2] = 0u;
  *((_DWORD *)v460 + 12) = 0;
  *(_DWORD *)v460 = 0;
  v461 = 0.0;
  for (i = 4; i != 52; i += 4)
  {
    v461 = v461
         + powf((float)((float)(*v453 - *(v453 - 2)) * (float)(*v453 - *(v453 - 2)))+ (float)((float)(v453[1] - *(v453 - 1)) * (float)(v453[1] - *(v453 - 1))), 0.25);
    *(float *)((char *)v460 + i) = v461;
    v453 += 2;
  }
  v582 = a2;
  v466 = 0;
  v467 = (int *)(v450 + 12);
  v468 = -384;
  v469 = 2;
  v470 = (float32x2_t)vdup_n_s32(0x3727C5ACu);
  do
  {
    v481 = v469 - 3;
    if (v468 == -384)
      v481 = 0;
    if (v469 >= 12)
      v482 = 12;
    else
      v482 = v469;
    v465.i32[0] = *((_DWORD *)v460 + v482);
    v463.i64[0] = *(_QWORD *)((char *)v460 + v466);
    v464.i32[0] = *((_DWORD *)v460 + v481);
    v483 = *(float32x2_t *)&v450[8 * v482];
    v484 = *(float32x2_t *)(v467 - 1);
    v485 = *(float32x2_t *)(v467 - 3);
    v486 = *(float32x2_t *)&v450[8 * v481];
    v487 = &v459[v468 + 384];
    if (v487 == v450)
    {
      v488 = HIDWORD(*(_QWORD *)(v467 - 3));
      *(_DWORD *)v450 = v485.i32[0];
    }
    else
    {
      *(_DWORD *)v487 = v485.i32[0];
      v488 = *(v467 - 2);
    }
    *(_DWORD *)&v459[v468 + 388] = v488;
    v489 = (char *)v583;
    v490 = (char *)v583 + v468;
    v491 = *(v467 - 1);
    if ((char *)v583 + v468 + 384 == v450)
    {
      v471 = *v467;
      *((_DWORD *)v490 + 98) = v491;
    }
    else
    {
      *((_DWORD *)v490 + 98) = v491;
      v471 = *v467;
    }
    v472 = fmaxf(v465.f32[0] - *(float *)&v463.i32[1], 0.00001);
    v473.i32[0] = vdup_lane_s32(*(int32x2_t *)v463.i8, 1).u32[0];
    v473.i32[1] = v465.i32[0];
    v474 = (float32x2_t)vzip1_s32(*(int32x2_t *)v464.f32, *(int32x2_t *)v463.i8);
    *(float32x2_t *)v465.f32 = vmaxnm_f32(vsub_f32(v473, v474), v470);
    v465 = (float32x4_t)vzip1q_s32((int32x4_t)v465, (int32x4_t)v465);
    *(float32x2_t *)v463.i8 = vmaxnm_f32(vsub_f32(*(float32x2_t *)v463.i8, v474), v470);
    v464 = (float32x4_t)vzip1q_s32(v463, v463);
    v475 = vsub_f32(v483, v484);
    v476 = vsub_f32(v483, v485);
    *(float32x2_t *)v477.f32 = vsub_f32(v484, v485);
    *(float32x2_t *)v478.f32 = vsub_f32(v484, v486);
    *(float32x2_t *)v479.f32 = vsub_f32(v485, v486);
    *(_DWORD *)&v489[v468 + 396] = v471;
    v459 = (char *)v583;
    v479.i64[1] = v477.i64[0];
    *(float32x2_t *)&v478.u32[2] = v476;
    *(float32x2_t *)&v477.u32[2] = v475;
    v480 = vdupq_lane_s32(*(int32x2_t *)v463.i8, 1);
    *(float *)&v480.i32[1] = v472;
    *(float32x4_t *)((char *)v583 + v468 + 400) = vmulq_lane_f32(vaddq_f32(vsubq_f32(vdivq_f32(v479, v464), vdivq_f32(v478, v465)), vdivq_f32(v477, (float32x4_t)vzip1q_s32(v480, v480))), *(float32x2_t *)v463.i8, 1);
    v467 += 2;
    v466 += 4;
    ++v469;
    v468 += 32;
  }
  while (v468);
  operator delete(v460);
  v587 = 0;
  v614 = 0;
  malloc_type_posix_memalign(&v614, 0x20uLL, 0, 0x49090899uLL);
  v492 = v614;
  memptr = v614;
  v588 = 0;
  v590 = 0;
  v614 = 0;
  malloc_type_posix_memalign(&v614, 0x20uLL, 0, 0x49090899uLL);
  v589 = v614;
  v591 = 0;
  v593 = 0;
  v614 = 0;
  malloc_type_posix_memalign(&v614, 0x20uLL, 0, 0x49090899uLL);
  v493 = v614;
  v592 = v614;
  v594 = 0;
  v595 = 0;
  v596 = 0;
  v597 = 0;
  v494 = v585;
  *(_OWORD *)v618 = xmmword_1C99274C0;
  v614 = v583;
  v615 = v618;
  *(_QWORD *)&v617 = 0;
  sub_1C990AB18((float *)&v617, (float **)&v614);
  v495 = v617;
  v496 = operator new(0x20uLL);
  v496[2] = 0;
  v496[3] = v495;
  *v496 = &v614;
  v496[1] = &v614;
  v614 = v496;
  v615 = (void **)v496;
  v497 = 1;
  v616 = 1;
  if ((int)v494 <= 0)
  {
    v588 = 1;
    v505 = 2;
    v504 = 1;
    v506 = v582;
    goto LABEL_213;
  }
  v580 = v493;
  v498 = 0;
  v499 = 0;
  v500 = 32 * v494;
  do
  {
    v501 = v614;
    v612 = 0;
    v613 = (float *)v614;
    v617 = xmmword_1C99278B0;
    v618[0] = (char *)v583 + v498;
    v618[1] = &v617;
    sub_1C990AB18((float *)&v612, (float **)v618);
    v502 = v612;
    v503 = operator new(0x20uLL);
    v503[4] = v499;
    v503[5] = 1065353216;
    *((_QWORD *)v503 + 3) = v502;
    *(_QWORD *)v503 = v501;
    *((_QWORD *)v503 + 1) = &v614;
    v501[1] = v503;
    v614 = v503;
    ++v616;
    v618[0] = v503;
    sub_1C98E1858((uint64_t)&v614, &v583, &v613, (float **)v618);
    ++v499;
    v498 += 32;
  }
  while (v500 != v498);
  v504 = v616;
  v497 = v616;
  v588 = v616;
  v505 = (2 * v616);
  if ((_DWORD)v505)
  {
    v506 = v582;
    v493 = v580;
LABEL_213:
    free(v492);
    v507 = (4 * v505 + 31) & 0x7FFFFFFE0;
    v587 = v507 >> 2;
    v618[0] = 0;
    malloc_type_posix_memalign(v618, 0x20uLL, v507, 0x49090899uLL);
    v508 = (char *)v618[0];
    memptr = v618[0];
    goto LABEL_215;
  }
  free(v492);
  v508 = 0;
  memptr = 0;
  v587 = 0;
  v506 = v582;
  v493 = v580;
LABEL_215:
  v509 = v615;
  if (v615 != &v614)
  {
    v510 = v508 + 4;
    do
    {
      *(v510 - 1) = *((_DWORD *)v509 + 6);
      *v510 = *((_DWORD *)v509 + 7);
      v510 += 2;
      v509 = (void **)v509[1];
    }
    while (v509 != &v614);
  }
  v594 = 0;
  free(v493);
  v592 = 0;
  v593 = 0;
  v597 = v504;
  if (v504)
  {
    if (v497)
    {
      v511 = (4 * v497 + 31) & 0x7FFFFFFE0;
      v596 = v511 >> 2;
      v618[0] = 0;
      malloc_type_posix_memalign(v618, 0x20uLL, v511, 0x49090899uLL);
      v512 = (float *)v618[0];
      v595 = v618[0];
    }
    else
    {
      v512 = 0;
    }
  }
  else
  {
    v512 = 0;
    v595 = 0;
    v596 = 0;
  }
  v513 = v615;
  if (v615 != &v614)
  {
    v514 = v615;
    do
    {
      *v512++ = *((float *)v514 + 5) + (float)*((int *)v514 + 4);
      v514 = (void **)v514[1];
    }
    while (v514 != &v614);
  }
  if (v616)
  {
    v515 = (_QWORD **)v614;
    v516 = *v513;
    v516[1] = *((_QWORD *)v614 + 1);
    *v515[1] = v516;
    v616 = 0;
    if (v513 != &v614)
    {
      do
      {
        v517 = (void **)v513[1];
        operator delete(v513);
        v513 = v517;
      }
      while (v517 != &v614);
    }
  }
  free(v583);
  v518 = (int *)operator new(8uLL);
  *(_QWORD *)v518 = 0x63F000000;
  v614 = 0;
  malloc_type_posix_memalign(&v614, 0x20uLL, 0x20uLL, 0x49090899uLL);
  v519 = (float *)v614;
  v614 = 0;
  malloc_type_posix_memalign(&v614, 0x20uLL, 0x20uLL, 0x49090899uLL);
  v520 = (float *)v614;
  *v519 = 0.0;
  *v520 = 0.0;
  sub_1C98E13F4((uint64_t)&memptr, v521);
  v522 = 0.0;
  v523 = 0.0;
  if (!v594)
    goto LABEL_237;
  v523 = *(float *)v592;
  if (v594 == 1)
    goto LABEL_237;
  v524 = (float *)((char *)v592 + 4);
  if (((v594 + 0x3FFFFFFFFFFFFFFELL) & 0x3FFFFFFFFFFFFFFFLL) != 0)
  {
    v525 = ((v594 + 0x3FFFFFFFFFFFFFFELL) & 0x3FFFFFFFFFFFFFFFLL) + 1;
    v526 = (float *)((char *)v592 + 8);
    v527 = v525 & 0x7FFFFFFFFFFFFFFELL;
    do
    {
      v523 = (float)(v523 + *(v526 - 1)) + *v526;
      v526 += 2;
      v527 -= 2;
    }
    while (v527);
    if (v525 == (v525 & 0x7FFFFFFFFFFFFFFELL))
      goto LABEL_237;
    v524 += v525 & 0x7FFFFFFFFFFFFFFELL;
  }
  do
  {
    v528 = *v524++;
    v523 = v523 + v528;
  }
  while (v524 != (float *)((char *)v592 + 4 * v594));
LABEL_237:
  v529 = (float *)v595;
  v530 = (float *)v592;
  if (v523 < 1.0e-12)
    v523 = 1.0e-12;
  *((_DWORD *)v519 + 1) = *v518;
  v531 = (float)v518[1];
  if (*v529 < v531)
  {
    v532 = 0;
    v522 = 0.0;
    v533 = 1;
    do
    {
      v522 = v522 + v530[v532];
      v532 = v533;
      v534 = v529[v533++];
    }
    while (v534 < v531);
  }
  v520[1] = v522 / v523;
  v519[2] = 1.0;
  v520[2] = 1.0;
  operator delete(v518);
  v536 = 0;
  v537 = *v506;
  do
  {
    v535.f32[0] = (float)(int)v536 * 0.0625;
    if (*v519 >= v535.f32[0])
    {
      v549 = *v520;
    }
    else if (v519[2] <= v535.f32[0])
    {
      v549 = v520[2];
    }
    else
    {
      v539 = 3;
      v540 = v519;
      do
      {
        v541 = v539 >> 1;
        v542 = &v540[v539 >> 1];
        v544 = *v542;
        v543 = v542 + 1;
        v539 += ~(v539 >> 1);
        if (v544 > v535.f32[0])
          v539 = v541;
        else
          v540 = v543;
      }
      while (v539);
      v546 = *(v540 - 1);
      v547 = v535.f32[0] - v546;
      v548 = *v540 - v546;
      if (v548 < 1.0e-12)
        v548 = 1.0e-12;
      v535.f32[0] = v547 / v548;
      v545 = v520[((unint64_t)((char *)v540 - (char *)v519) >> 2) - 1];
      v549 = v545
           + (float)((float)(*(float *)((char *)v520 + (((char *)v540 - (char *)v519) & 0x3FFFFFFFCLL)) - v545)
                   * v535.f32[0]);
    }
    v550 = v588;
    if (v588 <= 0)
    {
      *(_QWORD *)&v617 = 0;
      v535.i32[0] = 0;
      goto LABEL_244;
    }
    sub_1C98E13F4((uint64_t)&memptr, v535);
    if (!v594)
    {
      v551 = 0.0;
      goto LABEL_268;
    }
    v551 = *(float *)v592;
    if (v594 == 1)
      goto LABEL_268;
    v552 = (float *)((char *)v592 + 4);
    if (((v594 + 0x3FFFFFFFFFFFFFFELL) & 0x3FFFFFFFFFFFFFFFLL) == 0)
      goto LABEL_265;
    v553 = ((v594 + 0x3FFFFFFFFFFFFFFELL) & 0x3FFFFFFFFFFFFFFFLL) + 1;
    v554 = (float *)((char *)v592 + 8);
    v555 = v553 & 0x7FFFFFFFFFFFFFFELL;
    do
    {
      v551 = (float)(v551 + *(v554 - 1)) + *v554;
      v554 += 2;
      v555 -= 2;
    }
    while (v555);
    if (v553 != (v553 & 0x7FFFFFFFFFFFFFFELL))
    {
      v552 += v553 & 0x7FFFFFFFFFFFFFFELL;
      do
      {
LABEL_265:
        v556 = *v552++;
        v551 = v551 + v556;
      }
      while (v552 != (float *)((char *)v592 + 4 * v594));
    }
LABEL_268:
    v557 = (v550 - 1);
    if (v550 < 2)
    {
LABEL_276:
      v563 = (uint64_t *)((char *)memptr + 4 * (2 * v557));
      *(_QWORD *)&v617 = 0;
      if (memptr == &v617)
        v535.i64[0] = *v563;
      else
        v535.i32[0] = *(_DWORD *)v563;
      *(_QWORD *)&v617 = *v563;
    }
    else
    {
      v558 = 0;
      v559 = v551 * v549;
      v560 = 0.0;
      while (1)
      {
        v561 = v560 + *((float *)v592 + v558);
        if (v560 <= v559 && v559 <= v561)
          break;
        ++v558;
        v560 = v561;
        if (v557 == v558)
          goto LABEL_276;
      }
      v564 = v561 - v560;
      v565 = 0.0;
      if (v564 > 0.0)
        v565 = (float)-(float)(v560 - (float)(v549 * v551)) / v564;
      v583 = (char *)memptr + 4 * (2 * v558);
      v584 = (v558 << 33) | 2;
      *(float *)v618 = 1.0 - v565;
      *((float *)v618 + 1) = v565;
      v614 = &v583;
      v615 = v618;
      *(_QWORD *)&v617 = 0;
      sub_1C98E1788((float *)&v617, (float **)&v614);
      v535.i32[0] = v617;
    }
LABEL_244:
    v538 = (_DWORD *)(*(_QWORD *)(v537 + 768) + 8 * v536);
    *v538 = v535.i32[0];
    v538[1] = DWORD1(v617);
    ++v536;
  }
  while (v536 != 17);
  v566 = 0;
  v567 = v582;
  do
  {
    switch(v566)
    {
      case 0:
        v568 = (uint64_t *)(*v567 + 120);
        v569 = (uint64_t *)(*v567 + 72);
        break;
      case 1:
        v568 = (uint64_t *)(*v567 + 96);
        v569 = (uint64_t *)(*v567 + 48);
        break;
      case 2:
        v568 = (uint64_t *)(*v567 + 360);
        v569 = (uint64_t *)(*v567 + 312);
        break;
      case 3:
        v568 = (uint64_t *)(*v567 + 336);
        v569 = (uint64_t *)(*v567 + 288);
        break;
      case 4:
        v568 = (uint64_t *)(*v567 + 528);
        v569 = (uint64_t *)(*v567 + 504);
        break;
      case 5:
        v568 = (uint64_t *)(*v567 + 648);
        v569 = (uint64_t *)(*v567 + 624);
        break;
      case 6:
        v571 = *v567;
        v568 = (uint64_t *)(*v567 + 768);
LABEL_296:
        v569 = (uint64_t *)(v571 + 744);
        break;
      default:
        v570 = atomic_load((unsigned __int8 *)&qword_1EF9213B8);
        if ((v570 & 1) == 0 && __cxa_guard_acquire(&qword_1EF9213B8))
        {
          qword_1EF9213A0 = 0;
          *(_QWORD *)algn_1EF9213A8 = 0;
          v614 = 0;
          malloc_type_posix_memalign(&v614, 0x20uLL, 0, 0x49090899uLL);
          qword_1EF9213A0 = (uint64_t)v614;
          dword_1EF9213B0 = 0;
          __cxa_guard_release(&qword_1EF9213B8);
        }
        switch(v566)
        {
          case 0:
            v568 = &qword_1EF9213A0;
            v569 = (uint64_t *)(*v567 + 72);
            goto LABEL_297;
          case 1:
            v568 = &qword_1EF9213A0;
            v569 = (uint64_t *)(*v567 + 48);
            goto LABEL_297;
          case 2:
            v568 = &qword_1EF9213A0;
            v569 = (uint64_t *)(*v567 + 312);
            goto LABEL_297;
          case 3:
            v568 = &qword_1EF9213A0;
            v569 = (uint64_t *)(*v567 + 288);
            goto LABEL_297;
          case 4:
            v568 = &qword_1EF9213A0;
            v569 = (uint64_t *)(*v567 + 504);
            goto LABEL_297;
          case 5:
            v568 = &qword_1EF9213A0;
            v569 = (uint64_t *)(*v567 + 624);
            goto LABEL_297;
          case 6:
            v571 = *v567;
            v568 = &qword_1EF9213A0;
            goto LABEL_296;
          default:
            v579 = atomic_load((unsigned __int8 *)&qword_1EF921398);
            if ((v579 & 1) != 0 || !__cxa_guard_acquire(&qword_1EF921398))
            {
              v569 = &qword_1EF921380;
            }
            else
            {
              v569 = &qword_1EF921380;
              qword_1EF921380 = 0;
              *(_QWORD *)algn_1EF921388 = 0;
              v614 = 0;
              malloc_type_posix_memalign(&v614, 0x20uLL, 0, 0x49090899uLL);
              qword_1EF921380 = (uint64_t)v614;
              dword_1EF921390 = 0;
              __cxa_guard_release(&qword_1EF921398);
            }
            v568 = &qword_1EF9213A0;
            goto LABEL_298;
        }
    }
LABEL_297:
    if (v569 != v568)
    {
LABEL_298:
      v572 = (2 * *((_DWORD *)v568 + 4));
      if ((_DWORD)v572)
      {
        v573 = (void *)*v569;
        if (v569[1] >= v572)
        {
          v574 = 4 * v572;
        }
        else
        {
          free(v573);
          v574 = 4 * v572;
          v575 = (v574 + 31) & 0x7FFFFFFE0;
          *v569 = 0;
          v569[1] = v575 >> 2;
          v614 = 0;
          malloc_type_posix_memalign(&v614, 0x20uLL, v575, 0x49090899uLL);
          v573 = v614;
          *v569 = (uint64_t)v614;
        }
        memcpy(v573, (const void *)*v568, v574);
      }
      else
      {
        free((void *)*v569);
        *v569 = 0;
        v569[1] = 0;
      }
      *((_DWORD *)v569 + 4) = *((_DWORD *)v568 + 4);
    }
    v567 = v582;
    switch(v566)
    {
      case 0:
        v576 = (uint64_t *)(*v582 + 192);
        break;
      case 1:
        v576 = (uint64_t *)(*v582 + 144);
        break;
      case 2:
        v576 = (uint64_t *)(*v582 + 432);
        break;
      case 3:
        v576 = (uint64_t *)(*v582 + 384);
        break;
      case 4:
        v576 = (uint64_t *)(*v582 + 552);
        break;
      case 5:
        v576 = (uint64_t *)(*v582 + 672);
        break;
      case 6:
        v576 = (uint64_t *)(*v582 + 792);
        break;
      default:
        v577 = atomic_load((unsigned __int8 *)&qword_1EF9213F0);
        v576 = &qword_1EF9213C0;
        v567 = v582;
        if ((v577 & 1) == 0)
        {
          if (__cxa_guard_acquire(&qword_1EF9213F0))
          {
            qword_1EF9213C0 = 0;
            *(_QWORD *)algn_1EF9213C8 = 0;
            v614 = 0;
            malloc_type_posix_memalign(&v614, 0x20uLL, 0, 0x49090899uLL);
            qword_1EF9213C0 = (uint64_t)v614;
            dword_1EF9213D0 = 0;
            qword_1EF9213E0 = 0;
            unk_1EF9213E8 = 0;
            qword_1EF9213D8 = 0;
            __cxa_guard_release(&qword_1EF9213F0);
          }
          v567 = v582;
        }
        break;
    }
    LOBYTE(v614) = 4;
    sub_1C98E11CC((uint64_t)(v576 + 3), v576[4] - v576[3], (const char *)&v614);
    v578 = *((unsigned int *)v576 + 4);
    if ((_DWORD)v578)
      memset_pattern16((void *)*v576, &unk_1C9927910, 4 * v578);
    ++v566;
  }
  while (v566 != 7);
  free(v520);
  free(v519);
  free(v595);
  free(v592);
  free(v589);
  free(memptr);
  free(v450);
  operator delete(__p);
}

char *sub_1C98E11CC(uint64_t a1, size_t a2, const char *a3)
{
  unint64_t v6;
  char *v7;
  char *result;
  uint64_t v9;
  size_t v10;
  char *v11;
  char *v12;
  char *v13;
  size_t v14;
  unint64_t v15;
  unint64_t v17;
  int8x16_t v18;
  int8x16_t *v19;
  unint64_t v20;
  int8x8_t v21;
  unint64_t v22;
  int8x8_t *v23;
  BOOL v24;
  unint64_t v25;
  char *v26;
  unint64_t v27;
  int8x16_t v28;
  int8x16_t *v29;
  unint64_t v30;
  unint64_t v31;
  int8x8_t v32;
  unint64_t v33;
  int8x8_t *v34;

  v6 = *(_QWORD *)(a1 + 16);
  v7 = *(char **)a1;
  result = v7;
  if (v6 - (unint64_t)v7 < a2)
  {
    if (v7)
    {
      *(_QWORD *)(a1 + 8) = v7;
      operator delete(v7);
      v6 = 0;
      *(_QWORD *)a1 = 0;
      *(_QWORD *)(a1 + 8) = 0;
      *(_QWORD *)(a1 + 16) = 0;
    }
    if ((a2 & 0x8000000000000000) != 0)
      goto LABEL_52;
    v9 = 2 * v6;
    if (2 * v6 <= a2)
      v9 = a2;
    v10 = v6 >= 0x3FFFFFFFFFFFFFFFLL ? 0x7FFFFFFFFFFFFFFFLL : v9;
    if ((v10 & 0x8000000000000000) != 0)
LABEL_52:
      abort();
    v11 = (char *)operator new(v10);
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 16) = &v11[v10];
    result = (char *)memset(v11, *(unsigned __int8 *)a3, a2);
    v12 = &v11[a2];
    goto LABEL_40;
  }
  v13 = *(char **)(a1 + 8);
  v14 = v13 - v7;
  if (v13 - v7 >= a2)
    v15 = a2;
  else
    v15 = v13 - v7;
  if (v15)
  {
    if (v15 < 8)
      goto LABEL_32;
    if (v7 < a3 + 1 && &v7[v15] > a3)
      goto LABEL_32;
    if (v15 >= 0x20)
    {
      v17 = v15 & 0xFFFFFFFFFFFFFFE0;
      v18 = vld1q_dup_s8(a3);
      v19 = (int8x16_t *)(v7 + 16);
      v20 = v15 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v19[-1] = v18;
        *v19 = v18;
        v19 += 2;
        v20 -= 32;
      }
      while (v20);
      if (v15 == v17)
        goto LABEL_33;
      if ((v15 & 0x18) == 0)
      {
        v15 &= 0x1Fu;
        result = &v7[v17];
        do
        {
LABEL_32:
          *result++ = *a3;
          --v15;
        }
        while (v15);
        goto LABEL_33;
      }
    }
    else
    {
      v17 = 0;
    }
    result = &v7[v15 & 0xFFFFFFFFFFFFFFF8];
    v21 = vld1_dup_s8(a3);
    v22 = v17 - (v15 & 0xFFFFFFFFFFFFFFF8);
    v23 = (int8x8_t *)&v7[v17];
    do
    {
      *v23++ = v21;
      v22 += 8;
    }
    while (v22);
    if (v15 != (v15 & 0xFFFFFFFFFFFFFFF8))
    {
      v15 &= 7u;
      goto LABEL_32;
    }
  }
LABEL_33:
  v24 = a2 >= v14;
  v25 = a2 - v14;
  if (v25 == 0 || !v24)
  {
    v12 = &v7[a2];
LABEL_40:
    *(_QWORD *)(a1 + 8) = v12;
    return result;
  }
  v26 = &v13[v25];
  if (v25 < 8 || v13 < a3 + 1 && v26 > a3)
    goto LABEL_50;
  if (v25 >= 0x20)
  {
    v27 = v25 & 0xFFFFFFFFFFFFFFE0;
    v28 = vld1q_dup_s8(a3);
    v29 = (int8x16_t *)(v13 + 16);
    v30 = v25 & 0xFFFFFFFFFFFFFFE0;
    do
    {
      v29[-1] = v28;
      *v29 = v28;
      v29 += 2;
      v30 -= 32;
    }
    while (v30);
    if (v25 == v27)
      goto LABEL_51;
    if ((v25 & 0x18) == 0)
    {
      v13 += v27;
      goto LABEL_50;
    }
  }
  else
  {
    v27 = 0;
  }
  v31 = v25 & 0xFFFFFFFFFFFFFFF8;
  v32 = vld1_dup_s8(a3);
  v33 = v27 - (v25 & 0xFFFFFFFFFFFFFFF8);
  v34 = (int8x8_t *)&v13[v27];
  do
  {
    *v34++ = v32;
    v33 += 8;
  }
  while (v33);
  if (v25 == v31)
    goto LABEL_51;
  v13 += v31;
  do
LABEL_50:
    *v13++ = *a3;
  while (v13 != v26);
LABEL_51:
  *(_QWORD *)(a1 + 8) = v26;
  return result;
}

void sub_1C98E13F4(uint64_t a1, float32x4_t a2)
{
  int v2;
  uint64_t v3;
  unint64_t v5;
  _QWORD *v6;
  size_t v7;
  unint64_t v8;
  float32x2_t *v9;
  size_t v10;
  float32x2_t *v11;
  float32x2_t *v12;
  uint64_t v13;
  float *v14;
  float32_t v15;
  float32_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  float32x2_t *v22;
  float32x2_t *v23;
  unint64_t v24;
  BOOL v25;
  BOOL v26;
  BOOL v27;
  BOOL v28;
  BOOL v29;
  float32x2_t *v30;
  float32x4_t *v31;
  float32x4_t *v32;
  uint64_t v33;
  float32x4_t v34;
  float32x4_t v35;
  int32x4_t v36;
  int32x4_t v37;
  float32x4_t v38;
  int8x16_t v39;
  int16x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  _DWORD *v43;
  uint64_t v44;
  float32x2_t *v45;
  uint64_t v46;
  float *v47;
  float32_t v48;
  float32_t v49;
  void *memptr;
  float32x4x2_t v51;

  v2 = *(_DWORD *)(a1 + 16);
  v3 = (v2 - 1);
  if (*(_DWORD *)(a1 + 64) == (_DWORD)v3)
    return;
  v5 = v3 & ~((int)v3 >> 31);
  *(_DWORD *)(a1 + 64) = v5;
  if (v2 < 2)
  {
    v6 = (_QWORD *)(a1 + 48);
    free(*(void **)(a1 + 48));
    *v6 = 0;
    *(_QWORD *)(a1 + 56) = 0;
    *(_DWORD *)(a1 + 40) = v5;
    free(*(void **)(a1 + 24));
    *(_QWORD *)(a1 + 24) = 0;
    *(_QWORD *)(a1 + 32) = 0;
    return;
  }
  if (*(_QWORD *)(a1 + 56) < v5)
  {
    free(*(void **)(a1 + 48));
    v7 = (4 * v5 + 31) & 0x3FFFFFFE0;
    *(_QWORD *)(a1 + 48) = 0;
    *(_QWORD *)(a1 + 56) = v7 >> 2;
    memptr = 0;
    malloc_type_posix_memalign(&memptr, 0x20uLL, v7, 0x49090899uLL);
    *(_QWORD *)(a1 + 48) = memptr;
  }
  *(_DWORD *)(a1 + 40) = v5;
  v8 = (2 * v5);
  v9 = *(float32x2_t **)(a1 + 24);
  if (*(_QWORD *)(a1 + 32) < v8)
  {
    free(v9);
    v10 = (4 * v8 + 31) & 0x7FFFFFFE0;
    *(_QWORD *)(a1 + 24) = 0;
    *(_QWORD *)(a1 + 32) = v10 >> 2;
    memptr = 0;
    malloc_type_posix_memalign(&memptr, 0x20uLL, v10, 0x49090899uLL);
    v9 = (float32x2_t *)memptr;
    *(_QWORD *)(a1 + 24) = memptr;
  }
  v11 = *(float32x2_t **)a1;
  v12 = *(float32x2_t **)(a1 + 48);
  if (*(float32x2_t **)a1 != v9)
  {
    v14 = (float *)&v11[1];
    do
    {
      v15 = *v14 - *(v14 - 2);
      v9->f32[0] = v15;
      v16 = v14[1] - *(v14 - 1);
      v9->f32[1] = v16;
      a2.f32[0] = sqrtf((float)(v15 * v15) + (float)(v16 * v16));
      v12->i32[0] = a2.i32[0];
      if (a2.f32[0] < 0.000001)
      {
        v12->i32[0] = 0;
        a2.i64[0] = 0;
      }
      else
      {
        *(float32x2_t *)a2.f32 = vdiv_f32(*v9, (float32x2_t)vdup_lane_s32(*(int32x2_t *)a2.f32, 0));
      }
      *v9++ = *(float32x2_t *)a2.f32;
      v12 = (float32x2_t *)((char *)v12 + 4);
      v14 += 2;
      --v3;
    }
    while (v3);
    return;
  }
  if (v2 >= 9)
  {
    v17 = v3;
    v18 = 8 * v3 - 8;
    v19 = (unint64_t)v9 + v18 + 4;
    v20 = (char *)v9 + v18;
    v13 = 0;
    if (v19 < (unint64_t)v9 + 4 || v20 < (char *)v9)
      goto LABEL_53;
    v22 = &v9[v17];
    v23 = (float32x2_t *)((char *)v12 + 4 * v3);
    v24 = (unint64_t)&v11[v17 + 1];
    v25 = (unint64_t)v9 >= v24 || v11 >= v22;
    v26 = !v25;
    v27 = (unint64_t)v12 >= v24 || v11 >= v23;
    v28 = !v27;
    v29 = v12 >= v22 || v9 >= v23;
    if (!v29 || v26 || v28)
      goto LABEL_53;
    v13 = v3 & 0xFFFFFFFC;
    v30 = v11 + 1;
    a2 = (float32x4_t)vdupq_n_s32(0x358637BDu);
    v31 = (float32x4_t *)v9;
    v32 = *(float32x4_t **)(a1 + 48);
    v33 = v13;
    while (1)
    {
      v34 = vsubq_f32(*(float32x4_t *)v30->f32, *(float32x4_t *)v30[-1].f32);
      v35 = vsubq_f32(*(float32x4_t *)v30[2].f32, *(float32x4_t *)v30[1].f32);
      *v31 = v34;
      v31[1] = v35;
      v36 = (int32x4_t)vmulq_f32(v35, v35);
      v37 = (int32x4_t)vmulq_f32(v34, v34);
      v38 = vsqrtq_f32(vaddq_f32((float32x4_t)vuzp1q_s32(v37, v36), (float32x4_t)vuzp2q_s32(v37, v36)));
      *v32 = v38;
      v39 = (int8x16_t)vcgeq_f32(v38, a2);
      v40 = vmovn_s32((int32x4_t)vmvnq_s8(v39));
      v41 = *v31;
      v42.i32[0] = vdupq_lane_s32(*(int32x2_t *)v31->f32, 1).u32[0];
      v42.i32[1] = HIDWORD(*(unsigned __int128 *)v31);
      v41.i32[1] = v31->i64[1];
      v41.i32[2] = v31[1].i32[0];
      v41.i32[3] = v31[1].i32[2];
      v42.i32[2] = v31[1].i32[1];
      v42.i32[3] = v31[1].i32[3];
      if ((v40.i8[0] & 1) != 0)
      {
        v32->i32[0] = 0;
        if ((v40.i8[2] & 1) == 0)
        {
LABEL_45:
          if ((v40.i8[4] & 1) == 0)
            goto LABEL_46;
          goto LABEL_50;
        }
      }
      else if ((v40.i8[2] & 1) == 0)
      {
        goto LABEL_45;
      }
      v32->i32[1] = 0;
      if ((v40.i8[4] & 1) == 0)
      {
LABEL_46:
        if ((v40.i8[6] & 1) != 0)
          goto LABEL_51;
        goto LABEL_42;
      }
LABEL_50:
      v32->i32[2] = 0;
      if ((v40.i8[6] & 1) != 0)
LABEL_51:
        v32->i32[3] = 0;
LABEL_42:
      v51.val[0] = (float32x4_t)vandq_s8((int8x16_t)vdivq_f32(v41, v38), v39);
      v51.val[1] = (float32x4_t)vandq_s8((int8x16_t)vdivq_f32(v42, v38), v39);
      vst2q_f32(v31->f32, v51);
      v31 += 2;
      ++v32;
      v30 += 4;
      v33 -= 4;
      if (!v33)
      {
        if (v13 != v3)
          goto LABEL_53;
        return;
      }
    }
  }
  v13 = 0;
LABEL_53:
  v43 = (_DWORD *)v12 + v13;
  v44 = v13;
  v45 = &v9[v13];
  v46 = v3 - v13;
  v47 = (float *)&v11[v44 + 1];
  do
  {
    v48 = *v47 - *(v47 - 2);
    v49 = v47[1] - *(v47 - 1);
    v45->f32[0] = v48;
    v45->f32[1] = v49;
    a2.f32[0] = sqrtf((float)(v48 * v48) + (float)(v49 * v49));
    *v43 = a2.i32[0];
    if (a2.f32[0] < 0.000001)
    {
      *v43 = 0;
      a2.i64[0] = 0;
    }
    else
    {
      *(float32x2_t *)a2.f32 = vdiv_f32(*v45, (float32x2_t)vdup_lane_s32(*(int32x2_t *)a2.f32, 0));
    }
    *v45++ = *(float32x2_t *)a2.f32;
    ++v43;
    v47 += 2;
    --v46;
  }
  while (v46);
}

float *sub_1C98E1788(float *result, float **a2)
{
  float *v2;
  uint64_t v3;
  float *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  float v10;
  float *v11;
  float v12;
  uint64_t v13;
  uint64_t v14;
  float v15;
  float v16;
  uint64_t v17;

  v2 = result;
  v3 = *(_QWORD *)*a2;
  if ((float *)(v3 - 4 * *((unsigned int *)*a2 + 3)) == result || (v4 = a2[1], v4 == result))
  {
    v17 = 0;
    result = (float *)sub_1C98E1788(&v17);
    *(_QWORD *)v2 = v17;
  }
  else
  {
    v5 = *((unsigned int *)*a2 + 2);
    v6 = (2 * v5);
    if ((_DWORD)v6)
    {
      v7 = 0;
      v8 = 4 * v6;
      v9 = 4 * v5;
      v10 = 0.0;
      v11 = a2[1];
      do
      {
        v12 = *v11++;
        v10 = v10 + (float)(*(float *)(v3 + v7) * v12);
        v7 += v9;
      }
      while (v8 != v7);
      v13 = 0;
      *result = v10;
      v14 = v3 + 4;
      v15 = 0.0;
      do
      {
        v16 = *v4++;
        v15 = v15 + (float)(*(float *)(v14 + v13) * v16);
        v13 += v9;
      }
      while (v8 != v13);
    }
    else
    {
      *result = 0.0;
      v15 = 0.0;
    }
    result[1] = v15;
  }
  return result;
}

float *sub_1C98E1858(uint64_t a1, _QWORD *a2, float **a3, float **a4)
{
  float *v8;
  float *v9;
  float v10;
  uint64_t v11;
  float v12;
  float v13;
  float v14;
  float *v15;
  float v16;
  int v17;
  int v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float *result;
  __n128 v26;
  uint64_t v27;
  float **v29;
  uint64_t v30;
  _QWORD *v31;
  float **v32;
  float v33;
  float v34;
  _BOOL4 v35;
  int v36;
  BOOL v37;
  float v38;
  float v39;
  float v40;
  uint64_t v41;
  float v42[4];
  float *v43[2];

  v8 = *a3;
  v9 = *a4;
  v38 = (*a3)[5] + (float)*((int *)*a3 + 4);
  v39 = (float)*((int *)*a4 + 4);
  v40 = (*a4)[5];
  v10 = (float)(v40 + (float)(v38 + v39)) * 0.5;
  v11 = (int)v10;
  v12 = (float)(int)v10;
  v13 = v10 - v12;
  v14 = (float)(v13 * v13) * v13;
  v15 = (float *)(*a2 + 32 * v11);
  v16 = (float)(v13 * v13) * 3.0;
  v42[0] = 1.0 - (float)(v16 - (float)(v14 * 2.0));
  v42[1] = v16 + (float)(v14 * -2.0);
  v42[2] = (float)(v14 + (float)((float)(v13 * v13) * -2.0)) + v13;
  v42[3] = v14 - (float)(v13 * v13);
  v43[0] = v15;
  v43[1] = v42;
  v41 = 0;
  sub_1C990AB18((float *)&v41, v43);
  v17 = v41;
  v18 = HIDWORD(v41);
  v19 = *(float *)&v41 - v8[6];
  v20 = *((float *)&v41 + 1) - v8[7];
  v21 = v9[6] - *(float *)&v41;
  v22 = v9[7] - *((float *)&v41 + 1);
  v23 = sqrtf((float)(v19 * v19) + (float)(v20 * v20));
  v24 = sqrtf((float)(v21 * v21) + (float)(v22 * v22));
  result = (float *)operator new(0x20uLL);
  *((_DWORD *)result + 4) = v11;
  result[5] = v13;
  *((_DWORD *)result + 6) = v17;
  *((_DWORD *)result + 7) = v18;
  v27 = *(_QWORD *)v9;
  *(_QWORD *)(v27 + 8) = result;
  *(_QWORD *)result = v27;
  *(_QWORD *)v9 = result;
  *((_QWORD *)result + 1) = v9;
  ++*(_QWORD *)(a1 + 16);
  v43[0] = result;
  if (v23 >= 0.0001 || v24 >= 0.0001)
  {
    v26.n128_f32[0] = (float)(v40 + v39) - (float)(v13 + v12);
    if (v23 < 0.0001)
    {
      if (v26.n128_f32[0] <= 0.0001)
        return result;
      v29 = v43;
      v30 = a1;
      v31 = a2;
      v32 = a4;
      return (float *)sub_1C98E1858(v30, v31, v29, v32, v26);
    }
    v33 = (float)(v13 + v12) - v38;
    if (v24 < 0.0001)
    {
      v26.n128_u32[0] = 953267991;
      if (v33 <= 0.0001)
        return result;
      goto LABEL_26;
    }
    v34 = (float)((float)(v19 / v23) * (float)(v21 / v24)) + (float)((float)(v20 / v23) * (float)(v22 / v24));
    v35 = v34 < 0.85 || v23 > 25.0;
    v36 = v33 > 0.3 || v35;
    if (v24 > 25.0 || (v34 >= 0.85 ? (v37 = v26.n128_f32[0] <= 0.3) : (v37 = 0), !v37))
    {
      result = (float *)sub_1C98E1858(a1, a2, v43, a4, v26);
      if ((v36 & 1) == 0)
        return result;
      goto LABEL_26;
    }
    if (v36)
    {
LABEL_26:
      v32 = v43;
      v30 = a1;
      v31 = a2;
      v29 = a3;
      return (float *)sub_1C98E1858(v30, v31, v29, v32, v26);
    }
  }
  return result;
}

uint64_t *sub_1C98E1B0C()
{
  uint64_t *result;
  int v1;
  uint64_t **v2;
  uint64_t *v3;
  uint64_t **v4;
  _DWORD *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  int v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t *v15;
  int v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t *v21;
  int v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t *v27;
  int v28;
  uint64_t *v29;
  uint64_t *v30;
  uint64_t *v31;
  uint64_t *v32;
  uint64_t *v33;
  int v34;
  uint64_t *v35;
  uint64_t *v36;
  uint64_t *v37;
  uint64_t *v38;
  uint64_t *v39;
  int v40;
  uint64_t *v41;
  uint64_t *v42;
  uint64_t *v43;
  uint64_t *v44;
  uint64_t *v45;
  int v46;
  uint64_t *v47;
  uint64_t *v48;
  uint64_t *v49;
  uint64_t *v50;
  uint64_t *v51;
  int v52;
  uint64_t *v53;
  uint64_t *v54;
  uint64_t *v55;
  uint64_t *v56;
  uint64_t *v57;
  int v58;
  uint64_t *v59;
  uint64_t *v60;
  uint64_t *v61;
  uint64_t *v62;
  uint64_t *v63;
  int v64;
  uint64_t *v65;
  uint64_t *v66;
  uint64_t *v67;
  uint64_t *v68;
  uint64_t *v69;
  int v70;
  uint64_t *v71;
  uint64_t *v72;
  uint64_t *v73;
  uint64_t *v74;
  int v75;
  uint64_t *v76;
  uint64_t *v77;

  result = (uint64_t *)operator new(0x38uLL);
  v1 = 0;
  *((_DWORD *)result + 8) = 0;
  *result = 0;
  result[1] = 0;
  qword_1EF9212D0 = (uint64_t)result;
  qword_1EF9212E0 = 1;
  qword_1EF9212D8 = (uint64_t)result;
  result[2] = (uint64_t)&qword_1EF9212D8;
  *((_BYTE *)result + 24) = 1;
  result[5] = (uint64_t)CFSTR("No failure");
  result[6] = (uint64_t)CFSTR("OK");
  v2 = (uint64_t **)result;
  while (v1 < 2)
  {
    if (v1 == 1)
    {
      v2[5] = (uint64_t *)CFSTR("Failure detection ML");
      v2[6] = (uint64_t *)CFSTR("Failure(ML)");
      goto LABEL_14;
    }
    v3 = v2[1];
    if (!v3)
    {
      v4 = v2 + 1;
      goto LABEL_9;
    }
LABEL_3:
    v1 = *((_DWORD *)v3 + 8);
    v2 = (uint64_t **)v3;
  }
  v3 = *v2;
  if (*v2)
    goto LABEL_3;
  v4 = v2;
LABEL_9:
  v5 = operator new(0x38uLL);
  v5[8] = 1;
  *((_QWORD *)v5 + 5) = 0;
  *((_QWORD *)v5 + 6) = 0;
  *(_QWORD *)v5 = 0;
  *((_QWORD *)v5 + 1) = 0;
  *((_QWORD *)v5 + 2) = v2;
  *v4 = (uint64_t *)v5;
  v6 = (uint64_t *)v5;
  if (*(_QWORD *)qword_1EF9212D0)
  {
    qword_1EF9212D0 = *(_QWORD *)qword_1EF9212D0;
    v6 = *v4;
  }
  v7 = &qword_1EF9212D8;
  sub_1C9880828((uint64_t *)qword_1EF9212D8, v6);
  result = (uint64_t *)qword_1EF9212D8;
  ++qword_1EF9212E0;
  *((_QWORD *)v5 + 5) = CFSTR("Failure detection ML");
  *((_QWORD *)v5 + 6) = CFSTR("Failure(ML)");
  if (!result)
  {
    v8 = &qword_1EF9212D8;
LABEL_20:
    v11 = v8;
    v8 = (uint64_t *)operator new(0x38uLL);
    *((_DWORD *)v8 + 8) = 2;
    v8[5] = 0;
    v8[6] = 0;
    *v8 = 0;
    v8[1] = 0;
    v8[2] = (uint64_t)v11;
    *v7 = (uint64_t)v8;
    v12 = v8;
    if (*(_QWORD *)qword_1EF9212D0)
    {
      qword_1EF9212D0 = *(_QWORD *)qword_1EF9212D0;
      v12 = (uint64_t *)*v7;
    }
    sub_1C9880828((uint64_t *)qword_1EF9212D8, v12);
    result = (uint64_t *)qword_1EF9212D8;
    ++qword_1EF9212E0;
    goto LABEL_23;
  }
LABEL_14:
  v9 = result;
  while (1)
  {
    while (1)
    {
      v8 = v9;
      v10 = *((_DWORD *)v9 + 8);
      if (v10 < 3)
        break;
      v9 = (uint64_t *)*v8;
      v7 = v8;
      if (!*v8)
        goto LABEL_20;
    }
    if (v10 == 2)
      break;
    v9 = (uint64_t *)v8[1];
    if (!v9)
    {
      v7 = v8 + 1;
      goto LABEL_20;
    }
  }
LABEL_23:
  v8[5] = (uint64_t)CFSTR("Bounding box outside of the image");
  v8[6] = (uint64_t)CFSTR("BB Out");
  if (result)
  {
    v13 = result;
    while (1)
    {
      while (1)
      {
        v15 = v13;
        v16 = *((_DWORD *)v13 + 8);
        if (v16 < 4)
          break;
        v13 = (uint64_t *)*v15;
        v14 = v15;
        if (!*v15)
          goto LABEL_31;
      }
      if (v16 == 3)
        break;
      v13 = (uint64_t *)v15[1];
      if (!v13)
      {
        v14 = v15 + 1;
        goto LABEL_31;
      }
    }
  }
  else
  {
    v14 = &qword_1EF9212D8;
    v15 = &qword_1EF9212D8;
LABEL_31:
    v17 = v15;
    v15 = (uint64_t *)operator new(0x38uLL);
    *((_DWORD *)v15 + 8) = 3;
    v15[5] = 0;
    v15[6] = 0;
    *v15 = 0;
    v15[1] = 0;
    v15[2] = (uint64_t)v17;
    *v14 = (uint64_t)v15;
    v18 = v15;
    if (*(_QWORD *)qword_1EF9212D0)
    {
      qword_1EF9212D0 = *(_QWORD *)qword_1EF9212D0;
      v18 = (uint64_t *)*v14;
    }
    sub_1C9880828((uint64_t *)qword_1EF9212D8, v18);
    result = (uint64_t *)qword_1EF9212D8;
    ++qword_1EF9212E0;
  }
  v15[5] = (uint64_t)CFSTR("Face too close to camera");
  v15[6] = (uint64_t)CFSTR("Too Close");
  if (result)
  {
    v19 = result;
    while (1)
    {
      while (1)
      {
        v21 = v19;
        v22 = *((_DWORD *)v19 + 8);
        if (v22 < 5)
          break;
        v19 = (uint64_t *)*v21;
        v20 = v21;
        if (!*v21)
          goto LABEL_42;
      }
      if (v22 == 4)
        break;
      v19 = (uint64_t *)v21[1];
      if (!v19)
      {
        v20 = v21 + 1;
        goto LABEL_42;
      }
    }
  }
  else
  {
    v20 = &qword_1EF9212D8;
    v21 = &qword_1EF9212D8;
LABEL_42:
    v23 = v21;
    v21 = (uint64_t *)operator new(0x38uLL);
    *((_DWORD *)v21 + 8) = 4;
    v21[5] = 0;
    v21[6] = 0;
    *v21 = 0;
    v21[1] = 0;
    v21[2] = (uint64_t)v23;
    *v20 = (uint64_t)v21;
    v24 = v21;
    if (*(_QWORD *)qword_1EF9212D0)
    {
      qword_1EF9212D0 = *(_QWORD *)qword_1EF9212D0;
      v24 = (uint64_t *)*v20;
    }
    sub_1C9880828((uint64_t *)qword_1EF9212D8, v24);
    result = (uint64_t *)qword_1EF9212D8;
    ++qword_1EF9212E0;
  }
  v21[5] = (uint64_t)CFSTR("Face too far from camera");
  v21[6] = (uint64_t)CFSTR("Too Far");
  if (result)
  {
    v25 = result;
    while (1)
    {
      while (1)
      {
        v27 = v25;
        v28 = *((_DWORD *)v25 + 8);
        if (v28 < 6)
          break;
        v25 = (uint64_t *)*v27;
        v26 = v27;
        if (!*v27)
          goto LABEL_53;
      }
      if (v28 == 5)
        break;
      v25 = (uint64_t *)v27[1];
      if (!v25)
      {
        v26 = v27 + 1;
        goto LABEL_53;
      }
    }
  }
  else
  {
    v26 = &qword_1EF9212D8;
    v27 = &qword_1EF9212D8;
LABEL_53:
    v29 = v27;
    v27 = (uint64_t *)operator new(0x38uLL);
    *((_DWORD *)v27 + 8) = 5;
    v27[5] = 0;
    v27[6] = 0;
    *v27 = 0;
    v27[1] = 0;
    v27[2] = (uint64_t)v29;
    *v26 = (uint64_t)v27;
    v30 = v27;
    if (*(_QWORD *)qword_1EF9212D0)
    {
      qword_1EF9212D0 = *(_QWORD *)qword_1EF9212D0;
      v30 = (uint64_t *)*v26;
    }
    sub_1C9880828((uint64_t *)qword_1EF9212D8, v30);
    result = (uint64_t *)qword_1EF9212D8;
    ++qword_1EF9212E0;
  }
  v27[5] = (uint64_t)CFSTR("Too much rotation");
  v27[6] = (uint64_t)CFSTR("Too Rotated");
  if (result)
  {
    v31 = result;
    while (1)
    {
      while (1)
      {
        v33 = v31;
        v34 = *((_DWORD *)v31 + 8);
        if (v34 < 7)
          break;
        v31 = (uint64_t *)*v33;
        v32 = v33;
        if (!*v33)
          goto LABEL_64;
      }
      if (v34 == 6)
        break;
      v31 = (uint64_t *)v33[1];
      if (!v31)
      {
        v32 = v33 + 1;
        goto LABEL_64;
      }
    }
  }
  else
  {
    v32 = &qword_1EF9212D8;
    v33 = &qword_1EF9212D8;
LABEL_64:
    v35 = v33;
    v33 = (uint64_t *)operator new(0x38uLL);
    *((_DWORD *)v33 + 8) = 6;
    v33[5] = 0;
    v33[6] = 0;
    *v33 = 0;
    v33[1] = 0;
    v33[2] = (uint64_t)v35;
    *v32 = (uint64_t)v33;
    v36 = v33;
    if (*(_QWORD *)qword_1EF9212D0)
    {
      qword_1EF9212D0 = *(_QWORD *)qword_1EF9212D0;
      v36 = (uint64_t *)*v32;
    }
    sub_1C9880828((uint64_t *)qword_1EF9212D8, v36);
    result = (uint64_t *)qword_1EF9212D8;
    ++qword_1EF9212E0;
  }
  v33[5] = (uint64_t)CFSTR("Face moving too fast");
  v33[6] = (uint64_t)CFSTR("Moving Too Fast");
  if (result)
  {
    v37 = result;
    while (1)
    {
      while (1)
      {
        v39 = v37;
        v40 = *((_DWORD *)v37 + 8);
        if (v40 < 8)
          break;
        v37 = (uint64_t *)*v39;
        v38 = v39;
        if (!*v39)
          goto LABEL_75;
      }
      if (v40 == 7)
        break;
      v37 = (uint64_t *)v39[1];
      if (!v37)
      {
        v38 = v39 + 1;
        goto LABEL_75;
      }
    }
  }
  else
  {
    v38 = &qword_1EF9212D8;
    v39 = &qword_1EF9212D8;
LABEL_75:
    v41 = v39;
    v39 = (uint64_t *)operator new(0x38uLL);
    *((_DWORD *)v39 + 8) = 7;
    v39[5] = 0;
    v39[6] = 0;
    *v39 = 0;
    v39[1] = 0;
    v39[2] = (uint64_t)v41;
    *v38 = (uint64_t)v39;
    v42 = v39;
    if (*(_QWORD *)qword_1EF9212D0)
    {
      qword_1EF9212D0 = *(_QWORD *)qword_1EF9212D0;
      v42 = (uint64_t *)*v38;
    }
    sub_1C9880828((uint64_t *)qword_1EF9212D8, v42);
    result = (uint64_t *)qword_1EF9212D8;
    ++qword_1EF9212E0;
  }
  v39[5] = (uint64_t)CFSTR("Filling up buffer with 3 frames");
  v39[6] = (uint64_t)CFSTR("Buffering");
  if (result)
  {
    v43 = result;
    while (1)
    {
      while (1)
      {
        v45 = v43;
        v46 = *((_DWORD *)v43 + 8);
        if (v46 < 101)
          break;
        v43 = (uint64_t *)*v45;
        v44 = v45;
        if (!*v45)
          goto LABEL_86;
      }
      if (v46 == 100)
        break;
      v43 = (uint64_t *)v45[1];
      if (!v43)
      {
        v44 = v45 + 1;
        goto LABEL_86;
      }
    }
  }
  else
  {
    v44 = &qword_1EF9212D8;
    v45 = &qword_1EF9212D8;
LABEL_86:
    v47 = v45;
    v45 = (uint64_t *)operator new(0x38uLL);
    *((_DWORD *)v45 + 8) = 100;
    v45[5] = 0;
    v45[6] = 0;
    *v45 = 0;
    v45[1] = 0;
    v45[2] = (uint64_t)v47;
    *v44 = (uint64_t)v45;
    v48 = v45;
    if (*(_QWORD *)qword_1EF9212D0)
    {
      qword_1EF9212D0 = *(_QWORD *)qword_1EF9212D0;
      v48 = (uint64_t *)*v44;
    }
    sub_1C9880828((uint64_t *)qword_1EF9212D8, v48);
    result = (uint64_t *)qword_1EF9212D8;
    ++qword_1EF9212E0;
  }
  v45[5] = (uint64_t)CFSTR("Recognition Disabled");
  v45[6] = (uint64_t)CFSTR("Disabled");
  if (result)
  {
    v49 = result;
    while (1)
    {
      while (1)
      {
        v51 = v49;
        v52 = *((_DWORD *)v49 + 8);
        if (v52 < 102)
          break;
        v49 = (uint64_t *)*v51;
        v50 = v51;
        if (!*v51)
          goto LABEL_97;
      }
      if (v52 == 101)
        break;
      v49 = (uint64_t *)v51[1];
      if (!v49)
      {
        v50 = v51 + 1;
        goto LABEL_97;
      }
    }
  }
  else
  {
    v50 = &qword_1EF9212D8;
    v51 = &qword_1EF9212D8;
LABEL_97:
    v53 = v51;
    v51 = (uint64_t *)operator new(0x38uLL);
    *((_DWORD *)v51 + 8) = 101;
    v51[5] = 0;
    v51[6] = 0;
    *v51 = 0;
    v51[1] = 0;
    v51[2] = (uint64_t)v53;
    *v50 = (uint64_t)v51;
    v54 = v51;
    if (*(_QWORD *)qword_1EF9212D0)
    {
      qword_1EF9212D0 = *(_QWORD *)qword_1EF9212D0;
      v54 = (uint64_t *)*v50;
    }
    sub_1C9880828((uint64_t *)qword_1EF9212D8, v54);
    result = (uint64_t *)qword_1EF9212D8;
    ++qword_1EF9212E0;
  }
  v51[5] = (uint64_t)CFSTR("Overlapping faces");
  v51[6] = (uint64_t)CFSTR("Overlap");
  if (result)
  {
    v55 = result;
    while (1)
    {
      while (1)
      {
        v57 = v55;
        v58 = *((_DWORD *)v55 + 8);
        if (v58 < 201)
          break;
        v55 = (uint64_t *)*v57;
        v56 = v57;
        if (!*v57)
          goto LABEL_108;
      }
      if (v58 == 200)
        break;
      v55 = (uint64_t *)v57[1];
      if (!v55)
      {
        v56 = v57 + 1;
        goto LABEL_108;
      }
    }
  }
  else
  {
    v56 = &qword_1EF9212D8;
    v57 = &qword_1EF9212D8;
LABEL_108:
    v59 = v57;
    v57 = (uint64_t *)operator new(0x38uLL);
    *((_DWORD *)v57 + 8) = 200;
    v57[5] = 0;
    v57[6] = 0;
    *v57 = 0;
    v57[1] = 0;
    v57[2] = (uint64_t)v59;
    *v56 = (uint64_t)v57;
    v60 = v57;
    if (*(_QWORD *)qword_1EF9212D0)
    {
      qword_1EF9212D0 = *(_QWORD *)qword_1EF9212D0;
      v60 = (uint64_t *)*v56;
    }
    sub_1C9880828((uint64_t *)qword_1EF9212D8, v60);
    result = (uint64_t *)qword_1EF9212D8;
    ++qword_1EF9212E0;
  }
  v57[5] = (uint64_t)CFSTR("Too high translational velocity");
  v57[6] = (uint64_t)CFSTR("High velocity(t)");
  if (result)
  {
    v61 = result;
    while (1)
    {
      while (1)
      {
        v63 = v61;
        v64 = *((_DWORD *)v61 + 8);
        if (v64 < 202)
          break;
        v61 = (uint64_t *)*v63;
        v62 = v63;
        if (!*v63)
          goto LABEL_119;
      }
      if (v64 == 201)
        break;
      v61 = (uint64_t *)v63[1];
      if (!v61)
      {
        v62 = v63 + 1;
        goto LABEL_119;
      }
    }
  }
  else
  {
    v62 = &qword_1EF9212D8;
    v63 = &qword_1EF9212D8;
LABEL_119:
    v65 = v63;
    v63 = (uint64_t *)operator new(0x38uLL);
    *((_DWORD *)v63 + 8) = 201;
    v63[5] = 0;
    v63[6] = 0;
    *v63 = 0;
    v63[1] = 0;
    v63[2] = (uint64_t)v65;
    *v62 = (uint64_t)v63;
    v66 = v63;
    if (*(_QWORD *)qword_1EF9212D0)
    {
      qword_1EF9212D0 = *(_QWORD *)qword_1EF9212D0;
      v66 = (uint64_t *)*v62;
    }
    sub_1C9880828((uint64_t *)qword_1EF9212D8, v66);
    result = (uint64_t *)qword_1EF9212D8;
    ++qword_1EF9212E0;
  }
  v63[5] = (uint64_t)CFSTR("Too high translational acceleration");
  v63[6] = (uint64_t)CFSTR("High acceleration(t)");
  if (result)
  {
    v67 = result;
    while (1)
    {
      while (1)
      {
        v69 = v67;
        v70 = *((_DWORD *)v67 + 8);
        if (v70 < 203)
          break;
        v67 = (uint64_t *)*v69;
        v68 = v69;
        if (!*v69)
          goto LABEL_130;
      }
      if (v70 == 202)
        break;
      v67 = (uint64_t *)v69[1];
      if (!v67)
      {
        v68 = v69 + 1;
        goto LABEL_130;
      }
    }
  }
  else
  {
    v68 = &qword_1EF9212D8;
    v69 = &qword_1EF9212D8;
LABEL_130:
    v71 = v69;
    v69 = (uint64_t *)operator new(0x38uLL);
    *((_DWORD *)v69 + 8) = 202;
    v69[5] = 0;
    v69[6] = 0;
    *v69 = 0;
    v69[1] = 0;
    v69[2] = (uint64_t)v71;
    *v68 = (uint64_t)v69;
    v72 = v69;
    if (*(_QWORD *)qword_1EF9212D0)
    {
      qword_1EF9212D0 = *(_QWORD *)qword_1EF9212D0;
      v72 = (uint64_t *)*v68;
    }
    sub_1C9880828((uint64_t *)qword_1EF9212D8, v72);
    result = (uint64_t *)qword_1EF9212D8;
    ++qword_1EF9212E0;
  }
  v69[5] = (uint64_t)CFSTR("Too high angular velocity");
  v69[6] = (uint64_t)CFSTR("High velocity(a)");
  if (result)
  {
    while (1)
    {
      while (1)
      {
        v74 = result;
        v75 = *((_DWORD *)result + 8);
        if (v75 < 204)
          break;
        result = (uint64_t *)*result;
        v73 = v74;
        if (!*v74)
          goto LABEL_140;
      }
      if (v75 == 203)
        break;
      result = (uint64_t *)result[1];
      if (!result)
      {
        v73 = v74 + 1;
        goto LABEL_140;
      }
    }
  }
  else
  {
    v73 = &qword_1EF9212D8;
    v74 = &qword_1EF9212D8;
LABEL_140:
    v76 = v74;
    v74 = (uint64_t *)operator new(0x38uLL);
    *((_DWORD *)v74 + 8) = 203;
    v74[5] = 0;
    v74[6] = 0;
    *v74 = 0;
    v74[1] = 0;
    v74[2] = (uint64_t)v76;
    *v73 = (uint64_t)v74;
    v77 = v74;
    if (*(_QWORD *)qword_1EF9212D0)
    {
      qword_1EF9212D0 = *(_QWORD *)qword_1EF9212D0;
      v77 = (uint64_t *)*v73;
    }
    result = sub_1C9880828((uint64_t *)qword_1EF9212D8, v77);
    ++qword_1EF9212E0;
  }
  v74[5] = (uint64_t)CFSTR("Too high angular acceleration");
  v74[6] = (uint64_t)CFSTR("High acceleration(a)");
  return result;
}

uint64_t CVAFaceTrackingGetErrorDescription_0(int a1)
{
  unsigned __int8 v2;
  uint64_t v3;
  uint64_t *v4;
  int v5;
  BOOL v6;
  uint64_t *v7;
  unsigned __int8 v8;
  NSObject *v9;
  _DWORD v11[2];
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v2 = atomic_load((unsigned __int8 *)&qword_1EF9212E8);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_1EF9212E8))
  {
    sub_1C98E1B0C();
    __cxa_guard_release(&qword_1EF9212E8);
  }
  v3 = qword_1EF9212D8;
  if (qword_1EF9212D8)
  {
    v4 = &qword_1EF9212D8;
    do
    {
      v5 = *(_DWORD *)(v3 + 32);
      v6 = v5 < a1;
      if (v5 >= a1)
        v7 = (uint64_t *)v3;
      else
        v7 = (uint64_t *)(v3 + 8);
      if (!v6)
        v4 = (uint64_t *)v3;
      v3 = *v7;
    }
    while (*v7);
    if (v4 != &qword_1EF9212D8 && *((_DWORD *)v4 + 8) <= a1)
      return v4[5];
  }
  v8 = atomic_load((unsigned __int8 *)&qword_1ED52ACD0);
  if ((v8 & 1) == 0 && __cxa_guard_acquire(&qword_1ED52ACD0))
  {
    qword_1ED52ACE0 = (uint64_t)os_log_create("com.apple.AppleCVA", "FaceKit");
    __cxa_guard_release(&qword_1ED52ACD0);
  }
  v9 = qword_1ED52ACE0;
  if (os_log_type_enabled((os_log_t)qword_1ED52ACE0, OS_LOG_TYPE_ERROR))
  {
    v11[0] = 67109120;
    v11[1] = a1;
    _os_log_error_impl(&dword_1C9870000, v9, OS_LOG_TYPE_ERROR, "unknown failure type %d", (uint8_t *)v11, 8u);
  }
  return 0;
}

void sub_1C98E264C(void ***a1, uint64_t a2, uint64_t a3)
{
  void *v6;
  int v7;
  int v8;
  void *v9;
  int8x16_t v10;
  unint64_t *p_shared_owners;
  std::__shared_weak_count *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t v29;
  int v30;
  int8x16_t v31;
  int8x16_t v32;
  int8x16_t v33;
  int v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  unint64_t v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  _QWORD v42[36];

  v6 = (void *)MEMORY[0x1CAA45030]();
  v7 = *(_DWORD *)(a2 + 60);
  v8 = *(_DWORD *)(a2 + 40);
  v39 = 0;
  v37 = 0u;
  v38 = 0u;
  v35 = 0u;
  v36 = 0u;
  v9 = **a1;
  v30 = v7;
  v31 = vextq_s8(*(int8x16_t *)(a2 + 24), *(int8x16_t *)(a2 + 24), 8uLL);
  v32 = vextq_s8(*(int8x16_t *)(a2 + 8), (int8x16_t)vrev64q_s32(*(int32x4_t *)(a2 + 8)), 8uLL);
  v10 = (int8x16_t)vrev64q_s32(*(int32x4_t *)(a2 + 44));
  v33 = vextq_s8(v10, v10, 8uLL);
  v34 = v8;
  if (v9)
  {
    objc_msgSend(v9, "processIncomingExpressions:", &v30);
    LOBYTE(p_shared_owners) = v35;
    if ((unint64_t)v35 >= 4)
    {
      sub_1C99072C4(&v40);
      sub_1C9907EC4(v42, &v40, 0, 0, "[RELEASE ERROR  ]", "/Library/Caches/com.apple.xbs/Sources/AppleCVA/shared/src/modules/avatar/facekit/accessibilityfilter.mm", 47, "assert %s failed. activation value not implemented%s", (char)"false");
      sub_1C9909318((uint64_t)v42);
      v12 = v41;
      if (v41)
      {
        p_shared_owners = (unint64_t *)&v41->__shared_owners_;
        do
          v13 = __ldaxr(p_shared_owners);
        while (__stlxr(v13 - 1, p_shared_owners));
        if (!v13)
        {
          ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
          std::__shared_weak_count::__release_weak(v12);
        }
      }
    }
  }
  else
  {
    LOBYTE(p_shared_owners) = 0;
  }
  *(_BYTE *)a3 = (_BYTE)p_shared_owners;
  LOBYTE(p_shared_owners) = BYTE8(v35);
  if (*((_QWORD *)&v35 + 1) >= 4uLL)
  {
    sub_1C99072C4(&v40);
    sub_1C9907EC4(v42, &v40, 0, 0, "[RELEASE ERROR  ]", "/Library/Caches/com.apple.xbs/Sources/AppleCVA/shared/src/modules/avatar/facekit/accessibilityfilter.mm", 47, "assert %s failed. activation value not implemented%s", (char)"false");
    sub_1C9909318((uint64_t)v42);
    v14 = v41;
    if (v41)
    {
      p_shared_owners = (unint64_t *)&v41->__shared_owners_;
      do
        v15 = __ldaxr(p_shared_owners);
      while (__stlxr(v15 - 1, p_shared_owners));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
  }
  *(_BYTE *)(a3 + 1) = (_BYTE)p_shared_owners;
  LOBYTE(p_shared_owners) = v36;
  if ((unint64_t)v36 >= 4)
  {
    sub_1C99072C4(&v40);
    sub_1C9907EC4(v42, &v40, 0, 0, "[RELEASE ERROR  ]", "/Library/Caches/com.apple.xbs/Sources/AppleCVA/shared/src/modules/avatar/facekit/accessibilityfilter.mm", 47, "assert %s failed. activation value not implemented%s", (char)"false");
    sub_1C9909318((uint64_t)v42);
    v16 = v41;
    if (v41)
    {
      p_shared_owners = (unint64_t *)&v41->__shared_owners_;
      do
        v17 = __ldaxr(p_shared_owners);
      while (__stlxr(v17 - 1, p_shared_owners));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
  }
  *(_BYTE *)(a3 + 2) = (_BYTE)p_shared_owners;
  LOBYTE(p_shared_owners) = BYTE8(v36);
  if (*((_QWORD *)&v36 + 1) >= 4uLL)
  {
    sub_1C99072C4(&v40);
    sub_1C9907EC4(v42, &v40, 0, 0, "[RELEASE ERROR  ]", "/Library/Caches/com.apple.xbs/Sources/AppleCVA/shared/src/modules/avatar/facekit/accessibilityfilter.mm", 47, "assert %s failed. activation value not implemented%s", (char)"false");
    sub_1C9909318((uint64_t)v42);
    v18 = v41;
    if (v41)
    {
      p_shared_owners = (unint64_t *)&v41->__shared_owners_;
      do
        v19 = __ldaxr(p_shared_owners);
      while (__stlxr(v19 - 1, p_shared_owners));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
    }
  }
  *(_BYTE *)(a3 + 3) = (_BYTE)p_shared_owners;
  LOBYTE(p_shared_owners) = v37;
  if ((unint64_t)v37 >= 4)
  {
    sub_1C99072C4(&v40);
    sub_1C9907EC4(v42, &v40, 0, 0, "[RELEASE ERROR  ]", "/Library/Caches/com.apple.xbs/Sources/AppleCVA/shared/src/modules/avatar/facekit/accessibilityfilter.mm", 47, "assert %s failed. activation value not implemented%s", (char)"false");
    sub_1C9909318((uint64_t)v42);
    v20 = v41;
    if (v41)
    {
      p_shared_owners = (unint64_t *)&v41->__shared_owners_;
      do
        v21 = __ldaxr(p_shared_owners);
      while (__stlxr(v21 - 1, p_shared_owners));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
  }
  *(_BYTE *)(a3 + 4) = (_BYTE)p_shared_owners;
  LOBYTE(p_shared_owners) = BYTE8(v37);
  if (*((_QWORD *)&v37 + 1) >= 4uLL)
  {
    sub_1C99072C4(&v40);
    sub_1C9907EC4(v42, &v40, 0, 0, "[RELEASE ERROR  ]", "/Library/Caches/com.apple.xbs/Sources/AppleCVA/shared/src/modules/avatar/facekit/accessibilityfilter.mm", 47, "assert %s failed. activation value not implemented%s", (char)"false");
    sub_1C9909318((uint64_t)v42);
    v22 = v41;
    if (v41)
    {
      p_shared_owners = (unint64_t *)&v41->__shared_owners_;
      do
        v23 = __ldaxr(p_shared_owners);
      while (__stlxr(v23 - 1, p_shared_owners));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
        std::__shared_weak_count::__release_weak(v22);
      }
    }
  }
  *(_BYTE *)(a3 + 5) = (_BYTE)p_shared_owners;
  LOBYTE(p_shared_owners) = v38;
  if ((unint64_t)v38 >= 4)
  {
    sub_1C99072C4(&v40);
    sub_1C9907EC4(v42, &v40, 0, 0, "[RELEASE ERROR  ]", "/Library/Caches/com.apple.xbs/Sources/AppleCVA/shared/src/modules/avatar/facekit/accessibilityfilter.mm", 47, "assert %s failed. activation value not implemented%s", (char)"false");
    sub_1C9909318((uint64_t)v42);
    v24 = v41;
    if (v41)
    {
      p_shared_owners = (unint64_t *)&v41->__shared_owners_;
      do
        v25 = __ldaxr(p_shared_owners);
      while (__stlxr(v25 - 1, p_shared_owners));
      if (!v25)
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
      }
    }
  }
  *(_BYTE *)(a3 + 8) = (_BYTE)p_shared_owners;
  LOBYTE(p_shared_owners) = BYTE8(v38);
  if (*((_QWORD *)&v38 + 1) >= 4uLL)
  {
    sub_1C99072C4(&v40);
    sub_1C9907EC4(v42, &v40, 0, 0, "[RELEASE ERROR  ]", "/Library/Caches/com.apple.xbs/Sources/AppleCVA/shared/src/modules/avatar/facekit/accessibilityfilter.mm", 47, "assert %s failed. activation value not implemented%s", (char)"false");
    sub_1C9909318((uint64_t)v42);
    v26 = v41;
    if (v41)
    {
      p_shared_owners = (unint64_t *)&v41->__shared_owners_;
      do
        v27 = __ldaxr(p_shared_owners);
      while (__stlxr(v27 - 1, p_shared_owners));
      if (!v27)
      {
        ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
        std::__shared_weak_count::__release_weak(v26);
      }
    }
  }
  *(_BYTE *)(a3 + 6) = (_BYTE)p_shared_owners;
  LOBYTE(p_shared_owners) = v39;
  if (v39 >= 4)
  {
    sub_1C99072C4(&v40);
    sub_1C9907EC4(v42, &v40, 0, 0, "[RELEASE ERROR  ]", "/Library/Caches/com.apple.xbs/Sources/AppleCVA/shared/src/modules/avatar/facekit/accessibilityfilter.mm", 47, "assert %s failed. activation value not implemented%s", (char)"false");
    sub_1C9909318((uint64_t)v42);
    v28 = v41;
    if (v41)
    {
      p_shared_owners = (unint64_t *)&v41->__shared_owners_;
      do
        v29 = __ldaxr(p_shared_owners);
      while (__stlxr(v29 - 1, p_shared_owners));
      if (!v29)
      {
        ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
        std::__shared_weak_count::__release_weak(v28);
      }
    }
  }
  *(_BYTE *)(a3 + 7) = (_BYTE)p_shared_owners;
  *(_QWORD *)(a3 + 12) = *(_QWORD *)(a2 + 64);
  *(_BYTE *)(a3 + 20) = 1;
  objc_autoreleasePoolPop(v6);
}

const void *sub_1C98E2C90(unsigned __int8 *a1)
{
  uint64_t v2;
  const void *Dictionary;
  _BYTE v5[16];
  _DWORD v6[4];
  _BYTE v7[16];
  _BYTE v8[16];
  void *v9[2];
  int v10;
  void *memptr;

  cva::DictionaryHandler::DictionaryHandler((cva::DictionaryHandler *)v8);
  if (a1[20])
  {
    cva::DictionaryHandler::DictionaryHandler((cva::DictionaryHandler *)v7);
    v6[0] = *a1;
    cva::ItemHandler::createValue<int>();
    cva::DictionaryHandler::setItem((cva::DictionaryHandler *)v7, CFSTR("browsUp"), (const cva::ItemHandler *)v9);
    cva::ItemHandler::~ItemHandler((cva::ItemHandler *)v9);
    v6[0] = a1[1];
    cva::ItemHandler::createValue<int>();
    cva::DictionaryHandler::setItem((cva::DictionaryHandler *)v7, CFSTR("jawOpen"), (const cva::ItemHandler *)v9);
    cva::ItemHandler::~ItemHandler((cva::ItemHandler *)v9);
    v6[0] = a1[2];
    cva::ItemHandler::createValue<int>();
    cva::DictionaryHandler::setItem((cva::DictionaryHandler *)v7, CFSTR("smile"), (const cva::ItemHandler *)v9);
    cva::ItemHandler::~ItemHandler((cva::ItemHandler *)v9);
    v6[0] = a1[3];
    cva::ItemHandler::createValue<int>();
    cva::DictionaryHandler::setItem((cva::DictionaryHandler *)v7, CFSTR("tongueOut"), (const cva::ItemHandler *)v9);
    cva::ItemHandler::~ItemHandler((cva::ItemHandler *)v9);
    v6[0] = a1[4];
    cva::ItemHandler::createValue<int>();
    cva::DictionaryHandler::setItem((cva::DictionaryHandler *)v7, CFSTR("eyeBlink"), (const cva::ItemHandler *)v9);
    cva::ItemHandler::~ItemHandler((cva::ItemHandler *)v9);
    v6[0] = a1[5];
    cva::ItemHandler::createValue<int>();
    cva::DictionaryHandler::setItem((cva::DictionaryHandler *)v7, CFSTR("noseSneer"), (const cva::ItemHandler *)v9);
    cva::ItemHandler::~ItemHandler((cva::ItemHandler *)v9);
    v6[0] = a1[6];
    cva::ItemHandler::createValue<int>();
    cva::DictionaryHandler::setItem((cva::DictionaryHandler *)v7, CFSTR("mouthPuckerLeft"), (const cva::ItemHandler *)v9);
    cva::ItemHandler::~ItemHandler((cva::ItemHandler *)v9);
    v6[0] = a1[7];
    cva::ItemHandler::createValue<int>();
    cva::DictionaryHandler::setItem((cva::DictionaryHandler *)v7, CFSTR("mouthPuckerRight"), (const cva::ItemHandler *)v9);
    cva::ItemHandler::~ItemHandler((cva::ItemHandler *)v9);
    v6[0] = a1[8];
    cva::ItemHandler::createValue<int>();
    cva::DictionaryHandler::setItem((cva::DictionaryHandler *)v7, CFSTR("mouthPuckerCenter"), (const cva::ItemHandler *)v9);
    cva::ItemHandler::~ItemHandler((cva::ItemHandler *)v9);
    cva::ItemHandler::ItemHandler();
    cva::DictionaryHandler::setItem((cva::DictionaryHandler *)v8, CFSTR("expressions"), (const cva::ItemHandler *)v9);
    cva::ItemHandler::~ItemHandler((cva::ItemHandler *)v9);
    v2 = *(_QWORD *)(a1 + 12);
    cva::DictionaryHandler::DictionaryHandler((cva::DictionaryHandler *)v6);
    v9[1] = (void *)8;
    memptr = 0;
    malloc_type_posix_memalign(&memptr, 0x20uLL, 0x20uLL, 0x49090899uLL);
    v9[0] = memptr;
    v10 = 2;
    *(_QWORD *)memptr = v2;
    cva::ItemHandler::createVector<float>();
    free(v9[0]);
    cva::DictionaryHandler::setItem((cva::DictionaryHandler *)v6, CFSTR("landmarkNoseBaseCenter"), (const cva::ItemHandler *)v5);
    cva::ItemHandler::~ItemHandler((cva::ItemHandler *)v5);
    cva::ItemHandler::ItemHandler();
    cva::DictionaryHandler::setItem((cva::DictionaryHandler *)v8, CFSTR("landmarks"), (const cva::ItemHandler *)v9);
    cva::ItemHandler::~ItemHandler((cva::ItemHandler *)v9);
    cva::DictionaryHandler::~DictionaryHandler((cva::DictionaryHandler *)v6);
    cva::DictionaryHandler::~DictionaryHandler((cva::DictionaryHandler *)v7);
  }
  Dictionary = (const void *)cva::DictionaryHandler::getDictionary((cva::DictionaryHandler *)v8);
  CFRetain(Dictionary);
  cva::DictionaryHandler::~DictionaryHandler((cva::DictionaryHandler *)v8);
  return Dictionary;
}

void sub_1C98E2F74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, void *a17)
{
  cva::ItemHandler::~ItemHandler((cva::ItemHandler *)&a17);
  cva::DictionaryHandler::~DictionaryHandler((cva::DictionaryHandler *)&a11);
  cva::DictionaryHandler::~DictionaryHandler((cva::DictionaryHandler *)&a13);
  cva::DictionaryHandler::~DictionaryHandler((cva::DictionaryHandler *)&a15);
  _Unwind_Resume(a1);
}

uint64_t sub_1C98E3018(uint64_t a1)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;

  *(_QWORD *)a1 = &off_1E82943F8;
  if (*(_QWORD *)(a1 + 152))
  {
    v2 = (uint64_t *)(a1 + 136);
    v3 = *(_QWORD *)(a1 + 136);
    v4 = *(uint64_t **)(a1 + 144);
    v5 = *v4;
    *(_QWORD *)(v5 + 8) = *(_QWORD *)(v3 + 8);
    **(_QWORD **)(v3 + 8) = v5;
    *(_QWORD *)(a1 + 152) = 0;
    if (v4 != (uint64_t *)(a1 + 136))
    {
      do
      {
        v7 = (uint64_t *)v4[1];
        v8 = (std::__shared_weak_count *)v4[3];
        if (v8)
        {
          p_shared_owners = (unint64_t *)&v8->__shared_owners_;
          do
            v10 = __ldaxr(p_shared_owners);
          while (__stlxr(v10 - 1, p_shared_owners));
          if (!v10)
          {
            ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
            std::__shared_weak_count::__release_weak(v8);
          }
        }
        operator delete(v4);
        v4 = v7;
      }
      while (v7 != v2);
    }
  }
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 80));
  std::mutex::~mutex((std::mutex *)(a1 + 16));
  return a1;
}

uint64_t **sub_1C98E30E8(uint64_t **a1)
{
  uint64_t *v2;
  uint64_t *v3;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = sub_1C98B896C(v2);
    MEMORY[0x1CAA44AFC](v3, 0x20C4093837F09);
  }
  return a1;
}

void sub_1C98E312C(uint64_t a1)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  *(_QWORD *)a1 = &off_1E82943F8;
  if (*(_QWORD *)(a1 + 152))
  {
    v2 = (uint64_t *)(a1 + 136);
    v3 = *(_QWORD *)(a1 + 136);
    v4 = *(uint64_t **)(a1 + 144);
    v5 = *v4;
    *(_QWORD *)(v5 + 8) = *(_QWORD *)(v3 + 8);
    **(_QWORD **)(v3 + 8) = v5;
    *(_QWORD *)(a1 + 152) = 0;
    if (v4 != (uint64_t *)(a1 + 136))
    {
      do
      {
        v6 = (uint64_t *)v4[1];
        v7 = (std::__shared_weak_count *)v4[3];
        if (v7)
        {
          p_shared_owners = (unint64_t *)&v7->__shared_owners_;
          do
            v9 = __ldaxr(p_shared_owners);
          while (__stlxr(v9 - 1, p_shared_owners));
          if (!v9)
          {
            ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
            std::__shared_weak_count::__release_weak(v7);
          }
        }
        operator delete(v4);
        v4 = v6;
      }
      while (v6 != v2);
    }
  }
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 80));
  std::mutex::~mutex((std::mutex *)(a1 + 16));
  JUMPOUT(0x1CAA44AFCLL);
}

void sub_1C98E320C(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t i;
  uint64_t *v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::unique_lock<std::mutex> v13;

  v13.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(a1 + 16);
  v13.__owns_ = 1;
  std::mutex::lock((std::mutex *)(a1 + 16));
  for (i = *(_QWORD *)(a1 + 152); !i; i = *(_QWORD *)(a1 + 152))
    std::condition_variable::wait((std::condition_variable *)(a1 + 80), &v13);
  v5 = *(uint64_t **)(a1 + 144);
  v6 = v5[3];
  *a2 = v5[2];
  a2[1] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
    v5 = *(uint64_t **)(a1 + 144);
    i = *(_QWORD *)(a1 + 152);
    v9 = (std::__shared_weak_count *)v5[3];
  }
  else
  {
    v9 = 0;
  }
  v10 = *v5;
  *(_QWORD *)(v10 + 8) = v5[1];
  *(_QWORD *)v5[1] = v10;
  *(_QWORD *)(a1 + 152) = i - 1;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  operator delete(v5);
  if (v13.__owns_)
    std::mutex::unlock(v13.__m_);
}

void sub_1C98E3308(uint64_t a1, _QWORD *a2, int a3, uint64_t a4)
{
  _BOOL4 v8;
  uint64_t v9;
  std::chrono::system_clock::time_point v10;
  uint64_t v11;
  std::chrono::time_point<std::chrono::system_clock, std::chrono::duration<long long, std::ratio<1, 1000000000>>> v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::unique_lock<std::mutex> v26;

  v26.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(a1 + 16);
  v26.__owns_ = 1;
  std::mutex::lock((std::mutex *)(a1 + 16));
  v8 = 0;
  v9 = *(_QWORD *)(a1 + 152);
  if (a3 < 1 || v9)
    goto LABEL_18;
  v8 = a4 != 0;
  if (a4)
  {
    if (!*(_BYTE *)(a4 + 8))
      goto LABEL_42;
    std::mutex::unlock(*(std::mutex **)a4);
    *(_BYTE *)(a4 + 8) = 0;
  }
  std::chrono::steady_clock::now();
  v10.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
  if (!v10.__d_.__rep_)
  {
    v11 = 0;
    goto LABEL_14;
  }
  if (v10.__d_.__rep_ < 1)
  {
    if ((unint64_t)v10.__d_.__rep_ < 0xFFDF3B645A1CAC09)
    {
      v11 = 0x8000000000000000;
      goto LABEL_14;
    }
LABEL_13:
    v11 = 1000 * v10.__d_.__rep_;
    goto LABEL_14;
  }
  if ((unint64_t)v10.__d_.__rep_ <= 0x20C49BA5E353F7)
    goto LABEL_13;
  v11 = 0x7FFFFFFFFFFFFFFFLL;
LABEL_14:
  if (v11 <= ((1000000 * a3) ^ 0x7FFFFFFFFFFFFFFFLL))
    v12.__d_.__rep_ = v11 + 1000000 * a3;
  else
    v12.__d_.__rep_ = 0x7FFFFFFFFFFFFFFFLL;
  std::condition_variable::__do_timed_wait((std::condition_variable *)(a1 + 80), &v26, v12);
  std::chrono::steady_clock::now();
  v9 = *(_QWORD *)(a1 + 152);
LABEL_18:
  if (v9)
  {
    v13 = *(_QWORD *)(a1 + 144);
    v15 = *(_QWORD *)(v13 + 16);
    v14 = *(_QWORD *)(v13 + 24);
    if (v14)
    {
      v16 = (unint64_t *)(v14 + 8);
      do
        v17 = __ldxr(v16);
      while (__stxr(v17 + 1, v16));
    }
    v18 = (std::__shared_weak_count *)a2[1];
    *a2 = v15;
    a2[1] = v14;
    if (v18)
    {
      p_shared_owners = (unint64_t *)&v18->__shared_owners_;
      do
        v20 = __ldaxr(p_shared_owners);
      while (__stlxr(v20 - 1, p_shared_owners));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
    }
    v21 = *(uint64_t **)(a1 + 144);
    v22 = *v21;
    *(_QWORD *)(v22 + 8) = v21[1];
    *(_QWORD *)v21[1] = v22;
    --*(_QWORD *)(a1 + 152);
    v23 = (std::__shared_weak_count *)v21[3];
    if (v23)
    {
      v24 = (unint64_t *)&v23->__shared_owners_;
      do
        v25 = __ldaxr(v24);
      while (__stlxr(v25 - 1, v24));
      if (!v25)
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
      }
    }
    operator delete(v21);
  }
  if (v26.__owns_)
    std::mutex::unlock(v26.__m_);
  if (v8)
  {
    if (*(_QWORD *)a4)
    {
      if (!*(_BYTE *)(a4 + 8))
      {
        std::mutex::lock(*(std::mutex **)a4);
        *(_BYTE *)(a4 + 8) = 1;
        return;
      }
    }
    else
    {
      std::__throw_system_error(1, "unique_lock::lock: references null mutex");
    }
    std::__throw_system_error(11, "unique_lock::lock: already locked");
LABEL_42:
    std::__throw_system_error(1, "unique_lock::unlock: not locked");
    __break(1u);
  }
}

void sub_1C98E3568(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

BOOL sub_1C98E357C(uint64_t a1, _QWORD *a2)
{
  std::mutex *v4;
  int v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t *v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  int v18;

  v4 = (std::mutex *)(a1 + 16);
  std::mutex::lock((std::mutex *)(a1 + 16));
  v5 = *(unsigned __int8 *)(a1 + 128);
  if (*(_BYTE *)(a1 + 128))
  {
    std::mutex::unlock(v4);
  }
  else
  {
    v6 = operator new(0x20uLL);
    v7 = a2[1];
    v6[2] = *a2;
    v6[3] = v7;
    if (v7)
    {
      v8 = (unint64_t *)(v7 + 8);
      do
        v9 = __ldxr(v8);
      while (__stxr(v9 + 1, v8));
    }
    v10 = *(_QWORD *)(a1 + 136);
    *v6 = v10;
    v6[1] = a1 + 136;
    *(_QWORD *)(v10 + 8) = v6;
    *(_QWORD *)(a1 + 136) = v6;
    v11 = *(_QWORD *)(a1 + 152) + 1;
    *(_QWORD *)(a1 + 152) = v11;
    v12 = *(_DWORD *)(a1 + 8);
    if (v12 < (int)v11 && (v12 & 0x80000000) == 0)
    {
      do
      {
        v13 = *(uint64_t **)(a1 + 144);
        v14 = *v13;
        *(_QWORD *)(v14 + 8) = v13[1];
        *(_QWORD *)v13[1] = v14;
        *(_QWORD *)(a1 + 152) = v11 - 1;
        v15 = (std::__shared_weak_count *)v13[3];
        if (v15)
        {
          p_shared_owners = (unint64_t *)&v15->__shared_owners_;
          do
            v17 = __ldaxr(p_shared_owners);
          while (__stlxr(v17 - 1, p_shared_owners));
          if (!v17)
          {
            ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
            std::__shared_weak_count::__release_weak(v15);
          }
        }
        operator delete(v13);
        v11 = *(_QWORD *)(a1 + 152);
        v18 = *(_DWORD *)(a1 + 8);
      }
      while (v18 < (int)v11 && (v18 & 0x80000000) == 0);
    }
    std::mutex::unlock(v4);
    std::condition_variable::notify_one((std::condition_variable *)(a1 + 80));
  }
  return v5 == 0;
}

void sub_1C98E36AC(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_1C98E36C0(uint64_t a1)
{
  std::mutex *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;

  v2 = (std::mutex *)(a1 + 16);
  std::mutex::lock((std::mutex *)(a1 + 16));
  if (*(_QWORD *)(a1 + 152))
  {
    v3 = (uint64_t *)(a1 + 136);
    v4 = *(_QWORD *)(a1 + 136);
    v5 = *(uint64_t **)(a1 + 144);
    v6 = *v5;
    *(_QWORD *)(v6 + 8) = *(_QWORD *)(v4 + 8);
    **(_QWORD **)(v4 + 8) = v6;
    *(_QWORD *)(a1 + 152) = 0;
    if (v5 != (uint64_t *)(a1 + 136))
    {
      do
      {
        v7 = (uint64_t *)v5[1];
        v8 = (std::__shared_weak_count *)v5[3];
        if (v8)
        {
          p_shared_owners = (unint64_t *)&v8->__shared_owners_;
          do
            v10 = __ldaxr(p_shared_owners);
          while (__stlxr(v10 - 1, p_shared_owners));
          if (!v10)
          {
            ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
            std::__shared_weak_count::__release_weak(v8);
          }
        }
        operator delete(v5);
        v5 = v7;
      }
      while (v7 != v3);
    }
  }
  std::mutex::unlock(v2);
}

uint64_t sub_1C98E3780(uint64_t a1)
{
  std::mutex *v2;
  uint64_t v3;

  v2 = (std::mutex *)(a1 + 16);
  std::mutex::lock((std::mutex *)(a1 + 16));
  v3 = *(unsigned int *)(a1 + 152);
  std::mutex::unlock(v2);
  return v3;
}

void sub_1C98E37B8(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E8295C98;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1C98E37C8(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E8295C98;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1CAA44AFCLL);
}

void sub_1C98E37F8(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 32);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void sub_1C98E3858()
{
  JUMPOUT(0x1CAA44AFCLL);
}

_QWORD *sub_1C98E386C(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E82942A0;
  result[1] = v3;
  return result;
}

uint64_t sub_1C98E38A0(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E82942A0;
  a2[1] = v2;
  return result;
}

void sub_1C98E38BC(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  char v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  int v7;
  uint64_t *v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  void (**v20)(_QWORD, _QWORD);
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t Dictionary;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  _Unwind_Exception *v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *p_shared_owners;
  unint64_t v35;
  __int128 v36;
  __int128 v37;
  _QWORD *v38;
  std::__shared_weak_count *v39;
  CMTime time;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = (void *)MEMORY[0x1CAA45030]();
  v38 = 0;
  v39 = 0;
  sub_1C98E3308(v1 + 40, &v38, 0, 0);
  v4 = (uint64_t)v38;
  if (v38)
    v5 = v3;
  else
    v5 = 0;
  if ((v5 & 1) == 0)
    goto LABEL_39;
  std::mutex::lock((std::mutex *)(v1 + 56));
  v6 = *(_QWORD *)(v1 + 192);
  std::mutex::unlock((std::mutex *)(v1 + 56));
  kdebug_trace();
  v7 = *(_DWORD *)(v4 + 48);
  if (v7)
  {
    if (v7 != 1)
    {
      v30 = (_Unwind_Exception *)sub_1C98CFB60();
      std::mutex::unlock(&stru_1ED52AC78);
      if ((_DWORD)v6)
      {
        v31 = (unint64_t *)((int)v6 + 8);
        do
          v32 = __ldaxr(v31);
        while (__stlxr(v32 - 1, v31));
        if (!v32)
        {
          (*(void (**)(_QWORD))(*(_QWORD *)(int)v6 + 16))((int)v6);
          std::__shared_weak_count::__release_weak((std::__shared_weak_count *)(int)v6);
        }
      }
      kdebug_trace();
      v33 = v39;
      if (v39)
      {
        p_shared_owners = (unint64_t *)&v39->__shared_owners_;
        do
          v35 = __ldaxr(p_shared_owners);
        while (__stlxr(v35 - 1, p_shared_owners));
        if (!v35)
        {
          ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
          std::__shared_weak_count::__release_weak(v33);
        }
      }
      _Unwind_Resume(v30);
    }
    time = *(CMTime *)(v4 + 24);
    CMTimeGetSeconds(&time);
  }
  if ((_DWORD)v6 && (!*(_QWORD *)(v4 + 200) || (int)v6 > 9))
  {
    kdebug_trace();
    v14 = v39;
    if (v39)
    {
      v15 = (unint64_t *)&v39->__shared_owners_;
      do
        v16 = __ldxr(v15);
      while (__stxr(v16 + 1, v15));
    }
    std::mutex::lock(&stru_1ED52AC78);
    time.value = 0;
    *(_QWORD *)&time.timescale = 0;
    sub_1C98B714C((cva::DictionaryHandler **)&v37, v4, &time, 0, 0);
    std::mutex::unlock(&stru_1ED52AC78);
    v36 = v37;
    v37 = 0uLL;
    if (v14)
    {
      v17 = (unint64_t *)&v14->__shared_owners_;
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
  }
  else
  {
    kdebug_trace();
    v8 = *(uint64_t **)v1;
    v9 = v39;
    *(_QWORD *)&v37 = v4;
    *((_QWORD *)&v37 + 1) = v39;
    if (v39)
    {
      v10 = (unint64_t *)&v39->__shared_owners_;
      do
        v11 = __ldxr(v10);
      while (__stxr(v11 + 1, v10));
    }
    sub_1C98BE1F0((cva::DictionaryHandler **)&time, v8, (uint64_t *)&v37);
    v36 = *(_OWORD *)&time.value;
    time.value = 0;
    *(_QWORD *)&time.timescale = 0;
    if (v9)
    {
      v12 = (unint64_t *)&v9->__shared_owners_;
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
  }
  kdebug_trace();
  v19 = MEMORY[0x1CAA45144](*v38);
  v20 = (void (**)(_QWORD, _QWORD))v19;
  v21 = v39;
  v38 = 0;
  v39 = 0;
  if (v21)
  {
    v22 = (unint64_t *)&v21->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
      if (!v20)
        goto LABEL_34;
      goto LABEL_33;
    }
  }
  if (v19)
  {
LABEL_33:
    kdebug_trace();
    Dictionary = cva::DictionaryHandler::getDictionary((cva::DictionaryHandler *)v36);
    v20[2](v20, Dictionary);
    kdebug_trace();
  }
LABEL_34:

  if (*((_QWORD *)&v36 + 1))
  {
    v25 = (unint64_t *)(*((_QWORD *)&v36 + 1) + 8);
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v36 + 1) + 16))(*((_QWORD *)&v36 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v36 + 1));
    }
  }
LABEL_39:
  v27 = v39;
  if (v39)
  {
    v28 = (unint64_t *)&v39->__shared_owners_;
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  objc_autoreleasePoolPop(v2);
}

uint64_t sub_1C98E3DA4(CGPoint *a1, const __CFDictionary *a2)
{
  float v2;
  CGPoint *v3;
  uint64_t v4;
  std::__shared_weak_count *v9;
  const __CFDictionary *Dictionary;
  __CVBuffer *Value;
  __CVBuffer *v12;
  CGPoint origin;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  CGFloat y;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  int v25;
  __int128 v26;
  __CVBuffer *v27;
  unsigned __int8 v28;
  NSObject *v29;
  uint64_t v30;
  unsigned __int8 v31;
  NSObject *v32;
  int hasKey;
  const __CFDictionary *v34;
  const __CFString *v35;
  __CVBuffer *v36;
  __CVBuffer *v37;
  int v38;
  NSObject *v39;
  int Width;
  int Height;
  int v42;
  int v43;
  int v44;
  float v45;
  float32x2_t v46;
  CGFloat v47;
  int v48;
  int v49;
  NSObject *v51;
  unsigned __int8 v52;
  NSObject *v53;
  unsigned __int8 v54;
  NSObject *v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  unint64_t *v59;
  unint64_t v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  CVPixelBufferRef *v64;
  float v65;
  int v66;
  __int128 v67;
  uint64_t v68;
  uint64_t v69;
  void *v70;
  CGPoint v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  CGFloat v75;
  unint64_t *v76;
  unint64_t v77;
  const __CFDictionary *v78;
  CGFloat v79;
  CGPoint v80;
  std::__shared_weak_count *v81;
  unint64_t *v82;
  unint64_t v83;
  CGFloat v84;
  unint64_t *v85;
  unint64_t v86;
  _QWORD *v87;
  cva::ArrayHandler *v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  int v92;
  int v93;
  uint64_t *v94;
  int v95;
  uint64_t *v96;
  const __CFString *v97;
  CGFloat x;
  CGFloat v99;
  const __CFString *v100;
  CGFloat v101;
  CGFloat v102;
  CGSize v103;
  const __CFDictionary *v104;
  float v105;
  unint64_t *v106;
  unint64_t v107;
  uint64_t v108;
  unint64_t v109;
  unint64_t v110;
  char *v111;
  char *v112;
  char *i;
  uint64_t v114;
  int v115;
  unint64_t *v116;
  unint64_t v117;
  unsigned __int8 v118;
  NSObject *v119;
  unsigned __int8 v120;
  NSObject *v121;
  unsigned __int8 v122;
  unsigned __int8 v123;
  unsigned __int8 v124;
  NSObject *v125;
  char *v126;
  void *v127;
  std::__shared_weak_count *v128;
  unint64_t *v129;
  unint64_t v130;
  CGFloat v131;
  CGFloat v132;
  unsigned int v133;
  uint64_t v134;
  char v135;
  int v136;
  int v137;
  unsigned __int8 v138;
  NSObject *v139;
  unint64_t *v140;
  unint64_t v141;
  uint64_t v142;
  CGFloat v143;
  CGFloat v144;
  int v145;
  int v146;
  int v147;
  unint64_t *v148;
  unint64_t v149;
  uint64_t *v150;
  NSObject *v151;
  unsigned __int8 v152;
  unsigned __int8 v153;
  std::__shared_weak_count *v154;
  unint64_t *v155;
  unint64_t v156;
  uint64_t v157;
  double v158;
  unint64_t *v159;
  unint64_t v160;
  CGPoint *v161;
  unsigned __int8 v162;
  NSObject *v163;
  int v164;
  Float64 Seconds;
  int v166;
  double v167;
  unsigned __int8 v168;
  NSObject *v169;
  __int128 v170;
  uint64_t v171;
  double *v172;
  CGFloat v173;
  unint64_t *v174;
  unint64_t v175;
  std::__shared_weak_count *v176;
  unint64_t *v177;
  unint64_t v178;
  std::__shared_weak_count *v179;
  unint64_t *v180;
  unint64_t v181;
  std::__shared_weak_count *v182;
  unint64_t *v183;
  unint64_t v184;
  float32x2_t v186;
  unsigned int v187;
  unsigned int v188;
  float v189;
  __int128 v190;
  __int128 v191;
  int v192;
  const char *v193;
  NSObject *v194;
  uint32_t v195;
  CGPoint *v196;
  uint64_t v197;
  char *v198;
  float32x4_t v199;
  uint64_t v200;
  std::__shared_weak_count *v201;
  uint64_t v202;
  std::__shared_weak_count *v203;
  uint64_t v204;
  std::__shared_weak_count *v205;
  _BYTE v206[16];
  cva::ArrayHandler *v207;
  std::__shared_weak_count *v208;
  CGFloat v209;
  CGFloat v210;
  CGRect buf;
  __int128 v212;
  int v213;
  __int128 v214;
  __int128 v215;
  int v216;
  uint64_t v217;
  int v218;
  char v219;
  uint8_t v220[16];
  _QWORD v221[6];

  v221[3] = *MEMORY[0x1E0C80C00];
  if (!****(_BYTE ****)&a1->x)
  {
    v28 = atomic_load((unsigned __int8 *)&qword_1ED52ACD0);
    if ((v28 & 1) == 0 && __cxa_guard_acquire(&qword_1ED52ACD0))
    {
      qword_1ED52ACE0 = (uint64_t)os_log_create("com.apple.AppleCVA", "FaceKit");
      __cxa_guard_release(&qword_1ED52ACD0);
    }
    v29 = (id)qword_1ED52ACE0;
    if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
    {
      LOWORD(buf.origin.x) = 0;
      _os_log_error_impl(&dword_1C9870000, v29, OS_LOG_TYPE_ERROR, "facekit is not properly initialized", (uint8_t *)&buf, 2u);
    }

    return 0;
  }
  v3 = a1;
  cva::DictionaryHandler::DictionaryHandler((cva::DictionaryHandler *)v206, a2);
  v4 = operator new();
  *(_QWORD *)v4 = 0;
  cva::DictionaryHandler::DictionaryHandler((cva::DictionaryHandler *)(v4 + 8));
  *(_DWORD *)(v4 + 48) = 0;
  *(_QWORD *)(v4 + 24) = 0x7FF8000000000000;
  *(_OWORD *)(v4 + 56) = 0u;
  *(_OWORD *)(v4 + 72) = 0u;
  *(_QWORD *)(v4 + 88) = 0;
  *(_QWORD *)(v4 + 96) = &off_1E8295050;
  *(_QWORD *)(v4 + 104) = 0x100000001;
  *(_DWORD *)(v4 + 112) = 1065353216;
  *(_QWORD *)(v4 + 116) = 0;
  *(_QWORD *)(v4 + 124) = 0x3F80000000000000;
  *(_QWORD *)(v4 + 132) = 0;
  *(_DWORD *)(v4 + 140) = 0;
  *(_QWORD *)(v4 + 152) = 0;
  *(_QWORD *)(v4 + 160) = 0;
  *(_QWORD *)(v4 + 168) = 0;
  *(_QWORD *)(v4 + 176) = 0x3F80000000000000;
  __asm { FMOV            V2.2S, #1.0 }
  *(_QWORD *)(v4 + 144) = _D2;
  *(_QWORD *)(v4 + 184) = 0;
  *(_DWORD *)(v4 + 164) = 1065353216;
  *(_DWORD *)(v4 + 192) = 0;
  *(_QWORD *)(v4 + 200) = 0;
  *(_QWORD *)(v4 + 208) = &off_1E8295050;
  *(_QWORD *)(v4 + 216) = 0x100000001;
  *(_DWORD *)(v4 + 224) = 1065353216;
  *(_QWORD *)(v4 + 228) = 0;
  *(_QWORD *)(v4 + 236) = 0x3F80000000000000;
  *(_QWORD *)(v4 + 244) = 0;
  *(_DWORD *)(v4 + 252) = 0;
  *(_QWORD *)(v4 + 264) = 0;
  *(_QWORD *)(v4 + 272) = 0;
  *(_QWORD *)(v4 + 280) = 0;
  *(_QWORD *)(v4 + 288) = 0x3F80000000000000;
  *(_QWORD *)(v4 + 256) = _D2;
  *(_DWORD *)(v4 + 276) = 1065353216;
  *(_QWORD *)(v4 + 296) = 0;
  *(_DWORD *)(v4 + 304) = 0;
  *(_BYTE *)(v4 + 376) = 0;
  *(_BYTE *)(v4 + 380) = 0;
  *(_BYTE *)(v4 + 382) = 0;
  *(_OWORD *)(v4 + 324) = 0u;
  *(_OWORD *)(v4 + 340) = 0u;
  *(_OWORD *)(v4 + 353) = 0u;
  *(_WORD *)(v4 + 384) = 1;
  *(_BYTE *)(v4 + 386) = 0;
  v204 = v4;
  v9 = (std::__shared_weak_count *)operator new();
  v9->__vftable = (std::__shared_weak_count_vtbl *)&off_1E82947A0;
  v9->__shared_owners_ = 0;
  v9->__shared_weak_owners_ = 0;
  v9[1].__vftable = (std::__shared_weak_count_vtbl *)v4;
  v205 = v9;
  if ((cva::DictionaryHandler::hasKey((cva::DictionaryHandler *)v206, CFSTR("rgb")) & 1) != 0)
  {
    Dictionary = (const __CFDictionary *)cva::DictionaryHandler::getDictionary((cva::DictionaryHandler *)v206);
    Value = (__CVBuffer *)CFDictionaryGetValue(Dictionary, CFSTR("rgb"));
    v12 = Value;
    if (!Value)
    {
      v52 = atomic_load((unsigned __int8 *)&qword_1ED52ACD0);
      if ((v52 & 1) == 0)
        goto LABEL_303;
      goto LABEL_56;
    }
    CVPixelBufferRetain(Value);
    if ((cva::DictionaryHandler::hasKey((cva::DictionaryHandler *)v206, CFSTR("rgb_camera")) & 1) != 0)
    {
      cva::DictionaryHandler::item((cva::DictionaryHandler *)v206, CFSTR("rgb_camera"));
      cva::ItemHandler::getDictionary((cva::ItemHandler *)v220);
      origin = buf.origin;
      buf.origin.x = 0.0;
      buf.origin.y = 0.0;
      v14 = *(std::__shared_weak_count **)(v4 + 80);
      *(CGPoint *)(v4 + 72) = origin;
      if (v14)
      {
        p_shared_owners = (unint64_t *)&v14->__shared_owners_;
        do
          v16 = __ldaxr(p_shared_owners);
        while (__stlxr(v16 - 1, p_shared_owners));
        if (!v16)
        {
          ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
          std::__shared_weak_count::__release_weak(v14);
        }
      }
      y = buf.origin.y;
      if (*(_QWORD *)&buf.origin.y)
      {
        v18 = (unint64_t *)(*(_QWORD *)&buf.origin.y + 8);
        do
          v19 = __ldaxr(v18);
        while (__stlxr(v19 - 1, v18));
        if (!v19)
        {
          (*(void (**)(CGFloat))(**(_QWORD **)&y + 16))(COERCE_CGFLOAT(*(_QWORD *)&y));
          std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&y);
        }
      }
      cva::ItemHandler::~ItemHandler((cva::ItemHandler *)v220);
      v20 = *(std::__shared_weak_count **)(v4 + 80);
      v209 = *(double *)(v4 + 72);
      v210 = *(double *)&v20;
      if (v20)
      {
        v21 = (unint64_t *)&v20->__shared_owners_;
        do
          v22 = __ldxr(v21);
        while (__stxr(v22 + 1, v21));
      }
      sub_1C98E5D54((uint64_t)&buf, (cva::DictionaryHandler **)&v209, v12);
      if (v20)
      {
        v23 = (unint64_t *)&v20->__shared_owners_;
        do
          v24 = __ldaxr(v23);
        while (__stlxr(v24 - 1, v23));
        if (!v24)
        {
          ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
          std::__shared_weak_count::__release_weak(v20);
        }
      }
      if (v219)
      {
        *(CGFloat *)(v4 + 104) = buf.origin.y;
        v25 = v216;
        *(_DWORD *)(v4 + 144) = v213;
        v26 = v212;
        *(CGSize *)(v4 + 112) = buf.size;
        *(_OWORD *)(v4 + 128) = v26;
        *(_OWORD *)(v4 + 148) = v214;
        *(_OWORD *)(v4 + 164) = v215;
        *(_DWORD *)(v4 + 180) = v25;
        *(_DWORD *)(v4 + 192) = v218;
        *(_QWORD *)(v4 + 184) = v217;
        CVPixelBufferRetain(v12);
        v27 = *(__CVBuffer **)(v4 + 88);
        if (v27)
          CVPixelBufferRelease(v27);
        *(_QWORD *)(v4 + 88) = v12;
        CVPixelBufferRelease(v12);
        v4 = v204;
        goto LABEL_35;
      }
      v123 = atomic_load((unsigned __int8 *)&qword_1ED52ACD0);
      if ((v123 & 1) == 0 && __cxa_guard_acquire(&qword_1ED52ACD0))
      {
        qword_1ED52ACE0 = (uint64_t)os_log_create("com.apple.AppleCVA", "FaceKit");
        __cxa_guard_release(&qword_1ED52ACD0);
      }
      v55 = (id)qword_1ED52ACE0;
      if (os_log_type_enabled(v55, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)v220 = 0;
        _os_log_error_impl(&dword_1C9870000, v55, OS_LOG_TYPE_ERROR, "Failed to extract color camera parameters from input dictionary.", v220, 2u);
      }
    }
    else
    {
      v54 = atomic_load((unsigned __int8 *)&qword_1ED52ACD0);
      if ((v54 & 1) == 0 && __cxa_guard_acquire(&qword_1ED52ACD0))
      {
        qword_1ED52ACE0 = (uint64_t)os_log_create("com.apple.AppleCVA", "FaceKit");
        __cxa_guard_release(&qword_1ED52ACD0);
      }
      v55 = (id)qword_1ED52ACE0;
      if (os_log_type_enabled(v55, OS_LOG_TYPE_ERROR))
      {
        LOWORD(buf.origin.x) = 0;
        _os_log_error_impl(&dword_1C9870000, v55, OS_LOG_TYPE_ERROR, "Missing color camera parameters.", (uint8_t *)&buf, 2u);
      }
    }

    CVPixelBufferRelease(v12);
    goto LABEL_169;
  }
  v31 = atomic_load((unsigned __int8 *)&qword_1ED52ACD0);
  if ((v31 & 1) == 0 && __cxa_guard_acquire(&qword_1ED52ACD0))
  {
    qword_1ED52ACE0 = (uint64_t)os_log_create("com.apple.AppleCVA", "FaceKit");
    __cxa_guard_release(&qword_1ED52ACD0);
  }
  v32 = (id)qword_1ED52ACE0;
  if (os_log_type_enabled(v32, OS_LOG_TYPE_INFO))
  {
    LOWORD(buf.origin.x) = 0;
    _os_log_impl(&dword_1C9870000, v32, OS_LOG_TYPE_INFO, "Missing color data.", (uint8_t *)&buf, 2u);
  }

LABEL_35:
  hasKey = cva::DictionaryHandler::hasKey((cva::DictionaryHandler *)v206, CFSTR("depth"));
  if ((hasKey | cva::DictionaryHandler::hasKey((cva::DictionaryHandler *)v206, CFSTR("normalized_disparity"))) == 1)
  {
    v34 = (const __CFDictionary *)cva::DictionaryHandler::getDictionary((cva::DictionaryHandler *)v206);
    if (hasKey)
      v35 = CFSTR("depth");
    else
      v35 = CFSTR("normalized_disparity");
    v36 = (__CVBuffer *)CFDictionaryGetValue(v34, v35);
    v37 = v36;
    if (!v36)
    {
      v120 = atomic_load((unsigned __int8 *)&qword_1ED52ACD0);
      if ((v120 & 1) == 0 && __cxa_guard_acquire(&qword_1ED52ACD0))
      {
        qword_1ED52ACE0 = (uint64_t)os_log_create("com.apple.AppleCVA", "FaceKit");
        __cxa_guard_release(&qword_1ED52ACD0);
      }
      v121 = (id)qword_1ED52ACE0;
      if (os_log_type_enabled(v121, OS_LOG_TYPE_ERROR))
      {
        LOWORD(buf.origin.x) = 0;
        _os_log_error_impl(&dword_1C9870000, v121, OS_LOG_TYPE_ERROR, "Invalid depth or normalized disparity.", (uint8_t *)&buf, 2u);
      }

      goto LABEL_232;
    }
    CVPixelBufferRetain(v36);
    if (cva::DictionaryHandler::hasKey((cva::DictionaryHandler *)v206, CFSTR("set_camera_depth_from_rgb"))&& (cva::DictionaryHandler::item((cva::DictionaryHandler *)v206, CFSTR("set_camera_depth_from_rgb")), v38 = cva::ItemHandler::getValue<BOOL>(), cva::ItemHandler::~ItemHandler((cva::ItemHandler *)v220), v38))
    {
      if (*(_QWORD *)(v4 + 88))
      {
        if (cva::DictionaryHandler::hasKey((cva::DictionaryHandler *)v206, CFSTR("depth_camera")))
        {
          sub_1C98FE490();
          v39 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v39, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)v220 = 0;
            _os_log_impl(&dword_1C9870000, v39, OS_LOG_TYPE_DEFAULT, "Depth camera dictionary is ignored when depth camera parameters are set from color camera.", v220, 2u);
          }

        }
        Width = CVPixelBufferGetWidth(v37);
        Height = CVPixelBufferGetHeight(v37);
        v42 = Height;
        v43 = *(_DWORD *)(v4 + 104);
        v44 = *(_DWORD *)(v4 + 108);
        if (v43 * Height == v44 * Width)
        {
          v45 = (float)Width / (float)v43;
          v46 = vmul_n_f32(vcvt_f32_s32(*(int32x2_t *)(v4 + 104)), v45);
          v47 = COERCE_DOUBLE(vcvt_s32_f32(vadd_f32(v46, (float32x2_t)vbsl_s8((int8x8_t)vcltz_f32(v46), (int8x8_t)0xBF000000BF000000, (int8x8_t)0x3F0000003F000000))));
          v48 = LODWORD(v47);
          v49 = HIDWORD(v47);
          if (LODWORD(v47) != Width || HIDWORD(v47) != Height)
          {
            sub_1C98FE490();
            v51 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v51, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)v220 = 67109888;
              *(_DWORD *)&v220[4] = Width;
              *(_WORD *)&v220[8] = 1024;
              *(_DWORD *)&v220[10] = v42;
              *(_WORD *)&v220[14] = 1024;
              LODWORD(v221[0]) = v48;
              WORD2(v221[0]) = 1024;
              *(_DWORD *)((char *)v221 + 6) = v49;
              _os_log_error_impl(&dword_1C9870000, v51, OS_LOG_TYPE_ERROR, "Incorrect scaled size. Expected size (%d, %d), actual size (%d, %d).", v220, 0x1Au);
            }

            LOBYTE(buf.origin.x) = 0;
            v219 = 0;
            goto LABEL_228;
          }
          v186 = vadd_f32(vmul_n_f32(vadd_f32(*(float32x2_t *)(v4 + 136), (float32x2_t)0x3F0000003F000000), v45), (float32x2_t)0xBF000000BF000000);
          v187 = *(_DWORD *)(v4 + 132);
          *(float *)&v188 = *(float *)(v4 + 128) * v45;
          v189 = *(float *)(v4 + 112);
          *(_QWORD *)&buf.origin.x = &off_1E8295050;
          buf.origin.y = v47;
          *(float *)&buf.size.width = v189 * v45;
          *(CGFloat *)((char *)&buf.size.width + 4) = *(CGFloat *)(v4 + 116);
          HIDWORD(buf.size.height) = *(_DWORD *)(v4 + 124);
          *(_QWORD *)&v212 = __PAIR64__(v187, v188);
          *((float32x2_t *)&v212 + 1) = v186;
          v190 = *(_OWORD *)(v4 + 148);
          v191 = *(_OWORD *)(v4 + 164);
          v192 = *(_DWORD *)(v4 + 180);
          v213 = *(_DWORD *)(v4 + 144);
          v216 = v192;
          v215 = v191;
          v214 = v190;
          v217 = *(_QWORD *)(v4 + 184);
          v218 = *(_DWORD *)(v4 + 192);
          v219 = 1;
LABEL_78:
          v64 = (CVPixelBufferRef *)(v4 + 200);
          if (hasKey)
          {
            v2 = 1.0;
            if (cva::DictionaryHandler::hasKey((cva::DictionaryHandler *)v206, CFSTR("depth_unit")))
            {
              cva::DictionaryHandler::item((cva::DictionaryHandler *)v206, CFSTR("depth_unit"));
              cva::ItemHandler::getValue<float>();
              v2 = v65;
              cva::ItemHandler::~ItemHandler((cva::ItemHandler *)v220);
            }
            *(CGFloat *)(v4 + 216) = buf.origin.y;
            if ((CGRect *)(v4 + 208) != &buf)
            {
              v66 = v216;
              *(_DWORD *)(v4 + 256) = v213;
              v67 = v212;
              *(CGSize *)(v4 + 224) = buf.size;
              *(_OWORD *)(v4 + 240) = v67;
              *(_DWORD *)(v4 + 292) = v66;
              *(_OWORD *)(v4 + 260) = v214;
              *(_OWORD *)(v4 + 276) = v215;
              *(_QWORD *)(v4 + 296) = v217;
              *(_DWORD *)(v4 + 304) = v218;
            }
            CVPixelBufferRetain(v37);
            if (*v64)
              CVPixelBufferRelease(*v64);
            *(_QWORD *)(v4 + 200) = v37;
            if (*(_DWORD *)(v4 + 324) != 1)
              *(_DWORD *)(v4 + 324) = 1;
            *(float *)(v4 + 312) = v2;
            goto LABEL_88;
          }
          LODWORD(v210) = 0x1FFF;
          if (!cva::DictionaryHandler::hasKey((cva::DictionaryHandler *)v206, CFSTR("disparity_normalization_multiplier")))goto LABEL_192;
          cva::DictionaryHandler::item((cva::DictionaryHandler *)v206, CFSTR("disparity_normalization_multiplier"));
          cva::ItemHandler::getValue<float>();
          LODWORD(v209) = v136;
          cva::ItemHandler::~ItemHandler((cva::ItemHandler *)v220);
          if (!cva::DictionaryHandler::hasKey((cva::DictionaryHandler *)v206, CFSTR("disparity_normalization_offset")))goto LABEL_192;
          cva::DictionaryHandler::item((cva::DictionaryHandler *)v206, CFSTR("disparity_normalization_offset"));
          cva::ItemHandler::getValue<float>();
          HIDWORD(v209) = v137;
          cva::ItemHandler::~ItemHandler((cva::ItemHandler *)v220);
          if ((sub_1C98E5FBC((cva::DictionaryHandler *)v206, &v210) & 1) != 0)
          {
            v2 = *(float *)&v209;
            if ((LODWORD(v209) & 0x7FFFFFFFu) <= 0x7F7FFFFF && *(float *)&v209 != 0.0)
            {
              sub_1C98CFB74((uint64_t)v64, v37, (uint64_t)&buf, (uint64_t *)&v209);
LABEL_88:
              CVPixelBufferRelease(v37);
              goto LABEL_89;
            }
            sub_1C98FE490();
            v139 = objc_claimAutoreleasedReturnValue();
            if (!os_log_type_enabled(v139, OS_LOG_TYPE_ERROR))
            {
LABEL_231:

              CVPixelBufferRelease(v37);
LABEL_232:
              v153 = atomic_load((unsigned __int8 *)&qword_1ED52ACD0);
              if ((v153 & 1) == 0 && __cxa_guard_acquire(&qword_1ED52ACD0))
              {
                qword_1ED52ACE0 = (uint64_t)os_log_create("com.apple.AppleCVA", "FaceKit");
                __cxa_guard_release(&qword_1ED52ACD0);
              }
              v119 = (id)qword_1ED52ACE0;
              if (os_log_type_enabled(v119, OS_LOG_TYPE_ERROR))
              {
                LOWORD(buf.origin.x) = 0;
                _os_log_error_impl(&dword_1C9870000, v119, OS_LOG_TYPE_ERROR, "Failed to extract depth data from the input dictionary.", (uint8_t *)&buf, 2u);
              }
LABEL_235:

              goto LABEL_236;
            }
            *(_DWORD *)v220 = 134217984;
            *(double *)&v220[4] = v2;
            v193 = "Invalid disparity normalization multiplier %g";
            v194 = v139;
            v195 = 12;
          }
          else
          {
LABEL_192:
            v138 = atomic_load((unsigned __int8 *)&qword_1ED52ACD0);
            if ((v138 & 1) == 0 && __cxa_guard_acquire(&qword_1ED52ACD0))
            {
              qword_1ED52ACE0 = (uint64_t)os_log_create("com.apple.AppleCVA", "FaceKit");
              __cxa_guard_release(&qword_1ED52ACD0);
            }
            v139 = (id)qword_1ED52ACE0;
            if (!os_log_type_enabled(v139, OS_LOG_TYPE_ERROR))
              goto LABEL_231;
            *(_WORD *)v220 = 0;
            v193 = "Missing one or more normalized disparity parameters.";
            v194 = v139;
            v195 = 2;
          }
          _os_log_error_impl(&dword_1C9870000, v194, OS_LOG_TYPE_ERROR, v193, v220, v195);
          goto LABEL_231;
        }
        sub_1C98FE490();
        v151 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v151, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)v220 = 67109888;
          *(_DWORD *)&v220[4] = v43;
          *(_WORD *)&v220[8] = 1024;
          *(_DWORD *)&v220[10] = v44;
          *(_WORD *)&v220[14] = 1024;
          LODWORD(v221[0]) = Width;
          WORD2(v221[0]) = 1024;
          *(_DWORD *)((char *)v221 + 6) = v42;
          _os_log_error_impl(&dword_1C9870000, v151, OS_LOG_TYPE_ERROR, "Original size (%d, %d) and target size (%d, %d) have different aspect ratio.", v220, 0x1Au);
        }
      }
      else
      {
        sub_1C98FE490();
        v151 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v151, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)v220 = 0;
          _os_log_error_impl(&dword_1C9870000, v151, OS_LOG_TYPE_ERROR, "Failed to set camera depth from color. Missing color camera parameters.", v220, 2u);
        }
      }

    }
    else if (cva::DictionaryHandler::hasKey((cva::DictionaryHandler *)v206, CFSTR("depth_camera")))
    {
      cva::DictionaryHandler::item((cva::DictionaryHandler *)v206, CFSTR("depth_camera"));
      cva::ItemHandler::getDictionary((cva::ItemHandler *)&v209);
      cva::ItemHandler::~ItemHandler((cva::ItemHandler *)&v209);
      v56 = *(std::__shared_weak_count **)&v220[8];
      v207 = *(cva::ArrayHandler **)v220;
      v208 = *(std::__shared_weak_count **)&v220[8];
      if (*(_QWORD *)&v220[8])
      {
        v57 = (unint64_t *)(*(_QWORD *)&v220[8] + 8);
        do
          v58 = __ldxr(v57);
        while (__stxr(v58 + 1, v57));
      }
      sub_1C98E5D54((uint64_t)&buf, &v207, v37);
      if (v56)
      {
        v59 = (unint64_t *)&v56->__shared_owners_;
        do
          v60 = __ldaxr(v59);
        while (__stlxr(v60 - 1, v59));
        if (!v60)
        {
          ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
          std::__shared_weak_count::__release_weak(v56);
        }
      }
      v61 = *(std::__shared_weak_count **)&v220[8];
      if (*(_QWORD *)&v220[8])
      {
        v62 = (unint64_t *)(*(_QWORD *)&v220[8] + 8);
        do
          v63 = __ldaxr(v62);
        while (__stlxr(v63 - 1, v62));
        if (!v63)
        {
          ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
          std::__shared_weak_count::__release_weak(v61);
        }
      }
      if (!v219)
        goto LABEL_228;
      goto LABEL_78;
    }
    LOBYTE(buf.origin.x) = 0;
    v219 = 0;
LABEL_228:
    v152 = atomic_load((unsigned __int8 *)&qword_1ED52ACD0);
    if ((v152 & 1) == 0 && __cxa_guard_acquire(&qword_1ED52ACD0))
    {
      qword_1ED52ACE0 = (uint64_t)os_log_create("com.apple.AppleCVA", "FaceKit");
      __cxa_guard_release(&qword_1ED52ACD0);
    }
    v139 = (id)qword_1ED52ACE0;
    if (os_log_type_enabled(v139, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v220 = 0;
      _os_log_error_impl(&dword_1C9870000, v139, OS_LOG_TYPE_ERROR, "Missing or invalid depth camera parameters.", v220, 2u);
    }
    goto LABEL_231;
  }
LABEL_89:
  if ((cva::DictionaryHandler::hasKey((cva::DictionaryHandler *)v206, CFSTR("callback")) & 1) == 0)
  {
    v118 = atomic_load((unsigned __int8 *)&qword_1ED52ACD0);
    if ((v118 & 1) == 0 && __cxa_guard_acquire(&qword_1ED52ACD0))
    {
      qword_1ED52ACE0 = (uint64_t)os_log_create("com.apple.AppleCVA", "FaceKit");
      __cxa_guard_release(&qword_1ED52ACD0);
    }
    v119 = (id)qword_1ED52ACE0;
    if (os_log_type_enabled(v119, OS_LOG_TYPE_ERROR))
    {
      LOWORD(buf.origin.x) = 0;
      _os_log_error_impl(&dword_1C9870000, v119, OS_LOG_TYPE_ERROR, "Missing callback function.", (uint8_t *)&buf, 2u);
    }
    goto LABEL_235;
  }
  objc_msgSend((id)cva::DictionaryHandler::getDictionary((cva::DictionaryHandler *)v206), "objectForKey:", CFSTR("callback"));
  v68 = objc_claimAutoreleasedReturnValue();
  v69 = v204;
  v70 = *(void **)v204;
  *(_QWORD *)v204 = v68;

  if (cva::DictionaryHandler::hasKey((cva::DictionaryHandler *)v206, CFSTR("timestamp")))
  {
    cva::DictionaryHandler::item((cva::DictionaryHandler *)v206, CFSTR("timestamp"));
    cva::ItemHandler::getDictionary((cva::ItemHandler *)v220);
    v71 = buf.origin;
    buf.origin.x = 0.0;
    buf.origin.y = 0.0;
    v72 = *(std::__shared_weak_count **)(v69 + 64);
    *(CGPoint *)(v69 + 56) = v71;
    if (v72)
    {
      v73 = (unint64_t *)&v72->__shared_owners_;
      do
        v74 = __ldaxr(v73);
      while (__stlxr(v74 - 1, v73));
      if (!v74)
      {
        ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
        std::__shared_weak_count::__release_weak(v72);
      }
    }
    v75 = buf.origin.y;
    if (*(_QWORD *)&buf.origin.y)
    {
      v76 = (unint64_t *)(*(_QWORD *)&buf.origin.y + 8);
      do
        v77 = __ldaxr(v76);
      while (__stlxr(v77 - 1, v76));
      if (!v77)
      {
        (*(void (**)(CGFloat))(**(_QWORD **)&v75 + 16))(COERCE_CGFLOAT(*(_QWORD *)&v75));
        std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&v75);
      }
    }
    cva::ItemHandler::~ItemHandler((cva::ItemHandler *)v220);
    v69 = v204;
    v78 = (const __CFDictionary *)cva::DictionaryHandler::getDictionary(*(cva::DictionaryHandler **)(v204 + 56));
    memset(&buf, 0, 24);
    CMTimeMakeFromDictionary((CMTime *)&buf, v78);
    v79 = buf.size.width;
    v221[0] = *(_QWORD *)&buf.size.width;
    *(CGPoint *)v220 = buf.origin;
    *(CGPoint *)(v204 + 24) = buf.origin;
    *(CGFloat *)(v69 + 40) = v79;
    *(_DWORD *)(v69 + 48) = 1;
  }
  if ((cva::DictionaryHandler::hasKey((cva::DictionaryHandler *)v206, CFSTR("DetectedFacesArray")) & 1) == 0)
  {
    v122 = atomic_load((unsigned __int8 *)&qword_1ED52ACD0);
    if ((v122 & 1) == 0 && __cxa_guard_acquire(&qword_1ED52ACD0))
    {
      qword_1ED52ACE0 = (uint64_t)os_log_create("com.apple.AppleCVA", "FaceKit");
      __cxa_guard_release(&qword_1ED52ACD0);
    }
    v119 = (id)qword_1ED52ACE0;
    if (os_log_type_enabled(v119, OS_LOG_TYPE_ERROR))
    {
      LOWORD(buf.origin.x) = 0;
      _os_log_error_impl(&dword_1C9870000, v119, OS_LOG_TYPE_ERROR, "Missing face detections.", (uint8_t *)&buf, 2u);
    }
    goto LABEL_235;
  }
  cva::DictionaryHandler::item((cva::DictionaryHandler *)v206, CFSTR("DetectedFacesArray"));
  cva::ItemHandler::getArray((cva::ItemHandler *)v220);
  v80 = buf.origin;
  buf.origin.x = 0.0;
  buf.origin.y = 0.0;
  v81 = *(std::__shared_weak_count **)(v69 + 360);
  *(CGPoint *)(v69 + 352) = v80;
  if (v81)
  {
    v82 = (unint64_t *)&v81->__shared_owners_;
    do
      v83 = __ldaxr(v82);
    while (__stlxr(v83 - 1, v82));
    if (!v83)
    {
      ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
      std::__shared_weak_count::__release_weak(v81);
    }
  }
  v84 = buf.origin.y;
  if (*(_QWORD *)&buf.origin.y)
  {
    v85 = (unint64_t *)(*(_QWORD *)&buf.origin.y + 8);
    do
      v86 = __ldaxr(v85);
    while (__stlxr(v86 - 1, v85));
    if (!v86)
    {
      (*(void (**)(CGFloat))(**(_QWORD **)&v84 + 16))(COERCE_CGFLOAT(*(_QWORD *)&v84));
      std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&v84);
    }
  }
  cva::ItemHandler::~ItemHandler((cva::ItemHandler *)v220);
  v87 = (_QWORD *)v204;
  v88 = *(cva::ArrayHandler **)(v204 + 352);
  v89 = *(std::__shared_weak_count **)(v204 + 360);
  v207 = v88;
  v208 = v89;
  if (v89)
  {
    v90 = (unint64_t *)&v89->__shared_owners_;
    do
      v91 = __ldxr(v90);
    while (__stxr(v91 + 1, v90));
  }
  v92 = cva::ArrayHandler::size(v88);
  v93 = v92;
  if (v92)
  {
    if (v92 < 0)
      abort();
    v94 = (uint64_t *)operator new(32 * v92);
    v196 = v3;
    v95 = 0;
    v198 = (char *)&v94[4 * v93];
    v96 = v94;
    v97 = CFSTR("Rect");
    do
    {
      cva::ArrayHandler::item(v207);
      cva::ItemHandler::getDictionary((cva::ItemHandler *)v220);
      x = buf.origin.x;
      v99 = buf.origin.y;
      v209 = buf.origin.x;
      v210 = buf.origin.y;
      buf.origin.x = 0.0;
      buf.origin.y = 0.0;
      cva::ItemHandler::~ItemHandler((cva::ItemHandler *)v220);
      if (x != 0.0
        && cva::DictionaryHandler::hasKey(*(cva::DictionaryHandler **)&x, CFSTR("FaceID"))
        && cva::DictionaryHandler::hasKey(*(cva::DictionaryHandler **)&x, CFSTR("AngleInfoRoll"))
        && cva::DictionaryHandler::hasKey(*(cva::DictionaryHandler **)&x, v97))
      {
        v100 = v97;
        cva::DictionaryHandler::item(*(cva::DictionaryHandler **)&x, v97);
        cva::ItemHandler::getDictionary((cva::ItemHandler *)v220);
        v101 = buf.origin.x;
        v102 = buf.origin.y;
        buf.origin.x = 0.0;
        buf.origin.y = 0.0;
        cva::ItemHandler::~ItemHandler((cva::ItemHandler *)v220);
        v199 = 0u;
        if (v101 != 0.0)
        {
          v103 = *(CGSize *)(MEMORY[0x1E0C9D648] + 16);
          buf.origin = (CGPoint)*MEMORY[0x1E0C9D648];
          buf.size = v103;
          v104 = (const __CFDictionary *)cva::DictionaryHandler::getDictionary(*(cva::DictionaryHandler **)&v101);
          if (CGRectMakeWithDictionaryRepresentation(v104, &buf))
          {
            v199 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64((float64x2_t)buf.origin), (float64x2_t)buf.size);
            cva::DictionaryHandler::item(*(cva::DictionaryHandler **)&x, CFSTR("AngleInfoRoll"));
            cva::ItemHandler::getValue<float>();
            v2 = v105;
            cva::ItemHandler::~ItemHandler((cva::ItemHandler *)&buf);
            cva::DictionaryHandler::item(*(cva::DictionaryHandler **)&x, CFSTR("FaceID"));
            v197 = cva::ItemHandler::getValue<unsigned long long>();
            cva::ItemHandler::~ItemHandler((cva::ItemHandler *)&buf);
            LOBYTE(v101) = 1;
          }
          else
          {
            LOBYTE(v101) = 0;
          }
        }
        if (v102 != 0.0)
        {
          v106 = (unint64_t *)(*(_QWORD *)&v102 + 8);
          do
            v107 = __ldaxr(v106);
          while (__stlxr(v107 - 1, v106));
          if (!v107)
          {
            (*(void (**)(CGFloat))(**(_QWORD **)&v102 + 16))(COERCE_CGFLOAT(*(_QWORD *)&v102));
            std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&v102);
          }
        }
        v97 = v100;
        if ((LOBYTE(v101) & 1) != 0)
        {
          if (v96 >= (uint64_t *)v198)
          {
            v108 = ((char *)v96 - (char *)v94) >> 5;
            v109 = v108 + 1;
            if ((unint64_t)(v108 + 1) >> 59)
              abort();
            if ((v198 - (char *)v94) >> 4 > v109)
              v109 = (v198 - (char *)v94) >> 4;
            if ((unint64_t)(v198 - (char *)v94) >= 0x7FFFFFFFFFFFFFE0)
              v110 = 0x7FFFFFFFFFFFFFFLL;
            else
              v110 = v109;
            if (v110 >> 59)
              sub_1C9899D30();
            v111 = (char *)operator new(32 * v110);
            v112 = &v111[32 * v108];
            *(_QWORD *)v112 = v197;
            *((float *)v112 + 2) = v2;
            *(float32x4_t *)(v112 + 12) = v199;
            for (i = v112; v96 != v94; *(_QWORD *)(i + 20) = *(uint64_t *)((char *)v96 + 20))
            {
              v114 = *(v96 - 4);
              v96 -= 4;
              v115 = *((_DWORD *)v96 + 2);
              *((_QWORD *)i - 4) = v114;
              i -= 32;
              *((_DWORD *)i + 2) = v115;
              *(_QWORD *)(i + 12) = *(uint64_t *)((char *)v96 + 12);
            }
            v198 = &v111[32 * v110];
            v96 = (uint64_t *)(v112 + 32);
            if (v94)
              operator delete(v94);
            v94 = (uint64_t *)i;
          }
          else
          {
            *v96 = v197;
            *((float *)v96 + 2) = v2;
            *(float32x4_t *)((char *)v96 + 12) = v199;
            v96 += 4;
          }
        }
      }
      if (v99 != 0.0)
      {
        v116 = (unint64_t *)(*(_QWORD *)&v99 + 8);
        do
          v117 = __ldaxr(v116);
        while (__stlxr(v117 - 1, v116));
        if (!v117)
        {
          (*(void (**)(CGFloat))(**(_QWORD **)&v99 + 16))(COERCE_CGFLOAT(*(_QWORD *)&v99));
          std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&v99);
        }
      }
      ++v95;
    }
    while (v95 != v93);
    v87 = (_QWORD *)v204;
    v3 = v196;
    v126 = v198;
  }
  else
  {
    v94 = 0;
    v96 = 0;
    v126 = 0;
  }
  v127 = (void *)v87[41];
  if (v127)
  {
    v87[42] = v127;
    operator delete(v127);
    v87[41] = 0;
    v87[42] = 0;
    v87[43] = 0;
  }
  v87[41] = v94;
  v87[42] = v96;
  v87[43] = v126;
  v128 = v208;
  if (v208)
  {
    v129 = (unint64_t *)&v208->__shared_owners_;
    do
      v130 = __ldaxr(v129);
    while (__stlxr(v130 - 1, v129));
    if (!v130)
    {
      ((void (*)(std::__shared_weak_count *))v128->__on_zero_shared)(v128);
      std::__shared_weak_count::__release_weak(v128);
    }
  }
  if (cva::DictionaryHandler::hasKey((cva::DictionaryHandler *)v206, CFSTR("RgbMetadata")))
  {
    cva::DictionaryHandler::item((cva::DictionaryHandler *)v206, CFSTR("RgbMetadata"));
    cva::ItemHandler::getDictionary((cva::ItemHandler *)&v209);
    v132 = buf.origin.x;
    v131 = buf.origin.y;
    *(CGFloat *)v220 = buf.origin.x;
    *(CGFloat *)&v220[8] = buf.origin.y;
    buf.origin.x = 0.0;
    buf.origin.y = 0.0;
    cva::ItemHandler::~ItemHandler((cva::ItemHandler *)&v209);
    if (cva::DictionaryHandler::hasKey(*(cva::DictionaryHandler **)&v132, CFSTR("LuxLevel")))
    {
      cva::DictionaryHandler::item(*(cva::DictionaryHandler **)&v132, CFSTR("LuxLevel"));
      v133 = cva::ItemHandler::getValue<int>();
      cva::ItemHandler::~ItemHandler((cva::ItemHandler *)&buf);
      v134 = v133 | 0x100000000;
    }
    else
    {
      v134 = 0;
    }
    if (v131 != 0.0)
    {
      v140 = (unint64_t *)(*(_QWORD *)&v131 + 8);
      do
        v141 = __ldaxr(v140);
      while (__stlxr(v141 - 1, v140));
      if (!v141)
      {
        (*(void (**)(CGFloat))(**(_QWORD **)&v131 + 16))(COERCE_CGFLOAT(*(_QWORD *)&v131));
        std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&v131);
      }
    }
    v135 = 1;
  }
  else
  {
    v135 = 0;
    v134 = 0;
  }
  v142 = v204;
  *(_QWORD *)(v204 + 368) = v134;
  *(_BYTE *)(v142 + 376) = v135;
  if (cva::DictionaryHandler::hasKey((cva::DictionaryHandler *)v206, CFSTR("depth_meta_data")))
  {
    cva::DictionaryHandler::item((cva::DictionaryHandler *)v206, CFSTR("depth_meta_data"));
    cva::ItemHandler::getDictionary((cva::ItemHandler *)&v209);
    v144 = buf.origin.x;
    v143 = buf.origin.y;
    *(CGFloat *)v220 = buf.origin.x;
    *(CGFloat *)&v220[8] = buf.origin.y;
    buf.origin.x = 0.0;
    buf.origin.y = 0.0;
    cva::ItemHandler::~ItemHandler((cva::ItemHandler *)&v209);
    if (cva::DictionaryHandler::hasKey(*(cva::DictionaryHandler **)&v144, CFSTR("structured_light_occluded")))
    {
      cva::DictionaryHandler::item(*(cva::DictionaryHandler **)&v144, CFSTR("structured_light_occluded"));
      v145 = cva::ItemHandler::getValue<BOOL>();
      cva::ItemHandler::~ItemHandler((cva::ItemHandler *)&buf);
      v146 = 256;
    }
    else
    {
      v146 = 0;
      v145 = 0;
    }
    if (v143 != 0.0)
    {
      v148 = (unint64_t *)(*(_QWORD *)&v143 + 8);
      do
        v149 = __ldaxr(v148);
      while (__stlxr(v149 - 1, v148));
      if (!v149)
      {
        (*(void (**)(CGFloat))(**(_QWORD **)&v143 + 16))(COERCE_CGFLOAT(*(_QWORD *)&v143));
        std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&v143);
      }
    }
    v147 = v145 | v146 | 0x10000;
  }
  else
  {
    v147 = 0;
  }
  *(_WORD *)(v142 + 380) = v147;
  *(_BYTE *)(v142 + 382) = BYTE2(v147);
  if (cva::DictionaryHandler::hasKey((cva::DictionaryHandler *)v206, CFSTR("fittingEnabled")))
  {
    cva::DictionaryHandler::item((cva::DictionaryHandler *)v206, CFSTR("fittingEnabled"));
    *(_BYTE *)(v142 + 384) = cva::ItemHandler::getValue<BOOL>();
    cva::ItemHandler::~ItemHandler((cva::ItemHandler *)&buf);
  }
  if (cva::DictionaryHandler::hasKey((cva::DictionaryHandler *)v206, CFSTR("add_debug")))
  {
    cva::DictionaryHandler::item((cva::DictionaryHandler *)v206, CFSTR("add_debug"));
    *(_BYTE *)(v142 + 385) = cva::ItemHandler::getValue<BOOL>();
    cva::ItemHandler::~ItemHandler((cva::ItemHandler *)&buf);
  }
  if (cva::DictionaryHandler::hasKey((cva::DictionaryHandler *)v206, CFSTR("add_mesh")))
  {
    cva::DictionaryHandler::item((cva::DictionaryHandler *)v206, CFSTR("add_mesh"));
    *(_BYTE *)(v142 + 386) = cva::ItemHandler::getValue<BOOL>();
    cva::ItemHandler::~ItemHandler((cva::ItemHandler *)&buf);
  }
  cva::DictionaryHandler::operator=();
  if ((sub_1C98E6040(v142) & 1) != 0)
  {
    v202 = v142;
    v203 = v205;
    v150 = &v204;
    goto LABEL_237;
  }
LABEL_236:
  while (1)
  {
    v150 = &v202;
LABEL_237:
    *v150 = 0;
    v150[1] = 0;
    v154 = v205;
    if (v205)
    {
      v155 = (unint64_t *)&v205->__shared_owners_;
      do
        v156 = __ldaxr(v155);
      while (__stlxr(v156 - 1, v155));
      if (!v156)
      {
        ((void (*)(std::__shared_weak_count *))v154->__on_zero_shared)(v154);
        std::__shared_weak_count::__release_weak(v154);
      }
    }
    cva::DictionaryHandler::~DictionaryHandler((cva::DictionaryHandler *)v206);
    v157 = v202;
    if (!v202)
      break;
    v158 = v3->x;
    v200 = v202;
    v201 = v203;
    if (v203)
    {
      v159 = (unint64_t *)&v203->__shared_owners_;
      do
        v160 = __ldxr(v159);
      while (__stxr(v160 + 1, v159));
    }
    v3 = (CGPoint *)(v157 + 24);
    v161 = (CGPoint *)(*(_QWORD *)&v158 + 200);
    if ((sub_1C991D1D8(*(_QWORD *)&v158 + 200, v157 + 24) & 0x80) != 0)
      goto LABEL_262;
    v162 = atomic_load((unsigned __int8 *)&qword_1ED52ACD0);
    if ((v162 & 1) == 0 && __cxa_guard_acquire(&qword_1ED52ACD0))
    {
      qword_1ED52ACE0 = (uint64_t)os_log_create("com.apple.AppleCVA", "FaceKit");
      __cxa_guard_release(&qword_1ED52ACD0);
    }
    v163 = (id)qword_1ED52ACE0;
    if (!os_log_type_enabled(v163, OS_LOG_TYPE_DEFAULT))
      goto LABEL_261;
    v164 = *(_DWORD *)(*(_QWORD *)&v158 + 224);
    if (v164)
    {
      if (v164 != 1)
        goto LABEL_302;
      buf.origin = *v161;
      buf.size.width = *(CGFloat *)(*(_QWORD *)&v158 + 216);
      Seconds = CMTimeGetSeconds((CMTime *)&buf);
      v166 = *(_DWORD *)(v157 + 48);
      if (!v166)
        goto LABEL_259;
    }
    else
    {
      Seconds = v161->x;
      v166 = *(_DWORD *)(v157 + 48);
      if (!v166)
      {
LABEL_259:
        v167 = v3->x;
LABEL_260:
        LODWORD(buf.origin.x) = 134218240;
        *(Float64 *)((char *)&buf.origin.x + 4) = Seconds;
        WORD2(buf.origin.y) = 2048;
        *(double *)((char *)&buf.origin.y + 6) = v167;
        _os_log_impl(&dword_1C9870000, v163, OS_LOG_TYPE_DEFAULT, "Timestamps out of order, last %.4f current %.4f", (uint8_t *)&buf, 0x16u);
LABEL_261:

LABEL_262:
        v170 = *(_OWORD *)(v157 + 40);
        *v161 = *v3;
        *(_OWORD *)(*(_QWORD *)&v158 + 216) = v170;
        std::mutex::lock((std::mutex *)(*(_QWORD *)&v158 + 56));
        std::mutex::unlock((std::mutex *)(*(_QWORD *)&v158 + 56));
        kdebug_trace();
        if (sub_1C98E357C(*(_QWORD *)&v158 + 40, &v200))
        {
          v171 = *(_QWORD *)(*(_QWORD *)&v158 + 8);
          v172 = (double *)operator new(0x40uLL);
          v172[1] = 0.0;
          v172[2] = 0.0;
          *((_QWORD *)v172 + 3) = &off_1E8294D38;
          *(_QWORD *)v172 = &off_1E8295AD8;
          *((_QWORD *)v172 + 4) = &off_1E82942A0;
          v172[5] = v158;
          *((_QWORD *)v172 + 7) = v172 + 4;
          *(_QWORD *)&buf.origin.x = v172 + 3;
          *(_QWORD *)&buf.origin.y = v172;
          memset(v220, 0, sizeof(v220));
          v30 = (*(uint64_t (**)(uint64_t, CGRect *))(*(_QWORD *)v171 + 16))(v171, &buf);
          v173 = buf.origin.y;
          if (*(_QWORD *)&buf.origin.y)
          {
            v174 = (unint64_t *)(*(_QWORD *)&buf.origin.y + 8);
            do
              v175 = __ldaxr(v174);
            while (__stlxr(v175 - 1, v174));
            if (!v175)
            {
              (*(void (**)(CGFloat))(**(_QWORD **)&v173 + 16))(COERCE_CGFLOAT(*(_QWORD *)&v173));
              std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&v173);
            }
          }
          v176 = *(std::__shared_weak_count **)&v220[8];
          if (*(_QWORD *)&v220[8])
          {
            v177 = (unint64_t *)(*(_QWORD *)&v220[8] + 8);
            do
              v178 = __ldaxr(v177);
            while (__stlxr(v178 - 1, v177));
            if (!v178)
            {
              ((void (*)(std::__shared_weak_count *))v176->__on_zero_shared)(v176);
              std::__shared_weak_count::__release_weak(v176);
            }
          }
        }
        else
        {
          v30 = 0;
        }
        v179 = v201;
        if (v201)
        {
          v180 = (unint64_t *)&v201->__shared_owners_;
          do
            v181 = __ldaxr(v180);
          while (__stlxr(v181 - 1, v180));
          if (!v181)
          {
            ((void (*)(std::__shared_weak_count *))v179->__on_zero_shared)(v179);
            std::__shared_weak_count::__release_weak(v179);
          }
        }
        goto LABEL_279;
      }
    }
    if (v166 == 1)
    {
      buf.origin = *v3;
      buf.size.width = *(CGFloat *)(v157 + 40);
      v167 = CMTimeGetSeconds((CMTime *)&buf);
      goto LABEL_260;
    }
LABEL_302:
    sub_1C98CFB60();
LABEL_303:
    if (__cxa_guard_acquire(&qword_1ED52ACD0))
    {
      qword_1ED52ACE0 = (uint64_t)os_log_create("com.apple.AppleCVA", "FaceKit");
      __cxa_guard_release(&qword_1ED52ACD0);
    }
LABEL_56:
    v53 = (id)qword_1ED52ACE0;
    if (os_log_type_enabled(v53, OS_LOG_TYPE_ERROR))
    {
      LOWORD(buf.origin.x) = 0;
      _os_log_error_impl(&dword_1C9870000, v53, OS_LOG_TYPE_ERROR, "Invalid color buffer.", (uint8_t *)&buf, 2u);
    }

LABEL_169:
    v124 = atomic_load((unsigned __int8 *)&qword_1ED52ACD0);
    if ((v124 & 1) == 0 && __cxa_guard_acquire(&qword_1ED52ACD0))
    {
      qword_1ED52ACE0 = (uint64_t)os_log_create("com.apple.AppleCVA", "FaceKit");
      __cxa_guard_release(&qword_1ED52ACD0);
    }
    v125 = (id)qword_1ED52ACE0;
    if (os_log_type_enabled(v125, OS_LOG_TYPE_ERROR))
    {
      LOWORD(buf.origin.x) = 0;
      _os_log_error_impl(&dword_1C9870000, v125, OS_LOG_TYPE_ERROR, "Failed to extract color data from the input dictionary.", (uint8_t *)&buf, 2u);
    }

  }
  v168 = atomic_load((unsigned __int8 *)&qword_1ED52ACD0);
  if ((v168 & 1) == 0 && __cxa_guard_acquire(&qword_1ED52ACD0))
  {
    qword_1ED52ACE0 = (uint64_t)os_log_create("com.apple.AppleCVA", "FaceKit");
    __cxa_guard_release(&qword_1ED52ACD0);
  }
  v169 = (id)qword_1ED52ACE0;
  if (os_log_type_enabled(v169, OS_LOG_TYPE_ERROR))
  {
    LOWORD(buf.origin.x) = 0;
    _os_log_error_impl(&dword_1C9870000, v169, OS_LOG_TYPE_ERROR, "invalid facekit input parameters", (uint8_t *)&buf, 2u);
  }

  v30 = 0;
LABEL_279:
  v182 = v203;
  if (v203)
  {
    v183 = (unint64_t *)&v203->__shared_owners_;
    do
      v184 = __ldaxr(v183);
    while (__stlxr(v184 - 1, v183));
    if (!v184)
    {
      ((void (*)(std::__shared_weak_count *))v182->__on_zero_shared)(v182);
      std::__shared_weak_count::__release_weak(v182);
    }
  }
  return v30;
}

void sub_1C98E5A68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  __CVBuffer *v11;
  uint64_t v12;
  uint64_t v14;
  va_list va;
  uint64_t v16;
  va_list va1;

  va_start(va1, a11);
  va_start(va, a11);
  v14 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  cva::ItemHandler::~ItemHandler((cva::ItemHandler *)(v12 - 160));
  CVPixelBufferRelease(v11);
  sub_1C987C140((uint64_t)va);
  cva::DictionaryHandler::~DictionaryHandler((cva::DictionaryHandler *)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_1C98E5C3C(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  void *v5;
  __CVBuffer *v6;
  __CVBuffer *v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;

  v2 = *(std::__shared_weak_count **)(a1 + 360);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = *(void **)(a1 + 328);
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = *(void **)(a1 + 328);
  if (v5)
  {
LABEL_6:
    *(_QWORD *)(a1 + 336) = v5;
    operator delete(v5);
  }
LABEL_7:
  v6 = *(__CVBuffer **)(a1 + 200);
  if (v6)
    CVPixelBufferRelease(v6);
  v7 = *(__CVBuffer **)(a1 + 88);
  if (v7)
    CVPixelBufferRelease(v7);
  v8 = *(std::__shared_weak_count **)(a1 + 80);
  if (!v8)
    goto LABEL_15;
  v9 = (unint64_t *)&v8->__shared_owners_;
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 - 1, v9));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
    v11 = *(std::__shared_weak_count **)(a1 + 64);
    if (!v11)
      goto LABEL_23;
  }
  else
  {
LABEL_15:
    v11 = *(std::__shared_weak_count **)(a1 + 64);
    if (!v11)
      goto LABEL_23;
  }
  v12 = (unint64_t *)&v11->__shared_owners_;
  do
    v13 = __ldaxr(v12);
  while (__stlxr(v13 - 1, v12));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
LABEL_23:
  cva::DictionaryHandler::~DictionaryHandler((cva::DictionaryHandler *)(a1 + 8));

  return a1;
}

void sub_1C98E5D54(uint64_t a1, cva::DictionaryHandler **a2, CVPixelBufferRef pixelBuffer)
{
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  char v14;
  unsigned __int8 v15;
  NSObject *v16;
  unsigned __int8 v17;
  NSObject *v18;
  uint8_t v19[16];
  uint8_t buf[8];
  uint64_t v21;
  _BYTE v22[32];
  _BYTE v23[40];
  uint64_t v24;
  int v25;

  if (*a2)
  {
    *(_QWORD *)buf = &off_1E8295050;
    *(_DWORD *)v22 = 1065353216;
    *(_QWORD *)&v22[4] = 0;
    *(_QWORD *)&v22[12] = 0x3F80000000000000;
    *(_QWORD *)&v22[20] = 0;
    *(_DWORD *)&v22[28] = 0;
    *(_QWORD *)&v23[8] = 0;
    *(_QWORD *)&v23[16] = 0x3F80000000000000;
    *(_QWORD *)&v23[24] = 0;
    *(_QWORD *)&v23[32] = 0x3F80000000000000;
    __asm { FMOV            V0.2S, #1.0 }
    *(_QWORD *)v23 = _D0;
    v24 = 0;
    v25 = 0;
    LODWORD(v21) = CVPixelBufferGetWidth(pixelBuffer);
    HIDWORD(v21) = CVPixelBufferGetHeight(pixelBuffer);
    if ((sub_1C98E6630(*a2, v22, &v23[4], &v24) & 1) != 0)
    {
      if (sub_1C98D86F4((uint64_t)buf, pixelBuffer))
      {
        v11 = *(_OWORD *)&v22[16];
        *(_OWORD *)(a1 + 16) = *(_OWORD *)v22;
        *(_OWORD *)(a1 + 32) = v11;
        v12 = *(_OWORD *)&v23[20];
        *(_OWORD *)(a1 + 52) = *(_OWORD *)&v23[4];
        v13 = v21;
        *(_QWORD *)a1 = &off_1E8295050;
        *(_QWORD *)(a1 + 8) = v13;
        *(_DWORD *)(a1 + 48) = *(_DWORD *)v23;
        *(_OWORD *)(a1 + 68) = v12;
        *(_DWORD *)(a1 + 84) = *(_DWORD *)&v23[36];
        *(_DWORD *)(a1 + 96) = v25;
        v14 = 1;
        *(_QWORD *)(a1 + 88) = v24;
LABEL_14:
        *(_BYTE *)(a1 + 104) = v14;
        return;
      }
    }
    else
    {
      v17 = atomic_load((unsigned __int8 *)&qword_1ED52ACD0);
      if ((v17 & 1) == 0 && __cxa_guard_acquire(&qword_1ED52ACD0))
      {
        qword_1ED52ACE0 = (uint64_t)os_log_create("com.apple.AppleCVA", "FaceKit");
        __cxa_guard_release(&qword_1ED52ACD0);
      }
      v18 = (id)qword_1ED52ACE0;
      if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)v19 = 0;
        _os_log_error_impl(&dword_1C9870000, v18, OS_LOG_TYPE_ERROR, "Failed to extract camera parameters from dictionary.", v19, 2u);
      }

    }
    v14 = 0;
    *(_BYTE *)a1 = 0;
    goto LABEL_14;
  }
  v15 = atomic_load((unsigned __int8 *)&qword_1ED52ACD0);
  if ((v15 & 1) == 0 && __cxa_guard_acquire(&qword_1ED52ACD0))
  {
    qword_1ED52ACE0 = (uint64_t)os_log_create("com.apple.AppleCVA", "FaceKit");
    __cxa_guard_release(&qword_1ED52ACD0);
  }
  v16 = (id)qword_1ED52ACE0;
  if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_error_impl(&dword_1C9870000, v16, OS_LOG_TYPE_ERROR, "Camera parameters dictionary missing or incomplete.", buf, 2u);
  }

  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 104) = 0;
}

uint64_t sub_1C98E5FBC(cva::DictionaryHandler *a1, _DWORD *a2)
{
  uint64_t hasKey;
  uint64_t v6;

  hasKey = cva::DictionaryHandler::hasKey(a1, CFSTR("disparity_invalid_value"));
  if ((_DWORD)hasKey)
  {
    cva::DictionaryHandler::item(a1, CFSTR("disparity_invalid_value"));
    *a2 = cva::ItemHandler::getValue<int>();
    cva::ItemHandler::~ItemHandler((cva::ItemHandler *)&v6);
  }
  return hasKey;
}

void sub_1C98E602C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  cva::ItemHandler::~ItemHandler((cva::ItemHandler *)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1C98E6040(uint64_t a1)
{
  __CVBuffer *v2;
  __CVBuffer *v3;
  int v4;
  unsigned __int8 v5;
  NSObject *v6;
  const char *v7;
  uint8_t *v8;
  unsigned __int8 v9;
  unsigned __int8 v10;
  unsigned __int8 v12;
  __int16 v13;
  __int16 v14;
  __int16 v15;
  uint8_t buf[2];

  v2 = *(__CVBuffer **)(a1 + 88);
  if (v2)
  {
    if (!sub_1C98D86F4(a1 + 96, v2))
    {
      v9 = atomic_load((unsigned __int8 *)&qword_1ED52ACD0);
      if ((v9 & 1) == 0 && __cxa_guard_acquire(&qword_1ED52ACD0))
      {
        qword_1ED52ACE0 = (uint64_t)os_log_create("com.apple.AppleCVA", "FaceKit");
        __cxa_guard_release(&qword_1ED52ACD0);
      }
      v6 = (id)qword_1ED52ACE0;
      if (!os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
        goto LABEL_24;
      v15 = 0;
      v7 = "rgb camera parameters check failed";
      v8 = (uint8_t *)&v15;
      goto LABEL_23;
    }
    v3 = *(__CVBuffer **)(a1 + 200);
    if (!v3)
      goto LABEL_7;
  }
  else
  {
    v3 = *(__CVBuffer **)(a1 + 200);
    if (!v3)
    {
      v12 = atomic_load((unsigned __int8 *)&qword_1ED52ACD0);
      if ((v12 & 1) != 0)
        goto LABEL_21;
      goto LABEL_30;
    }
  }
  if (!sub_1C98D86F4(a1 + 208, v3))
  {
    v10 = atomic_load((unsigned __int8 *)&qword_1ED52ACD0);
    if ((v10 & 1) == 0 && __cxa_guard_acquire(&qword_1ED52ACD0))
    {
      qword_1ED52ACE0 = (uint64_t)os_log_create("com.apple.AppleCVA", "FaceKit");
      __cxa_guard_release(&qword_1ED52ACD0);
    }
    v6 = (id)qword_1ED52ACE0;
    if (!os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
      goto LABEL_24;
    v14 = 0;
    v7 = "depth camera parameters check failed";
    v8 = (uint8_t *)&v14;
    goto LABEL_23;
  }
LABEL_7:
  v4 = *(_DWORD *)(a1 + 48);
  if (!v4)
    return 1;
  if (v4 == 1)
  {
    if ((*(_BYTE *)(a1 + 36) & 1) == 0)
    {
      v5 = atomic_load((unsigned __int8 *)&qword_1ED52ACD0);
      if ((v5 & 1) == 0)
      {
        if (__cxa_guard_acquire(&qword_1ED52ACD0))
        {
          qword_1ED52ACE0 = (uint64_t)os_log_create("com.apple.AppleCVA", "FaceKit");
          __cxa_guard_release(&qword_1ED52ACD0);
        }
      }
      v6 = (id)qword_1ED52ACE0;
      if (!os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
        goto LABEL_24;
      v13 = 0;
      v7 = "invalid timestamp";
      v8 = (uint8_t *)&v13;
      goto LABEL_23;
    }
    return 1;
  }
  sub_1C98CFB60();
LABEL_30:
  if (__cxa_guard_acquire(&qword_1ED52ACD0))
  {
    qword_1ED52ACE0 = (uint64_t)os_log_create("com.apple.AppleCVA", "FaceKit");
    __cxa_guard_release(&qword_1ED52ACD0);
  }
LABEL_21:
  v6 = (id)qword_1ED52ACE0;
  if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    v7 = "color or depth data missing";
    v8 = buf;
LABEL_23:
    _os_log_error_impl(&dword_1C9870000, v6, OS_LOG_TYPE_ERROR, v7, v8, 2u);
  }
LABEL_24:

  return 0;
}

void sub_1C98E62EC(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1CAA44AFCLL);
}

uint64_t sub_1C98E6310(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
  {
    sub_1C98E5C3C(result);
    JUMPOUT(0x1CAA44AFCLL);
  }
  return result;
}

void sub_1C98E634C(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1CAA44AFCLL);
}

uint64_t sub_1C98E6370(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
  {
    sub_1C98E5C3C(result);
    JUMPOUT(0x1CAA44AFCLL);
  }
  return result;
}

void sub_1C98E63A8(cva::DictionaryHandler *a1, _DWORD *a2, _DWORD *a3, _DWORD *a4)
{
  _DWORD *v8;
  void *memptr[2];
  void *v10[3];

  cva::DictionaryHandler::DictionaryHandler(a1);
  v10[1] = (void *)16;
  memptr[0] = 0;
  malloc_type_posix_memalign(memptr, 0x20uLL, 0x40uLL, 0x49090899uLL);
  v8 = memptr[0];
  v10[0] = memptr[0];
  v10[2] = (void *)0x300000003;
  *(_DWORD *)memptr[0] = *a2;
  v8[1] = a2[1];
  v8[2] = a2[2];
  v8[3] = a2[3];
  v8[4] = a2[4];
  v8[5] = a2[5];
  v8[6] = a2[6];
  v8[7] = a2[7];
  v8[8] = a2[8];
  cva::ItemHandler::createMatrix<float>();
  free(v10[0]);
  cva::DictionaryHandler::setItem(a1, CFSTR("intrinsics"), (const cva::ItemHandler *)memptr);
  cva::ItemHandler::~ItemHandler((cva::ItemHandler *)memptr);
  sub_1C98E64D0((cva::DictionaryHandler *)v10, a3, a4);
  cva::ItemHandler::ItemHandler();
  cva::DictionaryHandler::setItem(a1, CFSTR("extrinsics"), (const cva::ItemHandler *)memptr);
  cva::ItemHandler::~ItemHandler((cva::ItemHandler *)memptr);
  cva::DictionaryHandler::~DictionaryHandler((cva::DictionaryHandler *)v10);
}

void sub_1C98E64D0(cva::DictionaryHandler *a1, _DWORD *a2, _DWORD *a3)
{
  _DWORD *v6;
  _DWORD *v7;
  void *memptr[2];
  void *v9;
  uint64_t v10;
  uint64_t v11;

  cva::DictionaryHandler::DictionaryHandler(a1);
  v10 = 16;
  memptr[0] = 0;
  malloc_type_posix_memalign(memptr, 0x20uLL, 0x40uLL, 0x49090899uLL);
  v6 = memptr[0];
  v9 = memptr[0];
  v11 = 0x300000003;
  *(_DWORD *)memptr[0] = *a2;
  v6[1] = a2[1];
  v6[2] = a2[2];
  v6[3] = a2[3];
  v6[4] = a2[4];
  v6[5] = a2[5];
  v6[6] = a2[6];
  v6[7] = a2[7];
  v6[8] = a2[8];
  cva::ItemHandler::createMatrix<float>();
  free(v9);
  cva::DictionaryHandler::setItem(a1, CFSTR("rotation"), (const cva::ItemHandler *)memptr);
  cva::ItemHandler::~ItemHandler((cva::ItemHandler *)memptr);
  v10 = 8;
  memptr[0] = 0;
  malloc_type_posix_memalign(memptr, 0x20uLL, 0x20uLL, 0x49090899uLL);
  v7 = memptr[0];
  v9 = memptr[0];
  LODWORD(v11) = 3;
  *(_DWORD *)memptr[0] = *a3;
  v7[1] = a3[1];
  v7[2] = a3[2];
  cva::ItemHandler::createVector<float>();
  free(v9);
  cva::DictionaryHandler::setItem(a1, CFSTR("translation"), (const cva::ItemHandler *)memptr);
  cva::ItemHandler::~ItemHandler((cva::ItemHandler *)memptr);
}

uint64_t sub_1C98E6630(cva::DictionaryHandler *a1, _DWORD *a2, _DWORD *a3, _DWORD *a4)
{
  std::__shared_weak_count *v8;
  cva::DictionaryHandler *v9;
  BOOL v10;
  uint64_t v11;
  _DWORD *v12;
  unint64_t *p_shared_owners;
  unint64_t v15;
  _BYTE v16[16];
  void *v17;
  std::__shared_weak_count *v18;
  int v19;
  int v20;

  if (!cva::DictionaryHandler::hasKey(a1, CFSTR("intrinsics"))
    || !cva::DictionaryHandler::hasKey(a1, CFSTR("extrinsics")))
  {
    return 0;
  }
  cva::DictionaryHandler::item(a1, CFSTR("extrinsics"));
  cva::ItemHandler::getDictionary((cva::ItemHandler *)v16);
  v9 = (cva::DictionaryHandler *)v17;
  v8 = v18;
  v17 = 0;
  v18 = 0;
  cva::ItemHandler::~ItemHandler((cva::ItemHandler *)v16);
  if (!v9 || !sub_1C98E67B4(v9, a3, a4))
  {
    v11 = 0;
    if (!v8)
      return v11;
    goto LABEL_19;
  }
  cva::DictionaryHandler::item(a1, CFSTR("intrinsics"));
  cva::ItemHandler::getMatrix<float>();
  v10 = v19 == 3 && v20 == 3;
  v11 = v10;
  v12 = v17;
  if (v10)
  {
    *a2 = *(_DWORD *)v17;
    a2[1] = v12[1];
    a2[2] = v12[2];
    a2[3] = v12[3];
    a2[4] = v12[4];
    a2[5] = v12[5];
    a2[6] = v12[6];
    a2[7] = v12[7];
    a2[8] = v12[8];
  }
  free(v12);
  cva::ItemHandler::~ItemHandler((cva::ItemHandler *)v16);
  if (v8)
  {
LABEL_19:
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  return v11;
}

uint64_t sub_1C98E67B4(cva::DictionaryHandler *a1, _DWORD *a2, _DWORD *a3)
{
  uint64_t result;
  _DWORD *v7;
  _DWORD *v8;
  _BYTE v9[16];
  _BYTE v10[16];
  void *v11;
  int v12;
  int v13;

  result = cva::DictionaryHandler::hasKey(a1, CFSTR("rotation"));
  if ((_DWORD)result)
  {
    result = cva::DictionaryHandler::hasKey(a1, CFSTR("translation"));
    if ((_DWORD)result)
    {
      cva::DictionaryHandler::item(a1, CFSTR("rotation"));
      cva::ItemHandler::getMatrix<float>();
      v7 = v11;
      if (v12 == 3 && v13 == 3)
      {
        *a2 = *(_DWORD *)v11;
        a2[1] = v7[1];
        a2[2] = v7[2];
        a2[3] = v7[3];
        a2[4] = v7[4];
        a2[5] = v7[5];
        a2[6] = v7[6];
        a2[7] = v7[7];
        a2[8] = v7[8];
        free(v7);
        cva::DictionaryHandler::item(a1, CFSTR("translation"));
        cva::ItemHandler::getVector<float>();
        v8 = v11;
        if (v12 == 3)
        {
          *a3 = *(_DWORD *)v11;
          a3[1] = v8[1];
          a3[2] = v8[2];
          free(v8);
          cva::ItemHandler::~ItemHandler((cva::ItemHandler *)v9);
          cva::ItemHandler::~ItemHandler((cva::ItemHandler *)v10);
          return 1;
        }
        free(v11);
        cva::ItemHandler::~ItemHandler((cva::ItemHandler *)v9);
      }
      else
      {
        free(v11);
      }
      cva::ItemHandler::~ItemHandler((cva::ItemHandler *)v10);
      return 0;
    }
  }
  return result;
}

void sub_1C98E6918(uint64_t a1, uint64_t a2, uint64_t a3)
{
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void **v9;
  unint64_t v10;
  void *v11;
  size_t v12;
  size_t v13;
  uint64_t v14;
  float *v15;
  float v16;
  float *v17;
  unint64_t v18;
  unint64_t v19;
  float32x4_t *v20;
  uint64_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float *v24;
  float v25;
  unint64_t v26;
  void **v27;
  size_t v28;
  int v29;
  uint64_t v30;
  void **v31;
  unint64_t v32;
  void *v33;
  void *v34;
  size_t v36;
  void *v37;
  size_t v38;
  size_t v39;
  void **v40;
  unint64_t v41;
  void *v42;
  size_t v43;
  size_t v44;
  size_t v45;
  void **v46;
  unint64_t v47;
  void *v48;
  size_t v49;
  size_t v50;
  __int128 *v51;
  __int128 *v52;
  __int128 v53;
  __int128 v54;
  uint64_t *v55;
  unint64_t *v56;
  unint64_t v57;
  __n128 v58;
  unint64_t v59;
  __int128 v60;
  __int128 v61;
  uint64_t v62;
  unint64_t v63;
  char *v64;
  char *v65;
  size_t v66;
  size_t v67;
  char *v68;
  unint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  __int128 v75;
  unint64_t v76;
  char *v77;
  uint64_t v78;
  _OWORD *v79;
  __int128 *v80;
  uint64_t v81;
  __int128 v82;
  size_t v83;
  size_t v84;
  char *v85;
  unint64_t v86;
  char *v87;
  uint64_t v88;
  _OWORD *v89;
  __int128 *v90;
  uint64_t v91;
  __int128 v92;
  int v93;
  unint64_t v94;
  char *v95;
  char *v96;
  uint64_t v97;
  _OWORD *v98;
  __int128 *v99;
  uint64_t v100;
  __int128 v101;
  int v102;
  int v103;
  void *v104;
  int v105;
  uint64_t v106;
  uint64_t v107;
  int v108;
  _BYTE *v109;
  int *v110;
  void **v111;
  _OWORD *v112;
  unint64_t v113;
  size_t v114;
  size_t v115;
  char *v116;
  unint64_t v117;
  char *v118;
  int v119;
  int v120;
  uint64_t v121;
  int *v122;
  unint64_t v123;
  _DWORD *v124;
  unint64_t v125;
  uint64_t v126;
  __int128 *v127;
  _OWORD *v128;
  uint64_t v129;
  __int128 v130;
  size_t v131;
  char *v132;
  int *v133;
  unint64_t v134;
  char *v135;
  unint64_t v136;
  uint64_t v137;
  __int128 *v138;
  _OWORD *v139;
  uint64_t v140;
  __int128 v141;
  unint64_t v142;
  char *v143;
  int v144;
  uint64_t v145;
  unint64_t v146;
  uint64_t v147;
  uint64_t v148;
  char *v149;
  __int128 v150;
  int v151;
  int v152;
  void *v153;
  unint64_t v154;
  uint64_t v155;
  __int128 *v156;
  _OWORD *v157;
  uint64_t v158;
  __int128 v159;
  int v160;
  uint64_t v161;
  uint64_t v162;
  unint64_t *v163;
  unint64_t v164;
  unint64_t *v165;
  unint64_t v166;
  size_t v167;
  uint64_t v168;
  std::__shared_weak_count *v169;
  uint64_t v170[2];
  _DWORD v171[2];
  void *v172;
  int v173;
  int v174;
  void *v175;
  size_t v176;
  int v177;
  void *memptr;
  _DWORD *v179;
  uint64_t v180;
  int v181;
  uint64_t v182;

  v182 = *MEMORY[0x1E0C80C00];
  v6 = *(_QWORD *)(a3 + 64);
  v5 = *(std::__shared_weak_count **)(a3 + 72);
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  if (!a2)
  {
    v14 = *(unsigned int *)(v6 + 152);
    if (!(_DWORD)v14)
    {
LABEL_20:
      if (*(_BYTE *)(v6 + 520))
        goto LABEL_195;
LABEL_21:
      if ((_DWORD)v14)
        bzero(*(void **)(v6 + 136), 4 * v14);
      v26 = *(unsigned int *)(*(_QWORD *)(a1 + 24) + 92);
      v27 = (void **)(v6 + 160);
      if ((_DWORD)v26 != *(_DWORD *)(v6 + 176))
      {
        *(_DWORD *)(v6 + 176) = v26;
        if ((_DWORD)v26)
        {
          if (*(_QWORD *)(v6 + 168) < v26)
          {
            free(*(void **)(v6 + 160));
            v28 = (4 * v26 + 31) & 0x7FFFFFFE0;
            *(_QWORD *)(v6 + 160) = 0;
            *(_QWORD *)(v6 + 168) = v28 >> 2;
            memptr = 0;
            malloc_type_posix_memalign(&memptr, 0x20uLL, v28, 0x49090899uLL);
            *(_QWORD *)(v6 + 160) = memptr;
          }
        }
        else
        {
          free(*v27);
          *v27 = 0;
          *(_QWORD *)(v6 + 168) = 0;
        }
        v26 = *(unsigned int *)(v6 + 176);
      }
      if ((_DWORD)v26)
        bzero(*v27, 4 * v26);
      v62 = *(_QWORD *)(a1 + 24);
      v63 = *(unsigned int *)(v62 + 40);
      v64 = *(char **)(v62 + 24);
      v65 = *(char **)(v6 + 320);
      if ((_DWORD)v63 == *(_DWORD *)(v6 + 336))
      {
LABEL_91:
        if (v64 != v65)
        {
          if (!(_DWORD)v63)
            goto LABEL_125;
          v76 = (v63 - 1) & 0x3FFFFFFFFFFFFFFFLL;
          if (v76 < 7)
          {
            v77 = v65;
          }
          else
          {
            v77 = v65;
            if ((unint64_t)(v65 - v64) >= 0x20)
            {
              v78 = (v76 + 1) & 0x7FFFFFFFFFFFFFF8;
              v79 = v65 + 16;
              v80 = (__int128 *)(v64 + 16);
              v81 = v78;
              do
              {
                v82 = *v80;
                *(v79 - 1) = *(v80 - 1);
                *v79 = v82;
                v79 += 2;
                v80 += 2;
                v81 -= 8;
              }
              while (v81);
              if (v76 + 1 == v78)
              {
LABEL_125:
                v106 = *(_QWORD *)(a1 + 24);
                v107 = *(unsigned int *)(v106 + 40);
                v108 = *(_DWORD *)(v106 + 44) - 1;
                v109 = *(_BYTE **)(v106 + 24);
                v110 = (int *)&v109[4 * v107];
                v111 = (void **)(v6 + 344);
                if (__PAIR64__(v108, v107) == *(_QWORD *)(v6 + 360))
                {
                  v112 = *v111;
                  goto LABEL_136;
                }
                v112 = *v111;
                v113 = (v108 * v107);
                if (v109 != *v111)
                {
                  *(_DWORD *)(v6 + 360) = v107;
                  *(_DWORD *)(v6 + 364) = v108;
                  if ((_DWORD)v113)
                  {
                    if (*(_QWORD *)(v6 + 352) < v113)
                    {
                      free(v112);
                      v114 = (4 * v113 + 31) & 0x7FFFFFFE0;
                      *(_QWORD *)(v6 + 344) = 0;
                      *(_QWORD *)(v6 + 352) = v114 >> 2;
                      memptr = 0;
                      malloc_type_posix_memalign(&memptr, 0x20uLL, v114, 0x49090899uLL);
                      v112 = memptr;
                      *(_QWORD *)(v6 + 344) = memptr;
                    }
                  }
                  else
                  {
                    free(v112);
                    v112 = 0;
                    *v111 = 0;
                    *(_QWORD *)(v6 + 352) = 0;
                  }
LABEL_136:
                  v119 = *(_DWORD *)(v6 + 360);
                  v120 = *(_DWORD *)(v6 + 364);
                  v121 = (v120 * v119);
                  if (v109 != (_BYTE *)v112)
                  {
                    if ((_DWORD)v121)
                    {
                      if (v108 * (_DWORD)v107)
                        v122 = (int *)&v109[4 * v107];
                      else
                        v122 = 0;
                      v123 = (v121 - 1) & 0x3FFFFFFFFFFFFFFFLL;
                      if (v123 < 7)
                      {
                        v124 = v112;
                      }
                      else
                      {
                        v124 = v112;
                        if ((unint64_t)((char *)v112 - (char *)v122) >= 0x20)
                        {
                          v125 = v123 + 1;
                          v126 = 4 * (v125 & 0x7FFFFFFFFFFFFFF8);
                          v124 = (_DWORD *)((char *)v112 + v126);
                          v127 = (__int128 *)(v122 + 4);
                          v128 = v112 + 1;
                          v129 = v125 & 0x7FFFFFFFFFFFFFF8;
                          do
                          {
                            v130 = *v127;
                            *(v128 - 1) = *(v127 - 1);
                            *v128 = v130;
                            v127 += 2;
                            v128 += 2;
                            v129 -= 8;
                          }
                          while (v129);
                          if (v125 == (v125 & 0x7FFFFFFFFFFFFFF8))
                            goto LABEL_182;
                          v122 = (int *)((char *)v122 + v126);
                        }
                      }
                      do
                      {
                        v144 = *v122++;
                        *v124++ = v144;
                      }
                      while (v124 != (_DWORD *)((char *)v112 + 4 * v121));
                    }
LABEL_182:
                    if (*(_BYTE *)(*(_QWORD *)(a1 + 24) + 240))
                    {
                      *(_OWORD *)(v6 + 264) = 0u;
                      *(_OWORD *)(v6 + 280) = 0u;
                      *(_OWORD *)(v6 + 296) = 0u;
                      *(_BYTE *)(v6 + 312) = 1;
                      v161 = *(_QWORD *)(a1 + 24);
                      v162 = *(unsigned int *)(v161 + 184);
                      if ((_DWORD)v162)
                        memmove((void *)(v6 + 264), *(const void **)(v161 + 168), 4 * v162);
                    }
                    v170[0] = v6;
                    v170[1] = (uint64_t)v5;
                    if (!v5)
                    {
                      v55 = v170;
                      goto LABEL_193;
                    }
                    v163 = (unint64_t *)&v5->__shared_owners_;
                    do
                      v164 = __ldxr(v163);
                    while (__stxr(v164 + 1, v163));
                    v58.n128_f32[0] = sub_1C98E77F4(a1, v170);
                    do
                      v59 = __ldaxr(v163);
                    while (__stlxr(v59 - 1, v163));
LABEL_190:
                    if (!v59)
                    {
                      ((void (*)(std::__shared_weak_count *, __n128))v5->__on_zero_shared)(v5, v58);
                      std::__shared_weak_count::__release_weak(v5);
                    }
                    goto LABEL_194;
                  }
                  v131 = (4 * v121 + 31) & 0x7FFFFFFE0;
                  v167 = v131 >> 2;
                  memptr = 0;
                  malloc_type_posix_memalign(&memptr, 0x20uLL, v131, 0x49090899uLL);
                  v132 = (char *)memptr;
                  if (!(_DWORD)v121)
                    goto LABEL_172;
                  if (v108 * (_DWORD)v107)
                    v133 = (int *)&v109[4 * v107];
                  else
                    v133 = 0;
                  v134 = (v121 - 1) & 0x3FFFFFFFFFFFFFFFLL;
                  if (v134 < 7)
                  {
                    v135 = (char *)memptr;
                  }
                  else
                  {
                    v135 = (char *)memptr;
                    if ((unint64_t)((_BYTE *)memptr - (_BYTE *)v133) >= 0x20)
                    {
                      v136 = v134 + 1;
                      v137 = 4 * (v136 & 0x7FFFFFFFFFFFFFF8);
                      v135 = (char *)memptr + v137;
                      v138 = (__int128 *)(v133 + 4);
                      v139 = (char *)memptr + 16;
                      v140 = v136 & 0x7FFFFFFFFFFFFFF8;
                      do
                      {
                        v141 = *v138;
                        *(v139 - 1) = *(v138 - 1);
                        *v139 = v141;
                        v138 += 2;
                        v139 += 2;
                        v140 -= 8;
                      }
                      while (v140);
                      if (v136 == (v136 & 0x7FFFFFFFFFFFFFF8))
                        goto LABEL_172;
                      v133 = (int *)((char *)v133 + v137);
                    }
                  }
                  do
                  {
                    v152 = *v133++;
                    *(_DWORD *)v135 = v152;
                    v135 += 4;
                  }
                  while (v135 != &v132[4 * v121]);
LABEL_172:
                  v153 = *(void **)(v6 + 344);
                  *(_QWORD *)(v6 + 344) = v132;
                  *(_QWORD *)(v6 + 352) = v167;
                  *(_DWORD *)(v6 + 360) = v119;
                  *(_DWORD *)(v6 + 364) = v120;
LABEL_181:
                  free(v153);
                  goto LABEL_182;
                }
                v115 = (4 * (v108 * v107) + 31) & 0x7FFFFFFE0;
                memptr = 0;
                malloc_type_posix_memalign(&memptr, 0x20uLL, v115, 0x49090899uLL);
                v116 = (char *)memptr;
                if (v109 != memptr)
                {
                  if ((_DWORD)v113)
                  {
                    v117 = (v113 - 1) & 0x3FFFFFFFFFFFFFFFLL;
                    if (v117 >= 7)
                    {
                      v118 = (char *)memptr;
                      if ((unint64_t)((_BYTE *)memptr - &v109[4 * v107]) >= 0x20)
                      {
                        v145 = 0;
                        v146 = v117 + 1;
                        v147 = 4 * (v146 & 0x7FFFFFFFFFFFFFF8);
                        v118 = (char *)memptr + v147;
                        v148 = v146 & 0x7FFFFFFFFFFFFFF8;
                        do
                        {
                          v149 = &v116[v145 * 4];
                          v150 = *(_OWORD *)&v110[v145 + 4];
                          *(_OWORD *)v149 = *(_OWORD *)&v110[v145];
                          *((_OWORD *)v149 + 1) = v150;
                          v145 += 8;
                          v148 -= 8;
                        }
                        while (v148);
                        if (v146 == (v146 & 0x7FFFFFFFFFFFFFF8))
                          goto LABEL_180;
                        v110 = (int *)((char *)v110 + v147);
                      }
                    }
                    else
                    {
                      v118 = (char *)memptr;
                    }
                    do
                    {
                      v151 = *v110++;
                      *(_DWORD *)v118 = v151;
                      v118 += 4;
                    }
                    while (v118 != &v116[4 * v113]);
                  }
LABEL_180:
                  v153 = *(void **)(v6 + 344);
                  *(_QWORD *)(v6 + 344) = v116;
                  *(_QWORD *)(v6 + 352) = v115 >> 2;
                  *(_DWORD *)(v6 + 360) = v107;
                  *(_DWORD *)(v6 + 364) = v108;
                  goto LABEL_181;
                }
                memptr = 0;
                malloc_type_posix_memalign(&memptr, 0x20uLL, v115, 0x49090899uLL);
                v116 = (char *)memptr;
                if ((_DWORD)v113)
                {
                  v142 = (v113 - 1) & 0x3FFFFFFFFFFFFFFFLL;
                  if (v142 >= 7)
                  {
                    v143 = (char *)memptr;
                    if ((unint64_t)((_BYTE *)memptr - v109 - 4 * v107) >= 0x20)
                    {
                      v154 = v142 + 1;
                      v155 = 4 * (v154 & 0x7FFFFFFFFFFFFFF8);
                      v143 = (char *)memptr + v155;
                      v156 = (__int128 *)&v109[4 * v107 + 16];
                      v157 = (char *)memptr + 16;
                      v158 = v154 & 0x7FFFFFFFFFFFFFF8;
                      do
                      {
                        v159 = *v156;
                        *(v157 - 1) = *(v156 - 1);
                        *v157 = v159;
                        v156 += 2;
                        v157 += 2;
                        v158 -= 8;
                      }
                      while (v158);
                      if (v154 == (v154 & 0x7FFFFFFFFFFFFFF8))
                        goto LABEL_179;
                      v110 = (int *)((char *)v110 + v155);
                    }
                  }
                  else
                  {
                    v143 = (char *)memptr;
                  }
                  do
                  {
                    v160 = *v110++;
                    *(_DWORD *)v143 = v160;
                    v143 += 4;
                  }
                  while (v143 != &v116[4 * v113]);
                }
LABEL_179:
                free(v109);
                goto LABEL_180;
              }
              v77 = &v65[4 * v78];
              v64 += 4 * v78;
            }
          }
          do
          {
            v93 = *(_DWORD *)v64;
            v64 += 4;
            *(_DWORD *)v77 = v93;
            v77 += 4;
          }
          while (v77 != &v65[4 * v63]);
          goto LABEL_125;
        }
        v83 = (4 * v63 + 31) & 0x7FFFFFFE0;
        v84 = v83 >> 2;
        memptr = 0;
        malloc_type_posix_memalign(&memptr, 0x20uLL, v83, 0x49090899uLL);
        v85 = (char *)memptr;
        if (!(_DWORD)v63)
          goto LABEL_120;
        v86 = (v63 - 1) & 0x3FFFFFFFFFFFFFFFLL;
        if (v86 < 7)
        {
          v87 = (char *)memptr;
        }
        else
        {
          v87 = (char *)memptr;
          if ((unint64_t)((_BYTE *)memptr - v64) >= 0x20)
          {
            v88 = (v86 + 1) & 0x7FFFFFFFFFFFFFF8;
            v89 = (char *)memptr + 16;
            v90 = (__int128 *)(v64 + 16);
            v91 = v88;
            do
            {
              v92 = *v90;
              *(v89 - 1) = *(v90 - 1);
              *v89 = v92;
              v89 += 2;
              v90 += 2;
              v91 -= 8;
            }
            while (v91);
            if (v86 + 1 == v88)
              goto LABEL_120;
            v87 = &v85[4 * v88];
            v64 += 4 * v88;
          }
        }
        do
        {
          v103 = *(_DWORD *)v64;
          v64 += 4;
          *(_DWORD *)v87 = v103;
          v87 += 4;
        }
        while (v87 != &v85[4 * v63]);
LABEL_120:
        v104 = *(void **)(v6 + 320);
        *(_QWORD *)(v6 + 320) = v85;
        *(_QWORD *)(v6 + 328) = v84;
LABEL_124:
        *(_DWORD *)(v6 + 336) = v63;
        free(v104);
        goto LABEL_125;
      }
      if (v64 != v65)
      {
        *(_DWORD *)(v6 + 336) = v63;
        if ((_DWORD)v63)
        {
          if (*(_QWORD *)(v6 + 328) < v63)
          {
            free(v65);
            v66 = (4 * v63 + 31) & 0x7FFFFFFE0;
            *(_QWORD *)(v6 + 320) = 0;
            *(_QWORD *)(v6 + 328) = v66 >> 2;
            memptr = 0;
            malloc_type_posix_memalign(&memptr, 0x20uLL, v66, 0x49090899uLL);
            v65 = (char *)memptr;
            *(_QWORD *)(v6 + 320) = memptr;
          }
        }
        else
        {
          free(v65);
          v65 = 0;
          *(_QWORD *)(v6 + 320) = 0;
          *(_QWORD *)(v6 + 328) = 0;
        }
        LODWORD(v63) = *(_DWORD *)(v6 + 336);
        goto LABEL_91;
      }
      v67 = (4 * v63 + 31) & 0x7FFFFFFE0;
      memptr = 0;
      malloc_type_posix_memalign(&memptr, 0x20uLL, v67, 0x49090899uLL);
      v68 = (char *)memptr;
      if (v64 != memptr)
      {
        if ((_DWORD)v63)
        {
          v69 = (v63 - 1) & 0x3FFFFFFFFFFFFFFFLL;
          if (v69 < 7)
          {
            v70 = (char *)memptr;
          }
          else
          {
            v70 = (char *)memptr;
            if ((unint64_t)((_BYTE *)memptr - v64) >= 0x20)
            {
              v71 = 0;
              v72 = (v69 + 1) & 0x7FFFFFFFFFFFFFF8;
              v73 = v72;
              do
              {
                v74 = &v68[v71];
                v75 = *(_OWORD *)&v64[v71 + 16];
                *(_OWORD *)v74 = *(_OWORD *)&v64[v71];
                *((_OWORD *)v74 + 1) = v75;
                v71 += 32;
                v73 -= 8;
              }
              while (v73);
              if (v69 + 1 == v72)
                goto LABEL_123;
              v70 = &v68[4 * v72];
              v64 += 4 * v72;
            }
          }
          do
          {
            v105 = *(_DWORD *)v64;
            v64 += 4;
            *(_DWORD *)v70 = v105;
            v70 += 4;
          }
          while (v70 != &v68[4 * v63]);
        }
LABEL_123:
        v104 = *(void **)(v6 + 320);
        *(_QWORD *)(v6 + 320) = v68;
        *(_QWORD *)(v6 + 328) = v67 >> 2;
        goto LABEL_124;
      }
      memptr = 0;
      malloc_type_posix_memalign(&memptr, 0x20uLL, v67, 0x49090899uLL);
      v68 = (char *)memptr;
      if ((_DWORD)v63)
      {
        v94 = (v63 - 1) & 0x3FFFFFFFFFFFFFFFLL;
        v95 = v64;
        v96 = (char *)memptr;
        if (v94 >= 7)
        {
          v95 = v64;
          v96 = (char *)memptr;
          if ((unint64_t)((_BYTE *)memptr - v64) >= 0x20)
          {
            v97 = (v94 + 1) & 0x7FFFFFFFFFFFFFF8;
            v95 = &v64[4 * v97];
            v98 = (char *)memptr + 16;
            v99 = (__int128 *)(v64 + 16);
            v100 = v97;
            do
            {
              v101 = *v99;
              *(v98 - 1) = *(v99 - 1);
              *v98 = v101;
              v98 += 2;
              v99 += 2;
              v100 -= 8;
            }
            while (v100);
            if (v94 + 1 == v97)
              goto LABEL_117;
            v96 = &v68[4 * v97];
          }
        }
        do
        {
          v102 = *(_DWORD *)v95;
          v95 += 4;
          *(_DWORD *)v96 = v102;
          v96 += 4;
        }
        while (v96 != &v68[4 * v63]);
      }
LABEL_117:
      free(v64);
      goto LABEL_123;
    }
    v15 = *(float **)(v6 + 136);
    v16 = *v15 * *v15;
    if ((_DWORD)v14 != 1)
    {
      v17 = v15 + 1;
      v18 = (v14 + 0x3FFFFFFFFFFFFFFELL) & 0x3FFFFFFFFFFFFFFFLL;
      if (v18 < 7)
        goto LABEL_17;
      v19 = v18 + 1;
      v20 = (float32x4_t *)(v15 + 5);
      v21 = v19 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v22 = vmulq_f32(v20[-1], v20[-1]);
        v23 = vmulq_f32(*v20, *v20);
        v16 = (float)((float)((float)((float)((float)((float)((float)(v16 + v22.f32[0]) + v22.f32[1]) + v22.f32[2])
                                            + v22.f32[3])
                                    + v23.f32[0])
                            + v23.f32[1])
                    + v23.f32[2])
            + v23.f32[3];
        v20 += 2;
        v21 -= 8;
      }
      while (v21);
      if (v19 != (v19 & 0x7FFFFFFFFFFFFFF8))
      {
        v17 += v19 & 0x7FFFFFFFFFFFFFF8;
LABEL_17:
        v24 = &v15[v14];
        do
        {
          v25 = *v17++;
          v16 = v16 + (float)(v25 * v25);
        }
        while (v17 != v24);
      }
    }
    if (v16 > 0.0)
      goto LABEL_21;
    goto LABEL_20;
  }
  v9 = (void **)(v6 + 136);
  if (v6 + 136 == a2 + 16)
  {
    v29 = *(_DWORD *)(v6 + 152);
  }
  else
  {
    v10 = *(unsigned int *)(a2 + 32);
    if ((_DWORD)v10)
    {
      v11 = *(void **)(v6 + 136);
      v12 = 4 * v10;
      if (*(_QWORD *)(v6 + 144) < v10)
      {
        free(v11);
        v13 = (v12 + 31) & 0x7FFFFFFE0;
        *(_QWORD *)(v6 + 136) = 0;
        *(_QWORD *)(v6 + 144) = v13 >> 2;
        memptr = 0;
        malloc_type_posix_memalign(&memptr, 0x20uLL, v13, 0x49090899uLL);
        v11 = memptr;
        *(_QWORD *)(v6 + 136) = memptr;
      }
      memcpy(v11, *(const void **)(a2 + 16), v12);
    }
    else
    {
      free(*v9);
      *v9 = 0;
      *(_QWORD *)(v6 + 144) = 0;
    }
    v29 = *(_DWORD *)(a2 + 32);
    *(_DWORD *)(v6 + 152) = v29;
  }
  v30 = *(_QWORD *)(a1 + 24);
  v31 = (void **)(v6 + 160);
  v32 = *(unsigned int *)(v30 + 88);
  v33 = *(void **)(v30 + 72);
  v171[0] = v32;
  v171[1] = v29;
  v172 = v33;
  v173 = v32;
  v174 = 0;
  if ((_DWORD)v32 == *(_DWORD *)(v6 + 176))
    goto LABEL_31;
  v34 = *v31;
  if (v33 != *v31 && *v9 != v34)
  {
    *(_DWORD *)(v6 + 176) = v32;
    if ((_DWORD)v32)
    {
      if (*(_QWORD *)(v6 + 168) < v32)
      {
        free(v34);
        v45 = (4 * v32 + 31) & 0x7FFFFFFE0;
        *(_QWORD *)(v6 + 160) = 0;
        *(_QWORD *)(v6 + 168) = v45 >> 2;
        memptr = 0;
        malloc_type_posix_memalign(&memptr, 0x20uLL, v45, 0x49090899uLL);
        *(_QWORD *)(v6 + 160) = memptr;
      }
    }
    else
    {
      free(v34);
      *v31 = 0;
      *(_QWORD *)(v6 + 168) = 0;
    }
LABEL_31:
    v179 = v171;
    v180 = v6 + 136;
    v181 = 1065353216;
    sub_1C98E9BA0(v6 + 160, (uint64_t)&memptr);
    goto LABEL_38;
  }
  v36 = (4 * v32 + 31) & 0x7FFFFFFE0;
  v176 = v36 >> 2;
  memptr = 0;
  malloc_type_posix_memalign(&memptr, 0x20uLL, v36, 0x49090899uLL);
  v175 = memptr;
  v177 = v171[0];
  v179 = v171;
  v180 = v6 + 136;
  v181 = 1065353216;
  sub_1C98E9BA0((uint64_t)&v175, (uint64_t)&memptr);
  v37 = *(void **)(v6 + 160);
  v38 = *(_QWORD *)(v6 + 168);
  v39 = v176;
  *(_QWORD *)(v6 + 160) = v175;
  *(_QWORD *)(v6 + 168) = v39;
  v175 = v37;
  v176 = v38;
  *(_DWORD *)(v6 + 176) = v177;
  free(v37);
LABEL_38:
  v40 = (void **)(v6 + 320);
  if (v6 + 320 != a2 + 40)
  {
    v41 = *(unsigned int *)(a2 + 56);
    if ((_DWORD)v41)
    {
      v42 = *(void **)(v6 + 320);
      v43 = 4 * v41;
      if (*(_QWORD *)(v6 + 328) < v41)
      {
        free(v42);
        v44 = (v43 + 31) & 0x7FFFFFFE0;
        *(_QWORD *)(v6 + 320) = 0;
        *(_QWORD *)(v6 + 328) = v44 >> 2;
        memptr = 0;
        malloc_type_posix_memalign(&memptr, 0x20uLL, v44, 0x49090899uLL);
        v42 = memptr;
        *(_QWORD *)(v6 + 320) = memptr;
      }
      memcpy(v42, *(const void **)(a2 + 40), v43);
    }
    else
    {
      free(*v40);
      *v40 = 0;
      *(_QWORD *)(v6 + 328) = 0;
    }
    *(_DWORD *)(v6 + 336) = *(_DWORD *)(a2 + 56);
  }
  v46 = (void **)(v6 + 344);
  if (v6 + 344 != a2 + 64)
  {
    v47 = (*(_DWORD *)(a2 + 84) * *(_DWORD *)(a2 + 80));
    if ((_DWORD)v47)
    {
      v48 = *(void **)(v6 + 344);
      if (*(_QWORD *)(v6 + 352) >= v47)
      {
        v49 = 4 * v47;
      }
      else
      {
        free(v48);
        v49 = 4 * v47;
        v50 = (4 * v47 + 31) & 0x7FFFFFFE0;
        *(_QWORD *)(v6 + 344) = 0;
        *(_QWORD *)(v6 + 352) = v50 >> 2;
        memptr = 0;
        malloc_type_posix_memalign(&memptr, 0x20uLL, v50, 0x49090899uLL);
        v48 = memptr;
        *(_QWORD *)(v6 + 344) = memptr;
      }
      memcpy(v48, *(const void **)(a2 + 64), v49);
    }
    else
    {
      free(*v46);
      *v46 = 0;
      *(_QWORD *)(v6 + 352) = 0;
    }
    *(_QWORD *)(v6 + 360) = *(_QWORD *)(a2 + 80);
  }
  v51 = (__int128 *)(a2 + 88);
  v52 = (__int128 *)(v6 + 264);
  if (*(unsigned __int8 *)(v6 + 312) != *(unsigned __int8 *)(a2 + 136))
  {
    if (!*(_BYTE *)(v6 + 312))
    {
      v60 = *v51;
      v61 = *(_OWORD *)(a2 + 120);
      *(_OWORD *)(v6 + 280) = *(_OWORD *)(a2 + 104);
      *(_OWORD *)(v6 + 296) = v61;
      *v52 = v60;
      *(_BYTE *)(v6 + 312) = 1;
      v168 = v6;
      v169 = v5;
      if (!v5)
        goto LABEL_60;
      goto LABEL_64;
    }
    *(_BYTE *)(v6 + 312) = 0;
LABEL_63:
    v168 = v6;
    v169 = v5;
    if (!v5)
      goto LABEL_60;
    goto LABEL_64;
  }
  if (v52 == v51 || !*(_BYTE *)(v6 + 312))
    goto LABEL_63;
  v53 = *v51;
  v54 = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(v6 + 280) = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(v6 + 296) = v54;
  *v52 = v53;
  v168 = v6;
  v169 = v5;
  if (v5)
  {
LABEL_64:
    v56 = (unint64_t *)&v5->__shared_owners_;
    do
      v57 = __ldxr(v56);
    while (__stxr(v57 + 1, v56));
    v58.n128_f32[0] = sub_1C98E77F4(a1, &v168);
    do
      v59 = __ldaxr(v56);
    while (__stlxr(v59 - 1, v56));
    goto LABEL_190;
  }
LABEL_60:
  v55 = &v168;
LABEL_193:
  sub_1C98E77F4(a1, v55);
LABEL_194:
  *(_BYTE *)(v6 + 520) = 1;
LABEL_195:
  if (v5)
  {
    v165 = (unint64_t *)&v5->__shared_owners_;
    do
      v166 = __ldaxr(v165);
    while (__stlxr(v166 - 1, v165));
    if (!v166)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
}

void sub_1C98E765C(uint64_t a1, unsigned int **a2, uint64_t a3)
{
  unsigned __int8 v5;
  float v6;
  float v7;
  float v8;
  uint64_t v9;
  uint64_t v10;
  void *v12;
  void *v13;
  uint64_t v14;
  uint64_t i;
  float v16;
  float v17;
  float v18;
  unint64_t size;

  v5 = atomic_load((unsigned __int8 *)&qword_1ED52ACD8);
  if ((v5 & 1) == 0 && __cxa_guard_acquire(&qword_1ED52ACD8))
  {
    sub_1C98CFF14();
    __cxa_guard_release(&qword_1ED52ACD8);
  }
  v6 = *(float *)(qword_1ED52ACB8 + 112);
  if (v6 <= 0.0)
    v7 = -3.0;
  else
    v7 = -v6;
  if (v6 <= 0.0)
    v8 = 3.0;
  else
    v8 = *(float *)(qword_1ED52ACB8 + 112);
  v9 = **a2;
  v10 = (*a2)[1];
  if (v9 > *(_DWORD *)(a3 + 8) || v10 > *(_DWORD *)(a3 + 12))
  {
    v12 = *(void **)(a3 + 24);
    if (v12)
    {
      free(v12);
      *(_QWORD *)(a3 + 24) = 0;
    }
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = v9 | (v10 << 32);
    *(_QWORD *)(a3 + 16) = ((unint64_t)((((_DWORD)v9 + 15) & 0xFFFFFFF0) >> 4) << 36) | 1;
    size = v10 * (unint64_t)(((_DWORD)v9 + 15) & 0xFFFFFFF0);
    if (size)
      v13 = malloc_type_malloc(size, 0xA153FF5uLL);
    else
      v13 = 0;
    *(_QWORD *)(a3 + 24) = v13;
  }
  else
  {
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = v9 | (v10 << 32);
  }
  v14 = (v10 * v9);
  if ((int)v14 >= 1)
  {
    for (i = 0; i != v14; ++i)
    {
      v16 = (float)(0.5 - (float)(v7 * (float)(255.0 / (float)(v8 - v7))))
          + (float)((float)(255.0 / (float)(v8 - v7)) * *(float *)(*((_QWORD *)*a2 + 1) + 4 * i));
      v17 = fminf(v16, 255.0);
      if (v16 >= 0.0)
        v18 = v17;
      else
        v18 = 0.0;
      *(_BYTE *)(*(_QWORD *)(a3 + 24) + i) = (int)v18;
    }
  }
}

void sub_1C98E77D4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1ED52ACD8);
  _Unwind_Resume(a1);
}

float sub_1C98E77F4(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unsigned int v8;
  unint64_t v9;
  unsigned int v10;
  uint64_t *v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  __n128 v25;
  unint64_t v26;
  _QWORD v28[2];
  _DWORD v29[2];
  uint64_t v30;
  int v31;
  int v32;

  v4 = *a2;
  v5 = (std::__shared_weak_count *)a2[1];
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    v8 = *(_DWORD *)(v4 + 364);
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
    v10 = *(_DWORD *)(v4 + 364);
  }
  else
  {
    v8 = *(_DWORD *)(v4 + 364);
    v10 = v8;
  }
  v11 = *(uint64_t **)(*(_QWORD *)(a1 + 8) + 112);
  v12 = *(_QWORD *)(v4 + 320);
  v29[0] = *(_DWORD *)(v4 + 360);
  v29[1] = v10;
  v30 = *(_QWORD *)(v4 + 344);
  v31 = v29[0];
  v32 = 0;
  sub_1C98E79DC(v11, v11 + 3, v12, (uint64_t)v29, v8, *(_QWORD *)(v4 + 424), *(_QWORD *)(v4 + 448), *(_DWORD *)(v4 + 464));
  if (v5)
  {
    v13 = (unint64_t *)&v5->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
    do
      v15 = __ldaxr(v13);
    while (__stlxr(v15 - 1, v13));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      v16 = *a2;
      v17 = (std::__shared_weak_count *)a2[1];
      if (v17)
        goto LABEL_16;
LABEL_23:
      sub_1C98E7B78(*(int **)(*(_QWORD *)(a1 + 8) + 16), *(_QWORD *)(*(_QWORD *)(a1 + 8) + 24), v16);
      goto LABEL_24;
    }
  }
  v16 = *a2;
  v17 = (std::__shared_weak_count *)a2[1];
  if (!v17)
    goto LABEL_23;
LABEL_16:
  v18 = (unint64_t *)&v17->__shared_owners_;
  do
    v19 = __ldxr(v18);
  while (__stxr(v19 + 1, v18));
  sub_1C98E7B78(*(int **)(*(_QWORD *)(a1 + 8) + 16), *(_QWORD *)(*(_QWORD *)(a1 + 8) + 24), v16);
  do
    v20 = __ldaxr(v18);
  while (__stlxr(v20 - 1, v18));
  if (!v20)
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
  }
LABEL_24:
  v21 = *a2;
  v22 = (std::__shared_weak_count *)a2[1];
  v28[0] = v21;
  v28[1] = v22;
  if (!v22)
    return sub_1C98E7CE0(a1, v28);
  v23 = (unint64_t *)&v22->__shared_owners_;
  do
    v24 = __ldxr(v23);
  while (__stxr(v24 + 1, v23));
  v25.n128_f32[0] = sub_1C98E7CE0(a1, v28);
  do
    v26 = __ldaxr(v23);
  while (__stlxr(v26 - 1, v23));
  if (!v26)
  {
    ((void (*)(std::__shared_weak_count *, __n128))v22->__on_zero_shared)(v22, v25);
    std::__shared_weak_count::__release_weak(v22);
  }
  return v25.n128_f32[0];
}

uint64_t *sub_1C98E79DC(uint64_t *result, uint64_t *a2, uint64_t a3, uint64_t a4, unsigned int a5, uint64_t a6, uint64_t a7, int a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  float32x2_t *v13;
  float v14;
  uint64_t v15;
  float32x2_t *v16;
  float v17;
  uint64_t v18;
  float32x2_t *v19;
  float v20;
  float32_t v21;
  float32x2_t *v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  float32x2_t *v34;
  float v35;
  uint64_t v36;
  float32x2_t *v37;
  float v38;
  uint64_t v39;
  float32x2_t *v40;
  float v41;
  float32_t v42;
  float32x2_t *v43;

  v8 = *((unsigned int *)result + 4);
  if ((_DWORD)v8)
  {
    v9 = 0;
    v10 = *a2;
    v11 = *result;
    do
    {
      v12 = 4 * v9;
      v13 = (float32x2_t *)(a3 + 4 * (3 * *(_DWORD *)(v11 + v12)));
      v14 = *(float *)(v10 + v12);
      v15 = 4 * (v9 + 1);
      v16 = (float32x2_t *)(a3 + 4 * (3 * *(_DWORD *)(v11 + v15)));
      v17 = *(float *)(v10 + v15);
      v18 = 4 * (v9 + 2);
      v19 = (float32x2_t *)(a3 + 4 * (3 * *(_DWORD *)(v11 + v18)));
      v20 = *(float *)(v10 + v18);
      v21 = (float)((float)(v13[1].f32[0] * v14) + (float)(v16[1].f32[0] * v17)) + (float)(v19[1].f32[0] * v20);
      v22 = (float32x2_t *)(a6 + v12);
      *v22 = vadd_f32(vadd_f32(vmul_n_f32(*v13, v14), vmul_n_f32(*v16, v17)), vmul_n_f32(*v19, v20));
      v22[1].f32[0] = v21;
      v9 += 3;
    }
    while (3 * v8 != v9);
  }
  if (a5 && (_DWORD)v8)
  {
    v23 = 0;
    v25 = *(_DWORD *)(a4 + 16);
    v24 = *(unsigned int *)(a4 + 20);
    v26 = *(_QWORD *)(a4 + 8) - 4 * v24;
    v27 = *a2;
    v28 = *result;
    v29 = a5;
    v30 = 3 * v8;
    do
    {
      v31 = 0;
      v32 = v26 + 4 * (v24 + v25 * v23);
      result = (uint64_t *)(a7 + 4 * (v23 * a8));
      do
      {
        v33 = 4 * v31;
        v34 = (float32x2_t *)(v32 + 4 * (3 * *(_DWORD *)(v28 + v33)));
        v35 = *(float *)(v27 + v33);
        v36 = 4 * (v31 + 1);
        v37 = (float32x2_t *)(v32 + 4 * (3 * *(_DWORD *)(v28 + v36)));
        v38 = *(float *)(v27 + v36);
        v39 = 4 * (v31 + 2);
        v40 = (float32x2_t *)(v32 + 4 * (3 * *(_DWORD *)(v28 + v39)));
        v41 = *(float *)(v27 + v39);
        v42 = (float)((float)(v34[1].f32[0] * v35) + (float)(v37[1].f32[0] * v38)) + (float)(v40[1].f32[0] * v41);
        v43 = (float32x2_t *)((char *)result + v33);
        *v43 = vadd_f32(vadd_f32(vmul_n_f32(*v34, v35), vmul_n_f32(*v37, v38)), vmul_n_f32(*v40, v41));
        v43[1].f32[0] = v42;
        v31 += 3;
      }
      while (v30 != v31);
      ++v23;
    }
    while (v23 != v29);
  }
  return result;
}

int *sub_1C98E7B78(int *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int *v10;
  int v11;
  _DWORD *v12;
  _DWORD *v13;
  uint64_t v14;
  int *v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t i;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int *v24;
  uint64_t v25;
  int v26;
  _DWORD *v27;
  _DWORD *v28;
  uint64_t v29;
  int *v30;
  uint64_t v31;
  int v32;
  int *v33;
  int v34;
  uint64_t v35;
  uint64_t v36;

  if ((int)((unint64_t)(a2 - (_QWORD)result) >> 2) >= 1)
  {
    v3 = *(_QWORD *)(a3 + 320);
    v4 = *(unsigned int *)(a3 + 364);
    v5 = *(_QWORD *)(a3 + 344);
    v6 = *(_DWORD *)(a3 + 360);
    v7 = *(_QWORD *)(a3 + 472);
    v8 = ((unint64_t)(a2 - (_QWORD)result) >> 2);
    if (v3 == v7)
    {
      v14 = 0;
      v15 = result;
      do
      {
        v16 = *v15++;
        v17 = v3 + 4 * (3 * v16);
        v18 = v3 + 4 * v14;
        v19 = *(_QWORD *)(v17 + 4);
        *(_DWORD *)v18 = *(_DWORD *)v17;
        *(_QWORD *)(v18 + 4) = v19;
        v14 += 3;
      }
      while (3 * v8 != v14);
    }
    else
    {
      v9 = 0;
      v10 = result;
      do
      {
        v11 = *v10++;
        v12 = (_DWORD *)(v3 + 4 * (3 * v11));
        v13 = (_DWORD *)(v7 + 4 * v9);
        *v13 = *v12;
        v13[1] = v12[1];
        v13[2] = v12[2];
        v9 += 3;
      }
      while (3 * v8 != v9);
    }
    if ((_DWORD)v4)
    {
      for (i = 0; i != v4; ++i)
      {
        v21 = v5 + 4 * (v6 * i);
        v22 = *(_QWORD *)(a3 + 496) + 4 * (*(_DWORD *)(a3 + 512) * i);
        if (v21 == v22)
        {
          v29 = 0;
          v30 = result;
          v31 = v8;
          do
          {
            v32 = *v30++;
            v33 = (int *)(v21 + 4 * (3 * v32));
            v34 = *v33;
            v35 = *(_QWORD *)(v33 + 1);
            v36 = v21 + 4 * v29;
            *(_DWORD *)v36 = v34;
            *(_QWORD *)(v36 + 4) = v35;
            v29 += 3;
            --v31;
          }
          while (v31);
        }
        else
        {
          v23 = 0;
          v24 = result;
          v25 = v8;
          do
          {
            v26 = *v24++;
            v27 = (_DWORD *)(v21 + 4 * (3 * v26));
            v28 = (_DWORD *)(v22 + 4 * v23);
            *v28 = *v27;
            v28[1] = v27[1];
            v28[2] = v27[2];
            v23 += 3;
            --v25;
          }
          while (v25);
        }
      }
    }
  }
  return result;
}

float sub_1C98E7CE0(uint64_t a1, _QWORD *a2)
{
  _QWORD *v3;
  std::__shared_weak_count *v4;
  unsigned int v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  float result;
  _QWORD v17[2];
  int v18;
  int v19;

  v3 = (_QWORD *)*a2;
  v4 = (std::__shared_weak_count *)a2[1];
  v5 = *(_DWORD *)(*a2 + 412);
  v6 = *a2;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    v6 = *a2;
  }
  v9 = *(uint64_t **)(*(_QWORD *)(a1 + 8) + 128);
  v10 = v3[40];
  v17[0] = v3[45];
  v17[1] = v3[43];
  v18 = v17[0];
  v19 = 0;
  sub_1C98E79DC(v9, v9 + 3, v10, (uint64_t)v17, v5, *(_QWORD *)(v6 + 368), *(_QWORD *)(v6 + 392), *(_DWORD *)(v6 + 408));
  if (v4)
  {
    v11 = (unint64_t *)&v4->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  v13 = *a2;
  v14 = *(_QWORD *)(*a2 + 392);
  *(float *)(v13 + 416) = *(float *)(v14 + 4) - *(float *)(v14 + 16);
  v15 = v14 + 4 * *(unsigned int *)(v13 + 408);
  result = *(float *)(v15 + 28) - *(float *)(v15 + 40);
  *(float *)(v13 + 420) = result;
  return result;
}

float sub_1C98E7DCC(unsigned int a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v5;
  unsigned __int8 v6;
  float v7;
  unsigned __int8 v8;
  uint64_t v9;
  uint64_t v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float result;

  v5 = *a3;
  v6 = atomic_load((unsigned __int8 *)&qword_1ED52ACD8);
  if ((v6 & 1) == 0 && __cxa_guard_acquire(&qword_1ED52ACD8))
  {
    sub_1C98CFF14();
    __cxa_guard_release(&qword_1ED52ACD8);
  }
  v7 = *(float *)(qword_1ED52ACB8 + 196);
  v8 = atomic_load((unsigned __int8 *)&qword_1ED52ACD8);
  if ((v8 & 1) == 0 && __cxa_guard_acquire(&qword_1ED52ACD8))
  {
    sub_1C98CFF14();
    __cxa_guard_release(&qword_1ED52ACD8);
  }
  v9 = 4 * a2;
  v10 = 4 * a1;
  v11 = *(float *)(qword_1ED52ACB8 + 200);
  v12 = *(float *)(v5 + v9);
  v13 = *(float *)(v5 + v10);
  v14 = hypotf(v12 - v13, 0.0);
  v15 = expf(v7 * (float)(1.0 - v11));
  v16 = expf(-(float)(v11 * v7));
  v17 = expf(v7 * (float)(v14 - v11));
  v18 = (float)-(float)((float)(v15 + 1.0) * (float)(v16 - v17)) / (float)((float)(v15 - v16) * (float)(v17 + 1.0));
  v19 = (float)(v12 + v13) * 0.5;
  *(float *)(v5 + v10) = (float)(v13 * v18) + (float)((float)(1.0 - v18) * v19);
  result = (float)(*(float *)(v5 + v9) * v18) + (float)((float)(1.0 - v18) * v19);
  *(float *)(v5 + v9) = result;
  return result;
}

void sub_1C98E7F2C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1ED52ACD8);
  _Unwind_Resume(a1);
}

float sub_1C98E7F48(float *a1, float *a2, float *a3, float *a4, float *a5)
{
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float result;

  v10 = *a2 - a1[63];
  v11 = a2[1] - a1[64];
  v12 = a2[2] - a1[65];
  v13 = 1.0 / sqrtf((float)((float)(v10 * v10) + (float)(v11 * v11)) + (float)(v12 * v12));
  v14 = v11 * v13;
  v15 = atan2f(v10 * v13, v12 * v13);
  v16 = asinf(v14);
  v17 = fminf(v16 * -1.637, 1.0);
  if ((float)(v16 * -1.637) >= 0.0)
    v18 = v17;
  else
    v18 = 0.0;
  a3[4] = v18;
  v19 = v16 * 2.2918;
  v20 = fminf(v19, 1.0);
  if (v19 >= 0.0)
    v21 = v20;
  else
    v21 = 0.0;
  a3[12] = v21;
  v22 = fminf(v15 * -1.637, 1.0);
  if ((float)(v15 * -1.637) >= 0.0)
    v23 = v22;
  else
    v23 = 0.0;
  a3[6] = v23;
  v24 = fminf(v15 * 1.637, 1.0);
  if ((float)(v15 * 1.637) >= 0.0)
    v25 = v24;
  else
    v25 = 0.0;
  a3[10] = v25;
  v26 = *a2 - a1[60];
  v27 = a2[1] - a1[61];
  v28 = a2[2] - a1[62];
  v29 = 1.0 / sqrtf((float)((float)(v26 * v26) + (float)(v27 * v27)) + (float)(v28 * v28));
  v30 = v27 * v29;
  v31 = atan2f(v26 * v29, v28 * v29);
  v32 = asinf(v30);
  v33 = fminf(v32 * -1.637, 1.0);
  if ((float)(v32 * -1.637) >= 0.0)
    v34 = v33;
  else
    v34 = 0.0;
  a3[5] = v34;
  v35 = v32 * 2.2918;
  v36 = fminf(v35, 1.0);
  if (v35 >= 0.0)
    v37 = v36;
  else
    v37 = 0.0;
  a3[13] = v37;
  v38 = fminf(v31 * 1.637, 1.0);
  if ((float)(v31 * 1.637) >= 0.0)
    v39 = v38;
  else
    v39 = 0.0;
  a3[7] = v39;
  v40 = fminf(v31 * -1.637, 1.0);
  if ((float)(v31 * -1.637) >= 0.0)
    v41 = v40;
  else
    v41 = 0.0;
  a3[11] = v41;
  v42 = *a2 - a1[63];
  v43 = a2[1] - a1[64];
  v44 = a2[2] - a1[65];
  v45 = 1.0 / sqrtf((float)((float)(v42 * v42) + (float)(v43 * v43)) + (float)(v44 * v44));
  v46 = v43 * v45;
  *a4 = atan2f(v42 * v45, v44 * v45);
  a4[1] = -asinf(v46);
  v47 = *a2 - a1[60];
  v48 = a2[1] - a1[61];
  v49 = a2[2] - a1[62];
  v50 = 1.0 / sqrtf((float)((float)(v47 * v47) + (float)(v48 * v48)) + (float)(v49 * v49));
  v51 = v48 * v50;
  *a5 = atan2f(v47 * v50, v49 * v50);
  result = -asinf(v51);
  a5[1] = result;
  return result;
}

void sub_1C98E81D0(unsigned int *a1, uint64_t a2)
{
  unsigned int *v4;
  uint64_t v5;
  uint64_t v6;
  size_t v7;
  uint64_t v8;
  void *v9;
  float32x4_t *v10;
  unint64_t v11;
  float *v12;
  float *v13;
  uint64_t v14;
  float32x4_t *v15;
  float32x4_t *v16;
  uint64_t v17;
  float32x4_t v18;
  float *v19;
  float v20;
  void *v21[2];
  int v22;
  void *memptr;

  v4 = *(unsigned int **)(a2 + 8);
  v5 = *((_QWORD *)a1 + 1) - 4 * a1[5];
  if (*((_QWORD *)v4 + 1) - 4 * v4[5] == v5
    || (v6 = *(_QWORD *)(a2 + 16), *(_QWORD *)(v6 + 8) - 4 * *(unsigned int *)(v6 + 20) == v5))
  {
    v7 = (4 * *v4 + 31) & 0x7FFFFFFE0;
    v21[1] = (void *)(v7 >> 2);
    memptr = 0;
    malloc_type_posix_memalign(&memptr, 0x20uLL, v7, 0x49090899uLL);
    v21[0] = memptr;
    v22 = **(_DWORD **)(a2 + 8);
    sub_1C98E8388((uint64_t)v21, a2);
    v8 = *a1;
    v9 = v21[0];
    if ((_DWORD)v8)
    {
      v10 = (float32x4_t *)*((_QWORD *)a1 + 1);
      v11 = (v8 - 1) & 0x3FFFFFFFFFFFFFFFLL;
      if (v11 >= 0xB)
      {
        if (v10 >= (float32x4_t *)((char *)v21[0] + 4 * v8)
          || (v12 = (float *)v21[0], v13 = (float *)*((_QWORD *)a1 + 1), v21[0] >= &v10->f32[v8]))
        {
          v14 = (v11 + 1) & 0x7FFFFFFFFFFFFFF8;
          v12 = (float *)((char *)v21[0] + 4 * v14);
          v15 = v10 + 1;
          v16 = (float32x4_t *)((char *)v21[0] + 16);
          v17 = v14;
          do
          {
            v18 = vaddq_f32(*v16, *v15);
            v15[-1] = vaddq_f32(v16[-1], v15[-1]);
            *v15 = v18;
            v15 += 2;
            v16 += 2;
            v17 -= 8;
          }
          while (v17);
          if (v11 + 1 == v14)
            goto LABEL_17;
          v13 = &v10->f32[v14];
        }
      }
      else
      {
        v12 = (float *)v21[0];
        v13 = (float *)*((_QWORD *)a1 + 1);
      }
      v19 = &v10->f32[v8];
      do
      {
        v20 = *v12++;
        *v13 = v20 + *v13;
        ++v13;
      }
      while (v13 != v19);
    }
LABEL_17:
    free(v9);
    return;
  }
  if (v4[1] * *v4)
  {
    if (*(_DWORD *)v6)
      cva::VecLib<float>::gemm();
  }
}

void sub_1C98E8388(uint64_t a1, uint64_t a2)
{
  unsigned int *v4;
  void *v5;
  uint64_t v6;
  size_t v7;
  void *v8;
  size_t v9;
  uint64_t v10;
  void *v11;
  size_t v12;
  int v13;
  void *memptr;

  v4 = *(unsigned int **)(a2 + 8);
  v5 = *(void **)a1;
  if ((void *)(*((_QWORD *)v4 + 1) - 4 * v4[5]) == v5
    || (v6 = *(_QWORD *)(a2 + 16), (void *)(*(_QWORD *)(v6 + 8) - 4 * *(unsigned int *)(v6 + 20)) == v5))
  {
    v7 = (4 * *v4 + 31) & 0x7FFFFFFE0;
    v12 = v7 >> 2;
    memptr = 0;
    malloc_type_posix_memalign(&memptr, 0x20uLL, v7, 0x49090899uLL);
    v11 = memptr;
    v13 = **(_DWORD **)(a2 + 8);
    sub_1C98E8388(&v11, a2);
    v8 = *(void **)a1;
    v9 = v12;
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v9;
    *(_DWORD *)(a1 + 16) = v13;
    free(v8);
  }
  else if (v4[1] * *v4 && *(_DWORD *)v6)
  {
    cva::VecLib<float>::gemm();
  }
  else
  {
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
      bzero(v5, 4 * v10);
  }
}

uint64_t sub_1C98E84B0(uint64_t a1)
{
  void *v2;
  void *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;

  v2 = *(void **)(a1 + 624);
  if (v2)
  {
    *(_QWORD *)(a1 + 632) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 600);
  if (v3)
  {
    *(_QWORD *)(a1 + 608) = v3;
    operator delete(v3);
  }
  if (*(_BYTE *)(a1 + 440))
  {
    v4 = *(std::__shared_weak_count **)(a1 + 424);
    if (v4)
    {
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v6 = __ldaxr(p_shared_owners);
      while (__stlxr(v6 - 1, p_shared_owners));
      if (!v6)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
  sub_1C98B896C((uint64_t *)(a1 + 408));
  v7 = *(std::__shared_weak_count **)(a1 + 400);
  if (v7)
  {
    v8 = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  return sub_1C98E5C3C(a1);
}

uint64_t *sub_1C98E8570(uint64_t *a1)
{
  unsigned __int8 v2;
  NSObject *v3;
  uint64_t v4;
  uint8_t v6[16];

  (*(void (**)(_QWORD))(**(_QWORD **)(*a1 + 392) + 24))(*(_QWORD *)(*a1 + 392));
  v2 = atomic_load((unsigned __int8 *)&qword_1ED52ACD0);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_1ED52ACD0))
  {
    qword_1ED52ACE0 = (uint64_t)os_log_create("com.apple.AppleCVA", "FaceKit");
    __cxa_guard_release(&qword_1ED52ACD0);
  }
  v3 = qword_1ED52ACE0;
  if (os_log_type_enabled((os_log_t)qword_1ED52ACE0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v6 = 0;
    _os_log_impl(&dword_1C9870000, v3, OS_LOG_TYPE_DEFAULT, "~FaceKitLiteScheduler", v6, 2u);
  }
  if (*a1)
  {
    v4 = sub_1C98E84B0(*a1);
    MEMORY[0x1CAA44AFC](v4, 0x10E2C4060765A9DLL);
  }
  return a1;
}

void sub_1C98E8654(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E8294730;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1C98E8664(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E8294730;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1CAA44AFCLL);
}

uint64_t sub_1C98E8694(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t sub_1C98E86A4(uint64_t a1, _OWORD *a2, __int128 *a3, __int128 *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t *a8, float a9, float a10, _QWORD *a11, _QWORD *a12)
{
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  size_t v25;
  void *v26;
  uint64_t v27;
  size_t v28;
  void *v29;
  uint64_t v30;
  void *memptr;

  v17 = a2[1];
  *(_OWORD *)a1 = *a2;
  *(_OWORD *)(a1 + 16) = v17;
  v18 = *a3;
  v19 = a3[1];
  *(_DWORD *)(a1 + 64) = *((_DWORD *)a3 + 8);
  *(_OWORD *)(a1 + 32) = v18;
  *(_OWORD *)(a1 + 48) = v19;
  v20 = *(_QWORD *)((char *)a3 + 36);
  *(_DWORD *)(a1 + 76) = *((_DWORD *)a3 + 11);
  *(_QWORD *)(a1 + 68) = v20;
  v21 = *a4;
  v22 = a4[1];
  *(_DWORD *)(a1 + 112) = *((_DWORD *)a4 + 8);
  *(_OWORD *)(a1 + 80) = v21;
  *(_OWORD *)(a1 + 96) = v22;
  v23 = *(_QWORD *)((char *)a4 + 36);
  *(_DWORD *)(a1 + 124) = *((_DWORD *)a4 + 11);
  *(_QWORD *)(a1 + 116) = v23;
  *(float *)(a1 + 128) = a9;
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 136) = *(_QWORD *)a5;
  *(_QWORD *)a5 = 0;
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a5 + 8);
  *(_QWORD *)(a5 + 8) = 0;
  *(_DWORD *)(a1 + 152) = *(_DWORD *)(a5 + 16);
  *(_DWORD *)(a5 + 16) = 0;
  v24 = *(unsigned int *)(a6 + 16);
  v25 = (4 * v24 + 31) & 0x7FFFFFFE0;
  *(_QWORD *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 168) = v25 >> 2;
  memptr = 0;
  malloc_type_posix_memalign(&memptr, 0x20uLL, v25, 0x49090899uLL);
  v26 = memptr;
  *(_QWORD *)(a1 + 160) = memptr;
  if ((_DWORD)v24)
    memcpy(v26, *(const void **)a6, 4 * v24);
  *(_DWORD *)(a1 + 176) = *(_DWORD *)(a6 + 16);
  v27 = *(unsigned int *)(a7 + 16);
  v28 = (4 * v27 + 31) & 0x7FFFFFFE0;
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 192) = v28 >> 2;
  memptr = 0;
  malloc_type_posix_memalign(&memptr, 0x20uLL, v28, 0x49090899uLL);
  v29 = memptr;
  *(_QWORD *)(a1 + 184) = memptr;
  if ((_DWORD)v27)
    memcpy(v29, *(const void **)a7, 4 * v27);
  *(_DWORD *)(a1 + 200) = *(_DWORD *)(a7 + 16);
  v30 = *a8;
  *(_DWORD *)(a1 + 216) = *((_DWORD *)a8 + 2);
  *(_QWORD *)(a1 + 208) = v30;
  *(_QWORD *)(a1 + 220) = *a11;
  *(_QWORD *)(a1 + 228) = *a12;
  *(float *)(a1 + 236) = a10;
  *(_QWORD *)(a1 + 240) = 0;
  *(_QWORD *)(a1 + 248) = 0;
  return a1;
}

void sub_1C98E8840(_QWORD *a1)
{
  sub_1C98E9E04(a1);
  JUMPOUT(0x1CAA44AFCLL);
}

uint64_t sub_1C98E8864@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  size_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  size_t v21;
  char *v22;
  char *v23;
  _QWORD *v24;
  int v25;
  int8x16_t v26;
  __int32 v27;
  size_t v28;
  uint64_t v29;
  _QWORD *v30;
  int v31;
  int8x16_t v32;
  __int32 v33;
  size_t v34;
  uint64_t v35;
  _QWORD *v36;
  int v37;
  int8x16_t v38;
  __int32 v39;
  size_t v40;
  uint64_t v41;
  _QWORD *v42;
  int v43;
  int8x16_t v44;
  __int32 v45;
  size_t v46;
  size_t v47;
  uint64_t result;
  _QWORD *v49;
  int v50;
  int8x16_t v51;
  __int32 v52;
  size_t v53;
  size_t v54;
  void *v55;
  void *memptr;

  v4 = 40;
  if (!*(_BYTE *)(a1 + 8))
    v4 = 48;
  v5 = *(_QWORD *)(a1 + v4);
  v6 = *(unsigned int *)(*(_QWORD *)(a1 + 24) + 92);
  v7 = operator new();
  v8 = *(unsigned __int8 *)(a1 + 8);
  *(_QWORD *)v7 = &off_1E8294B18;
  v9 = *(_QWORD **)(v5 + 64);
  v11 = v9[1];
  v10 = v9[2];
  *(_QWORD *)(v7 + 16) = 0;
  *(_QWORD *)(v7 + 24) = 0;
  *(_QWORD *)(v7 + 8) = 0;
  v12 = v10 - v11;
  if (v12)
  {
    v13 = 0xCCCCCCCCCCCCCCCDLL * (v12 >> 3);
    if (v13 >> 61)
      goto LABEL_27;
    v14 = 8 * v13;
    v15 = (char *)operator new(8 * v13);
    *(_QWORD *)(v7 + 8) = v15;
    v16 = &v15[v14];
    *(_QWORD *)(v7 + 24) = &v15[v14];
    bzero(v15, v14);
    *(_QWORD *)(v7 + 16) = v16;
  }
  v18 = v9[4];
  v17 = v9[5];
  *(_QWORD *)(v7 + 32) = 0;
  *(_QWORD *)(v7 + 40) = 0;
  *(_QWORD *)(v7 + 48) = 0;
  v19 = v17 - v18;
  if (!v19)
    goto LABEL_9;
  v20 = 0xCCCCCCCCCCCCCCCDLL * (v19 >> 3);
  if (v20 >> 61)
LABEL_27:
    abort();
  v21 = 8 * v20;
  v22 = (char *)operator new(8 * v20);
  *(_QWORD *)(v7 + 32) = v22;
  v23 = &v22[v21];
  *(_QWORD *)(v7 + 48) = &v22[v21];
  bzero(v22, v21);
  *(_QWORD *)(v7 + 40) = v23;
LABEL_9:
  v24 = sub_1C98AF10C(*(_QWORD **)(v5 + 72), (unint64_t)"network_inputs_image_2_0_bridge");
  if (v24)
    v25 = *((_DWORD *)v24 + 6);
  else
    v25 = -1;
  v26 = *(int8x16_t *)(v11 + 40 * v25 + 24);
  *(int32x2_t *)v26.i8 = vmul_s32(*(int32x2_t *)v26.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v26, v26, 8uLL));
  v27 = v26.i32[0] * v26.i32[1];
  v28 = (4 * (v26.i32[0] * v26.i32[1]) + 31) & 0x7FFFFFFE0;
  *(_QWORD *)(v7 + 64) = v28 >> 2;
  memptr = 0;
  malloc_type_posix_memalign(&memptr, 0x20uLL, v28, 0x49090899uLL);
  *(_QWORD *)(v7 + 56) = memptr;
  *(_DWORD *)(v7 + 72) = v27;
  *(_BYTE *)(v7 + 80) = 0;
  *(_BYTE *)(v7 + 104) = 0;
  v29 = *(_QWORD *)(v5 + 64);
  v30 = sub_1C98AF10C(*(_QWORD **)(v5 + 72), (unint64_t)"network_inputs_latents_input_0_bridge");
  if (v30)
    v31 = *((_DWORD *)v30 + 6);
  else
    v31 = -1;
  v32 = *(int8x16_t *)(*(_QWORD *)(v29 + 8) + 40 * v31 + 24);
  *(int32x2_t *)v32.i8 = vmul_s32(*(int32x2_t *)v32.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v32, v32, 8uLL));
  v33 = v32.i32[0] * v32.i32[1];
  v34 = (4 * (v32.i32[0] * v32.i32[1]) + 31) & 0x7FFFFFFE0;
  *(_QWORD *)(v7 + 120) = v34 >> 2;
  memptr = 0;
  malloc_type_posix_memalign(&memptr, 0x20uLL, v34, 0x49090899uLL);
  *(_QWORD *)(v7 + 112) = memptr;
  *(_DWORD *)(v7 + 128) = v33;
  v35 = *(_QWORD *)(v5 + 64);
  v36 = sub_1C98AF10C(*(_QWORD **)(v5 + 80), (unint64_t)"latents_output");
  if (v36)
    v37 = *((_DWORD *)v36 + 6);
  else
    v37 = -1;
  v38 = *(int8x16_t *)(*(_QWORD *)(v35 + 32) + 40 * v37 + 24);
  *(int32x2_t *)v38.i8 = vmul_s32(*(int32x2_t *)v38.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v38, v38, 8uLL));
  v39 = v38.i32[0] * v38.i32[1];
  v40 = (4 * (v38.i32[0] * v38.i32[1]) + 31) & 0x7FFFFFFE0;
  *(_QWORD *)(v7 + 144) = v40 >> 2;
  memptr = 0;
  malloc_type_posix_memalign(&memptr, 0x20uLL, v40, 0x49090899uLL);
  *(_QWORD *)(v7 + 136) = memptr;
  *(_DWORD *)(v7 + 152) = v39;
  v41 = *(_QWORD *)(v5 + 64);
  v42 = sub_1C98AF10C(*(_QWORD **)(v5 + 80), (unint64_t)"neutral_pca_subset_coeffs_output");
  if (v42)
    v43 = *((_DWORD *)v42 + 6);
  else
    v43 = -1;
  v44 = *(int8x16_t *)(*(_QWORD *)(v41 + 32) + 40 * v43 + 24);
  *(int32x2_t *)v44.i8 = vmul_s32(*(int32x2_t *)v44.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v44, v44, 8uLL));
  v45 = v44.i32[0] * v44.i32[1];
  v46 = (4 * (v44.i32[0] * v44.i32[1]) + 31) & 0x7FFFFFFE0;
  *(_QWORD *)(v7 + 168) = v46 >> 2;
  memptr = 0;
  malloc_type_posix_memalign(&memptr, 0x20uLL, v46, 0x49090899uLL);
  *(_QWORD *)(v7 + 160) = memptr;
  *(_DWORD *)(v7 + 176) = v45;
  v47 = (4 * v6 + 31) & 0x7FFFFFFE0;
  *(_QWORD *)(v7 + 192) = v47 >> 2;
  memptr = 0;
  result = malloc_type_posix_memalign(&memptr, 0x20uLL, v47, 0x49090899uLL);
  *(_QWORD *)(v7 + 184) = memptr;
  *(_DWORD *)(v7 + 200) = v6;
  *(_DWORD *)(v7 + 208) = 0;
  if (!v8)
  {
    v49 = sub_1C98AF10C(*(_QWORD **)(v5 + 72), (unint64_t)"network_inputs_depth_images_rays_0_bridge");
    if (v49)
      v50 = *((_DWORD *)v49 + 6);
    else
      v50 = -1;
    v51 = *(int8x16_t *)(*(_QWORD *)(*(_QWORD *)(v5 + 64) + 8) + 40 * v50 + 24);
    *(int32x2_t *)v51.i8 = vmul_s32(*(int32x2_t *)v51.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v51, v51, 8uLL));
    v52 = v51.i32[0] * v51.i32[1];
    v53 = (4 * (v51.i32[0] * v51.i32[1]) + 31) & 0x7FFFFFFE0;
    v54 = v53 >> 2;
    memptr = 0;
    result = malloc_type_posix_memalign(&memptr, 0x20uLL, v53, 0x49090899uLL);
    v55 = memptr;
    *(_DWORD *)(v7 + 96) = v52;
    *(_BYTE *)(v7 + 104) = 1;
    *(_QWORD *)(v7 + 80) = v55;
    *(_QWORD *)(v7 + 88) = v54;
  }
  *a2 = v7;
  return result;
}

void sub_1C98E8C5C(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  int v9;
  int8x16_t v10;
  __int32 v11;
  size_t v12;
  size_t v13;
  void *v14;
  size_t v15;
  void *v16;
  void *memptr;

  v3 = *(_QWORD *)(a1 + 40);
  v4 = *(unsigned int *)(*(_QWORD *)(a1 + 24) + 92);
  v5 = operator new();
  v6 = *(_QWORD *)(v3 + 64);
  v7 = *(_QWORD **)(v3 + 80);
  *(_QWORD *)v5 = &off_1E8294AF8;
  v8 = sub_1C98AF10C(v7, (unint64_t)"latents_output");
  if (v8)
    v9 = *((_DWORD *)v8 + 6);
  else
    v9 = -1;
  v10 = *(int8x16_t *)(*(_QWORD *)(v6 + 32) + 40 * v9 + 24);
  *(int32x2_t *)v10.i8 = vmul_s32(*(int32x2_t *)v10.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v10, v10, 8uLL));
  v11 = v10.i32[0] * v10.i32[1];
  v12 = 4 * (v10.i32[0] * v10.i32[1]);
  v13 = (v12 + 31) & 0x7FFFFFFE0;
  *(_QWORD *)(v5 + 16) = v13 >> 2;
  memptr = 0;
  malloc_type_posix_memalign(&memptr, 0x20uLL, v13, 0x49090899uLL);
  v14 = memptr;
  *(_QWORD *)(v5 + 8) = memptr;
  *(_DWORD *)(v5 + 24) = v11;
  if (v11)
    bzero(v14, v12);
  v15 = (4 * v4 + 31) & 0x7FFFFFFE0;
  *(_QWORD *)(v5 + 40) = v15 >> 2;
  memptr = 0;
  malloc_type_posix_memalign(&memptr, 0x20uLL, v15, 0x49090899uLL);
  v16 = memptr;
  *(_QWORD *)(v5 + 32) = memptr;
  *(_DWORD *)(v5 + 48) = v4;
  if ((_DWORD)v4)
    bzero(v16, 4 * v4);
  *(_DWORD *)(v5 + 56) = 0;
  *a2 = v5;
}

void sub_1C98E8D9C(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  void *v8;
  size_t v9;
  size_t v10;
  void **v11;
  unint64_t v12;
  void *v13;
  size_t v14;
  size_t v15;
  void *memptr;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 16))(a3);
  v5 = *a3;
  v6 = *a3 + 136;
  if (v6 != a2 + 8)
  {
    v7 = *(unsigned int *)(a2 + 24);
    if ((_DWORD)v7)
    {
      v8 = *(void **)(v5 + 136);
      if (*(_QWORD *)(v5 + 144) >= v7)
      {
        v9 = 4 * v7;
      }
      else
      {
        free(v8);
        v9 = 4 * v7;
        v10 = (4 * v7 + 31) & 0x7FFFFFFE0;
        *(_QWORD *)(v5 + 136) = 0;
        *(_QWORD *)(v5 + 144) = v10 >> 2;
        memptr = 0;
        malloc_type_posix_memalign(&memptr, 0x20uLL, v10, 0x49090899uLL);
        v8 = memptr;
        *(_QWORD *)(v5 + 136) = memptr;
      }
      memcpy(v8, *(const void **)(a2 + 8), v9);
    }
    else
    {
      free(*(void **)v6);
      *(_QWORD *)v6 = 0;
      *(_QWORD *)(v6 + 8) = 0;
    }
    *(_DWORD *)(v5 + 152) = *(_DWORD *)(a2 + 24);
  }
  v11 = (void **)(v5 + 184);
  if (v5 + 184 != a2 + 32)
  {
    v12 = *(unsigned int *)(a2 + 48);
    if ((_DWORD)v12)
    {
      v13 = *(void **)(v5 + 184);
      if (*(_QWORD *)(v5 + 192) >= v12)
      {
        v14 = 4 * v12;
      }
      else
      {
        free(v13);
        v14 = 4 * v12;
        v15 = (4 * v12 + 31) & 0x7FFFFFFE0;
        *(_QWORD *)(v5 + 184) = 0;
        *(_QWORD *)(v5 + 192) = v15 >> 2;
        memptr = 0;
        malloc_type_posix_memalign(&memptr, 0x20uLL, v15, 0x49090899uLL);
        v13 = memptr;
        *(_QWORD *)(v5 + 184) = memptr;
      }
      memcpy(v13, *(const void **)(a2 + 32), v14);
    }
    else
    {
      free(*v11);
      *v11 = 0;
      *(_QWORD *)(v5 + 192) = 0;
    }
    *(_DWORD *)(v5 + 200) = *(_DWORD *)(a2 + 48);
  }
  *(_DWORD *)(v5 + 208) = *(_DWORD *)(a2 + 56);
}

void sub_1C98E8F00(uint64_t a1, uint64_t a2, uint64_t a3)
{
  const void **v5;
  uint64_t v6;
  unint64_t v7;
  void *v8;
  size_t v9;
  size_t v10;
  void **v11;
  unint64_t v12;
  void *v13;
  size_t v14;
  size_t v15;
  void *memptr;

  v5 = (const void **)(a2 + 136);
  v6 = a3 + 8;
  if (a3 + 8 != a2 + 136)
  {
    v7 = *(unsigned int *)(a2 + 152);
    if ((_DWORD)v7)
    {
      v8 = *(void **)(a3 + 8);
      if (*(_QWORD *)(a3 + 16) >= v7)
      {
        v9 = 4 * v7;
      }
      else
      {
        free(v8);
        v9 = 4 * v7;
        v10 = (4 * v7 + 31) & 0x7FFFFFFE0;
        *(_QWORD *)(a3 + 8) = 0;
        *(_QWORD *)(a3 + 16) = v10 >> 2;
        memptr = 0;
        malloc_type_posix_memalign(&memptr, 0x20uLL, v10, 0x49090899uLL);
        v8 = memptr;
        *(_QWORD *)(a3 + 8) = memptr;
      }
      memcpy(v8, *v5, v9);
    }
    else
    {
      free(*(void **)v6);
      *(_QWORD *)v6 = 0;
      *(_QWORD *)(v6 + 8) = 0;
    }
    *(_DWORD *)(a3 + 24) = *(_DWORD *)(a2 + 152);
  }
  v11 = (void **)(a3 + 32);
  if (a3 + 32 != a2 + 184)
  {
    v12 = *(unsigned int *)(a2 + 200);
    if ((_DWORD)v12)
    {
      v13 = *(void **)(a3 + 32);
      if (*(_QWORD *)(a3 + 40) >= v12)
      {
        v14 = 4 * v12;
      }
      else
      {
        free(v13);
        v14 = 4 * v12;
        v15 = (4 * v12 + 31) & 0x7FFFFFFE0;
        *(_QWORD *)(a3 + 32) = 0;
        *(_QWORD *)(a3 + 40) = v15 >> 2;
        memptr = 0;
        malloc_type_posix_memalign(&memptr, 0x20uLL, v15, 0x49090899uLL);
        v13 = memptr;
        *(_QWORD *)(a3 + 32) = memptr;
      }
      memcpy(v13, *(const void **)(a2 + 184), v14);
    }
    else
    {
      free(*v11);
      *v11 = 0;
      *(_QWORD *)(a3 + 40) = 0;
    }
    *(_DWORD *)(a3 + 48) = *(_DWORD *)(a2 + 200);
  }
  *(_DWORD *)(a3 + 56) = *(_DWORD *)(a2 + 208);
}

uint64_t sub_1C98E9050(_QWORD *a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, float a8)
{
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  int v20;
  unsigned __int8 v21;
  NSObject *v22;
  _BOOL4 v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  unsigned __int8 v28;
  NSObject *v29;
  unint64_t v30;
  char *v31;
  char *v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  char *v40;
  unint64_t v41;
  char *v42;
  uint64_t v43;
  char *v44;
  __int128 *v45;
  uint64_t v46;
  __int128 v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  float32x4_t v54;
  int32x2_t v55;
  uint64_t v56;
  float v58;
  float *v59;
  uint64_t v60;
  uint64_t v61;
  float v62;
  float v63;
  float v64;
  float v65;
  float v66;
  float v67;
  float v68;
  float v69;
  int v70;
  int v71;
  int32x4_t v72;
  int32x4_t v73;
  uint64_t v74;
  int32x4_t v75;
  float32x4_t *v76;
  int v77;
  int32x4_t v78;
  int32x4_t v79;
  float32x4_t *v80;
  uint64_t v81;
  int32x4_t v82;
  int v83;
  int v84;
  int v85;
  int v86;
  uint64_t v87;
  float32x4_t *v88;
  int v89;
  int32x4_t v90;
  int32x4_t *v91;
  uint64_t v92;
  int v93;
  _QWORD *v94;
  _QWORD *v95;
  uint64_t v96;
  int v97;
  _QWORD *v98;
  uint64_t v99;
  _QWORD *v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  unint64_t v104;
  unint64_t v105;
  BOOL v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  uint64_t v110;
  unint64_t v111;
  int v112;
  int v113;
  int v114;
  int v115;
  int v116;
  int *p_memptr;
  int v118;
  unint64_t v119;
  BOOL v120;
  uint64_t v121;
  uint64_t v122;
  unint64_t v123;
  _QWORD *v124;
  uint64_t v125;
  _QWORD *v126;
  uint64_t v127;
  _QWORD *v128;
  uint64_t v129;
  uint64_t v130;
  int v131;
  unint64_t v132;
  void *v133;
  void **v134;
  void *v135;
  size_t v136;
  size_t v137;
  void *v138;
  uint64_t v139;
  const char *v141;
  char *v142;
  char *v143;
  _QWORD *v144;
  uint64_t v145;
  uint64_t v147;
  _QWORD *v149;
  int v150;
  _DWORD v151[2];
  void *v152;
  int v153;
  int v154;
  __int128 v155;
  __int128 v156;
  int v157;
  __int128 memptr;
  uint64_t v159;
  int v160;
  int v161;
  int v162;
  uint64_t v163;

  v163 = *MEMORY[0x1E0C80C00];
  if (*(_DWORD *)(a7 + 208))
  {
    v14 = *(_QWORD *)(a7 + 136);
    v15 = *(_QWORD *)(a7 + 144);
    v16 = *(_DWORD *)(a7 + 152);
    v17 = *(_QWORD *)(a7 + 120);
    *(_QWORD *)(a7 + 136) = *(_QWORD *)(a7 + 112);
    *(_QWORD *)(a7 + 144) = v17;
    *(_DWORD *)(a7 + 152) = *(_DWORD *)(a7 + 128);
    *(_QWORD *)(a7 + 112) = v14;
    *(_QWORD *)(a7 + 120) = v15;
    *(_DWORD *)(a7 + 128) = v16;
  }
  else
  {
    v18 = *(unsigned int *)(a7 + 128);
    if ((_DWORD)v18)
      memset_pattern16(*(void **)(a7 + 112), &unk_1C9927920, 4 * v18);
  }
  v19 = a1 + 6;
  v20 = (*(uint64_t (**)(_QWORD *, uint64_t))(*a1 + 56))(a1, a6);
  v21 = atomic_load((unsigned __int8 *)&qword_1ED52ACD0);
  if ((v21 & 1) == 0 && __cxa_guard_acquire(&qword_1ED52ACD0))
  {
    qword_1ED52ACE0 = (uint64_t)os_log_create("com.apple.AppleCVA", "FaceKit");
    __cxa_guard_release(&qword_1ED52ACD0);
  }
  v22 = qword_1ED52ACE0;
  v23 = os_log_type_enabled((os_log_t)qword_1ED52ACE0, OS_LOG_TYPE_DEBUG);
  v149 = a2;
  v147 = a3;
  v150 = v20;
  if (v20)
  {
    v19 = a1 + 5;
    if (!v23)
      goto LABEL_10;
    LOWORD(memptr) = 0;
    v24 = "Using RGB";
  }
  else
  {
    if (!v23)
      goto LABEL_10;
    LOWORD(memptr) = 0;
    v24 = "Using RGB + DEPTH";
  }
  _os_log_debug_impl(&dword_1C9870000, v22, OS_LOG_TYPE_DEBUG, v24, (uint8_t *)&memptr, 2u);
LABEL_10:
  v25 = *v19;
  v26 = *(_QWORD *)(*v19 + 64);
  v27 = (_QWORD *)(a7 + 8);
  if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(v26 + 16) - *(_QWORD *)(v26 + 8)) >> 3) == (uint64_t)(*(_QWORD *)(a7 + 16) - *(_QWORD *)(a7 + 8)) >> 3)
    goto LABEL_36;
  v28 = atomic_load((unsigned __int8 *)&qword_1ED52ACD0);
  if ((v28 & 1) == 0 && __cxa_guard_acquire(&qword_1ED52ACD0))
  {
    qword_1ED52ACE0 = (uint64_t)os_log_create("com.apple.AppleCVA", "FaceKit");
    __cxa_guard_release(&qword_1ED52ACD0);
  }
  v29 = qword_1ED52ACE0;
  if (os_log_type_enabled((os_log_t)qword_1ED52ACE0, OS_LOG_TYPE_DEBUG))
  {
    v141 = "rgbd";
    if (v150)
      v141 = "rgb only";
    LODWORD(memptr) = 136315138;
    *(_QWORD *)((char *)&memptr + 4) = v141;
    _os_log_debug_impl(&dword_1C9870000, v29, OS_LOG_TYPE_DEBUG, "Switching setup for using %s regressor.", (uint8_t *)&memptr, 0xCu);
  }
  v30 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(v26 + 16) - *(_QWORD *)(v26 + 8)) >> 3);
  v32 = *(char **)(a7 + 8);
  v31 = *(char **)(a7 + 16);
  v33 = (v31 - v32) >> 3;
  v34 = v30 - v33;
  if (v30 > v33)
  {
    v35 = *(_QWORD *)(a7 + 24);
    if (v34 <= (v35 - (uint64_t)v31) >> 3)
    {
      bzero(*(void **)(a7 + 16), 8 * v34);
      *(_QWORD *)(a7 + 16) = &v31[8 * v34];
      v27 = (_QWORD *)(a7 + 8);
      goto LABEL_36;
    }
    if (v30 >> 61)
      abort();
    v144 = a1;
    v145 = v25;
    v36 = v35 - (_QWORD)v32;
    if (v36 >> 2 > v30)
      v30 = v36 >> 2;
    if ((unint64_t)v36 >= 0x7FFFFFFFFFFFFFF8)
      v30 = 0x1FFFFFFFFFFFFFFFLL;
    if (v30 >> 61)
      sub_1C9899D30();
    v37 = 8 * v30;
    v38 = (char *)operator new(8 * v30);
    v39 = &v38[8 * v33];
    v142 = v38;
    v143 = &v38[v37];
    bzero(v39, 8 * v34);
    v40 = &v39[8 * v34];
    if (v31 == v32)
    {
      v32 = v31;
      v42 = v143;
      a1 = v144;
      v27 = (_QWORD *)(a7 + 8);
      goto LABEL_34;
    }
    v41 = v31 - v32 - 8;
    a1 = v144;
    v27 = (_QWORD *)(a7 + 8);
    if (v41 >= 0x58)
    {
      v42 = v143;
      if ((unint64_t)(v32 - v142) >= 0x20)
      {
        v43 = (v41 >> 3) + 1;
        v44 = &v142[8 * v33 - 16];
        v45 = (__int128 *)(v31 - 16);
        v46 = v43 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v47 = *v45;
          *((_OWORD *)v44 - 1) = *(v45 - 1);
          *(_OWORD *)v44 = v47;
          v44 -= 32;
          v45 -= 2;
          v46 -= 4;
        }
        while (v46);
        v39 -= 8 * (v43 & 0x3FFFFFFFFFFFFFFCLL);
        v31 -= 8 * (v43 & 0x3FFFFFFFFFFFFFFCLL);
        if (v43 == (v43 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_34;
      }
    }
    else
    {
      v42 = v143;
    }
    do
    {
      v48 = *((_QWORD *)v31 - 1);
      v31 -= 8;
      *((_QWORD *)v39 - 1) = v48;
      v39 -= 8;
    }
    while (v31 != v32);
    v32 = *(char **)(a7 + 8);
LABEL_34:
    *(_QWORD *)(a7 + 8) = v39;
    *(_QWORD *)(a7 + 16) = v40;
    *(_QWORD *)(a7 + 24) = v42;
    v25 = v145;
    if (v32)
      operator delete(v32);
    goto LABEL_36;
  }
  v27 = (_QWORD *)(a7 + 8);
  if (v30 < v33)
    *(_QWORD *)(a7 + 16) = &v32[0x6666666666666668 * ((uint64_t)(*(_QWORD *)(v26 + 16) - *(_QWORD *)(v26 + 8)) >> 3)];
LABEL_36:
  v49 = sub_1C98AF10C(*(_QWORD **)(v25 + 72), (unint64_t)"network_inputs_image_2_0_bridge");
  if (v49)
    v50 = *((int *)v49 + 6);
  else
    v50 = -1;
  v51 = *(_QWORD *)(v26 + 8) + 40 * (int)v50;
  v52 = *(_DWORD *)(v51 + 32);
  v53 = *(unsigned int *)(v51 + 36);
  memcpy(*(void **)(a7 + 56), *(const void **)a4, 4 * *(unsigned int *)(a4 + 16));
  v56 = *(_QWORD *)(a7 + 56);
  if ((int)v53 >= 1 && v52 >= 1)
  {
    v55.i32[0] = *(_DWORD *)a5;
    v58 = *(float *)(a5 + 4);
    v59 = (float *)(v56 + 4 * *(unsigned int *)(a4 + 16));
    v60 = v53 & 0xFFFFFFF8;
    v61 = 4 * v60;
    v62 = 1.0 / a8;
    if (v53 > 7)
    {
      v54 = (float32x4_t)vdupq_lane_s32(v55, 0);
      if (v60 == v53)
      {
        v71 = 0;
        v72.i64[0] = 0x400000004;
        v72.i64[1] = 0x400000004;
        v73.i64[0] = 0x800000008;
        v73.i64[1] = 0x800000008;
        do
        {
          v74 = 0;
          v75 = (int32x4_t)xmmword_1C9927540;
          do
          {
            v76 = (float32x4_t *)&v59[v74];
            *v76 = vmulq_n_f32(vsubq_f32(vcvtq_f32_s32(v75), v54), v62);
            v76[1] = vmulq_n_f32(vsubq_f32(vcvtq_f32_s32(vaddq_s32(v75, v72)), v54), v62);
            v75 = vaddq_s32(v75, v73);
            v74 += 8;
          }
          while (v53 != v74);
          v59 = (float *)((char *)v59 + v61);
          ++v71;
        }
        while (v71 != v52);
      }
      else
      {
        v77 = 0;
        v78.i64[0] = 0x400000004;
        v78.i64[1] = 0x400000004;
        v79.i64[0] = 0x800000008;
        v79.i64[1] = 0x800000008;
        do
        {
          v80 = (float32x4_t *)(v59 + 4);
          v81 = v53 & 0xFFFFFFF8;
          v82 = (int32x4_t)xmmword_1C9927540;
          do
          {
            v80[-1] = vmulq_n_f32(vsubq_f32(vcvtq_f32_s32(v82), v54), v62);
            *v80 = vmulq_n_f32(vsubq_f32(vcvtq_f32_s32(vaddq_s32(v82, v78)), v54), v62);
            v82 = vaddq_s32(v82, v79);
            v80 += 2;
            v81 -= 8;
          }
          while (v81);
          v59 = (float *)((char *)v59 + v61);
          v83 = v53 & 0xFFFFFFF8;
          do
            *v59++ = v62 * (float)((float)v83++ - *(float *)v55.i32);
          while ((_DWORD)v53 != v83);
          ++v77;
        }
        while (v77 != v52);
      }
    }
    else
    {
      v63 = v62 * (float)(0.0 - *(float *)v55.i32);
      v64 = v62 * (float)(1.0 - *(float *)v55.i32);
      v65 = v62 * (float)(2.0 - *(float *)v55.i32);
      v66 = v62 * (float)(3.0 - *(float *)v55.i32);
      v67 = v62 * (float)(4.0 - *(float *)v55.i32);
      v68 = v62 * (float)(5.0 - *(float *)v55.i32);
      v69 = v62 * (float)(6.0 - *(float *)v55.i32);
      v70 = v52;
      do
      {
        *v59 = v63;
        if ((_DWORD)v53 == 1)
        {
          ++v59;
        }
        else
        {
          v59[1] = v64;
          if ((_DWORD)v53 == 2)
          {
            v59 += 2;
          }
          else
          {
            v59[2] = v65;
            if ((_DWORD)v53 == 3)
            {
              v59 += 3;
            }
            else
            {
              v59[3] = v66;
              if ((_DWORD)v53 == 4)
              {
                v59 += 4;
              }
              else
              {
                v59[4] = v67;
                if ((_DWORD)v53 == 5)
                {
                  v59 += 5;
                }
                else
                {
                  v59[5] = v68;
                  if ((_DWORD)v53 == 6)
                  {
                    v59 += 6;
                  }
                  else
                  {
                    v59[6] = v69;
                    v59 += 7;
                  }
                }
              }
            }
          }
        }
        --v70;
      }
      while (v70);
    }
    if (v53 > 7)
    {
      if (v60 == v53)
      {
        v86 = 0;
        do
        {
          v87 = 0;
          v54.f32[0] = v62 * (float)((float)v86 - v58);
          v54 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v54.f32, 0);
          do
          {
            v88 = (float32x4_t *)&v59[v87];
            *v88 = v54;
            v88[1] = v54;
            v87 += 8;
          }
          while (v53 != v87);
          v59 = (float *)((char *)v59 + v61);
          ++v86;
        }
        while (v86 != v52);
      }
      else
      {
        v89 = 0;
        do
        {
          v54.f32[0] = v62 * (float)((float)v89 - v58);
          v90 = vdupq_lane_s32(*(int32x2_t *)v54.f32, 0);
          v91 = (int32x4_t *)(v59 + 4);
          v92 = v53 & 0xFFFFFFF8;
          do
          {
            v91[-1] = v90;
            *v91 = v90;
            v91 += 2;
            v92 -= 8;
          }
          while (v92);
          v59 = (float *)((char *)v59 + v61);
          v93 = v53 - v60;
          do
          {
            *v59++ = v54.f32[0];
            --v93;
          }
          while (v93);
          ++v89;
        }
        while (v89 != v52);
      }
    }
    else
    {
      v84 = 0;
      do
      {
        v85 = v53;
        do
        {
          *v59++ = v62 * (float)((float)v84 - v58);
          --v85;
        }
        while (v85);
        ++v84;
      }
      while (v84 != v52);
    }
  }
  *(_QWORD *)(*v27 + 8 * v50) = v56;
  if ((v150 & 1) == 0)
  {
    v94 = v27;
    v95 = sub_1C98AF10C(*(_QWORD **)(v25 + 72), (unint64_t)"network_inputs_depth_images_rays_0_bridge");
    if (v95)
      v96 = *((int *)v95 + 6);
    else
      v96 = -1;
    v97 = *(_DWORD *)(v147 + 12) * *(_DWORD *)(v147 + 8);
    memcpy(*(void **)(a7 + 80), *(const void **)(v147 + 24), 4 * v97);
    memcpy((void *)(*(_QWORD *)(a7 + 80) + 4 * v97), (const void *)(*(_QWORD *)(a7 + 56) + 4 * v97), 8 * v97);
    *(_QWORD *)(*(_QWORD *)(a7 + 8) + 8 * v96) = *(_QWORD *)(a7 + 80);
    v27 = v94;
  }
  v98 = sub_1C98AF10C(*(_QWORD **)(v25 + 72), (unint64_t)"network_inputs_reshape_0_bridge");
  if (v98)
    v99 = *((int *)v98 + 6);
  else
    v99 = -1;
  *(_QWORD *)(*v27 + 8 * v99) = *v149;
  v100 = sub_1C98AF10C(*(_QWORD **)(v25 + 72), (unint64_t)"network_inputs_reshape_1_0_bridge");
  if (v100)
    v101 = *((int *)v100 + 6);
  else
    v101 = -1;
  v157 = 0;
  v155 = 0u;
  v156 = 0u;
  if (&v155 == (__int128 *)a6)
  {
    v110 = 0;
    v111 = 0;
    v112 = *(_DWORD *)(a6 + 4);
    v114 = *(_DWORD *)(a6 + 8);
    v113 = *(_DWORD *)(a6 + 12);
    LODWORD(memptr) = *(_DWORD *)a6;
    DWORD1(memptr) = v113;
    v115 = *(_DWORD *)(a6 + 28);
    DWORD2(memptr) = *(_DWORD *)(a6 + 24);
    HIDWORD(memptr) = v112;
    v116 = *(_DWORD *)(a6 + 20);
    LODWORD(v159) = *(_DWORD *)(a6 + 16);
    HIDWORD(v159) = v115;
    v160 = v114;
    v161 = v116;
    p_memptr = (int *)&memptr;
    v162 = *(_DWORD *)(a6 + 32);
    do
    {
      v118 = *p_memptr++;
      *(_DWORD *)(a6 + 4 * v110) = v118;
      v119 = HIDWORD(v111);
      v120 = (int)v111 < 2;
      if ((int)v111 < 2)
        v119 = 0;
      v121 = v110 + v119;
      v122 = (v111 + 1);
      v123 = v111 & 0xFFFFFFFF00000000;
      if (!v120)
        v122 = 0;
      v111 = v122 | v123;
      v110 = v121 + 1;
    }
    while (v110 != 9);
  }
  else
  {
    v102 = 0;
    v103 = 0;
    v104 = 0;
    do
    {
      *((_DWORD *)&v155 + v102) = *(_DWORD *)(a6 + 4 * (3 * v104 + HIDWORD(v104)));
      if ((int)v104 >= 2)
        v104 = (v104 & 0xFFFFFFFF00000000) + 0x100000000;
      else
        v104 = (v104 + 1) | v104 & 0xFFFFFFFF00000000;
      v105 = HIDWORD(v103);
      v106 = (int)v103 < 2;
      if ((int)v103 < 2)
        v105 = 0;
      v107 = v102 + v105;
      v108 = (v103 + 1);
      v109 = v103 & 0xFFFFFFFF00000000;
      if (!v106)
        v108 = 0;
      v103 = v108 | v109;
      v102 = v107 + 1;
    }
    while (v102 != 9);
  }
  *(_QWORD *)(*v27 + 8 * v101) = &v155;
  v124 = sub_1C98AF10C(*(_QWORD **)(v25 + 72), (unint64_t)"network_inputs_latents_input_0_bridge");
  if (v124)
    v125 = *((int *)v124 + 6);
  else
    v125 = -1;
  *(_QWORD *)(*(_QWORD *)(a7 + 8) + 8 * v125) = *(_QWORD *)(a7 + 112);
  v126 = sub_1C98AF10C(*(_QWORD **)(v25 + 80), (unint64_t)"latents_output");
  if (v126)
    v127 = *((int *)v126 + 6);
  else
    v127 = -1;
  *(_QWORD *)(*(_QWORD *)(a7 + 32) + 8 * v127) = *(_QWORD *)(a7 + 136);
  v128 = sub_1C98AF10C(*(_QWORD **)(v25 + 80), (unint64_t)"neutral_pca_subset_coeffs_output");
  if (v128)
    v129 = *((int *)v128 + 6);
  else
    v129 = -1;
  *(_QWORD *)(*(_QWORD *)(a7 + 32) + 8 * v129) = *(_QWORD *)(a7 + 160);
  std::mutex::lock((std::mutex *)v25);
  (*(void (**)(_QWORD, _QWORD *, uint64_t, _QWORD))(**(_QWORD **)(v25 + 64) + 16))(*(_QWORD *)(v25 + 64), v27, a7 + 32, 0);
  std::mutex::unlock((std::mutex *)v25);
  v130 = a1[3];
  v131 = *(_DWORD *)(a7 + 176);
  v132 = *(unsigned int *)(v130 + 136);
  v133 = *(void **)(v130 + 120);
  v151[0] = v132;
  v151[1] = v131;
  v152 = v133;
  v153 = v132;
  v154 = 0;
  v134 = (void **)(a7 + 184);
  if ((_DWORD)v132 != *(_DWORD *)(a7 + 200))
  {
    v135 = *v134;
    if (v133 == *v134 || *(void **)(a7 + 160) == v135)
    {
      v137 = (4 * v132 + 31) & 0x7FFFFFFE0;
      *((_QWORD *)&v155 + 1) = v137 >> 2;
      *(_QWORD *)&memptr = 0;
      malloc_type_posix_memalign((void **)&memptr, 0x20uLL, v137, 0x49090899uLL);
      *(_QWORD *)&v155 = memptr;
      LODWORD(v156) = v151[0];
      *((_QWORD *)&memptr + 1) = v151;
      v159 = a7 + 160;
      v160 = 1065353216;
      sub_1C98E9BA0((uint64_t)&v155, (uint64_t)&memptr);
      v138 = *(void **)(a7 + 184);
      v139 = *((_QWORD *)&v155 + 1);
      *(_QWORD *)(a7 + 184) = v155;
      *(_QWORD *)(a7 + 192) = v139;
      *(_DWORD *)(a7 + 200) = v156;
      free(v138);
      goto LABEL_134;
    }
    *(_DWORD *)(a7 + 200) = v132;
    if ((_DWORD)v132)
    {
      if (*(_QWORD *)(a7 + 192) < v132)
      {
        free(v135);
        v136 = (4 * v132 + 31) & 0x7FFFFFFE0;
        *(_QWORD *)(a7 + 184) = 0;
        *(_QWORD *)(a7 + 192) = v136 >> 2;
        *(_QWORD *)&memptr = 0;
        malloc_type_posix_memalign((void **)&memptr, 0x20uLL, v136, 0x49090899uLL);
        *(_QWORD *)(a7 + 184) = memptr;
      }
    }
    else
    {
      free(v135);
      *v134 = 0;
      *(_QWORD *)(a7 + 192) = 0;
    }
  }
  *((_QWORD *)&memptr + 1) = v151;
  v159 = a7 + 160;
  v160 = 1065353216;
  sub_1C98E9BA0(a7 + 184, (uint64_t)&memptr);
LABEL_134:
  ++*(_DWORD *)(a7 + 208);
  return 1;
}

BOOL sub_1C98E9B68(uint64_t a1, uint64_t a2)
{
  float v3;

  if (*(_BYTE *)(a1 + 8))
    return 1;
  v3 = *(float *)(a2 + 44);
  return v3 < *(float *)(a1 + 12) || v3 > *(float *)(a1 + 16);
}

void sub_1C98E9BA0(uint64_t a1, uint64_t a2)
{
  unsigned int *v4;
  void *v5;
  uint64_t v6;
  size_t v7;
  void *v8;
  size_t v9;
  uint64_t v10;
  void *v11;
  size_t v12;
  int v13;
  void *memptr;

  v4 = *(unsigned int **)(a2 + 8);
  v5 = *(void **)a1;
  if ((void *)(*((_QWORD *)v4 + 1) - 4 * v4[5]) == v5 || (v6 = *(_QWORD *)(a2 + 16), *(void **)v6 == v5))
  {
    v7 = (4 * *v4 + 31) & 0x7FFFFFFE0;
    v12 = v7 >> 2;
    memptr = 0;
    malloc_type_posix_memalign(&memptr, 0x20uLL, v7, 0x49090899uLL);
    v11 = memptr;
    v13 = **(_DWORD **)(a2 + 8);
    sub_1C98E9BA0(&v11, a2);
    v8 = *(void **)a1;
    v9 = v12;
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v9;
    *(_DWORD *)(a1 + 16) = v13;
    free(v8);
  }
  else if (v4[1] * *v4 && *(_DWORD *)(v6 + 16))
  {
    cva::VecLib<float>::gemm();
  }
  else
  {
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
      bzero(v5, 4 * v10);
  }
}

uint64_t sub_1C98E9CBC(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E8294AF8;
  free(*(void **)(a1 + 32));
  free(*(void **)(a1 + 8));
  return a1;
}

void sub_1C98E9CF8(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E8294AF8;
  free(*(void **)(a1 + 32));
  free(*(void **)(a1 + 8));
  JUMPOUT(0x1CAA44AFCLL);
}

uint64_t sub_1C98E9D44(uint64_t a1)
{
  void *v2;
  void *v3;

  *(_QWORD *)a1 = &off_1E8294B18;
  free(*(void **)(a1 + 184));
  free(*(void **)(a1 + 160));
  free(*(void **)(a1 + 136));
  free(*(void **)(a1 + 112));
  if (*(_BYTE *)(a1 + 104))
    free(*(void **)(a1 + 80));
  free(*(void **)(a1 + 56));
  v2 = *(void **)(a1 + 32);
  if (v2)
  {
    *(_QWORD *)(a1 + 40) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 8);
  if (v3)
  {
    *(_QWORD *)(a1 + 16) = v3;
    operator delete(v3);
  }
  return a1;
}

void sub_1C98E9DC8(uint64_t a1)
{
  sub_1C98E9D44(a1);
  JUMPOUT(0x1CAA44AFCLL);
}

uint64_t sub_1C98E9DEC(uint64_t a1)
{
  return a1 + 184;
}

uint64_t sub_1C98E9DF4(uint64_t a1)
{
  return *(unsigned int *)(a1 + 208);
}

uint64_t sub_1C98E9DFC(uint64_t a1)
{
  return a1 + 136;
}

_QWORD *sub_1C98E9E04(_QWORD *a1)
{
  std::mutex *v2;
  std::mutex *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  *a1 = &off_1E8294BA8;
  v2 = (std::mutex *)a1[6];
  a1[6] = 0;
  if (v2)
  {
    sub_1C98E9EB0(v2);
    MEMORY[0x1CAA44AFC]();
  }
  v3 = (std::mutex *)a1[5];
  a1[5] = 0;
  if (v3)
  {
    sub_1C98E9EB0(v3);
    MEMORY[0x1CAA44AFC]();
  }
  v4 = (std::__shared_weak_count *)a1[4];
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  return a1;
}

void sub_1C98E9EB0(std::mutex *this)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  void *v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  void *v9;
  uint64_t sig;

  v2 = *(_QWORD *)&this[1].__m_.__opaque[8];
  *(_QWORD *)&this[1].__m_.__opaque[8] = 0;
  if (v2)
  {
    v3 = *(_QWORD **)(v2 + 16);
    if (v3)
    {
      do
      {
        v4 = (_QWORD *)*v3;
        operator delete(v3);
        v3 = v4;
      }
      while (v4);
    }
    v5 = *(void **)v2;
    *(_QWORD *)v2 = 0;
    if (v5)
      operator delete(v5);
    MEMORY[0x1CAA44AFC](v2, 0x10A0C408EF24B1CLL);
  }
  v6 = *(_QWORD *)this[1].__m_.__opaque;
  *(_QWORD *)this[1].__m_.__opaque = 0;
  if (v6)
  {
    v7 = *(_QWORD **)(v6 + 16);
    if (v7)
    {
      do
      {
        v8 = (_QWORD *)*v7;
        operator delete(v7);
        v7 = v8;
      }
      while (v8);
    }
    v9 = *(void **)v6;
    *(_QWORD *)v6 = 0;
    if (v9)
      operator delete(v9);
    MEMORY[0x1CAA44AFC](v6, 0x10A0C408EF24B1CLL);
  }
  sig = this[1].__m_.__sig;
  if (sig)
    (*(void (**)(uint64_t))(*(_QWORD *)sig + 8))(sig);
  std::mutex::~mutex(this);
}

void sub_1C98E9F84(uint64_t *a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unsigned __int8 v11;
  NSObject *v12;
  int v13;
  unsigned __int8 v14;
  NSObject *v15;
  _BOOL4 v16;
  int v17;
  unsigned __int8 v18;
  NSObject *v19;
  uint64_t v20;
  std::mutex *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  _QWORD *v28;
  unsigned __int8 v29;
  NSObject *v30;
  uint64_t v31;
  std::mutex *v32;
  uint8_t buf[8];
  uint64_t v34;
  uint64_t *v35;
  uint64_t *v36;
  int *v37;
  uint64_t v38;
  char v39;
  int v40;
  uint64_t v41;

  v41 = a6;
  if (*(_BYTE *)(a3 + 2))
  {
    v11 = atomic_load((unsigned __int8 *)&qword_1ED52ACD0);
    if ((v11 & 1) == 0 && __cxa_guard_acquire(&qword_1ED52ACD0))
    {
      qword_1ED52ACE0 = (uint64_t)os_log_create("com.apple.AppleCVA", "FaceKit");
      __cxa_guard_release(&qword_1ED52ACD0);
    }
    v12 = qword_1ED52ACE0;
    if (os_log_type_enabled((os_log_t)qword_1ED52ACE0, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1C9870000, v12, OS_LOG_TYPE_INFO, "Loading MultiFrame IdentityNet on CPU.", buf, 2u);
    }
    v40 = 0;
  }
  else
  {
    v13 = MGGetBoolAnswer();
    v14 = atomic_load((unsigned __int8 *)&qword_1ED52ACD0);
    if ((v14 & 1) == 0 && __cxa_guard_acquire(&qword_1ED52ACD0))
    {
      qword_1ED52ACE0 = (uint64_t)os_log_create("com.apple.AppleCVA", "FaceKit");
      __cxa_guard_release(&qword_1ED52ACD0);
    }
    v15 = qword_1ED52ACE0;
    v16 = os_log_type_enabled((os_log_t)qword_1ED52ACE0, OS_LOG_TYPE_INFO);
    if (v13)
    {
      if (v16)
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_1C9870000, v15, OS_LOG_TYPE_INFO, "Loading MultiFrame IdentityNet on ANE.", buf, 2u);
      }
      v17 = 2;
    }
    else
    {
      if (v16)
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_1C9870000, v15, OS_LOG_TYPE_INFO, "Loading MultiFrame IdentityNet on GPU.", buf, 2u);
      }
      v17 = 1;
    }
    v40 = v17;
  }
  LOBYTE(v38) = 0;
  v39 = 0;
  if (*(_BYTE *)(a5 + 8))
  {
    v18 = atomic_load((unsigned __int8 *)&qword_1ED52ACD0);
    if ((v18 & 1) == 0 && __cxa_guard_acquire(&qword_1ED52ACD0))
    {
      qword_1ED52ACE0 = (uint64_t)os_log_create("com.apple.AppleCVA", "FaceKit");
      __cxa_guard_release(&qword_1ED52ACD0);
    }
    v19 = qword_1ED52ACE0;
    if (os_log_type_enabled((os_log_t)qword_1ED52ACE0, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_1C9870000, v19, OS_LOG_TYPE_ERROR, "Failed to initialize the surfaces for IdentityFittingMultiFrame.", buf, 2u);
    }
    goto LABEL_19;
  }
  *(_QWORD *)buf = a3;
  v34 = a4;
  v35 = &v38;
  v36 = &v41;
  v37 = &v40;
  sub_1C98EA390((uint64_t *)&v32, (uint64_t)buf, 1, (uint64_t)&off_1E8296A60);
  v21 = v32;
  if (!v32)
  {
LABEL_19:
    *a1 = 0;
    a1[1] = 0;
    goto LABEL_20;
  }
  if (*(_BYTE *)a3)
  {
    v22 = 0;
  }
  else
  {
    sub_1C98EA390(&v31, (uint64_t)buf, 0, (uint64_t)&off_1E8296A80);
    v22 = v31;
    if (!v31)
    {
      *a1 = 0;
      a1[1] = 0;
      sub_1C98E9EB0(v21);
      MEMORY[0x1CAA44AFC]();
      goto LABEL_20;
    }
  }
  v23 = operator new();
  v24 = v23;
  *(_QWORD *)v23 = &off_1E8294BA8;
  *(_BYTE *)(v23 + 8) = *(_BYTE *)a3;
  *(_QWORD *)(v23 + 12) = *(_QWORD *)(a3 + 88);
  v25 = a2[1];
  *(_QWORD *)(v23 + 24) = *a2;
  *(_QWORD *)(v23 + 32) = v25;
  if (v25)
  {
    v26 = (unint64_t *)(v25 + 8);
    do
      v27 = __ldxr(v26);
    while (__stxr(v27 + 1, v26));
  }
  *(_QWORD *)(v23 + 40) = v21;
  *(_QWORD *)(v23 + 48) = v22;
  *a1 = v23;
  v28 = (_QWORD *)operator new();
  *v28 = &off_1E8295F00;
  v28[1] = 0;
  v28[2] = 0;
  v28[3] = v24;
  a1[1] = (uint64_t)v28;
  v29 = atomic_load((unsigned __int8 *)&qword_1ED52ACD0);
  if ((v29 & 1) == 0 && __cxa_guard_acquire(&qword_1ED52ACD0))
  {
    qword_1ED52ACE0 = (uint64_t)os_log_create("com.apple.AppleCVA", "FaceKit");
    __cxa_guard_release(&qword_1ED52ACD0);
  }
  v30 = qword_1ED52ACE0;
  if (os_log_type_enabled((os_log_t)qword_1ED52ACE0, OS_LOG_TYPE_INFO))
  {
    LOWORD(v31) = 0;
    _os_log_impl(&dword_1C9870000, v30, OS_LOG_TYPE_INFO, "MultiFrame IdentityNet created.", (uint8_t *)&v31, 2u);
  }
LABEL_20:
  if (v39)
  {
    v20 = v38;
    v38 = 0;
    if (v20)
      MEMORY[0x1CAA44AFC](v20, 0xC400A2AC0F1);
  }
}

uint64_t *sub_1C98EA390(uint64_t *a1, uint64_t a2, int a3, uint64_t a4)
{
  const char *v5;
  char *v7;
  unsigned __int8 v8;
  NSObject *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 v14;
  NSObject *v15;
  unsigned __int8 v16;
  NSObject *v17;
  unsigned __int8 v18;
  NSObject *v19;
  unsigned __int8 v20;
  NSObject *v21;
  void **v22;
  _QWORD *v23;
  _QWORD *v24;
  void *v25;
  void **v26;
  _QWORD *v27;
  _QWORD *v28;
  void *v29;
  uint64_t *result;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint8_t buf[4];
  const char *v35;
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  if (a3)
    v5 = "RGB";
  else
    v5 = "RGBD";
  if (*(_DWORD *)(*(_QWORD *)a2 + 52))
  {
    if (a3)
      v7 = "id_fitting_multiframe_rgb_only";
    else
      v7 = "id_fitting_multiframe_rgbd";
    sub_1C98CD884((uint64_t *)&v33, *(_QWORD *)(a2 + 8), **(_DWORD **)(a2 + 32), v7, (const char *)&unk_1C992D72B);
    if (v33)
    {
      v8 = atomic_load((unsigned __int8 *)&qword_1ED52ACD0);
      if ((v8 & 1) == 0 && __cxa_guard_acquire(&qword_1ED52ACD0))
      {
        qword_1ED52ACE0 = (uint64_t)os_log_create("com.apple.AppleCVA", "FaceKit");
        __cxa_guard_release(&qword_1ED52ACD0);
      }
      v9 = qword_1ED52ACE0;
      if (os_log_type_enabled((os_log_t)qword_1ED52ACE0, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315138;
        v35 = v5;
        _os_log_impl(&dword_1C9870000, v9, OS_LOG_TYPE_INFO, "%s regressor created.", buf, 0xCu);
      }
      v10 = v33;
      sub_1C9906638(&v32, v33 + 1, a4, -1);
      v11 = v32;
      if (v32)
      {
        sub_1C9906638(&v31, v10 + 4, (uint64_t)&off_1E8296A70, -1);
        v12 = v31;
        if (v31)
        {
          v13 = operator new();
          v32 = 0;
          v33 = 0;
          v31 = 0;
          *(_QWORD *)v13 = 850045863;
          *(_OWORD *)(v13 + 8) = 0u;
          *(_OWORD *)(v13 + 24) = 0u;
          *(_OWORD *)(v13 + 40) = 0u;
          *(_QWORD *)(v13 + 56) = 0;
          *(_QWORD *)(v13 + 64) = v10;
          *(_QWORD *)(v13 + 72) = v11;
          *(_QWORD *)(v13 + 80) = v12;
        }
        else
        {
          v20 = atomic_load((unsigned __int8 *)&qword_1ED52ACD0);
          if ((v20 & 1) == 0 && __cxa_guard_acquire(&qword_1ED52ACD0))
          {
            qword_1ED52ACE0 = (uint64_t)os_log_create("com.apple.AppleCVA", "FaceKit");
            __cxa_guard_release(&qword_1ED52ACD0);
          }
          v21 = qword_1ED52ACE0;
          if (os_log_type_enabled((os_log_t)qword_1ED52ACE0, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315138;
            v35 = v5;
            _os_log_error_impl(&dword_1C9870000, v21, OS_LOG_TYPE_ERROR, "Failed to map output node names to the %s regressor's output nodes.", buf, 0xCu);
          }
          v13 = 0;
        }
        *a1 = v13;
        v22 = (void **)v31;
        if (v31)
        {
          v23 = *(_QWORD **)(v31 + 16);
          if (v23)
          {
            do
            {
              v24 = (_QWORD *)*v23;
              operator delete(v23);
              v23 = v24;
            }
            while (v24);
          }
          v25 = *v22;
          *v22 = 0;
          if (v25)
            operator delete(v25);
          MEMORY[0x1CAA44AFC](v22, 0x10A0C408EF24B1CLL);
        }
      }
      else
      {
        v18 = atomic_load((unsigned __int8 *)&qword_1ED52ACD0);
        if ((v18 & 1) == 0 && __cxa_guard_acquire(&qword_1ED52ACD0))
        {
          qword_1ED52ACE0 = (uint64_t)os_log_create("com.apple.AppleCVA", "FaceKit");
          __cxa_guard_release(&qword_1ED52ACD0);
        }
        v19 = qword_1ED52ACE0;
        if (os_log_type_enabled((os_log_t)qword_1ED52ACE0, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315138;
          v35 = v5;
          _os_log_error_impl(&dword_1C9870000, v19, OS_LOG_TYPE_ERROR, "Failed to map input node names to the %s regressor's input nodes.", buf, 0xCu);
        }
        *a1 = 0;
      }
      v26 = (void **)v32;
      if (v32)
      {
        v27 = *(_QWORD **)(v32 + 16);
        if (v27)
        {
          do
          {
            v28 = (_QWORD *)*v27;
            operator delete(v27);
            v27 = v28;
          }
          while (v28);
        }
        v29 = *v26;
        *v26 = 0;
        if (v29)
          operator delete(v29);
        MEMORY[0x1CAA44AFC](v26, 0x10A0C408EF24B1CLL);
      }
      goto LABEL_43;
    }
  }
  else
  {
    v14 = atomic_load((unsigned __int8 *)&qword_1ED52ACD0);
    if ((v14 & 1) == 0 && __cxa_guard_acquire(&qword_1ED52ACD0))
    {
      qword_1ED52ACE0 = (uint64_t)os_log_create("com.apple.AppleCVA", "FaceKit");
      __cxa_guard_release(&qword_1ED52ACD0);
    }
    v15 = qword_1ED52ACE0;
    if (os_log_type_enabled((os_log_t)qword_1ED52ACE0, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_1C9870000, v15, OS_LOG_TYPE_ERROR, "Invalid depth source", buf, 2u);
    }
    v33 = 0;
  }
  v16 = atomic_load((unsigned __int8 *)&qword_1ED52ACD0);
  if ((v16 & 1) == 0 && __cxa_guard_acquire(&qword_1ED52ACD0))
  {
    qword_1ED52ACE0 = (uint64_t)os_log_create("com.apple.AppleCVA", "FaceKit");
    __cxa_guard_release(&qword_1ED52ACD0);
  }
  v17 = qword_1ED52ACE0;
  if (os_log_type_enabled((os_log_t)qword_1ED52ACE0, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136315138;
    v35 = v5;
    _os_log_error_impl(&dword_1C9870000, v17, OS_LOG_TYPE_ERROR, "Failed to initialize %s regressor for IdentityFittingMultiFrame.", buf, 0xCu);
  }
  *a1 = 0;
LABEL_43:
  result = v33;
  if (v33)
    return (uint64_t *)(*(uint64_t (**)(uint64_t *))(*v33 + 8))(v33);
  return result;
}

void sub_1C98EA888(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1CAA44AFCLL);
}

uint64_t sub_1C98EA8AC(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_1C98EA8C8(void **a1, _QWORD *a2)
{
  char *v4;
  char *v5;
  _BYTE *v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  BOOL v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  __int128 *v27;
  _OWORD *v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;

  v4 = (char *)a1[1];
  if (v4 != *a1)
  {
    v5 = (char *)a1[1];
    goto LABEL_25;
  }
  v7 = a1[2];
  v6 = a1[3];
  if (v7 >= v6)
  {
    v13 = v6 - v4;
    v12 = v13 == 0;
    v14 = v13 >> 2;
    if (v12)
      v14 = 1;
    if (v14 >> 61)
      sub_1C9899D30();
    v15 = (v14 + 3) >> 2;
    v16 = 8 * v14;
    v17 = (char *)operator new(8 * v14);
    v5 = &v17[8 * v15];
    v18 = &v17[v16];
    v19 = v5;
    v20 = v7 - v4;
    if (v7 != v4)
    {
      v19 = &v5[v20 & 0xFFFFFFFFFFFFFFF8];
      v21 = v20 - 8;
      v22 = &v17[8 * v15];
      v23 = v4;
      if (v21 > 0x37)
      {
        v24 = &v17[8 * v15];
        v22 = v24;
        v23 = v4;
        if ((unint64_t)(v24 - v4) >= 0x20)
        {
          v25 = (v21 >> 3) + 1;
          v26 = 8 * (v25 & 0x3FFFFFFFFFFFFFFCLL);
          v22 = &v5[v26];
          v27 = (__int128 *)(v4 + 16);
          v28 = v24 + 16;
          v29 = v25 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v30 = *v27;
            *(v28 - 1) = *(v27 - 1);
            *v28 = v30;
            v27 += 2;
            v28 += 2;
            v29 -= 4;
          }
          while (v29);
          if (v25 == (v25 & 0x3FFFFFFFFFFFFFFCLL))
          {
            *a1 = v17;
            a1[1] = v5;
            a1[2] = v19;
            a1[3] = v18;
            goto LABEL_24;
          }
          v23 = &v4[v26];
        }
      }
      do
      {
        v31 = *(_QWORD *)v23;
        v23 += 8;
        *(_QWORD *)v22 = v31;
        v22 += 8;
      }
      while (v22 != v19);
    }
    *a1 = v17;
    a1[1] = v5;
    a1[2] = v19;
    a1[3] = v18;
    if (!v4)
      goto LABEL_25;
LABEL_24:
    operator delete(v4);
    v5 = (char *)a1[1];
    goto LABEL_25;
  }
  v8 = (v6 - v7) >> 3;
  if (v8 >= -1)
    v9 = v8 + 1;
  else
    v9 = v8 + 2;
  v10 = v9 >> 1;
  v11 = &v7[8 * (v9 >> 1)];
  v5 = &v11[-(v7 - v4)];
  if (v7 != v4)
  {
    memmove(&v11[-(v7 - v4)], v4, v7 - v4);
    v4 = (char *)a1[2];
  }
  a1[1] = v5;
  a1[2] = &v4[8 * v10];
LABEL_25:
  *((_QWORD *)v5 - 1) = *a2;
  a1[1] = (char *)a1[1] - 8;
}

void sub_1C98EAA6C(char **a1, _QWORD *a2)
{
  char *v4;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  char *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  BOOL v19;
  int64_t v20;
  unint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  __int128 *v26;
  _OWORD *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;

  v4 = a1[2];
  if (v4 != a1[3])
    goto LABEL_23;
  v6 = *a1;
  v5 = a1[1];
  if (v5 > *a1)
  {
    v7 = (v5 - *a1) >> 3;
    if (v7 >= -1)
      v8 = v7 + 1;
    else
      v8 = v7 + 2;
    v9 = v8 >> 1;
    v10 = -v9;
    v11 = &v5[-8 * v9];
    v12 = v4 - v5;
    if (v4 != v5)
    {
      memmove(&v5[-8 * v9], a1[1], v4 - v5);
      v4 = a1[1];
    }
    v13 = &v4[8 * v10];
    v4 = &v11[v12];
    a1[1] = v13;
    a1[2] = &v11[v12];
    goto LABEL_23;
  }
  v14 = (v4 - v6) >> 2;
  if (v4 == v6)
    v14 = 1;
  if (v14 >> 61)
    sub_1C9899D30();
  v15 = v14 >> 2;
  v16 = 8 * v14;
  v17 = (char *)operator new(8 * v14);
  v18 = &v17[8 * v15];
  v20 = v4 - v5;
  v19 = v4 == v5;
  v4 = v18;
  if (!v19)
  {
    v4 = &v18[v20 & 0xFFFFFFFFFFFFFFF8];
    v21 = v20 - 8;
    if ((unint64_t)(v20 - 8) < 0x38)
    {
      v22 = &v17[8 * v15];
      goto LABEL_20;
    }
    v23 = &v17[8 * v15];
    v22 = v23;
    if ((unint64_t)(v23 - v5) < 0x20)
    {
      do
      {
LABEL_20:
        v30 = *(_QWORD *)v5;
        v5 += 8;
        *(_QWORD *)v22 = v30;
        v22 += 8;
      }
      while (v22 != v4);
      goto LABEL_21;
    }
    v24 = (v21 >> 3) + 1;
    v25 = 8 * (v24 & 0x3FFFFFFFFFFFFFFCLL);
    v22 = &v18[v25];
    v26 = (__int128 *)(v5 + 16);
    v27 = v23 + 16;
    v28 = v24 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v29 = *v26;
      *(v27 - 1) = *(v26 - 1);
      *v27 = v29;
      v26 += 2;
      v27 += 2;
      v28 -= 4;
    }
    while (v28);
    if (v24 != (v24 & 0x3FFFFFFFFFFFFFFCLL))
    {
      v5 += v25;
      goto LABEL_20;
    }
  }
LABEL_21:
  *a1 = v17;
  a1[1] = v18;
  a1[2] = v4;
  a1[3] = &v17[v16];
  if (v6)
  {
    operator delete(v6);
    v4 = a1[2];
  }
LABEL_23:
  *(_QWORD *)v4 = *a2;
  a1[2] += 8;
}

void sub_1C98EABF8()
{
  JUMPOUT(0x1CAA44AFCLL);
}

void sub_1C98EAC10(uint64_t a1, uint64_t ***a2)
{
  uint64_t **v2;
  uint64_t **v3;
  uint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  int v9;
  unint64_t v10;
  uint64_t v11;
  const unsigned __int8 **v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t v16;

  v2 = *a2;
  v3 = a2[1];
  if (*a2 != v3)
  {
    while (1)
    {
      v4 = **v2;
      v5 = *(_QWORD *)(v4 + 24);
      v6 = *(std::__shared_weak_count **)(v4 + 32);
      if (!v6)
        break;
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldxr(p_shared_owners);
      while (__stxr(v8 + 1, p_shared_owners));
      v9 = *(unsigned __int8 *)(*(_QWORD *)v5 + 16);
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (v10)
      {
        if (v9)
          goto LABEL_4;
LABEL_14:
        v11 = **v2;
        v12 = *(const unsigned __int8 ***)(v11 + 24);
        v13 = *(std::__shared_weak_count **)(v11 + 32);
        if (v13)
        {
          v14 = (unint64_t *)&v13->__shared_owners_;
          do
            v15 = __ldxr(v14);
          while (__stxr(v15 + 1, v14));
          sub_1C98A84C8(v12);
          do
            v16 = __ldaxr(v14);
          while (__stlxr(v16 - 1, v14));
          if (!v16)
          {
            ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
            std::__shared_weak_count::__release_weak(v13);
          }
          goto LABEL_4;
        }
        sub_1C98A84C8(v12);
        v2 += 2;
        if (v2 == v3)
          return;
      }
      else
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
        if (!v9)
          goto LABEL_14;
LABEL_4:
        v2 += 2;
        if (v2 == v3)
          return;
      }
    }
    if (!*(_BYTE *)(*(_QWORD *)v5 + 16))
      goto LABEL_14;
    goto LABEL_4;
  }
}

uint64_t sub_1C98EAD24()
{
  return 0;
}

void sub_1C98EAD2C(char *a1@<X8>)
{
  a1[23] = 8;
  strcpy(a1, "Disabled");
}

uint64_t sub_1C98EAD50(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  void *v8;
  void **v9;
  void **v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  void **v18;
  void **v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  void **v27;
  void **v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;

  sub_1C98EB190(a1 + 536);
  sub_1C98EB190(a1 + 480);
  sub_1C98EB254(a1 + 424);
  v2 = *(std::__shared_weak_count **)(a1 + 408);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = *(std::__shared_weak_count **)(a1 + 392);
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = *(std::__shared_weak_count **)(a1 + 392);
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  free(*(void **)(a1 + 360));
  free(*(void **)(a1 + 288));
  free(*(void **)(a1 + 264));
  sub_1C98EB254(a1 + 216);
  v8 = *(void **)(a1 + 184);
  if (v8)
  {
    *(_QWORD *)(a1 + 192) = v8;
    operator delete(v8);
  }
  v9 = *(void ***)(a1 + 144);
  v10 = *(void ***)(a1 + 152);
  *(_QWORD *)(a1 + 176) = 0;
  v11 = (char *)v10 - (char *)v9;
  if ((unint64_t)((char *)v10 - (char *)v9) >= 0x11)
  {
    do
    {
      operator delete(*v9);
      v10 = *(void ***)(a1 + 152);
      v9 = (void **)(*(_QWORD *)(a1 + 144) + 8);
      *(_QWORD *)(a1 + 144) = v9;
      v11 = (char *)v10 - (char *)v9;
    }
    while ((unint64_t)((char *)v10 - (char *)v9) > 0x10);
  }
  v12 = v11 >> 3;
  if (v12 == 1)
  {
    v13 = 56;
    goto LABEL_19;
  }
  if (v12 == 2)
  {
    v13 = 113;
LABEL_19:
    *(_QWORD *)(a1 + 168) = v13;
  }
  if (v9 != v10)
  {
    do
    {
      v14 = *v9++;
      operator delete(v14);
    }
    while (v9 != v10);
    v16 = *(_QWORD *)(a1 + 144);
    v15 = *(_QWORD *)(a1 + 152);
    if (v15 != v16)
      *(_QWORD *)(a1 + 152) = v15 + ((v16 - v15 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  v17 = *(void **)(a1 + 136);
  if (v17)
    operator delete(v17);
  v18 = *(void ***)(a1 + 72);
  v19 = *(void ***)(a1 + 80);
  *(_QWORD *)(a1 + 104) = 0;
  v20 = (char *)v19 - (char *)v18;
  if ((unint64_t)((char *)v19 - (char *)v18) >= 0x11)
  {
    do
    {
      operator delete(*v18);
      v19 = *(void ***)(a1 + 80);
      v18 = (void **)(*(_QWORD *)(a1 + 72) + 8);
      *(_QWORD *)(a1 + 72) = v18;
      v20 = (char *)v19 - (char *)v18;
    }
    while ((unint64_t)((char *)v19 - (char *)v18) > 0x10);
  }
  v21 = v20 >> 3;
  if (v21 == 1)
  {
    v22 = 512;
    goto LABEL_32;
  }
  if (v21 == 2)
  {
    v22 = 1024;
LABEL_32:
    *(_QWORD *)(a1 + 96) = v22;
  }
  if (v18 != v19)
  {
    do
    {
      v23 = *v18++;
      operator delete(v23);
    }
    while (v18 != v19);
    v25 = *(_QWORD *)(a1 + 72);
    v24 = *(_QWORD *)(a1 + 80);
    if (v24 != v25)
      *(_QWORD *)(a1 + 80) = v24 + ((v25 - v24 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  v26 = *(void **)(a1 + 64);
  if (v26)
    operator delete(v26);
  v27 = *(void ***)(a1 + 16);
  v28 = *(void ***)(a1 + 24);
  *(_QWORD *)(a1 + 48) = 0;
  v29 = (char *)v28 - (char *)v27;
  if ((unint64_t)((char *)v28 - (char *)v27) >= 0x11)
  {
    do
    {
      operator delete(*v27);
      v28 = *(void ***)(a1 + 24);
      v27 = (void **)(*(_QWORD *)(a1 + 16) + 8);
      *(_QWORD *)(a1 + 16) = v27;
      v29 = (char *)v28 - (char *)v27;
    }
    while ((unint64_t)((char *)v28 - (char *)v27) > 0x10);
  }
  v30 = v29 >> 3;
  if (v30 == 1)
  {
    v31 = 128;
    goto LABEL_45;
  }
  if (v30 == 2)
  {
    v31 = 256;
LABEL_45:
    *(_QWORD *)(a1 + 40) = v31;
  }
  if (v27 != v28)
  {
    do
    {
      v32 = *v27++;
      operator delete(v32);
    }
    while (v27 != v28);
    v34 = *(_QWORD *)(a1 + 16);
    v33 = *(_QWORD *)(a1 + 24);
    if (v33 != v34)
      *(_QWORD *)(a1 + 24) = v33 + ((v34 - v33 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  v35 = *(void **)(a1 + 8);
  if (v35)
    operator delete(v35);
  return a1;
}

void sub_1C98EB010(_QWORD *a1)
{
  void **v2;
  void **v3;
  _QWORD *v4;
  unint64_t v5;
  void **v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v2 = (void **)a1[1];
  v3 = (void **)a1[2];
  if (v3 == v2)
  {
    v4 = a1 + 5;
    v3 = (void **)a1[1];
    goto LABEL_19;
  }
  v4 = a1 + 5;
  v5 = a1[4];
  v6 = &v2[v5 >> 7];
  v7 = (uint64_t)*v6 + 32 * (v5 & 0x7F);
  v8 = *(uint64_t *)((char *)v2 + (((a1[5] + v5) >> 4) & 0xFFFFFFFFFFFFFF8)) + 32 * ((a1[5] + v5) & 0x7F);
  if (v7 != v8)
  {
    while (1)
    {
      v9 = *(std::__shared_weak_count **)(v7 + 24);
      if (!v9)
        goto LABEL_9;
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
        v12 = *(std::__shared_weak_count **)(v7 + 8);
        if (v12)
        {
LABEL_10:
          v13 = (unint64_t *)&v12->__shared_owners_;
          do
            v14 = __ldaxr(v13);
          while (__stlxr(v14 - 1, v13));
          if (!v14)
          {
            ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
            std::__shared_weak_count::__release_weak(v12);
          }
        }
      }
      else
      {
LABEL_9:
        v12 = *(std::__shared_weak_count **)(v7 + 8);
        if (v12)
          goto LABEL_10;
      }
      v7 += 32;
      if (v7 - (_QWORD)*v6 == 4096)
      {
        v15 = (uint64_t)v6[1];
        ++v6;
        v7 = v15;
      }
      if (v7 == v8)
      {
        v2 = (void **)a1[1];
        v3 = (void **)a1[2];
        break;
      }
    }
  }
LABEL_19:
  *v4 = 0;
  v16 = (char *)v3 - (char *)v2;
  if (v16 >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v17 = a1[2];
      v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      v16 = v17 - (_QWORD)v2;
    }
    while (v16 > 0x10);
  }
  if (v16 >> 3 == 1)
  {
    v18 = 64;
  }
  else
  {
    if (v16 >> 3 != 2)
      return;
    v18 = 128;
  }
  a1[4] = v18;
}

uint64_t sub_1C98EB190(uint64_t a1)
{
  void **v2;
  void **v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *(void ***)(a1 + 8);
  v3 = *(void ***)(a1 + 16);
  *(_QWORD *)(a1 + 40) = 0;
  v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = *(void ***)(a1 + 16);
      v2 = (void **)(*(_QWORD *)(a1 + 8) + 8);
      *(_QWORD *)(a1 + 8) = v2;
      v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v5 = v4 >> 3;
  if (v5 == 1)
  {
    v6 = 512;
    goto LABEL_7;
  }
  if (v5 == 2)
  {
    v6 = 1024;
LABEL_7:
    *(_QWORD *)(a1 + 32) = v6;
  }
  if (v2 != v3)
  {
    do
    {
      v7 = *v2++;
      operator delete(v7);
    }
    while (v2 != v3);
    v9 = *(_QWORD *)(a1 + 8);
    v8 = *(_QWORD *)(a1 + 16);
    if (v8 != v9)
      *(_QWORD *)(a1 + 16) = v8 + ((v9 - v8 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_1C98EB254(uint64_t a1)
{
  void **v2;
  void **v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *(void ***)(a1 + 8);
  v3 = *(void ***)(a1 + 16);
  *(_QWORD *)(a1 + 40) = 0;
  v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = *(void ***)(a1 + 16);
      v2 = (void **)(*(_QWORD *)(a1 + 8) + 8);
      *(_QWORD *)(a1 + 8) = v2;
      v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v5 = v4 >> 3;
  if (v5 == 1)
  {
    v6 = 170;
    goto LABEL_7;
  }
  if (v5 == 2)
  {
    v6 = 341;
LABEL_7:
    *(_QWORD *)(a1 + 32) = v6;
  }
  if (v2 != v3)
  {
    do
    {
      v7 = *v2++;
      operator delete(v7);
    }
    while (v2 != v3);
    v9 = *(_QWORD *)(a1 + 8);
    v8 = *(_QWORD *)(a1 + 16);
    if (v8 != v9)
      *(_QWORD *)(a1 + 16) = v8 + ((v9 - v8 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_1C98EB318(uint64_t *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;

  ++dword_1EF921310;
  v2 = *a1;
  *(_DWORD *)v2 = dword_1EF921310;
  v3 = *(std::__shared_weak_count **)(v2 + 16);
  *(_QWORD *)(v2 + 8) = 0;
  *(_QWORD *)(v2 + 16) = 0;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  v6 = *a1;
  v7 = *(std::__shared_weak_count **)(*a1 + 32);
  *(_QWORD *)(v6 + 24) = 0;
  *(_QWORD *)(v6 + 32) = 0;
  if (v7)
  {
    v8 = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  v10 = *a1;
  *(_QWORD *)(v10 + 40) = 0;
  *(_QWORD *)(v10 + 48) = 0;
  *(_BYTE *)(v10 + 64) = 0;
  *(_QWORD *)(v10 + 56) = 0;
  *(_BYTE *)(v10 + 68) = 0;
  *(_BYTE *)(v10 + 72) = 0;
  *(_QWORD *)(v10 + 80) = 0;
  sub_1C98EB010((_QWORD *)(*a1 + 88));
  result = *(_QWORD *)(*a1 + 152);
  *(_QWORD *)(*a1 + 152) = 0;
  if (result)
  {
    v12 = sub_1C98EAD50(result);
    result = MEMORY[0x1CAA44AFC](v12, 0x10E0C4016A603E8);
  }
  if (*(_BYTE *)(*a1 + 164))
    *(_BYTE *)(*a1 + 164) = 0;
  return result;
}

void sub_1C98EB428(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E8295800;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1C98EB438(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E8295800;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1CAA44AFCLL);
}

void sub_1C98EB468(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  void *v11;

  v2 = (std::__shared_weak_count *)a1[14];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[12];
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[12];
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  v8 = (std::__shared_weak_count *)a1[10];
  if (!v8)
    goto LABEL_15;
  v9 = (unint64_t *)&v8->__shared_owners_;
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 - 1, v9));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
    v11 = (void *)a1[8];
    if (!v11)
      return;
  }
  else
  {
LABEL_15:
    v11 = (void *)a1[8];
    if (!v11)
      return;
  }
  free(v11);
  a1[8] = 0;
}

void sub_1C98EB558(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E8295918;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1C98EB568(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E8295918;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1CAA44AFCLL);
}

void sub_1C98EB598(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  void *v17;
  uint64_t v18;

  std::mutex::~mutex((std::mutex *)(a1 + 1088));
  free(*(void **)(a1 + 1064));
  v2 = *(std::__shared_weak_count **)(a1 + 1056);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  std::mutex::~mutex((std::mutex *)(a1 + 976));
  std::mutex::~mutex((std::mutex *)(a1 + 912));
  free(*(void **)(a1 + 824));
  free(*(void **)(a1 + 800));
  free(*(void **)(a1 + 776));
  v5 = *(std::__shared_weak_count **)(a1 + 768);
  if (v5)
  {
    v6 = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  free(*(void **)(a1 + 680));
  free(*(void **)(a1 + 656));
  free(*(void **)(a1 + 632));
  v8 = *(std::__shared_weak_count **)(a1 + 624);
  if (v8)
  {
    v9 = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  free(*(void **)(a1 + 536));
  free(*(void **)(a1 + 512));
  free(*(void **)(a1 + 488));
  v11 = *(std::__shared_weak_count **)(a1 + 480);
  if (v11)
  {
    v12 = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  free(*(void **)(a1 + 392));
  free(*(void **)(a1 + 368));
  free(*(void **)(a1 + 344));
  v14 = *(std::__shared_weak_count **)(a1 + 336);
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  std::mutex::~mutex((std::mutex *)(a1 + 264));
  free(*(void **)(a1 + 240));
  free(*(void **)(a1 + 152));
  v17 = *(void **)(a1 + 136);
  if (v17)
  {
    free(v17);
    *(_QWORD *)(a1 + 136) = 0;
  }
  v18 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 96) = 0;
  if (v18)
    (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  std::mutex::~mutex((std::mutex *)(a1 + 32));
}

void sub_1C98EB794(float32x2_t *a1, uint64_t a2, float32x2_t *a3)
{
  float32x2_t *v4;
  unint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  unint64_t v13;
  char *v14;
  void *v15;
  char *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  char *v22;
  void *v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  char *v32;
  unint64_t v33;
  char *v34;
  unint64_t v35;
  char *v36;
  char *v37;
  int64_t v38;
  unint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  __int128 *v43;
  char *v44;
  uint64_t v45;
  __int128 v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  float32x2_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  float v55;
  float v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  float32x2_t v61;
  float v62;
  float v63;
  float v64;
  int v65;
  uint64_t v66;
  float v67;
  float32x2_t *v68;
  float32x2_t v69;
  float v70;
  uint64_t v71;
  uint64_t v72;
  float32x2_t *v73;
  int v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  float32x2_t *v79;
  uint64_t v80;
  void *v81;

  v4 = a1;
  if (*(int *)a2 <= 1)
  {
    *a1 = *a3;
    a1[1].i32[0] = a3[1].i32[0];
    return;
  }
  v6 = *(_QWORD *)(a2 + 40);
  if (!v6)
  {
    v7 = *(uint64_t **)(a2 + 16);
    v8 = *(uint64_t **)(a2 + 24);
    v9 = v8 - v7;
    v10 = 341 * v9 - 1;
    if (v8 == v7)
      v10 = 0;
    if ((unint64_t)(v10 - *(_QWORD *)(a2 + 48)) >= 0x155)
    {
      *(_QWORD *)(a2 + 40) = 341;
      v81 = (void *)*(v8 - 1);
      *(_QWORD *)(a2 + 24) = v8 - 1;
      sub_1C98EA8C8((void **)(a2 + 8), &v81);
LABEL_55:
      v6 = *(_QWORD *)(a2 + 40);
      goto LABEL_56;
    }
    v11 = *(char **)(a2 + 32);
    v12 = *(char **)(a2 + 8);
    if (v9 < (v11 - v12) >> 3)
    {
      if (v7 == (uint64_t *)v12)
      {
        v81 = operator new(0xFFCuLL);
        sub_1C98EAA6C((char **)(a2 + 8), &v81);
        v17 = *(_QWORD *)(a2 + 24);
        v81 = *(void **)(v17 - 8);
        *(_QWORD *)(a2 + 24) = v17 - 8;
      }
      else
      {
        v81 = operator new(0xFFCuLL);
      }
      sub_1C98EA8C8((void **)(a2 + 8), &v81);
      if (*(_QWORD *)(a2 + 24) - *(_QWORD *)(a2 + 16) == 8)
        *(_QWORD *)(a2 + 40) = 170;
      else
        *(_QWORD *)(a2 + 40) += 341;
      goto LABEL_55;
    }
    if (v11 == v12)
      v13 = 1;
    else
      v13 = (v11 - v12) >> 2;
    if (v13 >> 61)
LABEL_81:
      sub_1C9899D30();
    v14 = (char *)operator new(8 * v13);
    v15 = operator new(0xFFCuLL);
    if (v13)
    {
      v16 = &v14[8 * v13];
    }
    else
    {
      v18 = (char *)operator new(8uLL);
      v16 = v18 + 8;
      operator delete(v14);
      v7 = *(uint64_t **)(a2 + 16);
      v8 = *(uint64_t **)(a2 + 24);
      v14 = v18;
    }
    v79 = v4;
    *(_QWORD *)v14 = v15;
    v19 = v14 + 8;
    v20 = v14;
    if (v7 == v8)
    {
      v21 = v14;
      v22 = v14 + 8;
LABEL_24:
      v23 = *(void **)(a2 + 8);
      *(_QWORD *)(a2 + 8) = v20;
      *(_QWORD *)(a2 + 16) = v21;
      *(_QWORD *)(a2 + 24) = v22;
      *(_QWORD *)(a2 + 32) = v16;
      if (v22 - v21 == 8)
        v24 = 170;
      else
        v24 = *(_QWORD *)(a2 + 40) + 341;
      v4 = v79;
      *(_QWORD *)(a2 + 40) = v24;
      if (v23)
        operator delete(v23);
      goto LABEL_55;
    }
    while (1)
    {
      if (v19 == v16)
      {
        if (v14 <= v20)
        {
          v33 = (v19 - v20) >> 2;
          if (v19 == v20)
            v33 = 1;
          if (v33 >> 61)
            goto LABEL_81;
          v34 = v20;
          v35 = v33 >> 2;
          v80 = 8 * v33;
          v36 = (char *)operator new(8 * v33);
          v37 = v36;
          v21 = &v36[8 * v35];
          v25 = v21;
          v38 = v19 - v14;
          if (v19 != v14)
          {
            v25 = &v21[v38 & 0xFFFFFFFFFFFFFFF8];
            v39 = v38 - 8;
            if (v39 >= 0x38)
            {
              if ((unint64_t)(&v36[8 * v35] - v14) < 0x20)
              {
                v40 = &v36[8 * v35];
                goto LABEL_48;
              }
              v41 = (v39 >> 3) + 1;
              v42 = 8 * (v41 & 0x3FFFFFFFFFFFFFFCLL);
              v40 = &v21[v42];
              v43 = (__int128 *)(v14 + 16);
              v44 = &v36[8 * v35 + 16];
              v45 = v41 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v46 = *v43;
                *((_OWORD *)v44 - 1) = *(v43 - 1);
                *(_OWORD *)v44 = v46;
                v43 += 2;
                v44 += 32;
                v45 -= 4;
              }
              while (v45);
              if (v41 != (v41 & 0x3FFFFFFFFFFFFFFCLL))
              {
                v14 += v42;
                goto LABEL_48;
              }
            }
            else
            {
              v40 = &v36[8 * v35];
              do
              {
LABEL_48:
                v47 = *(_QWORD *)v14;
                v14 += 8;
                *(_QWORD *)v40 = v47;
                v40 += 8;
              }
              while (v40 != v25);
            }
          }
          v19 = &v36[v80];
          if (v34)
            operator delete(v34);
          v20 = v37;
          goto LABEL_27;
        }
        v27 = (v14 - v20) >> 3;
        if (v27 >= -1)
          v28 = v27 + 1;
        else
          v28 = v27 + 2;
        v29 = v28 >> 1;
        v30 = &v14[-8 * (v28 >> 1)];
        v31 = v19;
        if (v19 != v14)
        {
          v32 = v20;
          memmove(v30, v14, v19 - v14);
          v20 = v32;
          v31 = v14;
        }
        v25 = &v30[v19 - v14];
        v21 = &v31[-8 * v29];
      }
      else
      {
        v21 = v14;
        v25 = v19;
        v19 = v16;
      }
LABEL_27:
      v16 = v19;
      v26 = *v7++;
      *(_QWORD *)v25 = v26;
      v22 = v25 + 8;
      v19 = v22;
      v14 = v21;
      if (v7 == *(uint64_t **)(a2 + 24))
        goto LABEL_24;
    }
  }
LABEL_56:
  v48 = *(_QWORD *)(a2 + 16);
  v49 = (_QWORD *)(v48 + 8 * (v6 / 0x155));
  v50 = *v49 + 12 * (v6 % 0x155);
  if (*(_QWORD *)(a2 + 24) == v48)
    v50 = 0;
  if (v50 == *v49)
    v50 = *(v49 - 1) + 4092;
  v51 = *a3;
  *(_DWORD *)(v50 - 4) = a3[1].i32[0];
  *(float32x2_t *)(v50 - 12) = v51;
  v53 = *(_QWORD *)(a2 + 40);
  v52 = *(_QWORD *)(a2 + 48);
  v54 = v52 + 1;
  *(_QWORD *)(a2 + 40) = v53 - 1;
  *(_QWORD *)(a2 + 48) = v52 + 1;
  v55 = 0.0;
  v56 = 0.0;
  if ((int)v52 + 1 >= 1)
  {
    v57 = (v52 + 1);
    v58 = 12 * v53;
    v59 = v53 - 1;
    do
    {
      v60 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 8 * (v59 / 0x155)) + v58 - 4092 * (v59 / 0x155);
      v61 = vsub_f32(*(float32x2_t *)(v60 - 12), *a3);
      v62 = sqrtf(vaddv_f32(vmul_f32(v61, v61))+ (float)((float)(*(float *)(v60 - 4) - a3[1].f32[0]) * (float)(*(float *)(v60 - 4) - a3[1].f32[0])));
      if (v56 < v62)
        v56 = v62;
      v58 += 12;
      ++v59;
      --v57;
    }
    while (v57);
  }
  v63 = expf(-fminf(v56 * *(float *)(a2 + 4), 10.0));
  if ((int)v54 >= 1)
  {
    v64 = 1.0;
    v55 = 0.0;
    v65 = v54;
    do
    {
      v55 = v64 + v55;
      v64 = v63 * v64;
      --v65;
    }
    while (v65);
  }
  v66 = *(_QWORD *)(a2 + 16);
  v67 = 1.0 / v55;
  v68 = (float32x2_t *)(*(_QWORD *)(v66 + 8 * ((v53 - 1) / 0x155)) + 12 * ((v53 - 1) % 0x155));
  v69 = vmul_n_f32(*v68, 1.0 / v55);
  *v4 = v69;
  v70 = (float)(1.0 / v55) * v68[1].f32[0];
  v4[1].f32[0] = v70;
  if ((int)v54 > 1)
  {
    v71 = 12 * v53;
    v72 = v54 - 1;
    do
    {
      v67 = v63 * v67;
      v73 = (float32x2_t *)(*(_QWORD *)(v66 + 8 * (v53 / 0x155)) + v71 - 4092 * (v53 / 0x155));
      v69 = vadd_f32(vmul_n_f32(*v73, v67), v69);
      v70 = (float)(v67 * v73[1].f32[0]) + v70;
      v71 += 12;
      ++v53;
      --v72;
    }
    while (v72);
    *v4 = v69;
    v4[1].f32[0] = v70;
  }
  v74 = *(_DWORD *)a2;
  if (*(_DWORD *)a2 <= (int)v54)
  {
    v75 = *(_QWORD *)(a2 + 24);
    do
    {
      v76 = *(_QWORD *)(a2 + 40);
      if (v75 == *(_QWORD *)(a2 + 16))
        v77 = 0;
      else
        v77 = 341 * ((v75 - *(_QWORD *)(a2 + 16)) >> 3) - 1;
      v78 = v54 - 1;
      *(_QWORD *)(a2 + 48) = v54 - 1;
      if ((unint64_t)(v77 - (v54 + v76) + 1) >= 0x2AA)
      {
        operator delete(*(void **)(v75 - 8));
        v75 = *(_QWORD *)(a2 + 24) - 8;
        *(_QWORD *)(a2 + 24) = v75;
        v78 = *(_QWORD *)(a2 + 48);
        v74 = *(_DWORD *)a2;
      }
      v54 = v78;
    }
    while (v74 <= (int)v78);
  }
}

void sub_1C98EBDB4(float *__sz, uint64_t a2, float *a3)
{
  float *v4;
  unint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  unint64_t v12;
  char *v13;
  void *v14;
  char *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  void *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  unint64_t v31;
  unint64_t v32;
  char *v33;
  char *v34;
  int64_t v35;
  unint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  __int128 *v40;
  char *v41;
  uint64_t v42;
  __int128 v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  float v51;
  float v52;
  uint64_t v53;
  unint64_t v54;
  float v55;
  float v56;
  float v57;
  float v58;
  int v59;
  float v60;
  uint64_t v61;
  float v62;
  uint64_t v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v71;
  void *v72;

  v4 = __sz;
  if (*(int *)a2 <= 1)
  {
    *__sz = *a3;
    return;
  }
  v6 = *(_QWORD *)(a2 + 40);
  if (!v6)
  {
    v7 = *(char **)(a2 + 16);
    v8 = *(char **)(a2 + 24);
    v9 = ((v8 - v7) << 7) - 1;
    if (v8 == v7)
      v9 = 0;
    if ((unint64_t)(v9 - *(_QWORD *)(a2 + 48)) >= 0x400)
    {
      *(_QWORD *)(a2 + 40) = 1024;
      v72 = (void *)*((_QWORD *)v8 - 1);
      *(_QWORD *)(a2 + 24) = v8 - 8;
      sub_1C98EA8C8((void **)(a2 + 8), &v72);
LABEL_55:
      v6 = *(_QWORD *)(a2 + 40);
      goto LABEL_56;
    }
    v10 = *(char **)(a2 + 32);
    v11 = *(char **)(a2 + 8);
    if (v8 - v7 < (unint64_t)(v10 - v11))
    {
      if (v7 == v11)
      {
        v72 = operator new(0x1000uLL);
        sub_1C98EAA6C((char **)(a2 + 8), &v72);
        v16 = *(_QWORD *)(a2 + 24);
        v72 = *(void **)(v16 - 8);
        *(_QWORD *)(a2 + 24) = v16 - 8;
      }
      else
      {
        v72 = operator new(0x1000uLL);
      }
      sub_1C98EA8C8((void **)(a2 + 8), &v72);
      if (*(_QWORD *)(a2 + 24) - *(_QWORD *)(a2 + 16) == 8)
        *(_QWORD *)(a2 + 40) = 512;
      else
        *(_QWORD *)(a2 + 40) += 1024;
      goto LABEL_55;
    }
    if (v10 == v11)
      v12 = 1;
    else
      v12 = (v10 - v11) >> 2;
    if (v12 >> 61)
LABEL_80:
      sub_1C9899D30();
    v13 = (char *)operator new(8 * v12);
    v14 = operator new(0x1000uLL);
    if (v12)
    {
      v15 = &v13[8 * v12];
    }
    else
    {
      v17 = (char *)operator new(8uLL);
      v15 = v17 + 8;
      operator delete(v13);
      v7 = *(char **)(a2 + 16);
      v8 = *(char **)(a2 + 24);
      v13 = v17;
    }
    *(_QWORD *)v13 = v14;
    v18 = v13 + 8;
    v19 = v13;
    if (v7 == v8)
    {
      v20 = v13;
      v21 = v13 + 8;
LABEL_24:
      v22 = *(void **)(a2 + 8);
      *(_QWORD *)(a2 + 8) = v19;
      *(_QWORD *)(a2 + 16) = v20;
      *(_QWORD *)(a2 + 24) = v21;
      *(_QWORD *)(a2 + 32) = v15;
      if (v21 - v20 == 8)
        v23 = 512;
      else
        v23 = *(_QWORD *)(a2 + 40) + 1024;
      v4 = __sz;
      *(_QWORD *)(a2 + 40) = v23;
      if (v22)
        operator delete(v22);
      goto LABEL_55;
    }
    while (1)
    {
      if (v18 == v15)
      {
        if (v13 <= v19)
        {
          v31 = (v18 - v19) >> 2;
          if (v18 == v19)
            v31 = 1;
          if (v31 >> 61)
            goto LABEL_80;
          v32 = v31 >> 2;
          v71 = 8 * v31;
          v33 = (char *)operator new(8 * v31);
          v34 = v33;
          v20 = &v33[8 * v32];
          v24 = v20;
          v35 = v18 - v13;
          if (v18 != v13)
          {
            v24 = &v20[v35 & 0xFFFFFFFFFFFFFFF8];
            v36 = v35 - 8;
            if (v36 >= 0x38)
            {
              if ((unint64_t)(&v33[8 * v32] - v13) < 0x20)
              {
                v37 = &v33[8 * v32];
                goto LABEL_48;
              }
              v38 = (v36 >> 3) + 1;
              v39 = 8 * (v38 & 0x3FFFFFFFFFFFFFFCLL);
              v37 = &v20[v39];
              v40 = (__int128 *)(v13 + 16);
              v41 = &v33[8 * v32 + 16];
              v42 = v38 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v43 = *v40;
                *((_OWORD *)v41 - 1) = *(v40 - 1);
                *(_OWORD *)v41 = v43;
                v40 += 2;
                v41 += 32;
                v42 -= 4;
              }
              while (v42);
              if (v38 != (v38 & 0x3FFFFFFFFFFFFFFCLL))
              {
                v13 += v39;
                goto LABEL_48;
              }
            }
            else
            {
              v37 = &v33[8 * v32];
              do
              {
LABEL_48:
                v44 = *(_QWORD *)v13;
                v13 += 8;
                *(_QWORD *)v37 = v44;
                v37 += 8;
              }
              while (v37 != v24);
            }
          }
          v18 = &v33[v71];
          if (v19)
            operator delete(v19);
          v19 = v34;
          goto LABEL_27;
        }
        v26 = (v13 - v19) >> 3;
        if (v26 >= -1)
          v27 = v26 + 1;
        else
          v27 = v26 + 2;
        v28 = v27 >> 1;
        v29 = &v13[-8 * (v27 >> 1)];
        v30 = v18;
        if (v18 != v13)
        {
          memmove(v29, v13, v18 - v13);
          v30 = v13;
        }
        v24 = &v29[v18 - v13];
        v20 = &v30[-8 * v28];
      }
      else
      {
        v20 = v13;
        v24 = v18;
        v18 = v15;
      }
LABEL_27:
      v15 = v18;
      v25 = *(_QWORD *)v7;
      v7 += 8;
      *(_QWORD *)v24 = v25;
      v21 = v24 + 8;
      v18 = v21;
      v13 = v20;
      if (v7 == *(char **)(a2 + 24))
        goto LABEL_24;
    }
  }
LABEL_56:
  v45 = *(_QWORD *)(a2 + 16);
  v46 = (_QWORD *)(v45 + 8 * (v6 >> 10));
  v47 = *v46 + 4 * (v6 & 0x3FF);
  if (*(_QWORD *)(a2 + 24) == v45)
    v47 = 0;
  if (v47 == *v46)
    v47 = *(v46 - 1) + 4096;
  *(float *)(v47 - 4) = *a3;
  v49 = *(_QWORD *)(a2 + 40);
  v48 = *(_QWORD *)(a2 + 48);
  v50 = v48 + 1;
  *(_QWORD *)(a2 + 40) = v49 - 1;
  *(_QWORD *)(a2 + 48) = v48 + 1;
  v51 = 0.0;
  v52 = 0.0;
  if ((int)v48 + 1 >= 1)
  {
    v53 = (v48 + 1);
    v54 = v49 - 1;
    do
    {
      v55 = *(float *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) + ((v54 >> 7) & 0x1FFFFFFFFFFFFF8)) + 4 * (v54 & 0x3FF)) - *a3;
      v56 = sqrtf(v55 * v55);
      if (v52 < v56)
        v52 = v56;
      ++v54;
      --v53;
    }
    while (v53);
  }
  v57 = expf(-fminf(v52 * *(float *)(a2 + 4), 10.0));
  if ((int)v50 >= 1)
  {
    v58 = 1.0;
    v51 = 0.0;
    v59 = v50;
    do
    {
      v51 = v58 + v51;
      v58 = v57 * v58;
      --v59;
    }
    while (v59);
  }
  v60 = 1.0 / v51;
  v61 = *(_QWORD *)(a2 + 16);
  v62 = (float)(1.0 / v51)
      * *(float *)(*(_QWORD *)(v61 + (((v49 - 1) >> 7) & 0x1FFFFFFFFFFFFF8)) + 4 * ((v49 - 1) & 0x3FF));
  *v4 = v62;
  if ((int)v50 > 1)
  {
    v63 = v50 - 1;
    do
    {
      v60 = v57 * v60;
      v62 = (float)(v60 * *(float *)(*(_QWORD *)(v61 + ((v49 >> 7) & 0x1FFFFFFFFFFFFF8)) + 4 * (v49 & 0x3FF))) + v62;
      ++v49;
      --v63;
    }
    while (v63);
    *v4 = v62;
  }
  v64 = *(_DWORD *)a2;
  if (*(_DWORD *)a2 <= (int)v50)
  {
    v65 = *(_QWORD *)(a2 + 24);
    do
    {
      v66 = *(_QWORD *)(a2 + 16);
      v67 = ((v65 - v66) << 7) - 1;
      v68 = *(_QWORD *)(a2 + 40);
      if (v65 == v66)
        v67 = 0;
      v69 = v50 - 1;
      *(_QWORD *)(a2 + 48) = v50 - 1;
      if ((unint64_t)(v67 - (v50 + v68) + 1) >= 0x800)
      {
        operator delete(*(void **)(v65 - 8));
        v65 = *(_QWORD *)(a2 + 24) - 8;
        *(_QWORD *)(a2 + 24) = v65;
        v69 = *(_QWORD *)(a2 + 48);
        v64 = *(_DWORD *)a2;
      }
      v50 = v69;
    }
    while (v64 <= (int)v69);
  }
}

void sub_1C98EC2E8(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E8295950;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1C98EC2F8(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E8295950;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1CAA44AFCLL);
}

void sub_1C98EC328(void **a1)
{
  free(a1[26]);
  free(a1[23]);
  free(a1[20]);
}

float *sub_1C98EC35C(float *result, float **a2)
{
  float *v2;
  float *v3;
  float *v4;
  uint64_t v5;

  v2 = result;
  v3 = *a2;
  if (*a2 == result || (v4 = a2[1], v4 == result))
  {
    v5 = 0;
    result = (float *)sub_1C98EC35C(&v5);
    *(_QWORD *)v2 = v5;
  }
  else
  {
    *result = (float)((float)((float)(*v3 * *v4) + 0.0) + (float)(v3[2] * v4[1])) + (float)(v3[4] * v4[2]);
    result[1] = (float)((float)((float)(v3[1] * *v4) + 0.0) + (float)(v3[3] * v4[1])) + (float)(v3[5] * v4[2]);
  }
  return result;
}

double sub_1C98EC3FC(uint64_t a1, uint64_t a2)
{
  float *v3;
  uint64_t v4;
  float *v5;
  uint64_t v6;
  float *v7;
  float *v8;
  double result;
  __int128 v10;
  uint64_t v11;

  v3 = *(float **)a2;
  if (*(_QWORD *)a2 == a1
    || (v4 = *(_QWORD *)(a2 + 8), v5 = *(float **)(v4 + 8), &v5[-*(unsigned int *)(v4 + 20)] == (float *)a1))
  {
    v10 = 0uLL;
    v11 = 0;
    sub_1C98EC3FC(&v10);
    result = *(double *)&v10;
    *(_OWORD *)a1 = v10;
    *(_QWORD *)(a1 + 16) = v11;
  }
  else
  {
    v6 = *(unsigned int *)(v4 + 16);
    *(float *)a1 = (float)((float)(*v3 * *v5) + 0.0) + (float)(v3[2] * v5[1]);
    *(float *)(a1 + 4) = (float)((float)(v3[1] * *v5) + 0.0) + (float)(v3[3] * v5[1]);
    v7 = &v5[v6];
    *(float *)(a1 + 8) = (float)((float)(*v3 * *v7) + 0.0) + (float)(v3[2] * v7[1]);
    *(float *)(a1 + 12) = (float)((float)(v3[1] * *v7) + 0.0) + (float)(v3[3] * v7[1]);
    v8 = &v5[(2 * v6)];
    *(float *)(a1 + 16) = (float)((float)(*v3 * *v8) + 0.0) + (float)(v3[2] * v8[1]);
    *(float *)&result = (float)((float)(v3[1] * *v8) + 0.0) + (float)(v3[3] * v8[1]);
    *(_DWORD *)(a1 + 20) = LODWORD(result);
  }
  return result;
}

float *sub_1C98EC50C(float *result, uint64_t a2)
{
  float *v2;
  float *v3;
  uint64_t v4;
  float *v5;
  uint64_t v6;

  v2 = result;
  v3 = *(float **)a2;
  if (*(float **)a2 == result
    || (v4 = *(_QWORD *)(a2 + 8), v5 = *(float **)(v4 + 8), &v5[-*(unsigned int *)(v4 + 20)] == result))
  {
    v6 = 0;
    result = (float *)sub_1C98EC50C(&v6);
    *(_QWORD *)v2 = v6;
  }
  else
  {
    *result = (float)((float)(*v3 * *v5) + 0.0) + (float)(v3[2] * v5[1]);
    result[1] = (float)((float)(v3[1] * *v5) + 0.0) + (float)(v3[3] * v5[1]);
  }
  return result;
}

void sub_1C98EC5A4()
{
  JUMPOUT(0x1CAA44AFCLL);
}

uint64_t sub_1C98EC5B8@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  std::ios_base *v7;
  uint64_t v8;
  size_t v9;
  unint64_t v10;
  const void **v11;
  const void *v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v17;
  uint64_t v18;
  _QWORD v19[3];
  uint64_t v20;
  unint64_t v21;
  void *__p[2];
  __int128 v23;
  int v24;
  uint64_t v25[19];

  v2 = MEMORY[0x1E0DE4FE0];
  v3 = MEMORY[0x1E0DE4FE0] + 64;
  v4 = (uint64_t *)MEMORY[0x1E0DE4F60];
  v5 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v6 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v25[0] = MEMORY[0x1E0DE4FE0] + 64;
  v17 = v5;
  *(uint64_t *)((char *)&v17 + *(_QWORD *)(v5 - 24)) = v6;
  v7 = (std::ios_base *)((char *)&v17 + *(_QWORD *)(v17 - 24));
  std::ios_base::init(v7, &v18);
  v7[1].__vftable = 0;
  v7[1].__fmtflags_ = -1;
  v17 = v2 + 24;
  v25[0] = v3;
  std::streambuf::basic_streambuf();
  v8 = MEMORY[0x1E0DE4FB8];
  v18 = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)__p = 0u;
  v23 = 0u;
  v24 = 16;
  sub_1C98D260C(&v17, (uint64_t)"Vision:", 7);
  std::ostream::operator<<();
  if ((v24 & 0x10) != 0)
  {
    v10 = *((_QWORD *)&v23 + 1);
    if (*((_QWORD *)&v23 + 1) < v21)
    {
      *((_QWORD *)&v23 + 1) = v21;
      v10 = v21;
    }
    v11 = (const void **)&v20;
  }
  else
  {
    if ((v24 & 8) == 0)
    {
      v9 = 0;
      a1[23] = 0;
      goto LABEL_16;
    }
    v11 = (const void **)v19;
    v10 = v19[2];
  }
  v12 = *v11;
  v9 = v10 - (_QWORD)*v11;
  if (v9 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  if (v9 >= 0x17)
  {
    v13 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17)
      v13 = v9 | 7;
    v14 = v13 + 1;
    v15 = operator new(v13 + 1);
    *((_QWORD *)a1 + 1) = v9;
    *((_QWORD *)a1 + 2) = v14 | 0x8000000000000000;
    *(_QWORD *)a1 = v15;
    a1 = v15;
    goto LABEL_15;
  }
  a1[23] = v9;
  if (v9)
LABEL_15:
    memmove(a1, v12, v9);
LABEL_16:
  a1[v9] = 0;
  v17 = *v4;
  *(uint64_t *)((char *)&v17 + *(_QWORD *)(v17 - 24)) = v4[3];
  v18 = v8 + 16;
  if (SBYTE7(v23) < 0)
    operator delete(__p[0]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1CAA44AB4](v25);
}

void sub_1C98EC7B8(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x1CAA44AB4](v1);
  _Unwind_Resume(a1);
}

void sub_1C98EC7E0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1C98ED780((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1C98EC7F4()
{
  void *v0;
  unsigned __int8 v1;
  NSObject *v2;
  uint64_t v3;
  id v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;
  id v11;
  uint8_t buf[16];
  CVPixelBufferRef pixelBufferOut;
  void *v14;
  _QWORD v15[2];

  v15[1] = *MEMORY[0x1E0C80C00];
  v0 = (void *)MEMORY[0x1CAA45030]();
  pixelBufferOut = 0;
  if (CVPixelBufferCreate(0, 0x80uLL, 0x80uLL, 0x4C303038u, 0, &pixelBufferOut))
  {
    v1 = atomic_load((unsigned __int8 *)&qword_1ED52ACD0);
    if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_1ED52ACD0))
    {
      qword_1ED52ACE0 = (uint64_t)os_log_create("com.apple.AppleCVA", "FaceKit");
      __cxa_guard_release(&qword_1ED52ACD0);
    }
    v2 = (id)qword_1ED52ACE0;
    if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1C9870000, v2, OS_LOG_TYPE_INFO, "Recognition initialization failure: unable to create pixel buffer", buf, 2u);
    }
    v3 = 0;
  }
  else
  {
    v4 = objc_alloc(MEMORY[0x1E0CEDF70]);
    v2 = objc_msgSend(v4, "initWithCVPixelBuffer:options:", pixelBufferOut, MEMORY[0x1E0C9AA70]);
    objc_msgSend(MEMORY[0x1E0CEDEE0], "faceObservationWithRequestRevision:boundingBox:roll:yaw:pitch:", 0, 0, 0, 0, 0.0, 0.0, 1.0, 1.0);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v15[0] = v5;
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v15, 1);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    sub_1C98ED58C(v6);
    v7 = (void *)objc_claimAutoreleasedReturnValue();

    v14 = v7;
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v14, 1);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v11 = 0;
    v3 = -[NSObject performRequests:error:](v2, "performRequests:error:", v8, &v11);
    v9 = v11;

    CVPixelBufferRelease(pixelBufferOut);
  }

  objc_autoreleasePoolPop(v0);
  return v3;
}

void sub_1C98ECA0C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

uint64_t sub_1C98ECA58(uint64_t a1, __CVBuffer *a2, uint64_t **a3)
{
  void *v5;
  unsigned int Width;
  unsigned int Height;
  uint64_t *v8;
  uint64_t *v9;
  float32x4_t v15;
  __int128 v16;
  void *v17;
  float32x4_t v18;
  float32x4_t v19;
  void *v20;
  id v21;
  void *v22;
  char v23;
  void *v24;
  int v25;
  uint64_t v26;
  void *v27;
  void *v28;
  void *v29;
  BOOL v30;
  id v31;
  void *v32;
  void *v33;
  int v34;
  int *v35;
  unint64_t v36;
  uint64_t v37;
  size_t v38;
  unint64_t v39;
  char *v40;
  uint64_t v41;
  unint64_t v42;
  size_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  __int128 v49;
  uint64_t v50;
  unint64_t v51;
  int *v52;
  char *v53;
  uint64_t v54;
  _OWORD *v55;
  __int128 *v56;
  uint64_t v57;
  __int128 v58;
  int v59;
  int v60;
  uint64_t v61;
  void *v62;
  uint64_t v63;
  id v64;
  const char *v65;
  size_t v66;
  void *v67;
  void *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  void *v72;
  void *v73;
  std::ios_base *v74;
  uint64_t v75;
  _QWORD *v76;
  uint64_t v77;
  uint64_t v78;
  size_t v79;
  __int128 *p_dst;
  uint64_t v81;
  uint64_t v82;
  uint64_t *v83;
  uint64_t *v84;
  int v85;
  void *v86;
  void *v87;
  void **v88;
  size_t v89;
  uint64_t v90;
  void **v91;
  unint64_t v92;
  const void **v93;
  const void *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t *v97;
  uint64_t *v98;
  int v99;
  __int128 v100;
  __int128 *v101;
  size_t v102;
  uint64_t v103;
  void **v104;
  void *context;
  void *v107;
  unsigned int v108;
  id v109;
  void *v110;
  void *v111;
  float32x4_t v112;
  uint64_t **v113;
  __int128 v114;
  void *v115;
  __int128 __dst;
  int64_t v117;
  void *memptr[2];
  int64_t v119;
  _QWORD v120[3];
  uint64_t v121;
  unint64_t v122;
  void *__p[2];
  __int128 v124;
  int v125;
  uint64_t v126[19];
  id v127;
  _QWORD v128[3];

  v128[1] = *MEMORY[0x1E0C80C00];
  v5 = (void *)MEMORY[0x1CAA45030]();
  if (*a3 == a3[1])
  {
    v108 = 1;
    goto LABEL_104;
  }
  context = v5;
  Width = CVPixelBufferGetWidth(a2);
  Height = CVPixelBufferGetHeight(a2);
  v111 = (void *)objc_opt_new();
  v8 = *a3;
  v9 = a3[1];
  if (*a3 != v9)
  {
    __asm { FMOV            V1.2S, #1.0 }
    *(float32x2_t *)v15.f32 = vdiv_f32(_D1, vcvt_f32_s32(vmax_s32((int32x2_t)__PAIR64__(Height, Width), (int32x2_t)0x100000001)));
    v15.i64[1] = v15.i64[0];
    v112 = v15;
    do
    {
      v16 = *(_OWORD *)(*v8 + 52);
      if (*(_BYTE *)(*v8 + 72))
      {
        v114 = *(_OWORD *)(*v8 + 52);
        v15.f32[0] = *(float *)(*v8 + 68) / -57.296;
        objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:", *(double *)v15.i64);
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        v16 = v114;
      }
      else
      {
        v17 = 0;
      }
      *(float32x2_t *)v18.f32 = vadd_f32(*(float32x2_t *)&v16, (float32x2_t)0x3F0000003F000000);
      v18.i64[1] = *((_QWORD *)&v16 + 1);
      v19 = vmulq_f32(v18, v112);
      objc_msgSend(MEMORY[0x1E0CEDEE0], "faceObservationWithRequestRevision:boundingBox:roll:yaw:pitch:", 0, v17, 0, 0, v19.f32[0], (float)(1.0 - (float)(v19.f32[1] + v19.f32[3])), v19.f32[2], v19.f32[3]);
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      if (v20)
        objc_msgSend(v111, "addObject:", v20);

      v8 += 2;
    }
    while (v8 != v9);
  }
  sub_1C98ED58C(v111);
  v115 = (void *)objc_claimAutoreleasedReturnValue();
  v21 = objc_alloc(MEMORY[0x1E0CEDF70]);
  v107 = (void *)objc_msgSend(v21, "initWithCVPixelBuffer:options:", a2, MEMORY[0x1E0C9AA70]);
  kdebug_trace();
  v128[0] = v115;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v128, 1);
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  v113 = a3;
  v127 = 0;
  v23 = objc_msgSend(v107, "performRequests:error:", v22, &v127);
  v109 = v127;

  kdebug_trace();
  if ((v23 & 1) != 0)
  {
    objc_msgSend(v115, "results");
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    v25 = objc_msgSend(v24, "count");

    if (v25 == ((unint64_t)((char *)a3[1] - (char *)*a3) >> 4))
    {
      v108 = 1;
      if (v25 < 1)
        goto LABEL_103;
      v26 = 0;
      while (1)
      {
        objc_msgSend(v115, "results");
        v27 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v27, "objectAtIndexedSubscript:", v26);
        v28 = (void *)objc_claimAutoreleasedReturnValue();

        objc_msgSend(v28, "faceprint");
        v29 = (void *)objc_claimAutoreleasedReturnValue();
        v30 = v29 == 0;

        if (!v30)
          break;
LABEL_40:

        if (++v26 == v25)
        {
          v108 = 1;
          goto LABEL_103;
        }
      }
      objc_msgSend(v28, "faceprint");
      v31 = (id)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v31, "descriptorData");
      v32 = (void *)objc_claimAutoreleasedReturnValue();
      v33 = v32;
      if (!v32)
      {
        v40 = 0;
        v43 = 0;
        LODWORD(v39) = 0;
        goto LABEL_37;
      }
      v110 = v28;
      v34 = objc_msgSend(v32, "length");
      v35 = (int *)objc_msgSend(objc_retainAutorelease(v33), "bytes");
      v36 = v34;
      v37 = ((unint64_t)v34 >> 2);
      v38 = (4 * v37 + 31) & 0x7FFFFFFE0;
      memptr[0] = 0;
      malloc_type_posix_memalign(memptr, 0x20uLL, v38, 0x49090899uLL);
      v39 = v36 >> 2;
      v40 = (char *)memptr[0];
      if (v35 != memptr[0])
      {
        if ((_DWORD)v39)
        {
          v41 = v37;
          v42 = (v37 - 1) & 0x3FFFFFFFFFFFFFFFLL;
          v43 = v38 >> 2;
          if (v42 < 7)
          {
            v44 = (char *)memptr[0];
            v28 = v110;
          }
          else
          {
            v44 = (char *)memptr[0];
            v28 = v110;
            if ((void *)((char *)memptr[0] - (char *)v35) >= (void *)0x20)
            {
              v45 = 0;
              v46 = (v42 + 1) & 0x7FFFFFFFFFFFFFF8;
              v47 = v46;
              do
              {
                v48 = &v40[v45 * 4];
                v49 = *(_OWORD *)&v35[v45 + 4];
                *(_OWORD *)v48 = *(_OWORD *)&v35[v45];
                *((_OWORD *)v48 + 1) = v49;
                v45 += 8;
                v47 -= 8;
              }
              while (v47);
              if (v42 + 1 == v46)
                goto LABEL_37;
              v44 = &v40[4 * v46];
              v35 += v46;
            }
          }
          do
          {
            v60 = *v35++;
            *(_DWORD *)v44 = v60;
            v44 += 4;
          }
          while (v44 != &v40[4 * v41]);
        }
        else
        {
          v43 = v38 >> 2;
          v28 = v110;
        }
LABEL_37:

        v61 = (*v113)[2 * v26];
        v62 = *(void **)(v61 + 96);
        *(_QWORD *)(v61 + 96) = v40;
        *(_QWORD *)(v61 + 104) = v43;
        *(_DWORD *)(v61 + 112) = v39;
        free(v62);

        v63 = (*v113)[2 * v26];
        *(_DWORD *)(v63 + 120) = 1;
        if (*(char *)(v63 + 151) < 0)
        {
          **(_BYTE **)(v63 + 128) = 0;
          *(_QWORD *)(v63 + 136) = 0;
        }
        else
        {
          *(_BYTE *)(v63 + 128) = 0;
          *(_BYTE *)(v63 + 151) = 0;
        }
        goto LABEL_40;
      }
      memptr[0] = 0;
      malloc_type_posix_memalign(memptr, 0x20uLL, v38, 0x49090899uLL);
      v40 = (char *)memptr[0];
      v43 = v38 >> 2;
      v50 = v37;
      v28 = v110;
      if ((_DWORD)v39)
      {
        v51 = (v50 - 1) & 0x3FFFFFFFFFFFFFFFLL;
        v52 = v35;
        v53 = (char *)memptr[0];
        if (v51 >= 7)
        {
          v52 = v35;
          v53 = (char *)memptr[0];
          if ((void *)((char *)memptr[0] - (char *)v35) >= (void *)0x20)
          {
            v54 = (v51 + 1) & 0x7FFFFFFFFFFFFFF8;
            v52 = &v35[v54];
            v55 = (char *)memptr[0] + 16;
            v56 = (__int128 *)(v35 + 4);
            v57 = v54;
            do
            {
              v58 = *v56;
              *(v55 - 1) = *(v56 - 1);
              *v55 = v58;
              v55 += 2;
              v56 += 2;
              v57 -= 8;
            }
            while (v57);
            if (v51 + 1 == v54)
              goto LABEL_33;
            v53 = &v40[4 * v54];
          }
        }
        do
        {
          v59 = *v52++;
          *(_DWORD *)v53 = v59;
          v53 += 4;
        }
        while (v53 != &v40[4 * v50]);
      }
LABEL_33:
      free(v35);
      goto LABEL_37;
    }
    v69 = MEMORY[0x1E0DE4FE0];
    v70 = MEMORY[0x1E0DE4FE0] + 64;
    v71 = MEMORY[0x1E0DE4F60];
    v72 = *(void **)(MEMORY[0x1E0DE4F60] + 8);
    v73 = *(void **)(MEMORY[0x1E0DE4F60] + 16);
    v126[0] = MEMORY[0x1E0DE4FE0] + 64;
    memptr[0] = v72;
    *(void **)((char *)memptr + *((_QWORD *)v72 - 3)) = v73;
    v74 = (std::ios_base *)((char *)memptr + *((_QWORD *)memptr[0] - 3));
    std::ios_base::init(v74, &memptr[1]);
    v74[1].__vftable = 0;
    v74[1].__fmtflags_ = -1;
    memptr[0] = (void *)(v69 + 24);
    v126[0] = v70;
    std::streambuf::basic_streambuf();
    v75 = MEMORY[0x1E0DE4FB8];
    memptr[1] = (void *)(MEMORY[0x1E0DE4FB8] + 16);
    *(_OWORD *)__p = 0u;
    v124 = 0u;
    v125 = 16;
    sub_1C98D260C(memptr, (uint64_t)"Not enough faceprintRequest results ", 36);
    v76 = (_QWORD *)std::ostream::operator<<();
    sub_1C98D260C(v76, (uint64_t)" != ", 4);
    std::ostream::operator<<();
    if ((v125 & 0x10) != 0)
    {
      v92 = *((_QWORD *)&v124 + 1);
      if (*((_QWORD *)&v124 + 1) < v122)
      {
        *((_QWORD *)&v124 + 1) = v122;
        v92 = v122;
      }
      v93 = (const void **)&v121;
    }
    else
    {
      if ((v125 & 8) == 0)
      {
        v77 = v71;
        v78 = v75;
        v79 = 0;
        HIBYTE(v117) = 0;
        p_dst = &__dst;
LABEL_83:
        *((_BYTE *)p_dst + v79) = 0;
        v97 = *v113;
        v98 = v113[1];
        if (*v113 == v98)
        {
          LOBYTE(v99) = HIBYTE(v117);
        }
        else
        {
          v99 = SHIBYTE(v117);
          v100 = __dst;
          if (v117 >= 0)
            v101 = &__dst;
          else
            v101 = (__int128 *)__dst;
          if (v117 >= 0)
            v102 = HIBYTE(v117);
          else
            v102 = *((_QWORD *)&__dst + 1);
          do
          {
            v103 = *v97;
            *(_DWORD *)(v103 + 120) = 0;
            v104 = (void **)(v103 + 128);
            if (*(char *)(v103 + 151) < 0)
            {
              sub_1C98A976C(v104, v101, v102);
            }
            else if (v99 < 0)
            {
              sub_1C98A96AC(v104, (void *)v100, *((size_t *)&v100 + 1));
            }
            else
            {
              *(_OWORD *)v104 = __dst;
              *(_QWORD *)(v103 + 144) = v117;
            }
            v97 += 2;
          }
          while (v97 != v98);
        }
        if ((v99 & 0x80) != 0)
          operator delete((void *)__dst);
        memptr[0] = *(void **)v77;
        *(void **)((char *)memptr + *((_QWORD *)memptr[0] - 3)) = *(void **)(v77 + 24);
        memptr[1] = (void *)(v78 + 16);
        if (SBYTE7(v124) < 0)
          operator delete(__p[0]);
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        MEMORY[0x1CAA44AB4](v126);
        goto LABEL_102;
      }
      v93 = (const void **)v120;
      v92 = v120[2];
    }
    v94 = *v93;
    v79 = v92 - (_QWORD)*v93;
    if (v79 > 0x7FFFFFFFFFFFFFF7)
      abort();
    if (v79 >= 0x17)
    {
      v95 = (v79 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v79 | 7) != 0x17)
        v95 = v79 | 7;
      v96 = v95 + 1;
      p_dst = (__int128 *)operator new(v95 + 1);
      *((_QWORD *)&__dst + 1) = v79;
      v117 = v96 | 0x8000000000000000;
      *(_QWORD *)&__dst = p_dst;
    }
    else
    {
      HIBYTE(v117) = v92 - *(_BYTE *)v93;
      p_dst = &__dst;
      if (!v79)
      {
        v77 = v71;
        v78 = v75;
        goto LABEL_83;
      }
    }
    v77 = v71;
    v78 = v75;
    memmove(p_dst, v94, v79);
    goto LABEL_83;
  }
  objc_msgSend(v109, "description");
  v64 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
  v65 = (const char *)objc_msgSend(v64, "UTF8String");
  v66 = strlen(v65);
  if (v66 > 0x7FFFFFFFFFFFFFF7)
    abort();
  v67 = (void *)v66;
  if (v66 >= 0x17)
  {
    v81 = (v66 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v66 | 7) != 0x17)
      v81 = v66 | 7;
    v82 = v81 + 1;
    v68 = operator new(v81 + 1);
    memptr[1] = v67;
    v119 = v82 | 0x8000000000000000;
    memptr[0] = v68;
  }
  else
  {
    HIBYTE(v119) = v66;
    v68 = memptr;
    if (!v66)
      goto LABEL_54;
  }
  memmove(v68, v65, (size_t)v67);
LABEL_54:
  *((_BYTE *)v67 + (_QWORD)v68) = 0;
  v83 = *a3;
  v84 = a3[1];
  if (*a3 == v84)
  {
    LOBYTE(v85) = HIBYTE(v119);
  }
  else
  {
    v85 = SHIBYTE(v119);
    v86 = memptr[0];
    v87 = memptr[1];
    if (v119 >= 0)
      v88 = memptr;
    else
      v88 = (void **)memptr[0];
    if (v119 >= 0)
      v89 = HIBYTE(v119);
    else
      v89 = (size_t)memptr[1];
    do
    {
      v90 = *v83;
      *(_DWORD *)(v90 + 120) = 0;
      v91 = (void **)(v90 + 128);
      if (*(char *)(v90 + 151) < 0)
      {
        sub_1C98A976C(v91, v88, v89);
      }
      else if (v85 < 0)
      {
        sub_1C98A96AC(v91, v86, (size_t)v87);
      }
      else
      {
        *(_OWORD *)v91 = *(_OWORD *)memptr;
        *(_QWORD *)(v90 + 144) = v119;
      }
      v83 += 2;
    }
    while (v83 != v84);
  }
  if ((v85 & 0x80) != 0)
    operator delete(memptr[0]);

LABEL_102:
  v108 = 0;
LABEL_103:

  v5 = context;
LABEL_104:
  objc_autoreleasePoolPop(v5);
  return v108;
}

void sub_1C98ED40C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *a19)
{
  uint64_t v19;

  std::ostream::~ostream();
  MEMORY[0x1CAA44AB4](v19);

  _Unwind_Resume(a1);
}

id sub_1C98ED58C(void *a1)
{
  id v1;
  void *v2;
  char v3;
  id v4;
  unsigned __int8 v5;
  NSObject *v6;
  void *v7;
  id v9;
  uint64_t v10;
  id v11;
  uint8_t buf[4];
  uint64_t v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = (void *)objc_opt_new();
  v11 = 0;
  v3 = objc_msgSend(v2, "setRevision:error:", 3737841665, &v11);
  v4 = v11;
  if ((v3 & 1) == 0)
  {
    v5 = atomic_load((unsigned __int8 *)&qword_1ED52ACD0);
    if ((v5 & 1) == 0 && __cxa_guard_acquire(&qword_1ED52ACD0))
    {
      qword_1ED52ACE0 = (uint64_t)os_log_create("com.apple.AppleCVA", "FaceKit");
      __cxa_guard_release(&qword_1ED52ACD0);
    }
    v6 = (id)qword_1ED52ACE0;
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      objc_msgSend(v4, "description");
      v9 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
      v10 = objc_msgSend(v9, "UTF8String");
      *(_DWORD *)buf = 136315138;
      v13 = v10;
      _os_log_error_impl(&dword_1C9870000, v6, OS_LOG_TYPE_ERROR, "Unable to set private faceprint revision (%s).", buf, 0xCu);

    }
  }

  objc_msgSend(v2, "setInputFaceObservations:", v1);
  objc_msgSend(v2, "setDetectionLevel:", 2);
  objc_msgSend(MEMORY[0x1E0CEDFC0], "defaultANEDevice");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "setProcessingDevice:", v7);

  return v2;
}

void sub_1C98ED72C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  v6 = v5;

  _Unwind_Resume(a1);
}

uint64_t sub_1C98ED780(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = MEMORY[0x1E0DE4F60];
  v3 = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)a1 = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)(a1 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(a1 + 8) = MEMORY[0x1E0DE4FB8] + 16;
  if (*(char *)(a1 + 95) < 0)
    operator delete(*(void **)(a1 + 72));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1CAA44AB4](a1 + 112);
  return a1;
}

void sub_1C98ED804(_QWORD *a1@<X8>)
{
  unsigned __int8 v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_1ED52ACF0);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_1ED52ACF0))
  {
    sub_1C98ED898();
    __cxa_guard_release(&qword_1ED52ACF0);
  }
  v3 = qword_1ED52AD68;
  *a1 = qword_1ED52AD60;
  a1[1] = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
}

void sub_1C98ED880(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1ED52ACF0);
  _Unwind_Resume(a1);
}

_QWORD *sub_1C98ED898()
{
  _QWORD *v0;
  _QWORD *result;

  v0 = (_QWORD *)operator new();
  *v0 = &off_1E8294B70;
  qword_1ED52AD60 = (uint64_t)v0;
  result = (_QWORD *)operator new();
  *result = &off_1E8295EC8;
  result[1] = 0;
  result[2] = 0;
  result[3] = v0;
  qword_1ED52AD68 = (uint64_t)result;
  return result;
}

void sub_1C98ED910(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void sub_1C98ED930(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1CAA44AFCLL);
}

uint64_t sub_1C98ED954(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_1C98ED970(uint64_t a1, uint64_t a2)
{
  std::mutex *v4;
  float *v5;
  float *v6;
  uint64_t v7;
  float v8;
  float *v9;
  uint64_t v10;
  float *v11;
  float v12;
  float v13;
  float v14;
  float v15;
  int v16;

  v4 = (std::mutex *)(a1 + 648);
  std::mutex::lock((std::mutex *)(a1 + 648));
  sub_1C991596C((uint64_t *)(a1 + 432), a2);
  std::mutex::lock((std::mutex *)(a1 + 584));
  sub_1C99164CC((uint64_t *)(a1 + 288), (uint64_t *)(a1 + 432));
  v5 = *(float **)(a1 + 328);
  v6 = *(float **)(a1 + 40);
  v7 = *(unsigned int *)(a1 + 344);
  v8 = vabds_f32(*v5, *v6);
  if ((_DWORD)v7 != 1)
  {
    v9 = v5 + 1;
    v10 = 4 * v7 - 4;
    v11 = v6 + 1;
    do
    {
      v12 = *v9++;
      v13 = v12;
      v14 = *v11++;
      v15 = vabds_f32(v13, v14);
      if (v8 < v15)
        v8 = v15;
      v10 -= 4;
    }
    while (v10);
  }
  v16 = llroundf((float)(v8 / 5.0) * 10.0);
  if (v16 >= 10)
    v16 = 10;
  if (v16 <= 1)
    v16 = 1;
  *(_DWORD *)(a1 + 576) = v16;
  std::mutex::unlock((std::mutex *)(a1 + 584));
  std::mutex::unlock(v4);
}

uint64_t sub_1C98EDA50(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t v11;
  void *v12;
  size_t v13;
  size_t v14;
  unint64_t v15;
  void *v16;
  size_t v17;
  size_t v18;
  unint64_t v19;
  void *v20;
  size_t v21;
  size_t v22;
  _OWORD *v23;
  __int128 *v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  void *memptr;

  v5 = *a2;
  v4 = a2[1];
  if (v4)
  {
    v6 = (unint64_t *)(v4 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  v8 = *(std::__shared_weak_count **)(a1 + 8);
  *(_QWORD *)a1 = v5;
  *(_QWORD *)(a1 + 8) = v4;
  if (!v8)
    goto LABEL_8;
  p_shared_owners = (unint64_t *)&v8->__shared_owners_;
  do
    v10 = __ldaxr(p_shared_owners);
  while (__stlxr(v10 - 1, p_shared_owners));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
    if ((uint64_t *)a1 == a2)
      goto LABEL_30;
  }
  else
  {
LABEL_8:
    if ((uint64_t *)a1 == a2)
      goto LABEL_30;
  }
  v11 = *((unsigned int *)a2 + 8);
  if ((_DWORD)v11)
  {
    v12 = *(void **)(a1 + 16);
    if (*(_QWORD *)(a1 + 24) >= v11)
    {
      v13 = 4 * v11;
    }
    else
    {
      free(v12);
      v13 = 4 * v11;
      v14 = (v13 + 31) & 0x7FFFFFFE0;
      *(_QWORD *)(a1 + 16) = 0;
      *(_QWORD *)(a1 + 24) = v14 >> 2;
      memptr = 0;
      malloc_type_posix_memalign(&memptr, 0x20uLL, v14, 0x49090899uLL);
      v12 = memptr;
      *(_QWORD *)(a1 + 16) = memptr;
    }
    memcpy(v12, (const void *)a2[2], v13);
  }
  else
  {
    free(*(void **)(a1 + 16));
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)(a1 + 24) = 0;
  }
  *(_DWORD *)(a1 + 32) = *((_DWORD *)a2 + 8);
  v15 = *((unsigned int *)a2 + 14);
  if ((_DWORD)v15)
  {
    v16 = *(void **)(a1 + 40);
    if (*(_QWORD *)(a1 + 48) >= v15)
    {
      v17 = 4 * v15;
    }
    else
    {
      free(v16);
      v17 = 4 * v15;
      v18 = (v17 + 31) & 0x7FFFFFFE0;
      *(_QWORD *)(a1 + 40) = 0;
      *(_QWORD *)(a1 + 48) = v18 >> 2;
      memptr = 0;
      malloc_type_posix_memalign(&memptr, 0x20uLL, v18, 0x49090899uLL);
      v16 = memptr;
      *(_QWORD *)(a1 + 40) = memptr;
    }
    memcpy(v16, (const void *)a2[5], v17);
  }
  else
  {
    free(*(void **)(a1 + 40));
    *(_QWORD *)(a1 + 40) = 0;
    *(_QWORD *)(a1 + 48) = 0;
  }
  *(_DWORD *)(a1 + 56) = *((_DWORD *)a2 + 14);
  v19 = (*((_DWORD *)a2 + 21) * *((_DWORD *)a2 + 20));
  if ((_DWORD)v19)
  {
    v20 = *(void **)(a1 + 64);
    if (*(_QWORD *)(a1 + 72) >= v19)
    {
      v21 = 4 * v19;
    }
    else
    {
      free(v20);
      v21 = 4 * v19;
      v22 = (v21 + 31) & 0x7FFFFFFE0;
      *(_QWORD *)(a1 + 64) = 0;
      *(_QWORD *)(a1 + 72) = v22 >> 2;
      memptr = 0;
      malloc_type_posix_memalign(&memptr, 0x20uLL, v22, 0x49090899uLL);
      v20 = memptr;
      *(_QWORD *)(a1 + 64) = memptr;
    }
    memcpy(v20, (const void *)a2[8], v21);
  }
  else
  {
    free(*(void **)(a1 + 64));
    *(_QWORD *)(a1 + 64) = 0;
    *(_QWORD *)(a1 + 72) = 0;
  }
  *(_QWORD *)(a1 + 80) = a2[10];
LABEL_30:
  v23 = (_OWORD *)(a1 + 88);
  v24 = (__int128 *)(a2 + 11);
  if (*(unsigned __int8 *)(a1 + 136) == *((unsigned __int8 *)a2 + 136))
  {
    if ((uint64_t *)a1 != a2 && *(_BYTE *)(a1 + 136))
    {
      v25 = *v24;
      v26 = *(_OWORD *)(a2 + 15);
      *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 13);
      *(_OWORD *)(a1 + 120) = v26;
      *v23 = v25;
    }
  }
  else if (*(_BYTE *)(a1 + 136))
  {
    *(_BYTE *)(a1 + 136) = 0;
  }
  else
  {
    v27 = *v24;
    v28 = *(_OWORD *)(a2 + 15);
    *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 13);
    *(_OWORD *)(a1 + 120) = v28;
    *v23 = v27;
    *(_BYTE *)(a1 + 136) = 1;
  }
  return a1;
}

float *sub_1C98EDCC4(float *a1, uint64_t a2)
{
  float *v3;
  float **v4;
  float *result;
  uint64_t v6;
  uint64_t v7;

  v3 = *(float **)(a2 + 8);
  if (v3 == a1)
  {
    v7 = 0;
    result = (float *)sub_1C98EDCC4(&v7);
    *(_QWORD *)a1 = v7;
  }
  else
  {
    v4 = *(float ***)a2;
    v7 = 0;
    result = sub_1C98EDD44((float *)&v7, v4);
    v6 = v7;
    *a1 = (float)((float)(*(float *)&v7 * *v3) + 0.0) + (float)(*((float *)&v7 + 1) * v3[1]);
    a1[1] = (float)((float)(*(float *)&v6 * v3[2]) + 0.0) + (float)(*((float *)&v6 + 1) * v3[3]);
  }
  return result;
}

float *sub_1C98EDD44(float *result, float **a2)
{
  float *v2;
  float *v3;
  float *v4;
  uint64_t v5;

  v2 = result;
  v3 = *a2;
  if (*a2 == result || (v4 = a2[1], v4 == result))
  {
    v5 = 0;
    result = (float *)sub_1C98EDD44(&v5);
    *(_QWORD *)v2 = v5;
  }
  else
  {
    *result = (float)((float)(*v3 * *v4) + 0.0) + (float)(v3[1] * v4[1]);
    result[1] = (float)((float)(*v3 * v4[2]) + 0.0) + (float)(v3[1] * v4[3]);
  }
  return result;
}

_QWORD *sub_1C98EDDC4(_QWORD *a1)
{
  _QWORD *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  __CVBuffer *v13;
  __CVBuffer *v14;

  v2 = (_QWORD *)*a1;
  *a1 = 0;
  if (!v2)
    return a1;
  if (v2[9])
  {
    v3 = (std::__shared_weak_count *)v2[10];
    v2[9] = 0;
    v2[10] = 0;
    if (v3)
    {
      p_shared_owners = (unint64_t *)&v3->__shared_owners_;
      do
        v5 = __ldaxr(p_shared_owners);
      while (__stlxr(v5 - 1, p_shared_owners));
      if (!v5)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
  }
  v6 = (std::__shared_weak_count *)v2[10];
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
      v9 = (void *)v2[6];
      if (!v9)
        goto LABEL_14;
      goto LABEL_13;
    }
  }
  v9 = (void *)v2[6];
  if (v9)
  {
LABEL_13:
    v2[7] = v9;
    operator delete(v9);
  }
LABEL_14:
  v10 = v2[3];
  if (v10)
  {
    v11 = v2[4];
    v12 = (void *)v2[3];
    if (v11 != v10)
    {
      do
      {
        v14 = *(__CVBuffer **)(v11 - 8);
        v11 -= 8;
        v13 = v14;
        if (v14)
          CVPixelBufferRelease(v13);
      }
      while (v11 != v10);
      v12 = (void *)v2[3];
    }
    v2[4] = v10;
    operator delete(v12);
  }
  MEMORY[0x1CAA44AFC](v2, 0x1020C40612EDB84);
  return a1;
}

void sub_1C98EDEE8(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E82958E0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1C98EDEF8(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E82958E0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1CAA44AFCLL);
}

uint64_t sub_1C98EDF28(uint64_t result)
{
  uint64_t v1;
  const void *v2;
  const void *v3;

  v1 = *(_QWORD *)(result + 24);
  *(_QWORD *)(result + 24) = 0;
  if (v1)
  {
    if (*(_QWORD *)v1)
      CFRelease(*(CFTypeRef *)v1);
    v2 = *(const void **)(v1 + 8);
    if (v2)
      CFRelease(v2);
    v3 = *(const void **)(v1 + 16);
    if (v3)
      CFRelease(v3);
    JUMPOUT(0x1CAA44AFCLL);
  }
  return result;
}

void sub_1C98EDF94(_QWORD *a1)
{
  uint64_t v2;
  _QWORD *v3;
  unsigned int *v4;
  unint64_t v5;
  uint64_t v6;
  char *v7;
  __int128 *v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  unint64_t v27;
  unint64_t v28;
  char *v29;
  char *v30;
  char *v31;
  int64_t v32;
  unint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  __int128 *v37;
  char *v38;
  uint64_t v39;
  __int128 v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  char *v52;
  char *v53;
  BOOL v54;
  int64_t v55;
  unint64_t v56;
  char *v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  __int128 *v61;
  char *v62;
  uint64_t v63;
  __int128 v64;
  uint64_t v65;
  void *v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  char *v70;
  unsigned __int8 v71;
  uint64_t v72;
  char *v73;
  unint64_t v74;
  uint64_t v75;
  _OWORD *v76;
  __int128 v77;
  __int128 *v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  char *v82;
  char *v83;
  unint64_t v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  char *v91;
  char *v92;
  char *v93;
  char *v94;
  uint64_t v95;
  void *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  char *v101;
  unint64_t v102;
  unint64_t v103;
  char *v104;
  char *v105;
  char *v106;
  int64_t v107;
  unint64_t v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  __int128 *v112;
  char *v113;
  uint64_t v114;
  __int128 v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  char *v123;
  unint64_t v124;
  unint64_t v125;
  uint64_t v126;
  char *v127;
  char *v128;
  int64_t v129;
  unint64_t v130;
  char *v131;
  char *v132;
  uint64_t v133;
  uint64_t v134;
  __int128 *v135;
  char *v136;
  uint64_t v137;
  __int128 v138;
  uint64_t v139;
  void *v140;
  uint64_t v141;
  uint64_t v142;
  unint64_t v143;
  char *v144;
  __int16 v145;
  uint64_t v146;
  char *v147;
  unint64_t v148;
  uint64_t v149;
  uint64_t v150;
  char *v151;
  _DWORD *v152;
  int v153;
  char *v154;
  uint64_t v155;
  unint64_t v156;
  uint64_t v157;
  unint64_t v158;
  unint64_t v159;
  _QWORD *v160;
  unint64_t v161;
  _QWORD *v162;
  uint64_t v163;
  unint64_t v164;
  unint64_t v165;
  char *v166;
  char *v167;
  char *v168;
  char *v169;
  uint64_t v170;
  void *v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  char *v175;
  char *v176;
  unint64_t v177;
  unint64_t v178;
  char *v179;
  char *v180;
  char *v181;
  int64_t v182;
  unint64_t v183;
  char *v184;
  uint64_t v185;
  uint64_t v186;
  __int128 *v187;
  char *v188;
  uint64_t v189;
  __int128 v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  char *v198;
  unint64_t v199;
  unint64_t v200;
  uint64_t v201;
  char *v202;
  char *v203;
  int64_t v204;
  unint64_t v205;
  char *v206;
  char *v207;
  uint64_t v208;
  uint64_t v209;
  __int128 *v210;
  char *v211;
  uint64_t v212;
  __int128 v213;
  uint64_t v214;
  void *v215;
  uint64_t v216;
  uint64_t v217;
  unint64_t v218;
  char *v219;
  uint64_t v220;
  unint64_t v221;
  uint64_t v222;
  char *v223;
  unint64_t v224;
  unint64_t v225;
  uint64_t v226;
  uint64_t v227;
  __int128 v228;
  __int128 v229;
  unint64_t v230;
  uint64_t v231;
  _BYTE *v232;
  _BYTE *v233;
  int64_t v234;
  char *v235;
  size_t v236;
  char *v237;
  uint64_t v238;
  unint64_t v239;
  uint64_t v240;
  _QWORD *v241;
  uint64_t *v242;
  unint64_t v243;
  _QWORD *v244;
  unint64_t v245;
  unint64_t v246;
  uint64_t v247;
  size_t v248;
  void *v249;
  uint64_t v250;
  size_t v251;
  void *v252;
  __int128 v253;
  __int128 v254;
  uint64_t v255;
  size_t v256;
  void *v257;
  uint64_t v258;
  unint64_t *v259;
  unint64_t v260;
  uint64_t v261;
  unint64_t *v262;
  unint64_t v263;
  unint64_t v264;
  uint64_t v265;
  _QWORD *v266;
  uint64_t *v267;
  unint64_t v268;
  _QWORD *v269;
  unint64_t v270;
  unint64_t v271;
  unint64_t v272;
  uint64_t v273;
  char *v274;
  int *v275;
  unint64_t v276;
  char *v277;
  uint64_t v278;
  unint64_t v279;
  uint64_t v280;
  unint64_t v281;
  char *v282;
  int *v283;
  unint64_t v284;
  char *v285;
  uint64_t v286;
  unint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  unsigned int *v291;
  unsigned int *v292;
  unsigned int *v293;
  _QWORD *v294;
  _QWORD *v295;
  _QWORD *v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  _QWORD *v300;
  void *memptr;

  std::mutex::lock(&stru_1ED52AC30);
  if (!off_1ED52AC70)
  {
    std::mutex::unlock(&stru_1ED52AC30);
    sub_1C98EF554();
    std::mutex::lock(&stru_1ED52AC30);
  }
  v2 = operator new();
  v3 = (_QWORD *)v2;
  v4 = (unsigned int *)off_1ED52AC70;
  *(_QWORD *)v2 = *(_QWORD *)off_1ED52AC70;
  *(_OWORD *)(v2 + 8) = 0u;
  *(_OWORD *)(v2 + 24) = 0u;
  *(_OWORD *)(v2 + 40) = 0u;
  v5 = *((_QWORD *)v4 + 5);
  v6 = *((_QWORD *)v4 + 2);
  v7 = (char *)(v6 + 8 * (v5 >> 8));
  if (*((_QWORD *)v4 + 3) == v6)
  {
    v8 = 0;
    v11 = 0;
    v10 = (char *)(v6 + 8 * ((*((_QWORD *)v4 + 6) + v5) >> 8));
  }
  else
  {
    v8 = (__int128 *)(*(_QWORD *)v7 + 16 * v5);
    v9 = *((_QWORD *)v4 + 6) + v5;
    v10 = (char *)(v6 + 8 * (v9 >> 8));
    v11 = *(_QWORD *)v10 + 16 * v9;
  }
  v300 = (_QWORD *)v2;
  if ((__int128 *)v11 == v8)
    goto LABEL_88;
  v12 = ((v11 - *(_QWORD *)v10) >> 4) + 32 * (v10 - v7);
  v13 = (uint64_t)v8 - *(_QWORD *)v7;
  v14 = v12 - (v13 >> 4);
  if (v12 == v13 >> 4)
    goto LABEL_88;
  if ((_BYTE)v14 == 0xFF)
    v15 = (unint64_t)(v14 + 1) >> 8;
  else
    v15 = ((unint64_t)(v14 + 1) >> 8) + 1;
  if (!v15)
  {
    v68 = 0;
    v69 = *(_QWORD *)(v2 + 48);
    v70 = (char *)((v69 >> 5) & 0x7FFFFFFFFFFFFF8);
    goto LABEL_72;
  }
  v288 = v12 - (v13 >> 4);
  v291 = v4;
  v294 = a1;
  v16 = (char *)operator new(8 * v15);
  v17 = &v16[8 * v15];
  v18 = v16;
  v19 = v16;
  do
  {
    v21 = operator new(0x1000uLL);
    if (v19 != v17)
      goto LABEL_14;
    if (v18 > v16)
    {
      v22 = (v18 - v16) >> 3;
      if (v22 >= -1)
        v23 = v22 + 1;
      else
        v23 = v22 + 2;
      v24 = v23 >> 1;
      v25 = &v18[-8 * (v23 >> 1)];
      v26 = v17;
      if (v17 != v18)
      {
        memmove(v25, v18, v17 - v18);
        v26 = v18;
      }
      v20 = -v24;
      v19 = &v25[v17 - v18];
      v18 = &v26[8 * v20];
      goto LABEL_14;
    }
    v27 = (v17 - v16) >> 2;
    if (v17 == v16)
      v27 = 1;
    if (v27 >> 61)
LABEL_294:
      sub_1C9899D30();
    v28 = v27 >> 2;
    v297 = 8 * v27;
    v29 = (char *)operator new(8 * v27);
    v30 = v29;
    v31 = &v29[8 * v28];
    v19 = v31;
    v32 = v17 - v18;
    if (v17 != v18)
    {
      v19 = &v31[v32 & 0xFFFFFFFFFFFFFFF8];
      v33 = v32 - 8;
      if (v33 >= 0x38)
      {
        if ((unint64_t)(&v29[8 * v28] - v18) >= 0x20)
        {
          v35 = (v33 >> 3) + 1;
          v36 = 8 * (v35 & 0x3FFFFFFFFFFFFFFCLL);
          v34 = &v31[v36];
          v37 = (__int128 *)(v18 + 16);
          v38 = &v29[8 * v28 + 16];
          v39 = v35 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v40 = *v37;
            *((_OWORD *)v38 - 1) = *(v37 - 1);
            *(_OWORD *)v38 = v40;
            v37 += 2;
            v38 += 32;
            v39 -= 4;
          }
          while (v39);
          if (v35 == (v35 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_35;
          v18 += v36;
        }
        else
        {
          v34 = &v29[8 * v28];
        }
      }
      else
      {
        v34 = &v29[8 * v28];
      }
      do
      {
        v41 = *(_QWORD *)v18;
        v18 += 8;
        *(_QWORD *)v34 = v41;
        v34 += 8;
      }
      while (v34 != v19);
    }
LABEL_35:
    v17 = &v29[v297];
    v18 = &v29[8 * v28];
    if (v16)
      operator delete(v16);
    v16 = v30;
LABEL_14:
    *(_QWORD *)v19 = v21;
    v19 += 8;
    --v15;
  }
  while (v15);
  v3 = v300;
  v42 = v300[2];
  v43 = v300[3];
  while (v43 != v42)
  {
    if (v18 == v16)
    {
      if (v19 < v17)
      {
        v45 = (v17 - v19) >> 3;
        if (v45 >= -1)
          v46 = v45 + 1;
        else
          v46 = v45 + 2;
        v47 = v46 >> 1;
        v18 = &v16[8 * (v46 >> 1)];
        v48 = v16;
        if (v19 != v16)
        {
          memmove(v18, v16, v19 - v16);
          v48 = v19;
        }
        v19 = &v48[8 * v47];
        goto LABEL_40;
      }
      v49 = (v17 - v16) >> 2;
      if (v17 == v16)
        v49 = 1;
      if (v49 >> 61)
        goto LABEL_294;
      v50 = (v49 + 3) >> 2;
      v51 = 8 * v49;
      v52 = (char *)operator new(8 * v49);
      v53 = v52;
      v18 = &v52[8 * v50];
      v17 = &v52[v51];
      v55 = v19 - v16;
      v54 = v19 == v16;
      v19 = v18;
      if (!v54)
      {
        v19 = &v18[v55 & 0xFFFFFFFFFFFFFFF8];
        v56 = v55 - 8;
        v57 = &v52[8 * v50];
        v58 = v16;
        if (v56 >= 0x38)
        {
          v57 = &v52[8 * v50];
          v58 = v16;
          if ((unint64_t)(v57 - v16) >= 0x20)
          {
            v59 = (v56 >> 3) + 1;
            v60 = 8 * (v59 & 0x3FFFFFFFFFFFFFFCLL);
            v57 = &v18[v60];
            v61 = (__int128 *)(v16 + 16);
            v62 = &v52[8 * v50 + 16];
            v63 = v59 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v64 = *v61;
              *((_OWORD *)v62 - 1) = *(v61 - 1);
              *(_OWORD *)v62 = v64;
              v61 += 2;
              v62 += 32;
              v63 -= 4;
            }
            while (v63);
            if (v59 != (v59 & 0x3FFFFFFFFFFFFFFCLL))
            {
              v58 = &v16[v60];
              goto LABEL_60;
            }
LABEL_62:
            operator delete(v16);
LABEL_63:
            v16 = v53;
LABEL_40:
            v3 = v300;
            goto LABEL_41;
          }
        }
        do
        {
LABEL_60:
          v65 = *(_QWORD *)v58;
          v58 += 8;
          *(_QWORD *)v57 = v65;
          v57 += 8;
        }
        while (v57 != v19);
      }
      if (v16)
        goto LABEL_62;
      goto LABEL_63;
    }
LABEL_41:
    v44 = *(_QWORD *)(v43 - 8);
    v43 -= 8;
    *((_QWORD *)v18 - 1) = v44;
    v18 -= 8;
    v42 = v3[2];
  }
  v66 = (void *)v3[1];
  v3[1] = v16;
  v3[2] = v18;
  v3[3] = v19;
  v3[4] = v17;
  if (v66)
  {
    operator delete(v66);
    v67 = v3[5];
    v18 = (char *)v3[2];
    v19 = (char *)v3[3];
  }
  else
  {
    v67 = v3[5];
  }
  v4 = v291;
  a1 = v294;
  v14 = v288;
  v69 = v3[6];
  v71 = v67 + v69;
  v70 = &v18[8 * ((v67 + v69) >> 8)];
  if (v19 == v18)
  {
    v68 = 0;
    if (v288)
    {
LABEL_72:
      v72 = v14 + ((v68 - *(_QWORD *)v70) >> 4);
      if (v72 < 1)
      {
        v74 = 255 - v72;
        LOBYTE(v72) = ~(-1 - v72);
        v73 = &v70[-8 * (v74 >> 8)];
      }
      else
      {
        v73 = &v70[8 * ((unint64_t)v72 >> 8)];
      }
      v14 = *(_QWORD *)v73 + 16 * v72;
    }
    else
    {
      v73 = v70;
    }
    while (v68 != v14)
    {
      v75 = v14;
      if (v70 != v73)
        v75 = *(_QWORD *)v70 + 4096;
      if (v68 == v75)
      {
        v75 = v68;
      }
      else
      {
        v76 = (_OWORD *)v68;
        do
        {
          v77 = *v8++;
          *v76 = v77;
          if ((__int128 *)((char *)v8 - *(_QWORD *)v7) == (__int128 *)4096)
          {
            v78 = (__int128 *)*((_QWORD *)v7 + 1);
            v7 += 8;
            v8 = v78;
          }
          ++v76;
        }
        while (v76 != (_OWORD *)v75);
        v69 = v3[6];
      }
      v69 += (v75 - v68) >> 4;
      v3[6] = v69;
      if (v70 == v73)
        break;
      v79 = *((_QWORD *)v70 + 1);
      v70 += 8;
      v68 = v79;
    }
  }
  else if (v288)
  {
    v68 = *(_QWORD *)v70 + 16 * v71;
    goto LABEL_72;
  }
LABEL_88:
  v3[7] = *((_QWORD *)v4 + 7);
  *((_OWORD *)v3 + 4) = 0u;
  *((_OWORD *)v3 + 5) = 0u;
  *((_OWORD *)v3 + 6) = 0u;
  v80 = *((_QWORD *)v4 + 12);
  v81 = *((_QWORD *)v4 + 9);
  v82 = (char *)(v81 + 8 * (v80 >> 10));
  if (*((_QWORD *)v4 + 10) == v81)
    goto LABEL_172;
  v83 = (char *)(*(_QWORD *)v82 + 4 * (*((_QWORD *)v4 + 12) & 0x3FFLL));
  v84 = *((_QWORD *)v4 + 13) + v80;
  v85 = (char *)(v81 + 8 * (v84 >> 10));
  v86 = *(_QWORD *)v85 + 4 * (v84 & 0x3FF);
  if ((char *)v86 == v83)
    goto LABEL_172;
  v87 = ((v86 - *(_QWORD *)v85) >> 2) + ((v85 - v82) << 7);
  v88 = 4 * (*((_QWORD *)v4 + 12) & 0x3FFLL);
  v89 = v87 - (v88 >> 2);
  if (v87 == v88 >> 2)
    goto LABEL_172;
  if (((v89 + 1) & 0x3FF) != 0)
    v90 = ((unint64_t)(v89 + 1) >> 10) + 1;
  else
    v90 = (unint64_t)(v89 + 1) >> 10;
  if (v90)
  {
    v289 = v87 - (v88 >> 2);
    v292 = v4;
    v295 = a1;
    v91 = (char *)operator new(8 * v90);
    v92 = &v91[8 * v90];
    v93 = v91;
    v94 = v91;
    while (1)
    {
      v96 = operator new(0x1000uLL);
      if (v94 == v92)
      {
        if (v93 <= v91)
        {
          v102 = (v92 - v91) >> 2;
          if (v92 == v91)
            v102 = 1;
          if (v102 >> 61)
            goto LABEL_294;
          v103 = v102 >> 2;
          v298 = 8 * v102;
          v104 = (char *)operator new(8 * v102);
          v105 = v104;
          v106 = &v104[8 * v103];
          v94 = v106;
          v107 = v92 - v93;
          if (v92 != v93)
          {
            v94 = &v106[v107 & 0xFFFFFFFFFFFFFFF8];
            v108 = v107 - 8;
            if (v108 >= 0x38)
            {
              if ((unint64_t)(&v104[8 * v103] - v93) < 0x20)
              {
                v109 = &v104[8 * v103];
                goto LABEL_119;
              }
              v110 = (v108 >> 3) + 1;
              v111 = 8 * (v110 & 0x3FFFFFFFFFFFFFFCLL);
              v109 = &v106[v111];
              v112 = (__int128 *)(v93 + 16);
              v113 = &v104[8 * v103 + 16];
              v114 = v110 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v115 = *v112;
                *((_OWORD *)v113 - 1) = *(v112 - 1);
                *(_OWORD *)v113 = v115;
                v112 += 2;
                v113 += 32;
                v114 -= 4;
              }
              while (v114);
              if (v110 != (v110 & 0x3FFFFFFFFFFFFFFCLL))
              {
                v93 += v111;
                goto LABEL_119;
              }
            }
            else
            {
              v109 = &v104[8 * v103];
              do
              {
LABEL_119:
                v116 = *(_QWORD *)v93;
                v93 += 8;
                *(_QWORD *)v109 = v116;
                v109 += 8;
              }
              while (v109 != v94);
            }
          }
          v92 = &v104[v298];
          v93 = &v104[8 * v103];
          if (v91)
            operator delete(v91);
          v91 = v105;
          goto LABEL_99;
        }
        v97 = (v93 - v91) >> 3;
        if (v97 >= -1)
          v98 = v97 + 1;
        else
          v98 = v97 + 2;
        v99 = v98 >> 1;
        v100 = &v93[-8 * (v98 >> 1)];
        v101 = v92;
        if (v92 != v93)
        {
          memmove(v100, v93, v92 - v93);
          v101 = v93;
        }
        v95 = -v99;
        v94 = &v100[v92 - v93];
        v93 = &v101[8 * v95];
      }
LABEL_99:
      *(_QWORD *)v94 = v96;
      v94 += 8;
      if (!--v90)
      {
        v3 = v300;
        v117 = v300[9];
        v118 = v300[10];
        while (1)
        {
          if (v118 == v117)
          {
            v140 = (void *)v3[8];
            v3[8] = v91;
            v3[9] = v93;
            v3[10] = v94;
            v3[11] = v92;
            if (v140)
            {
              operator delete(v140);
              v141 = v3[12];
              v93 = (char *)v3[9];
              v94 = (char *)v3[10];
            }
            else
            {
              v141 = v3[12];
            }
            v4 = v292;
            a1 = v295;
            v89 = v289;
            v143 = v3[13];
            v145 = v141 + v143;
            v144 = &v93[8 * ((v141 + v143) >> 10)];
            if (v94 == v93)
            {
              v142 = 0;
              if (v289)
                goto LABEL_157;
            }
            else if (v289)
            {
              v142 = *(_QWORD *)v144 + 4 * (v145 & 0x3FF);
              goto LABEL_157;
            }
            goto LABEL_172;
          }
          if (v93 == v91)
            break;
LABEL_126:
          v119 = *(_QWORD *)(v118 - 8);
          v118 -= 8;
          *((_QWORD *)v93 - 1) = v119;
          v93 -= 8;
          v117 = v3[9];
        }
        if (v94 < v92)
        {
          v120 = (v92 - v94) >> 3;
          if (v120 >= -1)
            v121 = v120 + 1;
          else
            v121 = v120 + 2;
          v122 = v121 >> 1;
          v93 = &v91[8 * (v121 >> 1)];
          v123 = v91;
          if (v94 != v91)
          {
            memmove(v93, v91, v94 - v91);
            v123 = v94;
          }
          v94 = &v123[8 * v122];
          goto LABEL_125;
        }
        v124 = (v92 - v91) >> 2;
        if (v92 == v91)
          v124 = 1;
        if (v124 >> 61)
          goto LABEL_294;
        v125 = (v124 + 3) >> 2;
        v126 = 8 * v124;
        v127 = (char *)operator new(8 * v124);
        v128 = v127;
        v93 = &v127[8 * v125];
        v92 = &v127[v126];
        v129 = v94 - v91;
        v54 = v94 == v91;
        v94 = v93;
        if (!v54)
        {
          v94 = &v93[v129 & 0xFFFFFFFFFFFFFFF8];
          v130 = v129 - 8;
          v131 = &v127[8 * v125];
          v132 = v91;
          if (v130 >= 0x38)
          {
            v131 = &v127[8 * v125];
            v132 = v91;
            if ((unint64_t)(v131 - v91) >= 0x20)
            {
              v133 = (v130 >> 3) + 1;
              v134 = 8 * (v133 & 0x3FFFFFFFFFFFFFFCLL);
              v131 = &v93[v134];
              v135 = (__int128 *)(v91 + 16);
              v136 = &v127[8 * v125 + 16];
              v137 = v133 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v138 = *v135;
                *((_OWORD *)v136 - 1) = *(v135 - 1);
                *(_OWORD *)v136 = v138;
                v135 += 2;
                v136 += 32;
                v137 -= 4;
              }
              while (v137);
              if (v133 != (v133 & 0x3FFFFFFFFFFFFFFCLL))
              {
                v132 = &v91[v134];
                goto LABEL_145;
              }
LABEL_147:
              operator delete(v91);
LABEL_148:
              v91 = v128;
LABEL_125:
              v3 = v300;
              goto LABEL_126;
            }
          }
          do
          {
LABEL_145:
            v139 = *(_QWORD *)v132;
            v132 += 8;
            *(_QWORD *)v131 = v139;
            v131 += 8;
          }
          while (v131 != v94);
        }
        if (v91)
          goto LABEL_147;
        goto LABEL_148;
      }
    }
  }
  v142 = 0;
  v143 = v3[13];
  v144 = (char *)((v143 >> 7) & 0x1FFFFFFFFFFFFF8);
LABEL_157:
  v146 = v89 + ((v142 - *(_QWORD *)v144) >> 2);
  if (v146 < 1)
  {
    v148 = 1023 - v146;
    LOWORD(v146) = ~(1023 - v146);
    v147 = &v144[-8 * (v148 >> 10)];
  }
  else
  {
    v147 = &v144[8 * ((unint64_t)v146 >> 10)];
  }
  v149 = *(_QWORD *)v147 + 4 * (v146 & 0x3FF);
  if (v142 != v149)
  {
    do
    {
      v150 = v149;
      if (v144 != v147)
        v150 = *(_QWORD *)v144 + 4096;
      if (v142 == v150)
      {
        v150 = v142;
      }
      else
      {
        v151 = *(char **)v82;
        v152 = (_DWORD *)v142;
        do
        {
          v153 = *(_DWORD *)v83;
          v83 += 4;
          *v152++ = v153;
          if (v83 - v151 == 4096)
          {
            v154 = (char *)*((_QWORD *)v82 + 1);
            v82 += 8;
            v151 = v154;
            v83 = v154;
          }
        }
        while (v152 != (_DWORD *)v150);
      }
      v143 += (v150 - v142) >> 2;
      if (v144 == v147)
        break;
      v155 = *((_QWORD *)v144 + 1);
      v144 += 8;
      v142 = v155;
    }
    while (v155 != v149);
    v3[13] = v143;
  }
LABEL_172:
  *((_DWORD *)v3 + 28) = v4[28];
  *((_DWORD *)v3 + 30) = v4[30];
  v3[16] = *((_QWORD *)v4 + 16);
  *(_OWORD *)(v3 + 17) = 0u;
  *(_OWORD *)(v3 + 19) = 0u;
  *(_OWORD *)(v3 + 21) = 0u;
  v156 = *((_QWORD *)v4 + 21);
  v157 = *((_QWORD *)v4 + 18);
  if (*((_QWORD *)v4 + 19) == v157)
    goto LABEL_258;
  v158 = *(_QWORD *)(v157 + 8 * (v156 / 0x71)) + 36 * (v156 % 0x71);
  v159 = *((_QWORD *)v4 + 22) + v156;
  v160 = (_QWORD *)(v157 + 8 * (v159 / 0x71));
  v161 = *v160 + 36 * (v159 % 0x71);
  if (v161 == v158)
    goto LABEL_258;
  v162 = (_QWORD *)(v157 + 8 * (v156 / 0x71));
  v163 = 113 * (v160 - v162)
       - 0x71C71C71C71C71C7 * ((uint64_t)(v161 - *v160) >> 2)
       + 0x71C71C71C71C71C7 * ((uint64_t)(v158 - *v162) >> 2);
  if (!v163)
    goto LABEL_258;
  v164 = (v163 + 1) / 0x71uLL;
  if (-113 * v164 == ~v163)
    v165 = (v163 + 1) / 0x71uLL;
  else
    v165 = v164 + 1;
  if (!v165)
  {
    v217 = 0;
    v218 = v3[22];
    v219 = (char *)(((unint64_t)((v218 * (unsigned __int128)0x90FDBC090FDBC091) >> 64) >> 3) & 0x1FFFFFFFFFFFFFF8);
    goto LABEL_240;
  }
  v290 = 113 * (v160 - v162)
       - 0x71C71C71C71C71C7 * ((uint64_t)(v161 - *v160) >> 2)
       + 0x71C71C71C71C71C7 * ((uint64_t)(v158 - *v162) >> 2);
  v293 = v4;
  v296 = a1;
  v166 = (char *)operator new(8 * v165);
  v167 = &v166[8 * v165];
  v168 = v166;
  v169 = v166;
  while (2)
  {
    v171 = operator new(0xFE4uLL);
    if (v169 == v167)
    {
      if (v168 > v166)
      {
        v172 = (v168 - v166) >> 3;
        if (v172 >= -1)
          v173 = v172 + 1;
        else
          v173 = v172 + 2;
        v174 = v173 >> 1;
        v175 = &v168[-8 * (v173 >> 1)];
        v176 = v167;
        if (v167 != v168)
        {
          memmove(v175, v168, v167 - v168);
          v176 = v168;
        }
        v170 = -v174;
        v169 = &v175[v167 - v168];
        v168 = &v176[8 * v170];
        goto LABEL_183;
      }
      v177 = (v167 - v166) >> 2;
      if (v167 == v166)
        v177 = 1;
      if (v177 >> 61)
        goto LABEL_294;
      v178 = v177 >> 2;
      v299 = 8 * v177;
      v179 = (char *)operator new(8 * v177);
      v180 = v179;
      v181 = &v179[8 * v178];
      v169 = v181;
      v182 = v167 - v168;
      if (v167 != v168)
      {
        v169 = &v181[v182 & 0xFFFFFFFFFFFFFFF8];
        v183 = v182 - 8;
        if (v183 >= 0x38)
        {
          if ((unint64_t)(&v179[8 * v178] - v168) < 0x20)
          {
            v184 = &v179[8 * v178];
            goto LABEL_203;
          }
          v185 = (v183 >> 3) + 1;
          v186 = 8 * (v185 & 0x3FFFFFFFFFFFFFFCLL);
          v184 = &v181[v186];
          v187 = (__int128 *)(v168 + 16);
          v188 = &v179[8 * v178 + 16];
          v189 = v185 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v190 = *v187;
            *((_OWORD *)v188 - 1) = *(v187 - 1);
            *(_OWORD *)v188 = v190;
            v187 += 2;
            v188 += 32;
            v189 -= 4;
          }
          while (v189);
          if (v185 != (v185 & 0x3FFFFFFFFFFFFFFCLL))
          {
            v168 += v186;
            goto LABEL_203;
          }
        }
        else
        {
          v184 = &v179[8 * v178];
          do
          {
LABEL_203:
            v191 = *(_QWORD *)v168;
            v168 += 8;
            *(_QWORD *)v184 = v191;
            v184 += 8;
          }
          while (v184 != v169);
        }
      }
      v167 = &v179[v299];
      v168 = &v179[8 * v178];
      if (v166)
        operator delete(v166);
      v166 = v180;
    }
LABEL_183:
    *(_QWORD *)v169 = v171;
    v169 += 8;
    if (--v165)
      continue;
    break;
  }
  v3 = v300;
  v192 = v300[18];
  v193 = v300[19];
  while (2)
  {
    if (v193 != v192)
    {
      if (v168 != v166)
        goto LABEL_210;
      if (v169 < v167)
      {
        v195 = (v167 - v169) >> 3;
        if (v195 >= -1)
          v196 = v195 + 1;
        else
          v196 = v195 + 2;
        v197 = v196 >> 1;
        v168 = &v166[8 * (v196 >> 1)];
        v198 = v166;
        if (v169 != v166)
        {
          memmove(v168, v166, v169 - v166);
          v198 = v169;
        }
        v169 = &v198[8 * v197];
LABEL_209:
        v3 = v300;
LABEL_210:
        v194 = *(_QWORD *)(v193 - 8);
        v193 -= 8;
        *((_QWORD *)v168 - 1) = v194;
        v168 -= 8;
        v192 = v3[18];
        continue;
      }
      v199 = (v167 - v166) >> 2;
      if (v167 == v166)
        v199 = 1;
      if (v199 >> 61)
        goto LABEL_294;
      v200 = (v199 + 3) >> 2;
      v201 = 8 * v199;
      v202 = (char *)operator new(8 * v199);
      v203 = v202;
      v168 = &v202[8 * v200];
      v167 = &v202[v201];
      v204 = v169 - v166;
      v54 = v169 == v166;
      v169 = v168;
      if (!v54)
      {
        v169 = &v168[v204 & 0xFFFFFFFFFFFFFFF8];
        v205 = v204 - 8;
        v206 = &v202[8 * v200];
        v207 = v166;
        if (v205 >= 0x38)
        {
          v206 = &v202[8 * v200];
          v207 = v166;
          if ((unint64_t)(v206 - v166) >= 0x20)
          {
            v208 = (v205 >> 3) + 1;
            v209 = 8 * (v208 & 0x3FFFFFFFFFFFFFFCLL);
            v206 = &v168[v209];
            v210 = (__int128 *)(v166 + 16);
            v211 = &v202[8 * v200 + 16];
            v212 = v208 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v213 = *v210;
              *((_OWORD *)v211 - 1) = *(v210 - 1);
              *(_OWORD *)v211 = v213;
              v210 += 2;
              v211 += 32;
              v212 -= 4;
            }
            while (v212);
            if (v208 != (v208 & 0x3FFFFFFFFFFFFFFCLL))
            {
              v207 = &v166[v209];
              goto LABEL_229;
            }
LABEL_231:
            operator delete(v166);
LABEL_232:
            v166 = v203;
            goto LABEL_209;
          }
        }
        do
        {
LABEL_229:
          v214 = *(_QWORD *)v207;
          v207 += 8;
          *(_QWORD *)v206 = v214;
          v206 += 8;
        }
        while (v206 != v169);
      }
      if (v166)
        goto LABEL_231;
      goto LABEL_232;
    }
    break;
  }
  v215 = (void *)v3[17];
  v3[17] = v166;
  v3[18] = v168;
  v3[19] = v169;
  v3[20] = v167;
  if (v215)
  {
    operator delete(v215);
    v216 = v3[21];
    v168 = (char *)v3[18];
    v169 = (char *)v3[19];
  }
  else
  {
    v216 = v3[21];
  }
  v4 = v293;
  a1 = v296;
  v163 = v290;
  v218 = v3[22];
  v220 = v216 + v218;
  v221 = (v216 + v218) / 0x71;
  v219 = &v168[8 * v221];
  if (v169 == v168)
    v217 = 0;
  else
    v217 = *(_QWORD *)v219 + 36 * (v220 - 113 * v221);
LABEL_240:
  v222 = (v217 - *(_QWORD *)v219) / 36 + v163;
  if (v222 < 1)
  {
    v225 = 112 - v222;
    v223 = &v219[-8 * (v225 / 0x71)];
    v224 = *(_QWORD *)v223 + 36 * (112 - v225 % 0x71);
    if (v217 != v224)
      goto LABEL_247;
  }
  else
  {
    v223 = &v219[8 * (v222 / 0x71uLL)];
    v224 = *(_QWORD *)v223 + 36 * (v222 % 0x71uLL);
    if (v217 == v224)
      goto LABEL_258;
    do
    {
LABEL_247:
      v226 = v224;
      if (v219 != v223)
        v226 = *(_QWORD *)v219 + 4068;
      if (v217 == v226)
      {
        v226 = v217;
      }
      else
      {
        v227 = v217;
        do
        {
          v228 = *(_OWORD *)v158;
          v229 = *(_OWORD *)(v158 + 16);
          *(_DWORD *)(v227 + 32) = *(_DWORD *)(v158 + 32);
          *(_OWORD *)v227 = v228;
          *(_OWORD *)(v227 + 16) = v229;
          v158 += 36;
          if (v158 - *v162 == 4068)
          {
            v230 = v162[1];
            ++v162;
            v158 = v230;
          }
          v227 += 36;
        }
        while (v227 != v226);
        v218 = v3[22];
      }
      v218 -= 0x71C71C71C71C71C7 * ((v226 - v217) >> 2);
      v3[22] = v218;
      if (v219 == v223)
        break;
      v231 = *((_QWORD *)v219 + 1);
      v219 += 8;
      v217 = v231;
    }
    while (v231 != v224);
  }
LABEL_258:
  v3[23] = 0;
  v3[24] = 0;
  v3[25] = 0;
  v233 = (_BYTE *)*((_QWORD *)v4 + 23);
  v232 = (_BYTE *)*((_QWORD *)v4 + 24);
  v234 = v232 - v233;
  if (v232 != v233)
  {
    if (0xAAAAAAAAAAAAAAABLL * (v234 >> 2) >= 0x1555555555555556)
      abort();
    v235 = (char *)operator new(v234);
    v300[23] = v235;
    v300[24] = v235;
    v300[25] = &v235[4 * (v234 >> 2)];
    v236 = 12 * ((v234 - 12) / 0xCuLL) + 12;
    memcpy(v235, v233, v236);
    v237 = &v235[v236];
    v3 = v300;
    v300[24] = v237;
  }
  v238 = *((_QWORD *)v4 + 26);
  *(_OWORD *)(v3 + 27) = 0u;
  v3[26] = v238;
  *(_OWORD *)(v3 + 29) = 0u;
  *(_OWORD *)(v3 + 31) = 0u;
  v239 = *((_QWORD *)v4 + 31);
  v240 = *((_QWORD *)v4 + 28);
  v241 = (_QWORD *)(v240 + 8 * (v239 / 0x155));
  if (*((_QWORD *)v4 + 29) == v240)
  {
    v242 = 0;
  }
  else
  {
    v242 = (uint64_t *)(*(_QWORD *)(v240 + 8 * (v239 / 0x155)) + 12 * (v239 % 0x155));
    v243 = *((_QWORD *)v4 + 32) + v239;
    v244 = (_QWORD *)(v240 + 8 * (v243 / 0x155));
    v245 = *v244 + 12 * (v243 % 0x155);
    if ((uint64_t *)v245 != v242)
    {
      v246 = 341 * (v244 - v241)
           - 0x5555555555555555 * ((uint64_t)(v245 - *v244) >> 2)
           + 0x5555555555555555 * (((uint64_t)v242 - *v241) >> 2);
      goto LABEL_266;
    }
  }
  v246 = 0;
LABEL_266:
  sub_1C98F1520((uint64_t)(v3 + 27), v241, v242, v246);
  v247 = v4[70];
  v248 = (4 * v247 + 31) & 0x7FFFFFFE0;
  v3[33] = 0;
  v3[34] = v248 >> 2;
  memptr = 0;
  malloc_type_posix_memalign(&memptr, 0x20uLL, v248, 0x49090899uLL);
  v249 = memptr;
  v3[33] = memptr;
  if ((_DWORD)v247)
    memcpy(v249, *((const void **)v4 + 33), 4 * v247);
  *((_DWORD *)v3 + 70) = v4[70];
  v250 = v4[76];
  v251 = (4 * v250 + 31) & 0x7FFFFFFE0;
  v3[36] = 0;
  v3[37] = v251 >> 2;
  memptr = 0;
  malloc_type_posix_memalign(&memptr, 0x20uLL, v251, 0x49090899uLL);
  v252 = memptr;
  v3[36] = memptr;
  if ((_DWORD)v250)
    memcpy(v252, *((const void **)v4 + 36), 4 * v250);
  *((_DWORD *)v3 + 76) = v4[76];
  v253 = *(_OWORD *)(v4 + 78);
  v254 = *(_OWORD *)(v4 + 82);
  *(_OWORD *)((char *)v3 + 340) = *(_OWORD *)(v4 + 85);
  *(_OWORD *)(v3 + 39) = v253;
  *(_OWORD *)(v3 + 41) = v254;
  v255 = v4[94];
  v256 = (4 * v255 + 31) & 0x7FFFFFFE0;
  v3[45] = 0;
  v3[46] = v256 >> 2;
  memptr = 0;
  malloc_type_posix_memalign(&memptr, 0x20uLL, v256, 0x49090899uLL);
  v257 = memptr;
  v3[45] = memptr;
  if ((_DWORD)v255)
    memcpy(v257, *((const void **)v4 + 45), 4 * v255);
  *((_DWORD *)v3 + 94) = v4[94];
  v3[48] = *((_QWORD *)v4 + 48);
  v258 = *((_QWORD *)v4 + 49);
  v3[49] = v258;
  if (v258)
  {
    v259 = (unint64_t *)(v258 + 8);
    do
      v260 = __ldxr(v259);
    while (__stxr(v260 + 1, v259));
  }
  v3[50] = *((_QWORD *)v4 + 50);
  v261 = *((_QWORD *)v4 + 51);
  v3[51] = v261;
  if (v261)
  {
    v262 = (unint64_t *)(v261 + 8);
    do
      v263 = __ldxr(v262);
    while (__stxr(v263 + 1, v262));
  }
  v3[52] = *((_QWORD *)v4 + 52);
  *(_OWORD *)(v3 + 55) = 0u;
  *(_OWORD *)(v3 + 57) = 0u;
  *(_OWORD *)(v3 + 53) = 0u;
  v264 = *((_QWORD *)v4 + 57);
  v265 = *((_QWORD *)v4 + 54);
  v266 = (_QWORD *)(v265 + 8 * (v264 / 0x155));
  if (*((_QWORD *)v4 + 55) == v265)
  {
    v267 = 0;
  }
  else
  {
    v267 = (uint64_t *)(*(_QWORD *)(v265 + 8 * (v264 / 0x155)) + 12 * (v264 % 0x155));
    v268 = *((_QWORD *)v4 + 58) + v264;
    v269 = (_QWORD *)(v265 + 8 * (v268 / 0x155));
    v270 = *v269 + 12 * (v268 % 0x155);
    if ((uint64_t *)v270 != v267)
    {
      v271 = 341 * (v269 - v266)
           - 0x5555555555555555 * ((uint64_t)(v270 - *v269) >> 2)
           + 0x5555555555555555 * (((uint64_t)v267 - *v266) >> 2);
      goto LABEL_283;
    }
  }
  v271 = 0;
LABEL_283:
  sub_1C98F1520((uint64_t)(v3 + 53), v266, v267, v271);
  v3[59] = *((_QWORD *)v4 + 59);
  *((_OWORD *)v3 + 30) = 0u;
  *((_OWORD *)v3 + 31) = 0u;
  *((_OWORD *)v3 + 32) = 0u;
  v272 = *((_QWORD *)v4 + 64);
  v273 = *((_QWORD *)v4 + 61);
  v274 = (char *)(v273 + 8 * (v272 >> 10));
  if (*((_QWORD *)v4 + 62) == v273)
  {
    v275 = 0;
  }
  else
  {
    v275 = (int *)(*(_QWORD *)v274 + 4 * (*((_QWORD *)v4 + 64) & 0x3FFLL));
    v276 = *((_QWORD *)v4 + 65) + v272;
    v277 = (char *)(v273 + 8 * (v276 >> 10));
    v278 = *(_QWORD *)v277 + 4 * (v276 & 0x3FF);
    if ((int *)v278 != v275)
    {
      v279 = ((v278 - *(_QWORD *)v277) >> 2) + ((v277 - v274) << 7) - ((4 * (*((_QWORD *)v4 + 64) & 0x3FFLL)) >> 2);
      goto LABEL_288;
    }
  }
  v279 = 0;
LABEL_288:
  sub_1C98F2034((uint64_t)(v3 + 60), v274, v275, v279);
  v3[66] = *((_QWORD *)v4 + 66);
  *(_OWORD *)(v3 + 69) = 0u;
  *(_OWORD *)(v3 + 71) = 0u;
  *(_OWORD *)(v3 + 67) = 0u;
  v280 = *((_QWORD *)v4 + 68);
  v281 = *((_QWORD *)v4 + 71);
  v282 = (char *)(v280 + 8 * (v281 >> 10));
  if (*((_QWORD *)v4 + 69) == v280)
  {
    v283 = 0;
    goto LABEL_292;
  }
  v283 = (int *)(*(_QWORD *)v282 + 4 * (*((_QWORD *)v4 + 71) & 0x3FFLL));
  v284 = *((_QWORD *)v4 + 72) + v281;
  v285 = (char *)(v280 + 8 * (v284 >> 10));
  v286 = *(_QWORD *)v285 + 4 * (v284 & 0x3FF);
  if ((int *)v286 == v283)
  {
LABEL_292:
    v287 = 0;
    goto LABEL_293;
  }
  v287 = ((v286 - *(_QWORD *)v285) >> 2) + ((v285 - v282) << 7) - ((4 * (*((_QWORD *)v4 + 71) & 0x3FFLL)) >> 2);
LABEL_293:
  sub_1C98F2034((uint64_t)(v3 + 67), v282, v283, v287);
  *a1 = v3;
  std::mutex::unlock(&stru_1ED52AC30);
}

void sub_1C98EF554()
{
  unsigned __int8 v0;
  std::__shared_weak_count *v1;
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;
  uint64_t v5;
  unsigned __int8 v6;
  int v7;
  unsigned __int8 v8;
  int v9;
  unsigned __int8 v10;
  float v11;
  float v12;
  BOOL v13;
  float v14;
  unsigned __int8 v15;
  int v16;
  unsigned __int8 v17;
  float v18;
  unsigned __int8 v19;
  float v20;
  float v21;
  float v22;
  float v23;
  unsigned __int8 v24;
  int v25;
  unsigned __int8 v26;
  float v27;
  unsigned __int8 v28;
  float v29;
  unsigned __int8 v30;
  float v31;
  unsigned __int8 v32;
  float v33;
  unsigned __int8 v34;
  unsigned __int8 v35;
  float v36;
  unsigned __int8 v37;
  int v38;
  float v39;
  float v40;
  unsigned __int8 v41;
  int v42;
  unsigned __int8 v43;
  float v44;
  float v45;
  float v46;
  unsigned __int8 v47;
  int v48;
  unsigned __int8 v49;
  float v50;
  float v51;
  float v52;
  std::__shared_weak_count *v53;
  unint64_t *p_shared_owners;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unsigned __int8 v57;
  unsigned __int8 v58;
  float v59;
  unsigned __int8 v60;
  float v61;
  float v62;
  float v63;
  uint64_t v64;
  void **v65;
  unint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  void *v73;
  uint64_t v74;
  unint64_t v75;
  _QWORD *v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  _QWORD *v80;
  uint64_t v81;
  _OWORD *v82;
  __int128 v83;
  void *v84;
  void **v85;
  void *v86;
  int64_t v87;
  unint64_t v88;
  _QWORD *v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  _QWORD *v94;
  uint64_t v95;
  _OWORD *v96;
  __int128 v97;
  void *v98;
  void *v99;
  _QWORD *v100;
  void **v101;
  uint64_t v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  char *v107;
  char *v108;
  void *v109;
  int64_t v110;
  unint64_t v111;
  _QWORD *v112;
  uint64_t v113;
  _QWORD *v114;
  uint64_t v115;
  unint64_t v116;
  uint64_t v117;
  uint64_t v118;
  _OWORD *v119;
  __int128 v120;
  uint64_t v121;
  unsigned __int8 v122;
  int v123;
  unsigned __int8 v124;
  std::__shared_weak_count *v125;
  float v126;
  unsigned __int8 v127;
  float v128;
  unsigned __int8 v129;
  float v130;
  unsigned __int8 v131;
  float v132;
  unsigned __int8 v133;
  unsigned __int8 v134;
  float v135;
  unsigned __int8 v136;
  int v137;
  float v138;
  float v139;
  void *v140;
  void *v141;
  void *v142;
  unsigned __int8 v143;
  float v144;
  cva::ArrayHandler *v145;
  unint64_t *v146;
  unint64_t v147;
  unsigned __int8 v148;
  float v149;
  unsigned __int8 v150;
  std::__shared_weak_count *v151;
  unint64_t *v152;
  unint64_t v153;
  unint64_t *v154;
  unint64_t v155;
  unsigned __int8 v156;
  float v157;
  unsigned __int8 v158;
  float v159;
  unsigned __int8 v160;
  std::__shared_weak_count *v161;
  unint64_t *v162;
  unint64_t v163;
  unint64_t v164;
  unint64_t v165;
  unint64_t v166;
  unint64_t v167;
  unsigned __int8 v168;
  int v169;
  unsigned __int8 v170;
  float v171;
  float v172;
  float v173;
  void **v174;
  uint64_t v175;
  unint64_t v176;
  uint64_t v177;
  uint64_t v178;
  char *v179;
  char *v180;
  char *v181;
  void *v182;
  int64_t v183;
  unint64_t v184;
  _QWORD *v185;
  uint64_t v186;
  _QWORD *v187;
  uint64_t v188;
  unint64_t v189;
  uint64_t v190;
  uint64_t v191;
  _OWORD *v192;
  __int128 v193;
  uint64_t v194;
  unsigned __int8 v195;
  float v196;
  float v197;
  float v198;
  uint64_t v199;
  void **v200;
  unint64_t v201;
  unint64_t v202;
  uint64_t v203;
  uint64_t v204;
  unint64_t v205;
  uint64_t v206;
  uint64_t v207;
  void *v208;
  uint64_t v209;
  unint64_t v210;
  _QWORD *v211;
  uint64_t v212;
  unint64_t v213;
  uint64_t v214;
  _QWORD *v215;
  uint64_t v216;
  _OWORD *v217;
  __int128 v218;
  void *v219;
  void **v220;
  void *v221;
  int64_t v222;
  unint64_t v223;
  _QWORD *v224;
  uint64_t v225;
  uint64_t v226;
  unint64_t v227;
  uint64_t v228;
  _QWORD *v229;
  uint64_t v230;
  _OWORD *v231;
  __int128 v232;
  void *v233;
  unsigned __int8 v234;
  uint64_t v235;
  unsigned __int8 v236;
  int v237;
  unsigned __int8 v238;
  float v239;
  float v240;
  uint64_t v241;
  void **v242;
  unint64_t v243;
  unint64_t v244;
  uint64_t v245;
  uint64_t v246;
  unint64_t v247;
  uint64_t v248;
  uint64_t v249;
  void *v250;
  uint64_t v251;
  unint64_t v252;
  _QWORD *v253;
  uint64_t v254;
  unint64_t v255;
  uint64_t v256;
  _QWORD *v257;
  uint64_t v258;
  _OWORD *v259;
  __int128 v260;
  void *v261;
  void **v262;
  void *v263;
  int64_t v264;
  unint64_t v265;
  _QWORD *v266;
  uint64_t v267;
  uint64_t v268;
  unint64_t v269;
  uint64_t v270;
  _QWORD *v271;
  uint64_t v272;
  _OWORD *v273;
  __int128 v274;
  void *v275;
  uint64_t v276;
  void **v277;
  unint64_t v278;
  unint64_t v279;
  uint64_t v280;
  uint64_t v281;
  unint64_t v282;
  uint64_t v283;
  uint64_t v284;
  void *v285;
  uint64_t v286;
  unint64_t v287;
  _QWORD *v288;
  uint64_t v289;
  unint64_t v290;
  uint64_t v291;
  _QWORD *v292;
  uint64_t v293;
  _OWORD *v294;
  __int128 v295;
  void *v296;
  void **v297;
  void *v298;
  int64_t v299;
  unint64_t v300;
  _QWORD *v301;
  uint64_t v302;
  uint64_t v303;
  unint64_t v304;
  uint64_t v305;
  _QWORD *v306;
  uint64_t v307;
  _OWORD *v308;
  __int128 v309;
  void *v310;
  std::__shared_weak_count *v311;
  unint64_t v312;
  unint64_t *v313;
  unint64_t v314;
  unint64_t v315;
  std::__shared_weak_count *v316;
  unint64_t *v317;
  unint64_t v318;
  void *v319;
  uint64_t v320;
  unint64_t v321;
  unint64_t v322;
  unint64_t *v323;
  unint64_t v324;
  cva::ArrayHandler *v325;
  _OWORD *v326;
  std::__shared_weak_count *v327;
  std::__shared_weak_count *v328;
  std::__shared_weak_count *v329;
  uint64_t v330;
  uint64_t v331;
  int v332;
  cva::ArrayHandler *v333;
  std::__shared_weak_count *v334;
  cva::ArrayHandler *v335;
  std::__shared_weak_count *v336;

  v0 = atomic_load((unsigned __int8 *)&qword_1ED52AD78);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_1ED52AD78))
  {
    sub_1C98D9758();
    __cxa_guard_release(&qword_1ED52AD78);
  }
  v2 = qword_1ED52AD80;
  v1 = *(std::__shared_weak_count **)algn_1ED52AD88;
  if (*(_QWORD *)algn_1ED52AD88)
  {
    v3 = (unint64_t *)(*(_QWORD *)algn_1ED52AD88 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  v327 = v1;
  v5 = operator new();
  v6 = atomic_load((unsigned __int8 *)&qword_1ED52ACD8);
  v325 = (cva::ArrayHandler *)v2;
  if ((v6 & 1) == 0 && __cxa_guard_acquire(&qword_1ED52ACD8))
  {
    sub_1C98CFF14();
    __cxa_guard_release(&qword_1ED52ACD8);
  }
  v7 = *(_DWORD *)(qword_1ED52ACB8 + 124);
  v8 = atomic_load((unsigned __int8 *)&qword_1ED52ACD8);
  if ((v8 & 1) == 0 && __cxa_guard_acquire(&qword_1ED52ACD8))
  {
    sub_1C98CFF14();
    __cxa_guard_release(&qword_1ED52ACD8);
  }
  v9 = *(_DWORD *)(qword_1ED52ACB8 + 208);
  v10 = atomic_load((unsigned __int8 *)&qword_1ED52ACD8);
  if ((v10 & 1) == 0 && __cxa_guard_acquire(&qword_1ED52ACD8))
  {
    sub_1C98CFF14();
    __cxa_guard_release(&qword_1ED52ACD8);
  }
  v11 = *(float *)(qword_1ED52ACB8 + 212);
  *(_DWORD *)v5 = v7;
  v12 = 1.5 / v11;
  v13 = v11 <= 0.000001;
  v14 = 1500000.0;
  if (!v13)
    v14 = v12;
  *(_OWORD *)(v5 + 4) = 0u;
  *(_OWORD *)(v5 + 20) = 0u;
  *(_OWORD *)(v5 + 36) = 0u;
  *(_DWORD *)(v5 + 52) = 0;
  *(_DWORD *)(v5 + 56) = v7;
  *(float *)(v5 + 60) = v14;
  *(_OWORD *)(v5 + 64) = 0u;
  *(_OWORD *)(v5 + 80) = 0u;
  *(_OWORD *)(v5 + 96) = 0u;
  *(_DWORD *)(v5 + 112) = 1135869952;
  *(_DWORD *)(v5 + 120) = v9;
  v15 = atomic_load((unsigned __int8 *)&qword_1ED52ACD8);
  if ((v15 & 1) == 0 && __cxa_guard_acquire(&qword_1ED52ACD8))
  {
    sub_1C98CFF14();
    __cxa_guard_release(&qword_1ED52ACD8);
  }
  v16 = *(_DWORD *)(qword_1ED52ACB8 + 116);
  v17 = atomic_load((unsigned __int8 *)&qword_1ED52ACD8);
  if ((v17 & 1) == 0 && __cxa_guard_acquire(&qword_1ED52ACD8))
  {
    sub_1C98CFF14();
    __cxa_guard_release(&qword_1ED52ACD8);
  }
  v18 = *(float *)(qword_1ED52ACB8 + 128);
  v19 = atomic_load((unsigned __int8 *)&qword_1ED52ACD8);
  if ((v19 & 1) == 0 && __cxa_guard_acquire(&qword_1ED52ACD8))
  {
    sub_1C98CFF14();
    __cxa_guard_release(&qword_1ED52ACD8);
  }
  v20 = *(float *)(qword_1ED52ACB8 + 132);
  *(_OWORD *)(v5 + 216) = 0u;
  *(_DWORD *)(v5 + 128) = v16;
  v21 = v20 / 57.296;
  v22 = 1.5 / v21;
  v13 = v21 <= 0.000001;
  v23 = 1500000.0;
  if (v13)
    v22 = 1500000.0;
  *(float *)(v5 + 132) = v22;
  *(_OWORD *)(v5 + 136) = 0uLL;
  *(_OWORD *)(v5 + 152) = 0uLL;
  *(_OWORD *)(v5 + 168) = 0uLL;
  *(_OWORD *)(v5 + 184) = 0uLL;
  *(_QWORD *)(v5 + 200) = 0;
  if (v18 > 0.000001)
    v23 = 1.5 / v18;
  *(_DWORD *)(v5 + 208) = v16;
  *(float *)(v5 + 212) = v23;
  *(_OWORD *)(v5 + 232) = 0uLL;
  *(_OWORD *)(v5 + 248) = 0uLL;
  v24 = atomic_load((unsigned __int8 *)&qword_1ED52ACD8);
  if ((v24 & 1) == 0 && __cxa_guard_acquire(&qword_1ED52ACD8))
  {
    sub_1C98CFF14();
    __cxa_guard_release(&qword_1ED52ACD8);
  }
  v25 = *(_DWORD *)(qword_1ED52ACB8 + 136);
  v26 = atomic_load((unsigned __int8 *)&qword_1ED52ACD8);
  if ((v26 & 1) == 0 && __cxa_guard_acquire(&qword_1ED52ACD8))
  {
    sub_1C98CFF14();
    __cxa_guard_release(&qword_1ED52ACD8);
  }
  v27 = *(float *)(qword_1ED52ACB8 + 140);
  v28 = atomic_load((unsigned __int8 *)&qword_1ED52ACD8);
  if ((v28 & 1) == 0 && __cxa_guard_acquire(&qword_1ED52ACD8))
  {
    sub_1C98CFF14();
    __cxa_guard_release(&qword_1ED52ACD8);
  }
  v29 = *(float *)(qword_1ED52ACB8 + 144);
  v30 = atomic_load((unsigned __int8 *)&qword_1ED52ACD8);
  if ((v30 & 1) == 0 && __cxa_guard_acquire(&qword_1ED52ACD8))
  {
    sub_1C98CFF14();
    __cxa_guard_release(&qword_1ED52ACD8);
  }
  v31 = *(float *)(qword_1ED52ACB8 + 148);
  v32 = atomic_load((unsigned __int8 *)&qword_1ED52ACD8);
  if ((v32 & 1) == 0 && __cxa_guard_acquire(&qword_1ED52ACD8))
  {
    sub_1C98CFF14();
    __cxa_guard_release(&qword_1ED52ACD8);
  }
  v33 = *(float *)(qword_1ED52ACB8 + 152);
  v34 = atomic_load((unsigned __int8 *)&qword_1ED52ACD8);
  if ((v34 & 1) == 0 && __cxa_guard_acquire(&qword_1ED52ACD8))
  {
    sub_1C98CFF14();
    __cxa_guard_release(&qword_1ED52ACD8);
  }
  v35 = atomic_load((unsigned __int8 *)&qword_1ED52ACD8);
  if ((v35 & 1) == 0 && __cxa_guard_acquire(&qword_1ED52ACD8))
  {
    sub_1C98CFF14();
    __cxa_guard_release(&qword_1ED52ACD8);
  }
  v36 = *(float *)(qword_1ED52ACB8 + 160);
  v37 = atomic_load((unsigned __int8 *)&qword_1ED52ACD8);
  if ((v37 & 1) == 0 && __cxa_guard_acquire(&qword_1ED52ACD8))
  {
    sub_1C98CFF14();
    __cxa_guard_release(&qword_1ED52ACD8);
  }
  v38 = *(_DWORD *)(qword_1ED52ACB8 + 164);
  *(_QWORD *)(v5 + 264) = 0;
  *(_QWORD *)(v5 + 272) = 0;
  *(_DWORD *)(v5 + 280) = 0;
  *(_QWORD *)(v5 + 288) = 0;
  *(_QWORD *)(v5 + 296) = 0;
  *(_DWORD *)(v5 + 304) = 0;
  *(_DWORD *)(v5 + 312) = v25;
  *(float *)(v5 + 316) = v27;
  *(float *)(v5 + 320) = v29;
  *(float *)(v5 + 324) = v31;
  *(float *)(v5 + 328) = v33;
  *(float *)(v5 + 332) = v36;
  *(float *)(v5 + 336) = v36;
  *(_DWORD *)(v5 + 340) = v38;
  v39 = 1.0 / (float)(v29 - v27);
  v40 = 1000000.0;
  if ((float)(v29 - v27) < 0.000001)
    v39 = 1000000.0;
  *(float *)(v5 + 344) = v39;
  if ((float)(v33 - v31) >= 0.000001)
    v40 = 1.0 / (float)(v33 - v31);
  *(float *)(v5 + 348) = v40;
  *(float *)(v5 + 352) = 1.0 / (float)(v36 + 1.0);
  *(_QWORD *)(v5 + 360) = 0;
  *(_QWORD *)(v5 + 368) = 0;
  *(_DWORD *)(v5 + 376) = 0;
  *(_OWORD *)(v5 + 384) = 0u;
  *(_OWORD *)(v5 + 400) = 0u;
  v41 = atomic_load((unsigned __int8 *)&qword_1ED52ACD8);
  if ((v41 & 1) == 0 && __cxa_guard_acquire(&qword_1ED52ACD8))
  {
    sub_1C98CFF14();
    __cxa_guard_release(&qword_1ED52ACD8);
  }
  v42 = *(_DWORD *)(qword_1ED52ACB8 + 116);
  v43 = atomic_load((unsigned __int8 *)&qword_1ED52ACD8);
  if ((v43 & 1) == 0 && __cxa_guard_acquire(&qword_1ED52ACD8))
  {
    sub_1C98CFF14();
    __cxa_guard_release(&qword_1ED52ACD8);
  }
  v44 = *(float *)(qword_1ED52ACB8 + 184);
  v45 = 1.5 / v44;
  v13 = v44 <= 0.000001;
  v46 = 1500000.0;
  if (!v13)
    v46 = v45;
  *(_DWORD *)(v5 + 416) = v42;
  *(float *)(v5 + 420) = v46;
  *(_OWORD *)(v5 + 440) = 0u;
  *(_OWORD *)(v5 + 456) = 0u;
  *(_OWORD *)(v5 + 424) = 0u;
  v326 = (_OWORD *)(v5 + 424);
  v47 = atomic_load((unsigned __int8 *)&qword_1ED52ACD8);
  if ((v47 & 1) == 0 && __cxa_guard_acquire(&qword_1ED52ACD8))
  {
    sub_1C98CFF14();
    __cxa_guard_release(&qword_1ED52ACD8);
  }
  v48 = *(_DWORD *)(qword_1ED52ACB8 + 116);
  v49 = atomic_load((unsigned __int8 *)&qword_1ED52ACD8);
  if ((v49 & 1) == 0 && __cxa_guard_acquire(&qword_1ED52ACD8))
  {
    sub_1C98CFF14();
    __cxa_guard_release(&qword_1ED52ACD8);
  }
  v50 = *(float *)(qword_1ED52ACB8 + 188);
  v51 = 1.5 / v50;
  v13 = v50 <= 0.000001;
  *(_DWORD *)(v5 + 472) = v48;
  v52 = 1500000.0;
  if (!v13)
    v52 = v51;
  *(float *)(v5 + 476) = v52;
  *(_OWORD *)(v5 + 480) = 0u;
  *(_OWORD *)(v5 + 496) = 0u;
  *(_OWORD *)(v5 + 512) = 0u;
  *(_DWORD *)(v5 + 528) = 15;
  *(_OWORD *)(v5 + 532) = 0u;
  *(_OWORD *)(v5 + 548) = 0u;
  *(_OWORD *)(v5 + 564) = 0u;
  *(_DWORD *)(v5 + 580) = 0;
  v53 = (std::__shared_weak_count *)operator new(0x30uLL);
  v53->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v53->__shared_owners_;
  v53->__shared_weak_owners_ = 0;
  v53->__vftable = (std::__shared_weak_count_vtbl *)&off_1E8295790;
  v53[1].__vftable = 0;
  v329 = v53;
  v330 = (uint64_t)&v53[1];
  v53[1].__shared_owners_ = 0;
  LODWORD(v53[1].__shared_weak_owners_) = 0;
  v55 = (std::__shared_weak_count *)operator new(0x30uLL);
  v55->__shared_owners_ = 0;
  v56 = (unint64_t *)&v55->__shared_owners_;
  v55->__shared_weak_owners_ = 0;
  v55->__vftable = (std::__shared_weak_count_vtbl *)&off_1E8295790;
  v55[1].__vftable = 0;
  v331 = (uint64_t)&v55[1];
  v55[1].__shared_owners_ = 0;
  v328 = v55;
  LODWORD(v55[1].__shared_weak_owners_) = 0;
  v57 = atomic_load((unsigned __int8 *)&qword_1ED52ACD8);
  if ((v57 & 1) == 0 && __cxa_guard_acquire(&qword_1ED52ACD8))
  {
    sub_1C98CFF14();
    __cxa_guard_release(&qword_1ED52ACD8);
  }
  v332 = *(_DWORD *)(qword_1ED52ACB8 + 116);
  v58 = atomic_load((unsigned __int8 *)&qword_1ED52ACD8);
  if ((v58 & 1) == 0 && __cxa_guard_acquire(&qword_1ED52ACD8))
  {
    sub_1C98CFF14();
    __cxa_guard_release(&qword_1ED52ACD8);
  }
  v59 = *(float *)(qword_1ED52ACB8 + 128);
  v60 = atomic_load((unsigned __int8 *)&qword_1ED52ACD8);
  if ((v60 & 1) == 0 && __cxa_guard_acquire(&qword_1ED52ACD8))
  {
    sub_1C98CFF14();
    __cxa_guard_release(&qword_1ED52ACD8);
  }
  v61 = *(float *)(qword_1ED52ACB8 + 132) / 57.296;
  v62 = 1.5 / v61;
  if (v61 <= 0.000001)
    v62 = 1500000.0;
  if (v59 <= 0.000001)
    v63 = 1500000.0;
  else
    v63 = 1.5 / v59;
  *(_DWORD *)(v5 + 128) = v332;
  *(float *)(v5 + 132) = v62;
  v65 = *(void ***)(v5 + 144);
  v64 = *(_QWORD *)(v5 + 152);
  *(_QWORD *)(v5 + 176) = 0;
  v66 = v64 - (_QWORD)v65;
  if ((unint64_t)(v64 - (_QWORD)v65) >= 0x11)
  {
    do
    {
      operator delete(*v65);
      v64 = *(_QWORD *)(v5 + 152);
      v65 = (void **)(*(_QWORD *)(v5 + 144) + 8);
      *(_QWORD *)(v5 + 144) = v65;
      v66 = v64 - (_QWORD)v65;
    }
    while ((unint64_t)(v64 - (_QWORD)v65) > 0x10);
  }
  v67 = v66 >> 3;
  if (v67 == 1)
  {
    v68 = 56;
  }
  else
  {
    if (v67 != 2)
      goto LABEL_53;
    v68 = 113;
  }
  *(_QWORD *)(v5 + 168) = v68;
LABEL_53:
  v69 = *(_QWORD *)(v5 + 176);
  if (v69)
  {
    v70 = *(_QWORD *)(v5 + 168);
    if (v70 >= 0x71)
    {
      operator delete(*v65);
      v64 = *(_QWORD *)(v5 + 152);
      v65 = (void **)(*(_QWORD *)(v5 + 144) + 8);
      *(_QWORD *)(v5 + 144) = v65;
      v69 = *(_QWORD *)(v5 + 176);
      v70 = *(_QWORD *)(v5 + 168) - 113;
      *(_QWORD *)(v5 + 168) = v70;
    }
    v71 = 113 * ((v64 - (uint64_t)v65) >> 3) - 1;
    if ((void **)v64 == v65)
      v71 = 0;
    if (v71 - (v69 + v70) >= 0x71)
    {
      operator delete(*(void **)(v64 - 8));
      v65 = *(void ***)(v5 + 144);
      v64 = *(_QWORD *)(v5 + 152) - 8;
      *(_QWORD *)(v5 + 152) = v64;
    }
  }
  else
  {
    if ((void **)v64 != v65)
    {
      do
      {
        operator delete(*(void **)(v64 - 8));
        v72 = *(_QWORD *)(v5 + 144);
        v64 = *(_QWORD *)(v5 + 152) - 8;
        *(_QWORD *)(v5 + 152) = v64;
      }
      while (v64 != v72);
    }
    *(_QWORD *)(v5 + 168) = 0;
    v65 = (void **)v64;
  }
  v73 = *(void **)(v5 + 136);
  v74 = v64 - (_QWORD)v65;
  v75 = (v64 - (uint64_t)v65) >> 3;
  if (v75 < (uint64_t)(*(_QWORD *)(v5 + 160) - (_QWORD)v73) >> 3)
  {
    if ((void **)v64 == v65)
    {
      v76 = 0;
      v64 = 8 * v75;
      goto LABEL_76;
    }
    if (v74 < 0)
      goto LABEL_381;
    v76 = operator new(v64 - (_QWORD)v65);
    v64 = (uint64_t)&v76[v75];
    if ((unint64_t)(v74 - 8) < 0x18)
    {
      v80 = v76;
    }
    else if ((unint64_t)((char *)v76 - (char *)v65) < 0x20)
    {
      v80 = v76;
    }
    else
    {
      v77 = 0;
      v78 = ((unint64_t)(v74 - 8) >> 3) + 1;
      v79 = v78 & 0x3FFFFFFFFFFFFFFCLL;
      v80 = &v76[v79];
      v81 = v78 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v82 = &v76[v77];
        v83 = *(_OWORD *)&v65[v77 + 2];
        *v82 = *(_OWORD *)&v65[v77];
        v82[1] = v83;
        v77 += 4;
        v81 -= 4;
      }
      while (v81);
      if (v78 == (v78 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_76:
        *(_QWORD *)(v5 + 136) = v76;
        *(_QWORD *)(v5 + 144) = v76;
        v65 = (void **)v76;
        *(_QWORD *)(v5 + 152) = v64;
        *(_QWORD *)(v5 + 160) = v64;
        if (v73)
        {
          operator delete(v73);
          v65 = *(void ***)(v5 + 144);
          v64 = *(_QWORD *)(v5 + 152);
        }
        goto LABEL_78;
      }
      v65 = (void **)((char *)v65 + v79 * 8);
    }
    do
    {
      v84 = *v65++;
      *v80++ = v84;
    }
    while (v80 != (_QWORD *)v64);
    goto LABEL_76;
  }
LABEL_78:
  if ((void **)v64 == v65)
  {
    v85 = v65;
  }
  else
  {
    v85 = (void **)(v64 + (((unint64_t)v65 - v64 + 7) & 0xFFFFFFFFFFFFFFF8));
    *(_QWORD *)(v5 + 152) = v85;
    v64 = (uint64_t)v85;
  }
  v86 = *(void **)(v5 + 136);
  v87 = (char *)v85 - (char *)v65;
  v88 = v85 - v65;
  if (v88 >= (uint64_t)(*(_QWORD *)(v5 + 160) - (_QWORD)v86) >> 3)
    goto LABEL_96;
  if ((void **)v64 == v65)
  {
    v89 = 0;
    v90 = 8 * v88;
    goto LABEL_94;
  }
  if (v87 < 0)
    goto LABEL_381;
  v89 = operator new((char *)v85 - (char *)v65);
  v90 = (uint64_t)&v89[v88];
  if ((unint64_t)(v87 - 8) < 0x18)
  {
    v94 = v89;
    do
    {
LABEL_93:
      v98 = *v65++;
      *v94++ = v98;
    }
    while (v94 != (_QWORD *)v90);
    goto LABEL_94;
  }
  if ((unint64_t)((char *)v89 - (char *)v65) < 0x20)
  {
    v94 = v89;
    goto LABEL_93;
  }
  v91 = 0;
  v92 = ((unint64_t)(v87 - 8) >> 3) + 1;
  v93 = v92 & 0x3FFFFFFFFFFFFFFCLL;
  v94 = &v89[v93];
  v95 = v92 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    v96 = &v89[v91];
    v97 = *(_OWORD *)&v65[v91 + 2];
    *v96 = *(_OWORD *)&v65[v91];
    v96[1] = v97;
    v91 += 4;
    v95 -= 4;
  }
  while (v95);
  if (v92 != (v92 & 0x3FFFFFFFFFFFFFFCLL))
  {
    v65 = (void **)((char *)v65 + v93 * 8);
    goto LABEL_93;
  }
LABEL_94:
  *(_QWORD *)(v5 + 136) = v89;
  *(_QWORD *)(v5 + 144) = v89;
  *(_QWORD *)(v5 + 152) = v90;
  *(_QWORD *)(v5 + 160) = v90;
  if (v86)
    operator delete(v86);
LABEL_96:
  v100 = (_QWORD *)(v5 + 184);
  v99 = *(void **)(v5 + 184);
  *(_OWORD *)(v5 + 152) = 0u;
  *(_OWORD *)(v5 + 168) = 0u;
  *(_OWORD *)(v5 + 136) = 0u;
  if (v99)
  {
    *(_QWORD *)(v5 + 192) = v99;
    operator delete(v99);
    *v100 = 0;
    *(_QWORD *)(v5 + 192) = 0;
    *(_QWORD *)(v5 + 200) = 0;
  }
  *v100 = 0;
  *(_QWORD *)(v5 + 192) = 0;
  *(_QWORD *)(v5 + 200) = 0;
  *(_DWORD *)(v5 + 208) = v332;
  *(float *)(v5 + 212) = v63;
  v101 = *(void ***)(v5 + 224);
  v102 = *(_QWORD *)(v5 + 232);
  *(_QWORD *)(v5 + 256) = 0;
  v103 = v102 - (_QWORD)v101;
  if (v103 >= 0x11)
  {
    do
    {
      operator delete(*v101);
      v104 = *(_QWORD *)(v5 + 232);
      v101 = (void **)(*(_QWORD *)(v5 + 224) + 8);
      *(_QWORD *)(v5 + 224) = v101;
      v103 = v104 - (_QWORD)v101;
    }
    while (v103 > 0x10);
  }
  if (v103 >> 3 == 1)
  {
    v105 = 170;
  }
  else
  {
    if (v103 >> 3 != 2)
      goto LABEL_105;
    v105 = 341;
  }
  *(_QWORD *)(v5 + 248) = v105;
LABEL_105:
  sub_1C98F2C98(v5 + 216);
  v107 = *(char **)(v5 + 224);
  v106 = *(char **)(v5 + 232);
  if (v106 == v107)
  {
    v108 = *(char **)(v5 + 224);
  }
  else
  {
    v108 = &v106[(v107 - v106 + 7) & 0xFFFFFFFFFFFFFFF8];
    *(_QWORD *)(v5 + 232) = v108;
  }
  v109 = *(void **)(v5 + 216);
  v110 = v108 - v107;
  v111 = (v108 - v107) >> 3;
  if (v111 >= (uint64_t)(*(_QWORD *)(v5 + 240) - (_QWORD)v109) >> 3)
    goto LABEL_122;
  if (v108 == v107)
  {
    v112 = 0;
    v113 = 8 * v111;
    goto LABEL_120;
  }
  if (v110 < 0)
    goto LABEL_381;
  v112 = operator new(v108 - v107);
  v113 = (uint64_t)&v112[v111];
  if ((unint64_t)(v110 - 8) < 0x18)
  {
    v114 = v112;
    do
    {
LABEL_119:
      v121 = *(_QWORD *)v107;
      v107 += 8;
      *v114++ = v121;
    }
    while (v114 != (_QWORD *)v113);
    goto LABEL_120;
  }
  v114 = v112;
  if ((unint64_t)((char *)v112 - v107) < 0x20)
    goto LABEL_119;
  v115 = 0;
  v116 = ((unint64_t)(v110 - 8) >> 3) + 1;
  v117 = v116 & 0x3FFFFFFFFFFFFFFCLL;
  v114 = &v112[v117];
  v118 = v116 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    v119 = &v112[v115];
    v120 = *(_OWORD *)&v107[v115 * 8 + 16];
    *v119 = *(_OWORD *)&v107[v115 * 8];
    v119[1] = v120;
    v115 += 4;
    v118 -= 4;
  }
  while (v118);
  if (v116 != (v116 & 0x3FFFFFFFFFFFFFFCLL))
  {
    v107 += v117 * 8;
    goto LABEL_119;
  }
LABEL_120:
  *(_QWORD *)(v5 + 216) = v112;
  *(_QWORD *)(v5 + 224) = v112;
  *(_QWORD *)(v5 + 232) = v113;
  *(_QWORD *)(v5 + 240) = v113;
  if (v109)
    operator delete(v109);
LABEL_122:
  *(_OWORD *)(v5 + 232) = 0u;
  *(_OWORD *)(v5 + 248) = 0u;
  *(_OWORD *)(v5 + 216) = 0u;
  v122 = atomic_load((unsigned __int8 *)&qword_1ED52ACD8);
  if ((v122 & 1) == 0 && __cxa_guard_acquire(&qword_1ED52ACD8))
  {
    sub_1C98CFF14();
    __cxa_guard_release(&qword_1ED52ACD8);
  }
  v123 = *(_DWORD *)(qword_1ED52ACB8 + 136);
  v124 = atomic_load((unsigned __int8 *)&qword_1ED52ACD8);
  v125 = v327;
  if ((v124 & 1) == 0 && __cxa_guard_acquire(&qword_1ED52ACD8))
  {
    sub_1C98CFF14();
    __cxa_guard_release(&qword_1ED52ACD8);
    v125 = v327;
  }
  v126 = *(float *)(qword_1ED52ACB8 + 140);
  v127 = atomic_load((unsigned __int8 *)&qword_1ED52ACD8);
  if ((v127 & 1) == 0 && __cxa_guard_acquire(&qword_1ED52ACD8))
  {
    sub_1C98CFF14();
    __cxa_guard_release(&qword_1ED52ACD8);
    v125 = v327;
  }
  v128 = *(float *)(qword_1ED52ACB8 + 144);
  v129 = atomic_load((unsigned __int8 *)&qword_1ED52ACD8);
  if ((v129 & 1) == 0 && __cxa_guard_acquire(&qword_1ED52ACD8))
  {
    sub_1C98CFF14();
    __cxa_guard_release(&qword_1ED52ACD8);
    v125 = v327;
  }
  v130 = *(float *)(qword_1ED52ACB8 + 148);
  v131 = atomic_load((unsigned __int8 *)&qword_1ED52ACD8);
  if ((v131 & 1) == 0 && __cxa_guard_acquire(&qword_1ED52ACD8))
  {
    sub_1C98CFF14();
    __cxa_guard_release(&qword_1ED52ACD8);
    v125 = v327;
  }
  v132 = *(float *)(qword_1ED52ACB8 + 152);
  v133 = atomic_load((unsigned __int8 *)&qword_1ED52ACD8);
  if ((v133 & 1) == 0 && __cxa_guard_acquire(&qword_1ED52ACD8))
  {
    sub_1C98CFF14();
    __cxa_guard_release(&qword_1ED52ACD8);
    v125 = v327;
  }
  v134 = atomic_load((unsigned __int8 *)&qword_1ED52ACD8);
  if ((v134 & 1) == 0 && __cxa_guard_acquire(&qword_1ED52ACD8))
  {
    sub_1C98CFF14();
    __cxa_guard_release(&qword_1ED52ACD8);
    v125 = v327;
  }
  v135 = *(float *)(qword_1ED52ACB8 + 160);
  v136 = atomic_load((unsigned __int8 *)&qword_1ED52ACD8);
  if ((v136 & 1) == 0 && __cxa_guard_acquire(&qword_1ED52ACD8))
  {
    sub_1C98CFF14();
    __cxa_guard_release(&qword_1ED52ACD8);
    v125 = v327;
  }
  v137 = *(_DWORD *)(qword_1ED52ACB8 + 164);
  v138 = 1.0 / (float)(v128 - v126);
  v139 = 1000000.0;
  if ((float)(v128 - v126) < 0.000001)
    v138 = 1000000.0;
  if ((float)(v132 - v130) >= 0.000001)
    v139 = 1.0 / (float)(v132 - v130);
  v140 = *(void **)(v5 + 264);
  *(_QWORD *)(v5 + 264) = 0;
  *(_QWORD *)(v5 + 272) = 0;
  *(_DWORD *)(v5 + 280) = 0;
  v141 = *(void **)(v5 + 288);
  *(_DWORD *)(v5 + 304) = 0;
  *(_QWORD *)(v5 + 288) = 0;
  *(_QWORD *)(v5 + 296) = 0;
  *(_DWORD *)(v5 + 312) = v123;
  *(float *)(v5 + 316) = v126;
  *(float *)(v5 + 320) = v128;
  *(float *)(v5 + 324) = v130;
  *(float *)(v5 + 328) = v132;
  *(float *)(v5 + 332) = v135;
  *(float *)(v5 + 336) = v135;
  *(_DWORD *)(v5 + 340) = v137;
  *(float *)(v5 + 344) = v138;
  *(float *)(v5 + 348) = v139;
  *(float *)(v5 + 352) = 1.0 / (float)(v135 + 1.0);
  v142 = *(void **)(v5 + 360);
  *(_QWORD *)(v5 + 360) = 0;
  *(_QWORD *)(v5 + 368) = 0;
  *(_DWORD *)(v5 + 376) = 0;
  free(v142);
  free(v141);
  free(v140);
  v143 = atomic_load((unsigned __int8 *)&qword_1ED52ACD8);
  if ((v143 & 1) == 0 && __cxa_guard_acquire(&qword_1ED52ACD8))
  {
    sub_1C98CFF14();
    __cxa_guard_release(&qword_1ED52ACD8);
    v125 = v327;
  }
  v144 = *(float *)(qword_1ED52ACB8 + 176);
  v145 = v325;
  v335 = v325;
  v336 = v125;
  if (v125)
  {
    v146 = (unint64_t *)&v125->__shared_owners_;
    do
      v147 = __ldxr(v146);
    while (__stxr(v147 + 1, v146));
  }
  v148 = atomic_load((unsigned __int8 *)&qword_1ED52ACD8);
  if ((v148 & 1) == 0 && __cxa_guard_acquire(&qword_1ED52ACD8))
  {
    sub_1C98CFF14();
    __cxa_guard_release(&qword_1ED52ACD8);
    v125 = v327;
    v145 = v325;
  }
  v149 = *(float *)(qword_1ED52ACB8 + 168);
  v150 = atomic_load((unsigned __int8 *)&qword_1ED52ACD8);
  if ((v150 & 1) == 0 && __cxa_guard_acquire(&qword_1ED52ACD8))
  {
    sub_1C98CFF14();
    __cxa_guard_release(&qword_1ED52ACD8);
    v125 = v327;
    v145 = v325;
  }
  sub_1C98D8BC0(&v335, v330, v149, *(float *)(qword_1ED52ACB8 + 172), v144);
  v151 = v336;
  if (v336)
  {
    v152 = (unint64_t *)&v336->__shared_owners_;
    do
      v153 = __ldaxr(v152);
    while (__stlxr(v153 - 1, v152));
    if (!v153)
    {
      ((void (*)(std::__shared_weak_count *))v151->__on_zero_shared)(v151);
      std::__shared_weak_count::__release_weak(v151);
    }
  }
  v333 = v145;
  v334 = v125;
  if (v125)
  {
    v154 = (unint64_t *)&v125->__shared_owners_;
    do
      v155 = __ldxr(v154);
    while (__stxr(v155 + 1, v154));
  }
  v156 = atomic_load((unsigned __int8 *)&qword_1ED52ACD8);
  if ((v156 & 1) == 0 && __cxa_guard_acquire(&qword_1ED52ACD8))
  {
    sub_1C98CFF14();
    __cxa_guard_release(&qword_1ED52ACD8);
  }
  v157 = *(float *)(qword_1ED52ACB8 + 168);
  v158 = atomic_load((unsigned __int8 *)&qword_1ED52ACD8);
  if ((v158 & 1) == 0 && __cxa_guard_acquire(&qword_1ED52ACD8))
  {
    sub_1C98CFF14();
    __cxa_guard_release(&qword_1ED52ACD8);
  }
  v159 = *(float *)(qword_1ED52ACB8 + 172);
  v160 = atomic_load((unsigned __int8 *)&qword_1ED52ACD8);
  if ((v160 & 1) == 0 && __cxa_guard_acquire(&qword_1ED52ACD8))
  {
    sub_1C98CFF14();
    __cxa_guard_release(&qword_1ED52ACD8);
  }
  sub_1C98D8BC0(&v333, v331, v157, v159, v144 * *(float *)(qword_1ED52ACB8 + 180));
  v161 = v334;
  if (v334)
  {
    v162 = (unint64_t *)&v334->__shared_owners_;
    do
      v163 = __ldaxr(v162);
    while (__stlxr(v163 - 1, v162));
    if (!v163)
    {
      ((void (*)(std::__shared_weak_count *))v161->__on_zero_shared)(v161);
      std::__shared_weak_count::__release_weak(v161);
    }
  }
  do
    v164 = __ldxr(p_shared_owners);
  while (__stxr(v164 + 1, p_shared_owners));
  do
    v165 = __ldxr(v56);
  while (__stxr(v165 + 1, v56));
  sub_1C98F2A48(v330, LODWORD(v329[1].__shared_weak_owners_) + 2);
  *(void (__cdecl **)(std::__shared_weak_count *__hidden))((char *)&v329[1].__vftable[5].~__shared_weak_count + 4) = v329[1].~__shared_weak_count;
  sub_1C98F2A48(v331, LODWORD(v328[1].__shared_weak_owners_) + 2);
  *(void (__cdecl **)(std::__shared_weak_count *__hidden))((char *)&v328[1].__vftable[5].~__shared_weak_count + 4) = v328[1].~__shared_weak_count;
  do
    v166 = __ldaxr(v56);
  while (__stlxr(v166 - 1, v56));
  if (!v166)
  {
    ((void (*)(std::__shared_weak_count *))v328->__on_zero_shared)(v328);
    std::__shared_weak_count::__release_weak(v328);
  }
  do
    v167 = __ldaxr(p_shared_owners);
  while (__stlxr(v167 - 1, p_shared_owners));
  if (!v167)
  {
    ((void (*)(std::__shared_weak_count *))v329->__on_zero_shared)(v329);
    std::__shared_weak_count::__release_weak(v329);
  }
  v168 = atomic_load((unsigned __int8 *)&qword_1ED52ACD8);
  if ((v168 & 1) == 0 && __cxa_guard_acquire(&qword_1ED52ACD8))
  {
    sub_1C98CFF14();
    __cxa_guard_release(&qword_1ED52ACD8);
  }
  v169 = *(_DWORD *)(qword_1ED52ACB8 + 120);
  v170 = atomic_load((unsigned __int8 *)&qword_1ED52ACD8);
  if ((v170 & 1) == 0 && __cxa_guard_acquire(&qword_1ED52ACD8))
  {
    sub_1C98CFF14();
    __cxa_guard_release(&qword_1ED52ACD8);
  }
  v171 = *(float *)(qword_1ED52ACB8 + 184);
  v172 = 1.5 / v171;
  v13 = v171 <= 0.000001;
  v173 = 1500000.0;
  if (!v13)
    v173 = v172;
  *(_DWORD *)(v5 + 416) = v169;
  *(float *)(v5 + 420) = v173;
  v174 = *(void ***)(v5 + 432);
  v175 = *(_QWORD *)(v5 + 440);
  *(_QWORD *)(v5 + 464) = 0;
  v176 = v175 - (_QWORD)v174;
  if (v176 >= 0x11)
  {
    do
    {
      operator delete(*v174);
      v177 = *(_QWORD *)(v5 + 440);
      v174 = (void **)(*(_QWORD *)(v5 + 432) + 8);
      *(_QWORD *)(v5 + 432) = v174;
      v176 = v177 - (_QWORD)v174;
    }
    while (v176 > 0x10);
  }
  if (v176 >> 3 == 1)
  {
    v178 = 170;
  }
  else
  {
    if (v176 >> 3 != 2)
      goto LABEL_176;
    v178 = 341;
  }
  *(_QWORD *)(v5 + 456) = v178;
LABEL_176:
  sub_1C98F2C98((uint64_t)v326);
  v180 = *(char **)(v5 + 432);
  v179 = *(char **)(v5 + 440);
  if (v179 == v180)
  {
    v181 = *(char **)(v5 + 432);
  }
  else
  {
    v181 = &v179[(v180 - v179 + 7) & 0xFFFFFFFFFFFFFFF8];
    *(_QWORD *)(v5 + 440) = v181;
  }
  v182 = *(void **)(v5 + 424);
  v183 = v181 - v180;
  v184 = (v181 - v180) >> 3;
  if (v184 >= (uint64_t)(*(_QWORD *)(v5 + 448) - (_QWORD)v182) >> 3)
    goto LABEL_193;
  if (v181 == v180)
  {
    v185 = 0;
    v186 = 8 * v184;
    goto LABEL_191;
  }
  if (v183 < 0)
    goto LABEL_381;
  v185 = operator new(v181 - v180);
  v186 = (uint64_t)&v185[v184];
  if ((unint64_t)(v183 - 8) < 0x18)
  {
    v187 = v185;
    do
    {
LABEL_190:
      v194 = *(_QWORD *)v180;
      v180 += 8;
      *v187++ = v194;
    }
    while (v187 != (_QWORD *)v186);
    goto LABEL_191;
  }
  v187 = v185;
  if ((unint64_t)((char *)v185 - v180) < 0x20)
    goto LABEL_190;
  v188 = 0;
  v189 = ((unint64_t)(v183 - 8) >> 3) + 1;
  v190 = v189 & 0x3FFFFFFFFFFFFFFCLL;
  v187 = &v185[v190];
  v191 = v189 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    v192 = &v185[v188];
    v193 = *(_OWORD *)&v180[v188 * 8 + 16];
    *v192 = *(_OWORD *)&v180[v188 * 8];
    v192[1] = v193;
    v188 += 4;
    v191 -= 4;
  }
  while (v191);
  if (v189 != (v189 & 0x3FFFFFFFFFFFFFFCLL))
  {
    v180 += v190 * 8;
    goto LABEL_190;
  }
LABEL_191:
  *(_QWORD *)(v5 + 424) = v185;
  *(_QWORD *)(v5 + 432) = v185;
  *(_QWORD *)(v5 + 440) = v186;
  *(_QWORD *)(v5 + 448) = v186;
  if (v182)
    operator delete(v182);
LABEL_193:
  *(_OWORD *)(v5 + 440) = 0u;
  *(_OWORD *)(v5 + 456) = 0u;
  *v326 = 0u;
  v195 = atomic_load((unsigned __int8 *)&qword_1ED52ACD8);
  if ((v195 & 1) == 0 && __cxa_guard_acquire(&qword_1ED52ACD8))
  {
    sub_1C98CFF14();
    __cxa_guard_release(&qword_1ED52ACD8);
  }
  v196 = *(float *)(qword_1ED52ACB8 + 188);
  v197 = 1.5 / v196;
  v13 = v196 <= 0.000001;
  v198 = 1500000.0;
  if (!v13)
    v198 = v197;
  *(_DWORD *)(v5 + 472) = v332;
  *(float *)(v5 + 476) = v198;
  v200 = *(void ***)(v5 + 488);
  v199 = *(_QWORD *)(v5 + 496);
  *(_QWORD *)(v5 + 520) = 0;
  v201 = v199 - (_QWORD)v200;
  if ((unint64_t)(v199 - (_QWORD)v200) >= 0x11)
  {
    do
    {
      operator delete(*v200);
      v199 = *(_QWORD *)(v5 + 496);
      v200 = (void **)(*(_QWORD *)(v5 + 488) + 8);
      *(_QWORD *)(v5 + 488) = v200;
      v201 = v199 - (_QWORD)v200;
    }
    while ((unint64_t)(v199 - (_QWORD)v200) > 0x10);
  }
  v202 = v201 >> 3;
  if (v202 == 1)
  {
    v203 = 512;
  }
  else
  {
    if (v202 != 2)
      goto LABEL_203;
    v203 = 1024;
  }
  *(_QWORD *)(v5 + 512) = v203;
LABEL_203:
  v204 = *(_QWORD *)(v5 + 520);
  if (v204)
  {
    v205 = *(_QWORD *)(v5 + 512);
    if (v205 >= 0x400)
    {
      operator delete(*v200);
      v199 = *(_QWORD *)(v5 + 496);
      v200 = (void **)(*(_QWORD *)(v5 + 488) + 8);
      *(_QWORD *)(v5 + 488) = v200;
      v205 = *(_QWORD *)(v5 + 512) - 1024;
      *(_QWORD *)(v5 + 512) = v205;
      v204 = *(_QWORD *)(v5 + 520);
    }
    v206 = ((v199 - (_QWORD)v200) << 7) - 1;
    if ((void **)v199 == v200)
      v206 = 0;
    if (v206 - (v204 + v205) >= 0x400)
    {
      operator delete(*(void **)(v199 - 8));
      v200 = *(void ***)(v5 + 488);
      v199 = *(_QWORD *)(v5 + 496) - 8;
      *(_QWORD *)(v5 + 496) = v199;
    }
  }
  else
  {
    if ((void **)v199 != v200)
    {
      do
      {
        operator delete(*(void **)(v199 - 8));
        v207 = *(_QWORD *)(v5 + 488);
        v199 = *(_QWORD *)(v5 + 496) - 8;
        *(_QWORD *)(v5 + 496) = v199;
      }
      while (v199 != v207);
    }
    *(_QWORD *)(v5 + 512) = 0;
    v200 = (void **)v199;
  }
  v208 = *(void **)(v5 + 480);
  v209 = v199 - (_QWORD)v200;
  v210 = (v199 - (uint64_t)v200) >> 3;
  if (v210 < (uint64_t)(*(_QWORD *)(v5 + 504) - (_QWORD)v208) >> 3)
  {
    if ((void **)v199 == v200)
    {
      v211 = 0;
      v199 = 8 * v210;
      goto LABEL_226;
    }
    if (v209 < 0)
      goto LABEL_381;
    v211 = operator new(v199 - (_QWORD)v200);
    v199 = (uint64_t)&v211[v210];
    if ((unint64_t)(v209 - 8) < 0x18)
    {
      v215 = v211;
    }
    else if ((unint64_t)((char *)v211 - (char *)v200) < 0x20)
    {
      v215 = v211;
    }
    else
    {
      v212 = 0;
      v213 = ((unint64_t)(v209 - 8) >> 3) + 1;
      v214 = v213 & 0x3FFFFFFFFFFFFFFCLL;
      v215 = &v211[v214];
      v216 = v213 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v217 = &v211[v212];
        v218 = *(_OWORD *)&v200[v212 + 2];
        *v217 = *(_OWORD *)&v200[v212];
        v217[1] = v218;
        v212 += 4;
        v216 -= 4;
      }
      while (v216);
      if (v213 == (v213 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_226:
        *(_QWORD *)(v5 + 480) = v211;
        *(_QWORD *)(v5 + 488) = v211;
        v200 = (void **)v211;
        *(_QWORD *)(v5 + 496) = v199;
        *(_QWORD *)(v5 + 504) = v199;
        if (v208)
        {
          operator delete(v208);
          v200 = *(void ***)(v5 + 488);
          v199 = *(_QWORD *)(v5 + 496);
        }
        goto LABEL_228;
      }
      v200 = (void **)((char *)v200 + v214 * 8);
    }
    do
    {
      v219 = *v200++;
      *v215++ = v219;
    }
    while (v215 != (_QWORD *)v199);
    goto LABEL_226;
  }
LABEL_228:
  if ((void **)v199 == v200)
  {
    v220 = v200;
  }
  else
  {
    v220 = (void **)(v199 + (((unint64_t)v200 - v199 + 7) & 0xFFFFFFFFFFFFFFF8));
    *(_QWORD *)(v5 + 496) = v220;
    v199 = (uint64_t)v220;
  }
  v221 = *(void **)(v5 + 480);
  v222 = (char *)v220 - (char *)v200;
  v223 = v220 - v200;
  if (v223 >= (uint64_t)(*(_QWORD *)(v5 + 504) - (_QWORD)v221) >> 3)
    goto LABEL_246;
  if ((void **)v199 == v200)
  {
    v224 = 0;
    v225 = 8 * v223;
    goto LABEL_244;
  }
  if (v222 < 0)
    goto LABEL_381;
  v224 = operator new((char *)v220 - (char *)v200);
  v225 = (uint64_t)&v224[v223];
  if ((unint64_t)(v222 - 8) < 0x18)
  {
    v229 = v224;
    do
    {
LABEL_243:
      v233 = *v200++;
      *v229++ = v233;
    }
    while (v229 != (_QWORD *)v225);
    goto LABEL_244;
  }
  if ((unint64_t)((char *)v224 - (char *)v200) < 0x20)
  {
    v229 = v224;
    goto LABEL_243;
  }
  v226 = 0;
  v227 = ((unint64_t)(v222 - 8) >> 3) + 1;
  v228 = v227 & 0x3FFFFFFFFFFFFFFCLL;
  v229 = &v224[v228];
  v230 = v227 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    v231 = &v224[v226];
    v232 = *(_OWORD *)&v200[v226 + 2];
    *v231 = *(_OWORD *)&v200[v226];
    v231[1] = v232;
    v226 += 4;
    v230 -= 4;
  }
  while (v230);
  if (v227 != (v227 & 0x3FFFFFFFFFFFFFFCLL))
  {
    v200 = (void **)((char *)v200 + v228 * 8);
    goto LABEL_243;
  }
LABEL_244:
  *(_QWORD *)(v5 + 480) = v224;
  *(_QWORD *)(v5 + 488) = v224;
  *(_QWORD *)(v5 + 496) = v225;
  *(_QWORD *)(v5 + 504) = v225;
  if (v221)
    operator delete(v221);
LABEL_246:
  *(_OWORD *)(v5 + 496) = 0u;
  *(_OWORD *)(v5 + 512) = 0u;
  *(_OWORD *)(v5 + 480) = 0u;
  v234 = atomic_load((unsigned __int8 *)&qword_1ED52ACD8);
  if ((v234 & 1) == 0 && __cxa_guard_acquire(&qword_1ED52ACD8))
  {
    sub_1C98CFF14();
    __cxa_guard_release(&qword_1ED52ACD8);
  }
  v235 = *(unsigned int *)(qword_1ED52ACB8 + 124);
  v236 = atomic_load((unsigned __int8 *)&qword_1ED52ACD8);
  if ((v236 & 1) == 0 && __cxa_guard_acquire(&qword_1ED52ACD8))
  {
    sub_1C98CFF14();
    __cxa_guard_release(&qword_1ED52ACD8);
  }
  v237 = *(_DWORD *)(qword_1ED52ACB8 + 208);
  v238 = atomic_load((unsigned __int8 *)&qword_1ED52ACD8);
  if ((v238 & 1) == 0 && __cxa_guard_acquire(&qword_1ED52ACD8))
  {
    sub_1C98CFF14();
    __cxa_guard_release(&qword_1ED52ACD8);
  }
  v239 = *(float *)(qword_1ED52ACB8 + 212);
  if (v239 <= 0.000001)
    v240 = 1500000.0;
  else
    v240 = 1.5 / v239;
  *(_QWORD *)v5 = v235;
  v242 = *(void ***)(v5 + 16);
  v241 = *(_QWORD *)(v5 + 24);
  *(_QWORD *)(v5 + 48) = 0;
  v243 = v241 - (_QWORD)v242;
  if ((unint64_t)(v241 - (_QWORD)v242) >= 0x11)
  {
    do
    {
      operator delete(*v242);
      v241 = *(_QWORD *)(v5 + 24);
      v242 = (void **)(*(_QWORD *)(v5 + 16) + 8);
      *(_QWORD *)(v5 + 16) = v242;
      v243 = v241 - (_QWORD)v242;
    }
    while ((unint64_t)(v241 - (_QWORD)v242) > 0x10);
  }
  v244 = v243 >> 3;
  if (v244 == 1)
  {
    v245 = 128;
  }
  else
  {
    if (v244 != 2)
      goto LABEL_259;
    v245 = 256;
  }
  *(_QWORD *)(v5 + 40) = v245;
LABEL_259:
  v246 = *(_QWORD *)(v5 + 48);
  if (v246)
  {
    v247 = *(_QWORD *)(v5 + 40);
    if (v247 >= 0x100)
    {
      operator delete(*v242);
      v241 = *(_QWORD *)(v5 + 24);
      v242 = (void **)(*(_QWORD *)(v5 + 16) + 8);
      *(_QWORD *)(v5 + 16) = v242;
      v246 = *(_QWORD *)(v5 + 48);
      v247 = *(_QWORD *)(v5 + 40) - 256;
      *(_QWORD *)(v5 + 40) = v247;
    }
    v248 = 32 * (v241 - (_QWORD)v242) - 1;
    if ((void **)v241 == v242)
      v248 = 0;
    if (v248 - (v246 + v247) >= 0x100)
    {
      operator delete(*(void **)(v241 - 8));
      v242 = *(void ***)(v5 + 16);
      v241 = *(_QWORD *)(v5 + 24) - 8;
      *(_QWORD *)(v5 + 24) = v241;
    }
  }
  else
  {
    if ((void **)v241 != v242)
    {
      do
      {
        operator delete(*(void **)(v241 - 8));
        v249 = *(_QWORD *)(v5 + 16);
        v241 = *(_QWORD *)(v5 + 24) - 8;
        *(_QWORD *)(v5 + 24) = v241;
      }
      while (v241 != v249);
    }
    *(_QWORD *)(v5 + 40) = 0;
    v242 = (void **)v241;
  }
  v250 = *(void **)(v5 + 8);
  v251 = v241 - (_QWORD)v242;
  v252 = (v241 - (uint64_t)v242) >> 3;
  if (v252 < (uint64_t)(*(_QWORD *)(v5 + 32) - (_QWORD)v250) >> 3)
  {
    if ((void **)v241 == v242)
    {
      v253 = 0;
      v241 = 8 * v252;
      goto LABEL_282;
    }
    if (v251 < 0)
      goto LABEL_381;
    v253 = operator new(v241 - (_QWORD)v242);
    v241 = (uint64_t)&v253[v252];
    if ((unint64_t)(v251 - 8) < 0x18)
    {
      v257 = v253;
    }
    else if ((unint64_t)((char *)v253 - (char *)v242) < 0x20)
    {
      v257 = v253;
    }
    else
    {
      v254 = 0;
      v255 = ((unint64_t)(v251 - 8) >> 3) + 1;
      v256 = v255 & 0x3FFFFFFFFFFFFFFCLL;
      v257 = &v253[v256];
      v258 = v255 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v259 = &v253[v254];
        v260 = *(_OWORD *)&v242[v254 + 2];
        *v259 = *(_OWORD *)&v242[v254];
        v259[1] = v260;
        v254 += 4;
        v258 -= 4;
      }
      while (v258);
      if (v255 == (v255 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_282:
        *(_QWORD *)(v5 + 8) = v253;
        *(_QWORD *)(v5 + 16) = v253;
        v242 = (void **)v253;
        *(_QWORD *)(v5 + 24) = v241;
        *(_QWORD *)(v5 + 32) = v241;
        if (v250)
        {
          operator delete(v250);
          v242 = *(void ***)(v5 + 16);
          v241 = *(_QWORD *)(v5 + 24);
        }
        goto LABEL_284;
      }
      v242 = (void **)((char *)v242 + v256 * 8);
    }
    do
    {
      v261 = *v242++;
      *v257++ = v261;
    }
    while (v257 != (_QWORD *)v241);
    goto LABEL_282;
  }
LABEL_284:
  if ((void **)v241 == v242)
  {
    v262 = v242;
  }
  else
  {
    v262 = (void **)(v241 + (((unint64_t)v242 - v241 + 7) & 0xFFFFFFFFFFFFFFF8));
    *(_QWORD *)(v5 + 24) = v262;
    v241 = (uint64_t)v262;
  }
  v263 = *(void **)(v5 + 8);
  v264 = (char *)v262 - (char *)v242;
  v265 = v262 - v242;
  if (v265 >= (uint64_t)(*(_QWORD *)(v5 + 32) - (_QWORD)v263) >> 3)
    goto LABEL_302;
  if ((void **)v241 == v242)
  {
    v266 = 0;
    v267 = 8 * v265;
    goto LABEL_300;
  }
  if (v264 < 0)
    goto LABEL_381;
  v266 = operator new((char *)v262 - (char *)v242);
  v267 = (uint64_t)&v266[v265];
  if ((unint64_t)(v264 - 8) < 0x18)
  {
    v271 = v266;
    do
    {
LABEL_299:
      v275 = *v242++;
      *v271++ = v275;
    }
    while (v271 != (_QWORD *)v267);
    goto LABEL_300;
  }
  if ((unint64_t)((char *)v266 - (char *)v242) < 0x20)
  {
    v271 = v266;
    goto LABEL_299;
  }
  v268 = 0;
  v269 = ((unint64_t)(v264 - 8) >> 3) + 1;
  v270 = v269 & 0x3FFFFFFFFFFFFFFCLL;
  v271 = &v266[v270];
  v272 = v269 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    v273 = &v266[v268];
    v274 = *(_OWORD *)&v242[v268 + 2];
    *v273 = *(_OWORD *)&v242[v268];
    v273[1] = v274;
    v268 += 4;
    v272 -= 4;
  }
  while (v272);
  if (v269 != (v269 & 0x3FFFFFFFFFFFFFFCLL))
  {
    v242 = (void **)((char *)v242 + v270 * 8);
    goto LABEL_299;
  }
LABEL_300:
  *(_QWORD *)(v5 + 8) = v266;
  *(_QWORD *)(v5 + 16) = v266;
  *(_QWORD *)(v5 + 24) = v267;
  *(_QWORD *)(v5 + 32) = v267;
  if (v263)
    operator delete(v263);
LABEL_302:
  *(_OWORD *)(v5 + 24) = 0u;
  *(_OWORD *)(v5 + 40) = 0u;
  *(_OWORD *)(v5 + 8) = 0u;
  *(_DWORD *)(v5 + 56) = v235;
  *(float *)(v5 + 60) = v240;
  v277 = *(void ***)(v5 + 72);
  v276 = *(_QWORD *)(v5 + 80);
  *(_QWORD *)(v5 + 104) = 0;
  v278 = v276 - (_QWORD)v277;
  if ((unint64_t)(v276 - (_QWORD)v277) >= 0x11)
  {
    do
    {
      operator delete(*v277);
      v276 = *(_QWORD *)(v5 + 80);
      v277 = (void **)(*(_QWORD *)(v5 + 72) + 8);
      *(_QWORD *)(v5 + 72) = v277;
      v278 = v276 - (_QWORD)v277;
    }
    while ((unint64_t)(v276 - (_QWORD)v277) > 0x10);
  }
  v279 = v278 >> 3;
  if (v279 == 1)
  {
    v280 = 512;
  }
  else
  {
    if (v279 != 2)
      goto LABEL_309;
    v280 = 1024;
  }
  *(_QWORD *)(v5 + 96) = v280;
LABEL_309:
  v281 = *(_QWORD *)(v5 + 104);
  if (v281)
  {
    v282 = *(_QWORD *)(v5 + 96);
    if (v282 >= 0x400)
    {
      operator delete(*v277);
      v276 = *(_QWORD *)(v5 + 80);
      v277 = (void **)(*(_QWORD *)(v5 + 72) + 8);
      *(_QWORD *)(v5 + 72) = v277;
      v281 = *(_QWORD *)(v5 + 104);
      v282 = *(_QWORD *)(v5 + 96) - 1024;
      *(_QWORD *)(v5 + 96) = v282;
    }
    v283 = ((v276 - (_QWORD)v277) << 7) - 1;
    if ((void **)v276 == v277)
      v283 = 0;
    if (v283 - (v281 + v282) >= 0x400)
    {
      operator delete(*(void **)(v276 - 8));
      v277 = *(void ***)(v5 + 72);
      v276 = *(_QWORD *)(v5 + 80) - 8;
      *(_QWORD *)(v5 + 80) = v276;
    }
  }
  else
  {
    if ((void **)v276 != v277)
    {
      do
      {
        operator delete(*(void **)(v276 - 8));
        v284 = *(_QWORD *)(v5 + 72);
        v276 = *(_QWORD *)(v5 + 80) - 8;
        *(_QWORD *)(v5 + 80) = v276;
      }
      while (v276 != v284);
    }
    *(_QWORD *)(v5 + 96) = 0;
    v277 = (void **)v276;
  }
  v285 = *(void **)(v5 + 64);
  v286 = v276 - (_QWORD)v277;
  v287 = (v276 - (uint64_t)v277) >> 3;
  if (v287 < (uint64_t)(*(_QWORD *)(v5 + 88) - (_QWORD)v285) >> 3)
  {
    if ((void **)v276 == v277)
    {
      v288 = 0;
      v276 = 8 * v287;
      goto LABEL_332;
    }
    if (v286 < 0)
      goto LABEL_381;
    v288 = operator new(v276 - (_QWORD)v277);
    v276 = (uint64_t)&v288[v287];
    if ((unint64_t)(v286 - 8) < 0x18)
    {
      v292 = v288;
    }
    else if ((unint64_t)((char *)v288 - (char *)v277) < 0x20)
    {
      v292 = v288;
    }
    else
    {
      v289 = 0;
      v290 = ((unint64_t)(v286 - 8) >> 3) + 1;
      v291 = v290 & 0x3FFFFFFFFFFFFFFCLL;
      v292 = &v288[v291];
      v293 = v290 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v294 = &v288[v289];
        v295 = *(_OWORD *)&v277[v289 + 2];
        *v294 = *(_OWORD *)&v277[v289];
        v294[1] = v295;
        v289 += 4;
        v293 -= 4;
      }
      while (v293);
      if (v290 == (v290 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_332:
        *(_QWORD *)(v5 + 64) = v288;
        *(_QWORD *)(v5 + 72) = v288;
        v277 = (void **)v288;
        *(_QWORD *)(v5 + 80) = v276;
        *(_QWORD *)(v5 + 88) = v276;
        if (v285)
        {
          operator delete(v285);
          v277 = *(void ***)(v5 + 72);
          v276 = *(_QWORD *)(v5 + 80);
        }
        goto LABEL_334;
      }
      v277 = (void **)((char *)v277 + v291 * 8);
    }
    do
    {
      v296 = *v277++;
      *v292++ = v296;
    }
    while (v292 != (_QWORD *)v276);
    goto LABEL_332;
  }
LABEL_334:
  if ((void **)v276 == v277)
  {
    v297 = v277;
  }
  else
  {
    v297 = (void **)(v276 + (((unint64_t)v277 - v276 + 7) & 0xFFFFFFFFFFFFFFF8));
    *(_QWORD *)(v5 + 80) = v297;
    v276 = (uint64_t)v297;
  }
  v298 = *(void **)(v5 + 64);
  v299 = (char *)v297 - (char *)v277;
  v300 = v297 - v277;
  if (v300 >= (uint64_t)(*(_QWORD *)(v5 + 88) - (_QWORD)v298) >> 3)
    goto LABEL_352;
  if ((void **)v276 == v277)
  {
    v301 = 0;
    v302 = 8 * v300;
    goto LABEL_350;
  }
  if (v299 < 0)
LABEL_381:
    sub_1C9899D30();
  v301 = operator new((char *)v297 - (char *)v277);
  v302 = (uint64_t)&v301[v300];
  if ((unint64_t)(v299 - 8) < 0x18)
  {
    v306 = v301;
    do
    {
LABEL_349:
      v310 = *v277++;
      *v306++ = v310;
    }
    while (v306 != (_QWORD *)v302);
    goto LABEL_350;
  }
  if ((unint64_t)((char *)v301 - (char *)v277) < 0x20)
  {
    v306 = v301;
    goto LABEL_349;
  }
  v303 = 0;
  v304 = ((unint64_t)(v299 - 8) >> 3) + 1;
  v305 = v304 & 0x3FFFFFFFFFFFFFFCLL;
  v306 = &v301[v305];
  v307 = v304 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    v308 = &v301[v303];
    v309 = *(_OWORD *)&v277[v303 + 2];
    *v308 = *(_OWORD *)&v277[v303];
    v308[1] = v309;
    v303 += 4;
    v307 -= 4;
  }
  while (v307);
  if (v304 != (v304 & 0x3FFFFFFFFFFFFFFCLL))
  {
    v277 = (void **)((char *)v277 + v305 * 8);
    goto LABEL_349;
  }
LABEL_350:
  *(_QWORD *)(v5 + 64) = v301;
  *(_QWORD *)(v5 + 72) = v301;
  *(_QWORD *)(v5 + 80) = v302;
  *(_QWORD *)(v5 + 88) = v302;
  if (v298)
    operator delete(v298);
LABEL_352:
  *(_OWORD *)(v5 + 80) = 0u;
  *(_OWORD *)(v5 + 96) = 0u;
  *(_OWORD *)(v5 + 64) = 0u;
  *(_DWORD *)(v5 + 112) = 1135869952;
  *(_DWORD *)(v5 + 120) = v237;
  v311 = *(std::__shared_weak_count **)(v5 + 392);
  do
    v312 = __ldxr(p_shared_owners);
  while (__stxr(v312 + 1, p_shared_owners));
  *(_QWORD *)(v5 + 384) = v330;
  *(_QWORD *)(v5 + 392) = v329;
  if (v311)
  {
    v313 = (unint64_t *)&v311->__shared_owners_;
    do
      v314 = __ldaxr(v313);
    while (__stlxr(v314 - 1, v313));
    if (!v314)
    {
      ((void (*)(std::__shared_weak_count *))v311->__on_zero_shared)(v311);
      std::__shared_weak_count::__release_weak(v311);
    }
  }
  do
    v315 = __ldxr(v56);
  while (__stxr(v315 + 1, v56));
  v316 = *(std::__shared_weak_count **)(v5 + 408);
  *(_QWORD *)(v5 + 400) = v331;
  *(_QWORD *)(v5 + 408) = v328;
  if (v316)
  {
    v317 = (unint64_t *)&v316->__shared_owners_;
    do
      v318 = __ldaxr(v317);
    while (__stlxr(v318 - 1, v317));
    if (!v318)
    {
      ((void (*)(std::__shared_weak_count *))v316->__on_zero_shared)(v316);
      std::__shared_weak_count::__release_weak(v316);
    }
  }
  std::mutex::lock(&stru_1ED52AC30);
  v319 = off_1ED52AC70;
  off_1ED52AC70 = (_UNKNOWN *)v5;
  if (v319)
  {
    v320 = sub_1C98EAD50((uint64_t)v319);
    MEMORY[0x1CAA44AFC](v320, 0x10E0C4016A603E8);
  }
  std::mutex::unlock(&stru_1ED52AC30);
  do
    v321 = __ldaxr(v56);
  while (__stlxr(v321 - 1, v56));
  if (!v321)
  {
    ((void (*)(std::__shared_weak_count *))v328->__on_zero_shared)(v328);
    std::__shared_weak_count::__release_weak(v328);
  }
  do
    v322 = __ldaxr(p_shared_owners);
  while (__stlxr(v322 - 1, p_shared_owners));
  if (v322)
  {
    if (!v327)
      return;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v329->__on_zero_shared)(v329);
    std::__shared_weak_count::__release_weak(v329);
    if (!v327)
      return;
  }
  v323 = (unint64_t *)&v327->__shared_owners_;
  do
    v324 = __ldaxr(v323);
  while (__stlxr(v324 - 1, v323));
  if (!v324)
  {
    ((void (*)(std::__shared_weak_count *))v327->__on_zero_shared)(v327);
    std::__shared_weak_count::__release_weak(v327);
  }
}

void sub_1C98F1468(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1ED52ACD8);
  _Unwind_Resume(a1);
}

void sub_1C98F1520(uint64_t a1, _QWORD *a2, uint64_t *a3, unint64_t a4)
{
  unint64_t v4;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  BOOL v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char *v25;
  char *v26;
  _QWORD *v27;
  char *v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  int64_t v35;
  unint64_t v36;
  unint64_t v37;
  char *v38;
  char *v39;
  BOOL v40;
  int64_t v41;
  unint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  __int128 *v46;
  char *v47;
  uint64_t v48;
  __int128 v49;
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  char *v59;
  char *v60;
  int64_t v61;
  unint64_t v62;
  unint64_t v63;
  char *v64;
  char *v65;
  int64_t v66;
  unint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  __int128 *v71;
  char *v72;
  uint64_t v73;
  __int128 v74;
  uint64_t v75;
  _QWORD *v76;
  char *v77;
  _QWORD *v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  char *v84;
  size_t v85;
  unint64_t v86;
  unint64_t v87;
  char *v88;
  int64_t v89;
  unint64_t v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  __int128 *v94;
  char *v95;
  uint64_t v96;
  __int128 v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  unint64_t v104;
  unint64_t v105;
  uint64_t v106;
  char *v107;
  char *v108;
  int64_t v109;
  unint64_t v110;
  char *v111;
  char *v112;
  uint64_t v113;
  uint64_t v114;
  __int128 *v115;
  char *v116;
  uint64_t v117;
  __int128 v118;
  uint64_t v119;
  uint64_t i;
  uint64_t v121;
  uint64_t v122;
  char *v123;
  unint64_t v124;
  uint64_t v125;
  char *v126;
  unint64_t v127;
  char *v128;
  _QWORD *v129;
  char *v130;
  uint64_t v131;
  char *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  char *v136;
  int64_t v137;
  unint64_t v138;
  unint64_t v139;
  char *v140;
  char *v141;
  int64_t v142;
  unint64_t v143;
  char *v144;
  uint64_t v145;
  uint64_t v146;
  __int128 *v147;
  char *v148;
  uint64_t v149;
  __int128 v150;
  uint64_t v151;
  unint64_t v152;
  uint64_t v153;
  unint64_t v154;
  uint64_t v155;
  uint64_t *v156;
  unint64_t v157;
  uint64_t v158;
  char *v160;
  uint64_t v161;
  char *v162;
  uint64_t v163;
  uint64_t v164;
  char *v165;
  char *v166;
  uint64_t v167;
  void *v168;

  v4 = a4;
  v8 = *(char **)(a1 + 8);
  v9 = *(char **)(a1 + 16);
  v10 = (v9 - v8) >> 3;
  if (v9 == v8)
    v11 = 0;
  else
    v11 = 341 * v10 - 1;
  v12 = *(_QWORD *)(a1 + 32);
  v13 = *(_QWORD *)(a1 + 40);
  v14 = v13 + v12;
  v15 = v11 - (v13 + v12);
  v16 = a4 >= v15;
  v17 = a4 - v15;
  if (v17 == 0 || !v16)
    goto LABEL_139;
  v18 = v17 + (v9 == v8);
  if (v18 % 0x155)
    v19 = v18 / 0x155 + 1;
  else
    v19 = v18 / 0x155;
  if (v19 >= v12 / 0x155)
    v20 = v12 / 0x155;
  else
    v20 = v19;
  if (v19 <= v12 / 0x155)
  {
    *(_QWORD *)(a1 + 32) = v12 - 341 * v20;
    if (!v20)
      goto LABEL_138;
    while (1)
    {
      v27 = *(_QWORD **)(a1 + 8);
      v28 = (char *)(v27 + 1);
      v29 = *v27;
      *(_QWORD *)(a1 + 8) = v27 + 1;
      if (v9 == *(char **)(a1 + 24))
      {
        v30 = *(char **)a1;
        if ((unint64_t)v28 <= *(_QWORD *)a1)
        {
          v36 = (v9 - v30) >> 2;
          if (v9 == v30)
            v36 = 1;
          if (v36 >> 61)
            goto LABEL_182;
          v37 = v36 >> 2;
          v164 = 8 * v36;
          v38 = (char *)operator new(8 * v36);
          v39 = &v38[8 * v37];
          v41 = v9 - v28;
          v40 = v9 == v28;
          v9 = v39;
          if (!v40)
          {
            v9 = &v39[v41 & 0xFFFFFFFFFFFFFFF8];
            v42 = v41 - 8;
            if ((unint64_t)(v41 - 8) >= 0x38)
            {
              v43 = &v38[8 * v37];
              if ((unint64_t)(v43 - v28) < 0x20)
                goto LABEL_42;
              v44 = (v42 >> 3) + 1;
              v45 = 8 * (v44 & 0x3FFFFFFFFFFFFFFCLL);
              v43 = &v39[v45];
              v46 = (__int128 *)(v27 + 3);
              v47 = &v38[8 * v37 + 16];
              v48 = v44 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v49 = *v46;
                *((_OWORD *)v47 - 1) = *(v46 - 1);
                *(_OWORD *)v47 = v49;
                v46 += 2;
                v47 += 32;
                v48 -= 4;
              }
              while (v48);
              if (v44 != (v44 & 0x3FFFFFFFFFFFFFFCLL))
              {
                v28 += v45;
                goto LABEL_42;
              }
            }
            else
            {
              v43 = &v38[8 * v37];
              do
              {
LABEL_42:
                v50 = *(_QWORD *)v28;
                v28 += 8;
                *(_QWORD *)v43 = v50;
                v43 += 8;
              }
              while (v43 != v9);
            }
          }
          *(_QWORD *)a1 = v38;
          *(_QWORD *)(a1 + 8) = v39;
          *(_QWORD *)(a1 + 16) = v9;
          *(_QWORD *)(a1 + 24) = &v38[v164];
          if (v30)
          {
            operator delete(v30);
            v9 = *(char **)(a1 + 16);
          }
          goto LABEL_23;
        }
        v31 = (uint64_t)&v28[-*(_QWORD *)a1] >> 3;
        if (v31 >= -1)
          v32 = v31 + 1;
        else
          v32 = v31 + 2;
        v33 = v32 >> 1;
        v34 = &v28[-8 * (v32 >> 1)];
        v35 = v9 - v28;
        if (v9 != v28)
        {
          memmove(&v28[-8 * (v32 >> 1)], v28, v9 - v28);
          v9 = *(char **)(a1 + 8);
        }
        v26 = &v9[-8 * v33];
        v9 = &v34[v35];
        *(_QWORD *)(a1 + 8) = v26;
        *(_QWORD *)(a1 + 16) = &v34[v35];
      }
LABEL_23:
      *(_QWORD *)v9 = v29;
      v9 = (char *)(*(_QWORD *)(a1 + 16) + 8);
      *(_QWORD *)(a1 + 16) = v9;
      if (!--v20)
        goto LABEL_138;
    }
  }
  v21 = v19 - v20;
  v22 = *(_QWORD *)(a1 + 24) - *(_QWORD *)a1;
  if (v19 - v20 <= (v22 >> 3) - v10)
  {
    if (!v21)
      goto LABEL_136;
    do
    {
      if (*(_QWORD *)(a1 + 24) == *(_QWORD *)(a1 + 16))
      {
        for (i = 0; i != v21; ++i)
        {
          v168 = operator new(0xFFCuLL);
          sub_1C98EA8C8((void **)a1, &v168);
          v9 = *(char **)(a1 + 16);
          if (&v9[-*(_QWORD *)(a1 + 8)] == (char *)8)
            v121 = 340;
          else
            v121 = 341;
          v122 = v121 + *(_QWORD *)(a1 + 32);
          *(_QWORD *)(a1 + 32) = v122;
        }
        v20 += v21;
        goto LABEL_137;
      }
      v168 = operator new(0xFFCuLL);
      sub_1C98EAA6C((char **)a1, &v168);
      --v21;
    }
    while (v21);
    v9 = *(char **)(a1 + 16);
LABEL_136:
    v122 = *(_QWORD *)(a1 + 32);
LABEL_137:
    *(_QWORD *)(a1 + 32) = v122 - 341 * v20;
    if (!v20)
      goto LABEL_138;
    while (1)
    {
      v129 = *(_QWORD **)(a1 + 8);
      v130 = (char *)(v129 + 1);
      v131 = *v129;
      *(_QWORD *)(a1 + 8) = v129 + 1;
      if (v9 == *(char **)(a1 + 24))
      {
        v132 = *(char **)a1;
        if ((unint64_t)v130 <= *(_QWORD *)a1)
        {
          v138 = (v9 - v132) >> 2;
          if (v9 == v132)
            v138 = 1;
          if (v138 >> 61)
            goto LABEL_182;
          v139 = v138 >> 2;
          v167 = 8 * v138;
          v140 = (char *)operator new(8 * v138);
          v141 = &v140[8 * v139];
          v142 = v9 - v130;
          v40 = v9 == v130;
          v9 = v141;
          if (!v40)
          {
            v9 = &v141[v142 & 0xFFFFFFFFFFFFFFF8];
            v143 = v142 - 8;
            if ((unint64_t)(v142 - 8) >= 0x38)
            {
              v144 = &v140[8 * v139];
              if ((unint64_t)(v144 - v130) < 0x20)
                goto LABEL_164;
              v145 = (v143 >> 3) + 1;
              v146 = 8 * (v145 & 0x3FFFFFFFFFFFFFFCLL);
              v144 = &v141[v146];
              v147 = (__int128 *)(v129 + 3);
              v148 = &v140[8 * v139 + 16];
              v149 = v145 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v150 = *v147;
                *((_OWORD *)v148 - 1) = *(v147 - 1);
                *(_OWORD *)v148 = v150;
                v147 += 2;
                v148 += 32;
                v149 -= 4;
              }
              while (v149);
              if (v145 != (v145 & 0x3FFFFFFFFFFFFFFCLL))
              {
                v130 += v146;
                goto LABEL_164;
              }
            }
            else
            {
              v144 = &v140[8 * v139];
              do
              {
LABEL_164:
                v151 = *(_QWORD *)v130;
                v130 += 8;
                *(_QWORD *)v144 = v151;
                v144 += 8;
              }
              while (v144 != v9);
            }
          }
          *(_QWORD *)a1 = v140;
          *(_QWORD *)(a1 + 8) = v141;
          *(_QWORD *)(a1 + 16) = v9;
          *(_QWORD *)(a1 + 24) = &v140[v167];
          if (v132)
          {
            operator delete(v132);
            v9 = *(char **)(a1 + 16);
          }
          goto LABEL_145;
        }
        v133 = (uint64_t)&v130[-*(_QWORD *)a1] >> 3;
        if (v133 >= -1)
          v134 = v133 + 1;
        else
          v134 = v133 + 2;
        v135 = v134 >> 1;
        v136 = &v130[-8 * (v134 >> 1)];
        v137 = v9 - v130;
        if (v9 != v130)
        {
          memmove(&v130[-8 * (v134 >> 1)], v130, v9 - v130);
          v9 = *(char **)(a1 + 8);
        }
        v128 = &v9[-8 * v135];
        v9 = &v136[v137];
        *(_QWORD *)(a1 + 8) = v128;
        *(_QWORD *)(a1 + 16) = &v136[v137];
      }
LABEL_145:
      *(_QWORD *)v9 = v131;
      v9 = (char *)(*(_QWORD *)(a1 + 16) + 8);
      *(_QWORD *)(a1 + 16) = v9;
      if (!--v20)
        goto LABEL_138;
    }
  }
  v23 = v22 >> 2;
  if (v23 <= v21 + v10)
    v24 = v21 + v10;
  else
    v24 = v23;
  if (v24)
  {
    if (v24 >> 61)
LABEL_182:
      sub_1C9899D30();
    v25 = (char *)operator new(8 * v24);
  }
  else
  {
    v25 = 0;
  }
  v158 = -341 * v20;
  v51 = &v25[8 * (v10 - v20)];
  v52 = &v25[8 * v24];
  v9 = v51;
  do
  {
    v54 = operator new(0xFFCuLL);
    if (v9 != v52)
      goto LABEL_52;
    v165 = v25;
    if (v51 <= v25)
    {
      v62 = (v52 - v25) >> 2;
      if (v52 == v25)
        v62 = 1;
      if (v62 >> 61)
        goto LABEL_182;
      v63 = v62 >> 2;
      v161 = 8 * v62;
      v64 = (char *)operator new(8 * v62);
      v65 = &v64[8 * v63];
      v9 = v65;
      v66 = v52 - v51;
      if (v52 == v51)
        goto LABEL_73;
      v9 = &v65[v66 & 0xFFFFFFFFFFFFFFF8];
      v67 = v66 - 8;
      if (v67 >= 0x38)
      {
        if ((unint64_t)(&v64[8 * v63] - v51) >= 0x20)
        {
          v69 = (v67 >> 3) + 1;
          v70 = 8 * (v69 & 0x3FFFFFFFFFFFFFFCLL);
          v68 = &v65[v70];
          v71 = (__int128 *)(v51 + 16);
          v72 = &v64[8 * v63 + 16];
          v73 = v69 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v74 = *v71;
            *((_OWORD *)v72 - 1) = *(v71 - 1);
            *(_OWORD *)v72 = v74;
            v71 += 2;
            v72 += 32;
            v73 -= 4;
          }
          while (v73);
          if (v69 == (v69 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_73;
          v51 += v70;
        }
        else
        {
          v68 = &v64[8 * v63];
        }
      }
      else
      {
        v68 = &v64[8 * v63];
      }
      do
      {
        v75 = *(_QWORD *)v51;
        v51 += 8;
        *(_QWORD *)v68 = v75;
        v68 += 8;
      }
      while (v68 != v9);
LABEL_73:
      v52 = &v64[v161];
      if (v165)
      {
        v25 = v64;
        v51 = v65;
        operator delete(v165);
      }
      else
      {
        v51 = v65;
        v25 = v64;
      }
      goto LABEL_52;
    }
    v55 = (v51 - v25) >> 3;
    if (v55 >= -1)
      v56 = v55 + 1;
    else
      v56 = v55 + 2;
    v57 = v56 >> 1;
    v58 = v52;
    v59 = &v51[-8 * (v56 >> 1)];
    v60 = v58;
    v160 = v58;
    v61 = v58 - v51;
    if (v58 != v51)
    {
      memmove(v59, v51, v58 - v51);
      v60 = v51;
    }
    v53 = -v57;
    v9 = &v59[v61];
    v51 = &v60[8 * v53];
    v52 = v160;
    v25 = v165;
LABEL_52:
    *(_QWORD *)v9 = v54;
    v9 += 8;
    --v21;
  }
  while (v21);
  v76 = *(_QWORD **)(a1 + 8);
  if (v20)
  {
    while (1)
    {
      if (v9 == v52)
      {
        v166 = v25;
        if (v51 <= v25)
        {
          v86 = (v52 - v25) >> 2;
          if (v52 == v25)
            v86 = 1;
          if (v86 >> 61)
            goto LABEL_182;
          v87 = v86 >> 2;
          v163 = 8 * v86;
          v88 = (char *)operator new(8 * v86);
          v77 = &v88[8 * v87];
          v9 = v77;
          v89 = v52 - v51;
          if (v52 != v51)
          {
            v9 = &v77[v89 & 0xFFFFFFFFFFFFFFF8];
            v90 = v89 - 8;
            if (v90 >= 0x38)
            {
              if ((unint64_t)(&v88[8 * v87] - v51) < 0x20)
              {
                v91 = &v88[8 * v87];
                goto LABEL_103;
              }
              v92 = (v90 >> 3) + 1;
              v93 = 8 * (v92 & 0x3FFFFFFFFFFFFFFCLL);
              v91 = &v77[v93];
              v94 = (__int128 *)(v51 + 16);
              v95 = &v88[8 * v87 + 16];
              v96 = v92 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v97 = *v94;
                *((_OWORD *)v95 - 1) = *(v94 - 1);
                *(_OWORD *)v95 = v97;
                v94 += 2;
                v95 += 32;
                v96 -= 4;
              }
              while (v96);
              if (v92 != (v92 & 0x3FFFFFFFFFFFFFFCLL))
              {
                v51 += v93;
                goto LABEL_103;
              }
            }
            else
            {
              v91 = &v88[8 * v87];
              do
              {
LABEL_103:
                v98 = *(_QWORD *)v51;
                v51 += 8;
                *(_QWORD *)v91 = v98;
                v91 += 8;
              }
              while (v91 != v9);
            }
          }
          v52 = &v88[v163];
          v25 = v88;
          if (v166)
            operator delete(v166);
          goto LABEL_82;
        }
        v80 = (v51 - v25) >> 3;
        if (v80 >= -1)
          v81 = v80 + 1;
        else
          v81 = v80 + 2;
        v82 = v81 >> 1;
        v83 = &v51[-8 * (v81 >> 1)];
        v84 = v52;
        v162 = v52;
        v85 = v52 - v51;
        if (v85)
        {
          memmove(v83, v51, v85);
          v84 = v51;
        }
        v9 = &v83[v85];
        v77 = &v84[-8 * v82];
        v52 = v162;
        v25 = v166;
      }
      else
      {
        v77 = v51;
      }
LABEL_82:
      *(_QWORD *)v9 = *v76;
      v9 += 8;
      v76 = (_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
      *(_QWORD *)(a1 + 8) = v76;
      v51 = v77;
      if (!--v20)
        goto LABEL_78;
    }
  }
  v77 = v51;
LABEL_78:
  v78 = *(_QWORD **)(a1 + 16);
  if (v78 != v76)
  {
    while (v77 != v25)
    {
LABEL_108:
      v99 = *--v78;
      *((_QWORD *)v77 - 1) = v99;
      v77 -= 8;
      if (v78 == *(_QWORD **)(a1 + 8))
        goto LABEL_79;
    }
    if (v9 < v52)
    {
      v100 = (v52 - v9) >> 3;
      if (v100 >= -1)
        v101 = v100 + 1;
      else
        v101 = v100 + 2;
      v102 = v101 >> 1;
      v77 = &v25[8 * (v101 >> 1)];
      v103 = v25;
      if (v9 != v25)
      {
        memmove(v77, v25, v9 - v25);
        v103 = v9;
      }
      v9 = &v103[8 * v102];
      goto LABEL_108;
    }
    v104 = (v52 - v25) >> 2;
    if (v52 == v25)
      v104 = 1;
    if (v104 >> 61)
      goto LABEL_182;
    v105 = (v104 + 3) >> 2;
    v106 = 8 * v104;
    v107 = (char *)operator new(8 * v104);
    v108 = v107;
    v77 = &v107[8 * v105];
    v52 = &v107[v106];
    v109 = v9 - v25;
    v40 = v9 == v25;
    v9 = v77;
    if (!v40)
    {
      v9 = &v77[v109 & 0xFFFFFFFFFFFFFFF8];
      v110 = v109 - 8;
      v111 = &v107[8 * v105];
      v112 = v25;
      if (v110 >= 0x38)
      {
        v111 = &v107[8 * v105];
        v112 = v25;
        if ((unint64_t)(v111 - v25) >= 0x20)
        {
          v113 = (v110 >> 3) + 1;
          v114 = 8 * (v113 & 0x3FFFFFFFFFFFFFFCLL);
          v111 = &v77[v114];
          v115 = (__int128 *)(v25 + 16);
          v116 = &v107[8 * v105 + 16];
          v117 = v113 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v118 = *v115;
            *((_OWORD *)v116 - 1) = *(v115 - 1);
            *(_OWORD *)v116 = v118;
            v115 += 2;
            v116 += 32;
            v117 -= 4;
          }
          while (v117);
          if (v113 == (v113 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_128;
          v112 = &v25[v114];
        }
      }
      do
      {
        v119 = *(_QWORD *)v112;
        v112 += 8;
        *(_QWORD *)v111 = v119;
        v111 += 8;
      }
      while (v111 != v9);
    }
    if (!v25)
    {
LABEL_129:
      v25 = v108;
      goto LABEL_108;
    }
LABEL_128:
    operator delete(v25);
    goto LABEL_129;
  }
LABEL_79:
  v79 = *(char **)a1;
  *(_QWORD *)a1 = v25;
  *(_QWORD *)(a1 + 8) = v77;
  *(_QWORD *)(a1 + 16) = v9;
  *(_QWORD *)(a1 + 24) = v52;
  *(_QWORD *)(a1 + 32) += v158;
  if (v79)
  {
    operator delete(v79);
    v9 = *(char **)(a1 + 16);
  }
LABEL_138:
  v13 = *(_QWORD *)(a1 + 40);
  v8 = *(char **)(a1 + 8);
  v14 = *(_QWORD *)(a1 + 32) + v13;
  v4 = a4;
LABEL_139:
  v123 = &v8[8 * (v14 / 0x155)];
  if (v9 == v8)
  {
    v124 = 0;
    if (!v4)
      return;
LABEL_141:
    v125 = (uint64_t)(v124 - *(_QWORD *)v123) / 12 + v4;
    if (v125 < 1)
    {
      v152 = 340 - v125;
      v126 = &v123[-8 * (v152 / 0x155)];
      v127 = *(_QWORD *)v126 + 12 * (340 - v152 % 0x155);
      if (v124 == v127)
        return;
    }
    else
    {
      v126 = &v123[8 * (v125 / 0x155uLL)];
      v127 = *(_QWORD *)v126 + 12 * (v125 % 0x155uLL);
      if (v124 == v127)
        return;
    }
    do
    {
      v153 = v127;
      if (v123 != v126)
        v153 = *(_QWORD *)v123 + 4092;
      if (v124 == v153)
      {
        v153 = v124;
      }
      else
      {
        v154 = v124;
        do
        {
          v155 = *a3;
          *(_DWORD *)(v154 + 8) = *((_DWORD *)a3 + 2);
          *(_QWORD *)v154 = v155;
          a3 = (uint64_t *)((char *)a3 + 12);
          if ((uint64_t *)((char *)a3 - *a2) == (uint64_t *)4092)
          {
            v156 = (uint64_t *)a2[1];
            ++a2;
            a3 = v156;
          }
          v154 += 12;
        }
        while (v154 != v153);
        v13 = *(_QWORD *)(a1 + 40);
      }
      v13 -= 0x5555555555555555 * ((uint64_t)(v153 - v124) >> 2);
      *(_QWORD *)(a1 + 40) = v13;
      if (v123 == v126)
        break;
      v157 = *((_QWORD *)v123 + 1);
      v123 += 8;
      v124 = v157;
    }
    while (v157 != v127);
  }
  else
  {
    v124 = *(_QWORD *)v123 + 12 * (v14 % 0x155);
    if (v4)
      goto LABEL_141;
  }
}

void sub_1C98F2034(uint64_t a1, _QWORD *a2, int *a3, unint64_t a4)
{
  unint64_t v4;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  BOOL v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  char *v26;
  _QWORD *v27;
  char *v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  int64_t v35;
  unint64_t v36;
  unint64_t v37;
  char *v38;
  char *v39;
  BOOL v40;
  int64_t v41;
  unint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  __int128 *v46;
  char *v47;
  uint64_t v48;
  __int128 v49;
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  char *v59;
  char *v60;
  int64_t v61;
  unint64_t v62;
  unint64_t v63;
  char *v64;
  char *v65;
  int64_t v66;
  unint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  __int128 *v71;
  char *v72;
  uint64_t v73;
  __int128 v74;
  uint64_t v75;
  _QWORD *v76;
  char *v77;
  _QWORD *v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  char *v84;
  size_t v85;
  unint64_t v86;
  unint64_t v87;
  char *v88;
  int64_t v89;
  unint64_t v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  __int128 *v94;
  char *v95;
  uint64_t v96;
  __int128 v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  unint64_t v104;
  unint64_t v105;
  uint64_t v106;
  char *v107;
  char *v108;
  int64_t v109;
  unint64_t v110;
  char *v111;
  char *v112;
  uint64_t v113;
  uint64_t v114;
  __int128 *v115;
  char *v116;
  uint64_t v117;
  __int128 v118;
  uint64_t v119;
  uint64_t i;
  uint64_t v121;
  uint64_t v122;
  char *v123;
  uint64_t v124;
  uint64_t v125;
  char *v126;
  char *v127;
  _QWORD *v128;
  char *v129;
  uint64_t v130;
  char *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  char *v135;
  int64_t v136;
  unint64_t v137;
  unint64_t v138;
  char *v139;
  char *v140;
  int64_t v141;
  unint64_t v142;
  char *v143;
  uint64_t v144;
  uint64_t v145;
  __int128 *v146;
  char *v147;
  uint64_t v148;
  __int128 v149;
  uint64_t v150;
  uint64_t v151;
  unint64_t v152;
  uint64_t v153;
  _DWORD *v154;
  int v155;
  int *v156;
  uint64_t v157;
  uint64_t v158;
  char *v160;
  uint64_t v161;
  char *v162;
  uint64_t v163;
  uint64_t v164;
  char *v165;
  char *v166;
  uint64_t v167;
  void *v168;

  v4 = a4;
  v8 = *(char **)(a1 + 8);
  v9 = *(char **)(a1 + 16);
  v10 = v9 - v8;
  if (v9 == v8)
    v11 = 0;
  else
    v11 = ((v9 - v8) << 7) - 1;
  v13 = *(_QWORD *)(a1 + 32);
  v12 = *(_QWORD *)(a1 + 40);
  v14 = v12 + v13;
  v15 = v11 - (v12 + v13);
  v16 = a4 >= v15;
  v17 = a4 - v15;
  if (v17 == 0 || !v16)
    goto LABEL_142;
  if (v9 == v8)
    v18 = v17 + 1;
  else
    v18 = v17;
  if ((v18 & 0x3FF) != 0)
    v19 = (v18 >> 10) + 1;
  else
    v19 = v18 >> 10;
  if (v19 >= v13 >> 10)
    v20 = v13 >> 10;
  else
    v20 = v19;
  if (v19 <= v13 >> 10)
  {
    *(_QWORD *)(a1 + 32) = v13 - (v20 << 10);
    if (!v20)
      goto LABEL_141;
    while (1)
    {
      v27 = *(_QWORD **)(a1 + 8);
      v28 = (char *)(v27 + 1);
      v29 = *v27;
      *(_QWORD *)(a1 + 8) = v27 + 1;
      if (v9 == *(char **)(a1 + 24))
      {
        v30 = *(char **)a1;
        if ((unint64_t)v28 <= *(_QWORD *)a1)
        {
          v36 = (v9 - v30) >> 2;
          if (v9 == v30)
            v36 = 1;
          if (v36 >> 61)
            goto LABEL_186;
          v37 = v36 >> 2;
          v164 = 8 * v36;
          v38 = (char *)operator new(8 * v36);
          v39 = &v38[8 * v37];
          v41 = v9 - v28;
          v40 = v9 == v28;
          v9 = v39;
          if (!v40)
          {
            v9 = &v39[v41 & 0xFFFFFFFFFFFFFFF8];
            v42 = v41 - 8;
            if ((unint64_t)(v41 - 8) >= 0x38)
            {
              v43 = &v38[8 * v37];
              if ((unint64_t)(v43 - v28) < 0x20)
                goto LABEL_45;
              v44 = (v42 >> 3) + 1;
              v45 = 8 * (v44 & 0x3FFFFFFFFFFFFFFCLL);
              v43 = &v39[v45];
              v46 = (__int128 *)(v27 + 3);
              v47 = &v38[8 * v37 + 16];
              v48 = v44 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v49 = *v46;
                *((_OWORD *)v47 - 1) = *(v46 - 1);
                *(_OWORD *)v47 = v49;
                v46 += 2;
                v47 += 32;
                v48 -= 4;
              }
              while (v48);
              if (v44 != (v44 & 0x3FFFFFFFFFFFFFFCLL))
              {
                v28 += v45;
                goto LABEL_45;
              }
            }
            else
            {
              v43 = &v38[8 * v37];
              do
              {
LABEL_45:
                v50 = *(_QWORD *)v28;
                v28 += 8;
                *(_QWORD *)v43 = v50;
                v43 += 8;
              }
              while (v43 != v9);
            }
          }
          *(_QWORD *)a1 = v38;
          *(_QWORD *)(a1 + 8) = v39;
          *(_QWORD *)(a1 + 16) = v9;
          *(_QWORD *)(a1 + 24) = &v38[v164];
          if (v30)
          {
            operator delete(v30);
            v9 = *(char **)(a1 + 16);
          }
          goto LABEL_26;
        }
        v31 = (uint64_t)&v28[-*(_QWORD *)a1] >> 3;
        if (v31 >= -1)
          v32 = v31 + 1;
        else
          v32 = v31 + 2;
        v33 = v32 >> 1;
        v34 = &v28[-8 * (v32 >> 1)];
        v35 = v9 - v28;
        if (v9 != v28)
        {
          memmove(&v28[-8 * (v32 >> 1)], v28, v9 - v28);
          v9 = *(char **)(a1 + 8);
        }
        v26 = &v9[-8 * v33];
        v9 = &v34[v35];
        *(_QWORD *)(a1 + 8) = v26;
        *(_QWORD *)(a1 + 16) = &v34[v35];
      }
LABEL_26:
      *(_QWORD *)v9 = v29;
      v9 = (char *)(*(_QWORD *)(a1 + 16) + 8);
      *(_QWORD *)(a1 + 16) = v9;
      if (!--v20)
        goto LABEL_141;
    }
  }
  v21 = v19 - v20;
  v22 = *(_QWORD *)(a1 + 24) - *(_QWORD *)a1;
  v23 = v10 >> 3;
  if (v21 <= (v22 >> 3) - (v10 >> 3))
  {
    if (!v21)
      goto LABEL_139;
    do
    {
      if (*(_QWORD *)(a1 + 24) == *(_QWORD *)(a1 + 16))
      {
        for (i = 0; i != v21; ++i)
        {
          v168 = operator new(0x1000uLL);
          sub_1C98EA8C8((void **)a1, &v168);
          v9 = *(char **)(a1 + 16);
          if (&v9[-*(_QWORD *)(a1 + 8)] == (char *)8)
            v121 = 1023;
          else
            v121 = 1024;
          v122 = v121 + *(_QWORD *)(a1 + 32);
          *(_QWORD *)(a1 + 32) = v122;
        }
        v20 += v21;
        goto LABEL_140;
      }
      v168 = operator new(0x1000uLL);
      sub_1C98EAA6C((char **)a1, &v168);
      --v21;
    }
    while (v21);
    v9 = *(char **)(a1 + 16);
LABEL_139:
    v122 = *(_QWORD *)(a1 + 32);
LABEL_140:
    *(_QWORD *)(a1 + 32) = v122 - (v20 << 10);
    if (!v20)
      goto LABEL_141;
    while (1)
    {
      v128 = *(_QWORD **)(a1 + 8);
      v129 = (char *)(v128 + 1);
      v130 = *v128;
      *(_QWORD *)(a1 + 8) = v128 + 1;
      if (v9 == *(char **)(a1 + 24))
      {
        v131 = *(char **)a1;
        if ((unint64_t)v129 <= *(_QWORD *)a1)
        {
          v137 = (v9 - v131) >> 2;
          if (v9 == v131)
            v137 = 1;
          if (v137 >> 61)
            goto LABEL_186;
          v138 = v137 >> 2;
          v167 = 8 * v137;
          v139 = (char *)operator new(8 * v137);
          v140 = &v139[8 * v138];
          v141 = v9 - v129;
          v40 = v9 == v129;
          v9 = v140;
          if (!v40)
          {
            v9 = &v140[v141 & 0xFFFFFFFFFFFFFFF8];
            v142 = v141 - 8;
            if ((unint64_t)(v141 - 8) >= 0x38)
            {
              v143 = &v139[8 * v138];
              if ((unint64_t)(v143 - v129) < 0x20)
                goto LABEL_166;
              v144 = (v142 >> 3) + 1;
              v145 = 8 * (v144 & 0x3FFFFFFFFFFFFFFCLL);
              v143 = &v140[v145];
              v146 = (__int128 *)(v128 + 3);
              v147 = &v139[8 * v138 + 16];
              v148 = v144 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v149 = *v146;
                *((_OWORD *)v147 - 1) = *(v146 - 1);
                *(_OWORD *)v147 = v149;
                v146 += 2;
                v147 += 32;
                v148 -= 4;
              }
              while (v148);
              if (v144 != (v144 & 0x3FFFFFFFFFFFFFFCLL))
              {
                v129 += v145;
                goto LABEL_166;
              }
            }
            else
            {
              v143 = &v139[8 * v138];
              do
              {
LABEL_166:
                v150 = *(_QWORD *)v129;
                v129 += 8;
                *(_QWORD *)v143 = v150;
                v143 += 8;
              }
              while (v143 != v9);
            }
          }
          *(_QWORD *)a1 = v139;
          *(_QWORD *)(a1 + 8) = v140;
          *(_QWORD *)(a1 + 16) = v9;
          *(_QWORD *)(a1 + 24) = &v139[v167];
          if (v131)
          {
            operator delete(v131);
            v9 = *(char **)(a1 + 16);
          }
          goto LABEL_147;
        }
        v132 = (uint64_t)&v129[-*(_QWORD *)a1] >> 3;
        if (v132 >= -1)
          v133 = v132 + 1;
        else
          v133 = v132 + 2;
        v134 = v133 >> 1;
        v135 = &v129[-8 * (v133 >> 1)];
        v136 = v9 - v129;
        if (v9 != v129)
        {
          memmove(&v129[-8 * (v133 >> 1)], v129, v9 - v129);
          v9 = *(char **)(a1 + 8);
        }
        v127 = &v9[-8 * v134];
        v9 = &v135[v136];
        *(_QWORD *)(a1 + 8) = v127;
        *(_QWORD *)(a1 + 16) = &v135[v136];
      }
LABEL_147:
      *(_QWORD *)v9 = v130;
      v9 = (char *)(*(_QWORD *)(a1 + 16) + 8);
      *(_QWORD *)(a1 + 16) = v9;
      if (!--v20)
        goto LABEL_141;
    }
  }
  if (v22 >> 2 <= v21 + v23)
    v24 = v21 + v23;
  else
    v24 = v22 >> 2;
  if (v24)
  {
    if (v24 >> 61)
LABEL_186:
      sub_1C9899D30();
    v25 = (char *)operator new(8 * v24);
  }
  else
  {
    v25 = 0;
  }
  v158 = v20 << 10;
  v51 = &v25[8 * (v23 - v20)];
  v52 = &v25[8 * v24];
  v9 = v51;
  do
  {
    v54 = operator new(0x1000uLL);
    if (v9 != v52)
      goto LABEL_55;
    v165 = v25;
    if (v51 <= v25)
    {
      v62 = (v52 - v25) >> 2;
      if (v52 == v25)
        v62 = 1;
      if (v62 >> 61)
        goto LABEL_186;
      v63 = v62 >> 2;
      v161 = 8 * v62;
      v64 = (char *)operator new(8 * v62);
      v65 = &v64[8 * v63];
      v9 = v65;
      v66 = v52 - v51;
      if (v52 == v51)
        goto LABEL_76;
      v9 = &v65[v66 & 0xFFFFFFFFFFFFFFF8];
      v67 = v66 - 8;
      if (v67 >= 0x38)
      {
        if ((unint64_t)(&v64[8 * v63] - v51) >= 0x20)
        {
          v69 = (v67 >> 3) + 1;
          v70 = 8 * (v69 & 0x3FFFFFFFFFFFFFFCLL);
          v68 = &v65[v70];
          v71 = (__int128 *)(v51 + 16);
          v72 = &v64[8 * v63 + 16];
          v73 = v69 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v74 = *v71;
            *((_OWORD *)v72 - 1) = *(v71 - 1);
            *(_OWORD *)v72 = v74;
            v71 += 2;
            v72 += 32;
            v73 -= 4;
          }
          while (v73);
          if (v69 == (v69 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_76;
          v51 += v70;
        }
        else
        {
          v68 = &v64[8 * v63];
        }
      }
      else
      {
        v68 = &v64[8 * v63];
      }
      do
      {
        v75 = *(_QWORD *)v51;
        v51 += 8;
        *(_QWORD *)v68 = v75;
        v68 += 8;
      }
      while (v68 != v9);
LABEL_76:
      v52 = &v64[v161];
      if (v165)
      {
        v25 = v64;
        v51 = v65;
        operator delete(v165);
      }
      else
      {
        v51 = v65;
        v25 = v64;
      }
      goto LABEL_55;
    }
    v55 = (v51 - v25) >> 3;
    if (v55 >= -1)
      v56 = v55 + 1;
    else
      v56 = v55 + 2;
    v57 = v56 >> 1;
    v58 = v52;
    v59 = &v51[-8 * (v56 >> 1)];
    v60 = v58;
    v160 = v58;
    v61 = v58 - v51;
    if (v58 != v51)
    {
      memmove(v59, v51, v58 - v51);
      v60 = v51;
    }
    v53 = -v57;
    v9 = &v59[v61];
    v51 = &v60[8 * v53];
    v52 = v160;
    v25 = v165;
LABEL_55:
    *(_QWORD *)v9 = v54;
    v9 += 8;
    --v21;
  }
  while (v21);
  v76 = *(_QWORD **)(a1 + 8);
  if (v20)
  {
    while (1)
    {
      if (v9 == v52)
      {
        v166 = v25;
        if (v51 <= v25)
        {
          v86 = (v52 - v25) >> 2;
          if (v52 == v25)
            v86 = 1;
          if (v86 >> 61)
            goto LABEL_186;
          v87 = v86 >> 2;
          v163 = 8 * v86;
          v88 = (char *)operator new(8 * v86);
          v77 = &v88[8 * v87];
          v9 = v77;
          v89 = v52 - v51;
          if (v52 != v51)
          {
            v9 = &v77[v89 & 0xFFFFFFFFFFFFFFF8];
            v90 = v89 - 8;
            if (v90 >= 0x38)
            {
              if ((unint64_t)(&v88[8 * v87] - v51) < 0x20)
              {
                v91 = &v88[8 * v87];
                goto LABEL_106;
              }
              v92 = (v90 >> 3) + 1;
              v93 = 8 * (v92 & 0x3FFFFFFFFFFFFFFCLL);
              v91 = &v77[v93];
              v94 = (__int128 *)(v51 + 16);
              v95 = &v88[8 * v87 + 16];
              v96 = v92 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v97 = *v94;
                *((_OWORD *)v95 - 1) = *(v94 - 1);
                *(_OWORD *)v95 = v97;
                v94 += 2;
                v95 += 32;
                v96 -= 4;
              }
              while (v96);
              if (v92 != (v92 & 0x3FFFFFFFFFFFFFFCLL))
              {
                v51 += v93;
                goto LABEL_106;
              }
            }
            else
            {
              v91 = &v88[8 * v87];
              do
              {
LABEL_106:
                v98 = *(_QWORD *)v51;
                v51 += 8;
                *(_QWORD *)v91 = v98;
                v91 += 8;
              }
              while (v91 != v9);
            }
          }
          v52 = &v88[v163];
          v25 = v88;
          if (v166)
            operator delete(v166);
          goto LABEL_85;
        }
        v80 = (v51 - v25) >> 3;
        if (v80 >= -1)
          v81 = v80 + 1;
        else
          v81 = v80 + 2;
        v82 = v81 >> 1;
        v83 = &v51[-8 * (v81 >> 1)];
        v84 = v52;
        v162 = v52;
        v85 = v52 - v51;
        if (v85)
        {
          memmove(v83, v51, v85);
          v84 = v51;
        }
        v9 = &v83[v85];
        v77 = &v84[-8 * v82];
        v52 = v162;
        v25 = v166;
      }
      else
      {
        v77 = v51;
      }
LABEL_85:
      *(_QWORD *)v9 = *v76;
      v9 += 8;
      v76 = (_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
      *(_QWORD *)(a1 + 8) = v76;
      v51 = v77;
      if (!--v20)
        goto LABEL_81;
    }
  }
  v77 = v51;
LABEL_81:
  v78 = *(_QWORD **)(a1 + 16);
  if (v78 != v76)
  {
    while (v77 != v25)
    {
LABEL_111:
      v99 = *--v78;
      *((_QWORD *)v77 - 1) = v99;
      v77 -= 8;
      if (v78 == *(_QWORD **)(a1 + 8))
        goto LABEL_82;
    }
    if (v9 < v52)
    {
      v100 = (v52 - v9) >> 3;
      if (v100 >= -1)
        v101 = v100 + 1;
      else
        v101 = v100 + 2;
      v102 = v101 >> 1;
      v77 = &v25[8 * (v101 >> 1)];
      v103 = v25;
      if (v9 != v25)
      {
        memmove(v77, v25, v9 - v25);
        v103 = v9;
      }
      v9 = &v103[8 * v102];
      goto LABEL_111;
    }
    v104 = (v52 - v25) >> 2;
    if (v52 == v25)
      v104 = 1;
    if (v104 >> 61)
      goto LABEL_186;
    v105 = (v104 + 3) >> 2;
    v106 = 8 * v104;
    v107 = (char *)operator new(8 * v104);
    v108 = v107;
    v77 = &v107[8 * v105];
    v52 = &v107[v106];
    v109 = v9 - v25;
    v40 = v9 == v25;
    v9 = v77;
    if (!v40)
    {
      v9 = &v77[v109 & 0xFFFFFFFFFFFFFFF8];
      v110 = v109 - 8;
      v111 = &v107[8 * v105];
      v112 = v25;
      if (v110 >= 0x38)
      {
        v111 = &v107[8 * v105];
        v112 = v25;
        if ((unint64_t)(v111 - v25) >= 0x20)
        {
          v113 = (v110 >> 3) + 1;
          v114 = 8 * (v113 & 0x3FFFFFFFFFFFFFFCLL);
          v111 = &v77[v114];
          v115 = (__int128 *)(v25 + 16);
          v116 = &v107[8 * v105 + 16];
          v117 = v113 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v118 = *v115;
            *((_OWORD *)v116 - 1) = *(v115 - 1);
            *(_OWORD *)v116 = v118;
            v115 += 2;
            v116 += 32;
            v117 -= 4;
          }
          while (v117);
          if (v113 == (v113 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_131;
          v112 = &v25[v114];
        }
      }
      do
      {
        v119 = *(_QWORD *)v112;
        v112 += 8;
        *(_QWORD *)v111 = v119;
        v111 += 8;
      }
      while (v111 != v9);
    }
    if (!v25)
    {
LABEL_132:
      v25 = v108;
      goto LABEL_111;
    }
LABEL_131:
    operator delete(v25);
    goto LABEL_132;
  }
LABEL_82:
  v79 = *(char **)a1;
  *(_QWORD *)a1 = v25;
  *(_QWORD *)(a1 + 8) = v77;
  *(_QWORD *)(a1 + 16) = v9;
  *(_QWORD *)(a1 + 24) = v52;
  *(_QWORD *)(a1 + 32) -= v158;
  if (v79)
  {
    operator delete(v79);
    v9 = *(char **)(a1 + 16);
  }
LABEL_141:
  v12 = *(_QWORD *)(a1 + 40);
  v8 = *(char **)(a1 + 8);
  v14 = *(_QWORD *)(a1 + 32) + v12;
  v4 = a4;
LABEL_142:
  v123 = &v8[8 * (v14 >> 10)];
  if (v9 == v8)
  {
    v124 = 0;
    if (!v4)
      goto LABEL_170;
LABEL_144:
    v125 = v4 + ((v124 - *(_QWORD *)v123) >> 2);
    if (v125 < 1)
    {
      v152 = 1023 - v125;
      LOWORD(v125) = ~(1023 - v125);
      v126 = &v123[-8 * (v152 >> 10)];
    }
    else
    {
      v126 = &v123[8 * ((unint64_t)v125 >> 10)];
    }
    v151 = *(_QWORD *)v126 + 4 * (v125 & 0x3FF);
  }
  else
  {
    v124 = *(_QWORD *)v123 + 4 * (v14 & 0x3FF);
    if (v4)
      goto LABEL_144;
LABEL_170:
    v151 = v124;
    v126 = v123;
  }
  while (v124 != v151)
  {
    v153 = v151;
    if (v123 != v126)
      v153 = *(_QWORD *)v123 + 4096;
    if (v124 == v153)
    {
      v153 = v124;
    }
    else
    {
      v154 = (_DWORD *)v124;
      do
      {
        v155 = *a3++;
        *v154++ = v155;
        if ((int *)((char *)a3 - *a2) == (int *)4096)
        {
          v156 = (int *)a2[1];
          ++a2;
          a3 = v156;
        }
      }
      while (v154 != (_DWORD *)v153);
      v12 = *(_QWORD *)(a1 + 40);
    }
    v12 += (v153 - v124) >> 2;
    *(_QWORD *)(a1 + 40) = v12;
    if (v123 == v126)
      break;
    v157 = *((_QWORD *)v123 + 1);
    v123 += 8;
    v124 = v157;
  }
}

void sub_1C98F2A48(uint64_t a1, unsigned int a2)
{
  size_t v4;
  size_t v5;
  char *v6;
  unsigned int v7;
  uint64_t v8;
  int *v9;
  unint64_t v10;
  int *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  __int128 v17;
  int v18;
  char *v19;
  unint64_t v20;
  unint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  _OWORD *v25;
  __int128 *v26;
  uint64_t v27;
  __int128 v28;
  int v29;
  char *v30;
  char *v31;
  uint64_t v32;
  _OWORD *v33;
  __int128 *v34;
  uint64_t v35;
  __int128 v36;
  int v37;
  void *memptr;

  if (*(_QWORD *)(a1 + 8) >= (unint64_t)a2)
  {
    *(_DWORD *)(a1 + 16) = a2;
    return;
  }
  v4 = (4 * a2 + 31) & 0x7FFFFFFE0;
  v5 = v4 >> 2;
  memptr = 0;
  malloc_type_posix_memalign(&memptr, 0x20uLL, v4, 0x49090899uLL);
  v6 = (char *)memptr;
  v7 = *(_DWORD *)(a1 + 16);
  if (v7 >= a2)
    v8 = a2;
  else
    v8 = v7;
  v9 = *(int **)a1;
  if (*(void **)a1 == memptr)
  {
    memptr = 0;
    malloc_type_posix_memalign(&memptr, 0x20uLL, (4 * v8 + 31) & 0x7FFFFFFE0, 0x49090899uLL);
    v19 = (char *)memptr;
    if (!(_DWORD)v8)
      goto LABEL_31;
    v20 = (v8 - 1) & 0x3FFFFFFFFFFFFFFFLL;
    v21 = v20 + 1;
    v22 = v6;
    v23 = (char *)memptr;
    if (v20 >= 7)
    {
      v22 = v6;
      v23 = (char *)memptr;
      if ((unint64_t)((_BYTE *)memptr - v6) >= 0x20)
      {
        v24 = 4 * (v21 & 0x7FFFFFFFFFFFFFF8);
        v22 = &v6[v24];
        v25 = (char *)memptr + 16;
        v26 = (__int128 *)(v6 + 16);
        v27 = v21 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v28 = *v26;
          *(v25 - 1) = *(v26 - 1);
          *v25 = v28;
          v25 += 2;
          v26 += 2;
          v27 -= 8;
        }
        while (v27);
        if (v21 == (v21 & 0x7FFFFFFFFFFFFFF8))
          goto LABEL_24;
        v23 = &v19[v24];
      }
    }
    do
    {
      v29 = *(_DWORD *)v22;
      v22 += 4;
      *(_DWORD *)v23 = v29;
      v23 += 4;
    }
    while (v23 != &v19[4 * v8]);
LABEL_24:
    v30 = v19;
    v31 = v6;
    if (v20 >= 7)
    {
      v30 = v19;
      v31 = v6;
      if ((unint64_t)(v6 - v19) >= 0x20)
      {
        v32 = 4 * (v21 & 0x7FFFFFFFFFFFFFF8);
        v30 = &v19[v32];
        v33 = v6 + 16;
        v34 = (__int128 *)(v19 + 16);
        v35 = v21 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v36 = *v34;
          *(v33 - 1) = *(v34 - 1);
          *v33 = v36;
          v33 += 2;
          v34 += 2;
          v35 -= 8;
        }
        while (v35);
        if (v21 == (v21 & 0x7FFFFFFFFFFFFFF8))
          goto LABEL_31;
        v31 = &v6[v32];
      }
    }
    do
    {
      v37 = *(_DWORD *)v30;
      v30 += 4;
      *(_DWORD *)v31 = v37;
      v31 += 4;
    }
    while (v31 != &v6[4 * v8]);
LABEL_31:
    free(v19);
    v9 = *(int **)a1;
    goto LABEL_32;
  }
  if ((_DWORD)v8)
  {
    v10 = (v8 - 1) & 0x3FFFFFFFFFFFFFFFLL;
    v11 = *(int **)a1;
    v12 = (char *)memptr;
    if (v10 >= 7)
    {
      v11 = *(int **)a1;
      v12 = (char *)memptr;
      if ((unint64_t)((_BYTE *)memptr - (_BYTE *)v9) >= 0x20)
      {
        v13 = 0;
        v14 = (v10 + 1) & 0x7FFFFFFFFFFFFFF8;
        v11 = &v9[v14];
        v15 = v14;
        do
        {
          v16 = &v6[v13 * 4];
          v17 = *(_OWORD *)&v9[v13 + 4];
          *(_OWORD *)v16 = *(_OWORD *)&v9[v13];
          *((_OWORD *)v16 + 1) = v17;
          v13 += 8;
          v15 -= 8;
        }
        while (v15);
        if (v10 + 1 == v14)
          goto LABEL_32;
        v12 = &v6[4 * v14];
      }
    }
    do
    {
      v18 = *v11++;
      *(_DWORD *)v12 = v18;
      v12 += 4;
    }
    while (v12 != &v6[4 * v8]);
  }
LABEL_32:
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + 8) = v5;
  *(_DWORD *)(a1 + 16) = a2;
  free(v9);
}

void sub_1C98F2C98(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  void **v4;
  uint64_t v5;
  uint64_t v6;
  void **v7;
  void *v8;
  uint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  _OWORD *v18;
  __int128 v19;
  void *v20;

  v2 = *(_QWORD *)(a1 + 40);
  if (v2)
  {
    v3 = *(_QWORD *)(a1 + 32);
    v4 = *(void ***)(a1 + 8);
    if (v3 >= 0x155)
    {
      operator delete(*v4);
      v4 = (void **)(*(_QWORD *)(a1 + 8) + 8);
      *(_QWORD *)(a1 + 8) = v4;
      v2 = *(_QWORD *)(a1 + 40);
      v3 = *(_QWORD *)(a1 + 32) - 341;
      *(_QWORD *)(a1 + 32) = v3;
    }
    v5 = *(_QWORD *)(a1 + 16);
    v6 = 341 * ((v5 - (uint64_t)v4) >> 3) - 1;
    if ((void **)v5 == v4)
      v6 = 0;
    if (v6 - (v2 + v3) >= 0x155)
    {
      operator delete(*(void **)(v5 - 8));
      v4 = *(void ***)(a1 + 8);
      v5 = *(_QWORD *)(a1 + 16) - 8;
      *(_QWORD *)(a1 + 16) = v5;
    }
  }
  else
  {
    v4 = *(void ***)(a1 + 16);
    if (v4 != *(void ***)(a1 + 8))
    {
      do
      {
        operator delete(*(v4 - 1));
        v7 = *(void ***)(a1 + 8);
        v4 = (void **)(*(_QWORD *)(a1 + 16) - 8);
        *(_QWORD *)(a1 + 16) = v4;
      }
      while (v4 != v7);
    }
    *(_QWORD *)(a1 + 32) = 0;
    v5 = (uint64_t)v4;
  }
  v8 = *(void **)a1;
  v9 = v5 - (_QWORD)v4;
  v10 = (v5 - (uint64_t)v4) >> 3;
  if (v10 < (uint64_t)(*(_QWORD *)(a1 + 24) - *(_QWORD *)a1) >> 3)
  {
    if ((void **)v5 == v4)
    {
      v11 = 0;
      v12 = 8 * v10;
    }
    else
    {
      if (v9 < 0)
        sub_1C9899D30();
      v11 = operator new(v5 - (_QWORD)v4);
      v12 = (uint64_t)&v11[v10];
      if ((unint64_t)(v9 - 8) < 0x18)
      {
        v16 = v11;
      }
      else if ((unint64_t)((char *)v11 - (char *)v4) < 0x20)
      {
        v16 = v11;
      }
      else
      {
        v13 = 0;
        v14 = ((unint64_t)(v9 - 8) >> 3) + 1;
        v15 = v14 & 0x3FFFFFFFFFFFFFFCLL;
        v16 = &v11[v15];
        v17 = v14 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v18 = &v11[v13];
          v19 = *(_OWORD *)&v4[v13 + 2];
          *v18 = *(_OWORD *)&v4[v13];
          v18[1] = v19;
          v13 += 4;
          v17 -= 4;
        }
        while (v17);
        if (v14 == (v14 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_24;
        v4 = (void **)((char *)v4 + v15 * 8);
      }
      do
      {
        v20 = *v4++;
        *v16++ = v20;
      }
      while (v16 != (_QWORD *)v12);
    }
LABEL_24:
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v11;
    *(_QWORD *)(a1 + 16) = v12;
    *(_QWORD *)(a1 + 24) = v12;
    if (v8)
      operator delete(v8);
  }
}

void sub_1C98F2E58(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E8295790;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1C98F2E68(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E8295790;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1CAA44AFCLL);
}

void sub_1C98F2E98(uint64_t a1)
{
  free(*(void **)(a1 + 24));
}

float *sub_1C98F2EA4(float *result, uint64_t a2)
{
  float *v2;
  float *v3;
  uint64_t v4;
  float *v5;
  uint64_t v6;
  int v7;

  v2 = result;
  v3 = *(float **)a2;
  if (*(float **)a2 == result
    || (v4 = *(_QWORD *)(a2 + 8),
        v5 = *(float **)v4,
        (float *)(*(_QWORD *)v4 - 4 * *(unsigned int *)(v4 + 12)) == result))
  {
    v7 = 0;
    v6 = 0;
    result = (float *)sub_1C98F2EA4(&v6);
    *(_QWORD *)v2 = v6;
    *((_DWORD *)v2 + 2) = v7;
  }
  else
  {
    *result = (float)((float)((float)(*v3 * *v5) + 0.0) + (float)(v3[3] * v5[1])) + (float)(v3[6] * v5[2]);
    result[1] = (float)((float)((float)(v3[1] * *v5) + 0.0) + (float)(v3[4] * v5[1])) + (float)(v3[7] * v5[2]);
    result[2] = (float)((float)((float)(v3[2] * *v5) + 0.0) + (float)(v3[5] * v5[1])) + (float)(v3[8] * v5[2]);
  }
  return result;
}

float *sub_1C98F2F80(float *result, float *a2, float *a3)
{
  unint64_t v3;
  float *v4;
  float *v5;
  float v6;
  float v7;
  float v8;
  float v9;
  int v10;
  float v11;
  float *v12;
  float *v13;
  float v14;
  float v15;
  float *v16;
  float *v17;
  float v18;
  float *v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float *v25;
  float v26;
  float v27;
  float *v28;
  float v29;
  float *v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float *v43;
  float v44;
  float v45;
  float *v46;
  float *v47;
  float *v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;

  if (a3 != a2)
  {
    while (1)
    {
      v3 = a3 - result;
      if (v3 < 2)
        return result;
      if (v3 == 3)
      {
        v40 = *result;
        v41 = result[1];
        v42 = *(a3 - 1);
        if (v41 >= *result)
        {
          if (v42 < v41)
          {
            result[1] = v42;
            *(a3 - 1) = v41;
            v52 = *result;
            v51 = result[1];
            if (v51 < *result)
            {
              *result = v51;
              result[1] = v52;
            }
          }
        }
        else if (v42 >= v41)
        {
          *result = v41;
          result[1] = v40;
          v53 = *(a3 - 1);
          if (v53 < v40)
          {
            result[1] = v53;
            *(a3 - 1) = v40;
          }
        }
        else
        {
          *result = v42;
          *(a3 - 1) = v40;
        }
        return result;
      }
      if (v3 == 2)
      {
        v38 = *(a3 - 1);
        v39 = *result;
        if (v38 < *result)
        {
          *result = v38;
          *(a3 - 1) = v39;
        }
        return result;
      }
      if ((char *)a3 - (char *)result <= 31)
      {
        while (result != a3 - 1)
        {
          v43 = result++;
          if (v43 != a3 && result != a3)
          {
            v44 = *v43;
            v45 = *v43;
            v46 = result;
            v47 = v43;
            v48 = result;
            do
            {
              v49 = *v48++;
              v50 = v49;
              if (v49 < v45)
              {
                v45 = v50;
                v47 = v46;
              }
              v46 = v48;
            }
            while (v48 != a3);
            if (v47 != v43)
            {
              *v43 = *v47;
              *v47 = v44;
            }
          }
        }
        return result;
      }
      v4 = &result[v3 >> 1];
      v5 = a3 - 1;
      v6 = *(a3 - 1);
      v7 = *v4;
      v8 = *result;
      if (*v4 < *result)
        break;
      if (v6 < v7)
      {
        *v4 = v6;
        *v5 = v7;
        v9 = *result;
        if (*v4 < *result)
        {
          *result = *v4;
          *v4 = v9;
LABEL_14:
          v10 = 2;
          goto LABEL_17;
        }
        goto LABEL_15;
      }
      v10 = 0;
LABEL_17:
      v11 = *result;
      if (*result < *v4)
      {
LABEL_22:
        v16 = result + 1;
        if (result + 1 >= v5)
        {
          v19 = result + 1;
        }
        else
        {
          v17 = result + 1;
          while (1)
          {
            v18 = *v4;
            do
            {
              v19 = v17;
              v20 = *v17++;
              v21 = v20;
            }
            while (v20 < v18);
            do
            {
              v22 = *--v5;
              v23 = v22;
            }
            while (v22 >= v18);
            if (v19 >= v5)
              break;
            *v19 = v23;
            *v5 = v21;
            ++v10;
            if (v4 == v19)
              v4 = v5;
          }
        }
        if (v19 != v4)
        {
          v24 = *v19;
          if (*v4 < *v19)
          {
            *v19 = *v4;
            *v4 = v24;
            ++v10;
          }
        }
        if (v19 == a2)
          return result;
        if (!v10)
        {
          if (v19 <= a2)
          {
            v30 = v19 + 1;
            while (v30 != a3)
            {
              v32 = *(v30 - 1);
              v31 = *v30++;
              if (v31 < v32)
                goto LABEL_37;
            }
          }
          else
          {
            while (v16 != v19)
            {
              v27 = *(v16 - 1);
              v26 = *v16++;
              if (v26 < v27)
                goto LABEL_37;
            }
          }
          return result;
        }
LABEL_37:
        if (v19 <= a2)
        {
          v25 = v19 + 1;
        }
        else
        {
          a3 = v19;
          v25 = result;
        }
      }
      else
      {
        v12 = a3 - 2;
        while (v12 != result)
        {
          v13 = v12;
          v14 = *v12--;
          v15 = v14;
          if (v14 < *v4)
          {
            *result = v15;
            *v13 = v11;
            ++v10;
            v5 = v13;
            goto LABEL_22;
          }
        }
        v28 = result + 1;
        if (v11 >= *v5)
        {
          if (v28 == v5)
            return result;
          while (1)
          {
            v29 = *v28;
            if (v11 < *v28)
              break;
            if (++v28 == v5)
              return result;
          }
          *v28++ = *v5;
          *v5 = v29;
        }
        if (v28 == v5)
          return result;
        while (1)
        {
          v33 = *result;
          do
          {
            v25 = v28;
            v34 = *v28++;
            v35 = v34;
          }
          while (v33 >= v34);
          do
          {
            v36 = *--v5;
            v37 = v36;
          }
          while (v33 < v36);
          if (v25 >= v5)
            break;
          *v25 = v37;
          *v5 = v35;
        }
        if (v25 > a2)
          return result;
      }
      result = v25;
      if (a3 == a2)
        return result;
    }
    if (v6 >= v7)
    {
      *result = v7;
      *v4 = v8;
      if (*v5 < v8)
      {
        *v4 = *v5;
        *v5 = v8;
        goto LABEL_14;
      }
    }
    else
    {
      *result = v6;
      *v5 = v8;
    }
LABEL_15:
    v10 = 1;
    goto LABEL_17;
  }
  return result;
}

_QWORD *sub_1C98F32E0(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E8294BF8;
  a1[1] = 0;
  if (v2)
    sub_1C98F8984(v2);
  return a1;
}

void sub_1C98F3318(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E8294BF8;
  a1[1] = 0;
  if (v2)
    sub_1C98F8984(v2);
  JUMPOUT(0x1CAA44AFCLL);
}

void sub_1C98F3360(uint64_t a1, __n128 **a2, __CVBuffer *a3, _OWORD *a4)
{
  unsigned __int8 v6;
  __n128 *v7;
  __n128 *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  int v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  float *v23;
  float v24;
  float v25;
  float v26;
  float v27;
  NSObject *v28;
  uint64_t v29;
  _QWORD *v30;
  std::__shared_weak_count *v31;
  uint64_t *v32;
  uint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  __int128 v36;
  uint64_t v37;
  uint64_t v38;
  double v39;
  double v40;
  _OWORD *v41;
  uint64_t i;
  _QWORD *v43;
  char *v44;
  uint64_t v45;
  int v46;
  int v47;
  const std::locale::facet *v48;
  char *v49;
  uint64_t v50;
  BOOL v51;
  uint64_t v52;
  size_t v53;
  std::locale::__imp *p_b;
  uint64_t v55;
  uint64_t v56;
  void *locale;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  size_t v62;
  void **v63;
  unint64_t v64;
  const void **v65;
  const void *v66;
  uint64_t v67;
  uint64_t v68;
  _BOOL4 v69;
  void **v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  __n128 *v74;
  unint64_t v75;
  unint64_t *v76;
  unint64_t v77;
  __n128 *v78;
  unint64_t *v79;
  unint64_t v80;
  __n128 *v81;
  _BYTE *v82;
  __n128 *v83;
  __n128 *v84;
  uint64_t v85;
  uint64_t v86;
  __int128 v87;
  _QWORD *v88;
  unint64_t *v89;
  unint64_t v90;
  uint64_t v91;
  char *v92;
  uint64_t v93;
  float32x2_t v94;
  float32x2_t v95;
  float32x2_t v96;
  float32x2_t v97;
  __int128 v98;
  char *v99;
  char *v100;
  int64_t v101;
  unint64_t v102;
  unint64_t v103;
  char *v104;
  char *v105;
  char *v106;
  char *v107;
  _QWORD *v108;
  __int128 v109;
  char *v110;
  char *v111;
  std::__shared_weak_count *v112;
  unint64_t *v113;
  unint64_t v114;
  char ***v115;
  unsigned __int8 v116;
  char *v117;
  char *v118;
  unint64_t v119;
  uint64_t v120;
  char *v121;
  uint64_t *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  std::mutex *v133;
  char *v134;
  char *v135;
  char **v136;
  int64_t v137;
  char *v138;
  char *v139;
  uint64_t v140;
  char *v141;
  char *v142;
  uint64_t v143;
  unint64_t v144;
  unint64_t v145;
  unint64_t v146;
  unint64_t v147;
  char *v148;
  char **v149;
  unsigned __int8 v150;
  NSObject *v151;
  int v152;
  char *v153;
  unint64_t v154;
  char *v155;
  uint64_t v156;
  uint64_t *v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  char *v163;
  char *v164;
  size_t v165;
  char *v166;
  char *v167;
  uint64_t v168;
  unint64_t *v169;
  unint64_t v170;
  uint64_t v171;
  char *v172;
  char *v173;
  char *v174;
  uint64_t v175;
  unint64_t *v176;
  unint64_t v177;
  char *v178;
  std::__shared_weak_count *v179;
  int64_t v180;
  uint64_t v181;
  _QWORD *v182;
  _QWORD *v183;
  char *v184;
  _QWORD *v185;
  uint64_t v186;
  unint64_t *v187;
  unint64_t v188;
  char *v189;
  _QWORD *v190;
  char v191;
  std::__shared_weak_count *v192;
  unint64_t *v193;
  unint64_t v194;
  __CVBuffer *v195;
  char *v196;
  unint64_t v197;
  char *v198;
  uint64_t v199;
  uint64_t *v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  std::__shared_weak_count *v206;
  unint64_t *v207;
  unint64_t v208;
  char *v209;
  char *v210;
  char *v211;
  uint64_t v212;
  unint64_t *v213;
  unint64_t v214;
  char *v215;
  char *v216;
  __int128 v217;
  char *v218;
  char *v219;
  std::__shared_weak_count *v220;
  unint64_t *v221;
  unint64_t v222;
  char *v223;
  char *v224;
  char *v225;
  char *v226;
  void *v227;
  std::__shared_weak_count *v228;
  unint64_t *v229;
  unint64_t v230;
  __int128 v231;
  std::__shared_weak_count *v232;
  unint64_t *v233;
  unint64_t v234;
  uint64_t v235;
  uint64_t v236;
  unint64_t *v237;
  unint64_t v238;
  std::__shared_weak_count *v239;
  unint64_t *v240;
  unint64_t v241;
  __n128 *v242;
  __n128 *v243;
  void *v244;
  std::__shared_weak_count *v245;
  unint64_t *v246;
  unint64_t v247;
  uint64_t v248;
  char *v249;
  void *v250;
  _QWORD *v251;
  __n128 *v252;
  uint64_t v253;
  __n128 *v254;
  __CVBuffer *texture;
  NSObject *log;
  uint64_t v259;
  float v260;
  std::mutex *v261;
  void *v262;
  __n128 *v263;
  unint64_t v264;
  uint64_t v265;
  std::__shared_weak_count *v266;
  _OWORD v267[2];
  int v268;
  uint64_t v269;
  int v270;
  void *__dst[2];
  int64_t v272;
  _QWORD *v273;
  std::__shared_weak_count *v274;
  void *v275;
  char *v276;
  _QWORD v277[11];
  char v278;
  uint64_t v279;
  _BYTE v280[16];
  std::locale __b;
  size_t v282;
  int64_t v283;
  uint8_t buf[4];
  uint64_t v285;
  __int16 v286;
  double v287;
  __int16 v288;
  double v289;
  __int16 v290;
  double v291;
  __int16 v292;
  double v293;
  __int16 v294;
  void **v295;
  __int16 v296;
  _BOOL4 v297;
  uint8_t v298[8];
  std::__shared_weak_count *v299;
  char *v300;
  char *v301;
  _QWORD *v302;
  _QWORD v303[3];
  uint64_t v304;
  unint64_t v305;
  void *__p;
  char v307;
  unint64_t v308;
  int v309;
  _QWORD v310[22];

  v310[19] = *MEMORY[0x1E0C80C00];
  if (!a3)
    return;
  v6 = atomic_load((unsigned __int8 *)&qword_1EF921320);
  if ((v6 & 1) == 0 && __cxa_guard_acquire(&qword_1EF921320))
  {
    dword_1EF921318 = 1059760811;
    __cxa_guard_release(&qword_1EF921320);
  }
  texture = a3;
  v262 = 0;
  v263 = 0;
  v264 = 0;
  v7 = *a2;
  v8 = a2[1];
  if (*a2 != v8)
  {
    v249 = *(char **)(MEMORY[0x1E0DE4F50] + 72);
    v248 = MEMORY[0x1E0DE4FB8] + 16;
    v251 = (_QWORD *)*MEMORY[0x1E0DE4F50];
    v252 = a2[1];
    v250 = *(void **)(MEMORY[0x1E0DE4F50] + 64);
    while (1)
    {
      v9 = *(_QWORD *)v7->n128_u64[0];
      if (*(_QWORD *)(v9 + 128) && !*(_BYTE *)(v9 + 168))
      {
        v10 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(v9 + 96) + ((*(_QWORD *)(v9 + 120) >> 4) & 0xFFFFFFFFFFFFFF8))
                        + 32 * (*(_QWORD *)(v9 + 120) & 0x7FLL));
        v11 = *v10;
        v12 = (std::__shared_weak_count *)v10[1];
        if (v12)
        {
          p_shared_owners = (unint64_t *)&v12->__shared_owners_;
          do
            v14 = __ldxr(p_shared_owners);
          while (__stxr(v14 + 1, p_shared_owners));
          v15 = *(_DWORD *)(v11 + 252);
          do
            v16 = __ldaxr(p_shared_owners);
          while (__stlxr(v16 - 1, p_shared_owners));
          if (v16)
          {
            if (!v15)
              goto LABEL_18;
          }
          else
          {
            ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
            std::__shared_weak_count::__release_weak(v12);
            if (!v15)
            {
LABEL_18:
              v17 = *(_QWORD *)v7->n128_u64[0];
              v18 = *(_QWORD **)(v17 + 24);
              v19 = *(std::__shared_weak_count **)(v17 + 32);
              v273 = v18;
              v274 = v19;
              if (v19)
              {
                v20 = (unint64_t *)&v19->__shared_owners_;
                do
                  v21 = __ldxr(v20);
                while (__stxr(v21 + 1, v20));
              }
              v22 = *v18;
              if (!*(_BYTE *)(v22 + 80) || (sub_1C991D1D8((uint64_t)a4, v22 + 48) & 0x80) == 0)
              {
                v23 = *(float **)v7->n128_u64[0];
                v25 = v23[11];
                v24 = v23[12];
                v26 = v23[13];
                v27 = v23[14];
                LOBYTE(v23) = atomic_load((unsigned __int8 *)&qword_1ED52ACD0);
                if ((v23 & 1) == 0 && __cxa_guard_acquire(&qword_1ED52ACD0))
                {
                  qword_1ED52ACE0 = (uint64_t)os_log_create("com.apple.AppleCVA", "FaceKit");
                  __cxa_guard_release(&qword_1ED52ACD0);
                }
                v28 = (id)qword_1ED52ACE0;
                if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
                {
                  log = v28;
                  v29 = *v273;
                  v30 = *(_QWORD **)v7->n128_u64[0];
                  v31 = (std::__shared_weak_count *)v30[16];
                  if (v31)
                  {
                    v32 = (uint64_t *)(*(_QWORD *)(v30[12] + ((v30[15] >> 4) & 0xFFFFFFFFFFFFFF8))
                                    + 32 * (v30[15] & 0x7FLL));
                    v33 = *v32;
                    v31 = (std::__shared_weak_count *)v32[1];
                    if (v31)
                    {
                      v34 = (unint64_t *)&v31->__shared_owners_;
                      do
                        v35 = __ldxr(v34);
                      while (__stxr(v35 + 1, v34));
                    }
                  }
                  else
                  {
                    v33 = 0;
                  }
                  v265 = v33;
                  v266 = v31;
                  v36 = *(_OWORD *)(v33 + 48);
                  v267[0] = *(_OWORD *)(v33 + 32);
                  v267[1] = v36;
                  v268 = *(_DWORD *)(v33 + 64);
                  v269 = *(_QWORD *)(v33 + 68);
                  v270 = *(_DWORD *)(v33 + 76);
                  sub_1C98F87D0((uint64_t)&v275);
                  v254 = v7;
                  v37 = *(_QWORD *)((char *)v277 + *((_QWORD *)v275 - 3));
                  sub_1C98F87D0((uint64_t)v298);
                  v38 = 0;
                  *(_QWORD *)((char *)&v303[-1] + *((_QWORD *)v300 - 3)) = (int)v37;
                  v253 = v29 + 160;
                  v39 = (float)(v25 + (float)(v26 * 0.5));
                  v40 = v26;
                  v41 = v267;
                  while (1)
                  {
                    v259 = v38;
                    for (i = 0; i != 48; i += 12)
                    {
                      v43 = (_QWORD *)std::ostream::operator<<();
                      MEMORY[0x1CAA448E0](v280, v43);
                      if (v280[0])
                      {
                        v44 = (char *)v43 + *(_QWORD *)(*v43 - 24);
                        v45 = *((_QWORD *)v44 + 5);
                        v46 = *((_DWORD *)v44 + 2);
                        v47 = *((_DWORD *)v44 + 36);
                        if (v47 == -1)
                        {
                          std::ios_base::getloc((const std::ios_base *)((char *)v43 + *(_QWORD *)(*v43 - 24)));
                          v48 = std::locale::use_facet(&__b, MEMORY[0x1E0DE4A90]);
                          v47 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v48->__vftable[2].~facet_0)(v48, 32);
                          std::locale::~locale(&__b);
                          *((_DWORD *)v44 + 36) = v47;
                        }
                        if ((v46 & 0xB0) == 0x20)
                          v49 = "";
                        else
                          v49 = " ";
                        if (!v45)
                          goto LABEL_33;
                        v50 = *((_QWORD *)v44 + 3);
                        v51 = v50 <= 1;
                        v52 = v50 - 1;
                        v53 = v51 ? 0 : v52;
                        if (v49 - " " >= 1
                          && (*(uint64_t (**)(uint64_t, const char *, int64_t))(*(_QWORD *)v45 + 96))(v45, " ", v49 - " ") != v49 - " ")
                        {
                          goto LABEL_33;
                        }
                        if ((uint64_t)v53 >= 1)
                        {
                          if (v53 > 0x7FFFFFFFFFFFFFF7)
                            abort();
                          if (v53 >= 0x17)
                          {
                            v55 = (v53 & 0xFFFFFFFFFFFFFFF8) + 8;
                            if ((v53 | 7) != 0x17)
                              v55 = v53 | 7;
                            v56 = v55 + 1;
                            p_b = (std::locale::__imp *)operator new(v55 + 1);
                            v283 = v56 | 0x8000000000000000;
                            __b.__locale_ = p_b;
                            v282 = v53;
                          }
                          else
                          {
                            HIBYTE(v283) = v53;
                            p_b = (std::locale::__imp *)&__b;
                          }
                          memset(p_b, v47, v53);
                          *((_BYTE *)p_b + v53) = 0;
                          if (v283 >= 0)
                            locale = &__b;
                          else
                            locale = __b.__locale_;
                          v58 = (*(uint64_t (**)(uint64_t, void *, size_t))(*(_QWORD *)v45 + 96))(v45, locale, v53);
                          v59 = v58;
                          if (SHIBYTE(v283) < 0)
                          {
                            operator delete(__b.__locale_);
                            if (v59 != v53)
                              goto LABEL_33;
                          }
                          else if (v58 != v53)
                          {
                            goto LABEL_33;
                          }
                        }
                        v60 = " " - v49 + 1;
                        if (v60 >= 1
                          && (*(uint64_t (**)(uint64_t, char *, int64_t))(*(_QWORD *)v45 + 96))(v45, v49, " " - v49 + 1) != v60)
                        {
LABEL_33:
                          std::ios_base::clear((std::ios_base *)((char *)v43 + *(_QWORD *)(*v43 - 24)), *(_DWORD *)((char *)v43 + *(_QWORD *)(*v43 - 24) + 32) | 5);
                          goto LABEL_34;
                        }
                        *((_QWORD *)v44 + 3) = 0;
                      }
LABEL_34:
                      MEMORY[0x1CAA448EC](v280);
                    }
                    sub_1C98D260C(&v300, (uint64_t)"\n", 1);
                    v38 = v259 + 1;
                    v41 = (_OWORD *)((char *)v41 + 4);
                    if (v259 == 2)
                    {
                      if ((v309 & 0x10) != 0)
                      {
                        v64 = v308;
                        v65 = (const void **)&v304;
                        v7 = v254;
                        v61 = v251;
                        v8 = v252;
                        if (v308 < v305)
                        {
                          v308 = v305;
                          v64 = v305;
                          v65 = (const void **)&v304;
                        }
                      }
                      else
                      {
                        v7 = v254;
                        v61 = v251;
                        v8 = v252;
                        if ((v309 & 8) == 0)
                        {
                          v62 = 0;
                          HIBYTE(v272) = 0;
                          v63 = __dst;
                          goto LABEL_79;
                        }
                        v64 = v303[2];
                        v65 = (const void **)v303;
                      }
                      v66 = *v65;
                      v62 = v64 - (_QWORD)*v65;
                      if (v62 > 0x7FFFFFFFFFFFFFF7)
                        abort();
                      if (v62 >= 0x17)
                      {
                        v67 = (v62 & 0xFFFFFFFFFFFFFFF8) + 8;
                        if ((v62 | 7) != 0x17)
                          v67 = v62 | 7;
                        v68 = v67 + 1;
                        v63 = (void **)operator new(v67 + 1);
                        __dst[1] = (void *)v62;
                        v272 = v68 | 0x8000000000000000;
                        __dst[0] = v63;
                      }
                      else
                      {
                        HIBYTE(v272) = v64 - *(_BYTE *)v65;
                        v63 = __dst;
                        if (!v62)
                        {
LABEL_79:
                          *((_BYTE *)v63 + v62) = 0;
                          *(_QWORD *)v298 = v61;
                          *(_QWORD *)&v298[*(v61 - 3)] = v250;
                          v300 = v249;
                          v301 = (char *)v248;
                          if (v307 < 0)
                            operator delete(__p);
                          std::streambuf::~streambuf();
                          std::iostream::~basic_iostream();
                          MEMORY[0x1CAA44AB4](v310);
                          v275 = v61;
                          *(void **)((char *)&v275 + *(v61 - 3)) = v250;
                          v277[0] = v249;
                          v277[1] = MEMORY[0x1E0DE4FB8] + 16;
                          if (v278 < 0)
                            operator delete((void *)v277[9]);
                          std::streambuf::~streambuf();
                          std::iostream::~basic_iostream();
                          MEMORY[0x1CAA44AB4](&v279);
                          v69 = *(_QWORD *)(*v273 + 24) != *(_QWORD *)(*v273 + 32);
                          v70 = (void **)__dst[0];
                          if (v272 >= 0)
                            v70 = __dst;
                          *(_DWORD *)buf = 136316674;
                          v285 = v253;
                          v286 = 2048;
                          v287 = v39;
                          v288 = 2048;
                          v289 = (float)(v24 + (float)(v27 * 0.5));
                          v290 = 2048;
                          v291 = v40;
                          v292 = 2048;
                          v293 = v27;
                          v294 = 2080;
                          v295 = v70;
                          v296 = 1024;
                          v297 = v69;
                          _os_log_impl(&dword_1C9870000, log, OS_LOG_TYPE_DEFAULT, "request faceprint for user %s at (%.0f,%.0f), bbox size (%.0f,%.0f), pose=%s, isRepresented=%d", buf, 0x44u);
                          if (SHIBYTE(v272) < 0)
                            operator delete(__dst[0]);
                          v71 = v266;
                          if (v266)
                          {
                            v72 = (unint64_t *)&v266->__shared_owners_;
                            do
                              v73 = __ldaxr(v72);
                            while (__stlxr(v73 - 1, v72));
                            if (!v73)
                            {
                              ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
                              std::__shared_weak_count::__release_weak(v71);
                            }
                          }
                          v28 = log;
                          break;
                        }
                      }
                      memmove(v63, v66, v62);
                      goto LABEL_79;
                    }
                  }
                }

                v74 = v263;
                if ((unint64_t)v263 >= v264)
                {
                  v78 = sub_1C98A9E00((uint64_t)&v262, *v7);
                }
                else
                {
                  v263->n128_u64[0] = v7->n128_u64[0];
                  v75 = v7->n128_u64[1];
                  v74->n128_u64[1] = v75;
                  if (v75)
                  {
                    v76 = (unint64_t *)(v75 + 8);
                    do
                      v77 = __ldxr(v76);
                    while (__stxr(v77 + 1, v76));
                  }
                  v78 = v74 + 1;
                }
                v263 = v78;
                v19 = v274;
              }
              if (v19)
              {
                v79 = (unint64_t *)&v19->__shared_owners_;
                do
                  v80 = __ldaxr(v79);
                while (__stlxr(v80 - 1, v79));
                if (!v80)
                {
                  ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
                  std::__shared_weak_count::__release_weak(v19);
                }
              }
            }
          }
        }
        else if (!*(_DWORD *)(v11 + 252))
        {
          goto LABEL_18;
        }
      }
      if (++v7 == v8)
      {
        v82 = v262;
        v81 = v263;
        goto LABEL_109;
      }
    }
  }
  v82 = 0;
  v81 = 0;
LABEL_109:
  v275 = 0;
  v276 = 0;
  v277[0] = 0;
  sub_1C98B2550((uint64_t)&v275, ((char *)v81 - v82) >> 4);
  v83 = (__n128 *)v262;
  v84 = v263;
  if (v262 != v263)
  {
    while (1)
    {
      v85 = operator new();
      v86 = v85;
      v260 = *(float *)&dword_1EF921318;
      v87 = a4[1];
      *(_OWORD *)v85 = *a4;
      *(_OWORD *)(v85 + 16) = v87;
      *(_QWORD *)(v85 + 32) = v83->n128_u64[0];
      v88 = (_QWORD *)v83->n128_u64[1];
      *(_QWORD *)(v85 + 40) = v88;
      if (v88)
      {
        v89 = v88 + 1;
        do
          v90 = __ldxr(v89);
        while (__stxr(v90 + 1, v89));
      }
      *(_QWORD *)(v85 + 48) = 0;
      v91 = v85 + 48;
      *(_BYTE *)(v85 + 72) = 0;
      *(_BYTE *)(v85 + 76) = 0;
      *(_BYTE *)(v85 + 80) = 0;
      *(_QWORD *)(v85 + 56) = 0;
      *(_QWORD *)(v85 + 61) = 0;
      *(_DWORD *)(v85 + 120) = 0;
      *(_QWORD *)(v85 + 96) = 0;
      *(_QWORD *)(v85 + 104) = 0;
      *(_QWORD *)(v85 + 88) = 0;
      *(_DWORD *)(v85 + 112) = 0;
      v92 = (char *)operator new(0x20uLL);
      *(_QWORD *)(v86 + 128) = v92;
      *(_OWORD *)(v86 + 136) = xmmword_1C99278C0;
      strcpy(v92, "Task is not processed yet.");
      v93 = *(_QWORD *)v83->n128_u64[0];
      *(_DWORD *)(v86 + 48) = *(_DWORD *)(v93 + 40);
      if (v91 == v93 + 40)
      {
        v97 = 0;
        v96 = 0;
      }
      else
      {
        v94 = *(float32x2_t *)(v93 + 44);
        *(float32x2_t *)(v86 + 52) = v94;
        v95 = *(float32x2_t *)(v93 + 52);
        *(float32x2_t *)(v86 + 60) = v95;
        v96 = v95;
        v97 = v94;
      }
      v98 = *(_OWORD *)(v93 + 60);
      *(_OWORD *)(v86 + 80) = *(_OWORD *)(v93 + 72);
      *(_OWORD *)(v86 + 68) = v98;
      *(float32x2_t *)(v86 + 52) = vsub_f32(v97, vmul_n_f32(v96, (float)(v260 + -1.0) * 0.5));
      *(float32x2_t *)(v86 + 60) = vmul_n_f32(v96, v260);
      v99 = v276;
      if ((unint64_t)v276 >= v277[0])
      {
        v101 = (v276 - (_BYTE *)v275) >> 4;
        if ((unint64_t)(v101 + 1) >> 60)
          abort();
        v102 = (uint64_t)(v277[0] - (_QWORD)v275) >> 3;
        if (v102 <= v101 + 1)
          v102 = v101 + 1;
        if (v277[0] - (_QWORD)v275 >= 0x7FFFFFFFFFFFFFF0uLL)
          v103 = 0xFFFFFFFFFFFFFFFLL;
        else
          v103 = v102;
        v302 = v277;
        if (v103)
        {
          if (v103 >> 60)
            sub_1C9899D30();
          v104 = (char *)operator new(16 * v103);
        }
        else
        {
          v104 = 0;
        }
        *(_QWORD *)v298 = v104;
        v299 = (std::__shared_weak_count *)&v104[16 * v101];
        v300 = (char *)v299;
        v301 = &v104[16 * v103];
        sub_1C98F85B4(v299, v86);
        v106 = (char *)v275;
        v105 = v276;
        v107 = v300;
        v108 = &v299->__vftable;
        if (v276 == v275)
        {
          v110 = v276;
        }
        else
        {
          do
          {
            v109 = *((_OWORD *)v105 - 1);
            v105 -= 16;
            *((_OWORD *)v108 - 1) = v109;
            v108 -= 2;
            *(_QWORD *)v105 = 0;
            *((_QWORD *)v105 + 1) = 0;
          }
          while (v105 != v106);
          v110 = (char *)v275;
          v105 = v276;
        }
        v100 = v107 + 16;
        v275 = v108;
        v276 = v107 + 16;
        v111 = (char *)v277[0];
        v277[0] = v301;
        v301 = v111;
        v299 = (std::__shared_weak_count *)v110;
        *(_QWORD *)v298 = v110;
        if (v105 == v110)
        {
          if (!v105)
            goto LABEL_111;
        }
        else
        {
          do
          {
            v300 = v105 - 16;
            v112 = (std::__shared_weak_count *)*((_QWORD *)v105 - 1);
            if (v112)
            {
              v113 = (unint64_t *)&v112->__shared_owners_;
              do
                v114 = __ldaxr(v113);
              while (__stlxr(v114 - 1, v113));
              if (!v114)
              {
                ((void (*)(std::__shared_weak_count *))v112->__on_zero_shared)(v112);
                std::__shared_weak_count::__release_weak(v112);
              }
            }
            v105 = v300;
          }
          while (v300 != v110);
          v105 = *(char **)v298;
          if (!*(_QWORD *)v298)
            goto LABEL_111;
        }
        operator delete(v105);
      }
      else
      {
        sub_1C98F85B4(v276, v86);
        v100 = v99 + 16;
      }
LABEL_111:
      v276 = v100;
      if (++v83 == v84)
        goto LABEL_146;
    }
  }
  v100 = v276;
LABEL_146:
  if (v275 != v100)
  {
    v115 = *(char ****)(*(_QWORD *)(a1 + 8) + 8);
    v116 = atomic_load((unsigned __int8 *)*v115 + 248);
    if ((v116 & 1) != 0)
    {
      v133 = (std::mutex *)(*v115 + 14);
      std::mutex::lock(v133);
      v149 = *v115;
      if (*((int *)*v115 + 26) >= 3)
      {
        v150 = atomic_load((unsigned __int8 *)&qword_1ED52ACD0);
        if ((v150 & 1) == 0 && __cxa_guard_acquire(&qword_1ED52ACD0))
        {
          qword_1ED52ACE0 = (uint64_t)os_log_create("com.apple.AppleCVA", "FaceKit");
          __cxa_guard_release(&qword_1ED52ACD0);
        }
        v151 = qword_1ED52ACE0;
        if (os_log_type_enabled((os_log_t)qword_1ED52ACE0, OS_LOG_TYPE_DEBUG))
        {
          v152 = *((_DWORD *)*v115 + 26);
          *(_DWORD *)v298 = 67109120;
          *(_DWORD *)&v298[4] = v152;
          _os_log_debug_impl(&dword_1C9870000, v151, OS_LOG_TYPE_DEBUG, "Dropping faceprint task groups (too many %i)", v298, 8u);
        }
        goto LABEL_263;
      }
      v153 = v276;
      if (v275 != v276)
      {
        v154 = v276 - (_BYTE *)v275 - 16;
        v155 = (char *)v275;
        if (v154 < 0x10)
          goto LABEL_314;
        v156 = (v154 >> 4) + 1;
        v155 = (char *)v275 + 16 * (v156 & 0x1FFFFFFFFFFFFFFELL);
        v157 = (uint64_t *)((char *)v275 + 16);
        v158 = v156 & 0x1FFFFFFFFFFFFFFELL;
        do
        {
          v159 = *(v157 - 2);
          v160 = *v157;
          v157 += 4;
          v161 = **(_QWORD **)(v160 + 32);
          *(_BYTE *)(**(_QWORD **)(v159 + 32) + 168) = 1;
          *(_BYTE *)(v161 + 168) = 1;
          v158 -= 2;
        }
        while (v158);
        if (v156 != (v156 & 0x1FFFFFFFFFFFFFFELL))
        {
LABEL_314:
          do
          {
            v162 = *(_QWORD *)v155;
            v155 += 16;
            *(_BYTE *)(**(_QWORD **)(v162 + 32) + 168) = 1;
          }
          while (v155 != v153);
        }
      }
      CVPixelBufferRetain(texture);
      v163 = (char *)v275;
      v164 = v276;
      v165 = v276 - (_BYTE *)v275;
      if (v276 == v275)
      {
        v167 = 0;
        v166 = 0;
      }
      else
      {
        if ((v165 & 0x8000000000000000) != 0)
          goto LABEL_308;
        v166 = (char *)operator new(v165);
        v167 = v166;
        do
        {
          *(_QWORD *)v167 = *(_QWORD *)v163;
          v168 = *((_QWORD *)v163 + 1);
          *((_QWORD *)v167 + 1) = v168;
          if (v168)
          {
            v169 = (unint64_t *)(v168 + 8);
            do
              v170 = __ldxr(v169);
            while (__stxr(v170 + 1, v169));
          }
          v163 += 16;
          v167 += 16;
        }
        while (v163 != v164);
      }
      v178 = (*v115)[11];
      v179 = (std::__shared_weak_count *)operator new(0x40uLL);
      v179->__shared_owners_ = 0;
      v179->__shared_weak_owners_ = 0;
      v179->__vftable = (std::__shared_weak_count_vtbl *)&off_1E8295AD8;
      v179[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E8294D38;
      CVPixelBufferRetain(texture);
      v180 = v167 - v166;
      v261 = v133;
      if (v167 == v166)
      {
        v189 = 0;
        v185 = 0;
        v183 = 0;
      }
      else
      {
        if (v180 < 0)
          goto LABEL_308;
        v181 = v180 >> 4;
        v182 = operator new(v180);
        v183 = v182;
        v184 = v166;
        v185 = v182;
        do
        {
          v186 = *((_QWORD *)v184 + 1);
          *v185 = *(_QWORD *)v184;
          v185[1] = v186;
          if (v186)
          {
            v187 = (unint64_t *)(v186 + 8);
            do
              v188 = __ldxr(v187);
            while (__stxr(v188 + 1, v187));
          }
          v184 += 16;
          v185 += 2;
        }
        while (v184 != v167);
        v189 = (char *)&v182[2 * v181];
      }
      v190 = operator new(0x40uLL);
      *v190 = &off_1E8295368;
      v190[1] = sub_1C98B224C;
      v190[2] = 0;
      v190[3] = v149;
      v190[4] = texture;
      v190[5] = v183;
      v190[6] = v185;
      v190[7] = v189;
      v179[2].__shared_owners_ = (uint64_t)v190;
      *(_QWORD *)v298 = v179 + 1;
      v299 = v179;
      v191 = (*(uint64_t (**)(char *, uint8_t *))(*(_QWORD *)v178 + 16))(v178, v298);
      v192 = v299;
      v133 = v261;
      if (v299)
      {
        v193 = (unint64_t *)&v299->__shared_owners_;
        do
          v194 = __ldaxr(v193);
        while (__stlxr(v194 - 1, v193));
        if (!v194)
        {
          ((void (*)(std::__shared_weak_count *))v192->__on_zero_shared)(v192);
          std::__shared_weak_count::__release_weak(v192);
        }
      }
      if ((v191 & 1) != 0)
      {
        ++*((_DWORD *)*v115 + 26);
        v195 = texture;
      }
      else
      {
        v196 = v276;
        v195 = texture;
        if (v275 != v276)
        {
          v197 = v276 - (_BYTE *)v275 - 16;
          v198 = (char *)v275;
          if (v197 < 0x10)
            goto LABEL_315;
          v199 = (v197 >> 4) + 1;
          v198 = (char *)v275 + 16 * (v199 & 0x1FFFFFFFFFFFFFFELL);
          v200 = (uint64_t *)((char *)v275 + 16);
          v201 = v199 & 0x1FFFFFFFFFFFFFFELL;
          do
          {
            v202 = *(v200 - 2);
            v203 = *v200;
            v200 += 4;
            v204 = **(_QWORD **)(v203 + 32);
            *(_BYTE *)(**(_QWORD **)(v202 + 32) + 168) = 0;
            *(_BYTE *)(v204 + 168) = 0;
            v201 -= 2;
          }
          while (v201);
          if (v199 != (v199 & 0x1FFFFFFFFFFFFFFELL))
          {
LABEL_315:
            do
            {
              v205 = *(_QWORD *)v198;
              v198 += 16;
              *(_BYTE *)(**(_QWORD **)(v205 + 32) + 168) = 0;
            }
            while (v198 != v196);
          }
        }
      }
      if (v166)
      {
        while (v167 != v166)
        {
          v206 = (std::__shared_weak_count *)*((_QWORD *)v167 - 1);
          if (v206)
          {
            v207 = (unint64_t *)&v206->__shared_owners_;
            do
              v208 = __ldaxr(v207);
            while (__stlxr(v208 - 1, v207));
            if (!v208)
            {
              ((void (*)(std::__shared_weak_count *))v206->__on_zero_shared)(v206);
              std::__shared_weak_count::__release_weak(v206);
            }
          }
          v167 -= 16;
        }
        operator delete(v166);
      }
      CVPixelBufferRelease(v195);
      goto LABEL_263;
    }
    v117 = (char *)v275;
    v118 = v276;
    if (v275 != v276)
    {
      v119 = v276 - (_BYTE *)v275 - 16;
      v120 = (v119 >> 4) + 1;
      v121 = (char *)v275;
      if (v119 < 0x10)
        goto LABEL_316;
      v121 = (char *)v275 + 16 * (v120 & 0x1FFFFFFFFFFFFFFELL);
      v122 = (uint64_t *)((char *)v275 + 16);
      v123 = v120 & 0x1FFFFFFFFFFFFFFELL;
      do
      {
        v124 = *(v122 - 2);
        v125 = *v122;
        v122 += 4;
        v126 = **(_QWORD **)(v125 + 32);
        *(_BYTE *)(**(_QWORD **)(v124 + 32) + 168) = 1;
        *(_BYTE *)(v126 + 168) = 1;
        v123 -= 2;
      }
      while (v123);
      if (v120 != (v120 & 0x1FFFFFFFFFFFFFFELL))
      {
LABEL_316:
        do
        {
          v127 = *(_QWORD *)v121;
          v121 += 16;
          *(_BYTE *)(**(_QWORD **)(v127 + 32) + 168) = 1;
        }
        while (v121 != v118);
      }
      if (v119 <= 0xF)
        goto LABEL_159;
      v128 = (uint64_t *)(v117 + 16);
      v129 = v120 & 0x1FFFFFFFFFFFFFFELL;
      do
      {
        v130 = *(v128 - 2);
        v131 = *v128;
        v128 += 4;
        *(_DWORD *)(v130 + 120) = 2;
        *(_DWORD *)(v131 + 120) = 2;
        v129 -= 2;
      }
      while (v129);
      if (v120 != (v120 & 0x1FFFFFFFFFFFFFFELL))
      {
        v117 += 16 * (v120 & 0x1FFFFFFFFFFFFFFELL);
        do
        {
LABEL_159:
          v132 = *(_QWORD *)v117;
          v117 += 16;
          *(_DWORD *)(v132 + 120) = 2;
        }
        while (v117 != v118);
      }
    }
    v133 = (std::mutex *)(*v115 + 3);
    std::mutex::lock(v133);
    v135 = (char *)v275;
    v134 = v276;
    if (v276 - (_BYTE *)v275 >= 1)
    {
      v136 = *v115;
      v137 = (v276 - (_BYTE *)v275) >> 4;
      v139 = **v115;
      v138 = (*v115)[1];
      v140 = v138 - v139;
      v141 = &v139[(v138 - v139) & 0xFFFFFFFFFFFFFFF0];
      v142 = (*v115)[2];
      if (v137 > (v142 - v138) >> 4)
      {
        v143 = v140 >> 4;
        v144 = (v140 >> 4) + v137;
        if (!(v144 >> 60))
        {
          v145 = v142 - v139;
          v146 = (v142 - v139) >> 3;
          if (v146 > v144)
            v144 = v146;
          if (v145 >= 0x7FFFFFFFFFFFFFF0)
            v147 = 0xFFFFFFFFFFFFFFFLL;
          else
            v147 = v144;
          if (v147)
          {
            if (v147 >> 60)
              sub_1C9899D30();
            v148 = (char *)operator new(16 * v147);
          }
          else
          {
            v148 = 0;
          }
          v209 = &v148[16 * v143];
          v210 = &v209[16 * v137];
          v211 = v209;
          do
          {
            *(_QWORD *)v211 = *(_QWORD *)v135;
            v212 = *((_QWORD *)v135 + 1);
            *((_QWORD *)v211 + 1) = v212;
            if (v212)
            {
              v213 = (unint64_t *)(v212 + 8);
              do
                v214 = __ldxr(v213);
              while (__stxr(v214 + 1, v213));
            }
            v211 += 16;
            v135 += 16;
          }
          while (v211 != v210);
          v215 = *v136;
          if (*v136 != v141)
          {
            v216 = v141;
            do
            {
              v217 = *((_OWORD *)v216 - 1);
              v216 -= 16;
              *((_OWORD *)v209 - 1) = v217;
              v209 -= 16;
              *(_QWORD *)v216 = 0;
              *((_QWORD *)v216 + 1) = 0;
            }
            while (v216 != v215);
          }
          v218 = v136[1];
          if (v218 != v141)
          {
            do
            {
              *(_OWORD *)v210 = *(_OWORD *)v141;
              v210 += 16;
              *(_QWORD *)v141 = 0;
              *((_QWORD *)v141 + 1) = 0;
              v141 += 16;
            }
            while (v141 != v218);
            v141 = v136[1];
          }
          v219 = *v136;
          *v136 = v209;
          v136[1] = v210;
          v136[2] = &v148[16 * v147];
          while (v141 != v219)
          {
            v220 = (std::__shared_weak_count *)*((_QWORD *)v141 - 1);
            if (v220)
            {
              v221 = (unint64_t *)&v220->__shared_owners_;
              do
                v222 = __ldaxr(v221);
              while (__stlxr(v222 - 1, v221));
              if (!v222)
              {
                ((void (*)(std::__shared_weak_count *))v220->__on_zero_shared)(v220);
                std::__shared_weak_count::__release_weak(v220);
              }
            }
            v141 -= 16;
          }
          if (v219)
            operator delete(v219);
          goto LABEL_263;
        }
LABEL_308:
        abort();
      }
      v171 = (v138 - v141) >> 4;
      if (v171 >= v137)
      {
        v172 = (char *)v275 + 16 * v137;
        v174 = v138;
      }
      else
      {
        v172 = (char *)v275 + 16 * v171;
        if (v172 == v276)
        {
          v174 = v138;
        }
        else
        {
          v173 = (char *)v275 + 16 * v171;
          v174 = v138;
          do
          {
            *(_QWORD *)v174 = *(_QWORD *)v173;
            v175 = *((_QWORD *)v173 + 1);
            *((_QWORD *)v174 + 1) = v175;
            if (v175)
            {
              v176 = (unint64_t *)(v175 + 8);
              do
                v177 = __ldxr(v176);
              while (__stxr(v177 + 1, v176));
            }
            v173 += 16;
            v174 += 16;
          }
          while (v173 != v134);
        }
        v136[1] = v174;
        if (v138 - v141 < 1)
          goto LABEL_263;
      }
      v223 = &v174[-16 * v137];
      v224 = v174;
      if (v223 < v138)
      {
        v225 = &v174[-16 * v137];
        v224 = v174;
        do
        {
          *(_OWORD *)v224 = *(_OWORD *)v225;
          v224 += 16;
          *(_QWORD *)v225 = 0;
          *((_QWORD *)v225 + 1) = 0;
          v225 += 16;
        }
        while (v225 < v138);
      }
      v136[1] = v224;
      if (v174 != &v141[16 * v137])
      {
        do
        {
          v231 = *((_OWORD *)v223 - 1);
          v223 -= 16;
          *(_QWORD *)v223 = 0;
          *((_QWORD *)v223 + 1) = 0;
          v232 = (std::__shared_weak_count *)*((_QWORD *)v174 - 1);
          *((_OWORD *)v174 - 1) = v231;
          v174 -= 16;
          if (v232)
          {
            v233 = (unint64_t *)&v232->__shared_owners_;
            do
              v234 = __ldaxr(v233);
            while (__stlxr(v234 - 1, v233));
            if (!v234)
            {
              ((void (*)(std::__shared_weak_count *))v232->__on_zero_shared)(v232);
              std::__shared_weak_count::__release_weak(v232);
            }
          }
        }
        while (v223 != v141);
      }
      for (; v135 != v172; v141 += 16)
      {
        v236 = *(_QWORD *)v135;
        v235 = *((_QWORD *)v135 + 1);
        if (v235)
        {
          v237 = (unint64_t *)(v235 + 8);
          do
            v238 = __ldxr(v237);
          while (__stxr(v238 + 1, v237));
        }
        v239 = (std::__shared_weak_count *)*((_QWORD *)v141 + 1);
        *(_QWORD *)v141 = v236;
        *((_QWORD *)v141 + 1) = v235;
        if (v239)
        {
          v240 = (unint64_t *)&v239->__shared_owners_;
          do
            v241 = __ldaxr(v240);
          while (__stlxr(v241 - 1, v240));
          if (!v241)
          {
            ((void (*)(std::__shared_weak_count *))v239->__on_zero_shared)(v239);
            std::__shared_weak_count::__release_weak(v239);
          }
        }
        v135 += 16;
      }
    }
LABEL_263:
    std::mutex::unlock(v133);
    v100 = (char *)v275;
  }
  if (v100)
  {
    v226 = v276;
    v227 = v100;
    if (v276 != v100)
    {
      do
      {
        v228 = (std::__shared_weak_count *)*((_QWORD *)v226 - 1);
        if (v228)
        {
          v229 = (unint64_t *)&v228->__shared_owners_;
          do
            v230 = __ldaxr(v229);
          while (__stlxr(v230 - 1, v229));
          if (!v230)
          {
            ((void (*)(std::__shared_weak_count *))v228->__on_zero_shared)(v228);
            std::__shared_weak_count::__release_weak(v228);
          }
        }
        v226 -= 16;
      }
      while (v226 != v100);
      v227 = v275;
    }
    v276 = v100;
    operator delete(v227);
  }
  v242 = (__n128 *)v262;
  if (v262)
  {
    v243 = v263;
    v244 = v262;
    if (v263 != v262)
    {
      do
      {
        v245 = (std::__shared_weak_count *)v243[-1].n128_u64[1];
        if (v245)
        {
          v246 = (unint64_t *)&v245->__shared_owners_;
          do
            v247 = __ldaxr(v246);
          while (__stlxr(v247 - 1, v246));
          if (!v247)
          {
            ((void (*)(std::__shared_weak_count *))v245->__on_zero_shared)(v245);
            std::__shared_weak_count::__release_weak(v245);
          }
        }
        --v243;
      }
      while (v243 != v242);
      v244 = v262;
    }
    v263 = v242;
    operator delete(v244);
  }
}

void sub_1C98F4860(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,uint64_t a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51,uint64_t a52,char a53)
{
  sub_1C98F88FC((uint64_t)&STACK[0x2F0]);
  sub_1C98F88FC((uint64_t)&a53);
  sub_1C987C140((uint64_t)&a39);

  sub_1C987C140((uint64_t)&a51);
  sub_1C98A7D08(&a36);
  _Unwind_Resume(a1);
}

void sub_1C98F495C(uint64_t a1, uint64_t ***a2, uint64_t *a3)
{
  void ***v4;
  void **v5;
  std::mutex *v6;
  std::condition_variable *v7;
  std::mutex *v8;
  void **v9;
  char *v10;
  unint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  const unsigned __int8 **v22;
  std::__shared_weak_count *v23;
  unint64_t *p_shared_owners;
  unint64_t v25;
  uint64_t v26;
  int v27;
  unsigned __int8 v28;
  NSObject *v29;
  const unsigned __int8 **v30;
  double v31;
  uint64_t v32;
  double v33;
  const unsigned __int8 *v34;
  int v35;
  __int128 v36;
  unsigned __int8 v37;
  NSObject *v38;
  unsigned __int8 v39;
  NSObject *v40;
  std::__shared_weak_count *v41;
  unint64_t **v42;
  unint64_t *v43;
  unint64_t v44;
  unint64_t v45;
  float v46;
  uint64_t v47;
  float ***v48;
  float ***v49;
  float v50;
  float v51;
  float **v52;
  uint64_t v53;
  float *v54;
  float *v55;
  float v56;
  float *v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  float32x4_t *v61;
  float32x4_t *v62;
  uint64_t v63;
  float32x4_t v64;
  float32x4_t v65;
  float *v66;
  float *v67;
  float v68;
  float v69;
  float v70;
  unsigned __int8 v71;
  uint64_t v72;
  unint64_t **v73;
  unint64_t *v74;
  unint64_t v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  unint64_t ***v79;
  uint64_t v80;
  unint64_t *v81;
  unint64_t v82;
  unint64_t ***v83;
  unint64_t ***v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  unint64_t v88;
  char *v89;
  char *v90;
  __int128 v91;
  unint64_t *v92;
  unint64_t v93;
  char *v94;
  __int128 v95;
  unint64_t ***v96;
  std::__shared_weak_count *v97;
  unint64_t *v98;
  unint64_t v99;
  _QWORD *v100;
  std::__shared_weak_count *v101;
  unint64_t *v102;
  unint64_t v103;
  unint64_t v104;
  uint64_t v105;
  std::__shared_weak_count *v106;
  unint64_t *v107;
  unint64_t v108;
  uint64_t **v109;
  uint64_t **v110;
  uint64_t v111;
  unint64_t **v112;
  std::__shared_weak_count *v113;
  unint64_t *v114;
  unint64_t v115;
  unsigned __int8 v116;
  NSObject *v117;
  unint64_t ***v118;
  _QWORD *v119;
  unint64_t ***v120;
  _QWORD *v121;
  unint64_t **v122;
  unint64_t **v123;
  std::__shared_weak_count *v124;
  unint64_t *v125;
  unint64_t v126;
  std::__shared_weak_count *v127;
  unint64_t *v128;
  unint64_t v129;
  unint64_t *v130;
  unint64_t v131;
  uint64_t v132;
  uint64_t *v133;
  unsigned __int8 v134;
  NSObject *v135;
  unsigned __int8 v136;
  NSObject *v137;
  uint64_t v138;
  const unsigned __int8 *v139;
  uint64_t v140;
  unint64_t **v141;
  unint64_t **v142;
  unint64_t *v143;
  unint64_t v144;
  std::__shared_weak_count *v145;
  unint64_t *v146;
  unint64_t v147;
  std::__shared_weak_count *v148;
  const unsigned __int8 **v149;
  unint64_t *v150;
  unint64_t v151;
  std::__shared_weak_count *v152;
  unint64_t *v153;
  unint64_t v154;
  unsigned __int8 v155;
  const char *v156;
  _QWORD *v157;
  const unsigned __int8 *v158;
  uint64_t v159;
  unint64_t ***v160;
  const unsigned __int8 **v161;
  unint64_t *v162;
  unint64_t **v163;
  unint64_t *v164;
  BOOL v165;
  unint64_t v166;
  unint64_t v167;
  int v168;
  uint64_t v169;
  BOOL v170;
  unint64_t *v171;
  unint64_t *v172;
  _QWORD *v173;
  _QWORD *v174;
  _QWORD *v175;
  _QWORD *v176;
  int v177;
  BOOL v178;
  char v179;
  BOOL v180;
  _QWORD *v181;
  unint64_t v182;
  unint64_t v183;
  int v184;
  unint64_t v185;
  unint64_t v186;
  unint64_t v187;
  unint64_t v188;
  int v189;
  unint64_t v190;
  unint64_t v191;
  const unsigned __int8 *v192;
  char *v193;
  char *v194;
  char *v195;
  uint64_t v196;
  unint64_t v197;
  uint64_t *v198;
  char *v199;
  char *v200;
  char *v201;
  unint64_t v202;
  char *v203;
  unint64_t *v204;
  _QWORD *v205;
  uint64_t v206;
  unint64_t v207;
  uint64_t v208;
  char *v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  unint64_t v213;
  char *v214;
  char *v215;
  char *v216;
  uint64_t v217;
  char *v218;
  char *v219;
  char *v220;
  char *v221;
  uint64_t v222;
  uint64_t v223;
  char *v224;
  char *v225;
  char *v226;
  uint64_t v227;
  __int128 v228;
  __int128 v229;
  uint64_t v230;
  char *v231;
  void **v232;
  void **v233;
  unint64_t *v234;
  _QWORD *v235;
  void **v236;
  void **v237;
  unsigned __int8 v238;
  NSObject *v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  unint64_t v243;
  unint64_t v244;
  uint8x8_t v245;
  _QWORD *v246;
  _QWORD *v247;
  unint64_t v249;
  uint64_t v251;
  _QWORD *v252;
  float v253;
  _BOOL8 v254;
  unint64_t v255;
  unint64_t v256;
  size_t prime;
  BOOL v258;
  unint64_t v259;
  unint64_t v260;
  unint64_t v261;
  BOOL v262;
  unint64_t v263;
  uint64_t v264;
  char *v265;
  char *v266;
  char *v267;
  uint64_t v268;
  __int128 v269;
  __int128 v270;
  uint64_t v271;
  char *v272;
  void **v273;
  void **v274;
  unint64_t v275;
  uint8x8_t v276;
  uint64_t v277;
  void *v278;
  void *v279;
  uint64_t v280;
  _QWORD **v281;
  size_t v282;
  size_t v283;
  size_t v284;
  _QWORD *i;
  size_t v286;
  uint64_t v287;
  _QWORD *v288;
  uint64_t v289;
  size_t v290;
  uint64_t v291;
  _QWORD *v292;
  unint64_t v293;
  void *v294;
  uint64_t ****v295;
  uint64_t ***v296;
  uint64_t **v297;
  uint64_t v298;
  unint64_t v299;
  uint64_t v300;
  uint64_t **v301;
  uint64_t v302;
  __int128 v303;
  std::__shared_weak_count *v304;
  unint64_t *v305;
  unint64_t v306;
  unsigned __int8 v307;
  NSObject *v308;
  std::__shared_weak_count *v309;
  unint64_t *v310;
  unint64_t v311;
  unsigned __int8 v312;
  uint64_t v313;
  unint64_t v314;
  unint64_t v315;
  uint8x8_t v316;
  _QWORD *v317;
  _QWORD *v318;
  unint64_t v320;
  uint64_t v322;
  _QWORD *v323;
  _QWORD *v324;
  uint64_t v325;
  unint64_t v326;
  uint64_t v327;
  unint64_t v328;
  float v329;
  float v330;
  _BOOL8 v331;
  unint64_t v332;
  unint64_t v333;
  size_t v334;
  void *v335;
  void *v336;
  uint64_t v337;
  _QWORD *v338;
  size_t v339;
  size_t v340;
  size_t v341;
  _QWORD *j;
  size_t v343;
  uint64_t v344;
  unint64_t v345;
  uint8x8_t v346;
  uint64_t v347;
  _QWORD *v348;
  uint64_t v349;
  size_t v350;
  uint64_t v351;
  _QWORD *v352;
  unint64_t v353;
  _QWORD *v354;
  _QWORD *v355;
  void *v356;
  uint64_t v357;
  double v358;
  const unsigned __int8 *v359;
  int v360;
  __int128 v361;
  uint64_t v362;
  int v363;
  unsigned __int8 v364;
  NSObject *v365;
  const void **v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t v369;
  unint64_t v370;
  float *v371;
  uint64_t v372;
  uint64_t v373;
  float v374;
  float v375;
  uint64_t v376;
  unsigned __int8 v377;
  NSObject *v378;
  const unsigned __int8 *v379;
  _QWORD *v380;
  uint64_t v381;
  _QWORD *v382;
  unsigned __int8 v383;
  void **v384;
  uint64_t v385;
  float v386;
  unsigned __int8 v387;
  const unsigned __int8 *v388;
  _QWORD *v389;
  uint64_t v390;
  _QWORD *v391;
  uint64_t v392;
  uint64_t v393;
  uint64_t v394;
  float v395;
  float v396;
  char *v397;
  float *v398;
  unint64_t v399;
  unint64_t v400;
  float32x4_t *v401;
  uint64_t v402;
  float32x4_t v403;
  float32x4_t v404;
  float *v405;
  float v406;
  float *v407;
  unint64_t v408;
  float v409;
  float *v410;
  float *v411;
  unint64_t v412;
  float *v413;
  unint64_t v414;
  uint64_t v415;
  float v416;
  uint64_t v417;
  float *v418;
  float *v419;
  float v420;
  float v421;
  float *v422;
  uint64_t v423;
  float v424;
  float v425;
  float v426;
  void **v427;
  unsigned __int8 v428;
  NSObject *v429;
  uint64_t v430;
  uint64_t v431;
  NSObject *v432;
  const char *v433;
  uint32_t v434;
  uint64_t v435;
  unint64_t v436;
  uint64_t v437;
  float v438;
  uint64_t v439;
  float *v440;
  uint64_t v441;
  float32x4_t *v442;
  float v443;
  float v444;
  float32x4_t *v445;
  uint64_t v446;
  float32x4_t v447;
  float32x4_t v448;
  float *v449;
  float *v450;
  uint64_t v451;
  float v452;
  float v453;
  float v454;
  void *v455;
  unint64_t v456;
  uint64_t v457;
  float32x4_t *v458;
  float32x4_t *v459;
  uint64_t v460;
  float32x4_t v461;
  float v462;
  float *v463;
  unint64_t v464;
  unint64_t v465;
  float32x4_t *v466;
  uint64_t v467;
  float32x4_t v468;
  float32x4_t v469;
  float v470;
  float v471;
  float *v472;
  uint64_t v473;
  float *v474;
  unint64_t v475;
  uint64_t v476;
  uint64_t v477;
  float *v478;
  float32x4_t *v479;
  float32x4_t *v480;
  uint64_t v481;
  float32x4_t v482;
  size_t v483;
  uint64_t v484;
  const unsigned __int8 *v485;
  uint64_t v486;
  int v487;
  int v488;
  uint64_t v489;
  uint64_t v490;
  uint64_t v491;
  float *v492;
  unint64_t v493;
  float *v494;
  unint64_t v495;
  uint64_t v496;
  float32x4_t *v497;
  float32x4_t *v498;
  uint64_t v499;
  float32x4_t v500;
  float v501;
  float v502;
  float *v503;
  unsigned __int8 v504;
  const unsigned __int8 *v505;
  uint64_t v506;
  unint64_t v507;
  void *v508;
  size_t v509;
  size_t v510;
  __int128 v511;
  unint64_t ***v512;
  unint64_t ***v513;
  std::__shared_weak_count *v514;
  unint64_t *v515;
  unint64_t v516;
  unint64_t *v517;
  unint64_t v518;
  unint64_t *v519;
  unint64_t v520;
  int v521;
  uint64_t v522;
  uint64_t **v523;
  unint64_t v524;
  unsigned int v525;
  uint64_t v526;
  uint64_t **v527;
  uint64_t v528;
  uint64_t v529;
  uint64_t v530;
  std::__shared_weak_count *v531;
  unint64_t *v532;
  unint64_t v533;
  uint64_t v534;
  uint64_t v535;
  std::__shared_weak_count *v536;
  unint64_t *v537;
  unint64_t v538;
  int v539;
  unint64_t v540;
  _BOOL4 v541;
  unint64_t *v542;
  unint64_t v543;
  uint64_t v544;
  unint64_t **v545;
  std::__shared_weak_count *v546;
  unint64_t *v547;
  unint64_t v548;
  unint64_t *v549;
  unint64_t *v550;
  unint64_t v551;
  unint64_t v552;
  unint64_t v553;
  unint64_t v554;
  uint64_t v555;
  uint64_t v556;
  uint64_t v557;
  std::__shared_weak_count *v558;
  unint64_t *v559;
  unint64_t v560;
  uint64_t v561;
  uint64_t v562;
  std::__shared_weak_count *v563;
  unint64_t *v564;
  unint64_t v565;
  int v566;
  unint64_t v567;
  BOOL v568;
  unint64_t *v569;
  unint64_t v570;
  uint64_t v571;
  unint64_t **v572;
  std::__shared_weak_count *v573;
  unint64_t *v574;
  unint64_t v575;
  unint64_t *v576;
  unint64_t *v577;
  unint64_t v578;
  unint64_t v579;
  unint64_t v580;
  int v581;
  BOOL v582;
  unint64_t *v583;
  unint64_t *v584;
  uint64_t *v585;
  __int128 v586;
  uint64_t *v587;
  uint64_t **v588;
  uint64_t *v589;
  unint64_t *v590;
  unint64_t v591;
  unint64_t v592;
  int v593;
  unint64_t v594;
  unint64_t v595;
  unint64_t v596;
  unint64_t v597;
  int v598;
  unint64_t v599;
  unint64_t v600;
  uint64_t v601;
  uint64_t *v602;
  uint64_t v603;
  uint64_t *v604;
  uint64_t v605;
  _BYTE *v606;
  int v607;
  uint64_t v608;
  int v609;
  uint64_t *v610;
  uint64_t v611;
  uint64_t v612;
  uint64_t *v613;
  uint64_t v614;
  unsigned __int8 v615;
  NSObject *v616;
  uint64_t **v617;
  uint64_t v618;
  _QWORD *v619;
  std::__shared_weak_count *v620;
  unint64_t *v621;
  unint64_t v622;
  uint64_t v623;
  uint64_t v624;
  _QWORD *v625;
  std::__shared_weak_count *v626;
  uint64_t v627;
  unint64_t *v628;
  unint64_t v629;
  uint64_t v630;
  unint64_t v631;
  unint64_t *v632;
  unint64_t v633;
  char *v634;
  char *v635;
  std::__shared_weak_count *v636;
  unint64_t *v637;
  unint64_t v638;
  _QWORD *v639;
  char *v640;
  const unsigned __int8 *v641;
  const unsigned __int8 **v642;
  uint64_t v644;
  uint64_t *v645;
  unint64_t v646;
  unint64_t ***v647;
  float v648;
  float v649;
  float v650;
  unsigned int v651;
  char *v652;
  uint64_t *v653;
  unint64_t ***__p;
  unint64_t ***v656;
  unint64_t v657;
  _QWORD *v658;
  std::__shared_weak_count *v659;
  const unsigned __int8 **v660;
  std::__shared_weak_count *v661;
  void *v662;
  __int128 v663;
  _BYTE __lk[32];
  float v665[4];
  _BYTE buf[32];
  uint64_t v667;

  v667 = *MEMORY[0x1E0C80C00];
  v4 = *(void ****)(*(_QWORD *)(a1 + 8) + 8);
  v5 = *v4;
  if (*((_BYTE *)*v4 + 176))
  {
    v6 = (std::mutex *)(v5 + 14);
    *(_QWORD *)__lk = v5 + 14;
    __lk[8] = 1;
    std::mutex::lock((std::mutex *)(v5 + 14));
    if (*((int *)*v4 + 26) < 1)
    {
LABEL_7:
      std::mutex::unlock(v6);
      v5 = *v4;
      goto LABEL_8;
    }
    v7 = (std::condition_variable *)(*v4 + 23);
    do
    {
      std::condition_variable::wait(v7, (std::unique_lock<std::mutex> *)__lk);
      v5 = *v4;
    }
    while (*((_DWORD *)*v4 + 26));
    if (__lk[8])
    {
      v6 = *(std::mutex **)__lk;
      goto LABEL_7;
    }
  }
LABEL_8:
  v8 = (std::mutex *)(v5 + 3);
  std::mutex::lock((std::mutex *)(v5 + 3));
  v9 = *v4;
  v10 = (char *)**v4;
  v662 = v10;
  *v9 = 0;
  v663 = *(_OWORD *)(v9 + 1);
  v652 = (char *)v663;
  v9[1] = 0;
  v9[2] = 0;
  std::mutex::unlock(v8);
  if (v10 != v652)
  {
    v11 = v652 - v10 - 16;
    v12 = v10;
    if (v11 < 0x10)
      goto LABEL_947;
    v13 = (v11 >> 4) + 1;
    v12 = &v10[16 * (v13 & 0x1FFFFFFFFFFFFFFELL)];
    v14 = (uint64_t *)(v10 + 16);
    v15 = v13 & 0x1FFFFFFFFFFFFFFELL;
    do
    {
      v16 = *(v14 - 2);
      v17 = *v14;
      v14 += 4;
      v18 = **(_QWORD **)(v17 + 32);
      *(_BYTE *)(**(_QWORD **)(v16 + 32) + 168) = 0;
      *(_BYTE *)(v18 + 168) = 0;
      v15 -= 2;
    }
    while (v15);
    if (v13 != (v13 & 0x1FFFFFFFFFFFFFFELL))
    {
LABEL_947:
      do
      {
        v19 = *(_QWORD *)v12;
        v12 += 16;
        *(_BYTE *)(**(_QWORD **)(v19 + 32) + 168) = 0;
      }
      while (v12 != v652);
    }
  }
  v20 = (char *)v662;
  v640 = (char *)v663;
  if (v662 != (void *)v663)
  {
    v639 = a3 + 2;
    v645 = a3;
    while (1)
    {
      v21 = **(_QWORD **)(*(_QWORD *)v20 + 32);
      v22 = *(const unsigned __int8 ***)(v21 + 24);
      v23 = *(std::__shared_weak_count **)(v21 + 32);
      v660 = v22;
      v661 = v23;
      if (v23)
      {
        p_shared_owners = (unint64_t *)&v23->__shared_owners_;
        do
          v25 = __ldxr(p_shared_owners);
        while (__stxr(v25 + 1, p_shared_owners));
      }
      if (!v22)
      {
        v37 = atomic_load((unsigned __int8 *)&qword_1ED52ACD0);
        if ((v37 & 1) == 0 && __cxa_guard_acquire(&qword_1ED52ACD0))
        {
          qword_1ED52ACE0 = (uint64_t)os_log_create("com.apple.AppleCVA", "FaceKit");
          __cxa_guard_release(&qword_1ED52ACD0);
        }
        v38 = (id)qword_1ED52ACE0;
        if (os_log_type_enabled(v38, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)__lk = 0;
          _os_log_debug_impl(&dword_1C9870000, v38, OS_LOG_TYPE_DEBUG, "Warning: no user for this track", __lk, 2u);
        }

        goto LABEL_724;
      }
      v653 = (uint64_t *)v20;
      v26 = *(_QWORD *)v20;
      v27 = *(_DWORD *)(v26 + 120);
      if (v27 == 2)
      {
        v20 = (char *)v653;
        if ((*v22)[16])
          goto LABEL_724;
        sub_1C98A84C8(v22);
        v39 = atomic_load((unsigned __int8 *)&qword_1ED52ACD0);
        if ((v39 & 1) == 0 && __cxa_guard_acquire(&qword_1ED52ACD0))
        {
          qword_1ED52ACE0 = (uint64_t)os_log_create("com.apple.AppleCVA", "FaceKit");
          __cxa_guard_release(&qword_1ED52ACD0);
        }
        v40 = (id)qword_1ED52ACE0;
        if (os_log_type_enabled(v40, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)__lk = 0;
          _os_log_debug_impl(&dword_1C9870000, v40, OS_LOG_TYPE_DEBUG, "Tracking new user with no faceprint", __lk, 2u);
        }

LABEL_39:
        v20 = (char *)v653;
        v41 = v661;
        if (v661)
          goto LABEL_725;
        goto LABEL_16;
      }
      if (!v27)
      {
        v28 = atomic_load((unsigned __int8 *)&qword_1ED52ACD0);
        if ((v28 & 1) == 0 && __cxa_guard_acquire(&qword_1ED52ACD0))
        {
          qword_1ED52ACE0 = (uint64_t)os_log_create("com.apple.AppleCVA", "FaceKit");
          __cxa_guard_release(&qword_1ED52ACD0);
        }
        v29 = (id)qword_1ED52ACE0;
        if (os_log_type_enabled(v29, OS_LOG_TYPE_DEBUG))
        {
          v157 = (_QWORD *)(*v653 + 128);
          if (*(char *)(*v653 + 151) < 0)
            v157 = (_QWORD *)*v157;
          *(_DWORD *)__lk = 136315138;
          *(_QWORD *)&__lk[4] = v157;
          _os_log_debug_impl(&dword_1C9870000, v29, OS_LOG_TYPE_DEBUG, "Error getting faceprint: %s.", __lk, 0xCu);
        }

        v30 = v660;
        if (*((_QWORD *)*v660 + 3) == *((_QWORD *)*v660 + 4))
          v31 = 0.1;
        else
          v31 = 0.5;
        v32 = *v653;
        v33 = v31 * (double)*(int *)(*(_QWORD *)(a1 + 8) + 24) * 0.001;
        *(_DWORD *)&buf[24] = 0;
        *(double *)buf = v33;
        sub_1C991D06C((CMTime *)__lk, v32, (uint64_t)buf);
        v34 = *v30;
        v35 = (*v30)[80];
        v36 = *(_OWORD *)&__lk[16];
        *((_OWORD *)v34 + 3) = *(_OWORD *)__lk;
        *((_OWORD *)v34 + 4) = v36;
        if (!v35)
          *((_BYTE *)v34 + 80) = 1;
        goto LABEL_39;
      }
      v42 = *(unint64_t ***)(a1 + 8);
      v656 = 0;
      v657 = 0;
      __p = 0;
      *(_QWORD *)__lk = 0;
      *(_QWORD *)&__lk[8] = 0;
      v43 = *v42;
      v44 = *v43;
      v45 = v43[1];
      if (*v43 == v45)
      {
        v100 = 0;
        v101 = 0;
        v46 = INFINITY;
        goto LABEL_112;
      }
      v46 = INFINITY;
LABEL_45:
      v47 = **(_QWORD **)v44;
      v48 = *(float ****)(v47 + 24);
      v49 = *(float ****)(v47 + 32);
      if (v48 == v49)
        goto LABEL_44;
      v50 = INFINITY;
      while (1)
      {
        v52 = *v48;
        v53 = *((unsigned int *)*v48 + 4);
        if ((_DWORD)v53 == *(_DWORD *)(v26 + 112))
          break;
        v51 = INFINITY;
LABEL_48:
        if (v51 < v50)
          v50 = v51;
        if (++v48 == v49)
        {
          if (v50 < v46)
          {
            v73 = *(unint64_t ***)v44;
            v72 = *(_QWORD *)(v44 + 8);
            if (v72)
            {
              v74 = (unint64_t *)(v72 + 8);
              do
                v75 = __ldxr(v74);
              while (__stxr(v75 + 1, v74));
            }
            v76 = *(std::__shared_weak_count **)&__lk[8];
            *(_QWORD *)__lk = v73;
            *(_QWORD *)&__lk[8] = v72;
            if (v76)
            {
              v77 = (unint64_t *)&v76->__shared_owners_;
              do
                v78 = __ldaxr(v77);
              while (__stlxr(v78 - 1, v77));
              if (!v78)
              {
                ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
                std::__shared_weak_count::__release_weak(v76);
              }
            }
            v46 = v50;
          }
          goto LABEL_44;
        }
      }
      if (!(_DWORD)v53)
      {
        v56 = 0.0;
        goto LABEL_63;
      }
      v54 = *v52;
      v55 = *(float **)(v26 + 96);
      v56 = **v52 * *v55;
      if ((_DWORD)v53 != 1)
      {
        v57 = v54 + 1;
        v58 = (v53 + 0x3FFFFFFFFFFFFFFELL) & 0x3FFFFFFFFFFFFFFFLL;
        if (v58 < 7)
          goto LABEL_59;
        v59 = v58 + 1;
        v60 = 4 * (v59 & 0x7FFFFFFFFFFFFFF8);
        v57 = (float *)((char *)v57 + v60);
        v61 = (float32x4_t *)(v55 + 5);
        v62 = (float32x4_t *)(v54 + 5);
        v63 = v59 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v64 = vmulq_f32(v62[-1], v61[-1]);
          v65 = vmulq_f32(*v62, *v61);
          v56 = (float)((float)((float)((float)((float)((float)((float)(v56 + v64.f32[0]) + v64.f32[1]) + v64.f32[2])
                                              + v64.f32[3])
                                      + v65.f32[0])
                              + v65.f32[1])
                      + v65.f32[2])
              + v65.f32[3];
          v61 += 2;
          v62 += 2;
          v63 -= 8;
        }
        while (v63);
        if (v59 != (v59 & 0x7FFFFFFFFFFFFFF8))
          break;
      }
LABEL_63:
      v71 = atomic_load((unsigned __int8 *)&qword_1ED52ACD8);
      if ((v71 & 1) == 0 && __cxa_guard_acquire(&qword_1ED52ACD8))
      {
        sub_1C98CFF14();
        __cxa_guard_release(&qword_1ED52ACD8);
      }
      v51 = (float)(1.0 - v56) * 0.5;
      if (v51 > *(float *)(qword_1ED52ACB8 + 304))
        goto LABEL_48;
      v79 = v656;
      if ((unint64_t)v656 < v657)
      {
        *v656 = *(unint64_t ***)v44;
        v80 = *(_QWORD *)(v44 + 8);
        v656[1] = (unint64_t **)v80;
        if (v80)
        {
          v81 = (unint64_t *)(v80 + 8);
          do
            v82 = __ldxr(v81);
          while (__stxr(v82 + 1, v81));
        }
        v83 = v656 + 2;
        goto LABEL_106;
      }
      v84 = __p;
      v85 = ((char *)v656 - (char *)__p) >> 4;
      v86 = v85 + 1;
      if ((unint64_t)(v85 + 1) >> 60)
        goto LABEL_939;
      v87 = v657 - (_QWORD)__p;
      if ((uint64_t)(v657 - (_QWORD)__p) >> 3 > v86)
        v86 = v87 >> 3;
      if ((unint64_t)v87 >= 0x7FFFFFFFFFFFFFF0)
        v88 = 0xFFFFFFFFFFFFFFFLL;
      else
        v88 = v86;
      if (v88 >> 60)
        sub_1C9899D30();
      v89 = (char *)operator new(16 * v88);
      v90 = &v89[16 * v85];
      v91 = *(_OWORD *)v44;
      *(_OWORD *)v90 = *(_OWORD *)v44;
      if (*((_QWORD *)&v91 + 1))
      {
        v92 = (unint64_t *)(*((_QWORD *)&v91 + 1) + 8);
        do
          v93 = __ldxr(v92);
        while (__stxr(v93 + 1, v92));
        v79 = v656;
      }
      v94 = &v89[16 * v88];
      v83 = (unint64_t ***)(v90 + 16);
      if (v79 == __p)
      {
        __p = (unint64_t ***)&v89[16 * v85];
        v657 = (unint64_t)v94;
      }
      else
      {
        do
        {
          v95 = *((_OWORD *)v79 - 1);
          v79 -= 2;
          *((_OWORD *)v90 - 1) = v95;
          v90 -= 16;
          *v79 = 0;
          v79[1] = 0;
        }
        while (v79 != __p);
        v96 = v656;
        __p = (unint64_t ***)v90;
        v657 = (unint64_t)v94;
        while (v96 != v84)
        {
          v97 = (std::__shared_weak_count *)*(v96 - 1);
          if (v97)
          {
            v98 = (unint64_t *)&v97->__shared_owners_;
            do
              v99 = __ldaxr(v98);
            while (__stlxr(v99 - 1, v98));
            if (!v99)
            {
              ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
              std::__shared_weak_count::__release_weak(v97);
            }
          }
          v96 -= 2;
        }
      }
      if (v84)
        operator delete(v84);
LABEL_106:
      v656 = v83;
LABEL_44:
      v44 += 16;
      if (v44 != v45)
        goto LABEL_45;
      v100 = *(_QWORD **)__lk;
      v101 = *(std::__shared_weak_count **)&__lk[8];
      if (*(_QWORD *)&__lk[8])
      {
        v102 = (unint64_t *)(*(_QWORD *)&__lk[8] + 8);
        do
          v103 = __ldxr(v102);
        while (__stxr(v103 + 1, v102));
      }
LABEL_112:
      v658 = v100;
      v659 = v101;
      v104 = 126 - 2 * __clz(((char *)v656 - (char *)__p) >> 4);
      if (v656 == __p)
        v105 = 0;
      else
        v105 = v104;
      sub_1C98A7024(__p, (unint64_t)v656, v105, 1);
      v106 = *(std::__shared_weak_count **)&__lk[8];
      if (*(_QWORD *)&__lk[8])
      {
        v107 = (unint64_t *)(*(_QWORD *)&__lk[8] + 8);
        do
          v108 = __ldaxr(v107);
        while (__stlxr(v108 - 1, v107));
        if (!v108)
        {
          ((void (*)(std::__shared_weak_count *))v106->__on_zero_shared)(v106);
          std::__shared_weak_count::__release_weak(v106);
        }
      }
      v109 = *a2;
      v110 = a2[1];
      while (2)
      {
        if (v109 != v110)
        {
          if (*v109 != *(uint64_t **)(*v653 + 32))
          {
            v111 = **v109;
            v112 = *(unint64_t ***)(v111 + 24);
            v113 = *(std::__shared_weak_count **)(v111 + 32);
            if (v113)
            {
              v114 = (unint64_t *)&v113->__shared_owners_;
              do
                v115 = __ldxr(v114);
              while (__stxr(v115 + 1, v114));
            }
            if (v112)
            {
              v116 = atomic_load((unsigned __int8 *)&qword_1ED52ACD0);
              if ((v116 & 1) == 0 && __cxa_guard_acquire(&qword_1ED52ACD0))
              {
                qword_1ED52ACE0 = (uint64_t)os_log_create("com.apple.AppleCVA", "FaceKit");
                __cxa_guard_release(&qword_1ED52ACD0);
              }
              v117 = (id)qword_1ED52ACE0;
              if (os_log_type_enabled(v117, OS_LOG_TYPE_DEBUG))
              {
                v132 = (uint64_t)(*v112 + 20);
                *(_DWORD *)__lk = 136315138;
                *(_QWORD *)&__lk[4] = v132;
                _os_log_debug_impl(&dword_1C9870000, v117, OS_LOG_TYPE_DEBUG, "Excluding user %s from matches, they are currently being tracked", __lk, 0xCu);
              }

              v44 = (unint64_t)v656;
              v118 = v656;
              if (__p != v656)
              {
                v118 = __p;
                while (*v118 != v112)
                {
                  v118 += 2;
                  if (v118 == v656)
                  {
                    v118 = v656;
                    break;
                  }
                }
              }
              if (v118 == v656 || (v119 = v118 + 2, v118 + 2 == v656))
              {
                v120 = v118;
                if (v118 != v656)
                  goto LABEL_152;
              }
              else
              {
                v120 = v118;
                do
                {
                  v121 = v119;
                  v122 = v118[2];
                  if (v122 != v112)
                  {
                    v123 = v118[3];
                    *v119 = 0;
                    v119[1] = 0;
                    v124 = (std::__shared_weak_count *)v120[1];
                    *v120 = v122;
                    v120[1] = v123;
                    if (v124)
                    {
                      v125 = (unint64_t *)&v124->__shared_owners_;
                      do
                        v126 = __ldaxr(v125);
                      while (__stlxr(v126 - 1, v125));
                      if (!v126)
                      {
                        ((void (*)(std::__shared_weak_count *))v124->__on_zero_shared)(v124);
                        std::__shared_weak_count::__release_weak(v124);
                      }
                    }
                    v120 += 2;
                  }
                  v119 = v121 + 2;
                  v118 = (unint64_t ***)v121;
                }
                while (v121 + 2 != v656);
                v44 = (unint64_t)v656;
                a3 = v645;
                if (v120 != v656)
                {
LABEL_152:
                  while ((unint64_t ***)v44 != v120)
                  {
                    v127 = *(std::__shared_weak_count **)(v44 - 8);
                    if (v127)
                    {
                      v128 = (unint64_t *)&v127->__shared_owners_;
                      do
                        v129 = __ldaxr(v128);
                      while (__stlxr(v129 - 1, v128));
                      if (!v129)
                      {
                        ((void (*)(std::__shared_weak_count *))v127->__on_zero_shared)(v127);
                        std::__shared_weak_count::__release_weak(v127);
                      }
                    }
                    v44 -= 16;
                  }
                  v656 = v120;
                }
              }
            }
            if (v113)
            {
              v130 = (unint64_t *)&v113->__shared_owners_;
              do
                v131 = __ldaxr(v130);
              while (__stlxr(v131 - 1, v130));
              if (!v131)
              {
                ((void (*)(std::__shared_weak_count *))v113->__on_zero_shared)(v113);
                std::__shared_weak_count::__release_weak(v113);
              }
            }
          }
          v109 += 2;
          continue;
        }
        break;
      }
      if ((*v660)[16])
      {
        v133 = v653;
        if (*((_QWORD *)*v660 + 3) == *((_QWORD *)*v660 + 4))
        {
          sub_1C98A6D68(*(void ****)(a1 + 8), (uint64_t *)&v660);
          v134 = atomic_load((unsigned __int8 *)&qword_1ED52ACD0);
          if ((v134 & 1) == 0 && __cxa_guard_acquire(&qword_1ED52ACD0))
          {
            qword_1ED52ACE0 = (uint64_t)os_log_create("com.apple.AppleCVA", "FaceKit");
            __cxa_guard_release(&qword_1ED52ACD0);
          }
          v135 = (id)qword_1ED52ACE0;
          if (os_log_type_enabled(v135, OS_LOG_TYPE_DEBUG))
          {
            v485 = *v660 + 160;
            v486 = (uint64_t)(*(_QWORD *)(**(_QWORD **)(a1 + 8) + 8) - ***(_QWORD ***)(a1 + 8)) >> 4;
            *(_DWORD *)__lk = 136315394;
            *(_QWORD *)&__lk[4] = v485;
            *(_WORD *)&__lk[12] = 2048;
            *(_QWORD *)&__lk[14] = v486;
            _os_log_debug_impl(&dword_1C9870000, v135, OS_LOG_TYPE_DEBUG, "Added tracked user %s with no faceprint to DB. New DB size %zu", __lk, 0x16u);
          }
          goto LABEL_201;
        }
      }
      else if (__p == v656)
      {
        sub_1C98A84C8(v660);
        sub_1C98A6D68(*(void ****)(a1 + 8), (uint64_t *)&v660);
        v155 = atomic_load((unsigned __int8 *)&qword_1ED52ACD0);
        if ((v155 & 1) == 0 && __cxa_guard_acquire(&qword_1ED52ACD0))
        {
          qword_1ED52ACE0 = (uint64_t)os_log_create("com.apple.AppleCVA", "FaceKit");
          __cxa_guard_release(&qword_1ED52ACD0);
        }
        v135 = (id)qword_1ED52ACE0;
        if (os_log_type_enabled(v135, OS_LOG_TYPE_DEFAULT))
        {
          if (v658)
            v156 = (const char *)(*v658 + 160);
          else
            v156 = "n/a";
          v158 = *v660 + 160;
          v159 = (uint64_t)(*(_QWORD *)(**(_QWORD **)(a1 + 8) + 8) - ***(_QWORD ***)(a1 + 8)) >> 4;
          *(_DWORD *)__lk = 136315906;
          *(_QWORD *)&__lk[4] = v158;
          *(_WORD *)&__lk[12] = 2048;
          *(_QWORD *)&__lk[14] = v159;
          *(_WORD *)&__lk[22] = 2080;
          *(_QWORD *)&__lk[24] = v156;
          LOWORD(v665[0]) = 2048;
          *(double *)((char *)v665 + 2) = v46;
          _os_log_impl(&dword_1C9870000, v135, OS_LOG_TYPE_DEFAULT, "Unknown user, assigned new UUID %s. New DB size %zu. Closest mismatch %s, d=%f", __lk, 0x2Au);
        }
LABEL_201:

        v133 = v653;
      }
      else
      {
        v136 = atomic_load((unsigned __int8 *)&qword_1ED52ACD0);
        if ((v136 & 1) == 0 && __cxa_guard_acquire(&qword_1ED52ACD0))
        {
          qword_1ED52ACE0 = (uint64_t)os_log_create("com.apple.AppleCVA", "FaceKit");
          __cxa_guard_release(&qword_1ED52ACD0);
        }
        v137 = (id)qword_1ED52ACE0;
        if (os_log_type_enabled(v137, OS_LOG_TYPE_DEFAULT))
        {
          v138 = (uint64_t)(**__p + 20);
          v139 = *v660 + 160;
          *(_DWORD *)__lk = 136315394;
          *(_QWORD *)&__lk[4] = v138;
          *(_WORD *)&__lk[12] = 2080;
          *(_QWORD *)&__lk[14] = v139;
          _os_log_impl(&dword_1C9870000, v137, OS_LOG_TYPE_DEFAULT, "Found match: recognized user %s, replacing user %s", __lk, 0x16u);
        }

        v140 = **(_QWORD **)(*v653 + 32);
        v142 = *__p;
        v141 = __p[1];
        if (v141)
        {
          v143 = (unint64_t *)(v141 + 1);
          do
            v144 = __ldxr(v143);
          while (__stxr(v144 + 1, v143));
        }
        v145 = *(std::__shared_weak_count **)(v140 + 32);
        *(_QWORD *)(v140 + 24) = v142;
        *(_QWORD *)(v140 + 32) = v141;
        if (v145)
        {
          v146 = (unint64_t *)&v145->__shared_owners_;
          do
            v147 = __ldaxr(v146);
          while (__stlxr(v147 - 1, v146));
          if (!v147)
          {
            ((void (*)(std::__shared_weak_count *))v145->__on_zero_shared)(v145);
            std::__shared_weak_count::__release_weak(v145);
          }
        }
        v149 = (const unsigned __int8 **)*__p;
        v148 = (std::__shared_weak_count *)__p[1];
        if (v148)
        {
          v150 = (unint64_t *)&v148->__shared_owners_;
          do
            v151 = __ldxr(v150);
          while (__stxr(v151 + 1, v150));
        }
        v152 = v661;
        v660 = v149;
        v661 = v148;
        v133 = v653;
        if (v152)
        {
          v153 = (unint64_t *)&v152->__shared_owners_;
          do
            v154 = __ldaxr(v153);
          while (__stlxr(v154 - 1, v153));
          if (!v154)
          {
            ((void (*)(std::__shared_weak_count *))v152->__on_zero_shared)(v152);
            std::__shared_weak_count::__release_weak(v152);
          }
        }
      }
      v160 = __p;
      v161 = v660;
      if ((unint64_t)((char *)v656 - (char *)__p) < 0x11)
        goto LABEL_559;
      memset(__lk, 0, sizeof(__lk));
      v665[0] = 1.0;
      v162 = (unint64_t *)*v660;
      if (!(*v660)[16])
        goto LABEL_943;
      v641 = *v660;
      if (__p == v656)
        goto LABEL_446;
      while (2)
      {
        v647 = v160;
        v163 = *v160;
        v164 = **v160;
        if (!*((_BYTE *)v164 + 16))
          goto LABEL_937;
        v165 = *v164 == *v162 && v164[1] == v162[1];
        if (!v165)
        {
          v166 = bswap64(*v162);
          v167 = bswap64(*v164);
          if (v166 == v167 && (v166 = bswap64(v162[1]), v167 = bswap64(v164[1]), v166 == v167))
            v168 = 0;
          else
            v168 = v166 < v167 ? -1 : 1;
          v169 = *(_QWORD *)(a1 + 8);
          v170 = v168 < 0;
          v171 = v168 < 0 ? v162 : v164;
          v172 = v170 ? v164 : v162;
          *(_OWORD *)buf = *(_OWORD *)v171;
          *(_OWORD *)&buf[16] = *(_OWORD *)v172;
          v175 = *(_QWORD **)(v169 + 40);
          v173 = (_QWORD *)(v169 + 40);
          v174 = v175;
          if (!v175)
            goto LABEL_268;
          v176 = v173;
          do
          {
            v182 = bswap64(*(_QWORD *)((char *)v174 + 25));
            v183 = bswap64(*(unint64_t *)buf);
            if (v182 == v183
              && (v182 = bswap64(*(_QWORD *)((char *)v174 + 33)),
                  v183 = bswap64(*(unint64_t *)&buf[8]),
                  v182 == v183))
            {
              v184 = 0;
            }
            else if (v182 < v183)
            {
              v184 = -1;
            }
            else
            {
              v184 = 1;
            }
            if (v184 < 0)
              v179 = -1;
            else
              v179 = 1;
            if (!v184)
            {
              v185 = bswap64(*(_QWORD *)((char *)v174 + 41));
              v186 = bswap64(*(unint64_t *)&buf[16]);
              if (v185 == v186
                && (v185 = bswap64(*(_QWORD *)((char *)v174 + 49)),
                    v186 = bswap64(*(unint64_t *)&buf[24]),
                    v185 == v186))
              {
                v177 = 0;
              }
              else
              {
                v177 = v185 < v186 ? -1 : 1;
              }
              v178 = v177 == 0;
              v179 = v177 < 0 ? -1 : 1;
              if (v178)
                v179 = 0;
            }
            v180 = v179 < 0;
            if (v179 >= 0)
              v181 = v174;
            else
              v181 = v174 + 1;
            if (!v180)
              v176 = v174;
            v174 = (_QWORD *)*v181;
          }
          while (*v181);
          if (v176 == v173)
            goto LABEL_268;
          v187 = bswap64(*(unint64_t *)buf);
          v188 = bswap64(*(_QWORD *)((char *)v176 + 25));
          if (v187 != v188
            || (v187 = bswap64(*(unint64_t *)&buf[8]),
                v188 = bswap64(*(_QWORD *)((char *)v176 + 33)),
                v187 != v188))
          {
            if (v187 < v188)
              v189 = -1;
            else
              v189 = 1;
            goto LABEL_267;
          }
          v190 = bswap64(*(unint64_t *)&buf[16]);
          v191 = bswap64(*(_QWORD *)((char *)v176 + 41));
          if (v190 != v191
            || (v190 = bswap64(*(unint64_t *)&buf[24]),
                v191 = bswap64(*(_QWORD *)((char *)v176 + 49)),
                v190 != v191))
          {
            v189 = v190 < v191 ? -1 : 1;
LABEL_267:
            if (v189 < 0)
            {
LABEL_268:
              v642 = v660;
              v192 = *v660;
              v194 = (char *)*((_QWORD *)*v660 + 3);
              v193 = (char *)*((_QWORD *)*v660 + 4);
              v195 = (char *)(v193 - v194);
              v196 = (v193 - v194) >> 3;
              v198 = (uint64_t *)v164[3];
              v197 = v164[4];
              v44 = v196 + ((uint64_t)(v197 - (_QWORD)v198) >> 3);
              if (v44 <= (uint64_t)(*((_QWORD *)*v660 + 5) - (_QWORD)v194) >> 3)
              {
                v204 = v164;
                if (v198 == (uint64_t *)v197)
                  goto LABEL_314;
              }
              else
              {
                if (v44 >> 61)
LABEL_934:
                  abort();
                v199 = (char *)operator new(8 * v44);
                v200 = &v199[8 * v196];
                v201 = &v199[8 * v44];
                if (v193 == v194)
                {
                  *((_QWORD *)v192 + 3) = v200;
                  *((_QWORD *)v192 + 4) = v200;
                  *((_QWORD *)v192 + 5) = v201;
                }
                else
                {
                  v202 = v193 - v194 - 8;
                  if (v202 < 0x78)
                  {
                    v203 = &v199[8 * v196];
                    goto LABEL_366;
                  }
                  v259 = v202 >> 3;
                  v260 = (unint64_t)&v193[-8 * (v202 >> 3) - 8];
                  v261 = (unint64_t)&v195[(_QWORD)v199 - (v202 & 0xFFFFFFFFFFFFFFF8) - 8];
                  v262 = v260 >= (unint64_t)v200 || v261 >= (unint64_t)v193;
                  v203 = &v199[8 * v196];
                  if (!v262)
                    goto LABEL_948;
                  v263 = v259 + 1;
                  v264 = 8 * (v263 & 0x3FFFFFFFFFFFFFFCLL);
                  v265 = &v193[-v264];
                  v203 = &v200[-v264];
                  v266 = &v195[(_QWORD)v199 - 16];
                  v267 = v193 - 16;
                  v268 = v263 & 0x3FFFFFFFFFFFFFFCLL;
                  do
                  {
                    v270 = *((_OWORD *)v267 - 1);
                    v269 = *(_OWORD *)v267;
                    *((_OWORD *)v267 - 1) = 0uLL;
                    *(_OWORD *)v267 = 0uLL;
                    *((_OWORD *)v266 - 1) = v270;
                    *(_OWORD *)v266 = v269;
                    v266 -= 32;
                    v267 -= 32;
                    v268 -= 4;
                  }
                  while (v268);
                  v193 = v265;
                  if (v263 != (v263 & 0x3FFFFFFFFFFFFFFCLL))
                  {
LABEL_948:
                    do
                    {
LABEL_366:
                      v271 = *((_QWORD *)v193 - 1);
                      v193 -= 8;
                      *(_QWORD *)v193 = 0;
                      *((_QWORD *)v203 - 1) = v271;
                      v203 -= 8;
                    }
                    while (v193 != v194);
                  }
                  v193 = (char *)*((_QWORD *)v192 + 3);
                  v272 = (char *)*((_QWORD *)v192 + 4);
                  *((_QWORD *)v192 + 3) = v203;
                  *((_QWORD *)v192 + 4) = v200;
                  *((_QWORD *)v192 + 5) = v201;
                  while (v272 != v193)
                  {
                    v274 = (void **)*((_QWORD *)v272 - 1);
                    v272 -= 8;
                    v273 = v274;
                    *(_QWORD *)v272 = 0;
                    if (v274)
                    {
                      free(v273[3]);
                      free(*v273);
                      MEMORY[0x1CAA44AFC](v273, 0x1080C407C7A2332);
                    }
                  }
                }
                if (v193)
                  operator delete(v193);
                v204 = *v163;
                v198 = (uint64_t *)(*v163)[3];
                v197 = (*v163)[4];
                v192 = *v642;
                if (v198 == (uint64_t *)v197)
                {
LABEL_314:
                  v234 = v204 + 4;
                  a3 = v645;
LABEL_315:
                  v162 = (unint64_t *)v641;
                  goto LABEL_316;
                }
              }
              v205 = (_QWORD *)*((_QWORD *)v192 + 4);
              do
              {
                v207 = *((_QWORD *)v192 + 5);
                if ((unint64_t)v205 < v207)
                {
                  v206 = *v198;
                  *v198 = 0;
                  *v205++ = v206;
                  *((_QWORD *)v192 + 4) = v205;
                }
                else
                {
                  v208 = *((_QWORD *)v192 + 3);
                  v209 = (char *)v205 - v208;
                  v210 = ((uint64_t)v205 - v208) >> 3;
                  if ((unint64_t)(v210 + 1) >> 61)
                    goto LABEL_934;
                  v211 = v207 - v208;
                  v212 = v211 >> 2;
                  if (v211 >> 2 <= (unint64_t)(v210 + 1))
                    v212 = v210 + 1;
                  if ((unint64_t)v211 >= 0x7FFFFFFFFFFFFFF8)
                    v213 = 0x1FFFFFFFFFFFFFFFLL;
                  else
                    v213 = v212;
                  if (v213)
                  {
                    if (v213 >> 61)
                      sub_1C9899D30();
                    v214 = (char *)operator new(8 * v213);
                  }
                  else
                  {
                    v214 = 0;
                  }
                  v215 = &v214[8 * v210];
                  v216 = &v214[8 * v213];
                  v217 = *v198;
                  *v198 = 0;
                  *(_QWORD *)v215 = v217;
                  v205 = v215 + 8;
                  v218 = (char *)*((_QWORD *)v192 + 3);
                  v219 = (char *)*((_QWORD *)v192 + 4);
                  v220 = (char *)(v219 - v218);
                  if (v219 == v218)
                  {
                    *((_QWORD *)v192 + 3) = v215;
                    *((_QWORD *)v192 + 4) = v205;
                    *((_QWORD *)v192 + 5) = v216;
                  }
                  else
                  {
                    v221 = v220 - 8;
                    if ((unint64_t)(v220 - 8) < 0x78
                      || &v219[-8 * ((unint64_t)v221 >> 3) - 8] < v215
                      && &v209[(_QWORD)v214 - ((unint64_t)v221 & 0xFFFFFFFFFFFFFFF8) - 8] < v219)
                    {
                      goto LABEL_949;
                    }
                    v222 = ((unint64_t)v221 >> 3) + 1;
                    v223 = 8 * (v222 & 0x3FFFFFFFFFFFFFFCLL);
                    v224 = &v219[-v223];
                    v215 -= v223;
                    v225 = &v209[(_QWORD)v214 - 16];
                    v226 = v219 - 16;
                    v227 = v222 & 0x3FFFFFFFFFFFFFFCLL;
                    do
                    {
                      v229 = *((_OWORD *)v226 - 1);
                      v228 = *(_OWORD *)v226;
                      *((_OWORD *)v226 - 1) = 0uLL;
                      *(_OWORD *)v226 = 0uLL;
                      *((_OWORD *)v225 - 1) = v229;
                      *(_OWORD *)v225 = v228;
                      v225 -= 32;
                      v226 -= 32;
                      v227 -= 4;
                    }
                    while (v227);
                    v219 = v224;
                    if (v222 != (v222 & 0x3FFFFFFFFFFFFFFCLL))
                    {
LABEL_949:
                      do
                      {
                        v230 = *((_QWORD *)v219 - 1);
                        v219 -= 8;
                        *(_QWORD *)v219 = 0;
                        *((_QWORD *)v215 - 1) = v230;
                        v215 -= 8;
                      }
                      while (v219 != v218);
                    }
                    v219 = (char *)*((_QWORD *)v192 + 3);
                    v231 = (char *)*((_QWORD *)v192 + 4);
                    *((_QWORD *)v192 + 3) = v215;
                    *((_QWORD *)v192 + 4) = v205;
                    *((_QWORD *)v192 + 5) = v216;
                    while (v231 != v219)
                    {
                      v233 = (void **)*((_QWORD *)v231 - 1);
                      v231 -= 8;
                      v232 = v233;
                      *(_QWORD *)v231 = 0;
                      if (v233)
                      {
                        free(v232[3]);
                        free(*v232);
                        MEMORY[0x1CAA44AFC](v232, 0x1080C407C7A2332);
                      }
                    }
                  }
                  if (v219)
                    operator delete(v219);
                }
                *((_QWORD *)v192 + 4) = v205;
                ++v198;
              }
              while (v198 != (uint64_t *)v197);
              v234 = *v163 + 4;
              v197 = *v234;
              v235 = (_QWORD *)(*v163)[3];
              if ((_QWORD *)*v234 == v235)
              {
                a3 = v645;
                goto LABEL_315;
              }
              a3 = v645;
              v162 = (unint64_t *)v641;
              do
              {
                v237 = *(void ***)(v197 - 8);
                v197 -= 8;
                v236 = v237;
                *(_QWORD *)v197 = 0;
                if (v237)
                {
                  free(v236[3]);
                  free(*v236);
                  MEMORY[0x1CAA44AFC](v236, 0x1080C407C7A2332);
                }
              }
              while ((_QWORD *)v197 != v235);
              v197 = (unint64_t)v235;
LABEL_316:
              *v234 = v197;
              v238 = atomic_load((unsigned __int8 *)&qword_1ED52ACD0);
              if ((v238 & 1) == 0 && __cxa_guard_acquire(&qword_1ED52ACD0))
              {
                qword_1ED52ACE0 = (uint64_t)os_log_create("com.apple.AppleCVA", "FaceKit");
                __cxa_guard_release(&qword_1ED52ACD0);
              }
              v239 = (id)qword_1ED52ACE0;
              if (os_log_type_enabled(v239, OS_LOG_TYPE_DEFAULT))
              {
                v240 = (uint64_t)(*v163 + 20);
                v241 = (uint64_t)(*v642 + 160);
                v242 = (uint64_t)(*((_QWORD *)*v642 + 4) - *((_QWORD *)*v642 + 3)) >> 3;
                *(_DWORD *)buf = 136315650;
                *(_QWORD *)&buf[4] = v240;
                *(_WORD *)&buf[12] = 2080;
                *(_QWORD *)&buf[14] = v241;
                *(_WORD *)&buf[22] = 2048;
                *(_QWORD *)&buf[24] = v242;
                _os_log_impl(&dword_1C9870000, v239, OS_LOG_TYPE_DEFAULT, "Transferred cluster information from user %s to %s. New cluster count: %lu.", buf, 0x20u);
              }

              v243 = *(_QWORD *)&__lk[8];
              v244 = v164[1] ^ *v164;
              if (*(_QWORD *)&__lk[8])
              {
                v245 = (uint8x8_t)vcnt_s8(*(int8x8_t *)&__lk[8]);
                v245.i16[0] = vaddlv_u8(v245);
                if (v245.u32[0] > 1uLL)
                {
                  v197 = v164[1] ^ *v164;
                  if (v244 >= *(_QWORD *)&__lk[8])
                    v197 = v244 % *(_QWORD *)&__lk[8];
                }
                else
                {
                  v197 = (*(_QWORD *)&__lk[8] - 1) & v244;
                }
                v246 = *(_QWORD **)(*(_QWORD *)__lk + 8 * v197);
                if (v246)
                {
                  v247 = (_QWORD *)*v246;
                  if (v247)
                  {
                    if (v245.u32[0] < 2uLL)
                    {
                      while (1)
                      {
                        v251 = v247[1];
                        if (v251 == v244)
                        {
                          if (v247[2] == *v164 && v247[3] == v164[1])
                            goto LABEL_209;
                        }
                        else if ((v251 & (*(_QWORD *)&__lk[8] - 1)) != v197)
                        {
                          goto LABEL_345;
                        }
                        v247 = (_QWORD *)*v247;
                        if (!v247)
                          goto LABEL_345;
                      }
                    }
                    do
                    {
                      v249 = v247[1];
                      if (v249 == v244)
                      {
                        if (v247[2] == *v164 && v247[3] == v164[1])
                          goto LABEL_209;
                      }
                      else
                      {
                        if (v249 >= *(_QWORD *)&__lk[8])
                          v249 %= *(_QWORD *)&__lk[8];
                        if (v249 != v197)
                          break;
                      }
                      v247 = (_QWORD *)*v247;
                    }
                    while (v247);
                  }
                }
              }
LABEL_345:
              v252 = operator new(0x20uLL);
              *v252 = 0;
              v252[1] = v244;
              *((_OWORD *)v252 + 1) = *(_OWORD *)v164;
              v253 = (float)(unint64_t)(*(_QWORD *)&__lk[24] + 1);
              if (v243 && (float)(v665[0] * (float)v243) >= v253)
              {
                a3 = v645;
                goto LABEL_415;
              }
              v254 = (v243 & (v243 - 1)) != 0;
              if (v243 < 3)
                v254 = 1;
              v255 = v254 | (2 * v243);
              v256 = vcvtps_u32_f32(v253 / v665[0]);
              if (v255 <= v256)
                prime = v256;
              else
                prime = v255;
              if (prime == 1)
              {
                prime = 2;
                goto LABEL_356;
              }
              if ((prime & (prime - 1)) != 0)
              {
                a3 = v645;
                prime = std::__next_prime(prime);
                v243 = *(_QWORD *)&__lk[8];
                v258 = prime >= *(_QWORD *)&__lk[8];
                if (prime > *(_QWORD *)&__lk[8])
                  goto LABEL_383;
              }
              else
              {
LABEL_356:
                a3 = v645;
                v258 = prime >= v243;
                if (prime > v243)
                {
LABEL_383:
                  if (prime >> 61)
                    sub_1C9899D30();
                  v278 = operator new(8 * prime);
                  v279 = *(void **)__lk;
                  *(_QWORD *)__lk = v278;
                  if (v279)
                    operator delete(v279);
                  v280 = 0;
                  *(_QWORD *)&__lk[8] = prime;
                  do
                    *(_QWORD *)(*(_QWORD *)__lk + 8 * v280++) = 0;
                  while (prime != v280);
                  v281 = *(_QWORD ***)&__lk[16];
                  if (!*(_QWORD *)&__lk[16])
                    goto LABEL_401;
                  v282 = *(_QWORD *)(*(_QWORD *)&__lk[16] + 8);
                  v283 = prime - 1;
                  if ((prime & (prime - 1)) == 0)
                  {
                    v284 = v282 & v283;
                    *(_QWORD *)(*(_QWORD *)__lk + 8 * v284) = &__lk[16];
                    for (i = *v281; *v281; i = *v281)
                    {
                      v286 = i[1] & v283;
                      if (v286 == v284)
                      {
                        v281 = (_QWORD **)i;
                      }
                      else if (*(_QWORD *)(*(_QWORD *)__lk + 8 * v286))
                      {
                        *v281 = (_QWORD *)*i;
                        v287 = 8 * v286;
                        *i = **(_QWORD **)(*(_QWORD *)__lk + v287);
                        **(_QWORD **)(*(_QWORD *)__lk + v287) = i;
                      }
                      else
                      {
                        *(_QWORD *)(*(_QWORD *)__lk + 8 * v286) = v281;
                        v281 = (_QWORD **)i;
                        v284 = v286;
                      }
                    }
                    goto LABEL_401;
                  }
                  if (v282 >= prime)
                    v282 %= prime;
                  *(_QWORD *)(*(_QWORD *)__lk + 8 * v282) = &__lk[16];
                  v288 = *v281;
                  if (!*v281)
                  {
LABEL_401:
                    v243 = prime;
                    goto LABEL_402;
                  }
                  while (2)
                  {
                    v290 = v288[1];
                    if (v290 >= prime)
                      v290 %= prime;
                    if (v290 != v282)
                    {
                      if (!*(_QWORD *)(*(_QWORD *)__lk + 8 * v290))
                      {
                        *(_QWORD *)(*(_QWORD *)__lk + 8 * v290) = v281;
LABEL_406:
                        v281 = (_QWORD **)v288;
                        v288 = (_QWORD *)*v288;
                        v282 = v290;
                        if (!v288)
                          goto LABEL_401;
                        continue;
                      }
                      *v281 = (_QWORD *)*v288;
                      v289 = 8 * v290;
                      *v288 = **(_QWORD **)(*(_QWORD *)__lk + v289);
                      **(_QWORD **)(*(_QWORD *)__lk + v289) = v288;
                      v288 = v281;
                    }
                    break;
                  }
                  v290 = v282;
                  goto LABEL_406;
                }
              }
              if (!v258)
              {
                v275 = vcvtps_u32_f32((float)*(unint64_t *)&__lk[24] / v665[0]);
                if (v243 < 3
                  || (v276 = (uint8x8_t)vcnt_s8((int8x8_t)v243), v276.i16[0] = vaddlv_u8(v276), v276.u32[0] > 1uLL))
                {
                  v275 = std::__next_prime(v275);
                }
                else
                {
                  v277 = 1 << -(char)__clz(v275 - 1);
                  if (v275 >= 2)
                    v275 = v277;
                }
                if (prime <= v275)
                  prime = v275;
                if (prime >= v243)
                {
                  v243 = *(_QWORD *)&__lk[8];
                }
                else
                {
                  if (prime)
                    goto LABEL_383;
                  v294 = *(void **)__lk;
                  *(_QWORD *)__lk = 0;
                  if (v294)
                    operator delete(v294);
                  v243 = 0;
                  *(_QWORD *)&__lk[8] = 0;
                }
              }
LABEL_402:
              if ((v243 & (v243 - 1)) != 0)
              {
                if (v244 >= v243)
                  v197 = v244 % v243;
                else
                  v197 = v244;
              }
              else
              {
                v197 = (v243 - 1) & v244;
              }
LABEL_415:
              v291 = *(_QWORD *)__lk;
              v292 = *(_QWORD **)(*(_QWORD *)__lk + 8 * v197);
              if (v292)
              {
                *v252 = *v292;
                goto LABEL_207;
              }
              *v252 = *(_QWORD *)&__lk[16];
              *(_QWORD *)&__lk[16] = v252;
              *(_QWORD *)(v291 + 8 * v197) = &__lk[16];
              if (*v252)
              {
                v293 = *(_QWORD *)(*v252 + 8);
                if ((v243 & (v243 - 1)) != 0)
                {
                  if (v293 >= v243)
                    v293 %= v243;
                }
                else
                {
                  v293 &= v243 - 1;
                }
                v292 = (_QWORD *)(*(_QWORD *)__lk + 8 * v293);
LABEL_207:
                *v292 = v252;
              }
              ++*(_QWORD *)&__lk[24];
            }
          }
        }
LABEL_209:
        v160 = v647 + 2;
        if (v647 + 2 != v656)
          continue;
        break;
      }
      if (*(_QWORD *)&__lk[24])
      {
        v295 = *(uint64_t *****)(a1 + 8);
        v296 = *v295;
        v297 = **v295;
        v44 = (unint64_t)(*v295)[1];
        if (v297 != (uint64_t **)v44)
        {
          v298 = *(_QWORD *)__lk;
          v299 = *(_QWORD *)&__lk[8];
          while (1)
          {
            v300 = **v297;
            if (*(_BYTE *)(v300 + 16))
            {
              if (sub_1C98A83E4(v298, v299, (_QWORD *)v300))
                break;
            }
            v297 += 2;
            if (v297 == (uint64_t **)v44)
              goto LABEL_460;
          }
          if (v297 != (uint64_t **)v44)
          {
            v301 = v297 + 2;
            if (v297 + 2 != (uint64_t **)v44)
            {
              do
              {
                v302 = **v301;
                if (!*(_BYTE *)(v302 + 16)
                  || !sub_1C98A83E4(*(uint64_t *)__lk, *(unint64_t *)&__lk[8], (_QWORD *)v302))
                {
                  v303 = *(_OWORD *)v301;
                  *v301 = 0;
                  v301[1] = 0;
                  v304 = (std::__shared_weak_count *)v297[1];
                  *(_OWORD *)v297 = v303;
                  if (v304)
                  {
                    v305 = (unint64_t *)&v304->__shared_owners_;
                    do
                      v306 = __ldaxr(v305);
                    while (__stlxr(v306 - 1, v305));
                    if (!v306)
                    {
                      ((void (*)(std::__shared_weak_count *))v304->__on_zero_shared)(v304);
                      std::__shared_weak_count::__release_weak(v304);
                    }
                  }
                  v297 += 2;
                }
                v301 += 2;
              }
              while (v301 != (uint64_t **)v44);
              v296 = *v295;
              v44 = (unint64_t)(*v295)[1];
            }
          }
          if (v297 != (uint64_t **)v44)
          {
            while ((uint64_t **)v44 != v297)
            {
              v309 = *(std::__shared_weak_count **)(v44 - 8);
              if (v309)
              {
                v310 = (unint64_t *)&v309->__shared_owners_;
                do
                  v311 = __ldaxr(v310);
                while (__stlxr(v311 - 1, v310));
                if (!v311)
                {
                  ((void (*)(std::__shared_weak_count *))v309->__on_zero_shared)(v309);
                  std::__shared_weak_count::__release_weak(v309);
                }
              }
              v44 -= 16;
            }
            v296[1] = v297;
          }
        }
LABEL_460:
        v312 = atomic_load((unsigned __int8 *)&qword_1ED52ACD0);
        if ((v312 & 1) == 0 && __cxa_guard_acquire(&qword_1ED52ACD0))
        {
          qword_1ED52ACE0 = (uint64_t)os_log_create("com.apple.AppleCVA", "FaceKit");
          __cxa_guard_release(&qword_1ED52ACD0);
        }
        v308 = (id)qword_1ED52ACE0;
        if (os_log_type_enabled(v308, OS_LOG_TYPE_DEBUG))
        {
          v489 = ((char *)(*v295)[1] - (char *)**v295) >> 4;
          *(_DWORD *)buf = 134217984;
          *(_QWORD *)&buf[4] = v489;
          _os_log_debug_impl(&dword_1C9870000, v308, OS_LOG_TYPE_DEBUG, "Remaining number of user identities in db: %lu", buf, 0xCu);
        }
      }
      else
      {
LABEL_446:
        v307 = atomic_load((unsigned __int8 *)&qword_1ED52ACD0);
        if ((v307 & 1) == 0 && __cxa_guard_acquire(&qword_1ED52ACD0))
        {
          qword_1ED52ACE0 = (uint64_t)os_log_create("com.apple.AppleCVA", "FaceKit");
          __cxa_guard_release(&qword_1ED52ACD0);
        }
        v308 = (id)qword_1ED52ACE0;
        if (os_log_type_enabled(v308, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_1C9870000, v308, OS_LOG_TYPE_INFO, "No user identities to remove", buf, 2u);
        }
      }

      v313 = *(_QWORD *)&__lk[24];
      if (*(_QWORD *)&__lk[24])
      {
        v314 = v162[1] ^ *v162;
        v315 = a3[1];
        if (v315)
        {
          v316 = (uint8x8_t)vcnt_s8((int8x8_t)v315);
          v316.i16[0] = vaddlv_u8(v316);
          if (v316.u32[0] > 1uLL)
          {
            v44 = v162[1] ^ *v162;
            if (v314 >= v315)
              v44 = v314 % v315;
          }
          else
          {
            v44 = (v315 - 1) & v314;
          }
          v317 = *(_QWORD **)(*a3 + 8 * v44);
          if (v317)
          {
            v318 = (_QWORD *)*v317;
            if (v318)
            {
              if (v316.u32[0] < 2uLL)
              {
                while (1)
                {
                  v322 = v318[1];
                  if (v322 == v314)
                  {
                    if (v318[2] == *v162 && v318[3] == v162[1])
                      goto LABEL_554;
                  }
                  else if ((v322 & (v315 - 1)) != v44)
                  {
                    goto LABEL_490;
                  }
                  v318 = (_QWORD *)*v318;
                  if (!v318)
                    goto LABEL_490;
                }
              }
              do
              {
                v320 = v318[1];
                if (v320 == v314)
                {
                  if (v318[2] == *v162 && v318[3] == v162[1])
                    goto LABEL_554;
                }
                else
                {
                  if (v320 >= v315)
                    v320 %= v315;
                  if (v320 != v44)
                    break;
                }
                v318 = (_QWORD *)*v318;
              }
              while (v318);
            }
          }
        }
LABEL_490:
        v323 = operator new(0x48uLL);
        v324 = v323;
        *(_QWORD *)buf = v323;
        *(_QWORD *)&buf[8] = v639;
        *v323 = 0;
        v323[1] = v314;
        *((_OWORD *)v323 + 1) = *(_OWORD *)v162;
        v325 = *(_QWORD *)__lk;
        v326 = *(_QWORD *)&__lk[8];
        v323[4] = *(_QWORD *)__lk;
        v323[5] = v326;
        *(_QWORD *)__lk = 0;
        *(_QWORD *)&__lk[8] = 0;
        v327 = *(_QWORD *)&__lk[16];
        v323[6] = *(_QWORD *)&__lk[16];
        v323[7] = v313;
        *((float *)v323 + 16) = v665[0];
        v328 = *(_QWORD *)(v327 + 8);
        if ((v326 & (v326 - 1)) != 0)
        {
          if (v328 >= v326)
            v328 %= v326;
        }
        else
        {
          v328 &= v326 - 1;
        }
        *(_QWORD *)(v325 + 8 * v328) = v323 + 6;
        *(_OWORD *)&__lk[16] = 0uLL;
        buf[16] = 1;
        v329 = (float)(unint64_t)(a3[3] + 1);
        v330 = *((float *)a3 + 8);
        if (!v315 || (float)(v330 * (float)v315) < v329)
        {
          v331 = (v315 & (v315 - 1)) != 0;
          if (v315 < 3)
            v331 = 1;
          v332 = v331 | (2 * v315);
          v333 = vcvtps_u32_f32(v329 / v330);
          if (v332 <= v333)
            v334 = v333;
          else
            v334 = v332;
          if (v334 == 1)
          {
            v334 = 2;
          }
          else if ((v334 & (v334 - 1)) != 0)
          {
            v334 = std::__next_prime(v334);
            v315 = a3[1];
          }
          if (v334 > v315)
          {
LABEL_506:
            if (v334 >> 61)
              sub_1C9899D30();
            v335 = operator new(8 * v334);
            v336 = (void *)*a3;
            *a3 = (uint64_t)v335;
            if (v336)
              operator delete(v336);
            v337 = 0;
            a3[1] = v334;
            do
              *(_QWORD *)(*a3 + 8 * v337++) = 0;
            while (v334 != v337);
            v338 = (_QWORD *)*v639;
            if (!*v639)
              goto LABEL_530;
            v339 = v338[1];
            v340 = v334 - 1;
            if ((v334 & (v334 - 1)) == 0)
            {
              v341 = v339 & v340;
              *(_QWORD *)(*a3 + 8 * v341) = v639;
              for (j = (_QWORD *)*v338; *v338; j = (_QWORD *)*v338)
              {
                v343 = j[1] & v340;
                if (v343 == v341)
                {
                  v338 = j;
                }
                else if (*(_QWORD *)(*a3 + 8 * v343))
                {
                  *v338 = *j;
                  v344 = 8 * v343;
                  *j = **(_QWORD **)(*a3 + v344);
                  **(_QWORD **)(*a3 + v344) = j;
                }
                else
                {
                  *(_QWORD *)(*a3 + 8 * v343) = v338;
                  v338 = j;
                  v341 = v343;
                }
              }
              goto LABEL_530;
            }
            if (v339 >= v334)
              v339 %= v334;
            *(_QWORD *)(*a3 + 8 * v339) = v639;
            v348 = (_QWORD *)*v338;
            if (!*v338)
            {
LABEL_530:
              v315 = v334;
              goto LABEL_531;
            }
            while (2)
            {
              v350 = v348[1];
              if (v350 >= v334)
                v350 %= v334;
              if (v350 != v339)
              {
                if (!*(_QWORD *)(*a3 + 8 * v350))
                {
                  *(_QWORD *)(*a3 + 8 * v350) = v338;
LABEL_535:
                  v338 = v348;
                  v348 = (_QWORD *)*v348;
                  v339 = v350;
                  if (!v348)
                    goto LABEL_530;
                  continue;
                }
                *v338 = *v348;
                v349 = 8 * v350;
                *v348 = **(_QWORD **)(*a3 + v349);
                **(_QWORD **)(*a3 + v349) = v348;
                v348 = v338;
              }
              break;
            }
            v350 = v339;
            goto LABEL_535;
          }
          if (v334 < v315)
          {
            v345 = vcvtps_u32_f32((float)(unint64_t)a3[3] / *((float *)a3 + 8));
            if (v315 < 3
              || (v346 = (uint8x8_t)vcnt_s8((int8x8_t)v315), v346.i16[0] = vaddlv_u8(v346), v346.u32[0] > 1uLL))
            {
              v345 = std::__next_prime(v345);
            }
            else
            {
              v347 = 1 << -(char)__clz(v345 - 1);
              if (v345 >= 2)
                v345 = v347;
            }
            if (v334 <= v345)
              v334 = v345;
            if (v334 >= v315)
            {
              v315 = a3[1];
            }
            else
            {
              if (v334)
                goto LABEL_506;
              v455 = (void *)*a3;
              *a3 = 0;
              if (v455)
                operator delete(v455);
              v315 = 0;
              a3[1] = 0;
            }
          }
LABEL_531:
          if ((v315 & (v315 - 1)) != 0)
          {
            if (v314 >= v315)
              v44 = v314 % v315;
            else
              v44 = v314;
          }
          else
          {
            v44 = (v315 - 1) & v314;
          }
        }
        v351 = *a3;
        v352 = *(_QWORD **)(*a3 + 8 * v44);
        if (v352)
        {
          *v324 = *v352;
          goto LABEL_552;
        }
        *v324 = *v639;
        *v639 = v324;
        *(_QWORD *)(v351 + 8 * v44) = v639;
        if (*v324)
        {
          v353 = *(_QWORD *)(*v324 + 8);
          if ((v315 & (v315 - 1)) != 0)
          {
            if (v353 >= v315)
              v353 %= v315;
          }
          else
          {
            v353 &= v315 - 1;
          }
          v352 = (_QWORD *)(*a3 + 8 * v353);
LABEL_552:
          *v352 = v324;
        }
        ++a3[3];
      }
LABEL_554:
      v354 = *(_QWORD **)&__lk[16];
      if (*(_QWORD *)&__lk[16])
      {
        do
        {
          v355 = (_QWORD *)*v354;
          operator delete(v354);
          v354 = v355;
        }
        while (v355);
      }
      v356 = *(void **)__lk;
      *(_QWORD *)__lk = 0;
      if (v356)
        operator delete(v356);
      v161 = v660;
      v133 = v653;
LABEL_559:
      v357 = *v133;
      v358 = (double)*(int *)(*(_QWORD *)(a1 + 8) + 24) * 0.001;
      *(_DWORD *)&buf[24] = 0;
      *(double *)buf = v358;
      sub_1C991D06C((CMTime *)__lk, v357, (uint64_t)buf);
      v359 = *v161;
      v360 = (*v161)[80];
      v361 = *(_OWORD *)&__lk[16];
      *((_OWORD *)v359 + 3) = *(_OWORD *)__lk;
      *((_OWORD *)v359 + 4) = v361;
      if (!v360)
        *((_BYTE *)v359 + 80) = 1;
      v362 = *v133;
      v363 = *(_DWORD *)(*v133 + 24);
      if (!v363)
        goto LABEL_568;
      if (v363 != 1)
      {
        sub_1C98CFB60();
LABEL_943:
        _os_crash();
        __break(1u);
      }
      if ((*(_BYTE *)(v362 + 12) & 1) == 0)
      {
        v364 = atomic_load((unsigned __int8 *)&qword_1ED52ACD0);
        if ((v364 & 1) == 0 && __cxa_guard_acquire(&qword_1ED52ACD0))
        {
          qword_1ED52ACE0 = (uint64_t)os_log_create("com.apple.AppleCVA", "FaceKit");
          __cxa_guard_release(&qword_1ED52ACD0);
        }
        v365 = (id)qword_1ED52ACE0;
        if (os_log_type_enabled(v365, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)__lk = 0;
          _os_log_error_impl(&dword_1C9870000, v365, OS_LOG_TYPE_ERROR, "Invalid timestamp for point", __lk, 2u);
        }
        goto LABEL_567;
      }
LABEL_568:
      v366 = (const void **)(v362 + 96);
      v367 = *((_QWORD *)*v161 + 3);
      v368 = *((_QWORD *)*v161 + 4);
      if (v367 == v368)
      {
        v377 = atomic_load((unsigned __int8 *)&qword_1ED52ACD0);
        if ((v377 & 1) == 0 && __cxa_guard_acquire(&qword_1ED52ACD0))
        {
          qword_1ED52ACE0 = (uint64_t)os_log_create("com.apple.AppleCVA", "FaceKit");
          __cxa_guard_release(&qword_1ED52ACD0);
        }
        v378 = (id)qword_1ED52ACE0;
        if (os_log_type_enabled(v378, OS_LOG_TYPE_DEBUG))
        {
          v484 = (uint64_t)(*v161 + 160);
          *(_DWORD *)__lk = 136315138;
          *(_QWORD *)&__lk[4] = v484;
          _os_log_debug_impl(&dword_1C9870000, v378, OS_LOG_TYPE_DEBUG, "%s: No cluster representation. Adding first cluster.", __lk, 0xCu);
        }

        v379 = *v161;
        sub_1C98FE1E8((uint64_t *)__lk, v362 + 96);
        v380 = (_QWORD *)*((_QWORD *)v379 + 4);
        if ((unint64_t)v380 >= *((_QWORD *)v379 + 5))
        {
          v382 = sub_1C98A85D8((_QWORD *)v379 + 3, (uint64_t *)__lk);
        }
        else
        {
          v381 = *(_QWORD *)__lk;
          *(_QWORD *)__lk = 0;
          *v380 = v381;
          v382 = v380 + 1;
          *((_QWORD *)v379 + 4) = v382;
        }
        *((_QWORD *)v379 + 4) = v382;
        v384 = *(void ***)__lk;
        *(_QWORD *)__lk = 0;
        if (v384)
        {
          free(v384[3]);
          free(*v384);
          MEMORY[0x1CAA44AFC](v384, 0x1080C407C7A2332);
        }
        goto LABEL_700;
      }
      v369 = *(unsigned int *)(v362 + 112);
      if ((_DWORD)v369 != *(_DWORD *)(*(_QWORD *)v367 + 16))
      {
        v383 = atomic_load((unsigned __int8 *)&qword_1ED52ACD0);
        if ((v383 & 1) == 0 && __cxa_guard_acquire(&qword_1ED52ACD0))
        {
          qword_1ED52ACE0 = (uint64_t)os_log_create("com.apple.AppleCVA", "FaceKit");
          __cxa_guard_release(&qword_1ED52ACD0);
        }
        v365 = (id)qword_1ED52ACE0;
        if (os_log_type_enabled(v365, OS_LOG_TYPE_ERROR))
        {
          v487 = *(_DWORD *)(**((_QWORD **)*v161 + 3) + 16);
          v488 = *(_DWORD *)(v362 + 112);
          *(_DWORD *)__lk = 67109376;
          *(_DWORD *)&__lk[4] = v488;
          *(_WORD *)&__lk[8] = 1024;
          *(_DWORD *)&__lk[10] = v487;
          _os_log_error_impl(&dword_1C9870000, v365, OS_LOG_TYPE_ERROR, "Point size does not match cluster dimensionality %u != %u", __lk, 0xEu);
        }
LABEL_567:

        goto LABEL_709;
      }
      v370 = (v368 - v367) >> 3;
      if (v370 <= 1)
        v370 = 1;
      if ((_DWORD)v369)
      {
        v371 = (float *)*v366;
        if ((_DWORD)v369 == 1)
        {
          v372 = 0;
          v373 = 0;
          v374 = INFINITY;
          do
          {
            v376 = *(_QWORD *)(v367 + 8 * v372);
            if (*(_DWORD *)(v376 + 16) == 1)
              v375 = (float)(1.0 - (float)(**(float **)v376 * *v371)) * 0.5;
            else
              v375 = INFINITY;
            if (v374 > v375)
            {
              v373 = v372;
              v374 = v375;
            }
            ++v372;
          }
          while (v370 != v372);
        }
        else
        {
          v414 = (v369 + 0x3FFFFFFFFFFFFFFELL) & 0x3FFFFFFFFFFFFFFFLL;
          if (v414 >= 7)
          {
            v435 = 0;
            v373 = 0;
            v436 = v414 + 1;
            v437 = 4 * (v436 & 0x7FFFFFFFFFFFFFF8);
            v374 = INFINITY;
            do
            {
              v439 = *(_QWORD *)(v367 + 8 * v435);
              if (*(_DWORD *)(v439 + 16) == (_DWORD)v369)
              {
                v440 = *(float **)v439;
                v441 = *(_QWORD *)v439 + 4;
                v443 = *v440;
                v442 = (float32x4_t *)(v440 + 5);
                v444 = v443 * *v371;
                v445 = (float32x4_t *)(v371 + 5);
                v446 = v436 & 0x7FFFFFFFFFFFFFF8;
                do
                {
                  v447 = vmulq_f32(v442[-1], v445[-1]);
                  v448 = vmulq_f32(*v442, *v445);
                  v444 = (float)((float)((float)((float)((float)((float)((float)(v444 + v447.f32[0]) + v447.f32[1])
                                                               + v447.f32[2])
                                                       + v447.f32[3])
                                               + v448.f32[0])
                                       + v448.f32[1])
                               + v448.f32[2])
                       + v448.f32[3];
                  v445 += 2;
                  v442 += 2;
                  v446 -= 8;
                }
                while (v446);
                if (v436 != (v436 & 0x7FFFFFFFFFFFFFF8))
                {
                  v449 = (float *)(v441 + v437);
                  v450 = &v371[(unint64_t)v437 / 4 + 1];
                  v451 = 4 * v369 - v437 - 4;
                  do
                  {
                    v452 = *v449++;
                    v453 = v452;
                    v454 = *v450++;
                    v444 = v444 + (float)(v453 * v454);
                    v451 -= 4;
                  }
                  while (v451);
                }
                v438 = (float)(1.0 - v444) * 0.5;
              }
              else
              {
                v438 = INFINITY;
              }
              if (v374 > v438)
              {
                v373 = v435;
                v374 = v438;
              }
              ++v435;
            }
            while (v435 != v370);
          }
          else
          {
            v415 = 0;
            v373 = 0;
            v374 = INFINITY;
            do
            {
              v417 = *(_QWORD *)(v367 + 8 * v415);
              if (*(_DWORD *)(v417 + 16) == (_DWORD)v369)
              {
                v418 = *(float **)v417;
                v420 = *v418;
                v419 = v418 + 1;
                v421 = v420 * *v371;
                v422 = v371 + 1;
                v423 = 4 * v369 - 4;
                do
                {
                  v424 = *v419++;
                  v425 = v424;
                  v426 = *v422++;
                  v421 = v421 + (float)(v425 * v426);
                  v423 -= 4;
                }
                while (v423);
                v416 = (float)(1.0 - v421) * 0.5;
              }
              else
              {
                v416 = INFINITY;
              }
              if (v374 > v416)
              {
                v373 = v415;
                v374 = v416;
              }
              ++v415;
            }
            while (v415 != v370);
          }
        }
      }
      else
      {
        v385 = 0;
        v373 = 0;
        v374 = INFINITY;
        do
        {
          v386 = INFINITY;
          if (!*(_DWORD *)(*(_QWORD *)(v367 + 8 * v385) + 16))
            v386 = 0.5;
          if (v374 > v386)
          {
            v373 = v385;
            v374 = v386;
          }
          ++v385;
        }
        while (v370 != v385);
      }
      v387 = atomic_load((unsigned __int8 *)&qword_1ED52ACD8);
      if ((v387 & 1) == 0 && __cxa_guard_acquire(&qword_1ED52ACD8))
      {
        sub_1C98CFF14();
        __cxa_guard_release(&qword_1ED52ACD8);
        a3 = v645;
      }
      v388 = *v161;
      if (v374 > *(float *)(qword_1ED52ACB8 + 308))
      {
        sub_1C98FE1E8((uint64_t *)__lk, v362 + 96);
        v389 = (_QWORD *)*((_QWORD *)v388 + 4);
        if ((unint64_t)v389 >= *((_QWORD *)v388 + 5))
        {
          v391 = sub_1C98A85D8((_QWORD *)v388 + 3, (uint64_t *)__lk);
        }
        else
        {
          v390 = *(_QWORD *)__lk;
          *(_QWORD *)__lk = 0;
          *v389 = v390;
          v391 = v389 + 1;
          *((_QWORD *)v388 + 4) = v391;
        }
        *((_QWORD *)v388 + 4) = v391;
        v427 = *(void ***)__lk;
        *(_QWORD *)__lk = 0;
        if (v427)
        {
          free(v427[3]);
          free(*v427);
          MEMORY[0x1CAA44AFC](v427, 0x1080C407C7A2332);
        }
        v428 = atomic_load((unsigned __int8 *)&qword_1ED52ACD0);
        if ((v428 & 1) == 0 && __cxa_guard_acquire(&qword_1ED52ACD0))
        {
          qword_1ED52ACE0 = (uint64_t)os_log_create("com.apple.AppleCVA", "FaceKit");
          __cxa_guard_release(&qword_1ED52ACD0);
        }
        v429 = (id)qword_1ED52ACE0;
        if (os_log_type_enabled(v429, OS_LOG_TYPE_DEBUG))
        {
          v430 = (uint64_t)(*v161 + 160);
          v431 = (uint64_t)(*((_QWORD *)*v161 + 4) - *((_QWORD *)*v161 + 3)) >> 3;
          *(_DWORD *)__lk = 136315394;
          *(_QWORD *)&__lk[4] = v430;
          *(_WORD *)&__lk[12] = 2048;
          *(_QWORD *)&__lk[14] = v431;
          v432 = v429;
          v433 = "%s: No cluster match -> adding new cluster. Total cluster count: %lu";
          v434 = 22;
          goto LABEL_732;
        }
        goto LABEL_699;
      }
      v392 = *((_QWORD *)v388 + 3);
      v393 = *(_QWORD *)(v392 + 8 * v373);
      v394 = *(unsigned int *)(v393 + 16);
      if ((_DWORD)v394 != *(_DWORD *)(v362 + 112))
        goto LABEL_697;
      v395 = 0.0;
      v396 = 0.0;
      if ((_DWORD)v394)
      {
        v397 = (char *)*v366;
        v396 = *(float *)*v366 * *(float *)*v366;
        if ((_DWORD)v394 != 1)
        {
          v398 = (float *)(v397 + 4);
          v399 = (v394 + 0x3FFFFFFFFFFFFFFELL) & 0x3FFFFFFFFFFFFFFFLL;
          if (v399 < 7)
          {
LABEL_611:
            v405 = (float *)&v397[4 * v394];
            do
            {
              v406 = *v398++;
              v396 = v396 + (float)(v406 * v406);
            }
            while (v398 != v405);
          }
          else
          {
            v400 = v399 + 1;
            v401 = (float32x4_t *)(v397 + 20);
            v402 = v400 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              v403 = vmulq_f32(v401[-1], v401[-1]);
              v404 = vmulq_f32(*v401, *v401);
              v396 = (float)((float)((float)((float)((float)((float)((float)(v396 + v403.f32[0]) + v403.f32[1])
                                                           + v403.f32[2])
                                                   + v403.f32[3])
                                           + v404.f32[0])
                                   + v404.f32[1])
                           + v404.f32[2])
                   + v404.f32[3];
              v401 += 2;
              v402 -= 8;
            }
            while (v402);
            if (v400 != (v400 & 0x7FFFFFFFFFFFFFF8))
            {
              v398 += v400 & 0x7FFFFFFFFFFFFFF8;
              goto LABEL_611;
            }
          }
        }
      }
      v407 = *(float **)(v393 + 24);
      v408 = *(unsigned int *)(v393 + 40);
      if ((_DWORD)v408)
      {
        v409 = 1.0 / sqrtf(v396);
        v410 = &v407[v408];
        v411 = (float *)*v366;
        v412 = (v408 - 1) & 0x3FFFFFFFFFFFFFFFLL;
        if (v412 < 7)
        {
          v413 = *(float **)(v393 + 24);
          goto LABEL_659;
        }
        if (v407 < &v411[v408] && (v413 = *(float **)(v393 + 24), v411 < &v407[v408]))
        {
          do
          {
LABEL_659:
            v462 = *v411++;
            *v413 = (float)(v409 * v462) + *v413;
            ++v413;
          }
          while (v413 != v410);
        }
        else
        {
          v456 = v412 + 1;
          v457 = v456 & 0x7FFFFFFFFFFFFFF8;
          v413 = &v407[v457];
          v458 = (float32x4_t *)(v411 + 4);
          v459 = (float32x4_t *)(v407 + 4);
          v460 = v456 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v461 = vaddq_f32(vmulq_n_f32(*v458, v409), *v459);
            v459[-1] = vaddq_f32(vmulq_n_f32(v458[-1], v409), v459[-1]);
            *v459 = v461;
            v458 += 2;
            v459 += 2;
            v460 -= 8;
          }
          while (v460);
          if (v456 != (v456 & 0x7FFFFFFFFFFFFFF8))
          {
            v411 = (float *)((char *)v411 + v457 * 4);
            goto LABEL_659;
          }
        }
        v395 = *v407 * *v407;
        if ((_DWORD)v408 != 1)
        {
          v463 = v407 + 1;
          v464 = (v408 + 0x3FFFFFFFFFFFFFFELL) & 0x3FFFFFFFFFFFFFFFLL;
          if (v464 < 7)
          {
            do
            {
LABEL_666:
              v470 = *v463++;
              v395 = v395 + (float)(v470 * v470);
            }
            while (v463 != v410);
          }
          else
          {
            v465 = v464 + 1;
            v466 = (float32x4_t *)(v407 + 5);
            v467 = v465 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              v468 = vmulq_f32(v466[-1], v466[-1]);
              v469 = vmulq_f32(*v466, *v466);
              v395 = (float)((float)((float)((float)((float)((float)((float)(v395 + v468.f32[0]) + v468.f32[1])
                                                           + v468.f32[2])
                                                   + v468.f32[3])
                                           + v469.f32[0])
                                   + v469.f32[1])
                           + v469.f32[2])
                   + v469.f32[3];
              v466 += 2;
              v467 -= 8;
            }
            while (v467);
            if (v465 != (v465 & 0x7FFFFFFFFFFFFFF8))
            {
              v463 += v465 & 0x7FFFFFFFFFFFFFF8;
              goto LABEL_666;
            }
          }
        }
      }
      v471 = 1.0 / sqrtf(v395);
      v472 = *(float **)v393;
      if ((_DWORD)v408 != (_DWORD)v394)
      {
        if (v407 != v472)
        {
          *(_DWORD *)(v393 + 16) = v408;
          if (!(_DWORD)v408)
          {
            v650 = v471;
            free(v472);
            v471 = v650;
            v472 = 0;
            *(_QWORD *)v393 = 0;
            *(_QWORD *)(v393 + 8) = 0;
            goto LABEL_668;
          }
          if (*(_QWORD *)(v393 + 8) < v408)
          {
            v648 = v471;
            free(v472);
            v483 = (4 * v408 + 31) & 0x7FFFFFFE0;
            *(_QWORD *)v393 = 0;
            *(_QWORD *)(v393 + 8) = v483 >> 2;
            *(_QWORD *)__lk = 0;
            malloc_type_posix_memalign((void **)__lk, 0x20uLL, v483, 0x49090899uLL);
            v471 = v648;
            v472 = *(float **)__lk;
            *(_QWORD *)v393 = *(_QWORD *)__lk;
            goto LABEL_668;
          }
          v474 = &v472[v408];
LABEL_670:
          v475 = (char *)v474 - (char *)v472 - 4;
          if (v475 < 0x1C)
          {
            v478 = v472;
          }
          else if ((unint64_t)((char *)v472 - (char *)v407) < 0x20)
          {
            v478 = v472;
          }
          else
          {
            v476 = (v475 >> 2) + 1;
            v477 = v476 & 0x7FFFFFFFFFFFFFF8;
            v478 = &v472[v477];
            v479 = (float32x4_t *)(v407 + 4);
            v480 = (float32x4_t *)(v472 + 4);
            v481 = v476 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              v482 = vmulq_n_f32(*v479, v471);
              v480[-1] = vmulq_n_f32(v479[-1], v471);
              *v480 = v482;
              v479 += 2;
              v480 += 2;
              v481 -= 8;
            }
            while (v481);
            if (v476 == (v476 & 0x7FFFFFFFFFFFFFF8))
              goto LABEL_696;
            v407 = (float *)((char *)v407 + v477 * 4);
          }
          do
          {
            v501 = *v407++;
            *v478++ = v471 * v501;
          }
          while (v478 != v474);
          goto LABEL_696;
        }
        *(_QWORD *)__lk = 0;
        v649 = v471;
        malloc_type_posix_memalign((void **)__lk, 0x20uLL, (4 * v408 + 31) & 0x7FFFFFFE0, 0x49090899uLL);
        v490 = *(_QWORD *)__lk;
        v491 = *(unsigned int *)(v393 + 40);
        if ((_DWORD)v491)
        {
          v492 = *(float **)(v393 + 24);
          v493 = (v491 - 1) & 0x3FFFFFFFFFFFFFFFLL;
          if (v493 < 7)
          {
            v494 = *(float **)__lk;
            goto LABEL_694;
          }
          v494 = *(float **)__lk;
          if (*(_QWORD *)__lk - (_QWORD)v492 < 0x20uLL)
          {
            do
            {
LABEL_694:
              v502 = *v492++;
              *v494++ = v649 * v502;
            }
            while (v494 != (float *)(v490 + 4 * v491));
          }
          else
          {
            v495 = v493 + 1;
            v496 = 4 * (v495 & 0x7FFFFFFFFFFFFFF8);
            v494 = (float *)(*(_QWORD *)__lk + v496);
            v497 = (float32x4_t *)(v492 + 4);
            v498 = (float32x4_t *)(*(_QWORD *)__lk + 16);
            v499 = v495 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              v500 = vmulq_n_f32(*v497, v649);
              v498[-1] = vmulq_n_f32(v497[-1], v649);
              *v498 = v500;
              v497 += 2;
              v498 += 2;
              v499 -= 8;
            }
            while (v499);
            if (v495 != (v495 & 0x7FFFFFFFFFFFFFF8))
            {
              v492 = (float *)((char *)v492 + v496);
              goto LABEL_694;
            }
          }
        }
        v503 = *(float **)v393;
        *(_QWORD *)v393 = v490;
        *(_QWORD *)(v393 + 8) = ((4 * v408 + 31) & 0x7FFFFFFE0) >> 2;
        *(_DWORD *)(v393 + 16) = v491;
        free(v503);
        goto LABEL_696;
      }
LABEL_668:
      v473 = *(unsigned int *)(v393 + 16);
      if ((_DWORD)v473)
      {
        v474 = &v472[v473];
        v407 = *(float **)(v393 + 24);
        goto LABEL_670;
      }
LABEL_696:
      ++*(_DWORD *)(*(_QWORD *)(v392 + 8 * v373) + 48);
LABEL_697:
      v504 = atomic_load((unsigned __int8 *)&qword_1ED52ACD0);
      if ((v504 & 1) == 0 && __cxa_guard_acquire(&qword_1ED52ACD0))
      {
        qword_1ED52ACE0 = (uint64_t)os_log_create("com.apple.AppleCVA", "FaceKit");
        __cxa_guard_release(&qword_1ED52ACD0);
      }
      v429 = (id)qword_1ED52ACE0;
      a3 = v645;
      if (os_log_type_enabled(v429, OS_LOG_TYPE_DEBUG))
      {
        v521 = *(_DWORD *)(*(_QWORD *)(*((_QWORD *)*v161 + 3) + 8 * v373) + 48);
        v522 = (uint64_t)(*v161 + 160);
        *(_DWORD *)__lk = 136315650;
        *(_QWORD *)&__lk[4] = v522;
        *(_WORD *)&__lk[12] = 2048;
        *(_QWORD *)&__lk[14] = v373;
        *(_WORD *)&__lk[22] = 1024;
        *(_DWORD *)&__lk[24] = v521;
        v432 = v429;
        v433 = "%s: Cluster index %lu match -> adding point. Total points in cluster: %u";
        v434 = 28;
LABEL_732:
        _os_log_debug_impl(&dword_1C9870000, v432, OS_LOG_TYPE_DEBUG, v433, __lk, v434);
      }
LABEL_699:

LABEL_700:
      v505 = *v161;
      v506 = (uint64_t)(*v161 + 120);
      if ((const void **)v506 != v366)
      {
        v507 = *(unsigned int *)(v362 + 112);
        if ((_DWORD)v507)
        {
          v508 = (void *)*((_QWORD *)v505 + 15);
          if (*((_QWORD *)v505 + 16) >= v507)
          {
            v509 = 4 * v507;
          }
          else
          {
            free(v508);
            v509 = 4 * v507;
            v510 = (4 * v507 + 31) & 0x7FFFFFFE0;
            *((_QWORD *)v505 + 15) = 0;
            *((_QWORD *)v505 + 16) = v510 >> 2;
            *(_QWORD *)__lk = 0;
            malloc_type_posix_memalign((void **)__lk, 0x20uLL, v510, 0x49090899uLL);
            v508 = *(void **)__lk;
            *(_QWORD *)v506 = *(_QWORD *)__lk;
          }
          memcpy(v508, *v366, v509);
        }
        else
        {
          free(*(void **)v506);
          *(_QWORD *)v506 = 0;
          *(_QWORD *)(v506 + 8) = 0;
        }
        *((_DWORD *)v505 + 34) = *(_DWORD *)(v362 + 112);
        v505 = *v161;
      }
      v511 = *(_OWORD *)v362;
      *(_OWORD *)(v505 + 104) = *(_OWORD *)(v362 + 16);
      *(_OWORD *)(v505 + 88) = v511;
LABEL_709:
      if (__p)
      {
        v512 = v656;
        v513 = __p;
        if (v656 != __p)
        {
          do
          {
            v514 = (std::__shared_weak_count *)*(v512 - 1);
            if (v514)
            {
              v515 = (unint64_t *)&v514->__shared_owners_;
              do
                v516 = __ldaxr(v515);
              while (__stlxr(v516 - 1, v515));
              if (!v516)
              {
                ((void (*)(std::__shared_weak_count *))v514->__on_zero_shared)(v514);
                std::__shared_weak_count::__release_weak(v514);
              }
            }
            v512 -= 2;
          }
          while (v512 != __p);
          v513 = __p;
        }
        operator delete(v513);
      }
      v20 = (char *)v653;
      if (!v659)
        goto LABEL_724;
      v517 = (unint64_t *)&v659->__shared_owners_;
      do
        v518 = __ldaxr(v517);
      while (__stlxr(v518 - 1, v517));
      if (!v518)
      {
        ((void (*)(std::__shared_weak_count *))v659->__on_zero_shared)(v659);
        std::__shared_weak_count::__release_weak(v659);
        v41 = v661;
        if (v661)
        {
LABEL_725:
          v519 = (unint64_t *)&v41->__shared_owners_;
          do
            v520 = __ldaxr(v519);
          while (__stlxr(v520 - 1, v519));
          if (!v520)
          {
            ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
            std::__shared_weak_count::__release_weak(v41);
          }
        }
      }
      else
      {
LABEL_724:
        v41 = v661;
        if (v661)
          goto LABEL_725;
      }
LABEL_16:
      v20 += 16;
      if (v20 == v640)
        goto LABEL_761;
    }
    v55 = (float *)((char *)v55 + v60);
LABEL_59:
    v66 = &v54[v53];
    v67 = v55 + 1;
    do
    {
      v68 = *v57++;
      v69 = v68;
      v70 = *v67++;
      v56 = v56 + (float)(v69 * v70);
    }
    while (v57 != v66);
    goto LABEL_63;
  }
LABEL_761:
  v523 = *a2;
  if (a2[1] != *a2)
  {
    v524 = 0;
    v525 = 0;
    v526 = *(_QWORD *)(a1 + 8);
    v527 = (uint64_t **)(v526 + 40);
    while (1)
    {
      v528 = 2 * v524;
      v529 = *v523[2 * v524];
      v530 = *(_QWORD *)(v529 + 24);
      v531 = *(std::__shared_weak_count **)(v529 + 32);
      if (v531)
      {
        v532 = (unint64_t *)&v531->__shared_owners_;
        do
          v533 = __ldxr(v532);
        while (__stxr(v533 + 1, v532));
      }
      if (v530)
      {
        v534 = *(*a2)[v528];
        v535 = *(_QWORD *)(v534 + 24);
        v536 = *(std::__shared_weak_count **)(v534 + 32);
        if (v536)
        {
          v537 = (unint64_t *)&v536->__shared_owners_;
          do
            v538 = __ldxr(v537);
          while (__stxr(v538 + 1, v537));
          v539 = *(unsigned __int8 *)(*(_QWORD *)v535 + 16);
          do
            v540 = __ldaxr(v537);
          while (__stlxr(v540 - 1, v537));
          if (!v540)
          {
            ((void (*)(std::__shared_weak_count *))v536->__on_zero_shared)(v536);
            std::__shared_weak_count::__release_weak(v536);
          }
        }
        else
        {
          v539 = *(unsigned __int8 *)(*(_QWORD *)v535 + 16);
        }
        v541 = v539 == 0;
        if (v531)
          goto LABEL_779;
LABEL_782:
        if (!v541)
          goto LABEL_783;
LABEL_763:
        v523 = *a2;
        v524 = ++v525;
        if (((char *)a2[1] - (char *)*a2) >> 4 <= (unint64_t)v525)
          break;
      }
      else
      {
        v541 = 1;
        if (!v531)
          goto LABEL_782;
LABEL_779:
        v542 = (unint64_t *)&v531->__shared_owners_;
        do
          v543 = __ldaxr(v542);
        while (__stlxr(v543 - 1, v542));
        if (v543)
          goto LABEL_782;
        ((void (*)(std::__shared_weak_count *))v531->__on_zero_shared)(v531);
        std::__shared_weak_count::__release_weak(v531);
        if (v541)
          goto LABEL_763;
LABEL_783:
        v544 = *(*a2)[v528];
        v545 = *(unint64_t ***)(v544 + 24);
        v546 = *(std::__shared_weak_count **)(v544 + 32);
        *(_QWORD *)__lk = v545;
        *(_QWORD *)&__lk[8] = v546;
        if (v546)
        {
          v547 = (unint64_t *)&v546->__shared_owners_;
          do
            v548 = __ldxr(v547);
          while (__stxr(v548 + 1, v547));
          v549 = *v545;
          if (!*((_BYTE *)*v545 + 16))
            goto LABEL_938;
          v550 = (unint64_t *)&v546->__shared_owners_;
          do
            v551 = __ldaxr(v550);
          while (__stlxr(v551 - 1, v550));
          if (!v551)
          {
            ((void (*)(std::__shared_weak_count *))v546->__on_zero_shared)(v546);
            std::__shared_weak_count::__release_weak(v546);
          }
        }
        else
        {
          v549 = *v545;
          if (!*((_BYTE *)*v545 + 16))
            goto LABEL_938;
        }
        v552 = v525 + 1;
        v523 = *a2;
        v553 = ((char *)a2[1] - (char *)*a2) >> 4;
        v554 = v552;
        v651 = v525 + 1;
        v644 = v528 * 8;
        v646 = v552;
        if (v553 > v552)
        {
          do
          {
            v555 = 2 * v554;
            v556 = *v523[2 * v554];
            v557 = *(_QWORD *)(v556 + 24);
            v558 = *(std::__shared_weak_count **)(v556 + 32);
            if (v558)
            {
              v559 = (unint64_t *)&v558->__shared_owners_;
              do
                v560 = __ldxr(v559);
              while (__stxr(v560 + 1, v559));
            }
            if (v557)
            {
              v561 = *(*a2)[v555];
              v562 = *(_QWORD *)(v561 + 24);
              v563 = *(std::__shared_weak_count **)(v561 + 32);
              if (v563)
              {
                v564 = (unint64_t *)&v563->__shared_owners_;
                do
                  v565 = __ldxr(v564);
                while (__stxr(v565 + 1, v564));
                v566 = *(unsigned __int8 *)(*(_QWORD *)v562 + 16);
                do
                  v567 = __ldaxr(v564);
                while (__stlxr(v567 - 1, v564));
                if (!v567)
                {
                  ((void (*)(std::__shared_weak_count *))v563->__on_zero_shared)(v563);
                  std::__shared_weak_count::__release_weak(v563);
                }
              }
              else
              {
                v566 = *(unsigned __int8 *)(*(_QWORD *)v562 + 16);
              }
              v568 = v566 == 0;
              if (!v558)
              {
LABEL_817:
                if (!v568)
                  goto LABEL_818;
                goto LABEL_798;
              }
            }
            else
            {
              v568 = 1;
              if (!v558)
                goto LABEL_817;
            }
            v569 = (unint64_t *)&v558->__shared_owners_;
            do
              v570 = __ldaxr(v569);
            while (__stlxr(v570 - 1, v569));
            if (v570)
              goto LABEL_817;
            ((void (*)(std::__shared_weak_count *))v558->__on_zero_shared)(v558);
            std::__shared_weak_count::__release_weak(v558);
            if (!v568)
            {
LABEL_818:
              v571 = *(*a2)[v555];
              v572 = *(unint64_t ***)(v571 + 24);
              v573 = *(std::__shared_weak_count **)(v571 + 32);
              *(_QWORD *)__lk = v572;
              *(_QWORD *)&__lk[8] = v573;
              if (v573)
              {
                v574 = (unint64_t *)&v573->__shared_owners_;
                do
                  v575 = __ldxr(v574);
                while (__stxr(v575 + 1, v574));
                v576 = *v572;
                if (!*((_BYTE *)*v572 + 16))
                {
LABEL_936:
                  _os_crash();
                  __break(1u);
LABEL_937:
                  _os_crash();
                  __break(1u);
LABEL_938:
                  _os_crash();
                  __break(1u);
LABEL_939:
                  abort();
                }
                v577 = (unint64_t *)&v573->__shared_owners_;
                do
                  v578 = __ldaxr(v577);
                while (__stlxr(v578 - 1, v577));
                if (!v578)
                {
                  ((void (*)(std::__shared_weak_count *))v573->__on_zero_shared)(v573);
                  std::__shared_weak_count::__release_weak(v573);
                }
              }
              else
              {
                v576 = *v572;
                if (!*((_BYTE *)*v572 + 16))
                  goto LABEL_936;
              }
              v579 = bswap64(*v549);
              v580 = bswap64(*v576);
              if (v579 == v580 && (v579 = bswap64(v549[1]), v580 = bswap64(v576[1]), v579 == v580))
              {
                v581 = 0;
              }
              else if (v579 < v580)
              {
                v581 = -1;
              }
              else
              {
                v581 = 1;
              }
              v582 = v581 < 0;
              if (v581 < 0)
                v583 = v549;
              else
                v583 = v576;
              if (v582)
                v584 = v576;
              else
                v584 = v549;
              *(_OWORD *)__lk = *(_OWORD *)v583;
              *(_OWORD *)&__lk[16] = *(_OWORD *)v584;
              v585 = (uint64_t *)operator new(0x40uLL);
              v586 = *(_OWORD *)&__lk[16];
              *(_OWORD *)((char *)v585 + 25) = *(_OWORD *)__lk;
              *(_OWORD *)((char *)v585 + 41) = v586;
              v587 = *v527;
              v588 = (uint64_t **)(v526 + 40);
              v589 = (uint64_t *)(v526 + 40);
              if (*v527)
              {
                v590 = (unint64_t *)((char *)v585 + 25);
                while (1)
                {
                  v589 = v587;
                  v591 = bswap64(*v590);
                  v592 = bswap64(*(uint64_t *)((char *)v587 + 25));
                  if (v591 == v592
                    && (v591 = bswap64(*(uint64_t *)((char *)v585 + 33)),
                        v592 = bswap64(*(uint64_t *)((char *)v589 + 33)),
                        v591 == v592))
                  {
                    v594 = bswap64(*(uint64_t *)((char *)v585 + 41));
                    v595 = bswap64(*(uint64_t *)((char *)v589 + 41));
                    if (v594 == v595)
                    {
                      v594 = bswap64(*(uint64_t *)((char *)v585 + 49));
                      v595 = bswap64(*(uint64_t *)((char *)v589 + 49));
                      if (v594 == v595)
                        goto LABEL_855;
                    }
                    if (v594 < v595)
                      v593 = -1;
                    else
                      v593 = 1;
                  }
                  else if (v591 < v592)
                  {
                    v593 = -1;
                  }
                  else
                  {
                    v593 = 1;
                  }
                  if (v593 < 0)
                  {
                    v587 = (uint64_t *)*v589;
                    v588 = (uint64_t **)v589;
                    if (!*v589)
                      break;
                  }
                  else
                  {
LABEL_855:
                    v596 = bswap64(*(uint64_t *)((char *)v589 + 25));
                    v597 = bswap64(*v590);
                    if (v596 == v597
                      && (v596 = bswap64(*(uint64_t *)((char *)v589 + 33)),
                          v597 = bswap64(*(uint64_t *)((char *)v585 + 33)),
                          v596 == v597))
                    {
                      v599 = bswap64(*(uint64_t *)((char *)v589 + 41));
                      v600 = bswap64(*(uint64_t *)((char *)v585 + 41));
                      if (v599 == v600)
                      {
                        v599 = bswap64(*(uint64_t *)((char *)v589 + 49));
                        v600 = bswap64(*(uint64_t *)((char *)v585 + 49));
                        if (v599 == v600)
                        {
LABEL_797:
                          operator delete(v585);
                          goto LABEL_798;
                        }
                      }
                      if (v599 < v600)
                        v598 = -1;
                      else
                        v598 = 1;
                    }
                    else if (v596 < v597)
                    {
                      v598 = -1;
                    }
                    else
                    {
                      v598 = 1;
                    }
                    if ((v598 & 0x80000000) == 0)
                      goto LABEL_797;
                    v587 = (uint64_t *)v589[1];
                    if (!v587)
                    {
                      v588 = (uint64_t **)(v589 + 1);
                      break;
                    }
                  }
                }
              }
              *v585 = 0;
              v585[1] = 0;
              v585[2] = (uint64_t)v589;
              *v588 = v585;
              v601 = **(_QWORD **)(v526 + 32);
              if (v601)
              {
                *(_QWORD *)(v526 + 32) = v601;
                v585 = *v588;
              }
              v602 = *v527;
              v165 = v585 == *v527;
              *((_BYTE *)v585 + 24) = v165;
              if (!v165)
              {
                do
                {
                  v603 = v585[2];
                  if (*(_BYTE *)(v603 + 24))
                    break;
                  v604 = *(uint64_t **)(v603 + 16);
                  v605 = *v604;
                  if (*v604 == v603)
                  {
                    v608 = v604[1];
                    if (!v608 || (v609 = *(unsigned __int8 *)(v608 + 24), v606 = (_BYTE *)(v608 + 24), v609))
                    {
                      if (*(uint64_t **)v603 == v585)
                      {
                        v610 = (uint64_t *)v585[2];
                      }
                      else
                      {
                        v610 = *(uint64_t **)(v603 + 8);
                        v611 = *v610;
                        *(_QWORD *)(v603 + 8) = *v610;
                        if (v611)
                        {
                          *(_QWORD *)(v611 + 16) = v603;
                          v604 = *(uint64_t **)(v603 + 16);
                        }
                        v610[2] = (uint64_t)v604;
                        *(_QWORD *)(*(_QWORD *)(v603 + 16) + 8 * (**(_QWORD **)(v603 + 16) != v603)) = v610;
                        *v610 = v603;
                        *(_QWORD *)(v603 + 16) = v610;
                        v604 = (uint64_t *)v610[2];
                        v603 = *v604;
                      }
                      *((_BYTE *)v610 + 24) = 1;
                      *((_BYTE *)v604 + 24) = 0;
                      v614 = *(_QWORD *)(v603 + 8);
                      *v604 = v614;
                      if (v614)
                        *(_QWORD *)(v614 + 16) = v604;
                      *(_QWORD *)(v603 + 16) = v604[2];
                      *(_QWORD *)(v604[2] + 8 * (*(_QWORD *)v604[2] != (_QWORD)v604)) = v603;
                      *(_QWORD *)(v603 + 8) = v604;
                      goto LABEL_897;
                    }
                  }
                  else if (!v605 || (v607 = *(unsigned __int8 *)(v605 + 24), v606 = (_BYTE *)(v605 + 24), v607))
                  {
                    if (*(uint64_t **)v603 == v585)
                    {
                      v612 = v585[1];
                      *(_QWORD *)v603 = v612;
                      if (v612)
                      {
                        *(_QWORD *)(v612 + 16) = v603;
                        v604 = *(uint64_t **)(v603 + 16);
                      }
                      v585[2] = (uint64_t)v604;
                      *(_QWORD *)(*(_QWORD *)(v603 + 16) + 8 * (**(_QWORD **)(v603 + 16) != v603)) = v585;
                      v585[1] = v603;
                      *(_QWORD *)(v603 + 16) = v585;
                      v604 = (uint64_t *)v585[2];
                    }
                    else
                    {
                      v585 = (uint64_t *)v585[2];
                    }
                    *((_BYTE *)v585 + 24) = 1;
                    *((_BYTE *)v604 + 24) = 0;
                    v603 = v604[1];
                    v613 = *(uint64_t **)v603;
                    v604[1] = *(_QWORD *)v603;
                    if (v613)
                      v613[2] = (uint64_t)v604;
                    *(_QWORD *)(v603 + 16) = v604[2];
                    *(_QWORD *)(v604[2] + 8 * (*(_QWORD *)v604[2] != (_QWORD)v604)) = v603;
                    *(_QWORD *)v603 = v604;
LABEL_897:
                    v604[2] = v603;
                    break;
                  }
                  *(_BYTE *)(v603 + 24) = 1;
                  v585 = v604;
                  *((_BYTE *)v604 + 24) = v604 == v602;
                  *v606 = 1;
                }
                while (v604 != v602);
              }
              ++*(_QWORD *)(v526 + 48);
              v615 = atomic_load((unsigned __int8 *)&qword_1ED52ACD0);
              if ((v615 & 1) == 0 && __cxa_guard_acquire(&qword_1ED52ACD0))
              {
                qword_1ED52ACE0 = (uint64_t)os_log_create("com.apple.AppleCVA", "FaceKit");
                __cxa_guard_release(&qword_1ED52ACD0);
              }
              v616 = (id)qword_1ED52ACE0;
              if (!os_log_type_enabled(v616, OS_LOG_TYPE_DEBUG))
                goto LABEL_900;
              v617 = *a2;
              v618 = **(uint64_t **)((char *)*a2 + v644);
              v619 = *(_QWORD **)(v618 + 24);
              v620 = *(std::__shared_weak_count **)(v618 + 32);
              if (v620)
              {
                v621 = (unint64_t *)&v620->__shared_owners_;
                do
                  v622 = __ldxr(v621);
                while (__stxr(v622 + 1, v621));
                v617 = *a2;
              }
              v623 = *v619 + 160;
              v624 = *v617[v555];
              v625 = *(_QWORD **)(v624 + 24);
              v626 = *(std::__shared_weak_count **)(v624 + 32);
              if (v626)
              {
                v628 = (unint64_t *)&v626->__shared_owners_;
                do
                  v629 = __ldxr(v628);
                while (__stxr(v629 + 1, v628));
                v630 = *v625 + 160;
                *(_DWORD *)__lk = 136315394;
                *(_QWORD *)&__lk[4] = v623;
                *(_WORD *)&__lk[12] = 2080;
                *(_QWORD *)&__lk[14] = v630;
                _os_log_debug_impl(&dword_1C9870000, v616, OS_LOG_TYPE_DEBUG, "Recorded distinct users %s and %s", __lk, 0x16u);
                do
                  v631 = __ldaxr(v628);
                while (__stlxr(v631 - 1, v628));
                if (v631)
                {
                  if (!v620)
                  {
LABEL_900:

                    goto LABEL_798;
                  }
                }
                else
                {
                  ((void (*)(std::__shared_weak_count *))v626->__on_zero_shared)(v626);
                  std::__shared_weak_count::__release_weak(v626);
                  if (!v620)
                    goto LABEL_900;
                }
              }
              else
              {
                v627 = *v625 + 160;
                *(_DWORD *)__lk = 136315394;
                *(_QWORD *)&__lk[4] = v623;
                *(_WORD *)&__lk[12] = 2080;
                *(_QWORD *)&__lk[14] = v627;
                _os_log_debug_impl(&dword_1C9870000, v616, OS_LOG_TYPE_DEBUG, "Recorded distinct users %s and %s", __lk, 0x16u);
                if (!v620)
                  goto LABEL_900;
              }
              v632 = (unint64_t *)&v620->__shared_owners_;
              do
                v633 = __ldaxr(v632);
              while (__stlxr(v633 - 1, v632));
              if (!v633)
              {
                ((void (*)(std::__shared_weak_count *))v620->__on_zero_shared)(v620);
                std::__shared_weak_count::__release_weak(v620);
              }
              goto LABEL_900;
            }
LABEL_798:
            v523 = *a2;
            v553 = ((char *)a2[1] - (char *)*a2) >> 4;
            LODWORD(v552) = v552 + 1;
            v554 = v552;
          }
          while (v553 > v552);
        }
        v525 = v651;
        v524 = v646;
        if (v553 <= v646)
          break;
      }
    }
  }
  v634 = (char *)v662;
  if (v662)
  {
    v635 = (char *)v663;
    if ((void *)v663 != v662)
    {
      do
      {
        v636 = (std::__shared_weak_count *)*((_QWORD *)v635 - 1);
        if (v636)
        {
          v637 = (unint64_t *)&v636->__shared_owners_;
          do
            v638 = __ldaxr(v637);
          while (__stlxr(v638 - 1, v637));
          if (!v638)
          {
            ((void (*)(std::__shared_weak_count *))v636->__on_zero_shared)(v636);
            std::__shared_weak_count::__release_weak(v636);
          }
        }
        v635 -= 16;
      }
      while (v635 != v634);
      v634 = (char *)v662;
    }
    operator delete(v634);
  }
}

void sub_1C98F8400(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,uint64_t a39,char a40,uint64_t a41,char a42,uint64_t a43,void *a44)
{
  __cxa_guard_abort(&qword_1ED52ACD8);
  sub_1C98A7D08(&a37);
  sub_1C987C140((uint64_t)&a40);
  sub_1C987C140((uint64_t)&a42);
  sub_1C98A7D08(&a44);
  _Unwind_Resume(a1);
}

uint64_t sub_1C98F84E4()
{
  return 1;
}

uint64_t sub_1C98F84EC(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 8) + 56) + 16))(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 56));
}

uint64_t sub_1C98F8500(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

uint64_t sub_1C98F8548(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  void *v5;

  v2 = *(_QWORD **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
    {
      v3 = (_QWORD *)v2[6];
      if (v3)
      {
        do
        {
          v4 = (_QWORD *)*v3;
          operator delete(v3);
          v3 = v4;
        }
        while (v4);
      }
      v5 = (void *)v2[4];
      v2[4] = 0;
      if (v5)
        operator delete(v5);
    }
    operator delete(v2);
  }
  return a1;
}

_QWORD *sub_1C98F85B4(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &off_1E8295E90;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_1C98F8610(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  if (v1)
  {
    if (*(char *)(v1 + 151) < 0)
      operator delete(*(void **)(v1 + 128));
    free(*(void **)(v1 + 96));
    v3 = *(std::__shared_weak_count **)(v1 + 40);
    if (v3)
    {
      p_shared_owners = (unint64_t *)&v3->__shared_owners_;
      do
        v5 = __ldaxr(p_shared_owners);
      while (__stlxr(v5 - 1, p_shared_owners));
      if (!v5)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
    MEMORY[0x1CAA44AFC](v1, 0x10B2C4023166585);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1C98F8688(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 16;
    v4 = *(std::__shared_weak_count **)(i - 8);
    if (v4)
    {
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v6 = __ldaxr(p_shared_owners);
      while (__stlxr(v6 - 1, p_shared_owners));
      if (!v6)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void sub_1C98F8718(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1CAA44AFCLL);
}

uint64_t sub_1C98F873C(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = *(_QWORD *)(result + 24);
  if (v1)
  {
    if (*(char *)(v1 + 151) < 0)
      operator delete(*(void **)(v1 + 128));
    free(*(void **)(v1 + 96));
    v2 = *(std::__shared_weak_count **)(v1 + 40);
    if (v2)
    {
      p_shared_owners = (unint64_t *)&v2->__shared_owners_;
      do
        v4 = __ldaxr(p_shared_owners);
      while (__stlxr(v4 - 1, p_shared_owners));
      if (!v4)
      {
        ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
        std::__shared_weak_count::__release_weak(v2);
      }
    }
    JUMPOUT(0x1CAA44AFCLL);
  }
  return result;
}

uint64_t sub_1C98F87D0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  std::ios_base *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2 = MEMORY[0x1E0DE4FD0];
  v3 = MEMORY[0x1E0DE4FD0] + 104;
  *(_QWORD *)(a1 + 128) = MEMORY[0x1E0DE4FD0] + 104;
  *(_QWORD *)(a1 + 16) = v2 + 64;
  v4 = a1 + 16;
  v5 = (_QWORD *)MEMORY[0x1E0DE4F50];
  v6 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 16);
  v7 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 24);
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + *(_QWORD *)(v6 - 24)) = v7;
  *(_QWORD *)(a1 + 8) = 0;
  v8 = (std::ios_base *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24));
  std::ios_base::init(v8, (void *)(a1 + 24));
  v8[1].__vftable = 0;
  v8[1].__fmtflags_ = -1;
  v9 = v5[4];
  v10 = v5[5];
  *(_QWORD *)(a1 + 16) = v9;
  *(_QWORD *)(v4 + *(_QWORD *)(v9 - 24)) = v10;
  v11 = v5[1];
  *(_QWORD *)a1 = v11;
  *(_QWORD *)(a1 + *(_QWORD *)(v11 - 24)) = v5[6];
  *(_QWORD *)a1 = v2 + 24;
  *(_QWORD *)(a1 + 128) = v3;
  *(_QWORD *)(a1 + 16) = v2 + 64;
  std::streambuf::basic_streambuf();
  *(_QWORD *)(a1 + 24) = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_DWORD *)(a1 + 120) = 24;
  return a1;
}

void sub_1C98F88D4(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::iostream::~basic_iostream();
  MEMORY[0x1CAA44AB4](v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1C98F88FC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = MEMORY[0x1E0DE4F50];
  v3 = *MEMORY[0x1E0DE4F50];
  *(_QWORD *)a1 = *MEMORY[0x1E0DE4F50];
  v4 = *(_QWORD *)(v2 + 72);
  *(_QWORD *)(a1 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 64);
  *(_QWORD *)(a1 + 24) = MEMORY[0x1E0DE4FB8] + 16;
  *(_QWORD *)(a1 + 16) = v4;
  if (*(char *)(a1 + 111) < 0)
    operator delete(*(void **)(a1 + 88));
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x1CAA44AB4](a1 + 128);
  return a1;
}

void sub_1C98F8984(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  void **v8;
  char *v9;
  char *v10;
  void *v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;

  v2 = *(std::__shared_weak_count **)(a1 + 64);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  sub_1C98CD490(*(_QWORD **)(a1 + 40));
  v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (v5)
  {
    v6 = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  v8 = *(void ***)a1;
  *(_QWORD *)a1 = 0;
  if (v8)
  {
    v9 = (char *)*v8;
    if (*v8)
    {
      v10 = (char *)v8[1];
      v11 = *v8;
      if (v10 != v9)
      {
        do
        {
          v12 = (std::__shared_weak_count *)*((_QWORD *)v10 - 1);
          if (v12)
          {
            v13 = (unint64_t *)&v12->__shared_owners_;
            do
              v14 = __ldaxr(v13);
            while (__stlxr(v14 - 1, v13));
            if (!v14)
            {
              ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
              std::__shared_weak_count::__release_weak(v12);
            }
          }
          v10 -= 16;
        }
        while (v10 != v9);
        v11 = *v8;
      }
      v8[1] = v9;
      operator delete(v11);
    }
    MEMORY[0x1CAA44AFC](v8, 0x1020C4055CCDE27);
  }
  JUMPOUT(0x1CAA44AFCLL);
}

void sub_1C98F8AD0(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E8295A30;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1C98F8AE0(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E8295A30;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1CAA44AFCLL);
}

uint64_t sub_1C98F8B10(uint64_t result)
{
  char **v1;
  char *v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;

  v1 = *(char ***)(result + 24);
  if (v1)
  {
    v2 = v1[11];
    if (v2)
    {
      v3 = **((_QWORD **)v2 + 1);
      std::mutex::lock((std::mutex *)(v3 + 16));
      *(_BYTE *)(v3 + 128) = 1;
      std::mutex::unlock((std::mutex *)(v3 + 16));
      (*(void (**)(_QWORD))(***((_QWORD ***)v2 + 1) + 48))(**((_QWORD **)v2 + 1));
      (*(void (**)(_QWORD))(***((_QWORD ***)v2 + 1) + 40))(**((_QWORD **)v2 + 1));
      v4 = *(_QWORD *)(*((_QWORD *)v2 + 1) + 24) - *(_QWORD *)(*((_QWORD *)v2 + 1) + 16);
      if ((int)(v4 >> 4) >= 1)
      {
        v5 = 0;
        v6 = v4 & 0xFFFFFFFF0;
        do
        {
          sub_1C991F874(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v2 + 1) + 16) + v5), 0);
          v5 += 16;
        }
        while (v6 != v5);
      }
    }
    v7 = (std::__shared_weak_count *)v1[30];
    if (v7)
    {
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
    std::condition_variable::~condition_variable((std::condition_variable *)(v1 + 23));
    std::mutex::~mutex((std::mutex *)(v1 + 14));
    v10 = (std::__shared_weak_count *)v1[12];
    if (v10)
    {
      v11 = (unint64_t *)&v10->__shared_owners_;
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 - 1, v11));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
    std::mutex::~mutex((std::mutex *)(v1 + 3));
    v13 = *v1;
    if (*v1)
    {
      v14 = v1[1];
      v15 = *v1;
      if (v14 != v13)
      {
        do
        {
          v16 = (std::__shared_weak_count *)*((_QWORD *)v14 - 1);
          if (v16)
          {
            v17 = (unint64_t *)&v16->__shared_owners_;
            do
              v18 = __ldaxr(v17);
            while (__stlxr(v18 - 1, v17));
            if (!v18)
            {
              ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
              std::__shared_weak_count::__release_weak(v16);
            }
          }
          v14 -= 16;
        }
        while (v14 != v13);
        v15 = *v1;
      }
      v1[1] = v13;
      operator delete(v15);
    }
    JUMPOUT(0x1CAA44AFCLL);
  }
  return result;
}

void sub_1C98F8CEC(uint64_t a1, uint64_t a2, unsigned int *a3, _QWORD *a4, __int128 *a5, unsigned int *a6, float a7)
{
  std::mutex *v14;
  uint64_t v15;
  void *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  int v23;
  int v24;
  unint64_t v25;
  int v26;
  int v27;
  _DWORD *v28;
  _DWORD *v29;
  char *v30;
  _DWORD *v31;
  int v32;
  int v33;
  int *v34;
  unint64_t v35;
  int *v36;
  uint64_t v37;
  unint64_t v38;
  int *v39;
  unint64_t v40;
  uint64_t v41;
  int *v42;
  _OWORD *v43;
  __int128 *v44;
  uint64_t v45;
  __int128 v46;
  size_t v47;
  size_t v48;
  size_t v49;
  size_t v50;
  int *v51;
  unint64_t v52;
  _DWORD *v53;
  unint64_t v54;
  uint64_t v55;
  int *v56;
  _OWORD *v57;
  __int128 *v58;
  uint64_t v59;
  __int128 v60;
  size_t v61;
  char *v62;
  uint64_t v63;
  int *v64;
  unint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  __int128 v71;
  int v72;
  size_t v73;
  int *v74;
  unint64_t v75;
  _DWORD *v76;
  unint64_t v77;
  uint64_t v78;
  int *v79;
  _OWORD *v80;
  __int128 *v81;
  uint64_t v82;
  __int128 v83;
  int v84;
  void *v85;
  int v86;
  int v87;
  __int128 v88;
  __int128 v89;
  uint64_t v90;
  int *v91;
  unint64_t v92;
  int *v93;
  uint64_t v94;
  unint64_t v95;
  int *v96;
  unint64_t v97;
  uint64_t v98;
  int *v99;
  _OWORD *v100;
  __int128 *v101;
  uint64_t v102;
  __int128 v103;
  size_t v104;
  size_t v105;
  size_t v106;
  size_t v107;
  int *v108;
  unint64_t v109;
  _DWORD *v110;
  unint64_t v111;
  uint64_t v112;
  int *v113;
  _OWORD *v114;
  __int128 *v115;
  uint64_t v116;
  __int128 v117;
  size_t v118;
  char *v119;
  uint64_t v120;
  int *v121;
  unint64_t v122;
  char *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  char *v127;
  __int128 v128;
  int v129;
  size_t v130;
  int *v131;
  unint64_t v132;
  _DWORD *v133;
  unint64_t v134;
  uint64_t v135;
  int *v136;
  _OWORD *v137;
  __int128 *v138;
  uint64_t v139;
  __int128 v140;
  int v141;
  void *v142;
  int v143;
  int v144;
  size_t size;

  v14 = (std::mutex *)(a1 + 160);
  std::mutex::lock((std::mutex *)(a1 + 160));
  *(_BYTE *)(a1 + 40) = a2 != 0;
  if (!a2)
    goto LABEL_30;
  v15 = *(_QWORD *)(a2 + 8);
  if (v15 <= *(_DWORD *)(a1 + 16) && HIDWORD(v15) <= *(_DWORD *)(a1 + 20))
  {
    v19 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = v15;
    v18 = *(char **)(a1 + 32);
    v20 = *(_QWORD *)(a2 + 24);
    if (!v20)
      goto LABEL_30;
    goto LABEL_15;
  }
  v17 = *(void **)(a1 + 32);
  if (v17)
  {
    free(v17);
    *(_QWORD *)(a1 + 32) = 0;
  }
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = v15;
  *(_QWORD *)(a1 + 24) = ((unint64_t)(((4 * (_DWORD)v15 + 15) & 0xFFFFFFF0) >> 4) << 36) | 4;
  size = ((4 * (_DWORD)v15 + 15) & 0xFFFFFFF0) * (unint64_t)HIDWORD(v15);
  if (size)
  {
    v18 = (char *)malloc_type_malloc(size, 0xA153FF5uLL);
    v19 = *(_QWORD *)(a1 + 8);
  }
  else
  {
    v19 = 0;
    v18 = 0;
  }
  *(_QWORD *)(a1 + 32) = v18;
  v20 = *(_QWORD *)(a2 + 24);
  if (v20)
  {
LABEL_15:
    v21 = *(_QWORD *)(a2 + 16);
    v22 = (*(_DWORD *)(a2 + 12) * HIDWORD(v21));
    if ((_DWORD)v22)
    {
      v23 = 0;
      v24 = 0;
      v25 = *(_QWORD *)(a1 + 24);
      v26 = *(_DWORD *)(a1 + 16);
      v27 = *(_DWORD *)(a2 + 8);
      v28 = (_DWORD *)(v20 + *(_QWORD *)a2);
      v29 = (_DWORD *)((char *)v28 + v22);
      v30 = &v18[v19];
      if (v18)
        v31 = v30;
      else
        v31 = 0;
      do
      {
        *v31 = *v28;
        v28 = (_DWORD *)((char *)v28 + v21);
        v32 = v24 + 1;
        if (v24 + 1 == v27)
          v24 = 0;
        else
          ++v24;
        if (v32 == v27)
          v28 = (_DWORD *)((char *)v28 + HIDWORD(v21) - (v32 * v21));
        v31 = (_DWORD *)((char *)v31 + v25);
        v33 = v23 + 1;
        if (v23 + 1 == v26)
          v23 = 0;
        else
          ++v23;
        if (v33 == v26)
          v31 = (_DWORD *)((char *)v31 + HIDWORD(v25) - (v33 * v25));
      }
      while (v28 != v29);
    }
  }
LABEL_30:
  v34 = *(int **)(a1 + 48);
  v35 = *a3;
  if ((_DWORD)v35 == *(_DWORD *)(a1 + 64))
    goto LABEL_31;
  if ((int *)(*((_QWORD *)a3 + 1) - 4 * a3[5]) == v34)
  {
    v61 = (4 * v35 + 31) & 0x7FFFFFFE0;
    size = 0;
    malloc_type_posix_memalign((void **)&size, 0x20uLL, v61, 0x49090899uLL);
    v62 = (char *)size;
    v63 = *a3;
    v64 = (int *)*((_QWORD *)a3 + 1);
    if (&v64[-a3[5]] != (int *)size)
    {
      if ((_DWORD)v63)
      {
        v65 = (v63 - 1) & 0x3FFFFFFFFFFFFFFFLL;
        if (v65 < 7)
        {
          v66 = (char *)size;
        }
        else
        {
          v66 = (char *)size;
          if (size - (unint64_t)v64 >= 0x20)
          {
            v67 = 0;
            v68 = (v65 + 1) & 0x7FFFFFFFFFFFFFF8;
            v69 = v68;
            do
            {
              v70 = &v62[v67 * 4];
              v71 = *(_OWORD *)&v64[v67 + 4];
              *(_OWORD *)v70 = *(_OWORD *)&v64[v67];
              *((_OWORD *)v70 + 1) = v71;
              v67 += 8;
              v69 -= 8;
            }
            while (v69);
            if (v65 + 1 == v68)
              goto LABEL_74;
            v66 = &v62[4 * v68];
            v64 += v68;
          }
        }
        do
        {
          v86 = *v64++;
          *(_DWORD *)v66 = v86;
          v66 += 4;
        }
        while (v66 != &v62[4 * v63]);
      }
LABEL_74:
      v73 = (size_t)v62;
LABEL_78:
      v85 = *(void **)(a1 + 48);
      *(_QWORD *)(a1 + 48) = v73;
      *(_QWORD *)(a1 + 56) = v61 >> 2;
      *(_DWORD *)(a1 + 64) = v63;
      goto LABEL_79;
    }
    size = 0;
    v61 = (4 * v63 + 31) & 0x7FFFFFFE0;
    malloc_type_posix_memalign((void **)&size, 0x20uLL, v61, 0x49090899uLL);
    v73 = size;
    if ((_DWORD)v63)
    {
      v74 = (int *)*((_QWORD *)a3 + 1);
      v75 = (v63 - 1) & 0x3FFFFFFFFFFFFFFFLL;
      if (v75 < 7)
      {
        v76 = (_DWORD *)size;
      }
      else
      {
        v76 = (_DWORD *)size;
        if (size - (unint64_t)v74 >= 0x20)
        {
          v77 = v75 + 1;
          v78 = (v75 + 1) & 0x7FFFFFFFFFFFFFF8;
          v79 = &v74[v78];
          v80 = (_OWORD *)(size + 16);
          v81 = (__int128 *)(v74 + 4);
          v82 = v78;
          do
          {
            v83 = *v81;
            *(v80 - 1) = *(v81 - 1);
            *v80 = v83;
            v80 += 2;
            v81 += 2;
            v82 -= 8;
          }
          while (v82);
          if (v77 == v78)
            goto LABEL_77;
          v76 = (_DWORD *)(v73 + 4 * v78);
          v74 = v79;
        }
      }
      do
      {
        v87 = *v74++;
        *v76++ = v87;
      }
      while (v76 != (_DWORD *)(v73 + 4 * v63));
    }
LABEL_77:
    free(v62);
    goto LABEL_78;
  }
  *(_DWORD *)(a1 + 64) = v35;
  if ((_DWORD)v35)
  {
    if (*(_QWORD *)(a1 + 56) < v35)
    {
      free(v34);
      v47 = (4 * v35 + 31) & 0x7FFFFFFE0;
      *(_QWORD *)(a1 + 48) = 0;
      *(_QWORD *)(a1 + 56) = v47 >> 2;
      size = 0;
      malloc_type_posix_memalign((void **)&size, 0x20uLL, v47, 0x49090899uLL);
      v34 = (int *)size;
      *(_QWORD *)(a1 + 48) = size;
    }
  }
  else
  {
    free(v34);
    v34 = 0;
    *(_QWORD *)(a1 + 48) = 0;
    *(_QWORD *)(a1 + 56) = 0;
  }
LABEL_31:
  v36 = (int *)*((_QWORD *)a3 + 1);
  v37 = *(unsigned int *)(a1 + 64);
  if (&v36[-a3[5]] == v34)
  {
    v48 = (4 * v37 + 31) & 0x7FFFFFFE0;
    v49 = v48 >> 2;
    size = 0;
    malloc_type_posix_memalign((void **)&size, 0x20uLL, v48, 0x49090899uLL);
    v50 = size;
    if ((_DWORD)v37)
    {
      v51 = (int *)*((_QWORD *)a3 + 1);
      v52 = (v37 - 1) & 0x3FFFFFFFFFFFFFFFLL;
      if (v52 < 7)
      {
        v53 = (_DWORD *)size;
      }
      else
      {
        v53 = (_DWORD *)size;
        if (size - (unint64_t)v51 >= 0x20)
        {
          v54 = v52 + 1;
          v55 = (v52 + 1) & 0x7FFFFFFFFFFFFFF8;
          v56 = &v51[v55];
          v57 = (_OWORD *)(size + 16);
          v58 = (__int128 *)(v51 + 4);
          v59 = v55;
          do
          {
            v60 = *v58;
            *(v57 - 1) = *(v58 - 1);
            *v57 = v60;
            v57 += 2;
            v58 += 2;
            v59 -= 8;
          }
          while (v59);
          if (v54 == v55)
            goto LABEL_71;
          v53 = (_DWORD *)(v50 + 4 * v55);
          v51 = v56;
        }
      }
      do
      {
        v84 = *v51++;
        *v53++ = v84;
      }
      while (v53 != (_DWORD *)(v50 + 4 * v37));
    }
LABEL_71:
    v85 = *(void **)(a1 + 48);
    *(_QWORD *)(a1 + 48) = v50;
    *(_QWORD *)(a1 + 56) = v49;
    *(_DWORD *)(a1 + 64) = v37;
LABEL_79:
    free(v85);
    goto LABEL_80;
  }
  if (!(_DWORD)v37)
    goto LABEL_80;
  v38 = (v37 - 1) & 0x3FFFFFFFFFFFFFFFLL;
  if (v38 < 7)
  {
    v39 = v34;
    do
    {
LABEL_60:
      v72 = *v36++;
      *v39++ = v72;
    }
    while (v39 != &v34[v37]);
    goto LABEL_80;
  }
  v39 = v34;
  if ((unint64_t)((char *)v34 - (char *)v36) < 0x20)
    goto LABEL_60;
  v40 = v38 + 1;
  v41 = (v38 + 1) & 0x7FFFFFFFFFFFFFF8;
  v42 = &v36[v41];
  v43 = v34 + 4;
  v44 = (__int128 *)(v36 + 4);
  v45 = v41;
  do
  {
    v46 = *v44;
    *(v43 - 1) = *(v44 - 1);
    *v43 = v46;
    v43 += 2;
    v44 += 2;
    v45 -= 8;
  }
  while (v45);
  if (v40 != v41)
  {
    v39 = &v34[v41];
    v36 = v42;
    goto LABEL_60;
  }
LABEL_80:
  *(float *)(a1 + 72) = a7;
  if ((_QWORD *)(a1 + 76) != a4)
    *(_QWORD *)(a1 + 76) = *a4;
  if ((__int128 *)(a1 + 84) != a5)
  {
    v88 = *a5;
    v89 = a5[1];
    *(_DWORD *)(a1 + 116) = *((_DWORD *)a5 + 8);
    *(_OWORD *)(a1 + 84) = v88;
    *(_OWORD *)(a1 + 100) = v89;
    v90 = *(_QWORD *)((char *)a5 + 36);
    *(_DWORD *)(a1 + 128) = *((_DWORD *)a5 + 11);
    *(_QWORD *)(a1 + 120) = v90;
  }
  v91 = *(int **)(a1 + 136);
  v92 = *a6;
  if ((_DWORD)v92 != *(_DWORD *)(a1 + 152))
  {
    if ((int *)(*((_QWORD *)a6 + 1) - 4 * a6[5]) != v91)
    {
      *(_DWORD *)(a1 + 152) = v92;
      if ((_DWORD)v92)
      {
        if (*(_QWORD *)(a1 + 144) < v92)
        {
          free(v91);
          v104 = (4 * v92 + 31) & 0x7FFFFFFE0;
          *(_QWORD *)(a1 + 136) = 0;
          *(_QWORD *)(a1 + 144) = v104 >> 2;
          size = 0;
          malloc_type_posix_memalign((void **)&size, 0x20uLL, v104, 0x49090899uLL);
          v91 = (int *)size;
          *(_QWORD *)(a1 + 136) = size;
        }
      }
      else
      {
        free(v91);
        v91 = 0;
        *(_QWORD *)(a1 + 136) = 0;
        *(_QWORD *)(a1 + 144) = 0;
      }
      goto LABEL_85;
    }
    v118 = (4 * v92 + 31) & 0x7FFFFFFE0;
    size = 0;
    malloc_type_posix_memalign((void **)&size, 0x20uLL, v118, 0x49090899uLL);
    v119 = (char *)size;
    v120 = *a6;
    v121 = (int *)*((_QWORD *)a6 + 1);
    if (&v121[-a6[5]] != (int *)size)
    {
      if ((_DWORD)v120)
      {
        v122 = (v120 - 1) & 0x3FFFFFFFFFFFFFFFLL;
        if (v122 < 7)
        {
          v123 = (char *)size;
        }
        else
        {
          v123 = (char *)size;
          if (size - (unint64_t)v121 >= 0x20)
          {
            v124 = 0;
            v125 = (v122 + 1) & 0x7FFFFFFFFFFFFFF8;
            v126 = v125;
            do
            {
              v127 = &v119[v124 * 4];
              v128 = *(_OWORD *)&v121[v124 + 4];
              *(_OWORD *)v127 = *(_OWORD *)&v121[v124];
              *((_OWORD *)v127 + 1) = v128;
              v124 += 8;
              v126 -= 8;
            }
            while (v126);
            if (v122 + 1 == v125)
              goto LABEL_128;
            v123 = &v119[4 * v125];
            v121 += v125;
          }
        }
        do
        {
          v143 = *v121++;
          *(_DWORD *)v123 = v143;
          v123 += 4;
        }
        while (v123 != &v119[4 * v120]);
      }
LABEL_128:
      v130 = (size_t)v119;
LABEL_132:
      v142 = *(void **)(a1 + 136);
      *(_QWORD *)(a1 + 136) = v130;
      *(_QWORD *)(a1 + 144) = v118 >> 2;
      *(_DWORD *)(a1 + 152) = v120;
      goto LABEL_133;
    }
    v118 = (4 * v120 + 31) & 0x7FFFFFFE0;
    size = 0;
    malloc_type_posix_memalign((void **)&size, 0x20uLL, v118, 0x49090899uLL);
    v130 = size;
    if ((_DWORD)v120)
    {
      v131 = (int *)*((_QWORD *)a6 + 1);
      v132 = (v120 - 1) & 0x3FFFFFFFFFFFFFFFLL;
      if (v132 < 7)
      {
        v133 = (_DWORD *)size;
      }
      else
      {
        v133 = (_DWORD *)size;
        if (size - (unint64_t)v131 >= 0x20)
        {
          v134 = v132 + 1;
          v135 = (v132 + 1) & 0x7FFFFFFFFFFFFFF8;
          v136 = &v131[v135];
          v137 = (_OWORD *)(size + 16);
          v138 = (__int128 *)(v131 + 4);
          v139 = v135;
          do
          {
            v140 = *v138;
            *(v137 - 1) = *(v138 - 1);
            *v137 = v140;
            v137 += 2;
            v138 += 2;
            v139 -= 8;
          }
          while (v139);
          if (v134 == v135)
            goto LABEL_131;
          v133 = (_DWORD *)(v130 + 4 * v135);
          v131 = v136;
        }
      }
      do
      {
        v144 = *v131++;
        *v133++ = v144;
      }
      while (v133 != (_DWORD *)(v130 + 4 * v120));
    }
LABEL_131:
    free(v119);
    goto LABEL_132;
  }
LABEL_85:
  v93 = (int *)*((_QWORD *)a6 + 1);
  v94 = *(unsigned int *)(a1 + 152);
  if (&v93[-a6[5]] == v91)
  {
    v105 = (4 * v94 + 31) & 0x7FFFFFFE0;
    v106 = v105 >> 2;
    size = 0;
    malloc_type_posix_memalign((void **)&size, 0x20uLL, v105, 0x49090899uLL);
    v107 = size;
    if ((_DWORD)v94)
    {
      v108 = (int *)*((_QWORD *)a6 + 1);
      v109 = (v94 - 1) & 0x3FFFFFFFFFFFFFFFLL;
      if (v109 < 7)
      {
        v110 = (_DWORD *)size;
      }
      else
      {
        v110 = (_DWORD *)size;
        if (size - (unint64_t)v108 >= 0x20)
        {
          v111 = v109 + 1;
          v112 = (v109 + 1) & 0x7FFFFFFFFFFFFFF8;
          v113 = &v108[v112];
          v114 = (_OWORD *)(size + 16);
          v115 = (__int128 *)(v108 + 4);
          v116 = v112;
          do
          {
            v117 = *v115;
            *(v114 - 1) = *(v115 - 1);
            *v114 = v117;
            v114 += 2;
            v115 += 2;
            v116 -= 8;
          }
          while (v116);
          if (v111 == v112)
            goto LABEL_125;
          v110 = (_DWORD *)(v107 + 4 * v112);
          v108 = v113;
        }
      }
      do
      {
        v141 = *v108++;
        *v110++ = v141;
      }
      while (v110 != (_DWORD *)(v107 + 4 * v94));
    }
LABEL_125:
    v142 = *(void **)(a1 + 136);
    *(_QWORD *)(a1 + 136) = v107;
    *(_QWORD *)(a1 + 144) = v106;
    *(_DWORD *)(a1 + 152) = v94;
LABEL_133:
    free(v142);
    goto LABEL_134;
  }
  if (!(_DWORD)v94)
    goto LABEL_134;
  v95 = (v94 - 1) & 0x3FFFFFFFFFFFFFFFLL;
  if (v95 < 7)
  {
    v96 = v91;
    do
    {
LABEL_114:
      v129 = *v93++;
      *v96++ = v129;
    }
    while (v96 != &v91[v94]);
    goto LABEL_134;
  }
  v96 = v91;
  if ((unint64_t)((char *)v91 - (char *)v93) < 0x20)
    goto LABEL_114;
  v97 = v95 + 1;
  v98 = (v95 + 1) & 0x7FFFFFFFFFFFFFF8;
  v99 = &v93[v98];
  v100 = v91 + 4;
  v101 = (__int128 *)(v93 + 4);
  v102 = v98;
  do
  {
    v103 = *v101;
    *(v100 - 1) = *(v101 - 1);
    *v100 = v103;
    v100 += 2;
    v101 += 2;
    v102 -= 8;
  }
  while (v102);
  if (v97 != v98)
  {
    v96 = &v91[v98];
    v93 = v99;
    goto LABEL_114;
  }
LABEL_134:
  std::mutex::unlock(v14);
  atomic_store(1u, (unsigned __int8 *)a1);
}

uint64_t sub_1C98F9620(cva::DictionaryHandler *a1, uint64_t a2)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  __int128 v8;
  cva::DictionaryHandler *v10[3];
  std::__shared_weak_count *v11;
  uint64_t v12;
  int v13;
  __int128 v14;
  __int128 v15;
  int v16;

  if (!cva::DictionaryHandler::hasKey(a1, CFSTR("pose")))
    return 0;
  v16 = 0;
  v14 = 0u;
  v15 = 0u;
  v13 = 0;
  v12 = 0;
  cva::DictionaryHandler::item(a1, CFSTR("pose"));
  cva::ItemHandler::getDictionary((cva::ItemHandler *)v10);
  v4 = sub_1C98E67B4(v10[2], &v14, &v12);
  v5 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  cva::ItemHandler::~ItemHandler((cva::ItemHandler *)v10);
  if ((_DWORD)v4)
  {
    v8 = v15;
    *(_OWORD *)a2 = v14;
    *(_OWORD *)(a2 + 16) = v8;
    *(_DWORD *)(a2 + 32) = v16;
    *(_QWORD *)(a2 + 36) = v12;
    *(_DWORD *)(a2 + 44) = v13;
  }
  return v4;
}

uint64_t sub_1C98F9718(uint64_t *a1, cva::DictionaryHandler *this, char a3)
{
  uint64_t *v3;
  uint64_t v5;
  int v6;
  int v7;
  int v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  int hasKey;
  uint64_t v13;
  int v14;
  __int128 v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  int v19;
  _DWORD *v20;
  char v21;
  char v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  cva::ArrayHandler *v27;
  unsigned int v28;
  unsigned __int8 v29;
  NSObject *v30;
  BOOL v31;
  unint64_t v32;
  _BOOL4 v33;
  cva::DictionaryHandler *v34;
  std::__shared_weak_count *v35;
  int v36;
  int v37;
  int v38;
  int v39;
  _BOOL4 v40;
  uint64_t v41;
  _DWORD *v42;
  int v43;
  char v44;
  int v45;
  uint64_t v46;
  std::__shared_weak_count *v47;
  cva::DictionaryHandler *v48;
  std::__shared_weak_count *v49;
  cva::DictionaryHandler *v50;
  BOOL v51;
  int v52;
  uint64_t v53;
  int v54;
  cva::DictionaryHandler *v55;
  cva::DictionaryHandler *v56;
  std::__shared_weak_count *v57;
  const __CFData *Data;
  int v59;
  __int128 v60;
  unsigned __int8 v61;
  int v62;
  const __CFData *v63;
  char v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  unint64_t *v68;
  unint64_t v69;
  unint64_t *v70;
  unint64_t v71;
  unint64_t *v72;
  unint64_t v73;
  unint64_t *v74;
  unint64_t v75;
  unsigned __int8 v76;
  NSObject *v77;
  unsigned __int8 v78;
  unint64_t *v79;
  unint64_t v80;
  unsigned int v81;
  uint64_t v82;
  uint8_t *v83;
  uint64_t v84;
  uint64_t v85;
  BOOL v86;
  BOOL v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  unint64_t v90;
  unint64_t *v91;
  unint64_t v92;
  unint64_t *v93;
  unint64_t v94;
  uint64_t result;
  int v96;
  std::__shared_weak_count *v97;
  int v98;
  cva::ArrayHandler *BytePtr;
  cva::ArrayHandler *v100;
  std::__shared_weak_count *v101;
  std::__shared_weak_count *v102;
  uint64_t *v103;
  uint64_t v104;
  cva::ArrayHandler *v105;
  uint64_t v106;
  int v107;
  cva::DictionaryHandler *v108[2];
  __int128 v109;
  uint64_t v110;
  int v111;
  __int128 v112;
  int v113;
  uint64_t v114;
  cva::DictionaryHandler *v115;
  std::__shared_weak_count *v116;
  uint8_t buf[16];
  __int128 v118;
  int v119;
  uint64_t v120;

  v3 = a1;
  v120 = *MEMORY[0x1E0C80C00];
  if (!this)
    goto LABEL_179;
  v5 = *a1;
  if (!*(_BYTE *)(*a1 + 264))
  {
    *(_QWORD *)(v5 + 256) = 0;
    *(_OWORD *)(v5 + 224) = 0u;
    *(_OWORD *)(v5 + 240) = 0u;
    *(_OWORD *)(v5 + 192) = 0u;
    *(_OWORD *)(v5 + 208) = 0u;
    *(_OWORD *)(v5 + 160) = 0u;
    *(_OWORD *)(v5 + 176) = 0u;
    *(_OWORD *)(v5 + 128) = 0u;
    *(_OWORD *)(v5 + 144) = 0u;
    *(_OWORD *)(v5 + 96) = 0u;
    *(_OWORD *)(v5 + 112) = 0u;
    *(_OWORD *)(v5 + 64) = 0u;
    *(_OWORD *)(v5 + 80) = 0u;
    *(_OWORD *)(v5 + 32) = 0u;
    *(_OWORD *)(v5 + 48) = 0u;
    *(_OWORD *)v5 = 0u;
    *(_OWORD *)(v5 + 16) = 0u;
    *(_BYTE *)(v5 + 264) = 1;
  }
  *(_BYTE *)(v5 + 256) = a3;
  if (!cva::DictionaryHandler::hasKey(this, CFSTR("meta")))
  {
    v8 = 0;
    goto LABEL_18;
  }
  cva::DictionaryHandler::item(this, CFSTR("meta"));
  cva::ItemHandler::getDictionary((cva::ItemHandler *)buf);
  cva::ItemHandler::~ItemHandler((cva::ItemHandler *)buf);
  if (!cva::DictionaryHandler::hasKey(v108[0], CFSTR("version")))
    goto LABEL_13;
  cva::DictionaryHandler::item(v108[0], CFSTR("version"));
  cva::ItemHandler::getVector<unsigned int>();
  v6 = v118;
  if ((_DWORD)v118 == 3)
  {
    v104 = **(_QWORD **)buf;
    v7 = *(_DWORD *)(*(_QWORD *)buf + 8);
  }
  else
  {
    v7 = 0;
    v104 = 0;
  }
  free(*(void **)buf);
  cva::ItemHandler::~ItemHandler((cva::ItemHandler *)&v115);
  if (v6 == 3)
  {
    *(_QWORD *)v5 = v104;
    *(_DWORD *)(v5 + 8) = v7;
    v8 = 1;
    v9 = (std::__shared_weak_count *)v108[1];
    if (!v108[1])
      goto LABEL_18;
  }
  else
  {
LABEL_13:
    v8 = 0;
    v9 = (std::__shared_weak_count *)v108[1];
    if (!v108[1])
      goto LABEL_18;
  }
  p_shared_owners = (unint64_t *)&v9->__shared_owners_;
  do
    v11 = __ldaxr(p_shared_owners);
  while (__stlxr(v11 - 1, p_shared_owners));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
LABEL_18:
  hasKey = cva::DictionaryHandler::hasKey(this, CFSTR("timestamp_seconds"));
  if (hasKey)
  {
    cva::DictionaryHandler::item(this, CFSTR("timestamp_seconds"));
    cva::ItemHandler::getValue<double>();
    *(_QWORD *)(v5 + 16) = v13;
    cva::ItemHandler::~ItemHandler((cva::ItemHandler *)buf);
  }
  if (cva::DictionaryHandler::hasKey(this, CFSTR("rgb_camera")))
  {
    cva::DictionaryHandler::item(this, CFSTR("rgb_camera"));
    cva::ItemHandler::getDictionary((cva::ItemHandler *)buf);
    cva::ItemHandler::~ItemHandler((cva::ItemHandler *)buf);
    v119 = 0;
    *(_OWORD *)buf = 0u;
    v118 = 0u;
    LODWORD(v110) = 0;
    *(_OWORD *)v108 = 0u;
    v109 = 0u;
    v107 = 0;
    v106 = 0;
    v14 = sub_1C98E6630(v115, buf, v108, &v106);
    if (v14)
    {
      v15 = v118;
      *(_OWORD *)(v5 + 72) = *(_OWORD *)buf;
      *(_OWORD *)(v5 + 88) = v15;
      *(_DWORD *)(v5 + 104) = v119;
      *(_OWORD *)(v5 + 24) = *(_OWORD *)v108;
      *(_OWORD *)(v5 + 40) = v109;
      *(_DWORD *)(v5 + 56) = v110;
      *(_QWORD *)(v5 + 60) = v106;
      *(_DWORD *)(v5 + 68) = v107;
    }
    v16 = v116;
    if (v116)
    {
      v17 = (unint64_t *)&v116->__shared_owners_;
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
  }
  else
  {
    v14 = 0;
  }
  v19 = hasKey & v8 & v14;
  v20 = (_DWORD *)(v5 + 108);
  if ((cva::DictionaryHandler::hasKey(this, CFSTR("data_failure")) & 1) == 0)
  {
    *(_BYTE *)(v5 + 112) = 0;
    *v20 = 0;
    if (!v19)
      goto LABEL_179;
    goto LABEL_46;
  }
  cva::DictionaryHandler::item(this, CFSTR("data_failure"));
  cva::ItemHandler::getDictionary((cva::ItemHandler *)buf);
  cva::ItemHandler::~ItemHandler((cva::ItemHandler *)buf);
  v21 = cva::DictionaryHandler::hasKey(v108[0], CFSTR("image_too_dark"));
  *(_BYTE *)v20 = v21;
  if ((v21 & 1) != 0)
  {
    cva::DictionaryHandler::item(v108[0], CFSTR("image_too_dark"));
    *(_BYTE *)(v5 + 109) = cva::ItemHandler::getValue<BOOL>();
    cva::ItemHandler::~ItemHandler((cva::ItemHandler *)buf);
  }
  else
  {
    *(_BYTE *)(v5 + 109) = 0;
  }
  v22 = cva::DictionaryHandler::hasKey(v108[0], CFSTR("sensor_covered"));
  *(_BYTE *)(v5 + 110) = v22;
  if ((v22 & 1) != 0)
  {
    cva::DictionaryHandler::item(v108[0], CFSTR("sensor_covered"));
    *(_BYTE *)(v5 + 111) = cva::ItemHandler::getValue<BOOL>();
    cva::ItemHandler::~ItemHandler((cva::ItemHandler *)buf);
  }
  else
  {
    *(_BYTE *)(v5 + 111) = 0;
  }
  if ((cva::DictionaryHandler::hasKey(v108[0], CFSTR("timestamp_gap")) & 1) == 0)
  {
    *(_BYTE *)(v5 + 112) = 0;
    v23 = (std::__shared_weak_count *)v108[1];
    if (!v108[1])
      goto LABEL_45;
LABEL_42:
    v24 = (unint64_t *)&v23->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
      if (!v19)
        goto LABEL_179;
      goto LABEL_46;
    }
    goto LABEL_45;
  }
  cva::DictionaryHandler::item(v108[0], CFSTR("timestamp_gap"));
  *(_BYTE *)(v5 + 112) = cva::ItemHandler::getValue<BOOL>();
  cva::ItemHandler::~ItemHandler((cva::ItemHandler *)buf);
  v23 = (std::__shared_weak_count *)v108[1];
  if (v108[1])
    goto LABEL_42;
LABEL_45:
  if (!v19)
    goto LABEL_179;
LABEL_46:
  if (!cva::DictionaryHandler::hasKey(this, CFSTR("tracked_faces")))
  {
    v26 = 0;
LABEL_54:
    *(_DWORD *)(v5 + 116) = 0;
    *(_BYTE *)(v5 + 252) = 0;
    v31 = 1;
    if (v26)
      goto LABEL_173;
LABEL_176:
    if (!v31)
      goto LABEL_179;
    return 1;
  }
  cva::DictionaryHandler::item(this, CFSTR("tracked_faces"));
  cva::ItemHandler::getArray((cva::ItemHandler *)v108);
  v27 = *(cva::ArrayHandler **)buf;
  v26 = *(std::__shared_weak_count **)&buf[8];
  memset(buf, 0, sizeof(buf));
  cva::ItemHandler::~ItemHandler((cva::ItemHandler *)v108);
  if (!v27)
    goto LABEL_54;
  v28 = cva::ArrayHandler::size(v27);
  *(_DWORD *)(v5 + 116) = v28;
  if (v28 >= 2)
  {
    v29 = atomic_load((unsigned __int8 *)&qword_1ED52ACD0);
    if ((v29 & 1) == 0 && __cxa_guard_acquire(&qword_1ED52ACD0))
    {
      qword_1ED52ACE0 = (uint64_t)os_log_create("com.apple.AppleCVA", "FaceKit");
      __cxa_guard_release(&qword_1ED52ACD0);
    }
    v30 = qword_1ED52ACE0;
    if (os_log_type_enabled((os_log_t)qword_1ED52ACE0, OS_LOG_TYPE_DEBUG))
    {
      v96 = *(_DWORD *)(v5 + 116);
      *(_DWORD *)buf = 67109376;
      *(_DWORD *)&buf[4] = v96;
      *(_WORD *)&buf[8] = 1024;
      *(_DWORD *)&buf[10] = 1;
      _os_log_debug_impl(&dword_1C9870000, v30, OS_LOG_TYPE_DEBUG, "Reducing number of tracked faces: %u to %u", buf, 0xEu);
    }
    *(_DWORD *)(v5 + 116) = 1;
    *(_BYTE *)(v5 + 252) = 0;
    goto LABEL_59;
  }
  *(_BYTE *)(v5 + 252) = 0;
  if (!v28)
  {
    v31 = 1;
    if (v26)
      goto LABEL_173;
    goto LABEL_176;
  }
LABEL_59:
  v102 = v26;
  v103 = v3;
  v32 = 0;
  v33 = 1;
  v105 = v27;
  do
  {
    cva::ArrayHandler::item(v27);
    cva::ItemHandler::getDictionary((cva::ItemHandler *)v108);
    v34 = *(cva::DictionaryHandler **)buf;
    v35 = *(std::__shared_weak_count **)&buf[8];
    memset(buf, 0, sizeof(buf));
    cva::ItemHandler::~ItemHandler((cva::ItemHandler *)v108);
    if (!v34)
    {
      v40 = 1;
      if (!v35)
        goto LABEL_121;
      goto LABEL_117;
    }
    v36 = cva::DictionaryHandler::hasKey(v34, CFSTR("confidence"));
    if (v36)
    {
      cva::DictionaryHandler::item(v34, CFSTR("confidence"));
      cva::ItemHandler::getValue<float>();
      *(_DWORD *)(v5 + 108 * v32 + 120) = v37;
      cva::ItemHandler::~ItemHandler((cva::ItemHandler *)buf);
    }
    v38 = cva::DictionaryHandler::hasKey(v34, CFSTR("failure_type"));
    if (v38)
    {
      cva::DictionaryHandler::item(v34, CFSTR("failure_type"));
      v39 = cva::ItemHandler::getValue<int>();
      cva::ItemHandler::~ItemHandler((cva::ItemHandler *)buf);
    }
    else
    {
      v39 = 0;
    }
    v41 = v5 + 108 * v32;
    *(_DWORD *)(v41 + 124) = v39;
    v42 = (_DWORD *)(v41 + 124);
    v43 = cva::DictionaryHandler::hasKey(v34, CFSTR("exceeded_default_thresholds_mask"));
    if (v43)
    {
      cva::DictionaryHandler::item(v34, CFSTR("exceeded_default_thresholds_mask"));
      v44 = cva::ItemHandler::getValue<unsigned int>();
      cva::ItemHandler::~ItemHandler((cva::ItemHandler *)buf);
    }
    else
    {
      v44 = 0;
    }
    v45 = v33 & v36 & v38 & v43;
    v46 = v5 + 108 * v32;
    *(_BYTE *)(v46 + 224) = v44 & 1;
    *(_BYTE *)(v46 + 225) = (v44 & 2) != 0;
    if (*v42)
    {
      v27 = v105;
LABEL_115:
      v40 = v45 == 0;
      goto LABEL_116;
    }
    cva::DictionaryHandler::item(v34, CFSTR("raw_data"));
    cva::ItemHandler::getDictionary((cva::ItemHandler *)v108);
    v48 = *(cva::DictionaryHandler **)buf;
    v47 = *(std::__shared_weak_count **)&buf[8];
    memset(buf, 0, sizeof(buf));
    cva::ItemHandler::~ItemHandler((cva::ItemHandler *)v108);
    cva::DictionaryHandler::item(v34, CFSTR("smooth_data"));
    cva::ItemHandler::getDictionary((cva::ItemHandler *)v108);
    v50 = *(cva::DictionaryHandler **)buf;
    v49 = *(std::__shared_weak_count **)&buf[8];
    memset(buf, 0, sizeof(buf));
    cva::ItemHandler::~ItemHandler((cva::ItemHandler *)v108);
    if (v48)
      v51 = v50 == 0;
    else
      v51 = 1;
    v52 = !v51;
    if (!v51)
    {
      v53 = v5 + 108 * v32;
      v54 = sub_1C98F9620(v48, v53 + 128);
      v45 &= v54 & sub_1C98F9620(v50, v53 + 176);
      if (!v32)
      {
        v55 = *(cva::DictionaryHandler **)(v5 + 16);
        *(_BYTE *)(v5 + 252) = 0;
        LODWORD(v56) = 0;
        if (!cva::DictionaryHandler::hasKey(v50, CFSTR("animation")))
        {
LABEL_105:
          v45 &= v56;
          goto LABEL_106;
        }
        cva::DictionaryHandler::item(v50, CFSTR("animation"));
        cva::ItemHandler::getDictionary((cva::ItemHandler *)v108);
        v56 = *(cva::DictionaryHandler **)buf;
        v57 = *(std::__shared_weak_count **)&buf[8];
        memset(buf, 0, sizeof(buf));
        cva::ItemHandler::~ItemHandler((cva::ItemHandler *)v108);
        if (!v56)
        {
LABEL_100:
          if (v57)
          {
            v68 = (unint64_t *)&v57->__shared_owners_;
            do
              v69 = __ldaxr(v68);
            while (__stlxr(v69 - 1, v68));
            if (!v69)
            {
              ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
              std::__shared_weak_count::__release_weak(v57);
            }
          }
          goto LABEL_105;
        }
        v101 = v57;
        if (!cva::DictionaryHandler::hasKey(v56, CFSTR("blendshapes"))
          || (cva::DictionaryHandler::item(v56, CFSTR("blendshapes")),
              Data = (const __CFData *)cva::ItemHandler::getData((cva::ItemHandler *)buf),
              cva::ItemHandler::~ItemHandler((cva::ItemHandler *)buf),
              CFDataGetLength(Data) != 204)
          || (BytePtr = (cva::ArrayHandler *)CFDataGetBytePtr(Data),
              v108[0] = v55,
              !cva::DictionaryHandler::hasKey(v56, CFSTR("tongue_out"))))
        {
          LODWORD(v56) = 0;
          goto LABEL_99;
        }
        cva::DictionaryHandler::item(v56, CFSTR("tongue_out"));
        cva::ItemHandler::getValue<float>();
        v113 = v59;
        cva::ItemHandler::~ItemHandler((cva::ItemHandler *)buf);
        v108[1] = *(cva::DictionaryHandler **)BytePtr;
        v109 = *(_OWORD *)((char *)BytePtr + 68);
        v110 = *((_QWORD *)BytePtr + 15);
        v111 = *((_DWORD *)BytePtr + 40);
        *(_QWORD *)&v60 = *((_QWORD *)BytePtr + 21);
        *((_QWORD *)&v60 + 1) = *((_QWORD *)BytePtr + 23);
        v112 = v60;
        v61 = atomic_load((unsigned __int8 *)&qword_1EF921330);
        if ((v61 & 1) == 0 && __cxa_guard_acquire(&qword_1EF921330))
        {
          v78 = atomic_load((unsigned __int8 *)&qword_1ED52AD70);
          if ((v78 & 1) == 0 && __cxa_guard_acquire(&qword_1ED52AD70))
          {
            sub_1C98DBEA8((cva::ArrayHandler **)buf);
            qword_1ED52AD90 = *(_QWORD *)buf;
            qword_1ED52AD98 = *(_QWORD *)&buf[8];
            __cxa_guard_release(&qword_1ED52AD70);
          }
          v100 = (cva::ArrayHandler *)qword_1ED52AD90;
          v97 = (std::__shared_weak_count *)qword_1ED52AD98;
          if (qword_1ED52AD98)
          {
            v79 = (unint64_t *)(qword_1ED52AD98 + 8);
            do
              v80 = __ldxr(v79);
            while (__stxr(v80 + 1, v79));
          }
          v98 = cva::ArrayHandler::size(v100);
          if (v98 < 1)
          {
LABEL_156:
            sub_1C99072C4(&v115);
            sub_1C9907EC4(buf, &v115, 0, 0, "[RELEASE ERROR  ]", "/Library/Caches/com.apple.xbs/Sources/AppleCVA/shared/src/modules/avatar/facekit/facekitlitefilter.cpp", 190, "assert %s failed. missing landmark%s", (char)"false");
            sub_1C9909318((uint64_t)buf);
            v88 = v116;
            if (v116)
            {
              v89 = (unint64_t *)&v116->__shared_owners_;
              do
                v90 = __ldaxr(v89);
              while (__stlxr(v90 - 1, v89));
              if (!v90)
              {
                ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
                std::__shared_weak_count::__release_weak(v88);
              }
            }
            v81 = 0x80000000;
          }
          else
          {
            v81 = 0;
            while (1)
            {
              cva::ArrayHandler::item(v100);
              cva::ItemHandler::getValue<std::string>();
              v82 = BYTE7(v118);
              if (SBYTE7(v118) < 0)
                v82 = *(_QWORD *)&buf[8];
              if (v82 == 14)
              {
                v83 = *(uint8_t **)buf;
                if ((SBYTE7(v118) & 0x80u) == 0)
                  v83 = buf;
                v84 = *(_QWORD *)v83;
                v85 = *(_QWORD *)(v83 + 6);
                v86 = v84 == 0x6573614265736F4ELL && v85 == 0x7265746E65436573;
                v87 = v86;
              }
              else
              {
                v87 = 0;
              }
              if (SBYTE7(v118) < 0)
                operator delete(*(void **)buf);
              cva::ItemHandler::~ItemHandler((cva::ItemHandler *)&v115);
              if (v87)
                break;
              if (v98 == ++v81)
                goto LABEL_156;
            }
          }
          if (v97)
          {
            v91 = (unint64_t *)&v97->__shared_owners_;
            do
              v92 = __ldaxr(v91);
            while (__stlxr(v92 - 1, v91));
            if (!v92)
            {
              ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
              std::__shared_weak_count::__release_weak(v97);
            }
          }
          dword_1EF921328 = v81;
          __cxa_guard_release(&qword_1EF921330);
        }
        v62 = dword_1EF921328;
        if (!cva::DictionaryHandler::hasKey(v50, CFSTR("geometry")))
        {
LABEL_128:
          v76 = atomic_load((unsigned __int8 *)&qword_1ED52ACD0);
          if ((v76 & 1) == 0 && __cxa_guard_acquire(&qword_1ED52ACD0))
          {
            qword_1ED52ACE0 = (uint64_t)os_log_create("com.apple.AppleCVA", "FaceKit");
            __cxa_guard_release(&qword_1ED52ACD0);
          }
          v77 = qword_1ED52ACE0;
          LODWORD(v56) = 0;
          v57 = v101;
          if (os_log_type_enabled((os_log_t)qword_1ED52ACE0, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)buf = 0;
            _os_log_impl(&dword_1C9870000, v77, OS_LOG_TYPE_DEFAULT, "Missing landmark", buf, 2u);
            LODWORD(v56) = 0;
          }
          goto LABEL_100;
        }
        cva::DictionaryHandler::item(v50, CFSTR("geometry"));
        cva::ItemHandler::getDictionary((cva::ItemHandler *)&v115);
        cva::ItemHandler::~ItemHandler((cva::ItemHandler *)&v115);
        if (*(_QWORD *)buf
          && cva::DictionaryHandler::hasKey(*(cva::DictionaryHandler **)buf, CFSTR("landmarks"))
          && (cva::DictionaryHandler::item(*(cva::DictionaryHandler **)buf, CFSTR("landmarks")),
              v63 = (const __CFData *)cva::ItemHandler::getData((cva::ItemHandler *)&v115),
              cva::ItemHandler::~ItemHandler((cva::ItemHandler *)&v115),
              8 * v62 + 8 <= (int)CFDataGetLength(v63)))
        {
          v114 = *(_QWORD *)&CFDataGetBytePtr(v63)[8 * v62];
          v64 = 1;
          v65 = *(std::__shared_weak_count **)&buf[8];
          if (!*(_QWORD *)&buf[8])
            goto LABEL_96;
        }
        else
        {
          v64 = 0;
          v65 = *(std::__shared_weak_count **)&buf[8];
          if (!*(_QWORD *)&buf[8])
            goto LABEL_96;
        }
        v66 = (unint64_t *)&v65->__shared_owners_;
        do
          v67 = __ldaxr(v66);
        while (__stlxr(v67 - 1, v66));
        if (!v67)
        {
          ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
          std::__shared_weak_count::__release_weak(v65);
        }
LABEL_96:
        if ((v64 & 1) != 0)
        {
          sub_1C98E264C((void ***)(v5 + 272), (uint64_t)v108, v5 + 232);
          LODWORD(v56) = 1;
LABEL_99:
          v57 = v101;
          goto LABEL_100;
        }
        goto LABEL_128;
      }
    }
LABEL_106:
    v27 = v105;
    if (!v49)
      goto LABEL_110;
    v70 = (unint64_t *)&v49->__shared_owners_;
    do
      v71 = __ldaxr(v70);
    while (__stlxr(v71 - 1, v70));
    if (!v71)
    {
      ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
      std::__shared_weak_count::__release_weak(v49);
      if (!v47)
        goto LABEL_114;
    }
    else
    {
LABEL_110:
      if (!v47)
        goto LABEL_114;
    }
    v72 = (unint64_t *)&v47->__shared_owners_;
    do
      v73 = __ldaxr(v72);
    while (__stlxr(v73 - 1, v72));
    if (v73)
    {
LABEL_114:
      if (v52)
        goto LABEL_115;
      goto LABEL_127;
    }
    ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
    std::__shared_weak_count::__release_weak(v47);
    if (v52)
      goto LABEL_115;
LABEL_127:
    v40 = 1;
LABEL_116:
    v33 = v45 != 0;
    if (!v35)
      goto LABEL_121;
LABEL_117:
    v74 = (unint64_t *)&v35->__shared_owners_;
    do
      v75 = __ldaxr(v74);
    while (__stlxr(v75 - 1, v74));
    if (!v75)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
LABEL_121:
    v31 = !v40;
    if (v40)
      goto LABEL_172;
    ++v32;
  }
  while (v32 < *(unsigned int *)(v5 + 116));
  v31 = 1;
LABEL_172:
  v26 = v102;
  v3 = v103;
  if (!v102)
    goto LABEL_176;
LABEL_173:
  v93 = (unint64_t *)&v26->__shared_owners_;
  do
    v94 = __ldaxr(v93);
  while (__stlxr(v94 - 1, v93));
  if (v94)
    goto LABEL_176;
  ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
  std::__shared_weak_count::__release_weak(v26);
  if (v31)
    return 1;
LABEL_179:
  result = 0;
  if (*(_BYTE *)(*v3 + 264))
    *(_BYTE *)(*v3 + 264) = 0;
  return result;
}

id sub_1C98FA5AC(void *a1)
{
  id v1;
  id v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  id v8;
  unsigned __int8 v9;
  NSObject *v10;
  uint64_t v11;
  uint8_t v13[16];
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  _BYTE v18[128];
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = objc_alloc_init(MEMORY[0x1E0C99E08]);
  v16 = 0u;
  v17 = 0u;
  v14 = 0u;
  v15 = 0u;
  objc_msgSend(v1, "allKeys");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
  if (v4)
  {
    v5 = *(_QWORD *)v15;
    do
    {
      v6 = 0;
      do
      {
        if (*(_QWORD *)v15 != v5)
          objc_enumerationMutation(v3);
        v7 = *(void **)(*((_QWORD *)&v14 + 1) + 8 * v6);
        if (objc_msgSend(v7, "isEqualToString:", CFSTR("animation")))
        {
          objc_msgSend(v1, "objectForKeyedSubscript:", CFSTR("animation"));
          v8 = (id)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v2, "setObject:forKeyedSubscript:", v8, CFSTR("animation"));
LABEL_12:

          goto LABEL_13;
        }
        if (objc_msgSend(v7, "isEqualToString:", CFSTR("pose")))
        {
          objc_msgSend(v1, "objectForKeyedSubscript:", CFSTR("pose"));
          v8 = (id)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v2, "setObject:forKeyedSubscript:", v8, CFSTR("pose"));
          goto LABEL_12;
        }
        if (objc_msgSend(v7, "isEqualToString:", CFSTR("geometry")))
        {
          objc_msgSend(v1, "objectForKeyedSubscript:", CFSTR("geometry"));
          v8 = (id)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v2, "setObject:forKeyedSubscript:", v8, CFSTR("geometry"));
          goto LABEL_12;
        }
        v9 = atomic_load((unsigned __int8 *)&qword_1ED52ACD0);
        if ((v9 & 1) == 0 && __cxa_guard_acquire(&qword_1ED52ACD0))
        {
          qword_1ED52ACE0 = (uint64_t)os_log_create("com.apple.AppleCVA", "FaceKit");
          __cxa_guard_release(&qword_1ED52ACD0);
        }
        v10 = (id)qword_1ED52ACE0;
        if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)v13 = 0;
          _os_log_error_impl(&dword_1C9870000, v10, OS_LOG_TYPE_ERROR, "data dictionary contains invalid data", v13, 2u);
        }

        objc_msgSend(v1, "objectForKeyedSubscript:", v7);
        v8 = (id)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v2, "setObject:forKeyedSubscript:", v8, v7);
LABEL_13:

        ++v6;
      }
      while (v4 != v6);
      v11 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
      v4 = v11;
    }
    while (v11);
  }

  return v2;
}

void sub_1C98FA85C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1C98FA8D0(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E8295DB0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1C98FA8E0(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E8295DB0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1CAA44AFCLL);
}

void sub_1C98FA910(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  void *v4;

  v1 = *(_QWORD *)(a1 + 24);
  if (v1)
  {
    v3 = *(_QWORD *)(a1 + 32);
    v4 = *(void **)(a1 + 24);
    if (v3 != v1)
    {
      do
      {
        if (*(char *)(v3 - 1) < 0)
          operator delete(*(void **)(v3 - 24));
        v3 -= 24;
      }
      while (v3 != v1);
      v4 = *(void **)(a1 + 24);
    }
    *(_QWORD *)(a1 + 32) = v1;
    operator delete(v4);
  }
}

void sub_1C98FA98C(char **a1, unint64_t a2)
{
  char *v4;
  char *v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;
  size_t v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  uint64_t v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;
  __int128 v44;
  __int128 v45;
  char *v46;
  __int128 v47;
  char *v48;
  __int128 v49;
  char *v50;
  __int128 v51;
  char *v52;
  __int128 v53;
  uint64_t v54;
  __int128 v55;
  __int128 v56;
  uint64_t v57;
  uint64_t v58;

  v5 = a1[1];
  v4 = a1[2];
  if (0x7E3F1F8FC7E3F1F9 * ((v4 - v5) >> 4) >= a2)
  {
    if (a2)
    {
      v12 = 1168 * ((1168 * a2 - 1168) / 0x490) + 1168;
      bzero(a1[1], v12);
      v5 += v12;
    }
    a1[1] = v5;
  }
  else
  {
    v6 = *a1;
    v7 = 0x7E3F1F8FC7E3F1F9 * ((v5 - *a1) >> 4);
    v8 = v7 + a2;
    if (v7 + a2 > 0x381C0E070381C0)
      abort();
    v9 = 0x7E3F1F8FC7E3F1F9 * ((v4 - v6) >> 4);
    if (2 * v9 > v8)
      v8 = 2 * v9;
    if (v9 >= 0x1C0E070381C0E0)
      v10 = 0x381C0E070381C0;
    else
      v10 = v8;
    if (v10)
    {
      if (v10 > 0x381C0E070381C0)
        sub_1C9899D30();
      v11 = (char *)operator new(1168 * v10);
    }
    else
    {
      v11 = 0;
    }
    v13 = &v11[1168 * v7];
    v14 = &v11[1168 * v10];
    v15 = 1168 * ((1168 * a2 - 1168) / 0x490) + 1168;
    bzero(v13, v15);
    v16 = &v13[v15];
    if (v5 == v6)
    {
      *a1 = v13;
      a1[1] = v16;
      a1[2] = v14;
      if (v5)
LABEL_73:
        operator delete(v5);
    }
    else
    {
      do
      {
        v17 = v13 - 1168;
        v18 = v5 - 1168;
        *(v13 - 1168) = 0;
        *(v13 - 1144) = 0;
        if (*(v5 - 1144))
        {
          *(_QWORD *)v17 = 0;
          *((_QWORD *)v13 - 145) = 0;
          v19 = *((_QWORD *)v5 - 145);
          *(_QWORD *)v17 = *(_QWORD *)v18;
          *((_QWORD *)v13 - 145) = v19;
          *(_QWORD *)v18 = 0;
          *((_QWORD *)v5 - 145) = 0;
          *((_DWORD *)v13 - 288) = *((_DWORD *)v5 - 288);
          *((_DWORD *)v5 - 288) = 0;
          *(v13 - 1144) = 1;
        }
        *(v13 - 1136) = 0;
        v20 = v13 - 1136;
        *(v13 - 1112) = 0;
        if (*(v5 - 1112))
        {
          *(_QWORD *)v20 = 0;
          *((_QWORD *)v13 - 141) = 0;
          v21 = *((_QWORD *)v5 - 141);
          *(_QWORD *)v20 = *((_QWORD *)v5 - 142);
          *((_QWORD *)v13 - 141) = v21;
          *((_QWORD *)v5 - 142) = 0;
          *((_QWORD *)v5 - 141) = 0;
          *((_DWORD *)v13 - 280) = *((_DWORD *)v5 - 280);
          *((_DWORD *)v5 - 280) = 0;
          *(v13 - 1112) = 1;
        }
        *(v13 - 1104) = 0;
        v22 = v13 - 1104;
        *(v13 - 1080) = 0;
        if (*(v5 - 1080))
        {
          *(_QWORD *)v22 = 0;
          *((_QWORD *)v13 - 137) = 0;
          v23 = *((_QWORD *)v5 - 137);
          *(_QWORD *)v22 = *((_QWORD *)v5 - 138);
          *((_QWORD *)v13 - 137) = v23;
          *((_QWORD *)v5 - 138) = 0;
          *((_QWORD *)v5 - 137) = 0;
          *((_DWORD *)v13 - 272) = *((_DWORD *)v5 - 272);
          *((_DWORD *)v5 - 272) = 0;
          *(v13 - 1080) = 1;
        }
        *(v13 - 1072) = 0;
        *(v13 - 1048) = 0;
        if (*(v5 - 1048))
        {
          v24 = *((_OWORD *)v5 - 67);
          *((_QWORD *)v13 - 132) = *((_QWORD *)v5 - 132);
          *((_OWORD *)v13 - 67) = v24;
          *((_QWORD *)v5 - 133) = 0;
          *((_QWORD *)v5 - 132) = 0;
          *((_QWORD *)v5 - 134) = 0;
          *(v13 - 1048) = 1;
        }
        v25 = *((_OWORD *)v5 - 65);
        v26 = *((_OWORD *)v5 - 64);
        v27 = *(_OWORD *)(v5 - 1015);
        *(v13 - 992) = 0;
        *(_OWORD *)(v13 - 1015) = v27;
        *((_OWORD *)v13 - 65) = v25;
        *((_OWORD *)v13 - 64) = v26;
        *(v13 - 968) = 0;
        if (*(v5 - 968))
        {
          v28 = *((_OWORD *)v5 - 62);
          *((_QWORD *)v13 - 122) = *((_QWORD *)v5 - 122);
          *((_OWORD *)v13 - 62) = v28;
          *((_QWORD *)v5 - 123) = 0;
          *((_QWORD *)v5 - 122) = 0;
          *((_QWORD *)v5 - 124) = 0;
          *(v13 - 968) = 1;
        }
        *(v13 - 960) = 0;
        *(v13 - 912) = 0;
        if (*(v5 - 912))
        {
          v29 = *((_OWORD *)v5 - 60);
          v30 = *((_OWORD *)v5 - 59);
          *((_DWORD *)v13 - 232) = *((_DWORD *)v5 - 232);
          *((_OWORD *)v13 - 60) = v29;
          *((_OWORD *)v13 - 59) = v30;
          v31 = *(_QWORD *)(v5 - 924);
          *((_DWORD *)v13 - 229) = *((_DWORD *)v5 - 229);
          *(_QWORD *)(v13 - 924) = v31;
          *(v13 - 912) = 1;
        }
        *(v13 - 904) = 0;
        *(v13 - 880) = 0;
        if (*(v5 - 880))
        {
          *((_QWORD *)v13 - 113) = 0;
          *((_QWORD *)v13 - 112) = 0;
          v32 = *((_QWORD *)v5 - 112);
          *((_QWORD *)v13 - 113) = *((_QWORD *)v5 - 113);
          *((_QWORD *)v13 - 112) = v32;
          *((_QWORD *)v5 - 113) = 0;
          *((_QWORD *)v5 - 112) = 0;
          *((_DWORD *)v13 - 222) = *((_DWORD *)v5 - 222);
          *((_DWORD *)v5 - 222) = 0;
          *(v13 - 880) = 1;
        }
        *(v13 - 872) = 0;
        *(v13 - 860) = 0;
        if (*(v5 - 860))
        {
          v33 = *((_QWORD *)v5 - 109);
          *((_DWORD *)v13 - 216) = *((_DWORD *)v5 - 216);
          *((_QWORD *)v13 - 109) = v33;
          *(v13 - 860) = 1;
        }
        v34 = v13 - 856;
        v35 = *(_OWORD *)(v5 - 840);
        *(_OWORD *)v34 = *(_OWORD *)(v5 - 856);
        *((_OWORD *)v34 + 1) = v35;
        v36 = *(_OWORD *)(v5 - 824);
        v37 = *(_OWORD *)(v5 - 808);
        v38 = *(_OWORD *)(v5 - 792);
        *(_QWORD *)(v34 + 77) = *(_QWORD *)(v5 - 779);
        *((_OWORD *)v34 + 3) = v37;
        *((_OWORD *)v34 + 4) = v38;
        *((_OWORD *)v34 + 2) = v36;
        *(v13 - 768) = 0;
        *(v13 - 756) = 0;
        if (*(v5 - 756))
        {
          v39 = *((_QWORD *)v5 - 96);
          *((_DWORD *)v13 - 190) = *((_DWORD *)v5 - 190);
          *((_QWORD *)v13 - 96) = v39;
          *(v13 - 756) = 1;
        }
        *(v13 - 752) = 0;
        *(v13 - 740) = 0;
        if (*(v5 - 740))
        {
          v40 = *((_QWORD *)v5 - 94);
          *((_DWORD *)v13 - 186) = *((_DWORD *)v5 - 186);
          *((_QWORD *)v13 - 94) = v40;
          *(v13 - 740) = 1;
        }
        *(v13 - 736) = 0;
        *(v13 - 688) = 0;
        if (*(v5 - 688))
        {
          v41 = *((_OWORD *)v5 - 46);
          v42 = *((_OWORD *)v5 - 44);
          *((_OWORD *)v13 - 45) = *((_OWORD *)v5 - 45);
          *((_OWORD *)v13 - 44) = v42;
          *((_OWORD *)v13 - 46) = v41;
          *(v13 - 688) = 1;
        }
        *(v13 - 680) = 0;
        *(v13 - 656) = 0;
        if (*(v5 - 656))
        {
          *((_QWORD *)v13 - 85) = 0;
          *((_QWORD *)v13 - 84) = 0;
          v43 = *((_QWORD *)v5 - 84);
          *((_QWORD *)v13 - 85) = *((_QWORD *)v5 - 85);
          *((_QWORD *)v13 - 84) = v43;
          *((_QWORD *)v5 - 85) = 0;
          *((_QWORD *)v5 - 84) = 0;
          *((_DWORD *)v13 - 166) = *((_DWORD *)v5 - 166);
          *((_DWORD *)v5 - 166) = 0;
          *(v13 - 656) = 1;
        }
        *((_QWORD *)v13 - 81) = *((_QWORD *)v5 - 81);
        *(v13 - 640) = 0;
        *(v13 - 616) = 0;
        if (*(v5 - 616))
        {
          v44 = *((_OWORD *)v5 - 40);
          *((_QWORD *)v13 - 78) = *((_QWORD *)v5 - 78);
          *((_OWORD *)v13 - 40) = v44;
          *((_QWORD *)v5 - 78) = 0;
          *((_QWORD *)v5 - 79) = 0;
          *((_QWORD *)v5 - 80) = 0;
          *(v13 - 616) = 1;
        }
        *((_OWORD *)v13 - 38) = *((_OWORD *)v5 - 38);
        *((_OWORD *)v5 - 38) = 0u;
        *(v13 - 592) = 0;
        *(v13 - 568) = 0;
        if (*(v5 - 568))
        {
          v45 = *((_OWORD *)v5 - 37);
          *((_QWORD *)v13 - 72) = *((_QWORD *)v5 - 72);
          *((_OWORD *)v13 - 37) = v45;
          *((_QWORD *)v5 - 72) = 0;
          *((_QWORD *)v5 - 73) = 0;
          *((_QWORD *)v5 - 74) = 0;
          *(v13 - 568) = 1;
        }
        *((_OWORD *)v13 - 35) = *((_OWORD *)v5 - 35);
        *((_OWORD *)v5 - 35) = 0u;
        *((_OWORD *)v13 - 34) = *((_OWORD *)v5 - 34);
        *((_OWORD *)v5 - 34) = 0u;
        *(v13 - 528) = 0;
        *(v13 - 480) = 0;
        if (*(v5 - 480))
        {
          *((_DWORD *)v13 - 132) = *((_DWORD *)v5 - 132);
          v46 = v13 - 528;
          *(_QWORD *)(v46 + 4) = *(_QWORD *)(v5 - 524);
          *(_QWORD *)(v46 + 12) = *(_QWORD *)(v5 - 516);
          v47 = *(_OWORD *)(v5 - 508);
          *((_OWORD *)v13 - 31) = *((_OWORD *)v5 - 31);
          *(_OWORD *)(v46 + 20) = v47;
          *(v13 - 480) = 1;
        }
        *(v13 - 472) = 0;
        *(v13 - 424) = 0;
        if (*(v5 - 424))
        {
          *((_DWORD *)v13 - 118) = *((_DWORD *)v5 - 118);
          v48 = v13 - 528;
          *(_QWORD *)(v48 + 60) = *(_QWORD *)(v5 - 468);
          *(_QWORD *)(v48 + 68) = *(_QWORD *)(v5 - 460);
          v49 = *(_OWORD *)(v5 - 452);
          *(_OWORD *)(v48 + 88) = *(_OWORD *)(v5 - 440);
          *(_OWORD *)(v48 + 76) = v49;
          *(v13 - 424) = 1;
        }
        *(v13 - 416) = 0;
        *(v13 - 408) = 0;
        if (*(v5 - 408))
        {
          sub_1C990AD90((uint64_t *)v13 - 52, (uint64_t *)v5 - 52);
          *(v13 - 408) = 1;
        }
        *(v13 - 400) = 0;
        *(v13 - 376) = 0;
        if (*(v5 - 376))
        {
          *((_QWORD *)v13 - 50) = 0;
          *((_QWORD *)v13 - 49) = 0;
          *((_QWORD *)v13 - 50) = *((_QWORD *)v5 - 50);
          *((_QWORD *)v5 - 50) = 0;
          *((_QWORD *)v13 - 49) = *((_QWORD *)v5 - 49);
          *((_QWORD *)v5 - 49) = 0;
          *((_DWORD *)v13 - 96) = *((_DWORD *)v5 - 96);
          *((_DWORD *)v5 - 96) = 0;
          *(v13 - 376) = 1;
        }
        *((_OWORD *)v13 - 23) = *((_OWORD *)v5 - 23);
        *((_QWORD *)v5 - 45) = 0;
        *((_QWORD *)v5 - 46) = 0;
        *(v13 - 352) = 0;
        *(v13 - 304) = 0;
        if (*(v5 - 304))
        {
          *((_DWORD *)v13 - 88) = *((_DWORD *)v5 - 88);
          v50 = v13 - 528;
          *(_QWORD *)(v50 + 180) = *(_QWORD *)(v5 - 348);
          *(_QWORD *)(v50 + 188) = *(_QWORD *)(v5 - 340);
          v51 = *(_OWORD *)(v5 - 332);
          *((_OWORD *)v13 - 20) = *((_OWORD *)v5 - 20);
          *(_OWORD *)(v50 + 196) = v51;
          *(v13 - 304) = 1;
        }
        *(v13 - 296) = 0;
        *(v13 - 248) = 0;
        if (*(v5 - 248))
        {
          *((_DWORD *)v13 - 74) = *((_DWORD *)v5 - 74);
          v52 = v13 - 528;
          *(_QWORD *)(v52 + 236) = *(_QWORD *)(v5 - 292);
          *(_QWORD *)(v52 + 244) = *(_QWORD *)(v5 - 284);
          v53 = *(_OWORD *)(v5 - 276);
          *(_OWORD *)(v13 - 264) = *(_OWORD *)(v5 - 264);
          *(_OWORD *)(v52 + 252) = v53;
          *(v13 - 248) = 1;
        }
        *(v13 - 240) = 0;
        *(v13 - 232) = 0;
        if (*(v5 - 232))
        {
          sub_1C990AD90((uint64_t *)v13 - 30, (uint64_t *)v5 - 30);
          *(v13 - 232) = 1;
        }
        *(v13 - 224) = 0;
        *(v13 - 200) = 0;
        if (*(v5 - 200))
        {
          *((_QWORD *)v13 - 28) = 0;
          *((_QWORD *)v13 - 27) = 0;
          v54 = *((_QWORD *)v5 - 27);
          *((_QWORD *)v13 - 28) = *((_QWORD *)v5 - 28);
          *((_QWORD *)v13 - 27) = v54;
          *((_QWORD *)v5 - 28) = 0;
          *((_QWORD *)v5 - 27) = 0;
          *((_DWORD *)v13 - 52) = *((_DWORD *)v5 - 52);
          *((_DWORD *)v5 - 52) = 0;
          *(v13 - 200) = 1;
        }
        *((_OWORD *)v13 - 12) = *((_OWORD *)v5 - 12);
        *((_QWORD *)v5 - 24) = 0;
        *((_QWORD *)v5 - 23) = 0;
        *(v13 - 176) = 0;
        *(v13 - 128) = 0;
        if (*(v5 - 128))
        {
          *((_DWORD *)v13 - 44) = *((_DWORD *)v5 - 44);
          *(_QWORD *)(v13 - 172) = *(_QWORD *)(v5 - 172);
          *(_QWORD *)(v13 - 164) = *(_QWORD *)(v5 - 164);
          v55 = *(_OWORD *)(v5 - 156);
          *((_OWORD *)v13 - 9) = *((_OWORD *)v5 - 9);
          *(_OWORD *)(v13 - 156) = v55;
          *(v13 - 128) = 1;
        }
        *(v13 - 120) = 0;
        *(v13 - 72) = 0;
        if (*(v5 - 72))
        {
          *((_DWORD *)v13 - 30) = *((_DWORD *)v5 - 30);
          *(_QWORD *)(v13 - 116) = *(_QWORD *)(v5 - 116);
          *(_QWORD *)(v13 - 108) = *(_QWORD *)(v5 - 108);
          v56 = *(_OWORD *)(v5 - 100);
          *(_OWORD *)(v13 - 88) = *(_OWORD *)(v5 - 88);
          *(_OWORD *)(v13 - 100) = v56;
          *(v13 - 72) = 1;
        }
        *(v13 - 64) = 0;
        *(v13 - 56) = 0;
        if (*(v5 - 56))
        {
          sub_1C990AD90((uint64_t *)v13 - 8, (uint64_t *)v5 - 8);
          *(v13 - 56) = 1;
        }
        *(v13 - 48) = 0;
        *(v13 - 24) = 0;
        if (*(v5 - 24))
        {
          *((_QWORD *)v13 - 6) = 0;
          *((_QWORD *)v13 - 5) = 0;
          v57 = *((_QWORD *)v5 - 5);
          *((_QWORD *)v13 - 6) = *((_QWORD *)v5 - 6);
          *((_QWORD *)v13 - 5) = v57;
          *((_QWORD *)v5 - 6) = 0;
          *((_QWORD *)v5 - 5) = 0;
          *((_DWORD *)v13 - 8) = *((_DWORD *)v5 - 8);
          *((_DWORD *)v5 - 8) = 0;
          *(v13 - 24) = 1;
        }
        *((_OWORD *)v13 - 1) = *((_OWORD *)v5 - 1);
        *((_QWORD *)v5 - 2) = 0;
        *((_QWORD *)v5 - 1) = 0;
        v5 -= 1168;
        v13 -= 1168;
      }
      while (v18 != v6);
      v5 = *a1;
      v58 = (uint64_t)a1[1];
      *a1 = v17;
      a1[1] = v16;
      for (a1[2] = v14; (char *)v58 != v5; v58 = sub_1C98BC250(v58 - 1168))
        ;
      if (v5)
        goto LABEL_73;
    }
  }
}

uint64_t sub_1C98FB210(__CFDictionary *a1, int a2, int32x2_t *a3, uint64_t a4)
{
  int v4;
  std::__shared_weak_count *v8;
  cva::ArrayHandler *value;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t i;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void **v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t j;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void **v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  void **v36;
  __int128 v37;
  __int128 v38;
  _OWORD *v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;
  __int128 v43;
  __int128 v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  _OWORD *v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  uint64_t v66;
  uint64_t v67;
  char v68;
  void **v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  std::__shared_weak_count *v73;
  unint64_t *p_shared_owners;
  unint64_t v75;
  void **v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;
  __int128 v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  std::__shared_weak_count *v87;
  _QWORD *v88;
  unint64_t *v89;
  unint64_t v90;
  std::__shared_weak_count *v91;
  cva::ArrayHandler *v92;
  unint64_t *v93;
  unint64_t v94;
  std::__shared_weak_count *v95;
  unint64_t *v96;
  unint64_t v97;
  uint64_t v98;
  const __CFString *v99;
  cva::DictionaryHandler *v100;
  uint64_t v101;
  uint64_t v102;
  cva::DictionaryHandler *v103;
  cva::ArrayHandler *v104;
  _QWORD *v105;
  uint64_t v106;
  std::__shared_weak_count *v107;
  CMTimeValue v108;
  cva::DictionaryHandler *v109;
  const __CFDictionary *Dictionary;
  Float64 v111;
  unint64_t *v112;
  unint64_t v113;
  uint64_t v114;
  void *v115;
  const __CFData *Data;
  unsigned int v117;
  const char *p_time;
  int v119;
  std::__shared_weak_count *v120;
  char v121;
  char v122;
  uint64_t v123;
  uint64_t v124;
  int v125;
  cva::DictionaryHandler *v126;
  cva::DictionaryHandler *v127;
  const __CFData *v128;
  unsigned __int8 v129;
  uint64_t width_low;
  CGFloat x;
  CFMutableDataRef Mutable;
  UInt8 *MutableBytePtr;
  int v134;
  uint64_t v135;
  int v136;
  uint64_t v137;
  uint64_t v138;
  CFTypeRef v139;
  int v140;
  _DWORD *v141;
  int v142;
  uint64_t v143;
  cva::DictionaryHandler *v144;
  cva::DictionaryHandler *v145;
  std::__shared_weak_count *v146;
  cva::DictionaryHandler *v147;
  std::__shared_weak_count *v148;
  _DWORD *v149;
  int v150;
  uint64_t v151;
  int v152;
  _DWORD *v153;
  _DWORD *v154;
  _DWORD *v155;
  cva::DictionaryHandler *v156;
  std::__shared_weak_count *v157;
  uint64_t v158;
  _DWORD *v159;
  _DWORD *v160;
  _DWORD *v161;
  _DWORD *v162;
  void **v163;
  __int128 v164;
  std::__shared_weak_count *v165;
  std::__shared_weak_count *v166;
  unint64_t *v167;
  unint64_t v168;
  unint64_t *v169;
  unint64_t v170;
  unint64_t *v171;
  unint64_t v172;
  unint64_t *v173;
  unint64_t v174;
  unint64_t *v175;
  unint64_t v176;
  __int128 v177;
  unint64_t *v178;
  unint64_t v179;
  unint64_t *v180;
  unint64_t v181;
  unint64_t *v182;
  unint64_t v183;
  uint64_t v184;
  void **v185;
  void *v186;
  const __CFData *v187;
  unsigned int v188;
  uint64_t v189;
  int v190;
  int v191;
  std::__shared_weak_count *v192;
  unint64_t *v193;
  unint64_t v194;
  uint64_t v195;
  int v196;
  uint64_t v197;
  __int128 v198;
  std::__shared_weak_count *v199;
  unint64_t *v200;
  unint64_t v201;
  std::__shared_weak_count *v202;
  unint64_t *v203;
  unint64_t v204;
  std::__shared_weak_count *v205;
  unint64_t *v206;
  unint64_t v207;
  void *v208;
  const __CFData *v209;
  unsigned int v210;
  int v211;
  uint64_t v212;
  CGFloat v213;
  CGFloat v214;
  CGSize v215;
  const __CFDictionary *v216;
  float32x2_t v217;
  __int128 v218;
  int v219;
  int v220;
  CGFloat y;
  unint64_t *v222;
  unint64_t v223;
  CGFloat v224;
  unint64_t *v225;
  unint64_t v226;
  unint64_t *v227;
  unint64_t v228;
  uint64_t v229;
  int v230;
  uint64_t v231;
  int v232;
  int v233;
  uint64_t v234;
  const __CFString *ErrorDescription_0;
  const char *CStringPtr;
  size_t v237;
  size_t v238;
  _BYTE *v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  void **v243;
  uint64_t v244;
  uint64_t v245;
  void **v246;
  void *v247;
  cva::DictionaryHandler *v248;
  const __CFData *v249;
  unsigned int v250;
  uint64_t v251;
  void **v252;
  void *v253;
  std::__shared_weak_count *v254;
  unint64_t *v255;
  unint64_t v256;
  unint64_t *v257;
  unint64_t v258;
  uint64_t v259;
  unint64_t *v260;
  unint64_t v261;
  __int128 v263;
  cva::DictionaryHandler *v264;
  std::__shared_weak_count *v265;
  uint64_t v266;
  int32x2_t *v267;
  int v268;
  cva::ArrayHandler *v269;
  std::__shared_weak_count *v270;
  const __CFAllocator *allocator;
  uint64_t v272;
  __CFString *v273;
  std::__shared_weak_count *v274;
  std::__shared_weak_count *v275;
  std::__shared_weak_count *v276;
  _BYTE v277[7];
  __int16 v278;
  char v279;
  __int16 v280;
  char v281;
  int v282;
  void *v283;
  uint64_t v284;
  __int128 v285;
  __int128 v286;
  __int128 v287;
  CFTypeRef cf;
  _BYTE v289[16];
  _BYTE v290[16];
  CGRect rect;
  __int128 v292;
  __int128 v293;
  int v294;
  uint64_t v295;
  int v296;
  CMTime time;
  uint64_t v298;
  uint64_t v299;
  int v300;
  unsigned __int8 v301;
  uint64_t v302;
  uint64_t v303;
  int v304;
  unsigned __int8 v305;
  __int128 v306;
  uint64_t v307;
  unsigned __int8 v308;
  __int128 v309;
  _OWORD v310[2];
  __int128 v311;
  uint64_t v312;
  unsigned __int8 v313;
  __int128 v314;
  __int128 v315;
  int v316;
  uint64_t v317;
  int v318;
  unsigned __int8 v319;
  uint64_t v320;
  uint64_t v321;
  int v322;
  unsigned __int8 v323;
  uint64_t v324;
  int v325;
  unsigned __int8 v326;
  __int128 v327;
  __int128 v328;
  __int128 v329;
  __int128 v330;
  _BYTE v331[21];
  uint64_t v332;
  int v333;
  unsigned __int8 v334;
  uint64_t v335;
  int v336;
  unsigned __int8 v337;
  __int128 v338;
  __int128 v339;
  __int128 v340;
  unsigned __int8 v341;
  uint64_t v342;
  uint64_t v343;
  int v344;
  unsigned __int8 v345;
  int v346;
  char v347;
  __int128 v348;
  uint64_t v349;
  unsigned __int8 v350;
  __int128 v351;
  __int128 v352;
  uint64_t v353;
  unsigned __int8 v354;
  __int128 v355;
  __int128 v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  CMTime v360;
  uint64_t v361;

  v361 = *MEMORY[0x1E0C80C00];
  cva::DictionaryHandler::DictionaryHandler((cva::DictionaryHandler *)v289, a1);
  if (!cva::DictionaryHandler::hasKey((cva::DictionaryHandler *)v289, CFSTR("tracked_faces")))
  {
    v8 = 0;
    goto LABEL_7;
  }
  cva::DictionaryHandler::item((cva::DictionaryHandler *)v289, CFSTR("tracked_faces"));
  cva::ItemHandler::getArray((cva::ItemHandler *)&v360);
  value = (cva::ArrayHandler *)time.value;
  v8 = *(std::__shared_weak_count **)&time.timescale;
  time.value = 0;
  *(_QWORD *)&time.timescale = 0;
  cva::ItemHandler::~ItemHandler((cva::ItemHandler *)&v360);
  if (!value || !cva::ArrayHandler::size(value))
  {
LABEL_7:
    v15 = *(_QWORD *)(a4 + 64);
    v16 = 1;
    if ((int)(-941362695 * ((unint64_t)(*(_QWORD *)(a4 + 72) - v15) >> 4)) >= 1)
    {
      v270 = v8;
      v17 = 0;
      v18 = 200;
      do
      {
        v20 = v15 + v18;
        *(_DWORD *)(v20 - 52) = 0;
        *(_BYTE *)(v20 - 48) = 1;
        v21 = *(_QWORD *)(a4 + 64);
        v22 = (void **)(v21 + v18);
        if (*(_BYTE *)(v21 + v18 - 32))
          *((_BYTE *)v22 - 32) = 0;
        if (*(_BYTE *)v22)
        {
          v23 = v21 + v18;
          if (*(char *)(v21 + v18 - 1) < 0)
            operator delete(*(v22 - 3));
          *(v22 - 3) = (void *)0x6B63617274206F4ELL;
          *(_DWORD *)(v23 - 16) = 6778473;
          *(_BYTE *)(v23 - 1) = 11;
        }
        else
        {
          *(v22 - 3) = (void *)0x6B63617274206F4ELL;
          v24 = v21 + v18;
          *(_DWORD *)(v24 - 16) = 6778473;
          *(_WORD *)(v24 - 1) = 267;
        }
        v19 = *(_QWORD *)(a4 + 64) + v18;
        *(_DWORD *)(v19 - 44) = 0;
        *(_BYTE *)(v19 - 40) = 1;
        ++v17;
        v15 = *(_QWORD *)(a4 + 64);
        v18 += 1168;
      }
      while (v17 < (int)(-941362695 * ((unint64_t)(*(_QWORD *)(a4 + 72) - v15) >> 4)));
LABEL_381:
      v16 = 1;
LABEL_382:
      v8 = v270;
    }
    goto LABEL_383;
  }
  v10 = (int)cva::ArrayHandler::size(value);
  v12 = *(_QWORD *)(a4 + 64);
  v11 = *(_QWORD *)(a4 + 72);
  v13 = 0x7E3F1F8FC7E3F1F9 * ((v11 - v12) >> 4);
  v269 = value;
  v270 = v8;
  v267 = a3;
  v268 = a2;
  if (v10 <= v13)
  {
    if (v10 >= v13)
    {
      i = *(_QWORD *)(a4 + 72);
    }
    else
    {
      for (i = v12 + 1168 * (int)v10; v11 != i; v11 = sub_1C98BC250(v11 - 1168))
        ;
      *(_QWORD *)(a4 + 72) = i;
    }
  }
  else
  {
    sub_1C98FA98C((char **)(a4 + 64), v10 - v13);
    i = *(_QWORD *)(a4 + 72);
  }
  *(_DWORD *)(a4 + 56) = 0;
  *(_OWORD *)(a4 + 40) = 0u;
  *(_OWORD *)(a4 + 24) = 0u;
  for (j = *(_QWORD *)(a4 + 64); j != i; j += 1168)
  {
    bzero(&time, 0x490uLL);
    v26 = *(unsigned __int8 *)(j + 24);
    if (*(_BYTE *)(j + 24))
    {
      free(*(void **)j);
      *(_BYTE *)(j + 24) = 0;
      v26 = v301;
    }
    if (*(unsigned __int8 *)(j + 56) == v26)
    {
      if (*(_BYTE *)(j + 56))
      {
        v27 = *(_QWORD *)(j + 32);
        v28 = *(_QWORD *)(j + 40);
        *(_QWORD *)(j + 32) = v298;
        *(_QWORD *)(j + 40) = v299;
        v298 = v27;
        v299 = v28;
        *(_DWORD *)(j + 48) = v300;
        v300 = 0;
      }
    }
    else if (*(_BYTE *)(j + 56))
    {
      free(*(void **)(j + 32));
      *(_BYTE *)(j + 56) = 0;
    }
    else
    {
      *(_QWORD *)(j + 32) = 0;
      *(_QWORD *)(j + 40) = 0;
      *(_QWORD *)(j + 32) = v298;
      *(_QWORD *)(j + 40) = v299;
      v298 = 0;
      v299 = 0;
      *(_DWORD *)(j + 48) = v300;
      v300 = 0;
      *(_BYTE *)(j + 56) = 1;
    }
    if (*(unsigned __int8 *)(j + 88) == v305)
    {
      if (*(_BYTE *)(j + 88))
      {
        v29 = *(_QWORD *)(j + 64);
        v30 = *(_QWORD *)(j + 72);
        *(_QWORD *)(j + 64) = v302;
        *(_QWORD *)(j + 72) = v303;
        v302 = v29;
        v303 = v30;
        *(_DWORD *)(j + 80) = v304;
        v304 = 0;
      }
    }
    else if (*(_BYTE *)(j + 88))
    {
      free(*(void **)(j + 64));
      *(_BYTE *)(j + 88) = 0;
    }
    else
    {
      *(_QWORD *)(j + 64) = 0;
      *(_QWORD *)(j + 72) = 0;
      *(_QWORD *)(j + 64) = v302;
      *(_QWORD *)(j + 72) = v303;
      v302 = 0;
      v303 = 0;
      *(_DWORD *)(j + 80) = v304;
      v304 = 0;
      *(_BYTE *)(j + 88) = 1;
    }
    v31 = (void **)(j + 96);
    if (*(unsigned __int8 *)(j + 120) == v308)
    {
      if (*(_BYTE *)(j + 120))
      {
        if (*(char *)(j + 119) < 0)
          operator delete(*v31);
        v32 = v306;
        *(_QWORD *)(j + 112) = v307;
        *(_OWORD *)v31 = v32;
        HIBYTE(v307) = 0;
        LOBYTE(v306) = 0;
      }
    }
    else if (*(_BYTE *)(j + 120))
    {
      if (*(char *)(j + 119) < 0)
        operator delete(*v31);
      *(_BYTE *)(j + 120) = 0;
    }
    else
    {
      v33 = v306;
      *(_QWORD *)(j + 112) = v307;
      *(_OWORD *)v31 = v33;
      v307 = 0;
      v306 = 0uLL;
      *(_BYTE *)(j + 120) = 1;
    }
    v34 = v309;
    v35 = v310[0];
    *(_OWORD *)(j + 153) = *(_OWORD *)((char *)v310 + 9);
    *(_OWORD *)(j + 128) = v34;
    *(_OWORD *)(j + 144) = v35;
    v36 = (void **)(j + 176);
    if (*(unsigned __int8 *)(j + 200) == v313)
    {
      if (*(_BYTE *)(j + 200))
      {
        if (*(char *)(j + 199) < 0)
          operator delete(*v36);
        v37 = v311;
        *(_QWORD *)(j + 192) = v312;
        *(_OWORD *)v36 = v37;
        HIBYTE(v312) = 0;
        LOBYTE(v311) = 0;
      }
    }
    else if (*(_BYTE *)(j + 200))
    {
      if (*(char *)(j + 199) < 0)
        operator delete(*v36);
      *(_BYTE *)(j + 200) = 0;
    }
    else
    {
      v38 = v311;
      *(_QWORD *)(j + 192) = v312;
      *(_OWORD *)v36 = v38;
      v312 = 0;
      v311 = 0uLL;
      *(_BYTE *)(j + 200) = 1;
    }
    v39 = (_OWORD *)(j + 208);
    if (*(unsigned __int8 *)(j + 256) == v319)
    {
      if (*(_BYTE *)(j + 256))
      {
        v40 = v314;
        v41 = v315;
        *(_DWORD *)(j + 240) = v316;
        *v39 = v40;
        *(_OWORD *)(j + 224) = v41;
        v42 = v317;
        *(_DWORD *)(j + 252) = v318;
        *(_QWORD *)(j + 244) = v42;
      }
    }
    else if (*(_BYTE *)(j + 256))
    {
      *(_BYTE *)(j + 256) = 0;
    }
    else
    {
      v43 = v314;
      v44 = v315;
      *(_DWORD *)(j + 240) = v316;
      *v39 = v43;
      *(_OWORD *)(j + 224) = v44;
      v45 = v317;
      *(_DWORD *)(j + 252) = v318;
      *(_QWORD *)(j + 244) = v45;
      *(_BYTE *)(j + 256) = 1;
    }
    if (*(unsigned __int8 *)(j + 288) == v323)
    {
      if (*(_BYTE *)(j + 288))
      {
        v46 = *(_QWORD *)(j + 264);
        v47 = *(_QWORD *)(j + 272);
        *(_QWORD *)(j + 264) = v320;
        *(_QWORD *)(j + 272) = v321;
        v320 = v46;
        v321 = v47;
        *(_DWORD *)(j + 280) = v322;
        v322 = 0;
      }
    }
    else if (*(_BYTE *)(j + 288))
    {
      free(*(void **)(j + 264));
      *(_BYTE *)(j + 288) = 0;
    }
    else
    {
      *(_QWORD *)(j + 264) = 0;
      *(_QWORD *)(j + 272) = 0;
      *(_QWORD *)(j + 264) = v320;
      *(_QWORD *)(j + 272) = v321;
      v320 = 0;
      v321 = 0;
      *(_DWORD *)(j + 280) = v322;
      v322 = 0;
      *(_BYTE *)(j + 288) = 1;
    }
    v48 = (_QWORD *)(j + 296);
    if (*(unsigned __int8 *)(j + 308) == v326)
    {
      if (*(_BYTE *)(j + 308))
      {
        v49 = v324;
        *(_DWORD *)(j + 304) = v325;
        *v48 = v49;
      }
    }
    else if (*(_BYTE *)(j + 308))
    {
      *(_BYTE *)(j + 308) = 0;
    }
    else
    {
      v50 = v324;
      *(_DWORD *)(j + 304) = v325;
      *v48 = v50;
      *(_BYTE *)(j + 308) = 1;
    }
    v51 = v328;
    *(_OWORD *)(j + 312) = v327;
    *(_OWORD *)(j + 328) = v51;
    v52 = v329;
    v53 = v330;
    v54 = *(_OWORD *)v331;
    *(_QWORD *)(j + 389) = *(_QWORD *)&v331[13];
    *(_OWORD *)(j + 360) = v53;
    *(_OWORD *)(j + 376) = v54;
    *(_OWORD *)(j + 344) = v52;
    v55 = (_QWORD *)(j + 400);
    if (*(unsigned __int8 *)(j + 412) == v334)
    {
      if (*(_BYTE *)(j + 412))
      {
        v56 = v332;
        *(_DWORD *)(j + 408) = v333;
        *v55 = v56;
      }
    }
    else if (*(_BYTE *)(j + 412))
    {
      *(_BYTE *)(j + 412) = 0;
    }
    else
    {
      v57 = v332;
      *(_DWORD *)(j + 408) = v333;
      *v55 = v57;
      *(_BYTE *)(j + 412) = 1;
    }
    v58 = (_QWORD *)(j + 416);
    if (*(unsigned __int8 *)(j + 428) == v337)
    {
      if (*(_BYTE *)(j + 428))
      {
        v59 = v335;
        *(_DWORD *)(j + 424) = v336;
        *v58 = v59;
      }
    }
    else if (*(_BYTE *)(j + 428))
    {
      *(_BYTE *)(j + 428) = 0;
    }
    else
    {
      v60 = v335;
      *(_DWORD *)(j + 424) = v336;
      *v58 = v60;
      *(_BYTE *)(j + 428) = 1;
    }
    v61 = (_OWORD *)(j + 432);
    if (*(unsigned __int8 *)(j + 480) == v341)
    {
      if (*(_BYTE *)(j + 480))
      {
        v62 = v338;
        v63 = v340;
        *(_OWORD *)(j + 448) = v339;
        *(_OWORD *)(j + 464) = v63;
        *v61 = v62;
      }
    }
    else if (*(_BYTE *)(j + 480))
    {
      *(_BYTE *)(j + 480) = 0;
    }
    else
    {
      v64 = v338;
      v65 = v340;
      *(_OWORD *)(j + 448) = v339;
      *(_OWORD *)(j + 464) = v65;
      *v61 = v64;
      *(_BYTE *)(j + 480) = 1;
    }
    if (*(unsigned __int8 *)(j + 512) == v345)
    {
      if (*(_BYTE *)(j + 512))
      {
        v66 = *(_QWORD *)(j + 488);
        v67 = *(_QWORD *)(j + 496);
        *(_QWORD *)(j + 488) = v342;
        v342 = v66;
        *(_QWORD *)(j + 496) = v343;
        v343 = v67;
        *(_DWORD *)(j + 504) = v344;
        v344 = 0;
      }
    }
    else if (*(_BYTE *)(j + 512))
    {
      free(*(void **)(j + 488));
      *(_BYTE *)(j + 512) = 0;
    }
    else
    {
      *(_QWORD *)(j + 488) = 0;
      *(_QWORD *)(j + 496) = 0;
      *(_QWORD *)(j + 488) = v342;
      v342 = 0;
      *(_QWORD *)(j + 496) = v343;
      v343 = 0;
      *(_DWORD *)(j + 504) = v344;
      v344 = 0;
      *(_BYTE *)(j + 512) = 1;
    }
    v68 = v347;
    *(_DWORD *)(j + 520) = v346;
    *(_BYTE *)(j + 524) = v68;
    v69 = (void **)(j + 528);
    if (*(unsigned __int8 *)(j + 552) == v350)
    {
      if (*(_BYTE *)(j + 552))
      {
        if (*(char *)(j + 551) < 0)
          operator delete(*v69);
        v70 = v348;
        *(_QWORD *)(j + 544) = v349;
        *(_OWORD *)v69 = v70;
        HIBYTE(v349) = 0;
        LOBYTE(v348) = 0;
      }
    }
    else if (*(_BYTE *)(j + 552))
    {
      if (*(char *)(j + 551) < 0)
        operator delete(*v69);
      *(_BYTE *)(j + 552) = 0;
    }
    else
    {
      v71 = v348;
      *(_QWORD *)(j + 544) = v349;
      *(_OWORD *)v69 = v71;
      v349 = 0;
      v348 = 0uLL;
      *(_BYTE *)(j + 552) = 1;
    }
    v72 = v351;
    v351 = 0uLL;
    v73 = *(std::__shared_weak_count **)(j + 568);
    *(_OWORD *)(j + 560) = v72;
    if (v73)
    {
      p_shared_owners = (unint64_t *)&v73->__shared_owners_;
      do
        v75 = __ldaxr(p_shared_owners);
      while (__stlxr(v75 - 1, p_shared_owners));
      if (!v75)
      {
        ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
        std::__shared_weak_count::__release_weak(v73);
      }
    }
    v76 = (void **)(j + 576);
    if (*(unsigned __int8 *)(j + 600) == v354)
    {
      if (*(_BYTE *)(j + 600))
      {
        if (*(char *)(j + 599) < 0)
          operator delete(*v76);
        v77 = v352;
        *(_QWORD *)(j + 592) = v353;
        *(_OWORD *)v76 = v77;
        HIBYTE(v353) = 0;
        LOBYTE(v352) = 0;
      }
    }
    else if (*(_BYTE *)(j + 600))
    {
      if (*(char *)(j + 599) < 0)
        operator delete(*v76);
      *(_BYTE *)(j + 600) = 0;
    }
    else
    {
      v78 = v352;
      *(_QWORD *)(j + 592) = v353;
      *(_OWORD *)v76 = v78;
      v353 = 0;
      v352 = 0uLL;
      *(_BYTE *)(j + 600) = 1;
    }
    v79 = v355;
    v355 = 0uLL;
    v80 = *(std::__shared_weak_count **)(j + 616);
    *(_OWORD *)(j + 608) = v79;
    if (v80)
    {
      v81 = (unint64_t *)&v80->__shared_owners_;
      do
        v82 = __ldaxr(v81);
      while (__stlxr(v82 - 1, v81));
      if (!v82)
      {
        ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
        std::__shared_weak_count::__release_weak(v80);
      }
    }
    v83 = v356;
    v356 = 0uLL;
    v84 = *(std::__shared_weak_count **)(j + 632);
    *(_OWORD *)(j + 624) = v83;
    if (v84)
    {
      v85 = (unint64_t *)&v84->__shared_owners_;
      do
        v86 = __ldaxr(v85);
      while (__stlxr(v86 - 1, v85));
      if (!v86)
      {
        ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
        std::__shared_weak_count::__release_weak(v84);
      }
    }
    sub_1C99166E4(j + 640, (uint64_t)&v357);
    sub_1C99166E4(j + 816, (uint64_t)&v358);
    sub_1C99166E4(j + 992, (uint64_t)&v359);
    sub_1C98BC250((uint64_t)&time);
  }
  v87 = *(std::__shared_weak_count **)(a4 + 848);
  v88 = (_QWORD *)(a4 + 64);
  *(_QWORD *)(a4 + 840) = 0;
  *(_QWORD *)(a4 + 848) = 0;
  if (v87)
  {
    v89 = (unint64_t *)&v87->__shared_owners_;
    do
      v90 = __ldaxr(v89);
    while (__stlxr(v90 - 1, v89));
    if (!v90)
    {
      ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
      std::__shared_weak_count::__release_weak(v87);
    }
  }
  v91 = *(std::__shared_weak_count **)(a4 + 864);
  *(_QWORD *)(a4 + 856) = 0;
  *(_QWORD *)(a4 + 864) = 0;
  v92 = v269;
  if (v91)
  {
    v93 = (unint64_t *)&v91->__shared_owners_;
    do
      v94 = __ldaxr(v93);
    while (__stlxr(v94 - 1, v93));
    if (!v94)
    {
      ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
      std::__shared_weak_count::__release_weak(v91);
    }
  }
  v95 = *(std::__shared_weak_count **)(a4 + 880);
  *(_QWORD *)(a4 + 872) = 0;
  *(_QWORD *)(a4 + 880) = 0;
  if (v95)
  {
    v96 = (unint64_t *)&v95->__shared_owners_;
    do
      v97 = __ldaxr(v96);
    while (__stlxr(v97 - 1, v96));
    if (!v97)
    {
      ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
      std::__shared_weak_count::__release_weak(v95);
    }
  }
  v16 = 1;
  if ((int)(-941362695 * ((*(_QWORD *)(a4 + 72) - *(_QWORD *)(a4 + 64)) >> 4)) >= 1)
  {
    v98 = 0;
    v99 = CFSTR("smooth_data");
    if (v268)
      v99 = CFSTR("raw_data");
    v273 = (__CFString *)v99;
    allocator = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    while (1)
    {
      cva::ArrayHandler::item(v92);
      cva::ItemHandler::getDictionary((cva::ItemHandler *)&v360);
      v100 = (cva::DictionaryHandler *)time.value;
      v276 = *(std::__shared_weak_count **)&time.timescale;
      time.value = 0;
      *(_QWORD *)&time.timescale = 0;
      cva::ItemHandler::~ItemHandler((cva::ItemHandler *)&v360);
      v101 = *v88;
      if (cva::DictionaryHandler::hasKey(v100, CFSTR("timestamp")))
      {
        cva::DictionaryHandler::item(v100, CFSTR("timestamp"));
        cva::ItemHandler::getDictionary((cva::ItemHandler *)&v360);
        v102 = v98;
        v103 = v100;
        v104 = v92;
        v105 = v88;
        v106 = v101;
        v108 = time.value;
        v107 = *(std::__shared_weak_count **)&time.timescale;
        time.value = 0;
        *(_QWORD *)&time.timescale = 0;
        cva::ItemHandler::~ItemHandler((cva::ItemHandler *)&v360);
        v109 = (cva::DictionaryHandler *)v108;
        v101 = v106;
        v88 = v105;
        v92 = v104;
        v100 = v103;
        v98 = v102;
        Dictionary = (const __CFDictionary *)cva::DictionaryHandler::getDictionary(v109);
        memset(&v360, 0, sizeof(v360));
        CMTimeMakeFromDictionary(&v360, Dictionary);
        time = v360;
        v111 = CMTimeGetSeconds(&time) * 1000.0;
        *(Float64 *)(a4 + 24) = v111;
        *(Float64 *)(a4 + 32) = v111;
        if (v107)
        {
          v112 = (unint64_t *)&v107->__shared_owners_;
          do
            v113 = __ldaxr(v112);
          while (__stlxr(v113 - 1, v112));
          if (!v113)
          {
            ((void (*)(std::__shared_weak_count *))v107->__on_zero_shared)(v107);
            std::__shared_weak_count::__release_weak(v107);
          }
        }
      }
      if (cva::DictionaryHandler::hasKey(v100, CFSTR("identity_coefficients")))
      {
        v114 = v101 + 1168 * v98;
        if (*(_BYTE *)(v114 + 24))
        {
          v115 = *(void **)v114;
          *(_DWORD *)(v114 + 16) = 0;
        }
        else
        {
          v115 = 0;
          *(_DWORD *)(v114 + 16) = 0;
          *(_BYTE *)(v114 + 24) = 1;
        }
        *(_QWORD *)v114 = 0;
        *(_QWORD *)(v114 + 8) = 0;
        free(v115);
        if (!cva::DictionaryHandler::hasKey(v100, CFSTR("identity_coefficients"))
          || (cva::DictionaryHandler::item(v100, CFSTR("identity_coefficients")),
              Data = (const __CFData *)cva::ItemHandler::getData((cva::ItemHandler *)&time),
              v117 = sub_1C98FD5B8(Data, v101 + 1168 * v98),
              cva::ItemHandler::~ItemHandler((cva::ItemHandler *)&time),
              !v117))
        {
          v119 = 1;
          v120 = v276;
          goto LABEL_237;
        }
      }
      cva::DictionaryHandler::item(v100, CFSTR("face_id"));
      cva::ItemHandler::getValue<std::string>();
      if (SHIBYTE(time.epoch) < 0)
      {
        if (*(_QWORD *)&time.timescale != 36)
        {
LABEL_175:
          v122 = 0;
          v121 = 0;
          goto LABEL_177;
        }
        p_time = (const char *)time.value;
      }
      else
      {
        if (SHIBYTE(time.epoch) != 36)
          goto LABEL_175;
        p_time = (const char *)&time;
      }
      if (uuid_parse(p_time, (unsigned __int8 *)&v360))
      {
        v121 = 0;
        v122 = 0;
      }
      else
      {
        v121 = v360.value;
        *(_QWORD *)&v292 = *(CMTimeValue *)((char *)&v360.value + 1);
        *(_QWORD *)((char *)&v292 + 7) = *(_QWORD *)&v360.timescale;
        v122 = 1;
      }
LABEL_177:
      v123 = v101 + 1168 * v98;
      *(_BYTE *)(v123 + 128) = v121;
      *(_QWORD *)(v123 + 129) = v292;
      *(_QWORD *)(v123 + 136) = *(_QWORD *)((char *)&v292 + 7);
      *(_BYTE *)(v123 + 144) = v122;
      if (SHIBYTE(time.epoch) < 0)
        operator delete((void *)time.value);
      cva::ItemHandler::~ItemHandler((cva::ItemHandler *)&v285);
      cva::DictionaryHandler::item(v100, CFSTR("confidence"));
      cva::ItemHandler::getValue<float>();
      v272 = v101;
      v124 = v101 + 1168 * v98;
      *(_DWORD *)(v124 + 156) = v125;
      *(_BYTE *)(v124 + 160) = 1;
      cva::ItemHandler::~ItemHandler((cva::ItemHandler *)&time);
      cva::DictionaryHandler::item(v100, v273);
      cva::ItemHandler::getDictionary((cva::ItemHandler *)&v360);
      v126 = (cva::DictionaryHandler *)time.value;
      v275 = *(std::__shared_weak_count **)&time.timescale;
      time.value = 0;
      *(_QWORD *)&time.timescale = 0;
      cva::ItemHandler::~ItemHandler((cva::ItemHandler *)&v360);
      cva::DictionaryHandler::item(v126, CFSTR("animation"));
      cva::ItemHandler::getDictionary((cva::ItemHandler *)&v360);
      v127 = (cva::DictionaryHandler *)time.value;
      v274 = *(std::__shared_weak_count **)&time.timescale;
      time.value = 0;
      *(_QWORD *)&time.timescale = 0;
      cva::ItemHandler::~ItemHandler((cva::ItemHandler *)&v360);
      cf = 0;
      v286 = 0u;
      v287 = 0u;
      v285 = 0u;
      memset(&rect, 0, 20);
      if (!cva::DictionaryHandler::hasKey(v127, CFSTR("blendshapes"))
        || (cva::DictionaryHandler::item(v127, CFSTR("blendshapes")),
            v128 = (const __CFData *)cva::ItemHandler::getData((cva::ItemHandler *)&v292),
            v129 = sub_1C98FD5B8(v128, (uint64_t)&rect),
            cva::ItemHandler::~ItemHandler((cva::ItemHandler *)&v292),
            (v129 & 1) == 0))
      {
        sub_1C99072C4(&v292);
        sub_1C9907EC4(&time, &v292, 0, 0, "[RELEASE ERROR  ]", "/Library/Caches/com.apple.xbs/Sources/AppleCVA/shared/src/modules/avatar/facekit/facekitdictionaryconverter.cpp", 447, "Failed to extract blendshapes from the animation dictionary.", v263);
        sub_1C9909318((uint64_t)&time);
        v165 = (std::__shared_weak_count *)*((_QWORD *)&v292 + 1);
        v166 = v275;
        if (!*((_QWORD *)&v292 + 1))
          goto LABEL_224;
        v167 = (unint64_t *)(*((_QWORD *)&v292 + 1) + 8);
        do
          v168 = __ldaxr(v167);
        while (__stlxr(v168 - 1, v167));
        if (v168)
          goto LABEL_224;
        goto LABEL_218;
      }
      width_low = LODWORD(rect.size.width);
      x = rect.origin.x;
      Mutable = CFDataCreateMutable(allocator, 4 * LODWORD(rect.size.width));
      cf = Mutable;
      CFDataSetLength(Mutable, 4 * width_low);
      MutableBytePtr = CFDataGetMutableBytePtr(Mutable);
      if ((_DWORD)width_low)
        memcpy(MutableBytePtr, *(const void **)&x, 4 * width_low);
      v88 = (_QWORD *)(a4 + 64);
      v92 = v269;
      if (!cva::DictionaryHandler::hasKey(v127, CFSTR("gaze")))
        goto LABEL_220;
      cva::DictionaryHandler::item(v127, CFSTR("gaze"));
      cva::ItemHandler::getVector<float>();
      if ((_DWORD)v293 != 3)
      {
        free((void *)v292);
        cva::ItemHandler::~ItemHandler((cva::ItemHandler *)v290);
LABEL_220:
        sub_1C99072C4(&v292);
        sub_1C9907EC4(&v360, &v292, 0, 0, "[RELEASE ERROR  ]", "/Library/Caches/com.apple.xbs/Sources/AppleCVA/shared/src/modules/avatar/facekit/facekitdictionaryconverter.cpp", 454, "Failed to retrieve gaze from the animation dictionary.", v263);
        sub_1C9909318((uint64_t)&v360);
        v165 = (std::__shared_weak_count *)*((_QWORD *)&v292 + 1);
        v166 = v275;
        if (!*((_QWORD *)&v292 + 1))
          goto LABEL_224;
        v169 = (unint64_t *)(*((_QWORD *)&v292 + 1) + 8);
        do
          v170 = __ldaxr(v169);
        while (__stlxr(v170 - 1, v169));
        if (v170)
        {
LABEL_224:
          free(*(void **)&rect.origin.x);
          v119 = 1;
          v120 = v276;
          goto LABEL_225;
        }
LABEL_218:
        ((void (*)(std::__shared_weak_count *))v165->__on_zero_shared)(v165);
        std::__shared_weak_count::__release_weak(v165);
        goto LABEL_224;
      }
      *(_QWORD *)&v285 = *(_QWORD *)v292;
      DWORD2(v285) = *(_DWORD *)(v292 + 8);
      free((void *)v292);
      cva::ItemHandler::~ItemHandler((cva::ItemHandler *)v290);
      *(_QWORD *)&v292 = v127;
      if ((sub_1C98FDBFC((cva::DictionaryHandler **)&v292, CFSTR("left_eye_pitch"), (_DWORD *)&v285 + 3) & 1) == 0
        || !sub_1C98FDBFC((cva::DictionaryHandler **)&v292, CFSTR("right_eye_pitch"), &v286)
        || !sub_1C98FDBFC((cva::DictionaryHandler **)&v292, CFSTR("left_eye_yaw"), (_DWORD *)&v286 + 1)
        || !sub_1C98FDBFC((cva::DictionaryHandler **)&v292, CFSTR("right_eye_yaw"), (_DWORD *)&v286 + 2)
        || !sub_1C98FDBFC((cva::DictionaryHandler **)&v292, CFSTR("studio_blink_left"), (_DWORD *)&v286 + 3)|| !sub_1C98FDBFC((cva::DictionaryHandler **)&v292, CFSTR("studio_blink_right"), &v287)|| !sub_1C98FDBFC((cva::DictionaryHandler **)&v292, CFSTR("virtual_blink_left"), (_DWORD *)&v287 + 1)|| (sub_1C98FDBFC((cva::DictionaryHandler **)&v292, CFSTR("virtual_blink_right"), (_DWORD *)&v287 + 2) & 1) == 0)
      {
        free(*(void **)&x);
LABEL_246:
        v119 = 1;
        v166 = v275;
        v120 = v276;
        goto LABEL_225;
      }
      v134 = sub_1C98FDBFC((cva::DictionaryHandler **)&v292, CFSTR("tongue_out"), (_DWORD *)&v287 + 3);
      free(*(void **)&x);
      if (!v134)
        goto LABEL_246;
      v135 = v272 + 1168 * v98;
      *(_DWORD *)(v135 + 392) = HIDWORD(v287);
      *(_BYTE *)(v135 + 396) = 1;
      v136 = *(unsigned __int8 *)(v135 + 308);
      *(_QWORD *)(v135 + 296) = v285;
      *(_DWORD *)(v135 + 304) = DWORD2(v285);
      if (!v136)
        *(_BYTE *)(v135 + 308) = 1;
      v137 = v272 + 1168 * v98;
      v138 = v137 + 264;
      if (*(_BYTE *)(v137 + 288))
        free(*(void **)v138);
      *(_QWORD *)v138 = 0;
      *(_QWORD *)(v138 + 8) = 0;
      *(_DWORD *)(v138 + 16) = 0;
      v119 = 1;
      *(_BYTE *)(v138 + 24) = 1;
      v139 = cf;
      if (sub_1C98FD5B8((const __CFData *)cf, v138))
      {
        v140 = HIDWORD(v286);
        v141 = *(_DWORD **)v138;
        *v141 = HIDWORD(v286);
        v142 = v287;
        v141[1] = v287;
        v143 = v272 + 1168 * v98;
        *(_DWORD *)(v143 + 328) = v140;
        *(_BYTE *)(v143 + 332) = 1;
        *(_DWORD *)(v143 + 336) = v142;
        *(_BYTE *)(v143 + 340) = 1;
        *(_DWORD *)(v143 + 312) = DWORD1(v287);
        *(_BYTE *)(v143 + 316) = 1;
        *(_DWORD *)(v143 + 320) = DWORD2(v287);
        *(_BYTE *)(v143 + 324) = 1;
        *(_DWORD *)(v143 + 344) = HIDWORD(v285);
        *(_BYTE *)(v143 + 348) = 1;
        *(_DWORD *)(v143 + 352) = v286;
        *(_BYTE *)(v143 + 356) = 1;
        *(_DWORD *)(v143 + 360) = DWORD1(v286);
        *(_BYTE *)(v143 + 364) = 1;
        *(_DWORD *)(v143 + 368) = DWORD2(v286);
        *(_BYTE *)(v143 + 372) = 1;
        cva::DictionaryHandler::item(v126, CFSTR("geometry"));
        cva::ItemHandler::getDictionary((cva::ItemHandler *)&v360);
        v144 = (cva::DictionaryHandler *)time.value;
        v265 = *(std::__shared_weak_count **)&time.timescale;
        time.value = 0;
        *(_QWORD *)&time.timescale = 0;
        cva::ItemHandler::~ItemHandler((cva::ItemHandler *)&v360);
        v264 = v100;
        cva::DictionaryHandler::item(v100, CFSTR("smooth_data"));
        cva::ItemHandler::getDictionary((cva::ItemHandler *)&v360);
        v145 = (cva::DictionaryHandler *)time.value;
        v146 = *(std::__shared_weak_count **)&time.timescale;
        time.value = 0;
        *(_QWORD *)&time.timescale = 0;
        cva::ItemHandler::~ItemHandler((cva::ItemHandler *)&v360);
        cva::DictionaryHandler::item(v145, CFSTR("geometry"));
        cva::ItemHandler::getDictionary((cva::ItemHandler *)&v360);
        v147 = (cva::DictionaryHandler *)time.value;
        v148 = *(std::__shared_weak_count **)&time.timescale;
        time.value = 0;
        *(_QWORD *)&time.timescale = 0;
        cva::ItemHandler::~ItemHandler((cva::ItemHandler *)&v360);
        v149 = (_DWORD *)(v143 + 400);
        v150 = *(unsigned __int8 *)(v143 + 412);
        *(_QWORD *)(v143 + 400) = 0;
        *(_DWORD *)(v143 + 408) = 0;
        if (!v150)
          *(_BYTE *)(v143 + 412) = 1;
        v266 = v98;
        v151 = v272 + 1168 * v98;
        v152 = *(unsigned __int8 *)(v151 + 428);
        v153 = (_DWORD *)(v151 + 416);
        *(_QWORD *)(v151 + 416) = 0;
        *(_DWORD *)(v151 + 424) = 0;
        if (!v152)
          *(_BYTE *)(v151 + 428) = 1;
        if (v144)
          v147 = v144;
        cva::DictionaryHandler::item(v147, CFSTR("left_eye"));
        cva::ItemHandler::getVector<float>();
        v154 = (_DWORD *)time.value;
        if (LODWORD(time.epoch) == 3)
        {
          *v149 = *(_DWORD *)time.value;
          v149[1] = v154[1];
          v149[2] = v154[2];
        }
        free(v154);
        cva::ItemHandler::~ItemHandler((cva::ItemHandler *)&v360);
        cva::DictionaryHandler::item(v147, CFSTR("right_eye"));
        cva::ItemHandler::getVector<float>();
        v155 = (_DWORD *)time.value;
        if (LODWORD(time.epoch) == 3)
        {
          *v153 = *(_DWORD *)time.value;
          v153[1] = v155[1];
          v153[2] = v155[2];
        }
        free(v155);
        cva::ItemHandler::~ItemHandler((cva::ItemHandler *)&v360);
        if (cva::DictionaryHandler::hasKey(v147, CFSTR("keypoints")))
        {
          cva::DictionaryHandler::item(v147, CFSTR("keypoints"));
          cva::ItemHandler::getDictionary((cva::ItemHandler *)&v360);
          v156 = (cva::DictionaryHandler *)time.value;
          v157 = *(std::__shared_weak_count **)&time.timescale;
          time.value = 0;
          *(_QWORD *)&time.timescale = 0;
          cva::ItemHandler::~ItemHandler((cva::ItemHandler *)&v360);
          v158 = v272 + 1168 * v266;
          *(_OWORD *)(v158 + 448) = 0u;
          *(_OWORD *)(v158 + 464) = 0u;
          *(_OWORD *)(v158 + 432) = 0u;
          *(_BYTE *)(v158 + 480) = 1;
          cva::DictionaryHandler::item(v156, CFSTR("infraorbital_left"));
          cva::ItemHandler::getVector<float>();
          v159 = (_DWORD *)time.value;
          *(_DWORD *)(v158 + 432) = *(_DWORD *)time.value;
          *(_DWORD *)(v158 + 436) = v159[1];
          *(_DWORD *)(v158 + 440) = v159[2];
          free(v159);
          cva::ItemHandler::~ItemHandler((cva::ItemHandler *)&v360);
          cva::DictionaryHandler::item(v156, CFSTR("infraorbital_right"));
          cva::ItemHandler::getVector<float>();
          v160 = (_DWORD *)time.value;
          *(_DWORD *)(v158 + 444) = *(_DWORD *)time.value;
          *(_DWORD *)(v158 + 448) = v160[1];
          *(_DWORD *)(v158 + 452) = v160[2];
          free(v160);
          cva::ItemHandler::~ItemHandler((cva::ItemHandler *)&v360);
          cva::DictionaryHandler::item(v156, CFSTR("tragion_left"));
          cva::ItemHandler::getVector<float>();
          v161 = (_DWORD *)time.value;
          *(_DWORD *)(v158 + 456) = *(_DWORD *)time.value;
          *(_DWORD *)(v158 + 460) = v161[1];
          *(_DWORD *)(v158 + 464) = v161[2];
          free(v161);
          cva::ItemHandler::~ItemHandler((cva::ItemHandler *)&v360);
          cva::DictionaryHandler::item(v156, CFSTR("tragion_right"));
          cva::ItemHandler::getVector<float>();
          v162 = (_DWORD *)time.value;
          *(_DWORD *)(v158 + 468) = *(_DWORD *)time.value;
          *(_DWORD *)(v158 + 472) = v162[1];
          *(_DWORD *)(v158 + 476) = v162[2];
          free(v162);
          cva::ItemHandler::~ItemHandler((cva::ItemHandler *)&v360);
          cva::DictionaryHandler::item(v156, CFSTR("keypoints_model_version"));
          cva::ItemHandler::getValue<std::string>();
          v163 = (void **)(v158 + 528);
          if (*(_BYTE *)(v158 + 552))
          {
            if (*(char *)(v158 + 551) < 0)
              operator delete(*v163);
            v164 = *(_OWORD *)&time.value;
            *(_QWORD *)(v158 + 544) = time.epoch;
            *(_OWORD *)v163 = v164;
            HIBYTE(time.epoch) = 0;
            LOBYTE(time.value) = 0;
          }
          else
          {
            v177 = *(_OWORD *)&time.value;
            *(_QWORD *)(v158 + 544) = time.epoch;
            *(_OWORD *)v163 = v177;
            memset(&time, 0, sizeof(time));
            *(_BYTE *)(v158 + 552) = 1;
            if (SHIBYTE(time.epoch) < 0)
              operator delete((void *)time.value);
          }
          cva::ItemHandler::~ItemHandler((cva::ItemHandler *)&v360);
          if (v157)
          {
            v178 = (unint64_t *)&v157->__shared_owners_;
            do
              v179 = __ldaxr(v178);
            while (__stlxr(v179 - 1, v178));
            if (!v179)
            {
              ((void (*)(std::__shared_weak_count *))v157->__on_zero_shared)(v157);
              std::__shared_weak_count::__release_weak(v157);
            }
          }
        }
        if (v148)
        {
          v180 = (unint64_t *)&v148->__shared_owners_;
          do
            v181 = __ldaxr(v180);
          while (__stlxr(v181 - 1, v180));
          if (!v181)
          {
            ((void (*)(std::__shared_weak_count *))v148->__on_zero_shared)(v148);
            std::__shared_weak_count::__release_weak(v148);
          }
        }
        if (v146)
        {
          v182 = (unint64_t *)&v146->__shared_owners_;
          do
            v183 = __ldaxr(v182);
          while (__stlxr(v183 - 1, v182));
          if (!v183)
          {
            ((void (*)(std::__shared_weak_count *))v146->__on_zero_shared)(v146);
            std::__shared_weak_count::__release_weak(v146);
          }
        }
        if (v144 && cva::DictionaryHandler::hasKey(v144, CFSTR("vertices")))
        {
          v184 = v272 + 1168 * v266;
          v185 = (void **)(v184 + 488);
          if (*(_BYTE *)(v184 + 512))
          {
            v186 = *v185;
            *(_DWORD *)(v184 + 504) = 0;
            *v185 = 0;
            *(_QWORD *)(v184 + 496) = 0;
          }
          else
          {
            v186 = 0;
            *v185 = 0;
            *(_QWORD *)(v184 + 496) = 0;
            *(_DWORD *)(v184 + 504) = 0;
            *(_BYTE *)(v184 + 512) = 1;
          }
          free(v186);
          if (!cva::DictionaryHandler::hasKey(v144, CFSTR("vertices")))
            goto LABEL_374;
          cva::DictionaryHandler::item(v144, CFSTR("vertices"));
          v187 = (const __CFData *)cva::ItemHandler::getData((cva::ItemHandler *)&time);
          v188 = sub_1C98FD5B8(v187, (uint64_t)v185);
          cva::ItemHandler::~ItemHandler((cva::ItemHandler *)&time);
          if (!v188)
            goto LABEL_374;
        }
        if (cva::DictionaryHandler::hasKey(v126, CFSTR("head_scale")))
        {
          cva::DictionaryHandler::item(v126, CFSTR("head_scale"));
          cva::ItemHandler::getValue<float>();
          v189 = v272 + 1168 * v266;
          *(_DWORD *)(v189 + 520) = v190;
          *(_BYTE *)(v189 + 524) = 1;
          cva::ItemHandler::~ItemHandler((cva::ItemHandler *)&time);
        }
        if (!cva::DictionaryHandler::hasKey(v126, CFSTR("pose")))
          goto LABEL_374;
        v293 = 0x3F800000uLL;
        v292 = 0x3F800000uLL;
        v294 = 1065353216;
        v295 = 0;
        v296 = 0;
        cva::DictionaryHandler::item(v126, CFSTR("pose"));
        cva::ItemHandler::getDictionary((cva::ItemHandler *)&v360);
        v191 = sub_1C98E67B4((cva::DictionaryHandler *)time.value, &v292, &v295);
        v192 = *(std::__shared_weak_count **)&time.timescale;
        if (*(_QWORD *)&time.timescale)
        {
          v193 = (unint64_t *)(*(_QWORD *)&time.timescale + 8);
          do
            v194 = __ldaxr(v193);
          while (__stlxr(v194 - 1, v193));
          if (!v194)
          {
            ((void (*)(std::__shared_weak_count *))v192->__on_zero_shared)(v192);
            std::__shared_weak_count::__release_weak(v192);
          }
        }
        cva::ItemHandler::~ItemHandler((cva::ItemHandler *)&v360);
        if (!v191)
          goto LABEL_374;
        v195 = v272 + 1168 * v266;
        v196 = *(unsigned __int8 *)(v195 + 256);
        *(_OWORD *)(v195 + 208) = v292;
        *(_OWORD *)(v195 + 224) = v293;
        *(_DWORD *)(v195 + 240) = v294;
        *(_QWORD *)(v195 + 244) = v295;
        *(_DWORD *)(v195 + 252) = v296;
        if (!v196)
          *(_BYTE *)(v195 + 256) = 1;
        if (cva::DictionaryHandler::hasKey(v264, CFSTR("raw_data")))
        {
          cva::DictionaryHandler::item(v264, CFSTR("raw_data"));
          cva::ItemHandler::getDictionary((cva::ItemHandler *)&v360);
          cva::ItemHandler::~ItemHandler((cva::ItemHandler *)&v360);
          if (cva::DictionaryHandler::hasKey((cva::DictionaryHandler *)time.value, CFSTR("e_d")))
          {
            cva::DictionaryHandler::item((cva::DictionaryHandler *)time.value, CFSTR("e_d"));
            cva::ItemHandler::getDictionary((cva::ItemHandler *)&rect);
            v197 = v272 + 1168 * v266;
            v198 = *(_OWORD *)&v360.value;
            *(_QWORD *)&v360.timescale = 0;
            v360.value = 0;
            v199 = *(std::__shared_weak_count **)(v197 + 616);
            *(_OWORD *)(v197 + 608) = v198;
            if (v199)
            {
              v200 = (unint64_t *)&v199->__shared_owners_;
              do
                v201 = __ldaxr(v200);
              while (__stlxr(v201 - 1, v200));
              if (!v201)
              {
                ((void (*)(std::__shared_weak_count *))v199->__on_zero_shared)(v199);
                std::__shared_weak_count::__release_weak(v199);
              }
            }
            v202 = *(std::__shared_weak_count **)&v360.timescale;
            if (*(_QWORD *)&v360.timescale)
            {
              v203 = (unint64_t *)(*(_QWORD *)&v360.timescale + 8);
              do
                v204 = __ldaxr(v203);
              while (__stlxr(v204 - 1, v203));
              if (!v204)
              {
                ((void (*)(std::__shared_weak_count *))v202->__on_zero_shared)(v202);
                std::__shared_weak_count::__release_weak(v202);
              }
            }
            cva::ItemHandler::~ItemHandler((cva::ItemHandler *)&rect);
          }
          v205 = *(std::__shared_weak_count **)&time.timescale;
          if (*(_QWORD *)&time.timescale)
          {
            v206 = (unint64_t *)(*(_QWORD *)&time.timescale + 8);
            do
              v207 = __ldaxr(v206);
            while (__stlxr(v207 - 1, v206));
            if (!v207)
            {
              ((void (*)(std::__shared_weak_count *))v205->__on_zero_shared)(v205);
              std::__shared_weak_count::__release_weak(v205);
            }
          }
        }
        if (v144 && cva::DictionaryHandler::hasKey(v144, CFSTR("landmarks")))
        {
          memset(&time, 0, 20);
          v208 = 0;
          if (cva::DictionaryHandler::hasKey(v144, CFSTR("landmarks")))
          {
            cva::DictionaryHandler::item(v144, CFSTR("landmarks"));
            v209 = (const __CFData *)cva::ItemHandler::getData((cva::ItemHandler *)&v360);
            v210 = sub_1C98FD5B8(v209, (uint64_t)&time);
            cva::ItemHandler::~ItemHandler((cva::ItemHandler *)&v360);
            v208 = (void *)time.value;
            if (v210)
            {
              v211 = LODWORD(time.epoch) >> 1;
              LODWORD(v360.value) = LODWORD(time.epoch) >> 1;
              *(_QWORD *)&v360.timescale = time.value;
              v360.epoch = 2;
              v212 = v272 + 1168 * v266;
              sub_1C98FD690(v212 + 944, (int *)&v360);
              sub_1C990ABC8(&rect);
              if (*(_BYTE *)(v212 + 936))
              {
                sub_1C990B6E0((uint64_t *)(v212 + 928), *(uint64_t *)&rect.origin.x);
              }
              else
              {
                sub_1C990AD90((uint64_t *)(v212 + 928), (uint64_t *)&rect);
                *(_BYTE *)(v212 + 936) = 1;
              }
              sub_1C990C17C((uint64_t *)&rect);
              v282 = v211;
              v283 = v208;
              v284 = 2;
              sub_1C98DEE6C((uint64_t)&v282, (uint64_t *)(v212 + 928));
              free(v208);
              goto LABEL_311;
            }
          }
          free(v208);
LABEL_374:
          v119 = 1;
LABEL_375:
          if (v265)
          {
            v257 = (unint64_t *)&v265->__shared_owners_;
            do
              v258 = __ldaxr(v257);
            while (__stlxr(v258 - 1, v257));
            if (!v258)
            {
              ((void (*)(std::__shared_weak_count *))v265->__on_zero_shared)(v265);
              std::__shared_weak_count::__release_weak(v265);
            }
          }
          v88 = (_QWORD *)(a4 + 64);
          v92 = v269;
          v166 = v275;
          v120 = v276;
          v98 = v266;
LABEL_225:
          v139 = cf;
          if (!cf)
            goto LABEL_227;
LABEL_226:
          CFRelease(v139);
          goto LABEL_227;
        }
LABEL_311:
        v4 &= 0xFFFFFF00;
        if (!cva::DictionaryHandler::hasKey(v264, CFSTR("Rect"))
          || (cva::DictionaryHandler::hasKey(v264, CFSTR("AngleInfoRoll")) & 1) == 0)
        {
          sub_1C99072C4(&rect);
          sub_1C9907EC4(&time, &rect, 0, 0, "[RELEASE ERROR  ]", "/Library/Caches/com.apple.xbs/Sources/AppleCVA/shared/src/modules/avatar/facekit/facekitdictionaryconverter.cpp", 399, "dictionary doesn't contain face detection keys", v263);
          sub_1C9909318((uint64_t)&time);
          y = rect.origin.y;
          if (*(_QWORD *)&rect.origin.y)
          {
            v222 = (unint64_t *)(*(_QWORD *)&rect.origin.y + 8);
            do
              v223 = __ldaxr(v222);
            while (__stlxr(v223 - 1, v222));
            if (!v223)
            {
              (*(void (**)(CGFloat))(**(_QWORD **)&y + 16))(COERCE_CGFLOAT(*(_QWORD *)&y));
              std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&y);
            }
          }
          goto LABEL_374;
        }
        cva::DictionaryHandler::item(v264, CFSTR("Rect"));
        cva::ItemHandler::getDictionary((cva::ItemHandler *)v290);
        v214 = rect.origin.x;
        v213 = rect.origin.y;
        rect.origin.x = 0.0;
        rect.origin.y = 0.0;
        cva::ItemHandler::~ItemHandler((cva::ItemHandler *)v290);
        if (v214 == 0.0
          || (v215 = *(CGSize *)(MEMORY[0x1E0C9D648] + 16),
              rect.origin = (CGPoint)*MEMORY[0x1E0C9D648],
              rect.size = v215,
              v216 = (const __CFDictionary *)cva::DictionaryHandler::getDictionary(*(cva::DictionaryHandler **)&v214),
              !CGRectMakeWithDictionaryRepresentation(v216, &rect)))
        {
          sub_1C99072C4(&rect);
          sub_1C9907EC4(&v360, &rect, 0, 0, "[RELEASE ERROR  ]", "/Library/Caches/com.apple.xbs/Sources/AppleCVA/shared/src/modules/avatar/facekit/facekitdictionaryconverter.cpp", 408, "couldn't convert face rectangle dictionary", v263);
          sub_1C9909318((uint64_t)&v360);
          v224 = rect.origin.y;
          if (*(_QWORD *)&rect.origin.y)
          {
            v225 = (unint64_t *)(*(_QWORD *)&rect.origin.y + 8);
            do
              v226 = __ldaxr(v225);
            while (__stlxr(v226 - 1, v225));
            if (!v226)
            {
              (*(void (**)(CGFloat))(**(_QWORD **)&v224 + 16))(COERCE_CGFLOAT(*(_QWORD *)&v224));
              std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&v224);
            }
          }
          v220 = 0;
          v263 = 0u;
        }
        else
        {
          v217 = vcvt_f32_s32(*v267);
          *(float32x2_t *)&v218 = vadd_f32(vmul_f32(vcvt_f32_f64((float64x2_t)rect.origin), v217), (float32x2_t)0xBF000000BF000000);
          *((float32x2_t *)&v218 + 1) = vmul_f32(vcvt_f32_f64((float64x2_t)rect.size), v217);
          v263 = v218;
          cva::DictionaryHandler::item(v264, CFSTR("AngleInfoRoll"));
          cva::ItemHandler::getValue<float>();
          v4 = v219;
          cva::ItemHandler::~ItemHandler((cva::ItemHandler *)&rect);
          v220 = 1;
        }
        if (v213 == 0.0)
          goto LABEL_331;
        v227 = (unint64_t *)(*(_QWORD *)&v213 + 8);
        do
          v228 = __ldaxr(v227);
        while (__stlxr(v228 - 1, v227));
        if (v228)
        {
LABEL_331:
          if (!v220)
            goto LABEL_374;
        }
        else
        {
          (*(void (**)(CGFloat))(**(_QWORD **)&v213 + 16))(COERCE_CGFLOAT(*(_QWORD *)&v213));
          std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&v213);
          if ((v220 & 1) == 0)
            goto LABEL_374;
        }
        v229 = v272 + 1168 * v266;
        v230 = *(unsigned __int8 *)(v229 + 920);
        *(_DWORD *)(v229 + 872) = 4;
        v231 = v229 + 816;
        *(_OWORD *)(v229 + 876) = v263;
        *(_DWORD *)(v229 + 892) = v4;
        *(_BYTE *)(v229 + 896) = v220;
        *(_BYTE *)(v229 + 899) = v281;
        *(_WORD *)(v229 + 897) = v280;
        *(_BYTE *)(v229 + 900) = 0;
        *(_BYTE *)(v229 + 903) = v279;
        *(_WORD *)(v229 + 901) = v278;
        *(_BYTE *)(v229 + 904) = 0;
        *(_DWORD *)(v229 + 908) = *(_DWORD *)&v277[3];
        *(_DWORD *)(v229 + 905) = *(_DWORD *)v277;
        *(_QWORD *)(v229 + 912) = 0;
        if (!v230)
          *(_BYTE *)(v229 + 920) = 1;
        v232 = *(unsigned __int8 *)(v229 + 864);
        *(_DWORD *)v231 = 4;
        *(_OWORD *)(v231 + 4) = v263;
        *(_DWORD *)(v231 + 20) = v4;
        *(_BYTE *)(v231 + 24) = v220;
        *(_WORD *)(v231 + 25) = v280;
        *(_BYTE *)(v231 + 27) = v281;
        *(_BYTE *)(v231 + 28) = 0;
        *(_WORD *)(v231 + 29) = v278;
        *(_BYTE *)(v231 + 31) = v279;
        *(_BYTE *)(v231 + 32) = 0;
        *(_DWORD *)(v231 + 33) = *(_DWORD *)v277;
        *(_DWORD *)(v231 + 36) = *(_DWORD *)&v277[3];
        *(_QWORD *)(v231 + 40) = 0;
        if (!v232)
          *(_BYTE *)(v231 + 48) = 1;
        cva::DictionaryHandler::item(v264, CFSTR("failure_type"));
        v233 = cva::ItemHandler::getValue<int>();
        cva::ItemHandler::~ItemHandler((cva::ItemHandler *)&time);
        v234 = v272 + 1168 * v266;
        *(_DWORD *)(v234 + 148) = 2 * (v233 == 0);
        *(_BYTE *)(v234 + 152) = 1;
        *(_DWORD *)(v234 + 164) = v233;
        *(_BYTE *)(v234 + 168) = 1;
        ErrorDescription_0 = (const __CFString *)CVAFaceTrackingGetErrorDescription_0(v233);
        CStringPtr = CFStringGetCStringPtr(ErrorDescription_0, 0x8000100u);
        v237 = strlen(CStringPtr);
        if (v237 >= 0x7FFFFFFFFFFFFFF8)
          abort();
        v238 = v237;
        if (v237 >= 0x17)
        {
          v240 = (v237 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v237 | 7) != 0x17)
            v240 = v237 | 7;
          v241 = v240 + 1;
          v239 = operator new(v240 + 1);
          *(_QWORD *)&time.timescale = v238;
          time.epoch = v241 | 0x8000000000000000;
          time.value = (CMTimeValue)v239;
        }
        else
        {
          HIBYTE(time.epoch) = v237;
          v239 = &time;
          if (!v237)
          {
LABEL_346:
            v239[v238] = 0;
            v242 = v272 + 1168 * v266;
            v243 = (void **)(v242 + 176);
            if (*(_BYTE *)(v242 + 200))
            {
              if (*(char *)(v242 + 199) < 0)
                operator delete(*v243);
              *(CMTime *)v243 = time;
            }
            else
            {
              *(_OWORD *)v243 = *(_OWORD *)&time.value;
              *(_QWORD *)(v242 + 192) = time.epoch;
              *(_BYTE *)(v242 + 200) = 1;
            }
            v244 = v272 + 1168 * v266;
            *(_DWORD *)(v244 + 376) = 0;
            *(_BYTE *)(v244 + 380) = 1;
            *(_DWORD *)(v244 + 384) = 0;
            *(_BYTE *)(v244 + 388) = 1;
            if (cva::DictionaryHandler::hasKey(v264, CFSTR("debug")))
            {
              cva::DictionaryHandler::item(v264, CFSTR("debug"));
              cva::ItemHandler::getDictionary((cva::ItemHandler *)&rect);
              *(_OWORD *)&v360.value = *(_OWORD *)&time.value;
              time.value = 0;
              *(_QWORD *)&time.timescale = 0;
              cva::ItemHandler::~ItemHandler((cva::ItemHandler *)&rect);
              if (cva::DictionaryHandler::hasKey((cva::DictionaryHandler *)v360.value, CFSTR("identity_snapshot_coefficients")))
              {
                v245 = v272 + 1168 * v266;
                v246 = (void **)(v245 + 32);
                if (*(_BYTE *)(v245 + 56))
                {
                  v247 = *v246;
                  *(_DWORD *)(v245 + 48) = 0;
                  *v246 = 0;
                  *(_QWORD *)(v245 + 40) = 0;
                }
                else
                {
                  v247 = 0;
                  *v246 = 0;
                  *(_QWORD *)(v245 + 40) = 0;
                  *(_DWORD *)(v245 + 48) = 0;
                  *(_BYTE *)(v245 + 56) = 1;
                }
                free(v247);
                v248 = (cva::DictionaryHandler *)v360.value;
                if (!cva::DictionaryHandler::hasKey((cva::DictionaryHandler *)v360.value, CFSTR("identity_snapshot_coefficients")))goto LABEL_373;
                cva::DictionaryHandler::item(v248, CFSTR("identity_snapshot_coefficients"));
                v249 = (const __CFData *)cva::ItemHandler::getData((cva::ItemHandler *)&time);
                v250 = sub_1C98FD5B8(v249, (uint64_t)v246);
                cva::ItemHandler::~ItemHandler((cva::ItemHandler *)&time);
                if (!v250)
                  goto LABEL_373;
              }
              if (!cva::DictionaryHandler::hasKey((cva::DictionaryHandler *)v360.value, CFSTR("faceprint_snapshot_coefficients")))goto LABEL_367;
              v251 = v272 + 1168 * v266;
              v252 = (void **)(v251 + 64);
              if (*(_BYTE *)(v251 + 88))
              {
                v253 = *v252;
                *(_DWORD *)(v251 + 80) = 0;
                *v252 = 0;
                *(_QWORD *)(v251 + 72) = 0;
              }
              else
              {
                v253 = 0;
                *v252 = 0;
                *(_QWORD *)(v251 + 72) = 0;
                *(_DWORD *)(v251 + 80) = 0;
                *(_BYTE *)(v251 + 88) = 1;
              }
              free(v253);
              if (!sub_1C98FDB10((cva::DictionaryHandler *)v360.value, (uint64_t)v252))
              {
LABEL_373:
                sub_1C987C140((uint64_t)&v360);
                goto LABEL_374;
              }
              if (cva::DictionaryHandler::hasKey((cva::DictionaryHandler *)v360.value, CFSTR("recognition_framework_version")))
              {
                cva::DictionaryHandler::item((cva::DictionaryHandler *)v360.value, CFSTR("recognition_framework_version"));
                cva::ItemHandler::getValue<std::string>();
                sub_1C98FDB84(v272 + 1168 * v266 + 96, (__int128 *)&time.value);
                if (SHIBYTE(time.epoch) < 0)
                  operator delete((void *)time.value);
                cva::ItemHandler::~ItemHandler((cva::ItemHandler *)&rect);
              }
LABEL_367:
              v254 = *(std::__shared_weak_count **)&v360.timescale;
              if (*(_QWORD *)&v360.timescale)
              {
                v255 = (unint64_t *)(*(_QWORD *)&v360.timescale + 8);
                do
                  v256 = __ldaxr(v255);
                while (__stlxr(v256 - 1, v255));
                if (!v256)
                {
                  ((void (*)(std::__shared_weak_count *))v254->__on_zero_shared)(v254);
                  std::__shared_weak_count::__release_weak(v254);
                }
              }
            }
            v119 = 0;
            goto LABEL_375;
          }
        }
        memmove(v239, CStringPtr, v238);
        goto LABEL_346;
      }
      v166 = v275;
      v120 = v276;
      if (v139)
        goto LABEL_226;
LABEL_227:
      if (v274)
      {
        v171 = (unint64_t *)&v274->__shared_owners_;
        do
          v172 = __ldaxr(v171);
        while (__stlxr(v172 - 1, v171));
        if (!v172)
        {
          ((void (*)(std::__shared_weak_count *))v274->__on_zero_shared)(v274);
          std::__shared_weak_count::__release_weak(v274);
        }
      }
      if (v166)
      {
        v173 = (unint64_t *)&v166->__shared_owners_;
        do
          v174 = __ldaxr(v173);
        while (__stlxr(v174 - 1, v173));
        if (!v174)
        {
          ((void (*)(std::__shared_weak_count *))v166->__on_zero_shared)(v166);
          std::__shared_weak_count::__release_weak(v166);
        }
      }
LABEL_237:
      if (v120)
      {
        v175 = (unint64_t *)&v120->__shared_owners_;
        do
          v176 = __ldaxr(v175);
        while (__stlxr(v176 - 1, v175));
        if (!v176)
        {
          ((void (*)(std::__shared_weak_count *))v120->__on_zero_shared)(v120);
          std::__shared_weak_count::__release_weak(v120);
        }
      }
      if (v119)
      {
        v16 = 0;
        goto LABEL_382;
      }
      if (++v98 >= (int)(-941362695 * ((*(_QWORD *)(a4 + 72) - *(_QWORD *)(a4 + 64)) >> 4)))
        goto LABEL_381;
    }
  }
LABEL_383:
  v259 = v16;
  if (v8)
  {
    v260 = (unint64_t *)&v8->__shared_owners_;
    do
      v261 = __ldaxr(v260);
    while (__stlxr(v261 - 1, v260));
    if (!v261)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  cva::DictionaryHandler::~DictionaryHandler((cva::DictionaryHandler *)v289);
  return v259;
}

const __CFData *sub_1C98FD5B8(const __CFData *result, uint64_t a2)
{
  const __CFData *v3;
  unsigned int Length;
  unsigned int v5;
  size_t v6;
  unint64_t v7;
  size_t v8;
  void *v9;
  const UInt8 *BytePtr;
  void *memptr;

  if (result)
  {
    v3 = result;
    Length = CFDataGetLength(result);
    if ((Length & 3) != 0)
    {
      return 0;
    }
    else
    {
      v5 = Length;
      v6 = Length;
      v7 = (unint64_t)Length >> 2;
      *(_DWORD *)(a2 + 16) = v7;
      if ((_DWORD)v7)
      {
        if (*(_QWORD *)(a2 + 8) < v7)
        {
          free(*(void **)a2);
          v8 = ((v5 & 0xFFFFFFFC) + 31) & 0x1FFFFFFE0;
          *(_QWORD *)a2 = 0;
          *(_QWORD *)(a2 + 8) = v8 >> 2;
          memptr = 0;
          malloc_type_posix_memalign(&memptr, 0x20uLL, v8, 0x49090899uLL);
          *(_QWORD *)a2 = memptr;
        }
      }
      else
      {
        free(*(void **)a2);
        *(_QWORD *)a2 = 0;
        *(_QWORD *)(a2 + 8) = 0;
      }
      if (v6)
      {
        v9 = *(void **)a2;
        BytePtr = CFDataGetBytePtr(v3);
        memcpy(v9, BytePtr, v6);
      }
      return (const __CFData *)1;
    }
  }
  return result;
}

uint64_t sub_1C98FD690(uint64_t a1, int *a2)
{
  int v4;
  int v5;
  _DWORD *v6;
  int v7;
  uint64_t v8;
  unint64_t v9;
  _DWORD *v10;
  uint64_t v11;
  unint64_t v12;
  BOOL v13;
  _DWORD *v14;
  uint64_t v15;
  unint64_t v16;
  size_t v17;
  _DWORD *v18;
  int v19;
  uint64_t v20;
  unint64_t v21;
  _DWORD *v22;
  uint64_t v23;
  unint64_t v24;
  BOOL v25;
  _DWORD *v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  size_t v30;
  uint64_t v31;
  size_t v32;
  size_t v33;
  void *v34;
  unint64_t v35;
  _DWORD *v36;
  _DWORD *v37;
  unint64_t v38;
  BOOL v39;
  _DWORD *v40;
  uint64_t v41;
  unint64_t v42;
  _DWORD *v43;
  uint64_t v44;
  size_t v45;
  size_t v46;
  void *v47;
  unint64_t v48;
  _DWORD *v49;
  _DWORD *v50;
  unint64_t v51;
  BOOL v52;
  _DWORD *v53;
  uint64_t v54;
  unint64_t v55;
  _DWORD *v56;
  size_t v57;
  char *v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  _DWORD *v63;
  unint64_t v64;
  BOOL v65;
  _DWORD *v66;
  uint64_t v67;
  unint64_t v68;
  void *v69;
  uint64_t v70;
  unint64_t v71;
  _DWORD *v72;
  _DWORD *v73;
  unint64_t v74;
  BOOL v75;
  _DWORD *v76;
  uint64_t v77;
  unint64_t v78;
  void *memptr;

  if (*(_BYTE *)(a1 + 24))
  {
    v4 = *a2;
    v5 = *(_DWORD *)(a1 + 16);
    v6 = *(_DWORD **)a1;
    if (*a2 != v5)
    {
      if ((_DWORD *)(*((_QWORD *)a2 + 1) - 4 * a2[5]) == v6)
      {
        v57 = (4 * (2 * v4) + 31) & 0x7FFFFFFE0;
        memptr = 0;
        malloc_type_posix_memalign(&memptr, 0x20uLL, v57, 0x49090899uLL);
        v58 = (char *)memptr;
        v59 = *a2;
        v60 = (2 * *a2);
        if ((void *)(*((_QWORD *)a2 + 1) - 4 * a2[5]) == memptr)
        {
          v70 = 4 * v60;
          v57 = (4 * v60 + 31) & 0x7FFFFFFE0;
          memptr = 0;
          malloc_type_posix_memalign(&memptr, 0x20uLL, v57, 0x49090899uLL);
          v69 = memptr;
          if ((_DWORD)v60)
          {
            v71 = (unint64_t)(a2[4] - 2) << 32;
            v72 = (_DWORD *)*((_QWORD *)a2 + 1);
            if ((*a2 & 0x7FFFFFFF) == 0)
              v72 = 0;
            v73 = memptr;
            do
            {
              *v73++ = *v72;
              v74 = HIDWORD(v71);
              v75 = (int)v71 < 1;
              if ((int)v71 < 1)
                v74 = 0;
              v76 = &v72[v74];
              v77 = (v71 + 1);
              v78 = v71 & 0xFFFFFFFF00000000;
              if (!v75)
                v77 = 0;
              v71 = v77 | v78;
              v72 = v76 + 1;
              v70 -= 4;
            }
            while (v70);
          }
          free(v58);
        }
        else
        {
          if ((_DWORD)v60)
          {
            v61 = 0;
            v62 = (unint64_t)(a2[4] - 2) << 32;
            if ((v59 & 0x7FFFFFFF) != 0)
              v63 = (_DWORD *)*((_QWORD *)a2 + 1);
            else
              v63 = 0;
            do
            {
              *(_DWORD *)&v58[v61] = *v63;
              v64 = HIDWORD(v62);
              v65 = (int)v62 < 1;
              if ((int)v62 < 1)
                v64 = 0;
              v66 = &v63[v64];
              v67 = (v62 + 1);
              v68 = v62 & 0xFFFFFFFF00000000;
              if (!v65)
                v67 = 0;
              v62 = v67 | v68;
              v63 = v66 + 1;
              v61 += 4;
            }
            while (4 * v60 != v61);
          }
          v69 = v58;
        }
        v43 = *(_DWORD **)a1;
        *(_QWORD *)a1 = v69;
        *(_QWORD *)(a1 + 8) = v57 >> 2;
        *(_DWORD *)(a1 + 16) = v59;
        goto LABEL_75;
      }
      *(_DWORD *)(a1 + 16) = v4;
      v29 = (2 * v4);
      if ((_DWORD)v29)
      {
        if (*(_QWORD *)(a1 + 8) < v29)
        {
          free(v6);
          v30 = (4 * v29 + 31) & 0x7FFFFFFE0;
          *(_QWORD *)a1 = 0;
          *(_QWORD *)(a1 + 8) = v30 >> 2;
          memptr = 0;
          malloc_type_posix_memalign(&memptr, 0x20uLL, v30, 0x49090899uLL);
          v6 = memptr;
          *(_QWORD *)a1 = memptr;
        }
      }
      else
      {
        free(v6);
        v6 = 0;
        *(_QWORD *)a1 = 0;
        *(_QWORD *)(a1 + 8) = 0;
      }
    }
    v7 = *(_DWORD *)(a1 + 16);
    v8 = (2 * v7);
    if ((_DWORD *)(*((_QWORD *)a2 + 1) - 4 * a2[5]) != v6)
    {
      if ((_DWORD)v8)
      {
        v9 = (unint64_t)(a2[4] - 2) << 32;
        if ((*a2 & 0x7FFFFFFF) != 0)
          v10 = (_DWORD *)*((_QWORD *)a2 + 1);
        else
          v10 = 0;
        v11 = 4 * v8;
        do
        {
          *v6++ = *v10;
          v12 = HIDWORD(v9);
          v13 = (int)v9 < 1;
          if ((int)v9 < 1)
            v12 = 0;
          v14 = &v10[v12];
          v15 = (v9 + 1);
          v16 = v9 & 0xFFFFFFFF00000000;
          if (!v13)
            v15 = 0;
          v9 = v15 | v16;
          v10 = v14 + 1;
          v11 -= 4;
        }
        while (v11);
      }
      return a1;
    }
    v31 = 4 * v8;
    v32 = (4 * v8 + 31) & 0x7FFFFFFE0;
    v33 = v32 >> 2;
    memptr = 0;
    malloc_type_posix_memalign(&memptr, 0x20uLL, v32, 0x49090899uLL);
    v34 = memptr;
    if ((_DWORD)v8)
    {
      v35 = (unint64_t)(a2[4] - 2) << 32;
      v36 = (_DWORD *)*((_QWORD *)a2 + 1);
      if ((*a2 & 0x7FFFFFFF) == 0)
        v36 = 0;
      v37 = memptr;
      do
      {
        *v37++ = *v36;
        v38 = HIDWORD(v35);
        v39 = (int)v35 < 1;
        if ((int)v35 < 1)
          v38 = 0;
        v40 = &v36[v38];
        v41 = (v35 + 1);
        v42 = v35 & 0xFFFFFFFF00000000;
        if (!v39)
          v41 = 0;
        v35 = v41 | v42;
        v36 = v40 + 1;
        v31 -= 4;
      }
      while (v31);
    }
    v43 = *(_DWORD **)a1;
    *(_QWORD *)a1 = v34;
    *(_QWORD *)(a1 + 8) = v33;
    *(_DWORD *)(a1 + 16) = v7;
LABEL_75:
    free(v43);
    return a1;
  }
  v17 = (4 * (2 * *a2) + 31) & 0x7FFFFFFE0;
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = v17 >> 2;
  memptr = 0;
  malloc_type_posix_memalign(&memptr, 0x20uLL, v17, 0x49090899uLL);
  v18 = memptr;
  *(_QWORD *)a1 = memptr;
  v19 = *a2;
  *(_DWORD *)(a1 + 16) = *a2;
  v20 = (2 * v19);
  if ((_DWORD *)(*((_QWORD *)a2 + 1) - 4 * a2[5]) == v18)
  {
    v44 = 4 * v20;
    v45 = (4 * v20 + 31) & 0x7FFFFFFE0;
    v46 = v45 >> 2;
    memptr = 0;
    malloc_type_posix_memalign(&memptr, 0x20uLL, v45, 0x49090899uLL);
    v47 = memptr;
    if ((_DWORD)v20)
    {
      v48 = (unint64_t)(a2[4] - 2) << 32;
      v49 = (_DWORD *)*((_QWORD *)a2 + 1);
      if ((*a2 & 0x7FFFFFFF) == 0)
        v49 = 0;
      v50 = memptr;
      do
      {
        *v50++ = *v49;
        v51 = HIDWORD(v48);
        v52 = (int)v48 < 1;
        if ((int)v48 < 1)
          v51 = 0;
        v53 = &v49[v51];
        v54 = (v48 + 1);
        v55 = v48 & 0xFFFFFFFF00000000;
        if (!v52)
          v54 = 0;
        v48 = v54 | v55;
        v49 = v53 + 1;
        v44 -= 4;
      }
      while (v44);
    }
    v56 = *(_DWORD **)a1;
    *(_QWORD *)a1 = v47;
    *(_QWORD *)(a1 + 8) = v46;
    *(_DWORD *)(a1 + 16) = v19;
    free(v56);
  }
  else if ((_DWORD)v20)
  {
    v21 = (unint64_t)(a2[4] - 2) << 32;
    if ((*a2 & 0x7FFFFFFF) != 0)
      v22 = (_DWORD *)*((_QWORD *)a2 + 1);
    else
      v22 = 0;
    v23 = 4 * v20;
    do
    {
      *v18++ = *v22;
      v24 = HIDWORD(v21);
      v25 = (int)v21 < 1;
      if ((int)v21 < 1)
        v24 = 0;
      v26 = &v22[v24];
      v27 = (v21 + 1);
      v28 = v21 & 0xFFFFFFFF00000000;
      if (!v25)
        v27 = 0;
      v21 = v27 | v28;
      v22 = v26 + 1;
      v23 -= 4;
    }
    while (v23);
  }
  *(_BYTE *)(a1 + 24) = 1;
  return a1;
}

const __CFData *sub_1C98FDB10(cva::DictionaryHandler *a1, uint64_t a2)
{
  const __CFData *Data;
  const __CFData *v5;
  _BYTE v7[16];

  if (!cva::DictionaryHandler::hasKey(a1, CFSTR("faceprint_snapshot_coefficients")))
    return 0;
  cva::DictionaryHandler::item(a1, CFSTR("faceprint_snapshot_coefficients"));
  Data = (const __CFData *)cva::ItemHandler::getData((cva::ItemHandler *)v7);
  v5 = sub_1C98FD5B8(Data, a2);
  cva::ItemHandler::~ItemHandler((cva::ItemHandler *)v7);
  return v5;
}

uint64_t sub_1C98FDB84(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  __int128 v5;

  if (*(_BYTE *)(a1 + 24))
  {
    if (*(char *)(a1 + 23) < 0)
      operator delete(*(void **)a1);
    v4 = *a2;
    *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
    *(_OWORD *)a1 = v4;
    *((_BYTE *)a2 + 23) = 0;
    *(_BYTE *)a2 = 0;
  }
  else
  {
    v5 = *a2;
    *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
    *(_OWORD *)a1 = v5;
    *((_QWORD *)a2 + 1) = 0;
    *((_QWORD *)a2 + 2) = 0;
    *(_QWORD *)a2 = 0;
    *(_BYTE *)(a1 + 24) = 1;
  }
  return a1;
}

uint64_t sub_1C98FDBFC(cva::DictionaryHandler **a1, const __CFString *a2, _DWORD *a3)
{
  uint64_t hasKey;
  int v7;
  char CStringPtr;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t v13;
  std::__shared_weak_count *v14;
  _QWORD v15[36];

  hasKey = cva::DictionaryHandler::hasKey(*a1, a2);
  if ((hasKey & 1) != 0)
  {
    cva::DictionaryHandler::item(*a1, a2);
    cva::ItemHandler::getValue<float>();
    *a3 = v7;
    cva::ItemHandler::~ItemHandler((cva::ItemHandler *)&v13);
  }
  else
  {
    sub_1C99072C4(&v13);
    CStringPtr = CFStringGetCStringPtr(a2, 0x8000100u);
    sub_1C9907EC4(v15, &v13, 0, 0, "[RELEASE ERROR  ]", "/Library/Caches/com.apple.xbs/Sources/AppleCVA/shared/src/modules/avatar/facekit/facekitdictionaryconverter.cpp", 461, "Missing key %s in the animation dictionary.", CStringPtr);
    sub_1C9909318((uint64_t)v15);
    v9 = v14;
    if (v14)
    {
      p_shared_owners = (unint64_t *)&v14->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
  }
  return hasKey;
}

void sub_1C98FDD00(char **a1, unint64_t a2)
{
  char *v4;
  char *v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  size_t v14;
  char *v15;
  char *v16;

  v5 = a1[1];
  v4 = a1[2];
  if (a2 <= (v4 - v5) >> 4)
  {
    if (a2)
    {
      v12 = 16 * a2;
      bzero(a1[1], 16 * a2);
      v5 += v12;
    }
    a1[1] = v5;
  }
  else
  {
    v6 = *a1;
    v7 = (v5 - *a1) >> 4;
    v8 = v7 + a2;
    if ((v7 + a2) >> 60)
      abort();
    v9 = v4 - v6;
    if (v9 >> 3 > v8)
      v8 = v9 >> 3;
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0)
      v10 = 0xFFFFFFFFFFFFFFFLL;
    else
      v10 = v8;
    if (v10)
    {
      if (v10 >> 60)
        sub_1C9899D30();
      v11 = (char *)operator new(16 * v10);
    }
    else
    {
      v11 = 0;
    }
    v13 = &v11[16 * v7];
    v14 = 16 * a2;
    v15 = &v11[16 * v10];
    bzero(v13, v14);
    v16 = &v13[v14];
    if (v5 != v6)
    {
      do
      {
        *((_OWORD *)v13 - 1) = *((_OWORD *)v5 - 1);
        v13 -= 16;
        v5 -= 16;
      }
      while (v5 != v6);
      v5 = *a1;
    }
    *a1 = v13;
    a1[1] = v16;
    a1[2] = v15;
    if (v5)
      operator delete(v5);
  }
}

void sub_1C98FDE24(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  _DWORD *v5;
  _DWORD *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;
  size_t v15;
  char *v16;
  uint64_t v17;
  int v18;

  v5 = *(_DWORD **)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - (uint64_t)v5) >> 2) >= a2)
  {
    if (a2)
    {
      v12 = 12 * ((12 * a2 - 12) / 0xC) + 12;
      bzero(*(void **)(a1 + 8), v12);
      v5 = (_DWORD *)((char *)v5 + v12);
    }
    *(_QWORD *)(a1 + 8) = v5;
  }
  else
  {
    v6 = *(_DWORD **)a1;
    v7 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v5 - *(_QWORD *)a1) >> 2);
    v8 = v7 + a2;
    if (v7 + a2 > 0x1555555555555555)
      abort();
    v9 = 0xAAAAAAAAAAAAAAABLL * ((v4 - (uint64_t)v6) >> 2);
    if (2 * v9 > v8)
      v8 = 2 * v9;
    if (v9 >= 0xAAAAAAAAAAAAAAALL)
      v10 = 0x1555555555555555;
    else
      v10 = v8;
    if (v10)
    {
      if (v10 > 0x1555555555555555)
        sub_1C9899D30();
      v11 = (char *)operator new(12 * v10);
    }
    else
    {
      v11 = 0;
    }
    v13 = &v11[12 * v7];
    v14 = &v11[12 * v10];
    v15 = 12 * ((12 * a2 - 12) / 0xC) + 12;
    bzero(v13, v15);
    v16 = &v13[v15];
    if (v5 != v6)
    {
      do
      {
        v17 = *(_QWORD *)(v5 - 3);
        v5 -= 3;
        v18 = v5[2];
        *(_QWORD *)(v13 - 12) = v17;
        v13 -= 12;
        *((_DWORD *)v13 + 2) = v18;
      }
      while (v5 != v6);
      v5 = *(_DWORD **)a1;
    }
    *(_QWORD *)a1 = v13;
    *(_QWORD *)(a1 + 8) = v16;
    *(_QWORD *)(a1 + 16) = v14;
    if (v5)
      operator delete(v5);
  }
}

void sub_1C98FDFB0(cva::DictionaryHandler *a1, uint64_t a2)
{
  const __CFData *v4;
  _DWORD *v5;
  void *memptr[2];
  void *v7[2];
  int v8;

  cva::DictionaryHandler::DictionaryHandler(a1);
  cva::ItemHandler::createData(*(cva::ItemHandler **)(a2 + 48), v4);
  cva::DictionaryHandler::setItem(a1, CFSTR("blendshapes"), (const cva::ItemHandler *)v7);
  cva::ItemHandler::~ItemHandler((cva::ItemHandler *)v7);
  v7[1] = (void *)8;
  memptr[0] = 0;
  malloc_type_posix_memalign(memptr, 0x20uLL, 0x20uLL, 0x49090899uLL);
  v5 = memptr[0];
  v7[0] = memptr[0];
  v8 = 3;
  *(_DWORD *)memptr[0] = *(_DWORD *)a2;
  v5[1] = *(_DWORD *)(a2 + 4);
  v5[2] = *(_DWORD *)(a2 + 8);
  cva::ItemHandler::createVector<float>();
  free(v7[0]);
  cva::DictionaryHandler::setItem(a1, CFSTR("gaze"), (const cva::ItemHandler *)memptr);
  cva::ItemHandler::~ItemHandler((cva::ItemHandler *)memptr);
  cva::ItemHandler::createValue<float>();
  cva::DictionaryHandler::setItem(a1, CFSTR("left_eye_pitch"), (const cva::ItemHandler *)v7);
  cva::ItemHandler::~ItemHandler((cva::ItemHandler *)v7);
  cva::ItemHandler::createValue<float>();
  cva::DictionaryHandler::setItem(a1, CFSTR("right_eye_pitch"), (const cva::ItemHandler *)v7);
  cva::ItemHandler::~ItemHandler((cva::ItemHandler *)v7);
  cva::ItemHandler::createValue<float>();
  cva::DictionaryHandler::setItem(a1, CFSTR("left_eye_yaw"), (const cva::ItemHandler *)v7);
  cva::ItemHandler::~ItemHandler((cva::ItemHandler *)v7);
  cva::ItemHandler::createValue<float>();
  cva::DictionaryHandler::setItem(a1, CFSTR("right_eye_yaw"), (const cva::ItemHandler *)v7);
  cva::ItemHandler::~ItemHandler((cva::ItemHandler *)v7);
  cva::ItemHandler::createValue<float>();
  cva::DictionaryHandler::setItem(a1, CFSTR("studio_blink_left"), (const cva::ItemHandler *)v7);
  cva::ItemHandler::~ItemHandler((cva::ItemHandler *)v7);
  cva::ItemHandler::createValue<float>();
  cva::DictionaryHandler::setItem(a1, CFSTR("studio_blink_right"), (const cva::ItemHandler *)v7);
  cva::ItemHandler::~ItemHandler((cva::ItemHandler *)v7);
  cva::ItemHandler::createValue<float>();
  cva::DictionaryHandler::setItem(a1, CFSTR("virtual_blink_left"), (const cva::ItemHandler *)v7);
  cva::ItemHandler::~ItemHandler((cva::ItemHandler *)v7);
  cva::ItemHandler::createValue<float>();
  cva::DictionaryHandler::setItem(a1, CFSTR("virtual_blink_right"), (const cva::ItemHandler *)v7);
  cva::ItemHandler::~ItemHandler((cva::ItemHandler *)v7);
  cva::ItemHandler::createValue<float>();
  cva::DictionaryHandler::setItem(a1, CFSTR("tongue_out"), (const cva::ItemHandler *)v7);
  cva::ItemHandler::~ItemHandler((cva::ItemHandler *)v7);
}

uint64_t *sub_1C98FE1E8(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  float *v7;
  float v8;
  float *v9;
  unint64_t v10;
  unint64_t v11;
  float32x4_t *v12;
  uint64_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float *v16;
  float v17;
  size_t v18;
  float32x4_t *v19;
  float *v20;
  unint64_t v21;
  float *v22;
  float v23;
  unint64_t v24;
  uint64_t v25;
  float32x4_t *v26;
  float32x4_t *v27;
  uint64_t v28;
  float32x4_t v29;
  float v30;
  void *v31;
  float v33;
  void *memptr;

  v4 = operator new();
  v5 = v4;
  *(_QWORD *)v4 = 0;
  *(_QWORD *)(v4 + 8) = 0;
  *(_QWORD *)(v4 + 24) = 0;
  *(_QWORD *)(v4 + 32) = 0;
  *(_DWORD *)(v4 + 40) = 0;
  *(_DWORD *)(v4 + 48) = 1;
  v6 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)v6)
  {
    v7 = *(float **)a2;
    v8 = **(float **)a2 * **(float **)a2;
    if ((_DWORD)v6 == 1)
      goto LABEL_10;
    v9 = v7 + 1;
    v10 = (v6 + 0x3FFFFFFFFFFFFFFELL) & 0x3FFFFFFFFFFFFFFFLL;
    if (v10 >= 7)
    {
      v11 = v10 + 1;
      v12 = (float32x4_t *)(v7 + 5);
      v13 = v11 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v14 = vmulq_f32(v12[-1], v12[-1]);
        v15 = vmulq_f32(*v12, *v12);
        v8 = (float)((float)((float)((float)((float)((float)((float)(v8 + v14.f32[0]) + v14.f32[1]) + v14.f32[2])
                                           + v14.f32[3])
                                   + v15.f32[0])
                           + v15.f32[1])
                   + v15.f32[2])
           + v15.f32[3];
        v12 += 2;
        v13 -= 8;
      }
      while (v13);
      if (v11 == (v11 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_10:
        v33 = 1.0 / sqrtf(v8);
        *(_DWORD *)(v4 + 40) = v6;
        v18 = (4 * v6 + 31) & 0x7FFFFFFE0;
        *(_QWORD *)(v4 + 32) = v18 >> 2;
        memptr = 0;
        malloc_type_posix_memalign(&memptr, 0x20uLL, v18, 0x49090899uLL);
        v19 = (float32x4_t *)memptr;
        *(_QWORD *)(v5 + 24) = memptr;
        v20 = *(float **)a2;
        v21 = (v6 - 1) & 0x3FFFFFFFFFFFFFFFLL;
        if (v21 < 7)
        {
          v22 = (float *)v19;
          v23 = v33;
        }
        else
        {
          v22 = (float *)v19;
          v23 = v33;
          if ((unint64_t)((char *)v19 - (char *)v20) >= 0x20)
          {
            v24 = v21 + 1;
            v25 = v24 & 0x7FFFFFFFFFFFFFF8;
            v22 = &v19->f32[v25];
            v26 = (float32x4_t *)(v20 + 4);
            v27 = v19 + 1;
            v28 = v24 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              v29 = vmulq_n_f32(*v26, v33);
              v27[-1] = vmulq_n_f32(v26[-1], v33);
              *v27 = v29;
              v26 += 2;
              v27 += 2;
              v28 -= 8;
            }
            while (v28);
            if (v24 == (v24 & 0x7FFFFFFFFFFFFFF8))
              goto LABEL_19;
            v20 = (float *)((char *)v20 + v25 * 4);
          }
        }
        do
        {
          v30 = *v20++;
          *v22++ = v23 * v30;
        }
        while (v22 != &v19->f32[v6]);
LABEL_19:
        *(_QWORD *)(v5 + 8) = v18 >> 2;
        memptr = 0;
        malloc_type_posix_memalign(&memptr, 0x20uLL, v18, 0x49090899uLL);
        v31 = memptr;
        *(_QWORD *)v5 = memptr;
        memcpy(v31, v19, 4 * v6);
        goto LABEL_20;
      }
      v9 += v11 & 0x7FFFFFFFFFFFFFF8;
    }
    v16 = &v7[v6];
    do
    {
      v17 = *v9++;
      v8 = v8 + (float)(v17 * v17);
    }
    while (v9 != v16);
    goto LABEL_10;
  }
  *(_QWORD *)v4 = 0;
  *(_QWORD *)(v4 + 8) = 0;
LABEL_20:
  *(_DWORD *)(v5 + 16) = v6;
  *a1 = v5;
  return a1;
}

void ***sub_1C98FE43C(void ***a1)
{
  void **v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    free(v2[3]);
    free(*v2);
    MEMORY[0x1CAA44AFC](v2, 0x1080C407C7A2332);
  }
  return a1;
}

uint64_t sub_1C98FE490()
{
  unsigned __int8 v0;
  unint64_t v1;
  int v3;

  v0 = atomic_load((unsigned __int8 *)&qword_1ED52ACD0);
  v1 = 0x1ED52A000uLL;
  if ((v0 & 1) == 0)
  {
    v3 = __cxa_guard_acquire(&qword_1ED52ACD0);
    v1 = 0x1ED52A000;
    if (v3)
    {
      qword_1ED52ACE0 = (uint64_t)os_log_create("com.apple.AppleCVA", "FaceKit");
      __cxa_guard_release(&qword_1ED52ACD0);
      v1 = 0x1ED52A000;
    }
  }
  return *(_QWORD *)(v1 + 3296);
}

void sub_1C98FE4FC(std::string *a1, const char *a2)
{
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  const char *v9;
  size_t v10;
  size_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  std::string::size_type v15;
  std::string::size_type size;
  std::string *v17;
  size_t v18;
  std::string::size_type v19;
  std::string *p_dst;
  uint64_t v21;
  uint64_t v22;
  std::string::size_type v23;
  char v24;
  std::string::size_type v25;
  std::string::size_type v26;
  std::string *v27;
  std::string::size_type v28;
  std::string *v29;
  std::string::size_type v30;
  std::string __dst;

  v4 = (void *)MEMORY[0x1E0CB34D0];
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "com.apple.AppleCVA");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "bundleWithIdentifier:", v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  if (v6)
  {
    objc_msgSend(v6, "resourcePath");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = v7;
    if (!v7)
    {
      *((_BYTE *)&a1->__r_.__value_.__s + 23) = 0;
      a1->__r_.__value_.__s.__data_[0] = 0;
      goto LABEL_49;
    }
    v9 = (const char *)objc_msgSend(objc_retainAutorelease(v7), "cStringUsingEncoding:", 4);
    v10 = strlen(v9);
    if (v10 > 0x7FFFFFFFFFFFFFF7)
      abort();
    v11 = v10;
    if (v10 >= 0x17)
    {
      v13 = (v10 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v10 | 7) != 0x17)
        v13 = v10 | 7;
      v14 = v13 + 1;
      v12 = operator new(v13 + 1);
      a1->__r_.__value_.__l.__size_ = v11;
      a1->__r_.__value_.__r.__words[2] = v14 | 0x8000000000000000;
      a1->__r_.__value_.__r.__words[0] = (std::string::size_type)v12;
    }
    else
    {
      *((_BYTE *)&a1->__r_.__value_.__s + 23) = v10;
      v12 = a1;
      if (!v10)
      {
LABEL_13:
        v12[v11] = 0;
        LODWORD(v15) = SHIBYTE(a1->__r_.__value_.__r.__words[2]);
        if ((v15 & 0x80000000) != 0)
        {
          size = a1->__r_.__value_.__l.__size_;
          if (!size)
            goto LABEL_49;
          v17 = (std::string *)a1->__r_.__value_.__r.__words[0];
        }
        else
        {
          if (!*((_BYTE *)&a1->__r_.__value_.__s + 23))
            goto LABEL_21;
          size = HIBYTE(a1->__r_.__value_.__r.__words[2]);
          v17 = a1;
        }
        if (v17->__r_.__value_.__s.__data_[size - 1] != 47)
        {
          std::string::append(a1, "/", 1uLL);
          LOBYTE(v15) = *((_BYTE *)&a1->__r_.__value_.__s + 23);
        }
        if ((v15 & 0x80) != 0)
        {
          v15 = a1->__r_.__value_.__l.__size_;
          if (!a2)
            goto LABEL_49;
          goto LABEL_24;
        }
LABEL_21:
        v15 = v15;
        if (!a2)
          goto LABEL_49;
LABEL_24:
        if (v15)
        {
          v18 = strlen(a2);
          if (v18 > 0x7FFFFFFFFFFFFFF7)
            abort();
          v19 = v18;
          if (v18 >= 0x17)
          {
            v21 = (v18 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v18 | 7) != 0x17)
              v21 = v18 | 7;
            v22 = v21 + 1;
            p_dst = (std::string *)operator new(v21 + 1);
            __dst.__r_.__value_.__l.__size_ = v19;
            __dst.__r_.__value_.__r.__words[2] = v22 | 0x8000000000000000;
            __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
          }
          else
          {
            *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v18;
            p_dst = &__dst;
            if (!v18)
              goto LABEL_33;
          }
          memcpy(p_dst, a2, v19);
LABEL_33:
          p_dst->__r_.__value_.__s.__data_[v19] = 0;
          v23 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
          v24 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
          v26 = __dst.__r_.__value_.__l.__size_;
          v25 = __dst.__r_.__value_.__r.__words[0];
          if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v27 = &__dst;
          else
            v27 = (std::string *)__dst.__r_.__value_.__r.__words[0];
          if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v28 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
          else
            v28 = __dst.__r_.__value_.__l.__size_;
          if (v27->__r_.__value_.__s.__data_[v28 - 1] != 47)
          {
            std::string::append(&__dst, "/", 1uLL);
            v23 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
            v26 = __dst.__r_.__value_.__l.__size_;
            v25 = __dst.__r_.__value_.__r.__words[0];
            v24 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
          }
          if (v24 >= 0)
            v29 = &__dst;
          else
            v29 = (std::string *)v25;
          if (v24 >= 0)
            v30 = v23;
          else
            v30 = v26;
          std::string::append(a1, (const std::string::value_type *)v29, v30);
          if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__dst.__r_.__value_.__l.__data_);
        }
LABEL_49:

        goto LABEL_50;
      }
    }
    memmove(v12, v9, v11);
    goto LABEL_13;
  }
  *((_BYTE *)&a1->__r_.__value_.__s + 23) = 0;
  a1->__r_.__value_.__s.__data_[0] = 0;
LABEL_50:

}

void sub_1C98FE7A0(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;
  void *v3;

  if (*(char *)(v2 + 23) < 0)
    operator delete(*(void **)v2);

  _Unwind_Resume(a1);
}

_QWORD *sub_1C98FE7E0(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = &off_1E8294CE8;
  sub_1C98FEDF4((_QWORD *)a1[7]);
  v2 = a1[7];
  a1[7] = 0;
  if (v2)
  {
    v3 = sub_1C98FEFE8(v2);
    MEMORY[0x1CAA44AFC](v3, 0x10B2C4010D42EDDLL);
  }
  return sub_1C9902C64(a1);
}

void sub_1C98FE838(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = &off_1E8294CE8;
  sub_1C98FEDF4((_QWORD *)a1[7]);
  v2 = a1[7];
  a1[7] = 0;
  if (v2)
  {
    v3 = sub_1C98FEFE8(v2);
    MEMORY[0x1CAA44AFC](v3, 0x10B2C4010D42EDDLL);
  }
  sub_1C9902C64(a1);
  JUMPOUT(0x1CAA44AFCLL);
}

BOOL sub_1C98FE8A4(uint64_t a1, uint64_t *a2, uint64_t *a3, int a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int *v16;
  uint64_t v17;
  uint64_t v18;
  const void *v20;
  char *v21;
  int v22;
  int v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  char *v27;
  int v28;
  int v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  int v50;
  uint64_t v51;
  int v53;
  unsigned __int8 v54;
  NSObject *v55;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v68;
  void *v69;
  int v70;
  int v71;
  uint64_t v72;
  int v73;
  uint64_t v74;
  char *v75;
  int v76;
  char *v77;
  int v78;
  uint64_t v79;
  int v80;
  _DWORD v81[2];
  __int16 v82;
  uint64_t status_string;
  uint64_t v84;

  v84 = *MEMORY[0x1E0C80C00];
  v8 = *a2;
  v7 = a2[1];
  if ((int)((unint64_t)(v7 - *a2) >> 3) >= 1)
  {
    if (a4)
    {
      if (a4 == 1)
      {
        v10 = 0;
        do
        {
          v11 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 48);
          v12 = *(_QWORD *)(v11 + 24);
          v13 = v12 + 40 * v10;
          v14 = *(unsigned int *)(v13 + 36);
          if ((int)v14 >= 1)
          {
            v15 = *(unsigned int *)(v12 + 40 * v10 + 32);
            if ((int)v15 >= 1)
            {
              v16 = (unsigned int *)(v13 + 24);
              v17 = *(unsigned int *)(v12 + 40 * v10 + 28);
              v18 = *v16;
              if ((int)v17 >= 1 && (int)v18 >= 1)
              {
                v20 = *(const void **)(v8 + 8 * v10);
                v21 = *(char **)(*(_QWORD *)(v11 + 72) + 168 * v10);
                if ((_DWORD)v17 == 1)
                {
                  memcpy(v21, v20, 4 * v14 * (unint64_t)v15 * v18);
                  v8 = *a2;
                  v7 = a2[1];
                }
                else
                {
                  v22 = 0;
                  v23 = 0;
                  do
                  {
                    v24 = 0;
                    v25 = v22;
                    do
                    {
                      v26 = 0;
                      v27 = &v21[4 * v25];
                      v28 = v22;
                      do
                      {
                        v29 = v28;
                        v30 = v27;
                        v31 = v14;
                        do
                        {
                          *(_DWORD *)v30 = *((_DWORD *)v20 + v24 + v29);
                          v30 += 4;
                          v29 += v17;
                          --v31;
                        }
                        while (v31);
                        ++v26;
                        v27 += 4 * v14;
                        v28 += v14 * v17;
                      }
                      while (v26 != v15);
                      ++v24;
                      v25 += v15 * v14;
                    }
                    while (v24 != v17);
                    ++v23;
                    v22 += v15 * v14 * v17;
                  }
                  while (v23 != (_DWORD)v18);
                }
              }
            }
          }
          ++v10;
        }
        while (v10 < (int)((unint64_t)(v7 - v8) >> 3));
      }
      else
      {
        v43 = 0;
        v44 = 0;
        v45 = 0;
        do
        {
          v46 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 48);
          v47 = *(_QWORD *)(v46 + 24);
          v48 = v47 + v44;
          v49 = *(_DWORD *)(v47 + v44 + 36);
          if (v49 >= 1)
          {
            v50 = *(_DWORD *)(v48 + 32);
            if (v50 >= 1)
            {
              v51 = *(unsigned int *)(v48 + 24);
              if (*(_DWORD *)(v47 + v44 + 28) == 1 && (int)v51 >= 1)
              {
                memcpy(*(void **)(*(_QWORD *)(v46 + 72) + v43), *(const void **)(v8 + 8 * v45), 4 * v49 * (unint64_t)v50 * v51);
                v8 = *a2;
                v7 = a2[1];
              }
            }
          }
          ++v45;
          v44 += 40;
          v43 += 168;
        }
        while (v45 < (int)((unint64_t)(v7 - v8) >> 3));
      }
    }
    else
    {
      v32 = 0;
      v33 = 0;
      v34 = 0;
      do
      {
        v35 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 48);
        v36 = *(_QWORD *)(v35 + 24);
        v37 = v36 + v33;
        v38 = *(_DWORD *)(v36 + v33 + 36);
        if (v38 >= 1)
        {
          v39 = *(_DWORD *)(v37 + 32);
          if (v39 >= 1)
          {
            v40 = *(unsigned int *)(v36 + v33 + 28);
            v41 = *(unsigned int *)(v37 + 24);
            if ((int)v40 >= 1 && (int)v41 >= 1)
            {
              memcpy(*(void **)(*(_QWORD *)(v35 + 72) + v32), *(const void **)(v8 + 8 * v34), 4 * v38 * (unint64_t)v39 * v40 * v41);
              v8 = *a2;
              v7 = a2[1];
            }
          }
        }
        ++v34;
        v33 += 40;
        v32 += 168;
      }
      while (v34 < (int)((unint64_t)(v7 - v8) >> 3));
    }
  }
  kdebug_trace();
  v53 = espresso_plan_execute_sync();
  if (v53)
  {
    v54 = atomic_load((unsigned __int8 *)&qword_1ED52ACC0);
    if ((v54 & 1) == 0 && __cxa_guard_acquire(&qword_1ED52ACC0))
    {
      qword_1ED52ACC8 = (uint64_t)os_log_create("com.apple.AppleCVA", "Espresso");
      __cxa_guard_release(&qword_1ED52ACC0);
    }
    v55 = qword_1ED52ACC8;
    if (os_log_type_enabled((os_log_t)qword_1ED52ACC8, OS_LOG_TYPE_ERROR))
    {
      v81[0] = 67109378;
      v81[1] = v53;
      v82 = 2080;
      status_string = espresso_get_status_string();
      _os_log_error_impl(&dword_1C9870000, v55, OS_LOG_TYPE_ERROR, "could not execute espresso network [%d, %s]", (uint8_t *)v81, 0x12u);
    }
    kdebug_trace();
  }
  else
  {
    kdebug_trace();
    v58 = *a3;
    v57 = a3[1];
    if ((int)((unint64_t)(v57 - *a3) >> 3) >= 1)
    {
      v59 = 0;
      do
      {
        v60 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 48);
        v61 = *(_QWORD *)(v60 + 48);
        v62 = v61 + 40 * v59;
        v63 = *(unsigned int *)(v62 + 36);
        if ((int)v63 >= 1)
        {
          v64 = *(unsigned int *)(v61 + 40 * v59 + 32);
          if ((int)v64 >= 1)
          {
            v65 = *(unsigned int *)(v61 + 40 * v59 + 28);
            v66 = *(unsigned int *)(v62 + 24);
            if ((int)v65 >= 1 && (int)v66 >= 1)
            {
              v68 = *(char **)(*(_QWORD *)(v60 + 96) + 168 * v59);
              v69 = *(void **)(v58 + 8 * v59);
              if (!a4 || (_DWORD)v65 == 1)
              {
                memcpy(v69, v68, 4 * v63 * (unint64_t)v64 * v65 * v66);
                v58 = *a3;
                v57 = a3[1];
              }
              else if (a4 == 1)
              {
                v70 = 0;
                v71 = 0;
                do
                {
                  v72 = 0;
                  v73 = v70;
                  do
                  {
                    v74 = 0;
                    v75 = &v68[4 * v73];
                    v76 = v70;
                    do
                    {
                      v77 = v75;
                      v78 = v76;
                      v79 = v63;
                      do
                      {
                        v80 = *(_DWORD *)v77;
                        v77 += 4;
                        *((_DWORD *)v69 + v72 + v78) = v80;
                        v78 += v65;
                        --v79;
                      }
                      while (v79);
                      ++v74;
                      v76 += v63 * v65;
                      v75 += 4 * v63;
                    }
                    while (v74 != v64);
                    ++v72;
                    v73 += v64 * v63;
                  }
                  while (v72 != v65);
                  ++v71;
                  v70 += v64 * v63 * v65;
                }
                while (v71 != (_DWORD)v66);
              }
            }
          }
        }
        ++v59;
      }
      while (v59 < (int)((unint64_t)(v57 - v58) >> 3));
    }
  }
  return v53 == 0;
}

void sub_1C98FEDF4(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t i;
  int v8;
  int v9;
  unsigned __int8 v10;
  NSObject *v11;
  char *v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  _DWORD v16[2];
  __int16 v17;
  uint64_t status_string;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v2 = (std::__shared_weak_count *)a1[7];
  a1[6] = 0;
  a1[7] = 0;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  if (a1[11])
  {
    v5 = (char *)a1[10];
    if (v5)
    {
      do
      {
        v12 = *(char **)v5;
        v13 = (std::__shared_weak_count *)*((_QWORD *)v5 + 6);
        if (v13)
        {
          v14 = (unint64_t *)&v13->__shared_owners_;
          do
            v15 = __ldaxr(v14);
          while (__stlxr(v15 - 1, v14));
          if (!v15)
          {
            ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
            std::__shared_weak_count::__release_weak(v13);
          }
        }
        if (v5[39] < 0)
          operator delete(*((void **)v5 + 2));
        operator delete(v5);
        v5 = v12;
      }
      while (v12);
    }
    a1[10] = 0;
    v6 = a1[9];
    if (v6)
    {
      for (i = 0; i != v6; ++i)
        *(_QWORD *)(a1[8] + 8 * i) = 0;
    }
    a1[11] = 0;
  }
  if (*a1)
  {
    v8 = espresso_context_destroy();
    if (v8)
    {
      v9 = v8;
      v10 = atomic_load((unsigned __int8 *)&qword_1ED52ACC0);
      if ((v10 & 1) == 0 && __cxa_guard_acquire(&qword_1ED52ACC0))
      {
        qword_1ED52ACC8 = (uint64_t)os_log_create("com.apple.AppleCVA", "Espresso");
        __cxa_guard_release(&qword_1ED52ACC0);
      }
      v11 = qword_1ED52ACC8;
      if (os_log_type_enabled((os_log_t)qword_1ED52ACC8, OS_LOG_TYPE_ERROR))
      {
        v16[0] = 67109378;
        v16[1] = v9;
        v17 = 2080;
        status_string = espresso_get_status_string();
        _os_log_error_impl(&dword_1C9870000, v11, OS_LOG_TYPE_ERROR, "could not delete espresso context [%d, %s]", (uint8_t *)v16, 0x12u);
      }
    }
    *a1 = 0;
  }
}

uint64_t sub_1C98FEFE8(uint64_t a1)
{
  char *v2;
  void *v3;
  std::__shared_weak_count *v4;
  unint64_t *v5;
  unint64_t v6;
  char *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;

  v2 = *(char **)(a1 + 80);
  if (v2)
  {
    do
    {
      v8 = *(char **)v2;
      v9 = (std::__shared_weak_count *)*((_QWORD *)v2 + 6);
      if (v9)
      {
        p_shared_owners = (unint64_t *)&v9->__shared_owners_;
        do
          v11 = __ldaxr(p_shared_owners);
        while (__stlxr(v11 - 1, p_shared_owners));
        if (!v11)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
      }
      if (v2[39] < 0)
        operator delete(*((void **)v2 + 2));
      operator delete(v2);
      v2 = v8;
    }
    while (v8);
  }
  v3 = *(void **)(a1 + 64);
  *(_QWORD *)(a1 + 64) = 0;
  if (v3)
    operator delete(v3);
  v4 = *(std::__shared_weak_count **)(a1 + 56);
  if (v4)
  {
    v5 = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 - 1, v5));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
      if ((*(char *)(a1 + 47) & 0x80000000) == 0)
        return a1;
      goto LABEL_9;
    }
  }
  if (*(char *)(a1 + 47) < 0)
LABEL_9:
    operator delete(*(void **)(a1 + 24));
  return a1;
}

uint64_t sub_1C98FF0E0()
{
  unsigned __int8 v0;
  unint64_t v1;
  int v3;

  v0 = atomic_load((unsigned __int8 *)&qword_1ED52ACC0);
  v1 = 0x1ED52A000uLL;
  if ((v0 & 1) == 0)
  {
    v3 = __cxa_guard_acquire(&qword_1ED52ACC0);
    v1 = 0x1ED52A000;
    if (v3)
    {
      qword_1ED52ACC8 = (uint64_t)os_log_create("com.apple.AppleCVA", "Espresso");
      __cxa_guard_release(&qword_1ED52ACC0);
      v1 = 0x1ED52A000;
    }
  }
  return *(_QWORD *)(v1 + 3272);
}

BOOL sub_1C98FF14C(uint64_t a1, _QWORD *a2, int a3, uint64_t a4)
{
  uint64_t v4;
  unsigned __int8 v5;
  NSObject *v6;
  _BOOL8 result;
  const char *v8;
  void **v12;
  __int128 v13;
  size_t v14;
  size_t v15;
  const __CFString *v16;
  const __CFString *v17;
  size_t v18;
  size_t v19;
  __int128 *p_dst;
  uint64_t v21;
  uint64_t v22;
  int v23;
  unsigned __int8 v24;
  NSObject *v25;
  size_t v26;
  size_t v27;
  __int128 *v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *p_shared_owners;
  unint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  const char *v40;
  uint64_t plan;
  int v42;
  int v43;
  unsigned __int8 v44;
  uint64_t v45;
  unsigned __int8 v46;
  NSObject *v47;
  unsigned __int8 v48;
  unsigned __int8 v49;
  NSObject *v50;
  unsigned __int8 v51;
  NSObject *v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  unsigned __int8 v56;
  NSObject *v57;
  size_t v58;
  size_t v59;
  __int128 *v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  unsigned __int8 v64;
  NSObject *v65;
  const char *v66;
  int v67;
  int v68;
  unsigned __int8 v69;
  uint64_t v70;
  uint64_t v71;
  const char *v72;
  NSObject *v73;
  uint64_t v74;
  __int128 v75;
  size_t v76;
  size_t v77;
  __int128 *v78;
  uint64_t v79;
  uint64_t v80;
  int v81;
  size_t v82;
  _BYTE *v83;
  size_t v84;
  _BYTE *v85;
  unint64_t v86;
  size_t v87;
  __int128 *v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  void **i;
  char *v93;
  void **j;
  unsigned __int8 v95;
  NSObject *v96;
  uint64_t v97;
  uint64_t v98;
  int v99;
  NSObject *v100;
  NSObject *v101;
  std::__shared_weak_count *v102;
  cva::ArrayHandler *v103;
  int v104;
  uint64_t status_string;
  unsigned __int8 v106;
  NSObject *v107;
  _BOOL4 v108;
  uint8_t *v109;
  int v110;
  int v111;
  unsigned __int8 v112;
  NSObject *v113;
  _OWORD *v114;
  __int128 v115;
  char *v116;
  unint64_t *v117;
  unint64_t v118;
  std::__shared_weak_count *v119;
  cva::ArrayHandler *v120;
  int v121;
  unsigned __int8 v122;
  NSObject *v123;
  _BOOL4 v124;
  uint8_t *v125;
  int v126;
  int v127;
  unsigned __int8 v128;
  NSObject *v129;
  _OWORD *v130;
  __int128 v131;
  char *v132;
  unint64_t *v133;
  unint64_t v134;
  char v135;
  std::__shared_weak_count *v136;
  unint64_t *v137;
  unint64_t v138;
  char v139;
  int v140;
  int v141;
  unsigned __int8 v142;
  NSObject *v143;
  unsigned __int8 v144;
  NSObject *v145;
  int v146;
  void **v147;
  void **k;
  void **v149;
  void **m;
  __int128 **v151;
  int input_names;
  int v153;
  NSObject *v154;
  uint64_t v155;
  const char *v156;
  int output_names;
  int v158;
  void **v159;
  void **v160;
  void **v161;
  uint64_t v162;
  uint64_t v163;
  void *v164;
  cva::DictionaryHandler *v165;
  char *v166;
  int v167;
  cva::DictionaryHandler *v168;
  size_t v169;
  char **v170;
  int v171;
  const void *v172;
  size_t v173;
  size_t v174;
  int v175;
  char *v176;
  char **v177;
  char *v178;
  int v179;
  char **v180;
  size_t v181;
  size_t v182;
  int v183;
  int v184;
  unint64_t v185;
  __int128 v186;
  unsigned __int8 v187;
  NSObject *v188;
  char *v189;
  unint64_t v190;
  char *v191;
  __int128 v192;
  __int128 v193;
  __int128 v194;
  __int128 v195;
  __int128 v196;
  __int128 v197;
  __int128 v198;
  __int128 v199;
  char *v200;
  _BYTE *v201;
  unint64_t v202;
  unint64_t v203;
  unint64_t v204;
  char *v205;
  __int128 v206;
  char *v207;
  __int128 v208;
  __int128 v209;
  __int128 v210;
  __int128 v211;
  char *v212;
  __int128 v213;
  __int128 v214;
  __int128 v215;
  __int128 v216;
  __int128 v217;
  __int128 v218;
  __int128 v219;
  __int128 v220;
  __int128 *v221;
  __int128 *v222;
  char v223;
  unint64_t v224;
  __int128 v225;
  unsigned __int8 v226;
  NSObject *v227;
  char *v228;
  unint64_t v229;
  char *v230;
  __int128 v231;
  __int128 v232;
  __int128 v233;
  __int128 v234;
  __int128 v235;
  __int128 v236;
  __int128 v237;
  __int128 v238;
  char *v239;
  char *v240;
  unint64_t v241;
  unint64_t v242;
  unint64_t v243;
  char *v244;
  __int128 v245;
  char *v246;
  __int128 v247;
  __int128 v248;
  __int128 v249;
  __int128 v250;
  char *v251;
  __int128 v252;
  __int128 v253;
  __int128 v254;
  __int128 v255;
  __int128 v256;
  __int128 v257;
  __int128 v258;
  __int128 v259;
  char *v260;
  uint64_t v261;
  uint64_t v262;
  cva::DictionaryHandler *v263;
  char **v264;
  char *v265[2];
  __int128 *v266;
  __int128 *v267;
  uint64_t v268;
  cva::DictionaryHandler *v269;
  cva::DictionaryHandler *v270;
  uint64_t v271;
  void *__p;
  char *v273;
  unint64_t v274;
  void *v275;
  char *v276;
  unint64_t v277;
  char v278[8];
  uint8_t v279[16];
  _BYTE buf[32];
  __int128 v281;
  __int128 v282;
  __int128 v283;
  __int128 v284;
  __int128 v285;
  __int128 v286;
  __int128 v287;
  __int128 v288;
  uint64_t v289;
  __int128 __dst;
  unint64_t v291;
  __int128 v292;
  uint8_t v293[8];
  __int128 v294;
  uint8_t v295[16];
  uint64_t v296;
  uint64_t v297;

  v297 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(a1 + 56);
  if (*(_QWORD *)v4)
  {
    v5 = atomic_load((unsigned __int8 *)&qword_1ED52ACC0);
    if ((v5 & 1) == 0)
    {
      if (__cxa_guard_acquire(&qword_1ED52ACC0))
      {
        qword_1ED52ACC8 = (uint64_t)os_log_create("com.apple.AppleCVA", "Espresso");
        __cxa_guard_release(&qword_1ED52ACC0);
      }
    }
    v6 = qword_1ED52ACC8;
    result = os_log_type_enabled((os_log_t)qword_1ED52ACC8, OS_LOG_TYPE_ERROR);
    if (!result)
      return result;
    *(_WORD *)buf = 0;
    v8 = "espresso has already initialized";
    goto LABEL_5;
  }
  *(_QWORD *)(v4 + 8) = 0xFFFFFFFF00000000;
  *(_DWORD *)(v4 + 16) = 65568;
  v12 = (void **)(v4 + 24);
  if ((_QWORD *)(v4 + 24) != a2)
  {
    if (*(char *)(v4 + 47) < 0)
    {
      v14 = a2[1];
      if (*((char *)a2 + 23) >= 0)
      {
        v15 = *((unsigned __int8 *)a2 + 23);
      }
      else
      {
        a2 = (_QWORD *)*a2;
        v15 = v14;
      }
      sub_1C98A976C(v12, a2, v15);
    }
    else if ((*((_BYTE *)a2 + 23) & 0x80) != 0)
    {
      sub_1C98A96AC(v12, (void *)*a2, a2[1]);
    }
    else
    {
      v13 = *(_OWORD *)a2;
      *(_QWORD *)(v4 + 40) = a2[2];
      *(_OWORD *)v12 = v13;
    }
  }
  v16 = (const __CFString *)CFPreferencesCopyAppValue(CFSTR("com.apple.applecva.force_espresso_engine"), (CFStringRef)*MEMORY[0x1E0C9B228]);
  if (!v16)
    goto LABEL_31;
  v17 = v16;
  CFStringGetCString(v16, buf, 128, 0x8000100u);
  CFRelease(v17);
  v18 = strlen(buf);
  if (v18 > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_454;
  v19 = v18;
  if (v18 >= 0x17)
  {
    v21 = (v18 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v18 | 7) != 0x17)
      v21 = v18 | 7;
    v22 = v21 + 1;
    p_dst = (__int128 *)operator new(v21 + 1);
    *((_QWORD *)&__dst + 1) = v19;
    v291 = v22 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
    goto LABEL_23;
  }
  HIBYTE(v291) = v18;
  p_dst = &__dst;
  if (v18)
LABEL_23:
    memcpy(p_dst, buf, v19);
  *((_BYTE *)p_dst + v19) = 0;
  HIBYTE(v296) = 3;
  strcpy((char *)v295, "CPU");
  v23 = cva::utils::string::iequals();
  if (SHIBYTE(v296) < 0)
  {
    operator delete(*(void **)v295);
    if ((SHIBYTE(v291) & 0x80000000) == 0)
    {
LABEL_26:
      if (v23)
        goto LABEL_27;
      goto LABEL_35;
    }
  }
  else if ((SHIBYTE(v291) & 0x80000000) == 0)
  {
    goto LABEL_26;
  }
  operator delete((void *)__dst);
  if (v23)
  {
LABEL_27:
    v24 = atomic_load((unsigned __int8 *)&qword_1ED52ACC0);
    if ((v24 & 1) == 0 && __cxa_guard_acquire(&qword_1ED52ACC0))
    {
      qword_1ED52ACC8 = (uint64_t)os_log_create("com.apple.AppleCVA", "Espresso");
      __cxa_guard_release(&qword_1ED52ACC0);
    }
    v25 = qword_1ED52ACC8;
    if (os_log_type_enabled((os_log_t)qword_1ED52ACC8, OS_LOG_TYPE_INFO))
    {
      LOWORD(__dst) = 0;
      _os_log_impl(&dword_1C9870000, v25, OS_LOG_TYPE_INFO, "forcing CPU engine for espresso", (uint8_t *)&__dst, 2u);
    }
    a3 = 0;
    goto LABEL_31;
  }
LABEL_35:
  v26 = strlen(buf);
  if (v26 > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_454;
  v27 = v26;
  if (v26 >= 0x17)
  {
    v53 = (v26 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v26 | 7) != 0x17)
      v53 = v26 | 7;
    v54 = v53 + 1;
    v28 = (__int128 *)operator new(v53 + 1);
    *((_QWORD *)&__dst + 1) = v27;
    v291 = v54 | 0x8000000000000000;
    *(_QWORD *)&__dst = v28;
    goto LABEL_80;
  }
  HIBYTE(v291) = v26;
  v28 = &__dst;
  if (v26)
LABEL_80:
    memcpy(v28, buf, v27);
  *((_BYTE *)v28 + v27) = 0;
  HIBYTE(v296) = 13;
  strcpy((char *)v295, "CPU_QUANTIZED");
  v55 = cva::utils::string::iequals();
  if (SHIBYTE(v296) < 0)
  {
    operator delete(*(void **)v295);
    if ((SHIBYTE(v291) & 0x80000000) == 0)
    {
LABEL_83:
      if (v55)
        goto LABEL_84;
      goto LABEL_90;
    }
  }
  else if ((SHIBYTE(v291) & 0x80000000) == 0)
  {
    goto LABEL_83;
  }
  operator delete((void *)__dst);
  if (v55)
  {
LABEL_84:
    v56 = atomic_load((unsigned __int8 *)&qword_1ED52ACC0);
    if ((v56 & 1) == 0 && __cxa_guard_acquire(&qword_1ED52ACC0))
    {
      qword_1ED52ACC8 = (uint64_t)os_log_create("com.apple.AppleCVA", "Espresso");
      __cxa_guard_release(&qword_1ED52ACC0);
    }
    v57 = qword_1ED52ACC8;
    if (os_log_type_enabled((os_log_t)qword_1ED52ACC8, OS_LOG_TYPE_INFO))
    {
      LOWORD(__dst) = 0;
      _os_log_impl(&dword_1C9870000, v57, OS_LOG_TYPE_INFO, "forcing CPU_QUANTIZED engine for espresso", (uint8_t *)&__dst, 2u);
    }
    a3 = 4;
    goto LABEL_31;
  }
LABEL_90:
  v58 = strlen(buf);
  if (v58 > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_454;
  v59 = v58;
  if (v58 >= 0x17)
  {
    v61 = (v58 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v58 | 7) != 0x17)
      v61 = v58 | 7;
    v62 = v61 + 1;
    v60 = (__int128 *)operator new(v61 + 1);
    *((_QWORD *)&__dst + 1) = v59;
    v291 = v62 | 0x8000000000000000;
    *(_QWORD *)&__dst = v60;
    goto LABEL_98;
  }
  HIBYTE(v291) = v58;
  v60 = &__dst;
  if (v58)
LABEL_98:
    memcpy(v60, buf, v59);
  *((_BYTE *)v60 + v59) = 0;
  HIBYTE(v296) = 3;
  strcpy((char *)v295, "GPU");
  v63 = cva::utils::string::iequals();
  if ((SHIBYTE(v296) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v291) & 0x80000000) == 0)
      goto LABEL_101;
LABEL_113:
    operator delete((void *)__dst);
    if (v63)
      goto LABEL_102;
LABEL_114:
    v76 = strlen(buf);
    if (v76 > 0x7FFFFFFFFFFFFFF7)
      goto LABEL_454;
    v77 = v76;
    if (v76 >= 0x17)
    {
      v79 = (v76 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v76 | 7) != 0x17)
        v79 = v76 | 7;
      v80 = v79 + 1;
      v78 = (__int128 *)operator new(v79 + 1);
      *((_QWORD *)&__dst + 1) = v77;
      v291 = v80 | 0x8000000000000000;
      *(_QWORD *)&__dst = v78;
    }
    else
    {
      HIBYTE(v291) = v76;
      v78 = &__dst;
      if (!v76)
      {
LABEL_122:
        *((_BYTE *)v78 + v77) = 0;
        HIBYTE(v296) = 3;
        strcpy((char *)v295, "ANE");
        v81 = cva::utils::string::iequals();
        if (SHIBYTE(v296) < 0)
        {
          operator delete(*(void **)v295);
          if ((SHIBYTE(v291) & 0x80000000) == 0)
          {
LABEL_124:
            if (v81)
            {
LABEL_125:
              v65 = sub_1C98FF0E0();
              if (!os_log_type_enabled(v65, OS_LOG_TYPE_INFO))
              {
                a3 = 2;
                goto LABEL_31;
              }
              LOWORD(__dst) = 0;
              v66 = "forcing ANE engine for espresso";
              a3 = 2;
LABEL_127:
              _os_log_impl(&dword_1C9870000, v65, OS_LOG_TYPE_INFO, v66, (uint8_t *)&__dst, 2u);
              goto LABEL_31;
            }
LABEL_176:
            sub_1C9899664(&__dst, buf);
            sub_1C9899664(v295, "ANE_REALTIME");
            v99 = cva::utils::string::iequals();
            if (SHIBYTE(v296) < 0)
              operator delete(*(void **)v295);
            if (SHIBYTE(v291) < 0)
              operator delete((void *)__dst);
            v100 = sub_1C98FF0E0();
            v101 = v100;
            if (!v99)
            {
              if (os_log_type_enabled(v100, OS_LOG_TYPE_ERROR))
              {
                LODWORD(__dst) = 136315138;
                *(_QWORD *)((char *)&__dst + 4) = buf;
                _os_log_error_impl(&dword_1C9870000, v101, OS_LOG_TYPE_ERROR, "%s is not a valid espresso engine", (uint8_t *)&__dst, 0xCu);
              }
              return 0;
            }
            if (os_log_type_enabled(v100, OS_LOG_TYPE_INFO))
            {
              LOWORD(__dst) = 0;
              _os_log_impl(&dword_1C9870000, v101, OS_LOG_TYPE_INFO, "forcing ANE realtime engine for espresso", (uint8_t *)&__dst, 2u);
            }
            a3 = 3;
            goto LABEL_31;
          }
        }
        else if ((SHIBYTE(v291) & 0x80000000) == 0)
        {
          goto LABEL_124;
        }
        operator delete((void *)__dst);
        if (v81)
          goto LABEL_125;
        goto LABEL_176;
      }
    }
    memcpy(v78, buf, v77);
    goto LABEL_122;
  }
  operator delete(*(void **)v295);
  if (SHIBYTE(v291) < 0)
    goto LABEL_113;
LABEL_101:
  if (!v63)
    goto LABEL_114;
LABEL_102:
  v64 = atomic_load((unsigned __int8 *)&qword_1ED52ACC0);
  if ((v64 & 1) == 0 && __cxa_guard_acquire(&qword_1ED52ACC0))
  {
    qword_1ED52ACC8 = (uint64_t)os_log_create("com.apple.AppleCVA", "Espresso");
    __cxa_guard_release(&qword_1ED52ACC0);
  }
  v65 = qword_1ED52ACC8;
  a3 = 1;
  if (os_log_type_enabled((os_log_t)qword_1ED52ACC8, OS_LOG_TYPE_INFO))
  {
    LOWORD(__dst) = 0;
    v66 = "forcing GPU engine for espresso";
    goto LABEL_127;
  }
LABEL_31:
  switch(a3)
  {
    case 1:
      *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = 0xFFFFFFFD00000005;
      break;
    case 2:
      v29 = *(_QWORD *)(a1 + 56);
      v30 = 10007;
      goto LABEL_41;
    case 3:
      v29 = *(_QWORD *)(a1 + 56);
      v30 = 10006;
LABEL_41:
      *(_DWORD *)(v29 + 8) = v30;
      *(_DWORD *)(v29 + 16) = 65552;
      break;
    case 4:
      v31 = *(_QWORD *)(a1 + 56);
      *(_DWORD *)(v31 + 8) = 10010;
      *(_DWORD *)(v31 + 16) = 0x80000;
      break;
    default:
      break;
  }
  **(_QWORD **)(a1 + 56) = espresso_create_context();
  v32 = *(_QWORD *)(a1 + 56);
  if (*(_QWORD *)v32)
    goto LABEL_44;
  if (*(_DWORD *)(v32 + 8) == 5 && *(_DWORD *)(v32 + 12) != -1)
  {
    v46 = atomic_load((unsigned __int8 *)&qword_1ED52ACC0);
    if ((v46 & 1) == 0 && __cxa_guard_acquire(&qword_1ED52ACC0))
    {
      qword_1ED52ACC8 = (uint64_t)os_log_create("com.apple.AppleCVA", "Espresso");
      __cxa_guard_release(&qword_1ED52ACC0);
    }
    v47 = qword_1ED52ACC8;
    if (os_log_type_enabled((os_log_t)qword_1ED52ACC8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1C9870000, v47, OS_LOG_TYPE_DEFAULT, "requested MPS espresso engine but no suitable device available: falling back to CPU", buf, 2u);
    }
    *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = 0xFFFFFFFF00000000;
    **(_QWORD **)(a1 + 56) = espresso_create_context();
    if (**(_QWORD **)(a1 + 56))
    {
LABEL_44:
      v33 = operator new(0x90uLL);
      v33[3] = 0;
      v33[1] = 0;
      v33[2] = 0;
      *v33 = &off_1E8295AA0;
      *((_OWORD *)v33 + 3) = 0u;
      *((_OWORD *)v33 + 4) = 0u;
      *((_OWORD *)v33 + 5) = 0u;
      *((_OWORD *)v33 + 6) = 0u;
      *((_OWORD *)v33 + 7) = 0u;
      *((_OWORD *)v33 + 8) = 0u;
      sub_1C9901334(v33 + 3);
      v34 = *(_QWORD *)(a1 + 56);
      v35 = *(std::__shared_weak_count **)(v34 + 56);
      *(_QWORD *)(v34 + 48) = v33 + 3;
      *(_QWORD *)(v34 + 56) = v33;
      if (v35)
      {
        p_shared_owners = (unint64_t *)&v35->__shared_owners_;
        do
          v37 = __ldaxr(p_shared_owners);
        while (__stlxr(v37 - 1, p_shared_owners));
        if (!v37)
        {
          ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
          std::__shared_weak_count::__release_weak(v35);
        }
      }
      v38 = *(_QWORD *)(a1 + 56);
      v39 = *(uint64_t **)(v38 + 48);
      v40 = (const char *)(v38 + 24);
      if (*(char *)(v38 + 47) < 0)
        v40 = *(const char **)v40;
      plan = espresso_create_plan();
      *v39 = plan;
      if (!plan)
      {
        v49 = atomic_load((unsigned __int8 *)&qword_1ED52ACC0);
        if ((v49 & 1) == 0 && __cxa_guard_acquire(&qword_1ED52ACC0))
        {
          qword_1ED52ACC8 = (uint64_t)os_log_create("com.apple.AppleCVA", "Espresso");
          __cxa_guard_release(&qword_1ED52ACC0);
        }
        v50 = qword_1ED52ACC8;
        if (os_log_type_enabled((os_log_t)qword_1ED52ACC8, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)buf = 0;
          _os_log_error_impl(&dword_1C9870000, v50, OS_LOG_TYPE_ERROR, "could not create espresso plan", buf, 2u);
        }
        goto LABEL_68;
      }
      v42 = espresso_plan_add_network();
      if (v42)
      {
        v43 = v42;
        v44 = atomic_load((unsigned __int8 *)&qword_1ED52ACC0);
        if ((v44 & 1) == 0 && __cxa_guard_acquire(&qword_1ED52ACC0))
        {
          qword_1ED52ACC8 = (uint64_t)os_log_create("com.apple.AppleCVA", "Espresso");
          __cxa_guard_release(&qword_1ED52ACC0);
        }
        v45 = qword_1ED52ACC8;
        if (!os_log_type_enabled((os_log_t)qword_1ED52ACC8, OS_LOG_TYPE_ERROR))
          goto LABEL_55;
        status_string = espresso_get_status_string();
        *(_DWORD *)buf = 67109378;
        *(_DWORD *)&buf[4] = v43;
        *(_WORD *)&buf[8] = 2080;
        *(_QWORD *)&buf[10] = status_string;
        v72 = "could not add network [%d, %s]";
        v73 = v45;
LABEL_192:
        _os_log_error_impl(&dword_1C9870000, v73, OS_LOG_TYPE_ERROR, v72, buf, 0x12u);
LABEL_55:
        sub_1C9901334(v39);
        goto LABEL_68;
      }
      if (*(char *)(a4 + 23) < 0)
      {
        if (!*(_QWORD *)(a4 + 8))
          goto LABEL_110;
      }
      else if (!*(_BYTE *)(a4 + 23))
      {
        goto LABEL_110;
      }
      v67 = espresso_network_select_configuration();
      if (v67)
      {
        v68 = v67;
        v69 = atomic_load((unsigned __int8 *)&qword_1ED52ACC0);
        if ((v69 & 1) == 0 && __cxa_guard_acquire(&qword_1ED52ACC0))
        {
          qword_1ED52ACC8 = (uint64_t)os_log_create("com.apple.AppleCVA", "Espresso");
          __cxa_guard_release(&qword_1ED52ACC0);
        }
        v70 = qword_1ED52ACC8;
        if (!os_log_type_enabled((os_log_t)qword_1ED52ACC8, OS_LOG_TYPE_ERROR))
          goto LABEL_55;
        v71 = espresso_get_status_string();
        *(_DWORD *)buf = 67109378;
        *(_DWORD *)&buf[4] = v68;
        *(_WORD *)&buf[8] = 2080;
        *(_QWORD *)&buf[10] = v71;
        v72 = "could not select espresso configuration [%d, %s]";
        v73 = v70;
        goto LABEL_192;
      }
LABEL_110:
      v275 = 0;
      v276 = 0;
      v277 = 0;
      __p = 0;
      v273 = 0;
      v274 = 0;
      cva::Path::Path((cva::Path *)&v266, v40);
      cva::Path::filename((cva::Path *)&v266);
      v74 = cva::Path::string((cva::Path *)&__dst);
      if (*(char *)(v74 + 23) < 0)
      {
        sub_1C987D148(buf, *(void **)v74, *(_QWORD *)(v74 + 8));
      }
      else
      {
        v75 = *(_OWORD *)v74;
        *(_QWORD *)&buf[16] = *(_QWORD *)(v74 + 16);
        *(_OWORD *)buf = v75;
      }
      cva::Path::~Path((cva::Path *)&__dst);
      v82 = buf[23];
      if (buf[23] >= 0)
        v83 = buf;
      else
        v83 = *(_BYTE **)buf;
      if (buf[23] < 0)
        v82 = *(_QWORD *)&buf[8];
      if (v82)
      {
        v84 = v82;
        v85 = v83;
        do
        {
          if (*v85 == 46)
            goto LABEL_139;
          ++v85;
          --v84;
        }
        while (v84);
        v85 = &v83[v82];
LABEL_139:
        if (v85 == &v83[v82])
          v86 = -1;
        else
          v86 = v85 - v83;
      }
      else
      {
        v86 = -1;
      }
      if (v82 >= v86)
        v87 = v86;
      else
        v87 = v82;
      if (v87 > 0x7FFFFFFFFFFFFFF7)
        goto LABEL_454;
      if (v87 >= 0x17)
      {
        v89 = (v87 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v87 | 7) != 0x17)
          v89 = v87 | 7;
        v90 = v89 + 1;
        v88 = (__int128 *)operator new(v89 + 1);
        *((_QWORD *)&__dst + 1) = v87;
        v291 = v90 | 0x8000000000000000;
        *(_QWORD *)&__dst = v88;
      }
      else
      {
        HIBYTE(v291) = v87;
        v88 = &__dst;
        if (!v87)
          goto LABEL_154;
      }
      memmove(v88, v83, v87);
LABEL_154:
      *((_BYTE *)v88 + v87) = 0;
      cva::Path::directory((cva::Path *)&v266);
      cva::Path::Path();
      cva::Path::Path((cva::Path *)v295, (const cva::Path *)v279);
      cva::Path::append();
      cva::Path::Path((cva::Path *)&v269, (const cva::Path *)v295);
      cva::Path::~Path((cva::Path *)v295);
      HIBYTE(v296) = 5;
      strcpy((char *)v295, ".json");
      cva::Path::Path((cva::Path *)v293, (const cva::Path *)&v269);
      cva::Path::concatenate();
      cva::Path::Path((cva::Path *)&v264, (const cva::Path *)v293);
      cva::Path::~Path((cva::Path *)v293);
      if (SHIBYTE(v296) < 0)
        operator delete(*(void **)v295);
      cva::Path::~Path((cva::Path *)&v269);
      cva::Path::~Path((cva::Path *)v278);
      cva::Path::~Path((cva::Path *)v279);
      v91 = (char *)v275;
      for (i = (void **)v276; i != (void **)v91; i -= 3)
      {
        if (*((char *)i - 1) < 0)
          operator delete(*(i - 3));
      }
      v276 = v91;
      v93 = (char *)__p;
      for (j = (void **)v273; j != (void **)v93; j -= 3)
      {
        if (*((char *)j - 1) < 0)
          operator delete(*(j - 3));
      }
      v273 = v93;
      if (!cva::Path::exists((cva::Path *)&v264) || (cva::Path::isDirectory((cva::Path *)&v264) & 1) != 0)
      {
        v95 = atomic_load((unsigned __int8 *)&qword_1ED52ACC0);
        if ((v95 & 1) == 0 && __cxa_guard_acquire(&qword_1ED52ACC0))
        {
          qword_1ED52ACC8 = (uint64_t)os_log_create("com.apple.AppleCVA", "Espresso");
          __cxa_guard_release(&qword_1ED52ACC0);
        }
        v96 = qword_1ED52ACC8;
        if (os_log_type_enabled((os_log_t)qword_1ED52ACC8, OS_LOG_TYPE_INFO))
        {
          v97 = cva::Path::string((cva::Path *)&v264);
          if (*(char *)(v97 + 23) >= 0)
            v98 = v97;
          else
            v98 = *(_QWORD *)v97;
          *(_DWORD *)v295 = 136315138;
          *(_QWORD *)&v295[4] = v98;
          _os_log_impl(&dword_1C9870000, v96, OS_LOG_TYPE_INFO, "could not find a corresponding json file [%s] to load custom input/output layers", v295, 0xCu);
        }
        goto LABEL_270;
      }
      cva::Path::string((cva::Path *)&v264);
      cva::DictionaryHandler::readJsonFile();
      if (!v269)
        goto LABEL_262;
      if (cva::DictionaryHandler::hasKey(v269, "Inputs"))
      {
        cva::DictionaryHandler::item(v269, "Inputs");
        cva::ItemHandler::getArray((cva::ItemHandler *)v293);
        v103 = *(cva::ArrayHandler **)v295;
        v102 = *(std::__shared_weak_count **)&v295[8];
        memset(v295, 0, sizeof(v295));
        cva::ItemHandler::~ItemHandler((cva::ItemHandler *)v293);
        if (v103)
        {
          v104 = 0;
          while (1)
          {
            v110 = cva::ArrayHandler::size(v103);
            v108 = v104 >= v110;
            if (v104 >= v110)
              goto LABEL_220;
            cva::ArrayHandler::item(v103);
            cva::ItemHandler::getValue<std::string>();
            cva::ItemHandler::~ItemHandler((cva::ItemHandler *)v293);
            v111 = espresso_network_declare_input();
            if (!v111)
              break;
            v112 = atomic_load((unsigned __int8 *)&qword_1ED52ACC0);
            if ((v112 & 1) == 0 && __cxa_guard_acquire(&qword_1ED52ACC0))
            {
              qword_1ED52ACC8 = (uint64_t)os_log_create("com.apple.AppleCVA", "Espresso");
              __cxa_guard_release(&qword_1ED52ACC0);
            }
            v113 = qword_1ED52ACC8;
            if (os_log_type_enabled((os_log_t)qword_1ED52ACC8, OS_LOG_TYPE_ERROR))
            {
              if (v296 >= 0)
                v109 = v295;
              else
                v109 = *(uint8_t **)v295;
              *(_DWORD *)v293 = 67109378;
              *(_DWORD *)&v293[4] = v111;
              LOWORD(v294) = 2080;
              *(_QWORD *)((char *)&v294 + 2) = v109;
              _os_log_error_impl(&dword_1C9870000, v113, OS_LOG_TYPE_ERROR, "could not declare input [%d, %s]", v293, 0x12u);
              if (SHIBYTE(v296) < 0)
                goto LABEL_215;
LABEL_201:
              ++v104;
              if (v111)
                goto LABEL_219;
            }
            else
            {
              if ((SHIBYTE(v296) & 0x80000000) == 0)
                goto LABEL_201;
LABEL_215:
              operator delete(*(void **)v295);
              ++v104;
              if (v111)
              {
LABEL_219:
                v108 = 0;
LABEL_220:
                if (v102)
                {
LABEL_221:
                  v117 = (unint64_t *)&v102->__shared_owners_;
                  do
                    v118 = __ldaxr(v117);
                  while (__stlxr(v118 - 1, v117));
                  if (!v118)
                  {
                    ((void (*)(std::__shared_weak_count *))v102->__on_zero_shared)(v102);
                    std::__shared_weak_count::__release_weak(v102);
                  }
                }
                goto LABEL_225;
              }
            }
          }
          v114 = v276;
          if ((unint64_t)v276 >= v277)
          {
            v116 = sub_1C99021D0((uint64_t)&v275, (uint64_t)v295);
          }
          else
          {
            if (SHIBYTE(v296) < 0)
            {
              sub_1C987D148(v276, *(void **)v295, *(unint64_t *)&v295[8]);
            }
            else
            {
              v115 = *(_OWORD *)v295;
              *((_QWORD *)v276 + 2) = v296;
              *v114 = v115;
            }
            v116 = (char *)v114 + 24;
          }
          v276 = v116;
          if (SHIBYTE(v296) < 0)
            goto LABEL_215;
          goto LABEL_201;
        }
        v106 = atomic_load((unsigned __int8 *)&qword_1ED52ACC0);
        if ((v106 & 1) == 0 && __cxa_guard_acquire(&qword_1ED52ACC0))
        {
          qword_1ED52ACC8 = (uint64_t)os_log_create("com.apple.AppleCVA", "Espresso");
          __cxa_guard_release(&qword_1ED52ACC0);
        }
        v107 = qword_1ED52ACC8;
        if (os_log_type_enabled((os_log_t)qword_1ED52ACC8, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)v295 = 0;
          _os_log_error_impl(&dword_1C9870000, v107, OS_LOG_TYPE_ERROR, "invalid model json file, 'Inputs' must be an array", v295, 2u);
          v108 = 0;
          if (v102)
            goto LABEL_221;
        }
        else
        {
          v108 = 0;
          if (v102)
            goto LABEL_221;
        }
LABEL_225:
        if (!v108)
          goto LABEL_264;
      }
      if (!cva::DictionaryHandler::hasKey(v269, "Outputs"))
        goto LABEL_262;
      cva::DictionaryHandler::item(v269, "Outputs");
      cva::ItemHandler::getArray((cva::ItemHandler *)v293);
      v120 = *(cva::ArrayHandler **)v295;
      v119 = *(std::__shared_weak_count **)&v295[8];
      memset(v295, 0, sizeof(v295));
      cva::ItemHandler::~ItemHandler((cva::ItemHandler *)v293);
      if (v120)
      {
        v121 = 0;
        while (1)
        {
          v126 = cva::ArrayHandler::size(v120);
          v124 = v121 >= v126;
          if (v121 >= v126)
            goto LABEL_256;
          cva::ArrayHandler::item(v120);
          cva::ItemHandler::getValue<std::string>();
          cva::ItemHandler::~ItemHandler((cva::ItemHandler *)v293);
          v127 = espresso_network_declare_output();
          if (!v127)
            break;
          v128 = atomic_load((unsigned __int8 *)&qword_1ED52ACC0);
          if ((v128 & 1) == 0 && __cxa_guard_acquire(&qword_1ED52ACC0))
          {
            qword_1ED52ACC8 = (uint64_t)os_log_create("com.apple.AppleCVA", "Espresso");
            __cxa_guard_release(&qword_1ED52ACC0);
          }
          v129 = qword_1ED52ACC8;
          if (os_log_type_enabled((os_log_t)qword_1ED52ACC8, OS_LOG_TYPE_ERROR))
          {
            if (v296 >= 0)
              v125 = v295;
            else
              v125 = *(uint8_t **)v295;
            *(_DWORD *)v293 = 67109378;
            *(_DWORD *)&v293[4] = v127;
            LOWORD(v294) = 2080;
            *(_QWORD *)((char *)&v294 + 2) = v125;
            _os_log_error_impl(&dword_1C9870000, v129, OS_LOG_TYPE_ERROR, "could not declare output [%d, %s]", v293, 0x12u);
            if (SHIBYTE(v296) < 0)
              goto LABEL_251;
LABEL_237:
            ++v121;
            if (v127)
              goto LABEL_255;
          }
          else
          {
            if ((SHIBYTE(v296) & 0x80000000) == 0)
              goto LABEL_237;
LABEL_251:
            operator delete(*(void **)v295);
            ++v121;
            if (v127)
            {
LABEL_255:
              v124 = 0;
LABEL_256:
              if (v119)
              {
LABEL_257:
                v133 = (unint64_t *)&v119->__shared_owners_;
                do
                  v134 = __ldaxr(v133);
                while (__stlxr(v134 - 1, v133));
                if (!v134)
                {
                  ((void (*)(std::__shared_weak_count *))v119->__on_zero_shared)(v119);
                  std::__shared_weak_count::__release_weak(v119);
                }
              }
              goto LABEL_261;
            }
          }
        }
        v130 = v273;
        if ((unint64_t)v273 >= v274)
        {
          v132 = sub_1C99021D0((uint64_t)&__p, (uint64_t)v295);
        }
        else
        {
          if (SHIBYTE(v296) < 0)
          {
            sub_1C987D148(v273, *(void **)v295, *(unint64_t *)&v295[8]);
          }
          else
          {
            v131 = *(_OWORD *)v295;
            *((_QWORD *)v273 + 2) = v296;
            *v130 = v131;
          }
          v132 = (char *)v130 + 24;
        }
        v273 = v132;
        if (SHIBYTE(v296) < 0)
          goto LABEL_251;
        goto LABEL_237;
      }
      v122 = atomic_load((unsigned __int8 *)&qword_1ED52ACC0);
      if ((v122 & 1) == 0 && __cxa_guard_acquire(&qword_1ED52ACC0))
      {
        qword_1ED52ACC8 = (uint64_t)os_log_create("com.apple.AppleCVA", "Espresso");
        __cxa_guard_release(&qword_1ED52ACC0);
      }
      v123 = qword_1ED52ACC8;
      if (os_log_type_enabled((os_log_t)qword_1ED52ACC8, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)v295 = 0;
        _os_log_error_impl(&dword_1C9870000, v123, OS_LOG_TYPE_ERROR, "invalid model json file, 'Outputs' must be an array", v295, 2u);
        v124 = 0;
        if (v119)
          goto LABEL_257;
      }
      else
      {
        v124 = 0;
        if (v119)
          goto LABEL_257;
      }
LABEL_261:
      if (!v124)
      {
LABEL_264:
        v135 = 0;
        v136 = (std::__shared_weak_count *)v270;
        if (!v270)
          goto LABEL_269;
      }
      else
      {
LABEL_262:
        v135 = 1;
        v136 = (std::__shared_weak_count *)v270;
        if (!v270)
          goto LABEL_269;
      }
      v137 = (unint64_t *)&v136->__shared_owners_;
      do
        v138 = __ldaxr(v137);
      while (__stlxr(v138 - 1, v137));
      if (!v138)
      {
        ((void (*)(std::__shared_weak_count *))v136->__on_zero_shared)(v136);
        std::__shared_weak_count::__release_weak(v136);
      }
LABEL_269:
      if ((v135 & 1) == 0)
      {
        v139 = 0;
        goto LABEL_271;
      }
LABEL_270:
      v139 = 1;
LABEL_271:
      cva::Path::~Path((cva::Path *)&v264);
      if (SHIBYTE(v291) < 0)
        operator delete((void *)__dst);
      if ((buf[23] & 0x80000000) != 0)
        operator delete(*(void **)buf);
      cva::Path::~Path((cva::Path *)&v266);
      if ((v139 & 1) == 0)
      {
        v144 = atomic_load((unsigned __int8 *)&qword_1ED52ACC0);
        if ((v144 & 1) == 0 && __cxa_guard_acquire(&qword_1ED52ACC0))
        {
          qword_1ED52ACC8 = (uint64_t)os_log_create("com.apple.AppleCVA", "Espresso");
          __cxa_guard_release(&qword_1ED52ACC0);
        }
        v145 = qword_1ED52ACC8;
        if (os_log_type_enabled((os_log_t)qword_1ED52ACC8, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)buf = 0;
          _os_log_error_impl(&dword_1C9870000, v145, OS_LOG_TYPE_ERROR, "could not register the input and output layers", buf, 2u);
        }
        goto LABEL_284;
      }
      v140 = espresso_plan_build();
      if (v140)
      {
        v141 = v140;
        v142 = atomic_load((unsigned __int8 *)&qword_1ED52ACC0);
        if ((v142 & 1) == 0 && __cxa_guard_acquire(&qword_1ED52ACC0))
        {
          qword_1ED52ACC8 = (uint64_t)os_log_create("com.apple.AppleCVA", "Espresso");
          __cxa_guard_release(&qword_1ED52ACC0);
        }
        v143 = qword_1ED52ACC8;
        if (os_log_type_enabled((os_log_t)qword_1ED52ACC8, OS_LOG_TYPE_ERROR))
        {
          v261 = espresso_get_status_string();
          *(_DWORD *)buf = 67109378;
          *(_DWORD *)&buf[4] = v141;
          *(_WORD *)&buf[8] = 2080;
          *(_QWORD *)&buf[10] = v261;
          _os_log_error_impl(&dword_1C9870000, v143, OS_LOG_TYPE_ERROR, "could not build espresso plan [%d, %s]", buf, 0x12u);
        }
        sub_1C9901334(v39);
LABEL_284:
        LOBYTE(v146) = 0;
        goto LABEL_285;
      }
      memset(v295, 0, sizeof(v295));
      v296 = 0;
      *(_QWORD *)v293 = 0;
      v294 = 0uLL;
      input_names = c_network_get_input_names();
      if (input_names)
      {
        v153 = input_names;
        v154 = sub_1C98FF0E0();
        if (!os_log_type_enabled(v154, OS_LOG_TYPE_ERROR))
          goto LABEL_311;
        v155 = espresso_get_status_string();
        *(_DWORD *)buf = 67109378;
        *(_DWORD *)&buf[4] = v153;
        *(_WORD *)&buf[8] = 2080;
        *(_QWORD *)&buf[10] = v155;
        v156 = "could not get network input names [%d, %s]";
        goto LABEL_447;
      }
      output_names = c_network_get_output_names();
      if (output_names)
      {
        v158 = output_names;
        v154 = sub_1C98FF0E0();
        if (!os_log_type_enabled(v154, OS_LOG_TYPE_ERROR))
          goto LABEL_311;
        v262 = espresso_get_status_string();
        *(_DWORD *)buf = 67109378;
        *(_DWORD *)&buf[4] = v158;
        *(_WORD *)&buf[8] = 2080;
        *(_QWORD *)&buf[10] = v262;
        v156 = "could not get network output names [%d, %s]";
LABEL_447:
        _os_log_error_impl(&dword_1C9870000, v154, OS_LOG_TYPE_ERROR, v156, buf, 0x12u);
LABEL_311:
        sub_1C9901334(v39);
        LOBYTE(v146) = 0;
        v159 = *(void ***)v293;
        if (!*(_QWORD *)v293)
          goto LABEL_319;
        goto LABEL_312;
      }
      v269 = 0;
      v270 = 0;
      v271 = 0;
      sub_1C990176C((void **)&v269, (uint64_t)v295);
      v266 = 0;
      v267 = 0;
      v268 = 0;
      sub_1C990176C((void **)&v266, (uint64_t)v293);
      v265[0] = 0;
      v265[1] = 0;
      v165 = v269;
      v263 = v270;
      v264 = v265;
      if (v269 == v270)
        goto LABEL_403;
LABEL_331:
      v166 = v265[0];
      if (!v265[0])
        goto LABEL_370;
      v167 = *((char *)v165 + 23);
      if (v167 >= 0)
        v168 = v165;
      else
        v168 = *(cva::DictionaryHandler **)v165;
      if (v167 >= 0)
        v169 = *((unsigned __int8 *)v165 + 23);
      else
        v169 = *((_QWORD *)v165 + 1);
      v170 = v265;
      while (1)
      {
        v171 = v166[55];
        if (v171 >= 0)
          v172 = v166 + 32;
        else
          v172 = (const void *)*((_QWORD *)v166 + 4);
        if (v171 >= 0)
          v173 = v166[55];
        else
          v173 = *((_QWORD *)v166 + 5);
        if (v169 >= v173)
          v174 = v173;
        else
          v174 = v169;
        v175 = memcmp(v172, v168, v174);
        if (v175)
        {
          if (v175 < 0)
            goto LABEL_341;
LABEL_339:
          v170 = (char **)v166;
          v166 = *(char **)v166;
          if (!v166)
            goto LABEL_356;
        }
        else
        {
          if (v173 >= v169)
            goto LABEL_339;
LABEL_341:
          v166 = (char *)*((_QWORD *)v166 + 1);
          if (!v166)
          {
LABEL_356:
            if (v170 == v265)
              goto LABEL_370;
            v178 = v170[4];
            v177 = v170 + 4;
            v176 = v178;
            v179 = *((char *)v177 + 23);
            if (v179 >= 0)
              v180 = v177;
            else
              v180 = (char **)v176;
            if (v179 >= 0)
              v181 = *((unsigned __int8 *)v177 + 23);
            else
              v181 = (size_t)v177[1];
            if (v181 >= v169)
              v182 = v169;
            else
              v182 = v181;
            v183 = memcmp(v168, v180, v182);
            if (!v183)
            {
              if (v169 < v181)
                goto LABEL_370;
              goto LABEL_330;
            }
            if ((v183 & 0x80000000) == 0)
              goto LABEL_330;
LABEL_370:
            HIBYTE(v291) = 5;
            strcpy((char *)&__dst, "dummy");
            *(_QWORD *)&v292 = -1;
            *((_QWORD *)&v292 + 1) = -1;
            v184 = sub_1C9901800(v39[1], v39[2], (__int128 *)v165, (uint64_t)&__dst, (uint64_t)buf, 1);
            if (!v184)
            {
              v187 = atomic_load((unsigned __int8 *)&qword_1ED52ACC0);
              if ((v187 & 1) == 0 && __cxa_guard_acquire(&qword_1ED52ACC0))
              {
                qword_1ED52ACC8 = (uint64_t)os_log_create("com.apple.AppleCVA", "Espresso");
                __cxa_guard_release(&qword_1ED52ACC0);
              }
              v188 = qword_1ED52ACC8;
              if (os_log_type_enabled((os_log_t)qword_1ED52ACC8, OS_LOG_TYPE_ERROR))
              {
                *(_WORD *)v279 = 0;
                _os_log_error_impl(&dword_1C9870000, v188, OS_LOG_TYPE_ERROR, "could not setup espresso input", v279, 2u);
              }
              sub_1C9901334(v39);
              goto LABEL_399;
            }
            v185 = v39[4];
            if (v185 >= v39[5])
            {
              v189 = sub_1C9901EE0((uint64_t)(v39 + 3), (uint64_t)&__dst);
            }
            else
            {
              if (SHIBYTE(v291) < 0)
              {
                sub_1C987D148((_BYTE *)v39[4], (void *)__dst, *((unint64_t *)&__dst + 1));
              }
              else
              {
                v186 = __dst;
                *(_QWORD *)(v185 + 16) = v291;
                *(_OWORD *)v185 = v186;
              }
              *(_OWORD *)(v185 + 24) = v292;
              v189 = (char *)(v185 + 40);
            }
            v39[4] = (uint64_t)v189;
            v191 = (char *)v39[10];
            v190 = v39[11];
            if ((unint64_t)v191 < v190)
            {
              v192 = *(_OWORD *)buf;
              v193 = v281;
              *((_OWORD *)v191 + 1) = *(_OWORD *)&buf[16];
              *((_OWORD *)v191 + 2) = v193;
              *(_OWORD *)v191 = v192;
              v194 = v282;
              v195 = v283;
              v196 = v285;
              *((_OWORD *)v191 + 5) = v284;
              *((_OWORD *)v191 + 6) = v196;
              *((_OWORD *)v191 + 3) = v194;
              *((_OWORD *)v191 + 4) = v195;
              v197 = v286;
              v198 = v287;
              v199 = v288;
              *((_QWORD *)v191 + 20) = v289;
              *((_OWORD *)v191 + 8) = v198;
              *((_OWORD *)v191 + 9) = v199;
              *((_OWORD *)v191 + 7) = v197;
              v200 = v191 + 168;
              goto LABEL_398;
            }
            v201 = (_BYTE *)v39[9];
            v202 = 0xCF3CF3CF3CF3CF3DLL * ((v191 - v201) >> 3) + 1;
            if (v202 <= 0x186186186186186)
            {
              v203 = 0xCF3CF3CF3CF3CF3DLL * ((uint64_t)(v190 - (_QWORD)v201) >> 3);
              if (2 * v203 > v202)
                v202 = 2 * v203;
              if (v203 >= 0xC30C30C30C30C3)
                v204 = 0x186186186186186;
              else
                v204 = v202;
              if (v204)
              {
                if (v204 > 0x186186186186186)
LABEL_479:
                  sub_1C9899D30();
                v205 = (char *)operator new(168 * v204);
              }
              else
              {
                v205 = 0;
              }
              v206 = v288;
              v207 = &v205[8 * ((v191 - v201) >> 3)];
              *((_OWORD *)v207 + 8) = v287;
              *((_OWORD *)v207 + 9) = v206;
              *((_QWORD *)v207 + 20) = v289;
              v208 = v284;
              *((_OWORD *)v207 + 4) = v283;
              *((_OWORD *)v207 + 5) = v208;
              v209 = v286;
              *((_OWORD *)v207 + 6) = v285;
              *((_OWORD *)v207 + 7) = v209;
              v210 = *(_OWORD *)&buf[16];
              *(_OWORD *)v207 = *(_OWORD *)buf;
              *((_OWORD *)v207 + 1) = v210;
              v211 = v282;
              *((_OWORD *)v207 + 2) = v281;
              *((_OWORD *)v207 + 3) = v211;
              v212 = v207;
              if (v191 != v201)
              {
                do
                {
                  v213 = *(_OWORD *)(v191 - 168);
                  v214 = *(_OWORD *)(v191 - 152);
                  *(_OWORD *)(v212 - 136) = *(_OWORD *)(v191 - 136);
                  *(_OWORD *)(v212 - 152) = v214;
                  *(_OWORD *)(v212 - 168) = v213;
                  v215 = *(_OWORD *)(v191 - 120);
                  v216 = *(_OWORD *)(v191 - 104);
                  v217 = *(_OWORD *)(v191 - 88);
                  *(_OWORD *)(v212 - 72) = *(_OWORD *)(v191 - 72);
                  *(_OWORD *)(v212 - 88) = v217;
                  *(_OWORD *)(v212 - 104) = v216;
                  *(_OWORD *)(v212 - 120) = v215;
                  v218 = *(_OWORD *)(v191 - 56);
                  v219 = *(_OWORD *)(v191 - 40);
                  v220 = *(_OWORD *)(v191 - 24);
                  *((_QWORD *)v212 - 1) = *((_QWORD *)v191 - 1);
                  *(_OWORD *)(v212 - 24) = v220;
                  *(_OWORD *)(v212 - 40) = v219;
                  *(_OWORD *)(v212 - 56) = v218;
                  v212 -= 168;
                  v191 -= 168;
                }
                while (v191 != v201);
                v191 = (char *)v39[9];
              }
              v200 = v207 + 168;
              v39[9] = (uint64_t)v212;
              v39[10] = (uint64_t)(v207 + 168);
              v39[11] = (uint64_t)&v205[168 * v204];
              if (v191)
                operator delete(v191);
LABEL_398:
              v39[10] = (uint64_t)v200;
              sub_1C9902074((uint64_t **)&v264, (const void **)v165, (uint64_t)v165);
LABEL_399:
              if (SHIBYTE(v291) < 0)
                operator delete((void *)__dst);
              if (v184)
              {
LABEL_330:
                v165 = (cva::DictionaryHandler *)((char *)v165 + 24);
                if (v165 != v263)
                  goto LABEL_331;
LABEL_403:
                v221 = v266;
                v222 = v267;
                if (v266 == v267)
                {
                  LOBYTE(v146) = 1;
                }
                else
                {
                  do
                  {
                    HIBYTE(v291) = 5;
                    strcpy((char *)&__dst, "dummy");
                    *(_QWORD *)&v292 = -1;
                    *((_QWORD *)&v292 + 1) = -1;
                    v146 = sub_1C9901800(v39[1], v39[2], v221, (uint64_t)&__dst, (uint64_t)buf, 0);
                    if (v146)
                    {
                      v224 = v39[7];
                      if (v224 >= v39[8])
                      {
                        v228 = sub_1C9901EE0((uint64_t)(v39 + 6), (uint64_t)&__dst);
                      }
                      else
                      {
                        if (SHIBYTE(v291) < 0)
                        {
                          sub_1C987D148((_BYTE *)v39[7], (void *)__dst, *((unint64_t *)&__dst + 1));
                        }
                        else
                        {
                          v225 = __dst;
                          *(_QWORD *)(v224 + 16) = v291;
                          *(_OWORD *)v224 = v225;
                        }
                        *(_OWORD *)(v224 + 24) = v292;
                        v228 = (char *)(v224 + 40);
                      }
                      v39[7] = (uint64_t)v228;
                      v230 = (char *)v39[13];
                      v229 = v39[14];
                      if ((unint64_t)v230 >= v229)
                      {
                        v240 = (char *)v39[12];
                        v241 = 0xCF3CF3CF3CF3CF3DLL * ((v230 - v240) >> 3) + 1;
                        if (v241 > 0x186186186186186)
                          goto LABEL_454;
                        v242 = 0xCF3CF3CF3CF3CF3DLL * ((uint64_t)(v229 - (_QWORD)v240) >> 3);
                        if (2 * v242 > v241)
                          v241 = 2 * v242;
                        if (v242 >= 0xC30C30C30C30C3)
                          v243 = 0x186186186186186;
                        else
                          v243 = v241;
                        if (v243)
                        {
                          if (v243 > 0x186186186186186)
                            goto LABEL_479;
                          v244 = (char *)operator new(168 * v243);
                        }
                        else
                        {
                          v244 = 0;
                        }
                        v245 = v288;
                        v246 = &v244[8 * ((v230 - v240) >> 3)];
                        *((_OWORD *)v246 + 8) = v287;
                        *((_OWORD *)v246 + 9) = v245;
                        *((_QWORD *)v246 + 20) = v289;
                        v247 = v284;
                        *((_OWORD *)v246 + 4) = v283;
                        *((_OWORD *)v246 + 5) = v247;
                        v248 = v286;
                        *((_OWORD *)v246 + 6) = v285;
                        *((_OWORD *)v246 + 7) = v248;
                        v249 = *(_OWORD *)&buf[16];
                        *(_OWORD *)v246 = *(_OWORD *)buf;
                        *((_OWORD *)v246 + 1) = v249;
                        v250 = v282;
                        *((_OWORD *)v246 + 2) = v281;
                        *((_OWORD *)v246 + 3) = v250;
                        v251 = v246;
                        if (v230 != v240)
                        {
                          do
                          {
                            v252 = *(_OWORD *)(v230 - 168);
                            v253 = *(_OWORD *)(v230 - 152);
                            *(_OWORD *)(v251 - 136) = *(_OWORD *)(v230 - 136);
                            *(_OWORD *)(v251 - 152) = v253;
                            *(_OWORD *)(v251 - 168) = v252;
                            v254 = *(_OWORD *)(v230 - 120);
                            v255 = *(_OWORD *)(v230 - 104);
                            v256 = *(_OWORD *)(v230 - 88);
                            *(_OWORD *)(v251 - 72) = *(_OWORD *)(v230 - 72);
                            *(_OWORD *)(v251 - 88) = v256;
                            *(_OWORD *)(v251 - 104) = v255;
                            *(_OWORD *)(v251 - 120) = v254;
                            v257 = *(_OWORD *)(v230 - 56);
                            v258 = *(_OWORD *)(v230 - 40);
                            v259 = *(_OWORD *)(v230 - 24);
                            *((_QWORD *)v251 - 1) = *((_QWORD *)v230 - 1);
                            *(_OWORD *)(v251 - 24) = v259;
                            *(_OWORD *)(v251 - 40) = v258;
                            *(_OWORD *)(v251 - 56) = v257;
                            v251 -= 168;
                            v230 -= 168;
                          }
                          while (v230 != v240);
                          v230 = (char *)v39[12];
                        }
                        v260 = &v244[168 * v243];
                        v239 = v246 + 168;
                        v39[12] = (uint64_t)v251;
                        v39[13] = (uint64_t)(v246 + 168);
                        v39[14] = (uint64_t)v260;
                        if (v230)
                          operator delete(v230);
                      }
                      else
                      {
                        v231 = *(_OWORD *)buf;
                        v232 = v281;
                        *((_OWORD *)v230 + 1) = *(_OWORD *)&buf[16];
                        *((_OWORD *)v230 + 2) = v232;
                        *(_OWORD *)v230 = v231;
                        v233 = v282;
                        v234 = v283;
                        v235 = v285;
                        *((_OWORD *)v230 + 5) = v284;
                        *((_OWORD *)v230 + 6) = v235;
                        *((_OWORD *)v230 + 3) = v233;
                        *((_OWORD *)v230 + 4) = v234;
                        v236 = v286;
                        v237 = v287;
                        v238 = v288;
                        *((_QWORD *)v230 + 20) = v289;
                        *((_OWORD *)v230 + 8) = v237;
                        *((_OWORD *)v230 + 9) = v238;
                        *((_OWORD *)v230 + 7) = v236;
                        v239 = v230 + 168;
                      }
                      v39[13] = (uint64_t)v239;
                    }
                    else
                    {
                      v226 = atomic_load((unsigned __int8 *)&qword_1ED52ACC0);
                      if ((v226 & 1) == 0 && __cxa_guard_acquire(&qword_1ED52ACC0))
                      {
                        qword_1ED52ACC8 = (uint64_t)os_log_create("com.apple.AppleCVA", "Espresso");
                        __cxa_guard_release(&qword_1ED52ACC0);
                      }
                      v227 = qword_1ED52ACC8;
                      if (os_log_type_enabled((os_log_t)qword_1ED52ACC8, OS_LOG_TYPE_ERROR))
                      {
                        *(_WORD *)v279 = 0;
                        _os_log_error_impl(&dword_1C9870000, v227, OS_LOG_TYPE_ERROR, "could not setup espresso output", v279, 2u);
                      }
                      sub_1C9901334(v39);
                    }
                    if (SHIBYTE(v291) < 0)
                      operator delete((void *)__dst);
                    v221 = (__int128 *)((char *)v221 + 24);
                    if (v221 == v222)
                      v223 = 0;
                    else
                      v223 = v146;
                  }
                  while ((v223 & 1) != 0);
                }
              }
              else
              {
                LOBYTE(v146) = 0;
              }
              sub_1C9887678(v265[0]);
              sub_1C98876C0((void **)&v266);
              sub_1C98876C0((void **)&v269);
              v159 = *(void ***)v293;
              if (!*(_QWORD *)v293)
              {
LABEL_319:
                v162 = *(_QWORD *)v295;
                if (*(_QWORD *)v295)
                {
                  v163 = *(_QWORD *)&v295[8];
                  v164 = *(void **)v295;
                  if (*(_QWORD *)&v295[8] != *(_QWORD *)v295)
                  {
                    do
                    {
                      if (*(char *)(v163 - 1) < 0)
                        operator delete(*(void **)(v163 - 24));
                      v163 -= 24;
                    }
                    while (v163 != v162);
                    v164 = *(void **)v295;
                  }
                  *(_QWORD *)&v295[8] = v162;
                  operator delete(v164);
                }
LABEL_285:
                v147 = (void **)__p;
                if (__p)
                {
                  for (k = (void **)v273; k != v147; k -= 3)
                  {
                    if (*((char *)k - 1) < 0)
                      operator delete(*(k - 3));
                  }
                  operator delete(v147);
                }
                v149 = (void **)v275;
                if (v275)
                {
                  for (m = (void **)v276; m != v149; m -= 3)
                  {
                    if (*((char *)m - 1) < 0)
                      operator delete(*(m - 3));
                  }
                  operator delete(v149);
                }
                if ((v146 & 1) != 0)
                {
                  v151 = *(__int128 ***)(*(_QWORD *)(a1 + 56) + 48);
                  if ((__int128 **)(a1 + 8) != v151 + 3)
                  {
                    sub_1C9901450((char **)(a1 + 8), v151[3], v151[4], 0xCCCCCCCCCCCCCCCDLL * (((char *)v151[4] - (char *)v151[3]) >> 3));
                    v151 = *(__int128 ***)(*(_QWORD *)(a1 + 56) + 48);
                  }
                  if ((__int128 **)(a1 + 32) != v151 + 6)
                    sub_1C9901450((char **)(a1 + 32), v151[6], v151[7], 0xCCCCCCCCCCCCCCCDLL * (((char *)v151[7] - (char *)v151[6]) >> 3));
                  return 1;
                }
LABEL_68:
                v51 = atomic_load((unsigned __int8 *)&qword_1ED52ACC0);
                if ((v51 & 1) == 0 && __cxa_guard_acquire(&qword_1ED52ACC0))
                {
                  qword_1ED52ACC8 = (uint64_t)os_log_create("com.apple.AppleCVA", "Espresso");
                  __cxa_guard_release(&qword_1ED52ACC0);
                }
                v52 = qword_1ED52ACC8;
                if (os_log_type_enabled((os_log_t)qword_1ED52ACC8, OS_LOG_TYPE_ERROR))
                {
                  *(_WORD *)buf = 0;
                  _os_log_error_impl(&dword_1C9870000, v52, OS_LOG_TYPE_ERROR, "failed to create espresso plan", buf, 2u);
                }
                sub_1C98FEDF4(*(_QWORD **)(a1 + 56));
                return 0;
              }
LABEL_312:
              v160 = (void **)v294;
              v161 = v159;
              if ((void **)v294 != v159)
              {
                do
                {
                  if (*((char *)v160 - 1) < 0)
                    operator delete(*(v160 - 3));
                  v160 -= 3;
                }
                while (v160 != v159);
                v161 = *(void ***)v293;
              }
              *(_QWORD *)&v294 = v159;
              operator delete(v161);
              goto LABEL_319;
            }
LABEL_454:
            abort();
          }
        }
      }
    }
  }
  v48 = atomic_load((unsigned __int8 *)&qword_1ED52ACC0);
  if ((v48 & 1) == 0 && __cxa_guard_acquire(&qword_1ED52ACC0))
  {
    qword_1ED52ACC8 = (uint64_t)os_log_create("com.apple.AppleCVA", "Espresso");
    __cxa_guard_release(&qword_1ED52ACC0);
  }
  v6 = qword_1ED52ACC8;
  result = os_log_type_enabled((os_log_t)qword_1ED52ACC8, OS_LOG_TYPE_ERROR);
  if (result)
  {
    *(_WORD *)buf = 0;
    v8 = "could not create espresso context";
LABEL_5:
    _os_log_error_impl(&dword_1C9870000, v6, OS_LOG_TYPE_ERROR, v8, buf, 2u);
    return 0;
  }
  return result;
}

void sub_1C9901334(_QWORD *a1)
{
  int v2;
  int v3;
  unsigned __int8 v4;
  NSObject *v5;
  _DWORD v6[2];
  __int16 v7;
  uint64_t status_string;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  if (*a1)
  {
    v2 = espresso_plan_destroy();
    if (v2)
    {
      v3 = v2;
      v4 = atomic_load((unsigned __int8 *)&qword_1ED52ACC0);
      if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_1ED52ACC0))
      {
        qword_1ED52ACC8 = (uint64_t)os_log_create("com.apple.AppleCVA", "Espresso");
        __cxa_guard_release(&qword_1ED52ACC0);
      }
      v5 = qword_1ED52ACC8;
      if (os_log_type_enabled((os_log_t)qword_1ED52ACC8, OS_LOG_TYPE_ERROR))
      {
        v6[0] = 67109378;
        v6[1] = v3;
        v7 = 2080;
        status_string = espresso_get_status_string();
        _os_log_error_impl(&dword_1C9870000, v5, OS_LOG_TYPE_ERROR, "could not delete espresso plan [%d, %s]", (uint8_t *)v6, 0x12u);
      }
    }
    *a1 = 0;
  }
}

void sub_1C9901450(char **a1, __int128 *a2, __int128 *a3, size_t __sz)
{
  __int128 *v6;
  uint64_t v8;
  char *v9;
  void **v10;
  char *v11;
  void **v12;
  unint64_t v13;
  __int128 *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  size_t v18;
  char *v19;
  __int128 *v20;
  char v21;
  __int128 v22;
  __int128 *v23;
  size_t v24;
  char v25;
  __int128 v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  char *v31;
  __int128 v32;

  v6 = a2;
  v8 = (uint64_t)a1[2];
  v9 = *a1;
  if (0xCCCCCCCCCCCCCCCDLL * ((v8 - (uint64_t)*a1) >> 3) < __sz)
  {
    if (v9)
    {
      v10 = (void **)a1[1];
      v11 = *a1;
      if (v10 != (void **)v9)
      {
        do
        {
          if (*((char *)v10 - 17) < 0)
            operator delete(*(v10 - 5));
          v10 -= 5;
        }
        while (v10 != (void **)v9);
        v11 = *a1;
      }
      a1[1] = v9;
      operator delete(v11);
      v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (__sz > 0x666666666666666)
      goto LABEL_68;
    v27 = 0xCCCCCCCCCCCCCCCDLL * (v8 >> 3);
    v28 = 2 * v27;
    if (2 * v27 <= __sz)
      v28 = __sz;
    v29 = v27 >= 0x333333333333333 ? 0x666666666666666 : v28;
    if (v29 > 0x666666666666666)
LABEL_68:
      abort();
    v30 = 40 * v29;
    v9 = (char *)operator new(40 * v29);
    *a1 = v9;
    a1[1] = v9;
    a1[2] = &v9[v30];
    while (v6 != a3)
    {
      if (*((char *)v6 + 23) < 0)
      {
        sub_1C987D148(v9, *(void **)v6, *((_QWORD *)v6 + 1));
      }
      else
      {
        *(_OWORD *)v9 = *v6;
        *((_QWORD *)v9 + 2) = *((_QWORD *)v6 + 2);
      }
      *(_OWORD *)(v9 + 24) = *(__int128 *)((char *)v6 + 24);
      v6 = (__int128 *)((char *)v6 + 40);
      v9 += 40;
    }
LABEL_67:
    a1[1] = v9;
    return;
  }
  v12 = (void **)a1[1];
  v13 = 0xCCCCCCCCCCCCCCCDLL * (((char *)v12 - v9) >> 3);
  if (v13 >= __sz)
  {
    if (a2 != a3)
    {
      do
      {
        if (v6 != (__int128 *)v9)
        {
          v25 = *((_BYTE *)v6 + 23);
          if (v9[23] < 0)
          {
            if (v25 >= 0)
              v23 = v6;
            else
              v23 = *(__int128 **)v6;
            if (v25 >= 0)
              v24 = *((unsigned __int8 *)v6 + 23);
            else
              v24 = *((_QWORD *)v6 + 1);
            sub_1C98A976C((void **)v9, v23, v24);
          }
          else if ((*((_BYTE *)v6 + 23) & 0x80) != 0)
          {
            sub_1C98A96AC(v9, *(void **)v6, *((_QWORD *)v6 + 1));
          }
          else
          {
            v26 = *v6;
            *((_QWORD *)v9 + 2) = *((_QWORD *)v6 + 2);
            *(_OWORD *)v9 = v26;
          }
        }
        *(_OWORD *)(v9 + 24) = *(__int128 *)((char *)v6 + 24);
        v6 = (__int128 *)((char *)v6 + 40);
        v9 += 40;
      }
      while (v6 != a3);
      v12 = (void **)a1[1];
    }
    while (v12 != (void **)v9)
    {
      if (*((char *)v12 - 17) < 0)
        operator delete(*(v12 - 5));
      v12 -= 5;
    }
    goto LABEL_67;
  }
  v14 = (__int128 *)((char *)a2 + 8 * (((char *)v12 - v9) >> 3));
  if (v12 != (void **)v9)
  {
    v15 = 0;
    v16 = 40 * v13;
    do
    {
      v19 = &v9[v15];
      v20 = (__int128 *)((char *)v6 + v15);
      if (v6 != (__int128 *)v9)
      {
        v21 = *((_BYTE *)v20 + 23);
        if (v19[23] < 0)
        {
          if (v21 >= 0)
            v17 = (char *)v6 + v15;
          else
            v17 = *(char **)((char *)v6 + v15);
          if (v21 >= 0)
            v18 = *((unsigned __int8 *)v20 + 23);
          else
            v18 = *(_QWORD *)((char *)v6 + v15 + 8);
          v19 = (char *)sub_1C98A976C((void **)v19, v17, v18);
        }
        else if ((*((_BYTE *)v20 + 23) & 0x80) != 0)
        {
          v19 = (char *)sub_1C98A96AC(v19, *(void **)((char *)v6 + v15), *(_QWORD *)((char *)v6 + v15 + 8));
        }
        else
        {
          v22 = *v20;
          *((_QWORD *)v19 + 2) = *((_QWORD *)v20 + 2);
          *(_OWORD *)v19 = v22;
        }
      }
      *(_OWORD *)(v19 + 24) = *(__int128 *)((char *)v20 + 24);
      v15 += 40;
    }
    while (v16 != v15);
    v9 = a1[1];
  }
  v31 = v9;
  if (v14 != a3)
  {
    v31 = v9;
    do
    {
      if (*((char *)v14 + 23) < 0)
      {
        sub_1C987D148(v31, *(void **)v14, *((_QWORD *)v14 + 1));
      }
      else
      {
        v32 = *v14;
        *((_QWORD *)v31 + 2) = *((_QWORD *)v14 + 2);
        *(_OWORD *)v31 = v32;
      }
      *(_OWORD *)(v31 + 24) = *(__int128 *)((char *)v14 + 24);
      v14 = (__int128 *)((char *)v14 + 40);
      v31 += 40;
    }
    while (v14 != a3);
  }
  a1[1] = v31;
}

void **sub_1C990176C(void **a1, uint64_t a2)
{
  void **v4;
  void **v5;
  void *v6;

  v4 = (void **)*a1;
  if (*a1)
  {
    v5 = (void **)a1[1];
    v6 = *a1;
    if (v5 != v4)
    {
      do
      {
        if (*((char *)v5 - 1) < 0)
          operator delete(*(v5 - 3));
        v5 -= 3;
      }
      while (v5 != v4);
      v6 = *a1;
    }
    a1[1] = v4;
    operator delete(v6);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
  *(_OWORD *)a1 = *(_OWORD *)a2;
  a1[2] = *(void **)(a2 + 16);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  return a1;
}

uint64_t sub_1C9901800(uint64_t a1, uint64_t a2, __int128 *a3, uint64_t a4, uint64_t a5, int a6)
{
  uint64_t v10;
  BOOL v11;
  __int128 *v12;
  __int128 *v13;
  int v14;
  int v15;
  unsigned __int8 v16;
  uint64_t v17;
  const char *v18;
  char v19;
  __int128 v20;
  __int128 *v21;
  size_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned __int8 v25;
  uint64_t v26;
  NSObject *v27;
  uint32_t v28;
  unsigned __int8 v29;
  NSObject *v30;
  _BOOL4 v31;
  void *v32;
  const char *v33;
  unsigned __int8 v34;
  uint64_t v35;
  void *v37;
  unsigned __int8 v38;
  NSObject *v39;
  int v40;
  int v41;
  int v42;
  int v43;
  unsigned __int8 v44;
  NSObject *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unsigned __int8 v51;
  NSObject *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unsigned __int8 v58;
  NSObject *v59;
  int v60;
  int v61;
  _BYTE v62[10];
  _BYTE v63[18];
  __int16 v64;
  uint64_t v65;
  __int16 v66;
  uint64_t v67;
  uint64_t v68;

  v68 = *MEMORY[0x1E0C80C00];
  v10 = *((unsigned __int8 *)a3 + 23);
  v11 = (v10 & 0x80u) != 0;
  if ((v10 & 0x80u) != 0)
    v10 = *((_QWORD *)a3 + 1);
  if (v11)
    v12 = *(__int128 **)a3;
  else
    v12 = a3;
  if (v10)
    v13 = v12;
  else
    v13 = 0;
  v14 = espresso_network_bind_buffer();
  if (v14)
  {
    v15 = v14;
    v16 = atomic_load((unsigned __int8 *)&qword_1ED52ACC0);
    if ((v16 & 1) == 0 && __cxa_guard_acquire(&qword_1ED52ACC0))
    {
      qword_1ED52ACC8 = (uint64_t)os_log_create("com.apple.AppleCVA", "Espresso");
      __cxa_guard_release(&qword_1ED52ACC0);
    }
    v17 = qword_1ED52ACC8;
    if (!os_log_type_enabled((os_log_t)qword_1ED52ACC8, OS_LOG_TYPE_ERROR))
      return 0;
    v61 = 136315650;
    *(_QWORD *)v62 = v13;
    *(_WORD *)&v62[8] = 1024;
    *(_DWORD *)v63 = v15;
    *(_WORD *)&v63[4] = 2080;
    *(_QWORD *)&v63[6] = espresso_get_status_string();
    v18 = "could not create blob for %s [%d, %s]";
    goto LABEL_42;
  }
  if ((__int128 *)a4 != a3)
  {
    v19 = *((_BYTE *)a3 + 23);
    if (*(char *)(a4 + 23) < 0)
    {
      if (v19 >= 0)
        v21 = a3;
      else
        v21 = *(__int128 **)a3;
      if (v19 >= 0)
        v22 = *((unsigned __int8 *)a3 + 23);
      else
        v22 = *((_QWORD *)a3 + 1);
      sub_1C98A976C((void **)a4, v21, v22);
    }
    else if ((*((_BYTE *)a3 + 23) & 0x80) != 0)
    {
      sub_1C98A96AC((_QWORD *)a4, *(void **)a3, *((_QWORD *)a3 + 1));
    }
    else
    {
      v20 = *a3;
      *(_QWORD *)(a4 + 16) = *((_QWORD *)a3 + 2);
      *(_OWORD *)a4 = v20;
    }
  }
  *(_DWORD *)(a4 + 24) = *(_QWORD *)(a5 + 104);
  v23 = *(_QWORD *)(a5 + 88);
  *(_DWORD *)(a4 + 32) = v23;
  v24 = *(_QWORD *)(a5 + 80);
  *(_DWORD *)(a4 + 36) = v24;
  *(_DWORD *)(a4 + 28) = *(_QWORD *)(a5 + 96);
  if (*(_QWORD *)(a5 + 112) >= 2uLL)
  {
    v25 = atomic_load((unsigned __int8 *)&qword_1ED52ACC0);
    if ((v25 & 1) == 0 && __cxa_guard_acquire(&qword_1ED52ACC0))
    {
      qword_1ED52ACC8 = (uint64_t)os_log_create("com.apple.AppleCVA", "Espresso");
      __cxa_guard_release(&qword_1ED52ACC0);
    }
    v26 = qword_1ED52ACC8;
    if (!os_log_type_enabled((os_log_t)qword_1ED52ACC8, OS_LOG_TYPE_ERROR))
      return 0;
    LOWORD(v61) = 0;
    v18 = "only blob dimensions with sequence length=1 are currently supported";
    v27 = v26;
    v28 = 2;
    goto LABEL_43;
  }
  if (*(_QWORD *)(a5 + 120) != 1 || *(_QWORD *)(a5 + 128) != v24 || *(_QWORD *)(a5 + 136) != v24 * v23)
  {
    v34 = atomic_load((unsigned __int8 *)&qword_1ED52ACC0);
    if ((v34 & 1) == 0 && __cxa_guard_acquire(&qword_1ED52ACC0))
    {
      qword_1ED52ACC8 = (uint64_t)os_log_create("com.apple.AppleCVA", "Espresso");
      __cxa_guard_release(&qword_1ED52ACC0);
    }
    v17 = qword_1ED52ACC8;
    if (!os_log_type_enabled((os_log_t)qword_1ED52ACC8, OS_LOG_TYPE_ERROR))
      return 0;
    v61 = 136315650;
    *(_QWORD *)v62 = v13;
    *(_WORD *)&v62[8] = 1024;
    *(_DWORD *)v63 = 0;
    *(_WORD *)&v63[4] = 2080;
    *(_QWORD *)&v63[6] = espresso_get_status_string();
    v18 = "unsupported stride sizes for %s [%d, %s]";
LABEL_42:
    v27 = v17;
    v28 = 28;
LABEL_43:
    _os_log_error_impl(&dword_1C9870000, v27, OS_LOG_TYPE_ERROR, v18, (uint8_t *)&v61, v28);
    return 0;
  }
  v29 = atomic_load((unsigned __int8 *)&qword_1ED52ACC0);
  if ((v29 & 1) == 0 && __cxa_guard_acquire(&qword_1ED52ACC0))
  {
    qword_1ED52ACC8 = (uint64_t)os_log_create("com.apple.AppleCVA", "Espresso");
    __cxa_guard_release(&qword_1ED52ACC0);
  }
  v30 = qword_1ED52ACC8;
  v31 = os_log_type_enabled((os_log_t)qword_1ED52ACC8, OS_LOG_TYPE_INFO);
  if (a6)
  {
    if (!v31)
      goto LABEL_52;
    if (*(char *)(a4 + 23) >= 0)
      v32 = (void *)a4;
    else
      v32 = *(void **)a4;
    v61 = 136315138;
    *(_QWORD *)v62 = v32;
    v33 = "Input Layer name: %s";
  }
  else
  {
    if (!v31)
      goto LABEL_52;
    if (*(char *)(a4 + 23) >= 0)
      v37 = (void *)a4;
    else
      v37 = *(void **)a4;
    v61 = 136315138;
    *(_QWORD *)v62 = v37;
    v33 = "Output Layer name: %s";
  }
  _os_log_impl(&dword_1C9870000, v30, OS_LOG_TYPE_INFO, v33, (uint8_t *)&v61, 0xCu);
LABEL_52:
  v38 = atomic_load((unsigned __int8 *)&qword_1ED52ACC0);
  if ((v38 & 1) == 0 && __cxa_guard_acquire(&qword_1ED52ACC0))
  {
    qword_1ED52ACC8 = (uint64_t)os_log_create("com.apple.AppleCVA", "Espresso");
    __cxa_guard_release(&qword_1ED52ACC0);
  }
  v39 = qword_1ED52ACC8;
  if (os_log_type_enabled((os_log_t)qword_1ED52ACC8, OS_LOG_TYPE_INFO))
  {
    v40 = *(_DWORD *)(a4 + 32);
    v41 = *(_DWORD *)(a4 + 36);
    v42 = *(_DWORD *)(a4 + 24);
    v43 = *(_DWORD *)(a4 + 28);
    v61 = 67109888;
    *(_DWORD *)v62 = v42;
    *(_WORD *)&v62[4] = 1024;
    *(_DWORD *)&v62[6] = v40;
    *(_WORD *)v63 = 1024;
    *(_DWORD *)&v63[2] = v41;
    *(_WORD *)&v63[6] = 1024;
    *(_DWORD *)&v63[8] = v43;
    _os_log_impl(&dword_1C9870000, v39, OS_LOG_TYPE_INFO, "Size: %d %d %d %d", (uint8_t *)&v61, 0x1Au);
  }
  v44 = atomic_load((unsigned __int8 *)&qword_1ED52ACC0);
  if ((v44 & 1) == 0 && __cxa_guard_acquire(&qword_1ED52ACC0))
  {
    qword_1ED52ACC8 = (uint64_t)os_log_create("com.apple.AppleCVA", "Espresso");
    __cxa_guard_release(&qword_1ED52ACC0);
  }
  v45 = qword_1ED52ACC8;
  if (os_log_type_enabled((os_log_t)qword_1ED52ACC8, OS_LOG_TYPE_INFO))
  {
    v47 = *(_QWORD *)(a5 + 104);
    v46 = *(_QWORD *)(a5 + 112);
    v49 = *(_QWORD *)(a5 + 88);
    v48 = *(_QWORD *)(a5 + 96);
    v50 = *(_QWORD *)(a5 + 80);
    v61 = 134219008;
    *(_QWORD *)v62 = v46;
    *(_WORD *)&v62[8] = 2048;
    *(_QWORD *)v63 = v47;
    *(_WORD *)&v63[8] = 2048;
    *(_QWORD *)&v63[10] = v48;
    v64 = 2048;
    v65 = v49;
    v66 = 2048;
    v67 = v50;
    _os_log_impl(&dword_1C9870000, v45, OS_LOG_TYPE_INFO, "Size (%zd, %zd, %zd, %zd, %zd)", (uint8_t *)&v61, 0x34u);
  }
  v51 = atomic_load((unsigned __int8 *)&qword_1ED52ACC0);
  if ((v51 & 1) == 0 && __cxa_guard_acquire(&qword_1ED52ACC0))
  {
    qword_1ED52ACC8 = (uint64_t)os_log_create("com.apple.AppleCVA", "Espresso");
    __cxa_guard_release(&qword_1ED52ACC0);
  }
  v52 = qword_1ED52ACC8;
  if (os_log_type_enabled((os_log_t)qword_1ED52ACC8, OS_LOG_TYPE_INFO))
  {
    v54 = *(_QWORD *)(a5 + 144);
    v53 = *(_QWORD *)(a5 + 152);
    v56 = *(_QWORD *)(a5 + 128);
    v55 = *(_QWORD *)(a5 + 136);
    v57 = *(_QWORD *)(a5 + 120);
    v61 = 134219008;
    *(_QWORD *)v62 = v53;
    *(_WORD *)&v62[8] = 2048;
    *(_QWORD *)v63 = v54;
    *(_WORD *)&v63[8] = 2048;
    *(_QWORD *)&v63[10] = v55;
    v64 = 2048;
    v65 = v56;
    v66 = 2048;
    v67 = v57;
    _os_log_impl(&dword_1C9870000, v52, OS_LOG_TYPE_INFO, "Stride (%zd, %zd, %zd, %zd, %zd)", (uint8_t *)&v61, 0x34u);
  }
  v58 = atomic_load((unsigned __int8 *)&qword_1ED52ACC0);
  if ((v58 & 1) == 0 && __cxa_guard_acquire(&qword_1ED52ACC0))
  {
    qword_1ED52ACC8 = (uint64_t)os_log_create("com.apple.AppleCVA", "Espresso");
    __cxa_guard_release(&qword_1ED52ACC0);
  }
  v59 = qword_1ED52ACC8;
  v35 = 1;
  if (os_log_type_enabled((os_log_t)qword_1ED52ACC8, OS_LOG_TYPE_INFO))
  {
    v60 = *(_DWORD *)(a5 + 160);
    v61 = 67109120;
    *(_DWORD *)v62 = v60;
    _os_log_impl(&dword_1C9870000, v59, OS_LOG_TYPE_INFO, "Storage: %d", (uint8_t *)&v61, 8u);
  }
  return v35;
}

char *sub_1C9901EE0(uint64_t a1, uint64_t a2)
{
  void **v2;
  void **v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v8;
  _BYTE *v9;
  char *v10;
  char *v11;
  char *v12;
  __int128 v13;
  void **v14;

  v2 = *(void ***)a1;
  v3 = *(void ***)(a1 + 8);
  v4 = 0xCCCCCCCCCCCCCCCDLL * (((uint64_t)v3 - *(_QWORD *)a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0x666666666666666)
    abort();
  if (0x999999999999999ALL * ((uint64_t)(*(_QWORD *)(a1 + 16) - (_QWORD)v2) >> 3) > v5)
    v5 = 0x999999999999999ALL * ((uint64_t)(*(_QWORD *)(a1 + 16) - (_QWORD)v2) >> 3);
  if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - (_QWORD)v2) >> 3) >= 0x333333333333333)
    v8 = 0x666666666666666;
  else
    v8 = v5;
  if (v8)
  {
    if (v8 > 0x666666666666666)
      sub_1C9899D30();
    v9 = operator new(40 * v8);
  }
  else
  {
    v9 = 0;
  }
  v10 = &v9[40 * v4];
  if (*(char *)(a2 + 23) < 0)
  {
    sub_1C987D148(&v9[40 * v4], *(void **)a2, *(_QWORD *)(a2 + 8));
    v2 = *(void ***)a1;
    v3 = *(void ***)(a1 + 8);
  }
  else
  {
    *(_OWORD *)v10 = *(_OWORD *)a2;
    *((_QWORD *)v10 + 2) = *(_QWORD *)(a2 + 16);
  }
  v11 = &v9[40 * v8];
  *(_OWORD *)&v9[40 * v4 + 24] = *(_OWORD *)(a2 + 24);
  v12 = v10 + 40;
  if (v3 == v2)
  {
    *(_QWORD *)a1 = v10;
    *(_QWORD *)(a1 + 8) = v12;
    *(_QWORD *)(a1 + 16) = v11;
  }
  else
  {
    do
    {
      v13 = *(_OWORD *)(v3 - 5);
      *((_QWORD *)v10 - 3) = *(v3 - 3);
      *(_OWORD *)(v10 - 40) = v13;
      *(v3 - 4) = 0;
      *(v3 - 3) = 0;
      *(v3 - 5) = 0;
      *((_OWORD *)v10 - 1) = *((_OWORD *)v3 - 1);
      v10 -= 40;
      v3 -= 5;
    }
    while (v3 != v2);
    v2 = *(void ***)a1;
    v14 = *(void ***)(a1 + 8);
    *(_QWORD *)a1 = v10;
    *(_QWORD *)(a1 + 8) = v12;
    *(_QWORD *)(a1 + 16) = v11;
    while (v14 != v2)
    {
      if (*((char *)v14 - 17) < 0)
        operator delete(*(v14 - 5));
      v14 -= 5;
    }
  }
  if (v2)
    operator delete(v2);
  return v12;
}

uint64_t *sub_1C9902074(uint64_t **a1, const void **a2, uint64_t a3)
{
  uint64_t *v5;
  uint64_t **v6;
  int v7;
  const void *v8;
  const void *v9;
  uint64_t **v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  int v14;
  _QWORD *v15;
  const void *v16;
  size_t v17;
  int v18;
  uint64_t *result;
  uint64_t *v20;
  _BYTE *v21;
  uint64_t *v22;

  v6 = a1 + 1;
  v5 = a1[1];
  if (!v5)
  {
    v10 = a1 + 1;
    goto LABEL_29;
  }
  v7 = *((char *)a2 + 23);
  if (v7 >= 0)
    v8 = a2;
  else
    v8 = *a2;
  if (v7 >= 0)
    v9 = (const void *)*((unsigned __int8 *)a2 + 23);
  else
    v9 = a2[1];
  do
  {
    while (1)
    {
      v10 = (uint64_t **)v5;
      v13 = v5[4];
      v11 = v5 + 4;
      v12 = (_QWORD *)v13;
      v14 = *((char *)v11 + 23);
      v15 = v14 >= 0 ? v11 : v12;
      v16 = v14 >= 0 ? (const void *)*((unsigned __int8 *)v11 + 23) : (const void *)v11[1];
      v17 = (size_t)(v16 >= v9 ? v9 : v16);
      v18 = memcmp(v8, v15, v17);
      if (v18)
        break;
      if (v9 >= v16)
        goto LABEL_22;
LABEL_8:
      v5 = *v10;
      v6 = v10;
      if (!*v10)
        goto LABEL_29;
    }
    if (v18 < 0)
      goto LABEL_8;
LABEL_22:
    result = (uint64_t *)memcmp(v15, v8, v17);
    if ((_DWORD)result)
    {
      if ((result & 0x80000000) == 0)
        return result;
    }
    else if (v16 >= v9)
    {
      return result;
    }
    v5 = v10[1];
  }
  while (v5);
  v6 = v10 + 1;
LABEL_29:
  v20 = (uint64_t *)operator new(0x38uLL);
  v21 = v20 + 4;
  if (*(char *)(a3 + 23) < 0)
  {
    sub_1C987D148(v21, *(void **)a3, *(_QWORD *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)v21 = *(_OWORD *)a3;
    v20[6] = *(_QWORD *)(a3 + 16);
  }
  *v20 = 0;
  v20[1] = 0;
  v20[2] = (uint64_t)v10;
  *v6 = v20;
  v22 = (uint64_t *)**a1;
  if (v22)
  {
    *a1 = v22;
    v20 = *v6;
  }
  result = sub_1C9880828(a1[1], v20);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return result;
}

char *sub_1C99021D0(uint64_t a1, uint64_t a2)
{
  void **v2;
  void **v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  __int128 v13;
  void **v14;

  v2 = *(void ***)a1;
  v3 = *(void ***)(a1 + 8);
  v4 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v3 - *(_QWORD *)a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL)
    abort();
  if (0x5555555555555556 * ((uint64_t)(*(_QWORD *)(a1 + 16) - (_QWORD)v2) >> 3) > v5)
    v5 = 0x5555555555555556 * ((uint64_t)(*(_QWORD *)(a1 + 16) - (_QWORD)v2) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - (_QWORD)v2) >> 3) >= 0x555555555555555)
    v8 = 0xAAAAAAAAAAAAAAALL;
  else
    v8 = v5;
  if (v8)
  {
    if (v8 > 0xAAAAAAAAAAAAAAALL)
      sub_1C9899D30();
    v9 = (char *)operator new(24 * v8);
  }
  else
  {
    v9 = 0;
  }
  v10 = &v9[24 * v4];
  if (*(char *)(a2 + 23) < 0)
  {
    sub_1C987D148(v10, *(void **)a2, *(_QWORD *)(a2 + 8));
    v2 = *(void ***)a1;
    v3 = *(void ***)(a1 + 8);
  }
  else
  {
    *(_OWORD *)v10 = *(_OWORD *)a2;
    *((_QWORD *)v10 + 2) = *(_QWORD *)(a2 + 16);
  }
  v11 = &v9[24 * v8];
  v12 = v10 + 24;
  if (v3 == v2)
  {
    *(_QWORD *)a1 = v10;
    *(_QWORD *)(a1 + 8) = v12;
    *(_QWORD *)(a1 + 16) = v11;
  }
  else
  {
    do
    {
      v13 = *(_OWORD *)(v3 - 3);
      *((_QWORD *)v10 - 1) = *(v3 - 1);
      *(_OWORD *)(v10 - 24) = v13;
      v10 -= 24;
      *(v3 - 2) = 0;
      *(v3 - 1) = 0;
      *(v3 - 3) = 0;
      v3 -= 3;
    }
    while (v3 != v2);
    v2 = *(void ***)a1;
    v14 = *(void ***)(a1 + 8);
    *(_QWORD *)a1 = v10;
    *(_QWORD *)(a1 + 8) = v12;
    *(_QWORD *)(a1 + 16) = v11;
    while (v14 != v2)
    {
      if (*((char *)v14 - 1) < 0)
        operator delete(*(v14 - 3));
      v14 -= 3;
    }
  }
  if (v2)
    operator delete(v2);
  return v12;
}

void sub_1C9902344(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E8295AA0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1C9902354(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E8295AA0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1CAA44AFCLL);
}

void sub_1C9902384(_QWORD *a1)
{
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;

  sub_1C9901334(a1 + 3);
  v2 = (void *)a1[15];
  if (v2)
  {
    a1[16] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[12];
  if (v3)
  {
    a1[13] = v3;
    operator delete(v3);
  }
  v4 = a1[9];
  if (v4)
  {
    v5 = a1[10];
    v6 = (void *)a1[9];
    if (v5 != v4)
    {
      do
      {
        if (*(char *)(v5 - 17) < 0)
          operator delete(*(void **)(v5 - 40));
        v5 -= 40;
      }
      while (v5 != v4);
      v6 = (void *)a1[9];
    }
    a1[10] = v4;
    operator delete(v6);
  }
  v7 = a1[6];
  if (v7)
  {
    v8 = a1[7];
    v9 = (void *)a1[6];
    if (v8 != v7)
    {
      do
      {
        if (*(char *)(v8 - 17) < 0)
          operator delete(*(void **)(v8 - 40));
        v8 -= 40;
      }
      while (v8 != v7);
      v9 = (void *)a1[6];
    }
    a1[7] = v7;
    operator delete(v9);
  }
}

void sub_1C9902470(int a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v4;
  unint64_t v5;
  uint8x8_t v6;
  uint64_t **v7;
  uint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  char *v11;
  _BYTE *v12;
  float v13;
  _BOOL8 v14;
  unint64_t v15;
  unint64_t v16;
  size_t prime;
  void *v18;
  void *v19;
  uint64_t v20;
  _QWORD **v21;
  size_t v22;
  size_t v23;
  size_t v24;
  _QWORD *i;
  size_t v26;
  uint64_t v27;
  unint64_t v28;
  uint8x8_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  size_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  unint64_t v37;
  void *v38;

  v4 = a1;
  v5 = *((_QWORD *)&xmmword_1EF921338 + 1);
  if (*((_QWORD *)&xmmword_1EF921338 + 1))
  {
    v6 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&xmmword_1EF921338 + 8));
    v6.i16[0] = vaddlv_u8(v6);
    if (v6.u32[0] > 1uLL)
    {
      v2 = a1;
      if (*((_QWORD *)&xmmword_1EF921338 + 1) <= (unint64_t)a1)
        v2 = (unint64_t)a1 % *((_QWORD *)&xmmword_1EF921338 + 1);
    }
    else
    {
      v2 = (*((_QWORD *)&xmmword_1EF921338 + 1) - 1) & a1;
    }
    v7 = *(uint64_t ***)(xmmword_1EF921338 + 8 * v2);
    if (v7)
    {
      v8 = *v7;
      if (v8)
      {
        if (v6.u32[0] < 2uLL)
        {
          while (1)
          {
            v10 = v8[1];
            if (v10 == a1)
            {
              if (*((_DWORD *)v8 + 4) == a1)
                return;
            }
            else if ((v10 & (*((_QWORD *)&xmmword_1EF921338 + 1) - 1)) != v2)
            {
              goto LABEL_22;
            }
            v8 = (uint64_t *)*v8;
            if (!v8)
              goto LABEL_22;
          }
        }
        do
        {
          v9 = v8[1];
          if (v9 == a1)
          {
            if (*((_DWORD *)v8 + 4) == a1)
              return;
          }
          else
          {
            if (v9 >= *((_QWORD *)&xmmword_1EF921338 + 1))
              v9 %= *((_QWORD *)&xmmword_1EF921338 + 1);
            if (v9 != v2)
              break;
          }
          v8 = (uint64_t *)*v8;
        }
        while (v8);
      }
    }
  }
LABEL_22:
  v11 = (char *)operator new(0x30uLL);
  *(_QWORD *)v11 = 0;
  *((_QWORD *)v11 + 1) = v4;
  *((_DWORD *)v11 + 4) = *(_DWORD *)a2;
  v12 = v11 + 24;
  if (*(char *)(a2 + 31) < 0)
  {
    sub_1C987D148(v12, *(void **)(a2 + 8), *(_QWORD *)(a2 + 16));
  }
  else
  {
    *(_OWORD *)v12 = *(_OWORD *)(a2 + 8);
    *((_QWORD *)v11 + 5) = *(_QWORD *)(a2 + 24);
  }
  v13 = (float)(unint64_t)(qword_1EF921350 + 1);
  if (!v5 || (float)(*(float *)&dword_1EF921358 * (float)v5) < v13)
  {
    v14 = 1;
    if (v5 >= 3)
      v14 = (v5 & (v5 - 1)) != 0;
    v15 = v14 | (2 * v5);
    v16 = vcvtps_u32_f32(v13 / *(float *)&dword_1EF921358);
    if (v15 <= v16)
      prime = v16;
    else
      prime = v15;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v5 = *((_QWORD *)&xmmword_1EF921338 + 1);
    if (prime <= *((_QWORD *)&xmmword_1EF921338 + 1))
    {
      if (prime >= *((_QWORD *)&xmmword_1EF921338 + 1))
        goto LABEL_62;
      v28 = vcvtps_u32_f32((float)(unint64_t)qword_1EF921350 / *(float *)&dword_1EF921358);
      if (*((_QWORD *)&xmmword_1EF921338 + 1) < 3uLL
        || (v29 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&xmmword_1EF921338 + 8)),
            v29.i16[0] = vaddlv_u8(v29),
            v29.u32[0] > 1uLL))
      {
        v28 = std::__next_prime(v28);
      }
      else
      {
        v30 = 1 << -(char)__clz(v28 - 1);
        if (v28 >= 2)
          v28 = v30;
      }
      if (prime <= v28)
        prime = v28;
      if (prime >= v5)
      {
        v5 = *((_QWORD *)&xmmword_1EF921338 + 1);
LABEL_62:
        if ((v5 & (v5 - 1)) != 0)
        {
          if (v5 <= v4)
            v2 = v4 % v5;
          else
            v2 = v4;
        }
        else
        {
          v2 = (v5 - 1) & v4;
        }
        goto LABEL_75;
      }
      if (!prime)
      {
        v38 = (void *)xmmword_1EF921338;
        *(_QWORD *)&xmmword_1EF921338 = 0;
        if (v38)
          operator delete(v38);
        v5 = 0;
        *((_QWORD *)&xmmword_1EF921338 + 1) = 0;
        goto LABEL_62;
      }
    }
    if (prime >> 61)
      sub_1C9899D30();
    v18 = operator new(8 * prime);
    v19 = (void *)xmmword_1EF921338;
    *(_QWORD *)&xmmword_1EF921338 = v18;
    if (v19)
      operator delete(v19);
    v20 = 0;
    *((_QWORD *)&xmmword_1EF921338 + 1) = prime;
    do
      *(_QWORD *)(xmmword_1EF921338 + 8 * v20++) = 0;
    while (prime != v20);
    v21 = (_QWORD **)qword_1EF921348;
    if (!qword_1EF921348)
    {
LABEL_61:
      v5 = prime;
      goto LABEL_62;
    }
    v22 = *(_QWORD *)(qword_1EF921348 + 8);
    v23 = prime - 1;
    if ((prime & (prime - 1)) == 0)
    {
      v24 = v22 & v23;
      *(_QWORD *)(xmmword_1EF921338 + 8 * v24) = &qword_1EF921348;
      for (i = *v21; *v21; i = *v21)
      {
        v26 = i[1] & v23;
        if (v26 == v24)
        {
          v21 = (_QWORD **)i;
        }
        else if (*(_QWORD *)(xmmword_1EF921338 + 8 * v26))
        {
          *v21 = (_QWORD *)*i;
          v27 = 8 * v26;
          *i = **(_QWORD **)(xmmword_1EF921338 + v27);
          **(_QWORD **)(xmmword_1EF921338 + v27) = i;
        }
        else
        {
          *(_QWORD *)(xmmword_1EF921338 + 8 * v26) = v21;
          v21 = (_QWORD **)i;
          v24 = v26;
        }
      }
      goto LABEL_61;
    }
    if (v22 >= prime)
      v22 %= prime;
    *(_QWORD *)(xmmword_1EF921338 + 8 * v22) = &qword_1EF921348;
    v31 = *v21;
    if (!*v21)
      goto LABEL_61;
    while (1)
    {
      v33 = v31[1];
      if (v33 >= prime)
        v33 %= prime;
      if (v33 != v22)
      {
        if (!*(_QWORD *)(xmmword_1EF921338 + 8 * v33))
        {
          *(_QWORD *)(xmmword_1EF921338 + 8 * v33) = v21;
          goto LABEL_66;
        }
        *v21 = (_QWORD *)*v31;
        v32 = 8 * v33;
        *v31 = **(_QWORD **)(xmmword_1EF921338 + v32);
        **(_QWORD **)(xmmword_1EF921338 + v32) = v31;
        v31 = v21;
      }
      v33 = v22;
LABEL_66:
      v21 = (_QWORD **)v31;
      v31 = (_QWORD *)*v31;
      v22 = v33;
      if (!v31)
        goto LABEL_61;
    }
  }
LABEL_75:
  v34 = xmmword_1EF921338;
  v35 = *(_QWORD **)(xmmword_1EF921338 + 8 * v2);
  if (v35)
  {
    *(_QWORD *)v11 = *v35;
LABEL_83:
    *v35 = v11;
    goto LABEL_84;
  }
  v36 = qword_1EF921348;
  *(_QWORD *)v11 = qword_1EF921348;
  qword_1EF921348 = (uint64_t)v11;
  *(_QWORD *)(v34 + 8 * v2) = &qword_1EF921348;
  if (v36)
  {
    v37 = *(_QWORD *)(v36 + 8);
    if ((v5 & (v5 - 1)) != 0)
    {
      if (v37 >= v5)
        v37 %= v5;
    }
    else
    {
      v37 &= v5 - 1;
    }
    v35 = (_QWORD *)(xmmword_1EF921338 + 8 * v37);
    goto LABEL_83;
  }
LABEL_84:
  ++qword_1EF921350;
}

uint64_t sub_1C9902908(unsigned __int8 **a1)
{
  unsigned __int8 v1;
  uint64_t v2;
  char v3;
  unsigned __int8 *v4;
  unsigned __int8 *v5;
  uint64_t v6;
  unsigned __int8 *v7;
  const void **v8;
  unsigned __int8 *i;
  unsigned __int8 **v11;
  int v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  int v18;
  char v19[24];
  int v20;
  char *v21;
  __int128 v22;
  int v23;
  char *v24;
  __int128 v25;
  int v26;
  char *v27;
  __int128 v28;
  int v29;
  char *v30;
  __int128 v31;
  int v32;
  char *v33;
  __int128 v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  v1 = atomic_load((unsigned __int8 *)&qword_1EF921360);
  if ((v1 & 1) == 0)
  {
    v11 = a1;
    v12 = __cxa_guard_acquire(&qword_1EF921360);
    a1 = v11;
    if (v12)
    {
      v18 = 0;
      v19[23] = 21;
      strcpy(v19, "DetectorType::Unknown");
      v20 = 1;
      v13 = (char *)operator new(0x28uLL);
      v21 = v13;
      v22 = xmmword_1C99278D0;
      strcpy(v13, "DetectorType::HardwareFaceDetector");
      v23 = 2;
      v14 = (char *)operator new(0x19uLL);
      v24 = v14;
      v25 = xmmword_1C9927570;
      strcpy(v14, "DetectorType::VisionKit");
      v26 = 3;
      v15 = (char *)operator new(0x20uLL);
      v27 = v15;
      v28 = xmmword_1C99278E0;
      strcpy(v15, "DetectorType::CIDetector");
      v29 = 4;
      v16 = (char *)operator new(0x19uLL);
      v30 = v16;
      v31 = xmmword_1C9927570;
      strcpy(v16, "DetectorType::Projected");
      v32 = 5;
      v17 = (char *)operator new(0x20uLL);
      v33 = v17;
      v34 = xmmword_1C9927560;
      strcpy(v17, "DetectorType::VisionKitANFDdev");
      xmmword_1EF921338 = 0u;
      *(_OWORD *)&qword_1EF921348 = 0u;
      dword_1EF921358 = 1065353216;
      sub_1C9902470(0, (uint64_t)&v18);
      sub_1C9902470(1, (uint64_t)&v20);
      sub_1C9902470(2, (uint64_t)&v23);
      sub_1C9902470(3, (uint64_t)&v26);
      sub_1C9902470(4, (uint64_t)&v29);
      sub_1C9902470(5, (uint64_t)&v32);
      operator delete(v17);
      operator delete(v16);
      operator delete(v15);
      operator delete(v14);
      operator delete(v13);
      __cxa_guard_release(&qword_1EF921360);
      a1 = v11;
    }
  }
  v2 = qword_1EF921348;
  if (qword_1EF921348)
  {
    v3 = *((_BYTE *)a1 + 23);
    if (v3 >= 0)
      v4 = (unsigned __int8 *)*((unsigned __int8 *)a1 + 23);
    else
      v4 = a1[1];
    if (v3 >= 0)
      v5 = (unsigned __int8 *)a1;
    else
      v5 = *a1;
    do
    {
      v6 = *(unsigned __int8 *)(v2 + 47);
      if ((v6 & 0x80u) == 0)
        v7 = (unsigned __int8 *)*(unsigned __int8 *)(v2 + 47);
      else
        v7 = *(unsigned __int8 **)(v2 + 32);
      if (v7 == v4)
      {
        v8 = (const void **)(v2 + 24);
        if ((v6 & 0x80) != 0)
        {
          if (!memcmp(*v8, v5, *(_QWORD *)(v2 + 32)))
            return *(unsigned int *)(v2 + 16);
        }
        else
        {
          if (!*(_BYTE *)(v2 + 47))
            return *(unsigned int *)(v2 + 16);
          for (i = v5; *(unsigned __int8 *)v8 == *i; ++i)
          {
            v8 = (const void **)((char *)v8 + 1);
            if (!--v6)
              return *(unsigned int *)(v2 + 16);
          }
        }
      }
      v2 = *(_QWORD *)v2;
    }
    while (v2);
  }
  return 0;
}

_QWORD *sub_1C9902C64(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;

  *a1 = off_1E8294D10;
  v2 = a1[4];
  if (v2)
  {
    v3 = a1[5];
    v4 = (void *)a1[4];
    if (v3 != v2)
    {
      do
      {
        if (*(char *)(v3 - 17) < 0)
          operator delete(*(void **)(v3 - 40));
        v3 -= 40;
      }
      while (v3 != v2);
      v4 = (void *)a1[4];
    }
    a1[5] = v2;
    operator delete(v4);
  }
  v5 = a1[1];
  if (v5)
  {
    v6 = a1[2];
    v7 = (void *)a1[1];
    if (v6 != v5)
    {
      do
      {
        if (*(char *)(v6 - 17) < 0)
          operator delete(*(void **)(v6 - 40));
        v6 -= 40;
      }
      while (v6 != v5);
      v7 = (void *)a1[1];
    }
    a1[2] = v5;
    operator delete(v7);
  }
  return a1;
}

_QWORD *sub_1C9902D28(_QWORD *a1)
{
  uint64_t *v2;
  uint64_t *v3;

  *a1 = &off_1E8294CC0;
  v2 = (uint64_t *)a1[7];
  a1[7] = 0;
  if (v2)
  {
    v3 = sub_1C9903D1C(v2);
    MEMORY[0x1CAA44AFC](v3, 0x20C400FA965B2);
  }
  return sub_1C9902C64(a1);
}

void sub_1C9902D78(_QWORD *a1)
{
  uint64_t *v2;
  uint64_t *v3;

  *a1 = &off_1E8294CC0;
  v2 = (uint64_t *)a1[7];
  a1[7] = 0;
  if (v2)
  {
    v3 = sub_1C9903D1C(v2);
    MEMORY[0x1CAA44AFC](v3, 0x20C400FA965B2);
  }
  sub_1C9902C64(a1);
  JUMPOUT(0x1CAA44AFCLL);
}

uint64_t sub_1C9902DDC(uint64_t a1, uint64_t *a2, uint64_t *a3, int a4)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t *v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  IOSurfaceRef *v16;
  __IOSurface *v17;
  unint64_t v18;
  float16x8_t *BaseAddress;
  _QWORD *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  int *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  char *v36;
  float16x8_t *v37;
  uint64_t v38;
  int *v39;
  float16x8_t *v40;
  int *v41;
  float16x8_t *v42;
  unint64_t v43;
  int v44;
  __IOSurface *v49;
  char *v50;
  _QWORD *v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  char *v72;
  char *v73;
  uint64_t v74;
  int *v75;
  _DWORD *v76;
  int *v77;
  _DWORD *v78;
  unint64_t v79;
  int v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  float16x8_t *v84;
  float32x4_t *v85;
  uint64_t v86;
  float32x4_t *v87;
  float16x8_t *v88;
  uint64_t v89;
  float32x4_t *v90;
  float16x8_t *v91;
  float32x4_t *v92;
  float16x8_t *v93;
  unint64_t v94;
  float32x4_t v95;
  float32x4_t v96;
  float32x4_t v97;
  float32x4_t v98;
  _QWORD *v99;
  uint64_t *v100;
  unint64_t v101;
  uint64_t v102;
  __IOSurface *v103;
  char *v104;
  char *v105;
  char *v106;
  uint64_t v107;
  char *v108;
  char *v109;
  char *v110;
  char *v111;
  uint64_t v112;
  char *v113;
  char *v114;
  __int128 *v115;
  __IOSurface *v116;
  uint64_t v117;
  __int128 *v118;
  __IOSurface *v119;
  uint64_t v120;
  __int128 v121;
  uint64_t v122;
  uint64_t v123;
  char *v124;
  int *v125;
  int v126;
  uint64_t v127;
  float16x8_t *v128;
  float32x4_t *v129;
  char *i8;
  char *v131;
  uint64_t v132;
  int *v133;
  _WORD *v134;
  float32x4_t *v135;
  float16x8_t *v136;
  uint64_t v137;
  int *v138;
  _WORD *v139;
  float32x4_t *v140;
  float16x8_t *v141;
  float32x4_t *v142;
  float16x8_t *v143;
  uint64_t v144;
  float32x4_t v145;
  float32x4_t v146;
  float32x4_t v147;
  float32x4_t v148;
  int *v149;
  _WORD *v150;
  uint64_t v151;
  int v152;
  uint64_t result;
  uint64_t *v155;
  uint64_t v156;
  unint64_t v157;
  uint64_t v158;
  char *v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t *v162;
  int v163;
  int v164;
  uint64_t v165;
  uint64_t v166;
  int v167;
  uint64_t v168;
  __IOSurface *v169;
  float16x4_t *v170;
  _QWORD *v171;
  unint64_t v172;
  unint64_t v173;
  unint64_t v174;
  int *v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  unint64_t v185;
  uint64_t v186;
  float16x4_t *v187;
  char *v188;
  uint64_t v189;
  __int16 *v190;
  _DWORD *v191;
  __int16 *v192;
  _DWORD *v193;
  unint64_t v194;
  __int16 v195;
  uint64_t v198;
  __IOSurface *v199;
  char *v200;
  _QWORD *v201;
  unint64_t v202;
  unint64_t v203;
  unint64_t v204;
  unint64_t v205;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  unint64_t v219;
  uint64_t v220;
  char *v221;
  char *v222;
  uint64_t v223;
  int *v224;
  _DWORD *v225;
  int *v226;
  _DWORD *v227;
  unint64_t v228;
  int v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  float32x4_t *v233;
  float16x4_t *v234;
  uint64_t v235;
  float16x4_t *v236;
  float32x4_t *v237;
  uint64_t v238;
  float16x4_t *v239;
  float32x4_t *v240;
  float16x4_t *v241;
  float32x4_t *v242;
  unint64_t v243;
  float16x8_t v244;
  float32x4_t v245;
  float32x4_t v246;
  _QWORD *v247;
  uint64_t v248;
  __IOSurface *v249;
  char *v250;
  char *v251;
  char *v252;
  uint64_t v253;
  char *v254;
  char *v255;
  char *v256;
  char *v257;
  uint64_t v258;
  char *v259;
  char *v260;
  __int128 *v261;
  __IOSurface *v262;
  uint64_t v263;
  __int128 *v264;
  __IOSurface *v265;
  uint64_t v266;
  __int128 v267;
  uint64_t v268;
  uint64_t v269;
  char *v270;
  int *v271;
  int v272;
  uint64_t v273;
  float32x4_t *v274;
  float16x4_t *v275;
  char *v276;
  char *v277;
  uint64_t v278;
  __int16 *v279;
  _DWORD *v280;
  float16x4_t *v281;
  float32x4_t *v282;
  uint64_t v283;
  __int16 *v284;
  _DWORD *v285;
  float16x4_t *v286;
  float32x4_t *v287;
  float16x4_t *v288;
  float32x4_t *v289;
  uint64_t v290;
  float16x8_t v291;
  float32x4_t v292;
  float32x4_t v293;
  __int16 *v294;
  _DWORD *v295;
  uint64_t v296;
  __int16 v297;
  __IOSurface *buffer;
  __IOSurface *v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  char *v311;
  char *v312;
  unint64_t v313;
  unint64_t v314;
  char *v315;
  char *v316;
  __IOSurface *v317;
  IOSurfaceRef v318;
  __IOSurface *v319;
  IOSurfaceRef v320;
  _BYTE v321[24];
  _BYTE *v322;
  uint64_t v323;

  v323 = *MEMORY[0x1E0C80C00];
  if (a4)
    return 0;
  v4 = *(_QWORD *)(a1 + 56);
  v5 = *a2;
  v304 = v4;
  if (a2[1] != *a2)
  {
    v6 = 0;
    do
    {
      v8 = *(_QWORD *)(v4 + 16);
      v9 = *(char **)(v5 + 8 * v6);
      v10 = v8 + 88 * v6;
      v12 = *(_DWORD *)(v10 + 64);
      v11 = (uint64_t *)(v10 + 64);
      v13 = 4 * *((_DWORD *)v11 + 1);
      v14 = v12 * (uint64_t)v13;
      v15 = v12 * v13 * (uint64_t)*((int *)v11 - 1);
      v16 = (IOSurfaceRef *)(v11 - 2);
      v313 = v6;
      if (*((_DWORD *)v11 + 5) == 3)
      {
        v17 = *v16;
        IOSurfaceLock(*v16, 0, 0);
        v18 = v6;
        BaseAddress = (float16x8_t *)IOSurfaceGetBaseAddress(v17);
        v20 = operator new(0x20uLL);
        *v20 = &off_1E8294590;
        v20[1] = v17;
        v317 = v17;
        *((_DWORD *)v20 + 4) = 0;
        v20[3] = 0;
        v322 = v20;
        v21 = *(_QWORD *)(v8 + 88 * v18 + 56);
        v22 = HIDWORD(v21);
        v23 = HIDWORD(*v11);
        if ((int)*v11 >= 1 && (int)v23 >= 1 && SHIDWORD(v21) >= 1 && (int)v21 >= 1)
        {
          v27 = (int *)(v8 + 88 * v313);
          v29 = v27[19];
          v28 = v27[20];
          v30 = v27[18];
          v31 = v13;
          v32 = *(_QWORD *)(v8 + 88 * v18 + 56);
          v33 = *v11;
          v34 = (unint64_t)*v11 >> 36;
          if (v34)
          {
            v81 = v23 & 0xFFFFFFF0;
            v82 = v23 - v81;
            if (v23 == v81)
            {
              v83 = 0;
              v84 = BaseAddress + 1;
              v85 = (float32x4_t *)(v9 + 32);
              do
              {
                v86 = 0;
                v87 = v85;
                v88 = v84;
                do
                {
                  v89 = 0;
                  v90 = v87;
                  v91 = v88;
                  do
                  {
                    v92 = v90;
                    v93 = v91;
                    v94 = v23;
                    do
                    {
                      v96 = v92[-2];
                      v95 = v92[-1];
                      v98 = *v92;
                      v97 = v92[1];
                      v92 += 4;
                      v93[-1] = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(v96), v95);
                      *v93 = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(v98), v97);
                      v93 += 2;
                      v94 -= 16;
                    }
                    while (v94);
                    ++v89;
                    v91 = (float16x8_t *)((char *)v91 + v28);
                    v90 = (float32x4_t *)((char *)v90 + v13);
                  }
                  while (v89 != v33);
                  ++v86;
                  v88 = (float16x8_t *)((char *)v88 + v29);
                  v87 = (float32x4_t *)((char *)v87 + v14);
                }
                while (v86 != v22);
                ++v83;
                v84 = (float16x8_t *)((char *)v84 + v30);
                v85 = (float32x4_t *)((char *)v85 + v15);
              }
              while (v83 != v32);
            }
            else
            {
              v127 = 0;
              v128 = BaseAddress + 1;
              v129 = (float32x4_t *)(v9 + 32);
              i8 = BaseAddress[2 * v34].i8;
              v131 = &v9[64 * v34];
              do
              {
                v132 = 0;
                v133 = (int *)v131;
                v134 = i8;
                v135 = v129;
                v136 = v128;
                do
                {
                  v137 = 0;
                  v138 = v133;
                  v139 = v134;
                  v140 = v135;
                  v141 = v136;
                  do
                  {
                    v142 = v140;
                    v143 = v141;
                    v144 = v81;
                    do
                    {
                      v146 = v142[-2];
                      v145 = v142[-1];
                      v148 = *v142;
                      v147 = v142[1];
                      v142 += 4;
                      v143[-1] = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(v146), v145);
                      *v143 = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(v148), v147);
                      v143 += 2;
                      v144 -= 16;
                    }
                    while (v144);
                    v149 = v138;
                    v150 = v139;
                    v151 = v82;
                    do
                    {
                      v152 = *v149++;
                      _S0 = v152;
                      __asm { FCVT            H0, S0 }
                      *v150++ = _S0;
                      --v151;
                    }
                    while (v151);
                    ++v137;
                    v141 = (float16x8_t *)((char *)v141 + v28);
                    v140 = (float32x4_t *)((char *)v140 + v31);
                    v139 = (_WORD *)((char *)v139 + v28);
                    v138 = (int *)((char *)v138 + v31);
                  }
                  while (v137 != v33);
                  ++v132;
                  v136 = (float16x8_t *)((char *)v136 + v29);
                  v135 = (float32x4_t *)((char *)v135 + v14);
                  v134 = (_WORD *)((char *)v134 + v29);
                  v133 = (int *)((char *)v133 + v14);
                }
                while (v132 != v22);
                ++v127;
                v128 = (float16x8_t *)((char *)v128 + v30);
                v129 = (float32x4_t *)((char *)v129 + v15);
                i8 += v30;
                v131 += v15;
              }
              while (v127 != v32);
            }
          }
          else
          {
            do
            {
              v35 = 0;
              v36 = v9;
              v37 = BaseAddress;
              do
              {
                v38 = 0;
                v39 = (int *)v36;
                v40 = v37;
                do
                {
                  v41 = v39;
                  v42 = v40;
                  v43 = v23;
                  do
                  {
                    v44 = *v41++;
                    _S0 = v44;
                    __asm { FCVT            H0, S0 }
                    v42->i16[0] = _S0;
                    v42 = (float16x8_t *)((char *)v42 + 2);
                    --v43;
                  }
                  while (v43);
                  ++v38;
                  v40 = (float16x8_t *)((char *)v40 + v28);
                  v39 = (int *)((char *)v39 + v13);
                }
                while (v38 != v33);
                ++v35;
                v37 = (float16x8_t *)((char *)v37 + v29);
                v36 += v14;
              }
              while (v35 != v22);
              ++v34;
              BaseAddress = (float16x8_t *)((char *)BaseAddress + v30);
              v9 += v15;
            }
            while (v34 != v32);
          }
        }
        IOSurfaceUnlock(v317, 0, 0);
        v99 = v322;
        v4 = v304;
        v100 = a2;
        v101 = v313;
        if (v322 == v321)
        {
          v99 = v321;
          v7 = 4;
          goto LABEL_5;
        }
        if (!v322)
          goto LABEL_6;
        goto LABEL_4;
      }
      v49 = *v16;
      IOSurfaceLock(*v16, 0, 0);
      v50 = (char *)IOSurfaceGetBaseAddress(v49);
      v51 = operator new(0x20uLL);
      *v51 = &off_1E8294668;
      v51[1] = v49;
      buffer = v49;
      *((_DWORD *)v51 + 4) = 0;
      v51[3] = 0;
      v322 = v51;
      v52 = v8 + 88 * v6;
      v53 = *(_QWORD *)(v52 + 56);
      v54 = *v11;
      v55 = HIDWORD(v53);
      v56 = HIDWORD(*v11);
      if ((int)*v11 >= 1 && (int)v56 >= 1 && SHIDWORD(v53) >= 1 && (int)v53 >= 1)
      {
        v60 = *(int *)(v52 + 72);
        v61 = *(int *)(v52 + 76);
        v62 = *(int *)(v52 + 80);
        if ((_DWORD)v15 != (_DWORD)v60 || (_DWORD)v14 != (_DWORD)v61 || v13 != (_DWORD)v62)
        {
          v65 = v13;
          v66 = (int)v14;
          v67 = (int)v15;
          v68 = v53;
          v69 = *v11;
          v70 = v54 >> 35;
          if (!(v54 >> 35))
          {
            do
            {
              v71 = 0;
              v72 = v9;
              v73 = v50;
              do
              {
                v74 = 0;
                v75 = (int *)v72;
                v76 = v73;
                do
                {
                  v77 = v75;
                  v78 = v76;
                  v79 = v56;
                  do
                  {
                    v80 = *v77++;
                    *v78++ = v80;
                    --v79;
                  }
                  while (v79);
                  ++v74;
                  v76 = (_DWORD *)((char *)v76 + v62);
                  v75 = (int *)((char *)v75 + v13);
                }
                while (v74 != v69);
                ++v71;
                v73 += v61;
                v72 += (int)v14;
              }
              while (v71 != v55);
              ++v70;
              v50 += v60;
              v9 += v67;
            }
            while (v70 != v68);
            goto LABEL_64;
          }
          v102 = 0;
          v103 = (__IOSurface *)(v50 + 16);
          v104 = v9 + 16;
          v105 = v9;
          v106 = v50;
          v309 = v60;
          v311 = v50;
          v305 = v68;
          v307 = v67;
          while (2)
          {
            v107 = 0;
            v108 = &v50[v102 * v60];
            v109 = v105;
            v110 = v106;
            v315 = v104;
            v318 = v103;
            v111 = &v9[v102 * v67];
LABEL_72:
            v112 = 0;
            v113 = v109;
            v114 = v110;
            v115 = (__int128 *)v104;
            v116 = v103;
LABEL_74:
            if ((unint64_t)(&v108[v107 * v61 + v112 * v62] - &v111[v107 * v66 + v112 * v65]) < 0x20)
            {
              v117 = 0;
              goto LABEL_79;
            }
            v118 = v115;
            v119 = v116;
            v120 = v56 & 0xFFFFFFF8;
            do
            {
              v121 = *v118;
              *((_OWORD *)v119 - 1) = *(v118 - 1);
              *(_OWORD *)v119 = v121;
              v119 = (__IOSurface *)((char *)v119 + 32);
              v118 += 2;
              v120 -= 8;
            }
            while (v120);
            v117 = v56 & 0xFFFFFFF8;
            if (v56 != v117)
            {
LABEL_79:
              v122 = v56 - v117;
              v123 = 4 * v117;
              v124 = &v114[4 * v117];
              v125 = (int *)&v113[v123];
              do
              {
                v126 = *v125++;
                *(_DWORD *)v124 = v126;
                v124 += 4;
                --v122;
              }
              while (v122);
            }
            ++v112;
            v116 = (__IOSurface *)((char *)v116 + v62);
            v115 = (__int128 *)((char *)v115 + v65);
            v114 += v62;
            v113 += v65;
            if (v112 == v69)
            {
              ++v107;
              v103 = (__IOSurface *)((char *)v103 + v61);
              v104 += v66;
              v110 += v61;
              v109 += v66;
              if (v107 == v55)
              {
                ++v102;
                v67 = v307;
                v60 = v309;
                v103 = (IOSurfaceRef)((char *)v318 + v309);
                v104 = &v315[v307];
                v106 += v309;
                v105 += v307;
                v50 = v311;
                if (v102 == v305)
                  goto LABEL_64;
                continue;
              }
              goto LABEL_72;
            }
            goto LABEL_74;
          }
        }
        memcpy(v50, v9, (int)v15 * (int)v53);
      }
LABEL_64:
      IOSurfaceUnlock(buffer, 0, 0);
      v99 = v322;
      v100 = a2;
      if (v322 == v321)
      {
        v99 = v321;
        v7 = 4;
        v4 = v304;
        v101 = v313;
        goto LABEL_5;
      }
      v4 = v304;
      v101 = v313;
      if (!v322)
        goto LABEL_6;
LABEL_4:
      v7 = 5;
LABEL_5:
      (*(void (**)(void))(*v99 + 8 * v7))();
LABEL_6:
      v6 = v101 + 1;
      v5 = *v100;
    }
    while (v6 < (v100[1] - *v100) >> 3);
  }
  if (e5rt_execution_stream_execute_sync())
    return 0;
  v155 = a3;
  v156 = *a3;
  result = 1;
  if (a3[1] != *a3)
  {
    v157 = 0;
    while (1)
    {
      v159 = *(char **)(v156 + 8 * v157);
      v160 = *(_QWORD *)(v4 + 40);
      v161 = v160 + 88 * v157;
      v163 = *(_DWORD *)(v161 + 64);
      v162 = (uint64_t *)(v161 + 64);
      v164 = 4 * *((_DWORD *)v162 + 1);
      v165 = v163 * (uint64_t)v164;
      v166 = (int)v165 * (uint64_t)*((int *)v162 - 1);
      v167 = *((_DWORD *)v162 + 5);
      if (v167 != 6)
      {
        if (v167 != 3)
          goto LABEL_104;
        v314 = v157;
        v168 = v160 + 88 * v157;
        v169 = *(__IOSurface **)(v168 + 48);
        IOSurfaceLock(v169, 1u, 0);
        v170 = (float16x4_t *)IOSurfaceGetBaseAddress(v169);
        v171 = operator new(0x20uLL);
        *v171 = &off_1E82945D8;
        v171[1] = v169;
        v319 = v169;
        *((_DWORD *)v171 + 4) = 1;
        v171[3] = 0;
        v322 = v171;
        v172 = *(_QWORD *)(v168 + 56);
        v173 = HIDWORD(v172);
        v174 = HIDWORD(*v162);
        if ((int)*v162 >= 1 && (int)v174 >= 1 && SHIDWORD(v172) >= 1 && (int)v172 >= 1)
        {
          v178 = (int *)(v160 + 88 * v314);
          v180 = v178[19];
          v179 = v178[20];
          v181 = v178[18];
          v182 = v164;
          v183 = *(_QWORD *)(v168 + 56);
          v184 = *v162;
          v185 = (unint64_t)*v162 >> 36;
          if (v185)
          {
            v230 = v174 & 0xFFFFFFF0;
            v231 = v174 - v230;
            if (v174 == v230)
            {
              v232 = 0;
              v233 = (float32x4_t *)(v159 + 32);
              v234 = v170 + 2;
              do
              {
                v235 = 0;
                v236 = v234;
                v237 = v233;
                do
                {
                  v238 = 0;
                  v239 = v236;
                  v240 = v237;
                  do
                  {
                    v241 = v239;
                    v242 = v240;
                    v243 = v174;
                    do
                    {
                      v244 = *(float16x8_t *)v241[-2].i8;
                      v245 = vcvtq_f32_f16(*v241);
                      v246 = vcvt_hight_f32_f16(*(float16x8_t *)v241->i8);
                      v242[-2] = vcvtq_f32_f16(*(float16x4_t *)v244.i8);
                      v242[-1] = vcvt_hight_f32_f16(v244);
                      *v242 = v245;
                      v242[1] = v246;
                      v242 += 4;
                      v241 += 4;
                      v243 -= 16;
                    }
                    while (v243);
                    ++v238;
                    v240 = (float32x4_t *)((char *)v240 + v164);
                    v239 = (float16x4_t *)((char *)v239 + v179);
                  }
                  while (v238 != v184);
                  ++v235;
                  v237 = (float32x4_t *)((char *)v237 + v165);
                  v236 = (float16x4_t *)((char *)v236 + v180);
                }
                while (v235 != v173);
                ++v232;
                v233 = (float32x4_t *)((char *)v233 + v166);
                v234 = (float16x4_t *)((char *)v234 + v181);
              }
              while (v232 != v183);
            }
            else
            {
              v273 = 0;
              v274 = (float32x4_t *)(v159 + 32);
              v275 = v170 + 2;
              v276 = &v159[64 * v185];
              v277 = (char *)&v170[4 * v185];
              do
              {
                v278 = 0;
                v279 = (__int16 *)v277;
                v280 = v276;
                v281 = v275;
                v282 = v274;
                do
                {
                  v283 = 0;
                  v284 = v279;
                  v285 = v280;
                  v286 = v281;
                  v287 = v282;
                  do
                  {
                    v288 = v286;
                    v289 = v287;
                    v290 = v230;
                    do
                    {
                      v291 = *(float16x8_t *)v288[-2].i8;
                      v292 = vcvtq_f32_f16(*v288);
                      v293 = vcvt_hight_f32_f16(*(float16x8_t *)v288->i8);
                      v289[-2] = vcvtq_f32_f16(*(float16x4_t *)v291.i8);
                      v289[-1] = vcvt_hight_f32_f16(v291);
                      *v289 = v292;
                      v289[1] = v293;
                      v289 += 4;
                      v288 += 4;
                      v290 -= 16;
                    }
                    while (v290);
                    v294 = v284;
                    v295 = v285;
                    v296 = v231;
                    do
                    {
                      v297 = *v294++;
                      _H0 = v297;
                      __asm { FCVT            S0, H0 }
                      *v295++ = _S0;
                      --v296;
                    }
                    while (v296);
                    ++v283;
                    v287 = (float32x4_t *)((char *)v287 + v182);
                    v286 = (float16x4_t *)((char *)v286 + v179);
                    v285 = (_DWORD *)((char *)v285 + v182);
                    v284 = (__int16 *)((char *)v284 + v179);
                  }
                  while (v283 != v184);
                  ++v278;
                  v282 = (float32x4_t *)((char *)v282 + v165);
                  v281 = (float16x4_t *)((char *)v281 + v180);
                  v280 = (_DWORD *)((char *)v280 + v165);
                  v279 = (__int16 *)((char *)v279 + v180);
                }
                while (v278 != v173);
                ++v273;
                v274 = (float32x4_t *)((char *)v274 + v166);
                v275 = (float16x4_t *)((char *)v275 + v181);
                v276 += v166;
                v277 += v181;
              }
              while (v273 != v183);
            }
          }
          else
          {
            do
            {
              v186 = 0;
              v187 = v170;
              v188 = v159;
              do
              {
                v189 = 0;
                v190 = (__int16 *)v187;
                v191 = v188;
                do
                {
                  v192 = v190;
                  v193 = v191;
                  v194 = v174;
                  do
                  {
                    v195 = *v192++;
                    _H0 = v195;
                    __asm { FCVT            S0, H0 }
                    *v193++ = _S0;
                    --v194;
                  }
                  while (v194);
                  ++v189;
                  v191 = (_DWORD *)((char *)v191 + v164);
                  v190 = (__int16 *)((char *)v190 + v179);
                }
                while (v189 != v184);
                ++v186;
                v188 += v165;
                v187 = (float16x4_t *)((char *)v187 + v180);
              }
              while (v186 != v173);
              ++v185;
              v159 += v166;
              v170 = (float16x4_t *)((char *)v170 + v181);
            }
            while (v185 != v183);
          }
        }
        IOSurfaceUnlock(v319, 1u, 0);
        v247 = v322;
        v4 = v304;
        if (v322 == v321)
        {
          v247 = v321;
          v158 = 4;
          goto LABEL_102;
        }
        if (!v322)
          goto LABEL_103;
        goto LABEL_101;
      }
      v314 = v157;
      v198 = v160 + 88 * v157;
      v199 = *(__IOSurface **)(v198 + 48);
      IOSurfaceLock(v199, 1u, 0);
      v200 = (char *)IOSurfaceGetBaseAddress(v199);
      v201 = operator new(0x20uLL);
      *v201 = &off_1E8294620;
      v201[1] = v199;
      v303 = v199;
      *((_DWORD *)v201 + 4) = 1;
      v201[3] = 0;
      v322 = v201;
      v202 = *(_QWORD *)(v198 + 56);
      v203 = *v162;
      v204 = HIDWORD(v202);
      v205 = HIDWORD(*v162);
      if ((int)*v162 >= 1 && (int)v205 >= 1 && SHIDWORD(v202) >= 1 && (int)v202 >= 1)
      {
        v210 = *(int *)(v198 + 72);
        v209 = *(int *)(v198 + 76);
        v211 = *(int *)(v198 + 80);
        if ((_DWORD)v210 != (_DWORD)v166 || (_DWORD)v209 != (_DWORD)v165 || (_DWORD)v211 != v164)
        {
          v214 = v164;
          v215 = (int)v165;
          v216 = (int)v166;
          v217 = *(_QWORD *)(v198 + 56);
          v218 = v203;
          v219 = v203 >> 35;
          if (!(v203 >> 35))
          {
            do
            {
              v220 = 0;
              v221 = v200;
              v222 = v159;
              do
              {
                v223 = 0;
                v224 = (int *)v221;
                v225 = v222;
                do
                {
                  v226 = v224;
                  v227 = v225;
                  v228 = v205;
                  do
                  {
                    v229 = *v226++;
                    *v227++ = v229;
                    --v228;
                  }
                  while (v228);
                  ++v223;
                  v225 = (_DWORD *)((char *)v225 + v164);
                  v224 = (int *)((char *)v224 + v211);
                }
                while (v223 != v218);
                ++v220;
                v222 += v215;
                v221 += v209;
              }
              while (v220 != v204);
              ++v219;
              v159 += (int)v166;
              v200 += v210;
            }
            while (v219 != v217);
            goto LABEL_163;
          }
          v248 = 0;
          v249 = (__IOSurface *)(v159 + 16);
          v250 = v200 + 16;
          v251 = v200;
          v252 = v159;
          v310 = *(int *)(v198 + 72);
          v312 = v200;
          v306 = *(_QWORD *)(v198 + 56);
          v308 = (int)v166;
          while (2)
          {
            v253 = 0;
            v254 = &v159[v248 * v216];
            v255 = v251;
            v256 = v252;
            v316 = v250;
            v320 = v249;
            v257 = &v200[v248 * v210];
LABEL_171:
            v258 = 0;
            v259 = v255;
            v260 = v256;
            v261 = (__int128 *)v250;
            v262 = v249;
LABEL_173:
            if ((unint64_t)(&v254[v253 * v215 + v258 * v214] - &v257[v253 * v209 + v258 * v211]) < 0x20)
            {
              v263 = 0;
              goto LABEL_178;
            }
            v264 = v261;
            v265 = v262;
            v266 = v205 & 0xFFFFFFF8;
            do
            {
              v267 = *v264;
              *((_OWORD *)v265 - 1) = *(v264 - 1);
              *(_OWORD *)v265 = v267;
              v265 = (__IOSurface *)((char *)v265 + 32);
              v264 += 2;
              v266 -= 8;
            }
            while (v266);
            v263 = v205 & 0xFFFFFFF8;
            if (v205 != v263)
            {
LABEL_178:
              v268 = v205 - v263;
              v269 = 4 * v263;
              v270 = &v260[4 * v263];
              v271 = (int *)&v259[v269];
              do
              {
                v272 = *v271++;
                *(_DWORD *)v270 = v272;
                v270 += 4;
                --v268;
              }
              while (v268);
            }
            ++v258;
            v262 = (__IOSurface *)((char *)v262 + v214);
            v261 = (__int128 *)((char *)v261 + v211);
            v260 += v214;
            v259 += v211;
            if (v258 == v203)
            {
              ++v253;
              v249 = (__IOSurface *)((char *)v249 + v215);
              v250 += v209;
              v256 += v215;
              v255 += v209;
              if (v253 == v204)
              {
                ++v248;
                v216 = v308;
                v210 = v310;
                v249 = (IOSurfaceRef)((char *)v320 + v308);
                v250 = &v316[v310];
                v252 += v308;
                v251 += v310;
                v200 = v312;
                if (v248 == v306)
                  goto LABEL_163;
                continue;
              }
              goto LABEL_171;
            }
            goto LABEL_173;
          }
        }
        memcpy(v159, v200, (int)v166 * (int)v202);
      }
LABEL_163:
      IOSurfaceUnlock(v303, 1u, 0);
      v247 = v322;
      if (v322 == v321)
      {
        v247 = v321;
        v158 = 4;
        v4 = v304;
        goto LABEL_102;
      }
      v4 = v304;
      if (!v322)
        goto LABEL_103;
LABEL_101:
      v158 = 5;
LABEL_102:
      (*(void (**)(void))(*v247 + 8 * v158))();
LABEL_103:
      v155 = a3;
      v157 = v314;
LABEL_104:
      ++v157;
      v156 = *v155;
      if (v157 >= (v155[1] - *v155) >> 3)
        return 1;
    }
  }
  return result;
}

void sub_1C9903A80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, _QWORD *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,_QWORD *a25)
{
  uint64_t v26;

  if (a25 == a12)
  {
    v26 = 4;
  }
  else
  {
    if (!a25)
      goto LABEL_6;
    v26 = 5;
    a12 = a25;
  }
  (*(void (**)(void))(*a12 + 8 * v26))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void sub_1C9903AD0()
{
  JUMPOUT(0x1CAA44AFCLL);
}

__n128 sub_1C9903AE4(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_1E8294620;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 sub_1C9903B24(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E8294620;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_1C9903B4C(uint64_t a1)
{
  return IOSurfaceUnlock(*(IOSurfaceRef *)(a1 + 8), *(_DWORD *)(a1 + 16), *(uint32_t **)(a1 + 24));
}

void sub_1C9903B64()
{
  JUMPOUT(0x1CAA44AFCLL);
}

__n128 sub_1C9903B78(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_1E82945D8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 sub_1C9903BB8(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E82945D8;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_1C9903BE0(uint64_t a1)
{
  return IOSurfaceUnlock(*(IOSurfaceRef *)(a1 + 8), *(_DWORD *)(a1 + 16), *(uint32_t **)(a1 + 24));
}

void sub_1C9903BF8()
{
  JUMPOUT(0x1CAA44AFCLL);
}

__n128 sub_1C9903C0C(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_1E8294668;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 sub_1C9903C4C(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E8294668;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_1C9903C74(uint64_t a1)
{
  return IOSurfaceUnlock(*(IOSurfaceRef *)(a1 + 8), *(_DWORD *)(a1 + 16), *(uint32_t **)(a1 + 24));
}

void sub_1C9903C8C()
{
  JUMPOUT(0x1CAA44AFCLL);
}

__n128 sub_1C9903CA0(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_1E8294590;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 sub_1C9903CE0(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E8294590;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_1C9903D08(uint64_t a1)
{
  return IOSurfaceUnlock(*(IOSurfaceRef *)(a1 + 8), *(_DWORD *)(a1 + 16), *(uint32_t **)(a1 + 24));
}

uint64_t *sub_1C9903D1C(uint64_t *a1)
{
  void *v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;
  int v12;
  int v14;
  uint8_t buf[4];
  int v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v2 = (void *)a1[5];
  if (v2)
  {
    v3 = a1[6];
    v4 = v2;
    if ((void *)v3 != v2)
    {
      do
        v3 = sub_1C9903ECC(v3 - 88);
      while ((void *)v3 != v2);
      v4 = (void *)a1[5];
    }
    a1[6] = (uint64_t)v2;
    operator delete(v4);
  }
  v5 = a1[2];
  if (v5)
  {
    v6 = a1[3];
    v7 = (void *)a1[2];
    if (v6 != v5)
    {
      do
        v6 = sub_1C9903ECC(v6 - 88);
      while (v6 != v5);
      v7 = (void *)a1[2];
    }
    a1[3] = v5;
    operator delete(v7);
  }
  v8 = a1[1];
  a1[1] = 0;
  if (v8)
  {
    v9 = e5rt_execution_stream_operation_release();
    if (v9)
    {
      v14 = v9;
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 67109120;
        v16 = v14;
        _os_log_error_impl(&dword_1C9870000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "e5rt::AssertSuccess failed with error code %d.", buf, 8u);
      }
    }
  }
  v10 = *a1;
  *a1 = 0;
  if (v10)
  {
    v11 = e5rt_execution_stream_reset();
    v12 = e5rt_execution_stream_release();
    if (!v11)
      v11 = v12;
    if (v11 && os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 67109120;
      v16 = v11;
      _os_log_error_impl(&dword_1C9870000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "e5rt::AssertSuccess failed with error code %d.", buf, 8u);
    }
  }
  return a1;
}

uint64_t sub_1C9903ECC(uint64_t a1)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  int v7;
  int v9;
  int v10;
  int v11;
  uint8_t buf[4];
  int v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  if (v2)
  {
    v3 = e5rt_buffer_object_release();
    if (v3)
    {
      v9 = v3;
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 67109120;
        v13 = v9;
        _os_log_error_impl(&dword_1C9870000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "e5rt::AssertSuccess failed with error code %d.", buf, 8u);
      }
    }
  }
  v4 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (v4)
  {
    v5 = e5rt_tensor_desc_release();
    if (v5)
    {
      v10 = v5;
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 67109120;
        v13 = v10;
        _os_log_error_impl(&dword_1C9870000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "e5rt::AssertSuccess failed with error code %d.", buf, 8u);
      }
    }
  }
  v6 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  if (v6)
  {
    v7 = e5rt_io_port_release();
    if (v7)
    {
      v11 = v7;
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 67109120;
        v13 = v11;
        _os_log_error_impl(&dword_1C9870000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "e5rt::AssertSuccess failed with error code %d.", buf, 8u);
      }
    }
  }
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

BOOL sub_1C9904080(uint64_t *a1)
{
  int v1;
  uint64_t v2;
  int v3;
  int v5;
  uint8_t buf[4];
  int v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v1 = e5rt_tensor_desc_alloc_buffer_object();
  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = e5rt_buffer_object_release();
    if (v3)
    {
      v5 = v3;
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 67109120;
        v8 = v5;
        _os_log_error_impl(&dword_1C9870000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "e5rt::AssertSuccess failed with error code %d.", buf, 8u);
      }
    }
  }
  return !v1 && e5rt_buffer_object_get_iosurface() == 0;
}

void sub_1C9904190(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1C989C080((uint64_t **)va);
  _Unwind_Resume(a1);
}

BOOL sub_1C99041A4(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v4;
  int v5;
  _QWORD *v6;
  char v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  char v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  int v24;
  int v25;
  int v27;
  uint8_t buf[8];
  uint64_t v29;
  _QWORD v30[3];
  _QWORD *v31;
  _QWORD v32[3];
  _QWORD *v33;
  _QWORD v34[3];
  _QWORD *v35;
  _QWORD v36[3];
  _QWORD *v37;
  _QWORD v38[3];
  _QWORD *v39;
  _QWORD v40[3];
  _QWORD *v41;
  uint8_t v42[8];
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  v2 = *a2;
  if (!*a2)
    return 0;
  *a2 = 0;
  v4 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v2;
  if (v4)
  {
    *(_QWORD *)v42 = v4;
    v5 = e5rt_execution_stream_operation_release();
    if (v5)
    {
      v27 = v5;
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 67109120;
        *(_DWORD *)&buf[4] = v27;
        _os_log_error_impl(&dword_1C9870000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "e5rt::AssertSuccess failed with error code %d.", buf, 8u);
      }
    }
  }
  v6 = 0;
  v41 = 0;
  if (MEMORY[0x1E0D1FB20])
  {
    v40[0] = &off_1E8295440;
    v40[1] = MEMORY[0x1E0D1FB20];
    v6 = v40;
    v41 = v40;
  }
  v39 = 0;
  if (MEMORY[0x1E0D1FB10])
  {
    v38[0] = &off_1E8295488;
    v38[1] = MEMORY[0x1E0D1FB10];
    v39 = v38;
  }
  v37 = 0;
  if (MEMORY[0x1E0D1FB90])
  {
    v36[0] = &off_1E82953F8;
    v36[1] = MEMORY[0x1E0D1FB90];
    v37 = v36;
  }
  v7 = sub_1C9904764(a1, (uint64_t)v6, (uint64_t)v38, (uint64_t)v36, a1 + 16);
  v8 = v37;
  if (v37 == v36)
  {
    v9 = 4;
    v8 = v36;
  }
  else
  {
    if (!v37)
      goto LABEL_15;
    v9 = 5;
  }
  (*(void (**)(void))(*v8 + 8 * v9))();
LABEL_15:
  v10 = v39;
  if (v39 == v38)
  {
    v11 = 4;
    v10 = v38;
  }
  else
  {
    if (!v39)
      goto LABEL_20;
    v11 = 5;
  }
  (*(void (**)(void))(*v10 + 8 * v11))();
LABEL_20:
  v12 = v41;
  if (v41 == v40)
  {
    v13 = 4;
    v12 = v40;
  }
  else
  {
    if (!v41)
      goto LABEL_25;
    v13 = 5;
  }
  (*(void (**)(void))(*v12 + 8 * v13))();
LABEL_25:
  if ((v7 & 1) == 0)
    return 0;
  v14 = 0;
  v35 = 0;
  if (MEMORY[0x1E0D1FB38])
  {
    v34[0] = &off_1E8295440;
    v34[1] = MEMORY[0x1E0D1FB38];
    v14 = v34;
    v35 = v34;
  }
  v33 = 0;
  if (MEMORY[0x1E0D1FB40])
  {
    v32[0] = &off_1E8295488;
    v32[1] = MEMORY[0x1E0D1FB40];
    v33 = v32;
  }
  v31 = 0;
  if (MEMORY[0x1E0D1FBA0])
  {
    v30[0] = &off_1E82953F8;
    v30[1] = MEMORY[0x1E0D1FBA0];
    v31 = v30;
  }
  v15 = sub_1C9904764(a1, (uint64_t)v14, (uint64_t)v32, (uint64_t)v30, a1 + 40);
  v16 = v31;
  if (v31 == v30)
  {
    v17 = 4;
    v16 = v30;
  }
  else
  {
    if (!v31)
      goto LABEL_37;
    v17 = 5;
  }
  (*(void (**)(void))(*v16 + 8 * v17))();
LABEL_37:
  v18 = v33;
  if (v33 == v32)
  {
    v19 = 4;
    v18 = v32;
  }
  else
  {
    if (!v33)
      goto LABEL_42;
    v19 = 5;
  }
  (*(void (**)(void))(*v18 + 8 * v19))();
LABEL_42:
  v20 = v35;
  if (v35 == v34)
  {
    v21 = 4;
    v20 = v34;
  }
  else
  {
    if (!v35)
      goto LABEL_47;
    v21 = 5;
  }
  (*(void (**)(void))(*v20 + 8 * v21))();
LABEL_47:
  if ((v15 & 1) != 0 && !e5rt_execution_stream_operation_prepare_op_for_encode())
  {
    *(_QWORD *)buf = a1;
    v29 = 0;
    v22 = e5rt_execution_stream_create();
    v23 = **(_QWORD **)buf;
    **(_QWORD **)buf = v29;
    if (v23)
    {
      v24 = e5rt_execution_stream_reset();
      v25 = e5rt_execution_stream_release();
      if (!v24)
        v24 = v25;
      if (v24)
      {
        if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)v42 = 67109120;
          *(_DWORD *)&v42[4] = v24;
          _os_log_error_impl(&dword_1C9870000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "e5rt::AssertSuccess failed with error code %d.", v42, 8u);
        }
      }
    }
    if (!v22)
      return e5rt_execution_stream_encode_operation() == 0;
  }
  return 0;
}

void sub_1C990456C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_1C990524C((uint64_t **)va);
  _Unwind_Resume(a1);
}

void sub_1C9904580(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void sub_1C990458C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, char *a16, char a17, uint64_t a18, uint64_t a19, char *a20,char a21,uint64_t a22,uint64_t a23,char *a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
  char *v28;
  char *v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;

  v30 = a16;
  if (a16 == v28)
  {
    v31 = 4;
    v30 = &a13;
  }
  else
  {
    if (!a16)
      goto LABEL_6;
    v31 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v30 + 8 * v31))();
LABEL_6:
  v32 = a20;
  if (a20 == &a17)
  {
    v33 = 4;
    v32 = &a17;
  }
  else
  {
    if (!a20)
      goto LABEL_11;
    v33 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v32 + 8 * v33))();
LABEL_11:
  v34 = a24;
  if (a24 == &a21)
  {
    v35 = 4;
    v34 = &a21;
  }
  else
  {
    if (!a24)
      goto LABEL_16;
    v35 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v34 + 8 * v35))();
LABEL_16:
  _Unwind_Resume(exception_object);
}

uint64_t *sub_1C99046A0(uint64_t *a1)
{
  uint64_t v2;
  int v3;
  int v5;
  uint8_t buf[4];
  int v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = e5rt_execution_stream_operation_release();
    if (v3)
    {
      v5 = v3;
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 67109120;
        v7 = v5;
        _os_log_error_impl(&dword_1C9870000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "e5rt::AssertSuccess failed with error code %d.", buf, 8u);
      }
    }
  }
  return a1;
}

uint64_t sub_1C9904764(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  unint64_t v17;
  _BYTE *v18;
  _BYTE *v19;
  char *v20;
  char *v21;
  char *v22;
  char *v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  int v34;
  uint64_t v35;
  int v36;
  int v37;
  int v38;
  char *__p;
  uint64_t v40;
  unint64_t v41;
  uint64_t *v42;
  char *v43;
  uint8_t v44[8];
  uint64_t v45;
  uint8_t buf[8];
  uint64_t v47;

  v47 = *MEMORY[0x1E0C80C00];
  v41 = 0;
  *(_QWORD *)v44 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)buf = &v41;
  if (!a2)
    goto LABEL_38;
  if ((*(unsigned int (**)(uint64_t, uint8_t *, uint8_t *))(*(_QWORD *)a2 + 48))(a2, v44, buf))
    return 0;
  v10 = v41;
  if (v41)
  {
    if (v41 >> 61)
      abort();
    v11 = 8 * v41;
    v12 = (char *)operator new(8 * v41);
    bzero(v12, 8 * v10);
    v13 = &v12[v11];
  }
  else
  {
    v13 = 0;
    v12 = 0;
  }
  v14 = *(_QWORD *)(a1 + 8);
  v43 = v12;
  *(_QWORD *)v44 = v14;
  *(_QWORD *)buf = v10;
  v15 = *(_QWORD *)(a3 + 24);
  __p = v12;
  if (!v15)
  {
LABEL_38:
    result = sub_1C9889C1C();
    goto LABEL_42;
  }
  if ((*(unsigned int (**)(uint64_t, uint8_t *, uint8_t *, char **))(*(_QWORD *)v15 + 48))(v15, v44, buf, &v43))
  {
    v9 = 0;
    goto LABEL_11;
  }
  v17 = (v13 - v12) >> 3;
  v18 = *(_BYTE **)a5;
  if (0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(_QWORD *)(a5 + 16) - *(_QWORD *)a5) >> 3) < v17)
  {
    if ((unint64_t)(v13 - v12) >= 0x1745D1745D1745D1)
      abort();
    v19 = *(_BYTE **)(a5 + 8);
    v20 = (char *)operator new(88 * v17);
    v21 = &v20[88 * v17];
    v22 = &v20[v19 - v18];
    if (v19 == v18)
    {
      *(_QWORD *)a5 = v22;
      *(_QWORD *)(a5 + 8) = v22;
      *(_QWORD *)(a5 + 16) = v21;
      if (!v18)
        goto LABEL_23;
    }
    else
    {
      v23 = &v20[v19 - v18];
      do
      {
        v24 = *(_OWORD *)(v19 - 88);
        *((_QWORD *)v23 - 9) = *((_QWORD *)v19 - 9);
        *(_OWORD *)(v23 - 88) = v24;
        *((_QWORD *)v19 - 11) = 0;
        *((_QWORD *)v19 - 10) = 0;
        v25 = *((_QWORD *)v19 - 8);
        *((_QWORD *)v19 - 9) = 0;
        *((_QWORD *)v19 - 8) = 0;
        *((_QWORD *)v23 - 8) = v25;
        v26 = *((_QWORD *)v19 - 7);
        *((_QWORD *)v19 - 7) = 0;
        *((_QWORD *)v23 - 7) = v26;
        v27 = *((_OWORD *)v19 - 3);
        *((_QWORD *)v19 - 6) = 0;
        *((_OWORD *)v23 - 3) = v27;
        v28 = *((_OWORD *)v19 - 1);
        *((_OWORD *)v23 - 2) = *((_OWORD *)v19 - 2);
        *((_OWORD *)v23 - 1) = v28;
        v23 -= 88;
        v19 -= 88;
      }
      while (v19 != v18);
      v18 = *(_BYTE **)a5;
      v29 = *(_QWORD *)(a5 + 8);
      *(_QWORD *)a5 = v23;
      *(_QWORD *)(a5 + 8) = v22;
      for (*(_QWORD *)(a5 + 16) = v21; (_BYTE *)v29 != v18; v29 = sub_1C9903ECC(v29 - 88))
        ;
      if (!v18)
        goto LABEL_23;
    }
    operator delete(v18);
  }
LABEL_23:
  if (v12 == v13)
  {
    v9 = 1;
LABEL_11:
    if (__p)
      operator delete(__p);
    return v9;
  }
  v30 = *(char **)v12;
  v40 = 0;
  v31 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)v44 = &v40;
  v45 = 0;
  *(_QWORD *)buf = v31;
  v42 = &v45;
  v43 = v30;
  v32 = *(_QWORD *)(a4 + 24);
  if (v32)
  {
    (*(void (**)(uint64_t, uint8_t *, char **, uint64_t **))(*(_QWORD *)v32 + 48))(v32, buf, &v43, &v42);
    v33 = **(char ***)v44;
    **(_QWORD **)v44 = v45;
    if (v33)
    {
      v43 = v33;
      v34 = e5rt_io_port_release();
      if (v34)
      {
        v37 = v34;
        if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 67109120;
          *(_DWORD *)&buf[4] = v37;
          _os_log_error_impl(&dword_1C9870000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "e5rt::AssertSuccess failed with error code %d.", buf, 8u);
        }
      }
    }
    v35 = v40;
    v40 = 0;
    if (v35)
    {
      *(_QWORD *)buf = v35;
      v36 = e5rt_io_port_release();
      if (v36)
      {
        v38 = v36;
        if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)v44 = 67109120;
          *(_DWORD *)&v44[4] = v38;
          _os_log_error_impl(&dword_1C9870000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "e5rt::AssertSuccess failed with error code %d.", v44, 8u);
        }
      }
    }
    v9 = 0;
    goto LABEL_11;
  }
  result = sub_1C9889C1C();
LABEL_42:
  __break(1u);
  return result;
}

void sub_1C990519C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  sub_1C989E114(&a19);
  sub_1C989CA2C(&a13);
  sub_1C989CA2C(&a15);
  if (!__p)
    _Unwind_Resume(a1);
  operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t **sub_1C990524C(uint64_t **a1)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  int v5;
  int v6;
  uint8_t buf[4];
  int v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v2 = *a1;
  v3 = a1[1];
  v4 = **a1;
  *v2 = (uint64_t)v3;
  if (v4)
  {
    v5 = e5rt_execution_stream_reset();
    v6 = e5rt_execution_stream_release();
    if (!v5)
      v5 = v6;
    if (v5 && os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 67109120;
      v9 = v5;
      _os_log_error_impl(&dword_1C9870000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "e5rt::AssertSuccess failed with error code %d.", buf, 8u);
    }
  }
  return a1;
}

void sub_1C9905324()
{
  JUMPOUT(0x1CAA44AFCLL);
}

_QWORD *sub_1C9905338(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E82953F8;
  result[1] = v3;
  return result;
}

uint64_t sub_1C990536C(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E82953F8;
  a2[1] = v2;
  return result;
}

uint64_t sub_1C9905388(uint64_t a1, _QWORD *a2, _QWORD *a3, _QWORD *a4)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(a1 + 8))(*a2, *a3, *a4);
}

void sub_1C99053A0()
{
  JUMPOUT(0x1CAA44AFCLL);
}

_QWORD *sub_1C99053B4(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E8295488;
  result[1] = v3;
  return result;
}

uint64_t sub_1C99053E8(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E8295488;
  a2[1] = v2;
  return result;
}

uint64_t sub_1C9905404(uint64_t a1, _QWORD *a2, _QWORD *a3, _QWORD *a4)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(a1 + 8))(*a2, *a3, *a4);
}

void sub_1C990541C()
{
  JUMPOUT(0x1CAA44AFCLL);
}

_QWORD *sub_1C9905430(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E8295440;
  result[1] = v3;
  return result;
}

uint64_t sub_1C9905464(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E8295440;
  a2[1] = v2;
  return result;
}

uint64_t sub_1C9905480(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(a1 + 8))(*a2, *a3);
}

void sub_1C9905490(void ***a1, void ***a2)
{
  void **v4;
  void **v5;
  unint64_t v6;
  size_t v7;
  char *v8;
  char *v9;
  char *v10;
  char *v11;
  __int128 v12;
  void **v13;
  void **v14;
  __int128 *v15;
  __int128 v16;
  __int128 v17;
  unint64_t v18;
  void **v19;
  void **v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char *v25;
  char *v26;
  char *v27;
  char *v28;
  __int128 v29;
  void **v30;
  int v31;
  void *__p[2];
  void *v33;
  __int128 v34;

  v4 = *a2;
  v5 = a2[1];
  if (v5 != *a2)
  {
    do
    {
      if (*((char *)v5 - 17) < 0)
        operator delete(*(v5 - 5));
      v5 -= 5;
    }
    while (v5 != v4);
    v5 = *a2;
  }
  a2[1] = v4;
  v6 = 0x2E8BA2E8BA2E8BA3 * (a1[1] - *a1);
  if (0xCCCCCCCCCCCCCCCDLL * (a2[2] - v5) < v6)
  {
    if (v6 > 0x666666666666666)
      abort();
    v7 = 0x45D1745D1745D178 * (a1[1] - *a1);
    v8 = (char *)operator new(v7);
    v9 = &v8[v7];
    v10 = &v8[(char *)v4 - (char *)v5];
    if (v4 == v5)
    {
      *a2 = (void **)v10;
      a2[1] = (void **)v10;
      a2[2] = (void **)v9;
    }
    else
    {
      v11 = &v8[(char *)v4 - (char *)v5];
      do
      {
        v12 = *(_OWORD *)(v4 - 5);
        *((_QWORD *)v11 - 3) = *(v4 - 3);
        *(_OWORD *)(v11 - 40) = v12;
        *(v4 - 4) = 0;
        *(v4 - 3) = 0;
        *(v4 - 5) = 0;
        *((_OWORD *)v11 - 1) = *((_OWORD *)v4 - 1);
        v11 -= 40;
        v4 -= 5;
      }
      while (v4 != v5);
      v4 = *a2;
      v13 = a2[1];
      *a2 = (void **)v11;
      a2[1] = (void **)v10;
      a2[2] = (void **)v9;
      while (v13 != v4)
      {
        if (*((char *)v13 - 17) < 0)
          operator delete(*(v13 - 5));
        v13 -= 5;
      }
    }
    if (v4)
      operator delete(v4);
  }
  v14 = *a1;
  v15 = (__int128 *)a1[1];
  if (*a1 != (void **)v15)
  {
    do
    {
      HIBYTE(v33) = 5;
      strcpy((char *)__p, "dummy");
      *(_QWORD *)&v34 = -1;
      *((_QWORD *)&v34 + 1) = -1;
      if (__p != v14)
      {
        if (*((char *)v14 + 23) < 0)
        {
          sub_1C98A96AC(__p, *v14, (size_t)v14[1]);
        }
        else
        {
          v17 = *(_OWORD *)v14;
          v33 = v14[2];
          *(_OWORD *)__p = v17;
        }
      }
      v34 = *(_OWORD *)(v14 + 7);
      v19 = a2[1];
      v18 = (unint64_t)a2[2];
      if ((unint64_t)v19 < v18)
      {
        v16 = *(_OWORD *)__p;
        v19[2] = v33;
        *(_OWORD *)v19 = v16;
        __p[1] = 0;
        v33 = 0;
        __p[0] = 0;
        *(_OWORD *)(v19 + 3) = v34;
        a2[1] = v19 + 5;
      }
      else
      {
        v20 = *a2;
        v21 = 0xCCCCCCCCCCCCCCCDLL * (v19 - *a2);
        v22 = v21 + 1;
        if (v21 + 1 > 0x666666666666666)
          abort();
        v23 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v18 - (_QWORD)v20) >> 3);
        if (2 * v23 > v22)
          v22 = 2 * v23;
        if (v23 >= 0x333333333333333)
          v24 = 0x666666666666666;
        else
          v24 = v22;
        if (v24)
        {
          if (v24 > 0x666666666666666)
            sub_1C9899D30();
          v25 = (char *)operator new(40 * v24);
        }
        else
        {
          v25 = 0;
        }
        v26 = &v25[40 * v21];
        v27 = &v25[40 * v24];
        *(_OWORD *)v26 = *(_OWORD *)__p;
        *((_QWORD *)v26 + 2) = v33;
        __p[1] = 0;
        v33 = 0;
        __p[0] = 0;
        *(_OWORD *)(v26 + 24) = v34;
        v28 = v26 + 40;
        if (v19 == v20)
        {
          *a2 = (void **)v26;
          a2[1] = (void **)v28;
          a2[2] = (void **)v27;
        }
        else
        {
          do
          {
            v29 = *(_OWORD *)(v19 - 5);
            *((_QWORD *)v26 - 3) = *(v19 - 3);
            *(_OWORD *)(v26 - 40) = v29;
            *(v19 - 4) = 0;
            *(v19 - 3) = 0;
            *(v19 - 5) = 0;
            *((_OWORD *)v26 - 1) = *((_OWORD *)v19 - 1);
            v26 -= 40;
            v19 -= 5;
          }
          while (v19 != v20);
          v19 = *a2;
          v30 = a2[1];
          *a2 = (void **)v26;
          a2[1] = (void **)v28;
          for (a2[2] = (void **)v27; v30 != v19; v30 -= 5)
          {
            if (*((char *)v30 - 17) < 0)
              operator delete(*(v30 - 5));
          }
        }
        if (v19)
          operator delete(v19);
        v31 = SHIBYTE(v33);
        a2[1] = (void **)v28;
        if (v31 < 0)
          operator delete(__p[0]);
      }
      v14 += 11;
    }
    while (v14 != (void **)v15);
  }
}

void sub_1C990581C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t **sub_1C990583C(uint64_t **a1)
{
  uint64_t v2;
  int v3;
  int v5;
  uint8_t buf[4];
  int v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v2 = **a1;
  **a1 = (uint64_t)a1[1];
  if (v2)
  {
    v3 = e5rt_e5_compiler_release();
    if (v3)
    {
      v5 = v3;
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 67109120;
        v7 = v5;
        _os_log_error_impl(&dword_1C9870000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "e5rt::AssertSuccess failed with error code %d.", buf, 8u);
      }
    }
  }
  return a1;
}

uint64_t **sub_1C9905904(uint64_t **a1)
{
  uint64_t v2;
  int v3;
  int v5;
  uint8_t buf[4];
  int v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v2 = **a1;
  **a1 = (uint64_t)a1[1];
  if (v2)
  {
    v3 = e5rt_e5_compiler_options_release();
    if (v3)
    {
      v5 = v3;
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 67109120;
        v7 = v5;
        _os_log_error_impl(&dword_1C9870000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "e5rt::AssertSuccess failed with error code %d.", buf, 8u);
      }
    }
  }
  return a1;
}

uint64_t *sub_1C99059CC(uint64_t *a1)
{
  uint64_t v2;
  int v3;
  int v5;
  uint8_t buf[4];
  int v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = e5rt_e5_compiler_options_release();
    if (v3)
    {
      v5 = v3;
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 67109120;
        v7 = v5;
        _os_log_error_impl(&dword_1C9870000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "e5rt::AssertSuccess failed with error code %d.", buf, 8u);
      }
    }
  }
  return a1;
}

uint64_t *sub_1C9905A90(uint64_t *a1)
{
  uint64_t v2;
  int v3;
  int v5;
  uint8_t buf[4];
  int v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = e5rt_e5_compiler_release();
    if (v3)
    {
      v5 = v3;
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 67109120;
        v7 = v5;
        _os_log_error_impl(&dword_1C9870000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "e5rt::AssertSuccess failed with error code %d.", buf, 8u);
      }
    }
  }
  return a1;
}

uint64_t sub_1C9905B54()
{
  uint64_t precompiled_compute_operation_with_options;
  uint64_t v1;
  int v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int options_release;
  uint64_t v15;
  int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint8_t v36[8];
  uint64_t v37;
  uint8_t v38[8];
  uint64_t v39;
  uint8_t buf[8];
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  v32 = 0;
  *(_QWORD *)v36 = &v32;
  v37 = 0;
  v34 = 0;
  *(_QWORD *)v38 = &v34;
  v39 = 0;
  precompiled_compute_operation_with_options = e5rt_e5_compiler_create();
  v1 = **(_QWORD **)v38;
  **(_QWORD **)v38 = v39;
  if (v1)
  {
    v35 = v1;
    v2 = e5rt_e5_compiler_release();
    if (v2)
    {
      v22 = v2;
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 67109120;
        *(_DWORD *)&buf[4] = v22;
        _os_log_error_impl(&dword_1C9870000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "e5rt::AssertSuccess failed with error code %d.", buf, 8u);
      }
    }
  }
  if (!(_DWORD)precompiled_compute_operation_with_options)
  {
    v33 = 0;
    *(_QWORD *)v38 = &v33;
    v39 = 0;
    precompiled_compute_operation_with_options = e5rt_e5_compiler_options_create();
    v3 = **(_QWORD **)v38;
    **(_QWORD **)v38 = v39;
    if (v3)
    {
      v35 = v3;
      v4 = e5rt_e5_compiler_options_release();
      if (v4)
      {
        v26 = v4;
        if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 67109120;
          *(_DWORD *)&buf[4] = v26;
          _os_log_error_impl(&dword_1C9870000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "e5rt::AssertSuccess failed with error code %d.", buf, 8u);
        }
      }
    }
    if (!(_DWORD)precompiled_compute_operation_with_options)
    {
      precompiled_compute_operation_with_options = e5rt_e5_compiler_options_set_compute_device_types_mask();
      if (!(_DWORD)precompiled_compute_operation_with_options)
        precompiled_compute_operation_with_options = e5rt_e5_compiler_compile();
    }
    v5 = v33;
    v33 = 0;
    if (v5)
    {
      *(_QWORD *)buf = v5;
      v6 = e5rt_e5_compiler_options_release();
      if (v6)
      {
        v27 = v6;
        if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)v38 = 67109120;
          *(_DWORD *)&v38[4] = v27;
          _os_log_error_impl(&dword_1C9870000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "e5rt::AssertSuccess failed with error code %d.", v38, 8u);
        }
      }
    }
  }
  v7 = v34;
  v34 = 0;
  if (v7)
  {
    *(_QWORD *)buf = v7;
    v8 = e5rt_e5_compiler_release();
    if (v8)
    {
      v23 = v8;
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)v38 = 67109120;
        *(_DWORD *)&v38[4] = v23;
        _os_log_error_impl(&dword_1C9870000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "e5rt::AssertSuccess failed with error code %d.", v38, 8u);
      }
    }
  }
  v9 = **(_QWORD **)v36;
  **(_QWORD **)v36 = v37;
  if (v9)
  {
    *(_QWORD *)buf = v9;
    v10 = e5rt_program_library_release();
    if (v10)
    {
      v24 = v10;
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)v38 = 67109120;
        *(_DWORD *)&v38[4] = v24;
        _os_log_error_impl(&dword_1C9870000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "e5rt::AssertSuccess failed with error code %d.", v38, 8u);
      }
    }
  }
  if (!(_DWORD)precompiled_compute_operation_with_options)
  {
    v35 = 0;
    *(_QWORD *)v38 = &v35;
    v39 = 0;
    precompiled_compute_operation_with_options = e5rt_program_library_retain_program_function();
    v11 = **(_QWORD **)v38;
    **(_QWORD **)v38 = v39;
    if (v11)
    {
      *(_QWORD *)buf = v11;
      v12 = e5rt_program_function_release();
      if (v12)
      {
        v28 = v12;
        if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)v36 = 67109120;
          *(_DWORD *)&v36[4] = v28;
          _os_log_error_impl(&dword_1C9870000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "e5rt::AssertSuccess failed with error code %d.", v36, 8u);
        }
      }
    }
    if (!(_DWORD)precompiled_compute_operation_with_options)
    {
      v34 = 0;
      *(_QWORD *)v38 = &v34;
      v39 = 0;
      precompiled_compute_operation_with_options = e5rt_precompiled_compute_op_create_options_create_with_program_function();
      v13 = **(_QWORD **)v38;
      **(_QWORD **)v38 = v39;
      if (v13)
      {
        *(_QWORD *)buf = v13;
        options_release = e5rt_precompiled_compute_op_create_options_release();
        if (options_release)
        {
          v30 = options_release;
          if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)v36 = 67109120;
            *(_DWORD *)&v36[4] = v30;
            _os_log_error_impl(&dword_1C9870000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "e5rt::AssertSuccess failed with error code %d.", v36, 8u);
          }
        }
      }
      if (!(_DWORD)precompiled_compute_operation_with_options)
        precompiled_compute_operation_with_options = e5rt_execution_stream_operation_create_precompiled_compute_operation_with_options();
      v15 = v34;
      v34 = 0;
      if (v15)
      {
        *(_QWORD *)v36 = v15;
        v16 = e5rt_precompiled_compute_op_create_options_release();
        if (v16)
        {
          v31 = v16;
          if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)v38 = 67109120;
            *(_DWORD *)&v38[4] = v31;
            _os_log_error_impl(&dword_1C9870000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "e5rt::AssertSuccess failed with error code %d.", v38, 8u);
          }
        }
      }
    }
    v17 = v35;
    v35 = 0;
    if (v17)
    {
      *(_QWORD *)v36 = v17;
      v18 = e5rt_program_function_release();
      if (v18)
      {
        v29 = v18;
        if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)v38 = 67109120;
          *(_DWORD *)&v38[4] = v29;
          _os_log_error_impl(&dword_1C9870000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "e5rt::AssertSuccess failed with error code %d.", v38, 8u);
        }
      }
    }
  }
  v19 = v32;
  v32 = 0;
  if (v19)
  {
    *(_QWORD *)v36 = v19;
    v20 = e5rt_program_library_release();
    if (v20)
    {
      v25 = v20;
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)v38 = 67109120;
        *(_DWORD *)&v38[4] = v25;
        _os_log_error_impl(&dword_1C9870000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "e5rt::AssertSuccess failed with error code %d.", v38, 8u);
      }
    }
  }
  return precompiled_compute_operation_with_options;
}

void sub_1C9906110(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  sub_1C99063EC(&a11);
  sub_1C99064B0(&a12);
  sub_1C9906574(&a9);
  _Unwind_Resume(a1);
}

uint64_t **sub_1C9906194(uint64_t **a1)
{
  uint64_t v2;
  int v3;
  int v5;
  uint8_t buf[4];
  int v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v2 = **a1;
  **a1 = (uint64_t)a1[1];
  if (v2)
  {
    v3 = e5rt_program_library_release();
    if (v3)
    {
      v5 = v3;
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 67109120;
        v7 = v5;
        _os_log_error_impl(&dword_1C9870000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "e5rt::AssertSuccess failed with error code %d.", buf, 8u);
      }
    }
  }
  return a1;
}

uint64_t **sub_1C990625C(uint64_t **a1)
{
  uint64_t v2;
  int v3;
  int v5;
  uint8_t buf[4];
  int v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v2 = **a1;
  **a1 = (uint64_t)a1[1];
  if (v2)
  {
    v3 = e5rt_program_function_release();
    if (v3)
    {
      v5 = v3;
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 67109120;
        v7 = v5;
        _os_log_error_impl(&dword_1C9870000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "e5rt::AssertSuccess failed with error code %d.", buf, 8u);
      }
    }
  }
  return a1;
}

uint64_t **sub_1C9906324(uint64_t **a1)
{
  uint64_t v2;
  int options_release;
  int v5;
  uint8_t buf[4];
  int v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v2 = **a1;
  **a1 = (uint64_t)a1[1];
  if (v2)
  {
    options_release = e5rt_precompiled_compute_op_create_options_release();
    if (options_release)
    {
      v5 = options_release;
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 67109120;
        v7 = v5;
        _os_log_error_impl(&dword_1C9870000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "e5rt::AssertSuccess failed with error code %d.", buf, 8u);
      }
    }
  }
  return a1;
}

uint64_t *sub_1C99063EC(uint64_t *a1)
{
  uint64_t v2;
  int options_release;
  int v5;
  uint8_t buf[4];
  int v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    options_release = e5rt_precompiled_compute_op_create_options_release();
    if (options_release)
    {
      v5 = options_release;
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 67109120;
        v7 = v5;
        _os_log_error_impl(&dword_1C9870000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "e5rt::AssertSuccess failed with error code %d.", buf, 8u);
      }
    }
  }
  return a1;
}

uint64_t *sub_1C99064B0(uint64_t *a1)
{
  uint64_t v2;
  int v3;
  int v5;
  uint8_t buf[4];
  int v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = e5rt_program_function_release();
    if (v3)
    {
      v5 = v3;
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 67109120;
        v7 = v5;
        _os_log_error_impl(&dword_1C9870000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "e5rt::AssertSuccess failed with error code %d.", buf, 8u);
      }
    }
  }
  return a1;
}

uint64_t *sub_1C9906574(uint64_t *a1)
{
  uint64_t v2;
  int v3;
  int v5;
  uint8_t buf[4];
  int v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = e5rt_program_library_release();
    if (v3)
    {
      v5 = v3;
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 67109120;
        v7 = v5;
        _os_log_error_impl(&dword_1C9870000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "e5rt::AssertSuccess failed with error code %d.", buf, 8u);
      }
    }
  }
  return a1;
}

void sub_1C9906638(uint64_t *a1, uint64_t *a2, uint64_t a3, int a4)
{
  unint64_t v4;
  uint64_t v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  const char ***v14;
  const char **v15;
  uint64_t v16;
  uint64_t v17;
  const char *v18;
  uint64_t v19;
  int v20;
  const void *v21;
  const char *v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint8x8_t v26;
  void **v27;
  _QWORD *v28;
  unint64_t v29;
  uint64_t v30;
  int v31;
  float v32;
  float v33;
  _BOOL8 v34;
  unint64_t v35;
  unint64_t v36;
  size_t prime;
  void *v38;
  _QWORD *v39;
  uint64_t v40;
  _QWORD *v41;
  size_t v42;
  size_t v43;
  size_t v44;
  _QWORD *i;
  size_t v46;
  uint64_t v47;
  unint64_t v48;
  uint8x8_t v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  size_t v53;
  _QWORD *v54;
  _QWORD *v55;
  unint64_t v56;
  int v57;
  _BOOL4 v59;
  int v61;
  int v62;
  int v63;
  int v64;
  int v65;
  int v66;
  _QWORD *v67;
  _QWORD *v68;
  _QWORD *v69;
  _QWORD *v70;
  uint64_t v71;
  _QWORD **v73;
  uint64_t v74;
  const char **v75;

  v6 = a2[1];
  if (*a2 == v6 || 0xCCCCCCCCCCCCCCCDLL * ((v6 - *a2) >> 3) != *(_QWORD *)(a3 + 8))
  {
    *a1 = 0;
  }
  else
  {
    v9 = operator new();
    v10 = v9;
    *(_QWORD *)(v9 + 32) = 0;
    *(_OWORD *)v9 = 0u;
    *(_OWORD *)(v9 + 16) = 0u;
    *(_DWORD *)(v9 + 32) = 1065353216;
    v11 = *(_QWORD *)(a3 + 8);
    if (v11)
    {
      v12 = 0;
      v13 = 0;
      v14 = *(const char ****)a3;
      v71 = *(_QWORD *)a3 + 8 * v11;
      v73 = (_QWORD **)(v9 + 16);
      while (1)
      {
        v15 = *v14;
        v17 = *a2;
        v16 = a2[1];
        v74 = *a2;
        v75 = *v14;
        if (*a2 != v16)
        {
          v18 = *v15;
          v4 = strlen(*v15);
          while (1)
          {
            v19 = *(unsigned __int8 *)(v17 + 23);
            v20 = (char)v19;
            if ((v19 & 0x80u) != 0)
              v19 = *(_QWORD *)(v17 + 8);
            if (v19 == v4)
            {
              v21 = v20 >= 0 ? (const void *)v17 : *(const void **)v17;
              if (!memcmp(v21, v18, v4))
                break;
            }
            v17 += 40;
            if (v17 == v16)
              goto LABEL_128;
          }
        }
        if (v17 == v16)
        {
LABEL_128:
          *a1 = 0;
          v68 = *v73;
          if (*v73)
          {
            do
            {
              v69 = (_QWORD *)*v68;
              operator delete(v68);
              v68 = v69;
            }
            while (v69);
          }
          v70 = *(_QWORD **)v10;
          *(_QWORD *)v10 = 0;
          if (v70)
            operator delete(v70);
          JUMPOUT(0x1CAA44AFCLL);
        }
        v22 = *v75;
        v23 = (unint64_t)*v75 >> 32;
        v24 = 0x9DDFEA08EB382D69 * ((8 * *v75 + 8) ^ v23);
        v25 = 0x9DDFEA08EB382D69
            * ((0x9DDFEA08EB382D69 * (v23 ^ (v24 >> 47) ^ v24)) ^ ((0x9DDFEA08EB382D69 * (v23 ^ (v24 >> 47) ^ v24)) >> 47));
        if (v12)
        {
          v26 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
          v26.i16[0] = vaddlv_u8(v26);
          if (v26.u32[0] > 1uLL)
          {
            v4 = 0x9DDFEA08EB382D69
               * ((0x9DDFEA08EB382D69 * (v23 ^ (v24 >> 47) ^ v24)) ^ ((0x9DDFEA08EB382D69 * (v23 ^ (v24 >> 47) ^ v24)) >> 47));
            if (v25 >= v12)
              v4 = v25 % v12;
          }
          else
          {
            v4 = v25 & (v12 - 1);
          }
          v27 = *(void ***)(*(_QWORD *)v10 + 8 * v4);
          if (v27)
          {
            v28 = *v27;
            if (*v27)
            {
              if (v26.u32[0] < 2uLL)
              {
                while (1)
                {
                  v30 = v28[1];
                  if (v30 == v25)
                  {
                    if ((const char *)v28[2] == v22)
                      goto LABEL_36;
                  }
                  else if ((v30 & (v12 - 1)) != v4)
                  {
                    goto LABEL_37;
                  }
                  v28 = (_QWORD *)*v28;
                  if (!v28)
                    goto LABEL_37;
                }
              }
              do
              {
                v29 = v28[1];
                if (v29 == v25)
                {
                  if ((const char *)v28[2] == v22)
                  {
LABEL_36:
                    v31 = a4;
                    goto LABEL_97;
                  }
                }
                else
                {
                  if (v29 >= v12)
                    v29 %= v12;
                  if (v29 != v4)
                    break;
                }
                v28 = (_QWORD *)*v28;
              }
              while (v28);
            }
          }
        }
LABEL_37:
        v28 = operator new(0x20uLL);
        *v28 = 0;
        v28[1] = v25;
        v28[2] = *v75;
        *((_DWORD *)v28 + 6) = 0;
        v32 = (float)(unint64_t)(v13 + 1);
        v33 = *(float *)(v10 + 32);
        if (!v12 || (float)(v33 * (float)v12) < v32)
          break;
LABEL_87:
        v54 = *(_QWORD **)v10;
        v55 = *(_QWORD **)(*(_QWORD *)v10 + 8 * v4);
        if (v55)
        {
          *v28 = *v55;
          v31 = a4;
LABEL_95:
          *v55 = v28;
          goto LABEL_96;
        }
        *v28 = *v73;
        *v73 = v28;
        v54[v4] = v73;
        v31 = a4;
        if (*v28)
        {
          v56 = *(_QWORD *)(*v28 + 8);
          if ((v12 & (v12 - 1)) != 0)
          {
            if (v56 >= v12)
              v56 %= v12;
          }
          else
          {
            v56 &= v12 - 1;
          }
          v55 = (_QWORD *)(*(_QWORD *)v10 + 8 * v56);
          goto LABEL_95;
        }
LABEL_96:
        v13 = *(_QWORD *)(v10 + 24) + 1;
        *(_QWORD *)(v10 + 24) = v13;
LABEL_97:
        *((_DWORD *)v28 + 6) = -858993459 * ((unint64_t)(v17 - v74) >> 3);
        v57 = *(_DWORD *)(v17 + 24);
        v59 = v31 == -1 || v57 == v31;
        if (v57 < 1 || !v59)
          goto LABEL_128;
        v61 = *(_DWORD *)(v17 + 28);
        if (v61 < 1)
          goto LABEL_128;
        v62 = *((__int16 *)v75 + 4);
        if (v62 != -1 && v61 != v62)
          goto LABEL_128;
        v63 = *(_DWORD *)(v17 + 32);
        if (v63 < 1)
          goto LABEL_128;
        v64 = *((__int16 *)v75 + 5);
        if (v64 != -1 && v63 != v64)
          goto LABEL_128;
        v65 = *(_DWORD *)(v17 + 36);
        if (v65 < 1)
          goto LABEL_128;
        v66 = *((__int16 *)v75 + 6);
        if (v66 != -1 && v65 != v66)
          goto LABEL_128;
        if (++v14 == (const char ***)v71)
          goto LABEL_133;
      }
      v34 = (v12 & (v12 - 1)) != 0;
      if (v12 < 3)
        v34 = 1;
      v35 = v34 | (2 * v12);
      v36 = vcvtps_u32_f32(v32 / v33);
      if (v35 <= v36)
        prime = v36;
      else
        prime = v35;
      if (prime == 1)
      {
        prime = 2;
      }
      else if ((prime & (prime - 1)) != 0)
      {
        prime = std::__next_prime(prime);
        v12 = *(_QWORD *)(v10 + 8);
      }
      if (prime <= v12)
      {
        if (prime >= v12)
          goto LABEL_74;
        v48 = vcvtps_u32_f32((float)*(unint64_t *)(v10 + 24) / *(float *)(v10 + 32));
        if (v12 < 3 || (v49 = (uint8x8_t)vcnt_s8((int8x8_t)v12), v49.i16[0] = vaddlv_u8(v49), v49.u32[0] > 1uLL))
        {
          v48 = std::__next_prime(v48);
        }
        else
        {
          v50 = 1 << -(char)__clz(v48 - 1);
          if (v48 >= 2)
            v48 = v50;
        }
        if (prime <= v48)
          prime = v48;
        if (prime >= v12)
        {
          v12 = *(_QWORD *)(v10 + 8);
LABEL_74:
          if ((v12 & (v12 - 1)) != 0)
          {
            if (v25 >= v12)
              v4 = v25 % v12;
            else
              v4 = v25;
          }
          else
          {
            v4 = (v12 - 1) & v25;
          }
          goto LABEL_87;
        }
        if (!prime)
        {
          v67 = *(_QWORD **)v10;
          *(_QWORD *)v10 = 0;
          if (v67)
            operator delete(v67);
          v12 = 0;
          *(_QWORD *)(v10 + 8) = 0;
          goto LABEL_74;
        }
      }
      if (prime >> 61)
        sub_1C9899D30();
      v38 = operator new(8 * prime);
      v39 = *(_QWORD **)v10;
      *(_QWORD *)v10 = v38;
      if (v39)
        operator delete(v39);
      v40 = 0;
      *(_QWORD *)(v10 + 8) = prime;
      do
        *(_QWORD *)(*(_QWORD *)v10 + 8 * v40++) = 0;
      while (prime != v40);
      v41 = *v73;
      if (!*v73)
      {
LABEL_73:
        v12 = prime;
        goto LABEL_74;
      }
      v42 = v41[1];
      v43 = prime - 1;
      if ((prime & (prime - 1)) == 0)
      {
        v44 = v42 & v43;
        *(_QWORD *)(*(_QWORD *)v10 + 8 * v44) = v73;
        for (i = (_QWORD *)*v41; *v41; i = (_QWORD *)*v41)
        {
          v46 = i[1] & v43;
          if (v46 == v44)
          {
            v41 = i;
          }
          else if (*(_QWORD *)(*(_QWORD *)v10 + 8 * v46))
          {
            *v41 = *i;
            v47 = 8 * v46;
            *i = **(_QWORD **)(*(_QWORD *)v10 + v47);
            **(_QWORD **)(*(_QWORD *)v10 + v47) = i;
          }
          else
          {
            *(_QWORD *)(*(_QWORD *)v10 + 8 * v46) = v41;
            v41 = i;
            v44 = v46;
          }
        }
        goto LABEL_73;
      }
      if (v42 >= prime)
        v42 %= prime;
      *(_QWORD *)(*(_QWORD *)v10 + 8 * v42) = v73;
      v51 = (_QWORD *)*v41;
      if (!*v41)
        goto LABEL_73;
      while (1)
      {
        v53 = v51[1];
        if (v53 >= prime)
          v53 %= prime;
        if (v53 != v42)
        {
          if (!*(_QWORD *)(*(_QWORD *)v10 + 8 * v53))
          {
            *(_QWORD *)(*(_QWORD *)v10 + 8 * v53) = v41;
            goto LABEL_78;
          }
          *v41 = *v51;
          v52 = 8 * v53;
          *v51 = **(_QWORD **)(*(_QWORD *)v10 + v52);
          **(_QWORD **)(*(_QWORD *)v10 + v52) = v51;
          v51 = v41;
        }
        v53 = v42;
LABEL_78:
        v41 = v51;
        v51 = (_QWORD *)*v51;
        v42 = v53;
        if (!v51)
          goto LABEL_73;
      }
    }
LABEL_133:
    *a1 = v10;
  }
}

void sub_1C9906D14()
{
  JUMPOUT(0x1CAA44AFCLL);
}

uint64_t sub_1C9906D28(uint64_t a1, __CVBuffer *a2, uint64_t a3)
{
  id v5;
  void *v6;
  void *v7;
  char v8;
  void *v9;
  int Width;
  int Height;
  uint64_t v12;
  int v13;
  int v14;
  _DWORD *v15;
  _BYTE *v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  float v26;
  float v27;
  void *v28;
  void *v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  void *v38;
  float v39;
  float v40;
  void *v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  __int128 v48;
  float v49;
  float v50;
  unint64_t v51;
  _DWORD *v52;
  _DWORD *v53;
  _DWORD *v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  char *v59;
  char *v60;
  uint64_t v61;
  char *v62;
  __int128 v63;
  char *v64;
  char *v65;
  void *context;
  id v68;
  void *v69;
  __int128 v70;
  void *v71;
  id v72;
  _QWORD v73[2];

  v73[1] = *MEMORY[0x1E0C80C00];
  context = (void *)MEMORY[0x1CAA45030]();
  v5 = objc_alloc(MEMORY[0x1E0CEDF70]);
  v69 = (void *)objc_msgSend(v5, "initWithCVPixelBuffer:options:", a2, MEMORY[0x1E0C9AA70]);
  v6 = (void *)objc_opt_new();
  v71 = v6;
  objc_msgSend(v6, "setRevision:error:", 3737841664, 0);
  v73[0] = v6;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v73, 1);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v72 = 0;
  v8 = objc_msgSend(v69, "performRequests:error:", v7, &v72);
  v68 = v72;

  if ((v8 & 1) != 0)
  {
    objc_msgSend(v6, "results");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    if (v9)
    {
      Width = CVPixelBufferGetWidth(a2);
      Height = CVPixelBufferGetHeight(a2);
      v12 = objc_msgSend(v9, "count");
      v13 = v12;
      v14 = v12;
      v15 = *(_DWORD **)a3;
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a3 + 16) - *(_QWORD *)a3) >> 4) < (int)v12)
      {
        if (v12 << 32 < 0)
          abort();
        v16 = *(_BYTE **)(a3 + 8);
        v17 = (char *)operator new(48 * (int)v12);
        v18 = &v17[v16 - (_BYTE *)v15];
        v19 = v18;
        if (v16 != (_BYTE *)v15)
        {
          v20 = 0;
          do
          {
            v21 = &v18[v20];
            *((_DWORD *)v21 - 12) = *(_DWORD *)&v16[v20 - 48];
            *(_QWORD *)(v21 - 44) = *(_QWORD *)&v16[v20 - 44];
            *(_QWORD *)(v21 - 36) = *(_QWORD *)&v16[v20 - 36];
            v22 = *(_OWORD *)&v16[v20 - 28];
            *((_OWORD *)v21 - 1) = *(_OWORD *)&v16[v20 - 16];
            *(_OWORD *)(v21 - 28) = v22;
            v20 -= 48;
          }
          while (&v16[v20] != (_BYTE *)v15);
          v19 = &v18[v20];
        }
        *(_QWORD *)a3 = v19;
        *(_QWORD *)(a3 + 8) = v18;
        *(_QWORD *)(a3 + 16) = &v17[48 * v14];
        if (v15)
          operator delete(v15);
      }
      v23 = 1;
      if (v13 < 1)
      {
        v6 = v71;
      }
      else
      {
        v24 = 0;
        v25 = v13;
        v26 = (float)Width;
        v27 = (float)Height;
        v6 = v71;
        while (1)
        {
          objc_msgSend(v9, "objectAtIndexedSubscript:", v24);
          v28 = (void *)objc_claimAutoreleasedReturnValue();
          v29 = v28;
          if (!v28)
            break;
          objc_msgSend(v28, "boundingBox");
          v31 = v30;
          v33 = v32;
          v35 = v34;
          v37 = v36;
          objc_msgSend(v29, "roll");
          v38 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v38, "floatValue");
          v40 = v39;

          objc_msgSend(v29, "yaw");
          v41 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v41, "floatValue");
          v43 = v42;

          v44 = v31;
          v45 = v33 + v37;
          v46 = v35;
          v47 = v37;
          *(float *)&v48 = (float)(v44 * v26) + -0.5;
          *((float *)&v48 + 1) = (float)((float)(1.0 - v45) * v27) + -0.5;
          *((float *)&v48 + 2) = v46 * v26;
          *((float *)&v48 + 3) = v47 * v27;
          v49 = v40 / -0.017453;
          v50 = v43 / 0.017453;
          v52 = *(_DWORD **)(a3 + 8);
          v51 = *(_QWORD *)(a3 + 16);
          if ((unint64_t)v52 >= v51)
          {
            v54 = *(_DWORD **)a3;
            v55 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v52 - *(_QWORD *)a3) >> 4);
            v56 = v55 + 1;
            if (v55 + 1 > 0x555555555555555)
              abort();
            v70 = v48;
            v57 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v51 - (_QWORD)v54) >> 4);
            if (2 * v57 > v56)
              v56 = 2 * v57;
            if (v57 >= 0x2AAAAAAAAAAAAAALL)
              v58 = 0x555555555555555;
            else
              v58 = v56;
            if (v58 > 0x555555555555555)
              sub_1C9899D30();
            v59 = (char *)operator new(48 * v58);
            v60 = &v59[48 * v55];
            *(_DWORD *)v60 = 5;
            *(_OWORD *)(v60 + 4) = v70;
            *((float *)v60 + 5) = v49;
            v60[24] = 1;
            *((float *)v60 + 7) = v50;
            v60[32] = 1;
            *((_QWORD *)v60 + 5) = v24;
            if (v52 == v54)
            {
              v64 = &v59[48 * v55];
            }
            else
            {
              v61 = 0;
              do
              {
                v62 = &v60[v61 * 4];
                *((_DWORD *)v62 - 12) = v52[v61 - 12];
                *(_QWORD *)(v62 - 44) = *(_QWORD *)&v52[v61 - 11];
                *(_QWORD *)(v62 - 36) = *(_QWORD *)&v52[v61 - 9];
                v63 = *(_OWORD *)&v52[v61 - 7];
                *((_OWORD *)v62 - 1) = *(_OWORD *)&v52[v61 - 4];
                *(_OWORD *)(v62 - 28) = v63;
                v61 -= 12;
              }
              while (&v52[v61] != v54);
              v64 = &v60[v61 * 4];
              v52 = *(_DWORD **)a3;
            }
            v65 = &v59[48 * v58];
            v53 = v60 + 48;
            *(_QWORD *)a3 = v64;
            *(_QWORD *)(a3 + 8) = v60 + 48;
            *(_QWORD *)(a3 + 16) = v65;
            if (v52)
              operator delete(v52);
          }
          else
          {
            *v52 = 5;
            *(_OWORD *)(v52 + 1) = v48;
            *((float *)v52 + 5) = v49;
            *((_BYTE *)v52 + 24) = 1;
            *((float *)v52 + 7) = v50;
            *((_BYTE *)v52 + 32) = 1;
            v53 = v52 + 12;
            *((_QWORD *)v52 + 5) = v24;
          }
          *(_QWORD *)(a3 + 8) = v53;

          v6 = v71;
          if (++v24 == v25)
            goto LABEL_31;
        }
        v23 = 0;
      }
    }
    else
    {
LABEL_31:
      v23 = 1;
    }

  }
  else
  {
    v23 = 0;
  }

  objc_autoreleasePoolPop(context);
  return v23;
}

void sub_1C9907210(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, uint64_t a13, uint64_t a14, void *a15)
{
  void *v15;

  _Unwind_Resume(a1);
}

_QWORD *sub_1C99072C4(_QWORD *result)
{
  unsigned __int8 v1;
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;
  int v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;

  v1 = atomic_load((unsigned __int8 *)&qword_1EF921378);
  if ((v1 & 1) == 0)
  {
    v9 = result;
    v5 = __cxa_guard_acquire(&qword_1EF921378);
    result = v9;
    if (v5)
    {
      v6 = (_QWORD *)operator new();
      v7 = operator new();
      *(_WORD *)v7 = 257;
      *(_QWORD *)(v7 + 8) = 850045863;
      *(_OWORD *)(v7 + 16) = 0u;
      *(_OWORD *)(v7 + 32) = 0u;
      *(_OWORD *)(v7 + 48) = 0u;
      *(_OWORD *)(v7 + 64) = 0u;
      *v6 = v7;
      qword_1EF921368 = (uint64_t)v6;
      v8 = (_QWORD *)operator new();
      *v8 = &off_1E82960F8;
      v8[1] = 0;
      v8[2] = 0;
      v8[3] = v6;
      qword_1EF921370 = (uint64_t)v8;
      __cxa_guard_release(&qword_1EF921378);
      result = v9;
    }
  }
  v2 = qword_1EF921370;
  *result = qword_1EF921368;
  result[1] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void sub_1C99073E8(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1CAA44AFCLL);
}

uint64_t sub_1C990740C(uint64_t result)
{
  uint64_t *v1;
  uint64_t v2;
  FILE *v3;

  v1 = *(uint64_t **)(result + 24);
  if (v1)
  {
    v2 = *v1;
    if (*v1)
    {
      v3 = *(FILE **)(v2 + 72);
      if (v3)
        fclose(v3);
      *(_QWORD *)(v2 + 72) = 0;
      std::mutex::~mutex((std::mutex *)(v2 + 8));
      MEMORY[0x1CAA44AFC](v2, 0x1020C4086060DB6);
    }
    JUMPOUT(0x1CAA44AFCLL);
  }
  return result;
}

uint64_t sub_1C9907488(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  std::ios_base *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::ios_base *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  size_t v16;
  void *v17;
  uint64_t *v18;
  unint64_t v19;
  const void **v20;
  const void *v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD v36[2];
  uint64_t v37;
  uint64_t v38[8];
  void *v39[2];
  __int128 v40;
  int v41;
  uint64_t v42[19];
  _QWORD v43[2];
  uint64_t v44;
  _QWORD v45[2];
  _QWORD v46[3];
  uint64_t v47;
  unint64_t v48;
  __int128 __p;
  __int128 v50;
  int v51;
  uint64_t v52[20];

  v2 = MEMORY[0x1E0DE4FD0] + 104;
  v42[0] = MEMORY[0x1E0DE4FD0] + 104;
  v3 = MEMORY[0x1E0DE4FD0] + 64;
  v4 = (_QWORD *)MEMORY[0x1E0DE4F50];
  v6 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 16);
  v5 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 24);
  v37 = MEMORY[0x1E0DE4FD0] + 64;
  v36[0] = v6;
  *(_QWORD *)((char *)v36 + *(_QWORD *)(v6 - 24)) = v5;
  v36[1] = 0;
  v7 = (std::ios_base *)((char *)v36 + *(_QWORD *)(v36[0] - 24));
  std::ios_base::init(v7, v38);
  v7[1].__vftable = 0;
  v7[1].__fmtflags_ = -1;
  v8 = v4[4];
  v33 = v4[5];
  v37 = v8;
  *(uint64_t *)((char *)&v38[-1] + *(_QWORD *)(v8 - 24)) = v33;
  v9 = v4[1];
  v36[0] = v9;
  v32 = v4[6];
  *(_QWORD *)((char *)v36 + *(_QWORD *)(v9 - 24)) = v32;
  v10 = MEMORY[0x1E0DE4FD0] + 24;
  v42[0] = v2;
  v36[0] = MEMORY[0x1E0DE4FD0] + 24;
  v37 = v3;
  std::streambuf::basic_streambuf();
  v11 = MEMORY[0x1E0DE4FB8] + 16;
  v38[0] = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)v39 = 0u;
  v40 = 0u;
  v41 = 24;
  v31 = *(int *)((char *)&v36[2] + *(_QWORD *)(v36[0] - 24));
  v52[0] = v2;
  v44 = v3;
  v43[0] = v6;
  *(_QWORD *)((char *)v43 + *(_QWORD *)(v6 - 24)) = v5;
  v43[1] = 0;
  v12 = (std::ios_base *)((char *)v43 + *(_QWORD *)(v43[0] - 24));
  std::ios_base::init(v12, v45);
  v12[1].__vftable = 0;
  v12[1].__fmtflags_ = -1;
  *(_QWORD *)((char *)&v45[-1] + *(_QWORD *)(v8 - 24)) = v33;
  *(_QWORD *)((char *)v43 + *(_QWORD *)(v9 - 24)) = v32;
  v52[0] = v2;
  v43[0] = v10;
  v44 = v3;
  std::streambuf::basic_streambuf();
  v45[0] = v11;
  v50 = 0u;
  __p = 0u;
  v51 = 24;
  *(_QWORD *)((char *)&v45[1] + *(_QWORD *)(v44 - 24)) = v31;
  v13 = *(char *)(a2 + 23);
  if (v13 >= 0)
    v14 = a2;
  else
    v14 = *(_QWORD *)a2;
  if (v13 >= 0)
    v15 = *(unsigned __int8 *)(a2 + 23);
  else
    v15 = *(_QWORD *)(a2 + 8);
  sub_1C98D260C(&v44, v14, v15);
  if ((v51 & 0x10) != 0)
  {
    v19 = *((_QWORD *)&v50 + 1);
    if (*((_QWORD *)&v50 + 1) < v48)
    {
      *((_QWORD *)&v50 + 1) = v48;
      v19 = v48;
    }
    v20 = (const void **)&v47;
  }
  else
  {
    if ((v51 & 8) == 0)
    {
      v16 = 0;
      v17 = a1;
      *((_BYTE *)a1 + 23) = 0;
      v18 = (uint64_t *)MEMORY[0x1E0DE4F50];
      goto LABEL_22;
    }
    v20 = (const void **)v46;
    v19 = v46[2];
  }
  v18 = (uint64_t *)MEMORY[0x1E0DE4F50];
  v17 = a1;
  v21 = *v20;
  v16 = v19 - (_QWORD)*v20;
  if (v16 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  if (v16 >= 0x17)
  {
    v22 = (v16 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v16 | 7) != 0x17)
      v22 = v16 | 7;
    v23 = v22 + 1;
    v24 = operator new(v22 + 1);
    a1[1] = v16;
    a1[2] = v23 | 0x8000000000000000;
    *a1 = v24;
    v17 = v24;
    goto LABEL_21;
  }
  *((_BYTE *)a1 + 23) = v16;
  if (v16)
LABEL_21:
    memmove(v17, v21, v16);
LABEL_22:
  v25 = MEMORY[0x1E0DE4FB8];
  *((_BYTE *)v17 + v16) = 0;
  v26 = *v18;
  v43[0] = v26;
  v27 = v18[8];
  v28 = v18[9];
  *(_QWORD *)((char *)v43 + *(_QWORD *)(v26 - 24)) = v27;
  v29 = v25 + 16;
  v44 = v28;
  v45[0] = v25 + 16;
  if (SBYTE7(v50) < 0)
    operator delete((void *)__p);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x1CAA44AB4](v52);
  v36[0] = v26;
  *(_QWORD *)((char *)v36 + *(_QWORD *)(v26 - 24)) = v27;
  v37 = v28;
  v38[0] = v29;
  if (SBYTE7(v40) < 0)
    operator delete(v39[0]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1CAA44AB4](v42);
}

uint64_t sub_1C99077FC(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  std::ios_base *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  std::ios_base *v11;
  size_t v12;
  void *v13;
  uint64_t *v14;
  unint64_t v15;
  const void **v16;
  const void *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD v31[2];
  uint64_t v32;
  uint64_t v33[8];
  void *v34[2];
  __int128 v35;
  int v36;
  uint64_t v37[19];
  _QWORD v38[2];
  uint64_t v39;
  _QWORD v40[2];
  _QWORD v41[3];
  uint64_t v42;
  unint64_t v43;
  __int128 __p;
  __int128 v45;
  int v46;
  uint64_t v47[20];

  v1 = MEMORY[0x1E0DE4FD0] + 104;
  v37[0] = MEMORY[0x1E0DE4FD0] + 104;
  v2 = MEMORY[0x1E0DE4FD0] + 64;
  v3 = (_QWORD *)MEMORY[0x1E0DE4F50];
  v4 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 16);
  v5 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 24);
  v32 = MEMORY[0x1E0DE4FD0] + 64;
  v31[0] = v4;
  *(_QWORD *)((char *)v31 + *(_QWORD *)(v4 - 24)) = v5;
  v31[1] = 0;
  v6 = (std::ios_base *)((char *)v31 + *(_QWORD *)(v31[0] - 24));
  std::ios_base::init(v6, v33);
  v6[1].__vftable = 0;
  v6[1].__fmtflags_ = -1;
  v7 = v3[4];
  v29 = v3[5];
  v32 = v7;
  *(uint64_t *)((char *)&v33[-1] + *(_QWORD *)(v7 - 24)) = v29;
  v8 = v3[1];
  v31[0] = v8;
  v28 = v3[6];
  *(_QWORD *)((char *)v31 + *(_QWORD *)(v8 - 24)) = v28;
  v9 = MEMORY[0x1E0DE4FD0] + 24;
  v37[0] = v1;
  v31[0] = MEMORY[0x1E0DE4FD0] + 24;
  v32 = v2;
  std::streambuf::basic_streambuf();
  v10 = MEMORY[0x1E0DE4FB8] + 16;
  v33[0] = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)v34 = 0u;
  v35 = 0u;
  v36 = 24;
  v27 = *(int *)((char *)&v31[2] + *(_QWORD *)(v31[0] - 24));
  v47[0] = v1;
  v39 = v2;
  v38[0] = v4;
  *(_QWORD *)((char *)v38 + *(_QWORD *)(v4 - 24)) = v5;
  v38[1] = 0;
  v11 = (std::ios_base *)((char *)v38 + *(_QWORD *)(v38[0] - 24));
  std::ios_base::init(v11, v40);
  v11[1].__vftable = 0;
  v11[1].__fmtflags_ = -1;
  *(_QWORD *)((char *)&v40[-1] + *(_QWORD *)(v7 - 24)) = v29;
  *(_QWORD *)((char *)v38 + *(_QWORD *)(v8 - 24)) = v28;
  v47[0] = v1;
  v38[0] = v9;
  v39 = v2;
  std::streambuf::basic_streambuf();
  v40[0] = v10;
  v45 = 0u;
  __p = 0u;
  v46 = 24;
  *(_QWORD *)((char *)&v40[1] + *(_QWORD *)(v39 - 24)) = v27;
  sub_1C98D260C(&v39, (uint64_t)": ", 2);
  if ((v46 & 0x10) != 0)
  {
    v15 = *((_QWORD *)&v45 + 1);
    if (*((_QWORD *)&v45 + 1) < v43)
    {
      *((_QWORD *)&v45 + 1) = v43;
      v15 = v43;
    }
    v16 = (const void **)&v42;
  }
  else
  {
    if ((v46 & 8) == 0)
    {
      v12 = 0;
      v13 = a1;
      *((_BYTE *)a1 + 23) = 0;
      v14 = (uint64_t *)MEMORY[0x1E0DE4F50];
      goto LABEL_16;
    }
    v16 = (const void **)v41;
    v15 = v41[2];
  }
  v14 = (uint64_t *)MEMORY[0x1E0DE4F50];
  v13 = a1;
  v17 = *v16;
  v12 = v15 - (_QWORD)*v16;
  if (v12 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  if (v12 >= 0x17)
  {
    v18 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v12 | 7) != 0x17)
      v18 = v12 | 7;
    v19 = v18 + 1;
    v20 = operator new(v18 + 1);
    a1[1] = v12;
    a1[2] = v19 | 0x8000000000000000;
    *a1 = v20;
    v13 = v20;
    goto LABEL_15;
  }
  *((_BYTE *)a1 + 23) = v12;
  if (v12)
LABEL_15:
    memmove(v13, v17, v12);
LABEL_16:
  v21 = MEMORY[0x1E0DE4FB8];
  *((_BYTE *)v13 + v12) = 0;
  v22 = *v14;
  v38[0] = v22;
  v23 = v14[8];
  v24 = v14[9];
  *(_QWORD *)((char *)v38 + *(_QWORD *)(v22 - 24)) = v23;
  v25 = v21 + 16;
  v39 = v24;
  v40[0] = v21 + 16;
  if (SBYTE7(v45) < 0)
    operator delete((void *)__p);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x1CAA44AB4](v47);
  v31[0] = v22;
  *(_QWORD *)((char *)v31 + *(_QWORD *)(v22 - 24)) = v23;
  v32 = v24;
  v33[0] = v25;
  if (SBYTE7(v35) < 0)
    operator delete(v34[0]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1CAA44AB4](v37);
}

uint64_t sub_1C9907B60(_QWORD *a1, const char *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  std::ios_base *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::ios_base *v12;
  size_t v13;
  size_t v14;
  void *v15;
  uint64_t *v16;
  unint64_t v17;
  const void **v18;
  const void *v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD v34[2];
  uint64_t v35;
  uint64_t v36[8];
  void *v37[2];
  __int128 v38;
  int v39;
  uint64_t v40[19];
  _QWORD v41[2];
  uint64_t v42;
  _QWORD v43[2];
  _QWORD v44[3];
  uint64_t v45;
  unint64_t v46;
  __int128 __p;
  __int128 v48;
  int v49;
  uint64_t v50[20];

  v2 = MEMORY[0x1E0DE4FD0];
  v3 = MEMORY[0x1E0DE4FD0] + 104;
  v40[0] = MEMORY[0x1E0DE4FD0] + 104;
  v4 = MEMORY[0x1E0DE4FD0] + 64;
  v5 = (_QWORD *)MEMORY[0x1E0DE4F50];
  v7 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 16);
  v6 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 24);
  v35 = MEMORY[0x1E0DE4FD0] + 64;
  v34[0] = v7;
  *(_QWORD *)((char *)v34 + *(_QWORD *)(v7 - 24)) = v6;
  v34[1] = 0;
  v8 = (std::ios_base *)((char *)v34 + *(_QWORD *)(v34[0] - 24));
  std::ios_base::init(v8, v36);
  v8[1].__vftable = 0;
  v8[1].__fmtflags_ = -1;
  v9 = v5[4];
  v31 = v5[5];
  v35 = v9;
  *(uint64_t *)((char *)&v36[-1] + *(_QWORD *)(v9 - 24)) = v31;
  v10 = v5[1];
  v34[0] = v10;
  v30 = v5[6];
  *(_QWORD *)((char *)v34 + *(_QWORD *)(v10 - 24)) = v30;
  v40[0] = v3;
  v34[0] = v2 + 24;
  v35 = v4;
  std::streambuf::basic_streambuf();
  v11 = MEMORY[0x1E0DE4FB8] + 16;
  v36[0] = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)v37 = 0u;
  v38 = 0u;
  v39 = 24;
  v29 = *(int *)((char *)&v34[2] + *(_QWORD *)(v34[0] - 24));
  v50[0] = v3;
  v42 = v4;
  v41[0] = v7;
  *(_QWORD *)((char *)v41 + *(_QWORD *)(v7 - 24)) = v6;
  v41[1] = 0;
  v12 = (std::ios_base *)((char *)v41 + *(_QWORD *)(v41[0] - 24));
  std::ios_base::init(v12, v43);
  v12[1].__vftable = 0;
  v12[1].__fmtflags_ = -1;
  *(_QWORD *)((char *)&v43[-1] + *(_QWORD *)(v9 - 24)) = v31;
  *(_QWORD *)((char *)v41 + *(_QWORD *)(v10 - 24)) = v30;
  v50[0] = v3;
  v41[0] = v2 + 24;
  v42 = v4;
  std::streambuf::basic_streambuf();
  v43[0] = v11;
  v48 = 0u;
  __p = 0u;
  v49 = 24;
  *(_QWORD *)((char *)&v43[1] + *(_QWORD *)(v42 - 24)) = v29;
  v13 = strlen(a2);
  sub_1C98D260C(&v42, (uint64_t)a2, v13);
  if ((v49 & 0x10) != 0)
  {
    v17 = *((_QWORD *)&v48 + 1);
    if (*((_QWORD *)&v48 + 1) < v46)
    {
      *((_QWORD *)&v48 + 1) = v46;
      v17 = v46;
    }
    v18 = (const void **)&v45;
  }
  else
  {
    if ((v49 & 8) == 0)
    {
      v14 = 0;
      v15 = a1;
      *((_BYTE *)a1 + 23) = 0;
      v16 = (uint64_t *)MEMORY[0x1E0DE4F50];
      goto LABEL_16;
    }
    v18 = (const void **)v44;
    v17 = v44[2];
  }
  v16 = (uint64_t *)MEMORY[0x1E0DE4F50];
  v15 = a1;
  v19 = *v18;
  v14 = v17 - (_QWORD)*v18;
  if (v14 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  if (v14 >= 0x17)
  {
    v20 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v14 | 7) != 0x17)
      v20 = v14 | 7;
    v21 = v20 + 1;
    v22 = operator new(v20 + 1);
    a1[1] = v14;
    a1[2] = v21 | 0x8000000000000000;
    *a1 = v22;
    v15 = v22;
    goto LABEL_15;
  }
  *((_BYTE *)a1 + 23) = v14;
  if (v14)
LABEL_15:
    memmove(v15, v19, v14);
LABEL_16:
  v23 = MEMORY[0x1E0DE4FB8];
  *((_BYTE *)v15 + v14) = 0;
  v24 = *v16;
  v41[0] = v24;
  v25 = v16[8];
  v26 = v16[9];
  *(_QWORD *)((char *)v41 + *(_QWORD *)(v24 - 24)) = v25;
  v27 = v23 + 16;
  v42 = v26;
  v43[0] = v23 + 16;
  if (SBYTE7(v48) < 0)
    operator delete((void *)__p);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x1CAA44AB4](v50);
  v34[0] = v24;
  *(_QWORD *)((char *)v34 + *(_QWORD *)(v24 - 24)) = v25;
  v35 = v26;
  v36[0] = v27;
  if (SBYTE7(v38) < 0)
    operator delete(v37[0]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1CAA44AB4](v40);
}

_QWORD *sub_1C9907EC4(_QWORD *a1, _QWORD *a2, uint64_t a3, uint64_t a4, const char *a5, char *a6, uint64_t a7, const char *a8, char a9)
{
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  std::ios_base *v20;
  int v21;
  std::string::size_type *v22;
  std::chrono::system_clock::time_point v23;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v24;
  size_t v25;
  std::string *v26;
  size_t v27;
  const char *v28;
  BOOL v29;
  std::string::size_type v30;
  std::string::size_type size;
  std::string *v32;
  std::string::size_type v33;
  _QWORD *v34;
  std::string *v35;
  tm *v36;
  std::string::size_type tm_year_high;
  tm *v38;
  uint64_t v39;
  tm *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  std::string::size_type v44;
  std::ios_base *v45;
  std::string::size_type v46;
  std::string::size_type v47;
  std::string::size_type v48;
  std::string::size_type v49;
  std::ios_base *v50;
  size_t v51;
  char *v52;
  size_t v53;
  void *p_dst;
  unint64_t v55;
  uint64_t *p_tm_gmtoff;
  const void *v57;
  uint64_t v58;
  uint64_t v59;
  std::string::size_type v60;
  std::string::size_type v61;
  std::string::size_type v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  tm *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  std::string::size_type v70;
  time_t v71;
  std::ios_base *v72;
  uint64_t v73;
  std::ios_base *v74;
  size_t v75;
  size_t v76;
  void *p_t;
  _QWORD *v78;
  unint64_t v79;
  const void **v80;
  const void *v81;
  uint64_t v82;
  uint64_t v83;
  time_t v84;
  std::string::size_type v85;
  std::string::size_type v86;
  uint64_t v87;
  uint64_t rep;
  uint64_t v89;
  size_t v90;
  size_t v91;
  void *v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  _BYTE *v96;
  size_t v97;
  int v98;
  uint64_t v99;
  uint64_t v100;
  std::ios_base *v101;
  uint64_t v102;
  std::string::size_type v103;
  std::string::size_type v104;
  time_t v105;
  std::string::size_type v106;
  std::ios_base *v107;
  size_t v108;
  void *v109;
  _QWORD *v110;
  std::string::size_type v111;
  unint64_t v112;
  const void **v113;
  const void *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  std::string *v120;
  std::string::size_type v121;
  std::string *v122;
  std::string::size_type v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  std::ios_base *v127;
  uint64_t v128;
  std::ios_base *v129;
  size_t v130;
  void *v131;
  unint64_t v132;
  const void **v133;
  const void *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  std::string *v140;
  std::string::size_type v141;
  std::string *v142;
  std::string::size_type v143;
  std::string::size_type v145;
  _QWORD *v146;
  time_t v147;
  time_t v149;
  const char *v150;
  char *v151;
  char *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  std::string::size_type v160;
  std::string::size_type v161;
  time_t v162;
  time_t v163;
  uint64_t v164;
  std::string::size_type v165;
  char *__sa;
  char *__sb;
  std::string::size_type v169;
  std::string::size_type v170;
  _QWORD *v171;
  void *v172;
  size_t v173;
  int64_t v174;
  char *v175;
  std::chrono::system_clock::time_point __t;
  size_t v177;
  int64_t v178;
  time_t __dst;
  size_t v180;
  int64_t v181;
  _QWORD v182[8];
  __int128 v183;
  __int128 v184;
  int v185;
  _QWORD v186[19];
  std::string v187;
  _QWORD v188[2];
  _BYTE v189[16];
  unint64_t v190;
  uint64_t v191;
  unint64_t v192;
  __int128 v193;
  __int128 v194;
  int v195;
  _QWORD v196[19];
  tm v197;
  unint64_t v198;
  uint64_t v199;
  unint64_t v200;
  __int128 __p;
  __int128 v202;
  int v203;
  _QWORD v204[50];

  v204[48] = *MEMORY[0x1E0C80C00];
  *a1 = *a2;
  v12 = a2[1];
  a1[1] = v12;
  if (v12)
  {
    v13 = (unint64_t *)(v12 + 16);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  v16 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v15 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  a1[2] = v16;
  v17 = a1 + 2;
  v18 = MEMORY[0x1E0DE4FE0];
  v19 = MEMORY[0x1E0DE4FE0] + 64;
  a1[16] = MEMORY[0x1E0DE4FE0] + 64;
  *(_QWORD *)((char *)a1 + *(_QWORD *)(v16 - 24) + 16) = v15;
  v20 = (std::ios_base *)((char *)a1 + *(_QWORD *)(a1[2] - 24) + 16);
  std::ios_base::init(v20, a1 + 3);
  v20[1].__vftable = 0;
  v20[1].__fmtflags_ = -1;
  *v17 = v18 + 24;
  v17[14] = v19;
  std::streambuf::basic_streambuf();
  v17[1] = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)(v17 + 9) = 0u;
  *(_OWORD *)(v17 + 11) = 0u;
  *((_DWORD *)v17 + 26) = 16;
  *((_BYTE *)v17 + 264) = 1;
  v21 = *(unsigned __int8 *)(*(_QWORD *)*a2 + 1);
  v22 = (std::string::size_type *)MEMORY[0x1E0DE4F50];
  v171 = v17;
  v151 = a6;
  v146 = a2;
  if (!v21)
  {
    v160 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 32);
    v162 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 8);
    __sa = *(char **)(MEMORY[0x1E0DE4F50] + 48);
    v169 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 40);
    goto LABEL_91;
  }
  v23.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
  if ((unint64_t)(v23.__d_.__rep_ % 1000000) <= 0xFFFFFFFFFFF0BDBFLL)
    v24 = v23.__d_.__rep_ % 1000000;
  else
    v24 = v23.__d_.__rep_ % 1000000 + 1000000;
  __t.__d_.__rep_ = v23.__d_.__rep_ - v24;
  __dst = std::chrono::system_clock::to_time_t(&__t);
  memset(&v187, 0, sizeof(v187));
  localtime_r(&__dst, &v197);
  v25 = 84;
  do
  {
    v30 = v25 | 1;
    if (SHIBYTE(v187.__r_.__value_.__r.__words[2]) < 0)
    {
      size = v187.__r_.__value_.__l.__size_;
      if (v187.__r_.__value_.__l.__size_ < v30)
      {
LABEL_9:
        std::string::append(&v187, v30 - size, 0);
        goto LABEL_10;
      }
      v32 = (std::string *)v187.__r_.__value_.__r.__words[0];
      v187.__r_.__value_.__l.__size_ = v25 | 1;
    }
    else
    {
      size = HIBYTE(v187.__r_.__value_.__r.__words[2]);
      if (v30 > HIBYTE(v187.__r_.__value_.__r.__words[2]))
        goto LABEL_9;
      *((_BYTE *)&v187.__r_.__value_.__s + 23) = v25 & 0x7C | 1;
      v32 = &v187;
    }
    v32->__r_.__value_.__s.__data_[v30] = 0;
LABEL_10:
    if ((v187.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v26 = &v187;
    else
      v26 = (std::string *)v187.__r_.__value_.__r.__words[0];
    v27 = strftime((char *)v26, v25, "%Y-%m-%d %H:%M:%S", &v197);
    v29 = v27 - 1 >= v25;
    v25 *= 2;
  }
  while (v29);
  if (SHIBYTE(v187.__r_.__value_.__r.__words[2]) < 0)
  {
    v33 = v187.__r_.__value_.__l.__size_;
    v34 = (_QWORD *)MEMORY[0x1E0DE4F50];
    if (v187.__r_.__value_.__l.__size_ < v27)
      goto LABEL_26;
    v35 = (std::string *)v187.__r_.__value_.__r.__words[0];
    v187.__r_.__value_.__l.__size_ = v27;
LABEL_28:
    v35->__r_.__value_.__s.__data_[v27] = 0;
  }
  else
  {
    v33 = HIBYTE(v187.__r_.__value_.__r.__words[2]);
    v34 = (_QWORD *)MEMORY[0x1E0DE4F50];
    if (v27 <= HIBYTE(v187.__r_.__value_.__r.__words[2]))
    {
      *((_BYTE *)&v187.__r_.__value_.__s + 23) = v27 & 0x7F;
      v35 = &v187;
      goto LABEL_28;
    }
LABEL_26:
    std::string::append(&v187, v27 - v33, 0);
  }
  cva::Sprintf::sprintf((cva::Sprintf *)".%06lld", v28, v24);
  if (v197.tm_year >= 0)
    v36 = &v197;
  else
    v36 = *(tm **)&v197.tm_sec;
  if (v197.tm_year >= 0)
    tm_year_high = HIBYTE(v197.tm_year);
  else
    tm_year_high = *(_QWORD *)&v197.tm_hour;
  std::string::append(&v187, (const std::string::value_type *)v36, tm_year_high);
  if (SHIBYTE(v197.tm_year) < 0)
    operator delete(*(void **)&v197.tm_sec);
  sub_1C9907488(&v197, (uint64_t)&v187);
  if (v197.tm_year >= 0)
    v38 = &v197;
  else
    v38 = *(tm **)&v197.tm_sec;
  if (v197.tm_year >= 0)
    v39 = HIBYTE(v197.tm_year);
  else
    v39 = *(_QWORD *)&v197.tm_hour;
  sub_1C98D260C(v17, (uint64_t)v38, v39);
  if (SHIBYTE(v197.tm_year) < 0)
  {
    operator delete(*(void **)&v197.tm_sec);
    if (SHIBYTE(v187.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_60;
  }
  else
  {
    if ((SHIBYTE(v187.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_45;
LABEL_60:
    operator delete(v187.__r_.__value_.__l.__data_);
  }
LABEL_45:
  v150 = a8;
  sub_1C99077FC(&v197);
  if (v197.tm_year >= 0)
    v40 = &v197;
  else
    v40 = *(tm **)&v197.tm_sec;
  if (v197.tm_year >= 0)
    v41 = HIBYTE(v197.tm_year);
  else
    v41 = *(_QWORD *)&v197.tm_hour;
  sub_1C98D260C(v17, (uint64_t)v40, v41);
  if (SHIBYTE(v197.tm_year) < 0)
    operator delete(*(void **)&v197.tm_sec);
  v42 = MEMORY[0x1E0DE4FD0] + 104;
  v196[0] = MEMORY[0x1E0DE4FD0] + 104;
  v43 = MEMORY[0x1E0DE4FD0] + 64;
  v44 = v34[2];
  v170 = v34[3];
  v187.__r_.__value_.__r.__words[2] = MEMORY[0x1E0DE4FD0] + 64;
  v187.__r_.__value_.__r.__words[0] = v44;
  *(std::string::size_type *)((char *)v187.__r_.__value_.__r.__words + *(_QWORD *)(v44 - 24)) = v170;
  v187.__r_.__value_.__l.__size_ = 0;
  v45 = (std::ios_base *)((char *)&v187 + *(_QWORD *)(v187.__r_.__value_.__r.__words[0] - 24));
  std::ios_base::init(v45, v188);
  v45[1].__vftable = 0;
  v45[1].__fmtflags_ = -1;
  v46 = v34[4];
  v47 = v34[5];
  v187.__r_.__value_.__r.__words[2] = v46;
  *(std::string::size_type *)((char *)&v187.__r_.__value_.__r.__words[2] + *(_QWORD *)(v46 - 24)) = v47;
  v48 = v34[1];
  v187.__r_.__value_.__r.__words[0] = v48;
  v49 = v34[6];
  *(std::string::size_type *)((char *)v187.__r_.__value_.__r.__words + *(_QWORD *)(v48 - 24)) = v49;
  v164 = MEMORY[0x1E0DE4FD0] + 24;
  v196[0] = v42;
  v187.__r_.__value_.__r.__words[0] = MEMORY[0x1E0DE4FD0] + 24;
  v187.__r_.__value_.__r.__words[2] = v43;
  std::streambuf::basic_streambuf();
  v157 = MEMORY[0x1E0DE4FB8] + 16;
  v188[0] = MEMORY[0x1E0DE4FB8] + 16;
  v193 = 0u;
  v194 = 0u;
  v195 = 24;
  v153 = *(int *)((char *)&v187.__r_.__value_.__r.__words[2] + *(_QWORD *)(v187.__r_.__value_.__r.__words[0] - 24));
  v204[0] = v42;
  *(_QWORD *)&v197.tm_mon = v43;
  *(_QWORD *)&v197.tm_sec = v44;
  *(_QWORD *)((char *)&v197.tm_sec + *(_QWORD *)(v44 - 24)) = v170;
  *(_QWORD *)&v197.tm_hour = 0;
  v50 = (std::ios_base *)((char *)&v197 + *(_QWORD *)(*(_QWORD *)&v197.tm_sec - 24));
  std::ios_base::init(v50, &v197.tm_wday);
  v50[1].__vftable = 0;
  v50[1].__fmtflags_ = -1;
  *(_QWORD *)&v197.tm_mon = v46;
  v169 = v47;
  *(_QWORD *)((char *)&v197.tm_mon + *(_QWORD *)(v46 - 24)) = v47;
  *(_QWORD *)&v197.tm_sec = v48;
  *(_QWORD *)((char *)&v197.tm_sec + *(_QWORD *)(v48 - 24)) = v49;
  v204[0] = v42;
  *(_QWORD *)&v197.tm_sec = v164;
  *(_QWORD *)&v197.tm_mon = v43;
  std::streambuf::basic_streambuf();
  *(_QWORD *)&v197.tm_wday = v157;
  v202 = 0u;
  __p = 0u;
  v203 = 24;
  *(_QWORD *)((char *)&v197.tm_isdst + *(_QWORD *)(*(_QWORD *)&v197.tm_mon - 24)) = v153;
  v51 = strlen(a5);
  sub_1C98D260C(&v197.tm_mon, (uint64_t)a5, v51);
  v160 = v46;
  v162 = v48;
  if ((v203 & 0x10) != 0)
  {
    v55 = *((_QWORD *)&v202 + 1);
    if (*((_QWORD *)&v202 + 1) < v200)
    {
      *((_QWORD *)&v202 + 1) = v200;
      v55 = v200;
    }
    p_tm_gmtoff = &v199;
  }
  else
  {
    if ((v203 & 8) == 0)
    {
      v52 = (char *)v49;
      v53 = 0;
      HIBYTE(v181) = 0;
      p_dst = &__dst;
      v22 = (std::string::size_type *)MEMORY[0x1E0DE4F50];
      goto LABEL_70;
    }
    p_tm_gmtoff = &v197.tm_gmtoff;
    v55 = v198;
  }
  v22 = (std::string::size_type *)MEMORY[0x1E0DE4F50];
  v57 = (const void *)*p_tm_gmtoff;
  v53 = v55 - *p_tm_gmtoff;
  if (v53 > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_232;
  if (v53 >= 0x17)
  {
    v58 = (v53 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v53 | 7) != 0x17)
      v58 = v53 | 7;
    v59 = v58 + 1;
    p_dst = operator new(v58 + 1);
    v180 = v53;
    v181 = v59 | 0x8000000000000000;
    __dst = (time_t)p_dst;
  }
  else
  {
    HIBYTE(v181) = v55 - *(_BYTE *)p_tm_gmtoff;
    p_dst = &__dst;
    if (!v53)
    {
      v52 = (char *)v49;
      goto LABEL_70;
    }
  }
  v52 = (char *)v49;
  memmove(p_dst, v57, v53);
LABEL_70:
  *((_BYTE *)p_dst + v53) = 0;
  v60 = *v22;
  *(_QWORD *)&v197.tm_sec = v60;
  v61 = v22[8];
  v62 = v22[9];
  *(_QWORD *)((char *)&v197.tm_sec + *(_QWORD *)(v60 - 24)) = v61;
  v63 = MEMORY[0x1E0DE4FB8] + 16;
  *(_QWORD *)&v197.tm_mon = v62;
  *(_QWORD *)&v197.tm_wday = MEMORY[0x1E0DE4FB8] + 16;
  if (SBYTE7(v202) < 0)
    operator delete((void *)__p);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x1CAA44AB4](v204);
  v187.__r_.__value_.__r.__words[0] = v60;
  *(std::string::size_type *)((char *)v187.__r_.__value_.__r.__words + *(_QWORD *)(v60 - 24)) = v61;
  v187.__r_.__value_.__r.__words[2] = v62;
  v188[0] = v63;
  if (SBYTE7(v194) < 0)
    operator delete((void *)v193);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x1CAA44AB4](v196);
  if (v181 >= 0)
    v64 = (uint64_t)&__dst;
  else
    v64 = __dst;
  if (v181 >= 0)
    v65 = HIBYTE(v181);
  else
    v65 = v180;
  sub_1C98D260C(v171, v64, v65);
  a8 = v150;
  if (SHIBYTE(v181) < 0)
    operator delete((void *)__dst);
  sub_1C99077FC(&v197);
  if (v197.tm_year >= 0)
    v66 = &v197;
  else
    v66 = *(tm **)&v197.tm_sec;
  if (v197.tm_year >= 0)
    v67 = HIBYTE(v197.tm_year);
  else
    v67 = *(_QWORD *)&v197.tm_hour;
  sub_1C98D260C(v171, (uint64_t)v66, v67);
  if (SHIBYTE(v197.tm_year) < 0)
    operator delete(*(void **)&v197.tm_sec);
  __sa = v52;
LABEL_91:
  v175 = &a9;
  vsnprintf((char *)&v197, 0x200uLL, a8, &a9);
  v68 = MEMORY[0x1E0DE4FD0] + 104;
  v186[0] = MEMORY[0x1E0DE4FD0] + 104;
  v69 = MEMORY[0x1E0DE4FD0] + 64;
  v71 = v22[2];
  v70 = v22[3];
  v181 = MEMORY[0x1E0DE4FD0] + 64;
  __dst = v71;
  *(time_t *)((char *)&__dst + *(_QWORD *)(v71 - 24)) = v70;
  v180 = 0;
  v72 = (std::ios_base *)((char *)&__dst + *(_QWORD *)(__dst - 24));
  std::ios_base::init(v72, v182);
  v72[1].__vftable = 0;
  v72[1].__fmtflags_ = -1;
  v181 = v160;
  *(_QWORD *)((char *)&v182[-1] + *(_QWORD *)(v160 - 24)) = v169;
  __dst = v162;
  *(time_t *)((char *)&__dst + *(_QWORD *)(v162 - 24)) = (time_t)__sa;
  v158 = MEMORY[0x1E0DE4FD0] + 24;
  v186[0] = v68;
  __dst = MEMORY[0x1E0DE4FD0] + 24;
  v181 = v69;
  std::streambuf::basic_streambuf();
  v73 = MEMORY[0x1E0DE4FB8] + 16;
  v182[0] = MEMORY[0x1E0DE4FB8] + 16;
  v183 = 0u;
  v184 = 0u;
  v185 = 24;
  v154 = *(int *)((char *)&v182[-1] + *(_QWORD *)(__dst - 24));
  v196[0] = v68;
  v187.__r_.__value_.__r.__words[2] = v69;
  v187.__r_.__value_.__r.__words[0] = v71;
  v149 = v71;
  v165 = v70;
  *(std::string::size_type *)((char *)v187.__r_.__value_.__r.__words + *(_QWORD *)(v71 - 24)) = v70;
  v187.__r_.__value_.__l.__size_ = 0;
  v74 = (std::ios_base *)((char *)&v187 + *(_QWORD *)(v187.__r_.__value_.__r.__words[0] - 24));
  std::ios_base::init(v74, v188);
  v74[1].__vftable = 0;
  v74[1].__fmtflags_ = -1;
  v187.__r_.__value_.__r.__words[2] = v160;
  *(std::string::size_type *)((char *)&v187.__r_.__value_.__r.__words[2] + *(_QWORD *)(v160 - 24)) = v169;
  v187.__r_.__value_.__r.__words[0] = v162;
  *(std::string::size_type *)((char *)v187.__r_.__value_.__r.__words + *(_QWORD *)(v162 - 24)) = (std::string::size_type)__sa;
  v196[0] = v68;
  v187.__r_.__value_.__r.__words[0] = v158;
  v187.__r_.__value_.__r.__words[2] = v69;
  std::streambuf::basic_streambuf();
  v188[0] = v73;
  v194 = 0u;
  v193 = 0u;
  v195 = 24;
  *(_QWORD *)((char *)&v188[1] + *(_QWORD *)(v187.__r_.__value_.__r.__words[2] - 24)) = v154;
  v75 = strlen((const char *)&v197);
  sub_1C98D260C(&v187.__r_.__value_.__r.__words[2], (uint64_t)&v197, v75);
  if ((v195 & 0x10) != 0)
  {
    v79 = *((_QWORD *)&v194 + 1);
    if (*((_QWORD *)&v194 + 1) < v192)
    {
      *((_QWORD *)&v194 + 1) = v192;
      v79 = v192;
    }
    v80 = (const void **)&v191;
  }
  else
  {
    if ((v195 & 8) == 0)
    {
      v76 = 0;
      HIBYTE(v178) = 0;
      p_t = &__t;
      v78 = v171;
      goto LABEL_106;
    }
    v80 = (const void **)v189;
    v79 = v190;
  }
  v78 = v171;
  v81 = *v80;
  v76 = v79 - (_QWORD)*v80;
  if (v76 > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_232;
  if (v76 >= 0x17)
  {
    v82 = (v76 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v76 | 7) != 0x17)
      v82 = v76 | 7;
    v83 = v82 + 1;
    p_t = operator new(v82 + 1);
    v177 = v76;
    v178 = v83 | 0x8000000000000000;
    __t.__d_.__rep_ = (std::chrono::duration<long long, std::ratio<1, 1000000>>::rep)p_t;
    goto LABEL_105;
  }
  HIBYTE(v178) = v79 - *(_BYTE *)v80;
  p_t = &__t;
  if (v76)
LABEL_105:
    memmove(p_t, v81, v76);
LABEL_106:
  *((_BYTE *)p_t + v76) = 0;
  v84 = *MEMORY[0x1E0DE4F50];
  v187.__r_.__value_.__r.__words[0] = v84;
  v85 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  v86 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(std::string::size_type *)((char *)v187.__r_.__value_.__r.__words + *(_QWORD *)(v84 - 24)) = v85;
  v87 = MEMORY[0x1E0DE4FB8] + 16;
  v187.__r_.__value_.__r.__words[2] = v86;
  v188[0] = MEMORY[0x1E0DE4FB8] + 16;
  if (SBYTE7(v194) < 0)
    operator delete((void *)v193);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x1CAA44AB4](v196);
  __dst = v84;
  *(time_t *)((char *)&__dst + *(_QWORD *)(v84 - 24)) = v85;
  v181 = v86;
  v182[0] = v87;
  if (SBYTE7(v184) < 0)
    operator delete((void *)v183);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x1CAA44AB4](v186);
  if (v178 >= 0)
    rep = (uint64_t)&__t;
  else
    rep = __t.__d_.__rep_;
  if (v178 >= 0)
    v89 = HIBYTE(v178);
  else
    v89 = v177;
  sub_1C98D260C(v78, rep, v89);
  if (SHIBYTE(v178) < 0)
  {
    operator delete((void *)__t.__d_.__rep_);
    if (!v151)
      goto LABEL_221;
  }
  else if (!v151)
  {
    goto LABEL_221;
  }
  if (!*(_BYTE *)(*(_QWORD *)*v146 + 1))
    goto LABEL_221;
  v90 = strlen(v151);
  if (v90 > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_232;
  v91 = v90;
  if (v90 >= 0x17)
  {
    v93 = (v90 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v90 | 7) != 0x17)
      v93 = v90 | 7;
    v94 = v93 + 1;
    v92 = operator new(v93 + 1);
    v173 = v91;
    v174 = v94 | 0x8000000000000000;
    v172 = v92;
    goto LABEL_128;
  }
  HIBYTE(v174) = v90;
  v92 = &v172;
  if (v90)
LABEL_128:
    memcpy(v92, v151, v91);
  *((_BYTE *)v92 + v91) = 0;
  v95 = (char *)&v172;
  v96 = v172;
  v97 = v173;
  if (v174 >= 0)
    v97 = HIBYTE(v174);
  else
    v95 = (char *)v172;
  do
  {
    if (!v97)
      goto LABEL_143;
    v98 = v95[--v97];
  }
  while (v98 != 92 && v98 != 47);
  if (v97 == -1)
    goto LABEL_143;
  if (SHIBYTE(v174) < 0)
  {
    if (v97 == -2)
    {
      v173 = 0;
      goto LABEL_142;
    }
LABEL_140:
    sub_1C987A234(&v172, 0, v97 + 1);
    goto LABEL_143;
  }
  if (v97 != -2)
    goto LABEL_140;
  HIBYTE(v174) = 0;
  v96 = &v172;
LABEL_142:
  *v96 = 0;
LABEL_143:
  v161 = v85;
  v163 = v84;
  v99 = MEMORY[0x1E0DE4FD0] + 104;
  v186[0] = MEMORY[0x1E0DE4FD0] + 104;
  v100 = MEMORY[0x1E0DE4FD0] + 64;
  v181 = MEMORY[0x1E0DE4FD0] + 64;
  __dst = v149;
  *(time_t *)((char *)&__dst + *(_QWORD *)(v149 - 24)) = v165;
  v180 = 0;
  v101 = (std::ios_base *)((char *)&__dst + *(_QWORD *)(__dst - 24));
  std::ios_base::init(v101, v182);
  v101[1].__vftable = 0;
  v101[1].__fmtflags_ = -1;
  v102 = MEMORY[0x1E0DE4F50];
  v104 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 32);
  v103 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 40);
  v181 = v104;
  *(_QWORD *)((char *)&v182[-1] + *(_QWORD *)(v104 - 24)) = v103;
  v105 = *(_QWORD *)(v102 + 8);
  __dst = v105;
  v106 = *(_QWORD *)(v102 + 48);
  *(time_t *)((char *)&__dst + *(_QWORD *)(v105 - 24)) = v106;
  v159 = MEMORY[0x1E0DE4FD0] + 24;
  v186[0] = v99;
  __dst = MEMORY[0x1E0DE4FD0] + 24;
  v181 = v100;
  std::streambuf::basic_streambuf();
  v155 = MEMORY[0x1E0DE4FB8] + 16;
  v182[0] = MEMORY[0x1E0DE4FB8] + 16;
  v183 = 0u;
  v184 = 0u;
  v185 = 24;
  v152 = (char *)*(int *)((char *)&v182[-1] + *(_QWORD *)(__dst - 24));
  v196[0] = v99;
  v187.__r_.__value_.__r.__words[2] = v100;
  v187.__r_.__value_.__r.__words[0] = v149;
  *(std::string::size_type *)((char *)v187.__r_.__value_.__r.__words + *(_QWORD *)(v149 - 24)) = v165;
  v187.__r_.__value_.__l.__size_ = 0;
  v107 = (std::ios_base *)((char *)&v187 + *(_QWORD *)(v187.__r_.__value_.__r.__words[0] - 24));
  std::ios_base::init(v107, v188);
  v107[1].__vftable = 0;
  v107[1].__fmtflags_ = -1;
  v187.__r_.__value_.__r.__words[2] = v104;
  __sb = (char *)v103;
  *(std::string::size_type *)((char *)&v187.__r_.__value_.__r.__words[2] + *(_QWORD *)(v104 - 24)) = v103;
  v187.__r_.__value_.__r.__words[0] = v105;
  v147 = v105;
  v145 = v106;
  *(std::string::size_type *)((char *)v187.__r_.__value_.__r.__words + *(_QWORD *)(v105 - 24)) = v106;
  v196[0] = v99;
  v187.__r_.__value_.__r.__words[0] = v159;
  v187.__r_.__value_.__r.__words[2] = v100;
  std::streambuf::basic_streambuf();
  v188[0] = v155;
  v194 = 0u;
  v193 = 0u;
  v195 = 24;
  *(_QWORD *)((char *)&v188[1] + *(_QWORD *)(v187.__r_.__value_.__r.__words[2] - 24)) = v152;
  sub_1C98D260C(&v187.__r_.__value_.__r.__words[2], (uint64_t)"\t\t[", 3);
  if ((v195 & 0x10) != 0)
  {
    v112 = *((_QWORD *)&v194 + 1);
    if (*((_QWORD *)&v194 + 1) < v192)
    {
      *((_QWORD *)&v194 + 1) = v192;
      v112 = v192;
    }
    v113 = (const void **)&v191;
  }
  else
  {
    if ((v195 & 8) == 0)
    {
      v108 = 0;
      HIBYTE(v178) = 0;
      v109 = &__t;
      v111 = v86;
      v110 = v171;
      goto LABEL_158;
    }
    v113 = (const void **)v189;
    v112 = v190;
  }
  v111 = v86;
  v110 = v171;
  v114 = *v113;
  v108 = v112 - (_QWORD)*v113;
  if (v108 > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_232;
  if (v108 >= 0x17)
  {
    v115 = (v108 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v108 | 7) != 0x17)
      v115 = v108 | 7;
    v116 = v115 + 1;
    v109 = operator new(v115 + 1);
    v177 = v108;
    v178 = v116 | 0x8000000000000000;
    __t.__d_.__rep_ = (std::chrono::duration<long long, std::ratio<1, 1000000>>::rep)v109;
    goto LABEL_157;
  }
  HIBYTE(v178) = v112 - *(_BYTE *)v113;
  v109 = &__t;
  if (v108)
LABEL_157:
    memmove(v109, v114, v108);
LABEL_158:
  *((_BYTE *)v109 + v108) = 0;
  v187.__r_.__value_.__r.__words[0] = v163;
  *(std::string::size_type *)((char *)v187.__r_.__value_.__r.__words + *(_QWORD *)(v163 - 24)) = v161;
  v117 = MEMORY[0x1E0DE4FB8] + 16;
  v187.__r_.__value_.__r.__words[2] = v111;
  v188[0] = MEMORY[0x1E0DE4FB8] + 16;
  if (SBYTE7(v194) < 0)
    operator delete((void *)v193);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x1CAA44AB4](v196);
  __dst = v163;
  *(time_t *)((char *)&__dst + *(_QWORD *)(v163 - 24)) = v161;
  v181 = v111;
  v182[0] = v117;
  if (SBYTE7(v184) < 0)
    operator delete((void *)v183);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x1CAA44AB4](v186);
  if (v178 >= 0)
    v118 = (uint64_t)&__t;
  else
    v118 = __t.__d_.__rep_;
  if (v178 >= 0)
    v119 = HIBYTE(v178);
  else
    v119 = v177;
  sub_1C98D260C(v110, v118, v119);
  if (SHIBYTE(v178) < 0)
    operator delete((void *)__t.__d_.__rep_);
  sub_1C9907488(&v187, (uint64_t)&v172);
  if ((v187.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v120 = &v187;
  else
    v120 = (std::string *)v187.__r_.__value_.__r.__words[0];
  if ((v187.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v121 = HIBYTE(v187.__r_.__value_.__r.__words[2]);
  else
    v121 = v187.__r_.__value_.__l.__size_;
  sub_1C98D260C(v110, (uint64_t)v120, v121);
  if (SHIBYTE(v187.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v187.__r_.__value_.__l.__data_);
  sub_1C9907B60(&v187, " ");
  if ((v187.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v122 = &v187;
  else
    v122 = (std::string *)v187.__r_.__value_.__r.__words[0];
  if ((v187.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v123 = HIBYTE(v187.__r_.__value_.__r.__words[2]);
  else
    v123 = v187.__r_.__value_.__l.__size_;
  sub_1C98D260C(v110, (uint64_t)v122, v123);
  if (SHIBYTE(v187.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v187.__r_.__value_.__l.__data_);
  v124 = MEMORY[0x1E0DE4FD0];
  v125 = MEMORY[0x1E0DE4FD0] + 104;
  v186[0] = MEMORY[0x1E0DE4FD0] + 104;
  v126 = MEMORY[0x1E0DE4FD0] + 64;
  v181 = MEMORY[0x1E0DE4FD0] + 64;
  __dst = v149;
  *(time_t *)((char *)&__dst + *(_QWORD *)(v149 - 24)) = v165;
  v180 = 0;
  v127 = (std::ios_base *)((char *)&__dst + *(_QWORD *)(__dst - 24));
  std::ios_base::init(v127, v182);
  v127[1].__vftable = 0;
  v127[1].__fmtflags_ = -1;
  *(_QWORD *)((char *)&v182[-1] + *(_QWORD *)(v104 - 24)) = __sb;
  *(time_t *)((char *)&__dst + *(_QWORD *)(v147 - 24)) = v145;
  v186[0] = v125;
  __dst = v124 + 24;
  v181 = v126;
  std::streambuf::basic_streambuf();
  v128 = MEMORY[0x1E0DE4FB8] + 16;
  v182[0] = MEMORY[0x1E0DE4FB8] + 16;
  v183 = 0u;
  v184 = 0u;
  v185 = 24;
  v156 = *(int *)((char *)&v182[-1] + *(_QWORD *)(__dst - 24));
  v196[0] = v125;
  v187.__r_.__value_.__r.__words[2] = v126;
  v187.__r_.__value_.__r.__words[0] = v149;
  *(std::string::size_type *)((char *)v187.__r_.__value_.__r.__words + *(_QWORD *)(v149 - 24)) = v165;
  v187.__r_.__value_.__l.__size_ = 0;
  v129 = (std::ios_base *)((char *)&v187 + *(_QWORD *)(v187.__r_.__value_.__r.__words[0] - 24));
  std::ios_base::init(v129, v188);
  v129[1].__vftable = 0;
  v129[1].__fmtflags_ = -1;
  *(std::string::size_type *)((char *)&v187.__r_.__value_.__r.__words[2] + *(_QWORD *)(v104 - 24)) = (std::string::size_type)__sb;
  *(std::string::size_type *)((char *)v187.__r_.__value_.__r.__words + *(_QWORD *)(v147 - 24)) = v145;
  v196[0] = v125;
  v187.__r_.__value_.__r.__words[0] = v124 + 24;
  v187.__r_.__value_.__r.__words[2] = v126;
  std::streambuf::basic_streambuf();
  v188[0] = v128;
  v194 = 0u;
  v193 = 0u;
  v195 = 24;
  *(_QWORD *)((char *)&v188[1] + *(_QWORD *)(v187.__r_.__value_.__r.__words[2] - 24)) = v156;
  std::ostream::operator<<();
  if ((v195 & 0x10) != 0)
  {
    v132 = *((_QWORD *)&v194 + 1);
    if (*((_QWORD *)&v194 + 1) < v192)
    {
      *((_QWORD *)&v194 + 1) = v192;
      v132 = v192;
    }
    v133 = (const void **)&v191;
  }
  else
  {
    if ((v195 & 8) == 0)
    {
      v130 = 0;
      HIBYTE(v178) = 0;
      v131 = &__t;
      v78 = v171;
      goto LABEL_201;
    }
    v133 = (const void **)v189;
    v132 = v190;
  }
  v78 = v171;
  v134 = *v133;
  v130 = v132 - (_QWORD)*v133;
  if (v130 > 0x7FFFFFFFFFFFFFF7)
LABEL_232:
    abort();
  if (v130 >= 0x17)
  {
    v135 = (v130 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v130 | 7) != 0x17)
      v135 = v130 | 7;
    v136 = v135 + 1;
    v131 = operator new(v135 + 1);
    v177 = v130;
    v178 = v136 | 0x8000000000000000;
    __t.__d_.__rep_ = (std::chrono::duration<long long, std::ratio<1, 1000000>>::rep)v131;
  }
  else
  {
    HIBYTE(v178) = v132 - *(_BYTE *)v133;
    v131 = &__t;
    if (!v130)
      goto LABEL_201;
  }
  memmove(v131, v134, v130);
LABEL_201:
  *((_BYTE *)v131 + v130) = 0;
  v187.__r_.__value_.__r.__words[0] = v163;
  *(std::string::size_type *)((char *)v187.__r_.__value_.__r.__words + *(_QWORD *)(v163 - 24)) = v161;
  v137 = MEMORY[0x1E0DE4FB8] + 16;
  v187.__r_.__value_.__r.__words[2] = v86;
  v188[0] = MEMORY[0x1E0DE4FB8] + 16;
  if (SBYTE7(v194) < 0)
    operator delete((void *)v193);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x1CAA44AB4](v196);
  __dst = v163;
  *(time_t *)((char *)&__dst + *(_QWORD *)(v163 - 24)) = v161;
  v181 = v86;
  v182[0] = v137;
  if (SBYTE7(v184) < 0)
    operator delete((void *)v183);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x1CAA44AB4](v186);
  if (v178 >= 0)
    v138 = (uint64_t)&__t;
  else
    v138 = __t.__d_.__rep_;
  if (v178 >= 0)
    v139 = HIBYTE(v178);
  else
    v139 = v177;
  sub_1C98D260C(v78, v138, v139);
  if (SHIBYTE(v178) < 0)
    operator delete((void *)__t.__d_.__rep_);
  sub_1C9907B60(&v187, "]");
  if ((v187.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v140 = &v187;
  else
    v140 = (std::string *)v187.__r_.__value_.__r.__words[0];
  if ((v187.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v141 = HIBYTE(v187.__r_.__value_.__r.__words[2]);
  else
    v141 = v187.__r_.__value_.__l.__size_;
  sub_1C98D260C(v78, (uint64_t)v140, v141);
  if (SHIBYTE(v187.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v187.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v174) & 0x80000000) == 0)
      goto LABEL_221;
  }
  else if ((SHIBYTE(v174) & 0x80000000) == 0)
  {
    goto LABEL_221;
  }
  operator delete(v172);
LABEL_221:
  sub_1C9907B60(&v187, "\n");
  if ((v187.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v142 = &v187;
  else
    v142 = (std::string *)v187.__r_.__value_.__r.__words[0];
  if ((v187.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v143 = HIBYTE(v187.__r_.__value_.__r.__words[2]);
  else
    v143 = v187.__r_.__value_.__l.__size_;
  sub_1C98D260C(v78, (uint64_t)v142, v143);
  if (SHIBYTE(v187.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v187.__r_.__value_.__l.__data_);
  return a1;
}

uint64_t sub_1C9909318(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  _QWORD *v4;
  int v5;
  size_t v6;
  char *p_dst;
  const void **v8;
  unint64_t v9;
  unint64_t v10;
  const void *v11;
  uint64_t v12;
  uint64_t v13;
  size_t v14;
  char **v15;
  unint64_t v16;
  uint64_t v17;
  size_t v18;
  char **v19;
  unint64_t v20;
  const char *v21;
  std::mutex *v22;
  uint64_t v23;
  FILE *v24;
  std::mutex *v25;
  uint64_t v26;
  FILE *v27;
  unint64_t *p_shared_owners;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  std::__shared_weak_count *v32;
  char *__dst;
  unint64_t v35;
  int64_t v36;

  v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (!v2)
  {
    v4 = 0;
    v3 = 0;
    v5 = *(_DWORD *)(a1 + 120);
    if ((v5 & 0x10) == 0)
      goto LABEL_6;
LABEL_10:
    v9 = *(_QWORD *)(a1 + 112);
    v10 = *(_QWORD *)(a1 + 72);
    if (v9 < v10)
    {
      *(_QWORD *)(a1 + 112) = v10;
      v9 = v10;
    }
    v8 = (const void **)(a1 + 64);
    goto LABEL_13;
  }
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
  {
    v4 = 0;
    v5 = *(_DWORD *)(a1 + 120);
    if ((v5 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_10;
  }
  v4 = *(_QWORD **)a1;
  v5 = *(_DWORD *)(a1 + 120);
  if ((v5 & 0x10) != 0)
    goto LABEL_10;
LABEL_6:
  if ((v5 & 8) == 0)
  {
    v6 = 0;
    HIBYTE(v36) = 0;
    p_dst = (char *)&__dst;
    goto LABEL_21;
  }
  v8 = (const void **)(a1 + 40);
  v9 = *(_QWORD *)(a1 + 56);
LABEL_13:
  v11 = *v8;
  v6 = v9 - (_QWORD)*v8;
  if (v6 > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_77;
  if (v6 >= 0x17)
  {
    v12 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17)
      v12 = v6 | 7;
    v13 = v12 + 1;
    p_dst = (char *)operator new(v12 + 1);
    v35 = v6;
    v36 = v13 | 0x8000000000000000;
    __dst = p_dst;
    goto LABEL_20;
  }
  HIBYTE(v36) = v9 - *(_BYTE *)v8;
  p_dst = (char *)&__dst;
  if (v6)
LABEL_20:
    memmove(p_dst, v11, v6);
LABEL_21:
  p_dst[v6] = 0;
  if (SHIBYTE(v36) < 0)
  {
    v14 = v35;
    if (!v35)
      goto LABEL_46;
    v15 = (char **)__dst;
    if (__dst[v35 - 1] == 10)
      goto LABEL_46;
    if (v35 != (v36 & 0x7FFFFFFFFFFFFFFFLL) - 1)
    {
      v19 = (char **)__dst;
LABEL_44:
      v35 = v14 + 1;
      goto LABEL_45;
    }
    if ((v36 & 0x7FFFFFFFFFFFFFFFLL) != 0x7FFFFFFFFFFFFFF8)
    {
      if (v35 > 0x3FFFFFFFFFFFFFF2)
      {
        v18 = 0x7FFFFFFFFFFFFFF7;
LABEL_39:
        v19 = (char **)operator new(v18);
        memmove(v19, v15, v14);
        if (v14 != 22)
          operator delete(v15);
        __dst = (char *)v19;
        v36 = v18 | 0x8000000000000000;
        goto LABEL_44;
      }
LABEL_31:
      if (v14 + 1 > 2 * v14)
        v16 = v14 + 1;
      else
        v16 = 2 * v14;
      v17 = (v16 & 0x7FFFFFFFFFFFFFF8) + 8;
      if ((v16 | 7) != 0x17)
        v17 = v16 | 7;
      if (v16 >= 0x17)
        v18 = v17 + 1;
      else
        v18 = 23;
      goto LABEL_39;
    }
LABEL_77:
    abort();
  }
  if (HIBYTE(v36))
  {
    v14 = HIBYTE(v36);
    if (*((_BYTE *)&__dst + HIBYTE(v36) - 1) != 10)
    {
      if (HIBYTE(v36) != 22)
      {
        HIBYTE(v36) = (HIBYTE(v36) + 1) & 0x7F;
        v19 = &__dst;
LABEL_45:
        *(_WORD *)((char *)v19 + v14) = 10;
        goto LABEL_46;
      }
      v15 = &__dst;
      v14 = 22;
      goto LABEL_31;
    }
  }
LABEL_46:
  if (v4)
  {
    v20 = HIBYTE(v36);
    if (v36 < 0)
      v20 = v35;
    if (v20)
    {
      if (v36 >= 0)
        v21 = (const char *)&__dst;
      else
        v21 = __dst;
      v22 = (std::mutex *)(*v4 + 8);
      std::mutex::lock(v22);
      v23 = *v4;
      if (*(_BYTE *)*v4)
      {
        fputs(v21, (FILE *)*MEMORY[0x1E0C80C20]);
        v23 = *v4;
      }
      v24 = *(FILE **)(v23 + 72);
      if (v24)
        fputs(v21, v24);
      std::mutex::unlock(v22);
    }
    if (*(_BYTE *)(a1 + 280))
    {
      v25 = (std::mutex *)(*v4 + 8);
      std::mutex::lock(v25);
      v26 = *v4;
      if (*(_BYTE *)*v4)
      {
        fflush((FILE *)*MEMORY[0x1E0C80C20]);
        v26 = *v4;
      }
      v27 = *(FILE **)(v26 + 72);
      if (v27)
        fflush(v27);
      std::mutex::unlock(v25);
    }
  }
  if (SHIBYTE(v36) < 0)
    operator delete(__dst);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v29 = __ldaxr(p_shared_owners);
    while (__stlxr(v29 - 1, p_shared_owners));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  v30 = MEMORY[0x1E0DE4F60];
  v31 = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)(a1 + 16) = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)(a1 + 16 + *(_QWORD *)(v31 - 24)) = *(_QWORD *)(v30 + 24);
  *(_QWORD *)(a1 + 24) = MEMORY[0x1E0DE4FB8] + 16;
  if (*(char *)(a1 + 111) < 0)
    operator delete(*(void **)(a1 + 88));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1CAA44AB4](a1 + 128);
  v32 = *(std::__shared_weak_count **)(a1 + 8);
  if (v32)
    std::__shared_weak_count::__release_weak(v32);
  return a1;
}

uint64_t sub_1C99096E0(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  _DWORD *v8;
  _DWORD *v9;
  uint64_t v10;
  uint64_t v11;
  void *memptr;

  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_QWORD *)(a1 + 8) = 16;
  memptr = 0;
  malloc_type_posix_memalign(&memptr, 0x20uLL, 0x40uLL, 0x49090899uLL);
  v2 = memptr;
  *(_QWORD *)a1 = memptr;
  *(_DWORD *)(a1 + 16) = 7;
  memset_pattern16(v2, &unk_1C9927940, 0x38uLL);
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 16;
  memptr = 0;
  malloc_type_posix_memalign(&memptr, 0x20uLL, 0x40uLL, 0x49090899uLL);
  v3 = memptr;
  *(_QWORD *)(a1 + 24) = memptr;
  *(_DWORD *)(a1 + 40) = 7;
  memset_pattern16(v3, &unk_1C9927940, 0x38uLL);
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_QWORD *)(a1 + 56) = 16;
  memptr = 0;
  malloc_type_posix_memalign(&memptr, 0x20uLL, 0x40uLL, 0x49090899uLL);
  v4 = memptr;
  *(_QWORD *)(a1 + 48) = memptr;
  *(_DWORD *)(a1 + 64) = 7;
  memset_pattern16(v4, &unk_1C9927940, 0x38uLL);
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 16;
  memptr = 0;
  malloc_type_posix_memalign(&memptr, 0x20uLL, 0x40uLL, 0x49090899uLL);
  v5 = memptr;
  *(_QWORD *)(a1 + 72) = memptr;
  *(_DWORD *)(a1 + 88) = 7;
  memset_pattern16(v5, &unk_1C9927940, 0x38uLL);
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_QWORD *)(a1 + 104) = 16;
  memptr = 0;
  malloc_type_posix_memalign(&memptr, 0x20uLL, 0x40uLL, 0x49090899uLL);
  v6 = memptr;
  *(_QWORD *)(a1 + 96) = memptr;
  *(_DWORD *)(a1 + 112) = 7;
  memset_pattern16(v6, &unk_1C9927940, 0x38uLL);
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = 16;
  memptr = 0;
  malloc_type_posix_memalign(&memptr, 0x20uLL, 0x40uLL, 0x49090899uLL);
  v7 = memptr;
  *(_QWORD *)(a1 + 120) = memptr;
  *(_DWORD *)(a1 + 136) = 7;
  memset_pattern16(v7, &unk_1C9927940, 0x38uLL);
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 152) = 8;
  memptr = 0;
  malloc_type_posix_memalign(&memptr, 0x20uLL, 0x20uLL, 0x49090899uLL);
  *(_QWORD *)(a1 + 144) = memptr;
  *(_DWORD *)(a1 + 160) = 7;
  v8 = operator new(7uLL);
  *(_QWORD *)(a1 + 168) = v8;
  *v8 = 0;
  *(_DWORD *)((char *)v8 + 3) = 0;
  *(_QWORD *)(a1 + 176) = (char *)v8 + 7;
  *(_QWORD *)(a1 + 184) = (char *)v8 + 7;
  *(_QWORD *)(a1 + 192) = 0;
  *(_QWORD *)(a1 + 200) = 8;
  memptr = 0;
  malloc_type_posix_memalign(&memptr, 0x20uLL, 0x20uLL, 0x49090899uLL);
  *(_QWORD *)(a1 + 192) = memptr;
  *(_DWORD *)(a1 + 208) = 7;
  v9 = operator new(7uLL);
  *(_QWORD *)(a1 + 216) = v9;
  *v9 = 0;
  *(_DWORD *)((char *)v9 + 3) = 0;
  *(_QWORD *)(a1 + 224) = (char *)v9 + 7;
  *(_QWORD *)(a1 + 232) = (char *)v9 + 7;
  if (2 * *(_DWORD *)(a1 + 16))
    memset_pattern16(*(void **)a1, &unk_1C9927940, 4 * (2 * *(_DWORD *)(a1 + 16)));
  if (2 * *(_DWORD *)(a1 + 40))
    memset_pattern16(*(void **)(a1 + 24), &unk_1C9927940, 4 * (2 * *(_DWORD *)(a1 + 40)));
  if (2 * *(_DWORD *)(a1 + 64))
    memset_pattern16(*(void **)(a1 + 48), &unk_1C9927940, 4 * (2 * *(_DWORD *)(a1 + 64)));
  if (2 * *(_DWORD *)(a1 + 88))
    memset_pattern16(*(void **)(a1 + 72), &unk_1C9927940, 4 * (2 * *(_DWORD *)(a1 + 88)));
  if (2 * *(_DWORD *)(a1 + 112))
    memset_pattern16(*(void **)(a1 + 96), &unk_1C9927940, 4 * (2 * *(_DWORD *)(a1 + 112)));
  if (2 * *(_DWORD *)(a1 + 136))
    memset_pattern16(*(void **)(a1 + 120), &unk_1C9927940, 4 * (2 * *(_DWORD *)(a1 + 136)));
  LOBYTE(memptr) = 0;
  sub_1C98E11CC(a1 + 168, *(_QWORD *)(a1 + 176) - *(_QWORD *)(a1 + 168), (const char *)&memptr);
  v10 = *(unsigned int *)(a1 + 160);
  if ((_DWORD)v10)
    bzero(*(void **)(a1 + 144), 4 * v10);
  LOBYTE(memptr) = 0;
  sub_1C98E11CC(a1 + 216, *(_QWORD *)(a1 + 224) - *(_QWORD *)(a1 + 216), (const char *)&memptr);
  v11 = *(unsigned int *)(a1 + 208);
  if ((_DWORD)v11)
    bzero(*(void **)(a1 + 192), 4 * v11);
  return a1;
}

uint64_t sub_1C9909A58(uint64_t a1)
{
  void *v2;
  void *v3;

  v2 = *(void **)(a1 + 216);
  if (v2)
  {
    *(_QWORD *)(a1 + 224) = v2;
    operator delete(v2);
  }
  free(*(void **)(a1 + 192));
  v3 = *(void **)(a1 + 168);
  if (v3)
  {
    *(_QWORD *)(a1 + 176) = v3;
    operator delete(v3);
  }
  free(*(void **)(a1 + 144));
  free(*(void **)(a1 + 120));
  free(*(void **)(a1 + 96));
  free(*(void **)(a1 + 72));
  free(*(void **)(a1 + 48));
  free(*(void **)(a1 + 24));
  free(*(void **)a1);
  return a1;
}

uint64_t sub_1C9909AD8(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  _WORD *v8;
  _WORD *v9;
  uint64_t v10;
  uint64_t v11;
  void *memptr;

  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_QWORD *)(a1 + 8) = 16;
  memptr = 0;
  malloc_type_posix_memalign(&memptr, 0x20uLL, 0x40uLL, 0x49090899uLL);
  v2 = memptr;
  *(_QWORD *)a1 = memptr;
  *(_DWORD *)(a1 + 16) = 6;
  memset_pattern16(v2, &unk_1C9927940, 0x30uLL);
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 16;
  memptr = 0;
  malloc_type_posix_memalign(&memptr, 0x20uLL, 0x40uLL, 0x49090899uLL);
  v3 = memptr;
  *(_QWORD *)(a1 + 24) = memptr;
  *(_DWORD *)(a1 + 40) = 6;
  memset_pattern16(v3, &unk_1C9927940, 0x30uLL);
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_QWORD *)(a1 + 56) = 16;
  memptr = 0;
  malloc_type_posix_memalign(&memptr, 0x20uLL, 0x40uLL, 0x49090899uLL);
  v4 = memptr;
  *(_QWORD *)(a1 + 48) = memptr;
  *(_DWORD *)(a1 + 64) = 6;
  memset_pattern16(v4, &unk_1C9927940, 0x30uLL);
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 16;
  memptr = 0;
  malloc_type_posix_memalign(&memptr, 0x20uLL, 0x40uLL, 0x49090899uLL);
  v5 = memptr;
  *(_QWORD *)(a1 + 72) = memptr;
  *(_DWORD *)(a1 + 88) = 6;
  memset_pattern16(v5, &unk_1C9927940, 0x30uLL);
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_QWORD *)(a1 + 104) = 16;
  memptr = 0;
  malloc_type_posix_memalign(&memptr, 0x20uLL, 0x40uLL, 0x49090899uLL);
  v6 = memptr;
  *(_QWORD *)(a1 + 96) = memptr;
  *(_DWORD *)(a1 + 112) = 6;
  memset_pattern16(v6, &unk_1C9927940, 0x30uLL);
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = 16;
  memptr = 0;
  malloc_type_posix_memalign(&memptr, 0x20uLL, 0x40uLL, 0x49090899uLL);
  v7 = memptr;
  *(_QWORD *)(a1 + 120) = memptr;
  *(_DWORD *)(a1 + 136) = 6;
  memset_pattern16(v7, &unk_1C9927940, 0x30uLL);
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 152) = 8;
  memptr = 0;
  malloc_type_posix_memalign(&memptr, 0x20uLL, 0x20uLL, 0x49090899uLL);
  *(_QWORD *)(a1 + 144) = memptr;
  *(_DWORD *)(a1 + 160) = 6;
  v8 = operator new(6uLL);
  *(_QWORD *)(a1 + 168) = v8;
  *(_DWORD *)v8 = 0;
  v8[2] = 0;
  *(_QWORD *)(a1 + 176) = v8 + 3;
  *(_QWORD *)(a1 + 184) = v8 + 3;
  *(_QWORD *)(a1 + 192) = 0;
  *(_QWORD *)(a1 + 200) = 8;
  memptr = 0;
  malloc_type_posix_memalign(&memptr, 0x20uLL, 0x20uLL, 0x49090899uLL);
  *(_QWORD *)(a1 + 192) = memptr;
  *(_DWORD *)(a1 + 208) = 6;
  v9 = operator new(6uLL);
  *(_QWORD *)(a1 + 216) = v9;
  *(_DWORD *)v9 = 0;
  v9[2] = 0;
  *(_QWORD *)(a1 + 224) = v9 + 3;
  *(_QWORD *)(a1 + 232) = v9 + 3;
  if (2 * *(_DWORD *)(a1 + 16))
    memset_pattern16(*(void **)a1, &unk_1C9927940, 4 * (2 * *(_DWORD *)(a1 + 16)));
  if (2 * *(_DWORD *)(a1 + 40))
    memset_pattern16(*(void **)(a1 + 24), &unk_1C9927940, 4 * (2 * *(_DWORD *)(a1 + 40)));
  if (2 * *(_DWORD *)(a1 + 64))
    memset_pattern16(*(void **)(a1 + 48), &unk_1C9927940, 4 * (2 * *(_DWORD *)(a1 + 64)));
  if (2 * *(_DWORD *)(a1 + 88))
    memset_pattern16(*(void **)(a1 + 72), &unk_1C9927940, 4 * (2 * *(_DWORD *)(a1 + 88)));
  if (2 * *(_DWORD *)(a1 + 112))
    memset_pattern16(*(void **)(a1 + 96), &unk_1C9927940, 4 * (2 * *(_DWORD *)(a1 + 112)));
  if (2 * *(_DWORD *)(a1 + 136))
    memset_pattern16(*(void **)(a1 + 120), &unk_1C9927940, 4 * (2 * *(_DWORD *)(a1 + 136)));
  LOBYTE(memptr) = 0;
  sub_1C98E11CC(a1 + 168, *(_QWORD *)(a1 + 176) - *(_QWORD *)(a1 + 168), (const char *)&memptr);
  v10 = *(unsigned int *)(a1 + 160);
  if ((_DWORD)v10)
    bzero(*(void **)(a1 + 144), 4 * v10);
  LOBYTE(memptr) = 0;
  sub_1C98E11CC(a1 + 216, *(_QWORD *)(a1 + 224) - *(_QWORD *)(a1 + 216), (const char *)&memptr);
  v11 = *(unsigned int *)(a1 + 208);
  if ((_DWORD)v11)
    bzero(*(void **)(a1 + 192), 4 * v11);
  return a1;
}

uint64_t sub_1C9909E50(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  _QWORD *v5;
  uint64_t v6;
  void *memptr;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 40;
  memptr = 0;
  malloc_type_posix_memalign(&memptr, 0x20uLL, 0xA0uLL, 0x49090899uLL);
  v2 = memptr;
  *(_QWORD *)a1 = memptr;
  *(_DWORD *)(a1 + 16) = 20;
  memset_pattern16(v2, &unk_1C9927940, 0xA0uLL);
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 40;
  memptr = 0;
  malloc_type_posix_memalign(&memptr, 0x20uLL, 0xA0uLL, 0x49090899uLL);
  v3 = memptr;
  *(_QWORD *)(a1 + 24) = memptr;
  *(_DWORD *)(a1 + 40) = 20;
  memset_pattern16(v3, &unk_1C9927940, 0xA0uLL);
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 40;
  memptr = 0;
  malloc_type_posix_memalign(&memptr, 0x20uLL, 0xA0uLL, 0x49090899uLL);
  v4 = memptr;
  *(_QWORD *)(a1 + 48) = memptr;
  *(_DWORD *)(a1 + 64) = 20;
  memset_pattern16(v4, &unk_1C9927940, 0xA0uLL);
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 24;
  memptr = 0;
  malloc_type_posix_memalign(&memptr, 0x20uLL, 0x60uLL, 0x49090899uLL);
  *(_QWORD *)(a1 + 72) = memptr;
  *(_DWORD *)(a1 + 88) = 20;
  v5 = operator new(0x14uLL);
  *(_QWORD *)(a1 + 96) = v5;
  *v5 = 0;
  v5[1] = 0;
  *((_DWORD *)v5 + 4) = 0;
  *(_QWORD *)(a1 + 104) = (char *)v5 + 20;
  *(_QWORD *)(a1 + 112) = (char *)v5 + 20;
  if (2 * *(_DWORD *)(a1 + 16))
    memset_pattern16(*(void **)a1, &unk_1C9927940, 4 * (2 * *(_DWORD *)(a1 + 16)));
  if (2 * *(_DWORD *)(a1 + 40))
    memset_pattern16(*(void **)(a1 + 24), &unk_1C9927940, 4 * (2 * *(_DWORD *)(a1 + 40)));
  if (2 * *(_DWORD *)(a1 + 64))
    memset_pattern16(*(void **)(a1 + 48), &unk_1C9927940, 4 * (2 * *(_DWORD *)(a1 + 64)));
  LOBYTE(memptr) = 0;
  sub_1C98E11CC(a1 + 96, 0x14uLL, (const char *)&memptr);
  v6 = *(unsigned int *)(a1 + 88);
  if ((_DWORD)v6)
    bzero(*(void **)(a1 + 72), 4 * v6);
  return a1;
}

uint64_t sub_1C990A010(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  _QWORD *v5;
  uint64_t v6;
  void *memptr;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 32;
  memptr = 0;
  malloc_type_posix_memalign(&memptr, 0x20uLL, 0x80uLL, 0x49090899uLL);
  v2 = memptr;
  *(_QWORD *)a1 = memptr;
  *(_DWORD *)(a1 + 16) = 13;
  memset_pattern16(v2, &unk_1C9927940, 0x68uLL);
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 32;
  memptr = 0;
  malloc_type_posix_memalign(&memptr, 0x20uLL, 0x80uLL, 0x49090899uLL);
  v3 = memptr;
  *(_QWORD *)(a1 + 24) = memptr;
  *(_DWORD *)(a1 + 40) = 13;
  memset_pattern16(v3, &unk_1C9927940, 0x68uLL);
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 32;
  memptr = 0;
  malloc_type_posix_memalign(&memptr, 0x20uLL, 0x80uLL, 0x49090899uLL);
  v4 = memptr;
  *(_QWORD *)(a1 + 48) = memptr;
  *(_DWORD *)(a1 + 64) = 13;
  memset_pattern16(v4, &unk_1C9927940, 0x68uLL);
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 16;
  memptr = 0;
  malloc_type_posix_memalign(&memptr, 0x20uLL, 0x40uLL, 0x49090899uLL);
  *(_QWORD *)(a1 + 72) = memptr;
  *(_DWORD *)(a1 + 88) = 13;
  v5 = operator new(0xDuLL);
  *(_QWORD *)(a1 + 96) = v5;
  *v5 = 0;
  *(_QWORD *)((char *)v5 + 5) = 0;
  *(_QWORD *)(a1 + 104) = (char *)v5 + 13;
  *(_QWORD *)(a1 + 112) = (char *)v5 + 13;
  if (2 * *(_DWORD *)(a1 + 16))
    memset_pattern16(*(void **)a1, &unk_1C9927940, 4 * (2 * *(_DWORD *)(a1 + 16)));
  if (2 * *(_DWORD *)(a1 + 40))
    memset_pattern16(*(void **)(a1 + 24), &unk_1C9927940, 4 * (2 * *(_DWORD *)(a1 + 40)));
  if (2 * *(_DWORD *)(a1 + 64))
    memset_pattern16(*(void **)(a1 + 48), &unk_1C9927940, 4 * (2 * *(_DWORD *)(a1 + 64)));
  LOBYTE(memptr) = 0;
  sub_1C98E11CC(a1 + 96, 0xDuLL, (const char *)&memptr);
  v6 = *(unsigned int *)(a1 + 88);
  if ((_DWORD)v6)
    bzero(*(void **)(a1 + 72), 4 * v6);
  return a1;
}

uint64_t sub_1C990A1D0(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  _QWORD *v5;
  uint64_t v6;
  void *memptr;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 40;
  memptr = 0;
  malloc_type_posix_memalign(&memptr, 0x20uLL, 0xA0uLL, 0x49090899uLL);
  v2 = memptr;
  *(_QWORD *)a1 = memptr;
  *(_DWORD *)(a1 + 16) = 17;
  memset_pattern16(v2, &unk_1C9927940, 0x88uLL);
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 40;
  memptr = 0;
  malloc_type_posix_memalign(&memptr, 0x20uLL, 0xA0uLL, 0x49090899uLL);
  v3 = memptr;
  *(_QWORD *)(a1 + 24) = memptr;
  *(_DWORD *)(a1 + 40) = 17;
  memset_pattern16(v3, &unk_1C9927940, 0x88uLL);
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 40;
  memptr = 0;
  malloc_type_posix_memalign(&memptr, 0x20uLL, 0xA0uLL, 0x49090899uLL);
  v4 = memptr;
  *(_QWORD *)(a1 + 48) = memptr;
  *(_DWORD *)(a1 + 64) = 17;
  memset_pattern16(v4, &unk_1C9927940, 0x88uLL);
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 24;
  memptr = 0;
  malloc_type_posix_memalign(&memptr, 0x20uLL, 0x60uLL, 0x49090899uLL);
  *(_QWORD *)(a1 + 72) = memptr;
  *(_DWORD *)(a1 + 88) = 17;
  v5 = operator new(0x11uLL);
  *(_QWORD *)(a1 + 96) = v5;
  *v5 = 0;
  v5[1] = 0;
  *((_BYTE *)v5 + 16) = 0;
  *(_QWORD *)(a1 + 104) = (char *)v5 + 17;
  *(_QWORD *)(a1 + 112) = (char *)v5 + 17;
  if (2 * *(_DWORD *)(a1 + 16))
    memset_pattern16(*(void **)a1, &unk_1C9927940, 4 * (2 * *(_DWORD *)(a1 + 16)));
  if (2 * *(_DWORD *)(a1 + 40))
    memset_pattern16(*(void **)(a1 + 24), &unk_1C9927940, 4 * (2 * *(_DWORD *)(a1 + 40)));
  if (2 * *(_DWORD *)(a1 + 64))
    memset_pattern16(*(void **)(a1 + 48), &unk_1C9927940, 4 * (2 * *(_DWORD *)(a1 + 64)));
  LOBYTE(memptr) = 0;
  sub_1C98E11CC(a1 + 96, 0x11uLL, (const char *)&memptr);
  v6 = *(unsigned int *)(a1 + 88);
  if ((_DWORD)v6)
    bzero(*(void **)(a1 + 72), 4 * v6);
  return a1;
}

_QWORD *sub_1C990A390(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &off_1E8295640;
  v2 = a1 + 54;
  a1[54] = off_1E8295690;
  a1[2] = off_1E8295668;
  MEMORY[0x1CAA44880](a1 + 3);
  std::iostream::~basic_iostream();
  MEMORY[0x1CAA44AB4](v2);
  return a1;
}

void sub_1C990A3F0(_QWORD *a1)
{
  _QWORD *v1;

  *a1 = &off_1E8295640;
  v1 = a1 + 54;
  a1[54] = off_1E8295690;
  a1[2] = off_1E8295668;
  MEMORY[0x1CAA44880](a1 + 3);
  std::iostream::~basic_iostream();
  MEMORY[0x1CAA44AB4](v1);
  JUMPOUT(0x1CAA44AFCLL);
}

void sub_1C990A460(_QWORD *a1)
{
  a1[52] = off_1E8295690;
  *a1 = off_1E8295668;
  *(a1 - 2) = &off_1E8295640;
  MEMORY[0x1CAA44880](a1 + 1);
  std::iostream::~basic_iostream();
  JUMPOUT(0x1CAA44AB4);
}

void sub_1C990A4B4(_QWORD *a1)
{
  _QWORD *v1;

  v1 = a1 + 52;
  a1[52] = off_1E8295690;
  *a1 = off_1E8295668;
  *(a1 - 2) = &off_1E8295640;
  MEMORY[0x1CAA44880](a1 + 1);
  std::iostream::~basic_iostream();
  MEMORY[0x1CAA44AB4](v1);
  JUMPOUT(0x1CAA44AFCLL);
}

void sub_1C990A520(_QWORD *a1)
{
  _QWORD *v1;

  v1 = (_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24));
  *v1 = &off_1E8295640;
  v1[54] = off_1E8295690;
  v1[2] = off_1E8295668;
  MEMORY[0x1CAA44880](v1 + 3);
  std::iostream::~basic_iostream();
  JUMPOUT(0x1CAA44AB4);
}

void sub_1C990A580(_QWORD *a1)
{
  _QWORD *v1;

  v1 = (_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24));
  *v1 = &off_1E8295640;
  v1[54] = off_1E8295690;
  v1[2] = off_1E8295668;
  MEMORY[0x1CAA44880](v1 + 3);
  std::iostream::~basic_iostream();
  MEMORY[0x1CAA44AB4](v1 + 54);
  JUMPOUT(0x1CAA44AFCLL);
}

uint64_t sub_1C990A5F8(uint64_t a1, _DWORD *a2)
{
  uint64_t v5;
  uint64_t v6;
  size_t v7;
  void **v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  void **v14;
  unint64_t v15;
  size_t v16;
  uint64_t v17;
  uint64_t v18;
  void **v19;
  void *v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  std::ios_base *v28;
  uint64_t v29;
  uint64_t v30;
  std::string *v31;
  void *v32;
  std::string *v33;
  unint64_t v34;
  unint64_t v35;
  char *v36;
  uint64_t v37;
  unint64_t v38;
  int v39;
  uint64_t v40;
  void *v42[2];
  int64_t v43;
  _QWORD v44[2];
  uint64_t v45;
  _QWORD v46[6];
  std::string *v47;
  char *v48;
  void *__p[2];
  __int128 v50;
  int v51;
  uint64_t v52[19];
  int v53[3];

  v42[0] = 0;
  v42[1] = 0;
  v43 = 0;
  LOBYTE(v44[0]) = 0;
  while ((*(uint64_t (**)(_QWORD, _QWORD *, uint64_t))(**(_QWORD **)(a1 + 8) + 88))(*(_QWORD *)(a1 + 8), v44, 1) == 1)
  {
    if (LOBYTE(v44[0]) > 0x20u || ((1 << SLOBYTE(v44[0])) & 0x100002600) == 0)
      break;
    v5 = *(_QWORD *)(a1 + 8);
    if (*(_DWORD *)(v5 + 8) != 2)
    {
      v6 = (*(uint64_t (**)(_QWORD, _QWORD *, uint64_t))(*(_QWORD *)v5 + 144))(*(_QWORD *)(a1 + 8), v44, 1);
      if (v6 >= 1)
        *(_QWORD *)(v5 + 16) += v6;
    }
  }
  LOBYTE(v42[0]) = 0;
  HIBYTE(v43) = 0;
  LOBYTE(v44[0]) = 0;
  while (1)
  {
    v10 = *(_QWORD *)(a1 + 8);
    if (*(_DWORD *)(v10 + 8) == 2)
      break;
    v11 = (*(uint64_t (**)(_QWORD, _QWORD *, uint64_t))(*(_QWORD *)v10 + 144))(*(_QWORD *)(a1 + 8), v44, 1);
    if (v11 < 1)
      break;
    *(_QWORD *)(v10 + 16) += v11;
    if (v11 != 1)
      break;
    v12 = v44[0];
    if (LOBYTE(v44[0]) <= 0x20u && ((1 << SLOBYTE(v44[0])) & 0x100002600) != 0)
      break;
    if ((SHIBYTE(v43) & 0x80000000) == 0)
    {
      if (HIBYTE(v43) != 22)
      {
        v7 = HIBYTE(v43);
        HIBYTE(v43) = (HIBYTE(v43) + 1) & 0x7F;
        v8 = v42;
        goto LABEL_13;
      }
      v14 = v42;
      v7 = 22;
LABEL_28:
      if (v7 + 1 > 2 * v7)
        v15 = v7 + 1;
      else
        v15 = 2 * v7;
      if (v15 >= 0x17)
      {
        v17 = (v15 & 0x7FFFFFFFFFFFFFF8) + 8;
        v18 = v15 | 7;
        if (v18 == 23)
          v18 = v17;
        v16 = v18 + 1;
      }
      else
      {
        v16 = 23;
      }
      goto LABEL_38;
    }
    v7 = (v43 & 0x7FFFFFFFFFFFFFFFLL) - 1;
    if (v42[1] == (void *)v7)
    {
      if ((v43 & 0x7FFFFFFFFFFFFFFFLL) == 0x7FFFFFFFFFFFFFF8)
        abort();
      v14 = (void **)v42[0];
      if (v7 <= 0x3FFFFFFFFFFFFFF2)
        goto LABEL_28;
      v16 = 0x7FFFFFFFFFFFFFF7;
LABEL_38:
      v19 = (void **)operator new(v16);
      v8 = v19;
      if (!v7 || (memmove(v19, v14, v7), v7 != 22))
        operator delete(v14);
      v42[0] = v8;
      v43 = v16 | 0x8000000000000000;
      goto LABEL_42;
    }
    v8 = (void **)v42[0];
    v7 = (size_t)v42[1];
LABEL_42:
    v42[1] = (void *)(v7 + 1);
LABEL_13:
    v9 = (char *)v8 + v7;
    *v9 = v12;
    v9[1] = 0;
  }
  v20 = (void *)HIBYTE(v43);
  v21 = HIBYTE(v43);
  if (v43 < 0)
    v20 = v42[1];
  *(_BYTE *)(a1 + 64) = v20 != 0;
  if (v20)
  {
    v53[0] = 0;
    v22 = MEMORY[0x1E0DE4FD0];
    v23 = MEMORY[0x1E0DE4FD0] + 104;
    v52[0] = MEMORY[0x1E0DE4FD0] + 104;
    v24 = MEMORY[0x1E0DE4FD0] + 64;
    v25 = (_QWORD *)MEMORY[0x1E0DE4F50];
    v26 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 16);
    v27 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 24);
    v45 = MEMORY[0x1E0DE4FD0] + 64;
    v44[0] = v26;
    *(_QWORD *)((char *)v44 + *(_QWORD *)(v26 - 24)) = v27;
    v44[1] = 0;
    v28 = (std::ios_base *)((char *)v44 + *(_QWORD *)(v44[0] - 24));
    std::ios_base::init(v28, v46);
    v28[1].__vftable = 0;
    v28[1].__fmtflags_ = -1;
    v29 = v25[5];
    v45 = v25[4];
    *(_QWORD *)((char *)&v46[-1] + *(_QWORD *)(v45 - 24)) = v29;
    v44[0] = v25[1];
    *(_QWORD *)((char *)v44 + *(_QWORD *)(v44[0] - 24)) = v25[6];
    v52[0] = v23;
    v44[0] = v22 + 24;
    v45 = v24;
    std::streambuf::basic_streambuf();
    v30 = MEMORY[0x1E0DE4FB8];
    v46[0] = MEMORY[0x1E0DE4FB8] + 16;
    v31 = (std::string *)__p;
    *(_OWORD *)__p = 0u;
    v50 = 0u;
    v51 = 24;
    if (SHIBYTE(v43) < 0)
    {
      v31 = (std::string *)sub_1C98A96AC(__p, v42[0], (size_t)v42[1]);
    }
    else
    {
      *(_OWORD *)__p = *(_OWORD *)v42;
      *(_QWORD *)&v50 = v43;
    }
    *((_QWORD *)&v50 + 1) = 0;
    v32 = (void *)BYTE7(v50);
    if ((SBYTE7(v50) & 0x80u) == 0)
      v33 = v31;
    else
      v33 = (std::string *)__p[0];
    if ((SBYTE7(v50) & 0x80u) == 0)
      v34 = BYTE7(v50);
    else
      v34 = (unint64_t)__p[1];
    if ((v51 & 8) != 0)
    {
      v46[2] = v33;
      v46[3] = v33;
      *((_QWORD *)&v50 + 1) = (char *)v33 + v34;
      v46[4] = (char *)v33 + v34;
    }
    if ((v51 & 0x10) != 0)
    {
      *((_QWORD *)&v50 + 1) = (char *)v33 + v34;
      if ((BYTE7(v50) & 0x80) != 0)
      {
        v32 = __p[1];
        v35 = (v50 & 0x7FFFFFFFFFFFFFFFLL) - 1;
        if (__p[1] < (void *)v35)
          goto LABEL_62;
        v31 = (std::string *)__p[0];
        __p[1] = (void *)((v50 & 0x7FFFFFFFFFFFFFFFLL) - 1);
LABEL_64:
        v31->__r_.__value_.__s.__data_[v35] = 0;
      }
      else
      {
        v35 = 22;
        if (BYTE7(v50) > 0x15u)
        {
          BYTE7(v50) = 22;
          goto LABEL_64;
        }
LABEL_62:
        std::string::append(v31, v35 - (_QWORD)v32, 0);
      }
      v36 = (char *)BYTE7(v50);
      if (SBYTE7(v50) < 0)
        v36 = (char *)__p[1];
      v46[5] = v33;
      v47 = v33;
      v48 = &v36[(_QWORD)v33];
      if ((v51 & 3) != 0)
      {
        if (v34 >> 31)
        {
          v37 = ((v34 - 0x80000000) * (unsigned __int128)0x200000005uLL) >> 64;
          v38 = 0x7FFFFFFF * ((v37 + ((v34 - 0x80000000 - v37) >> 1)) >> 30);
          v33 = (std::string *)((char *)v33 + v38 + 0x7FFFFFFF);
          v34 = v34 - v38 - 0x7FFFFFFF;
          v47 = v33;
        }
        if (v34)
          v47 = (std::string *)((char *)v33 + v34);
      }
    }
    MEMORY[0x1CAA448BC](v44, v53);
    v39 = v53[0];
    v44[0] = *v25;
    v40 = v25[9];
    *(_QWORD *)((char *)v44 + *(_QWORD *)(v44[0] - 24)) = v25[8];
    v45 = v40;
    v46[0] = v30 + 16;
    if (SBYTE7(v50) < 0)
      operator delete(__p[0]);
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x1CAA44AB4](v52);
    *a2 = v39;
    v21 = HIBYTE(v43);
  }
  if (v21 < 0)
    operator delete(v42[0]);
  return a1;
}

float *sub_1C990AB18(float *result, float **a2)
{
  float *v2;
  float *v3;
  float *v4;
  uint64_t v5;

  v2 = result;
  v3 = *a2;
  if (*a2 == result || (v4 = a2[1], v4 == result))
  {
    v5 = 0;
    result = (float *)sub_1C990AB18(&v5);
    *(_QWORD *)v2 = v5;
  }
  else
  {
    *result = (float)((float)((float)((float)(*v3 * *v4) + 0.0) + (float)(v3[2] * v4[1])) + (float)(v3[4] * v4[2]))
            + (float)(v3[6] * v4[3]);
    result[1] = (float)((float)((float)((float)(v3[1] * *v4) + 0.0) + (float)(v3[3] * v4[1])) + (float)(v3[5] * v4[2]))
              + (float)(v3[7] * v4[3]);
  }
  return result;
}

_QWORD *sub_1C990ABC8(_QWORD *a1)
{
  void *v2;

  v2 = (void *)operator new();
  bzero(v2, 0x348uLL);
  sub_1C99096E0((uint64_t)v2);
  sub_1C9909AD8((uint64_t)v2 + 240);
  sub_1C9909E50((uint64_t)v2 + 480);
  sub_1C990A010((uint64_t)v2 + 600);
  sub_1C990A1D0((uint64_t)v2 + 720);
  *a1 = v2;
  return a1;
}

uint64_t sub_1C990AC38(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  size_t v5;
  void *v6;
  _BYTE *v7;
  _BYTE *v8;
  size_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  size_t v13;
  void *v14;
  _BYTE *v15;
  _BYTE *v16;
  size_t v17;
  char *v18;
  char *v19;
  void *memptr;

  v4 = *(unsigned int *)(a2 + 16);
  v5 = (4 * v4 + 31) & 0x7FFFFFFE0;
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = v5 >> 2;
  memptr = 0;
  malloc_type_posix_memalign(&memptr, 0x20uLL, v5, 0x49090899uLL);
  v6 = memptr;
  *(_QWORD *)a1 = memptr;
  if ((_DWORD)v4)
    memcpy(v6, *(const void **)a2, 4 * v4);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  v8 = *(_BYTE **)(a2 + 24);
  v7 = *(_BYTE **)(a2 + 32);
  v9 = v7 - v8;
  if (v7 != v8)
  {
    if ((v9 & 0x8000000000000000) != 0)
      goto LABEL_12;
    v10 = (char *)operator new(v7 - v8);
    *(_QWORD *)(a1 + 24) = v10;
    *(_QWORD *)(a1 + 32) = v10;
    v11 = &v10[v9];
    *(_QWORD *)(a1 + 40) = &v10[v9];
    memcpy(v10, v8, v9);
    *(_QWORD *)(a1 + 32) = v11;
  }
  v12 = *(unsigned int *)(a2 + 64);
  v13 = (4 * v12 + 31) & 0x7FFFFFFE0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = v13 >> 2;
  memptr = 0;
  malloc_type_posix_memalign(&memptr, 0x20uLL, v13, 0x49090899uLL);
  v14 = memptr;
  *(_QWORD *)(a1 + 48) = memptr;
  if ((_DWORD)v12)
    memcpy(v14, *(const void **)(a2 + 48), 4 * v12);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  v16 = *(_BYTE **)(a2 + 72);
  v15 = *(_BYTE **)(a2 + 80);
  v17 = v15 - v16;
  if (v15 != v16)
  {
    if ((v17 & 0x8000000000000000) == 0)
    {
      v18 = (char *)operator new(v15 - v16);
      *(_QWORD *)(a1 + 72) = v18;
      *(_QWORD *)(a1 + 80) = v18;
      v19 = &v18[v17];
      *(_QWORD *)(a1 + 88) = &v18[v17];
      memcpy(v18, v16, v17);
      *(_QWORD *)(a1 + 80) = v19;
      return a1;
    }
LABEL_12:
    abort();
  }
  return a1;
}

uint64_t *sub_1C990AD90(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  size_t v7;
  size_t v8;
  void *v9;
  unsigned int v10;
  size_t v11;
  size_t v12;
  void *v13;
  unsigned int v14;
  size_t v15;
  size_t v16;
  void *v17;
  unsigned int v18;
  size_t v19;
  size_t v20;
  void *v21;
  unsigned int v22;
  size_t v23;
  size_t v24;
  void *v25;
  unsigned int v26;
  size_t v27;
  size_t v28;
  void *v29;
  unsigned int v30;
  size_t v31;
  size_t v32;
  void *v33;
  unsigned int v34;
  size_t v35;
  size_t v36;
  void *v37;
  unsigned int v38;
  size_t v39;
  size_t v40;
  void *v41;
  unsigned int v42;
  size_t v43;
  size_t v44;
  void *v45;
  unsigned int v46;
  size_t v47;
  size_t v48;
  void *v49;
  unsigned int v50;
  size_t v51;
  size_t v52;
  void *v53;
  unsigned int v54;
  size_t v55;
  size_t v56;
  void *v57;
  unsigned int v58;
  size_t v59;
  size_t v60;
  void *v61;
  unsigned int v62;
  size_t v63;
  void *v64;
  uint64_t v65;
  size_t v66;
  void *v67;
  _BYTE *v68;
  _BYTE *v69;
  size_t v70;
  char *v71;
  char *v72;
  unsigned int v73;
  size_t v74;
  void *v75;
  unsigned int v76;
  size_t v77;
  void *v78;
  unsigned int v79;
  size_t v80;
  void *v81;
  uint64_t v82;
  size_t v83;
  void *v84;
  _BYTE *v85;
  _BYTE *v86;
  size_t v87;
  char *v88;
  char *v89;
  unsigned int v90;
  size_t v91;
  void *v92;
  unsigned int v93;
  size_t v94;
  void *v95;
  unsigned int v96;
  size_t v97;
  void *v98;
  uint64_t v99;
  size_t v100;
  void *v101;
  _BYTE *v102;
  _BYTE *v103;
  size_t v104;
  char *v105;
  char *v106;
  void *memptr;

  v4 = operator new();
  v5 = *a2;
  v6 = 2 * *(_DWORD *)(*a2 + 16);
  v7 = 4 * v6;
  v8 = (v7 + 31) & 0x7FFFFFFE0;
  *(_QWORD *)v4 = 0;
  *(_QWORD *)(v4 + 8) = v8 >> 2;
  memptr = 0;
  malloc_type_posix_memalign(&memptr, 0x20uLL, v8, 0x49090899uLL);
  v9 = memptr;
  *(_QWORD *)v4 = memptr;
  if (v6)
    memcpy(v9, *(const void **)v5, v7);
  *(_DWORD *)(v4 + 16) = *(_DWORD *)(v5 + 16);
  v10 = 2 * *(_DWORD *)(v5 + 40);
  v11 = 4 * v10;
  v12 = (v11 + 31) & 0x7FFFFFFE0;
  *(_QWORD *)(v4 + 24) = 0;
  *(_QWORD *)(v4 + 32) = v12 >> 2;
  memptr = 0;
  malloc_type_posix_memalign(&memptr, 0x20uLL, v12, 0x49090899uLL);
  v13 = memptr;
  *(_QWORD *)(v4 + 24) = memptr;
  if (v10)
    memcpy(v13, *(const void **)(v5 + 24), v11);
  *(_DWORD *)(v4 + 40) = *(_DWORD *)(v5 + 40);
  v14 = 2 * *(_DWORD *)(v5 + 64);
  v15 = 4 * v14;
  v16 = (v15 + 31) & 0x7FFFFFFE0;
  *(_QWORD *)(v4 + 48) = 0;
  *(_QWORD *)(v4 + 56) = v16 >> 2;
  memptr = 0;
  malloc_type_posix_memalign(&memptr, 0x20uLL, v16, 0x49090899uLL);
  v17 = memptr;
  *(_QWORD *)(v4 + 48) = memptr;
  if (v14)
    memcpy(v17, *(const void **)(v5 + 48), v15);
  *(_DWORD *)(v4 + 64) = *(_DWORD *)(v5 + 64);
  v18 = 2 * *(_DWORD *)(v5 + 88);
  v19 = 4 * v18;
  v20 = (v19 + 31) & 0x7FFFFFFE0;
  *(_QWORD *)(v4 + 72) = 0;
  *(_QWORD *)(v4 + 80) = v20 >> 2;
  memptr = 0;
  malloc_type_posix_memalign(&memptr, 0x20uLL, v20, 0x49090899uLL);
  v21 = memptr;
  *(_QWORD *)(v4 + 72) = memptr;
  if (v18)
    memcpy(v21, *(const void **)(v5 + 72), v19);
  *(_DWORD *)(v4 + 88) = *(_DWORD *)(v5 + 88);
  v22 = 2 * *(_DWORD *)(v5 + 112);
  v23 = 4 * v22;
  v24 = (v23 + 31) & 0x7FFFFFFE0;
  *(_QWORD *)(v4 + 96) = 0;
  *(_QWORD *)(v4 + 104) = v24 >> 2;
  memptr = 0;
  malloc_type_posix_memalign(&memptr, 0x20uLL, v24, 0x49090899uLL);
  v25 = memptr;
  *(_QWORD *)(v4 + 96) = memptr;
  if (v22)
    memcpy(v25, *(const void **)(v5 + 96), v23);
  *(_DWORD *)(v4 + 112) = *(_DWORD *)(v5 + 112);
  v26 = 2 * *(_DWORD *)(v5 + 136);
  v27 = 4 * v26;
  v28 = (v27 + 31) & 0x7FFFFFFE0;
  *(_QWORD *)(v4 + 120) = 0;
  *(_QWORD *)(v4 + 128) = v28 >> 2;
  memptr = 0;
  malloc_type_posix_memalign(&memptr, 0x20uLL, v28, 0x49090899uLL);
  v29 = memptr;
  *(_QWORD *)(v4 + 120) = memptr;
  if (v26)
    memcpy(v29, *(const void **)(v5 + 120), v27);
  *(_DWORD *)(v4 + 136) = *(_DWORD *)(v5 + 136);
  sub_1C990AC38(v4 + 144, v5 + 144);
  v30 = 2 * *(_DWORD *)(v5 + 256);
  v31 = 4 * v30;
  v32 = (v31 + 31) & 0x7FFFFFFE0;
  *(_QWORD *)(v4 + 240) = 0;
  *(_QWORD *)(v4 + 248) = v32 >> 2;
  memptr = 0;
  malloc_type_posix_memalign(&memptr, 0x20uLL, v32, 0x49090899uLL);
  v33 = memptr;
  *(_QWORD *)(v4 + 240) = memptr;
  if (v30)
    memcpy(v33, *(const void **)(v5 + 240), v31);
  *(_DWORD *)(v4 + 256) = *(_DWORD *)(v5 + 256);
  v34 = 2 * *(_DWORD *)(v5 + 280);
  v35 = 4 * v34;
  v36 = (v35 + 31) & 0x7FFFFFFE0;
  *(_QWORD *)(v4 + 264) = 0;
  *(_QWORD *)(v4 + 272) = v36 >> 2;
  memptr = 0;
  malloc_type_posix_memalign(&memptr, 0x20uLL, v36, 0x49090899uLL);
  v37 = memptr;
  *(_QWORD *)(v4 + 264) = memptr;
  if (v34)
    memcpy(v37, *(const void **)(v5 + 264), v35);
  *(_DWORD *)(v4 + 280) = *(_DWORD *)(v5 + 280);
  v38 = 2 * *(_DWORD *)(v5 + 304);
  v39 = 4 * v38;
  v40 = (v39 + 31) & 0x7FFFFFFE0;
  *(_QWORD *)(v4 + 288) = 0;
  *(_QWORD *)(v4 + 296) = v40 >> 2;
  memptr = 0;
  malloc_type_posix_memalign(&memptr, 0x20uLL, v40, 0x49090899uLL);
  v41 = memptr;
  *(_QWORD *)(v4 + 288) = memptr;
  if (v38)
    memcpy(v41, *(const void **)(v5 + 288), v39);
  *(_DWORD *)(v4 + 304) = *(_DWORD *)(v5 + 304);
  v42 = 2 * *(_DWORD *)(v5 + 328);
  v43 = 4 * v42;
  v44 = (v43 + 31) & 0x7FFFFFFE0;
  *(_QWORD *)(v4 + 312) = 0;
  *(_QWORD *)(v4 + 320) = v44 >> 2;
  memptr = 0;
  malloc_type_posix_memalign(&memptr, 0x20uLL, v44, 0x49090899uLL);
  v45 = memptr;
  *(_QWORD *)(v4 + 312) = memptr;
  if (v42)
    memcpy(v45, *(const void **)(v5 + 312), v43);
  *(_DWORD *)(v4 + 328) = *(_DWORD *)(v5 + 328);
  v46 = 2 * *(_DWORD *)(v5 + 352);
  v47 = 4 * v46;
  v48 = (v47 + 31) & 0x7FFFFFFE0;
  *(_QWORD *)(v4 + 336) = 0;
  *(_QWORD *)(v4 + 344) = v48 >> 2;
  memptr = 0;
  malloc_type_posix_memalign(&memptr, 0x20uLL, v48, 0x49090899uLL);
  v49 = memptr;
  *(_QWORD *)(v4 + 336) = memptr;
  if (v46)
    memcpy(v49, *(const void **)(v5 + 336), v47);
  *(_DWORD *)(v4 + 352) = *(_DWORD *)(v5 + 352);
  v50 = 2 * *(_DWORD *)(v5 + 376);
  v51 = 4 * v50;
  v52 = (v51 + 31) & 0x7FFFFFFE0;
  *(_QWORD *)(v4 + 360) = 0;
  *(_QWORD *)(v4 + 368) = v52 >> 2;
  memptr = 0;
  malloc_type_posix_memalign(&memptr, 0x20uLL, v52, 0x49090899uLL);
  v53 = memptr;
  *(_QWORD *)(v4 + 360) = memptr;
  if (v50)
    memcpy(v53, *(const void **)(v5 + 360), v51);
  *(_DWORD *)(v4 + 376) = *(_DWORD *)(v5 + 376);
  sub_1C990AC38(v4 + 384, v5 + 384);
  v54 = 2 * *(_DWORD *)(v5 + 496);
  v55 = 4 * v54;
  v56 = (v55 + 31) & 0x7FFFFFFE0;
  *(_QWORD *)(v4 + 480) = 0;
  *(_QWORD *)(v4 + 488) = v56 >> 2;
  memptr = 0;
  malloc_type_posix_memalign(&memptr, 0x20uLL, v56, 0x49090899uLL);
  v57 = memptr;
  *(_QWORD *)(v4 + 480) = memptr;
  if (v54)
    memcpy(v57, *(const void **)(v5 + 480), v55);
  *(_DWORD *)(v4 + 496) = *(_DWORD *)(v5 + 496);
  v58 = 2 * *(_DWORD *)(v5 + 520);
  v59 = 4 * v58;
  v60 = (v59 + 31) & 0x7FFFFFFE0;
  *(_QWORD *)(v4 + 504) = 0;
  *(_QWORD *)(v4 + 512) = v60 >> 2;
  memptr = 0;
  malloc_type_posix_memalign(&memptr, 0x20uLL, v60, 0x49090899uLL);
  v61 = memptr;
  *(_QWORD *)(v4 + 504) = memptr;
  if (v58)
    memcpy(v61, *(const void **)(v5 + 504), v59);
  *(_DWORD *)(v4 + 520) = *(_DWORD *)(v5 + 520);
  v62 = 2 * *(_DWORD *)(v5 + 544);
  *(_QWORD *)(v4 + 528) = 0;
  v63 = (4 * v62 + 31) & 0x7FFFFFFE0;
  *(_QWORD *)(v4 + 536) = v63 >> 2;
  memptr = 0;
  malloc_type_posix_memalign(&memptr, 0x20uLL, v63, 0x49090899uLL);
  v64 = memptr;
  *(_QWORD *)(v4 + 528) = memptr;
  if (v62)
    memcpy(v64, *(const void **)(v5 + 528), 4 * v62);
  *(_DWORD *)(v4 + 544) = *(_DWORD *)(v5 + 544);
  v65 = *(unsigned int *)(v5 + 568);
  *(_QWORD *)(v4 + 552) = 0;
  v66 = (4 * v65 + 31) & 0x7FFFFFFE0;
  *(_QWORD *)(v4 + 560) = v66 >> 2;
  memptr = 0;
  malloc_type_posix_memalign(&memptr, 0x20uLL, v66, 0x49090899uLL);
  v67 = memptr;
  *(_QWORD *)(v4 + 552) = memptr;
  if ((_DWORD)v65)
    memcpy(v67, *(const void **)(v5 + 552), 4 * v65);
  *(_DWORD *)(v4 + 568) = *(_DWORD *)(v5 + 568);
  *(_QWORD *)(v4 + 576) = 0;
  *(_QWORD *)(v4 + 592) = 0;
  *(_QWORD *)(v4 + 584) = 0;
  v68 = *(_BYTE **)(v5 + 576);
  v69 = *(_BYTE **)(v5 + 584);
  v70 = v69 - v68;
  if (v69 != v68)
  {
    if ((v70 & 0x8000000000000000) != 0)
      goto LABEL_59;
    v71 = (char *)operator new(v69 - v68);
    *(_QWORD *)(v4 + 576) = v71;
    *(_QWORD *)(v4 + 584) = v71;
    v72 = &v71[v70];
    *(_QWORD *)(v4 + 592) = &v71[v70];
    memcpy(v71, v68, v70);
    *(_QWORD *)(v4 + 584) = v72;
  }
  v73 = 2 * *(_DWORD *)(v5 + 616);
  *(_QWORD *)(v4 + 600) = 0;
  v74 = (4 * v73 + 31) & 0x7FFFFFFE0;
  *(_QWORD *)(v4 + 608) = v74 >> 2;
  memptr = 0;
  malloc_type_posix_memalign(&memptr, 0x20uLL, v74, 0x49090899uLL);
  v75 = memptr;
  *(_QWORD *)(v4 + 600) = memptr;
  if (v73)
    memcpy(v75, *(const void **)(v5 + 600), 4 * v73);
  *(_DWORD *)(v4 + 616) = *(_DWORD *)(v5 + 616);
  v76 = 2 * *(_DWORD *)(v5 + 640);
  *(_QWORD *)(v4 + 624) = 0;
  v77 = (4 * v76 + 31) & 0x7FFFFFFE0;
  *(_QWORD *)(v4 + 632) = v77 >> 2;
  memptr = 0;
  malloc_type_posix_memalign(&memptr, 0x20uLL, v77, 0x49090899uLL);
  v78 = memptr;
  *(_QWORD *)(v4 + 624) = memptr;
  if (v76)
    memcpy(v78, *(const void **)(v5 + 624), 4 * v76);
  *(_DWORD *)(v4 + 640) = *(_DWORD *)(v5 + 640);
  v79 = 2 * *(_DWORD *)(v5 + 664);
  *(_QWORD *)(v4 + 648) = 0;
  v80 = (4 * v79 + 31) & 0x7FFFFFFE0;
  *(_QWORD *)(v4 + 656) = v80 >> 2;
  memptr = 0;
  malloc_type_posix_memalign(&memptr, 0x20uLL, v80, 0x49090899uLL);
  v81 = memptr;
  *(_QWORD *)(v4 + 648) = memptr;
  if (v79)
    memcpy(v81, *(const void **)(v5 + 648), 4 * v79);
  *(_DWORD *)(v4 + 664) = *(_DWORD *)(v5 + 664);
  v82 = *(unsigned int *)(v5 + 688);
  *(_QWORD *)(v4 + 672) = 0;
  v83 = (4 * v82 + 31) & 0x7FFFFFFE0;
  *(_QWORD *)(v4 + 680) = v83 >> 2;
  memptr = 0;
  malloc_type_posix_memalign(&memptr, 0x20uLL, v83, 0x49090899uLL);
  v84 = memptr;
  *(_QWORD *)(v4 + 672) = memptr;
  if ((_DWORD)v82)
    memcpy(v84, *(const void **)(v5 + 672), 4 * v82);
  *(_DWORD *)(v4 + 688) = *(_DWORD *)(v5 + 688);
  *(_QWORD *)(v4 + 696) = 0;
  *(_QWORD *)(v4 + 712) = 0;
  *(_QWORD *)(v4 + 704) = 0;
  v85 = *(_BYTE **)(v5 + 696);
  v86 = *(_BYTE **)(v5 + 704);
  v87 = v86 - v85;
  if (v86 != v85)
  {
    if ((v87 & 0x8000000000000000) != 0)
      goto LABEL_59;
    v88 = (char *)operator new(v86 - v85);
    *(_QWORD *)(v4 + 696) = v88;
    *(_QWORD *)(v4 + 704) = v88;
    v89 = &v88[v87];
    *(_QWORD *)(v4 + 712) = &v88[v87];
    memcpy(v88, v85, v87);
    *(_QWORD *)(v4 + 704) = v89;
  }
  v90 = 2 * *(_DWORD *)(v5 + 736);
  *(_QWORD *)(v4 + 720) = 0;
  v91 = (4 * v90 + 31) & 0x7FFFFFFE0;
  *(_QWORD *)(v4 + 728) = v91 >> 2;
  memptr = 0;
  malloc_type_posix_memalign(&memptr, 0x20uLL, v91, 0x49090899uLL);
  v92 = memptr;
  *(_QWORD *)(v4 + 720) = memptr;
  if (v90)
    memcpy(v92, *(const void **)(v5 + 720), 4 * v90);
  *(_DWORD *)(v4 + 736) = *(_DWORD *)(v5 + 736);
  v93 = 2 * *(_DWORD *)(v5 + 760);
  *(_QWORD *)(v4 + 744) = 0;
  v94 = (4 * v93 + 31) & 0x7FFFFFFE0;
  *(_QWORD *)(v4 + 752) = v94 >> 2;
  memptr = 0;
  malloc_type_posix_memalign(&memptr, 0x20uLL, v94, 0x49090899uLL);
  v95 = memptr;
  *(_QWORD *)(v4 + 744) = memptr;
  if (v93)
    memcpy(v95, *(const void **)(v5 + 744), 4 * v93);
  *(_DWORD *)(v4 + 760) = *(_DWORD *)(v5 + 760);
  v96 = 2 * *(_DWORD *)(v5 + 784);
  *(_QWORD *)(v4 + 768) = 0;
  v97 = (4 * v96 + 31) & 0x7FFFFFFE0;
  *(_QWORD *)(v4 + 776) = v97 >> 2;
  memptr = 0;
  malloc_type_posix_memalign(&memptr, 0x20uLL, v97, 0x49090899uLL);
  v98 = memptr;
  *(_QWORD *)(v4 + 768) = memptr;
  if (v96)
    memcpy(v98, *(const void **)(v5 + 768), 4 * v96);
  *(_DWORD *)(v4 + 784) = *(_DWORD *)(v5 + 784);
  v99 = *(unsigned int *)(v5 + 808);
  *(_QWORD *)(v4 + 792) = 0;
  v100 = (4 * v99 + 31) & 0x7FFFFFFE0;
  *(_QWORD *)(v4 + 800) = v100 >> 2;
  memptr = 0;
  malloc_type_posix_memalign(&memptr, 0x20uLL, v100, 0x49090899uLL);
  v101 = memptr;
  *(_QWORD *)(v4 + 792) = memptr;
  if ((_DWORD)v99)
    memcpy(v101, *(const void **)(v5 + 792), 4 * v99);
  *(_DWORD *)(v4 + 808) = *(_DWORD *)(v5 + 808);
  *(_QWORD *)(v4 + 816) = 0;
  *(_QWORD *)(v4 + 832) = 0;
  *(_QWORD *)(v4 + 824) = 0;
  v102 = *(_BYTE **)(v5 + 816);
  v103 = *(_BYTE **)(v5 + 824);
  v104 = v103 - v102;
  if (v103 != v102)
  {
    if ((v104 & 0x8000000000000000) == 0)
    {
      v105 = (char *)operator new(v103 - v102);
      *(_QWORD *)(v4 + 816) = v105;
      *(_QWORD *)(v4 + 824) = v105;
      v106 = &v105[v104];
      *(_QWORD *)(v4 + 832) = &v105[v104];
      memcpy(v105, v102, v104);
      *(_QWORD *)(v4 + 824) = v106;
      goto LABEL_58;
    }
LABEL_59:
    abort();
  }
LABEL_58:
  *a1 = v4;
  return a1;
}

uint64_t *sub_1C990B6E0(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  void *v6;
  size_t v7;
  size_t v8;
  unint64_t v9;
  void *v10;
  size_t v11;
  size_t v12;
  unint64_t v13;
  void *v14;
  size_t v15;
  size_t v16;
  unint64_t v17;
  void *v18;
  size_t v19;
  size_t v20;
  unint64_t v21;
  void *v22;
  size_t v23;
  size_t v24;
  unint64_t v25;
  void *v26;
  size_t v27;
  size_t v28;
  unint64_t v29;
  void *v30;
  size_t v31;
  size_t v32;
  unint64_t v33;
  void *v34;
  size_t v35;
  size_t v36;
  unint64_t v37;
  void *v38;
  size_t v39;
  size_t v40;
  unint64_t v41;
  void *v42;
  size_t v43;
  size_t v44;
  unint64_t v45;
  void *v46;
  size_t v47;
  size_t v48;
  unint64_t v49;
  void *v50;
  size_t v51;
  size_t v52;
  void *memptr;

  v4 = *a1;
  sub_1C990BDC4(*a1, a2);
  sub_1C990BDC4(v4 + 48, a2 + 48);
  sub_1C990BDC4(v4 + 96, a2 + 96);
  sub_1C990BEFC(v4 + 144, a2 + 144);
  sub_1C990BDC4(v4 + 240, a2 + 240);
  sub_1C990BDC4(v4 + 288, a2 + 288);
  sub_1C990BDC4(v4 + 336, a2 + 336);
  sub_1C990BEFC(v4 + 384, a2 + 384);
  if (v4 != a2)
  {
    v5 = (2 * *(_DWORD *)(a2 + 496));
    if ((_DWORD)v5)
    {
      v6 = *(void **)(v4 + 480);
      v7 = 4 * v5;
      if (*(_QWORD *)(v4 + 488) < v5)
      {
        free(v6);
        v8 = (v7 + 31) & 0x7FFFFFFE0;
        *(_QWORD *)(v4 + 480) = 0;
        *(_QWORD *)(v4 + 488) = v8 >> 2;
        memptr = 0;
        malloc_type_posix_memalign(&memptr, 0x20uLL, v8, 0x49090899uLL);
        v6 = memptr;
        *(_QWORD *)(v4 + 480) = memptr;
      }
      memcpy(v6, *(const void **)(a2 + 480), v7);
    }
    else
    {
      free(*(void **)(v4 + 480));
      *(_QWORD *)(v4 + 480) = 0;
      *(_QWORD *)(v4 + 488) = 0;
    }
    *(_DWORD *)(v4 + 496) = *(_DWORD *)(a2 + 496);
    v9 = (2 * *(_DWORD *)(a2 + 520));
    if ((_DWORD)v9)
    {
      v10 = *(void **)(v4 + 504);
      v11 = 4 * v9;
      if (*(_QWORD *)(v4 + 512) < v9)
      {
        free(v10);
        v12 = (v11 + 31) & 0x7FFFFFFE0;
        *(_QWORD *)(v4 + 504) = 0;
        *(_QWORD *)(v4 + 512) = v12 >> 2;
        memptr = 0;
        malloc_type_posix_memalign(&memptr, 0x20uLL, v12, 0x49090899uLL);
        v10 = memptr;
        *(_QWORD *)(v4 + 504) = memptr;
      }
      memcpy(v10, *(const void **)(a2 + 504), v11);
    }
    else
    {
      free(*(void **)(v4 + 504));
      *(_QWORD *)(v4 + 504) = 0;
      *(_QWORD *)(v4 + 512) = 0;
    }
    *(_DWORD *)(v4 + 520) = *(_DWORD *)(a2 + 520);
    v13 = (2 * *(_DWORD *)(a2 + 544));
    if ((_DWORD)v13)
    {
      v14 = *(void **)(v4 + 528);
      v15 = 4 * v13;
      if (*(_QWORD *)(v4 + 536) < v13)
      {
        free(v14);
        *(_QWORD *)(v4 + 528) = 0;
        v16 = (v15 + 31) & 0x7FFFFFFE0;
        *(_QWORD *)(v4 + 536) = v16 >> 2;
        memptr = 0;
        malloc_type_posix_memalign(&memptr, 0x20uLL, v16, 0x49090899uLL);
        v14 = memptr;
        *(_QWORD *)(v4 + 528) = memptr;
      }
      memcpy(v14, *(const void **)(a2 + 528), v15);
    }
    else
    {
      free(*(void **)(v4 + 528));
      *(_QWORD *)(v4 + 528) = 0;
      *(_QWORD *)(v4 + 536) = 0;
    }
    *(_DWORD *)(v4 + 544) = *(_DWORD *)(a2 + 544);
    v17 = *(unsigned int *)(a2 + 568);
    if ((_DWORD)v17)
    {
      v18 = *(void **)(v4 + 552);
      v19 = 4 * v17;
      if (*(_QWORD *)(v4 + 560) < v17)
      {
        free(v18);
        *(_QWORD *)(v4 + 552) = 0;
        v20 = (v19 + 31) & 0x7FFFFFFE0;
        *(_QWORD *)(v4 + 560) = v20 >> 2;
        memptr = 0;
        malloc_type_posix_memalign(&memptr, 0x20uLL, v20, 0x49090899uLL);
        v18 = memptr;
        *(_QWORD *)(v4 + 552) = memptr;
      }
      memcpy(v18, *(const void **)(a2 + 552), v19);
    }
    else
    {
      free(*(void **)(v4 + 552));
      *(_QWORD *)(v4 + 552) = 0;
      *(_QWORD *)(v4 + 560) = 0;
    }
    *(_DWORD *)(v4 + 568) = *(_DWORD *)(a2 + 568);
    sub_1C990C04C((_QWORD *)(v4 + 576), *(char **)(a2 + 576), *(char **)(a2 + 584), *(_QWORD *)(a2 + 584) - *(_QWORD *)(a2 + 576));
    v21 = (2 * *(_DWORD *)(a2 + 616));
    if ((_DWORD)v21)
    {
      v22 = *(void **)(v4 + 600);
      v23 = 4 * v21;
      if (*(_QWORD *)(v4 + 608) < v21)
      {
        free(v22);
        *(_QWORD *)(v4 + 600) = 0;
        v24 = (v23 + 31) & 0x7FFFFFFE0;
        *(_QWORD *)(v4 + 608) = v24 >> 2;
        memptr = 0;
        malloc_type_posix_memalign(&memptr, 0x20uLL, v24, 0x49090899uLL);
        v22 = memptr;
        *(_QWORD *)(v4 + 600) = memptr;
      }
      memcpy(v22, *(const void **)(a2 + 600), v23);
    }
    else
    {
      free(*(void **)(v4 + 600));
      *(_QWORD *)(v4 + 600) = 0;
      *(_QWORD *)(v4 + 608) = 0;
    }
    *(_DWORD *)(v4 + 616) = *(_DWORD *)(a2 + 616);
    v25 = (2 * *(_DWORD *)(a2 + 640));
    if ((_DWORD)v25)
    {
      v26 = *(void **)(v4 + 624);
      v27 = 4 * v25;
      if (*(_QWORD *)(v4 + 632) < v25)
      {
        free(v26);
        *(_QWORD *)(v4 + 624) = 0;
        v28 = (v27 + 31) & 0x7FFFFFFE0;
        *(_QWORD *)(v4 + 632) = v28 >> 2;
        memptr = 0;
        malloc_type_posix_memalign(&memptr, 0x20uLL, v28, 0x49090899uLL);
        v26 = memptr;
        *(_QWORD *)(v4 + 624) = memptr;
      }
      memcpy(v26, *(const void **)(a2 + 624), v27);
    }
    else
    {
      free(*(void **)(v4 + 624));
      *(_QWORD *)(v4 + 624) = 0;
      *(_QWORD *)(v4 + 632) = 0;
    }
    *(_DWORD *)(v4 + 640) = *(_DWORD *)(a2 + 640);
    v29 = (2 * *(_DWORD *)(a2 + 664));
    if ((_DWORD)v29)
    {
      v30 = *(void **)(v4 + 648);
      v31 = 4 * v29;
      if (*(_QWORD *)(v4 + 656) < v29)
      {
        free(v30);
        *(_QWORD *)(v4 + 648) = 0;
        v32 = (v31 + 31) & 0x7FFFFFFE0;
        *(_QWORD *)(v4 + 656) = v32 >> 2;
        memptr = 0;
        malloc_type_posix_memalign(&memptr, 0x20uLL, v32, 0x49090899uLL);
        v30 = memptr;
        *(_QWORD *)(v4 + 648) = memptr;
      }
      memcpy(v30, *(const void **)(a2 + 648), v31);
    }
    else
    {
      free(*(void **)(v4 + 648));
      *(_QWORD *)(v4 + 648) = 0;
      *(_QWORD *)(v4 + 656) = 0;
    }
    *(_DWORD *)(v4 + 664) = *(_DWORD *)(a2 + 664);
    v33 = *(unsigned int *)(a2 + 688);
    if ((_DWORD)v33)
    {
      v34 = *(void **)(v4 + 672);
      if (*(_QWORD *)(v4 + 680) >= v33)
      {
        v35 = 4 * v33;
      }
      else
      {
        free(v34);
        *(_QWORD *)(v4 + 672) = 0;
        v35 = 4 * v33;
        v36 = (v35 + 31) & 0x7FFFFFFE0;
        *(_QWORD *)(v4 + 680) = v36 >> 2;
        memptr = 0;
        malloc_type_posix_memalign(&memptr, 0x20uLL, v36, 0x49090899uLL);
        v34 = memptr;
        *(_QWORD *)(v4 + 672) = memptr;
      }
      memcpy(v34, *(const void **)(a2 + 672), v35);
    }
    else
    {
      free(*(void **)(v4 + 672));
      *(_QWORD *)(v4 + 672) = 0;
      *(_QWORD *)(v4 + 680) = 0;
    }
    *(_DWORD *)(v4 + 688) = *(_DWORD *)(a2 + 688);
    sub_1C990C04C((_QWORD *)(v4 + 696), *(char **)(a2 + 696), *(char **)(a2 + 704), *(_QWORD *)(a2 + 704) - *(_QWORD *)(a2 + 696));
    v37 = (2 * *(_DWORD *)(a2 + 736));
    if ((_DWORD)v37)
    {
      v38 = *(void **)(v4 + 720);
      if (*(_QWORD *)(v4 + 728) >= v37)
      {
        v39 = 4 * v37;
      }
      else
      {
        free(v38);
        *(_QWORD *)(v4 + 720) = 0;
        v39 = 4 * v37;
        v40 = (v39 + 31) & 0x7FFFFFFE0;
        *(_QWORD *)(v4 + 728) = v40 >> 2;
        memptr = 0;
        malloc_type_posix_memalign(&memptr, 0x20uLL, v40, 0x49090899uLL);
        v38 = memptr;
        *(_QWORD *)(v4 + 720) = memptr;
      }
      memcpy(v38, *(const void **)(a2 + 720), v39);
    }
    else
    {
      free(*(void **)(v4 + 720));
      *(_QWORD *)(v4 + 720) = 0;
      *(_QWORD *)(v4 + 728) = 0;
    }
    *(_DWORD *)(v4 + 736) = *(_DWORD *)(a2 + 736);
    v41 = (2 * *(_DWORD *)(a2 + 760));
    if ((_DWORD)v41)
    {
      v42 = *(void **)(v4 + 744);
      if (*(_QWORD *)(v4 + 752) >= v41)
      {
        v43 = 4 * v41;
      }
      else
      {
        free(v42);
        *(_QWORD *)(v4 + 744) = 0;
        v43 = 4 * v41;
        v44 = (v43 + 31) & 0x7FFFFFFE0;
        *(_QWORD *)(v4 + 752) = v44 >> 2;
        memptr = 0;
        malloc_type_posix_memalign(&memptr, 0x20uLL, v44, 0x49090899uLL);
        v42 = memptr;
        *(_QWORD *)(v4 + 744) = memptr;
      }
      memcpy(v42, *(const void **)(a2 + 744), v43);
    }
    else
    {
      free(*(void **)(v4 + 744));
      *(_QWORD *)(v4 + 744) = 0;
      *(_QWORD *)(v4 + 752) = 0;
    }
    *(_DWORD *)(v4 + 760) = *(_DWORD *)(a2 + 760);
    v45 = (2 * *(_DWORD *)(a2 + 784));
    if ((_DWORD)v45)
    {
      v46 = *(void **)(v4 + 768);
      if (*(_QWORD *)(v4 + 776) >= v45)
      {
        v47 = 4 * v45;
      }
      else
      {
        free(v46);
        *(_QWORD *)(v4 + 768) = 0;
        v47 = 4 * v45;
        v48 = (v47 + 31) & 0x7FFFFFFE0;
        *(_QWORD *)(v4 + 776) = v48 >> 2;
        memptr = 0;
        malloc_type_posix_memalign(&memptr, 0x20uLL, v48, 0x49090899uLL);
        v46 = memptr;
        *(_QWORD *)(v4 + 768) = memptr;
      }
      memcpy(v46, *(const void **)(a2 + 768), v47);
    }
    else
    {
      free(*(void **)(v4 + 768));
      *(_QWORD *)(v4 + 768) = 0;
      *(_QWORD *)(v4 + 776) = 0;
    }
    *(_DWORD *)(v4 + 784) = *(_DWORD *)(a2 + 784);
    v49 = *(unsigned int *)(a2 + 808);
    if ((_DWORD)v49)
    {
      v50 = *(void **)(v4 + 792);
      if (*(_QWORD *)(v4 + 800) >= v49)
      {
        v51 = 4 * v49;
      }
      else
      {
        free(v50);
        *(_QWORD *)(v4 + 792) = 0;
        v51 = 4 * v49;
        v52 = (v51 + 31) & 0x7FFFFFFE0;
        *(_QWORD *)(v4 + 800) = v52 >> 2;
        memptr = 0;
        malloc_type_posix_memalign(&memptr, 0x20uLL, v52, 0x49090899uLL);
        v50 = memptr;
        *(_QWORD *)(v4 + 792) = memptr;
      }
      memcpy(v50, *(const void **)(a2 + 792), v51);
    }
    else
    {
      free(*(void **)(v4 + 792));
      *(_QWORD *)(v4 + 792) = 0;
      *(_QWORD *)(v4 + 800) = 0;
    }
    *(_DWORD *)(v4 + 808) = *(_DWORD *)(a2 + 808);
    sub_1C990C04C((_QWORD *)(v4 + 816), *(char **)(a2 + 816), *(char **)(a2 + 824), *(_QWORD *)(a2 + 824) - *(_QWORD *)(a2 + 816));
  }
  return a1;
}

uint64_t sub_1C990BDC4(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  void *v5;
  size_t v6;
  size_t v7;
  unint64_t v8;
  void *v9;
  size_t v10;
  size_t v11;
  void *memptr;

  if (a1 != a2)
  {
    v4 = (2 * *(_DWORD *)(a2 + 16));
    if ((_DWORD)v4)
    {
      v5 = *(void **)a1;
      if (*(_QWORD *)(a1 + 8) >= v4)
      {
        v6 = 4 * v4;
      }
      else
      {
        free(v5);
        v6 = 4 * v4;
        v7 = (v6 + 31) & 0x7FFFFFFE0;
        *(_QWORD *)a1 = 0;
        *(_QWORD *)(a1 + 8) = v7 >> 2;
        memptr = 0;
        malloc_type_posix_memalign(&memptr, 0x20uLL, v7, 0x49090899uLL);
        v5 = memptr;
        *(_QWORD *)a1 = memptr;
      }
      memcpy(v5, *(const void **)a2, v6);
    }
    else
    {
      free(*(void **)a1);
      *(_QWORD *)a1 = 0;
      *(_QWORD *)(a1 + 8) = 0;
    }
    *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
    v8 = (2 * *(_DWORD *)(a2 + 40));
    if ((_DWORD)v8)
    {
      v9 = *(void **)(a1 + 24);
      if (*(_QWORD *)(a1 + 32) >= v8)
      {
        v10 = 4 * v8;
      }
      else
      {
        free(v9);
        v10 = 4 * v8;
        v11 = (v10 + 31) & 0x7FFFFFFE0;
        *(_QWORD *)(a1 + 24) = 0;
        *(_QWORD *)(a1 + 32) = v11 >> 2;
        memptr = 0;
        malloc_type_posix_memalign(&memptr, 0x20uLL, v11, 0x49090899uLL);
        v9 = memptr;
        *(_QWORD *)(a1 + 24) = memptr;
      }
      memcpy(v9, *(const void **)(a2 + 24), v10);
    }
    else
    {
      free(*(void **)(a1 + 24));
      *(_QWORD *)(a1 + 24) = 0;
      *(_QWORD *)(a1 + 32) = 0;
    }
    *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  }
  return a1;
}

uint64_t sub_1C990BEFC(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  void *v5;
  size_t v6;
  size_t v7;
  unint64_t v8;
  void *v9;
  size_t v10;
  size_t v11;
  void *memptr;

  if (a1 != a2)
  {
    v4 = *(unsigned int *)(a2 + 16);
    if ((_DWORD)v4)
    {
      v5 = *(void **)a1;
      if (*(_QWORD *)(a1 + 8) >= v4)
      {
        v6 = 4 * v4;
      }
      else
      {
        free(v5);
        v6 = 4 * v4;
        v7 = (v6 + 31) & 0x7FFFFFFE0;
        *(_QWORD *)a1 = 0;
        *(_QWORD *)(a1 + 8) = v7 >> 2;
        memptr = 0;
        malloc_type_posix_memalign(&memptr, 0x20uLL, v7, 0x49090899uLL);
        v5 = memptr;
        *(_QWORD *)a1 = memptr;
      }
      memcpy(v5, *(const void **)a2, v6);
    }
    else
    {
      free(*(void **)a1);
      *(_QWORD *)a1 = 0;
      *(_QWORD *)(a1 + 8) = 0;
    }
    *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
    sub_1C990C04C((_QWORD *)(a1 + 24), *(char **)(a2 + 24), *(char **)(a2 + 32), *(_QWORD *)(a2 + 32) - *(_QWORD *)(a2 + 24));
    v8 = *(unsigned int *)(a2 + 64);
    if ((_DWORD)v8)
    {
      v9 = *(void **)(a1 + 48);
      if (*(_QWORD *)(a1 + 56) >= v8)
      {
        v10 = 4 * v8;
      }
      else
      {
        free(v9);
        v10 = 4 * v8;
        v11 = (v10 + 31) & 0x7FFFFFFE0;
        *(_QWORD *)(a1 + 48) = 0;
        *(_QWORD *)(a1 + 56) = v11 >> 2;
        memptr = 0;
        malloc_type_posix_memalign(&memptr, 0x20uLL, v11, 0x49090899uLL);
        v9 = memptr;
        *(_QWORD *)(a1 + 48) = memptr;
      }
      memcpy(v9, *(const void **)(a2 + 48), v10);
    }
    else
    {
      free(*(void **)(a1 + 48));
      *(_QWORD *)(a1 + 48) = 0;
      *(_QWORD *)(a1 + 56) = 0;
    }
    *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
    sub_1C990C04C((_QWORD *)(a1 + 72), *(char **)(a2 + 72), *(char **)(a2 + 80), *(_QWORD *)(a2 + 80) - *(_QWORD *)(a2 + 72));
  }
  return a1;
}

_QWORD *sub_1C990C04C(_QWORD *result, char *__src, char *a3, unint64_t a4)
{
  _QWORD *v7;
  unint64_t v8;
  char *v9;
  uint64_t v10;
  size_t v11;
  size_t v12;
  _BYTE *v13;
  size_t v14;
  char *v15;
  char *v16;

  v7 = result;
  v8 = result[2];
  v9 = (char *)*result;
  if (v8 - *result < a4)
  {
    if (v9)
    {
      result[1] = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if ((a4 & 0x8000000000000000) != 0)
      goto LABEL_23;
    v10 = 2 * v8;
    if (2 * v8 <= a4)
      v10 = a4;
    v11 = v8 >= 0x3FFFFFFFFFFFFFFFLL ? 0x7FFFFFFFFFFFFFFFLL : v10;
    if ((v11 & 0x8000000000000000) != 0)
LABEL_23:
      abort();
    result = operator new(v11);
    v9 = (char *)result;
    *v7 = result;
    v7[1] = result;
    v7[2] = (char *)result + v11;
    v12 = a3 - __src;
    if (v12)
      result = memcpy(result, __src, v12);
LABEL_21:
    v16 = &v9[v12];
    goto LABEL_22;
  }
  v13 = (_BYTE *)result[1];
  v14 = v13 - v9;
  if (v13 - v9 >= a4)
  {
    v12 = a3 - __src;
    if (v12)
      result = memmove((void *)*result, __src, v12);
    goto LABEL_21;
  }
  v15 = &__src[v14];
  if (v13 != v9)
  {
    result = memmove((void *)*result, __src, v14);
    v9 = (char *)v7[1];
  }
  if (a3 != v15)
    result = memmove(v9, v15, a3 - v15);
  v16 = &v9[a3 - v15];
LABEL_22:
  v7[1] = v16;
  return result;
}

uint64_t *sub_1C990C17C(uint64_t *a1)
{
  uint64_t v2;
  void *v3;
  void *v4;
  void *v5;
  uint64_t v6;

  v2 = *a1;
  if (*a1)
  {
    v3 = *(void **)(v2 + 816);
    if (v3)
    {
      *(_QWORD *)(v2 + 824) = v3;
      operator delete(v3);
    }
    free(*(void **)(v2 + 792));
    free(*(void **)(v2 + 768));
    free(*(void **)(v2 + 744));
    free(*(void **)(v2 + 720));
    v4 = *(void **)(v2 + 696);
    if (v4)
    {
      *(_QWORD *)(v2 + 704) = v4;
      operator delete(v4);
    }
    free(*(void **)(v2 + 672));
    free(*(void **)(v2 + 648));
    free(*(void **)(v2 + 624));
    free(*(void **)(v2 + 600));
    v5 = *(void **)(v2 + 576);
    if (v5)
    {
      *(_QWORD *)(v2 + 584) = v5;
      operator delete(v5);
    }
    free(*(void **)(v2 + 552));
    free(*(void **)(v2 + 528));
    free(*(void **)(v2 + 504));
    free(*(void **)(v2 + 480));
    sub_1C9909A58(v2 + 240);
    v6 = sub_1C9909A58(v2);
    MEMORY[0x1CAA44AFC](v6, 0x1080C40BC4CA667);
  }
  return a1;
}

void sub_1C990C258(uint64_t a1, int a2, int a3)
{
  unint64_t v4;
  size_t v5;
  void *memptr;

  *(_DWORD *)(a1 + 16) = a2;
  *(_DWORD *)(a1 + 20) = a3;
  v4 = (a3 * a2);
  if ((_DWORD)v4)
  {
    if (*(_QWORD *)(a1 + 8) < v4)
    {
      free(*(void **)a1);
      v5 = (4 * v4 + 31) & 0x7FFFFFFE0;
      *(_QWORD *)a1 = 0;
      *(_QWORD *)(a1 + 8) = v5 >> 2;
      memptr = 0;
      malloc_type_posix_memalign(&memptr, 0x20uLL, v5, 0x49090899uLL);
      *(_QWORD *)a1 = memptr;
    }
  }
  else
  {
    free(*(void **)a1);
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
  }
}

void **sub_1C990C2E0(void **a1, uint64_t a2)
{
  size_t v3;
  void *memptr;

  v3 = (4 * a2 + 31) & 0x7FFFFFFFFFFFFFE0;
  *a1 = 0;
  a1[1] = (void *)(v3 >> 2);
  memptr = 0;
  malloc_type_posix_memalign(&memptr, 0x20uLL, v3, 0x49090899uLL);
  *a1 = memptr;
  return a1;
}

void sub_1C990C33C(uint64_t a1, uint64_t a2)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  size_t v7;
  int v8;
  void *v9;
  size_t v10;
  int v11;
  void *v12;
  size_t v13;
  uint64_t v14;
  void *memptr;

  v4 = *(void **)a1;
  v6 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  if (*(void **)v6 == v4 || (void *)(*(_QWORD *)(v5 + 8) - 4 * *(unsigned int *)(v5 + 20)) == v4)
  {
    v7 = (4 * (*(_DWORD *)(v5 + 4) * *(_DWORD *)(v6 + 16)) + 31) & 0x7FFFFFFE0;
    v13 = v7 >> 2;
    memptr = 0;
    malloc_type_posix_memalign(&memptr, 0x20uLL, v7, 0x49090899uLL);
    v12 = memptr;
    v8 = *(_DWORD *)(*(_QWORD *)(a2 + 16) + 4);
    LODWORD(v14) = *(_DWORD *)(*(_QWORD *)(a2 + 8) + 16);
    HIDWORD(v14) = v8;
    sub_1C990C33C(&v12, a2);
    v9 = *(void **)a1;
    v10 = v13;
    *(_QWORD *)a1 = v12;
    *(_QWORD *)(a1 + 8) = v10;
    *(_QWORD *)(a1 + 16) = v14;
    free(v9);
  }
  else if (*(_DWORD *)(v6 + 20) * *(_DWORD *)(v6 + 16) && *(_DWORD *)(v5 + 4) * *(_DWORD *)v5)
  {
    cva::VecLib<float>::gemm();
  }
  else
  {
    v11 = *(_DWORD *)(a1 + 20);
    if (v11 * *(_DWORD *)(a1 + 16))
      bzero(v4, 4 * (v11 * *(_DWORD *)(a1 + 16)));
  }
}

uint64_t sub_1C990C468(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 96))
  {
    free(*(void **)(a1 + 72));
    free(*(void **)(a1 + 48));
    free(*(void **)(a1 + 24));
    if (*(char *)(a1 + 23) < 0)
      operator delete(*(void **)a1);
  }
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_BYTE *)(a1 + 96) = 1;
  return a1;
}

void sub_1C990C4D4(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1CAA44AFCLL);
}

uint64_t sub_1C990C4F8(uint64_t result)
{
  uint64_t v1;

  v1 = *(_QWORD *)(result + 24);
  if (v1)
  {
    if (*(_BYTE *)(v1 + 240))
    {
      free(*(void **)(v1 + 216));
      free(*(void **)(v1 + 192));
      free(*(void **)(v1 + 168));
      if (*(char *)(v1 + 167) < 0)
        operator delete(*(void **)(v1 + 144));
    }
    free(*(void **)(v1 + 120));
    free(*(void **)(v1 + 96));
    free(*(void **)(v1 + 72));
    free(*(void **)(v1 + 48));
    free(*(void **)(v1 + 24));
    if (*(char *)(v1 + 23) < 0)
      operator delete(*(void **)v1);
    JUMPOUT(0x1CAA44AFCLL);
  }
  return result;
}

void sub_1C990C5A4(uint64_t *a1, uint64_t a2, char a3, int a4, uint64_t a5)
{
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t *v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  int **v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  std::string *p_src;
  size_t size;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  int v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  unsigned int v51;
  uint64_t v52;
  void **v53;
  void *v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  void *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  _QWORD v63[36];
  _DWORD v64[2];
  uint64_t v65;
  int v66;
  int v67;
  void *v68;
  uint64_t v69;
  unint64_t v70;
  _QWORD v71[36];
  void *v72;
  uint64_t v73;
  unint64_t v74;
  _QWORD v75[36];
  _QWORD v76[36];
  _QWORD v77[36];
  _QWORD v78[36];
  uint64_t v79;
  _QWORD *v80;
  _QWORD v81[36];
  int v82;
  int v83;
  int v84;
  int v85;
  int v86;
  int v87;
  std::string __p;
  _QWORD v89[36];
  std::string __src;
  _QWORD v91[36];
  _QWORD v92[36];
  int v93;
  uint64_t (**v94)();
  uint64_t v95;
  char v96;
  void *memptr;
  void **v98;
  _DWORD *v99;
  int v100;
  uint64_t v101;

  v101 = *MEMORY[0x1E0C80C00];
  v96 = 0;
  v94 = &off_1E8295030;
  v95 = a2;
  v93 = 0;
  LODWORD(memptr) = 0;
  v10 = (*(uint64_t (**)(uint64_t, void **, uint64_t))(*(_QWORD *)a2 + 88))(a2, &memptr, 4) == 4
     && (_DWORD)memptr == 2101013610;
  if (!v10 || *(_DWORD *)(a2 + 8) == 2)
    goto LABEL_17;
  v11 = (*(uint64_t (**)(uint64_t, void **, uint64_t))(*(_QWORD *)a2 + 144))(a2, &memptr, 4);
  if (v11 >= 1)
    *(_QWORD *)(a2 + 16) += v11;
  if (*(_DWORD *)(a2 + 8) == 2
    || (v12 = (*(uint64_t (**)(uint64_t, int *, uint64_t))(*(_QWORD *)a2 + 144))(a2, &v93, 4), v12 < 1)
    || (*(_QWORD *)(a2 + 16) += v12, v12 != 4))
  {
LABEL_17:
    sub_1C99072C4(&memptr);
    sub_1C9907EC4(v92, &memptr, 0, 0, "[RELEASE ERROR  ]", "/Library/Caches/com.apple.xbs/Sources/AppleCVA/shared/src/modules/avatar/shrek/libs/alg/geometry/src/three_d/identitytensor.cpp", 357, "couldn't read identity tensor from %s: bad file header", a3);
    sub_1C9909318((uint64_t)v92);
    v13 = (std::__shared_weak_count *)v98;
    if (v98)
    {
      v16 = (unint64_t *)(v98 + 1);
      do
        v15 = __ldaxr(v16);
      while (__stlxr(v15 - 1, v16));
      goto LABEL_20;
    }
LABEL_22:
    *a1 = 0;
    a1[1] = 0;
    goto LABEL_23;
  }
  if (v93)
  {
    sub_1C99072C4(&memptr);
    sub_1C9907EC4(v91, &memptr, 0, 0, "[RELEASE ERROR  ]", "/Library/Caches/com.apple.xbs/Sources/AppleCVA/shared/src/modules/avatar/shrek/libs/alg/geometry/src/three_d/identitytensor.cpp", 362, "couldn't read identity tensor from %s: unexpected version %d", a3);
    sub_1C9909318((uint64_t)v91);
    v13 = (std::__shared_weak_count *)v98;
    if (v98)
    {
      v14 = (unint64_t *)(v98 + 1);
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
LABEL_20:
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
      goto LABEL_22;
    }
    goto LABEL_22;
  }
  memset(&__src, 0, sizeof(__src));
  if (!sub_1C991DBCC((uint64_t)&v94, &__src))
  {
    sub_1C99072C4(&memptr);
    sub_1C9907EC4(v89, &memptr, 0, 0, "[RELEASE ERROR  ]", "/Library/Caches/com.apple.xbs/Sources/AppleCVA/shared/src/modules/avatar/shrek/libs/alg/geometry/src/three_d/identitytensor.cpp", 368, "couldn't read identity tensor from %s: corrupt data", a3);
    sub_1C9909318((uint64_t)v89);
    v17 = (std::__shared_weak_count *)v98;
    if (v98)
    {
      v18 = (unint64_t *)(v98 + 1);
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
    goto LABEL_83;
  }
  if (a5)
  {
    if (&__src != (std::string *)a5)
    {
      if (*(char *)(a5 + 23) < 0)
      {
        if ((__src.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          p_src = &__src;
        else
          p_src = (std::string *)__src.__r_.__value_.__r.__words[0];
        if ((__src.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(__src.__r_.__value_.__r.__words[2]);
        else
          size = __src.__r_.__value_.__l.__size_;
        sub_1C98A976C((void **)a5, p_src, size);
      }
      else if ((*((_BYTE *)&__src.__r_.__value_.__s + 23) & 0x80) != 0)
      {
        sub_1C98A96AC((_QWORD *)a5, __src.__r_.__value_.__l.__data_, __src.__r_.__value_.__l.__size_);
      }
      else
      {
        *(std::string *)a5 = __src;
      }
    }
LABEL_83:
    *a1 = 0;
    a1[1] = 0;
    goto LABEL_84;
  }
  memset(&__p, 0, sizeof(__p));
  v87 = -1;
  v86 = -1;
  v85 = -1;
  v84 = -1;
  v83 = -1;
  v82 = -1;
  if (!sub_1C991DBCC((uint64_t)&v94, &__p))
    goto LABEL_73;
  if (*(_DWORD *)(a2 + 8) == 2)
    goto LABEL_73;
  v20 = (*(uint64_t (**)(uint64_t, int *, uint64_t))(*(_QWORD *)a2 + 144))(a2, &v87, 4);
  if (v20 < 1)
    goto LABEL_73;
  *(_QWORD *)(a2 + 16) += v20;
  if (v20 != 4)
    goto LABEL_73;
  if (*(_DWORD *)(a2 + 8) == 2)
    goto LABEL_73;
  v21 = (*(uint64_t (**)(uint64_t, int *, uint64_t))(*(_QWORD *)a2 + 144))(a2, &v86, 4);
  if (v21 < 1)
    goto LABEL_73;
  *(_QWORD *)(a2 + 16) += v21;
  if (v21 != 4)
    goto LABEL_73;
  if (*(_DWORD *)(a2 + 8) == 2)
    goto LABEL_73;
  v22 = (*(uint64_t (**)(uint64_t, int *, uint64_t))(*(_QWORD *)a2 + 144))(a2, &v85, 4);
  if (v22 < 1
    || (*(_QWORD *)(a2 + 16) += v22, v22 != 4)
    || *(_DWORD *)(a2 + 8) == 2
    || (v23 = (*(uint64_t (**)(uint64_t, int *, uint64_t))(*(_QWORD *)a2 + 144))(a2, &v84, 4), v23 < 1)
    || (*(_QWORD *)(a2 + 16) += v23, v23 != 4)
    || *(_DWORD *)(a2 + 8) == 2
    || (v24 = (*(uint64_t (**)(uint64_t, int *, uint64_t))(*(_QWORD *)a2 + 144))(a2, &v83, 4), v24 < 1)
    || (*(_QWORD *)(a2 + 16) += v24, v24 != 4)
    || *(_DWORD *)(a2 + 8) == 2
    || (v25 = (*(uint64_t (**)(uint64_t, int *, uint64_t))(*(_QWORD *)a2 + 144))(a2, &v82, 4), v25 < 1)
    || (*(_QWORD *)(a2 + 16) += v25, v25 != 4))
  {
LABEL_73:
    sub_1C99072C4(&memptr);
    sub_1C9907EC4(v81, &memptr, 0, 0, "[RELEASE ERROR  ]", "/Library/Caches/com.apple.xbs/Sources/AppleCVA/shared/src/modules/avatar/shrek/libs/alg/geometry/src/three_d/identitytensor.cpp", 394, "couldn't read identity tensor from %s: corrupt data", a3);
    sub_1C9909318((uint64_t)v81);
    sub_1C987C140((uint64_t)&memptr);
    *a1 = 0;
    a1[1] = 0;
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_84;
    goto LABEL_74;
  }
  v26 = operator new();
  *(_QWORD *)(v26 + 120) = 0;
  v27 = (_QWORD *)(v26 + 120);
  *(_BYTE *)(v26 + 240) = 0;
  *(_OWORD *)v26 = 0u;
  *(_OWORD *)(v26 + 16) = 0u;
  *(_OWORD *)(v26 + 32) = 0u;
  *(_OWORD *)(v26 + 48) = 0u;
  *(_OWORD *)(v26 + 64) = 0u;
  *(_OWORD *)(v26 + 80) = 0u;
  *(_OWORD *)(v26 + 96) = 0u;
  *(_DWORD *)(v26 + 112) = 0;
  *(_QWORD *)(v26 + 128) = 0;
  *(_QWORD *)(v26 + 136) = 0;
  *(_BYTE *)(v26 + 144) = 0;
  v79 = v26;
  v28 = (_QWORD *)operator new();
  *v28 = &off_1E8295FE0;
  v28[1] = 0;
  v28[2] = 0;
  v28[3] = v26;
  v62 = v28;
  v80 = v28;
  if (*(char *)(v26 + 23) < 0)
    operator delete(*(void **)v26);
  *(std::string *)v26 = __src;
  *((_BYTE *)&__src.__r_.__value_.__s + 23) = 0;
  __src.__r_.__value_.__s.__data_[0] = 0;
  v29 = (int **)(v26 + 96);
  sub_1C988793C(v26 + 96, v86 + 1);
  sub_1C990C258(v26 + 24, 3 * v85, v86 + 1);
  sub_1C990C258(v26 + 48, 3 * v85, v84);
  sub_1C990C258(v26 + 72, v84, v87);
  if (*(_DWORD *)(a2 + 8) == 2)
    goto LABEL_86;
  v30 = 4 * *(unsigned int *)(v26 + 112);
  v31 = (*(uint64_t (**)(uint64_t, int *, uint64_t))(*(_QWORD *)a2 + 144))(a2, *v29, v30);
  if (v31 >= 1)
    *(_QWORD *)(a2 + 16) += v31;
  if (v31 != v30 || *(_DWORD *)(a2 + 8) == 2)
    goto LABEL_86;
  v32 = 4 * (*(_DWORD *)(v26 + 44) * *(_DWORD *)(v26 + 40));
  v33 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)a2 + 144))(a2, *(_QWORD *)(v26 + 24), v32);
  if (v33 >= 1)
    *(_QWORD *)(a2 + 16) += v33;
  if (v33 != v32 || *(_DWORD *)(a2 + 8) == 2)
    goto LABEL_86;
  v34 = 4 * (*(_DWORD *)(v26 + 68) * *(_DWORD *)(v26 + 64));
  v35 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)a2 + 144))(a2, *(_QWORD *)(v26 + 48), v34);
  if (v35 >= 1)
    *(_QWORD *)(a2 + 16) += v35;
  if (v35 != v34)
  {
LABEL_86:
    sub_1C990C258((uint64_t)v27, v87, **v29);
LABEL_87:
    sub_1C99072C4(&memptr);
    sub_1C9907EC4(v78, &memptr, 0, 0, "[RELEASE ERROR  ]", "/Library/Caches/com.apple.xbs/Sources/AppleCVA/shared/src/modules/avatar/shrek/libs/alg/geometry/src/three_d/identitytensor.cpp", 417, "couldn't read identity tensor from %s: corrupt data", a3);
    v40 = v78;
LABEL_88:
    sub_1C9909318((uint64_t)v40);
    sub_1C987C140((uint64_t)&memptr);
    *a1 = 0;
    a1[1] = 0;
    goto LABEL_89;
  }
  v36 = 4 * (*(_DWORD *)(v26 + 92) * *(_DWORD *)(v26 + 88));
  if (*(_DWORD *)(a2 + 8) == 2)
  {
    v37 = -1;
  }
  else
  {
    v41 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)a2 + 144))(a2, *(_QWORD *)(v26 + 72), 4 * (*(_DWORD *)(v26 + 92) * *(_DWORD *)(v26 + 88)));
    v37 = v41;
    if (v41 >= 1)
      *(_QWORD *)(a2 + 16) += v41;
  }
  sub_1C990C258((uint64_t)v27, v87, **v29);
  if (v37 != v36 || *(_DWORD *)(a2 + 8) == 2)
    goto LABEL_87;
  v42 = 4 * (*(_DWORD *)(v26 + 140) * *(_DWORD *)(v26 + 136));
  v43 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)a2 + 144))(a2, *v27, v42);
  if (v43 >= 1)
    *(_QWORD *)(a2 + 16) += v43;
  if (v43 != v42)
    goto LABEL_87;
  if (v83 == 4)
  {
    if ((a4 & 1) != 0)
    {
      memptr = 0;
      malloc_type_posix_memalign(&memptr, 0x20uLL, 0x40uLL, 0x49090899uLL);
      v44 = memptr;
      v45 = 3 * v83;
      v46 = v82;
      sub_1C990C2E0(&v72, (3 * v83 * v82));
      v74 = __PAIR64__(v46, v45);
      if (*(_DWORD *)(a2 + 8) == 2)
        goto LABEL_117;
      v47 = (*(uint64_t (**)(uint64_t, void *, uint64_t))(*(_QWORD *)a2 + 144))(a2, v44, 48);
      if (v47 < 1)
        goto LABEL_117;
      *(_QWORD *)(a2 + 16) += v47;
      if (v47 != 48 || *(_DWORD *)(a2 + 8) == 2)
        goto LABEL_117;
      v48 = 4 * (HIDWORD(v74) * v74);
      v49 = (*(uint64_t (**)(uint64_t, void *, uint64_t))(*(_QWORD *)a2 + 144))(a2, v72, v48);
      if (v49 >= 1)
        *(_QWORD *)(a2 + 16) += v49;
      if (v49 != v48)
      {
LABEL_117:
        sub_1C99072C4(&memptr);
        sub_1C9907EC4(v71, &memptr, 0, 0, "[RELEASE ERROR  ]", "/Library/Caches/com.apple.xbs/Sources/AppleCVA/shared/src/modules/avatar/shrek/libs/alg/geometry/src/three_d/identitytensor.cpp", 449, "couldn't read identity tensor from %s: corrupt data", a3);
        sub_1C9909318((uint64_t)v71);
        sub_1C987C140((uint64_t)&memptr);
        *a1 = 0;
        a1[1] = 0;
        free(v72);
        free(v44);
        goto LABEL_89;
      }
      v50 = *(_DWORD *)(v26 + 88);
      v51 = *(_DWORD *)(v26 + 92);
      v52 = *(_QWORD *)(v26 + 72);
      v64[0] = v82;
      v64[1] = v51;
      v65 = v52;
      v66 = v50;
      v67 = 0;
      sub_1C990C2E0(&v68, v74 * v51);
      v70 = __PAIR64__(v51, v74);
      v98 = &v72;
      v99 = v64;
      v100 = 1065353216;
      sub_1C990C33C((uint64_t)&v68, (uint64_t)&memptr);
      v53 = (void **)(v26 + 144);
      sub_1C990C468(v26 + 144);
      if (*(char *)(v26 + 167) < 0)
        operator delete(*v53);
      *(_OWORD *)v53 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
      *(_QWORD *)(v26 + 160) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
      *((_BYTE *)&__p.__r_.__value_.__s + 23) = 0;
      __p.__r_.__value_.__s.__data_[0] = 0;
      v54 = *(void **)(v26 + 168);
      *(_QWORD *)(v26 + 168) = v44;
      *(_QWORD *)(v26 + 176) = 16;
      *(_DWORD *)(v26 + 184) = 12;
      v55 = *(void **)(v26 + 192);
      v56 = *(_QWORD *)(v26 + 200);
      v57 = v73;
      *(_QWORD *)(v26 + 192) = v72;
      *(_QWORD *)(v26 + 200) = v57;
      v72 = v55;
      v73 = v56;
      *(_QWORD *)(v26 + 208) = v74;
      v74 = 0;
      v58 = *(void **)(v26 + 216);
      v59 = *(_QWORD *)(v26 + 224);
      v60 = v69;
      *(_QWORD *)(v26 + 216) = v68;
      *(_QWORD *)(v26 + 224) = v60;
      v68 = v58;
      v69 = v59;
      *(_QWORD *)(v26 + 232) = v70;
      v70 = 0;
      free(v58);
      free(v72);
      free(v54);
    }
    else
    {
      v61 = 48 * v82 + 48;
      if ((*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 80))(a2, v61) != v61)
      {
        sub_1C99072C4(&memptr);
        sub_1C9907EC4(v75, &memptr, 0, 0, "[RELEASE ERROR  ]", "/Library/Caches/com.apple.xbs/Sources/AppleCVA/shared/src/modules/avatar/shrek/libs/alg/geometry/src/three_d/identitytensor.cpp", 439, "couldn't read identity tensor from %s: corrupt data", a3);
        v40 = v75;
        goto LABEL_88;
      }
    }
  }
  else
  {
    if (v83)
    {
      sub_1C99072C4(&memptr);
      sub_1C9907EC4(v76, &memptr, 0, 0, "[RELEASE ERROR  ]", "/Library/Caches/com.apple.xbs/Sources/AppleCVA/shared/src/modules/avatar/shrek/libs/alg/geometry/src/three_d/identitytensor.cpp", 429, "couldn't read identity tensor from %s: unexpected number of key points %d != %d", a3);
      v40 = v76;
      goto LABEL_88;
    }
    if (a4)
    {
      sub_1C99072C4(&memptr);
      sub_1C9907EC4(v77, &memptr, 0, 0, "[RELEASE ERROR  ]", "/Library/Caches/com.apple.xbs/Sources/AppleCVA/shared/src/modules/avatar/shrek/libs/alg/geometry/src/three_d/identitytensor.cpp", 423, "stored tensor from %s does not contain key points data", a3);
      v40 = v77;
      goto LABEL_88;
    }
  }
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 32))(a2) & 1) == 0)
  {
    sub_1C99072C4(&memptr);
    sub_1C9907EC4(v63, &memptr, 0, 0, "[RELEASE ERROR  ]", "/Library/Caches/com.apple.xbs/Sources/AppleCVA/shared/src/modules/avatar/shrek/libs/alg/geometry/src/three_d/identitytensor.cpp", 466, "couldn't read identity tensor from %s: corrupt data", a3);
    v40 = v63;
    goto LABEL_88;
  }
  *a1 = v26;
  a1[1] = (uint64_t)v62;
  v80 = 0;
  v79 = 0;
LABEL_89:
  sub_1C987C140((uint64_t)&v79);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
LABEL_74:
    operator delete(__p.__r_.__value_.__l.__data_);
LABEL_84:
  if (SHIBYTE(__src.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__src.__r_.__value_.__l.__data_);
LABEL_23:
  if (v96)
  {
    if (v95)
      (*(void (**)(uint64_t))(*(_QWORD *)v95 + 8))(v95);
  }
}

void sub_1C990D1FC(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, double a8, int32x2_t a9)
{
  float v16;
  float32x2_t v17;
  float v18;
  float v19;
  int32x2_t v20;
  float v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  float v30;
  unint64_t v31;
  int *v32;
  int v33;
  unint64_t v34;
  BOOL v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  __float2 v39;
  float v40;
  int32x2_t v41;
  unsigned int v42;
  unint64_t *v43;
  float32x2_t v44;
  float32x2_t v45;
  int v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  float *v50;
  __int128 v51;
  unint64_t v52;
  int v53;
  float v54;
  uint64_t v55;
  unint64_t v56;
  int *v57;
  int v58;
  unint64_t v59;
  BOOL v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  __int128 v65;
  __int128 v66;
  unint64_t v67;
  int *v68;
  int v69;
  unint64_t v70;
  BOOL v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  int32x2_t v75;
  int32x2_t v76;
  float v77;
  float32x2_t v78;
  float v79;
  float32x2_t v80;
  float v81;
  float32x2_t v82;
  float v83;
  _BYTE v84[20];
  _BYTE v85[28];
  __int128 v86;
  uint64_t v87;
  float v88;
  __int128 v89;
  _BYTE v90[20];
  float32x2_t v91;
  float v92;
  __int128 v93;
  _BYTE v94[20];
  float32x2_t v95;
  float v96;
  uint64_t v97;
  unint64_t v98;
  float v99;
  float cosval;
  float *v101[2];
  _OWORD v102[3];

  LODWORD(a8) = *(_DWORD *)(a3 + 24);
  if (fabsf(*(float *)&a8) >= 1.0e-15)
  {
    v18 = *(float *)a3;
    v19 = *(float *)(a3 + 12) / *(float *)&a8;
    *(float32x2_t *)((char *)&v93 + 4) = vdiv_f32(vneg_f32(*(float32x2_t *)(a3 + 4)), (float32x2_t)vdup_lane_s32(*(int32x2_t *)&a8, 0));
    *(float *)&v93 = v19;
    *((float *)&v93 + 3) = v18 / *(float *)&a8;
    *(_QWORD *)v84 = &v93;
    *(_QWORD *)&v89 = v84;
    *((_QWORD *)&v89 + 1) = a3 + 16;
    *(_QWORD *)&v102[0] = 0;
    sub_1C98BDF7C((float *)v102, (uint64_t)&v89);
    v86 = v93;
    v87 = *(_QWORD *)&v102[0];
    v20.i32[0] = v93;
    v76 = v20;
    v16 = (float)(*(float *)&v93 * *((float *)&v93 + 3)) - (float)(*((float *)&v93 + 2) * *((float *)&v93 + 1));
    v17 = *(float32x2_t *)&v102[0];
  }
  else
  {
    v86 = 0uLL;
    v16 = 1.0;
    v17 = 0;
    a9.i32[0] = 0;
    v76 = a9;
    v87 = 0;
  }
  v88 = v16;
  *(_DWORD *)v84 = *(_DWORD *)a2;
  *(_OWORD *)&v84[4] = *(_OWORD *)(a2 + 4);
  *(_OWORD *)v85 = *(_OWORD *)(a2 + 20);
  *(_OWORD *)&v85[12] = *(_OWORD *)(a2 + 32);
  *(_QWORD *)&v89 = &v86;
  *((_QWORD *)&v89 + 1) = &v84[4];
  *(_QWORD *)((char *)&v93 + 4) = 0;
  sub_1C9888470((float *)&v93 + 1, (float **)&v89);
  v21 = *(float *)v85;
  *(float32x2_t *)&v22 = vadd_f32(v17, *(float32x2_t *)((char *)&v93 + 4));
  *((float32x2_t *)&v22 + 1) = vmul_f32((float32x2_t)*(_OWORD *)&vdupq_lane_s32(v76, 0), *(float32x2_t *)&v84[12]);
  *(_OWORD *)&v84[4] = v22;
  *(_QWORD *)(a5 + 8) = *(_QWORD *)(a4 + 8);
  v23 = v22;
  if (a5 != a4)
  {
    v24 = *(_OWORD *)(a4 + 16);
    v25 = *(_OWORD *)(a4 + 32);
    *(_DWORD *)(a5 + 48) = *(_DWORD *)(a4 + 48);
    *(_OWORD *)(a5 + 16) = v24;
    *(_OWORD *)(a5 + 32) = v25;
    v26 = *(_OWORD *)(a4 + 52);
    v27 = *(_OWORD *)(a4 + 68);
    *(_DWORD *)(a5 + 84) = *(_DWORD *)(a4 + 84);
    *(_OWORD *)(a5 + 68) = v27;
    *(_OWORD *)(a5 + 52) = v26;
    v28 = *(_QWORD *)(a4 + 88);
    *(_DWORD *)(a5 + 96) = *(_DWORD *)(a4 + 96);
    *(_QWORD *)(a5 + 88) = v28;
  }
  v29 = 0;
  v93 = 0x3F800000uLL;
  v30 = v21;
  *(_QWORD *)v94 = 1065353216;
  v31 = 0x100000000;
  v32 = (int *)&v86;
  *(_DWORD *)&v94[16] = 1065353216;
  do
  {
    v33 = *v32++;
    *(_DWORD *)&v94[4 * v29 - 16] = v33;
    v34 = HIDWORD(v31);
    v35 = (int)v31 < 1;
    if ((int)v31 < 1)
      v34 = 0;
    v36 = v29 + v34;
    v37 = (v31 + 1);
    v38 = v31 & 0xFFFFFFFF00000000;
    if (!v35)
      v37 = 0;
    v31 = v37 | v38;
    v29 = v36 + 1;
  }
  while (v29 != 6);
  *(float32x2_t *)&v94[8] = v17;
  *(_QWORD *)&v89 = &v93;
  *((_QWORD *)&v89 + 1) = a5 + 16;
  sub_1C98A24C0(a5 + 16, (float **)&v89);
  v78 = vadd_f32(vmul_f32(*(float32x2_t *)((char *)&v23 + 8), (float32x2_t)0x3F0000003F000000), *(float32x2_t *)&v23);
  v77 = (float)a1 / *((float *)&v23 + 2);
  v39 = __sincosf_stret(v30 / -57.296);
  v98 = __PAIR64__(LODWORD(v39.__sinval), LODWORD(v39.__cosval));
  v99 = -v39.__sinval;
  cosval = v39.__cosval;
  v40 = v39.__cosval * v77;
  v41.i32[0] = a1 - 1;
  *(float *)&v42 = -(float)(v39.__sinval * v77);
  *(int32x2_t *)&v102[0] = vdup_lane_s32((int32x2_t)vmul_f32(vcvt_f32_s32(v41), (float32x2_t)0x3F0000003F000000), 0);
  v93 = (unint64_t)v102;
  v43 = &v98;
  *(_QWORD *)&v89 = &v98;
  *((_QWORD *)&v89 + 1) = &v78;
  sub_1C9888470((float *)&v93 + 2, (float **)&v89);
  v44 = vmul_n_f32(*(float32x2_t *)((char *)&v93 + 8), v77);
  *((float32x2_t *)&v93 + 1) = v44;
  v45 = vsub_f32(*(float32x2_t *)v93, v44);
  v79 = v40;
  v80 = (float32x2_t)__PAIR64__(v42, v39.__sinval * v77);
  v81 = v39.__cosval * v77;
  v82 = v45;
  v44.f32[0] = (float)(v40 * v40) - (float)(*(float *)&v42 * (float)(v39.__sinval * v77));
  v75 = (int32x2_t)v44;
  v83 = v44.f32[0];
  v97 = *(_QWORD *)(a5 + 40);
  *(_QWORD *)&v89 = &v79;
  *((_QWORD *)&v89 + 1) = &v97;
  *(_QWORD *)((char *)&v93 + 4) = 0;
  sub_1C9888470((float *)&v93 + 1, (float **)&v89);
  v46 = 0;
  v47 = 0;
  *(_DWORD *)(a5 + 8) = a1;
  *(_DWORD *)(a5 + 12) = a1;
  HIDWORD(v93) = 0;
  *(_QWORD *)&v94[4] = 0;
  *(_QWORD *)&v94[12] = 0x3F80000000000000;
  LODWORD(v93) = 1065353216;
  *(_DWORD *)v94 = 1065353216;
  *(float32x2_t *)(a5 + 40) = vadd_f32(*(float32x2_t *)((char *)&v93 + 4), v45);
  *(float *)(a5 + 16) = *(float *)(a5 + 16) * v77;
  *(float *)(a5 + 32) = *(float *)(a5 + 32) * v77;
  *(_QWORD *)((char *)&v93 + 4) = 0;
  v95 = 0;
  v96 = 0.0;
  do
  {
    v48 = *(_DWORD *)v43;
    v43 = (unint64_t *)((char *)v43 + 4);
    *(_DWORD *)&v94[4 * v47 - 16] = v48;
    if (v46 > 0)
      ++v47;
    ++v47;
    if (v46 <= 0)
      ++v46;
    else
      v46 = 0;
  }
  while (v47 != 6);
  v49 = a5 + 52;
  v89 = 0x3F800000uLL;
  *(_QWORD *)&v90[4] = 0;
  *(_QWORD *)&v90[12] = 0x3F80000000000000;
  v91 = 0;
  *(_DWORD *)v90 = 1065353216;
  v92 = 0.0;
  *(_QWORD *)&v102[0] = &v93;
  *((_QWORD *)&v102[0] + 1) = a5 + 52;
  sub_1C98A24C0((uint64_t)&v89, (float **)v102);
  v50 = (float *)(a5 + 88);
  v101[0] = (float *)&v93;
  v101[1] = v50;
  *(_QWORD *)((char *)v102 + 4) = 0;
  HIDWORD(v102[0]) = 0;
  sub_1C98A266C((float *)v102 + 1, v101);
  v91 = vadd_f32(*(float32x2_t *)((char *)v102 + 4), v95);
  v92 = *((float *)v102 + 3) + v96;
  if ((__int128 *)v49 != &v89)
  {
    v51 = *(_OWORD *)v90;
    *(_OWORD *)v49 = v89;
    *(_OWORD *)(v49 + 16) = v51;
    *(_DWORD *)(v49 + 32) = *(_DWORD *)&v90[16];
    *(float32x2_t *)v50 = v91;
    v50[2] = v92;
  }
  if (fabsf(*(float *)v75.i32) >= 1.0e-15)
  {
    *(float32x2_t *)((char *)&v93 + 4) = vdiv_f32(vneg_f32(v80), (float32x2_t)vdup_lane_s32(v75, 0));
    *(float *)&v93 = v40 / *(float *)v75.i32;
    *((float *)&v93 + 3) = v40 / *(float *)v75.i32;
    v101[0] = (float *)&v93;
    *(_QWORD *)&v102[0] = v101;
    *((_QWORD *)&v102[0] + 1) = &v82;
    v98 = 0;
    sub_1C98BDF7C((float *)&v98, (uint64_t)v102);
    v89 = v93;
    v53 = v98;
    *(_QWORD *)v90 = v98;
    v54 = (float)(*(float *)&v93 * *((float *)&v93 + 3)) - (float)(*((float *)&v93 + 2) * *((float *)&v93 + 1));
    v52 = HIDWORD(v98);
  }
  else
  {
    LODWORD(v52) = 0;
    v53 = 0;
    v89 = 0uLL;
    v54 = 1.0;
    *(_QWORD *)v90 = 0;
  }
  v55 = 0;
  *(float *)&v90[8] = v54;
  v93 = 0x3F800000uLL;
  *(_QWORD *)v94 = 1065353216;
  v56 = 0x100000000;
  v57 = (int *)&v89;
  *(_DWORD *)&v94[16] = 1065353216;
  do
  {
    v58 = *v57++;
    *(_DWORD *)&v94[4 * v55 - 16] = v58;
    v59 = HIDWORD(v56);
    v60 = (int)v56 < 1;
    if ((int)v56 < 1)
      v59 = 0;
    v61 = v55 + v59;
    v62 = (v56 + 1);
    v63 = v56 & 0xFFFFFFFF00000000;
    if (!v60)
      v62 = 0;
    v56 = v62 | v63;
    v55 = v61 + 1;
  }
  while (v55 != 6);
  v64 = 0;
  *(_DWORD *)&v94[8] = v53;
  *(_DWORD *)&v94[12] = v52;
  *(_DWORD *)(a7 + 32) = *(_DWORD *)&v94[16];
  v65 = v93;
  v66 = *(_OWORD *)v94;
  v93 = 0x3F800000uLL;
  *(_QWORD *)v94 = 1065353216;
  *(_DWORD *)&v94[16] = 1065353216;
  v67 = 0x100000000;
  v68 = (int *)a3;
  *(_OWORD *)a7 = v65;
  *(_OWORD *)(a7 + 16) = v66;
  do
  {
    v69 = *v68++;
    *(_DWORD *)&v94[4 * v64 - 16] = v69;
    v70 = HIDWORD(v67);
    v71 = (int)v67 < 1;
    if ((int)v67 < 1)
      v70 = 0;
    v72 = v64 + v70;
    v73 = (v67 + 1);
    v74 = v67 & 0xFFFFFFFF00000000;
    if (!v71)
      v73 = 0;
    v67 = v73 | v74;
    v64 = v72 + 1;
  }
  while (v64 != 6);
  *(_QWORD *)&v94[8] = *(_QWORD *)(a3 + 16);
  *(_QWORD *)&v89 = &v93;
  *((_QWORD *)&v89 + 1) = a7;
  sub_1C98A24C0(a6, (float **)&v89);
}

void sub_1C990D7F0(int a1, uint64_t a2, uint64_t a3, _OWORD *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _OWORD *v11;
  simd_float3 v12;
  float v13;
  float v14;
  float v15;
  __float2 v16;
  float v17;
  __int128 v18;
  simd_float3x3 v23;
  uint64_t v24;
  unint64_t v25;
  __int32 *v26;
  __int32 v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  float v33;
  float v34;
  float v35;
  float v36;
  simd_float3x3 v39;
  simd_float3 v40;
  _BYTE v41[20];
  float32x2_t v42;
  float v43;
  float v44[5];
  __int128 v45;
  uint64_t v46;
  int v47;
  simd_float3 v48;
  simd_float3 v49;
  __int32 v50;
  __int128 v51;
  float v52;
  float v53;
  int v54;
  float v55;
  float v56;
  float v57[3];
  uint64_t v58;
  int v59;
  float v60;
  int v61;
  float v62;
  uint64_t v63;
  float v64;
  _OWORD v65[2];
  __int32 v66;
  float *v67[2];
  _OWORD v68[3];
  simd_float3x3 v69;
  simd_float3x3 v70;
  simd_float3x3 v71;
  simd_float3x3 v72;
  simd_float3x3 v73;

  v11 = a4 + 1;
  v69.columns[0] = (simd_float3)a4[1];
  v69.columns[2] = *(simd_float3 *)((char *)a4 + 40);
  v69.columns[1] = *(simd_float3 *)((char *)a4 + 28);
  v70 = __invert_f3(v69);
  v35 = v70.columns[0].f32[0];
  v12 = v70.columns[0];
  v12.i32[3] = v70.columns[1].i32[0];
  v65[0] = v12;
  v65[1] = vextq_s8(vextq_s8((int8x16_t)v70.columns[1], (int8x16_t)v70.columns[1], 0xCuLL), (int8x16_t)v70.columns[2], 8uLL);
  v66 = v70.columns[2].i32[2];
  LODWORD(v33) = *(_QWORD *)(a2 + 12);
  *(float32x2_t *)v39.columns[0].f32 = vadd_f32(*(float32x2_t *)(a2 + 4), vmul_f32(*(float32x2_t *)(a2 + 12), (float32x2_t)0x3F0000003F000000));
  v39.columns[0].i32[2] = 1065353216;
  v40.i64[0] = (uint64_t)v65;
  v40.i64[1] = (uint64_t)&v39;
  v63 = 0;
  v64 = 0.0;
  sub_1C98A266C((float *)&v63, (float **)&v40);
  v13 = vmuls_n_f32(v33, v35);
  if (v13 < 0.000001)
    v13 = 0.000001;
  v36 = (float)((float)((float)((float)(*(float *)&v63 * *(float *)&v63)
                              + (float)(*((float *)&v63 + 1) * *((float *)&v63 + 1)))
                      + (float)(v64 * v64))
              * (float)a1)
      / v13;
  v14 = 1.0 / sqrtf((float)(*(float *)&v63 * *(float *)&v63) + (float)(v64 * v64));
  v57[0] = v64 * v14;
  v57[1] = 0.0;
  v57[2] = *(float *)&v63 * v14;
  v58 = 0x3F80000000000000;
  v59 = 0;
  v60 = -(float)(*(float *)&v63 * v14);
  v34 = (float)(a1 - 1) * 0.5;
  v61 = 0;
  v62 = v64 * v14;
  v40.i64[0] = (uint64_t)v57;
  v40.i64[1] = (uint64_t)&v63;
  sub_1C98A266C((float *)&v63, (float **)&v40);
  LODWORD(v63) = 0;
  v51 = xmmword_1C99274C0;
  v15 = 1.0 / sqrtf((float)(*((float *)&v63 + 1) * *((float *)&v63 + 1)) + (float)(v64 * v64));
  v52 = v64 * v15;
  v53 = *((float *)&v63 + 1) * v15;
  v54 = 0;
  v55 = -(float)(*((float *)&v63 + 1) * v15);
  v56 = v64 * v15;
  v40.i64[0] = (uint64_t)&v51;
  v40.i64[1] = (uint64_t)v57;
  v48 = 0u;
  v49 = 0u;
  v50 = 0;
  sub_1C98A24C0((uint64_t)&v48, (float **)&v40);
  v16 = __sincosf_stret(*(float *)(a2 + 20) / 57.296);
  v39.columns[0].f32[0] = -v16.__sinval;
  *(uint64_t *)((char *)v39.columns[0].i64 + 4) = LODWORD(v16.__cosval);
  v40.i64[0] = (uint64_t)&v48;
  v40.i64[1] = (uint64_t)&v39;
  v46 = 0;
  v47 = 0;
  sub_1C98A266C((float *)&v46, (float **)&v40);
  v17 = 1.0 / sqrtf((float)(*(float *)&v46 * *(float *)&v46) + (float)(*((float *)&v46 + 1) * *((float *)&v46 + 1)));
  v44[0] = *((float *)&v46 + 1) * v17;
  v44[1] = *(float *)&v46 * v17;
  v44[2] = 0.0;
  v44[3] = -(float)(*(float *)&v46 * v17);
  v44[4] = *((float *)&v46 + 1) * v17;
  v45 = xmmword_1C99278F0;
  v40.i64[0] = (uint64_t)v44;
  v40.i64[1] = (uint64_t)&v48;
  sub_1C98A24C0((uint64_t)&v48, (float **)&v40);
  *(_DWORD *)(a5 + 8) = a1;
  *(_DWORD *)(a5 + 12) = a1;
  v39.columns[0] = v48;
  v39.columns[1] = v49;
  v39.columns[2].i32[0] = v50;
  *(uint64_t *)((char *)v39.columns[2].i64 + 4) = 0;
  v39.columns[2].i32[3] = 0;
  v40 = (simd_float3)0x3F800000uLL;
  *(_QWORD *)&v41[4] = 0;
  *(_QWORD *)&v41[12] = 0x3F80000000000000;
  *(_DWORD *)v41 = 1065353216;
  v42 = 0;
  v43 = 0.0;
  *(_QWORD *)&v68[0] = &v39;
  *((_QWORD *)&v68[0] + 1) = (char *)v11 + 36;
  sub_1C98A24C0((uint64_t)&v40, (float **)v68);
  v67[0] = (float *)&v39;
  v67[1] = (float *)v11 + 18;
  *(_QWORD *)((char *)v68 + 4) = 0;
  HIDWORD(v68[0]) = 0;
  sub_1C98A266C((float *)v68 + 1, v67);
  v42 = vadd_f32(*(float32x2_t *)((char *)v68 + 4), 0);
  v43 = *((float *)v68 + 3) + 0.0;
  v18 = *(_OWORD *)v41;
  *(simd_float3 *)(a5 + 52) = v40;
  *(_OWORD *)(a5 + 68) = v18;
  *(_DWORD *)(a5 + 84) = *(_DWORD *)&v41[16];
  *(float32x2_t *)(a5 + 88) = v42;
  *(float *)(a5 + 96) = v43;
  *(float *)(a5 + 16) = v36;
  *(_QWORD *)(a5 + 20) = 0;
  *(_DWORD *)(a5 + 28) = 0;
  *(float *)(a5 + 32) = v36;
  *(_DWORD *)(a5 + 36) = 0;
  *(float *)(a5 + 40) = v34;
  *(float *)(a5 + 44) = v34;
  *(_DWORD *)(a5 + 48) = 1065353216;
  v67[0] = (float *)&v48;
  v71.columns[0] = (simd_float3)LODWORD(v36);
  v71.columns[1].i32[0] = 0;
  v71.columns[1].i64[1] = 0;
  v71.columns[1].f32[1] = v36;
  *(_QWORD *)&v68[0] = v11;
  *((_QWORD *)&v68[0] + 1) = v67;
  __asm { FMOV            V2.4S, #1.0 }
  v71.columns[2].f32[0] = v34;
  v71.columns[2].f32[1] = v34;
  v72 = __invert_f3(v71);
  v72.columns[0].i32[3] = v72.columns[1].i32[0];
  v40 = v72.columns[0];
  *(int8x16_t *)v41 = vextq_s8(vextq_s8((int8x16_t)v72.columns[1], (int8x16_t)v72.columns[1], 0xCuLL), (int8x16_t)v72.columns[2], 8uLL);
  *(_DWORD *)&v41[16] = v72.columns[2].i32[2];
  v39.columns[0].i64[0] = (uint64_t)v68;
  v39.columns[0].i64[1] = (uint64_t)&v40;
  sub_1C990DC54(a6, (uint64_t *)&v39);
  v24 = 0;
  memset(&v39, 0, 32);
  v39.columns[0].i32[0] = 1065353216;
  v39.columns[1].i32[0] = 1065353216;
  v25 = 0x100000000;
  v26 = (__int32 *)a3;
  v39.columns[2].i32[0] = 1065353216;
  do
  {
    v27 = *v26++;
    v39.columns[0].i32[v24] = v27;
    v28 = HIDWORD(v25);
    v29 = (int)v25 < 1;
    if ((int)v25 < 1)
      v28 = 0;
    v30 = v24 + v28;
    v31 = (v25 + 1);
    v32 = v25 & 0xFFFFFFFF00000000;
    if (!v29)
      v31 = 0;
    v25 = v31 | v32;
    v24 = v30 + 1;
  }
  while (v24 != 6);
  v39.columns[1].i64[1] = *(_QWORD *)(a3 + 16);
  v23.columns[2].i64[0] = v39.columns[1].i64[1];
  v23.columns[2].i32[2] = v39.columns[2].i32[0];
  v23.columns[0] = v39.columns[0];
  v23.columns[1] = *(simd_float3 *)((char *)v39.columns + 12);
  v73 = __invert_f3(v23);
  v73.columns[0].i32[3] = v73.columns[1].i32[0];
  v40 = v73.columns[0];
  *(int8x16_t *)v41 = vextq_s8(vextq_s8((int8x16_t)v73.columns[1], (int8x16_t)v73.columns[1], 0xCuLL), (int8x16_t)v73.columns[2], 8uLL);
  *(_DWORD *)&v41[16] = v73.columns[2].i32[2];
  *(_QWORD *)&v68[0] = &v40;
  *((_QWORD *)&v68[0] + 1) = a6;
  sub_1C98A24C0(a7, (float **)v68);
}

double sub_1C990DC54(uint64_t a1, uint64_t *a2)
{
  float *v3;
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  float v8;
  double result;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  float v13;

  v3 = (float *)a2[1];
  if (v3 == (float *)a1)
  {
    v13 = 0.0;
    v11 = 0u;
    v12 = 0u;
    sub_1C990DC54(&v11);
    result = *(double *)&v11;
    v10 = v12;
    *(_OWORD *)a1 = v11;
    *(_OWORD *)(a1 + 16) = v10;
    *(float *)(a1 + 32) = v13;
  }
  else
  {
    v4 = *a2;
    v11 = 0u;
    v12 = 0u;
    v13 = 0.0;
    result = sub_1C98CF684((uint64_t)&v11, v4);
    v5 = v11;
    v6 = *((_QWORD *)&v12 + 1);
    *(float *)a1 = (float)((float)((float)(*(float *)&v11 * *v3) + 0.0) + (float)(*((float *)&v11 + 3) * v3[1]))
                 + (float)(*((float *)&v12 + 2) * v3[2]);
    v7 = v12;
    *(float *)(a1 + 4) = (float)((float)((float)(*((float *)&v5 + 1) * *v3) + 0.0) + (float)(*(float *)&v12 * v3[1]))
                       + (float)(*((float *)&v6 + 1) * v3[2]);
    v8 = v13;
    *(float *)(a1 + 8) = (float)((float)((float)(*((float *)&v5 + 2) * *v3) + 0.0) + (float)(*((float *)&v7 + 1) * v3[1]))
                       + (float)(v13 * v3[2]);
    *(float *)(a1 + 12) = (float)((float)((float)(*(float *)&v5 * v3[3]) + 0.0) + (float)(*((float *)&v5 + 3) * v3[4]))
                        + (float)(*(float *)&v6 * v3[5]);
    *(float *)(a1 + 16) = (float)((float)((float)(*((float *)&v5 + 1) * v3[3]) + 0.0) + (float)(*(float *)&v7 * v3[4]))
                        + (float)(*((float *)&v6 + 1) * v3[5]);
    *(float *)(a1 + 20) = (float)((float)((float)(*((float *)&v5 + 2) * v3[3]) + 0.0)
                                + (float)(*((float *)&v7 + 1) * v3[4]))
                        + (float)(v8 * v3[5]);
    *(float *)(a1 + 24) = (float)((float)((float)(*(float *)&v5 * v3[6]) + 0.0) + (float)(*((float *)&v5 + 3) * v3[7]))
                        + (float)(*(float *)&v6 * v3[8]);
    *(float *)(a1 + 28) = (float)((float)((float)(*((float *)&v5 + 1) * v3[6]) + 0.0) + (float)(*(float *)&v7 * v3[7]))
                        + (float)(*((float *)&v6 + 1) * v3[8]);
    *(float *)&result = (float)((float)((float)(*((float *)&v5 + 2) * v3[6]) + 0.0)
                              + (float)(*((float *)&v7 + 1) * v3[7]))
                      + (float)(v8 * v3[8]);
    *(_DWORD *)(a1 + 32) = LODWORD(result);
  }
  return result;
}

BOOL sub_1C990DDB4(uint64_t a1, char **a2)
{
  _BOOL8 result;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  unint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  char *v21;
  unint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;
  __int128 *v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  unsigned int v34;

  result = 0;
  v34 = 0;
  v4 = *(_QWORD *)(a1 + 8);
  if (*(_DWORD *)(v4 + 8) == 2)
    return result;
  v6 = (*(uint64_t (**)(_QWORD, unsigned int *, uint64_t))(*(_QWORD *)v4 + 144))(*(_QWORD *)(a1 + 8), &v34, 4);
  if (v6 < 1)
    return 0;
  *(_QWORD *)(v4 + 16) += v6;
  if (v6 != 4)
    return 0;
  v7 = v34;
  v8 = *a2;
  v9 = a2[1];
  v10 = v9 - *a2;
  v11 = v10 >> 3;
  v12 = v34 - (v10 >> 3);
  if (v34 <= (unint64_t)(v10 >> 3))
  {
    if (v34 < (unint64_t)(v10 >> 3))
      a2[1] = &v8[8 * v34];
    goto LABEL_28;
  }
  v13 = a2[2];
  if (v12 > (v13 - v9) >> 3)
  {
    v14 = v13 - v8;
    v15 = v14 >> 2;
    if (v14 >> 2 <= (unint64_t)v34)
      v15 = v34;
    v16 = (unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8;
    v17 = 0x1FFFFFFFFFFFFFFFLL;
    if (!v16)
      v17 = v15;
    if (v17 >> 61)
      sub_1C9899D30();
    v18 = 8 * v17;
    v19 = (char *)operator new(8 * v17);
    v20 = &v19[8 * v11];
    v32 = v19;
    v33 = &v19[v18];
    bzero(v20, 8 * v12);
    v21 = &v20[8 * v12];
    if (v9 == v8)
    {
      v8 = v9;
      v23 = v33;
      goto LABEL_25;
    }
    v22 = v9 - v8 - 8;
    if (v22 >= 0x58)
    {
      v23 = v33;
      if ((unint64_t)(v9 - &v32[v10]) >= 0x20)
      {
        v24 = (v22 >> 3) + 1;
        v25 = &v32[8 * v11 - 16];
        v26 = (__int128 *)(v9 - 16);
        v27 = v24 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v28 = *v26;
          *((_OWORD *)v25 - 1) = *(v26 - 1);
          *(_OWORD *)v25 = v28;
          v25 -= 32;
          v26 -= 2;
          v27 -= 4;
        }
        while (v27);
        v20 -= 8 * (v24 & 0x3FFFFFFFFFFFFFFCLL);
        v9 -= 8 * (v24 & 0x3FFFFFFFFFFFFFFCLL);
        if (v24 == (v24 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_25;
      }
    }
    else
    {
      v23 = v33;
    }
    do
    {
      v29 = *((_QWORD *)v9 - 1);
      v9 -= 8;
      *((_QWORD *)v20 - 1) = v29;
      v20 -= 8;
    }
    while (v9 != v8);
    v8 = *a2;
LABEL_25:
    *a2 = v20;
    a2[1] = v21;
    a2[2] = v23;
    if (v8)
      operator delete(v8);
    goto LABEL_27;
  }
  bzero(a2[1], 8 * v12);
  a2[1] = &v9[8 * v12];
LABEL_27:
  v8 = *a2;
LABEL_28:
  v30 = *(_QWORD *)(a1 + 8);
  if (*(_DWORD *)(v30 + 8) == 2)
  {
    v31 = -1;
  }
  else
  {
    v31 = (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(_QWORD *)v30 + 144))(v30, v8, 8 * v7);
    if (v31 >= 1)
      *(_QWORD *)(v30 + 16) += v31;
  }
  return v31 == 8 * v7;
}

void sub_1C990E008(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1CAA44AFCLL);
}

uint64_t sub_1C990E02C(uint64_t result)
{
  uint64_t v1;

  v1 = *(_QWORD *)(result + 24);
  if (v1)
  {
    free(*(void **)(v1 + 456));
    sub_1C98D83BC(v1);
    JUMPOUT(0x1CAA44AFCLL);
  }
  return result;
}

void sub_1C990E07C(uint64_t a1, _DWORD *a2, unsigned int *a3)
{
  int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _DWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _OWORD *v16;
  __int128 v17;
  char *v18;
  unint64_t v19;
  char *v20;
  uint64_t v21;
  _OWORD *v22;
  __int128 *v23;
  uint64_t v24;
  __int128 v25;
  int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char *v31;
  _DWORD *v32;
  uint64_t v33;
  _OWORD *v34;
  __int128 *v35;
  uint64_t v36;
  __int128 v37;
  _DWORD *v38;
  int v39;
  uint64_t v40;
  size_t v41;
  uint64_t v42;
  void *v43;
  float32x4_t *v44;
  unint64_t v45;
  float *v46;
  float *v47;
  uint64_t v48;
  float32x4_t *v49;
  float32x4_t *v50;
  uint64_t v51;
  float32x4_t v52;
  float *v53;
  float v54;
  uint64_t v55;
  void *v56[2];
  int v57;
  void *v58;
  void *memptr[3];
  int v60;
  uint64_t v61;

  v61 = *MEMORY[0x1E0C80C00];
  if (*(_QWORD *)a1 == *(_QWORD *)(a1 + 8))
    v6 = 0;
  else
    v6 = *(int **)a1;
  v7 = *((_QWORD *)a3 + 1);
  v8 = a3[5];
  v9 = *a3;
  if (v6 == (int *)(v7 - 4 * v8))
  {
    memptr[0] = 0;
    malloc_type_posix_memalign(memptr, 0x20uLL, (4 * v9 + 31) & 0x7FFFFFFE0, 0x49090899uLL);
    v18 = (char *)memptr[0];
    if (!(_DWORD)v9)
      goto LABEL_24;
    v19 = (v9 - 1) & 0x3FFFFFFFFFFFFFFFLL;
    if (v19 < 7)
    {
      v20 = (char *)memptr[0];
    }
    else
    {
      v20 = (char *)memptr[0];
      if ((void *)((char *)memptr[0] - (char *)v6) >= (void *)0x20)
      {
        v21 = (v19 + 1) & 0x7FFFFFFFFFFFFFF8;
        v22 = (char *)memptr[0] + 16;
        v23 = (__int128 *)(v6 + 4);
        v24 = v21;
        do
        {
          v25 = *v23;
          *(v22 - 1) = *(v23 - 1);
          *v22 = v25;
          v22 += 2;
          v23 += 2;
          v24 -= 8;
        }
        while (v24);
        if (v19 + 1 == v21)
        {
LABEL_24:
          v28 = *a3;
          if ((_DWORD)v28)
          {
            v29 = *((_QWORD *)a3 + 1);
            v30 = (v28 - 1) & 0x3FFFFFFFFFFFFFFFLL;
            if (v30 < 7)
            {
              v31 = v18;
              v32 = (_DWORD *)*((_QWORD *)a3 + 1);
            }
            else
            {
              v31 = v18;
              v32 = (_DWORD *)*((_QWORD *)a3 + 1);
              if ((unint64_t)(v29 - (_QWORD)v18) >= 0x20)
              {
                v33 = (v30 + 1) & 0x7FFFFFFFFFFFFFF8;
                v31 = &v18[4 * v33];
                v34 = (_OWORD *)(v29 + 16);
                v35 = (__int128 *)(v18 + 16);
                v36 = v33;
                do
                {
                  v37 = *v35;
                  *(v34 - 1) = *(v35 - 1);
                  *v34 = v37;
                  v34 += 2;
                  v35 += 2;
                  v36 -= 8;
                }
                while (v36);
                if (v30 + 1 == v33)
                  goto LABEL_34;
                v32 = (_DWORD *)(v29 + 4 * v33);
              }
            }
            v38 = (_DWORD *)(v29 + 4 * v28);
            do
            {
              v39 = *(_DWORD *)v31;
              v31 += 4;
              *v32++ = v39;
            }
            while (v32 != v38);
          }
LABEL_34:
          free(v18);
          v7 = *((_QWORD *)a3 + 1);
          v10 = -(uint64_t)a3[5];
          goto LABEL_35;
        }
        v20 = &v18[4 * v21];
        v6 += v21;
      }
    }
    do
    {
      v27 = *v6++;
      *(_DWORD *)v20 = v27;
      v20 += 4;
    }
    while (v20 != &v18[4 * v9]);
    goto LABEL_24;
  }
  v10 = -v8;
  if (!(_DWORD)v9)
    goto LABEL_35;
  v11 = (v9 - 1) & 0x3FFFFFFFFFFFFFFFLL;
  if (v11 < 7)
  {
    v12 = (_DWORD *)*((_QWORD *)a3 + 1);
    do
    {
LABEL_20:
      v26 = *v6++;
      *v12++ = v26;
    }
    while (v12 != (_DWORD *)(v7 + 4 * v9));
    goto LABEL_35;
  }
  v12 = (_DWORD *)*((_QWORD *)a3 + 1);
  if ((unint64_t)(v7 - (_QWORD)v6) < 0x20)
    goto LABEL_20;
  v13 = 0;
  v14 = (v11 + 1) & 0x7FFFFFFFFFFFFFF8;
  v15 = v14;
  do
  {
    v16 = (_OWORD *)(v7 + v13 * 4);
    v17 = *(_OWORD *)&v6[v13 + 4];
    *v16 = *(_OWORD *)&v6[v13];
    v16[1] = v17;
    v13 += 8;
    v15 -= 8;
  }
  while (v15);
  if (v11 + 1 != v14)
  {
    v12 = (_DWORD *)(v7 + 4 * v14);
    v6 += v14;
    goto LABEL_20;
  }
LABEL_35:
  v55 = a1 + 456;
  memptr[1] = &v55;
  memptr[2] = a2;
  v60 = 1065353216;
  v40 = v7 + 4 * v10;
  if (*(_QWORD *)(a1 + 456) == v40 || *((_QWORD *)a2 + 1) - 4 * a2[5] == v40)
  {
    v41 = (4 * *(unsigned int *)(a1 + 476) + 31) & 0x7FFFFFFE0;
    v56[1] = (void *)(v41 >> 2);
    v58 = 0;
    malloc_type_posix_memalign(&v58, 0x20uLL, v41, 0x49090899uLL);
    v56[0] = v58;
    v57 = *(_DWORD *)(v55 + 20);
    sub_1C990E474((uint64_t)v56, (uint64_t)memptr);
    v42 = *a3;
    v43 = v56[0];
    if ((_DWORD)v42)
    {
      v44 = (float32x4_t *)*((_QWORD *)a3 + 1);
      v45 = (v42 - 1) & 0x3FFFFFFFFFFFFFFFLL;
      if (v45 >= 0xB)
      {
        if (v44 >= (float32x4_t *)((char *)v56[0] + 4 * v42)
          || (v46 = (float *)v56[0], v47 = (float *)*((_QWORD *)a3 + 1), v56[0] >= &v44->f32[v42]))
        {
          v48 = (v45 + 1) & 0x7FFFFFFFFFFFFFF8;
          v46 = (float *)((char *)v56[0] + 4 * v48);
          v49 = v44 + 1;
          v50 = (float32x4_t *)((char *)v56[0] + 16);
          v51 = v48;
          do
          {
            v52 = vaddq_f32(*v50, *v49);
            v49[-1] = vaddq_f32(v50[-1], v49[-1]);
            *v49 = v52;
            v49 += 2;
            v50 += 2;
            v51 -= 8;
          }
          while (v51);
          if (v45 + 1 == v48)
            goto LABEL_51;
          v47 = &v44->f32[v48];
        }
      }
      else
      {
        v46 = (float *)v56[0];
        v47 = (float *)*((_QWORD *)a3 + 1);
      }
      v53 = &v44->f32[v42];
      do
      {
        v54 = *v46++;
        *v47 = v54 + *v47;
        ++v47;
      }
      while (v47 != v53);
    }
LABEL_51:
    free(v43);
    return;
  }
  if (*(_DWORD *)(a1 + 472) * *(_DWORD *)(a1 + 476))
  {
    if (*a2)
      cva::VecLib<float>::gemm();
  }
}

void sub_1C990E474(uint64_t a1, uint64_t a2)
{
  void ***v4;
  void *v5;
  void **v6;
  uint64_t v7;
  size_t v8;
  void *v9;
  size_t v10;
  uint64_t v11;
  void *v12;
  size_t v13;
  int v14;
  void *memptr;

  v4 = *(void ****)(a2 + 8);
  v5 = *(void **)a1;
  v6 = *v4;
  if (**v4 == v5 || (v7 = *(_QWORD *)(a2 + 16), (void *)(*(_QWORD *)(v7 + 8) - 4 * *(unsigned int *)(v7 + 20)) == v5))
  {
    v8 = (4 * *((unsigned int *)v6 + 5) + 31) & 0x7FFFFFFE0;
    v13 = v8 >> 2;
    memptr = 0;
    malloc_type_posix_memalign(&memptr, 0x20uLL, v8, 0x49090899uLL);
    v12 = memptr;
    v14 = *(_DWORD *)(**(_QWORD **)(a2 + 8) + 20);
    sub_1C990E474(&v12, a2);
    v9 = *(void **)a1;
    v10 = v13;
    *(_QWORD *)a1 = v12;
    *(_QWORD *)(a1 + 8) = v10;
    *(_DWORD *)(a1 + 16) = v14;
    free(v9);
  }
  else if (*((_DWORD *)v6 + 4) * *((_DWORD *)v6 + 5) && *(_DWORD *)v7)
  {
    cva::VecLib<float>::gemm();
  }
  else
  {
    v11 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v11)
      bzero(v5, 4 * v11);
  }
}

uint64_t **sub_1C990E59C(uint64_t **a1, const void **a2, uint64_t a3)
{
  uint64_t *v5;
  uint64_t **v6;
  int v7;
  const void *v8;
  size_t v9;
  uint64_t **v10;
  _QWORD *v11;
  const void *v12;
  const void *v13;
  int v14;
  const void *v15;
  size_t v16;
  size_t v17;
  int v18;
  int v19;
  _QWORD *v20;
  _BYTE *v21;
  uint64_t *v22;
  uint64_t *v23;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    v7 = *((char *)a2 + 23);
    if (v7 >= 0)
      v8 = a2;
    else
      v8 = *a2;
    if (v7 >= 0)
      v9 = *((unsigned __int8 *)a2 + 23);
    else
      v9 = (size_t)a2[1];
    while (1)
    {
      v10 = (uint64_t **)v5;
      v13 = (const void *)v5[4];
      v11 = v5 + 4;
      v12 = v13;
      v14 = *((char *)v11 + 23);
      if (v14 >= 0)
        v15 = v11;
      else
        v15 = v12;
      if (v14 >= 0)
        v16 = *((unsigned __int8 *)v11 + 23);
      else
        v16 = v11[1];
      if (v16 >= v9)
        v17 = v9;
      else
        v17 = v16;
      v18 = memcmp(v8, v15, v17);
      if (v18)
      {
        if (v18 < 0)
          goto LABEL_8;
LABEL_22:
        v19 = memcmp(v15, v8, v17);
        if (v19)
        {
          if ((v19 & 0x80000000) == 0)
            return v10;
        }
        else if (v16 >= v9)
        {
          return v10;
        }
        v5 = v10[1];
        if (!v5)
        {
          v6 = v10 + 1;
          goto LABEL_29;
        }
      }
      else
      {
        if (v9 >= v16)
          goto LABEL_22;
LABEL_8:
        v5 = *v10;
        v6 = v10;
        if (!*v10)
          goto LABEL_29;
      }
    }
  }
  v10 = a1 + 1;
LABEL_29:
  v20 = operator new(0x50uLL);
  v21 = v20 + 4;
  if (*(char *)(a3 + 23) < 0)
  {
    sub_1C987D148(v21, *(void **)a3, *(_QWORD *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)v21 = *(_OWORD *)a3;
    v20[6] = *(_QWORD *)(a3 + 16);
  }
  v20[7] = 0;
  v20[8] = 0;
  v20[9] = 0;
  *v20 = 0;
  v20[1] = 0;
  v20[2] = v10;
  *v6 = v20;
  v22 = (uint64_t *)**a1;
  v23 = v20;
  if (v22)
  {
    *a1 = v22;
    v23 = *v6;
  }
  sub_1C9880828(a1[1], v23);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return (uint64_t **)v20;
}

void sub_1C990E710(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1CAA44AFCLL);
}

uint64_t sub_1C990E734(uint64_t result)
{
  uint64_t v1;
  void *v2;
  void *v3;

  v1 = *(_QWORD *)(result + 24);
  if (v1)
  {
    if (*(char *)(v1 + 95) < 0)
    {
      operator delete(*(void **)(v1 + 72));
      if ((*(char *)(v1 + 71) & 0x80000000) == 0)
      {
LABEL_4:
        v2 = *(void **)(v1 + 24);
        if (!v2)
          goto LABEL_6;
        goto LABEL_5;
      }
    }
    else if ((*(char *)(v1 + 71) & 0x80000000) == 0)
    {
      goto LABEL_4;
    }
    operator delete(*(void **)(v1 + 48));
    v2 = *(void **)(v1 + 24);
    if (!v2)
    {
LABEL_6:
      v3 = *(void **)v1;
      if (*(_QWORD *)v1)
      {
        *(_QWORD *)(v1 + 8) = v3;
        operator delete(v3);
      }
      JUMPOUT(0x1CAA44AFCLL);
    }
LABEL_5:
    *(_QWORD *)(v1 + 32) = v2;
    operator delete(v2);
    goto LABEL_6;
  }
  return result;
}

uint64_t sub_1C990E7CC(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  void **v6;
  size_t v7;
  __int128 v8;
  void *v9;
  size_t v10;
  void **v11;
  char v12;
  __int128 v13;
  void *v14;
  size_t v15;
  void **v16;
  char v17;
  __int128 v18;
  void *v19;
  size_t v20;

  if ((_QWORD *)a1 != a2)
  {
    v4 = *a2;
    *(_DWORD *)(a1 + 8) = *((_DWORD *)a2 + 2);
    *(_QWORD *)a1 = v4;
    v5 = *(_QWORD *)((char *)a2 + 12);
    *(_DWORD *)(a1 + 20) = *((_DWORD *)a2 + 5);
    *(_QWORD *)(a1 + 12) = v5;
    *(_DWORD *)(a1 + 24) = *((_DWORD *)a2 + 6);
    v6 = (void **)(a1 + 32);
    v7 = *((unsigned __int8 *)a2 + 55);
    if (*(char *)(a1 + 55) < 0)
    {
      if ((v7 & 0x80u) == 0)
        v9 = a2 + 4;
      else
        v9 = (void *)a2[4];
      if ((v7 & 0x80u) == 0)
        v10 = v7;
      else
        v10 = a2[5];
      sub_1C98A976C(v6, v9, v10);
    }
    else if ((v7 & 0x80) != 0)
    {
      sub_1C98A96AC(v6, (void *)a2[4], a2[5]);
    }
    else
    {
      v8 = *((_OWORD *)a2 + 2);
      *(_QWORD *)(a1 + 48) = a2[6];
      *(_OWORD *)v6 = v8;
    }
    v11 = (void **)(a1 + 56);
    v12 = *((_BYTE *)a2 + 79);
    if (*(char *)(a1 + 79) < 0)
    {
      if (v12 >= 0)
        v14 = a2 + 7;
      else
        v14 = (void *)a2[7];
      if (v12 >= 0)
        v15 = *((unsigned __int8 *)a2 + 79);
      else
        v15 = a2[8];
      sub_1C98A976C(v11, v14, v15);
    }
    else if ((*((_BYTE *)a2 + 79) & 0x80) != 0)
    {
      sub_1C98A96AC(v11, (void *)a2[7], a2[8]);
    }
    else
    {
      v13 = *(_OWORD *)(a2 + 7);
      *(_QWORD *)(a1 + 72) = a2[9];
      *(_OWORD *)v11 = v13;
    }
    v16 = (void **)(a1 + 80);
    v17 = *((_BYTE *)a2 + 103);
    if (*(char *)(a1 + 103) < 0)
    {
      if (v17 >= 0)
        v19 = a2 + 10;
      else
        v19 = (void *)a2[10];
      if (v17 >= 0)
        v20 = *((unsigned __int8 *)a2 + 103);
      else
        v20 = a2[11];
      sub_1C98A976C(v16, v19, v20);
    }
    else if ((*((_BYTE *)a2 + 103) & 0x80) != 0)
    {
      sub_1C98A96AC(v16, (void *)a2[10], a2[11]);
    }
    else
    {
      v18 = *((_OWORD *)a2 + 5);
      *(_QWORD *)(a1 + 96) = a2[12];
      *(_OWORD *)v16 = v18;
    }
  }
  return a1;
}

void sub_1C990E910(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _BYTE *v13;
  char *v14;
  size_t v15;
  char *v16;
  char *v17;
  unint64_t v18;
  uint64_t v19;
  _OWORD *v20;
  char *v21;
  uint64_t v22;
  __int128 v23;
  int v24;

  v5 = *(char **)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  v6 = v5;
  if (a2 <= (v4 - (uint64_t)v5) >> 2)
  {
    if (a2)
    {
      bzero(v5, 4 * a2);
      v6 = &v5[4 * a2];
    }
    *(_QWORD *)(a1 + 8) = v6;
  }
  else
  {
    v7 = *(char **)a1;
    v8 = (uint64_t)&v5[-*(_QWORD *)a1];
    v9 = v8 >> 2;
    v10 = (v8 >> 2) + a2;
    if (v10 >> 62)
      abort();
    v11 = v4 - (_QWORD)v7;
    if (v11 >> 1 > v10)
      v10 = v11 >> 1;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFFCLL)
      v12 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v12 = v10;
    if (v12)
    {
      if (v12 >> 62)
        sub_1C9899D30();
      v13 = operator new(4 * v12);
    }
    else
    {
      v13 = 0;
    }
    v14 = &v13[4 * v9];
    v15 = 4 * a2;
    v16 = &v13[4 * v12];
    bzero(v14, v15);
    v17 = &v14[v15];
    if (v5 != v7)
    {
      v18 = v5 - v7 - 4;
      if (v18 < 0x2C)
        goto LABEL_29;
      if ((unint64_t)(v5 - v13 - v8) < 0x20)
        goto LABEL_29;
      v19 = (v18 >> 2) + 1;
      v6 = &v5[-4 * (v19 & 0x7FFFFFFFFFFFFFF8)];
      v20 = &v13[4 * v9 - 16];
      v21 = v5 - 16;
      v22 = v19 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v23 = *(_OWORD *)v21;
        *(v20 - 1) = *((_OWORD *)v21 - 1);
        *v20 = v23;
        v20 -= 2;
        v21 -= 32;
        v22 -= 8;
      }
      while (v22);
      v14 -= 4 * (v19 & 0x7FFFFFFFFFFFFFF8);
      if (v19 != (v19 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_29:
        do
        {
          v24 = *((_DWORD *)v6 - 1);
          v6 -= 4;
          *((_DWORD *)v14 - 1) = v24;
          v14 -= 4;
        }
        while (v6 != v7);
      }
    }
    *(_QWORD *)a1 = v14;
    *(_QWORD *)(a1 + 8) = v17;
    *(_QWORD *)(a1 + 16) = v16;
    if (v7)
      operator delete(v7);
  }
}

uint64_t sub_1C990EAAC(uint64_t result, int *a2, uint64_t **a3, uint64_t a4, int a5)
{
  int *v9;
  int *v10;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  int *v15;
  uint64_t v16;
  int *v17;
  int v18;
  int v19;
  int v20;
  uint64_t v21;
  int v22;
  int *v23;
  int *v24;
  int v25;
  int v26;
  BOOL v27;
  int v28;
  int v29;
  BOOL v30;
  int *v32;
  int *v33;
  int *v34;
  int v35;
  _DWORD *v36;
  int v37;
  int v38;
  BOOL v39;
  int v40;
  int v41;
  int *v43;
  int *v44;
  int v45;
  _DWORD *v46;
  _BOOL4 v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v53;
  _DWORD *v54;
  BOOL v55;
  int v56;
  int v57;
  int v58;
  int v59;
  int v61;
  int v62;
  int *v63;
  int *v64;
  int v65;
  int *v66;
  _DWORD *v67;
  int v68;
  int v69;
  BOOL v70;
  int v71;
  int v72;
  int v74;
  _DWORD *v75;
  int v76;
  int v77;
  _BOOL4 v78;
  int v79;
  int v80;
  BOOL v82;
  _DWORD *v83;
  BOOL v84;
  int v85;
  _DWORD *v86;
  int v87;
  int v88;
  BOOL v89;
  int v90;
  int v91;
  int *v93;
  _DWORD *v94;
  _BOOL4 v95;
  int v96;
  int v97;
  int v98;
  int v99;
  int v100;
  int *v101;
  int *v102;
  _DWORD *v103;
  int v104;
  int v105;
  BOOL v106;
  int v107;
  int v108;
  int v110;
  int v111;
  int v112;
  int v113;
  _DWORD *v114;
  int v115;
  int v116;
  _BOOL4 v117;
  int v118;
  int v119;
  int *v121;
  _DWORD *v122;
  int v123;
  int v124;
  BOOL v125;
  int v126;
  int v127;
  int *v129;
  int v130;
  int v131;
  int v132;
  int v133;
  int v135;
  uint64_t v136;
  _DWORD *v137;
  _DWORD *v138;
  _BOOL4 v139;
  int *v140;
  uint64_t v141;
  uint64_t v142;
  int *v143;
  int64_t v144;
  uint64_t *v145;
  int64_t v146;
  int64_t v147;
  uint64_t v148;
  int *v149;
  uint64_t v150;
  uint64_t v151;
  _DWORD *v152;
  _DWORD *v153;
  int v154;
  int v155;
  int v156;
  _BOOL4 v157;
  int *v158;
  int v159;
  int v160;
  _DWORD *v161;
  int v162;
  int v163;
  BOOL v164;
  int v165;
  int v166;
  int v168;
  int v169;
  int v170;
  int v171;
  _BOOL4 v172;
  int v173;
  int v174;
  int v175;
  BOOL v176;
  int v177;
  int v178;
  _BOOL4 v179;
  int v180;
  int *v181;
  uint64_t v182;
  uint64_t v183;
  _DWORD *v184;
  _DWORD *v185;
  _DWORD *v186;
  int v187;
  int v188;
  int *v189;
  int *v190;
  int v191;
  int v192;
  int *v193;
  unsigned int *v194;
  _BOOL4 v195;
  uint64_t v196;
  _DWORD *v197;
  int v198;
  signed int v199;
  signed int v200;
  int v202;
  signed int v203;
  signed int v204;
  uint64_t v206;
  uint64_t v207;
  int v208;
  uint64_t *v209;
  int *v210;
  _BOOL4 v211;
  int *v212;
  uint64_t v213;
  _DWORD *v214;
  int v215;
  int v216;
  int v217;
  int v218;
  int *v219;
  uint64_t v220;
  unint64_t v221;
  int *v222;
  int v223;
  int v224;
  uint64_t v225;
  unsigned int *v226;
  _DWORD *v227;
  int *v228;
  unsigned int *v229;
  int v230;
  signed int v231;
  signed int v232;
  int v234;
  signed int v235;
  signed int v236;
  int v238;
  int v239;
  int v240;
  int v241;
  int *v243;
  uint64_t v244;
  int *v245;
  int v246;
  int v247;
  _DWORD *v248;
  _DWORD *v249;
  _BOOL4 v250;
  int *v251;
  int v252;
  _DWORD *v253;
  int v254;
  int v255;
  BOOL v256;
  int v257;
  int v258;
  int v259;
  int v260;
  int v261;
  int v262;
  int v263;
  int v265;

  v9 = (int *)result;
LABEL_2:
  v10 = a2 - 1;
  v11 = v9;
  while (2)
  {
    v265 = a5;
LABEL_4:
    v9 = v11;
    v12 = (char *)a2 - (char *)v11;
    v13 = a2 - v11;
    switch(v13)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v135 = *v11;
        v136 = **a3;
        v137 = (_DWORD *)(v136 + 12 * *v10);
        v138 = (_DWORD *)(v136 + 12 * *v11);
        if (*v137 < *v138)
          goto LABEL_184;
        if (*v137 > *v138)
          return result;
        v238 = v137[1];
        v239 = v138[1];
        if (v238 < v239)
        {
LABEL_184:
          v139 = 1;
        }
        else
        {
          if (v238 > v239)
            return result;
          v240 = v137[2];
          v241 = v138[2];
          v30 = v240 == v241;
          v139 = v240 < v241;
          if (v30)
            return result;
        }
        if (v139)
        {
          *v11 = *v10;
          *v10 = v135;
        }
        return result;
      case 3:
        return (uint64_t)sub_1C990FA2C(v11, v11 + 1, a2 - 1, **a3);
      case 4:
        return (uint64_t)sub_1C990FC44(v11, v11 + 1, v11 + 2, a2 - 1, a3);
      case 5:
        return (uint64_t)sub_1C990FDE4(v11, v11 + 1, v11 + 2, v11 + 3, a2 - 1, a3);
      default:
        if (v12 <= 95)
        {
          if ((a5 & 1) != 0)
          {
            if (v11 == a2)
              return result;
            v140 = v11 + 1;
            if (v11 + 1 == a2)
              return result;
            v141 = 0;
            v142 = **a3;
            v143 = v11;
            while (1)
            {
              v190 = v143;
              v143 = v140;
              v192 = *v190;
              v191 = v190[1];
              v193 = (int *)(v142 + 12 * v191);
              v194 = (unsigned int *)(v142 + 12 * *v190);
              result = *v194;
              if (*v193 < (int)result)
                goto LABEL_254;
              if (*v193 > (int)result)
                goto LABEL_252;
              v202 = v193[1];
              result = v194[1];
              if (v202 < (int)result)
              {
LABEL_254:
                v195 = 1;
              }
              else
              {
                if (v202 > (int)result)
                  goto LABEL_252;
                v203 = v193[2];
                v204 = v194[2];
                v30 = v203 == v204;
                v195 = v203 < v204;
                if (v30)
                  goto LABEL_252;
              }
              if (v195)
                break;
LABEL_252:
              v140 = v143 + 1;
              v141 += 4;
              if (v143 + 1 == a2)
                return result;
            }
            v196 = v141;
            while (1)
            {
              v189 = v190;
              *(int *)((char *)v11 + v196 + 4) = v192;
              if (!v196)
              {
                v189 = v11;
                goto LABEL_251;
              }
              v192 = *(int *)((char *)v11 + v196 - 4);
              v197 = (_DWORD *)(v142 + 12 * v192);
              result = *v193;
              if ((int)result < *v197)
                goto LABEL_261;
              if ((int)result > *v197)
                goto LABEL_251;
              result = v193[1];
              v198 = v197[1];
              if ((int)result >= v198)
              {
                if ((int)result > v198)
                {
                  v189 = (int *)((char *)v11 + v196);
LABEL_251:
                  *v189 = v191;
                  goto LABEL_252;
                }
                v199 = v193[2];
                v200 = v197[2];
                v30 = v199 == v200;
                result = v199 < v200;
                if (v30)
                  goto LABEL_251;
              }
              else
              {
LABEL_261:
                result = 1;
              }
              v190 = v189 - 1;
              v196 -= 4;
              if ((result & 1) == 0)
                goto LABEL_251;
            }
          }
          if (v11 == a2)
            return result;
          v243 = v11 + 1;
          if (v11 + 1 == a2)
            return result;
          v244 = **a3;
          while (1)
          {
            v245 = v9;
            v9 = v243;
            v247 = *v245;
            v246 = v245[1];
            v248 = (_DWORD *)(v244 + 12 * v246);
            v249 = (_DWORD *)(v244 + 12 * *v245);
            if (*v248 < *v249)
              goto LABEL_335;
            if (*v248 > *v249)
              goto LABEL_333;
            v260 = v248[1];
            v261 = v249[1];
            if (v260 < v261)
            {
LABEL_335:
              v250 = 1;
            }
            else
            {
              if (v260 > v261)
                goto LABEL_333;
              v262 = v248[2];
              v263 = v249[2];
              v30 = v262 == v263;
              v250 = v262 < v263;
              if (v30)
                goto LABEL_333;
            }
            if (v250)
              break;
LABEL_333:
            v243 = v9 + 1;
            if (v9 + 1 == a2)
              return result;
          }
          while (1)
          {
            v251 = v245;
            v252 = *--v245;
            v245[2] = v247;
            v247 = v252;
            v253 = (_DWORD *)(v244 + 12 * v252);
            if (*v248 < *v253)
              goto LABEL_340;
            if (*v248 > *v253)
              goto LABEL_332;
            v254 = v248[1];
            v255 = v253[1];
            if (v254 >= v255)
            {
              if (v254 > v255
                || ((v257 = v248[2], v258 = v253[2], v30 = v257 == v258, v256 = v257 < v258, v30)
                  ? (v259 = 0)
                  : (v259 = 1),
                    !v259))
              {
LABEL_332:
                *v251 = v246;
                goto LABEL_333;
              }
            }
            else
            {
LABEL_340:
              v256 = 1;
            }
            if (!v256)
              goto LABEL_332;
          }
        }
        if (a4)
        {
          v14 = (unint64_t)v13 >> 1;
          v15 = &v11[(unint64_t)v13 >> 1];
          v16 = **a3;
          if ((unint64_t)v12 < 0x201)
          {
            result = (uint64_t)sub_1C990FA2C(v15, v9, a2 - 1, v16);
          }
          else
          {
            sub_1C990FA2C(v9, v15, a2 - 1, v16);
            v17 = &v9[v14];
            sub_1C990FA2C(v9 + 1, v17 - 1, a2 - 2, **a3);
            sub_1C990FA2C(v9 + 2, &v9[v14 + 1], a2 - 3, **a3);
            result = (uint64_t)sub_1C990FA2C(v17 - 1, v15, &v9[v14 + 1], **a3);
            v18 = *v9;
            *v9 = *v17;
            *v17 = v18;
            a5 = v265;
          }
          --a4;
          v19 = *v9;
          v20 = *v9;
          v21 = **a3;
          if ((a5 & 1) == 0)
          {
            v23 = (int *)(v21 + 12 * *(v9 - 1));
            v24 = (int *)(v21 + 12 * v20);
            v22 = *v24;
            if (*v23 < *v24)
              goto LABEL_15;
            if (*v23 > v22)
              goto LABEL_96;
            v25 = v23[1];
            v26 = v24[1];
            if (v25 >= v26)
            {
              if (v25 > v26)
                goto LABEL_96;
              v28 = v23[2];
              v29 = v24[2];
              v30 = v28 == v29;
              v27 = v28 < v29;
              if (v30)
                goto LABEL_96;
            }
            else
            {
LABEL_15:
              v27 = 1;
            }
            if (v27)
              goto LABEL_22;
LABEL_96:
            v83 = (_DWORD *)(v21 + 12 * *v10);
            if (v22 < *v83)
              goto LABEL_97;
            if (v22 <= *v83)
            {
              v130 = v24[1];
              v131 = v83[1];
              if (v130 < v131)
              {
LABEL_97:
                v84 = 1;
LABEL_98:
                if (v84)
                {
                  v11 = v9;
                  while (1)
                  {
                    v85 = v11[1];
                    ++v11;
                    v86 = (_DWORD *)(v21 + 12 * v85);
                    if (v22 < *v86)
                      goto LABEL_103;
                    if (v22 > *v86)
                      goto LABEL_105;
                    v87 = v24[1];
                    v88 = v86[1];
                    if (v87 >= v88)
                    {
                      if (v87 > v88)
                      {
LABEL_105:
                        v89 = 0;
                        goto LABEL_106;
                      }
                      v90 = v24[2];
                      v91 = v86[2];
                      v30 = v90 == v91;
                      v89 = v90 < v91;
                      if (!v30)
                        goto LABEL_106;
                    }
                    else
                    {
LABEL_103:
                      v89 = 1;
LABEL_106:
                      if (v89)
                        goto LABEL_129;
                    }
                  }
                }
                goto LABEL_114;
              }
              if (v130 <= v131)
              {
                v132 = v24[2];
                v133 = v83[2];
                v30 = v132 == v133;
                v84 = v132 < v133;
                if (!v30)
                  goto LABEL_98;
              }
            }
LABEL_114:
            v93 = v9 + 1;
            while (1)
            {
              v11 = v93;
              if (v93 >= a2)
                break;
              v94 = (_DWORD *)(v21 + 12 * *v93);
              if (v22 < *v94)
                goto LABEL_117;
              if (v22 > *v94)
                goto LABEL_119;
              v96 = v24[1];
              v97 = v94[1];
              if (v96 < v97)
              {
LABEL_117:
                v95 = 1;
                v93 = v11 + 1;
LABEL_120:
                if (v95)
                  break;
              }
              else
              {
                if (v96 > v97)
                {
LABEL_119:
                  v95 = 0;
                  v93 = v11 + 1;
                  goto LABEL_120;
                }
                v98 = v24[2];
                v99 = v94[2];
                v30 = v98 == v99;
                v95 = v98 < v99;
                v100 = !v30;
                v93 = v11 + 1;
                if (v100)
                  goto LABEL_120;
              }
            }
LABEL_129:
            v101 = a2;
            if (v11 < a2)
            {
              v102 = a2 - 1;
              do
              {
                v101 = v102;
                v103 = (_DWORD *)(v21 + 12 * *v102);
                if (v22 < *v103)
                  goto LABEL_134;
                if (v22 > *v103)
                  break;
                v104 = v24[1];
                v105 = v103[1];
                if (v104 >= v105)
                {
                  if (v104 > v105)
                    break;
                  v107 = v24[2];
                  v108 = v103[2];
                  v30 = v107 == v108;
                  v106 = v107 < v108;
                  if (v30)
                    break;
                }
                else
                {
LABEL_134:
                  v106 = 1;
                }
                v102 = v101 - 1;
              }
              while (v106);
            }
            if (v11 < v101)
            {
              v110 = *v11;
              v111 = *v101;
              do
              {
                *v11 = v111;
                *v101 = v110;
                v112 = *v24;
                do
                {
                  do
                  {
                    v113 = v11[1];
                    ++v11;
                    v110 = v113;
                    v114 = (_DWORD *)(v21 + 12 * v113);
                    if (v112 < *v114)
                    {
LABEL_148:
                      v117 = 1;
                      break;
                    }
                    if (v112 > *v114)
                      goto LABEL_150;
                    v115 = v24[1];
                    v116 = v114[1];
                    if (v115 < v116)
                      goto LABEL_148;
                    if (v115 > v116)
                    {
LABEL_150:
                      v117 = 0;
                      break;
                    }
                    v118 = v24[2];
                    v119 = v114[2];
                    v30 = v118 == v119;
                    v117 = v118 < v119;
                  }
                  while (v30);
                }
                while (!v117);
                v121 = v101 - 1;
                while (1)
                {
                  v101 = v121;
                  v111 = *v121;
                  v122 = (_DWORD *)(v21 + 12 * *v121);
                  if (v112 >= *v122)
                  {
                    if (v112 > *v122)
                      goto LABEL_143;
                    v123 = v24[1];
                    v124 = v122[1];
                    if (v123 >= v124)
                      break;
                  }
                  v125 = 1;
LABEL_167:
                  v121 = v101 - 1;
                  if (!v125)
                    goto LABEL_143;
                }
                if (v123 <= v124)
                {
                  v126 = v24[2];
                  v127 = v122[2];
                  v30 = v126 == v127;
                  v125 = v126 < v127;
                  if (!v30)
                    goto LABEL_167;
                }
LABEL_143:
                ;
              }
              while (v11 < v101);
            }
            v129 = v11 - 1;
            if (v11 - 1 != v9)
              *v9 = *v129;
            a5 = 0;
            *v129 = v19;
            continue;
          }
          v22 = *(_DWORD *)(v21 + 12 * v20);
LABEL_22:
          v32 = (int *)(v21 + 12 * v20);
          v33 = v9 + 1;
          while (1)
          {
            v34 = v33;
            v35 = *v33;
            v36 = (_DWORD *)(v21 + 12 * *v33);
            if (*v36 >= v22)
            {
              if (*v36 > v22)
                goto LABEL_33;
              v37 = v36[1];
              v38 = v32[1];
              if (v37 >= v38)
                break;
            }
            v39 = 1;
LABEL_32:
            v33 = v34 + 1;
            if (!v39)
              goto LABEL_33;
          }
          if (v37 <= v38)
          {
            v40 = v36[2];
            v41 = v32[2];
            v30 = v40 == v41;
            v39 = v40 < v41;
            if (!v30)
              goto LABEL_32;
          }
LABEL_33:
          v43 = v34 - 1;
          v44 = a2;
          if (v34 - 1 != v9)
          {
            while (1)
            {
              v45 = *--v44;
              v46 = (_DWORD *)(v21 + 12 * v45);
              if (*v46 < v22)
                goto LABEL_35;
              if (*v46 > v22)
                goto LABEL_37;
              v48 = v46[1];
              v49 = v32[1];
              if (v48 < v49)
              {
LABEL_35:
                v47 = 1;
LABEL_38:
                if (v47)
                  goto LABEL_62;
              }
              else
              {
                if (v48 > v49)
                {
LABEL_37:
                  v47 = 0;
                  goto LABEL_38;
                }
                v50 = v46[2];
                v51 = v32[2];
                v30 = v50 == v51;
                v47 = v50 < v51;
                if (!v30)
                  goto LABEL_38;
              }
            }
          }
          v44 = a2;
          while (v34 < v44)
          {
            v53 = *--v44;
            v54 = (_DWORD *)(v21 + 12 * v53);
            if (*v54 < v22)
              goto LABEL_50;
            if (*v54 > v22)
              goto LABEL_52;
            v56 = v54[1];
            v57 = v32[1];
            if (v56 < v57)
            {
LABEL_50:
              v55 = 1;
LABEL_53:
              if (v55)
                break;
            }
            else
            {
              if (v56 > v57)
              {
LABEL_52:
                v55 = 0;
                goto LABEL_53;
              }
              v58 = v54[2];
              v59 = v32[2];
              v30 = v58 == v59;
              v55 = v58 < v59;
              if (!v30)
                goto LABEL_53;
            }
          }
LABEL_62:
          if (v34 < v44)
          {
            v61 = *v44;
            v62 = v35;
            v63 = v34;
            v64 = v44;
            while (2)
            {
              *v63 = v61;
              *v64 = v62;
              v65 = *v32;
              v66 = v63 + 1;
              while (1)
              {
                v63 = v66;
                v62 = *v66;
                v67 = (_DWORD *)(v21 + 12 * *v66);
                if (*v67 >= v65)
                {
                  if (*v67 > v65)
                    goto LABEL_76;
                  v68 = v67[1];
                  v69 = v32[1];
                  if (v68 >= v69)
                    break;
                }
                v70 = 1;
LABEL_75:
                v66 = v63 + 1;
                if (!v70)
                  goto LABEL_76;
              }
              if (v68 <= v69)
              {
                v71 = v67[2];
                v72 = v32[2];
                v30 = v71 == v72;
                v70 = v71 < v72;
                if (!v30)
                  goto LABEL_75;
              }
LABEL_76:
              v43 = v63 - 1;
LABEL_77:
              while (2)
              {
                v74 = *--v64;
                v61 = v74;
                v75 = (_DWORD *)(v21 + 12 * v74);
                if (*v75 < v65)
                {
LABEL_80:
                  v78 = 1;
                }
                else
                {
                  if (*v75 > v65)
                    goto LABEL_82;
                  v76 = v75[1];
                  v77 = v32[1];
                  if (v76 < v77)
                    goto LABEL_80;
                  if (v76 <= v77)
                  {
                    v79 = v75[2];
                    v80 = v32[2];
                    v30 = v79 == v80;
                    v78 = v79 < v80;
                    if (v30)
                      continue;
                  }
                  else
                  {
LABEL_82:
                    v78 = 0;
                  }
                }
                break;
              }
              if (v78)
              {
                if (v63 >= v64)
                  break;
                continue;
              }
              goto LABEL_77;
            }
          }
          if (v43 != v9)
            *v9 = *v43;
          *v43 = v19;
          if (v34 < v44)
            goto LABEL_95;
          v82 = sub_1C990FFF4(v9, v43, a3);
          v11 = v43 + 1;
          result = sub_1C990FFF4(v43 + 1, a2, a3);
          if (!(_DWORD)result)
          {
            if (v82)
              goto LABEL_4;
LABEL_95:
            result = sub_1C990EAAC(v9, v43, a3, a4, a5 & 1);
            a5 = 0;
            v11 = v43 + 1;
            continue;
          }
          a2 = v43;
          if (v82)
            return result;
          goto LABEL_2;
        }
        if (v11 == a2)
          return result;
        v144 = (unint64_t)(v13 - 2) >> 1;
        v145 = *a3;
        v146 = v144;
        while (2)
        {
          v147 = v146;
          if (v144 < v146)
            goto LABEL_197;
          v148 = (2 * v146) | 1;
          v149 = &v11[v148];
          v150 = 2 * v146 + 2;
          v151 = *v145;
          if (v150 < v13)
          {
            v152 = (_DWORD *)(v151 + 12 * *v149);
            v153 = (_DWORD *)(v151 + 12 * v149[1]);
            if (*v152 < *v153)
              goto LABEL_203;
            if (*v152 <= *v153)
            {
              v154 = v152[1];
              v155 = v153[1];
              if (v154 >= v155)
              {
                if (v154 <= v155)
                {
                  v187 = v152[2];
                  v188 = v153[2];
                  v30 = v187 == v188;
                  v157 = v187 < v188;
                  v156 = !v30;
                  goto LABEL_204;
                }
              }
              else
              {
LABEL_203:
                v156 = 1;
                v157 = 1;
LABEL_204:
                if ((v156 & v157) != 0)
                {
                  ++v149;
                  v148 = 2 * v147 + 2;
                }
              }
            }
          }
          v158 = &v11[v147];
          v159 = *v149;
          v160 = *v158;
          v161 = (_DWORD *)(v151 + 12 * *v149);
          result = v151 + 12 * *v158;
          if (*v161 >= *(_DWORD *)result)
          {
            if (*v161 > *(_DWORD *)result)
              goto LABEL_231;
            v162 = v161[1];
            v163 = *(_DWORD *)(result + 4);
            if (v162 >= v163)
            {
              if (v162 <= v163)
              {
                v165 = v161[2];
                v166 = *(_DWORD *)(result + 8);
                v30 = v165 == v166;
                v164 = v165 < v166;
                if (!v30)
                  goto LABEL_210;
              }
              while (1)
              {
LABEL_231:
                v181 = v149;
                *v158 = v159;
                if (v144 < v148)
                {
LABEL_196:
                  *v181 = v160;
                  goto LABEL_197;
                }
                v182 = (2 * v148) | 1;
                v149 = &v11[v182];
                v183 = 2 * v148 + 2;
                if (v183 >= v13)
                {
LABEL_239:
                  v148 = (2 * v148) | 1;
                  goto LABEL_240;
                }
                v184 = (_DWORD *)(v151 + 12 * *v149);
                v185 = (_DWORD *)(v151 + 12 * v149[1]);
                if (*v184 < *v185)
                  goto LABEL_234;
                if (*v184 > *v185)
                  goto LABEL_239;
                v174 = v184[1];
                v175 = v185[1];
                v176 = v174 <= v175;
                if (v174 < v175)
                {
LABEL_234:
                  v180 = 1;
                  v179 = 1;
                }
                else
                {
                  v148 = v182;
                  if (!v176)
                    goto LABEL_240;
                  v177 = v184[2];
                  v178 = v185[2];
                  v30 = v177 == v178;
                  v179 = v177 < v178;
                  v180 = !v30;
                }
                if ((v180 & v179) != 0)
                {
                  ++v149;
                  v148 = v183;
                }
                else
                {
                  v148 = v182;
                }
LABEL_240:
                v159 = *v149;
                v186 = (_DWORD *)(v151 + 12 * *v149);
                if (*v186 < *(_DWORD *)result)
                  goto LABEL_241;
                if (*v186 > *(_DWORD *)result)
                {
LABEL_243:
                  v172 = 0;
                  goto LABEL_244;
                }
                v168 = v186[1];
                v169 = *(_DWORD *)(result + 4);
                if (v168 < v169)
                {
LABEL_241:
                  v172 = 1;
LABEL_244:
                  v158 = v181;
                  if (v172)
                    goto LABEL_196;
                }
                else
                {
                  if (v168 > v169)
                    goto LABEL_243;
                  v170 = v186[2];
                  v171 = *(_DWORD *)(result + 8);
                  v30 = v170 == v171;
                  v172 = v170 < v171;
                  v173 = !v30;
                  v158 = v181;
                  if (v173)
                    goto LABEL_244;
                }
              }
            }
          }
          v164 = 1;
LABEL_210:
          if (!v164)
            goto LABEL_231;
LABEL_197:
          v146 = v147 - 1;
          if (v147)
            continue;
          break;
        }
        v206 = (unint64_t)v12 >> 2;
        while (2)
        {
          if (v206 < 2)
            goto LABEL_280;
          v207 = 0;
          v208 = *v11;
          v209 = *a3;
          v210 = v11;
          while (2)
          {
            v212 = v210;
            v210 += v207 + 1;
            v213 = 2 * v207;
            v207 = (2 * v207) | 1;
            if (v213 + 2 < v206)
            {
              result = *v209 + 12 * *v210;
              v214 = (_DWORD *)(*v209 + 12 * v210[1]);
              if (*(_DWORD *)result < *v214)
                goto LABEL_284;
              if (*(_DWORD *)result > *v214)
                goto LABEL_287;
              v215 = *(_DWORD *)(result + 4);
              v216 = v214[1];
              if (v215 < v216)
              {
LABEL_284:
                result = 1;
                v211 = 1;
LABEL_285:
                if ((result & v211) != 0)
                {
                  ++v210;
                  v207 = v213 + 2;
                }
              }
              else if (v215 <= v216)
              {
                v217 = *(_DWORD *)(result + 8);
                v218 = v214[2];
                v30 = v217 == v218;
                v211 = v217 < v218;
                result = !v30;
                goto LABEL_285;
              }
            }
LABEL_287:
            *v212 = *v210;
            if (v207 <= (uint64_t)((unint64_t)(v206 - 2) >> 1))
              continue;
            break;
          }
          v219 = a2 - 1;
          if (v210 == a2 - 1)
          {
            *v210 = v208;
            goto LABEL_280;
          }
          *v210 = *v219;
          *v219 = v208;
          v220 = (char *)v210 - (char *)v11 + 4;
          if (v220 >= 5)
          {
            v221 = (((unint64_t)v220 >> 2) - 2) >> 1;
            v222 = &v11[v221];
            v223 = *v222;
            v224 = *v210;
            v225 = *v209;
            v226 = (unsigned int *)(v225 + 12 * *v222);
            v227 = (_DWORD *)(v225 + 12 * *v210);
            result = *v226;
            if ((int)result < *v227)
              goto LABEL_299;
            if ((int)result <= *v227)
            {
              result = v226[1];
              v234 = v227[1];
              if ((int)result < v234)
              {
LABEL_299:
                result = 1;
              }
              else
              {
                if ((int)result > v234)
                  goto LABEL_280;
                v235 = v226[2];
                v236 = v227[2];
                v30 = v235 == v236;
                result = v235 < v236;
                if (v30)
                  goto LABEL_280;
              }
              if ((_DWORD)result)
              {
                do
                {
                  v228 = v222;
                  *v210 = v223;
                  if (!v221)
                    break;
                  v221 = (v221 - 1) >> 1;
                  v222 = &v11[v221];
                  v223 = *v222;
                  v229 = (unsigned int *)(v225 + 12 * *v222);
                  result = *v229;
                  if ((int)result < *v227)
                    goto LABEL_305;
                  if ((int)result > *v227)
                    break;
                  result = v229[1];
                  v230 = v227[1];
                  if ((int)result >= v230)
                  {
                    if ((int)result > v230)
                      break;
                    v231 = v229[2];
                    v232 = v227[2];
                    v30 = v231 == v232;
                    result = v231 < v232;
                    if (v30)
                      break;
                  }
                  else
                  {
LABEL_305:
                    result = 1;
                  }
                  v210 = v228;
                }
                while ((result & 1) != 0);
                *v228 = v224;
              }
            }
          }
LABEL_280:
          --a2;
          v176 = (unint64_t)v206-- > 2;
          if (v176)
            continue;
          return result;
        }
    }
  }
}

int *sub_1C990FA2C(int *result, int *a2, int *a3, uint64_t a4)
{
  int v4;
  int v5;
  int *v6;
  int *v7;
  int v8;
  BOOL v9;
  _DWORD *v10;
  int v11;
  int v12;
  _BOOL4 v13;
  _DWORD *v14;
  _BOOL4 v15;
  int v16;
  _DWORD *v17;
  _DWORD *v18;
  _BOOL4 v19;
  int v20;
  int v21;
  int v22;
  int v23;
  BOOL v24;
  int v26;
  int v27;
  int v28;
  int v29;
  int v31;
  int v32;
  int v33;
  int v34;
  int v36;
  int v37;
  int *v39;
  _BOOL4 v40;
  int v41;
  int v42;
  int v43;
  int v44;

  v4 = *a2;
  v5 = *result;
  v6 = (int *)(a4 + 12 * *a2);
  v7 = (int *)(a4 + 12 * *result);
  v8 = *v6;
  if (*v6 < *v7)
    goto LABEL_2;
  if (v8 > *v7)
    goto LABEL_11;
  v26 = v6[1];
  v27 = v7[1];
  if (v26 < v27)
  {
LABEL_2:
    v9 = 1;
  }
  else
  {
    if (v26 > v27)
      goto LABEL_11;
    v28 = v6[2];
    v29 = v7[2];
    v24 = v28 == v29;
    v9 = v28 < v29;
    if (v24)
      goto LABEL_11;
  }
  if (v9)
  {
    v10 = (_DWORD *)(a4 + 12 * *a3);
    if (*v10 < v8)
      goto LABEL_7;
    if (*v10 > v8)
      goto LABEL_46;
    v11 = v10[1];
    v12 = v6[1];
    if (v11 >= v12)
    {
      if (v11 > v12)
        goto LABEL_46;
      v36 = v10[2];
      v37 = v6[2];
      v24 = v36 == v37;
      v13 = v36 < v37;
      if (v24)
        goto LABEL_46;
    }
    else
    {
LABEL_7:
      v13 = 1;
    }
    if (v13)
    {
      *result = *a3;
LABEL_50:
      *a3 = v5;
      return result;
    }
LABEL_46:
    *result = v4;
    *a2 = v5;
    v39 = (int *)(a4 + 12 * *a3);
    if (*v39 < *v7)
      goto LABEL_47;
    if (*v39 > *v7)
      return result;
    v41 = v39[1];
    v42 = v7[1];
    if (v41 < v42)
    {
LABEL_47:
      v40 = 1;
    }
    else
    {
      if (v41 > v42)
        return result;
      v43 = v39[2];
      v44 = v7[2];
      v24 = v43 == v44;
      v40 = v43 < v44;
      if (v24)
        return result;
    }
    if (v40)
    {
      *a2 = *a3;
      goto LABEL_50;
    }
    return result;
  }
LABEL_11:
  v14 = (_DWORD *)(a4 + 12 * *a3);
  if (*v14 < v8)
    goto LABEL_12;
  if (*v14 > v8)
    return result;
  v20 = v14[1];
  v21 = v6[1];
  if (v20 < v21)
  {
LABEL_12:
    v15 = 1;
  }
  else
  {
    if (v20 > v21)
      return result;
    v22 = v14[2];
    v23 = v6[2];
    v24 = v22 == v23;
    v15 = v22 < v23;
    if (v24)
      return result;
  }
  if (!v15)
    return result;
  *a2 = *a3;
  *a3 = v4;
  v16 = *result;
  v17 = (_DWORD *)(a4 + 12 * *a2);
  v18 = (_DWORD *)(a4 + 12 * *result);
  if (*v17 < *v18)
    goto LABEL_15;
  if (*v17 > *v18)
    return result;
  v31 = v17[1];
  v32 = v18[1];
  if (v31 < v32)
  {
LABEL_15:
    v19 = 1;
  }
  else
  {
    if (v31 > v32)
      return result;
    v33 = v17[2];
    v34 = v18[2];
    v24 = v33 == v34;
    v19 = v33 < v34;
    if (v24)
      return result;
  }
  if (v19)
  {
    *result = *a2;
    *a2 = v16;
  }
  return result;
}

int *sub_1C990FC44(int *a1, int *a2, int *a3, int *a4, uint64_t **a5)
{
  int *result;
  int v11;
  uint64_t v12;
  _DWORD *v13;
  _DWORD *v14;
  _BOOL4 v15;
  int v16;
  _DWORD *v17;
  _DWORD *v18;
  _BOOL4 v19;
  int v20;
  _DWORD *v21;
  _DWORD *v22;
  int v23;
  int v24;
  _BOOL4 v25;
  int v26;
  int v27;
  int v28;
  int v29;
  BOOL v30;
  int v32;
  int v33;
  int v34;
  int v35;
  int v37;
  int v38;

  result = sub_1C990FA2C(a1, a2, a3, **a5);
  v11 = *a3;
  v12 = **a5;
  v13 = (_DWORD *)(v12 + 12 * *a4);
  v14 = (_DWORD *)(v12 + 12 * *a3);
  if (*v13 < *v14)
    goto LABEL_2;
  if (*v13 > *v14)
    return result;
  v26 = v13[1];
  v27 = v14[1];
  if (v26 < v27)
  {
LABEL_2:
    v15 = 1;
LABEL_3:
    if (!v15)
      return result;
    *a3 = *a4;
    *a4 = v11;
    v16 = *a2;
    v17 = (_DWORD *)(v12 + 12 * *a3);
    v18 = (_DWORD *)(v12 + 12 * *a2);
    if (*v17 < *v18)
      goto LABEL_5;
    if (*v17 > *v18)
      return result;
    v32 = v17[1];
    v33 = v18[1];
    if (v32 < v33)
    {
LABEL_5:
      v19 = 1;
    }
    else
    {
      if (v32 > v33)
        return result;
      v34 = v17[2];
      v35 = v18[2];
      v30 = v34 == v35;
      v19 = v34 < v35;
      if (v30)
        return result;
    }
    if (!v19)
      return result;
    *a2 = *a3;
    *a3 = v16;
    v20 = *a1;
    v21 = (_DWORD *)(v12 + 12 * *a2);
    v22 = (_DWORD *)(v12 + 12 * *a1);
    if (*v21 < *v22)
      goto LABEL_10;
    if (*v21 > *v22)
      return result;
    v23 = v21[1];
    v24 = v22[1];
    if (v23 >= v24)
    {
      if (v23 > v24)
        return result;
      v37 = v21[2];
      v38 = v22[2];
      v30 = v37 == v38;
      v25 = v37 < v38;
      if (v30)
        return result;
    }
    else
    {
LABEL_10:
      v25 = 1;
    }
    if (v25)
    {
      *a1 = *a2;
      *a2 = v20;
    }
    return result;
  }
  if (v26 <= v27)
  {
    v28 = v13[2];
    v29 = v14[2];
    v30 = v28 == v29;
    v15 = v28 < v29;
    if (!v30)
      goto LABEL_3;
  }
  return result;
}

int *sub_1C990FDE4(int *a1, int *a2, int *a3, int *a4, int *a5, uint64_t **a6)
{
  int *result;
  int v13;
  uint64_t v14;
  _DWORD *v15;
  _DWORD *v16;
  _BOOL4 v17;
  int v18;
  _DWORD *v19;
  _DWORD *v20;
  _BOOL4 v21;
  int v22;
  _DWORD *v23;
  _DWORD *v24;
  _BOOL4 v25;
  int v26;
  _DWORD *v27;
  _DWORD *v28;
  int v29;
  int v30;
  _BOOL4 v31;
  int v32;
  int v33;
  int v34;
  int v35;
  BOOL v36;
  int v38;
  int v39;
  int v40;
  int v41;
  int v43;
  int v44;
  int v45;
  int v46;
  int v48;
  int v49;

  result = sub_1C990FC44(a1, a2, a3, a4, a6);
  v13 = *a4;
  v14 = **a6;
  v15 = (_DWORD *)(v14 + 12 * *a5);
  v16 = (_DWORD *)(v14 + 12 * *a4);
  if (*v15 < *v16)
    goto LABEL_2;
  if (*v15 > *v16)
    return result;
  v32 = v15[1];
  v33 = v16[1];
  if (v32 < v33)
  {
LABEL_2:
    v17 = 1;
LABEL_3:
    if (!v17)
      return result;
    *a4 = *a5;
    *a5 = v13;
    v18 = *a3;
    v19 = (_DWORD *)(v14 + 12 * *a4);
    v20 = (_DWORD *)(v14 + 12 * *a3);
    if (*v19 < *v20)
      goto LABEL_5;
    if (*v19 > *v20)
      return result;
    v38 = v19[1];
    v39 = v20[1];
    if (v38 < v39)
    {
LABEL_5:
      v21 = 1;
    }
    else
    {
      if (v38 > v39)
        return result;
      v40 = v19[2];
      v41 = v20[2];
      v36 = v40 == v41;
      v21 = v40 < v41;
      if (v36)
        return result;
    }
    if (!v21)
      return result;
    *a3 = *a4;
    *a4 = v18;
    v22 = *a2;
    v23 = (_DWORD *)(v14 + 12 * *a3);
    v24 = (_DWORD *)(v14 + 12 * *a2);
    if (*v23 < *v24)
      goto LABEL_8;
    if (*v23 > *v24)
      return result;
    v43 = v23[1];
    v44 = v24[1];
    if (v43 < v44)
    {
LABEL_8:
      v25 = 1;
    }
    else
    {
      if (v43 > v44)
        return result;
      v45 = v23[2];
      v46 = v24[2];
      v36 = v45 == v46;
      v25 = v45 < v46;
      if (v36)
        return result;
    }
    if (!v25)
      return result;
    *a2 = *a3;
    *a3 = v22;
    v26 = *a1;
    v27 = (_DWORD *)(v14 + 12 * *a2);
    v28 = (_DWORD *)(v14 + 12 * *a1);
    if (*v27 < *v28)
      goto LABEL_13;
    if (*v27 > *v28)
      return result;
    v29 = v27[1];
    v30 = v28[1];
    if (v29 >= v30)
    {
      if (v29 > v30)
        return result;
      v48 = v27[2];
      v49 = v28[2];
      v36 = v48 == v49;
      v31 = v48 < v49;
      if (v36)
        return result;
    }
    else
    {
LABEL_13:
      v31 = 1;
    }
    if (v31)
    {
      *a1 = *a2;
      *a2 = v26;
    }
    return result;
  }
  if (v32 <= v33)
  {
    v34 = v15[2];
    v35 = v16[2];
    v36 = v34 == v35;
    v17 = v34 < v35;
    if (!v36)
      goto LABEL_3;
  }
  return result;
}

BOOL sub_1C990FFF4(int *a1, int *a2, uint64_t **a3)
{
  uint64_t v6;
  _BOOL8 result;
  int v8;
  int v9;
  uint64_t v10;
  _DWORD *v11;
  _DWORD *v12;
  _BOOL4 v13;
  int *v14;
  int *v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int *v19;
  int v20;
  int v21;
  _DWORD *v22;
  _DWORD *v23;
  _BOOL4 v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  _DWORD *v28;
  int v29;
  int v30;
  int v31;
  int v32;
  BOOL v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v40;
  int v41;
  int v42;
  int v43;

  v6 = a2 - a1;
  result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v8 = *(a2 - 1);
      v9 = *a1;
      v10 = **a3;
      v11 = (_DWORD *)(v10 + 12 * v8);
      v12 = (_DWORD *)(v10 + 12 * *a1);
      if (*v11 < *v12)
        goto LABEL_3;
      if (*v11 > *v12)
        return result;
      v40 = v11[1];
      v41 = v12[1];
      if (v40 < v41)
      {
LABEL_3:
        v13 = 1;
LABEL_4:
        if (v13)
        {
          *a1 = v8;
          *(a2 - 1) = v9;
        }
        return result;
      }
      if (v40 <= v41)
      {
        v42 = v11[2];
        v43 = v12[2];
        v33 = v42 == v43;
        v13 = v42 < v43;
        if (!v33)
          goto LABEL_4;
      }
      return result;
    case 3:
      sub_1C990FA2C(a1, a1 + 1, a2 - 1, **a3);
      return 1;
    case 4:
      sub_1C990FC44(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      sub_1C990FDE4(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1, a3);
      return 1;
    default:
      v14 = a1 + 2;
      sub_1C990FA2C(a1, a1 + 1, a1 + 2, **a3);
      v15 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v16 = 0;
      v17 = 0;
      v18 = **a3;
      while (2)
      {
        v20 = *v15;
        v21 = *v14;
        v22 = (_DWORD *)(v18 + 12 * *v15);
        v23 = (_DWORD *)(v18 + 12 * *v14);
        if (*v22 < *v23)
          goto LABEL_13;
        if (*v22 > *v23)
          goto LABEL_11;
        v35 = v22[1];
        v36 = v23[1];
        if (v35 < v36)
        {
LABEL_13:
          v24 = 1;
        }
        else
        {
          if (v35 > v36)
            goto LABEL_11;
          v37 = v22[2];
          v38 = v23[2];
          v33 = v37 == v38;
          v24 = v37 < v38;
          if (v33)
            goto LABEL_11;
        }
        if (v24)
        {
          v25 = v16;
          while (1)
          {
            *(int *)((char *)a1 + v25 + 12) = v21;
            if (v25 == -8)
              break;
            v27 = v25;
            v21 = *(int *)((char *)a1 + v25 + 4);
            v28 = (_DWORD *)(v18 + 12 * v21);
            if (*v22 < *v28)
              goto LABEL_16;
            if (*v22 > *v28)
              goto LABEL_9;
            v29 = v22[1];
            v30 = v28[1];
            if (v29 < v30)
            {
LABEL_16:
              v26 = 1;
            }
            else if (v29 > v30
                   || ((v31 = v22[2], v32 = v28[2], v33 = v31 == v32, v26 = v31 < v32, v33) ? (v34 = 0) : (v34 = 1), !v34))
            {
LABEL_9:
              v19 = (int *)((char *)a1 + v27 + 8);
              goto LABEL_10;
            }
            v25 = v27 - 4;
            if (!v26)
              goto LABEL_9;
          }
          v19 = a1;
LABEL_10:
          *v19 = v20;
          if (++v17 == 8)
            return v15 + 1 == a2;
        }
LABEL_11:
        v14 = v15;
        v16 += 4;
        if (++v15 == a2)
          return 1;
        continue;
      }
  }
}

void sub_1C9910290(uint64_t a1, uint64_t *a2, uint64_t *a3, size_t __sz)
{
  uint64_t *v6;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  char *v15;
  unint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *p_shared_owners;
  unint64_t v31;
  uint64_t v32;
  BOOL v33;
  unint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  unint64_t *v38;
  unint64_t v39;
  char *v40;
  uint64_t v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;

  v6 = a2;
  v8 = *(_QWORD *)(a1 + 16);
  v9 = *(char **)a1;
  if (__sz <= (v8 - *(_QWORD *)a1) >> 4)
  {
    v15 = *(char **)(a1 + 8);
    v16 = (v15 - v9) >> 4;
    if (v16 >= __sz)
    {
      if (a2 != a3)
      {
        do
        {
          v26 = *v6;
          v25 = v6[1];
          if (v25)
          {
            v27 = (unint64_t *)(v25 + 8);
            do
              v28 = __ldxr(v27);
            while (__stxr(v28 + 1, v27));
          }
          v29 = (std::__shared_weak_count *)*((_QWORD *)v9 + 1);
          *(_QWORD *)v9 = v26;
          *((_QWORD *)v9 + 1) = v25;
          if (v29)
          {
            p_shared_owners = (unint64_t *)&v29->__shared_owners_;
            do
              v31 = __ldaxr(p_shared_owners);
            while (__stlxr(v31 - 1, p_shared_owners));
            if (!v31)
            {
              ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
              std::__shared_weak_count::__release_weak(v29);
            }
          }
          v6 += 2;
          v9 += 16;
        }
        while (v6 != a3);
        v15 = *(char **)(a1 + 8);
      }
      while (v15 != v9)
      {
        v44 = (std::__shared_weak_count *)*((_QWORD *)v15 - 1);
        if (v44)
        {
          v45 = (unint64_t *)&v44->__shared_owners_;
          do
            v46 = __ldaxr(v45);
          while (__stlxr(v46 - 1, v45));
          if (!v46)
          {
            ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
            std::__shared_weak_count::__release_weak(v44);
          }
        }
        v15 -= 16;
      }
      *(_QWORD *)(a1 + 8) = v9;
    }
    else
    {
      v17 = &a2[2 * v16];
      if (v15 != v9)
      {
        do
        {
          v19 = *v6;
          v18 = v6[1];
          if (v18)
          {
            v20 = (unint64_t *)(v18 + 8);
            do
              v21 = __ldxr(v20);
            while (__stxr(v21 + 1, v20));
          }
          v22 = (std::__shared_weak_count *)*((_QWORD *)v9 + 1);
          *(_QWORD *)v9 = v19;
          *((_QWORD *)v9 + 1) = v18;
          if (v22)
          {
            v23 = (unint64_t *)&v22->__shared_owners_;
            do
              v24 = __ldaxr(v23);
            while (__stlxr(v24 - 1, v23));
            if (!v24)
            {
              ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
              std::__shared_weak_count::__release_weak(v22);
            }
          }
          v6 += 2;
          v9 += 16;
        }
        while (v6 != v17);
        v9 = *(char **)(a1 + 8);
      }
      v40 = v9;
      if (v17 != a3)
      {
        v40 = v9;
        do
        {
          v41 = v17[1];
          *(_QWORD *)v40 = *v17;
          *((_QWORD *)v40 + 1) = v41;
          if (v41)
          {
            v42 = (unint64_t *)(v41 + 8);
            do
              v43 = __ldxr(v42);
            while (__stxr(v43 + 1, v42));
          }
          v17 += 2;
          v40 += 16;
        }
        while (v17 != a3);
      }
      *(_QWORD *)(a1 + 8) = v40;
    }
  }
  else
  {
    if (v9)
    {
      v10 = *(char **)(a1 + 8);
      v11 = *(char **)a1;
      if (v10 != v9)
      {
        do
        {
          v12 = (std::__shared_weak_count *)*((_QWORD *)v10 - 1);
          if (v12)
          {
            v13 = (unint64_t *)&v12->__shared_owners_;
            do
              v14 = __ldaxr(v13);
            while (__stlxr(v14 - 1, v13));
            if (!v14)
            {
              ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
              std::__shared_weak_count::__release_weak(v12);
            }
          }
          v10 -= 16;
        }
        while (v10 != v9);
        v11 = *(char **)a1;
      }
      *(_QWORD *)(a1 + 8) = v9;
      operator delete(v11);
      v8 = 0;
      *(_QWORD *)a1 = 0;
      *(_QWORD *)(a1 + 8) = 0;
      *(_QWORD *)(a1 + 16) = 0;
    }
    if (__sz >> 60)
      goto LABEL_68;
    v32 = v8 >> 3;
    if (v8 >> 3 <= __sz)
      v32 = __sz;
    v33 = (unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0;
    v34 = 0xFFFFFFFFFFFFFFFLL;
    if (!v33)
      v34 = v32;
    if (v34 >> 60)
LABEL_68:
      abort();
    v35 = 2 * v34;
    v36 = operator new(16 * v34);
    *(_QWORD *)a1 = v36;
    *(_QWORD *)(a1 + 8) = v36;
    *(_QWORD *)(a1 + 16) = &v36[v35];
    while (v6 != a3)
    {
      v37 = v6[1];
      *v36 = *v6;
      v36[1] = v37;
      if (v37)
      {
        v38 = (unint64_t *)(v37 + 8);
        do
          v39 = __ldxr(v38);
        while (__stxr(v39 + 1, v38));
      }
      v6 += 2;
      v36 += 2;
    }
    *(_QWORD *)(a1 + 8) = v36;
  }
}

uint64_t sub_1C991059C(char **a1, uint64_t *a2, uint64_t a3)
{
  char **v5;
  char *v6;
  uint64_t **v7;
  cva::Path *v8;
  uint64_t v9;
  const void *v10;
  std::__shared_weak_count *size;
  unint64_t *v12;
  unint64_t v13;
  char v14;
  uint64_t **v15;
  void **v20;
  void **v21;
  void **v22;
  uint64_t **v23;
  uint64_t *v24;
  _QWORD *v25;
  uint64_t v26;
  _BYTE *v27;
  _QWORD *v28;
  uint64_t *v29;
  char *v30;
  std::__shared_weak_count *v31;
  unint64_t *p_shared_owners;
  unint64_t v33;
  void **v34;
  uint64_t (**i)();
  uint64_t (***v37)();
  uint64_t v38;
  std::string *p_p;
  std::string::size_type v40;
  _QWORD *v41;
  std::string *v42;
  std::string::size_type v43;
  uint64_t v44;
  uint64_t j;
  uint64_t (***v47)();
  uint64_t v48;
  size_t v49;
  char *v50;
  std::string::value_type *v51;
  uint64_t (***v52)();
  uint64_t v53;
  std::string::value_type v54;
  BOOL v55;
  void *v56;
  size_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  size_t v62;
  size_t v63;
  char v64;
  unsigned __int16 *v65;
  int v67;
  int v68;
  uint64_t (***v71)();
  uint64_t v72;
  unsigned __int8 *v73;
  int v74;
  uint64_t **v75;
  uint64_t *v76;
  _QWORD *v77;
  uint64_t v78;
  _BYTE *v79;
  _WORD *v80;
  unint64_t v81;
  char *v82;
  uint64_t (***v84)();
  uint64_t v85;
  unint64_t v86;
  char *v87;
  unint64_t v88;
  char *v89;
  char *v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  unint64_t v94;
  _BYTE *v95;
  size_t v96;
  __int128 *v97;
  std::string::value_type *v98;
  uint64_t (***v99)();
  uint64_t v100;
  std::string::value_type v101;
  BOOL v102;
  __int128 *v103;
  size_t v104;
  unint64_t v105;
  uint64_t v106;
  uint64_t v107;
  __int128 *v108;
  uint64_t v109;
  int v110;
  size_t v111;
  unint64_t v112;
  std::string *v113;
  char *v114;
  unint64_t v115;
  unint64_t v116;
  unint64_t v117;
  unint64_t v118;
  char *v119;
  char *v120;
  unint64_t v121;
  unint64_t v122;
  unint64_t v123;
  char *v124;
  __int128 *v125;
  size_t v126;
  int v127;
  size_t v128;
  _BYTE *v129;
  std::string *v130;
  _BYTE *v131;
  uint64_t v132;
  std::string *v133;
  int v134;
  int v135;
  int v136;
  _BOOL4 v137;
  int v138;
  char *v139;
  char *v140;
  char *v141;
  char *v142;
  int v143;
  int v144;
  int v145;
  int v146;
  int v147;
  int v148;
  size_t v149;
  __int128 *v150;
  std::string::value_type *v151;
  uint64_t (***v152)();
  uint64_t v153;
  std::string::value_type v154;
  BOOL v155;
  __int128 *p_src;
  size_t v157;
  unint64_t v158;
  uint64_t v159;
  uint64_t v160;
  __int128 *v161;
  uint64_t v162;
  uint64_t *v163;
  _QWORD *v164;
  _BYTE *v165;
  _QWORD *v166;
  uint64_t *v167;
  char *v168;
  std::__shared_weak_count *v169;
  unint64_t *v170;
  unint64_t v171;
  char *v172;
  unint64_t *v173;
  uint64_t v174;
  char *v175;
  char *v176;
  unint64_t v177;
  uint64_t v178;
  _OWORD *v179;
  char *v180;
  uint64_t v181;
  __int128 v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  void **v186;
  const std::string::value_type *v187;
  std::string::size_type v188;
  std::string *v189;
  void *v190;
  char v191;
  std::string::size_type v192;
  std::__shared_weak_count *v193;
  unint64_t *v194;
  unint64_t v195;
  _QWORD *v196;
  uint64_t v197;
  int v198;
  std::string::size_type v199;
  _QWORD *v200;
  std::string *v201;
  std::string::size_type v202;
  uint64_t v203;
  uint64_t k;
  std::string::size_type v206;
  uint64_t v207;
  size_t v208;
  char *v209;
  char *v210;
  std::string::size_type v211;
  uint64_t v212;
  char v213;
  BOOL v214;
  void *v215;
  size_t v216;
  unint64_t v217;
  uint64_t v218;
  uint64_t v219;
  char *v220;
  size_t v221;
  size_t v222;
  char v223;
  _WORD *v224;
  int v225;
  unsigned __int16 *v226;
  int v229;
  int v230;
  std::string::size_type v233;
  uint64_t v234;
  _DWORD *v235;
  _QWORD *v236;
  std::string::size_type v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t **v242;
  std::string::size_type v244;
  uint64_t v245;
  size_t v246;
  char *v247;
  char *v248;
  std::string::size_type v249;
  uint64_t v250;
  char v251;
  BOOL v252;
  void *v253;
  size_t v254;
  unint64_t v255;
  uint64_t v256;
  uint64_t v257;
  char *v258;
  int v259;
  size_t v260;
  int v261;
  size_t v262;
  unint64_t v263;
  __int128 *v264;
  uint64_t v265;
  uint64_t v266;
  void **v267;
  char *v268;
  const void *v269;
  uint64_t **v270;
  uint64_t **v271;
  int v272;
  std::string::size_type v274;
  uint64_t v275;
  size_t v276;
  _BYTE **v277;
  _BYTE *v278;
  std::string::size_type v279;
  uint64_t v280;
  char v281;
  BOOL v282;
  _BYTE **v283;
  size_t v284;
  unint64_t v285;
  uint64_t v286;
  uint64_t v287;
  _BYTE **v288;
  size_t v289;
  char *v290;
  _BYTE **v291;
  char *v292;
  int v293;
  const void *v294;
  size_t v295;
  size_t v296;
  int v297;
  const void *v298;
  _QWORD *v299;
  const void *v300;
  int v301;
  const void *v302;
  size_t v303;
  size_t v304;
  int v305;
  size_t v306;
  char *v307;
  char *v308;
  std::string::size_type v309;
  uint64_t v310;
  char v311;
  BOOL v312;
  void *v313;
  size_t v314;
  unint64_t v315;
  uint64_t v316;
  uint64_t v317;
  char *v318;
  int v319;
  size_t v320;
  int v321;
  size_t v322;
  unint64_t v323;
  __int128 *v324;
  uint64_t v325;
  uint64_t v326;
  void **v327;
  char *v328;
  const void *v329;
  uint64_t **v330;
  size_t v331;
  char *v332;
  char *v333;
  std::string::size_type v334;
  uint64_t v335;
  char v336;
  BOOL v337;
  void *v338;
  size_t v339;
  unint64_t v340;
  uint64_t v341;
  uint64_t v342;
  char *v343;
  int v344;
  size_t v345;
  int v346;
  size_t v347;
  unint64_t v348;
  __int128 *p_dst;
  uint64_t v350;
  uint64_t v351;
  void **v352;
  char *v353;
  const void *v354;
  uint64_t **v355;
  uint64_t **v356;
  void **v357;
  void **v358;
  void **v359;
  char v360;
  unint64_t *v361;
  unint64_t v362;
  std::__shared_weak_count *v363;
  unint64_t *v364;
  unint64_t v365;
  void *v366;
  char *v367;
  char *v368;
  uint64_t v369;
  int v370;
  char *v371;
  int v372;
  int v373;
  int v374;
  int v375;
  int v376;
  int v377;
  int v378;
  int v379;
  uint64_t **v380;
  int v381;
  int v382;
  uint64_t v383;
  int v384;
  int v385;
  uint64_t **v386;
  unint64_t v387;
  int *v388;
  char *v389;
  std::__shared_weak_count *v390;
  unint64_t *v391;
  unint64_t v392;
  int v393;
  int v394;
  int v395;
  std::__shared_weak_count *v396;
  unint64_t *v397;
  unint64_t v398;
  std::__shared_weak_count *v399;
  unint64_t *v400;
  unint64_t v401;
  unsigned int v402;
  unsigned int v403;
  unsigned int v404;
  unsigned int v405;
  char *v406;
  char *v407;
  uint64_t v408;
  unint64_t v409;
  std::__shared_weak_count *v410;
  unint64_t *v411;
  unint64_t v412;
  std::__shared_weak_count *v413;
  unint64_t *v414;
  unint64_t v415;
  unsigned int v416;
  unsigned int v417;
  int v418;
  char *v419;
  char *v420;
  unint64_t v421;
  unint64_t v422;
  char *v423;
  unint64_t v424;
  unint64_t v425;
  unint64_t v426;
  char *v427;
  char *v428;
  char *v429;
  uint64_t v430;
  int v431;
  char *v432;
  unint64_t *v433;
  char *v434;
  char *v435;
  uint64_t v436;
  int v437;
  char *v438;
  unint64_t v439;
  uint64_t v440;
  uint64_t v441;
  unint64_t v442;
  char *v443;
  char *v444;
  char *v445;
  int v446;
  size_t v447;
  std::string *v448;
  void *v449;
  int v450;
  std::string::size_type v451;
  unint64_t v452;
  std::string *v453;
  size_t v454;
  std::string *v455;
  void *v456;
  int v457;
  std::string *v458;
  int v459;
  std::string *v460;
  int v461;
  int v462;
  int v463;
  std::string *v464;
  char *v465;
  unint64_t v466;
  unint64_t v467;
  unint64_t v468;
  int v469;
  char *v470;
  int *v471;
  int *v472;
  unint64_t v473;
  uint64_t v474;
  int v475;
  int *v476;
  int v477;
  int v478;
  char *v479;
  char *v480;
  uint64_t m;
  uint64_t v482;
  unint64_t v483;
  unint64_t v484;
  uint64_t v485;
  unint64_t v486;
  char *v487;
  char *v488;
  char *v489;
  char *v490;
  char *v491;
  unint64_t v492;
  unint64_t v493;
  int v494;
  unint64_t v495;
  unint64_t v496;
  uint64_t v497;
  unint64_t v498;
  uint64_t v499;
  char *v500;
  char *v501;
  char *n;
  uint64_t v503;
  int v504;
  uint64_t v505;
  BOOL v506;
  uint64_t v507;
  uint64_t v508;
  std::__shared_weak_count *v509;
  unint64_t *v510;
  unint64_t v511;
  uint64_t v513;
  unint64_t v514;
  BOOL v515;
  int v516;
  char *v517;
  char *v518;
  char *v519;
  void *v520;
  void *v521;
  char v522;
  unint64_t v523;
  int v524;
  int v525;
  char **v526;
  char **v527;
  char **v528;
  char **v529;
  unint64_t v530;
  std::__shared_weak_count *v531;
  int v532;
  uint64_t **v533;
  char *v535;
  char v536;
  _QWORD v537[36];
  _QWORD v538[36];
  _QWORD v539[36];
  _QWORD v540[36];
  _QWORD v541[36];
  _QWORD v542[36];
  std::string::size_type v543;
  std::__shared_weak_count *v544;
  void *v545[3];
  __int128 v546;
  int64_t v547;
  void *v548;
  size_t v549;
  int64_t v550;
  uint64_t (**v551)();
  uint64_t (***v552)();
  char v553;
  uint64_t (**v554)();
  int v555;
  uint64_t v556;
  _QWORD *v557;
  char v558;
  BOOL v559;
  int v560;
  std::string v561;
  uint64_t (**v562)();
  uint64_t (***v563)();
  char v564;
  uint64_t (**v565)();
  int v566;
  uint64_t v567;
  uint64_t *v568;
  char v569;
  char v570;
  int v571;
  __int128 __src;
  int64_t v573;
  uint64_t v574;
  uint64_t v575;
  uint64_t v576;
  uint64_t v577;
  uint64_t v578;
  uint64_t v579;
  void *v580[2];
  uint64_t v581;
  uint64_t v582;
  _QWORD v583[36];
  uint64_t v584;
  std::__shared_weak_count *v585;
  __int128 __dst;
  unint64_t v587;
  void *v588;
  size_t v589;
  int64_t v590;
  void *v591;
  size_t v592;
  int64_t v593;
  std::string __p;
  uint64_t (**v595)();
  int v596;
  uint64_t v597;
  _QWORD *v598;
  char v599;
  unsigned __int8 v600;
  int v601;
  _BYTE *v602;
  size_t v603;
  int64_t v604;
  std::string v605;
  std::string v606;
  uint64_t (**v607)();
  int v608;
  uint64_t v609;
  _QWORD *v610;
  char v611;
  BOOL v612;
  int v613;
  uint64_t v614;

  v614 = *MEMORY[0x1E0C80C00];
  a1[1] = *a1;
  a1[4] = a1[3];
  a1[7] = a1[6];
  a1[13] = a1[12];
  v528 = a1 + 15;
  a1[16] = a1[15];
  v529 = a1 + 18;
  a1[19] = a1[18];
  v527 = a1 + 21;
  a1[22] = a1[21];
  v526 = a1 + 24;
  a1[25] = a1[24];
  v5 = a1 + 27;
  a1[28] = a1[27];
  v6 = (char *)(a1 + 31);
  sub_1C98D8660((uint64_t)a1[31]);
  a1[30] = v6;
  v7 = (uint64_t **)(a1 + 30);
  v535 = v6;
  *(_QWORD *)v6 = 0;
  a1[32] = 0;
  sub_1C98D85A0(a1[34]);
  a1[34] = 0;
  a1[35] = 0;
  a1[33] = (char *)(a1 + 34);
  if (*((char *)a1 + 455) < 0)
  {
    *a1[54] = 0;
    a1[55] = 0;
  }
  else
  {
    *((_BYTE *)a1 + 432) = 0;
    *((_BYTE *)a1 + 455) = 0;
  }
  sub_1C991C9BC(&v584, *a2, (const void **)a3);
  if (!v584)
  {
    sub_1C99072C4(&__p);
    if (*(char *)(a3 + 23) >= 0)
      LOBYTE(v10) = a3;
    else
      v10 = *(const void **)a3;
    sub_1C9907EC4(v583, &__p, 0, 0, "[RELEASE ERROR  ]", "/Library/Caches/com.apple.xbs/Sources/AppleCVA/shared/src/modules/avatar/shrek/libs/alg/geometry/src/three_d/quad_mesh.cpp", 1230, "could not open file %s", (char)v10);
    sub_1C9909318((uint64_t)v583);
    size = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
    if (__p.__r_.__value_.__l.__size_)
    {
      v12 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
        std::__shared_weak_count::__release_weak(size);
      }
    }
    v14 = 0;
    goto LABEL_1112;
  }
  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v584 + 64))(&v582);
  v8 = (cva::Path *)cva::Path::Path();
  cva::Path::directory(v8);
  v9 = cva::Path::string((cva::Path *)&__p);
  if (*(char *)(v9 + 23) < 0)
  {
    sub_1C987D148(v580, *(void **)v9, *(_QWORD *)(v9 + 8));
  }
  else
  {
    *(_OWORD *)v580 = *(_OWORD *)v9;
    v581 = *(_QWORD *)(v9 + 16);
  }
  cva::Path::~Path((cva::Path *)&__p);
  cva::Path::~Path((cva::Path *)&v606);
  v579 = 0;
  v578 = 0;
  v577 = 0;
  v576 = 0;
  v575 = 0;
  v574 = 0;
  HIBYTE(v573) = 7;
  strcpy((char *)&__src, "default");
  v15 = sub_1C991473C((uint64_t **)a1 + 30, (const void **)&__src, (uint64_t)&__src);
  __asm { FMOV            V8.2S, #1.0 }
  v15[7] = _D8;
  *((_DWORD *)v15 + 16) = 1065353216;
  *(uint64_t **)((char *)v15 + 68) = 0;
  *(uint64_t **)((char *)v15 + 76) = (uint64_t *)0x4270000000000000;
  v20 = (void **)(v15 + 11);
  if (*((char *)v15 + 111) < 0)
    operator delete(*v20);
  v533 = (uint64_t **)(a1 + 33);
  v21 = (void **)(v15 + 14);
  *v20 = 0;
  v15[12] = 0;
  v15[13] = 0;
  if (*((char *)v15 + 135) < 0)
    operator delete(*v21);
  v22 = (void **)(v15 + 17);
  *v21 = 0;
  v15[15] = 0;
  v15[16] = 0;
  if (*((char *)v15 + 159) < 0)
    operator delete(*v22);
  *v22 = 0;
  v15[18] = 0;
  v15[19] = 0;
  v23 = sub_1C990E59C(v533, (const void **)&__src, (uint64_t)&__src);
  v24 = v23[8];
  if (v24 == v23[7] || (v25 = (_QWORD *)*(v24 - 2), v25[1] != *v25) || v25[4] != v25[3])
  {
    v26 = operator new();
    v27 = (_BYTE *)(v26 + 48);
    *(_OWORD *)v26 = 0u;
    *(_OWORD *)(v26 + 16) = 0u;
    *(_OWORD *)(v26 + 32) = 0u;
    if (SHIBYTE(v573) < 0)
    {
      sub_1C987D148(v27, (void *)__src, *((unint64_t *)&__src + 1));
    }
    else
    {
      *(_OWORD *)v27 = __src;
      *(_QWORD *)(v26 + 64) = v573;
    }
    *(_QWORD *)(v26 + 72) = 0;
    *(_QWORD *)(v26 + 80) = 0;
    *(_QWORD *)(v26 + 88) = 0;
    __p.__r_.__value_.__r.__words[0] = v26;
    v28 = (_QWORD *)operator new();
    *v28 = &off_1E8296050;
    v28[1] = 0;
    v28[2] = 0;
    v28[3] = v26;
    __p.__r_.__value_.__l.__size_ = (std::string::size_type)v28;
    v29 = v23[8];
    if (v29 >= v23[9])
    {
      v30 = sub_1C9914FD0((char **)v23 + 7, (uint64_t)&__p);
      v31 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
      v23[8] = (uint64_t *)v30;
      if (v31)
      {
        p_shared_owners = (unint64_t *)&v31->__shared_owners_;
        do
          v33 = __ldaxr(p_shared_owners);
        while (__stlxr(v33 - 1, p_shared_owners));
        if (!v33)
        {
          ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
          std::__shared_weak_count::__release_weak(v31);
        }
      }
    }
    else
    {
      *v29 = v26;
      v29[1] = (uint64_t)v28;
      v23[8] = v29 + 2;
    }
  }
  v564 = 0;
  v566 = 1;
  v565 = &off_1E8294F80;
  v34 = (void **)(a1 + 54);
  v567 = 0;
  v568 = &v582;
  v569 = 0;
  v570 = 1;
  v571 = 6;
  v562 = &off_1E8294EB0;
  v563 = &v565;
  memset(&v606, 0, sizeof(v606));
  for (i = &off_1E8294F80; ; i = *v563)
  {
    __p.__r_.__value_.__s.__data_[0] = 0;
    while (i[11]() == 1)
    {
      if (__p.__r_.__value_.__s.__data_[0] > 0x20u
        || ((1 << __p.__r_.__value_.__s.__data_[0]) & 0x100002600) == 0)
      {
        break;
      }
      v37 = v563;
      if (*((_DWORD *)v563 + 2) != 2)
      {
        v38 = ((uint64_t (*)(uint64_t (***)(), std::string *, uint64_t))(*v563)[18])(v563, &__p, 1);
        if (v38 >= 1)
          v37[2] = (uint64_t (**)())((char *)v37[2] + v38);
      }
      i = *v563;
    }
    LOBYTE(v551) = 0;
    if (((uint64_t (*)(uint64_t (***)(), uint64_t (***)(), uint64_t))(*v563)[11])(v563, &v551, 1) != 1|| v551 != 35)
    {
      break;
    }
    ((void (*)(std::string *__return_ptr))(*v563)[9])(&__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v40 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      v40 = __p.__r_.__value_.__l.__size_;
    std::string::append(&v606, (const std::string::value_type *)p_p, v40);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (*((char *)a1 + 455) < 0)
    operator delete(*v34);
  *(_OWORD *)v34 = *(_OWORD *)&v606.__r_.__value_.__l.__data_;
  a1[56] = (char *)v606.__r_.__value_.__r.__words[2];
  v536 = 1;
LABEL_61:
  if (v570 && (((uint64_t (*)(uint64_t (***)()))(*v563)[4])(v563) & 1) == 0)
  {
    memset(&v561, 0, sizeof(v561));
    v570 = ((uint64_t (*)(uint64_t (***)()))(*v563)[4])(v563) ^ 1;
    ((void (*)(std::string *__return_ptr))(*v563)[9])(&__p);
    if (SHIBYTE(v561.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v561.__r_.__value_.__l.__data_);
    v561 = __p;
    v553 = 0;
    v552 = 0;
    v551 = &off_1E8294EB0;
    v41 = (_QWORD *)operator new();
    if ((v561.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v42 = &v561;
    else
      v42 = (std::string *)v561.__r_.__value_.__r.__words[0];
    if ((v561.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v43 = HIBYTE(v561.__r_.__value_.__r.__words[2]);
    else
      v43 = v561.__r_.__value_.__l.__size_;
    v44 = operator new();
    *v41 = sub_1C991D5C0(v44, v42, v43);
    v555 = 1;
    v556 = 0;
    v557 = v41;
    v558 = 1;
    v559 = 1;
    v560 = 6;
    v554 = &off_1E8294F80;
    v552 = &v554;
    v549 = 0;
    v548 = 0;
    v550 = 0;
    __p.__r_.__value_.__s.__data_[0] = 0;
    for (j = sub_1C991EA2C((uint64_t)&v554, (uint64_t)&__p, 1);
          j == 1;
          j = ((uint64_t (*)(uint64_t (***)(), std::string *, uint64_t))(*v552)[11])(v552, &__p, 1))
    {
      if (__p.__r_.__value_.__s.__data_[0] > 0x20u
        || ((1 << __p.__r_.__value_.__s.__data_[0]) & 0x100002600) == 0)
      {
        break;
      }
      v47 = v552;
      if (*((_DWORD *)v552 + 2) != 2)
      {
        v48 = ((uint64_t (*)(uint64_t (***)(), std::string *, uint64_t))(*v552)[18])(v552, &__p, 1);
        if (v48 >= 1)
          v47[2] = (uint64_t (**)())((char *)v47[2] + v48);
      }
    }
    if (SHIBYTE(v550) < 0)
    {
      *(_BYTE *)v548 = 0;
      v549 = 0;
    }
    else
    {
      LOBYTE(v548) = 0;
      HIBYTE(v550) = 0;
    }
    __p.__r_.__value_.__s.__data_[0] = 0;
    while (1)
    {
      v52 = v552;
      if (*((_DWORD *)v552 + 2) == 2
        || (v53 = ((uint64_t (*)(uint64_t (***)(), std::string *, uint64_t))(*v552)[18])(v552, &__p, 1), v53 < 1)|| (v52[2] = (uint64_t (**)())((char *)v52[2] + v53), v53 != 1)|| ((v54 = __p.__r_.__value_.__s.__data_[0], __p.__r_.__value_.__s.__data_[0] <= 0x20u)? (v55 = ((1 << __p.__r_.__value_.__s.__data_[0]) & 0x100002600) == 0): (v55 = 1), !v55))
      {
        v62 = HIBYTE(v550);
        if (v550 < 0)
          v62 = v549;
        v559 = v62 != 0;
        cva::utils::string::to_lower();
        v63 = HIBYTE(v550);
        v64 = HIBYTE(v550);
        if (v550 < 0)
          v63 = v549;
        switch(v63)
        {
          case 1uLL:
            v73 = (unsigned __int8 *)&v548;
            if (v550 < 0)
              v73 = (unsigned __int8 *)v548;
            v74 = *v73;
            if (v74 != 102)
            {
              if (v74 == 118)
              {
                LODWORD(__p.__r_.__value_.__r.__words[1]) = 0;
                __p.__r_.__value_.__r.__words[0] = 0;
                sub_1C990A5F8((uint64_t)&v551, &__p);
                sub_1C990A5F8((uint64_t)&v551, (_DWORD *)__p.__r_.__value_.__r.__words + 1);
                sub_1C990A5F8((uint64_t)&v551, &__p.__r_.__value_.__r.__words[1]);
                v89 = a1[1];
                v88 = (unint64_t)a1[2];
                if ((unint64_t)v89 < v88)
                {
                  *(_QWORD *)v89 = __p.__r_.__value_.__r.__words[0];
                  *((_DWORD *)v89 + 2) = __p.__r_.__value_.__r.__words[1];
                  a1[1] = v89 + 12;
                  goto LABEL_951;
                }
                v114 = *a1;
                v115 = 0xAAAAAAAAAAAAAAABLL * ((v89 - *a1) >> 2);
                v116 = v115 + 1;
                if (v115 + 1 > 0x1555555555555555)
                  goto LABEL_1132;
                v117 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v88 - (_QWORD)v114) >> 2);
                if (2 * v117 > v116)
                  v116 = 2 * v117;
                if (v117 >= 0xAAAAAAAAAAAAAAALL)
                  v118 = 0x1555555555555555;
                else
                  v118 = v116;
                if (v118)
                {
                  if (v118 > 0x1555555555555555)
                    goto LABEL_1133;
                  v119 = (char *)operator new(12 * v118);
                }
                else
                {
                  v119 = 0;
                }
                v367 = &v119[12 * v115];
                *(_QWORD *)v367 = __p.__r_.__value_.__r.__words[0];
                *((_DWORD *)v367 + 2) = __p.__r_.__value_.__r.__words[1];
                v368 = v367;
                if (v89 != v114)
                {
                  do
                  {
                    v369 = *(_QWORD *)(v89 - 12);
                    v89 -= 12;
                    v370 = *((_DWORD *)v89 + 2);
                    *(_QWORD *)(v368 - 12) = v369;
                    v368 -= 12;
                    *((_DWORD *)v368 + 2) = v370;
                  }
                  while (v89 != v114);
                  v89 = *a1;
                }
                v371 = v367 + 12;
                *a1 = v368;
                a1[1] = v367 + 12;
                a1[2] = &v119[12 * v118];
                if (v89)
                  operator delete(v89);
                a1[1] = v371;
                goto LABEL_951;
              }
              if (v74 == 103)
              {
                v75 = sub_1C990E59C(v533, (const void **)&__src, (uint64_t)&__src);
                v76 = v75[8];
                if (v76 == v75[7] || (v77 = (_QWORD *)*(v76 - 2), v77[1] != *v77) || v77[4] != v77[3])
                {
                  v78 = operator new();
                  v79 = (_BYTE *)(v78 + 48);
                  *(_OWORD *)v78 = 0u;
                  *(_OWORD *)(v78 + 16) = 0u;
                  *(_OWORD *)(v78 + 32) = 0u;
                  if (SHIBYTE(v573) < 0)
                  {
                    sub_1C987D148(v79, (void *)__src, *((unint64_t *)&__src + 1));
                  }
                  else
                  {
                    *(_OWORD *)v79 = __src;
                    *(_QWORD *)(v78 + 64) = v573;
                  }
                  *(_QWORD *)(v78 + 72) = 0;
                  *(_QWORD *)(v78 + 80) = 0;
                  *(_QWORD *)(v78 + 88) = 0;
                  __p.__r_.__value_.__r.__words[0] = v78;
                  v166 = (_QWORD *)operator new();
                  *v166 = &off_1E8296050;
                  v166[1] = 0;
                  v166[2] = 0;
                  v166[3] = v78;
                  __p.__r_.__value_.__l.__size_ = (std::string::size_type)v166;
                  v167 = v75[8];
                  if (v167 < v75[9])
                  {
LABEL_339:
                    *v167 = v78;
                    v167[1] = (uint64_t)v166;
                    v75[8] = v167 + 2;
                  }
                  else
                  {
                    v168 = sub_1C9914FD0((char **)v75 + 7, (uint64_t)&__p);
                    v169 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
                    v75[8] = (uint64_t *)v168;
                    if (v169)
                    {
                      v170 = (unint64_t *)&v169->__shared_owners_;
                      do
                        v171 = __ldaxr(v170);
                      while (__stlxr(v171 - 1, v170));
                      goto LABEL_343;
                    }
                  }
                }
              }
LABEL_951:
              v64 = HIBYTE(v550);
              break;
            }
            if (SHIBYTE(v561.__r_.__value_.__r.__words[2]) < 0)
              sub_1C987D148(&__p, v561.__r_.__value_.__l.__data_, v561.__r_.__value_.__l.__size_);
            else
              __p = v561;
            v127 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v128 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
            else
              v128 = __p.__r_.__value_.__l.__size_;
            if (!v128)
              goto LABEL_268;
            v129 = (_BYTE *)__p.__r_.__value_.__r.__words[0];
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v130 = &__p;
            else
              v130 = (std::string *)__p.__r_.__value_.__r.__words[0];
            v131 = memchr(v130, 47, v128);
            v132 = v131 - (_BYTE *)v130;
            if (!v131)
              v132 = -1;
            if ((_DWORD)v132 == -1)
            {
LABEL_268:
              if ((v561.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v133 = &v561;
              else
                v133 = (std::string *)v561.__r_.__value_.__r.__words[0];
              v134 = sscanf((const char *)v133, "%*s %d %d %d %d", (char *)&v579 + 4, &v579, (char *)&v578 + 4, &v578);
              v135 = 0;
              v136 = 0;
              v137 = v134 == 4;
              goto LABEL_272;
            }
            v174 = (v132 << 32) + 0x100000000;
            if (v127 < 0)
            {
              if (v174 != 0xFFFFFFFF00000000)
                goto LABEL_976;
              __p.__r_.__value_.__l.__size_ = 0;
              *v129 = 0;
            }
            else
            {
              if (v174 == 0xFFFFFFFF00000000)
              {
                *((_BYTE *)&__p.__r_.__value_.__s + 23) = 0;
                __p.__r_.__value_.__s.__data_[0] = 0;
                goto LABEL_977;
              }
LABEL_976:
              sub_1C987A234(&__p, 0, v174 >> 32);
            }
LABEL_977:
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
              sub_1C987D148(&v606, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
            else
              v606 = __p;
            v446 = SHIBYTE(v606.__r_.__value_.__r.__words[2]);
            if ((v606.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v447 = HIBYTE(v606.__r_.__value_.__r.__words[2]);
            else
              v447 = v606.__r_.__value_.__l.__size_;
            if (v447)
            {
              if ((v606.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v448 = &v606;
              else
                v448 = (std::string *)v606.__r_.__value_.__r.__words[0];
              v449 = memchr(v448, 32, v447);
              v450 = (_DWORD)v449 - (_DWORD)v448;
              if (!v449)
                v450 = -1;
            }
            else
            {
              v450 = -1;
            }
            v451 = v450;
            v452 = v447 - v450;
            if (v447 < v450)
              goto LABEL_1132;
            if (v452 == -1)
            {
              if (v446 < 0)
              {
                v453 = (std::string *)v606.__r_.__value_.__r.__words[0];
                v606.__r_.__value_.__l.__size_ = v451;
              }
              else
              {
                *((_BYTE *)&v606.__r_.__value_.__s + 23) = v450 & 0x7F;
                v453 = &v606;
              }
              v453->__r_.__value_.__s.__data_[v451] = 0;
            }
            else
            {
              sub_1C987A234(&v606, v450, v452);
            }
            if ((v606.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v454 = HIBYTE(v606.__r_.__value_.__r.__words[2]);
            else
              v454 = v606.__r_.__value_.__l.__size_;
            if (!v454)
            {
LABEL_1009:
              if ((v561.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v458 = &v561;
              else
                v458 = (std::string *)v561.__r_.__value_.__r.__words[0];
              v459 = sscanf((const char *)v458, "%*s %d/%d %d/%d %d/%d %d/%d", (char *)&v579 + 4, (char *)&v575 + 4);
LABEL_1013:
              v135 = 0;
              v137 = v459 == 8;
              goto LABEL_1014;
            }
            if ((v606.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v455 = &v606;
            else
              v455 = (std::string *)v606.__r_.__value_.__r.__words[0];
            v456 = memchr(v455, 47, v454);
            v457 = (_DWORD)v456 - (_DWORD)v455;
            if (!v456)
              v457 = -1;
            if (v457)
            {
              if (v457 == -1)
                goto LABEL_1009;
              if ((v561.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v464 = &v561;
              else
                v464 = (std::string *)v561.__r_.__value_.__r.__words[0];
              if ((_DWORD)v454 - 1 == v457)
              {
                v459 = sscanf((const char *)v464, "%*s %d/%d/ %d/%d/ %d/%d/ %d/%d/", (char *)&v579 + 4, (char *)&v575 + 4);
                goto LABEL_1013;
              }
              v137 = sscanf((const char *)v464, "%*s %d/%d/%d %d/%d/%d %d/%d/%d %d/%d/%d", (char *)&v579 + 4, (char *)&v575 + 4, (char *)&v577 + 4, &v579, &v575, &v577, (char *)&v578 + 4, (char *)&v574 + 4, (char *)&v576 + 4, &v578, &v574, &v576) == 12;
              v135 = 1;
LABEL_1014:
              v136 = 1;
              if ((SHIBYTE(v606.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                goto LABEL_272;
LABEL_1020:
              v462 = v136;
              v463 = v135;
              operator delete(v606.__r_.__value_.__l.__data_);
              v135 = v463;
              v136 = v462;
              goto LABEL_272;
            }
            if ((v561.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v460 = &v561;
            else
              v460 = (std::string *)v561.__r_.__value_.__r.__words[0];
            v461 = sscanf((const char *)v460, "%*s %d//%d %d//%d %d//%d %d//%d", (char *)&v579 + 4, (char *)&v577 + 4, &v579, &v577, (char *)&v578 + 4, (char *)&v576 + 4, &v578, &v576);
            v136 = 0;
            v137 = v461 == 8;
            v135 = 1;
            if (SHIBYTE(v606.__r_.__value_.__r.__words[2]) < 0)
              goto LABEL_1020;
LABEL_272:
            v138 = -1431655765 * ((unint64_t)(a1[1] - *a1) >> 2);
            v140 = a1[3];
            v139 = a1[4];
            v142 = a1[6];
            v141 = a1[7];
            if (HIDWORD(v579))
            {
              v143 = HIDWORD(v579) - 1;
              if (SHIDWORD(v579) < 1)
                v143 = HIDWORD(v579) - 1431655765 * ((unint64_t)(a1[1] - *a1) >> 2);
            }
            else
            {
              v143 = -1;
            }
            HIDWORD(v579) = v143;
            if ((_DWORD)v579)
            {
              v144 = v579 - 1;
              if ((int)v579 < 1)
                v144 = v579 + v138;
            }
            else
            {
              v144 = -1;
            }
            LODWORD(v579) = v144;
            if (HIDWORD(v578))
            {
              v145 = HIDWORD(v578) - 1;
              if (SHIDWORD(v578) < 1)
                v145 = HIDWORD(v578) + v138;
            }
            else
            {
              v145 = -1;
            }
            HIDWORD(v578) = v145;
            if ((_DWORD)v578)
            {
              v146 = v578 - 1;
              if ((int)v578 < 1)
                v146 = v578 + v138;
            }
            else
            {
              v146 = -1;
            }
            v147 = -1431655765 * ((unint64_t)(v139 - v140) >> 2);
            LODWORD(v578) = v146;
            if (v135)
            {
              if (HIDWORD(v577))
              {
                v148 = HIDWORD(v577) - 1;
                if (SHIDWORD(v577) < 1)
                  v148 = HIDWORD(v577) + v147;
              }
              else
              {
                v148 = -1;
              }
              HIDWORD(v577) = v148;
              if ((_DWORD)v577)
              {
                v372 = v577 - 1;
                if ((int)v577 < 1)
                  v372 = v577 + v147;
              }
              else
              {
                v372 = -1;
              }
              LODWORD(v577) = v372;
              if (HIDWORD(v576))
              {
                v373 = HIDWORD(v576) - 1;
                if (SHIDWORD(v576) < 1)
                  v373 = HIDWORD(v576) + v147;
              }
              else
              {
                v373 = -1;
              }
              HIDWORD(v576) = v373;
              if ((_DWORD)v576)
              {
                v374 = v576 - 1;
                if ((int)v576 < 1)
                  v374 = v576 + v147;
              }
              else
              {
                v374 = -1;
              }
              LODWORD(v576) = v374;
            }
            v530 = (unint64_t)(v141 - v142) >> 3;
            if (v136)
            {
              if (HIDWORD(v575))
              {
                v375 = HIDWORD(v575) - 1;
                if (SHIDWORD(v575) < 1)
                  v375 = HIDWORD(v575) + v530;
              }
              else
              {
                v375 = -1;
              }
              HIDWORD(v575) = v375;
              if ((_DWORD)v575)
              {
                v376 = v575 - 1;
                if ((int)v575 < 1)
                  v376 = v575 + v530;
              }
              else
              {
                v376 = -1;
              }
              LODWORD(v575) = v376;
              if (HIDWORD(v574))
              {
                v377 = HIDWORD(v574) - 1;
                if (SHIDWORD(v574) < 1)
                  v377 = HIDWORD(v574) + v530;
              }
              else
              {
                v377 = -1;
              }
              HIDWORD(v574) = v377;
              if ((_DWORD)v574)
              {
                v378 = v574 - 1;
                if ((int)v574 < 1)
                  v378 = v574 + v530;
              }
              else
              {
                v378 = -1;
              }
              LODWORD(v574) = v378;
            }
            v532 = v136;
            if (v137)
            {
              v524 = v147;
              v379 = v135;
              if (v143 < 0
                || v143 >= v138
                || v144 < 0
                || v144 >= v138
                || v145 < 0
                || v146 >= v138
                || v145 >= v138
                || v146 < 0)
              {
                sub_1C99072C4(&v606);
                sub_1C9907EC4(v542, &v606, 0, 0, "[RELEASE INFO   ]", "/Library/Caches/com.apple.xbs/Sources/AppleCVA/shared/src/modules/avatar/shrek/libs/alg/geometry/src/three_d/quad_mesh.cpp", 1420, "quad_mesh::read_obj: out-of-range vertex index", v522);
                sub_1C9909318((uint64_t)v542);
                v390 = (std::__shared_weak_count *)v606.__r_.__value_.__l.__size_;
                v382 = v379;
                if (v606.__r_.__value_.__l.__size_)
                {
                  v391 = (unint64_t *)(v606.__r_.__value_.__l.__size_ + 8);
                  do
                    v392 = __ldaxr(v391);
                  while (__stlxr(v392 - 1, v391));
                  if (!v392)
                  {
                    ((void (*)(std::__shared_weak_count *))v390->__on_zero_shared)(v390);
                    std::__shared_weak_count::__release_weak(v390);
                    v382 = v379;
                  }
                }
                v536 = 0;
                v381 = v532;
              }
              else
              {
                if (!sub_1C99150F8((uint64_t)&__src))
                {
                  v380 = sub_1C990E59C(v533, (const void **)&__src, (uint64_t)&__src);
                  sub_1C9915118(*(v380[8] - 2), (unint64_t)(a1[22] - a1[21]) >> 4);
                  v143 = HIDWORD(v579);
                  v144 = v579;
                  v145 = HIDWORD(v578);
                  v146 = v578;
                }
                v606.__r_.__value_.__r.__words[0] = __PAIR64__(v144, v143);
                v606.__r_.__value_.__l.__size_ = __PAIR64__(v146, v145);
                sub_1C9915270(v527, &v606);
                v381 = v532;
                v382 = v379;
              }
              v7 = (uint64_t **)(a1 + 30);
              if (v382)
              {
                if (v577 < 0
                  || SHIDWORD(v577) >= v524
                  || (v577 & 0x80000000) != 0
                  || (int)v577 >= v524
                  || v576 < 0
                  || (int)v576 >= v524
                  || SHIDWORD(v576) >= v524
                  || (v576 & 0x80000000) != 0)
                {
                  sub_1C99072C4(&v606);
                  sub_1C9907EC4(v541, &v606, 0, 0, "[RELEASE INFO   ]", "/Library/Caches/com.apple.xbs/Sources/AppleCVA/shared/src/modules/avatar/shrek/libs/alg/geometry/src/three_d/quad_mesh.cpp", 1428, "quad_mesh::read_obj: out-of-range normal index", v522);
                  sub_1C9909318((uint64_t)v541);
                  v399 = (std::__shared_weak_count *)v606.__r_.__value_.__l.__size_;
                  v381 = v532;
                  if (v606.__r_.__value_.__l.__size_)
                  {
                    v400 = (unint64_t *)(v606.__r_.__value_.__l.__size_ + 8);
                    do
                      v401 = __ldaxr(v400);
                    while (__stlxr(v401 - 1, v400));
                    if (!v401)
                    {
                      ((void (*)(std::__shared_weak_count *))v399->__on_zero_shared)(v399);
                      std::__shared_weak_count::__release_weak(v399);
                      v381 = v532;
                    }
                  }
                  v536 = 0;
                }
                else
                {
                  v606.__r_.__value_.__r.__words[0] = __PAIR64__(v577, HIDWORD(v577));
                  v606.__r_.__value_.__l.__size_ = __PAIR64__(v576, HIDWORD(v576));
                  sub_1C9915270(v526, &v606);
                  v381 = v532;
                }
              }
              if (!v381)
                goto LABEL_941;
              v402 = HIDWORD(v575);
              if ((v575 & 0x8000000000000000) == 0 && SHIDWORD(v575) < (int)v530)
              {
                v403 = v575;
                if ((v575 & 0x80000000) == 0 && (int)v575 < (int)v530)
                {
                  v404 = HIDWORD(v574);
                  if ((v574 & 0x8000000000000000) == 0)
                  {
                    v405 = v574;
                    if ((int)v574 < (int)v530 && SHIDWORD(v574) < (int)v530 && (v574 & 0x80000000) == 0)
                    {
                      v406 = a1[27];
                      v407 = a1[28];
                      v408 = (v407 - v406) >> 4;
                      v409 = v408 + 1;
                      if (v408 + 1 < (unint64_t)((a1[22] - a1[21]) >> 4))
                      {
                        do
                        {
                          v439 = (unint64_t)a1[29];
                          if ((unint64_t)v407 < v439)
                          {
                            *(_QWORD *)v407 = 0;
                            *((_QWORD *)v407 + 1) = 0;
                            v407 += 16;
                          }
                          else
                          {
                            if (v409 >> 60)
                              goto LABEL_1132;
                            v440 = v439 - (_QWORD)v406;
                            v441 = v440 >> 3;
                            if (v440 >> 3 <= v409)
                              v441 = v409;
                            if ((unint64_t)v440 >= 0x7FFFFFFFFFFFFFF0)
                              v442 = 0xFFFFFFFFFFFFFFFLL;
                            else
                              v442 = v441;
                            if (v442)
                            {
                              if (v442 >> 60)
                                goto LABEL_1133;
                              v443 = (char *)operator new(16 * v442);
                            }
                            else
                            {
                              v443 = 0;
                            }
                            v444 = &v443[16 * v408];
                            *(_QWORD *)v444 = 0;
                            *((_QWORD *)v444 + 1) = 0;
                            v445 = v444;
                            if (v407 != v406)
                            {
                              do
                              {
                                *((_OWORD *)v445 - 1) = *((_OWORD *)v407 - 1);
                                v445 -= 16;
                                v407 -= 16;
                              }
                              while (v407 != v406);
                              v406 = *v5;
                            }
                            v407 = v444 + 16;
                            a1[27] = v445;
                            a1[28] = v444 + 16;
                            a1[29] = &v443[16 * v442];
                            if (v406)
                              operator delete(v406);
                          }
                          a1[28] = v407;
                          v406 = a1[27];
                          v408 = (v407 - v406) >> 4;
                          v409 = v408 + 1;
                        }
                        while (v408 + 1 < (unint64_t)((a1[22] - a1[21]) >> 4));
                        v402 = HIDWORD(v575);
                        v403 = v575;
                        v404 = HIDWORD(v574);
                        v405 = v574;
                      }
                      v606.__r_.__value_.__r.__words[0] = __PAIR64__(v403, v402);
                      v606.__r_.__value_.__l.__size_ = __PAIR64__(v405, v404);
                      sub_1C9915270(v5, &v606);
                      goto LABEL_941;
                    }
                  }
                }
              }
              sub_1C99072C4(&v606);
              sub_1C9907EC4(v540, &v606, 0, 0, "[RELEASE INFO   ]", "/Library/Caches/com.apple.xbs/Sources/AppleCVA/shared/src/modules/avatar/shrek/libs/alg/geometry/src/three_d/quad_mesh.cpp", 1444, "quad_mesh::read_obj: out-of-range texcoord index", v522);
              sub_1C9909318((uint64_t)v540);
              v410 = (std::__shared_weak_count *)v606.__r_.__value_.__l.__size_;
              if (v606.__r_.__value_.__l.__size_)
              {
                v411 = (unint64_t *)(v606.__r_.__value_.__l.__size_ + 8);
                do
                  v412 = __ldaxr(v411);
                while (__stlxr(v412 - 1, v411));
LABEL_938:
                if (!v412)
                {
                  ((void (*)(std::__shared_weak_count *))v410->__on_zero_shared)(v410);
                  std::__shared_weak_count::__release_weak(v410);
                }
              }
              goto LABEL_940;
            }
            if (v143 < 0 || v143 >= v138 || v144 < 0 || v144 >= v138 || v145 < 0 || v145 >= v138)
            {
              v393 = v135;
              v394 = v147;
              sub_1C99072C4(&v606);
              sub_1C9907EC4(v539, &v606, 0, 0, "[RELEASE INFO   ]", "/Library/Caches/com.apple.xbs/Sources/AppleCVA/shared/src/modules/avatar/shrek/libs/alg/geometry/src/three_d/quad_mesh.cpp", 1456, "quad_mesh::read_obj: out-of-range vertex index", v522);
              sub_1C9909318((uint64_t)v539);
              v147 = v394;
              v395 = v393;
              v396 = (std::__shared_weak_count *)v606.__r_.__value_.__l.__size_;
              if (v606.__r_.__value_.__l.__size_)
              {
                v397 = (unint64_t *)(v606.__r_.__value_.__l.__size_ + 8);
                do
                  v398 = __ldaxr(v397);
                while (__stlxr(v398 - 1, v397));
                if (!v398)
                {
                  ((void (*)(std::__shared_weak_count *))v396->__on_zero_shared)(v396);
                  std::__shared_weak_count::__release_weak(v396);
                  v147 = v394;
                  v395 = v393;
                }
              }
              v536 = 0;
              if (!v395)
                goto LABEL_907;
            }
            else
            {
              v383 = HIBYTE(v573);
              if (v573 < 0)
                v383 = *((_QWORD *)&__src + 1);
              if (v383)
              {
                v384 = v135;
                v385 = v147;
                v386 = sub_1C990E59C(v533, (const void **)&__src, (uint64_t)&__src);
                sub_1C9915118(*(v386[8] - 2) + 24, -1431655765 * ((unint64_t)(a1[13] - a1[12]) >> 2));
                v147 = v385;
                v135 = v384;
                v143 = HIDWORD(v579);
                v144 = v579;
                v145 = HIDWORD(v578);
              }
              v388 = (int *)a1[13];
              v387 = (unint64_t)a1[14];
              if ((unint64_t)v388 < v387)
              {
                *v388 = v143;
                v388[1] = v144;
                v389 = (char *)(v388 + 3);
                v388[2] = v145;
                goto LABEL_1049;
              }
              v465 = a1[12];
              v466 = 0xAAAAAAAAAAAAAAABLL * (((char *)v388 - v465) >> 2) + 1;
              if (v466 > 0x1555555555555555)
                goto LABEL_1132;
              v467 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v387 - (_QWORD)v465) >> 2);
              if (2 * v467 > v466)
                v466 = 2 * v467;
              if (v467 >= 0xAAAAAAAAAAAAAAALL)
                v468 = 0x1555555555555555;
              else
                v468 = v466;
              v523 = v468;
              if (v468)
              {
                v525 = v147;
                if (v468 <= 0x1555555555555555)
                {
                  v469 = v135;
                  v470 = (char *)operator new(12 * v468);
                  v135 = v469;
                  v7 = (uint64_t **)(a1 + 30);
                  v147 = v525;
                  goto LABEL_1042;
                }
LABEL_1133:
                sub_1C9899D30();
              }
              v470 = 0;
LABEL_1042:
              v471 = (int *)&v470[4 * (((char *)v388 - v465) >> 2)];
              *v471 = v143;
              v471[1] = v144;
              v471[2] = v145;
              v472 = v471;
              if (v388 == (int *)v465)
              {
                v473 = v523;
              }
              else
              {
                v473 = v523;
                do
                {
                  v474 = *(_QWORD *)(v388 - 3);
                  v388 -= 3;
                  v475 = v388[2];
                  *(_QWORD *)(v472 - 3) = v474;
                  v472 -= 3;
                  v472[2] = v475;
                }
                while (v388 != (int *)v465);
                v388 = (int *)a1[12];
              }
              v389 = (char *)(v471 + 3);
              a1[12] = (char *)v472;
              a1[13] = (char *)(v471 + 3);
              a1[14] = &v470[12 * v473];
              if (v388)
              {
                v476 = v388;
                v477 = v135;
                v478 = v147;
                operator delete(v476);
                v147 = v478;
                v135 = v477;
              }
LABEL_1049:
              a1[13] = v389;
              if (!v135)
              {
LABEL_907:
                if (!v532)
                  goto LABEL_941;
                v416 = HIDWORD(v575);
                if ((v575 & 0x8000000000000000) == 0 && SHIDWORD(v575) < (int)v530)
                {
                  v417 = v575;
                  if ((v575 & 0x80000000) == 0 && (int)v575 < (int)v530)
                  {
                    v418 = HIDWORD(v574);
                    if ((v574 & 0x8000000000000000) == 0 && SHIDWORD(v574) < (int)v530)
                    {
                      v420 = a1[18];
                      v419 = a1[19];
                      v421 = 0xAAAAAAAAAAAAAAABLL * ((v419 - v420) >> 2);
                      v422 = v421 + 1;
                      if (v421 + 1 < 0xAAAAAAAAAAAAAAABLL * ((a1[13] - a1[12]) >> 2))
                      {
                        do
                        {
                          v424 = (unint64_t)a1[20];
                          if ((unint64_t)v419 < v424)
                          {
                            *(_QWORD *)v419 = 0;
                            v423 = v419 + 12;
                            *((_DWORD *)v419 + 2) = 0;
                          }
                          else
                          {
                            if (v422 > 0x1555555555555555)
                              goto LABEL_1132;
                            v425 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v424 - (_QWORD)v420) >> 2);
                            if (2 * v425 > v422)
                              v422 = 2 * v425;
                            if (v425 >= 0xAAAAAAAAAAAAAAALL)
                              v426 = 0x1555555555555555;
                            else
                              v426 = v422;
                            if (v426)
                            {
                              if (v426 > 0x1555555555555555)
                                goto LABEL_1133;
                              v427 = (char *)operator new(12 * v426);
                            }
                            else
                            {
                              v427 = 0;
                            }
                            v428 = &v427[12 * v421];
                            *(_QWORD *)v428 = 0;
                            *((_DWORD *)v428 + 2) = 0;
                            v429 = v428;
                            if (v419 != v420)
                            {
                              do
                              {
                                v430 = *(_QWORD *)(v419 - 12);
                                v419 -= 12;
                                v431 = *((_DWORD *)v419 + 2);
                                *(_QWORD *)(v429 - 12) = v430;
                                v429 -= 12;
                                *((_DWORD *)v429 + 2) = v431;
                              }
                              while (v419 != v420);
                              v419 = *v529;
                            }
                            v432 = &v427[12 * v426];
                            v423 = v428 + 12;
                            a1[18] = v429;
                            a1[19] = v428 + 12;
                            a1[20] = v432;
                            if (v419)
                              operator delete(v419);
                          }
                          a1[19] = v423;
                          v420 = a1[18];
                          v421 = 0xAAAAAAAAAAAAAAABLL * ((v423 - v420) >> 2);
                          v422 = v421 + 1;
                          v419 = v423;
                        }
                        while (v421 + 1 < 0xAAAAAAAAAAAAAAABLL * ((a1[13] - a1[12]) >> 2));
                        v416 = HIDWORD(v575);
                        v417 = v575;
                        v418 = HIDWORD(v574);
                      }
                      v606.__r_.__value_.__r.__words[0] = __PAIR64__(v417, v416);
                      LODWORD(v606.__r_.__value_.__r.__words[1]) = v418;
                      sub_1C991536C(v529, (uint64_t *)&v606);
LABEL_941:
                      if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                        goto LABEL_951;
                      v366 = (void *)__p.__r_.__value_.__r.__words[0];
                      goto LABEL_943;
                    }
                  }
                }
                sub_1C99072C4(&v606);
                sub_1C9907EC4(v537, &v606, 0, 0, "[RELEASE INFO   ]", "/Library/Caches/com.apple.xbs/Sources/AppleCVA/shared/src/modules/avatar/shrek/libs/alg/geometry/src/three_d/quad_mesh.cpp", 1480, "quad_mesh::read_obj: out-of-range texcoord index", v522);
                sub_1C9909318((uint64_t)v537);
                v410 = (std::__shared_weak_count *)v606.__r_.__value_.__l.__size_;
                if (v606.__r_.__value_.__l.__size_)
                {
                  v433 = (unint64_t *)(v606.__r_.__value_.__l.__size_ + 8);
                  do
                    v412 = __ldaxr(v433);
                  while (__stlxr(v412 - 1, v433));
                  goto LABEL_938;
                }
LABEL_940:
                v536 = 0;
                goto LABEL_941;
              }
            }
            if (v577 < 0
              || SHIDWORD(v577) >= v147
              || (v577 & 0x80000000) != 0
              || (int)v577 >= v147
              || v576 < 0
              || SHIDWORD(v576) >= v147)
            {
              sub_1C99072C4(&v606);
              sub_1C9907EC4(v538, &v606, 0, 0, "[RELEASE INFO   ]", "/Library/Caches/com.apple.xbs/Sources/AppleCVA/shared/src/modules/avatar/shrek/libs/alg/geometry/src/three_d/quad_mesh.cpp", 1464, "quad_mesh::read_obj: out-of-range normal index", v522);
              sub_1C9909318((uint64_t)v538);
              v413 = (std::__shared_weak_count *)v606.__r_.__value_.__l.__size_;
              if (v606.__r_.__value_.__l.__size_)
              {
                v414 = (unint64_t *)(v606.__r_.__value_.__l.__size_ + 8);
                do
                  v415 = __ldaxr(v414);
                while (__stlxr(v415 - 1, v414));
                if (!v415)
                {
                  ((void (*)(std::__shared_weak_count *))v413->__on_zero_shared)(v413);
                  std::__shared_weak_count::__release_weak(v413);
                }
              }
              v536 = 0;
            }
            else
            {
              v606.__r_.__value_.__r.__words[0] = __PAIR64__(v577, HIDWORD(v577));
              LODWORD(v606.__r_.__value_.__r.__words[1]) = HIDWORD(v576);
              sub_1C991536C(v528, (uint64_t *)&v606);
            }
            goto LABEL_907;
          case 2uLL:
            v80 = &v548;
            if (v550 < 0)
              v80 = v548;
            if (*v80 == 29814)
            {
              __p.__r_.__value_.__r.__words[0] = 0;
              sub_1C990A5F8((uint64_t)&v551, &__p);
              sub_1C990A5F8((uint64_t)&v551, (_DWORD *)__p.__r_.__value_.__r.__words + 1);
              v87 = a1[7];
              v86 = (unint64_t)a1[8];
              if ((unint64_t)v87 < v86)
              {
                *(_QWORD *)v87 = __p.__r_.__value_.__r.__words[0];
                a1[7] = v87 + 8;
                goto LABEL_951;
              }
              v90 = a1[6];
              v91 = (v87 - v90) >> 3;
              v92 = v91 + 1;
              if ((unint64_t)(v91 + 1) >> 61)
                goto LABEL_1132;
              v93 = v86 - (_QWORD)v90;
              if (v93 >> 2 > v92)
                v92 = v93 >> 2;
              if ((unint64_t)v93 >= 0x7FFFFFFFFFFFFFF8)
                v94 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v94 = v92;
              if (v94)
              {
                if (v94 >> 61)
                  goto LABEL_1133;
                v95 = operator new(8 * v94);
              }
              else
              {
                v95 = 0;
              }
              v175 = &v95[8 * v91];
              *(_QWORD *)v175 = __p.__r_.__value_.__r.__words[0];
              v176 = v175 + 8;
              if (v87 == v90)
              {
                v90 = v87;
              }
              else
              {
                v177 = v87 - 8 - v90;
                if (v177 < 0x58)
                  goto LABEL_1136;
                if ((unint64_t)(v90 - v95) < 0x20)
                  goto LABEL_1136;
                v178 = (v177 >> 3) + 1;
                v179 = &v95[v87 - v90 - 16];
                v180 = v87 - 16;
                v181 = v178 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  v182 = *(_OWORD *)v180;
                  *(v179 - 1) = *((_OWORD *)v180 - 1);
                  *v179 = v182;
                  v179 -= 2;
                  v180 -= 32;
                  v181 -= 4;
                }
                while (v181);
                v175 -= 8 * (v178 & 0x3FFFFFFFFFFFFFFCLL);
                v87 -= 8 * (v178 & 0x3FFFFFFFFFFFFFFCLL);
                if (v178 != (v178 & 0x3FFFFFFFFFFFFFFCLL))
                {
LABEL_1136:
                  do
                  {
                    v183 = *((_QWORD *)v87 - 1);
                    v87 -= 8;
                    *((_QWORD *)v175 - 1) = v183;
                    v175 -= 8;
                  }
                  while (v87 != v90);
                  v90 = a1[6];
                }
              }
              a1[6] = v175;
              a1[7] = v176;
              a1[8] = &v95[8 * v94];
              if (v90)
                operator delete(v90);
              a1[7] = v176;
              goto LABEL_951;
            }
            if (*v80 != 28278)
              goto LABEL_951;
            LODWORD(__p.__r_.__value_.__r.__words[1]) = 0;
            __p.__r_.__value_.__r.__words[0] = 0;
            sub_1C990A5F8((uint64_t)&v551, &__p);
            sub_1C990A5F8((uint64_t)&v551, (_DWORD *)__p.__r_.__value_.__r.__words + 1);
            sub_1C990A5F8((uint64_t)&v551, &__p.__r_.__value_.__r.__words[1]);
            v82 = a1[4];
            v81 = (unint64_t)a1[5];
            if ((unint64_t)v82 < v81)
            {
              *(_QWORD *)v82 = __p.__r_.__value_.__r.__words[0];
              *((_DWORD *)v82 + 2) = __p.__r_.__value_.__r.__words[1];
              a1[4] = v82 + 12;
              goto LABEL_951;
            }
            v120 = a1[3];
            v121 = 0xAAAAAAAAAAAAAAABLL * ((v82 - v120) >> 2) + 1;
            if (v121 > 0x1555555555555555)
              goto LABEL_1132;
            v122 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v81 - (_QWORD)v120) >> 2);
            if (2 * v122 > v121)
              v121 = 2 * v122;
            if (v122 >= 0xAAAAAAAAAAAAAAALL)
              v123 = 0x1555555555555555;
            else
              v123 = v121;
            if (v123)
            {
              if (v123 > 0x1555555555555555)
                goto LABEL_1133;
              v124 = (char *)operator new(12 * v123);
            }
            else
            {
              v124 = 0;
            }
            v434 = &v124[4 * ((v82 - v120) >> 2)];
            *(_QWORD *)v434 = __p.__r_.__value_.__r.__words[0];
            *((_DWORD *)v434 + 2) = __p.__r_.__value_.__r.__words[1];
            v435 = v434;
            if (v82 != v120)
            {
              do
              {
                v436 = *(_QWORD *)(v82 - 12);
                v82 -= 12;
                v437 = *((_DWORD *)v82 + 2);
                *(_QWORD *)(v435 - 12) = v436;
                v435 -= 12;
                *((_DWORD *)v435 + 2) = v437;
              }
              while (v82 != v120);
              v82 = a1[3];
            }
            v438 = v434 + 12;
            a1[3] = v435;
            a1[4] = v434 + 12;
            a1[5] = &v124[12 * v123];
            if (v82)
              operator delete(v82);
            a1[4] = v438;
            goto LABEL_951;
          case 6uLL:
            v65 = (unsigned __int16 *)&v548;
            if (v550 < 0)
              v65 = (unsigned __int16 *)v548;
            if (*(_DWORD *)v65 != 1819047021 || v65[2] != 25193)
            {
              v67 = *(_DWORD *)v65;
              v68 = v65[2];
              if (v67 != 1835365237 || v68 != 27764)
                goto LABEL_951;
              __p.__r_.__value_.__s.__data_[0] = 0;
              while (((uint64_t (*)(uint64_t (***)(), std::string *, uint64_t))(*v552)[11])(v552, &__p, 1) == 1)
              {
                if (__p.__r_.__value_.__s.__data_[0] > 0x20u
                  || ((1 << __p.__r_.__value_.__s.__data_[0]) & 0x100002600) == 0)
                {
                  break;
                }
                v71 = v552;
                if (*((_DWORD *)v552 + 2) != 2)
                {
                  v72 = ((uint64_t (*)(uint64_t (***)(), std::string *, uint64_t))(*v552)[18])(v552, &__p, 1);
                  if (v72 >= 1)
                    v71[2] = (uint64_t (**)())((char *)v71[2] + v72);
                }
              }
              if (SHIBYTE(v573) < 0)
              {
                *(_BYTE *)__src = 0;
                *((_QWORD *)&__src + 1) = 0;
              }
              else
              {
                LOBYTE(__src) = 0;
                HIBYTE(v573) = 0;
              }
              __p.__r_.__value_.__s.__data_[0] = 0;
              while (2)
              {
                v152 = v552;
                if (*((_DWORD *)v552 + 2) == 2
                  || (v153 = ((uint64_t (*)(uint64_t (***)(), std::string *, uint64_t))(*v552)[18])(v552, &__p, 1), v153 < 1)|| (v152[2] = (uint64_t (**)())((char *)v152[2] + v153), v153 != 1)|| ((v154 = __p.__r_.__value_.__s.__data_[0], __p.__r_.__value_.__s.__data_[0] <= 0x20u)? (v155 = ((1 << __p.__r_.__value_.__s.__data_[0]) & 0x100002600) == 0): (v155 = 1), !v155))
                {
                  v162 = HIBYTE(v573);
                  if (v573 < 0)
                    v162 = *((_QWORD *)&__src + 1);
                  v559 = v162 != 0;
                  v75 = sub_1C990E59C(v533, (const void **)&__src, (uint64_t)&__src);
                  v163 = v75[8];
                  if (v163 == v75[7] || (v164 = (_QWORD *)*(v163 - 2), v164[1] != *v164) || v164[4] != v164[3])
                  {
                    v78 = operator new();
                    v165 = (_BYTE *)(v78 + 48);
                    *(_OWORD *)v78 = 0u;
                    *(_OWORD *)(v78 + 16) = 0u;
                    *(_OWORD *)(v78 + 32) = 0u;
                    if (SHIBYTE(v573) < 0)
                    {
                      sub_1C987D148(v165, (void *)__src, *((unint64_t *)&__src + 1));
                    }
                    else
                    {
                      *(_OWORD *)v165 = __src;
                      *(_QWORD *)(v78 + 64) = v573;
                    }
                    *(_QWORD *)(v78 + 72) = 0;
                    *(_QWORD *)(v78 + 80) = 0;
                    *(_QWORD *)(v78 + 88) = 0;
                    __p.__r_.__value_.__r.__words[0] = v78;
                    v166 = (_QWORD *)operator new();
                    *v166 = &off_1E8296050;
                    v166[1] = 0;
                    v166[2] = 0;
                    v166[3] = v78;
                    __p.__r_.__value_.__l.__size_ = (std::string::size_type)v166;
                    v167 = v75[8];
                    if (v167 < v75[9])
                      goto LABEL_339;
                    v172 = sub_1C9914FD0((char **)v75 + 7, (uint64_t)&__p);
                    v169 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
                    v75[8] = (uint64_t *)v172;
                    if (v169)
                    {
                      v173 = (unint64_t *)&v169->__shared_owners_;
                      do
                        v171 = __ldaxr(v173);
                      while (__stlxr(v171 - 1, v173));
LABEL_343:
                      if (!v171)
                      {
                        ((void (*)(std::__shared_weak_count *))v169->__on_zero_shared)(v169);
                        std::__shared_weak_count::__release_weak(v169);
                      }
                    }
                  }
                  goto LABEL_951;
                }
                if (SHIBYTE(v573) < 0)
                {
                  v149 = (v573 & 0x7FFFFFFFFFFFFFFFLL) - 1;
                  if (*((_QWORD *)&__src + 1) == v149)
                  {
                    if ((v573 & 0x7FFFFFFFFFFFFFFFLL) == 0x7FFFFFFFFFFFFFF8)
                      goto LABEL_1132;
                    p_src = (__int128 *)__src;
                    v157 = 0x7FFFFFFFFFFFFFF7;
                    if (v149 < 0x3FFFFFFFFFFFFFF3)
                    {
LABEL_310:
                      if (v149 + 1 > 2 * v149)
                        v158 = v149 + 1;
                      else
                        v158 = 2 * v149;
                      if (v158 >= 0x17)
                      {
                        v159 = (v158 & 0x7FFFFFFFFFFFFFF8) + 8;
                        v160 = v158 | 7;
                        if (v160 == 23)
                          v160 = v159;
                        v157 = v160 + 1;
                      }
                      else
                      {
                        v157 = 23;
                      }
                    }
                    v161 = (__int128 *)operator new(v157);
                    v150 = v161;
                    if (!v149 || (memmove(v161, p_src, v149), v149 != 22))
                      operator delete(p_src);
                    *(_QWORD *)&__src = v150;
                    v573 = v157 | 0x8000000000000000;
                  }
                  else
                  {
                    v149 = *((_QWORD *)&__src + 1);
                    v150 = (__int128 *)__src;
                  }
                  *((_QWORD *)&__src + 1) = v149 + 1;
                }
                else
                {
                  if (HIBYTE(v573) == 22)
                  {
                    p_src = &__src;
                    v149 = 22;
                    goto LABEL_310;
                  }
                  v149 = HIBYTE(v573);
                  HIBYTE(v573) = (HIBYTE(v573) + 1) & 0x7F;
                  v150 = &__src;
                }
                v151 = (char *)v150 + v149;
                *v151 = v154;
                v151[1] = 0;
                continue;
              }
            }
            v546 = 0uLL;
            v547 = 0;
            __p.__r_.__value_.__s.__data_[0] = 0;
            while (((uint64_t (*)(uint64_t (***)(), std::string *, uint64_t))(*v552)[11])(v552, &__p, 1) == 1)
            {
              if (__p.__r_.__value_.__s.__data_[0] > 0x20u
                || ((1 << __p.__r_.__value_.__s.__data_[0]) & 0x100002600) == 0)
              {
                break;
              }
              v84 = v552;
              if (*((_DWORD *)v552 + 2) != 2)
              {
                v85 = ((uint64_t (*)(uint64_t (***)(), std::string *, uint64_t))(*v552)[18])(v552, &__p, 1);
                if (v85 >= 1)
                  v84[2] = (uint64_t (**)())((char *)v84[2] + v85);
              }
            }
            if (SHIBYTE(v547) < 0)
            {
              *(_BYTE *)v546 = 0;
              *((_QWORD *)&v546 + 1) = 0;
            }
            else
            {
              LOBYTE(v546) = 0;
              HIBYTE(v547) = 0;
            }
            __p.__r_.__value_.__s.__data_[0] = 0;
            while (2)
            {
              v99 = v552;
              if (*((_DWORD *)v552 + 2) == 2
                || (v100 = ((uint64_t (*)(uint64_t (***)(), std::string *, uint64_t))(*v552)[18])(v552, &__p, 1), v100 < 1)|| (v99[2] = (uint64_t (**)())((char *)v99[2] + v100), v100 != 1)|| ((v101 = __p.__r_.__value_.__s.__data_[0], __p.__r_.__value_.__s.__data_[0] <= 0x20u)? (v102 = ((1 << __p.__r_.__value_.__s.__data_[0]) & 0x100002600) == 0): (v102 = 1), !v102))
              {
                v109 = HIBYTE(v547);
                if (v547 < 0)
                  v109 = *((_QWORD *)&v546 + 1);
                v559 = v109 != 0;
                memset(v545, 0, sizeof(v545));
                cva::Path::Path();
                if ((cva::Path::isAbsolute((cva::Path *)&__p) & 1) != 0)
                {
                  cva::Path::~Path((cva::Path *)&__p);
                  goto LABEL_229;
                }
                v110 = SHIBYTE(v581);
                if (v581 >= 0)
                  v111 = HIBYTE(v581);
                else
                  v111 = (size_t)v580[1];
                cva::Path::~Path((cva::Path *)&__p);
                if (v111)
                {
                  v112 = v111 + 1;
                  if (v111 + 1 > 0x7FFFFFFFFFFFFFF7)
                    goto LABEL_1132;
                  if (v112 >= 0x17)
                  {
                    v184 = (v112 & 0xFFFFFFFFFFFFFFF8) + 8;
                    if ((v112 | 7) != 0x17)
                      v184 = v112 | 7;
                    v185 = v184 + 1;
                    v113 = (std::string *)operator new(v184 + 1);
                    __p.__r_.__value_.__r.__words[2] = v185 | 0x8000000000000000;
                    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v113;
                    __p.__r_.__value_.__l.__size_ = v111 + 1;
                  }
                  else
                  {
                    memset(&__p, 0, sizeof(__p));
                    v113 = &__p;
                    *((_BYTE *)&__p.__r_.__value_.__s + 23) = v111 + 1;
                  }
                  if (v110 >= 0)
                    v186 = v580;
                  else
                    v186 = (void **)v580[0];
                  memmove(v113, v186, v111);
                  *(_WORD *)((char *)&v113->__r_.__value_.__l.__data_ + v111) = 47;
                  if (v547 >= 0)
                    v187 = (const std::string::value_type *)&v546;
                  else
                    v187 = (const std::string::value_type *)v546;
                  if (v547 >= 0)
                    v188 = HIBYTE(v547);
                  else
                    v188 = *((_QWORD *)&v546 + 1);
                  v189 = std::string::append(&__p, v187, v188);
                  v190 = (void *)v189->__r_.__value_.__r.__words[0];
                  v606.__r_.__value_.__r.__words[0] = v189->__r_.__value_.__l.__size_;
                  *(std::string::size_type *)((char *)v606.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v189->__r_.__value_.__r.__words[1] + 7);
                  v191 = HIBYTE(v189->__r_.__value_.__r.__words[2]);
                  v189->__r_.__value_.__l.__size_ = 0;
                  v189->__r_.__value_.__r.__words[2] = 0;
                  v189->__r_.__value_.__r.__words[0] = 0;
                  if (SHIBYTE(v545[2]) < 0)
                    operator delete(v545[0]);
                  v545[0] = v190;
                  v545[1] = v606.__r_.__value_.__l.__data_;
                  *(void **)((char *)&v545[1] + 7) = *(void **)((char *)v606.__r_.__value_.__r.__words + 7);
                  HIBYTE(v545[2]) = v191;
                  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                    operator delete(__p.__r_.__value_.__l.__data_);
                }
                else
                {
LABEL_229:
                  if (SHIBYTE(v545[2]) < 0)
                  {
                    if (v547 >= 0)
                      v125 = &v546;
                    else
                      v125 = (__int128 *)v546;
                    if (v547 >= 0)
                      v126 = HIBYTE(v547);
                    else
                      v126 = *((_QWORD *)&v546 + 1);
                    sub_1C98A976C(v545, v125, v126);
                  }
                  else if (v547 < 0)
                  {
                    sub_1C98A96AC(v545, (void *)v546, *((size_t *)&v546 + 1));
                  }
                  else
                  {
                    *(_OWORD *)v545 = v546;
                    v545[2] = (void *)v547;
                  }
                }
                sub_1C991C9BC((uint64_t *)&v543, *a2, (const void **)v545);
                v192 = v543;
                if (!v543)
                {
                  v536 = 0;
                  v363 = v544;
                  if (!v544)
                    goto LABEL_780;
                  goto LABEL_777;
                }
                v193 = v544;
                if (v544)
                {
                  v194 = (unint64_t *)&v544->__shared_owners_;
                  do
                    v195 = __ldxr(v194);
                  while (__stxr(v195 + 1, v194));
                }
                v531 = v193;
                memset(&v605, 0, sizeof(v605));
                v602 = 0;
                v603 = 0;
                v604 = 0;
                __p.__r_.__value_.__s.__data_[16] = 0;
                __p.__r_.__value_.__l.__size_ = v192;
                __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E8294EB0;
                v596 = *(_DWORD *)(v192 + 8);
                v597 = 0;
                v595 = &off_1E8294F80;
                v196 = (_QWORD *)operator new();
                v197 = operator new();
                *(_QWORD *)(v197 + 8) = 0;
                *(_QWORD *)(v197 + 16) = 0;
                *(_QWORD *)v197 = 0;
                v198 = 1;
                *(_BYTE *)(v197 + 24) = 1;
                sub_1C991D768(v197, 0);
                *v196 = v197;
                v598 = v196;
                v599 = 1;
                v600 = 1;
                v601 = 6;
LABEL_384:
                if (!v198)
                  goto LABEL_766;
                v600 = (*(uint64_t (**)(std::string::size_type))(*(_QWORD *)__p.__r_.__value_.__l.__size_
                                                                         + 32))(__p.__r_.__value_.__l.__size_) ^ 1;
                (*(void (**)(std::string *__return_ptr))(*(_QWORD *)__p.__r_.__value_.__l.__size_ + 72))(&v606);
                if (SHIBYTE(v605.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v605.__r_.__value_.__l.__data_);
                v605 = v606;
                v199 = HIBYTE(v606.__r_.__value_.__r.__words[2]);
                if ((v606.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                  v199 = v605.__r_.__value_.__l.__size_;
                if (!v199
                  && ((*(uint64_t (**)(std::string::size_type))(*(_QWORD *)__p.__r_.__value_.__l.__size_ + 32))(__p.__r_.__value_.__l.__size_) & 1) != 0)
                {
LABEL_766:
                  v360 = 1;
                  goto LABEL_767;
                }
                v606.__r_.__value_.__s.__data_[16] = 0;
                v606.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E8294EB0;
                v606.__r_.__value_.__l.__size_ = 0;
                v200 = (_QWORD *)operator new();
                if ((v605.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v201 = &v605;
                else
                  v201 = (std::string *)v605.__r_.__value_.__r.__words[0];
                if ((v605.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v202 = HIBYTE(v605.__r_.__value_.__r.__words[2]);
                else
                  v202 = v605.__r_.__value_.__l.__size_;
                v203 = operator new();
                *v200 = sub_1C991D5C0(v203, v201, v202);
                v608 = 1;
                v609 = 0;
                v610 = v200;
                v611 = 1;
                v612 = 1;
                v613 = 6;
                v607 = &off_1E8294F80;
                v606.__r_.__value_.__l.__size_ = (std::string::size_type)&v607;
                v592 = 0;
                v591 = 0;
                v593 = 0;
                LOBYTE(v588) = 0;
                for (k = sub_1C991EA2C((uint64_t)&v607, (uint64_t)&v588, 1);
                      k == 1;
                      k = (*(uint64_t (**)(std::string::size_type, void **, uint64_t))(*(_QWORD *)v606.__r_.__value_.__l.__size_
                                                                                              + 88))(v606.__r_.__value_.__l.__size_, &v588, 1))
                {
                  if (v588 > 0x20u || ((1 << (char)v588) & 0x100002600) == 0)
                    break;
                  v206 = v606.__r_.__value_.__l.__size_;
                  if (*(_DWORD *)(v606.__r_.__value_.__l.__size_ + 8) != 2)
                  {
                    v207 = (*(uint64_t (**)(std::string::size_type, void **, uint64_t))(*(_QWORD *)v606.__r_.__value_.__l.__size_
                                                                                               + 144))(v606.__r_.__value_.__l.__size_, &v588, 1);
                    if (v207 >= 1)
                      *(_QWORD *)(v206 + 16) += v207;
                  }
                }
                if (SHIBYTE(v593) < 0)
                {
                  *(_BYTE *)v591 = 0;
                  v592 = 0;
                }
                else
                {
                  LOBYTE(v591) = 0;
                  HIBYTE(v593) = 0;
                }
                LOBYTE(v588) = 0;
                while (2)
                {
                  v211 = v606.__r_.__value_.__l.__size_;
                  if (*(_DWORD *)(v606.__r_.__value_.__l.__size_ + 8) == 2
                    || (v212 = (*(uint64_t (**)(std::string::size_type, void **, uint64_t))(*(_QWORD *)v606.__r_.__value_.__l.__size_ + 144))(v606.__r_.__value_.__l.__size_, &v588, 1), v212 < 1)|| (*(_QWORD *)(v211 + 16) += v212, v212 != 1)|| ((v213 = (char)v588, v588 <= 0x20u)? (v214 = ((1 << (char)v588) & 0x100002600) == 0): (v214 = 1), !v214))
                  {
                    v221 = HIBYTE(v593);
                    if (v593 < 0)
                      v221 = v592;
                    v612 = v221 != 0;
                    cva::utils::string::to_lower();
                    v222 = HIBYTE(v593);
                    v223 = HIBYTE(v593);
                    if (v593 < 0)
                      v222 = v592;
                    switch(v222)
                    {
                      case 2uLL:
                        v224 = &v591;
                        if (v593 < 0)
                          v224 = v591;
                        if (*v224 == 25707)
                        {
                          LODWORD(v589) = 0;
                          v588 = 0;
                          v240 = sub_1C990A5F8((uint64_t)&v606, &v588);
                          v241 = sub_1C990A5F8(v240, (_DWORD *)&v588 + 1);
                          sub_1C990A5F8(v241, &v589);
                          v242 = sub_1C991473C(v7, (const void **)&v602, (uint64_t)&v602);
                          v242[7] = (uint64_t *)v588;
                          *((_DWORD *)v242 + 16) = v589;
                        }
                        else if (*v224 == 29550)
                        {
                          LODWORD(v588) = 0;
                          sub_1C990A5F8((uint64_t)&v606, &v588);
                          v225 = (int)v588;
                          *((_DWORD *)sub_1C991473C(v7, (const void **)&v602, (uint64_t)&v602) + 20) = v225;
                        }
                        goto LABEL_763;
                      case 4uLL:
                        v235 = &v591;
                        if (v593 < 0)
                          v235 = v591;
                        if (*v235 == 1886221666)
                          goto LABEL_482;
                        goto LABEL_763;
                      case 6uLL:
                        v226 = (unsigned __int16 *)&v591;
                        if (v593 < 0)
                          v226 = (unsigned __int16 *)v591;
                        if (*(_DWORD *)v226 != 1836541294 || v226[2] != 27764)
                        {
                          if (*(_DWORD *)v226 != 1601200493 || v226[2] != 25707)
                          {
                            v229 = *(_DWORD *)v226;
                            v230 = v226[2];
                            if (v229 != 1601200493 || v230 != 29547)
                              goto LABEL_763;
                            v589 = 0;
                            v588 = 0;
                            v590 = 0;
                            LOBYTE(__dst) = 0;
                            while ((*(uint64_t (**)(std::string::size_type, __int128 *, uint64_t))(*(_QWORD *)v606.__r_.__value_.__l.__size_ + 88))(v606.__r_.__value_.__l.__size_, &__dst, 1) == 1)
                            {
                              if (__dst > 0x20u || ((1 << __dst) & 0x100002600) == 0)
                                break;
                              v233 = v606.__r_.__value_.__l.__size_;
                              if (*(_DWORD *)(v606.__r_.__value_.__l.__size_ + 8) != 2)
                              {
                                v234 = (*(uint64_t (**)(std::string::size_type, __int128 *, uint64_t))(*(_QWORD *)v606.__r_.__value_.__l.__size_ + 144))(v606.__r_.__value_.__l.__size_, &__dst, 1);
                                if (v234 >= 1)
                                  *(_QWORD *)(v233 + 16) += v234;
                              }
                            }
                            if (SHIBYTE(v590) < 0)
                            {
                              *(_BYTE *)v588 = 0;
                              v589 = 0;
                            }
                            else
                            {
                              LOBYTE(v588) = 0;
                              HIBYTE(v590) = 0;
                            }
                            LOBYTE(__dst) = 0;
                            while (1)
                            {
                              v334 = v606.__r_.__value_.__l.__size_;
                              if (*(_DWORD *)(v606.__r_.__value_.__l.__size_ + 8) == 2
                                || (v335 = (*(uint64_t (**)(std::string::size_type, __int128 *, uint64_t))(*(_QWORD *)v606.__r_.__value_.__l.__size_ + 144))(v606.__r_.__value_.__l.__size_, &__dst, 1), v335 < 1)|| (*(_QWORD *)(v334 + 16) += v335, v335 != 1)|| ((v336 = __dst, __dst <= 0x20u)? (v337 = ((1 << __dst) & 0x100002600) == 0): (v337 = 1), !v337))
                              {
                                v344 = SHIBYTE(v590);
                                if (v590 >= 0)
                                  v345 = HIBYTE(v590);
                                else
                                  v345 = v589;
                                v612 = v345 != 0;
                                v346 = SHIBYTE(v581);
                                if (v581 >= 0)
                                  v347 = HIBYTE(v581);
                                else
                                  v347 = (size_t)v580[1];
                                v348 = v347 + v345;
                                if (v347 + v345 > 0x7FFFFFFFFFFFFFF7)
                                  goto LABEL_1132;
                                if (v348 > 0x16)
                                {
                                  v350 = (v348 & 0xFFFFFFFFFFFFFFF8) + 8;
                                  if ((v348 | 7) != 0x17)
                                    v350 = v348 | 7;
                                  v351 = v350 + 1;
                                  p_dst = (__int128 *)operator new(v350 + 1);
                                  v587 = v351 | 0x8000000000000000;
                                  *(_QWORD *)&__dst = p_dst;
                                  *((_QWORD *)&__dst + 1) = v347 + v345;
                                  v7 = (uint64_t **)(a1 + 30);
                                  if (v347)
                                    goto LABEL_741;
                                }
                                else
                                {
                                  v587 = 0;
                                  __dst = 0uLL;
                                  p_dst = &__dst;
                                  HIBYTE(v587) = v347 + v345;
                                  v7 = (uint64_t **)(a1 + 30);
                                  if (!v347)
                                    goto LABEL_745;
LABEL_741:
                                  if (v346 >= 0)
                                    v352 = v580;
                                  else
                                    v352 = (void **)v580[0];
                                  memmove(p_dst, v352, v347);
                                }
LABEL_745:
                                v353 = (char *)p_dst + v347;
                                if (v345)
                                {
                                  if (v344 >= 0)
                                    v354 = &v588;
                                  else
                                    v354 = v588;
                                  memmove(v353, v354, v345);
                                }
                                v353[v345] = 0;
                                v355 = sub_1C991473C(v7, (const void **)&v602, (uint64_t)&v602);
                                v271 = v355 + 17;
                                v272 = *((char *)v355 + 159);
LABEL_751:
                                if (v272 < 0)
                                  operator delete(*v271);
                                *(_OWORD *)v271 = __dst;
                                v271[2] = (uint64_t *)v587;
                                if (SHIBYTE(v590) < 0)
                                  operator delete(v588);
LABEL_763:
                                v223 = HIBYTE(v593);
LABEL_764:
                                if (v223 < 0)
                                  operator delete(v591);
                                sub_1C991EF54((uint64_t)&v606);
                                v198 = v600;
                                goto LABEL_384;
                              }
                              if ((SHIBYTE(v590) & 0x80000000) == 0)
                                break;
                              v331 = (v590 & 0x7FFFFFFFFFFFFFFFLL) - 1;
                              if (v589 == v331)
                              {
                                if ((v590 & 0x7FFFFFFFFFFFFFFFLL) == 0x7FFFFFFFFFFFFFF8)
                                  goto LABEL_1132;
                                v338 = v588;
                                v339 = 0x7FFFFFFFFFFFFFF7;
                                if (v331 < 0x3FFFFFFFFFFFFFF3)
                                  goto LABEL_714;
                                goto LABEL_722;
                              }
                              v332 = (char *)v588;
                              v331 = v589;
LABEL_727:
                              v589 = v331 + 1;
LABEL_699:
                              v333 = &v332[v331];
                              *v333 = v336;
                              v333[1] = 0;
                            }
                            if (HIBYTE(v590) != 22)
                            {
                              v331 = HIBYTE(v590);
                              HIBYTE(v590) = (HIBYTE(v590) + 1) & 0x7F;
                              v332 = (char *)&v588;
                              goto LABEL_699;
                            }
                            v338 = &v588;
                            v331 = 22;
LABEL_714:
                            if (v331 + 1 > 2 * v331)
                              v340 = v331 + 1;
                            else
                              v340 = 2 * v331;
                            if (v340 >= 0x17)
                            {
                              v341 = (v340 & 0x7FFFFFFFFFFFFFF8) + 8;
                              v342 = v340 | 7;
                              if (v342 == 23)
                                v342 = v341;
                              v339 = v342 + 1;
                            }
                            else
                            {
                              v339 = 23;
                            }
LABEL_722:
                            v343 = (char *)operator new(v339);
                            v332 = v343;
                            if (!v331 || (memmove(v343, v338, v331), v331 != 22))
                              operator delete(v338);
                            v588 = v332;
                            v590 = v339 | 0x8000000000000000;
                            goto LABEL_727;
                          }
                          v589 = 0;
                          v588 = 0;
                          v590 = 0;
                          LOBYTE(__dst) = 0;
                          while ((*(uint64_t (**)(std::string::size_type, __int128 *, uint64_t))(*(_QWORD *)v606.__r_.__value_.__l.__size_ + 88))(v606.__r_.__value_.__l.__size_, &__dst, 1) == 1)
                          {
                            if (__dst > 0x20u || ((1 << __dst) & 0x100002600) == 0)
                              break;
                            v274 = v606.__r_.__value_.__l.__size_;
                            if (*(_DWORD *)(v606.__r_.__value_.__l.__size_ + 8) != 2)
                            {
                              v275 = (*(uint64_t (**)(std::string::size_type, __int128 *, uint64_t))(*(_QWORD *)v606.__r_.__value_.__l.__size_ + 144))(v606.__r_.__value_.__l.__size_, &__dst, 1);
                              if (v275 >= 1)
                                *(_QWORD *)(v274 + 16) += v275;
                            }
                          }
                          if (SHIBYTE(v590) < 0)
                          {
                            *(_BYTE *)v588 = 0;
                            v589 = 0;
                          }
                          else
                          {
                            LOBYTE(v588) = 0;
                            HIBYTE(v590) = 0;
                          }
                          LOBYTE(__dst) = 0;
                          while (1)
                          {
                            v309 = v606.__r_.__value_.__l.__size_;
                            if (*(_DWORD *)(v606.__r_.__value_.__l.__size_ + 8) == 2
                              || (v310 = (*(uint64_t (**)(std::string::size_type, __int128 *, uint64_t))(*(_QWORD *)v606.__r_.__value_.__l.__size_ + 144))(v606.__r_.__value_.__l.__size_, &__dst, 1), v310 < 1)|| (*(_QWORD *)(v309 + 16) += v310, v310 != 1)|| ((v311 = __dst, __dst <= 0x20u)? (v312 = ((1 << __dst) & 0x100002600) == 0): (v312 = 1), !v312))
                            {
                              v319 = SHIBYTE(v590);
                              if (v590 >= 0)
                                v320 = HIBYTE(v590);
                              else
                                v320 = v589;
                              v612 = v320 != 0;
                              v321 = SHIBYTE(v581);
                              if (v581 >= 0)
                                v322 = HIBYTE(v581);
                              else
                                v322 = (size_t)v580[1];
                              v323 = v322 + v320;
                              if (v322 + v320 <= 0x7FFFFFFFFFFFFFF7)
                              {
                                if (v323 > 0x16)
                                {
                                  v325 = (v323 & 0xFFFFFFFFFFFFFFF8) + 8;
                                  if ((v323 | 7) != 0x17)
                                    v325 = v323 | 7;
                                  v326 = v325 + 1;
                                  v324 = (__int128 *)operator new(v325 + 1);
                                  v587 = v326 | 0x8000000000000000;
                                  *(_QWORD *)&__dst = v324;
                                  *((_QWORD *)&__dst + 1) = v322 + v320;
                                  v7 = (uint64_t **)(a1 + 30);
                                  if (!v322)
                                    goto LABEL_690;
                                }
                                else
                                {
                                  v587 = 0;
                                  __dst = 0uLL;
                                  v324 = &__dst;
                                  HIBYTE(v587) = v322 + v320;
                                  v7 = (uint64_t **)(a1 + 30);
                                  if (!v322)
                                  {
LABEL_690:
                                    v328 = (char *)v324 + v322;
                                    if (v320)
                                    {
                                      if (v319 >= 0)
                                        v329 = &v588;
                                      else
                                        v329 = v588;
                                      memmove(v328, v329, v320);
                                    }
                                    v328[v320] = 0;
                                    v330 = sub_1C991473C(v7, (const void **)&v602, (uint64_t)&v602);
                                    v271 = v330 + 11;
                                    v272 = *((char *)v330 + 111);
                                    goto LABEL_751;
                                  }
                                }
                                if (v321 >= 0)
                                  v327 = v580;
                                else
                                  v327 = (void **)v580[0];
                                memmove(v324, v327, v322);
                                goto LABEL_690;
                              }
LABEL_1132:
                              abort();
                            }
                            if ((SHIBYTE(v590) & 0x80000000) == 0)
                              break;
                            v306 = (v590 & 0x7FFFFFFFFFFFFFFFLL) - 1;
                            if (v589 == v306)
                            {
                              if ((v590 & 0x7FFFFFFFFFFFFFFFLL) == 0x7FFFFFFFFFFFFFF8)
                                goto LABEL_1132;
                              v313 = v588;
                              v314 = 0x7FFFFFFFFFFFFFF7;
                              if (v306 < 0x3FFFFFFFFFFFFFF3)
                                goto LABEL_659;
                              goto LABEL_667;
                            }
                            v307 = (char *)v588;
                            v306 = v589;
LABEL_672:
                            v589 = v306 + 1;
LABEL_644:
                            v308 = &v307[v306];
                            *v308 = v311;
                            v308[1] = 0;
                          }
                          if (HIBYTE(v590) != 22)
                          {
                            v306 = HIBYTE(v590);
                            HIBYTE(v590) = (HIBYTE(v590) + 1) & 0x7F;
                            v307 = (char *)&v588;
                            goto LABEL_644;
                          }
                          v313 = &v588;
                          v306 = 22;
LABEL_659:
                          if (v306 + 1 > 2 * v306)
                            v315 = v306 + 1;
                          else
                            v315 = 2 * v306;
                          if (v315 >= 0x17)
                          {
                            v316 = (v315 & 0x7FFFFFFFFFFFFFF8) + 8;
                            v317 = v315 | 7;
                            if (v317 == 23)
                              v317 = v316;
                            v314 = v317 + 1;
                          }
                          else
                          {
                            v314 = 23;
                          }
LABEL_667:
                          v318 = (char *)operator new(v314);
                          v307 = v318;
                          if (!v306 || (memmove(v318, v313, v306), v306 != 22))
                            operator delete(v313);
                          v588 = v307;
                          v590 = v314 | 0x8000000000000000;
                          goto LABEL_672;
                        }
                        LOBYTE(v588) = 0;
                        while ((*(uint64_t (**)(std::string::size_type, void **, uint64_t))(*(_QWORD *)v606.__r_.__value_.__l.__size_ + 88))(v606.__r_.__value_.__l.__size_, &v588, 1) == 1)
                        {
                          if (v588 > 0x20u || ((1 << (char)v588) & 0x100002600) == 0)
                            break;
                          v244 = v606.__r_.__value_.__l.__size_;
                          if (*(_DWORD *)(v606.__r_.__value_.__l.__size_ + 8) != 2)
                          {
                            v245 = (*(uint64_t (**)(std::string::size_type, void **, uint64_t))(*(_QWORD *)v606.__r_.__value_.__l.__size_ + 144))(v606.__r_.__value_.__l.__size_, &v588, 1);
                            if (v245 >= 1)
                              *(_QWORD *)(v244 + 16) += v245;
                          }
                        }
                        if (SHIBYTE(v604) < 0)
                        {
                          *v602 = 0;
                          v603 = 0;
                        }
                        else
                        {
                          LOBYTE(v602) = 0;
                          HIBYTE(v604) = 0;
                        }
                        LOBYTE(v588) = 0;
                        while (1)
                        {
                          v279 = v606.__r_.__value_.__l.__size_;
                          if (*(_DWORD *)(v606.__r_.__value_.__l.__size_ + 8) == 2
                            || (v280 = (*(uint64_t (**)(std::string::size_type, void **, uint64_t))(*(_QWORD *)v606.__r_.__value_.__l.__size_ + 144))(v606.__r_.__value_.__l.__size_, &v588, 1), v280 < 1)|| (*(_QWORD *)(v279 + 16) += v280, v280 != 1)|| ((v281 = (char)v588, v588 <= 0x20u)? (v282 = ((1 << (char)v588) & 0x100002600) == 0): (v282 = 1), !v282))
                          {
                            if (v604 >= 0)
                              v289 = HIBYTE(v604);
                            else
                              v289 = v603;
                            v612 = v289 != 0;
                            v290 = *(char **)v535;
                            if (!*(_QWORD *)v535)
                              goto LABEL_756;
                            if (v604 >= 0)
                              v291 = &v602;
                            else
                              v291 = (_BYTE **)v602;
                            v292 = v535;
                            while (1)
                            {
                              v293 = v290[55];
                              if (v293 >= 0)
                                v294 = v290 + 32;
                              else
                                v294 = (const void *)*((_QWORD *)v290 + 4);
                              if (v293 >= 0)
                                v295 = v290[55];
                              else
                                v295 = *((_QWORD *)v290 + 5);
                              if (v289 >= v295)
                                v296 = v295;
                              else
                                v296 = v289;
                              v297 = memcmp(v294, v291, v296);
                              if (v297)
                              {
                                if (v297 < 0)
                                  goto LABEL_613;
                              }
                              else if (v295 < v289)
                              {
LABEL_613:
                                v290 = (char *)*((_QWORD *)v290 + 1);
                                if (!v290)
                                  goto LABEL_628;
                                continue;
                              }
                              v292 = v290;
                              v290 = *(char **)v290;
                              if (!v290)
                              {
LABEL_628:
                                if (v292 != v535)
                                {
                                  v300 = (const void *)*((_QWORD *)v292 + 4);
                                  v299 = v292 + 32;
                                  v298 = v300;
                                  v301 = *((char *)v299 + 23);
                                  if (v301 >= 0)
                                    v302 = v299;
                                  else
                                    v302 = v298;
                                  if (v301 >= 0)
                                    v303 = *((unsigned __int8 *)v299 + 23);
                                  else
                                    v303 = v299[1];
                                  if (v303 >= v289)
                                    v304 = v289;
                                  else
                                    v304 = v303;
                                  v305 = memcmp(v291, v302, v304);
                                  if (v305)
                                  {
                                    if ((v305 & 0x80000000) == 0)
                                    {
LABEL_1038:
                                      if (SHIBYTE(v593) < 0)
                                        operator delete(v591);
                                      sub_1C991EF54((uint64_t)&v606);
                                      v360 = 0;
LABEL_767:
                                      sub_1C991EF54((uint64_t)&__p);
                                      if (SHIBYTE(v604) < 0)
                                      {
                                        operator delete(v602);
                                        if ((SHIBYTE(v605.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                                          goto LABEL_769;
                                      }
                                      else if ((SHIBYTE(v605.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                                      {
LABEL_769:
                                        v536 &= v360;
                                        if (v531)
                                        {
                                          v361 = (unint64_t *)&v531->__shared_owners_;
                                          do
                                            v362 = __ldaxr(v361);
                                          while (__stlxr(v362 - 1, v361));
                                          if (!v362)
                                          {
                                            ((void (*)(std::__shared_weak_count *))v531->__on_zero_shared)(v531);
                                            std::__shared_weak_count::__release_weak(v531);
                                          }
                                        }
                                        v363 = v544;
                                        if (!v544)
                                        {
LABEL_780:
                                          if ((SHIBYTE(v545[2]) & 0x80000000) == 0)
                                            goto LABEL_781;
LABEL_784:
                                          operator delete(v545[0]);
                                          if ((SHIBYTE(v547) & 0x80000000) == 0)
                                            goto LABEL_951;
                                          goto LABEL_785;
                                        }
LABEL_777:
                                        v364 = (unint64_t *)&v363->__shared_owners_;
                                        do
                                          v365 = __ldaxr(v364);
                                        while (__stlxr(v365 - 1, v364));
                                        if (v365)
                                          goto LABEL_780;
                                        ((void (*)(std::__shared_weak_count *))v363->__on_zero_shared)(v363);
                                        std::__shared_weak_count::__release_weak(v363);
                                        if (SHIBYTE(v545[2]) < 0)
                                          goto LABEL_784;
LABEL_781:
                                        if ((SHIBYTE(v547) & 0x80000000) == 0)
                                          goto LABEL_951;
LABEL_785:
                                        v366 = (void *)v546;
LABEL_943:
                                        operator delete(v366);
                                        goto LABEL_951;
                                      }
                                      operator delete(v605.__r_.__value_.__l.__data_);
                                      goto LABEL_769;
                                    }
                                  }
                                  else if (v289 >= v303)
                                  {
                                    goto LABEL_1038;
                                  }
                                }
LABEL_756:
                                v356 = sub_1C991473C(v7, (const void **)&v602, (uint64_t)&v602);
                                v356[7] = _D8;
                                *((_DWORD *)v356 + 16) = 1065353216;
                                *(uint64_t **)((char *)v356 + 68) = 0;
                                *(uint64_t **)((char *)v356 + 76) = (uint64_t *)0x4270000000000000;
                                v357 = (void **)(v356 + 11);
                                if (*((char *)v356 + 111) < 0)
                                  operator delete(*v357);
                                v358 = (void **)(v356 + 14);
                                *v357 = 0;
                                v356[12] = 0;
                                v356[13] = 0;
                                if (*((char *)v356 + 135) < 0)
                                  operator delete(*v358);
                                v359 = (void **)(v356 + 17);
                                *v358 = 0;
                                v356[15] = 0;
                                v356[16] = 0;
                                if (*((char *)v356 + 159) < 0)
                                  operator delete(*v359);
                                *v359 = 0;
                                v356[18] = 0;
                                v356[19] = 0;
                                goto LABEL_763;
                              }
                            }
                          }
                          if ((SHIBYTE(v604) & 0x80000000) == 0)
                            break;
                          v276 = (v604 & 0x7FFFFFFFFFFFFFFFLL) - 1;
                          if (v603 == v276)
                          {
                            if ((v604 & 0x7FFFFFFFFFFFFFFFLL) == 0x7FFFFFFFFFFFFFF8)
                              goto LABEL_1132;
                            v283 = (_BYTE **)v602;
                            v284 = 0x7FFFFFFFFFFFFFF7;
                            if (v276 < 0x3FFFFFFFFFFFFFF3)
                              goto LABEL_591;
                            goto LABEL_599;
                          }
                          v277 = (_BYTE **)v602;
                          v276 = v603;
LABEL_604:
                          v603 = v276 + 1;
LABEL_576:
                          v278 = (char *)v277 + v276;
                          *v278 = v281;
                          v278[1] = 0;
                        }
                        if (HIBYTE(v604) != 22)
                        {
                          v276 = HIBYTE(v604);
                          HIBYTE(v604) = (HIBYTE(v604) + 1) & 0x7F;
                          v277 = &v602;
                          goto LABEL_576;
                        }
                        v283 = &v602;
                        v276 = 22;
LABEL_591:
                        if (v276 + 1 > 2 * v276)
                          v285 = v276 + 1;
                        else
                          v285 = 2 * v276;
                        if (v285 >= 0x17)
                        {
                          v286 = (v285 & 0x7FFFFFFFFFFFFFF8) + 8;
                          v287 = v285 | 7;
                          if (v287 == 23)
                            v287 = v286;
                          v284 = v287 + 1;
                        }
                        else
                        {
                          v284 = 23;
                        }
LABEL_599:
                        v288 = (_BYTE **)operator new(v284);
                        v277 = v288;
                        if (!v276 || (memmove(v288, v283, v276), v276 != 22))
                          operator delete(v283);
                        v602 = v277;
                        v604 = v284 | 0x8000000000000000;
                        goto LABEL_604;
                      case 8uLL:
                        v236 = &v591;
                        if (v593 < 0)
                          v236 = v591;
                        if (*v236 != 0x706D75625F70616DLL)
                          goto LABEL_763;
LABEL_482:
                        v589 = 0;
                        v588 = 0;
                        v590 = 0;
                        LOBYTE(__dst) = 0;
                        while ((*(uint64_t (**)(std::string::size_type, __int128 *, uint64_t))(*(_QWORD *)v606.__r_.__value_.__l.__size_ + 88))(v606.__r_.__value_.__l.__size_, &__dst, 1) == 1)
                        {
                          if (__dst > 0x20u || ((1 << __dst) & 0x100002600) == 0)
                            break;
                          v238 = v606.__r_.__value_.__l.__size_;
                          if (*(_DWORD *)(v606.__r_.__value_.__l.__size_ + 8) != 2)
                          {
                            v239 = (*(uint64_t (**)(std::string::size_type, __int128 *, uint64_t))(*(_QWORD *)v606.__r_.__value_.__l.__size_ + 144))(v606.__r_.__value_.__l.__size_, &__dst, 1);
                            if (v239 >= 1)
                              *(_QWORD *)(v238 + 16) += v239;
                          }
                        }
                        if (SHIBYTE(v590) < 0)
                        {
                          *(_BYTE *)v588 = 0;
                          v589 = 0;
                        }
                        else
                        {
                          LOBYTE(v588) = 0;
                          HIBYTE(v590) = 0;
                        }
                        LOBYTE(__dst) = 0;
                        while (2)
                        {
                          v249 = v606.__r_.__value_.__l.__size_;
                          if (*(_DWORD *)(v606.__r_.__value_.__l.__size_ + 8) == 2
                            || (v250 = (*(uint64_t (**)(std::string::size_type, __int128 *, uint64_t))(*(_QWORD *)v606.__r_.__value_.__l.__size_ + 144))(v606.__r_.__value_.__l.__size_, &__dst, 1), v250 < 1)|| (*(_QWORD *)(v249 + 16) += v250, v250 != 1)|| ((v251 = __dst, __dst <= 0x20u)? (v252 = ((1 << __dst) & 0x100002600) == 0): (v252 = 1), !v252))
                          {
                            v259 = SHIBYTE(v590);
                            if (v590 >= 0)
                              v260 = HIBYTE(v590);
                            else
                              v260 = v589;
                            v612 = v260 != 0;
                            v261 = SHIBYTE(v581);
                            if (v581 >= 0)
                              v262 = HIBYTE(v581);
                            else
                              v262 = (size_t)v580[1];
                            v263 = v262 + v260;
                            if (v262 + v260 > 0x7FFFFFFFFFFFFFF7)
                              goto LABEL_1132;
                            if (v263 > 0x16)
                            {
                              v265 = (v263 & 0xFFFFFFFFFFFFFFF8) + 8;
                              if ((v263 | 7) != 0x17)
                                v265 = v263 | 7;
                              v266 = v265 + 1;
                              v264 = (__int128 *)operator new(v265 + 1);
                              v587 = v266 | 0x8000000000000000;
                              *(_QWORD *)&__dst = v264;
                              *((_QWORD *)&__dst + 1) = v262 + v260;
                              v7 = (uint64_t **)(a1 + 30);
                              if (!v262)
                                goto LABEL_554;
                            }
                            else
                            {
                              v587 = 0;
                              __dst = 0uLL;
                              v264 = &__dst;
                              HIBYTE(v587) = v262 + v260;
                              v7 = (uint64_t **)(a1 + 30);
                              if (!v262)
                              {
LABEL_554:
                                v268 = (char *)v264 + v262;
                                if (v260)
                                {
                                  if (v259 >= 0)
                                    v269 = &v588;
                                  else
                                    v269 = v588;
                                  memmove(v268, v269, v260);
                                }
                                v268[v260] = 0;
                                v270 = sub_1C991473C(v7, (const void **)&v602, (uint64_t)&v602);
                                v271 = v270 + 14;
                                v272 = *((char *)v270 + 135);
                                goto LABEL_751;
                              }
                            }
                            if (v261 >= 0)
                              v267 = v580;
                            else
                              v267 = (void **)v580[0];
                            memmove(v264, v267, v262);
                            goto LABEL_554;
                          }
                          if (SHIBYTE(v590) < 0)
                          {
                            v246 = (v590 & 0x7FFFFFFFFFFFFFFFLL) - 1;
                            if (v589 != v246)
                            {
                              v247 = (char *)v588;
                              v246 = v589;
LABEL_536:
                              v589 = v246 + 1;
                              goto LABEL_508;
                            }
                            if ((v590 & 0x7FFFFFFFFFFFFFFFLL) == 0x7FFFFFFFFFFFFFF8)
                              goto LABEL_1132;
                            v253 = v588;
                            v254 = 0x7FFFFFFFFFFFFFF7;
                            if (v246 >= 0x3FFFFFFFFFFFFFF3)
                            {
LABEL_531:
                              v258 = (char *)operator new(v254);
                              v247 = v258;
                              if (!v246 || (memmove(v258, v253, v246), v246 != 22))
                                operator delete(v253);
                              v588 = v247;
                              v590 = v254 | 0x8000000000000000;
                              goto LABEL_536;
                            }
                          }
                          else
                          {
                            if (HIBYTE(v590) != 22)
                            {
                              v246 = HIBYTE(v590);
                              HIBYTE(v590) = (HIBYTE(v590) + 1) & 0x7F;
                              v247 = (char *)&v588;
LABEL_508:
                              v248 = &v247[v246];
                              *v248 = v251;
                              v248[1] = 0;
                              continue;
                            }
                            v253 = &v588;
                            v246 = 22;
                          }
                          break;
                        }
                        if (v246 + 1 > 2 * v246)
                          v255 = v246 + 1;
                        else
                          v255 = 2 * v246;
                        if (v255 >= 0x17)
                        {
                          v256 = (v255 & 0x7FFFFFFFFFFFFFF8) + 8;
                          v257 = v255 | 7;
                          if (v257 == 23)
                            v257 = v256;
                          v254 = v257 + 1;
                        }
                        else
                        {
                          v254 = 23;
                        }
                        goto LABEL_531;
                      default:
                        goto LABEL_764;
                    }
                  }
                  if (SHIBYTE(v593) < 0)
                  {
                    v208 = (v593 & 0x7FFFFFFFFFFFFFFFLL) - 1;
                    if (v592 == v208)
                    {
                      if ((v593 & 0x7FFFFFFFFFFFFFFFLL) == 0x7FFFFFFFFFFFFFF8)
                        goto LABEL_1132;
                      v215 = v591;
                      v216 = 0x7FFFFFFFFFFFFFF7;
                      if (v208 < 0x3FFFFFFFFFFFFFF3)
                      {
LABEL_427:
                        if (v208 + 1 > 2 * v208)
                          v217 = v208 + 1;
                        else
                          v217 = 2 * v208;
                        if (v217 >= 0x17)
                        {
                          v218 = (v217 & 0x7FFFFFFFFFFFFFF8) + 8;
                          v219 = v217 | 7;
                          if (v219 == 23)
                            v219 = v218;
                          v216 = v219 + 1;
                        }
                        else
                        {
                          v216 = 23;
                        }
                      }
                      v220 = (char *)operator new(v216);
                      v209 = v220;
                      if (!v208 || (memmove(v220, v215, v208), v208 != 22))
                        operator delete(v215);
                      v591 = v209;
                      v593 = v216 | 0x8000000000000000;
                    }
                    else
                    {
                      v209 = (char *)v591;
                      v208 = v592;
                    }
                    v592 = v208 + 1;
                  }
                  else
                  {
                    if (HIBYTE(v593) == 22)
                    {
                      v215 = &v591;
                      v208 = 22;
                      goto LABEL_427;
                    }
                    v208 = HIBYTE(v593);
                    HIBYTE(v593) = (HIBYTE(v593) + 1) & 0x7F;
                    v209 = (char *)&v591;
                  }
                  v210 = &v209[v208];
                  *v210 = v213;
                  v210[1] = 0;
                  continue;
                }
              }
              if (SHIBYTE(v547) < 0)
              {
                v96 = (v547 & 0x7FFFFFFFFFFFFFFFLL) - 1;
                if (*((_QWORD *)&v546 + 1) == v96)
                {
                  if ((v547 & 0x7FFFFFFFFFFFFFFFLL) == 0x7FFFFFFFFFFFFFF8)
                    goto LABEL_1132;
                  v103 = (__int128 *)v546;
                  v104 = 0x7FFFFFFFFFFFFFF7;
                  if (v96 < 0x3FFFFFFFFFFFFFF3)
                  {
LABEL_204:
                    if (v96 + 1 > 2 * v96)
                      v105 = v96 + 1;
                    else
                      v105 = 2 * v96;
                    if (v105 >= 0x17)
                    {
                      v106 = (v105 & 0x7FFFFFFFFFFFFFF8) + 8;
                      v107 = v105 | 7;
                      if (v107 == 23)
                        v107 = v106;
                      v104 = v107 + 1;
                    }
                    else
                    {
                      v104 = 23;
                    }
                  }
                  v108 = (__int128 *)operator new(v104);
                  v97 = v108;
                  if (!v96 || (memmove(v108, v103, v96), v96 != 22))
                    operator delete(v103);
                  *(_QWORD *)&v546 = v97;
                  v547 = v104 | 0x8000000000000000;
                }
                else
                {
                  v96 = *((_QWORD *)&v546 + 1);
                  v97 = (__int128 *)v546;
                }
                *((_QWORD *)&v546 + 1) = v96 + 1;
              }
              else
              {
                if (HIBYTE(v547) == 22)
                {
                  v103 = &v546;
                  v96 = 22;
                  goto LABEL_204;
                }
                v96 = HIBYTE(v547);
                HIBYTE(v547) = (HIBYTE(v547) + 1) & 0x7F;
                v97 = &v546;
              }
              v98 = (char *)v97 + v96;
              *v98 = v101;
              v98[1] = 0;
              continue;
            }
        }
        if (v64 < 0)
          operator delete(v548);
        sub_1C991EF54((uint64_t)&v551);
        if (SHIBYTE(v561.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v561.__r_.__value_.__l.__data_);
        goto LABEL_61;
      }
      if ((SHIBYTE(v550) & 0x80000000) == 0)
        break;
      v49 = (v550 & 0x7FFFFFFFFFFFFFFFLL) - 1;
      if (v549 == v49)
      {
        if ((v550 & 0x7FFFFFFFFFFFFFFFLL) == 0x7FFFFFFFFFFFFFF8)
          goto LABEL_1132;
        v56 = v548;
        v57 = 0x7FFFFFFFFFFFFFF7;
        if (v49 < 0x3FFFFFFFFFFFFFF3)
          goto LABEL_101;
        goto LABEL_109;
      }
      v50 = (char *)v548;
      v49 = v549;
LABEL_114:
      v549 = v49 + 1;
LABEL_86:
      v51 = &v50[v49];
      *v51 = v54;
      v51[1] = 0;
    }
    if (HIBYTE(v550) != 22)
    {
      v49 = HIBYTE(v550);
      HIBYTE(v550) = (HIBYTE(v550) + 1) & 0x7F;
      v50 = (char *)&v548;
      goto LABEL_86;
    }
    v56 = &v548;
    v49 = 22;
LABEL_101:
    if (v49 + 1 > 2 * v49)
      v58 = v49 + 1;
    else
      v58 = 2 * v49;
    if (v58 >= 0x17)
    {
      v59 = (v58 & 0x7FFFFFFFFFFFFFF8) + 8;
      v60 = v58 | 7;
      if (v60 == 23)
        v60 = v59;
      v57 = v60 + 1;
    }
    else
    {
      v57 = 23;
    }
LABEL_109:
    v61 = (char *)operator new(v57);
    v50 = v61;
    if (!v49 || (memmove(v61, v56, v49), v49 != 22))
      operator delete(v56);
    v548 = v50;
    v550 = v57 | 0x8000000000000000;
    goto LABEL_114;
  }
  v479 = a1[27];
  v480 = a1[28];
  for (m = v480 - v479; v480 != v479; m = v480 - v479)
  {
    v482 = m >> 4;
    if (m >> 4 >= (unint64_t)((a1[22] - a1[21]) >> 4))
      break;
    v483 = (unint64_t)a1[29];
    if ((unint64_t)v480 < v483)
    {
      *(_QWORD *)v480 = 0;
      *((_QWORD *)v480 + 1) = 0;
      v480 += 16;
    }
    else
    {
      v484 = v482 + 1;
      if ((unint64_t)(v482 + 1) >> 60)
        goto LABEL_1132;
      v485 = v483 - (_QWORD)v479;
      if (v485 >> 3 > v484)
        v484 = v485 >> 3;
      if ((unint64_t)v485 >= 0x7FFFFFFFFFFFFFF0)
        v486 = 0xFFFFFFFFFFFFFFFLL;
      else
        v486 = v484;
      if (v486)
      {
        if (v486 >> 60)
          goto LABEL_1133;
        v487 = (char *)operator new(16 * v486);
      }
      else
      {
        v487 = 0;
      }
      v488 = &v487[16 * v482];
      *(_QWORD *)v488 = 0;
      *((_QWORD *)v488 + 1) = 0;
      v489 = v488;
      if (v480 != v479)
      {
        do
        {
          *((_OWORD *)v489 - 1) = *((_OWORD *)v480 - 1);
          v489 -= 16;
          v480 -= 16;
        }
        while (v480 != v479);
        v479 = *v5;
      }
      v480 = v488 + 16;
      a1[27] = v489;
      a1[28] = v488 + 16;
      a1[29] = &v487[16 * v486];
      if (v479)
        operator delete(v479);
    }
    a1[28] = v480;
    v479 = a1[27];
  }
  v490 = a1[18];
  v491 = a1[19];
  v492 = 0xAAAAAAAAAAAAAAABLL * ((v491 - v490) >> 2);
  if (v491 == v490)
  {
LABEL_1092:
    v494 = 1;
  }
  else
  {
    while (1)
    {
      v493 = 0xAAAAAAAAAAAAAAABLL * ((a1[13] - a1[12]) >> 2);
      _CF = v492 >= v493;
      v494 = v492 < v493;
      if (_CF)
        break;
      v495 = (unint64_t)a1[20];
      if ((unint64_t)v491 < v495)
      {
        *(_QWORD *)v491 = 0;
        *((_DWORD *)v491 + 2) = 0;
        v491 += 12;
      }
      else
      {
        if (v492 > 0x1555555555555554)
          goto LABEL_1132;
        v496 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v495 - (_QWORD)v490) >> 2);
        if (2 * v496 <= v492 + 1)
          v497 = v492 + 1;
        else
          v497 = 2 * v496;
        if (v496 >= 0xAAAAAAAAAAAAAAALL)
          v498 = 0x1555555555555555;
        else
          v498 = v497;
        if (v498 > 0x1555555555555555)
          goto LABEL_1133;
        v499 = 12 * v498;
        v500 = (char *)operator new(12 * v498);
        v501 = &v500[12 * v492];
        *(_QWORD *)v501 = 0;
        *((_DWORD *)v501 + 2) = 0;
        for (n = v501; v491 != v490; *((_DWORD *)n + 2) = v504)
        {
          v503 = *(_QWORD *)(v491 - 12);
          v491 -= 12;
          v504 = *((_DWORD *)v491 + 2);
          *(_QWORD *)(n - 12) = v503;
          n -= 12;
        }
        v491 = v501 + 12;
        a1[18] = n;
        a1[19] = v501 + 12;
        a1[20] = &v500[v499];
        if (v490)
          operator delete(v490);
      }
      a1[19] = v491;
      v490 = a1[18];
      v492 = 0xAAAAAAAAAAAAAAABLL * ((v491 - v490) >> 2);
      if (v491 == v490)
        goto LABEL_1092;
    }
  }
  v505 = (a1[22] - a1[21]) >> 4;
  v506 = a1[25] == a1[24] || v505 == (a1[25] - a1[24]) >> 4;
  if (v506 && ((v507 = a1[28] - a1[27]) == 0 || v505 == v507 >> 4))
  {
    v14 = 0;
    v513 = a1[16] - a1[15];
    v514 = 0xAAAAAAAAAAAAAAABLL * ((a1[13] - a1[12]) >> 2);
    if (v513)
      v515 = v514 == 0xAAAAAAAAAAAAAAABLL * (v513 >> 2);
    else
      v515 = 1;
    v516 = v515;
    if (((v514 != v492) & ~v494) == 0 && v516)
    {
      a1[52] = a1[51];
      v518 = a1[42];
      v517 = a1[43];
      if (v517 != v518)
      {
        v519 = a1[43];
        do
        {
          v521 = (void *)*((_QWORD *)v519 - 3);
          v519 -= 24;
          v520 = v521;
          if (v521)
          {
            *((_QWORD *)v517 - 2) = v520;
            operator delete(v520);
          }
          v517 = v519;
        }
        while (v519 != v518);
      }
      a1[43] = v518;
      v14 = v536;
    }
  }
  else
  {
    v14 = 0;
  }
  sub_1C991EF54((uint64_t)&v562);
  if (SHIBYTE(v573) < 0)
  {
    operator delete((void *)__src);
    if (SHIBYTE(v581) < 0)
      goto LABEL_1106;
LABEL_1103:
    v508 = v582;
    if (v582)
    {
LABEL_1107:
      if (*(_BYTE *)(v508 + 24))
      {
        *(_QWORD *)(v508 + 8) = 0;
        if (*(_QWORD *)v508)
        {
          **(_BYTE **)v508 = 0;
          if (*(_QWORD *)v508)
            MEMORY[0x1CAA44AE4](*(_QWORD *)v508, 0x1000C8077774924);
        }
      }
      *(_QWORD *)v508 = 0;
      *(_QWORD *)(v508 + 16) = 0;
      MEMORY[0x1CAA44AFC](v508, 0x1010C40A6225C5ALL);
    }
  }
  else
  {
    if ((SHIBYTE(v581) & 0x80000000) == 0)
      goto LABEL_1103;
LABEL_1106:
    operator delete(v580[0]);
    v508 = v582;
    if (v582)
      goto LABEL_1107;
  }
LABEL_1112:
  v509 = v585;
  if (v585)
  {
    v510 = (unint64_t *)&v585->__shared_owners_;
    do
      v511 = __ldaxr(v510);
    while (__stlxr(v511 - 1, v510));
    if (!v511)
    {
      ((void (*)(std::__shared_weak_count *))v509->__on_zero_shared)(v509);
      std::__shared_weak_count::__release_weak(v509);
    }
  }
  return v14 & 1;
}

void sub_1C9914380(char **a1, unint64_t a2)
{
  char *v4;
  char *v5;
  char *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;
  size_t v15;
  char *v16;
  __int128 v17;

  v5 = a1[1];
  v4 = a1[2];
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - v5) >> 3) >= a2)
  {
    if (a2)
    {
      v12 = 24 * ((24 * a2 - 24) / 0x18) + 24;
      bzero(a1[1], v12);
      v5 += v12;
    }
    a1[1] = v5;
  }
  else
  {
    v6 = *a1;
    v7 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 3);
    v8 = v7 + a2;
    if (v7 + a2 > 0xAAAAAAAAAAAAAAALL)
      abort();
    v9 = 0xAAAAAAAAAAAAAAABLL * ((v4 - v6) >> 3);
    if (2 * v9 > v8)
      v8 = 2 * v9;
    if (v9 >= 0x555555555555555)
      v10 = 0xAAAAAAAAAAAAAAALL;
    else
      v10 = v8;
    if (v10)
    {
      if (v10 > 0xAAAAAAAAAAAAAAALL)
        sub_1C9899D30();
      v11 = (char *)operator new(24 * v10);
    }
    else
    {
      v11 = 0;
    }
    v13 = &v11[24 * v7];
    v14 = &v11[24 * v10];
    v15 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v13, v15);
    v16 = &v13[v15];
    if (v5 != v6)
    {
      do
      {
        v17 = *(_OWORD *)(v5 - 24);
        *((_QWORD *)v13 - 1) = *((_QWORD *)v5 - 1);
        *(_OWORD *)(v13 - 24) = v17;
        v13 -= 24;
        v5 -= 24;
      }
      while (v5 != v6);
      v5 = *a1;
    }
    *a1 = v13;
    a1[1] = v16;
    a1[2] = v14;
    if (v5)
      operator delete(v5);
  }
}

BOOL sub_1C9914518(uint64_t a1, uint64_t *a2)
{
  _BOOL8 result;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  BOOL v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;

  result = 0;
  v14 = 0;
  v4 = *(_QWORD *)(a1 + 8);
  if (*(_DWORD *)(v4 + 8) != 2)
  {
    v6 = (*(uint64_t (**)(_QWORD, unsigned int *, uint64_t))(*(_QWORD *)v4 + 144))(*(_QWORD *)(a1 + 8), &v14, 4);
    if (v6 >= 1 && (*(_QWORD *)(v4 + 16) += v6, v6 == 4))
    {
      v7 = v14;
      v8 = *a2;
      v9 = 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 2);
      v10 = v14 >= v9;
      v11 = v14 - v9;
      if (v11 != 0 && v10)
      {
        sub_1C98FDE24((uint64_t)a2, v11);
        v8 = *a2;
      }
      else if (!v10)
      {
        a2[1] = v8 + 12 * v14;
      }
      v12 = *(_QWORD *)(a1 + 8);
      if (*(_DWORD *)(v12 + 8) == 2)
      {
        v13 = -1;
      }
      else
      {
        v13 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v12 + 144))(v12, v8, 12 * v7);
        if (v13 >= 1)
          *(_QWORD *)(v12 + 16) += v13;
      }
      return v13 == 12 * v7;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

BOOL sub_1C9914634(uint64_t a1, uint64_t a2)
{
  _BOOL8 result;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  unint64_t v9;
  BOOL v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;

  result = 0;
  v14 = 0;
  v4 = *(_QWORD *)(a1 + 8);
  if (*(_DWORD *)(v4 + 8) != 2)
  {
    v6 = (*(uint64_t (**)(_QWORD, unsigned int *, uint64_t))(*(_QWORD *)v4 + 144))(*(_QWORD *)(a1 + 8), &v14, 4);
    if (v6 >= 1 && (*(_QWORD *)(v4 + 16) += v6, v6 == 4))
    {
      v7 = v14;
      v8 = *(char **)a2;
      v9 = (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 4;
      v10 = v14 >= v9;
      v11 = v14 - v9;
      if (v11 != 0 && v10)
      {
        sub_1C98FDD00((char **)a2, v11);
        v8 = *(char **)a2;
      }
      else if (!v10)
      {
        *(_QWORD *)(a2 + 8) = &v8[16 * v14];
      }
      v12 = *(_QWORD *)(a1 + 8);
      if (*(_DWORD *)(v12 + 8) == 2)
      {
        v13 = -1;
      }
      else
      {
        v13 = (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(_QWORD *)v12 + 144))(v12, v8, 16 * v7);
        if (v13 >= 1)
          *(_QWORD *)(v12 + 16) += v13;
      }
      return v13 == 16 * v7;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t **sub_1C991473C(uint64_t **a1, const void **a2, uint64_t a3)
{
  uint64_t *v5;
  uint64_t **v6;
  int v7;
  const void *v8;
  size_t v9;
  uint64_t **v10;
  _QWORD *v11;
  const void *v12;
  const void *v13;
  int v14;
  const void *v15;
  size_t v16;
  size_t v17;
  int v18;
  int v19;
  char *v20;
  _BYTE *v21;
  uint64_t *v27;
  uint64_t *v28;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    v7 = *((char *)a2 + 23);
    if (v7 >= 0)
      v8 = a2;
    else
      v8 = *a2;
    if (v7 >= 0)
      v9 = *((unsigned __int8 *)a2 + 23);
    else
      v9 = (size_t)a2[1];
    while (1)
    {
      v10 = (uint64_t **)v5;
      v13 = (const void *)v5[4];
      v11 = v5 + 4;
      v12 = v13;
      v14 = *((char *)v11 + 23);
      if (v14 >= 0)
        v15 = v11;
      else
        v15 = v12;
      if (v14 >= 0)
        v16 = *((unsigned __int8 *)v11 + 23);
      else
        v16 = v11[1];
      if (v16 >= v9)
        v17 = v9;
      else
        v17 = v16;
      v18 = memcmp(v8, v15, v17);
      if (v18)
      {
        if (v18 < 0)
          goto LABEL_8;
LABEL_22:
        v19 = memcmp(v15, v8, v17);
        if (v19)
        {
          if ((v19 & 0x80000000) == 0)
            return v10;
        }
        else if (v16 >= v9)
        {
          return v10;
        }
        v5 = v10[1];
        if (!v5)
        {
          v6 = v10 + 1;
          goto LABEL_29;
        }
      }
      else
      {
        if (v9 >= v16)
          goto LABEL_22;
LABEL_8:
        v5 = *v10;
        v6 = v10;
        if (!*v10)
          goto LABEL_29;
      }
    }
  }
  v10 = a1 + 1;
LABEL_29:
  v20 = (char *)operator new(0xA0uLL);
  v21 = v20 + 32;
  if (*(char *)(a3 + 23) < 0)
  {
    sub_1C987D148(v21, *(void **)a3, *(_QWORD *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)v21 = *(_OWORD *)a3;
    *((_QWORD *)v20 + 6) = *(_QWORD *)(a3 + 16);
  }
  __asm { FMOV            V0.2S, #1.0 }
  *((_QWORD *)v20 + 7) = _D0;
  *((_DWORD *)v20 + 16) = 1065353216;
  *(_QWORD *)(v20 + 68) = 0;
  *(_QWORD *)(v20 + 76) = 0x4270000000000000;
  *(_OWORD *)(v20 + 88) = 0u;
  *(_OWORD *)(v20 + 104) = 0u;
  *(_OWORD *)(v20 + 120) = 0u;
  *(_OWORD *)(v20 + 136) = 0u;
  *((_QWORD *)v20 + 19) = 0;
  *(_QWORD *)v20 = 0;
  *((_QWORD *)v20 + 1) = 0;
  *((_QWORD *)v20 + 2) = v10;
  *v6 = (uint64_t *)v20;
  v27 = (uint64_t *)**a1;
  v28 = (uint64_t *)v20;
  if (v27)
  {
    *a1 = v27;
    v28 = *v6;
  }
  sub_1C9880828(a1[1], v28);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return (uint64_t **)v20;
}

uint64_t sub_1C99148D8(uint64_t a1)
{
  if ((*(char *)(a1 + 103) & 0x80000000) == 0)
  {
    if ((*(char *)(a1 + 79) & 0x80000000) == 0)
      goto LABEL_3;
LABEL_6:
    operator delete(*(void **)(a1 + 56));
    if ((*(char *)(a1 + 55) & 0x80000000) == 0)
      return a1;
LABEL_7:
    operator delete(*(void **)(a1 + 32));
    return a1;
  }
  operator delete(*(void **)(a1 + 80));
  if (*(char *)(a1 + 79) < 0)
    goto LABEL_6;
LABEL_3:
  if (*(char *)(a1 + 55) < 0)
    goto LABEL_7;
  return a1;
}

_BYTE *sub_1C991493C(_QWORD *a1, uint64_t a2)
{
  char *v4;
  _BYTE *result;

  v4 = (char *)operator new(0x78uLL);
  *((_QWORD *)v4 + 1) = 0;
  *((_QWORD *)v4 + 2) = 0;
  *(_QWORD *)v4 = &off_1E8295C60;
  *(_OWORD *)(v4 + 24) = 0u;
  result = v4 + 72;
  *(_OWORD *)(v4 + 40) = 0u;
  *(_OWORD *)(v4 + 56) = 0u;
  if (*(char *)(a2 + 23) < 0)
  {
    result = sub_1C987D148(result, *(void **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)result = *(_OWORD *)a2;
    *((_QWORD *)v4 + 11) = *(_QWORD *)(a2 + 16);
  }
  *((_QWORD *)v4 + 12) = 0;
  *((_QWORD *)v4 + 13) = 0;
  *((_QWORD *)v4 + 14) = 0;
  *a1 = v4 + 24;
  a1[1] = v4;
  return result;
}

BOOL sub_1C99149C8(uint64_t a1, uint64_t *a2)
{
  _BOOL8 result;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  BOOL v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;

  result = 0;
  v14 = 0;
  v4 = *(_QWORD *)(a1 + 8);
  if (*(_DWORD *)(v4 + 8) != 2)
  {
    v6 = (*(uint64_t (**)(_QWORD, unsigned int *, uint64_t))(*(_QWORD *)v4 + 144))(*(_QWORD *)(a1 + 8), &v14, 4);
    if (v6 >= 1 && (*(_QWORD *)(v4 + 16) += v6, v6 == 4))
    {
      v7 = v14;
      v8 = *a2;
      v9 = (a2[1] - *a2) >> 2;
      v10 = v14 >= v9;
      v11 = v14 - v9;
      if (v11 != 0 && v10)
      {
        sub_1C990E910((uint64_t)a2, v11);
        v8 = *a2;
      }
      else if (!v10)
      {
        a2[1] = v8 + 4 * v14;
      }
      v12 = *(_QWORD *)(a1 + 8);
      if (*(_DWORD *)(v12 + 8) == 2)
      {
        v13 = -1;
      }
      else
      {
        v13 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v12 + 144))(v12, v8, 4 * v7);
        if (v13 >= 1)
          *(_QWORD *)(v12 + 16) += v13;
      }
      return v13 == 4 * v7;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

void sub_1C9914AD0(uint64_t a1, __int128 *a2)
{
  unint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  BOOL v14;
  unint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  __int128 v19;
  unint64_t *v20;
  unint64_t v21;
  char *v22;
  __int128 v23;
  _QWORD *v24;
  std::__shared_weak_count *v25;
  unint64_t *p_shared_owners;
  unint64_t v27;

  v5 = *(_QWORD **)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  if ((unint64_t)v5 >= v4)
  {
    v10 = *(_QWORD **)a1;
    v11 = ((uint64_t)v5 - *(_QWORD *)a1) >> 4;
    v12 = v11 + 1;
    if ((unint64_t)(v11 + 1) >> 60)
      abort();
    v13 = v4 - (_QWORD)v10;
    if (v13 >> 3 > v12)
      v12 = v13 >> 3;
    v14 = (unint64_t)v13 >= 0x7FFFFFFFFFFFFFF0;
    v15 = 0xFFFFFFFFFFFFFFFLL;
    if (!v14)
      v15 = v12;
    if (v15 >> 60)
      sub_1C9899D30();
    v16 = 16 * v15;
    v17 = (char *)operator new(16 * v15);
    v18 = &v17[16 * v11];
    v19 = *a2;
    *(_OWORD *)v18 = *a2;
    if (*((_QWORD *)&v19 + 1))
    {
      v20 = (unint64_t *)(*((_QWORD *)&v19 + 1) + 8);
      do
        v21 = __ldxr(v20);
      while (__stxr(v21 + 1, v20));
      v10 = *(_QWORD **)a1;
      v5 = *(_QWORD **)(a1 + 8);
    }
    v22 = &v17[v16];
    v9 = v18 + 16;
    if (v5 == v10)
    {
      *(_QWORD *)a1 = v18;
      *(_QWORD *)(a1 + 8) = v9;
      *(_QWORD *)(a1 + 16) = v22;
    }
    else
    {
      do
      {
        v23 = *((_OWORD *)v5 - 1);
        v5 -= 2;
        *((_OWORD *)v18 - 1) = v23;
        v18 -= 16;
        *v5 = 0;
        v5[1] = 0;
      }
      while (v5 != v10);
      v10 = *(_QWORD **)a1;
      v24 = *(_QWORD **)(a1 + 8);
      *(_QWORD *)a1 = v18;
      *(_QWORD *)(a1 + 8) = v9;
      *(_QWORD *)(a1 + 16) = v22;
      while (v24 != v10)
      {
        v25 = (std::__shared_weak_count *)*(v24 - 1);
        if (v25)
        {
          p_shared_owners = (unint64_t *)&v25->__shared_owners_;
          do
            v27 = __ldaxr(p_shared_owners);
          while (__stlxr(v27 - 1, p_shared_owners));
          if (!v27)
          {
            ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
            std::__shared_weak_count::__release_weak(v25);
          }
        }
        v24 -= 2;
      }
    }
    if (v10)
      operator delete(v10);
  }
  else
  {
    v6 = *((_QWORD *)a2 + 1);
    *v5 = *(_QWORD *)a2;
    v5[1] = v6;
    if (v6)
    {
      v7 = (unint64_t *)(v6 + 8);
      do
        v8 = __ldxr(v7);
      while (__stxr(v8 + 1, v7));
    }
    v9 = v5 + 2;
  }
  *(_QWORD *)(a1 + 8) = v9;
}

uint64_t *sub_1C9914C48(uint64_t **a1, const void **a2, uint64_t a3)
{
  uint64_t *v5;
  uint64_t **v6;
  int v7;
  const void *v8;
  const void *v9;
  uint64_t **v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  int v14;
  _QWORD *v15;
  const void *v16;
  size_t v17;
  int v18;
  uint64_t *result;
  _OWORD *v20;
  uint64_t *v21;
  uint64_t *v22;

  v6 = a1 + 1;
  v5 = a1[1];
  if (!v5)
  {
    v10 = a1 + 1;
    goto LABEL_29;
  }
  v7 = *((char *)a2 + 23);
  if (v7 >= 0)
    v8 = a2;
  else
    v8 = *a2;
  if (v7 >= 0)
    v9 = (const void *)*((unsigned __int8 *)a2 + 23);
  else
    v9 = a2[1];
  do
  {
    while (1)
    {
      v10 = (uint64_t **)v5;
      v13 = v5[4];
      v11 = v5 + 4;
      v12 = (_QWORD *)v13;
      v14 = *((char *)v11 + 23);
      v15 = v14 >= 0 ? v11 : v12;
      v16 = v14 >= 0 ? (const void *)*((unsigned __int8 *)v11 + 23) : (const void *)v11[1];
      v17 = (size_t)(v16 >= v9 ? v9 : v16);
      v18 = memcmp(v8, v15, v17);
      if (v18)
        break;
      if (v9 >= v16)
        goto LABEL_22;
LABEL_8:
      v5 = *v10;
      v6 = v10;
      if (!*v10)
        goto LABEL_29;
    }
    if (v18 < 0)
      goto LABEL_8;
LABEL_22:
    result = (uint64_t *)memcmp(v15, v8, v17);
    if ((_DWORD)result)
    {
      if ((result & 0x80000000) == 0)
        return result;
    }
    else if (v16 >= v9)
    {
      return result;
    }
    v5 = v10[1];
  }
  while (v5);
  v6 = v10 + 1;
LABEL_29:
  v20 = operator new(0x50uLL);
  v20[2] = *(_OWORD *)a3;
  *((_QWORD *)v20 + 6) = *(_QWORD *)(a3 + 16);
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_OWORD *)((char *)v20 + 56) = *(_OWORD *)(a3 + 24);
  *((_QWORD *)v20 + 9) = *(_QWORD *)(a3 + 40);
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 32) = 0;
  *(_QWORD *)(a3 + 40) = 0;
  *(_QWORD *)v20 = 0;
  *((_QWORD *)v20 + 1) = 0;
  *((_QWORD *)v20 + 2) = v10;
  *v6 = (uint64_t *)v20;
  v21 = (uint64_t *)**a1;
  if (v21)
  {
    *a1 = v21;
    v22 = *v6;
  }
  else
  {
    v22 = (uint64_t *)v20;
  }
  result = sub_1C9880828(a1[1], v22);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return result;
}

uint64_t sub_1C9914DA8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = *(_QWORD *)(a1 + 24);
  if (v2)
  {
    v3 = *(_QWORD *)(a1 + 32);
    v4 = *(void **)(a1 + 24);
    if (v3 != v2)
    {
      do
      {
        v5 = *(std::__shared_weak_count **)(v3 - 8);
        if (v5)
        {
          p_shared_owners = (unint64_t *)&v5->__shared_owners_;
          do
            v7 = __ldaxr(p_shared_owners);
          while (__stlxr(v7 - 1, p_shared_owners));
          if (!v7)
          {
            ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
            std::__shared_weak_count::__release_weak(v5);
          }
        }
        v3 -= 16;
      }
      while (v3 != v2);
      v4 = *(void **)(a1 + 24);
    }
    *(_QWORD *)(a1 + 32) = v2;
    operator delete(v4);
  }
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

char *sub_1C9914E50(char *__dst, __int128 *a2, __int128 *a3)
{
  __int128 v5;
  _BYTE *v6;
  __int128 v7;

  if (*((char *)a2 + 23) < 0)
  {
    sub_1C987D148(__dst, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v5 = *a2;
    *((_QWORD *)__dst + 2) = *((_QWORD *)a2 + 2);
    *(_OWORD *)__dst = v5;
  }
  v6 = __dst + 24;
  if (*((char *)a3 + 23) < 0)
  {
    sub_1C987D148(v6, *(void **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v7 = *a3;
    *((_QWORD *)__dst + 5) = *((_QWORD *)a3 + 2);
    *(_OWORD *)v6 = v7;
  }
  return __dst;
}

uint64_t sub_1C9914EC8(uint64_t a1)
{
  if (*(char *)(a1 + 47) < 0)
  {
    operator delete(*(void **)(a1 + 24));
    if ((*(char *)(a1 + 23) & 0x80000000) == 0)
      return a1;
LABEL_5:
    operator delete(*(void **)a1);
    return a1;
  }
  if (*(char *)(a1 + 23) < 0)
    goto LABEL_5;
  return a1;
}

void sub_1C9914F14(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E8295C60;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1C9914F24(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E8295C60;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1CAA44AFCLL);
}

void sub_1C9914F54(uint64_t a1)
{
  void *v2;
  void *v3;

  if (*(char *)(a1 + 119) < 0)
  {
    operator delete(*(void **)(a1 + 96));
    if ((*(char *)(a1 + 95) & 0x80000000) == 0)
    {
LABEL_3:
      v2 = *(void **)(a1 + 48);
      if (!v2)
        goto LABEL_5;
      goto LABEL_4;
    }
  }
  else if ((*(char *)(a1 + 95) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(a1 + 72));
  v2 = *(void **)(a1 + 48);
  if (v2)
  {
LABEL_4:
    *(_QWORD *)(a1 + 56) = v2;
    operator delete(v2);
  }
LABEL_5:
  v3 = *(void **)(a1 + 24);
  if (v3)
  {
    *(_QWORD *)(a1 + 32) = v3;
    operator delete(v3);
  }
}

char *sub_1C9914FD0(char **a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v5;
  BOOL v6;
  unint64_t v7;
  uint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  __int128 v16;
  char *v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;

  v2 = (a1[1] - *a1) >> 4;
  v3 = v2 + 1;
  if ((unint64_t)(v2 + 1) >> 60)
    abort();
  v5 = a1[2] - *a1;
  if (v5 >> 3 > v3)
    v3 = v5 >> 3;
  v6 = (unint64_t)v5 >= 0x7FFFFFFFFFFFFFF0;
  v7 = 0xFFFFFFFFFFFFFFFLL;
  if (!v6)
    v7 = v3;
  if (v7 >> 60)
    sub_1C9899D30();
  v9 = 16 * v7;
  v10 = (char *)operator new(16 * v7);
  v11 = &v10[16 * v2];
  *(_OWORD *)v11 = *(_OWORD *)a2;
  v12 = v11 + 16;
  v13 = &v10[v9];
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v14 = *a1;
  v15 = a1[1];
  if (v15 == *a1)
  {
    *a1 = v11;
    a1[1] = v12;
    a1[2] = v13;
  }
  else
  {
    do
    {
      v16 = *((_OWORD *)v15 - 1);
      v15 -= 16;
      *((_OWORD *)v11 - 1) = v16;
      v11 -= 16;
      *(_QWORD *)v15 = 0;
      *((_QWORD *)v15 + 1) = 0;
    }
    while (v15 != v14);
    v15 = *a1;
    v17 = a1[1];
    *a1 = v11;
    a1[1] = v12;
    a1[2] = v13;
    while (v17 != v15)
    {
      v18 = (std::__shared_weak_count *)*((_QWORD *)v17 - 1);
      if (v18)
      {
        p_shared_owners = (unint64_t *)&v18->__shared_owners_;
        do
          v20 = __ldaxr(p_shared_owners);
        while (__stlxr(v20 - 1, p_shared_owners));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      v17 -= 16;
    }
  }
  if (v15)
    operator delete(v15);
  return v12;
}

BOOL sub_1C99150F8(uint64_t a1)
{
  uint64_t v1;

  v1 = *(unsigned __int8 *)(a1 + 23);
  if ((v1 & 0x80u) != 0)
    v1 = *(_QWORD *)(a1 + 8);
  return v1 == 0;
}

void sub_1C9915118(uint64_t a1, int a2)
{
  unint64_t v4;
  char *v5;
  char *v6;
  _DWORD *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _BYTE *v14;
  _DWORD *v15;
  char *v16;
  unint64_t v17;
  uint64_t v18;
  _OWORD *v19;
  char *v20;
  uint64_t v21;
  __int128 v22;
  int v23;

  v5 = *(char **)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  v6 = v5;
  if ((unint64_t)v5 >= v4)
  {
    v8 = *(char **)a1;
    v9 = (uint64_t)&v5[-*(_QWORD *)a1];
    v10 = v9 >> 2;
    v11 = (v9 >> 2) + 1;
    if (v11 >> 62)
      abort();
    v12 = v4 - (_QWORD)v8;
    if (v12 >> 1 > v11)
      v11 = v12 >> 1;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFFCLL)
      v13 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v13 = v11;
    if (v13)
    {
      if (v13 >> 62)
        sub_1C9899D30();
      v14 = operator new(4 * v13);
    }
    else
    {
      v14 = 0;
    }
    v15 = &v14[4 * v10];
    v16 = &v14[4 * v13];
    *v15 = a2;
    v7 = v15 + 1;
    if (v5 != v8)
    {
      v17 = v5 - v8 - 4;
      if (v17 < 0x2C)
        goto LABEL_27;
      if ((unint64_t)(v5 - v14 - v9) < 0x20)
        goto LABEL_27;
      v18 = (v17 >> 2) + 1;
      v6 = &v5[-4 * (v18 & 0x7FFFFFFFFFFFFFF8)];
      v19 = &v14[4 * v10 - 16];
      v20 = v5 - 16;
      v21 = v18 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v22 = *(_OWORD *)v20;
        *(v19 - 1) = *((_OWORD *)v20 - 1);
        *v19 = v22;
        v19 -= 2;
        v20 -= 32;
        v21 -= 8;
      }
      while (v21);
      v15 -= v18 & 0x7FFFFFFFFFFFFFF8;
      if (v18 != (v18 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_27:
        do
        {
          v23 = *((_DWORD *)v6 - 1);
          v6 -= 4;
          *--v15 = v23;
        }
        while (v6 != v8);
      }
    }
    *(_QWORD *)a1 = v15;
    *(_QWORD *)(a1 + 8) = v7;
    *(_QWORD *)(a1 + 16) = v16;
    if (v8)
      operator delete(v8);
  }
  else
  {
    *(_DWORD *)v5 = a2;
    v7 = v5 + 4;
  }
  *(_QWORD *)(a1 + 8) = v7;
}

void sub_1C9915270(char **a1, _OWORD *a2)
{
  unint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;

  v5 = a1[1];
  v4 = (unint64_t)a1[2];
  if ((unint64_t)v5 >= v4)
  {
    v7 = *a1;
    v8 = (v5 - *a1) >> 4;
    v9 = v8 + 1;
    if ((unint64_t)(v8 + 1) >> 60)
      abort();
    v10 = v4 - (_QWORD)v7;
    if (v10 >> 3 > v9)
      v9 = v10 >> 3;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF0)
      v11 = 0xFFFFFFFFFFFFFFFLL;
    else
      v11 = v9;
    if (v11)
    {
      if (v11 >> 60)
        sub_1C9899D30();
      v12 = (char *)operator new(16 * v11);
    }
    else
    {
      v12 = 0;
    }
    v13 = &v12[16 * v8];
    *(_OWORD *)v13 = *a2;
    v6 = v13 + 16;
    if (v5 != v7)
    {
      do
      {
        *((_OWORD *)v13 - 1) = *((_OWORD *)v5 - 1);
        v13 -= 16;
        v5 -= 16;
      }
      while (v5 != v7);
      v5 = *a1;
    }
    *a1 = v13;
    a1[1] = v6;
    a1[2] = &v12[16 * v11];
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_OWORD *)v5 = *a2;
    v6 = v5 + 16;
  }
  a1[1] = v6;
}

void sub_1C991536C(char **a1, uint64_t *a2)
{
  unint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  char *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  int v16;

  v5 = a1[1];
  v4 = (unint64_t)a1[2];
  if ((unint64_t)v5 >= v4)
  {
    v8 = *a1;
    v9 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 2);
    v10 = v9 + 1;
    if (v9 + 1 > 0x1555555555555555)
      abort();
    v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v4 - (_QWORD)v8) >> 2);
    if (2 * v11 > v10)
      v10 = 2 * v11;
    if (v11 >= 0xAAAAAAAAAAAAAAALL)
      v12 = 0x1555555555555555;
    else
      v12 = v10;
    if (v12)
    {
      if (v12 > 0x1555555555555555)
        sub_1C9899D30();
      v13 = (char *)operator new(12 * v12);
    }
    else
    {
      v13 = 0;
    }
    v14 = &v13[12 * v9];
    *(_QWORD *)v14 = *a2;
    *((_DWORD *)v14 + 2) = *((_DWORD *)a2 + 2);
    v7 = v14 + 12;
    if (v5 != v8)
    {
      do
      {
        v15 = *(_QWORD *)(v5 - 12);
        v5 -= 12;
        v16 = *((_DWORD *)v5 + 2);
        *(_QWORD *)(v14 - 12) = v15;
        v14 -= 12;
        *((_DWORD *)v14 + 2) = v16;
      }
      while (v5 != v8);
      v5 = *a1;
    }
    *a1 = v14;
    a1[1] = v7;
    a1[2] = &v13[12 * v12];
    if (v5)
      operator delete(v5);
  }
  else
  {
    v6 = *a2;
    *((_DWORD *)v5 + 2) = *((_DWORD *)a2 + 2);
    *(_QWORD *)v5 = v6;
    v7 = v5 + 12;
  }
  a1[1] = v7;
}

uint64_t sub_1C9915498(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = &off_1E8294DE0;
  if (*(_BYTE *)(a1 + 16))
  {
    v2 = *(_QWORD *)(a1 + 8);
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
    *(_QWORD *)(a1 + 8) = 0;
  }
  return a1;
}

void sub_1C99154E4(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = &off_1E8294DE0;
  if (*(_BYTE *)(a1 + 16))
  {
    v2 = *(_QWORD *)(a1 + 8);
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
    *(_QWORD *)(a1 + 8) = 0;
  }
  JUMPOUT(0x1CAA44AFCLL);
}

uint64_t *sub_1C9915540(uint64_t *a1, _QWORD *a2)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  size_t v8;
  void *v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  unint64_t v14;
  char *v15;
  uint64_t v16;
  _OWORD *v17;
  __int128 *v18;
  uint64_t v19;
  __int128 v20;
  char *v21;
  unint64_t v22;
  char *v23;
  uint64_t v24;
  _OWORD *v25;
  __int128 *v26;
  uint64_t v27;
  __int128 v28;
  char *v29;
  int v30;
  int v31;
  void *v32;
  uint64_t v33;
  int v34;
  char *v35;
  int *v36;
  uint64_t v37;
  size_t v38;
  char *v39;
  unint64_t v40;
  char *v41;
  char *v42;
  unint64_t v43;
  char *v44;
  unint64_t v45;
  uint64_t v46;
  __int128 *v47;
  _OWORD *v48;
  uint64_t v49;
  __int128 v50;
  char *v51;
  int v52;
  unint64_t v53;
  uint64_t v54;
  __int128 *v55;
  _OWORD *v56;
  uint64_t v57;
  __int128 v58;
  int v59;
  void *v60;
  _OWORD *v61;
  uint64_t v62;
  uint64_t v63;
  void *memptr;

  *a1 = *a2;
  v4 = a2[1];
  a1[1] = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = *(unsigned int *)(*a2 + 92);
  v8 = (4 * v7 + 31) & 0x7FFFFFFE0;
  a1[2] = 0;
  a1[3] = v8 >> 2;
  memptr = 0;
  malloc_type_posix_memalign(&memptr, 0x20uLL, v8, 0x49090899uLL);
  v9 = memptr;
  a1[2] = (uint64_t)memptr;
  *((_DWORD *)a1 + 8) = v7;
  if ((_DWORD)v7)
    bzero(v9, 4 * v7);
  v10 = *(unsigned int *)(*a2 + 40);
  v11 = *(char **)(*a2 + 24);
  v12 = (4 * v10 + 31) & 0x7FFFFFFE0;
  a1[5] = 0;
  a1[6] = v12 >> 2;
  memptr = 0;
  malloc_type_posix_memalign(&memptr, 0x20uLL, v12, 0x49090899uLL);
  v13 = (char *)memptr;
  a1[5] = (uint64_t)memptr;
  *((_DWORD *)a1 + 14) = v10;
  if (v11 == v13)
  {
    memptr = 0;
    malloc_type_posix_memalign(&memptr, 0x20uLL, v12, 0x49090899uLL);
    v21 = (char *)memptr;
    if ((_DWORD)v10)
    {
      v22 = (v10 - 1) & 0x3FFFFFFFFFFFFFFFLL;
      if (v22 < 7)
      {
        v23 = (char *)memptr;
      }
      else
      {
        v23 = (char *)memptr;
        if ((unint64_t)((_BYTE *)memptr - v11) >= 0x20)
        {
          v24 = (v22 + 1) & 0x7FFFFFFFFFFFFFF8;
          v25 = (char *)memptr + 16;
          v26 = (__int128 *)(v11 + 16);
          v27 = v24;
          do
          {
            v28 = *v26;
            *(v25 - 1) = *(v26 - 1);
            *v25 = v28;
            v25 += 2;
            v26 += 2;
            v27 -= 8;
          }
          while (v27);
          if (v22 + 1 == v24)
            goto LABEL_27;
          v23 = &v21[4 * v24];
          v11 += 4 * v24;
        }
      }
      do
      {
        v31 = *(_DWORD *)v11;
        v11 += 4;
        *(_DWORD *)v23 = v31;
        v23 += 4;
      }
      while (v23 != &v21[4 * v10]);
    }
LABEL_27:
    v32 = (void *)a1[5];
    a1[5] = (uint64_t)v21;
    a1[6] = v12 >> 2;
    *((_DWORD *)a1 + 14) = v10;
    free(v32);
    goto LABEL_28;
  }
  if (!(_DWORD)v10)
    goto LABEL_28;
  v14 = (v10 - 1) & 0x3FFFFFFFFFFFFFFFLL;
  if (v14 < 7)
  {
    v15 = v13;
LABEL_22:
    v29 = &v13[4 * v10];
    do
    {
      v30 = *(_DWORD *)v11;
      v11 += 4;
      *(_DWORD *)v15 = v30;
      v15 += 4;
    }
    while (v15 != v29);
    goto LABEL_28;
  }
  v15 = v13;
  if ((unint64_t)(v13 - v11) < 0x20)
    goto LABEL_22;
  v16 = (v14 + 1) & 0x7FFFFFFFFFFFFFF8;
  v17 = v13 + 16;
  v18 = (__int128 *)(v11 + 16);
  v19 = v16;
  do
  {
    v20 = *v18;
    *(v17 - 1) = *(v18 - 1);
    *v17 = v20;
    v17 += 2;
    v18 += 2;
    v19 -= 8;
  }
  while (v19);
  if (v14 + 1 != v16)
  {
    v15 = &v13[4 * v16];
    v11 += 4 * v16;
    goto LABEL_22;
  }
LABEL_28:
  v33 = *(unsigned int *)(*a2 + 40);
  v34 = *(_DWORD *)(*a2 + 44) - 1;
  v35 = *(char **)(*a2 + 24);
  v36 = (int *)&v35[4 * v33];
  v37 = (v34 * v33);
  v38 = (4 * v37 + 31) & 0x7FFFFFFE0;
  a1[8] = 0;
  a1[9] = v38 >> 2;
  memptr = 0;
  malloc_type_posix_memalign(&memptr, 0x20uLL, v38, 0x49090899uLL);
  v39 = (char *)memptr;
  a1[8] = (uint64_t)memptr;
  *((_DWORD *)a1 + 20) = v33;
  *((_DWORD *)a1 + 21) = v34;
  if (v35 == v39)
  {
    memptr = 0;
    malloc_type_posix_memalign(&memptr, 0x20uLL, v38, 0x49090899uLL);
    v42 = (char *)memptr;
    if ((_DWORD)v37)
    {
      v43 = (v37 - 1) & 0x3FFFFFFFFFFFFFFFLL;
      if (v43 >= 7)
      {
        v44 = (char *)memptr;
        if ((unint64_t)((_BYTE *)memptr - v35 - 4 * v33) >= 0x20)
        {
          v53 = v43 + 1;
          v54 = 4 * (v53 & 0x7FFFFFFFFFFFFFF8);
          v44 = (char *)memptr + v54;
          v55 = (__int128 *)&v35[4 * v33 + 16];
          v56 = (char *)memptr + 16;
          v57 = v53 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v58 = *v55;
            *(v56 - 1) = *(v55 - 1);
            *v56 = v58;
            v55 += 2;
            v56 += 2;
            v57 -= 8;
          }
          while (v57);
          if (v53 == (v53 & 0x7FFFFFFFFFFFFFF8))
            goto LABEL_49;
          v36 = (int *)((char *)v36 + v54);
        }
      }
      else
      {
        v44 = (char *)memptr;
      }
      do
      {
        v59 = *v36++;
        *(_DWORD *)v44 = v59;
        v44 += 4;
      }
      while (v44 != &v42[4 * v37]);
    }
LABEL_49:
    v60 = (void *)a1[8];
    a1[8] = (uint64_t)v42;
    a1[9] = v38 >> 2;
    *((_DWORD *)a1 + 20) = v33;
    *((_DWORD *)a1 + 21) = v34;
    free(v60);
    goto LABEL_50;
  }
  if (!(_DWORD)v37)
    goto LABEL_50;
  v40 = (v37 - 1) & 0x3FFFFFFFFFFFFFFFLL;
  if (v40 < 7)
  {
    v41 = v39;
    goto LABEL_40;
  }
  v41 = v39;
  if ((unint64_t)(v39 - v35 - 4 * v33) < 0x20)
  {
LABEL_40:
    v51 = &v39[4 * v37];
    do
    {
      v52 = *v36++;
      *(_DWORD *)v41 = v52;
      v41 += 4;
    }
    while (v41 != v51);
    goto LABEL_50;
  }
  v45 = v40 + 1;
  v46 = 4 * (v45 & 0x7FFFFFFFFFFFFFF8);
  v41 = &v39[v46];
  v47 = (__int128 *)&v35[4 * v33 + 16];
  v48 = v39 + 16;
  v49 = v45 & 0x7FFFFFFFFFFFFFF8;
  do
  {
    v50 = *v47;
    *(v48 - 1) = *(v47 - 1);
    *v48 = v50;
    v47 += 2;
    v48 += 2;
    v49 -= 8;
  }
  while (v49);
  if (v45 != (v45 & 0x7FFFFFFFFFFFFFF8))
  {
    v36 = (int *)((char *)v36 + v46);
    goto LABEL_40;
  }
LABEL_50:
  *((_BYTE *)a1 + 88) = 0;
  v61 = a1 + 11;
  *((_BYTE *)a1 + 136) = 0;
  v62 = *a1;
  if (*(_BYTE *)(*a1 + 240))
  {
    *(_OWORD *)(a1 + 13) = 0u;
    *(_OWORD *)(a1 + 15) = 0u;
    *v61 = 0u;
    *((_BYTE *)a1 + 136) = 1;
    v63 = *(unsigned int *)(v62 + 184);
    if ((_DWORD)v63)
      memmove(v61, *(const void **)(v62 + 168), 4 * v63);
  }
  return a1;
}

void sub_1C991596C(uint64_t *a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  unint64_t v5;
  void *v6;
  size_t v7;
  size_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  size_t v12;
  size_t v13;
  int *v14;
  void **v15;
  int v16;
  uint64_t v17;
  unint64_t v18;
  int *v19;
  size_t v20;
  size_t v21;
  char *v22;
  unint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  __int128 v29;
  unint64_t v30;
  int *v31;
  uint64_t v32;
  _OWORD *v33;
  __int128 *v34;
  uint64_t v35;
  __int128 v36;
  unint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  __int128 v43;
  int v44;
  unint64_t v45;
  int *v46;
  char *v47;
  uint64_t v48;
  _OWORD *v49;
  __int128 *v50;
  uint64_t v51;
  __int128 v52;
  int v53;
  int v54;
  void *v55;
  char *v56;
  unsigned int v57;
  BOOL v58;
  size_t v59;
  uint64_t v60;
  void *v61;
  unint64_t v62;
  unint64_t v63;
  float *v64;
  float *v65;
  uint64_t v66;
  float32x4_t *v67;
  float32x4_t *v68;
  uint64_t v69;
  float32x4_t v70;
  float *v71;
  float v72;
  void **v73;
  uint64_t v74;
  unsigned int v75;
  unint64_t v76;
  size_t v77;
  uint64_t v78;
  int v79;
  int v80;
  uint64_t *v81;
  uint64_t v82;
  int v83;
  int v84;
  uint64_t v85;
  uint64_t v86;
  int v87;
  uint64_t v88;
  int *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  _DWORD *v95;
  char *v96;
  unint64_t v97;
  unint64_t v98;
  char *v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  _OWORD *v103;
  __int128 *v104;
  uint64_t v105;
  __int128 v106;
  int v107;
  uint64_t v108;
  _OWORD *v109;
  __int128 *v110;
  uint64_t v111;
  __int128 v112;
  int v113;
  char *v114;
  _DWORD *v115;
  uint64_t v116;
  _OWORD *v117;
  __int128 *v118;
  uint64_t v119;
  __int128 v120;
  int v121;
  uint64_t v122;
  float *v123;
  uint64_t v124;
  unsigned int v125;
  uint64_t v126;
  float *v127;
  size_t v128;
  float *v129;
  void *v130;
  float *v131;
  float32x4_t v132;
  float v133;
  int v134;
  uint64_t *v135;
  int v136;
  uint64_t *v137;
  char *v138;
  uint64_t *v139;
  int v140;
  uint64_t v141;
  uint64_t v142;
  int v143;
  void *v144[2];
  int v145;
  int v146;
  int v147;
  char *v148;
  int v149;
  int v150;
  void *v151;
  uint64_t v152;
  int v153;
  unsigned int v154;
  char *v155;
  size_t v156;
  uint64_t v157;
  unint64_t v158;
  size_t v159;
  uint64_t v160;
  void *memptr;
  void **v162;
  int *v163;
  int v164;
  uint64_t v165;

  v2 = a1;
  v165 = *MEMORY[0x1E0C80C00];
  v3 = a1 + 2;
  if (a1 + 2 == (uint64_t *)a2)
  {
    v9 = *((_DWORD *)a1 + 8);
  }
  else
  {
    v5 = *(unsigned int *)(a2 + 16);
    if ((_DWORD)v5)
    {
      v6 = (void *)a1[2];
      v7 = 4 * v5;
      if (v2[3] < v5)
      {
        free(v6);
        v8 = (v7 + 31) & 0x7FFFFFFE0;
        v2[2] = 0;
        v2[3] = v8 >> 2;
        memptr = 0;
        malloc_type_posix_memalign(&memptr, 0x20uLL, v8, 0x49090899uLL);
        v6 = memptr;
        v2[2] = (uint64_t)memptr;
      }
      memcpy(v6, *(const void **)a2, v7);
    }
    else
    {
      free((void *)*v3);
      *v3 = 0;
      v3[1] = 0;
    }
    v9 = *(_DWORD *)(a2 + 16);
    *((_DWORD *)v2 + 8) = v9;
  }
  v10 = *v2;
  v11 = *(unsigned int *)(*v2 + 88);
  v12 = *(_QWORD *)(*v2 + 72);
  v158 = __PAIR64__(v9, v11);
  v159 = v12;
  v160 = v11;
  v13 = (4 * v11 + 31) & 0x7FFFFFFE0;
  v156 = v13 >> 2;
  memptr = 0;
  malloc_type_posix_memalign(&memptr, 0x20uLL, v13, 0x49090899uLL);
  v155 = (char *)memptr;
  LODWORD(v157) = v11;
  v162 = (void **)&v158;
  v163 = (int *)v3;
  v135 = v3;
  v164 = 1065353216;
  sub_1C98E9BA0((uint64_t)&v155, (uint64_t)&memptr);
  v15 = (void **)(v2 + 5);
  v14 = (int *)v2[5];
  v16 = **(_DWORD **)(v10 + 96);
  v17 = *(_QWORD *)(v10 + 48);
  LODWORD(v151) = *(_DWORD *)(v10 + 64);
  HIDWORD(v151) = v16;
  v152 = v17;
  v153 = (int)v151;
  v154 = 0;
  v18 = *(unsigned int *)(v10 + 40);
  v142 = v10;
  v19 = *(int **)(v10 + 24);
  if ((_DWORD)v18 != *((_DWORD *)v2 + 14))
  {
    if (v19 != v14)
    {
      *((_DWORD *)v2 + 14) = v18;
      if ((_DWORD)v18)
      {
        if (v2[6] < v18)
        {
          free(v14);
          v20 = (4 * v18 + 31) & 0x7FFFFFFE0;
          v2[5] = 0;
          v2[6] = v20 >> 2;
          memptr = 0;
          malloc_type_posix_memalign(&memptr, 0x20uLL, v20, 0x49090899uLL);
          v14 = (int *)memptr;
          v2[5] = (uint64_t)memptr;
        }
      }
      else
      {
        free(v14);
        v14 = 0;
        *v15 = 0;
        v2[6] = 0;
      }
      LODWORD(v18) = *((_DWORD *)v2 + 14);
      goto LABEL_24;
    }
    v21 = (4 * v18 + 31) & 0x7FFFFFFE0;
    memptr = 0;
    malloc_type_posix_memalign(&memptr, 0x20uLL, v21, 0x49090899uLL);
    v22 = (char *)memptr;
    if (v19 != memptr)
    {
      if ((_DWORD)v18)
      {
        v23 = (v18 - 1) & 0x3FFFFFFFFFFFFFFFLL;
        if (v23 < 7)
        {
          v24 = (char *)memptr;
        }
        else
        {
          v24 = (char *)memptr;
          if ((unint64_t)((_BYTE *)memptr - (_BYTE *)v19) >= 0x20)
          {
            v25 = 0;
            v26 = (v23 + 1) & 0x7FFFFFFFFFFFFFF8;
            v27 = v26;
            do
            {
              v28 = &v22[v25 * 4];
              v29 = *(_OWORD *)&v19[v25 + 4];
              *(_OWORD *)v28 = *(_OWORD *)&v19[v25];
              *((_OWORD *)v28 + 1) = v29;
              v25 += 8;
              v27 -= 8;
            }
            while (v27);
            if (v23 + 1 == v26)
              goto LABEL_53;
            v24 = &v22[4 * v26];
            v19 += v26;
          }
        }
        do
        {
          v134 = *v19++;
          *(_DWORD *)v24 = v134;
          v24 += 4;
        }
        while (v24 != &v22[4 * v18]);
      }
      goto LABEL_53;
    }
    memptr = 0;
    malloc_type_posix_memalign(&memptr, 0x20uLL, v21, 0x49090899uLL);
    v22 = (char *)memptr;
    if ((_DWORD)v18)
    {
      v45 = (v18 - 1) & 0x3FFFFFFFFFFFFFFFLL;
      v46 = v19;
      v47 = (char *)memptr;
      if (v45 >= 7)
      {
        v46 = v19;
        v47 = (char *)memptr;
        if ((unint64_t)((_BYTE *)memptr - (_BYTE *)v19) >= 0x20)
        {
          v48 = (v45 + 1) & 0x7FFFFFFFFFFFFFF8;
          v46 = &v19[v48];
          v49 = (char *)memptr + 16;
          v50 = (__int128 *)(v19 + 4);
          v51 = v48;
          do
          {
            v52 = *v50;
            *(v49 - 1) = *(v50 - 1);
            *v49 = v52;
            v49 += 2;
            v50 += 2;
            v51 -= 8;
          }
          while (v51);
          if (v45 + 1 == v48)
            goto LABEL_50;
          v47 = &v22[4 * v48];
        }
      }
      do
      {
        v53 = *v46++;
        *(_DWORD *)v47 = v53;
        v47 += 4;
      }
      while (v47 != &v22[4 * v18]);
    }
LABEL_50:
    free(v19);
    goto LABEL_53;
  }
LABEL_24:
  if (v19 == v14)
  {
    v21 = (4 * v18 + 31) & 0x7FFFFFFE0;
    memptr = 0;
    malloc_type_posix_memalign(&memptr, 0x20uLL, v21, 0x49090899uLL);
    v22 = (char *)memptr;
    if ((_DWORD)v18)
    {
      v37 = (v18 - 1) & 0x3FFFFFFFFFFFFFFFLL;
      if (v37 < 7)
      {
        v38 = (char *)memptr;
      }
      else
      {
        v38 = (char *)memptr;
        if ((unint64_t)((_BYTE *)memptr - (_BYTE *)v19) >= 0x20)
        {
          v39 = 0;
          v40 = (v37 + 1) & 0x7FFFFFFFFFFFFFF8;
          v41 = v40;
          do
          {
            v42 = &v22[v39 * 4];
            v43 = *(_OWORD *)&v19[v39 + 4];
            *(_OWORD *)v42 = *(_OWORD *)&v19[v39];
            *((_OWORD *)v42 + 1) = v43;
            v39 += 8;
            v41 -= 8;
          }
          while (v41);
          if (v37 + 1 == v40)
            goto LABEL_53;
          v38 = &v22[4 * v40];
          v19 += v40;
        }
      }
      do
      {
        v54 = *v19++;
        *(_DWORD *)v38 = v54;
        v38 += 4;
      }
      while (v38 != &v22[4 * v18]);
    }
LABEL_53:
    v55 = (void *)v2[5];
    v2[5] = (uint64_t)v22;
    v2[6] = v21 >> 2;
    *((_DWORD *)v2 + 14) = v18;
    free(v55);
    goto LABEL_54;
  }
  if (!(_DWORD)v18)
    goto LABEL_54;
  v30 = (v18 - 1) & 0x3FFFFFFFFFFFFFFFLL;
  if (v30 < 7)
  {
    v31 = v14;
    do
    {
LABEL_40:
      v44 = *v19++;
      *v31++ = v44;
    }
    while (v31 != &v14[v18]);
    goto LABEL_54;
  }
  v31 = v14;
  if ((unint64_t)((char *)v14 - (char *)v19) < 0x20)
    goto LABEL_40;
  v32 = (v30 + 1) & 0x7FFFFFFFFFFFFFF8;
  v33 = v14 + 4;
  v34 = (__int128 *)(v19 + 4);
  v35 = v32;
  do
  {
    v36 = *v34;
    *(v33 - 1) = *(v34 - 1);
    *v33 = v36;
    v33 += 2;
    v34 += 2;
    v35 -= 8;
  }
  while (v35);
  if (v30 + 1 != v32)
  {
    v31 = &v14[v32];
    v19 += v32;
    goto LABEL_40;
  }
LABEL_54:
  v56 = v155;
  v147 = v16;
  v148 = v155;
  v140 = v157;
  v149 = v157;
  v150 = 0;
  v162 = &v151;
  v163 = &v147;
  v164 = 1065353216;
  if ((void *)(v152 - 4 * v154) == *v15)
  {
    v57 = v151;
LABEL_62:
    v59 = (4 * v57 + 31) & 0x7FFFFFFE0;
    v159 = v59 >> 2;
    v144[0] = 0;
    malloc_type_posix_memalign(v144, 0x20uLL, v59, 0x49090899uLL);
    v158 = (unint64_t)v144[0];
    LODWORD(v160) = (_DWORD)v151;
    sub_1C98E8388((uint64_t)&v158, (uint64_t)&memptr);
    v60 = *((unsigned int *)v2 + 14);
    v61 = (void *)v158;
    if ((_DWORD)v60)
    {
      v62 = v2[5];
      v63 = (v60 - 1) & 0x3FFFFFFFFFFFFFFFLL;
      if (v63 >= 0xB)
      {
        if (v62 >= v158 + 4 * v60 || (v64 = (float *)v158, v65 = (float *)v2[5], v158 >= v62 + 4 * v60))
        {
          v66 = (v63 + 1) & 0x7FFFFFFFFFFFFFF8;
          v64 = (float *)(v158 + 4 * v66);
          v67 = (float32x4_t *)(v62 + 16);
          v68 = (float32x4_t *)(v158 + 16);
          v69 = v66;
          do
          {
            v70 = vaddq_f32(*v68, *v67);
            v67[-1] = vaddq_f32(v68[-1], v67[-1]);
            *v67 = v70;
            v67 += 2;
            v68 += 2;
            v69 -= 8;
          }
          while (v69);
          if (v63 + 1 == v66)
            goto LABEL_73;
          v65 = (float *)(v62 + 4 * v66);
        }
      }
      else
      {
        v64 = (float *)v158;
        v65 = (float *)v2[5];
      }
      v71 = (float *)(v62 + 4 * v60);
      do
      {
        v72 = *v64++;
        *v65 = v72 + *v65;
        ++v65;
      }
      while (v65 != v71);
    }
LABEL_73:
    free(v61);
    goto LABEL_74;
  }
  v57 = v151;
  if (v155 == *v15)
    goto LABEL_62;
  if (HIDWORD(v151) * (_DWORD)v151)
    v58 = v16 == 0;
  else
    v58 = 1;
  if (!v58)
    cva::VecLib<float>::gemm();
LABEL_74:
  v73 = (void **)(v2 + 8);
  v74 = (*(_DWORD *)(v142 + 44) - 1);
  v75 = 3 * (*(_DWORD *)(v142 + 40) / 3u);
  *((_DWORD *)v2 + 20) = v75;
  *((_DWORD *)v2 + 21) = v74;
  v141 = v74;
  v76 = v75 * v74;
  if ((_DWORD)v76)
  {
    if (v2[9] < v76)
    {
      free((void *)v2[8]);
      v77 = (4 * v76 + 31) & 0x7FFFFFFE0;
      v2[8] = 0;
      v2[9] = v77 >> 2;
      memptr = 0;
      malloc_type_posix_memalign(&memptr, 0x20uLL, v77, 0x49090899uLL);
      v2[8] = (uint64_t)memptr;
    }
  }
  else
  {
    free(*v73);
    *v73 = 0;
    v2[9] = 0;
  }
  if ((int)v141 >= 1)
  {
    v78 = 0;
    v79 = 1;
    v138 = v56;
    v139 = v2;
    v137 = v2 + 8;
    while (1)
    {
      v83 = v78++;
      v84 = *(_DWORD *)(*(_QWORD *)(v142 + 96) + 4 * v78);
      v85 = *(_QWORD *)(v142 + 48);
      LODWORD(v158) = *(_DWORD *)(v142 + 64);
      HIDWORD(v158) = v84;
      v159 = v85 + 4 * (v158 * v16);
      LODWORD(v160) = v158;
      HIDWORD(v160) = v158 * v16;
      v147 = v84;
      v148 = &v56[4 * v16];
      v149 = v140;
      v150 = v16;
      v143 = v16;
      v86 = *(_QWORD *)(v142 + 24);
      v87 = *(_DWORD *)(v142 + 40);
      v88 = (v87 * v78);
      v89 = (int *)(v86 + 4 * v88);
      v90 = *((unsigned int *)v2 + 20);
      v91 = (v90 * v83);
      v92 = v2[8];
      v93 = v92 + 4 * v91;
      if (v86 == v92)
      {
        v136 = v83;
        memptr = 0;
        malloc_type_posix_memalign(&memptr, 0x20uLL, (4 * v90 + 31) & 0x7FFFFFFE0, 0x49090899uLL);
        v96 = (char *)memptr;
        if ((_DWORD)v90)
        {
          v97 = (v90 - 1) & 0x3FFFFFFFFFFFFFFFLL;
          v98 = v97 + 1;
          if (v97 >= 7)
          {
            v99 = (char *)memptr;
            v100 = v92 + 4 * v91;
            if ((char *)memptr - v86 + -4 * v88 < (char *)0x20)
              goto LABEL_101;
            v108 = 4 * (v98 & 0x7FFFFFFFFFFFFFF8);
            v89 = (int *)((char *)v89 + v108);
            v109 = (char *)memptr + 16;
            v110 = (__int128 *)(v86 + 4 * (v87 * v79) + 16);
            v111 = v98 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              v112 = *v110;
              *(v109 - 1) = *(v110 - 1);
              *v109 = v112;
              v109 += 2;
              v110 += 2;
              v111 -= 8;
            }
            while (v111);
            if (v98 != (v98 & 0x7FFFFFFFFFFFFFF8))
            {
              v99 = &v96[v108];
              goto LABEL_101;
            }
          }
          else
          {
            v99 = (char *)memptr;
            v100 = v92 + 4 * v91;
            do
            {
LABEL_101:
              v113 = *v89++;
              *(_DWORD *)v99 = v113;
              v99 += 4;
            }
            while (v99 != &v96[4 * v90]);
          }
          if (v97 >= 0xB)
          {
            v114 = v96;
            v115 = (_DWORD *)v100;
            if ((unint64_t)(v92 + 4 * v91 - (_QWORD)v96) < 0x20)
              goto LABEL_109;
            v116 = 4 * (v98 & 0x7FFFFFFFFFFFFFF8);
            v114 = &v96[v116];
            v117 = (_OWORD *)(v100 + 16);
            v118 = (__int128 *)(v96 + 16);
            v119 = v98 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              v120 = *v118;
              *(v117 - 1) = *(v118 - 1);
              *v117 = v120;
              v117 += 2;
              v118 += 2;
              v119 -= 8;
            }
            while (v119);
            if (v98 != (v98 & 0x7FFFFFFFFFFFFFF8))
            {
              v100 = v92 + 4 * v91;
              v115 = (_DWORD *)(v100 + v116);
              goto LABEL_109;
            }
          }
          else
          {
            v114 = v96;
            v115 = (_DWORD *)v100;
            do
            {
LABEL_109:
              v121 = *(_DWORD *)v114;
              v114 += 4;
              *v115++ = v121;
            }
            while (v115 != (_DWORD *)(v100 + 4 * v90));
          }
        }
        free(v96);
        v56 = v138;
        v2 = v139;
        LODWORD(v90) = *((_DWORD *)v139 + 20);
        v80 = v143;
        v81 = v137;
        v83 = v136;
        goto LABEL_81;
      }
      if ((_DWORD)v90)
        break;
      v56 = v138;
      v2 = v139;
      v80 = v143;
      v81 = v137;
LABEL_81:
      v82 = *v81;
      LODWORD(v144[0]) = v90;
      v144[1] = (void *)(v82 + 4 * (v90 * v83));
      v145 = v90;
      v146 = v90 * v83;
      v162 = (void **)&v158;
      v163 = &v147;
      v164 = 1065353216;
      sub_1C98E81D0((unsigned int *)v144, (uint64_t)&memptr);
      v16 = v84 + v80;
      ++v79;
      if (v78 == v141)
        goto LABEL_111;
    }
    v94 = (v90 - 1) & 0x3FFFFFFFFFFFFFFFLL;
    if (v94 >= 0xF)
    {
      v101 = v92 + 4 * v91 - (v86 + 4 * v88);
      v95 = (_DWORD *)(v92 + 4 * v91);
      v2 = v139;
      v81 = v137;
      if (v101 >= 0x20)
      {
        v102 = (v94 + 1) & 0x7FFFFFFFFFFFFFF8;
        v89 += v102;
        v103 = (_OWORD *)(v93 + 16);
        v104 = (__int128 *)(v86 + 4 * (v87 * v79) + 16);
        v105 = v102;
        do
        {
          v106 = *v104;
          *(v103 - 1) = *(v104 - 1);
          *v103 = v106;
          v103 += 2;
          v104 += 2;
          v105 -= 8;
        }
        while (v105);
        if (v94 + 1 == v102)
          goto LABEL_95;
        v95 = (_DWORD *)(v93 + 4 * v102);
      }
    }
    else
    {
      v95 = (_DWORD *)(v92 + 4 * v91);
      v2 = v139;
      v81 = v137;
    }
    do
    {
      v107 = *v89++;
      *v95++ = v107;
    }
    while (v95 != (_DWORD *)(v93 + 4 * v90));
LABEL_95:
    v80 = v143;
    v56 = v138;
    goto LABEL_81;
  }
LABEL_111:
  free(v56);
  v122 = *v2;
  if (*(_BYTE *)(*v2 + 240))
  {
    v123 = (float *)(v2 + 11);
    v124 = *(unsigned int *)(v122 + 184);
    if ((_DWORD)v124)
      memmove(v2 + 11, *(const void **)(v122 + 168), 4 * v124);
    v125 = *((_DWORD *)v2 + 8);
    v126 = *(unsigned int *)(v122 + 232);
    v127 = *(float **)(v122 + 216);
    v155 = (char *)__PAIR64__(v125, v126);
    v156 = (size_t)v127;
    v157 = v126;
    v162 = (void **)&v155;
    v163 = (int *)v135;
    v164 = 1065353216;
    if (v127 == v123 || (float *)*v135 == v123)
    {
      v128 = (4 * v126 + 31) & 0x7FFFFFFE0;
      v159 = v128 >> 2;
      v151 = 0;
      malloc_type_posix_memalign(&v151, 0x20uLL, v128, 0x49090899uLL);
      v158 = (unint64_t)v151;
      LODWORD(v160) = (_DWORD)v155;
      sub_1C98E9BA0((uint64_t)&v158, (uint64_t)&memptr);
      v129 = (float *)(v2 + 17);
      v130 = (void *)v158;
      if ((unint64_t)v123 >= v158 + 48 || (v131 = (float *)v158, v158 >= (unint64_t)v129))
      {
        v131 = (float *)(v158 + 32);
        v132 = vaddq_f32(*(float32x4_t *)(v158 + 16), *(float32x4_t *)(v2 + 13));
        *(float32x4_t *)(v2 + 11) = vaddq_f32(*(float32x4_t *)v158, *(float32x4_t *)(v2 + 11));
        *(float32x4_t *)(v2 + 13) = v132;
        v123 = (float *)(v2 + 15);
      }
      do
      {
        v133 = *v131++;
        *v123 = v133 + *v123;
        ++v123;
      }
      while (v123 != v129);
      free(v130);
    }
    else if (v125 * (_DWORD)v126)
    {
      if (v125)
        cva::VecLib<float>::gemm();
    }
  }
}

uint64_t *sub_1C99164CC(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 *v13;
  __int128 *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;

  v2 = *result;
  *result = *a2;
  *a2 = v2;
  v3 = result[1];
  result[1] = a2[1];
  a2[1] = v3;
  v4 = result[2];
  v5 = result[3];
  result[2] = 0;
  result[3] = 0;
  v6 = *((_DWORD *)result + 8);
  *((_DWORD *)result + 8) = 0;
  result[2] = a2[2];
  result[3] = a2[3];
  *((_DWORD *)result + 8) = *((_DWORD *)a2 + 8);
  a2[2] = v4;
  a2[3] = v5;
  *((_DWORD *)a2 + 8) = v6;
  v7 = result[5];
  v8 = result[6];
  result[5] = 0;
  result[6] = 0;
  v9 = *((_DWORD *)result + 14);
  *((_DWORD *)result + 14) = 0;
  result[5] = a2[5];
  result[6] = a2[6];
  *((_DWORD *)result + 14) = *((_DWORD *)a2 + 14);
  a2[5] = v7;
  a2[6] = v8;
  *((_DWORD *)a2 + 14) = v9;
  v10 = result[8];
  v11 = result[9];
  v12 = result[10];
  result[8] = 0;
  result[9] = 0;
  result[10] = 0;
  result[8] = a2[8];
  result[9] = a2[9];
  result[10] = a2[10];
  a2[8] = v10;
  a2[9] = v11;
  a2[10] = v12;
  v13 = (__int128 *)(result + 11);
  v14 = (__int128 *)(a2 + 11);
  if ((*((_BYTE *)result + 136) != 0) != (*((_BYTE *)a2 + 136) != 0))
  {
    if (*((_BYTE *)result + 136))
    {
      v15 = *v13;
      v16 = *(_OWORD *)(result + 15);
      *(_OWORD *)(a2 + 13) = *(_OWORD *)(result + 13);
      *(_OWORD *)(a2 + 15) = v16;
      *v14 = v15;
      *((_BYTE *)a2 + 136) = 1;
      if (*((_BYTE *)result + 136))
        *((_BYTE *)result + 136) = 0;
    }
    else
    {
      v22 = *v14;
      v23 = *(_OWORD *)(a2 + 15);
      *(_OWORD *)(result + 13) = *(_OWORD *)(a2 + 13);
      *(_OWORD *)(result + 15) = v23;
      *v13 = v22;
      *((_BYTE *)result + 136) = 1;
      if (*((_BYTE *)a2 + 136))
        *((_BYTE *)a2 + 136) = 0;
    }
  }
  else if (*((_BYTE *)result + 136))
  {
    v17 = *v13;
    v18 = *(_OWORD *)(result + 13);
    v19 = *(_OWORD *)(result + 15);
    v21 = *(_OWORD *)(a2 + 13);
    v20 = *(_OWORD *)(a2 + 15);
    *v13 = *v14;
    *(_OWORD *)(result + 13) = v21;
    *(_OWORD *)(result + 15) = v20;
    *(_OWORD *)(a2 + 13) = v18;
    *(_OWORD *)(a2 + 15) = v19;
    *v14 = v17;
  }
  return result;
}

uint64_t sub_1C9916664(char *__s2, int *a2)
{
  int v5;

  if (!strcmp("failed", __s2))
  {
    v5 = 0;
  }
  else if (!strcmp("only_rigid_success", __s2))
  {
    v5 = 1;
  }
  else
  {
    if (strcmp("success", __s2))
      return 0;
    v5 = 2;
  }
  *a2 = v5;
  return 1;
}

uint64_t sub_1C99166E4(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;

  if (*(unsigned __int8 *)(a1 + 48) == *(unsigned __int8 *)(a2 + 48))
  {
    if (*(_BYTE *)(a1 + 48))
    {
      *(_DWORD *)a1 = *(_DWORD *)a2;
      *(_QWORD *)(a1 + 4) = *(_QWORD *)(a2 + 4);
      *(_QWORD *)(a1 + 12) = *(_QWORD *)(a2 + 12);
      v4 = *(_OWORD *)(a2 + 20);
      *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
      *(_OWORD *)(a1 + 20) = v4;
    }
  }
  else if (*(_BYTE *)(a1 + 48))
  {
    *(_BYTE *)(a1 + 48) = 0;
  }
  else
  {
    *(_DWORD *)a1 = *(_DWORD *)a2;
    *(_QWORD *)(a1 + 4) = *(_QWORD *)(a2 + 4);
    *(_QWORD *)(a1 + 12) = *(_QWORD *)(a2 + 12);
    v5 = *(_OWORD *)(a2 + 20);
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 20) = v5;
    *(_BYTE *)(a1 + 48) = 1;
  }
  if (*(unsigned __int8 *)(a1 + 104) == *(unsigned __int8 *)(a2 + 104))
  {
    if (*(_BYTE *)(a1 + 104))
    {
      *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
      *(_QWORD *)(a1 + 60) = *(_QWORD *)(a2 + 60);
      *(_QWORD *)(a1 + 68) = *(_QWORD *)(a2 + 68);
      v6 = *(_OWORD *)(a2 + 76);
      *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
      *(_OWORD *)(a1 + 76) = v6;
    }
  }
  else if (*(_BYTE *)(a1 + 104))
  {
    *(_BYTE *)(a1 + 104) = 0;
  }
  else
  {
    *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
    *(_QWORD *)(a1 + 60) = *(_QWORD *)(a2 + 60);
    *(_QWORD *)(a1 + 68) = *(_QWORD *)(a2 + 68);
    v7 = *(_OWORD *)(a2 + 76);
    *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
    *(_OWORD *)(a1 + 76) = v7;
    *(_BYTE *)(a1 + 104) = 1;
  }
  v8 = (uint64_t *)(a1 + 112);
  v9 = (uint64_t *)(a2 + 112);
  if (*(unsigned __int8 *)(a1 + 120) == *(unsigned __int8 *)(a2 + 120))
  {
    if (*(_BYTE *)(a1 + 120))
      sub_1C990B6E0(v8, *v9);
  }
  else if (*(_BYTE *)(a1 + 120))
  {
    sub_1C990C17C(v8);
    *(_BYTE *)(a1 + 120) = 0;
  }
  else
  {
    sub_1C990AD90(v8, v9);
    *(_BYTE *)(a1 + 120) = 1;
  }
  if (*(unsigned __int8 *)(a1 + 152) == *(unsigned __int8 *)(a2 + 152))
  {
    if (*(_BYTE *)(a1 + 152))
    {
      v10 = *(_QWORD *)(a1 + 128);
      v11 = *(_QWORD *)(a1 + 136);
      v12 = *(_QWORD *)(a2 + 136);
      *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
      *(_QWORD *)(a1 + 136) = v12;
      *(_QWORD *)(a2 + 128) = v10;
      *(_QWORD *)(a2 + 136) = v11;
      *(_DWORD *)(a1 + 144) = *(_DWORD *)(a2 + 144);
      *(_DWORD *)(a2 + 144) = 0;
    }
  }
  else if (*(_BYTE *)(a1 + 152))
  {
    free(*(void **)(a1 + 128));
    *(_BYTE *)(a1 + 152) = 0;
  }
  else
  {
    *(_QWORD *)(a1 + 128) = 0;
    *(_QWORD *)(a1 + 136) = 0;
    v13 = *(_QWORD *)(a2 + 136);
    *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
    *(_QWORD *)(a1 + 136) = v13;
    *(_QWORD *)(a2 + 128) = 0;
    *(_QWORD *)(a2 + 136) = 0;
    *(_DWORD *)(a1 + 144) = *(_DWORD *)(a2 + 144);
    *(_DWORD *)(a2 + 144) = 0;
    *(_BYTE *)(a1 + 152) = 1;
  }
  v14 = *(_OWORD *)(a2 + 160);
  *(_QWORD *)(a2 + 160) = 0;
  *(_QWORD *)(a2 + 168) = 0;
  v15 = *(std::__shared_weak_count **)(a1 + 168);
  *(_OWORD *)(a1 + 160) = v14;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *, uint64_t *))v15->__on_zero_shared)(v15, v9);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  return a1;
}

BOOL sub_1C99168F8(cva::DictionaryHandler *a1, _DWORD *a2)
{
  _DWORD *v4;
  _DWORD *v5;
  _BOOL8 v6;
  _BYTE v8[16];
  _BYTE v9[16];
  void *v10;
  int v11;
  int v12;

  if (!cva::DictionaryHandler::hasKey(a1, "rotation")
    || !cva::DictionaryHandler::hasKey(a1, "translation"))
  {
    return 0;
  }
  cva::DictionaryHandler::item(a1, "rotation");
  cva::ItemHandler::getMatrix<float>();
  v4 = v10;
  if (v11 == 3 && v12 == 3)
  {
    *a2 = *(_DWORD *)v10;
    a2[1] = v4[1];
    a2[2] = v4[2];
    a2[3] = v4[3];
    a2[4] = v4[4];
    a2[5] = v4[5];
    a2[6] = v4[6];
    a2[7] = v4[7];
    a2[8] = v4[8];
    free(v4);
    cva::DictionaryHandler::item(a1, "translation");
    cva::ItemHandler::getVector<float>();
    v5 = v10;
    v6 = v11 == 3;
    if (v11 == 3)
    {
      a2[9] = *(_DWORD *)v10;
      a2[10] = v5[1];
      a2[11] = v5[2];
    }
    free(v5);
    cva::ItemHandler::~ItemHandler((cva::ItemHandler *)v8);
  }
  else
  {
    free(v10);
    v6 = 0;
  }
  cva::ItemHandler::~ItemHandler((cva::ItemHandler *)v9);
  return v6;
}

uint64_t sub_1C9916A44(uint64_t a1)
{
  cva::DictionaryHandler *v2;
  std::__shared_weak_count *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t i;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  char *v13;
  int v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  int v21;
  uint64_t *p_shared_owners;
  unint64_t v23;
  __int128 v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  uint64_t v31;
  int v32;
  int v33;
  unint64_t *v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  uint64_t *v38;
  unint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  unint64_t *v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  cva::ArrayHandler *v49;
  std::__shared_weak_count *v50;
  int v51;
  unint64_t *v52;
  unint64_t *v53;
  unint64_t v54;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t *v68;
  unint64_t v69;
  uint64_t j;
  uint64_t v71;
  const char *v72;
  cva::DictionaryHandler *v73;
  cva::DictionaryHandler *v74;
  cva::DictionaryHandler *v75;
  uint64_t v76;
  void **v77;
  void **v78;
  int v79;
  int v80;
  uint64_t v81;
  uint64_t v82;
  void **v83;
  __int128 v84;
  __int128 v85;
  uint64_t v86;
  int v87;
  uint64_t v88;
  uint64_t v89;
  void *v90;
  void *v91;
  _BOOL4 v92;
  std::__shared_weak_count *v93;
  unint64_t *v94;
  unint64_t v95;
  uint64_t v96;
  int v97;
  int v98;
  uint64_t v99;
  int v100;
  uint64_t v101;
  int v102;
  int v103;
  uint64_t v104;
  int v105;
  int v106;
  int v107;
  uint64_t v108;
  int v109;
  int v110;
  uint64_t v111;
  int v112;
  uint64_t v113;
  _DWORD *v114;
  _DWORD *v115;
  _DWORD *v116;
  _DWORD *v117;
  uint64_t v118;
  void **v119;
  __int128 v120;
  __int128 v121;
  uint64_t v122;
  int v123;
  uint64_t v124;
  int v125;
  uint64_t v126;
  void **v127;
  __int128 v128;
  __int128 v129;
  uint64_t v130;
  void *v131;
  void *v132;
  uint64_t v133;
  uint64_t v134;
  void *v135;
  void *v136;
  uint64_t v137;
  uint64_t v138;
  void *v139;
  void *v140;
  uint64_t v141;
  void **v142;
  __int128 v143;
  __int128 v144;
  uint64_t v145;
  uint64_t v146;
  __int128 v147;
  std::__shared_weak_count *v148;
  unint64_t *v149;
  unint64_t v150;
  std::__shared_weak_count *v151;
  unint64_t *v152;
  unint64_t v153;
  cva::DictionaryHandler *v154;
  std::__shared_weak_count *v155;
  int v156;
  uint64_t v157;
  int v158;
  unint64_t *v159;
  unint64_t v160;
  unint64_t *v161;
  unint64_t v162;
  const char *v163;
  cva::DictionaryHandler *v164;
  std::__shared_weak_count *v165;
  int v166;
  uint64_t v167;
  int v168;
  std::__shared_weak_count *v169;
  unint64_t *v170;
  unint64_t v171;
  unint64_t *v172;
  unint64_t v173;
  uint64_t v174;
  __int128 v175;
  std::__shared_weak_count *v176;
  unint64_t *v177;
  unint64_t v178;
  std::__shared_weak_count *v179;
  unint64_t *v180;
  unint64_t v181;
  unint64_t *v182;
  unint64_t v183;
  cva::DictionaryHandler **v184;
  int v185;
  cva::DictionaryHandler *v186;
  cva::DictionaryHandler *v187;
  cva::DictionaryHandler *v188;
  cva::DictionaryHandler *v189;
  const char *v190;
  uint64_t v191;
  cva::DictionaryHandler *v192;
  _BOOL4 v193;
  int v194;
  __int128 v195;
  cva::DictionaryHandler *v196;
  int v197;
  int v198;
  int v199;
  int v200;
  int v201;
  cva::DictionaryHandler *v202;
  cva::DictionaryHandler *v203;
  const char *v204;
  uint64_t v205;
  void *v206;
  std::__shared_weak_count *v207;
  unint64_t *v208;
  unint64_t v209;
  unint64_t *v210;
  unint64_t v211;
  unint64_t *v212;
  unint64_t v213;
  unint64_t *v214;
  unint64_t v215;
  int v216;
  char v217;
  std::__shared_weak_count *v218;
  cva::ArrayHandler *v219;
  std::__shared_weak_count *v220;
  cva::DictionaryHandler *v221;
  std::__shared_weak_count *v222;
  uint64_t v223;
  cva::DictionaryHandler *v224;
  std::__shared_weak_count *v225;
  cva::DictionaryHandler *v226;
  std::__shared_weak_count *v227;
  void *__p[36];
  _BYTE v229[16];
  cva::DictionaryHandler *v230;
  std::__shared_weak_count *v231;
  cva::DictionaryHandler *v232[2];
  _BYTE v233[20];
  uint64_t v234;
  int v235;
  cva::DictionaryHandler *v236[2];
  int v237;
  __int128 v238;
  char v239;
  uint64_t v240;

  v240 = *MEMORY[0x1E0C80C00];
  cva::DictionaryHandler::readJsonFile();
  v2 = v236[0];
  v3 = (std::__shared_weak_count *)v236[1];
  if (!v236[0])
    goto LABEL_101;
  if ((cva::DictionaryHandler::hasKey(v236[0], "tracking_state") & 1) != 0
    || cva::DictionaryHandler::hasKey(v236[0], "landmarks"))
  {
    v5 = *(_QWORD *)(a1 + 64);
    v4 = *(_QWORD *)(a1 + 72);
    v6 = 0x7E3F1F8FC7E3F1F9 * ((v4 - v5) >> 4);
    if (v4 == v5)
    {
      sub_1C98FA98C((char **)(a1 + 64), 1 - v6);
    }
    else if (v6 >= 2)
    {
      for (i = v5 + 1168; v4 != i; v4 = sub_1C98BC250(v4 - 1168))
        ;
      *(_QWORD *)(a1 + 72) = i;
    }
    v8 = *(_QWORD *)(a1 + 64);
    if ((cva::DictionaryHandler::hasKey(v2, "tracking_state") & 1) != 0)
    {
      cva::DictionaryHandler::item(v2, "tracking_state");
      cva::ItemHandler::getDictionary((cva::ItemHandler *)v236);
      cva::ItemHandler::~ItemHandler((cva::ItemHandler *)v236);
      if (!cva::DictionaryHandler::hasKey(v226, "meta")
        || (cva::DictionaryHandler::hasKey(v226, "data") & 1) == 0)
      {
        sub_1C99072C4(v232);
        sub_1C9907EC4(v236, v232, 0, 0, "[RELEASE ERROR  ]", "/Library/Caches/com.apple.xbs/Sources/AppleCVA/shared/src/modules/avatar/shrek/libs/alg/tracking/src/io/framesequencedata.cpp", 962, "failure reading tracking dictionary: missing meta", v217);
        sub_1C9909318((uint64_t)v236);
        v18 = (std::__shared_weak_count *)v232[1];
        if (v232[1])
        {
          v19 = (unint64_t *)((char *)v232[1] + 8);
          do
            v20 = __ldaxr(v19);
          while (__stlxr(v20 - 1, v19));
          if (!v20)
          {
            ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
            std::__shared_weak_count::__release_weak(v18);
          }
        }
        v21 = 1;
        if (!v227)
          goto LABEL_37;
LABEL_33:
        p_shared_owners = &v227->__shared_owners_;
        do
          v23 = __ldaxr((unint64_t *)p_shared_owners);
        while (__stlxr(v23 - 1, (unint64_t *)p_shared_owners));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v227->__on_zero_shared)(v227);
          std::__shared_weak_count::__release_weak(v227);
          if (!v21)
            goto LABEL_38;
        }
        else
        {
LABEL_37:
          if (!v21)
          {
LABEL_38:
            if (cva::DictionaryHandler::hasKey(v2, "landmarks"))
            {
              cva::DictionaryHandler::item(v2, "landmarks");
              cva::ItemHandler::getDictionary((cva::ItemHandler *)&v226);
              v24 = *(_OWORD *)__p;
              __p[1] = 0;
              __p[0] = 0;
              v25 = *(std::__shared_weak_count **)(v8 + 984);
              *(_OWORD *)(v8 + 976) = v24;
              if (v25)
              {
                v26 = (unint64_t *)&v25->__shared_owners_;
                do
                  v27 = __ldaxr(v26);
                while (__stlxr(v27 - 1, v26));
                if (!v27)
                {
                  ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
                  std::__shared_weak_count::__release_weak(v25);
                }
              }
              v28 = (std::__shared_weak_count *)__p[1];
              if (__p[1])
              {
                v29 = (unint64_t *)((char *)__p[1] + 8);
                do
                  v30 = __ldaxr(v29);
                while (__stlxr(v30 - 1, v29));
                if (!v30)
                {
                  ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
                  std::__shared_weak_count::__release_weak(v28);
                }
              }
              cva::ItemHandler::~ItemHandler((cva::ItemHandler *)&v226);
            }
            v31 = 1;
            goto LABEL_102;
          }
        }
LABEL_101:
        v31 = 0;
        goto LABEL_102;
      }
      cva::DictionaryHandler::item(v226, "meta");
      cva::ItemHandler::getDictionary((cva::ItemHandler *)v236);
      cva::ItemHandler::~ItemHandler((cva::ItemHandler *)v236);
      if (!cva::DictionaryHandler::hasKey(v224, "version")
        || (cva::DictionaryHandler::item(v224, "version"),
            cva::ItemHandler::getVector<int>(),
            v9 = v237,
            free(v236[0]),
            cva::ItemHandler::~ItemHandler((cva::ItemHandler *)v232),
            v9 != 3))
      {
        sub_1C99072C4(v232);
        sub_1C9907EC4(v236, v232, 0, 0, "[RELEASE ERROR  ]", "/Library/Caches/com.apple.xbs/Sources/AppleCVA/shared/src/modules/avatar/shrek/libs/alg/tracking/src/io/framesequencedata.cpp", 971, "failure reading tracking dictionary: missing version", v217);
        sub_1C9909318((uint64_t)v236);
        v35 = (std::__shared_weak_count *)v232[1];
        if (v232[1])
        {
          v36 = (unint64_t *)((char *)v232[1] + 8);
          do
            v37 = __ldaxr(v36);
          while (__stlxr(v37 - 1, v36));
          if (!v37)
          {
            ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
            std::__shared_weak_count::__release_weak(v35);
          }
        }
        v21 = 1;
        goto LABEL_67;
      }
      cva::DictionaryHandler::item(v226, "data");
      cva::ItemHandler::getDictionary((cva::ItemHandler *)v236);
      cva::ItemHandler::~ItemHandler((cva::ItemHandler *)v236);
      if (cva::DictionaryHandler::hasKey((cva::DictionaryHandler *)v238, "software_timestamp")
        && (cva::DictionaryHandler::hasKey((cva::DictionaryHandler *)v238, "hardware_timestamp") & 1) != 0)
      {
        cva::DictionaryHandler::item((cva::DictionaryHandler *)v238, "software_timestamp");
        cva::ItemHandler::getValue<double>();
        *(_QWORD *)(a1 + 32) = v10;
        cva::ItemHandler::~ItemHandler((cva::ItemHandler *)v236);
        cva::DictionaryHandler::item((cva::DictionaryHandler *)v238, "hardware_timestamp");
        cva::ItemHandler::getValue<double>();
        *(_QWORD *)(a1 + 24) = v11;
        cva::ItemHandler::~ItemHandler((cva::ItemHandler *)v236);
        if (!cva::DictionaryHandler::hasKey((cva::DictionaryHandler *)v238, "tracking_success"))
          goto LABEL_416;
        cva::DictionaryHandler::item((cva::DictionaryHandler *)v238, "tracking_success");
        cva::ItemHandler::getValue<std::string>();
        cva::ItemHandler::~ItemHandler((cva::ItemHandler *)v236);
        LODWORD(v230) = 0;
        v12 = v233[7];
        if (v233[7] >= 0)
          v13 = (char *)v232;
        else
          v13 = (char *)v232[0];
        v14 = sub_1C9916664(v13, (int *)&v230);
        if ((v14 & 1) != 0)
        {
          *(_DWORD *)(v8 + 148) = (_DWORD)v230;
          *(_BYTE *)(v8 + 152) = 1;
        }
        else
        {
          sub_1C99072C4(__p);
          if (v233[7] >= 0)
            v184 = v232;
          else
            LOBYTE(v184) = v232[0];
          sub_1C9907EC4(v236, __p, 0, 0, "[RELEASE ERROR  ]", "/Library/Caches/com.apple.xbs/Sources/AppleCVA/shared/src/modules/avatar/shrek/libs/alg/tracking/src/io/framesequencedata.cpp", 994, "failure reading tracking dictionary: unexpected success string '%s'", (char)v184);
          sub_1C9909318((uint64_t)v236);
          sub_1C987C140((uint64_t)__p);
          v12 = v233[7];
        }
        if (v12 < 0)
          operator delete(v232[0]);
        if (v14)
        {
LABEL_416:
          if (cva::DictionaryHandler::hasKey(v2, "facekit_failure_type"))
          {
            cva::DictionaryHandler::item(v2, "facekit_failure_type");
            cva::ItemHandler::getValue<std::string>();
            sub_1C98FDB84(v8 + 176, (__int128 *)v232);
            if ((v233[7] & 0x80000000) != 0)
              operator delete(v232[0]);
            cva::ItemHandler::~ItemHandler((cva::ItemHandler *)__p);
          }
          if (cva::DictionaryHandler::hasKey((cva::DictionaryHandler *)v238, "tracking_confidence"))
          {
            cva::DictionaryHandler::item((cva::DictionaryHandler *)v238, "tracking_confidence");
            cva::ItemHandler::getValue<float>();
            *(_DWORD *)(v8 + 156) = v185;
            *(_BYTE *)(v8 + 160) = 1;
            cva::ItemHandler::~ItemHandler((cva::ItemHandler *)v232);
          }
          if (cva::DictionaryHandler::hasKey((cva::DictionaryHandler *)v238, "blendshapes"))
          {
            v232[1] = 0;
            v232[0] = 0;
            *(_DWORD *)v233 = 0;
            if (!sub_1C991922C((cva::DictionaryHandler *)v238, (int8x8_t **)(a1 + 824), (uint64_t)v232, (void ***)(v8 + 560)))
            {
              free(v232[0]);
              goto LABEL_374;
            }
            v186 = v232[0];
            if (*(_BYTE *)(v8 + 288))
            {
              v187 = *(cva::DictionaryHandler **)(v8 + 264);
              v188 = *(cva::DictionaryHandler **)(v8 + 272);
              v232[0] = v187;
              v189 = v232[1];
              *(_QWORD *)(v8 + 264) = v186;
              *(_QWORD *)(v8 + 272) = v189;
              *(_DWORD *)(v8 + 280) = *(_DWORD *)v233;
            }
            else
            {
              v187 = 0;
              v188 = 0;
              v232[0] = 0;
              v192 = v232[1];
              *(_QWORD *)(v8 + 264) = v186;
              *(_QWORD *)(v8 + 272) = v192;
              *(_DWORD *)(v8 + 280) = *(_DWORD *)v233;
              *(_BYTE *)(v8 + 288) = 1;
            }
            v232[1] = v188;
            *(_DWORD *)v233 = 0;
            free(v187);
          }
          if (cva::DictionaryHandler::hasKey((cva::DictionaryHandler *)v238, "pose"))
          {
            HIDWORD(v232[1]) = 0;
            *(cva::DictionaryHandler **)((char *)v232 + 4) = 0;
            *(_QWORD *)&v233[4] = 0;
            *(_QWORD *)&v233[12] = 0x3F80000000000000;
            LODWORD(v232[0]) = 1065353216;
            *(_DWORD *)v233 = 1065353216;
            v234 = 0;
            v235 = 0;
            cva::DictionaryHandler::item((cva::DictionaryHandler *)v238, "pose");
            cva::ItemHandler::getDictionary((cva::ItemHandler *)&v230);
            v193 = sub_1C99168F8((cva::DictionaryHandler *)__p[0], v232);
            sub_1C987C140((uint64_t)__p);
            cva::ItemHandler::~ItemHandler((cva::ItemHandler *)&v230);
            if (!v193)
              goto LABEL_374;
            v194 = *(unsigned __int8 *)(v8 + 256);
            v195 = *(_OWORD *)v233;
            *(_OWORD *)(v8 + 208) = *(_OWORD *)v232;
            *(_OWORD *)(v8 + 224) = v195;
            *(_DWORD *)(v8 + 240) = *(_DWORD *)&v233[16];
            *(_QWORD *)(v8 + 244) = v234;
            *(_DWORD *)(v8 + 252) = v235;
            if (!v194)
              *(_BYTE *)(v8 + 256) = 1;
          }
          if (cva::DictionaryHandler::hasKey((cva::DictionaryHandler *)v238, "lookat"))
          {
            cva::DictionaryHandler::item((cva::DictionaryHandler *)v238, "lookat");
            cva::ItemHandler::getVector<float>();
            v196 = v232[0];
            v197 = *((_DWORD *)v232[0] + 2);
            v198 = *(unsigned __int8 *)(v8 + 308);
            *(_QWORD *)(v8 + 296) = *(_QWORD *)v232[0];
            *(_DWORD *)(v8 + 304) = v197;
            if (!v198)
              *(_BYTE *)(v8 + 308) = 1;
            free(v196);
            cva::ItemHandler::~ItemHandler((cva::ItemHandler *)__p);
          }
          if ((cva::DictionaryHandler::hasKey((cva::DictionaryHandler *)v238, "zippering_left") & 1) != 0
            || cva::DictionaryHandler::hasKey((cva::DictionaryHandler *)v238, "zippering_right"))
          {
            if (!cva::DictionaryHandler::hasKey((cva::DictionaryHandler *)v238, "zippering_left")
              || (cva::DictionaryHandler::hasKey((cva::DictionaryHandler *)v238, "zippering_right") & 1) == 0)
            {
              sub_1C99072C4(__p);
              v204 = "failure reading tracking dictionary: only one of zippering_left and zippering_right is set";
              v205 = 1038;
              goto LABEL_372;
            }
            cva::DictionaryHandler::item((cva::DictionaryHandler *)v238, "zippering_left");
            cva::ItemHandler::getValue<float>();
            *(_DWORD *)(v8 + 376) = v199;
            *(_BYTE *)(v8 + 380) = 1;
            cva::ItemHandler::~ItemHandler((cva::ItemHandler *)v232);
            cva::DictionaryHandler::item((cva::DictionaryHandler *)v238, "zippering_right");
            cva::ItemHandler::getValue<float>();
            *(_DWORD *)(v8 + 384) = v200;
            *(_BYTE *)(v8 + 388) = 1;
            cva::ItemHandler::~ItemHandler((cva::ItemHandler *)v232);
          }
          if (cva::DictionaryHandler::hasKey(v2, "tongue"))
          {
            cva::DictionaryHandler::item(v2, "tongue");
            cva::ItemHandler::getValue<float>();
            *(_DWORD *)(v8 + 392) = v201;
            *(_BYTE *)(v8 + 396) = 1;
            cva::ItemHandler::~ItemHandler((cva::ItemHandler *)v232);
          }
          if (cva::DictionaryHandler::hasKey(v2, "identity_uuid"))
          {
            cva::DictionaryHandler::item(v2, "identity_uuid");
            cva::ItemHandler::getValue<std::string>();
            sub_1C98FDB84(v8 + 576, (__int128 *)v232);
            if ((v233[7] & 0x80000000) != 0)
              operator delete(v232[0]);
            cva::ItemHandler::~ItemHandler((cva::ItemHandler *)__p);
          }
          if (!cva::DictionaryHandler::hasKey(v2, "identity"))
            goto LABEL_405;
          if (*(_BYTE *)(v8 + 600))
          {
            cva::DictionaryHandler::item(v2, "identity");
            cva::ItemHandler::getVector<float>();
            if (*(_BYTE *)(v8 + 24))
            {
              v202 = *(cva::DictionaryHandler **)v8;
              v203 = *(cva::DictionaryHandler **)(v8 + 8);
              *(cva::DictionaryHandler **)v8 = v232[0];
              *(cva::DictionaryHandler **)(v8 + 8) = v232[1];
              v232[0] = v202;
              v232[1] = v203;
              *(_DWORD *)(v8 + 16) = *(_DWORD *)v233;
              *(_DWORD *)v233 = 0;
            }
            else
            {
              v202 = 0;
              *(_QWORD *)v8 = 0;
              *(_QWORD *)(v8 + 8) = 0;
              *(cva::DictionaryHandler **)v8 = v232[0];
              *(cva::DictionaryHandler **)(v8 + 8) = v232[1];
              v232[0] = 0;
              v232[1] = 0;
              *(_DWORD *)(v8 + 16) = *(_DWORD *)v233;
              *(_DWORD *)v233 = 0;
              *(_BYTE *)(v8 + 24) = 1;
            }
            free(v202);
            cva::ItemHandler::~ItemHandler((cva::ItemHandler *)__p);
LABEL_405:
            if ((cva::DictionaryHandler::hasKey((cva::DictionaryHandler *)v238, "face_box") & 1) == 0
              && (cva::DictionaryHandler::hasKey((cva::DictionaryHandler *)v238, "face_box_roll") & 1) == 0
              && !cva::DictionaryHandler::hasKey((cva::DictionaryHandler *)v238, "face_box_yaw"))
            {
              goto LABEL_411;
            }
            LOBYTE(__p[3]) = 0;
            BYTE4(__p[3]) = 0;
            LOBYTE(__p[4]) = 0;
            __p[5] = 0;
            memset(__p, 0, 21);
            if (sub_1C9919C1C((cva::DictionaryHandler *)v238, (uint64_t)__p))
            {
              v216 = *(unsigned __int8 *)(v8 + 920);
              *(_DWORD *)(v8 + 872) = __p[0];
              *(_OWORD *)(v8 + 876) = *(_OWORD *)((char *)__p + 4);
              *(_OWORD *)(v8 + 892) = *(_OWORD *)((char *)&__p[2] + 4);
              *(_OWORD *)(v8 + 904) = *(_OWORD *)&__p[4];
              if (!v216)
                *(_BYTE *)(v8 + 920) = 1;
LABEL_411:
              v21 = 0;
              v207 = (std::__shared_weak_count *)*((_QWORD *)&v238 + 1);
              if (!*((_QWORD *)&v238 + 1))
                goto LABEL_67;
              goto LABEL_375;
            }
            sub_1C99072C4(&v230);
            sub_1C9907EC4(v232, &v230, 0, 0, "[RELEASE ERROR  ]", "/Library/Caches/com.apple.xbs/Sources/AppleCVA/shared/src/modules/avatar/shrek/libs/alg/tracking/src/io/framesequencedata.cpp", 1071, "failure reading tracking dictionary: invalid face_box", v217);
            sub_1C9909318((uint64_t)v232);
            v206 = &v230;
            goto LABEL_373;
          }
          sub_1C99072C4(__p);
          v204 = "failure reading tracking dictionary: missing identity tensor uuid";
          v205 = 1058;
LABEL_372:
          sub_1C9907EC4(v232, __p, 0, 0, "[RELEASE ERROR  ]", "/Library/Caches/com.apple.xbs/Sources/AppleCVA/shared/src/modules/avatar/shrek/libs/alg/tracking/src/io/framesequencedata.cpp", v205, v204, v217);
          sub_1C9909318((uint64_t)v232);
          v206 = __p;
LABEL_373:
          sub_1C987C140((uint64_t)v206);
        }
      }
      else
      {
        sub_1C99072C4(v232);
        sub_1C9907EC4(v236, v232, 0, 0, "[RELEASE ERROR  ]", "/Library/Caches/com.apple.xbs/Sources/AppleCVA/shared/src/modules/avatar/shrek/libs/alg/tracking/src/io/framesequencedata.cpp", 980, "failure reading tracking dictionary: missing timestamps", v217);
        sub_1C9909318((uint64_t)v236);
        v62 = (std::__shared_weak_count *)v232[1];
        if (v232[1])
        {
          v63 = (unint64_t *)((char *)v232[1] + 8);
          do
            v64 = __ldaxr(v63);
          while (__stlxr(v64 - 1, v63));
          if (!v64)
          {
            ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
            std::__shared_weak_count::__release_weak(v62);
          }
        }
      }
LABEL_374:
      v21 = 1;
      v207 = (std::__shared_weak_count *)*((_QWORD *)&v238 + 1);
      if (!*((_QWORD *)&v238 + 1))
      {
LABEL_67:
        if (v225)
        {
          v38 = &v225->__shared_owners_;
          do
            v39 = __ldaxr((unint64_t *)v38);
          while (__stlxr(v39 - 1, (unint64_t *)v38));
          if (!v39)
          {
            ((void (*)(std::__shared_weak_count *))v225->__on_zero_shared)(v225);
            std::__shared_weak_count::__release_weak(v225);
          }
        }
        goto LABEL_33;
      }
LABEL_375:
      v208 = (unint64_t *)&v207->__shared_owners_;
      do
        v209 = __ldaxr(v208);
      while (__stlxr(v209 - 1, v208));
      if (!v209)
      {
        ((void (*)(std::__shared_weak_count *))v207->__on_zero_shared)(v207);
        std::__shared_weak_count::__release_weak(v207);
      }
      goto LABEL_67;
    }
    sub_1C99072C4(v232);
    sub_1C9907EC4(v236, v232, 0, 0, "[RELEASE ERROR  ]", "/Library/Caches/com.apple.xbs/Sources/AppleCVA/shared/src/modules/avatar/shrek/libs/alg/tracking/src/io/framesequencedata.cpp", 954, "failure reading tracking dictionary: missing tracking_state", v217);
    sub_1C9909318((uint64_t)v236);
    v15 = (std::__shared_weak_count *)v232[1];
    if (!v232[1])
      goto LABEL_101;
    v16 = (unint64_t *)((char *)v232[1] + 8);
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
LABEL_99:
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
    goto LABEL_101;
  }
  if ((cva::DictionaryHandler::hasKey(v236[0], "meta") & 1) == 0)
  {
    sub_1C99072C4(v232);
    sub_1C9907EC4(v236, v232, 0, 0, "[RELEASE ERROR  ]", "/Library/Caches/com.apple.xbs/Sources/AppleCVA/shared/src/modules/avatar/shrek/libs/alg/tracking/src/io/framesequencedata.cpp", 1093, "failure reading tracking dictionary: missing meta", v217);
    sub_1C9909318((uint64_t)v236);
    v15 = (std::__shared_weak_count *)v232[1];
    if (!v232[1])
      goto LABEL_101;
    v34 = (unint64_t *)((char *)v232[1] + 8);
    do
      v17 = __ldaxr(v34);
    while (__stlxr(v17 - 1, v34));
    goto LABEL_99;
  }
  cva::DictionaryHandler::item(v236[0], "meta");
  cva::ItemHandler::getDictionary((cva::ItemHandler *)v236);
  cva::ItemHandler::~ItemHandler((cva::ItemHandler *)v236);
  if (!cva::DictionaryHandler::hasKey(v232[0], "version")
    || ((cva::DictionaryHandler::item(v232[0], "version"), cva::ItemHandler::getVector<int>(), v32 = v237, v237 != 3)
      ? (v33 = 0)
      : (v33 = *(_DWORD *)v236[0]),
        free(v236[0]),
        cva::ItemHandler::~ItemHandler((cva::ItemHandler *)__p),
        v32 != 3))
  {
    sub_1C99072C4(__p);
    sub_1C9907EC4(v236, __p, 0, 0, "[RELEASE ERROR  ]", "/Library/Caches/com.apple.xbs/Sources/AppleCVA/shared/src/modules/avatar/shrek/libs/alg/tracking/src/io/framesequencedata.cpp", 1100, "failure reading tracking dictionary: missing version", v217);
    sub_1C9909318((uint64_t)v236);
    v40 = (std::__shared_weak_count *)__p[1];
    if (!__p[1])
      goto LABEL_84;
    v43 = (unint64_t *)((char *)__p[1] + 8);
    do
      v42 = __ldaxr(v43);
    while (__stlxr(v42 - 1, v43));
    goto LABEL_82;
  }
  if (v33 < 1002)
  {
    v31 = 1;
    v44 = (std::__shared_weak_count *)v232[1];
    if (!v232[1])
      goto LABEL_89;
    goto LABEL_85;
  }
  sub_1C99072C4(__p);
  sub_1C9907EC4(v236, __p, 0, 0, "[RELEASE ERROR  ]", "/Library/Caches/com.apple.xbs/Sources/AppleCVA/shared/src/modules/avatar/shrek/libs/alg/tracking/src/io/framesequencedata.cpp", 1106, "failure reading tracking dictionary: unsupported version %d.%d.%d", v33);
  sub_1C9909318((uint64_t)v236);
  v40 = (std::__shared_weak_count *)__p[1];
  if (__p[1])
  {
    v41 = (unint64_t *)((char *)__p[1] + 8);
    do
      v42 = __ldaxr(v41);
    while (__stlxr(v42 - 1, v41));
LABEL_82:
    if (!v42)
    {
      ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
      std::__shared_weak_count::__release_weak(v40);
    }
  }
LABEL_84:
  v31 = 0;
  v44 = (std::__shared_weak_count *)v232[1];
  if (!v232[1])
    goto LABEL_89;
LABEL_85:
  v45 = (unint64_t *)&v44->__shared_owners_;
  do
    v46 = __ldaxr(v45);
  while (__stlxr(v46 - 1, v45));
  if (!v46)
  {
    ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
    std::__shared_weak_count::__release_weak(v44);
  }
LABEL_89:
  if (!(_DWORD)v31)
    goto LABEL_102;
  if ((cva::DictionaryHandler::hasKey(v2, "data") & 1) == 0)
  {
    sub_1C99072C4(__p);
    sub_1C9907EC4(v232, __p, 0, 0, "[RELEASE ERROR  ]", "/Library/Caches/com.apple.xbs/Sources/AppleCVA/shared/src/modules/avatar/shrek/libs/alg/tracking/src/io/framesequencedata.cpp", 1112, "failure reading tracking dictionary: missing data dictionary", v217);
    sub_1C9909318((uint64_t)v232);
    v15 = (std::__shared_weak_count *)__p[1];
    if (!__p[1])
      goto LABEL_101;
    v52 = (unint64_t *)((char *)__p[1] + 8);
    do
      v17 = __ldaxr(v52);
    while (__stlxr(v17 - 1, v52));
    goto LABEL_99;
  }
  cva::DictionaryHandler::item(v2, "data");
  cva::ItemHandler::getDictionary((cva::ItemHandler *)v232);
  cva::ItemHandler::~ItemHandler((cva::ItemHandler *)v232);
  if (!cva::DictionaryHandler::hasKey(v230, "software_timestamp")
    || (cva::DictionaryHandler::hasKey(v230, "hardware_timestamp") & 1) == 0)
  {
    sub_1C99072C4(__p);
    sub_1C9907EC4(v232, __p, 0, 0, "[RELEASE ERROR  ]", "/Library/Caches/com.apple.xbs/Sources/AppleCVA/shared/src/modules/avatar/shrek/libs/alg/tracking/src/io/framesequencedata.cpp", 1121, "failure reading tracking dictionary: missing timestamps", v217);
    sub_1C9909318((uint64_t)v232);
    v56 = (std::__shared_weak_count *)__p[1];
    if (__p[1])
    {
      v57 = (unint64_t *)((char *)__p[1] + 8);
      do
        v58 = __ldaxr(v57);
      while (__stlxr(v58 - 1, v57));
      if (!v58)
      {
        ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
        std::__shared_weak_count::__release_weak(v56);
      }
    }
    v31 = 0;
    goto LABEL_114;
  }
  cva::DictionaryHandler::item(v230, "software_timestamp");
  cva::ItemHandler::getValue<double>();
  *(_QWORD *)(a1 + 32) = v47;
  cva::ItemHandler::~ItemHandler((cva::ItemHandler *)v232);
  cva::DictionaryHandler::item(v230, "hardware_timestamp");
  cva::ItemHandler::getValue<double>();
  *(_QWORD *)(a1 + 24) = v48;
  cva::ItemHandler::~ItemHandler((cva::ItemHandler *)v232);
  if ((cva::DictionaryHandler::hasKey(v230, "faces") & 1) == 0)
  {
    v50 = 0;
    v49 = 0;
    goto LABEL_127;
  }
  cva::DictionaryHandler::item(v230, "faces");
  cva::ItemHandler::getArray((cva::ItemHandler *)__p);
  v49 = v232[0];
  v50 = (std::__shared_weak_count *)v232[1];
  v232[1] = 0;
  v232[0] = 0;
  cva::ItemHandler::~ItemHandler((cva::ItemHandler *)__p);
  if (!v49)
  {
LABEL_127:
    v51 = 0;
    goto LABEL_128;
  }
  v51 = cva::ArrayHandler::size(v49);
LABEL_128:
  v65 = v51;
  v67 = *(_QWORD *)(a1 + 64);
  v66 = *(_QWORD *)(a1 + 72);
  v68 = (uint64_t *)(a1 + 64);
  v69 = 0x7E3F1F8FC7E3F1F9 * ((v66 - v67) >> 4);
  if (v65 <= v69)
  {
    if (v65 >= v69)
    {
      j = *(_QWORD *)(a1 + 72);
    }
    else
    {
      for (j = v67 + 1168 * (int)v65; v66 != j; v66 = sub_1C98BC250(v66 - 1168))
        ;
      *(_QWORD *)(a1 + 72) = j;
    }
  }
  else
  {
    sub_1C98FA98C((char **)(a1 + 64), v65 - v69);
    j = *(_QWORD *)(a1 + 72);
  }
  v31 = 1;
  if ((int)(-941362695 * ((unint64_t)(j - *v68) >> 4)) < 1)
    goto LABEL_398;
  v71 = 0;
  v218 = v50;
  v219 = v49;
  v72 = "zippering_left";
  while (1)
  {
    cva::ArrayHandler::item(v49);
    cva::ItemHandler::getDictionary((cva::ItemHandler *)&v238);
    v73 = (cva::DictionaryHandler *)__p[0];
    v222 = (std::__shared_weak_count *)__p[1];
    __p[1] = 0;
    __p[0] = 0;
    cva::ItemHandler::~ItemHandler((cva::ItemHandler *)&v238);
    v223 = *v68;
    v74 = v73;
    v221 = v73;
    if (cva::DictionaryHandler::hasKey(v73, "tracking"))
      break;
LABEL_291:
    v163 = v72;
    if (cva::DictionaryHandler::hasKey(v74, "face_detection"))
    {
      cva::DictionaryHandler::item(v74, "face_detection");
      cva::ItemHandler::getDictionary((cva::ItemHandler *)&v238);
      v164 = (cva::DictionaryHandler *)__p[0];
      v165 = (std::__shared_weak_count *)__p[1];
      __p[1] = 0;
      __p[0] = 0;
      cva::ItemHandler::~ItemHandler((cva::ItemHandler *)&v238);
      LOBYTE(__p[3]) = 0;
      BYTE4(__p[3]) = 0;
      LOBYTE(__p[4]) = 0;
      __p[5] = 0;
      memset(__p, 0, 21);
      v166 = sub_1C9919C1C(v164, (uint64_t)__p);
      if ((v166 & 1) != 0)
      {
        v167 = v223 + 1168 * v71;
        v168 = *(unsigned __int8 *)(v167 + 864);
        *(_DWORD *)(v167 + 816) = __p[0];
        *(_OWORD *)(v167 + 820) = *(_OWORD *)((char *)__p + 4);
        *(_OWORD *)(v167 + 848) = *(_OWORD *)&__p[4];
        *(_OWORD *)(v167 + 836) = *(_OWORD *)((char *)&__p[2] + 4);
        if (!v168)
          *(_BYTE *)(v167 + 864) = 1;
      }
      else
      {
        sub_1C99072C4(&v238);
        sub_1C9907EC4(&v224, &v238, 0, 0, "[RELEASE ERROR  ]", "/Library/Caches/com.apple.xbs/Sources/AppleCVA/shared/src/modules/avatar/shrek/libs/alg/tracking/src/io/framesequencedata.cpp", 1310, "failure reading tracking dictionary: invalid face_detection", v217);
        sub_1C9909318((uint64_t)&v224);
        v169 = (std::__shared_weak_count *)*((_QWORD *)&v238 + 1);
        if (*((_QWORD *)&v238 + 1))
        {
          v170 = (unint64_t *)(*((_QWORD *)&v238 + 1) + 8);
          do
            v171 = __ldaxr(v170);
          while (__stlxr(v171 - 1, v170));
          if (!v171)
          {
            ((void (*)(std::__shared_weak_count *))v169->__on_zero_shared)(v169);
            std::__shared_weak_count::__release_weak(v169);
          }
        }
      }
      v49 = v219;
      if (v165)
      {
        v172 = (unint64_t *)&v165->__shared_owners_;
        do
          v173 = __ldaxr(v172);
        while (__stlxr(v173 - 1, v172));
        if (!v173)
        {
          ((void (*)(std::__shared_weak_count *))v165->__on_zero_shared)(v165);
          std::__shared_weak_count::__release_weak(v165);
        }
      }
      v74 = v221;
      if (!v166)
        goto LABEL_390;
    }
    v72 = v163;
    if (cva::DictionaryHandler::hasKey(v74, "landmarks"))
    {
      cva::DictionaryHandler::item(v74, "landmarks");
      cva::ItemHandler::getDictionary((cva::ItemHandler *)&v238);
      v174 = v223 + 1168 * v71;
      v175 = *(_OWORD *)__p;
      __p[1] = 0;
      __p[0] = 0;
      v176 = *(std::__shared_weak_count **)(v174 + 984);
      *(_OWORD *)(v174 + 976) = v175;
      if (v176)
      {
        v177 = (unint64_t *)&v176->__shared_owners_;
        do
          v178 = __ldaxr(v177);
        while (__stlxr(v178 - 1, v177));
        if (!v178)
        {
          ((void (*)(std::__shared_weak_count *))v176->__on_zero_shared)(v176);
          std::__shared_weak_count::__release_weak(v176);
        }
      }
      v179 = (std::__shared_weak_count *)__p[1];
      if (__p[1])
      {
        v180 = (unint64_t *)((char *)__p[1] + 8);
        do
          v181 = __ldaxr(v180);
        while (__stlxr(v181 - 1, v180));
        if (!v181)
        {
          ((void (*)(std::__shared_weak_count *))v179->__on_zero_shared)(v179);
          std::__shared_weak_count::__release_weak(v179);
        }
      }
      cva::ItemHandler::~ItemHandler((cva::ItemHandler *)&v238);
    }
    v68 = (uint64_t *)(a1 + 64);
    if (v222)
    {
      v182 = (unint64_t *)&v222->__shared_owners_;
      do
        v183 = __ldaxr(v182);
      while (__stlxr(v183 - 1, v182));
      if (!v183)
      {
        ((void (*)(std::__shared_weak_count *))v222->__on_zero_shared)(v222);
        std::__shared_weak_count::__release_weak(v222);
      }
    }
    if (++v71 >= (int)(-941362695 * ((*(_QWORD *)(a1 + 72) - *(_QWORD *)(a1 + 64)) >> 4)))
    {
      v31 = 1;
LABEL_397:
      v50 = v218;
      goto LABEL_398;
    }
  }
  cva::DictionaryHandler::item(v73, "tracking");
  cva::ItemHandler::getDictionary((cva::ItemHandler *)&v238);
  v75 = (cva::DictionaryHandler *)__p[0];
  v220 = (std::__shared_weak_count *)__p[1];
  __p[1] = 0;
  __p[0] = 0;
  cva::ItemHandler::~ItemHandler((cva::ItemHandler *)&v238);
  v76 = v223;
  if (cva::DictionaryHandler::hasKey(v75, "tracking_success"))
  {
    cva::DictionaryHandler::item(v75, "tracking_success");
    cva::ItemHandler::getValue<std::string>();
    cva::ItemHandler::~ItemHandler((cva::ItemHandler *)&v238);
    if (SHIBYTE(__p[2]) >= 0)
      v77 = __p;
    else
      v77 = (void **)__p[0];
    if (!strcmp("failed", (const char *)v77))
    {
      v80 = 0;
    }
    else if (!strcmp("only_rigid_success", (const char *)v77))
    {
      v80 = 1;
    }
    else
    {
      if (strcmp("success", (const char *)v77))
      {
        sub_1C99072C4(&v238);
        v78 = __p;
        if (SHIBYTE(__p[2]) < 0)
          LOBYTE(v78) = __p[0];
        sub_1C9907EC4(v232, &v238, 0, 0, "[RELEASE ERROR  ]", "/Library/Caches/com.apple.xbs/Sources/AppleCVA/shared/src/modules/avatar/shrek/libs/alg/tracking/src/io/framesequencedata.cpp", 1147, "failure reading tracking dictionary: unexpected success string '%s'", (char)v78);
        sub_1C9909318((uint64_t)v232);
        sub_1C987C140((uint64_t)&v238);
        v79 = 0;
LABEL_153:
        if (SHIBYTE(__p[2]) < 0)
          operator delete(__p[0]);
        if (!v79)
          goto LABEL_385;
        goto LABEL_156;
      }
      v80 = 2;
    }
    v81 = v223 + 1168 * v71;
    *(_DWORD *)(v81 + 148) = v80;
    v79 = 1;
    *(_BYTE *)(v81 + 152) = 1;
    goto LABEL_153;
  }
LABEL_156:
  if (cva::DictionaryHandler::hasKey(v75, "failure_description"))
  {
    cva::DictionaryHandler::item(v75, "failure_description");
    cva::ItemHandler::getValue<std::string>();
    v82 = v223 + 1168 * v71;
    v83 = (void **)(v82 + 176);
    if (*(_BYTE *)(v82 + 200))
    {
      if (*(char *)(v82 + 199) < 0)
        operator delete(*v83);
      v84 = *(_OWORD *)__p;
      v83[2] = __p[2];
      *(_OWORD *)v83 = v84;
      HIBYTE(__p[2]) = 0;
      LOBYTE(__p[0]) = 0;
    }
    else
    {
      v85 = *(_OWORD *)__p;
      *(void **)(v82 + 192) = __p[2];
      *(_OWORD *)v83 = v85;
      memset(__p, 0, 24);
      *(_BYTE *)(v82 + 200) = 1;
      if (SHIBYTE(__p[2]) < 0)
        operator delete(__p[0]);
    }
    cva::ItemHandler::~ItemHandler((cva::ItemHandler *)&v238);
  }
  if (cva::DictionaryHandler::hasKey(v75, "tracking_confidence"))
  {
    cva::DictionaryHandler::item(v75, "tracking_confidence");
    cva::ItemHandler::getValue<float>();
    v86 = v223 + 1168 * v71;
    *(_DWORD *)(v86 + 156) = v87;
    *(_BYTE *)(v86 + 160) = 1;
    cva::ItemHandler::~ItemHandler((cva::ItemHandler *)__p);
  }
  if (cva::DictionaryHandler::hasKey(v75, "blendshapes"))
  {
    memset(__p, 0, 20);
    if (!sub_1C991922C(v75, (int8x8_t **)(a1 + 824), (uint64_t)__p, (void ***)(v223 + 1168 * v71 + 560)))
    {
      free(__p[0]);
      goto LABEL_385;
    }
    v88 = v223 + 1168 * v71;
    v89 = v88 + 264;
    if (*(_BYTE *)(v88 + 288))
    {
      v90 = *(void **)v89;
      *(void **)v89 = __p[0];
      __p[0] = v90;
      v91 = *(void **)(v89 + 8);
      *(void **)(v89 + 8) = __p[1];
      __p[1] = v91;
      *(_DWORD *)(v89 + 16) = __p[2];
      LODWORD(__p[2]) = 0;
    }
    else
    {
      *(_QWORD *)v89 = 0;
      *(_QWORD *)(v88 + 272) = 0;
      *(void **)v89 = __p[0];
      __p[0] = 0;
      *(void **)(v88 + 272) = __p[1];
      __p[1] = 0;
      *(_DWORD *)(v88 + 280) = __p[2];
      LODWORD(__p[2]) = 0;
      *(_BYTE *)(v88 + 288) = 1;
    }
    free(__p[0]);
  }
  if (cva::DictionaryHandler::hasKey(v75, "pose"))
  {
    HIDWORD(__p[3]) = 0;
    HIDWORD(__p[1]) = 0;
    *(void **)((char *)&__p[2] + 4) = 0;
    *(void **)((char *)__p + 4) = 0;
    LODWORD(__p[0]) = 1065353216;
    LODWORD(__p[2]) = 1065353216;
    LODWORD(__p[4]) = 1065353216;
    *(void **)((char *)&__p[4] + 4) = 0;
    HIDWORD(__p[5]) = 0;
    cva::DictionaryHandler::item(v75, "pose");
    cva::ItemHandler::getDictionary((cva::ItemHandler *)v229);
    v92 = sub_1C99168F8((cva::DictionaryHandler *)v238, __p);
    v93 = (std::__shared_weak_count *)*((_QWORD *)&v238 + 1);
    if (*((_QWORD *)&v238 + 1))
    {
      v94 = (unint64_t *)(*((_QWORD *)&v238 + 1) + 8);
      do
        v95 = __ldaxr(v94);
      while (__stlxr(v95 - 1, v94));
      if (!v95)
      {
        ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
        std::__shared_weak_count::__release_weak(v93);
      }
    }
    cva::ItemHandler::~ItemHandler((cva::ItemHandler *)v229);
    if (!v92)
      goto LABEL_385;
    v96 = v223 + 1168 * v71;
    v97 = *(unsigned __int8 *)(v96 + 256);
    *(_OWORD *)(v96 + 208) = *(_OWORD *)__p;
    *(_OWORD *)(v96 + 224) = *(_OWORD *)&__p[2];
    *(_DWORD *)(v96 + 240) = __p[4];
    *(void **)(v96 + 244) = *(void **)((char *)&__p[4] + 4);
    *(_DWORD *)(v96 + 252) = HIDWORD(__p[5]);
    if (!v97)
      *(_BYTE *)(v96 + 256) = 1;
    v76 = v223;
  }
  if (cva::DictionaryHandler::hasKey(v75, "lookat"))
  {
    cva::DictionaryHandler::item(v75, "lookat");
    cva::ItemHandler::getVector<float>();
    v98 = *((_DWORD *)__p[0] + 2);
    v99 = v76 + 1168 * v71;
    v100 = *(unsigned __int8 *)(v99 + 308);
    *(_QWORD *)(v99 + 296) = *(_QWORD *)__p[0];
    *(_DWORD *)(v99 + 304) = v98;
    if (!v100)
      *(_BYTE *)(v99 + 308) = 1;
    free(__p[0]);
    cva::ItemHandler::~ItemHandler((cva::ItemHandler *)&v238);
  }
  if ((cva::DictionaryHandler::hasKey(v75, "virtual_blink_left") & 1) != 0
    || cva::DictionaryHandler::hasKey(v75, "virtual_blink_right"))
  {
    if (!cva::DictionaryHandler::hasKey(v75, "virtual_blink_left")
      || (cva::DictionaryHandler::hasKey(v75, "virtual_blink_right") & 1) == 0)
    {
      sub_1C99072C4(&v238);
      v190 = "failure reading tracking dictionary: only one of virtual_blink_left and virtual_blink_right is set";
      v191 = 1191;
      goto LABEL_384;
    }
    cva::DictionaryHandler::item(v75, "virtual_blink_left");
    cva::ItemHandler::getValue<float>();
    v101 = v223 + 1168 * v71;
    *(_DWORD *)(v101 + 312) = v102;
    *(_BYTE *)(v101 + 316) = 1;
    cva::ItemHandler::~ItemHandler((cva::ItemHandler *)__p);
    cva::DictionaryHandler::item(v75, "virtual_blink_right");
    cva::ItemHandler::getValue<float>();
    *(_DWORD *)(v101 + 320) = v103;
    *(_BYTE *)(v101 + 324) = 1;
    cva::ItemHandler::~ItemHandler((cva::ItemHandler *)__p);
  }
  if ((cva::DictionaryHandler::hasKey(v75, v72) & 1) != 0
    || cva::DictionaryHandler::hasKey(v75, "zippering_right"))
  {
    if (!cva::DictionaryHandler::hasKey(v75, v72)
      || (cva::DictionaryHandler::hasKey(v75, "zippering_right") & 1) == 0)
    {
      sub_1C99072C4(&v238);
      v190 = "failure reading tracking dictionary: only one of zippering_left and zippering_right is set";
      v191 = 1202;
      goto LABEL_384;
    }
    cva::DictionaryHandler::item(v75, v72);
    cva::ItemHandler::getValue<float>();
    v104 = v223 + 1168 * v71;
    *(_DWORD *)(v104 + 376) = v105;
    *(_BYTE *)(v104 + 380) = 1;
    cva::ItemHandler::~ItemHandler((cva::ItemHandler *)__p);
    cva::DictionaryHandler::item(v75, "zippering_right");
    cva::ItemHandler::getValue<float>();
    *(_DWORD *)(v104 + 384) = v106;
    *(_BYTE *)(v104 + 388) = 1;
    cva::ItemHandler::~ItemHandler((cva::ItemHandler *)__p);
  }
  if ((cva::DictionaryHandler::hasKey(v75, "eye_position_left") & 1) != 0
    || cva::DictionaryHandler::hasKey(v75, "eye_position_right"))
  {
    if (!cva::DictionaryHandler::hasKey(v75, "eye_position_left")
      || (cva::DictionaryHandler::hasKey(v75, "eye_position_right") & 1) == 0)
    {
      sub_1C99072C4(&v238);
      v190 = "failure reading tracking dictionary: only one of eye_position_left and eye_position_right is set";
      v191 = 1213;
      goto LABEL_384;
    }
    cva::DictionaryHandler::item(v75, "eye_position_left");
    cva::ItemHandler::getVector<float>();
    v107 = *((_DWORD *)__p[0] + 2);
    v108 = v223 + 1168 * v71;
    v109 = *(unsigned __int8 *)(v108 + 412);
    *(_QWORD *)(v108 + 400) = *(_QWORD *)__p[0];
    *(_DWORD *)(v108 + 408) = v107;
    if (!v109)
      *(_BYTE *)(v108 + 412) = 1;
    free(__p[0]);
    cva::ItemHandler::~ItemHandler((cva::ItemHandler *)&v238);
    cva::DictionaryHandler::item(v75, "eye_position_right");
    cva::ItemHandler::getVector<float>();
    v110 = *((_DWORD *)__p[0] + 2);
    v111 = v223 + 1168 * v71;
    v112 = *(unsigned __int8 *)(v111 + 428);
    *(_QWORD *)(v111 + 416) = *(_QWORD *)__p[0];
    *(_DWORD *)(v111 + 424) = v110;
    if (!v112)
      *(_BYTE *)(v111 + 428) = 1;
    free(__p[0]);
    cva::ItemHandler::~ItemHandler((cva::ItemHandler *)&v238);
  }
  if ((cva::DictionaryHandler::hasKey(v75, "infraorbital_left") & 1) != 0
    || (cva::DictionaryHandler::hasKey(v75, "infraorbital_right") & 1) != 0
    || (cva::DictionaryHandler::hasKey(v75, "tragion_left") & 1) != 0
    || cva::DictionaryHandler::hasKey(v75, "tragion_right"))
  {
    if (!cva::DictionaryHandler::hasKey(v75, "infraorbital_left")
      || !cva::DictionaryHandler::hasKey(v75, "infraorbital_right")
      || !cva::DictionaryHandler::hasKey(v75, "tragion_left")
      || (cva::DictionaryHandler::hasKey(v75, "tragion_right") & 1) == 0)
    {
      sub_1C99072C4(&v238);
      v190 = "failure reading tracking dictionary: key points are incomplete";
      v191 = 1226;
      goto LABEL_384;
    }
    v113 = v223 + 1168 * v71;
    *(_OWORD *)(v113 + 448) = 0u;
    *(_OWORD *)(v113 + 464) = 0u;
    *(_OWORD *)(v113 + 432) = 0u;
    *(_BYTE *)(v113 + 480) = 1;
    cva::DictionaryHandler::item(v75, "infraorbital_left");
    cva::ItemHandler::getVector<float>();
    v114 = __p[0];
    *(_DWORD *)(v113 + 432) = *(_DWORD *)__p[0];
    *(_DWORD *)(v113 + 436) = v114[1];
    *(_DWORD *)(v113 + 440) = v114[2];
    free(v114);
    cva::ItemHandler::~ItemHandler((cva::ItemHandler *)&v238);
    cva::DictionaryHandler::item(v75, "infraorbital_right");
    cva::ItemHandler::getVector<float>();
    v115 = __p[0];
    *(_DWORD *)(v113 + 444) = *(_DWORD *)__p[0];
    *(_DWORD *)(v113 + 448) = v115[1];
    *(_DWORD *)(v113 + 452) = v115[2];
    free(v115);
    cva::ItemHandler::~ItemHandler((cva::ItemHandler *)&v238);
    cva::DictionaryHandler::item(v75, "tragion_left");
    cva::ItemHandler::getVector<float>();
    v116 = __p[0];
    *(_DWORD *)(v113 + 456) = *(_DWORD *)__p[0];
    *(_DWORD *)(v113 + 460) = v116[1];
    *(_DWORD *)(v113 + 464) = v116[2];
    free(v116);
    cva::ItemHandler::~ItemHandler((cva::ItemHandler *)&v238);
    cva::DictionaryHandler::item(v75, "tragion_right");
    cva::ItemHandler::getVector<float>();
    v117 = __p[0];
    *(_DWORD *)(v113 + 468) = *(_DWORD *)__p[0];
    *(_DWORD *)(v113 + 472) = v117[1];
    *(_DWORD *)(v113 + 476) = v117[2];
    free(v117);
    cva::ItemHandler::~ItemHandler((cva::ItemHandler *)&v238);
  }
  if (cva::DictionaryHandler::hasKey(v75, "keypoints_model_version"))
  {
    cva::DictionaryHandler::item(v75, "keypoints_model_version");
    cva::ItemHandler::getValue<std::string>();
    v118 = v223 + 1168 * v71;
    v119 = (void **)(v118 + 528);
    if (*(_BYTE *)(v118 + 552))
    {
      if (*(char *)(v118 + 551) < 0)
        operator delete(*v119);
      v120 = *(_OWORD *)__p;
      v119[2] = __p[2];
      *(_OWORD *)v119 = v120;
      HIBYTE(__p[2]) = 0;
      LOBYTE(__p[0]) = 0;
    }
    else
    {
      v121 = *(_OWORD *)__p;
      *(void **)(v118 + 544) = __p[2];
      *(_OWORD *)v119 = v121;
      memset(__p, 0, 24);
      *(_BYTE *)(v118 + 552) = 1;
      if (SHIBYTE(__p[2]) < 0)
        operator delete(__p[0]);
    }
    cva::ItemHandler::~ItemHandler((cva::ItemHandler *)&v238);
  }
  if (cva::DictionaryHandler::hasKey(v75, "head_scale"))
  {
    cva::DictionaryHandler::item(v75, "head_scale");
    cva::ItemHandler::getValue<float>();
    v122 = v223 + 1168 * v71;
    *(_DWORD *)(v122 + 520) = v123;
    *(_BYTE *)(v122 + 524) = 1;
    cva::ItemHandler::~ItemHandler((cva::ItemHandler *)__p);
  }
  if (cva::DictionaryHandler::hasKey(v75, "tongue"))
  {
    cva::DictionaryHandler::item(v75, "tongue");
    cva::ItemHandler::getValue<float>();
    v124 = v223 + 1168 * v71;
    *(_DWORD *)(v124 + 392) = v125;
    *(_BYTE *)(v124 + 396) = 1;
    cva::ItemHandler::~ItemHandler((cva::ItemHandler *)__p);
  }
  if (cva::DictionaryHandler::hasKey(v75, "tensor_uuid"))
  {
    cva::DictionaryHandler::item(v75, "tensor_uuid");
    cva::ItemHandler::getValue<std::string>();
    v126 = v223 + 1168 * v71;
    v127 = (void **)(v126 + 576);
    if (*(_BYTE *)(v126 + 600))
    {
      if (*(char *)(v126 + 599) < 0)
        operator delete(*v127);
      v128 = *(_OWORD *)__p;
      v127[2] = __p[2];
      *(_OWORD *)v127 = v128;
      HIBYTE(__p[2]) = 0;
      LOBYTE(__p[0]) = 0;
    }
    else
    {
      v129 = *(_OWORD *)__p;
      *(void **)(v126 + 592) = __p[2];
      *(_OWORD *)v127 = v129;
      memset(__p, 0, 24);
      *(_BYTE *)(v126 + 600) = 1;
      if (SHIBYTE(__p[2]) < 0)
        operator delete(__p[0]);
    }
    cva::ItemHandler::~ItemHandler((cva::ItemHandler *)&v238);
  }
  if (cva::DictionaryHandler::hasKey(v75, "identity"))
  {
    if (!*(_BYTE *)(v223 + 1168 * v71 + 600))
    {
      sub_1C99072C4(&v238);
      v190 = "failure reading tracking dictionary: missing identity tensor uuid";
      v191 = 1256;
      goto LABEL_384;
    }
    v130 = v223 + 1168 * v71;
    cva::DictionaryHandler::item(v75, "identity");
    cva::ItemHandler::getVector<float>();
    if (*(_BYTE *)(v130 + 24))
    {
      v131 = *(void **)v130;
      *(void **)v130 = __p[0];
      __p[0] = v131;
      v132 = *(void **)(v130 + 8);
      *(void **)(v130 + 8) = __p[1];
      __p[1] = v132;
      *(_DWORD *)(v130 + 16) = __p[2];
      LODWORD(__p[2]) = 0;
    }
    else
    {
      *(_QWORD *)v130 = 0;
      *(_QWORD *)(v130 + 8) = 0;
      *(void **)v130 = __p[0];
      __p[0] = 0;
      *(void **)(v130 + 8) = __p[1];
      __p[1] = 0;
      *(_DWORD *)(v130 + 16) = __p[2];
      LODWORD(__p[2]) = 0;
      *(_BYTE *)(v130 + 24) = 1;
    }
    free(__p[0]);
    cva::ItemHandler::~ItemHandler((cva::ItemHandler *)&v238);
  }
  if (cva::DictionaryHandler::hasKey(v75, "identity_snapshot"))
  {
    if (!*(_BYTE *)(v223 + 1168 * v71 + 600))
    {
      sub_1C99072C4(&v238);
      v190 = "failure reading tracking dictionary: missing identity tensor uuid";
      v191 = 1264;
      goto LABEL_384;
    }
    cva::DictionaryHandler::item(v75, "identity_snapshot");
    cva::ItemHandler::getVector<float>();
    v133 = v223 + 1168 * v71;
    v134 = v133 + 32;
    if (*(_BYTE *)(v133 + 56))
    {
      v135 = *(void **)v134;
      *(void **)v134 = __p[0];
      __p[0] = v135;
      v136 = *(void **)(v134 + 8);
      *(void **)(v134 + 8) = __p[1];
      __p[1] = v136;
      *(_DWORD *)(v134 + 16) = __p[2];
      LODWORD(__p[2]) = 0;
    }
    else
    {
      *(_QWORD *)v134 = 0;
      *(_QWORD *)(v133 + 40) = 0;
      *(void **)v134 = __p[0];
      __p[0] = 0;
      *(void **)(v133 + 40) = __p[1];
      __p[1] = 0;
      *(_DWORD *)(v133 + 48) = __p[2];
      LODWORD(__p[2]) = 0;
      *(_BYTE *)(v133 + 56) = 1;
    }
    free(__p[0]);
    cva::ItemHandler::~ItemHandler((cva::ItemHandler *)&v238);
  }
  if (cva::DictionaryHandler::hasKey(v75, "faceprint_snapshot"))
  {
    cva::DictionaryHandler::item(v75, "faceprint_snapshot");
    cva::ItemHandler::getVector<float>();
    v137 = v223 + 1168 * v71;
    v138 = v137 + 64;
    if (*(_BYTE *)(v137 + 88))
    {
      v139 = *(void **)v138;
      *(void **)v138 = __p[0];
      __p[0] = v139;
      v140 = *(void **)(v138 + 8);
      *(void **)(v138 + 8) = __p[1];
      __p[1] = v140;
      *(_DWORD *)(v138 + 16) = __p[2];
      LODWORD(__p[2]) = 0;
    }
    else
    {
      *(_QWORD *)v138 = 0;
      *(_QWORD *)(v137 + 72) = 0;
      *(void **)v138 = __p[0];
      __p[0] = 0;
      *(void **)(v137 + 72) = __p[1];
      __p[1] = 0;
      *(_DWORD *)(v137 + 80) = __p[2];
      LODWORD(__p[2]) = 0;
      *(_BYTE *)(v137 + 88) = 1;
    }
    free(__p[0]);
    cva::ItemHandler::~ItemHandler((cva::ItemHandler *)&v238);
  }
  if (cva::DictionaryHandler::hasKey(v75, "recognition_framework_version"))
  {
    cva::DictionaryHandler::item(v75, "recognition_framework_version");
    cva::ItemHandler::getValue<std::string>();
    v141 = v223 + 1168 * v71;
    v142 = (void **)(v141 + 96);
    if (*(_BYTE *)(v141 + 120))
    {
      if (*(char *)(v141 + 119) < 0)
        operator delete(*v142);
      v143 = *(_OWORD *)__p;
      v142[2] = __p[2];
      *(_OWORD *)v142 = v143;
      HIBYTE(__p[2]) = 0;
      LOBYTE(__p[0]) = 0;
    }
    else
    {
      v144 = *(_OWORD *)__p;
      *(void **)(v141 + 112) = __p[2];
      *(_OWORD *)v142 = v144;
      memset(__p, 0, 24);
      *(_BYTE *)(v141 + 120) = 1;
      if (SHIBYTE(__p[2]) < 0)
        operator delete(__p[0]);
    }
    cva::ItemHandler::~ItemHandler((cva::ItemHandler *)&v238);
  }
  if (!cva::DictionaryHandler::hasKey(v75, "user_uuid"))
    goto LABEL_417;
  cva::DictionaryHandler::item(v75, "user_uuid");
  cva::ItemHandler::getValue<std::string>();
  sub_1C991DD10((uint64_t)&v238, (char *)__p);
  v145 = v223 + 1168 * v71;
  *(_BYTE *)(v145 + 144) = v239;
  *(_OWORD *)(v145 + 128) = v238;
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  cva::ItemHandler::~ItemHandler((cva::ItemHandler *)v229);
  if (*(_BYTE *)(v145 + 144))
  {
LABEL_417:
    if (cva::DictionaryHandler::hasKey(v75, "generic_tracking_info"))
    {
      cva::DictionaryHandler::item(v75, "generic_tracking_info");
      cva::ItemHandler::getDictionary((cva::ItemHandler *)&v238);
      v146 = v223 + 1168 * v71;
      v147 = *(_OWORD *)__p;
      __p[1] = 0;
      __p[0] = 0;
      v148 = *(std::__shared_weak_count **)(v146 + 632);
      *(_OWORD *)(v146 + 624) = v147;
      if (v148)
      {
        v149 = (unint64_t *)&v148->__shared_owners_;
        do
          v150 = __ldaxr(v149);
        while (__stlxr(v150 - 1, v149));
        if (!v150)
        {
          ((void (*)(std::__shared_weak_count *))v148->__on_zero_shared)(v148);
          std::__shared_weak_count::__release_weak(v148);
        }
      }
      v151 = (std::__shared_weak_count *)__p[1];
      if (__p[1])
      {
        v152 = (unint64_t *)((char *)__p[1] + 8);
        do
          v153 = __ldaxr(v152);
        while (__stlxr(v153 - 1, v152));
        if (!v153)
        {
          ((void (*)(std::__shared_weak_count *))v151->__on_zero_shared)(v151);
          std::__shared_weak_count::__release_weak(v151);
        }
      }
      cva::ItemHandler::~ItemHandler((cva::ItemHandler *)&v238);
    }
    if (cva::DictionaryHandler::hasKey(v75, "face_box"))
    {
      cva::DictionaryHandler::item(v75, "face_box");
      cva::ItemHandler::getDictionary((cva::ItemHandler *)&v238);
      v154 = (cva::DictionaryHandler *)__p[0];
      v155 = (std::__shared_weak_count *)__p[1];
      __p[1] = 0;
      __p[0] = 0;
      cva::ItemHandler::~ItemHandler((cva::ItemHandler *)&v238);
      LOBYTE(__p[3]) = 0;
      BYTE4(__p[3]) = 0;
      LOBYTE(__p[4]) = 0;
      __p[5] = 0;
      memset(__p, 0, 21);
      v156 = sub_1C9919C1C(v154, (uint64_t)__p);
      if ((v156 & 1) != 0)
      {
        v157 = v223 + 1168 * v71;
        v158 = *(unsigned __int8 *)(v157 + 920);
        *(_DWORD *)(v157 + 872) = __p[0];
        *(_OWORD *)(v157 + 876) = *(_OWORD *)((char *)__p + 4);
        *(_OWORD *)(v157 + 892) = *(_OWORD *)((char *)&__p[2] + 4);
        *(_OWORD *)(v157 + 904) = *(_OWORD *)&__p[4];
        if (!v158)
          *(_BYTE *)(v157 + 920) = 1;
      }
      else
      {
        sub_1C99072C4(&v238);
        sub_1C9907EC4(&v226, &v238, 0, 0, "[RELEASE ERROR  ]", "/Library/Caches/com.apple.xbs/Sources/AppleCVA/shared/src/modules/avatar/shrek/libs/alg/tracking/src/io/framesequencedata.cpp", 1298, "failure reading tracking dictionary: invalid face_box", v217);
        sub_1C9909318((uint64_t)&v226);
        sub_1C987C140((uint64_t)&v238);
      }
      if (v155)
      {
        v159 = (unint64_t *)&v155->__shared_owners_;
        do
          v160 = __ldaxr(v159);
        while (__stlxr(v160 - 1, v159));
        if (!v160)
        {
          ((void (*)(std::__shared_weak_count *))v155->__on_zero_shared)(v155);
          std::__shared_weak_count::__release_weak(v155);
        }
      }
      if (!v156)
        goto LABEL_385;
    }
    v49 = v219;
    v74 = v221;
    if (v220)
    {
      v161 = (unint64_t *)&v220->__shared_owners_;
      do
        v162 = __ldaxr(v161);
      while (__stlxr(v162 - 1, v161));
      if (!v162)
      {
        ((void (*)(std::__shared_weak_count *))v220->__on_zero_shared)(v220);
        std::__shared_weak_count::__release_weak(v220);
      }
    }
    goto LABEL_291;
  }
  sub_1C99072C4(&v238);
  v190 = "failure reading tracking dictionary: invalid user_uuid";
  v191 = 1283;
LABEL_384:
  sub_1C9907EC4(__p, &v238, 0, 0, "[RELEASE ERROR  ]", "/Library/Caches/com.apple.xbs/Sources/AppleCVA/shared/src/modules/avatar/shrek/libs/alg/tracking/src/io/framesequencedata.cpp", v191, v190, v217);
  sub_1C9909318((uint64_t)__p);
  sub_1C987C140((uint64_t)&v238);
LABEL_385:
  if (v220)
  {
    v210 = (unint64_t *)&v220->__shared_owners_;
    do
      v211 = __ldaxr(v210);
    while (__stlxr(v211 - 1, v210));
    if (!v211)
    {
      ((void (*)(std::__shared_weak_count *))v220->__on_zero_shared)(v220);
      std::__shared_weak_count::__release_weak(v220);
    }
  }
LABEL_390:
  if (!v222)
  {
    v31 = 0;
    goto LABEL_397;
  }
  v212 = (unint64_t *)&v222->__shared_owners_;
  v50 = v218;
  do
    v213 = __ldaxr(v212);
  while (__stlxr(v213 - 1, v212));
  if (!v213)
  {
    ((void (*)(std::__shared_weak_count *))v222->__on_zero_shared)(v222);
    std::__shared_weak_count::__release_weak(v222);
  }
  v31 = 0;
LABEL_398:
  if (v50)
  {
    v214 = (unint64_t *)&v50->__shared_owners_;
    do
      v215 = __ldaxr(v214);
    while (__stlxr(v215 - 1, v214));
    if (!v215)
    {
      ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
      std::__shared_weak_count::__release_weak(v50);
    }
  }
LABEL_114:
  v59 = v231;
  if (v231)
  {
    v60 = (unint64_t *)&v231->__shared_owners_;
    do
      v61 = __ldaxr(v60);
    while (__stlxr(v61 - 1, v60));
    if (!v61)
    {
      ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
      std::__shared_weak_count::__release_weak(v59);
    }
  }
LABEL_102:
  if (v3)
  {
    v53 = (unint64_t *)&v3->__shared_owners_;
    do
      v54 = __ldaxr(v53);
    while (__stlxr(v54 - 1, v53));
    if (!v54)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return v31;
}

uint64_t sub_1C991922C(cva::DictionaryHandler *a1, int8x8_t **a2, uint64_t a3, void ***a4)
{
  cva::ArrayHandler *v8;
  std::__shared_weak_count *v9;
  unsigned int v10;
  unint64_t v11;
  unsigned int v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  uint64_t v16;
  char v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  void **v23;
  int v24;
  size_t v25;
  void **v26;
  unint64_t *v27;
  size_t v28;
  int v29;
  __int128 v30;
  void **v31;
  unint64_t shared_weak_owners;
  void **v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  char *v38;
  char *v39;
  char *v40;
  __int128 v41;
  void **shared_owners;
  int v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  uint64_t v48;
  void *v49;
  size_t v50;
  size_t v51;
  unint64_t v52;
  std::__shared_weak_count *v53;
  std::__shared_weak_count *v54;
  uint64_t v55;
  int8x8_t *v56;
  uint64_t *p_memptr;
  unint64_t v58;
  unint64_t v59;
  int8x8_t v60;
  unint64_t v61;
  uint8x8_t v62;
  unint64_t v63;
  uint64_t **v64;
  uint64_t *v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char v76;
  uint64_t v77;
  __int128 *v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  int8x8_t v82;
  void **v83;
  unint64_t *v84;
  unint64_t v85;
  std::__shared_weak_count *v86;
  unint64_t *v87;
  unint64_t v88;
  unint64_t *v89;
  unint64_t v90;
  char v92;
  std::__shared_weak_count *v93;
  void ***v94;
  uint64_t v95;
  uint64_t v96;
  _QWORD v97[4];
  __int128 memptr;
  void *v99;
  _QWORD v100[36];
  _QWORD v101[36];
  uint64_t v102;
  std::__shared_weak_count *v103;
  void *__src;
  std::__shared_weak_count *v105;
  unsigned int v106;
  _QWORD v107[37];

  if (!cva::DictionaryHandler::hasKey(a1, "blendshapes"))
    return 0;
  if ((cva::DictionaryHandler::hasKey(a1, "blendshape_names") & 1) == 0)
  {
    sub_1C99072C4(&__src);
    sub_1C9907EC4(v107, &__src, 0, 0, "[RELEASE ERROR  ]", "/Library/Caches/com.apple.xbs/Sources/AppleCVA/shared/src/modules/avatar/shrek/libs/alg/tracking/src/io/framesequencedata.cpp", 525, "failure reading tracking dictionary: missing blendshape names", v92);
    sub_1C9909318((uint64_t)v107);
    v13 = v105;
    if (v105)
    {
      p_shared_owners = (unint64_t *)&v105->__shared_owners_;
      do
        v15 = __ldaxr(p_shared_owners);
      while (__stlxr(v15 - 1, p_shared_owners));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
    return 0;
  }
  v94 = a4;
  v95 = a3;
  cva::DictionaryHandler::item(a1, "blendshapes");
  cva::ItemHandler::getVector<float>();
  cva::ItemHandler::~ItemHandler((cva::ItemHandler *)&memptr);
  cva::DictionaryHandler::item(a1, "blendshape_names");
  cva::ItemHandler::getArray((cva::ItemHandler *)&v102);
  v9 = (std::__shared_weak_count *)*((_QWORD *)&memptr + 1);
  v8 = (cva::ArrayHandler *)memptr;
  memptr = 0uLL;
  cva::ItemHandler::~ItemHandler((cva::ItemHandler *)&v102);
  v10 = v106;
  if (v10 != cva::ArrayHandler::size(v8))
  {
    sub_1C99072C4(&memptr);
    v17 = v106;
    cva::ArrayHandler::size(v8);
    sub_1C9907EC4(v101, &memptr, 0, 0, "[RELEASE ERROR  ]", "/Library/Caches/com.apple.xbs/Sources/AppleCVA/shared/src/modules/avatar/shrek/libs/alg/tracking/src/io/framesequencedata.cpp", 534, "failure reading tracking dictionary: mismatching number of blendshapes %d vs %d", v17);
    sub_1C9909318((uint64_t)v101);
    v18 = (std::__shared_weak_count *)*((_QWORD *)&memptr + 1);
    if (*((_QWORD *)&memptr + 1))
    {
      v19 = (unint64_t *)(*((_QWORD *)&memptr + 1) + 8);
      do
        v20 = __ldaxr(v19);
      while (__stlxr(v20 - 1, v19));
LABEL_25:
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
    }
LABEL_27:
    v16 = 0;
    goto LABEL_154;
  }
  v11 = v106;
  v96 = v106;
  if (!*a2)
  {
    v21 = (std::__shared_weak_count *)operator new(0x30uLL);
    v21->__shared_owners_ = 0;
    v22 = (unint64_t *)&v21->__shared_owners_;
    v21[1].__vftable = 0;
    v23 = (void **)&v21[1].__vftable;
    v21->__shared_weak_owners_ = 0;
    v21->__vftable = (std::__shared_weak_count_vtbl *)&off_1E8295DB0;
    v21[1].__shared_owners_ = 0;
    v21[1].__shared_weak_owners_ = 0;
    v24 = cva::ArrayHandler::size(v8);
    v93 = v9;
    if (v24)
    {
      if (v24 < 0)
LABEL_161:
        abort();
      v25 = 3 * v24;
      v26 = (void **)operator new(v25 * 8);
      v21[1].__vftable = (std::__shared_weak_count_vtbl *)v26;
      v21[1].__shared_owners_ = (uint64_t)v26;
      v21[1].__shared_weak_owners_ = (uint64_t)&v26[v25];
      if ((int)v11 <= 0)
        goto LABEL_58;
    }
    else
    {
      v26 = 0;
      if ((int)v11 <= 0)
      {
        do
LABEL_58:
          v44 = __ldxr(v22);
        while (__stxr(v44 + 1, v22));
        v9 = v93;
        v45 = (std::__shared_weak_count *)v94[1];
        *v94 = v23;
        v94[1] = (void **)&v21->__vftable;
        if (v45)
        {
          v46 = (unint64_t *)&v45->__shared_owners_;
          do
            v47 = __ldaxr(v46);
          while (__stlxr(v47 - 1, v46));
          if (!v47)
          {
            ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
            std::__shared_weak_count::__release_weak(v45);
          }
        }
        if (&__src != (void **)v95)
        {
          v48 = v106;
          if (v106)
          {
            v49 = *(void **)v95;
            if (*(_QWORD *)(v95 + 8) >= (unint64_t)v106)
            {
              v50 = 4 * v106;
            }
            else
            {
              free(v49);
              v50 = 4 * v48;
              v51 = (4 * v48 + 31) & 0x7FFFFFFE0;
              *(_QWORD *)v95 = 0;
              *(_QWORD *)(v95 + 8) = v51 >> 2;
              *(_QWORD *)&memptr = 0;
              malloc_type_posix_memalign((void **)&memptr, 0x20uLL, v51, 0x49090899uLL);
              v49 = (void *)memptr;
              *(_QWORD *)v95 = memptr;
            }
            memcpy(v49, __src, v50);
          }
          else
          {
            free(*(void **)v95);
            *(_QWORD *)v95 = 0;
            *(_QWORD *)(v95 + 8) = 0;
          }
          *(_DWORD *)(v95 + 16) = v106;
        }
        do
          v52 = __ldaxr(v22);
        while (__stlxr(v52 - 1, v22));
        if (v52)
          goto LABEL_150;
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        v53 = v21;
        goto LABEL_153;
      }
    }
    v29 = 0;
    while (1)
    {
      cva::ArrayHandler::item(v8);
      cva::ItemHandler::getValue<std::string>();
      shared_weak_owners = v21[1].__shared_weak_owners_;
      if ((unint64_t)v26 < shared_weak_owners)
      {
        v30 = memptr;
        v26[2] = v99;
        *(_OWORD *)v26 = v30;
        v99 = 0;
        memptr = 0uLL;
        v31 = v26 + 3;
        v21[1].__shared_owners_ = (uint64_t)(v26 + 3);
      }
      else
      {
        v33 = (void **)*v23;
        v34 = 0xAAAAAAAAAAAAAAABLL * (((char *)v26 - (_BYTE *)*v23) >> 3);
        v35 = v34 + 1;
        if (v34 + 1 > 0xAAAAAAAAAAAAAAALL)
          goto LABEL_161;
        v36 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(shared_weak_owners - (_QWORD)v33) >> 3);
        if (2 * v36 > v35)
          v35 = 2 * v36;
        if (v36 >= 0x555555555555555)
          v37 = 0xAAAAAAAAAAAAAAALL;
        else
          v37 = v35;
        if (v37)
        {
          if (v37 > 0xAAAAAAAAAAAAAAALL)
            sub_1C9899D30();
          v38 = (char *)operator new(24 * v37);
        }
        else
        {
          v38 = 0;
        }
        v39 = &v38[24 * v34];
        *(_OWORD *)v39 = memptr;
        *((_QWORD *)v39 + 2) = v99;
        v40 = &v38[24 * v37];
        v99 = 0;
        memptr = 0uLL;
        v31 = (void **)(v39 + 24);
        if (v26 == v33)
        {
          v21[1].__vftable = (std::__shared_weak_count_vtbl *)v39;
          v21[1].__shared_owners_ = (uint64_t)v31;
          v21[1].__shared_weak_owners_ = (uint64_t)v40;
        }
        else
        {
          do
          {
            v41 = *(_OWORD *)(v26 - 3);
            *((_QWORD *)v39 - 1) = *(v26 - 1);
            *(_OWORD *)(v39 - 24) = v41;
            v39 -= 24;
            *(v26 - 2) = 0;
            *(v26 - 1) = 0;
            *(v26 - 3) = 0;
            v26 -= 3;
          }
          while (v26 != v33);
          v26 = (void **)&v21[1].~__shared_weak_count;
          shared_owners = (void **)v21[1].__shared_owners_;
          v21[1].__vftable = (std::__shared_weak_count_vtbl *)v39;
          v21[1].__shared_owners_ = (uint64_t)v31;
          v21[1].__shared_weak_owners_ = (uint64_t)v40;
          while (shared_owners != v26)
          {
            if (*((char *)shared_owners - 1) < 0)
              operator delete(*(shared_owners - 3));
            shared_owners -= 3;
          }
        }
        LODWORD(v11) = v96;
        if (v26)
          operator delete(v26);
        v43 = SHIBYTE(v99);
        v21[1].__shared_owners_ = (uint64_t)v31;
        if (v43 < 0)
          operator delete((void *)memptr);
      }
      cva::ItemHandler::~ItemHandler((cva::ItemHandler *)&v102);
      ++v29;
      v26 = v31;
      if (v29 == (_DWORD)v11)
        goto LABEL_58;
    }
  }
  if (v106 != -1431655765 * ((*(_QWORD *)(*(_QWORD *)*a2 + 8) - **(_QWORD **)*a2) >> 3))
  {
    sub_1C99072C4(&memptr);
    sub_1C9907EC4(v100, &memptr, 0, 0, "[RELEASE ERROR  ]", "/Library/Caches/com.apple.xbs/Sources/AppleCVA/shared/src/modules/avatar/shrek/libs/alg/tracking/src/io/framesequencedata.cpp", 543, "mismatching number of blendshapes %d vs %d", v11);
    sub_1C9909318((uint64_t)v100);
    v18 = (std::__shared_weak_count *)*((_QWORD *)&memptr + 1);
    if (*((_QWORD *)&memptr + 1))
    {
      v27 = (unint64_t *)(*((_QWORD *)&memptr + 1) + 8);
      do
        v20 = __ldaxr(v27);
      while (__stlxr(v20 - 1, v27));
      goto LABEL_25;
    }
    goto LABEL_27;
  }
  if (v106 == *(_DWORD *)(v95 + 16))
  {
    v12 = v106;
  }
  else
  {
    *(_DWORD *)(v95 + 16) = v106;
    if ((_DWORD)v11)
    {
      if (*(_QWORD *)(v95 + 8) < v11)
      {
        free(*(void **)v95);
        v28 = (4 * v11 + 31) & 0x7FFFFFFE0;
        *(_QWORD *)v95 = 0;
        *(_QWORD *)(v95 + 8) = v28 >> 2;
        *(_QWORD *)&memptr = 0;
        malloc_type_posix_memalign((void **)&memptr, 0x20uLL, v28, 0x49090899uLL);
        *(_QWORD *)v95 = memptr;
      }
    }
    else
    {
      free(*(void **)v95);
      *(_QWORD *)v95 = 0;
      *(_QWORD *)(v95 + 8) = 0;
    }
    v12 = *(_DWORD *)(v95 + 16);
  }
  v54 = v9;
  if (v12)
    bzero(*(void **)v95, 4 * v12);
  if ((int)v11 < 1)
  {
LABEL_143:
    v83 = (void **)**a2;
    v82 = (*a2)[1];
    if (v82)
    {
      v84 = (unint64_t *)(*(_QWORD *)&v82 + 8);
      do
        v85 = __ldxr(v84);
      while (__stxr(v85 + 1, v84));
    }
    v86 = (std::__shared_weak_count *)v94[1];
    *v94 = v83;
    v94[1] = (void **)v82;
    v9 = v54;
    if (!v86)
      goto LABEL_150;
    v87 = (unint64_t *)&v86->__shared_owners_;
    do
      v88 = __ldaxr(v87);
    while (__stlxr(v88 - 1, v87));
    if (v88)
    {
LABEL_150:
      v16 = 1;
      goto LABEL_154;
    }
    ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
    v53 = v86;
LABEL_153:
    std::__shared_weak_count::__release_weak(v53);
    v16 = 1;
    goto LABEL_154;
  }
  v55 = 0;
  while (2)
  {
    cva::ArrayHandler::item(v8);
    cva::ItemHandler::getValue<std::string>();
    cva::ItemHandler::~ItemHandler((cva::ItemHandler *)&v102);
    v56 = *a2;
    if (SHIBYTE(v99) >= 0)
      p_memptr = (uint64_t *)&memptr;
    else
      p_memptr = (uint64_t *)memptr;
    if (SHIBYTE(v99) >= 0)
      v58 = HIBYTE(v99);
    else
      v58 = *((_QWORD *)&memptr + 1);
    v59 = sub_1C9893030(p_memptr, v58);
    v60 = v56[3];
    if (!*(_QWORD *)&v60)
      goto LABEL_131;
    v61 = v59;
    v62 = (uint8x8_t)vcnt_s8(v60);
    v62.i16[0] = vaddlv_u8(v62);
    if (v62.u32[0] > 1uLL)
    {
      v63 = v59;
      if (v59 >= *(_QWORD *)&v60)
        v63 = v59 % *(_QWORD *)&v60;
    }
    else
    {
      v63 = (*(_QWORD *)&v60 - 1) & v59;
    }
    v64 = *(uint64_t ***)(*(_QWORD *)&v56[2] + 8 * v63);
    if (!v64)
      goto LABEL_131;
    v65 = *v64;
    if (!*v64)
      goto LABEL_131;
    if (v62.u32[0] < 2uLL)
    {
      v66 = *(_QWORD *)&v60 - 1;
      while (1)
      {
        v71 = v65[1];
        if (v61 == v71)
        {
          v72 = *((unsigned __int8 *)v65 + 39);
          if ((v72 & 0x80u) == 0)
            v73 = *((unsigned __int8 *)v65 + 39);
          else
            v73 = v65[3];
          if (v73 == v58)
          {
            if ((v72 & 0x80) != 0)
            {
              if (!memcmp((const void *)v65[2], p_memptr, v65[3]))
                goto LABEL_129;
            }
            else
            {
              if (!*((_BYTE *)v65 + 39))
                goto LABEL_129;
              v74 = 0;
              while (*((unsigned __int8 *)v65 + v74 + 16) == *((unsigned __int8 *)p_memptr + v74))
              {
                if (v72 == ++v74)
                  goto LABEL_128;
              }
            }
          }
        }
        else if ((v71 & v66) != v63)
        {
          goto LABEL_131;
        }
        v65 = (uint64_t *)*v65;
        if (!v65)
          goto LABEL_131;
      }
    }
    while (1)
    {
      v67 = v65[1];
      if (v61 != v67)
      {
        if (v67 >= *(_QWORD *)&v60)
          v67 %= *(_QWORD *)&v60;
        if (v67 != v63)
          goto LABEL_131;
        goto LABEL_97;
      }
      v68 = *((unsigned __int8 *)v65 + 39);
      if ((v68 & 0x80u) == 0)
        v69 = *((unsigned __int8 *)v65 + 39);
      else
        v69 = v65[3];
      if (v69 != v58)
        goto LABEL_97;
      if ((v68 & 0x80) != 0)
        break;
      if (!*((_BYTE *)v65 + 39))
        goto LABEL_129;
      v70 = 0;
      while (*((unsigned __int8 *)v65 + v70 + 16) == *((unsigned __int8 *)p_memptr + v70))
      {
        if (v68 == ++v70)
        {
LABEL_128:
          if (!v65)
            goto LABEL_131;
          goto LABEL_129;
        }
      }
LABEL_97:
      v65 = (uint64_t *)*v65;
      if (!v65)
        goto LABEL_131;
    }
    if (memcmp((const void *)v65[2], p_memptr, v65[3]))
      goto LABEL_97;
LABEL_129:
    v75 = *((unsigned int *)v65 + 10);
    if ((_DWORD)v75 != -1)
    {
      v76 = 0;
      v77 = v96;
      *(_DWORD *)(*(_QWORD *)v95 + 4 * v75) = *((_DWORD *)__src + v55);
      goto LABEL_139;
    }
LABEL_131:
    sub_1C99072C4(&v102);
    v78 = &memptr;
    if (SHIBYTE(v99) < 0)
      LOBYTE(v78) = memptr;
    sub_1C9907EC4(v97, &v102, 0, 0, "[RELEASE INFO   ]", "/Library/Caches/com.apple.xbs/Sources/AppleCVA/shared/src/modules/avatar/shrek/libs/alg/tracking/src/io/framesequencedata.cpp", 553, "unexpected blendshape name %s", (char)v78);
    sub_1C9909318((uint64_t)v97);
    v79 = v103;
    v77 = v96;
    if (v103)
    {
      v80 = (unint64_t *)&v103->__shared_owners_;
      do
        v81 = __ldaxr(v80);
      while (__stlxr(v81 - 1, v80));
      if (!v81)
      {
        ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
        std::__shared_weak_count::__release_weak(v79);
      }
    }
    v76 = 1;
LABEL_139:
    if (SHIBYTE(v99) < 0)
      operator delete((void *)memptr);
    if ((v76 & 1) == 0)
    {
      if (++v55 == v77)
        goto LABEL_143;
      continue;
    }
    break;
  }
  v16 = 0;
  v9 = v54;
LABEL_154:
  if (v9)
  {
    v89 = (unint64_t *)&v9->__shared_owners_;
    do
      v90 = __ldaxr(v89);
    while (__stlxr(v90 - 1, v89));
    if (!v90)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  free(__src);
  return v16;
}

uint64_t sub_1C9919C1C(cva::DictionaryHandler *a1, uint64_t a2)
{
  std::__shared_weak_count *v4;
  cva::DictionaryHandler *v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  std::__shared_weak_count *v17;
  char v18;
  _BYTE v19[16];

  if (!cva::DictionaryHandler::hasKey(a1, "face_box"))
    return 0;
  cva::DictionaryHandler::item(a1, "face_box");
  cva::ItemHandler::getDictionary((cva::ItemHandler *)v19);
  v5 = (cva::DictionaryHandler *)__p;
  v4 = v17;
  __p = 0;
  v17 = 0;
  cva::ItemHandler::~ItemHandler((cva::ItemHandler *)v19);
  if (!cva::DictionaryHandler::hasKey(v5, "x")
    || !cva::DictionaryHandler::hasKey(v5, "y")
    || !cva::DictionaryHandler::hasKey(v5, "w")
    || !cva::DictionaryHandler::hasKey(v5, "h"))
  {
    v12 = 0;
    if (!v4)
      return v12;
    goto LABEL_20;
  }
  cva::DictionaryHandler::item(v5, "x");
  cva::ItemHandler::getValue<float>();
  *(_DWORD *)(a2 + 4) = v6;
  cva::ItemHandler::~ItemHandler((cva::ItemHandler *)&__p);
  cva::DictionaryHandler::item(v5, "y");
  cva::ItemHandler::getValue<float>();
  *(_DWORD *)(a2 + 8) = v7;
  cva::ItemHandler::~ItemHandler((cva::ItemHandler *)&__p);
  cva::DictionaryHandler::item(v5, "w");
  cva::ItemHandler::getValue<float>();
  *(_DWORD *)(a2 + 12) = v8;
  cva::ItemHandler::~ItemHandler((cva::ItemHandler *)&__p);
  cva::DictionaryHandler::item(v5, "h");
  cva::ItemHandler::getValue<float>();
  *(_DWORD *)(a2 + 16) = v9;
  cva::ItemHandler::~ItemHandler((cva::ItemHandler *)&__p);
  *(_DWORD *)a2 = 0;
  *(_QWORD *)(a2 + 40) = 0;
  *(_DWORD *)(a2 + 20) = 0;
  *(_BYTE *)(a2 + 24) = 1;
  if (cva::DictionaryHandler::hasKey(a1, "face_box_roll"))
  {
    cva::DictionaryHandler::item(a1, "face_box_roll");
    cva::ItemHandler::getValue<float>();
    *(_DWORD *)(a2 + 20) = v10;
    *(_BYTE *)(a2 + 24) = 1;
    cva::ItemHandler::~ItemHandler((cva::ItemHandler *)&__p);
  }
  if (cva::DictionaryHandler::hasKey(a1, "face_box_yaw"))
  {
    cva::DictionaryHandler::item(a1, "face_box_yaw");
    cva::ItemHandler::getValue<float>();
    *(_DWORD *)(a2 + 28) = v11;
    *(_BYTE *)(a2 + 32) = 1;
    cva::ItemHandler::~ItemHandler((cva::ItemHandler *)&__p);
  }
  if (cva::DictionaryHandler::hasKey(a1, "face_detection_id"))
  {
    cva::DictionaryHandler::item(a1, "face_detection_id");
    *(_QWORD *)(a2 + 40) = cva::ItemHandler::getValue<unsigned long long>();
    cva::ItemHandler::~ItemHandler((cva::ItemHandler *)&__p);
  }
  if (cva::DictionaryHandler::hasKey(a1, "face_detector_type"))
  {
    cva::DictionaryHandler::item(a1, "face_detector_type");
    cva::ItemHandler::getValue<std::string>();
    *(_DWORD *)a2 = sub_1C9902908((unsigned __int8 **)&__p);
    if (v18 < 0)
      operator delete(__p);
    cva::ItemHandler::~ItemHandler((cva::ItemHandler *)v19);
  }
  v12 = 1;
  if (v4)
  {
LABEL_20:
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  return v12;
}

uint64_t sub_1C9919EF8(uint64_t a1)
{
  std::string **v2;

  *(_QWORD *)a1 = &off_1E8295070;
  v2 = (std::string **)(a1 + 24);
  sub_1C991B1D8(*(std::string **)(a1 + 24));
  sub_1C991B2A0(v2);
  return a1;
}

void sub_1C9919F38(uint64_t a1)
{
  std::string **v1;

  *(_QWORD *)a1 = &off_1E8295070;
  v1 = (std::string **)(a1 + 24);
  sub_1C991B1D8(*(std::string **)(a1 + 24));
  sub_1C991B2A0(v1);
  JUMPOUT(0x1CAA44AFCLL);
}

uint64_t sub_1C9919F88()
{
  return 1;
}

uint64_t sub_1C9919F90(uint64_t a1)
{
  sub_1C991B1D8(*(std::string **)(a1 + 24));
  return (*(uint64_t (**)(_QWORD))(***(_QWORD ***)(a1 + 24) + 24))(**(_QWORD **)(a1 + 24));
}

uint64_t sub_1C9919FC4(_QWORD *a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t result;

  v2 = (_QWORD *)a1[3];
  v3 = v2[6];
  if ((*((char *)v2 + 47) & 0x80000000) == 0)
  {
    if (v3 == *((unsigned __int8 *)v2 + 47))
      goto LABEL_3;
    return 0;
  }
  if (v3 != v2[4])
    return 0;
LABEL_3:
  result = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v2 + 32))(*v2);
  if ((_DWORD)result)
    return (*(uint64_t (**)(_QWORD *))(*a1 + 104))(a1) == a1[2];
  return result;
}

uint64_t sub_1C991A040()
{
  return 0;
}

uint64_t sub_1C991A04C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  _QWORD v11[36];

  if ((*(_DWORD *)(a1 + 8) & 3) != 1)
    return 0;
  v2 = *(_QWORD *)(a1 + 24);
  if (!*(_BYTE *)(v2 + 88))
  {
    v3 = *(_QWORD *)(*(_QWORD *)v2 + 16);
    while (1)
    {
      v4 = (*(uint64_t (**)(_QWORD, _QWORD))(***(_QWORD ***)(a1 + 24) + 128))(**(_QWORD **)(a1 + 24), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 64) - 8));
      if (((*(uint64_t (**)(_QWORD))(***(_QWORD ***)(a1 + 24) + 32))(**(_QWORD **)(a1 + 24)) & 1) != 0)
        break;
      if (!v4 || sub_1C991AD58(*(_QWORD **)(a1 + 24), (_DWORD *)(*(_QWORD *)(a1 + 24) + 92)) == -1)
        goto LABEL_10;
    }
    if ((v4 & 1) != 0)
      goto LABEL_15;
LABEL_10:
    sub_1C99072C4(&v9);
    sub_1C9907EC4(v11, &v9, 0, 0, "[RELEASE ERROR  ]", "/Library/Caches/com.apple.xbs/Sources/AppleCVA/shared/src/modules/avatar/shrek/libs/alg/utils/src/CompressedDevice.cpp", 551, "couldn't load data for size()", v9);
    sub_1C9909318((uint64_t)v11);
    v6 = v10;
    if (v10)
    {
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
LABEL_15:
    (*(void (**)(_QWORD, uint64_t))(***(_QWORD ***)(a1 + 24) + 128))(**(_QWORD **)(a1 + 24), v3);
    v2 = *(_QWORD *)(a1 + 24);
  }
  return *(_QWORD *)(*(_QWORD *)(v2 + 64) - 16);
}

uint64_t sub_1C991A198(_QWORD *a1)
{
  return (*(uint64_t (**)(_QWORD *))(*a1 + 104))(a1) - a1[2];
}

uint64_t sub_1C991A1C8(uint64_t a1, uint64_t a2)
{
  if ((*(_DWORD *)(a1 + 8) & 3) == 1)
    return sub_1C991B010((_QWORD *)a1, a2);
  else
    return 0;
}

unint64_t sub_1C991A1E4(uint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  BOOL v11;
  size_t v12;
  size_t v13;
  unint64_t v14;
  size_t v15;

  if (a3)
  {
    v6 = 0;
    while (1)
    {
      while (1)
      {
        v7 = *(_QWORD *)(a1 + 24);
        v8 = *(_QWORD *)(v7 + 48);
        v9 = (_QWORD *)(v7 + 24);
        if (*(char *)(v7 + 47) < 0)
          break;
        v10 = *(unsigned __int8 *)(v7 + 47);
        v11 = v10 > v8;
        v12 = v10 - v8;
        if (!v11)
          goto LABEL_3;
        if (v12 >= a3 - v6)
          v13 = a3 - v6;
        else
          v13 = v12;
        if (v13)
          goto LABEL_12;
LABEL_13:
        v6 += v13;
        *(_QWORD *)(v7 + 48) = v8 + v13;
        if (v6 >= a3)
          return v6;
      }
      v14 = *(_QWORD *)(v7 + 32);
      v11 = v14 > v8;
      v15 = v14 - v8;
      if (v11)
      {
        if (v15 >= a3 - v6)
          v13 = a3 - v6;
        else
          v13 = v15;
        v9 = (_QWORD *)*v9;
        if (!v13)
          goto LABEL_13;
LABEL_12:
        memmove((void *)(a2 + v6), (char *)v9 + v8, v13);
        v7 = *(_QWORD *)(a1 + 24);
        v8 = *(_QWORD *)(v7 + 48);
        goto LABEL_13;
      }
LABEL_3:
      if (!sub_1C991AB34((_QWORD *)v7) || v6 >= a3)
        return v6;
    }
  }
  return 0;
}

unint64_t sub_1C991A2C0(uint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  std::string *v7;
  int v8;
  size_t v9;
  size_t v10;
  char *v11;
  char *v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  size_t v17;
  unint64_t v18;
  size_t v20;
  unint64_t v21;
  uint64_t v22;
  _BYTE *v23;
  _BYTE *v24;
  void **p_dst;
  uint64_t v26;
  uint64_t v27;
  const std::string::value_type *v28;
  std::string::size_type v29;
  _BYTE *v30;
  size_t v31;
  __int128 *v32;
  _OWORD *v33;
  size_t v34;
  __int128 v35;
  char v36;
  size_t v37;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void **__dst;
  size_t v43;
  int64_t v44;

  v41 = a2;
  if (a3)
  {
    v3 = a3;
    v4 = a1;
    v5 = 0;
    v39 = a3;
    v40 = a1;
    while (1)
    {
      v6 = *(_QWORD *)(v4 + 24);
      v7 = (std::string *)(v6 + 24);
      v8 = *(char *)(v6 + 47);
      if ((v8 & 0x80000000) == 0)
        break;
      v16 = *(_QWORD *)(v6 + 32);
      if (!(v16 >> 24))
      {
        v17 = 0x1000000 - v16;
        if (v17 >= v3 - v5)
          v10 = v3 - v5;
        else
          v10 = v17;
        if (v10)
        {
          v11 = (char *)(v41 + v5);
          v12 = (char *)(v41 + v5 + v10);
          v9 = *(_QWORD *)(v6 + 32);
          v18 = *(_QWORD *)(v6 + 40);
          v14 = (v18 & 0x7FFFFFFFFFFFFFFFLL) - 1;
          v15 = *(_QWORD *)(v6 + 24);
          v13 = HIBYTE(v18);
LABEL_18:
          if (v15 <= (unint64_t)v11 && v15 + v9 + 1 > (unint64_t)v11)
          {
            if (v10 > 0x16)
            {
              v26 = (v10 & 0x1FFFFF8) + 8;
              if ((v10 | 7) != 0x17)
                v26 = v10 | 7;
              v27 = v26 + 1;
              p_dst = (void **)operator new(v26 + 1);
              v43 = v10;
              v44 = v27 | 0x8000000000000000;
              __dst = p_dst;
            }
            else
            {
              HIBYTE(v44) = v10;
              p_dst = (void **)&__dst;
            }
            memcpy(p_dst, v11, v10);
            *((_BYTE *)p_dst + v10) = 0;
            if (v44 >= 0)
              v28 = (const std::string::value_type *)&__dst;
            else
              v28 = (const std::string::value_type *)__dst;
            if (v44 >= 0)
              v29 = HIBYTE(v44);
            else
              v29 = v43;
            std::string::append(v7, v28, v29);
            if (SHIBYTE(v44) < 0)
              operator delete(__dst);
            v4 = v40;
          }
          else
          {
            if (v14 - v9 >= v10)
            {
              if ((v13 & 0x80) != 0)
                v24 = (_BYTE *)v7->__r_.__value_.__r.__words[0];
              else
                v24 = (_BYTE *)(v6 + 24);
            }
            else
            {
              if (0x7FFFFFFFFFFFFFF7 - v14 < v10 + v9 - v14)
                abort();
              if (v8 < 0)
                v7 = (std::string *)v7->__r_.__value_.__r.__words[0];
              v20 = 0x7FFFFFFFFFFFFFF7;
              if (v14 <= 0x3FFFFFFFFFFFFFF2)
              {
                v21 = 2 * v14;
                if (v10 + v9 > 2 * v14)
                  v21 = v10 + v9;
                v22 = (v21 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v21 | 7) != 0x17)
                  v22 = v21 | 7;
                if (v21 >= 0x17)
                  v20 = v22 + 1;
                else
                  v20 = 23;
              }
              v23 = operator new(v20);
              v24 = v23;
              if (v9)
                memmove(v23, v7, v9);
              if (v14 != 22)
                operator delete(v7);
              *(_QWORD *)(v6 + 32) = v9;
              *(_QWORD *)(v6 + 40) = v20 | 0x8000000000000000;
              *(_QWORD *)(v6 + 24) = v24;
              v4 = v40;
            }
            v30 = &v24[v9];
            if (v10 >= 0x20)
            {
              if ((unint64_t)(&v24[v9] - v11) < 0x20)
              {
                v3 = v39;
                goto LABEL_65;
              }
              v31 = v10 & 0x1FFFFE0;
              v30 += v31;
              v32 = (__int128 *)(v11 + 16);
              v33 = &v24[v9 + 16];
              v34 = v31;
              do
              {
                v35 = *v32;
                *(v33 - 1) = *(v32 - 1);
                *v33 = v35;
                v32 += 2;
                v33 += 2;
                v34 -= 32;
              }
              while (v34);
              v3 = v39;
              if (v10 != v31)
              {
                v11 += v31;
                goto LABEL_65;
              }
            }
            else
            {
              v3 = v39;
              do
              {
LABEL_65:
                v36 = *v11++;
                *v30++ = v36;
              }
              while (v11 != v12);
            }
            *v30 = 0;
            v37 = v10 + v9;
            if (*(char *)(v6 + 47) < 0)
              *(_QWORD *)(v6 + 32) = v37;
            else
              *(_BYTE *)(v6 + 47) = v37 & 0x7F;
          }
        }
LABEL_4:
        v5 += v10;
        goto LABEL_5;
      }
      if (!sub_1C991A5E0(*(std::string **)(v4 + 24)))
        return v5;
LABEL_5:
      if (v5 >= v3)
        return v5;
    }
    v9 = *(unsigned __int8 *)(v6 + 47);
    if (0x1000000 - v9 >= v3 - v5)
      v10 = v3 - v5;
    else
      v10 = 0x1000000 - *(unsigned __int8 *)(v6 + 47);
    if (v10)
    {
      v11 = (char *)(v41 + v5);
      v12 = (char *)(v41 + v5 + v10);
      LOBYTE(v13) = *(_BYTE *)(v6 + 47);
      v14 = 22;
      v15 = v6 + 24;
      goto LABEL_18;
    }
    goto LABEL_4;
  }
  return 0;
}

uint64_t sub_1C991A5E0(std::string *a1)
{
  void **p_data;
  uint64_t v3;
  std::string::size_type *p_size;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *data;
  _QWORD *size;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  int v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  std::string::size_type v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  std::string::size_type v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  void **v28;
  unint64_t v29;
  std::string::size_type v30;
  uint64_t v31;
  uint64_t v32;
  std::string::size_type v34;
  uint64_t v35;
  void **v36;
  char v37;
  char *v38;
  void *__p[2];
  int64_t v40;
  unint64_t v41;
  std::__shared_weak_count *v42;
  _OWORD v43[18];

  if ((SHIBYTE(a1[1].__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (*((_BYTE *)&a1[1].__r_.__value_.__s + 23))
      goto LABEL_3;
    return 1;
  }
  if (!a1[1].__r_.__value_.__l.__size_)
    return 1;
LABEL_3:
  p_data = (void **)&a1[1].__r_.__value_.__l.__data_;
  v3 = *(_QWORD *)(a1->__r_.__value_.__r.__words[0] + 16);
  p_size = &a1[2].__r_.__value_.__l.__size_;
  v5 = (_QWORD *)a1[2].__r_.__value_.__r.__words[2];
  v6 = *(v5 - 1);
  if (v3 != v6)
  {
    data = a1[3].__r_.__value_.__l.__data_;
    size = (_QWORD *)a1[2].__r_.__value_.__l.__size_;
    if (data == size)
    {
      if (data)
      {
        a1[2].__r_.__value_.__r.__words[2] = (std::string::size_type)data;
        operator delete(data);
        *p_size = 0;
        a1[2].__r_.__value_.__r.__words[2] = 0;
        a1[3].__r_.__value_.__r.__words[0] = 0;
      }
      v11 = operator new(0x10uLL);
      a1[2].__r_.__value_.__l.__size_ = (std::string::size_type)v11;
      v9 = v11 + 2;
      a1[3].__r_.__value_.__r.__words[0] = (std::string::size_type)(v11 + 2);
      *v11 = 0;
      v11[1] = 0;
    }
    else if (v5 == size)
    {
      *v5 = 0;
      v5[1] = 0;
      v9 = v5 + 2;
    }
    else
    {
      *size = 0;
      size[1] = 0;
      v9 = size + 2;
    }
    a1[2].__r_.__value_.__r.__words[2] = (std::string::size_type)v9;
    a1[3].__r_.__value_.__l.__size_ = 0;
  }
  __p[0] = 0;
  __p[1] = 0;
  v40 = 0;
  v12 = HIDWORD(a1[3].__r_.__value_.__r.__words[2]);
  if (v12 == -1)
  {
    sub_1C99072C4(&v41);
    sub_1C9907EC4(v43, &v41, 0, 0, "[RELEASE ERROR  ]", "/Library/Caches/com.apple.xbs/Sources/AppleCVA/shared/src/modules/avatar/shrek/libs/alg/utils/src/CompressedDevice.cpp", 206, "missing legacy compression!", v37);
    sub_1C9909318((uint64_t)v43);
    v14 = v42;
    if (v42)
    {
      p_shared_owners = (unint64_t *)&v42->__shared_owners_;
      do
        v16 = __ldaxr(p_shared_owners);
      while (__stlxr(v16 - 1, p_shared_owners));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
LABEL_25:
    LOBYTE(v13) = HIBYTE(v40);
    if ((SHIBYTE(v40) & 0x80000000) == 0)
      goto LABEL_26;
    goto LABEL_28;
  }
  if (v12 || __p == p_data)
    goto LABEL_25;
  if ((SHIBYTE(a1[1].__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    *(_OWORD *)__p = *(_OWORD *)p_data;
    v40 = a1[1].__r_.__value_.__r.__words[2];
    LOBYTE(v13) = HIBYTE(v40);
    if (SHIBYTE(v40) < 0)
      goto LABEL_28;
LABEL_26:
    v13 = v13;
    goto LABEL_29;
  }
  sub_1C98A96AC(__p, a1[1].__r_.__value_.__l.__data_, a1[1].__r_.__value_.__l.__size_);
  LOBYTE(v13) = HIBYTE(v40);
  if ((SHIBYTE(v40) & 0x80000000) == 0)
    goto LABEL_26;
LABEL_28:
  v13 = (unint64_t)__p[1];
LABEL_29:
  v41 = v13;
  if (HIDWORD(a1[3].__r_.__value_.__r.__words[2]) == -1)
  {
    *(_QWORD *)&v43[0] = v13;
    v38 = (char *)(v13 + 0x277C6CE4B6031);
    v22 = (_QWORD *)a1->__r_.__value_.__r.__words[0];
    if (*(_DWORD *)(a1->__r_.__value_.__r.__words[0] + 8) == 1)
      goto LABEL_68;
    v23 = (*(uint64_t (**)(std::string::size_type, char **, uint64_t))(*v22 + 152))(a1->__r_.__value_.__r.__words[0], &v38, 8);
    if (v23 < 1)
      goto LABEL_68;
    v22[2] += v23;
    if (v23 != 8)
      goto LABEL_68;
    v24 = (_QWORD *)a1->__r_.__value_.__r.__words[0];
    if (*(_DWORD *)(a1->__r_.__value_.__r.__words[0] + 8) == 1)
      goto LABEL_68;
    v25 = (*(uint64_t (**)(std::string::size_type, _OWORD *, uint64_t))(*v24 + 152))(a1->__r_.__value_.__r.__words[0], v43, 8);
    if (v25 < 1)
      goto LABEL_68;
    v24[2] += v25;
    if (v25 != 8)
      goto LABEL_68;
    v26 = (_QWORD *)a1->__r_.__value_.__r.__words[0];
    if (*(_DWORD *)(a1->__r_.__value_.__r.__words[0] + 8) == 1)
    {
      v27 = -1;
    }
    else
    {
      if (v40 >= 0)
        v28 = __p;
      else
        v28 = (void **)__p[0];
      v27 = (*(uint64_t (**)(std::string::size_type, void **, _QWORD))(*v26 + 152))(a1->__r_.__value_.__r.__words[0], v28, *(_QWORD *)&v43[0]);
      if (v27 >= 1)
        v26[2] += v27;
    }
    v29 = *(_QWORD *)&v43[0];
  }
  else
  {
    v17 = a1->__r_.__value_.__r.__words[0];
    *(_QWORD *)&v43[0] = 0x277C6CE4B6030;
    if (*(_DWORD *)(v17 + 8) == 1)
      goto LABEL_68;
    v18 = (*(uint64_t (**)(std::string::size_type, _OWORD *, uint64_t))(*(_QWORD *)v17 + 152))(v17, v43, 8);
    if (v18 <= 0)
      goto LABEL_68;
    *(_QWORD *)(v17 + 16) += v18;
    if (v18 != 8)
      goto LABEL_68;
    LODWORD(v43[0]) = 0;
    if (*(_DWORD *)(v17 + 8) == 1)
      goto LABEL_68;
    v19 = (*(uint64_t (**)(std::string::size_type, _OWORD *, uint64_t))(*(_QWORD *)v17 + 152))(v17, v43, 4);
    if (v19 <= 0)
      goto LABEL_68;
    *(_QWORD *)(v17 + 16) += v19;
    if (v19 != 4)
      goto LABEL_68;
    LODWORD(v43[0]) = HIDWORD(a1[3].__r_.__value_.__r.__words[2]);
    if (*(_DWORD *)(v17 + 8) == 1)
      goto LABEL_68;
    v20 = (*(uint64_t (**)(std::string::size_type, _OWORD *, uint64_t))(*(_QWORD *)v17 + 152))(v17, v43, 4);
    if (v20 <= 0)
      goto LABEL_68;
    *(_QWORD *)(v17 + 16) += v20;
    if (v20 != 4)
      goto LABEL_68;
    v21 = SHIBYTE(a1[1].__r_.__value_.__r.__words[2]) < 0
        ? a1[1].__r_.__value_.__l.__size_
        : HIBYTE(a1[1].__r_.__value_.__r.__words[2]);
    *(_QWORD *)&v43[0] = v21;
    if (*(_DWORD *)(v17 + 8) == 1)
      goto LABEL_68;
    v31 = (*(uint64_t (**)(std::string::size_type, _OWORD *, uint64_t))(*(_QWORD *)v17 + 152))(v17, v43, 8);
    if (v31 <= 0)
      goto LABEL_68;
    *(_QWORD *)(v17 + 16) += v31;
    if (v31 != 8)
      goto LABEL_68;
    if (*(_DWORD *)(v17 + 8) == 1)
      goto LABEL_68;
    v32 = (*(uint64_t (**)(std::string::size_type, unint64_t *, uint64_t))(*(_QWORD *)v17 + 152))(v17, &v41, 8);
    if (v32 < 1)
      goto LABEL_68;
    *(_QWORD *)(v17 + 16) += v32;
    if (v32 != 8)
      goto LABEL_68;
    if (*(_DWORD *)(v17 + 8) == 1)
    {
      v27 = -1;
      v29 = v41;
    }
    else
    {
      if (v40 >= 0)
        v36 = __p;
      else
        v36 = (void **)__p[0];
      v27 = (*(uint64_t (**)(std::string::size_type, void **, unint64_t))(*(_QWORD *)v17 + 152))(v17, v36, v41);
      if (v27 >= 1)
        *(_QWORD *)(v17 + 16) += v27;
      v29 = v41;
    }
  }
  if (v27 == v29)
  {
    if (v3 == v6)
    {
      if (SHIBYTE(a1[1].__r_.__value_.__r.__words[2]) < 0)
        v30 = a1[1].__r_.__value_.__l.__size_;
      else
        v30 = HIBYTE(a1[1].__r_.__value_.__r.__words[2]);
      v34 = v30 + *(_QWORD *)(a1[2].__r_.__value_.__r.__words[2] - 16);
      v35 = *(_QWORD *)(a1->__r_.__value_.__r.__words[0] + 16);
      *(_QWORD *)&v43[0] = v34;
      *((_QWORD *)&v43[0] + 1) = v35;
      sub_1C9915270((char **)&a1[2].__r_.__value_.__l.__size_, v43);
      ++a1[3].__r_.__value_.__l.__size_;
    }
    a1[2].__r_.__value_.__r.__words[0] = 0;
    std::string::reserve(a1 + 1, 0x1000000uLL);
    if (SHIBYTE(a1[1].__r_.__value_.__r.__words[2]) < 0)
    {
      p_data = (void **)a1[1].__r_.__value_.__l.__data_;
      a1[1].__r_.__value_.__l.__size_ = 0;
    }
    else
    {
      *((_BYTE *)&a1[1].__r_.__value_.__s + 23) = 0;
    }
    *(_BYTE *)p_data = 0;
    v10 = 1;
    if (SHIBYTE(v40) < 0)
      goto LABEL_69;
    return v10;
  }
LABEL_68:
  v10 = 0;
  if (SHIBYTE(v40) < 0)
LABEL_69:
    operator delete(__p[0]);
  return v10;
}

uint64_t sub_1C991AB34(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  std::string::size_type v4;
  std::string::size_type v5;
  _QWORD *v6;
  uint64_t v7;
  std::string *p_p;
  int v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::string::size_type v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  std::string __p;
  uint64_t v23;
  std::__shared_weak_count *v24;
  _QWORD v25[40];

  if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)*a1 + 32))(*a1))
  {
    v2 = 0;
    *((_BYTE *)a1 + 88) = 1;
    return v2;
  }
  v3 = *(_QWORD *)(*a1 + 16);
  v4 = sub_1C991AD58(a1, (_DWORD *)a1 + 23);
  if (v4 == -1)
  {
    (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*a1 + 128))(*a1, v3);
    return 0;
  }
  v5 = v4;
  memset(&__p, 0, sizeof(__p));
  if (v4)
    std::string::append(&__p, v4, 0);
  v6 = (_QWORD *)*a1;
  if (*(_DWORD *)(*a1 + 8) == 2)
  {
    v7 = -1;
  }
  else
  {
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    v7 = (*(uint64_t (**)(_QWORD, std::string *, std::string::size_type))(*v6 + 144))(*a1, p_p, v5);
    if (v7 >= 1)
      v6[2] += v7;
  }
  if (v7 != v5)
    goto LABEL_22;
  v9 = *((_DWORD *)a1 + 23);
  if (v9)
  {
    if (v9 == -1)
    {
      sub_1C99072C4(&v23);
      sub_1C9907EC4(v25, &v23, 0, 0, "[RELEASE ERROR  ]", "/Library/Caches/com.apple.xbs/Sources/AppleCVA/shared/src/modules/avatar/shrek/libs/alg/utils/src/CompressedDevice.cpp", 232, "missing legacy compression!", __p.__r_.__value_.__s.__data_[0]);
      sub_1C9909318((uint64_t)v25);
      v10 = v24;
      if (v24)
      {
        p_shared_owners = (unint64_t *)&v24->__shared_owners_;
        do
          v12 = __ldaxr(p_shared_owners);
        while (__stlxr(v12 - 1, p_shared_owners));
        if (!v12)
        {
          ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
          std::__shared_weak_count::__release_weak(v10);
        }
      }
    }
LABEL_22:
    v2 = 0;
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return v2;
LABEL_23:
    operator delete(__p.__r_.__value_.__l.__data_);
    return v2;
  }
  v14 = a1[5];
  v15 = *(_OWORD *)(a1 + 3);
  *((std::string *)a1 + 1) = __p;
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v15;
  __p.__r_.__value_.__r.__words[2] = v14;
  v16 = a1[7];
  v17 = (a1[8] - v16) >> 4;
  v18 = v17 - 1;
  v19 = (uint64_t *)(v16 + 24);
  v20 = 1;
  while (v17 != v20)
  {
    v21 = *v19;
    v19 += 2;
    ++v20;
    if (v21 == *(_QWORD *)(*a1 + 16))
    {
      v18 = v20 - 2;
      break;
    }
  }
  a1[10] = v18;
  a1[6] = 0;
  v2 = 1;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_23;
  return v2;
}

uint64_t sub_1C991AD58(_QWORD *a1, _DWORD *a2)
{
  _QWORD *v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  char v20;
  uint64_t v21;
  __int128 v22;
  _QWORD v23[36];
  uint64_t v24;
  uint64_t v25;

  if (((*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 32))(*a1) & 1) != 0)
    return -1;
  v4 = (_QWORD *)*a1;
  v5 = *(_QWORD *)(*a1 + 16);
  v6 = *(_QWORD *)(a1[8] - 8);
  if (v5 > v6)
    return -1;
  v24 = 0;
  v25 = 0;
  if (*((_DWORD *)a1 + 23) == -1)
  {
    sub_1C99072C4(&v22);
    sub_1C9907EC4(v23, &v22, 0, 0, "[RELEASE ERROR  ]", "/Library/Caches/com.apple.xbs/Sources/AppleCVA/shared/src/modules/avatar/shrek/libs/alg/utils/src/CompressedDevice.cpp", 271, "missing legacy compression!", v20);
    sub_1C9909318((uint64_t)v23);
    v17 = (std::__shared_weak_count *)*((_QWORD *)&v22 + 1);
    if (*((_QWORD *)&v22 + 1))
    {
      v18 = (unint64_t *)(*((_QWORD *)&v22 + 1) + 8);
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
    return -1;
  }
  v21 = 0;
  *(_QWORD *)&v22 = 0;
  if (*((_DWORD *)v4 + 2) == 2)
    return -1;
  v7 = (*(uint64_t (**)(_QWORD *, __int128 *, uint64_t))(*v4 + 144))(v4, &v22, 8);
  if (v7 < 1)
    return -1;
  v4[2] += v7;
  if (v7 != 8 || (_QWORD)v22 != 0x277C6CE4B6030)
    return -1;
  if (*((_DWORD *)v4 + 2) == 2)
    return -1;
  v9 = (*(uint64_t (**)(_QWORD *, char *, uint64_t))(*v4 + 144))(v4, (char *)&v21 + 4, 4);
  if (v9 < 1)
    return -1;
  v4[2] += v9;
  if (v9 != 4 || HIDWORD(v21) != 0)
    return -1;
  if (*((_DWORD *)v4 + 2) == 2)
    return -1;
  v11 = (*(uint64_t (**)(_QWORD *, uint64_t *, uint64_t))(*v4 + 144))(v4, &v21, 4);
  if (v11 < 1)
    return -1;
  v4[2] += v11;
  if (v11 != 4)
    return -1;
  if ((_DWORD)v21)
    return -1;
  v12 = *((_DWORD *)a1 + 23);
  if (v12)
  {
    if (v12 != -2)
      return -1;
  }
  if (*((_DWORD *)v4 + 2) == 2)
    return -1;
  v13 = (*(uint64_t (**)(_QWORD *, uint64_t *, uint64_t))(*v4 + 144))(v4, &v24, 8);
  if (v13 < 1)
    return -1;
  v4[2] += v13;
  if (v13 != 8)
    return -1;
  if (*((_DWORD *)v4 + 2) == 2)
    return -1;
  v14 = (*(uint64_t (**)(_QWORD *, uint64_t *, uint64_t))(*v4 + 144))(v4, &v25, 8);
  if (v14 < 1)
    return -1;
  v4[2] += v14;
  if (v14 != 8)
    return -1;
  *a2 = v21;
  result = v25;
  if (v5 == v6)
  {
    v16 = v25 + *(_QWORD *)(*a1 + 16);
    *(_QWORD *)&v22 = v24 + *(_QWORD *)(a1[8] - 16);
    *((_QWORD *)&v22 + 1) = v16;
    sub_1C9915270((char **)a1 + 7, &v22);
    return v25;
  }
  return result;
}

uint64_t sub_1C991B010(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;

  if (a2 < 0)
    return 0;
  v4 = a1[3];
  if (*(_BYTE *)(v4 + 88))
  {
    if ((*(uint64_t (**)(_QWORD *))(*a1 + 104))(a1) < a2)
      return 0;
    v4 = a1[3];
  }
  v5 = *(_QWORD *)(v4 + 80);
  v6 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 16 * v5);
  if (*(char *)(v4 + 47) < 0)
    v7 = *(_QWORD *)(v4 + 32);
  else
    v7 = *(unsigned __int8 *)(v4 + 47);
  v9 = v7 + v6;
  v10 = __OFSUB__(a2, v6);
  v11 = a2 - v6;
  if (v11 < 0 != v10 || v9 < a2)
  {
    v13 = *(_QWORD *)(*(_QWORD *)v4 + 16);
    while (1)
    {
      v14 = (_QWORD *)a1[3];
      v15 = v14[8];
      if (*(_QWORD *)(v15 - 16) >= a2)
        break;
      if (!(*(unsigned int (**)(_QWORD, _QWORD))(*(_QWORD *)*v14 + 128))(*v14, *(_QWORD *)(v15 - 8))
        || ((*(uint64_t (**)(_QWORD))(**(_QWORD **)a1[3] + 32))(*(_QWORD *)a1[3]) & 1) != 0
        || sub_1C991AD58((_QWORD *)a1[3], (_DWORD *)(a1[3] + 92)) == -1)
      {
        goto LABEL_19;
      }
    }
    v17 = v14[7];
    v18 = v15 - v17;
    v19 = (int)(v18 >> 4);
    v20 = (uint64_t *)(v17 + 16 * (int)((unint64_t)v18 >> 4) - 16);
    do
    {
      --v19;
      v21 = *v20;
      v20 -= 2;
    }
    while (v21 > a2);
    v22 = (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*v14 + 128))(*v14, *(_QWORD *)(v17 + 16 * v19 + 8));
    v16 = (_QWORD *)a1[3];
    v23 = *(_QWORD *)(v16[7] + 16 * (int)v19);
    v24 = a2 - v23;
    if (v22)
    {
      if (a2 == v23)
      {
        if (*((char *)v16 + 47) < 0)
        {
          *(_BYTE *)v16[3] = 0;
          v16[4] = 0;
        }
        else
        {
          *((_BYTE *)v16 + 24) = 0;
          *((_BYTE *)v16 + 47) = 0;
        }
        goto LABEL_33;
      }
      if (sub_1C991AB34(v16))
      {
LABEL_33:
        v26 = a1[3];
        *(_QWORD *)(v26 + 48) = v24;
        *(_QWORD *)(v26 + 80) = (int)v19;
        goto LABEL_22;
      }
LABEL_19:
      v16 = (_QWORD *)a1[3];
    }
    v16[10] = v5;
    (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v16 + 128))(*v16, v13);
    return 0;
  }
  *(_QWORD *)(v4 + 48) = v11;
LABEL_22:
  a1[2] = a2;
  return 1;
}

void sub_1C991B1D8(std::string *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  _QWORD v7[36];

  if ((*(unsigned int (**)(std::string::size_type))(*(_QWORD *)a1->__r_.__value_.__l.__data_ + 16))(a1->__r_.__value_.__r.__words[0]))
  {
    if ((*(_BYTE *)(a1->__r_.__value_.__r.__words[0] + 8) & 2) != 0 && (sub_1C991A5E0(a1) & 1) == 0)
    {
      sub_1C99072C4(&v5);
      sub_1C9907EC4(v7, &v5, 0, 0, "[RELEASE ERROR  ]", "/Library/Caches/com.apple.xbs/Sources/AppleCVA/shared/src/modules/avatar/shrek/libs/alg/utils/src/CompressedDevice.cpp", 439, "Could not write final block", v5);
      sub_1C9909318((uint64_t)v7);
      v2 = v6;
      if (v6)
      {
        p_shared_owners = (unint64_t *)&v6->__shared_owners_;
        do
          v4 = __ldaxr(p_shared_owners);
        while (__stlxr(v4 - 1, p_shared_owners));
        if (!v4)
        {
          ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
          std::__shared_weak_count::__release_weak(v2);
        }
      }
    }
  }
}

std::string **sub_1C991B2A0(std::string **a1)
{
  std::string *v2;
  void *size;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  v2 = *a1;
  if (*a1)
  {
    sub_1C991B1D8(*a1);
    size = (void *)v2[2].__r_.__value_.__l.__size_;
    if (size)
    {
      v2[2].__r_.__value_.__r.__words[2] = (std::string::size_type)size;
      operator delete(size);
    }
    if (SHIBYTE(v2[1].__r_.__value_.__r.__words[2]) < 0)
      operator delete(v2[1].__r_.__value_.__l.__data_);
    v4 = (std::__shared_weak_count *)v2->__r_.__value_.__r.__words[2];
    if (v4)
    {
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v6 = __ldaxr(p_shared_owners);
      while (__stlxr(v6 - 1, p_shared_owners));
      if (!v6)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
    MEMORY[0x1CAA44AFC](v2, 0x1072C40C1316463);
  }
  return a1;
}

void sub_1C991B348(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *v2;
  unint64_t v3;
  _QWORD *v5;
  int v6;
  _BYTE *v7;
  uint64_t v8;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  _QWORD v13[36];
  uint64_t v14;
  std::__shared_weak_count *v15;
  _QWORD v16[36];

  if ((~*(_DWORD *)(a1 + 8) & 3) != 0)
  {
    v5 = *(_QWORD **)(a1 + 24);
    v6 = *((_DWORD *)v5 + 23);
    if (v6 == -2)
    {
      v14 = 0;
      v8 = (*(uint64_t (**)(_QWORD, uint64_t *, uint64_t))(*(_QWORD *)*v5 + 88))(*v5, &v14, 8);
      v5 = *(_QWORD **)(a1 + 24);
      if (v8 != 8 || v14 == 0x277C6CE4B6030)
      {
        if (*((_DWORD *)v5 + 23) != -1)
        {
LABEL_9:
          if ((*((char *)v5 + 47) & 0x80000000) == 0)
          {
LABEL_10:
            v7 = v5 + 3;
            *((_BYTE *)v5 + 47) = 0;
LABEL_24:
            *v7 = 0;
            *(_QWORD *)(*(_QWORD *)(a1 + 24) + 48) = 0;
            sub_1C991B010((_QWORD *)a1, 0);
            return;
          }
LABEL_23:
          v7 = (_BYTE *)v5[3];
          v5[4] = 0;
          goto LABEL_24;
        }
      }
      else
      {
        *((_DWORD *)v5 + 23) = -1;
      }
    }
    else if (v6 != -1)
    {
      goto LABEL_9;
    }
    sub_1C99072C4(&v14);
    sub_1C9907EC4(v13, &v14, 0, 0, "[RELEASE WARNING]", "/Library/Caches/com.apple.xbs/Sources/AppleCVA/shared/src/modules/avatar/shrek/libs/alg/utils/src/CompressedDevice.cpp", 505, "Legacy CompressedDevice format is deprecated, consider converting your data", v13[0]);
    sub_1C9909318((uint64_t)v13);
    v10 = v15;
    if (v15)
    {
      p_shared_owners = (unint64_t *)&v15->__shared_owners_;
      do
        v12 = __ldaxr(p_shared_owners);
      while (__stlxr(v12 - 1, p_shared_owners));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
    v5 = *(_QWORD **)(a1 + 24);
    if ((*((char *)v5 + 47) & 0x80000000) == 0)
      goto LABEL_10;
    goto LABEL_23;
  }
  sub_1C99072C4(&v14);
  sub_1C9907EC4(v16, &v14, 0, 0, "[RELEASE ERROR  ]", "/Library/Caches/com.apple.xbs/Sources/AppleCVA/shared/src/modules/avatar/shrek/libs/alg/utils/src/CompressedDevice.cpp", 488, "Could not open IO device", v13[0]);
  sub_1C9909318((uint64_t)v16);
  v1 = v15;
  if (v15)
  {
    v2 = (unint64_t *)&v15->__shared_owners_;
    do
      v3 = __ldaxr(v2);
    while (__stlxr(v3 - 1, v2));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void sub_1C991B534(uint64_t a1)
{
  sub_1C991B768(a1);
  JUMPOUT(0x1CAA44AFCLL);
}

BOOL sub_1C991B558(uint64_t a1, _QWORD *a2)
{
  return sub_1C991B638(a1 + 8, a2);
}

void sub_1C991B560(uint64_t a1)
{
  std::mutex *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;

  v2 = (std::mutex *)(a1 + 24);
  std::mutex::lock((std::mutex *)(a1 + 24));
  *(_BYTE *)(a1 + 136) = 1;
  std::mutex::unlock(v2);
  std::mutex::lock(v2);
  if (*(_QWORD *)(a1 + 160))
  {
    v3 = (uint64_t *)(a1 + 144);
    v4 = *(_QWORD *)(a1 + 144);
    v5 = *(uint64_t **)(a1 + 152);
    v6 = *v5;
    *(_QWORD *)(v6 + 8) = *(_QWORD *)(v4 + 8);
    **(_QWORD **)(v4 + 8) = v6;
    *(_QWORD *)(a1 + 160) = 0;
    if (v5 != (uint64_t *)(a1 + 144))
    {
      do
      {
        v7 = (uint64_t *)v5[1];
        v8 = (std::__shared_weak_count *)v5[3];
        if (v8)
        {
          p_shared_owners = (unint64_t *)&v8->__shared_owners_;
          do
            v10 = __ldaxr(p_shared_owners);
          while (__stlxr(v10 - 1, p_shared_owners));
          if (!v10)
          {
            ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
            std::__shared_weak_count::__release_weak(v8);
          }
        }
        operator delete(v5);
        v5 = v7;
      }
      while (v7 != v3);
    }
  }
  std::mutex::unlock(v2);
}

BOOL sub_1C991B638(uint64_t a1, _QWORD *a2)
{
  std::mutex *v4;
  int v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t *v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  int v18;

  v4 = (std::mutex *)(a1 + 16);
  std::mutex::lock((std::mutex *)(a1 + 16));
  v5 = *(unsigned __int8 *)(a1 + 128);
  if (*(_BYTE *)(a1 + 128))
  {
    std::mutex::unlock(v4);
  }
  else
  {
    v6 = operator new(0x20uLL);
    v7 = a2[1];
    v6[2] = *a2;
    v6[3] = v7;
    if (v7)
    {
      v8 = (unint64_t *)(v7 + 8);
      do
        v9 = __ldxr(v8);
      while (__stxr(v9 + 1, v8));
    }
    v10 = *(_QWORD *)(a1 + 136);
    *v6 = v10;
    v6[1] = a1 + 136;
    *(_QWORD *)(v10 + 8) = v6;
    *(_QWORD *)(a1 + 136) = v6;
    v11 = *(_QWORD *)(a1 + 152) + 1;
    *(_QWORD *)(a1 + 152) = v11;
    v12 = *(_DWORD *)(a1 + 8);
    if (v12 < (int)v11 && (v12 & 0x80000000) == 0)
    {
      do
      {
        v13 = *(uint64_t **)(a1 + 144);
        v14 = *v13;
        *(_QWORD *)(v14 + 8) = v13[1];
        *(_QWORD *)v13[1] = v14;
        *(_QWORD *)(a1 + 152) = v11 - 1;
        v15 = (std::__shared_weak_count *)v13[3];
        if (v15)
        {
          p_shared_owners = (unint64_t *)&v15->__shared_owners_;
          do
            v17 = __ldaxr(p_shared_owners);
          while (__stlxr(v17 - 1, p_shared_owners));
          if (!v17)
          {
            ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
            std::__shared_weak_count::__release_weak(v15);
          }
        }
        operator delete(v13);
        v11 = *(_QWORD *)(a1 + 152);
        v18 = *(_DWORD *)(a1 + 8);
      }
      while (v18 < (int)v11 && (v18 & 0x80000000) == 0);
    }
    std::mutex::unlock(v4);
    std::condition_variable::notify_one((std::condition_variable *)(a1 + 80));
  }
  return v5 == 0;
}

uint64_t sub_1C991B768(uint64_t a1)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;

  *(_QWORD *)a1 = &off_1E8294440;
  *(_QWORD *)(a1 + 8) = &off_1E8295200;
  if (*(_QWORD *)(a1 + 160))
  {
    v2 = (uint64_t *)(a1 + 144);
    v3 = *(_QWORD *)(a1 + 144);
    v4 = *(uint64_t **)(a1 + 152);
    v5 = *v4;
    *(_QWORD *)(v5 + 8) = *(_QWORD *)(v3 + 8);
    **(_QWORD **)(v3 + 8) = v5;
    *(_QWORD *)(a1 + 160) = 0;
    if (v4 != (uint64_t *)(a1 + 144))
    {
      do
      {
        v7 = (uint64_t *)v4[1];
        v8 = (std::__shared_weak_count *)v4[3];
        if (v8)
        {
          p_shared_owners = (unint64_t *)&v8->__shared_owners_;
          do
            v10 = __ldaxr(p_shared_owners);
          while (__stlxr(v10 - 1, p_shared_owners));
          if (!v10)
          {
            ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
            std::__shared_weak_count::__release_weak(v8);
          }
        }
        operator delete(v4);
        v4 = v7;
      }
      while (v7 != v2);
    }
  }
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 88));
  std::mutex::~mutex((std::mutex *)(a1 + 24));
  return a1;
}

uint64_t sub_1C991B840(uint64_t a1)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;

  *(_QWORD *)a1 = &off_1E8295200;
  if (*(_QWORD *)(a1 + 152))
  {
    v2 = (uint64_t *)(a1 + 136);
    v3 = *(_QWORD *)(a1 + 136);
    v4 = *(uint64_t **)(a1 + 144);
    v5 = *v4;
    *(_QWORD *)(v5 + 8) = *(_QWORD *)(v3 + 8);
    **(_QWORD **)(v3 + 8) = v5;
    *(_QWORD *)(a1 + 152) = 0;
    if (v4 != (uint64_t *)(a1 + 136))
    {
      do
      {
        v7 = (uint64_t *)v4[1];
        v8 = (std::__shared_weak_count *)v4[3];
        if (v8)
        {
          p_shared_owners = (unint64_t *)&v8->__shared_owners_;
          do
            v10 = __ldaxr(p_shared_owners);
          while (__stlxr(v10 - 1, p_shared_owners));
          if (!v10)
          {
            ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
            std::__shared_weak_count::__release_weak(v8);
          }
        }
        operator delete(v4);
        v4 = v7;
      }
      while (v7 != v2);
    }
  }
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 80));
  std::mutex::~mutex((std::mutex *)(a1 + 16));
  return a1;
}

void sub_1C991B910(uint64_t a1)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  *(_QWORD *)a1 = &off_1E8295200;
  if (*(_QWORD *)(a1 + 152))
  {
    v2 = (uint64_t *)(a1 + 136);
    v3 = *(_QWORD *)(a1 + 136);
    v4 = *(uint64_t **)(a1 + 144);
    v5 = *v4;
    *(_QWORD *)(v5 + 8) = *(_QWORD *)(v3 + 8);
    **(_QWORD **)(v3 + 8) = v5;
    *(_QWORD *)(a1 + 152) = 0;
    if (v4 != (uint64_t *)(a1 + 136))
    {
      do
      {
        v6 = (uint64_t *)v4[1];
        v7 = (std::__shared_weak_count *)v4[3];
        if (v7)
        {
          p_shared_owners = (unint64_t *)&v7->__shared_owners_;
          do
            v9 = __ldaxr(p_shared_owners);
          while (__stlxr(v9 - 1, p_shared_owners));
          if (!v9)
          {
            ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
            std::__shared_weak_count::__release_weak(v7);
          }
        }
        operator delete(v4);
        v4 = v6;
      }
      while (v6 != v2);
    }
  }
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 80));
  std::mutex::~mutex((std::mutex *)(a1 + 16));
  JUMPOUT(0x1CAA44AFCLL);
}

void sub_1C991B9F0(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t i;
  uint64_t *v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::unique_lock<std::mutex> v13;

  v13.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(a1 + 16);
  v13.__owns_ = 1;
  std::mutex::lock((std::mutex *)(a1 + 16));
  for (i = *(_QWORD *)(a1 + 152); !i; i = *(_QWORD *)(a1 + 152))
    std::condition_variable::wait((std::condition_variable *)(a1 + 80), &v13);
  v5 = *(uint64_t **)(a1 + 144);
  v6 = v5[3];
  *a2 = v5[2];
  a2[1] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
    v5 = *(uint64_t **)(a1 + 144);
    i = *(_QWORD *)(a1 + 152);
    v9 = (std::__shared_weak_count *)v5[3];
  }
  else
  {
    v9 = 0;
  }
  v10 = *v5;
  *(_QWORD *)(v10 + 8) = v5[1];
  *(_QWORD *)v5[1] = v10;
  *(_QWORD *)(a1 + 152) = i - 1;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  operator delete(v5);
  if (v13.__owns_)
    std::mutex::unlock(v13.__m_);
}

uint64_t sub_1C991BAEC(uint64_t a1, _QWORD *a2, int a3, uint64_t a4)
{
  _BOOL4 v8;
  uint64_t v9;
  std::chrono::system_clock::time_point v10;
  uint64_t v11;
  std::chrono::time_point<std::chrono::system_clock, std::chrono::duration<long long, std::ratio<1, 1000000000>>> v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::unique_lock<std::mutex> v27;

  v27.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(a1 + 16);
  v27.__owns_ = 1;
  std::mutex::lock((std::mutex *)(a1 + 16));
  v8 = 0;
  v9 = *(_QWORD *)(a1 + 152);
  if (a3 >= 1 && !v9)
  {
    v8 = a4 != 0;
    if (a4)
    {
      if (!*(_BYTE *)(a4 + 8))
        goto LABEL_42;
      std::mutex::unlock(*(std::mutex **)a4);
      *(_BYTE *)(a4 + 8) = 0;
    }
    std::chrono::steady_clock::now();
    v10.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
    if (v10.__d_.__rep_)
    {
      if (v10.__d_.__rep_ < 1)
      {
        if ((unint64_t)v10.__d_.__rep_ < 0xFFDF3B645A1CAC09)
        {
          v11 = 0x8000000000000000;
          goto LABEL_14;
        }
      }
      else if ((unint64_t)v10.__d_.__rep_ > 0x20C49BA5E353F7)
      {
        v11 = 0x7FFFFFFFFFFFFFFFLL;
LABEL_14:
        if (v11 <= ((1000000 * a3) ^ 0x7FFFFFFFFFFFFFFFLL))
          v12.__d_.__rep_ = v11 + 1000000 * a3;
        else
          v12.__d_.__rep_ = 0x7FFFFFFFFFFFFFFFLL;
        std::condition_variable::__do_timed_wait((std::condition_variable *)(a1 + 80), &v27, v12);
        std::chrono::steady_clock::now();
        v9 = *(_QWORD *)(a1 + 152);
        goto LABEL_18;
      }
      v11 = 1000 * v10.__d_.__rep_;
      goto LABEL_14;
    }
    v11 = 0;
    goto LABEL_14;
  }
LABEL_18:
  if (v9)
  {
    v13 = *(_QWORD *)(a1 + 144);
    v15 = *(_QWORD *)(v13 + 16);
    v14 = *(_QWORD *)(v13 + 24);
    if (v14)
    {
      v16 = (unint64_t *)(v14 + 8);
      do
        v17 = __ldxr(v16);
      while (__stxr(v17 + 1, v16));
    }
    v18 = (std::__shared_weak_count *)a2[1];
    *a2 = v15;
    a2[1] = v14;
    if (v18)
    {
      p_shared_owners = (unint64_t *)&v18->__shared_owners_;
      do
        v20 = __ldaxr(p_shared_owners);
      while (__stlxr(v20 - 1, p_shared_owners));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
    }
    v21 = *(uint64_t **)(a1 + 144);
    v22 = *v21;
    *(_QWORD *)(v22 + 8) = v21[1];
    *(_QWORD *)v21[1] = v22;
    --*(_QWORD *)(a1 + 152);
    v23 = (std::__shared_weak_count *)v21[3];
    if (v23)
    {
      v24 = (unint64_t *)&v23->__shared_owners_;
      do
        v25 = __ldaxr(v24);
      while (__stlxr(v25 - 1, v24));
      if (!v25)
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
      }
    }
    operator delete(v21);
  }
  if (v27.__owns_)
    std::mutex::unlock(v27.__m_);
  if (!v8)
    return v9 != 0;
  if (*(_QWORD *)a4)
  {
    if (!*(_BYTE *)(a4 + 8))
    {
      std::mutex::lock(*(std::mutex **)a4);
      *(_BYTE *)(a4 + 8) = 1;
      return v9 != 0;
    }
  }
  else
  {
    std::__throw_system_error(1, "unique_lock::lock: references null mutex");
  }
  std::__throw_system_error(11, "unique_lock::lock: already locked");
LABEL_42:
  std::__throw_system_error(1, "unique_lock::unlock: not locked");
  return sub_1C991BD44();
}

void sub_1C991BD44(uint64_t a1)
{
  std::mutex *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;

  v2 = (std::mutex *)(a1 + 16);
  std::mutex::lock((std::mutex *)(a1 + 16));
  if (*(_QWORD *)(a1 + 152))
  {
    v3 = (uint64_t *)(a1 + 136);
    v4 = *(_QWORD *)(a1 + 136);
    v5 = *(uint64_t **)(a1 + 144);
    v6 = *v5;
    *(_QWORD *)(v6 + 8) = *(_QWORD *)(v4 + 8);
    **(_QWORD **)(v4 + 8) = v6;
    *(_QWORD *)(a1 + 152) = 0;
    if (v5 != (uint64_t *)(a1 + 136))
    {
      do
      {
        v7 = (uint64_t *)v5[1];
        v8 = (std::__shared_weak_count *)v5[3];
        if (v8)
        {
          p_shared_owners = (unint64_t *)&v8->__shared_owners_;
          do
            v10 = __ldaxr(p_shared_owners);
          while (__stlxr(v10 - 1, p_shared_owners));
          if (!v10)
          {
            ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
            std::__shared_weak_count::__release_weak(v8);
          }
        }
        operator delete(v5);
        v5 = v7;
      }
      while (v7 != v3);
    }
  }
  std::mutex::unlock(v2);
}

uint64_t sub_1C991BE04(uint64_t a1)
{
  std::mutex *v2;
  uint64_t v3;

  v2 = (std::mutex *)(a1 + 16);
  std::mutex::lock((std::mutex *)(a1 + 16));
  v3 = *(unsigned int *)(a1 + 152);
  std::mutex::unlock(v2);
  return v3;
}

void sub_1C991BE3C(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  unint64_t v4;
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  size_t v8;
  unsigned int v9;
  void **p_dst;
  int v11;
  size_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  void **v16;
  int64_t v17;
  unint64_t v18;
  void **v19;
  unint64_t v20;
  char *v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  char *v25;
  char *v26;
  __int128 v27;
  void **v28;
  uint64_t v29;
  int v30;
  void **v31;
  void **v32;
  void *v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  char *v37;
  char *v38;
  char *v39;
  __int128 v40;
  void **v41;
  std::string *v42;
  char *v43;
  void **v44;
  void *v45;
  void **v46;
  void **v47;
  void **v48;
  void *__p;
  char *v50;
  char *v51;
  void **__dst;
  void **v53;
  uint64_t v54;
  void *__src[2];
  unint64_t v56;
  std::string v57;
  uint64_t v58;

  v2 = a2;
  v58 = *MEMORY[0x1E0C80C00];
  v4 = *((unsigned __int8 *)a2 + 23);
  v5 = (_QWORD *)*a2;
  v6 = a2[1];
  if ((v4 & 0x80u) == 0)
    v7 = *((unsigned __int8 *)a2 + 23);
  else
    v7 = a2[1];
  if (v7 >= 2)
    v8 = 2;
  else
    v8 = v7;
  HIBYTE(v54) = v8;
  if (v8)
  {
    if ((v4 & 0x80u) != 0)
      a2 = v5;
    memcpy(&__dst, a2, v8);
    v9 = HIBYTE(v54);
    v7 = (unint64_t)v53;
  }
  else
  {
    v9 = 0;
  }
  *((_BYTE *)&__dst + v8) = 0;
  if ((v9 & 0x80u) == 0)
    v7 = v9;
  if (v7 == 2)
  {
    p_dst = __dst;
    if ((v9 & 0x80u) == 0)
      p_dst = (void **)&__dst;
    if (*(_WORD *)p_dst == 12067)
    {
      if ((v4 & 0x80) != 0)
      {
        if (v6 < 2)
          goto LABEL_126;
      }
      else
      {
        v6 = v4;
        v5 = v2;
        if (v4 <= 1)
          goto LABEL_126;
      }
      v12 = v6 - 2;
      if (v12 >= 0x7FFFFFFFFFFFFFF8)
        goto LABEL_126;
      if (v12 >= 0x17)
      {
        v14 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v12 | 7) != 0x17)
          v14 = v12 | 7;
        v15 = v14 + 1;
        v13 = operator new(v14 + 1);
        __src[1] = (void *)v12;
        v56 = v15 | 0x8000000000000000;
        __src[0] = v13;
      }
      else
      {
        HIBYTE(v56) = v12;
        v13 = __src;
        if (!v12)
        {
LABEL_37:
          *((_BYTE *)v13 + v12) = 0;
          if (v54 < 0)
            goto LABEL_38;
          goto LABEL_20;
        }
      }
      memmove(v13, (char *)v5 + 2, v12);
      goto LABEL_37;
    }
  }
  if ((v4 & 0x80) != 0)
  {
    sub_1C987D148(__src, v5, v6);
    if ((v9 & 0x80) != 0)
      goto LABEL_38;
LABEL_20:
    v11 = SHIBYTE(v56);
    if ((SHIBYTE(v56) & 0x80000000) == 0)
      goto LABEL_21;
    goto LABEL_39;
  }
  *(_OWORD *)__src = *(_OWORD *)v2;
  v56 = v2[2];
  if ((v9 & 0x80) == 0)
    goto LABEL_20;
LABEL_38:
  operator delete(__dst);
  v11 = SHIBYTE(v56);
  if ((SHIBYTE(v56) & 0x80000000) == 0)
  {
LABEL_21:
    if (!v11)
    {
      *(_OWORD *)a1 = *(_OWORD *)__src;
      *(_QWORD *)(a1 + 16) = v56;
      return;
    }
    goto LABEL_40;
  }
LABEL_39:
  if (!__src[1])
  {
    sub_1C987D148((_BYTE *)a1, __src[0], 0);
    goto LABEL_124;
  }
LABEL_40:
  __dst = 0;
  v53 = 0;
  v54 = 0;
  cva::utils::string::split();
  __p = 0;
  v50 = 0;
  v51 = 0;
  v16 = __dst;
  v17 = (char *)v53 - (char *)__dst;
  if (v53 != __dst)
  {
    v18 = 0xAAAAAAAAAAAAAAABLL * (v17 >> 3);
    if (v18 <= 0xAAAAAAAAAAAAAAALL)
    {
      v19 = (void **)operator new(v17);
      v20 = 0;
      __p = v19;
      v50 = (char *)v19;
      v51 = (char *)&v19[3 * v18];
      while (1)
      {
        v22 = (uint64_t)&v16[3 * v20];
        v23 = *(_BYTE *)(v22 + 23);
        if (v23 < 0)
        {
          if (!*(_QWORD *)(v22 + 8))
            goto LABEL_43;
        }
        else if (!*(_BYTE *)(v22 + 23))
        {
          goto LABEL_43;
        }
        if (v23 >= 0)
          v24 = *(unsigned __int8 *)(v22 + 23);
        else
          v24 = *(_QWORD *)(v22 + 8);
        if (v24 == 2)
        {
          if (v23 >= 0)
            v26 = (char *)&v16[3 * v20];
          else
            v26 = *(char **)v22;
          if (*(_WORD *)v26 != 11822)
          {
LABEL_63:
            if (v19 >= (void **)v51)
            {
              v21 = sub_1C99021D0((uint64_t)&__p, v22);
            }
            else
            {
              if ((*(_BYTE *)(v22 + 23) & 0x80) != 0)
              {
                sub_1C987D148(v19, *(void **)v22, *(_QWORD *)(v22 + 8));
              }
              else
              {
                v27 = *(_OWORD *)v22;
                v19[2] = *(void **)(v22 + 16);
                *(_OWORD *)v19 = v27;
              }
              v21 = (char *)(v19 + 3);
            }
            goto LABEL_101;
          }
          v28 = (void **)__p;
          if (v19 == __p)
            goto LABEL_78;
          v21 = (char *)(v19 - 3);
          v29 = *((unsigned __int8 *)v19 - 1);
          v30 = (char)v29;
          if ((v29 & 0x80u) != 0)
            v29 = (uint64_t)*(v19 - 2);
          if (v29 != 2)
            goto LABEL_76;
          v31 = *(void ***)v21;
          if (v30 >= 0)
            v31 = v19 - 3;
          if (*(_WORD *)v31 == 11822)
          {
LABEL_78:
            if (v19 >= (void **)v51)
            {
              v34 = 0xAAAAAAAAAAAAAAABLL * (((char *)v19 - (_BYTE *)__p) >> 3);
              v35 = v34 + 1;
              if (v34 + 1 > 0xAAAAAAAAAAAAAAALL)
                break;
              if (0x5555555555555556 * ((v51 - (_BYTE *)__p) >> 3) > v35)
                v35 = 0x5555555555555556 * ((v51 - (_BYTE *)__p) >> 3);
              if (0xAAAAAAAAAAAAAAABLL * ((v51 - (_BYTE *)__p) >> 3) >= 0x555555555555555)
                v36 = 0xAAAAAAAAAAAAAAALL;
              else
                v36 = v35;
              if (v36)
              {
                if (v36 > 0xAAAAAAAAAAAAAAALL)
                  sub_1C9899D30();
                v37 = (char *)operator new(24 * v36);
              }
              else
              {
                v37 = 0;
              }
              v38 = &v37[24 * v34];
              *(_QWORD *)v38 = 11822;
              v38[23] = 2;
              v39 = &v37[24 * v36];
              v57.__r_.__value_.__r.__words[0] = 0;
              *(std::string::size_type *)((char *)v57.__r_.__value_.__r.__words + 7) = 0;
              v21 = v38 + 24;
              if (v19 == v28)
              {
                __p = v38;
                v50 = v38 + 24;
                v51 = &v37[24 * v36];
              }
              else
              {
                do
                {
                  v40 = *(_OWORD *)(v19 - 3);
                  *((_QWORD *)v38 - 1) = *(v19 - 1);
                  *(_OWORD *)(v38 - 24) = v40;
                  v38 -= 24;
                  *(v19 - 2) = 0;
                  *(v19 - 1) = 0;
                  *(v19 - 3) = 0;
                  v19 -= 3;
                }
                while (v19 != v28);
                v19 = (void **)__p;
                v41 = (void **)v50;
                __p = v38;
                v50 = v21;
                v51 = v39;
                while (v41 != v19)
                {
                  if (*((char *)v41 - 1) < 0)
                    operator delete(*(v41 - 3));
                  v41 -= 3;
                }
              }
              if (!v19)
                goto LABEL_101;
              v32 = v19;
LABEL_100:
              operator delete(v32);
            }
            else
            {
              *v19 = (void *)11822;
              v33 = *(void **)((char *)v57.__r_.__value_.__r.__words + 7);
              v19[1] = (void *)v57.__r_.__value_.__r.__words[0];
              *(void **)((char *)v19 + 15) = v33;
              *((_BYTE *)v19 + 23) = 2;
              v21 = (char *)(v19 + 3);
            }
          }
          else
          {
LABEL_76:
            if (v30 < 0)
            {
              v32 = *(void ***)v21;
              goto LABEL_100;
            }
          }
LABEL_101:
          v50 = v21;
          goto LABEL_44;
        }
        if (v24 != 1)
          goto LABEL_63;
        v25 = v23 >= 0 ? (char *)&v16[3 * v20] : *(char **)v22;
        if (*v25 != 46)
          goto LABEL_63;
LABEL_43:
        v21 = (char *)v19;
LABEL_44:
        ++v20;
        v16 = __dst;
        v19 = (void **)v21;
        if (v20 >= 0xAAAAAAAAAAAAAAABLL * (v53 - __dst))
          goto LABEL_102;
      }
    }
LABEL_126:
    abort();
  }
LABEL_102:
  cva::utils::string::join();
  v42 = std::string::insert(&v57, 0, "/", 1uLL);
  *(std::string *)a1 = *v42;
  v42->__r_.__value_.__r.__words[0] = 0;
  v42->__r_.__value_.__l.__size_ = 0;
  v42->__r_.__value_.__r.__words[2] = 0;
  if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v57.__r_.__value_.__l.__data_);
  v43 = (char *)__p;
  if (__p)
  {
    v44 = (void **)v50;
    v45 = __p;
    if (v50 != __p)
    {
      do
      {
        if (*((char *)v44 - 1) < 0)
          operator delete(*(v44 - 3));
        v44 -= 3;
      }
      while (v44 != (void **)v43);
      v45 = __p;
    }
    v50 = v43;
    operator delete(v45);
    v46 = __dst;
    if (!__dst)
    {
LABEL_112:
      if ((SHIBYTE(v56) & 0x80000000) == 0)
        return;
      goto LABEL_124;
    }
  }
  else
  {
    v46 = __dst;
    if (!__dst)
      goto LABEL_112;
  }
  v47 = v53;
  v48 = v46;
  if (v53 != v46)
  {
    do
    {
      if (*((char *)v47 - 1) < 0)
        operator delete(*(v47 - 3));
      v47 -= 3;
    }
    while (v47 != v46);
    v48 = __dst;
  }
  v53 = v46;
  operator delete(v48);
  if (SHIBYTE(v56) < 0)
LABEL_124:
    operator delete(__src[0]);
}

void sub_1C991C478(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  int v10;
  _BYTE v11[8];

  if (*(_QWORD *)(a2 + 24))
  {
    v4 = operator new();
    v5 = *(_QWORD *)(a2 + 24);
    *(_DWORD *)(v4 + 8) = 1;
    *(_QWORD *)v4 = &off_1E8294F80;
    *(_QWORD *)(v4 + 16) = 0;
    *(_QWORD *)(v4 + 24) = v5;
    *(_BYTE *)(v4 + 32) = 0;
    v6 = (std::__shared_weak_count *)operator new();
    v6->__vftable = (std::__shared_weak_count_vtbl *)&off_1E8296018;
    v6->__shared_owners_ = 0;
    v6->__shared_weak_owners_ = 0;
    v6[1].__vftable = (std::__shared_weak_count_vtbl *)v4;
  }
  else
  {
    v7 = *(unsigned __int8 *)(a2 + 23);
    if ((v7 & 0x80u) != 0)
      v7 = *(_QWORD *)(a2 + 8);
    if (!v7)
    {
      *a1 = 0;
      a1[1] = 0;
      return;
    }
    cva::Path::Path();
    if (!cva::Path::exists((cva::Path *)v11) || !cva::Path::isRegularFile((cva::Path *)v11))
    {
      *a1 = 0;
      a1[1] = 0;
      cva::Path::~Path((cva::Path *)v11);
      return;
    }
    v4 = operator new();
    v10 = 1;
    sub_1C991E700(v4, (__int128 *)a2, &v10);
    v6 = (std::__shared_weak_count *)operator new();
    v6->__vftable = (std::__shared_weak_count_vtbl *)&off_1E8295FA8;
    v6->__shared_owners_ = 0;
    v6->__shared_weak_owners_ = 0;
    v6[1].__vftable = (std::__shared_weak_count_vtbl *)v4;
    cva::Path::~Path((cva::Path *)v11);
  }
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4))
  {
    *a1 = v4;
    a1[1] = (uint64_t)v6;
  }
  else
  {
    *a1 = 0;
    a1[1] = 0;
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

uint64_t **sub_1C991C624(uint64_t **a1, const void **a2, uint64_t a3)
{
  uint64_t *v5;
  uint64_t **v6;
  int v7;
  const void *v8;
  size_t v9;
  uint64_t **v10;
  _QWORD *v11;
  const void *v12;
  const void *v13;
  int v14;
  const void *v15;
  size_t v16;
  size_t v17;
  int v18;
  int v19;
  _QWORD *v20;
  _BYTE *v21;
  uint64_t *v22;
  uint64_t *v23;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    v7 = *((char *)a2 + 23);
    if (v7 >= 0)
      v8 = a2;
    else
      v8 = *a2;
    if (v7 >= 0)
      v9 = *((unsigned __int8 *)a2 + 23);
    else
      v9 = (size_t)a2[1];
    while (1)
    {
      v10 = (uint64_t **)v5;
      v13 = (const void *)v5[4];
      v11 = v5 + 4;
      v12 = v13;
      v14 = *((char *)v11 + 23);
      if (v14 >= 0)
        v15 = v11;
      else
        v15 = v12;
      if (v14 >= 0)
        v16 = *((unsigned __int8 *)v11 + 23);
      else
        v16 = v11[1];
      if (v16 >= v9)
        v17 = v9;
      else
        v17 = v16;
      v18 = memcmp(v8, v15, v17);
      if (v18)
      {
        if (v18 < 0)
          goto LABEL_8;
LABEL_22:
        v19 = memcmp(v15, v8, v17);
        if (v19)
        {
          if ((v19 & 0x80000000) == 0)
            return v10;
        }
        else if (v16 >= v9)
        {
          return v10;
        }
        v5 = v10[1];
        if (!v5)
        {
          v6 = v10 + 1;
          goto LABEL_29;
        }
      }
      else
      {
        if (v9 >= v16)
          goto LABEL_22;
LABEL_8:
        v5 = *v10;
        v6 = v10;
        if (!*v10)
          goto LABEL_29;
      }
    }
  }
  v10 = a1 + 1;
LABEL_29:
  v20 = operator new(0x48uLL);
  v21 = v20 + 4;
  if (*(char *)(a3 + 23) < 0)
  {
    sub_1C987D148(v21, *(void **)a3, *(_QWORD *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)v21 = *(_OWORD *)a3;
    v20[6] = *(_QWORD *)(a3 + 16);
  }
  v20[7] = 0;
  v20[8] = 0;
  *v20 = 0;
  v20[1] = 0;
  v20[2] = v10;
  *v6 = v20;
  v22 = (uint64_t *)**a1;
  v23 = v20;
  if (v22)
  {
    *a1 = v22;
    v23 = *v6;
  }
  sub_1C9880828(a1[1], v23);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return (uint64_t **)v20;
}

void sub_1C991C794(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1CAA44AFCLL);
}

uint64_t sub_1C991C7B8(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_1C991C7D8(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1CAA44AFCLL);
}

uint64_t sub_1C991C7FC(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t *sub_1C991C818(uint64_t a1, const void **a2)
{
  uint64_t *v2;
  uint64_t *v3;
  int v4;
  const void *v5;
  size_t v6;
  uint64_t *v7;
  int v8;
  uint64_t *v9;
  size_t v10;
  size_t v11;
  int v12;
  int v13;
  const void *v14;
  size_t v15;
  size_t v16;
  int v17;

  v2 = (uint64_t *)(a1 + 8);
  v3 = *(uint64_t **)(a1 + 8);
  if (!v3)
    return v2;
  v4 = *((char *)a2 + 23);
  if (v4 >= 0)
    v5 = a2;
  else
    v5 = *a2;
  if (v4 >= 0)
    v6 = *((unsigned __int8 *)a2 + 23);
  else
    v6 = (size_t)a2[1];
  v7 = (uint64_t *)(a1 + 8);
  do
  {
    while (1)
    {
      v8 = *((char *)v3 + 55);
      v9 = v8 >= 0 ? v3 + 4 : (uint64_t *)v3[4];
      v10 = v8 >= 0 ? *((unsigned __int8 *)v3 + 55) : v3[5];
      v11 = v6 >= v10 ? v10 : v6;
      v12 = memcmp(v9, v5, v11);
      if (v12)
        break;
      if (v10 >= v6)
        goto LABEL_23;
LABEL_9:
      v3 = (uint64_t *)v3[1];
      if (!v3)
        goto LABEL_24;
    }
    if (v12 < 0)
      goto LABEL_9;
LABEL_23:
    v7 = v3;
    v3 = (uint64_t *)*v3;
  }
  while (v3);
LABEL_24:
  if (v7 == v2)
    return v2;
  v13 = *((char *)v7 + 55);
  if (v13 >= 0)
    v14 = v7 + 4;
  else
    v14 = (const void *)v7[4];
  if (v13 >= 0)
    v15 = *((unsigned __int8 *)v7 + 55);
  else
    v15 = v7[5];
  if (v15 >= v6)
    v16 = v6;
  else
    v16 = v15;
  v17 = memcmp(v5, v14, v16);
  if (!v17)
  {
    if (v6 >= v15)
      return v7;
    return v2;
  }
  if (v17 < 0)
    return v2;
  return v7;
}

void sub_1C991C91C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E8295CD0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1C991C92C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E8295CD0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1CAA44AFCLL);
}

uint64_t sub_1C991C95C(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void sub_1C991C96C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E8295BF0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1C991C97C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E8295BF0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1CAA44AFCLL);
}

uint64_t sub_1C991C9AC(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void sub_1C991C9BC(uint64_t *a1, uint64_t a2, const void **a3)
{
  uint64_t *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::string::size_type v12;
  std::__shared_weak_count_vtbl *v13;
  std::string::size_type size;
  unint64_t *v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t v25;
  const void **v26;
  unint64_t v27;
  std::string::size_type v28;
  size_t v29;
  const void **v30;
  unsigned int v31;
  unint64_t *v32;
  unint64_t v33;
  std::string *p_dst;
  char v35;
  size_t v36;
  unint64_t v37;
  std::string *v38;
  uint64_t v39;
  uint64_t v40;
  const void *v41;
  void **v42;
  std::string::size_type v43;
  std::string *v44;
  int64_t v45;
  void **v46;
  char v47;
  int v48;
  _QWORD *v49;
  size_t v50;
  std::string::size_type v51;
  std::string *v52;
  uint64_t v53;
  uint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  unint64_t *v58;
  size_t v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  void *v64[2];
  int64_t v65;
  void *v66[2];
  int64_t v67;
  void *__p[2];
  char v69;
  std::string __dst;

  *a1 = 0;
  a1[1] = 0;
  sub_1C991BE3C((uint64_t)__p, a3);
  v6 = sub_1C991C818(a2 + 32, a3);
  if ((uint64_t *)(a2 + 40) != v6 || (v6 = sub_1C991C818(a2 + 32, (const void **)__p), v6 != (uint64_t *)(a2 + 40)))
  {
    sub_1C991C478((uint64_t *)&__dst, a2);
    v7 = (std::__shared_weak_count *)operator new(0x38uLL);
    v7->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    v7->__shared_weak_owners_ = 0;
    v7->__vftable = (std::__shared_weak_count_vtbl *)&off_1E8295BF0;
    v7[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E8294ED0;
    v9 = (uint64_t)&v7[1];
    v11 = v6[7];
    v10 = v6[8];
    v12 = __dst.__r_.__value_.__r.__words[0];
    LODWORD(v7[1].__shared_owners_) = *(_DWORD *)(__dst.__r_.__value_.__r.__words[0] + 8);
    v7[1].__shared_weak_owners_ = 0;
    v13 = (std::__shared_weak_count_vtbl *)operator new();
    v13->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v12;
    v13->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v12;
    size = __dst.__r_.__value_.__l.__size_;
    v13->__on_zero_shared = (void (__cdecl *)(std::__shared_count *__hidden))__dst.__r_.__value_.__l.__size_;
    if (size)
    {
      v15 = (unint64_t *)(size + 8);
      do
        v16 = __ldxr(v15);
      while (__stxr(v16 + 1, v15));
    }
    v13->__get_deleter = (const void *(__cdecl *)(const std::__shared_weak_count *__hidden, const std::type_info *))v11;
    v13->__on_zero_shared_weak = (void (__cdecl *)(std::__shared_weak_count *__hidden))v10;
    v7[2].__vftable = v13;
    sub_1C991F618(v9, 0);
    v17 = operator new(0x38uLL);
    v17[1] = 0;
    v17[2] = 0;
    *v17 = &off_1E8295CD0;
    v17[3] = &off_1E8295070;
    v18 = (uint64_t)(v17 + 3);
    *((_DWORD *)v17 + 8) = v7[1].__shared_owners_;
    v17[5] = 0;
    v19 = operator new();
    v20 = v19;
    *(_QWORD *)v19 = v9;
    *(_QWORD *)(v19 + 8) = v9;
    *(_QWORD *)(v19 + 16) = v7;
    do
      v21 = __ldxr(p_shared_owners);
    while (__stxr(v21 + 1, p_shared_owners));
    *(_OWORD *)(v19 + 40) = 0u;
    *(_OWORD *)(v19 + 24) = 0u;
    v22 = operator new(0x10uLL);
    *v22 = 0;
    v22[1] = 0;
    *(_QWORD *)(v20 + 56) = v22;
    *(_QWORD *)(v20 + 64) = v22 + 2;
    *(_QWORD *)(v20 + 72) = v22 + 2;
    *(_QWORD *)(v20 + 80) = 0;
    *(_BYTE *)(v20 + 88) = 0;
    *(_DWORD *)(v20 + 92) = -2;
    v17[6] = v20;
    sub_1C991B348(v18);
    *a1 = v18;
    a1[1] = (uint64_t)v17;
    do
      v23 = __ldaxr(p_shared_owners);
    while (__stlxr(v23 - 1, p_shared_owners));
    if (v23)
    {
      v24 = (std::__shared_weak_count *)__dst.__r_.__value_.__l.__size_;
      if (!__dst.__r_.__value_.__l.__size_)
        goto LABEL_97;
    }
    else
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
      v24 = (std::__shared_weak_count *)__dst.__r_.__value_.__l.__size_;
      if (!__dst.__r_.__value_.__l.__size_)
        goto LABEL_97;
    }
    v32 = (unint64_t *)&v24->__shared_owners_;
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
      if ((v69 & 0x80000000) == 0)
        return;
      goto LABEL_98;
    }
LABEL_97:
    if ((v69 & 0x80000000) == 0)
      return;
    goto LABEL_98;
  }
  v25 = *((unsigned __int8 *)a3 + 23);
  v26 = (const void **)*a3;
  v27 = (unint64_t)a3[1];
  if ((v25 & 0x80u) == 0)
    v28 = *((unsigned __int8 *)a3 + 23);
  else
    v28 = (std::string::size_type)a3[1];
  if (v28 >= 2)
    v29 = 2;
  else
    v29 = v28;
  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v29;
  if (v29)
  {
    if ((v25 & 0x80u) == 0)
      v30 = a3;
    else
      v30 = v26;
    memcpy(&__dst, v30, v29);
    v31 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
    v28 = __dst.__r_.__value_.__l.__size_;
  }
  else
  {
    v31 = 0;
  }
  __dst.__r_.__value_.__s.__data_[v29] = 0;
  if ((v31 & 0x80u) == 0)
    v28 = v31;
  if (v28 == 2)
  {
    p_dst = (std::string *)__dst.__r_.__value_.__r.__words[0];
    if ((v31 & 0x80u) == 0)
      p_dst = &__dst;
    if (LOWORD(p_dst->__r_.__value_.__l.__data_) == 12067)
    {
      if ((v25 & 0x80) != 0)
      {
        if (v27 < 2)
          goto LABEL_115;
      }
      else
      {
        v27 = v25;
        v26 = a3;
        if (v25 <= 1)
          goto LABEL_115;
      }
      v59 = v27 - 2;
      if (v27 - 2 > 0x7FFFFFFFFFFFFFF7)
        goto LABEL_115;
      if (v59 >= 0x17)
      {
        v61 = (v59 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v59 | 7) != 0x17)
          v61 = v59 | 7;
        v62 = v61 + 1;
        v60 = operator new(v61 + 1);
        v66[1] = (void *)v59;
        v67 = v62 | 0x8000000000000000;
        v66[0] = v60;
      }
      else
      {
        HIBYTE(v67) = v27 - 2;
        v60 = v66;
        if (!v59)
        {
LABEL_113:
          *((_BYTE *)v60 + v59) = 0;
          if ((*((_BYTE *)&__dst.__r_.__value_.__s + 23) & 0x80) != 0)
            goto LABEL_39;
          goto LABEL_40;
        }
      }
      memmove(v60, (char *)v26 + 2, v59);
      goto LABEL_113;
    }
  }
  if ((v25 & 0x80) == 0)
  {
    *(_OWORD *)v66 = *(_OWORD *)a3;
    v67 = (int64_t)a3[2];
    if ((v31 & 0x80) == 0)
      goto LABEL_40;
    goto LABEL_39;
  }
  sub_1C987D148(v66, v26, v27);
  if ((v31 & 0x80) != 0)
LABEL_39:
    operator delete(__dst.__r_.__value_.__l.__data_);
LABEL_40:
  v35 = *(_BYTE *)(a2 + 23);
  if ((v35 & 0x80000000) == 0)
  {
    if (*(_BYTE *)(a2 + 23))
      goto LABEL_42;
LABEL_50:
    if (SHIBYTE(v67) < 0)
    {
      sub_1C987D148(v64, v66[0], (unint64_t)v66[1]);
    }
    else
    {
      *(_OWORD *)v64 = *(_OWORD *)v66;
      v65 = v67;
    }
    goto LABEL_73;
  }
  if (!*(_QWORD *)(a2 + 8))
    goto LABEL_50;
LABEL_42:
  if (v35 >= 0)
    v36 = *(unsigned __int8 *)(a2 + 23);
  else
    v36 = *(_QWORD *)(a2 + 8);
  v37 = v36 + 1;
  if (v36 + 1 > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_115;
  if (v37 >= 0x17)
  {
    v39 = (v37 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v37 | 7) != 0x17)
      v39 = v37 | 7;
    v40 = v39 + 1;
    v38 = (std::string *)operator new(v39 + 1);
    __dst.__r_.__value_.__l.__size_ = v36 + 1;
    __dst.__r_.__value_.__r.__words[2] = v40 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v38;
  }
  else
  {
    memset(&__dst, 0, sizeof(__dst));
    v38 = &__dst;
    *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v36 + 1;
    if (!v36)
      goto LABEL_59;
  }
  if (v35 >= 0)
    v41 = (const void *)a2;
  else
    v41 = *(const void **)a2;
  memmove(v38, v41, v36);
LABEL_59:
  *(_WORD *)((char *)&v38->__r_.__value_.__l.__data_ + v36) = 47;
  if (v67 >= 0)
    v42 = v66;
  else
    v42 = (void **)v66[0];
  if (v67 >= 0)
    v43 = HIBYTE(v67);
  else
    v43 = (std::string::size_type)v66[1];
  v44 = std::string::append(&__dst, (const std::string::value_type *)v42, v43);
  v45 = v44->__r_.__value_.__r.__words[2];
  *(_OWORD *)v64 = *(_OWORD *)&v44->__r_.__value_.__l.__data_;
  v65 = v45;
  v44->__r_.__value_.__l.__size_ = 0;
  v44->__r_.__value_.__r.__words[2] = 0;
  v44->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
LABEL_73:
  v46 = v64;
  cva::Path::Path();
  v47 = cva::Path::exists((cva::Path *)&__dst);
  cva::Path::~Path((cva::Path *)&__dst);
  if ((v47 & 1) == 0)
  {
    v46 = v66;
    cva::Path::Path();
    v48 = cva::Path::exists((cva::Path *)&__dst);
    cva::Path::~Path((cva::Path *)&__dst);
    if (!v48)
    {
      v55 = (std::__shared_weak_count *)a1[1];
      *a1 = 0;
      a1[1] = 0;
      if (!v55)
        goto LABEL_95;
      v58 = (unint64_t *)&v55->__shared_owners_;
      do
        v57 = __ldaxr(v58);
      while (__stlxr(v57 - 1, v58));
      goto LABEL_94;
    }
  }
  if (*((char *)v46 + 23) < 0)
    v46 = (void **)*v46;
  v63 = 1;
  v49 = operator new(0x2A0uLL);
  v49[1] = 0;
  v49[2] = 0;
  *v49 = &off_1E8295BB8;
  v50 = strlen((const char *)v46);
  if (v50 > 0x7FFFFFFFFFFFFFF7)
LABEL_115:
    abort();
  v51 = v50;
  if (v50 >= 0x17)
  {
    v53 = (v50 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v50 | 7) != 0x17)
      v53 = v50 | 7;
    v54 = v53 + 1;
    v52 = (std::string *)operator new(v53 + 1);
    __dst.__r_.__value_.__l.__size_ = v51;
    __dst.__r_.__value_.__r.__words[2] = v54 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v52;
  }
  else
  {
    *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v50;
    v52 = &__dst;
    if (!v50)
      goto LABEL_85;
  }
  memmove(v52, v46, v51);
LABEL_85:
  v52->__r_.__value_.__s.__data_[v51] = 0;
  sub_1C991E700((uint64_t)(v49 + 3), (__int128 *)&__dst, &v63);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  v55 = (std::__shared_weak_count *)a1[1];
  *a1 = (uint64_t)(v49 + 3);
  a1[1] = (uint64_t)v49;
  if (!v55)
  {
LABEL_95:
    if ((SHIBYTE(v65) & 0x80000000) == 0)
      goto LABEL_96;
    goto LABEL_101;
  }
  v56 = (unint64_t *)&v55->__shared_owners_;
  do
    v57 = __ldaxr(v56);
  while (__stlxr(v57 - 1, v56));
LABEL_94:
  if (v57)
    goto LABEL_95;
  ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
  std::__shared_weak_count::__release_weak(v55);
  if (SHIBYTE(v65) < 0)
  {
LABEL_101:
    operator delete(v64[0]);
    if (SHIBYTE(v67) < 0)
      goto LABEL_102;
    goto LABEL_97;
  }
LABEL_96:
  if ((SHIBYTE(v67) & 0x80000000) == 0)
    goto LABEL_97;
LABEL_102:
  operator delete(v66[0]);
  if (v69 < 0)
LABEL_98:
    operator delete(__p[0]);
}

CMTime *sub_1C991D06C(CMTime *result, uint64_t a2, uint64_t a3)
{
  CMTime *v4;
  int v5;
  int v6;
  CMTimeValue v7;
  uint64_t v8;
  uint64_t v9;
  CMTime v10;
  CMTime lhs;
  CMTime v12;
  CMTime v13;
  CMTime v14;

  v4 = result;
  v5 = *(_DWORD *)(a2 + 24);
  if (v5)
  {
    if (v5 != 1)
      goto LABEL_18;
    if ((*(_BYTE *)(a2 + 12) & 1) == 0)
    {
LABEL_7:
      LODWORD(result[1].value) = 0;
      result->value = 0x7FF8000000000000;
      return result;
    }
  }
  v6 = *(_DWORD *)(a3 + 24);
  if (v6)
  {
    if (v6 != 1)
      goto LABEL_18;
    if ((*(_BYTE *)(a3 + 12) & 1) == 0)
      goto LABEL_7;
    if (v5 != 1)
    {
      memset(&v14, 0, sizeof(v14));
      CMTimeMakeWithSeconds(&v14, *(Float64 *)a2, 1000000);
      v6 = *(_DWORD *)(a3 + 24);
      goto LABEL_13;
    }
  }
  else if (v5 != 1)
  {
    *(double *)&v7 = *(double *)a2 + *(double *)a3;
    LODWORD(result[1].value) = 0;
    result->value = v7;
    return result;
  }
  v14 = *(CMTime *)a2;
LABEL_13:
  memset(&v13, 0, sizeof(v13));
  if (!v6)
  {
    CMTimeMakeWithSeconds(&v13, *(Float64 *)a3, 1000000);
    goto LABEL_17;
  }
  if (v6 == 1)
  {
    v13 = *(CMTime *)a3;
LABEL_17:
    memset(&v12, 0, sizeof(v12));
    lhs = v14;
    v10 = v13;
    result = CMTimeAdd(&v12, &lhs, &v10);
    *v4 = v12;
    LODWORD(v4[1].value) = 1;
    return result;
  }
LABEL_18:
  v8 = sub_1C98CFB60();
  return (CMTime *)sub_1C991D1D8(v8, v9);
}

uint64_t sub_1C991D1D8(uint64_t a1, uint64_t a2)
{
  int v3;
  int v4;
  double v6;
  unsigned int v7;
  int32_t v8;
  uint64_t v9;
  CMTime v10;
  CMTime time1;
  CMTime v12;
  CMTime v13;

  v3 = *(_DWORD *)(a1 + 24);
  if (v3)
  {
    if (v3 != 1)
      goto LABEL_27;
    if ((*(_BYTE *)(a1 + 12) & 1) == 0)
      return 129;
  }
  v4 = *(_DWORD *)(a2 + 24);
  if (v4)
  {
    if (v4 != 1)
      goto LABEL_27;
    if ((*(_BYTE *)(a2 + 12) & 1) == 0)
      return 129;
    if (v3 != 1)
    {
      memset(&v13, 0, sizeof(v13));
      CMTimeMakeWithSeconds(&v13, *(Float64 *)a1, 1000000);
      v4 = *(_DWORD *)(a2 + 24);
      goto LABEL_20;
    }
LABEL_18:
    v13 = *(CMTime *)a1;
LABEL_20:
    memset(&v12, 0, sizeof(v12));
    if (!v4)
    {
      CMTimeMakeWithSeconds(&v12, *(Float64 *)a2, 1000000);
LABEL_24:
      time1 = v13;
      v10 = v12;
      v8 = CMTimeCompare(&time1, &v10);
      if (v8 < 0)
        return 0xFFFFFFFFLL;
      else
        return v8 != 0;
    }
    if (v4 == 1)
    {
      v12 = *(CMTime *)a2;
      goto LABEL_24;
    }
LABEL_27:
    v9 = sub_1C98CFB60();
    return sub_1C991D328(v9);
  }
  v6 = *(double *)a2;
  if (v3 == 1)
    goto LABEL_18;
  if (*(double *)a1 == v6)
    v7 = 0;
  else
    v7 = -127;
  if (*(double *)a1 > v6)
    v7 = 1;
  if (*(double *)a1 < v6)
    return 0xFFFFFFFFLL;
  else
    return v7;
}

uint64_t sub_1C991D328(uint64_t a1)
{
  uint64_t *v2;
  uint64_t v3;

  *(_QWORD *)a1 = &off_1E8294F80;
  if (*(_BYTE *)(a1 + 32))
  {
    v2 = *(uint64_t **)(a1 + 24);
    if (v2)
    {
      v3 = *v2;
      if (*v2)
      {
        if (*(_BYTE *)(v3 + 24))
        {
          *(_QWORD *)(v3 + 8) = 0;
          if (*(_QWORD *)v3)
          {
            **(_BYTE **)v3 = 0;
            if (*(_QWORD *)v3)
              MEMORY[0x1CAA44AE4](*(_QWORD *)v3, 0x1000C8077774924);
          }
        }
        *(_QWORD *)v3 = 0;
        *(_QWORD *)(v3 + 16) = 0;
        MEMORY[0x1CAA44AFC](v3, 0x1010C40A6225C5ALL);
      }
      MEMORY[0x1CAA44AFC](v2, 0x20C4093837F09);
    }
    *(_QWORD *)(a1 + 24) = 0;
  }
  return a1;
}

void sub_1C991D3E4(uint64_t a1)
{
  uint64_t *v2;
  uint64_t v3;

  *(_QWORD *)a1 = &off_1E8294F80;
  if (*(_BYTE *)(a1 + 32))
  {
    v2 = *(uint64_t **)(a1 + 24);
    if (v2)
    {
      v3 = *v2;
      if (*v2)
      {
        if (*(_BYTE *)(v3 + 24))
        {
          *(_QWORD *)(v3 + 8) = 0;
          if (*(_QWORD *)v3)
          {
            **(_BYTE **)v3 = 0;
            if (*(_QWORD *)v3)
              MEMORY[0x1CAA44AE4](*(_QWORD *)v3, 0x1000C8077774924);
          }
        }
        *(_QWORD *)v3 = 0;
        *(_QWORD *)(v3 + 16) = 0;
        MEMORY[0x1CAA44AFC](v3, 0x1010C40A6225C5ALL);
      }
      MEMORY[0x1CAA44AFC](v2, 0x20C4093837F09);
    }
    *(_QWORD *)(a1 + 24) = 0;
  }
  JUMPOUT(0x1CAA44AFCLL);
}

BOOL sub_1C991D4B4(_QWORD *a1)
{
  uint64_t v1;

  v1 = a1[2];
  return v1 >= (*(uint64_t (**)(_QWORD *))(*a1 + 104))(a1);
}

uint64_t sub_1C991D4E4(uint64_t a1)
{
  return *(_QWORD *)(**(_QWORD **)(a1 + 24) + 8);
}

size_t sub_1C991D4F4(uint64_t a1, void *__dst, int64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  size_t v5;

  if (a3 < 0)
    return -1;
  v3 = *(_QWORD *)(a1 + 16);
  v4 = **(_QWORD ***)(a1 + 24);
  if (v4[1] - v3 >= a3)
    v5 = a3;
  else
    v5 = v4[1] - v3;
  if (v5)
    memcpy(__dst, (const void *)(*v4 + v3), v5);
  return v5;
}

size_t sub_1C991D550(uint64_t a1, const void *a2, uint64_t a3)
{
  size_t v3;
  _QWORD **v6;
  uint64_t v7;
  int64_t v8;
  int64_t v9;

  v3 = a3 & ~(a3 >> 63);
  if (a3 >= 1)
  {
    v7 = *(_QWORD *)(a1 + 16);
    v6 = *(_QWORD ***)(a1 + 24);
    v8 = v7 + v3;
    if (v8 <= (*v6)[1])
      v9 = (*v6)[1];
    else
      v9 = v8;
    sub_1C991DA3C(v6, v9);
    memcpy((void *)(***(_QWORD ***)(a1 + 24) + *(_QWORD *)(a1 + 16)), a2, v3);
  }
  return v3;
}

uint64_t sub_1C991D5C0(uint64_t a1, const void *a2, unint64_t a3)
{
  int v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  _QWORD v14[36];
  uint64_t v15;
  std::__shared_weak_count *v16;
  _QWORD v17[36];

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 24) = 1;
  if (!a2)
  {
    sub_1C99072C4(&v15);
    sub_1C9907EC4(v17, &v15, 0, 0, "[RELEASE ERROR  ]", "/Library/Caches/com.apple.xbs/Sources/AppleCVA/shared/src/modules/avatar/shrek/libs/alg/utils/src/fsByteArray.cpp", 42, "assert %s failed. The byte array cannot be created with invalid data.%s", (char)"data");
    sub_1C9909318((uint64_t)v17);
    v7 = v16;
    if (v16)
    {
      p_shared_owners = (unint64_t *)&v16->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
  if ((a3 & 0x8000000000000000) != 0)
  {
    sub_1C99072C4(&v15);
    sub_1C9907EC4(v14, &v15, 0, 0, "[RELEASE ERROR  ]", "/Library/Caches/com.apple.xbs/Sources/AppleCVA/shared/src/modules/avatar/shrek/libs/alg/utils/src/fsByteArray.cpp", 43, "assert %s failed. The byte array cannot be created with a negative size.%s", (char)"size >= 0");
    sub_1C9909318((uint64_t)v14);
    v10 = v16;
    if (v16)
    {
      v11 = (unint64_t *)&v16->__shared_owners_;
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 - 1, v11));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
    sub_1C991D768(a1, a3);
  }
  else
  {
    v6 = sub_1C991D768(a1, a3);
    if (a3 && v6)
      memcpy(*(void **)a1, a2, a3);
  }
  return a1;
}

uint64_t sub_1C991D768(uint64_t a1, unint64_t a2)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  const void *v9;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  unint64_t *v14;
  _QWORD v15[36];
  uint64_t v16;
  std::__shared_weak_count *v17;
  _QWORD v18[36];

  if (!*(_BYTE *)(a1 + 24))
  {
    sub_1C99072C4(&v16);
    sub_1C9907EC4(v18, &v16, 0, 0, "[RELEASE ERROR  ]", "/Library/Caches/com.apple.xbs/Sources/AppleCVA/shared/src/modules/avatar/shrek/libs/alg/utils/src/fsByteArray.cpp", 102, "cannot expand a non-owned data buffer.", v15[0]);
    sub_1C9909318((uint64_t)v18);
    v11 = v17;
    if (v17)
    {
      p_shared_owners = (unint64_t *)&v17->__shared_owners_;
      do
        v13 = __ldaxr(p_shared_owners);
      while (__stlxr(v13 - 1, p_shared_owners));
LABEL_18:
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    return 0;
  }
  v3 = 0x7FFFFFFFFFFFFFFFLL;
  if (a2 >= 0x7FFFFFFFFFFFFFFFLL)
  {
    sub_1C99072C4(&v16);
    sub_1C9907EC4(v15, &v16, 0, 0, "[RELEASE ERROR  ]", "/Library/Caches/com.apple.xbs/Sources/AppleCVA/shared/src/modules/avatar/shrek/libs/alg/utils/src/fsByteArray.cpp", 107, "trying to expand the buffer with invalid size", v15[0]);
    sub_1C9909318((uint64_t)v15);
    v11 = v17;
    if (v17)
    {
      v14 = (unint64_t *)&v17->__shared_owners_;
      do
        v13 = __ldaxr(v14);
      while (__stlxr(v13 - 1, v14));
      goto LABEL_18;
    }
    return 0;
  }
  v5 = *(_QWORD *)(a1 + 16);
  if (v5 < 0x3FFFFFFFFFFFFFFFLL)
    v3 = 2 * v5;
  if (v3 <= (uint64_t)(a2 + 1))
    v6 = a2 + 1;
  else
    v6 = v3;
  v7 = (_BYTE *)operator new[]();
  v8 = v7;
  *(_QWORD *)(a1 + 16) = v6;
  v7[a2] = 0;
  v9 = *(const void **)a1;
  if (*(_QWORD *)a1)
  {
    memcpy(v7, *(const void **)a1, *(_QWORD *)(a1 + 8));
    MEMORY[0x1CAA44AE4](v9, 0x1000C8077774924);
  }
  *(_QWORD *)a1 = v8;
  *(_QWORD *)(a1 + 8) = a2;
  return 1;
}

void ***sub_1C991D910(void ***a1, unint64_t a2)
{
  uint64_t v4;
  void **v5;
  int v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v11;
  std::__shared_weak_count *v12;
  _QWORD v13[36];

  v4 = operator new();
  v5 = (void **)v4;
  *(_QWORD *)v4 = 0;
  *(_QWORD *)(v4 + 8) = 0;
  *(_QWORD *)(v4 + 16) = 0;
  *(_BYTE *)(v4 + 24) = 1;
  if ((a2 & 0x8000000000000000) != 0)
  {
    sub_1C99072C4(&v11);
    sub_1C9907EC4(v13, &v11, 0, 0, "[RELEASE ERROR  ]", "/Library/Caches/com.apple.xbs/Sources/AppleCVA/shared/src/modules/avatar/shrek/libs/alg/utils/src/fsByteArray.cpp", 63, "assert %s failed. The byte array cannot be created with a negative size.%s", (char)"size >= 0");
    sub_1C9909318((uint64_t)v13);
    v7 = v12;
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
    sub_1C991D768((uint64_t)v5, a2);
  }
  else
  {
    v6 = sub_1C991D768(v4, a2);
    if (a2 && v6)
      bzero(*v5, a2);
  }
  *a1 = v5;
  return a1;
}

void sub_1C991DA3C(_QWORD **a1, int64_t a2)
{
  _QWORD *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  _QWORD v10[36];

  if ((a2 & 0x8000000000000000) == 0)
  {
    v4 = *a1;
    if (v4[1] != a2)
    {
      if (v4[2] > a2)
      {
LABEL_6:
        v4[1] = a2;
        *(_BYTE *)(*v4 + a2) = 0;
        return;
      }
      if (sub_1C991D768((uint64_t)v4, a2))
      {
        v4 = *a1;
        goto LABEL_6;
      }
      sub_1C99072C4(&v8);
      sub_1C9907EC4(v10, &v8, 0, 0, "[RELEASE ERROR  ]", "/Library/Caches/com.apple.xbs/Sources/AppleCVA/shared/src/modules/avatar/shrek/libs/alg/utils/src/fsByteArray.cpp", 257, "could not extend buffer size", v8);
      sub_1C9909318((uint64_t)v10);
      v5 = v9;
      if (v9)
      {
        p_shared_owners = (unint64_t *)&v9->__shared_owners_;
        do
          v7 = __ldaxr(p_shared_owners);
        while (__stlxr(v7 - 1, p_shared_owners));
        if (!v7)
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
        }
      }
    }
  }
}

uint64_t sub_1C991DB24(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = &off_1E8294DE0;
  if (*(_BYTE *)(a1 + 16))
  {
    v2 = *(_QWORD *)(a1 + 8);
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
    *(_QWORD *)(a1 + 8) = 0;
  }
  return a1;
}

void sub_1C991DB70(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = &off_1E8294DE0;
  if (*(_BYTE *)(a1 + 16))
  {
    v2 = *(_QWORD *)(a1 + 8);
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
    *(_QWORD *)(a1 + 8) = 0;
  }
  JUMPOUT(0x1CAA44AFCLL);
}

BOOL sub_1C991DBCC(uint64_t a1, std::string *a2)
{
  _BOOL8 result;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  unint64_t size;
  std::string *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  unsigned int v13;

  result = 0;
  v13 = 0;
  v4 = *(_QWORD *)(a1 + 8);
  if (*(_DWORD *)(v4 + 8) == 2)
    return result;
  v6 = (*(uint64_t (**)(_QWORD, unsigned int *, uint64_t))(*(_QWORD *)v4 + 144))(*(_QWORD *)(a1 + 8), &v13, 4);
  if (v6 < 1)
    return 0;
  *(_QWORD *)(v4 + 16) += v6;
  if (v6 != 4)
    return 0;
  v7 = v13;
  if ((SHIBYTE(a2->__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    size = HIBYTE(a2->__r_.__value_.__r.__words[2]);
    if (size >= v13)
    {
      *((_BYTE *)&a2->__r_.__value_.__s + 23) = v13 & 0x7F;
      v9 = a2;
      goto LABEL_19;
    }
LABEL_9:
    std::string::append(a2, v13 - size, 0);
    if (!v13)
      return 1;
    goto LABEL_10;
  }
  size = a2->__r_.__value_.__l.__size_;
  if (size < v13)
    goto LABEL_9;
  v9 = (std::string *)a2->__r_.__value_.__r.__words[0];
  a2->__r_.__value_.__l.__size_ = v13;
LABEL_19:
  v9->__r_.__value_.__s.__data_[v7] = 0;
  if (!v13)
    return 1;
LABEL_10:
  v10 = *(_QWORD *)(a1 + 8);
  if (*(_DWORD *)(v10 + 8) == 2)
  {
    v11 = -1;
  }
  else
  {
    if ((a2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v12 = (uint64_t *)a2;
    else
      v12 = (uint64_t *)a2->__r_.__value_.__r.__words[0];
    v11 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v10 + 144))(v10, v12);
    if (v11 >= 1)
      *(_QWORD *)(v10 + 16) += v11;
  }
  return v11 == v13;
}

uint64_t sub_1C991DD10(uint64_t result, char *in)
{
  const char *v2;
  _BYTE *v3;
  int v4;
  char v5;
  uuid_t uu;
  uint64_t v7;

  v2 = in;
  v3 = (_BYTE *)result;
  v7 = *MEMORY[0x1E0C80C00];
  v4 = in[23];
  if (v4 < 0)
  {
    if (*((_QWORD *)in + 1) != 36)
    {
LABEL_8:
      *(_BYTE *)result = 0;
      *(_BYTE *)(result + 16) = 0;
      return result;
    }
    v2 = *(const char **)in;
  }
  else if (v4 != 36)
  {
    goto LABEL_8;
  }
  result = uuid_parse(v2, uu);
  if ((_DWORD)result)
  {
    v5 = 0;
    *v3 = 0;
  }
  else
  {
    *(_OWORD *)v3 = *(_OWORD *)uu;
    v5 = 1;
  }
  v3[16] = v5;
  return result;
}

uint64_t sub_1C991DDC0(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E8294E00;
  if (*(char *)(a1 + 639) < 0)
    operator delete(*(void **)(a1 + 616));
  *(_QWORD *)(a1 + 32) = &off_1E8295640;
  *(_QWORD *)(a1 + 464) = off_1E8295690;
  *(_QWORD *)(a1 + 48) = off_1E8295668;
  MEMORY[0x1CAA44880](a1 + 56);
  std::iostream::~basic_iostream();
  MEMORY[0x1CAA44AB4](a1 + 464);
  return a1;
}

void sub_1C991DE48(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E8294E00;
  if (*(char *)(a1 + 639) < 0)
    operator delete(*(void **)(a1 + 616));
  *(_QWORD *)(a1 + 32) = &off_1E8295640;
  *(_QWORD *)(a1 + 464) = off_1E8295690;
  *(_QWORD *)(a1 + 48) = off_1E8295668;
  MEMORY[0x1CAA44880](a1 + 56);
  std::iostream::~basic_iostream();
  MEMORY[0x1CAA44AB4](a1 + 464);
  JUMPOUT(0x1CAA44AFCLL);
}

BOOL sub_1C991DEE0(uint64_t a1)
{
  return *(_QWORD *)(a1 + 176) != 0;
}

void sub_1C991DEF0(uint64_t a1)
{
  std::ios_base *v2;

  if (!std::filebuf::close())
  {
    v2 = (std::ios_base *)(a1 + 32 + *(_QWORD *)(*(_QWORD *)(a1 + 32) - 24));
    std::ios_base::clear(v2, v2->__rdstate_ | 4);
  }
}

uint64_t sub_1C991DF38(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  std::ios_base *v4;
  std::ios_base::iostate v5;

  if (*(_DWORD *)(a1 + 8) == 3 && *(_DWORD *)(a1 + 640) != 28)
  {
    v2 = (_QWORD *)(a1 + 32);
    if (!std::filebuf::close())
      std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), *(_DWORD *)((char *)v2 + *(_QWORD *)(*v2 - 24) + 32) | 4);
    *(_DWORD *)(a1 + 640) = 28;
    v3 = std::filebuf::open();
    v4 = (std::ios_base *)((char *)v2 + *(_QWORD *)(*(_QWORD *)(a1 + 32) - 24));
    if (v3)
      v5 = 0;
    else
      v5 = v4->__rdstate_ | 4;
    std::ios_base::clear(v4, v5);
  }
  return std::ostream::flush();
}

uint64_t sub_1C991DFF8()
{
  return 1;
}

uint64_t sub_1C991E000(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v5;

  v2 = *(_QWORD **)(a1 + 24);
  if (v2)
    std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
  std::istream::tellg();
  if (*(_DWORD *)(a1 + 32 + *(_QWORD *)(*(_QWORD *)(a1 + 32) - 24) + 32))
    return -1;
  std::istream::seekg();
  std::istream::tellg();
  v3 = v5;
  std::istream::seekg();
  return v3;
}

BOOL sub_1C991E0EC(uint64_t a1, _DWORD *a2)
{
  int v4;
  uint64_t v5;
  std::ios_base *v6;
  std::ios_base::iostate v7;

  *(_DWORD *)(a1 + 8) = *a2;
  if (*(_QWORD *)(a1 + 176))
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  if ((*a2 & 2) != 0)
    v4 = 20;
  else
    v4 = 4;
  *(_DWORD *)(a1 + 640) = v4 & 0xFFFFFFF7 | (8 * (*a2 & 1));
  v5 = std::filebuf::open();
  v6 = (std::ios_base *)(a1 + 32 + *(_QWORD *)(*(_QWORD *)(a1 + 32) - 24));
  if (v5)
    v7 = 0;
  else
    v7 = v6->__rdstate_ | 4;
  std::ios_base::clear(v6, v7);
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
  return *(_DWORD *)(a1 + 32 + *(_QWORD *)(*(_QWORD *)(a1 + 32) - 24) + 32) == 0;
}

uint64_t sub_1C991E1B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v6;
  uint64_t v7;
  std::ios_base *v8;
  std::ios_base::iostate v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v15;
  uint64_t v16;

  if (*(_DWORD *)(a1 + 8) == 3 && *(_DWORD *)(a1 + 640) != 12)
  {
    v6 = (_QWORD *)(a1 + 32);
    if (!std::filebuf::close())
      std::ios_base::clear((std::ios_base *)((char *)v6 + *(_QWORD *)(*v6 - 24)), *(_DWORD *)((char *)v6 + *(_QWORD *)(*v6 - 24) + 32) | 4);
    *(_DWORD *)(a1 + 640) = 12;
    v7 = std::filebuf::open();
    v8 = (std::ios_base *)((char *)v6 + *(_QWORD *)(*(_QWORD *)(a1 + 32) - 24));
    if (v7)
      v9 = 0;
    else
      v9 = v8->__rdstate_ | 4;
    std::ios_base::clear(v8, v9);
  }
  v10 = -1;
  if ((a3 & 0x8000000000000000) == 0)
  {
    v11 = *(_QWORD **)(a1 + 24);
    if (v11)
    {
      v10 = 0;
      if (a2)
      {
        if (a3)
        {
          std::ios_base::clear((std::ios_base *)((char *)v11 + *(_QWORD *)(*v11 - 24)), 0);
          std::istream::tellg();
          if (v16 != *(_QWORD *)(a1 + 16))
          {
            v12 = *(_QWORD **)(a1 + 24);
            if (v12)
              std::ios_base::clear((std::ios_base *)((char *)v12 + *(_QWORD *)(*v12 - 24)), 0);
            std::istream::seekg();
          }
          std::istream::tellg();
          v13 = *(_QWORD **)(a1 + 24);
          if (v15 == *(_QWORD *)(a1 + 16))
          {
            std::istream::read();
            v13 = *(_QWORD **)(a1 + 24);
            v10 = v13[1];
LABEL_20:
            std::ios_base::clear((std::ios_base *)((char *)v13 + *(_QWORD *)(*v13 - 24)), 0);
            return v10;
          }
          v10 = -1;
          if (v13)
            goto LABEL_20;
        }
      }
    }
  }
  return v10;
}

uint64_t sub_1C991E3A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v6;
  uint64_t v7;
  std::ios_base *v8;
  std::ios_base::iostate v9;
  uint64_t result;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  _BYTE v23[16];
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  _QWORD v32[17];
  _OWORD v33[8];
  uint64_t v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  if (*(_DWORD *)(a1 + 8) == 3 && *(_DWORD *)(a1 + 640) != 28)
  {
    v6 = (_QWORD *)(a1 + 32);
    if (!std::filebuf::close())
      std::ios_base::clear((std::ios_base *)((char *)v6 + *(_QWORD *)(*v6 - 24)), *(_DWORD *)((char *)v6 + *(_QWORD *)(*v6 - 24) + 32) | 4);
    *(_DWORD *)(a1 + 640) = 28;
    v7 = std::filebuf::open();
    v8 = (std::ios_base *)((char *)v6 + *(_QWORD *)(*(_QWORD *)(a1 + 32) - 24));
    if (v7)
      v9 = 0;
    else
      v9 = v8->__rdstate_ | 4;
    std::ios_base::clear(v8, v9);
  }
  result = -1;
  if ((a3 & 0x8000000000000000) == 0)
  {
    v11 = *(_QWORD **)(a1 + 24);
    if (v11)
    {
      result = 0;
      if (a2)
      {
        if (a3)
        {
          std::ios_base::clear((std::ios_base *)((char *)v11 + *(_QWORD *)(*v11 - 24)), 0);
          v12 = *(_QWORD **)(a1 + 24);
          v13 = (uint64_t)v12 + *(_QWORD *)(v12[2] - 24) + 16;
          if ((*(_BYTE *)(v13 + 32) & 5) != 0)
          {
            v14 = -1;
          }
          else
          {
            (*(void (**)(_OWORD *__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v13 + 40)
                                                                                           + 32))(v33, *(_QWORD *)(v13 + 40), 0, 1, 16);
            v14 = v34;
            v12 = *(_QWORD **)(a1 + 24);
          }
          v15 = *(_QWORD *)(a1 + 16);
          if (v14 != v15)
          {
            if (v12)
            {
              std::ios_base::clear((std::ios_base *)((char *)v12 + *(_QWORD *)(*v12 - 24)), 0);
              v15 = *(_QWORD *)(a1 + 16);
              v16 = *(_QWORD *)(a1 + 24);
            }
            else
            {
              v16 = 0;
            }
            v30 = 0u;
            v31 = 0u;
            v28 = 0u;
            v29 = 0u;
            v26 = 0u;
            v27 = 0u;
            v24 = 0u;
            v25 = 0u;
            MEMORY[0x1CAA448E0](v23, v16 + 16);
            v17 = v16 + 16 + *(_QWORD *)(*(_QWORD *)(v16 + 16) - 24);
            if ((*(_BYTE *)(v17 + 32) & 5) == 0)
            {
              v18 = *(_QWORD *)(v17 + 40);
              v33[0] = v24;
              v33[1] = v25;
              v33[2] = v26;
              v33[3] = v27;
              v33[6] = v30;
              v33[7] = v31;
              v33[4] = v28;
              v33[5] = v29;
              v34 = v15;
              (*(void (**)(_QWORD *__return_ptr, uint64_t, _OWORD *, uint64_t))(*(_QWORD *)v18 + 40))(v32, v18, v33, 16);
              if (v32[16] == -1)
                std::ios_base::clear((std::ios_base *)(v16 + 16 + *(_QWORD *)(*(_QWORD *)(v16 + 16) - 24)), *(_DWORD *)(v16 + 16 + *(_QWORD *)(*(_QWORD *)(v16 + 16) - 24) + 32) | 4);
            }
            MEMORY[0x1CAA448EC](v23);
            v12 = *(_QWORD **)(a1 + 24);
          }
          v19 = (uint64_t)v12 + *(_QWORD *)(v12[2] - 24) + 16;
          if ((*(_BYTE *)(v19 + 32) & 5) != 0)
          {
            v20 = -1;
          }
          else
          {
            (*(void (**)(_OWORD *__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v19 + 40)
                                                                                           + 32))(v33, *(_QWORD *)(v19 + 40), 0, 1, 16);
            v20 = v34;
            v12 = *(_QWORD **)(a1 + 24);
          }
          if (v20 == *(_QWORD *)(a1 + 16))
          {
            std::ostream::write();
            v21 = *(_QWORD **)(a1 + 24);
            if (v21)
            {
              std::ios_base::clear((std::ios_base *)((char *)v21 + *(_QWORD *)(*v21 - 24)), 0);
              v21 = *(_QWORD **)(a1 + 24);
            }
            v22 = (uint64_t)v21 + *(_QWORD *)(v21[2] - 24) + 16;
            if ((*(_BYTE *)(v22 + 32) & 5) == 0)
            {
              (*(void (**)(_OWORD *__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v22 + 40)
                                                                                             + 32))(v33, *(_QWORD *)(v22 + 40), 0, 1, 16);
              if (v34 != -1)
                return v34 - v20;
            }
          }
          else if (v12)
          {
            std::ios_base::clear((std::ios_base *)((char *)v12 + *(_QWORD *)(*v12 - 24)), 0);
          }
          return -1;
        }
      }
    }
  }
  return result;
}

uint64_t sub_1C991E700(uint64_t a1, __int128 *a2, _DWORD *a3)
{
  _QWORD *v6;
  _BYTE *v7;
  __int128 v8;
  char v9;
  void *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  uint64_t v15;
  std::__shared_weak_count *v16;
  _QWORD v17[36];

  *(_DWORD *)(a1 + 8) = *a3;
  *(_QWORD *)(a1 + 32) = &unk_1E82947E0;
  v6 = (_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = a1 + 32;
  *(_QWORD *)a1 = off_1E8294E00;
  *(_QWORD *)(a1 + 464) = &unk_1E8294808;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = off_1E8295668;
  std::ios_base::init((std::ios_base *)(a1 + 464), (void *)(a1 + 56));
  *(_QWORD *)(a1 + 600) = 0;
  *(_DWORD *)(a1 + 608) = -1;
  *v6 = &off_1E8295640;
  *(_QWORD *)(a1 + 464) = off_1E8295690;
  *(_QWORD *)(a1 + 48) = off_1E8295668;
  MEMORY[0x1CAA44874](a1 + 56);
  v7 = (_BYTE *)(a1 + 616);
  if (*((char *)a2 + 23) < 0)
  {
    sub_1C987D148(v7, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v8 = *a2;
    *(_QWORD *)(a1 + 632) = *((_QWORD *)a2 + 2);
    *(_OWORD *)v7 = v8;
  }
  *(_DWORD *)(a1 + 640) = 0;
  if (*a3 == 3)
  {
    cva::Path::Path();
    v9 = cva::Path::exists((cva::Path *)v17);
    cva::Path::~Path((cva::Path *)v17);
    if ((v9 & 1) == 0)
    {
      LODWORD(v17[0]) = 2;
      (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)a1 + 136))(a1, v17);
    }
  }
  if (((*(uint64_t (**)(uint64_t, _DWORD *))(*(_QWORD *)a1 + 136))(a1, a3) & 1) == 0)
  {
    sub_1C99072C4(&v15);
    if (*((char *)a2 + 23) >= 0)
      LOBYTE(v10) = (_BYTE)a2;
    else
      v10 = *(void **)a2;
    sub_1C9907EC4(v17, &v15, 0, 0, "[RELEASE ERROR  ]", "/Library/Caches/com.apple.xbs/Sources/AppleCVA/shared/src/modules/avatar/shrek/libs/alg/utils/src/fsFileDevice.cpp", 48, "Could not open file device %s", (char)v10);
    sub_1C9909318((uint64_t)v17);
    v11 = v16;
    if (v16)
    {
      p_shared_owners = (unint64_t *)&v16->__shared_owners_;
      do
        v13 = __ldaxr(p_shared_owners);
      while (__stlxr(v13 - 1, p_shared_owners));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
  }
  return a1;
}

uint64_t sub_1C991E8D8()
{
  return 0;
}

uint64_t sub_1C991E8E0@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_1C991ECF8(a2, a1, 0x7FFFFFFFFFFFFFFFLL);
}

void sub_1C991E8F0(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  std::string::value_type __c;

  if (*(_DWORD *)(a1 + 8) == 2)
  {
    *(_BYTE *)(a2 + 23) = 0;
    *(_BYTE *)a2 = 0;
  }
  else
  {
    __c = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)a2 = 0;
    do
    {
      if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1) & 1) != 0)
        break;
      if (*(_DWORD *)(a1 + 8) == 2)
        break;
      v4 = (*(uint64_t (**)(uint64_t, std::string::value_type *, uint64_t))(*(_QWORD *)a1 + 144))(a1, &__c, 1);
      if (v4 < 1)
        break;
      *(_QWORD *)(a1 + 16) += v4;
      if (v4 != 1)
        break;
      std::string::push_back((std::string *)a2, __c);
    }
    while (__c != 10);
  }
}

uint64_t sub_1C991E9A8(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (a2 < 0)
    return -1;
  if (!a2)
    return 0;
  v3 = a1[2];
  v4 = v3 + a2;
  v5 = (*(uint64_t (**)(_QWORD *))(*a1 + 104))(a1);
  if (v4 >= v5)
    v6 = v5;
  else
    v6 = v4;
  if (v4 >= 0)
    v7 = v6;
  else
    v7 = 0;
  if ((*(unsigned int (**)(_QWORD *, uint64_t))(*a1 + 128))(a1, v7))
    return a1[2] - v3;
  else
    return -1;
}

uint64_t sub_1C991EA2C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;

  v3 = -1;
  if ((a3 & 0x8000000000000000) == 0 && *(_DWORD *)(a1 + 8) != 2)
  {
    v3 = 0;
    if (a2)
    {
      if (a3)
      {
        v7 = *(_QWORD *)(a1 + 16);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 128))(a1, v7);
        if (*(_DWORD *)(a1 + 8) == 2)
        {
          v3 = -1;
        }
        else
        {
          v8 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 144))(a1, a2, a3);
          v3 = v8;
          if (v8 >= 1)
            *(_QWORD *)(a1 + 16) += v8;
        }
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 128))(a1, v7);
      }
    }
  }
  return v3;
}

uint64_t sub_1C991EAF4@<X0>(_DWORD *a1@<X0>, int64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;

  if (a1[2] == 2)
  {
    v4 = operator new();
    *(_QWORD *)(v4 + 8) = 0;
    *(_QWORD *)(v4 + 16) = 0;
    *(_QWORD *)v4 = 0;
    *(_BYTE *)(v4 + 24) = 1;
    result = sub_1C991D768(v4, 0);
    *a3 = v4;
    return result;
  }
  v8 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a1 + 112))(a1);
  if (v8 >= a2)
    v9 = a2;
  else
    v9 = v8;
  sub_1C991D910((void ***)&v13, v9);
  v10 = (*(uint64_t (**)(_DWORD *, _QWORD, unint64_t))(*(_QWORD *)a1 + 88))(a1, *v13, v9);
  if (v10 == a2)
    goto LABEL_9;
  if (v10 != -1)
  {
    sub_1C991DA3C(&v13, v10);
LABEL_9:
    v11 = operator new();
    result = sub_1C991D5C0(v11, (const void *)*v13, v13[1]);
    goto LABEL_10;
  }
  v11 = operator new();
  *(_QWORD *)(v11 + 8) = 0;
  *(_QWORD *)(v11 + 16) = 0;
  *(_QWORD *)v11 = 0;
  *(_BYTE *)(v11 + 24) = 1;
  result = sub_1C991D768(v11, 0);
LABEL_10:
  *a3 = v11;
  v12 = v13;
  if (v13)
  {
    if (*((_BYTE *)v13 + 24))
    {
      v13[1] = 0;
      if (*v12)
      {
        *(_BYTE *)*v12 = 0;
        if (*v12)
          MEMORY[0x1CAA44AE4](*v12, 0x1000C8077774924);
      }
    }
    *v12 = 0;
    v12[2] = 0;
    return MEMORY[0x1CAA44AFC](v12, 0x1010C40A6225C5ALL);
  }
  return result;
}

uint64_t sub_1C991EC88(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 128))(a1, 0);
}

uint64_t sub_1C991EC98(_QWORD *a1, uint64_t a2)
{
  if (a2 < 0)
    return 0;
  if ((*(uint64_t (**)(_QWORD *))(*a1 + 104))(a1) < a2)
    return 0;
  a1[2] = a2;
  return 1;
}

uint64_t sub_1C991ECE8(uint64_t a1, _DWORD *a2)
{
  *(_DWORD *)(a1 + 8) = *a2;
  return 1;
}

uint64_t sub_1C991ECF8(uint64_t *a1, uint64_t a2, int64_t a3)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  const void **v13;
  const void **v14;

  if (*(_DWORD *)(a2 + 8) == 2)
  {
    v4 = operator new();
    *(_QWORD *)(v4 + 8) = 0;
    *(_QWORD *)(v4 + 16) = 0;
    *(_QWORD *)v4 = 0;
    *(_BYTE *)(v4 + 24) = 1;
    result = sub_1C991D768(v4, 0);
    *a1 = v4;
  }
  else
  {
    v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 112))(a2);
    if (v8 < a3)
      a3 = v8;
    sub_1C991D910((void ***)&v14, a3);
    if (*(_DWORD *)(a2 + 8) == 2)
    {
      v9 = -1;
    }
    else
    {
      v10 = (*(uint64_t (**)(uint64_t, const void *, int64_t))(*(_QWORD *)a2 + 144))(a2, *v14, a3);
      v9 = v10;
      if (v10 >= 1)
        *(_QWORD *)(a2 + 16) += v10;
    }
    v11 = operator new();
    v12 = v11;
    if (v9 == a3)
    {
      result = sub_1C991D5C0(v11, *v14, (unint64_t)v14[1]);
    }
    else
    {
      *(_QWORD *)v11 = 0;
      *(_QWORD *)(v11 + 8) = 0;
      *(_QWORD *)(v11 + 16) = 0;
      *(_BYTE *)(v11 + 24) = 1;
      result = sub_1C991D768(v11, 0);
    }
    *a1 = v12;
    v13 = v14;
    if (v14)
    {
      if (*((_BYTE *)v14 + 24))
      {
        v14[1] = 0;
        if (*v13)
        {
          *(_BYTE *)*v13 = 0;
          if (*v13)
            MEMORY[0x1CAA44AE4](*v13, 0x1000C8077774924);
        }
      }
      *v13 = 0;
      v13[2] = 0;
      return MEMORY[0x1CAA44AFC](v13, 0x1010C40A6225C5ALL);
    }
  }
  return result;
}

BOOL sub_1C991EE94(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v5;

  v1 = *(_QWORD **)(a1 + 24);
  if (!v1)
    return 1;
  std::ios_base::clear((std::ios_base *)((char *)v1 + *(_QWORD *)(*v1 - 24)), 0);
  std::istream::seekg();
  v3 = *(_QWORD *)(a1 + 16);
  std::istream::tellg();
  return v3 >= v5;
}

uint64_t sub_1C991EF30(uint64_t a1)
{
  _QWORD *v1;

  v1 = *(_QWORD **)(a1 + 24);
  if (v1)
    return *(unsigned int *)((char *)v1 + *(_QWORD *)(*v1 - 24) + 32);
  else
    return 0xFFFFFFFFLL;
}

uint64_t sub_1C991EF54(uint64_t a1)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)a1 = &off_1E8294EB0;
  *(_QWORD *)(a1 + 24) = &off_1E8294F80;
  if (*(_BYTE *)(a1 + 56))
  {
    v2 = *(uint64_t **)(a1 + 48);
    if (v2)
    {
      v3 = *v2;
      if (*v2)
      {
        if (*(_BYTE *)(v3 + 24))
        {
          *(_QWORD *)(v3 + 8) = 0;
          if (*(_QWORD *)v3)
          {
            **(_BYTE **)v3 = 0;
            if (*(_QWORD *)v3)
              MEMORY[0x1CAA44AE4](*(_QWORD *)v3, 0x1000C8077774924);
          }
        }
        *(_QWORD *)v3 = 0;
        *(_QWORD *)(v3 + 16) = 0;
        MEMORY[0x1CAA44AFC](v3, 0x1010C40A6225C5ALL);
      }
      MEMORY[0x1CAA44AFC](v2, 0x20C4093837F09);
    }
    *(_QWORD *)(a1 + 48) = 0;
  }
  *(_QWORD *)a1 = &off_1E8294DE0;
  if (*(_BYTE *)(a1 + 16))
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    *(_QWORD *)(a1 + 8) = 0;
  }
  return a1;
}

void sub_1C991F048(uint64_t a1)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)a1 = &off_1E8294EB0;
  *(_QWORD *)(a1 + 24) = &off_1E8294F80;
  if (*(_BYTE *)(a1 + 56))
  {
    v2 = *(uint64_t **)(a1 + 48);
    if (v2)
    {
      v3 = *v2;
      if (*v2)
      {
        if (*(_BYTE *)(v3 + 24))
        {
          *(_QWORD *)(v3 + 8) = 0;
          if (*(_QWORD *)v3)
          {
            **(_BYTE **)v3 = 0;
            if (*(_QWORD *)v3)
              MEMORY[0x1CAA44AE4](*(_QWORD *)v3, 0x1000C8077774924);
          }
        }
        *(_QWORD *)v3 = 0;
        *(_QWORD *)(v3 + 16) = 0;
        MEMORY[0x1CAA44AFC](v3, 0x1010C40A6225C5ALL);
      }
      MEMORY[0x1CAA44AFC](v2, 0x20C4093837F09);
    }
    *(_QWORD *)(a1 + 48) = 0;
  }
  *(_QWORD *)a1 = &off_1E8294DE0;
  if (*(_BYTE *)(a1 + 16))
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    *(_QWORD *)(a1 + 8) = 0;
  }
  JUMPOUT(0x1CAA44AFCLL);
}

_QWORD *sub_1C991F14C(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = &off_1E8294D38;
  v2 = a1 + 1;
  v3 = (_QWORD *)a1[4];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void sub_1C991F1A8(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *a1 = &off_1E8294D38;
  v1 = a1 + 1;
  v2 = (_QWORD *)a1[4];
  if (v2 == v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  JUMPOUT(0x1CAA44AFCLL);
}

uint64_t sub_1C991F214(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 48))(result);
  return result;
}

void sub_1C991F234(uint64_t a1, uint64_t *a2)
{
  std::mutex *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;

  v4 = (std::mutex *)(a1 + 8);
  std::mutex::lock((std::mutex *)(a1 + 8));
  v5 = (std::__shared_weak_count *)a2[1];
  v11 = *a2;
  v12 = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 24))(a1, &v11);
  v8 = v12;
  if (v12)
  {
    v9 = (unint64_t *)&v12->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  *(_BYTE *)(a1 + 120) = 1;
  std::mutex::unlock(v4);
  std::condition_variable::notify_one((std::condition_variable *)(a1 + 72));
}

uint64_t sub_1C991F2F4(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *(_QWORD *)a1 = &off_1E8295140;
  v2 = (_QWORD *)(a1 + 128);
  v3 = *(_QWORD **)(a1 + 152);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  *(_QWORD *)a1 = off_1E8294DB0;
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 72));
  std::mutex::~mutex((std::mutex *)(a1 + 8));
  return a1;
}

void sub_1C991F370(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *(_QWORD *)a1 = &off_1E8295140;
  v2 = (_QWORD *)(a1 + 128);
  v3 = *(_QWORD **)(a1 + 152);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
    {
LABEL_6:
      *(_QWORD *)a1 = off_1E8294DB0;
      std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 72));
      std::mutex::~mutex((std::mutex *)(a1 + 8));
      JUMPOUT(0x1CAA44AFCLL);
    }
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
  goto LABEL_6;
}

uint64_t sub_1C991F3FC(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 152);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 48))(result);
  return result;
}

void sub_1C991F418(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1CAA44AFCLL);
}

uint64_t sub_1C991F43C(uint64_t result)
{
  void **v1;

  v1 = *(void ***)(result + 24);
  if (v1)
  {
    if (*v1)
      os_release(*v1);
    JUMPOUT(0x1CAA44AFCLL);
  }
  return result;
}

_QWORD *sub_1C991F48C(_QWORD *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *a1 = &off_1E8294ED0;
  v2 = a1[3];
  if (v2)
  {
    v3 = *(std::__shared_weak_count **)(v2 + 16);
    if (v3)
    {
      p_shared_owners = (unint64_t *)&v3->__shared_owners_;
      do
        v5 = __ldaxr(p_shared_owners);
      while (__stlxr(v5 - 1, p_shared_owners));
      if (!v5)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
    MEMORY[0x1CAA44AFC](v2, 0x1060C40484961F0);
  }
  return a1;
}

void sub_1C991F518(_QWORD *a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *a1 = &off_1E8294ED0;
  v1 = a1[3];
  if (v1)
  {
    v2 = *(std::__shared_weak_count **)(v1 + 16);
    if (v2)
    {
      p_shared_owners = (unint64_t *)&v2->__shared_owners_;
      do
        v4 = __ldaxr(p_shared_owners);
      while (__stlxr(v4 - 1, p_shared_owners));
      if (!v4)
      {
        ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
        std::__shared_weak_count::__release_weak(v2);
      }
    }
    MEMORY[0x1CAA44AFC](v1, 0x1060C40484961F0);
  }
  JUMPOUT(0x1CAA44AFCLL);
}

BOOL sub_1C991F5B4(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 104))(a1) == *(_QWORD *)(a1 + 16)
      && *(_QWORD *)(**(_QWORD **)(a1 + 24) + 16) >= *(_QWORD *)(*(_QWORD *)(a1 + 24) + 32)
                                                     + *(_QWORD *)(*(_QWORD *)(a1 + 24) + 24);
}

uint64_t sub_1C991F60C(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 24) + 32);
}

uint64_t sub_1C991F618(uint64_t a1, uint64_t a2)
{
  if (a2 < 0 || (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 104))(a1) < a2)
    return 0;
  *(_QWORD *)(a1 + 16) = a2;
  return (*(uint64_t (**)(_QWORD, uint64_t))(***(_QWORD ***)(a1 + 24) + 128))(**(_QWORD **)(a1 + 24), *(_QWORD *)(*(_QWORD *)(a1 + 24) + 24) + a2);
}

uint64_t sub_1C991F67C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t result;
  uint64_t v6;

  v3 = *(_QWORD **)(a1 + 24);
  v4 = (_QWORD *)*v3;
  if (*(_DWORD *)(*v3 + 8) == 2)
    return -1;
  v6 = v3[4] + v3[3] - v4[2];
  if (v6 < a3)
    a3 = v6;
  result = (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(*v4 + 144))(v4, a2, a3);
  if (result >= 1)
    v4[2] += result;
  return result;
}

uint64_t sub_1C991F6EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t result;
  uint64_t v6;

  v3 = *(_QWORD **)(a1 + 24);
  v4 = (_QWORD *)*v3;
  if (*(_DWORD *)(*v3 + 8) == 1)
    return -1;
  v6 = v3[4] + v3[3] - v4[2];
  if (v6 < a3)
    a3 = v6;
  result = (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(*v4 + 152))(v4, a2, a3);
  if (result >= 1)
    v4[2] += result;
  return result;
}

void sub_1C991F760(uint64_t a1)
{
  sub_1C991F784(a1);
  JUMPOUT(0x1CAA44AFCLL);
}

uint64_t sub_1C991F784(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;

  *(_QWORD *)a1 = &off_1E8295120;
  sub_1C991F874(a1, 0);
  if (*(_BYTE *)(a1 + 128))
  {
    v2 = *(_QWORD *)(a1 + 120);
    if (v2)
    {
      v3 = *(std::__shared_weak_count **)(v2 + 8);
      if (v3)
      {
        p_shared_owners = (unint64_t *)&v3->__shared_owners_;
        do
          v5 = __ldaxr(p_shared_owners);
        while (__stlxr(v5 - 1, p_shared_owners));
        if (!v5)
        {
          ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
          std::__shared_weak_count::__release_weak(v3);
        }
      }
      MEMORY[0x1CAA44AFC](v2, 0x1020C407E10CFCBLL);
    }
  }
  v6 = *(std::__shared_weak_count **)(a1 + 112);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  std::mutex::~mutex((std::mutex *)(a1 + 40));
  std::thread::~thread((std::thread *)(a1 + 32));
  v9 = *(std::__shared_weak_count **)(a1 + 24);
  if (v9)
    std::__shared_weak_count::__release_weak(v9);
  return a1;
}

void sub_1C991F874(uint64_t a1, int a2)
{
  unsigned int v3;
  std::mutex *v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::thread *v11;
  uint64_t v12;

  if (a2)
    v3 = 2;
  else
    v3 = 1;
  atomic_store(v3, (unsigned int *)(a1 + 8));
  v4 = (std::mutex *)(a1 + 40);
  std::mutex::lock((std::mutex *)(a1 + 40));
  v5 = *(std::__shared_weak_count **)(a1 + 24);
  if (v5)
  {
    v6 = std::__shared_weak_count::lock(v5);
    if (v6)
    {
      v7 = v6;
      v8 = *(_QWORD *)(a1 + 16);
      if (v8)
      {
        std::mutex::lock((std::mutex *)(v8 + 16));
        std::condition_variable::notify_all((std::condition_variable *)(v8 + 80));
        std::mutex::unlock((std::mutex *)(v8 + 16));
      }
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
  std::mutex::unlock(v4);
  v12 = *(_QWORD *)(a1 + 32);
  v11 = (std::thread *)(a1 + 32);
  if (v12)
    std::thread::join(v11);
}

uint64_t **sub_1C991F950(uint64_t *a1)
{
  std::__thread_specific_ptr<std::__thread_struct> *v1;
  const void *v2;
  uint64_t v3;
  uint64_t *v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unsigned int v9;
  int v10;
  unint64_t *v11;
  unint64_t v12;
  unsigned int v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  unsigned int v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t **v35;
  uint64_t *v36;
  uint64_t v37;
  std::__shared_weak_count *v38;
  uint64_t v39;
  std::__shared_weak_count *v40;
  std::mutex *v41;
  char v42;

  v4 = a1;
  v36 = a1;
  v1 = std::__thread_local_data();
  v2 = (const void *)*v4;
  *v4 = 0;
  pthread_setspecific(v1->__key_, v2);
  v3 = v4[1];
  sub_1C991FD38(v3, (uint64_t)(v4 + 2));
  v41 = (std::mutex *)(v3 + 40);
  v42 = 1;
  std::mutex::lock((std::mutex *)(v3 + 40));
  LODWORD(v4) = 60000;
  do
  {
    v5 = *(std::__shared_weak_count **)(v3 + 24);
    if (!v5)
      break;
    v6 = std::__shared_weak_count::lock(v5);
    if (!v6)
      break;
    v7 = v6;
    v8 = *(_QWORD *)(v3 + 16);
    if (!v8 || (v9 = atomic_load((unsigned int *)(v3 + 8)), v9 == 1))
    {
      v10 = 3;
      goto LABEL_8;
    }
    v13 = atomic_load((unsigned int *)(v3 + 8));
    if (v13 == 2)
      v4 = 0;
    else
      v4 = (uint64_t *)v4;
    v39 = 0;
    v40 = 0;
    if ((*(unsigned int (**)(uint64_t, uint64_t *, uint64_t *, std::mutex **))(*(_QWORD *)v8 + 24))(v8, &v39, v4, &v41))
    {
      if (!v42)
      {
        std::__throw_system_error(1, "unique_lock::unlock: not locked");
LABEL_56:
        std::__throw_system_error(1, "unique_lock::lock: references null mutex");
LABEL_57:
        std::__throw_system_error(11, "unique_lock::lock: already locked");
        return sub_1C991FC6C(v35);
      }
      std::mutex::unlock(v41);
      v42 = 0;
      v14 = v39;
      v15 = *(std::__shared_weak_count **)(v3 + 112);
      v37 = *(_QWORD *)(v3 + 104);
      v38 = v15;
      if (v15)
      {
        p_shared_owners = (unint64_t *)&v15->__shared_owners_;
        do
          v17 = __ldxr(p_shared_owners);
        while (__stxr(v17 + 1, p_shared_owners));
      }
      (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v14 + 16))(v14, &v37);
      v18 = v38;
      if (v38)
      {
        v19 = (unint64_t *)&v38->__shared_owners_;
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      if (!v41)
        goto LABEL_56;
      if (v42)
        goto LABEL_57;
      std::mutex::lock(v41);
      v42 = 1;
    }
    else
    {
      v21 = atomic_load((unsigned int *)(v3 + 8));
      if (v21 == 2)
      {
        v10 = 3;
        v22 = v40;
        if (v40)
          goto LABEL_32;
        goto LABEL_8;
      }
    }
    v10 = 0;
    v22 = v40;
    if (v40)
    {
LABEL_32:
      v23 = (unint64_t *)&v22->__shared_owners_;
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v24 - 1, v23));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
        std::__shared_weak_count::__release_weak(v22);
      }
    }
LABEL_8:
    v11 = (unint64_t *)&v7->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  while (!v10);
  if (v42)
    std::mutex::unlock(v41);
  if (*(_BYTE *)(v3 + 128))
  {
    v25 = *(_QWORD *)(v3 + 120);
    if (*(_BYTE *)(v25 + 56))
    {
      os_workgroup_leave(**(os_workgroup_t **)v25, (os_workgroup_join_token_t)(v25 + 16));
      v26 = *(_QWORD *)(v3 + 120);
      *(_BYTE *)(v26 + 56) = 0;
      v27 = *(std::__shared_weak_count **)(v26 + 8);
      *(_QWORD *)v26 = 0;
      *(_QWORD *)(v26 + 8) = 0;
      if (v27)
      {
        v28 = (unint64_t *)&v27->__shared_owners_;
        do
          v29 = __ldaxr(v28);
        while (__stlxr(v29 - 1, v28));
        if (!v29)
        {
          ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
          std::__shared_weak_count::__release_weak(v27);
        }
      }
    }
    if (*(_BYTE *)(v3 + 128))
    {
      v30 = *(_QWORD *)(v3 + 120);
      if (v30)
      {
        v31 = *(std::__shared_weak_count **)(v30 + 8);
        if (v31)
        {
          v32 = (unint64_t *)&v31->__shared_owners_;
          do
            v33 = __ldaxr(v32);
          while (__stlxr(v33 - 1, v32));
          if (!v33)
          {
            ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
            std::__shared_weak_count::__release_weak(v31);
          }
        }
        MEMORY[0x1CAA44AFC](v30, 0x1020C407E10CFCBLL);
      }
      *(_BYTE *)(v3 + 128) = 0;
    }
  }
  sub_1C991FC6C(&v36);
  return 0;
}

uint64_t **sub_1C991FC6C(uint64_t **a1)
{
  uint64_t *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *a1;
  *a1 = 0;
  if (!v2)
    return a1;
  if (*((_BYTE *)v2 + 80))
  {
    v3 = (std::__shared_weak_count *)v2[9];
    if (v3)
    {
      p_shared_owners = (unint64_t *)&v3->__shared_owners_;
      do
        v5 = __ldaxr(p_shared_owners);
      while (__stlxr(v5 - 1, p_shared_owners));
      if (!v5)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
        if ((*((char *)v2 + 39) & 0x80000000) == 0)
          goto LABEL_9;
        goto LABEL_8;
      }
    }
  }
  if (*((char *)v2 + 39) < 0)
LABEL_8:
    operator delete((void *)v2[2]);
LABEL_9:
  v6 = *v2;
  *v2 = 0;
  if (v6)
  {
    v7 = MEMORY[0x1CAA44958]();
    MEMORY[0x1CAA44AFC](v7, 0x20C4093837F09);
  }
  MEMORY[0x1CAA44AFC](v2, 0x1032C40E68F9261);
  return a1;
}

void sub_1C991FD38(uint64_t a1, uint64_t a2)
{
  const char *v4;
  _opaque_pthread_t *v5;
  sched_param *v6;
  int sched_priority;
  int *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  os_workgroup_t *v22;
  uint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  int v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  char v34;
  int v35;
  sched_param v36;
  uint64_t v37;
  std::__shared_weak_count *v38;
  _QWORD v39[36];

  if (*(char *)(a2 + 23) < 0)
  {
    if (!*(_QWORD *)(a2 + 8))
      goto LABEL_7;
    v4 = *(const char **)a2;
    goto LABEL_6;
  }
  v4 = (const char *)a2;
  if (*(_BYTE *)(a2 + 23))
LABEL_6:
    pthread_setname_np(v4);
LABEL_7:
  v5 = pthread_self();
  v35 = 0;
  if (!pthread_getschedparam(v5, &v35, &v36))
  {
    v6 = (sched_param *)(a2 + 32);
    if (!*(_BYTE *)(a2 + 36))
      v6 = &v36;
    sched_priority = v6->sched_priority;
    v8 = (int *)(a2 + 24);
    if (!*(_BYTE *)(a2 + 28))
      v8 = &v35;
    v9 = *v8;
    v36.sched_priority = sched_priority;
    pthread_setschedparam(v5, v9, &v36);
  }
  if (*(_BYTE *)(a2 + 41))
  {
    if (!*(_BYTE *)(a2 + 40))
    {
      pthread_set_timeshare_self();
      if (!*(_BYTE *)(a2 + 64))
        return;
      goto LABEL_17;
    }
    pthread_set_fixedpriority_self();
  }
  if (!*(_BYTE *)(a2 + 64))
    return;
LABEL_17:
  if (*(_BYTE *)(a1 + 128))
  {
    v10 = *(_QWORD *)(a1 + 120);
    if (*(_BYTE *)(v10 + 56))
    {
      os_workgroup_leave(**(os_workgroup_t **)v10, (os_workgroup_join_token_t)(v10 + 16));
      v11 = *(_QWORD *)(a1 + 120);
      *(_BYTE *)(v11 + 56) = 0;
      v12 = *(std::__shared_weak_count **)(v11 + 8);
      *(_QWORD *)v11 = 0;
      *(_QWORD *)(v11 + 8) = 0;
      if (v12)
      {
        p_shared_owners = (unint64_t *)&v12->__shared_owners_;
        do
          v14 = __ldaxr(p_shared_owners);
        while (__stlxr(v14 - 1, p_shared_owners));
        if (!v14)
        {
          ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
          std::__shared_weak_count::__release_weak(v12);
        }
      }
    }
    if (*(_BYTE *)(a1 + 128))
    {
      v15 = *(_QWORD *)(a1 + 120);
      if (v15)
      {
        v16 = *(std::__shared_weak_count **)(v15 + 8);
        if (v16)
        {
          v17 = (unint64_t *)&v16->__shared_owners_;
          do
            v18 = __ldaxr(v17);
          while (__stlxr(v18 - 1, v17));
          if (!v18)
          {
            ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
            std::__shared_weak_count::__release_weak(v16);
          }
        }
        MEMORY[0x1CAA44AFC](v15, 0x1020C407E10CFCBLL);
      }
      *(_BYTE *)(a1 + 128) = 0;
    }
  }
  v19 = *(_QWORD *)(a2 + 48);
  if (v19)
  {
    v20 = operator new();
    v21 = v20;
    v22 = *(os_workgroup_t **)v19;
    *(_QWORD *)v20 = *(_QWORD *)v19;
    v23 = *(_QWORD *)(v19 + 8);
    *(_QWORD *)(v20 + 8) = v23;
    if (v23)
    {
      v24 = (unint64_t *)(v23 + 8);
      do
        v25 = __ldxr(v24);
      while (__stxr(v25 + 1, v24));
    }
    *(_BYTE *)(v20 + 56) = 0;
    if (v22)
    {
      v26 = os_workgroup_join(*v22, (os_workgroup_join_token_t)(v20 + 16));
      *(_BYTE *)(v21 + 56) = v26 == 0;
      if (v26)
      {
        sub_1C99072C4(&v37);
        sub_1C9907EC4(v39, &v37, 0, 0, "[RELEASE ERROR  ]", "/Library/Caches/com.apple.xbs/Sources/AppleCVA/shared/src/modules/avatar/shrek/libs/alg/utils/src/ThreadWorkGroup.cpp", 99, "os_workgroup_join failed!", v34);
        sub_1C9909318((uint64_t)v39);
        v27 = v38;
        if (v38)
        {
          v28 = (unint64_t *)&v38->__shared_owners_;
          do
            v29 = __ldaxr(v28);
          while (__stlxr(v29 - 1, v28));
          if (!v29)
          {
            ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
            std::__shared_weak_count::__release_weak(v27);
          }
        }
      }
    }
    if (*(_BYTE *)(a1 + 128))
    {
      v30 = *(_QWORD *)(a1 + 120);
      *(_QWORD *)(a1 + 120) = v21;
      if (v30)
      {
        v31 = *(std::__shared_weak_count **)(v30 + 8);
        if (v31)
        {
          v32 = (unint64_t *)&v31->__shared_owners_;
          do
            v33 = __ldaxr(v32);
          while (__stlxr(v33 - 1, v32));
          if (!v33)
          {
            ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
            std::__shared_weak_count::__release_weak(v31);
          }
        }
        MEMORY[0x1CAA44AFC](v30, 0x1020C407E10CFCBLL);
      }
    }
    else
    {
      *(_QWORD *)(a1 + 120) = v21;
      *(_BYTE *)(a1 + 128) = 1;
    }
  }
}

void sub_1C9920044(uint64_t a1)
{
  sub_1C992012C(a1);
  JUMPOUT(0x1CAA44AFCLL);
}

uint64_t sub_1C9920068(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(***(_QWORD ***)(a1 + 8) + 32))(**(_QWORD **)(a1 + 8));
}

void sub_1C992007C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = **(_QWORD **)(a1 + 8);
  std::mutex::lock((std::mutex *)(v2 + 16));
  *(_BYTE *)(v2 + 128) = 1;
  std::mutex::unlock((std::mutex *)(v2 + 16));
  (*(void (**)(_QWORD))(***(_QWORD ***)(a1 + 8) + 48))(**(_QWORD **)(a1 + 8));
  (*(void (**)(_QWORD))(***(_QWORD ***)(a1 + 8) + 40))(**(_QWORD **)(a1 + 8));
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 24) - *(_QWORD *)(*(_QWORD *)(a1 + 8) + 16);
  if ((int)(v3 >> 4) >= 1)
  {
    v4 = 0;
    v5 = v3 & 0xFFFFFFFF0;
    do
    {
      sub_1C991F874(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 16) + v4), 0);
      v4 += 16;
    }
    while (v5 != v4);
  }
}

uint64_t sub_1C992012C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;

  *(_QWORD *)a1 = &off_1E82943C8;
  v2 = **(_QWORD **)(a1 + 8);
  std::mutex::lock((std::mutex *)(v2 + 16));
  *(_BYTE *)(v2 + 128) = 1;
  std::mutex::unlock((std::mutex *)(v2 + 16));
  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(v3 + 24) - *(_QWORD *)(v3 + 16);
  if ((int)(v4 >> 4) >= 1)
  {
    v5 = 0;
    v6 = v4 & 0xFFFFFFFF0;
    do
    {
      sub_1C991F874(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 16) + v5), 1);
      v5 += 16;
    }
    while (v6 != v5);
    v3 = *(_QWORD *)(a1 + 8);
    if (!v3)
      return a1;
  }
  if (*(_BYTE *)(v3 + 104))
  {
    v7 = *(std::__shared_weak_count **)(v3 + 96);
    if (v7)
    {
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
        if ((*(char *)(v3 + 63) & 0x80000000) == 0)
          goto LABEL_12;
        goto LABEL_11;
      }
    }
  }
  if (*(char *)(v3 + 63) < 0)
LABEL_11:
    operator delete(*(void **)(v3 + 40));
LABEL_12:
  v10 = *(_QWORD *)(v3 + 16);
  if (v10)
  {
    v11 = *(_QWORD *)(v3 + 24);
    v12 = *(void **)(v3 + 16);
    if (v11 != v10)
    {
      do
      {
        v13 = *(std::__shared_weak_count **)(v11 - 8);
        if (v13)
        {
          v14 = (unint64_t *)&v13->__shared_owners_;
          do
            v15 = __ldaxr(v14);
          while (__stlxr(v15 - 1, v14));
          if (!v15)
          {
            ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
            std::__shared_weak_count::__release_weak(v13);
          }
        }
        v11 -= 16;
      }
      while (v11 != v10);
      v12 = *(void **)(v3 + 16);
    }
    *(_QWORD *)(v3 + 24) = v10;
    operator delete(v12);
  }
  v16 = *(std::__shared_weak_count **)(v3 + 8);
  if (v16)
  {
    v17 = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  MEMORY[0x1CAA44AFC](v3, 0x1032C406B5009FBLL);
  return a1;
}

void sub_1C99202F0(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E8295D08;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1C9920300(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E8295D08;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1CAA44AFCLL);
}

uint64_t sub_1C9920330(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void sub_1C9920340(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E8295D78;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1C9920350(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E8295D78;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1CAA44AFCLL);
}

uint64_t sub_1C9920380(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

_QWORD *sub_1C9920390(_QWORD *a1, int a2, uint64_t a3)
{
  _QWORD *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  std::string *v21;
  std::string::size_type v22;
  const std::string::value_type *v23;
  std::string::size_type v24;
  _QWORD *v25;
  char *v26;
  char *v27;
  char *v28;
  uint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  _opaque_pthread_t *v32;
  int v33;
  int sched_priority;
  int v35;
  unsigned int v36;
  int v37;
  unint64_t *v38;
  unint64_t v39;
  int v40;
  int v41;
  int v42;
  __int16 v43;
  thread_inspect_t v44;
  kern_return_t v45;
  unint64_t *v46;
  unint64_t v47;
  std::__thread_struct *v48;
  char *v49;
  uint64_t v50;
  int v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  unint64_t v58;
  _QWORD *v59;
  _QWORD *v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  BOOL v65;
  unint64_t v66;
  __int128 v67;
  uint64_t v68;
  char *v69;
  char *v70;
  char *v71;
  _QWORD *v72;
  _QWORD *v73;
  __int128 v74;
  _QWORD *v75;
  std::__shared_weak_count *v76;
  unint64_t *p_shared_owners;
  unint64_t v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  __int128 v89;
  int v90;
  _QWORD *v91;
  _QWORD v92[21];
  std::string __dst;
  __int128 v94;
  __int16 v95;
  __int128 v96;
  unsigned __int8 v97;
  _OWORD get_default[3];
  __int16 v99;
  __int128 v100;
  char v101;
  integer_t policy_info[2];
  std::string v103;
  __int128 v104;
  __int16 v105;
  __int128 v106;
  char v107;
  int v108;
  sched_param v109;
  mach_msg_type_number_t policy_infoCnt[2];

  v5 = a1;
  *a1 = &off_1E82943C8;
  v6 = operator new();
  v7 = (char *)operator new(0xB8uLL);
  *((_QWORD *)v7 + 1) = 0;
  *((_QWORD *)v7 + 2) = 0;
  *(_QWORD *)v7 = &off_1E8295D78;
  *((_QWORD *)v7 + 3) = &off_1E8295200;
  *((_DWORD *)v7 + 8) = 0;
  *((_QWORD *)v7 + 5) = 850045863;
  *((_OWORD *)v7 + 3) = 0u;
  *((_OWORD *)v7 + 4) = 0u;
  *((_OWORD *)v7 + 5) = 0u;
  *((_QWORD *)v7 + 12) = 0;
  *((_QWORD *)v7 + 13) = 1018212795;
  *((_OWORD *)v7 + 7) = 0u;
  *((_OWORD *)v7 + 8) = 0u;
  *(_OWORD *)(v7 + 137) = 0u;
  *((_QWORD *)v7 + 20) = v7 + 160;
  *((_QWORD *)v7 + 21) = v7 + 160;
  *((_QWORD *)v7 + 22) = 0;
  std::mutex::lock((std::mutex *)(v7 + 40));
  *((_DWORD *)v7 + 8) = 0x7FFFFFFF;
  std::mutex::unlock((std::mutex *)(v7 + 40));
  *(_QWORD *)v6 = v7 + 24;
  *(_QWORD *)(v6 + 8) = v7;
  *(_QWORD *)(v6 + 24) = 0;
  *(_QWORD *)(v6 + 32) = 0;
  *(_QWORD *)(v6 + 16) = 0;
  if (*(char *)(a3 + 23) < 0)
  {
    sub_1C987D148((_BYTE *)(v6 + 40), *(void **)a3, *(_QWORD *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)(v6 + 40) = *(_OWORD *)a3;
    *(_QWORD *)(v6 + 56) = *(_QWORD *)(a3 + 16);
  }
  *(_OWORD *)(v6 + 64) = *(_OWORD *)(a3 + 24);
  *(_WORD *)(v6 + 80) = *(_WORD *)(a3 + 40);
  *(_BYTE *)(v6 + 88) = 0;
  *(_BYTE *)(v6 + 104) = 0;
  if (*(_BYTE *)(a3 + 64))
  {
    v8 = *(_QWORD *)(a3 + 56);
    *(_QWORD *)(v6 + 88) = *(_QWORD *)(a3 + 48);
    *(_QWORD *)(v6 + 96) = v8;
    if (v8)
    {
      v9 = (unint64_t *)(v8 + 8);
      do
        v10 = __ldxr(v9);
      while (__stxr(v10 + 1, v9));
    }
    *(_BYTE *)(v6 + 104) = 1;
  }
  v5[1] = v6;
  if ((*(char *)(v6 + 63) & 0x80000000) == 0)
  {
    if (*(_BYTE *)(v6 + 63))
      goto LABEL_11;
LABEL_14:
    sub_1C98809C8((void **)(v6 + 40), "com.apple.applecva.taskconsumerthread", 0x25uLL);
    if (a2 > 0)
      goto LABEL_20;
    goto LABEL_15;
  }
  if (!*(_QWORD *)(v6 + 48))
    goto LABEL_14;
LABEL_11:
  if (a2 > 0)
    goto LABEL_20;
LABEL_15:
  sub_1C99072C4(get_default);
  sub_1C9907EC4(v92, get_default, 0, 0, "[RELEASE ERROR  ]", "/Library/Caches/com.apple.xbs/Sources/AppleCVA/shared/src/modules/avatar/shrek/libs/alg/utils/src/TaskThreadPool.cpp", 57, "assert %s failed. A threadpool needs at least one thread.%s", (char)"poolsize >= 1");
  sub_1C9909318((uint64_t)v92);
  v11 = (std::__shared_weak_count *)*((_QWORD *)&get_default[0] + 1);
  if (*((_QWORD *)&get_default[0] + 1))
  {
    v12 = (unint64_t *)(*((_QWORD *)&get_default[0] + 1) + 8);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
LABEL_20:
  if (a2 <= 1)
    v14 = 1;
  else
    v14 = a2;
  v15 = *(_QWORD *)(v5[1] + 24) - *(_QWORD *)(v5[1] + 16);
  v16 = v15 >> 4;
  if ((int)v14 > (int)(v15 >> 4))
  {
    v90 = v14;
    v91 = v5;
    while (1)
    {
      v17 = v5[1];
      if (*(char *)(v17 + 63) < 0)
        sub_1C987D148(&__dst, *(void **)(v17 + 40), *(_QWORD *)(v17 + 48));
      else
        __dst = *(std::string *)(v17 + 40);
      v94 = *(_OWORD *)(v17 + 64);
      v95 = *(_WORD *)(v17 + 80);
      LOBYTE(v96) = 0;
      v97 = 0;
      if (*(_BYTE *)(v17 + 104))
      {
        v18 = *(_QWORD *)(v17 + 96);
        *(_QWORD *)&v96 = *(_QWORD *)(v17 + 88);
        *((_QWORD *)&v96 + 1) = v18;
        if (v18)
        {
          v19 = (unint64_t *)(v18 + 8);
          do
            v20 = __ldxr(v19);
          while (__stxr(v20 + 1, v19));
        }
        v97 = 1;
      }
      if (v14 >= 2)
      {
        std::to_string(&v103, v16 + 1);
        v21 = std::string::insert(&v103, 0, ".", 1uLL);
        v22 = v21->__r_.__value_.__r.__words[2];
        get_default[0] = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
        *(_QWORD *)&get_default[1] = v22;
        v21->__r_.__value_.__l.__size_ = 0;
        v21->__r_.__value_.__r.__words[2] = 0;
        v21->__r_.__value_.__r.__words[0] = 0;
        if ((SBYTE7(get_default[1]) & 0x80u) == 0)
          v23 = (const std::string::value_type *)get_default;
        else
          v23 = *(const std::string::value_type **)&get_default[0];
        if ((SBYTE7(get_default[1]) & 0x80u) == 0)
          v24 = BYTE7(get_default[1]);
        else
          v24 = *((_QWORD *)&get_default[0] + 1);
        std::string::append(&__dst, v23, v24);
        if (SBYTE7(get_default[1]) < 0)
        {
          operator delete(*(void **)&get_default[0]);
          if ((SHIBYTE(v103.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_45;
        }
        else if ((SHIBYTE(v103.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
          goto LABEL_45;
        }
        operator delete(v103.__r_.__value_.__l.__data_);
      }
LABEL_45:
      v25 = (_QWORD *)v5[1];
      v26 = (char *)operator new(0xA0uLL);
      v27 = v26;
      *((_QWORD *)v26 + 1) = 0;
      *((_QWORD *)v26 + 2) = 0;
      *((_QWORD *)v26 + 3) = &off_1E8295120;
      v28 = v26 + 24;
      *(_QWORD *)v26 = &off_1E8295D08;
      *((_DWORD *)v26 + 8) = 0;
      *((_QWORD *)v26 + 5) = *v25;
      v29 = v25[1];
      *((_QWORD *)v26 + 6) = v29;
      if (v29)
      {
        v30 = (unint64_t *)(v29 + 16);
        do
          v31 = __ldxr(v30);
        while (__stxr(v31 + 1, v30));
      }
      *(_OWORD *)(v26 + 56) = xmmword_1C9927900;
      v26[152] = 0;
      *(_OWORD *)(v26 + 72) = 0u;
      *(_OWORD *)(v26 + 88) = 0u;
      *(_OWORD *)(v26 + 104) = 0u;
      *(_OWORD *)(v26 + 120) = 0u;
      *(_OWORD *)(v26 + 129) = 0u;
      v108 = -1;
      v32 = pthread_self();
      v33 = pthread_getschedparam(v32, &v108, &v109);
      sched_priority = v109.sched_priority;
      v35 = v94;
      v36 = 1;
      if ((v94 & 0xFF00000000) != 0 && v94 <= 4)
        v36 = (9u >> v94) & 1;
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
        sub_1C987D148(&v103, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
      else
        v103 = __dst;
      v104 = v94;
      v105 = v95;
      LOBYTE(v106) = 0;
      v107 = 0;
      v37 = v97;
      if (v97)
      {
        v106 = v96;
        if (*((_QWORD *)&v96 + 1))
        {
          v38 = (unint64_t *)(*((_QWORD *)&v96 + 1) + 8);
          do
            v39 = __ldxr(v38);
          while (__stxr(v39 + 1, v38));
        }
        v107 = 1;
      }
      v40 = v108;
      if (v108 <= 1)
        v40 = 1;
      if (v36)
        v41 = v40;
      else
        v41 = v35;
      LODWORD(v104) = v41;
      BYTE4(v104) = 1;
      if (v33 || sched_priority <= 0)
        sched_priority = sched_get_priority_min(v41);
      if (BYTE12(v94))
        v42 = DWORD2(v94);
      else
        v42 = sched_priority;
      DWORD2(v104) = v42;
      BYTE12(v104) = 1;
      if (HIBYTE(v95))
      {
        v43 = v95;
      }
      else
      {
        LODWORD(get_default[0]) = 0;
        policy_infoCnt[0] = 1;
        v44 = MEMORY[0x1CAA44F88]();
        v45 = thread_policy_get(v44, 1u, policy_info, policy_infoCnt, (BOOLean_t *)get_default);
        v43 = ((v45 | policy_info[0]) == 0) | ((v45 == 0) << 8);
      }
      v105 = v43;
      *(_QWORD *)&get_default[0] = v28;
      if (SHIBYTE(v103.__r_.__value_.__r.__words[2]) < 0)
        sub_1C987D148((_BYTE *)get_default + 8, v103.__r_.__value_.__l.__data_, v103.__r_.__value_.__l.__size_);
      else
        *(std::string *)((char *)get_default + 8) = v103;
      get_default[2] = v104;
      v99 = v105;
      LOBYTE(v100) = 0;
      v101 = 0;
      if (v37)
      {
        v100 = v106;
        if (*((_QWORD *)&v106 + 1))
        {
          v46 = (unint64_t *)(*((_QWORD *)&v106 + 1) + 8);
          do
            v47 = __ldxr(v46);
          while (__stxr(v47 + 1, v46));
        }
        v101 = 1;
      }
      v48 = (std::__thread_struct *)operator new();
      std::__thread_struct::__thread_struct(v48);
      v49 = (char *)operator new();
      v50 = *(_QWORD *)&get_default[0];
      *(_QWORD *)v49 = v48;
      *((_QWORD *)v49 + 1) = v50;
      *((_OWORD *)v49 + 1) = *(_OWORD *)((char *)get_default + 8);
      *((_QWORD *)v49 + 4) = *((_QWORD *)&get_default[1] + 1);
      memset((char *)get_default + 8, 0, 24);
      *(_OWORD *)(v49 + 40) = v104;
      *((_WORD *)v49 + 28) = v105;
      v49[64] = 0;
      v49[80] = 0;
      if (v37)
      {
        *((_OWORD *)v49 + 4) = v100;
        v100 = 0uLL;
        v49[80] = 1;
      }
      v51 = pthread_create((pthread_t *)policy_info, 0, (void *(__cdecl *)(void *))sub_1C991F950, v49);
      if (v51)
      {
        std::__throw_system_error(v51, "thread constructor failed");
LABEL_142:
        std::terminate();
      }
      *(_QWORD *)policy_infoCnt = 0;
      sub_1C991FC6C((uint64_t **)policy_infoCnt);
      if (*((_QWORD *)v27 + 7))
        goto LABEL_142;
      *((_QWORD *)v27 + 7) = *(_QWORD *)policy_info;
      *(_QWORD *)policy_info = 0;
      std::thread::~thread((std::thread *)policy_info);
      if (v37)
      {
        v52 = (std::__shared_weak_count *)*((_QWORD *)&v100 + 1);
        if (*((_QWORD *)&v100 + 1))
        {
          v53 = (unint64_t *)(*((_QWORD *)&v100 + 1) + 8);
          do
            v54 = __ldaxr(v53);
          while (__stlxr(v54 - 1, v53));
          if (!v54)
          {
            ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
            std::__shared_weak_count::__release_weak(v52);
            if ((SHIBYTE(get_default[1]) & 0x80000000) == 0)
              goto LABEL_92;
LABEL_91:
            operator delete(*((void **)&get_default[0] + 1));
            goto LABEL_92;
          }
        }
      }
      if (SHIBYTE(get_default[1]) < 0)
        goto LABEL_91;
LABEL_92:
      if (v107)
      {
        v55 = (std::__shared_weak_count *)*((_QWORD *)&v106 + 1);
        if (*((_QWORD *)&v106 + 1))
        {
          v56 = (unint64_t *)(*((_QWORD *)&v106 + 1) + 8);
          do
            v57 = __ldaxr(v56);
          while (__stlxr(v57 - 1, v56));
          if (!v57)
          {
            ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
            std::__shared_weak_count::__release_weak(v55);
            if ((SHIBYTE(v103.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              goto LABEL_99;
LABEL_98:
            operator delete(v103.__r_.__value_.__l.__data_);
            goto LABEL_99;
          }
        }
      }
      if (SHIBYTE(v103.__r_.__value_.__r.__words[2]) < 0)
        goto LABEL_98;
LABEL_99:
      v59 = (_QWORD *)v25[3];
      v58 = v25[4];
      if ((unint64_t)v59 >= v58)
      {
        v61 = v25[2];
        v62 = ((uint64_t)v59 - v61) >> 4;
        v63 = v62 + 1;
        if ((unint64_t)(v62 + 1) >> 60)
          abort();
        v64 = v58 - v61;
        if (v64 >> 3 > v63)
          v63 = v64 >> 3;
        v65 = (unint64_t)v64 >= 0x7FFFFFFFFFFFFFF0;
        v66 = 0xFFFFFFFFFFFFFFFLL;
        if (!v65)
          v66 = v63;
        if (v66 >> 60)
          sub_1C9899D30();
        *(_QWORD *)&v67 = v28;
        *((_QWORD *)&v67 + 1) = v27;
        v89 = v67;
        v68 = 16 * v66;
        v69 = (char *)operator new(16 * v66);
        v70 = &v69[16 * v62];
        v71 = &v69[v68];
        *(_OWORD *)v70 = v89;
        v60 = v70 + 16;
        v72 = (_QWORD *)v25[2];
        v73 = (_QWORD *)v25[3];
        if (v73 == v72)
        {
          v25[2] = v70;
          v25[3] = v60;
          v25[4] = v71;
        }
        else
        {
          do
          {
            v74 = *((_OWORD *)v73 - 1);
            v73 -= 2;
            *((_OWORD *)v70 - 1) = v74;
            v70 -= 16;
            *v73 = 0;
            v73[1] = 0;
          }
          while (v73 != v72);
          v73 = (_QWORD *)v25[2];
          v75 = (_QWORD *)v25[3];
          v25[2] = v70;
          v25[3] = v60;
          v25[4] = v71;
          while (v75 != v73)
          {
            v76 = (std::__shared_weak_count *)*(v75 - 1);
            if (v76)
            {
              p_shared_owners = (unint64_t *)&v76->__shared_owners_;
              do
                v78 = __ldaxr(p_shared_owners);
              while (__stlxr(v78 - 1, p_shared_owners));
              if (!v78)
              {
                ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
                std::__shared_weak_count::__release_weak(v76);
              }
            }
            v75 -= 2;
          }
        }
        if (v73)
          operator delete(v73);
      }
      else
      {
        *v59 = v28;
        v59[1] = v27;
        v60 = v59 + 2;
      }
      v25[3] = v60;
      v5 = v91;
      if (v97)
      {
        v79 = (std::__shared_weak_count *)*((_QWORD *)&v96 + 1);
        if (*((_QWORD *)&v96 + 1))
        {
          v80 = (unint64_t *)(*((_QWORD *)&v96 + 1) + 8);
          do
            v81 = __ldaxr(v80);
          while (__stlxr(v81 - 1, v80));
          if (!v81)
          {
            ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
            std::__shared_weak_count::__release_weak(v79);
          }
        }
      }
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__dst.__r_.__value_.__l.__data_);
      LODWORD(v16) = v16 + 1;
      LODWORD(v14) = v90;
      if ((_DWORD)v16 == v90)
        return v5;
    }
  }
  if ((int)v14 < (int)(v15 >> 4))
  {
    v82 = (int)((uint64_t)v15 >> 4);
    do
    {
      --v82;
      sub_1C991F874(*(_QWORD *)(*(_QWORD *)(v5[1] + 16) + 16 * v82), 0);
      v83 = v5[1];
      v84 = *(_QWORD *)(v83 + 24);
      v85 = *(std::__shared_weak_count **)(v84 - 8);
      if (v85)
      {
        v86 = (unint64_t *)&v85->__shared_owners_;
        do
          v87 = __ldaxr(v86);
        while (__stlxr(v87 - 1, v86));
        if (!v87)
        {
          ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
          std::__shared_weak_count::__release_weak(v85);
        }
      }
      *(_QWORD *)(v83 + 24) = v84 - 16;
    }
    while (v82 > v14);
  }
  return v5;
}

uint64_t sub_1C9920D30(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  *(_QWORD *)a1 = off_1E82955F0;
  if (*(_BYTE *)(a1 + 88))
  {
    v2 = *(std::__shared_weak_count **)(a1 + 80);
    if (v2)
    {
      p_shared_owners = (unint64_t *)&v2->__shared_owners_;
      do
        v4 = __ldaxr(p_shared_owners);
      while (__stlxr(v4 - 1, p_shared_owners));
      if (!v4)
      {
        ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
        std::__shared_weak_count::__release_weak(v2);
        if ((*(char *)(a1 + 47) & 0x80000000) == 0)
          goto LABEL_8;
        goto LABEL_7;
      }
    }
  }
  if (*(char *)(a1 + 47) < 0)
LABEL_7:
    operator delete(*(void **)(a1 + 24));
LABEL_8:
  v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (v5)
  {
    v6 = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  return a1;
}

void sub_1C9920DF0(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  *(_QWORD *)a1 = off_1E82955F0;
  if (!*(_BYTE *)(a1 + 88))
    goto LABEL_6;
  v2 = *(std::__shared_weak_count **)(a1 + 80);
  if (!v2)
    goto LABEL_6;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    if ((*(char *)(a1 + 47) & 0x80000000) == 0)
    {
LABEL_8:
      v5 = *(std::__shared_weak_count **)(a1 + 16);
      if (v5)
      {
        v6 = (unint64_t *)&v5->__shared_owners_;
        do
          v7 = __ldaxr(v6);
        while (__stlxr(v7 - 1, v6));
        if (!v7)
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
        }
      }
      JUMPOUT(0x1CAA44AFCLL);
    }
  }
  else
  {
LABEL_6:
    if ((*(char *)(a1 + 47) & 0x80000000) == 0)
      goto LABEL_8;
  }
  operator delete(*(void **)(a1 + 24));
  goto LABEL_8;
}

_QWORD *sub_1C9920EC0(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;

  v2 = operator new(0x60uLL);
  v3 = v2;
  v5 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  *v2 = off_1E82955F0;
  v2[1] = v5;
  v2[2] = v4;
  if (v4)
  {
    v6 = (unint64_t *)(v4 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  v8 = v2 + 3;
  if (*(char *)(a1 + 47) < 0)
  {
    sub_1C987D148(v8, *(void **)(a1 + 24), *(_QWORD *)(a1 + 32));
  }
  else
  {
    *(_OWORD *)v8 = *(_OWORD *)(a1 + 24);
    v3[5] = *(_QWORD *)(a1 + 40);
  }
  *((_OWORD *)v3 + 3) = *(_OWORD *)(a1 + 48);
  *((_WORD *)v3 + 32) = *(_WORD *)(a1 + 64);
  *((_BYTE *)v3 + 72) = 0;
  *((_BYTE *)v3 + 88) = 0;
  if (*(_BYTE *)(a1 + 88))
  {
    v9 = *(_QWORD *)(a1 + 80);
    v3[9] = *(_QWORD *)(a1 + 72);
    v3[10] = v9;
    if (v9)
    {
      v10 = (unint64_t *)(v9 + 8);
      do
        v11 = __ldxr(v10);
      while (__stxr(v11 + 1, v10));
    }
    *((_BYTE *)v3 + 88) = 1;
  }
  return v3;
}

_BYTE *sub_1C9920F8C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  _BYTE *result;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;

  v5 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)a2 = off_1E82955F0;
  *(_QWORD *)(a2 + 8) = v5;
  *(_QWORD *)(a2 + 16) = v4;
  if (v4)
  {
    v6 = (unint64_t *)(v4 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  result = (_BYTE *)(a2 + 24);
  if (*(char *)(a1 + 47) < 0)
  {
    result = sub_1C987D148(result, *(void **)(a1 + 24), *(_QWORD *)(a1 + 32));
  }
  else
  {
    v9 = *(_OWORD *)(a1 + 24);
    *(_QWORD *)(a2 + 40) = *(_QWORD *)(a1 + 40);
    *(_OWORD *)result = v9;
  }
  v10 = *(_OWORD *)(a1 + 48);
  *(_WORD *)(a2 + 64) = *(_WORD *)(a1 + 64);
  *(_OWORD *)(a2 + 48) = v10;
  *(_BYTE *)(a2 + 72) = 0;
  *(_BYTE *)(a2 + 88) = 0;
  if (*(_BYTE *)(a1 + 88))
  {
    v11 = *(_QWORD *)(a1 + 80);
    *(_QWORD *)(a2 + 72) = *(_QWORD *)(a1 + 72);
    *(_QWORD *)(a2 + 80) = v11;
    if (v11)
    {
      v12 = (unint64_t *)(v11 + 8);
      do
        v13 = __ldxr(v12);
      while (__stxr(v13 + 1, v12));
    }
    *(_BYTE *)(a2 + 88) = 1;
  }
  return result;
}

void sub_1C992104C(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  if (!*(_BYTE *)(a1 + 88))
    goto LABEL_6;
  v2 = *(std::__shared_weak_count **)(a1 + 80);
  if (!v2)
    goto LABEL_6;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_6:
    if ((*(char *)(a1 + 47) & 0x80000000) == 0)
      goto LABEL_7;
LABEL_10:
    operator delete(*(void **)(a1 + 24));
    v5 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v5)
      return;
    goto LABEL_11;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  if (*(char *)(a1 + 47) < 0)
    goto LABEL_10;
LABEL_7:
  v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v5)
    return;
LABEL_11:
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
}

void sub_1C992110C(char *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  if (__p[88])
  {
    v2 = (std::__shared_weak_count *)*((_QWORD *)__p + 10);
    if (v2)
    {
      p_shared_owners = (unint64_t *)&v2->__shared_owners_;
      do
        v4 = __ldaxr(p_shared_owners);
      while (__stlxr(v4 - 1, p_shared_owners));
      if (!v4)
      {
        ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
        std::__shared_weak_count::__release_weak(v2);
        if ((__p[47] & 0x80000000) == 0)
          goto LABEL_8;
        goto LABEL_7;
      }
    }
  }
  if (__p[47] < 0)
LABEL_7:
    operator delete(*((void **)__p + 3));
LABEL_8:
  v5 = (std::__shared_weak_count *)*((_QWORD *)__p + 2);
  if (v5)
  {
    v6 = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  operator delete(__p);
}

void sub_1C99211C0(uint64_t a1)
{
  sub_1C991FD38(*(_QWORD *)(a1 + 8), a1 + 24);
}

CFIndex CFArrayGetCount(CFArrayRef theArray)
{
  return MEMORY[0x1E0C97D60](theArray);
}

CFTypeID CFArrayGetTypeID(void)
{
  return MEMORY[0x1E0C97D90]();
}

const void *__cdecl CFArrayGetValueAtIndex(CFArrayRef theArray, CFIndex idx)
{
  return (const void *)MEMORY[0x1E0C97D98](theArray, idx);
}

Boolean CFBooleanGetValue(CFBooleanRef BOOLean)
{
  return MEMORY[0x1E0C97FE0](BOOLean);
}

CFStringRef CFCopyDescription(CFTypeRef cf)
{
  return (CFStringRef)MEMORY[0x1E0C98350](cf);
}

CFDataRef CFDataCreate(CFAllocatorRef allocator, const UInt8 *bytes, CFIndex length)
{
  return (CFDataRef)MEMORY[0x1E0C983A0](allocator, bytes, length);
}

CFMutableDataRef CFDataCreateMutable(CFAllocatorRef allocator, CFIndex capacity)
{
  return (CFMutableDataRef)MEMORY[0x1E0C983B8](allocator, capacity);
}

const UInt8 *__cdecl CFDataGetBytePtr(CFDataRef theData)
{
  return (const UInt8 *)MEMORY[0x1E0C983E0](theData);
}

void CFDataGetBytes(CFDataRef theData, CFRange range, UInt8 *buffer)
{
  MEMORY[0x1E0C983F0](theData, range.location, range.length, buffer);
}

CFIndex CFDataGetLength(CFDataRef theData)
{
  return MEMORY[0x1E0C983F8](theData);
}

UInt8 *__cdecl CFDataGetMutableBytePtr(CFMutableDataRef theData)
{
  return (UInt8 *)MEMORY[0x1E0C98408](theData);
}

void CFDataSetLength(CFMutableDataRef theData, CFIndex length)
{
  MEMORY[0x1E0C98430](theData, length);
}

void CFDictionaryAddValue(CFMutableDictionaryRef theDict, const void *key, const void *value)
{
  MEMORY[0x1E0C98500](theDict, key, value);
}

CFMutableDictionaryRef CFDictionaryCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFDictionaryKeyCallBacks *keyCallBacks, const CFDictionaryValueCallBacks *valueCallBacks)
{
  return (CFMutableDictionaryRef)MEMORY[0x1E0C98550](allocator, capacity, keyCallBacks, valueCallBacks);
}

CFMutableDictionaryRef CFDictionaryCreateMutableCopy(CFAllocatorRef allocator, CFIndex capacity, CFDictionaryRef theDict)
{
  return (CFMutableDictionaryRef)MEMORY[0x1E0C98558](allocator, capacity, theDict);
}

CFIndex CFDictionaryGetCount(CFDictionaryRef theDict)
{
  return MEMORY[0x1E0C98570](theDict);
}

CFTypeID CFDictionaryGetTypeID(void)
{
  return MEMORY[0x1E0C985A8]();
}

const void *__cdecl CFDictionaryGetValue(CFDictionaryRef theDict, const void *key)
{
  return (const void *)MEMORY[0x1E0C985B8](theDict, key);
}

void CFDictionarySetValue(CFMutableDictionaryRef theDict, const void *key, const void *value)
{
  MEMORY[0x1E0C98610](theDict, key, value);
}

CFAllocatorRef CFGetAllocator(CFTypeRef cf)
{
  return (CFAllocatorRef)MEMORY[0x1E0C98718](cf);
}

CFTypeID CFGetTypeID(CFTypeRef cf)
{
  return MEMORY[0x1E0C98738](cf);
}

CFNumberRef CFNumberCreate(CFAllocatorRef allocator, CFNumberType theType, const void *valuePtr)
{
  return (CFNumberRef)MEMORY[0x1E0C98928](allocator, theType, valuePtr);
}

CFTypeID CFNumberGetTypeID(void)
{
  return MEMORY[0x1E0C989B8]();
}

Boolean CFNumberGetValue(CFNumberRef number, CFNumberType theType, void *valuePtr)
{
  return MEMORY[0x1E0C989C0](number, theType, valuePtr);
}

CFPropertyListRef CFPreferencesCopyAppValue(CFStringRef key, CFStringRef applicationID)
{
  return (CFPropertyListRef)MEMORY[0x1E0C98A40](key, applicationID);
}

void CFRelease(CFTypeRef cf)
{
  MEMORY[0x1E0C98BC0](cf);
}

CFTypeRef CFRetain(CFTypeRef cf)
{
  return (CFTypeRef)MEMORY[0x1E0C98BD0](cf);
}

CFComparisonResult CFStringCompare(CFStringRef theString1, CFStringRef theString2, CFStringCompareFlags compareOptions)
{
  return MEMORY[0x1E0C98F10](theString1, theString2, compareOptions);
}

CFStringRef CFStringCreateWithCString(CFAllocatorRef alloc, const char *cStr, CFStringEncoding encoding)
{
  return (CFStringRef)MEMORY[0x1E0C98FD0](alloc, cStr, *(_QWORD *)&encoding);
}

CFStringRef CFStringCreateWithCStringNoCopy(CFAllocatorRef alloc, const char *cStr, CFStringEncoding encoding, CFAllocatorRef contentsDeallocator)
{
  return (CFStringRef)MEMORY[0x1E0C98FE0](alloc, cStr, *(_QWORD *)&encoding, contentsDeallocator);
}

CFStringRef CFStringCreateWithFormat(CFAllocatorRef alloc, CFDictionaryRef formatOptions, CFStringRef format, ...)
{
  return (CFStringRef)MEMORY[0x1E0C99018](alloc, formatOptions, format);
}

Boolean CFStringGetCString(CFStringRef theString, char *buffer, CFIndex bufferSize, CFStringEncoding encoding)
{
  return MEMORY[0x1E0C99098](theString, buffer, bufferSize, *(_QWORD *)&encoding);
}

const char *__cdecl CFStringGetCStringPtr(CFStringRef theString, CFStringEncoding encoding)
{
  return (const char *)MEMORY[0x1E0C990A0](theString, *(_QWORD *)&encoding);
}

CFTypeID CFStringGetTypeID(void)
{
  return MEMORY[0x1E0C99170]();
}

CFDictionaryRef CGRectCreateDictionaryRepresentation(CGRect a1)
{
  return (CFDictionaryRef)MEMORY[0x1E0C9D560]((__n128)a1.origin, *(__n128 *)&a1.origin.y, (__n128)a1.size, *(__n128 *)&a1.size.height);
}

BOOL CGRectMakeWithDictionaryRepresentation(CFDictionaryRef dict, CGRect *rect)
{
  return MEMORY[0x1E0C9D620](dict, rect);
}

CMClockRef CMClockGetHostTimeClock(void)
{
  return (CMClockRef)MEMORY[0x1E0C9ED40]();
}

CMTime *__cdecl CMClockGetTime(CMTime *__return_ptr retstr, CMClockRef clock)
{
  return (CMTime *)MEMORY[0x1E0C9ED48](retstr, clock);
}

CMTime *__cdecl CMTimeAdd(CMTime *__return_ptr retstr, CMTime *lhs, CMTime *rhs)
{
  return (CMTime *)MEMORY[0x1E0C9F298](retstr, lhs, rhs);
}

int32_t CMTimeCompare(CMTime *time1, CMTime *time2)
{
  return MEMORY[0x1E0C9F2D8](time1, time2);
}

CFDictionaryRef CMTimeCopyAsDictionary(CMTime *time, CFAllocatorRef allocator)
{
  return (CFDictionaryRef)MEMORY[0x1E0C9F2F0](time, allocator);
}

Float64 CMTimeGetSeconds(CMTime *time)
{
  Float64 result;

  MEMORY[0x1E0C9F310](time);
  return result;
}

CMTime *__cdecl CMTimeMake(CMTime *__return_ptr retstr, int64_t value, int32_t timescale)
{
  return (CMTime *)MEMORY[0x1E0C9F318](retstr, value, *(_QWORD *)&timescale);
}

CMTime *__cdecl CMTimeMakeFromDictionary(CMTime *__return_ptr retstr, CFDictionaryRef dictionaryRepresentation)
{
  return (CMTime *)MEMORY[0x1E0C9F320](retstr, dictionaryRepresentation);
}

CMTime *__cdecl CMTimeMakeWithSeconds(CMTime *__return_ptr retstr, Float64 seconds, int32_t preferredTimescale)
{
  return (CMTime *)MEMORY[0x1E0C9F330](retstr, *(_QWORD *)&preferredTimescale, seconds);
}

CMTime *__cdecl CMTimeSubtract(CMTime *__return_ptr retstr, CMTime *lhs, CMTime *rhs)
{
  return (CMTime *)MEMORY[0x1E0C9F400](retstr, lhs, rhs);
}

CFTypeRef CVBufferCopyAttachment(CVBufferRef buffer, CFStringRef key, CVAttachmentMode *attachmentMode)
{
  return (CFTypeRef)MEMORY[0x1E0CA8900](buffer, key, attachmentMode);
}

CVReturn CVMetalTextureCacheCreate(CFAllocatorRef allocator, CFDictionaryRef cacheAttributes, id metalDevice, CFDictionaryRef textureAttributes, CVMetalTextureCacheRef *cacheOut)
{
  return MEMORY[0x1E0CA8A30](allocator, cacheAttributes, metalDevice, textureAttributes, cacheOut);
}

CVReturn CVMetalTextureCacheCreateTextureFromImage(CFAllocatorRef allocator, CVMetalTextureCacheRef textureCache, CVImageBufferRef sourceImage, CFDictionaryRef textureAttributes, MTLPixelFormat pixelFormat, size_t width, size_t height, size_t planeIndex, CVMetalTextureRef *textureOut)
{
  return MEMORY[0x1E0CA8A38](allocator, textureCache, sourceImage, textureAttributes, pixelFormat, width, height, planeIndex);
}

id CVMetalTextureGetTexture(CVMetalTextureRef image)
{
  return (id)MEMORY[0x1E0CA8A50](image);
}

CVReturn CVPixelBufferCreate(CFAllocatorRef allocator, size_t width, size_t height, OSType pixelFormatType, CFDictionaryRef pixelBufferAttributes, CVPixelBufferRef *pixelBufferOut)
{
  return MEMORY[0x1E0CA8A98](allocator, width, height, *(_QWORD *)&pixelFormatType, pixelBufferAttributes, pixelBufferOut);
}

CVReturn CVPixelBufferCreateWithBytes(CFAllocatorRef allocator, size_t width, size_t height, OSType pixelFormatType, void *baseAddress, size_t bytesPerRow, CVPixelBufferReleaseBytesCallback releaseCallback, void *releaseRefCon, CFDictionaryRef pixelBufferAttributes, CVPixelBufferRef *pixelBufferOut)
{
  return MEMORY[0x1E0CA8AB8](allocator, width, height, *(_QWORD *)&pixelFormatType, baseAddress, bytesPerRow, releaseCallback, releaseRefCon);
}

void *__cdecl CVPixelBufferGetBaseAddress(CVPixelBufferRef pixelBuffer)
{
  return (void *)MEMORY[0x1E0CA8AE0](pixelBuffer);
}

void *__cdecl CVPixelBufferGetBaseAddressOfPlane(CVPixelBufferRef pixelBuffer, size_t planeIndex)
{
  return (void *)MEMORY[0x1E0CA8AE8](pixelBuffer, planeIndex);
}

size_t CVPixelBufferGetBytesPerRow(CVPixelBufferRef pixelBuffer)
{
  return MEMORY[0x1E0CA8AF8](pixelBuffer);
}

size_t CVPixelBufferGetBytesPerRowOfPlane(CVPixelBufferRef pixelBuffer, size_t planeIndex)
{
  return MEMORY[0x1E0CA8B00](pixelBuffer, planeIndex);
}

size_t CVPixelBufferGetHeight(CVPixelBufferRef pixelBuffer)
{
  return MEMORY[0x1E0CA8B20](pixelBuffer);
}

size_t CVPixelBufferGetHeightOfPlane(CVPixelBufferRef pixelBuffer, size_t planeIndex)
{
  return MEMORY[0x1E0CA8B28](pixelBuffer, planeIndex);
}

IOSurfaceRef CVPixelBufferGetIOSurface(CVPixelBufferRef pixelBuffer)
{
  return (IOSurfaceRef)MEMORY[0x1E0CA8B30](pixelBuffer);
}

OSType CVPixelBufferGetPixelFormatType(CVPixelBufferRef pixelBuffer)
{
  return MEMORY[0x1E0CA8B38](pixelBuffer);
}

size_t CVPixelBufferGetPlaneCount(CVPixelBufferRef pixelBuffer)
{
  return MEMORY[0x1E0CA8B40](pixelBuffer);
}

size_t CVPixelBufferGetWidth(CVPixelBufferRef pixelBuffer)
{
  return MEMORY[0x1E0CA8B50](pixelBuffer);
}

size_t CVPixelBufferGetWidthOfPlane(CVPixelBufferRef pixelBuffer, size_t planeIndex)
{
  return MEMORY[0x1E0CA8B58](pixelBuffer, planeIndex);
}

Boolean CVPixelBufferIsPlanar(CVPixelBufferRef pixelBuffer)
{
  return MEMORY[0x1E0CA8B68](pixelBuffer);
}

CVReturn CVPixelBufferLockBaseAddress(CVPixelBufferRef pixelBuffer, CVPixelBufferLockFlags lockFlags)
{
  return MEMORY[0x1E0CA8B70](pixelBuffer, lockFlags);
}

void CVPixelBufferRelease(CVPixelBufferRef texture)
{
  MEMORY[0x1E0CA8BF0](texture);
}

CVPixelBufferRef CVPixelBufferRetain(CVPixelBufferRef texture)
{
  return (CVPixelBufferRef)MEMORY[0x1E0CA8BF8](texture);
}

CVReturn CVPixelBufferUnlockBaseAddress(CVPixelBufferRef pixelBuffer, CVPixelBufferLockFlags unlockFlags)
{
  return MEMORY[0x1E0CA8C00](pixelBuffer, unlockFlags);
}

CFTypeRef IORegistryEntrySearchCFProperty(io_registry_entry_t entry, const io_name_t plane, CFStringRef key, CFAllocatorRef allocator, IOOptionBits options)
{
  return (CFTypeRef)MEMORY[0x1E0CBB9A0](*(_QWORD *)&entry, plane, key, allocator, *(_QWORD *)&options);
}

io_service_t IOServiceGetMatchingService(mach_port_t mainPort, CFDictionaryRef matching)
{
  return MEMORY[0x1E0CBB9E0](*(_QWORD *)&mainPort, matching);
}

CFMutableDictionaryRef IOServiceMatching(const char *name)
{
  return (CFMutableDictionaryRef)MEMORY[0x1E0CBBA00](name);
}

uint64_t IOSurfaceAcceleratorCreate()
{
  return MEMORY[0x1E0D3A1D0]();
}

uint64_t IOSurfaceAcceleratorTransformSurface()
{
  return MEMORY[0x1E0D3A200]();
}

void *__cdecl IOSurfaceGetBaseAddress(IOSurfaceRef buffer)
{
  return (void *)MEMORY[0x1E0CBBB40](buffer);
}

size_t IOSurfaceGetBytesPerRow(IOSurfaceRef buffer)
{
  return MEMORY[0x1E0CBBB90](buffer);
}

size_t IOSurfaceGetHeight(IOSurfaceRef buffer)
{
  return MEMORY[0x1E0CBBC28](buffer);
}

OSType IOSurfaceGetPixelFormat(IOSurfaceRef buffer)
{
  return MEMORY[0x1E0CBBC68](buffer);
}

size_t IOSurfaceGetWidth(IOSurfaceRef buffer)
{
  return MEMORY[0x1E0CBBCE0](buffer);
}

kern_return_t IOSurfaceLock(IOSurfaceRef buffer, IOSurfaceLockOptions options, uint32_t *seed)
{
  return MEMORY[0x1E0CBBD28](buffer, *(_QWORD *)&options, seed);
}

void IOSurfaceSetValue(IOSurfaceRef buffer, CFStringRef key, CFTypeRef value)
{
  MEMORY[0x1E0CBBE40](buffer, key, value);
}

kern_return_t IOSurfaceUnlock(IOSurfaceRef buffer, IOSurfaceLockOptions options, uint32_t *seed)
{
  return MEMORY[0x1E0CBBE88](buffer, *(_QWORD *)&options, seed);
}

uint64_t MGGetBoolAnswer()
{
  return MEMORY[0x1E0DE2B50]();
}

uint64_t MGGetStringAnswer()
{
  return MEMORY[0x1E0DE2B80]();
}

id MTLCreateSystemDefaultDevice(void)
{
  return (id)MEMORY[0x1E0CC6980]();
}

void NSLog(NSString *format, ...)
{
  MEMORY[0x1E0CB2D88](format);
}

uint64_t VTImageRotationSessionCreate()
{
  return MEMORY[0x1E0CECB88]();
}

uint64_t VTImageRotationSessionInvalidate()
{
  return MEMORY[0x1E0CECB90]();
}

uint64_t VTImageRotationSessionTransferImage()
{
  return MEMORY[0x1E0CECBA8]();
}

OSStatus VTPixelTransferSessionCreate(CFAllocatorRef allocator, VTPixelTransferSessionRef *pixelTransferSessionOut)
{
  return MEMORY[0x1E0CECD18](allocator, pixelTransferSessionOut);
}

void VTPixelTransferSessionInvalidate(VTPixelTransferSessionRef session)
{
  MEMORY[0x1E0CECD28](session);
}

OSStatus VTPixelTransferSessionTransferImage(VTPixelTransferSessionRef session, CVPixelBufferRef sourceBuffer, CVPixelBufferRef destinationBuffer)
{
  return MEMORY[0x1E0CECD38](session, sourceBuffer, destinationBuffer);
}

OSStatus VTSessionCopyProperty(VTSessionRef session, CFStringRef propertyKey, CFAllocatorRef allocator, void *propertyValueOut)
{
  return MEMORY[0x1E0CECD68](session, propertyKey, allocator, propertyValueOut);
}

OSStatus VTSessionSetProperty(VTSessionRef session, CFStringRef propertyKey, CFTypeRef propertyValue)
{
  return MEMORY[0x1E0CECD80](session, propertyKey, propertyValue);
}

uint64_t _CFRuntimeCreateInstance()
{
  return MEMORY[0x1E0C9A498]();
}

uint64_t _CFRuntimeRegisterClass()
{
  return MEMORY[0x1E0C9A4B0]();
}

void _Unwind_Resume(_Unwind_Exception *exception_object)
{
  MEMORY[0x1E0C80A20](exception_object);
}

uint64_t cva::ItemHandler::createData(cva::ItemHandler *this, const __CFData *a2)
{
  return MEMORY[0x1E0D15488](this, a2);
}

uint64_t cva::ItemHandler::createValue<std::string>()
{
  return off_1E8293658();
}

uint64_t cva::ItemHandler::createValue<BOOL>()
{
  return off_1E8293660();
}

uint64_t cva::ItemHandler::createValue<double>()
{
  return off_1E8293668();
}

uint64_t cva::ItemHandler::createValue<float>()
{
  return off_1E8293670();
}

uint64_t cva::ItemHandler::createValue<int>()
{
  return off_1E8293678();
}

uint64_t cva::ItemHandler::createValue<unsigned int>()
{
  return off_1E8293680();
}

uint64_t cva::ItemHandler::createValue<unsigned long long>()
{
  return off_1E8293688();
}

uint64_t cva::ItemHandler::createMatrix<float>()
{
  return off_1E8293690();
}

uint64_t cva::ItemHandler::createVector<float>()
{
  return off_1E8293698();
}

uint64_t cva::ItemHandler::createVector<int>()
{
  return off_1E82936A0();
}

uint64_t cva::ItemHandler::createVector<unsigned int>()
{
  return off_1E82936A8();
}

uint64_t cva::ItemHandler::ItemHandler(cva::ItemHandler *this, const void *a2)
{
  return MEMORY[0x1E0D15490](this, a2);
}

uint64_t cva::ItemHandler::ItemHandler()
{
  return MEMORY[0x1E0D15498]();
}

{
  return MEMORY[0x1E0D154A0]();
}

void cva::ItemHandler::~ItemHandler(cva::ItemHandler *this)
{
  MEMORY[0x1E0D154A8](this);
}

uint64_t cva::ArrayHandler::addItem(cva::ArrayHandler *this, const cva::ItemHandler *a2)
{
  return MEMORY[0x1E0D154B0](this, a2);
}

uint64_t cva::ArrayHandler::ArrayHandler(cva::ArrayHandler *this)
{
  return MEMORY[0x1E0D154B8](this);
}

void cva::ArrayHandler::~ArrayHandler(cva::ArrayHandler *this)
{
  MEMORY[0x1E0D154C0](this);
}

uint64_t cva::DictionaryHandler::removeItem(cva::DictionaryHandler *this, const char *a2)
{
  return MEMORY[0x1E0D154C8](this, a2);
}

uint64_t cva::DictionaryHandler::readJsonFile()
{
  return MEMORY[0x1E0D154D0]();
}

uint64_t cva::DictionaryHandler::setItem(cva::DictionaryHandler *this, const __CFString *a2, const cva::ItemHandler *a3)
{
  return MEMORY[0x1E0D154D8](this, a2, a3);
}

uint64_t cva::DictionaryHandler::setItem(cva::DictionaryHandler *this, const char *a2, const cva::ItemHandler *a3)
{
  return MEMORY[0x1E0D154E0](this, a2, a3);
}

uint64_t cva::DictionaryHandler::DictionaryHandler()
{
  return MEMORY[0x1E0D154E8]();
}

uint64_t cva::DictionaryHandler::DictionaryHandler(cva::DictionaryHandler *this, __CFDictionary *a2)
{
  return MEMORY[0x1E0D154F0](this, a2);
}

uint64_t cva::DictionaryHandler::DictionaryHandler(cva::DictionaryHandler *this, const __CFDictionary *a2)
{
  return MEMORY[0x1E0D154F8](this, a2);
}

uint64_t cva::DictionaryHandler::DictionaryHandler(cva::DictionaryHandler *this)
{
  return MEMORY[0x1E0D15500](this);
}

void cva::DictionaryHandler::~DictionaryHandler(cva::DictionaryHandler *this)
{
  MEMORY[0x1E0D15508](this);
}

uint64_t cva::DictionaryHandler::operator=()
{
  return MEMORY[0x1E0D15510]();
}

uint64_t cva::pixelBufferCreate(cva *this, uint64_t a2, uint64_t a3, uint64_t a4, __CVBuffer **a5, unsigned int a6, unsigned int a7, unsigned int a8, BOOL a9, BOOL a10)
{
  return MEMORY[0x1E0D15518](this, a2, a3, a4, a5);
}

uint64_t cva::imageViewFromPixelBuffer<float>()
{
  return off_1E8293740();
}

uint64_t cva::imageViewFromPixelBuffer<unsigned char>()
{
  return off_1E8293748();
}

uint64_t cva::imageViewFromPixelBuffer<unsigned short>()
{
  return off_1E8293750();
}

uint64_t cva::pixelBufferConvertARGBToYpCbCr()
{
  return MEMORY[0x1E0D15520]();
}

uint64_t cva::createCVPixelBufferFromImageCopy<unsigned char>()
{
  return off_1E8293760();
}

uint64_t cva::Path::concatenate()
{
  return MEMORY[0x1E0D15528]();
}

uint64_t cva::Path::append()
{
  return MEMORY[0x1E0D15530]();
}

uint64_t cva::Path::Path(cva::Path *this, const char *a2)
{
  return MEMORY[0x1E0D15538](this, a2);
}

uint64_t cva::Path::Path()
{
  return MEMORY[0x1E0D15540]();
}

uint64_t cva::Path::Path(cva::Path *this, const cva::Path *a2)
{
  return MEMORY[0x1E0D15548](this, a2);
}

void cva::Path::~Path(cva::Path *this)
{
  MEMORY[0x1E0D15550](this);
}

uint64_t cva::utils::string::iends_with()
{
  return MEMORY[0x1E0D15558]();
}

uint64_t cva::utils::string::join()
{
  return MEMORY[0x1E0D15560]();
}

uint64_t cva::utils::string::split()
{
  return MEMORY[0x1E0D15568]();
}

uint64_t cva::utils::string::iequals()
{
  return MEMORY[0x1E0D15570]();
}

uint64_t cva::utils::string::to_lower()
{
  return MEMORY[0x1E0D15578]();
}

uint64_t cva::VecLib<float>::gemm()
{
  return off_1E82937C0();
}

uint64_t cva::Sprintf::sprintf(cva::Sprintf *this, const char *a2, ...)
{
  return MEMORY[0x1E0D155B0](this, a2);
}

uint64_t cva::ItemHandler::getDictionary(cva::ItemHandler *this)
{
  return MEMORY[0x1E0D155D0](this);
}

uint64_t cva::ItemHandler::isMatrixTypeOfSize(cva::ItemHandler *this)
{
  return MEMORY[0x1E0D155D8](this);
}

uint64_t cva::ItemHandler::getData(cva::ItemHandler *this)
{
  return MEMORY[0x1E0D155E0](this);
}

uint64_t cva::ItemHandler::getArray(cva::ItemHandler *this)
{
  return MEMORY[0x1E0D155E8](this);
}

uint64_t cva::ItemHandler::getValue<std::string>()
{
  return off_1E82937F0();
}

uint64_t cva::ItemHandler::getValue<BOOL>()
{
  return off_1E82937F8();
}

uint64_t cva::ItemHandler::getValue<double>()
{
  return off_1E8293800();
}

uint64_t cva::ItemHandler::getValue<float>()
{
  return off_1E8293808();
}

uint64_t cva::ItemHandler::getValue<int>()
{
  return off_1E8293810();
}

uint64_t cva::ItemHandler::getValue<unsigned int>()
{
  return off_1E8293818();
}

uint64_t cva::ItemHandler::getValue<unsigned long long>()
{
  return off_1E8293820();
}

uint64_t cva::ItemHandler::getMatrix<float>()
{
  return off_1E8293828();
}

uint64_t cva::ItemHandler::getObject(cva::ItemHandler *this)
{
  return MEMORY[0x1E0D155F0](this);
}

uint64_t cva::ItemHandler::getVector<float>()
{
  return off_1E8293838();
}

uint64_t cva::ItemHandler::getVector<int>()
{
  return off_1E8293840();
}

uint64_t cva::ItemHandler::getVector<unsigned int>()
{
  return off_1E8293848();
}

uint64_t cva::ArrayHandler::item(cva::ArrayHandler *this)
{
  return MEMORY[0x1E0D155F8](this);
}

uint64_t cva::ArrayHandler::size(cva::ArrayHandler *this)
{
  return MEMORY[0x1E0D15600](this);
}

uint64_t cva::DictionaryHandler::getDictionary(cva::DictionaryHandler *this)
{
  return MEMORY[0x1E0D15608](this);
}

uint64_t cva::DictionaryHandler::item(cva::DictionaryHandler *this, const __CFString *a2)
{
  return MEMORY[0x1E0D15610](this, a2);
}

uint64_t cva::DictionaryHandler::item(cva::DictionaryHandler *this, const char *a2)
{
  return MEMORY[0x1E0D15618](this, a2);
}

uint64_t cva::DictionaryHandler::hasKey(cva::DictionaryHandler *this, const __CFString *a2)
{
  return MEMORY[0x1E0D15620](this, a2);
}

uint64_t cva::DictionaryHandler::hasKey(cva::DictionaryHandler *this, const char *a2)
{
  return MEMORY[0x1E0D15628](this, a2);
}

uint64_t cva::DictionaryHandler::getKeys(cva::DictionaryHandler *this)
{
  return MEMORY[0x1E0D15630](this);
}

uint64_t cva::Path::isAbsolute(cva::Path *this)
{
  return MEMORY[0x1E0D15638](this);
}

uint64_t cva::Path::isDirectory(cva::Path *this)
{
  return MEMORY[0x1E0D15640](this);
}

uint64_t cva::Path::isRegularFile(cva::Path *this)
{
  return MEMORY[0x1E0D15648](this);
}

uint64_t cva::Path::stem(cva::Path *this)
{
  return MEMORY[0x1E0D15650](this);
}

uint64_t cva::Path::exists(cva::Path *this)
{
  return MEMORY[0x1E0D15658](this);
}

uint64_t cva::Path::string(cva::Path *this)
{
  return MEMORY[0x1E0D15660](this);
}

uint64_t cva::Path::absolute(cva::Path *this)
{
  return MEMORY[0x1E0D15668](this);
}

uint64_t cva::Path::filename(cva::Path *this)
{
  return MEMORY[0x1E0D15670](this);
}

uint64_t cva::Path::directory(cva::Path *this)
{
  return MEMORY[0x1E0D15678](this);
}

uint64_t cva::Path::extension(cva::Path *this)
{
  return MEMORY[0x1E0D15680](this);
}

const std::locale::facet *__cdecl std::locale::use_facet(const std::locale *this, std::locale::id *a2)
{
  return (const std::locale::facet *)MEMORY[0x1E0DE4248](this, a2);
}

std::locale std::ios_base::getloc(const std::ios_base *this)
{
  return (std::locale)MEMORY[0x1E0DE4258](this);
}

std::exception_ptr *__cdecl std::exception_ptr::exception_ptr(std::exception_ptr *this, const std::exception_ptr *a2)
{
  return (std::exception_ptr *)MEMORY[0x1E0DE42F0](this, a2);
}

void std::exception_ptr::~exception_ptr(std::exception_ptr *this)
{
  MEMORY[0x1E0DE42F8](this);
}

size_t std::__next_prime(size_t __n)
{
  return MEMORY[0x1E0DE43E8](__n);
}

std::string *__cdecl std::string::append(std::string *this, const std::string::value_type *__s, std::string::size_type __n)
{
  return (std::string *)MEMORY[0x1E0DE4428](this, __s, __n);
}

std::string *__cdecl std::string::append(std::string *this, std::string::size_type __n, std::string::value_type __c)
{
  return (std::string *)MEMORY[0x1E0DE4438](this, __n, __c);
}

std::string *__cdecl std::string::insert(std::string *this, std::string::size_type __pos, const std::string::value_type *__s, std::string::size_type __n)
{
  return (std::string *)MEMORY[0x1E0DE4470](this, __pos, __s, __n);
}

void std::string::reserve(std::string *this, std::string::size_type __requested_capacity)
{
  MEMORY[0x1E0DE44A8](this, __requested_capacity);
}

void std::string::push_back(std::string *this, std::string::value_type __c)
{
  MEMORY[0x1E0DE44B8](this, __c);
}

std::future_error *__cdecl std::future_error::future_error(std::future_error *this, std::error_code __ec)
{
  return (std::future_error *)MEMORY[0x1E0DE4538](this, *(_QWORD *)&__ec.__val_, __ec.__cat_);
}

uint64_t std::filebuf::open()
{
  return MEMORY[0x1E0DE4590]();
}

uint64_t std::filebuf::close()
{
  return MEMORY[0x1E0DE4598]();
}

uint64_t std::filebuf::basic_filebuf()
{
  return MEMORY[0x1E0DE45A8]();
}

uint64_t std::filebuf::~filebuf()
{
  return MEMORY[0x1E0DE45B0]();
}

uint64_t std::istream::read()
{
  return MEMORY[0x1E0DE45D0]();
}

uint64_t std::istream::seekg()
{
  return MEMORY[0x1E0DE45E0]();
}

{
  return MEMORY[0x1E0DE45E8]();
}

uint64_t std::istream::tellg()
{
  return MEMORY[0x1E0DE45F0]();
}

uint64_t std::istream::operator>>()
{
  return MEMORY[0x1E0DE4640]();
}

uint64_t std::ostream::flush()
{
  return MEMORY[0x1E0DE46A0]();
}

uint64_t std::ostream::write()
{
  return MEMORY[0x1E0DE46A8]();
}

uint64_t std::ostream::sentry::sentry()
{
  return MEMORY[0x1E0DE46B0]();
}

uint64_t std::ostream::sentry::~sentry()
{
  return MEMORY[0x1E0DE46B8]();
}

uint64_t std::ostream::~ostream()
{
  return MEMORY[0x1E0DE46C8]();
}

uint64_t std::ostream::operator<<()
{
  return MEMORY[0x1E0DE46E0]();
}

{
  return MEMORY[0x1E0DE46E8]();
}

{
  return MEMORY[0x1E0DE46F8]();
}

{
  return MEMORY[0x1E0DE4700]();
}

void std::__shared_count::~__shared_count(std::__shared_count *this)
{
  MEMORY[0x1E0DE4790](this);
}

uint64_t std::iostream::~basic_iostream()
{
  return MEMORY[0x1E0DE47A8]();
}

std::__thread_struct *__cdecl std::__thread_struct::__thread_struct(std::__thread_struct *this)
{
  return (std::__thread_struct *)MEMORY[0x1E0DE47D0](this);
}

void std::__thread_struct::~__thread_struct(std::__thread_struct *this)
{
  MEMORY[0x1E0DE47D8](this);
}

uint64_t std::streambuf::basic_streambuf()
{
  return MEMORY[0x1E0DE47E0]();
}

uint64_t std::streambuf::~streambuf()
{
  return MEMORY[0x1E0DE47E8]();
}

const std::error_category *std::future_category(void)
{
  return (const std::error_category *)MEMORY[0x1E0DE4818]();
}

void std::__assoc_sub_state::__sub_wait(std::__assoc_sub_state *this, std::unique_lock<std::mutex> *__lk)
{
  MEMORY[0x1E0DE4860](this, __lk);
}

void std::__assoc_sub_state::wait(std::__assoc_sub_state *this)
{
  MEMORY[0x1E0DE4870](this);
}

void std::condition_variable::notify_all(std::condition_variable *this)
{
  MEMORY[0x1E0DE4890](this);
}

void std::condition_variable::notify_one(std::condition_variable *this)
{
  MEMORY[0x1E0DE4898](this);
}

void std::condition_variable::__do_timed_wait(std::condition_variable *this, std::unique_lock<std::mutex> *__lk, std::chrono::time_point<std::chrono::system_clock, std::chrono::duration<long long, std::ratio<1, 1000000000>>> a3)
{
  MEMORY[0x1E0DE48A0](this, __lk, a3.__d_.__rep_);
}

void std::condition_variable::wait(std::condition_variable *this, std::unique_lock<std::mutex> *__lk)
{
  MEMORY[0x1E0DE48A8](this, __lk);
}

void std::condition_variable::~condition_variable(std::condition_variable *this)
{
  MEMORY[0x1E0DE48B0](this);
}

void std::__shared_weak_count::__release_weak(std::__shared_weak_count *this)
{
  MEMORY[0x1E0DE48F0](this);
}

std::__shared_weak_count *__cdecl std::__shared_weak_count::lock(std::__shared_weak_count *this)
{
  return (std::__shared_weak_count *)MEMORY[0x1E0DE48F8](this);
}

void std::__shared_weak_count::~__shared_weak_count(std::__shared_weak_count *this)
{
  MEMORY[0x1E0DE4900](this);
}

std::__thread_specific_ptr<std::__thread_struct> *std::__thread_local_data(void)
{
  return (std::__thread_specific_ptr<std::__thread_struct> *)MEMORY[0x1E0DE4908]();
}

void std::__throw_system_error(int __ev, const char *__what_arg)
{
  MEMORY[0x1E0DE4920](*(_QWORD *)&__ev, __what_arg);
}

void std::__libcpp_verbose_abort(const char *__format, ...)
{
  MEMORY[0x1E0DE4930](__format);
}

void std::mutex::lock(std::mutex *this)
{
  MEMORY[0x1E0DE4AA0](this);
}

void std::mutex::unlock(std::mutex *this)
{
  MEMORY[0x1E0DE4AA8](this);
}

void std::mutex::~mutex(std::mutex *this)
{
  MEMORY[0x1E0DE4AB8](this);
}

std::chrono::steady_clock::time_point std::chrono::steady_clock::now(void)
{
  return (std::chrono::steady_clock::time_point)MEMORY[0x1E0DE4B38]();
}

std::chrono::system_clock::time_point std::chrono::system_clock::now(void)
{
  return (std::chrono::system_clock::time_point)MEMORY[0x1E0DE4B48]();
}

time_t std::chrono::system_clock::to_time_t(const std::chrono::system_clock::time_point *__t)
{
  return MEMORY[0x1E0DE4B50](__t);
}

void std::locale::~locale(std::locale *this)
{
  MEMORY[0x1E0DE4B98](this);
}

void std::thread::join(std::thread *this)
{
  MEMORY[0x1E0DE4BB8](this);
}

void std::thread::detach(std::thread *this)
{
  MEMORY[0x1E0DE4BC0](this);
}

void std::thread::~thread(std::thread *this)
{
  MEMORY[0x1E0DE4BC8](this);
}

void std::ios_base::init(std::ios_base *this, void *__sb)
{
  MEMORY[0x1E0DE4C68](this, __sb);
}

void std::ios_base::clear(std::ios_base *this, std::ios_base::iostate __state)
{
  MEMORY[0x1E0DE4C80](this, *(_QWORD *)&__state);
}

uint64_t std::ios::~ios()
{
  return MEMORY[0x1E0DE4D28]();
}

std::string *__cdecl std::to_string(std::string *__return_ptr retstr, int __val)
{
  return (std::string *)MEMORY[0x1E0DE4D58](retstr, *(_QWORD *)&__val);
}

void std::rethrow_exception(std::exception_ptr a1)
{
  MEMORY[0x1E0DE4DF8](a1.__ptr_);
}

void std::terminate(void)
{
  MEMORY[0x1E0DE4E18]();
}

uint64_t operator delete[]()
{
  return off_1E8293B28();
}

void operator delete(void *__p)
{
  off_1E8293B30(__p);
}

uint64_t operator delete()
{
  return off_1E8293B38();
}

uint64_t operator new[]()
{
  return off_1E8293B40();
}

void *__cdecl operator new(size_t __sz)
{
  return (void *)off_1E8293B48(__sz);
}

void *__cdecl operator new(size_t __sz, const std::nothrow_t *a2)
{
  return (void *)off_1E8293B50(__sz, a2);
}

uint64_t operator new()
{
  return off_1E8293B58();
}

void __cxa_guard_abort(__guard *a1)
{
  MEMORY[0x1E0DE50B0](a1);
}

int __cxa_guard_acquire(__guard *a1)
{
  return MEMORY[0x1E0DE50B8](a1);
}

void __cxa_guard_release(__guard *a1)
{
  MEMORY[0x1E0DE50C0](a1);
}

simd_float2x2 __invert_f2(simd_float2x2 a1)
{
  simd_float2 v1;
  simd_float2 v2;
  simd_float2x2 result;

  MEMORY[0x1E0C80B28]((__n128)a1, *(__n128 *)((char *)&a1 + 8));
  result.columns[1] = v2;
  result.columns[0] = v1;
  return result;
}

simd_float3x3 __invert_f3(simd_float3x3 a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  simd_float3x3 result;

  MEMORY[0x1E0C80B30]((__n128)a1.columns[0], (__n128)a1.columns[1], (__n128)a1.columns[2]);
  result.columns[2].i64[1] = v6;
  result.columns[2].i64[0] = v5;
  result.columns[1].i64[1] = v4;
  result.columns[1].i64[0] = v3;
  result.columns[0].i64[1] = v2;
  result.columns[0].i64[0] = v1;
  return result;
}

__float2 __sincosf_stret(float a1)
{
  float v1;
  float v2;
  __float2 result;

  MEMORY[0x1E0C80BD0](a1);
  result.__cosval = v2;
  result.__sinval = v1;
  return result;
}

__darwin_ct_rune_t __tolower(__darwin_ct_rune_t a1)
{
  return MEMORY[0x1E0C80C70](*(_QWORD *)&a1);
}

uint64_t _os_crash()
{
  return MEMORY[0x1E0C81000]();
}

void _os_log_debug_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x1E0C81020](dso, log, type, format, buf, *(_QWORD *)&size);
}

void _os_log_error_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x1E0C81038](dso, log, type, format, buf, *(_QWORD *)&size);
}

void _os_log_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x1E0C81048](dso, log, type, format, buf, *(_QWORD *)&size);
}

void abort(void)
{
  MEMORY[0x1E0C813A8]();
}

float acosf(float a1)
{
  float result;

  MEMORY[0x1E0C81508](a1);
  return result;
}

float asinf(float a1)
{
  float result;

  MEMORY[0x1E0C815A0](a1);
  return result;
}

float atan2f(float a1, float a2)
{
  float result;

  MEMORY[0x1E0C81628](a1, a2);
  return result;
}

void bzero(void *a1, size_t a2)
{
  MEMORY[0x1E0C81758](a1, a2);
}

uint64_t c_network_get_input_names()
{
  return MEMORY[0x1E0D1F880]();
}

uint64_t c_network_get_output_names()
{
  return MEMORY[0x1E0D1F898]();
}

float cosf(float a1)
{
  float result;

  MEMORY[0x1E0C82B48](a1);
  return result;
}

void dispatch_activate(dispatch_object_t object)
{
  MEMORY[0x1E0C82BC0](object);
}

void dispatch_once(dispatch_once_t *predicate, dispatch_block_t block)
{
  MEMORY[0x1E0C82E08](predicate, block);
}

dispatch_queue_t dispatch_queue_create_with_target_V2(const char *label, dispatch_queue_attr_t attr, dispatch_queue_t target)
{
  return (dispatch_queue_t)MEMORY[0x1E0C82E50](label, attr, target);
}

dispatch_workloop_t dispatch_workloop_create_inactive(const char *label)
{
  return (dispatch_workloop_t)MEMORY[0x1E0C82FE0](label);
}

uint64_t dispatch_workloop_set_scheduler_priority()
{
  return MEMORY[0x1E0C83010]();
}

uint64_t e5rt_buffer_object_create_from_iosurface()
{
  return MEMORY[0x1E0D1F908]();
}

uint64_t e5rt_buffer_object_get_iosurface()
{
  return MEMORY[0x1E0D1F920]();
}

uint64_t e5rt_buffer_object_release()
{
  return MEMORY[0x1E0D1F938]();
}

uint64_t e5rt_e5_compiler_compile()
{
  return MEMORY[0x1E0D1F960]();
}

uint64_t e5rt_e5_compiler_create()
{
  return MEMORY[0x1E0D1F978]();
}

uint64_t e5rt_e5_compiler_options_create()
{
  return MEMORY[0x1E0D1F990]();
}

uint64_t e5rt_e5_compiler_options_release()
{
  return MEMORY[0x1E0D1F9B0]();
}

uint64_t e5rt_e5_compiler_options_set_compute_device_types_mask()
{
  return MEMORY[0x1E0D1F9C0]();
}

uint64_t e5rt_e5_compiler_release()
{
  return MEMORY[0x1E0D1FA50]();
}

uint64_t e5rt_execution_stream_create()
{
  return MEMORY[0x1E0D1FA80]();
}

uint64_t e5rt_execution_stream_encode_operation()
{
  return MEMORY[0x1E0D1FA90]();
}

uint64_t e5rt_execution_stream_execute_sync()
{
  return MEMORY[0x1E0D1FAA0]();
}

uint64_t e5rt_execution_stream_operation_create_precompiled_compute_operation()
{
  return MEMORY[0x1E0D1FAD8]();
}

uint64_t e5rt_execution_stream_operation_create_precompiled_compute_operation_with_options()
{
  return MEMORY[0x1E0D1FAF0]();
}

uint64_t e5rt_execution_stream_operation_get_input_names()
{
  return MEMORY[0x1E0D1FB10]();
}

uint64_t e5rt_execution_stream_operation_get_num_inputs()
{
  return MEMORY[0x1E0D1FB20]();
}

uint64_t e5rt_execution_stream_operation_get_num_outputs()
{
  return MEMORY[0x1E0D1FB38]();
}

uint64_t e5rt_execution_stream_operation_get_output_names()
{
  return MEMORY[0x1E0D1FB40]();
}

uint64_t e5rt_execution_stream_operation_prepare_op_for_encode()
{
  return MEMORY[0x1E0D1FB58]();
}

uint64_t e5rt_execution_stream_operation_release()
{
  return MEMORY[0x1E0D1FB68]();
}

uint64_t e5rt_execution_stream_operation_retain_input_port()
{
  return MEMORY[0x1E0D1FB90]();
}

uint64_t e5rt_execution_stream_operation_retain_output_port()
{
  return MEMORY[0x1E0D1FBA0]();
}

uint64_t e5rt_execution_stream_release()
{
  return MEMORY[0x1E0D1FBB8]();
}

uint64_t e5rt_execution_stream_reset()
{
  return MEMORY[0x1E0D1FBC8]();
}

uint64_t e5rt_io_port_bind_buffer_object()
{
  return MEMORY[0x1E0D1FC08]();
}

uint64_t e5rt_io_port_is_tensor()
{
  return MEMORY[0x1E0D1FC38]();
}

uint64_t e5rt_io_port_release()
{
  return MEMORY[0x1E0D1FC48]();
}

uint64_t e5rt_io_port_retain_tensor_desc()
{
  return MEMORY[0x1E0D1FC68]();
}

uint64_t e5rt_precompiled_compute_op_create_options_create_with_program_function()
{
  return MEMORY[0x1E0D1FC90]();
}

uint64_t e5rt_precompiled_compute_op_create_options_release()
{
  return MEMORY[0x1E0D1FCA0]();
}

uint64_t e5rt_program_function_release()
{
  return MEMORY[0x1E0D1FCE8]();
}

uint64_t e5rt_program_library_release()
{
  return MEMORY[0x1E0D1FD60]();
}

uint64_t e5rt_program_library_retain_program_function()
{
  return MEMORY[0x1E0D1FD68]();
}

uint64_t e5rt_tensor_desc_alloc_buffer_object()
{
  return MEMORY[0x1E0D1FDC8]();
}

uint64_t e5rt_tensor_desc_dtype_get_component_dtype()
{
  return MEMORY[0x1E0D1FDF8]();
}

uint64_t e5rt_tensor_desc_dtype_get_component_pack()
{
  return MEMORY[0x1E0D1FE08]();
}

uint64_t e5rt_tensor_desc_dtype_get_component_size()
{
  return MEMORY[0x1E0D1FE18]();
}

uint64_t e5rt_tensor_desc_dtype_get_element_size()
{
  return MEMORY[0x1E0D1FE20]();
}

uint64_t e5rt_tensor_desc_dtype_get_num_components()
{
  return MEMORY[0x1E0D1FE28]();
}

uint64_t e5rt_tensor_desc_dtype_release()
{
  return MEMORY[0x1E0D1FE38]();
}

uint64_t e5rt_tensor_desc_get_shape()
{
  return MEMORY[0x1E0D1FE50]();
}

uint64_t e5rt_tensor_desc_get_strides()
{
  return MEMORY[0x1E0D1FE68]();
}

uint64_t e5rt_tensor_desc_release()
{
  return MEMORY[0x1E0D1FE70]();
}

uint64_t e5rt_tensor_desc_retain_dtype()
{
  return MEMORY[0x1E0D1FE80]();
}

uint64_t espresso_context_destroy()
{
  return MEMORY[0x1E0D1FF10]();
}

uint64_t espresso_create_context()
{
  return MEMORY[0x1E0D1FF38]();
}

uint64_t espresso_create_plan()
{
  return MEMORY[0x1E0D1FF40]();
}

uint64_t espresso_get_status_string()
{
  return MEMORY[0x1E0D1FFB0]();
}

uint64_t espresso_network_bind_buffer()
{
  return MEMORY[0x1E0D1FFB8]();
}

uint64_t espresso_network_declare_input()
{
  return MEMORY[0x1E0D20038]();
}

uint64_t espresso_network_declare_output()
{
  return MEMORY[0x1E0D20040]();
}

uint64_t espresso_network_select_configuration()
{
  return MEMORY[0x1E0D20080]();
}

uint64_t espresso_plan_add_network()
{
  return MEMORY[0x1E0D200B0]();
}

uint64_t espresso_plan_build()
{
  return MEMORY[0x1E0D200C8]();
}

uint64_t espresso_plan_destroy()
{
  return MEMORY[0x1E0D200E8]();
}

uint64_t espresso_plan_execute_sync()
{
  return MEMORY[0x1E0D20100]();
}

long double exp(long double __x)
{
  long double result;

  MEMORY[0x1E0C83280](__x);
  return result;
}

float expf(float a1)
{
  float result;

  MEMORY[0x1E0C83298](a1);
  return result;
}

int fclose(FILE *a1)
{
  return MEMORY[0x1E0C832F8](a1);
}

int fflush(FILE *a1)
{
  return MEMORY[0x1E0C83370](a1);
}

float fmodf(float a1, float a2)
{
  float result;

  MEMORY[0x1E0C83448](a1, a2);
  return result;
}

int fputs(const char *a1, FILE *a2)
{
  return MEMORY[0x1E0C83490](a1, a2);
}

void free(void *a1)
{
  MEMORY[0x1E0C834A8](a1);
}

float hypotf(float a1, float a2)
{
  float result;

  MEMORY[0x1E0C838F0](a1, a2);
  return result;
}

uint64_t kdebug_trace()
{
  return MEMORY[0x1E0C83A20]();
}

tm *__cdecl localtime_r(const time_t *a1, tm *a2)
{
  return (tm *)MEMORY[0x1E0C83BB0](a1, a2);
}

float log2f(float a1)
{
  float result;

  MEMORY[0x1E0C83BF0](a1);
  return result;
}

mach_port_t mach_thread_self(void)
{
  return MEMORY[0x1E0C83DB0]();
}

void *__cdecl malloc_type_malloc(size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1E0C83F00](size, type_id);
}

int malloc_type_posix_memalign(void **memptr, size_t alignment, size_t size, malloc_type_id_t type_id)
{
  return MEMORY[0x1E0C83F08](memptr, alignment, size, type_id);
}

void *__cdecl memchr(void *__s, int __c, size_t __n)
{
  return (void *)MEMORY[0x1E0C84070](__s, *(_QWORD *)&__c, __n);
}

int memcmp(const void *__s1, const void *__s2, size_t __n)
{
  return MEMORY[0x1E0C84078](__s1, __s2, __n);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return (void *)MEMORY[0x1E0C84088](__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return (void *)MEMORY[0x1E0C84098](__dst, __src, __len);
}

void *__cdecl memset(void *__b, int __c, size_t __len)
{
  return (void *)MEMORY[0x1E0C840B0](__b, *(_QWORD *)&__c, __len);
}

void memset_pattern16(void *__b, const void *__pattern16, size_t __len)
{
  MEMORY[0x1E0C840B8](__b, __pattern16, __len);
}

float nextafterf(float a1, float a2)
{
  float result;

  MEMORY[0x1E0C843B0](a1, a2);
  return result;
}

id objc_alloc(Class a1)
{
  return (id)MEMORY[0x1E0DE7BA8](a1);
}

uint64_t objc_alloc_init()
{
  return MEMORY[0x1E0DE7BB8]();
}

id objc_autorelease(id a1)
{
  return (id)MEMORY[0x1E0DE7BD0](a1);
}

void objc_autoreleasePoolPop(void *context)
{
  MEMORY[0x1E0DE7BD8](context);
}

void *objc_autoreleasePoolPush(void)
{
  return (void *)MEMORY[0x1E0DE7BE0]();
}

id objc_autoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x1E0DE7BE8](a1);
}

uint64_t objc_claimAutoreleasedReturnValue()
{
  return MEMORY[0x1E0DE7BF8]();
}

void objc_enumerationMutation(id obj)
{
  MEMORY[0x1E0DE7C90](obj);
}

id objc_msgSendSuper2(objc_super *a1, SEL a2, ...)
{
  return (id)MEMORY[0x1E0DE7D30](a1, a2);
}

uint64_t objc_opt_class()
{
  return MEMORY[0x1E0DE7D38]();
}

uint64_t objc_opt_new()
{
  return MEMORY[0x1E0DE7D48]();
}

void objc_release(id a1)
{
  MEMORY[0x1E0DE7D78](a1);
}

id objc_retain(id a1)
{
  return (id)MEMORY[0x1E0DE7E50](a1);
}

id objc_retainAutorelease(id a1)
{
  return (id)MEMORY[0x1E0DE7E58](a1);
}

id objc_retainAutoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x1E0DE7E60](a1);
}

id objc_retainBlock(id a1)
{
  return (id)MEMORY[0x1E0DE7E70](a1);
}

void objc_storeStrong(id *location, id obj)
{
  MEMORY[0x1E0DE7FB0](location, obj);
}

os_log_t os_log_create(const char *subsystem, const char *category)
{
  return (os_log_t)MEMORY[0x1E0C84728](subsystem, category);
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return MEMORY[0x1E0C84780](oslog, type);
}

void os_release(void *object)
{
  MEMORY[0x1E0C84910](object);
}

uint64_t os_variant_allows_internal_security_policies()
{
  return MEMORY[0x1E0C849D8]();
}

uint64_t os_workgroup_attr_set_flags()
{
  return MEMORY[0x1E0C84A20]();
}

uint64_t os_workgroup_create()
{
  return MEMORY[0x1E0C84A48]();
}

int os_workgroup_join(os_workgroup_t wg, os_workgroup_join_token_t token_out)
{
  return MEMORY[0x1E0C84AA0](wg, token_out);
}

void os_workgroup_leave(os_workgroup_t wg, os_workgroup_join_token_t token)
{
  MEMORY[0x1E0C84AA8](wg, token);
}

float powf(float a1, float a2)
{
  float result;

  MEMORY[0x1E0C84BC0](a1, a2);
  return result;
}

int printf(const char *a1, ...)
{
  return MEMORY[0x1E0C84BD0](a1);
}

int pthread_create(pthread_t *a1, const pthread_attr_t *a2, void *(__cdecl *a3)(void *), void *a4)
{
  return MEMORY[0x1E0C84D50](a1, a2, a3, a4);
}

int pthread_getschedparam(pthread_t a1, int *a2, sched_param *a3)
{
  return MEMORY[0x1E0C84DB8](a1, a2, a3);
}

pthread_t pthread_self(void)
{
  return (pthread_t)MEMORY[0x1E0C84ED8]();
}

uint64_t pthread_set_fixedpriority_self()
{
  return MEMORY[0x1E0C84EE8]();
}

uint64_t pthread_set_timeshare_self()
{
  return MEMORY[0x1E0C84EF8]();
}

int pthread_setname_np(const char *a1)
{
  return MEMORY[0x1E0C84F08](a1);
}

int pthread_setschedparam(pthread_t a1, int a2, const sched_param *a3)
{
  return MEMORY[0x1E0C84F10](a1, *(_QWORD *)&a2, a3);
}

int pthread_setspecific(pthread_key_t a1, const void *a2)
{
  return MEMORY[0x1E0C84F18](a1, a2);
}

int sched_get_priority_min(int a1)
{
  return MEMORY[0x1E0C85268](*(_QWORD *)&a1);
}

int snprintf(char *__str, size_t __size, const char *__format, ...)
{
  return MEMORY[0x1E0C85440](__str, __size, __format);
}

int sscanf(const char *a1, const char *a2, ...)
{
  return MEMORY[0x1E0C85498](a1, a2);
}

int strcmp(const char *__s1, const char *__s2)
{
  return MEMORY[0x1E0C85520](__s1, __s2);
}

size_t strftime(char *a1, size_t a2, const char *a3, const tm *a4)
{
  return MEMORY[0x1E0C85558](a1, a2, a3, a4);
}

size_t strlen(const char *__s)
{
  return MEMORY[0x1E0C85578](__s);
}

float tanf(float a1)
{
  float result;

  MEMORY[0x1E0C857F0](a1);
  return result;
}

kern_return_t thread_policy_get(thread_inspect_t thread, thread_policy_flavor_t flavor, thread_policy_t policy_info, mach_msg_type_number_t *policy_infoCnt, BOOLean_t *get_default)
{
  return MEMORY[0x1E0C85900](*(_QWORD *)&thread, *(_QWORD *)&flavor, policy_info, policy_infoCnt, get_default);
}

void uuid_generate(uuid_t out)
{
  MEMORY[0x1E0C85A18](out);
}

int uuid_parse(const uuid_string_t in, uuid_t uu)
{
  return MEMORY[0x1E0C85A38](in, uu);
}

void uuid_unparse_upper(const uuid_t uu, uuid_string_t out)
{
  MEMORY[0x1E0C85A50](uu, out);
}

vImage_Error vImageRotate90_Planar8(const vImage_Buffer *src, const vImage_Buffer *dest, uint8_t rotationConstant, Pixel_8 backColor, vImage_Flags flags)
{
  return MEMORY[0x1E0C8D688](src, dest, rotationConstant, backColor, *(_QWORD *)&flags);
}

int vsnprintf(char *__str, size_t __size, const char *__format, va_list a4)
{
  return MEMORY[0x1E0C85B98](__str, __size, __format, a4);
}

